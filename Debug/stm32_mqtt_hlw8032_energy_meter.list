
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000218fc  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003738  08031aa0  08031aa0  00031aa0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080351d8  080351d8  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  080351d8  080351d8  000351d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080351e0  080351e0  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080351e0  080351e0  000351e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080351e4  080351e4  000351e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  080351e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d81c  200002f8  080354e0  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000db14  080354e0  0004db14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f3bc  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007cb4  00000000  00000000  0006f727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002af0  00000000  00000000  000773e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002296  00000000  00000000  00079ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fdd5  00000000  00000000  0007c166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033f6d  00000000  00000000  0009bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa438  00000000  00000000  000cfea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cb34  00000000  00000000  0017a2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00186e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08031a84 	.word	0x08031a84

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	08031a84 	.word	0x08031a84

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	; 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9ba 	b.w	8011044 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9e08      	ldr	r6, [sp, #32]
 8010d82:	460d      	mov	r5, r1
 8010d84:	4604      	mov	r4, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14a      	bne.n	8010e22 <__udivmoddi4+0xa6>
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	4694      	mov	ip, r2
 8010d90:	d965      	bls.n	8010e5e <__udivmoddi4+0xe2>
 8010d92:	fab2 f382 	clz	r3, r2
 8010d96:	b143      	cbz	r3, 8010daa <__udivmoddi4+0x2e>
 8010d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8010d9c:	f1c3 0220 	rsb	r2, r3, #32
 8010da0:	409f      	lsls	r7, r3
 8010da2:	fa20 f202 	lsr.w	r2, r0, r2
 8010da6:	4317      	orrs	r7, r2
 8010da8:	409c      	lsls	r4, r3
 8010daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010dae:	fa1f f58c 	uxth.w	r5, ip
 8010db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8010db6:	0c22      	lsrs	r2, r4, #16
 8010db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8010dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010dc0:	fb01 f005 	mul.w	r0, r1, r5
 8010dc4:	4290      	cmp	r0, r2
 8010dc6:	d90a      	bls.n	8010dde <__udivmoddi4+0x62>
 8010dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8010dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8010dd0:	f080 811c 	bcs.w	801100c <__udivmoddi4+0x290>
 8010dd4:	4290      	cmp	r0, r2
 8010dd6:	f240 8119 	bls.w	801100c <__udivmoddi4+0x290>
 8010dda:	3902      	subs	r1, #2
 8010ddc:	4462      	add	r2, ip
 8010dde:	1a12      	subs	r2, r2, r0
 8010de0:	b2a4      	uxth	r4, r4
 8010de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8010de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8010dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010dee:	fb00 f505 	mul.w	r5, r0, r5
 8010df2:	42a5      	cmp	r5, r4
 8010df4:	d90a      	bls.n	8010e0c <__udivmoddi4+0x90>
 8010df6:	eb1c 0404 	adds.w	r4, ip, r4
 8010dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8010dfe:	f080 8107 	bcs.w	8011010 <__udivmoddi4+0x294>
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	f240 8104 	bls.w	8011010 <__udivmoddi4+0x294>
 8010e08:	4464      	add	r4, ip
 8010e0a:	3802      	subs	r0, #2
 8010e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	2100      	movs	r1, #0
 8010e14:	b11e      	cbz	r6, 8010e1e <__udivmoddi4+0xa2>
 8010e16:	40dc      	lsrs	r4, r3
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	428b      	cmp	r3, r1
 8010e24:	d908      	bls.n	8010e38 <__udivmoddi4+0xbc>
 8010e26:	2e00      	cmp	r6, #0
 8010e28:	f000 80ed 	beq.w	8011006 <__udivmoddi4+0x28a>
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8010e32:	4608      	mov	r0, r1
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	fab3 f183 	clz	r1, r3
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d149      	bne.n	8010ed4 <__udivmoddi4+0x158>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d302      	bcc.n	8010e4a <__udivmoddi4+0xce>
 8010e44:	4282      	cmp	r2, r0
 8010e46:	f200 80f8 	bhi.w	801103a <__udivmoddi4+0x2be>
 8010e4a:	1a84      	subs	r4, r0, r2
 8010e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8010e50:	2001      	movs	r0, #1
 8010e52:	4617      	mov	r7, r2
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0e2      	beq.n	8010e1e <__udivmoddi4+0xa2>
 8010e58:	e9c6 4700 	strd	r4, r7, [r6]
 8010e5c:	e7df      	b.n	8010e1e <__udivmoddi4+0xa2>
 8010e5e:	b902      	cbnz	r2, 8010e62 <__udivmoddi4+0xe6>
 8010e60:	deff      	udf	#255	; 0xff
 8010e62:	fab2 f382 	clz	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f040 8090 	bne.w	8010f8c <__udivmoddi4+0x210>
 8010e6c:	1a8a      	subs	r2, r1, r2
 8010e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e72:	fa1f fe8c 	uxth.w	lr, ip
 8010e76:	2101      	movs	r1, #1
 8010e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8010e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8010e80:	0c22      	lsrs	r2, r4, #16
 8010e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010e86:	fb0e f005 	mul.w	r0, lr, r5
 8010e8a:	4290      	cmp	r0, r2
 8010e8c:	d908      	bls.n	8010ea0 <__udivmoddi4+0x124>
 8010e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8010e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8010e96:	d202      	bcs.n	8010e9e <__udivmoddi4+0x122>
 8010e98:	4290      	cmp	r0, r2
 8010e9a:	f200 80cb 	bhi.w	8011034 <__udivmoddi4+0x2b8>
 8010e9e:	4645      	mov	r5, r8
 8010ea0:	1a12      	subs	r2, r2, r0
 8010ea2:	b2a4      	uxth	r4, r4
 8010ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8010ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8010eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8010eb4:	45a6      	cmp	lr, r4
 8010eb6:	d908      	bls.n	8010eca <__udivmoddi4+0x14e>
 8010eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8010ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8010ec0:	d202      	bcs.n	8010ec8 <__udivmoddi4+0x14c>
 8010ec2:	45a6      	cmp	lr, r4
 8010ec4:	f200 80bb 	bhi.w	801103e <__udivmoddi4+0x2c2>
 8010ec8:	4610      	mov	r0, r2
 8010eca:	eba4 040e 	sub.w	r4, r4, lr
 8010ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010ed2:	e79f      	b.n	8010e14 <__udivmoddi4+0x98>
 8010ed4:	f1c1 0720 	rsb	r7, r1, #32
 8010ed8:	408b      	lsls	r3, r1
 8010eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8010ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8010ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8010ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8010eea:	40fd      	lsrs	r5, r7
 8010eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010ef0:	4323      	orrs	r3, r4
 8010ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8010ef6:	fa1f fe8c 	uxth.w	lr, ip
 8010efa:	fb09 5518 	mls	r5, r9, r8, r5
 8010efe:	0c1c      	lsrs	r4, r3, #16
 8010f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010f04:	fb08 f50e 	mul.w	r5, r8, lr
 8010f08:	42a5      	cmp	r5, r4
 8010f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8010f12:	d90b      	bls.n	8010f2c <__udivmoddi4+0x1b0>
 8010f14:	eb1c 0404 	adds.w	r4, ip, r4
 8010f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8010f1c:	f080 8088 	bcs.w	8011030 <__udivmoddi4+0x2b4>
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	f240 8085 	bls.w	8011030 <__udivmoddi4+0x2b4>
 8010f26:	f1a8 0802 	sub.w	r8, r8, #2
 8010f2a:	4464      	add	r4, ip
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	b29d      	uxth	r5, r3
 8010f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8010f34:	fb09 4413 	mls	r4, r9, r3, r4
 8010f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8010f40:	45a6      	cmp	lr, r4
 8010f42:	d908      	bls.n	8010f56 <__udivmoddi4+0x1da>
 8010f44:	eb1c 0404 	adds.w	r4, ip, r4
 8010f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8010f4c:	d26c      	bcs.n	8011028 <__udivmoddi4+0x2ac>
 8010f4e:	45a6      	cmp	lr, r4
 8010f50:	d96a      	bls.n	8011028 <__udivmoddi4+0x2ac>
 8010f52:	3b02      	subs	r3, #2
 8010f54:	4464      	add	r4, ip
 8010f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8010f5e:	eba4 040e 	sub.w	r4, r4, lr
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	46c8      	mov	r8, r9
 8010f66:	46ae      	mov	lr, r5
 8010f68:	d356      	bcc.n	8011018 <__udivmoddi4+0x29c>
 8010f6a:	d053      	beq.n	8011014 <__udivmoddi4+0x298>
 8010f6c:	b156      	cbz	r6, 8010f84 <__udivmoddi4+0x208>
 8010f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8010f72:	eb64 040e 	sbc.w	r4, r4, lr
 8010f76:	fa04 f707 	lsl.w	r7, r4, r7
 8010f7a:	40ca      	lsrs	r2, r1
 8010f7c:	40cc      	lsrs	r4, r1
 8010f7e:	4317      	orrs	r7, r2
 8010f80:	e9c6 7400 	strd	r7, r4, [r6]
 8010f84:	4618      	mov	r0, r3
 8010f86:	2100      	movs	r1, #0
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	f1c3 0120 	rsb	r1, r3, #32
 8010f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8010f94:	fa20 f201 	lsr.w	r2, r0, r1
 8010f98:	fa25 f101 	lsr.w	r1, r5, r1
 8010f9c:	409d      	lsls	r5, r3
 8010f9e:	432a      	orrs	r2, r5
 8010fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010fa4:	fa1f fe8c 	uxth.w	lr, ip
 8010fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8010fac:	fb07 1510 	mls	r5, r7, r0, r1
 8010fb0:	0c11      	lsrs	r1, r2, #16
 8010fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8010fba:	428d      	cmp	r5, r1
 8010fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8010fc0:	d908      	bls.n	8010fd4 <__udivmoddi4+0x258>
 8010fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8010fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8010fca:	d22f      	bcs.n	801102c <__udivmoddi4+0x2b0>
 8010fcc:	428d      	cmp	r5, r1
 8010fce:	d92d      	bls.n	801102c <__udivmoddi4+0x2b0>
 8010fd0:	3802      	subs	r0, #2
 8010fd2:	4461      	add	r1, ip
 8010fd4:	1b49      	subs	r1, r1, r5
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8010fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8010fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8010fe8:	4291      	cmp	r1, r2
 8010fea:	d908      	bls.n	8010ffe <__udivmoddi4+0x282>
 8010fec:	eb1c 0202 	adds.w	r2, ip, r2
 8010ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8010ff4:	d216      	bcs.n	8011024 <__udivmoddi4+0x2a8>
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	d914      	bls.n	8011024 <__udivmoddi4+0x2a8>
 8010ffa:	3d02      	subs	r5, #2
 8010ffc:	4462      	add	r2, ip
 8010ffe:	1a52      	subs	r2, r2, r1
 8011000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8011004:	e738      	b.n	8010e78 <__udivmoddi4+0xfc>
 8011006:	4631      	mov	r1, r6
 8011008:	4630      	mov	r0, r6
 801100a:	e708      	b.n	8010e1e <__udivmoddi4+0xa2>
 801100c:	4639      	mov	r1, r7
 801100e:	e6e6      	b.n	8010dde <__udivmoddi4+0x62>
 8011010:	4610      	mov	r0, r2
 8011012:	e6fb      	b.n	8010e0c <__udivmoddi4+0x90>
 8011014:	4548      	cmp	r0, r9
 8011016:	d2a9      	bcs.n	8010f6c <__udivmoddi4+0x1f0>
 8011018:	ebb9 0802 	subs.w	r8, r9, r2
 801101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8011020:	3b01      	subs	r3, #1
 8011022:	e7a3      	b.n	8010f6c <__udivmoddi4+0x1f0>
 8011024:	4645      	mov	r5, r8
 8011026:	e7ea      	b.n	8010ffe <__udivmoddi4+0x282>
 8011028:	462b      	mov	r3, r5
 801102a:	e794      	b.n	8010f56 <__udivmoddi4+0x1da>
 801102c:	4640      	mov	r0, r8
 801102e:	e7d1      	b.n	8010fd4 <__udivmoddi4+0x258>
 8011030:	46d0      	mov	r8, sl
 8011032:	e77b      	b.n	8010f2c <__udivmoddi4+0x1b0>
 8011034:	3d02      	subs	r5, #2
 8011036:	4462      	add	r2, ip
 8011038:	e732      	b.n	8010ea0 <__udivmoddi4+0x124>
 801103a:	4608      	mov	r0, r1
 801103c:	e70a      	b.n	8010e54 <__udivmoddi4+0xd8>
 801103e:	4464      	add	r4, ip
 8011040:	3802      	subs	r0, #2
 8011042:	e742      	b.n	8010eca <__udivmoddi4+0x14e>

08011044 <__aeabi_idiv0>:
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop

08011048 <configureTimerForRunTimeStats>:
void vApplicationTickHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0

}
 801104c:	bf00      	nop
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8011056:	b480      	push	{r7}
 8011058:	af00      	add	r7, sp, #0
return 0;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr

08011066 <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8011066:	b580      	push	{r7, lr}
 8011068:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	mqtt_1ms_tik();
 801106a:	f003 faa5 	bl	80145b8 <mqtt_1ms_tik>
}
 801106e:	bf00      	nop
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	460b      	mov	r3, r1
 801107e:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4a0e      	ldr	r2, [pc, #56]	; (80110c0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d116      	bne.n	80110b8 <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801108a:	887b      	ldrh	r3, [r7, #2]
 801108c:	2b18      	cmp	r3, #24
 801108e:	d113      	bne.n	80110b8 <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011090:	4b0c      	ldr	r3, [pc, #48]	; (80110c4 <HAL_UARTEx_RxEventCallback+0x50>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4618      	mov	r0, r3
 8011096:	f00f fbcb 	bl	8020830 <osMessageQueueGetCount>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d106      	bne.n	80110ae <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 80110a0:	4b08      	ldr	r3, [pc, #32]	; (80110c4 <HAL_UARTEx_RxEventCallback+0x50>)
 80110a2:	6818      	ldr	r0, [r3, #0]
 80110a4:	2300      	movs	r3, #0
 80110a6:	2200      	movs	r2, #0
 80110a8:	4907      	ldr	r1, [pc, #28]	; (80110c8 <HAL_UARTEx_RxEventCallback+0x54>)
 80110aa:	f00f fb03 	bl	80206b4 <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110ae:	2218      	movs	r2, #24
 80110b0:	4905      	ldr	r1, [pc, #20]	; (80110c8 <HAL_UARTEx_RxEventCallback+0x54>)
 80110b2:	4806      	ldr	r0, [pc, #24]	; (80110cc <HAL_UARTEx_RxEventCallback+0x58>)
 80110b4:	f006 fcba 	bl	8017a2c <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	40004400 	.word	0x40004400
 80110c4:	20000448 	.word	0x20000448
 80110c8:	20000474 	.word	0x20000474
 80110cc:	200003d8 	.word	0x200003d8

080110d0 <EthMutexTake>:

void EthMutexTake(void){
 80110d0:	b580      	push	{r7, lr}
 80110d2:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110d4:	4b04      	ldr	r3, [pc, #16]	; (80110e8 <EthMutexTake+0x18>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f04f 31ff 	mov.w	r1, #4294967295
 80110dc:	4618      	mov	r0, r3
 80110de:	f00f f9ee 	bl	80204be <osMutexAcquire>
}
 80110e2:	bf00      	nop
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20000464 	.word	0x20000464

080110ec <EthMutexRelease>:

void EthMutexRelease(void){
 80110ec:	b580      	push	{r7, lr}
 80110ee:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110f0:	4b03      	ldr	r3, [pc, #12]	; (8011100 <EthMutexRelease+0x14>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f00f fa2d 	bl	8020554 <osMutexRelease>
}
 80110fa:	bf00      	nop
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20000464 	.word	0x20000464

08011104 <LfsMutexTake>:

void LfsMutexTake(void){
 8011104:	b580      	push	{r7, lr}
 8011106:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 8011108:	4b04      	ldr	r3, [pc, #16]	; (801111c <LfsMutexTake+0x18>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f04f 31ff 	mov.w	r1, #4294967295
 8011110:	4618      	mov	r0, r3
 8011112:	f00f f9d4 	bl	80204be <osMutexAcquire>
}
 8011116:	bf00      	nop
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	20000468 	.word	0x20000468

08011120 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011120:	b580      	push	{r7, lr}
 8011122:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011124:	4b03      	ldr	r3, [pc, #12]	; (8011134 <LfsMutexRelease+0x14>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4618      	mov	r0, r3
 801112a:	f00f fa13 	bl	8020554 <osMutexRelease>
}
 801112e:	bf00      	nop
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	20000468 	.word	0x20000468

08011138 <SocketMutexTake>:

void SocketMutexTake(void){
 8011138:	b580      	push	{r7, lr}
 801113a:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 801113c:	4b04      	ldr	r3, [pc, #16]	; (8011150 <SocketMutexTake+0x18>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f04f 31ff 	mov.w	r1, #4294967295
 8011144:	4618      	mov	r0, r3
 8011146:	f00f f9ba 	bl	80204be <osMutexAcquire>
}
 801114a:	bf00      	nop
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	2000046c 	.word	0x2000046c

08011154 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011154:	b580      	push	{r7, lr}
 8011156:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 8011158:	4b03      	ldr	r3, [pc, #12]	; (8011168 <SocketMutexRelease+0x14>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4618      	mov	r0, r3
 801115e:	f00f f9f9 	bl	8020554 <osMutexRelease>
}
 8011162:	bf00      	nop
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	2000046c 	.word	0x2000046c

0801116c <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 801116c:	b580      	push	{r7, lr}
 801116e:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011170:	4b04      	ldr	r3, [pc, #16]	; (8011184 <ServiceSockMutexTake+0x18>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f04f 31ff 	mov.w	r1, #4294967295
 8011178:	4618      	mov	r0, r3
 801117a:	f00f f9a0 	bl	80204be <osMutexAcquire>
}
 801117e:	bf00      	nop
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	20000470 	.word	0x20000470

08011188 <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 8011188:	b580      	push	{r7, lr}
 801118a:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 801118c:	4b03      	ldr	r3, [pc, #12]	; (801119c <ServiceSockMutexRelease+0x14>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4618      	mov	r0, r3
 8011192:	f00f f9df 	bl	8020554 <osMutexRelease>
}
 8011196:	bf00      	nop
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	20000470 	.word	0x20000470

080111a0 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 80111a0:	b580      	push	{r7, lr}
 80111a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 80111a4:	2200      	movs	r2, #0
 80111a6:	2102      	movs	r1, #2
 80111a8:	4802      	ldr	r0, [pc, #8]	; (80111b4 <PowerON_HLW8032+0x14>)
 80111aa:	f004 fe6f 	bl	8015e8c <HAL_GPIO_WritePin>
}
 80111ae:	bf00      	nop
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	40020000 	.word	0x40020000

080111b8 <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111b8:	b580      	push	{r7, lr}
 80111ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111bc:	2201      	movs	r2, #1
 80111be:	2102      	movs	r1, #2
 80111c0:	4802      	ldr	r0, [pc, #8]	; (80111cc <PowerOFF_HLW8032+0x14>)
 80111c2:	f004 fe63 	bl	8015e8c <HAL_GPIO_WritePin>
}
 80111c6:	bf00      	nop
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	40020000 	.word	0x40020000

080111d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111d4:	b672      	cpsid	i
}
 80111d6:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111d8:	4b60      	ldr	r3, [pc, #384]	; (801135c <main+0x18c>)
 80111da:	4a61      	ldr	r2, [pc, #388]	; (8011360 <main+0x190>)
 80111dc:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111de:	b662      	cpsie	i
}
 80111e0:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111e2:	f004 fafd 	bl	80157e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111e6:	f000 f927 	bl	8011438 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111ea:	485e      	ldr	r0, [pc, #376]	; (8011364 <main+0x194>)
 80111ec:	f00b fcbe 	bl	801cb6c <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111f0:	f000 fa54 	bl	801169c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111f4:	f000 fa26 	bl	8011644 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111f8:	f000 f9b8 	bl	801156c <MX_SPI1_Init>
  MX_SPI3_Init();
 80111fc:	f000 f9ec 	bl	80115d8 <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 8011200:	f00e ff56 	bl	80200b0 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 8011204:	f000 f984 	bl	8011510 <MX_CRC_Init>
  MX_IWDG_Init();
 8011208:	f000 f996 	bl	8011538 <MX_IWDG_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 801120c:	f00e ff50 	bl	80200b0 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011210:	f00e ff9a 	bl	8020148 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011214:	4854      	ldr	r0, [pc, #336]	; (8011368 <main+0x198>)
 8011216:	f00f f8cc 	bl	80203b2 <osMutexNew>
 801121a:	4603      	mov	r3, r0
 801121c:	4a53      	ldr	r2, [pc, #332]	; (801136c <main+0x19c>)
 801121e:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011220:	4853      	ldr	r0, [pc, #332]	; (8011370 <main+0x1a0>)
 8011222:	f00f f8c6 	bl	80203b2 <osMutexNew>
 8011226:	4603      	mov	r3, r0
 8011228:	4a52      	ldr	r2, [pc, #328]	; (8011374 <main+0x1a4>)
 801122a:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 801122c:	4852      	ldr	r0, [pc, #328]	; (8011378 <main+0x1a8>)
 801122e:	f00f f8c0 	bl	80203b2 <osMutexNew>
 8011232:	4603      	mov	r3, r0
 8011234:	4a51      	ldr	r2, [pc, #324]	; (801137c <main+0x1ac>)
 8011236:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 8011238:	4851      	ldr	r0, [pc, #324]	; (8011380 <main+0x1b0>)
 801123a:	f00f f8ba 	bl	80203b2 <osMutexNew>
 801123e:	4603      	mov	r3, r0
 8011240:	4a50      	ldr	r2, [pc, #320]	; (8011384 <main+0x1b4>)
 8011242:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011244:	4a50      	ldr	r2, [pc, #320]	; (8011388 <main+0x1b8>)
 8011246:	211e      	movs	r1, #30
 8011248:	2001      	movs	r0, #1
 801124a:	f00f f9c0 	bl	80205ce <osMessageQueueNew>
 801124e:	4603      	mov	r3, r0
 8011250:	4a4e      	ldr	r2, [pc, #312]	; (801138c <main+0x1bc>)
 8011252:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011254:	4a4e      	ldr	r2, [pc, #312]	; (8011390 <main+0x1c0>)
 8011256:	2120      	movs	r1, #32
 8011258:	2001      	movs	r0, #1
 801125a:	f00f f9b8 	bl	80205ce <osMessageQueueNew>
 801125e:	4603      	mov	r3, r0
 8011260:	4a4c      	ldr	r2, [pc, #304]	; (8011394 <main+0x1c4>)
 8011262:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011264:	4a4c      	ldr	r2, [pc, #304]	; (8011398 <main+0x1c8>)
 8011266:	2124      	movs	r1, #36	; 0x24
 8011268:	2001      	movs	r0, #1
 801126a:	f00f f9b0 	bl	80205ce <osMessageQueueNew>
 801126e:	4603      	mov	r3, r0
 8011270:	4a4a      	ldr	r2, [pc, #296]	; (801139c <main+0x1cc>)
 8011272:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011274:	4a4a      	ldr	r2, [pc, #296]	; (80113a0 <main+0x1d0>)
 8011276:	2108      	movs	r1, #8
 8011278:	2001      	movs	r0, #1
 801127a:	f00f f9a8 	bl	80205ce <osMessageQueueNew>
 801127e:	4603      	mov	r3, r0
 8011280:	4a48      	ldr	r2, [pc, #288]	; (80113a4 <main+0x1d4>)
 8011282:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011284:	4a48      	ldr	r2, [pc, #288]	; (80113a8 <main+0x1d8>)
 8011286:	21c6      	movs	r1, #198	; 0xc6
 8011288:	2001      	movs	r0, #1
 801128a:	f00f f9a0 	bl	80205ce <osMessageQueueNew>
 801128e:	4603      	mov	r3, r0
 8011290:	4a46      	ldr	r2, [pc, #280]	; (80113ac <main+0x1dc>)
 8011292:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011294:	4a46      	ldr	r2, [pc, #280]	; (80113b0 <main+0x1e0>)
 8011296:	2102      	movs	r1, #2
 8011298:	2001      	movs	r0, #1
 801129a:	f00f f998 	bl	80205ce <osMessageQueueNew>
 801129e:	4603      	mov	r3, r0
 80112a0:	4a44      	ldr	r2, [pc, #272]	; (80113b4 <main+0x1e4>)
 80112a2:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 80112a4:	4a44      	ldr	r2, [pc, #272]	; (80113b8 <main+0x1e8>)
 80112a6:	2104      	movs	r1, #4
 80112a8:	2001      	movs	r0, #1
 80112aa:	f00f f990 	bl	80205ce <osMessageQueueNew>
 80112ae:	4603      	mov	r3, r0
 80112b0:	4a42      	ldr	r2, [pc, #264]	; (80113bc <main+0x1ec>)
 80112b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112b4:	4a42      	ldr	r2, [pc, #264]	; (80113c0 <main+0x1f0>)
 80112b6:	2100      	movs	r1, #0
 80112b8:	4842      	ldr	r0, [pc, #264]	; (80113c4 <main+0x1f4>)
 80112ba:	f00e ff8f 	bl	80201dc <osThreadNew>
 80112be:	4603      	mov	r3, r0
 80112c0:	4a41      	ldr	r2, [pc, #260]	; (80113c8 <main+0x1f8>)
 80112c2:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112c4:	4a41      	ldr	r2, [pc, #260]	; (80113cc <main+0x1fc>)
 80112c6:	2100      	movs	r1, #0
 80112c8:	4841      	ldr	r0, [pc, #260]	; (80113d0 <main+0x200>)
 80112ca:	f00e ff87 	bl	80201dc <osThreadNew>
 80112ce:	4603      	mov	r3, r0
 80112d0:	4a40      	ldr	r2, [pc, #256]	; (80113d4 <main+0x204>)
 80112d2:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112d4:	4a40      	ldr	r2, [pc, #256]	; (80113d8 <main+0x208>)
 80112d6:	2100      	movs	r1, #0
 80112d8:	4840      	ldr	r0, [pc, #256]	; (80113dc <main+0x20c>)
 80112da:	f00e ff7f 	bl	80201dc <osThreadNew>
 80112de:	4603      	mov	r3, r0
 80112e0:	4a3f      	ldr	r2, [pc, #252]	; (80113e0 <main+0x210>)
 80112e2:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112e4:	4a3f      	ldr	r2, [pc, #252]	; (80113e4 <main+0x214>)
 80112e6:	2100      	movs	r1, #0
 80112e8:	483f      	ldr	r0, [pc, #252]	; (80113e8 <main+0x218>)
 80112ea:	f00e ff77 	bl	80201dc <osThreadNew>
 80112ee:	4603      	mov	r3, r0
 80112f0:	4a3e      	ldr	r2, [pc, #248]	; (80113ec <main+0x21c>)
 80112f2:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112f4:	4a3e      	ldr	r2, [pc, #248]	; (80113f0 <main+0x220>)
 80112f6:	2100      	movs	r1, #0
 80112f8:	483e      	ldr	r0, [pc, #248]	; (80113f4 <main+0x224>)
 80112fa:	f00e ff6f 	bl	80201dc <osThreadNew>
 80112fe:	4603      	mov	r3, r0
 8011300:	4a3d      	ldr	r2, [pc, #244]	; (80113f8 <main+0x228>)
 8011302:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 8011304:	4a3d      	ldr	r2, [pc, #244]	; (80113fc <main+0x22c>)
 8011306:	2100      	movs	r1, #0
 8011308:	483d      	ldr	r0, [pc, #244]	; (8011400 <main+0x230>)
 801130a:	f00e ff67 	bl	80201dc <osThreadNew>
 801130e:	4603      	mov	r3, r0
 8011310:	4a3c      	ldr	r2, [pc, #240]	; (8011404 <main+0x234>)
 8011312:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011314:	4a3c      	ldr	r2, [pc, #240]	; (8011408 <main+0x238>)
 8011316:	2100      	movs	r1, #0
 8011318:	483c      	ldr	r0, [pc, #240]	; (801140c <main+0x23c>)
 801131a:	f00e ff5f 	bl	80201dc <osThreadNew>
 801131e:	4603      	mov	r3, r0
 8011320:	4a3b      	ldr	r2, [pc, #236]	; (8011410 <main+0x240>)
 8011322:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011324:	4a3b      	ldr	r2, [pc, #236]	; (8011414 <main+0x244>)
 8011326:	2100      	movs	r1, #0
 8011328:	483b      	ldr	r0, [pc, #236]	; (8011418 <main+0x248>)
 801132a:	f00e ff57 	bl	80201dc <osThreadNew>
 801132e:	4603      	mov	r3, r0
 8011330:	4a3a      	ldr	r2, [pc, #232]	; (801141c <main+0x24c>)
 8011332:	6013      	str	r3, [r2, #0]

  /* creation of resetWatchDog */
  resetWatchDogHandle = osThreadNew(vResetWatchDog, NULL, &resetWatchDog_attributes);
 8011334:	4a3a      	ldr	r2, [pc, #232]	; (8011420 <main+0x250>)
 8011336:	2100      	movs	r1, #0
 8011338:	483a      	ldr	r0, [pc, #232]	; (8011424 <main+0x254>)
 801133a:	f00e ff4f 	bl	80201dc <osThreadNew>
 801133e:	4603      	mov	r3, r0
 8011340:	4a39      	ldr	r2, [pc, #228]	; (8011428 <main+0x258>)
 8011342:	6013      	str	r3, [r2, #0]

  /* creation of SendBroadcast */
  SendBroadcastHandle = osThreadNew(vSendBroadcast, NULL, &SendBroadcast_attributes);
 8011344:	4a39      	ldr	r2, [pc, #228]	; (801142c <main+0x25c>)
 8011346:	2100      	movs	r1, #0
 8011348:	4839      	ldr	r0, [pc, #228]	; (8011430 <main+0x260>)
 801134a:	f00e ff47 	bl	80201dc <osThreadNew>
 801134e:	4603      	mov	r3, r0
 8011350:	4a38      	ldr	r2, [pc, #224]	; (8011434 <main+0x264>)
 8011352:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011354:	f00e ff1c 	bl	8020190 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8011358:	e7fe      	b.n	8011358 <main+0x188>
 801135a:	bf00      	nop
 801135c:	e000ed00 	.word	0xe000ed00
 8011360:	08010000 	.word	0x08010000
 8011364:	0801feb5 	.word	0x0801feb5
 8011368:	08034400 	.word	0x08034400
 801136c:	20000464 	.word	0x20000464
 8011370:	08034410 	.word	0x08034410
 8011374:	20000468 	.word	0x20000468
 8011378:	08034420 	.word	0x08034420
 801137c:	2000046c 	.word	0x2000046c
 8011380:	08034430 	.word	0x08034430
 8011384:	20000470 	.word	0x20000470
 8011388:	08034358 	.word	0x08034358
 801138c:	20000448 	.word	0x20000448
 8011390:	08034370 	.word	0x08034370
 8011394:	2000044c 	.word	0x2000044c
 8011398:	08034388 	.word	0x08034388
 801139c:	20000450 	.word	0x20000450
 80113a0:	080343a0 	.word	0x080343a0
 80113a4:	20000454 	.word	0x20000454
 80113a8:	080343b8 	.word	0x080343b8
 80113ac:	20000458 	.word	0x20000458
 80113b0:	080343d0 	.word	0x080343d0
 80113b4:	2000045c 	.word	0x2000045c
 80113b8:	080343e8 	.word	0x080343e8
 80113bc:	20000460 	.word	0x20000460
 80113c0:	080341f0 	.word	0x080341f0
 80113c4:	08011791 	.word	0x08011791
 80113c8:	20000420 	.word	0x20000420
 80113cc:	08034214 	.word	0x08034214
 80113d0:	080117a1 	.word	0x080117a1
 80113d4:	20000424 	.word	0x20000424
 80113d8:	08034238 	.word	0x08034238
 80113dc:	08011935 	.word	0x08011935
 80113e0:	20000428 	.word	0x20000428
 80113e4:	0803425c 	.word	0x0803425c
 80113e8:	08011c9d 	.word	0x08011c9d
 80113ec:	2000042c 	.word	0x2000042c
 80113f0:	08034280 	.word	0x08034280
 80113f4:	08011cd9 	.word	0x08011cd9
 80113f8:	20000430 	.word	0x20000430
 80113fc:	080342a4 	.word	0x080342a4
 8011400:	08012255 	.word	0x08012255
 8011404:	20000434 	.word	0x20000434
 8011408:	080342c8 	.word	0x080342c8
 801140c:	08012301 	.word	0x08012301
 8011410:	20000438 	.word	0x20000438
 8011414:	080342ec 	.word	0x080342ec
 8011418:	08012499 	.word	0x08012499
 801141c:	2000043c 	.word	0x2000043c
 8011420:	08034310 	.word	0x08034310
 8011424:	08012755 	.word	0x08012755
 8011428:	20000440 	.word	0x20000440
 801142c:	08034334 	.word	0x08034334
 8011430:	08012771 	.word	0x08012771
 8011434:	20000444 	.word	0x20000444

08011438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b094      	sub	sp, #80	; 0x50
 801143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801143e:	f107 0320 	add.w	r3, r7, #32
 8011442:	2230      	movs	r2, #48	; 0x30
 8011444:	2100      	movs	r1, #0
 8011446:	4618      	mov	r0, r3
 8011448:	f01c fb50 	bl	802daec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801144c:	f107 030c 	add.w	r3, r7, #12
 8011450:	2200      	movs	r2, #0
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	605a      	str	r2, [r3, #4]
 8011456:	609a      	str	r2, [r3, #8]
 8011458:	60da      	str	r2, [r3, #12]
 801145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801145c:	2300      	movs	r3, #0
 801145e:	60bb      	str	r3, [r7, #8]
 8011460:	4b29      	ldr	r3, [pc, #164]	; (8011508 <SystemClock_Config+0xd0>)
 8011462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011464:	4a28      	ldr	r2, [pc, #160]	; (8011508 <SystemClock_Config+0xd0>)
 8011466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801146a:	6413      	str	r3, [r2, #64]	; 0x40
 801146c:	4b26      	ldr	r3, [pc, #152]	; (8011508 <SystemClock_Config+0xd0>)
 801146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011474:	60bb      	str	r3, [r7, #8]
 8011476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8011478:	2300      	movs	r3, #0
 801147a:	607b      	str	r3, [r7, #4]
 801147c:	4b23      	ldr	r3, [pc, #140]	; (801150c <SystemClock_Config+0xd4>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011484:	4a21      	ldr	r2, [pc, #132]	; (801150c <SystemClock_Config+0xd4>)
 8011486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801148a:	6013      	str	r3, [r2, #0]
 801148c:	4b1f      	ldr	r3, [pc, #124]	; (801150c <SystemClock_Config+0xd4>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011494:	607b      	str	r3, [r7, #4]
 8011496:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8011498:	2309      	movs	r3, #9
 801149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801149c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80114a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80114a2:	2301      	movs	r3, #1
 80114a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80114a6:	2302      	movs	r3, #2
 80114a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80114aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80114ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80114b0:	2304      	movs	r3, #4
 80114b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80114b4:	2354      	movs	r3, #84	; 0x54
 80114b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80114b8:	2302      	movs	r3, #2
 80114ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80114bc:	2304      	movs	r3, #4
 80114be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114c0:	f107 0320 	add.w	r3, r7, #32
 80114c4:	4618      	mov	r0, r3
 80114c6:	f004 fd4d 	bl	8015f64 <HAL_RCC_OscConfig>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80114d0:	f001 f9ec 	bl	80128ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114d4:	230f      	movs	r3, #15
 80114d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114d8:	2302      	movs	r3, #2
 80114da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114dc:	2300      	movs	r3, #0
 80114de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80114e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114e6:	2300      	movs	r3, #0
 80114e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80114ea:	f107 030c 	add.w	r3, r7, #12
 80114ee:	2102      	movs	r1, #2
 80114f0:	4618      	mov	r0, r3
 80114f2:	f004 ffaf 	bl	8016454 <HAL_RCC_ClockConfig>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80114fc:	f001 f9d6 	bl	80128ac <Error_Handler>
  }
}
 8011500:	bf00      	nop
 8011502:	3750      	adds	r7, #80	; 0x50
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	40023800 	.word	0x40023800
 801150c:	40007000 	.word	0x40007000

08011510 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8011514:	4b06      	ldr	r3, [pc, #24]	; (8011530 <MX_CRC_Init+0x20>)
 8011516:	4a07      	ldr	r2, [pc, #28]	; (8011534 <MX_CRC_Init+0x24>)
 8011518:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801151a:	4805      	ldr	r0, [pc, #20]	; (8011530 <MX_CRC_Init+0x20>)
 801151c:	f004 fa84 	bl	8015a28 <HAL_CRC_Init>
 8011520:	4603      	mov	r3, r0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d001      	beq.n	801152a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8011526:	f001 f9c1 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801152a:	bf00      	nop
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	20000314 	.word	0x20000314
 8011534:	40023000 	.word	0x40023000

08011538 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 801153c:	4b09      	ldr	r3, [pc, #36]	; (8011564 <MX_IWDG_Init+0x2c>)
 801153e:	4a0a      	ldr	r2, [pc, #40]	; (8011568 <MX_IWDG_Init+0x30>)
 8011540:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8011542:	4b08      	ldr	r3, [pc, #32]	; (8011564 <MX_IWDG_Init+0x2c>)
 8011544:	2206      	movs	r2, #6
 8011546:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8011548:	4b06      	ldr	r3, [pc, #24]	; (8011564 <MX_IWDG_Init+0x2c>)
 801154a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801154e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011550:	4804      	ldr	r0, [pc, #16]	; (8011564 <MX_IWDG_Init+0x2c>)
 8011552:	f004 fcb4 	bl	8015ebe <HAL_IWDG_Init>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 801155c:	f001 f9a6 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011560:	bf00      	nop
 8011562:	bd80      	pop	{r7, pc}
 8011564:	2000031c 	.word	0x2000031c
 8011568:	40003000 	.word	0x40003000

0801156c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011570:	4b17      	ldr	r3, [pc, #92]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011572:	4a18      	ldr	r2, [pc, #96]	; (80115d4 <MX_SPI1_Init+0x68>)
 8011574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011576:	4b16      	ldr	r3, [pc, #88]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011578:	f44f 7282 	mov.w	r2, #260	; 0x104
 801157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801157e:	4b14      	ldr	r3, [pc, #80]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011580:	2200      	movs	r2, #0
 8011582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011584:	4b12      	ldr	r3, [pc, #72]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011586:	2200      	movs	r2, #0
 8011588:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801158a:	4b11      	ldr	r3, [pc, #68]	; (80115d0 <MX_SPI1_Init+0x64>)
 801158c:	2202      	movs	r2, #2
 801158e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011590:	4b0f      	ldr	r3, [pc, #60]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011592:	2201      	movs	r2, #1
 8011594:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011596:	4b0e      	ldr	r3, [pc, #56]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011598:	f44f 7200 	mov.w	r2, #512	; 0x200
 801159c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801159e:	4b0c      	ldr	r3, [pc, #48]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80115a4:	4b0a      	ldr	r3, [pc, #40]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80115aa:	4b09      	ldr	r3, [pc, #36]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115b0:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115b2:	2200      	movs	r2, #0
 80115b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80115b6:	4b06      	ldr	r3, [pc, #24]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115b8:	220a      	movs	r2, #10
 80115ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80115bc:	4804      	ldr	r0, [pc, #16]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115be:	f005 f99b 	bl	80168f8 <HAL_SPI_Init>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80115c8:	f001 f970 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80115cc:	bf00      	nop
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	20000328 	.word	0x20000328
 80115d4:	40013000 	.word	0x40013000

080115d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80115dc:	4b17      	ldr	r3, [pc, #92]	; (801163c <MX_SPI3_Init+0x64>)
 80115de:	4a18      	ldr	r2, [pc, #96]	; (8011640 <MX_SPI3_Init+0x68>)
 80115e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80115e2:	4b16      	ldr	r3, [pc, #88]	; (801163c <MX_SPI3_Init+0x64>)
 80115e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80115e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80115ea:	4b14      	ldr	r3, [pc, #80]	; (801163c <MX_SPI3_Init+0x64>)
 80115ec:	2200      	movs	r2, #0
 80115ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80115f0:	4b12      	ldr	r3, [pc, #72]	; (801163c <MX_SPI3_Init+0x64>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80115f6:	4b11      	ldr	r3, [pc, #68]	; (801163c <MX_SPI3_Init+0x64>)
 80115f8:	2202      	movs	r2, #2
 80115fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80115fc:	4b0f      	ldr	r3, [pc, #60]	; (801163c <MX_SPI3_Init+0x64>)
 80115fe:	2201      	movs	r2, #1
 8011600:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011602:	4b0e      	ldr	r3, [pc, #56]	; (801163c <MX_SPI3_Init+0x64>)
 8011604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011608:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801160a:	4b0c      	ldr	r3, [pc, #48]	; (801163c <MX_SPI3_Init+0x64>)
 801160c:	2200      	movs	r2, #0
 801160e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011610:	4b0a      	ldr	r3, [pc, #40]	; (801163c <MX_SPI3_Init+0x64>)
 8011612:	2200      	movs	r2, #0
 8011614:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8011616:	4b09      	ldr	r3, [pc, #36]	; (801163c <MX_SPI3_Init+0x64>)
 8011618:	2200      	movs	r2, #0
 801161a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801161c:	4b07      	ldr	r3, [pc, #28]	; (801163c <MX_SPI3_Init+0x64>)
 801161e:	2200      	movs	r2, #0
 8011620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011622:	4b06      	ldr	r3, [pc, #24]	; (801163c <MX_SPI3_Init+0x64>)
 8011624:	220a      	movs	r2, #10
 8011626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8011628:	4804      	ldr	r0, [pc, #16]	; (801163c <MX_SPI3_Init+0x64>)
 801162a:	f005 f965 	bl	80168f8 <HAL_SPI_Init>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011634:	f001 f93a 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8011638:	bf00      	nop
 801163a:	bd80      	pop	{r7, pc}
 801163c:	20000380 	.word	0x20000380
 8011640:	40003c00 	.word	0x40003c00

08011644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8011648:	4b12      	ldr	r3, [pc, #72]	; (8011694 <MX_USART2_UART_Init+0x50>)
 801164a:	4a13      	ldr	r2, [pc, #76]	; (8011698 <MX_USART2_UART_Init+0x54>)
 801164c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 801164e:	4b11      	ldr	r3, [pc, #68]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011650:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8011654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8011656:	4b0f      	ldr	r3, [pc, #60]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801165c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801165e:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011660:	2200      	movs	r2, #0
 8011662:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8011664:	4b0b      	ldr	r3, [pc, #44]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 801166c:	4b09      	ldr	r3, [pc, #36]	; (8011694 <MX_USART2_UART_Init+0x50>)
 801166e:	2204      	movs	r2, #4
 8011670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011672:	4b08      	ldr	r3, [pc, #32]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011674:	2200      	movs	r2, #0
 8011676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011678:	4b06      	ldr	r3, [pc, #24]	; (8011694 <MX_USART2_UART_Init+0x50>)
 801167a:	2200      	movs	r2, #0
 801167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801167e:	4805      	ldr	r0, [pc, #20]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011680:	f006 f984 	bl	801798c <HAL_UART_Init>
 8011684:	4603      	mov	r3, r0
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 801168a:	f001 f90f 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801168e:	bf00      	nop
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	200003d8 	.word	0x200003d8
 8011698:	40004400 	.word	0x40004400

0801169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b088      	sub	sp, #32
 80116a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116a2:	f107 030c 	add.w	r3, r7, #12
 80116a6:	2200      	movs	r2, #0
 80116a8:	601a      	str	r2, [r3, #0]
 80116aa:	605a      	str	r2, [r3, #4]
 80116ac:	609a      	str	r2, [r3, #8]
 80116ae:	60da      	str	r2, [r3, #12]
 80116b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116b2:	2300      	movs	r3, #0
 80116b4:	60bb      	str	r3, [r7, #8]
 80116b6:	4b33      	ldr	r3, [pc, #204]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	4a32      	ldr	r2, [pc, #200]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116c0:	6313      	str	r3, [r2, #48]	; 0x30
 80116c2:	4b30      	ldr	r3, [pc, #192]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116ca:	60bb      	str	r3, [r7, #8]
 80116cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116ce:	2300      	movs	r3, #0
 80116d0:	607b      	str	r3, [r7, #4]
 80116d2:	4b2c      	ldr	r3, [pc, #176]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d6:	4a2b      	ldr	r2, [pc, #172]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116d8:	f043 0301 	orr.w	r3, r3, #1
 80116dc:	6313      	str	r3, [r2, #48]	; 0x30
 80116de:	4b29      	ldr	r3, [pc, #164]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	607b      	str	r3, [r7, #4]
 80116e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116ea:	2300      	movs	r3, #0
 80116ec:	603b      	str	r3, [r7, #0]
 80116ee:	4b25      	ldr	r3, [pc, #148]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f2:	4a24      	ldr	r2, [pc, #144]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116f4:	f043 0302 	orr.w	r3, r3, #2
 80116f8:	6313      	str	r3, [r2, #48]	; 0x30
 80116fa:	4b22      	ldr	r3, [pc, #136]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116fe:	f003 0302 	and.w	r3, r3, #2
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 8011706:	2201      	movs	r2, #1
 8011708:	2112      	movs	r1, #18
 801170a:	481f      	ldr	r0, [pc, #124]	; (8011788 <MX_GPIO_Init+0xec>)
 801170c:	f004 fbbe 	bl	8015e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 8011710:	2200      	movs	r2, #0
 8011712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011716:	481c      	ldr	r0, [pc, #112]	; (8011788 <MX_GPIO_Init+0xec>)
 8011718:	f004 fbb8 	bl	8015e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 801171c:	2200      	movs	r2, #0
 801171e:	2140      	movs	r1, #64	; 0x40
 8011720:	481a      	ldr	r0, [pc, #104]	; (801178c <MX_GPIO_Init+0xf0>)
 8011722:	f004 fbb3 	bl	8015e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 8011726:	f248 0302 	movw	r3, #32770	; 0x8002
 801172a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801172c:	2301      	movs	r3, #1
 801172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011730:	2300      	movs	r3, #0
 8011732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011734:	2300      	movs	r3, #0
 8011736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011738:	f107 030c 	add.w	r3, r7, #12
 801173c:	4619      	mov	r1, r3
 801173e:	4812      	ldr	r0, [pc, #72]	; (8011788 <MX_GPIO_Init+0xec>)
 8011740:	f004 fa20 	bl	8015b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 8011744:	2310      	movs	r3, #16
 8011746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011748:	2301      	movs	r3, #1
 801174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801174c:	2300      	movs	r3, #0
 801174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011750:	2303      	movs	r3, #3
 8011752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 8011754:	f107 030c 	add.w	r3, r7, #12
 8011758:	4619      	mov	r1, r3
 801175a:	480b      	ldr	r0, [pc, #44]	; (8011788 <MX_GPIO_Init+0xec>)
 801175c:	f004 fa12 	bl	8015b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8011760:	2340      	movs	r3, #64	; 0x40
 8011762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011764:	2301      	movs	r3, #1
 8011766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011768:	2300      	movs	r3, #0
 801176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801176c:	2300      	movs	r3, #0
 801176e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8011770:	f107 030c 	add.w	r3, r7, #12
 8011774:	4619      	mov	r1, r3
 8011776:	4805      	ldr	r0, [pc, #20]	; (801178c <MX_GPIO_Init+0xf0>)
 8011778:	f004 fa04 	bl	8015b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 801177c:	bf00      	nop
 801177e:	3720      	adds	r7, #32
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	40023800 	.word	0x40023800
 8011788:	40020000 	.word	0x40020000
 801178c:	40020400 	.word	0x40020400

08011790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8011798:	2001      	movs	r0, #1
 801179a:	f00e fdef 	bl	802037c <osDelay>
 801179e:	e7fb      	b.n	8011798 <StartDefaultTask+0x8>

080117a0 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b098      	sub	sp, #96	; 0x60
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	float				old_resistance;


	PowerSett.resistance = 0.001;
 80117ac:	4b57      	ldr	r3, [pc, #348]	; (801190c <vSensorsTask+0x16c>)
 80117ae:	60fb      	str	r3, [r7, #12]
	PowerSett.save = 0;
 80117b0:	2300      	movs	r3, #0
 80117b2:	723b      	strb	r3, [r7, #8]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 80117b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80117b8:	f00e fde0 	bl	802037c <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80117bc:	4b54      	ldr	r3, [pc, #336]	; (8011910 <vSensorsTask+0x170>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f107 0108 	add.w	r1, r7, #8
 80117c4:	2200      	movs	r2, #0
 80117c6:	4618      	mov	r0, r3
 80117c8:	f00f feb4 	bl	8021534 <xQueuePeek>
	old_resistance = PowerSett.resistance;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	65bb      	str	r3, [r7, #88]	; 0x58
	PowerOFF_HLW8032();
 80117d0:	f7ff fcf2 	bl	80111b8 <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 80117d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117d8:	f00e fdd0 	bl	802037c <osDelay>
	USART2->DR; //read data from register if exist
 80117dc:	4b4d      	ldr	r3, [pc, #308]	; (8011914 <vSensorsTask+0x174>)
 80117de:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80117e0:	2218      	movs	r2, #24
 80117e2:	494d      	ldr	r1, [pc, #308]	; (8011918 <vSensorsTask+0x178>)
 80117e4:	484d      	ldr	r0, [pc, #308]	; (801191c <vSensorsTask+0x17c>)
 80117e6:	f006 f921 	bl	8017a2c <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 80117ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117ee:	f00e fdc5 	bl	802037c <osDelay>
	PowerON_HLW8032();
 80117f2:	f7ff fcd5 	bl	80111a0 <PowerON_HLW8032>

	sens_task_start:


	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80117f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80117fa:	eeb0 0a67 	vmov.f32	s0, s15
 80117fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011802:	4847      	ldr	r0, [pc, #284]	; (8011920 <vSensorsTask+0x180>)
 8011804:	f003 f9e4 	bl	8014bd0 <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 8011808:	4b46      	ldr	r3, [pc, #280]	; (8011924 <vSensorsTask+0x184>)
 801180a:	6818      	ldr	r0, [r3, #0]
 801180c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011814:	2200      	movs	r2, #0
 8011816:	f00e ffad 	bl	8020774 <osMessageQueueGet>
 801181a:	4603      	mov	r3, r0
 801181c:	f113 0f02 	cmn.w	r3, #2
 8011820:	d04c      	beq.n	80118bc <vSensorsTask+0x11c>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 8011822:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011826:	4618      	mov	r0, r3
 8011828:	f003 fa44 	bl	8014cb4 <RecvRawString>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	d155      	bne.n	80118de <vSensorsTask+0x13e>
			test_kWh_from_read 				= GetKWh();
 8011832:	f003 fc71 	bl	8015118 <GetKWh>
 8011836:	eef0 7a40 	vmov.f32	s15, s0
 801183a:	4b3b      	ldr	r3, [pc, #236]	; (8011928 <vSensorsTask+0x188>)
 801183c:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 8011840:	f003 fc6a 	bl	8015118 <GetKWh>
 8011844:	eeb0 7a40 	vmov.f32	s14, s0
 8011848:	4b38      	ldr	r3, [pc, #224]	; (801192c <vSensorsTask+0x18c>)
 801184a:	edd3 7a00 	vldr	s15, [r3]
 801184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011852:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.Voltage 				= GetVoltage();
 8011856:	f003 fb25 	bl	8014ea4 <GetVoltage>
 801185a:	eef0 7a40 	vmov.f32	s15, s0
 801185e:	edc7 7a04 	vstr	s15, [r7, #16]
			PowerData.ApparPower 			= GetApparentPower();
 8011862:	f003 fbcf 	bl	8015004 <GetApparentPower>
 8011866:	eef0 7a40 	vmov.f32	s15, s0
 801186a:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.ActivePower 			= GetActivePower();
 801186e:	f003 fb8b 	bl	8014f88 <GetActivePower>
 8011872:	eef0 7a40 	vmov.f32	s15, s0
 8011876:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Current 				= GetCurrent();
 801187a:	f003 fb5f 	bl	8014f3c <GetCurrent>
 801187e:	eef0 7a40 	vmov.f32	s15, s0
 8011882:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.PowerFactor			= PowerFactor();
 8011886:	f003 fbe5 	bl	8015054 <PowerFactor>
 801188a:	eef0 7a40 	vmov.f32	s15, s0
 801188e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.test_pulse_counter 	= GetTestPulse();
 8011892:	f003 fc1b 	bl	80150cc <GetTestPulse>
 8011896:	4603      	mov	r3, r0
 8011898:	62bb      	str	r3, [r7, #40]	; 0x28
			PowerData.readed_counter 		= GetCountedPulse();
 801189a:	f003 fc23 	bl	80150e4 <GetCountedPulse>
 801189e:	4603      	mov	r3, r0
 80118a0:	62fb      	str	r3, [r7, #44]	; 0x2c
			PowerData.PF_reg				= GetPFReg();
 80118a2:	f003 fc2b 	bl	80150fc <GetPFReg>
 80118a6:	4603      	mov	r3, r0
 80118a8:	633b      	str	r3, [r7, #48]	; 0x30
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 80118aa:	4b21      	ldr	r3, [pc, #132]	; (8011930 <vSensorsTask+0x190>)
 80118ac:	6818      	ldr	r0, [r3, #0]
 80118ae:	f107 0110 	add.w	r1, r7, #16
 80118b2:	2302      	movs	r3, #2
 80118b4:	2200      	movs	r2, #0
 80118b6:	f00f fab7 	bl	8020e28 <xQueueGenericSend>
 80118ba:	e010      	b.n	80118de <vSensorsTask+0x13e>
		}
	}else{
		count++;
 80118bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118be:	3301      	adds	r3, #1
 80118c0:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118c2:	e004      	b.n	80118ce <vSensorsTask+0x12e>
			temp = USART2->DR;
 80118c4:	4b13      	ldr	r3, [pc, #76]	; (8011914 <vSensorsTask+0x174>)
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	657b      	str	r3, [r7, #84]	; 0x54
			osThreadYield();
 80118ca:	f00e fd37 	bl	802033c <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118ce:	2218      	movs	r2, #24
 80118d0:	4911      	ldr	r1, [pc, #68]	; (8011918 <vSensorsTask+0x178>)
 80118d2:	4812      	ldr	r0, [pc, #72]	; (801191c <vSensorsTask+0x17c>)
 80118d4:	f006 f8aa 	bl	8017a2c <HAL_UARTEx_ReceiveToIdle_IT>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d0f2      	beq.n	80118c4 <vSensorsTask+0x124>
		}
	}
	osThreadYield();
 80118de:	f00e fd2d 	bl	802033c <osThreadYield>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80118e2:	4b0b      	ldr	r3, [pc, #44]	; (8011910 <vSensorsTask+0x170>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f107 0108 	add.w	r1, r7, #8
 80118ea:	2200      	movs	r2, #0
 80118ec:	4618      	mov	r0, r3
 80118ee:	f00f fe21 	bl	8021534 <xQueuePeek>
    if (PowerSett.resistance != old_resistance){
 80118f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80118f6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80118fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80118fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011902:	d081      	beq.n	8011808 <vSensorsTask+0x68>
    	old_resistance = PowerSett.resistance;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	65bb      	str	r3, [r7, #88]	; 0x58
    	goto sens_task_start;
 8011908:	e775      	b.n	80117f6 <vSensorsTask+0x56>
 801190a:	bf00      	nop
 801190c:	3a83126f 	.word	0x3a83126f
 8011910:	20000454 	.word	0x20000454
 8011914:	40004400 	.word	0x40004400
 8011918:	20000474 	.word	0x20000474
 801191c:	200003d8 	.word	0x200003d8
 8011920:	001cafc0 	.word	0x001cafc0
 8011924:	20000448 	.word	0x20000448
 8011928:	20000498 	.word	0x20000498
 801192c:	20000494 	.word	0x20000494
 8011930:	20000450 	.word	0x20000450

08011934 <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 801193a:	af12      	add	r7, sp, #72	; 0x48
 801193c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011940:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011944:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 8011946:	2314      	movs	r3, #20
 8011948:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 801194c:	2300      	movs	r3, #0
 801194e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 8011952:	f04f 0300 	mov.w	r3, #0
 8011956:	f207 4204 	addw	r2, r7, #1028	; 0x404
 801195a:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 801195c:	4cbc      	ldr	r4, [pc, #752]	; (8011c50 <vRW_Settings_Tas+0x31c>)
 801195e:	4668      	mov	r0, sp
 8011960:	f104 0310 	add.w	r3, r4, #16
 8011964:	2248      	movs	r2, #72	; 0x48
 8011966:	4619      	mov	r1, r3
 8011968:	f01c fa95 	bl	802de96 <memcpy>
 801196c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011970:	f003 fee2 	bl	8015738 <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8011974:	4bb7      	ldr	r3, [pc, #732]	; (8011c54 <vRW_Settings_Tas+0x320>)
 8011976:	4ab8      	ldr	r2, [pc, #736]	; (8011c58 <vRW_Settings_Tas+0x324>)
 8011978:	49b8      	ldr	r1, [pc, #736]	; (8011c5c <vRW_Settings_Tas+0x328>)
 801197a:	48b9      	ldr	r0, [pc, #740]	; (8011c60 <vRW_Settings_Tas+0x32c>)
 801197c:	f003 fc56 	bl	801522c <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011980:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011984:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8011988:	f507 7041 	add.w	r0, r7, #772	; 0x304
 801198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011990:	f019 fab8 	bl	802af04 <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8011994:	49b3      	ldr	r1, [pc, #716]	; (8011c64 <vRW_Settings_Tas+0x330>)
 8011996:	48b4      	ldr	r0, [pc, #720]	; (8011c68 <vRW_Settings_Tas+0x334>)
 8011998:	f019 fa98 	bl	802aecc <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 801199c:	f019 faea 	bl	802af74 <spi_fs_mount>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	da03      	bge.n	80119ae <vRW_Settings_Tas+0x7a>
		spi_fs_format();
 80119a6:	f019 fb0d 	bl	802afc4 <spi_fs_format>
		spi_fs_mount();
 80119aa:	f019 fae3 	bl	802af74 <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 80119ae:	48af      	ldr	r0, [pc, #700]	; (8011c6c <vRW_Settings_Tas+0x338>)
 80119b0:	f019 fb90 	bl	802b0d4 <spi_fs_file_size>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	dd0f      	ble.n	80119da <vRW_Settings_Tas+0xa6>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 80119ba:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119be:	2308      	movs	r3, #8
 80119c0:	2200      	movs	r2, #0
 80119c2:	48aa      	ldr	r0, [pc, #680]	; (8011c6c <vRW_Settings_Tas+0x338>)
 80119c4:	f019 fb0a 	bl	802afdc <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119c8:	4ba9      	ldr	r3, [pc, #676]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 80119ca:	6818      	ldr	r0, [r3, #0]
 80119cc:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119d0:	2302      	movs	r3, #2
 80119d2:	2200      	movs	r2, #0
 80119d4:	f00f fa28 	bl	8020e28 <xQueueGenericSend>
 80119d8:	e013      	b.n	8011a02 <vRW_Settings_Tas+0xce>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 80119da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119de:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119e2:	4aa4      	ldr	r2, [pc, #656]	; (8011c74 <vRW_Settings_Tas+0x340>)
 80119e4:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 80119e6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119ea:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119ee:	2201      	movs	r2, #1
 80119f0:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119f2:	4b9f      	ldr	r3, [pc, #636]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 80119f4:	6818      	ldr	r0, [r3, #0]
 80119f6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119fa:	2302      	movs	r3, #2
 80119fc:	2200      	movs	r2, #0
 80119fe:	f00f fa13 	bl	8020e28 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 8011a02:	489d      	ldr	r0, [pc, #628]	; (8011c78 <vRW_Settings_Tas+0x344>)
 8011a04:	f019 fb66 	bl	802b0d4 <spi_fs_file_size>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	dd0f      	ble.n	8011a2e <vRW_Settings_Tas+0xfa>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8011a0e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a12:	23c6      	movs	r3, #198	; 0xc6
 8011a14:	2200      	movs	r2, #0
 8011a16:	4898      	ldr	r0, [pc, #608]	; (8011c78 <vRW_Settings_Tas+0x344>)
 8011a18:	f019 fae0 	bl	802afdc <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a1c:	4b97      	ldr	r3, [pc, #604]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011a1e:	6818      	ldr	r0, [r3, #0]
 8011a20:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a24:	2302      	movs	r3, #2
 8011a26:	2200      	movs	r2, #0
 8011a28:	f00f f9fe 	bl	8020e28 <xQueueGenericSend>
 8011a2c:	e027      	b.n	8011a7e <vRW_Settings_Tas+0x14a>
	}else{
		MQTT_cred.save 			= 1;
 8011a2e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a32:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a36:	2201      	movs	r2, #1
 8011a38:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 8011a3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a3e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a42:	2200      	movs	r2, #0
 8011a44:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 8011a46:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a4a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		MQTT_cred.pass[0]		= '\0';
 8011a54:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a58:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		MQTT_cred.uri[0]		= '\0';
 8011a62:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a66:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a6e:	4b83      	ldr	r3, [pc, #524]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011a70:	6818      	ldr	r0, [r3, #0]
 8011a72:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a76:	2302      	movs	r3, #2
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f00f f9d5 	bl	8020e28 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 8011a7e:	4880      	ldr	r0, [pc, #512]	; (8011c80 <vRW_Settings_Tas+0x34c>)
 8011a80:	f019 fb28 	bl	802b0d4 <spi_fs_file_size>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	dd0f      	ble.n	8011aaa <vRW_Settings_Tas+0x176>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a8e:	2302      	movs	r3, #2
 8011a90:	2200      	movs	r2, #0
 8011a92:	487b      	ldr	r0, [pc, #492]	; (8011c80 <vRW_Settings_Tas+0x34c>)
 8011a94:	f019 faa2 	bl	802afdc <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a98:	4b7a      	ldr	r3, [pc, #488]	; (8011c84 <vRW_Settings_Tas+0x350>)
 8011a9a:	6818      	ldr	r0, [r3, #0]
 8011a9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011aa0:	2302      	movs	r3, #2
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f00f f9c0 	bl	8020e28 <xQueueGenericSend>
 8011aa8:	e00b      	b.n	8011ac2 <vRW_Settings_Tas+0x18e>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011aaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aae:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011ab6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aba:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011abe:	2201      	movs	r2, #1
 8011ac0:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011ac2:	4871      	ldr	r0, [pc, #452]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011ac4:	f019 fb06 	bl	802b0d4 <spi_fs_file_size>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	dd0b      	ble.n	8011ae6 <vRW_Settings_Tas+0x1b2>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011ace:	2304      	movs	r3, #4
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	496e      	ldr	r1, [pc, #440]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011ad4:	486c      	ldr	r0, [pc, #432]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011ad6:	f019 fa81 	bl	802afdc <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011ada:	4b6c      	ldr	r3, [pc, #432]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	e00d      	b.n	8011b02 <vRW_Settings_Tas+0x1ce>
	}else{
		test_kWh_from_flash = 0.0;
 8011ae6:	4b69      	ldr	r3, [pc, #420]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011ae8:	f04f 0200 	mov.w	r2, #0
 8011aec:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011aee:	f04f 0300 	mov.w	r3, #0
 8011af2:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011af6:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011af8:	2204      	movs	r2, #4
 8011afa:	4964      	ldr	r1, [pc, #400]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011afc:	4862      	ldr	r0, [pc, #392]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011afe:	f019 fab1 	bl	802b064 <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011b02:	4863      	ldr	r0, [pc, #396]	; (8011c90 <vRW_Settings_Tas+0x35c>)
 8011b04:	f019 fb62 	bl	802b1cc <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011b08:	4862      	ldr	r0, [pc, #392]	; (8011c94 <vRW_Settings_Tas+0x360>)
 8011b0a:	f019 fc41 	bl	802b390 <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011b0e:	4861      	ldr	r0, [pc, #388]	; (8011c94 <vRW_Settings_Tas+0x360>)
 8011b10:	f019 fb5c 	bl	802b1cc <spi_fs_mkdir>
	/* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011b14:	4b56      	ldr	r3, [pc, #344]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f00f fd08 	bl	8021534 <xQueuePeek>
	  if (PowerSett.save){
 8011b24:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b28:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d014      	beq.n	8011b5c <vRW_Settings_Tas+0x228>
		  PowerSett.save = 0;
 8011b32:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b36:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011b3e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011b42:	2208      	movs	r2, #8
 8011b44:	4619      	mov	r1, r3
 8011b46:	4849      	ldr	r0, [pc, #292]	; (8011c6c <vRW_Settings_Tas+0x338>)
 8011b48:	f019 fa8c 	bl	802b064 <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011b4c:	4b48      	ldr	r3, [pc, #288]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 8011b4e:	6818      	ldr	r0, [r3, #0]
 8011b50:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b54:	2302      	movs	r3, #2
 8011b56:	2200      	movs	r2, #0
 8011b58:	f00f f966 	bl	8020e28 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011b5c:	4b47      	ldr	r3, [pc, #284]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b64:	2200      	movs	r2, #0
 8011b66:	4618      	mov	r0, r3
 8011b68:	f00f fce4 	bl	8021534 <xQueuePeek>
	  if (MQTT_cred.save){
 8011b6c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b70:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d014      	beq.n	8011ba4 <vRW_Settings_Tas+0x270>
		  MQTT_cred.save = 0;
 8011b7a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b7e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b82:	2200      	movs	r2, #0
 8011b84:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b8a:	22c6      	movs	r2, #198	; 0xc6
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	483a      	ldr	r0, [pc, #232]	; (8011c78 <vRW_Settings_Tas+0x344>)
 8011b90:	f019 fa68 	bl	802b064 <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b94:	4b39      	ldr	r3, [pc, #228]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011b96:	6818      	ldr	r0, [r3, #0]
 8011b98:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f00f f942 	bl	8020e28 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011ba4:	4b37      	ldr	r3, [pc, #220]	; (8011c84 <vRW_Settings_Tas+0x350>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011bac:	2200      	movs	r2, #0
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f00f fcc0 	bl	8021534 <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011bb4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bb8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d00c      	beq.n	8011bdc <vRW_Settings_Tas+0x2a8>
		  mb_tcp_sett.save = 0;
 8011bc2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bc6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bca:	2200      	movs	r2, #0
 8011bcc:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bd2:	2202      	movs	r2, #2
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	482a      	ldr	r0, [pc, #168]	; (8011c80 <vRW_Settings_Tas+0x34c>)
 8011bd8:	f019 fa44 	bl	802b064 <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011bdc:	4b2e      	ldr	r3, [pc, #184]	; (8011c98 <vRW_Settings_Tas+0x364>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f107 010c 	add.w	r1, r7, #12
 8011be4:	2200      	movs	r2, #0
 8011be6:	4618      	mov	r0, r3
 8011be8:	f00f fca4 	bl	8021534 <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011bec:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8011bf0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d312      	bcc.n	8011c1e <vRW_Settings_Tas+0x2ea>
 8011bf8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bfc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011c00:	ed93 7a02 	vldr	s14, [r3, #8]
 8011c04:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8011c08:	edd3 7a00 	vldr	s15, [r3]
 8011c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1c:	dd0d      	ble.n	8011c3a <vRW_Settings_Tas+0x306>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011c1e:	f107 030c 	add.w	r3, r7, #12
 8011c22:	3308      	adds	r3, #8
 8011c24:	2204      	movs	r2, #4
 8011c26:	4619      	mov	r1, r3
 8011c28:	4817      	ldr	r0, [pc, #92]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011c2a:	f019 fa1b 	bl	802b064 <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011c2e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011c32:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011c36:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  time_counter ++;
 8011c3a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011c3e:	3301      	adds	r3, #1
 8011c40:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    osDelay(delay1s);
 8011c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c48:	f00e fb98 	bl	802037c <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011c4c:	e762      	b.n	8011b14 <vRW_Settings_Tas+0x1e0>
 8011c4e:	bf00      	nop
 8011c50:	20000328 	.word	0x20000328
 8011c54:	0801578d 	.word	0x0801578d
 8011c58:	08015769 	.word	0x08015769
 8011c5c:	080157c9 	.word	0x080157c9
 8011c60:	080157b1 	.word	0x080157b1
 8011c64:	08011121 	.word	0x08011121
 8011c68:	08011105 	.word	0x08011105
 8011c6c:	08031bc4 	.word	0x08031bc4
 8011c70:	20000454 	.word	0x20000454
 8011c74:	3a83126f 	.word	0x3a83126f
 8011c78:	08031bd4 	.word	0x08031bd4
 8011c7c:	20000458 	.word	0x20000458
 8011c80:	08031be4 	.word	0x08031be4
 8011c84:	2000045c 	.word	0x2000045c
 8011c88:	08031bf8 	.word	0x08031bf8
 8011c8c:	20000494 	.word	0x20000494
 8011c90:	08031c0c 	.word	0x08031c0c
 8011c94:	08031c14 	.word	0x08031c14
 8011c98:	20000450 	.word	0x20000450

08011c9c <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b084      	sub	sp, #16
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	3301      	adds	r3, #1
 8011cac:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011cae:	f00a fa37 	bl	801c120 <DHCP_time_handler>
	httpServer_time_handler();
 8011cb2:	f00d fe6f 	bl	801f994 <httpServer_time_handler>
	dns_service_increment_second();
 8011cb6:	f00a ffc1 	bl	801cc3c <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011cba:	4b06      	ldr	r3, [pc, #24]	; (8011cd4 <vOneSecondTickTask+0x38>)
 8011cbc:	6818      	ldr	r0, [r3, #0]
 8011cbe:	f107 010c 	add.w	r1, r7, #12
 8011cc2:	2302      	movs	r3, #2
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f00f f8af 	bl	8020e28 <xQueueGenericSend>
    osDelay(delay1s);
 8011cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011cce:	f00e fb55 	bl	802037c <osDelay>
	seconds++ ;
 8011cd2:	e7e9      	b.n	8011ca8 <vOneSecondTickTask+0xc>
 8011cd4:	20000460 	.word	0x20000460

08011cd8 <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011cd8:	b590      	push	{r4, r7, lr}
 8011cda:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af12      	add	r7, sp, #72	; 0x48
 8011ce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ce6:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011cea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011cee:	f103 0308 	add.w	r3, r3, #8
 8011cf2:	2220      	movs	r2, #32
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f01b fef8 	bl	802daec <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011cfc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d00:	f103 0308 	add.w	r3, r3, #8
 8011d04:	2217      	movs	r2, #23
 8011d06:	2100      	movs	r1, #0
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f01b feef 	bl	802daec <memset>

	  NetInfo.mac[0]	= 0x40;
 8011d0e:	2340      	movs	r3, #64	; 0x40
 8011d10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d14:	f102 0208 	add.w	r2, r2, #8
 8011d18:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011d1a:	2308      	movs	r3, #8
 8011d1c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d20:	f102 0209 	add.w	r2, r2, #9
 8011d24:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011d26:	4bdc      	ldr	r3, [pc, #880]	; (8012098 <vMaintEthTask+0x3c0>)
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d2e:	f102 020a 	add.w	r2, r2, #10
 8011d32:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011d34:	4bd9      	ldr	r3, [pc, #868]	; (801209c <vMaintEthTask+0x3c4>)
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d3c:	f102 020b 	add.w	r2, r2, #11
 8011d40:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011d42:	4bd7      	ldr	r3, [pc, #860]	; (80120a0 <vMaintEthTask+0x3c8>)
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d4a:	f102 020c 	add.w	r2, r2, #12
 8011d4e:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011d50:	4bd4      	ldr	r3, [pc, #848]	; (80120a4 <vMaintEthTask+0x3cc>)
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d58:	f102 020d 	add.w	r2, r2, #13
 8011d5c:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011d5e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011d62:	f103 030b 	add.w	r3, r3, #11
 8011d66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d6a:	f102 0208 	add.w	r2, r2, #8
 8011d6e:	6810      	ldr	r0, [r2, #0]
 8011d70:	6018      	str	r0, [r3, #0]
 8011d72:	8892      	ldrh	r2, [r2, #4]
 8011d74:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011d76:	2302      	movs	r3, #2
 8011d78:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d7c:	f102 021e 	add.w	r2, r2, #30
 8011d80:	7013      	strb	r3, [r2, #0]
 8011d82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d86:	f103 030e 	add.w	r3, r3, #14
 8011d8a:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d8c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d90:	f102 0211 	add.w	r2, r2, #17
 8011d94:	6013      	str	r3, [r2, #0]
 8011d96:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d9a:	f103 0312 	add.w	r3, r3, #18
 8011d9e:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011da0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011da4:	f102 0215 	add.w	r2, r2, #21
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dae:	f103 0316 	add.w	r3, r3, #22
 8011db2:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011db4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011db8:	f102 0219 	add.w	r2, r2, #25
 8011dbc:	6013      	str	r3, [r2, #0]
 8011dbe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dc2:	f103 031a 	add.w	r3, r3, #26
 8011dc6:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011dc8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dcc:	f102 021d 	add.w	r2, r2, #29
 8011dd0:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011dd2:	4cb5      	ldr	r4, [pc, #724]	; (80120a8 <vMaintEthTask+0x3d0>)
 8011dd4:	4668      	mov	r0, sp
 8011dd6:	f104 0310 	add.w	r3, r4, #16
 8011dda:	2248      	movs	r2, #72	; 0x48
 8011ddc:	4619      	mov	r1, r3
 8011dde:	f01c f85a 	bl	802de96 <memcpy>
 8011de2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011de6:	f00e f927 	bl	8020038 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011dea:	49b0      	ldr	r1, [pc, #704]	; (80120ac <vMaintEthTask+0x3d4>)
 8011dec:	48b0      	ldr	r0, [pc, #704]	; (80120b0 <vMaintEthTask+0x3d8>)
 8011dee:	f00e f8cf 	bl	801ff90 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011df2:	48b0      	ldr	r0, [pc, #704]	; (80120b4 <vMaintEthTask+0x3dc>)
 8011df4:	f00e f8b4 	bl	801ff60 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011df8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dfc:	f103 0308 	add.w	r3, r3, #8
 8011e00:	4618      	mov	r0, r3
 8011e02:	f00d ffb1 	bl	801fd68 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011e06:	49ac      	ldr	r1, [pc, #688]	; (80120b8 <vMaintEthTask+0x3e0>)
 8011e08:	48ac      	ldr	r0, [pc, #688]	; (80120bc <vMaintEthTask+0x3e4>)
 8011e0a:	f008 f8f3 	bl	8019ff4 <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011e0e:	49ac      	ldr	r1, [pc, #688]	; (80120c0 <vMaintEthTask+0x3e8>)
 8011e10:	48ac      	ldr	r0, [pc, #688]	; (80120c4 <vMaintEthTask+0x3ec>)
 8011e12:	f008 f8c9 	bl	8019fa8 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011e16:	49ac      	ldr	r1, [pc, #688]	; (80120c8 <vMaintEthTask+0x3f0>)
 8011e18:	48ac      	ldr	r0, [pc, #688]	; (80120cc <vMaintEthTask+0x3f4>)
 8011e1a:	f008 f89f 	bl	8019f5c <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011e1e:	4aac      	ldr	r2, [pc, #688]	; (80120d0 <vMaintEthTask+0x3f8>)
 8011e20:	49ac      	ldr	r1, [pc, #688]	; (80120d4 <vMaintEthTask+0x3fc>)
 8011e22:	48ac      	ldr	r0, [pc, #688]	; (80120d4 <vMaintEthTask+0x3fc>)
 8011e24:	f008 fe4a 	bl	801aabc <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011e28:	f107 0320 	add.w	r3, r7, #32
 8011e2c:	3b18      	subs	r3, #24
 8011e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e32:	4619      	mov	r1, r3
 8011e34:	2004      	movs	r0, #4
 8011e36:	f00a feab 	bl	801cb90 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011e3a:	48a7      	ldr	r0, [pc, #668]	; (80120d8 <vMaintEthTask+0x400>)
 8011e3c:	f00a fe96 	bl	801cb6c <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011e40:	49a6      	ldr	r1, [pc, #664]	; (80120dc <vMaintEthTask+0x404>)
 8011e42:	48a7      	ldr	r0, [pc, #668]	; (80120e0 <vMaintEthTask+0x408>)
 8011e44:	f00a fe76 	bl	801cb34 <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011e48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e4c:	f103 031e 	add.w	r3, r3, #30
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e56:	f102 0201 	add.w	r2, r2, #1
 8011e5a:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011e62:	f102 0208 	add.w	r2, r2, #8
 8011e66:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011e68:	f00e f83c 	bl	801fee4 <w5500_init>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f040 81eb 	bne.w	801224a <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e78:	f010 f83c 	bl	8021ef4 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e80:	f103 0308 	add.w	r3, r3, #8
 8011e84:	2206      	movs	r2, #6
 8011e86:	4619      	mov	r1, r3
 8011e88:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8011e8c:	f006 fe22 	bl	8018ad4 <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e90:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e94:	f103 031e 	add.w	r3, r3, #30
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d106      	bne.n	8011eac <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e9e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	f00a f891 	bl	801bfcc <DHCP_init>
 8011eaa:	e003      	b.n	8011eb4 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011eac:	f00d ff6c 	bl	801fd88 <network_init>
			set_ip_aasigned();
 8011eb0:	f00e f80c 	bl	801fecc <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011eb4:	f7ff f940 	bl	8011138 <SocketMutexTake>
			dhcp_rutine();
 8011eb8:	f00d ffb6 	bl	801fe28 <dhcp_rutine>

			if (!link_status()){
 8011ebc:	f00d ffcc 	bl	801fe58 <link_status>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f040 80e0 	bne.w	8012088 <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ece:	f102 020e 	add.w	r2, r2, #14
 8011ed2:	7013      	strb	r3, [r2, #0]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eda:	f102 020f 	add.w	r2, r2, #15
 8011ede:	7013      	strb	r3, [r2, #0]
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ee6:	f102 0210 	add.w	r2, r2, #16
 8011eea:	7013      	strb	r3, [r2, #0]
 8011eec:	2300      	movs	r3, #0
 8011eee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ef2:	f102 0211 	add.w	r2, r2, #17
 8011ef6:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011efe:	f102 0212 	add.w	r2, r2, #18
 8011f02:	7013      	strb	r3, [r2, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f0a:	f102 0213 	add.w	r2, r2, #19
 8011f0e:	7013      	strb	r3, [r2, #0]
 8011f10:	2300      	movs	r3, #0
 8011f12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f16:	f102 0214 	add.w	r2, r2, #20
 8011f1a:	7013      	strb	r3, [r2, #0]
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f22:	f102 0215 	add.w	r2, r2, #21
 8011f26:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f2e:	f102 0216 	add.w	r2, r2, #22
 8011f32:	7013      	strb	r3, [r2, #0]
 8011f34:	2300      	movs	r3, #0
 8011f36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f3a:	f102 0217 	add.w	r2, r2, #23
 8011f3e:	7013      	strb	r3, [r2, #0]
 8011f40:	2300      	movs	r3, #0
 8011f42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f46:	f102 0218 	add.w	r2, r2, #24
 8011f4a:	7013      	strb	r3, [r2, #0]
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f52:	f102 0219 	add.w	r2, r2, #25
 8011f56:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f5e:	f102 021a 	add.w	r2, r2, #26
 8011f62:	7013      	strb	r3, [r2, #0]
 8011f64:	2300      	movs	r3, #0
 8011f66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f6a:	f102 021b 	add.w	r2, r2, #27
 8011f6e:	7013      	strb	r3, [r2, #0]
 8011f70:	2300      	movs	r3, #0
 8011f72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f76:	f102 021c 	add.w	r2, r2, #28
 8011f7a:	7013      	strb	r3, [r2, #0]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f82:	f102 021d 	add.w	r2, r2, #29
 8011f86:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f88:	f7ff f8e4 	bl	8011154 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f92:	f102 021f 	add.w	r2, r2, #31
 8011f96:	7013      	strb	r3, [r2, #0]
 8011f98:	e05a      	b.n	8012050 <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f9e:	f103 031f 	add.w	r3, r3, #31
 8011fa2:	781a      	ldrb	r2, [r3, #0]
 8011fa4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fa8:	f103 031f 	add.w	r3, r3, #31
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fb2:	443a      	add	r2, r7
 8011fb4:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011fb8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fbc:	443b      	add	r3, r7
 8011fbe:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011fc2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fc6:	f103 031f 	add.w	r3, r3, #31
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fd0:	f103 031f 	add.w	r3, r3, #31
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fda:	443a      	add	r2, r7
 8011fdc:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011fe0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fe4:	443b      	add	r3, r7
 8011fe6:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011fea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fee:	f103 031f 	add.w	r3, r3, #31
 8011ff2:	781a      	ldrb	r2, [r3, #0]
 8011ff4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011ff8:	f103 031f 	add.w	r3, r3, #31
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012002:	443a      	add	r2, r7
 8012004:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8012008:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801200c:	443b      	add	r3, r7
 801200e:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8012012:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012016:	f103 031f 	add.w	r3, r3, #31
 801201a:	781a      	ldrb	r2, [r3, #0]
 801201c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012020:	f103 031f 	add.w	r3, r3, #31
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801202a:	443a      	add	r2, r7
 801202c:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012030:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012034:	443b      	add	r3, r7
 8012036:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 801203a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801203e:	f103 031f 	add.w	r3, r3, #31
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	3301      	adds	r3, #1
 8012046:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801204a:	f102 021f 	add.w	r2, r2, #31
 801204e:	7013      	strb	r3, [r2, #0]
 8012050:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012054:	f103 031f 	add.w	r3, r3, #31
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	2b03      	cmp	r3, #3
 801205c:	d99d      	bls.n	8011f9a <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 801205e:	2300      	movs	r3, #0
 8012060:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8012064:	f102 0208 	add.w	r2, r2, #8
 8012068:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 801206a:	4b1e      	ldr	r3, [pc, #120]	; (80120e4 <vMaintEthTask+0x40c>)
 801206c:	6818      	ldr	r0, [r3, #0]
 801206e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012072:	f101 0108 	add.w	r1, r1, #8
 8012076:	2302      	movs	r3, #2
 8012078:	2200      	movs	r2, #0
 801207a:	f00e fed5 	bl	8020e28 <xQueueGenericSend>
				break;
 801207e:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8012080:	2001      	movs	r0, #1
 8012082:	f00e f97b 	bl	802037c <osDelay>
 8012086:	e6df      	b.n	8011e48 <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012088:	2300      	movs	r3, #0
 801208a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801208e:	f102 021f 	add.w	r2, r2, #31
 8012092:	7013      	strb	r3, [r2, #0]
 8012094:	e083      	b.n	801219e <vMaintEthTask+0x4c6>
 8012096:	bf00      	nop
 8012098:	1fff7a10 	.word	0x1fff7a10
 801209c:	1fff7a11 	.word	0x1fff7a11
 80120a0:	1fff7a12 	.word	0x1fff7a12
 80120a4:	1fff7a13 	.word	0x1fff7a13
 80120a8:	20000380 	.word	0x20000380
 80120ac:	0801fff1 	.word	0x0801fff1
 80120b0:	0801ffd9 	.word	0x0801ffd9
 80120b4:	0802037d 	.word	0x0802037d
 80120b8:	08020069 	.word	0x08020069
 80120bc:	0802008d 	.word	0x0802008d
 80120c0:	08020021 	.word	0x08020021
 80120c4:	08020009 	.word	0x08020009
 80120c8:	080110ed 	.word	0x080110ed
 80120cc:	080110d1 	.word	0x080110d1
 80120d0:	0801fdbd 	.word	0x0801fdbd
 80120d4:	0801fdd5 	.word	0x0801fdd5
 80120d8:	0801feb5 	.word	0x0801feb5
 80120dc:	08011189 	.word	0x08011189
 80120e0:	0801116d 	.word	0x0801116d
 80120e4:	2000044c 	.word	0x2000044c
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 80120e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ec:	f103 031f 	add.w	r3, r3, #31
 80120f0:	781a      	ldrb	r2, [r3, #0]
 80120f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120f6:	f103 031f 	add.w	r3, r3, #31
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012100:	443a      	add	r2, r7
 8012102:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8012106:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801210a:	443b      	add	r3, r7
 801210c:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8012110:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012114:	f103 031f 	add.w	r3, r3, #31
 8012118:	781a      	ldrb	r2, [r3, #0]
 801211a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801211e:	f103 031f 	add.w	r3, r3, #31
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012128:	443a      	add	r2, r7
 801212a:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 801212e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012132:	443b      	add	r3, r7
 8012134:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8012138:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801213c:	f103 031f 	add.w	r3, r3, #31
 8012140:	781a      	ldrb	r2, [r3, #0]
 8012142:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012146:	f103 031f 	add.w	r3, r3, #31
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012150:	443a      	add	r2, r7
 8012152:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8012156:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801215a:	443b      	add	r3, r7
 801215c:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8012160:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012164:	f103 031f 	add.w	r3, r3, #31
 8012168:	781a      	ldrb	r2, [r3, #0]
 801216a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801216e:	f103 031f 	add.w	r3, r3, #31
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012178:	443a      	add	r2, r7
 801217a:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 801217e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012182:	443b      	add	r3, r7
 8012184:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012188:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801218c:	f103 031f 	add.w	r3, r3, #31
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	3301      	adds	r3, #1
 8012194:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012198:	f102 021f 	add.w	r2, r2, #31
 801219c:	7013      	strb	r3, [r2, #0]
 801219e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121a2:	f103 031f 	add.w	r3, r3, #31
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	2b03      	cmp	r3, #3
 80121aa:	d99d      	bls.n	80120e8 <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 80121ac:	2301      	movs	r3, #1
 80121ae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121b2:	f102 0208 	add.w	r2, r2, #8
 80121b6:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 80121b8:	f00d fe70 	bl	801fe9c <link_speed>
 80121bc:	4603      	mov	r3, r0
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121c4:	f102 020a 	add.w	r2, r2, #10
 80121c8:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 80121ca:	f00d fe5b 	bl	801fe84 <link_duplex>
 80121ce:	4603      	mov	r3, r0
 80121d0:	b2db      	uxtb	r3, r3
 80121d2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121d6:	f102 0209 	add.w	r2, r2, #9
 80121da:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 80121dc:	f00a f82e 	bl	801c23c <getDHCPLeasetime>
 80121e0:	4603      	mov	r3, r0
 80121e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80121e6:	f102 0204 	add.w	r2, r2, #4
 80121ea:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 80121ec:	f7fe ffb2 	bl	8011154 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 80121f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121f4:	f103 030e 	add.w	r3, r3, #14
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10e      	bne.n	801221c <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121fe:	4b14      	ldr	r3, [pc, #80]	; (8012250 <vMaintEthTask+0x578>)
 8012200:	6818      	ldr	r0, [r3, #0]
 8012202:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012206:	f101 0108 	add.w	r1, r1, #8
 801220a:	2302      	movs	r3, #2
 801220c:	2200      	movs	r2, #0
 801220e:	f00e fe0b 	bl	8020e28 <xQueueGenericSend>
				osDelay(delay1s);
 8012212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012216:	f00e f8b1 	bl	802037c <osDelay>
				continue;
 801221a:	e015      	b.n	8012248 <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 801221c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012220:	f103 0308 	add.w	r3, r3, #8
 8012224:	3315      	adds	r3, #21
 8012226:	4618      	mov	r0, r3
 8012228:	f00a fccc 	bl	801cbc4 <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 801222c:	4b08      	ldr	r3, [pc, #32]	; (8012250 <vMaintEthTask+0x578>)
 801222e:	6818      	ldr	r0, [r3, #0]
 8012230:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012234:	f101 0108 	add.w	r1, r1, #8
 8012238:	2302      	movs	r3, #2
 801223a:	2200      	movs	r2, #0
 801223c:	f00e fdf4 	bl	8020e28 <xQueueGenericSend>
			osDelay(delay1s);
 8012240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012244:	f00e f89a 	bl	802037c <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 8012248:	e634      	b.n	8011eb4 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 801224a:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 801224c:	e5fc      	b.n	8011e48 <vMaintEthTask+0x170>
 801224e:	bf00      	nop
 8012250:	2000044c 	.word	0x2000044c

08012254 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 801225c:	4b1f      	ldr	r3, [pc, #124]	; (80122dc <vDebugMemUsage+0x88>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4618      	mov	r0, r3
 8012262:	f00e f84d 	bl	8020300 <osThreadGetStackSpace>
 8012266:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 8012268:	4b1d      	ldr	r3, [pc, #116]	; (80122e0 <vDebugMemUsage+0x8c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4618      	mov	r0, r3
 801226e:	f00e f847 	bl	8020300 <osThreadGetStackSpace>
 8012272:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8012274:	4b1b      	ldr	r3, [pc, #108]	; (80122e4 <vDebugMemUsage+0x90>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4618      	mov	r0, r3
 801227a:	f00e f841 	bl	8020300 <osThreadGetStackSpace>
 801227e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 8012280:	4b19      	ldr	r3, [pc, #100]	; (80122e8 <vDebugMemUsage+0x94>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4618      	mov	r0, r3
 8012286:	f00e f83b 	bl	8020300 <osThreadGetStackSpace>
 801228a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 801228c:	4b17      	ldr	r3, [pc, #92]	; (80122ec <vDebugMemUsage+0x98>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f00e f835 	bl	8020300 <osThreadGetStackSpace>
 8012296:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 8012298:	4b15      	ldr	r3, [pc, #84]	; (80122f0 <vDebugMemUsage+0x9c>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4618      	mov	r0, r3
 801229e:	f00e f82f 	bl	8020300 <osThreadGetStackSpace>
 80122a2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 80122a4:	4b13      	ldr	r3, [pc, #76]	; (80122f4 <vDebugMemUsage+0xa0>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f00e f829 	bl	8020300 <osThreadGetStackSpace>
 80122ae:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(mqttClientTaskHandle);
 80122b0:	4b11      	ldr	r3, [pc, #68]	; (80122f8 <vDebugMemUsage+0xa4>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f00e f823 	bl	8020300 <osThreadGetStackSpace>
 80122ba:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SendBroadcastHandle);
 80122bc:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <vDebugMemUsage+0xa8>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f00e f81d 	bl	8020300 <osThreadGetStackSpace>
 80122c6:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122c8:	2000      	movs	r0, #0
 80122ca:	f00e f819 	bl	8020300 <osThreadGetStackSpace>
 80122ce:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 80122d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122d4:	f00e f852 	bl	802037c <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80122d8:	e7c0      	b.n	801225c <vDebugMemUsage+0x8>
 80122da:	bf00      	nop
 80122dc:	20000420 	.word	0x20000420
 80122e0:	20000424 	.word	0x20000424
 80122e4:	20000428 	.word	0x20000428
 80122e8:	2000042c 	.word	0x2000042c
 80122ec:	20000430 	.word	0x20000430
 80122f0:	20000434 	.word	0x20000434
 80122f4:	20000438 	.word	0x20000438
 80122f8:	2000043c 	.word	0x2000043c
 80122fc:	20000444 	.word	0x20000444

08012300 <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801230e:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 8012312:	4a51      	ldr	r2, [pc, #324]	; (8012458 <httpServ+0x158>)
 8012314:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012318:	f103 0308 	add.w	r3, r3, #8
 801231c:	6812      	ldr	r2, [r2, #0]
 801231e:	4611      	mov	r1, r2
 8012320:	8019      	strh	r1, [r3, #0]
 8012322:	3302      	adds	r3, #2
 8012324:	0c12      	lsrs	r2, r2, #16
 8012326:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 8012328:	2303      	movs	r3, #3
 801232a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801232e:	f102 020e 	add.w	r2, r2, #14
 8012332:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 8012334:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012338:	f103 0308 	add.w	r3, r3, #8
 801233c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012340:	f102 020e 	add.w	r2, r2, #14
 8012344:	7812      	ldrb	r2, [r2, #0]
 8012346:	f607 0108 	addw	r1, r7, #2056	; 0x808
 801234a:	f107 0010 	add.w	r0, r7, #16
 801234e:	3808      	subs	r0, #8
 8012350:	f00c fd48 	bl	801ede4 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 8012354:	4841      	ldr	r0, [pc, #260]	; (801245c <httpServ+0x15c>)
 8012356:	f00d fcb7 	bl	801fcc8 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 801235a:	4841      	ldr	r0, [pc, #260]	; (8012460 <httpServ+0x160>)
 801235c:	f00d fccc 	bl	801fcf8 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 8012360:	4b40      	ldr	r3, [pc, #256]	; (8012464 <httpServ+0x164>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2103      	movs	r1, #3
 8012366:	4618      	mov	r0, r3
 8012368:	f000 fe26 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 801236c:	4b3e      	ldr	r3, [pc, #248]	; (8012468 <httpServ+0x168>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2104      	movs	r1, #4
 8012372:	4618      	mov	r0, r3
 8012374:	f000 fe20 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 8012378:	4b3c      	ldr	r3, [pc, #240]	; (801246c <httpServ+0x16c>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2100      	movs	r1, #0
 801237e:	4618      	mov	r0, r3
 8012380:	f000 fe1a 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8012384:	4b3a      	ldr	r3, [pc, #232]	; (8012470 <httpServ+0x170>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2102      	movs	r1, #2
 801238a:	4618      	mov	r0, r3
 801238c:	f000 fe14 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 8012390:	4b38      	ldr	r3, [pc, #224]	; (8012474 <httpServ+0x174>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2105      	movs	r1, #5
 8012396:	4618      	mov	r0, r3
 8012398:	f000 fe0e 	bl	8012fb8 <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 801239c:	4936      	ldr	r1, [pc, #216]	; (8012478 <httpServ+0x178>)
 801239e:	4837      	ldr	r0, [pc, #220]	; (801247c <httpServ+0x17c>)
 80123a0:	f00d fb14 	bl	801f9cc <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 80123a4:	4936      	ldr	r1, [pc, #216]	; (8012480 <httpServ+0x180>)
 80123a6:	4837      	ldr	r0, [pc, #220]	; (8012484 <httpServ+0x184>)
 80123a8:	f00d fb10 	bl	801f9cc <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 80123ac:	4936      	ldr	r1, [pc, #216]	; (8012488 <httpServ+0x188>)
 80123ae:	4837      	ldr	r0, [pc, #220]	; (801248c <httpServ+0x18c>)
 80123b0:	f00d fb0c 	bl	801f9cc <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 80123b4:	4b36      	ldr	r3, [pc, #216]	; (8012490 <httpServ+0x190>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80123bc:	f101 010c 	add.w	r1, r1, #12
 80123c0:	2200      	movs	r2, #0
 80123c2:	4618      	mov	r0, r3
 80123c4:	f00f f8b6 	bl	8021534 <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123c8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123cc:	f103 030c 	add.w	r3, r3, #12
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d037      	beq.n	8012446 <httpServ+0x146>
 80123d6:	f00d fd6d 	bl	801feb4 <assigned_ip>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d132      	bne.n	8012446 <httpServ+0x146>
		  for(i = 0 ; i < http_nsockets; i++){
 80123e0:	2300      	movs	r3, #0
 80123e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123e6:	f102 020f 	add.w	r2, r2, #15
 80123ea:	7013      	strb	r3, [r2, #0]
 80123ec:	e01e      	b.n	801242c <httpServ+0x12c>
			  SocketMutexTake();
 80123ee:	f7fe fea3 	bl	8011138 <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 80123f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123f6:	f103 030f 	add.w	r3, r3, #15
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f00c fd0d 	bl	801ee1c <httpServer_run>
			  SocketMutexRelease();
 8012402:	f7fe fea7 	bl	8011154 <SocketMutexRelease>
			  //osDelay(delay0_1s);
			  taskYIELD();
 8012406:	4b23      	ldr	r3, [pc, #140]	; (8012494 <httpServ+0x194>)
 8012408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	f3bf 8f4f 	dsb	sy
 8012412:	f3bf 8f6f 	isb	sy
		  for(i = 0 ; i < http_nsockets; i++){
 8012416:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801241a:	f103 030f 	add.w	r3, r3, #15
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	3301      	adds	r3, #1
 8012422:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012426:	f102 020f 	add.w	r2, r2, #15
 801242a:	7013      	strb	r3, [r2, #0]
 801242c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012430:	f103 030f 	add.w	r3, r3, #15
 8012434:	781a      	ldrb	r2, [r3, #0]
 8012436:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801243a:	f103 030e 	add.w	r3, r3, #14
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	429a      	cmp	r2, r3
 8012442:	d3d4      	bcc.n	80123ee <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012444:	e003      	b.n	801244e <httpServ+0x14e>

		  }
	  }else{
		  osDelay(delay1s);
 8012446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801244a:	f00d ff97 	bl	802037c <osDelay>
	  }
	  osDelay(delay0_1s);
 801244e:	2064      	movs	r0, #100	; 0x64
 8012450:	f00d ff94 	bl	802037c <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012454:	e7ae      	b.n	80123b4 <httpServ+0xb4>
 8012456:	bf00      	nop
 8012458:	08032834 	.word	0x08032834
 801245c:	08013d51 	.word	0x08013d51
 8012460:	08013e65 	.word	0x08013e65
 8012464:	20000450 	.word	0x20000450
 8012468:	20000454 	.word	0x20000454
 801246c:	20000458 	.word	0x20000458
 8012470:	2000045c 	.word	0x2000045c
 8012474:	20000460 	.word	0x20000460
 8012478:	08031c20 	.word	0x08031c20
 801247c:	08031f3c 	.word	0x08031f3c
 8012480:	08031f48 	.word	0x08031f48
 8012484:	0803227c 	.word	0x0803227c
 8012488:	08032290 	.word	0x08032290
 801248c:	08032828 	.word	0x08032828
 8012490:	2000044c 	.word	0x2000044c
 8012494:	e000ed04 	.word	0xe000ed04

08012498 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	f5ad 6d22 	sub.w	sp, sp, #2592	; 0xa20
 801249e:	af02      	add	r7, sp, #8
 80124a0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80124a4:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80124a8:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 80124aa:	499e      	ldr	r1, [pc, #632]	; (8012724 <vMQTT_Task+0x28c>)
 80124ac:	489e      	ldr	r0, [pc, #632]	; (8012728 <vMQTT_Task+0x290>)
 80124ae:	f001 fda9 	bl	8014004 <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 80124b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124b6:	f00d ff61 	bl	802037c <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 80124ba:	4b9c      	ldr	r3, [pc, #624]	; (801272c <vMQTT_Task+0x294>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 80124c2:	2200      	movs	r2, #0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f00f f835 	bl	8021534 <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 80124ca:	f897 39f8 	ldrb.w	r3, [r7, #2552]	; 0x9f8
 80124ce:	f083 0301 	eor.w	r3, r3, #1
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f040 811a 	bne.w	801270e <vMQTT_Task+0x276>
 80124da:	f00d fceb 	bl	801feb4 <assigned_ip>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	f040 8114 	bne.w	801270e <vMQTT_Task+0x276>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124e6:	4b92      	ldr	r3, [pc, #584]	; (8012730 <vMQTT_Task+0x298>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124ee:	2200      	movs	r2, #0
 80124f0:	4618      	mov	r0, r3
 80124f2:	f00f f81f 	bl	8021534 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124f6:	e00b      	b.n	8012510 <vMQTT_Task+0x78>
			osDelay(delay1s);
 80124f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124fc:	f00d ff3e 	bl	802037c <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 8012500:	4b8b      	ldr	r3, [pc, #556]	; (8012730 <vMQTT_Task+0x298>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012508:	2200      	movs	r2, #0
 801250a:	4618      	mov	r0, r3
 801250c:	f00f f812 	bl	8021534 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 8012510:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 8012514:	f083 0301 	eor.w	r3, r3, #1
 8012518:	b2db      	uxtb	r3, r3
 801251a:	2b00      	cmp	r3, #0
 801251c:	d1ec      	bne.n	80124f8 <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 801251e:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 8012522:	f083 0301 	eor.w	r3, r3, #1
 8012526:	b2db      	uxtb	r3, r3
 8012528:	2b00      	cmp	r3, #0
 801252a:	f040 80f2 	bne.w	8012712 <vMQTT_Task+0x27a>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 801252e:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8012532:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012536:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 801253a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801253e:	9301      	str	r3, [sp, #4]
 8012540:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801254a:	f001 fd77 	bl	801403c <mqtt_client_init>
 801254e:	4603      	mov	r3, r0
 8012550:	2b00      	cmp	r3, #0
 8012552:	f040 80e0 	bne.w	8012716 <vMQTT_Task+0x27e>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 8012556:	f001 fe5d 	bl	8014214 <mqtt_client_connect>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	f2c0 80dc 	blt.w	801271a <vMQTT_Task+0x282>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8012562:	f001 fea7 	bl	80142b4 <mqtt_client_reg_dev_on_home_assist>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	f040 80d8 	bne.w	801271e <vMQTT_Task+0x286>

		generate_status_topik(topik_name, 0);
 801256e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012572:	2100      	movs	r1, #0
 8012574:	4618      	mov	r0, r3
 8012576:	f002 fad9 	bl	8014b2c <generate_status_topik>
		while (1){
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 801257a:	4b6d      	ldr	r3, [pc, #436]	; (8012730 <vMQTT_Task+0x298>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012582:	2200      	movs	r2, #0
 8012584:	4618      	mov	r0, r3
 8012586:	f00e ffd5 	bl	8021534 <xQueuePeek>
			if (MQTT_cred.enable == 0){
 801258a:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 801258e:	f083 0301 	eor.w	r3, r3, #1
 8012592:	b2db      	uxtb	r3, r3
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <vMQTT_Task+0x106>
				mqtt_disconnect();
 8012598:	f002 f814 	bl	80145c4 <mqtt_disconnect>
				break;
 801259c:	e0b2      	b.n	8012704 <vMQTT_Task+0x26c>
			}
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801259e:	4b65      	ldr	r3, [pc, #404]	; (8012734 <vMQTT_Task+0x29c>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80125a6:	2200      	movs	r2, #0
 80125a8:	4618      	mov	r0, r3
 80125aa:	f00e ffc3 	bl	8021534 <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 80125ae:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80125ba:	f107 030c 	add.w	r3, r7, #12
 80125be:	eeb0 0a67 	vmov.f32	s0, s15
 80125c2:	495d      	ldr	r1, [pc, #372]	; (8012738 <vMQTT_Task+0x2a0>)
 80125c4:	4618      	mov	r0, r3
 80125c6:	f002 fae9 	bl	8014b9c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125ca:	f107 020c 	add.w	r2, r7, #12
 80125ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f001 ffbf 	bl	8014558 <send_data_to_topik>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f040 8086 	bne.w	80126ee <vMQTT_Task+0x256>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 80125e2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125ea:	edd3 7a00 	vldr	s15, [r3]
 80125ee:	f107 030c 	add.w	r3, r7, #12
 80125f2:	eeb0 0a67 	vmov.f32	s0, s15
 80125f6:	4951      	ldr	r1, [pc, #324]	; (801273c <vMQTT_Task+0x2a4>)
 80125f8:	4618      	mov	r0, r3
 80125fa:	f002 facf 	bl	8014b9c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125fe:	f107 020c 	add.w	r2, r7, #12
 8012602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012606:	4611      	mov	r1, r2
 8012608:	4618      	mov	r0, r3
 801260a:	f001 ffa5 	bl	8014558 <send_data_to_topik>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d16e      	bne.n	80126f2 <vMQTT_Task+0x25a>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 8012614:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012618:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801261c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012620:	f107 030c 	add.w	r3, r7, #12
 8012624:	eeb0 0a67 	vmov.f32	s0, s15
 8012628:	4945      	ldr	r1, [pc, #276]	; (8012740 <vMQTT_Task+0x2a8>)
 801262a:	4618      	mov	r0, r3
 801262c:	f002 fab6 	bl	8014b9c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012630:	f107 020c 	add.w	r2, r7, #12
 8012634:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012638:	4611      	mov	r1, r2
 801263a:	4618      	mov	r0, r3
 801263c:	f001 ff8c 	bl	8014558 <send_data_to_topik>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d157      	bne.n	80126f6 <vMQTT_Task+0x25e>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 8012646:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 801264a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801264e:	edd3 7a05 	vldr	s15, [r3, #20]
 8012652:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8012744 <vMQTT_Task+0x2ac>
 8012656:	ee67 7a87 	vmul.f32	s15, s15, s14
 801265a:	f107 030c 	add.w	r3, r7, #12
 801265e:	eeb0 0a67 	vmov.f32	s0, s15
 8012662:	4939      	ldr	r1, [pc, #228]	; (8012748 <vMQTT_Task+0x2b0>)
 8012664:	4618      	mov	r0, r3
 8012666:	f002 fa99 	bl	8014b9c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801266a:	f107 020c 	add.w	r2, r7, #12
 801266e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012672:	4611      	mov	r1, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f001 ff6f 	bl	8014558 <send_data_to_topik>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d13c      	bne.n	80126fa <vMQTT_Task+0x262>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ActivePower);
 8012680:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012684:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012688:	edd3 7a03 	vldr	s15, [r3, #12]
 801268c:	f107 030c 	add.w	r3, r7, #12
 8012690:	eeb0 0a67 	vmov.f32	s0, s15
 8012694:	492d      	ldr	r1, [pc, #180]	; (801274c <vMQTT_Task+0x2b4>)
 8012696:	4618      	mov	r0, r3
 8012698:	f002 fa80 	bl	8014b9c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801269c:	f107 020c 	add.w	r2, r7, #12
 80126a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80126a4:	4611      	mov	r1, r2
 80126a6:	4618      	mov	r0, r3
 80126a8:	f001 ff56 	bl	8014558 <send_data_to_topik>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d125      	bne.n	80126fe <vMQTT_Task+0x266>

			generate_key_value_JSON(topik_payload, dev_class_apparent_power, PowerData.ApparPower);
 80126b2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80126b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80126ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80126be:	f107 030c 	add.w	r3, r7, #12
 80126c2:	eeb0 0a67 	vmov.f32	s0, s15
 80126c6:	4922      	ldr	r1, [pc, #136]	; (8012750 <vMQTT_Task+0x2b8>)
 80126c8:	4618      	mov	r0, r3
 80126ca:	f002 fa67 	bl	8014b9c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ce:	f107 020c 	add.w	r2, r7, #12
 80126d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80126d6:	4611      	mov	r1, r2
 80126d8:	4618      	mov	r0, r3
 80126da:	f001 ff3d 	bl	8014558 <send_data_to_topik>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d10e      	bne.n	8012702 <vMQTT_Task+0x26a>

			osDelay(delay30s);
 80126e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80126e8:	f00d fe48 	bl	802037c <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80126ec:	e745      	b.n	801257a <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ee:	bf00      	nop
 80126f0:	e008      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126f2:	bf00      	nop
 80126f4:	e006      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126f6:	bf00      	nop
 80126f8:	e004      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126fa:	bf00      	nop
 80126fc:	e002      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126fe:	bf00      	nop
 8012700:	e000      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012702:	bf00      	nop
		}
		osDelay(delay1s);
 8012704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012708:	f00d fe38 	bl	802037c <osDelay>
 801270c:	e6d1      	b.n	80124b2 <vMQTT_Task+0x1a>
			continue;
 801270e:	bf00      	nop
 8012710:	e6cf      	b.n	80124b2 <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 8012712:	bf00      	nop
 8012714:	e6cd      	b.n	80124b2 <vMQTT_Task+0x1a>
			continue;
 8012716:	bf00      	nop
 8012718:	e6cb      	b.n	80124b2 <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 801271a:	bf00      	nop
 801271c:	e6c9      	b.n	80124b2 <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 801271e:	bf00      	nop
		osDelay(delay1s);
 8012720:	e6c7      	b.n	80124b2 <vMQTT_Task+0x1a>
 8012722:	bf00      	nop
 8012724:	08011155 	.word	0x08011155
 8012728:	08011139 	.word	0x08011139
 801272c:	2000044c 	.word	0x2000044c
 8012730:	20000458 	.word	0x20000458
 8012734:	20000450 	.word	0x20000450
 8012738:	08032838 	.word	0x08032838
 801273c:	08032840 	.word	0x08032840
 8012740:	08032848 	.word	0x08032848
 8012744:	42c80000 	.word	0x42c80000
 8012748:	08032850 	.word	0x08032850
 801274c:	08032860 	.word	0x08032860
 8012750:	08032868 	.word	0x08032868

08012754 <vResetWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vResetWatchDog */
void vResetWatchDog(void *argument)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vResetWatchDog */
  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 801275c:	4803      	ldr	r0, [pc, #12]	; (801276c <vResetWatchDog+0x18>)
 801275e:	f003 fbf0 	bl	8015f42 <HAL_IWDG_Refresh>
    osDelay(delay0_5s);
 8012762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012766:	f00d fe09 	bl	802037c <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 801276a:	e7f7      	b.n	801275c <vResetWatchDog+0x8>
 801276c:	2000031c 	.word	0x2000031c

08012770 <vSendBroadcast>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSendBroadcast */
void vSendBroadcast(void *argument)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b0ce      	sub	sp, #312	; 0x138
 8012774:	af02      	add	r7, sp, #8
 8012776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801277a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801277e:	6018      	str	r0, [r3, #0]
	int16_t					string_len;

   /* Infinite loop */
  for(;;)
  {
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8012780:	4b40      	ldr	r3, [pc, #256]	; (8012884 <vSendBroadcast+0x114>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8012788:	2200      	movs	r2, #0
 801278a:	4618      	mov	r0, r3
 801278c:	f00e fed2 	bl	8021534 <xQueuePeek>
	if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 8012790:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012794:	f083 0301 	eor.w	r3, r3, #1
 8012798:	b2db      	uxtb	r3, r3
 801279a:	2b00      	cmp	r3, #0
 801279c:	d104      	bne.n	80127a8 <vSendBroadcast+0x38>
 801279e:	f00d fb89 	bl	801feb4 <assigned_ip>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d004      	beq.n	80127b2 <vSendBroadcast+0x42>
		osDelay(delay10s);
 80127a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80127ac:	f00d fde6 	bl	802037c <osDelay>
		continue;
 80127b0:	e067      	b.n	8012882 <vSendBroadcast+0x112>
	}

	broadcastIP[0] = EthernetInfo.ip[0] | ( ~ EthernetInfo.sn[0]);
 80127b2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80127b6:	b25a      	sxtb	r2, r3
 80127b8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80127bc:	b25b      	sxtb	r3, r3
 80127be:	43db      	mvns	r3, r3
 80127c0:	b25b      	sxtb	r3, r3
 80127c2:	4313      	orrs	r3, r2
 80127c4:	b25b      	sxtb	r3, r3
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	broadcastIP[1] = EthernetInfo.ip[1] | ( ~ EthernetInfo.sn[1]);
 80127cc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80127d0:	b25a      	sxtb	r2, r3
 80127d2:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80127d6:	b25b      	sxtb	r3, r3
 80127d8:	43db      	mvns	r3, r3
 80127da:	b25b      	sxtb	r3, r3
 80127dc:	4313      	orrs	r3, r2
 80127de:	b25b      	sxtb	r3, r3
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	broadcastIP[2] = EthernetInfo.ip[2] | ( ~ EthernetInfo.sn[2]);
 80127e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80127ea:	b25a      	sxtb	r2, r3
 80127ec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80127f0:	b25b      	sxtb	r3, r3
 80127f2:	43db      	mvns	r3, r3
 80127f4:	b25b      	sxtb	r3, r3
 80127f6:	4313      	orrs	r3, r2
 80127f8:	b25b      	sxtb	r3, r3
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	broadcastIP[3] = EthernetInfo.ip[3] | ( ~ EthernetInfo.sn[3]);
 8012800:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8012804:	b25a      	sxtb	r2, r3
 8012806:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 801280a:	b25b      	sxtb	r3, r3
 801280c:	43db      	mvns	r3, r3
 801280e:	b25b      	sxtb	r3, r3
 8012810:	4313      	orrs	r3, r2
 8012812:	b25b      	sxtb	r3, r3
 8012814:	b2db      	uxtb	r3, r3
 8012816:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

	set_broadcast_message_eth_info(&EthernetInfo);
 801281a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801281e:	4618      	mov	r0, r3
 8012820:	f000 fb04 	bl	8012e2c <set_broadcast_message_eth_info>
	string_len = get_broadcast_message_payload((char *)buffer, buffer_len);
 8012824:	f107 0308 	add.w	r3, r7, #8
 8012828:	f44f 7180 	mov.w	r1, #256	; 0x100
 801282c:	4618      	mov	r0, r3
 801282e:	f000 fb0d 	bl	8012e4c <get_broadcast_message_payload>
 8012832:	4603      	mov	r3, r0
 8012834:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	if (string_len < 0) continue ;
 8012838:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 801283c:	2b00      	cmp	r3, #0
 801283e:	db1f      	blt.n	8012880 <vSendBroadcast+0x110>

	SocketMutexTake();
 8012840:	f7fe fc7a 	bl	8011138 <SocketMutexTake>
	ServiceSockMutexTake();
 8012844:	f7fe fc92 	bl	801116c <ServiceSockMutexTake>
	socket(SERVICE_SOCKET, Sn_MR_UDP, 5000, 0x00);
 8012848:	2300      	movs	r3, #0
 801284a:	f241 3288 	movw	r2, #5000	; 0x1388
 801284e:	2102      	movs	r1, #2
 8012850:	2004      	movs	r0, #4
 8012852:	f006 fb35 	bl	8018ec0 <socket>
	sendto(SERVICE_SOCKET, (uint8_t *)buffer, string_len, (uint8_t *)broadcastIP, 5000);
 8012856:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 801285a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801285e:	f107 0108 	add.w	r1, r7, #8
 8012862:	f241 3088 	movw	r0, #5000	; 0x1388
 8012866:	9000      	str	r0, [sp, #0]
 8012868:	2004      	movs	r0, #4
 801286a:	f007 f807 	bl	801987c <sendto>

	ServiceSockMutexRelease();
 801286e:	f7fe fc8b 	bl	8011188 <ServiceSockMutexRelease>
	SocketMutexRelease();
 8012872:	f7fe fc6f 	bl	8011154 <SocketMutexRelease>
    osDelay(delay5s);
 8012876:	f241 3088 	movw	r0, #5000	; 0x1388
 801287a:	f00d fd7f 	bl	802037c <osDelay>
 801287e:	e77f      	b.n	8012780 <vSendBroadcast+0x10>
	if (string_len < 0) continue ;
 8012880:	bf00      	nop
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8012882:	e77d      	b.n	8012780 <vSendBroadcast+0x10>
 8012884:	2000044c 	.word	0x2000044c

08012888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4a04      	ldr	r2, [pc, #16]	; (80128a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d101      	bne.n	801289e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801289a:	f002 ffc3 	bl	8015824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801289e:	bf00      	nop
 80128a0:	3708      	adds	r7, #8
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	40010000 	.word	0x40010000

080128ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80128ac:	b480      	push	{r7}
 80128ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80128b0:	b672      	cpsid	i
}
 80128b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80128b4:	e7fe      	b.n	80128b4 <Error_Handler+0x8>
	...

080128b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80128be:	2300      	movs	r3, #0
 80128c0:	607b      	str	r3, [r7, #4]
 80128c2:	4b12      	ldr	r3, [pc, #72]	; (801290c <HAL_MspInit+0x54>)
 80128c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c6:	4a11      	ldr	r2, [pc, #68]	; (801290c <HAL_MspInit+0x54>)
 80128c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80128cc:	6453      	str	r3, [r2, #68]	; 0x44
 80128ce:	4b0f      	ldr	r3, [pc, #60]	; (801290c <HAL_MspInit+0x54>)
 80128d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128d6:	607b      	str	r3, [r7, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80128da:	2300      	movs	r3, #0
 80128dc:	603b      	str	r3, [r7, #0]
 80128de:	4b0b      	ldr	r3, [pc, #44]	; (801290c <HAL_MspInit+0x54>)
 80128e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e2:	4a0a      	ldr	r2, [pc, #40]	; (801290c <HAL_MspInit+0x54>)
 80128e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128e8:	6413      	str	r3, [r2, #64]	; 0x40
 80128ea:	4b08      	ldr	r3, [pc, #32]	; (801290c <HAL_MspInit+0x54>)
 80128ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128f2:	603b      	str	r3, [r7, #0]
 80128f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80128f6:	2200      	movs	r2, #0
 80128f8:	210f      	movs	r1, #15
 80128fa:	f06f 0001 	mvn.w	r0, #1
 80128fe:	f003 f869 	bl	80159d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012902:	bf00      	nop
 8012904:	3708      	adds	r7, #8
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	40023800 	.word	0x40023800

08012910 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012910:	b480      	push	{r7}
 8012912:	b085      	sub	sp, #20
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4a0b      	ldr	r2, [pc, #44]	; (801294c <HAL_CRC_MspInit+0x3c>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d10d      	bne.n	801293e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8012922:	2300      	movs	r3, #0
 8012924:	60fb      	str	r3, [r7, #12]
 8012926:	4b0a      	ldr	r3, [pc, #40]	; (8012950 <HAL_CRC_MspInit+0x40>)
 8012928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801292a:	4a09      	ldr	r2, [pc, #36]	; (8012950 <HAL_CRC_MspInit+0x40>)
 801292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012930:	6313      	str	r3, [r2, #48]	; 0x30
 8012932:	4b07      	ldr	r3, [pc, #28]	; (8012950 <HAL_CRC_MspInit+0x40>)
 8012934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801293e:	bf00      	nop
 8012940:	3714      	adds	r7, #20
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop
 801294c:	40023000 	.word	0x40023000
 8012950:	40023800 	.word	0x40023800

08012954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b08c      	sub	sp, #48	; 0x30
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801295c:	f107 031c 	add.w	r3, r7, #28
 8012960:	2200      	movs	r2, #0
 8012962:	601a      	str	r2, [r3, #0]
 8012964:	605a      	str	r2, [r3, #4]
 8012966:	609a      	str	r2, [r3, #8]
 8012968:	60da      	str	r2, [r3, #12]
 801296a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a32      	ldr	r2, [pc, #200]	; (8012a3c <HAL_SPI_MspInit+0xe8>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d12c      	bne.n	80129d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012976:	2300      	movs	r3, #0
 8012978:	61bb      	str	r3, [r7, #24]
 801297a:	4b31      	ldr	r3, [pc, #196]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 801297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801297e:	4a30      	ldr	r2, [pc, #192]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012984:	6453      	str	r3, [r2, #68]	; 0x44
 8012986:	4b2e      	ldr	r3, [pc, #184]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801298a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801298e:	61bb      	str	r3, [r7, #24]
 8012990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012992:	2300      	movs	r3, #0
 8012994:	617b      	str	r3, [r7, #20]
 8012996:	4b2a      	ldr	r3, [pc, #168]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801299a:	4a29      	ldr	r2, [pc, #164]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 801299c:	f043 0301 	orr.w	r3, r3, #1
 80129a0:	6313      	str	r3, [r2, #48]	; 0x30
 80129a2:	4b27      	ldr	r3, [pc, #156]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129a6:	f003 0301 	and.w	r3, r3, #1
 80129aa:	617b      	str	r3, [r7, #20]
 80129ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80129ae:	23e0      	movs	r3, #224	; 0xe0
 80129b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129b2:	2302      	movs	r3, #2
 80129b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129b6:	2300      	movs	r3, #0
 80129b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129ba:	2303      	movs	r3, #3
 80129bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80129be:	2305      	movs	r3, #5
 80129c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129c2:	f107 031c 	add.w	r3, r7, #28
 80129c6:	4619      	mov	r1, r3
 80129c8:	481e      	ldr	r0, [pc, #120]	; (8012a44 <HAL_SPI_MspInit+0xf0>)
 80129ca:	f003 f8db 	bl	8015b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80129ce:	e030      	b.n	8012a32 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a1c      	ldr	r2, [pc, #112]	; (8012a48 <HAL_SPI_MspInit+0xf4>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d12b      	bne.n	8012a32 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80129da:	2300      	movs	r3, #0
 80129dc:	613b      	str	r3, [r7, #16]
 80129de:	4b18      	ldr	r3, [pc, #96]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129e2:	4a17      	ldr	r2, [pc, #92]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80129e8:	6413      	str	r3, [r2, #64]	; 0x40
 80129ea:	4b15      	ldr	r3, [pc, #84]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129f2:	613b      	str	r3, [r7, #16]
 80129f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80129f6:	2300      	movs	r3, #0
 80129f8:	60fb      	str	r3, [r7, #12]
 80129fa:	4b11      	ldr	r3, [pc, #68]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129fe:	4a10      	ldr	r2, [pc, #64]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012a00:	f043 0302 	orr.w	r3, r3, #2
 8012a04:	6313      	str	r3, [r2, #48]	; 0x30
 8012a06:	4b0e      	ldr	r3, [pc, #56]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a0a:	f003 0302 	and.w	r3, r3, #2
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012a12:	2338      	movs	r3, #56	; 0x38
 8012a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a16:	2302      	movs	r3, #2
 8012a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a1e:	2303      	movs	r3, #3
 8012a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012a22:	2306      	movs	r3, #6
 8012a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a26:	f107 031c 	add.w	r3, r7, #28
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4807      	ldr	r0, [pc, #28]	; (8012a4c <HAL_SPI_MspInit+0xf8>)
 8012a2e:	f003 f8a9 	bl	8015b84 <HAL_GPIO_Init>
}
 8012a32:	bf00      	nop
 8012a34:	3730      	adds	r7, #48	; 0x30
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	40013000 	.word	0x40013000
 8012a40:	40023800 	.word	0x40023800
 8012a44:	40020000 	.word	0x40020000
 8012a48:	40003c00 	.word	0x40003c00
 8012a4c:	40020400 	.word	0x40020400

08012a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08a      	sub	sp, #40	; 0x28
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a58:	f107 0314 	add.w	r3, r7, #20
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	601a      	str	r2, [r3, #0]
 8012a60:	605a      	str	r2, [r3, #4]
 8012a62:	609a      	str	r2, [r3, #8]
 8012a64:	60da      	str	r2, [r3, #12]
 8012a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4a1d      	ldr	r2, [pc, #116]	; (8012ae4 <HAL_UART_MspInit+0x94>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d133      	bne.n	8012ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8012a72:	2300      	movs	r3, #0
 8012a74:	613b      	str	r3, [r7, #16]
 8012a76:	4b1c      	ldr	r3, [pc, #112]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7a:	4a1b      	ldr	r2, [pc, #108]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012a80:	6413      	str	r3, [r2, #64]	; 0x40
 8012a82:	4b19      	ldr	r3, [pc, #100]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a8a:	613b      	str	r3, [r7, #16]
 8012a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a8e:	2300      	movs	r3, #0
 8012a90:	60fb      	str	r3, [r7, #12]
 8012a92:	4b15      	ldr	r3, [pc, #84]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a96:	4a14      	ldr	r2, [pc, #80]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a98:	f043 0301 	orr.w	r3, r3, #1
 8012a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8012a9e:	4b12      	ldr	r3, [pc, #72]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa2:	f003 0301 	and.w	r3, r3, #1
 8012aa6:	60fb      	str	r3, [r7, #12]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012aaa:	230c      	movs	r3, #12
 8012aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012aae:	2302      	movs	r3, #2
 8012ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012aba:	2307      	movs	r3, #7
 8012abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	4809      	ldr	r0, [pc, #36]	; (8012aec <HAL_UART_MspInit+0x9c>)
 8012ac6:	f003 f85d 	bl	8015b84 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012aca:	2200      	movs	r2, #0
 8012acc:	2105      	movs	r1, #5
 8012ace:	2026      	movs	r0, #38	; 0x26
 8012ad0:	f002 ff80 	bl	80159d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012ad4:	2026      	movs	r0, #38	; 0x26
 8012ad6:	f002 ff99 	bl	8015a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012ada:	bf00      	nop
 8012adc:	3728      	adds	r7, #40	; 0x28
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	40004400 	.word	0x40004400
 8012ae8:	40023800 	.word	0x40023800
 8012aec:	40020000 	.word	0x40020000

08012af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08c      	sub	sp, #48	; 0x30
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8012af8:	2300      	movs	r3, #0
 8012afa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8012afc:	2300      	movs	r3, #0
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012b00:	2300      	movs	r3, #0
 8012b02:	60bb      	str	r3, [r7, #8]
 8012b04:	4b2e      	ldr	r3, [pc, #184]	; (8012bc0 <HAL_InitTick+0xd0>)
 8012b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b08:	4a2d      	ldr	r2, [pc, #180]	; (8012bc0 <HAL_InitTick+0xd0>)
 8012b0a:	f043 0301 	orr.w	r3, r3, #1
 8012b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8012b10:	4b2b      	ldr	r3, [pc, #172]	; (8012bc0 <HAL_InitTick+0xd0>)
 8012b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b14:	f003 0301 	and.w	r3, r3, #1
 8012b18:	60bb      	str	r3, [r7, #8]
 8012b1a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012b1c:	f107 020c 	add.w	r2, r7, #12
 8012b20:	f107 0310 	add.w	r3, r7, #16
 8012b24:	4611      	mov	r1, r2
 8012b26:	4618      	mov	r0, r3
 8012b28:	f003 feb4 	bl	8016894 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012b2c:	f003 fe9e 	bl	801686c <HAL_RCC_GetPCLK2Freq>
 8012b30:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b34:	4a23      	ldr	r2, [pc, #140]	; (8012bc4 <HAL_InitTick+0xd4>)
 8012b36:	fba2 2303 	umull	r2, r3, r2, r3
 8012b3a:	0c9b      	lsrs	r3, r3, #18
 8012b3c:	3b01      	subs	r3, #1
 8012b3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012b40:	4b21      	ldr	r3, [pc, #132]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b42:	4a22      	ldr	r2, [pc, #136]	; (8012bcc <HAL_InitTick+0xdc>)
 8012b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012b46:	4b20      	ldr	r3, [pc, #128]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8012b4e:	4a1e      	ldr	r2, [pc, #120]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012b54:	4b1c      	ldr	r3, [pc, #112]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012b5a:	4b1b      	ldr	r3, [pc, #108]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012b60:	4b19      	ldr	r3, [pc, #100]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8012b66:	4818      	ldr	r0, [pc, #96]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b68:	f004 fc9c 	bl	80174a4 <HAL_TIM_Base_Init>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8012b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d11b      	bne.n	8012bb2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8012b7a:	4813      	ldr	r0, [pc, #76]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b7c:	f004 fcec 	bl	8017558 <HAL_TIM_Base_Start_IT>
 8012b80:	4603      	mov	r3, r0
 8012b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8012b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d111      	bne.n	8012bb2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012b8e:	2019      	movs	r0, #25
 8012b90:	f002 ff3c 	bl	8015a0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b0f      	cmp	r3, #15
 8012b98:	d808      	bhi.n	8012bac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	2019      	movs	r0, #25
 8012ba0:	f002 ff18 	bl	80159d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012ba4:	4a0a      	ldr	r2, [pc, #40]	; (8012bd0 <HAL_InitTick+0xe0>)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6013      	str	r3, [r2, #0]
 8012baa:	e002      	b.n	8012bb2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8012bac:	2301      	movs	r3, #1
 8012bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3730      	adds	r7, #48	; 0x30
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	40023800 	.word	0x40023800
 8012bc4:	431bde83 	.word	0x431bde83
 8012bc8:	2000049c 	.word	0x2000049c
 8012bcc:	40010000 	.word	0x40010000
 8012bd0:	200000bc 	.word	0x200000bc

08012bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012bd8:	e7fe      	b.n	8012bd8 <NMI_Handler+0x4>

08012bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012bda:	b480      	push	{r7}
 8012bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012bde:	e7fe      	b.n	8012bde <HardFault_Handler+0x4>

08012be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012be0:	b480      	push	{r7}
 8012be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012be4:	e7fe      	b.n	8012be4 <MemManage_Handler+0x4>

08012be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012be6:	b480      	push	{r7}
 8012be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012bea:	e7fe      	b.n	8012bea <BusFault_Handler+0x4>

08012bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012bec:	b480      	push	{r7}
 8012bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012bf0:	e7fe      	b.n	8012bf0 <UsageFault_Handler+0x4>

08012bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012bf2:	b480      	push	{r7}
 8012bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012bf6:	bf00      	nop
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012c04:	4802      	ldr	r0, [pc, #8]	; (8012c10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012c06:	f004 fd09 	bl	801761c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012c0a:	bf00      	nop
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	2000049c 	.word	0x2000049c

08012c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012c18:	4802      	ldr	r0, [pc, #8]	; (8012c24 <USART2_IRQHandler+0x10>)
 8012c1a:	f004 ff65 	bl	8017ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012c1e:	bf00      	nop
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	200003d8 	.word	0x200003d8

08012c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	af00      	add	r7, sp, #0
  return 1;
 8012c2c:	2301      	movs	r3, #1
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <_kill>:

int _kill(int pid, int sig)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012c42:	f01b f8f3 	bl	802de2c <__errno>
 8012c46:	4603      	mov	r3, r0
 8012c48:	2216      	movs	r2, #22
 8012c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8012c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <_exit>:

void _exit (int status)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012c60:	f04f 31ff 	mov.w	r1, #4294967295
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff ffe7 	bl	8012c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012c6a:	e7fe      	b.n	8012c6a <_exit+0x12>

08012c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b086      	sub	sp, #24
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c78:	2300      	movs	r3, #0
 8012c7a:	617b      	str	r3, [r7, #20]
 8012c7c:	e00a      	b.n	8012c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012c7e:	f3af 8000 	nop.w
 8012c82:	4601      	mov	r1, r0
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	1c5a      	adds	r2, r3, #1
 8012c88:	60ba      	str	r2, [r7, #8]
 8012c8a:	b2ca      	uxtb	r2, r1
 8012c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	3301      	adds	r3, #1
 8012c92:	617b      	str	r3, [r7, #20]
 8012c94:	697a      	ldr	r2, [r7, #20]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	dbf0      	blt.n	8012c7e <_read+0x12>
  }

  return len;
 8012c9c:	687b      	ldr	r3, [r7, #4]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3718      	adds	r7, #24
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}

08012ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012ca6:	b580      	push	{r7, lr}
 8012ca8:	b086      	sub	sp, #24
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	60f8      	str	r0, [r7, #12]
 8012cae:	60b9      	str	r1, [r7, #8]
 8012cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	e009      	b.n	8012ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	60ba      	str	r2, [r7, #8]
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	617b      	str	r3, [r7, #20]
 8012ccc:	697a      	ldr	r2, [r7, #20]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	dbf1      	blt.n	8012cb8 <_write+0x12>
  }
  return len;
 8012cd4:	687b      	ldr	r3, [r7, #4]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3718      	adds	r7, #24
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <_close>:

int _close(int file)
{
 8012cde:	b480      	push	{r7}
 8012ce0:	b083      	sub	sp, #12
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	370c      	adds	r7, #12
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr

08012cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012cf6:	b480      	push	{r7}
 8012cf8:	b083      	sub	sp, #12
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
 8012cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012d06:	605a      	str	r2, [r3, #4]
  return 0;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <_isatty>:

int _isatty(int file)
{
 8012d16:	b480      	push	{r7}
 8012d18:	b083      	sub	sp, #12
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012d1e:	2301      	movs	r3, #1
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b085      	sub	sp, #20
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012d38:	2300      	movs	r3, #0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3714      	adds	r7, #20
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr
	...

08012d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b086      	sub	sp, #24
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012d50:	4a14      	ldr	r2, [pc, #80]	; (8012da4 <_sbrk+0x5c>)
 8012d52:	4b15      	ldr	r3, [pc, #84]	; (8012da8 <_sbrk+0x60>)
 8012d54:	1ad3      	subs	r3, r2, r3
 8012d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012d5c:	4b13      	ldr	r3, [pc, #76]	; (8012dac <_sbrk+0x64>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d102      	bne.n	8012d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012d64:	4b11      	ldr	r3, [pc, #68]	; (8012dac <_sbrk+0x64>)
 8012d66:	4a12      	ldr	r2, [pc, #72]	; (8012db0 <_sbrk+0x68>)
 8012d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012d6a:	4b10      	ldr	r3, [pc, #64]	; (8012dac <_sbrk+0x64>)
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4413      	add	r3, r2
 8012d72:	693a      	ldr	r2, [r7, #16]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d207      	bcs.n	8012d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012d78:	f01b f858 	bl	802de2c <__errno>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	220c      	movs	r2, #12
 8012d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012d82:	f04f 33ff 	mov.w	r3, #4294967295
 8012d86:	e009      	b.n	8012d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012d88:	4b08      	ldr	r3, [pc, #32]	; (8012dac <_sbrk+0x64>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012d8e:	4b07      	ldr	r3, [pc, #28]	; (8012dac <_sbrk+0x64>)
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4413      	add	r3, r2
 8012d96:	4a05      	ldr	r2, [pc, #20]	; (8012dac <_sbrk+0x64>)
 8012d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3718      	adds	r7, #24
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	20010000 	.word	0x20010000
 8012da8:	00000400 	.word	0x00000400
 8012dac:	200004e4 	.word	0x200004e4
 8012db0:	2000db18 	.word	0x2000db18

08012db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012db4:	b480      	push	{r7}
 8012db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012db8:	4b06      	ldr	r3, [pc, #24]	; (8012dd4 <SystemInit+0x20>)
 8012dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012dbe:	4a05      	ldr	r2, [pc, #20]	; (8012dd4 <SystemInit+0x20>)
 8012dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012dc8:	bf00      	nop
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr
 8012dd2:	bf00      	nop
 8012dd4:	e000ed00 	.word	0xe000ed00

08012dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012e10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012ddc:	f7ff ffea 	bl	8012db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012de0:	480c      	ldr	r0, [pc, #48]	; (8012e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012de2:	490d      	ldr	r1, [pc, #52]	; (8012e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012de4:	4a0d      	ldr	r2, [pc, #52]	; (8012e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012de8:	e002      	b.n	8012df0 <LoopCopyDataInit>

08012dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012dee:	3304      	adds	r3, #4

08012df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012df4:	d3f9      	bcc.n	8012dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012df6:	4a0a      	ldr	r2, [pc, #40]	; (8012e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012df8:	4c0a      	ldr	r4, [pc, #40]	; (8012e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012dfc:	e001      	b.n	8012e02 <LoopFillZerobss>

08012dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012e00:	3204      	adds	r2, #4

08012e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012e04:	d3fb      	bcc.n	8012dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012e06:	f01b f817 	bl	802de38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012e0a:	f7fe f9e1 	bl	80111d0 <main>
  bx  lr    
 8012e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012e10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012e18:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012e1c:	080351e8 	.word	0x080351e8
  ldr r2, =_sbss
 8012e20:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012e24:	2000db14 	.word	0x2000db14

08012e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012e28:	e7fe      	b.n	8012e28 <ADC_IRQHandler>
	...

08012e2c <set_broadcast_message_eth_info>:

#define mess_template	"{\"device_name\": \"%s\", \"model_name\": \"%s\", \"mac\": \"%02X:%02X:%02X:%02X:%02X:%02X\", \"ip\": \"%u.%u.%u.%u\", \"netmask\": \"%u.%u.%u.%u\", \"gw\": \"%u.%u.%u.%u\", \"dns\": \"%u.%u.%u.%u\", \"firmware\": \"%s\"}"

Ethernet_info_struct	eth_info;

void set_broadcast_message_eth_info(Ethernet_info_struct * eth){
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]

	memcpy(&eth_info, eth, sizeof(Ethernet_info_struct));
 8012e34:	2220      	movs	r2, #32
 8012e36:	6879      	ldr	r1, [r7, #4]
 8012e38:	4803      	ldr	r0, [pc, #12]	; (8012e48 <set_broadcast_message_eth_info+0x1c>)
 8012e3a:	f01b f82c 	bl	802de96 <memcpy>

}
 8012e3e:	bf00      	nop
 8012e40:	3708      	adds	r7, #8
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	200004e8 	.word	0x200004e8

08012e4c <get_broadcast_message_payload>:

int16_t get_broadcast_message_payload(char * buffer, uint16_t buff_len){
 8012e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e4e:	b0ad      	sub	sp, #180	; 0xb4
 8012e50:	af18      	add	r7, sp, #96	; 0x60
 8012e52:	6478      	str	r0, [r7, #68]	; 0x44
 8012e54:	460b      	mov	r3, r1
 8012e56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	uint16_t len;

	strcpy(buffer, "\0"); //TODO replace sprintf to snprintf
 8012e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	701a      	strb	r2, [r3, #0]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e60:	4b3c      	ldr	r3, [pc, #240]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e62:	78db      	ldrb	r3, [r3, #3]
 8012e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e66:	4b3b      	ldr	r3, [pc, #236]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e68:	791b      	ldrb	r3, [r3, #4]
 8012e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e6c:	4b39      	ldr	r3, [pc, #228]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e6e:	795b      	ldrb	r3, [r3, #5]
 8012e70:	637b      	str	r3, [r7, #52]	; 0x34
 8012e72:	4b38      	ldr	r3, [pc, #224]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e74:	799b      	ldrb	r3, [r3, #6]
 8012e76:	633b      	str	r3, [r7, #48]	; 0x30
 8012e78:	4b36      	ldr	r3, [pc, #216]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e7a:	79db      	ldrb	r3, [r3, #7]
 8012e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e7e:	4b35      	ldr	r3, [pc, #212]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e80:	7a1b      	ldrb	r3, [r3, #8]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e82:	62bb      	str	r3, [r7, #40]	; 0x28
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e84:	4b33      	ldr	r3, [pc, #204]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e86:	7a5b      	ldrb	r3, [r3, #9]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e8a:	4b32      	ldr	r3, [pc, #200]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e8c:	7a9b      	ldrb	r3, [r3, #10]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e8e:	623b      	str	r3, [r7, #32]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e90:	4b30      	ldr	r3, [pc, #192]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e92:	7adb      	ldrb	r3, [r3, #11]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e94:	61fb      	str	r3, [r7, #28]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e96:	4b2f      	ldr	r3, [pc, #188]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e98:	7b1b      	ldrb	r3, [r3, #12]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e9a:	61bb      	str	r3, [r7, #24]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e9c:	4b2d      	ldr	r3, [pc, #180]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e9e:	7b5b      	ldrb	r3, [r3, #13]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ea0:	617b      	str	r3, [r7, #20]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012ea2:	4b2c      	ldr	r3, [pc, #176]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ea4:	7b9b      	ldrb	r3, [r3, #14]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ea6:	613b      	str	r3, [r7, #16]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012ea8:	4b2a      	ldr	r3, [pc, #168]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eaa:	7bdb      	ldrb	r3, [r3, #15]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eac:	60fb      	str	r3, [r7, #12]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012eae:	4b29      	ldr	r3, [pc, #164]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eb0:	7c1b      	ldrb	r3, [r3, #16]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eb2:	60bb      	str	r3, [r7, #8]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012eb4:	4b27      	ldr	r3, [pc, #156]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eb6:	7c5b      	ldrb	r3, [r3, #17]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eb8:	607b      	str	r3, [r7, #4]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012eba:	4b26      	ldr	r3, [pc, #152]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ebc:	7c9b      	ldrb	r3, [r3, #18]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ebe:	603b      	str	r3, [r7, #0]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ec0:	4b24      	ldr	r3, [pc, #144]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ec2:	7cdb      	ldrb	r3, [r3, #19]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ec4:	461e      	mov	r6, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ec6:	4b23      	ldr	r3, [pc, #140]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ec8:	7d1b      	ldrb	r3, [r3, #20]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eca:	461d      	mov	r5, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ecc:	4b21      	ldr	r3, [pc, #132]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ece:	7d5b      	ldrb	r3, [r3, #21]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ed0:	461c      	mov	r4, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ed2:	4b20      	ldr	r3, [pc, #128]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ed4:	7d9b      	ldrb	r3, [r3, #22]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ed6:	4618      	mov	r0, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ed8:	4b1e      	ldr	r3, [pc, #120]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eda:	7ddb      	ldrb	r3, [r3, #23]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012edc:	4619      	mov	r1, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ede:	4b1d      	ldr	r3, [pc, #116]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ee0:	7e1b      	ldrb	r3, [r3, #24]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	4b1c      	ldr	r3, [pc, #112]	; (8012f58 <get_broadcast_message_payload+0x10c>)
 8012ee6:	9316      	str	r3, [sp, #88]	; 0x58
 8012ee8:	9215      	str	r2, [sp, #84]	; 0x54
 8012eea:	9114      	str	r1, [sp, #80]	; 0x50
 8012eec:	9013      	str	r0, [sp, #76]	; 0x4c
 8012eee:	9412      	str	r4, [sp, #72]	; 0x48
 8012ef0:	9511      	str	r5, [sp, #68]	; 0x44
 8012ef2:	9610      	str	r6, [sp, #64]	; 0x40
 8012ef4:	683a      	ldr	r2, [r7, #0]
 8012ef6:	920f      	str	r2, [sp, #60]	; 0x3c
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	920e      	str	r2, [sp, #56]	; 0x38
 8012efc:	68ba      	ldr	r2, [r7, #8]
 8012efe:	920d      	str	r2, [sp, #52]	; 0x34
 8012f00:	68fa      	ldr	r2, [r7, #12]
 8012f02:	920c      	str	r2, [sp, #48]	; 0x30
 8012f04:	693a      	ldr	r2, [r7, #16]
 8012f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8012f08:	697a      	ldr	r2, [r7, #20]
 8012f0a:	920a      	str	r2, [sp, #40]	; 0x28
 8012f0c:	69ba      	ldr	r2, [r7, #24]
 8012f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8012f10:	69fa      	ldr	r2, [r7, #28]
 8012f12:	9208      	str	r2, [sp, #32]
 8012f14:	6a3a      	ldr	r2, [r7, #32]
 8012f16:	9207      	str	r2, [sp, #28]
 8012f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f1a:	9206      	str	r2, [sp, #24]
 8012f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f1e:	9205      	str	r2, [sp, #20]
 8012f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f22:	9204      	str	r2, [sp, #16]
 8012f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f26:	9203      	str	r2, [sp, #12]
 8012f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f2a:	9202      	str	r2, [sp, #8]
 8012f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f2e:	9201      	str	r2, [sp, #4]
 8012f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f32:	9300      	str	r3, [sp, #0]
 8012f34:	4b09      	ldr	r3, [pc, #36]	; (8012f5c <get_broadcast_message_payload+0x110>)
 8012f36:	4a0a      	ldr	r2, [pc, #40]	; (8012f60 <get_broadcast_message_payload+0x114>)
 8012f38:	490a      	ldr	r1, [pc, #40]	; (8012f64 <get_broadcast_message_payload+0x118>)
 8012f3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012f3c:	f01a fc86 	bl	802d84c <siprintf>
 8012f40:	4603      	mov	r3, r0
 8012f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	return len;
 8012f46:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3754      	adds	r7, #84	; 0x54
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f52:	bf00      	nop
 8012f54:	200004e8 	.word	0x200004e8
 8012f58:	08032950 	.word	0x08032950
 8012f5c:	08032878 	.word	0x08032878
 8012f60:	08032888 	.word	0x08032888
 8012f64:	08032890 	.word	0x08032890

08012f68 <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012f72:	79fb      	ldrb	r3, [r7, #7]
 8012f74:	2b2f      	cmp	r3, #47	; 0x2f
 8012f76:	d905      	bls.n	8012f84 <CharToDec+0x1c>
 8012f78:	79fb      	ldrb	r3, [r7, #7]
 8012f7a:	2b39      	cmp	r3, #57	; 0x39
 8012f7c:	d802      	bhi.n	8012f84 <CharToDec+0x1c>
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	3b30      	subs	r3, #48	; 0x30
 8012f82:	e012      	b.n	8012faa <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	2b60      	cmp	r3, #96	; 0x60
 8012f88:	d905      	bls.n	8012f96 <CharToDec+0x2e>
 8012f8a:	79fb      	ldrb	r3, [r7, #7]
 8012f8c:	2b66      	cmp	r3, #102	; 0x66
 8012f8e:	d802      	bhi.n	8012f96 <CharToDec+0x2e>
 8012f90:	79fb      	ldrb	r3, [r7, #7]
 8012f92:	3b57      	subs	r3, #87	; 0x57
 8012f94:	e009      	b.n	8012faa <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012f96:	79fb      	ldrb	r3, [r7, #7]
 8012f98:	2b40      	cmp	r3, #64	; 0x40
 8012f9a:	d905      	bls.n	8012fa8 <CharToDec+0x40>
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	2b46      	cmp	r3, #70	; 0x46
 8012fa0:	d802      	bhi.n	8012fa8 <CharToDec+0x40>
 8012fa2:	79fb      	ldrb	r3, [r7, #7]
 8012fa4:	3b37      	subs	r3, #55	; 0x37
 8012fa6:	e000      	b.n	8012faa <CharToDec+0x42>
    return 0;
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	370c      	adds	r7, #12
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr
	...

08012fb8 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012fb8:	b480      	push	{r7}
 8012fba:	b083      	sub	sp, #12
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012fc4:	78fb      	ldrb	r3, [r7, #3]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d106      	bne.n	8012fd8 <http_parse_params_init+0x20>
		if (xQueue){
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d034      	beq.n	801303a <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012fd0:	4a1d      	ldr	r2, [pc, #116]	; (8013048 <http_parse_params_init+0x90>)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012fd6:	e030      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012fd8:	78fb      	ldrb	r3, [r7, #3]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d106      	bne.n	8012fec <http_parse_params_init+0x34>
		if (xQueue){
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d02a      	beq.n	801303a <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012fe4:	4a19      	ldr	r2, [pc, #100]	; (801304c <http_parse_params_init+0x94>)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6013      	str	r3, [r2, #0]
}
 8012fea:	e026      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012fec:	78fb      	ldrb	r3, [r7, #3]
 8012fee:	2b02      	cmp	r3, #2
 8012ff0:	d106      	bne.n	8013000 <http_parse_params_init+0x48>
		if (xQueue){
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d020      	beq.n	801303a <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8012ff8:	4a15      	ldr	r2, [pc, #84]	; (8013050 <http_parse_params_init+0x98>)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6013      	str	r3, [r2, #0]
}
 8012ffe:	e01c      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 8013000:	78fb      	ldrb	r3, [r7, #3]
 8013002:	2b03      	cmp	r3, #3
 8013004:	d106      	bne.n	8013014 <http_parse_params_init+0x5c>
		if (xQueue){
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d016      	beq.n	801303a <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 801300c:	4a11      	ldr	r2, [pc, #68]	; (8013054 <http_parse_params_init+0x9c>)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6013      	str	r3, [r2, #0]
}
 8013012:	e012      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8013014:	78fb      	ldrb	r3, [r7, #3]
 8013016:	2b04      	cmp	r3, #4
 8013018:	d106      	bne.n	8013028 <http_parse_params_init+0x70>
		if (xQueue){
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00c      	beq.n	801303a <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 8013020:	4a0d      	ldr	r2, [pc, #52]	; (8013058 <http_parse_params_init+0xa0>)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6013      	str	r3, [r2, #0]
}
 8013026:	e008      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8013028:	78fb      	ldrb	r3, [r7, #3]
 801302a:	2b05      	cmp	r3, #5
 801302c:	d105      	bne.n	801303a <http_parse_params_init+0x82>
		if (xQueue){
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d002      	beq.n	801303a <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8013034:	4a09      	ldr	r2, [pc, #36]	; (801305c <http_parse_params_init+0xa4>)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6013      	str	r3, [r2, #0]
}
 801303a:	bf00      	nop
 801303c:	370c      	adds	r7, #12
 801303e:	46bd      	mov	sp, r7
 8013040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	20000508 	.word	0x20000508
 801304c:	2000050c 	.word	0x2000050c
 8013050:	20000510 	.word	0x20000510
 8013054:	20000514 	.word	0x20000514
 8013058:	20000518 	.word	0x20000518
 801305c:	2000051c 	.word	0x2000051c

08013060 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8013060:	b580      	push	{r7, lr}
 8013062:	b0cc      	sub	sp, #304	; 0x130
 8013064:	af00      	add	r7, sp, #0
 8013066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801306a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801306e:	6018      	str	r0, [r3, #0]
 8013070:	460a      	mov	r2, r1
 8013072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013076:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 801307a:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 801307c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013080:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	2b04      	cmp	r3, #4
 8013088:	f200 818a 	bhi.w	80133a0 <param_from_http_to_Q+0x340>
 801308c:	a201      	add	r2, pc, #4	; (adr r2, 8013094 <param_from_http_to_Q+0x34>)
 801308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013092:	bf00      	nop
 8013094:	080130a9 	.word	0x080130a9
 8013098:	080133a1 	.word	0x080133a1
 801309c:	08013275 	.word	0x08013275
 80130a0:	080133a1 	.word	0x080133a1
 80130a4:	0801333b 	.word	0x0801333b

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 80130a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80130ac:	22c6      	movs	r2, #198	; 0xc6
 80130ae:	2100      	movs	r1, #0
 80130b0:	4618      	mov	r0, r3
 80130b2:	f01a fd1b 	bl	802daec <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1") || strstr(get_http_param_value( http_resp, "mqtt"), "true")){
 80130b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130be:	49bc      	ldr	r1, [pc, #752]	; (80133b0 <param_from_http_to_Q+0x350>)
 80130c0:	6818      	ldr	r0, [r3, #0]
 80130c2:	f00b fcfb 	bl	801eabc <get_http_param_value>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2131      	movs	r1, #49	; 0x31
 80130ca:	4618      	mov	r0, r3
 80130cc:	f01a fd25 	bl	802db1a <strchr>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10f      	bne.n	80130f6 <param_from_http_to_Q+0x96>
 80130d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130de:	49b4      	ldr	r1, [pc, #720]	; (80133b0 <param_from_http_to_Q+0x350>)
 80130e0:	6818      	ldr	r0, [r3, #0]
 80130e2:	f00b fceb 	bl	801eabc <get_http_param_value>
 80130e6:	4603      	mov	r3, r0
 80130e8:	49b2      	ldr	r1, [pc, #712]	; (80133b4 <param_from_http_to_Q+0x354>)
 80130ea:	4618      	mov	r0, r3
 80130ec:	f01a fdd8 	bl	802dca0 <strstr>
 80130f0:	4603      	mov	r3, r0
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d003      	beq.n	80130fe <param_from_http_to_Q+0x9e>
				MQTT_params.enable = 1;
 80130f6:	2301      	movs	r3, #1
 80130f8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80130fc:	e022      	b.n	8013144 <param_from_http_to_Q+0xe4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0") || strstr(get_http_param_value( http_resp, "mqtt"), "false")) {
 80130fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013106:	49aa      	ldr	r1, [pc, #680]	; (80133b0 <param_from_http_to_Q+0x350>)
 8013108:	6818      	ldr	r0, [r3, #0]
 801310a:	f00b fcd7 	bl	801eabc <get_http_param_value>
 801310e:	4603      	mov	r3, r0
 8013110:	2130      	movs	r1, #48	; 0x30
 8013112:	4618      	mov	r0, r3
 8013114:	f01a fd01 	bl	802db1a <strchr>
 8013118:	4603      	mov	r3, r0
 801311a:	2b00      	cmp	r3, #0
 801311c:	d10f      	bne.n	801313e <param_from_http_to_Q+0xde>
 801311e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013126:	49a2      	ldr	r1, [pc, #648]	; (80133b0 <param_from_http_to_Q+0x350>)
 8013128:	6818      	ldr	r0, [r3, #0]
 801312a:	f00b fcc7 	bl	801eabc <get_http_param_value>
 801312e:	4603      	mov	r3, r0
 8013130:	49a1      	ldr	r1, [pc, #644]	; (80133b8 <param_from_http_to_Q+0x358>)
 8013132:	4618      	mov	r0, r3
 8013134:	f01a fdb4 	bl	802dca0 <strstr>
 8013138:	4603      	mov	r3, r0
 801313a:	2b00      	cmp	r3, #0
 801313c:	d002      	beq.n	8013144 <param_from_http_to_Q+0xe4>
				MQTT_params.enable = 0;
 801313e:	2300      	movs	r3, #0
 8013140:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8013144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801314c:	499b      	ldr	r1, [pc, #620]	; (80133bc <param_from_http_to_Q+0x35c>)
 801314e:	6818      	ldr	r0, [r3, #0]
 8013150:	f00b fcb4 	bl	801eabc <get_http_param_value>
 8013154:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8013158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801315c:	2b00      	cmp	r3, #0
 801315e:	d106      	bne.n	801316e <param_from_http_to_Q+0x10e>
 8013160:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013164:	f7fd f89c 	bl	80102a0 <strlen>
 8013168:	4603      	mov	r3, r0
 801316a:	2b20      	cmp	r3, #32
 801316c:	d807      	bhi.n	801317e <param_from_http_to_Q+0x11e>
				strcpy(MQTT_params.login, buf);
 801316e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013172:	3384      	adds	r3, #132	; 0x84
 8013174:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8013178:	4618      	mov	r0, r3
 801317a:	f01a fe84 	bl	802de86 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 801317e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013186:	498e      	ldr	r1, [pc, #568]	; (80133c0 <param_from_http_to_Q+0x360>)
 8013188:	6818      	ldr	r0, [r3, #0]
 801318a:	f00b fc97 	bl	801eabc <get_http_param_value>
 801318e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8013192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013196:	2b00      	cmp	r3, #0
 8013198:	d106      	bne.n	80131a8 <param_from_http_to_Q+0x148>
 801319a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801319e:	f7fd f87f 	bl	80102a0 <strlen>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b20      	cmp	r3, #32
 80131a6:	d807      	bhi.n	80131b8 <param_from_http_to_Q+0x158>
				strcpy(MQTT_params.pass, buf);
 80131a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80131ac:	33a5      	adds	r3, #165	; 0xa5
 80131ae:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80131b2:	4618      	mov	r0, r3
 80131b4:	f01a fe67 	bl	802de86 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 80131b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131c0:	4980      	ldr	r1, [pc, #512]	; (80133c4 <param_from_http_to_Q+0x364>)
 80131c2:	6818      	ldr	r0, [r3, #0]
 80131c4:	f00b fc7a 	bl	801eabc <get_http_param_value>
 80131c8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 80131cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d106      	bne.n	80131e2 <param_from_http_to_Q+0x182>
 80131d4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80131d8:	f7fd f862 	bl	80102a0 <strlen>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b7f      	cmp	r3, #127	; 0x7f
 80131e0:	d808      	bhi.n	80131f4 <param_from_http_to_Q+0x194>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 80131e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80131e6:	3302      	adds	r3, #2
 80131e8:	227f      	movs	r2, #127	; 0x7f
 80131ea:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80131ee:	4618      	mov	r0, r3
 80131f0:	f01a fcd6 	bl	802dba0 <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 80131f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131fc:	4972      	ldr	r1, [pc, #456]	; (80133c8 <param_from_http_to_Q+0x368>)
 80131fe:	6818      	ldr	r0, [r3, #0]
 8013200:	f00b fc5c 	bl	801eabc <get_http_param_value>
 8013204:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8013208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801320c:	2b00      	cmp	r3, #0
 801320e:	d106      	bne.n	801321e <param_from_http_to_Q+0x1be>
 8013210:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013214:	f7fd f844 	bl	80102a0 <strlen>
 8013218:	4603      	mov	r3, r0
 801321a:	2b05      	cmp	r3, #5
 801321c:	d81e      	bhi.n	801325c <param_from_http_to_Q+0x1fc>
				sscanf(buf, "%d", &port);
 801321e:	f107 0316 	add.w	r3, r7, #22
 8013222:	461a      	mov	r2, r3
 8013224:	4969      	ldr	r1, [pc, #420]	; (80133cc <param_from_http_to_Q+0x36c>)
 8013226:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801322a:	f01a fb2f 	bl	802d88c <siscanf>
				if ((port > 0) && (port < 65534)){
 801322e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013232:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8013236:	881b      	ldrh	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00f      	beq.n	801325c <param_from_http_to_Q+0x1fc>
 801323c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013240:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8013244:	881b      	ldrh	r3, [r3, #0]
 8013246:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801324a:	4293      	cmp	r3, r2
 801324c:	d806      	bhi.n	801325c <param_from_http_to_Q+0x1fc>
					MQTT_params.port = port;
 801324e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013252:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8013256:	881b      	ldrh	r3, [r3, #0]
 8013258:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 801325c:	2301      	movs	r3, #1
 801325e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8013262:	4b5b      	ldr	r3, [pc, #364]	; (80133d0 <param_from_http_to_Q+0x370>)
 8013264:	6818      	ldr	r0, [r3, #0]
 8013266:	f107 0164 	add.w	r1, r7, #100	; 0x64
 801326a:	2302      	movs	r3, #2
 801326c:	2200      	movs	r2, #0
 801326e:	f00d fddb 	bl	8020e28 <xQueueGenericSend>

			break;
 8013272:	e098      	b.n	80133a6 <param_from_http_to_Q+0x346>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8013274:	f107 031c 	add.w	r3, r7, #28
 8013278:	2202      	movs	r2, #2
 801327a:	2100      	movs	r1, #0
 801327c:	4618      	mov	r0, r3
 801327e:	f01a fc35 	bl	802daec <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1") || strstr(get_http_param_value( http_resp, "mb_tcp"), "true")){
 8013282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801328a:	4952      	ldr	r1, [pc, #328]	; (80133d4 <param_from_http_to_Q+0x374>)
 801328c:	6818      	ldr	r0, [r3, #0]
 801328e:	f00b fc15 	bl	801eabc <get_http_param_value>
 8013292:	4603      	mov	r3, r0
 8013294:	2131      	movs	r1, #49	; 0x31
 8013296:	4618      	mov	r0, r3
 8013298:	f01a fc3f 	bl	802db1a <strchr>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d10f      	bne.n	80132c2 <param_from_http_to_Q+0x262>
 80132a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132aa:	494a      	ldr	r1, [pc, #296]	; (80133d4 <param_from_http_to_Q+0x374>)
 80132ac:	6818      	ldr	r0, [r3, #0]
 80132ae:	f00b fc05 	bl	801eabc <get_http_param_value>
 80132b2:	4603      	mov	r3, r0
 80132b4:	493f      	ldr	r1, [pc, #252]	; (80133b4 <param_from_http_to_Q+0x354>)
 80132b6:	4618      	mov	r0, r3
 80132b8:	f01a fcf2 	bl	802dca0 <strstr>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d006      	beq.n	80132d0 <param_from_http_to_Q+0x270>
				ModBusTCP_parameters.enable = 1;
 80132c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132ca:	2201      	movs	r2, #1
 80132cc:	705a      	strb	r2, [r3, #1]
 80132ce:	e025      	b.n	801331c <param_from_http_to_Q+0x2bc>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0") || strstr(get_http_param_value( http_resp, "mb_tcp"), "false")) {
 80132d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132d8:	493e      	ldr	r1, [pc, #248]	; (80133d4 <param_from_http_to_Q+0x374>)
 80132da:	6818      	ldr	r0, [r3, #0]
 80132dc:	f00b fbee 	bl	801eabc <get_http_param_value>
 80132e0:	4603      	mov	r3, r0
 80132e2:	2130      	movs	r1, #48	; 0x30
 80132e4:	4618      	mov	r0, r3
 80132e6:	f01a fc18 	bl	802db1a <strchr>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d10f      	bne.n	8013310 <param_from_http_to_Q+0x2b0>
 80132f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132f8:	4936      	ldr	r1, [pc, #216]	; (80133d4 <param_from_http_to_Q+0x374>)
 80132fa:	6818      	ldr	r0, [r3, #0]
 80132fc:	f00b fbde 	bl	801eabc <get_http_param_value>
 8013300:	4603      	mov	r3, r0
 8013302:	492d      	ldr	r1, [pc, #180]	; (80133b8 <param_from_http_to_Q+0x358>)
 8013304:	4618      	mov	r0, r3
 8013306:	f01a fccb 	bl	802dca0 <strstr>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	d005      	beq.n	801331c <param_from_http_to_Q+0x2bc>
				ModBusTCP_parameters.enable = 0;
 8013310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013314:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013318:	2200      	movs	r2, #0
 801331a:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 801331c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013320:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013324:	2201      	movs	r2, #1
 8013326:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 8013328:	4b2b      	ldr	r3, [pc, #172]	; (80133d8 <param_from_http_to_Q+0x378>)
 801332a:	6818      	ldr	r0, [r3, #0]
 801332c:	f107 011c 	add.w	r1, r7, #28
 8013330:	2302      	movs	r3, #2
 8013332:	2200      	movs	r2, #0
 8013334:	f00d fd78 	bl	8020e28 <xQueueGenericSend>
			break;
 8013338:	e035      	b.n	80133a6 <param_from_http_to_Q+0x346>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 801333a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801333e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013342:	4926      	ldr	r1, [pc, #152]	; (80133dc <param_from_http_to_Q+0x37c>)
 8013344:	6818      	ldr	r0, [r3, #0]
 8013346:	f00b fbb9 	bl	801eabc <get_http_param_value>
 801334a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 801334e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013352:	2b00      	cmp	r3, #0
 8013354:	d026      	beq.n	80133a4 <param_from_http_to_Q+0x344>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 8013356:	4a22      	ldr	r2, [pc, #136]	; (80133e0 <param_from_http_to_Q+0x380>)
 8013358:	4922      	ldr	r1, [pc, #136]	; (80133e4 <param_from_http_to_Q+0x384>)
 801335a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801335e:	f01a fa95 	bl	802d88c <siscanf>
				if (float_temp > 0){									//validate value
 8013362:	4b1f      	ldr	r3, [pc, #124]	; (80133e0 <param_from_http_to_Q+0x380>)
 8013364:	edd3 7a00 	vldr	s15, [r3]
 8013368:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013370:	dc00      	bgt.n	8013374 <param_from_http_to_Q+0x314>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 8013372:	e017      	b.n	80133a4 <param_from_http_to_Q+0x344>
					PowShunSett.resistance = float_temp;
 8013374:	4b1a      	ldr	r3, [pc, #104]	; (80133e0 <param_from_http_to_Q+0x380>)
 8013376:	681a      	ldr	r2, [r3, #0]
 8013378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801337c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013380:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 8013382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013386:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801338a:	2201      	movs	r2, #1
 801338c:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 801338e:	4b16      	ldr	r3, [pc, #88]	; (80133e8 <param_from_http_to_Q+0x388>)
 8013390:	6818      	ldr	r0, [r3, #0]
 8013392:	f107 010c 	add.w	r1, r7, #12
 8013396:	2302      	movs	r3, #2
 8013398:	2200      	movs	r2, #0
 801339a:	f00d fd45 	bl	8020e28 <xQueueGenericSend>
			break;
 801339e:	e001      	b.n	80133a4 <param_from_http_to_Q+0x344>
		default:
			break;
 80133a0:	bf00      	nop
 80133a2:	e000      	b.n	80133a6 <param_from_http_to_Q+0x346>
			break;
 80133a4:	bf00      	nop
	}
}
 80133a6:	bf00      	nop
 80133a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}
 80133b0:	08032958 	.word	0x08032958
 80133b4:	08032960 	.word	0x08032960
 80133b8:	08032968 	.word	0x08032968
 80133bc:	08032970 	.word	0x08032970
 80133c0:	08032978 	.word	0x08032978
 80133c4:	08032984 	.word	0x08032984
 80133c8:	08032988 	.word	0x08032988
 80133cc:	08032990 	.word	0x08032990
 80133d0:	20000508 	.word	0x20000508
 80133d4:	08032994 	.word	0x08032994
 80133d8:	20000510 	.word	0x20000510
 80133dc:	0803299c 	.word	0x0803299c
 80133e0:	20000520 	.word	0x20000520
 80133e4:	080329a4 	.word	0x080329a4
 80133e8:	20000518 	.word	0x20000518

080133ec <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 80133ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f0:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80133f4:	af0a      	add	r7, sp, #40	; 0x28
 80133f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133fa:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80133fe:	6018      	str	r0, [r3, #0]
 8013400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013404:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013408:	601a      	str	r2, [r3, #0]
 801340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801340e:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8013412:	460a      	mov	r2, r1
 8013414:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 8013416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801341a:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 801341e:	4a73      	ldr	r2, [pc, #460]	; (80135ec <param_from_Q_to_JSON+0x200>)
 8013420:	4618      	mov	r0, r3
 8013422:	4611      	mov	r1, r2
 8013424:	2351      	movs	r3, #81	; 0x51
 8013426:	461a      	mov	r2, r3
 8013428:	f01a fd35 	bl	802de96 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 801342c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013430:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8013434:	4a6e      	ldr	r2, [pc, #440]	; (80135f0 <param_from_Q_to_JSON+0x204>)
 8013436:	4618      	mov	r0, r3
 8013438:	4611      	mov	r1, r2
 801343a:	2384      	movs	r3, #132	; 0x84
 801343c:	461a      	mov	r2, r3
 801343e:	f01a fd2a 	bl	802de96 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 8013442:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013446:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801344a:	4a6a      	ldr	r2, [pc, #424]	; (80135f4 <param_from_Q_to_JSON+0x208>)
 801344c:	461c      	mov	r4, r3
 801344e:	4615      	mov	r5, r2
 8013450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013454:	682b      	ldr	r3, [r5, #0]
 8013456:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8013458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801345c:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8013460:	781b      	ldrb	r3, [r3, #0]
 8013462:	2b04      	cmp	r3, #4
 8013464:	f000 8093 	beq.w	801358e <param_from_Q_to_JSON+0x1a2>
 8013468:	2b04      	cmp	r3, #4
 801346a:	f300 80b8 	bgt.w	80135de <param_from_Q_to_JSON+0x1f2>
 801346e:	2b00      	cmp	r3, #0
 8013470:	d002      	beq.n	8013478 <param_from_Q_to_JSON+0x8c>
 8013472:	2b03      	cmp	r3, #3
 8013474:	d031      	beq.n	80134da <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 8013476:	e0b2      	b.n	80135de <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8013478:	4b5f      	ldr	r3, [pc, #380]	; (80135f8 <param_from_Q_to_JSON+0x20c>)
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013480:	2200      	movs	r2, #0
 8013482:	4618      	mov	r0, r3
 8013484:	f00e f856 	bl	8021534 <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8013488:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 801348c:	461d      	mov	r5, r3
 801348e:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8013492:	461e      	mov	r6, r3
 8013494:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013498:	1c9c      	adds	r4, r3, #2
 801349a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801349e:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80134a2:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 80134a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134aa:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 80134ae:	9601      	str	r6, [sp, #4]
 80134b0:	9500      	str	r5, [sp, #0]
 80134b2:	4623      	mov	r3, r4
 80134b4:	6800      	ldr	r0, [r0, #0]
 80134b6:	f01a f9c9 	bl	802d84c <siprintf>
			*len = strlen(buf);
 80134ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134be:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80134c2:	6818      	ldr	r0, [r3, #0]
 80134c4:	f7fc feec 	bl	80102a0 <strlen>
 80134c8:	4603      	mov	r3, r0
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80134d0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	801a      	strh	r2, [r3, #0]
			break;
 80134d8:	e082      	b.n	80135e0 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 80134da:	4b48      	ldr	r3, [pc, #288]	; (80135fc <param_from_Q_to_JSON+0x210>)
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80134e2:	2200      	movs	r2, #0
 80134e4:	4618      	mov	r0, r3
 80134e6:	f00e f825 	bl	8021534 <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 80134ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7fd f842 	bl	8010578 <__aeabi_f2d>
 80134f4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80134f8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7fd f83b 	bl	8010578 <__aeabi_f2d>
 8013502:	4604      	mov	r4, r0
 8013504:	460d      	mov	r5, r1
 8013506:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801350a:	4618      	mov	r0, r3
 801350c:	f7fd f834 	bl	8010578 <__aeabi_f2d>
 8013510:	4680      	mov	r8, r0
 8013512:	4689      	mov	r9, r1
 8013514:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013518:	4618      	mov	r0, r3
 801351a:	f7fd f82d 	bl	8010578 <__aeabi_f2d>
 801351e:	4682      	mov	sl, r0
 8013520:	468b      	mov	fp, r1
 8013522:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013526:	4618      	mov	r0, r3
 8013528:	f7fd f826 	bl	8010578 <__aeabi_f2d>
 801352c:	e9c7 0100 	strd	r0, r1, [r7]
 8013530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013534:	4618      	mov	r0, r3
 8013536:	f7fd f81f 	bl	8010578 <__aeabi_f2d>
 801353a:	4602      	mov	r2, r0
 801353c:	460b      	mov	r3, r1
 801353e:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8013542:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8013546:	f5a1 70f2 	sub.w	r0, r1, #484	; 0x1e4
 801354a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801354e:	ed97 7b00 	vldr	d7, [r7]
 8013552:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013556:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801355a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801355e:	e9cd 4500 	strd	r4, r5, [sp]
 8013562:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013566:	4631      	mov	r1, r6
 8013568:	6800      	ldr	r0, [r0, #0]
 801356a:	f01a f96f 	bl	802d84c <siprintf>
			*len = strlen(buf);
 801356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013572:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013576:	6818      	ldr	r0, [r3, #0]
 8013578:	f7fc fe92 	bl	80102a0 <strlen>
 801357c:	4603      	mov	r3, r0
 801357e:	b29a      	uxth	r2, r3
 8013580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013584:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	801a      	strh	r2, [r3, #0]
			break;
 801358c:	e028      	b.n	80135e0 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 801358e:	4b1c      	ldr	r3, [pc, #112]	; (8013600 <param_from_Q_to_JSON+0x214>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8013596:	2200      	movs	r2, #0
 8013598:	4618      	mov	r0, r3
 801359a:	f00d ffcb 	bl	8021534 <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 801359e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7fc ffe8 	bl	8010578 <__aeabi_f2d>
 80135a8:	4602      	mov	r2, r0
 80135aa:	460b      	mov	r3, r1
 80135ac:	f107 0120 	add.w	r1, r7, #32
 80135b0:	f507 7000 	add.w	r0, r7, #512	; 0x200
 80135b4:	f5a0 70f2 	sub.w	r0, r0, #484	; 0x1e4
 80135b8:	6800      	ldr	r0, [r0, #0]
 80135ba:	f01a f947 	bl	802d84c <siprintf>
			*len = strlen(buf);
 80135be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80135c2:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80135c6:	6818      	ldr	r0, [r3, #0]
 80135c8:	f7fc fe6a 	bl	80102a0 <strlen>
 80135cc:	4603      	mov	r3, r0
 80135ce:	b29a      	uxth	r2, r3
 80135d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80135d4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	801a      	strh	r2, [r3, #0]
			break;
 80135dc:	e000      	b.n	80135e0 <param_from_Q_to_JSON+0x1f4>
			break;
 80135de:	bf00      	nop
	}
}
 80135e0:	bf00      	nop
 80135e2:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80135e6:	46bd      	mov	sp, r7
 80135e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ec:	080329a8 	.word	0x080329a8
 80135f0:	080329fc 	.word	0x080329fc
 80135f4:	08032a80 	.word	0x08032a80
 80135f8:	20000508 	.word	0x20000508
 80135fc:	20000514 	.word	0x20000514
 8013600:	20000518 	.word	0x20000518

08013604 <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 8013604:	b590      	push	{r4, r7, lr}
 8013606:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 801360a:	af02      	add	r7, sp, #8
 801360c:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 8013610:	f5a4 7439 	sub.w	r4, r4, #740	; 0x2e4
 8013614:	6020      	str	r0, [r4, #0]
 8013616:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 801361a:	f5a0 703a 	sub.w	r0, r0, #744	; 0x2e8
 801361e:	6001      	str	r1, [r0, #0]
 8013620:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8013624:	f5a1 713b 	sub.w	r1, r1, #748	; 0x2ec
 8013628:	600a      	str	r2, [r1, #0]
 801362a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 801362e:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 8013632:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 8013634:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013638:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 801363c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013640:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013644:	49ac      	ldr	r1, [pc, #688]	; (80138f8 <write_to_file+0x2f4>)
 8013646:	6818      	ldr	r0, [r3, #0]
 8013648:	f00b fa38 	bl	801eabc <get_http_param_value>
 801364c:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 8013650:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d025      	beq.n	80136a4 <write_to_file+0xa0>
		strcpy(filename, base_path);
 8013658:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801365c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8013660:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013664:	6819      	ldr	r1, [r3, #0]
 8013666:	4610      	mov	r0, r2
 8013668:	f01a fc0d 	bl	802de86 <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 801366c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013670:	222d      	movs	r2, #45	; 0x2d
 8013672:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8013676:	4618      	mov	r0, r3
 8013678:	f01a fa6d 	bl	802db56 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 801367c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013680:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013684:	499d      	ldr	r1, [pc, #628]	; (80138fc <write_to_file+0x2f8>)
 8013686:	6818      	ldr	r0, [r3, #0]
 8013688:	f00b fa18 	bl	801eabc <get_http_param_value>
 801368c:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 8013690:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013694:	f7fc fe04 	bl	80102a0 <strlen>
 8013698:	4603      	mov	r3, r0
 801369a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801369e:	f080 8113 	bcs.w	80138c8 <write_to_file+0x2c4>
 80136a2:	e011      	b.n	80136c8 <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 80136a4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80136a8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	4a94      	ldr	r2, [pc, #592]	; (8013900 <write_to_file+0x2fc>)
 80136b0:	6810      	ldr	r0, [r2, #0]
 80136b2:	6018      	str	r0, [r3, #0]
 80136b4:	8892      	ldrh	r2, [r2, #4]
 80136b6:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80136b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80136bc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	2205      	movs	r2, #5
 80136c4:	801a      	strh	r2, [r3, #0]
		return;
 80136c6:	e111      	b.n	80138ec <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 80136c8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f000 80e9 	beq.w	80138a4 <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 80136d2:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 80136d6:	f7fc fde3 	bl	80102a0 <strlen>
 80136da:	4603      	mov	r3, r0
 80136dc:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 80136e0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80136e4:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80136e8:	9300      	str	r3, [sp, #0]
 80136ea:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80136ee:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80136f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80136f6:	f017 fe87 	bl	802b408 <mbedtls_base64_decode>
 80136fa:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 80136fe:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013702:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013706:	497f      	ldr	r1, [pc, #508]	; (8013904 <write_to_file+0x300>)
 8013708:	6818      	ldr	r0, [r3, #0]
 801370a:	f00b f9d7 	bl	801eabc <get_http_param_value>
 801370e:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 8013712:	2300      	movs	r3, #0
 8013714:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8013718:	e030      	b.n	801377c <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 801371a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801371e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8013722:	4413      	add	r3, r2
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	4618      	mov	r0, r3
 8013728:	f7ff fc1e 	bl	8012f68 <CharToDec>
 801372c:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 8013730:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013734:	3301      	adds	r3, #1
 8013736:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 801373a:	4413      	add	r3, r2
 801373c:	781b      	ldrb	r3, [r3, #0]
 801373e:	4618      	mov	r0, r3
 8013740:	f7ff fc12 	bl	8012f68 <CharToDec>
 8013744:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 8013748:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801374c:	011b      	lsls	r3, r3, #4
 801374e:	b25a      	sxtb	r2, r3
 8013750:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8013754:	b25b      	sxtb	r3, r3
 8013756:	4313      	orrs	r3, r2
 8013758:	b259      	sxtb	r1, r3
 801375a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801375e:	0fda      	lsrs	r2, r3, #31
 8013760:	4413      	add	r3, r2
 8013762:	105b      	asrs	r3, r3, #1
 8013764:	461a      	mov	r2, r3
 8013766:	b2c9      	uxtb	r1, r1
 8013768:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801376c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013770:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 8013772:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013776:	3302      	adds	r3, #2
 8013778:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 801377c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013780:	2b1f      	cmp	r3, #31
 8013782:	ddca      	ble.n	801371a <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 8013784:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013788:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801378c:	2200      	movs	r2, #0
 801378e:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 8013790:	f107 0310 	add.w	r3, r7, #16
 8013794:	4618      	mov	r0, r3
 8013796:	f017 ff53 	bl	802b640 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 801379a:	f107 0310 	add.w	r3, r7, #16
 801379e:	4618      	mov	r0, r3
 80137a0:	f017 ff6c 	bl	802b67c <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 80137a4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80137a8:	681a      	ldr	r2, [r3, #0]
 80137aa:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80137ae:	f107 0310 	add.w	r3, r7, #16
 80137b2:	4618      	mov	r0, r3
 80137b4:	f018 fe4c 	bl	802c450 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 80137b8:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80137bc:	f107 0310 	add.w	r3, r7, #16
 80137c0:	4611      	mov	r1, r2
 80137c2:	4618      	mov	r0, r3
 80137c4:	f018 feb9 	bl	802c53a <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 80137c8:	f107 0310 	add.w	r3, r7, #16
 80137cc:	4618      	mov	r0, r3
 80137ce:	f017 ff44 	bl	802b65a <mbedtls_md5_free>
		output[16] = '\0';
 80137d2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80137d6:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80137da:	2200      	movs	r2, #0
 80137dc:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 80137de:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80137e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80137e6:	2210      	movs	r2, #16
 80137e8:	4618      	mov	r0, r3
 80137ea:	f01a f9c7 	bl	802db7c <strncmp>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d006      	beq.n	8013802 <write_to_file+0x1fe>
			err = -1;
 80137f4:	f04f 33ff 	mov.w	r3, #4294967295
 80137f8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 80137fc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013800:	e074      	b.n	80138ec <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 8013802:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013806:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 801380a:	493f      	ldr	r1, [pc, #252]	; (8013908 <write_to_file+0x304>)
 801380c:	6818      	ldr	r0, [r3, #0]
 801380e:	f00b f955 	bl	801eabc <get_http_param_value>
 8013812:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 8013816:	210a      	movs	r1, #10
 8013818:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 801381c:	f00b fa00 	bl	801ec20 <ATOI>
 8013820:	4603      	mov	r3, r0
 8013822:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 8013826:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 801382a:	2b00      	cmp	r3, #0
 801382c:	d10f      	bne.n	801384e <write_to_file+0x24a>
			part =0;
 801382e:	4b37      	ldr	r3, [pc, #220]	; (801390c <write_to_file+0x308>)
 8013830:	2200      	movs	r2, #0
 8013832:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 8013834:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013838:	681a      	ldr	r2, [r3, #0]
 801383a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801383e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013842:	4618      	mov	r0, r3
 8013844:	f017 fc0e 	bl	802b064 <spi_fs_over_write_file>
 8013848:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 801384c:	e01d      	b.n	801388a <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 801384e:	210a      	movs	r1, #10
 8013850:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8013854:	f00b f9e4 	bl	801ec20 <ATOI>
 8013858:	4603      	mov	r3, r0
 801385a:	461a      	mov	r2, r3
 801385c:	4b2b      	ldr	r3, [pc, #172]	; (801390c <write_to_file+0x308>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	429a      	cmp	r2, r3
 8013862:	d006      	beq.n	8013872 <write_to_file+0x26e>
				err = -1;
 8013864:	f04f 33ff 	mov.w	r3, #4294967295
 8013868:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 801386c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013870:	e03c      	b.n	80138ec <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 8013872:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013876:	681a      	ldr	r2, [r3, #0]
 8013878:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801387c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013880:	4618      	mov	r0, r3
 8013882:	f017 fc4b 	bl	802b11c <spi_fs_write_file_to_end>
 8013886:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 801388a:	4b20      	ldr	r3, [pc, #128]	; (801390c <write_to_file+0x308>)
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	3301      	adds	r3, #1
 8013890:	4a1e      	ldr	r2, [pc, #120]	; (801390c <write_to_file+0x308>)
 8013892:	6013      	str	r3, [r2, #0]

		if (err < 0){
 8013894:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013898:	2b00      	cmp	r3, #0
 801389a:	da15      	bge.n	80138c8 <write_to_file+0x2c4>
			err = 0;
 801389c:	2300      	movs	r3, #0
 801389e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 80138a2:	e011      	b.n	80138c8 <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 80138a4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80138a8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	4a14      	ldr	r2, [pc, #80]	; (8013900 <write_to_file+0x2fc>)
 80138b0:	6810      	ldr	r0, [r2, #0]
 80138b2:	6018      	str	r0, [r3, #0]
 80138b4:	8892      	ldrh	r2, [r2, #4]
 80138b6:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 80138b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80138bc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	2205      	movs	r2, #5
 80138c4:	801a      	strh	r2, [r3, #0]
		return;
 80138c6:	e011      	b.n	80138ec <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 80138c8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80138cc:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	4a0f      	ldr	r2, [pc, #60]	; (8013910 <write_to_file+0x30c>)
 80138d4:	8811      	ldrh	r1, [r2, #0]
 80138d6:	7892      	ldrb	r2, [r2, #2]
 80138d8:	8019      	strh	r1, [r3, #0]
 80138da:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 80138dc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80138e0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	2202      	movs	r2, #2
 80138e8:	801a      	strh	r2, [r3, #0]
}
 80138ea:	e7ff      	b.n	80138ec <write_to_file+0x2e8>
 80138ec:	4618      	mov	r0, r3
 80138ee:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80138f2:	46bd      	mov	sp, r7
 80138f4:	bd90      	pop	{r4, r7, pc}
 80138f6:	bf00      	nop
 80138f8:	08032a94 	.word	0x08032a94
 80138fc:	08032aa8 	.word	0x08032aa8
 8013900:	08032aa0 	.word	0x08032aa0
 8013904:	08032ab0 	.word	0x08032ab0
 8013908:	08032ab8 	.word	0x08032ab8
 801390c:	20000524 	.word	0x20000524
 8013910:	08032ac0 	.word	0x08032ac0

08013914 <web_mkdir>:

int8_t web_mkdir(char * buf, char * base_path){
 8013914:	b580      	push	{r7, lr}
 8013916:	b092      	sub	sp, #72	; 0x48
 8013918:	af02      	add	r7, sp, #8
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]

	char * dirname;
	char tmp[MAX_CONTENT_NAME_LEN];

	dirname = get_http_param_value((char *)buf, "dirname");
 801391e:	4912      	ldr	r1, [pc, #72]	; (8013968 <web_mkdir+0x54>)
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f00b f8cb 	bl	801eabc <get_http_param_value>
 8013926:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (dirname != 0 || (strlen(dirname) < MAX_CONTENT_NAME_LEN - 5)) //TODO add dirname validation
 8013928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801392a:	2b00      	cmp	r3, #0
 801392c:	d105      	bne.n	801393a <web_mkdir+0x26>
 801392e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013930:	f7fc fcb6 	bl	80102a0 <strlen>
 8013934:	4603      	mov	r3, r0
 8013936:	2b2c      	cmp	r3, #44	; 0x2c
 8013938:	d810      	bhi.n	801395c <web_mkdir+0x48>
		{
			snprintf(tmp, sizeof(tmp), "%s%s", base_path, dirname);
 801393a:	f107 0008 	add.w	r0, r7, #8
 801393e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013940:	9300      	str	r3, [sp, #0]
 8013942:	683b      	ldr	r3, [r7, #0]
 8013944:	4a09      	ldr	r2, [pc, #36]	; (801396c <web_mkdir+0x58>)
 8013946:	2132      	movs	r1, #50	; 0x32
 8013948:	f019 ff4c 	bl	802d7e4 <sniprintf>
			return (spi_fs_mkdir(tmp));
 801394c:	f107 0308 	add.w	r3, r7, #8
 8013950:	4618      	mov	r0, r3
 8013952:	f017 fc3b 	bl	802b1cc <spi_fs_mkdir>
 8013956:	4603      	mov	r3, r0
 8013958:	b25b      	sxtb	r3, r3
 801395a:	e001      	b.n	8013960 <web_mkdir+0x4c>
		}
	return -1;
 801395c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013960:	4618      	mov	r0, r3
 8013962:	3740      	adds	r7, #64	; 0x40
 8013964:	46bd      	mov	sp, r7
 8013966:	bd80      	pop	{r7, pc}
 8013968:	08032ac4 	.word	0x08032ac4
 801396c:	08032acc 	.word	0x08032acc

08013970 <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 8013970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013974:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8013978:	af16      	add	r7, sp, #88	; 0x58
 801397a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801397e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013982:	6018      	str	r0, [r3, #0]
 8013984:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013988:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801398c:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 801398e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013992:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8013996:	4a5d      	ldr	r2, [pc, #372]	; (8013b0c <read_all_parameters+0x19c>)
 8013998:	4618      	mov	r0, r3
 801399a:	4611      	mov	r1, r2
 801399c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 80139a0:	461a      	mov	r2, r3
 80139a2:	f01a fa78 	bl	802de96 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 80139a6:	4b5a      	ldr	r3, [pc, #360]	; (8013b10 <read_all_parameters+0x1a0>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 80139ae:	2200      	movs	r2, #0
 80139b0:	4618      	mov	r0, r3
 80139b2:	f00d fdbf 	bl	8021534 <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 80139b6:	4b57      	ldr	r3, [pc, #348]	; (8013b14 <read_all_parameters+0x1a4>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f507 7111 	add.w	r1, r7, #580	; 0x244
 80139be:	2200      	movs	r2, #0
 80139c0:	4618      	mov	r0, r3
 80139c2:	f00d fdb7 	bl	8021534 <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 80139c6:	4b54      	ldr	r3, [pc, #336]	; (8013b18 <read_all_parameters+0x1a8>)
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80139ce:	2200      	movs	r2, #0
 80139d0:	4618      	mov	r0, r3
 80139d2:	f00d fdaf 	bl	8021534 <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 80139d6:	4b51      	ldr	r3, [pc, #324]	; (8013b1c <read_all_parameters+0x1ac>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80139de:	2200      	movs	r2, #0
 80139e0:	4618      	mov	r0, r3
 80139e2:	f00d fda7 	bl	8021534 <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 80139e6:	4b4e      	ldr	r3, [pc, #312]	; (8013b20 <read_all_parameters+0x1b0>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 80139ee:	2200      	movs	r2, #0
 80139f0:	4618      	mov	r0, r3
 80139f2:	f00d fd9f 	bl	8021534 <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 80139f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80139fa:	4618      	mov	r0, r3
 80139fc:	f7fc fdbc 	bl	8010578 <__aeabi_f2d>
 8013a00:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8013a04:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8013a08:	4618      	mov	r0, r3
 8013a0a:	f7fc fdb5 	bl	8010578 <__aeabi_f2d>
 8013a0e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8013a12:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8013a16:	4618      	mov	r0, r3
 8013a18:	f7fc fdae 	bl	8010578 <__aeabi_f2d>
 8013a1c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8013a20:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8013a24:	4618      	mov	r0, r3
 8013a26:	f7fc fda7 	bl	8010578 <__aeabi_f2d>
 8013a2a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8013a2e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fc fda0 	bl	8010578 <__aeabi_f2d>
 8013a38:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8013a3c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013a40:	4618      	mov	r0, r3
 8013a42:	f7fc fd99 	bl	8010578 <__aeabi_f2d>
 8013a46:	4682      	mov	sl, r0
 8013a48:	468b      	mov	fp, r1
 8013a4a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7fc fd92 	bl	8010578 <__aeabi_f2d>
 8013a54:	4680      	mov	r8, r0
 8013a56:	4689      	mov	r9, r1
 8013a58:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8013a5c:	60fb      	str	r3, [r7, #12]
 8013a5e:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8013a62:	60bb      	str	r3, [r7, #8]
 8013a64:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8013a68:	607b      	str	r3, [r7, #4]
 8013a6a:	f8d7 4264 	ldr.w	r4, [r7, #612]	; 0x264
 8013a6e:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 8013a72:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8013a76:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8013a7a:	f107 0644 	add.w	r6, r7, #68	; 0x44
 8013a7e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013a82:	f5a3 750d 	sub.w	r5, r3, #564	; 0x234
 8013a86:	9214      	str	r2, [sp, #80]	; 0x50
 8013a88:	9113      	str	r1, [sp, #76]	; 0x4c
 8013a8a:	9012      	str	r0, [sp, #72]	; 0x48
 8013a8c:	9411      	str	r4, [sp, #68]	; 0x44
 8013a8e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013a92:	3302      	adds	r3, #2
 8013a94:	9310      	str	r3, [sp, #64]	; 0x40
 8013a96:	6879      	ldr	r1, [r7, #4]
 8013a98:	910f      	str	r1, [sp, #60]	; 0x3c
 8013a9a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013a9e:	3384      	adds	r3, #132	; 0x84
 8013aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8013aa2:	68b9      	ldr	r1, [r7, #8]
 8013aa4:	910d      	str	r1, [sp, #52]	; 0x34
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8013aaa:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8013aae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013ab2:	ed97 7b04 	vldr	d7, [r7, #16]
 8013ab6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013aba:	ed97 7b06 	vldr	d7, [r7, #24]
 8013abe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013ac2:	ed97 7b08 	vldr	d7, [r7, #32]
 8013ac6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013aca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8013ace:	ed8d 7b00 	vstr	d7, [sp]
 8013ad2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013ad6:	4631      	mov	r1, r6
 8013ad8:	6828      	ldr	r0, [r5, #0]
 8013ada:	f019 feb7 	bl	802d84c <siprintf>
	*len = strlen(buf);
 8013ade:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013ae2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013ae6:	6818      	ldr	r0, [r3, #0]
 8013ae8:	f7fc fbda 	bl	80102a0 <strlen>
 8013aec:	4603      	mov	r3, r0
 8013aee:	b29a      	uxth	r2, r3
 8013af0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013af4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	801a      	strh	r2, [r3, #0]

	return 0 ;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	f507 771d 	add.w	r7, r7, #628	; 0x274
 8013b04:	46bd      	mov	sp, r7
 8013b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b0a:	bf00      	nop
 8013b0c:	08032ad4 	.word	0x08032ad4
 8013b10:	20000514 	.word	0x20000514
 8013b14:	20000518 	.word	0x20000518
 8013b18:	20000508 	.word	0x20000508
 8013b1c:	20000510 	.word	0x20000510
 8013b20:	2000051c 	.word	0x2000051c

08013b24 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 8013b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b26:	b0db      	sub	sp, #364	; 0x16c
 8013b28:	af0e      	add	r7, sp, #56	; 0x38
 8013b2a:	6378      	str	r0, [r7, #52]	; 0x34
 8013b2c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8013b30:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8013b34:	6001      	str	r1, [r0, #0]
 8013b36:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8013b3a:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8013b3e:	600a      	str	r2, [r1, #0]
 8013b40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8013b44:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8013b48:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 8013b50:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b54:	4618      	mov	r0, r3
 8013b56:	f017 fd73 	bl	802b640 <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 8013b5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f017 fd8c 	bl	802b67c <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013b64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013b68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f01a f98b 	bl	802de86 <strcpy>
	strncat(path, filename, 20);
 8013b70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013b74:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013b78:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013b7c:	2214      	movs	r2, #20
 8013b7e:	6819      	ldr	r1, [r3, #0]
 8013b80:	f019 ffe9 	bl	802db56 <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013b84:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013b88:	2241      	movs	r2, #65	; 0x41
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	f019 ffad 	bl	802daec <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 8013b92:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013b96:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013b9a:	2340      	movs	r3, #64	; 0x40
 8013b9c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013ba0:	f017 fa1c 	bl	802afdc <spi_fs_read_file_offset>
 8013ba4:	4603      	mov	r3, r0
 8013ba6:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 8013baa:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013bae:	2b40      	cmp	r3, #64	; 0x40
 8013bb0:	d110      	bne.n	8013bd4 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013bb2:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013bb6:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013bba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f018 fc46 	bl	802c450 <mbedtls_md5_update_ret>
				offset += readed_len;
 8013bc4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013bc8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013bcc:	4413      	add	r3, r2
 8013bce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013bd2:	e019      	b.n	8013c08 <calculate_md5_file+0xe4>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013bd4:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013bd8:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013bdc:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013be0:	4618      	mov	r0, r3
 8013be2:	f018 fc35 	bl	802c450 <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 8013be6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8013bea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013bee:	4611      	mov	r1, r2
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	f018 fca2 	bl	802c53a <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 8013bf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f017 fd2d 	bl	802b65a <mbedtls_md5_free>
				md5sum[16] = '\0';
 8013c00:	2300      	movs	r3, #0
 8013c02:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				break;
 8013c06:	e002      	b.n	8013c0e <calculate_md5_file+0xea>
			}
		}
		osThreadYield();
 8013c08:	f00c fb98 	bl	802033c <osThreadYield>
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013c0c:	e7ba      	b.n	8013b84 <calculate_md5_file+0x60>
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 8013c0e:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8013c12:	469c      	mov	ip, r3
 8013c14:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8013c18:	469e      	mov	lr, r3
 8013c1a:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8013c1e:	461d      	mov	r5, r3
 8013c20:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8013c24:	461e      	mov	r6, r3
 8013c26:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8013c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8013c2c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8013c30:	623b      	str	r3, [r7, #32]
 8013c32:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8013c36:	61fb      	str	r3, [r7, #28]
 8013c38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013c3c:	61bb      	str	r3, [r7, #24]
 8013c3e:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8013c42:	617b      	str	r3, [r7, #20]
 8013c44:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8013c48:	613b      	str	r3, [r7, #16]
 8013c4a:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8013c4e:	60fb      	str	r3, [r7, #12]
 8013c50:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8013c54:	60bb      	str	r3, [r7, #8]
 8013c56:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8013c5a:	607b      	str	r3, [r7, #4]
 8013c5c:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8013c60:	461c      	mov	r4, r3
 8013c62:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013c66:	4619      	mov	r1, r3
 8013c68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013c72:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8013c76:	920d      	str	r2, [sp, #52]	; 0x34
 8013c78:	910c      	str	r1, [sp, #48]	; 0x30
 8013c7a:	940b      	str	r4, [sp, #44]	; 0x2c
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	920a      	str	r2, [sp, #40]	; 0x28
 8013c80:	68ba      	ldr	r2, [r7, #8]
 8013c82:	9209      	str	r2, [sp, #36]	; 0x24
 8013c84:	68fa      	ldr	r2, [r7, #12]
 8013c86:	9208      	str	r2, [sp, #32]
 8013c88:	693a      	ldr	r2, [r7, #16]
 8013c8a:	9207      	str	r2, [sp, #28]
 8013c8c:	697a      	ldr	r2, [r7, #20]
 8013c8e:	9206      	str	r2, [sp, #24]
 8013c90:	69ba      	ldr	r2, [r7, #24]
 8013c92:	9205      	str	r2, [sp, #20]
 8013c94:	69fa      	ldr	r2, [r7, #28]
 8013c96:	9204      	str	r2, [sp, #16]
 8013c98:	6a3a      	ldr	r2, [r7, #32]
 8013c9a:	9203      	str	r2, [sp, #12]
 8013c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9e:	9302      	str	r3, [sp, #8]
 8013ca0:	9601      	str	r6, [sp, #4]
 8013ca2:	9500      	str	r5, [sp, #0]
 8013ca4:	4673      	mov	r3, lr
 8013ca6:	4662      	mov	r2, ip
 8013ca8:	4908      	ldr	r1, [pc, #32]	; (8013ccc <calculate_md5_file+0x1a8>)
 8013caa:	6800      	ldr	r0, [r0, #0]
 8013cac:	f019 fdce 	bl	802d84c <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 8013cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2220      	movs	r2, #32
 8013cbc:	801a      	strh	r2, [r3, #0]
	return 0;
 8013cbe:	2300      	movs	r3, #0
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013cca:	bf00      	nop
 8013ccc:	08032c04 	.word	0x08032c04

08013cd0 <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b092      	sub	sp, #72	; 0x48
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 8013cda:	f107 0308 	add.w	r3, r7, #8
 8013cde:	4a18      	ldr	r2, [pc, #96]	; (8013d40 <activate_firmware+0x70>)
 8013ce0:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ce2:	c303      	stmia	r3!, {r0, r1}
 8013ce4:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 8013ce6:	f107 0308 	add.w	r3, r7, #8
 8013cea:	4618      	mov	r0, r3
 8013cec:	f7fc fad8 	bl	80102a0 <strlen>
 8013cf0:	4603      	mov	r3, r0
 8013cf2:	461a      	mov	r2, r3
 8013cf4:	f107 0308 	add.w	r3, r7, #8
 8013cf8:	4413      	add	r3, r2
 8013cfa:	4912      	ldr	r1, [pc, #72]	; (8013d44 <activate_firmware+0x74>)
 8013cfc:	461a      	mov	r2, r3
 8013cfe:	460b      	mov	r3, r1
 8013d00:	cb03      	ldmia	r3!, {r0, r1}
 8013d02:	6010      	str	r0, [r2, #0]
 8013d04:	6051      	str	r1, [r2, #4]
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 8013d0a:	f107 0308 	add.w	r3, r7, #8
 8013d0e:	490e      	ldr	r1, [pc, #56]	; (8013d48 <activate_firmware+0x78>)
 8013d10:	4618      	mov	r0, r3
 8013d12:	f017 fb5d 	bl	802b3d0 <spi_fs_mv>
 8013d16:	6478      	str	r0, [r7, #68]	; 0x44

	if(err >= 0){
 8013d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	db0a      	blt.n	8013d34 <activate_firmware+0x64>
		strcpy(buf, "OK");
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	4a0a      	ldr	r2, [pc, #40]	; (8013d4c <activate_firmware+0x7c>)
 8013d22:	8811      	ldrh	r1, [r2, #0]
 8013d24:	7892      	ldrb	r2, [r2, #2]
 8013d26:	8019      	strh	r1, [r3, #0]
 8013d28:	709a      	strb	r2, [r3, #2]
		* len = 2;
 8013d2a:	683b      	ldr	r3, [r7, #0]
 8013d2c:	2202      	movs	r2, #2
 8013d2e:	801a      	strh	r2, [r3, #0]
		return 1;
 8013d30:	2301      	movs	r3, #1
 8013d32:	e000      	b.n	8013d36 <activate_firmware+0x66>
	}

 	return 0;
 8013d34:	2300      	movs	r3, #0
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3748      	adds	r7, #72	; 0x48
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	bf00      	nop
 8013d40:	08032c48 	.word	0x08032c48
 8013d44:	08032c54 	.word	0x08032c54
 8013d48:	08032c60 	.word	0x08032c60
 8013d4c:	08032c70 	.word	0x08032c70

08013d50 <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b086      	sub	sp, #24
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	60f8      	str	r0, [r7, #12]
 8013d58:	60b9      	str	r1, [r7, #8]
 8013d5a:	607a      	str	r2, [r7, #4]
 8013d5c:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013d5e:	2300      	movs	r3, #0
 8013d60:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013d62:	2300      	movs	r3, #0
 8013d64:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 8013d66:	4937      	ldr	r1, [pc, #220]	; (8013e44 <http_post_cgi_processor+0xf4>)
 8013d68:	68f8      	ldr	r0, [r7, #12]
 8013d6a:	f7fc fa39 	bl	80101e0 <strcmp>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d106      	bne.n	8013d82 <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013d74:	2100      	movs	r1, #0
 8013d76:	68b8      	ldr	r0, [r7, #8]
 8013d78:	f7ff f972 	bl	8013060 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	75fb      	strb	r3, [r7, #23]
 8013d80:	e05a      	b.n	8013e38 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013d82:	4931      	ldr	r1, [pc, #196]	; (8013e48 <http_post_cgi_processor+0xf8>)
 8013d84:	68f8      	ldr	r0, [r7, #12]
 8013d86:	f7fc fa2b 	bl	80101e0 <strcmp>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d106      	bne.n	8013d9e <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013d90:	2102      	movs	r1, #2
 8013d92:	68b8      	ldr	r0, [r7, #8]
 8013d94:	f7ff f964 	bl	8013060 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013d98:	2301      	movs	r3, #1
 8013d9a:	75fb      	strb	r3, [r7, #23]
 8013d9c:	e04c      	b.n	8013e38 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013d9e:	492b      	ldr	r1, [pc, #172]	; (8013e4c <http_post_cgi_processor+0xfc>)
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7fc fa1d 	bl	80101e0 <strcmp>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d10e      	bne.n	8013dca <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013dac:	4b28      	ldr	r3, [pc, #160]	; (8013e50 <http_post_cgi_processor+0x100>)
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	6839      	ldr	r1, [r7, #0]
 8013db2:	68b8      	ldr	r0, [r7, #8]
 8013db4:	f7ff fc26 	bl	8013604 <write_to_file>
 8013db8:	4603      	mov	r3, r0
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	da02      	bge.n	8013dc4 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	75fb      	strb	r3, [r7, #23]
 8013dc2:	e039      	b.n	8013e38 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	75fb      	strb	r3, [r7, #23]
 8013dc8:	e036      	b.n	8013e38 <http_post_cgi_processor+0xe8>
		}
	}else if (strcmp((const char *)uri_name, "web_mkdir.cgi") == 0){
 8013dca:	4922      	ldr	r1, [pc, #136]	; (8013e54 <http_post_cgi_processor+0x104>)
 8013dcc:	68f8      	ldr	r0, [r7, #12]
 8013dce:	f7fc fa07 	bl	80101e0 <strcmp>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d10c      	bne.n	8013df2 <http_post_cgi_processor+0xa2>
		if( web_mkdir((char *)uri, HTTP_FS_DIR) >= 0){
 8013dd8:	491d      	ldr	r1, [pc, #116]	; (8013e50 <http_post_cgi_processor+0x100>)
 8013dda:	68b8      	ldr	r0, [r7, #8]
 8013ddc:	f7ff fd9a 	bl	8013914 <web_mkdir>
 8013de0:	4603      	mov	r3, r0
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	db02      	blt.n	8013dec <http_post_cgi_processor+0x9c>
			ret = HTTP_OK;
 8013de6:	2301      	movs	r3, #1
 8013de8:	75fb      	strb	r3, [r7, #23]
 8013dea:	e025      	b.n	8013e38 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_RESET;
 8013dec:	2302      	movs	r3, #2
 8013dee:	75fb      	strb	r3, [r7, #23]
 8013df0:	e022      	b.n	8013e38 <http_post_cgi_processor+0xe8>
		}

	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 8013df2:	4919      	ldr	r1, [pc, #100]	; (8013e58 <http_post_cgi_processor+0x108>)
 8013df4:	68f8      	ldr	r0, [r7, #12]
 8013df6:	f7fc f9f3 	bl	80101e0 <strcmp>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d106      	bne.n	8013e0e <http_post_cgi_processor+0xbe>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 8013e00:	2104      	movs	r1, #4
 8013e02:	68b8      	ldr	r0, [r7, #8]
 8013e04:	f7ff f92c 	bl	8013060 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013e08:	2301      	movs	r3, #1
 8013e0a:	75fb      	strb	r3, [r7, #23]
 8013e0c:	e014      	b.n	8013e38 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 8013e0e:	4913      	ldr	r1, [pc, #76]	; (8013e5c <http_post_cgi_processor+0x10c>)
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f7fc f9e5 	bl	80101e0 <strcmp>
 8013e16:	4603      	mov	r3, r0
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10d      	bne.n	8013e38 <http_post_cgi_processor+0xe8>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013e1c:	4b10      	ldr	r3, [pc, #64]	; (8013e60 <http_post_cgi_processor+0x110>)
 8013e1e:	687a      	ldr	r2, [r7, #4]
 8013e20:	6839      	ldr	r1, [r7, #0]
 8013e22:	68b8      	ldr	r0, [r7, #8]
 8013e24:	f7ff fbee 	bl	8013604 <write_to_file>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	da02      	bge.n	8013e34 <http_post_cgi_processor+0xe4>
			ret = HTTP_FAILED;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	75fb      	strb	r3, [r7, #23]
 8013e32:	e001      	b.n	8013e38 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013e34:	2301      	movs	r3, #1
 8013e36:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8013e38:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e3a:	4618      	mov	r0, r3
 8013e3c:	3718      	adds	r7, #24
 8013e3e:	46bd      	mov	sp, r7
 8013e40:	bd80      	pop	{r7, pc}
 8013e42:	bf00      	nop
 8013e44:	08032c74 	.word	0x08032c74
 8013e48:	08032c88 	.word	0x08032c88
 8013e4c:	08032c9c 	.word	0x08032c9c
 8013e50:	08032cac 	.word	0x08032cac
 8013e54:	08032cb4 	.word	0x08032cb4
 8013e58:	08032cc4 	.word	0x08032cc4
 8013e5c:	08032cdc 	.word	0x08032cdc
 8013e60:	08032c48 	.word	0x08032c48

08013e64 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b086      	sub	sp, #24
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	60f8      	str	r0, [r7, #12]
 8013e6c:	60b9      	str	r1, [r7, #8]
 8013e6e:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 8013e70:	2300      	movs	r3, #0
 8013e72:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8013e74:	494f      	ldr	r1, [pc, #316]	; (8013fb4 <http_get_cgi_processor+0x150>)
 8013e76:	68f8      	ldr	r0, [r7, #12]
 8013e78:	f7fc f9b2 	bl	80101e0 <strcmp>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d107      	bne.n	8013e92 <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	2100      	movs	r1, #0
 8013e86:	68b8      	ldr	r0, [r7, #8]
 8013e88:	f7ff fab0 	bl	80133ec <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	75fb      	strb	r3, [r7, #23]
 8013e90:	e08b      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013e92:	4949      	ldr	r1, [pc, #292]	; (8013fb8 <http_get_cgi_processor+0x154>)
 8013e94:	68f8      	ldr	r0, [r7, #12]
 8013e96:	f7fc f9a3 	bl	80101e0 <strcmp>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d10b      	bne.n	8013eb8 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	4946      	ldr	r1, [pc, #280]	; (8013fbc <http_get_cgi_processor+0x158>)
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	460b      	mov	r3, r1
 8013ea8:	881b      	ldrh	r3, [r3, #0]
 8013eaa:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013eac:	2301      	movs	r3, #1
 8013eae:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2202      	movs	r2, #2
 8013eb4:	801a      	strh	r2, [r3, #0]
 8013eb6:	e078      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013eb8:	4941      	ldr	r1, [pc, #260]	; (8013fc0 <http_get_cgi_processor+0x15c>)
 8013eba:	68f8      	ldr	r0, [r7, #12]
 8013ebc:	f7fc f990 	bl	80101e0 <strcmp>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d107      	bne.n	8013ed6 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	2103      	movs	r1, #3
 8013eca:	68b8      	ldr	r0, [r7, #8]
 8013ecc:	f7ff fa8e 	bl	80133ec <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013ed0:	2301      	movs	r3, #1
 8013ed2:	75fb      	strb	r3, [r7, #23]
 8013ed4:	e069      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013ed6:	493b      	ldr	r1, [pc, #236]	; (8013fc4 <http_get_cgi_processor+0x160>)
 8013ed8:	68f8      	ldr	r0, [r7, #12]
 8013eda:	f7fc f981 	bl	80101e0 <strcmp>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d107      	bne.n	8013ef4 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013ee4:	687a      	ldr	r2, [r7, #4]
 8013ee6:	2104      	movs	r1, #4
 8013ee8:	68b8      	ldr	r0, [r7, #8]
 8013eea:	f7ff fa7f 	bl	80133ec <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013eee:	2301      	movs	r3, #1
 8013ef0:	75fb      	strb	r3, [r7, #23]
 8013ef2:	e05a      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013ef4:	4934      	ldr	r1, [pc, #208]	; (8013fc8 <http_get_cgi_processor+0x164>)
 8013ef6:	68f8      	ldr	r0, [r7, #12]
 8013ef8:	f7fc f972 	bl	80101e0 <strcmp>
 8013efc:	4603      	mov	r3, r0
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d106      	bne.n	8013f10 <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013f02:	6879      	ldr	r1, [r7, #4]
 8013f04:	68b8      	ldr	r0, [r7, #8]
 8013f06:	f7ff fd33 	bl	8013970 <read_all_parameters>
		ret = HTTP_OK;
 8013f0a:	2301      	movs	r3, #1
 8013f0c:	75fb      	strb	r3, [r7, #23]
 8013f0e:	e04c      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013f10:	492e      	ldr	r1, [pc, #184]	; (8013fcc <http_get_cgi_processor+0x168>)
 8013f12:	68f8      	ldr	r0, [r7, #12]
 8013f14:	f7fc f964 	bl	80101e0 <strcmp>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d111      	bne.n	8013f42 <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	68ba      	ldr	r2, [r7, #8]
 8013f22:	492b      	ldr	r1, [pc, #172]	; (8013fd0 <http_get_cgi_processor+0x16c>)
 8013f24:	482b      	ldr	r0, [pc, #172]	; (8013fd4 <http_get_cgi_processor+0x170>)
 8013f26:	f7ff fdfd 	bl	8013b24 <calculate_md5_file>
 8013f2a:	4603      	mov	r3, r0
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d102      	bne.n	8013f36 <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013f30:	2301      	movs	r3, #1
 8013f32:	75fb      	strb	r3, [r7, #23]
 8013f34:	e039      	b.n	8013faa <http_get_cgi_processor+0x146>
		}else{
			* len = 0;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	75fb      	strb	r3, [r7, #23]
 8013f40:	e033      	b.n	8013faa <http_get_cgi_processor+0x146>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013f42:	4925      	ldr	r1, [pc, #148]	; (8013fd8 <http_get_cgi_processor+0x174>)
 8013f44:	68f8      	ldr	r0, [r7, #12]
 8013f46:	f7fc f94b 	bl	80101e0 <strcmp>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d106      	bne.n	8013f5e <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013f50:	6879      	ldr	r1, [r7, #4]
 8013f52:	68b8      	ldr	r0, [r7, #8]
 8013f54:	f7ff febc 	bl	8013cd0 <activate_firmware>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	75fb      	strb	r3, [r7, #23]
 8013f5c:	e025      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "erace_web_interface.cgi") == 0){
 8013f5e:	491f      	ldr	r1, [pc, #124]	; (8013fdc <http_get_cgi_processor+0x178>)
 8013f60:	68f8      	ldr	r0, [r7, #12]
 8013f62:	f7fc f93d 	bl	80101e0 <strcmp>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d105      	bne.n	8013f78 <http_get_cgi_processor+0x114>
		spi_fs_remove_recurcuve_in("/web");
 8013f6c:	481c      	ldr	r0, [pc, #112]	; (8013fe0 <http_get_cgi_processor+0x17c>)
 8013f6e:	f017 fa0f 	bl	802b390 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013f72:	2301      	movs	r3, #1
 8013f74:	75fb      	strb	r3, [r7, #23]
 8013f76:	e018      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013f78:	491a      	ldr	r1, [pc, #104]	; (8013fe4 <http_get_cgi_processor+0x180>)
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	f7fc f930 	bl	80101e0 <strcmp>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d105      	bne.n	8013f92 <http_get_cgi_processor+0x12e>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013f86:	4818      	ldr	r0, [pc, #96]	; (8013fe8 <http_get_cgi_processor+0x184>)
 8013f88:	f017 f93a 	bl	802b200 <spi_fs_remove>
		ret = HTTP_OK;
 8013f8c:	2301      	movs	r3, #1
 8013f8e:	75fb      	strb	r3, [r7, #23]
 8013f90:	e00b      	b.n	8013faa <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013f92:	4916      	ldr	r1, [pc, #88]	; (8013fec <http_get_cgi_processor+0x188>)
 8013f94:	68f8      	ldr	r0, [r7, #12]
 8013f96:	f7fc f923 	bl	80101e0 <strcmp>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d104      	bne.n	8013faa <http_get_cgi_processor+0x146>
		spi_fs_remove_recurcuve_in("/");
 8013fa0:	4813      	ldr	r0, [pc, #76]	; (8013ff0 <http_get_cgi_processor+0x18c>)
 8013fa2:	f017 f9f5 	bl	802b390 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013fa6:	2301      	movs	r3, #1
 8013fa8:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	3718      	adds	r7, #24
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	bd80      	pop	{r7, pc}
 8013fb4:	08032cf0 	.word	0x08032cf0
 8013fb8:	08032d04 	.word	0x08032d04
 8013fbc:	08032d10 	.word	0x08032d10
 8013fc0:	08032d14 	.word	0x08032d14
 8013fc4:	08032d20 	.word	0x08032d20
 8013fc8:	08032d34 	.word	0x08032d34
 8013fcc:	08032d40 	.word	0x08032d40
 8013fd0:	08032c54 	.word	0x08032c54
 8013fd4:	08032c48 	.word	0x08032c48
 8013fd8:	08032d58 	.word	0x08032d58
 8013fdc:	08032d70 	.word	0x08032d70
 8013fe0:	08032d88 	.word	0x08032d88
 8013fe4:	08032d90 	.word	0x08032d90
 8013fe8:	08032da4 	.word	0x08032da4
 8013fec:	08032db8 	.word	0x08032db8
 8013ff0:	08032dcc 	.word	0x08032dcc

08013ff4 <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8013ff4:	b480      	push	{r7}
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	bf00      	nop
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014000:	4770      	bx	lr
	...

08014004 <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8014004:	b480      	push	{r7}
 8014006:	b083      	sub	sp, #12
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d002      	beq.n	801401a <init_mqtt_call_mutex+0x16>
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	4a07      	ldr	r2, [pc, #28]	; (8014034 <init_mqtt_call_mutex+0x30>)
 8014018:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d002      	beq.n	8014026 <init_mqtt_call_mutex+0x22>
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	4a05      	ldr	r2, [pc, #20]	; (8014038 <init_mqtt_call_mutex+0x34>)
 8014024:	6013      	str	r3, [r2, #0]
}
 8014026:	bf00      	nop
 8014028:	370c      	adds	r7, #12
 801402a:	46bd      	mov	sp, r7
 801402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014030:	4770      	bx	lr
 8014032:	bf00      	nop
 8014034:	2000005c 	.word	0x2000005c
 8014038:	20000060 	.word	0x20000060

0801403c <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 801403c:	b5b0      	push	{r4, r5, r7, lr}
 801403e:	b088      	sub	sp, #32
 8014040:	af04      	add	r7, sp, #16
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	607a      	str	r2, [r7, #4]
 8014048:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 801404a:	4a5e      	ldr	r2, [pc, #376]	; (80141c4 <mqtt_client_init+0x188>)
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8014050:	4a5d      	ldr	r2, [pc, #372]	; (80141c8 <mqtt_client_init+0x18c>)
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8014056:	4a5d      	ldr	r2, [pc, #372]	; (80141cc <mqtt_client_init+0x190>)
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 801405c:	4a5c      	ldr	r2, [pc, #368]	; (80141d0 <mqtt_client_init+0x194>)
 801405e:	6a3b      	ldr	r3, [r7, #32]
 8014060:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 8014062:	4a5c      	ldr	r2, [pc, #368]	; (80141d4 <mqtt_client_init+0x198>)
 8014064:	887b      	ldrh	r3, [r7, #2]
 8014066:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8014068:	4a5b      	ldr	r2, [pc, #364]	; (80141d8 <mqtt_client_init+0x19c>)
 801406a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801406c:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 801406e:	4b55      	ldr	r3, [pc, #340]	; (80141c4 <mqtt_client_init+0x188>)
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	78db      	ldrb	r3, [r3, #3]
 8014074:	461c      	mov	r4, r3
 8014076:	4b53      	ldr	r3, [pc, #332]	; (80141c4 <mqtt_client_init+0x188>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	791b      	ldrb	r3, [r3, #4]
 801407c:	461d      	mov	r5, r3
 801407e:	4b51      	ldr	r3, [pc, #324]	; (80141c4 <mqtt_client_init+0x188>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	795b      	ldrb	r3, [r3, #5]
 8014084:	461a      	mov	r2, r3
 8014086:	4b4f      	ldr	r3, [pc, #316]	; (80141c4 <mqtt_client_init+0x188>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	799b      	ldrb	r3, [r3, #6]
 801408c:	4619      	mov	r1, r3
 801408e:	4b4d      	ldr	r3, [pc, #308]	; (80141c4 <mqtt_client_init+0x188>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	79db      	ldrb	r3, [r3, #7]
 8014094:	4618      	mov	r0, r3
 8014096:	4b4b      	ldr	r3, [pc, #300]	; (80141c4 <mqtt_client_init+0x188>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	7a1b      	ldrb	r3, [r3, #8]
 801409c:	9303      	str	r3, [sp, #12]
 801409e:	9002      	str	r0, [sp, #8]
 80140a0:	9101      	str	r1, [sp, #4]
 80140a2:	9200      	str	r2, [sp, #0]
 80140a4:	462b      	mov	r3, r5
 80140a6:	4622      	mov	r2, r4
 80140a8:	494c      	ldr	r1, [pc, #304]	; (80141dc <mqtt_client_init+0x1a0>)
 80140aa:	484d      	ldr	r0, [pc, #308]	; (80141e0 <mqtt_client_init+0x1a4>)
 80140ac:	f019 fbce 	bl	802d84c <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 80140b0:	484b      	ldr	r0, [pc, #300]	; (80141e0 <mqtt_client_init+0x1a4>)
 80140b2:	f000 fa91 	bl	80145d8 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 80140b6:	4b43      	ldr	r3, [pc, #268]	; (80141c4 <mqtt_client_init+0x188>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	7a5b      	ldrb	r3, [r3, #9]
 80140bc:	4619      	mov	r1, r3
 80140be:	4b41      	ldr	r3, [pc, #260]	; (80141c4 <mqtt_client_init+0x188>)
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	7a9b      	ldrb	r3, [r3, #10]
 80140c4:	4618      	mov	r0, r3
 80140c6:	4b3f      	ldr	r3, [pc, #252]	; (80141c4 <mqtt_client_init+0x188>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	7adb      	ldrb	r3, [r3, #11]
 80140cc:	461a      	mov	r2, r3
 80140ce:	4b3d      	ldr	r3, [pc, #244]	; (80141c4 <mqtt_client_init+0x188>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	7b1b      	ldrb	r3, [r3, #12]
 80140d4:	9301      	str	r3, [sp, #4]
 80140d6:	9200      	str	r2, [sp, #0]
 80140d8:	4603      	mov	r3, r0
 80140da:	460a      	mov	r2, r1
 80140dc:	4941      	ldr	r1, [pc, #260]	; (80141e4 <mqtt_client_init+0x1a8>)
 80140de:	4842      	ldr	r0, [pc, #264]	; (80141e8 <mqtt_client_init+0x1ac>)
 80140e0:	f019 fbb4 	bl	802d84c <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 80140e4:	4840      	ldr	r0, [pc, #256]	; (80141e8 <mqtt_client_init+0x1ac>)
 80140e6:	f000 fa99 	bl	801461c <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 80140ea:	4b37      	ldr	r3, [pc, #220]	; (80141c8 <mqtt_client_init+0x18c>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	3302      	adds	r3, #2
 80140f0:	4618      	mov	r0, r3
 80140f2:	f008 fda9 	bl	801cc48 <isValidIPv4>
 80140f6:	4603      	mov	r3, r0
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d00c      	beq.n	8014116 <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 80140fc:	4b32      	ldr	r3, [pc, #200]	; (80141c8 <mqtt_client_init+0x18c>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	1c98      	adds	r0, r3, #2
 8014102:	4b3a      	ldr	r3, [pc, #232]	; (80141ec <mqtt_client_init+0x1b0>)
 8014104:	9301      	str	r3, [sp, #4]
 8014106:	4b3a      	ldr	r3, [pc, #232]	; (80141f0 <mqtt_client_init+0x1b4>)
 8014108:	9300      	str	r3, [sp, #0]
 801410a:	4b3a      	ldr	r3, [pc, #232]	; (80141f4 <mqtt_client_init+0x1b8>)
 801410c:	4a3a      	ldr	r2, [pc, #232]	; (80141f8 <mqtt_client_init+0x1bc>)
 801410e:	493b      	ldr	r1, [pc, #236]	; (80141fc <mqtt_client_init+0x1c0>)
 8014110:	f019 fbbc 	bl	802d88c <siscanf>
 8014114:	e00d      	b.n	8014132 <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 8014116:	4b2c      	ldr	r3, [pc, #176]	; (80141c8 <mqtt_client_init+0x18c>)
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	3302      	adds	r3, #2
 801411c:	4936      	ldr	r1, [pc, #216]	; (80141f8 <mqtt_client_init+0x1bc>)
 801411e:	4618      	mov	r0, r3
 8014120:	f008 fd62 	bl	801cbe8 <dns_service_resolve_name>
 8014124:	4603      	mov	r3, r0
 8014126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801412a:	d102      	bne.n	8014132 <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 801412c:	f04f 33ff 	mov.w	r3, #4294967295
 8014130:	e043      	b.n	80141ba <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 8014132:	4b33      	ldr	r3, [pc, #204]	; (8014200 <mqtt_client_init+0x1c4>)
 8014134:	2200      	movs	r2, #0
 8014136:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 8014138:	4b31      	ldr	r3, [pc, #196]	; (8014200 <mqtt_client_init+0x1c4>)
 801413a:	2203      	movs	r2, #3
 801413c:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 801413e:	4b30      	ldr	r3, [pc, #192]	; (8014200 <mqtt_client_init+0x1c4>)
 8014140:	4a27      	ldr	r2, [pc, #156]	; (80141e0 <mqtt_client_init+0x1a4>)
 8014142:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8014144:	4b2e      	ldr	r3, [pc, #184]	; (8014200 <mqtt_client_init+0x1c4>)
 8014146:	f241 3288 	movw	r2, #5000	; 0x1388
 801414a:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 801414c:	4b2c      	ldr	r3, [pc, #176]	; (8014200 <mqtt_client_init+0x1c4>)
 801414e:	2201      	movs	r2, #1
 8014150:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 8014152:	4b1d      	ldr	r3, [pc, #116]	; (80141c8 <mqtt_client_init+0x18c>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	3384      	adds	r3, #132	; 0x84
 8014158:	4a29      	ldr	r2, [pc, #164]	; (8014200 <mqtt_client_init+0x1c4>)
 801415a:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 801415c:	4b1a      	ldr	r3, [pc, #104]	; (80141c8 <mqtt_client_init+0x18c>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	33a5      	adds	r3, #165	; 0xa5
 8014162:	4a27      	ldr	r2, [pc, #156]	; (8014200 <mqtt_client_init+0x1c4>)
 8014164:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 8014166:	4b18      	ldr	r3, [pc, #96]	; (80141c8 <mqtt_client_init+0x18c>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 801416e:	4b25      	ldr	r3, [pc, #148]	; (8014204 <mqtt_client_init+0x1c8>)
 8014170:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 8014172:	4b25      	ldr	r3, [pc, #148]	; (8014208 <mqtt_client_init+0x1cc>)
 8014174:	2200      	movs	r2, #0
 8014176:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8014178:	4b23      	ldr	r3, [pc, #140]	; (8014208 <mqtt_client_init+0x1cc>)
 801417a:	2200      	movs	r2, #0
 801417c:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 801417e:	4b22      	ldr	r3, [pc, #136]	; (8014208 <mqtt_client_init+0x1cc>)
 8014180:	2200      	movs	r2, #0
 8014182:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 8014184:	4b20      	ldr	r3, [pc, #128]	; (8014208 <mqtt_client_init+0x1cc>)
 8014186:	2200      	movs	r2, #0
 8014188:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 801418a:	2105      	movs	r1, #5
 801418c:	481f      	ldr	r0, [pc, #124]	; (801420c <mqtt_client_init+0x1d0>)
 801418e:	f009 fb41 	bl	801d814 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 8014192:	4b0e      	ldr	r3, [pc, #56]	; (80141cc <mqtt_client_init+0x190>)
 8014194:	681a      	ldr	r2, [r3, #0]
 8014196:	4b0f      	ldr	r3, [pc, #60]	; (80141d4 <mqtt_client_init+0x198>)
 8014198:	881b      	ldrh	r3, [r3, #0]
 801419a:	4618      	mov	r0, r3
 801419c:	4b0c      	ldr	r3, [pc, #48]	; (80141d0 <mqtt_client_init+0x194>)
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	490d      	ldr	r1, [pc, #52]	; (80141d8 <mqtt_client_init+0x19c>)
 80141a2:	8809      	ldrh	r1, [r1, #0]
 80141a4:	9102      	str	r1, [sp, #8]
 80141a6:	9301      	str	r3, [sp, #4]
 80141a8:	9000      	str	r0, [sp, #0]
 80141aa:	4613      	mov	r3, r2
 80141ac:	f242 7210 	movw	r2, #10000	; 0x2710
 80141b0:	4916      	ldr	r1, [pc, #88]	; (801420c <mqtt_client_init+0x1d0>)
 80141b2:	4817      	ldr	r0, [pc, #92]	; (8014210 <mqtt_client_init+0x1d4>)
 80141b4:	f008 fe32 	bl	801ce1c <MQTTClientInit>

	return 0;
 80141b8:	2300      	movs	r3, #0
}
 80141ba:	4618      	mov	r0, r3
 80141bc:	3710      	adds	r7, #16
 80141be:	46bd      	mov	sp, r7
 80141c0:	bdb0      	pop	{r4, r5, r7, pc}
 80141c2:	bf00      	nop
 80141c4:	2000052c 	.word	0x2000052c
 80141c8:	20000528 	.word	0x20000528
 80141cc:	20000558 	.word	0x20000558
 80141d0:	20000554 	.word	0x20000554
 80141d4:	20000836 	.word	0x20000836
 80141d8:	20000834 	.word	0x20000834
 80141dc:	08032dd0 	.word	0x08032dd0
 80141e0:	20000530 	.word	0x20000530
 80141e4:	08032dec 	.word	0x08032dec
 80141e8:	20000540 	.word	0x20000540
 80141ec:	2000083b 	.word	0x2000083b
 80141f0:	2000083a 	.word	0x2000083a
 80141f4:	20000839 	.word	0x20000839
 80141f8:	20000838 	.word	0x20000838
 80141fc:	08032df8 	.word	0x08032df8
 8014200:	20000004 	.word	0x20000004
 8014204:	2000083c 	.word	0x2000083c
 8014208:	200008ac 	.word	0x200008ac
 801420c:	20000840 	.word	0x20000840
 8014210:	20000850 	.word	0x20000850

08014214 <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 801421a:	4b1f      	ldr	r3, [pc, #124]	; (8014298 <mqtt_client_connect+0x84>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 8014220:	4b1e      	ldr	r3, [pc, #120]	; (801429c <mqtt_client_connect+0x88>)
 8014222:	881b      	ldrh	r3, [r3, #0]
 8014224:	461a      	mov	r2, r3
 8014226:	491e      	ldr	r1, [pc, #120]	; (80142a0 <mqtt_client_connect+0x8c>)
 8014228:	481e      	ldr	r0, [pc, #120]	; (80142a4 <mqtt_client_connect+0x90>)
 801422a:	f009 fb70 	bl	801d90e <ConnectNetwork>
 801422e:	4603      	mov	r3, r0
 8014230:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8014232:	4b1d      	ldr	r3, [pc, #116]	; (80142a8 <mqtt_client_connect+0x94>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	4798      	blx	r3
	if (result != 1) {
 8014238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d010      	beq.n	8014262 <mqtt_client_connect+0x4e>
		set_mutex();
 8014240:	4b15      	ldr	r3, [pc, #84]	; (8014298 <mqtt_client_connect+0x84>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 8014246:	4b17      	ldr	r3, [pc, #92]	; (80142a4 <mqtt_client_connect+0x90>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	b2db      	uxtb	r3, r3
 801424c:	4618      	mov	r0, r3
 801424e:	f004 ff4b 	bl	80190e8 <close>
		release_mutex();
 8014252:	4b15      	ldr	r3, [pc, #84]	; (80142a8 <mqtt_client_connect+0x94>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8014258:	88fb      	ldrh	r3, [r7, #6]
 801425a:	3b0a      	subs	r3, #10
 801425c:	b29b      	uxth	r3, r3
 801425e:	b21b      	sxth	r3, r3
 8014260:	e016      	b.n	8014290 <mqtt_client_connect+0x7c>
	}
	set_mutex();
 8014262:	4b0d      	ldr	r3, [pc, #52]	; (8014298 <mqtt_client_connect+0x84>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8014268:	4910      	ldr	r1, [pc, #64]	; (80142ac <mqtt_client_connect+0x98>)
 801426a:	4811      	ldr	r0, [pc, #68]	; (80142b0 <mqtt_client_connect+0x9c>)
 801426c:	f009 f8e6 	bl	801d43c <MQTTConnect>
 8014270:	4603      	mov	r3, r0
 8014272:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8014274:	4b0c      	ldr	r3, [pc, #48]	; (80142a8 <mqtt_client_connect+0x94>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 801427a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d004      	beq.n	801428c <mqtt_client_connect+0x78>
 8014282:	88fb      	ldrh	r3, [r7, #6]
 8014284:	3b14      	subs	r3, #20
 8014286:	b29b      	uxth	r3, r3
 8014288:	b21b      	sxth	r3, r3
 801428a:	e001      	b.n	8014290 <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 801428c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014290:	4618      	mov	r0, r3
 8014292:	3708      	adds	r7, #8
 8014294:	46bd      	mov	sp, r7
 8014296:	bd80      	pop	{r7, pc}
 8014298:	2000005c 	.word	0x2000005c
 801429c:	2000083c 	.word	0x2000083c
 80142a0:	20000838 	.word	0x20000838
 80142a4:	20000840 	.word	0x20000840
 80142a8:	20000060 	.word	0x20000060
 80142ac:	20000004 	.word	0x20000004
 80142b0:	20000850 	.word	0x20000850

080142b4 <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80142ba:	2280      	movs	r2, #128	; 0x80
 80142bc:	2100      	movs	r1, #0
 80142be:	48a0      	ldr	r0, [pc, #640]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142c0:	f019 fc14 	bl	802daec <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 80142c4:	2200      	movs	r2, #0
 80142c6:	2103      	movs	r1, #3
 80142c8:	489d      	ldr	r0, [pc, #628]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142ca:	f000 f9c7 	bl	801465c <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 80142ce:	2200      	movs	r2, #0
 80142d0:	2103      	movs	r1, #3
 80142d2:	489c      	ldr	r0, [pc, #624]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142d4:	f000 fa74 	bl	80147c0 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80142d8:	489a      	ldr	r0, [pc, #616]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142da:	f7fb ffe1 	bl	80102a0 <strlen>
 80142de:	4603      	mov	r3, r0
 80142e0:	4a99      	ldr	r2, [pc, #612]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142e2:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80142e4:	4b98      	ldr	r3, [pc, #608]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142e6:	4a97      	ldr	r2, [pc, #604]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142e8:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80142ea:	4b97      	ldr	r3, [pc, #604]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142ec:	2201      	movs	r2, #1
 80142ee:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80142f0:	4b96      	ldr	r3, [pc, #600]	; (801454c <mqtt_client_reg_dev_on_home_assist+0x298>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80142f6:	4a94      	ldr	r2, [pc, #592]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142f8:	4991      	ldr	r1, [pc, #580]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142fa:	4895      	ldr	r0, [pc, #596]	; (8014550 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80142fc:	f009 f924 	bl	801d548 <MQTTPublish>
 8014300:	4603      	mov	r3, r0
 8014302:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014304:	4b93      	ldr	r3, [pc, #588]	; (8014554 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801430a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d002      	beq.n	8014318 <mqtt_client_reg_dev_on_home_assist+0x64>
 8014312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014316:	e10f      	b.n	8014538 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014318:	4b8b      	ldr	r3, [pc, #556]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801431a:	889b      	ldrh	r3, [r3, #4]
 801431c:	3301      	adds	r3, #1
 801431e:	b29a      	uxth	r2, r3
 8014320:	4b89      	ldr	r3, [pc, #548]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014322:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014324:	2280      	movs	r2, #128	; 0x80
 8014326:	2100      	movs	r1, #0
 8014328:	4885      	ldr	r0, [pc, #532]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801432a:	f019 fbdf 	bl	802daec <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 801432e:	2200      	movs	r2, #0
 8014330:	2105      	movs	r1, #5
 8014332:	4883      	ldr	r0, [pc, #524]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014334:	f000 f992 	bl	801465c <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 8014338:	2200      	movs	r2, #0
 801433a:	2105      	movs	r1, #5
 801433c:	4881      	ldr	r0, [pc, #516]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801433e:	f000 fa3f 	bl	80147c0 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014342:	4880      	ldr	r0, [pc, #512]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014344:	f7fb ffac 	bl	80102a0 <strlen>
 8014348:	4603      	mov	r3, r0
 801434a:	4a7f      	ldr	r2, [pc, #508]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801434c:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 801434e:	4b7e      	ldr	r3, [pc, #504]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014350:	4a7c      	ldr	r2, [pc, #496]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014352:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014354:	4b7c      	ldr	r3, [pc, #496]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014356:	2201      	movs	r2, #1
 8014358:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801435a:	4b7c      	ldr	r3, [pc, #496]	; (801454c <mqtt_client_reg_dev_on_home_assist+0x298>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014360:	4a79      	ldr	r2, [pc, #484]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014362:	4977      	ldr	r1, [pc, #476]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014364:	487a      	ldr	r0, [pc, #488]	; (8014550 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014366:	f009 f8ef 	bl	801d548 <MQTTPublish>
 801436a:	4603      	mov	r3, r0
 801436c:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801436e:	4b79      	ldr	r3, [pc, #484]	; (8014554 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d002      	beq.n	8014382 <mqtt_client_reg_dev_on_home_assist+0xce>
 801437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014380:	e0da      	b.n	8014538 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014382:	4b71      	ldr	r3, [pc, #452]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014384:	889b      	ldrh	r3, [r3, #4]
 8014386:	3301      	adds	r3, #1
 8014388:	b29a      	uxth	r2, r3
 801438a:	4b6f      	ldr	r3, [pc, #444]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801438c:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801438e:	2280      	movs	r2, #128	; 0x80
 8014390:	2100      	movs	r1, #0
 8014392:	486b      	ldr	r0, [pc, #428]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014394:	f019 fbaa 	bl	802daec <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 8014398:	2200      	movs	r2, #0
 801439a:	2104      	movs	r1, #4
 801439c:	4868      	ldr	r0, [pc, #416]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801439e:	f000 f95d 	bl	801465c <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 80143a2:	2200      	movs	r2, #0
 80143a4:	2104      	movs	r1, #4
 80143a6:	4867      	ldr	r0, [pc, #412]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143a8:	f000 fa0a 	bl	80147c0 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80143ac:	4865      	ldr	r0, [pc, #404]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143ae:	f7fb ff77 	bl	80102a0 <strlen>
 80143b2:	4603      	mov	r3, r0
 80143b4:	4a64      	ldr	r2, [pc, #400]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143b6:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80143b8:	4b63      	ldr	r3, [pc, #396]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143ba:	4a62      	ldr	r2, [pc, #392]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143bc:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80143be:	4b62      	ldr	r3, [pc, #392]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143c0:	2201      	movs	r2, #1
 80143c2:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80143c4:	4b61      	ldr	r3, [pc, #388]	; (801454c <mqtt_client_reg_dev_on_home_assist+0x298>)
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80143ca:	4a5f      	ldr	r2, [pc, #380]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143cc:	495c      	ldr	r1, [pc, #368]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143ce:	4860      	ldr	r0, [pc, #384]	; (8014550 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80143d0:	f009 f8ba 	bl	801d548 <MQTTPublish>
 80143d4:	4603      	mov	r3, r0
 80143d6:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80143d8:	4b5e      	ldr	r3, [pc, #376]	; (8014554 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80143de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d002      	beq.n	80143ec <mqtt_client_reg_dev_on_home_assist+0x138>
 80143e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143ea:	e0a5      	b.n	8014538 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80143ec:	4b56      	ldr	r3, [pc, #344]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143ee:	889b      	ldrh	r3, [r3, #4]
 80143f0:	3301      	adds	r3, #1
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	4b54      	ldr	r3, [pc, #336]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143f6:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG APPARENT POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80143f8:	2280      	movs	r2, #128	; 0x80
 80143fa:	2100      	movs	r1, #0
 80143fc:	4850      	ldr	r0, [pc, #320]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143fe:	f019 fb75 	bl	802daec <memset>
		get_config_topik_string(buf_topik, APPARENT_POWER_SENSOR_TOPIK, 0);
 8014402:	2200      	movs	r2, #0
 8014404:	2108      	movs	r1, #8
 8014406:	484e      	ldr	r0, [pc, #312]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014408:	f000 f928 	bl	801465c <get_config_topik_string>
		get_config_payload_string(buf_payload, APPARENT_POWER_SENSOR_PAYLOAD, 0);
 801440c:	2200      	movs	r2, #0
 801440e:	2108      	movs	r1, #8
 8014410:	484c      	ldr	r0, [pc, #304]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014412:	f000 f9d5 	bl	80147c0 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014416:	484b      	ldr	r0, [pc, #300]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014418:	f7fb ff42 	bl	80102a0 <strlen>
 801441c:	4603      	mov	r3, r0
 801441e:	4a4a      	ldr	r2, [pc, #296]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014420:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014422:	4b49      	ldr	r3, [pc, #292]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014424:	4a47      	ldr	r2, [pc, #284]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014426:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014428:	4b47      	ldr	r3, [pc, #284]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801442a:	2201      	movs	r2, #1
 801442c:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801442e:	4b47      	ldr	r3, [pc, #284]	; (801454c <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014434:	4a44      	ldr	r2, [pc, #272]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014436:	4942      	ldr	r1, [pc, #264]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014438:	4845      	ldr	r0, [pc, #276]	; (8014550 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 801443a:	f009 f885 	bl	801d548 <MQTTPublish>
 801443e:	4603      	mov	r3, r0
 8014440:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014442:	4b44      	ldr	r3, [pc, #272]	; (8014554 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d002      	beq.n	8014456 <mqtt_client_reg_dev_on_home_assist+0x1a2>
 8014450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014454:	e070      	b.n	8014538 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014456:	4b3c      	ldr	r3, [pc, #240]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014458:	889b      	ldrh	r3, [r3, #4]
 801445a:	3301      	adds	r3, #1
 801445c:	b29a      	uxth	r2, r3
 801445e:	4b3a      	ldr	r3, [pc, #232]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014460:	809a      	strh	r2, [r3, #4]


//------------------------------REG APPARENT POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014462:	2280      	movs	r2, #128	; 0x80
 8014464:	2100      	movs	r1, #0
 8014466:	4836      	ldr	r0, [pc, #216]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014468:	f019 fb40 	bl	802daec <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 801446c:	2200      	movs	r2, #0
 801446e:	2106      	movs	r1, #6
 8014470:	4833      	ldr	r0, [pc, #204]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014472:	f000 f8f3 	bl	801465c <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 8014476:	2200      	movs	r2, #0
 8014478:	2106      	movs	r1, #6
 801447a:	4832      	ldr	r0, [pc, #200]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801447c:	f000 f9a0 	bl	80147c0 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014480:	4830      	ldr	r0, [pc, #192]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014482:	f7fb ff0d 	bl	80102a0 <strlen>
 8014486:	4603      	mov	r3, r0
 8014488:	4a2f      	ldr	r2, [pc, #188]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801448a:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 801448c:	4b2e      	ldr	r3, [pc, #184]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801448e:	4a2d      	ldr	r2, [pc, #180]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014490:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014492:	4b2d      	ldr	r3, [pc, #180]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014494:	2201      	movs	r2, #1
 8014496:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014498:	4b2c      	ldr	r3, [pc, #176]	; (801454c <mqtt_client_reg_dev_on_home_assist+0x298>)
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801449e:	4a2a      	ldr	r2, [pc, #168]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144a0:	4927      	ldr	r1, [pc, #156]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80144a2:	482b      	ldr	r0, [pc, #172]	; (8014550 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80144a4:	f009 f850 	bl	801d548 <MQTTPublish>
 80144a8:	4603      	mov	r3, r0
 80144aa:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80144ac:	4b29      	ldr	r3, [pc, #164]	; (8014554 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80144b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d002      	beq.n	80144c0 <mqtt_client_reg_dev_on_home_assist+0x20c>
 80144ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144be:	e03b      	b.n	8014538 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80144c0:	4b21      	ldr	r3, [pc, #132]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144c2:	889b      	ldrh	r3, [r3, #4]
 80144c4:	3301      	adds	r3, #1
 80144c6:	b29a      	uxth	r2, r3
 80144c8:	4b1f      	ldr	r3, [pc, #124]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144ca:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80144cc:	2280      	movs	r2, #128	; 0x80
 80144ce:	2100      	movs	r1, #0
 80144d0:	481b      	ldr	r0, [pc, #108]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80144d2:	f019 fb0b 	bl	802daec <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 80144d6:	2200      	movs	r2, #0
 80144d8:	2107      	movs	r1, #7
 80144da:	4819      	ldr	r0, [pc, #100]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80144dc:	f000 f8be 	bl	801465c <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 80144e0:	2200      	movs	r2, #0
 80144e2:	2107      	movs	r1, #7
 80144e4:	4817      	ldr	r0, [pc, #92]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144e6:	f000 f96b 	bl	80147c0 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80144ea:	4816      	ldr	r0, [pc, #88]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144ec:	f7fb fed8 	bl	80102a0 <strlen>
 80144f0:	4603      	mov	r3, r0
 80144f2:	4a15      	ldr	r2, [pc, #84]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144f4:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80144f6:	4b14      	ldr	r3, [pc, #80]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144f8:	4a12      	ldr	r2, [pc, #72]	; (8014544 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144fa:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80144fc:	4b12      	ldr	r3, [pc, #72]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144fe:	2201      	movs	r2, #1
 8014500:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014502:	4b12      	ldr	r3, [pc, #72]	; (801454c <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014508:	4a0f      	ldr	r2, [pc, #60]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801450a:	490d      	ldr	r1, [pc, #52]	; (8014540 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801450c:	4810      	ldr	r0, [pc, #64]	; (8014550 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 801450e:	f009 f81b 	bl	801d548 <MQTTPublish>
 8014512:	4603      	mov	r3, r0
 8014514:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014516:	4b0f      	ldr	r3, [pc, #60]	; (8014554 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801451c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d002      	beq.n	801452a <mqtt_client_reg_dev_on_home_assist+0x276>
 8014524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014528:	e006      	b.n	8014538 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 801452a:	4b07      	ldr	r3, [pc, #28]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801452c:	889b      	ldrh	r3, [r3, #4]
 801452e:	3301      	adds	r3, #1
 8014530:	b29a      	uxth	r2, r3
 8014532:	4b05      	ldr	r3, [pc, #20]	; (8014548 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014534:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 8014536:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 8014538:	4618      	mov	r0, r3
 801453a:	3708      	adds	r7, #8
 801453c:	46bd      	mov	sp, r7
 801453e:	bd80      	pop	{r7, pc}
 8014540:	2000055c 	.word	0x2000055c
 8014544:	200005dc 	.word	0x200005dc
 8014548:	200008ac 	.word	0x200008ac
 801454c:	2000005c 	.word	0x2000005c
 8014550:	20000850 	.word	0x20000850
 8014554:	20000060 	.word	0x20000060

08014558 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 8014558:	b580      	push	{r7, lr}
 801455a:	b084      	sub	sp, #16
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 8014562:	6838      	ldr	r0, [r7, #0]
 8014564:	f7fb fe9c 	bl	80102a0 <strlen>
 8014568:	4603      	mov	r3, r0
 801456a:	4a0f      	ldr	r2, [pc, #60]	; (80145a8 <send_data_to_topik+0x50>)
 801456c:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 801456e:	4a0e      	ldr	r2, [pc, #56]	; (80145a8 <send_data_to_topik+0x50>)
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 8014574:	4b0c      	ldr	r3, [pc, #48]	; (80145a8 <send_data_to_topik+0x50>)
 8014576:	889b      	ldrh	r3, [r3, #4]
 8014578:	3301      	adds	r3, #1
 801457a:	b29a      	uxth	r2, r3
 801457c:	4b0a      	ldr	r3, [pc, #40]	; (80145a8 <send_data_to_topik+0x50>)
 801457e:	809a      	strh	r2, [r3, #4]
	set_mutex();
 8014580:	4b0a      	ldr	r3, [pc, #40]	; (80145ac <send_data_to_topik+0x54>)
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 8014586:	4a08      	ldr	r2, [pc, #32]	; (80145a8 <send_data_to_topik+0x50>)
 8014588:	6879      	ldr	r1, [r7, #4]
 801458a:	4809      	ldr	r0, [pc, #36]	; (80145b0 <send_data_to_topik+0x58>)
 801458c:	f008 ffdc 	bl	801d548 <MQTTPublish>
 8014590:	4603      	mov	r3, r0
 8014592:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 8014594:	4b07      	ldr	r3, [pc, #28]	; (80145b4 <send_data_to_topik+0x5c>)
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 801459a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3710      	adds	r7, #16
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
 80145a6:	bf00      	nop
 80145a8:	200008ac 	.word	0x200008ac
 80145ac:	2000005c 	.word	0x2000005c
 80145b0:	20000850 	.word	0x20000850
 80145b4:	20000060 	.word	0x20000060

080145b8 <mqtt_1ms_tik>:
	release_mutex();

	return result;
}

void mqtt_1ms_tik(void){
 80145b8:	b580      	push	{r7, lr}
 80145ba:	af00      	add	r7, sp, #0
	MilliTimer_Handler();
 80145bc:	f009 f8b6 	bl	801d72c <MilliTimer_Handler>
}
 80145c0:	bf00      	nop
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <mqtt_disconnect>:
		//xQueueOverwrite(coil_q_write, (void *)&CoilStatus_new);
		write_coils(CoilStatus_new);
	}
}

void mqtt_disconnect(void){
 80145c4:	b580      	push	{r7, lr}
 80145c6:	af00      	add	r7, sp, #0

	MQTTDisconnect(&MQTT_Client);
 80145c8:	4802      	ldr	r0, [pc, #8]	; (80145d4 <mqtt_disconnect+0x10>)
 80145ca:	f009 f87c 	bl	801d6c6 <MQTTDisconnect>

}
 80145ce:	bf00      	nop
 80145d0:	bd80      	pop	{r7, pc}
 80145d2:	bf00      	nop
 80145d4:	20000850 	.word	0x20000850

080145d8 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 80145d8:	b580      	push	{r7, lr}
 80145da:	b084      	sub	sp, #16
 80145dc:	af00      	add	r7, sp, #0
 80145de:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 80145e0:	2300      	movs	r3, #0
 80145e2:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 80145e4:	6878      	ldr	r0, [r7, #4]
 80145e6:	f7fb fe5b 	bl	80102a0 <strlen>
 80145ea:	4603      	mov	r3, r0
 80145ec:	2b0d      	cmp	r3, #13
 80145ee:	d902      	bls.n	80145f6 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 80145f0:	230e      	movs	r3, #14
 80145f2:	73fb      	strb	r3, [r7, #15]
 80145f4:	e004      	b.n	8014600 <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7fb fe52 	bl	80102a0 <strlen>
 80145fc:	4603      	mov	r3, r0
 80145fe:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 8014600:	7bfb      	ldrb	r3, [r7, #15]
 8014602:	461a      	mov	r2, r3
 8014604:	6879      	ldr	r1, [r7, #4]
 8014606:	4804      	ldr	r0, [pc, #16]	; (8014618 <set_device_id+0x40>)
 8014608:	f019 faca 	bl	802dba0 <strncpy>
	return 0;
 801460c:	2300      	movs	r3, #0
}
 801460e:	4618      	mov	r0, r3
 8014610:	3710      	adds	r7, #16
 8014612:	46bd      	mov	sp, r7
 8014614:	bd80      	pop	{r7, pc}
 8014616:	bf00      	nop
 8014618:	200008bc 	.word	0x200008bc

0801461c <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 801461c:	b580      	push	{r7, lr}
 801461e:	b082      	sub	sp, #8
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 8014624:	4b0c      	ldr	r3, [pc, #48]	; (8014658 <set_device_conf_ip+0x3c>)
 8014626:	2200      	movs	r2, #0
 8014628:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f7fb fe38 	bl	80102a0 <strlen>
 8014630:	4603      	mov	r3, r0
 8014632:	2b12      	cmp	r3, #18
 8014634:	d80a      	bhi.n	801464c <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 8014636:	6878      	ldr	r0, [r7, #4]
 8014638:	f7fb fe32 	bl	80102a0 <strlen>
 801463c:	4603      	mov	r3, r0
 801463e:	461a      	mov	r2, r3
 8014640:	6879      	ldr	r1, [r7, #4]
 8014642:	4805      	ldr	r0, [pc, #20]	; (8014658 <set_device_conf_ip+0x3c>)
 8014644:	f019 faac 	bl	802dba0 <strncpy>
		return 0;
 8014648:	2300      	movs	r3, #0
 801464a:	e001      	b.n	8014650 <set_device_conf_ip+0x34>
	}
	return -1;
 801464c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014650:	4618      	mov	r0, r3
 8014652:	3708      	adds	r7, #8
 8014654:	46bd      	mov	sp, r7
 8014656:	bd80      	pop	{r7, pc}
 8014658:	200008cc 	.word	0x200008cc

0801465c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 801465c:	b580      	push	{r7, lr}
 801465e:	b086      	sub	sp, #24
 8014660:	af04      	add	r7, sp, #16
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	460b      	mov	r3, r1
 8014666:	70fb      	strb	r3, [r7, #3]
 8014668:	4613      	mov	r3, r2
 801466a:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 801466c:	2100      	movs	r1, #0
 801466e:	6878      	ldr	r0, [r7, #4]
 8014670:	f019 fc09 	bl	802de86 <strcpy>
	switch (topik_type) {
 8014674:	78fb      	ldrb	r3, [r7, #3]
 8014676:	3b01      	subs	r3, #1
 8014678:	2b07      	cmp	r3, #7
 801467a:	d87b      	bhi.n	8014774 <get_config_topik_string+0x118>
 801467c:	a201      	add	r2, pc, #4	; (adr r2, 8014684 <get_config_topik_string+0x28>)
 801467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014682:	bf00      	nop
 8014684:	080146a5 	.word	0x080146a5
 8014688:	080146bf 	.word	0x080146bf
 801468c:	080146d9 	.word	0x080146d9
 8014690:	0801470d 	.word	0x0801470d
 8014694:	080146f3 	.word	0x080146f3
 8014698:	08014741 	.word	0x08014741
 801469c:	0801475b 	.word	0x0801475b
 80146a0:	08014727 	.word	0x08014727
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 80146a4:	78bb      	ldrb	r3, [r7, #2]
 80146a6:	9302      	str	r3, [sp, #8]
 80146a8:	4b36      	ldr	r3, [pc, #216]	; (8014784 <get_config_topik_string+0x128>)
 80146aa:	9301      	str	r3, [sp, #4]
 80146ac:	4b36      	ldr	r3, [pc, #216]	; (8014788 <get_config_topik_string+0x12c>)
 80146ae:	9300      	str	r3, [sp, #0]
 80146b0:	4b36      	ldr	r3, [pc, #216]	; (801478c <get_config_topik_string+0x130>)
 80146b2:	4a37      	ldr	r2, [pc, #220]	; (8014790 <get_config_topik_string+0x134>)
 80146b4:	4937      	ldr	r1, [pc, #220]	; (8014794 <get_config_topik_string+0x138>)
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f019 f8c8 	bl	802d84c <siprintf>
			break;
 80146bc:	e05d      	b.n	801477a <get_config_topik_string+0x11e>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 80146be:	78bb      	ldrb	r3, [r7, #2]
 80146c0:	9302      	str	r3, [sp, #8]
 80146c2:	4b35      	ldr	r3, [pc, #212]	; (8014798 <get_config_topik_string+0x13c>)
 80146c4:	9301      	str	r3, [sp, #4]
 80146c6:	4b30      	ldr	r3, [pc, #192]	; (8014788 <get_config_topik_string+0x12c>)
 80146c8:	9300      	str	r3, [sp, #0]
 80146ca:	4b33      	ldr	r3, [pc, #204]	; (8014798 <get_config_topik_string+0x13c>)
 80146cc:	4a30      	ldr	r2, [pc, #192]	; (8014790 <get_config_topik_string+0x134>)
 80146ce:	4931      	ldr	r1, [pc, #196]	; (8014794 <get_config_topik_string+0x138>)
 80146d0:	6878      	ldr	r0, [r7, #4]
 80146d2:	f019 f8bb 	bl	802d84c <siprintf>
			break;
 80146d6:	e050      	b.n	801477a <get_config_topik_string+0x11e>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 80146d8:	4b30      	ldr	r3, [pc, #192]	; (801479c <get_config_topik_string+0x140>)
 80146da:	9302      	str	r3, [sp, #8]
 80146dc:	4b2a      	ldr	r3, [pc, #168]	; (8014788 <get_config_topik_string+0x12c>)
 80146de:	9301      	str	r3, [sp, #4]
 80146e0:	4b2f      	ldr	r3, [pc, #188]	; (80147a0 <get_config_topik_string+0x144>)
 80146e2:	9300      	str	r3, [sp, #0]
 80146e4:	4b2f      	ldr	r3, [pc, #188]	; (80147a4 <get_config_topik_string+0x148>)
 80146e6:	4a2a      	ldr	r2, [pc, #168]	; (8014790 <get_config_topik_string+0x134>)
 80146e8:	492f      	ldr	r1, [pc, #188]	; (80147a8 <get_config_topik_string+0x14c>)
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f019 f8ae 	bl	802d84c <siprintf>
			break;
 80146f0:	e043      	b.n	801477a <get_config_topik_string+0x11e>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 80146f2:	4b2e      	ldr	r3, [pc, #184]	; (80147ac <get_config_topik_string+0x150>)
 80146f4:	9302      	str	r3, [sp, #8]
 80146f6:	4b24      	ldr	r3, [pc, #144]	; (8014788 <get_config_topik_string+0x12c>)
 80146f8:	9301      	str	r3, [sp, #4]
 80146fa:	4b29      	ldr	r3, [pc, #164]	; (80147a0 <get_config_topik_string+0x144>)
 80146fc:	9300      	str	r3, [sp, #0]
 80146fe:	4b29      	ldr	r3, [pc, #164]	; (80147a4 <get_config_topik_string+0x148>)
 8014700:	4a23      	ldr	r2, [pc, #140]	; (8014790 <get_config_topik_string+0x134>)
 8014702:	4929      	ldr	r1, [pc, #164]	; (80147a8 <get_config_topik_string+0x14c>)
 8014704:	6878      	ldr	r0, [r7, #4]
 8014706:	f019 f8a1 	bl	802d84c <siprintf>
			break;
 801470a:	e036      	b.n	801477a <get_config_topik_string+0x11e>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 801470c:	4b28      	ldr	r3, [pc, #160]	; (80147b0 <get_config_topik_string+0x154>)
 801470e:	9302      	str	r3, [sp, #8]
 8014710:	4b1d      	ldr	r3, [pc, #116]	; (8014788 <get_config_topik_string+0x12c>)
 8014712:	9301      	str	r3, [sp, #4]
 8014714:	4b22      	ldr	r3, [pc, #136]	; (80147a0 <get_config_topik_string+0x144>)
 8014716:	9300      	str	r3, [sp, #0]
 8014718:	4b22      	ldr	r3, [pc, #136]	; (80147a4 <get_config_topik_string+0x148>)
 801471a:	4a1d      	ldr	r2, [pc, #116]	; (8014790 <get_config_topik_string+0x134>)
 801471c:	4922      	ldr	r1, [pc, #136]	; (80147a8 <get_config_topik_string+0x14c>)
 801471e:	6878      	ldr	r0, [r7, #4]
 8014720:	f019 f894 	bl	802d84c <siprintf>
			break;
 8014724:	e029      	b.n	801477a <get_config_topik_string+0x11e>
		case APPARENT_POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power);
 8014726:	4b23      	ldr	r3, [pc, #140]	; (80147b4 <get_config_topik_string+0x158>)
 8014728:	9302      	str	r3, [sp, #8]
 801472a:	4b17      	ldr	r3, [pc, #92]	; (8014788 <get_config_topik_string+0x12c>)
 801472c:	9301      	str	r3, [sp, #4]
 801472e:	4b1c      	ldr	r3, [pc, #112]	; (80147a0 <get_config_topik_string+0x144>)
 8014730:	9300      	str	r3, [sp, #0]
 8014732:	4b1c      	ldr	r3, [pc, #112]	; (80147a4 <get_config_topik_string+0x148>)
 8014734:	4a16      	ldr	r2, [pc, #88]	; (8014790 <get_config_topik_string+0x134>)
 8014736:	491c      	ldr	r1, [pc, #112]	; (80147a8 <get_config_topik_string+0x14c>)
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f019 f887 	bl	802d84c <siprintf>
			break;
 801473e:	e01c      	b.n	801477a <get_config_topik_string+0x11e>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 8014740:	4b1d      	ldr	r3, [pc, #116]	; (80147b8 <get_config_topik_string+0x15c>)
 8014742:	9302      	str	r3, [sp, #8]
 8014744:	4b10      	ldr	r3, [pc, #64]	; (8014788 <get_config_topik_string+0x12c>)
 8014746:	9301      	str	r3, [sp, #4]
 8014748:	4b15      	ldr	r3, [pc, #84]	; (80147a0 <get_config_topik_string+0x144>)
 801474a:	9300      	str	r3, [sp, #0]
 801474c:	4b15      	ldr	r3, [pc, #84]	; (80147a4 <get_config_topik_string+0x148>)
 801474e:	4a10      	ldr	r2, [pc, #64]	; (8014790 <get_config_topik_string+0x134>)
 8014750:	4915      	ldr	r1, [pc, #84]	; (80147a8 <get_config_topik_string+0x14c>)
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f019 f87a 	bl	802d84c <siprintf>
			break;
 8014758:	e00f      	b.n	801477a <get_config_topik_string+0x11e>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 801475a:	4b18      	ldr	r3, [pc, #96]	; (80147bc <get_config_topik_string+0x160>)
 801475c:	9302      	str	r3, [sp, #8]
 801475e:	4b0a      	ldr	r3, [pc, #40]	; (8014788 <get_config_topik_string+0x12c>)
 8014760:	9301      	str	r3, [sp, #4]
 8014762:	4b0f      	ldr	r3, [pc, #60]	; (80147a0 <get_config_topik_string+0x144>)
 8014764:	9300      	str	r3, [sp, #0]
 8014766:	4b0f      	ldr	r3, [pc, #60]	; (80147a4 <get_config_topik_string+0x148>)
 8014768:	4a09      	ldr	r2, [pc, #36]	; (8014790 <get_config_topik_string+0x134>)
 801476a:	490f      	ldr	r1, [pc, #60]	; (80147a8 <get_config_topik_string+0x14c>)
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f019 f86d 	bl	802d84c <siprintf>
			break;
 8014772:	e002      	b.n	801477a <get_config_topik_string+0x11e>
		default:
			return -1;
 8014774:	f04f 33ff 	mov.w	r3, #4294967295
 8014778:	e000      	b.n	801477c <get_config_topik_string+0x120>
			break;
	}


	return 0;
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	3708      	adds	r7, #8
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}
 8014784:	2000008c 	.word	0x2000008c
 8014788:	200008bc 	.word	0x200008bc
 801478c:	20000074 	.word	0x20000074
 8014790:	20000064 	.word	0x20000064
 8014794:	08034458 	.word	0x08034458
 8014798:	20000084 	.word	0x20000084
 801479c:	08032e34 	.word	0x08032e34
 80147a0:	08032e3c 	.word	0x08032e3c
 80147a4:	08032e14 	.word	0x08032e14
 80147a8:	08032e1c 	.word	0x08032e1c
 80147ac:	08032e44 	.word	0x08032e44
 80147b0:	08032e4c 	.word	0x08032e4c
 80147b4:	08032e54 	.word	0x08032e54
 80147b8:	08032e64 	.word	0x08032e64
 80147bc:	08032e74 	.word	0x08032e74

080147c0 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 80147c0:	b590      	push	{r4, r7, lr}
 80147c2:	b097      	sub	sp, #92	; 0x5c
 80147c4:	af12      	add	r7, sp, #72	; 0x48
 80147c6:	6078      	str	r0, [r7, #4]
 80147c8:	460b      	mov	r3, r1
 80147ca:	70fb      	strb	r3, [r7, #3]
 80147cc:	4613      	mov	r3, r2
 80147ce:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 80147d0:	2300      	movs	r3, #0
 80147d2:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2200      	movs	r2, #0
 80147d8:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 80147da:	78fb      	ldrb	r3, [r7, #3]
 80147dc:	3b01      	subs	r3, #1
 80147de:	2b07      	cmp	r3, #7
 80147e0:	f200 8181 	bhi.w	8014ae6 <get_config_payload_string+0x326>
 80147e4:	a201      	add	r2, pc, #4	; (adr r2, 80147ec <get_config_payload_string+0x2c>)
 80147e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147ea:	bf00      	nop
 80147ec:	08014841 	.word	0x08014841
 80147f0:	0801480d 	.word	0x0801480d
 80147f4:	0801486f 	.word	0x0801486f
 80147f8:	0801491b 	.word	0x0801491b
 80147fc:	080148c5 	.word	0x080148c5
 8014800:	080149c7 	.word	0x080149c7
 8014804:	08014a91 	.word	0x08014a91
 8014808:	08014971 	.word	0x08014971
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 801480c:	78bb      	ldrb	r3, [r7, #2]
 801480e:	78ba      	ldrb	r2, [r7, #2]
 8014810:	78b9      	ldrb	r1, [r7, #2]
 8014812:	78b8      	ldrb	r0, [r7, #2]
 8014814:	4c81      	ldr	r4, [pc, #516]	; (8014a1c <get_config_payload_string+0x25c>)
 8014816:	9407      	str	r4, [sp, #28]
 8014818:	4c81      	ldr	r4, [pc, #516]	; (8014a20 <get_config_payload_string+0x260>)
 801481a:	9406      	str	r4, [sp, #24]
 801481c:	4c80      	ldr	r4, [pc, #512]	; (8014a20 <get_config_payload_string+0x260>)
 801481e:	9405      	str	r4, [sp, #20]
 8014820:	9004      	str	r0, [sp, #16]
 8014822:	487f      	ldr	r0, [pc, #508]	; (8014a20 <get_config_payload_string+0x260>)
 8014824:	9003      	str	r0, [sp, #12]
 8014826:	9102      	str	r1, [sp, #8]
 8014828:	9201      	str	r2, [sp, #4]
 801482a:	9300      	str	r3, [sp, #0]
 801482c:	4b7c      	ldr	r3, [pc, #496]	; (8014a20 <get_config_payload_string+0x260>)
 801482e:	4a7c      	ldr	r2, [pc, #496]	; (8014a20 <get_config_payload_string+0x260>)
 8014830:	497c      	ldr	r1, [pc, #496]	; (8014a24 <get_config_payload_string+0x264>)
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	f019 f80a 	bl	802d84c <siprintf>
 8014838:	4603      	mov	r3, r0
 801483a:	73fb      	strb	r3, [r7, #15]
			return len;
 801483c:	7bfb      	ldrb	r3, [r7, #15]
 801483e:	e155      	b.n	8014aec <get_config_payload_string+0x32c>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014840:	78b9      	ldrb	r1, [r7, #2]
 8014842:	78bb      	ldrb	r3, [r7, #2]
 8014844:	78ba      	ldrb	r2, [r7, #2]
 8014846:	4875      	ldr	r0, [pc, #468]	; (8014a1c <get_config_payload_string+0x25c>)
 8014848:	9005      	str	r0, [sp, #20]
 801484a:	4875      	ldr	r0, [pc, #468]	; (8014a20 <get_config_payload_string+0x260>)
 801484c:	9004      	str	r0, [sp, #16]
 801484e:	4874      	ldr	r0, [pc, #464]	; (8014a20 <get_config_payload_string+0x260>)
 8014850:	9003      	str	r0, [sp, #12]
 8014852:	9202      	str	r2, [sp, #8]
 8014854:	4a72      	ldr	r2, [pc, #456]	; (8014a20 <get_config_payload_string+0x260>)
 8014856:	9201      	str	r2, [sp, #4]
 8014858:	9300      	str	r3, [sp, #0]
 801485a:	460b      	mov	r3, r1
 801485c:	4a70      	ldr	r2, [pc, #448]	; (8014a20 <get_config_payload_string+0x260>)
 801485e:	4972      	ldr	r1, [pc, #456]	; (8014a28 <get_config_payload_string+0x268>)
 8014860:	6878      	ldr	r0, [r7, #4]
 8014862:	f018 fff3 	bl	802d84c <siprintf>
 8014866:	4603      	mov	r3, r0
 8014868:	73fb      	strb	r3, [r7, #15]
			return len;
 801486a:	7bfb      	ldrb	r3, [r7, #15]
 801486c:	e13e      	b.n	8014aec <get_config_payload_string+0x32c>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 801486e:	4b6b      	ldr	r3, [pc, #428]	; (8014a1c <get_config_payload_string+0x25c>)
 8014870:	9310      	str	r3, [sp, #64]	; 0x40
 8014872:	4b6e      	ldr	r3, [pc, #440]	; (8014a2c <get_config_payload_string+0x26c>)
 8014874:	930f      	str	r3, [sp, #60]	; 0x3c
 8014876:	4b6e      	ldr	r3, [pc, #440]	; (8014a30 <get_config_payload_string+0x270>)
 8014878:	930e      	str	r3, [sp, #56]	; 0x38
 801487a:	4b6e      	ldr	r3, [pc, #440]	; (8014a34 <get_config_payload_string+0x274>)
 801487c:	930d      	str	r3, [sp, #52]	; 0x34
 801487e:	4b6e      	ldr	r3, [pc, #440]	; (8014a38 <get_config_payload_string+0x278>)
 8014880:	930c      	str	r3, [sp, #48]	; 0x30
 8014882:	4b6e      	ldr	r3, [pc, #440]	; (8014a3c <get_config_payload_string+0x27c>)
 8014884:	930b      	str	r3, [sp, #44]	; 0x2c
 8014886:	4b66      	ldr	r3, [pc, #408]	; (8014a20 <get_config_payload_string+0x260>)
 8014888:	930a      	str	r3, [sp, #40]	; 0x28
 801488a:	4b6d      	ldr	r3, [pc, #436]	; (8014a40 <get_config_payload_string+0x280>)
 801488c:	9309      	str	r3, [sp, #36]	; 0x24
 801488e:	4b6d      	ldr	r3, [pc, #436]	; (8014a44 <get_config_payload_string+0x284>)
 8014890:	9308      	str	r3, [sp, #32]
 8014892:	4b6d      	ldr	r3, [pc, #436]	; (8014a48 <get_config_payload_string+0x288>)
 8014894:	9307      	str	r3, [sp, #28]
 8014896:	4b62      	ldr	r3, [pc, #392]	; (8014a20 <get_config_payload_string+0x260>)
 8014898:	9306      	str	r3, [sp, #24]
 801489a:	4b69      	ldr	r3, [pc, #420]	; (8014a40 <get_config_payload_string+0x280>)
 801489c:	9305      	str	r3, [sp, #20]
 801489e:	4b6b      	ldr	r3, [pc, #428]	; (8014a4c <get_config_payload_string+0x28c>)
 80148a0:	9304      	str	r3, [sp, #16]
 80148a2:	4b6b      	ldr	r3, [pc, #428]	; (8014a50 <get_config_payload_string+0x290>)
 80148a4:	9303      	str	r3, [sp, #12]
 80148a6:	4b68      	ldr	r3, [pc, #416]	; (8014a48 <get_config_payload_string+0x288>)
 80148a8:	9302      	str	r3, [sp, #8]
 80148aa:	4b6a      	ldr	r3, [pc, #424]	; (8014a54 <get_config_payload_string+0x294>)
 80148ac:	9301      	str	r3, [sp, #4]
 80148ae:	4b5c      	ldr	r3, [pc, #368]	; (8014a20 <get_config_payload_string+0x260>)
 80148b0:	9300      	str	r3, [sp, #0]
 80148b2:	4b63      	ldr	r3, [pc, #396]	; (8014a40 <get_config_payload_string+0x280>)
 80148b4:	4a64      	ldr	r2, [pc, #400]	; (8014a48 <get_config_payload_string+0x288>)
 80148b6:	4968      	ldr	r1, [pc, #416]	; (8014a58 <get_config_payload_string+0x298>)
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f018 ffc7 	bl	802d84c <siprintf>
 80148be:	4603      	mov	r3, r0
 80148c0:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80148c2:	e113      	b.n	8014aec <get_config_payload_string+0x32c>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 80148c4:	4b55      	ldr	r3, [pc, #340]	; (8014a1c <get_config_payload_string+0x25c>)
 80148c6:	9310      	str	r3, [sp, #64]	; 0x40
 80148c8:	4b58      	ldr	r3, [pc, #352]	; (8014a2c <get_config_payload_string+0x26c>)
 80148ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80148cc:	4b58      	ldr	r3, [pc, #352]	; (8014a30 <get_config_payload_string+0x270>)
 80148ce:	930e      	str	r3, [sp, #56]	; 0x38
 80148d0:	4b58      	ldr	r3, [pc, #352]	; (8014a34 <get_config_payload_string+0x274>)
 80148d2:	930d      	str	r3, [sp, #52]	; 0x34
 80148d4:	4b58      	ldr	r3, [pc, #352]	; (8014a38 <get_config_payload_string+0x278>)
 80148d6:	930c      	str	r3, [sp, #48]	; 0x30
 80148d8:	4b58      	ldr	r3, [pc, #352]	; (8014a3c <get_config_payload_string+0x27c>)
 80148da:	930b      	str	r3, [sp, #44]	; 0x2c
 80148dc:	4b50      	ldr	r3, [pc, #320]	; (8014a20 <get_config_payload_string+0x260>)
 80148de:	930a      	str	r3, [sp, #40]	; 0x28
 80148e0:	4b57      	ldr	r3, [pc, #348]	; (8014a40 <get_config_payload_string+0x280>)
 80148e2:	9309      	str	r3, [sp, #36]	; 0x24
 80148e4:	4b5d      	ldr	r3, [pc, #372]	; (8014a5c <get_config_payload_string+0x29c>)
 80148e6:	9308      	str	r3, [sp, #32]
 80148e8:	4b5d      	ldr	r3, [pc, #372]	; (8014a60 <get_config_payload_string+0x2a0>)
 80148ea:	9307      	str	r3, [sp, #28]
 80148ec:	4b4c      	ldr	r3, [pc, #304]	; (8014a20 <get_config_payload_string+0x260>)
 80148ee:	9306      	str	r3, [sp, #24]
 80148f0:	4b53      	ldr	r3, [pc, #332]	; (8014a40 <get_config_payload_string+0x280>)
 80148f2:	9305      	str	r3, [sp, #20]
 80148f4:	4b5b      	ldr	r3, [pc, #364]	; (8014a64 <get_config_payload_string+0x2a4>)
 80148f6:	9304      	str	r3, [sp, #16]
 80148f8:	4b5b      	ldr	r3, [pc, #364]	; (8014a68 <get_config_payload_string+0x2a8>)
 80148fa:	9303      	str	r3, [sp, #12]
 80148fc:	4b58      	ldr	r3, [pc, #352]	; (8014a60 <get_config_payload_string+0x2a0>)
 80148fe:	9302      	str	r3, [sp, #8]
 8014900:	4b54      	ldr	r3, [pc, #336]	; (8014a54 <get_config_payload_string+0x294>)
 8014902:	9301      	str	r3, [sp, #4]
 8014904:	4b46      	ldr	r3, [pc, #280]	; (8014a20 <get_config_payload_string+0x260>)
 8014906:	9300      	str	r3, [sp, #0]
 8014908:	4b4d      	ldr	r3, [pc, #308]	; (8014a40 <get_config_payload_string+0x280>)
 801490a:	4a55      	ldr	r2, [pc, #340]	; (8014a60 <get_config_payload_string+0x2a0>)
 801490c:	4952      	ldr	r1, [pc, #328]	; (8014a58 <get_config_payload_string+0x298>)
 801490e:	6878      	ldr	r0, [r7, #4]
 8014910:	f018 ff9c 	bl	802d84c <siprintf>
 8014914:	4603      	mov	r3, r0
 8014916:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014918:	e0e8      	b.n	8014aec <get_config_payload_string+0x32c>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 801491a:	4b40      	ldr	r3, [pc, #256]	; (8014a1c <get_config_payload_string+0x25c>)
 801491c:	9310      	str	r3, [sp, #64]	; 0x40
 801491e:	4b43      	ldr	r3, [pc, #268]	; (8014a2c <get_config_payload_string+0x26c>)
 8014920:	930f      	str	r3, [sp, #60]	; 0x3c
 8014922:	4b43      	ldr	r3, [pc, #268]	; (8014a30 <get_config_payload_string+0x270>)
 8014924:	930e      	str	r3, [sp, #56]	; 0x38
 8014926:	4b43      	ldr	r3, [pc, #268]	; (8014a34 <get_config_payload_string+0x274>)
 8014928:	930d      	str	r3, [sp, #52]	; 0x34
 801492a:	4b43      	ldr	r3, [pc, #268]	; (8014a38 <get_config_payload_string+0x278>)
 801492c:	930c      	str	r3, [sp, #48]	; 0x30
 801492e:	4b43      	ldr	r3, [pc, #268]	; (8014a3c <get_config_payload_string+0x27c>)
 8014930:	930b      	str	r3, [sp, #44]	; 0x2c
 8014932:	4b3b      	ldr	r3, [pc, #236]	; (8014a20 <get_config_payload_string+0x260>)
 8014934:	930a      	str	r3, [sp, #40]	; 0x28
 8014936:	4b42      	ldr	r3, [pc, #264]	; (8014a40 <get_config_payload_string+0x280>)
 8014938:	9309      	str	r3, [sp, #36]	; 0x24
 801493a:	4b4c      	ldr	r3, [pc, #304]	; (8014a6c <get_config_payload_string+0x2ac>)
 801493c:	9308      	str	r3, [sp, #32]
 801493e:	4b4c      	ldr	r3, [pc, #304]	; (8014a70 <get_config_payload_string+0x2b0>)
 8014940:	9307      	str	r3, [sp, #28]
 8014942:	4b37      	ldr	r3, [pc, #220]	; (8014a20 <get_config_payload_string+0x260>)
 8014944:	9306      	str	r3, [sp, #24]
 8014946:	4b3e      	ldr	r3, [pc, #248]	; (8014a40 <get_config_payload_string+0x280>)
 8014948:	9305      	str	r3, [sp, #20]
 801494a:	4b4a      	ldr	r3, [pc, #296]	; (8014a74 <get_config_payload_string+0x2b4>)
 801494c:	9304      	str	r3, [sp, #16]
 801494e:	4b46      	ldr	r3, [pc, #280]	; (8014a68 <get_config_payload_string+0x2a8>)
 8014950:	9303      	str	r3, [sp, #12]
 8014952:	4b47      	ldr	r3, [pc, #284]	; (8014a70 <get_config_payload_string+0x2b0>)
 8014954:	9302      	str	r3, [sp, #8]
 8014956:	4b3f      	ldr	r3, [pc, #252]	; (8014a54 <get_config_payload_string+0x294>)
 8014958:	9301      	str	r3, [sp, #4]
 801495a:	4b31      	ldr	r3, [pc, #196]	; (8014a20 <get_config_payload_string+0x260>)
 801495c:	9300      	str	r3, [sp, #0]
 801495e:	4b38      	ldr	r3, [pc, #224]	; (8014a40 <get_config_payload_string+0x280>)
 8014960:	4a43      	ldr	r2, [pc, #268]	; (8014a70 <get_config_payload_string+0x2b0>)
 8014962:	493d      	ldr	r1, [pc, #244]	; (8014a58 <get_config_payload_string+0x298>)
 8014964:	6878      	ldr	r0, [r7, #4]
 8014966:	f018 ff71 	bl	802d84c <siprintf>
 801496a:	4603      	mov	r3, r0
 801496c:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801496e:	e0bd      	b.n	8014aec <get_config_payload_string+0x32c>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014970:	4b2a      	ldr	r3, [pc, #168]	; (8014a1c <get_config_payload_string+0x25c>)
 8014972:	9310      	str	r3, [sp, #64]	; 0x40
 8014974:	4b2d      	ldr	r3, [pc, #180]	; (8014a2c <get_config_payload_string+0x26c>)
 8014976:	930f      	str	r3, [sp, #60]	; 0x3c
 8014978:	4b2d      	ldr	r3, [pc, #180]	; (8014a30 <get_config_payload_string+0x270>)
 801497a:	930e      	str	r3, [sp, #56]	; 0x38
 801497c:	4b2d      	ldr	r3, [pc, #180]	; (8014a34 <get_config_payload_string+0x274>)
 801497e:	930d      	str	r3, [sp, #52]	; 0x34
 8014980:	4b2d      	ldr	r3, [pc, #180]	; (8014a38 <get_config_payload_string+0x278>)
 8014982:	930c      	str	r3, [sp, #48]	; 0x30
 8014984:	4b2d      	ldr	r3, [pc, #180]	; (8014a3c <get_config_payload_string+0x27c>)
 8014986:	930b      	str	r3, [sp, #44]	; 0x2c
 8014988:	4b25      	ldr	r3, [pc, #148]	; (8014a20 <get_config_payload_string+0x260>)
 801498a:	930a      	str	r3, [sp, #40]	; 0x28
 801498c:	4b2c      	ldr	r3, [pc, #176]	; (8014a40 <get_config_payload_string+0x280>)
 801498e:	9309      	str	r3, [sp, #36]	; 0x24
 8014990:	4b39      	ldr	r3, [pc, #228]	; (8014a78 <get_config_payload_string+0x2b8>)
 8014992:	9308      	str	r3, [sp, #32]
 8014994:	4b39      	ldr	r3, [pc, #228]	; (8014a7c <get_config_payload_string+0x2bc>)
 8014996:	9307      	str	r3, [sp, #28]
 8014998:	4b21      	ldr	r3, [pc, #132]	; (8014a20 <get_config_payload_string+0x260>)
 801499a:	9306      	str	r3, [sp, #24]
 801499c:	4b28      	ldr	r3, [pc, #160]	; (8014a40 <get_config_payload_string+0x280>)
 801499e:	9305      	str	r3, [sp, #20]
 80149a0:	4b37      	ldr	r3, [pc, #220]	; (8014a80 <get_config_payload_string+0x2c0>)
 80149a2:	9304      	str	r3, [sp, #16]
 80149a4:	4b30      	ldr	r3, [pc, #192]	; (8014a68 <get_config_payload_string+0x2a8>)
 80149a6:	9303      	str	r3, [sp, #12]
 80149a8:	4b34      	ldr	r3, [pc, #208]	; (8014a7c <get_config_payload_string+0x2bc>)
 80149aa:	9302      	str	r3, [sp, #8]
 80149ac:	4b29      	ldr	r3, [pc, #164]	; (8014a54 <get_config_payload_string+0x294>)
 80149ae:	9301      	str	r3, [sp, #4]
 80149b0:	4b1b      	ldr	r3, [pc, #108]	; (8014a20 <get_config_payload_string+0x260>)
 80149b2:	9300      	str	r3, [sp, #0]
 80149b4:	4b22      	ldr	r3, [pc, #136]	; (8014a40 <get_config_payload_string+0x280>)
 80149b6:	4a31      	ldr	r2, [pc, #196]	; (8014a7c <get_config_payload_string+0x2bc>)
 80149b8:	4927      	ldr	r1, [pc, #156]	; (8014a58 <get_config_payload_string+0x298>)
 80149ba:	6878      	ldr	r0, [r7, #4]
 80149bc:	f018 ff46 	bl	802d84c <siprintf>
 80149c0:	4603      	mov	r3, r0
 80149c2:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80149c4:	e092      	b.n	8014aec <get_config_payload_string+0x32c>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 80149c6:	4b15      	ldr	r3, [pc, #84]	; (8014a1c <get_config_payload_string+0x25c>)
 80149c8:	9310      	str	r3, [sp, #64]	; 0x40
 80149ca:	4b18      	ldr	r3, [pc, #96]	; (8014a2c <get_config_payload_string+0x26c>)
 80149cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80149ce:	4b18      	ldr	r3, [pc, #96]	; (8014a30 <get_config_payload_string+0x270>)
 80149d0:	930e      	str	r3, [sp, #56]	; 0x38
 80149d2:	4b18      	ldr	r3, [pc, #96]	; (8014a34 <get_config_payload_string+0x274>)
 80149d4:	930d      	str	r3, [sp, #52]	; 0x34
 80149d6:	4b18      	ldr	r3, [pc, #96]	; (8014a38 <get_config_payload_string+0x278>)
 80149d8:	930c      	str	r3, [sp, #48]	; 0x30
 80149da:	4b18      	ldr	r3, [pc, #96]	; (8014a3c <get_config_payload_string+0x27c>)
 80149dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80149de:	4b10      	ldr	r3, [pc, #64]	; (8014a20 <get_config_payload_string+0x260>)
 80149e0:	930a      	str	r3, [sp, #40]	; 0x28
 80149e2:	4b17      	ldr	r3, [pc, #92]	; (8014a40 <get_config_payload_string+0x280>)
 80149e4:	9309      	str	r3, [sp, #36]	; 0x24
 80149e6:	4b27      	ldr	r3, [pc, #156]	; (8014a84 <get_config_payload_string+0x2c4>)
 80149e8:	9308      	str	r3, [sp, #32]
 80149ea:	4b27      	ldr	r3, [pc, #156]	; (8014a88 <get_config_payload_string+0x2c8>)
 80149ec:	9307      	str	r3, [sp, #28]
 80149ee:	4b0c      	ldr	r3, [pc, #48]	; (8014a20 <get_config_payload_string+0x260>)
 80149f0:	9306      	str	r3, [sp, #24]
 80149f2:	4b13      	ldr	r3, [pc, #76]	; (8014a40 <get_config_payload_string+0x280>)
 80149f4:	9305      	str	r3, [sp, #20]
 80149f6:	4b25      	ldr	r3, [pc, #148]	; (8014a8c <get_config_payload_string+0x2cc>)
 80149f8:	9304      	str	r3, [sp, #16]
 80149fa:	4b1b      	ldr	r3, [pc, #108]	; (8014a68 <get_config_payload_string+0x2a8>)
 80149fc:	9303      	str	r3, [sp, #12]
 80149fe:	4b22      	ldr	r3, [pc, #136]	; (8014a88 <get_config_payload_string+0x2c8>)
 8014a00:	9302      	str	r3, [sp, #8]
 8014a02:	4b14      	ldr	r3, [pc, #80]	; (8014a54 <get_config_payload_string+0x294>)
 8014a04:	9301      	str	r3, [sp, #4]
 8014a06:	4b06      	ldr	r3, [pc, #24]	; (8014a20 <get_config_payload_string+0x260>)
 8014a08:	9300      	str	r3, [sp, #0]
 8014a0a:	4b0d      	ldr	r3, [pc, #52]	; (8014a40 <get_config_payload_string+0x280>)
 8014a0c:	4a1e      	ldr	r2, [pc, #120]	; (8014a88 <get_config_payload_string+0x2c8>)
 8014a0e:	4912      	ldr	r1, [pc, #72]	; (8014a58 <get_config_payload_string+0x298>)
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f018 ff1b 	bl	802d84c <siprintf>
 8014a16:	4603      	mov	r3, r0
 8014a18:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014a1a:	e067      	b.n	8014aec <get_config_payload_string+0x32c>
 8014a1c:	200008cc 	.word	0x200008cc
 8014a20:	200008bc 	.word	0x200008bc
 8014a24:	08034474 	.word	0x08034474
 8014a28:	08034634 	.word	0x08034634
 8014a2c:	08032e7c 	.word	0x08032e7c
 8014a30:	08032e84 	.word	0x08032e84
 8014a34:	08032e88 	.word	0x08032e88
 8014a38:	08032e98 	.word	0x08032e98
 8014a3c:	08032ea8 	.word	0x08032ea8
 8014a40:	08032e3c 	.word	0x08032e3c
 8014a44:	08032eb8 	.word	0x08032eb8
 8014a48:	08032e34 	.word	0x08032e34
 8014a4c:	08032ebc 	.word	0x08032ebc
 8014a50:	08032ecc 	.word	0x08032ecc
 8014a54:	08032ef0 	.word	0x08032ef0
 8014a58:	080347cc 	.word	0x080347cc
 8014a5c:	08032ef8 	.word	0x08032ef8
 8014a60:	08032e44 	.word	0x08032e44
 8014a64:	08032efc 	.word	0x08032efc
 8014a68:	08032f0c 	.word	0x08032f0c
 8014a6c:	08032f10 	.word	0x08032f10
 8014a70:	08032e4c 	.word	0x08032e4c
 8014a74:	08032f14 	.word	0x08032f14
 8014a78:	08032f38 	.word	0x08032f38
 8014a7c:	08032e54 	.word	0x08032e54
 8014a80:	08032f3c 	.word	0x08032f3c
 8014a84:	08032f5c 	.word	0x08032f5c
 8014a88:	08032e64 	.word	0x08032e64
 8014a8c:	08032f60 	.word	0x08032f60
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8014a90:	4b18      	ldr	r3, [pc, #96]	; (8014af4 <get_config_payload_string+0x334>)
 8014a92:	9310      	str	r3, [sp, #64]	; 0x40
 8014a94:	4b18      	ldr	r3, [pc, #96]	; (8014af8 <get_config_payload_string+0x338>)
 8014a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a98:	4b18      	ldr	r3, [pc, #96]	; (8014afc <get_config_payload_string+0x33c>)
 8014a9a:	930e      	str	r3, [sp, #56]	; 0x38
 8014a9c:	4b18      	ldr	r3, [pc, #96]	; (8014b00 <get_config_payload_string+0x340>)
 8014a9e:	930d      	str	r3, [sp, #52]	; 0x34
 8014aa0:	4b18      	ldr	r3, [pc, #96]	; (8014b04 <get_config_payload_string+0x344>)
 8014aa2:	930c      	str	r3, [sp, #48]	; 0x30
 8014aa4:	4b18      	ldr	r3, [pc, #96]	; (8014b08 <get_config_payload_string+0x348>)
 8014aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014aa8:	4b18      	ldr	r3, [pc, #96]	; (8014b0c <get_config_payload_string+0x34c>)
 8014aaa:	930a      	str	r3, [sp, #40]	; 0x28
 8014aac:	4b18      	ldr	r3, [pc, #96]	; (8014b10 <get_config_payload_string+0x350>)
 8014aae:	9309      	str	r3, [sp, #36]	; 0x24
 8014ab0:	4b18      	ldr	r3, [pc, #96]	; (8014b14 <get_config_payload_string+0x354>)
 8014ab2:	9308      	str	r3, [sp, #32]
 8014ab4:	4b18      	ldr	r3, [pc, #96]	; (8014b18 <get_config_payload_string+0x358>)
 8014ab6:	9307      	str	r3, [sp, #28]
 8014ab8:	4b14      	ldr	r3, [pc, #80]	; (8014b0c <get_config_payload_string+0x34c>)
 8014aba:	9306      	str	r3, [sp, #24]
 8014abc:	4b14      	ldr	r3, [pc, #80]	; (8014b10 <get_config_payload_string+0x350>)
 8014abe:	9305      	str	r3, [sp, #20]
 8014ac0:	4b16      	ldr	r3, [pc, #88]	; (8014b1c <get_config_payload_string+0x35c>)
 8014ac2:	9304      	str	r3, [sp, #16]
 8014ac4:	4b16      	ldr	r3, [pc, #88]	; (8014b20 <get_config_payload_string+0x360>)
 8014ac6:	9303      	str	r3, [sp, #12]
 8014ac8:	4b13      	ldr	r3, [pc, #76]	; (8014b18 <get_config_payload_string+0x358>)
 8014aca:	9302      	str	r3, [sp, #8]
 8014acc:	4b15      	ldr	r3, [pc, #84]	; (8014b24 <get_config_payload_string+0x364>)
 8014ace:	9301      	str	r3, [sp, #4]
 8014ad0:	4b0e      	ldr	r3, [pc, #56]	; (8014b0c <get_config_payload_string+0x34c>)
 8014ad2:	9300      	str	r3, [sp, #0]
 8014ad4:	4b0e      	ldr	r3, [pc, #56]	; (8014b10 <get_config_payload_string+0x350>)
 8014ad6:	4a10      	ldr	r2, [pc, #64]	; (8014b18 <get_config_payload_string+0x358>)
 8014ad8:	4913      	ldr	r1, [pc, #76]	; (8014b28 <get_config_payload_string+0x368>)
 8014ada:	6878      	ldr	r0, [r7, #4]
 8014adc:	f018 feb6 	bl	802d84c <siprintf>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014ae4:	e002      	b.n	8014aec <get_config_payload_string+0x32c>

		default:
			return -1;
 8014ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8014aea:	e7ff      	b.n	8014aec <get_config_payload_string+0x32c>
			break;
	}
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3714      	adds	r7, #20
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd90      	pop	{r4, r7, pc}
 8014af4:	200008cc 	.word	0x200008cc
 8014af8:	08032e7c 	.word	0x08032e7c
 8014afc:	08032e84 	.word	0x08032e84
 8014b00:	08032e88 	.word	0x08032e88
 8014b04:	08032e98 	.word	0x08032e98
 8014b08:	08032ea8 	.word	0x08032ea8
 8014b0c:	200008bc 	.word	0x200008bc
 8014b10:	08032e3c 	.word	0x08032e3c
 8014b14:	08032f8c 	.word	0x08032f8c
 8014b18:	08032e74 	.word	0x08032e74
 8014b1c:	08032f90 	.word	0x08032f90
 8014b20:	08032f0c 	.word	0x08032f0c
 8014b24:	08032ef0 	.word	0x08032ef0
 8014b28:	080347cc 	.word	0x080347cc

08014b2c <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af02      	add	r7, sp, #8
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	460b      	mov	r3, r1
 8014b36:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 8014b3e:	4b11      	ldr	r3, [pc, #68]	; (8014b84 <generate_status_topik+0x58>)
 8014b40:	9300      	str	r3, [sp, #0]
 8014b42:	4b11      	ldr	r3, [pc, #68]	; (8014b88 <generate_status_topik+0x5c>)
 8014b44:	4a11      	ldr	r2, [pc, #68]	; (8014b8c <generate_status_topik+0x60>)
 8014b46:	4912      	ldr	r1, [pc, #72]	; (8014b90 <generate_status_topik+0x64>)
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f018 fe7f 	bl	802d84c <siprintf>

	switch (topik_type) {
 8014b4e:	78fb      	ldrb	r3, [r7, #3]
 8014b50:	2b01      	cmp	r3, #1
 8014b52:	d002      	beq.n	8014b5a <generate_status_topik+0x2e>
 8014b54:	2b02      	cmp	r3, #2
 8014b56:	d006      	beq.n	8014b66 <generate_status_topik+0x3a>
 8014b58:	e00b      	b.n	8014b72 <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 8014b5a:	4a0b      	ldr	r2, [pc, #44]	; (8014b88 <generate_status_topik+0x5c>)
 8014b5c:	490d      	ldr	r1, [pc, #52]	; (8014b94 <generate_status_topik+0x68>)
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f018 fe74 	bl	802d84c <siprintf>
			break;
 8014b64:	e008      	b.n	8014b78 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 8014b66:	4a08      	ldr	r2, [pc, #32]	; (8014b88 <generate_status_topik+0x5c>)
 8014b68:	490b      	ldr	r1, [pc, #44]	; (8014b98 <generate_status_topik+0x6c>)
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f018 fe6e 	bl	802d84c <siprintf>
			break;
 8014b70:	e002      	b.n	8014b78 <generate_status_topik+0x4c>

		default:
			return -1;
 8014b72:	f04f 33ff 	mov.w	r3, #4294967295
 8014b76:	e000      	b.n	8014b7a <generate_status_topik+0x4e>
			break;
	}

	return 0;
 8014b78:	2300      	movs	r3, #0
}
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	3708      	adds	r7, #8
 8014b7e:	46bd      	mov	sp, r7
 8014b80:	bd80      	pop	{r7, pc}
 8014b82:	bf00      	nop
 8014b84:	08032ef0 	.word	0x08032ef0
 8014b88:	200008bc 	.word	0x200008bc
 8014b8c:	08032e3c 	.word	0x08032e3c
 8014b90:	08032fb8 	.word	0x08032fb8
 8014b94:	20000094 	.word	0x20000094
 8014b98:	200000a4 	.word	0x200000a4

08014b9c <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014b9c:	b580      	push	{r7, lr}
 8014b9e:	b086      	sub	sp, #24
 8014ba0:	af02      	add	r7, sp, #8
 8014ba2:	60f8      	str	r0, [r7, #12]
 8014ba4:	60b9      	str	r1, [r7, #8]
 8014ba6:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f7fb fce4 	bl	8010578 <__aeabi_f2d>
 8014bb0:	4602      	mov	r2, r0
 8014bb2:	460b      	mov	r3, r1
 8014bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8014bb8:	68ba      	ldr	r2, [r7, #8]
 8014bba:	4904      	ldr	r1, [pc, #16]	; (8014bcc <generate_key_value_JSON+0x30>)
 8014bbc:	68f8      	ldr	r0, [r7, #12]
 8014bbe:	f018 fe45 	bl	802d84c <siprintf>
}
 8014bc2:	bf00      	nop
 8014bc4:	3710      	adds	r7, #16
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	bd80      	pop	{r7, pc}
 8014bca:	bf00      	nop
 8014bcc:	08032fc4 	.word	0x08032fc4

08014bd0 <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 8014bd0:	b5b0      	push	{r4, r5, r7, lr}
 8014bd2:	b084      	sub	sp, #16
 8014bd4:	af00      	add	r7, sp, #0
 8014bd6:	60f8      	str	r0, [r7, #12]
 8014bd8:	60b9      	str	r1, [r7, #8]
 8014bda:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 8014bde:	68f8      	ldr	r0, [r7, #12]
 8014be0:	f7fb fca8 	bl	8010534 <__aeabi_ui2d>
 8014be4:	4604      	mov	r4, r0
 8014be6:	460d      	mov	r5, r1
 8014be8:	68b8      	ldr	r0, [r7, #8]
 8014bea:	f7fb fca3 	bl	8010534 <__aeabi_ui2d>
 8014bee:	f04f 0200 	mov.w	r2, #0
 8014bf2:	4b17      	ldr	r3, [pc, #92]	; (8014c50 <InitHLW8032+0x80>)
 8014bf4:	f7fb fd18 	bl	8010628 <__aeabi_dmul>
 8014bf8:	4602      	mov	r2, r0
 8014bfa:	460b      	mov	r3, r1
 8014bfc:	4620      	mov	r0, r4
 8014bfe:	4629      	mov	r1, r5
 8014c00:	f7fb fe3c 	bl	801087c <__aeabi_ddiv>
 8014c04:	4602      	mov	r2, r0
 8014c06:	460b      	mov	r3, r1
 8014c08:	4610      	mov	r0, r2
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	f7fc f804 	bl	8010c18 <__aeabi_d2f>
 8014c10:	4603      	mov	r3, r0
 8014c12:	4a10      	ldr	r2, [pc, #64]	; (8014c54 <InitHLW8032+0x84>)
 8014c14:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8014c16:	6878      	ldr	r0, [r7, #4]
 8014c18:	f7fb fcae 	bl	8010578 <__aeabi_f2d>
 8014c1c:	f04f 0200 	mov.w	r2, #0
 8014c20:	4b0b      	ldr	r3, [pc, #44]	; (8014c50 <InitHLW8032+0x80>)
 8014c22:	f7fb fd01 	bl	8010628 <__aeabi_dmul>
 8014c26:	4602      	mov	r2, r0
 8014c28:	460b      	mov	r3, r1
 8014c2a:	f04f 0000 	mov.w	r0, #0
 8014c2e:	490a      	ldr	r1, [pc, #40]	; (8014c58 <InitHLW8032+0x88>)
 8014c30:	f7fb fe24 	bl	801087c <__aeabi_ddiv>
 8014c34:	4602      	mov	r2, r0
 8014c36:	460b      	mov	r3, r1
 8014c38:	4610      	mov	r0, r2
 8014c3a:	4619      	mov	r1, r3
 8014c3c:	f7fb ffec 	bl	8010c18 <__aeabi_d2f>
 8014c40:	4603      	mov	r3, r0
 8014c42:	4a06      	ldr	r2, [pc, #24]	; (8014c5c <InitHLW8032+0x8c>)
 8014c44:	6013      	str	r3, [r2, #0]
}
 8014c46:	bf00      	nop
 8014c48:	3710      	adds	r7, #16
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	408f4000 	.word	0x408f4000
 8014c54:	200000b4 	.word	0x200000b4
 8014c58:	3ff00000 	.word	0x3ff00000
 8014c5c:	200000b8 	.word	0x200000b8

08014c60 <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 8014c60:	b480      	push	{r7}
 8014c62:	b085      	sub	sp, #20
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014c6c:	2302      	movs	r3, #2
 8014c6e:	73fb      	strb	r3, [r7, #15]
 8014c70:	e00e      	b.n	8014c90 <Checksum+0x30>
		tmp = string[i];
 8014c72:	7bfb      	ldrb	r3, [r7, #15]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	4413      	add	r3, r2
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8014c7c:	7bfb      	ldrb	r3, [r7, #15]
 8014c7e:	687a      	ldr	r2, [r7, #4]
 8014c80:	4413      	add	r3, r2
 8014c82:	781a      	ldrb	r2, [r3, #0]
 8014c84:	7bbb      	ldrb	r3, [r7, #14]
 8014c86:	4413      	add	r3, r2
 8014c88:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014c8a:	7bfb      	ldrb	r3, [r7, #15]
 8014c8c:	3301      	adds	r3, #1
 8014c8e:	73fb      	strb	r3, [r7, #15]
 8014c90:	7bfb      	ldrb	r3, [r7, #15]
 8014c92:	2b16      	cmp	r3, #22
 8014c94:	d9ed      	bls.n	8014c72 <Checksum+0x12>
	}
	if (byte == string[23])
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	3317      	adds	r3, #23
 8014c9a:	781b      	ldrb	r3, [r3, #0]
 8014c9c:	7bba      	ldrb	r2, [r7, #14]
 8014c9e:	429a      	cmp	r2, r3
 8014ca0:	d101      	bne.n	8014ca6 <Checksum+0x46>
	{
		return 1;
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	e000      	b.n	8014ca8 <Checksum+0x48>
	}
	return 0;
 8014ca6:	2300      	movs	r3, #0
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3714      	adds	r7, #20
 8014cac:	46bd      	mov	sp, r7
 8014cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cb2:	4770      	bx	lr

08014cb4 <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 8014cb4:	b580      	push	{r7, lr}
 8014cb6:	b082      	sub	sp, #8
 8014cb8:	af00      	add	r7, sp, #0
 8014cba:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	215a      	movs	r1, #90	; 0x5a
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7fb fa8c 	bl	80101e0 <strcmp>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d102      	bne.n	8014cd4 <RecvRawString+0x20>
		return -1; //error code
 8014cce:	f04f 33ff 	mov.w	r3, #4294967295
 8014cd2:	e0a9      	b.n	8014e28 <RecvRawString+0x174>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 8014cd4:	6878      	ldr	r0, [r7, #4]
 8014cd6:	f7ff ffc3 	bl	8014c60 <Checksum>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d102      	bne.n	8014ce6 <RecvRawString+0x32>
		return -2; //Checksum Error
 8014ce0:	f06f 0301 	mvn.w	r3, #1
 8014ce4:	e0a0      	b.n	8014e28 <RecvRawString+0x174>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	3302      	adds	r3, #2
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	041a      	lsls	r2, r3, #16
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	3303      	adds	r3, #3
 8014cf2:	781b      	ldrb	r3, [r3, #0]
 8014cf4:	021b      	lsls	r3, r3, #8
 8014cf6:	4413      	add	r3, r2
 8014cf8:	687a      	ldr	r2, [r7, #4]
 8014cfa:	3204      	adds	r2, #4
 8014cfc:	7812      	ldrb	r2, [r2, #0]
 8014cfe:	4413      	add	r3, r2
 8014d00:	4a4b      	ldr	r2, [pc, #300]	; (8014e30 <RecvRawString+0x17c>)
 8014d02:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	3314      	adds	r3, #20
 8014d08:	781b      	ldrb	r3, [r3, #0]
 8014d0a:	099b      	lsrs	r3, r3, #6
 8014d0c:	b2db      	uxtb	r3, r3
 8014d0e:	f003 0301 	and.w	r3, r3, #1
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d00e      	beq.n	8014d34 <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	3305      	adds	r3, #5
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	041a      	lsls	r2, r3, #16
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	3306      	adds	r3, #6
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	021b      	lsls	r3, r3, #8
 8014d26:	4413      	add	r3, r2
 8014d28:	687a      	ldr	r2, [r7, #4]
 8014d2a:	3207      	adds	r2, #7
 8014d2c:	7812      	ldrb	r2, [r2, #0]
 8014d2e:	4413      	add	r3, r2
 8014d30:	4a40      	ldr	r2, [pc, #256]	; (8014e34 <RecvRawString+0x180>)
 8014d32:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	3308      	adds	r3, #8
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	041a      	lsls	r2, r3, #16
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	3309      	adds	r3, #9
 8014d40:	781b      	ldrb	r3, [r3, #0]
 8014d42:	021b      	lsls	r3, r3, #8
 8014d44:	4413      	add	r3, r2
 8014d46:	687a      	ldr	r2, [r7, #4]
 8014d48:	320a      	adds	r2, #10
 8014d4a:	7812      	ldrb	r2, [r2, #0]
 8014d4c:	4413      	add	r3, r2
 8014d4e:	4a3a      	ldr	r2, [pc, #232]	; (8014e38 <RecvRawString+0x184>)
 8014d50:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	3314      	adds	r3, #20
 8014d56:	781b      	ldrb	r3, [r3, #0]
 8014d58:	095b      	lsrs	r3, r3, #5
 8014d5a:	b2db      	uxtb	r3, r3
 8014d5c:	f003 0301 	and.w	r3, r3, #1
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d00e      	beq.n	8014d82 <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	330b      	adds	r3, #11
 8014d68:	781b      	ldrb	r3, [r3, #0]
 8014d6a:	041a      	lsls	r2, r3, #16
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	330c      	adds	r3, #12
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	021b      	lsls	r3, r3, #8
 8014d74:	4413      	add	r3, r2
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	320d      	adds	r2, #13
 8014d7a:	7812      	ldrb	r2, [r2, #0]
 8014d7c:	4413      	add	r3, r2
 8014d7e:	4a2f      	ldr	r2, [pc, #188]	; (8014e3c <RecvRawString+0x188>)
 8014d80:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	330e      	adds	r3, #14
 8014d86:	781b      	ldrb	r3, [r3, #0]
 8014d88:	041a      	lsls	r2, r3, #16
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	330f      	adds	r3, #15
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	021b      	lsls	r3, r3, #8
 8014d92:	4413      	add	r3, r2
 8014d94:	687a      	ldr	r2, [r7, #4]
 8014d96:	3210      	adds	r2, #16
 8014d98:	7812      	ldrb	r2, [r2, #0]
 8014d9a:	4413      	add	r3, r2
 8014d9c:	4a28      	ldr	r2, [pc, #160]	; (8014e40 <RecvRawString+0x18c>)
 8014d9e:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	3314      	adds	r3, #20
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	091b      	lsrs	r3, r3, #4
 8014da8:	b2db      	uxtb	r3, r3
 8014daa:	f003 0301 	and.w	r3, r3, #1
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d00e      	beq.n	8014dd0 <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	3311      	adds	r3, #17
 8014db6:	781b      	ldrb	r3, [r3, #0]
 8014db8:	041a      	lsls	r2, r3, #16
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	3312      	adds	r3, #18
 8014dbe:	781b      	ldrb	r3, [r3, #0]
 8014dc0:	021b      	lsls	r3, r3, #8
 8014dc2:	4413      	add	r3, r2
 8014dc4:	687a      	ldr	r2, [r7, #4]
 8014dc6:	3213      	adds	r2, #19
 8014dc8:	7812      	ldrb	r2, [r2, #0]
 8014dca:	4413      	add	r3, r2
 8014dcc:	4a1d      	ldr	r2, [pc, #116]	; (8014e44 <RecvRawString+0x190>)
 8014dce:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	3315      	adds	r3, #21
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	021b      	lsls	r3, r3, #8
 8014dda:	b29a      	uxth	r2, r3
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	3316      	adds	r3, #22
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	4413      	add	r3, r2
 8014de6:	b29a      	uxth	r2, r3
 8014de8:	4b17      	ldr	r3, [pc, #92]	; (8014e48 <RecvRawString+0x194>)
 8014dea:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	3314      	adds	r3, #20
 8014df0:	781b      	ldrb	r3, [r3, #0]
 8014df2:	09db      	lsrs	r3, r3, #7
 8014df4:	b2db      	uxtb	r3, r3
 8014df6:	f003 0301 	and.w	r3, r3, #1
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d004      	beq.n	8014e08 <RecvRawString+0x154>
	{
		PFData++;
 8014dfe:	4b13      	ldr	r3, [pc, #76]	; (8014e4c <RecvRawString+0x198>)
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	3301      	adds	r3, #1
 8014e04:	4a11      	ldr	r2, [pc, #68]	; (8014e4c <RecvRawString+0x198>)
 8014e06:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014e08:	4b11      	ldr	r3, [pc, #68]	; (8014e50 <RecvRawString+0x19c>)
 8014e0a:	881a      	ldrh	r2, [r3, #0]
 8014e0c:	4b0e      	ldr	r3, [pc, #56]	; (8014e48 <RecvRawString+0x194>)
 8014e0e:	881b      	ldrh	r3, [r3, #0]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d904      	bls.n	8014e1e <RecvRawString+0x16a>
		test_flag++;
 8014e14:	4b0f      	ldr	r3, [pc, #60]	; (8014e54 <RecvRawString+0x1a0>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	3301      	adds	r3, #1
 8014e1a:	4a0e      	ldr	r2, [pc, #56]	; (8014e54 <RecvRawString+0x1a0>)
 8014e1c:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8014e1e:	4b0a      	ldr	r3, [pc, #40]	; (8014e48 <RecvRawString+0x194>)
 8014e20:	881a      	ldrh	r2, [r3, #0]
 8014e22:	4b0b      	ldr	r3, [pc, #44]	; (8014e50 <RecvRawString+0x19c>)
 8014e24:	801a      	strh	r2, [r3, #0]

	return 0;
 8014e26:	2300      	movs	r3, #0
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3708      	adds	r7, #8
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bd80      	pop	{r7, pc}
 8014e30:	200008e0 	.word	0x200008e0
 8014e34:	200008e4 	.word	0x200008e4
 8014e38:	200008f0 	.word	0x200008f0
 8014e3c:	200008f4 	.word	0x200008f4
 8014e40:	200008e8 	.word	0x200008e8
 8014e44:	200008ec 	.word	0x200008ec
 8014e48:	200008fc 	.word	0x200008fc
 8014e4c:	200008f8 	.word	0x200008f8
 8014e50:	200008fe 	.word	0x200008fe
 8014e54:	20000900 	.word	0x20000900

08014e58 <GetVolRaw>:

float GetVolRaw(void){
 8014e58:	b480      	push	{r7}
 8014e5a:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014e5c:	4b0e      	ldr	r3, [pc, #56]	; (8014e98 <GetVolRaw+0x40>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d102      	bne.n	8014e6a <GetVolRaw+0x12>
		return 0;
 8014e64:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014e9c <GetVolRaw+0x44>
 8014e68:	e00d      	b.n	8014e86 <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014e6a:	4b0d      	ldr	r3, [pc, #52]	; (8014ea0 <GetVolRaw+0x48>)
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	ee07 3a90 	vmov	s15, r3
 8014e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e76:	4b08      	ldr	r3, [pc, #32]	; (8014e98 <GetVolRaw+0x40>)
 8014e78:	681b      	ldr	r3, [r3, #0]
 8014e7a:	ee07 3a90 	vmov	s15, r3
 8014e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e82:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014e86:	eef0 7a66 	vmov.f32	s15, s13
 8014e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e94:	4770      	bx	lr
 8014e96:	bf00      	nop
 8014e98:	200008e4 	.word	0x200008e4
 8014e9c:	00000000 	.word	0x00000000
 8014ea0:	200008e0 	.word	0x200008e0

08014ea4 <GetVoltage>:

float GetVoltage(void){
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b082      	sub	sp, #8
 8014ea8:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8014eaa:	f7ff ffd5 	bl	8014e58 <GetVolRaw>
 8014eae:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 8014eb2:	4b0d      	ldr	r3, [pc, #52]	; (8014ee8 <GetVoltage+0x44>)
 8014eb4:	edd3 7a00 	vldr	s15, [r3]
 8014eb8:	ed97 7a00 	vldr	s14, [r7]
 8014ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014ec0:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 8014ec4:	edd7 7a01 	vldr	s15, [r7, #4]
 8014ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed0:	d501      	bpl.n	8014ed6 <GetVoltage+0x32>
 8014ed2:	4b06      	ldr	r3, [pc, #24]	; (8014eec <GetVoltage+0x48>)
 8014ed4:	607b      	str	r3, [r7, #4]
	return RealVolt;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	ee07 3a90 	vmov	s15, r3
}
 8014edc:	eeb0 0a67 	vmov.f32	s0, s15
 8014ee0:	3708      	adds	r7, #8
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	200000b4 	.word	0x200000b4
 8014eec:	3089705f 	.word	0x3089705f

08014ef0 <GetCurrentRaw>:

float GetCurrentRaw(void){
 8014ef0:	b480      	push	{r7}
 8014ef2:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8014ef4:	4b0e      	ldr	r3, [pc, #56]	; (8014f30 <GetCurrentRaw+0x40>)
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d102      	bne.n	8014f02 <GetCurrentRaw+0x12>
		return 0;
 8014efc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014f34 <GetCurrentRaw+0x44>
 8014f00:	e00d      	b.n	8014f1e <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8014f02:	4b0d      	ldr	r3, [pc, #52]	; (8014f38 <GetCurrentRaw+0x48>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	ee07 3a90 	vmov	s15, r3
 8014f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014f0e:	4b08      	ldr	r3, [pc, #32]	; (8014f30 <GetCurrentRaw+0x40>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	ee07 3a90 	vmov	s15, r3
 8014f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014f1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014f1e:	eef0 7a66 	vmov.f32	s15, s13
 8014f22:	eeb0 0a67 	vmov.f32	s0, s15
 8014f26:	46bd      	mov	sp, r7
 8014f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2c:	4770      	bx	lr
 8014f2e:	bf00      	nop
 8014f30:	200008f4 	.word	0x200008f4
 8014f34:	00000000 	.word	0x00000000
 8014f38:	200008f0 	.word	0x200008f0

08014f3c <GetCurrent>:

float GetCurrent(void){
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b082      	sub	sp, #8
 8014f40:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8014f42:	f7ff ffd5 	bl	8014ef0 <GetCurrentRaw>
 8014f46:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014f4a:	4b0d      	ldr	r3, [pc, #52]	; (8014f80 <GetCurrent+0x44>)
 8014f4c:	edd3 7a00 	vldr	s15, [r3]
 8014f50:	ed97 7a00 	vldr	s14, [r7]
 8014f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f58:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014f60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f68:	d501      	bpl.n	8014f6e <GetCurrent+0x32>
 8014f6a:	4b06      	ldr	r3, [pc, #24]	; (8014f84 <GetCurrent+0x48>)
 8014f6c:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	ee07 3a90 	vmov	s15, r3
}
 8014f74:	eeb0 0a67 	vmov.f32	s0, s15
 8014f78:	3708      	adds	r7, #8
 8014f7a:	46bd      	mov	sp, r7
 8014f7c:	bd80      	pop	{r7, pc}
 8014f7e:	bf00      	nop
 8014f80:	200000b8 	.word	0x200000b8
 8014f84:	3089705f 	.word	0x3089705f

08014f88 <GetActivePower>:

float GetActivePower(void){
 8014f88:	b480      	push	{r7}
 8014f8a:	b083      	sub	sp, #12
 8014f8c:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 8014f8e:	4b18      	ldr	r3, [pc, #96]	; (8014ff0 <GetActivePower+0x68>)
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d102      	bne.n	8014f9c <GetActivePower+0x14>
		return 0;
 8014f96:	f04f 0300 	mov.w	r3, #0
 8014f9a:	e01f      	b.n	8014fdc <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014f9c:	4b15      	ldr	r3, [pc, #84]	; (8014ff4 <GetActivePower+0x6c>)
 8014f9e:	681a      	ldr	r2, [r3, #0]
 8014fa0:	4b13      	ldr	r3, [pc, #76]	; (8014ff0 <GetActivePower+0x68>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8014fa8:	ee07 3a90 	vmov	s15, r3
 8014fac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014fb0:	4b11      	ldr	r3, [pc, #68]	; (8014ff8 <GetActivePower+0x70>)
 8014fb2:	edd3 7a00 	vldr	s15, [r3]
 8014fb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014fba:	4b10      	ldr	r3, [pc, #64]	; (8014ffc <GetActivePower+0x74>)
 8014fbc:	edd3 7a00 	vldr	s15, [r3]
 8014fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014fc4:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 8014fc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8014fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd4:	d501      	bpl.n	8014fda <GetActivePower+0x52>
 8014fd6:	4b0a      	ldr	r3, [pc, #40]	; (8015000 <GetActivePower+0x78>)
 8014fd8:	607b      	str	r3, [r7, #4]

	return tmp;
 8014fda:	687b      	ldr	r3, [r7, #4]
}
 8014fdc:	ee07 3a90 	vmov	s15, r3
 8014fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8014fe4:	370c      	adds	r7, #12
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fec:	4770      	bx	lr
 8014fee:	bf00      	nop
 8014ff0:	200008ec 	.word	0x200008ec
 8014ff4:	200008e8 	.word	0x200008e8
 8014ff8:	200000b4 	.word	0x200000b4
 8014ffc:	200000b8 	.word	0x200000b8
 8015000:	3089705f 	.word	0x3089705f

08015004 <GetApparentPower>:

float GetApparentPower(void){
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 801500a:	f7ff ff4b 	bl	8014ea4 <GetVoltage>
 801500e:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 8015012:	f7ff ff93 	bl	8014f3c <GetCurrent>
 8015016:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 801501a:	ed97 7a02 	vldr	s14, [r7, #8]
 801501e:	edd7 7a01 	vldr	s15, [r7, #4]
 8015022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015026:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 801502a:	edd7 7a03 	vldr	s15, [r7, #12]
 801502e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8015032:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801503a:	d501      	bpl.n	8015040 <GetApparentPower+0x3c>
 801503c:	4b04      	ldr	r3, [pc, #16]	; (8015050 <GetApparentPower+0x4c>)
 801503e:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	ee07 3a90 	vmov	s15, r3
}
 8015046:	eeb0 0a67 	vmov.f32	s0, s15
 801504a:	3710      	adds	r7, #16
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	3089705f 	.word	0x3089705f

08015054 <PowerFactor>:

float PowerFactor(void){
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 801505a:	f7ff ff95 	bl	8014f88 <GetActivePower>
 801505e:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8015062:	f7ff ffcf 	bl	8015004 <GetApparentPower>
 8015066:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 0;
 801506a:	edd7 7a02 	vldr	s15, [r7, #8]
 801506e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015076:	d102      	bne.n	801507e <PowerFactor+0x2a>
 8015078:	f04f 0300 	mov.w	r3, #0
 801507c:	e01e      	b.n	80150bc <PowerFactor+0x68>
	if (ActivePower 	== 0) return 0;
 801507e:	edd7 7a03 	vldr	s15, [r7, #12]
 8015082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801508a:	d102      	bne.n	8015092 <PowerFactor+0x3e>
 801508c:	f04f 0300 	mov.w	r3, #0
 8015090:	e014      	b.n	80150bc <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8015092:	ed97 7a03 	vldr	s14, [r7, #12]
 8015096:	edd7 7a02 	vldr	s15, [r7, #8]
 801509a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801509e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a2:	dd02      	ble.n	80150aa <PowerFactor+0x56>
 80150a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80150a8:	e008      	b.n	80150bc <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 80150aa:	edd7 6a03 	vldr	s13, [r7, #12]
 80150ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80150b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80150b6:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 80150ba:	687b      	ldr	r3, [r7, #4]
}
 80150bc:	ee07 3a90 	vmov	s15, r3
 80150c0:	eeb0 0a67 	vmov.f32	s0, s15
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
	...

080150cc <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 80150cc:	b480      	push	{r7}
 80150ce:	af00      	add	r7, sp, #0
	return test_flag;
 80150d0:	4b03      	ldr	r3, [pc, #12]	; (80150e0 <GetTestPulse+0x14>)
 80150d2:	681b      	ldr	r3, [r3, #0]
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr
 80150de:	bf00      	nop
 80150e0:	20000900 	.word	0x20000900

080150e4 <GetCountedPulse>:

uint32_t GetCountedPulse(){
 80150e4:	b480      	push	{r7}
 80150e6:	af00      	add	r7, sp, #0
	return PFData;
 80150e8:	4b03      	ldr	r3, [pc, #12]	; (80150f8 <GetCountedPulse+0x14>)
 80150ea:	681b      	ldr	r3, [r3, #0]
}
 80150ec:	4618      	mov	r0, r3
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr
 80150f6:	bf00      	nop
 80150f8:	200008f8 	.word	0x200008f8

080150fc <GetPFReg>:

uint32_t GetPFReg(){
 80150fc:	b480      	push	{r7}
 80150fe:	af00      	add	r7, sp, #0
	return PF_reg;
 8015100:	4b03      	ldr	r3, [pc, #12]	; (8015110 <GetPFReg+0x14>)
 8015102:	881b      	ldrh	r3, [r3, #0]
}
 8015104:	4618      	mov	r0, r3
 8015106:	46bd      	mov	sp, r7
 8015108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801510c:	4770      	bx	lr
 801510e:	bf00      	nop
 8015110:	200008fc 	.word	0x200008fc
 8015114:	00000000 	.word	0x00000000

08015118 <GetKWh>:

float GetKWh(void){
 8015118:	b5b0      	push	{r4, r5, r7, lr}
 801511a:	b084      	sub	sp, #16
 801511c:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 801511e:	f7ff ff71 	bl	8015004 <GetApparentPower>
 8015122:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 8015126:	4b38      	ldr	r3, [pc, #224]	; (8015208 <GetKWh+0xf0>)
 8015128:	681b      	ldr	r3, [r3, #0]
 801512a:	4618      	mov	r0, r3
 801512c:	f7fb fa02 	bl	8010534 <__aeabi_ui2d>
 8015130:	4602      	mov	r2, r0
 8015132:	460b      	mov	r3, r1
 8015134:	f04f 0000 	mov.w	r0, #0
 8015138:	4934      	ldr	r1, [pc, #208]	; (801520c <GetKWh+0xf4>)
 801513a:	f7fb fb9f 	bl	801087c <__aeabi_ddiv>
 801513e:	4602      	mov	r2, r0
 8015140:	460b      	mov	r3, r1
 8015142:	4614      	mov	r4, r2
 8015144:	461d      	mov	r5, r3
 8015146:	4b32      	ldr	r3, [pc, #200]	; (8015210 <GetKWh+0xf8>)
 8015148:	ed93 7a00 	vldr	s14, [r3]
 801514c:	4b31      	ldr	r3, [pc, #196]	; (8015214 <GetKWh+0xfc>)
 801514e:	edd3 7a00 	vldr	s15, [r3]
 8015152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015156:	ee17 0a90 	vmov	r0, s15
 801515a:	f7fb fa0d 	bl	8010578 <__aeabi_f2d>
 801515e:	4602      	mov	r2, r0
 8015160:	460b      	mov	r3, r1
 8015162:	f04f 0000 	mov.w	r0, #0
 8015166:	4929      	ldr	r1, [pc, #164]	; (801520c <GetKWh+0xf4>)
 8015168:	f7fb fb88 	bl	801087c <__aeabi_ddiv>
 801516c:	4602      	mov	r2, r0
 801516e:	460b      	mov	r3, r1
 8015170:	4620      	mov	r0, r4
 8015172:	4629      	mov	r1, r5
 8015174:	f7fb fa58 	bl	8010628 <__aeabi_dmul>
 8015178:	4602      	mov	r2, r0
 801517a:	460b      	mov	r3, r1
 801517c:	4610      	mov	r0, r2
 801517e:	4619      	mov	r1, r3
 8015180:	a31d      	add	r3, pc, #116	; (adr r3, 80151f8 <GetKWh+0xe0>)
 8015182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015186:	f7fb fa4f 	bl	8010628 <__aeabi_dmul>
 801518a:	4602      	mov	r2, r0
 801518c:	460b      	mov	r3, r1
 801518e:	4610      	mov	r0, r2
 8015190:	4619      	mov	r1, r3
 8015192:	a31b      	add	r3, pc, #108	; (adr r3, 8015200 <GetKWh+0xe8>)
 8015194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015198:	f7fb fa46 	bl	8010628 <__aeabi_dmul>
 801519c:	4602      	mov	r2, r0
 801519e:	460b      	mov	r3, r1
 80151a0:	4610      	mov	r0, r2
 80151a2:	4619      	mov	r1, r3
 80151a4:	f7fb fd38 	bl	8010c18 <__aeabi_d2f>
 80151a8:	4603      	mov	r3, r0
 80151aa:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 80151ac:	f7ff ff8e 	bl	80150cc <GetTestPulse>
 80151b0:	4603      	mov	r3, r0
 80151b2:	041c      	lsls	r4, r3, #16
 80151b4:	f7ff ffa2 	bl	80150fc <GetPFReg>
 80151b8:	4603      	mov	r3, r0
 80151ba:	4423      	add	r3, r4
 80151bc:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	ee07 3a90 	vmov	s15, r3
 80151c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80151c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80151cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80151d0:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 80151d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80151d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80151dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151e0:	d501      	bpl.n	80151e6 <GetKWh+0xce>
 80151e2:	4b0d      	ldr	r3, [pc, #52]	; (8015218 <GetKWh+0x100>)
 80151e4:	60fb      	str	r3, [r7, #12]

	return kWh;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	ee07 3a90 	vmov	s15, r3
}
 80151ec:	eeb0 0a67 	vmov.f32	s0, s15
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bdb0      	pop	{r4, r5, r7, pc}
 80151f6:	bf00      	nop
 80151f8:	00000000 	.word	0x00000000
 80151fc:	41cdcd65 	.word	0x41cdcd65
 8015200:	00000000 	.word	0x00000000
 8015204:	40ac2000 	.word	0x40ac2000
 8015208:	200008e8 	.word	0x200008e8
 801520c:	3ff00000 	.word	0x3ff00000
 8015210:	200000b4 	.word	0x200000b4
 8015214:	200000b8 	.word	0x200000b8
 8015218:	3089705f 	.word	0x3089705f

0801521c <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 801521c:	b480      	push	{r7}
 801521e:	af00      	add	r7, sp, #0
 8015220:	bf00      	nop
 8015222:	46bd      	mov	sp, r7
 8015224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015228:	4770      	bx	lr
	...

0801522c <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 801522c:	b480      	push	{r7}
 801522e:	b085      	sub	sp, #20
 8015230:	af00      	add	r7, sp, #0
 8015232:	60f8      	str	r0, [r7, #12]
 8015234:	60b9      	str	r1, [r7, #8]
 8015236:	607a      	str	r2, [r7, #4]
 8015238:	603b      	str	r3, [r7, #0]

	if (chip_select){
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d003      	beq.n	8015248 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8015240:	4a0e      	ldr	r2, [pc, #56]	; (801527c <SPI_flash_reg_cb+0x50>)
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	60d3      	str	r3, [r2, #12]
 8015246:	e002      	b.n	801524e <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8015248:	4b0c      	ldr	r3, [pc, #48]	; (801527c <SPI_flash_reg_cb+0x50>)
 801524a:	4a0d      	ldr	r2, [pc, #52]	; (8015280 <SPI_flash_reg_cb+0x54>)
 801524c:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d003      	beq.n	801525c <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8015254:	4a09      	ldr	r2, [pc, #36]	; (801527c <SPI_flash_reg_cb+0x50>)
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	6113      	str	r3, [r2, #16]
 801525a:	e002      	b.n	8015262 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 801525c:	4b07      	ldr	r3, [pc, #28]	; (801527c <SPI_flash_reg_cb+0x50>)
 801525e:	4a08      	ldr	r2, [pc, #32]	; (8015280 <SPI_flash_reg_cb+0x54>)
 8015260:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8015262:	4a06      	ldr	r2, [pc, #24]	; (801527c <SPI_flash_reg_cb+0x50>)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8015268:	4a04      	ldr	r2, [pc, #16]	; (801527c <SPI_flash_reg_cb+0x50>)
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	6093      	str	r3, [r2, #8]

}
 801526e:	bf00      	nop
 8015270:	3714      	adds	r7, #20
 8015272:	46bd      	mov	sp, r7
 8015274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015278:	4770      	bx	lr
 801527a:	bf00      	nop
 801527c:	20000904 	.word	0x20000904
 8015280:	0801521d 	.word	0x0801521d

08015284 <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8015284:	b580      	push	{r7, lr}
 8015286:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8015288:	f000 f89c 	bl	80153c4 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 801528c:	2066      	movs	r0, #102	; 0x66
 801528e:	f000 fa1f 	bl	80156d0 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8015292:	2099      	movs	r0, #153	; 0x99
 8015294:	f000 fa1c 	bl	80156d0 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015298:	f000 f89e 	bl	80153d8 <sFLASH_CS_HIGH>
}
 801529c:	bf00      	nop
 801529e:	bd80      	pop	{r7, pc}

080152a0 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 80152a0:	b590      	push	{r4, r7, lr}
 80152a2:	b085      	sub	sp, #20
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 80152a8:	f7ff ffec 	bl	8015284 <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 80152ac:	f000 f9d2 	bl	8015654 <sFLASH_ReadID>
 80152b0:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	4a3e      	ldr	r2, [pc, #248]	; (80153b0 <sFLASH_GetInfo+0x110>)
 80152b6:	4293      	cmp	r3, r2
 80152b8:	d03f      	beq.n	801533a <sFLASH_GetInfo+0x9a>
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	4a3c      	ldr	r2, [pc, #240]	; (80153b0 <sFLASH_GetInfo+0x110>)
 80152be:	4293      	cmp	r3, r2
 80152c0:	d867      	bhi.n	8015392 <sFLASH_GetInfo+0xf2>
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	4a3b      	ldr	r2, [pc, #236]	; (80153b4 <sFLASH_GetInfo+0x114>)
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d021      	beq.n	801530e <sFLASH_GetInfo+0x6e>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	4a39      	ldr	r2, [pc, #228]	; (80153b4 <sFLASH_GetInfo+0x114>)
 80152ce:	4293      	cmp	r3, r2
 80152d0:	d85f      	bhi.n	8015392 <sFLASH_GetInfo+0xf2>
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	4a38      	ldr	r2, [pc, #224]	; (80153b8 <sFLASH_GetInfo+0x118>)
 80152d6:	4293      	cmp	r3, r2
 80152d8:	d045      	beq.n	8015366 <sFLASH_GetInfo+0xc6>
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	4a37      	ldr	r2, [pc, #220]	; (80153bc <sFLASH_GetInfo+0x11c>)
 80152de:	4293      	cmp	r3, r2
 80152e0:	d157      	bne.n	8015392 <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 80152e2:	4b37      	ldr	r3, [pc, #220]	; (80153c0 <sFLASH_GetInfo+0x120>)
 80152e4:	4a35      	ldr	r2, [pc, #212]	; (80153bc <sFLASH_GetInfo+0x11c>)
 80152e6:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80152e8:	4b35      	ldr	r3, [pc, #212]	; (80153c0 <sFLASH_GetInfo+0x120>)
 80152ea:	2201      	movs	r2, #1
 80152ec:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80152ee:	4b34      	ldr	r3, [pc, #208]	; (80153c0 <sFLASH_GetInfo+0x120>)
 80152f0:	2201      	movs	r2, #1
 80152f2:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80152f4:	4b32      	ldr	r3, [pc, #200]	; (80153c0 <sFLASH_GetInfo+0x120>)
 80152f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80152fa:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80152fc:	4b30      	ldr	r3, [pc, #192]	; (80153c0 <sFLASH_GetInfo+0x120>)
 80152fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015302:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8015304:	4b2e      	ldr	r3, [pc, #184]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015306:	f44f 7200 	mov.w	r2, #512	; 0x200
 801530a:	819a      	strh	r2, [r3, #12]
			break;
 801530c:	e045      	b.n	801539a <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 801530e:	4b2c      	ldr	r3, [pc, #176]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015310:	4a28      	ldr	r2, [pc, #160]	; (80153b4 <sFLASH_GetInfo+0x114>)
 8015312:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015314:	4b2a      	ldr	r3, [pc, #168]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015316:	2201      	movs	r2, #1
 8015318:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 801531a:	4b29      	ldr	r3, [pc, #164]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801531c:	2201      	movs	r2, #1
 801531e:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015320:	4b27      	ldr	r3, [pc, #156]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015326:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015328:	4b25      	ldr	r3, [pc, #148]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801532a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801532e:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015330:	4b23      	ldr	r3, [pc, #140]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015332:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015336:	819a      	strh	r2, [r3, #12]
			break;
 8015338:	e02f      	b.n	801539a <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 801533a:	4b21      	ldr	r3, [pc, #132]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801533c:	4a1c      	ldr	r2, [pc, #112]	; (80153b0 <sFLASH_GetInfo+0x110>)
 801533e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015340:	4b1f      	ldr	r3, [pc, #124]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015342:	2201      	movs	r2, #1
 8015344:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015346:	4b1e      	ldr	r3, [pc, #120]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015348:	2201      	movs	r2, #1
 801534a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801534c:	4b1c      	ldr	r3, [pc, #112]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801534e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015352:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015354:	4b1a      	ldr	r3, [pc, #104]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015356:	f44f 7280 	mov.w	r2, #256	; 0x100
 801535a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 801535c:	4b18      	ldr	r3, [pc, #96]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801535e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015362:	819a      	strh	r2, [r3, #12]
			break;
 8015364:	e019      	b.n	801539a <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8015366:	4b16      	ldr	r3, [pc, #88]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015368:	4a13      	ldr	r2, [pc, #76]	; (80153b8 <sFLASH_GetInfo+0x118>)
 801536a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801536c:	4b14      	ldr	r3, [pc, #80]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801536e:	2201      	movs	r2, #1
 8015370:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015372:	4b13      	ldr	r3, [pc, #76]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015374:	2201      	movs	r2, #1
 8015376:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015378:	4b11      	ldr	r3, [pc, #68]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801537a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801537e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015380:	4b0f      	ldr	r3, [pc, #60]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015386:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015388:	4b0d      	ldr	r3, [pc, #52]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801538a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801538e:	819a      	strh	r2, [r3, #12]
			break;
 8015390:	e003      	b.n	801539a <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015392:	4b0b      	ldr	r3, [pc, #44]	; (80153c0 <sFLASH_GetInfo+0x120>)
 8015394:	2200      	movs	r2, #0
 8015396:	601a      	str	r2, [r3, #0]
			break;
 8015398:	bf00      	nop
	}

	return flash_info;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	4a08      	ldr	r2, [pc, #32]	; (80153c0 <sFLASH_GetInfo+0x120>)
 801539e:	461c      	mov	r4, r3
 80153a0:	4613      	mov	r3, r2
 80153a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80153a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	3714      	adds	r7, #20
 80153ac:	46bd      	mov	sp, r7
 80153ae:	bd90      	pop	{r4, r7, pc}
 80153b0:	00ef4017 	.word	0x00ef4017
 80153b4:	00ef4016 	.word	0x00ef4016
 80153b8:	00c22016 	.word	0x00c22016
 80153bc:	00ef4015 	.word	0x00ef4015
 80153c0:	20000918 	.word	0x20000918

080153c4 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 80153c4:	b580      	push	{r7, lr}
 80153c6:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 80153c8:	4b02      	ldr	r3, [pc, #8]	; (80153d4 <sFLASH_CS_LOW+0x10>)
 80153ca:	68db      	ldr	r3, [r3, #12]
 80153cc:	4798      	blx	r3

}
 80153ce:	bf00      	nop
 80153d0:	bd80      	pop	{r7, pc}
 80153d2:	bf00      	nop
 80153d4:	20000904 	.word	0x20000904

080153d8 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 80153d8:	b580      	push	{r7, lr}
 80153da:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 80153dc:	4b02      	ldr	r3, [pc, #8]	; (80153e8 <sFLASH_CS_HIGH+0x10>)
 80153de:	691b      	ldr	r3, [r3, #16]
 80153e0:	4798      	blx	r3
}
 80153e2:	bf00      	nop
 80153e4:	bd80      	pop	{r7, pc}
 80153e6:	bf00      	nop
 80153e8:	20000904 	.word	0x20000904

080153ec <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 80153f4:	f000 f97c 	bl	80156f0 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80153f8:	f7ff ffe4 	bl	80153c4 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 80153fc:	2020      	movs	r0, #32
 80153fe:	f000 f967 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	0c1b      	lsrs	r3, r3, #16
 8015406:	b2db      	uxtb	r3, r3
 8015408:	4618      	mov	r0, r3
 801540a:	f000 f961 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	0a1b      	lsrs	r3, r3, #8
 8015412:	b2db      	uxtb	r3, r3
 8015414:	4618      	mov	r0, r3
 8015416:	f000 f95b 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	b2db      	uxtb	r3, r3
 801541e:	4618      	mov	r0, r3
 8015420:	f000 f956 	bl	80156d0 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015424:	f7ff ffd8 	bl	80153d8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015428:	f000 f96d 	bl	8015706 <sFLASH_WaitForWriteEnd>
}
 801542c:	bf00      	nop
 801542e:	3708      	adds	r7, #8
 8015430:	46bd      	mov	sp, r7
 8015432:	bd80      	pop	{r7, pc}

08015434 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8015434:	b580      	push	{r7, lr}
 8015436:	b084      	sub	sp, #16
 8015438:	af00      	add	r7, sp, #0
 801543a:	60f8      	str	r0, [r7, #12]
 801543c:	60b9      	str	r1, [r7, #8]
 801543e:	4613      	mov	r3, r2
 8015440:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8015442:	f000 f955 	bl	80156f0 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015446:	f7ff ffbd 	bl	80153c4 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 801544a:	2002      	movs	r0, #2
 801544c:	f000 f940 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	0c1b      	lsrs	r3, r3, #16
 8015454:	b2db      	uxtb	r3, r3
 8015456:	4618      	mov	r0, r3
 8015458:	f000 f93a 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	0a1b      	lsrs	r3, r3, #8
 8015460:	b2db      	uxtb	r3, r3
 8015462:	4618      	mov	r0, r3
 8015464:	f000 f934 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	b2db      	uxtb	r3, r3
 801546c:	4618      	mov	r0, r3
 801546e:	f000 f92f 	bl	80156d0 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8015472:	e007      	b.n	8015484 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	4618      	mov	r0, r3
 801547a:	f000 f929 	bl	80156d0 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	3301      	adds	r3, #1
 8015482:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8015484:	88fb      	ldrh	r3, [r7, #6]
 8015486:	1e5a      	subs	r2, r3, #1
 8015488:	80fa      	strh	r2, [r7, #6]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d1f2      	bne.n	8015474 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801548e:	f7ff ffa3 	bl	80153d8 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015492:	f000 f938 	bl	8015706 <sFLASH_WaitForWriteEnd>
}
 8015496:	bf00      	nop
 8015498:	3710      	adds	r7, #16
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}

0801549e <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 801549e:	b580      	push	{r7, lr}
 80154a0:	b086      	sub	sp, #24
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	60f8      	str	r0, [r7, #12]
 80154a6:	60b9      	str	r1, [r7, #8]
 80154a8:	4613      	mov	r3, r2
 80154aa:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 80154ac:	2300      	movs	r3, #0
 80154ae:	75fb      	strb	r3, [r7, #23]
 80154b0:	2300      	movs	r3, #0
 80154b2:	75bb      	strb	r3, [r7, #22]
 80154b4:	2300      	movs	r3, #0
 80154b6:	757b      	strb	r3, [r7, #21]
 80154b8:	2300      	movs	r3, #0
 80154ba:	753b      	strb	r3, [r7, #20]
 80154bc:	2300      	movs	r3, #0
 80154be:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 80154c4:	7d7b      	ldrb	r3, [r7, #21]
 80154c6:	425b      	negs	r3, r3
 80154c8:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 80154ca:	88fb      	ldrh	r3, [r7, #6]
 80154cc:	0a1b      	lsrs	r3, r3, #8
 80154ce:	b29b      	uxth	r3, r3
 80154d0:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 80154d2:	88fb      	ldrh	r3, [r7, #6]
 80154d4:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 80154d6:	7d7b      	ldrb	r3, [r7, #21]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d124      	bne.n	8015526 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80154dc:	7dfb      	ldrb	r3, [r7, #23]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d114      	bne.n	801550c <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80154e2:	88fb      	ldrh	r3, [r7, #6]
 80154e4:	461a      	mov	r2, r3
 80154e6:	68b9      	ldr	r1, [r7, #8]
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f7ff ffa3 	bl	8015434 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80154ee:	e07b      	b.n	80155e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80154f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80154f4:	68b9      	ldr	r1, [r7, #8]
 80154f6:	68f8      	ldr	r0, [r7, #12]
 80154f8:	f7ff ff9c 	bl	8015434 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80154fc:	68bb      	ldr	r3, [r7, #8]
 80154fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015502:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801550a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 801550c:	7dfb      	ldrb	r3, [r7, #23]
 801550e:	1e5a      	subs	r2, r3, #1
 8015510:	75fa      	strb	r2, [r7, #23]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d1ec      	bne.n	80154f0 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015516:	7dbb      	ldrb	r3, [r7, #22]
 8015518:	b29b      	uxth	r3, r3
 801551a:	461a      	mov	r2, r3
 801551c:	68b9      	ldr	r1, [r7, #8]
 801551e:	68f8      	ldr	r0, [r7, #12]
 8015520:	f7ff ff88 	bl	8015434 <sFLASH_WritePage>
}
 8015524:	e060      	b.n	80155e8 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015526:	7dfb      	ldrb	r3, [r7, #23]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d125      	bne.n	8015578 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 801552c:	7dba      	ldrb	r2, [r7, #22]
 801552e:	7d3b      	ldrb	r3, [r7, #20]
 8015530:	429a      	cmp	r2, r3
 8015532:	d91a      	bls.n	801556a <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 8015534:	7dba      	ldrb	r2, [r7, #22]
 8015536:	7d3b      	ldrb	r3, [r7, #20]
 8015538:	1ad3      	subs	r3, r2, r3
 801553a:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 801553c:	7d3b      	ldrb	r3, [r7, #20]
 801553e:	b29b      	uxth	r3, r3
 8015540:	461a      	mov	r2, r3
 8015542:	68b9      	ldr	r1, [r7, #8]
 8015544:	68f8      	ldr	r0, [r7, #12]
 8015546:	f7ff ff75 	bl	8015434 <sFLASH_WritePage>
        WriteAddr +=  count;
 801554a:	7d3b      	ldrb	r3, [r7, #20]
 801554c:	68ba      	ldr	r2, [r7, #8]
 801554e:	4413      	add	r3, r2
 8015550:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8015552:	7d3b      	ldrb	r3, [r7, #20]
 8015554:	68fa      	ldr	r2, [r7, #12]
 8015556:	4413      	add	r3, r2
 8015558:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 801555a:	7cfb      	ldrb	r3, [r7, #19]
 801555c:	b29b      	uxth	r3, r3
 801555e:	461a      	mov	r2, r3
 8015560:	68b9      	ldr	r1, [r7, #8]
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f7ff ff66 	bl	8015434 <sFLASH_WritePage>
}
 8015568:	e03e      	b.n	80155e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801556a:	88fb      	ldrh	r3, [r7, #6]
 801556c:	461a      	mov	r2, r3
 801556e:	68b9      	ldr	r1, [r7, #8]
 8015570:	68f8      	ldr	r0, [r7, #12]
 8015572:	f7ff ff5f 	bl	8015434 <sFLASH_WritePage>
}
 8015576:	e037      	b.n	80155e8 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8015578:	7d3b      	ldrb	r3, [r7, #20]
 801557a:	b29b      	uxth	r3, r3
 801557c:	88fa      	ldrh	r2, [r7, #6]
 801557e:	1ad3      	subs	r3, r2, r3
 8015580:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015582:	88fb      	ldrh	r3, [r7, #6]
 8015584:	0a1b      	lsrs	r3, r3, #8
 8015586:	b29b      	uxth	r3, r3
 8015588:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801558a:	88fb      	ldrh	r3, [r7, #6]
 801558c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 801558e:	7d3b      	ldrb	r3, [r7, #20]
 8015590:	b29b      	uxth	r3, r3
 8015592:	461a      	mov	r2, r3
 8015594:	68b9      	ldr	r1, [r7, #8]
 8015596:	68f8      	ldr	r0, [r7, #12]
 8015598:	f7ff ff4c 	bl	8015434 <sFLASH_WritePage>
      WriteAddr +=  count;
 801559c:	7d3b      	ldrb	r3, [r7, #20]
 801559e:	68ba      	ldr	r2, [r7, #8]
 80155a0:	4413      	add	r3, r2
 80155a2:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 80155a4:	7d3b      	ldrb	r3, [r7, #20]
 80155a6:	68fa      	ldr	r2, [r7, #12]
 80155a8:	4413      	add	r3, r2
 80155aa:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80155ac:	e00d      	b.n	80155ca <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80155ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80155b2:	68b9      	ldr	r1, [r7, #8]
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f7ff ff3d 	bl	8015434 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80155c0:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80155c8:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80155ca:	7dfb      	ldrb	r3, [r7, #23]
 80155cc:	1e5a      	subs	r2, r3, #1
 80155ce:	75fa      	strb	r2, [r7, #23]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d1ec      	bne.n	80155ae <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 80155d4:	7dbb      	ldrb	r3, [r7, #22]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d006      	beq.n	80155e8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80155da:	7dbb      	ldrb	r3, [r7, #22]
 80155dc:	b29b      	uxth	r3, r3
 80155de:	461a      	mov	r2, r3
 80155e0:	68b9      	ldr	r1, [r7, #8]
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	f7ff ff26 	bl	8015434 <sFLASH_WritePage>
}
 80155e8:	bf00      	nop
 80155ea:	3718      	adds	r7, #24
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b084      	sub	sp, #16
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	60f8      	str	r0, [r7, #12]
 80155f8:	60b9      	str	r1, [r7, #8]
 80155fa:	4613      	mov	r3, r2
 80155fc:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80155fe:	f7ff fee1 	bl	80153c4 <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 8015602:	2003      	movs	r0, #3
 8015604:	f000 f864 	bl	80156d0 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	0c1b      	lsrs	r3, r3, #16
 801560c:	b2db      	uxtb	r3, r3
 801560e:	4618      	mov	r0, r3
 8015610:	f000 f85e 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	0a1b      	lsrs	r3, r3, #8
 8015618:	b2db      	uxtb	r3, r3
 801561a:	4618      	mov	r0, r3
 801561c:	f000 f858 	bl	80156d0 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	b2db      	uxtb	r3, r3
 8015624:	4618      	mov	r0, r3
 8015626:	f000 f853 	bl	80156d0 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 801562a:	e008      	b.n	801563e <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 801562c:	f000 f846 	bl	80156bc <sFLASH_ReadByte>
 8015630:	4603      	mov	r3, r0
 8015632:	461a      	mov	r2, r3
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	3301      	adds	r3, #1
 801563c:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 801563e:	88fb      	ldrh	r3, [r7, #6]
 8015640:	1e5a      	subs	r2, r3, #1
 8015642:	80fa      	strh	r2, [r7, #6]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d1f1      	bne.n	801562c <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015648:	f7ff fec6 	bl	80153d8 <sFLASH_CS_HIGH>
}
 801564c:	bf00      	nop
 801564e:	3710      	adds	r7, #16
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}

08015654 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8015654:	b580      	push	{r7, lr}
 8015656:	b084      	sub	sp, #16
 8015658:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 801565a:	2300      	movs	r3, #0
 801565c:	60fb      	str	r3, [r7, #12]
 801565e:	2300      	movs	r3, #0
 8015660:	60bb      	str	r3, [r7, #8]
 8015662:	2300      	movs	r3, #0
 8015664:	607b      	str	r3, [r7, #4]
 8015666:	2300      	movs	r3, #0
 8015668:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801566a:	f7ff feab 	bl	80153c4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801566e:	f7ff feb3 	bl	80153d8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015672:	f7ff fea7 	bl	80153c4 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015676:	f7ff feaf 	bl	80153d8 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801567a:	f7ff fea3 	bl	80153c4 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 801567e:	209f      	movs	r0, #159	; 0x9f
 8015680:	f000 f826 	bl	80156d0 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8015684:	f000 f81a 	bl	80156bc <sFLASH_ReadByte>
 8015688:	4603      	mov	r3, r0
 801568a:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 801568c:	f000 f816 	bl	80156bc <sFLASH_ReadByte>
 8015690:	4603      	mov	r3, r0
 8015692:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8015694:	f000 f812 	bl	80156bc <sFLASH_ReadByte>
 8015698:	4603      	mov	r3, r0
 801569a:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801569c:	f7ff fe9c 	bl	80153d8 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	041a      	lsls	r2, r3, #16
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	021b      	lsls	r3, r3, #8
 80156a8:	4313      	orrs	r3, r2
 80156aa:	683a      	ldr	r2, [r7, #0]
 80156ac:	4313      	orrs	r3, r2
 80156ae:	60fb      	str	r3, [r7, #12]

  return Temp;
 80156b0:	68fb      	ldr	r3, [r7, #12]
}
 80156b2:	4618      	mov	r0, r3
 80156b4:	3710      	adds	r7, #16
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
	...

080156bc <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 80156c0:	4b02      	ldr	r3, [pc, #8]	; (80156cc <sFLASH_ReadByte+0x10>)
 80156c2:	685b      	ldr	r3, [r3, #4]
 80156c4:	4798      	blx	r3
 80156c6:	4603      	mov	r3, r0
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	20000904 	.word	0x20000904

080156d0 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 80156d0:	b580      	push	{r7, lr}
 80156d2:	b082      	sub	sp, #8
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	4603      	mov	r3, r0
 80156d8:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 80156da:	4b04      	ldr	r3, [pc, #16]	; (80156ec <sFLASH_SendByte+0x1c>)
 80156dc:	689b      	ldr	r3, [r3, #8]
 80156de:	79fa      	ldrb	r2, [r7, #7]
 80156e0:	4610      	mov	r0, r2
 80156e2:	4798      	blx	r3
}
 80156e4:	bf00      	nop
 80156e6:	3708      	adds	r7, #8
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}
 80156ec:	20000904 	.word	0x20000904

080156f0 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80156f0:	b580      	push	{r7, lr}
 80156f2:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80156f4:	f7ff fe66 	bl	80153c4 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80156f8:	2006      	movs	r0, #6
 80156fa:	f7ff ffe9 	bl	80156d0 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80156fe:	f7ff fe6b 	bl	80153d8 <sFLASH_CS_HIGH>
}
 8015702:	bf00      	nop
 8015704:	bd80      	pop	{r7, pc}

08015706 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 8015706:	b580      	push	{r7, lr}
 8015708:	b082      	sub	sp, #8
 801570a:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 801570c:	2300      	movs	r3, #0
 801570e:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015710:	f7ff fe58 	bl	80153c4 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 8015714:	2005      	movs	r0, #5
 8015716:	f7ff ffdb 	bl	80156d0 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 801571a:	f7ff ffcf 	bl	80156bc <sFLASH_ReadByte>
 801571e:	4603      	mov	r3, r0
 8015720:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 8015722:	79fb      	ldrb	r3, [r7, #7]
 8015724:	f003 0301 	and.w	r3, r3, #1
 8015728:	2b00      	cmp	r3, #0
 801572a:	d1f6      	bne.n	801571a <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801572c:	f7ff fe54 	bl	80153d8 <sFLASH_CS_HIGH>
}
 8015730:	bf00      	nop
 8015732:	3708      	adds	r7, #8
 8015734:	46bd      	mov	sp, r7
 8015736:	bd80      	pop	{r7, pc}

08015738 <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 8015738:	b084      	sub	sp, #16
 801573a:	b580      	push	{r7, lr}
 801573c:	af00      	add	r7, sp, #0
 801573e:	f107 0c08 	add.w	ip, r7, #8
 8015742:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 8015746:	4b07      	ldr	r3, [pc, #28]	; (8015764 <SPI_flash_set+0x2c>)
 8015748:	4618      	mov	r0, r3
 801574a:	f107 0308 	add.w	r3, r7, #8
 801574e:	2258      	movs	r2, #88	; 0x58
 8015750:	4619      	mov	r1, r3
 8015752:	f018 fba0 	bl	802de96 <memcpy>
}
 8015756:	bf00      	nop
 8015758:	46bd      	mov	sp, r7
 801575a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801575e:	b004      	add	sp, #16
 8015760:	4770      	bx	lr
 8015762:	bf00      	nop
 8015764:	20000928 	.word	0x20000928

08015768 <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 801576e:	1df9      	adds	r1, r7, #7
 8015770:	f241 3388 	movw	r3, #5000	; 0x1388
 8015774:	2201      	movs	r2, #1
 8015776:	4804      	ldr	r0, [pc, #16]	; (8015788 <SPI_flash_read_byte+0x20>)
 8015778:	f001 fa8a 	bl	8016c90 <HAL_SPI_Receive>
	return byte;
 801577c:	79fb      	ldrb	r3, [r7, #7]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	20000928 	.word	0x20000928

0801578c <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 801578c:	b580      	push	{r7, lr}
 801578e:	b082      	sub	sp, #8
 8015790:	af00      	add	r7, sp, #0
 8015792:	4603      	mov	r3, r0
 8015794:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 8015796:	1df9      	adds	r1, r7, #7
 8015798:	f241 3388 	movw	r3, #5000	; 0x1388
 801579c:	2201      	movs	r2, #1
 801579e:	4803      	ldr	r0, [pc, #12]	; (80157ac <SPI_flash_send_byte+0x20>)
 80157a0:	f001 f933 	bl	8016a0a <HAL_SPI_Transmit>

}
 80157a4:	bf00      	nop
 80157a6:	3708      	adds	r7, #8
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20000928 	.word	0x20000928

080157b0 <SPI_flash_select>:

void SPI_flash_select(void){
 80157b0:	b580      	push	{r7, lr}
 80157b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80157b4:	2200      	movs	r2, #0
 80157b6:	2110      	movs	r1, #16
 80157b8:	4802      	ldr	r0, [pc, #8]	; (80157c4 <SPI_flash_select+0x14>)
 80157ba:	f000 fb67 	bl	8015e8c <HAL_GPIO_WritePin>
}
 80157be:	bf00      	nop
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	40020000 	.word	0x40020000

080157c8 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 80157c8:	b580      	push	{r7, lr}
 80157ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80157cc:	2201      	movs	r2, #1
 80157ce:	2110      	movs	r1, #16
 80157d0:	4802      	ldr	r0, [pc, #8]	; (80157dc <SPI_flash_deselect+0x14>)
 80157d2:	f000 fb5b 	bl	8015e8c <HAL_GPIO_WritePin>
}
 80157d6:	bf00      	nop
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	40020000 	.word	0x40020000

080157e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80157e4:	4b0e      	ldr	r3, [pc, #56]	; (8015820 <HAL_Init+0x40>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	4a0d      	ldr	r2, [pc, #52]	; (8015820 <HAL_Init+0x40>)
 80157ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80157ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80157f0:	4b0b      	ldr	r3, [pc, #44]	; (8015820 <HAL_Init+0x40>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	4a0a      	ldr	r2, [pc, #40]	; (8015820 <HAL_Init+0x40>)
 80157f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80157fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80157fc:	4b08      	ldr	r3, [pc, #32]	; (8015820 <HAL_Init+0x40>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	4a07      	ldr	r2, [pc, #28]	; (8015820 <HAL_Init+0x40>)
 8015802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015808:	2003      	movs	r0, #3
 801580a:	f000 f8d8 	bl	80159be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 801580e:	200f      	movs	r0, #15
 8015810:	f7fd f96e 	bl	8012af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015814:	f7fd f850 	bl	80128b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015818:	2300      	movs	r3, #0
}
 801581a:	4618      	mov	r0, r3
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	40023c00 	.word	0x40023c00

08015824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015824:	b480      	push	{r7}
 8015826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015828:	4b06      	ldr	r3, [pc, #24]	; (8015844 <HAL_IncTick+0x20>)
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	461a      	mov	r2, r3
 801582e:	4b06      	ldr	r3, [pc, #24]	; (8015848 <HAL_IncTick+0x24>)
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	4413      	add	r3, r2
 8015834:	4a04      	ldr	r2, [pc, #16]	; (8015848 <HAL_IncTick+0x24>)
 8015836:	6013      	str	r3, [r2, #0]
}
 8015838:	bf00      	nop
 801583a:	46bd      	mov	sp, r7
 801583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015840:	4770      	bx	lr
 8015842:	bf00      	nop
 8015844:	200000c0 	.word	0x200000c0
 8015848:	20000980 	.word	0x20000980

0801584c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801584c:	b480      	push	{r7}
 801584e:	af00      	add	r7, sp, #0
  return uwTick;
 8015850:	4b03      	ldr	r3, [pc, #12]	; (8015860 <HAL_GetTick+0x14>)
 8015852:	681b      	ldr	r3, [r3, #0]
}
 8015854:	4618      	mov	r0, r3
 8015856:	46bd      	mov	sp, r7
 8015858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	20000980 	.word	0x20000980

08015864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015864:	b480      	push	{r7}
 8015866:	b085      	sub	sp, #20
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f003 0307 	and.w	r3, r3, #7
 8015872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015874:	4b0c      	ldr	r3, [pc, #48]	; (80158a8 <__NVIC_SetPriorityGrouping+0x44>)
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801587a:	68ba      	ldr	r2, [r7, #8]
 801587c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015880:	4013      	ands	r3, r2
 8015882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801588c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015896:	4a04      	ldr	r2, [pc, #16]	; (80158a8 <__NVIC_SetPriorityGrouping+0x44>)
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	60d3      	str	r3, [r2, #12]
}
 801589c:	bf00      	nop
 801589e:	3714      	adds	r7, #20
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr
 80158a8:	e000ed00 	.word	0xe000ed00

080158ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80158ac:	b480      	push	{r7}
 80158ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80158b0:	4b04      	ldr	r3, [pc, #16]	; (80158c4 <__NVIC_GetPriorityGrouping+0x18>)
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	0a1b      	lsrs	r3, r3, #8
 80158b6:	f003 0307 	and.w	r3, r3, #7
}
 80158ba:	4618      	mov	r0, r3
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr
 80158c4:	e000ed00 	.word	0xe000ed00

080158c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80158c8:	b480      	push	{r7}
 80158ca:	b083      	sub	sp, #12
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	4603      	mov	r3, r0
 80158d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80158d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	db0b      	blt.n	80158f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80158da:	79fb      	ldrb	r3, [r7, #7]
 80158dc:	f003 021f 	and.w	r2, r3, #31
 80158e0:	4907      	ldr	r1, [pc, #28]	; (8015900 <__NVIC_EnableIRQ+0x38>)
 80158e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158e6:	095b      	lsrs	r3, r3, #5
 80158e8:	2001      	movs	r0, #1
 80158ea:	fa00 f202 	lsl.w	r2, r0, r2
 80158ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80158f2:	bf00      	nop
 80158f4:	370c      	adds	r7, #12
 80158f6:	46bd      	mov	sp, r7
 80158f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fc:	4770      	bx	lr
 80158fe:	bf00      	nop
 8015900:	e000e100 	.word	0xe000e100

08015904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8015904:	b480      	push	{r7}
 8015906:	b083      	sub	sp, #12
 8015908:	af00      	add	r7, sp, #0
 801590a:	4603      	mov	r3, r0
 801590c:	6039      	str	r1, [r7, #0]
 801590e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015914:	2b00      	cmp	r3, #0
 8015916:	db0a      	blt.n	801592e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	b2da      	uxtb	r2, r3
 801591c:	490c      	ldr	r1, [pc, #48]	; (8015950 <__NVIC_SetPriority+0x4c>)
 801591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015922:	0112      	lsls	r2, r2, #4
 8015924:	b2d2      	uxtb	r2, r2
 8015926:	440b      	add	r3, r1
 8015928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801592c:	e00a      	b.n	8015944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	b2da      	uxtb	r2, r3
 8015932:	4908      	ldr	r1, [pc, #32]	; (8015954 <__NVIC_SetPriority+0x50>)
 8015934:	79fb      	ldrb	r3, [r7, #7]
 8015936:	f003 030f 	and.w	r3, r3, #15
 801593a:	3b04      	subs	r3, #4
 801593c:	0112      	lsls	r2, r2, #4
 801593e:	b2d2      	uxtb	r2, r2
 8015940:	440b      	add	r3, r1
 8015942:	761a      	strb	r2, [r3, #24]
}
 8015944:	bf00      	nop
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr
 8015950:	e000e100 	.word	0xe000e100
 8015954:	e000ed00 	.word	0xe000ed00

08015958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015958:	b480      	push	{r7}
 801595a:	b089      	sub	sp, #36	; 0x24
 801595c:	af00      	add	r7, sp, #0
 801595e:	60f8      	str	r0, [r7, #12]
 8015960:	60b9      	str	r1, [r7, #8]
 8015962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f003 0307 	and.w	r3, r3, #7
 801596a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801596c:	69fb      	ldr	r3, [r7, #28]
 801596e:	f1c3 0307 	rsb	r3, r3, #7
 8015972:	2b04      	cmp	r3, #4
 8015974:	bf28      	it	cs
 8015976:	2304      	movcs	r3, #4
 8015978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801597a:	69fb      	ldr	r3, [r7, #28]
 801597c:	3304      	adds	r3, #4
 801597e:	2b06      	cmp	r3, #6
 8015980:	d902      	bls.n	8015988 <NVIC_EncodePriority+0x30>
 8015982:	69fb      	ldr	r3, [r7, #28]
 8015984:	3b03      	subs	r3, #3
 8015986:	e000      	b.n	801598a <NVIC_EncodePriority+0x32>
 8015988:	2300      	movs	r3, #0
 801598a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801598c:	f04f 32ff 	mov.w	r2, #4294967295
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	fa02 f303 	lsl.w	r3, r2, r3
 8015996:	43da      	mvns	r2, r3
 8015998:	68bb      	ldr	r3, [r7, #8]
 801599a:	401a      	ands	r2, r3
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80159a0:	f04f 31ff 	mov.w	r1, #4294967295
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	fa01 f303 	lsl.w	r3, r1, r3
 80159aa:	43d9      	mvns	r1, r3
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80159b0:	4313      	orrs	r3, r2
         );
}
 80159b2:	4618      	mov	r0, r3
 80159b4:	3724      	adds	r7, #36	; 0x24
 80159b6:	46bd      	mov	sp, r7
 80159b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159bc:	4770      	bx	lr

080159be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80159be:	b580      	push	{r7, lr}
 80159c0:	b082      	sub	sp, #8
 80159c2:	af00      	add	r7, sp, #0
 80159c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f7ff ff4c 	bl	8015864 <__NVIC_SetPriorityGrouping>
}
 80159cc:	bf00      	nop
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b086      	sub	sp, #24
 80159d8:	af00      	add	r7, sp, #0
 80159da:	4603      	mov	r3, r0
 80159dc:	60b9      	str	r1, [r7, #8]
 80159de:	607a      	str	r2, [r7, #4]
 80159e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80159e2:	2300      	movs	r3, #0
 80159e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80159e6:	f7ff ff61 	bl	80158ac <__NVIC_GetPriorityGrouping>
 80159ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80159ec:	687a      	ldr	r2, [r7, #4]
 80159ee:	68b9      	ldr	r1, [r7, #8]
 80159f0:	6978      	ldr	r0, [r7, #20]
 80159f2:	f7ff ffb1 	bl	8015958 <NVIC_EncodePriority>
 80159f6:	4602      	mov	r2, r0
 80159f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159fc:	4611      	mov	r1, r2
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff ff80 	bl	8015904 <__NVIC_SetPriority>
}
 8015a04:	bf00      	nop
 8015a06:	3718      	adds	r7, #24
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b082      	sub	sp, #8
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	4603      	mov	r3, r0
 8015a14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8015a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7ff ff54 	bl	80158c8 <__NVIC_EnableIRQ>
}
 8015a20:	bf00      	nop
 8015a22:	3708      	adds	r7, #8
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d101      	bne.n	8015a3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8015a36:	2301      	movs	r3, #1
 8015a38:	e00e      	b.n	8015a58 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	795b      	ldrb	r3, [r3, #5]
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d105      	bne.n	8015a50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2200      	movs	r2, #0
 8015a48:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f7fc ff60 	bl	8012910 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2201      	movs	r2, #1
 8015a54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8015a56:	2300      	movs	r3, #0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3708      	adds	r7, #8
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b084      	sub	sp, #16
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a6c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8015a6e:	f7ff feed 	bl	801584c <HAL_GetTick>
 8015a72:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015a7a:	b2db      	uxtb	r3, r3
 8015a7c:	2b02      	cmp	r3, #2
 8015a7e:	d008      	beq.n	8015a92 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2280      	movs	r2, #128	; 0x80
 8015a84:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2200      	movs	r2, #0
 8015a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8015a8e:	2301      	movs	r3, #1
 8015a90:	e052      	b.n	8015b38 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	681a      	ldr	r2, [r3, #0]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	f022 0216 	bic.w	r2, r2, #22
 8015aa0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	695a      	ldr	r2, [r3, #20]
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015ab0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d103      	bne.n	8015ac2 <HAL_DMA_Abort+0x62>
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d007      	beq.n	8015ad2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	681a      	ldr	r2, [r3, #0]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f022 0208 	bic.w	r2, r2, #8
 8015ad0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	681a      	ldr	r2, [r3, #0]
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	f022 0201 	bic.w	r2, r2, #1
 8015ae0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015ae2:	e013      	b.n	8015b0c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015ae4:	f7ff feb2 	bl	801584c <HAL_GetTick>
 8015ae8:	4602      	mov	r2, r0
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	1ad3      	subs	r3, r2, r3
 8015aee:	2b05      	cmp	r3, #5
 8015af0:	d90c      	bls.n	8015b0c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2220      	movs	r2, #32
 8015af6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	2203      	movs	r2, #3
 8015afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	2200      	movs	r2, #0
 8015b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8015b08:	2303      	movs	r3, #3
 8015b0a:	e015      	b.n	8015b38 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	f003 0301 	and.w	r3, r3, #1
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d1e4      	bne.n	8015ae4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b1e:	223f      	movs	r2, #63	; 0x3f
 8015b20:	409a      	lsls	r2, r3
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	2201      	movs	r2, #1
 8015b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	2200      	movs	r2, #0
 8015b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8015b36:	2300      	movs	r3, #0
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3710      	adds	r7, #16
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015b40:	b480      	push	{r7}
 8015b42:	b083      	sub	sp, #12
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015b4e:	b2db      	uxtb	r3, r3
 8015b50:	2b02      	cmp	r3, #2
 8015b52:	d004      	beq.n	8015b5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2280      	movs	r2, #128	; 0x80
 8015b58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	e00c      	b.n	8015b78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2205      	movs	r2, #5
 8015b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	681a      	ldr	r2, [r3, #0]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	f022 0201 	bic.w	r2, r2, #1
 8015b74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015b76:	2300      	movs	r3, #0
}
 8015b78:	4618      	mov	r0, r3
 8015b7a:	370c      	adds	r7, #12
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b82:	4770      	bx	lr

08015b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015b84:	b480      	push	{r7}
 8015b86:	b089      	sub	sp, #36	; 0x24
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015b8e:	2300      	movs	r3, #0
 8015b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015b92:	2300      	movs	r3, #0
 8015b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015b96:	2300      	movs	r3, #0
 8015b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015b9a:	2300      	movs	r3, #0
 8015b9c:	61fb      	str	r3, [r7, #28]
 8015b9e:	e159      	b.n	8015e54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015ba0:	2201      	movs	r2, #1
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8015ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	697a      	ldr	r2, [r7, #20]
 8015bb0:	4013      	ands	r3, r2
 8015bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015bb4:	693a      	ldr	r2, [r7, #16]
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	f040 8148 	bne.w	8015e4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015bbe:	683b      	ldr	r3, [r7, #0]
 8015bc0:	685b      	ldr	r3, [r3, #4]
 8015bc2:	f003 0303 	and.w	r3, r3, #3
 8015bc6:	2b01      	cmp	r3, #1
 8015bc8:	d005      	beq.n	8015bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015bca:	683b      	ldr	r3, [r7, #0]
 8015bcc:	685b      	ldr	r3, [r3, #4]
 8015bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015bd2:	2b02      	cmp	r3, #2
 8015bd4:	d130      	bne.n	8015c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	689b      	ldr	r3, [r3, #8]
 8015bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015bdc:	69fb      	ldr	r3, [r7, #28]
 8015bde:	005b      	lsls	r3, r3, #1
 8015be0:	2203      	movs	r2, #3
 8015be2:	fa02 f303 	lsl.w	r3, r2, r3
 8015be6:	43db      	mvns	r3, r3
 8015be8:	69ba      	ldr	r2, [r7, #24]
 8015bea:	4013      	ands	r3, r2
 8015bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	68da      	ldr	r2, [r3, #12]
 8015bf2:	69fb      	ldr	r3, [r7, #28]
 8015bf4:	005b      	lsls	r3, r3, #1
 8015bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8015bfa:	69ba      	ldr	r2, [r7, #24]
 8015bfc:	4313      	orrs	r3, r2
 8015bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	69ba      	ldr	r2, [r7, #24]
 8015c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	685b      	ldr	r3, [r3, #4]
 8015c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015c0c:	2201      	movs	r2, #1
 8015c0e:	69fb      	ldr	r3, [r7, #28]
 8015c10:	fa02 f303 	lsl.w	r3, r2, r3
 8015c14:	43db      	mvns	r3, r3
 8015c16:	69ba      	ldr	r2, [r7, #24]
 8015c18:	4013      	ands	r3, r2
 8015c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	091b      	lsrs	r3, r3, #4
 8015c22:	f003 0201 	and.w	r2, r3, #1
 8015c26:	69fb      	ldr	r3, [r7, #28]
 8015c28:	fa02 f303 	lsl.w	r3, r2, r3
 8015c2c:	69ba      	ldr	r2, [r7, #24]
 8015c2e:	4313      	orrs	r3, r2
 8015c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	69ba      	ldr	r2, [r7, #24]
 8015c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	685b      	ldr	r3, [r3, #4]
 8015c3c:	f003 0303 	and.w	r3, r3, #3
 8015c40:	2b03      	cmp	r3, #3
 8015c42:	d017      	beq.n	8015c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	68db      	ldr	r3, [r3, #12]
 8015c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015c4a:	69fb      	ldr	r3, [r7, #28]
 8015c4c:	005b      	lsls	r3, r3, #1
 8015c4e:	2203      	movs	r2, #3
 8015c50:	fa02 f303 	lsl.w	r3, r2, r3
 8015c54:	43db      	mvns	r3, r3
 8015c56:	69ba      	ldr	r2, [r7, #24]
 8015c58:	4013      	ands	r3, r2
 8015c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	689a      	ldr	r2, [r3, #8]
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	fa02 f303 	lsl.w	r3, r2, r3
 8015c68:	69ba      	ldr	r2, [r7, #24]
 8015c6a:	4313      	orrs	r3, r2
 8015c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	69ba      	ldr	r2, [r7, #24]
 8015c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015c74:	683b      	ldr	r3, [r7, #0]
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	f003 0303 	and.w	r3, r3, #3
 8015c7c:	2b02      	cmp	r3, #2
 8015c7e:	d123      	bne.n	8015cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	08da      	lsrs	r2, r3, #3
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	3208      	adds	r2, #8
 8015c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	f003 0307 	and.w	r3, r3, #7
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	220f      	movs	r2, #15
 8015c98:	fa02 f303 	lsl.w	r3, r2, r3
 8015c9c:	43db      	mvns	r3, r3
 8015c9e:	69ba      	ldr	r2, [r7, #24]
 8015ca0:	4013      	ands	r3, r2
 8015ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015ca4:	683b      	ldr	r3, [r7, #0]
 8015ca6:	691a      	ldr	r2, [r3, #16]
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	f003 0307 	and.w	r3, r3, #7
 8015cae:	009b      	lsls	r3, r3, #2
 8015cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8015cb4:	69ba      	ldr	r2, [r7, #24]
 8015cb6:	4313      	orrs	r3, r2
 8015cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015cba:	69fb      	ldr	r3, [r7, #28]
 8015cbc:	08da      	lsrs	r2, r3, #3
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	3208      	adds	r2, #8
 8015cc2:	69b9      	ldr	r1, [r7, #24]
 8015cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015cce:	69fb      	ldr	r3, [r7, #28]
 8015cd0:	005b      	lsls	r3, r3, #1
 8015cd2:	2203      	movs	r2, #3
 8015cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8015cd8:	43db      	mvns	r3, r3
 8015cda:	69ba      	ldr	r2, [r7, #24]
 8015cdc:	4013      	ands	r3, r2
 8015cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015ce0:	683b      	ldr	r3, [r7, #0]
 8015ce2:	685b      	ldr	r3, [r3, #4]
 8015ce4:	f003 0203 	and.w	r2, r3, #3
 8015ce8:	69fb      	ldr	r3, [r7, #28]
 8015cea:	005b      	lsls	r3, r3, #1
 8015cec:	fa02 f303 	lsl.w	r3, r2, r3
 8015cf0:	69ba      	ldr	r2, [r7, #24]
 8015cf2:	4313      	orrs	r3, r2
 8015cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	69ba      	ldr	r2, [r7, #24]
 8015cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	f000 80a2 	beq.w	8015e4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015d0a:	2300      	movs	r3, #0
 8015d0c:	60fb      	str	r3, [r7, #12]
 8015d0e:	4b57      	ldr	r3, [pc, #348]	; (8015e6c <HAL_GPIO_Init+0x2e8>)
 8015d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d12:	4a56      	ldr	r2, [pc, #344]	; (8015e6c <HAL_GPIO_Init+0x2e8>)
 8015d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015d18:	6453      	str	r3, [r2, #68]	; 0x44
 8015d1a:	4b54      	ldr	r3, [pc, #336]	; (8015e6c <HAL_GPIO_Init+0x2e8>)
 8015d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d22:	60fb      	str	r3, [r7, #12]
 8015d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015d26:	4a52      	ldr	r2, [pc, #328]	; (8015e70 <HAL_GPIO_Init+0x2ec>)
 8015d28:	69fb      	ldr	r3, [r7, #28]
 8015d2a:	089b      	lsrs	r3, r3, #2
 8015d2c:	3302      	adds	r3, #2
 8015d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015d34:	69fb      	ldr	r3, [r7, #28]
 8015d36:	f003 0303 	and.w	r3, r3, #3
 8015d3a:	009b      	lsls	r3, r3, #2
 8015d3c:	220f      	movs	r2, #15
 8015d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8015d42:	43db      	mvns	r3, r3
 8015d44:	69ba      	ldr	r2, [r7, #24]
 8015d46:	4013      	ands	r3, r2
 8015d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	4a49      	ldr	r2, [pc, #292]	; (8015e74 <HAL_GPIO_Init+0x2f0>)
 8015d4e:	4293      	cmp	r3, r2
 8015d50:	d019      	beq.n	8015d86 <HAL_GPIO_Init+0x202>
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	4a48      	ldr	r2, [pc, #288]	; (8015e78 <HAL_GPIO_Init+0x2f4>)
 8015d56:	4293      	cmp	r3, r2
 8015d58:	d013      	beq.n	8015d82 <HAL_GPIO_Init+0x1fe>
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	4a47      	ldr	r2, [pc, #284]	; (8015e7c <HAL_GPIO_Init+0x2f8>)
 8015d5e:	4293      	cmp	r3, r2
 8015d60:	d00d      	beq.n	8015d7e <HAL_GPIO_Init+0x1fa>
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	4a46      	ldr	r2, [pc, #280]	; (8015e80 <HAL_GPIO_Init+0x2fc>)
 8015d66:	4293      	cmp	r3, r2
 8015d68:	d007      	beq.n	8015d7a <HAL_GPIO_Init+0x1f6>
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	4a45      	ldr	r2, [pc, #276]	; (8015e84 <HAL_GPIO_Init+0x300>)
 8015d6e:	4293      	cmp	r3, r2
 8015d70:	d101      	bne.n	8015d76 <HAL_GPIO_Init+0x1f2>
 8015d72:	2304      	movs	r3, #4
 8015d74:	e008      	b.n	8015d88 <HAL_GPIO_Init+0x204>
 8015d76:	2307      	movs	r3, #7
 8015d78:	e006      	b.n	8015d88 <HAL_GPIO_Init+0x204>
 8015d7a:	2303      	movs	r3, #3
 8015d7c:	e004      	b.n	8015d88 <HAL_GPIO_Init+0x204>
 8015d7e:	2302      	movs	r3, #2
 8015d80:	e002      	b.n	8015d88 <HAL_GPIO_Init+0x204>
 8015d82:	2301      	movs	r3, #1
 8015d84:	e000      	b.n	8015d88 <HAL_GPIO_Init+0x204>
 8015d86:	2300      	movs	r3, #0
 8015d88:	69fa      	ldr	r2, [r7, #28]
 8015d8a:	f002 0203 	and.w	r2, r2, #3
 8015d8e:	0092      	lsls	r2, r2, #2
 8015d90:	4093      	lsls	r3, r2
 8015d92:	69ba      	ldr	r2, [r7, #24]
 8015d94:	4313      	orrs	r3, r2
 8015d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015d98:	4935      	ldr	r1, [pc, #212]	; (8015e70 <HAL_GPIO_Init+0x2ec>)
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	089b      	lsrs	r3, r3, #2
 8015d9e:	3302      	adds	r3, #2
 8015da0:	69ba      	ldr	r2, [r7, #24]
 8015da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015da6:	4b38      	ldr	r3, [pc, #224]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015da8:	689b      	ldr	r3, [r3, #8]
 8015daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	43db      	mvns	r3, r3
 8015db0:	69ba      	ldr	r2, [r7, #24]
 8015db2:	4013      	ands	r3, r2
 8015db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015db6:	683b      	ldr	r3, [r7, #0]
 8015db8:	685b      	ldr	r3, [r3, #4]
 8015dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d003      	beq.n	8015dca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015dc2:	69ba      	ldr	r2, [r7, #24]
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	4313      	orrs	r3, r2
 8015dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015dca:	4a2f      	ldr	r2, [pc, #188]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015dcc:	69bb      	ldr	r3, [r7, #24]
 8015dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015dd0:	4b2d      	ldr	r3, [pc, #180]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015dd2:	68db      	ldr	r3, [r3, #12]
 8015dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	43db      	mvns	r3, r3
 8015dda:	69ba      	ldr	r2, [r7, #24]
 8015ddc:	4013      	ands	r3, r2
 8015dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d003      	beq.n	8015df4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015dec:	69ba      	ldr	r2, [r7, #24]
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	4313      	orrs	r3, r2
 8015df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015df4:	4a24      	ldr	r2, [pc, #144]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015df6:	69bb      	ldr	r3, [r7, #24]
 8015df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015dfa:	4b23      	ldr	r3, [pc, #140]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015dfc:	685b      	ldr	r3, [r3, #4]
 8015dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	43db      	mvns	r3, r3
 8015e04:	69ba      	ldr	r2, [r7, #24]
 8015e06:	4013      	ands	r3, r2
 8015e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015e0a:	683b      	ldr	r3, [r7, #0]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d003      	beq.n	8015e1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8015e16:	69ba      	ldr	r2, [r7, #24]
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	4313      	orrs	r3, r2
 8015e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015e1e:	4a1a      	ldr	r2, [pc, #104]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015e20:	69bb      	ldr	r3, [r7, #24]
 8015e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015e24:	4b18      	ldr	r3, [pc, #96]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	43db      	mvns	r3, r3
 8015e2e:	69ba      	ldr	r2, [r7, #24]
 8015e30:	4013      	ands	r3, r2
 8015e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	685b      	ldr	r3, [r3, #4]
 8015e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d003      	beq.n	8015e48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015e40:	69ba      	ldr	r2, [r7, #24]
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	4313      	orrs	r3, r2
 8015e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015e48:	4a0f      	ldr	r2, [pc, #60]	; (8015e88 <HAL_GPIO_Init+0x304>)
 8015e4a:	69bb      	ldr	r3, [r7, #24]
 8015e4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015e4e:	69fb      	ldr	r3, [r7, #28]
 8015e50:	3301      	adds	r3, #1
 8015e52:	61fb      	str	r3, [r7, #28]
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	2b0f      	cmp	r3, #15
 8015e58:	f67f aea2 	bls.w	8015ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015e5c:	bf00      	nop
 8015e5e:	bf00      	nop
 8015e60:	3724      	adds	r7, #36	; 0x24
 8015e62:	46bd      	mov	sp, r7
 8015e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e68:	4770      	bx	lr
 8015e6a:	bf00      	nop
 8015e6c:	40023800 	.word	0x40023800
 8015e70:	40013800 	.word	0x40013800
 8015e74:	40020000 	.word	0x40020000
 8015e78:	40020400 	.word	0x40020400
 8015e7c:	40020800 	.word	0x40020800
 8015e80:	40020c00 	.word	0x40020c00
 8015e84:	40021000 	.word	0x40021000
 8015e88:	40013c00 	.word	0x40013c00

08015e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015e8c:	b480      	push	{r7}
 8015e8e:	b083      	sub	sp, #12
 8015e90:	af00      	add	r7, sp, #0
 8015e92:	6078      	str	r0, [r7, #4]
 8015e94:	460b      	mov	r3, r1
 8015e96:	807b      	strh	r3, [r7, #2]
 8015e98:	4613      	mov	r3, r2
 8015e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015e9c:	787b      	ldrb	r3, [r7, #1]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d003      	beq.n	8015eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015ea2:	887a      	ldrh	r2, [r7, #2]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015ea8:	e003      	b.n	8015eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015eaa:	887b      	ldrh	r3, [r7, #2]
 8015eac:	041a      	lsls	r2, r3, #16
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	619a      	str	r2, [r3, #24]
}
 8015eb2:	bf00      	nop
 8015eb4:	370c      	adds	r7, #12
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebc:	4770      	bx	lr

08015ebe <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015ebe:	b580      	push	{r7, lr}
 8015ec0:	b084      	sub	sp, #16
 8015ec2:	af00      	add	r7, sp, #0
 8015ec4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d101      	bne.n	8015ed0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	e034      	b.n	8015f3a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8015ed8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	f245 5255 	movw	r2, #21845	; 0x5555
 8015ee2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	687a      	ldr	r2, [r7, #4]
 8015eea:	6852      	ldr	r2, [r2, #4]
 8015eec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	687a      	ldr	r2, [r7, #4]
 8015ef4:	6892      	ldr	r2, [r2, #8]
 8015ef6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015ef8:	f7ff fca8 	bl	801584c <HAL_GetTick>
 8015efc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015efe:	e00f      	b.n	8015f20 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015f00:	f7ff fca4 	bl	801584c <HAL_GetTick>
 8015f04:	4602      	mov	r2, r0
 8015f06:	68fb      	ldr	r3, [r7, #12]
 8015f08:	1ad3      	subs	r3, r2, r3
 8015f0a:	2b31      	cmp	r3, #49	; 0x31
 8015f0c:	d908      	bls.n	8015f20 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	681b      	ldr	r3, [r3, #0]
 8015f12:	68db      	ldr	r3, [r3, #12]
 8015f14:	f003 0303 	and.w	r3, r3, #3
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d001      	beq.n	8015f20 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8015f1c:	2303      	movs	r3, #3
 8015f1e:	e00c      	b.n	8015f3a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	68db      	ldr	r3, [r3, #12]
 8015f26:	f003 0303 	and.w	r3, r3, #3
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d1e8      	bne.n	8015f00 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015f36:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015f38:	2300      	movs	r3, #0
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3710      	adds	r7, #16
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}

08015f42 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015f42:	b480      	push	{r7}
 8015f44:	b083      	sub	sp, #12
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015f52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015f54:	2300      	movs	r3, #0
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	370c      	adds	r7, #12
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f60:	4770      	bx	lr
	...

08015f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b086      	sub	sp, #24
 8015f68:	af00      	add	r7, sp, #0
 8015f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d101      	bne.n	8015f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015f72:	2301      	movs	r3, #1
 8015f74:	e267      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f003 0301 	and.w	r3, r3, #1
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d075      	beq.n	801606e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015f82:	4b88      	ldr	r3, [pc, #544]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015f84:	689b      	ldr	r3, [r3, #8]
 8015f86:	f003 030c 	and.w	r3, r3, #12
 8015f8a:	2b04      	cmp	r3, #4
 8015f8c:	d00c      	beq.n	8015fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015f8e:	4b85      	ldr	r3, [pc, #532]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015f90:	689b      	ldr	r3, [r3, #8]
 8015f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015f96:	2b08      	cmp	r3, #8
 8015f98:	d112      	bne.n	8015fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015f9a:	4b82      	ldr	r3, [pc, #520]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015f9c:	685b      	ldr	r3, [r3, #4]
 8015f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015fa6:	d10b      	bne.n	8015fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015fa8:	4b7e      	ldr	r3, [pc, #504]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d05b      	beq.n	801606c <HAL_RCC_OscConfig+0x108>
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	685b      	ldr	r3, [r3, #4]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d157      	bne.n	801606c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8015fbc:	2301      	movs	r3, #1
 8015fbe:	e242      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015fc8:	d106      	bne.n	8015fd8 <HAL_RCC_OscConfig+0x74>
 8015fca:	4b76      	ldr	r3, [pc, #472]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	4a75      	ldr	r2, [pc, #468]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015fd4:	6013      	str	r3, [r2, #0]
 8015fd6:	e01d      	b.n	8016014 <HAL_RCC_OscConfig+0xb0>
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	685b      	ldr	r3, [r3, #4]
 8015fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015fe0:	d10c      	bne.n	8015ffc <HAL_RCC_OscConfig+0x98>
 8015fe2:	4b70      	ldr	r3, [pc, #448]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4a6f      	ldr	r2, [pc, #444]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015fec:	6013      	str	r3, [r2, #0]
 8015fee:	4b6d      	ldr	r3, [pc, #436]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	4a6c      	ldr	r2, [pc, #432]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015ff8:	6013      	str	r3, [r2, #0]
 8015ffa:	e00b      	b.n	8016014 <HAL_RCC_OscConfig+0xb0>
 8015ffc:	4b69      	ldr	r3, [pc, #420]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	4a68      	ldr	r2, [pc, #416]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016006:	6013      	str	r3, [r2, #0]
 8016008:	4b66      	ldr	r3, [pc, #408]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	4a65      	ldr	r2, [pc, #404]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 801600e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8016012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	685b      	ldr	r3, [r3, #4]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d013      	beq.n	8016044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801601c:	f7ff fc16 	bl	801584c <HAL_GetTick>
 8016020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016022:	e008      	b.n	8016036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8016024:	f7ff fc12 	bl	801584c <HAL_GetTick>
 8016028:	4602      	mov	r2, r0
 801602a:	693b      	ldr	r3, [r7, #16]
 801602c:	1ad3      	subs	r3, r2, r3
 801602e:	2b64      	cmp	r3, #100	; 0x64
 8016030:	d901      	bls.n	8016036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8016032:	2303      	movs	r3, #3
 8016034:	e207      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8016036:	4b5b      	ldr	r3, [pc, #364]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801603e:	2b00      	cmp	r3, #0
 8016040:	d0f0      	beq.n	8016024 <HAL_RCC_OscConfig+0xc0>
 8016042:	e014      	b.n	801606e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016044:	f7ff fc02 	bl	801584c <HAL_GetTick>
 8016048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801604a:	e008      	b.n	801605e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801604c:	f7ff fbfe 	bl	801584c <HAL_GetTick>
 8016050:	4602      	mov	r2, r0
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	1ad3      	subs	r3, r2, r3
 8016056:	2b64      	cmp	r3, #100	; 0x64
 8016058:	d901      	bls.n	801605e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801605a:	2303      	movs	r3, #3
 801605c:	e1f3      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801605e:	4b51      	ldr	r3, [pc, #324]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016066:	2b00      	cmp	r3, #0
 8016068:	d1f0      	bne.n	801604c <HAL_RCC_OscConfig+0xe8>
 801606a:	e000      	b.n	801606e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801606c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	f003 0302 	and.w	r3, r3, #2
 8016076:	2b00      	cmp	r3, #0
 8016078:	d063      	beq.n	8016142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801607a:	4b4a      	ldr	r3, [pc, #296]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 801607c:	689b      	ldr	r3, [r3, #8]
 801607e:	f003 030c 	and.w	r3, r3, #12
 8016082:	2b00      	cmp	r3, #0
 8016084:	d00b      	beq.n	801609e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016086:	4b47      	ldr	r3, [pc, #284]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016088:	689b      	ldr	r3, [r3, #8]
 801608a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801608e:	2b08      	cmp	r3, #8
 8016090:	d11c      	bne.n	80160cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016092:	4b44      	ldr	r3, [pc, #272]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016094:	685b      	ldr	r3, [r3, #4]
 8016096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801609a:	2b00      	cmp	r3, #0
 801609c:	d116      	bne.n	80160cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801609e:	4b41      	ldr	r3, [pc, #260]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	f003 0302 	and.w	r3, r3, #2
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d005      	beq.n	80160b6 <HAL_RCC_OscConfig+0x152>
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	68db      	ldr	r3, [r3, #12]
 80160ae:	2b01      	cmp	r3, #1
 80160b0:	d001      	beq.n	80160b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80160b2:	2301      	movs	r3, #1
 80160b4:	e1c7      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80160b6:	4b3b      	ldr	r3, [pc, #236]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	691b      	ldr	r3, [r3, #16]
 80160c2:	00db      	lsls	r3, r3, #3
 80160c4:	4937      	ldr	r1, [pc, #220]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 80160c6:	4313      	orrs	r3, r2
 80160c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80160ca:	e03a      	b.n	8016142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	68db      	ldr	r3, [r3, #12]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d020      	beq.n	8016116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80160d4:	4b34      	ldr	r3, [pc, #208]	; (80161a8 <HAL_RCC_OscConfig+0x244>)
 80160d6:	2201      	movs	r2, #1
 80160d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80160da:	f7ff fbb7 	bl	801584c <HAL_GetTick>
 80160de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80160e0:	e008      	b.n	80160f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80160e2:	f7ff fbb3 	bl	801584c <HAL_GetTick>
 80160e6:	4602      	mov	r2, r0
 80160e8:	693b      	ldr	r3, [r7, #16]
 80160ea:	1ad3      	subs	r3, r2, r3
 80160ec:	2b02      	cmp	r3, #2
 80160ee:	d901      	bls.n	80160f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80160f0:	2303      	movs	r3, #3
 80160f2:	e1a8      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80160f4:	4b2b      	ldr	r3, [pc, #172]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	f003 0302 	and.w	r3, r3, #2
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d0f0      	beq.n	80160e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016100:	4b28      	ldr	r3, [pc, #160]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	691b      	ldr	r3, [r3, #16]
 801610c:	00db      	lsls	r3, r3, #3
 801610e:	4925      	ldr	r1, [pc, #148]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016110:	4313      	orrs	r3, r2
 8016112:	600b      	str	r3, [r1, #0]
 8016114:	e015      	b.n	8016142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016116:	4b24      	ldr	r3, [pc, #144]	; (80161a8 <HAL_RCC_OscConfig+0x244>)
 8016118:	2200      	movs	r2, #0
 801611a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801611c:	f7ff fb96 	bl	801584c <HAL_GetTick>
 8016120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016122:	e008      	b.n	8016136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8016124:	f7ff fb92 	bl	801584c <HAL_GetTick>
 8016128:	4602      	mov	r2, r0
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	1ad3      	subs	r3, r2, r3
 801612e:	2b02      	cmp	r3, #2
 8016130:	d901      	bls.n	8016136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8016132:	2303      	movs	r3, #3
 8016134:	e187      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8016136:	4b1b      	ldr	r3, [pc, #108]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	f003 0302 	and.w	r3, r3, #2
 801613e:	2b00      	cmp	r3, #0
 8016140:	d1f0      	bne.n	8016124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f003 0308 	and.w	r3, r3, #8
 801614a:	2b00      	cmp	r3, #0
 801614c:	d036      	beq.n	80161bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	695b      	ldr	r3, [r3, #20]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d016      	beq.n	8016184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016156:	4b15      	ldr	r3, [pc, #84]	; (80161ac <HAL_RCC_OscConfig+0x248>)
 8016158:	2201      	movs	r2, #1
 801615a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801615c:	f7ff fb76 	bl	801584c <HAL_GetTick>
 8016160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016162:	e008      	b.n	8016176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016164:	f7ff fb72 	bl	801584c <HAL_GetTick>
 8016168:	4602      	mov	r2, r0
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	1ad3      	subs	r3, r2, r3
 801616e:	2b02      	cmp	r3, #2
 8016170:	d901      	bls.n	8016176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8016172:	2303      	movs	r3, #3
 8016174:	e167      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016176:	4b0b      	ldr	r3, [pc, #44]	; (80161a4 <HAL_RCC_OscConfig+0x240>)
 8016178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801617a:	f003 0302 	and.w	r3, r3, #2
 801617e:	2b00      	cmp	r3, #0
 8016180:	d0f0      	beq.n	8016164 <HAL_RCC_OscConfig+0x200>
 8016182:	e01b      	b.n	80161bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016184:	4b09      	ldr	r3, [pc, #36]	; (80161ac <HAL_RCC_OscConfig+0x248>)
 8016186:	2200      	movs	r2, #0
 8016188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801618a:	f7ff fb5f 	bl	801584c <HAL_GetTick>
 801618e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016190:	e00e      	b.n	80161b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016192:	f7ff fb5b 	bl	801584c <HAL_GetTick>
 8016196:	4602      	mov	r2, r0
 8016198:	693b      	ldr	r3, [r7, #16]
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	2b02      	cmp	r3, #2
 801619e:	d907      	bls.n	80161b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80161a0:	2303      	movs	r3, #3
 80161a2:	e150      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
 80161a4:	40023800 	.word	0x40023800
 80161a8:	42470000 	.word	0x42470000
 80161ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80161b0:	4b88      	ldr	r3, [pc, #544]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80161b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161b4:	f003 0302 	and.w	r3, r3, #2
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d1ea      	bne.n	8016192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	f003 0304 	and.w	r3, r3, #4
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	f000 8097 	beq.w	80162f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80161ca:	2300      	movs	r3, #0
 80161cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80161ce:	4b81      	ldr	r3, [pc, #516]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80161d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d10f      	bne.n	80161fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80161da:	2300      	movs	r3, #0
 80161dc:	60bb      	str	r3, [r7, #8]
 80161de:	4b7d      	ldr	r3, [pc, #500]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80161e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161e2:	4a7c      	ldr	r2, [pc, #496]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80161e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80161e8:	6413      	str	r3, [r2, #64]	; 0x40
 80161ea:	4b7a      	ldr	r3, [pc, #488]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80161ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80161f2:	60bb      	str	r3, [r7, #8]
 80161f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80161f6:	2301      	movs	r3, #1
 80161f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80161fa:	4b77      	ldr	r3, [pc, #476]	; (80163d8 <HAL_RCC_OscConfig+0x474>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016202:	2b00      	cmp	r3, #0
 8016204:	d118      	bne.n	8016238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8016206:	4b74      	ldr	r3, [pc, #464]	; (80163d8 <HAL_RCC_OscConfig+0x474>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	4a73      	ldr	r2, [pc, #460]	; (80163d8 <HAL_RCC_OscConfig+0x474>)
 801620c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016212:	f7ff fb1b 	bl	801584c <HAL_GetTick>
 8016216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8016218:	e008      	b.n	801622c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801621a:	f7ff fb17 	bl	801584c <HAL_GetTick>
 801621e:	4602      	mov	r2, r0
 8016220:	693b      	ldr	r3, [r7, #16]
 8016222:	1ad3      	subs	r3, r2, r3
 8016224:	2b02      	cmp	r3, #2
 8016226:	d901      	bls.n	801622c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8016228:	2303      	movs	r3, #3
 801622a:	e10c      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801622c:	4b6a      	ldr	r3, [pc, #424]	; (80163d8 <HAL_RCC_OscConfig+0x474>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016234:	2b00      	cmp	r3, #0
 8016236:	d0f0      	beq.n	801621a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	689b      	ldr	r3, [r3, #8]
 801623c:	2b01      	cmp	r3, #1
 801623e:	d106      	bne.n	801624e <HAL_RCC_OscConfig+0x2ea>
 8016240:	4b64      	ldr	r3, [pc, #400]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016244:	4a63      	ldr	r2, [pc, #396]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016246:	f043 0301 	orr.w	r3, r3, #1
 801624a:	6713      	str	r3, [r2, #112]	; 0x70
 801624c:	e01c      	b.n	8016288 <HAL_RCC_OscConfig+0x324>
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	689b      	ldr	r3, [r3, #8]
 8016252:	2b05      	cmp	r3, #5
 8016254:	d10c      	bne.n	8016270 <HAL_RCC_OscConfig+0x30c>
 8016256:	4b5f      	ldr	r3, [pc, #380]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801625a:	4a5e      	ldr	r2, [pc, #376]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 801625c:	f043 0304 	orr.w	r3, r3, #4
 8016260:	6713      	str	r3, [r2, #112]	; 0x70
 8016262:	4b5c      	ldr	r3, [pc, #368]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016266:	4a5b      	ldr	r2, [pc, #364]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016268:	f043 0301 	orr.w	r3, r3, #1
 801626c:	6713      	str	r3, [r2, #112]	; 0x70
 801626e:	e00b      	b.n	8016288 <HAL_RCC_OscConfig+0x324>
 8016270:	4b58      	ldr	r3, [pc, #352]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016274:	4a57      	ldr	r2, [pc, #348]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016276:	f023 0301 	bic.w	r3, r3, #1
 801627a:	6713      	str	r3, [r2, #112]	; 0x70
 801627c:	4b55      	ldr	r3, [pc, #340]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 801627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016280:	4a54      	ldr	r2, [pc, #336]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016282:	f023 0304 	bic.w	r3, r3, #4
 8016286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	689b      	ldr	r3, [r3, #8]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d015      	beq.n	80162bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016290:	f7ff fadc 	bl	801584c <HAL_GetTick>
 8016294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016296:	e00a      	b.n	80162ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8016298:	f7ff fad8 	bl	801584c <HAL_GetTick>
 801629c:	4602      	mov	r2, r0
 801629e:	693b      	ldr	r3, [r7, #16]
 80162a0:	1ad3      	subs	r3, r2, r3
 80162a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80162a6:	4293      	cmp	r3, r2
 80162a8:	d901      	bls.n	80162ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80162aa:	2303      	movs	r3, #3
 80162ac:	e0cb      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80162ae:	4b49      	ldr	r3, [pc, #292]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80162b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162b2:	f003 0302 	and.w	r3, r3, #2
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d0ee      	beq.n	8016298 <HAL_RCC_OscConfig+0x334>
 80162ba:	e014      	b.n	80162e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80162bc:	f7ff fac6 	bl	801584c <HAL_GetTick>
 80162c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80162c2:	e00a      	b.n	80162da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80162c4:	f7ff fac2 	bl	801584c <HAL_GetTick>
 80162c8:	4602      	mov	r2, r0
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	1ad3      	subs	r3, r2, r3
 80162ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80162d2:	4293      	cmp	r3, r2
 80162d4:	d901      	bls.n	80162da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80162d6:	2303      	movs	r3, #3
 80162d8:	e0b5      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80162da:	4b3e      	ldr	r3, [pc, #248]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80162dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162de:	f003 0302 	and.w	r3, r3, #2
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d1ee      	bne.n	80162c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80162e6:	7dfb      	ldrb	r3, [r7, #23]
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d105      	bne.n	80162f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80162ec:	4b39      	ldr	r3, [pc, #228]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80162ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162f0:	4a38      	ldr	r2, [pc, #224]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80162f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80162f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	699b      	ldr	r3, [r3, #24]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	f000 80a1 	beq.w	8016444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8016302:	4b34      	ldr	r3, [pc, #208]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016304:	689b      	ldr	r3, [r3, #8]
 8016306:	f003 030c 	and.w	r3, r3, #12
 801630a:	2b08      	cmp	r3, #8
 801630c:	d05c      	beq.n	80163c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	699b      	ldr	r3, [r3, #24]
 8016312:	2b02      	cmp	r3, #2
 8016314:	d141      	bne.n	801639a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016316:	4b31      	ldr	r3, [pc, #196]	; (80163dc <HAL_RCC_OscConfig+0x478>)
 8016318:	2200      	movs	r2, #0
 801631a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801631c:	f7ff fa96 	bl	801584c <HAL_GetTick>
 8016320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016322:	e008      	b.n	8016336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016324:	f7ff fa92 	bl	801584c <HAL_GetTick>
 8016328:	4602      	mov	r2, r0
 801632a:	693b      	ldr	r3, [r7, #16]
 801632c:	1ad3      	subs	r3, r2, r3
 801632e:	2b02      	cmp	r3, #2
 8016330:	d901      	bls.n	8016336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8016332:	2303      	movs	r3, #3
 8016334:	e087      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016336:	4b27      	ldr	r3, [pc, #156]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801633e:	2b00      	cmp	r3, #0
 8016340:	d1f0      	bne.n	8016324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	69da      	ldr	r2, [r3, #28]
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6a1b      	ldr	r3, [r3, #32]
 801634a:	431a      	orrs	r2, r3
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016350:	019b      	lsls	r3, r3, #6
 8016352:	431a      	orrs	r2, r3
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016358:	085b      	lsrs	r3, r3, #1
 801635a:	3b01      	subs	r3, #1
 801635c:	041b      	lsls	r3, r3, #16
 801635e:	431a      	orrs	r2, r3
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016364:	061b      	lsls	r3, r3, #24
 8016366:	491b      	ldr	r1, [pc, #108]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 8016368:	4313      	orrs	r3, r2
 801636a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801636c:	4b1b      	ldr	r3, [pc, #108]	; (80163dc <HAL_RCC_OscConfig+0x478>)
 801636e:	2201      	movs	r2, #1
 8016370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016372:	f7ff fa6b 	bl	801584c <HAL_GetTick>
 8016376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016378:	e008      	b.n	801638c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801637a:	f7ff fa67 	bl	801584c <HAL_GetTick>
 801637e:	4602      	mov	r2, r0
 8016380:	693b      	ldr	r3, [r7, #16]
 8016382:	1ad3      	subs	r3, r2, r3
 8016384:	2b02      	cmp	r3, #2
 8016386:	d901      	bls.n	801638c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8016388:	2303      	movs	r3, #3
 801638a:	e05c      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801638c:	4b11      	ldr	r3, [pc, #68]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 801638e:	681b      	ldr	r3, [r3, #0]
 8016390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016394:	2b00      	cmp	r3, #0
 8016396:	d0f0      	beq.n	801637a <HAL_RCC_OscConfig+0x416>
 8016398:	e054      	b.n	8016444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801639a:	4b10      	ldr	r3, [pc, #64]	; (80163dc <HAL_RCC_OscConfig+0x478>)
 801639c:	2200      	movs	r2, #0
 801639e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80163a0:	f7ff fa54 	bl	801584c <HAL_GetTick>
 80163a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80163a6:	e008      	b.n	80163ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80163a8:	f7ff fa50 	bl	801584c <HAL_GetTick>
 80163ac:	4602      	mov	r2, r0
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	1ad3      	subs	r3, r2, r3
 80163b2:	2b02      	cmp	r3, #2
 80163b4:	d901      	bls.n	80163ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80163b6:	2303      	movs	r3, #3
 80163b8:	e045      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80163ba:	4b06      	ldr	r3, [pc, #24]	; (80163d4 <HAL_RCC_OscConfig+0x470>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d1f0      	bne.n	80163a8 <HAL_RCC_OscConfig+0x444>
 80163c6:	e03d      	b.n	8016444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	699b      	ldr	r3, [r3, #24]
 80163cc:	2b01      	cmp	r3, #1
 80163ce:	d107      	bne.n	80163e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80163d0:	2301      	movs	r3, #1
 80163d2:	e038      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
 80163d4:	40023800 	.word	0x40023800
 80163d8:	40007000 	.word	0x40007000
 80163dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80163e0:	4b1b      	ldr	r3, [pc, #108]	; (8016450 <HAL_RCC_OscConfig+0x4ec>)
 80163e2:	685b      	ldr	r3, [r3, #4]
 80163e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	699b      	ldr	r3, [r3, #24]
 80163ea:	2b01      	cmp	r3, #1
 80163ec:	d028      	beq.n	8016440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80163f8:	429a      	cmp	r2, r3
 80163fa:	d121      	bne.n	8016440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016406:	429a      	cmp	r2, r3
 8016408:	d11a      	bne.n	8016440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801640a:	68fa      	ldr	r2, [r7, #12]
 801640c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8016410:	4013      	ands	r3, r2
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8016416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016418:	4293      	cmp	r3, r2
 801641a:	d111      	bne.n	8016440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016426:	085b      	lsrs	r3, r3, #1
 8016428:	3b01      	subs	r3, #1
 801642a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801642c:	429a      	cmp	r2, r3
 801642e:	d107      	bne.n	8016440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801643a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801643c:	429a      	cmp	r2, r3
 801643e:	d001      	beq.n	8016444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8016440:	2301      	movs	r3, #1
 8016442:	e000      	b.n	8016446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8016444:	2300      	movs	r3, #0
}
 8016446:	4618      	mov	r0, r3
 8016448:	3718      	adds	r7, #24
 801644a:	46bd      	mov	sp, r7
 801644c:	bd80      	pop	{r7, pc}
 801644e:	bf00      	nop
 8016450:	40023800 	.word	0x40023800

08016454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	b084      	sub	sp, #16
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
 801645c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d101      	bne.n	8016468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016464:	2301      	movs	r3, #1
 8016466:	e0cc      	b.n	8016602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016468:	4b68      	ldr	r3, [pc, #416]	; (801660c <HAL_RCC_ClockConfig+0x1b8>)
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	f003 0307 	and.w	r3, r3, #7
 8016470:	683a      	ldr	r2, [r7, #0]
 8016472:	429a      	cmp	r2, r3
 8016474:	d90c      	bls.n	8016490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016476:	4b65      	ldr	r3, [pc, #404]	; (801660c <HAL_RCC_ClockConfig+0x1b8>)
 8016478:	683a      	ldr	r2, [r7, #0]
 801647a:	b2d2      	uxtb	r2, r2
 801647c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801647e:	4b63      	ldr	r3, [pc, #396]	; (801660c <HAL_RCC_ClockConfig+0x1b8>)
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	f003 0307 	and.w	r3, r3, #7
 8016486:	683a      	ldr	r2, [r7, #0]
 8016488:	429a      	cmp	r2, r3
 801648a:	d001      	beq.n	8016490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801648c:	2301      	movs	r3, #1
 801648e:	e0b8      	b.n	8016602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	f003 0302 	and.w	r3, r3, #2
 8016498:	2b00      	cmp	r3, #0
 801649a:	d020      	beq.n	80164de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	f003 0304 	and.w	r3, r3, #4
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d005      	beq.n	80164b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80164a8:	4b59      	ldr	r3, [pc, #356]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80164aa:	689b      	ldr	r3, [r3, #8]
 80164ac:	4a58      	ldr	r2, [pc, #352]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80164ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80164b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	f003 0308 	and.w	r3, r3, #8
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d005      	beq.n	80164cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80164c0:	4b53      	ldr	r3, [pc, #332]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80164c2:	689b      	ldr	r3, [r3, #8]
 80164c4:	4a52      	ldr	r2, [pc, #328]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80164c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80164ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80164cc:	4b50      	ldr	r3, [pc, #320]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80164ce:	689b      	ldr	r3, [r3, #8]
 80164d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	689b      	ldr	r3, [r3, #8]
 80164d8:	494d      	ldr	r1, [pc, #308]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80164da:	4313      	orrs	r3, r2
 80164dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	f003 0301 	and.w	r3, r3, #1
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d044      	beq.n	8016574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	685b      	ldr	r3, [r3, #4]
 80164ee:	2b01      	cmp	r3, #1
 80164f0:	d107      	bne.n	8016502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80164f2:	4b47      	ldr	r3, [pc, #284]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80164f4:	681b      	ldr	r3, [r3, #0]
 80164f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d119      	bne.n	8016532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80164fe:	2301      	movs	r3, #1
 8016500:	e07f      	b.n	8016602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	2b02      	cmp	r3, #2
 8016508:	d003      	beq.n	8016512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801650e:	2b03      	cmp	r3, #3
 8016510:	d107      	bne.n	8016522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016512:	4b3f      	ldr	r3, [pc, #252]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801651a:	2b00      	cmp	r3, #0
 801651c:	d109      	bne.n	8016532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801651e:	2301      	movs	r3, #1
 8016520:	e06f      	b.n	8016602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8016522:	4b3b      	ldr	r3, [pc, #236]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	f003 0302 	and.w	r3, r3, #2
 801652a:	2b00      	cmp	r3, #0
 801652c:	d101      	bne.n	8016532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801652e:	2301      	movs	r3, #1
 8016530:	e067      	b.n	8016602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8016532:	4b37      	ldr	r3, [pc, #220]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 8016534:	689b      	ldr	r3, [r3, #8]
 8016536:	f023 0203 	bic.w	r2, r3, #3
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	685b      	ldr	r3, [r3, #4]
 801653e:	4934      	ldr	r1, [pc, #208]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 8016540:	4313      	orrs	r3, r2
 8016542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016544:	f7ff f982 	bl	801584c <HAL_GetTick>
 8016548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801654a:	e00a      	b.n	8016562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801654c:	f7ff f97e 	bl	801584c <HAL_GetTick>
 8016550:	4602      	mov	r2, r0
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	1ad3      	subs	r3, r2, r3
 8016556:	f241 3288 	movw	r2, #5000	; 0x1388
 801655a:	4293      	cmp	r3, r2
 801655c:	d901      	bls.n	8016562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801655e:	2303      	movs	r3, #3
 8016560:	e04f      	b.n	8016602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016562:	4b2b      	ldr	r3, [pc, #172]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 8016564:	689b      	ldr	r3, [r3, #8]
 8016566:	f003 020c 	and.w	r2, r3, #12
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	009b      	lsls	r3, r3, #2
 8016570:	429a      	cmp	r2, r3
 8016572:	d1eb      	bne.n	801654c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8016574:	4b25      	ldr	r3, [pc, #148]	; (801660c <HAL_RCC_ClockConfig+0x1b8>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f003 0307 	and.w	r3, r3, #7
 801657c:	683a      	ldr	r2, [r7, #0]
 801657e:	429a      	cmp	r2, r3
 8016580:	d20c      	bcs.n	801659c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016582:	4b22      	ldr	r3, [pc, #136]	; (801660c <HAL_RCC_ClockConfig+0x1b8>)
 8016584:	683a      	ldr	r2, [r7, #0]
 8016586:	b2d2      	uxtb	r2, r2
 8016588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801658a:	4b20      	ldr	r3, [pc, #128]	; (801660c <HAL_RCC_ClockConfig+0x1b8>)
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	f003 0307 	and.w	r3, r3, #7
 8016592:	683a      	ldr	r2, [r7, #0]
 8016594:	429a      	cmp	r2, r3
 8016596:	d001      	beq.n	801659c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016598:	2301      	movs	r3, #1
 801659a:	e032      	b.n	8016602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	f003 0304 	and.w	r3, r3, #4
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d008      	beq.n	80165ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80165a8:	4b19      	ldr	r3, [pc, #100]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80165aa:	689b      	ldr	r3, [r3, #8]
 80165ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	68db      	ldr	r3, [r3, #12]
 80165b4:	4916      	ldr	r1, [pc, #88]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80165b6:	4313      	orrs	r3, r2
 80165b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	681b      	ldr	r3, [r3, #0]
 80165be:	f003 0308 	and.w	r3, r3, #8
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d009      	beq.n	80165da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80165c6:	4b12      	ldr	r3, [pc, #72]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80165c8:	689b      	ldr	r3, [r3, #8]
 80165ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	691b      	ldr	r3, [r3, #16]
 80165d2:	00db      	lsls	r3, r3, #3
 80165d4:	490e      	ldr	r1, [pc, #56]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80165d6:	4313      	orrs	r3, r2
 80165d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80165da:	f000 f821 	bl	8016620 <HAL_RCC_GetSysClockFreq>
 80165de:	4602      	mov	r2, r0
 80165e0:	4b0b      	ldr	r3, [pc, #44]	; (8016610 <HAL_RCC_ClockConfig+0x1bc>)
 80165e2:	689b      	ldr	r3, [r3, #8]
 80165e4:	091b      	lsrs	r3, r3, #4
 80165e6:	f003 030f 	and.w	r3, r3, #15
 80165ea:	490a      	ldr	r1, [pc, #40]	; (8016614 <HAL_RCC_ClockConfig+0x1c0>)
 80165ec:	5ccb      	ldrb	r3, [r1, r3]
 80165ee:	fa22 f303 	lsr.w	r3, r2, r3
 80165f2:	4a09      	ldr	r2, [pc, #36]	; (8016618 <HAL_RCC_ClockConfig+0x1c4>)
 80165f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80165f6:	4b09      	ldr	r3, [pc, #36]	; (801661c <HAL_RCC_ClockConfig+0x1c8>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7fc fa78 	bl	8012af0 <HAL_InitTick>

  return HAL_OK;
 8016600:	2300      	movs	r3, #0
}
 8016602:	4618      	mov	r0, r3
 8016604:	3710      	adds	r7, #16
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}
 801660a:	bf00      	nop
 801660c:	40023c00 	.word	0x40023c00
 8016610:	40023800 	.word	0x40023800
 8016614:	08034440 	.word	0x08034440
 8016618:	20000000 	.word	0x20000000
 801661c:	200000bc 	.word	0x200000bc

08016620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8016620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016624:	b094      	sub	sp, #80	; 0x50
 8016626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8016628:	2300      	movs	r3, #0
 801662a:	647b      	str	r3, [r7, #68]	; 0x44
 801662c:	2300      	movs	r3, #0
 801662e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016630:	2300      	movs	r3, #0
 8016632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8016634:	2300      	movs	r3, #0
 8016636:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8016638:	4b79      	ldr	r3, [pc, #484]	; (8016820 <HAL_RCC_GetSysClockFreq+0x200>)
 801663a:	689b      	ldr	r3, [r3, #8]
 801663c:	f003 030c 	and.w	r3, r3, #12
 8016640:	2b08      	cmp	r3, #8
 8016642:	d00d      	beq.n	8016660 <HAL_RCC_GetSysClockFreq+0x40>
 8016644:	2b08      	cmp	r3, #8
 8016646:	f200 80e1 	bhi.w	801680c <HAL_RCC_GetSysClockFreq+0x1ec>
 801664a:	2b00      	cmp	r3, #0
 801664c:	d002      	beq.n	8016654 <HAL_RCC_GetSysClockFreq+0x34>
 801664e:	2b04      	cmp	r3, #4
 8016650:	d003      	beq.n	801665a <HAL_RCC_GetSysClockFreq+0x3a>
 8016652:	e0db      	b.n	801680c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8016654:	4b73      	ldr	r3, [pc, #460]	; (8016824 <HAL_RCC_GetSysClockFreq+0x204>)
 8016656:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8016658:	e0db      	b.n	8016812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801665a:	4b73      	ldr	r3, [pc, #460]	; (8016828 <HAL_RCC_GetSysClockFreq+0x208>)
 801665c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801665e:	e0d8      	b.n	8016812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016660:	4b6f      	ldr	r3, [pc, #444]	; (8016820 <HAL_RCC_GetSysClockFreq+0x200>)
 8016662:	685b      	ldr	r3, [r3, #4]
 8016664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016668:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801666a:	4b6d      	ldr	r3, [pc, #436]	; (8016820 <HAL_RCC_GetSysClockFreq+0x200>)
 801666c:	685b      	ldr	r3, [r3, #4]
 801666e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016672:	2b00      	cmp	r3, #0
 8016674:	d063      	beq.n	801673e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016676:	4b6a      	ldr	r3, [pc, #424]	; (8016820 <HAL_RCC_GetSysClockFreq+0x200>)
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	099b      	lsrs	r3, r3, #6
 801667c:	2200      	movs	r2, #0
 801667e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016688:	633b      	str	r3, [r7, #48]	; 0x30
 801668a:	2300      	movs	r3, #0
 801668c:	637b      	str	r3, [r7, #52]	; 0x34
 801668e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8016692:	4622      	mov	r2, r4
 8016694:	462b      	mov	r3, r5
 8016696:	f04f 0000 	mov.w	r0, #0
 801669a:	f04f 0100 	mov.w	r1, #0
 801669e:	0159      	lsls	r1, r3, #5
 80166a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80166a4:	0150      	lsls	r0, r2, #5
 80166a6:	4602      	mov	r2, r0
 80166a8:	460b      	mov	r3, r1
 80166aa:	4621      	mov	r1, r4
 80166ac:	1a51      	subs	r1, r2, r1
 80166ae:	6139      	str	r1, [r7, #16]
 80166b0:	4629      	mov	r1, r5
 80166b2:	eb63 0301 	sbc.w	r3, r3, r1
 80166b6:	617b      	str	r3, [r7, #20]
 80166b8:	f04f 0200 	mov.w	r2, #0
 80166bc:	f04f 0300 	mov.w	r3, #0
 80166c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80166c4:	4659      	mov	r1, fp
 80166c6:	018b      	lsls	r3, r1, #6
 80166c8:	4651      	mov	r1, sl
 80166ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80166ce:	4651      	mov	r1, sl
 80166d0:	018a      	lsls	r2, r1, #6
 80166d2:	4651      	mov	r1, sl
 80166d4:	ebb2 0801 	subs.w	r8, r2, r1
 80166d8:	4659      	mov	r1, fp
 80166da:	eb63 0901 	sbc.w	r9, r3, r1
 80166de:	f04f 0200 	mov.w	r2, #0
 80166e2:	f04f 0300 	mov.w	r3, #0
 80166e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80166ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80166ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80166f2:	4690      	mov	r8, r2
 80166f4:	4699      	mov	r9, r3
 80166f6:	4623      	mov	r3, r4
 80166f8:	eb18 0303 	adds.w	r3, r8, r3
 80166fc:	60bb      	str	r3, [r7, #8]
 80166fe:	462b      	mov	r3, r5
 8016700:	eb49 0303 	adc.w	r3, r9, r3
 8016704:	60fb      	str	r3, [r7, #12]
 8016706:	f04f 0200 	mov.w	r2, #0
 801670a:	f04f 0300 	mov.w	r3, #0
 801670e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8016712:	4629      	mov	r1, r5
 8016714:	024b      	lsls	r3, r1, #9
 8016716:	4621      	mov	r1, r4
 8016718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801671c:	4621      	mov	r1, r4
 801671e:	024a      	lsls	r2, r1, #9
 8016720:	4610      	mov	r0, r2
 8016722:	4619      	mov	r1, r3
 8016724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016726:	2200      	movs	r2, #0
 8016728:	62bb      	str	r3, [r7, #40]	; 0x28
 801672a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801672c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016730:	f7fa fac2 	bl	8010cb8 <__aeabi_uldivmod>
 8016734:	4602      	mov	r2, r0
 8016736:	460b      	mov	r3, r1
 8016738:	4613      	mov	r3, r2
 801673a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801673c:	e058      	b.n	80167f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801673e:	4b38      	ldr	r3, [pc, #224]	; (8016820 <HAL_RCC_GetSysClockFreq+0x200>)
 8016740:	685b      	ldr	r3, [r3, #4]
 8016742:	099b      	lsrs	r3, r3, #6
 8016744:	2200      	movs	r2, #0
 8016746:	4618      	mov	r0, r3
 8016748:	4611      	mov	r1, r2
 801674a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801674e:	623b      	str	r3, [r7, #32]
 8016750:	2300      	movs	r3, #0
 8016752:	627b      	str	r3, [r7, #36]	; 0x24
 8016754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8016758:	4642      	mov	r2, r8
 801675a:	464b      	mov	r3, r9
 801675c:	f04f 0000 	mov.w	r0, #0
 8016760:	f04f 0100 	mov.w	r1, #0
 8016764:	0159      	lsls	r1, r3, #5
 8016766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801676a:	0150      	lsls	r0, r2, #5
 801676c:	4602      	mov	r2, r0
 801676e:	460b      	mov	r3, r1
 8016770:	4641      	mov	r1, r8
 8016772:	ebb2 0a01 	subs.w	sl, r2, r1
 8016776:	4649      	mov	r1, r9
 8016778:	eb63 0b01 	sbc.w	fp, r3, r1
 801677c:	f04f 0200 	mov.w	r2, #0
 8016780:	f04f 0300 	mov.w	r3, #0
 8016784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8016788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801678c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8016790:	ebb2 040a 	subs.w	r4, r2, sl
 8016794:	eb63 050b 	sbc.w	r5, r3, fp
 8016798:	f04f 0200 	mov.w	r2, #0
 801679c:	f04f 0300 	mov.w	r3, #0
 80167a0:	00eb      	lsls	r3, r5, #3
 80167a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80167a6:	00e2      	lsls	r2, r4, #3
 80167a8:	4614      	mov	r4, r2
 80167aa:	461d      	mov	r5, r3
 80167ac:	4643      	mov	r3, r8
 80167ae:	18e3      	adds	r3, r4, r3
 80167b0:	603b      	str	r3, [r7, #0]
 80167b2:	464b      	mov	r3, r9
 80167b4:	eb45 0303 	adc.w	r3, r5, r3
 80167b8:	607b      	str	r3, [r7, #4]
 80167ba:	f04f 0200 	mov.w	r2, #0
 80167be:	f04f 0300 	mov.w	r3, #0
 80167c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80167c6:	4629      	mov	r1, r5
 80167c8:	028b      	lsls	r3, r1, #10
 80167ca:	4621      	mov	r1, r4
 80167cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80167d0:	4621      	mov	r1, r4
 80167d2:	028a      	lsls	r2, r1, #10
 80167d4:	4610      	mov	r0, r2
 80167d6:	4619      	mov	r1, r3
 80167d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167da:	2200      	movs	r2, #0
 80167dc:	61bb      	str	r3, [r7, #24]
 80167de:	61fa      	str	r2, [r7, #28]
 80167e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80167e4:	f7fa fa68 	bl	8010cb8 <__aeabi_uldivmod>
 80167e8:	4602      	mov	r2, r0
 80167ea:	460b      	mov	r3, r1
 80167ec:	4613      	mov	r3, r2
 80167ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80167f0:	4b0b      	ldr	r3, [pc, #44]	; (8016820 <HAL_RCC_GetSysClockFreq+0x200>)
 80167f2:	685b      	ldr	r3, [r3, #4]
 80167f4:	0c1b      	lsrs	r3, r3, #16
 80167f6:	f003 0303 	and.w	r3, r3, #3
 80167fa:	3301      	adds	r3, #1
 80167fc:	005b      	lsls	r3, r3, #1
 80167fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8016800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016804:	fbb2 f3f3 	udiv	r3, r2, r3
 8016808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801680a:	e002      	b.n	8016812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801680c:	4b05      	ldr	r3, [pc, #20]	; (8016824 <HAL_RCC_GetSysClockFreq+0x204>)
 801680e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8016810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8016812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8016814:	4618      	mov	r0, r3
 8016816:	3750      	adds	r7, #80	; 0x50
 8016818:	46bd      	mov	sp, r7
 801681a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801681e:	bf00      	nop
 8016820:	40023800 	.word	0x40023800
 8016824:	00f42400 	.word	0x00f42400
 8016828:	007a1200 	.word	0x007a1200

0801682c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801682c:	b480      	push	{r7}
 801682e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8016830:	4b03      	ldr	r3, [pc, #12]	; (8016840 <HAL_RCC_GetHCLKFreq+0x14>)
 8016832:	681b      	ldr	r3, [r3, #0]
}
 8016834:	4618      	mov	r0, r3
 8016836:	46bd      	mov	sp, r7
 8016838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801683c:	4770      	bx	lr
 801683e:	bf00      	nop
 8016840:	20000000 	.word	0x20000000

08016844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8016848:	f7ff fff0 	bl	801682c <HAL_RCC_GetHCLKFreq>
 801684c:	4602      	mov	r2, r0
 801684e:	4b05      	ldr	r3, [pc, #20]	; (8016864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8016850:	689b      	ldr	r3, [r3, #8]
 8016852:	0a9b      	lsrs	r3, r3, #10
 8016854:	f003 0307 	and.w	r3, r3, #7
 8016858:	4903      	ldr	r1, [pc, #12]	; (8016868 <HAL_RCC_GetPCLK1Freq+0x24>)
 801685a:	5ccb      	ldrb	r3, [r1, r3]
 801685c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016860:	4618      	mov	r0, r3
 8016862:	bd80      	pop	{r7, pc}
 8016864:	40023800 	.word	0x40023800
 8016868:	08034450 	.word	0x08034450

0801686c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8016870:	f7ff ffdc 	bl	801682c <HAL_RCC_GetHCLKFreq>
 8016874:	4602      	mov	r2, r0
 8016876:	4b05      	ldr	r3, [pc, #20]	; (801688c <HAL_RCC_GetPCLK2Freq+0x20>)
 8016878:	689b      	ldr	r3, [r3, #8]
 801687a:	0b5b      	lsrs	r3, r3, #13
 801687c:	f003 0307 	and.w	r3, r3, #7
 8016880:	4903      	ldr	r1, [pc, #12]	; (8016890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016882:	5ccb      	ldrb	r3, [r1, r3]
 8016884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016888:	4618      	mov	r0, r3
 801688a:	bd80      	pop	{r7, pc}
 801688c:	40023800 	.word	0x40023800
 8016890:	08034450 	.word	0x08034450

08016894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016894:	b480      	push	{r7}
 8016896:	b083      	sub	sp, #12
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	220f      	movs	r2, #15
 80168a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80168a4:	4b12      	ldr	r3, [pc, #72]	; (80168f0 <HAL_RCC_GetClockConfig+0x5c>)
 80168a6:	689b      	ldr	r3, [r3, #8]
 80168a8:	f003 0203 	and.w	r2, r3, #3
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80168b0:	4b0f      	ldr	r3, [pc, #60]	; (80168f0 <HAL_RCC_GetClockConfig+0x5c>)
 80168b2:	689b      	ldr	r3, [r3, #8]
 80168b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80168bc:	4b0c      	ldr	r3, [pc, #48]	; (80168f0 <HAL_RCC_GetClockConfig+0x5c>)
 80168be:	689b      	ldr	r3, [r3, #8]
 80168c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80168c8:	4b09      	ldr	r3, [pc, #36]	; (80168f0 <HAL_RCC_GetClockConfig+0x5c>)
 80168ca:	689b      	ldr	r3, [r3, #8]
 80168cc:	08db      	lsrs	r3, r3, #3
 80168ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80168d6:	4b07      	ldr	r3, [pc, #28]	; (80168f4 <HAL_RCC_GetClockConfig+0x60>)
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	f003 0207 	and.w	r2, r3, #7
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	601a      	str	r2, [r3, #0]
}
 80168e2:	bf00      	nop
 80168e4:	370c      	adds	r7, #12
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	40023800 	.word	0x40023800
 80168f4:	40023c00 	.word	0x40023c00

080168f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b082      	sub	sp, #8
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d101      	bne.n	801690a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8016906:	2301      	movs	r3, #1
 8016908:	e07b      	b.n	8016a02 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801690e:	2b00      	cmp	r3, #0
 8016910:	d108      	bne.n	8016924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	685b      	ldr	r3, [r3, #4]
 8016916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801691a:	d009      	beq.n	8016930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	2200      	movs	r2, #0
 8016920:	61da      	str	r2, [r3, #28]
 8016922:	e005      	b.n	8016930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	2200      	movs	r2, #0
 8016928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2200      	movs	r2, #0
 8016934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801693c:	b2db      	uxtb	r3, r3
 801693e:	2b00      	cmp	r3, #0
 8016940:	d106      	bne.n	8016950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2200      	movs	r2, #0
 8016946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801694a:	6878      	ldr	r0, [r7, #4]
 801694c:	f7fc f802 	bl	8012954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2202      	movs	r2, #2
 8016954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	681a      	ldr	r2, [r3, #0]
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016966:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	689b      	ldr	r3, [r3, #8]
 8016974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8016978:	431a      	orrs	r2, r3
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	68db      	ldr	r3, [r3, #12]
 801697e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016982:	431a      	orrs	r2, r3
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	691b      	ldr	r3, [r3, #16]
 8016988:	f003 0302 	and.w	r3, r3, #2
 801698c:	431a      	orrs	r2, r3
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	695b      	ldr	r3, [r3, #20]
 8016992:	f003 0301 	and.w	r3, r3, #1
 8016996:	431a      	orrs	r2, r3
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	699b      	ldr	r3, [r3, #24]
 801699c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80169a0:	431a      	orrs	r2, r3
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	69db      	ldr	r3, [r3, #28]
 80169a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80169aa:	431a      	orrs	r2, r3
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	6a1b      	ldr	r3, [r3, #32]
 80169b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169b4:	ea42 0103 	orr.w	r1, r2, r3
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80169bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	430a      	orrs	r2, r1
 80169c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	699b      	ldr	r3, [r3, #24]
 80169cc:	0c1b      	lsrs	r3, r3, #16
 80169ce:	f003 0104 	and.w	r1, r3, #4
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169d6:	f003 0210 	and.w	r2, r3, #16
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	430a      	orrs	r2, r1
 80169e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	69da      	ldr	r2, [r3, #28]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	681b      	ldr	r3, [r3, #0]
 80169ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80169f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2200      	movs	r2, #0
 80169f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	2201      	movs	r2, #1
 80169fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8016a00:	2300      	movs	r3, #0
}
 8016a02:	4618      	mov	r0, r3
 8016a04:	3708      	adds	r7, #8
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bd80      	pop	{r7, pc}

08016a0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016a0a:	b580      	push	{r7, lr}
 8016a0c:	b088      	sub	sp, #32
 8016a0e:	af00      	add	r7, sp, #0
 8016a10:	60f8      	str	r0, [r7, #12]
 8016a12:	60b9      	str	r1, [r7, #8]
 8016a14:	603b      	str	r3, [r7, #0]
 8016a16:	4613      	mov	r3, r2
 8016a18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016a1a:	2300      	movs	r3, #0
 8016a1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016a24:	2b01      	cmp	r3, #1
 8016a26:	d101      	bne.n	8016a2c <HAL_SPI_Transmit+0x22>
 8016a28:	2302      	movs	r3, #2
 8016a2a:	e12d      	b.n	8016c88 <HAL_SPI_Transmit+0x27e>
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	2201      	movs	r2, #1
 8016a30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016a34:	f7fe ff0a 	bl	801584c <HAL_GetTick>
 8016a38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8016a3a:	88fb      	ldrh	r3, [r7, #6]
 8016a3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016a44:	b2db      	uxtb	r3, r3
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d002      	beq.n	8016a50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8016a4a:	2302      	movs	r3, #2
 8016a4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016a4e:	e116      	b.n	8016c7e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8016a50:	68bb      	ldr	r3, [r7, #8]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d002      	beq.n	8016a5c <HAL_SPI_Transmit+0x52>
 8016a56:	88fb      	ldrh	r3, [r7, #6]
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d102      	bne.n	8016a62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8016a5c:	2301      	movs	r3, #1
 8016a5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016a60:	e10d      	b.n	8016c7e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	2203      	movs	r2, #3
 8016a66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	68ba      	ldr	r2, [r7, #8]
 8016a74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	88fa      	ldrh	r2, [r7, #6]
 8016a7a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	88fa      	ldrh	r2, [r7, #6]
 8016a80:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	2200      	movs	r2, #0
 8016a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	2200      	movs	r2, #0
 8016a92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2200      	movs	r2, #0
 8016a98:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8016a9a:	68fb      	ldr	r3, [r7, #12]
 8016a9c:	2200      	movs	r2, #0
 8016a9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	689b      	ldr	r3, [r3, #8]
 8016aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016aa8:	d10f      	bne.n	8016aca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	681a      	ldr	r2, [r3, #0]
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016ab8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	681a      	ldr	r2, [r3, #0]
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016ac8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ad4:	2b40      	cmp	r3, #64	; 0x40
 8016ad6:	d007      	beq.n	8016ae8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	681a      	ldr	r2, [r3, #0]
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016ae6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016ae8:	68fb      	ldr	r3, [r7, #12]
 8016aea:	68db      	ldr	r3, [r3, #12]
 8016aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016af0:	d14f      	bne.n	8016b92 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	685b      	ldr	r3, [r3, #4]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d002      	beq.n	8016b00 <HAL_SPI_Transmit+0xf6>
 8016afa:	8afb      	ldrh	r3, [r7, #22]
 8016afc:	2b01      	cmp	r3, #1
 8016afe:	d142      	bne.n	8016b86 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b04:	881a      	ldrh	r2, [r3, #0]
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b10:	1c9a      	adds	r2, r3, #2
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b1a:	b29b      	uxth	r3, r3
 8016b1c:	3b01      	subs	r3, #1
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8016b24:	e02f      	b.n	8016b86 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	689b      	ldr	r3, [r3, #8]
 8016b2c:	f003 0302 	and.w	r3, r3, #2
 8016b30:	2b02      	cmp	r3, #2
 8016b32:	d112      	bne.n	8016b5a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b38:	881a      	ldrh	r2, [r3, #0]
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b44:	1c9a      	adds	r2, r3, #2
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b4e:	b29b      	uxth	r3, r3
 8016b50:	3b01      	subs	r3, #1
 8016b52:	b29a      	uxth	r2, r3
 8016b54:	68fb      	ldr	r3, [r7, #12]
 8016b56:	86da      	strh	r2, [r3, #54]	; 0x36
 8016b58:	e015      	b.n	8016b86 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016b5a:	f7fe fe77 	bl	801584c <HAL_GetTick>
 8016b5e:	4602      	mov	r2, r0
 8016b60:	69bb      	ldr	r3, [r7, #24]
 8016b62:	1ad3      	subs	r3, r2, r3
 8016b64:	683a      	ldr	r2, [r7, #0]
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d803      	bhi.n	8016b72 <HAL_SPI_Transmit+0x168>
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b70:	d102      	bne.n	8016b78 <HAL_SPI_Transmit+0x16e>
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d106      	bne.n	8016b86 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8016b78:	2303      	movs	r3, #3
 8016b7a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	2201      	movs	r2, #1
 8016b80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016b84:	e07b      	b.n	8016c7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d1ca      	bne.n	8016b26 <HAL_SPI_Transmit+0x11c>
 8016b90:	e050      	b.n	8016c34 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d002      	beq.n	8016ba0 <HAL_SPI_Transmit+0x196>
 8016b9a:	8afb      	ldrh	r3, [r7, #22]
 8016b9c:	2b01      	cmp	r3, #1
 8016b9e:	d144      	bne.n	8016c2a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	330c      	adds	r3, #12
 8016baa:	7812      	ldrb	r2, [r2, #0]
 8016bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bb2:	1c5a      	adds	r2, r3, #1
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	3b01      	subs	r3, #1
 8016bc0:	b29a      	uxth	r2, r3
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8016bc6:	e030      	b.n	8016c2a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	689b      	ldr	r3, [r3, #8]
 8016bce:	f003 0302 	and.w	r3, r3, #2
 8016bd2:	2b02      	cmp	r3, #2
 8016bd4:	d113      	bne.n	8016bfe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	330c      	adds	r3, #12
 8016be0:	7812      	ldrb	r2, [r2, #0]
 8016be2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016be8:	1c5a      	adds	r2, r3, #1
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016bf2:	b29b      	uxth	r3, r3
 8016bf4:	3b01      	subs	r3, #1
 8016bf6:	b29a      	uxth	r2, r3
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8016bfc:	e015      	b.n	8016c2a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016bfe:	f7fe fe25 	bl	801584c <HAL_GetTick>
 8016c02:	4602      	mov	r2, r0
 8016c04:	69bb      	ldr	r3, [r7, #24]
 8016c06:	1ad3      	subs	r3, r2, r3
 8016c08:	683a      	ldr	r2, [r7, #0]
 8016c0a:	429a      	cmp	r2, r3
 8016c0c:	d803      	bhi.n	8016c16 <HAL_SPI_Transmit+0x20c>
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c14:	d102      	bne.n	8016c1c <HAL_SPI_Transmit+0x212>
 8016c16:	683b      	ldr	r3, [r7, #0]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d106      	bne.n	8016c2a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8016c1c:	2303      	movs	r3, #3
 8016c1e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2201      	movs	r2, #1
 8016c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016c28:	e029      	b.n	8016c7e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c2e:	b29b      	uxth	r3, r3
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d1c9      	bne.n	8016bc8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016c34:	69ba      	ldr	r2, [r7, #24]
 8016c36:	6839      	ldr	r1, [r7, #0]
 8016c38:	68f8      	ldr	r0, [r7, #12]
 8016c3a:	f000 fbdf 	bl	80173fc <SPI_EndRxTxTransaction>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d002      	beq.n	8016c4a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2220      	movs	r2, #32
 8016c48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	689b      	ldr	r3, [r3, #8]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d10a      	bne.n	8016c68 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016c52:	2300      	movs	r3, #0
 8016c54:	613b      	str	r3, [r7, #16]
 8016c56:	68fb      	ldr	r3, [r7, #12]
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	68db      	ldr	r3, [r3, #12]
 8016c5c:	613b      	str	r3, [r7, #16]
 8016c5e:	68fb      	ldr	r3, [r7, #12]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	689b      	ldr	r3, [r3, #8]
 8016c64:	613b      	str	r3, [r7, #16]
 8016c66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d002      	beq.n	8016c76 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8016c70:	2301      	movs	r3, #1
 8016c72:	77fb      	strb	r3, [r7, #31]
 8016c74:	e003      	b.n	8016c7e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	2201      	movs	r2, #1
 8016c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	2200      	movs	r2, #0
 8016c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016c86:	7ffb      	ldrb	r3, [r7, #31]
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3720      	adds	r7, #32
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	bd80      	pop	{r7, pc}

08016c90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b088      	sub	sp, #32
 8016c94:	af02      	add	r7, sp, #8
 8016c96:	60f8      	str	r0, [r7, #12]
 8016c98:	60b9      	str	r1, [r7, #8]
 8016c9a:	603b      	str	r3, [r7, #0]
 8016c9c:	4613      	mov	r3, r2
 8016c9e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016caa:	b2db      	uxtb	r3, r3
 8016cac:	2b01      	cmp	r3, #1
 8016cae:	d002      	beq.n	8016cb6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016cb0:	2302      	movs	r3, #2
 8016cb2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016cb4:	e0fb      	b.n	8016eae <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	685b      	ldr	r3, [r3, #4]
 8016cba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016cbe:	d112      	bne.n	8016ce6 <HAL_SPI_Receive+0x56>
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	689b      	ldr	r3, [r3, #8]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d10e      	bne.n	8016ce6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	2204      	movs	r2, #4
 8016ccc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016cd0:	88fa      	ldrh	r2, [r7, #6]
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	9300      	str	r3, [sp, #0]
 8016cd6:	4613      	mov	r3, r2
 8016cd8:	68ba      	ldr	r2, [r7, #8]
 8016cda:	68b9      	ldr	r1, [r7, #8]
 8016cdc:	68f8      	ldr	r0, [r7, #12]
 8016cde:	f000 f8ef 	bl	8016ec0 <HAL_SPI_TransmitReceive>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	e0e8      	b.n	8016eb8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016cec:	2b01      	cmp	r3, #1
 8016cee:	d101      	bne.n	8016cf4 <HAL_SPI_Receive+0x64>
 8016cf0:	2302      	movs	r3, #2
 8016cf2:	e0e1      	b.n	8016eb8 <HAL_SPI_Receive+0x228>
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2201      	movs	r2, #1
 8016cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016cfc:	f7fe fda6 	bl	801584c <HAL_GetTick>
 8016d00:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8016d02:	68bb      	ldr	r3, [r7, #8]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d002      	beq.n	8016d0e <HAL_SPI_Receive+0x7e>
 8016d08:	88fb      	ldrh	r3, [r7, #6]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d102      	bne.n	8016d14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016d0e:	2301      	movs	r3, #1
 8016d10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016d12:	e0cc      	b.n	8016eae <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	2204      	movs	r2, #4
 8016d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	68ba      	ldr	r2, [r7, #8]
 8016d26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	88fa      	ldrh	r2, [r7, #6]
 8016d2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	88fa      	ldrh	r2, [r7, #6]
 8016d32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	2200      	movs	r2, #0
 8016d38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	2200      	movs	r2, #0
 8016d44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	2200      	movs	r2, #0
 8016d4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	689b      	ldr	r3, [r3, #8]
 8016d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016d5a:	d10f      	bne.n	8016d7c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	681b      	ldr	r3, [r3, #0]
 8016d60:	681a      	ldr	r2, [r3, #0]
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016d6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	681a      	ldr	r2, [r3, #0]
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016d7a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d86:	2b40      	cmp	r3, #64	; 0x40
 8016d88:	d007      	beq.n	8016d9a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	681b      	ldr	r3, [r3, #0]
 8016d8e:	681a      	ldr	r2, [r3, #0]
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016d98:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	68db      	ldr	r3, [r3, #12]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d16a      	bne.n	8016e78 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016da2:	e032      	b.n	8016e0a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	689b      	ldr	r3, [r3, #8]
 8016daa:	f003 0301 	and.w	r3, r3, #1
 8016dae:	2b01      	cmp	r3, #1
 8016db0:	d115      	bne.n	8016dde <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	f103 020c 	add.w	r2, r3, #12
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dbe:	7812      	ldrb	r2, [r2, #0]
 8016dc0:	b2d2      	uxtb	r2, r2
 8016dc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dc8:	1c5a      	adds	r2, r3, #1
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	3b01      	subs	r3, #1
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016ddc:	e015      	b.n	8016e0a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016dde:	f7fe fd35 	bl	801584c <HAL_GetTick>
 8016de2:	4602      	mov	r2, r0
 8016de4:	693b      	ldr	r3, [r7, #16]
 8016de6:	1ad3      	subs	r3, r2, r3
 8016de8:	683a      	ldr	r2, [r7, #0]
 8016dea:	429a      	cmp	r2, r3
 8016dec:	d803      	bhi.n	8016df6 <HAL_SPI_Receive+0x166>
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016df4:	d102      	bne.n	8016dfc <HAL_SPI_Receive+0x16c>
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d106      	bne.n	8016e0a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016dfc:	2303      	movs	r3, #3
 8016dfe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	2201      	movs	r2, #1
 8016e04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016e08:	e051      	b.n	8016eae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e0e:	b29b      	uxth	r3, r3
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d1c7      	bne.n	8016da4 <HAL_SPI_Receive+0x114>
 8016e14:	e035      	b.n	8016e82 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	689b      	ldr	r3, [r3, #8]
 8016e1c:	f003 0301 	and.w	r3, r3, #1
 8016e20:	2b01      	cmp	r3, #1
 8016e22:	d113      	bne.n	8016e4c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	68da      	ldr	r2, [r3, #12]
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e2e:	b292      	uxth	r2, r2
 8016e30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e36:	1c9a      	adds	r2, r3, #2
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e40:	b29b      	uxth	r3, r3
 8016e42:	3b01      	subs	r3, #1
 8016e44:	b29a      	uxth	r2, r3
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016e4a:	e015      	b.n	8016e78 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016e4c:	f7fe fcfe 	bl	801584c <HAL_GetTick>
 8016e50:	4602      	mov	r2, r0
 8016e52:	693b      	ldr	r3, [r7, #16]
 8016e54:	1ad3      	subs	r3, r2, r3
 8016e56:	683a      	ldr	r2, [r7, #0]
 8016e58:	429a      	cmp	r2, r3
 8016e5a:	d803      	bhi.n	8016e64 <HAL_SPI_Receive+0x1d4>
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e62:	d102      	bne.n	8016e6a <HAL_SPI_Receive+0x1da>
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d106      	bne.n	8016e78 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8016e6a:	2303      	movs	r3, #3
 8016e6c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	2201      	movs	r2, #1
 8016e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016e76:	e01a      	b.n	8016eae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d1c9      	bne.n	8016e16 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016e82:	693a      	ldr	r2, [r7, #16]
 8016e84:	6839      	ldr	r1, [r7, #0]
 8016e86:	68f8      	ldr	r0, [r7, #12]
 8016e88:	f000 fa52 	bl	8017330 <SPI_EndRxTransaction>
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d002      	beq.n	8016e98 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	2220      	movs	r2, #32
 8016e96:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d002      	beq.n	8016ea6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8016ea0:	2301      	movs	r3, #1
 8016ea2:	75fb      	strb	r3, [r7, #23]
 8016ea4:	e003      	b.n	8016eae <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8016eb8:	4618      	mov	r0, r3
 8016eba:	3718      	adds	r7, #24
 8016ebc:	46bd      	mov	sp, r7
 8016ebe:	bd80      	pop	{r7, pc}

08016ec0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016ec0:	b580      	push	{r7, lr}
 8016ec2:	b08c      	sub	sp, #48	; 0x30
 8016ec4:	af00      	add	r7, sp, #0
 8016ec6:	60f8      	str	r0, [r7, #12]
 8016ec8:	60b9      	str	r1, [r7, #8]
 8016eca:	607a      	str	r2, [r7, #4]
 8016ecc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016ece:	2301      	movs	r3, #1
 8016ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d101      	bne.n	8016ee6 <HAL_SPI_TransmitReceive+0x26>
 8016ee2:	2302      	movs	r3, #2
 8016ee4:	e198      	b.n	8017218 <HAL_SPI_TransmitReceive+0x358>
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	2201      	movs	r2, #1
 8016eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016eee:	f7fe fcad 	bl	801584c <HAL_GetTick>
 8016ef2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	685b      	ldr	r3, [r3, #4]
 8016f02:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016f04:	887b      	ldrh	r3, [r7, #2]
 8016f06:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016f08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f0c:	2b01      	cmp	r3, #1
 8016f0e:	d00f      	beq.n	8016f30 <HAL_SPI_TransmitReceive+0x70>
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016f16:	d107      	bne.n	8016f28 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	689b      	ldr	r3, [r3, #8]
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d103      	bne.n	8016f28 <HAL_SPI_TransmitReceive+0x68>
 8016f20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016f24:	2b04      	cmp	r3, #4
 8016f26:	d003      	beq.n	8016f30 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016f28:	2302      	movs	r3, #2
 8016f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016f2e:	e16d      	b.n	801720c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d005      	beq.n	8016f42 <HAL_SPI_TransmitReceive+0x82>
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d002      	beq.n	8016f42 <HAL_SPI_TransmitReceive+0x82>
 8016f3c:	887b      	ldrh	r3, [r7, #2]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d103      	bne.n	8016f4a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016f42:	2301      	movs	r3, #1
 8016f44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016f48:	e160      	b.n	801720c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016f4a:	68fb      	ldr	r3, [r7, #12]
 8016f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016f50:	b2db      	uxtb	r3, r3
 8016f52:	2b04      	cmp	r3, #4
 8016f54:	d003      	beq.n	8016f5e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	2205      	movs	r2, #5
 8016f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	2200      	movs	r2, #0
 8016f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	687a      	ldr	r2, [r7, #4]
 8016f68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	887a      	ldrh	r2, [r7, #2]
 8016f6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	887a      	ldrh	r2, [r7, #2]
 8016f74:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	68ba      	ldr	r2, [r7, #8]
 8016f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	887a      	ldrh	r2, [r7, #2]
 8016f80:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	887a      	ldrh	r2, [r7, #2]
 8016f86:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	2200      	movs	r2, #0
 8016f92:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f9e:	2b40      	cmp	r3, #64	; 0x40
 8016fa0:	d007      	beq.n	8016fb2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016fa2:	68fb      	ldr	r3, [r7, #12]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	68db      	ldr	r3, [r3, #12]
 8016fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016fba:	d17c      	bne.n	80170b6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d002      	beq.n	8016fca <HAL_SPI_TransmitReceive+0x10a>
 8016fc4:	8b7b      	ldrh	r3, [r7, #26]
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d16a      	bne.n	80170a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fce:	881a      	ldrh	r2, [r3, #0]
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fda:	1c9a      	adds	r2, r3, #2
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016fe4:	b29b      	uxth	r3, r3
 8016fe6:	3b01      	subs	r3, #1
 8016fe8:	b29a      	uxth	r2, r3
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016fee:	e057      	b.n	80170a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	689b      	ldr	r3, [r3, #8]
 8016ff6:	f003 0302 	and.w	r3, r3, #2
 8016ffa:	2b02      	cmp	r3, #2
 8016ffc:	d11b      	bne.n	8017036 <HAL_SPI_TransmitReceive+0x176>
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017002:	b29b      	uxth	r3, r3
 8017004:	2b00      	cmp	r3, #0
 8017006:	d016      	beq.n	8017036 <HAL_SPI_TransmitReceive+0x176>
 8017008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801700a:	2b01      	cmp	r3, #1
 801700c:	d113      	bne.n	8017036 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017012:	881a      	ldrh	r2, [r3, #0]
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801701e:	1c9a      	adds	r2, r3, #2
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017028:	b29b      	uxth	r3, r3
 801702a:	3b01      	subs	r3, #1
 801702c:	b29a      	uxth	r2, r3
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8017032:	2300      	movs	r3, #0
 8017034:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	681b      	ldr	r3, [r3, #0]
 801703a:	689b      	ldr	r3, [r3, #8]
 801703c:	f003 0301 	and.w	r3, r3, #1
 8017040:	2b01      	cmp	r3, #1
 8017042:	d119      	bne.n	8017078 <HAL_SPI_TransmitReceive+0x1b8>
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017048:	b29b      	uxth	r3, r3
 801704a:	2b00      	cmp	r3, #0
 801704c:	d014      	beq.n	8017078 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	68da      	ldr	r2, [r3, #12]
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017058:	b292      	uxth	r2, r2
 801705a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801705c:	68fb      	ldr	r3, [r7, #12]
 801705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017060:	1c9a      	adds	r2, r3, #2
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8017066:	68fb      	ldr	r3, [r7, #12]
 8017068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801706a:	b29b      	uxth	r3, r3
 801706c:	3b01      	subs	r3, #1
 801706e:	b29a      	uxth	r2, r3
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017074:	2301      	movs	r3, #1
 8017076:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017078:	f7fe fbe8 	bl	801584c <HAL_GetTick>
 801707c:	4602      	mov	r2, r0
 801707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017080:	1ad3      	subs	r3, r2, r3
 8017082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017084:	429a      	cmp	r2, r3
 8017086:	d80b      	bhi.n	80170a0 <HAL_SPI_TransmitReceive+0x1e0>
 8017088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801708e:	d007      	beq.n	80170a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8017090:	2303      	movs	r3, #3
 8017092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	2201      	movs	r2, #1
 801709a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 801709e:	e0b5      	b.n	801720c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d1a2      	bne.n	8016ff0 <HAL_SPI_TransmitReceive+0x130>
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d19d      	bne.n	8016ff0 <HAL_SPI_TransmitReceive+0x130>
 80170b4:	e080      	b.n	80171b8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	685b      	ldr	r3, [r3, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d002      	beq.n	80170c4 <HAL_SPI_TransmitReceive+0x204>
 80170be:	8b7b      	ldrh	r3, [r7, #26]
 80170c0:	2b01      	cmp	r3, #1
 80170c2:	d16f      	bne.n	80171a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	681b      	ldr	r3, [r3, #0]
 80170cc:	330c      	adds	r3, #12
 80170ce:	7812      	ldrb	r2, [r2, #0]
 80170d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170d6:	1c5a      	adds	r2, r3, #1
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	3b01      	subs	r3, #1
 80170e4:	b29a      	uxth	r2, r3
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80170ea:	e05b      	b.n	80171a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	689b      	ldr	r3, [r3, #8]
 80170f2:	f003 0302 	and.w	r3, r3, #2
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d11c      	bne.n	8017134 <HAL_SPI_TransmitReceive+0x274>
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170fe:	b29b      	uxth	r3, r3
 8017100:	2b00      	cmp	r3, #0
 8017102:	d017      	beq.n	8017134 <HAL_SPI_TransmitReceive+0x274>
 8017104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017106:	2b01      	cmp	r3, #1
 8017108:	d114      	bne.n	8017134 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	330c      	adds	r3, #12
 8017114:	7812      	ldrb	r2, [r2, #0]
 8017116:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801711c:	1c5a      	adds	r2, r3, #1
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017126:	b29b      	uxth	r3, r3
 8017128:	3b01      	subs	r3, #1
 801712a:	b29a      	uxth	r2, r3
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8017130:	2300      	movs	r3, #0
 8017132:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	689b      	ldr	r3, [r3, #8]
 801713a:	f003 0301 	and.w	r3, r3, #1
 801713e:	2b01      	cmp	r3, #1
 8017140:	d119      	bne.n	8017176 <HAL_SPI_TransmitReceive+0x2b6>
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017146:	b29b      	uxth	r3, r3
 8017148:	2b00      	cmp	r3, #0
 801714a:	d014      	beq.n	8017176 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	68da      	ldr	r2, [r3, #12]
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017156:	b2d2      	uxtb	r2, r2
 8017158:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801715e:	1c5a      	adds	r2, r3, #1
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017168:	b29b      	uxth	r3, r3
 801716a:	3b01      	subs	r3, #1
 801716c:	b29a      	uxth	r2, r3
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017172:	2301      	movs	r3, #1
 8017174:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017176:	f7fe fb69 	bl	801584c <HAL_GetTick>
 801717a:	4602      	mov	r2, r0
 801717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801717e:	1ad3      	subs	r3, r2, r3
 8017180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017182:	429a      	cmp	r2, r3
 8017184:	d803      	bhi.n	801718e <HAL_SPI_TransmitReceive+0x2ce>
 8017186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801718c:	d102      	bne.n	8017194 <HAL_SPI_TransmitReceive+0x2d4>
 801718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017190:	2b00      	cmp	r3, #0
 8017192:	d107      	bne.n	80171a4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8017194:	2303      	movs	r3, #3
 8017196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	2201      	movs	r2, #1
 801719e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80171a2:	e033      	b.n	801720c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d19e      	bne.n	80170ec <HAL_SPI_TransmitReceive+0x22c>
 80171ae:	68fb      	ldr	r3, [r7, #12]
 80171b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d199      	bne.n	80170ec <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80171b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80171ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80171bc:	68f8      	ldr	r0, [r7, #12]
 80171be:	f000 f91d 	bl	80173fc <SPI_EndRxTxTransaction>
 80171c2:	4603      	mov	r3, r0
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d006      	beq.n	80171d6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80171c8:	2301      	movs	r3, #1
 80171ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	2220      	movs	r2, #32
 80171d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80171d4:	e01a      	b.n	801720c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	689b      	ldr	r3, [r3, #8]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d10a      	bne.n	80171f4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80171de:	2300      	movs	r3, #0
 80171e0:	617b      	str	r3, [r7, #20]
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	617b      	str	r3, [r7, #20]
 80171ea:	68fb      	ldr	r3, [r7, #12]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	689b      	ldr	r3, [r3, #8]
 80171f0:	617b      	str	r3, [r7, #20]
 80171f2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d003      	beq.n	8017204 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80171fc:	2301      	movs	r3, #1
 80171fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8017202:	e003      	b.n	801720c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	2201      	movs	r2, #1
 8017208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	2200      	movs	r2, #0
 8017210:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8017214:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8017218:	4618      	mov	r0, r3
 801721a:	3730      	adds	r7, #48	; 0x30
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}

08017220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b088      	sub	sp, #32
 8017224:	af00      	add	r7, sp, #0
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	60b9      	str	r1, [r7, #8]
 801722a:	603b      	str	r3, [r7, #0]
 801722c:	4613      	mov	r3, r2
 801722e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8017230:	f7fe fb0c 	bl	801584c <HAL_GetTick>
 8017234:	4602      	mov	r2, r0
 8017236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017238:	1a9b      	subs	r3, r3, r2
 801723a:	683a      	ldr	r2, [r7, #0]
 801723c:	4413      	add	r3, r2
 801723e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8017240:	f7fe fb04 	bl	801584c <HAL_GetTick>
 8017244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017246:	4b39      	ldr	r3, [pc, #228]	; (801732c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	015b      	lsls	r3, r3, #5
 801724c:	0d1b      	lsrs	r3, r3, #20
 801724e:	69fa      	ldr	r2, [r7, #28]
 8017250:	fb02 f303 	mul.w	r3, r2, r3
 8017254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017256:	e054      	b.n	8017302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801725e:	d050      	beq.n	8017302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017260:	f7fe faf4 	bl	801584c <HAL_GetTick>
 8017264:	4602      	mov	r2, r0
 8017266:	69bb      	ldr	r3, [r7, #24]
 8017268:	1ad3      	subs	r3, r2, r3
 801726a:	69fa      	ldr	r2, [r7, #28]
 801726c:	429a      	cmp	r2, r3
 801726e:	d902      	bls.n	8017276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8017270:	69fb      	ldr	r3, [r7, #28]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d13d      	bne.n	80172f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017276:	68fb      	ldr	r3, [r7, #12]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	685a      	ldr	r2, [r3, #4]
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8017284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	685b      	ldr	r3, [r3, #4]
 801728a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801728e:	d111      	bne.n	80172b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8017290:	68fb      	ldr	r3, [r7, #12]
 8017292:	689b      	ldr	r3, [r3, #8]
 8017294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017298:	d004      	beq.n	80172a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	689b      	ldr	r3, [r3, #8]
 801729e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80172a2:	d107      	bne.n	80172b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	681a      	ldr	r2, [r3, #0]
 80172aa:	68fb      	ldr	r3, [r7, #12]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80172b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80172bc:	d10f      	bne.n	80172de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	681a      	ldr	r2, [r3, #0]
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80172cc:	601a      	str	r2, [r3, #0]
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	681a      	ldr	r2, [r3, #0]
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80172dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	2201      	movs	r2, #1
 80172e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	2200      	movs	r2, #0
 80172ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80172ee:	2303      	movs	r3, #3
 80172f0:	e017      	b.n	8017322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80172f2:	697b      	ldr	r3, [r7, #20]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d101      	bne.n	80172fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80172f8:	2300      	movs	r3, #0
 80172fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	3b01      	subs	r3, #1
 8017300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	689a      	ldr	r2, [r3, #8]
 8017308:	68bb      	ldr	r3, [r7, #8]
 801730a:	4013      	ands	r3, r2
 801730c:	68ba      	ldr	r2, [r7, #8]
 801730e:	429a      	cmp	r2, r3
 8017310:	bf0c      	ite	eq
 8017312:	2301      	moveq	r3, #1
 8017314:	2300      	movne	r3, #0
 8017316:	b2db      	uxtb	r3, r3
 8017318:	461a      	mov	r2, r3
 801731a:	79fb      	ldrb	r3, [r7, #7]
 801731c:	429a      	cmp	r2, r3
 801731e:	d19b      	bne.n	8017258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8017320:	2300      	movs	r3, #0
}
 8017322:	4618      	mov	r0, r3
 8017324:	3720      	adds	r7, #32
 8017326:	46bd      	mov	sp, r7
 8017328:	bd80      	pop	{r7, pc}
 801732a:	bf00      	nop
 801732c:	20000000 	.word	0x20000000

08017330 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b086      	sub	sp, #24
 8017334:	af02      	add	r7, sp, #8
 8017336:	60f8      	str	r0, [r7, #12]
 8017338:	60b9      	str	r1, [r7, #8]
 801733a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	685b      	ldr	r3, [r3, #4]
 8017340:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017344:	d111      	bne.n	801736a <SPI_EndRxTransaction+0x3a>
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	689b      	ldr	r3, [r3, #8]
 801734a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801734e:	d004      	beq.n	801735a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	689b      	ldr	r3, [r3, #8]
 8017354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017358:	d107      	bne.n	801736a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	681a      	ldr	r2, [r3, #0]
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017368:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017372:	d12a      	bne.n	80173ca <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	689b      	ldr	r3, [r3, #8]
 8017378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801737c:	d012      	beq.n	80173a4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	9300      	str	r3, [sp, #0]
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	2200      	movs	r2, #0
 8017386:	2180      	movs	r1, #128	; 0x80
 8017388:	68f8      	ldr	r0, [r7, #12]
 801738a:	f7ff ff49 	bl	8017220 <SPI_WaitFlagStateUntilTimeout>
 801738e:	4603      	mov	r3, r0
 8017390:	2b00      	cmp	r3, #0
 8017392:	d02d      	beq.n	80173f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017398:	f043 0220 	orr.w	r2, r3, #32
 801739c:	68fb      	ldr	r3, [r7, #12]
 801739e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80173a0:	2303      	movs	r3, #3
 80173a2:	e026      	b.n	80173f2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	9300      	str	r3, [sp, #0]
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	2200      	movs	r2, #0
 80173ac:	2101      	movs	r1, #1
 80173ae:	68f8      	ldr	r0, [r7, #12]
 80173b0:	f7ff ff36 	bl	8017220 <SPI_WaitFlagStateUntilTimeout>
 80173b4:	4603      	mov	r3, r0
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d01a      	beq.n	80173f0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173be:	f043 0220 	orr.w	r2, r3, #32
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80173c6:	2303      	movs	r3, #3
 80173c8:	e013      	b.n	80173f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	9300      	str	r3, [sp, #0]
 80173ce:	68bb      	ldr	r3, [r7, #8]
 80173d0:	2200      	movs	r2, #0
 80173d2:	2101      	movs	r1, #1
 80173d4:	68f8      	ldr	r0, [r7, #12]
 80173d6:	f7ff ff23 	bl	8017220 <SPI_WaitFlagStateUntilTimeout>
 80173da:	4603      	mov	r3, r0
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d007      	beq.n	80173f0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173e4:	f043 0220 	orr.w	r2, r3, #32
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80173ec:	2303      	movs	r3, #3
 80173ee:	e000      	b.n	80173f2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80173f0:	2300      	movs	r3, #0
}
 80173f2:	4618      	mov	r0, r3
 80173f4:	3710      	adds	r7, #16
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}
	...

080173fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80173fc:	b580      	push	{r7, lr}
 80173fe:	b088      	sub	sp, #32
 8017400:	af02      	add	r7, sp, #8
 8017402:	60f8      	str	r0, [r7, #12]
 8017404:	60b9      	str	r1, [r7, #8]
 8017406:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	9300      	str	r3, [sp, #0]
 801740c:	68bb      	ldr	r3, [r7, #8]
 801740e:	2201      	movs	r2, #1
 8017410:	2102      	movs	r1, #2
 8017412:	68f8      	ldr	r0, [r7, #12]
 8017414:	f7ff ff04 	bl	8017220 <SPI_WaitFlagStateUntilTimeout>
 8017418:	4603      	mov	r3, r0
 801741a:	2b00      	cmp	r3, #0
 801741c:	d007      	beq.n	801742e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017422:	f043 0220 	orr.w	r2, r3, #32
 8017426:	68fb      	ldr	r3, [r7, #12]
 8017428:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 801742a:	2303      	movs	r3, #3
 801742c:	e032      	b.n	8017494 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801742e:	4b1b      	ldr	r3, [pc, #108]	; (801749c <SPI_EndRxTxTransaction+0xa0>)
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	4a1b      	ldr	r2, [pc, #108]	; (80174a0 <SPI_EndRxTxTransaction+0xa4>)
 8017434:	fba2 2303 	umull	r2, r3, r2, r3
 8017438:	0d5b      	lsrs	r3, r3, #21
 801743a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801743e:	fb02 f303 	mul.w	r3, r2, r3
 8017442:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801744c:	d112      	bne.n	8017474 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	68bb      	ldr	r3, [r7, #8]
 8017454:	2200      	movs	r2, #0
 8017456:	2180      	movs	r1, #128	; 0x80
 8017458:	68f8      	ldr	r0, [r7, #12]
 801745a:	f7ff fee1 	bl	8017220 <SPI_WaitFlagStateUntilTimeout>
 801745e:	4603      	mov	r3, r0
 8017460:	2b00      	cmp	r3, #0
 8017462:	d016      	beq.n	8017492 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017468:	f043 0220 	orr.w	r2, r3, #32
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017470:	2303      	movs	r3, #3
 8017472:	e00f      	b.n	8017494 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d00a      	beq.n	8017490 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801747a:	697b      	ldr	r3, [r7, #20]
 801747c:	3b01      	subs	r3, #1
 801747e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	689b      	ldr	r3, [r3, #8]
 8017486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801748a:	2b80      	cmp	r3, #128	; 0x80
 801748c:	d0f2      	beq.n	8017474 <SPI_EndRxTxTransaction+0x78>
 801748e:	e000      	b.n	8017492 <SPI_EndRxTxTransaction+0x96>
        break;
 8017490:	bf00      	nop
  }

  return HAL_OK;
 8017492:	2300      	movs	r3, #0
}
 8017494:	4618      	mov	r0, r3
 8017496:	3718      	adds	r7, #24
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}
 801749c:	20000000 	.word	0x20000000
 80174a0:	165e9f81 	.word	0x165e9f81

080174a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d101      	bne.n	80174b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80174b2:	2301      	movs	r3, #1
 80174b4:	e041      	b.n	801753a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80174bc:	b2db      	uxtb	r3, r3
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2200      	movs	r2, #0
 80174c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f000 f839 	bl	8017542 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2202      	movs	r2, #2
 80174d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681a      	ldr	r2, [r3, #0]
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	3304      	adds	r3, #4
 80174e0:	4619      	mov	r1, r3
 80174e2:	4610      	mov	r0, r2
 80174e4:	f000 f9b2 	bl	801784c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2201      	movs	r2, #1
 80174ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2201      	movs	r2, #1
 80174f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2201      	movs	r2, #1
 80174fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2201      	movs	r2, #1
 8017504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	2201      	movs	r2, #1
 801750c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2201      	movs	r2, #1
 8017514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	2201      	movs	r2, #1
 801751c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	2201      	movs	r2, #1
 8017524:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	2201      	movs	r2, #1
 801752c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2201      	movs	r2, #1
 8017534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017538:	2300      	movs	r3, #0
}
 801753a:	4618      	mov	r0, r3
 801753c:	3708      	adds	r7, #8
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}

08017542 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8017542:	b480      	push	{r7}
 8017544:	b083      	sub	sp, #12
 8017546:	af00      	add	r7, sp, #0
 8017548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801754a:	bf00      	nop
 801754c:	370c      	adds	r7, #12
 801754e:	46bd      	mov	sp, r7
 8017550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017554:	4770      	bx	lr
	...

08017558 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017558:	b480      	push	{r7}
 801755a:	b085      	sub	sp, #20
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017566:	b2db      	uxtb	r3, r3
 8017568:	2b01      	cmp	r3, #1
 801756a:	d001      	beq.n	8017570 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801756c:	2301      	movs	r3, #1
 801756e:	e044      	b.n	80175fa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	2202      	movs	r2, #2
 8017574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	68da      	ldr	r2, [r3, #12]
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	f042 0201 	orr.w	r2, r2, #1
 8017586:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	4a1e      	ldr	r2, [pc, #120]	; (8017608 <HAL_TIM_Base_Start_IT+0xb0>)
 801758e:	4293      	cmp	r3, r2
 8017590:	d018      	beq.n	80175c4 <HAL_TIM_Base_Start_IT+0x6c>
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	681b      	ldr	r3, [r3, #0]
 8017596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801759a:	d013      	beq.n	80175c4 <HAL_TIM_Base_Start_IT+0x6c>
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	4a1a      	ldr	r2, [pc, #104]	; (801760c <HAL_TIM_Base_Start_IT+0xb4>)
 80175a2:	4293      	cmp	r3, r2
 80175a4:	d00e      	beq.n	80175c4 <HAL_TIM_Base_Start_IT+0x6c>
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	4a19      	ldr	r2, [pc, #100]	; (8017610 <HAL_TIM_Base_Start_IT+0xb8>)
 80175ac:	4293      	cmp	r3, r2
 80175ae:	d009      	beq.n	80175c4 <HAL_TIM_Base_Start_IT+0x6c>
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	4a17      	ldr	r2, [pc, #92]	; (8017614 <HAL_TIM_Base_Start_IT+0xbc>)
 80175b6:	4293      	cmp	r3, r2
 80175b8:	d004      	beq.n	80175c4 <HAL_TIM_Base_Start_IT+0x6c>
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	4a16      	ldr	r2, [pc, #88]	; (8017618 <HAL_TIM_Base_Start_IT+0xc0>)
 80175c0:	4293      	cmp	r3, r2
 80175c2:	d111      	bne.n	80175e8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	689b      	ldr	r3, [r3, #8]
 80175ca:	f003 0307 	and.w	r3, r3, #7
 80175ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	2b06      	cmp	r3, #6
 80175d4:	d010      	beq.n	80175f8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	681a      	ldr	r2, [r3, #0]
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f042 0201 	orr.w	r2, r2, #1
 80175e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80175e6:	e007      	b.n	80175f8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	681a      	ldr	r2, [r3, #0]
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	f042 0201 	orr.w	r2, r2, #1
 80175f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80175f8:	2300      	movs	r3, #0
}
 80175fa:	4618      	mov	r0, r3
 80175fc:	3714      	adds	r7, #20
 80175fe:	46bd      	mov	sp, r7
 8017600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017604:	4770      	bx	lr
 8017606:	bf00      	nop
 8017608:	40010000 	.word	0x40010000
 801760c:	40000400 	.word	0x40000400
 8017610:	40000800 	.word	0x40000800
 8017614:	40000c00 	.word	0x40000c00
 8017618:	40014000 	.word	0x40014000

0801761c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b084      	sub	sp, #16
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	68db      	ldr	r3, [r3, #12]
 801762a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	691b      	ldr	r3, [r3, #16]
 8017632:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	f003 0302 	and.w	r3, r3, #2
 801763a:	2b00      	cmp	r3, #0
 801763c:	d020      	beq.n	8017680 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	f003 0302 	and.w	r3, r3, #2
 8017644:	2b00      	cmp	r3, #0
 8017646:	d01b      	beq.n	8017680 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	681b      	ldr	r3, [r3, #0]
 801764c:	f06f 0202 	mvn.w	r2, #2
 8017650:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	2201      	movs	r2, #1
 8017656:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	699b      	ldr	r3, [r3, #24]
 801765e:	f003 0303 	and.w	r3, r3, #3
 8017662:	2b00      	cmp	r3, #0
 8017664:	d003      	beq.n	801766e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8017666:	6878      	ldr	r0, [r7, #4]
 8017668:	f000 f8d2 	bl	8017810 <HAL_TIM_IC_CaptureCallback>
 801766c:	e005      	b.n	801767a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801766e:	6878      	ldr	r0, [r7, #4]
 8017670:	f000 f8c4 	bl	80177fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017674:	6878      	ldr	r0, [r7, #4]
 8017676:	f000 f8d5 	bl	8017824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	2200      	movs	r2, #0
 801767e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017680:	68bb      	ldr	r3, [r7, #8]
 8017682:	f003 0304 	and.w	r3, r3, #4
 8017686:	2b00      	cmp	r3, #0
 8017688:	d020      	beq.n	80176cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	f003 0304 	and.w	r3, r3, #4
 8017690:	2b00      	cmp	r3, #0
 8017692:	d01b      	beq.n	80176cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	f06f 0204 	mvn.w	r2, #4
 801769c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2202      	movs	r2, #2
 80176a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	699b      	ldr	r3, [r3, #24]
 80176aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d003      	beq.n	80176ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80176b2:	6878      	ldr	r0, [r7, #4]
 80176b4:	f000 f8ac 	bl	8017810 <HAL_TIM_IC_CaptureCallback>
 80176b8:	e005      	b.n	80176c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176ba:	6878      	ldr	r0, [r7, #4]
 80176bc:	f000 f89e 	bl	80177fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f000 f8af 	bl	8017824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	2200      	movs	r2, #0
 80176ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	f003 0308 	and.w	r3, r3, #8
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d020      	beq.n	8017718 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	f003 0308 	and.w	r3, r3, #8
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d01b      	beq.n	8017718 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	f06f 0208 	mvn.w	r2, #8
 80176e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	2204      	movs	r2, #4
 80176ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	69db      	ldr	r3, [r3, #28]
 80176f6:	f003 0303 	and.w	r3, r3, #3
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d003      	beq.n	8017706 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80176fe:	6878      	ldr	r0, [r7, #4]
 8017700:	f000 f886 	bl	8017810 <HAL_TIM_IC_CaptureCallback>
 8017704:	e005      	b.n	8017712 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017706:	6878      	ldr	r0, [r7, #4]
 8017708:	f000 f878 	bl	80177fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801770c:	6878      	ldr	r0, [r7, #4]
 801770e:	f000 f889 	bl	8017824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	2200      	movs	r2, #0
 8017716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8017718:	68bb      	ldr	r3, [r7, #8]
 801771a:	f003 0310 	and.w	r3, r3, #16
 801771e:	2b00      	cmp	r3, #0
 8017720:	d020      	beq.n	8017764 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	f003 0310 	and.w	r3, r3, #16
 8017728:	2b00      	cmp	r3, #0
 801772a:	d01b      	beq.n	8017764 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 801772c:	687b      	ldr	r3, [r7, #4]
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	f06f 0210 	mvn.w	r2, #16
 8017734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2208      	movs	r2, #8
 801773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	69db      	ldr	r3, [r3, #28]
 8017742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017746:	2b00      	cmp	r3, #0
 8017748:	d003      	beq.n	8017752 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801774a:	6878      	ldr	r0, [r7, #4]
 801774c:	f000 f860 	bl	8017810 <HAL_TIM_IC_CaptureCallback>
 8017750:	e005      	b.n	801775e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f000 f852 	bl	80177fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017758:	6878      	ldr	r0, [r7, #4]
 801775a:	f000 f863 	bl	8017824 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	2200      	movs	r2, #0
 8017762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	f003 0301 	and.w	r3, r3, #1
 801776a:	2b00      	cmp	r3, #0
 801776c:	d00c      	beq.n	8017788 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	f003 0301 	and.w	r3, r3, #1
 8017774:	2b00      	cmp	r3, #0
 8017776:	d007      	beq.n	8017788 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	681b      	ldr	r3, [r3, #0]
 801777c:	f06f 0201 	mvn.w	r2, #1
 8017780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7fb f880 	bl	8012888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801778e:	2b00      	cmp	r3, #0
 8017790:	d00c      	beq.n	80177ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017798:	2b00      	cmp	r3, #0
 801779a:	d007      	beq.n	80177ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80177a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80177a6:	6878      	ldr	r0, [r7, #4]
 80177a8:	f000 f8e6 	bl	8017978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80177ac:	68bb      	ldr	r3, [r7, #8]
 80177ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d00c      	beq.n	80177d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d007      	beq.n	80177d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80177c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	f000 f834 	bl	8017838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80177d0:	68bb      	ldr	r3, [r7, #8]
 80177d2:	f003 0320 	and.w	r3, r3, #32
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d00c      	beq.n	80177f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	f003 0320 	and.w	r3, r3, #32
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d007      	beq.n	80177f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	f06f 0220 	mvn.w	r2, #32
 80177ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80177ee:	6878      	ldr	r0, [r7, #4]
 80177f0:	f000 f8b8 	bl	8017964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80177f4:	bf00      	nop
 80177f6:	3710      	adds	r7, #16
 80177f8:	46bd      	mov	sp, r7
 80177fa:	bd80      	pop	{r7, pc}

080177fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80177fc:	b480      	push	{r7}
 80177fe:	b083      	sub	sp, #12
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017804:	bf00      	nop
 8017806:	370c      	adds	r7, #12
 8017808:	46bd      	mov	sp, r7
 801780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780e:	4770      	bx	lr

08017810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017810:	b480      	push	{r7}
 8017812:	b083      	sub	sp, #12
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017818:	bf00      	nop
 801781a:	370c      	adds	r7, #12
 801781c:	46bd      	mov	sp, r7
 801781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017822:	4770      	bx	lr

08017824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017824:	b480      	push	{r7}
 8017826:	b083      	sub	sp, #12
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801782c:	bf00      	nop
 801782e:	370c      	adds	r7, #12
 8017830:	46bd      	mov	sp, r7
 8017832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017836:	4770      	bx	lr

08017838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017838:	b480      	push	{r7}
 801783a:	b083      	sub	sp, #12
 801783c:	af00      	add	r7, sp, #0
 801783e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017840:	bf00      	nop
 8017842:	370c      	adds	r7, #12
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr

0801784c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801784c:	b480      	push	{r7}
 801784e:	b085      	sub	sp, #20
 8017850:	af00      	add	r7, sp, #0
 8017852:	6078      	str	r0, [r7, #4]
 8017854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	4a3a      	ldr	r2, [pc, #232]	; (8017948 <TIM_Base_SetConfig+0xfc>)
 8017860:	4293      	cmp	r3, r2
 8017862:	d00f      	beq.n	8017884 <TIM_Base_SetConfig+0x38>
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801786a:	d00b      	beq.n	8017884 <TIM_Base_SetConfig+0x38>
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	4a37      	ldr	r2, [pc, #220]	; (801794c <TIM_Base_SetConfig+0x100>)
 8017870:	4293      	cmp	r3, r2
 8017872:	d007      	beq.n	8017884 <TIM_Base_SetConfig+0x38>
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	4a36      	ldr	r2, [pc, #216]	; (8017950 <TIM_Base_SetConfig+0x104>)
 8017878:	4293      	cmp	r3, r2
 801787a:	d003      	beq.n	8017884 <TIM_Base_SetConfig+0x38>
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	4a35      	ldr	r2, [pc, #212]	; (8017954 <TIM_Base_SetConfig+0x108>)
 8017880:	4293      	cmp	r3, r2
 8017882:	d108      	bne.n	8017896 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801788a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	685b      	ldr	r3, [r3, #4]
 8017890:	68fa      	ldr	r2, [r7, #12]
 8017892:	4313      	orrs	r3, r2
 8017894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	4a2b      	ldr	r2, [pc, #172]	; (8017948 <TIM_Base_SetConfig+0xfc>)
 801789a:	4293      	cmp	r3, r2
 801789c:	d01b      	beq.n	80178d6 <TIM_Base_SetConfig+0x8a>
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80178a4:	d017      	beq.n	80178d6 <TIM_Base_SetConfig+0x8a>
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	4a28      	ldr	r2, [pc, #160]	; (801794c <TIM_Base_SetConfig+0x100>)
 80178aa:	4293      	cmp	r3, r2
 80178ac:	d013      	beq.n	80178d6 <TIM_Base_SetConfig+0x8a>
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	4a27      	ldr	r2, [pc, #156]	; (8017950 <TIM_Base_SetConfig+0x104>)
 80178b2:	4293      	cmp	r3, r2
 80178b4:	d00f      	beq.n	80178d6 <TIM_Base_SetConfig+0x8a>
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	4a26      	ldr	r2, [pc, #152]	; (8017954 <TIM_Base_SetConfig+0x108>)
 80178ba:	4293      	cmp	r3, r2
 80178bc:	d00b      	beq.n	80178d6 <TIM_Base_SetConfig+0x8a>
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	4a25      	ldr	r2, [pc, #148]	; (8017958 <TIM_Base_SetConfig+0x10c>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d007      	beq.n	80178d6 <TIM_Base_SetConfig+0x8a>
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	4a24      	ldr	r2, [pc, #144]	; (801795c <TIM_Base_SetConfig+0x110>)
 80178ca:	4293      	cmp	r3, r2
 80178cc:	d003      	beq.n	80178d6 <TIM_Base_SetConfig+0x8a>
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	4a23      	ldr	r2, [pc, #140]	; (8017960 <TIM_Base_SetConfig+0x114>)
 80178d2:	4293      	cmp	r3, r2
 80178d4:	d108      	bne.n	80178e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80178dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80178de:	683b      	ldr	r3, [r7, #0]
 80178e0:	68db      	ldr	r3, [r3, #12]
 80178e2:	68fa      	ldr	r2, [r7, #12]
 80178e4:	4313      	orrs	r3, r2
 80178e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	695b      	ldr	r3, [r3, #20]
 80178f2:	4313      	orrs	r3, r2
 80178f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	68fa      	ldr	r2, [r7, #12]
 80178fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80178fc:	683b      	ldr	r3, [r7, #0]
 80178fe:	689a      	ldr	r2, [r3, #8]
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017904:	683b      	ldr	r3, [r7, #0]
 8017906:	681a      	ldr	r2, [r3, #0]
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	4a0e      	ldr	r2, [pc, #56]	; (8017948 <TIM_Base_SetConfig+0xfc>)
 8017910:	4293      	cmp	r3, r2
 8017912:	d103      	bne.n	801791c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017914:	683b      	ldr	r3, [r7, #0]
 8017916:	691a      	ldr	r2, [r3, #16]
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	2201      	movs	r2, #1
 8017920:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	691b      	ldr	r3, [r3, #16]
 8017926:	f003 0301 	and.w	r3, r3, #1
 801792a:	2b01      	cmp	r3, #1
 801792c:	d105      	bne.n	801793a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	691b      	ldr	r3, [r3, #16]
 8017932:	f023 0201 	bic.w	r2, r3, #1
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	611a      	str	r2, [r3, #16]
  }
}
 801793a:	bf00      	nop
 801793c:	3714      	adds	r7, #20
 801793e:	46bd      	mov	sp, r7
 8017940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017944:	4770      	bx	lr
 8017946:	bf00      	nop
 8017948:	40010000 	.word	0x40010000
 801794c:	40000400 	.word	0x40000400
 8017950:	40000800 	.word	0x40000800
 8017954:	40000c00 	.word	0x40000c00
 8017958:	40014000 	.word	0x40014000
 801795c:	40014400 	.word	0x40014400
 8017960:	40014800 	.word	0x40014800

08017964 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017964:	b480      	push	{r7}
 8017966:	b083      	sub	sp, #12
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801796c:	bf00      	nop
 801796e:	370c      	adds	r7, #12
 8017970:	46bd      	mov	sp, r7
 8017972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017976:	4770      	bx	lr

08017978 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017978:	b480      	push	{r7}
 801797a:	b083      	sub	sp, #12
 801797c:	af00      	add	r7, sp, #0
 801797e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017980:	bf00      	nop
 8017982:	370c      	adds	r7, #12
 8017984:	46bd      	mov	sp, r7
 8017986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801798a:	4770      	bx	lr

0801798c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801798c:	b580      	push	{r7, lr}
 801798e:	b082      	sub	sp, #8
 8017990:	af00      	add	r7, sp, #0
 8017992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d101      	bne.n	801799e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801799a:	2301      	movs	r3, #1
 801799c:	e042      	b.n	8017a24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80179a4:	b2db      	uxtb	r3, r3
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d106      	bne.n	80179b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	2200      	movs	r2, #0
 80179ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f7fb f84c 	bl	8012a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	2224      	movs	r2, #36	; 0x24
 80179bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	68da      	ldr	r2, [r3, #12]
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80179ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80179d0:	6878      	ldr	r0, [r7, #4]
 80179d2:	f000 fd11 	bl	80183f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	691a      	ldr	r2, [r3, #16]
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80179e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	695a      	ldr	r2, [r3, #20]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80179f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	68da      	ldr	r2, [r3, #12]
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8017a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	2200      	movs	r2, #0
 8017a0a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	2220      	movs	r2, #32
 8017a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	2220      	movs	r2, #32
 8017a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8017a22:	2300      	movs	r3, #0
}
 8017a24:	4618      	mov	r0, r3
 8017a26:	3708      	adds	r7, #8
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	bd80      	pop	{r7, pc}

08017a2c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	b08c      	sub	sp, #48	; 0x30
 8017a30:	af00      	add	r7, sp, #0
 8017a32:	60f8      	str	r0, [r7, #12]
 8017a34:	60b9      	str	r1, [r7, #8]
 8017a36:	4613      	mov	r3, r2
 8017a38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a40:	b2db      	uxtb	r3, r3
 8017a42:	2b20      	cmp	r3, #32
 8017a44:	d14a      	bne.n	8017adc <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d002      	beq.n	8017a52 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8017a4c:	88fb      	ldrh	r3, [r7, #6]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d101      	bne.n	8017a56 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8017a52:	2301      	movs	r3, #1
 8017a54:	e043      	b.n	8017ade <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	2201      	movs	r2, #1
 8017a5a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8017a62:	88fb      	ldrh	r3, [r7, #6]
 8017a64:	461a      	mov	r2, r3
 8017a66:	68b9      	ldr	r1, [r7, #8]
 8017a68:	68f8      	ldr	r0, [r7, #12]
 8017a6a:	f000 faed 	bl	8018048 <UART_Start_Receive_IT>
 8017a6e:	4603      	mov	r3, r0
 8017a70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8017a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d12c      	bne.n	8017ad6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a80:	2b01      	cmp	r3, #1
 8017a82:	d125      	bne.n	8017ad0 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017a84:	2300      	movs	r3, #0
 8017a86:	613b      	str	r3, [r7, #16]
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	681b      	ldr	r3, [r3, #0]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	613b      	str	r3, [r7, #16]
 8017a90:	68fb      	ldr	r3, [r7, #12]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	613b      	str	r3, [r7, #16]
 8017a98:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	330c      	adds	r3, #12
 8017aa0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017aa2:	69bb      	ldr	r3, [r7, #24]
 8017aa4:	e853 3f00 	ldrex	r3, [r3]
 8017aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8017aaa:	697b      	ldr	r3, [r7, #20]
 8017aac:	f043 0310 	orr.w	r3, r3, #16
 8017ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	330c      	adds	r3, #12
 8017ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017aba:	627a      	str	r2, [r7, #36]	; 0x24
 8017abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017abe:	6a39      	ldr	r1, [r7, #32]
 8017ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ac2:	e841 2300 	strex	r3, r2, [r1]
 8017ac6:	61fb      	str	r3, [r7, #28]
   return(result);
 8017ac8:	69fb      	ldr	r3, [r7, #28]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	d1e5      	bne.n	8017a9a <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017ace:	e002      	b.n	8017ad6 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8017ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017ada:	e000      	b.n	8017ade <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8017adc:	2302      	movs	r3, #2
  }
}
 8017ade:	4618      	mov	r0, r3
 8017ae0:	3730      	adds	r7, #48	; 0x30
 8017ae2:	46bd      	mov	sp, r7
 8017ae4:	bd80      	pop	{r7, pc}
	...

08017ae8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b0ba      	sub	sp, #232	; 0xe8
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	68db      	ldr	r3, [r3, #12]
 8017b00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	695b      	ldr	r3, [r3, #20]
 8017b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017b0e:	2300      	movs	r3, #0
 8017b10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8017b14:	2300      	movs	r3, #0
 8017b16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8017b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b1e:	f003 030f 	and.w	r3, r3, #15
 8017b22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8017b26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d10f      	bne.n	8017b4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b32:	f003 0320 	and.w	r3, r3, #32
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d009      	beq.n	8017b4e <HAL_UART_IRQHandler+0x66>
 8017b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b3e:	f003 0320 	and.w	r3, r3, #32
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d003      	beq.n	8017b4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8017b46:	6878      	ldr	r0, [r7, #4]
 8017b48:	f000 fb97 	bl	801827a <UART_Receive_IT>
      return;
 8017b4c:	e25b      	b.n	8018006 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8017b4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017b52:	2b00      	cmp	r3, #0
 8017b54:	f000 80de 	beq.w	8017d14 <HAL_UART_IRQHandler+0x22c>
 8017b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017b5c:	f003 0301 	and.w	r3, r3, #1
 8017b60:	2b00      	cmp	r3, #0
 8017b62:	d106      	bne.n	8017b72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8017b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	f000 80d1 	beq.w	8017d14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8017b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b76:	f003 0301 	and.w	r3, r3, #1
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d00b      	beq.n	8017b96 <HAL_UART_IRQHandler+0xae>
 8017b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d005      	beq.n	8017b96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b8e:	f043 0201 	orr.w	r2, r3, #1
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b9a:	f003 0304 	and.w	r3, r3, #4
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d00b      	beq.n	8017bba <HAL_UART_IRQHandler+0xd2>
 8017ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017ba6:	f003 0301 	and.w	r3, r3, #1
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d005      	beq.n	8017bba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bb2:	f043 0202 	orr.w	r2, r3, #2
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017bbe:	f003 0302 	and.w	r3, r3, #2
 8017bc2:	2b00      	cmp	r3, #0
 8017bc4:	d00b      	beq.n	8017bde <HAL_UART_IRQHandler+0xf6>
 8017bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017bca:	f003 0301 	and.w	r3, r3, #1
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d005      	beq.n	8017bde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bd6:	f043 0204 	orr.w	r2, r3, #4
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017be2:	f003 0308 	and.w	r3, r3, #8
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d011      	beq.n	8017c0e <HAL_UART_IRQHandler+0x126>
 8017bea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017bee:	f003 0320 	and.w	r3, r3, #32
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d105      	bne.n	8017c02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8017bf6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017bfa:	f003 0301 	and.w	r3, r3, #1
 8017bfe:	2b00      	cmp	r3, #0
 8017c00:	d005      	beq.n	8017c0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c06:	f043 0208 	orr.w	r2, r3, #8
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	f000 81f2 	beq.w	8017ffc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c1c:	f003 0320 	and.w	r3, r3, #32
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d008      	beq.n	8017c36 <HAL_UART_IRQHandler+0x14e>
 8017c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c28:	f003 0320 	and.w	r3, r3, #32
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d002      	beq.n	8017c36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017c30:	6878      	ldr	r0, [r7, #4]
 8017c32:	f000 fb22 	bl	801827a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	695b      	ldr	r3, [r3, #20]
 8017c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c40:	2b40      	cmp	r3, #64	; 0x40
 8017c42:	bf0c      	ite	eq
 8017c44:	2301      	moveq	r3, #1
 8017c46:	2300      	movne	r3, #0
 8017c48:	b2db      	uxtb	r3, r3
 8017c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c52:	f003 0308 	and.w	r3, r3, #8
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d103      	bne.n	8017c62 <HAL_UART_IRQHandler+0x17a>
 8017c5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d04f      	beq.n	8017d02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f000 fa2a 	bl	80180bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	695b      	ldr	r3, [r3, #20]
 8017c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c72:	2b40      	cmp	r3, #64	; 0x40
 8017c74:	d141      	bne.n	8017cfa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	3314      	adds	r3, #20
 8017c7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017c84:	e853 3f00 	ldrex	r3, [r3]
 8017c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8017c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017c90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	3314      	adds	r3, #20
 8017c9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8017ca2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8017ca6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017caa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017cae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017cb2:	e841 2300 	strex	r3, r2, [r1]
 8017cb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017cba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d1d9      	bne.n	8017c76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d013      	beq.n	8017cf2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cce:	4a7e      	ldr	r2, [pc, #504]	; (8017ec8 <HAL_UART_IRQHandler+0x3e0>)
 8017cd0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	f7fd ff32 	bl	8015b40 <HAL_DMA_Abort_IT>
 8017cdc:	4603      	mov	r3, r0
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d016      	beq.n	8017d10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ce6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ce8:	687a      	ldr	r2, [r7, #4]
 8017cea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017cec:	4610      	mov	r0, r2
 8017cee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cf0:	e00e      	b.n	8017d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017cf2:	6878      	ldr	r0, [r7, #4]
 8017cf4:	f000 f99e 	bl	8018034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cf8:	e00a      	b.n	8017d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	f000 f99a 	bl	8018034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d00:	e006      	b.n	8017d10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017d02:	6878      	ldr	r0, [r7, #4]
 8017d04:	f000 f996 	bl	8018034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8017d0e:	e175      	b.n	8017ffc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d10:	bf00      	nop
    return;
 8017d12:	e173      	b.n	8017ffc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d18:	2b01      	cmp	r3, #1
 8017d1a:	f040 814f 	bne.w	8017fbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017d1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017d22:	f003 0310 	and.w	r3, r3, #16
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	f000 8148 	beq.w	8017fbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017d30:	f003 0310 	and.w	r3, r3, #16
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	f000 8141 	beq.w	8017fbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017d3a:	2300      	movs	r3, #0
 8017d3c:	60bb      	str	r3, [r7, #8]
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	60bb      	str	r3, [r7, #8]
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	685b      	ldr	r3, [r3, #4]
 8017d4c:	60bb      	str	r3, [r7, #8]
 8017d4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	695b      	ldr	r3, [r3, #20]
 8017d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d5a:	2b40      	cmp	r3, #64	; 0x40
 8017d5c:	f040 80b6 	bne.w	8017ecc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	685b      	ldr	r3, [r3, #4]
 8017d68:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017d6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f000 8145 	beq.w	8018000 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017d7e:	429a      	cmp	r2, r3
 8017d80:	f080 813e 	bcs.w	8018000 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017d8a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d90:	69db      	ldr	r3, [r3, #28]
 8017d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d96:	f000 8088 	beq.w	8017eaa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	330c      	adds	r3, #12
 8017da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017da4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017da8:	e853 3f00 	ldrex	r3, [r3]
 8017dac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017db8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	330c      	adds	r3, #12
 8017dc2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017dc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017dca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017dd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017dd6:	e841 2300 	strex	r3, r2, [r1]
 8017dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d1d9      	bne.n	8017d9a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	3314      	adds	r3, #20
 8017dec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017df0:	e853 3f00 	ldrex	r3, [r3]
 8017df4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017df8:	f023 0301 	bic.w	r3, r3, #1
 8017dfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	681b      	ldr	r3, [r3, #0]
 8017e04:	3314      	adds	r3, #20
 8017e06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017e0a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017e0e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e10:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017e12:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017e16:	e841 2300 	strex	r3, r2, [r1]
 8017e1a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d1e1      	bne.n	8017de6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	3314      	adds	r3, #20
 8017e28:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017e2c:	e853 3f00 	ldrex	r3, [r3]
 8017e30:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	3314      	adds	r3, #20
 8017e42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017e46:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017e48:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e4a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017e4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017e4e:	e841 2300 	strex	r3, r2, [r1]
 8017e52:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017e54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d1e3      	bne.n	8017e22 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2220      	movs	r2, #32
 8017e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	2200      	movs	r2, #0
 8017e66:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	330c      	adds	r3, #12
 8017e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e72:	e853 3f00 	ldrex	r3, [r3]
 8017e76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017e78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e7a:	f023 0310 	bic.w	r3, r3, #16
 8017e7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	330c      	adds	r3, #12
 8017e88:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017e8c:	65ba      	str	r2, [r7, #88]	; 0x58
 8017e8e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017e92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017e94:	e841 2300 	strex	r3, r2, [r1]
 8017e98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017e9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d1e3      	bne.n	8017e68 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f7fd fddb 	bl	8015a60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	2202      	movs	r2, #2
 8017eae:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017eb8:	b29b      	uxth	r3, r3
 8017eba:	1ad3      	subs	r3, r2, r3
 8017ebc:	b29b      	uxth	r3, r3
 8017ebe:	4619      	mov	r1, r3
 8017ec0:	6878      	ldr	r0, [r7, #4]
 8017ec2:	f7f9 f8d7 	bl	8011074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017ec6:	e09b      	b.n	8018000 <HAL_UART_IRQHandler+0x518>
 8017ec8:	08018183 	.word	0x08018183
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017ed4:	b29b      	uxth	r3, r3
 8017ed6:	1ad3      	subs	r3, r2, r3
 8017ed8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	f000 808e 	beq.w	8018004 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	f000 8089 	beq.w	8018004 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	330c      	adds	r3, #12
 8017ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017efc:	e853 3f00 	ldrex	r3, [r3]
 8017f00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017f08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	330c      	adds	r3, #12
 8017f12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017f16:	647a      	str	r2, [r7, #68]	; 0x44
 8017f18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017f1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017f1e:	e841 2300 	strex	r3, r2, [r1]
 8017f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d1e3      	bne.n	8017ef2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	3314      	adds	r3, #20
 8017f30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f34:	e853 3f00 	ldrex	r3, [r3]
 8017f38:	623b      	str	r3, [r7, #32]
   return(result);
 8017f3a:	6a3b      	ldr	r3, [r7, #32]
 8017f3c:	f023 0301 	bic.w	r3, r3, #1
 8017f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	3314      	adds	r3, #20
 8017f4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017f4e:	633a      	str	r2, [r7, #48]	; 0x30
 8017f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f56:	e841 2300 	strex	r3, r2, [r1]
 8017f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d1e3      	bne.n	8017f2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	2220      	movs	r2, #32
 8017f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	2200      	movs	r2, #0
 8017f6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	330c      	adds	r3, #12
 8017f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	e853 3f00 	ldrex	r3, [r3]
 8017f7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	f023 0310 	bic.w	r3, r3, #16
 8017f86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	330c      	adds	r3, #12
 8017f90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017f94:	61fa      	str	r2, [r7, #28]
 8017f96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f98:	69b9      	ldr	r1, [r7, #24]
 8017f9a:	69fa      	ldr	r2, [r7, #28]
 8017f9c:	e841 2300 	strex	r3, r2, [r1]
 8017fa0:	617b      	str	r3, [r7, #20]
   return(result);
 8017fa2:	697b      	ldr	r3, [r7, #20]
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d1e3      	bne.n	8017f70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2202      	movs	r2, #2
 8017fac:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017fae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017fb2:	4619      	mov	r1, r3
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	f7f9 f85d 	bl	8011074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017fba:	e023      	b.n	8018004 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d009      	beq.n	8017fdc <HAL_UART_IRQHandler+0x4f4>
 8017fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d003      	beq.n	8017fdc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f000 f8e8 	bl	80181aa <UART_Transmit_IT>
    return;
 8017fda:	e014      	b.n	8018006 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d00e      	beq.n	8018006 <HAL_UART_IRQHandler+0x51e>
 8017fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d008      	beq.n	8018006 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017ff4:	6878      	ldr	r0, [r7, #4]
 8017ff6:	f000 f928 	bl	801824a <UART_EndTransmit_IT>
    return;
 8017ffa:	e004      	b.n	8018006 <HAL_UART_IRQHandler+0x51e>
    return;
 8017ffc:	bf00      	nop
 8017ffe:	e002      	b.n	8018006 <HAL_UART_IRQHandler+0x51e>
      return;
 8018000:	bf00      	nop
 8018002:	e000      	b.n	8018006 <HAL_UART_IRQHandler+0x51e>
      return;
 8018004:	bf00      	nop
  }
}
 8018006:	37e8      	adds	r7, #232	; 0xe8
 8018008:	46bd      	mov	sp, r7
 801800a:	bd80      	pop	{r7, pc}

0801800c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801800c:	b480      	push	{r7}
 801800e:	b083      	sub	sp, #12
 8018010:	af00      	add	r7, sp, #0
 8018012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8018014:	bf00      	nop
 8018016:	370c      	adds	r7, #12
 8018018:	46bd      	mov	sp, r7
 801801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801801e:	4770      	bx	lr

08018020 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8018020:	b480      	push	{r7}
 8018022:	b083      	sub	sp, #12
 8018024:	af00      	add	r7, sp, #0
 8018026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8018028:	bf00      	nop
 801802a:	370c      	adds	r7, #12
 801802c:	46bd      	mov	sp, r7
 801802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018032:	4770      	bx	lr

08018034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018034:	b480      	push	{r7}
 8018036:	b083      	sub	sp, #12
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801803c:	bf00      	nop
 801803e:	370c      	adds	r7, #12
 8018040:	46bd      	mov	sp, r7
 8018042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018046:	4770      	bx	lr

08018048 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018048:	b480      	push	{r7}
 801804a:	b085      	sub	sp, #20
 801804c:	af00      	add	r7, sp, #0
 801804e:	60f8      	str	r0, [r7, #12]
 8018050:	60b9      	str	r1, [r7, #8]
 8018052:	4613      	mov	r3, r2
 8018054:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	68ba      	ldr	r2, [r7, #8]
 801805a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	88fa      	ldrh	r2, [r7, #6]
 8018060:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8018062:	68fb      	ldr	r3, [r7, #12]
 8018064:	88fa      	ldrh	r2, [r7, #6]
 8018066:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	2200      	movs	r2, #0
 801806c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	2222      	movs	r2, #34	; 0x22
 8018072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	691b      	ldr	r3, [r3, #16]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d007      	beq.n	801808e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	68da      	ldr	r2, [r3, #12]
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801808c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	695a      	ldr	r2, [r3, #20]
 8018094:	68fb      	ldr	r3, [r7, #12]
 8018096:	681b      	ldr	r3, [r3, #0]
 8018098:	f042 0201 	orr.w	r2, r2, #1
 801809c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	68da      	ldr	r2, [r3, #12]
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	f042 0220 	orr.w	r2, r2, #32
 80180ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80180ae:	2300      	movs	r3, #0
}
 80180b0:	4618      	mov	r0, r3
 80180b2:	3714      	adds	r7, #20
 80180b4:	46bd      	mov	sp, r7
 80180b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ba:	4770      	bx	lr

080180bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80180bc:	b480      	push	{r7}
 80180be:	b095      	sub	sp, #84	; 0x54
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	330c      	adds	r3, #12
 80180ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80180ce:	e853 3f00 	ldrex	r3, [r3]
 80180d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80180d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80180da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	330c      	adds	r3, #12
 80180e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80180e4:	643a      	str	r2, [r7, #64]	; 0x40
 80180e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80180ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180ec:	e841 2300 	strex	r3, r2, [r1]
 80180f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80180f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d1e5      	bne.n	80180c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	3314      	adds	r3, #20
 80180fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018100:	6a3b      	ldr	r3, [r7, #32]
 8018102:	e853 3f00 	ldrex	r3, [r3]
 8018106:	61fb      	str	r3, [r7, #28]
   return(result);
 8018108:	69fb      	ldr	r3, [r7, #28]
 801810a:	f023 0301 	bic.w	r3, r3, #1
 801810e:	64bb      	str	r3, [r7, #72]	; 0x48
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	3314      	adds	r3, #20
 8018116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018118:	62fa      	str	r2, [r7, #44]	; 0x2c
 801811a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801811c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801811e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018120:	e841 2300 	strex	r3, r2, [r1]
 8018124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8018126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018128:	2b00      	cmp	r3, #0
 801812a:	d1e5      	bne.n	80180f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018130:	2b01      	cmp	r3, #1
 8018132:	d119      	bne.n	8018168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	330c      	adds	r3, #12
 801813a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	e853 3f00 	ldrex	r3, [r3]
 8018142:	60bb      	str	r3, [r7, #8]
   return(result);
 8018144:	68bb      	ldr	r3, [r7, #8]
 8018146:	f023 0310 	bic.w	r3, r3, #16
 801814a:	647b      	str	r3, [r7, #68]	; 0x44
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	681b      	ldr	r3, [r3, #0]
 8018150:	330c      	adds	r3, #12
 8018152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018154:	61ba      	str	r2, [r7, #24]
 8018156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018158:	6979      	ldr	r1, [r7, #20]
 801815a:	69ba      	ldr	r2, [r7, #24]
 801815c:	e841 2300 	strex	r3, r2, [r1]
 8018160:	613b      	str	r3, [r7, #16]
   return(result);
 8018162:	693b      	ldr	r3, [r7, #16]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d1e5      	bne.n	8018134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	2220      	movs	r2, #32
 801816c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	2200      	movs	r2, #0
 8018174:	631a      	str	r2, [r3, #48]	; 0x30
}
 8018176:	bf00      	nop
 8018178:	3754      	adds	r7, #84	; 0x54
 801817a:	46bd      	mov	sp, r7
 801817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018180:	4770      	bx	lr

08018182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018182:	b580      	push	{r7, lr}
 8018184:	b084      	sub	sp, #16
 8018186:	af00      	add	r7, sp, #0
 8018188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801818e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	2200      	movs	r2, #0
 8018194:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	2200      	movs	r2, #0
 801819a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801819c:	68f8      	ldr	r0, [r7, #12]
 801819e:	f7ff ff49 	bl	8018034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80181a2:	bf00      	nop
 80181a4:	3710      	adds	r7, #16
 80181a6:	46bd      	mov	sp, r7
 80181a8:	bd80      	pop	{r7, pc}

080181aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80181aa:	b480      	push	{r7}
 80181ac:	b085      	sub	sp, #20
 80181ae:	af00      	add	r7, sp, #0
 80181b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80181b8:	b2db      	uxtb	r3, r3
 80181ba:	2b21      	cmp	r3, #33	; 0x21
 80181bc:	d13e      	bne.n	801823c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	689b      	ldr	r3, [r3, #8]
 80181c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80181c6:	d114      	bne.n	80181f2 <UART_Transmit_IT+0x48>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	691b      	ldr	r3, [r3, #16]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d110      	bne.n	80181f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80181d0:	687b      	ldr	r3, [r7, #4]
 80181d2:	6a1b      	ldr	r3, [r3, #32]
 80181d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80181d6:	68fb      	ldr	r3, [r7, #12]
 80181d8:	881b      	ldrh	r3, [r3, #0]
 80181da:	461a      	mov	r2, r3
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80181e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	6a1b      	ldr	r3, [r3, #32]
 80181ea:	1c9a      	adds	r2, r3, #2
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	621a      	str	r2, [r3, #32]
 80181f0:	e008      	b.n	8018204 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	6a1b      	ldr	r3, [r3, #32]
 80181f6:	1c59      	adds	r1, r3, #1
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	6211      	str	r1, [r2, #32]
 80181fc:	781a      	ldrb	r2, [r3, #0]
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8018208:	b29b      	uxth	r3, r3
 801820a:	3b01      	subs	r3, #1
 801820c:	b29b      	uxth	r3, r3
 801820e:	687a      	ldr	r2, [r7, #4]
 8018210:	4619      	mov	r1, r3
 8018212:	84d1      	strh	r1, [r2, #38]	; 0x26
 8018214:	2b00      	cmp	r3, #0
 8018216:	d10f      	bne.n	8018238 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	68da      	ldr	r2, [r3, #12]
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018226:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	68da      	ldr	r2, [r3, #12]
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018236:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8018238:	2300      	movs	r3, #0
 801823a:	e000      	b.n	801823e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801823c:	2302      	movs	r3, #2
  }
}
 801823e:	4618      	mov	r0, r3
 8018240:	3714      	adds	r7, #20
 8018242:	46bd      	mov	sp, r7
 8018244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018248:	4770      	bx	lr

0801824a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801824a:	b580      	push	{r7, lr}
 801824c:	b082      	sub	sp, #8
 801824e:	af00      	add	r7, sp, #0
 8018250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	68da      	ldr	r2, [r3, #12]
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	2220      	movs	r2, #32
 8018266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f7ff fece 	bl	801800c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8018270:	2300      	movs	r3, #0
}
 8018272:	4618      	mov	r0, r3
 8018274:	3708      	adds	r7, #8
 8018276:	46bd      	mov	sp, r7
 8018278:	bd80      	pop	{r7, pc}

0801827a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801827a:	b580      	push	{r7, lr}
 801827c:	b08c      	sub	sp, #48	; 0x30
 801827e:	af00      	add	r7, sp, #0
 8018280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018288:	b2db      	uxtb	r3, r3
 801828a:	2b22      	cmp	r3, #34	; 0x22
 801828c:	f040 80ae 	bne.w	80183ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018290:	687b      	ldr	r3, [r7, #4]
 8018292:	689b      	ldr	r3, [r3, #8]
 8018294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018298:	d117      	bne.n	80182ca <UART_Receive_IT+0x50>
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	691b      	ldr	r3, [r3, #16]
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d113      	bne.n	80182ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80182a2:	2300      	movs	r3, #0
 80182a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	685b      	ldr	r3, [r3, #4]
 80182b2:	b29b      	uxth	r3, r3
 80182b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80182b8:	b29a      	uxth	r2, r3
 80182ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182c2:	1c9a      	adds	r2, r3, #2
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	629a      	str	r2, [r3, #40]	; 0x28
 80182c8:	e026      	b.n	8018318 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80182d0:	2300      	movs	r3, #0
 80182d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	689b      	ldr	r3, [r3, #8]
 80182d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80182dc:	d007      	beq.n	80182ee <UART_Receive_IT+0x74>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	689b      	ldr	r3, [r3, #8]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d10a      	bne.n	80182fc <UART_Receive_IT+0x82>
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	691b      	ldr	r3, [r3, #16]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d106      	bne.n	80182fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	b2da      	uxtb	r2, r3
 80182f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f8:	701a      	strb	r2, [r3, #0]
 80182fa:	e008      	b.n	801830e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	685b      	ldr	r3, [r3, #4]
 8018302:	b2db      	uxtb	r3, r3
 8018304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018308:	b2da      	uxtb	r2, r3
 801830a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801830c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018312:	1c5a      	adds	r2, r3, #1
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801831c:	b29b      	uxth	r3, r3
 801831e:	3b01      	subs	r3, #1
 8018320:	b29b      	uxth	r3, r3
 8018322:	687a      	ldr	r2, [r7, #4]
 8018324:	4619      	mov	r1, r3
 8018326:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8018328:	2b00      	cmp	r3, #0
 801832a:	d15d      	bne.n	80183e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	68da      	ldr	r2, [r3, #12]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	f022 0220 	bic.w	r2, r2, #32
 801833a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	68da      	ldr	r2, [r3, #12]
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801834a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	695a      	ldr	r2, [r3, #20]
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	f022 0201 	bic.w	r2, r2, #1
 801835a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2220      	movs	r2, #32
 8018360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	2200      	movs	r2, #0
 8018368:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801836e:	2b01      	cmp	r3, #1
 8018370:	d135      	bne.n	80183de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	2200      	movs	r2, #0
 8018376:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	330c      	adds	r3, #12
 801837e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018380:	697b      	ldr	r3, [r7, #20]
 8018382:	e853 3f00 	ldrex	r3, [r3]
 8018386:	613b      	str	r3, [r7, #16]
   return(result);
 8018388:	693b      	ldr	r3, [r7, #16]
 801838a:	f023 0310 	bic.w	r3, r3, #16
 801838e:	627b      	str	r3, [r7, #36]	; 0x24
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	330c      	adds	r3, #12
 8018396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018398:	623a      	str	r2, [r7, #32]
 801839a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801839c:	69f9      	ldr	r1, [r7, #28]
 801839e:	6a3a      	ldr	r2, [r7, #32]
 80183a0:	e841 2300 	strex	r3, r2, [r1]
 80183a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80183a6:	69bb      	ldr	r3, [r7, #24]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d1e5      	bne.n	8018378 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	f003 0310 	and.w	r3, r3, #16
 80183b6:	2b10      	cmp	r3, #16
 80183b8:	d10a      	bne.n	80183d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80183ba:	2300      	movs	r3, #0
 80183bc:	60fb      	str	r3, [r7, #12]
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	60fb      	str	r3, [r7, #12]
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	685b      	ldr	r3, [r3, #4]
 80183cc:	60fb      	str	r3, [r7, #12]
 80183ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80183d4:	4619      	mov	r1, r3
 80183d6:	6878      	ldr	r0, [r7, #4]
 80183d8:	f7f8 fe4c 	bl	8011074 <HAL_UARTEx_RxEventCallback>
 80183dc:	e002      	b.n	80183e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80183de:	6878      	ldr	r0, [r7, #4]
 80183e0:	f7ff fe1e 	bl	8018020 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80183e4:	2300      	movs	r3, #0
 80183e6:	e002      	b.n	80183ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80183e8:	2300      	movs	r3, #0
 80183ea:	e000      	b.n	80183ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80183ec:	2302      	movs	r3, #2
  }
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3730      	adds	r7, #48	; 0x30
 80183f2:	46bd      	mov	sp, r7
 80183f4:	bd80      	pop	{r7, pc}
	...

080183f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80183f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80183fc:	b0c0      	sub	sp, #256	; 0x100
 80183fe:	af00      	add	r7, sp, #0
 8018400:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	691b      	ldr	r3, [r3, #16]
 801840c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8018410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018414:	68d9      	ldr	r1, [r3, #12]
 8018416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801841a:	681a      	ldr	r2, [r3, #0]
 801841c:	ea40 0301 	orr.w	r3, r0, r1
 8018420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8018422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018426:	689a      	ldr	r2, [r3, #8]
 8018428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801842c:	691b      	ldr	r3, [r3, #16]
 801842e:	431a      	orrs	r2, r3
 8018430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018434:	695b      	ldr	r3, [r3, #20]
 8018436:	431a      	orrs	r2, r3
 8018438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801843c:	69db      	ldr	r3, [r3, #28]
 801843e:	4313      	orrs	r3, r2
 8018440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8018444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	68db      	ldr	r3, [r3, #12]
 801844c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018450:	f021 010c 	bic.w	r1, r1, #12
 8018454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018458:	681a      	ldr	r2, [r3, #0]
 801845a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801845e:	430b      	orrs	r3, r1
 8018460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	695b      	ldr	r3, [r3, #20]
 801846a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801846e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018472:	6999      	ldr	r1, [r3, #24]
 8018474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018478:	681a      	ldr	r2, [r3, #0]
 801847a:	ea40 0301 	orr.w	r3, r0, r1
 801847e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018484:	681a      	ldr	r2, [r3, #0]
 8018486:	4b8f      	ldr	r3, [pc, #572]	; (80186c4 <UART_SetConfig+0x2cc>)
 8018488:	429a      	cmp	r2, r3
 801848a:	d005      	beq.n	8018498 <UART_SetConfig+0xa0>
 801848c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018490:	681a      	ldr	r2, [r3, #0]
 8018492:	4b8d      	ldr	r3, [pc, #564]	; (80186c8 <UART_SetConfig+0x2d0>)
 8018494:	429a      	cmp	r2, r3
 8018496:	d104      	bne.n	80184a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018498:	f7fe f9e8 	bl	801686c <HAL_RCC_GetPCLK2Freq>
 801849c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80184a0:	e003      	b.n	80184aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80184a2:	f7fe f9cf 	bl	8016844 <HAL_RCC_GetPCLK1Freq>
 80184a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80184aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80184ae:	69db      	ldr	r3, [r3, #28]
 80184b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80184b4:	f040 810c 	bne.w	80186d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80184b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80184bc:	2200      	movs	r2, #0
 80184be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80184c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80184c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80184ca:	4622      	mov	r2, r4
 80184cc:	462b      	mov	r3, r5
 80184ce:	1891      	adds	r1, r2, r2
 80184d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80184d2:	415b      	adcs	r3, r3
 80184d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80184d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80184da:	4621      	mov	r1, r4
 80184dc:	eb12 0801 	adds.w	r8, r2, r1
 80184e0:	4629      	mov	r1, r5
 80184e2:	eb43 0901 	adc.w	r9, r3, r1
 80184e6:	f04f 0200 	mov.w	r2, #0
 80184ea:	f04f 0300 	mov.w	r3, #0
 80184ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80184f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80184f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80184fa:	4690      	mov	r8, r2
 80184fc:	4699      	mov	r9, r3
 80184fe:	4623      	mov	r3, r4
 8018500:	eb18 0303 	adds.w	r3, r8, r3
 8018504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8018508:	462b      	mov	r3, r5
 801850a:	eb49 0303 	adc.w	r3, r9, r3
 801850e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8018512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018516:	685b      	ldr	r3, [r3, #4]
 8018518:	2200      	movs	r2, #0
 801851a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801851e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8018522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8018526:	460b      	mov	r3, r1
 8018528:	18db      	adds	r3, r3, r3
 801852a:	653b      	str	r3, [r7, #80]	; 0x50
 801852c:	4613      	mov	r3, r2
 801852e:	eb42 0303 	adc.w	r3, r2, r3
 8018532:	657b      	str	r3, [r7, #84]	; 0x54
 8018534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8018538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801853c:	f7f8 fbbc 	bl	8010cb8 <__aeabi_uldivmod>
 8018540:	4602      	mov	r2, r0
 8018542:	460b      	mov	r3, r1
 8018544:	4b61      	ldr	r3, [pc, #388]	; (80186cc <UART_SetConfig+0x2d4>)
 8018546:	fba3 2302 	umull	r2, r3, r3, r2
 801854a:	095b      	lsrs	r3, r3, #5
 801854c:	011c      	lsls	r4, r3, #4
 801854e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018552:	2200      	movs	r2, #0
 8018554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018558:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801855c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8018560:	4642      	mov	r2, r8
 8018562:	464b      	mov	r3, r9
 8018564:	1891      	adds	r1, r2, r2
 8018566:	64b9      	str	r1, [r7, #72]	; 0x48
 8018568:	415b      	adcs	r3, r3
 801856a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801856c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018570:	4641      	mov	r1, r8
 8018572:	eb12 0a01 	adds.w	sl, r2, r1
 8018576:	4649      	mov	r1, r9
 8018578:	eb43 0b01 	adc.w	fp, r3, r1
 801857c:	f04f 0200 	mov.w	r2, #0
 8018580:	f04f 0300 	mov.w	r3, #0
 8018584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801858c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8018590:	4692      	mov	sl, r2
 8018592:	469b      	mov	fp, r3
 8018594:	4643      	mov	r3, r8
 8018596:	eb1a 0303 	adds.w	r3, sl, r3
 801859a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801859e:	464b      	mov	r3, r9
 80185a0:	eb4b 0303 	adc.w	r3, fp, r3
 80185a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80185a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185ac:	685b      	ldr	r3, [r3, #4]
 80185ae:	2200      	movs	r2, #0
 80185b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80185b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80185b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80185bc:	460b      	mov	r3, r1
 80185be:	18db      	adds	r3, r3, r3
 80185c0:	643b      	str	r3, [r7, #64]	; 0x40
 80185c2:	4613      	mov	r3, r2
 80185c4:	eb42 0303 	adc.w	r3, r2, r3
 80185c8:	647b      	str	r3, [r7, #68]	; 0x44
 80185ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80185ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80185d2:	f7f8 fb71 	bl	8010cb8 <__aeabi_uldivmod>
 80185d6:	4602      	mov	r2, r0
 80185d8:	460b      	mov	r3, r1
 80185da:	4611      	mov	r1, r2
 80185dc:	4b3b      	ldr	r3, [pc, #236]	; (80186cc <UART_SetConfig+0x2d4>)
 80185de:	fba3 2301 	umull	r2, r3, r3, r1
 80185e2:	095b      	lsrs	r3, r3, #5
 80185e4:	2264      	movs	r2, #100	; 0x64
 80185e6:	fb02 f303 	mul.w	r3, r2, r3
 80185ea:	1acb      	subs	r3, r1, r3
 80185ec:	00db      	lsls	r3, r3, #3
 80185ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80185f2:	4b36      	ldr	r3, [pc, #216]	; (80186cc <UART_SetConfig+0x2d4>)
 80185f4:	fba3 2302 	umull	r2, r3, r3, r2
 80185f8:	095b      	lsrs	r3, r3, #5
 80185fa:	005b      	lsls	r3, r3, #1
 80185fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018600:	441c      	add	r4, r3
 8018602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018606:	2200      	movs	r2, #0
 8018608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801860c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8018610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8018614:	4642      	mov	r2, r8
 8018616:	464b      	mov	r3, r9
 8018618:	1891      	adds	r1, r2, r2
 801861a:	63b9      	str	r1, [r7, #56]	; 0x38
 801861c:	415b      	adcs	r3, r3
 801861e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8018624:	4641      	mov	r1, r8
 8018626:	1851      	adds	r1, r2, r1
 8018628:	6339      	str	r1, [r7, #48]	; 0x30
 801862a:	4649      	mov	r1, r9
 801862c:	414b      	adcs	r3, r1
 801862e:	637b      	str	r3, [r7, #52]	; 0x34
 8018630:	f04f 0200 	mov.w	r2, #0
 8018634:	f04f 0300 	mov.w	r3, #0
 8018638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801863c:	4659      	mov	r1, fp
 801863e:	00cb      	lsls	r3, r1, #3
 8018640:	4651      	mov	r1, sl
 8018642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018646:	4651      	mov	r1, sl
 8018648:	00ca      	lsls	r2, r1, #3
 801864a:	4610      	mov	r0, r2
 801864c:	4619      	mov	r1, r3
 801864e:	4603      	mov	r3, r0
 8018650:	4642      	mov	r2, r8
 8018652:	189b      	adds	r3, r3, r2
 8018654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018658:	464b      	mov	r3, r9
 801865a:	460a      	mov	r2, r1
 801865c:	eb42 0303 	adc.w	r3, r2, r3
 8018660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018668:	685b      	ldr	r3, [r3, #4]
 801866a:	2200      	movs	r2, #0
 801866c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018670:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8018674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8018678:	460b      	mov	r3, r1
 801867a:	18db      	adds	r3, r3, r3
 801867c:	62bb      	str	r3, [r7, #40]	; 0x28
 801867e:	4613      	mov	r3, r2
 8018680:	eb42 0303 	adc.w	r3, r2, r3
 8018684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801868a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801868e:	f7f8 fb13 	bl	8010cb8 <__aeabi_uldivmod>
 8018692:	4602      	mov	r2, r0
 8018694:	460b      	mov	r3, r1
 8018696:	4b0d      	ldr	r3, [pc, #52]	; (80186cc <UART_SetConfig+0x2d4>)
 8018698:	fba3 1302 	umull	r1, r3, r3, r2
 801869c:	095b      	lsrs	r3, r3, #5
 801869e:	2164      	movs	r1, #100	; 0x64
 80186a0:	fb01 f303 	mul.w	r3, r1, r3
 80186a4:	1ad3      	subs	r3, r2, r3
 80186a6:	00db      	lsls	r3, r3, #3
 80186a8:	3332      	adds	r3, #50	; 0x32
 80186aa:	4a08      	ldr	r2, [pc, #32]	; (80186cc <UART_SetConfig+0x2d4>)
 80186ac:	fba2 2303 	umull	r2, r3, r2, r3
 80186b0:	095b      	lsrs	r3, r3, #5
 80186b2:	f003 0207 	and.w	r2, r3, #7
 80186b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	4422      	add	r2, r4
 80186be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80186c0:	e106      	b.n	80188d0 <UART_SetConfig+0x4d8>
 80186c2:	bf00      	nop
 80186c4:	40011000 	.word	0x40011000
 80186c8:	40011400 	.word	0x40011400
 80186cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80186d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80186d4:	2200      	movs	r2, #0
 80186d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80186da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80186de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80186e2:	4642      	mov	r2, r8
 80186e4:	464b      	mov	r3, r9
 80186e6:	1891      	adds	r1, r2, r2
 80186e8:	6239      	str	r1, [r7, #32]
 80186ea:	415b      	adcs	r3, r3
 80186ec:	627b      	str	r3, [r7, #36]	; 0x24
 80186ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80186f2:	4641      	mov	r1, r8
 80186f4:	1854      	adds	r4, r2, r1
 80186f6:	4649      	mov	r1, r9
 80186f8:	eb43 0501 	adc.w	r5, r3, r1
 80186fc:	f04f 0200 	mov.w	r2, #0
 8018700:	f04f 0300 	mov.w	r3, #0
 8018704:	00eb      	lsls	r3, r5, #3
 8018706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801870a:	00e2      	lsls	r2, r4, #3
 801870c:	4614      	mov	r4, r2
 801870e:	461d      	mov	r5, r3
 8018710:	4643      	mov	r3, r8
 8018712:	18e3      	adds	r3, r4, r3
 8018714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8018718:	464b      	mov	r3, r9
 801871a:	eb45 0303 	adc.w	r3, r5, r3
 801871e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8018722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018726:	685b      	ldr	r3, [r3, #4]
 8018728:	2200      	movs	r2, #0
 801872a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801872e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8018732:	f04f 0200 	mov.w	r2, #0
 8018736:	f04f 0300 	mov.w	r3, #0
 801873a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801873e:	4629      	mov	r1, r5
 8018740:	008b      	lsls	r3, r1, #2
 8018742:	4621      	mov	r1, r4
 8018744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018748:	4621      	mov	r1, r4
 801874a:	008a      	lsls	r2, r1, #2
 801874c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8018750:	f7f8 fab2 	bl	8010cb8 <__aeabi_uldivmod>
 8018754:	4602      	mov	r2, r0
 8018756:	460b      	mov	r3, r1
 8018758:	4b60      	ldr	r3, [pc, #384]	; (80188dc <UART_SetConfig+0x4e4>)
 801875a:	fba3 2302 	umull	r2, r3, r3, r2
 801875e:	095b      	lsrs	r3, r3, #5
 8018760:	011c      	lsls	r4, r3, #4
 8018762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018766:	2200      	movs	r2, #0
 8018768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801876c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8018770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8018774:	4642      	mov	r2, r8
 8018776:	464b      	mov	r3, r9
 8018778:	1891      	adds	r1, r2, r2
 801877a:	61b9      	str	r1, [r7, #24]
 801877c:	415b      	adcs	r3, r3
 801877e:	61fb      	str	r3, [r7, #28]
 8018780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018784:	4641      	mov	r1, r8
 8018786:	1851      	adds	r1, r2, r1
 8018788:	6139      	str	r1, [r7, #16]
 801878a:	4649      	mov	r1, r9
 801878c:	414b      	adcs	r3, r1
 801878e:	617b      	str	r3, [r7, #20]
 8018790:	f04f 0200 	mov.w	r2, #0
 8018794:	f04f 0300 	mov.w	r3, #0
 8018798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801879c:	4659      	mov	r1, fp
 801879e:	00cb      	lsls	r3, r1, #3
 80187a0:	4651      	mov	r1, sl
 80187a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80187a6:	4651      	mov	r1, sl
 80187a8:	00ca      	lsls	r2, r1, #3
 80187aa:	4610      	mov	r0, r2
 80187ac:	4619      	mov	r1, r3
 80187ae:	4603      	mov	r3, r0
 80187b0:	4642      	mov	r2, r8
 80187b2:	189b      	adds	r3, r3, r2
 80187b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80187b8:	464b      	mov	r3, r9
 80187ba:	460a      	mov	r2, r1
 80187bc:	eb42 0303 	adc.w	r3, r2, r3
 80187c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80187c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80187c8:	685b      	ldr	r3, [r3, #4]
 80187ca:	2200      	movs	r2, #0
 80187cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80187ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80187d0:	f04f 0200 	mov.w	r2, #0
 80187d4:	f04f 0300 	mov.w	r3, #0
 80187d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80187dc:	4649      	mov	r1, r9
 80187de:	008b      	lsls	r3, r1, #2
 80187e0:	4641      	mov	r1, r8
 80187e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80187e6:	4641      	mov	r1, r8
 80187e8:	008a      	lsls	r2, r1, #2
 80187ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80187ee:	f7f8 fa63 	bl	8010cb8 <__aeabi_uldivmod>
 80187f2:	4602      	mov	r2, r0
 80187f4:	460b      	mov	r3, r1
 80187f6:	4611      	mov	r1, r2
 80187f8:	4b38      	ldr	r3, [pc, #224]	; (80188dc <UART_SetConfig+0x4e4>)
 80187fa:	fba3 2301 	umull	r2, r3, r3, r1
 80187fe:	095b      	lsrs	r3, r3, #5
 8018800:	2264      	movs	r2, #100	; 0x64
 8018802:	fb02 f303 	mul.w	r3, r2, r3
 8018806:	1acb      	subs	r3, r1, r3
 8018808:	011b      	lsls	r3, r3, #4
 801880a:	3332      	adds	r3, #50	; 0x32
 801880c:	4a33      	ldr	r2, [pc, #204]	; (80188dc <UART_SetConfig+0x4e4>)
 801880e:	fba2 2303 	umull	r2, r3, r2, r3
 8018812:	095b      	lsrs	r3, r3, #5
 8018814:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018818:	441c      	add	r4, r3
 801881a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801881e:	2200      	movs	r2, #0
 8018820:	673b      	str	r3, [r7, #112]	; 0x70
 8018822:	677a      	str	r2, [r7, #116]	; 0x74
 8018824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8018828:	4642      	mov	r2, r8
 801882a:	464b      	mov	r3, r9
 801882c:	1891      	adds	r1, r2, r2
 801882e:	60b9      	str	r1, [r7, #8]
 8018830:	415b      	adcs	r3, r3
 8018832:	60fb      	str	r3, [r7, #12]
 8018834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018838:	4641      	mov	r1, r8
 801883a:	1851      	adds	r1, r2, r1
 801883c:	6039      	str	r1, [r7, #0]
 801883e:	4649      	mov	r1, r9
 8018840:	414b      	adcs	r3, r1
 8018842:	607b      	str	r3, [r7, #4]
 8018844:	f04f 0200 	mov.w	r2, #0
 8018848:	f04f 0300 	mov.w	r3, #0
 801884c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018850:	4659      	mov	r1, fp
 8018852:	00cb      	lsls	r3, r1, #3
 8018854:	4651      	mov	r1, sl
 8018856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801885a:	4651      	mov	r1, sl
 801885c:	00ca      	lsls	r2, r1, #3
 801885e:	4610      	mov	r0, r2
 8018860:	4619      	mov	r1, r3
 8018862:	4603      	mov	r3, r0
 8018864:	4642      	mov	r2, r8
 8018866:	189b      	adds	r3, r3, r2
 8018868:	66bb      	str	r3, [r7, #104]	; 0x68
 801886a:	464b      	mov	r3, r9
 801886c:	460a      	mov	r2, r1
 801886e:	eb42 0303 	adc.w	r3, r2, r3
 8018872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018878:	685b      	ldr	r3, [r3, #4]
 801887a:	2200      	movs	r2, #0
 801887c:	663b      	str	r3, [r7, #96]	; 0x60
 801887e:	667a      	str	r2, [r7, #100]	; 0x64
 8018880:	f04f 0200 	mov.w	r2, #0
 8018884:	f04f 0300 	mov.w	r3, #0
 8018888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801888c:	4649      	mov	r1, r9
 801888e:	008b      	lsls	r3, r1, #2
 8018890:	4641      	mov	r1, r8
 8018892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018896:	4641      	mov	r1, r8
 8018898:	008a      	lsls	r2, r1, #2
 801889a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801889e:	f7f8 fa0b 	bl	8010cb8 <__aeabi_uldivmod>
 80188a2:	4602      	mov	r2, r0
 80188a4:	460b      	mov	r3, r1
 80188a6:	4b0d      	ldr	r3, [pc, #52]	; (80188dc <UART_SetConfig+0x4e4>)
 80188a8:	fba3 1302 	umull	r1, r3, r3, r2
 80188ac:	095b      	lsrs	r3, r3, #5
 80188ae:	2164      	movs	r1, #100	; 0x64
 80188b0:	fb01 f303 	mul.w	r3, r1, r3
 80188b4:	1ad3      	subs	r3, r2, r3
 80188b6:	011b      	lsls	r3, r3, #4
 80188b8:	3332      	adds	r3, #50	; 0x32
 80188ba:	4a08      	ldr	r2, [pc, #32]	; (80188dc <UART_SetConfig+0x4e4>)
 80188bc:	fba2 2303 	umull	r2, r3, r2, r3
 80188c0:	095b      	lsrs	r3, r3, #5
 80188c2:	f003 020f 	and.w	r2, r3, #15
 80188c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	4422      	add	r2, r4
 80188ce:	609a      	str	r2, [r3, #8]
}
 80188d0:	bf00      	nop
 80188d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80188d6:	46bd      	mov	sp, r7
 80188d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80188dc:	51eb851f 	.word	0x51eb851f

080188e0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b084      	sub	sp, #16
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80188e8:	4b22      	ldr	r3, [pc, #136]	; (8018974 <WIZCHIP_READ+0x94>)
 80188ea:	68db      	ldr	r3, [r3, #12]
 80188ec:	4798      	blx	r3
   WIZCHIP.CS._select();
 80188ee:	4b21      	ldr	r3, [pc, #132]	; (8018974 <WIZCHIP_READ+0x94>)
 80188f0:	695b      	ldr	r3, [r3, #20]
 80188f2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80188f4:	4b1f      	ldr	r3, [pc, #124]	; (8018974 <WIZCHIP_READ+0x94>)
 80188f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d003      	beq.n	8018904 <WIZCHIP_READ+0x24>
 80188fc:	4b1d      	ldr	r3, [pc, #116]	; (8018974 <WIZCHIP_READ+0x94>)
 80188fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018900:	2b00      	cmp	r3, #0
 8018902:	d114      	bne.n	801892e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018904:	4b1b      	ldr	r3, [pc, #108]	; (8018974 <WIZCHIP_READ+0x94>)
 8018906:	6a1b      	ldr	r3, [r3, #32]
 8018908:	687a      	ldr	r2, [r7, #4]
 801890a:	0c12      	lsrs	r2, r2, #16
 801890c:	b2d2      	uxtb	r2, r2
 801890e:	4610      	mov	r0, r2
 8018910:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018912:	4b18      	ldr	r3, [pc, #96]	; (8018974 <WIZCHIP_READ+0x94>)
 8018914:	6a1b      	ldr	r3, [r3, #32]
 8018916:	687a      	ldr	r2, [r7, #4]
 8018918:	0a12      	lsrs	r2, r2, #8
 801891a:	b2d2      	uxtb	r2, r2
 801891c:	4610      	mov	r0, r2
 801891e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018920:	4b14      	ldr	r3, [pc, #80]	; (8018974 <WIZCHIP_READ+0x94>)
 8018922:	6a1b      	ldr	r3, [r3, #32]
 8018924:	687a      	ldr	r2, [r7, #4]
 8018926:	b2d2      	uxtb	r2, r2
 8018928:	4610      	mov	r0, r2
 801892a:	4798      	blx	r3
 801892c:	e011      	b.n	8018952 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	0c1b      	lsrs	r3, r3, #16
 8018932:	b2db      	uxtb	r3, r3
 8018934:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	0a1b      	lsrs	r3, r3, #8
 801893a:	b2db      	uxtb	r3, r3
 801893c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	b2db      	uxtb	r3, r3
 8018942:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018944:	4b0b      	ldr	r3, [pc, #44]	; (8018974 <WIZCHIP_READ+0x94>)
 8018946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018948:	f107 020c 	add.w	r2, r7, #12
 801894c:	2103      	movs	r1, #3
 801894e:	4610      	mov	r0, r2
 8018950:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8018952:	4b08      	ldr	r3, [pc, #32]	; (8018974 <WIZCHIP_READ+0x94>)
 8018954:	69db      	ldr	r3, [r3, #28]
 8018956:	4798      	blx	r3
 8018958:	4603      	mov	r3, r0
 801895a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 801895c:	4b05      	ldr	r3, [pc, #20]	; (8018974 <WIZCHIP_READ+0x94>)
 801895e:	699b      	ldr	r3, [r3, #24]
 8018960:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018962:	4b04      	ldr	r3, [pc, #16]	; (8018974 <WIZCHIP_READ+0x94>)
 8018964:	691b      	ldr	r3, [r3, #16]
 8018966:	4798      	blx	r3
   return ret;
 8018968:	7bfb      	ldrb	r3, [r7, #15]
}
 801896a:	4618      	mov	r0, r3
 801896c:	3710      	adds	r7, #16
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
 8018972:	bf00      	nop
 8018974:	200000c4 	.word	0x200000c4

08018978 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8018978:	b580      	push	{r7, lr}
 801897a:	b084      	sub	sp, #16
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	460b      	mov	r3, r1
 8018982:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8018984:	4b22      	ldr	r3, [pc, #136]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 8018986:	68db      	ldr	r3, [r3, #12]
 8018988:	4798      	blx	r3
   WIZCHIP.CS._select();
 801898a:	4b21      	ldr	r3, [pc, #132]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 801898c:	695b      	ldr	r3, [r3, #20]
 801898e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	f043 0304 	orr.w	r3, r3, #4
 8018996:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018998:	4b1d      	ldr	r3, [pc, #116]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 801899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801899c:	2b00      	cmp	r3, #0
 801899e:	d119      	bne.n	80189d4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80189a0:	4b1b      	ldr	r3, [pc, #108]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 80189a2:	6a1b      	ldr	r3, [r3, #32]
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	0c12      	lsrs	r2, r2, #16
 80189a8:	b2d2      	uxtb	r2, r2
 80189aa:	4610      	mov	r0, r2
 80189ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80189ae:	4b18      	ldr	r3, [pc, #96]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 80189b0:	6a1b      	ldr	r3, [r3, #32]
 80189b2:	687a      	ldr	r2, [r7, #4]
 80189b4:	0a12      	lsrs	r2, r2, #8
 80189b6:	b2d2      	uxtb	r2, r2
 80189b8:	4610      	mov	r0, r2
 80189ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80189bc:	4b14      	ldr	r3, [pc, #80]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 80189be:	6a1b      	ldr	r3, [r3, #32]
 80189c0:	687a      	ldr	r2, [r7, #4]
 80189c2:	b2d2      	uxtb	r2, r2
 80189c4:	4610      	mov	r0, r2
 80189c6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80189c8:	4b11      	ldr	r3, [pc, #68]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 80189ca:	6a1b      	ldr	r3, [r3, #32]
 80189cc:	78fa      	ldrb	r2, [r7, #3]
 80189ce:	4610      	mov	r0, r2
 80189d0:	4798      	blx	r3
 80189d2:	e013      	b.n	80189fc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	0c1b      	lsrs	r3, r3, #16
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	0a1b      	lsrs	r3, r3, #8
 80189e0:	b2db      	uxtb	r3, r3
 80189e2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	b2db      	uxtb	r3, r3
 80189e8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80189ea:	78fb      	ldrb	r3, [r7, #3]
 80189ec:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80189ee:	4b08      	ldr	r3, [pc, #32]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 80189f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189f2:	f107 020c 	add.w	r2, r7, #12
 80189f6:	2104      	movs	r1, #4
 80189f8:	4610      	mov	r0, r2
 80189fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80189fc:	4b04      	ldr	r3, [pc, #16]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 80189fe:	699b      	ldr	r3, [r3, #24]
 8018a00:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018a02:	4b03      	ldr	r3, [pc, #12]	; (8018a10 <WIZCHIP_WRITE+0x98>)
 8018a04:	691b      	ldr	r3, [r3, #16]
 8018a06:	4798      	blx	r3
}
 8018a08:	bf00      	nop
 8018a0a:	3710      	adds	r7, #16
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd80      	pop	{r7, pc}
 8018a10:	200000c4 	.word	0x200000c4

08018a14 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018a14:	b590      	push	{r4, r7, lr}
 8018a16:	b087      	sub	sp, #28
 8018a18:	af00      	add	r7, sp, #0
 8018a1a:	60f8      	str	r0, [r7, #12]
 8018a1c:	60b9      	str	r1, [r7, #8]
 8018a1e:	4613      	mov	r3, r2
 8018a20:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018a22:	4b2b      	ldr	r3, [pc, #172]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a24:	68db      	ldr	r3, [r3, #12]
 8018a26:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018a28:	4b29      	ldr	r3, [pc, #164]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a2a:	695b      	ldr	r3, [r3, #20]
 8018a2c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018a2e:	4b28      	ldr	r3, [pc, #160]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a32:	2b00      	cmp	r3, #0
 8018a34:	d003      	beq.n	8018a3e <WIZCHIP_READ_BUF+0x2a>
 8018a36:	4b26      	ldr	r3, [pc, #152]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d126      	bne.n	8018a8c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018a3e:	4b24      	ldr	r3, [pc, #144]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a40:	6a1b      	ldr	r3, [r3, #32]
 8018a42:	68fa      	ldr	r2, [r7, #12]
 8018a44:	0c12      	lsrs	r2, r2, #16
 8018a46:	b2d2      	uxtb	r2, r2
 8018a48:	4610      	mov	r0, r2
 8018a4a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018a4c:	4b20      	ldr	r3, [pc, #128]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a4e:	6a1b      	ldr	r3, [r3, #32]
 8018a50:	68fa      	ldr	r2, [r7, #12]
 8018a52:	0a12      	lsrs	r2, r2, #8
 8018a54:	b2d2      	uxtb	r2, r2
 8018a56:	4610      	mov	r0, r2
 8018a58:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018a5a:	4b1d      	ldr	r3, [pc, #116]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a5c:	6a1b      	ldr	r3, [r3, #32]
 8018a5e:	68fa      	ldr	r2, [r7, #12]
 8018a60:	b2d2      	uxtb	r2, r2
 8018a62:	4610      	mov	r0, r2
 8018a64:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018a66:	2300      	movs	r3, #0
 8018a68:	82fb      	strh	r3, [r7, #22]
 8018a6a:	e00a      	b.n	8018a82 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8018a6c:	4b18      	ldr	r3, [pc, #96]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018a6e:	69db      	ldr	r3, [r3, #28]
 8018a70:	8afa      	ldrh	r2, [r7, #22]
 8018a72:	68b9      	ldr	r1, [r7, #8]
 8018a74:	188c      	adds	r4, r1, r2
 8018a76:	4798      	blx	r3
 8018a78:	4603      	mov	r3, r0
 8018a7a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8018a7c:	8afb      	ldrh	r3, [r7, #22]
 8018a7e:	3301      	adds	r3, #1
 8018a80:	82fb      	strh	r3, [r7, #22]
 8018a82:	8afa      	ldrh	r2, [r7, #22]
 8018a84:	88fb      	ldrh	r3, [r7, #6]
 8018a86:	429a      	cmp	r2, r3
 8018a88:	d3f0      	bcc.n	8018a6c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018a8a:	e017      	b.n	8018abc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018a8c:	68fb      	ldr	r3, [r7, #12]
 8018a8e:	0c1b      	lsrs	r3, r3, #16
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	0a1b      	lsrs	r3, r3, #8
 8018a98:	b2db      	uxtb	r3, r3
 8018a9a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	b2db      	uxtb	r3, r3
 8018aa0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018aa2:	4b0b      	ldr	r3, [pc, #44]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aa6:	f107 0210 	add.w	r2, r7, #16
 8018aaa:	2103      	movs	r1, #3
 8018aac:	4610      	mov	r0, r2
 8018aae:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8018ab0:	4b07      	ldr	r3, [pc, #28]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab4:	88fa      	ldrh	r2, [r7, #6]
 8018ab6:	4611      	mov	r1, r2
 8018ab8:	68b8      	ldr	r0, [r7, #8]
 8018aba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018abc:	4b04      	ldr	r3, [pc, #16]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018abe:	699b      	ldr	r3, [r3, #24]
 8018ac0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018ac2:	4b03      	ldr	r3, [pc, #12]	; (8018ad0 <WIZCHIP_READ_BUF+0xbc>)
 8018ac4:	691b      	ldr	r3, [r3, #16]
 8018ac6:	4798      	blx	r3
}
 8018ac8:	bf00      	nop
 8018aca:	371c      	adds	r7, #28
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd90      	pop	{r4, r7, pc}
 8018ad0:	200000c4 	.word	0x200000c4

08018ad4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b086      	sub	sp, #24
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	60f8      	str	r0, [r7, #12]
 8018adc:	60b9      	str	r1, [r7, #8]
 8018ade:	4613      	mov	r3, r2
 8018ae0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018ae2:	4b2b      	ldr	r3, [pc, #172]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018ae4:	68db      	ldr	r3, [r3, #12]
 8018ae6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018ae8:	4b29      	ldr	r3, [pc, #164]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018aea:	695b      	ldr	r3, [r3, #20]
 8018aec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018aee:	68fb      	ldr	r3, [r7, #12]
 8018af0:	f043 0304 	orr.w	r3, r3, #4
 8018af4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018af6:	4b26      	ldr	r3, [pc, #152]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d126      	bne.n	8018b4c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018afe:	4b24      	ldr	r3, [pc, #144]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b00:	6a1b      	ldr	r3, [r3, #32]
 8018b02:	68fa      	ldr	r2, [r7, #12]
 8018b04:	0c12      	lsrs	r2, r2, #16
 8018b06:	b2d2      	uxtb	r2, r2
 8018b08:	4610      	mov	r0, r2
 8018b0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018b0c:	4b20      	ldr	r3, [pc, #128]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b0e:	6a1b      	ldr	r3, [r3, #32]
 8018b10:	68fa      	ldr	r2, [r7, #12]
 8018b12:	0a12      	lsrs	r2, r2, #8
 8018b14:	b2d2      	uxtb	r2, r2
 8018b16:	4610      	mov	r0, r2
 8018b18:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018b1a:	4b1d      	ldr	r3, [pc, #116]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b1c:	6a1b      	ldr	r3, [r3, #32]
 8018b1e:	68fa      	ldr	r2, [r7, #12]
 8018b20:	b2d2      	uxtb	r2, r2
 8018b22:	4610      	mov	r0, r2
 8018b24:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018b26:	2300      	movs	r3, #0
 8018b28:	82fb      	strh	r3, [r7, #22]
 8018b2a:	e00a      	b.n	8018b42 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8018b2c:	4b18      	ldr	r3, [pc, #96]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b2e:	6a1b      	ldr	r3, [r3, #32]
 8018b30:	8afa      	ldrh	r2, [r7, #22]
 8018b32:	68b9      	ldr	r1, [r7, #8]
 8018b34:	440a      	add	r2, r1
 8018b36:	7812      	ldrb	r2, [r2, #0]
 8018b38:	4610      	mov	r0, r2
 8018b3a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018b3c:	8afb      	ldrh	r3, [r7, #22]
 8018b3e:	3301      	adds	r3, #1
 8018b40:	82fb      	strh	r3, [r7, #22]
 8018b42:	8afa      	ldrh	r2, [r7, #22]
 8018b44:	88fb      	ldrh	r3, [r7, #6]
 8018b46:	429a      	cmp	r2, r3
 8018b48:	d3f0      	bcc.n	8018b2c <WIZCHIP_WRITE_BUF+0x58>
 8018b4a:	e017      	b.n	8018b7c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	0c1b      	lsrs	r3, r3, #16
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	0a1b      	lsrs	r3, r3, #8
 8018b58:	b2db      	uxtb	r3, r3
 8018b5a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018b62:	4b0b      	ldr	r3, [pc, #44]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b66:	f107 0210 	add.w	r2, r7, #16
 8018b6a:	2103      	movs	r1, #3
 8018b6c:	4610      	mov	r0, r2
 8018b6e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8018b70:	4b07      	ldr	r3, [pc, #28]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b74:	88fa      	ldrh	r2, [r7, #6]
 8018b76:	4611      	mov	r1, r2
 8018b78:	68b8      	ldr	r0, [r7, #8]
 8018b7a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018b7c:	4b04      	ldr	r3, [pc, #16]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b7e:	699b      	ldr	r3, [r3, #24]
 8018b80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018b82:	4b03      	ldr	r3, [pc, #12]	; (8018b90 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b84:	691b      	ldr	r3, [r3, #16]
 8018b86:	4798      	blx	r3
}
 8018b88:	bf00      	nop
 8018b8a:	3718      	adds	r7, #24
 8018b8c:	46bd      	mov	sp, r7
 8018b8e:	bd80      	pop	{r7, pc}
 8018b90:	200000c4 	.word	0x200000c4

08018b94 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8018b94:	b590      	push	{r4, r7, lr}
 8018b96:	b085      	sub	sp, #20
 8018b98:	af00      	add	r7, sp, #0
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	81fb      	strh	r3, [r7, #14]
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018ba6:	79fb      	ldrb	r3, [r7, #7]
 8018ba8:	009b      	lsls	r3, r3, #2
 8018baa:	3301      	adds	r3, #1
 8018bac:	00db      	lsls	r3, r3, #3
 8018bae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f7ff fe94 	bl	80188e0 <WIZCHIP_READ>
 8018bb8:	4603      	mov	r3, r0
 8018bba:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018bbc:	89bb      	ldrh	r3, [r7, #12]
 8018bbe:	021b      	lsls	r3, r3, #8
 8018bc0:	b29c      	uxth	r4, r3
 8018bc2:	79fb      	ldrb	r3, [r7, #7]
 8018bc4:	009b      	lsls	r3, r3, #2
 8018bc6:	3301      	adds	r3, #1
 8018bc8:	00db      	lsls	r3, r3, #3
 8018bca:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018bce:	4618      	mov	r0, r3
 8018bd0:	f7ff fe86 	bl	80188e0 <WIZCHIP_READ>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	4423      	add	r3, r4
 8018bda:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018bdc:	89bb      	ldrh	r3, [r7, #12]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	d01a      	beq.n	8018c18 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018be2:	79fb      	ldrb	r3, [r7, #7]
 8018be4:	009b      	lsls	r3, r3, #2
 8018be6:	3301      	adds	r3, #1
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7ff fe76 	bl	80188e0 <WIZCHIP_READ>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018bf8:	89fb      	ldrh	r3, [r7, #14]
 8018bfa:	021b      	lsls	r3, r3, #8
 8018bfc:	b29c      	uxth	r4, r3
 8018bfe:	79fb      	ldrb	r3, [r7, #7]
 8018c00:	009b      	lsls	r3, r3, #2
 8018c02:	3301      	adds	r3, #1
 8018c04:	00db      	lsls	r3, r3, #3
 8018c06:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	f7ff fe68 	bl	80188e0 <WIZCHIP_READ>
 8018c10:	4603      	mov	r3, r0
 8018c12:	b29b      	uxth	r3, r3
 8018c14:	4423      	add	r3, r4
 8018c16:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018c18:	89fa      	ldrh	r2, [r7, #14]
 8018c1a:	89bb      	ldrh	r3, [r7, #12]
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	d1c2      	bne.n	8018ba6 <getSn_TX_FSR+0x12>
   return val;
 8018c20:	89fb      	ldrh	r3, [r7, #14]
}
 8018c22:	4618      	mov	r0, r3
 8018c24:	3714      	adds	r7, #20
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bd90      	pop	{r4, r7, pc}

08018c2a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8018c2a:	b590      	push	{r4, r7, lr}
 8018c2c:	b085      	sub	sp, #20
 8018c2e:	af00      	add	r7, sp, #0
 8018c30:	4603      	mov	r3, r0
 8018c32:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018c34:	2300      	movs	r3, #0
 8018c36:	81fb      	strh	r3, [r7, #14]
 8018c38:	2300      	movs	r3, #0
 8018c3a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018c3c:	79fb      	ldrb	r3, [r7, #7]
 8018c3e:	009b      	lsls	r3, r3, #2
 8018c40:	3301      	adds	r3, #1
 8018c42:	00db      	lsls	r3, r3, #3
 8018c44:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8018c48:	4618      	mov	r0, r3
 8018c4a:	f7ff fe49 	bl	80188e0 <WIZCHIP_READ>
 8018c4e:	4603      	mov	r3, r0
 8018c50:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018c52:	89bb      	ldrh	r3, [r7, #12]
 8018c54:	021b      	lsls	r3, r3, #8
 8018c56:	b29c      	uxth	r4, r3
 8018c58:	79fb      	ldrb	r3, [r7, #7]
 8018c5a:	009b      	lsls	r3, r3, #2
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	00db      	lsls	r3, r3, #3
 8018c60:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018c64:	4618      	mov	r0, r3
 8018c66:	f7ff fe3b 	bl	80188e0 <WIZCHIP_READ>
 8018c6a:	4603      	mov	r3, r0
 8018c6c:	b29b      	uxth	r3, r3
 8018c6e:	4423      	add	r3, r4
 8018c70:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018c72:	89bb      	ldrh	r3, [r7, #12]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	d01a      	beq.n	8018cae <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018c78:	79fb      	ldrb	r3, [r7, #7]
 8018c7a:	009b      	lsls	r3, r3, #2
 8018c7c:	3301      	adds	r3, #1
 8018c7e:	00db      	lsls	r3, r3, #3
 8018c80:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7ff fe2b 	bl	80188e0 <WIZCHIP_READ>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018c8e:	89fb      	ldrh	r3, [r7, #14]
 8018c90:	021b      	lsls	r3, r3, #8
 8018c92:	b29c      	uxth	r4, r3
 8018c94:	79fb      	ldrb	r3, [r7, #7]
 8018c96:	009b      	lsls	r3, r3, #2
 8018c98:	3301      	adds	r3, #1
 8018c9a:	00db      	lsls	r3, r3, #3
 8018c9c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018ca0:	4618      	mov	r0, r3
 8018ca2:	f7ff fe1d 	bl	80188e0 <WIZCHIP_READ>
 8018ca6:	4603      	mov	r3, r0
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	4423      	add	r3, r4
 8018cac:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018cae:	89fa      	ldrh	r2, [r7, #14]
 8018cb0:	89bb      	ldrh	r3, [r7, #12]
 8018cb2:	429a      	cmp	r2, r3
 8018cb4:	d1c2      	bne.n	8018c3c <getSn_RX_RSR+0x12>
   return val;
 8018cb6:	89fb      	ldrh	r3, [r7, #14]
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3714      	adds	r7, #20
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd90      	pop	{r4, r7, pc}

08018cc0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018cc0:	b590      	push	{r4, r7, lr}
 8018cc2:	b085      	sub	sp, #20
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	4603      	mov	r3, r0
 8018cc8:	6039      	str	r1, [r7, #0]
 8018cca:	71fb      	strb	r3, [r7, #7]
 8018ccc:	4613      	mov	r3, r2
 8018cce:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018cd0:	2300      	movs	r3, #0
 8018cd2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8018cd8:	88bb      	ldrh	r3, [r7, #4]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d048      	beq.n	8018d70 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8018cde:	79fb      	ldrb	r3, [r7, #7]
 8018ce0:	009b      	lsls	r3, r3, #2
 8018ce2:	3301      	adds	r3, #1
 8018ce4:	00db      	lsls	r3, r3, #3
 8018ce6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018cea:	4618      	mov	r0, r3
 8018cec:	f7ff fdf8 	bl	80188e0 <WIZCHIP_READ>
 8018cf0:	4603      	mov	r3, r0
 8018cf2:	b29b      	uxth	r3, r3
 8018cf4:	021b      	lsls	r3, r3, #8
 8018cf6:	b29c      	uxth	r4, r3
 8018cf8:	79fb      	ldrb	r3, [r7, #7]
 8018cfa:	009b      	lsls	r3, r3, #2
 8018cfc:	3301      	adds	r3, #1
 8018cfe:	00db      	lsls	r3, r3, #3
 8018d00:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018d04:	4618      	mov	r0, r3
 8018d06:	f7ff fdeb 	bl	80188e0 <WIZCHIP_READ>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	b29b      	uxth	r3, r3
 8018d0e:	4423      	add	r3, r4
 8018d10:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8018d12:	89fb      	ldrh	r3, [r7, #14]
 8018d14:	021b      	lsls	r3, r3, #8
 8018d16:	79fa      	ldrb	r2, [r7, #7]
 8018d18:	0092      	lsls	r2, r2, #2
 8018d1a:	3202      	adds	r2, #2
 8018d1c:	00d2      	lsls	r2, r2, #3
 8018d1e:	4413      	add	r3, r2
 8018d20:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8018d22:	88bb      	ldrh	r3, [r7, #4]
 8018d24:	461a      	mov	r2, r3
 8018d26:	6839      	ldr	r1, [r7, #0]
 8018d28:	68b8      	ldr	r0, [r7, #8]
 8018d2a:	f7ff fed3 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8018d2e:	89fa      	ldrh	r2, [r7, #14]
 8018d30:	88bb      	ldrh	r3, [r7, #4]
 8018d32:	4413      	add	r3, r2
 8018d34:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8018d36:	79fb      	ldrb	r3, [r7, #7]
 8018d38:	009b      	lsls	r3, r3, #2
 8018d3a:	3301      	adds	r3, #1
 8018d3c:	00db      	lsls	r3, r3, #3
 8018d3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018d42:	461a      	mov	r2, r3
 8018d44:	89fb      	ldrh	r3, [r7, #14]
 8018d46:	0a1b      	lsrs	r3, r3, #8
 8018d48:	b29b      	uxth	r3, r3
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	4619      	mov	r1, r3
 8018d4e:	4610      	mov	r0, r2
 8018d50:	f7ff fe12 	bl	8018978 <WIZCHIP_WRITE>
 8018d54:	79fb      	ldrb	r3, [r7, #7]
 8018d56:	009b      	lsls	r3, r3, #2
 8018d58:	3301      	adds	r3, #1
 8018d5a:	00db      	lsls	r3, r3, #3
 8018d5c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018d60:	461a      	mov	r2, r3
 8018d62:	89fb      	ldrh	r3, [r7, #14]
 8018d64:	b2db      	uxtb	r3, r3
 8018d66:	4619      	mov	r1, r3
 8018d68:	4610      	mov	r0, r2
 8018d6a:	f7ff fe05 	bl	8018978 <WIZCHIP_WRITE>
 8018d6e:	e000      	b.n	8018d72 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8018d70:	bf00      	nop
}
 8018d72:	3714      	adds	r7, #20
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd90      	pop	{r4, r7, pc}

08018d78 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018d78:	b590      	push	{r4, r7, lr}
 8018d7a:	b085      	sub	sp, #20
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	4603      	mov	r3, r0
 8018d80:	6039      	str	r1, [r7, #0]
 8018d82:	71fb      	strb	r3, [r7, #7]
 8018d84:	4613      	mov	r3, r2
 8018d86:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018d88:	2300      	movs	r3, #0
 8018d8a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8018d90:	88bb      	ldrh	r3, [r7, #4]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d048      	beq.n	8018e28 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8018d96:	79fb      	ldrb	r3, [r7, #7]
 8018d98:	009b      	lsls	r3, r3, #2
 8018d9a:	3301      	adds	r3, #1
 8018d9c:	00db      	lsls	r3, r3, #3
 8018d9e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018da2:	4618      	mov	r0, r3
 8018da4:	f7ff fd9c 	bl	80188e0 <WIZCHIP_READ>
 8018da8:	4603      	mov	r3, r0
 8018daa:	b29b      	uxth	r3, r3
 8018dac:	021b      	lsls	r3, r3, #8
 8018dae:	b29c      	uxth	r4, r3
 8018db0:	79fb      	ldrb	r3, [r7, #7]
 8018db2:	009b      	lsls	r3, r3, #2
 8018db4:	3301      	adds	r3, #1
 8018db6:	00db      	lsls	r3, r3, #3
 8018db8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f7ff fd8f 	bl	80188e0 <WIZCHIP_READ>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	b29b      	uxth	r3, r3
 8018dc6:	4423      	add	r3, r4
 8018dc8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8018dca:	89fb      	ldrh	r3, [r7, #14]
 8018dcc:	021b      	lsls	r3, r3, #8
 8018dce:	79fa      	ldrb	r2, [r7, #7]
 8018dd0:	0092      	lsls	r2, r2, #2
 8018dd2:	3203      	adds	r2, #3
 8018dd4:	00d2      	lsls	r2, r2, #3
 8018dd6:	4413      	add	r3, r2
 8018dd8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8018dda:	88bb      	ldrh	r3, [r7, #4]
 8018ddc:	461a      	mov	r2, r3
 8018dde:	6839      	ldr	r1, [r7, #0]
 8018de0:	68b8      	ldr	r0, [r7, #8]
 8018de2:	f7ff fe17 	bl	8018a14 <WIZCHIP_READ_BUF>
   ptr += len;
 8018de6:	89fa      	ldrh	r2, [r7, #14]
 8018de8:	88bb      	ldrh	r3, [r7, #4]
 8018dea:	4413      	add	r3, r2
 8018dec:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018dee:	79fb      	ldrb	r3, [r7, #7]
 8018df0:	009b      	lsls	r3, r3, #2
 8018df2:	3301      	adds	r3, #1
 8018df4:	00db      	lsls	r3, r3, #3
 8018df6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	89fb      	ldrh	r3, [r7, #14]
 8018dfe:	0a1b      	lsrs	r3, r3, #8
 8018e00:	b29b      	uxth	r3, r3
 8018e02:	b2db      	uxtb	r3, r3
 8018e04:	4619      	mov	r1, r3
 8018e06:	4610      	mov	r0, r2
 8018e08:	f7ff fdb6 	bl	8018978 <WIZCHIP_WRITE>
 8018e0c:	79fb      	ldrb	r3, [r7, #7]
 8018e0e:	009b      	lsls	r3, r3, #2
 8018e10:	3301      	adds	r3, #1
 8018e12:	00db      	lsls	r3, r3, #3
 8018e14:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018e18:	461a      	mov	r2, r3
 8018e1a:	89fb      	ldrh	r3, [r7, #14]
 8018e1c:	b2db      	uxtb	r3, r3
 8018e1e:	4619      	mov	r1, r3
 8018e20:	4610      	mov	r0, r2
 8018e22:	f7ff fda9 	bl	8018978 <WIZCHIP_WRITE>
 8018e26:	e000      	b.n	8018e2a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8018e28:	bf00      	nop
}
 8018e2a:	3714      	adds	r7, #20
 8018e2c:	46bd      	mov	sp, r7
 8018e2e:	bd90      	pop	{r4, r7, pc}

08018e30 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018e30:	b590      	push	{r4, r7, lr}
 8018e32:	b085      	sub	sp, #20
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	4603      	mov	r3, r0
 8018e38:	460a      	mov	r2, r1
 8018e3a:	71fb      	strb	r3, [r7, #7]
 8018e3c:	4613      	mov	r3, r2
 8018e3e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018e40:	2300      	movs	r3, #0
 8018e42:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018e44:	79fb      	ldrb	r3, [r7, #7]
 8018e46:	009b      	lsls	r3, r3, #2
 8018e48:	3301      	adds	r3, #1
 8018e4a:	00db      	lsls	r3, r3, #3
 8018e4c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018e50:	4618      	mov	r0, r3
 8018e52:	f7ff fd45 	bl	80188e0 <WIZCHIP_READ>
 8018e56:	4603      	mov	r3, r0
 8018e58:	b29b      	uxth	r3, r3
 8018e5a:	021b      	lsls	r3, r3, #8
 8018e5c:	b29c      	uxth	r4, r3
 8018e5e:	79fb      	ldrb	r3, [r7, #7]
 8018e60:	009b      	lsls	r3, r3, #2
 8018e62:	3301      	adds	r3, #1
 8018e64:	00db      	lsls	r3, r3, #3
 8018e66:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f7ff fd38 	bl	80188e0 <WIZCHIP_READ>
 8018e70:	4603      	mov	r3, r0
 8018e72:	b29b      	uxth	r3, r3
 8018e74:	4423      	add	r3, r4
 8018e76:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8018e78:	89fa      	ldrh	r2, [r7, #14]
 8018e7a:	88bb      	ldrh	r3, [r7, #4]
 8018e7c:	4413      	add	r3, r2
 8018e7e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8018e80:	79fb      	ldrb	r3, [r7, #7]
 8018e82:	009b      	lsls	r3, r3, #2
 8018e84:	3301      	adds	r3, #1
 8018e86:	00db      	lsls	r3, r3, #3
 8018e88:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018e8c:	461a      	mov	r2, r3
 8018e8e:	89fb      	ldrh	r3, [r7, #14]
 8018e90:	0a1b      	lsrs	r3, r3, #8
 8018e92:	b29b      	uxth	r3, r3
 8018e94:	b2db      	uxtb	r3, r3
 8018e96:	4619      	mov	r1, r3
 8018e98:	4610      	mov	r0, r2
 8018e9a:	f7ff fd6d 	bl	8018978 <WIZCHIP_WRITE>
 8018e9e:	79fb      	ldrb	r3, [r7, #7]
 8018ea0:	009b      	lsls	r3, r3, #2
 8018ea2:	3301      	adds	r3, #1
 8018ea4:	00db      	lsls	r3, r3, #3
 8018ea6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018eaa:	461a      	mov	r2, r3
 8018eac:	89fb      	ldrh	r3, [r7, #14]
 8018eae:	b2db      	uxtb	r3, r3
 8018eb0:	4619      	mov	r1, r3
 8018eb2:	4610      	mov	r0, r2
 8018eb4:	f7ff fd60 	bl	8018978 <WIZCHIP_WRITE>
}
 8018eb8:	bf00      	nop
 8018eba:	3714      	adds	r7, #20
 8018ebc:	46bd      	mov	sp, r7
 8018ebe:	bd90      	pop	{r4, r7, pc}

08018ec0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018ec0:	b590      	push	{r4, r7, lr}
 8018ec2:	b085      	sub	sp, #20
 8018ec4:	af00      	add	r7, sp, #0
 8018ec6:	4604      	mov	r4, r0
 8018ec8:	4608      	mov	r0, r1
 8018eca:	4611      	mov	r1, r2
 8018ecc:	461a      	mov	r2, r3
 8018ece:	4623      	mov	r3, r4
 8018ed0:	71fb      	strb	r3, [r7, #7]
 8018ed2:	4603      	mov	r3, r0
 8018ed4:	71bb      	strb	r3, [r7, #6]
 8018ed6:	460b      	mov	r3, r1
 8018ed8:	80bb      	strh	r3, [r7, #4]
 8018eda:	4613      	mov	r3, r2
 8018edc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018ede:	79fb      	ldrb	r3, [r7, #7]
 8018ee0:	2b08      	cmp	r3, #8
 8018ee2:	d902      	bls.n	8018eea <socket+0x2a>
 8018ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ee8:	e0f0      	b.n	80190cc <socket+0x20c>
	switch(protocol)
 8018eea:	79bb      	ldrb	r3, [r7, #6]
 8018eec:	2b01      	cmp	r3, #1
 8018eee:	d005      	beq.n	8018efc <socket+0x3c>
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	dd11      	ble.n	8018f18 <socket+0x58>
 8018ef4:	3b02      	subs	r3, #2
 8018ef6:	2b02      	cmp	r3, #2
 8018ef8:	d80e      	bhi.n	8018f18 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8018efa:	e011      	b.n	8018f20 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018efc:	f107 030c 	add.w	r3, r7, #12
 8018f00:	2204      	movs	r2, #4
 8018f02:	4619      	mov	r1, r3
 8018f04:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8018f08:	f7ff fd84 	bl	8018a14 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d105      	bne.n	8018f1e <socket+0x5e>
 8018f12:	f06f 0302 	mvn.w	r3, #2
 8018f16:	e0d9      	b.n	80190cc <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8018f18:	f06f 0304 	mvn.w	r3, #4
 8018f1c:	e0d6      	b.n	80190cc <socket+0x20c>
	    break;
 8018f1e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018f20:	78fb      	ldrb	r3, [r7, #3]
 8018f22:	f003 0304 	and.w	r3, r3, #4
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d002      	beq.n	8018f30 <socket+0x70>
 8018f2a:	f06f 0305 	mvn.w	r3, #5
 8018f2e:	e0cd      	b.n	80190cc <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018f30:	78fb      	ldrb	r3, [r7, #3]
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	d028      	beq.n	8018f88 <socket+0xc8>
	{
   	switch(protocol)
 8018f36:	79bb      	ldrb	r3, [r7, #6]
 8018f38:	2b01      	cmp	r3, #1
 8018f3a:	d002      	beq.n	8018f42 <socket+0x82>
 8018f3c:	2b02      	cmp	r3, #2
 8018f3e:	d008      	beq.n	8018f52 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018f40:	e022      	b.n	8018f88 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018f42:	78fb      	ldrb	r3, [r7, #3]
 8018f44:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8018f48:	2b00      	cmp	r3, #0
 8018f4a:	d11a      	bne.n	8018f82 <socket+0xc2>
 8018f4c:	f06f 0305 	mvn.w	r3, #5
 8018f50:	e0bc      	b.n	80190cc <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8018f52:	78fb      	ldrb	r3, [r7, #3]
 8018f54:	f003 0320 	and.w	r3, r3, #32
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d006      	beq.n	8018f6a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8018f5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	db02      	blt.n	8018f6a <socket+0xaa>
 8018f64:	f06f 0305 	mvn.w	r3, #5
 8018f68:	e0b0      	b.n	80190cc <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8018f6a:	78fb      	ldrb	r3, [r7, #3]
 8018f6c:	f003 0310 	and.w	r3, r3, #16
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d008      	beq.n	8018f86 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8018f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	db04      	blt.n	8018f86 <socket+0xc6>
 8018f7c:	f06f 0305 	mvn.w	r3, #5
 8018f80:	e0a4      	b.n	80190cc <socket+0x20c>
   	      break;
 8018f82:	bf00      	nop
 8018f84:	e000      	b.n	8018f88 <socket+0xc8>
   	      break;
 8018f86:	bf00      	nop
   	}
   }
	close(sn);
 8018f88:	79fb      	ldrb	r3, [r7, #7]
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f000 f8ac 	bl	80190e8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8018f90:	79fb      	ldrb	r3, [r7, #7]
 8018f92:	009b      	lsls	r3, r3, #2
 8018f94:	3301      	adds	r3, #1
 8018f96:	00db      	lsls	r3, r3, #3
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f9e:	f023 030f 	bic.w	r3, r3, #15
 8018fa2:	b25a      	sxtb	r2, r3
 8018fa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018fa8:	4313      	orrs	r3, r2
 8018faa:	b25b      	sxtb	r3, r3
 8018fac:	b2db      	uxtb	r3, r3
 8018fae:	4619      	mov	r1, r3
 8018fb0:	f7ff fce2 	bl	8018978 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8018fb4:	88bb      	ldrh	r3, [r7, #4]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d110      	bne.n	8018fdc <socket+0x11c>
	{
	   port = sock_any_port++;
 8018fba:	4b46      	ldr	r3, [pc, #280]	; (80190d4 <socket+0x214>)
 8018fbc:	881b      	ldrh	r3, [r3, #0]
 8018fbe:	1c5a      	adds	r2, r3, #1
 8018fc0:	b291      	uxth	r1, r2
 8018fc2:	4a44      	ldr	r2, [pc, #272]	; (80190d4 <socket+0x214>)
 8018fc4:	8011      	strh	r1, [r2, #0]
 8018fc6:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8018fc8:	4b42      	ldr	r3, [pc, #264]	; (80190d4 <socket+0x214>)
 8018fca:	881b      	ldrh	r3, [r3, #0]
 8018fcc:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018fd0:	4293      	cmp	r3, r2
 8018fd2:	d103      	bne.n	8018fdc <socket+0x11c>
 8018fd4:	4b3f      	ldr	r3, [pc, #252]	; (80190d4 <socket+0x214>)
 8018fd6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018fda:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8018fdc:	79fb      	ldrb	r3, [r7, #7]
 8018fde:	009b      	lsls	r3, r3, #2
 8018fe0:	3301      	adds	r3, #1
 8018fe2:	00db      	lsls	r3, r3, #3
 8018fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018fe8:	461a      	mov	r2, r3
 8018fea:	88bb      	ldrh	r3, [r7, #4]
 8018fec:	0a1b      	lsrs	r3, r3, #8
 8018fee:	b29b      	uxth	r3, r3
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	4619      	mov	r1, r3
 8018ff4:	4610      	mov	r0, r2
 8018ff6:	f7ff fcbf 	bl	8018978 <WIZCHIP_WRITE>
 8018ffa:	79fb      	ldrb	r3, [r7, #7]
 8018ffc:	009b      	lsls	r3, r3, #2
 8018ffe:	3301      	adds	r3, #1
 8019000:	00db      	lsls	r3, r3, #3
 8019002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8019006:	461a      	mov	r2, r3
 8019008:	88bb      	ldrh	r3, [r7, #4]
 801900a:	b2db      	uxtb	r3, r3
 801900c:	4619      	mov	r1, r3
 801900e:	4610      	mov	r0, r2
 8019010:	f7ff fcb2 	bl	8018978 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8019014:	79fb      	ldrb	r3, [r7, #7]
 8019016:	009b      	lsls	r3, r3, #2
 8019018:	3301      	adds	r3, #1
 801901a:	00db      	lsls	r3, r3, #3
 801901c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019020:	2101      	movs	r1, #1
 8019022:	4618      	mov	r0, r3
 8019024:	f7ff fca8 	bl	8018978 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8019028:	bf00      	nop
 801902a:	79fb      	ldrb	r3, [r7, #7]
 801902c:	009b      	lsls	r3, r3, #2
 801902e:	3301      	adds	r3, #1
 8019030:	00db      	lsls	r3, r3, #3
 8019032:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019036:	4618      	mov	r0, r3
 8019038:	f7ff fc52 	bl	80188e0 <WIZCHIP_READ>
 801903c:	4603      	mov	r3, r0
 801903e:	2b00      	cmp	r3, #0
 8019040:	d1f3      	bne.n	801902a <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8019042:	79fb      	ldrb	r3, [r7, #7]
 8019044:	2201      	movs	r2, #1
 8019046:	fa02 f303 	lsl.w	r3, r2, r3
 801904a:	b21b      	sxth	r3, r3
 801904c:	43db      	mvns	r3, r3
 801904e:	b21a      	sxth	r2, r3
 8019050:	4b21      	ldr	r3, [pc, #132]	; (80190d8 <socket+0x218>)
 8019052:	881b      	ldrh	r3, [r3, #0]
 8019054:	b21b      	sxth	r3, r3
 8019056:	4013      	ands	r3, r2
 8019058:	b21b      	sxth	r3, r3
 801905a:	b29a      	uxth	r2, r3
 801905c:	4b1e      	ldr	r3, [pc, #120]	; (80190d8 <socket+0x218>)
 801905e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8019060:	78fb      	ldrb	r3, [r7, #3]
 8019062:	f003 0201 	and.w	r2, r3, #1
 8019066:	79fb      	ldrb	r3, [r7, #7]
 8019068:	fa02 f303 	lsl.w	r3, r2, r3
 801906c:	b21a      	sxth	r2, r3
 801906e:	4b1a      	ldr	r3, [pc, #104]	; (80190d8 <socket+0x218>)
 8019070:	881b      	ldrh	r3, [r3, #0]
 8019072:	b21b      	sxth	r3, r3
 8019074:	4313      	orrs	r3, r2
 8019076:	b21b      	sxth	r3, r3
 8019078:	b29a      	uxth	r2, r3
 801907a:	4b17      	ldr	r3, [pc, #92]	; (80190d8 <socket+0x218>)
 801907c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 801907e:	79fb      	ldrb	r3, [r7, #7]
 8019080:	2201      	movs	r2, #1
 8019082:	fa02 f303 	lsl.w	r3, r2, r3
 8019086:	b21b      	sxth	r3, r3
 8019088:	43db      	mvns	r3, r3
 801908a:	b21a      	sxth	r2, r3
 801908c:	4b13      	ldr	r3, [pc, #76]	; (80190dc <socket+0x21c>)
 801908e:	881b      	ldrh	r3, [r3, #0]
 8019090:	b21b      	sxth	r3, r3
 8019092:	4013      	ands	r3, r2
 8019094:	b21b      	sxth	r3, r3
 8019096:	b29a      	uxth	r2, r3
 8019098:	4b10      	ldr	r3, [pc, #64]	; (80190dc <socket+0x21c>)
 801909a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 801909c:	79fb      	ldrb	r3, [r7, #7]
 801909e:	4a10      	ldr	r2, [pc, #64]	; (80190e0 <socket+0x220>)
 80190a0:	2100      	movs	r1, #0
 80190a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80190a6:	79fb      	ldrb	r3, [r7, #7]
 80190a8:	4a0e      	ldr	r2, [pc, #56]	; (80190e4 <socket+0x224>)
 80190aa:	2100      	movs	r1, #0
 80190ac:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80190ae:	bf00      	nop
 80190b0:	79fb      	ldrb	r3, [r7, #7]
 80190b2:	009b      	lsls	r3, r3, #2
 80190b4:	3301      	adds	r3, #1
 80190b6:	00db      	lsls	r3, r3, #3
 80190b8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80190bc:	4618      	mov	r0, r3
 80190be:	f7ff fc0f 	bl	80188e0 <WIZCHIP_READ>
 80190c2:	4603      	mov	r3, r0
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	d0f3      	beq.n	80190b0 <socket+0x1f0>
   return (int8_t)sn;
 80190c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80190cc:	4618      	mov	r0, r3
 80190ce:	3714      	adds	r7, #20
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd90      	pop	{r4, r7, pc}
 80190d4:	200000c2 	.word	0x200000c2
 80190d8:	20000984 	.word	0x20000984
 80190dc:	20000986 	.word	0x20000986
 80190e0:	20000988 	.word	0x20000988
 80190e4:	20000998 	.word	0x20000998

080190e8 <close>:

int8_t close(uint8_t sn)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b082      	sub	sp, #8
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	4603      	mov	r3, r0
 80190f0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80190f2:	79fb      	ldrb	r3, [r7, #7]
 80190f4:	2b08      	cmp	r3, #8
 80190f6:	d902      	bls.n	80190fe <close+0x16>
 80190f8:	f04f 33ff 	mov.w	r3, #4294967295
 80190fc:	e055      	b.n	80191aa <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80190fe:	79fb      	ldrb	r3, [r7, #7]
 8019100:	009b      	lsls	r3, r3, #2
 8019102:	3301      	adds	r3, #1
 8019104:	00db      	lsls	r3, r3, #3
 8019106:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801910a:	2110      	movs	r1, #16
 801910c:	4618      	mov	r0, r3
 801910e:	f7ff fc33 	bl	8018978 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8019112:	bf00      	nop
 8019114:	79fb      	ldrb	r3, [r7, #7]
 8019116:	009b      	lsls	r3, r3, #2
 8019118:	3301      	adds	r3, #1
 801911a:	00db      	lsls	r3, r3, #3
 801911c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019120:	4618      	mov	r0, r3
 8019122:	f7ff fbdd 	bl	80188e0 <WIZCHIP_READ>
 8019126:	4603      	mov	r3, r0
 8019128:	2b00      	cmp	r3, #0
 801912a:	d1f3      	bne.n	8019114 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 801912c:	79fb      	ldrb	r3, [r7, #7]
 801912e:	009b      	lsls	r3, r3, #2
 8019130:	3301      	adds	r3, #1
 8019132:	00db      	lsls	r3, r3, #3
 8019134:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019138:	211f      	movs	r1, #31
 801913a:	4618      	mov	r0, r3
 801913c:	f7ff fc1c 	bl	8018978 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8019140:	79fb      	ldrb	r3, [r7, #7]
 8019142:	2201      	movs	r2, #1
 8019144:	fa02 f303 	lsl.w	r3, r2, r3
 8019148:	b21b      	sxth	r3, r3
 801914a:	43db      	mvns	r3, r3
 801914c:	b21a      	sxth	r2, r3
 801914e:	4b19      	ldr	r3, [pc, #100]	; (80191b4 <close+0xcc>)
 8019150:	881b      	ldrh	r3, [r3, #0]
 8019152:	b21b      	sxth	r3, r3
 8019154:	4013      	ands	r3, r2
 8019156:	b21b      	sxth	r3, r3
 8019158:	b29a      	uxth	r2, r3
 801915a:	4b16      	ldr	r3, [pc, #88]	; (80191b4 <close+0xcc>)
 801915c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 801915e:	79fb      	ldrb	r3, [r7, #7]
 8019160:	2201      	movs	r2, #1
 8019162:	fa02 f303 	lsl.w	r3, r2, r3
 8019166:	b21b      	sxth	r3, r3
 8019168:	43db      	mvns	r3, r3
 801916a:	b21a      	sxth	r2, r3
 801916c:	4b12      	ldr	r3, [pc, #72]	; (80191b8 <close+0xd0>)
 801916e:	881b      	ldrh	r3, [r3, #0]
 8019170:	b21b      	sxth	r3, r3
 8019172:	4013      	ands	r3, r2
 8019174:	b21b      	sxth	r3, r3
 8019176:	b29a      	uxth	r2, r3
 8019178:	4b0f      	ldr	r3, [pc, #60]	; (80191b8 <close+0xd0>)
 801917a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 801917c:	79fb      	ldrb	r3, [r7, #7]
 801917e:	4a0f      	ldr	r2, [pc, #60]	; (80191bc <close+0xd4>)
 8019180:	2100      	movs	r1, #0
 8019182:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8019186:	79fb      	ldrb	r3, [r7, #7]
 8019188:	4a0d      	ldr	r2, [pc, #52]	; (80191c0 <close+0xd8>)
 801918a:	2100      	movs	r1, #0
 801918c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801918e:	bf00      	nop
 8019190:	79fb      	ldrb	r3, [r7, #7]
 8019192:	009b      	lsls	r3, r3, #2
 8019194:	3301      	adds	r3, #1
 8019196:	00db      	lsls	r3, r3, #3
 8019198:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801919c:	4618      	mov	r0, r3
 801919e:	f7ff fb9f 	bl	80188e0 <WIZCHIP_READ>
 80191a2:	4603      	mov	r3, r0
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d1f3      	bne.n	8019190 <close+0xa8>
	return SOCK_OK;
 80191a8:	2301      	movs	r3, #1
}
 80191aa:	4618      	mov	r0, r3
 80191ac:	3708      	adds	r7, #8
 80191ae:	46bd      	mov	sp, r7
 80191b0:	bd80      	pop	{r7, pc}
 80191b2:	bf00      	nop
 80191b4:	20000984 	.word	0x20000984
 80191b8:	20000986 	.word	0x20000986
 80191bc:	20000988 	.word	0x20000988
 80191c0:	20000998 	.word	0x20000998

080191c4 <listen>:

int8_t listen(uint8_t sn)
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b082      	sub	sp, #8
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	4603      	mov	r3, r0
 80191cc:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80191ce:	79fb      	ldrb	r3, [r7, #7]
 80191d0:	2b08      	cmp	r3, #8
 80191d2:	d902      	bls.n	80191da <listen+0x16>
 80191d4:	f04f 33ff 	mov.w	r3, #4294967295
 80191d8:	e049      	b.n	801926e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80191da:	79fb      	ldrb	r3, [r7, #7]
 80191dc:	009b      	lsls	r3, r3, #2
 80191de:	3301      	adds	r3, #1
 80191e0:	00db      	lsls	r3, r3, #3
 80191e2:	4618      	mov	r0, r3
 80191e4:	f7ff fb7c 	bl	80188e0 <WIZCHIP_READ>
 80191e8:	4603      	mov	r3, r0
 80191ea:	f003 030f 	and.w	r3, r3, #15
 80191ee:	2b01      	cmp	r3, #1
 80191f0:	d002      	beq.n	80191f8 <listen+0x34>
 80191f2:	f06f 0304 	mvn.w	r3, #4
 80191f6:	e03a      	b.n	801926e <listen+0xaa>
	CHECK_SOCKINIT();
 80191f8:	79fb      	ldrb	r3, [r7, #7]
 80191fa:	009b      	lsls	r3, r3, #2
 80191fc:	3301      	adds	r3, #1
 80191fe:	00db      	lsls	r3, r3, #3
 8019200:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019204:	4618      	mov	r0, r3
 8019206:	f7ff fb6b 	bl	80188e0 <WIZCHIP_READ>
 801920a:	4603      	mov	r3, r0
 801920c:	2b13      	cmp	r3, #19
 801920e:	d002      	beq.n	8019216 <listen+0x52>
 8019210:	f06f 0302 	mvn.w	r3, #2
 8019214:	e02b      	b.n	801926e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8019216:	79fb      	ldrb	r3, [r7, #7]
 8019218:	009b      	lsls	r3, r3, #2
 801921a:	3301      	adds	r3, #1
 801921c:	00db      	lsls	r3, r3, #3
 801921e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019222:	2102      	movs	r1, #2
 8019224:	4618      	mov	r0, r3
 8019226:	f7ff fba7 	bl	8018978 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 801922a:	bf00      	nop
 801922c:	79fb      	ldrb	r3, [r7, #7]
 801922e:	009b      	lsls	r3, r3, #2
 8019230:	3301      	adds	r3, #1
 8019232:	00db      	lsls	r3, r3, #3
 8019234:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019238:	4618      	mov	r0, r3
 801923a:	f7ff fb51 	bl	80188e0 <WIZCHIP_READ>
 801923e:	4603      	mov	r3, r0
 8019240:	2b00      	cmp	r3, #0
 8019242:	d1f3      	bne.n	801922c <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8019244:	e006      	b.n	8019254 <listen+0x90>
   {
         close(sn);
 8019246:	79fb      	ldrb	r3, [r7, #7]
 8019248:	4618      	mov	r0, r3
 801924a:	f7ff ff4d 	bl	80190e8 <close>
         return SOCKERR_SOCKCLOSED;
 801924e:	f06f 0303 	mvn.w	r3, #3
 8019252:	e00c      	b.n	801926e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8019254:	79fb      	ldrb	r3, [r7, #7]
 8019256:	009b      	lsls	r3, r3, #2
 8019258:	3301      	adds	r3, #1
 801925a:	00db      	lsls	r3, r3, #3
 801925c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019260:	4618      	mov	r0, r3
 8019262:	f7ff fb3d 	bl	80188e0 <WIZCHIP_READ>
 8019266:	4603      	mov	r3, r0
 8019268:	2b14      	cmp	r3, #20
 801926a:	d1ec      	bne.n	8019246 <listen+0x82>
   }
   return SOCK_OK;
 801926c:	2301      	movs	r3, #1
}
 801926e:	4618      	mov	r0, r3
 8019270:	3708      	adds	r7, #8
 8019272:	46bd      	mov	sp, r7
 8019274:	bd80      	pop	{r7, pc}
	...

08019278 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b084      	sub	sp, #16
 801927c:	af00      	add	r7, sp, #0
 801927e:	4603      	mov	r3, r0
 8019280:	6039      	str	r1, [r7, #0]
 8019282:	71fb      	strb	r3, [r7, #7]
 8019284:	4613      	mov	r3, r2
 8019286:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8019288:	79fb      	ldrb	r3, [r7, #7]
 801928a:	2b08      	cmp	r3, #8
 801928c:	d902      	bls.n	8019294 <connect+0x1c>
 801928e:	f04f 33ff 	mov.w	r3, #4294967295
 8019292:	e0c6      	b.n	8019422 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019294:	79fb      	ldrb	r3, [r7, #7]
 8019296:	009b      	lsls	r3, r3, #2
 8019298:	3301      	adds	r3, #1
 801929a:	00db      	lsls	r3, r3, #3
 801929c:	4618      	mov	r0, r3
 801929e:	f7ff fb1f 	bl	80188e0 <WIZCHIP_READ>
 80192a2:	4603      	mov	r3, r0
 80192a4:	f003 030f 	and.w	r3, r3, #15
 80192a8:	2b01      	cmp	r3, #1
 80192aa:	d002      	beq.n	80192b2 <connect+0x3a>
 80192ac:	f06f 0304 	mvn.w	r3, #4
 80192b0:	e0b7      	b.n	8019422 <connect+0x1aa>
   CHECK_SOCKINIT();
 80192b2:	79fb      	ldrb	r3, [r7, #7]
 80192b4:	009b      	lsls	r3, r3, #2
 80192b6:	3301      	adds	r3, #1
 80192b8:	00db      	lsls	r3, r3, #3
 80192ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80192be:	4618      	mov	r0, r3
 80192c0:	f7ff fb0e 	bl	80188e0 <WIZCHIP_READ>
 80192c4:	4603      	mov	r3, r0
 80192c6:	2b13      	cmp	r3, #19
 80192c8:	d002      	beq.n	80192d0 <connect+0x58>
 80192ca:	f06f 0302 	mvn.w	r3, #2
 80192ce:	e0a8      	b.n	8019422 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80192d0:	683b      	ldr	r3, [r7, #0]
 80192d2:	781b      	ldrb	r3, [r3, #0]
 80192d4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80192d6:	68fb      	ldr	r3, [r7, #12]
 80192d8:	021b      	lsls	r3, r3, #8
 80192da:	683a      	ldr	r2, [r7, #0]
 80192dc:	3201      	adds	r2, #1
 80192de:	7812      	ldrb	r2, [r2, #0]
 80192e0:	4413      	add	r3, r2
 80192e2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	021b      	lsls	r3, r3, #8
 80192e8:	683a      	ldr	r2, [r7, #0]
 80192ea:	3202      	adds	r2, #2
 80192ec:	7812      	ldrb	r2, [r2, #0]
 80192ee:	4413      	add	r3, r2
 80192f0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	021b      	lsls	r3, r3, #8
 80192f6:	683a      	ldr	r2, [r7, #0]
 80192f8:	3203      	adds	r2, #3
 80192fa:	7812      	ldrb	r2, [r2, #0]
 80192fc:	4413      	add	r3, r2
 80192fe:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019306:	d002      	beq.n	801930e <connect+0x96>
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d102      	bne.n	8019314 <connect+0x9c>
 801930e:	f06f 030b 	mvn.w	r3, #11
 8019312:	e086      	b.n	8019422 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8019314:	88bb      	ldrh	r3, [r7, #4]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d102      	bne.n	8019320 <connect+0xa8>
 801931a:	f06f 030a 	mvn.w	r3, #10
 801931e:	e080      	b.n	8019422 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8019320:	79fb      	ldrb	r3, [r7, #7]
 8019322:	009b      	lsls	r3, r3, #2
 8019324:	3301      	adds	r3, #1
 8019326:	00db      	lsls	r3, r3, #3
 8019328:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801932c:	2204      	movs	r2, #4
 801932e:	6839      	ldr	r1, [r7, #0]
 8019330:	4618      	mov	r0, r3
 8019332:	f7ff fbcf 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8019336:	79fb      	ldrb	r3, [r7, #7]
 8019338:	009b      	lsls	r3, r3, #2
 801933a:	3301      	adds	r3, #1
 801933c:	00db      	lsls	r3, r3, #3
 801933e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019342:	461a      	mov	r2, r3
 8019344:	88bb      	ldrh	r3, [r7, #4]
 8019346:	0a1b      	lsrs	r3, r3, #8
 8019348:	b29b      	uxth	r3, r3
 801934a:	b2db      	uxtb	r3, r3
 801934c:	4619      	mov	r1, r3
 801934e:	4610      	mov	r0, r2
 8019350:	f7ff fb12 	bl	8018978 <WIZCHIP_WRITE>
 8019354:	79fb      	ldrb	r3, [r7, #7]
 8019356:	009b      	lsls	r3, r3, #2
 8019358:	3301      	adds	r3, #1
 801935a:	00db      	lsls	r3, r3, #3
 801935c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8019360:	461a      	mov	r2, r3
 8019362:	88bb      	ldrh	r3, [r7, #4]
 8019364:	b2db      	uxtb	r3, r3
 8019366:	4619      	mov	r1, r3
 8019368:	4610      	mov	r0, r2
 801936a:	f7ff fb05 	bl	8018978 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801936e:	79fb      	ldrb	r3, [r7, #7]
 8019370:	009b      	lsls	r3, r3, #2
 8019372:	3301      	adds	r3, #1
 8019374:	00db      	lsls	r3, r3, #3
 8019376:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801937a:	2104      	movs	r1, #4
 801937c:	4618      	mov	r0, r3
 801937e:	f7ff fafb 	bl	8018978 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8019382:	bf00      	nop
 8019384:	79fb      	ldrb	r3, [r7, #7]
 8019386:	009b      	lsls	r3, r3, #2
 8019388:	3301      	adds	r3, #1
 801938a:	00db      	lsls	r3, r3, #3
 801938c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019390:	4618      	mov	r0, r3
 8019392:	f7ff faa5 	bl	80188e0 <WIZCHIP_READ>
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	d1f3      	bne.n	8019384 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801939c:	4b23      	ldr	r3, [pc, #140]	; (801942c <connect+0x1b4>)
 801939e:	881b      	ldrh	r3, [r3, #0]
 80193a0:	461a      	mov	r2, r3
 80193a2:	79fb      	ldrb	r3, [r7, #7]
 80193a4:	fa42 f303 	asr.w	r3, r2, r3
 80193a8:	f003 0301 	and.w	r3, r3, #1
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d02b      	beq.n	8019408 <connect+0x190>
 80193b0:	2300      	movs	r3, #0
 80193b2:	e036      	b.n	8019422 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80193b4:	79fb      	ldrb	r3, [r7, #7]
 80193b6:	009b      	lsls	r3, r3, #2
 80193b8:	3301      	adds	r3, #1
 80193ba:	00db      	lsls	r3, r3, #3
 80193bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80193c0:	4618      	mov	r0, r3
 80193c2:	f7ff fa8d 	bl	80188e0 <WIZCHIP_READ>
 80193c6:	4603      	mov	r3, r0
 80193c8:	f003 0308 	and.w	r3, r3, #8
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d00c      	beq.n	80193ea <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80193d0:	79fb      	ldrb	r3, [r7, #7]
 80193d2:	009b      	lsls	r3, r3, #2
 80193d4:	3301      	adds	r3, #1
 80193d6:	00db      	lsls	r3, r3, #3
 80193d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80193dc:	2108      	movs	r1, #8
 80193de:	4618      	mov	r0, r3
 80193e0:	f7ff faca 	bl	8018978 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80193e4:	f06f 030c 	mvn.w	r3, #12
 80193e8:	e01b      	b.n	8019422 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80193ea:	79fb      	ldrb	r3, [r7, #7]
 80193ec:	009b      	lsls	r3, r3, #2
 80193ee:	3301      	adds	r3, #1
 80193f0:	00db      	lsls	r3, r3, #3
 80193f2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80193f6:	4618      	mov	r0, r3
 80193f8:	f7ff fa72 	bl	80188e0 <WIZCHIP_READ>
 80193fc:	4603      	mov	r3, r0
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d102      	bne.n	8019408 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8019402:	f06f 0303 	mvn.w	r3, #3
 8019406:	e00c      	b.n	8019422 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8019408:	79fb      	ldrb	r3, [r7, #7]
 801940a:	009b      	lsls	r3, r3, #2
 801940c:	3301      	adds	r3, #1
 801940e:	00db      	lsls	r3, r3, #3
 8019410:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019414:	4618      	mov	r0, r3
 8019416:	f7ff fa63 	bl	80188e0 <WIZCHIP_READ>
 801941a:	4603      	mov	r3, r0
 801941c:	2b17      	cmp	r3, #23
 801941e:	d1c9      	bne.n	80193b4 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8019420:	2301      	movs	r3, #1
}
 8019422:	4618      	mov	r0, r3
 8019424:	3710      	adds	r7, #16
 8019426:	46bd      	mov	sp, r7
 8019428:	bd80      	pop	{r7, pc}
 801942a:	bf00      	nop
 801942c:	20000984 	.word	0x20000984

08019430 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	4603      	mov	r3, r0
 8019438:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 801943a:	79fb      	ldrb	r3, [r7, #7]
 801943c:	2b08      	cmp	r3, #8
 801943e:	d902      	bls.n	8019446 <disconnect+0x16>
 8019440:	f04f 33ff 	mov.w	r3, #4294967295
 8019444:	e062      	b.n	801950c <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019446:	79fb      	ldrb	r3, [r7, #7]
 8019448:	009b      	lsls	r3, r3, #2
 801944a:	3301      	adds	r3, #1
 801944c:	00db      	lsls	r3, r3, #3
 801944e:	4618      	mov	r0, r3
 8019450:	f7ff fa46 	bl	80188e0 <WIZCHIP_READ>
 8019454:	4603      	mov	r3, r0
 8019456:	f003 030f 	and.w	r3, r3, #15
 801945a:	2b01      	cmp	r3, #1
 801945c:	d002      	beq.n	8019464 <disconnect+0x34>
 801945e:	f06f 0304 	mvn.w	r3, #4
 8019462:	e053      	b.n	801950c <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8019464:	79fb      	ldrb	r3, [r7, #7]
 8019466:	009b      	lsls	r3, r3, #2
 8019468:	3301      	adds	r3, #1
 801946a:	00db      	lsls	r3, r3, #3
 801946c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019470:	2108      	movs	r1, #8
 8019472:	4618      	mov	r0, r3
 8019474:	f7ff fa80 	bl	8018978 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019478:	bf00      	nop
 801947a:	79fb      	ldrb	r3, [r7, #7]
 801947c:	009b      	lsls	r3, r3, #2
 801947e:	3301      	adds	r3, #1
 8019480:	00db      	lsls	r3, r3, #3
 8019482:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff fa2a 	bl	80188e0 <WIZCHIP_READ>
 801948c:	4603      	mov	r3, r0
 801948e:	2b00      	cmp	r3, #0
 8019490:	d1f3      	bne.n	801947a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8019492:	79fb      	ldrb	r3, [r7, #7]
 8019494:	2201      	movs	r2, #1
 8019496:	fa02 f303 	lsl.w	r3, r2, r3
 801949a:	b21b      	sxth	r3, r3
 801949c:	43db      	mvns	r3, r3
 801949e:	b21a      	sxth	r2, r3
 80194a0:	4b1c      	ldr	r3, [pc, #112]	; (8019514 <disconnect+0xe4>)
 80194a2:	881b      	ldrh	r3, [r3, #0]
 80194a4:	b21b      	sxth	r3, r3
 80194a6:	4013      	ands	r3, r2
 80194a8:	b21b      	sxth	r3, r3
 80194aa:	b29a      	uxth	r2, r3
 80194ac:	4b19      	ldr	r3, [pc, #100]	; (8019514 <disconnect+0xe4>)
 80194ae:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80194b0:	4b19      	ldr	r3, [pc, #100]	; (8019518 <disconnect+0xe8>)
 80194b2:	881b      	ldrh	r3, [r3, #0]
 80194b4:	461a      	mov	r2, r3
 80194b6:	79fb      	ldrb	r3, [r7, #7]
 80194b8:	fa42 f303 	asr.w	r3, r2, r3
 80194bc:	f003 0301 	and.w	r3, r3, #1
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d016      	beq.n	80194f2 <disconnect+0xc2>
 80194c4:	2300      	movs	r3, #0
 80194c6:	e021      	b.n	801950c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 80194c8:	79fb      	ldrb	r3, [r7, #7]
 80194ca:	009b      	lsls	r3, r3, #2
 80194cc:	3301      	adds	r3, #1
 80194ce:	00db      	lsls	r3, r3, #3
 80194d0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80194d4:	4618      	mov	r0, r3
 80194d6:	f7ff fa03 	bl	80188e0 <WIZCHIP_READ>
 80194da:	4603      	mov	r3, r0
 80194dc:	f003 0308 	and.w	r3, r3, #8
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d006      	beq.n	80194f2 <disconnect+0xc2>
	   {
	      close(sn);
 80194e4:	79fb      	ldrb	r3, [r7, #7]
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7ff fdfe 	bl	80190e8 <close>
	      return SOCKERR_TIMEOUT;
 80194ec:	f06f 030c 	mvn.w	r3, #12
 80194f0:	e00c      	b.n	801950c <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80194f2:	79fb      	ldrb	r3, [r7, #7]
 80194f4:	009b      	lsls	r3, r3, #2
 80194f6:	3301      	adds	r3, #1
 80194f8:	00db      	lsls	r3, r3, #3
 80194fa:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80194fe:	4618      	mov	r0, r3
 8019500:	f7ff f9ee 	bl	80188e0 <WIZCHIP_READ>
 8019504:	4603      	mov	r3, r0
 8019506:	2b00      	cmp	r3, #0
 8019508:	d1de      	bne.n	80194c8 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 801950a:	2301      	movs	r3, #1
}
 801950c:	4618      	mov	r0, r3
 801950e:	3708      	adds	r7, #8
 8019510:	46bd      	mov	sp, r7
 8019512:	bd80      	pop	{r7, pc}
 8019514:	20000986 	.word	0x20000986
 8019518:	20000984 	.word	0x20000984

0801951c <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b084      	sub	sp, #16
 8019520:	af00      	add	r7, sp, #0
 8019522:	4603      	mov	r3, r0
 8019524:	6039      	str	r1, [r7, #0]
 8019526:	71fb      	strb	r3, [r7, #7]
 8019528:	4613      	mov	r3, r2
 801952a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 801952c:	2300      	movs	r3, #0
 801952e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8019530:	2300      	movs	r3, #0
 8019532:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8019534:	79fb      	ldrb	r3, [r7, #7]
 8019536:	2b08      	cmp	r3, #8
 8019538:	d902      	bls.n	8019540 <send+0x24>
 801953a:	f04f 33ff 	mov.w	r3, #4294967295
 801953e:	e0de      	b.n	80196fe <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019540:	79fb      	ldrb	r3, [r7, #7]
 8019542:	009b      	lsls	r3, r3, #2
 8019544:	3301      	adds	r3, #1
 8019546:	00db      	lsls	r3, r3, #3
 8019548:	4618      	mov	r0, r3
 801954a:	f7ff f9c9 	bl	80188e0 <WIZCHIP_READ>
 801954e:	4603      	mov	r3, r0
 8019550:	f003 030f 	and.w	r3, r3, #15
 8019554:	2b01      	cmp	r3, #1
 8019556:	d002      	beq.n	801955e <send+0x42>
 8019558:	f06f 0304 	mvn.w	r3, #4
 801955c:	e0cf      	b.n	80196fe <send+0x1e2>
   CHECK_SOCKDATA();
 801955e:	88bb      	ldrh	r3, [r7, #4]
 8019560:	2b00      	cmp	r3, #0
 8019562:	d102      	bne.n	801956a <send+0x4e>
 8019564:	f06f 030d 	mvn.w	r3, #13
 8019568:	e0c9      	b.n	80196fe <send+0x1e2>
   tmp = getSn_SR(sn);
 801956a:	79fb      	ldrb	r3, [r7, #7]
 801956c:	009b      	lsls	r3, r3, #2
 801956e:	3301      	adds	r3, #1
 8019570:	00db      	lsls	r3, r3, #3
 8019572:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019576:	4618      	mov	r0, r3
 8019578:	f7ff f9b2 	bl	80188e0 <WIZCHIP_READ>
 801957c:	4603      	mov	r3, r0
 801957e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8019580:	7bfb      	ldrb	r3, [r7, #15]
 8019582:	2b17      	cmp	r3, #23
 8019584:	d005      	beq.n	8019592 <send+0x76>
 8019586:	7bfb      	ldrb	r3, [r7, #15]
 8019588:	2b1c      	cmp	r3, #28
 801958a:	d002      	beq.n	8019592 <send+0x76>
 801958c:	f06f 0306 	mvn.w	r3, #6
 8019590:	e0b5      	b.n	80196fe <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8019592:	4b5d      	ldr	r3, [pc, #372]	; (8019708 <send+0x1ec>)
 8019594:	881b      	ldrh	r3, [r3, #0]
 8019596:	461a      	mov	r2, r3
 8019598:	79fb      	ldrb	r3, [r7, #7]
 801959a:	fa42 f303 	asr.w	r3, r2, r3
 801959e:	f003 0301 	and.w	r3, r3, #1
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d039      	beq.n	801961a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80195a6:	79fb      	ldrb	r3, [r7, #7]
 80195a8:	009b      	lsls	r3, r3, #2
 80195aa:	3301      	adds	r3, #1
 80195ac:	00db      	lsls	r3, r3, #3
 80195ae:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80195b2:	4618      	mov	r0, r3
 80195b4:	f7ff f994 	bl	80188e0 <WIZCHIP_READ>
 80195b8:	4603      	mov	r3, r0
 80195ba:	f003 031f 	and.w	r3, r3, #31
 80195be:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80195c0:	7bfb      	ldrb	r3, [r7, #15]
 80195c2:	f003 0310 	and.w	r3, r3, #16
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d019      	beq.n	80195fe <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80195ca:	79fb      	ldrb	r3, [r7, #7]
 80195cc:	009b      	lsls	r3, r3, #2
 80195ce:	3301      	adds	r3, #1
 80195d0:	00db      	lsls	r3, r3, #3
 80195d2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80195d6:	2110      	movs	r1, #16
 80195d8:	4618      	mov	r0, r3
 80195da:	f7ff f9cd 	bl	8018978 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 80195de:	79fb      	ldrb	r3, [r7, #7]
 80195e0:	2201      	movs	r2, #1
 80195e2:	fa02 f303 	lsl.w	r3, r2, r3
 80195e6:	b21b      	sxth	r3, r3
 80195e8:	43db      	mvns	r3, r3
 80195ea:	b21a      	sxth	r2, r3
 80195ec:	4b46      	ldr	r3, [pc, #280]	; (8019708 <send+0x1ec>)
 80195ee:	881b      	ldrh	r3, [r3, #0]
 80195f0:	b21b      	sxth	r3, r3
 80195f2:	4013      	ands	r3, r2
 80195f4:	b21b      	sxth	r3, r3
 80195f6:	b29a      	uxth	r2, r3
 80195f8:	4b43      	ldr	r3, [pc, #268]	; (8019708 <send+0x1ec>)
 80195fa:	801a      	strh	r2, [r3, #0]
 80195fc:	e00d      	b.n	801961a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80195fe:	7bfb      	ldrb	r3, [r7, #15]
 8019600:	f003 0308 	and.w	r3, r3, #8
 8019604:	2b00      	cmp	r3, #0
 8019606:	d006      	beq.n	8019616 <send+0xfa>
      {
         close(sn);
 8019608:	79fb      	ldrb	r3, [r7, #7]
 801960a:	4618      	mov	r0, r3
 801960c:	f7ff fd6c 	bl	80190e8 <close>
         return SOCKERR_TIMEOUT;
 8019610:	f06f 030c 	mvn.w	r3, #12
 8019614:	e073      	b.n	80196fe <send+0x1e2>
      }
      else return SOCK_BUSY;
 8019616:	2300      	movs	r3, #0
 8019618:	e071      	b.n	80196fe <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 801961a:	79fb      	ldrb	r3, [r7, #7]
 801961c:	009b      	lsls	r3, r3, #2
 801961e:	3301      	adds	r3, #1
 8019620:	00db      	lsls	r3, r3, #3
 8019622:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019626:	4618      	mov	r0, r3
 8019628:	f7ff f95a 	bl	80188e0 <WIZCHIP_READ>
 801962c:	4603      	mov	r3, r0
 801962e:	b29b      	uxth	r3, r3
 8019630:	029b      	lsls	r3, r3, #10
 8019632:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8019634:	88ba      	ldrh	r2, [r7, #4]
 8019636:	89bb      	ldrh	r3, [r7, #12]
 8019638:	429a      	cmp	r2, r3
 801963a:	d901      	bls.n	8019640 <send+0x124>
 801963c:	89bb      	ldrh	r3, [r7, #12]
 801963e:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8019640:	79fb      	ldrb	r3, [r7, #7]
 8019642:	4618      	mov	r0, r3
 8019644:	f7ff faa6 	bl	8018b94 <getSn_TX_FSR>
 8019648:	4603      	mov	r3, r0
 801964a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 801964c:	79fb      	ldrb	r3, [r7, #7]
 801964e:	009b      	lsls	r3, r3, #2
 8019650:	3301      	adds	r3, #1
 8019652:	00db      	lsls	r3, r3, #3
 8019654:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019658:	4618      	mov	r0, r3
 801965a:	f7ff f941 	bl	80188e0 <WIZCHIP_READ>
 801965e:	4603      	mov	r3, r0
 8019660:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8019662:	7bfb      	ldrb	r3, [r7, #15]
 8019664:	2b17      	cmp	r3, #23
 8019666:	d009      	beq.n	801967c <send+0x160>
 8019668:	7bfb      	ldrb	r3, [r7, #15]
 801966a:	2b1c      	cmp	r3, #28
 801966c:	d006      	beq.n	801967c <send+0x160>
      {
         close(sn);
 801966e:	79fb      	ldrb	r3, [r7, #7]
 8019670:	4618      	mov	r0, r3
 8019672:	f7ff fd39 	bl	80190e8 <close>
         return SOCKERR_SOCKSTATUS;
 8019676:	f06f 0306 	mvn.w	r3, #6
 801967a:	e040      	b.n	80196fe <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801967c:	4b23      	ldr	r3, [pc, #140]	; (801970c <send+0x1f0>)
 801967e:	881b      	ldrh	r3, [r3, #0]
 8019680:	461a      	mov	r2, r3
 8019682:	79fb      	ldrb	r3, [r7, #7]
 8019684:	fa42 f303 	asr.w	r3, r2, r3
 8019688:	f003 0301 	and.w	r3, r3, #1
 801968c:	2b00      	cmp	r3, #0
 801968e:	d005      	beq.n	801969c <send+0x180>
 8019690:	88ba      	ldrh	r2, [r7, #4]
 8019692:	89bb      	ldrh	r3, [r7, #12]
 8019694:	429a      	cmp	r2, r3
 8019696:	d901      	bls.n	801969c <send+0x180>
 8019698:	2300      	movs	r3, #0
 801969a:	e030      	b.n	80196fe <send+0x1e2>
      if(len <= freesize) break;
 801969c:	88ba      	ldrh	r2, [r7, #4]
 801969e:	89bb      	ldrh	r3, [r7, #12]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	d900      	bls.n	80196a6 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 80196a4:	e7cc      	b.n	8019640 <send+0x124>
      if(len <= freesize) break;
 80196a6:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80196a8:	88ba      	ldrh	r2, [r7, #4]
 80196aa:	79fb      	ldrb	r3, [r7, #7]
 80196ac:	6839      	ldr	r1, [r7, #0]
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7ff fb06 	bl	8018cc0 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80196b4:	79fb      	ldrb	r3, [r7, #7]
 80196b6:	009b      	lsls	r3, r3, #2
 80196b8:	3301      	adds	r3, #1
 80196ba:	00db      	lsls	r3, r3, #3
 80196bc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196c0:	2120      	movs	r1, #32
 80196c2:	4618      	mov	r0, r3
 80196c4:	f7ff f958 	bl	8018978 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80196c8:	bf00      	nop
 80196ca:	79fb      	ldrb	r3, [r7, #7]
 80196cc:	009b      	lsls	r3, r3, #2
 80196ce:	3301      	adds	r3, #1
 80196d0:	00db      	lsls	r3, r3, #3
 80196d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196d6:	4618      	mov	r0, r3
 80196d8:	f7ff f902 	bl	80188e0 <WIZCHIP_READ>
 80196dc:	4603      	mov	r3, r0
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d1f3      	bne.n	80196ca <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80196e2:	79fb      	ldrb	r3, [r7, #7]
 80196e4:	2201      	movs	r2, #1
 80196e6:	fa02 f303 	lsl.w	r3, r2, r3
 80196ea:	b21a      	sxth	r2, r3
 80196ec:	4b06      	ldr	r3, [pc, #24]	; (8019708 <send+0x1ec>)
 80196ee:	881b      	ldrh	r3, [r3, #0]
 80196f0:	b21b      	sxth	r3, r3
 80196f2:	4313      	orrs	r3, r2
 80196f4:	b21b      	sxth	r3, r3
 80196f6:	b29a      	uxth	r2, r3
 80196f8:	4b03      	ldr	r3, [pc, #12]	; (8019708 <send+0x1ec>)
 80196fa:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80196fc:	88bb      	ldrh	r3, [r7, #4]
}
 80196fe:	4618      	mov	r0, r3
 8019700:	3710      	adds	r7, #16
 8019702:	46bd      	mov	sp, r7
 8019704:	bd80      	pop	{r7, pc}
 8019706:	bf00      	nop
 8019708:	20000986 	.word	0x20000986
 801970c:	20000984 	.word	0x20000984

08019710 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8019710:	b590      	push	{r4, r7, lr}
 8019712:	b085      	sub	sp, #20
 8019714:	af00      	add	r7, sp, #0
 8019716:	4603      	mov	r3, r0
 8019718:	6039      	str	r1, [r7, #0]
 801971a:	71fb      	strb	r3, [r7, #7]
 801971c:	4613      	mov	r3, r2
 801971e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8019720:	2300      	movs	r3, #0
 8019722:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8019724:	2300      	movs	r3, #0
 8019726:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8019728:	79fb      	ldrb	r3, [r7, #7]
 801972a:	2b08      	cmp	r3, #8
 801972c:	d902      	bls.n	8019734 <recv+0x24>
 801972e:	f04f 33ff 	mov.w	r3, #4294967295
 8019732:	e09c      	b.n	801986e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019734:	79fb      	ldrb	r3, [r7, #7]
 8019736:	009b      	lsls	r3, r3, #2
 8019738:	3301      	adds	r3, #1
 801973a:	00db      	lsls	r3, r3, #3
 801973c:	4618      	mov	r0, r3
 801973e:	f7ff f8cf 	bl	80188e0 <WIZCHIP_READ>
 8019742:	4603      	mov	r3, r0
 8019744:	f003 030f 	and.w	r3, r3, #15
 8019748:	2b01      	cmp	r3, #1
 801974a:	d002      	beq.n	8019752 <recv+0x42>
 801974c:	f06f 0304 	mvn.w	r3, #4
 8019750:	e08d      	b.n	801986e <recv+0x15e>
   CHECK_SOCKDATA();
 8019752:	88bb      	ldrh	r3, [r7, #4]
 8019754:	2b00      	cmp	r3, #0
 8019756:	d102      	bne.n	801975e <recv+0x4e>
 8019758:	f06f 030d 	mvn.w	r3, #13
 801975c:	e087      	b.n	801986e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 801975e:	79fb      	ldrb	r3, [r7, #7]
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	3301      	adds	r3, #1
 8019764:	00db      	lsls	r3, r3, #3
 8019766:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801976a:	4618      	mov	r0, r3
 801976c:	f7ff f8b8 	bl	80188e0 <WIZCHIP_READ>
 8019770:	4603      	mov	r3, r0
 8019772:	b29b      	uxth	r3, r3
 8019774:	029b      	lsls	r3, r3, #10
 8019776:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8019778:	89ba      	ldrh	r2, [r7, #12]
 801977a:	88bb      	ldrh	r3, [r7, #4]
 801977c:	429a      	cmp	r2, r3
 801977e:	d201      	bcs.n	8019784 <recv+0x74>
 8019780:	89bb      	ldrh	r3, [r7, #12]
 8019782:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8019784:	79fb      	ldrb	r3, [r7, #7]
 8019786:	4618      	mov	r0, r3
 8019788:	f7ff fa4f 	bl	8018c2a <getSn_RX_RSR>
 801978c:	4603      	mov	r3, r0
 801978e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8019790:	79fb      	ldrb	r3, [r7, #7]
 8019792:	009b      	lsls	r3, r3, #2
 8019794:	3301      	adds	r3, #1
 8019796:	00db      	lsls	r3, r3, #3
 8019798:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801979c:	4618      	mov	r0, r3
 801979e:	f7ff f89f 	bl	80188e0 <WIZCHIP_READ>
 80197a2:	4603      	mov	r3, r0
 80197a4:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80197a6:	7bfb      	ldrb	r3, [r7, #15]
 80197a8:	2b17      	cmp	r3, #23
 80197aa:	d026      	beq.n	80197fa <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80197ac:	7bfb      	ldrb	r3, [r7, #15]
 80197ae:	2b1c      	cmp	r3, #28
 80197b0:	d11c      	bne.n	80197ec <recv+0xdc>
            {
               if(recvsize != 0) break;
 80197b2:	89bb      	ldrh	r3, [r7, #12]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d133      	bne.n	8019820 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 80197b8:	79fb      	ldrb	r3, [r7, #7]
 80197ba:	4618      	mov	r0, r3
 80197bc:	f7ff f9ea 	bl	8018b94 <getSn_TX_FSR>
 80197c0:	4603      	mov	r3, r0
 80197c2:	461c      	mov	r4, r3
 80197c4:	79fb      	ldrb	r3, [r7, #7]
 80197c6:	009b      	lsls	r3, r3, #2
 80197c8:	3301      	adds	r3, #1
 80197ca:	00db      	lsls	r3, r3, #3
 80197cc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80197d0:	4618      	mov	r0, r3
 80197d2:	f7ff f885 	bl	80188e0 <WIZCHIP_READ>
 80197d6:	4603      	mov	r3, r0
 80197d8:	029b      	lsls	r3, r3, #10
 80197da:	429c      	cmp	r4, r3
 80197dc:	d10d      	bne.n	80197fa <recv+0xea>
               {
                  close(sn);
 80197de:	79fb      	ldrb	r3, [r7, #7]
 80197e0:	4618      	mov	r0, r3
 80197e2:	f7ff fc81 	bl	80190e8 <close>
                  return SOCKERR_SOCKSTATUS;
 80197e6:	f06f 0306 	mvn.w	r3, #6
 80197ea:	e040      	b.n	801986e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80197ec:	79fb      	ldrb	r3, [r7, #7]
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7ff fc7a 	bl	80190e8 <close>
               return SOCKERR_SOCKSTATUS;
 80197f4:	f06f 0306 	mvn.w	r3, #6
 80197f8:	e039      	b.n	801986e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80197fa:	4b1f      	ldr	r3, [pc, #124]	; (8019878 <recv+0x168>)
 80197fc:	881b      	ldrh	r3, [r3, #0]
 80197fe:	461a      	mov	r2, r3
 8019800:	79fb      	ldrb	r3, [r7, #7]
 8019802:	fa42 f303 	asr.w	r3, r2, r3
 8019806:	f003 0301 	and.w	r3, r3, #1
 801980a:	2b00      	cmp	r3, #0
 801980c:	d004      	beq.n	8019818 <recv+0x108>
 801980e:	89bb      	ldrh	r3, [r7, #12]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d101      	bne.n	8019818 <recv+0x108>
 8019814:	2300      	movs	r3, #0
 8019816:	e02a      	b.n	801986e <recv+0x15e>
         if(recvsize != 0) break;
 8019818:	89bb      	ldrh	r3, [r7, #12]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d102      	bne.n	8019824 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 801981e:	e7b1      	b.n	8019784 <recv+0x74>
               if(recvsize != 0) break;
 8019820:	bf00      	nop
 8019822:	e000      	b.n	8019826 <recv+0x116>
         if(recvsize != 0) break;
 8019824:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8019826:	89ba      	ldrh	r2, [r7, #12]
 8019828:	88bb      	ldrh	r3, [r7, #4]
 801982a:	429a      	cmp	r2, r3
 801982c:	d201      	bcs.n	8019832 <recv+0x122>
 801982e:	89bb      	ldrh	r3, [r7, #12]
 8019830:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 8019832:	88ba      	ldrh	r2, [r7, #4]
 8019834:	79fb      	ldrb	r3, [r7, #7]
 8019836:	6839      	ldr	r1, [r7, #0]
 8019838:	4618      	mov	r0, r3
 801983a:	f7ff fa9d 	bl	8018d78 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 801983e:	79fb      	ldrb	r3, [r7, #7]
 8019840:	009b      	lsls	r3, r3, #2
 8019842:	3301      	adds	r3, #1
 8019844:	00db      	lsls	r3, r3, #3
 8019846:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801984a:	2140      	movs	r1, #64	; 0x40
 801984c:	4618      	mov	r0, r3
 801984e:	f7ff f893 	bl	8018978 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8019852:	bf00      	nop
 8019854:	79fb      	ldrb	r3, [r7, #7]
 8019856:	009b      	lsls	r3, r3, #2
 8019858:	3301      	adds	r3, #1
 801985a:	00db      	lsls	r3, r3, #3
 801985c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019860:	4618      	mov	r0, r3
 8019862:	f7ff f83d 	bl	80188e0 <WIZCHIP_READ>
 8019866:	4603      	mov	r3, r0
 8019868:	2b00      	cmp	r3, #0
 801986a:	d1f3      	bne.n	8019854 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801986c:	88bb      	ldrh	r3, [r7, #4]
}
 801986e:	4618      	mov	r0, r3
 8019870:	3714      	adds	r7, #20
 8019872:	46bd      	mov	sp, r7
 8019874:	bd90      	pop	{r4, r7, pc}
 8019876:	bf00      	nop
 8019878:	20000984 	.word	0x20000984

0801987c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 801987c:	b580      	push	{r7, lr}
 801987e:	b086      	sub	sp, #24
 8019880:	af00      	add	r7, sp, #0
 8019882:	60b9      	str	r1, [r7, #8]
 8019884:	607b      	str	r3, [r7, #4]
 8019886:	4603      	mov	r3, r0
 8019888:	73fb      	strb	r3, [r7, #15]
 801988a:	4613      	mov	r3, r2
 801988c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 801988e:	2300      	movs	r3, #0
 8019890:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8019892:	2300      	movs	r3, #0
 8019894:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8019896:	7bfb      	ldrb	r3, [r7, #15]
 8019898:	2b08      	cmp	r3, #8
 801989a:	d902      	bls.n	80198a2 <sendto+0x26>
 801989c:	f04f 33ff 	mov.w	r3, #4294967295
 80198a0:	e11b      	b.n	8019ada <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80198a2:	7bfb      	ldrb	r3, [r7, #15]
 80198a4:	009b      	lsls	r3, r3, #2
 80198a6:	3301      	adds	r3, #1
 80198a8:	00db      	lsls	r3, r3, #3
 80198aa:	4618      	mov	r0, r3
 80198ac:	f7ff f818 	bl	80188e0 <WIZCHIP_READ>
 80198b0:	4603      	mov	r3, r0
 80198b2:	f003 030f 	and.w	r3, r3, #15
 80198b6:	3b02      	subs	r3, #2
 80198b8:	2b02      	cmp	r3, #2
 80198ba:	d902      	bls.n	80198c2 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80198bc:	f06f 0304 	mvn.w	r3, #4
 80198c0:	e10b      	b.n	8019ada <sendto+0x25e>
         break;
 80198c2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80198c4:	89bb      	ldrh	r3, [r7, #12]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d102      	bne.n	80198d0 <sendto+0x54>
 80198ca:	f06f 030d 	mvn.w	r3, #13
 80198ce:	e104      	b.n	8019ada <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	781b      	ldrb	r3, [r3, #0]
 80198d4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	021b      	lsls	r3, r3, #8
 80198da:	687a      	ldr	r2, [r7, #4]
 80198dc:	3201      	adds	r2, #1
 80198de:	7812      	ldrb	r2, [r2, #0]
 80198e0:	4413      	add	r3, r2
 80198e2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80198e4:	693b      	ldr	r3, [r7, #16]
 80198e6:	021b      	lsls	r3, r3, #8
 80198e8:	687a      	ldr	r2, [r7, #4]
 80198ea:	3202      	adds	r2, #2
 80198ec:	7812      	ldrb	r2, [r2, #0]
 80198ee:	4413      	add	r3, r2
 80198f0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	021b      	lsls	r3, r3, #8
 80198f6:	687a      	ldr	r2, [r7, #4]
 80198f8:	3203      	adds	r2, #3
 80198fa:	7812      	ldrb	r2, [r2, #0]
 80198fc:	4413      	add	r3, r2
 80198fe:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8019900:	693b      	ldr	r3, [r7, #16]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d10e      	bne.n	8019924 <sendto+0xa8>
 8019906:	7bfb      	ldrb	r3, [r7, #15]
 8019908:	009b      	lsls	r3, r3, #2
 801990a:	3301      	adds	r3, #1
 801990c:	00db      	lsls	r3, r3, #3
 801990e:	4618      	mov	r0, r3
 8019910:	f7fe ffe6 	bl	80188e0 <WIZCHIP_READ>
 8019914:	4603      	mov	r3, r0
 8019916:	f003 0304 	and.w	r3, r3, #4
 801991a:	2b04      	cmp	r3, #4
 801991c:	d002      	beq.n	8019924 <sendto+0xa8>
 801991e:	f06f 030b 	mvn.w	r3, #11
 8019922:	e0da      	b.n	8019ada <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8019924:	8c3b      	ldrh	r3, [r7, #32]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d10e      	bne.n	8019948 <sendto+0xcc>
 801992a:	7bfb      	ldrb	r3, [r7, #15]
 801992c:	009b      	lsls	r3, r3, #2
 801992e:	3301      	adds	r3, #1
 8019930:	00db      	lsls	r3, r3, #3
 8019932:	4618      	mov	r0, r3
 8019934:	f7fe ffd4 	bl	80188e0 <WIZCHIP_READ>
 8019938:	4603      	mov	r3, r0
 801993a:	f003 0304 	and.w	r3, r3, #4
 801993e:	2b04      	cmp	r3, #4
 8019940:	d002      	beq.n	8019948 <sendto+0xcc>
 8019942:	f06f 030a 	mvn.w	r3, #10
 8019946:	e0c8      	b.n	8019ada <sendto+0x25e>
   tmp = getSn_SR(sn);
 8019948:	7bfb      	ldrb	r3, [r7, #15]
 801994a:	009b      	lsls	r3, r3, #2
 801994c:	3301      	adds	r3, #1
 801994e:	00db      	lsls	r3, r3, #3
 8019950:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019954:	4618      	mov	r0, r3
 8019956:	f7fe ffc3 	bl	80188e0 <WIZCHIP_READ>
 801995a:	4603      	mov	r3, r0
 801995c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 801995e:	7dfb      	ldrb	r3, [r7, #23]
 8019960:	2b42      	cmp	r3, #66	; 0x42
 8019962:	d008      	beq.n	8019976 <sendto+0xfa>
 8019964:	7dfb      	ldrb	r3, [r7, #23]
 8019966:	2b22      	cmp	r3, #34	; 0x22
 8019968:	d005      	beq.n	8019976 <sendto+0xfa>
 801996a:	7dfb      	ldrb	r3, [r7, #23]
 801996c:	2b32      	cmp	r3, #50	; 0x32
 801996e:	d002      	beq.n	8019976 <sendto+0xfa>
 8019970:	f06f 0306 	mvn.w	r3, #6
 8019974:	e0b1      	b.n	8019ada <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8019976:	7bfb      	ldrb	r3, [r7, #15]
 8019978:	009b      	lsls	r3, r3, #2
 801997a:	3301      	adds	r3, #1
 801997c:	00db      	lsls	r3, r3, #3
 801997e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8019982:	2204      	movs	r2, #4
 8019984:	6879      	ldr	r1, [r7, #4]
 8019986:	4618      	mov	r0, r3
 8019988:	f7ff f8a4 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 801998c:	7bfb      	ldrb	r3, [r7, #15]
 801998e:	009b      	lsls	r3, r3, #2
 8019990:	3301      	adds	r3, #1
 8019992:	00db      	lsls	r3, r3, #3
 8019994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019998:	461a      	mov	r2, r3
 801999a:	8c3b      	ldrh	r3, [r7, #32]
 801999c:	0a1b      	lsrs	r3, r3, #8
 801999e:	b29b      	uxth	r3, r3
 80199a0:	b2db      	uxtb	r3, r3
 80199a2:	4619      	mov	r1, r3
 80199a4:	4610      	mov	r0, r2
 80199a6:	f7fe ffe7 	bl	8018978 <WIZCHIP_WRITE>
 80199aa:	7bfb      	ldrb	r3, [r7, #15]
 80199ac:	009b      	lsls	r3, r3, #2
 80199ae:	3301      	adds	r3, #1
 80199b0:	00db      	lsls	r3, r3, #3
 80199b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80199b6:	461a      	mov	r2, r3
 80199b8:	8c3b      	ldrh	r3, [r7, #32]
 80199ba:	b2db      	uxtb	r3, r3
 80199bc:	4619      	mov	r1, r3
 80199be:	4610      	mov	r0, r2
 80199c0:	f7fe ffda 	bl	8018978 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80199c4:	7bfb      	ldrb	r3, [r7, #15]
 80199c6:	009b      	lsls	r3, r3, #2
 80199c8:	3301      	adds	r3, #1
 80199ca:	00db      	lsls	r3, r3, #3
 80199cc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80199d0:	4618      	mov	r0, r3
 80199d2:	f7fe ff85 	bl	80188e0 <WIZCHIP_READ>
 80199d6:	4603      	mov	r3, r0
 80199d8:	b29b      	uxth	r3, r3
 80199da:	029b      	lsls	r3, r3, #10
 80199dc:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80199de:	89ba      	ldrh	r2, [r7, #12]
 80199e0:	8abb      	ldrh	r3, [r7, #20]
 80199e2:	429a      	cmp	r2, r3
 80199e4:	d901      	bls.n	80199ea <sendto+0x16e>
 80199e6:	8abb      	ldrh	r3, [r7, #20]
 80199e8:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80199ea:	7bfb      	ldrb	r3, [r7, #15]
 80199ec:	4618      	mov	r0, r3
 80199ee:	f7ff f8d1 	bl	8018b94 <getSn_TX_FSR>
 80199f2:	4603      	mov	r3, r0
 80199f4:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80199f6:	7bfb      	ldrb	r3, [r7, #15]
 80199f8:	009b      	lsls	r3, r3, #2
 80199fa:	3301      	adds	r3, #1
 80199fc:	00db      	lsls	r3, r3, #3
 80199fe:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019a02:	4618      	mov	r0, r3
 8019a04:	f7fe ff6c 	bl	80188e0 <WIZCHIP_READ>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d102      	bne.n	8019a14 <sendto+0x198>
 8019a0e:	f06f 0303 	mvn.w	r3, #3
 8019a12:	e062      	b.n	8019ada <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8019a14:	4b33      	ldr	r3, [pc, #204]	; (8019ae4 <sendto+0x268>)
 8019a16:	881b      	ldrh	r3, [r3, #0]
 8019a18:	461a      	mov	r2, r3
 8019a1a:	7bfb      	ldrb	r3, [r7, #15]
 8019a1c:	fa42 f303 	asr.w	r3, r2, r3
 8019a20:	f003 0301 	and.w	r3, r3, #1
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d005      	beq.n	8019a34 <sendto+0x1b8>
 8019a28:	89ba      	ldrh	r2, [r7, #12]
 8019a2a:	8abb      	ldrh	r3, [r7, #20]
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	d901      	bls.n	8019a34 <sendto+0x1b8>
 8019a30:	2300      	movs	r3, #0
 8019a32:	e052      	b.n	8019ada <sendto+0x25e>
      if(len <= freesize) break;
 8019a34:	89ba      	ldrh	r2, [r7, #12]
 8019a36:	8abb      	ldrh	r3, [r7, #20]
 8019a38:	429a      	cmp	r2, r3
 8019a3a:	d900      	bls.n	8019a3e <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8019a3c:	e7d5      	b.n	80199ea <sendto+0x16e>
      if(len <= freesize) break;
 8019a3e:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8019a40:	89ba      	ldrh	r2, [r7, #12]
 8019a42:	7bfb      	ldrb	r3, [r7, #15]
 8019a44:	68b9      	ldr	r1, [r7, #8]
 8019a46:	4618      	mov	r0, r3
 8019a48:	f7ff f93a 	bl	8018cc0 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8019a4c:	7bfb      	ldrb	r3, [r7, #15]
 8019a4e:	009b      	lsls	r3, r3, #2
 8019a50:	3301      	adds	r3, #1
 8019a52:	00db      	lsls	r3, r3, #3
 8019a54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a58:	2120      	movs	r1, #32
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f7fe ff8c 	bl	8018978 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019a60:	bf00      	nop
 8019a62:	7bfb      	ldrb	r3, [r7, #15]
 8019a64:	009b      	lsls	r3, r3, #2
 8019a66:	3301      	adds	r3, #1
 8019a68:	00db      	lsls	r3, r3, #3
 8019a6a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a6e:	4618      	mov	r0, r3
 8019a70:	f7fe ff36 	bl	80188e0 <WIZCHIP_READ>
 8019a74:	4603      	mov	r3, r0
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d1f3      	bne.n	8019a62 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8019a7a:	7bfb      	ldrb	r3, [r7, #15]
 8019a7c:	009b      	lsls	r3, r3, #2
 8019a7e:	3301      	adds	r3, #1
 8019a80:	00db      	lsls	r3, r3, #3
 8019a82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019a86:	4618      	mov	r0, r3
 8019a88:	f7fe ff2a 	bl	80188e0 <WIZCHIP_READ>
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	f003 031f 	and.w	r3, r3, #31
 8019a92:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8019a94:	7dfb      	ldrb	r3, [r7, #23]
 8019a96:	f003 0310 	and.w	r3, r3, #16
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d00c      	beq.n	8019ab8 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019a9e:	7bfb      	ldrb	r3, [r7, #15]
 8019aa0:	009b      	lsls	r3, r3, #2
 8019aa2:	3301      	adds	r3, #1
 8019aa4:	00db      	lsls	r3, r3, #3
 8019aa6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019aaa:	2110      	movs	r1, #16
 8019aac:	4618      	mov	r0, r3
 8019aae:	f7fe ff63 	bl	8018978 <WIZCHIP_WRITE>
         break;
 8019ab2:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019ab4:	89bb      	ldrh	r3, [r7, #12]
 8019ab6:	e010      	b.n	8019ada <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8019ab8:	7dfb      	ldrb	r3, [r7, #23]
 8019aba:	f003 0308 	and.w	r3, r3, #8
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d0db      	beq.n	8019a7a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8019ac2:	7bfb      	ldrb	r3, [r7, #15]
 8019ac4:	009b      	lsls	r3, r3, #2
 8019ac6:	3301      	adds	r3, #1
 8019ac8:	00db      	lsls	r3, r3, #3
 8019aca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019ace:	2108      	movs	r1, #8
 8019ad0:	4618      	mov	r0, r3
 8019ad2:	f7fe ff51 	bl	8018978 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8019ad6:	f06f 030c 	mvn.w	r3, #12
}
 8019ada:	4618      	mov	r0, r3
 8019adc:	3718      	adds	r7, #24
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}
 8019ae2:	bf00      	nop
 8019ae4:	20000984 	.word	0x20000984

08019ae8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8019ae8:	b580      	push	{r7, lr}
 8019aea:	b088      	sub	sp, #32
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	60b9      	str	r1, [r7, #8]
 8019af0:	607b      	str	r3, [r7, #4]
 8019af2:	4603      	mov	r3, r0
 8019af4:	73fb      	strb	r3, [r7, #15]
 8019af6:	4613      	mov	r3, r2
 8019af8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8019afa:	2300      	movs	r3, #0
 8019afc:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019afe:	7bfb      	ldrb	r3, [r7, #15]
 8019b00:	2b08      	cmp	r3, #8
 8019b02:	d902      	bls.n	8019b0a <recvfrom+0x22>
 8019b04:	f04f 33ff 	mov.w	r3, #4294967295
 8019b08:	e1d4      	b.n	8019eb4 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8019b0a:	7bfb      	ldrb	r3, [r7, #15]
 8019b0c:	009b      	lsls	r3, r3, #2
 8019b0e:	3301      	adds	r3, #1
 8019b10:	00db      	lsls	r3, r3, #3
 8019b12:	4618      	mov	r0, r3
 8019b14:	f7fe fee4 	bl	80188e0 <WIZCHIP_READ>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	777b      	strb	r3, [r7, #29]
 8019b1c:	7f7b      	ldrb	r3, [r7, #29]
 8019b1e:	f003 030f 	and.w	r3, r3, #15
 8019b22:	3b02      	subs	r3, #2
 8019b24:	2b02      	cmp	r3, #2
 8019b26:	d902      	bls.n	8019b2e <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019b28:	f06f 0304 	mvn.w	r3, #4
 8019b2c:	e1c2      	b.n	8019eb4 <recvfrom+0x3cc>
         break;
 8019b2e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019b30:	89bb      	ldrh	r3, [r7, #12]
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d102      	bne.n	8019b3c <recvfrom+0x54>
 8019b36:	f06f 030d 	mvn.w	r3, #13
 8019b3a:	e1bb      	b.n	8019eb4 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8019b3c:	7bfb      	ldrb	r3, [r7, #15]
 8019b3e:	4a88      	ldr	r2, [pc, #544]	; (8019d60 <recvfrom+0x278>)
 8019b40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d128      	bne.n	8019b9a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8019b48:	7bfb      	ldrb	r3, [r7, #15]
 8019b4a:	4618      	mov	r0, r3
 8019b4c:	f7ff f86d 	bl	8018c2a <getSn_RX_RSR>
 8019b50:	4603      	mov	r3, r0
 8019b52:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8019b54:	7bfb      	ldrb	r3, [r7, #15]
 8019b56:	009b      	lsls	r3, r3, #2
 8019b58:	3301      	adds	r3, #1
 8019b5a:	00db      	lsls	r3, r3, #3
 8019b5c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019b60:	4618      	mov	r0, r3
 8019b62:	f7fe febd 	bl	80188e0 <WIZCHIP_READ>
 8019b66:	4603      	mov	r3, r0
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d102      	bne.n	8019b72 <recvfrom+0x8a>
 8019b6c:	f06f 0303 	mvn.w	r3, #3
 8019b70:	e1a0      	b.n	8019eb4 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8019b72:	4b7c      	ldr	r3, [pc, #496]	; (8019d64 <recvfrom+0x27c>)
 8019b74:	881b      	ldrh	r3, [r3, #0]
 8019b76:	461a      	mov	r2, r3
 8019b78:	7bfb      	ldrb	r3, [r7, #15]
 8019b7a:	fa42 f303 	asr.w	r3, r2, r3
 8019b7e:	f003 0301 	and.w	r3, r3, #1
 8019b82:	2b00      	cmp	r3, #0
 8019b84:	d004      	beq.n	8019b90 <recvfrom+0xa8>
 8019b86:	8bfb      	ldrh	r3, [r7, #30]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d101      	bne.n	8019b90 <recvfrom+0xa8>
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	e191      	b.n	8019eb4 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8019b90:	8bfb      	ldrh	r3, [r7, #30]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d100      	bne.n	8019b98 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8019b96:	e7d7      	b.n	8019b48 <recvfrom+0x60>
         if(pack_len != 0) break;
 8019b98:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8019b9a:	7f7b      	ldrb	r3, [r7, #29]
 8019b9c:	f003 0307 	and.w	r3, r3, #7
 8019ba0:	2b04      	cmp	r3, #4
 8019ba2:	d079      	beq.n	8019c98 <recvfrom+0x1b0>
 8019ba4:	2b04      	cmp	r3, #4
 8019ba6:	f300 8142 	bgt.w	8019e2e <recvfrom+0x346>
 8019baa:	2b02      	cmp	r3, #2
 8019bac:	d003      	beq.n	8019bb6 <recvfrom+0xce>
 8019bae:	2b03      	cmp	r3, #3
 8019bb0:	f000 80dc 	beq.w	8019d6c <recvfrom+0x284>
 8019bb4:	e13b      	b.n	8019e2e <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8019bb6:	7bfb      	ldrb	r3, [r7, #15]
 8019bb8:	4a69      	ldr	r2, [pc, #420]	; (8019d60 <recvfrom+0x278>)
 8019bba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d152      	bne.n	8019c68 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8019bc2:	f107 0114 	add.w	r1, r7, #20
 8019bc6:	7bfb      	ldrb	r3, [r7, #15]
 8019bc8:	2208      	movs	r2, #8
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7ff f8d4 	bl	8018d78 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019bd0:	7bfb      	ldrb	r3, [r7, #15]
 8019bd2:	009b      	lsls	r3, r3, #2
 8019bd4:	3301      	adds	r3, #1
 8019bd6:	00db      	lsls	r3, r3, #3
 8019bd8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019bdc:	2140      	movs	r1, #64	; 0x40
 8019bde:	4618      	mov	r0, r3
 8019be0:	f7fe feca 	bl	8018978 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019be4:	bf00      	nop
 8019be6:	7bfb      	ldrb	r3, [r7, #15]
 8019be8:	009b      	lsls	r3, r3, #2
 8019bea:	3301      	adds	r3, #1
 8019bec:	00db      	lsls	r3, r3, #3
 8019bee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	f7fe fe74 	bl	80188e0 <WIZCHIP_READ>
 8019bf8:	4603      	mov	r3, r0
 8019bfa:	2b00      	cmp	r3, #0
 8019bfc:	d1f3      	bne.n	8019be6 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019bfe:	7d3a      	ldrb	r2, [r7, #20]
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	3301      	adds	r3, #1
 8019c08:	7d7a      	ldrb	r2, [r7, #21]
 8019c0a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	3302      	adds	r3, #2
 8019c10:	7dba      	ldrb	r2, [r7, #22]
 8019c12:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	3303      	adds	r3, #3
 8019c18:	7dfa      	ldrb	r2, [r7, #23]
 8019c1a:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8019c1c:	7e3b      	ldrb	r3, [r7, #24]
 8019c1e:	b29a      	uxth	r2, r3
 8019c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c22:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8019c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c26:	881b      	ldrh	r3, [r3, #0]
 8019c28:	021b      	lsls	r3, r3, #8
 8019c2a:	b29a      	uxth	r2, r3
 8019c2c:	7e7b      	ldrb	r3, [r7, #25]
 8019c2e:	b29b      	uxth	r3, r3
 8019c30:	4413      	add	r3, r2
 8019c32:	b29a      	uxth	r2, r3
 8019c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c36:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8019c38:	7eba      	ldrb	r2, [r7, #26]
 8019c3a:	7bfb      	ldrb	r3, [r7, #15]
 8019c3c:	b291      	uxth	r1, r2
 8019c3e:	4a48      	ldr	r2, [pc, #288]	; (8019d60 <recvfrom+0x278>)
 8019c40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8019c44:	7bfb      	ldrb	r3, [r7, #15]
 8019c46:	4a46      	ldr	r2, [pc, #280]	; (8019d60 <recvfrom+0x278>)
 8019c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c4c:	021b      	lsls	r3, r3, #8
 8019c4e:	b299      	uxth	r1, r3
 8019c50:	7efb      	ldrb	r3, [r7, #27]
 8019c52:	b29a      	uxth	r2, r3
 8019c54:	7bfb      	ldrb	r3, [r7, #15]
 8019c56:	440a      	add	r2, r1
 8019c58:	b291      	uxth	r1, r2
 8019c5a:	4a41      	ldr	r2, [pc, #260]	; (8019d60 <recvfrom+0x278>)
 8019c5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8019c60:	7bfb      	ldrb	r3, [r7, #15]
 8019c62:	4a41      	ldr	r2, [pc, #260]	; (8019d68 <recvfrom+0x280>)
 8019c64:	2180      	movs	r1, #128	; 0x80
 8019c66:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019c68:	7bfb      	ldrb	r3, [r7, #15]
 8019c6a:	4a3d      	ldr	r2, [pc, #244]	; (8019d60 <recvfrom+0x278>)
 8019c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c70:	89ba      	ldrh	r2, [r7, #12]
 8019c72:	429a      	cmp	r2, r3
 8019c74:	d202      	bcs.n	8019c7c <recvfrom+0x194>
 8019c76:	89bb      	ldrh	r3, [r7, #12]
 8019c78:	83fb      	strh	r3, [r7, #30]
 8019c7a:	e004      	b.n	8019c86 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8019c7c:	7bfb      	ldrb	r3, [r7, #15]
 8019c7e:	4a38      	ldr	r2, [pc, #224]	; (8019d60 <recvfrom+0x278>)
 8019c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c84:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8019c86:	8bfb      	ldrh	r3, [r7, #30]
 8019c88:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019c8a:	8bfa      	ldrh	r2, [r7, #30]
 8019c8c:	7bfb      	ldrb	r3, [r7, #15]
 8019c8e:	68b9      	ldr	r1, [r7, #8]
 8019c90:	4618      	mov	r0, r3
 8019c92:	f7ff f871 	bl	8018d78 <wiz_recv_data>
			break;
 8019c96:	e0d6      	b.n	8019e46 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8019c98:	7bfb      	ldrb	r3, [r7, #15]
 8019c9a:	4a31      	ldr	r2, [pc, #196]	; (8019d60 <recvfrom+0x278>)
 8019c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d146      	bne.n	8019d32 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8019ca4:	f107 0114 	add.w	r1, r7, #20
 8019ca8:	7bfb      	ldrb	r3, [r7, #15]
 8019caa:	2202      	movs	r2, #2
 8019cac:	4618      	mov	r0, r3
 8019cae:	f7ff f863 	bl	8018d78 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019cb2:	7bfb      	ldrb	r3, [r7, #15]
 8019cb4:	009b      	lsls	r3, r3, #2
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	00db      	lsls	r3, r3, #3
 8019cba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019cbe:	2140      	movs	r1, #64	; 0x40
 8019cc0:	4618      	mov	r0, r3
 8019cc2:	f7fe fe59 	bl	8018978 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019cc6:	bf00      	nop
 8019cc8:	7bfb      	ldrb	r3, [r7, #15]
 8019cca:	009b      	lsls	r3, r3, #2
 8019ccc:	3301      	adds	r3, #1
 8019cce:	00db      	lsls	r3, r3, #3
 8019cd0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	f7fe fe03 	bl	80188e0 <WIZCHIP_READ>
 8019cda:	4603      	mov	r3, r0
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d1f3      	bne.n	8019cc8 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019ce0:	7d3a      	ldrb	r2, [r7, #20]
 8019ce2:	7bfb      	ldrb	r3, [r7, #15]
 8019ce4:	b291      	uxth	r1, r2
 8019ce6:	4a1e      	ldr	r2, [pc, #120]	; (8019d60 <recvfrom+0x278>)
 8019ce8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019cec:	7bfb      	ldrb	r3, [r7, #15]
 8019cee:	4a1c      	ldr	r2, [pc, #112]	; (8019d60 <recvfrom+0x278>)
 8019cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cf4:	021b      	lsls	r3, r3, #8
 8019cf6:	b29a      	uxth	r2, r3
 8019cf8:	7d7b      	ldrb	r3, [r7, #21]
 8019cfa:	b29b      	uxth	r3, r3
 8019cfc:	4413      	add	r3, r2
 8019cfe:	b29a      	uxth	r2, r3
 8019d00:	7bfb      	ldrb	r3, [r7, #15]
 8019d02:	3a02      	subs	r2, #2
 8019d04:	b291      	uxth	r1, r2
 8019d06:	4a16      	ldr	r2, [pc, #88]	; (8019d60 <recvfrom+0x278>)
 8019d08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8019d0c:	7bfb      	ldrb	r3, [r7, #15]
 8019d0e:	4a14      	ldr	r2, [pc, #80]	; (8019d60 <recvfrom+0x278>)
 8019d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d14:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8019d18:	4293      	cmp	r3, r2
 8019d1a:	d906      	bls.n	8019d2a <recvfrom+0x242>
   			{
   			   close(sn);
 8019d1c:	7bfb      	ldrb	r3, [r7, #15]
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f7ff f9e2 	bl	80190e8 <close>
   			   return SOCKFATAL_PACKLEN;
 8019d24:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8019d28:	e0c4      	b.n	8019eb4 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8019d2a:	7bfb      	ldrb	r3, [r7, #15]
 8019d2c:	4a0e      	ldr	r2, [pc, #56]	; (8019d68 <recvfrom+0x280>)
 8019d2e:	2180      	movs	r1, #128	; 0x80
 8019d30:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019d32:	7bfb      	ldrb	r3, [r7, #15]
 8019d34:	4a0a      	ldr	r2, [pc, #40]	; (8019d60 <recvfrom+0x278>)
 8019d36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d3a:	89ba      	ldrh	r2, [r7, #12]
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d202      	bcs.n	8019d46 <recvfrom+0x25e>
 8019d40:	89bb      	ldrh	r3, [r7, #12]
 8019d42:	83fb      	strh	r3, [r7, #30]
 8019d44:	e004      	b.n	8019d50 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8019d46:	7bfb      	ldrb	r3, [r7, #15]
 8019d48:	4a05      	ldr	r2, [pc, #20]	; (8019d60 <recvfrom+0x278>)
 8019d4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d4e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8019d50:	8bfa      	ldrh	r2, [r7, #30]
 8019d52:	7bfb      	ldrb	r3, [r7, #15]
 8019d54:	68b9      	ldr	r1, [r7, #8]
 8019d56:	4618      	mov	r0, r3
 8019d58:	f7ff f80e 	bl	8018d78 <wiz_recv_data>
		   break;
 8019d5c:	e073      	b.n	8019e46 <recvfrom+0x35e>
 8019d5e:	bf00      	nop
 8019d60:	20000988 	.word	0x20000988
 8019d64:	20000984 	.word	0x20000984
 8019d68:	20000998 	.word	0x20000998
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8019d6c:	7bfb      	ldrb	r3, [r7, #15]
 8019d6e:	4a53      	ldr	r2, [pc, #332]	; (8019ebc <recvfrom+0x3d4>)
 8019d70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d144      	bne.n	8019e02 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8019d78:	f107 0114 	add.w	r1, r7, #20
 8019d7c:	7bfb      	ldrb	r3, [r7, #15]
 8019d7e:	2206      	movs	r2, #6
 8019d80:	4618      	mov	r0, r3
 8019d82:	f7fe fff9 	bl	8018d78 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019d86:	7bfb      	ldrb	r3, [r7, #15]
 8019d88:	009b      	lsls	r3, r3, #2
 8019d8a:	3301      	adds	r3, #1
 8019d8c:	00db      	lsls	r3, r3, #3
 8019d8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019d92:	2140      	movs	r1, #64	; 0x40
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7fe fdef 	bl	8018978 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019d9a:	bf00      	nop
 8019d9c:	7bfb      	ldrb	r3, [r7, #15]
 8019d9e:	009b      	lsls	r3, r3, #2
 8019da0:	3301      	adds	r3, #1
 8019da2:	00db      	lsls	r3, r3, #3
 8019da4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7fe fd99 	bl	80188e0 <WIZCHIP_READ>
 8019dae:	4603      	mov	r3, r0
 8019db0:	2b00      	cmp	r3, #0
 8019db2:	d1f3      	bne.n	8019d9c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8019db4:	7d3a      	ldrb	r2, [r7, #20]
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	3301      	adds	r3, #1
 8019dbe:	7d7a      	ldrb	r2, [r7, #21]
 8019dc0:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	3302      	adds	r3, #2
 8019dc6:	7dba      	ldrb	r2, [r7, #22]
 8019dc8:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	3303      	adds	r3, #3
 8019dce:	7dfa      	ldrb	r2, [r7, #23]
 8019dd0:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019dd2:	7e3a      	ldrb	r2, [r7, #24]
 8019dd4:	7bfb      	ldrb	r3, [r7, #15]
 8019dd6:	b291      	uxth	r1, r2
 8019dd8:	4a38      	ldr	r2, [pc, #224]	; (8019ebc <recvfrom+0x3d4>)
 8019dda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019dde:	7bfb      	ldrb	r3, [r7, #15]
 8019de0:	4a36      	ldr	r2, [pc, #216]	; (8019ebc <recvfrom+0x3d4>)
 8019de2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019de6:	021b      	lsls	r3, r3, #8
 8019de8:	b299      	uxth	r1, r3
 8019dea:	7e7b      	ldrb	r3, [r7, #25]
 8019dec:	b29a      	uxth	r2, r3
 8019dee:	7bfb      	ldrb	r3, [r7, #15]
 8019df0:	440a      	add	r2, r1
 8019df2:	b291      	uxth	r1, r2
 8019df4:	4a31      	ldr	r2, [pc, #196]	; (8019ebc <recvfrom+0x3d4>)
 8019df6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8019dfa:	7bfb      	ldrb	r3, [r7, #15]
 8019dfc:	4a30      	ldr	r2, [pc, #192]	; (8019ec0 <recvfrom+0x3d8>)
 8019dfe:	2180      	movs	r1, #128	; 0x80
 8019e00:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019e02:	7bfb      	ldrb	r3, [r7, #15]
 8019e04:	4a2d      	ldr	r2, [pc, #180]	; (8019ebc <recvfrom+0x3d4>)
 8019e06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e0a:	89ba      	ldrh	r2, [r7, #12]
 8019e0c:	429a      	cmp	r2, r3
 8019e0e:	d202      	bcs.n	8019e16 <recvfrom+0x32e>
 8019e10:	89bb      	ldrh	r3, [r7, #12]
 8019e12:	83fb      	strh	r3, [r7, #30]
 8019e14:	e004      	b.n	8019e20 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8019e16:	7bfb      	ldrb	r3, [r7, #15]
 8019e18:	4a28      	ldr	r2, [pc, #160]	; (8019ebc <recvfrom+0x3d4>)
 8019e1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e1e:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019e20:	8bfa      	ldrh	r2, [r7, #30]
 8019e22:	7bfb      	ldrb	r3, [r7, #15]
 8019e24:	68b9      	ldr	r1, [r7, #8]
 8019e26:	4618      	mov	r0, r3
 8019e28:	f7fe ffa6 	bl	8018d78 <wiz_recv_data>
			break;
 8019e2c:	e00b      	b.n	8019e46 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019e2e:	8bfa      	ldrh	r2, [r7, #30]
 8019e30:	7bfb      	ldrb	r3, [r7, #15]
 8019e32:	4611      	mov	r1, r2
 8019e34:	4618      	mov	r0, r3
 8019e36:	f7fe fffb 	bl	8018e30 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8019e3a:	7bfb      	ldrb	r3, [r7, #15]
 8019e3c:	491f      	ldr	r1, [pc, #124]	; (8019ebc <recvfrom+0x3d4>)
 8019e3e:	8bfa      	ldrh	r2, [r7, #30]
 8019e40:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019e44:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8019e46:	7bfb      	ldrb	r3, [r7, #15]
 8019e48:	009b      	lsls	r3, r3, #2
 8019e4a:	3301      	adds	r3, #1
 8019e4c:	00db      	lsls	r3, r3, #3
 8019e4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019e52:	2140      	movs	r1, #64	; 0x40
 8019e54:	4618      	mov	r0, r3
 8019e56:	f7fe fd8f 	bl	8018978 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8019e5a:	bf00      	nop
 8019e5c:	7bfb      	ldrb	r3, [r7, #15]
 8019e5e:	009b      	lsls	r3, r3, #2
 8019e60:	3301      	adds	r3, #1
 8019e62:	00db      	lsls	r3, r3, #3
 8019e64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019e68:	4618      	mov	r0, r3
 8019e6a:	f7fe fd39 	bl	80188e0 <WIZCHIP_READ>
 8019e6e:	4603      	mov	r3, r0
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d1f3      	bne.n	8019e5c <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8019e74:	7bfb      	ldrb	r3, [r7, #15]
 8019e76:	4a11      	ldr	r2, [pc, #68]	; (8019ebc <recvfrom+0x3d4>)
 8019e78:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8019e7c:	7bfb      	ldrb	r3, [r7, #15]
 8019e7e:	8bfa      	ldrh	r2, [r7, #30]
 8019e80:	1a8a      	subs	r2, r1, r2
 8019e82:	b291      	uxth	r1, r2
 8019e84:	4a0d      	ldr	r2, [pc, #52]	; (8019ebc <recvfrom+0x3d4>)
 8019e86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8019e8a:	7bfb      	ldrb	r3, [r7, #15]
 8019e8c:	4a0b      	ldr	r2, [pc, #44]	; (8019ebc <recvfrom+0x3d4>)
 8019e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d009      	beq.n	8019eaa <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8019e96:	7bfb      	ldrb	r3, [r7, #15]
 8019e98:	4a09      	ldr	r2, [pc, #36]	; (8019ec0 <recvfrom+0x3d8>)
 8019e9a:	5cd2      	ldrb	r2, [r2, r3]
 8019e9c:	7bfb      	ldrb	r3, [r7, #15]
 8019e9e:	f042 0201 	orr.w	r2, r2, #1
 8019ea2:	b2d1      	uxtb	r1, r2
 8019ea4:	4a06      	ldr	r2, [pc, #24]	; (8019ec0 <recvfrom+0x3d8>)
 8019ea6:	54d1      	strb	r1, [r2, r3]
 8019ea8:	e003      	b.n	8019eb2 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8019eaa:	7bfb      	ldrb	r3, [r7, #15]
 8019eac:	4a04      	ldr	r2, [pc, #16]	; (8019ec0 <recvfrom+0x3d8>)
 8019eae:	2100      	movs	r1, #0
 8019eb0:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019eb2:	8bfb      	ldrh	r3, [r7, #30]
}
 8019eb4:	4618      	mov	r0, r3
 8019eb6:	3720      	adds	r7, #32
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bd80      	pop	{r7, pc}
 8019ebc:	20000988 	.word	0x20000988
 8019ec0:	20000998 	.word	0x20000998

08019ec4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019ec4:	b480      	push	{r7}
 8019ec6:	af00      	add	r7, sp, #0
 8019ec8:	bf00      	nop
 8019eca:	46bd      	mov	sp, r7
 8019ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed0:	4770      	bx	lr

08019ed2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019ed2:	b480      	push	{r7}
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	bf00      	nop
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ede:	4770      	bx	lr

08019ee0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019ee0:	b480      	push	{r7}
 8019ee2:	af00      	add	r7, sp, #0
 8019ee4:	bf00      	nop
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eec:	4770      	bx	lr

08019eee <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019eee:	b480      	push	{r7}
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	bf00      	nop
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019efa:	4770      	bx	lr

08019efc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019efc:	b480      	push	{r7}
 8019efe:	b083      	sub	sp, #12
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	6078      	str	r0, [r7, #4]
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	781b      	ldrb	r3, [r3, #0]
 8019f08:	b2db      	uxtb	r3, r3
 8019f0a:	4618      	mov	r0, r3
 8019f0c:	370c      	adds	r7, #12
 8019f0e:	46bd      	mov	sp, r7
 8019f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f14:	4770      	bx	lr

08019f16 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8019f16:	b480      	push	{r7}
 8019f18:	b083      	sub	sp, #12
 8019f1a:	af00      	add	r7, sp, #0
 8019f1c:	6078      	str	r0, [r7, #4]
 8019f1e:	460b      	mov	r3, r1
 8019f20:	70fb      	strb	r3, [r7, #3]
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	78fa      	ldrb	r2, [r7, #3]
 8019f26:	701a      	strb	r2, [r3, #0]
 8019f28:	bf00      	nop
 8019f2a:	370c      	adds	r7, #12
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f32:	4770      	bx	lr

08019f34 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019f34:	b480      	push	{r7}
 8019f36:	af00      	add	r7, sp, #0
 8019f38:	2300      	movs	r3, #0
 8019f3a:	4618      	mov	r0, r3
 8019f3c:	46bd      	mov	sp, r7
 8019f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f42:	4770      	bx	lr

08019f44 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019f44:	b480      	push	{r7}
 8019f46:	b083      	sub	sp, #12
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	4603      	mov	r3, r0
 8019f4c:	71fb      	strb	r3, [r7, #7]
 8019f4e:	bf00      	nop
 8019f50:	370c      	adds	r7, #12
 8019f52:	46bd      	mov	sp, r7
 8019f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f58:	4770      	bx	lr
	...

08019f5c <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8019f5c:	b480      	push	{r7}
 8019f5e:	b083      	sub	sp, #12
 8019f60:	af00      	add	r7, sp, #0
 8019f62:	6078      	str	r0, [r7, #4]
 8019f64:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d002      	beq.n	8019f72 <reg_wizchip_cris_cbfunc+0x16>
 8019f6c:	683b      	ldr	r3, [r7, #0]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d106      	bne.n	8019f80 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8019f72:	4b0a      	ldr	r3, [pc, #40]	; (8019f9c <reg_wizchip_cris_cbfunc+0x40>)
 8019f74:	4a0a      	ldr	r2, [pc, #40]	; (8019fa0 <reg_wizchip_cris_cbfunc+0x44>)
 8019f76:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8019f78:	4b08      	ldr	r3, [pc, #32]	; (8019f9c <reg_wizchip_cris_cbfunc+0x40>)
 8019f7a:	4a0a      	ldr	r2, [pc, #40]	; (8019fa4 <reg_wizchip_cris_cbfunc+0x48>)
 8019f7c:	611a      	str	r2, [r3, #16]
 8019f7e:	e006      	b.n	8019f8e <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8019f80:	4a06      	ldr	r2, [pc, #24]	; (8019f9c <reg_wizchip_cris_cbfunc+0x40>)
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8019f86:	4a05      	ldr	r2, [pc, #20]	; (8019f9c <reg_wizchip_cris_cbfunc+0x40>)
 8019f88:	683b      	ldr	r3, [r7, #0]
 8019f8a:	6113      	str	r3, [r2, #16]
   }
}
 8019f8c:	bf00      	nop
 8019f8e:	bf00      	nop
 8019f90:	370c      	adds	r7, #12
 8019f92:	46bd      	mov	sp, r7
 8019f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f98:	4770      	bx	lr
 8019f9a:	bf00      	nop
 8019f9c:	200000c4 	.word	0x200000c4
 8019fa0:	08019ec5 	.word	0x08019ec5
 8019fa4:	08019ed3 	.word	0x08019ed3

08019fa8 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8019fa8:	b480      	push	{r7}
 8019faa:	b083      	sub	sp, #12
 8019fac:	af00      	add	r7, sp, #0
 8019fae:	6078      	str	r0, [r7, #4]
 8019fb0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d002      	beq.n	8019fbe <reg_wizchip_cs_cbfunc+0x16>
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d106      	bne.n	8019fcc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8019fbe:	4b0a      	ldr	r3, [pc, #40]	; (8019fe8 <reg_wizchip_cs_cbfunc+0x40>)
 8019fc0:	4a0a      	ldr	r2, [pc, #40]	; (8019fec <reg_wizchip_cs_cbfunc+0x44>)
 8019fc2:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8019fc4:	4b08      	ldr	r3, [pc, #32]	; (8019fe8 <reg_wizchip_cs_cbfunc+0x40>)
 8019fc6:	4a0a      	ldr	r2, [pc, #40]	; (8019ff0 <reg_wizchip_cs_cbfunc+0x48>)
 8019fc8:	619a      	str	r2, [r3, #24]
 8019fca:	e006      	b.n	8019fda <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8019fcc:	4a06      	ldr	r2, [pc, #24]	; (8019fe8 <reg_wizchip_cs_cbfunc+0x40>)
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8019fd2:	4a05      	ldr	r2, [pc, #20]	; (8019fe8 <reg_wizchip_cs_cbfunc+0x40>)
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	6193      	str	r3, [r2, #24]
   }
}
 8019fd8:	bf00      	nop
 8019fda:	bf00      	nop
 8019fdc:	370c      	adds	r7, #12
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe4:	4770      	bx	lr
 8019fe6:	bf00      	nop
 8019fe8:	200000c4 	.word	0x200000c4
 8019fec:	08019ee1 	.word	0x08019ee1
 8019ff0:	08019eef 	.word	0x08019eef

08019ff4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8019ff4:	b480      	push	{r7}
 8019ff6:	b083      	sub	sp, #12
 8019ff8:	af00      	add	r7, sp, #0
 8019ffa:	6078      	str	r0, [r7, #4]
 8019ffc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8019ffe:	bf00      	nop
 801a000:	4b0f      	ldr	r3, [pc, #60]	; (801a040 <reg_wizchip_spi_cbfunc+0x4c>)
 801a002:	881b      	ldrh	r3, [r3, #0]
 801a004:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d0f9      	beq.n	801a000 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d002      	beq.n	801a018 <reg_wizchip_spi_cbfunc+0x24>
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d106      	bne.n	801a026 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 801a018:	4b09      	ldr	r3, [pc, #36]	; (801a040 <reg_wizchip_spi_cbfunc+0x4c>)
 801a01a:	4a0a      	ldr	r2, [pc, #40]	; (801a044 <reg_wizchip_spi_cbfunc+0x50>)
 801a01c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 801a01e:	4b08      	ldr	r3, [pc, #32]	; (801a040 <reg_wizchip_spi_cbfunc+0x4c>)
 801a020:	4a09      	ldr	r2, [pc, #36]	; (801a048 <reg_wizchip_spi_cbfunc+0x54>)
 801a022:	621a      	str	r2, [r3, #32]
 801a024:	e006      	b.n	801a034 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 801a026:	4a06      	ldr	r2, [pc, #24]	; (801a040 <reg_wizchip_spi_cbfunc+0x4c>)
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 801a02c:	4a04      	ldr	r2, [pc, #16]	; (801a040 <reg_wizchip_spi_cbfunc+0x4c>)
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	6213      	str	r3, [r2, #32]
   }
}
 801a032:	bf00      	nop
 801a034:	bf00      	nop
 801a036:	370c      	adds	r7, #12
 801a038:	46bd      	mov	sp, r7
 801a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a03e:	4770      	bx	lr
 801a040:	200000c4 	.word	0x200000c4
 801a044:	08019f35 	.word	0x08019f35
 801a048:	08019f45 	.word	0x08019f45

0801a04c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 801a04c:	b590      	push	{r4, r7, lr}
 801a04e:	b087      	sub	sp, #28
 801a050:	af00      	add	r7, sp, #0
 801a052:	4603      	mov	r3, r0
 801a054:	6039      	str	r1, [r7, #0]
 801a056:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 801a058:	2300      	movs	r3, #0
 801a05a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 801a05c:	2300      	movs	r3, #0
 801a05e:	60fb      	str	r3, [r7, #12]
 801a060:	2300      	movs	r3, #0
 801a062:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 801a064:	79fb      	ldrb	r3, [r7, #7]
 801a066:	2b0f      	cmp	r3, #15
 801a068:	f200 80c7 	bhi.w	801a1fa <ctlwizchip+0x1ae>
 801a06c:	a201      	add	r2, pc, #4	; (adr r2, 801a074 <ctlwizchip+0x28>)
 801a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a072:	bf00      	nop
 801a074:	0801a0b5 	.word	0x0801a0b5
 801a078:	0801a0bb 	.word	0x0801a0bb
 801a07c:	0801a0e7 	.word	0x0801a0e7
 801a080:	0801a0db 	.word	0x0801a0db
 801a084:	0801a0f5 	.word	0x0801a0f5
 801a088:	0801a101 	.word	0x0801a101
 801a08c:	0801a10f 	.word	0x0801a10f
 801a090:	0801a135 	.word	0x0801a135
 801a094:	0801a15b 	.word	0x0801a15b
 801a098:	0801a19f 	.word	0x0801a19f
 801a09c:	0801a1a5 	.word	0x0801a1a5
 801a0a0:	0801a1ad 	.word	0x0801a1ad
 801a0a4:	0801a201 	.word	0x0801a201
 801a0a8:	0801a1b5 	.word	0x0801a1b5
 801a0ac:	0801a1c3 	.word	0x0801a1c3
 801a0b0:	0801a1df 	.word	0x0801a1df
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 801a0b4:	f000 f8ea 	bl	801a28c <wizchip_sw_reset>
         break;
 801a0b8:	e0a3      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d004      	beq.n	801a0ca <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 801a0c0:	683b      	ldr	r3, [r7, #0]
 801a0c2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 801a0c4:	68fb      	ldr	r3, [r7, #12]
 801a0c6:	3308      	adds	r3, #8
 801a0c8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 801a0ca:	68fb      	ldr	r3, [r7, #12]
 801a0cc:	693a      	ldr	r2, [r7, #16]
 801a0ce:	4611      	mov	r1, r2
 801a0d0:	4618      	mov	r0, r3
 801a0d2:	f000 f927 	bl	801a324 <wizchip_init>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	e094      	b.n	801a204 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 801a0da:	683b      	ldr	r3, [r7, #0]
 801a0dc:	881b      	ldrh	r3, [r3, #0]
 801a0de:	4618      	mov	r0, r3
 801a0e0:	f000 f9ac 	bl	801a43c <wizchip_clrinterrupt>
         break;
 801a0e4:	e08d      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 801a0e6:	f000 f9dd 	bl	801a4a4 <wizchip_getinterrupt>
 801a0ea:	4603      	mov	r3, r0
 801a0ec:	461a      	mov	r2, r3
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	801a      	strh	r2, [r3, #0]
         break;
 801a0f2:	e086      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	881b      	ldrh	r3, [r3, #0]
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	f000 f9f8 	bl	801a4ee <wizchip_setinterruptmask>
         break;         
 801a0fe:	e080      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 801a100:	f000 fa10 	bl	801a524 <wizchip_getinterruptmask>
 801a104:	4603      	mov	r3, r0
 801a106:	461a      	mov	r2, r3
 801a108:	683b      	ldr	r3, [r7, #0]
 801a10a:	801a      	strh	r2, [r3, #0]
         break;
 801a10c:	e079      	b.n	801a202 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 801a10e:	683b      	ldr	r3, [r7, #0]
 801a110:	881b      	ldrh	r3, [r3, #0]
 801a112:	0a1b      	lsrs	r3, r3, #8
 801a114:	b29b      	uxth	r3, r3
 801a116:	b2db      	uxtb	r3, r3
 801a118:	4619      	mov	r1, r3
 801a11a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 801a11e:	f7fe fc2b 	bl	8018978 <WIZCHIP_WRITE>
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	881b      	ldrh	r3, [r3, #0]
 801a126:	b2db      	uxtb	r3, r3
 801a128:	4619      	mov	r1, r3
 801a12a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801a12e:	f7fe fc23 	bl	8018978 <WIZCHIP_WRITE>
         break;
 801a132:	e066      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 801a134:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 801a138:	f7fe fbd2 	bl	80188e0 <WIZCHIP_READ>
 801a13c:	4603      	mov	r3, r0
 801a13e:	b29b      	uxth	r3, r3
 801a140:	021b      	lsls	r3, r3, #8
 801a142:	b29c      	uxth	r4, r3
 801a144:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801a148:	f7fe fbca 	bl	80188e0 <WIZCHIP_READ>
 801a14c:	4603      	mov	r3, r0
 801a14e:	b29b      	uxth	r3, r3
 801a150:	4423      	add	r3, r4
 801a152:	b29a      	uxth	r2, r3
 801a154:	683b      	ldr	r3, [r7, #0]
 801a156:	801a      	strh	r2, [r3, #0]
         break;
 801a158:	e053      	b.n	801a202 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801a15a:	4b2c      	ldr	r3, [pc, #176]	; (801a20c <ctlwizchip+0x1c0>)
 801a15c:	789a      	ldrb	r2, [r3, #2]
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 801a162:	683b      	ldr	r3, [r7, #0]
 801a164:	3301      	adds	r3, #1
 801a166:	4a29      	ldr	r2, [pc, #164]	; (801a20c <ctlwizchip+0x1c0>)
 801a168:	78d2      	ldrb	r2, [r2, #3]
 801a16a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 801a16c:	683b      	ldr	r3, [r7, #0]
 801a16e:	3302      	adds	r3, #2
 801a170:	4a26      	ldr	r2, [pc, #152]	; (801a20c <ctlwizchip+0x1c0>)
 801a172:	7912      	ldrb	r2, [r2, #4]
 801a174:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	3303      	adds	r3, #3
 801a17a:	4a24      	ldr	r2, [pc, #144]	; (801a20c <ctlwizchip+0x1c0>)
 801a17c:	7952      	ldrb	r2, [r2, #5]
 801a17e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 801a180:	683b      	ldr	r3, [r7, #0]
 801a182:	3304      	adds	r3, #4
 801a184:	4a21      	ldr	r2, [pc, #132]	; (801a20c <ctlwizchip+0x1c0>)
 801a186:	7992      	ldrb	r2, [r2, #6]
 801a188:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 801a18a:	683b      	ldr	r3, [r7, #0]
 801a18c:	3305      	adds	r3, #5
 801a18e:	4a1f      	ldr	r2, [pc, #124]	; (801a20c <ctlwizchip+0x1c0>)
 801a190:	79d2      	ldrb	r2, [r2, #7]
 801a192:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 801a194:	683b      	ldr	r3, [r7, #0]
 801a196:	3306      	adds	r3, #6
 801a198:	2200      	movs	r2, #0
 801a19a:	701a      	strb	r2, [r3, #0]
         break;
 801a19c:	e031      	b.n	801a202 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 801a19e:	f000 fa13 	bl	801a5c8 <wizphy_reset>
         break;
 801a1a2:	e02e      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 801a1a4:	6838      	ldr	r0, [r7, #0]
 801a1a6:	f000 fa36 	bl	801a616 <wizphy_setphyconf>
         break;
 801a1aa:	e02a      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 801a1ac:	6838      	ldr	r0, [r7, #0]
 801a1ae:	f000 fa75 	bl	801a69c <wizphy_getphyconf>
         break;
 801a1b2:	e026      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 801a1b4:	683b      	ldr	r3, [r7, #0]
 801a1b6:	781b      	ldrb	r3, [r3, #0]
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	f000 faf7 	bl	801a7ac <wizphy_setphypmode>
 801a1be:	4603      	mov	r3, r0
 801a1c0:	e020      	b.n	801a204 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 801a1c2:	f000 f9e8 	bl	801a596 <wizphy_getphypmode>
 801a1c6:	4603      	mov	r3, r0
 801a1c8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a1ca:	7dfb      	ldrb	r3, [r7, #23]
 801a1cc:	2bff      	cmp	r3, #255	; 0xff
 801a1ce:	d102      	bne.n	801a1d6 <ctlwizchip+0x18a>
 801a1d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a1d4:	e016      	b.n	801a204 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 801a1d6:	683b      	ldr	r3, [r7, #0]
 801a1d8:	7dfa      	ldrb	r2, [r7, #23]
 801a1da:	701a      	strb	r2, [r3, #0]
         break;
 801a1dc:	e011      	b.n	801a202 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 801a1de:	f000 f9c4 	bl	801a56a <wizphy_getphylink>
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a1e6:	7dfb      	ldrb	r3, [r7, #23]
 801a1e8:	2bff      	cmp	r3, #255	; 0xff
 801a1ea:	d102      	bne.n	801a1f2 <ctlwizchip+0x1a6>
 801a1ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a1f0:	e008      	b.n	801a204 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 801a1f2:	683b      	ldr	r3, [r7, #0]
 801a1f4:	7dfa      	ldrb	r2, [r7, #23]
 801a1f6:	701a      	strb	r2, [r3, #0]
         break;
 801a1f8:	e003      	b.n	801a202 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 801a1fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a1fe:	e001      	b.n	801a204 <ctlwizchip+0x1b8>
         break;
 801a200:	bf00      	nop
   }
   return 0;
 801a202:	2300      	movs	r3, #0
}
 801a204:	4618      	mov	r0, r3
 801a206:	371c      	adds	r7, #28
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd90      	pop	{r4, r7, pc}
 801a20c:	200000c4 	.word	0x200000c4

0801a210 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b082      	sub	sp, #8
 801a214:	af00      	add	r7, sp, #0
 801a216:	4603      	mov	r3, r0
 801a218:	6039      	str	r1, [r7, #0]
 801a21a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 801a21c:	79fb      	ldrb	r3, [r7, #7]
 801a21e:	2b05      	cmp	r3, #5
 801a220:	d82c      	bhi.n	801a27c <ctlnetwork+0x6c>
 801a222:	a201      	add	r2, pc, #4	; (adr r2, 801a228 <ctlnetwork+0x18>)
 801a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a228:	0801a241 	.word	0x0801a241
 801a22c:	0801a249 	.word	0x0801a249
 801a230:	0801a251 	.word	0x0801a251
 801a234:	0801a25f 	.word	0x0801a25f
 801a238:	0801a26d 	.word	0x0801a26d
 801a23c:	0801a275 	.word	0x0801a275
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 801a240:	6838      	ldr	r0, [r7, #0]
 801a242:	f000 fafd 	bl	801a840 <wizchip_setnetinfo>
         break;
 801a246:	e01c      	b.n	801a282 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 801a248:	6838      	ldr	r0, [r7, #0]
 801a24a:	f000 fb39 	bl	801a8c0 <wizchip_getnetinfo>
         break;
 801a24e:	e018      	b.n	801a282 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 801a250:	683b      	ldr	r3, [r7, #0]
 801a252:	781b      	ldrb	r3, [r3, #0]
 801a254:	4618      	mov	r0, r3
 801a256:	f000 fb73 	bl	801a940 <wizchip_setnetmode>
 801a25a:	4603      	mov	r3, r0
 801a25c:	e012      	b.n	801a284 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 801a25e:	f000 fb91 	bl	801a984 <wizchip_getnetmode>
 801a262:	4603      	mov	r3, r0
 801a264:	461a      	mov	r2, r3
 801a266:	683b      	ldr	r3, [r7, #0]
 801a268:	701a      	strb	r2, [r3, #0]
         break;
 801a26a:	e00a      	b.n	801a282 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 801a26c:	6838      	ldr	r0, [r7, #0]
 801a26e:	f000 fb91 	bl	801a994 <wizchip_settimeout>
         break;
 801a272:	e006      	b.n	801a282 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 801a274:	6838      	ldr	r0, [r7, #0]
 801a276:	f000 fbae 	bl	801a9d6 <wizchip_gettimeout>
         break;
 801a27a:	e002      	b.n	801a282 <ctlnetwork+0x72>
      default:
         return -1;
 801a27c:	f04f 33ff 	mov.w	r3, #4294967295
 801a280:	e000      	b.n	801a284 <ctlnetwork+0x74>
   }
   return 0;
 801a282:	2300      	movs	r3, #0
}
 801a284:	4618      	mov	r0, r3
 801a286:	3708      	adds	r7, #8
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}

0801a28c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b086      	sub	sp, #24
 801a290:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801a292:	1d3b      	adds	r3, r7, #4
 801a294:	2206      	movs	r2, #6
 801a296:	4619      	mov	r1, r3
 801a298:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a29c:	f7fe fbba 	bl	8018a14 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801a2a0:	f107 0314 	add.w	r3, r7, #20
 801a2a4:	2204      	movs	r2, #4
 801a2a6:	4619      	mov	r1, r3
 801a2a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a2ac:	f7fe fbb2 	bl	8018a14 <WIZCHIP_READ_BUF>
 801a2b0:	f107 0310 	add.w	r3, r7, #16
 801a2b4:	2204      	movs	r2, #4
 801a2b6:	4619      	mov	r1, r3
 801a2b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a2bc:	f7fe fbaa 	bl	8018a14 <WIZCHIP_READ_BUF>
 801a2c0:	f107 030c 	add.w	r3, r7, #12
 801a2c4:	2204      	movs	r2, #4
 801a2c6:	4619      	mov	r1, r3
 801a2c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a2cc:	f7fe fba2 	bl	8018a14 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801a2d0:	2180      	movs	r1, #128	; 0x80
 801a2d2:	2000      	movs	r0, #0
 801a2d4:	f7fe fb50 	bl	8018978 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a2d8:	2000      	movs	r0, #0
 801a2da:	f7fe fb01 	bl	80188e0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801a2de:	1d3b      	adds	r3, r7, #4
 801a2e0:	2206      	movs	r2, #6
 801a2e2:	4619      	mov	r1, r3
 801a2e4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a2e8:	f7fe fbf4 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801a2ec:	f107 0314 	add.w	r3, r7, #20
 801a2f0:	2204      	movs	r2, #4
 801a2f2:	4619      	mov	r1, r3
 801a2f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a2f8:	f7fe fbec 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801a2fc:	f107 0310 	add.w	r3, r7, #16
 801a300:	2204      	movs	r2, #4
 801a302:	4619      	mov	r1, r3
 801a304:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a308:	f7fe fbe4 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801a30c:	f107 030c 	add.w	r3, r7, #12
 801a310:	2204      	movs	r2, #4
 801a312:	4619      	mov	r1, r3
 801a314:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a318:	f7fe fbdc 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
}
 801a31c:	bf00      	nop
 801a31e:	3718      	adds	r7, #24
 801a320:	46bd      	mov	sp, r7
 801a322:	bd80      	pop	{r7, pc}

0801a324 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b084      	sub	sp, #16
 801a328:	af00      	add	r7, sp, #0
 801a32a:	6078      	str	r0, [r7, #4]
 801a32c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801a32e:	2300      	movs	r3, #0
 801a330:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801a332:	f7ff ffab 	bl	801a28c <wizchip_sw_reset>
   if(txsize)
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d03b      	beq.n	801a3b4 <wizchip_init+0x90>
   {
      tmp = 0;
 801a33c:	2300      	movs	r3, #0
 801a33e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a340:	2300      	movs	r3, #0
 801a342:	73fb      	strb	r3, [r7, #15]
 801a344:	e015      	b.n	801a372 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801a346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a34a:	687a      	ldr	r2, [r7, #4]
 801a34c:	4413      	add	r3, r2
 801a34e:	781a      	ldrb	r2, [r3, #0]
 801a350:	7bbb      	ldrb	r3, [r7, #14]
 801a352:	4413      	add	r3, r2
 801a354:	b2db      	uxtb	r3, r3
 801a356:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a35c:	2b10      	cmp	r3, #16
 801a35e:	dd02      	ble.n	801a366 <wizchip_init+0x42>
 801a360:	f04f 33ff 	mov.w	r3, #4294967295
 801a364:	e066      	b.n	801a434 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a36a:	b2db      	uxtb	r3, r3
 801a36c:	3301      	adds	r3, #1
 801a36e:	b2db      	uxtb	r3, r3
 801a370:	73fb      	strb	r3, [r7, #15]
 801a372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a376:	2b07      	cmp	r3, #7
 801a378:	dde5      	ble.n	801a346 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a37a:	2300      	movs	r3, #0
 801a37c:	73fb      	strb	r3, [r7, #15]
 801a37e:	e015      	b.n	801a3ac <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801a380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a384:	009b      	lsls	r3, r3, #2
 801a386:	3301      	adds	r3, #1
 801a388:	00db      	lsls	r3, r3, #3
 801a38a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801a38e:	4618      	mov	r0, r3
 801a390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a394:	687a      	ldr	r2, [r7, #4]
 801a396:	4413      	add	r3, r2
 801a398:	781b      	ldrb	r3, [r3, #0]
 801a39a:	4619      	mov	r1, r3
 801a39c:	f7fe faec 	bl	8018978 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3a4:	b2db      	uxtb	r3, r3
 801a3a6:	3301      	adds	r3, #1
 801a3a8:	b2db      	uxtb	r3, r3
 801a3aa:	73fb      	strb	r3, [r7, #15]
 801a3ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3b0:	2b07      	cmp	r3, #7
 801a3b2:	dde5      	ble.n	801a380 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801a3b4:	683b      	ldr	r3, [r7, #0]
 801a3b6:	2b00      	cmp	r3, #0
 801a3b8:	d03b      	beq.n	801a432 <wizchip_init+0x10e>
   {
      tmp = 0;
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3be:	2300      	movs	r3, #0
 801a3c0:	73fb      	strb	r3, [r7, #15]
 801a3c2:	e015      	b.n	801a3f0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801a3c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3c8:	683a      	ldr	r2, [r7, #0]
 801a3ca:	4413      	add	r3, r2
 801a3cc:	781a      	ldrb	r2, [r3, #0]
 801a3ce:	7bbb      	ldrb	r3, [r7, #14]
 801a3d0:	4413      	add	r3, r2
 801a3d2:	b2db      	uxtb	r3, r3
 801a3d4:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a3d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a3da:	2b10      	cmp	r3, #16
 801a3dc:	dd02      	ble.n	801a3e4 <wizchip_init+0xc0>
 801a3de:	f04f 33ff 	mov.w	r3, #4294967295
 801a3e2:	e027      	b.n	801a434 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3e8:	b2db      	uxtb	r3, r3
 801a3ea:	3301      	adds	r3, #1
 801a3ec:	b2db      	uxtb	r3, r3
 801a3ee:	73fb      	strb	r3, [r7, #15]
 801a3f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3f4:	2b07      	cmp	r3, #7
 801a3f6:	dde5      	ble.n	801a3c4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3f8:	2300      	movs	r3, #0
 801a3fa:	73fb      	strb	r3, [r7, #15]
 801a3fc:	e015      	b.n	801a42a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801a3fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a402:	009b      	lsls	r3, r3, #2
 801a404:	3301      	adds	r3, #1
 801a406:	00db      	lsls	r3, r3, #3
 801a408:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801a40c:	4618      	mov	r0, r3
 801a40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a412:	683a      	ldr	r2, [r7, #0]
 801a414:	4413      	add	r3, r2
 801a416:	781b      	ldrb	r3, [r3, #0]
 801a418:	4619      	mov	r1, r3
 801a41a:	f7fe faad 	bl	8018978 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a422:	b2db      	uxtb	r3, r3
 801a424:	3301      	adds	r3, #1
 801a426:	b2db      	uxtb	r3, r3
 801a428:	73fb      	strb	r3, [r7, #15]
 801a42a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a42e:	2b07      	cmp	r3, #7
 801a430:	dde5      	ble.n	801a3fe <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801a432:	2300      	movs	r3, #0
}
 801a434:	4618      	mov	r0, r3
 801a436:	3710      	adds	r7, #16
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}

0801a43c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801a43c:	b580      	push	{r7, lr}
 801a43e:	b084      	sub	sp, #16
 801a440:	af00      	add	r7, sp, #0
 801a442:	4603      	mov	r3, r0
 801a444:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 801a446:	88fb      	ldrh	r3, [r7, #6]
 801a448:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801a44a:	88fb      	ldrh	r3, [r7, #6]
 801a44c:	0a1b      	lsrs	r3, r3, #8
 801a44e:	b29b      	uxth	r3, r3
 801a450:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801a452:	7bfb      	ldrb	r3, [r7, #15]
 801a454:	f023 030f 	bic.w	r3, r3, #15
 801a458:	b2db      	uxtb	r3, r3
 801a45a:	4619      	mov	r1, r3
 801a45c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a460:	f7fe fa8a 	bl	8018978 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801a464:	2300      	movs	r3, #0
 801a466:	73fb      	strb	r3, [r7, #15]
 801a468:	e014      	b.n	801a494 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801a46a:	7bba      	ldrb	r2, [r7, #14]
 801a46c:	7bfb      	ldrb	r3, [r7, #15]
 801a46e:	fa42 f303 	asr.w	r3, r2, r3
 801a472:	f003 0301 	and.w	r3, r3, #1
 801a476:	2b00      	cmp	r3, #0
 801a478:	d009      	beq.n	801a48e <wizchip_clrinterrupt+0x52>
 801a47a:	7bfb      	ldrb	r3, [r7, #15]
 801a47c:	009b      	lsls	r3, r3, #2
 801a47e:	3301      	adds	r3, #1
 801a480:	00db      	lsls	r3, r3, #3
 801a482:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a486:	211f      	movs	r1, #31
 801a488:	4618      	mov	r0, r3
 801a48a:	f7fe fa75 	bl	8018978 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801a48e:	7bfb      	ldrb	r3, [r7, #15]
 801a490:	3301      	adds	r3, #1
 801a492:	73fb      	strb	r3, [r7, #15]
 801a494:	7bfb      	ldrb	r3, [r7, #15]
 801a496:	2b07      	cmp	r3, #7
 801a498:	d9e7      	bls.n	801a46a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 801a49a:	bf00      	nop
 801a49c:	bf00      	nop
 801a49e:	3710      	adds	r7, #16
 801a4a0:	46bd      	mov	sp, r7
 801a4a2:	bd80      	pop	{r7, pc}

0801a4a4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801a4a4:	b580      	push	{r7, lr}
 801a4a6:	b082      	sub	sp, #8
 801a4a8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801a4b6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a4ba:	f7fe fa11 	bl	80188e0 <WIZCHIP_READ>
 801a4be:	4603      	mov	r3, r0
 801a4c0:	f023 030f 	bic.w	r3, r3, #15
 801a4c4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 801a4c6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 801a4ca:	f7fe fa09 	bl	80188e0 <WIZCHIP_READ>
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801a4d2:	79bb      	ldrb	r3, [r7, #6]
 801a4d4:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 801a4d6:	88bb      	ldrh	r3, [r7, #4]
 801a4d8:	021b      	lsls	r3, r3, #8
 801a4da:	b29a      	uxth	r2, r3
 801a4dc:	79fb      	ldrb	r3, [r7, #7]
 801a4de:	b29b      	uxth	r3, r3
 801a4e0:	4413      	add	r3, r2
 801a4e2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a4e4:	88bb      	ldrh	r3, [r7, #4]
}
 801a4e6:	4618      	mov	r0, r3
 801a4e8:	3708      	adds	r7, #8
 801a4ea:	46bd      	mov	sp, r7
 801a4ec:	bd80      	pop	{r7, pc}

0801a4ee <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801a4ee:	b580      	push	{r7, lr}
 801a4f0:	b084      	sub	sp, #16
 801a4f2:	af00      	add	r7, sp, #0
 801a4f4:	4603      	mov	r3, r0
 801a4f6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 801a4f8:	88fb      	ldrh	r3, [r7, #6]
 801a4fa:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801a4fc:	88fb      	ldrh	r3, [r7, #6]
 801a4fe:	0a1b      	lsrs	r3, r3, #8
 801a500:	b29b      	uxth	r3, r3
 801a502:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801a504:	7bfb      	ldrb	r3, [r7, #15]
 801a506:	4619      	mov	r1, r3
 801a508:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a50c:	f7fe fa34 	bl	8018978 <WIZCHIP_WRITE>
   setSIMR(simr);
 801a510:	7bbb      	ldrb	r3, [r7, #14]
 801a512:	4619      	mov	r1, r3
 801a514:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a518:	f7fe fa2e 	bl	8018978 <WIZCHIP_WRITE>
#endif   
}
 801a51c:	bf00      	nop
 801a51e:	3710      	adds	r7, #16
 801a520:	46bd      	mov	sp, r7
 801a522:	bd80      	pop	{r7, pc}

0801a524 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801a524:	b580      	push	{r7, lr}
 801a526:	b082      	sub	sp, #8
 801a528:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801a52a:	2300      	movs	r3, #0
 801a52c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 801a52e:	2300      	movs	r3, #0
 801a530:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a532:	2300      	movs	r3, #0
 801a534:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801a536:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a53a:	f7fe f9d1 	bl	80188e0 <WIZCHIP_READ>
 801a53e:	4603      	mov	r3, r0
 801a540:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 801a542:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a546:	f7fe f9cb 	bl	80188e0 <WIZCHIP_READ>
 801a54a:	4603      	mov	r3, r0
 801a54c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801a54e:	79bb      	ldrb	r3, [r7, #6]
 801a550:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 801a552:	88bb      	ldrh	r3, [r7, #4]
 801a554:	021b      	lsls	r3, r3, #8
 801a556:	b29a      	uxth	r2, r3
 801a558:	79fb      	ldrb	r3, [r7, #7]
 801a55a:	b29b      	uxth	r3, r3
 801a55c:	4413      	add	r3, r2
 801a55e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a560:	88bb      	ldrh	r3, [r7, #4]
}
 801a562:	4618      	mov	r0, r3
 801a564:	3708      	adds	r7, #8
 801a566:	46bd      	mov	sp, r7
 801a568:	bd80      	pop	{r7, pc}

0801a56a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801a56a:	b580      	push	{r7, lr}
 801a56c:	b082      	sub	sp, #8
 801a56e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801a570:	2300      	movs	r3, #0
 801a572:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801a574:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a578:	f7fe f9b2 	bl	80188e0 <WIZCHIP_READ>
 801a57c:	4603      	mov	r3, r0
 801a57e:	f003 0301 	and.w	r3, r3, #1
 801a582:	2b00      	cmp	r3, #0
 801a584:	d001      	beq.n	801a58a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 801a586:	2301      	movs	r3, #1
 801a588:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 801a58a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a58e:	4618      	mov	r0, r3
 801a590:	3708      	adds	r7, #8
 801a592:	46bd      	mov	sp, r7
 801a594:	bd80      	pop	{r7, pc}

0801a596 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801a596:	b580      	push	{r7, lr}
 801a598:	b082      	sub	sp, #8
 801a59a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801a59c:	2300      	movs	r3, #0
 801a59e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801a5a0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5a4:	f7fe f99c 	bl	80188e0 <WIZCHIP_READ>
 801a5a8:	4603      	mov	r3, r0
 801a5aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a5ae:	2b30      	cmp	r3, #48	; 0x30
 801a5b0:	d102      	bne.n	801a5b8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 801a5b2:	2301      	movs	r3, #1
 801a5b4:	71fb      	strb	r3, [r7, #7]
 801a5b6:	e001      	b.n	801a5bc <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 801a5bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3708      	adds	r7, #8
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}

0801a5c8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b082      	sub	sp, #8
 801a5cc:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801a5ce:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5d2:	f7fe f985 	bl	80188e0 <WIZCHIP_READ>
 801a5d6:	4603      	mov	r3, r0
 801a5d8:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 801a5da:	79fb      	ldrb	r3, [r7, #7]
 801a5dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a5e0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a5e2:	79fb      	ldrb	r3, [r7, #7]
 801a5e4:	4619      	mov	r1, r3
 801a5e6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5ea:	f7fe f9c5 	bl	8018978 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801a5ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5f2:	f7fe f975 	bl	80188e0 <WIZCHIP_READ>
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 801a5fa:	79fb      	ldrb	r3, [r7, #7]
 801a5fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a600:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a602:	79fb      	ldrb	r3, [r7, #7]
 801a604:	4619      	mov	r1, r3
 801a606:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a60a:	f7fe f9b5 	bl	8018978 <WIZCHIP_WRITE>
}
 801a60e:	bf00      	nop
 801a610:	3708      	adds	r7, #8
 801a612:	46bd      	mov	sp, r7
 801a614:	bd80      	pop	{r7, pc}

0801a616 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801a616:	b580      	push	{r7, lr}
 801a618:	b084      	sub	sp, #16
 801a61a:	af00      	add	r7, sp, #0
 801a61c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a61e:	2300      	movs	r3, #0
 801a620:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	781b      	ldrb	r3, [r3, #0]
 801a626:	2b01      	cmp	r3, #1
 801a628:	d104      	bne.n	801a634 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 801a62a:	7bfb      	ldrb	r3, [r7, #15]
 801a62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a630:	73fb      	strb	r3, [r7, #15]
 801a632:	e003      	b.n	801a63c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 801a634:	7bfb      	ldrb	r3, [r7, #15]
 801a636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a63a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	785b      	ldrb	r3, [r3, #1]
 801a640:	2b01      	cmp	r3, #1
 801a642:	d104      	bne.n	801a64e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a644:	7bfb      	ldrb	r3, [r7, #15]
 801a646:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a64a:	73fb      	strb	r3, [r7, #15]
 801a64c:	e019      	b.n	801a682 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	78db      	ldrb	r3, [r3, #3]
 801a652:	2b01      	cmp	r3, #1
 801a654:	d10d      	bne.n	801a672 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	789b      	ldrb	r3, [r3, #2]
 801a65a:	2b01      	cmp	r3, #1
 801a65c:	d104      	bne.n	801a668 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 801a65e:	7bfb      	ldrb	r3, [r7, #15]
 801a660:	f043 0318 	orr.w	r3, r3, #24
 801a664:	73fb      	strb	r3, [r7, #15]
 801a666:	e00c      	b.n	801a682 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801a668:	7bfb      	ldrb	r3, [r7, #15]
 801a66a:	f043 0308 	orr.w	r3, r3, #8
 801a66e:	73fb      	strb	r3, [r7, #15]
 801a670:	e007      	b.n	801a682 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	789b      	ldrb	r3, [r3, #2]
 801a676:	2b01      	cmp	r3, #1
 801a678:	d103      	bne.n	801a682 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 801a67a:	7bfb      	ldrb	r3, [r7, #15]
 801a67c:	f043 0310 	orr.w	r3, r3, #16
 801a680:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 801a682:	7bfb      	ldrb	r3, [r7, #15]
 801a684:	4619      	mov	r1, r3
 801a686:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a68a:	f7fe f975 	bl	8018978 <WIZCHIP_WRITE>
   wizphy_reset();
 801a68e:	f7ff ff9b 	bl	801a5c8 <wizphy_reset>
}
 801a692:	bf00      	nop
 801a694:	3710      	adds	r7, #16
 801a696:	46bd      	mov	sp, r7
 801a698:	bd80      	pop	{r7, pc}
	...

0801a69c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b084      	sub	sp, #16
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a6a4:	2300      	movs	r3, #0
 801a6a6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a6a8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a6ac:	f7fe f918 	bl	80188e0 <WIZCHIP_READ>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a6b4:	7bfb      	ldrb	r3, [r7, #15]
 801a6b6:	119b      	asrs	r3, r3, #6
 801a6b8:	b2db      	uxtb	r3, r3
 801a6ba:	f003 0301 	and.w	r3, r3, #1
 801a6be:	b2da      	uxtb	r2, r3
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a6c4:	7bfb      	ldrb	r3, [r7, #15]
 801a6c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a6ca:	2b20      	cmp	r3, #32
 801a6cc:	d001      	beq.n	801a6d2 <wizphy_getphyconf+0x36>
 801a6ce:	2b38      	cmp	r3, #56	; 0x38
 801a6d0:	d103      	bne.n	801a6da <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	2201      	movs	r2, #1
 801a6d6:	705a      	strb	r2, [r3, #1]
         break;
 801a6d8:	e003      	b.n	801a6e2 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	2200      	movs	r2, #0
 801a6de:	705a      	strb	r2, [r3, #1]
         break;
 801a6e0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a6e2:	7bfb      	ldrb	r3, [r7, #15]
 801a6e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a6e8:	3b10      	subs	r3, #16
 801a6ea:	2b10      	cmp	r3, #16
 801a6ec:	bf8c      	ite	hi
 801a6ee:	2201      	movhi	r2, #1
 801a6f0:	2200      	movls	r2, #0
 801a6f2:	b2d2      	uxtb	r2, r2
 801a6f4:	2a00      	cmp	r2, #0
 801a6f6:	d10f      	bne.n	801a718 <wizphy_getphyconf+0x7c>
 801a6f8:	4a1b      	ldr	r2, [pc, #108]	; (801a768 <wizphy_getphyconf+0xcc>)
 801a6fa:	fa22 f303 	lsr.w	r3, r2, r3
 801a6fe:	f003 0301 	and.w	r3, r3, #1
 801a702:	2b00      	cmp	r3, #0
 801a704:	bf14      	ite	ne
 801a706:	2301      	movne	r3, #1
 801a708:	2300      	moveq	r3, #0
 801a70a:	b2db      	uxtb	r3, r3
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d003      	beq.n	801a718 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	2201      	movs	r2, #1
 801a714:	709a      	strb	r2, [r3, #2]
         break;
 801a716:	e003      	b.n	801a720 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	2200      	movs	r2, #0
 801a71c:	709a      	strb	r2, [r3, #2]
         break;
 801a71e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a720:	7bfb      	ldrb	r3, [r7, #15]
 801a722:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a726:	3b08      	subs	r3, #8
 801a728:	2b18      	cmp	r3, #24
 801a72a:	bf8c      	ite	hi
 801a72c:	2201      	movhi	r2, #1
 801a72e:	2200      	movls	r2, #0
 801a730:	b2d2      	uxtb	r2, r2
 801a732:	2a00      	cmp	r2, #0
 801a734:	d10f      	bne.n	801a756 <wizphy_getphyconf+0xba>
 801a736:	4a0d      	ldr	r2, [pc, #52]	; (801a76c <wizphy_getphyconf+0xd0>)
 801a738:	fa22 f303 	lsr.w	r3, r2, r3
 801a73c:	f003 0301 	and.w	r3, r3, #1
 801a740:	2b00      	cmp	r3, #0
 801a742:	bf14      	ite	ne
 801a744:	2301      	movne	r3, #1
 801a746:	2300      	moveq	r3, #0
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	2b00      	cmp	r3, #0
 801a74c:	d003      	beq.n	801a756 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	2201      	movs	r2, #1
 801a752:	70da      	strb	r2, [r3, #3]
         break;
 801a754:	e003      	b.n	801a75e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	2200      	movs	r2, #0
 801a75a:	70da      	strb	r2, [r3, #3]
         break;
 801a75c:	bf00      	nop
   }
}
 801a75e:	bf00      	nop
 801a760:	3710      	adds	r7, #16
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}
 801a766:	bf00      	nop
 801a768:	00010101 	.word	0x00010101
 801a76c:	01010001 	.word	0x01010001

0801a770 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a770:	b580      	push	{r7, lr}
 801a772:	b084      	sub	sp, #16
 801a774:	af00      	add	r7, sp, #0
 801a776:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a778:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a77c:	f7fe f8b0 	bl	80188e0 <WIZCHIP_READ>
 801a780:	4603      	mov	r3, r0
 801a782:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a784:	7bfb      	ldrb	r3, [r7, #15]
 801a786:	109b      	asrs	r3, r3, #2
 801a788:	b2db      	uxtb	r3, r3
 801a78a:	f003 0301 	and.w	r3, r3, #1
 801a78e:	b2da      	uxtb	r2, r3
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a794:	7bfb      	ldrb	r3, [r7, #15]
 801a796:	105b      	asrs	r3, r3, #1
 801a798:	b2db      	uxtb	r3, r3
 801a79a:	f003 0301 	and.w	r3, r3, #1
 801a79e:	b2da      	uxtb	r2, r3
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	709a      	strb	r2, [r3, #2]
}
 801a7a4:	bf00      	nop
 801a7a6:	3710      	adds	r7, #16
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	bd80      	pop	{r7, pc}

0801a7ac <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b084      	sub	sp, #16
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	4603      	mov	r3, r0
 801a7b4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a7b6:	2300      	movs	r3, #0
 801a7b8:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a7ba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a7be:	f7fe f88f 	bl	80188e0 <WIZCHIP_READ>
 801a7c2:	4603      	mov	r3, r0
 801a7c4:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a7c6:	7bfb      	ldrb	r3, [r7, #15]
 801a7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d102      	bne.n	801a7d6 <wizphy_setphypmode+0x2a>
 801a7d0:	f04f 33ff 	mov.w	r3, #4294967295
 801a7d4:	e030      	b.n	801a838 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a7d6:	7bfb      	ldrb	r3, [r7, #15]
 801a7d8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 801a7dc:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a7de:	79fb      	ldrb	r3, [r7, #7]
 801a7e0:	2b01      	cmp	r3, #1
 801a7e2:	d104      	bne.n	801a7ee <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a7e4:	7bfb      	ldrb	r3, [r7, #15]
 801a7e6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801a7ea:	73fb      	strb	r3, [r7, #15]
 801a7ec:	e003      	b.n	801a7f6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a7ee:	7bfb      	ldrb	r3, [r7, #15]
 801a7f0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a7f4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a7f6:	7bfb      	ldrb	r3, [r7, #15]
 801a7f8:	4619      	mov	r1, r3
 801a7fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a7fe:	f7fe f8bb 	bl	8018978 <WIZCHIP_WRITE>
   wizphy_reset();
 801a802:	f7ff fee1 	bl	801a5c8 <wizphy_reset>
   tmp = getPHYCFGR();
 801a806:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a80a:	f7fe f869 	bl	80188e0 <WIZCHIP_READ>
 801a80e:	4603      	mov	r3, r0
 801a810:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a812:	79fb      	ldrb	r3, [r7, #7]
 801a814:	2b01      	cmp	r3, #1
 801a816:	d106      	bne.n	801a826 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a818:	7bfb      	ldrb	r3, [r7, #15]
 801a81a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d008      	beq.n	801a834 <wizphy_setphypmode+0x88>
 801a822:	2300      	movs	r3, #0
 801a824:	e008      	b.n	801a838 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a826:	7bfb      	ldrb	r3, [r7, #15]
 801a828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d001      	beq.n	801a834 <wizphy_setphypmode+0x88>
 801a830:	2300      	movs	r3, #0
 801a832:	e001      	b.n	801a838 <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a834:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a838:	4618      	mov	r0, r3
 801a83a:	3710      	adds	r7, #16
 801a83c:	46bd      	mov	sp, r7
 801a83e:	bd80      	pop	{r7, pc}

0801a840 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a840:	b580      	push	{r7, lr}
 801a842:	b082      	sub	sp, #8
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2206      	movs	r2, #6
 801a84c:	4619      	mov	r1, r3
 801a84e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a852:	f7fe f93f 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	330e      	adds	r3, #14
 801a85a:	2204      	movs	r2, #4
 801a85c:	4619      	mov	r1, r3
 801a85e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a862:	f7fe f937 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	330a      	adds	r3, #10
 801a86a:	2204      	movs	r2, #4
 801a86c:	4619      	mov	r1, r3
 801a86e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a872:	f7fe f92f 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	3306      	adds	r3, #6
 801a87a:	2204      	movs	r2, #4
 801a87c:	4619      	mov	r1, r3
 801a87e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a882:	f7fe f927 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	7c9a      	ldrb	r2, [r3, #18]
 801a88a:	4b0b      	ldr	r3, [pc, #44]	; (801a8b8 <wizchip_setnetinfo+0x78>)
 801a88c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	7cda      	ldrb	r2, [r3, #19]
 801a892:	4b09      	ldr	r3, [pc, #36]	; (801a8b8 <wizchip_setnetinfo+0x78>)
 801a894:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	7d1a      	ldrb	r2, [r3, #20]
 801a89a:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <wizchip_setnetinfo+0x78>)
 801a89c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	7d5a      	ldrb	r2, [r3, #21]
 801a8a2:	4b05      	ldr	r3, [pc, #20]	; (801a8b8 <wizchip_setnetinfo+0x78>)
 801a8a4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	7d9a      	ldrb	r2, [r3, #22]
 801a8aa:	4b04      	ldr	r3, [pc, #16]	; (801a8bc <wizchip_setnetinfo+0x7c>)
 801a8ac:	701a      	strb	r2, [r3, #0]
}
 801a8ae:	bf00      	nop
 801a8b0:	3708      	adds	r7, #8
 801a8b2:	46bd      	mov	sp, r7
 801a8b4:	bd80      	pop	{r7, pc}
 801a8b6:	bf00      	nop
 801a8b8:	200009a0 	.word	0x200009a0
 801a8bc:	200009a4 	.word	0x200009a4

0801a8c0 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a8c0:	b580      	push	{r7, lr}
 801a8c2:	b082      	sub	sp, #8
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	2206      	movs	r2, #6
 801a8cc:	4619      	mov	r1, r3
 801a8ce:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a8d2:	f7fe f89f 	bl	8018a14 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	330e      	adds	r3, #14
 801a8da:	2204      	movs	r2, #4
 801a8dc:	4619      	mov	r1, r3
 801a8de:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a8e2:	f7fe f897 	bl	8018a14 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	330a      	adds	r3, #10
 801a8ea:	2204      	movs	r2, #4
 801a8ec:	4619      	mov	r1, r3
 801a8ee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a8f2:	f7fe f88f 	bl	8018a14 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	3306      	adds	r3, #6
 801a8fa:	2204      	movs	r2, #4
 801a8fc:	4619      	mov	r1, r3
 801a8fe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a902:	f7fe f887 	bl	8018a14 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a906:	4b0c      	ldr	r3, [pc, #48]	; (801a938 <wizchip_getnetinfo+0x78>)
 801a908:	781a      	ldrb	r2, [r3, #0]
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a90e:	4b0a      	ldr	r3, [pc, #40]	; (801a938 <wizchip_getnetinfo+0x78>)
 801a910:	785a      	ldrb	r2, [r3, #1]
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a916:	4b08      	ldr	r3, [pc, #32]	; (801a938 <wizchip_getnetinfo+0x78>)
 801a918:	789a      	ldrb	r2, [r3, #2]
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a91e:	4b06      	ldr	r3, [pc, #24]	; (801a938 <wizchip_getnetinfo+0x78>)
 801a920:	78da      	ldrb	r2, [r3, #3]
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a926:	4b05      	ldr	r3, [pc, #20]	; (801a93c <wizchip_getnetinfo+0x7c>)
 801a928:	781a      	ldrb	r2, [r3, #0]
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	759a      	strb	r2, [r3, #22]
}
 801a92e:	bf00      	nop
 801a930:	3708      	adds	r7, #8
 801a932:	46bd      	mov	sp, r7
 801a934:	bd80      	pop	{r7, pc}
 801a936:	bf00      	nop
 801a938:	200009a0 	.word	0x200009a0
 801a93c:	200009a4 	.word	0x200009a4

0801a940 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b084      	sub	sp, #16
 801a944:	af00      	add	r7, sp, #0
 801a946:	4603      	mov	r3, r0
 801a948:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a94a:	2300      	movs	r3, #0
 801a94c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a94e:	79fb      	ldrb	r3, [r7, #7]
 801a950:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801a954:	2b00      	cmp	r3, #0
 801a956:	d002      	beq.n	801a95e <wizchip_setnetmode+0x1e>
 801a958:	f04f 33ff 	mov.w	r3, #4294967295
 801a95c:	e00e      	b.n	801a97c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a95e:	2000      	movs	r0, #0
 801a960:	f7fd ffbe 	bl	80188e0 <WIZCHIP_READ>
 801a964:	4603      	mov	r3, r0
 801a966:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a968:	7bfa      	ldrb	r2, [r7, #15]
 801a96a:	79fb      	ldrb	r3, [r7, #7]
 801a96c:	4313      	orrs	r3, r2
 801a96e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a970:	7bfb      	ldrb	r3, [r7, #15]
 801a972:	4619      	mov	r1, r3
 801a974:	2000      	movs	r0, #0
 801a976:	f7fd ffff 	bl	8018978 <WIZCHIP_WRITE>
   return 0;
 801a97a:	2300      	movs	r3, #0
}
 801a97c:	4618      	mov	r0, r3
 801a97e:	3710      	adds	r7, #16
 801a980:	46bd      	mov	sp, r7
 801a982:	bd80      	pop	{r7, pc}

0801a984 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a984:	b580      	push	{r7, lr}
 801a986:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a988:	2000      	movs	r0, #0
 801a98a:	f7fd ffa9 	bl	80188e0 <WIZCHIP_READ>
 801a98e:	4603      	mov	r3, r0
}
 801a990:	4618      	mov	r0, r3
 801a992:	bd80      	pop	{r7, pc}

0801a994 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a994:	b580      	push	{r7, lr}
 801a996:	b082      	sub	sp, #8
 801a998:	af00      	add	r7, sp, #0
 801a99a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	781b      	ldrb	r3, [r3, #0]
 801a9a0:	4619      	mov	r1, r3
 801a9a2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a9a6:	f7fd ffe7 	bl	8018978 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	885b      	ldrh	r3, [r3, #2]
 801a9ae:	0a1b      	lsrs	r3, r3, #8
 801a9b0:	b29b      	uxth	r3, r3
 801a9b2:	b2db      	uxtb	r3, r3
 801a9b4:	4619      	mov	r1, r3
 801a9b6:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a9ba:	f7fd ffdd 	bl	8018978 <WIZCHIP_WRITE>
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	885b      	ldrh	r3, [r3, #2]
 801a9c2:	b2db      	uxtb	r3, r3
 801a9c4:	4619      	mov	r1, r3
 801a9c6:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a9ca:	f7fd ffd5 	bl	8018978 <WIZCHIP_WRITE>
}
 801a9ce:	bf00      	nop
 801a9d0:	3708      	adds	r7, #8
 801a9d2:	46bd      	mov	sp, r7
 801a9d4:	bd80      	pop	{r7, pc}

0801a9d6 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801a9d6:	b590      	push	{r4, r7, lr}
 801a9d8:	b083      	sub	sp, #12
 801a9da:	af00      	add	r7, sp, #0
 801a9dc:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801a9de:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a9e2:	f7fd ff7d 	bl	80188e0 <WIZCHIP_READ>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801a9ee:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a9f2:	f7fd ff75 	bl	80188e0 <WIZCHIP_READ>
 801a9f6:	4603      	mov	r3, r0
 801a9f8:	b29b      	uxth	r3, r3
 801a9fa:	021b      	lsls	r3, r3, #8
 801a9fc:	b29c      	uxth	r4, r3
 801a9fe:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801aa02:	f7fd ff6d 	bl	80188e0 <WIZCHIP_READ>
 801aa06:	4603      	mov	r3, r0
 801aa08:	b29b      	uxth	r3, r3
 801aa0a:	4423      	add	r3, r4
 801aa0c:	b29a      	uxth	r2, r3
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	805a      	strh	r2, [r3, #2]
}
 801aa12:	bf00      	nop
 801aa14:	370c      	adds	r7, #12
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bd90      	pop	{r4, r7, pc}
	...

0801aa1c <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801aa20:	2204      	movs	r2, #4
 801aa22:	4909      	ldr	r1, [pc, #36]	; (801aa48 <default_ip_assign+0x2c>)
 801aa24:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801aa28:	f7fe f854 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801aa2c:	2204      	movs	r2, #4
 801aa2e:	4907      	ldr	r1, [pc, #28]	; (801aa4c <default_ip_assign+0x30>)
 801aa30:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801aa34:	f7fe f84e 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801aa38:	2204      	movs	r2, #4
 801aa3a:	4905      	ldr	r1, [pc, #20]	; (801aa50 <default_ip_assign+0x34>)
 801aa3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 801aa40:	f7fe f848 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
}
 801aa44:	bf00      	nop
 801aa46:	bd80      	pop	{r7, pc}
 801aa48:	200009b4 	.word	0x200009b4
 801aa4c:	200009bc 	.word	0x200009bc
 801aa50:	200009b8 	.word	0x200009b8

0801aa54 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801aa58:	2180      	movs	r1, #128	; 0x80
 801aa5a:	2000      	movs	r0, #0
 801aa5c:	f7fd ff8c 	bl	8018978 <WIZCHIP_WRITE>
   getMR(); // for delay
 801aa60:	2000      	movs	r0, #0
 801aa62:	f7fd ff3d 	bl	80188e0 <WIZCHIP_READ>
   default_ip_assign();
 801aa66:	f7ff ffd9 	bl	801aa1c <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801aa6a:	2206      	movs	r2, #6
 801aa6c:	4903      	ldr	r1, [pc, #12]	; (801aa7c <default_ip_update+0x28>)
 801aa6e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801aa72:	f7fe f82f 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
}
 801aa76:	bf00      	nop
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	200009d4 	.word	0x200009d4

0801aa80 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801aa84:	2180      	movs	r1, #128	; 0x80
 801aa86:	2000      	movs	r0, #0
 801aa88:	f7fd ff76 	bl	8018978 <WIZCHIP_WRITE>
	getMR(); // for delay
 801aa8c:	2000      	movs	r0, #0
 801aa8e:	f7fd ff27 	bl	80188e0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801aa92:	2206      	movs	r2, #6
 801aa94:	4903      	ldr	r1, [pc, #12]	; (801aaa4 <default_ip_conflict+0x24>)
 801aa96:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801aa9a:	f7fe f81b 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
}
 801aa9e:	bf00      	nop
 801aaa0:	bd80      	pop	{r7, pc}
 801aaa2:	bf00      	nop
 801aaa4:	200009d4 	.word	0x200009d4

0801aaa8 <default_delay>:

void default_delay(uint32_t time){}
 801aaa8:	b480      	push	{r7}
 801aaaa:	b083      	sub	sp, #12
 801aaac:	af00      	add	r7, sp, #0
 801aaae:	6078      	str	r0, [r7, #4]
 801aab0:	bf00      	nop
 801aab2:	370c      	adds	r7, #12
 801aab4:	46bd      	mov	sp, r7
 801aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaba:	4770      	bx	lr

0801aabc <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801aabc:	b480      	push	{r7}
 801aabe:	b085      	sub	sp, #20
 801aac0:	af00      	add	r7, sp, #0
 801aac2:	60f8      	str	r0, [r7, #12]
 801aac4:	60b9      	str	r1, [r7, #8]
 801aac6:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801aac8:	4b10      	ldr	r3, [pc, #64]	; (801ab0c <reg_dhcp_cbfunc+0x50>)
 801aaca:	4a11      	ldr	r2, [pc, #68]	; (801ab10 <reg_dhcp_cbfunc+0x54>)
 801aacc:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801aace:	4b11      	ldr	r3, [pc, #68]	; (801ab14 <reg_dhcp_cbfunc+0x58>)
 801aad0:	4a11      	ldr	r2, [pc, #68]	; (801ab18 <reg_dhcp_cbfunc+0x5c>)
 801aad2:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801aad4:	4b11      	ldr	r3, [pc, #68]	; (801ab1c <reg_dhcp_cbfunc+0x60>)
 801aad6:	4a12      	ldr	r2, [pc, #72]	; (801ab20 <reg_dhcp_cbfunc+0x64>)
 801aad8:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d002      	beq.n	801aae6 <reg_dhcp_cbfunc+0x2a>
 801aae0:	4a0a      	ldr	r2, [pc, #40]	; (801ab0c <reg_dhcp_cbfunc+0x50>)
 801aae2:	68fb      	ldr	r3, [r7, #12]
 801aae4:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d002      	beq.n	801aaf2 <reg_dhcp_cbfunc+0x36>
 801aaec:	4a09      	ldr	r2, [pc, #36]	; (801ab14 <reg_dhcp_cbfunc+0x58>)
 801aaee:	68bb      	ldr	r3, [r7, #8]
 801aaf0:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d002      	beq.n	801aafe <reg_dhcp_cbfunc+0x42>
 801aaf8:	4a08      	ldr	r2, [pc, #32]	; (801ab1c <reg_dhcp_cbfunc+0x60>)
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	6013      	str	r3, [r2, #0]
}
 801aafe:	bf00      	nop
 801ab00:	3714      	adds	r7, #20
 801ab02:	46bd      	mov	sp, r7
 801ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab08:	4770      	bx	lr
 801ab0a:	bf00      	nop
 801ab0c:	20000104 	.word	0x20000104
 801ab10:	0801aa1d 	.word	0x0801aa1d
 801ab14:	20000108 	.word	0x20000108
 801ab18:	0801aa55 	.word	0x0801aa55
 801ab1c:	2000010c 	.word	0x2000010c
 801ab20:	0801aa81 	.word	0x0801aa81

0801ab24 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801ab24:	b580      	push	{r7, lr}
 801ab26:	b084      	sub	sp, #16
 801ab28:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801ab2a:	463b      	mov	r3, r7
 801ab2c:	2206      	movs	r2, #6
 801ab2e:	4619      	mov	r1, r3
 801ab30:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801ab34:	f7fd ff6e 	bl	8018a14 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801ab38:	4b72      	ldr	r3, [pc, #456]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	2201      	movs	r2, #1
 801ab3e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801ab40:	4b70      	ldr	r3, [pc, #448]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	2201      	movs	r2, #1
 801ab46:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801ab48:	4b6e      	ldr	r3, [pc, #440]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	2206      	movs	r2, #6
 801ab4e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801ab50:	4b6c      	ldr	r3, [pc, #432]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	2200      	movs	r2, #0
 801ab56:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801ab58:	4b6a      	ldr	r3, [pc, #424]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	3304      	adds	r3, #4
 801ab5e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801ab60:	4b69      	ldr	r3, [pc, #420]	; (801ad08 <makeDHCPMSG+0x1e4>)
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	0e1b      	lsrs	r3, r3, #24
 801ab66:	b2da      	uxtb	r2, r3
 801ab68:	68bb      	ldr	r3, [r7, #8]
 801ab6a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801ab6c:	4b66      	ldr	r3, [pc, #408]	; (801ad08 <makeDHCPMSG+0x1e4>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	0c1a      	lsrs	r2, r3, #16
 801ab72:	68bb      	ldr	r3, [r7, #8]
 801ab74:	3301      	adds	r3, #1
 801ab76:	b2d2      	uxtb	r2, r2
 801ab78:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801ab7a:	4b63      	ldr	r3, [pc, #396]	; (801ad08 <makeDHCPMSG+0x1e4>)
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	0a1a      	lsrs	r2, r3, #8
 801ab80:	68bb      	ldr	r3, [r7, #8]
 801ab82:	3302      	adds	r3, #2
 801ab84:	b2d2      	uxtb	r2, r2
 801ab86:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801ab88:	4b5f      	ldr	r3, [pc, #380]	; (801ad08 <makeDHCPMSG+0x1e4>)
 801ab8a:	681a      	ldr	r2, [r3, #0]
 801ab8c:	68bb      	ldr	r3, [r7, #8]
 801ab8e:	3303      	adds	r3, #3
 801ab90:	b2d2      	uxtb	r2, r2
 801ab92:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801ab94:	4b5b      	ldr	r3, [pc, #364]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	2200      	movs	r2, #0
 801ab9a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801ab9c:	4b59      	ldr	r3, [pc, #356]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	330a      	adds	r3, #10
 801aba2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801aba4:	68bb      	ldr	r3, [r7, #8]
 801aba6:	2280      	movs	r2, #128	; 0x80
 801aba8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801abaa:	68bb      	ldr	r3, [r7, #8]
 801abac:	3301      	adds	r3, #1
 801abae:	2200      	movs	r2, #0
 801abb0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801abb2:	4b54      	ldr	r3, [pc, #336]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	2200      	movs	r2, #0
 801abb8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801abba:	4b52      	ldr	r3, [pc, #328]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	2200      	movs	r2, #0
 801abc0:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801abc2:	4b50      	ldr	r3, [pc, #320]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	2200      	movs	r2, #0
 801abc8:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801abca:	4b4e      	ldr	r3, [pc, #312]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	2200      	movs	r2, #0
 801abd0:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801abd2:	4b4c      	ldr	r3, [pc, #304]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	2200      	movs	r2, #0
 801abd8:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801abda:	4b4a      	ldr	r3, [pc, #296]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	2200      	movs	r2, #0
 801abe0:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801abe2:	4b48      	ldr	r3, [pc, #288]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	2200      	movs	r2, #0
 801abe8:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801abea:	4b46      	ldr	r3, [pc, #280]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	2200      	movs	r2, #0
 801abf0:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801abf2:	4b44      	ldr	r3, [pc, #272]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	2200      	movs	r2, #0
 801abf8:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801abfa:	4b42      	ldr	r3, [pc, #264]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	2200      	movs	r2, #0
 801ac00:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801ac02:	4b40      	ldr	r3, [pc, #256]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	2200      	movs	r2, #0
 801ac08:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801ac0a:	4b3e      	ldr	r3, [pc, #248]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac0c:	681b      	ldr	r3, [r3, #0]
 801ac0e:	2200      	movs	r2, #0
 801ac10:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801ac12:	4b3c      	ldr	r3, [pc, #240]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	2200      	movs	r2, #0
 801ac18:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801ac1a:	4b3a      	ldr	r3, [pc, #232]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	2200      	movs	r2, #0
 801ac20:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801ac22:	4b38      	ldr	r3, [pc, #224]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	2200      	movs	r2, #0
 801ac28:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801ac2a:	4b36      	ldr	r3, [pc, #216]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	2200      	movs	r2, #0
 801ac30:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801ac32:	4b34      	ldr	r3, [pc, #208]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	4a35      	ldr	r2, [pc, #212]	; (801ad0c <makeDHCPMSG+0x1e8>)
 801ac38:	7812      	ldrb	r2, [r2, #0]
 801ac3a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801ac3c:	4b31      	ldr	r3, [pc, #196]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	4a32      	ldr	r2, [pc, #200]	; (801ad0c <makeDHCPMSG+0x1e8>)
 801ac42:	7852      	ldrb	r2, [r2, #1]
 801ac44:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801ac46:	4b2f      	ldr	r3, [pc, #188]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac48:	681b      	ldr	r3, [r3, #0]
 801ac4a:	4a30      	ldr	r2, [pc, #192]	; (801ad0c <makeDHCPMSG+0x1e8>)
 801ac4c:	7892      	ldrb	r2, [r2, #2]
 801ac4e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801ac50:	4b2c      	ldr	r3, [pc, #176]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	4a2d      	ldr	r2, [pc, #180]	; (801ad0c <makeDHCPMSG+0x1e8>)
 801ac56:	78d2      	ldrb	r2, [r2, #3]
 801ac58:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801ac5a:	4b2a      	ldr	r3, [pc, #168]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	4a2b      	ldr	r2, [pc, #172]	; (801ad0c <makeDHCPMSG+0x1e8>)
 801ac60:	7912      	ldrb	r2, [r2, #4]
 801ac62:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801ac66:	4b27      	ldr	r3, [pc, #156]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	4a28      	ldr	r2, [pc, #160]	; (801ad0c <makeDHCPMSG+0x1e8>)
 801ac6c:	7952      	ldrb	r2, [r2, #5]
 801ac6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801ac72:	2306      	movs	r3, #6
 801ac74:	73fb      	strb	r3, [r7, #15]
 801ac76:	e008      	b.n	801ac8a <makeDHCPMSG+0x166>
 801ac78:	4b22      	ldr	r3, [pc, #136]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac7a:	681a      	ldr	r2, [r3, #0]
 801ac7c:	7bfb      	ldrb	r3, [r7, #15]
 801ac7e:	4413      	add	r3, r2
 801ac80:	2200      	movs	r2, #0
 801ac82:	771a      	strb	r2, [r3, #28]
 801ac84:	7bfb      	ldrb	r3, [r7, #15]
 801ac86:	3301      	adds	r3, #1
 801ac88:	73fb      	strb	r3, [r7, #15]
 801ac8a:	7bfb      	ldrb	r3, [r7, #15]
 801ac8c:	2b0f      	cmp	r3, #15
 801ac8e:	d9f3      	bls.n	801ac78 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801ac90:	2300      	movs	r3, #0
 801ac92:	73fb      	strb	r3, [r7, #15]
 801ac94:	e009      	b.n	801acaa <makeDHCPMSG+0x186>
 801ac96:	4b1b      	ldr	r3, [pc, #108]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ac98:	681a      	ldr	r2, [r3, #0]
 801ac9a:	7bfb      	ldrb	r3, [r7, #15]
 801ac9c:	4413      	add	r3, r2
 801ac9e:	2200      	movs	r2, #0
 801aca0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801aca4:	7bfb      	ldrb	r3, [r7, #15]
 801aca6:	3301      	adds	r3, #1
 801aca8:	73fb      	strb	r3, [r7, #15]
 801acaa:	7bfb      	ldrb	r3, [r7, #15]
 801acac:	2b3f      	cmp	r3, #63	; 0x3f
 801acae:	d9f2      	bls.n	801ac96 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801acb0:	2300      	movs	r3, #0
 801acb2:	73fb      	strb	r3, [r7, #15]
 801acb4:	e009      	b.n	801acca <makeDHCPMSG+0x1a6>
 801acb6:	4b13      	ldr	r3, [pc, #76]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801acb8:	681a      	ldr	r2, [r3, #0]
 801acba:	7bfb      	ldrb	r3, [r7, #15]
 801acbc:	4413      	add	r3, r2
 801acbe:	2200      	movs	r2, #0
 801acc0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801acc4:	7bfb      	ldrb	r3, [r7, #15]
 801acc6:	3301      	adds	r3, #1
 801acc8:	73fb      	strb	r3, [r7, #15]
 801acca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	daf1      	bge.n	801acb6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801acd2:	4b0c      	ldr	r3, [pc, #48]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	2263      	movs	r2, #99	; 0x63
 801acd8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801acdc:	4b09      	ldr	r3, [pc, #36]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	2282      	movs	r2, #130	; 0x82
 801ace2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801ace6:	4b07      	ldr	r3, [pc, #28]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	2253      	movs	r2, #83	; 0x53
 801acec:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801acf0:	4b04      	ldr	r3, [pc, #16]	; (801ad04 <makeDHCPMSG+0x1e0>)
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	2263      	movs	r2, #99	; 0x63
 801acf6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 801acfa:	bf00      	nop
 801acfc:	3710      	adds	r7, #16
 801acfe:	46bd      	mov	sp, r7
 801ad00:	bd80      	pop	{r7, pc}
 801ad02:	bf00      	nop
 801ad04:	200009d0 	.word	0x200009d0
 801ad08:	200009cc 	.word	0x200009cc
 801ad0c:	200009d4 	.word	0x200009d4

0801ad10 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801ad10:	b5b0      	push	{r4, r5, r7, lr}
 801ad12:	b084      	sub	sp, #16
 801ad14:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801ad16:	2300      	movs	r3, #0
 801ad18:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801ad1a:	f7ff ff03 	bl	801ab24 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801ad1e:	4b56      	ldr	r3, [pc, #344]	; (801ae78 <send_DHCP_DISCOVER+0x168>)
 801ad20:	2200      	movs	r2, #0
 801ad22:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801ad24:	4b54      	ldr	r3, [pc, #336]	; (801ae78 <send_DHCP_DISCOVER+0x168>)
 801ad26:	2200      	movs	r2, #0
 801ad28:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801ad2a:	4b53      	ldr	r3, [pc, #332]	; (801ae78 <send_DHCP_DISCOVER+0x168>)
 801ad2c:	2200      	movs	r2, #0
 801ad2e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801ad30:	4b51      	ldr	r3, [pc, #324]	; (801ae78 <send_DHCP_DISCOVER+0x168>)
 801ad32:	2200      	movs	r2, #0
 801ad34:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801ad36:	4b51      	ldr	r3, [pc, #324]	; (801ae7c <send_DHCP_DISCOVER+0x16c>)
 801ad38:	2200      	movs	r2, #0
 801ad3a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801ad3c:	4b4f      	ldr	r3, [pc, #316]	; (801ae7c <send_DHCP_DISCOVER+0x16c>)
 801ad3e:	2200      	movs	r2, #0
 801ad40:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801ad42:	4b4e      	ldr	r3, [pc, #312]	; (801ae7c <send_DHCP_DISCOVER+0x16c>)
 801ad44:	2200      	movs	r2, #0
 801ad46:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801ad48:	4b4c      	ldr	r3, [pc, #304]	; (801ae7c <send_DHCP_DISCOVER+0x16c>)
 801ad4a:	2200      	movs	r2, #0
 801ad4c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801ad4e:	2304      	movs	r3, #4
 801ad50:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801ad52:	4b4b      	ldr	r3, [pc, #300]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ad54:	681a      	ldr	r2, [r3, #0]
 801ad56:	88bb      	ldrh	r3, [r7, #4]
 801ad58:	1c59      	adds	r1, r3, #1
 801ad5a:	80b9      	strh	r1, [r7, #4]
 801ad5c:	4413      	add	r3, r2
 801ad5e:	2235      	movs	r2, #53	; 0x35
 801ad60:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ad64:	4b46      	ldr	r3, [pc, #280]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ad66:	681a      	ldr	r2, [r3, #0]
 801ad68:	88bb      	ldrh	r3, [r7, #4]
 801ad6a:	1c59      	adds	r1, r3, #1
 801ad6c:	80b9      	strh	r1, [r7, #4]
 801ad6e:	4413      	add	r3, r2
 801ad70:	2201      	movs	r2, #1
 801ad72:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801ad76:	4b42      	ldr	r3, [pc, #264]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ad78:	681a      	ldr	r2, [r3, #0]
 801ad7a:	88bb      	ldrh	r3, [r7, #4]
 801ad7c:	1c59      	adds	r1, r3, #1
 801ad7e:	80b9      	strh	r1, [r7, #4]
 801ad80:	4413      	add	r3, r2
 801ad82:	2201      	movs	r2, #1
 801ad84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801ad88:	4b3d      	ldr	r3, [pc, #244]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ad8a:	681a      	ldr	r2, [r3, #0]
 801ad8c:	88bb      	ldrh	r3, [r7, #4]
 801ad8e:	1c59      	adds	r1, r3, #1
 801ad90:	80b9      	strh	r1, [r7, #4]
 801ad92:	4413      	add	r3, r2
 801ad94:	223d      	movs	r2, #61	; 0x3d
 801ad96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801ad9a:	4b39      	ldr	r3, [pc, #228]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ad9c:	681a      	ldr	r2, [r3, #0]
 801ad9e:	88bb      	ldrh	r3, [r7, #4]
 801ada0:	1c59      	adds	r1, r3, #1
 801ada2:	80b9      	strh	r1, [r7, #4]
 801ada4:	4413      	add	r3, r2
 801ada6:	2207      	movs	r2, #7
 801ada8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801adac:	4b34      	ldr	r3, [pc, #208]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801adae:	681a      	ldr	r2, [r3, #0]
 801adb0:	88bb      	ldrh	r3, [r7, #4]
 801adb2:	1c59      	adds	r1, r3, #1
 801adb4:	80b9      	strh	r1, [r7, #4]
 801adb6:	4413      	add	r3, r2
 801adb8:	2201      	movs	r2, #1
 801adba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801adbe:	4b30      	ldr	r3, [pc, #192]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801adc0:	681a      	ldr	r2, [r3, #0]
 801adc2:	88bb      	ldrh	r3, [r7, #4]
 801adc4:	1c59      	adds	r1, r3, #1
 801adc6:	80b9      	strh	r1, [r7, #4]
 801adc8:	4618      	mov	r0, r3
 801adca:	4b2e      	ldr	r3, [pc, #184]	; (801ae84 <send_DHCP_DISCOVER+0x174>)
 801adcc:	7819      	ldrb	r1, [r3, #0]
 801adce:	1813      	adds	r3, r2, r0
 801add0:	460a      	mov	r2, r1
 801add2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801add6:	4b2a      	ldr	r3, [pc, #168]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801add8:	681a      	ldr	r2, [r3, #0]
 801adda:	88bb      	ldrh	r3, [r7, #4]
 801addc:	1c59      	adds	r1, r3, #1
 801adde:	80b9      	strh	r1, [r7, #4]
 801ade0:	4618      	mov	r0, r3
 801ade2:	4b28      	ldr	r3, [pc, #160]	; (801ae84 <send_DHCP_DISCOVER+0x174>)
 801ade4:	7859      	ldrb	r1, [r3, #1]
 801ade6:	1813      	adds	r3, r2, r0
 801ade8:	460a      	mov	r2, r1
 801adea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801adee:	4b24      	ldr	r3, [pc, #144]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801adf0:	681a      	ldr	r2, [r3, #0]
 801adf2:	88bb      	ldrh	r3, [r7, #4]
 801adf4:	1c59      	adds	r1, r3, #1
 801adf6:	80b9      	strh	r1, [r7, #4]
 801adf8:	4618      	mov	r0, r3
 801adfa:	4b22      	ldr	r3, [pc, #136]	; (801ae84 <send_DHCP_DISCOVER+0x174>)
 801adfc:	7899      	ldrb	r1, [r3, #2]
 801adfe:	1813      	adds	r3, r2, r0
 801ae00:	460a      	mov	r2, r1
 801ae02:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801ae06:	4b1e      	ldr	r3, [pc, #120]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ae08:	681a      	ldr	r2, [r3, #0]
 801ae0a:	88bb      	ldrh	r3, [r7, #4]
 801ae0c:	1c59      	adds	r1, r3, #1
 801ae0e:	80b9      	strh	r1, [r7, #4]
 801ae10:	4618      	mov	r0, r3
 801ae12:	4b1c      	ldr	r3, [pc, #112]	; (801ae84 <send_DHCP_DISCOVER+0x174>)
 801ae14:	78d9      	ldrb	r1, [r3, #3]
 801ae16:	1813      	adds	r3, r2, r0
 801ae18:	460a      	mov	r2, r1
 801ae1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801ae1e:	4b18      	ldr	r3, [pc, #96]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ae20:	681a      	ldr	r2, [r3, #0]
 801ae22:	88bb      	ldrh	r3, [r7, #4]
 801ae24:	1c59      	adds	r1, r3, #1
 801ae26:	80b9      	strh	r1, [r7, #4]
 801ae28:	4618      	mov	r0, r3
 801ae2a:	4b16      	ldr	r3, [pc, #88]	; (801ae84 <send_DHCP_DISCOVER+0x174>)
 801ae2c:	7919      	ldrb	r1, [r3, #4]
 801ae2e:	1813      	adds	r3, r2, r0
 801ae30:	460a      	mov	r2, r1
 801ae32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801ae36:	4b12      	ldr	r3, [pc, #72]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ae38:	681a      	ldr	r2, [r3, #0]
 801ae3a:	88bb      	ldrh	r3, [r7, #4]
 801ae3c:	1c59      	adds	r1, r3, #1
 801ae3e:	80b9      	strh	r1, [r7, #4]
 801ae40:	4618      	mov	r0, r3
 801ae42:	4b10      	ldr	r3, [pc, #64]	; (801ae84 <send_DHCP_DISCOVER+0x174>)
 801ae44:	7959      	ldrb	r1, [r3, #5]
 801ae46:	1813      	adds	r3, r2, r0
 801ae48:	460a      	mov	r2, r1
 801ae4a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801ae4e:	4b0c      	ldr	r3, [pc, #48]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ae50:	681a      	ldr	r2, [r3, #0]
 801ae52:	88bb      	ldrh	r3, [r7, #4]
 801ae54:	1c59      	adds	r1, r3, #1
 801ae56:	80b9      	strh	r1, [r7, #4]
 801ae58:	4413      	add	r3, r2
 801ae5a:	220c      	movs	r2, #12
 801ae5c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801ae60:	4b07      	ldr	r3, [pc, #28]	; (801ae80 <send_DHCP_DISCOVER+0x170>)
 801ae62:	681a      	ldr	r2, [r3, #0]
 801ae64:	88bb      	ldrh	r3, [r7, #4]
 801ae66:	1c59      	adds	r1, r3, #1
 801ae68:	80b9      	strh	r1, [r7, #4]
 801ae6a:	4413      	add	r3, r2
 801ae6c:	2200      	movs	r2, #0
 801ae6e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ae72:	2300      	movs	r3, #0
 801ae74:	80fb      	strh	r3, [r7, #6]
 801ae76:	e017      	b.n	801aea8 <send_DHCP_DISCOVER+0x198>
 801ae78:	200009a8 	.word	0x200009a8
 801ae7c:	200009ac 	.word	0x200009ac
 801ae80:	200009d0 	.word	0x200009d0
 801ae84:	200009d4 	.word	0x200009d4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801ae88:	88f9      	ldrh	r1, [r7, #6]
 801ae8a:	4b80      	ldr	r3, [pc, #512]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801ae8c:	681a      	ldr	r2, [r3, #0]
 801ae8e:	88bb      	ldrh	r3, [r7, #4]
 801ae90:	1c58      	adds	r0, r3, #1
 801ae92:	80b8      	strh	r0, [r7, #4]
 801ae94:	4618      	mov	r0, r3
 801ae96:	4b7e      	ldr	r3, [pc, #504]	; (801b090 <send_DHCP_DISCOVER+0x380>)
 801ae98:	5c59      	ldrb	r1, [r3, r1]
 801ae9a:	1813      	adds	r3, r2, r0
 801ae9c:	460a      	mov	r2, r1
 801ae9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801aea2:	88fb      	ldrh	r3, [r7, #6]
 801aea4:	3301      	adds	r3, #1
 801aea6:	80fb      	strh	r3, [r7, #6]
 801aea8:	88fb      	ldrh	r3, [r7, #6]
 801aeaa:	4a79      	ldr	r2, [pc, #484]	; (801b090 <send_DHCP_DISCOVER+0x380>)
 801aeac:	5cd3      	ldrb	r3, [r2, r3]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d1ea      	bne.n	801ae88 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801aeb2:	4b78      	ldr	r3, [pc, #480]	; (801b094 <send_DHCP_DISCOVER+0x384>)
 801aeb4:	78db      	ldrb	r3, [r3, #3]
 801aeb6:	091b      	lsrs	r3, r3, #4
 801aeb8:	b2da      	uxtb	r2, r3
 801aeba:	4b74      	ldr	r3, [pc, #464]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801aebc:	681c      	ldr	r4, [r3, #0]
 801aebe:	88bb      	ldrh	r3, [r7, #4]
 801aec0:	1c59      	adds	r1, r3, #1
 801aec2:	80b9      	strh	r1, [r7, #4]
 801aec4:	461d      	mov	r5, r3
 801aec6:	4610      	mov	r0, r2
 801aec8:	f001 f9c4 	bl	801c254 <NibbleToHex>
 801aecc:	4603      	mov	r3, r0
 801aece:	461a      	mov	r2, r3
 801aed0:	1963      	adds	r3, r4, r5
 801aed2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801aed6:	4b6f      	ldr	r3, [pc, #444]	; (801b094 <send_DHCP_DISCOVER+0x384>)
 801aed8:	78da      	ldrb	r2, [r3, #3]
 801aeda:	4b6c      	ldr	r3, [pc, #432]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801aedc:	681c      	ldr	r4, [r3, #0]
 801aede:	88bb      	ldrh	r3, [r7, #4]
 801aee0:	1c59      	adds	r1, r3, #1
 801aee2:	80b9      	strh	r1, [r7, #4]
 801aee4:	461d      	mov	r5, r3
 801aee6:	4610      	mov	r0, r2
 801aee8:	f001 f9b4 	bl	801c254 <NibbleToHex>
 801aeec:	4603      	mov	r3, r0
 801aeee:	461a      	mov	r2, r3
 801aef0:	1963      	adds	r3, r4, r5
 801aef2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801aef6:	4b67      	ldr	r3, [pc, #412]	; (801b094 <send_DHCP_DISCOVER+0x384>)
 801aef8:	791b      	ldrb	r3, [r3, #4]
 801aefa:	091b      	lsrs	r3, r3, #4
 801aefc:	b2da      	uxtb	r2, r3
 801aefe:	4b63      	ldr	r3, [pc, #396]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801af00:	681c      	ldr	r4, [r3, #0]
 801af02:	88bb      	ldrh	r3, [r7, #4]
 801af04:	1c59      	adds	r1, r3, #1
 801af06:	80b9      	strh	r1, [r7, #4]
 801af08:	461d      	mov	r5, r3
 801af0a:	4610      	mov	r0, r2
 801af0c:	f001 f9a2 	bl	801c254 <NibbleToHex>
 801af10:	4603      	mov	r3, r0
 801af12:	461a      	mov	r2, r3
 801af14:	1963      	adds	r3, r4, r5
 801af16:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801af1a:	4b5e      	ldr	r3, [pc, #376]	; (801b094 <send_DHCP_DISCOVER+0x384>)
 801af1c:	791a      	ldrb	r2, [r3, #4]
 801af1e:	4b5b      	ldr	r3, [pc, #364]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801af20:	681c      	ldr	r4, [r3, #0]
 801af22:	88bb      	ldrh	r3, [r7, #4]
 801af24:	1c59      	adds	r1, r3, #1
 801af26:	80b9      	strh	r1, [r7, #4]
 801af28:	461d      	mov	r5, r3
 801af2a:	4610      	mov	r0, r2
 801af2c:	f001 f992 	bl	801c254 <NibbleToHex>
 801af30:	4603      	mov	r3, r0
 801af32:	461a      	mov	r2, r3
 801af34:	1963      	adds	r3, r4, r5
 801af36:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801af3a:	4b56      	ldr	r3, [pc, #344]	; (801b094 <send_DHCP_DISCOVER+0x384>)
 801af3c:	795b      	ldrb	r3, [r3, #5]
 801af3e:	091b      	lsrs	r3, r3, #4
 801af40:	b2da      	uxtb	r2, r3
 801af42:	4b52      	ldr	r3, [pc, #328]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801af44:	681c      	ldr	r4, [r3, #0]
 801af46:	88bb      	ldrh	r3, [r7, #4]
 801af48:	1c59      	adds	r1, r3, #1
 801af4a:	80b9      	strh	r1, [r7, #4]
 801af4c:	461d      	mov	r5, r3
 801af4e:	4610      	mov	r0, r2
 801af50:	f001 f980 	bl	801c254 <NibbleToHex>
 801af54:	4603      	mov	r3, r0
 801af56:	461a      	mov	r2, r3
 801af58:	1963      	adds	r3, r4, r5
 801af5a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801af5e:	4b4d      	ldr	r3, [pc, #308]	; (801b094 <send_DHCP_DISCOVER+0x384>)
 801af60:	795a      	ldrb	r2, [r3, #5]
 801af62:	4b4a      	ldr	r3, [pc, #296]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801af64:	681c      	ldr	r4, [r3, #0]
 801af66:	88bb      	ldrh	r3, [r7, #4]
 801af68:	1c59      	adds	r1, r3, #1
 801af6a:	80b9      	strh	r1, [r7, #4]
 801af6c:	461d      	mov	r5, r3
 801af6e:	4610      	mov	r0, r2
 801af70:	f001 f970 	bl	801c254 <NibbleToHex>
 801af74:	4603      	mov	r3, r0
 801af76:	461a      	mov	r2, r3
 801af78:	1963      	adds	r3, r4, r5
 801af7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801af7e:	88fb      	ldrh	r3, [r7, #6]
 801af80:	b2d9      	uxtb	r1, r3
 801af82:	4b42      	ldr	r3, [pc, #264]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801af84:	681a      	ldr	r2, [r3, #0]
 801af86:	88b8      	ldrh	r0, [r7, #4]
 801af88:	88fb      	ldrh	r3, [r7, #6]
 801af8a:	3307      	adds	r3, #7
 801af8c:	1ac3      	subs	r3, r0, r3
 801af8e:	3106      	adds	r1, #6
 801af90:	b2c9      	uxtb	r1, r1
 801af92:	4413      	add	r3, r2
 801af94:	460a      	mov	r2, r1
 801af96:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801af9a:	4b3c      	ldr	r3, [pc, #240]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801af9c:	681a      	ldr	r2, [r3, #0]
 801af9e:	88bb      	ldrh	r3, [r7, #4]
 801afa0:	1c59      	adds	r1, r3, #1
 801afa2:	80b9      	strh	r1, [r7, #4]
 801afa4:	4413      	add	r3, r2
 801afa6:	2237      	movs	r2, #55	; 0x37
 801afa8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801afac:	4b37      	ldr	r3, [pc, #220]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801afae:	681a      	ldr	r2, [r3, #0]
 801afb0:	88bb      	ldrh	r3, [r7, #4]
 801afb2:	1c59      	adds	r1, r3, #1
 801afb4:	80b9      	strh	r1, [r7, #4]
 801afb6:	4413      	add	r3, r2
 801afb8:	2206      	movs	r2, #6
 801afba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801afbe:	4b33      	ldr	r3, [pc, #204]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801afc0:	681a      	ldr	r2, [r3, #0]
 801afc2:	88bb      	ldrh	r3, [r7, #4]
 801afc4:	1c59      	adds	r1, r3, #1
 801afc6:	80b9      	strh	r1, [r7, #4]
 801afc8:	4413      	add	r3, r2
 801afca:	2201      	movs	r2, #1
 801afcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801afd0:	4b2e      	ldr	r3, [pc, #184]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801afd2:	681a      	ldr	r2, [r3, #0]
 801afd4:	88bb      	ldrh	r3, [r7, #4]
 801afd6:	1c59      	adds	r1, r3, #1
 801afd8:	80b9      	strh	r1, [r7, #4]
 801afda:	4413      	add	r3, r2
 801afdc:	2203      	movs	r2, #3
 801afde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801afe2:	4b2a      	ldr	r3, [pc, #168]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801afe4:	681a      	ldr	r2, [r3, #0]
 801afe6:	88bb      	ldrh	r3, [r7, #4]
 801afe8:	1c59      	adds	r1, r3, #1
 801afea:	80b9      	strh	r1, [r7, #4]
 801afec:	4413      	add	r3, r2
 801afee:	2206      	movs	r2, #6
 801aff0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801aff4:	4b25      	ldr	r3, [pc, #148]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801aff6:	681a      	ldr	r2, [r3, #0]
 801aff8:	88bb      	ldrh	r3, [r7, #4]
 801affa:	1c59      	adds	r1, r3, #1
 801affc:	80b9      	strh	r1, [r7, #4]
 801affe:	4413      	add	r3, r2
 801b000:	220f      	movs	r2, #15
 801b002:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b006:	4b21      	ldr	r3, [pc, #132]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801b008:	681a      	ldr	r2, [r3, #0]
 801b00a:	88bb      	ldrh	r3, [r7, #4]
 801b00c:	1c59      	adds	r1, r3, #1
 801b00e:	80b9      	strh	r1, [r7, #4]
 801b010:	4413      	add	r3, r2
 801b012:	223a      	movs	r2, #58	; 0x3a
 801b014:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b018:	4b1c      	ldr	r3, [pc, #112]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801b01a:	681a      	ldr	r2, [r3, #0]
 801b01c:	88bb      	ldrh	r3, [r7, #4]
 801b01e:	1c59      	adds	r1, r3, #1
 801b020:	80b9      	strh	r1, [r7, #4]
 801b022:	4413      	add	r3, r2
 801b024:	223b      	movs	r2, #59	; 0x3b
 801b026:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b02a:	4b18      	ldr	r3, [pc, #96]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801b02c:	681a      	ldr	r2, [r3, #0]
 801b02e:	88bb      	ldrh	r3, [r7, #4]
 801b030:	1c59      	adds	r1, r3, #1
 801b032:	80b9      	strh	r1, [r7, #4]
 801b034:	4413      	add	r3, r2
 801b036:	22ff      	movs	r2, #255	; 0xff
 801b038:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b03c:	88bb      	ldrh	r3, [r7, #4]
 801b03e:	80fb      	strh	r3, [r7, #6]
 801b040:	e009      	b.n	801b056 <send_DHCP_DISCOVER+0x346>
 801b042:	4b12      	ldr	r3, [pc, #72]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801b044:	681a      	ldr	r2, [r3, #0]
 801b046:	88fb      	ldrh	r3, [r7, #6]
 801b048:	4413      	add	r3, r2
 801b04a:	2200      	movs	r2, #0
 801b04c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801b050:	88fb      	ldrh	r3, [r7, #6]
 801b052:	3301      	adds	r3, #1
 801b054:	80fb      	strh	r3, [r7, #6]
 801b056:	88fb      	ldrh	r3, [r7, #6]
 801b058:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b05c:	d3f1      	bcc.n	801b042 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801b05e:	23ff      	movs	r3, #255	; 0xff
 801b060:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801b062:	23ff      	movs	r3, #255	; 0xff
 801b064:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801b066:	23ff      	movs	r3, #255	; 0xff
 801b068:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801b06a:	23ff      	movs	r3, #255	; 0xff
 801b06c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b06e:	4b0a      	ldr	r3, [pc, #40]	; (801b098 <send_DHCP_DISCOVER+0x388>)
 801b070:	7818      	ldrb	r0, [r3, #0]
 801b072:	4b06      	ldr	r3, [pc, #24]	; (801b08c <send_DHCP_DISCOVER+0x37c>)
 801b074:	6819      	ldr	r1, [r3, #0]
 801b076:	463b      	mov	r3, r7
 801b078:	2243      	movs	r2, #67	; 0x43
 801b07a:	9200      	str	r2, [sp, #0]
 801b07c:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b080:	f7fe fbfc 	bl	801987c <sendto>
}
 801b084:	bf00      	nop
 801b086:	3708      	adds	r7, #8
 801b088:	46bd      	mov	sp, r7
 801b08a:	bdb0      	pop	{r4, r5, r7, pc}
 801b08c:	200009d0 	.word	0x200009d0
 801b090:	200000f8 	.word	0x200000f8
 801b094:	200009d4 	.word	0x200009d4
 801b098:	200009a5 	.word	0x200009a5

0801b09c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801b09c:	b5b0      	push	{r4, r5, r7, lr}
 801b09e:	b086      	sub	sp, #24
 801b0a0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801b0a6:	f7ff fd3d 	bl	801ab24 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801b0aa:	4b1b      	ldr	r3, [pc, #108]	; (801b118 <send_DHCP_REQUEST+0x7c>)
 801b0ac:	f993 3000 	ldrsb.w	r3, [r3]
 801b0b0:	2b03      	cmp	r3, #3
 801b0b2:	d004      	beq.n	801b0be <send_DHCP_REQUEST+0x22>
 801b0b4:	4b18      	ldr	r3, [pc, #96]	; (801b118 <send_DHCP_REQUEST+0x7c>)
 801b0b6:	f993 3000 	ldrsb.w	r3, [r3]
 801b0ba:	2b04      	cmp	r3, #4
 801b0bc:	d134      	bne.n	801b128 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b0be:	4b17      	ldr	r3, [pc, #92]	; (801b11c <send_DHCP_REQUEST+0x80>)
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	330a      	adds	r3, #10
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b0c8:	4b14      	ldr	r3, [pc, #80]	; (801b11c <send_DHCP_REQUEST+0x80>)
 801b0ca:	681b      	ldr	r3, [r3, #0]
 801b0cc:	330a      	adds	r3, #10
 801b0ce:	3301      	adds	r3, #1
 801b0d0:	2200      	movs	r2, #0
 801b0d2:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801b0d4:	4b11      	ldr	r3, [pc, #68]	; (801b11c <send_DHCP_REQUEST+0x80>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4a11      	ldr	r2, [pc, #68]	; (801b120 <send_DHCP_REQUEST+0x84>)
 801b0da:	7812      	ldrb	r2, [r2, #0]
 801b0dc:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801b0de:	4b0f      	ldr	r3, [pc, #60]	; (801b11c <send_DHCP_REQUEST+0x80>)
 801b0e0:	681b      	ldr	r3, [r3, #0]
 801b0e2:	4a0f      	ldr	r2, [pc, #60]	; (801b120 <send_DHCP_REQUEST+0x84>)
 801b0e4:	7852      	ldrb	r2, [r2, #1]
 801b0e6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801b0e8:	4b0c      	ldr	r3, [pc, #48]	; (801b11c <send_DHCP_REQUEST+0x80>)
 801b0ea:	681b      	ldr	r3, [r3, #0]
 801b0ec:	4a0c      	ldr	r2, [pc, #48]	; (801b120 <send_DHCP_REQUEST+0x84>)
 801b0ee:	7892      	ldrb	r2, [r2, #2]
 801b0f0:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801b0f2:	4b0a      	ldr	r3, [pc, #40]	; (801b11c <send_DHCP_REQUEST+0x80>)
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	4a0a      	ldr	r2, [pc, #40]	; (801b120 <send_DHCP_REQUEST+0x84>)
 801b0f8:	78d2      	ldrb	r2, [r2, #3]
 801b0fa:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801b0fc:	4b09      	ldr	r3, [pc, #36]	; (801b124 <send_DHCP_REQUEST+0x88>)
 801b0fe:	781b      	ldrb	r3, [r3, #0]
 801b100:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801b102:	4b08      	ldr	r3, [pc, #32]	; (801b124 <send_DHCP_REQUEST+0x88>)
 801b104:	785b      	ldrb	r3, [r3, #1]
 801b106:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801b108:	4b06      	ldr	r3, [pc, #24]	; (801b124 <send_DHCP_REQUEST+0x88>)
 801b10a:	789b      	ldrb	r3, [r3, #2]
 801b10c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801b10e:	4b05      	ldr	r3, [pc, #20]	; (801b124 <send_DHCP_REQUEST+0x88>)
 801b110:	78db      	ldrb	r3, [r3, #3]
 801b112:	71fb      	strb	r3, [r7, #7]
 801b114:	e010      	b.n	801b138 <send_DHCP_REQUEST+0x9c>
 801b116:	bf00      	nop
 801b118:	200009c4 	.word	0x200009c4
 801b11c:	200009d0 	.word	0x200009d0
 801b120:	200009b4 	.word	0x200009b4
 801b124:	200009a8 	.word	0x200009a8
   }
   else
   {
   	ip[0] = 255;
 801b128:	23ff      	movs	r3, #255	; 0xff
 801b12a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801b12c:	23ff      	movs	r3, #255	; 0xff
 801b12e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801b130:	23ff      	movs	r3, #255	; 0xff
 801b132:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801b134:	23ff      	movs	r3, #255	; 0xff
 801b136:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b138:	2304      	movs	r3, #4
 801b13a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b13c:	4b8d      	ldr	r3, [pc, #564]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b13e:	681a      	ldr	r2, [r3, #0]
 801b140:	897b      	ldrh	r3, [r7, #10]
 801b142:	1c59      	adds	r1, r3, #1
 801b144:	8179      	strh	r1, [r7, #10]
 801b146:	4413      	add	r3, r2
 801b148:	2235      	movs	r2, #53	; 0x35
 801b14a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b14e:	4b89      	ldr	r3, [pc, #548]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b150:	681a      	ldr	r2, [r3, #0]
 801b152:	897b      	ldrh	r3, [r7, #10]
 801b154:	1c59      	adds	r1, r3, #1
 801b156:	8179      	strh	r1, [r7, #10]
 801b158:	4413      	add	r3, r2
 801b15a:	2201      	movs	r2, #1
 801b15c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801b160:	4b84      	ldr	r3, [pc, #528]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b162:	681a      	ldr	r2, [r3, #0]
 801b164:	897b      	ldrh	r3, [r7, #10]
 801b166:	1c59      	adds	r1, r3, #1
 801b168:	8179      	strh	r1, [r7, #10]
 801b16a:	4413      	add	r3, r2
 801b16c:	2203      	movs	r2, #3
 801b16e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b172:	4b80      	ldr	r3, [pc, #512]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b174:	681a      	ldr	r2, [r3, #0]
 801b176:	897b      	ldrh	r3, [r7, #10]
 801b178:	1c59      	adds	r1, r3, #1
 801b17a:	8179      	strh	r1, [r7, #10]
 801b17c:	4413      	add	r3, r2
 801b17e:	223d      	movs	r2, #61	; 0x3d
 801b180:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b184:	4b7b      	ldr	r3, [pc, #492]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b186:	681a      	ldr	r2, [r3, #0]
 801b188:	897b      	ldrh	r3, [r7, #10]
 801b18a:	1c59      	adds	r1, r3, #1
 801b18c:	8179      	strh	r1, [r7, #10]
 801b18e:	4413      	add	r3, r2
 801b190:	2207      	movs	r2, #7
 801b192:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b196:	4b77      	ldr	r3, [pc, #476]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b198:	681a      	ldr	r2, [r3, #0]
 801b19a:	897b      	ldrh	r3, [r7, #10]
 801b19c:	1c59      	adds	r1, r3, #1
 801b19e:	8179      	strh	r1, [r7, #10]
 801b1a0:	4413      	add	r3, r2
 801b1a2:	2201      	movs	r2, #1
 801b1a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b1a8:	4b72      	ldr	r3, [pc, #456]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b1aa:	681a      	ldr	r2, [r3, #0]
 801b1ac:	897b      	ldrh	r3, [r7, #10]
 801b1ae:	1c59      	adds	r1, r3, #1
 801b1b0:	8179      	strh	r1, [r7, #10]
 801b1b2:	4618      	mov	r0, r3
 801b1b4:	4b70      	ldr	r3, [pc, #448]	; (801b378 <send_DHCP_REQUEST+0x2dc>)
 801b1b6:	7819      	ldrb	r1, [r3, #0]
 801b1b8:	1813      	adds	r3, r2, r0
 801b1ba:	460a      	mov	r2, r1
 801b1bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b1c0:	4b6c      	ldr	r3, [pc, #432]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b1c2:	681a      	ldr	r2, [r3, #0]
 801b1c4:	897b      	ldrh	r3, [r7, #10]
 801b1c6:	1c59      	adds	r1, r3, #1
 801b1c8:	8179      	strh	r1, [r7, #10]
 801b1ca:	4618      	mov	r0, r3
 801b1cc:	4b6a      	ldr	r3, [pc, #424]	; (801b378 <send_DHCP_REQUEST+0x2dc>)
 801b1ce:	7859      	ldrb	r1, [r3, #1]
 801b1d0:	1813      	adds	r3, r2, r0
 801b1d2:	460a      	mov	r2, r1
 801b1d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b1d8:	4b66      	ldr	r3, [pc, #408]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b1da:	681a      	ldr	r2, [r3, #0]
 801b1dc:	897b      	ldrh	r3, [r7, #10]
 801b1de:	1c59      	adds	r1, r3, #1
 801b1e0:	8179      	strh	r1, [r7, #10]
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	4b64      	ldr	r3, [pc, #400]	; (801b378 <send_DHCP_REQUEST+0x2dc>)
 801b1e6:	7899      	ldrb	r1, [r3, #2]
 801b1e8:	1813      	adds	r3, r2, r0
 801b1ea:	460a      	mov	r2, r1
 801b1ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b1f0:	4b60      	ldr	r3, [pc, #384]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b1f2:	681a      	ldr	r2, [r3, #0]
 801b1f4:	897b      	ldrh	r3, [r7, #10]
 801b1f6:	1c59      	adds	r1, r3, #1
 801b1f8:	8179      	strh	r1, [r7, #10]
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	4b5e      	ldr	r3, [pc, #376]	; (801b378 <send_DHCP_REQUEST+0x2dc>)
 801b1fe:	78d9      	ldrb	r1, [r3, #3]
 801b200:	1813      	adds	r3, r2, r0
 801b202:	460a      	mov	r2, r1
 801b204:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b208:	4b5a      	ldr	r3, [pc, #360]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b20a:	681a      	ldr	r2, [r3, #0]
 801b20c:	897b      	ldrh	r3, [r7, #10]
 801b20e:	1c59      	adds	r1, r3, #1
 801b210:	8179      	strh	r1, [r7, #10]
 801b212:	4618      	mov	r0, r3
 801b214:	4b58      	ldr	r3, [pc, #352]	; (801b378 <send_DHCP_REQUEST+0x2dc>)
 801b216:	7919      	ldrb	r1, [r3, #4]
 801b218:	1813      	adds	r3, r2, r0
 801b21a:	460a      	mov	r2, r1
 801b21c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b220:	4b54      	ldr	r3, [pc, #336]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b222:	681a      	ldr	r2, [r3, #0]
 801b224:	897b      	ldrh	r3, [r7, #10]
 801b226:	1c59      	adds	r1, r3, #1
 801b228:	8179      	strh	r1, [r7, #10]
 801b22a:	4618      	mov	r0, r3
 801b22c:	4b52      	ldr	r3, [pc, #328]	; (801b378 <send_DHCP_REQUEST+0x2dc>)
 801b22e:	7959      	ldrb	r1, [r3, #5]
 801b230:	1813      	adds	r3, r2, r0
 801b232:	460a      	mov	r2, r1
 801b234:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801b238:	79fb      	ldrb	r3, [r7, #7]
 801b23a:	2bff      	cmp	r3, #255	; 0xff
 801b23c:	f040 8084 	bne.w	801b348 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b240:	4b4c      	ldr	r3, [pc, #304]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b242:	681a      	ldr	r2, [r3, #0]
 801b244:	897b      	ldrh	r3, [r7, #10]
 801b246:	1c59      	adds	r1, r3, #1
 801b248:	8179      	strh	r1, [r7, #10]
 801b24a:	4413      	add	r3, r2
 801b24c:	2232      	movs	r2, #50	; 0x32
 801b24e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b252:	4b48      	ldr	r3, [pc, #288]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b254:	681a      	ldr	r2, [r3, #0]
 801b256:	897b      	ldrh	r3, [r7, #10]
 801b258:	1c59      	adds	r1, r3, #1
 801b25a:	8179      	strh	r1, [r7, #10]
 801b25c:	4413      	add	r3, r2
 801b25e:	2204      	movs	r2, #4
 801b260:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b264:	4b43      	ldr	r3, [pc, #268]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b266:	681a      	ldr	r2, [r3, #0]
 801b268:	897b      	ldrh	r3, [r7, #10]
 801b26a:	1c59      	adds	r1, r3, #1
 801b26c:	8179      	strh	r1, [r7, #10]
 801b26e:	4618      	mov	r0, r3
 801b270:	4b42      	ldr	r3, [pc, #264]	; (801b37c <send_DHCP_REQUEST+0x2e0>)
 801b272:	7819      	ldrb	r1, [r3, #0]
 801b274:	1813      	adds	r3, r2, r0
 801b276:	460a      	mov	r2, r1
 801b278:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b27c:	4b3d      	ldr	r3, [pc, #244]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b27e:	681a      	ldr	r2, [r3, #0]
 801b280:	897b      	ldrh	r3, [r7, #10]
 801b282:	1c59      	adds	r1, r3, #1
 801b284:	8179      	strh	r1, [r7, #10]
 801b286:	4618      	mov	r0, r3
 801b288:	4b3c      	ldr	r3, [pc, #240]	; (801b37c <send_DHCP_REQUEST+0x2e0>)
 801b28a:	7859      	ldrb	r1, [r3, #1]
 801b28c:	1813      	adds	r3, r2, r0
 801b28e:	460a      	mov	r2, r1
 801b290:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b294:	4b37      	ldr	r3, [pc, #220]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	897b      	ldrh	r3, [r7, #10]
 801b29a:	1c59      	adds	r1, r3, #1
 801b29c:	8179      	strh	r1, [r7, #10]
 801b29e:	4618      	mov	r0, r3
 801b2a0:	4b36      	ldr	r3, [pc, #216]	; (801b37c <send_DHCP_REQUEST+0x2e0>)
 801b2a2:	7899      	ldrb	r1, [r3, #2]
 801b2a4:	1813      	adds	r3, r2, r0
 801b2a6:	460a      	mov	r2, r1
 801b2a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b2ac:	4b31      	ldr	r3, [pc, #196]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b2ae:	681a      	ldr	r2, [r3, #0]
 801b2b0:	897b      	ldrh	r3, [r7, #10]
 801b2b2:	1c59      	adds	r1, r3, #1
 801b2b4:	8179      	strh	r1, [r7, #10]
 801b2b6:	4618      	mov	r0, r3
 801b2b8:	4b30      	ldr	r3, [pc, #192]	; (801b37c <send_DHCP_REQUEST+0x2e0>)
 801b2ba:	78d9      	ldrb	r1, [r3, #3]
 801b2bc:	1813      	adds	r3, r2, r0
 801b2be:	460a      	mov	r2, r1
 801b2c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b2c4:	4b2b      	ldr	r3, [pc, #172]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b2c6:	681a      	ldr	r2, [r3, #0]
 801b2c8:	897b      	ldrh	r3, [r7, #10]
 801b2ca:	1c59      	adds	r1, r3, #1
 801b2cc:	8179      	strh	r1, [r7, #10]
 801b2ce:	4413      	add	r3, r2
 801b2d0:	2236      	movs	r2, #54	; 0x36
 801b2d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b2d6:	4b27      	ldr	r3, [pc, #156]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b2d8:	681a      	ldr	r2, [r3, #0]
 801b2da:	897b      	ldrh	r3, [r7, #10]
 801b2dc:	1c59      	adds	r1, r3, #1
 801b2de:	8179      	strh	r1, [r7, #10]
 801b2e0:	4413      	add	r3, r2
 801b2e2:	2204      	movs	r2, #4
 801b2e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b2e8:	4b22      	ldr	r3, [pc, #136]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b2ea:	681a      	ldr	r2, [r3, #0]
 801b2ec:	897b      	ldrh	r3, [r7, #10]
 801b2ee:	1c59      	adds	r1, r3, #1
 801b2f0:	8179      	strh	r1, [r7, #10]
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	4b22      	ldr	r3, [pc, #136]	; (801b380 <send_DHCP_REQUEST+0x2e4>)
 801b2f6:	7819      	ldrb	r1, [r3, #0]
 801b2f8:	1813      	adds	r3, r2, r0
 801b2fa:	460a      	mov	r2, r1
 801b2fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b300:	4b1c      	ldr	r3, [pc, #112]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b302:	681a      	ldr	r2, [r3, #0]
 801b304:	897b      	ldrh	r3, [r7, #10]
 801b306:	1c59      	adds	r1, r3, #1
 801b308:	8179      	strh	r1, [r7, #10]
 801b30a:	4618      	mov	r0, r3
 801b30c:	4b1c      	ldr	r3, [pc, #112]	; (801b380 <send_DHCP_REQUEST+0x2e4>)
 801b30e:	7859      	ldrb	r1, [r3, #1]
 801b310:	1813      	adds	r3, r2, r0
 801b312:	460a      	mov	r2, r1
 801b314:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b318:	4b16      	ldr	r3, [pc, #88]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b31a:	681a      	ldr	r2, [r3, #0]
 801b31c:	897b      	ldrh	r3, [r7, #10]
 801b31e:	1c59      	adds	r1, r3, #1
 801b320:	8179      	strh	r1, [r7, #10]
 801b322:	4618      	mov	r0, r3
 801b324:	4b16      	ldr	r3, [pc, #88]	; (801b380 <send_DHCP_REQUEST+0x2e4>)
 801b326:	7899      	ldrb	r1, [r3, #2]
 801b328:	1813      	adds	r3, r2, r0
 801b32a:	460a      	mov	r2, r1
 801b32c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b330:	4b10      	ldr	r3, [pc, #64]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b332:	681a      	ldr	r2, [r3, #0]
 801b334:	897b      	ldrh	r3, [r7, #10]
 801b336:	1c59      	adds	r1, r3, #1
 801b338:	8179      	strh	r1, [r7, #10]
 801b33a:	4618      	mov	r0, r3
 801b33c:	4b10      	ldr	r3, [pc, #64]	; (801b380 <send_DHCP_REQUEST+0x2e4>)
 801b33e:	78d9      	ldrb	r1, [r3, #3]
 801b340:	1813      	adds	r3, r2, r0
 801b342:	460a      	mov	r2, r1
 801b344:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801b348:	4b0a      	ldr	r3, [pc, #40]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b34a:	681a      	ldr	r2, [r3, #0]
 801b34c:	897b      	ldrh	r3, [r7, #10]
 801b34e:	1c59      	adds	r1, r3, #1
 801b350:	8179      	strh	r1, [r7, #10]
 801b352:	4413      	add	r3, r2
 801b354:	220c      	movs	r2, #12
 801b356:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801b35a:	4b06      	ldr	r3, [pc, #24]	; (801b374 <send_DHCP_REQUEST+0x2d8>)
 801b35c:	681a      	ldr	r2, [r3, #0]
 801b35e:	897b      	ldrh	r3, [r7, #10]
 801b360:	1c59      	adds	r1, r3, #1
 801b362:	8179      	strh	r1, [r7, #10]
 801b364:	4413      	add	r3, r2
 801b366:	2200      	movs	r2, #0
 801b368:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b36c:	2300      	movs	r3, #0
 801b36e:	60fb      	str	r3, [r7, #12]
 801b370:	e019      	b.n	801b3a6 <send_DHCP_REQUEST+0x30a>
 801b372:	bf00      	nop
 801b374:	200009d0 	.word	0x200009d0
 801b378:	200009d4 	.word	0x200009d4
 801b37c:	200009b4 	.word	0x200009b4
 801b380:	200009a8 	.word	0x200009a8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801b384:	4b86      	ldr	r3, [pc, #536]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b386:	681a      	ldr	r2, [r3, #0]
 801b388:	897b      	ldrh	r3, [r7, #10]
 801b38a:	1c59      	adds	r1, r3, #1
 801b38c:	8179      	strh	r1, [r7, #10]
 801b38e:	4618      	mov	r0, r3
 801b390:	4984      	ldr	r1, [pc, #528]	; (801b5a4 <send_DHCP_REQUEST+0x508>)
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	440b      	add	r3, r1
 801b396:	7819      	ldrb	r1, [r3, #0]
 801b398:	1813      	adds	r3, r2, r0
 801b39a:	460a      	mov	r2, r1
 801b39c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	3301      	adds	r3, #1
 801b3a4:	60fb      	str	r3, [r7, #12]
 801b3a6:	4a7f      	ldr	r2, [pc, #508]	; (801b5a4 <send_DHCP_REQUEST+0x508>)
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	4413      	add	r3, r2
 801b3ac:	781b      	ldrb	r3, [r3, #0]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d1e8      	bne.n	801b384 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801b3b2:	4b7d      	ldr	r3, [pc, #500]	; (801b5a8 <send_DHCP_REQUEST+0x50c>)
 801b3b4:	78db      	ldrb	r3, [r3, #3]
 801b3b6:	091b      	lsrs	r3, r3, #4
 801b3b8:	b2da      	uxtb	r2, r3
 801b3ba:	4b79      	ldr	r3, [pc, #484]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b3bc:	681c      	ldr	r4, [r3, #0]
 801b3be:	897b      	ldrh	r3, [r7, #10]
 801b3c0:	1c59      	adds	r1, r3, #1
 801b3c2:	8179      	strh	r1, [r7, #10]
 801b3c4:	461d      	mov	r5, r3
 801b3c6:	4610      	mov	r0, r2
 801b3c8:	f000 ff44 	bl	801c254 <NibbleToHex>
 801b3cc:	4603      	mov	r3, r0
 801b3ce:	461a      	mov	r2, r3
 801b3d0:	1963      	adds	r3, r4, r5
 801b3d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801b3d6:	4b74      	ldr	r3, [pc, #464]	; (801b5a8 <send_DHCP_REQUEST+0x50c>)
 801b3d8:	78da      	ldrb	r2, [r3, #3]
 801b3da:	4b71      	ldr	r3, [pc, #452]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b3dc:	681c      	ldr	r4, [r3, #0]
 801b3de:	897b      	ldrh	r3, [r7, #10]
 801b3e0:	1c59      	adds	r1, r3, #1
 801b3e2:	8179      	strh	r1, [r7, #10]
 801b3e4:	461d      	mov	r5, r3
 801b3e6:	4610      	mov	r0, r2
 801b3e8:	f000 ff34 	bl	801c254 <NibbleToHex>
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	461a      	mov	r2, r3
 801b3f0:	1963      	adds	r3, r4, r5
 801b3f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801b3f6:	4b6c      	ldr	r3, [pc, #432]	; (801b5a8 <send_DHCP_REQUEST+0x50c>)
 801b3f8:	791b      	ldrb	r3, [r3, #4]
 801b3fa:	091b      	lsrs	r3, r3, #4
 801b3fc:	b2da      	uxtb	r2, r3
 801b3fe:	4b68      	ldr	r3, [pc, #416]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b400:	681c      	ldr	r4, [r3, #0]
 801b402:	897b      	ldrh	r3, [r7, #10]
 801b404:	1c59      	adds	r1, r3, #1
 801b406:	8179      	strh	r1, [r7, #10]
 801b408:	461d      	mov	r5, r3
 801b40a:	4610      	mov	r0, r2
 801b40c:	f000 ff22 	bl	801c254 <NibbleToHex>
 801b410:	4603      	mov	r3, r0
 801b412:	461a      	mov	r2, r3
 801b414:	1963      	adds	r3, r4, r5
 801b416:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801b41a:	4b63      	ldr	r3, [pc, #396]	; (801b5a8 <send_DHCP_REQUEST+0x50c>)
 801b41c:	791a      	ldrb	r2, [r3, #4]
 801b41e:	4b60      	ldr	r3, [pc, #384]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b420:	681c      	ldr	r4, [r3, #0]
 801b422:	897b      	ldrh	r3, [r7, #10]
 801b424:	1c59      	adds	r1, r3, #1
 801b426:	8179      	strh	r1, [r7, #10]
 801b428:	461d      	mov	r5, r3
 801b42a:	4610      	mov	r0, r2
 801b42c:	f000 ff12 	bl	801c254 <NibbleToHex>
 801b430:	4603      	mov	r3, r0
 801b432:	461a      	mov	r2, r3
 801b434:	1963      	adds	r3, r4, r5
 801b436:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801b43a:	4b5b      	ldr	r3, [pc, #364]	; (801b5a8 <send_DHCP_REQUEST+0x50c>)
 801b43c:	795b      	ldrb	r3, [r3, #5]
 801b43e:	091b      	lsrs	r3, r3, #4
 801b440:	b2da      	uxtb	r2, r3
 801b442:	4b57      	ldr	r3, [pc, #348]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b444:	681c      	ldr	r4, [r3, #0]
 801b446:	897b      	ldrh	r3, [r7, #10]
 801b448:	1c59      	adds	r1, r3, #1
 801b44a:	8179      	strh	r1, [r7, #10]
 801b44c:	461d      	mov	r5, r3
 801b44e:	4610      	mov	r0, r2
 801b450:	f000 ff00 	bl	801c254 <NibbleToHex>
 801b454:	4603      	mov	r3, r0
 801b456:	461a      	mov	r2, r3
 801b458:	1963      	adds	r3, r4, r5
 801b45a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801b45e:	4b52      	ldr	r3, [pc, #328]	; (801b5a8 <send_DHCP_REQUEST+0x50c>)
 801b460:	795a      	ldrb	r2, [r3, #5]
 801b462:	4b4f      	ldr	r3, [pc, #316]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b464:	681c      	ldr	r4, [r3, #0]
 801b466:	897b      	ldrh	r3, [r7, #10]
 801b468:	1c59      	adds	r1, r3, #1
 801b46a:	8179      	strh	r1, [r7, #10]
 801b46c:	461d      	mov	r5, r3
 801b46e:	4610      	mov	r0, r2
 801b470:	f000 fef0 	bl	801c254 <NibbleToHex>
 801b474:	4603      	mov	r3, r0
 801b476:	461a      	mov	r2, r3
 801b478:	1963      	adds	r3, r4, r5
 801b47a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	b2d9      	uxtb	r1, r3
 801b482:	4b47      	ldr	r3, [pc, #284]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b484:	681a      	ldr	r2, [r3, #0]
 801b486:	8978      	ldrh	r0, [r7, #10]
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	3307      	adds	r3, #7
 801b48c:	1ac3      	subs	r3, r0, r3
 801b48e:	3106      	adds	r1, #6
 801b490:	b2c9      	uxtb	r1, r1
 801b492:	4413      	add	r3, r2
 801b494:	460a      	mov	r2, r1
 801b496:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801b49a:	4b41      	ldr	r3, [pc, #260]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b49c:	681a      	ldr	r2, [r3, #0]
 801b49e:	897b      	ldrh	r3, [r7, #10]
 801b4a0:	1c59      	adds	r1, r3, #1
 801b4a2:	8179      	strh	r1, [r7, #10]
 801b4a4:	4413      	add	r3, r2
 801b4a6:	2237      	movs	r2, #55	; 0x37
 801b4a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801b4ac:	4b3c      	ldr	r3, [pc, #240]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b4ae:	681a      	ldr	r2, [r3, #0]
 801b4b0:	897b      	ldrh	r3, [r7, #10]
 801b4b2:	1c59      	adds	r1, r3, #1
 801b4b4:	8179      	strh	r1, [r7, #10]
 801b4b6:	4413      	add	r3, r2
 801b4b8:	2208      	movs	r2, #8
 801b4ba:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b4be:	4b38      	ldr	r3, [pc, #224]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b4c0:	681a      	ldr	r2, [r3, #0]
 801b4c2:	897b      	ldrh	r3, [r7, #10]
 801b4c4:	1c59      	adds	r1, r3, #1
 801b4c6:	8179      	strh	r1, [r7, #10]
 801b4c8:	4413      	add	r3, r2
 801b4ca:	2201      	movs	r2, #1
 801b4cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b4d0:	4b33      	ldr	r3, [pc, #204]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	897b      	ldrh	r3, [r7, #10]
 801b4d6:	1c59      	adds	r1, r3, #1
 801b4d8:	8179      	strh	r1, [r7, #10]
 801b4da:	4413      	add	r3, r2
 801b4dc:	2203      	movs	r2, #3
 801b4de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b4e2:	4b2f      	ldr	r3, [pc, #188]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b4e4:	681a      	ldr	r2, [r3, #0]
 801b4e6:	897b      	ldrh	r3, [r7, #10]
 801b4e8:	1c59      	adds	r1, r3, #1
 801b4ea:	8179      	strh	r1, [r7, #10]
 801b4ec:	4413      	add	r3, r2
 801b4ee:	2206      	movs	r2, #6
 801b4f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b4f4:	4b2a      	ldr	r3, [pc, #168]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b4f6:	681a      	ldr	r2, [r3, #0]
 801b4f8:	897b      	ldrh	r3, [r7, #10]
 801b4fa:	1c59      	adds	r1, r3, #1
 801b4fc:	8179      	strh	r1, [r7, #10]
 801b4fe:	4413      	add	r3, r2
 801b500:	220f      	movs	r2, #15
 801b502:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b506:	4b26      	ldr	r3, [pc, #152]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b508:	681a      	ldr	r2, [r3, #0]
 801b50a:	897b      	ldrh	r3, [r7, #10]
 801b50c:	1c59      	adds	r1, r3, #1
 801b50e:	8179      	strh	r1, [r7, #10]
 801b510:	4413      	add	r3, r2
 801b512:	223a      	movs	r2, #58	; 0x3a
 801b514:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b518:	4b21      	ldr	r3, [pc, #132]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b51a:	681a      	ldr	r2, [r3, #0]
 801b51c:	897b      	ldrh	r3, [r7, #10]
 801b51e:	1c59      	adds	r1, r3, #1
 801b520:	8179      	strh	r1, [r7, #10]
 801b522:	4413      	add	r3, r2
 801b524:	223b      	movs	r2, #59	; 0x3b
 801b526:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801b52a:	4b1d      	ldr	r3, [pc, #116]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b52c:	681a      	ldr	r2, [r3, #0]
 801b52e:	897b      	ldrh	r3, [r7, #10]
 801b530:	1c59      	adds	r1, r3, #1
 801b532:	8179      	strh	r1, [r7, #10]
 801b534:	4413      	add	r3, r2
 801b536:	221f      	movs	r2, #31
 801b538:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801b53c:	4b18      	ldr	r3, [pc, #96]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b53e:	681a      	ldr	r2, [r3, #0]
 801b540:	897b      	ldrh	r3, [r7, #10]
 801b542:	1c59      	adds	r1, r3, #1
 801b544:	8179      	strh	r1, [r7, #10]
 801b546:	4413      	add	r3, r2
 801b548:	2221      	movs	r2, #33	; 0x21
 801b54a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b54e:	4b14      	ldr	r3, [pc, #80]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b550:	681a      	ldr	r2, [r3, #0]
 801b552:	897b      	ldrh	r3, [r7, #10]
 801b554:	1c59      	adds	r1, r3, #1
 801b556:	8179      	strh	r1, [r7, #10]
 801b558:	4413      	add	r3, r2
 801b55a:	22ff      	movs	r2, #255	; 0xff
 801b55c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b560:	897b      	ldrh	r3, [r7, #10]
 801b562:	60fb      	str	r3, [r7, #12]
 801b564:	e009      	b.n	801b57a <send_DHCP_REQUEST+0x4de>
 801b566:	4b0e      	ldr	r3, [pc, #56]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b568:	681a      	ldr	r2, [r3, #0]
 801b56a:	68fb      	ldr	r3, [r7, #12]
 801b56c:	4413      	add	r3, r2
 801b56e:	33ec      	adds	r3, #236	; 0xec
 801b570:	2200      	movs	r2, #0
 801b572:	701a      	strb	r2, [r3, #0]
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	3301      	adds	r3, #1
 801b578:	60fb      	str	r3, [r7, #12]
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b580:	dbf1      	blt.n	801b566 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b582:	4b0a      	ldr	r3, [pc, #40]	; (801b5ac <send_DHCP_REQUEST+0x510>)
 801b584:	7818      	ldrb	r0, [r3, #0]
 801b586:	4b06      	ldr	r3, [pc, #24]	; (801b5a0 <send_DHCP_REQUEST+0x504>)
 801b588:	6819      	ldr	r1, [r3, #0]
 801b58a:	1d3b      	adds	r3, r7, #4
 801b58c:	2243      	movs	r2, #67	; 0x43
 801b58e:	9200      	str	r2, [sp, #0]
 801b590:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b594:	f7fe f972 	bl	801987c <sendto>

}
 801b598:	bf00      	nop
 801b59a:	3710      	adds	r7, #16
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bdb0      	pop	{r4, r5, r7, pc}
 801b5a0:	200009d0 	.word	0x200009d0
 801b5a4:	200000f8 	.word	0x200000f8
 801b5a8:	200009d4 	.word	0x200009d4
 801b5ac:	200009a5 	.word	0x200009a5

0801b5b0 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b086      	sub	sp, #24
 801b5b4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801b5ba:	f7ff fab3 	bl	801ab24 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b5be:	2304      	movs	r3, #4
 801b5c0:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b5c2:	4b9f      	ldr	r3, [pc, #636]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b5c4:	681b      	ldr	r3, [r3, #0]
 801b5c6:	330a      	adds	r3, #10
 801b5c8:	2200      	movs	r2, #0
 801b5ca:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b5cc:	4b9c      	ldr	r3, [pc, #624]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	330a      	adds	r3, #10
 801b5d2:	3301      	adds	r3, #1
 801b5d4:	2200      	movs	r2, #0
 801b5d6:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b5d8:	4b99      	ldr	r3, [pc, #612]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b5da:	681a      	ldr	r2, [r3, #0]
 801b5dc:	897b      	ldrh	r3, [r7, #10]
 801b5de:	1c59      	adds	r1, r3, #1
 801b5e0:	8179      	strh	r1, [r7, #10]
 801b5e2:	4413      	add	r3, r2
 801b5e4:	2235      	movs	r2, #53	; 0x35
 801b5e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b5ea:	4b95      	ldr	r3, [pc, #596]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b5ec:	681a      	ldr	r2, [r3, #0]
 801b5ee:	897b      	ldrh	r3, [r7, #10]
 801b5f0:	1c59      	adds	r1, r3, #1
 801b5f2:	8179      	strh	r1, [r7, #10]
 801b5f4:	4413      	add	r3, r2
 801b5f6:	2201      	movs	r2, #1
 801b5f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801b5fc:	4b90      	ldr	r3, [pc, #576]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b5fe:	681a      	ldr	r2, [r3, #0]
 801b600:	897b      	ldrh	r3, [r7, #10]
 801b602:	1c59      	adds	r1, r3, #1
 801b604:	8179      	strh	r1, [r7, #10]
 801b606:	4413      	add	r3, r2
 801b608:	2204      	movs	r2, #4
 801b60a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b60e:	4b8c      	ldr	r3, [pc, #560]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b610:	681a      	ldr	r2, [r3, #0]
 801b612:	897b      	ldrh	r3, [r7, #10]
 801b614:	1c59      	adds	r1, r3, #1
 801b616:	8179      	strh	r1, [r7, #10]
 801b618:	4413      	add	r3, r2
 801b61a:	223d      	movs	r2, #61	; 0x3d
 801b61c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b620:	4b87      	ldr	r3, [pc, #540]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b622:	681a      	ldr	r2, [r3, #0]
 801b624:	897b      	ldrh	r3, [r7, #10]
 801b626:	1c59      	adds	r1, r3, #1
 801b628:	8179      	strh	r1, [r7, #10]
 801b62a:	4413      	add	r3, r2
 801b62c:	2207      	movs	r2, #7
 801b62e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b632:	4b83      	ldr	r3, [pc, #524]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b634:	681a      	ldr	r2, [r3, #0]
 801b636:	897b      	ldrh	r3, [r7, #10]
 801b638:	1c59      	adds	r1, r3, #1
 801b63a:	8179      	strh	r1, [r7, #10]
 801b63c:	4413      	add	r3, r2
 801b63e:	2201      	movs	r2, #1
 801b640:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b644:	4b7e      	ldr	r3, [pc, #504]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b646:	681a      	ldr	r2, [r3, #0]
 801b648:	897b      	ldrh	r3, [r7, #10]
 801b64a:	1c59      	adds	r1, r3, #1
 801b64c:	8179      	strh	r1, [r7, #10]
 801b64e:	4618      	mov	r0, r3
 801b650:	4b7c      	ldr	r3, [pc, #496]	; (801b844 <send_DHCP_DECLINE+0x294>)
 801b652:	7819      	ldrb	r1, [r3, #0]
 801b654:	1813      	adds	r3, r2, r0
 801b656:	460a      	mov	r2, r1
 801b658:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b65c:	4b78      	ldr	r3, [pc, #480]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b65e:	681a      	ldr	r2, [r3, #0]
 801b660:	897b      	ldrh	r3, [r7, #10]
 801b662:	1c59      	adds	r1, r3, #1
 801b664:	8179      	strh	r1, [r7, #10]
 801b666:	4618      	mov	r0, r3
 801b668:	4b76      	ldr	r3, [pc, #472]	; (801b844 <send_DHCP_DECLINE+0x294>)
 801b66a:	7859      	ldrb	r1, [r3, #1]
 801b66c:	1813      	adds	r3, r2, r0
 801b66e:	460a      	mov	r2, r1
 801b670:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b674:	4b72      	ldr	r3, [pc, #456]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b676:	681a      	ldr	r2, [r3, #0]
 801b678:	897b      	ldrh	r3, [r7, #10]
 801b67a:	1c59      	adds	r1, r3, #1
 801b67c:	8179      	strh	r1, [r7, #10]
 801b67e:	4618      	mov	r0, r3
 801b680:	4b70      	ldr	r3, [pc, #448]	; (801b844 <send_DHCP_DECLINE+0x294>)
 801b682:	7899      	ldrb	r1, [r3, #2]
 801b684:	1813      	adds	r3, r2, r0
 801b686:	460a      	mov	r2, r1
 801b688:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b68c:	4b6c      	ldr	r3, [pc, #432]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b68e:	681a      	ldr	r2, [r3, #0]
 801b690:	897b      	ldrh	r3, [r7, #10]
 801b692:	1c59      	adds	r1, r3, #1
 801b694:	8179      	strh	r1, [r7, #10]
 801b696:	4618      	mov	r0, r3
 801b698:	4b6a      	ldr	r3, [pc, #424]	; (801b844 <send_DHCP_DECLINE+0x294>)
 801b69a:	78d9      	ldrb	r1, [r3, #3]
 801b69c:	1813      	adds	r3, r2, r0
 801b69e:	460a      	mov	r2, r1
 801b6a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b6a4:	4b66      	ldr	r3, [pc, #408]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b6a6:	681a      	ldr	r2, [r3, #0]
 801b6a8:	897b      	ldrh	r3, [r7, #10]
 801b6aa:	1c59      	adds	r1, r3, #1
 801b6ac:	8179      	strh	r1, [r7, #10]
 801b6ae:	4618      	mov	r0, r3
 801b6b0:	4b64      	ldr	r3, [pc, #400]	; (801b844 <send_DHCP_DECLINE+0x294>)
 801b6b2:	7919      	ldrb	r1, [r3, #4]
 801b6b4:	1813      	adds	r3, r2, r0
 801b6b6:	460a      	mov	r2, r1
 801b6b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b6bc:	4b60      	ldr	r3, [pc, #384]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b6be:	681a      	ldr	r2, [r3, #0]
 801b6c0:	897b      	ldrh	r3, [r7, #10]
 801b6c2:	1c59      	adds	r1, r3, #1
 801b6c4:	8179      	strh	r1, [r7, #10]
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	4b5e      	ldr	r3, [pc, #376]	; (801b844 <send_DHCP_DECLINE+0x294>)
 801b6ca:	7959      	ldrb	r1, [r3, #5]
 801b6cc:	1813      	adds	r3, r2, r0
 801b6ce:	460a      	mov	r2, r1
 801b6d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b6d4:	4b5a      	ldr	r3, [pc, #360]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b6d6:	681a      	ldr	r2, [r3, #0]
 801b6d8:	897b      	ldrh	r3, [r7, #10]
 801b6da:	1c59      	adds	r1, r3, #1
 801b6dc:	8179      	strh	r1, [r7, #10]
 801b6de:	4413      	add	r3, r2
 801b6e0:	2232      	movs	r2, #50	; 0x32
 801b6e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b6e6:	4b56      	ldr	r3, [pc, #344]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b6e8:	681a      	ldr	r2, [r3, #0]
 801b6ea:	897b      	ldrh	r3, [r7, #10]
 801b6ec:	1c59      	adds	r1, r3, #1
 801b6ee:	8179      	strh	r1, [r7, #10]
 801b6f0:	4413      	add	r3, r2
 801b6f2:	2204      	movs	r2, #4
 801b6f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b6f8:	4b51      	ldr	r3, [pc, #324]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b6fa:	681a      	ldr	r2, [r3, #0]
 801b6fc:	897b      	ldrh	r3, [r7, #10]
 801b6fe:	1c59      	adds	r1, r3, #1
 801b700:	8179      	strh	r1, [r7, #10]
 801b702:	4618      	mov	r0, r3
 801b704:	4b50      	ldr	r3, [pc, #320]	; (801b848 <send_DHCP_DECLINE+0x298>)
 801b706:	7819      	ldrb	r1, [r3, #0]
 801b708:	1813      	adds	r3, r2, r0
 801b70a:	460a      	mov	r2, r1
 801b70c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b710:	4b4b      	ldr	r3, [pc, #300]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b712:	681a      	ldr	r2, [r3, #0]
 801b714:	897b      	ldrh	r3, [r7, #10]
 801b716:	1c59      	adds	r1, r3, #1
 801b718:	8179      	strh	r1, [r7, #10]
 801b71a:	4618      	mov	r0, r3
 801b71c:	4b4a      	ldr	r3, [pc, #296]	; (801b848 <send_DHCP_DECLINE+0x298>)
 801b71e:	7859      	ldrb	r1, [r3, #1]
 801b720:	1813      	adds	r3, r2, r0
 801b722:	460a      	mov	r2, r1
 801b724:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b728:	4b45      	ldr	r3, [pc, #276]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b72a:	681a      	ldr	r2, [r3, #0]
 801b72c:	897b      	ldrh	r3, [r7, #10]
 801b72e:	1c59      	adds	r1, r3, #1
 801b730:	8179      	strh	r1, [r7, #10]
 801b732:	4618      	mov	r0, r3
 801b734:	4b44      	ldr	r3, [pc, #272]	; (801b848 <send_DHCP_DECLINE+0x298>)
 801b736:	7899      	ldrb	r1, [r3, #2]
 801b738:	1813      	adds	r3, r2, r0
 801b73a:	460a      	mov	r2, r1
 801b73c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b740:	4b3f      	ldr	r3, [pc, #252]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b742:	681a      	ldr	r2, [r3, #0]
 801b744:	897b      	ldrh	r3, [r7, #10]
 801b746:	1c59      	adds	r1, r3, #1
 801b748:	8179      	strh	r1, [r7, #10]
 801b74a:	4618      	mov	r0, r3
 801b74c:	4b3e      	ldr	r3, [pc, #248]	; (801b848 <send_DHCP_DECLINE+0x298>)
 801b74e:	78d9      	ldrb	r1, [r3, #3]
 801b750:	1813      	adds	r3, r2, r0
 801b752:	460a      	mov	r2, r1
 801b754:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b758:	4b39      	ldr	r3, [pc, #228]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b75a:	681a      	ldr	r2, [r3, #0]
 801b75c:	897b      	ldrh	r3, [r7, #10]
 801b75e:	1c59      	adds	r1, r3, #1
 801b760:	8179      	strh	r1, [r7, #10]
 801b762:	4413      	add	r3, r2
 801b764:	2236      	movs	r2, #54	; 0x36
 801b766:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b76a:	4b35      	ldr	r3, [pc, #212]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b76c:	681a      	ldr	r2, [r3, #0]
 801b76e:	897b      	ldrh	r3, [r7, #10]
 801b770:	1c59      	adds	r1, r3, #1
 801b772:	8179      	strh	r1, [r7, #10]
 801b774:	4413      	add	r3, r2
 801b776:	2204      	movs	r2, #4
 801b778:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b77c:	4b30      	ldr	r3, [pc, #192]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b77e:	681a      	ldr	r2, [r3, #0]
 801b780:	897b      	ldrh	r3, [r7, #10]
 801b782:	1c59      	adds	r1, r3, #1
 801b784:	8179      	strh	r1, [r7, #10]
 801b786:	4618      	mov	r0, r3
 801b788:	4b30      	ldr	r3, [pc, #192]	; (801b84c <send_DHCP_DECLINE+0x29c>)
 801b78a:	7819      	ldrb	r1, [r3, #0]
 801b78c:	1813      	adds	r3, r2, r0
 801b78e:	460a      	mov	r2, r1
 801b790:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b794:	4b2a      	ldr	r3, [pc, #168]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b796:	681a      	ldr	r2, [r3, #0]
 801b798:	897b      	ldrh	r3, [r7, #10]
 801b79a:	1c59      	adds	r1, r3, #1
 801b79c:	8179      	strh	r1, [r7, #10]
 801b79e:	4618      	mov	r0, r3
 801b7a0:	4b2a      	ldr	r3, [pc, #168]	; (801b84c <send_DHCP_DECLINE+0x29c>)
 801b7a2:	7859      	ldrb	r1, [r3, #1]
 801b7a4:	1813      	adds	r3, r2, r0
 801b7a6:	460a      	mov	r2, r1
 801b7a8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b7ac:	4b24      	ldr	r3, [pc, #144]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b7ae:	681a      	ldr	r2, [r3, #0]
 801b7b0:	897b      	ldrh	r3, [r7, #10]
 801b7b2:	1c59      	adds	r1, r3, #1
 801b7b4:	8179      	strh	r1, [r7, #10]
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	4b24      	ldr	r3, [pc, #144]	; (801b84c <send_DHCP_DECLINE+0x29c>)
 801b7ba:	7899      	ldrb	r1, [r3, #2]
 801b7bc:	1813      	adds	r3, r2, r0
 801b7be:	460a      	mov	r2, r1
 801b7c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b7c4:	4b1e      	ldr	r3, [pc, #120]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b7c6:	681a      	ldr	r2, [r3, #0]
 801b7c8:	897b      	ldrh	r3, [r7, #10]
 801b7ca:	1c59      	adds	r1, r3, #1
 801b7cc:	8179      	strh	r1, [r7, #10]
 801b7ce:	4618      	mov	r0, r3
 801b7d0:	4b1e      	ldr	r3, [pc, #120]	; (801b84c <send_DHCP_DECLINE+0x29c>)
 801b7d2:	78d9      	ldrb	r1, [r3, #3]
 801b7d4:	1813      	adds	r3, r2, r0
 801b7d6:	460a      	mov	r2, r1
 801b7d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b7dc:	4b18      	ldr	r3, [pc, #96]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b7de:	681a      	ldr	r2, [r3, #0]
 801b7e0:	897b      	ldrh	r3, [r7, #10]
 801b7e2:	1c59      	adds	r1, r3, #1
 801b7e4:	8179      	strh	r1, [r7, #10]
 801b7e6:	4413      	add	r3, r2
 801b7e8:	22ff      	movs	r2, #255	; 0xff
 801b7ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b7ee:	897b      	ldrh	r3, [r7, #10]
 801b7f0:	60fb      	str	r3, [r7, #12]
 801b7f2:	e009      	b.n	801b808 <send_DHCP_DECLINE+0x258>
 801b7f4:	4b12      	ldr	r3, [pc, #72]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b7f6:	681a      	ldr	r2, [r3, #0]
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	4413      	add	r3, r2
 801b7fc:	33ec      	adds	r3, #236	; 0xec
 801b7fe:	2200      	movs	r2, #0
 801b800:	701a      	strb	r2, [r3, #0]
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	3301      	adds	r3, #1
 801b806:	60fb      	str	r3, [r7, #12]
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b80e:	dbf1      	blt.n	801b7f4 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b810:	23ff      	movs	r3, #255	; 0xff
 801b812:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b814:	23ff      	movs	r3, #255	; 0xff
 801b816:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b818:	23ff      	movs	r3, #255	; 0xff
 801b81a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b81c:	23ff      	movs	r3, #255	; 0xff
 801b81e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b820:	4b0b      	ldr	r3, [pc, #44]	; (801b850 <send_DHCP_DECLINE+0x2a0>)
 801b822:	7818      	ldrb	r0, [r3, #0]
 801b824:	4b06      	ldr	r3, [pc, #24]	; (801b840 <send_DHCP_DECLINE+0x290>)
 801b826:	6819      	ldr	r1, [r3, #0]
 801b828:	1d3b      	adds	r3, r7, #4
 801b82a:	2243      	movs	r2, #67	; 0x43
 801b82c:	9200      	str	r2, [sp, #0]
 801b82e:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b832:	f7fe f823 	bl	801987c <sendto>
}
 801b836:	bf00      	nop
 801b838:	3710      	adds	r7, #16
 801b83a:	46bd      	mov	sp, r7
 801b83c:	bd80      	pop	{r7, pc}
 801b83e:	bf00      	nop
 801b840:	200009d0 	.word	0x200009d0
 801b844:	200009d4 	.word	0x200009d4
 801b848:	200009b4 	.word	0x200009b4
 801b84c:	200009a8 	.word	0x200009a8
 801b850:	200009a5 	.word	0x200009a5

0801b854 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b854:	b590      	push	{r4, r7, lr}
 801b856:	b089      	sub	sp, #36	; 0x24
 801b858:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b85a:	2300      	movs	r3, #0
 801b85c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b85e:	4ba1      	ldr	r3, [pc, #644]	; (801bae4 <parseDHCPMSG+0x290>)
 801b860:	781b      	ldrb	r3, [r3, #0]
 801b862:	4618      	mov	r0, r3
 801b864:	f7fd f9e1 	bl	8018c2a <getSn_RX_RSR>
 801b868:	4603      	mov	r3, r0
 801b86a:	823b      	strh	r3, [r7, #16]
 801b86c:	8a3b      	ldrh	r3, [r7, #16]
 801b86e:	2b00      	cmp	r3, #0
 801b870:	d011      	beq.n	801b896 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b872:	4b9c      	ldr	r3, [pc, #624]	; (801bae4 <parseDHCPMSG+0x290>)
 801b874:	7818      	ldrb	r0, [r3, #0]
 801b876:	4b9c      	ldr	r3, [pc, #624]	; (801bae8 <parseDHCPMSG+0x294>)
 801b878:	6819      	ldr	r1, [r3, #0]
 801b87a:	1d3c      	adds	r4, r7, #4
 801b87c:	8a3a      	ldrh	r2, [r7, #16]
 801b87e:	1cbb      	adds	r3, r7, #2
 801b880:	9300      	str	r3, [sp, #0]
 801b882:	4623      	mov	r3, r4
 801b884:	f7fe f930 	bl	8019ae8 <recvfrom>
 801b888:	4603      	mov	r3, r0
 801b88a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b88c:	887b      	ldrh	r3, [r7, #2]
 801b88e:	2b43      	cmp	r3, #67	; 0x43
 801b890:	f040 81ed 	bne.w	801bc6e <parseDHCPMSG+0x41a>
 801b894:	e001      	b.n	801b89a <parseDHCPMSG+0x46>
   else return 0;
 801b896:	2300      	movs	r3, #0
 801b898:	e1eb      	b.n	801bc72 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b89a:	4b93      	ldr	r3, [pc, #588]	; (801bae8 <parseDHCPMSG+0x294>)
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	7f1a      	ldrb	r2, [r3, #28]
 801b8a0:	4b92      	ldr	r3, [pc, #584]	; (801baec <parseDHCPMSG+0x298>)
 801b8a2:	781b      	ldrb	r3, [r3, #0]
 801b8a4:	429a      	cmp	r2, r3
 801b8a6:	d124      	bne.n	801b8f2 <parseDHCPMSG+0x9e>
 801b8a8:	4b8f      	ldr	r3, [pc, #572]	; (801bae8 <parseDHCPMSG+0x294>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	7f5a      	ldrb	r2, [r3, #29]
 801b8ae:	4b8f      	ldr	r3, [pc, #572]	; (801baec <parseDHCPMSG+0x298>)
 801b8b0:	785b      	ldrb	r3, [r3, #1]
 801b8b2:	429a      	cmp	r2, r3
 801b8b4:	d11d      	bne.n	801b8f2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b8b6:	4b8c      	ldr	r3, [pc, #560]	; (801bae8 <parseDHCPMSG+0x294>)
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	7f9a      	ldrb	r2, [r3, #30]
 801b8bc:	4b8b      	ldr	r3, [pc, #556]	; (801baec <parseDHCPMSG+0x298>)
 801b8be:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b8c0:	429a      	cmp	r2, r3
 801b8c2:	d116      	bne.n	801b8f2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b8c4:	4b88      	ldr	r3, [pc, #544]	; (801bae8 <parseDHCPMSG+0x294>)
 801b8c6:	681b      	ldr	r3, [r3, #0]
 801b8c8:	7fda      	ldrb	r2, [r3, #31]
 801b8ca:	4b88      	ldr	r3, [pc, #544]	; (801baec <parseDHCPMSG+0x298>)
 801b8cc:	78db      	ldrb	r3, [r3, #3]
 801b8ce:	429a      	cmp	r2, r3
 801b8d0:	d10f      	bne.n	801b8f2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b8d2:	4b85      	ldr	r3, [pc, #532]	; (801bae8 <parseDHCPMSG+0x294>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b8da:	4b84      	ldr	r3, [pc, #528]	; (801baec <parseDHCPMSG+0x298>)
 801b8dc:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b8de:	429a      	cmp	r2, r3
 801b8e0:	d107      	bne.n	801b8f2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b8e2:	4b81      	ldr	r3, [pc, #516]	; (801bae8 <parseDHCPMSG+0x294>)
 801b8e4:	681b      	ldr	r3, [r3, #0]
 801b8e6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b8ea:	4b80      	ldr	r3, [pc, #512]	; (801baec <parseDHCPMSG+0x298>)
 801b8ec:	795b      	ldrb	r3, [r3, #5]
 801b8ee:	429a      	cmp	r2, r3
 801b8f0:	d001      	beq.n	801b8f6 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	e1bd      	b.n	801bc72 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b8f6:	4b7e      	ldr	r3, [pc, #504]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b8f8:	781b      	ldrb	r3, [r3, #0]
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d10b      	bne.n	801b916 <parseDHCPMSG+0xc2>
 801b8fe:	4b7c      	ldr	r3, [pc, #496]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b900:	785b      	ldrb	r3, [r3, #1]
 801b902:	2b00      	cmp	r3, #0
 801b904:	d107      	bne.n	801b916 <parseDHCPMSG+0xc2>
 801b906:	4b7a      	ldr	r3, [pc, #488]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b908:	789b      	ldrb	r3, [r3, #2]
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d103      	bne.n	801b916 <parseDHCPMSG+0xc2>
 801b90e:	4b78      	ldr	r3, [pc, #480]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b910:	78db      	ldrb	r3, [r3, #3]
 801b912:	2b00      	cmp	r3, #0
 801b914:	d029      	beq.n	801b96a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b916:	793a      	ldrb	r2, [r7, #4]
 801b918:	4b75      	ldr	r3, [pc, #468]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b91a:	781b      	ldrb	r3, [r3, #0]
 801b91c:	429a      	cmp	r2, r3
 801b91e:	d10e      	bne.n	801b93e <parseDHCPMSG+0xea>
 801b920:	797a      	ldrb	r2, [r7, #5]
 801b922:	4b73      	ldr	r3, [pc, #460]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b924:	785b      	ldrb	r3, [r3, #1]
 801b926:	429a      	cmp	r2, r3
 801b928:	d109      	bne.n	801b93e <parseDHCPMSG+0xea>
 801b92a:	79ba      	ldrb	r2, [r7, #6]
 801b92c:	4b70      	ldr	r3, [pc, #448]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b92e:	789b      	ldrb	r3, [r3, #2]
 801b930:	429a      	cmp	r2, r3
 801b932:	d104      	bne.n	801b93e <parseDHCPMSG+0xea>
 801b934:	79fa      	ldrb	r2, [r7, #7]
 801b936:	4b6e      	ldr	r3, [pc, #440]	; (801baf0 <parseDHCPMSG+0x29c>)
 801b938:	78db      	ldrb	r3, [r3, #3]
 801b93a:	429a      	cmp	r2, r3
 801b93c:	d015      	beq.n	801b96a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b93e:	793a      	ldrb	r2, [r7, #4]
 801b940:	4b6c      	ldr	r3, [pc, #432]	; (801baf4 <parseDHCPMSG+0x2a0>)
 801b942:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b944:	429a      	cmp	r2, r3
 801b946:	d10e      	bne.n	801b966 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b948:	797a      	ldrb	r2, [r7, #5]
 801b94a:	4b6a      	ldr	r3, [pc, #424]	; (801baf4 <parseDHCPMSG+0x2a0>)
 801b94c:	785b      	ldrb	r3, [r3, #1]
 801b94e:	429a      	cmp	r2, r3
 801b950:	d109      	bne.n	801b966 <parseDHCPMSG+0x112>
 801b952:	79ba      	ldrb	r2, [r7, #6]
 801b954:	4b67      	ldr	r3, [pc, #412]	; (801baf4 <parseDHCPMSG+0x2a0>)
 801b956:	789b      	ldrb	r3, [r3, #2]
 801b958:	429a      	cmp	r2, r3
 801b95a:	d104      	bne.n	801b966 <parseDHCPMSG+0x112>
 801b95c:	79fa      	ldrb	r2, [r7, #7]
 801b95e:	4b65      	ldr	r3, [pc, #404]	; (801baf4 <parseDHCPMSG+0x2a0>)
 801b960:	78db      	ldrb	r3, [r3, #3]
 801b962:	429a      	cmp	r2, r3
 801b964:	d001      	beq.n	801b96a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b966:	2300      	movs	r3, #0
 801b968:	e183      	b.n	801bc72 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b96a:	4b5f      	ldr	r3, [pc, #380]	; (801bae8 <parseDHCPMSG+0x294>)
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b970:	697b      	ldr	r3, [r7, #20]
 801b972:	33f0      	adds	r3, #240	; 0xf0
 801b974:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b976:	8a3b      	ldrh	r3, [r7, #16]
 801b978:	3bf0      	subs	r3, #240	; 0xf0
 801b97a:	697a      	ldr	r2, [r7, #20]
 801b97c:	4413      	add	r3, r2
 801b97e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b980:	e170      	b.n	801bc64 <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b982:	697b      	ldr	r3, [r7, #20]
 801b984:	781b      	ldrb	r3, [r3, #0]
 801b986:	2b36      	cmp	r3, #54	; 0x36
 801b988:	dc76      	bgt.n	801ba78 <parseDHCPMSG+0x224>
 801b98a:	2b00      	cmp	r3, #0
 801b98c:	f2c0 815d 	blt.w	801bc4a <parseDHCPMSG+0x3f6>
 801b990:	2b36      	cmp	r3, #54	; 0x36
 801b992:	f200 815a 	bhi.w	801bc4a <parseDHCPMSG+0x3f6>
 801b996:	a201      	add	r2, pc, #4	; (adr r2, 801b99c <parseDHCPMSG+0x148>)
 801b998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b99c:	0801ba85 	.word	0x0801ba85
 801b9a0:	0801baa5 	.word	0x0801baa5
 801b9a4:	0801bc4b 	.word	0x0801bc4b
 801b9a8:	0801bafd 	.word	0x0801bafd
 801b9ac:	0801bc4b 	.word	0x0801bc4b
 801b9b0:	0801bc4b 	.word	0x0801bc4b
 801b9b4:	0801bb49 	.word	0x0801bb49
 801b9b8:	0801bc4b 	.word	0x0801bc4b
 801b9bc:	0801bc4b 	.word	0x0801bc4b
 801b9c0:	0801bc4b 	.word	0x0801bc4b
 801b9c4:	0801bc4b 	.word	0x0801bc4b
 801b9c8:	0801bc4b 	.word	0x0801bc4b
 801b9cc:	0801bc4b 	.word	0x0801bc4b
 801b9d0:	0801bc4b 	.word	0x0801bc4b
 801b9d4:	0801bc4b 	.word	0x0801bc4b
 801b9d8:	0801bc4b 	.word	0x0801bc4b
 801b9dc:	0801bc4b 	.word	0x0801bc4b
 801b9e0:	0801bc4b 	.word	0x0801bc4b
 801b9e4:	0801bc4b 	.word	0x0801bc4b
 801b9e8:	0801bc4b 	.word	0x0801bc4b
 801b9ec:	0801bc4b 	.word	0x0801bc4b
 801b9f0:	0801bc4b 	.word	0x0801bc4b
 801b9f4:	0801bc4b 	.word	0x0801bc4b
 801b9f8:	0801bc4b 	.word	0x0801bc4b
 801b9fc:	0801bc4b 	.word	0x0801bc4b
 801ba00:	0801bc4b 	.word	0x0801bc4b
 801ba04:	0801bc4b 	.word	0x0801bc4b
 801ba08:	0801bc4b 	.word	0x0801bc4b
 801ba0c:	0801bc4b 	.word	0x0801bc4b
 801ba10:	0801bc4b 	.word	0x0801bc4b
 801ba14:	0801bc4b 	.word	0x0801bc4b
 801ba18:	0801bc4b 	.word	0x0801bc4b
 801ba1c:	0801bc4b 	.word	0x0801bc4b
 801ba20:	0801bc4b 	.word	0x0801bc4b
 801ba24:	0801bc4b 	.word	0x0801bc4b
 801ba28:	0801bc4b 	.word	0x0801bc4b
 801ba2c:	0801bc4b 	.word	0x0801bc4b
 801ba30:	0801bc4b 	.word	0x0801bc4b
 801ba34:	0801bc4b 	.word	0x0801bc4b
 801ba38:	0801bc4b 	.word	0x0801bc4b
 801ba3c:	0801bc4b 	.word	0x0801bc4b
 801ba40:	0801bc4b 	.word	0x0801bc4b
 801ba44:	0801bc4b 	.word	0x0801bc4b
 801ba48:	0801bc4b 	.word	0x0801bc4b
 801ba4c:	0801bc4b 	.word	0x0801bc4b
 801ba50:	0801bc4b 	.word	0x0801bc4b
 801ba54:	0801bc4b 	.word	0x0801bc4b
 801ba58:	0801bc4b 	.word	0x0801bc4b
 801ba5c:	0801bc4b 	.word	0x0801bc4b
 801ba60:	0801bc4b 	.word	0x0801bc4b
 801ba64:	0801bc4b 	.word	0x0801bc4b
 801ba68:	0801bb95 	.word	0x0801bb95
 801ba6c:	0801bc4b 	.word	0x0801bc4b
 801ba70:	0801ba8d 	.word	0x0801ba8d
 801ba74:	0801bbf1 	.word	0x0801bbf1
 801ba78:	2bff      	cmp	r3, #255	; 0xff
 801ba7a:	f040 80e6 	bne.w	801bc4a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801ba7e:	68fb      	ldr	r3, [r7, #12]
 801ba80:	617b      	str	r3, [r7, #20]
   				break;
 801ba82:	e0ef      	b.n	801bc64 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801ba84:	697b      	ldr	r3, [r7, #20]
 801ba86:	3301      	adds	r3, #1
 801ba88:	617b      	str	r3, [r7, #20]
   				break;
 801ba8a:	e0eb      	b.n	801bc64 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801ba8c:	697b      	ldr	r3, [r7, #20]
 801ba8e:	3301      	adds	r3, #1
 801ba90:	617b      	str	r3, [r7, #20]
   				p++;
 801ba92:	697b      	ldr	r3, [r7, #20]
 801ba94:	3301      	adds	r3, #1
 801ba96:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801ba98:	697b      	ldr	r3, [r7, #20]
 801ba9a:	1c5a      	adds	r2, r3, #1
 801ba9c:	617a      	str	r2, [r7, #20]
 801ba9e:	781b      	ldrb	r3, [r3, #0]
 801baa0:	74fb      	strb	r3, [r7, #19]
   				break;
 801baa2:	e0df      	b.n	801bc64 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801baa4:	697b      	ldr	r3, [r7, #20]
 801baa6:	3301      	adds	r3, #1
 801baa8:	617b      	str	r3, [r7, #20]
   				p++;
 801baaa:	697b      	ldr	r3, [r7, #20]
 801baac:	3301      	adds	r3, #1
 801baae:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801bab0:	697b      	ldr	r3, [r7, #20]
 801bab2:	1c5a      	adds	r2, r3, #1
 801bab4:	617a      	str	r2, [r7, #20]
 801bab6:	781a      	ldrb	r2, [r3, #0]
 801bab8:	4b0f      	ldr	r3, [pc, #60]	; (801baf8 <parseDHCPMSG+0x2a4>)
 801baba:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801babc:	697b      	ldr	r3, [r7, #20]
 801babe:	1c5a      	adds	r2, r3, #1
 801bac0:	617a      	str	r2, [r7, #20]
 801bac2:	781a      	ldrb	r2, [r3, #0]
 801bac4:	4b0c      	ldr	r3, [pc, #48]	; (801baf8 <parseDHCPMSG+0x2a4>)
 801bac6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	1c5a      	adds	r2, r3, #1
 801bacc:	617a      	str	r2, [r7, #20]
 801bace:	781a      	ldrb	r2, [r3, #0]
 801bad0:	4b09      	ldr	r3, [pc, #36]	; (801baf8 <parseDHCPMSG+0x2a4>)
 801bad2:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801bad4:	697b      	ldr	r3, [r7, #20]
 801bad6:	1c5a      	adds	r2, r3, #1
 801bad8:	617a      	str	r2, [r7, #20]
 801bada:	781a      	ldrb	r2, [r3, #0]
 801badc:	4b06      	ldr	r3, [pc, #24]	; (801baf8 <parseDHCPMSG+0x2a4>)
 801bade:	70da      	strb	r2, [r3, #3]
   				break;
 801bae0:	e0c0      	b.n	801bc64 <parseDHCPMSG+0x410>
 801bae2:	bf00      	nop
 801bae4:	200009a5 	.word	0x200009a5
 801bae8:	200009d0 	.word	0x200009d0
 801baec:	200009d4 	.word	0x200009d4
 801baf0:	200009a8 	.word	0x200009a8
 801baf4:	200009ac 	.word	0x200009ac
 801baf8:	200009bc 	.word	0x200009bc
   			case routersOnSubnet :
   				p++;
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	3301      	adds	r3, #1
 801bb00:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	1c5a      	adds	r2, r3, #1
 801bb06:	617a      	str	r2, [r7, #20]
 801bb08:	781b      	ldrb	r3, [r3, #0]
 801bb0a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801bb0c:	697b      	ldr	r3, [r7, #20]
 801bb0e:	1c5a      	adds	r2, r3, #1
 801bb10:	617a      	str	r2, [r7, #20]
 801bb12:	781a      	ldrb	r2, [r3, #0]
 801bb14:	4b59      	ldr	r3, [pc, #356]	; (801bc7c <parseDHCPMSG+0x428>)
 801bb16:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801bb18:	697b      	ldr	r3, [r7, #20]
 801bb1a:	1c5a      	adds	r2, r3, #1
 801bb1c:	617a      	str	r2, [r7, #20]
 801bb1e:	781a      	ldrb	r2, [r3, #0]
 801bb20:	4b56      	ldr	r3, [pc, #344]	; (801bc7c <parseDHCPMSG+0x428>)
 801bb22:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801bb24:	697b      	ldr	r3, [r7, #20]
 801bb26:	1c5a      	adds	r2, r3, #1
 801bb28:	617a      	str	r2, [r7, #20]
 801bb2a:	781a      	ldrb	r2, [r3, #0]
 801bb2c:	4b53      	ldr	r3, [pc, #332]	; (801bc7c <parseDHCPMSG+0x428>)
 801bb2e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801bb30:	697b      	ldr	r3, [r7, #20]
 801bb32:	1c5a      	adds	r2, r3, #1
 801bb34:	617a      	str	r2, [r7, #20]
 801bb36:	781a      	ldrb	r2, [r3, #0]
 801bb38:	4b50      	ldr	r3, [pc, #320]	; (801bc7c <parseDHCPMSG+0x428>)
 801bb3a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801bb3c:	7afb      	ldrb	r3, [r7, #11]
 801bb3e:	3b04      	subs	r3, #4
 801bb40:	697a      	ldr	r2, [r7, #20]
 801bb42:	4413      	add	r3, r2
 801bb44:	617b      	str	r3, [r7, #20]
   				break;
 801bb46:	e08d      	b.n	801bc64 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801bb48:	697b      	ldr	r3, [r7, #20]
 801bb4a:	3301      	adds	r3, #1
 801bb4c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801bb4e:	697b      	ldr	r3, [r7, #20]
 801bb50:	1c5a      	adds	r2, r3, #1
 801bb52:	617a      	str	r2, [r7, #20]
 801bb54:	781b      	ldrb	r3, [r3, #0]
 801bb56:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801bb58:	697b      	ldr	r3, [r7, #20]
 801bb5a:	1c5a      	adds	r2, r3, #1
 801bb5c:	617a      	str	r2, [r7, #20]
 801bb5e:	781a      	ldrb	r2, [r3, #0]
 801bb60:	4b47      	ldr	r3, [pc, #284]	; (801bc80 <parseDHCPMSG+0x42c>)
 801bb62:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801bb64:	697b      	ldr	r3, [r7, #20]
 801bb66:	1c5a      	adds	r2, r3, #1
 801bb68:	617a      	str	r2, [r7, #20]
 801bb6a:	781a      	ldrb	r2, [r3, #0]
 801bb6c:	4b44      	ldr	r3, [pc, #272]	; (801bc80 <parseDHCPMSG+0x42c>)
 801bb6e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801bb70:	697b      	ldr	r3, [r7, #20]
 801bb72:	1c5a      	adds	r2, r3, #1
 801bb74:	617a      	str	r2, [r7, #20]
 801bb76:	781a      	ldrb	r2, [r3, #0]
 801bb78:	4b41      	ldr	r3, [pc, #260]	; (801bc80 <parseDHCPMSG+0x42c>)
 801bb7a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801bb7c:	697b      	ldr	r3, [r7, #20]
 801bb7e:	1c5a      	adds	r2, r3, #1
 801bb80:	617a      	str	r2, [r7, #20]
 801bb82:	781a      	ldrb	r2, [r3, #0]
 801bb84:	4b3e      	ldr	r3, [pc, #248]	; (801bc80 <parseDHCPMSG+0x42c>)
 801bb86:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801bb88:	7afb      	ldrb	r3, [r7, #11]
 801bb8a:	3b04      	subs	r3, #4
 801bb8c:	697a      	ldr	r2, [r7, #20]
 801bb8e:	4413      	add	r3, r2
 801bb90:	617b      	str	r3, [r7, #20]
   				break;
 801bb92:	e067      	b.n	801bc64 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801bb94:	697b      	ldr	r3, [r7, #20]
 801bb96:	3301      	adds	r3, #1
 801bb98:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bb9a:	697b      	ldr	r3, [r7, #20]
 801bb9c:	1c5a      	adds	r2, r3, #1
 801bb9e:	617a      	str	r2, [r7, #20]
 801bba0:	781b      	ldrb	r3, [r3, #0]
 801bba2:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801bba4:	697b      	ldr	r3, [r7, #20]
 801bba6:	1c5a      	adds	r2, r3, #1
 801bba8:	617a      	str	r2, [r7, #20]
 801bbaa:	781b      	ldrb	r3, [r3, #0]
 801bbac:	461a      	mov	r2, r3
 801bbae:	4b35      	ldr	r3, [pc, #212]	; (801bc84 <parseDHCPMSG+0x430>)
 801bbb0:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bbb2:	4b34      	ldr	r3, [pc, #208]	; (801bc84 <parseDHCPMSG+0x430>)
 801bbb4:	681b      	ldr	r3, [r3, #0]
 801bbb6:	021a      	lsls	r2, r3, #8
 801bbb8:	697b      	ldr	r3, [r7, #20]
 801bbba:	1c59      	adds	r1, r3, #1
 801bbbc:	6179      	str	r1, [r7, #20]
 801bbbe:	781b      	ldrb	r3, [r3, #0]
 801bbc0:	4413      	add	r3, r2
 801bbc2:	4a30      	ldr	r2, [pc, #192]	; (801bc84 <parseDHCPMSG+0x430>)
 801bbc4:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bbc6:	4b2f      	ldr	r3, [pc, #188]	; (801bc84 <parseDHCPMSG+0x430>)
 801bbc8:	681b      	ldr	r3, [r3, #0]
 801bbca:	021a      	lsls	r2, r3, #8
 801bbcc:	697b      	ldr	r3, [r7, #20]
 801bbce:	1c59      	adds	r1, r3, #1
 801bbd0:	6179      	str	r1, [r7, #20]
 801bbd2:	781b      	ldrb	r3, [r3, #0]
 801bbd4:	4413      	add	r3, r2
 801bbd6:	4a2b      	ldr	r2, [pc, #172]	; (801bc84 <parseDHCPMSG+0x430>)
 801bbd8:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bbda:	4b2a      	ldr	r3, [pc, #168]	; (801bc84 <parseDHCPMSG+0x430>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	021a      	lsls	r2, r3, #8
 801bbe0:	697b      	ldr	r3, [r7, #20]
 801bbe2:	1c59      	adds	r1, r3, #1
 801bbe4:	6179      	str	r1, [r7, #20]
 801bbe6:	781b      	ldrb	r3, [r3, #0]
 801bbe8:	4413      	add	r3, r2
 801bbea:	4a26      	ldr	r2, [pc, #152]	; (801bc84 <parseDHCPMSG+0x430>)
 801bbec:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801bbee:	e039      	b.n	801bc64 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801bbf0:	697b      	ldr	r3, [r7, #20]
 801bbf2:	3301      	adds	r3, #1
 801bbf4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	1c5a      	adds	r2, r3, #1
 801bbfa:	617a      	str	r2, [r7, #20]
 801bbfc:	781b      	ldrb	r3, [r3, #0]
 801bbfe:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801bc00:	697b      	ldr	r3, [r7, #20]
 801bc02:	1c5a      	adds	r2, r3, #1
 801bc04:	617a      	str	r2, [r7, #20]
 801bc06:	781a      	ldrb	r2, [r3, #0]
 801bc08:	4b1f      	ldr	r3, [pc, #124]	; (801bc88 <parseDHCPMSG+0x434>)
 801bc0a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801bc0c:	697b      	ldr	r3, [r7, #20]
 801bc0e:	1c5a      	adds	r2, r3, #1
 801bc10:	617a      	str	r2, [r7, #20]
 801bc12:	781a      	ldrb	r2, [r3, #0]
 801bc14:	4b1c      	ldr	r3, [pc, #112]	; (801bc88 <parseDHCPMSG+0x434>)
 801bc16:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801bc18:	697b      	ldr	r3, [r7, #20]
 801bc1a:	1c5a      	adds	r2, r3, #1
 801bc1c:	617a      	str	r2, [r7, #20]
 801bc1e:	781a      	ldrb	r2, [r3, #0]
 801bc20:	4b19      	ldr	r3, [pc, #100]	; (801bc88 <parseDHCPMSG+0x434>)
 801bc22:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801bc24:	697b      	ldr	r3, [r7, #20]
 801bc26:	1c5a      	adds	r2, r3, #1
 801bc28:	617a      	str	r2, [r7, #20]
 801bc2a:	781a      	ldrb	r2, [r3, #0]
 801bc2c:	4b16      	ldr	r3, [pc, #88]	; (801bc88 <parseDHCPMSG+0x434>)
 801bc2e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801bc30:	793a      	ldrb	r2, [r7, #4]
 801bc32:	4b16      	ldr	r3, [pc, #88]	; (801bc8c <parseDHCPMSG+0x438>)
 801bc34:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801bc36:	797a      	ldrb	r2, [r7, #5]
 801bc38:	4b14      	ldr	r3, [pc, #80]	; (801bc8c <parseDHCPMSG+0x438>)
 801bc3a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801bc3c:	79ba      	ldrb	r2, [r7, #6]
 801bc3e:	4b13      	ldr	r3, [pc, #76]	; (801bc8c <parseDHCPMSG+0x438>)
 801bc40:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801bc42:	79fa      	ldrb	r2, [r7, #7]
 801bc44:	4b11      	ldr	r3, [pc, #68]	; (801bc8c <parseDHCPMSG+0x438>)
 801bc46:	70da      	strb	r2, [r3, #3]
   				break;
 801bc48:	e00c      	b.n	801bc64 <parseDHCPMSG+0x410>
   			default :
   				p++;
 801bc4a:	697b      	ldr	r3, [r7, #20]
 801bc4c:	3301      	adds	r3, #1
 801bc4e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	1c5a      	adds	r2, r3, #1
 801bc54:	617a      	str	r2, [r7, #20]
 801bc56:	781b      	ldrb	r3, [r3, #0]
 801bc58:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801bc5a:	7afb      	ldrb	r3, [r7, #11]
 801bc5c:	697a      	ldr	r2, [r7, #20]
 801bc5e:	4413      	add	r3, r2
 801bc60:	617b      	str	r3, [r7, #20]
   				break;
 801bc62:	bf00      	nop
		while ( p < e ) {
 801bc64:	697a      	ldr	r2, [r7, #20]
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	429a      	cmp	r2, r3
 801bc6a:	f4ff ae8a 	bcc.w	801b982 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801bc6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	371c      	adds	r7, #28
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd90      	pop	{r4, r7, pc}
 801bc7a:	bf00      	nop
 801bc7c:	200009b8 	.word	0x200009b8
 801bc80:	200009c0 	.word	0x200009c0
 801bc84:	200000f0 	.word	0x200000f0
 801bc88:	200009a8 	.word	0x200009a8
 801bc8c:	200009ac 	.word	0x200009ac

0801bc90 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801bc90:	b580      	push	{r7, lr}
 801bc92:	b082      	sub	sp, #8
 801bc94:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801bc96:	4b7f      	ldr	r3, [pc, #508]	; (801be94 <DHCP_run+0x204>)
 801bc98:	f993 3000 	ldrsb.w	r3, [r3]
 801bc9c:	2b06      	cmp	r3, #6
 801bc9e:	d101      	bne.n	801bca4 <DHCP_run+0x14>
 801bca0:	2305      	movs	r3, #5
 801bca2:	e0f3      	b.n	801be8c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801bca4:	4b7c      	ldr	r3, [pc, #496]	; (801be98 <DHCP_run+0x208>)
 801bca6:	781b      	ldrb	r3, [r3, #0]
 801bca8:	009b      	lsls	r3, r3, #2
 801bcaa:	3301      	adds	r3, #1
 801bcac:	00db      	lsls	r3, r3, #3
 801bcae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801bcb2:	4618      	mov	r0, r3
 801bcb4:	f7fc fe14 	bl	80188e0 <WIZCHIP_READ>
 801bcb8:	4603      	mov	r3, r0
 801bcba:	2b22      	cmp	r3, #34	; 0x22
 801bcbc:	d006      	beq.n	801bccc <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801bcbe:	4b76      	ldr	r3, [pc, #472]	; (801be98 <DHCP_run+0x208>)
 801bcc0:	7818      	ldrb	r0, [r3, #0]
 801bcc2:	2300      	movs	r3, #0
 801bcc4:	2244      	movs	r2, #68	; 0x44
 801bcc6:	2102      	movs	r1, #2
 801bcc8:	f7fd f8fa 	bl	8018ec0 <socket>

	ret = DHCP_RUNNING;
 801bccc:	2301      	movs	r3, #1
 801bcce:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801bcd0:	f7ff fdc0 	bl	801b854 <parseDHCPMSG>
 801bcd4:	4603      	mov	r3, r0
 801bcd6:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801bcd8:	4b6e      	ldr	r3, [pc, #440]	; (801be94 <DHCP_run+0x204>)
 801bcda:	f993 3000 	ldrsb.w	r3, [r3]
 801bcde:	2b04      	cmp	r3, #4
 801bce0:	f200 80d0 	bhi.w	801be84 <DHCP_run+0x1f4>
 801bce4:	a201      	add	r2, pc, #4	; (adr r2, 801bcec <DHCP_run+0x5c>)
 801bce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcea:	bf00      	nop
 801bcec:	0801bd01 	.word	0x0801bd01
 801bcf0:	0801bd25 	.word	0x0801bd25
 801bcf4:	0801bd69 	.word	0x0801bd69
 801bcf8:	0801bdb9 	.word	0x0801bdb9
 801bcfc:	0801be13 	.word	0x0801be13
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801bd00:	4b66      	ldr	r3, [pc, #408]	; (801be9c <DHCP_run+0x20c>)
 801bd02:	2200      	movs	r2, #0
 801bd04:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801bd06:	4b65      	ldr	r3, [pc, #404]	; (801be9c <DHCP_run+0x20c>)
 801bd08:	2200      	movs	r2, #0
 801bd0a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801bd0c:	4b63      	ldr	r3, [pc, #396]	; (801be9c <DHCP_run+0x20c>)
 801bd0e:	2200      	movs	r2, #0
 801bd10:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801bd12:	4b62      	ldr	r3, [pc, #392]	; (801be9c <DHCP_run+0x20c>)
 801bd14:	2200      	movs	r2, #0
 801bd16:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801bd18:	f7fe fffa 	bl	801ad10 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801bd1c:	4b5d      	ldr	r3, [pc, #372]	; (801be94 <DHCP_run+0x204>)
 801bd1e:	2201      	movs	r2, #1
 801bd20:	701a      	strb	r2, [r3, #0]
   		break;
 801bd22:	e0b2      	b.n	801be8a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801bd24:	79bb      	ldrb	r3, [r7, #6]
 801bd26:	2b02      	cmp	r3, #2
 801bd28:	d119      	bne.n	801bd5e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801bd2a:	4b5d      	ldr	r3, [pc, #372]	; (801bea0 <DHCP_run+0x210>)
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	7c1a      	ldrb	r2, [r3, #16]
 801bd30:	4b5a      	ldr	r3, [pc, #360]	; (801be9c <DHCP_run+0x20c>)
 801bd32:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801bd34:	4b5a      	ldr	r3, [pc, #360]	; (801bea0 <DHCP_run+0x210>)
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	7c5a      	ldrb	r2, [r3, #17]
 801bd3a:	4b58      	ldr	r3, [pc, #352]	; (801be9c <DHCP_run+0x20c>)
 801bd3c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801bd3e:	4b58      	ldr	r3, [pc, #352]	; (801bea0 <DHCP_run+0x210>)
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	7c9a      	ldrb	r2, [r3, #18]
 801bd44:	4b55      	ldr	r3, [pc, #340]	; (801be9c <DHCP_run+0x20c>)
 801bd46:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801bd48:	4b55      	ldr	r3, [pc, #340]	; (801bea0 <DHCP_run+0x210>)
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	7cda      	ldrb	r2, [r3, #19]
 801bd4e:	4b53      	ldr	r3, [pc, #332]	; (801be9c <DHCP_run+0x20c>)
 801bd50:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801bd52:	f7ff f9a3 	bl	801b09c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801bd56:	4b4f      	ldr	r3, [pc, #316]	; (801be94 <DHCP_run+0x204>)
 801bd58:	2202      	movs	r2, #2
 801bd5a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801bd5c:	e095      	b.n	801be8a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bd5e:	f000 f8b1 	bl	801bec4 <check_DHCP_timeout>
 801bd62:	4603      	mov	r3, r0
 801bd64:	71fb      	strb	r3, [r7, #7]
         break;
 801bd66:	e090      	b.n	801be8a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801bd68:	79bb      	ldrb	r3, [r7, #6]
 801bd6a:	2b05      	cmp	r3, #5
 801bd6c:	d116      	bne.n	801bd9c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801bd6e:	f000 f8e9 	bl	801bf44 <check_DHCP_leasedIP>
 801bd72:	4603      	mov	r3, r0
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d008      	beq.n	801bd8a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801bd78:	4b4a      	ldr	r3, [pc, #296]	; (801bea4 <DHCP_run+0x214>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	4798      	blx	r3
					reset_DHCP_timeout();
 801bd7e:	f000 f9b9 	bl	801c0f4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801bd82:	4b44      	ldr	r3, [pc, #272]	; (801be94 <DHCP_run+0x204>)
 801bd84:	2203      	movs	r2, #3
 801bd86:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801bd88:	e07f      	b.n	801be8a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801bd8a:	f000 f9b3 	bl	801c0f4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801bd8e:	4b46      	ldr	r3, [pc, #280]	; (801bea8 <DHCP_run+0x218>)
 801bd90:	681b      	ldr	r3, [r3, #0]
 801bd92:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801bd94:	4b3f      	ldr	r3, [pc, #252]	; (801be94 <DHCP_run+0x204>)
 801bd96:	2200      	movs	r2, #0
 801bd98:	701a      	strb	r2, [r3, #0]
		break;
 801bd9a:	e076      	b.n	801be8a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bd9c:	79bb      	ldrb	r3, [r7, #6]
 801bd9e:	2b06      	cmp	r3, #6
 801bda0:	d105      	bne.n	801bdae <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801bda2:	f000 f9a7 	bl	801c0f4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bda6:	4b3b      	ldr	r3, [pc, #236]	; (801be94 <DHCP_run+0x204>)
 801bda8:	2201      	movs	r2, #1
 801bdaa:	701a      	strb	r2, [r3, #0]
		break;
 801bdac:	e06d      	b.n	801be8a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bdae:	f000 f889 	bl	801bec4 <check_DHCP_timeout>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	71fb      	strb	r3, [r7, #7]
		break;
 801bdb6:	e068      	b.n	801be8a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801bdb8:	2304      	movs	r3, #4
 801bdba:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801bdbc:	4b3b      	ldr	r3, [pc, #236]	; (801beac <DHCP_run+0x21c>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bdc4:	d060      	beq.n	801be88 <DHCP_run+0x1f8>
 801bdc6:	4b39      	ldr	r3, [pc, #228]	; (801beac <DHCP_run+0x21c>)
 801bdc8:	681b      	ldr	r3, [r3, #0]
 801bdca:	089a      	lsrs	r2, r3, #2
 801bdcc:	4b38      	ldr	r3, [pc, #224]	; (801beb0 <DHCP_run+0x220>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	429a      	cmp	r2, r3
 801bdd2:	d259      	bcs.n	801be88 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801bdd8:	4b30      	ldr	r3, [pc, #192]	; (801be9c <DHCP_run+0x20c>)
 801bdda:	781a      	ldrb	r2, [r3, #0]
 801bddc:	4b35      	ldr	r3, [pc, #212]	; (801beb4 <DHCP_run+0x224>)
 801bdde:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801bde0:	4b2e      	ldr	r3, [pc, #184]	; (801be9c <DHCP_run+0x20c>)
 801bde2:	785a      	ldrb	r2, [r3, #1]
 801bde4:	4b33      	ldr	r3, [pc, #204]	; (801beb4 <DHCP_run+0x224>)
 801bde6:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801bde8:	4b2c      	ldr	r3, [pc, #176]	; (801be9c <DHCP_run+0x20c>)
 801bdea:	789a      	ldrb	r2, [r3, #2]
 801bdec:	4b31      	ldr	r3, [pc, #196]	; (801beb4 <DHCP_run+0x224>)
 801bdee:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801bdf0:	4b2a      	ldr	r3, [pc, #168]	; (801be9c <DHCP_run+0x20c>)
 801bdf2:	78da      	ldrb	r2, [r3, #3]
 801bdf4:	4b2f      	ldr	r3, [pc, #188]	; (801beb4 <DHCP_run+0x224>)
 801bdf6:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801bdf8:	4b2f      	ldr	r3, [pc, #188]	; (801beb8 <DHCP_run+0x228>)
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	3301      	adds	r3, #1
 801bdfe:	4a2e      	ldr	r2, [pc, #184]	; (801beb8 <DHCP_run+0x228>)
 801be00:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801be02:	f7ff f94b 	bl	801b09c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801be06:	f000 f975 	bl	801c0f4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801be0a:	4b22      	ldr	r3, [pc, #136]	; (801be94 <DHCP_run+0x204>)
 801be0c:	2204      	movs	r2, #4
 801be0e:	701a      	strb	r2, [r3, #0]
			}
		break;
 801be10:	e03a      	b.n	801be88 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801be12:	2304      	movs	r3, #4
 801be14:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801be16:	79bb      	ldrb	r3, [r7, #6]
 801be18:	2b05      	cmp	r3, #5
 801be1a:	d125      	bne.n	801be68 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801be1c:	4b27      	ldr	r3, [pc, #156]	; (801bebc <DHCP_run+0x22c>)
 801be1e:	2200      	movs	r2, #0
 801be20:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801be22:	4b24      	ldr	r3, [pc, #144]	; (801beb4 <DHCP_run+0x224>)
 801be24:	781a      	ldrb	r2, [r3, #0]
 801be26:	4b1d      	ldr	r3, [pc, #116]	; (801be9c <DHCP_run+0x20c>)
 801be28:	781b      	ldrb	r3, [r3, #0]
 801be2a:	429a      	cmp	r2, r3
 801be2c:	d111      	bne.n	801be52 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801be2e:	4b21      	ldr	r3, [pc, #132]	; (801beb4 <DHCP_run+0x224>)
 801be30:	785a      	ldrb	r2, [r3, #1]
 801be32:	4b1a      	ldr	r3, [pc, #104]	; (801be9c <DHCP_run+0x20c>)
 801be34:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801be36:	429a      	cmp	r2, r3
 801be38:	d10b      	bne.n	801be52 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801be3a:	4b1e      	ldr	r3, [pc, #120]	; (801beb4 <DHCP_run+0x224>)
 801be3c:	789a      	ldrb	r2, [r3, #2]
 801be3e:	4b17      	ldr	r3, [pc, #92]	; (801be9c <DHCP_run+0x20c>)
 801be40:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801be42:	429a      	cmp	r2, r3
 801be44:	d105      	bne.n	801be52 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801be46:	4b1b      	ldr	r3, [pc, #108]	; (801beb4 <DHCP_run+0x224>)
 801be48:	78da      	ldrb	r2, [r3, #3]
 801be4a:	4b14      	ldr	r3, [pc, #80]	; (801be9c <DHCP_run+0x20c>)
 801be4c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801be4e:	429a      	cmp	r2, r3
 801be50:	d004      	beq.n	801be5c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801be52:	2303      	movs	r3, #3
 801be54:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801be56:	4b1a      	ldr	r3, [pc, #104]	; (801bec0 <DHCP_run+0x230>)
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801be5c:	f000 f94a 	bl	801c0f4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801be60:	4b0c      	ldr	r3, [pc, #48]	; (801be94 <DHCP_run+0x204>)
 801be62:	2203      	movs	r2, #3
 801be64:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801be66:	e010      	b.n	801be8a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801be68:	79bb      	ldrb	r3, [r7, #6]
 801be6a:	2b06      	cmp	r3, #6
 801be6c:	d105      	bne.n	801be7a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801be6e:	f000 f941 	bl	801c0f4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801be72:	4b08      	ldr	r3, [pc, #32]	; (801be94 <DHCP_run+0x204>)
 801be74:	2201      	movs	r2, #1
 801be76:	701a      	strb	r2, [r3, #0]
	   	break;
 801be78:	e007      	b.n	801be8a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801be7a:	f000 f823 	bl	801bec4 <check_DHCP_timeout>
 801be7e:	4603      	mov	r3, r0
 801be80:	71fb      	strb	r3, [r7, #7]
	   	break;
 801be82:	e002      	b.n	801be8a <DHCP_run+0x1fa>
		default :
   		break;
 801be84:	bf00      	nop
 801be86:	e000      	b.n	801be8a <DHCP_run+0x1fa>
		break;
 801be88:	bf00      	nop
	}

	return ret;
 801be8a:	79fb      	ldrb	r3, [r7, #7]
}
 801be8c:	4618      	mov	r0, r3
 801be8e:	3708      	adds	r7, #8
 801be90:	46bd      	mov	sp, r7
 801be92:	bd80      	pop	{r7, pc}
 801be94:	200009c4 	.word	0x200009c4
 801be98:	200009a5 	.word	0x200009a5
 801be9c:	200009b4 	.word	0x200009b4
 801bea0:	200009d0 	.word	0x200009d0
 801bea4:	20000104 	.word	0x20000104
 801bea8:	2000010c 	.word	0x2000010c
 801beac:	200000f0 	.word	0x200000f0
 801beb0:	200009c8 	.word	0x200009c8
 801beb4:	200009b0 	.word	0x200009b0
 801beb8:	200009cc 	.word	0x200009cc
 801bebc:	200009c5 	.word	0x200009c5
 801bec0:	20000108 	.word	0x20000108

0801bec4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b082      	sub	sp, #8
 801bec8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801beca:	2301      	movs	r3, #1
 801becc:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
		if (dhcp_tick_next < dhcp_tick_1s) {
 801bece:	4b19      	ldr	r3, [pc, #100]	; (801bf34 <check_DHCP_timeout+0x70>)
 801bed0:	681a      	ldr	r2, [r3, #0]
 801bed2:	4b19      	ldr	r3, [pc, #100]	; (801bf38 <check_DHCP_timeout+0x74>)
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	429a      	cmp	r2, r3
 801bed8:	d226      	bcs.n	801bf28 <check_DHCP_timeout+0x64>

			switch ( dhcp_state ) {
 801beda:	4b18      	ldr	r3, [pc, #96]	; (801bf3c <check_DHCP_timeout+0x78>)
 801bedc:	f993 3000 	ldrsb.w	r3, [r3]
 801bee0:	2b04      	cmp	r3, #4
 801bee2:	d00c      	beq.n	801befe <check_DHCP_timeout+0x3a>
 801bee4:	2b04      	cmp	r3, #4
 801bee6:	dc0d      	bgt.n	801bf04 <check_DHCP_timeout+0x40>
 801bee8:	2b01      	cmp	r3, #1
 801beea:	d002      	beq.n	801bef2 <check_DHCP_timeout+0x2e>
 801beec:	2b02      	cmp	r3, #2
 801beee:	d003      	beq.n	801bef8 <check_DHCP_timeout+0x34>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801bef0:	e008      	b.n	801bf04 <check_DHCP_timeout+0x40>
					send_DHCP_DISCOVER();
 801bef2:	f7fe ff0d 	bl	801ad10 <send_DHCP_DISCOVER>
				break;
 801bef6:	e006      	b.n	801bf06 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801bef8:	f7ff f8d0 	bl	801b09c <send_DHCP_REQUEST>
				break;
 801befc:	e003      	b.n	801bf06 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801befe:	f7ff f8cd 	bl	801b09c <send_DHCP_REQUEST>
				break;
 801bf02:	e000      	b.n	801bf06 <check_DHCP_timeout+0x42>
				break;
 801bf04:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801bf06:	4b0c      	ldr	r3, [pc, #48]	; (801bf38 <check_DHCP_timeout+0x74>)
 801bf08:	2200      	movs	r2, #0
 801bf0a:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801bf0c:	4b0a      	ldr	r3, [pc, #40]	; (801bf38 <check_DHCP_timeout+0x74>)
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	330a      	adds	r3, #10
 801bf12:	4a08      	ldr	r2, [pc, #32]	; (801bf34 <check_DHCP_timeout+0x70>)
 801bf14:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801bf16:	4b0a      	ldr	r3, [pc, #40]	; (801bf40 <check_DHCP_timeout+0x7c>)
 801bf18:	f993 3000 	ldrsb.w	r3, [r3]
 801bf1c:	b2db      	uxtb	r3, r3
 801bf1e:	3301      	adds	r3, #1
 801bf20:	b2db      	uxtb	r3, r3
 801bf22:	b25a      	sxtb	r2, r3
 801bf24:	4b06      	ldr	r3, [pc, #24]	; (801bf40 <check_DHCP_timeout+0x7c>)
 801bf26:	701a      	strb	r2, [r3, #0]
			default :
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
 801bf28:	79fb      	ldrb	r3, [r7, #7]
}
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	3708      	adds	r7, #8
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	bd80      	pop	{r7, pc}
 801bf32:	bf00      	nop
 801bf34:	200000f4 	.word	0x200000f4
 801bf38:	200009c8 	.word	0x200009c8
 801bf3c:	200009c4 	.word	0x200009c4
 801bf40:	200009c5 	.word	0x200009c5

0801bf44 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801bf44:	b580      	push	{r7, lr}
 801bf46:	b084      	sub	sp, #16
 801bf48:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801bf4a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bf4e:	f7fc fcc7 	bl	80188e0 <WIZCHIP_READ>
 801bf52:	4603      	mov	r3, r0
 801bf54:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801bf56:	2103      	movs	r1, #3
 801bf58:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bf5c:	f7fc fd0c 	bl	8018978 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801bf60:	4b15      	ldr	r3, [pc, #84]	; (801bfb8 <check_DHCP_leasedIP+0x74>)
 801bf62:	7818      	ldrb	r0, [r3, #0]
 801bf64:	f241 3388 	movw	r3, #5000	; 0x1388
 801bf68:	9300      	str	r3, [sp, #0]
 801bf6a:	4b14      	ldr	r3, [pc, #80]	; (801bfbc <check_DHCP_leasedIP+0x78>)
 801bf6c:	2211      	movs	r2, #17
 801bf6e:	4914      	ldr	r1, [pc, #80]	; (801bfc0 <check_DHCP_leasedIP+0x7c>)
 801bf70:	f7fd fc84 	bl	801987c <sendto>
 801bf74:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801bf76:	79fb      	ldrb	r3, [r7, #7]
 801bf78:	4619      	mov	r1, r3
 801bf7a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bf7e:	f7fc fcfb 	bl	8018978 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801bf82:	683b      	ldr	r3, [r7, #0]
 801bf84:	f113 0f0d 	cmn.w	r3, #13
 801bf88:	d101      	bne.n	801bf8e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801bf8a:	2301      	movs	r3, #1
 801bf8c:	e010      	b.n	801bfb0 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801bf8e:	f7ff fb0f 	bl	801b5b0 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801bf92:	4b0c      	ldr	r3, [pc, #48]	; (801bfc4 <check_DHCP_leasedIP+0x80>)
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bf98:	e003      	b.n	801bfa2 <check_DHCP_leasedIP+0x5e>

			delay(200);
 801bf9a:	4b0b      	ldr	r3, [pc, #44]	; (801bfc8 <check_DHCP_leasedIP+0x84>)
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	20c8      	movs	r0, #200	; 0xc8
 801bfa0:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bfa2:	4b08      	ldr	r3, [pc, #32]	; (801bfc4 <check_DHCP_leasedIP+0x80>)
 801bfa4:	681a      	ldr	r2, [r3, #0]
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	1ad3      	subs	r3, r2, r3
 801bfaa:	2b01      	cmp	r3, #1
 801bfac:	d9f5      	bls.n	801bf9a <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801bfae:	2300      	movs	r3, #0
	}
}	
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	3708      	adds	r7, #8
 801bfb4:	46bd      	mov	sp, r7
 801bfb6:	bd80      	pop	{r7, pc}
 801bfb8:	200009a5 	.word	0x200009a5
 801bfbc:	200009b4 	.word	0x200009b4
 801bfc0:	08032fd4 	.word	0x08032fd4
 801bfc4:	200009c8 	.word	0x200009c8
 801bfc8:	20000110 	.word	0x20000110

0801bfcc <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801bfcc:	b580      	push	{r7, lr}
 801bfce:	b084      	sub	sp, #16
 801bfd0:	af00      	add	r7, sp, #0
 801bfd2:	4603      	mov	r3, r0
 801bfd4:	6039      	str	r1, [r7, #0]
 801bfd6:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801bfd8:	2300      	movs	r3, #0
 801bfda:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801bfdc:	2206      	movs	r2, #6
 801bfde:	493f      	ldr	r1, [pc, #252]	; (801c0dc <DHCP_init+0x110>)
 801bfe0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bfe4:	f7fc fd16 	bl	8018a14 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801bfe8:	4b3c      	ldr	r3, [pc, #240]	; (801c0dc <DHCP_init+0x110>)
 801bfea:	781a      	ldrb	r2, [r3, #0]
 801bfec:	4b3b      	ldr	r3, [pc, #236]	; (801c0dc <DHCP_init+0x110>)
 801bfee:	785b      	ldrb	r3, [r3, #1]
 801bff0:	4313      	orrs	r3, r2
 801bff2:	b2da      	uxtb	r2, r3
 801bff4:	4b39      	ldr	r3, [pc, #228]	; (801c0dc <DHCP_init+0x110>)
 801bff6:	789b      	ldrb	r3, [r3, #2]
 801bff8:	4313      	orrs	r3, r2
 801bffa:	b2da      	uxtb	r2, r3
 801bffc:	4b37      	ldr	r3, [pc, #220]	; (801c0dc <DHCP_init+0x110>)
 801bffe:	78db      	ldrb	r3, [r3, #3]
 801c000:	4313      	orrs	r3, r2
 801c002:	b2da      	uxtb	r2, r3
 801c004:	4b35      	ldr	r3, [pc, #212]	; (801c0dc <DHCP_init+0x110>)
 801c006:	791b      	ldrb	r3, [r3, #4]
 801c008:	4313      	orrs	r3, r2
 801c00a:	b2da      	uxtb	r2, r3
 801c00c:	4b33      	ldr	r3, [pc, #204]	; (801c0dc <DHCP_init+0x110>)
 801c00e:	795b      	ldrb	r3, [r3, #5]
 801c010:	4313      	orrs	r3, r2
 801c012:	b2db      	uxtb	r3, r3
 801c014:	2b00      	cmp	r3, #0
 801c016:	d117      	bne.n	801c048 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801c018:	4b30      	ldr	r3, [pc, #192]	; (801c0dc <DHCP_init+0x110>)
 801c01a:	2200      	movs	r2, #0
 801c01c:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801c01e:	4b2f      	ldr	r3, [pc, #188]	; (801c0dc <DHCP_init+0x110>)
 801c020:	2208      	movs	r2, #8
 801c022:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801c024:	4b2d      	ldr	r3, [pc, #180]	; (801c0dc <DHCP_init+0x110>)
 801c026:	22dc      	movs	r2, #220	; 0xdc
 801c028:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801c02a:	4b2c      	ldr	r3, [pc, #176]	; (801c0dc <DHCP_init+0x110>)
 801c02c:	2200      	movs	r2, #0
 801c02e:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801c030:	4b2a      	ldr	r3, [pc, #168]	; (801c0dc <DHCP_init+0x110>)
 801c032:	2200      	movs	r2, #0
 801c034:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801c036:	4b29      	ldr	r3, [pc, #164]	; (801c0dc <DHCP_init+0x110>)
 801c038:	2200      	movs	r2, #0
 801c03a:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801c03c:	2206      	movs	r2, #6
 801c03e:	4927      	ldr	r1, [pc, #156]	; (801c0dc <DHCP_init+0x110>)
 801c040:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801c044:	f7fc fd46 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801c048:	4a25      	ldr	r2, [pc, #148]	; (801c0e0 <DHCP_init+0x114>)
 801c04a:	79fb      	ldrb	r3, [r7, #7]
 801c04c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801c04e:	4a25      	ldr	r2, [pc, #148]	; (801c0e4 <DHCP_init+0x118>)
 801c050:	683b      	ldr	r3, [r7, #0]
 801c052:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801c054:	4b24      	ldr	r3, [pc, #144]	; (801c0e8 <DHCP_init+0x11c>)
 801c056:	4a25      	ldr	r2, [pc, #148]	; (801c0ec <DHCP_init+0x120>)
 801c058:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801c05a:	4b20      	ldr	r3, [pc, #128]	; (801c0dc <DHCP_init+0x110>)
 801c05c:	78db      	ldrb	r3, [r3, #3]
 801c05e:	461a      	mov	r2, r3
 801c060:	4b21      	ldr	r3, [pc, #132]	; (801c0e8 <DHCP_init+0x11c>)
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	4413      	add	r3, r2
 801c066:	4a20      	ldr	r2, [pc, #128]	; (801c0e8 <DHCP_init+0x11c>)
 801c068:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801c06a:	4b1c      	ldr	r3, [pc, #112]	; (801c0dc <DHCP_init+0x110>)
 801c06c:	791b      	ldrb	r3, [r3, #4]
 801c06e:	461a      	mov	r2, r3
 801c070:	4b1d      	ldr	r3, [pc, #116]	; (801c0e8 <DHCP_init+0x11c>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	4413      	add	r3, r2
 801c076:	4a1c      	ldr	r2, [pc, #112]	; (801c0e8 <DHCP_init+0x11c>)
 801c078:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801c07a:	4b18      	ldr	r3, [pc, #96]	; (801c0dc <DHCP_init+0x110>)
 801c07c:	795b      	ldrb	r3, [r3, #5]
 801c07e:	461a      	mov	r2, r3
 801c080:	4b19      	ldr	r3, [pc, #100]	; (801c0e8 <DHCP_init+0x11c>)
 801c082:	681b      	ldr	r3, [r3, #0]
 801c084:	4413      	add	r3, r2
 801c086:	4a18      	ldr	r2, [pc, #96]	; (801c0e8 <DHCP_init+0x11c>)
 801c088:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801c08a:	4b14      	ldr	r3, [pc, #80]	; (801c0dc <DHCP_init+0x110>)
 801c08c:	78da      	ldrb	r2, [r3, #3]
 801c08e:	4b13      	ldr	r3, [pc, #76]	; (801c0dc <DHCP_init+0x110>)
 801c090:	791b      	ldrb	r3, [r3, #4]
 801c092:	4053      	eors	r3, r2
 801c094:	b2da      	uxtb	r2, r3
 801c096:	4b11      	ldr	r3, [pc, #68]	; (801c0dc <DHCP_init+0x110>)
 801c098:	795b      	ldrb	r3, [r3, #5]
 801c09a:	4053      	eors	r3, r2
 801c09c:	b2db      	uxtb	r3, r3
 801c09e:	461a      	mov	r2, r3
 801c0a0:	4b11      	ldr	r3, [pc, #68]	; (801c0e8 <DHCP_init+0x11c>)
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	4413      	add	r3, r2
 801c0a6:	4a10      	ldr	r2, [pc, #64]	; (801c0e8 <DHCP_init+0x11c>)
 801c0a8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801c0aa:	f107 030c 	add.w	r3, r7, #12
 801c0ae:	2204      	movs	r2, #4
 801c0b0:	4619      	mov	r1, r3
 801c0b2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801c0b6:	f7fc fd0d 	bl	8018ad4 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801c0ba:	f107 030c 	add.w	r3, r7, #12
 801c0be:	2204      	movs	r2, #4
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c0c6:	f7fc fd05 	bl	8018ad4 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801c0ca:	f000 f813 	bl	801c0f4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801c0ce:	4b08      	ldr	r3, [pc, #32]	; (801c0f0 <DHCP_init+0x124>)
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	701a      	strb	r2, [r3, #0]
}
 801c0d4:	bf00      	nop
 801c0d6:	3710      	adds	r7, #16
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	bd80      	pop	{r7, pc}
 801c0dc:	200009d4 	.word	0x200009d4
 801c0e0:	200009a5 	.word	0x200009a5
 801c0e4:	200009d0 	.word	0x200009d0
 801c0e8:	200009cc 	.word	0x200009cc
 801c0ec:	12345678 	.word	0x12345678
 801c0f0:	200009c4 	.word	0x200009c4

0801c0f4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801c0f4:	b480      	push	{r7}
 801c0f6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801c0f8:	4b06      	ldr	r3, [pc, #24]	; (801c114 <reset_DHCP_timeout+0x20>)
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801c0fe:	4b06      	ldr	r3, [pc, #24]	; (801c118 <reset_DHCP_timeout+0x24>)
 801c100:	220a      	movs	r2, #10
 801c102:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801c104:	4b05      	ldr	r3, [pc, #20]	; (801c11c <reset_DHCP_timeout+0x28>)
 801c106:	2200      	movs	r2, #0
 801c108:	701a      	strb	r2, [r3, #0]
}
 801c10a:	bf00      	nop
 801c10c:	46bd      	mov	sp, r7
 801c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c112:	4770      	bx	lr
 801c114:	200009c8 	.word	0x200009c8
 801c118:	200000f4 	.word	0x200000f4
 801c11c:	200009c5 	.word	0x200009c5

0801c120 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801c120:	b480      	push	{r7}
 801c122:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801c124:	4b04      	ldr	r3, [pc, #16]	; (801c138 <DHCP_time_handler+0x18>)
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	3301      	adds	r3, #1
 801c12a:	4a03      	ldr	r2, [pc, #12]	; (801c138 <DHCP_time_handler+0x18>)
 801c12c:	6013      	str	r3, [r2, #0]
}
 801c12e:	bf00      	nop
 801c130:	46bd      	mov	sp, r7
 801c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c136:	4770      	bx	lr
 801c138:	200009c8 	.word	0x200009c8

0801c13c <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801c13c:	b480      	push	{r7}
 801c13e:	b083      	sub	sp, #12
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801c144:	4b0c      	ldr	r3, [pc, #48]	; (801c178 <getIPfromDHCP+0x3c>)
 801c146:	781a      	ldrb	r2, [r3, #0]
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	3301      	adds	r3, #1
 801c150:	4a09      	ldr	r2, [pc, #36]	; (801c178 <getIPfromDHCP+0x3c>)
 801c152:	7852      	ldrb	r2, [r2, #1]
 801c154:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	3302      	adds	r3, #2
 801c15a:	4a07      	ldr	r2, [pc, #28]	; (801c178 <getIPfromDHCP+0x3c>)
 801c15c:	7892      	ldrb	r2, [r2, #2]
 801c15e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	3303      	adds	r3, #3
 801c164:	4a04      	ldr	r2, [pc, #16]	; (801c178 <getIPfromDHCP+0x3c>)
 801c166:	78d2      	ldrb	r2, [r2, #3]
 801c168:	701a      	strb	r2, [r3, #0]
}
 801c16a:	bf00      	nop
 801c16c:	370c      	adds	r7, #12
 801c16e:	46bd      	mov	sp, r7
 801c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c174:	4770      	bx	lr
 801c176:	bf00      	nop
 801c178:	200009b4 	.word	0x200009b4

0801c17c <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801c17c:	b480      	push	{r7}
 801c17e:	b083      	sub	sp, #12
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801c184:	4b0c      	ldr	r3, [pc, #48]	; (801c1b8 <getGWfromDHCP+0x3c>)
 801c186:	781a      	ldrb	r2, [r3, #0]
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	3301      	adds	r3, #1
 801c190:	4a09      	ldr	r2, [pc, #36]	; (801c1b8 <getGWfromDHCP+0x3c>)
 801c192:	7852      	ldrb	r2, [r2, #1]
 801c194:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	3302      	adds	r3, #2
 801c19a:	4a07      	ldr	r2, [pc, #28]	; (801c1b8 <getGWfromDHCP+0x3c>)
 801c19c:	7892      	ldrb	r2, [r2, #2]
 801c19e:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	3303      	adds	r3, #3
 801c1a4:	4a04      	ldr	r2, [pc, #16]	; (801c1b8 <getGWfromDHCP+0x3c>)
 801c1a6:	78d2      	ldrb	r2, [r2, #3]
 801c1a8:	701a      	strb	r2, [r3, #0]
}
 801c1aa:	bf00      	nop
 801c1ac:	370c      	adds	r7, #12
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b4:	4770      	bx	lr
 801c1b6:	bf00      	nop
 801c1b8:	200009b8 	.word	0x200009b8

0801c1bc <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801c1bc:	b480      	push	{r7}
 801c1be:	b083      	sub	sp, #12
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801c1c4:	4b0c      	ldr	r3, [pc, #48]	; (801c1f8 <getSNfromDHCP+0x3c>)
 801c1c6:	781a      	ldrb	r2, [r3, #0]
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	3301      	adds	r3, #1
 801c1d0:	4a09      	ldr	r2, [pc, #36]	; (801c1f8 <getSNfromDHCP+0x3c>)
 801c1d2:	7852      	ldrb	r2, [r2, #1]
 801c1d4:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	3302      	adds	r3, #2
 801c1da:	4a07      	ldr	r2, [pc, #28]	; (801c1f8 <getSNfromDHCP+0x3c>)
 801c1dc:	7892      	ldrb	r2, [r2, #2]
 801c1de:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	3303      	adds	r3, #3
 801c1e4:	4a04      	ldr	r2, [pc, #16]	; (801c1f8 <getSNfromDHCP+0x3c>)
 801c1e6:	78d2      	ldrb	r2, [r2, #3]
 801c1e8:	701a      	strb	r2, [r3, #0]
}
 801c1ea:	bf00      	nop
 801c1ec:	370c      	adds	r7, #12
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f4:	4770      	bx	lr
 801c1f6:	bf00      	nop
 801c1f8:	200009bc 	.word	0x200009bc

0801c1fc <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801c1fc:	b480      	push	{r7}
 801c1fe:	b083      	sub	sp, #12
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801c204:	4b0c      	ldr	r3, [pc, #48]	; (801c238 <getDNSfromDHCP+0x3c>)
 801c206:	781a      	ldrb	r2, [r3, #0]
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	3301      	adds	r3, #1
 801c210:	4a09      	ldr	r2, [pc, #36]	; (801c238 <getDNSfromDHCP+0x3c>)
 801c212:	7852      	ldrb	r2, [r2, #1]
 801c214:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	3302      	adds	r3, #2
 801c21a:	4a07      	ldr	r2, [pc, #28]	; (801c238 <getDNSfromDHCP+0x3c>)
 801c21c:	7892      	ldrb	r2, [r2, #2]
 801c21e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	3303      	adds	r3, #3
 801c224:	4a04      	ldr	r2, [pc, #16]	; (801c238 <getDNSfromDHCP+0x3c>)
 801c226:	78d2      	ldrb	r2, [r2, #3]
 801c228:	701a      	strb	r2, [r3, #0]
}
 801c22a:	bf00      	nop
 801c22c:	370c      	adds	r7, #12
 801c22e:	46bd      	mov	sp, r7
 801c230:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c234:	4770      	bx	lr
 801c236:	bf00      	nop
 801c238:	200009c0 	.word	0x200009c0

0801c23c <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801c23c:	b480      	push	{r7}
 801c23e:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801c240:	4b03      	ldr	r3, [pc, #12]	; (801c250 <getDHCPLeasetime+0x14>)
 801c242:	681b      	ldr	r3, [r3, #0]
}
 801c244:	4618      	mov	r0, r3
 801c246:	46bd      	mov	sp, r7
 801c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c24c:	4770      	bx	lr
 801c24e:	bf00      	nop
 801c250:	200000f0 	.word	0x200000f0

0801c254 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801c254:	b480      	push	{r7}
 801c256:	b083      	sub	sp, #12
 801c258:	af00      	add	r7, sp, #0
 801c25a:	4603      	mov	r3, r0
 801c25c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801c25e:	79fb      	ldrb	r3, [r7, #7]
 801c260:	f003 030f 	and.w	r3, r3, #15
 801c264:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801c266:	79fb      	ldrb	r3, [r7, #7]
 801c268:	2b09      	cmp	r3, #9
 801c26a:	d803      	bhi.n	801c274 <NibbleToHex+0x20>
    return nibble + '0';
 801c26c:	79fb      	ldrb	r3, [r7, #7]
 801c26e:	3330      	adds	r3, #48	; 0x30
 801c270:	b2db      	uxtb	r3, r3
 801c272:	e002      	b.n	801c27a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801c274:	79fb      	ldrb	r3, [r7, #7]
 801c276:	3337      	adds	r3, #55	; 0x37
 801c278:	b2db      	uxtb	r3, r3
}
 801c27a:	4618      	mov	r0, r3
 801c27c:	370c      	adds	r7, #12
 801c27e:	46bd      	mov	sp, r7
 801c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c284:	4770      	bx	lr

0801c286 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801c286:	b480      	push	{r7}
 801c288:	b085      	sub	sp, #20
 801c28a:	af00      	add	r7, sp, #0
 801c28c:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801c28e:	687b      	ldr	r3, [r7, #4]
 801c290:	1c5a      	adds	r2, r3, #1
 801c292:	607a      	str	r2, [r7, #4]
 801c294:	781b      	ldrb	r3, [r3, #0]
 801c296:	b29b      	uxth	r3, r3
 801c298:	021b      	lsls	r3, r3, #8
 801c29a:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	781b      	ldrb	r3, [r3, #0]
 801c2a0:	b29a      	uxth	r2, r3
 801c2a2:	89fb      	ldrh	r3, [r7, #14]
 801c2a4:	4413      	add	r3, r2
 801c2a6:	81fb      	strh	r3, [r7, #14]
	return i;
 801c2a8:	89fb      	ldrh	r3, [r7, #14]
}
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	3714      	adds	r7, #20
 801c2ae:	46bd      	mov	sp, r7
 801c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b4:	4770      	bx	lr

0801c2b6 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801c2b6:	b480      	push	{r7}
 801c2b8:	b083      	sub	sp, #12
 801c2ba:	af00      	add	r7, sp, #0
 801c2bc:	6078      	str	r0, [r7, #4]
 801c2be:	460b      	mov	r3, r1
 801c2c0:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801c2c2:	887b      	ldrh	r3, [r7, #2]
 801c2c4:	0a1b      	lsrs	r3, r3, #8
 801c2c6:	b299      	uxth	r1, r3
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	1c5a      	adds	r2, r3, #1
 801c2cc:	607a      	str	r2, [r7, #4]
 801c2ce:	b2ca      	uxtb	r2, r1
 801c2d0:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	1c5a      	adds	r2, r3, #1
 801c2d6:	607a      	str	r2, [r7, #4]
 801c2d8:	887a      	ldrh	r2, [r7, #2]
 801c2da:	b2d2      	uxtb	r2, r2
 801c2dc:	701a      	strb	r2, [r3, #0]
	return s;
 801c2de:	687b      	ldr	r3, [r7, #4]
}
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	370c      	adds	r7, #12
 801c2e4:	46bd      	mov	sp, r7
 801c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ea:	4770      	bx	lr

0801c2ec <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801c2ec:	b480      	push	{r7}
 801c2ee:	b08b      	sub	sp, #44	; 0x2c
 801c2f0:	af00      	add	r7, sp, #0
 801c2f2:	60f8      	str	r0, [r7, #12]
 801c2f4:	60b9      	str	r1, [r7, #8]
 801c2f6:	607a      	str	r2, [r7, #4]
 801c2f8:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801c2fe:	2300      	movs	r3, #0
 801c300:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801c302:	2300      	movs	r3, #0
 801c304:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801c306:	68bb      	ldr	r3, [r7, #8]
 801c308:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801c30a:	6a3b      	ldr	r3, [r7, #32]
 801c30c:	1c5a      	adds	r2, r3, #1
 801c30e:	623a      	str	r2, [r7, #32]
 801c310:	781b      	ldrb	r3, [r3, #0]
 801c312:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 801c314:	69bb      	ldr	r3, [r7, #24]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d102      	bne.n	801c320 <parse_name+0x34>
 801c31a:	69fb      	ldr	r3, [r7, #28]
 801c31c:	3301      	adds	r3, #1
 801c31e:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801c320:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c326:	2bc0      	cmp	r3, #192	; 0xc0
 801c328:	d117      	bne.n	801c35a <parse_name+0x6e>
		{
			if (!indirect)
 801c32a:	69bb      	ldr	r3, [r7, #24]
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	d102      	bne.n	801c336 <parse_name+0x4a>
				clen++;
 801c330:	69fb      	ldr	r3, [r7, #28]
 801c332:	3301      	adds	r3, #1
 801c334:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801c336:	2301      	movs	r3, #1
 801c338:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801c33a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c33c:	021b      	lsls	r3, r3, #8
 801c33e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801c342:	6a3a      	ldr	r2, [r7, #32]
 801c344:	7812      	ldrb	r2, [r2, #0]
 801c346:	4413      	add	r3, r2
 801c348:	461a      	mov	r2, r3
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	4413      	add	r3, r2
 801c34e:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801c350:	6a3b      	ldr	r3, [r7, #32]
 801c352:	1c5a      	adds	r2, r3, #1
 801c354:	623a      	str	r2, [r7, #32]
 801c356:	781b      	ldrb	r3, [r3, #0]
 801c358:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801c35a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d02b      	beq.n	801c3b8 <parse_name+0xcc>
			break;

		len -= slen + 1;
 801c360:	887a      	ldrh	r2, [r7, #2]
 801c362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c364:	1ad3      	subs	r3, r2, r3
 801c366:	b29b      	uxth	r3, r3
 801c368:	3b01      	subs	r3, #1
 801c36a:	b29b      	uxth	r3, r3
 801c36c:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801c36e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c372:	2b00      	cmp	r3, #0
 801c374:	da02      	bge.n	801c37c <parse_name+0x90>
 801c376:	f04f 33ff 	mov.w	r3, #4294967295
 801c37a:	e038      	b.n	801c3ee <parse_name+0x102>

		if (!indirect) clen += slen;
 801c37c:	69bb      	ldr	r3, [r7, #24]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d10c      	bne.n	801c39c <parse_name+0xb0>
 801c382:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c384:	69fa      	ldr	r2, [r7, #28]
 801c386:	4413      	add	r3, r2
 801c388:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801c38a:	e007      	b.n	801c39c <parse_name+0xb0>
 801c38c:	6a3a      	ldr	r2, [r7, #32]
 801c38e:	1c53      	adds	r3, r2, #1
 801c390:	623b      	str	r3, [r7, #32]
 801c392:	687b      	ldr	r3, [r7, #4]
 801c394:	1c59      	adds	r1, r3, #1
 801c396:	6079      	str	r1, [r7, #4]
 801c398:	7812      	ldrb	r2, [r2, #0]
 801c39a:	701a      	strb	r2, [r3, #0]
 801c39c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c39e:	1e5a      	subs	r2, r3, #1
 801c3a0:	84fa      	strh	r2, [r7, #38]	; 0x26
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d1f2      	bne.n	801c38c <parse_name+0xa0>
		*buf++ = '.';
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	1c5a      	adds	r2, r3, #1
 801c3aa:	607a      	str	r2, [r7, #4]
 801c3ac:	222e      	movs	r2, #46	; 0x2e
 801c3ae:	701a      	strb	r2, [r3, #0]
		nseg++;
 801c3b0:	697b      	ldr	r3, [r7, #20]
 801c3b2:	3301      	adds	r3, #1
 801c3b4:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801c3b6:	e7a8      	b.n	801c30a <parse_name+0x1e>
			break;
 801c3b8:	bf00      	nop
	}

	if (nseg == 0)
 801c3ba:	697b      	ldr	r3, [r7, #20]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	d10a      	bne.n	801c3d6 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	1c5a      	adds	r2, r3, #1
 801c3c4:	607a      	str	r2, [r7, #4]
 801c3c6:	222e      	movs	r2, #46	; 0x2e
 801c3c8:	701a      	strb	r2, [r3, #0]
		len--;
 801c3ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3ce:	b29b      	uxth	r3, r3
 801c3d0:	3b01      	subs	r3, #1
 801c3d2:	b29b      	uxth	r3, r3
 801c3d4:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	1c5a      	adds	r2, r3, #1
 801c3da:	607a      	str	r2, [r7, #4]
 801c3dc:	2200      	movs	r2, #0
 801c3de:	701a      	strb	r2, [r3, #0]
	len--;
 801c3e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3e4:	b29b      	uxth	r3, r3
 801c3e6:	3b01      	subs	r3, #1
 801c3e8:	b29b      	uxth	r3, r3
 801c3ea:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801c3ec:	69fb      	ldr	r3, [r7, #28]
}
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	372c      	adds	r7, #44	; 0x2c
 801c3f2:	46bd      	mov	sp, r7
 801c3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f8:	4770      	bx	lr

0801c3fa <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801c3fa:	b580      	push	{r7, lr}
 801c3fc:	b0b4      	sub	sp, #208	; 0xd0
 801c3fe:	af00      	add	r7, sp, #0
 801c400:	6078      	str	r0, [r7, #4]
 801c402:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c404:	f107 020c 	add.w	r2, r7, #12
 801c408:	23c0      	movs	r3, #192	; 0xc0
 801c40a:	6839      	ldr	r1, [r7, #0]
 801c40c:	6878      	ldr	r0, [r7, #4]
 801c40e:	f7ff ff6d 	bl	801c2ec <parse_name>
 801c412:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 801c416:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c41e:	d101      	bne.n	801c424 <dns_question+0x2a>
 801c420:	2300      	movs	r3, #0
 801c422:	e00b      	b.n	801c43c <dns_question+0x42>

	cp += len;
 801c424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c428:	683a      	ldr	r2, [r7, #0]
 801c42a:	4413      	add	r3, r2
 801c42c:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801c42e:	683b      	ldr	r3, [r7, #0]
 801c430:	3302      	adds	r3, #2
 801c432:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801c434:	683b      	ldr	r3, [r7, #0]
 801c436:	3302      	adds	r3, #2
 801c438:	603b      	str	r3, [r7, #0]

	return cp;
 801c43a:	683b      	ldr	r3, [r7, #0]
}
 801c43c:	4618      	mov	r0, r3
 801c43e:	37d0      	adds	r7, #208	; 0xd0
 801c440:	46bd      	mov	sp, r7
 801c442:	bd80      	pop	{r7, pc}

0801c444 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	b0b6      	sub	sp, #216	; 0xd8
 801c448:	af00      	add	r7, sp, #0
 801c44a:	60f8      	str	r0, [r7, #12]
 801c44c:	60b9      	str	r1, [r7, #8]
 801c44e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c450:	f107 0210 	add.w	r2, r7, #16
 801c454:	23c0      	movs	r3, #192	; 0xc0
 801c456:	68b9      	ldr	r1, [r7, #8]
 801c458:	68f8      	ldr	r0, [r7, #12]
 801c45a:	f7ff ff47 	bl	801c2ec <parse_name>
 801c45e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 801c462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c466:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c46a:	d101      	bne.n	801c470 <dns_answer+0x2c>
 801c46c:	2300      	movs	r3, #0
 801c46e:	e0f9      	b.n	801c664 <dns_answer+0x220>

	cp += len;
 801c470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c474:	68ba      	ldr	r2, [r7, #8]
 801c476:	4413      	add	r3, r2
 801c478:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801c47a:	68b8      	ldr	r0, [r7, #8]
 801c47c:	f7ff ff03 	bl	801c286 <get16>
 801c480:	4603      	mov	r3, r0
 801c482:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 801c486:	68bb      	ldr	r3, [r7, #8]
 801c488:	3302      	adds	r3, #2
 801c48a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801c48c:	68bb      	ldr	r3, [r7, #8]
 801c48e:	3302      	adds	r3, #2
 801c490:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801c492:	68bb      	ldr	r3, [r7, #8]
 801c494:	3304      	adds	r3, #4
 801c496:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801c498:	68bb      	ldr	r3, [r7, #8]
 801c49a:	3302      	adds	r3, #2
 801c49c:	60bb      	str	r3, [r7, #8]


	switch (type)
 801c49e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4a2:	2b10      	cmp	r3, #16
 801c4a4:	f000 80da 	beq.w	801c65c <dns_answer+0x218>
 801c4a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4ac:	2b10      	cmp	r3, #16
 801c4ae:	f300 80d7 	bgt.w	801c660 <dns_answer+0x21c>
 801c4b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4b6:	2b0f      	cmp	r3, #15
 801c4b8:	d07d      	beq.n	801c5b6 <dns_answer+0x172>
 801c4ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4be:	2b0f      	cmp	r3, #15
 801c4c0:	f300 80ce 	bgt.w	801c660 <dns_answer+0x21c>
 801c4c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4c8:	2b0c      	cmp	r3, #12
 801c4ca:	dc26      	bgt.n	801c51a <dns_answer+0xd6>
 801c4cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	f340 80c5 	ble.w	801c660 <dns_answer+0x21c>
 801c4d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4da:	2201      	movs	r2, #1
 801c4dc:	fa02 f303 	lsl.w	r3, r2, r3
 801c4e0:	f241 32a4 	movw	r2, #5028	; 0x13a4
 801c4e4:	401a      	ands	r2, r3
 801c4e6:	2a00      	cmp	r2, #0
 801c4e8:	bf14      	ite	ne
 801c4ea:	2201      	movne	r2, #1
 801c4ec:	2200      	moveq	r2, #0
 801c4ee:	b2d2      	uxtb	r2, r2
 801c4f0:	2a00      	cmp	r2, #0
 801c4f2:	d133      	bne.n	801c55c <dns_answer+0x118>
 801c4f4:	f003 0240 	and.w	r2, r3, #64	; 0x40
 801c4f8:	2a00      	cmp	r2, #0
 801c4fa:	bf14      	ite	ne
 801c4fc:	2201      	movne	r2, #1
 801c4fe:	2200      	moveq	r2, #0
 801c500:	b2d2      	uxtb	r2, r2
 801c502:	2a00      	cmp	r2, #0
 801c504:	d170      	bne.n	801c5e8 <dns_answer+0x1a4>
 801c506:	f003 0302 	and.w	r3, r3, #2
 801c50a:	2b00      	cmp	r3, #0
 801c50c:	bf14      	ite	ne
 801c50e:	2301      	movne	r3, #1
 801c510:	2300      	moveq	r3, #0
 801c512:	b2db      	uxtb	r3, r3
 801c514:	2b00      	cmp	r3, #0
 801c516:	d105      	bne.n	801c524 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801c518:	e0a2      	b.n	801c660 <dns_answer+0x21c>
	switch (type)
 801c51a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c51e:	2b0d      	cmp	r3, #13
 801c520:	d032      	beq.n	801c588 <dns_answer+0x144>
		break;
 801c522:	e09d      	b.n	801c660 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801c524:	68bb      	ldr	r3, [r7, #8]
 801c526:	1c5a      	adds	r2, r3, #1
 801c528:	60ba      	str	r2, [r7, #8]
 801c52a:	781a      	ldrb	r2, [r3, #0]
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801c530:	68bb      	ldr	r3, [r7, #8]
 801c532:	1c5a      	adds	r2, r3, #1
 801c534:	60ba      	str	r2, [r7, #8]
 801c536:	687a      	ldr	r2, [r7, #4]
 801c538:	3201      	adds	r2, #1
 801c53a:	781b      	ldrb	r3, [r3, #0]
 801c53c:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801c53e:	68bb      	ldr	r3, [r7, #8]
 801c540:	1c5a      	adds	r2, r3, #1
 801c542:	60ba      	str	r2, [r7, #8]
 801c544:	687a      	ldr	r2, [r7, #4]
 801c546:	3202      	adds	r2, #2
 801c548:	781b      	ldrb	r3, [r3, #0]
 801c54a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801c54c:	68bb      	ldr	r3, [r7, #8]
 801c54e:	1c5a      	adds	r2, r3, #1
 801c550:	60ba      	str	r2, [r7, #8]
 801c552:	687a      	ldr	r2, [r7, #4]
 801c554:	3203      	adds	r2, #3
 801c556:	781b      	ldrb	r3, [r3, #0]
 801c558:	7013      	strb	r3, [r2, #0]
		break;
 801c55a:	e082      	b.n	801c662 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c55c:	f107 0210 	add.w	r2, r7, #16
 801c560:	23c0      	movs	r3, #192	; 0xc0
 801c562:	68b9      	ldr	r1, [r7, #8]
 801c564:	68f8      	ldr	r0, [r7, #12]
 801c566:	f7ff fec1 	bl	801c2ec <parse_name>
 801c56a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c56e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c572:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c576:	d101      	bne.n	801c57c <dns_answer+0x138>
 801c578:	2300      	movs	r3, #0
 801c57a:	e073      	b.n	801c664 <dns_answer+0x220>
		cp += len;
 801c57c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c580:	68ba      	ldr	r2, [r7, #8]
 801c582:	4413      	add	r3, r2
 801c584:	60bb      	str	r3, [r7, #8]
		break;
 801c586:	e06c      	b.n	801c662 <dns_answer+0x21e>
		len = *cp++;
 801c588:	68bb      	ldr	r3, [r7, #8]
 801c58a:	1c5a      	adds	r2, r3, #1
 801c58c:	60ba      	str	r2, [r7, #8]
 801c58e:	781b      	ldrb	r3, [r3, #0]
 801c590:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c598:	68ba      	ldr	r2, [r7, #8]
 801c59a:	4413      	add	r3, r2
 801c59c:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801c59e:	68bb      	ldr	r3, [r7, #8]
 801c5a0:	1c5a      	adds	r2, r3, #1
 801c5a2:	60ba      	str	r2, [r7, #8]
 801c5a4:	781b      	ldrb	r3, [r3, #0]
 801c5a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c5aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5ae:	68ba      	ldr	r2, [r7, #8]
 801c5b0:	4413      	add	r3, r2
 801c5b2:	60bb      	str	r3, [r7, #8]
		break;
 801c5b4:	e055      	b.n	801c662 <dns_answer+0x21e>
		cp += 2;
 801c5b6:	68bb      	ldr	r3, [r7, #8]
 801c5b8:	3302      	adds	r3, #2
 801c5ba:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c5bc:	f107 0210 	add.w	r2, r7, #16
 801c5c0:	23c0      	movs	r3, #192	; 0xc0
 801c5c2:	68b9      	ldr	r1, [r7, #8]
 801c5c4:	68f8      	ldr	r0, [r7, #12]
 801c5c6:	f7ff fe91 	bl	801c2ec <parse_name>
 801c5ca:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c5ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5d6:	d101      	bne.n	801c5dc <dns_answer+0x198>
 801c5d8:	2300      	movs	r3, #0
 801c5da:	e043      	b.n	801c664 <dns_answer+0x220>
		cp += len;
 801c5dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5e0:	68ba      	ldr	r2, [r7, #8]
 801c5e2:	4413      	add	r3, r2
 801c5e4:	60bb      	str	r3, [r7, #8]
		break;
 801c5e6:	e03c      	b.n	801c662 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c5e8:	f107 0210 	add.w	r2, r7, #16
 801c5ec:	23c0      	movs	r3, #192	; 0xc0
 801c5ee:	68b9      	ldr	r1, [r7, #8]
 801c5f0:	68f8      	ldr	r0, [r7, #12]
 801c5f2:	f7ff fe7b 	bl	801c2ec <parse_name>
 801c5f6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c5fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c602:	d101      	bne.n	801c608 <dns_answer+0x1c4>
 801c604:	2300      	movs	r3, #0
 801c606:	e02d      	b.n	801c664 <dns_answer+0x220>
		cp += len;
 801c608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c60c:	68ba      	ldr	r2, [r7, #8]
 801c60e:	4413      	add	r3, r2
 801c610:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c612:	f107 0210 	add.w	r2, r7, #16
 801c616:	23c0      	movs	r3, #192	; 0xc0
 801c618:	68b9      	ldr	r1, [r7, #8]
 801c61a:	68f8      	ldr	r0, [r7, #12]
 801c61c:	f7ff fe66 	bl	801c2ec <parse_name>
 801c620:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c624:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c628:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c62c:	d101      	bne.n	801c632 <dns_answer+0x1ee>
 801c62e:	2300      	movs	r3, #0
 801c630:	e018      	b.n	801c664 <dns_answer+0x220>
		cp += len;
 801c632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c636:	68ba      	ldr	r2, [r7, #8]
 801c638:	4413      	add	r3, r2
 801c63a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c63c:	68bb      	ldr	r3, [r7, #8]
 801c63e:	3304      	adds	r3, #4
 801c640:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c642:	68bb      	ldr	r3, [r7, #8]
 801c644:	3304      	adds	r3, #4
 801c646:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c648:	68bb      	ldr	r3, [r7, #8]
 801c64a:	3304      	adds	r3, #4
 801c64c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c64e:	68bb      	ldr	r3, [r7, #8]
 801c650:	3304      	adds	r3, #4
 801c652:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c654:	68bb      	ldr	r3, [r7, #8]
 801c656:	3304      	adds	r3, #4
 801c658:	60bb      	str	r3, [r7, #8]
		break;
 801c65a:	e002      	b.n	801c662 <dns_answer+0x21e>
		break;
 801c65c:	bf00      	nop
 801c65e:	e000      	b.n	801c662 <dns_answer+0x21e>
		break;
 801c660:	bf00      	nop
	}

	return cp;
 801c662:	68bb      	ldr	r3, [r7, #8]
}
 801c664:	4618      	mov	r0, r3
 801c666:	37d8      	adds	r7, #216	; 0xd8
 801c668:	46bd      	mov	sp, r7
 801c66a:	bd80      	pop	{r7, pc}

0801c66c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b088      	sub	sp, #32
 801c670:	af00      	add	r7, sp, #0
 801c672:	60f8      	str	r0, [r7, #12]
 801c674:	60b9      	str	r1, [r7, #8]
 801c676:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c678:	68bb      	ldr	r3, [r7, #8]
 801c67a:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c67c:	2212      	movs	r2, #18
 801c67e:	2100      	movs	r1, #0
 801c680:	68f8      	ldr	r0, [r7, #12]
 801c682:	f011 fa33 	bl	802daec <memset>

	pdhdr->id = get16(&msg[0]);
 801c686:	6978      	ldr	r0, [r7, #20]
 801c688:	f7ff fdfd 	bl	801c286 <get16>
 801c68c:	4603      	mov	r3, r0
 801c68e:	461a      	mov	r2, r3
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c694:	697b      	ldr	r3, [r7, #20]
 801c696:	3302      	adds	r3, #2
 801c698:	4618      	mov	r0, r3
 801c69a:	f7ff fdf4 	bl	801c286 <get16>
 801c69e:	4603      	mov	r3, r0
 801c6a0:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c6a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	da02      	bge.n	801c6b0 <parseDNSMSG+0x44>
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	2201      	movs	r2, #1
 801c6ae:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c6b0:	8a7b      	ldrh	r3, [r7, #18]
 801c6b2:	0adb      	lsrs	r3, r3, #11
 801c6b4:	b29b      	uxth	r3, r3
 801c6b6:	b2db      	uxtb	r3, r3
 801c6b8:	f003 030f 	and.w	r3, r3, #15
 801c6bc:	b2da      	uxtb	r2, r3
 801c6be:	68fb      	ldr	r3, [r7, #12]
 801c6c0:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c6c2:	8a7b      	ldrh	r3, [r7, #18]
 801c6c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	d002      	beq.n	801c6d2 <parseDNSMSG+0x66>
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	2201      	movs	r2, #1
 801c6d0:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c6d2:	8a7b      	ldrh	r3, [r7, #18]
 801c6d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d002      	beq.n	801c6e2 <parseDNSMSG+0x76>
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	2201      	movs	r2, #1
 801c6e0:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c6e2:	8a7b      	ldrh	r3, [r7, #18]
 801c6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d002      	beq.n	801c6f2 <parseDNSMSG+0x86>
 801c6ec:	68fb      	ldr	r3, [r7, #12]
 801c6ee:	2201      	movs	r2, #1
 801c6f0:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c6f2:	8a7b      	ldrh	r3, [r7, #18]
 801c6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c6f8:	2b00      	cmp	r3, #0
 801c6fa:	d002      	beq.n	801c702 <parseDNSMSG+0x96>
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	2201      	movs	r2, #1
 801c700:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c702:	8a7b      	ldrh	r3, [r7, #18]
 801c704:	b2db      	uxtb	r3, r3
 801c706:	f003 030f 	and.w	r3, r3, #15
 801c70a:	b2da      	uxtb	r2, r3
 801c70c:	68fb      	ldr	r3, [r7, #12]
 801c70e:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c710:	697b      	ldr	r3, [r7, #20]
 801c712:	3304      	adds	r3, #4
 801c714:	4618      	mov	r0, r3
 801c716:	f7ff fdb6 	bl	801c286 <get16>
 801c71a:	4603      	mov	r3, r0
 801c71c:	461a      	mov	r2, r3
 801c71e:	68fb      	ldr	r3, [r7, #12]
 801c720:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c722:	697b      	ldr	r3, [r7, #20]
 801c724:	3306      	adds	r3, #6
 801c726:	4618      	mov	r0, r3
 801c728:	f7ff fdad 	bl	801c286 <get16>
 801c72c:	4603      	mov	r3, r0
 801c72e:	461a      	mov	r2, r3
 801c730:	68fb      	ldr	r3, [r7, #12]
 801c732:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c734:	697b      	ldr	r3, [r7, #20]
 801c736:	3308      	adds	r3, #8
 801c738:	4618      	mov	r0, r3
 801c73a:	f7ff fda4 	bl	801c286 <get16>
 801c73e:	4603      	mov	r3, r0
 801c740:	461a      	mov	r2, r3
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c746:	697b      	ldr	r3, [r7, #20]
 801c748:	330a      	adds	r3, #10
 801c74a:	4618      	mov	r0, r3
 801c74c:	f7ff fd9b 	bl	801c286 <get16>
 801c750:	4603      	mov	r3, r0
 801c752:	461a      	mov	r2, r3
 801c754:	68fb      	ldr	r3, [r7, #12]
 801c756:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c758:	697b      	ldr	r3, [r7, #20]
 801c75a:	330c      	adds	r3, #12
 801c75c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c75e:	2300      	movs	r3, #0
 801c760:	83fb      	strh	r3, [r7, #30]
 801c762:	e00d      	b.n	801c780 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c764:	69b9      	ldr	r1, [r7, #24]
 801c766:	6978      	ldr	r0, [r7, #20]
 801c768:	f7ff fe47 	bl	801c3fa <dns_question>
 801c76c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c76e:	69bb      	ldr	r3, [r7, #24]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d102      	bne.n	801c77a <parseDNSMSG+0x10e>
 801c774:	f04f 33ff 	mov.w	r3, #4294967295
 801c778:	e03b      	b.n	801c7f2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c77a:	8bfb      	ldrh	r3, [r7, #30]
 801c77c:	3301      	adds	r3, #1
 801c77e:	83fb      	strh	r3, [r7, #30]
 801c780:	68fb      	ldr	r3, [r7, #12]
 801c782:	895b      	ldrh	r3, [r3, #10]
 801c784:	8bfa      	ldrh	r2, [r7, #30]
 801c786:	429a      	cmp	r2, r3
 801c788:	d3ec      	bcc.n	801c764 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c78a:	2300      	movs	r3, #0
 801c78c:	83fb      	strh	r3, [r7, #30]
 801c78e:	e00e      	b.n	801c7ae <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c790:	687a      	ldr	r2, [r7, #4]
 801c792:	69b9      	ldr	r1, [r7, #24]
 801c794:	6978      	ldr	r0, [r7, #20]
 801c796:	f7ff fe55 	bl	801c444 <dns_answer>
 801c79a:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c79c:	69bb      	ldr	r3, [r7, #24]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d102      	bne.n	801c7a8 <parseDNSMSG+0x13c>
 801c7a2:	f04f 33ff 	mov.w	r3, #4294967295
 801c7a6:	e024      	b.n	801c7f2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c7a8:	8bfb      	ldrh	r3, [r7, #30]
 801c7aa:	3301      	adds	r3, #1
 801c7ac:	83fb      	strh	r3, [r7, #30]
 801c7ae:	68fb      	ldr	r3, [r7, #12]
 801c7b0:	899b      	ldrh	r3, [r3, #12]
 801c7b2:	8bfa      	ldrh	r2, [r7, #30]
 801c7b4:	429a      	cmp	r2, r3
 801c7b6:	d3eb      	bcc.n	801c790 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c7b8:	2300      	movs	r3, #0
 801c7ba:	83fb      	strh	r3, [r7, #30]
 801c7bc:	e002      	b.n	801c7c4 <parseDNSMSG+0x158>
 801c7be:	8bfb      	ldrh	r3, [r7, #30]
 801c7c0:	3301      	adds	r3, #1
 801c7c2:	83fb      	strh	r3, [r7, #30]
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	89db      	ldrh	r3, [r3, #14]
 801c7c8:	8bfa      	ldrh	r2, [r7, #30]
 801c7ca:	429a      	cmp	r2, r3
 801c7cc:	d3f7      	bcc.n	801c7be <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c7ce:	2300      	movs	r3, #0
 801c7d0:	83fb      	strh	r3, [r7, #30]
 801c7d2:	e002      	b.n	801c7da <parseDNSMSG+0x16e>
 801c7d4:	8bfb      	ldrh	r3, [r7, #30]
 801c7d6:	3301      	adds	r3, #1
 801c7d8:	83fb      	strh	r3, [r7, #30]
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	8a1b      	ldrh	r3, [r3, #16]
 801c7de:	8bfa      	ldrh	r2, [r7, #30]
 801c7e0:	429a      	cmp	r2, r3
 801c7e2:	d3f7      	bcc.n	801c7d4 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c7e4:	68fb      	ldr	r3, [r7, #12]
 801c7e6:	7a1b      	ldrb	r3, [r3, #8]
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d101      	bne.n	801c7f0 <parseDNSMSG+0x184>
 801c7ec:	2301      	movs	r3, #1
 801c7ee:	e000      	b.n	801c7f2 <parseDNSMSG+0x186>
	else return 0;
 801c7f0:	2300      	movs	r3, #0
}
 801c7f2:	4618      	mov	r0, r3
 801c7f4:	3720      	adds	r7, #32
 801c7f6:	46bd      	mov	sp, r7
 801c7f8:	bd80      	pop	{r7, pc}
	...

0801c7fc <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c7fc:	b580      	push	{r7, lr}
 801c7fe:	b0b8      	sub	sp, #224	; 0xe0
 801c800:	af00      	add	r7, sp, #0
 801c802:	60b9      	str	r1, [r7, #8]
 801c804:	607a      	str	r2, [r7, #4]
 801c806:	461a      	mov	r2, r3
 801c808:	4603      	mov	r3, r0
 801c80a:	81fb      	strh	r3, [r7, #14]
 801c80c:	4613      	mov	r3, r2
 801c80e:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 801c816:	4b57      	ldr	r3, [pc, #348]	; (801c974 <dns_makequery+0x178>)
 801c818:	881b      	ldrh	r3, [r3, #0]
 801c81a:	3301      	adds	r3, #1
 801c81c:	b29a      	uxth	r2, r3
 801c81e:	4b55      	ldr	r3, [pc, #340]	; (801c974 <dns_makequery+0x178>)
 801c820:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c822:	4b54      	ldr	r3, [pc, #336]	; (801c974 <dns_makequery+0x178>)
 801c824:	881b      	ldrh	r3, [r3, #0]
 801c826:	4619      	mov	r1, r3
 801c828:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c82c:	f7ff fd43 	bl	801c2b6 <put16>
 801c830:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c834:	89fb      	ldrh	r3, [r7, #14]
 801c836:	02db      	lsls	r3, r3, #11
 801c838:	b21b      	sxth	r3, r3
 801c83a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c83e:	b21b      	sxth	r3, r3
 801c840:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 801c844:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 801c848:	4619      	mov	r1, r3
 801c84a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c84e:	f7ff fd32 	bl	801c2b6 <put16>
 801c852:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 801c856:	2101      	movs	r1, #1
 801c858:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c85c:	f7ff fd2b 	bl	801c2b6 <put16>
 801c860:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c864:	2100      	movs	r1, #0
 801c866:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c86a:	f7ff fd24 	bl	801c2b6 <put16>
 801c86e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c872:	2100      	movs	r1, #0
 801c874:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c878:	f7ff fd1d 	bl	801c2b6 <put16>
 801c87c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c880:	2100      	movs	r1, #0
 801c882:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c886:	f7ff fd16 	bl	801c2b6 <put16>
 801c88a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 801c88e:	f107 0310 	add.w	r3, r7, #16
 801c892:	68b9      	ldr	r1, [r7, #8]
 801c894:	4618      	mov	r0, r3
 801c896:	f011 faf6 	bl	802de86 <strcpy>
	dname = sname;
 801c89a:	f107 0310 	add.w	r3, r7, #16
 801c89e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 801c8a2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c8a6:	f7f3 fcfb 	bl	80102a0 <strlen>
 801c8aa:	4603      	mov	r3, r0
 801c8ac:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c8b0:	212e      	movs	r1, #46	; 0x2e
 801c8b2:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c8b6:	f011 f930 	bl	802db1a <strchr>
 801c8ba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c8be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d006      	beq.n	801c8d4 <dns_makequery+0xd8>
 801c8c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c8ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c8ce:	1ad3      	subs	r3, r2, r3
 801c8d0:	81bb      	strh	r3, [r7, #12]
 801c8d2:	e002      	b.n	801c8da <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c8d4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801c8d8:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c8da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c8de:	1c5a      	adds	r2, r3, #1
 801c8e0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c8e4:	89ba      	ldrh	r2, [r7, #12]
 801c8e6:	b2d2      	uxtb	r2, r2
 801c8e8:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c8ea:	89bb      	ldrh	r3, [r7, #12]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d029      	beq.n	801c944 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c8f0:	89bb      	ldrh	r3, [r7, #12]
 801c8f2:	461a      	mov	r2, r3
 801c8f4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c8f8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c8fc:	f011 f950 	bl	802dba0 <strncpy>
		cp += len;
 801c900:	89bb      	ldrh	r3, [r7, #12]
 801c902:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c906:	4413      	add	r3, r2
 801c908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801c90c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c910:	2b00      	cmp	r3, #0
 801c912:	d107      	bne.n	801c924 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c918:	1c5a      	adds	r2, r3, #1
 801c91a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c91e:	2200      	movs	r2, #0
 801c920:	701a      	strb	r2, [r3, #0]
			break;
 801c922:	e010      	b.n	801c946 <dns_makequery+0x14a>
		}
		dname += len+1;
 801c924:	89bb      	ldrh	r3, [r7, #12]
 801c926:	3301      	adds	r3, #1
 801c928:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c92c:	4413      	add	r3, r2
 801c92e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 801c932:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801c936:	89bb      	ldrh	r3, [r7, #12]
 801c938:	1ad3      	subs	r3, r2, r3
 801c93a:	b29b      	uxth	r3, r3
 801c93c:	3b01      	subs	r3, #1
 801c93e:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 801c942:	e7b5      	b.n	801c8b0 <dns_makequery+0xb4>
		if (len == 0) break;
 801c944:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c946:	2101      	movs	r1, #1
 801c948:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c94c:	f7ff fcb3 	bl	801c2b6 <put16>
 801c950:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c954:	2101      	movs	r1, #1
 801c956:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c95a:	f7ff fcac 	bl	801c2b6 <put16>
 801c95e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c962:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	1ad3      	subs	r3, r2, r3
 801c96a:	b21b      	sxth	r3, r3
}
 801c96c:	4618      	mov	r0, r3
 801c96e:	37e0      	adds	r7, #224	; 0xe0
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}
 801c974:	200009e2 	.word	0x200009e2

0801c978 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c978:	b480      	push	{r7}
 801c97a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c97c:	4b0f      	ldr	r3, [pc, #60]	; (801c9bc <check_DNS_timeout+0x44>)
 801c97e:	681b      	ldr	r3, [r3, #0]
 801c980:	2b02      	cmp	r3, #2
 801c982:	d914      	bls.n	801c9ae <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c984:	4b0d      	ldr	r3, [pc, #52]	; (801c9bc <check_DNS_timeout+0x44>)
 801c986:	2200      	movs	r2, #0
 801c988:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c98a:	4b0d      	ldr	r3, [pc, #52]	; (801c9c0 <check_DNS_timeout+0x48>)
 801c98c:	781b      	ldrb	r3, [r3, #0]
 801c98e:	2b01      	cmp	r3, #1
 801c990:	d905      	bls.n	801c99e <check_DNS_timeout+0x26>
			retry_count = 0;
 801c992:	4b0b      	ldr	r3, [pc, #44]	; (801c9c0 <check_DNS_timeout+0x48>)
 801c994:	2200      	movs	r2, #0
 801c996:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c998:	f04f 33ff 	mov.w	r3, #4294967295
 801c99c:	e008      	b.n	801c9b0 <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c99e:	4b08      	ldr	r3, [pc, #32]	; (801c9c0 <check_DNS_timeout+0x48>)
 801c9a0:	781b      	ldrb	r3, [r3, #0]
 801c9a2:	3301      	adds	r3, #1
 801c9a4:	b2da      	uxtb	r2, r3
 801c9a6:	4b06      	ldr	r3, [pc, #24]	; (801c9c0 <check_DNS_timeout+0x48>)
 801c9a8:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	e000      	b.n	801c9b0 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801c9ae:	2301      	movs	r3, #1
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	46bd      	mov	sp, r7
 801c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9b8:	4770      	bx	lr
 801c9ba:	bf00      	nop
 801c9bc:	200009e4 	.word	0x200009e4
 801c9c0:	200009e8 	.word	0x200009e8

0801c9c4 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801c9c4:	b480      	push	{r7}
 801c9c6:	b083      	sub	sp, #12
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	6039      	str	r1, [r7, #0]
 801c9ce:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801c9d0:	4a07      	ldr	r2, [pc, #28]	; (801c9f0 <DNS_init+0x2c>)
 801c9d2:	79fb      	ldrb	r3, [r7, #7]
 801c9d4:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801c9d6:	4a07      	ldr	r2, [pc, #28]	; (801c9f4 <DNS_init+0x30>)
 801c9d8:	683b      	ldr	r3, [r7, #0]
 801c9da:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801c9dc:	4b06      	ldr	r3, [pc, #24]	; (801c9f8 <DNS_init+0x34>)
 801c9de:	f241 1222 	movw	r2, #4386	; 0x1122
 801c9e2:	801a      	strh	r2, [r3, #0]
}
 801c9e4:	bf00      	nop
 801c9e6:	370c      	adds	r7, #12
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ee:	4770      	bx	lr
 801c9f0:	200009e0 	.word	0x200009e0
 801c9f4:	200009dc 	.word	0x200009dc
 801c9f8:	200009e2 	.word	0x200009e2

0801c9fc <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801c9fc:	b590      	push	{r4, r7, lr}
 801c9fe:	b08f      	sub	sp, #60	; 0x3c
 801ca00:	af02      	add	r7, sp, #8
 801ca02:	60f8      	str	r0, [r7, #12]
 801ca04:	60b9      	str	r1, [r7, #8]
 801ca06:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801ca08:	4b3b      	ldr	r3, [pc, #236]	; (801caf8 <DNS_run+0xfc>)
 801ca0a:	2200      	movs	r2, #0
 801ca0c:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801ca0e:	4b3b      	ldr	r3, [pc, #236]	; (801cafc <DNS_run+0x100>)
 801ca10:	2200      	movs	r2, #0
 801ca12:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801ca14:	4b3a      	ldr	r3, [pc, #232]	; (801cb00 <DNS_run+0x104>)
 801ca16:	7818      	ldrb	r0, [r3, #0]
 801ca18:	2300      	movs	r3, #0
 801ca1a:	2200      	movs	r2, #0
 801ca1c:	2102      	movs	r1, #2
 801ca1e:	f7fc fa4f 	bl	8018ec0 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801ca22:	4b38      	ldr	r3, [pc, #224]	; (801cb04 <DNS_run+0x108>)
 801ca24:	681a      	ldr	r2, [r3, #0]
 801ca26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca2a:	68b9      	ldr	r1, [r7, #8]
 801ca2c:	2000      	movs	r0, #0
 801ca2e:	f7ff fee5 	bl	801c7fc <dns_makequery>
 801ca32:	4603      	mov	r3, r0
 801ca34:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801ca36:	4b32      	ldr	r3, [pc, #200]	; (801cb00 <DNS_run+0x104>)
 801ca38:	7818      	ldrb	r0, [r3, #0]
 801ca3a:	4b32      	ldr	r3, [pc, #200]	; (801cb04 <DNS_run+0x108>)
 801ca3c:	6819      	ldr	r1, [r3, #0]
 801ca3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca40:	2335      	movs	r3, #53	; 0x35
 801ca42:	9300      	str	r3, [sp, #0]
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	f7fc ff19 	bl	801987c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801ca4a:	4b2d      	ldr	r3, [pc, #180]	; (801cb00 <DNS_run+0x104>)
 801ca4c:	781b      	ldrb	r3, [r3, #0]
 801ca4e:	4618      	mov	r0, r3
 801ca50:	f7fc f8eb 	bl	8018c2a <getSn_RX_RSR>
 801ca54:	4603      	mov	r3, r0
 801ca56:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ca58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d029      	beq.n	801cab2 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801ca5e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ca60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca64:	d902      	bls.n	801ca6c <DNS_run+0x70>
 801ca66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801ca6c:	4b24      	ldr	r3, [pc, #144]	; (801cb00 <DNS_run+0x104>)
 801ca6e:	7818      	ldrb	r0, [r3, #0]
 801ca70:	4b24      	ldr	r3, [pc, #144]	; (801cb04 <DNS_run+0x108>)
 801ca72:	6819      	ldr	r1, [r3, #0]
 801ca74:	f107 0414 	add.w	r4, r7, #20
 801ca78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca7a:	f107 0312 	add.w	r3, r7, #18
 801ca7e:	9300      	str	r3, [sp, #0]
 801ca80:	4623      	mov	r3, r4
 801ca82:	f7fd f831 	bl	8019ae8 <recvfrom>
 801ca86:	4603      	mov	r3, r0
 801ca88:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801ca8a:	4b1e      	ldr	r3, [pc, #120]	; (801cb04 <DNS_run+0x108>)
 801ca8c:	6819      	ldr	r1, [r3, #0]
 801ca8e:	f107 0318 	add.w	r3, r7, #24
 801ca92:	687a      	ldr	r2, [r7, #4]
 801ca94:	4618      	mov	r0, r3
 801ca96:	f7ff fde9 	bl	801c66c <parseDNSMSG>
 801ca9a:	4603      	mov	r3, r0
 801ca9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 801caa0:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801caa2:	4b17      	ldr	r3, [pc, #92]	; (801cb00 <DNS_run+0x104>)
 801caa4:	781b      	ldrb	r3, [r3, #0]
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7fc fb1e 	bl	80190e8 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801caac:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801cab0:	e01e      	b.n	801caf0 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801cab2:	f7ff ff61 	bl	801c978 <check_DNS_timeout>
 801cab6:	4603      	mov	r3, r0
 801cab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 801cabc:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	da06      	bge.n	801cad2 <DNS_run+0xd6>
			close(DNS_SOCKET);
 801cac4:	4b0e      	ldr	r3, [pc, #56]	; (801cb00 <DNS_run+0x104>)
 801cac6:	781b      	ldrb	r3, [r3, #0]
 801cac8:	4618      	mov	r0, r3
 801caca:	f7fc fb0d 	bl	80190e8 <close>
			return 0; // timeout occurred
 801cace:	2300      	movs	r3, #0
 801cad0:	e00e      	b.n	801caf0 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801cad2:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801cad6:	2b00      	cmp	r3, #0
 801cad8:	d1b7      	bne.n	801ca4a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801cada:	4b09      	ldr	r3, [pc, #36]	; (801cb00 <DNS_run+0x104>)
 801cadc:	7818      	ldrb	r0, [r3, #0]
 801cade:	4b09      	ldr	r3, [pc, #36]	; (801cb04 <DNS_run+0x108>)
 801cae0:	6819      	ldr	r1, [r3, #0]
 801cae2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801cae4:	2335      	movs	r3, #53	; 0x35
 801cae6:	9300      	str	r3, [sp, #0]
 801cae8:	68fb      	ldr	r3, [r7, #12]
 801caea:	f7fc fec7 	bl	801987c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801caee:	e7ac      	b.n	801ca4a <DNS_run+0x4e>
}
 801caf0:	4618      	mov	r0, r3
 801caf2:	3734      	adds	r7, #52	; 0x34
 801caf4:	46bd      	mov	sp, r7
 801caf6:	bd90      	pop	{r4, r7, pc}
 801caf8:	200009e8 	.word	0x200009e8
 801cafc:	200009e4 	.word	0x200009e4
 801cb00:	200009e0 	.word	0x200009e0
 801cb04:	200009dc 	.word	0x200009dc

0801cb08 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801cb08:	b480      	push	{r7}
 801cb0a:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801cb0c:	4b04      	ldr	r3, [pc, #16]	; (801cb20 <DNS_time_handler+0x18>)
 801cb0e:	681b      	ldr	r3, [r3, #0]
 801cb10:	3301      	adds	r3, #1
 801cb12:	4a03      	ldr	r2, [pc, #12]	; (801cb20 <DNS_time_handler+0x18>)
 801cb14:	6013      	str	r3, [r2, #0]
}
 801cb16:	bf00      	nop
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb1e:	4770      	bx	lr
 801cb20:	200009e4 	.word	0x200009e4

0801cb24 <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801cb24:	b480      	push	{r7}
 801cb26:	af00      	add	r7, sp, #0
 801cb28:	bf00      	nop
 801cb2a:	46bd      	mov	sp, r7
 801cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb30:	4770      	bx	lr
	...

0801cb34 <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801cb34:	b480      	push	{r7}
 801cb36:	b083      	sub	sp, #12
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
 801cb3c:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d002      	beq.n	801cb4a <dns_service_reg_cb_mutex+0x16>
 801cb44:	4a07      	ldr	r2, [pc, #28]	; (801cb64 <dns_service_reg_cb_mutex+0x30>)
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801cb4a:	683b      	ldr	r3, [r7, #0]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d002      	beq.n	801cb56 <dns_service_reg_cb_mutex+0x22>
 801cb50:	4a05      	ldr	r2, [pc, #20]	; (801cb68 <dns_service_reg_cb_mutex+0x34>)
 801cb52:	683b      	ldr	r3, [r7, #0]
 801cb54:	6013      	str	r3, [r2, #0]

}
 801cb56:	bf00      	nop
 801cb58:	370c      	adds	r7, #12
 801cb5a:	46bd      	mov	sp, r7
 801cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb60:	4770      	bx	lr
 801cb62:	bf00      	nop
 801cb64:	20000114 	.word	0x20000114
 801cb68:	20000118 	.word	0x20000118

0801cb6c <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801cb6c:	b480      	push	{r7}
 801cb6e:	b083      	sub	sp, #12
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	2b00      	cmp	r3, #0
 801cb78:	d002      	beq.n	801cb80 <dns_service_reg_cb_net_ready+0x14>
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	4a03      	ldr	r2, [pc, #12]	; (801cb8c <dns_service_reg_cb_net_ready+0x20>)
 801cb7e:	6013      	str	r3, [r2, #0]

}
 801cb80:	bf00      	nop
 801cb82:	370c      	adds	r7, #12
 801cb84:	46bd      	mov	sp, r7
 801cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8a:	4770      	bx	lr
 801cb8c:	2000011c 	.word	0x2000011c

0801cb90 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801cb90:	b580      	push	{r7, lr}
 801cb92:	b082      	sub	sp, #8
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	4603      	mov	r3, r0
 801cb98:	6039      	str	r1, [r7, #0]
 801cb9a:	71fb      	strb	r3, [r7, #7]
 801cb9c:	4613      	mov	r3, r2
 801cb9e:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801cba0:	88bb      	ldrh	r3, [r7, #4]
 801cba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cba6:	d202      	bcs.n	801cbae <dns_service_init+0x1e>
 801cba8:	f04f 33ff 	mov.w	r3, #4294967295
 801cbac:	e005      	b.n	801cbba <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801cbae:	79fb      	ldrb	r3, [r7, #7]
 801cbb0:	6839      	ldr	r1, [r7, #0]
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	f7ff ff06 	bl	801c9c4 <DNS_init>
	return 0;
 801cbb8:	2300      	movs	r3, #0
}
 801cbba:	4618      	mov	r0, r3
 801cbbc:	3708      	adds	r7, #8
 801cbbe:	46bd      	mov	sp, r7
 801cbc0:	bd80      	pop	{r7, pc}
	...

0801cbc4 <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801cbc4:	b480      	push	{r7}
 801cbc6:	b083      	sub	sp, #12
 801cbc8:	af00      	add	r7, sp, #0
 801cbca:	6078      	str	r0, [r7, #4]
 801cbcc:	687b      	ldr	r3, [r7, #4]
 801cbce:	681b      	ldr	r3, [r3, #0]
 801cbd0:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801cbd2:	4b04      	ldr	r3, [pc, #16]	; (801cbe4 <dns_service_set_dns_ip+0x20>)
 801cbd4:	601a      	str	r2, [r3, #0]
}
 801cbd6:	bf00      	nop
 801cbd8:	370c      	adds	r7, #12
 801cbda:	46bd      	mov	sp, r7
 801cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbe0:	4770      	bx	lr
 801cbe2:	bf00      	nop
 801cbe4:	200009ec 	.word	0x200009ec

0801cbe8 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801cbe8:	b580      	push	{r7, lr}
 801cbea:	b084      	sub	sp, #16
 801cbec:	af00      	add	r7, sp, #0
 801cbee:	6078      	str	r0, [r7, #4]
 801cbf0:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801cbf2:	4b0e      	ldr	r3, [pc, #56]	; (801cc2c <dns_service_resolve_name+0x44>)
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady()){
 801cbf8:	4b0d      	ldr	r3, [pc, #52]	; (801cc30 <dns_service_resolve_name+0x48>)
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	4798      	blx	r3
 801cbfe:	4603      	mov	r3, r0
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d007      	beq.n	801cc14 <dns_service_resolve_name+0x2c>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801cc04:	683a      	ldr	r2, [r7, #0]
 801cc06:	6879      	ldr	r1, [r7, #4]
 801cc08:	480a      	ldr	r0, [pc, #40]	; (801cc34 <dns_service_resolve_name+0x4c>)
 801cc0a:	f7ff fef7 	bl	801c9fc <DNS_run>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	73fb      	strb	r3, [r7, #15]
 801cc12:	e001      	b.n	801cc18 <dns_service_resolve_name+0x30>
	}else{
		err = -1;
 801cc14:	23ff      	movs	r3, #255	; 0xff
 801cc16:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801cc18:	4b07      	ldr	r3, [pc, #28]	; (801cc38 <dns_service_resolve_name+0x50>)
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	4798      	blx	r3
#endif
	return err;
 801cc1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cc22:	4618      	mov	r0, r3
 801cc24:	3710      	adds	r7, #16
 801cc26:	46bd      	mov	sp, r7
 801cc28:	bd80      	pop	{r7, pc}
 801cc2a:	bf00      	nop
 801cc2c:	20000114 	.word	0x20000114
 801cc30:	2000011c 	.word	0x2000011c
 801cc34:	200009ec 	.word	0x200009ec
 801cc38:	20000118 	.word	0x20000118

0801cc3c <dns_service_increment_second>:

void dns_service_increment_second(void){
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801cc40:	f7ff ff62 	bl	801cb08 <DNS_time_handler>
}
 801cc44:	bf00      	nop
 801cc46:	bd80      	pop	{r7, pc}

0801cc48 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801cc48:	b580      	push	{r7, lr}
 801cc4a:	b086      	sub	sp, #24
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d101      	bne.n	801cc5a <isValidIPv4+0x12>
        return false;
 801cc56:	2300      	movs	r3, #0
 801cc58:	e068      	b.n	801cd2c <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801cc5a:	2300      	movs	r3, #0
 801cc5c:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801cc5e:	2300      	movs	r3, #0
 801cc60:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801cc62:	2300      	movs	r3, #0
 801cc64:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801cc66:	2300      	movs	r3, #0
 801cc68:	60bb      	str	r3, [r7, #8]
 801cc6a:	e043      	b.n	801ccf4 <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801cc6c:	687a      	ldr	r2, [r7, #4]
 801cc6e:	68bb      	ldr	r3, [r7, #8]
 801cc70:	4413      	add	r3, r2
 801cc72:	781b      	ldrb	r3, [r3, #0]
 801cc74:	3b30      	subs	r3, #48	; 0x30
 801cc76:	2b09      	cmp	r3, #9
 801cc78:	d818      	bhi.n	801ccac <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801cc7a:	697a      	ldr	r2, [r7, #20]
 801cc7c:	4613      	mov	r3, r2
 801cc7e:	009b      	lsls	r3, r3, #2
 801cc80:	4413      	add	r3, r2
 801cc82:	005b      	lsls	r3, r3, #1
 801cc84:	4619      	mov	r1, r3
 801cc86:	687a      	ldr	r2, [r7, #4]
 801cc88:	68bb      	ldr	r3, [r7, #8]
 801cc8a:	4413      	add	r3, r2
 801cc8c:	781b      	ldrb	r3, [r3, #0]
 801cc8e:	3b30      	subs	r3, #48	; 0x30
 801cc90:	440b      	add	r3, r1
 801cc92:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801cc94:	697b      	ldr	r3, [r7, #20]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	db02      	blt.n	801cca0 <isValidIPv4+0x58>
 801cc9a:	697b      	ldr	r3, [r7, #20]
 801cc9c:	2bff      	cmp	r3, #255	; 0xff
 801cc9e:	dd01      	ble.n	801cca4 <isValidIPv4+0x5c>
                return false;
 801cca0:	2300      	movs	r3, #0
 801cca2:	e043      	b.n	801cd2c <isValidIPv4+0xe4>
            }

            segmentLength++;
 801cca4:	68fb      	ldr	r3, [r7, #12]
 801cca6:	3301      	adds	r3, #1
 801cca8:	60fb      	str	r3, [r7, #12]
 801ccaa:	e020      	b.n	801ccee <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801ccac:	687a      	ldr	r2, [r7, #4]
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	4413      	add	r3, r2
 801ccb2:	781b      	ldrb	r3, [r3, #0]
 801ccb4:	2b2e      	cmp	r3, #46	; 0x2e
 801ccb6:	d118      	bne.n	801ccea <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801ccb8:	68fb      	ldr	r3, [r7, #12]
 801ccba:	2b01      	cmp	r3, #1
 801ccbc:	dd09      	ble.n	801ccd2 <isValidIPv4+0x8a>
 801ccbe:	68fb      	ldr	r3, [r7, #12]
 801ccc0:	68ba      	ldr	r2, [r7, #8]
 801ccc2:	1ad3      	subs	r3, r2, r3
 801ccc4:	687a      	ldr	r2, [r7, #4]
 801ccc6:	4413      	add	r3, r2
 801ccc8:	781b      	ldrb	r3, [r3, #0]
 801ccca:	2b30      	cmp	r3, #48	; 0x30
 801cccc:	d101      	bne.n	801ccd2 <isValidIPv4+0x8a>
                return false;
 801ccce:	2300      	movs	r3, #0
 801ccd0:	e02c      	b.n	801cd2c <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801ccd2:	2300      	movs	r3, #0
 801ccd4:	617b      	str	r3, [r7, #20]
            count++;
 801ccd6:	693b      	ldr	r3, [r7, #16]
 801ccd8:	3301      	adds	r3, #1
 801ccda:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801ccdc:	2300      	movs	r3, #0
 801ccde:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801cce0:	693b      	ldr	r3, [r7, #16]
 801cce2:	2b03      	cmp	r3, #3
 801cce4:	dd03      	ble.n	801ccee <isValidIPv4+0xa6>
                return false;
 801cce6:	2300      	movs	r3, #0
 801cce8:	e020      	b.n	801cd2c <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801ccea:	2300      	movs	r3, #0
 801ccec:	e01e      	b.n	801cd2c <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801ccee:	68bb      	ldr	r3, [r7, #8]
 801ccf0:	3301      	adds	r3, #1
 801ccf2:	60bb      	str	r3, [r7, #8]
 801ccf4:	687a      	ldr	r2, [r7, #4]
 801ccf6:	68bb      	ldr	r3, [r7, #8]
 801ccf8:	4413      	add	r3, r2
 801ccfa:	781b      	ldrb	r3, [r3, #0]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d1b5      	bne.n	801cc6c <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	2b01      	cmp	r3, #1
 801cd04:	dd0c      	ble.n	801cd20 <isValidIPv4+0xd8>
 801cd06:	6878      	ldr	r0, [r7, #4]
 801cd08:	f7f3 faca 	bl	80102a0 <strlen>
 801cd0c:	4602      	mov	r2, r0
 801cd0e:	68fb      	ldr	r3, [r7, #12]
 801cd10:	1ad3      	subs	r3, r2, r3
 801cd12:	687a      	ldr	r2, [r7, #4]
 801cd14:	4413      	add	r3, r2
 801cd16:	781b      	ldrb	r3, [r3, #0]
 801cd18:	2b30      	cmp	r3, #48	; 0x30
 801cd1a:	d101      	bne.n	801cd20 <isValidIPv4+0xd8>
        return false;
 801cd1c:	2300      	movs	r3, #0
 801cd1e:	e005      	b.n	801cd2c <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801cd20:	693b      	ldr	r3, [r7, #16]
 801cd22:	2b03      	cmp	r3, #3
 801cd24:	bf0c      	ite	eq
 801cd26:	2301      	moveq	r3, #1
 801cd28:	2300      	movne	r3, #0
 801cd2a:	b2db      	uxtb	r3, r3
}
 801cd2c:	4618      	mov	r0, r3
 801cd2e:	3718      	adds	r7, #24
 801cd30:	46bd      	mov	sp, r7
 801cd32:	bd80      	pop	{r7, pc}

0801cd34 <NewMessageData>:
#include "MQTTClient.h"

#include "main.h"
#include "cmsis_os.h" // this 2 include is needed only for taskYELD() function

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801cd34:	b480      	push	{r7}
 801cd36:	b085      	sub	sp, #20
 801cd38:	af00      	add	r7, sp, #0
 801cd3a:	60f8      	str	r0, [r7, #12]
 801cd3c:	60b9      	str	r1, [r7, #8]
 801cd3e:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	68ba      	ldr	r2, [r7, #8]
 801cd44:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801cd46:	68fb      	ldr	r3, [r7, #12]
 801cd48:	687a      	ldr	r2, [r7, #4]
 801cd4a:	601a      	str	r2, [r3, #0]
}
 801cd4c:	bf00      	nop
 801cd4e:	3714      	adds	r7, #20
 801cd50:	46bd      	mov	sp, r7
 801cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd56:	4770      	bx	lr

0801cd58 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801cd58:	b480      	push	{r7}
 801cd5a:	b083      	sub	sp, #12
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	681b      	ldr	r3, [r3, #0]
 801cd64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cd68:	4293      	cmp	r3, r2
 801cd6a:	d003      	beq.n	801cd74 <getNextPacketId+0x1c>
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	3301      	adds	r3, #1
 801cd72:	e000      	b.n	801cd76 <getNextPacketId+0x1e>
 801cd74:	2301      	movs	r3, #1
 801cd76:	687a      	ldr	r2, [r7, #4]
 801cd78:	6013      	str	r3, [r2, #0]
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	681b      	ldr	r3, [r3, #0]
}
 801cd7e:	4618      	mov	r0, r3
 801cd80:	370c      	adds	r7, #12
 801cd82:	46bd      	mov	sp, r7
 801cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd88:	4770      	bx	lr

0801cd8a <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801cd8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd8c:	b087      	sub	sp, #28
 801cd8e:	af00      	add	r7, sp, #0
 801cd90:	60f8      	str	r0, [r7, #12]
 801cd92:	60b9      	str	r1, [r7, #8]
 801cd94:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801cd96:	f04f 33ff 	mov.w	r3, #4294967295
 801cd9a:	617b      	str	r3, [r7, #20]
        sent = 0;
 801cd9c:	2300      	movs	r3, #0
 801cd9e:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801cda0:	e018      	b.n	801cdd4 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cda6:	689c      	ldr	r4, [r3, #8]
 801cda8:	68fb      	ldr	r3, [r7, #12]
 801cdaa:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cdac:	68fb      	ldr	r3, [r7, #12]
 801cdae:	691a      	ldr	r2, [r3, #16]
 801cdb0:	693b      	ldr	r3, [r7, #16]
 801cdb2:	18d6      	adds	r6, r2, r3
 801cdb4:	6878      	ldr	r0, [r7, #4]
 801cdb6:	f000 fd17 	bl	801d7e8 <TimerLeftMS>
 801cdba:	4603      	mov	r3, r0
 801cdbc:	68ba      	ldr	r2, [r7, #8]
 801cdbe:	4631      	mov	r1, r6
 801cdc0:	4628      	mov	r0, r5
 801cdc2:	47a0      	blx	r4
 801cdc4:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801cdc6:	697b      	ldr	r3, [r7, #20]
 801cdc8:	2b00      	cmp	r3, #0
 801cdca:	db0e      	blt.n	801cdea <sendPacket+0x60>
            break;
        sent += rc;
 801cdcc:	693a      	ldr	r2, [r7, #16]
 801cdce:	697b      	ldr	r3, [r7, #20]
 801cdd0:	4413      	add	r3, r2
 801cdd2:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801cdd4:	693a      	ldr	r2, [r7, #16]
 801cdd6:	68bb      	ldr	r3, [r7, #8]
 801cdd8:	429a      	cmp	r2, r3
 801cdda:	da07      	bge.n	801cdec <sendPacket+0x62>
 801cddc:	6878      	ldr	r0, [r7, #4]
 801cdde:	f000 fcc1 	bl	801d764 <TimerIsExpired>
 801cde2:	4603      	mov	r3, r0
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d0dc      	beq.n	801cda2 <sendPacket+0x18>
 801cde8:	e000      	b.n	801cdec <sendPacket+0x62>
            break;
 801cdea:	bf00      	nop
    }
    if (sent == length)
 801cdec:	693a      	ldr	r2, [r7, #16]
 801cdee:	68bb      	ldr	r3, [r7, #8]
 801cdf0:	429a      	cmp	r2, r3
 801cdf2:	d10b      	bne.n	801ce0c <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801cdfa:	68fb      	ldr	r3, [r7, #12]
 801cdfc:	699b      	ldr	r3, [r3, #24]
 801cdfe:	4619      	mov	r1, r3
 801ce00:	4610      	mov	r0, r2
 801ce02:	f000 fcd9 	bl	801d7b8 <TimerCountdown>
        rc = SUCCESSS;
 801ce06:	2300      	movs	r3, #0
 801ce08:	617b      	str	r3, [r7, #20]
 801ce0a:	e002      	b.n	801ce12 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801ce0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ce10:	617b      	str	r3, [r7, #20]
    return rc;
 801ce12:	697b      	ldr	r3, [r7, #20]
}
 801ce14:	4618      	mov	r0, r3
 801ce16:	371c      	adds	r7, #28
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ce1c <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b086      	sub	sp, #24
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	60f8      	str	r0, [r7, #12]
 801ce24:	60b9      	str	r1, [r7, #8]
 801ce26:	607a      	str	r2, [r7, #4]
 801ce28:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	68ba      	ldr	r2, [r7, #8]
 801ce2e:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801ce30:	2300      	movs	r3, #0
 801ce32:	617b      	str	r3, [r7, #20]
 801ce34:	e009      	b.n	801ce4a <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801ce36:	68fa      	ldr	r2, [r7, #12]
 801ce38:	697b      	ldr	r3, [r7, #20]
 801ce3a:	3304      	adds	r3, #4
 801ce3c:	00db      	lsls	r3, r3, #3
 801ce3e:	4413      	add	r3, r2
 801ce40:	2200      	movs	r2, #0
 801ce42:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	3301      	adds	r3, #1
 801ce48:	617b      	str	r3, [r7, #20]
 801ce4a:	697b      	ldr	r3, [r7, #20]
 801ce4c:	2b04      	cmp	r3, #4
 801ce4e:	ddf2      	ble.n	801ce36 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801ce50:	68fb      	ldr	r3, [r7, #12]
 801ce52:	687a      	ldr	r2, [r7, #4]
 801ce54:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	683a      	ldr	r2, [r7, #0]
 801ce5a:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801ce5c:	68fb      	ldr	r3, [r7, #12]
 801ce5e:	6a3a      	ldr	r2, [r7, #32]
 801ce60:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801ce62:	68fb      	ldr	r3, [r7, #12]
 801ce64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce66:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801ce68:	68fb      	ldr	r3, [r7, #12]
 801ce6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce6c:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801ce6e:	68fb      	ldr	r3, [r7, #12]
 801ce70:	2200      	movs	r2, #0
 801ce72:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801ce74:	68fb      	ldr	r3, [r7, #12]
 801ce76:	2200      	movs	r2, #0
 801ce78:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801ce7a:	68fb      	ldr	r3, [r7, #12]
 801ce7c:	2200      	movs	r2, #0
 801ce7e:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801ce80:	68fb      	ldr	r3, [r7, #12]
 801ce82:	2201      	movs	r2, #1
 801ce84:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801ce86:	68fb      	ldr	r3, [r7, #12]
 801ce88:	3354      	adds	r3, #84	; 0x54
 801ce8a:	4618      	mov	r0, r3
 801ce8c:	f000 fc5c 	bl	801d748 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801ce90:	bf00      	nop
 801ce92:	3718      	adds	r7, #24
 801ce94:	46bd      	mov	sp, r7
 801ce96:	bd80      	pop	{r7, pc}

0801ce98 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801ce98:	b590      	push	{r4, r7, lr}
 801ce9a:	b08b      	sub	sp, #44	; 0x2c
 801ce9c:	af00      	add	r7, sp, #0
 801ce9e:	60f8      	str	r0, [r7, #12]
 801cea0:	60b9      	str	r1, [r7, #8]
 801cea2:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801cea4:	2301      	movs	r3, #1
 801cea6:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801cea8:	2300      	movs	r3, #0
 801ceaa:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801ceac:	2304      	movs	r3, #4
 801ceae:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801ceb0:	68bb      	ldr	r3, [r7, #8]
 801ceb2:	2200      	movs	r2, #0
 801ceb4:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801ceb6:	f04f 33ff 	mov.w	r3, #4294967295
 801ceba:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801cebc:	6a3b      	ldr	r3, [r7, #32]
 801cebe:	3301      	adds	r3, #1
 801cec0:	623b      	str	r3, [r7, #32]
 801cec2:	6a3a      	ldr	r2, [r7, #32]
 801cec4:	69fb      	ldr	r3, [r7, #28]
 801cec6:	429a      	cmp	r2, r3
 801cec8:	dd03      	ble.n	801ced2 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801ceca:	f04f 33ff 	mov.w	r3, #4294967295
 801cece:	61bb      	str	r3, [r7, #24]
            goto exit;
 801ced0:	e021      	b.n	801cf16 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801ced2:	68fb      	ldr	r3, [r7, #12]
 801ced4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ced6:	685c      	ldr	r4, [r3, #4]
 801ced8:	68fb      	ldr	r3, [r7, #12]
 801ceda:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cedc:	f107 0117 	add.w	r1, r7, #23
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2201      	movs	r2, #1
 801cee4:	47a0      	blx	r4
 801cee6:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801cee8:	69bb      	ldr	r3, [r7, #24]
 801ceea:	2b01      	cmp	r3, #1
 801ceec:	d112      	bne.n	801cf14 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801ceee:	68bb      	ldr	r3, [r7, #8]
 801cef0:	681a      	ldr	r2, [r3, #0]
 801cef2:	7dfb      	ldrb	r3, [r7, #23]
 801cef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cef8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cefa:	fb01 f303 	mul.w	r3, r1, r3
 801cefe:	441a      	add	r2, r3
 801cf00:	68bb      	ldr	r3, [r7, #8]
 801cf02:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf06:	01db      	lsls	r3, r3, #7
 801cf08:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801cf0a:	7dfb      	ldrb	r3, [r7, #23]
 801cf0c:	b25b      	sxtb	r3, r3
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	dbd1      	blt.n	801ceb6 <decodePacket+0x1e>
exit:
 801cf12:	e000      	b.n	801cf16 <decodePacket+0x7e>
            goto exit;
 801cf14:	bf00      	nop
    return len;
 801cf16:	6a3b      	ldr	r3, [r7, #32]
}
 801cf18:	4618      	mov	r0, r3
 801cf1a:	372c      	adds	r7, #44	; 0x2c
 801cf1c:	46bd      	mov	sp, r7
 801cf1e:	bd90      	pop	{r4, r7, pc}

0801cf20 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801cf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cf22:	b089      	sub	sp, #36	; 0x24
 801cf24:	af00      	add	r7, sp, #0
 801cf26:	60f8      	str	r0, [r7, #12]
 801cf28:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801cf2a:	f04f 33ff 	mov.w	r3, #4294967295
 801cf2e:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801cf30:	2300      	movs	r3, #0
 801cf32:	617b      	str	r3, [r7, #20]
    int len = 0;
 801cf34:	2300      	movs	r3, #0
 801cf36:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801cf38:	2300      	movs	r3, #0
 801cf3a:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801cf3c:	68fb      	ldr	r3, [r7, #12]
 801cf3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf40:	685c      	ldr	r4, [r3, #4]
 801cf42:	68fb      	ldr	r3, [r7, #12]
 801cf44:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	695e      	ldr	r6, [r3, #20]
 801cf4a:	68b8      	ldr	r0, [r7, #8]
 801cf4c:	f000 fc4c 	bl	801d7e8 <TimerLeftMS>
 801cf50:	4603      	mov	r3, r0
 801cf52:	2201      	movs	r2, #1
 801cf54:	4631      	mov	r1, r6
 801cf56:	4628      	mov	r0, r5
 801cf58:	47a0      	blx	r4
 801cf5a:	4603      	mov	r3, r0
 801cf5c:	2b01      	cmp	r3, #1
 801cf5e:	d13b      	bne.n	801cfd8 <readPacket+0xb8>
        goto exit;

    len = 1;
 801cf60:	2301      	movs	r3, #1
 801cf62:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801cf64:	68b8      	ldr	r0, [r7, #8]
 801cf66:	f000 fc3f 	bl	801d7e8 <TimerLeftMS>
 801cf6a:	4602      	mov	r2, r0
 801cf6c:	f107 0310 	add.w	r3, r7, #16
 801cf70:	4619      	mov	r1, r3
 801cf72:	68f8      	ldr	r0, [r7, #12]
 801cf74:	f7ff ff90 	bl	801ce98 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801cf78:	68fb      	ldr	r3, [r7, #12]
 801cf7a:	695b      	ldr	r3, [r3, #20]
 801cf7c:	3301      	adds	r3, #1
 801cf7e:	693a      	ldr	r2, [r7, #16]
 801cf80:	4611      	mov	r1, r2
 801cf82:	4618      	mov	r0, r3
 801cf84:	f000 ffa4 	bl	801ded0 <MQTTPacket_encode>
 801cf88:	4602      	mov	r2, r0
 801cf8a:	69bb      	ldr	r3, [r7, #24]
 801cf8c:	4413      	add	r3, r2
 801cf8e:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801cf90:	693b      	ldr	r3, [r7, #16]
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	dd16      	ble.n	801cfc4 <readPacket+0xa4>
 801cf96:	68fb      	ldr	r3, [r7, #12]
 801cf98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf9a:	685c      	ldr	r4, [r3, #4]
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cfa0:	68fb      	ldr	r3, [r7, #12]
 801cfa2:	695a      	ldr	r2, [r3, #20]
 801cfa4:	69bb      	ldr	r3, [r7, #24]
 801cfa6:	18d6      	adds	r6, r2, r3
 801cfa8:	693b      	ldr	r3, [r7, #16]
 801cfaa:	607b      	str	r3, [r7, #4]
 801cfac:	68b8      	ldr	r0, [r7, #8]
 801cfae:	f000 fc1b 	bl	801d7e8 <TimerLeftMS>
 801cfb2:	4603      	mov	r3, r0
 801cfb4:	687a      	ldr	r2, [r7, #4]
 801cfb6:	4631      	mov	r1, r6
 801cfb8:	4628      	mov	r0, r5
 801cfba:	47a0      	blx	r4
 801cfbc:	4602      	mov	r2, r0
 801cfbe:	693b      	ldr	r3, [r7, #16]
 801cfc0:	429a      	cmp	r2, r3
 801cfc2:	d10b      	bne.n	801cfdc <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801cfc4:	68fb      	ldr	r3, [r7, #12]
 801cfc6:	695b      	ldr	r3, [r3, #20]
 801cfc8:	781b      	ldrb	r3, [r3, #0]
 801cfca:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801cfcc:	7d3b      	ldrb	r3, [r7, #20]
 801cfce:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801cfd2:	b2db      	uxtb	r3, r3
 801cfd4:	61fb      	str	r3, [r7, #28]
 801cfd6:	e002      	b.n	801cfde <readPacket+0xbe>
        goto exit;
 801cfd8:	bf00      	nop
 801cfda:	e000      	b.n	801cfde <readPacket+0xbe>
        goto exit;
 801cfdc:	bf00      	nop
exit:
    return rc;
 801cfde:	69fb      	ldr	r3, [r7, #28]
}
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	3724      	adds	r7, #36	; 0x24
 801cfe4:	46bd      	mov	sp, r7
 801cfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cfe8 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801cfe8:	b480      	push	{r7}
 801cfea:	b087      	sub	sp, #28
 801cfec:	af00      	add	r7, sp, #0
 801cfee:	6078      	str	r0, [r7, #4]
 801cff0:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801cff6:	683b      	ldr	r3, [r7, #0]
 801cff8:	689b      	ldr	r3, [r3, #8]
 801cffa:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801cffc:	683b      	ldr	r3, [r7, #0]
 801cffe:	685b      	ldr	r3, [r3, #4]
 801d000:	461a      	mov	r2, r3
 801d002:	693b      	ldr	r3, [r7, #16]
 801d004:	4413      	add	r3, r2
 801d006:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801d008:	e039      	b.n	801d07e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801d00a:	693b      	ldr	r3, [r7, #16]
 801d00c:	781b      	ldrb	r3, [r3, #0]
 801d00e:	2b2f      	cmp	r3, #47	; 0x2f
 801d010:	d103      	bne.n	801d01a <isTopicMatched+0x32>
 801d012:	697b      	ldr	r3, [r7, #20]
 801d014:	781b      	ldrb	r3, [r3, #0]
 801d016:	2b2f      	cmp	r3, #47	; 0x2f
 801d018:	d13a      	bne.n	801d090 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801d01a:	697b      	ldr	r3, [r7, #20]
 801d01c:	781b      	ldrb	r3, [r3, #0]
 801d01e:	2b2b      	cmp	r3, #43	; 0x2b
 801d020:	d009      	beq.n	801d036 <isTopicMatched+0x4e>
 801d022:	697b      	ldr	r3, [r7, #20]
 801d024:	781b      	ldrb	r3, [r3, #0]
 801d026:	2b23      	cmp	r3, #35	; 0x23
 801d028:	d005      	beq.n	801d036 <isTopicMatched+0x4e>
 801d02a:	697b      	ldr	r3, [r7, #20]
 801d02c:	781a      	ldrb	r2, [r3, #0]
 801d02e:	693b      	ldr	r3, [r7, #16]
 801d030:	781b      	ldrb	r3, [r3, #0]
 801d032:	429a      	cmp	r2, r3
 801d034:	d12e      	bne.n	801d094 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801d036:	697b      	ldr	r3, [r7, #20]
 801d038:	781b      	ldrb	r3, [r3, #0]
 801d03a:	2b2b      	cmp	r3, #43	; 0x2b
 801d03c:	d112      	bne.n	801d064 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801d03e:	693b      	ldr	r3, [r7, #16]
 801d040:	3301      	adds	r3, #1
 801d042:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801d044:	e005      	b.n	801d052 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801d046:	693b      	ldr	r3, [r7, #16]
 801d048:	3301      	adds	r3, #1
 801d04a:	613b      	str	r3, [r7, #16]
 801d04c:	693b      	ldr	r3, [r7, #16]
 801d04e:	3301      	adds	r3, #1
 801d050:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801d052:	68fa      	ldr	r2, [r7, #12]
 801d054:	68bb      	ldr	r3, [r7, #8]
 801d056:	429a      	cmp	r2, r3
 801d058:	d20b      	bcs.n	801d072 <isTopicMatched+0x8a>
 801d05a:	68fb      	ldr	r3, [r7, #12]
 801d05c:	781b      	ldrb	r3, [r3, #0]
 801d05e:	2b2f      	cmp	r3, #47	; 0x2f
 801d060:	d1f1      	bne.n	801d046 <isTopicMatched+0x5e>
 801d062:	e006      	b.n	801d072 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801d064:	697b      	ldr	r3, [r7, #20]
 801d066:	781b      	ldrb	r3, [r3, #0]
 801d068:	2b23      	cmp	r3, #35	; 0x23
 801d06a:	d102      	bne.n	801d072 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801d06c:	68bb      	ldr	r3, [r7, #8]
 801d06e:	3b01      	subs	r3, #1
 801d070:	613b      	str	r3, [r7, #16]
        curf++;
 801d072:	697b      	ldr	r3, [r7, #20]
 801d074:	3301      	adds	r3, #1
 801d076:	617b      	str	r3, [r7, #20]
        curn++;
 801d078:	693b      	ldr	r3, [r7, #16]
 801d07a:	3301      	adds	r3, #1
 801d07c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801d07e:	697b      	ldr	r3, [r7, #20]
 801d080:	781b      	ldrb	r3, [r3, #0]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d007      	beq.n	801d096 <isTopicMatched+0xae>
 801d086:	693a      	ldr	r2, [r7, #16]
 801d088:	68bb      	ldr	r3, [r7, #8]
 801d08a:	429a      	cmp	r2, r3
 801d08c:	d3bd      	bcc.n	801d00a <isTopicMatched+0x22>
 801d08e:	e002      	b.n	801d096 <isTopicMatched+0xae>
            break;
 801d090:	bf00      	nop
 801d092:	e000      	b.n	801d096 <isTopicMatched+0xae>
            break;
 801d094:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801d096:	693a      	ldr	r2, [r7, #16]
 801d098:	68bb      	ldr	r3, [r7, #8]
 801d09a:	429a      	cmp	r2, r3
 801d09c:	d105      	bne.n	801d0aa <isTopicMatched+0xc2>
 801d09e:	697b      	ldr	r3, [r7, #20]
 801d0a0:	781b      	ldrb	r3, [r3, #0]
 801d0a2:	2b00      	cmp	r3, #0
 801d0a4:	d101      	bne.n	801d0aa <isTopicMatched+0xc2>
 801d0a6:	2301      	movs	r3, #1
 801d0a8:	e000      	b.n	801d0ac <isTopicMatched+0xc4>
 801d0aa:	2300      	movs	r3, #0
 801d0ac:	b2db      	uxtb	r3, r3
}
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	371c      	adds	r7, #28
 801d0b2:	46bd      	mov	sp, r7
 801d0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0b8:	4770      	bx	lr

0801d0ba <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801d0ba:	b580      	push	{r7, lr}
 801d0bc:	b08a      	sub	sp, #40	; 0x28
 801d0be:	af00      	add	r7, sp, #0
 801d0c0:	60f8      	str	r0, [r7, #12]
 801d0c2:	60b9      	str	r1, [r7, #8]
 801d0c4:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801d0c6:	f04f 33ff 	mov.w	r3, #4294967295
 801d0ca:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d0cc:	2300      	movs	r3, #0
 801d0ce:	627b      	str	r3, [r7, #36]	; 0x24
 801d0d0:	e03f      	b.n	801d152 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d0d2:	68fa      	ldr	r2, [r7, #12]
 801d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0d6:	3304      	adds	r3, #4
 801d0d8:	00db      	lsls	r3, r3, #3
 801d0da:	4413      	add	r3, r2
 801d0dc:	685b      	ldr	r3, [r3, #4]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d034      	beq.n	801d14c <deliverMessage+0x92>
 801d0e2:	68fa      	ldr	r2, [r7, #12]
 801d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e6:	3304      	adds	r3, #4
 801d0e8:	00db      	lsls	r3, r3, #3
 801d0ea:	4413      	add	r3, r2
 801d0ec:	685b      	ldr	r3, [r3, #4]
 801d0ee:	4619      	mov	r1, r3
 801d0f0:	68b8      	ldr	r0, [r7, #8]
 801d0f2:	f001 f8bd 	bl	801e270 <MQTTPacket_equals>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d10c      	bne.n	801d116 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801d0fc:	68fa      	ldr	r2, [r7, #12]
 801d0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d100:	3304      	adds	r3, #4
 801d102:	00db      	lsls	r3, r3, #3
 801d104:	4413      	add	r3, r2
 801d106:	685b      	ldr	r3, [r3, #4]
 801d108:	68b9      	ldr	r1, [r7, #8]
 801d10a:	4618      	mov	r0, r3
 801d10c:	f7ff ff6c 	bl	801cfe8 <isTopicMatched>
 801d110:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d112:	2b00      	cmp	r3, #0
 801d114:	d01a      	beq.n	801d14c <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801d116:	68fa      	ldr	r2, [r7, #12]
 801d118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d11a:	3304      	adds	r3, #4
 801d11c:	00db      	lsls	r3, r3, #3
 801d11e:	4413      	add	r3, r2
 801d120:	689b      	ldr	r3, [r3, #8]
 801d122:	2b00      	cmp	r3, #0
 801d124:	d012      	beq.n	801d14c <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801d126:	f107 0318 	add.w	r3, r7, #24
 801d12a:	687a      	ldr	r2, [r7, #4]
 801d12c:	68b9      	ldr	r1, [r7, #8]
 801d12e:	4618      	mov	r0, r3
 801d130:	f7ff fe00 	bl	801cd34 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801d134:	68fa      	ldr	r2, [r7, #12]
 801d136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d138:	3304      	adds	r3, #4
 801d13a:	00db      	lsls	r3, r3, #3
 801d13c:	4413      	add	r3, r2
 801d13e:	689b      	ldr	r3, [r3, #8]
 801d140:	f107 0218 	add.w	r2, r7, #24
 801d144:	4610      	mov	r0, r2
 801d146:	4798      	blx	r3
                rc = SUCCESSS;
 801d148:	2300      	movs	r3, #0
 801d14a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d14e:	3301      	adds	r3, #1
 801d150:	627b      	str	r3, [r7, #36]	; 0x24
 801d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d154:	2b04      	cmp	r3, #4
 801d156:	ddbc      	ble.n	801d0d2 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801d158:	6a3b      	ldr	r3, [r7, #32]
 801d15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d15e:	d112      	bne.n	801d186 <deliverMessage+0xcc>
 801d160:	68fb      	ldr	r3, [r7, #12]
 801d162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d164:	2b00      	cmp	r3, #0
 801d166:	d00e      	beq.n	801d186 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801d168:	f107 0310 	add.w	r3, r7, #16
 801d16c:	687a      	ldr	r2, [r7, #4]
 801d16e:	68b9      	ldr	r1, [r7, #8]
 801d170:	4618      	mov	r0, r3
 801d172:	f7ff fddf 	bl	801cd34 <NewMessageData>
        c->defaultMessageHandler(&md);
 801d176:	68fb      	ldr	r3, [r7, #12]
 801d178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d17a:	f107 0210 	add.w	r2, r7, #16
 801d17e:	4610      	mov	r0, r2
 801d180:	4798      	blx	r3
        rc = SUCCESSS;
 801d182:	2300      	movs	r3, #0
 801d184:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801d186:	6a3b      	ldr	r3, [r7, #32]
}
 801d188:	4618      	mov	r0, r3
 801d18a:	3728      	adds	r7, #40	; 0x28
 801d18c:	46bd      	mov	sp, r7
 801d18e:	bd80      	pop	{r7, pc}

0801d190 <keepalive>:


int keepalive(MQTTClient* c)
{
 801d190:	b580      	push	{r7, lr}
 801d192:	b086      	sub	sp, #24
 801d194:	af00      	add	r7, sp, #0
 801d196:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801d198:	f04f 33ff 	mov.w	r3, #4294967295
 801d19c:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	699b      	ldr	r3, [r3, #24]
 801d1a2:	2b00      	cmp	r3, #0
 801d1a4:	d102      	bne.n	801d1ac <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	617b      	str	r3, [r7, #20]
        goto exit;
 801d1aa:	e033      	b.n	801d214 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	3354      	adds	r3, #84	; 0x54
 801d1b0:	4618      	mov	r0, r3
 801d1b2:	f000 fad7 	bl	801d764 <TimerIsExpired>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	2b00      	cmp	r3, #0
 801d1ba:	d02a      	beq.n	801d212 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	7f1b      	ldrb	r3, [r3, #28]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d126      	bne.n	801d212 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801d1c4:	f107 0308 	add.w	r3, r7, #8
 801d1c8:	4618      	mov	r0, r3
 801d1ca:	f000 fabd 	bl	801d748 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801d1ce:	f107 0308 	add.w	r3, r7, #8
 801d1d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	f000 fada 	bl	801d790 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	691a      	ldr	r2, [r3, #16]
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	689b      	ldr	r3, [r3, #8]
 801d1e4:	4619      	mov	r1, r3
 801d1e6:	4610      	mov	r0, r2
 801d1e8:	f000 fda6 	bl	801dd38 <MQTTSerialize_pingreq>
 801d1ec:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801d1ee:	693b      	ldr	r3, [r7, #16]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	dd0f      	ble.n	801d214 <keepalive+0x84>
 801d1f4:	f107 0308 	add.w	r3, r7, #8
 801d1f8:	461a      	mov	r2, r3
 801d1fa:	6939      	ldr	r1, [r7, #16]
 801d1fc:	6878      	ldr	r0, [r7, #4]
 801d1fe:	f7ff fdc4 	bl	801cd8a <sendPacket>
 801d202:	6178      	str	r0, [r7, #20]
 801d204:	697b      	ldr	r3, [r7, #20]
 801d206:	2b00      	cmp	r3, #0
 801d208:	d104      	bne.n	801d214 <keepalive+0x84>
                c->ping_outstanding = 1;
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	2201      	movs	r2, #1
 801d20e:	771a      	strb	r2, [r3, #28]
 801d210:	e000      	b.n	801d214 <keepalive+0x84>
        }
    }

exit:
 801d212:	bf00      	nop
    return rc;
 801d214:	697b      	ldr	r3, [r7, #20]
}
 801d216:	4618      	mov	r0, r3
 801d218:	3718      	adds	r7, #24
 801d21a:	46bd      	mov	sp, r7
 801d21c:	bd80      	pop	{r7, pc}
	...

0801d220 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801d220:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d222:	b095      	sub	sp, #84	; 0x54
 801d224:	af06      	add	r7, sp, #24
 801d226:	6078      	str	r0, [r7, #4]
 801d228:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801d22a:	6839      	ldr	r1, [r7, #0]
 801d22c:	6878      	ldr	r0, [r7, #4]
 801d22e:	f7ff fe77 	bl	801cf20 <readPacket>
 801d232:	4603      	mov	r3, r0
 801d234:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 801d236:	2300      	movs	r3, #0
 801d238:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 801d23a:	2300      	movs	r3, #0
 801d23c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 801d23e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d240:	3b02      	subs	r3, #2
 801d242:	2b0b      	cmp	r3, #11
 801d244:	f200 80c0 	bhi.w	801d3c8 <cycle+0x1a8>
 801d248:	a201      	add	r2, pc, #4	; (adr r2, 801d250 <cycle+0x30>)
 801d24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d24e:	bf00      	nop
 801d250:	0801d3c9 	.word	0x0801d3c9
 801d254:	0801d281 	.word	0x0801d281
 801d258:	0801d3c9 	.word	0x0801d3c9
 801d25c:	0801d349 	.word	0x0801d349
 801d260:	0801d3c9 	.word	0x0801d3c9
 801d264:	0801d3c9 	.word	0x0801d3c9
 801d268:	0801d3c9 	.word	0x0801d3c9
 801d26c:	0801d3c9 	.word	0x0801d3c9
 801d270:	0801d3c9 	.word	0x0801d3c9
 801d274:	0801d3c9 	.word	0x0801d3c9
 801d278:	0801d3c9 	.word	0x0801d3c9
 801d27c:	0801d3bb 	.word	0x0801d3bb
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801d284:	687a      	ldr	r2, [r7, #4]
 801d286:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d288:	4616      	mov	r6, r2
 801d28a:	f107 0210 	add.w	r2, r7, #16
 801d28e:	1d15      	adds	r5, r2, #4
 801d290:	f107 0210 	add.w	r2, r7, #16
 801d294:	1c54      	adds	r4, r2, #1
 801d296:	f107 010c 	add.w	r1, r7, #12
 801d29a:	f107 0210 	add.w	r2, r7, #16
 801d29e:	1c90      	adds	r0, r2, #2
 801d2a0:	9604      	str	r6, [sp, #16]
 801d2a2:	9303      	str	r3, [sp, #12]
 801d2a4:	f107 0310 	add.w	r3, r7, #16
 801d2a8:	330c      	adds	r3, #12
 801d2aa:	9302      	str	r3, [sp, #8]
 801d2ac:	f107 0310 	add.w	r3, r7, #16
 801d2b0:	3308      	adds	r3, #8
 801d2b2:	9301      	str	r3, [sp, #4]
 801d2b4:	f107 0320 	add.w	r3, r7, #32
 801d2b8:	9300      	str	r3, [sp, #0]
 801d2ba:	462b      	mov	r3, r5
 801d2bc:	4622      	mov	r2, r4
 801d2be:	f000 fd4a 	bl	801dd56 <MQTTDeserialize_publish>
 801d2c2:	4603      	mov	r3, r0
 801d2c4:	2b01      	cmp	r3, #1
 801d2c6:	f040 8083 	bne.w	801d3d0 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	b2db      	uxtb	r3, r3
 801d2ce:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801d2d0:	f107 0210 	add.w	r2, r7, #16
 801d2d4:	f107 0320 	add.w	r3, r7, #32
 801d2d8:	4619      	mov	r1, r3
 801d2da:	6878      	ldr	r0, [r7, #4]
 801d2dc:	f7ff feed 	bl	801d0ba <deliverMessage>
            if (msg.qos != QOS0)
 801d2e0:	7c3b      	ldrb	r3, [r7, #16]
 801d2e2:	2b00      	cmp	r3, #0
 801d2e4:	d06d      	beq.n	801d3c2 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801d2e6:	7c3b      	ldrb	r3, [r7, #16]
 801d2e8:	2b01      	cmp	r3, #1
 801d2ea:	d10c      	bne.n	801d306 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	6918      	ldr	r0, [r3, #16]
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	689b      	ldr	r3, [r3, #8]
 801d2f4:	4619      	mov	r1, r3
 801d2f6:	8abb      	ldrh	r3, [r7, #20]
 801d2f8:	9300      	str	r3, [sp, #0]
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	2204      	movs	r2, #4
 801d2fe:	f001 f884 	bl	801e40a <MQTTSerialize_ack>
 801d302:	6378      	str	r0, [r7, #52]	; 0x34
 801d304:	e00e      	b.n	801d324 <cycle+0x104>
                else if (msg.qos == QOS2)
 801d306:	7c3b      	ldrb	r3, [r7, #16]
 801d308:	2b02      	cmp	r3, #2
 801d30a:	d10b      	bne.n	801d324 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	6918      	ldr	r0, [r3, #16]
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	689b      	ldr	r3, [r3, #8]
 801d314:	4619      	mov	r1, r3
 801d316:	8abb      	ldrh	r3, [r7, #20]
 801d318:	9300      	str	r3, [sp, #0]
 801d31a:	2300      	movs	r3, #0
 801d31c:	2205      	movs	r2, #5
 801d31e:	f001 f874 	bl	801e40a <MQTTSerialize_ack>
 801d322:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801d324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d326:	2b00      	cmp	r3, #0
 801d328:	dc03      	bgt.n	801d332 <cycle+0x112>
                    rc = FAILURE;
 801d32a:	f04f 33ff 	mov.w	r3, #4294967295
 801d32e:	633b      	str	r3, [r7, #48]	; 0x30
 801d330:	e005      	b.n	801d33e <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801d332:	683a      	ldr	r2, [r7, #0]
 801d334:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d336:	6878      	ldr	r0, [r7, #4]
 801d338:	f7ff fd27 	bl	801cd8a <sendPacket>
 801d33c:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d340:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d344:	d13d      	bne.n	801d3c2 <cycle+0x1a2>
                    goto exit; // there was a problem
 801d346:	e044      	b.n	801d3d2 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	695c      	ldr	r4, [r3, #20]
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	68db      	ldr	r3, [r3, #12]
 801d350:	f107 020a 	add.w	r2, r7, #10
 801d354:	f107 0109 	add.w	r1, r7, #9
 801d358:	f107 0008 	add.w	r0, r7, #8
 801d35c:	9300      	str	r3, [sp, #0]
 801d35e:	4623      	mov	r3, r4
 801d360:	f000 fd6b 	bl	801de3a <MQTTDeserialize_ack>
 801d364:	4603      	mov	r3, r0
 801d366:	2b01      	cmp	r3, #1
 801d368:	d003      	beq.n	801d372 <cycle+0x152>
                rc = FAILURE;
 801d36a:	f04f 33ff 	mov.w	r3, #4294967295
 801d36e:	633b      	str	r3, [r7, #48]	; 0x30
 801d370:	e01e      	b.n	801d3b0 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	6918      	ldr	r0, [r3, #16]
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	689b      	ldr	r3, [r3, #8]
 801d37a:	4619      	mov	r1, r3
 801d37c:	897b      	ldrh	r3, [r7, #10]
 801d37e:	9300      	str	r3, [sp, #0]
 801d380:	2300      	movs	r3, #0
 801d382:	2206      	movs	r2, #6
 801d384:	f001 f841 	bl	801e40a <MQTTSerialize_ack>
 801d388:	6378      	str	r0, [r7, #52]	; 0x34
 801d38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	dc03      	bgt.n	801d398 <cycle+0x178>
                rc = FAILURE;
 801d390:	f04f 33ff 	mov.w	r3, #4294967295
 801d394:	633b      	str	r3, [r7, #48]	; 0x30
 801d396:	e00b      	b.n	801d3b0 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801d398:	683a      	ldr	r2, [r7, #0]
 801d39a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d39c:	6878      	ldr	r0, [r7, #4]
 801d39e:	f7ff fcf4 	bl	801cd8a <sendPacket>
 801d3a2:	6338      	str	r0, [r7, #48]	; 0x30
 801d3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a6:	2b00      	cmp	r3, #0
 801d3a8:	d002      	beq.n	801d3b0 <cycle+0x190>
                rc = FAILURE; // there was a problem
 801d3aa:	f04f 33ff 	mov.w	r3, #4294967295
 801d3ae:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801d3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d3b6:	d106      	bne.n	801d3c6 <cycle+0x1a6>
                goto exit; // there was a problem
 801d3b8:	e00b      	b.n	801d3d2 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	2200      	movs	r2, #0
 801d3be:	771a      	strb	r2, [r3, #28]
            break;
 801d3c0:	e002      	b.n	801d3c8 <cycle+0x1a8>
            break;
 801d3c2:	bf00      	nop
 801d3c4:	e000      	b.n	801d3c8 <cycle+0x1a8>
            break;
 801d3c6:	bf00      	nop
    }
    keepalive(c);
 801d3c8:	6878      	ldr	r0, [r7, #4]
 801d3ca:	f7ff fee1 	bl	801d190 <keepalive>
 801d3ce:	e000      	b.n	801d3d2 <cycle+0x1b2>
                goto exit;
 801d3d0:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3d4:	2b00      	cmp	r3, #0
 801d3d6:	d101      	bne.n	801d3dc <cycle+0x1bc>
        rc = packet_type;
 801d3d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d3da:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 801d3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801d3de:	4618      	mov	r0, r3
 801d3e0:	373c      	adds	r7, #60	; 0x3c
 801d3e2:	46bd      	mov	sp, r7
 801d3e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3e6:	bf00      	nop

0801d3e8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801d3e8:	b580      	push	{r7, lr}
 801d3ea:	b086      	sub	sp, #24
 801d3ec:	af00      	add	r7, sp, #0
 801d3ee:	60f8      	str	r0, [r7, #12]
 801d3f0:	60b9      	str	r1, [r7, #8]
 801d3f2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d3f4:	f04f 33ff 	mov.w	r3, #4294967295
 801d3f8:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801d3fa:	6878      	ldr	r0, [r7, #4]
 801d3fc:	f000 f9b2 	bl	801d764 <TimerIsExpired>
 801d400:	4603      	mov	r3, r0
 801d402:	2b00      	cmp	r3, #0
 801d404:	d111      	bne.n	801d42a <waitfor+0x42>
            break; // we timed out
        taskYIELD(); //This function is needed to return management to OS during waiting time.
 801d406:	4b0c      	ldr	r3, [pc, #48]	; (801d438 <waitfor+0x50>)
 801d408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d40c:	601a      	str	r2, [r3, #0]
 801d40e:	f3bf 8f4f 	dsb	sy
 801d412:	f3bf 8f6f 	isb	sy
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801d416:	6879      	ldr	r1, [r7, #4]
 801d418:	68f8      	ldr	r0, [r7, #12]
 801d41a:	f7ff ff01 	bl	801d220 <cycle>
 801d41e:	6178      	str	r0, [r7, #20]
 801d420:	697a      	ldr	r2, [r7, #20]
 801d422:	68bb      	ldr	r3, [r7, #8]
 801d424:	429a      	cmp	r2, r3
 801d426:	d1e8      	bne.n	801d3fa <waitfor+0x12>
 801d428:	e000      	b.n	801d42c <waitfor+0x44>
            break; // we timed out
 801d42a:	bf00      	nop

    return rc;
 801d42c:	697b      	ldr	r3, [r7, #20]
}
 801d42e:	4618      	mov	r0, r3
 801d430:	3718      	adds	r7, #24
 801d432:	46bd      	mov	sp, r7
 801d434:	bd80      	pop	{r7, pc}
 801d436:	bf00      	nop
 801d438:	e000ed04 	.word	0xe000ed04

0801d43c <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d43c:	b580      	push	{r7, lr}
 801d43e:	b09e      	sub	sp, #120	; 0x78
 801d440:	af00      	add	r7, sp, #0
 801d442:	6078      	str	r0, [r7, #4]
 801d444:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801d446:	f04f 33ff 	mov.w	r3, #4294967295
 801d44a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d44c:	4a3d      	ldr	r2, [pc, #244]	; (801d544 <MQTTConnect+0x108>)
 801d44e:	f107 0310 	add.w	r3, r7, #16
 801d452:	4611      	mov	r1, r2
 801d454:	2258      	movs	r2, #88	; 0x58
 801d456:	4618      	mov	r0, r3
 801d458:	f010 fd1d 	bl	802de96 <memcpy>
    int len = 0;
 801d45c:	2300      	movs	r3, #0
 801d45e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	6a1b      	ldr	r3, [r3, #32]
 801d464:	2b00      	cmp	r3, #0
 801d466:	d15d      	bne.n	801d524 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801d468:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d46c:	4618      	mov	r0, r3
 801d46e:	f000 f96b 	bl	801d748 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d472:	687b      	ldr	r3, [r7, #4]
 801d474:	685a      	ldr	r2, [r3, #4]
 801d476:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d47a:	4611      	mov	r1, r2
 801d47c:	4618      	mov	r0, r3
 801d47e:	f000 f987 	bl	801d790 <TimerCountdownMS>

    if (options == 0)
 801d482:	683b      	ldr	r3, [r7, #0]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d102      	bne.n	801d48e <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801d488:	f107 0310 	add.w	r3, r7, #16
 801d48c:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801d48e:	683b      	ldr	r3, [r7, #0]
 801d490:	8b1b      	ldrh	r3, [r3, #24]
 801d492:	461a      	mov	r2, r3
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801d49e:	687b      	ldr	r3, [r7, #4]
 801d4a0:	699b      	ldr	r3, [r3, #24]
 801d4a2:	4619      	mov	r1, r3
 801d4a4:	4610      	mov	r0, r2
 801d4a6:	f000 f987 	bl	801d7b8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	6918      	ldr	r0, [r3, #16]
 801d4ae:	687b      	ldr	r3, [r7, #4]
 801d4b0:	689b      	ldr	r3, [r3, #8]
 801d4b2:	683a      	ldr	r2, [r7, #0]
 801d4b4:	4619      	mov	r1, r3
 801d4b6:	f000 fab7 	bl	801da28 <MQTTSerialize_connect>
 801d4ba:	6738      	str	r0, [r7, #112]	; 0x70
 801d4bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d4be:	2b00      	cmp	r3, #0
 801d4c0:	dd32      	ble.n	801d528 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801d4c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d4c6:	461a      	mov	r2, r3
 801d4c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d4ca:	6878      	ldr	r0, [r7, #4]
 801d4cc:	f7ff fc5d 	bl	801cd8a <sendPacket>
 801d4d0:	6778      	str	r0, [r7, #116]	; 0x74
 801d4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4d4:	2b00      	cmp	r3, #0
 801d4d6:	d129      	bne.n	801d52c <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801d4d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d4dc:	461a      	mov	r2, r3
 801d4de:	2102      	movs	r1, #2
 801d4e0:	6878      	ldr	r0, [r7, #4]
 801d4e2:	f7ff ff81 	bl	801d3e8 <waitfor>
 801d4e6:	4603      	mov	r3, r0
 801d4e8:	2b02      	cmp	r3, #2
 801d4ea:	d117      	bne.n	801d51c <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801d4ec:	23ff      	movs	r3, #255	; 0xff
 801d4ee:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	695a      	ldr	r2, [r3, #20]
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	68db      	ldr	r3, [r3, #12]
 801d4fc:	f107 010f 	add.w	r1, r7, #15
 801d500:	f107 000e 	add.w	r0, r7, #14
 801d504:	f000 fb7c 	bl	801dc00 <MQTTDeserialize_connack>
 801d508:	4603      	mov	r3, r0
 801d50a:	2b01      	cmp	r3, #1
 801d50c:	d102      	bne.n	801d514 <MQTTConnect+0xd8>
            rc = connack_rc;
 801d50e:	7bfb      	ldrb	r3, [r7, #15]
 801d510:	677b      	str	r3, [r7, #116]	; 0x74
 801d512:	e00c      	b.n	801d52e <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801d514:	f04f 33ff 	mov.w	r3, #4294967295
 801d518:	677b      	str	r3, [r7, #116]	; 0x74
 801d51a:	e008      	b.n	801d52e <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801d51c:	f04f 33ff 	mov.w	r3, #4294967295
 801d520:	677b      	str	r3, [r7, #116]	; 0x74
 801d522:	e004      	b.n	801d52e <MQTTConnect+0xf2>
		goto exit;
 801d524:	bf00      	nop
 801d526:	e002      	b.n	801d52e <MQTTConnect+0xf2>
        goto exit;
 801d528:	bf00      	nop
 801d52a:	e000      	b.n	801d52e <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801d52c:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801d52e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d530:	2b00      	cmp	r3, #0
 801d532:	d102      	bne.n	801d53a <MQTTConnect+0xfe>
        c->isconnected = 1;
 801d534:	687b      	ldr	r3, [r7, #4]
 801d536:	2201      	movs	r2, #1
 801d538:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801d53a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801d53c:	4618      	mov	r0, r3
 801d53e:	3778      	adds	r7, #120	; 0x78
 801d540:	46bd      	mov	sp, r7
 801d542:	bd80      	pop	{r7, pc}
 801d544:	08032fe8 	.word	0x08032fe8

0801d548 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801d548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d54a:	b097      	sub	sp, #92	; 0x5c
 801d54c:	af08      	add	r7, sp, #32
 801d54e:	60f8      	str	r0, [r7, #12]
 801d550:	60b9      	str	r1, [r7, #8]
 801d552:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d554:	f04f 33ff 	mov.w	r3, #4294967295
 801d558:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801d55a:	2300      	movs	r3, #0
 801d55c:	61fb      	str	r3, [r7, #28]
 801d55e:	2300      	movs	r3, #0
 801d560:	623b      	str	r3, [r7, #32]
 801d562:	2300      	movs	r3, #0
 801d564:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801d566:	68bb      	ldr	r3, [r7, #8]
 801d568:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801d56a:	2300      	movs	r3, #0
 801d56c:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	6a1b      	ldr	r3, [r3, #32]
 801d572:	2b00      	cmp	r3, #0
 801d574:	f000 809b 	beq.w	801d6ae <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801d578:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d57c:	4618      	mov	r0, r3
 801d57e:	f000 f8e3 	bl	801d748 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	685a      	ldr	r2, [r3, #4]
 801d586:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d58a:	4611      	mov	r1, r2
 801d58c:	4618      	mov	r0, r3
 801d58e:	f000 f8ff 	bl	801d790 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	781b      	ldrb	r3, [r3, #0]
 801d596:	2b01      	cmp	r3, #1
 801d598:	d003      	beq.n	801d5a2 <MQTTPublish+0x5a>
 801d59a:	687b      	ldr	r3, [r7, #4]
 801d59c:	781b      	ldrb	r3, [r3, #0]
 801d59e:	2b02      	cmp	r3, #2
 801d5a0:	d106      	bne.n	801d5b0 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801d5a2:	68f8      	ldr	r0, [r7, #12]
 801d5a4:	f7ff fbd8 	bl	801cd58 <getNextPacketId>
 801d5a8:	4603      	mov	r3, r0
 801d5aa:	b29a      	uxth	r2, r3
 801d5ac:	687b      	ldr	r3, [r7, #4]
 801d5ae:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d5b0:	68fb      	ldr	r3, [r7, #12]
 801d5b2:	691b      	ldr	r3, [r3, #16]
 801d5b4:	603b      	str	r3, [r7, #0]
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	689b      	ldr	r3, [r3, #8]
 801d5ba:	469c      	mov	ip, r3
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	781b      	ldrb	r3, [r3, #0]
 801d5c0:	469e      	mov	lr, r3
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	785d      	ldrb	r5, [r3, #1]
 801d5c6:	687b      	ldr	r3, [r7, #4]
 801d5c8:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	689b      	ldr	r3, [r3, #8]
 801d5ce:	687a      	ldr	r2, [r7, #4]
 801d5d0:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d5d2:	9206      	str	r2, [sp, #24]
 801d5d4:	9305      	str	r3, [sp, #20]
 801d5d6:	ac02      	add	r4, sp, #8
 801d5d8:	f107 031c 	add.w	r3, r7, #28
 801d5dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d5e4:	9601      	str	r6, [sp, #4]
 801d5e6:	9500      	str	r5, [sp, #0]
 801d5e8:	4673      	mov	r3, lr
 801d5ea:	2200      	movs	r2, #0
 801d5ec:	4661      	mov	r1, ip
 801d5ee:	6838      	ldr	r0, [r7, #0]
 801d5f0:	f000 fe95 	bl	801e31e <MQTTSerialize_publish>
 801d5f4:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801d5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	dd5a      	ble.n	801d6b2 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801d5fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d600:	461a      	mov	r2, r3
 801d602:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d604:	68f8      	ldr	r0, [r7, #12]
 801d606:	f7ff fbc0 	bl	801cd8a <sendPacket>
 801d60a:	6378      	str	r0, [r7, #52]	; 0x34
 801d60c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d60e:	2b00      	cmp	r3, #0
 801d610:	d151      	bne.n	801d6b6 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	781b      	ldrb	r3, [r3, #0]
 801d616:	2b01      	cmp	r3, #1
 801d618:	d122      	bne.n	801d660 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801d61a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d61e:	461a      	mov	r2, r3
 801d620:	2104      	movs	r1, #4
 801d622:	68f8      	ldr	r0, [r7, #12]
 801d624:	f7ff fee0 	bl	801d3e8 <waitfor>
 801d628:	4603      	mov	r3, r0
 801d62a:	2b04      	cmp	r3, #4
 801d62c:	d114      	bne.n	801d658 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	695c      	ldr	r4, [r3, #20]
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	68db      	ldr	r3, [r3, #12]
 801d636:	f107 021a 	add.w	r2, r7, #26
 801d63a:	f107 0119 	add.w	r1, r7, #25
 801d63e:	f107 0018 	add.w	r0, r7, #24
 801d642:	9300      	str	r3, [sp, #0]
 801d644:	4623      	mov	r3, r4
 801d646:	f000 fbf8 	bl	801de3a <MQTTDeserialize_ack>
 801d64a:	4603      	mov	r3, r0
 801d64c:	2b01      	cmp	r3, #1
 801d64e:	d035      	beq.n	801d6bc <MQTTPublish+0x174>
                rc = FAILURE;
 801d650:	f04f 33ff 	mov.w	r3, #4294967295
 801d654:	637b      	str	r3, [r7, #52]	; 0x34
 801d656:	e031      	b.n	801d6bc <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d658:	f04f 33ff 	mov.w	r3, #4294967295
 801d65c:	637b      	str	r3, [r7, #52]	; 0x34
 801d65e:	e02d      	b.n	801d6bc <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	781b      	ldrb	r3, [r3, #0]
 801d664:	2b02      	cmp	r3, #2
 801d666:	d128      	bne.n	801d6ba <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801d668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d66c:	461a      	mov	r2, r3
 801d66e:	2107      	movs	r1, #7
 801d670:	68f8      	ldr	r0, [r7, #12]
 801d672:	f7ff feb9 	bl	801d3e8 <waitfor>
 801d676:	4603      	mov	r3, r0
 801d678:	2b07      	cmp	r3, #7
 801d67a:	d114      	bne.n	801d6a6 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d67c:	68fb      	ldr	r3, [r7, #12]
 801d67e:	695c      	ldr	r4, [r3, #20]
 801d680:	68fb      	ldr	r3, [r7, #12]
 801d682:	68db      	ldr	r3, [r3, #12]
 801d684:	f107 0216 	add.w	r2, r7, #22
 801d688:	f107 0115 	add.w	r1, r7, #21
 801d68c:	f107 0014 	add.w	r0, r7, #20
 801d690:	9300      	str	r3, [sp, #0]
 801d692:	4623      	mov	r3, r4
 801d694:	f000 fbd1 	bl	801de3a <MQTTDeserialize_ack>
 801d698:	4603      	mov	r3, r0
 801d69a:	2b01      	cmp	r3, #1
 801d69c:	d00e      	beq.n	801d6bc <MQTTPublish+0x174>
                rc = FAILURE;
 801d69e:	f04f 33ff 	mov.w	r3, #4294967295
 801d6a2:	637b      	str	r3, [r7, #52]	; 0x34
 801d6a4:	e00a      	b.n	801d6bc <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d6a6:	f04f 33ff 	mov.w	r3, #4294967295
 801d6aa:	637b      	str	r3, [r7, #52]	; 0x34
 801d6ac:	e006      	b.n	801d6bc <MQTTPublish+0x174>
		goto exit;
 801d6ae:	bf00      	nop
 801d6b0:	e004      	b.n	801d6bc <MQTTPublish+0x174>
        goto exit;
 801d6b2:	bf00      	nop
 801d6b4:	e002      	b.n	801d6bc <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d6b6:	bf00      	nop
 801d6b8:	e000      	b.n	801d6bc <MQTTPublish+0x174>
    }

exit:
 801d6ba:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d6be:	4618      	mov	r0, r3
 801d6c0:	373c      	adds	r7, #60	; 0x3c
 801d6c2:	46bd      	mov	sp, r7
 801d6c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d6c6 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 801d6c6:	b580      	push	{r7, lr}
 801d6c8:	b086      	sub	sp, #24
 801d6ca:	af00      	add	r7, sp, #0
 801d6cc:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801d6ce:	f04f 33ff 	mov.w	r3, #4294967295
 801d6d2:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 801d6d4:	2300      	movs	r3, #0
 801d6d6:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 801d6d8:	f107 0308 	add.w	r3, r7, #8
 801d6dc:	4618      	mov	r0, r3
 801d6de:	f000 f833 	bl	801d748 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	685a      	ldr	r2, [r3, #4]
 801d6e6:	f107 0308 	add.w	r3, r7, #8
 801d6ea:	4611      	mov	r1, r2
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	f000 f84f 	bl	801d790 <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 801d6f2:	687b      	ldr	r3, [r7, #4]
 801d6f4:	691a      	ldr	r2, [r3, #16]
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	689b      	ldr	r3, [r3, #8]
 801d6fa:	4619      	mov	r1, r3
 801d6fc:	4610      	mov	r0, r2
 801d6fe:	f000 fb0c 	bl	801dd1a <MQTTSerialize_disconnect>
 801d702:	6138      	str	r0, [r7, #16]
    if (len > 0)
 801d704:	693b      	ldr	r3, [r7, #16]
 801d706:	2b00      	cmp	r3, #0
 801d708:	dd07      	ble.n	801d71a <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 801d70a:	f107 0308 	add.w	r3, r7, #8
 801d70e:	461a      	mov	r2, r3
 801d710:	6939      	ldr	r1, [r7, #16]
 801d712:	6878      	ldr	r0, [r7, #4]
 801d714:	f7ff fb39 	bl	801cd8a <sendPacket>
 801d718:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 801d71a:	687b      	ldr	r3, [r7, #4]
 801d71c:	2200      	movs	r2, #0
 801d71e:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d720:	697b      	ldr	r3, [r7, #20]
}
 801d722:	4618      	mov	r0, r3
 801d724:	3718      	adds	r7, #24
 801d726:	46bd      	mov	sp, r7
 801d728:	bd80      	pop	{r7, pc}
	...

0801d72c <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 801d72c:	b480      	push	{r7}
 801d72e:	af00      	add	r7, sp, #0
	MilliTimer++;
 801d730:	4b04      	ldr	r3, [pc, #16]	; (801d744 <MilliTimer_Handler+0x18>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	3301      	adds	r3, #1
 801d736:	4a03      	ldr	r2, [pc, #12]	; (801d744 <MilliTimer_Handler+0x18>)
 801d738:	6013      	str	r3, [r2, #0]
}
 801d73a:	bf00      	nop
 801d73c:	46bd      	mov	sp, r7
 801d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d742:	4770      	bx	lr
 801d744:	200009f0 	.word	0x200009f0

0801d748 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d748:	b480      	push	{r7}
 801d74a:	b083      	sub	sp, #12
 801d74c:	af00      	add	r7, sp, #0
 801d74e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	2200      	movs	r2, #0
 801d754:	605a      	str	r2, [r3, #4]
}
 801d756:	bf00      	nop
 801d758:	370c      	adds	r7, #12
 801d75a:	46bd      	mov	sp, r7
 801d75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d760:	4770      	bx	lr
	...

0801d764 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d764:	b480      	push	{r7}
 801d766:	b085      	sub	sp, #20
 801d768:	af00      	add	r7, sp, #0
 801d76a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	685a      	ldr	r2, [r3, #4]
 801d770:	4b06      	ldr	r3, [pc, #24]	; (801d78c <TimerIsExpired+0x28>)
 801d772:	681b      	ldr	r3, [r3, #0]
 801d774:	1ad3      	subs	r3, r2, r3
 801d776:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	0fdb      	lsrs	r3, r3, #31
 801d77c:	b2db      	uxtb	r3, r3
}
 801d77e:	4618      	mov	r0, r3
 801d780:	3714      	adds	r7, #20
 801d782:	46bd      	mov	sp, r7
 801d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d788:	4770      	bx	lr
 801d78a:	bf00      	nop
 801d78c:	200009f0 	.word	0x200009f0

0801d790 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d790:	b480      	push	{r7}
 801d792:	b083      	sub	sp, #12
 801d794:	af00      	add	r7, sp, #0
 801d796:	6078      	str	r0, [r7, #4]
 801d798:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d79a:	4b06      	ldr	r3, [pc, #24]	; (801d7b4 <TimerCountdownMS+0x24>)
 801d79c:	681a      	ldr	r2, [r3, #0]
 801d79e:	683b      	ldr	r3, [r7, #0]
 801d7a0:	441a      	add	r2, r3
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	605a      	str	r2, [r3, #4]
}
 801d7a6:	bf00      	nop
 801d7a8:	370c      	adds	r7, #12
 801d7aa:	46bd      	mov	sp, r7
 801d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7b0:	4770      	bx	lr
 801d7b2:	bf00      	nop
 801d7b4:	200009f0 	.word	0x200009f0

0801d7b8 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d7b8:	b480      	push	{r7}
 801d7ba:	b083      	sub	sp, #12
 801d7bc:	af00      	add	r7, sp, #0
 801d7be:	6078      	str	r0, [r7, #4]
 801d7c0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d7c2:	683b      	ldr	r3, [r7, #0]
 801d7c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d7c8:	fb03 f202 	mul.w	r2, r3, r2
 801d7cc:	4b05      	ldr	r3, [pc, #20]	; (801d7e4 <TimerCountdown+0x2c>)
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	441a      	add	r2, r3
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	605a      	str	r2, [r3, #4]
}
 801d7d6:	bf00      	nop
 801d7d8:	370c      	adds	r7, #12
 801d7da:	46bd      	mov	sp, r7
 801d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7e0:	4770      	bx	lr
 801d7e2:	bf00      	nop
 801d7e4:	200009f0 	.word	0x200009f0

0801d7e8 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d7e8:	b480      	push	{r7}
 801d7ea:	b085      	sub	sp, #20
 801d7ec:	af00      	add	r7, sp, #0
 801d7ee:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	685a      	ldr	r2, [r3, #4]
 801d7f4:	4b06      	ldr	r3, [pc, #24]	; (801d810 <TimerLeftMS+0x28>)
 801d7f6:	681b      	ldr	r3, [r3, #0]
 801d7f8:	1ad3      	subs	r3, r2, r3
 801d7fa:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d802:	4618      	mov	r0, r3
 801d804:	3714      	adds	r7, #20
 801d806:	46bd      	mov	sp, r7
 801d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d80c:	4770      	bx	lr
 801d80e:	bf00      	nop
 801d810:	200009f0 	.word	0x200009f0

0801d814 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d814:	b480      	push	{r7}
 801d816:	b083      	sub	sp, #12
 801d818:	af00      	add	r7, sp, #0
 801d81a:	6078      	str	r0, [r7, #4]
 801d81c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	683a      	ldr	r2, [r7, #0]
 801d822:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	4a07      	ldr	r2, [pc, #28]	; (801d844 <NewNetwork+0x30>)
 801d828:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	4a06      	ldr	r2, [pc, #24]	; (801d848 <NewNetwork+0x34>)
 801d82e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d830:	687b      	ldr	r3, [r7, #4]
 801d832:	4a06      	ldr	r2, [pc, #24]	; (801d84c <NewNetwork+0x38>)
 801d834:	60da      	str	r2, [r3, #12]
}
 801d836:	bf00      	nop
 801d838:	370c      	adds	r7, #12
 801d83a:	46bd      	mov	sp, r7
 801d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d840:	4770      	bx	lr
 801d842:	bf00      	nop
 801d844:	0801d851 	.word	0x0801d851
 801d848:	0801d8ab 	.word	0x0801d8ab
 801d84c:	0801d8f3 	.word	0x0801d8f3

0801d850 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d850:	b580      	push	{r7, lr}
 801d852:	b084      	sub	sp, #16
 801d854:	af00      	add	r7, sp, #0
 801d856:	60f8      	str	r0, [r7, #12]
 801d858:	60b9      	str	r1, [r7, #8]
 801d85a:	607a      	str	r2, [r7, #4]
 801d85c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d85e:	68fb      	ldr	r3, [r7, #12]
 801d860:	681b      	ldr	r3, [r3, #0]
 801d862:	009b      	lsls	r3, r3, #2
 801d864:	3301      	adds	r3, #1
 801d866:	00db      	lsls	r3, r3, #3
 801d868:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d86c:	4618      	mov	r0, r3
 801d86e:	f7fb f837 	bl	80188e0 <WIZCHIP_READ>
 801d872:	4603      	mov	r3, r0
 801d874:	2b17      	cmp	r3, #23
 801d876:	d113      	bne.n	801d8a0 <w5x00_read+0x50>
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	b2db      	uxtb	r3, r3
 801d87e:	4618      	mov	r0, r3
 801d880:	f7fb f9d3 	bl	8018c2a <getSn_RX_RSR>
 801d884:	4603      	mov	r3, r0
 801d886:	2b00      	cmp	r3, #0
 801d888:	d00a      	beq.n	801d8a0 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	b2db      	uxtb	r3, r3
 801d890:	687a      	ldr	r2, [r7, #4]
 801d892:	b292      	uxth	r2, r2
 801d894:	68b9      	ldr	r1, [r7, #8]
 801d896:	4618      	mov	r0, r3
 801d898:	f7fb ff3a 	bl	8019710 <recv>
 801d89c:	4603      	mov	r3, r0
 801d89e:	e000      	b.n	801d8a2 <w5x00_read+0x52>

	return SOCK_ERROR;
 801d8a0:	2300      	movs	r3, #0
}
 801d8a2:	4618      	mov	r0, r3
 801d8a4:	3710      	adds	r7, #16
 801d8a6:	46bd      	mov	sp, r7
 801d8a8:	bd80      	pop	{r7, pc}

0801d8aa <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d8aa:	b580      	push	{r7, lr}
 801d8ac:	b084      	sub	sp, #16
 801d8ae:	af00      	add	r7, sp, #0
 801d8b0:	60f8      	str	r0, [r7, #12]
 801d8b2:	60b9      	str	r1, [r7, #8]
 801d8b4:	607a      	str	r2, [r7, #4]
 801d8b6:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	681b      	ldr	r3, [r3, #0]
 801d8bc:	009b      	lsls	r3, r3, #2
 801d8be:	3301      	adds	r3, #1
 801d8c0:	00db      	lsls	r3, r3, #3
 801d8c2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d8c6:	4618      	mov	r0, r3
 801d8c8:	f7fb f80a 	bl	80188e0 <WIZCHIP_READ>
 801d8cc:	4603      	mov	r3, r0
 801d8ce:	2b17      	cmp	r3, #23
 801d8d0:	d10a      	bne.n	801d8e8 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d8d2:	68fb      	ldr	r3, [r7, #12]
 801d8d4:	681b      	ldr	r3, [r3, #0]
 801d8d6:	b2db      	uxtb	r3, r3
 801d8d8:	687a      	ldr	r2, [r7, #4]
 801d8da:	b292      	uxth	r2, r2
 801d8dc:	68b9      	ldr	r1, [r7, #8]
 801d8de:	4618      	mov	r0, r3
 801d8e0:	f7fb fe1c 	bl	801951c <send>
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	e000      	b.n	801d8ea <w5x00_write+0x40>

	return SOCK_ERROR;
 801d8e8:	2300      	movs	r3, #0
}
 801d8ea:	4618      	mov	r0, r3
 801d8ec:	3710      	adds	r7, #16
 801d8ee:	46bd      	mov	sp, r7
 801d8f0:	bd80      	pop	{r7, pc}

0801d8f2 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d8f2:	b580      	push	{r7, lr}
 801d8f4:	b082      	sub	sp, #8
 801d8f6:	af00      	add	r7, sp, #0
 801d8f8:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	681b      	ldr	r3, [r3, #0]
 801d8fe:	b2db      	uxtb	r3, r3
 801d900:	4618      	mov	r0, r3
 801d902:	f7fb fd95 	bl	8019430 <disconnect>
}
 801d906:	bf00      	nop
 801d908:	3708      	adds	r7, #8
 801d90a:	46bd      	mov	sp, r7
 801d90c:	bd80      	pop	{r7, pc}

0801d90e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d90e:	b580      	push	{r7, lr}
 801d910:	b086      	sub	sp, #24
 801d912:	af00      	add	r7, sp, #0
 801d914:	60f8      	str	r0, [r7, #12]
 801d916:	60b9      	str	r1, [r7, #8]
 801d918:	4613      	mov	r3, r2
 801d91a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d91c:	f243 0339 	movw	r3, #12345	; 0x3039
 801d920:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	b2d8      	uxtb	r0, r3
 801d928:	8afa      	ldrh	r2, [r7, #22]
 801d92a:	2300      	movs	r3, #0
 801d92c:	2101      	movs	r1, #1
 801d92e:	f7fb fac7 	bl	8018ec0 <socket>
 801d932:	4603      	mov	r3, r0
 801d934:	461a      	mov	r2, r3
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	429a      	cmp	r2, r3
 801d93c:	d001      	beq.n	801d942 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d93e:	2300      	movs	r3, #0
 801d940:	e00d      	b.n	801d95e <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	b2db      	uxtb	r3, r3
 801d948:	88fa      	ldrh	r2, [r7, #6]
 801d94a:	68b9      	ldr	r1, [r7, #8]
 801d94c:	4618      	mov	r0, r3
 801d94e:	f7fb fc93 	bl	8019278 <connect>
 801d952:	4603      	mov	r3, r0
 801d954:	2b01      	cmp	r3, #1
 801d956:	d001      	beq.n	801d95c <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d958:	2300      	movs	r3, #0
 801d95a:	e000      	b.n	801d95e <ConnectNetwork+0x50>

	return SOCK_OK;
 801d95c:	2301      	movs	r3, #1
}
 801d95e:	4618      	mov	r0, r3
 801d960:	3718      	adds	r7, #24
 801d962:	46bd      	mov	sp, r7
 801d964:	bd80      	pop	{r7, pc}

0801d966 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d966:	b590      	push	{r4, r7, lr}
 801d968:	b085      	sub	sp, #20
 801d96a:	af00      	add	r7, sp, #0
 801d96c:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d96e:	2300      	movs	r3, #0
 801d970:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	7a1b      	ldrb	r3, [r3, #8]
 801d976:	2b03      	cmp	r3, #3
 801d978:	d102      	bne.n	801d980 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d97a:	230c      	movs	r3, #12
 801d97c:	60fb      	str	r3, [r7, #12]
 801d97e:	e005      	b.n	801d98c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d980:	687b      	ldr	r3, [r7, #4]
 801d982:	7a1b      	ldrb	r3, [r3, #8]
 801d984:	2b04      	cmp	r3, #4
 801d986:	d101      	bne.n	801d98c <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d988:	230a      	movs	r3, #10
 801d98a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	330c      	adds	r3, #12
 801d990:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d994:	f000 fc53 	bl	801e23e <MQTTstrlen>
 801d998:	4603      	mov	r3, r0
 801d99a:	3302      	adds	r3, #2
 801d99c:	68fa      	ldr	r2, [r7, #12]
 801d99e:	4413      	add	r3, r2
 801d9a0:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	7edb      	ldrb	r3, [r3, #27]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d013      	beq.n	801d9d2 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	3324      	adds	r3, #36	; 0x24
 801d9ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d9b2:	f000 fc44 	bl	801e23e <MQTTstrlen>
 801d9b6:	4603      	mov	r3, r0
 801d9b8:	1c9c      	adds	r4, r3, #2
 801d9ba:	687b      	ldr	r3, [r7, #4]
 801d9bc:	3330      	adds	r3, #48	; 0x30
 801d9be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d9c2:	f000 fc3c 	bl	801e23e <MQTTstrlen>
 801d9c6:	4603      	mov	r3, r0
 801d9c8:	4423      	add	r3, r4
 801d9ca:	3302      	adds	r3, #2
 801d9cc:	68fa      	ldr	r2, [r7, #12]
 801d9ce:	4413      	add	r3, r2
 801d9d0:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801d9d2:	687b      	ldr	r3, [r7, #4]
 801d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d103      	bne.n	801d9e2 <MQTTSerialize_connectLength+0x7c>
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d00a      	beq.n	801d9f8 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	3340      	adds	r3, #64	; 0x40
 801d9e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d9ea:	f000 fc28 	bl	801e23e <MQTTstrlen>
 801d9ee:	4603      	mov	r3, r0
 801d9f0:	3302      	adds	r3, #2
 801d9f2:	68fa      	ldr	r2, [r7, #12]
 801d9f4:	4413      	add	r3, r2
 801d9f6:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801d9f8:	687b      	ldr	r3, [r7, #4]
 801d9fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	d103      	bne.n	801da08 <MQTTSerialize_connectLength+0xa2>
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801da04:	2b00      	cmp	r3, #0
 801da06:	d00a      	beq.n	801da1e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	334c      	adds	r3, #76	; 0x4c
 801da0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801da10:	f000 fc15 	bl	801e23e <MQTTstrlen>
 801da14:	4603      	mov	r3, r0
 801da16:	3302      	adds	r3, #2
 801da18:	68fa      	ldr	r2, [r7, #12]
 801da1a:	4413      	add	r3, r2
 801da1c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801da1e:	68fb      	ldr	r3, [r7, #12]
}
 801da20:	4618      	mov	r0, r3
 801da22:	3714      	adds	r7, #20
 801da24:	46bd      	mov	sp, r7
 801da26:	bd90      	pop	{r4, r7, pc}

0801da28 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801da28:	b580      	push	{r7, lr}
 801da2a:	b08a      	sub	sp, #40	; 0x28
 801da2c:	af00      	add	r7, sp, #0
 801da2e:	60f8      	str	r0, [r7, #12]
 801da30:	60b9      	str	r1, [r7, #8]
 801da32:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801da34:	68fb      	ldr	r3, [r7, #12]
 801da36:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801da38:	2300      	movs	r3, #0
 801da3a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801da3c:	2300      	movs	r3, #0
 801da3e:	617b      	str	r3, [r7, #20]
	int len = 0;
 801da40:	2300      	movs	r3, #0
 801da42:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801da44:	f04f 33ff 	mov.w	r3, #4294967295
 801da48:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801da4a:	6878      	ldr	r0, [r7, #4]
 801da4c:	f7ff ff8b 	bl	801d966 <MQTTSerialize_connectLength>
 801da50:	6238      	str	r0, [r7, #32]
 801da52:	6a38      	ldr	r0, [r7, #32]
 801da54:	f000 faa8 	bl	801dfa8 <MQTTPacket_len>
 801da58:	4602      	mov	r2, r0
 801da5a:	68bb      	ldr	r3, [r7, #8]
 801da5c:	4293      	cmp	r3, r2
 801da5e:	da03      	bge.n	801da68 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801da60:	f06f 0301 	mvn.w	r3, #1
 801da64:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801da66:	e0c2      	b.n	801dbee <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801da68:	2300      	movs	r3, #0
 801da6a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801da6c:	7e3b      	ldrb	r3, [r7, #24]
 801da6e:	2201      	movs	r2, #1
 801da70:	f362 1307 	bfi	r3, r2, #4, #4
 801da74:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801da76:	7e3a      	ldrb	r2, [r7, #24]
 801da78:	f107 031c 	add.w	r3, r7, #28
 801da7c:	4611      	mov	r1, r2
 801da7e:	4618      	mov	r0, r3
 801da80:	f000 fb21 	bl	801e0c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801da84:	69fb      	ldr	r3, [r7, #28]
 801da86:	6a39      	ldr	r1, [r7, #32]
 801da88:	4618      	mov	r0, r3
 801da8a:	f000 fa21 	bl	801ded0 <MQTTPacket_encode>
 801da8e:	4602      	mov	r2, r0
 801da90:	69fb      	ldr	r3, [r7, #28]
 801da92:	4413      	add	r3, r2
 801da94:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	7a1b      	ldrb	r3, [r3, #8]
 801da9a:	2b04      	cmp	r3, #4
 801da9c:	d10c      	bne.n	801dab8 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801da9e:	f107 031c 	add.w	r3, r7, #28
 801daa2:	4955      	ldr	r1, [pc, #340]	; (801dbf8 <MQTTSerialize_connect+0x1d0>)
 801daa4:	4618      	mov	r0, r3
 801daa6:	f000 fb4c 	bl	801e142 <writeCString>
		writeChar(&ptr, (char) 4);
 801daaa:	f107 031c 	add.w	r3, r7, #28
 801daae:	2104      	movs	r1, #4
 801dab0:	4618      	mov	r0, r3
 801dab2:	f000 fb08 	bl	801e0c6 <writeChar>
 801dab6:	e00b      	b.n	801dad0 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801dab8:	f107 031c 	add.w	r3, r7, #28
 801dabc:	494f      	ldr	r1, [pc, #316]	; (801dbfc <MQTTSerialize_connect+0x1d4>)
 801dabe:	4618      	mov	r0, r3
 801dac0:	f000 fb3f 	bl	801e142 <writeCString>
		writeChar(&ptr, (char) 3);
 801dac4:	f107 031c 	add.w	r3, r7, #28
 801dac8:	2103      	movs	r1, #3
 801daca:	4618      	mov	r0, r3
 801dacc:	f000 fafb 	bl	801e0c6 <writeChar>
	}

	flags.all = 0;
 801dad0:	2300      	movs	r3, #0
 801dad2:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801dad4:	687b      	ldr	r3, [r7, #4]
 801dad6:	7e9b      	ldrb	r3, [r3, #26]
 801dad8:	f003 0301 	and.w	r3, r3, #1
 801dadc:	b2da      	uxtb	r2, r3
 801dade:	7d3b      	ldrb	r3, [r7, #20]
 801dae0:	f362 0341 	bfi	r3, r2, #1, #1
 801dae4:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801dae6:	687b      	ldr	r3, [r7, #4]
 801dae8:	7edb      	ldrb	r3, [r3, #27]
 801daea:	2b00      	cmp	r3, #0
 801daec:	bf14      	ite	ne
 801daee:	2301      	movne	r3, #1
 801daf0:	2300      	moveq	r3, #0
 801daf2:	b2da      	uxtb	r2, r3
 801daf4:	7d3b      	ldrb	r3, [r7, #20]
 801daf6:	f362 0382 	bfi	r3, r2, #2, #1
 801dafa:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801dafc:	7d3b      	ldrb	r3, [r7, #20]
 801dafe:	f003 0304 	and.w	r3, r3, #4
 801db02:	b2db      	uxtb	r3, r3
 801db04:	2b00      	cmp	r3, #0
 801db06:	d013      	beq.n	801db30 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801db0e:	f003 0303 	and.w	r3, r3, #3
 801db12:	b2da      	uxtb	r2, r3
 801db14:	7d3b      	ldrb	r3, [r7, #20]
 801db16:	f362 03c4 	bfi	r3, r2, #3, #2
 801db1a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801db22:	f003 0301 	and.w	r3, r3, #1
 801db26:	b2da      	uxtb	r2, r3
 801db28:	7d3b      	ldrb	r3, [r7, #20]
 801db2a:	f362 1345 	bfi	r3, r2, #5, #1
 801db2e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801db30:	687b      	ldr	r3, [r7, #4]
 801db32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db34:	2b00      	cmp	r3, #0
 801db36:	d103      	bne.n	801db40 <MQTTSerialize_connect+0x118>
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801db3c:	2b00      	cmp	r3, #0
 801db3e:	d003      	beq.n	801db48 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801db40:	7d3b      	ldrb	r3, [r7, #20]
 801db42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db46:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801db48:	687b      	ldr	r3, [r7, #4]
 801db4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	d103      	bne.n	801db58 <MQTTSerialize_connect+0x130>
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801db54:	2b00      	cmp	r3, #0
 801db56:	d003      	beq.n	801db60 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801db58:	7d3b      	ldrb	r3, [r7, #20]
 801db5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db5e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801db60:	7d3a      	ldrb	r2, [r7, #20]
 801db62:	f107 031c 	add.w	r3, r7, #28
 801db66:	4611      	mov	r1, r2
 801db68:	4618      	mov	r0, r3
 801db6a:	f000 faac 	bl	801e0c6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	8b1b      	ldrh	r3, [r3, #24]
 801db72:	461a      	mov	r2, r3
 801db74:	f107 031c 	add.w	r3, r7, #28
 801db78:	4611      	mov	r1, r2
 801db7a:	4618      	mov	r0, r3
 801db7c:	f000 fab8 	bl	801e0f0 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	f107 001c 	add.w	r0, r7, #28
 801db86:	330c      	adds	r3, #12
 801db88:	cb0e      	ldmia	r3, {r1, r2, r3}
 801db8a:	f000 faf9 	bl	801e180 <writeMQTTString>
	if (options->willFlag)
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	7edb      	ldrb	r3, [r3, #27]
 801db92:	2b00      	cmp	r3, #0
 801db94:	d00d      	beq.n	801dbb2 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	f107 001c 	add.w	r0, r7, #28
 801db9c:	3324      	adds	r3, #36	; 0x24
 801db9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dba0:	f000 faee 	bl	801e180 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	f107 001c 	add.w	r0, r7, #28
 801dbaa:	3330      	adds	r3, #48	; 0x30
 801dbac:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dbae:	f000 fae7 	bl	801e180 <writeMQTTString>
	}
	if (flags.bits.username)
 801dbb2:	7d3b      	ldrb	r3, [r7, #20]
 801dbb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801dbb8:	b2db      	uxtb	r3, r3
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	d006      	beq.n	801dbcc <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	f107 001c 	add.w	r0, r7, #28
 801dbc4:	3340      	adds	r3, #64	; 0x40
 801dbc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dbc8:	f000 fada 	bl	801e180 <writeMQTTString>
	if (flags.bits.password)
 801dbcc:	7d3b      	ldrb	r3, [r7, #20]
 801dbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dbd2:	b2db      	uxtb	r3, r3
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d006      	beq.n	801dbe6 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801dbd8:	687b      	ldr	r3, [r7, #4]
 801dbda:	f107 001c 	add.w	r0, r7, #28
 801dbde:	334c      	adds	r3, #76	; 0x4c
 801dbe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dbe2:	f000 facd 	bl	801e180 <writeMQTTString>

	rc = ptr - buf;
 801dbe6:	69fa      	ldr	r2, [r7, #28]
 801dbe8:	68fb      	ldr	r3, [r7, #12]
 801dbea:	1ad3      	subs	r3, r2, r3
 801dbec:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801dbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	3728      	adds	r7, #40	; 0x28
 801dbf4:	46bd      	mov	sp, r7
 801dbf6:	bd80      	pop	{r7, pc}
 801dbf8:	08033040 	.word	0x08033040
 801dbfc:	08033048 	.word	0x08033048

0801dc00 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801dc00:	b580      	push	{r7, lr}
 801dc02:	b08a      	sub	sp, #40	; 0x28
 801dc04:	af00      	add	r7, sp, #0
 801dc06:	60f8      	str	r0, [r7, #12]
 801dc08:	60b9      	str	r1, [r7, #8]
 801dc0a:	607a      	str	r2, [r7, #4]
 801dc0c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dc0e:	2300      	movs	r3, #0
 801dc10:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801dc16:	2300      	movs	r3, #0
 801dc18:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801dc1e:	2300      	movs	r3, #0
 801dc20:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801dc22:	f107 0318 	add.w	r3, r7, #24
 801dc26:	4618      	mov	r0, r3
 801dc28:	f000 fa39 	bl	801e09e <readChar>
 801dc2c:	4603      	mov	r3, r0
 801dc2e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801dc30:	7f3b      	ldrb	r3, [r7, #28]
 801dc32:	f023 030f 	bic.w	r3, r3, #15
 801dc36:	b2db      	uxtb	r3, r3
 801dc38:	2b20      	cmp	r3, #32
 801dc3a:	d12e      	bne.n	801dc9a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dc3c:	69bb      	ldr	r3, [r7, #24]
 801dc3e:	f107 0214 	add.w	r2, r7, #20
 801dc42:	4611      	mov	r1, r2
 801dc44:	4618      	mov	r0, r3
 801dc46:	f000 f9f9 	bl	801e03c <MQTTPacket_decodeBuf>
 801dc4a:	6278      	str	r0, [r7, #36]	; 0x24
 801dc4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc4e:	69bb      	ldr	r3, [r7, #24]
 801dc50:	4413      	add	r3, r2
 801dc52:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dc54:	69bb      	ldr	r3, [r7, #24]
 801dc56:	697a      	ldr	r2, [r7, #20]
 801dc58:	4413      	add	r3, r2
 801dc5a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801dc5c:	69bb      	ldr	r3, [r7, #24]
 801dc5e:	6a3a      	ldr	r2, [r7, #32]
 801dc60:	1ad3      	subs	r3, r2, r3
 801dc62:	2b01      	cmp	r3, #1
 801dc64:	dd1b      	ble.n	801dc9e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801dc66:	f107 0318 	add.w	r3, r7, #24
 801dc6a:	4618      	mov	r0, r3
 801dc6c:	f000 fa17 	bl	801e09e <readChar>
 801dc70:	4603      	mov	r3, r0
 801dc72:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801dc74:	7c3b      	ldrb	r3, [r7, #16]
 801dc76:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801dc7a:	b2db      	uxtb	r3, r3
 801dc7c:	461a      	mov	r2, r3
 801dc7e:	68fb      	ldr	r3, [r7, #12]
 801dc80:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801dc82:	f107 0318 	add.w	r3, r7, #24
 801dc86:	4618      	mov	r0, r3
 801dc88:	f000 fa09 	bl	801e09e <readChar>
 801dc8c:	4603      	mov	r3, r0
 801dc8e:	461a      	mov	r2, r3
 801dc90:	68bb      	ldr	r3, [r7, #8]
 801dc92:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801dc94:	2301      	movs	r3, #1
 801dc96:	627b      	str	r3, [r7, #36]	; 0x24
 801dc98:	e002      	b.n	801dca0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801dc9a:	bf00      	nop
 801dc9c:	e000      	b.n	801dca0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801dc9e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dca2:	4618      	mov	r0, r3
 801dca4:	3728      	adds	r7, #40	; 0x28
 801dca6:	46bd      	mov	sp, r7
 801dca8:	bd80      	pop	{r7, pc}

0801dcaa <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801dcaa:	b580      	push	{r7, lr}
 801dcac:	b088      	sub	sp, #32
 801dcae:	af00      	add	r7, sp, #0
 801dcb0:	60f8      	str	r0, [r7, #12]
 801dcb2:	60b9      	str	r1, [r7, #8]
 801dcb4:	4613      	mov	r3, r2
 801dcb6:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801dcb8:	2300      	movs	r3, #0
 801dcba:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801dcbc:	f04f 33ff 	mov.w	r3, #4294967295
 801dcc0:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801dcc6:	68bb      	ldr	r3, [r7, #8]
 801dcc8:	2b01      	cmp	r3, #1
 801dcca:	dc03      	bgt.n	801dcd4 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801dccc:	f06f 0301 	mvn.w	r3, #1
 801dcd0:	61fb      	str	r3, [r7, #28]
		goto exit;
 801dcd2:	e01d      	b.n	801dd10 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801dcd4:	2300      	movs	r3, #0
 801dcd6:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801dcd8:	79fb      	ldrb	r3, [r7, #7]
 801dcda:	f003 030f 	and.w	r3, r3, #15
 801dcde:	b2da      	uxtb	r2, r3
 801dce0:	7e3b      	ldrb	r3, [r7, #24]
 801dce2:	f362 1307 	bfi	r3, r2, #4, #4
 801dce6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801dce8:	7e3a      	ldrb	r2, [r7, #24]
 801dcea:	f107 0314 	add.w	r3, r7, #20
 801dcee:	4611      	mov	r1, r2
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	f000 f9e8 	bl	801e0c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801dcf6:	697b      	ldr	r3, [r7, #20]
 801dcf8:	2100      	movs	r1, #0
 801dcfa:	4618      	mov	r0, r3
 801dcfc:	f000 f8e8 	bl	801ded0 <MQTTPacket_encode>
 801dd00:	4602      	mov	r2, r0
 801dd02:	697b      	ldr	r3, [r7, #20]
 801dd04:	4413      	add	r3, r2
 801dd06:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801dd08:	697a      	ldr	r2, [r7, #20]
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	1ad3      	subs	r3, r2, r3
 801dd0e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dd10:	69fb      	ldr	r3, [r7, #28]
}
 801dd12:	4618      	mov	r0, r3
 801dd14:	3720      	adds	r7, #32
 801dd16:	46bd      	mov	sp, r7
 801dd18:	bd80      	pop	{r7, pc}

0801dd1a <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801dd1a:	b580      	push	{r7, lr}
 801dd1c:	b082      	sub	sp, #8
 801dd1e:	af00      	add	r7, sp, #0
 801dd20:	6078      	str	r0, [r7, #4]
 801dd22:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 801dd24:	220e      	movs	r2, #14
 801dd26:	6839      	ldr	r1, [r7, #0]
 801dd28:	6878      	ldr	r0, [r7, #4]
 801dd2a:	f7ff ffbe 	bl	801dcaa <MQTTSerialize_zero>
 801dd2e:	4603      	mov	r3, r0
}
 801dd30:	4618      	mov	r0, r3
 801dd32:	3708      	adds	r7, #8
 801dd34:	46bd      	mov	sp, r7
 801dd36:	bd80      	pop	{r7, pc}

0801dd38 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801dd38:	b580      	push	{r7, lr}
 801dd3a:	b082      	sub	sp, #8
 801dd3c:	af00      	add	r7, sp, #0
 801dd3e:	6078      	str	r0, [r7, #4]
 801dd40:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801dd42:	220c      	movs	r2, #12
 801dd44:	6839      	ldr	r1, [r7, #0]
 801dd46:	6878      	ldr	r0, [r7, #4]
 801dd48:	f7ff ffaf 	bl	801dcaa <MQTTSerialize_zero>
 801dd4c:	4603      	mov	r3, r0
}
 801dd4e:	4618      	mov	r0, r3
 801dd50:	3708      	adds	r7, #8
 801dd52:	46bd      	mov	sp, r7
 801dd54:	bd80      	pop	{r7, pc}

0801dd56 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801dd56:	b580      	push	{r7, lr}
 801dd58:	b08a      	sub	sp, #40	; 0x28
 801dd5a:	af00      	add	r7, sp, #0
 801dd5c:	60f8      	str	r0, [r7, #12]
 801dd5e:	60b9      	str	r1, [r7, #8]
 801dd60:	607a      	str	r2, [r7, #4]
 801dd62:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dd64:	2300      	movs	r3, #0
 801dd66:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd6a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801dd6c:	2300      	movs	r3, #0
 801dd6e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801dd70:	2300      	movs	r3, #0
 801dd72:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801dd74:	2300      	movs	r3, #0
 801dd76:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801dd78:	f107 0318 	add.w	r3, r7, #24
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	f000 f98e 	bl	801e09e <readChar>
 801dd82:	4603      	mov	r3, r0
 801dd84:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801dd86:	7f3b      	ldrb	r3, [r7, #28]
 801dd88:	f023 030f 	bic.w	r3, r3, #15
 801dd8c:	b2db      	uxtb	r3, r3
 801dd8e:	2b30      	cmp	r3, #48	; 0x30
 801dd90:	d14b      	bne.n	801de2a <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801dd92:	7f3b      	ldrb	r3, [r7, #28]
 801dd94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dd98:	b2db      	uxtb	r3, r3
 801dd9a:	461a      	mov	r2, r3
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801dda0:	7f3b      	ldrb	r3, [r7, #28]
 801dda2:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801dda6:	b2db      	uxtb	r3, r3
 801dda8:	461a      	mov	r2, r3
 801ddaa:	68bb      	ldr	r3, [r7, #8]
 801ddac:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801ddae:	7f3b      	ldrb	r3, [r7, #28]
 801ddb0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801ddb4:	b2db      	uxtb	r3, r3
 801ddb6:	461a      	mov	r2, r3
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801ddbc:	69bb      	ldr	r3, [r7, #24]
 801ddbe:	f107 0214 	add.w	r2, r7, #20
 801ddc2:	4611      	mov	r1, r2
 801ddc4:	4618      	mov	r0, r3
 801ddc6:	f000 f939 	bl	801e03c <MQTTPacket_decodeBuf>
 801ddca:	6278      	str	r0, [r7, #36]	; 0x24
 801ddcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ddce:	69bb      	ldr	r3, [r7, #24]
 801ddd0:	4413      	add	r3, r2
 801ddd2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801ddd4:	69bb      	ldr	r3, [r7, #24]
 801ddd6:	697a      	ldr	r2, [r7, #20]
 801ddd8:	4413      	add	r3, r2
 801ddda:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801dddc:	f107 0318 	add.w	r3, r7, #24
 801dde0:	6a3a      	ldr	r2, [r7, #32]
 801dde2:	4619      	mov	r1, r3
 801dde4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dde6:	f000 f9f9 	bl	801e1dc <readMQTTLenString>
 801ddea:	4603      	mov	r3, r0
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	d01e      	beq.n	801de2e <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801ddf0:	69bb      	ldr	r3, [r7, #24]
 801ddf2:	6a3a      	ldr	r2, [r7, #32]
 801ddf4:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801ddf6:	2b00      	cmp	r3, #0
 801ddf8:	db19      	blt.n	801de2e <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801ddfa:	68bb      	ldr	r3, [r7, #8]
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	dd08      	ble.n	801de14 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801de02:	f107 0318 	add.w	r3, r7, #24
 801de06:	4618      	mov	r0, r3
 801de08:	f000 f92e 	bl	801e068 <readInt>
 801de0c:	4603      	mov	r3, r0
 801de0e:	b29a      	uxth	r2, r3
 801de10:	683b      	ldr	r3, [r7, #0]
 801de12:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801de14:	69bb      	ldr	r3, [r7, #24]
 801de16:	6a3a      	ldr	r2, [r7, #32]
 801de18:	1ad2      	subs	r2, r2, r3
 801de1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de1c:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801de1e:	69ba      	ldr	r2, [r7, #24]
 801de20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de22:	601a      	str	r2, [r3, #0]
	rc = 1;
 801de24:	2301      	movs	r3, #1
 801de26:	627b      	str	r3, [r7, #36]	; 0x24
 801de28:	e002      	b.n	801de30 <MQTTDeserialize_publish+0xda>
		goto exit;
 801de2a:	bf00      	nop
 801de2c:	e000      	b.n	801de30 <MQTTDeserialize_publish+0xda>
		goto exit;
 801de2e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801de30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801de32:	4618      	mov	r0, r3
 801de34:	3728      	adds	r7, #40	; 0x28
 801de36:	46bd      	mov	sp, r7
 801de38:	bd80      	pop	{r7, pc}

0801de3a <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801de3a:	b580      	push	{r7, lr}
 801de3c:	b08a      	sub	sp, #40	; 0x28
 801de3e:	af00      	add	r7, sp, #0
 801de40:	60f8      	str	r0, [r7, #12]
 801de42:	60b9      	str	r1, [r7, #8]
 801de44:	607a      	str	r2, [r7, #4]
 801de46:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801de48:	2300      	movs	r3, #0
 801de4a:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801de4c:	683b      	ldr	r3, [r7, #0]
 801de4e:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801de50:	2300      	movs	r3, #0
 801de52:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801de54:	2300      	movs	r3, #0
 801de56:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801de58:	f107 0318 	add.w	r3, r7, #24
 801de5c:	4618      	mov	r0, r3
 801de5e:	f000 f91e 	bl	801e09e <readChar>
 801de62:	4603      	mov	r3, r0
 801de64:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801de66:	7f3b      	ldrb	r3, [r7, #28]
 801de68:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801de6c:	b2db      	uxtb	r3, r3
 801de6e:	461a      	mov	r2, r3
 801de70:	68bb      	ldr	r3, [r7, #8]
 801de72:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801de74:	7f3b      	ldrb	r3, [r7, #28]
 801de76:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801de7a:	b2db      	uxtb	r3, r3
 801de7c:	461a      	mov	r2, r3
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801de82:	69bb      	ldr	r3, [r7, #24]
 801de84:	f107 0214 	add.w	r2, r7, #20
 801de88:	4611      	mov	r1, r2
 801de8a:	4618      	mov	r0, r3
 801de8c:	f000 f8d6 	bl	801e03c <MQTTPacket_decodeBuf>
 801de90:	6278      	str	r0, [r7, #36]	; 0x24
 801de92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de94:	69bb      	ldr	r3, [r7, #24]
 801de96:	4413      	add	r3, r2
 801de98:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801de9a:	69bb      	ldr	r3, [r7, #24]
 801de9c:	697a      	ldr	r2, [r7, #20]
 801de9e:	4413      	add	r3, r2
 801dea0:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801dea2:	69bb      	ldr	r3, [r7, #24]
 801dea4:	6a3a      	ldr	r2, [r7, #32]
 801dea6:	1ad3      	subs	r3, r2, r3
 801dea8:	2b01      	cmp	r3, #1
 801deaa:	dd0b      	ble.n	801dec4 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801deac:	f107 0318 	add.w	r3, r7, #24
 801deb0:	4618      	mov	r0, r3
 801deb2:	f000 f8d9 	bl	801e068 <readInt>
 801deb6:	4603      	mov	r3, r0
 801deb8:	b29a      	uxth	r2, r3
 801deba:	687b      	ldr	r3, [r7, #4]
 801debc:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801debe:	2301      	movs	r3, #1
 801dec0:	627b      	str	r3, [r7, #36]	; 0x24
 801dec2:	e000      	b.n	801dec6 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801dec4:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dec8:	4618      	mov	r0, r3
 801deca:	3728      	adds	r7, #40	; 0x28
 801decc:	46bd      	mov	sp, r7
 801dece:	bd80      	pop	{r7, pc}

0801ded0 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801ded0:	b480      	push	{r7}
 801ded2:	b085      	sub	sp, #20
 801ded4:	af00      	add	r7, sp, #0
 801ded6:	6078      	str	r0, [r7, #4]
 801ded8:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801deda:	2300      	movs	r3, #0
 801dedc:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801dede:	683b      	ldr	r3, [r7, #0]
 801dee0:	425a      	negs	r2, r3
 801dee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dee6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801deea:	bf58      	it	pl
 801deec:	4253      	negpl	r3, r2
 801deee:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	2b00      	cmp	r3, #0
 801def4:	da00      	bge.n	801def8 <MQTTPacket_encode+0x28>
 801def6:	337f      	adds	r3, #127	; 0x7f
 801def8:	11db      	asrs	r3, r3, #7
 801defa:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801defc:	683b      	ldr	r3, [r7, #0]
 801defe:	2b00      	cmp	r3, #0
 801df00:	dd03      	ble.n	801df0a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801df02:	7afb      	ldrb	r3, [r7, #11]
 801df04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801df08:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	1c5a      	adds	r2, r3, #1
 801df0e:	60fa      	str	r2, [r7, #12]
 801df10:	461a      	mov	r2, r3
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	4413      	add	r3, r2
 801df16:	7afa      	ldrb	r2, [r7, #11]
 801df18:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801df1a:	683b      	ldr	r3, [r7, #0]
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	dcde      	bgt.n	801dede <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801df20:	68fb      	ldr	r3, [r7, #12]
}
 801df22:	4618      	mov	r0, r3
 801df24:	3714      	adds	r7, #20
 801df26:	46bd      	mov	sp, r7
 801df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df2c:	4770      	bx	lr

0801df2e <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801df2e:	b580      	push	{r7, lr}
 801df30:	b086      	sub	sp, #24
 801df32:	af00      	add	r7, sp, #0
 801df34:	6078      	str	r0, [r7, #4]
 801df36:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801df38:	2301      	movs	r3, #1
 801df3a:	617b      	str	r3, [r7, #20]
	int len = 0;
 801df3c:	2300      	movs	r3, #0
 801df3e:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801df40:	683b      	ldr	r3, [r7, #0]
 801df42:	2200      	movs	r2, #0
 801df44:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801df46:	f04f 33ff 	mov.w	r3, #4294967295
 801df4a:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801df4c:	693b      	ldr	r3, [r7, #16]
 801df4e:	3301      	adds	r3, #1
 801df50:	613b      	str	r3, [r7, #16]
 801df52:	693b      	ldr	r3, [r7, #16]
 801df54:	2b04      	cmp	r3, #4
 801df56:	dd03      	ble.n	801df60 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801df58:	f04f 33ff 	mov.w	r3, #4294967295
 801df5c:	60fb      	str	r3, [r7, #12]
			goto exit;
 801df5e:	e01d      	b.n	801df9c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801df60:	f107 020b 	add.w	r2, r7, #11
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	2101      	movs	r1, #1
 801df68:	4610      	mov	r0, r2
 801df6a:	4798      	blx	r3
 801df6c:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801df6e:	68fb      	ldr	r3, [r7, #12]
 801df70:	2b01      	cmp	r3, #1
 801df72:	d112      	bne.n	801df9a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801df74:	683b      	ldr	r3, [r7, #0]
 801df76:	681a      	ldr	r2, [r3, #0]
 801df78:	7afb      	ldrb	r3, [r7, #11]
 801df7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df7e:	6979      	ldr	r1, [r7, #20]
 801df80:	fb01 f303 	mul.w	r3, r1, r3
 801df84:	441a      	add	r2, r3
 801df86:	683b      	ldr	r3, [r7, #0]
 801df88:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801df8a:	697b      	ldr	r3, [r7, #20]
 801df8c:	01db      	lsls	r3, r3, #7
 801df8e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801df90:	7afb      	ldrb	r3, [r7, #11]
 801df92:	b25b      	sxtb	r3, r3
 801df94:	2b00      	cmp	r3, #0
 801df96:	dbd6      	blt.n	801df46 <MQTTPacket_decode+0x18>
exit:
 801df98:	e000      	b.n	801df9c <MQTTPacket_decode+0x6e>
			goto exit;
 801df9a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801df9c:	693b      	ldr	r3, [r7, #16]
}
 801df9e:	4618      	mov	r0, r3
 801dfa0:	3718      	adds	r7, #24
 801dfa2:	46bd      	mov	sp, r7
 801dfa4:	bd80      	pop	{r7, pc}
	...

0801dfa8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801dfa8:	b480      	push	{r7}
 801dfaa:	b083      	sub	sp, #12
 801dfac:	af00      	add	r7, sp, #0
 801dfae:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	3301      	adds	r3, #1
 801dfb4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801dfb6:	687b      	ldr	r3, [r7, #4]
 801dfb8:	2b7f      	cmp	r3, #127	; 0x7f
 801dfba:	dc03      	bgt.n	801dfc4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	3301      	adds	r3, #1
 801dfc0:	607b      	str	r3, [r7, #4]
 801dfc2:	e012      	b.n	801dfea <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dfca:	da03      	bge.n	801dfd4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	3302      	adds	r3, #2
 801dfd0:	607b      	str	r3, [r7, #4]
 801dfd2:	e00a      	b.n	801dfea <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801dfd4:	687b      	ldr	r3, [r7, #4]
 801dfd6:	4a08      	ldr	r2, [pc, #32]	; (801dff8 <MQTTPacket_len+0x50>)
 801dfd8:	4293      	cmp	r3, r2
 801dfda:	dc03      	bgt.n	801dfe4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	3303      	adds	r3, #3
 801dfe0:	607b      	str	r3, [r7, #4]
 801dfe2:	e002      	b.n	801dfea <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	3304      	adds	r3, #4
 801dfe8:	607b      	str	r3, [r7, #4]
	return rem_len;
 801dfea:	687b      	ldr	r3, [r7, #4]
}
 801dfec:	4618      	mov	r0, r3
 801dfee:	370c      	adds	r7, #12
 801dff0:	46bd      	mov	sp, r7
 801dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff6:	4770      	bx	lr
 801dff8:	001ffffe 	.word	0x001ffffe

0801dffc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801dffc:	b480      	push	{r7}
 801dffe:	b085      	sub	sp, #20
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
 801e004:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801e006:	2300      	movs	r3, #0
 801e008:	60fb      	str	r3, [r7, #12]
 801e00a:	e00a      	b.n	801e022 <bufchar+0x26>
		*c = *bufptr++;
 801e00c:	4b0a      	ldr	r3, [pc, #40]	; (801e038 <bufchar+0x3c>)
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	1c5a      	adds	r2, r3, #1
 801e012:	4909      	ldr	r1, [pc, #36]	; (801e038 <bufchar+0x3c>)
 801e014:	600a      	str	r2, [r1, #0]
 801e016:	781a      	ldrb	r2, [r3, #0]
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	3301      	adds	r3, #1
 801e020:	60fb      	str	r3, [r7, #12]
 801e022:	68fa      	ldr	r2, [r7, #12]
 801e024:	683b      	ldr	r3, [r7, #0]
 801e026:	429a      	cmp	r2, r3
 801e028:	dbf0      	blt.n	801e00c <bufchar+0x10>
	return count;
 801e02a:	683b      	ldr	r3, [r7, #0]
}
 801e02c:	4618      	mov	r0, r3
 801e02e:	3714      	adds	r7, #20
 801e030:	46bd      	mov	sp, r7
 801e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e036:	4770      	bx	lr
 801e038:	200009f4 	.word	0x200009f4

0801e03c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801e03c:	b580      	push	{r7, lr}
 801e03e:	b082      	sub	sp, #8
 801e040:	af00      	add	r7, sp, #0
 801e042:	6078      	str	r0, [r7, #4]
 801e044:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801e046:	4a06      	ldr	r2, [pc, #24]	; (801e060 <MQTTPacket_decodeBuf+0x24>)
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801e04c:	6839      	ldr	r1, [r7, #0]
 801e04e:	4805      	ldr	r0, [pc, #20]	; (801e064 <MQTTPacket_decodeBuf+0x28>)
 801e050:	f7ff ff6d 	bl	801df2e <MQTTPacket_decode>
 801e054:	4603      	mov	r3, r0
}
 801e056:	4618      	mov	r0, r3
 801e058:	3708      	adds	r7, #8
 801e05a:	46bd      	mov	sp, r7
 801e05c:	bd80      	pop	{r7, pc}
 801e05e:	bf00      	nop
 801e060:	200009f4 	.word	0x200009f4
 801e064:	0801dffd 	.word	0x0801dffd

0801e068 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801e068:	b480      	push	{r7}
 801e06a:	b085      	sub	sp, #20
 801e06c:	af00      	add	r7, sp, #0
 801e06e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801e070:	687b      	ldr	r3, [r7, #4]
 801e072:	681b      	ldr	r3, [r3, #0]
 801e074:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801e076:	68fb      	ldr	r3, [r7, #12]
 801e078:	781b      	ldrb	r3, [r3, #0]
 801e07a:	021b      	lsls	r3, r3, #8
 801e07c:	68fa      	ldr	r2, [r7, #12]
 801e07e:	3201      	adds	r2, #1
 801e080:	7812      	ldrb	r2, [r2, #0]
 801e082:	4413      	add	r3, r2
 801e084:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801e086:	687b      	ldr	r3, [r7, #4]
 801e088:	681b      	ldr	r3, [r3, #0]
 801e08a:	1c9a      	adds	r2, r3, #2
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	601a      	str	r2, [r3, #0]
	return len;
 801e090:	68bb      	ldr	r3, [r7, #8]
}
 801e092:	4618      	mov	r0, r3
 801e094:	3714      	adds	r7, #20
 801e096:	46bd      	mov	sp, r7
 801e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e09c:	4770      	bx	lr

0801e09e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801e09e:	b480      	push	{r7}
 801e0a0:	b085      	sub	sp, #20
 801e0a2:	af00      	add	r7, sp, #0
 801e0a4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	781b      	ldrb	r3, [r3, #0]
 801e0ac:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	1c5a      	adds	r2, r3, #1
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	601a      	str	r2, [r3, #0]
	return c;
 801e0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801e0ba:	4618      	mov	r0, r3
 801e0bc:	3714      	adds	r7, #20
 801e0be:	46bd      	mov	sp, r7
 801e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0c4:	4770      	bx	lr

0801e0c6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801e0c6:	b480      	push	{r7}
 801e0c8:	b083      	sub	sp, #12
 801e0ca:	af00      	add	r7, sp, #0
 801e0cc:	6078      	str	r0, [r7, #4]
 801e0ce:	460b      	mov	r3, r1
 801e0d0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	681b      	ldr	r3, [r3, #0]
 801e0d6:	78fa      	ldrb	r2, [r7, #3]
 801e0d8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e0da:	687b      	ldr	r3, [r7, #4]
 801e0dc:	681b      	ldr	r3, [r3, #0]
 801e0de:	1c5a      	adds	r2, r3, #1
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	601a      	str	r2, [r3, #0]
}
 801e0e4:	bf00      	nop
 801e0e6:	370c      	adds	r7, #12
 801e0e8:	46bd      	mov	sp, r7
 801e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0ee:	4770      	bx	lr

0801e0f0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801e0f0:	b480      	push	{r7}
 801e0f2:	b083      	sub	sp, #12
 801e0f4:	af00      	add	r7, sp, #0
 801e0f6:	6078      	str	r0, [r7, #4]
 801e0f8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801e0fa:	683b      	ldr	r3, [r7, #0]
 801e0fc:	2b00      	cmp	r3, #0
 801e0fe:	da00      	bge.n	801e102 <writeInt+0x12>
 801e100:	33ff      	adds	r3, #255	; 0xff
 801e102:	121b      	asrs	r3, r3, #8
 801e104:	461a      	mov	r2, r3
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	b2d2      	uxtb	r2, r2
 801e10c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e10e:	687b      	ldr	r3, [r7, #4]
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	1c5a      	adds	r2, r3, #1
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e118:	683b      	ldr	r3, [r7, #0]
 801e11a:	425a      	negs	r2, r3
 801e11c:	b2db      	uxtb	r3, r3
 801e11e:	b2d2      	uxtb	r2, r2
 801e120:	bf58      	it	pl
 801e122:	4253      	negpl	r3, r2
 801e124:	687a      	ldr	r2, [r7, #4]
 801e126:	6812      	ldr	r2, [r2, #0]
 801e128:	b2db      	uxtb	r3, r3
 801e12a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	681b      	ldr	r3, [r3, #0]
 801e130:	1c5a      	adds	r2, r3, #1
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	601a      	str	r2, [r3, #0]
}
 801e136:	bf00      	nop
 801e138:	370c      	adds	r7, #12
 801e13a:	46bd      	mov	sp, r7
 801e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e140:	4770      	bx	lr

0801e142 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801e142:	b580      	push	{r7, lr}
 801e144:	b084      	sub	sp, #16
 801e146:	af00      	add	r7, sp, #0
 801e148:	6078      	str	r0, [r7, #4]
 801e14a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801e14c:	6838      	ldr	r0, [r7, #0]
 801e14e:	f7f2 f8a7 	bl	80102a0 <strlen>
 801e152:	4603      	mov	r3, r0
 801e154:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801e156:	68f9      	ldr	r1, [r7, #12]
 801e158:	6878      	ldr	r0, [r7, #4]
 801e15a:	f7ff ffc9 	bl	801e0f0 <writeInt>
	memcpy(*pptr, string, len);
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	68fa      	ldr	r2, [r7, #12]
 801e164:	6839      	ldr	r1, [r7, #0]
 801e166:	4618      	mov	r0, r3
 801e168:	f00f fe95 	bl	802de96 <memcpy>
	*pptr += len;
 801e16c:	687b      	ldr	r3, [r7, #4]
 801e16e:	681a      	ldr	r2, [r3, #0]
 801e170:	68fb      	ldr	r3, [r7, #12]
 801e172:	441a      	add	r2, r3
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	601a      	str	r2, [r3, #0]
}
 801e178:	bf00      	nop
 801e17a:	3710      	adds	r7, #16
 801e17c:	46bd      	mov	sp, r7
 801e17e:	bd80      	pop	{r7, pc}

0801e180 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801e180:	b580      	push	{r7, lr}
 801e182:	b084      	sub	sp, #16
 801e184:	af00      	add	r7, sp, #0
 801e186:	60f8      	str	r0, [r7, #12]
 801e188:	4638      	mov	r0, r7
 801e18a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	2b00      	cmp	r3, #0
 801e192:	dd12      	ble.n	801e1ba <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	4619      	mov	r1, r3
 801e198:	68f8      	ldr	r0, [r7, #12]
 801e19a:	f7ff ffa9 	bl	801e0f0 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	68b9      	ldr	r1, [r7, #8]
 801e1a4:	687a      	ldr	r2, [r7, #4]
 801e1a6:	4618      	mov	r0, r3
 801e1a8:	f00f fe75 	bl	802de96 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	687a      	ldr	r2, [r7, #4]
 801e1b2:	441a      	add	r2, r3
 801e1b4:	68fb      	ldr	r3, [r7, #12]
 801e1b6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801e1b8:	e00c      	b.n	801e1d4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801e1ba:	683b      	ldr	r3, [r7, #0]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d005      	beq.n	801e1cc <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801e1c0:	683b      	ldr	r3, [r7, #0]
 801e1c2:	4619      	mov	r1, r3
 801e1c4:	68f8      	ldr	r0, [r7, #12]
 801e1c6:	f7ff ffbc 	bl	801e142 <writeCString>
}
 801e1ca:	e003      	b.n	801e1d4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801e1cc:	2100      	movs	r1, #0
 801e1ce:	68f8      	ldr	r0, [r7, #12]
 801e1d0:	f7ff ff8e 	bl	801e0f0 <writeInt>
}
 801e1d4:	bf00      	nop
 801e1d6:	3710      	adds	r7, #16
 801e1d8:	46bd      	mov	sp, r7
 801e1da:	bd80      	pop	{r7, pc}

0801e1dc <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801e1dc:	b580      	push	{r7, lr}
 801e1de:	b086      	sub	sp, #24
 801e1e0:	af00      	add	r7, sp, #0
 801e1e2:	60f8      	str	r0, [r7, #12]
 801e1e4:	60b9      	str	r1, [r7, #8]
 801e1e6:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801e1e8:	2300      	movs	r3, #0
 801e1ea:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801e1ec:	68bb      	ldr	r3, [r7, #8]
 801e1ee:	681b      	ldr	r3, [r3, #0]
 801e1f0:	687a      	ldr	r2, [r7, #4]
 801e1f2:	1ad3      	subs	r3, r2, r3
 801e1f4:	2b01      	cmp	r3, #1
 801e1f6:	dd1a      	ble.n	801e22e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801e1f8:	68b8      	ldr	r0, [r7, #8]
 801e1fa:	f7ff ff35 	bl	801e068 <readInt>
 801e1fe:	4602      	mov	r2, r0
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801e204:	68bb      	ldr	r3, [r7, #8]
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	68fa      	ldr	r2, [r7, #12]
 801e20a:	6852      	ldr	r2, [r2, #4]
 801e20c:	4413      	add	r3, r2
 801e20e:	687a      	ldr	r2, [r7, #4]
 801e210:	429a      	cmp	r2, r3
 801e212:	d30c      	bcc.n	801e22e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801e214:	68bb      	ldr	r3, [r7, #8]
 801e216:	681a      	ldr	r2, [r3, #0]
 801e218:	68fb      	ldr	r3, [r7, #12]
 801e21a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801e21c:	68bb      	ldr	r3, [r7, #8]
 801e21e:	681b      	ldr	r3, [r3, #0]
 801e220:	68fa      	ldr	r2, [r7, #12]
 801e222:	6852      	ldr	r2, [r2, #4]
 801e224:	441a      	add	r2, r3
 801e226:	68bb      	ldr	r3, [r7, #8]
 801e228:	601a      	str	r2, [r3, #0]
			rc = 1;
 801e22a:	2301      	movs	r3, #1
 801e22c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	2200      	movs	r2, #0
 801e232:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801e234:	697b      	ldr	r3, [r7, #20]
}
 801e236:	4618      	mov	r0, r3
 801e238:	3718      	adds	r7, #24
 801e23a:	46bd      	mov	sp, r7
 801e23c:	bd80      	pop	{r7, pc}

0801e23e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801e23e:	b580      	push	{r7, lr}
 801e240:	b086      	sub	sp, #24
 801e242:	af00      	add	r7, sp, #0
 801e244:	1d3b      	adds	r3, r7, #4
 801e246:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801e24a:	2300      	movs	r3, #0
 801e24c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	2b00      	cmp	r3, #0
 801e252:	d006      	beq.n	801e262 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	4618      	mov	r0, r3
 801e258:	f7f2 f822 	bl	80102a0 <strlen>
 801e25c:	4603      	mov	r3, r0
 801e25e:	617b      	str	r3, [r7, #20]
 801e260:	e001      	b.n	801e266 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801e262:	68bb      	ldr	r3, [r7, #8]
 801e264:	617b      	str	r3, [r7, #20]
	return rc;
 801e266:	697b      	ldr	r3, [r7, #20]
}
 801e268:	4618      	mov	r0, r3
 801e26a:	3718      	adds	r7, #24
 801e26c:	46bd      	mov	sp, r7
 801e26e:	bd80      	pop	{r7, pc}

0801e270 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801e270:	b580      	push	{r7, lr}
 801e272:	b086      	sub	sp, #24
 801e274:	af00      	add	r7, sp, #0
 801e276:	6078      	str	r0, [r7, #4]
 801e278:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801e27a:	2300      	movs	r3, #0
 801e27c:	617b      	str	r3, [r7, #20]
		blen = 0;
 801e27e:	2300      	movs	r3, #0
 801e280:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	681b      	ldr	r3, [r3, #0]
 801e286:	2b00      	cmp	r3, #0
 801e288:	d00a      	beq.n	801e2a0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	681b      	ldr	r3, [r3, #0]
 801e294:	4618      	mov	r0, r3
 801e296:	f7f2 f803 	bl	80102a0 <strlen>
 801e29a:	4603      	mov	r3, r0
 801e29c:	617b      	str	r3, [r7, #20]
 801e29e:	e005      	b.n	801e2ac <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	689b      	ldr	r3, [r3, #8]
 801e2a4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	685b      	ldr	r3, [r3, #4]
 801e2aa:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801e2ac:	6838      	ldr	r0, [r7, #0]
 801e2ae:	f7f1 fff7 	bl	80102a0 <strlen>
 801e2b2:	4603      	mov	r3, r0
 801e2b4:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801e2b6:	697a      	ldr	r2, [r7, #20]
 801e2b8:	68fb      	ldr	r3, [r7, #12]
 801e2ba:	429a      	cmp	r2, r3
 801e2bc:	d10a      	bne.n	801e2d4 <MQTTPacket_equals+0x64>
 801e2be:	697b      	ldr	r3, [r7, #20]
 801e2c0:	461a      	mov	r2, r3
 801e2c2:	6839      	ldr	r1, [r7, #0]
 801e2c4:	6938      	ldr	r0, [r7, #16]
 801e2c6:	f00f fc59 	bl	802db7c <strncmp>
 801e2ca:	4603      	mov	r3, r0
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d101      	bne.n	801e2d4 <MQTTPacket_equals+0x64>
 801e2d0:	2301      	movs	r3, #1
 801e2d2:	e000      	b.n	801e2d6 <MQTTPacket_equals+0x66>
 801e2d4:	2300      	movs	r3, #0
}
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	3718      	adds	r7, #24
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	bd80      	pop	{r7, pc}

0801e2de <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801e2de:	b580      	push	{r7, lr}
 801e2e0:	b086      	sub	sp, #24
 801e2e2:	af00      	add	r7, sp, #0
 801e2e4:	60f8      	str	r0, [r7, #12]
 801e2e6:	4638      	mov	r0, r7
 801e2e8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801e2f0:	463b      	mov	r3, r7
 801e2f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e2f6:	f7ff ffa2 	bl	801e23e <MQTTstrlen>
 801e2fa:	4603      	mov	r3, r0
 801e2fc:	1c9a      	adds	r2, r3, #2
 801e2fe:	6a3b      	ldr	r3, [r7, #32]
 801e300:	4413      	add	r3, r2
 801e302:	697a      	ldr	r2, [r7, #20]
 801e304:	4413      	add	r3, r2
 801e306:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801e308:	68fb      	ldr	r3, [r7, #12]
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	dd02      	ble.n	801e314 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801e30e:	697b      	ldr	r3, [r7, #20]
 801e310:	3302      	adds	r3, #2
 801e312:	617b      	str	r3, [r7, #20]
	return len;
 801e314:	697b      	ldr	r3, [r7, #20]
}
 801e316:	4618      	mov	r0, r3
 801e318:	3718      	adds	r7, #24
 801e31a:	46bd      	mov	sp, r7
 801e31c:	bd80      	pop	{r7, pc}

0801e31e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801e31e:	b580      	push	{r7, lr}
 801e320:	b08a      	sub	sp, #40	; 0x28
 801e322:	af02      	add	r7, sp, #8
 801e324:	60f8      	str	r0, [r7, #12]
 801e326:	60b9      	str	r1, [r7, #8]
 801e328:	603b      	str	r3, [r7, #0]
 801e32a:	4613      	mov	r3, r2
 801e32c:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801e332:	2300      	movs	r3, #0
 801e334:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801e336:	2300      	movs	r3, #0
 801e338:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e33a:	2300      	movs	r3, #0
 801e33c:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801e33e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e340:	9300      	str	r3, [sp, #0]
 801e342:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e346:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e348:	6838      	ldr	r0, [r7, #0]
 801e34a:	f7ff ffc8 	bl	801e2de <MQTTSerialize_publishLength>
 801e34e:	61b8      	str	r0, [r7, #24]
 801e350:	69b8      	ldr	r0, [r7, #24]
 801e352:	f7ff fe29 	bl	801dfa8 <MQTTPacket_len>
 801e356:	4602      	mov	r2, r0
 801e358:	68bb      	ldr	r3, [r7, #8]
 801e35a:	4293      	cmp	r3, r2
 801e35c:	da03      	bge.n	801e366 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e35e:	f06f 0301 	mvn.w	r3, #1
 801e362:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e364:	e04c      	b.n	801e400 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801e366:	7c3b      	ldrb	r3, [r7, #16]
 801e368:	2203      	movs	r2, #3
 801e36a:	f362 1307 	bfi	r3, r2, #4, #4
 801e36e:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801e370:	79fb      	ldrb	r3, [r7, #7]
 801e372:	f003 0301 	and.w	r3, r3, #1
 801e376:	b2da      	uxtb	r2, r3
 801e378:	7c3b      	ldrb	r3, [r7, #16]
 801e37a:	f362 03c3 	bfi	r3, r2, #3, #1
 801e37e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801e380:	683b      	ldr	r3, [r7, #0]
 801e382:	f003 0303 	and.w	r3, r3, #3
 801e386:	b2da      	uxtb	r2, r3
 801e388:	7c3b      	ldrb	r3, [r7, #16]
 801e38a:	f362 0342 	bfi	r3, r2, #1, #2
 801e38e:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801e390:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e394:	f003 0301 	and.w	r3, r3, #1
 801e398:	b2da      	uxtb	r2, r3
 801e39a:	7c3b      	ldrb	r3, [r7, #16]
 801e39c:	f362 0300 	bfi	r3, r2, #0, #1
 801e3a0:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801e3a2:	7c3a      	ldrb	r2, [r7, #16]
 801e3a4:	f107 0314 	add.w	r3, r7, #20
 801e3a8:	4611      	mov	r1, r2
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	f7ff fe8b 	bl	801e0c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e3b0:	697b      	ldr	r3, [r7, #20]
 801e3b2:	69b9      	ldr	r1, [r7, #24]
 801e3b4:	4618      	mov	r0, r3
 801e3b6:	f7ff fd8b 	bl	801ded0 <MQTTPacket_encode>
 801e3ba:	4602      	mov	r2, r0
 801e3bc:	697b      	ldr	r3, [r7, #20]
 801e3be:	4413      	add	r3, r2
 801e3c0:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801e3c2:	f107 0014 	add.w	r0, r7, #20
 801e3c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e3ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e3cc:	f7ff fed8 	bl	801e180 <writeMQTTString>

	if (qos > 0)
 801e3d0:	683b      	ldr	r3, [r7, #0]
 801e3d2:	2b00      	cmp	r3, #0
 801e3d4:	dd06      	ble.n	801e3e4 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801e3d6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801e3d8:	f107 0314 	add.w	r3, r7, #20
 801e3dc:	4611      	mov	r1, r2
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f7ff fe86 	bl	801e0f0 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801e3e4:	697b      	ldr	r3, [r7, #20]
 801e3e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e3e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	f00f fd53 	bl	802de96 <memcpy>
	ptr += payloadlen;
 801e3f0:	697a      	ldr	r2, [r7, #20]
 801e3f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e3f4:	4413      	add	r3, r2
 801e3f6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801e3f8:	697a      	ldr	r2, [r7, #20]
 801e3fa:	68fb      	ldr	r3, [r7, #12]
 801e3fc:	1ad3      	subs	r3, r2, r3
 801e3fe:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e400:	69fb      	ldr	r3, [r7, #28]
}
 801e402:	4618      	mov	r0, r3
 801e404:	3720      	adds	r7, #32
 801e406:	46bd      	mov	sp, r7
 801e408:	bd80      	pop	{r7, pc}

0801e40a <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801e40a:	b580      	push	{r7, lr}
 801e40c:	b088      	sub	sp, #32
 801e40e:	af00      	add	r7, sp, #0
 801e410:	60f8      	str	r0, [r7, #12]
 801e412:	60b9      	str	r1, [r7, #8]
 801e414:	4611      	mov	r1, r2
 801e416:	461a      	mov	r2, r3
 801e418:	460b      	mov	r3, r1
 801e41a:	71fb      	strb	r3, [r7, #7]
 801e41c:	4613      	mov	r3, r2
 801e41e:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801e420:	2300      	movs	r3, #0
 801e422:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e424:	2300      	movs	r3, #0
 801e426:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801e42c:	68bb      	ldr	r3, [r7, #8]
 801e42e:	2b03      	cmp	r3, #3
 801e430:	dc03      	bgt.n	801e43a <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e432:	f06f 0301 	mvn.w	r3, #1
 801e436:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e438:	e037      	b.n	801e4aa <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801e43a:	79fb      	ldrb	r3, [r7, #7]
 801e43c:	f003 030f 	and.w	r3, r3, #15
 801e440:	b2da      	uxtb	r2, r3
 801e442:	7e3b      	ldrb	r3, [r7, #24]
 801e444:	f362 1307 	bfi	r3, r2, #4, #4
 801e448:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801e44a:	79bb      	ldrb	r3, [r7, #6]
 801e44c:	f003 0301 	and.w	r3, r3, #1
 801e450:	b2da      	uxtb	r2, r3
 801e452:	7e3b      	ldrb	r3, [r7, #24]
 801e454:	f362 03c3 	bfi	r3, r2, #3, #1
 801e458:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e45a:	79fb      	ldrb	r3, [r7, #7]
 801e45c:	2b06      	cmp	r3, #6
 801e45e:	bf0c      	ite	eq
 801e460:	2301      	moveq	r3, #1
 801e462:	2300      	movne	r3, #0
 801e464:	b2db      	uxtb	r3, r3
 801e466:	f003 0303 	and.w	r3, r3, #3
 801e46a:	b2da      	uxtb	r2, r3
 801e46c:	7e3b      	ldrb	r3, [r7, #24]
 801e46e:	f362 0342 	bfi	r3, r2, #1, #2
 801e472:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801e474:	7e3a      	ldrb	r2, [r7, #24]
 801e476:	f107 0314 	add.w	r3, r7, #20
 801e47a:	4611      	mov	r1, r2
 801e47c:	4618      	mov	r0, r3
 801e47e:	f7ff fe22 	bl	801e0c6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e482:	697b      	ldr	r3, [r7, #20]
 801e484:	2102      	movs	r1, #2
 801e486:	4618      	mov	r0, r3
 801e488:	f7ff fd22 	bl	801ded0 <MQTTPacket_encode>
 801e48c:	4602      	mov	r2, r0
 801e48e:	697b      	ldr	r3, [r7, #20]
 801e490:	4413      	add	r3, r2
 801e492:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801e494:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e496:	f107 0314 	add.w	r3, r7, #20
 801e49a:	4611      	mov	r1, r2
 801e49c:	4618      	mov	r0, r3
 801e49e:	f7ff fe27 	bl	801e0f0 <writeInt>
	rc = ptr - buf;
 801e4a2:	697a      	ldr	r2, [r7, #20]
 801e4a4:	68fb      	ldr	r3, [r7, #12]
 801e4a6:	1ad3      	subs	r3, r2, r3
 801e4a8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e4aa:	69fb      	ldr	r3, [r7, #28]
}
 801e4ac:	4618      	mov	r0, r3
 801e4ae:	3720      	adds	r7, #32
 801e4b0:	46bd      	mov	sp, r7
 801e4b2:	bd80      	pop	{r7, pc}

0801e4b4 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801e4b4:	b590      	push	{r4, r7, lr}
 801e4b6:	b085      	sub	sp, #20
 801e4b8:	af00      	add	r7, sp, #0
 801e4ba:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e4bc:	2300      	movs	r3, #0
 801e4be:	60fb      	str	r3, [r7, #12]
 801e4c0:	2300      	movs	r3, #0
 801e4c2:	60bb      	str	r3, [r7, #8]
 801e4c4:	e02e      	b.n	801e524 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801e4c6:	68bb      	ldr	r3, [r7, #8]
 801e4c8:	687a      	ldr	r2, [r7, #4]
 801e4ca:	441a      	add	r2, r3
 801e4cc:	68fb      	ldr	r3, [r7, #12]
 801e4ce:	6879      	ldr	r1, [r7, #4]
 801e4d0:	440b      	add	r3, r1
 801e4d2:	7812      	ldrb	r2, [r2, #0]
 801e4d4:	701a      	strb	r2, [r3, #0]
 801e4d6:	781b      	ldrb	r3, [r3, #0]
 801e4d8:	2b25      	cmp	r3, #37	; 0x25
 801e4da:	d11d      	bne.n	801e518 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	3301      	adds	r3, #1
 801e4e0:	687a      	ldr	r2, [r7, #4]
 801e4e2:	4413      	add	r3, r2
 801e4e4:	781b      	ldrb	r3, [r3, #0]
 801e4e6:	4618      	mov	r0, r3
 801e4e8:	f000 fbf1 	bl	801ecce <C2D>
 801e4ec:	4603      	mov	r3, r0
 801e4ee:	011b      	lsls	r3, r3, #4
 801e4f0:	b2dc      	uxtb	r4, r3
 801e4f2:	68bb      	ldr	r3, [r7, #8]
 801e4f4:	3302      	adds	r3, #2
 801e4f6:	687a      	ldr	r2, [r7, #4]
 801e4f8:	4413      	add	r3, r2
 801e4fa:	781b      	ldrb	r3, [r3, #0]
 801e4fc:	4618      	mov	r0, r3
 801e4fe:	f000 fbe6 	bl	801ecce <C2D>
 801e502:	4603      	mov	r3, r0
 801e504:	4619      	mov	r1, r3
 801e506:	68fb      	ldr	r3, [r7, #12]
 801e508:	687a      	ldr	r2, [r7, #4]
 801e50a:	4413      	add	r3, r2
 801e50c:	1862      	adds	r2, r4, r1
 801e50e:	b2d2      	uxtb	r2, r2
 801e510:	701a      	strb	r2, [r3, #0]
			y+=2;
 801e512:	68bb      	ldr	r3, [r7, #8]
 801e514:	3302      	adds	r3, #2
 801e516:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	3301      	adds	r3, #1
 801e51c:	60fb      	str	r3, [r7, #12]
 801e51e:	68bb      	ldr	r3, [r7, #8]
 801e520:	3301      	adds	r3, #1
 801e522:	60bb      	str	r3, [r7, #8]
 801e524:	68bb      	ldr	r3, [r7, #8]
 801e526:	687a      	ldr	r2, [r7, #4]
 801e528:	4413      	add	r3, r2
 801e52a:	781b      	ldrb	r3, [r3, #0]
 801e52c:	2b00      	cmp	r3, #0
 801e52e:	d1ca      	bne.n	801e4c6 <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801e530:	68fb      	ldr	r3, [r7, #12]
 801e532:	687a      	ldr	r2, [r7, #4]
 801e534:	4413      	add	r3, r2
 801e536:	2200      	movs	r2, #0
 801e538:	701a      	strb	r2, [r3, #0]
}
 801e53a:	bf00      	nop
 801e53c:	3714      	adds	r7, #20
 801e53e:	46bd      	mov	sp, r7
 801e540:	bd90      	pop	{r4, r7, pc}
	...

0801e544 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801e544:	b580      	push	{r7, lr}
 801e546:	b088      	sub	sp, #32
 801e548:	af00      	add	r7, sp, #0
 801e54a:	60f8      	str	r0, [r7, #12]
 801e54c:	460b      	mov	r3, r1
 801e54e:	607a      	str	r2, [r7, #4]
 801e550:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801e552:	7afb      	ldrb	r3, [r7, #11]
 801e554:	2b01      	cmp	r3, #1
 801e556:	d102      	bne.n	801e55e <make_http_response_head+0x1a>
 801e558:	4b42      	ldr	r3, [pc, #264]	; (801e664 <make_http_response_head+0x120>)
 801e55a:	61fb      	str	r3, [r7, #28]
 801e55c:	e061      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801e55e:	7afb      	ldrb	r3, [r7, #11]
 801e560:	2b02      	cmp	r3, #2
 801e562:	d102      	bne.n	801e56a <make_http_response_head+0x26>
 801e564:	4b40      	ldr	r3, [pc, #256]	; (801e668 <make_http_response_head+0x124>)
 801e566:	61fb      	str	r3, [r7, #28]
 801e568:	e05b      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801e56a:	7afb      	ldrb	r3, [r7, #11]
 801e56c:	2b03      	cmp	r3, #3
 801e56e:	d102      	bne.n	801e576 <make_http_response_head+0x32>
 801e570:	4b3e      	ldr	r3, [pc, #248]	; (801e66c <make_http_response_head+0x128>)
 801e572:	61fb      	str	r3, [r7, #28]
 801e574:	e055      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801e576:	7afb      	ldrb	r3, [r7, #11]
 801e578:	2b04      	cmp	r3, #4
 801e57a:	d102      	bne.n	801e582 <make_http_response_head+0x3e>
 801e57c:	4b3c      	ldr	r3, [pc, #240]	; (801e670 <make_http_response_head+0x12c>)
 801e57e:	61fb      	str	r3, [r7, #28]
 801e580:	e04f      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801e582:	7afb      	ldrb	r3, [r7, #11]
 801e584:	2b05      	cmp	r3, #5
 801e586:	d102      	bne.n	801e58e <make_http_response_head+0x4a>
 801e588:	4b3a      	ldr	r3, [pc, #232]	; (801e674 <make_http_response_head+0x130>)
 801e58a:	61fb      	str	r3, [r7, #28]
 801e58c:	e049      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801e58e:	7afb      	ldrb	r3, [r7, #11]
 801e590:	2b09      	cmp	r3, #9
 801e592:	d102      	bne.n	801e59a <make_http_response_head+0x56>
 801e594:	4b38      	ldr	r3, [pc, #224]	; (801e678 <make_http_response_head+0x134>)
 801e596:	61fb      	str	r3, [r7, #28]
 801e598:	e043      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801e59a:	7afb      	ldrb	r3, [r7, #11]
 801e59c:	2b0a      	cmp	r3, #10
 801e59e:	d102      	bne.n	801e5a6 <make_http_response_head+0x62>
 801e5a0:	4b36      	ldr	r3, [pc, #216]	; (801e67c <make_http_response_head+0x138>)
 801e5a2:	61fb      	str	r3, [r7, #28]
 801e5a4:	e03d      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801e5a6:	7afb      	ldrb	r3, [r7, #11]
 801e5a8:	2b0c      	cmp	r3, #12
 801e5aa:	d102      	bne.n	801e5b2 <make_http_response_head+0x6e>
 801e5ac:	4b34      	ldr	r3, [pc, #208]	; (801e680 <make_http_response_head+0x13c>)
 801e5ae:	61fb      	str	r3, [r7, #28]
 801e5b0:	e037      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801e5b2:	7afb      	ldrb	r3, [r7, #11]
 801e5b4:	2b0b      	cmp	r3, #11
 801e5b6:	d102      	bne.n	801e5be <make_http_response_head+0x7a>
 801e5b8:	4b32      	ldr	r3, [pc, #200]	; (801e684 <make_http_response_head+0x140>)
 801e5ba:	61fb      	str	r3, [r7, #28]
 801e5bc:	e031      	b.n	801e622 <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801e5be:	7afb      	ldrb	r3, [r7, #11]
 801e5c0:	2b08      	cmp	r3, #8
 801e5c2:	d102      	bne.n	801e5ca <make_http_response_head+0x86>
 801e5c4:	4b30      	ldr	r3, [pc, #192]	; (801e688 <make_http_response_head+0x144>)
 801e5c6:	61fb      	str	r3, [r7, #28]
 801e5c8:	e02b      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801e5ca:	7afb      	ldrb	r3, [r7, #11]
 801e5cc:	2b0d      	cmp	r3, #13
 801e5ce:	d102      	bne.n	801e5d6 <make_http_response_head+0x92>
 801e5d0:	4b2e      	ldr	r3, [pc, #184]	; (801e68c <make_http_response_head+0x148>)
 801e5d2:	61fb      	str	r3, [r7, #28]
 801e5d4:	e025      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801e5d6:	7afb      	ldrb	r3, [r7, #11]
 801e5d8:	2b0e      	cmp	r3, #14
 801e5da:	d102      	bne.n	801e5e2 <make_http_response_head+0x9e>
 801e5dc:	4b2c      	ldr	r3, [pc, #176]	; (801e690 <make_http_response_head+0x14c>)
 801e5de:	61fb      	str	r3, [r7, #28]
 801e5e0:	e01f      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801e5e2:	7afb      	ldrb	r3, [r7, #11]
 801e5e4:	2b14      	cmp	r3, #20
 801e5e6:	d102      	bne.n	801e5ee <make_http_response_head+0xaa>
 801e5e8:	4b2a      	ldr	r3, [pc, #168]	; (801e694 <make_http_response_head+0x150>)
 801e5ea:	61fb      	str	r3, [r7, #28]
 801e5ec:	e019      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801e5ee:	7afb      	ldrb	r3, [r7, #11]
 801e5f0:	2b15      	cmp	r3, #21
 801e5f2:	d102      	bne.n	801e5fa <make_http_response_head+0xb6>
 801e5f4:	4b28      	ldr	r3, [pc, #160]	; (801e698 <make_http_response_head+0x154>)
 801e5f6:	61fb      	str	r3, [r7, #28]
 801e5f8:	e013      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801e5fa:	7afb      	ldrb	r3, [r7, #11]
 801e5fc:	2b16      	cmp	r3, #22
 801e5fe:	d102      	bne.n	801e606 <make_http_response_head+0xc2>
 801e600:	4b26      	ldr	r3, [pc, #152]	; (801e69c <make_http_response_head+0x158>)
 801e602:	61fb      	str	r3, [r7, #28]
 801e604:	e00d      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801e606:	7afb      	ldrb	r3, [r7, #11]
 801e608:	2b17      	cmp	r3, #23
 801e60a:	d102      	bne.n	801e612 <make_http_response_head+0xce>
 801e60c:	4b24      	ldr	r3, [pc, #144]	; (801e6a0 <make_http_response_head+0x15c>)
 801e60e:	61fb      	str	r3, [r7, #28]
 801e610:	e007      	b.n	801e622 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801e612:	7afb      	ldrb	r3, [r7, #11]
 801e614:	2b18      	cmp	r3, #24
 801e616:	d102      	bne.n	801e61e <make_http_response_head+0xda>
 801e618:	4b22      	ldr	r3, [pc, #136]	; (801e6a4 <make_http_response_head+0x160>)
 801e61a:	61fb      	str	r3, [r7, #28]
 801e61c:	e001      	b.n	801e622 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801e61e:	2300      	movs	r3, #0
 801e620:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801e622:	f107 0310 	add.w	r3, r7, #16
 801e626:	687a      	ldr	r2, [r7, #4]
 801e628:	491f      	ldr	r1, [pc, #124]	; (801e6a8 <make_http_response_head+0x164>)
 801e62a:	4618      	mov	r0, r3
 801e62c:	f00f f90e 	bl	802d84c <siprintf>
	strcpy(buf, head);
 801e630:	69f9      	ldr	r1, [r7, #28]
 801e632:	68f8      	ldr	r0, [r7, #12]
 801e634:	f00f fc27 	bl	802de86 <strcpy>
	strcat(buf, tmp);
 801e638:	f107 0310 	add.w	r3, r7, #16
 801e63c:	4619      	mov	r1, r3
 801e63e:	68f8      	ldr	r0, [r7, #12]
 801e640:	f00f fa5c 	bl	802dafc <strcat>
	strcat(buf, "\r\n\r\n");
 801e644:	68f8      	ldr	r0, [r7, #12]
 801e646:	f7f1 fe2b 	bl	80102a0 <strlen>
 801e64a:	4603      	mov	r3, r0
 801e64c:	461a      	mov	r2, r3
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	4413      	add	r3, r2
 801e652:	4a16      	ldr	r2, [pc, #88]	; (801e6ac <make_http_response_head+0x168>)
 801e654:	6810      	ldr	r0, [r2, #0]
 801e656:	6018      	str	r0, [r3, #0]
 801e658:	7912      	ldrb	r2, [r2, #4]
 801e65a:	711a      	strb	r2, [r3, #4]
}
 801e65c:	bf00      	nop
 801e65e:	3720      	adds	r7, #32
 801e660:	46bd      	mov	sp, r7
 801e662:	bd80      	pop	{r7, pc}
 801e664:	08033050 	.word	0x08033050
 801e668:	080330a4 	.word	0x080330a4
 801e66c:	080330e0 	.word	0x080330e0
 801e670:	0803311c 	.word	0x0803311c
 801e674:	08033158 	.word	0x08033158
 801e678:	080331a8 	.word	0x080331a8
 801e67c:	080331fc 	.word	0x080331fc
 801e680:	08033238 	.word	0x08033238
 801e684:	0803327c 	.word	0x0803327c
 801e688:	080332c4 	.word	0x080332c4
 801e68c:	08033320 	.word	0x08033320
 801e690:	0803335c 	.word	0x0803335c
 801e694:	0803339c 	.word	0x0803339c
 801e698:	080333ec 	.word	0x080333ec
 801e69c:	0803343c 	.word	0x0803343c
 801e6a0:	08033484 	.word	0x08033484
 801e6a4:	080334d4 	.word	0x080334d4
 801e6a8:	08033514 	.word	0x08033514
 801e6ac:	08033518 	.word	0x08033518

0801e6b0 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801e6b0:	b580      	push	{r7, lr}
 801e6b2:	b084      	sub	sp, #16
 801e6b4:	af00      	add	r7, sp, #0
 801e6b6:	6078      	str	r0, [r7, #4]
 801e6b8:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801e6ba:	683b      	ldr	r3, [r7, #0]
 801e6bc:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801e6be:	499f      	ldr	r1, [pc, #636]	; (801e93c <find_http_uri_type+0x28c>)
 801e6c0:	68f8      	ldr	r0, [r7, #12]
 801e6c2:	f00f faed 	bl	802dca0 <strstr>
 801e6c6:	4603      	mov	r3, r0
 801e6c8:	2b00      	cmp	r3, #0
 801e6ca:	d106      	bne.n	801e6da <find_http_uri_type+0x2a>
 801e6cc:	499c      	ldr	r1, [pc, #624]	; (801e940 <find_http_uri_type+0x290>)
 801e6ce:	68f8      	ldr	r0, [r7, #12]
 801e6d0:	f00f fae6 	bl	802dca0 <strstr>
 801e6d4:	4603      	mov	r3, r0
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d003      	beq.n	801e6e2 <find_http_uri_type+0x32>
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	2201      	movs	r2, #1
 801e6de:	701a      	strb	r2, [r3, #0]
 801e6e0:	e127      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801e6e2:	4998      	ldr	r1, [pc, #608]	; (801e944 <find_http_uri_type+0x294>)
 801e6e4:	68f8      	ldr	r0, [r7, #12]
 801e6e6:	f00f fadb 	bl	802dca0 <strstr>
 801e6ea:	4603      	mov	r3, r0
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d003      	beq.n	801e6f8 <find_http_uri_type+0x48>
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	2202      	movs	r2, #2
 801e6f4:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801e6f6:	e11c      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801e6f8:	4993      	ldr	r1, [pc, #588]	; (801e948 <find_http_uri_type+0x298>)
 801e6fa:	68f8      	ldr	r0, [r7, #12]
 801e6fc:	f00f fad0 	bl	802dca0 <strstr>
 801e700:	4603      	mov	r3, r0
 801e702:	2b00      	cmp	r3, #0
 801e704:	d106      	bne.n	801e714 <find_http_uri_type+0x64>
 801e706:	4991      	ldr	r1, [pc, #580]	; (801e94c <find_http_uri_type+0x29c>)
 801e708:	68f8      	ldr	r0, [r7, #12]
 801e70a:	f00f fac9 	bl	802dca0 <strstr>
 801e70e:	4603      	mov	r3, r0
 801e710:	2b00      	cmp	r3, #0
 801e712:	d003      	beq.n	801e71c <find_http_uri_type+0x6c>
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	2203      	movs	r2, #3
 801e718:	701a      	strb	r2, [r3, #0]
 801e71a:	e10a      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801e71c:	498c      	ldr	r1, [pc, #560]	; (801e950 <find_http_uri_type+0x2a0>)
 801e71e:	68f8      	ldr	r0, [r7, #12]
 801e720:	f00f fabe 	bl	802dca0 <strstr>
 801e724:	4603      	mov	r3, r0
 801e726:	2b00      	cmp	r3, #0
 801e728:	d106      	bne.n	801e738 <find_http_uri_type+0x88>
 801e72a:	498a      	ldr	r1, [pc, #552]	; (801e954 <find_http_uri_type+0x2a4>)
 801e72c:	68f8      	ldr	r0, [r7, #12]
 801e72e:	f00f fab7 	bl	802dca0 <strstr>
 801e732:	4603      	mov	r3, r0
 801e734:	2b00      	cmp	r3, #0
 801e736:	d003      	beq.n	801e740 <find_http_uri_type+0x90>
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	2204      	movs	r2, #4
 801e73c:	701a      	strb	r2, [r3, #0]
 801e73e:	e0f8      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e740:	4985      	ldr	r1, [pc, #532]	; (801e958 <find_http_uri_type+0x2a8>)
 801e742:	68f8      	ldr	r0, [r7, #12]
 801e744:	f00f faac 	bl	802dca0 <strstr>
 801e748:	4603      	mov	r3, r0
 801e74a:	2b00      	cmp	r3, #0
 801e74c:	d003      	beq.n	801e756 <find_http_uri_type+0xa6>
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	2205      	movs	r2, #5
 801e752:	701a      	strb	r2, [r3, #0]
}
 801e754:	e0ed      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e756:	4981      	ldr	r1, [pc, #516]	; (801e95c <find_http_uri_type+0x2ac>)
 801e758:	68f8      	ldr	r0, [r7, #12]
 801e75a:	f00f faa1 	bl	802dca0 <strstr>
 801e75e:	4603      	mov	r3, r0
 801e760:	2b00      	cmp	r3, #0
 801e762:	d106      	bne.n	801e772 <find_http_uri_type+0xc2>
 801e764:	497e      	ldr	r1, [pc, #504]	; (801e960 <find_http_uri_type+0x2b0>)
 801e766:	68f8      	ldr	r0, [r7, #12]
 801e768:	f00f fa9a 	bl	802dca0 <strstr>
 801e76c:	4603      	mov	r3, r0
 801e76e:	2b00      	cmp	r3, #0
 801e770:	d003      	beq.n	801e77a <find_http_uri_type+0xca>
 801e772:	687b      	ldr	r3, [r7, #4]
 801e774:	2208      	movs	r2, #8
 801e776:	701a      	strb	r2, [r3, #0]
 801e778:	e0db      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e77a:	497a      	ldr	r1, [pc, #488]	; (801e964 <find_http_uri_type+0x2b4>)
 801e77c:	68f8      	ldr	r0, [r7, #12]
 801e77e:	f00f fa8f 	bl	802dca0 <strstr>
 801e782:	4603      	mov	r3, r0
 801e784:	2b00      	cmp	r3, #0
 801e786:	d106      	bne.n	801e796 <find_http_uri_type+0xe6>
 801e788:	4977      	ldr	r1, [pc, #476]	; (801e968 <find_http_uri_type+0x2b8>)
 801e78a:	68f8      	ldr	r0, [r7, #12]
 801e78c:	f00f fa88 	bl	802dca0 <strstr>
 801e790:	4603      	mov	r3, r0
 801e792:	2b00      	cmp	r3, #0
 801e794:	d003      	beq.n	801e79e <find_http_uri_type+0xee>
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	220c      	movs	r2, #12
 801e79a:	701a      	strb	r2, [r3, #0]
 801e79c:	e0c9      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e79e:	4973      	ldr	r1, [pc, #460]	; (801e96c <find_http_uri_type+0x2bc>)
 801e7a0:	68f8      	ldr	r0, [r7, #12]
 801e7a2:	f00f fa7d 	bl	802dca0 <strstr>
 801e7a6:	4603      	mov	r3, r0
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	d106      	bne.n	801e7ba <find_http_uri_type+0x10a>
 801e7ac:	4970      	ldr	r1, [pc, #448]	; (801e970 <find_http_uri_type+0x2c0>)
 801e7ae:	68f8      	ldr	r0, [r7, #12]
 801e7b0:	f00f fa76 	bl	802dca0 <strstr>
 801e7b4:	4603      	mov	r3, r0
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d003      	beq.n	801e7c2 <find_http_uri_type+0x112>
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	220b      	movs	r2, #11
 801e7be:	701a      	strb	r2, [r3, #0]
 801e7c0:	e0b7      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e7c2:	4967      	ldr	r1, [pc, #412]	; (801e960 <find_http_uri_type+0x2b0>)
 801e7c4:	68f8      	ldr	r0, [r7, #12]
 801e7c6:	f00f fa6b 	bl	802dca0 <strstr>
 801e7ca:	4603      	mov	r3, r0
 801e7cc:	2b00      	cmp	r3, #0
 801e7ce:	d106      	bne.n	801e7de <find_http_uri_type+0x12e>
 801e7d0:	4962      	ldr	r1, [pc, #392]	; (801e95c <find_http_uri_type+0x2ac>)
 801e7d2:	68f8      	ldr	r0, [r7, #12]
 801e7d4:	f00f fa64 	bl	802dca0 <strstr>
 801e7d8:	4603      	mov	r3, r0
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d003      	beq.n	801e7e6 <find_http_uri_type+0x136>
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	2208      	movs	r2, #8
 801e7e2:	701a      	strb	r2, [r3, #0]
 801e7e4:	e0a5      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e7e6:	4963      	ldr	r1, [pc, #396]	; (801e974 <find_http_uri_type+0x2c4>)
 801e7e8:	68f8      	ldr	r0, [r7, #12]
 801e7ea:	f00f fa59 	bl	802dca0 <strstr>
 801e7ee:	4603      	mov	r3, r0
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	d106      	bne.n	801e802 <find_http_uri_type+0x152>
 801e7f4:	4960      	ldr	r1, [pc, #384]	; (801e978 <find_http_uri_type+0x2c8>)
 801e7f6:	68f8      	ldr	r0, [r7, #12]
 801e7f8:	f00f fa52 	bl	802dca0 <strstr>
 801e7fc:	4603      	mov	r3, r0
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d003      	beq.n	801e80a <find_http_uri_type+0x15a>
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	2209      	movs	r2, #9
 801e806:	701a      	strb	r2, [r3, #0]
 801e808:	e093      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e80a:	495c      	ldr	r1, [pc, #368]	; (801e97c <find_http_uri_type+0x2cc>)
 801e80c:	68f8      	ldr	r0, [r7, #12]
 801e80e:	f00f fa47 	bl	802dca0 <strstr>
 801e812:	4603      	mov	r3, r0
 801e814:	2b00      	cmp	r3, #0
 801e816:	d106      	bne.n	801e826 <find_http_uri_type+0x176>
 801e818:	4959      	ldr	r1, [pc, #356]	; (801e980 <find_http_uri_type+0x2d0>)
 801e81a:	68f8      	ldr	r0, [r7, #12]
 801e81c:	f00f fa40 	bl	802dca0 <strstr>
 801e820:	4603      	mov	r3, r0
 801e822:	2b00      	cmp	r3, #0
 801e824:	d003      	beq.n	801e82e <find_http_uri_type+0x17e>
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	220a      	movs	r2, #10
 801e82a:	701a      	strb	r2, [r3, #0]
 801e82c:	e081      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e82e:	4955      	ldr	r1, [pc, #340]	; (801e984 <find_http_uri_type+0x2d4>)
 801e830:	68f8      	ldr	r0, [r7, #12]
 801e832:	f00f fa35 	bl	802dca0 <strstr>
 801e836:	4603      	mov	r3, r0
 801e838:	2b00      	cmp	r3, #0
 801e83a:	d106      	bne.n	801e84a <find_http_uri_type+0x19a>
 801e83c:	4952      	ldr	r1, [pc, #328]	; (801e988 <find_http_uri_type+0x2d8>)
 801e83e:	68f8      	ldr	r0, [r7, #12]
 801e840:	f00f fa2e 	bl	802dca0 <strstr>
 801e844:	4603      	mov	r3, r0
 801e846:	2b00      	cmp	r3, #0
 801e848:	d003      	beq.n	801e852 <find_http_uri_type+0x1a2>
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	220d      	movs	r2, #13
 801e84e:	701a      	strb	r2, [r3, #0]
 801e850:	e06f      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e852:	494e      	ldr	r1, [pc, #312]	; (801e98c <find_http_uri_type+0x2dc>)
 801e854:	68f8      	ldr	r0, [r7, #12]
 801e856:	f00f fa23 	bl	802dca0 <strstr>
 801e85a:	4603      	mov	r3, r0
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d106      	bne.n	801e86e <find_http_uri_type+0x1be>
 801e860:	494b      	ldr	r1, [pc, #300]	; (801e990 <find_http_uri_type+0x2e0>)
 801e862:	68f8      	ldr	r0, [r7, #12]
 801e864:	f00f fa1c 	bl	802dca0 <strstr>
 801e868:	4603      	mov	r3, r0
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d003      	beq.n	801e876 <find_http_uri_type+0x1c6>
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	220e      	movs	r2, #14
 801e872:	701a      	strb	r2, [r3, #0]
 801e874:	e05d      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e876:	4947      	ldr	r1, [pc, #284]	; (801e994 <find_http_uri_type+0x2e4>)
 801e878:	68f8      	ldr	r0, [r7, #12]
 801e87a:	f00f fa11 	bl	802dca0 <strstr>
 801e87e:	4603      	mov	r3, r0
 801e880:	2b00      	cmp	r3, #0
 801e882:	d106      	bne.n	801e892 <find_http_uri_type+0x1e2>
 801e884:	4944      	ldr	r1, [pc, #272]	; (801e998 <find_http_uri_type+0x2e8>)
 801e886:	68f8      	ldr	r0, [r7, #12]
 801e888:	f00f fa0a 	bl	802dca0 <strstr>
 801e88c:	4603      	mov	r3, r0
 801e88e:	2b00      	cmp	r3, #0
 801e890:	d003      	beq.n	801e89a <find_http_uri_type+0x1ea>
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	2214      	movs	r2, #20
 801e896:	701a      	strb	r2, [r3, #0]
 801e898:	e04b      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e89a:	4940      	ldr	r1, [pc, #256]	; (801e99c <find_http_uri_type+0x2ec>)
 801e89c:	68f8      	ldr	r0, [r7, #12]
 801e89e:	f00f f9ff 	bl	802dca0 <strstr>
 801e8a2:	4603      	mov	r3, r0
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d106      	bne.n	801e8b6 <find_http_uri_type+0x206>
 801e8a8:	493d      	ldr	r1, [pc, #244]	; (801e9a0 <find_http_uri_type+0x2f0>)
 801e8aa:	68f8      	ldr	r0, [r7, #12]
 801e8ac:	f00f f9f8 	bl	802dca0 <strstr>
 801e8b0:	4603      	mov	r3, r0
 801e8b2:	2b00      	cmp	r3, #0
 801e8b4:	d003      	beq.n	801e8be <find_http_uri_type+0x20e>
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	2215      	movs	r2, #21
 801e8ba:	701a      	strb	r2, [r3, #0]
 801e8bc:	e039      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e8be:	4939      	ldr	r1, [pc, #228]	; (801e9a4 <find_http_uri_type+0x2f4>)
 801e8c0:	68f8      	ldr	r0, [r7, #12]
 801e8c2:	f00f f9ed 	bl	802dca0 <strstr>
 801e8c6:	4603      	mov	r3, r0
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d106      	bne.n	801e8da <find_http_uri_type+0x22a>
 801e8cc:	4936      	ldr	r1, [pc, #216]	; (801e9a8 <find_http_uri_type+0x2f8>)
 801e8ce:	68f8      	ldr	r0, [r7, #12]
 801e8d0:	f00f f9e6 	bl	802dca0 <strstr>
 801e8d4:	4603      	mov	r3, r0
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d003      	beq.n	801e8e2 <find_http_uri_type+0x232>
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	2216      	movs	r2, #22
 801e8de:	701a      	strb	r2, [r3, #0]
 801e8e0:	e027      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e8e2:	4932      	ldr	r1, [pc, #200]	; (801e9ac <find_http_uri_type+0x2fc>)
 801e8e4:	68f8      	ldr	r0, [r7, #12]
 801e8e6:	f00f f9db 	bl	802dca0 <strstr>
 801e8ea:	4603      	mov	r3, r0
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d106      	bne.n	801e8fe <find_http_uri_type+0x24e>
 801e8f0:	492f      	ldr	r1, [pc, #188]	; (801e9b0 <find_http_uri_type+0x300>)
 801e8f2:	68f8      	ldr	r0, [r7, #12]
 801e8f4:	f00f f9d4 	bl	802dca0 <strstr>
 801e8f8:	4603      	mov	r3, r0
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d003      	beq.n	801e906 <find_http_uri_type+0x256>
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	2217      	movs	r2, #23
 801e902:	701a      	strb	r2, [r3, #0]
 801e904:	e015      	b.n	801e932 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e906:	492b      	ldr	r1, [pc, #172]	; (801e9b4 <find_http_uri_type+0x304>)
 801e908:	68f8      	ldr	r0, [r7, #12]
 801e90a:	f00f f9c9 	bl	802dca0 <strstr>
 801e90e:	4603      	mov	r3, r0
 801e910:	2b00      	cmp	r3, #0
 801e912:	d106      	bne.n	801e922 <find_http_uri_type+0x272>
 801e914:	4928      	ldr	r1, [pc, #160]	; (801e9b8 <find_http_uri_type+0x308>)
 801e916:	68f8      	ldr	r0, [r7, #12]
 801e918:	f00f f9c2 	bl	802dca0 <strstr>
 801e91c:	4603      	mov	r3, r0
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d003      	beq.n	801e92a <find_http_uri_type+0x27a>
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	2218      	movs	r2, #24
 801e926:	701a      	strb	r2, [r3, #0]
 801e928:	e003      	b.n	801e932 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	2200      	movs	r2, #0
 801e92e:	701a      	strb	r2, [r3, #0]
}
 801e930:	e7ff      	b.n	801e932 <find_http_uri_type+0x282>
 801e932:	bf00      	nop
 801e934:	3710      	adds	r7, #16
 801e936:	46bd      	mov	sp, r7
 801e938:	bd80      	pop	{r7, pc}
 801e93a:	bf00      	nop
 801e93c:	08033520 	.word	0x08033520
 801e940:	08033528 	.word	0x08033528
 801e944:	08033530 	.word	0x08033530
 801e948:	08033538 	.word	0x08033538
 801e94c:	08033540 	.word	0x08033540
 801e950:	08033548 	.word	0x08033548
 801e954:	08033550 	.word	0x08033550
 801e958:	08033558 	.word	0x08033558
 801e95c:	08033560 	.word	0x08033560
 801e960:	08033568 	.word	0x08033568
 801e964:	08033570 	.word	0x08033570
 801e968:	08033578 	.word	0x08033578
 801e96c:	08033580 	.word	0x08033580
 801e970:	08033584 	.word	0x08033584
 801e974:	08033588 	.word	0x08033588
 801e978:	08033590 	.word	0x08033590
 801e97c:	08033598 	.word	0x08033598
 801e980:	080335a0 	.word	0x080335a0
 801e984:	080335a8 	.word	0x080335a8
 801e988:	080335b0 	.word	0x080335b0
 801e98c:	080335b8 	.word	0x080335b8
 801e990:	080335c0 	.word	0x080335c0
 801e994:	080335c8 	.word	0x080335c8
 801e998:	080335d0 	.word	0x080335d0
 801e99c:	080335d8 	.word	0x080335d8
 801e9a0:	080335e0 	.word	0x080335e0
 801e9a4:	080335e8 	.word	0x080335e8
 801e9a8:	080335f0 	.word	0x080335f0
 801e9ac:	080335f8 	.word	0x080335f8
 801e9b0:	08033600 	.word	0x08033600
 801e9b4:	08033608 	.word	0x08033608
 801e9b8:	08033610 	.word	0x08033610

0801e9bc <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801e9bc:	b580      	push	{r7, lr}
 801e9be:	b084      	sub	sp, #16
 801e9c0:	af00      	add	r7, sp, #0
 801e9c2:	6078      	str	r0, [r7, #4]
 801e9c4:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801e9c6:	4935      	ldr	r1, [pc, #212]	; (801ea9c <parse_http_request+0xe0>)
 801e9c8:	6838      	ldr	r0, [r7, #0]
 801e9ca:	f00f f90d 	bl	802dbe8 <strtok>
 801e9ce:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801e9d0:	68fb      	ldr	r3, [r7, #12]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d103      	bne.n	801e9de <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801e9d6:	687b      	ldr	r3, [r7, #4]
 801e9d8:	2200      	movs	r2, #0
 801e9da:	701a      	strb	r2, [r3, #0]
    return;
 801e9dc:	e05a      	b.n	801ea94 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801e9de:	4930      	ldr	r1, [pc, #192]	; (801eaa0 <parse_http_request+0xe4>)
 801e9e0:	68f8      	ldr	r0, [r7, #12]
 801e9e2:	f7f1 fbfd 	bl	80101e0 <strcmp>
 801e9e6:	4603      	mov	r3, r0
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d006      	beq.n	801e9fa <parse_http_request+0x3e>
 801e9ec:	492d      	ldr	r1, [pc, #180]	; (801eaa4 <parse_http_request+0xe8>)
 801e9ee:	68f8      	ldr	r0, [r7, #12]
 801e9f0:	f7f1 fbf6 	bl	80101e0 <strcmp>
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	2b00      	cmp	r3, #0
 801e9f8:	d10a      	bne.n	801ea10 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	2201      	movs	r2, #1
 801e9fe:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801ea00:	68fb      	ldr	r3, [r7, #12]
 801ea02:	3304      	adds	r3, #4
 801ea04:	4925      	ldr	r1, [pc, #148]	; (801ea9c <parse_http_request+0xe0>)
 801ea06:	4618      	mov	r0, r3
 801ea08:	f00f f8ee 	bl	802dbe8 <strtok>
 801ea0c:	60f8      	str	r0, [r7, #12]
 801ea0e:	e034      	b.n	801ea7a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801ea10:	4925      	ldr	r1, [pc, #148]	; (801eaa8 <parse_http_request+0xec>)
 801ea12:	68f8      	ldr	r0, [r7, #12]
 801ea14:	f7f1 fbe4 	bl	80101e0 <strcmp>
 801ea18:	4603      	mov	r3, r0
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d006      	beq.n	801ea2c <parse_http_request+0x70>
 801ea1e:	4923      	ldr	r1, [pc, #140]	; (801eaac <parse_http_request+0xf0>)
 801ea20:	68f8      	ldr	r0, [r7, #12]
 801ea22:	f7f1 fbdd 	bl	80101e0 <strcmp>
 801ea26:	4603      	mov	r3, r0
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d10a      	bne.n	801ea42 <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	2202      	movs	r2, #2
 801ea30:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	3305      	adds	r3, #5
 801ea36:	4919      	ldr	r1, [pc, #100]	; (801ea9c <parse_http_request+0xe0>)
 801ea38:	4618      	mov	r0, r3
 801ea3a:	f00f f8d5 	bl	802dbe8 <strtok>
 801ea3e:	60f8      	str	r0, [r7, #12]
 801ea40:	e01b      	b.n	801ea7a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801ea42:	491b      	ldr	r1, [pc, #108]	; (801eab0 <parse_http_request+0xf4>)
 801ea44:	68f8      	ldr	r0, [r7, #12]
 801ea46:	f7f1 fbcb 	bl	80101e0 <strcmp>
 801ea4a:	4603      	mov	r3, r0
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d006      	beq.n	801ea5e <parse_http_request+0xa2>
 801ea50:	4918      	ldr	r1, [pc, #96]	; (801eab4 <parse_http_request+0xf8>)
 801ea52:	68f8      	ldr	r0, [r7, #12]
 801ea54:	f7f1 fbc4 	bl	80101e0 <strcmp>
 801ea58:	4603      	mov	r3, r0
 801ea5a:	2b00      	cmp	r3, #0
 801ea5c:	d10a      	bne.n	801ea74 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801ea5e:	68fb      	ldr	r3, [r7, #12]
 801ea60:	3305      	adds	r3, #5
 801ea62:	4915      	ldr	r1, [pc, #84]	; (801eab8 <parse_http_request+0xfc>)
 801ea64:	4618      	mov	r0, r3
 801ea66:	f00f f8bf 	bl	802dbe8 <strtok>
 801ea6a:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	2203      	movs	r2, #3
 801ea70:	701a      	strb	r2, [r3, #0]
 801ea72:	e002      	b.n	801ea7a <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2200      	movs	r2, #0
 801ea78:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801ea7a:	68fb      	ldr	r3, [r7, #12]
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	d103      	bne.n	801ea88 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	2200      	movs	r2, #0
 801ea84:	701a      	strb	r2, [r3, #0]
    return;
 801ea86:	e005      	b.n	801ea94 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	3302      	adds	r3, #2
 801ea8c:	68f9      	ldr	r1, [r7, #12]
 801ea8e:	4618      	mov	r0, r3
 801ea90:	f00f f9f9 	bl	802de86 <strcpy>
}
 801ea94:	3710      	adds	r7, #16
 801ea96:	46bd      	mov	sp, r7
 801ea98:	bd80      	pop	{r7, pc}
 801ea9a:	bf00      	nop
 801ea9c:	08033618 	.word	0x08033618
 801eaa0:	0803361c 	.word	0x0803361c
 801eaa4:	08033620 	.word	0x08033620
 801eaa8:	08033624 	.word	0x08033624
 801eaac:	0803362c 	.word	0x0803362c
 801eab0:	08033634 	.word	0x08033634
 801eab4:	0803363c 	.word	0x0803363c
 801eab8:	08033644 	.word	0x08033644

0801eabc <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801eabc:	b580      	push	{r7, lr}
 801eabe:	b08a      	sub	sp, #40	; 0x28
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	6078      	str	r0, [r7, #4]
 801eac4:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801eac6:	2300      	movs	r3, #0
 801eac8:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801eaca:	4b3c      	ldr	r3, [pc, #240]	; (801ebbc <get_http_param_value+0x100>)
 801eacc:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801eace:	2300      	movs	r3, #0
 801ead0:	837b      	strh	r3, [r7, #26]
 801ead2:	2300      	movs	r3, #0
 801ead4:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801ead6:	2300      	movs	r3, #0
 801ead8:	60bb      	str	r3, [r7, #8]
 801eada:	f107 030c 	add.w	r3, r7, #12
 801eade:	2200      	movs	r2, #0
 801eae0:	601a      	str	r2, [r3, #0]
 801eae2:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d002      	beq.n	801eaf0 <get_http_param_value+0x34>
 801eaea:	683b      	ldr	r3, [r7, #0]
 801eaec:	2b00      	cmp	r3, #0
 801eaee:	d101      	bne.n	801eaf4 <get_http_param_value+0x38>
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	e05f      	b.n	801ebb4 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801eaf4:	f107 0308 	add.w	r3, r7, #8
 801eaf8:	4a31      	ldr	r2, [pc, #196]	; (801ebc0 <get_http_param_value+0x104>)
 801eafa:	4932      	ldr	r1, [pc, #200]	; (801ebc4 <get_http_param_value+0x108>)
 801eafc:	6878      	ldr	r0, [r7, #4]
 801eafe:	f000 f8b4 	bl	801ec6a <mid>
 801eb02:	4603      	mov	r3, r0
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d001      	beq.n	801eb0c <get_http_param_value+0x50>
		return 0;
 801eb08:	2300      	movs	r3, #0
 801eb0a:	e053      	b.n	801ebb4 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801eb0c:	f107 0308 	add.w	r3, r7, #8
 801eb10:	210a      	movs	r1, #10
 801eb12:	4618      	mov	r0, r3
 801eb14:	f000 f884 	bl	801ec20 <ATOI>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801eb1c:	492a      	ldr	r1, [pc, #168]	; (801ebc8 <get_http_param_value+0x10c>)
 801eb1e:	6878      	ldr	r0, [r7, #4]
 801eb20:	f00f f8be 	bl	802dca0 <strstr>
 801eb24:	6078      	str	r0, [r7, #4]
	uri += 4;
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	3304      	adds	r3, #4
 801eb2a:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801eb2c:	8b3b      	ldrh	r3, [r7, #24]
 801eb2e:	687a      	ldr	r2, [r7, #4]
 801eb30:	4413      	add	r3, r2
 801eb32:	2200      	movs	r2, #0
 801eb34:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801eb36:	6839      	ldr	r1, [r7, #0]
 801eb38:	6878      	ldr	r0, [r7, #4]
 801eb3a:	f00f f8b1 	bl	802dca0 <strstr>
 801eb3e:	6238      	str	r0, [r7, #32]
 801eb40:	6a3b      	ldr	r3, [r7, #32]
 801eb42:	2b00      	cmp	r3, #0
 801eb44:	d033      	beq.n	801ebae <get_http_param_value+0xf2>
	{
		test = name + 1;
 801eb46:	6a3b      	ldr	r3, [r7, #32]
 801eb48:	3301      	adds	r3, #1
 801eb4a:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801eb4c:	6838      	ldr	r0, [r7, #0]
 801eb4e:	f7f1 fba7 	bl	80102a0 <strlen>
 801eb52:	4603      	mov	r3, r0
 801eb54:	3301      	adds	r3, #1
 801eb56:	6a3a      	ldr	r2, [r7, #32]
 801eb58:	4413      	add	r3, r2
 801eb5a:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801eb5c:	2126      	movs	r1, #38	; 0x26
 801eb5e:	6a38      	ldr	r0, [r7, #32]
 801eb60:	f00e ffdb 	bl	802db1a <strchr>
 801eb64:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 801eb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb68:	2b00      	cmp	r3, #0
 801eb6a:	d106      	bne.n	801eb7a <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801eb6c:	6a38      	ldr	r0, [r7, #32]
 801eb6e:	f7f1 fb97 	bl	80102a0 <strlen>
 801eb72:	4602      	mov	r2, r0
 801eb74:	6a3b      	ldr	r3, [r7, #32]
 801eb76:	4413      	add	r3, r2
 801eb78:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801eb7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb7c:	6a3b      	ldr	r3, [r7, #32]
 801eb7e:	1ad3      	subs	r3, r2, r3
 801eb80:	837b      	strh	r3, [r7, #26]

		if(len)
 801eb82:	8b7b      	ldrh	r3, [r7, #26]
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	d00e      	beq.n	801eba6 <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801eb88:	8b7b      	ldrh	r3, [r7, #26]
 801eb8a:	69fa      	ldr	r2, [r7, #28]
 801eb8c:	4413      	add	r3, r2
 801eb8e:	2200      	movs	r2, #0
 801eb90:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801eb92:	8b7b      	ldrh	r3, [r7, #26]
 801eb94:	461a      	mov	r2, r3
 801eb96:	6a39      	ldr	r1, [r7, #32]
 801eb98:	69f8      	ldr	r0, [r7, #28]
 801eb9a:	f00f f801 	bl	802dba0 <strncpy>
			unescape_http_url((char *)ret);
 801eb9e:	69f8      	ldr	r0, [r7, #28]
 801eba0:	f7ff fc88 	bl	801e4b4 <unescape_http_url>
 801eba4:	e005      	b.n	801ebb2 <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801eba6:	69fb      	ldr	r3, [r7, #28]
 801eba8:	2200      	movs	r2, #0
 801ebaa:	701a      	strb	r2, [r3, #0]
 801ebac:	e001      	b.n	801ebb2 <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801ebae:	2300      	movs	r3, #0
 801ebb0:	e000      	b.n	801ebb4 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801ebb2:	69fb      	ldr	r3, [r7, #28]
}
 801ebb4:	4618      	mov	r0, r3
 801ebb6:	3728      	adds	r7, #40	; 0x28
 801ebb8:	46bd      	mov	sp, r7
 801ebba:	bd80      	pop	{r7, pc}
 801ebbc:	200009f8 	.word	0x200009f8
 801ebc0:	08033648 	.word	0x08033648
 801ebc4:	0803364c 	.word	0x0803364c
 801ebc8:	08033518 	.word	0x08033518

0801ebcc <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801ebcc:	b580      	push	{r7, lr}
 801ebce:	b084      	sub	sp, #16
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	6078      	str	r0, [r7, #4]
 801ebd4:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d101      	bne.n	801ebe0 <get_http_uri_name+0x14>
 801ebdc:	2300      	movs	r3, #0
 801ebde:	e017      	b.n	801ec10 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801ebe0:	6879      	ldr	r1, [r7, #4]
 801ebe2:	6838      	ldr	r0, [r7, #0]
 801ebe4:	f00f f94f 	bl	802de86 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801ebe8:	490b      	ldr	r1, [pc, #44]	; (801ec18 <get_http_uri_name+0x4c>)
 801ebea:	6838      	ldr	r0, [r7, #0]
 801ebec:	f00e fffc 	bl	802dbe8 <strtok>
 801ebf0:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801ebf2:	490a      	ldr	r1, [pc, #40]	; (801ec1c <get_http_uri_name+0x50>)
 801ebf4:	68f8      	ldr	r0, [r7, #12]
 801ebf6:	f7f1 faf3 	bl	80101e0 <strcmp>
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	2b00      	cmp	r3, #0
 801ebfe:	d002      	beq.n	801ec06 <get_http_uri_name+0x3a>
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	3301      	adds	r3, #1
 801ec04:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801ec06:	68f9      	ldr	r1, [r7, #12]
 801ec08:	6838      	ldr	r0, [r7, #0]
 801ec0a:	f00f f93c 	bl	802de86 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801ec0e:	2301      	movs	r3, #1
}
 801ec10:	4618      	mov	r0, r3
 801ec12:	3710      	adds	r7, #16
 801ec14:	46bd      	mov	sp, r7
 801ec16:	bd80      	pop	{r7, pc}
 801ec18:	08033660 	.word	0x08033660
 801ec1c:	08033664 	.word	0x08033664

0801ec20 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801ec20:	b590      	push	{r4, r7, lr}
 801ec22:	b085      	sub	sp, #20
 801ec24:	af00      	add	r7, sp, #0
 801ec26:	6078      	str	r0, [r7, #4]
 801ec28:	460b      	mov	r3, r1
 801ec2a:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801ec2c:	2300      	movs	r3, #0
 801ec2e:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801ec30:	e00d      	b.n	801ec4e <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801ec32:	78fb      	ldrb	r3, [r7, #3]
 801ec34:	68fa      	ldr	r2, [r7, #12]
 801ec36:	fb02 f403 	mul.w	r4, r2, r3
 801ec3a:	687b      	ldr	r3, [r7, #4]
 801ec3c:	1c5a      	adds	r2, r3, #1
 801ec3e:	607a      	str	r2, [r7, #4]
 801ec40:	781b      	ldrb	r3, [r3, #0]
 801ec42:	4618      	mov	r0, r3
 801ec44:	f000 f843 	bl	801ecce <C2D>
 801ec48:	4603      	mov	r3, r0
 801ec4a:	4423      	add	r3, r4
 801ec4c:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	781b      	ldrb	r3, [r3, #0]
 801ec52:	2b00      	cmp	r3, #0
 801ec54:	d003      	beq.n	801ec5e <ATOI+0x3e>
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	781b      	ldrb	r3, [r3, #0]
 801ec5a:	2b20      	cmp	r3, #32
 801ec5c:	d1e9      	bne.n	801ec32 <ATOI+0x12>
	return num;
 801ec5e:	68fb      	ldr	r3, [r7, #12]
 801ec60:	b29b      	uxth	r3, r3
}
 801ec62:	4618      	mov	r0, r3
 801ec64:	3714      	adds	r7, #20
 801ec66:	46bd      	mov	sp, r7
 801ec68:	bd90      	pop	{r4, r7, pc}

0801ec6a <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801ec6a:	b580      	push	{r7, lr}
 801ec6c:	b088      	sub	sp, #32
 801ec6e:	af00      	add	r7, sp, #0
 801ec70:	60f8      	str	r0, [r7, #12]
 801ec72:	60b9      	str	r1, [r7, #8]
 801ec74:	607a      	str	r2, [r7, #4]
 801ec76:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801ec78:	68b9      	ldr	r1, [r7, #8]
 801ec7a:	68f8      	ldr	r0, [r7, #12]
 801ec7c:	f00f f810 	bl	802dca0 <strstr>
 801ec80:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801ec82:	69fb      	ldr	r3, [r7, #28]
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	d102      	bne.n	801ec8e <mid+0x24>
 801ec88:	f04f 33ff 	mov.w	r3, #4294967295
 801ec8c:	e01b      	b.n	801ecc6 <mid+0x5c>
	sub1+=strlen((char*)s1);
 801ec8e:	68b8      	ldr	r0, [r7, #8]
 801ec90:	f7f1 fb06 	bl	80102a0 <strlen>
 801ec94:	4602      	mov	r2, r0
 801ec96:	69fb      	ldr	r3, [r7, #28]
 801ec98:	4413      	add	r3, r2
 801ec9a:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801ec9c:	6879      	ldr	r1, [r7, #4]
 801ec9e:	69f8      	ldr	r0, [r7, #28]
 801eca0:	f00e fffe 	bl	802dca0 <strstr>
 801eca4:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801eca6:	69ba      	ldr	r2, [r7, #24]
 801eca8:	69fb      	ldr	r3, [r7, #28]
 801ecaa:	1ad3      	subs	r3, r2, r3
 801ecac:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801ecae:	8afb      	ldrh	r3, [r7, #22]
 801ecb0:	461a      	mov	r2, r3
 801ecb2:	69f9      	ldr	r1, [r7, #28]
 801ecb4:	6838      	ldr	r0, [r7, #0]
 801ecb6:	f00e ff73 	bl	802dba0 <strncpy>
	sub[n]='\0';
 801ecba:	8afb      	ldrh	r3, [r7, #22]
 801ecbc:	683a      	ldr	r2, [r7, #0]
 801ecbe:	4413      	add	r3, r2
 801ecc0:	2200      	movs	r2, #0
 801ecc2:	701a      	strb	r2, [r3, #0]
	return 0;
 801ecc4:	2300      	movs	r3, #0
}
 801ecc6:	4618      	mov	r0, r3
 801ecc8:	3720      	adds	r7, #32
 801ecca:	46bd      	mov	sp, r7
 801eccc:	bd80      	pop	{r7, pc}

0801ecce <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801ecce:	b480      	push	{r7}
 801ecd0:	b083      	sub	sp, #12
 801ecd2:	af00      	add	r7, sp, #0
 801ecd4:	4603      	mov	r3, r0
 801ecd6:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801ecd8:	79fb      	ldrb	r3, [r7, #7]
 801ecda:	2b2f      	cmp	r3, #47	; 0x2f
 801ecdc:	d906      	bls.n	801ecec <C2D+0x1e>
 801ecde:	79fb      	ldrb	r3, [r7, #7]
 801ece0:	2b39      	cmp	r3, #57	; 0x39
 801ece2:	d803      	bhi.n	801ecec <C2D+0x1e>
		return c - '0';
 801ece4:	79fb      	ldrb	r3, [r7, #7]
 801ece6:	3b30      	subs	r3, #48	; 0x30
 801ece8:	b2db      	uxtb	r3, r3
 801ecea:	e014      	b.n	801ed16 <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801ecec:	79fb      	ldrb	r3, [r7, #7]
 801ecee:	2b60      	cmp	r3, #96	; 0x60
 801ecf0:	d906      	bls.n	801ed00 <C2D+0x32>
 801ecf2:	79fb      	ldrb	r3, [r7, #7]
 801ecf4:	2b66      	cmp	r3, #102	; 0x66
 801ecf6:	d803      	bhi.n	801ed00 <C2D+0x32>
		return 10 + c -'a';
 801ecf8:	79fb      	ldrb	r3, [r7, #7]
 801ecfa:	3b57      	subs	r3, #87	; 0x57
 801ecfc:	b2db      	uxtb	r3, r3
 801ecfe:	e00a      	b.n	801ed16 <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801ed00:	79fb      	ldrb	r3, [r7, #7]
 801ed02:	2b40      	cmp	r3, #64	; 0x40
 801ed04:	d906      	bls.n	801ed14 <C2D+0x46>
 801ed06:	79fb      	ldrb	r3, [r7, #7]
 801ed08:	2b46      	cmp	r3, #70	; 0x46
 801ed0a:	d803      	bhi.n	801ed14 <C2D+0x46>
		return 10 + c -'A';
 801ed0c:	79fb      	ldrb	r3, [r7, #7]
 801ed0e:	3b37      	subs	r3, #55	; 0x37
 801ed10:	b2db      	uxtb	r3, r3
 801ed12:	e000      	b.n	801ed16 <C2D+0x48>

	return (char)c;
 801ed14:	79fb      	ldrb	r3, [r7, #7]
}
 801ed16:	4618      	mov	r0, r3
 801ed18:	370c      	adds	r7, #12
 801ed1a:	46bd      	mov	sp, r7
 801ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed20:	4770      	bx	lr

0801ed22 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801ed22:	b480      	push	{r7}
 801ed24:	af00      	add	r7, sp, #0
 801ed26:	bf00      	nop
 801ed28:	46bd      	mov	sp, r7
 801ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed2e:	4770      	bx	lr

0801ed30 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801ed30:	b480      	push	{r7}
 801ed32:	af00      	add	r7, sp, #0
 801ed34:	bf00      	nop
 801ed36:	46bd      	mov	sp, r7
 801ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed3c:	4770      	bx	lr
	...

0801ed40 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801ed40:	b480      	push	{r7}
 801ed42:	b085      	sub	sp, #20
 801ed44:	af00      	add	r7, sp, #0
 801ed46:	4603      	mov	r3, r0
 801ed48:	6039      	str	r1, [r7, #0]
 801ed4a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801ed4c:	2300      	movs	r3, #0
 801ed4e:	73fb      	strb	r3, [r7, #15]
 801ed50:	e009      	b.n	801ed66 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801ed52:	7bfb      	ldrb	r3, [r7, #15]
 801ed54:	683a      	ldr	r2, [r7, #0]
 801ed56:	441a      	add	r2, r3
 801ed58:	7bfb      	ldrb	r3, [r7, #15]
 801ed5a:	7811      	ldrb	r1, [r2, #0]
 801ed5c:	4a07      	ldr	r2, [pc, #28]	; (801ed7c <httpServer_Sockinit+0x3c>)
 801ed5e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801ed60:	7bfb      	ldrb	r3, [r7, #15]
 801ed62:	3301      	adds	r3, #1
 801ed64:	73fb      	strb	r3, [r7, #15]
 801ed66:	7bfa      	ldrb	r2, [r7, #15]
 801ed68:	79fb      	ldrb	r3, [r7, #7]
 801ed6a:	429a      	cmp	r2, r3
 801ed6c:	d3f1      	bcc.n	801ed52 <httpServer_Sockinit+0x12>
	}
}
 801ed6e:	bf00      	nop
 801ed70:	bf00      	nop
 801ed72:	3714      	adds	r7, #20
 801ed74:	46bd      	mov	sp, r7
 801ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed7a:	4770      	bx	lr
 801ed7c:	200011f8 	.word	0x200011f8

0801ed80 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801ed80:	b480      	push	{r7}
 801ed82:	b083      	sub	sp, #12
 801ed84:	af00      	add	r7, sp, #0
 801ed86:	4603      	mov	r3, r0
 801ed88:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801ed8a:	79fb      	ldrb	r3, [r7, #7]
 801ed8c:	4a03      	ldr	r2, [pc, #12]	; (801ed9c <getHTTPSocketNum+0x1c>)
 801ed8e:	5cd3      	ldrb	r3, [r2, r3]
}
 801ed90:	4618      	mov	r0, r3
 801ed92:	370c      	adds	r7, #12
 801ed94:	46bd      	mov	sp, r7
 801ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed9a:	4770      	bx	lr
 801ed9c:	200011f8 	.word	0x200011f8

0801eda0 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801eda0:	b480      	push	{r7}
 801eda2:	b085      	sub	sp, #20
 801eda4:	af00      	add	r7, sp, #0
 801eda6:	4603      	mov	r3, r0
 801eda8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801edaa:	2300      	movs	r3, #0
 801edac:	73fb      	strb	r3, [r7, #15]
 801edae:	e00b      	b.n	801edc8 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801edb0:	7bfb      	ldrb	r3, [r7, #15]
 801edb2:	4a0b      	ldr	r2, [pc, #44]	; (801ede0 <getHTTPSequenceNum+0x40>)
 801edb4:	5cd3      	ldrb	r3, [r2, r3]
 801edb6:	79fa      	ldrb	r2, [r7, #7]
 801edb8:	429a      	cmp	r2, r3
 801edba:	d102      	bne.n	801edc2 <getHTTPSequenceNum+0x22>
 801edbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801edc0:	e007      	b.n	801edd2 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801edc2:	7bfb      	ldrb	r3, [r7, #15]
 801edc4:	3301      	adds	r3, #1
 801edc6:	73fb      	strb	r3, [r7, #15]
 801edc8:	7bfb      	ldrb	r3, [r7, #15]
 801edca:	2b07      	cmp	r3, #7
 801edcc:	d9f0      	bls.n	801edb0 <getHTTPSequenceNum+0x10>

	return -1;
 801edce:	f04f 33ff 	mov.w	r3, #4294967295
}
 801edd2:	4618      	mov	r0, r3
 801edd4:	3714      	adds	r7, #20
 801edd6:	46bd      	mov	sp, r7
 801edd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eddc:	4770      	bx	lr
 801edde:	bf00      	nop
 801ede0:	200011f8 	.word	0x200011f8

0801ede4 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801ede4:	b580      	push	{r7, lr}
 801ede6:	b084      	sub	sp, #16
 801ede8:	af00      	add	r7, sp, #0
 801edea:	60f8      	str	r0, [r7, #12]
 801edec:	60b9      	str	r1, [r7, #8]
 801edee:	603b      	str	r3, [r7, #0]
 801edf0:	4613      	mov	r3, r2
 801edf2:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801edf4:	4a07      	ldr	r2, [pc, #28]	; (801ee14 <httpServer_init+0x30>)
 801edf6:	68fb      	ldr	r3, [r7, #12]
 801edf8:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801edfa:	4a07      	ldr	r2, [pc, #28]	; (801ee18 <httpServer_init+0x34>)
 801edfc:	68bb      	ldr	r3, [r7, #8]
 801edfe:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801ee00:	79fb      	ldrb	r3, [r7, #7]
 801ee02:	6839      	ldr	r1, [r7, #0]
 801ee04:	4618      	mov	r0, r3
 801ee06:	f7ff ff9b 	bl	801ed40 <httpServer_Sockinit>
}
 801ee0a:	bf00      	nop
 801ee0c:	3710      	adds	r7, #16
 801ee0e:	46bd      	mov	sp, r7
 801ee10:	bd80      	pop	{r7, pc}
 801ee12:	bf00      	nop
 801ee14:	200012d8 	.word	0x200012d8
 801ee18:	200012dc 	.word	0x200012dc

0801ee1c <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801ee1c:	b590      	push	{r4, r7, lr}
 801ee1e:	b089      	sub	sp, #36	; 0x24
 801ee20:	af02      	add	r7, sp, #8
 801ee22:	4603      	mov	r3, r0
 801ee24:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801ee26:	2300      	movs	r3, #0
 801ee28:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801ee2a:	4bb4      	ldr	r3, [pc, #720]	; (801f0fc <httpServer_run+0x2e0>)
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	4ab4      	ldr	r2, [pc, #720]	; (801f100 <httpServer_run+0x2e4>)
 801ee30:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801ee32:	4bb4      	ldr	r3, [pc, #720]	; (801f104 <httpServer_run+0x2e8>)
 801ee34:	681b      	ldr	r3, [r3, #0]
 801ee36:	4ab4      	ldr	r2, [pc, #720]	; (801f108 <httpServer_run+0x2ec>)
 801ee38:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801ee3a:	79fb      	ldrb	r3, [r7, #7]
 801ee3c:	4618      	mov	r0, r3
 801ee3e:	f7ff ff9f 	bl	801ed80 <getHTTPSocketNum>
 801ee42:	4603      	mov	r3, r0
 801ee44:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801ee46:	7bfb      	ldrb	r3, [r7, #15]
 801ee48:	009b      	lsls	r3, r3, #2
 801ee4a:	3301      	adds	r3, #1
 801ee4c:	00db      	lsls	r3, r3, #3
 801ee4e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ee52:	4618      	mov	r0, r3
 801ee54:	f7f9 fd44 	bl	80188e0 <WIZCHIP_READ>
 801ee58:	4603      	mov	r3, r0
 801ee5a:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801ee5c:	7bfb      	ldrb	r3, [r7, #15]
 801ee5e:	009b      	lsls	r3, r3, #2
 801ee60:	3301      	adds	r3, #1
 801ee62:	00db      	lsls	r3, r3, #3
 801ee64:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ee68:	4618      	mov	r0, r3
 801ee6a:	f7f9 fd39 	bl	80188e0 <WIZCHIP_READ>
 801ee6e:	4603      	mov	r3, r0
 801ee70:	2b1c      	cmp	r3, #28
 801ee72:	f200 813e 	bhi.w	801f0f2 <httpServer_run+0x2d6>
 801ee76:	a201      	add	r2, pc, #4	; (adr r2, 801ee7c <httpServer_run+0x60>)
 801ee78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ee7c:	0801f0db 	.word	0x0801f0db
 801ee80:	0801f0f3 	.word	0x0801f0f3
 801ee84:	0801f0f3 	.word	0x0801f0f3
 801ee88:	0801f0f3 	.word	0x0801f0f3
 801ee8c:	0801f0f3 	.word	0x0801f0f3
 801ee90:	0801f0f3 	.word	0x0801f0f3
 801ee94:	0801f0f3 	.word	0x0801f0f3
 801ee98:	0801f0f3 	.word	0x0801f0f3
 801ee9c:	0801f0f3 	.word	0x0801f0f3
 801eea0:	0801f0f3 	.word	0x0801f0f3
 801eea4:	0801f0f3 	.word	0x0801f0f3
 801eea8:	0801f0f3 	.word	0x0801f0f3
 801eeac:	0801f0f3 	.word	0x0801f0f3
 801eeb0:	0801f0f3 	.word	0x0801f0f3
 801eeb4:	0801f0f3 	.word	0x0801f0f3
 801eeb8:	0801f0f3 	.word	0x0801f0f3
 801eebc:	0801f0f3 	.word	0x0801f0f3
 801eec0:	0801f0f3 	.word	0x0801f0f3
 801eec4:	0801f0f3 	.word	0x0801f0f3
 801eec8:	0801f0e9 	.word	0x0801f0e9
 801eecc:	0801f0f3 	.word	0x0801f0f3
 801eed0:	0801f0f3 	.word	0x0801f0f3
 801eed4:	0801f0f3 	.word	0x0801f0f3
 801eed8:	0801eef1 	.word	0x0801eef1
 801eedc:	0801f0f3 	.word	0x0801f0f3
 801eee0:	0801f0f3 	.word	0x0801f0f3
 801eee4:	0801f0f3 	.word	0x0801f0f3
 801eee8:	0801f0f3 	.word	0x0801f0f3
 801eeec:	0801f0d1 	.word	0x0801f0d1
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801eef0:	7bfb      	ldrb	r3, [r7, #15]
 801eef2:	009b      	lsls	r3, r3, #2
 801eef4:	3301      	adds	r3, #1
 801eef6:	00db      	lsls	r3, r3, #3
 801eef8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801eefc:	4618      	mov	r0, r3
 801eefe:	f7f9 fcef 	bl	80188e0 <WIZCHIP_READ>
 801ef02:	4603      	mov	r3, r0
 801ef04:	f003 0301 	and.w	r3, r3, #1
 801ef08:	2b00      	cmp	r3, #0
 801ef0a:	d009      	beq.n	801ef20 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801ef0c:	7bfb      	ldrb	r3, [r7, #15]
 801ef0e:	009b      	lsls	r3, r3, #2
 801ef10:	3301      	adds	r3, #1
 801ef12:	00db      	lsls	r3, r3, #3
 801ef14:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801ef18:	2101      	movs	r1, #1
 801ef1a:	4618      	mov	r0, r3
 801ef1c:	f7f9 fd2c 	bl	8018978 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801ef20:	79fa      	ldrb	r2, [r7, #7]
 801ef22:	497a      	ldr	r1, [pc, #488]	; (801f10c <httpServer_run+0x2f0>)
 801ef24:	4613      	mov	r3, r2
 801ef26:	011b      	lsls	r3, r3, #4
 801ef28:	4413      	add	r3, r2
 801ef2a:	009b      	lsls	r3, r3, #2
 801ef2c:	440b      	add	r3, r1
 801ef2e:	781b      	ldrb	r3, [r3, #0]
 801ef30:	2b04      	cmp	r3, #4
 801ef32:	f000 809b 	beq.w	801f06c <httpServer_run+0x250>
 801ef36:	2b04      	cmp	r3, #4
 801ef38:	f300 80c4 	bgt.w	801f0c4 <httpServer_run+0x2a8>
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d002      	beq.n	801ef46 <httpServer_run+0x12a>
 801ef40:	2b03      	cmp	r3, #3
 801ef42:	d06e      	beq.n	801f022 <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801ef44:	e0be      	b.n	801f0c4 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801ef46:	7bfb      	ldrb	r3, [r7, #15]
 801ef48:	4618      	mov	r0, r3
 801ef4a:	f7f9 fe6e 	bl	8018c2a <getSn_RX_RSR>
 801ef4e:	4603      	mov	r3, r0
 801ef50:	82fb      	strh	r3, [r7, #22]
 801ef52:	8afb      	ldrh	r3, [r7, #22]
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	f000 80b7 	beq.w	801f0c8 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801ef5a:	8afb      	ldrh	r3, [r7, #22]
 801ef5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ef60:	d902      	bls.n	801ef68 <httpServer_run+0x14c>
 801ef62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ef66:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801ef68:	4b65      	ldr	r3, [pc, #404]	; (801f100 <httpServer_run+0x2e4>)
 801ef6a:	6819      	ldr	r1, [r3, #0]
 801ef6c:	8afa      	ldrh	r2, [r7, #22]
 801ef6e:	7bfb      	ldrb	r3, [r7, #15]
 801ef70:	4618      	mov	r0, r3
 801ef72:	f7fa fbcd 	bl	8019710 <recv>
 801ef76:	4603      	mov	r3, r0
 801ef78:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801ef7a:	4b61      	ldr	r3, [pc, #388]	; (801f100 <httpServer_run+0x2e4>)
 801ef7c:	681a      	ldr	r2, [r3, #0]
 801ef7e:	8afb      	ldrh	r3, [r7, #22]
 801ef80:	4413      	add	r3, r2
 801ef82:	2200      	movs	r2, #0
 801ef84:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801ef86:	4b60      	ldr	r3, [pc, #384]	; (801f108 <httpServer_run+0x2ec>)
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	4a5d      	ldr	r2, [pc, #372]	; (801f100 <httpServer_run+0x2e4>)
 801ef8c:	6812      	ldr	r2, [r2, #0]
 801ef8e:	4611      	mov	r1, r2
 801ef90:	4618      	mov	r0, r3
 801ef92:	f7ff fd13 	bl	801e9bc <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801ef96:	4b5c      	ldr	r3, [pc, #368]	; (801f108 <httpServer_run+0x2ec>)
 801ef98:	681a      	ldr	r2, [r3, #0]
 801ef9a:	7bfb      	ldrb	r3, [r7, #15]
 801ef9c:	4611      	mov	r1, r2
 801ef9e:	4618      	mov	r0, r3
 801efa0:	f000 fac4 	bl	801f52c <http_process_handler>
						gettime = get_httpServer_timecount();
 801efa4:	f000 fd04 	bl	801f9b0 <get_httpServer_timecount>
 801efa8:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801efaa:	e006      	b.n	801efba <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801efac:	f000 fd00 	bl	801f9b0 <get_httpServer_timecount>
 801efb0:	4602      	mov	r2, r0
 801efb2:	693b      	ldr	r3, [r7, #16]
 801efb4:	1ad3      	subs	r3, r2, r3
 801efb6:	2b03      	cmp	r3, #3
 801efb8:	d813      	bhi.n	801efe2 <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801efba:	7bfb      	ldrb	r3, [r7, #15]
 801efbc:	4618      	mov	r0, r3
 801efbe:	f7f9 fde9 	bl	8018b94 <getSn_TX_FSR>
 801efc2:	4603      	mov	r3, r0
 801efc4:	461c      	mov	r4, r3
 801efc6:	7bfb      	ldrb	r3, [r7, #15]
 801efc8:	009b      	lsls	r3, r3, #2
 801efca:	3301      	adds	r3, #1
 801efcc:	00db      	lsls	r3, r3, #3
 801efce:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801efd2:	4618      	mov	r0, r3
 801efd4:	f7f9 fc84 	bl	80188e0 <WIZCHIP_READ>
 801efd8:	4603      	mov	r3, r0
 801efda:	029b      	lsls	r3, r3, #10
 801efdc:	429c      	cmp	r4, r3
 801efde:	d1e5      	bne.n	801efac <httpServer_run+0x190>
 801efe0:	e000      	b.n	801efe4 <httpServer_run+0x1c8>
								break;
 801efe2:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801efe4:	79fa      	ldrb	r2, [r7, #7]
 801efe6:	4949      	ldr	r1, [pc, #292]	; (801f10c <httpServer_run+0x2f0>)
 801efe8:	4613      	mov	r3, r2
 801efea:	011b      	lsls	r3, r3, #4
 801efec:	4413      	add	r3, r2
 801efee:	009b      	lsls	r3, r3, #2
 801eff0:	440b      	add	r3, r1
 801eff2:	3338      	adds	r3, #56	; 0x38
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	2b00      	cmp	r3, #0
 801eff8:	d009      	beq.n	801f00e <httpServer_run+0x1f2>
 801effa:	79fa      	ldrb	r2, [r7, #7]
 801effc:	4943      	ldr	r1, [pc, #268]	; (801f10c <httpServer_run+0x2f0>)
 801effe:	4613      	mov	r3, r2
 801f000:	011b      	lsls	r3, r3, #4
 801f002:	4413      	add	r3, r2
 801f004:	009b      	lsls	r3, r3, #2
 801f006:	440b      	add	r3, r1
 801f008:	2203      	movs	r2, #3
 801f00a:	701a      	strb	r2, [r3, #0]
					break;
 801f00c:	e05c      	b.n	801f0c8 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801f00e:	79fa      	ldrb	r2, [r7, #7]
 801f010:	493e      	ldr	r1, [pc, #248]	; (801f10c <httpServer_run+0x2f0>)
 801f012:	4613      	mov	r3, r2
 801f014:	011b      	lsls	r3, r3, #4
 801f016:	4413      	add	r3, r2
 801f018:	009b      	lsls	r3, r3, #2
 801f01a:	440b      	add	r3, r1
 801f01c:	2204      	movs	r2, #4
 801f01e:	701a      	strb	r2, [r3, #0]
					break;
 801f020:	e052      	b.n	801f0c8 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801f022:	79fa      	ldrb	r2, [r7, #7]
 801f024:	4613      	mov	r3, r2
 801f026:	011b      	lsls	r3, r3, #4
 801f028:	4413      	add	r3, r2
 801f02a:	009b      	lsls	r3, r3, #2
 801f02c:	4a37      	ldr	r2, [pc, #220]	; (801f10c <httpServer_run+0x2f0>)
 801f02e:	4413      	add	r3, r2
 801f030:	1c59      	adds	r1, r3, #1
 801f032:	4b37      	ldr	r3, [pc, #220]	; (801f110 <httpServer_run+0x2f4>)
 801f034:	681a      	ldr	r2, [r3, #0]
 801f036:	7bf8      	ldrb	r0, [r7, #15]
 801f038:	2300      	movs	r3, #0
 801f03a:	9300      	str	r3, [sp, #0]
 801f03c:	2300      	movs	r3, #0
 801f03e:	f000 f8d5 	bl	801f1ec <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801f042:	79fa      	ldrb	r2, [r7, #7]
 801f044:	4931      	ldr	r1, [pc, #196]	; (801f10c <httpServer_run+0x2f0>)
 801f046:	4613      	mov	r3, r2
 801f048:	011b      	lsls	r3, r3, #4
 801f04a:	4413      	add	r3, r2
 801f04c:	009b      	lsls	r3, r3, #2
 801f04e:	440b      	add	r3, r1
 801f050:	3338      	adds	r3, #56	; 0x38
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	2b00      	cmp	r3, #0
 801f056:	d139      	bne.n	801f0cc <httpServer_run+0x2b0>
 801f058:	79fa      	ldrb	r2, [r7, #7]
 801f05a:	492c      	ldr	r1, [pc, #176]	; (801f10c <httpServer_run+0x2f0>)
 801f05c:	4613      	mov	r3, r2
 801f05e:	011b      	lsls	r3, r3, #4
 801f060:	4413      	add	r3, r2
 801f062:	009b      	lsls	r3, r3, #2
 801f064:	440b      	add	r3, r1
 801f066:	2204      	movs	r2, #4
 801f068:	701a      	strb	r2, [r3, #0]
					break;
 801f06a:	e02f      	b.n	801f0cc <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801f06c:	79fa      	ldrb	r2, [r7, #7]
 801f06e:	4927      	ldr	r1, [pc, #156]	; (801f10c <httpServer_run+0x2f0>)
 801f070:	4613      	mov	r3, r2
 801f072:	011b      	lsls	r3, r3, #4
 801f074:	4413      	add	r3, r2
 801f076:	009b      	lsls	r3, r3, #2
 801f078:	440b      	add	r3, r1
 801f07a:	3338      	adds	r3, #56	; 0x38
 801f07c:	2200      	movs	r2, #0
 801f07e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801f080:	79fa      	ldrb	r2, [r7, #7]
 801f082:	4922      	ldr	r1, [pc, #136]	; (801f10c <httpServer_run+0x2f0>)
 801f084:	4613      	mov	r3, r2
 801f086:	011b      	lsls	r3, r3, #4
 801f088:	4413      	add	r3, r2
 801f08a:	009b      	lsls	r3, r3, #2
 801f08c:	440b      	add	r3, r1
 801f08e:	333c      	adds	r3, #60	; 0x3c
 801f090:	2200      	movs	r2, #0
 801f092:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801f094:	79fa      	ldrb	r2, [r7, #7]
 801f096:	491d      	ldr	r1, [pc, #116]	; (801f10c <httpServer_run+0x2f0>)
 801f098:	4613      	mov	r3, r2
 801f09a:	011b      	lsls	r3, r3, #4
 801f09c:	4413      	add	r3, r2
 801f09e:	009b      	lsls	r3, r3, #2
 801f0a0:	440b      	add	r3, r1
 801f0a2:	3334      	adds	r3, #52	; 0x34
 801f0a4:	2200      	movs	r2, #0
 801f0a6:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801f0a8:	79fa      	ldrb	r2, [r7, #7]
 801f0aa:	4918      	ldr	r1, [pc, #96]	; (801f10c <httpServer_run+0x2f0>)
 801f0ac:	4613      	mov	r3, r2
 801f0ae:	011b      	lsls	r3, r3, #4
 801f0b0:	4413      	add	r3, r2
 801f0b2:	009b      	lsls	r3, r3, #2
 801f0b4:	440b      	add	r3, r1
 801f0b6:	2200      	movs	r2, #0
 801f0b8:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801f0ba:	7bfb      	ldrb	r3, [r7, #15]
 801f0bc:	4618      	mov	r0, r3
 801f0be:	f000 fa13 	bl	801f4e8 <http_disconnect>
					break;
 801f0c2:	e004      	b.n	801f0ce <httpServer_run+0x2b2>
					break;
 801f0c4:	bf00      	nop
 801f0c6:	e015      	b.n	801f0f4 <httpServer_run+0x2d8>
					break;
 801f0c8:	bf00      	nop
 801f0ca:	e013      	b.n	801f0f4 <httpServer_run+0x2d8>
					break;
 801f0cc:	bf00      	nop
			}
			break;
 801f0ce:	e011      	b.n	801f0f4 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801f0d0:	7bfb      	ldrb	r3, [r7, #15]
 801f0d2:	4618      	mov	r0, r3
 801f0d4:	f7fa f9ac 	bl	8019430 <disconnect>
			break;
 801f0d8:	e00c      	b.n	801f0f4 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801f0da:	7bf8      	ldrb	r0, [r7, #15]
 801f0dc:	2300      	movs	r3, #0
 801f0de:	2250      	movs	r2, #80	; 0x50
 801f0e0:	2101      	movs	r1, #1
 801f0e2:	f7f9 feed 	bl	8018ec0 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801f0e6:	e005      	b.n	801f0f4 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801f0e8:	7bfb      	ldrb	r3, [r7, #15]
 801f0ea:	4618      	mov	r0, r3
 801f0ec:	f7fa f86a 	bl	80191c4 <listen>
			break;
 801f0f0:	e000      	b.n	801f0f4 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801f0f2:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801f0f4:	bf00      	nop
 801f0f6:	371c      	adds	r7, #28
 801f0f8:	46bd      	mov	sp, r7
 801f0fa:	bd90      	pop	{r4, r7, pc}
 801f0fc:	200012dc 	.word	0x200012dc
 801f100:	20001200 	.word	0x20001200
 801f104:	200012d8 	.word	0x200012d8
 801f108:	20001204 	.word	0x20001204
 801f10c:	200012e4 	.word	0x200012e4
 801f110:	20001208 	.word	0x20001208

0801f114 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801f114:	b590      	push	{r4, r7, lr}
 801f116:	b083      	sub	sp, #12
 801f118:	af00      	add	r7, sp, #0
 801f11a:	603a      	str	r2, [r7, #0]
 801f11c:	461a      	mov	r2, r3
 801f11e:	4603      	mov	r3, r0
 801f120:	71fb      	strb	r3, [r7, #7]
 801f122:	460b      	mov	r3, r1
 801f124:	71bb      	strb	r3, [r7, #6]
 801f126:	4613      	mov	r3, r2
 801f128:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801f12a:	88bb      	ldrh	r3, [r7, #4]
 801f12c:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801f130:	d029      	beq.n	801f186 <send_http_response_header+0x72>
 801f132:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801f136:	dc3a      	bgt.n	801f1ae <send_http_response_header+0x9a>
 801f138:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801f13c:	d019      	beq.n	801f172 <send_http_response_header+0x5e>
 801f13e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801f142:	dc34      	bgt.n	801f1ae <send_http_response_header+0x9a>
 801f144:	2bc8      	cmp	r3, #200	; 0xc8
 801f146:	d003      	beq.n	801f150 <send_http_response_header+0x3c>
 801f148:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 801f14c:	d025      	beq.n	801f19a <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801f14e:	e02e      	b.n	801f1ae <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801f150:	79bb      	ldrb	r3, [r7, #6]
 801f152:	2b08      	cmp	r3, #8
 801f154:	d00a      	beq.n	801f16c <send_http_response_header+0x58>
 801f156:	79bb      	ldrb	r3, [r7, #6]
 801f158:	2b09      	cmp	r3, #9
 801f15a:	d007      	beq.n	801f16c <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801f15c:	4b1f      	ldr	r3, [pc, #124]	; (801f1dc <send_http_response_header+0xc8>)
 801f15e:	681b      	ldr	r3, [r3, #0]
 801f160:	79b9      	ldrb	r1, [r7, #6]
 801f162:	683a      	ldr	r2, [r7, #0]
 801f164:	4618      	mov	r0, r3
 801f166:	f7ff f9ed 	bl	801e544 <make_http_response_head>
			break;
 801f16a:	e021      	b.n	801f1b0 <send_http_response_header+0x9c>
				http_status = 0;
 801f16c:	2300      	movs	r3, #0
 801f16e:	80bb      	strh	r3, [r7, #4]
			break;
 801f170:	e01e      	b.n	801f1b0 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801f172:	4b1a      	ldr	r3, [pc, #104]	; (801f1dc <send_http_response_header+0xc8>)
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	4a1a      	ldr	r2, [pc, #104]	; (801f1e0 <send_http_response_header+0xcc>)
 801f178:	4618      	mov	r0, r3
 801f17a:	4611      	mov	r1, r2
 801f17c:	2376      	movs	r3, #118	; 0x76
 801f17e:	461a      	mov	r2, r3
 801f180:	f00e fe89 	bl	802de96 <memcpy>
			break;
 801f184:	e014      	b.n	801f1b0 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801f186:	4b15      	ldr	r3, [pc, #84]	; (801f1dc <send_http_response_header+0xc8>)
 801f188:	681b      	ldr	r3, [r3, #0]
 801f18a:	4a16      	ldr	r2, [pc, #88]	; (801f1e4 <send_http_response_header+0xd0>)
 801f18c:	4618      	mov	r0, r3
 801f18e:	4611      	mov	r1, r2
 801f190:	2399      	movs	r3, #153	; 0x99
 801f192:	461a      	mov	r2, r3
 801f194:	f00e fe7f 	bl	802de96 <memcpy>
			break;
 801f198:	e00a      	b.n	801f1b0 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801f19a:	4b10      	ldr	r3, [pc, #64]	; (801f1dc <send_http_response_header+0xc8>)
 801f19c:	681b      	ldr	r3, [r3, #0]
 801f19e:	4a12      	ldr	r2, [pc, #72]	; (801f1e8 <send_http_response_header+0xd4>)
 801f1a0:	4618      	mov	r0, r3
 801f1a2:	4611      	mov	r1, r2
 801f1a4:	239e      	movs	r3, #158	; 0x9e
 801f1a6:	461a      	mov	r2, r3
 801f1a8:	f00e fe75 	bl	802de96 <memcpy>
			break;
 801f1ac:	e000      	b.n	801f1b0 <send_http_response_header+0x9c>
			break;
 801f1ae:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801f1b0:	88bb      	ldrh	r3, [r7, #4]
 801f1b2:	2b00      	cmp	r3, #0
 801f1b4:	d00d      	beq.n	801f1d2 <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801f1b6:	4b09      	ldr	r3, [pc, #36]	; (801f1dc <send_http_response_header+0xc8>)
 801f1b8:	681c      	ldr	r4, [r3, #0]
 801f1ba:	4b08      	ldr	r3, [pc, #32]	; (801f1dc <send_http_response_header+0xc8>)
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	4618      	mov	r0, r3
 801f1c0:	f7f1 f86e 	bl	80102a0 <strlen>
 801f1c4:	4603      	mov	r3, r0
 801f1c6:	b29a      	uxth	r2, r3
 801f1c8:	79fb      	ldrb	r3, [r7, #7]
 801f1ca:	4621      	mov	r1, r4
 801f1cc:	4618      	mov	r0, r3
 801f1ce:	f7fa f9a5 	bl	801951c <send>
	}
}
 801f1d2:	bf00      	nop
 801f1d4:	370c      	adds	r7, #12
 801f1d6:	46bd      	mov	sp, r7
 801f1d8:	bd90      	pop	{r4, r7, pc}
 801f1da:	bf00      	nop
 801f1dc:	20001208 	.word	0x20001208
 801f1e0:	080349dc 	.word	0x080349dc
 801f1e4:	08034940 	.word	0x08034940
 801f1e8:	08034a54 	.word	0x08034a54

0801f1ec <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801f1ec:	b580      	push	{r7, lr}
 801f1ee:	b0a6      	sub	sp, #152	; 0x98
 801f1f0:	af00      	add	r7, sp, #0
 801f1f2:	60b9      	str	r1, [r7, #8]
 801f1f4:	607a      	str	r2, [r7, #4]
 801f1f6:	603b      	str	r3, [r7, #0]
 801f1f8:	4603      	mov	r3, r0
 801f1fa:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801f202:	2300      	movs	r3, #0
 801f204:	613b      	str	r3, [r7, #16]
 801f206:	f107 0314 	add.w	r3, r7, #20
 801f20a:	227c      	movs	r2, #124	; 0x7c
 801f20c:	2100      	movs	r1, #0
 801f20e:	4618      	mov	r0, r3
 801f210:	f00e fc6c 	bl	802daec <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f214:	7bfb      	ldrb	r3, [r7, #15]
 801f216:	4618      	mov	r0, r3
 801f218:	f7ff fdc2 	bl	801eda0 <getHTTPSequenceNum>
 801f21c:	4603      	mov	r3, r0
 801f21e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 801f222:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 801f226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f22a:	f000 812e 	beq.w	801f48a <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801f22e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f232:	4998      	ldr	r1, [pc, #608]	; (801f494 <send_http_response_body+0x2a8>)
 801f234:	4613      	mov	r3, r2
 801f236:	011b      	lsls	r3, r3, #4
 801f238:	4413      	add	r3, r2
 801f23a:	009b      	lsls	r3, r3, #2
 801f23c:	440b      	add	r3, r1
 801f23e:	3338      	adds	r3, #56	; 0x38
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	2b00      	cmp	r3, #0
 801f244:	d140      	bne.n	801f2c8 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801f246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f24a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f24e:	d336      	bcc.n	801f2be <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801f250:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f254:	498f      	ldr	r1, [pc, #572]	; (801f494 <send_http_response_body+0x2a8>)
 801f256:	4613      	mov	r3, r2
 801f258:	011b      	lsls	r3, r3, #4
 801f25a:	4413      	add	r3, r2
 801f25c:	009b      	lsls	r3, r3, #2
 801f25e:	440b      	add	r3, r1
 801f260:	3334      	adds	r3, #52	; 0x34
 801f262:	683a      	ldr	r2, [r7, #0]
 801f264:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801f266:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f26a:	498a      	ldr	r1, [pc, #552]	; (801f494 <send_http_response_body+0x2a8>)
 801f26c:	4613      	mov	r3, r2
 801f26e:	011b      	lsls	r3, r3, #4
 801f270:	4413      	add	r3, r2
 801f272:	009b      	lsls	r3, r3, #2
 801f274:	440b      	add	r3, r1
 801f276:	3338      	adds	r3, #56	; 0x38
 801f278:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801f27c:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801f27e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801f282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801f286:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f28a:	4613      	mov	r3, r2
 801f28c:	011b      	lsls	r3, r3, #4
 801f28e:	4413      	add	r3, r2
 801f290:	009b      	lsls	r3, r3, #2
 801f292:	4a80      	ldr	r2, [pc, #512]	; (801f494 <send_http_response_body+0x2a8>)
 801f294:	4413      	add	r3, r2
 801f296:	3301      	adds	r3, #1
 801f298:	2232      	movs	r2, #50	; 0x32
 801f29a:	2100      	movs	r1, #0
 801f29c:	4618      	mov	r0, r3
 801f29e:	f00e fc25 	bl	802daec <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801f2a2:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2a6:	4613      	mov	r3, r2
 801f2a8:	011b      	lsls	r3, r3, #4
 801f2aa:	4413      	add	r3, r2
 801f2ac:	009b      	lsls	r3, r3, #2
 801f2ae:	4a79      	ldr	r2, [pc, #484]	; (801f494 <send_http_response_body+0x2a8>)
 801f2b0:	4413      	add	r3, r2
 801f2b2:	3301      	adds	r3, #1
 801f2b4:	68b9      	ldr	r1, [r7, #8]
 801f2b6:	4618      	mov	r0, r3
 801f2b8:	f00e fde5 	bl	802de86 <strcpy>
 801f2bc:	e028      	b.n	801f310 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801f2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f2c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f2c6:	e023      	b.n	801f310 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801f2c8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2cc:	4971      	ldr	r1, [pc, #452]	; (801f494 <send_http_response_body+0x2a8>)
 801f2ce:	4613      	mov	r3, r2
 801f2d0:	011b      	lsls	r3, r3, #4
 801f2d2:	4413      	add	r3, r2
 801f2d4:	009b      	lsls	r3, r3, #2
 801f2d6:	440b      	add	r3, r1
 801f2d8:	3338      	adds	r3, #56	; 0x38
 801f2da:	6819      	ldr	r1, [r3, #0]
 801f2dc:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2e0:	486c      	ldr	r0, [pc, #432]	; (801f494 <send_http_response_body+0x2a8>)
 801f2e2:	4613      	mov	r3, r2
 801f2e4:	011b      	lsls	r3, r3, #4
 801f2e6:	4413      	add	r3, r2
 801f2e8:	009b      	lsls	r3, r3, #2
 801f2ea:	4403      	add	r3, r0
 801f2ec:	333c      	adds	r3, #60	; 0x3c
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	1acb      	subs	r3, r1, r3
 801f2f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801f2f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f2fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f2fe:	d304      	bcc.n	801f30a <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801f300:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801f304:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f308:	e002      	b.n	801f310 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801f30a:	2301      	movs	r3, #1
 801f30c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801f310:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f314:	495f      	ldr	r1, [pc, #380]	; (801f494 <send_http_response_body+0x2a8>)
 801f316:	4613      	mov	r3, r2
 801f318:	011b      	lsls	r3, r3, #4
 801f31a:	4413      	add	r3, r2
 801f31c:	009b      	lsls	r3, r3, #2
 801f31e:	440b      	add	r3, r1
 801f320:	3340      	adds	r3, #64	; 0x40
 801f322:	781b      	ldrb	r3, [r3, #0]
 801f324:	2b01      	cmp	r3, #1
 801f326:	d129      	bne.n	801f37c <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801f328:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f32c:	4959      	ldr	r1, [pc, #356]	; (801f494 <send_http_response_body+0x2a8>)
 801f32e:	4613      	mov	r3, r2
 801f330:	011b      	lsls	r3, r3, #4
 801f332:	4413      	add	r3, r2
 801f334:	009b      	lsls	r3, r3, #2
 801f336:	440b      	add	r3, r1
 801f338:	3338      	adds	r3, #56	; 0x38
 801f33a:	681b      	ldr	r3, [r3, #0]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d00a      	beq.n	801f356 <send_http_response_body+0x16a>
 801f340:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f344:	4953      	ldr	r1, [pc, #332]	; (801f494 <send_http_response_body+0x2a8>)
 801f346:	4613      	mov	r3, r2
 801f348:	011b      	lsls	r3, r3, #4
 801f34a:	4413      	add	r3, r2
 801f34c:	009b      	lsls	r3, r3, #2
 801f34e:	440b      	add	r3, r1
 801f350:	3334      	adds	r3, #52	; 0x34
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f356:	683b      	ldr	r3, [r7, #0]
 801f358:	b298      	uxth	r0, r3
 801f35a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f35e:	494d      	ldr	r1, [pc, #308]	; (801f494 <send_http_response_body+0x2a8>)
 801f360:	4613      	mov	r3, r2
 801f362:	011b      	lsls	r3, r3, #4
 801f364:	4413      	add	r3, r2
 801f366:	009b      	lsls	r3, r3, #2
 801f368:	440b      	add	r3, r1
 801f36a:	333c      	adds	r3, #60	; 0x3c
 801f36c:	681a      	ldr	r2, [r3, #0]
 801f36e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f372:	b29b      	uxth	r3, r3
 801f374:	6879      	ldr	r1, [r7, #4]
 801f376:	f000 fbc9 	bl	801fb0c <read_userReg_webContent>
 801f37a:	e035      	b.n	801f3e8 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801f37c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f380:	4944      	ldr	r1, [pc, #272]	; (801f494 <send_http_response_body+0x2a8>)
 801f382:	4613      	mov	r3, r2
 801f384:	011b      	lsls	r3, r3, #4
 801f386:	4413      	add	r3, r2
 801f388:	009b      	lsls	r3, r3, #2
 801f38a:	440b      	add	r3, r1
 801f38c:	3340      	adds	r3, #64	; 0x40
 801f38e:	781b      	ldrb	r3, [r3, #0]
 801f390:	2b04      	cmp	r3, #4
 801f392:	d126      	bne.n	801f3e2 <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801f394:	f107 0310 	add.w	r3, r7, #16
 801f398:	2280      	movs	r2, #128	; 0x80
 801f39a:	2100      	movs	r1, #0
 801f39c:	4618      	mov	r0, r3
 801f39e:	f00e fba5 	bl	802daec <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801f3a2:	f107 0310 	add.w	r3, r7, #16
 801f3a6:	4a3c      	ldr	r2, [pc, #240]	; (801f498 <send_http_response_body+0x2ac>)
 801f3a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f3ac:	6018      	str	r0, [r3, #0]
 801f3ae:	3304      	adds	r3, #4
 801f3b0:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801f3b2:	f107 0310 	add.w	r3, r7, #16
 801f3b6:	68b9      	ldr	r1, [r7, #8]
 801f3b8:	4618      	mov	r0, r3
 801f3ba:	f00e fb9f 	bl	802dafc <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f3be:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f3c2:	4934      	ldr	r1, [pc, #208]	; (801f494 <send_http_response_body+0x2a8>)
 801f3c4:	4613      	mov	r3, r2
 801f3c6:	011b      	lsls	r3, r3, #4
 801f3c8:	4413      	add	r3, r2
 801f3ca:	009b      	lsls	r3, r3, #2
 801f3cc:	440b      	add	r3, r1
 801f3ce:	333c      	adds	r3, #60	; 0x3c
 801f3d0:	681a      	ldr	r2, [r3, #0]
 801f3d2:	f107 0010 	add.w	r0, r7, #16
 801f3d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f3da:	6879      	ldr	r1, [r7, #4]
 801f3dc:	f00b fdfe 	bl	802afdc <spi_fs_read_file_offset>
 801f3e0:	e002      	b.n	801f3e8 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801f3e2:	2300      	movs	r3, #0
 801f3e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801f3e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f3ec:	2b00      	cmp	r3, #0
 801f3ee:	d008      	beq.n	801f402 <send_http_response_body+0x216>
 801f3f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f3f4:	b29a      	uxth	r2, r3
 801f3f6:	7bfb      	ldrb	r3, [r7, #15]
 801f3f8:	6879      	ldr	r1, [r7, #4]
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	f7fa f88e 	bl	801951c <send>
 801f400:	e002      	b.n	801f408 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801f402:	2301      	movs	r3, #1
 801f404:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 801f408:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801f40c:	2b00      	cmp	r3, #0
 801f40e:	d024      	beq.n	801f45a <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f410:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f414:	491f      	ldr	r1, [pc, #124]	; (801f494 <send_http_response_body+0x2a8>)
 801f416:	4613      	mov	r3, r2
 801f418:	011b      	lsls	r3, r3, #4
 801f41a:	4413      	add	r3, r2
 801f41c:	009b      	lsls	r3, r3, #2
 801f41e:	440b      	add	r3, r1
 801f420:	3334      	adds	r3, #52	; 0x34
 801f422:	2200      	movs	r2, #0
 801f424:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f426:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f42a:	491a      	ldr	r1, [pc, #104]	; (801f494 <send_http_response_body+0x2a8>)
 801f42c:	4613      	mov	r3, r2
 801f42e:	011b      	lsls	r3, r3, #4
 801f430:	4413      	add	r3, r2
 801f432:	009b      	lsls	r3, r3, #2
 801f434:	440b      	add	r3, r1
 801f436:	3338      	adds	r3, #56	; 0x38
 801f438:	2200      	movs	r2, #0
 801f43a:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f43c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f440:	4914      	ldr	r1, [pc, #80]	; (801f494 <send_http_response_body+0x2a8>)
 801f442:	4613      	mov	r3, r2
 801f444:	011b      	lsls	r3, r3, #4
 801f446:	4413      	add	r3, r2
 801f448:	009b      	lsls	r3, r3, #2
 801f44a:	440b      	add	r3, r1
 801f44c:	333c      	adds	r3, #60	; 0x3c
 801f44e:	2200      	movs	r2, #0
 801f450:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f452:	2300      	movs	r3, #0
 801f454:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 801f458:	e018      	b.n	801f48c <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f45a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f45e:	490d      	ldr	r1, [pc, #52]	; (801f494 <send_http_response_body+0x2a8>)
 801f460:	4613      	mov	r3, r2
 801f462:	011b      	lsls	r3, r3, #4
 801f464:	4413      	add	r3, r2
 801f466:	009b      	lsls	r3, r3, #2
 801f468:	440b      	add	r3, r1
 801f46a:	333c      	adds	r3, #60	; 0x3c
 801f46c:	6819      	ldr	r1, [r3, #0]
 801f46e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f472:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f476:	4419      	add	r1, r3
 801f478:	4806      	ldr	r0, [pc, #24]	; (801f494 <send_http_response_body+0x2a8>)
 801f47a:	4613      	mov	r3, r2
 801f47c:	011b      	lsls	r3, r3, #4
 801f47e:	4413      	add	r3, r2
 801f480:	009b      	lsls	r3, r3, #2
 801f482:	4403      	add	r3, r0
 801f484:	333c      	adds	r3, #60	; 0x3c
 801f486:	6019      	str	r1, [r3, #0]
 801f488:	e000      	b.n	801f48c <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f48a:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801f48c:	3798      	adds	r7, #152	; 0x98
 801f48e:	46bd      	mov	sp, r7
 801f490:	bd80      	pop	{r7, pc}
 801f492:	bf00      	nop
 801f494:	200012e4 	.word	0x200012e4
 801f498:	0803366c 	.word	0x0803366c

0801f49c <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801f49c:	b580      	push	{r7, lr}
 801f49e:	b088      	sub	sp, #32
 801f4a0:	af02      	add	r7, sp, #8
 801f4a2:	60b9      	str	r1, [r7, #8]
 801f4a4:	607a      	str	r2, [r7, #4]
 801f4a6:	461a      	mov	r2, r3
 801f4a8:	4603      	mov	r3, r0
 801f4aa:	73fb      	strb	r3, [r7, #15]
 801f4ac:	4613      	mov	r3, r2
 801f4ae:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801f4b0:	2300      	movs	r3, #0
 801f4b2:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801f4b4:	89ba      	ldrh	r2, [r7, #12]
 801f4b6:	687b      	ldr	r3, [r7, #4]
 801f4b8:	9300      	str	r3, [sp, #0]
 801f4ba:	4613      	mov	r3, r2
 801f4bc:	4a08      	ldr	r2, [pc, #32]	; (801f4e0 <send_http_response_cgi+0x44>)
 801f4be:	4909      	ldr	r1, [pc, #36]	; (801f4e4 <send_http_response_cgi+0x48>)
 801f4c0:	68b8      	ldr	r0, [r7, #8]
 801f4c2:	f00e f9c3 	bl	802d84c <siprintf>
 801f4c6:	4603      	mov	r3, r0
 801f4c8:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f4ca:	8afa      	ldrh	r2, [r7, #22]
 801f4cc:	7bfb      	ldrb	r3, [r7, #15]
 801f4ce:	68b9      	ldr	r1, [r7, #8]
 801f4d0:	4618      	mov	r0, r3
 801f4d2:	f7fa f823 	bl	801951c <send>
}
 801f4d6:	bf00      	nop
 801f4d8:	3718      	adds	r7, #24
 801f4da:	46bd      	mov	sp, r7
 801f4dc:	bd80      	pop	{r7, pc}
 801f4de:	bf00      	nop
 801f4e0:	08033674 	.word	0x08033674
 801f4e4:	080336d0 	.word	0x080336d0

0801f4e8 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801f4e8:	b580      	push	{r7, lr}
 801f4ea:	b082      	sub	sp, #8
 801f4ec:	af00      	add	r7, sp, #0
 801f4ee:	4603      	mov	r3, r0
 801f4f0:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801f4f2:	79fb      	ldrb	r3, [r7, #7]
 801f4f4:	009b      	lsls	r3, r3, #2
 801f4f6:	3301      	adds	r3, #1
 801f4f8:	00db      	lsls	r3, r3, #3
 801f4fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f4fe:	2108      	movs	r1, #8
 801f500:	4618      	mov	r0, r3
 801f502:	f7f9 fa39 	bl	8018978 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801f506:	bf00      	nop
 801f508:	79fb      	ldrb	r3, [r7, #7]
 801f50a:	009b      	lsls	r3, r3, #2
 801f50c:	3301      	adds	r3, #1
 801f50e:	00db      	lsls	r3, r3, #3
 801f510:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f514:	4618      	mov	r0, r3
 801f516:	f7f9 f9e3 	bl	80188e0 <WIZCHIP_READ>
 801f51a:	4603      	mov	r3, r0
 801f51c:	2b00      	cmp	r3, #0
 801f51e:	d1f3      	bne.n	801f508 <http_disconnect+0x20>

	return SOCK_OK;
 801f520:	2301      	movs	r3, #1
}
 801f522:	4618      	mov	r0, r3
 801f524:	3708      	adds	r7, #8
 801f526:	46bd      	mov	sp, r7
 801f528:	bd80      	pop	{r7, pc}
	...

0801f52c <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801f52c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f530:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801f534:	af02      	add	r7, sp, #8
 801f536:	4602      	mov	r2, r0
 801f538:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f53c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f540:	6019      	str	r1, [r3, #0]
 801f542:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f546:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f54a:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801f54c:	2300      	movs	r3, #0
 801f54e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 801f552:	2300      	movs	r3, #0
 801f554:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 801f558:	2300      	movs	r3, #0
 801f55a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801f55e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f562:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f566:	2200      	movs	r2, #0
 801f568:	601a      	str	r2, [r3, #0]
 801f56a:	3304      	adds	r3, #4
 801f56c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801f570:	2100      	movs	r1, #0
 801f572:	4618      	mov	r0, r3
 801f574:	f00e faba 	bl	802daec <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801f578:	f04f 0200 	mov.w	r2, #0
 801f57c:	f04f 0300 	mov.w	r3, #0
 801f580:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f584:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f588:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f58c:	781b      	ldrb	r3, [r3, #0]
 801f58e:	4618      	mov	r0, r3
 801f590:	f7ff fc06 	bl	801eda0 <getHTTPSequenceNum>
 801f594:	4603      	mov	r3, r0
 801f596:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 801f59a:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 801f59e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f5a2:	f000 81e5 	beq.w	801f970 <http_process_handler+0x444>

	http_status = 0;
 801f5a6:	2300      	movs	r3, #0
 801f5a8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 801f5ac:	4ba6      	ldr	r3, [pc, #664]	; (801f848 <http_process_handler+0x31c>)
 801f5ae:	681b      	ldr	r3, [r3, #0]
 801f5b0:	4aa6      	ldr	r2, [pc, #664]	; (801f84c <http_process_handler+0x320>)
 801f5b2:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801f5b4:	2300      	movs	r3, #0
 801f5b6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801f5ba:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f5be:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f5c2:	681b      	ldr	r3, [r3, #0]
 801f5c4:	781b      	ldrb	r3, [r3, #0]
 801f5c6:	2b03      	cmp	r3, #3
 801f5c8:	f000 8154 	beq.w	801f874 <http_process_handler+0x348>
 801f5cc:	2b03      	cmp	r3, #3
 801f5ce:	f300 81be 	bgt.w	801f94e <http_process_handler+0x422>
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d007      	beq.n	801f5e6 <http_process_handler+0xba>
 801f5d6:	2b00      	cmp	r3, #0
 801f5d8:	f2c0 81b9 	blt.w	801f94e <http_process_handler+0x422>
 801f5dc:	3b01      	subs	r3, #1
 801f5de:	2b01      	cmp	r3, #1
 801f5e0:	f200 81b5 	bhi.w	801f94e <http_process_handler+0x422>
 801f5e4:	e010      	b.n	801f608 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801f5e6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f5ea:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f5ee:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f5f2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f5f6:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f5fa:	7818      	ldrb	r0, [r3, #0]
 801f5fc:	4613      	mov	r3, r2
 801f5fe:	2200      	movs	r2, #0
 801f600:	2100      	movs	r1, #0
 801f602:	f7ff fd87 	bl	801f114 <send_http_response_header>
			break;
 801f606:	e1b6      	b.n	801f976 <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801f608:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f60c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f610:	681b      	ldr	r3, [r3, #0]
 801f612:	3302      	adds	r3, #2
 801f614:	f107 0208 	add.w	r2, r7, #8
 801f618:	4611      	mov	r1, r2
 801f61a:	4618      	mov	r0, r3
 801f61c:	f7ff fad6 	bl	801ebcc <get_http_uri_name>
			uri_name = uri_buf;
 801f620:	f107 0308 	add.w	r3, r7, #8
 801f624:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801f628:	4989      	ldr	r1, [pc, #548]	; (801f850 <http_process_handler+0x324>)
 801f62a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f62e:	f7f0 fdd7 	bl	80101e0 <strcmp>
 801f632:	4603      	mov	r3, r0
 801f634:	2b00      	cmp	r3, #0
 801f636:	d10b      	bne.n	801f650 <http_process_handler+0x124>
 801f638:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f63c:	4985      	ldr	r1, [pc, #532]	; (801f854 <http_process_handler+0x328>)
 801f63e:	461a      	mov	r2, r3
 801f640:	460b      	mov	r3, r1
 801f642:	cb03      	ldmia	r3!, {r0, r1}
 801f644:	6010      	str	r0, [r2, #0]
 801f646:	6051      	str	r1, [r2, #4]
 801f648:	8819      	ldrh	r1, [r3, #0]
 801f64a:	789b      	ldrb	r3, [r3, #2]
 801f64c:	8111      	strh	r1, [r2, #8]
 801f64e:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801f650:	4981      	ldr	r1, [pc, #516]	; (801f858 <http_process_handler+0x32c>)
 801f652:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f656:	f7f0 fdc3 	bl	80101e0 <strcmp>
 801f65a:	4603      	mov	r3, r0
 801f65c:	2b00      	cmp	r3, #0
 801f65e:	d10a      	bne.n	801f676 <http_process_handler+0x14a>
 801f660:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f664:	4a7d      	ldr	r2, [pc, #500]	; (801f85c <http_process_handler+0x330>)
 801f666:	461c      	mov	r4, r3
 801f668:	4613      	mov	r3, r2
 801f66a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801f66c:	6020      	str	r0, [r4, #0]
 801f66e:	6061      	str	r1, [r4, #4]
 801f670:	60a2      	str	r2, [r4, #8]
 801f672:	781b      	ldrb	r3, [r3, #0]
 801f674:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801f676:	497a      	ldr	r1, [pc, #488]	; (801f860 <http_process_handler+0x334>)
 801f678:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f67c:	f7f0 fdb0 	bl	80101e0 <strcmp>
 801f680:	4603      	mov	r3, r0
 801f682:	2b00      	cmp	r3, #0
 801f684:	d10b      	bne.n	801f69e <http_process_handler+0x172>
 801f686:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f68a:	4a76      	ldr	r2, [pc, #472]	; (801f864 <http_process_handler+0x338>)
 801f68c:	461d      	mov	r5, r3
 801f68e:	4614      	mov	r4, r2
 801f690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f692:	6028      	str	r0, [r5, #0]
 801f694:	6069      	str	r1, [r5, #4]
 801f696:	60aa      	str	r2, [r5, #8]
 801f698:	60eb      	str	r3, [r5, #12]
 801f69a:	8823      	ldrh	r3, [r4, #0]
 801f69c:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801f69e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f6a2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	3301      	adds	r3, #1
 801f6aa:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f6ae:	4618      	mov	r0, r3
 801f6b0:	f7fe fffe 	bl	801e6b0 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801f6b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f6b8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	785b      	ldrb	r3, [r3, #1]
 801f6c0:	2b08      	cmp	r3, #8
 801f6c2:	d131      	bne.n	801f728 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801f6c4:	4b68      	ldr	r3, [pc, #416]	; (801f868 <http_process_handler+0x33c>)
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f6cc:	4619      	mov	r1, r3
 801f6ce:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f6d2:	f000 fa59 	bl	801fb88 <http_get_cgi_handler>
 801f6d6:	4603      	mov	r3, r0
 801f6d8:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801f6dc:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d015      	beq.n	801f710 <http_process_handler+0x1e4>
 801f6e4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f6e8:	f240 729e 	movw	r2, #1950	; 0x79e
 801f6ec:	4293      	cmp	r3, r2
 801f6ee:	d80f      	bhi.n	801f710 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801f6f0:	4b56      	ldr	r3, [pc, #344]	; (801f84c <http_process_handler+0x320>)
 801f6f2:	6819      	ldr	r1, [r3, #0]
 801f6f4:	4b5c      	ldr	r3, [pc, #368]	; (801f868 <http_process_handler+0x33c>)
 801f6f6:	681a      	ldr	r2, [r3, #0]
 801f6f8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f6fc:	b29c      	uxth	r4, r3
 801f6fe:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f702:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f706:	7818      	ldrb	r0, [r3, #0]
 801f708:	4623      	mov	r3, r4
 801f70a:	f7ff fec7 	bl	801f49c <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801f70e:	e131      	b.n	801f974 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f710:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f714:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f718:	7818      	ldrb	r0, [r3, #0]
 801f71a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f71e:	2200      	movs	r2, #0
 801f720:	2108      	movs	r1, #8
 801f722:	f7ff fcf7 	bl	801f114 <send_http_response_header>
			break;
 801f726:	e125      	b.n	801f974 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f728:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f72c:	484f      	ldr	r0, [pc, #316]	; (801f86c <http_process_handler+0x340>)
 801f72e:	f00b fd2f 	bl	802b190 <spi_fs_serch_file_in_dir>
 801f732:	4603      	mov	r3, r0
 801f734:	17da      	asrs	r2, r3, #31
 801f736:	4698      	mov	r8, r3
 801f738:	4691      	mov	r9, r2
 801f73a:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 801f73e:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 801f742:	2a01      	cmp	r2, #1
 801f744:	f173 0300 	sbcs.w	r3, r3, #0
 801f748:	db12      	blt.n	801f770 <http_process_handler+0x244>
					file_len = err;
 801f74a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801f74e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 801f752:	2301      	movs	r3, #1
 801f754:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f758:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f75c:	4944      	ldr	r1, [pc, #272]	; (801f870 <http_process_handler+0x344>)
 801f75e:	4613      	mov	r3, r2
 801f760:	011b      	lsls	r3, r3, #4
 801f762:	4413      	add	r3, r2
 801f764:	009b      	lsls	r3, r3, #2
 801f766:	440b      	add	r3, r1
 801f768:	3340      	adds	r3, #64	; 0x40
 801f76a:	2204      	movs	r2, #4
 801f76c:	701a      	strb	r2, [r3, #0]
 801f76e:	e024      	b.n	801f7ba <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f770:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f774:	f207 210e 	addw	r1, r7, #526	; 0x20e
 801f778:	f107 0308 	add.w	r3, r7, #8
 801f77c:	4618      	mov	r0, r3
 801f77e:	f000 f989 	bl	801fa94 <find_userReg_webContent>
 801f782:	4603      	mov	r3, r0
 801f784:	2b00      	cmp	r3, #0
 801f786:	d012      	beq.n	801f7ae <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f788:	2301      	movs	r3, #1
 801f78a:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 801f78e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 801f792:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f796:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f79a:	4935      	ldr	r1, [pc, #212]	; (801f870 <http_process_handler+0x344>)
 801f79c:	4613      	mov	r3, r2
 801f79e:	011b      	lsls	r3, r3, #4
 801f7a0:	4413      	add	r3, r2
 801f7a2:	009b      	lsls	r3, r3, #2
 801f7a4:	440b      	add	r3, r1
 801f7a6:	3340      	adds	r3, #64	; 0x40
 801f7a8:	2201      	movs	r2, #1
 801f7aa:	701a      	strb	r2, [r3, #0]
 801f7ac:	e005      	b.n	801f7ba <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f7ae:	2300      	movs	r3, #0
 801f7b0:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 801f7b4:	2300      	movs	r3, #0
 801f7b6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 801f7ba:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	d111      	bne.n	801f7e6 <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f7c2:	4924      	ldr	r1, [pc, #144]	; (801f854 <http_process_handler+0x328>)
 801f7c4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f7c8:	f7f0 fd0a 	bl	80101e0 <strcmp>
 801f7cc:	4603      	mov	r3, r0
 801f7ce:	2b00      	cmp	r3, #0
 801f7d0:	d104      	bne.n	801f7dc <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f7d2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f7d6:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f7da:	e007      	b.n	801f7ec <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f7dc:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801f7e0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f7e4:	e002      	b.n	801f7ec <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f7e6:	23c8      	movs	r3, #200	; 0xc8
 801f7e8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 801f7ec:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	d011      	beq.n	801f818 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f7f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f7f8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f7fc:	681b      	ldr	r3, [r3, #0]
 801f7fe:	7859      	ldrb	r1, [r3, #1]
 801f800:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801f804:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 801f808:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f80c:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f810:	7818      	ldrb	r0, [r3, #0]
 801f812:	4623      	mov	r3, r4
 801f814:	f7ff fc7e 	bl	801f114 <send_http_response_header>
				if(http_status == STATUS_OK)
 801f818:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f81c:	2bc8      	cmp	r3, #200	; 0xc8
 801f81e:	f040 80a9 	bne.w	801f974 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f822:	4b0a      	ldr	r3, [pc, #40]	; (801f84c <http_process_handler+0x320>)
 801f824:	6819      	ldr	r1, [r3, #0]
 801f826:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f82a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801f82e:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 801f832:	7810      	ldrb	r0, [r2, #0]
 801f834:	9300      	str	r3, [sp, #0]
 801f836:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f83a:	460a      	mov	r2, r1
 801f83c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f840:	f7ff fcd4 	bl	801f1ec <send_http_response_body>
			break;
 801f844:	e096      	b.n	801f974 <http_process_handler+0x448>
 801f846:	bf00      	nop
 801f848:	200012dc 	.word	0x200012dc
 801f84c:	20001208 	.word	0x20001208
 801f850:	080336dc 	.word	0x080336dc
 801f854:	080336e0 	.word	0x080336e0
 801f858:	080336ec 	.word	0x080336ec
 801f85c:	080336f0 	.word	0x080336f0
 801f860:	08033700 	.word	0x08033700
 801f864:	08033708 	.word	0x08033708
 801f868:	200012d8 	.word	0x200012d8
 801f86c:	0803366c 	.word	0x0803366c
 801f870:	200012e4 	.word	0x200012e4

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f874:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f878:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f87c:	681b      	ldr	r3, [r3, #0]
 801f87e:	1c98      	adds	r0, r3, #2
 801f880:	f107 0308 	add.w	r3, r7, #8
 801f884:	4a3e      	ldr	r2, [pc, #248]	; (801f980 <http_process_handler+0x454>)
 801f886:	493f      	ldr	r1, [pc, #252]	; (801f984 <http_process_handler+0x458>)
 801f888:	f7ff f9ef 	bl	801ec6a <mid>
			uri_name = uri_buf;
 801f88c:	f107 0308 	add.w	r3, r7, #8
 801f890:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f894:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f898:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	3301      	adds	r3, #1
 801f8a0:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f8a4:	4618      	mov	r0, r3
 801f8a6:	f7fe ff03 	bl	801e6b0 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f8aa:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f8ae:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f8b2:	681b      	ldr	r3, [r3, #0]
 801f8b4:	785b      	ldrb	r3, [r3, #1]
 801f8b6:	2b08      	cmp	r3, #8
 801f8b8:	d13c      	bne.n	801f934 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f8ba:	4b33      	ldr	r3, [pc, #204]	; (801f988 <http_process_handler+0x45c>)
 801f8bc:	681a      	ldr	r2, [r3, #0]
 801f8be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801f8c2:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801f8c6:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 801f8ca:	6809      	ldr	r1, [r1, #0]
 801f8cc:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f8d0:	f000 f988 	bl	801fbe4 <http_post_cgi_handler>
 801f8d4:	4603      	mov	r3, r0
 801f8d6:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f8da:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f8de:	2b00      	cmp	r3, #0
 801f8e0:	d01c      	beq.n	801f91c <http_process_handler+0x3f0>
 801f8e2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f8e6:	f240 72be 	movw	r2, #1982	; 0x7be
 801f8ea:	4293      	cmp	r3, r2
 801f8ec:	d816      	bhi.n	801f91c <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f8ee:	4b27      	ldr	r3, [pc, #156]	; (801f98c <http_process_handler+0x460>)
 801f8f0:	6819      	ldr	r1, [r3, #0]
 801f8f2:	4b25      	ldr	r3, [pc, #148]	; (801f988 <http_process_handler+0x45c>)
 801f8f4:	681a      	ldr	r2, [r3, #0]
 801f8f6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f8fa:	b29c      	uxth	r4, r3
 801f8fc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f900:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f904:	7818      	ldrb	r0, [r3, #0]
 801f906:	4623      	mov	r3, r4
 801f908:	f7ff fdc8 	bl	801f49c <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f90c:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f910:	2b02      	cmp	r3, #2
 801f912:	d11b      	bne.n	801f94c <http_process_handler+0x420>
 801f914:	4b1e      	ldr	r3, [pc, #120]	; (801f990 <http_process_handler+0x464>)
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	4798      	blx	r3
 801f91a:	e017      	b.n	801f94c <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f91c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f920:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f924:	7818      	ldrb	r0, [r3, #0]
 801f926:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f92a:	2200      	movs	r2, #0
 801f92c:	2108      	movs	r1, #8
 801f92e:	f7ff fbf1 	bl	801f114 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f932:	e020      	b.n	801f976 <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f934:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f938:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f93c:	7818      	ldrb	r0, [r3, #0]
 801f93e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f942:	2200      	movs	r2, #0
 801f944:	2100      	movs	r1, #0
 801f946:	f7ff fbe5 	bl	801f114 <send_http_response_header>
			break;
 801f94a:	e014      	b.n	801f976 <http_process_handler+0x44a>
 801f94c:	e013      	b.n	801f976 <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f94e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f952:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f956:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f95a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f95e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f962:	7818      	ldrb	r0, [r3, #0]
 801f964:	4613      	mov	r3, r2
 801f966:	2200      	movs	r2, #0
 801f968:	2100      	movs	r1, #0
 801f96a:	f7ff fbd3 	bl	801f114 <send_http_response_header>
			break;
 801f96e:	e002      	b.n	801f976 <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f970:	bf00      	nop
 801f972:	e000      	b.n	801f976 <http_process_handler+0x44a>
			break;
 801f974:	bf00      	nop
	}
}
 801f976:	f507 770a 	add.w	r7, r7, #552	; 0x228
 801f97a:	46bd      	mov	sp, r7
 801f97c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f980:	0803371c 	.word	0x0803371c
 801f984:	080336dc 	.word	0x080336dc
 801f988:	20001208 	.word	0x20001208
 801f98c:	200012d8 	.word	0x200012d8
 801f990:	20000120 	.word	0x20000120

0801f994 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f994:	b480      	push	{r7}
 801f996:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f998:	4b04      	ldr	r3, [pc, #16]	; (801f9ac <httpServer_time_handler+0x18>)
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	3301      	adds	r3, #1
 801f99e:	4a03      	ldr	r2, [pc, #12]	; (801f9ac <httpServer_time_handler+0x18>)
 801f9a0:	6013      	str	r3, [r2, #0]
}
 801f9a2:	bf00      	nop
 801f9a4:	46bd      	mov	sp, r7
 801f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9aa:	4770      	bx	lr
 801f9ac:	200012e0 	.word	0x200012e0

0801f9b0 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801f9b0:	b580      	push	{r7, lr}
 801f9b2:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801f9b4:	4b03      	ldr	r3, [pc, #12]	; (801f9c4 <get_httpServer_timecount+0x14>)
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	2001      	movs	r0, #1
 801f9ba:	4798      	blx	r3
	return httpServer_tick_1s;
 801f9bc:	4b02      	ldr	r3, [pc, #8]	; (801f9c8 <get_httpServer_timecount+0x18>)
 801f9be:	681b      	ldr	r3, [r3, #0]
}
 801f9c0:	4618      	mov	r0, r3
 801f9c2:	bd80      	pop	{r7, pc}
 801f9c4:	20000124 	.word	0x20000124
 801f9c8:	200012e0 	.word	0x200012e0

0801f9cc <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801f9cc:	b580      	push	{r7, lr}
 801f9ce:	b084      	sub	sp, #16
 801f9d0:	af00      	add	r7, sp, #0
 801f9d2:	6078      	str	r0, [r7, #4]
 801f9d4:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	d04e      	beq.n	801fa7a <reg_httpServer_webContent+0xae>
 801f9dc:	683b      	ldr	r3, [r7, #0]
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d04b      	beq.n	801fa7a <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801f9e2:	4b29      	ldr	r3, [pc, #164]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801f9e4:	881b      	ldrh	r3, [r3, #0]
 801f9e6:	2b03      	cmp	r3, #3
 801f9e8:	d849      	bhi.n	801fa7e <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801f9ea:	6878      	ldr	r0, [r7, #4]
 801f9ec:	f7f0 fc58 	bl	80102a0 <strlen>
 801f9f0:	4603      	mov	r3, r0
 801f9f2:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801f9f4:	6838      	ldr	r0, [r7, #0]
 801f9f6:	f7f0 fc53 	bl	80102a0 <strlen>
 801f9fa:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801f9fc:	4b22      	ldr	r3, [pc, #136]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801f9fe:	881b      	ldrh	r3, [r3, #0]
 801fa00:	461a      	mov	r2, r3
 801fa02:	4b21      	ldr	r3, [pc, #132]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801fa04:	881b      	ldrh	r3, [r3, #0]
 801fa06:	4618      	mov	r0, r3
 801fa08:	2332      	movs	r3, #50	; 0x32
 801fa0a:	fb02 f303 	mul.w	r3, r2, r3
 801fa0e:	4a1f      	ldr	r2, [pc, #124]	; (801fa8c <reg_httpServer_webContent+0xc0>)
 801fa10:	441a      	add	r2, r3
 801fa12:	491f      	ldr	r1, [pc, #124]	; (801fa90 <reg_httpServer_webContent+0xc4>)
 801fa14:	4603      	mov	r3, r0
 801fa16:	005b      	lsls	r3, r3, #1
 801fa18:	4403      	add	r3, r0
 801fa1a:	009b      	lsls	r3, r3, #2
 801fa1c:	440b      	add	r3, r1
 801fa1e:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801fa20:	4b19      	ldr	r3, [pc, #100]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801fa22:	881b      	ldrh	r3, [r3, #0]
 801fa24:	4619      	mov	r1, r3
 801fa26:	4a1a      	ldr	r2, [pc, #104]	; (801fa90 <reg_httpServer_webContent+0xc4>)
 801fa28:	460b      	mov	r3, r1
 801fa2a:	005b      	lsls	r3, r3, #1
 801fa2c:	440b      	add	r3, r1
 801fa2e:	009b      	lsls	r3, r3, #2
 801fa30:	4413      	add	r3, r2
 801fa32:	681b      	ldr	r3, [r3, #0]
 801fa34:	6879      	ldr	r1, [r7, #4]
 801fa36:	4618      	mov	r0, r3
 801fa38:	f00e fa25 	bl	802de86 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801fa3c:	4b12      	ldr	r3, [pc, #72]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801fa3e:	881b      	ldrh	r3, [r3, #0]
 801fa40:	4619      	mov	r1, r3
 801fa42:	4a13      	ldr	r2, [pc, #76]	; (801fa90 <reg_httpServer_webContent+0xc4>)
 801fa44:	460b      	mov	r3, r1
 801fa46:	005b      	lsls	r3, r3, #1
 801fa48:	440b      	add	r3, r1
 801fa4a:	009b      	lsls	r3, r3, #2
 801fa4c:	4413      	add	r3, r2
 801fa4e:	3304      	adds	r3, #4
 801fa50:	68ba      	ldr	r2, [r7, #8]
 801fa52:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801fa54:	4b0c      	ldr	r3, [pc, #48]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801fa56:	881b      	ldrh	r3, [r3, #0]
 801fa58:	4619      	mov	r1, r3
 801fa5a:	4a0d      	ldr	r2, [pc, #52]	; (801fa90 <reg_httpServer_webContent+0xc4>)
 801fa5c:	460b      	mov	r3, r1
 801fa5e:	005b      	lsls	r3, r3, #1
 801fa60:	440b      	add	r3, r1
 801fa62:	009b      	lsls	r3, r3, #2
 801fa64:	4413      	add	r3, r2
 801fa66:	3308      	adds	r3, #8
 801fa68:	683a      	ldr	r2, [r7, #0]
 801fa6a:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801fa6c:	4b06      	ldr	r3, [pc, #24]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801fa6e:	881b      	ldrh	r3, [r3, #0]
 801fa70:	3301      	adds	r3, #1
 801fa72:	b29a      	uxth	r2, r3
 801fa74:	4b04      	ldr	r3, [pc, #16]	; (801fa88 <reg_httpServer_webContent+0xbc>)
 801fa76:	801a      	strh	r2, [r3, #0]
 801fa78:	e002      	b.n	801fa80 <reg_httpServer_webContent+0xb4>
		return;
 801fa7a:	bf00      	nop
 801fa7c:	e000      	b.n	801fa80 <reg_httpServer_webContent+0xb4>
		return;
 801fa7e:	bf00      	nop
}
 801fa80:	3710      	adds	r7, #16
 801fa82:	46bd      	mov	sp, r7
 801fa84:	bd80      	pop	{r7, pc}
 801fa86:	bf00      	nop
 801fa88:	200012d4 	.word	0x200012d4
 801fa8c:	2000120c 	.word	0x2000120c
 801fa90:	20001504 	.word	0x20001504

0801fa94 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801fa94:	b580      	push	{r7, lr}
 801fa96:	b086      	sub	sp, #24
 801fa98:	af00      	add	r7, sp, #0
 801fa9a:	60f8      	str	r0, [r7, #12]
 801fa9c:	60b9      	str	r1, [r7, #8]
 801fa9e:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801faa0:	2300      	movs	r3, #0
 801faa2:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801faa4:	2300      	movs	r3, #0
 801faa6:	82fb      	strh	r3, [r7, #22]
 801faa8:	e022      	b.n	801faf0 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801faaa:	8afa      	ldrh	r2, [r7, #22]
 801faac:	4915      	ldr	r1, [pc, #84]	; (801fb04 <find_userReg_webContent+0x70>)
 801faae:	4613      	mov	r3, r2
 801fab0:	005b      	lsls	r3, r3, #1
 801fab2:	4413      	add	r3, r2
 801fab4:	009b      	lsls	r3, r3, #2
 801fab6:	440b      	add	r3, r1
 801fab8:	681b      	ldr	r3, [r3, #0]
 801faba:	4619      	mov	r1, r3
 801fabc:	68f8      	ldr	r0, [r7, #12]
 801fabe:	f7f0 fb8f 	bl	80101e0 <strcmp>
 801fac2:	4603      	mov	r3, r0
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	d110      	bne.n	801faea <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801fac8:	8afa      	ldrh	r2, [r7, #22]
 801faca:	490e      	ldr	r1, [pc, #56]	; (801fb04 <find_userReg_webContent+0x70>)
 801facc:	4613      	mov	r3, r2
 801face:	005b      	lsls	r3, r3, #1
 801fad0:	4413      	add	r3, r2
 801fad2:	009b      	lsls	r3, r3, #2
 801fad4:	440b      	add	r3, r1
 801fad6:	3304      	adds	r3, #4
 801fad8:	681a      	ldr	r2, [r3, #0]
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801fade:	68bb      	ldr	r3, [r7, #8]
 801fae0:	8afa      	ldrh	r2, [r7, #22]
 801fae2:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801fae4:	2301      	movs	r3, #1
 801fae6:	757b      	strb	r3, [r7, #21]
			break;
 801fae8:	e007      	b.n	801fafa <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801faea:	8afb      	ldrh	r3, [r7, #22]
 801faec:	3301      	adds	r3, #1
 801faee:	82fb      	strh	r3, [r7, #22]
 801faf0:	4b05      	ldr	r3, [pc, #20]	; (801fb08 <find_userReg_webContent+0x74>)
 801faf2:	881b      	ldrh	r3, [r3, #0]
 801faf4:	8afa      	ldrh	r2, [r7, #22]
 801faf6:	429a      	cmp	r2, r3
 801faf8:	d3d7      	bcc.n	801faaa <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801fafa:	7d7b      	ldrb	r3, [r7, #21]
}
 801fafc:	4618      	mov	r0, r3
 801fafe:	3718      	adds	r7, #24
 801fb00:	46bd      	mov	sp, r7
 801fb02:	bd80      	pop	{r7, pc}
 801fb04:	20001504 	.word	0x20001504
 801fb08:	200012d4 	.word	0x200012d4

0801fb0c <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801fb0c:	b580      	push	{r7, lr}
 801fb0e:	b086      	sub	sp, #24
 801fb10:	af00      	add	r7, sp, #0
 801fb12:	60b9      	str	r1, [r7, #8]
 801fb14:	607a      	str	r2, [r7, #4]
 801fb16:	461a      	mov	r2, r3
 801fb18:	4603      	mov	r3, r0
 801fb1a:	81fb      	strh	r3, [r7, #14]
 801fb1c:	4613      	mov	r3, r2
 801fb1e:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801fb20:	2300      	movs	r3, #0
 801fb22:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801fb24:	4b16      	ldr	r3, [pc, #88]	; (801fb80 <read_userReg_webContent+0x74>)
 801fb26:	881b      	ldrh	r3, [r3, #0]
 801fb28:	89fa      	ldrh	r2, [r7, #14]
 801fb2a:	429a      	cmp	r2, r3
 801fb2c:	d901      	bls.n	801fb32 <read_userReg_webContent+0x26>
 801fb2e:	2300      	movs	r3, #0
 801fb30:	e021      	b.n	801fb76 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801fb32:	89fa      	ldrh	r2, [r7, #14]
 801fb34:	4913      	ldr	r1, [pc, #76]	; (801fb84 <read_userReg_webContent+0x78>)
 801fb36:	4613      	mov	r3, r2
 801fb38:	005b      	lsls	r3, r3, #1
 801fb3a:	4413      	add	r3, r2
 801fb3c:	009b      	lsls	r3, r3, #2
 801fb3e:	440b      	add	r3, r1
 801fb40:	3308      	adds	r3, #8
 801fb42:	681b      	ldr	r3, [r3, #0]
 801fb44:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	2b00      	cmp	r3, #0
 801fb4a:	d003      	beq.n	801fb54 <read_userReg_webContent+0x48>
 801fb4c:	697a      	ldr	r2, [r7, #20]
 801fb4e:	687b      	ldr	r3, [r7, #4]
 801fb50:	4413      	add	r3, r2
 801fb52:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801fb54:	89bb      	ldrh	r3, [r7, #12]
 801fb56:	461a      	mov	r2, r3
 801fb58:	6979      	ldr	r1, [r7, #20]
 801fb5a:	68b8      	ldr	r0, [r7, #8]
 801fb5c:	f00e f820 	bl	802dba0 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801fb60:	89bb      	ldrh	r3, [r7, #12]
 801fb62:	68ba      	ldr	r2, [r7, #8]
 801fb64:	4413      	add	r3, r2
 801fb66:	2200      	movs	r2, #0
 801fb68:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801fb6a:	68b8      	ldr	r0, [r7, #8]
 801fb6c:	f7f0 fb98 	bl	80102a0 <strlen>
 801fb70:	4603      	mov	r3, r0
 801fb72:	827b      	strh	r3, [r7, #18]
	return ret;
 801fb74:	8a7b      	ldrh	r3, [r7, #18]
}
 801fb76:	4618      	mov	r0, r3
 801fb78:	3718      	adds	r7, #24
 801fb7a:	46bd      	mov	sp, r7
 801fb7c:	bd80      	pop	{r7, pc}
 801fb7e:	bf00      	nop
 801fb80:	200012d4 	.word	0x200012d4
 801fb84:	20001504 	.word	0x20001504

0801fb88 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801fb88:	b580      	push	{r7, lr}
 801fb8a:	b086      	sub	sp, #24
 801fb8c:	af00      	add	r7, sp, #0
 801fb8e:	60f8      	str	r0, [r7, #12]
 801fb90:	60b9      	str	r1, [r7, #8]
 801fb92:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801fb94:	2301      	movs	r3, #1
 801fb96:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801fb98:	2300      	movs	r3, #0
 801fb9a:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801fb9c:	4b0f      	ldr	r3, [pc, #60]	; (801fbdc <http_get_cgi_handler+0x54>)
 801fb9e:	681b      	ldr	r3, [r3, #0]
 801fba0:	f107 0214 	add.w	r2, r7, #20
 801fba4:	68b9      	ldr	r1, [r7, #8]
 801fba6:	68f8      	ldr	r0, [r7, #12]
 801fba8:	4798      	blx	r3
 801fbaa:	4603      	mov	r3, r0
 801fbac:	2b00      	cmp	r3, #0
 801fbae:	d108      	bne.n	801fbc2 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fbb0:	490b      	ldr	r1, [pc, #44]	; (801fbe0 <http_get_cgi_handler+0x58>)
 801fbb2:	68f8      	ldr	r0, [r7, #12]
 801fbb4:	f7f0 fb14 	bl	80101e0 <strcmp>
 801fbb8:	4603      	mov	r3, r0
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d001      	beq.n	801fbc2 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801fbbe:	2300      	movs	r3, #0
 801fbc0:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fbc2:	7dfb      	ldrb	r3, [r7, #23]
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	d003      	beq.n	801fbd0 <http_get_cgi_handler+0x48>
 801fbc8:	8abb      	ldrh	r3, [r7, #20]
 801fbca:	461a      	mov	r2, r3
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	601a      	str	r2, [r3, #0]
	return ret;
 801fbd0:	7dfb      	ldrb	r3, [r7, #23]
}
 801fbd2:	4618      	mov	r0, r3
 801fbd4:	3718      	adds	r7, #24
 801fbd6:	46bd      	mov	sp, r7
 801fbd8:	bd80      	pop	{r7, pc}
 801fbda:	bf00      	nop
 801fbdc:	20001538 	.word	0x20001538
 801fbe0:	080337d4 	.word	0x080337d4

0801fbe4 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801fbe4:	b590      	push	{r4, r7, lr}
 801fbe6:	b087      	sub	sp, #28
 801fbe8:	af00      	add	r7, sp, #0
 801fbea:	60f8      	str	r0, [r7, #12]
 801fbec:	60b9      	str	r1, [r7, #8]
 801fbee:	607a      	str	r2, [r7, #4]
 801fbf0:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801fbf2:	2301      	movs	r3, #1
 801fbf4:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801fbf6:	2300      	movs	r3, #0
 801fbf8:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801fbfa:	2300      	movs	r3, #0
 801fbfc:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801fbfe:	4b20      	ldr	r3, [pc, #128]	; (801fc80 <http_post_cgi_handler+0x9c>)
 801fc00:	681c      	ldr	r4, [r3, #0]
 801fc02:	68bb      	ldr	r3, [r7, #8]
 801fc04:	1c99      	adds	r1, r3, #2
 801fc06:	f107 0314 	add.w	r3, r7, #20
 801fc0a:	687a      	ldr	r2, [r7, #4]
 801fc0c:	68f8      	ldr	r0, [r7, #12]
 801fc0e:	47a0      	blx	r4
 801fc10:	4603      	mov	r3, r0
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d127      	bne.n	801fc66 <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fc16:	491b      	ldr	r1, [pc, #108]	; (801fc84 <http_post_cgi_handler+0xa0>)
 801fc18:	68f8      	ldr	r0, [r7, #12]
 801fc1a:	f7f0 fae1 	bl	80101e0 <strcmp>
 801fc1e:	4603      	mov	r3, r0
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	d10b      	bne.n	801fc3c <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801fc24:	2301      	movs	r3, #1
 801fc26:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801fc28:	7dbb      	ldrb	r3, [r7, #22]
 801fc2a:	461a      	mov	r2, r3
 801fc2c:	4916      	ldr	r1, [pc, #88]	; (801fc88 <http_post_cgi_handler+0xa4>)
 801fc2e:	6878      	ldr	r0, [r7, #4]
 801fc30:	f00d fe0c 	bl	802d84c <siprintf>
 801fc34:	4603      	mov	r3, r0
 801fc36:	b29b      	uxth	r3, r3
 801fc38:	82bb      	strh	r3, [r7, #20]
 801fc3a:	e014      	b.n	801fc66 <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801fc3c:	4913      	ldr	r1, [pc, #76]	; (801fc8c <http_post_cgi_handler+0xa8>)
 801fc3e:	68f8      	ldr	r0, [r7, #12]
 801fc40:	f7f0 face 	bl	80101e0 <strcmp>
 801fc44:	4603      	mov	r3, r0
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d10b      	bne.n	801fc62 <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801fc4a:	2301      	movs	r3, #1
 801fc4c:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801fc4e:	7dbb      	ldrb	r3, [r7, #22]
 801fc50:	461a      	mov	r2, r3
 801fc52:	490d      	ldr	r1, [pc, #52]	; (801fc88 <http_post_cgi_handler+0xa4>)
 801fc54:	6878      	ldr	r0, [r7, #4]
 801fc56:	f00d fdf9 	bl	802d84c <siprintf>
 801fc5a:	4603      	mov	r3, r0
 801fc5c:	b29b      	uxth	r3, r3
 801fc5e:	82bb      	strh	r3, [r7, #20]
 801fc60:	e001      	b.n	801fc66 <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801fc62:	2300      	movs	r3, #0
 801fc64:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fc66:	7dfb      	ldrb	r3, [r7, #23]
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d003      	beq.n	801fc74 <http_post_cgi_handler+0x90>
 801fc6c:	8abb      	ldrh	r3, [r7, #20]
 801fc6e:	461a      	mov	r2, r3
 801fc70:	683b      	ldr	r3, [r7, #0]
 801fc72:	601a      	str	r2, [r3, #0]
	return ret;
 801fc74:	7dfb      	ldrb	r3, [r7, #23]
}
 801fc76:	4618      	mov	r0, r3
 801fc78:	371c      	adds	r7, #28
 801fc7a:	46bd      	mov	sp, r7
 801fc7c:	bd90      	pop	{r4, r7, pc}
 801fc7e:	bf00      	nop
 801fc80:	20001534 	.word	0x20001534
 801fc84:	080337d4 	.word	0x080337d4
 801fc88:	080337e0 	.word	0x080337e0
 801fc8c:	080337e4 	.word	0x080337e4

0801fc90 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801fc90:	b480      	push	{r7}
 801fc92:	b085      	sub	sp, #20
 801fc94:	af00      	add	r7, sp, #0
 801fc96:	60f8      	str	r0, [r7, #12]
 801fc98:	60b9      	str	r1, [r7, #8]
 801fc9a:	607a      	str	r2, [r7, #4]

	;
}
 801fc9c:	bf00      	nop
 801fc9e:	4618      	mov	r0, r3
 801fca0:	3714      	adds	r7, #20
 801fca2:	46bd      	mov	sp, r7
 801fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fca8:	4770      	bx	lr

0801fcaa <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801fcaa:	b480      	push	{r7}
 801fcac:	b085      	sub	sp, #20
 801fcae:	af00      	add	r7, sp, #0
 801fcb0:	60f8      	str	r0, [r7, #12]
 801fcb2:	60b9      	str	r1, [r7, #8]
 801fcb4:	607a      	str	r2, [r7, #4]
 801fcb6:	603b      	str	r3, [r7, #0]
	;
}
 801fcb8:	bf00      	nop
 801fcba:	4618      	mov	r0, r3
 801fcbc:	3714      	adds	r7, #20
 801fcbe:	46bd      	mov	sp, r7
 801fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcc4:	4770      	bx	lr
	...

0801fcc8 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801fcc8:	b480      	push	{r7}
 801fcca:	b083      	sub	sp, #12
 801fccc:	af00      	add	r7, sp, #0
 801fcce:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801fcd0:	4b07      	ldr	r3, [pc, #28]	; (801fcf0 <reg_external_post_cgi_processor+0x28>)
 801fcd2:	4a08      	ldr	r2, [pc, #32]	; (801fcf4 <reg_external_post_cgi_processor+0x2c>)
 801fcd4:	601a      	str	r2, [r3, #0]
	if (function) {
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d002      	beq.n	801fce2 <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801fcdc:	4a04      	ldr	r2, [pc, #16]	; (801fcf0 <reg_external_post_cgi_processor+0x28>)
 801fcde:	687b      	ldr	r3, [r7, #4]
 801fce0:	6013      	str	r3, [r2, #0]
	}

}
 801fce2:	bf00      	nop
 801fce4:	370c      	adds	r7, #12
 801fce6:	46bd      	mov	sp, r7
 801fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcec:	4770      	bx	lr
 801fcee:	bf00      	nop
 801fcf0:	20001534 	.word	0x20001534
 801fcf4:	0801fcab 	.word	0x0801fcab

0801fcf8 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801fcf8:	b480      	push	{r7}
 801fcfa:	b083      	sub	sp, #12
 801fcfc:	af00      	add	r7, sp, #0
 801fcfe:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801fd00:	4b07      	ldr	r3, [pc, #28]	; (801fd20 <reg_external_get_cgi_processor+0x28>)
 801fd02:	4a08      	ldr	r2, [pc, #32]	; (801fd24 <reg_external_get_cgi_processor+0x2c>)
 801fd04:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	2b00      	cmp	r3, #0
 801fd0a:	d002      	beq.n	801fd12 <reg_external_get_cgi_processor+0x1a>
 801fd0c:	4a04      	ldr	r2, [pc, #16]	; (801fd20 <reg_external_get_cgi_processor+0x28>)
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	6013      	str	r3, [r2, #0]

}
 801fd12:	bf00      	nop
 801fd14:	370c      	adds	r7, #12
 801fd16:	46bd      	mov	sp, r7
 801fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd1c:	4770      	bx	lr
 801fd1e:	bf00      	nop
 801fd20:	20001538 	.word	0x20001538
 801fd24:	0801fc91 	.word	0x0801fc91

0801fd28 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801fd28:	b480      	push	{r7}
 801fd2a:	af00      	add	r7, sp, #0
 801fd2c:	bf00      	nop
 801fd2e:	46bd      	mov	sp, r7
 801fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd34:	4770      	bx	lr

0801fd36 <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801fd36:	b480      	push	{r7}
 801fd38:	b083      	sub	sp, #12
 801fd3a:	af00      	add	r7, sp, #0
 801fd3c:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	f242 7210 	movw	r2, #10000	; 0x2710
 801fd44:	fb02 f303 	mul.w	r3, r2, r3
 801fd48:	607b      	str	r3, [r7, #4]

	while (sec){
 801fd4a:	e002      	b.n	801fd52 <proto_delay_func+0x1c>
		sec--;
 801fd4c:	687b      	ldr	r3, [r7, #4]
 801fd4e:	3b01      	subs	r3, #1
 801fd50:	607b      	str	r3, [r7, #4]
	while (sec){
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	2b00      	cmp	r3, #0
 801fd56:	d1f9      	bne.n	801fd4c <proto_delay_func+0x16>
	}

}
 801fd58:	bf00      	nop
 801fd5a:	bf00      	nop
 801fd5c:	370c      	adds	r7, #12
 801fd5e:	46bd      	mov	sp, r7
 801fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd64:	4770      	bx	lr
	...

0801fd68 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801fd68:	b480      	push	{r7}
 801fd6a:	b083      	sub	sp, #12
 801fd6c:	af00      	add	r7, sp, #0
 801fd6e:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801fd70:	4a04      	ldr	r2, [pc, #16]	; (801fd84 <w5500_lib_init+0x1c>)
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	6013      	str	r3, [r2, #0]
}
 801fd76:	bf00      	nop
 801fd78:	370c      	adds	r7, #12
 801fd7a:	46bd      	mov	sp, r7
 801fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd80:	4770      	bx	lr
 801fd82:	bf00      	nop
 801fd84:	20001540 	.word	0x20001540

0801fd88 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b082      	sub	sp, #8
 801fd8c:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801fd8e:	2303      	movs	r3, #3
 801fd90:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801fd92:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801fd96:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801fd98:	4b07      	ldr	r3, [pc, #28]	; (801fdb8 <network_init+0x30>)
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	4619      	mov	r1, r3
 801fd9e:	2000      	movs	r0, #0
 801fda0:	f7fa fa36 	bl	801a210 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801fda4:	1d3b      	adds	r3, r7, #4
 801fda6:	4619      	mov	r1, r3
 801fda8:	2004      	movs	r0, #4
 801fdaa:	f7fa fa31 	bl	801a210 <ctlnetwork>
}
 801fdae:	bf00      	nop
 801fdb0:	3708      	adds	r7, #8
 801fdb2:	46bd      	mov	sp, r7
 801fdb4:	bd80      	pop	{r7, pc}
 801fdb6:	bf00      	nop
 801fdb8:	20001540 	.word	0x20001540

0801fdbc <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801fdbc:	b480      	push	{r7}
 801fdbe:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801fdc0:	4b03      	ldr	r3, [pc, #12]	; (801fdd0 <Callback_IPConflict+0x14>)
 801fdc2:	2200      	movs	r2, #0
 801fdc4:	701a      	strb	r2, [r3, #0]
}
 801fdc6:	bf00      	nop
 801fdc8:	46bd      	mov	sp, r7
 801fdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdce:	4770      	bx	lr
 801fdd0:	2000153c 	.word	0x2000153c

0801fdd4 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801fdd4:	b580      	push	{r7, lr}
 801fdd6:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801fdd8:	4b11      	ldr	r3, [pc, #68]	; (801fe20 <Callback_IPAssigned+0x4c>)
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	3306      	adds	r3, #6
 801fdde:	4618      	mov	r0, r3
 801fde0:	f7fc f9ac 	bl	801c13c <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801fde4:	4b0e      	ldr	r3, [pc, #56]	; (801fe20 <Callback_IPAssigned+0x4c>)
 801fde6:	681b      	ldr	r3, [r3, #0]
 801fde8:	330e      	adds	r3, #14
 801fdea:	4618      	mov	r0, r3
 801fdec:	f7fc f9c6 	bl	801c17c <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801fdf0:	4b0b      	ldr	r3, [pc, #44]	; (801fe20 <Callback_IPAssigned+0x4c>)
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	330a      	adds	r3, #10
 801fdf6:	4618      	mov	r0, r3
 801fdf8:	f7fc f9e0 	bl	801c1bc <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801fdfc:	4b08      	ldr	r3, [pc, #32]	; (801fe20 <Callback_IPAssigned+0x4c>)
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	3312      	adds	r3, #18
 801fe02:	4618      	mov	r0, r3
 801fe04:	f7fc f9fa 	bl	801c1fc <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801fe08:	4b05      	ldr	r3, [pc, #20]	; (801fe20 <Callback_IPAssigned+0x4c>)
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	2202      	movs	r2, #2
 801fe0e:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801fe10:	f7ff ffba 	bl	801fd88 <network_init>

   ip_dhcp_assigned = true;
 801fe14:	4b03      	ldr	r3, [pc, #12]	; (801fe24 <Callback_IPAssigned+0x50>)
 801fe16:	2201      	movs	r2, #1
 801fe18:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801fe1a:	bf00      	nop
 801fe1c:	bd80      	pop	{r7, pc}
 801fe1e:	bf00      	nop
 801fe20:	20001540 	.word	0x20001540
 801fe24:	2000153c 	.word	0x2000153c

0801fe28 <dhcp_rutine>:

void dhcp_rutine(void){
 801fe28:	b580      	push	{r7, lr}
 801fe2a:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801fe2c:	f7fb ff30 	bl	801bc90 <DHCP_run>
 801fe30:	4603      	mov	r3, r0
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d004      	beq.n	801fe40 <dhcp_rutine+0x18>
 801fe36:	2b00      	cmp	r3, #0
 801fe38:	db09      	blt.n	801fe4e <dhcp_rutine+0x26>
 801fe3a:	3b02      	subs	r3, #2
 801fe3c:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801fe3e:	e006      	b.n	801fe4e <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801fe40:	4b04      	ldr	r3, [pc, #16]	; (801fe54 <dhcp_rutine+0x2c>)
 801fe42:	781b      	ldrb	r3, [r3, #0]
 801fe44:	3301      	adds	r3, #1
 801fe46:	b2da      	uxtb	r2, r3
 801fe48:	4b02      	ldr	r3, [pc, #8]	; (801fe54 <dhcp_rutine+0x2c>)
 801fe4a:	701a      	strb	r2, [r3, #0]
				break;
 801fe4c:	e000      	b.n	801fe50 <dhcp_rutine+0x28>
				break;
 801fe4e:	bf00      	nop
			}
}
 801fe50:	bf00      	nop
 801fe52:	bd80      	pop	{r7, pc}
 801fe54:	20001544 	.word	0x20001544

0801fe58 <link_status>:

int link_status(void){
 801fe58:	b580      	push	{r7, lr}
 801fe5a:	b082      	sub	sp, #8
 801fe5c:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801fe5e:	1dfb      	adds	r3, r7, #7
 801fe60:	4619      	mov	r1, r3
 801fe62:	200f      	movs	r0, #15
 801fe64:	f7fa f8f2 	bl	801a04c <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801fe68:	79fb      	ldrb	r3, [r7, #7]
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d102      	bne.n	801fe74 <link_status+0x1c>
 801fe6e:	4b04      	ldr	r3, [pc, #16]	; (801fe80 <link_status+0x28>)
 801fe70:	2200      	movs	r2, #0
 801fe72:	701a      	strb	r2, [r3, #0]
	return temp;
 801fe74:	79fb      	ldrb	r3, [r7, #7]
}
 801fe76:	4618      	mov	r0, r3
 801fe78:	3708      	adds	r7, #8
 801fe7a:	46bd      	mov	sp, r7
 801fe7c:	bd80      	pop	{r7, pc}
 801fe7e:	bf00      	nop
 801fe80:	2000153c 	.word	0x2000153c

0801fe84 <link_duplex>:

int link_duplex(void){
 801fe84:	b580      	push	{r7, lr}
 801fe86:	b082      	sub	sp, #8
 801fe88:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fe8a:	1d3b      	adds	r3, r7, #4
 801fe8c:	4618      	mov	r0, r3
 801fe8e:	f7fa fc6f 	bl	801a770 <wizphy_getphystat>
	return phy_status.duplex;
 801fe92:	79fb      	ldrb	r3, [r7, #7]
}
 801fe94:	4618      	mov	r0, r3
 801fe96:	3708      	adds	r7, #8
 801fe98:	46bd      	mov	sp, r7
 801fe9a:	bd80      	pop	{r7, pc}

0801fe9c <link_speed>:

int link_speed(void){
 801fe9c:	b580      	push	{r7, lr}
 801fe9e:	b082      	sub	sp, #8
 801fea0:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fea2:	1d3b      	adds	r3, r7, #4
 801fea4:	4618      	mov	r0, r3
 801fea6:	f7fa fc63 	bl	801a770 <wizphy_getphystat>
	return phy_status.speed;
 801feaa:	79bb      	ldrb	r3, [r7, #6]
}
 801feac:	4618      	mov	r0, r3
 801feae:	3708      	adds	r7, #8
 801feb0:	46bd      	mov	sp, r7
 801feb2:	bd80      	pop	{r7, pc}

0801feb4 <assigned_ip>:

int assigned_ip(void){
 801feb4:	b480      	push	{r7}
 801feb6:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801feb8:	4b03      	ldr	r3, [pc, #12]	; (801fec8 <assigned_ip+0x14>)
 801feba:	781b      	ldrb	r3, [r3, #0]
}
 801febc:	4618      	mov	r0, r3
 801febe:	46bd      	mov	sp, r7
 801fec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fec4:	4770      	bx	lr
 801fec6:	bf00      	nop
 801fec8:	2000153c 	.word	0x2000153c

0801fecc <set_ip_aasigned>:

void set_ip_aasigned(void){
 801fecc:	b480      	push	{r7}
 801fece:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801fed0:	4b03      	ldr	r3, [pc, #12]	; (801fee0 <set_ip_aasigned+0x14>)
 801fed2:	2201      	movs	r2, #1
 801fed4:	701a      	strb	r2, [r3, #0]
}
 801fed6:	bf00      	nop
 801fed8:	46bd      	mov	sp, r7
 801feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fede:	4770      	bx	lr
 801fee0:	2000153c 	.word	0x2000153c

0801fee4 <w5500_init>:

int w5500_init(void)
{
 801fee4:	b590      	push	{r4, r7, lr}
 801fee6:	b085      	sub	sp, #20
 801fee8:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801feea:	4b18      	ldr	r3, [pc, #96]	; (801ff4c <w5500_init+0x68>)
 801feec:	463c      	mov	r4, r7
 801feee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fef0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801fef4:	4b16      	ldr	r3, [pc, #88]	; (801ff50 <w5500_init+0x6c>)
 801fef6:	681b      	ldr	r3, [r3, #0]
 801fef8:	4798      	blx	r3
  delay_ms(delay0_5s);
 801fefa:	4b16      	ldr	r3, [pc, #88]	; (801ff54 <w5500_init+0x70>)
 801fefc:	681b      	ldr	r3, [r3, #0]
 801fefe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801ff02:	4798      	blx	r3
  ResetOFF();
 801ff04:	4b14      	ldr	r3, [pc, #80]	; (801ff58 <w5500_init+0x74>)
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	4798      	blx	r3
  delay_ms(delay3s);
 801ff0a:	4b12      	ldr	r3, [pc, #72]	; (801ff54 <w5500_init+0x70>)
 801ff0c:	681b      	ldr	r3, [r3, #0]
 801ff0e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801ff12:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801ff14:	463b      	mov	r3, r7
 801ff16:	4619      	mov	r1, r3
 801ff18:	2001      	movs	r0, #1
 801ff1a:	f7fa f897 	bl	801a04c <ctlwizchip>
 801ff1e:	4603      	mov	r3, r0
 801ff20:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff24:	d102      	bne.n	801ff2c <w5500_init+0x48>
  {
	  return -1;
 801ff26:	f04f 33ff 	mov.w	r3, #4294967295
 801ff2a:	e00b      	b.n	801ff44 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801ff2c:	f7ff ff94 	bl	801fe58 <link_status>
 801ff30:	4603      	mov	r3, r0
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d102      	bne.n	801ff3c <w5500_init+0x58>
	   return -1;
 801ff36:	f04f 33ff 	mov.w	r3, #4294967295
 801ff3a:	e003      	b.n	801ff44 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801ff3c:	4b07      	ldr	r3, [pc, #28]	; (801ff5c <w5500_init+0x78>)
 801ff3e:	2200      	movs	r2, #0
 801ff40:	701a      	strb	r2, [r3, #0]
  return 0;
 801ff42:	2300      	movs	r3, #0
}
 801ff44:	4618      	mov	r0, r3
 801ff46:	3714      	adds	r7, #20
 801ff48:	46bd      	mov	sp, r7
 801ff4a:	bd90      	pop	{r4, r7, pc}
 801ff4c:	080337f8 	.word	0x080337f8
 801ff50:	2000154c 	.word	0x2000154c
 801ff54:	20001548 	.word	0x20001548
 801ff58:	20001550 	.word	0x20001550
 801ff5c:	2000153c 	.word	0x2000153c

0801ff60 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801ff60:	b480      	push	{r7}
 801ff62:	b083      	sub	sp, #12
 801ff64:	af00      	add	r7, sp, #0
 801ff66:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801ff68:	4b07      	ldr	r3, [pc, #28]	; (801ff88 <w5500_delay_cb+0x28>)
 801ff6a:	4a08      	ldr	r2, [pc, #32]	; (801ff8c <w5500_delay_cb+0x2c>)
 801ff6c:	601a      	str	r2, [r3, #0]

	if (function){
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	2b00      	cmp	r3, #0
 801ff72:	d002      	beq.n	801ff7a <w5500_delay_cb+0x1a>
		delay_ms = function;
 801ff74:	4a04      	ldr	r2, [pc, #16]	; (801ff88 <w5500_delay_cb+0x28>)
 801ff76:	687b      	ldr	r3, [r7, #4]
 801ff78:	6013      	str	r3, [r2, #0]
	}
}
 801ff7a:	bf00      	nop
 801ff7c:	370c      	adds	r7, #12
 801ff7e:	46bd      	mov	sp, r7
 801ff80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff84:	4770      	bx	lr
 801ff86:	bf00      	nop
 801ff88:	20001548 	.word	0x20001548
 801ff8c:	0801fd37 	.word	0x0801fd37

0801ff90 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801ff90:	b480      	push	{r7}
 801ff92:	b083      	sub	sp, #12
 801ff94:	af00      	add	r7, sp, #0
 801ff96:	6078      	str	r0, [r7, #4]
 801ff98:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801ff9a:	4b0c      	ldr	r3, [pc, #48]	; (801ffcc <w5500_reset_cb+0x3c>)
 801ff9c:	4a0c      	ldr	r2, [pc, #48]	; (801ffd0 <w5500_reset_cb+0x40>)
 801ff9e:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801ffa0:	4b0c      	ldr	r3, [pc, #48]	; (801ffd4 <w5500_reset_cb+0x44>)
 801ffa2:	4a0b      	ldr	r2, [pc, #44]	; (801ffd0 <w5500_reset_cb+0x40>)
 801ffa4:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d002      	beq.n	801ffb2 <w5500_reset_cb+0x22>
 801ffac:	4a07      	ldr	r2, [pc, #28]	; (801ffcc <w5500_reset_cb+0x3c>)
 801ffae:	687b      	ldr	r3, [r7, #4]
 801ffb0:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 801ffb2:	683b      	ldr	r3, [r7, #0]
 801ffb4:	2b00      	cmp	r3, #0
 801ffb6:	d002      	beq.n	801ffbe <w5500_reset_cb+0x2e>
 801ffb8:	4a06      	ldr	r2, [pc, #24]	; (801ffd4 <w5500_reset_cb+0x44>)
 801ffba:	683b      	ldr	r3, [r7, #0]
 801ffbc:	6013      	str	r3, [r2, #0]
}
 801ffbe:	bf00      	nop
 801ffc0:	370c      	adds	r7, #12
 801ffc2:	46bd      	mov	sp, r7
 801ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffc8:	4770      	bx	lr
 801ffca:	bf00      	nop
 801ffcc:	2000154c 	.word	0x2000154c
 801ffd0:	0801fd29 	.word	0x0801fd29
 801ffd4:	20001550 	.word	0x20001550

0801ffd8 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 801ffd8:	b580      	push	{r7, lr}
 801ffda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 801ffdc:	2200      	movs	r2, #0
 801ffde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801ffe2:	4802      	ldr	r0, [pc, #8]	; (801ffec <Eth_reset_on+0x14>)
 801ffe4:	f7f5 ff52 	bl	8015e8c <HAL_GPIO_WritePin>
}
 801ffe8:	bf00      	nop
 801ffea:	bd80      	pop	{r7, pc}
 801ffec:	40020000 	.word	0x40020000

0801fff0 <Eth_reset_off>:

void Eth_reset_off(void){
 801fff0:	b580      	push	{r7, lr}
 801fff2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 801fff4:	2201      	movs	r2, #1
 801fff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fffa:	4802      	ldr	r0, [pc, #8]	; (8020004 <Eth_reset_off+0x14>)
 801fffc:	f7f5 ff46 	bl	8015e8c <HAL_GPIO_WritePin>
}
 8020000:	bf00      	nop
 8020002:	bd80      	pop	{r7, pc}
 8020004:	40020000 	.word	0x40020000

08020008 <Eth_spi_select>:

void Eth_spi_select(void){
 8020008:	b580      	push	{r7, lr}
 802000a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 802000c:	2200      	movs	r2, #0
 802000e:	2140      	movs	r1, #64	; 0x40
 8020010:	4802      	ldr	r0, [pc, #8]	; (802001c <Eth_spi_select+0x14>)
 8020012:	f7f5 ff3b 	bl	8015e8c <HAL_GPIO_WritePin>
}
 8020016:	bf00      	nop
 8020018:	bd80      	pop	{r7, pc}
 802001a:	bf00      	nop
 802001c:	40020400 	.word	0x40020400

08020020 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 8020020:	b580      	push	{r7, lr}
 8020022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 8020024:	2201      	movs	r2, #1
 8020026:	2140      	movs	r1, #64	; 0x40
 8020028:	4802      	ldr	r0, [pc, #8]	; (8020034 <Eth_spi_deselect+0x14>)
 802002a:	f7f5 ff2f 	bl	8015e8c <HAL_GPIO_WritePin>
}
 802002e:	bf00      	nop
 8020030:	bd80      	pop	{r7, pc}
 8020032:	bf00      	nop
 8020034:	40020400 	.word	0x40020400

08020038 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 8020038:	b084      	sub	sp, #16
 802003a:	b580      	push	{r7, lr}
 802003c:	af00      	add	r7, sp, #0
 802003e:	f107 0c08 	add.w	ip, r7, #8
 8020042:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 8020046:	4b07      	ldr	r3, [pc, #28]	; (8020064 <Reg_eth_spi+0x2c>)
 8020048:	4618      	mov	r0, r3
 802004a:	f107 0308 	add.w	r3, r7, #8
 802004e:	2258      	movs	r2, #88	; 0x58
 8020050:	4619      	mov	r1, r3
 8020052:	f00d ff20 	bl	802de96 <memcpy>
}
 8020056:	bf00      	nop
 8020058:	46bd      	mov	sp, r7
 802005a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802005e:	b004      	add	sp, #16
 8020060:	4770      	bx	lr
 8020062:	bf00      	nop
 8020064:	20001554 	.word	0x20001554

08020068 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 8020068:	b580      	push	{r7, lr}
 802006a:	b082      	sub	sp, #8
 802006c:	af00      	add	r7, sp, #0
 802006e:	4603      	mov	r3, r0
 8020070:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 8020072:	1df9      	adds	r1, r7, #7
 8020074:	f241 3388 	movw	r3, #5000	; 0x1388
 8020078:	2201      	movs	r2, #1
 802007a:	4803      	ldr	r0, [pc, #12]	; (8020088 <Eth_spi_send_byte+0x20>)
 802007c:	f7f6 fcc5 	bl	8016a0a <HAL_SPI_Transmit>
}
 8020080:	bf00      	nop
 8020082:	3708      	adds	r7, #8
 8020084:	46bd      	mov	sp, r7
 8020086:	bd80      	pop	{r7, pc}
 8020088:	20001554 	.word	0x20001554

0802008c <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 802008c:	b580      	push	{r7, lr}
 802008e:	b082      	sub	sp, #8
 8020090:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 8020092:	1df9      	adds	r1, r7, #7
 8020094:	f241 3388 	movw	r3, #5000	; 0x1388
 8020098:	2201      	movs	r2, #1
 802009a:	4804      	ldr	r0, [pc, #16]	; (80200ac <Eth_spi_resv_byte+0x20>)
 802009c:	f7f6 fdf8 	bl	8016c90 <HAL_SPI_Receive>
	return byte;
 80200a0:	79fb      	ldrb	r3, [r7, #7]
}
 80200a2:	4618      	mov	r0, r3
 80200a4:	3708      	adds	r7, #8
 80200a6:	46bd      	mov	sp, r7
 80200a8:	bd80      	pop	{r7, pc}
 80200aa:	bf00      	nop
 80200ac:	20001554 	.word	0x20001554

080200b0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 80200b0:	b480      	push	{r7}
 80200b2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 80200b4:	bf00      	nop
 80200b6:	46bd      	mov	sp, r7
 80200b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200bc:	4770      	bx	lr
	...

080200c0 <__NVIC_SetPriority>:
{
 80200c0:	b480      	push	{r7}
 80200c2:	b083      	sub	sp, #12
 80200c4:	af00      	add	r7, sp, #0
 80200c6:	4603      	mov	r3, r0
 80200c8:	6039      	str	r1, [r7, #0]
 80200ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80200cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80200d0:	2b00      	cmp	r3, #0
 80200d2:	db0a      	blt.n	80200ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80200d4:	683b      	ldr	r3, [r7, #0]
 80200d6:	b2da      	uxtb	r2, r3
 80200d8:	490c      	ldr	r1, [pc, #48]	; (802010c <__NVIC_SetPriority+0x4c>)
 80200da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80200de:	0112      	lsls	r2, r2, #4
 80200e0:	b2d2      	uxtb	r2, r2
 80200e2:	440b      	add	r3, r1
 80200e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80200e8:	e00a      	b.n	8020100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80200ea:	683b      	ldr	r3, [r7, #0]
 80200ec:	b2da      	uxtb	r2, r3
 80200ee:	4908      	ldr	r1, [pc, #32]	; (8020110 <__NVIC_SetPriority+0x50>)
 80200f0:	79fb      	ldrb	r3, [r7, #7]
 80200f2:	f003 030f 	and.w	r3, r3, #15
 80200f6:	3b04      	subs	r3, #4
 80200f8:	0112      	lsls	r2, r2, #4
 80200fa:	b2d2      	uxtb	r2, r2
 80200fc:	440b      	add	r3, r1
 80200fe:	761a      	strb	r2, [r3, #24]
}
 8020100:	bf00      	nop
 8020102:	370c      	adds	r7, #12
 8020104:	46bd      	mov	sp, r7
 8020106:	f85d 7b04 	ldr.w	r7, [sp], #4
 802010a:	4770      	bx	lr
 802010c:	e000e100 	.word	0xe000e100
 8020110:	e000ed00 	.word	0xe000ed00

08020114 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8020114:	b580      	push	{r7, lr}
 8020116:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8020118:	4b05      	ldr	r3, [pc, #20]	; (8020130 <SysTick_Handler+0x1c>)
 802011a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 802011c:	f002 fbe8 	bl	80228f0 <xTaskGetSchedulerState>
 8020120:	4603      	mov	r3, r0
 8020122:	2b01      	cmp	r3, #1
 8020124:	d001      	beq.n	802012a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8020126:	f003 facf 	bl	80236c8 <xPortSysTickHandler>
  }
}
 802012a:	bf00      	nop
 802012c:	bd80      	pop	{r7, pc}
 802012e:	bf00      	nop
 8020130:	e000e010 	.word	0xe000e010

08020134 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8020134:	b580      	push	{r7, lr}
 8020136:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8020138:	2100      	movs	r1, #0
 802013a:	f06f 0004 	mvn.w	r0, #4
 802013e:	f7ff ffbf 	bl	80200c0 <__NVIC_SetPriority>
#endif
}
 8020142:	bf00      	nop
 8020144:	bd80      	pop	{r7, pc}
	...

08020148 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8020148:	b480      	push	{r7}
 802014a:	b083      	sub	sp, #12
 802014c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802014e:	f3ef 8305 	mrs	r3, IPSR
 8020152:	603b      	str	r3, [r7, #0]
  return(result);
 8020154:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8020156:	2b00      	cmp	r3, #0
 8020158:	d003      	beq.n	8020162 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 802015a:	f06f 0305 	mvn.w	r3, #5
 802015e:	607b      	str	r3, [r7, #4]
 8020160:	e00c      	b.n	802017c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8020162:	4b0a      	ldr	r3, [pc, #40]	; (802018c <osKernelInitialize+0x44>)
 8020164:	681b      	ldr	r3, [r3, #0]
 8020166:	2b00      	cmp	r3, #0
 8020168:	d105      	bne.n	8020176 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 802016a:	4b08      	ldr	r3, [pc, #32]	; (802018c <osKernelInitialize+0x44>)
 802016c:	2201      	movs	r2, #1
 802016e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8020170:	2300      	movs	r3, #0
 8020172:	607b      	str	r3, [r7, #4]
 8020174:	e002      	b.n	802017c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8020176:	f04f 33ff 	mov.w	r3, #4294967295
 802017a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 802017c:	687b      	ldr	r3, [r7, #4]
}
 802017e:	4618      	mov	r0, r3
 8020180:	370c      	adds	r7, #12
 8020182:	46bd      	mov	sp, r7
 8020184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020188:	4770      	bx	lr
 802018a:	bf00      	nop
 802018c:	200015ac 	.word	0x200015ac

08020190 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8020190:	b580      	push	{r7, lr}
 8020192:	b082      	sub	sp, #8
 8020194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020196:	f3ef 8305 	mrs	r3, IPSR
 802019a:	603b      	str	r3, [r7, #0]
  return(result);
 802019c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d003      	beq.n	80201aa <osKernelStart+0x1a>
    stat = osErrorISR;
 80201a2:	f06f 0305 	mvn.w	r3, #5
 80201a6:	607b      	str	r3, [r7, #4]
 80201a8:	e010      	b.n	80201cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80201aa:	4b0b      	ldr	r3, [pc, #44]	; (80201d8 <osKernelStart+0x48>)
 80201ac:	681b      	ldr	r3, [r3, #0]
 80201ae:	2b01      	cmp	r3, #1
 80201b0:	d109      	bne.n	80201c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80201b2:	f7ff ffbf 	bl	8020134 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80201b6:	4b08      	ldr	r3, [pc, #32]	; (80201d8 <osKernelStart+0x48>)
 80201b8:	2202      	movs	r2, #2
 80201ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80201bc:	f001 fece 	bl	8021f5c <vTaskStartScheduler>
      stat = osOK;
 80201c0:	2300      	movs	r3, #0
 80201c2:	607b      	str	r3, [r7, #4]
 80201c4:	e002      	b.n	80201cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80201c6:	f04f 33ff 	mov.w	r3, #4294967295
 80201ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80201cc:	687b      	ldr	r3, [r7, #4]
}
 80201ce:	4618      	mov	r0, r3
 80201d0:	3708      	adds	r7, #8
 80201d2:	46bd      	mov	sp, r7
 80201d4:	bd80      	pop	{r7, pc}
 80201d6:	bf00      	nop
 80201d8:	200015ac 	.word	0x200015ac

080201dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80201dc:	b580      	push	{r7, lr}
 80201de:	b08e      	sub	sp, #56	; 0x38
 80201e0:	af04      	add	r7, sp, #16
 80201e2:	60f8      	str	r0, [r7, #12]
 80201e4:	60b9      	str	r1, [r7, #8]
 80201e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80201e8:	2300      	movs	r3, #0
 80201ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80201ec:	f3ef 8305 	mrs	r3, IPSR
 80201f0:	617b      	str	r3, [r7, #20]
  return(result);
 80201f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d17e      	bne.n	80202f6 <osThreadNew+0x11a>
 80201f8:	68fb      	ldr	r3, [r7, #12]
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d07b      	beq.n	80202f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80201fe:	2380      	movs	r3, #128	; 0x80
 8020200:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8020202:	2318      	movs	r3, #24
 8020204:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8020206:	2300      	movs	r3, #0
 8020208:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 802020a:	f04f 33ff 	mov.w	r3, #4294967295
 802020e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8020210:	687b      	ldr	r3, [r7, #4]
 8020212:	2b00      	cmp	r3, #0
 8020214:	d045      	beq.n	80202a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	681b      	ldr	r3, [r3, #0]
 802021a:	2b00      	cmp	r3, #0
 802021c:	d002      	beq.n	8020224 <osThreadNew+0x48>
        name = attr->name;
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	681b      	ldr	r3, [r3, #0]
 8020222:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	699b      	ldr	r3, [r3, #24]
 8020228:	2b00      	cmp	r3, #0
 802022a:	d002      	beq.n	8020232 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 802022c:	687b      	ldr	r3, [r7, #4]
 802022e:	699b      	ldr	r3, [r3, #24]
 8020230:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8020232:	69fb      	ldr	r3, [r7, #28]
 8020234:	2b00      	cmp	r3, #0
 8020236:	d008      	beq.n	802024a <osThreadNew+0x6e>
 8020238:	69fb      	ldr	r3, [r7, #28]
 802023a:	2b38      	cmp	r3, #56	; 0x38
 802023c:	d805      	bhi.n	802024a <osThreadNew+0x6e>
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	685b      	ldr	r3, [r3, #4]
 8020242:	f003 0301 	and.w	r3, r3, #1
 8020246:	2b00      	cmp	r3, #0
 8020248:	d001      	beq.n	802024e <osThreadNew+0x72>
        return (NULL);
 802024a:	2300      	movs	r3, #0
 802024c:	e054      	b.n	80202f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	695b      	ldr	r3, [r3, #20]
 8020252:	2b00      	cmp	r3, #0
 8020254:	d003      	beq.n	802025e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	695b      	ldr	r3, [r3, #20]
 802025a:	089b      	lsrs	r3, r3, #2
 802025c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 802025e:	687b      	ldr	r3, [r7, #4]
 8020260:	689b      	ldr	r3, [r3, #8]
 8020262:	2b00      	cmp	r3, #0
 8020264:	d00e      	beq.n	8020284 <osThreadNew+0xa8>
 8020266:	687b      	ldr	r3, [r7, #4]
 8020268:	68db      	ldr	r3, [r3, #12]
 802026a:	2bab      	cmp	r3, #171	; 0xab
 802026c:	d90a      	bls.n	8020284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 802026e:	687b      	ldr	r3, [r7, #4]
 8020270:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8020272:	2b00      	cmp	r3, #0
 8020274:	d006      	beq.n	8020284 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8020276:	687b      	ldr	r3, [r7, #4]
 8020278:	695b      	ldr	r3, [r3, #20]
 802027a:	2b00      	cmp	r3, #0
 802027c:	d002      	beq.n	8020284 <osThreadNew+0xa8>
        mem = 1;
 802027e:	2301      	movs	r3, #1
 8020280:	61bb      	str	r3, [r7, #24]
 8020282:	e010      	b.n	80202a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	689b      	ldr	r3, [r3, #8]
 8020288:	2b00      	cmp	r3, #0
 802028a:	d10c      	bne.n	80202a6 <osThreadNew+0xca>
 802028c:	687b      	ldr	r3, [r7, #4]
 802028e:	68db      	ldr	r3, [r3, #12]
 8020290:	2b00      	cmp	r3, #0
 8020292:	d108      	bne.n	80202a6 <osThreadNew+0xca>
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	691b      	ldr	r3, [r3, #16]
 8020298:	2b00      	cmp	r3, #0
 802029a:	d104      	bne.n	80202a6 <osThreadNew+0xca>
          mem = 0;
 802029c:	2300      	movs	r3, #0
 802029e:	61bb      	str	r3, [r7, #24]
 80202a0:	e001      	b.n	80202a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80202a2:	2300      	movs	r3, #0
 80202a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80202a6:	69bb      	ldr	r3, [r7, #24]
 80202a8:	2b01      	cmp	r3, #1
 80202aa:	d110      	bne.n	80202ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80202ac:	687b      	ldr	r3, [r7, #4]
 80202ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80202b0:	687a      	ldr	r2, [r7, #4]
 80202b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80202b4:	9202      	str	r2, [sp, #8]
 80202b6:	9301      	str	r3, [sp, #4]
 80202b8:	69fb      	ldr	r3, [r7, #28]
 80202ba:	9300      	str	r3, [sp, #0]
 80202bc:	68bb      	ldr	r3, [r7, #8]
 80202be:	6a3a      	ldr	r2, [r7, #32]
 80202c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80202c2:	68f8      	ldr	r0, [r7, #12]
 80202c4:	f001 fc5a 	bl	8021b7c <xTaskCreateStatic>
 80202c8:	4603      	mov	r3, r0
 80202ca:	613b      	str	r3, [r7, #16]
 80202cc:	e013      	b.n	80202f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80202ce:	69bb      	ldr	r3, [r7, #24]
 80202d0:	2b00      	cmp	r3, #0
 80202d2:	d110      	bne.n	80202f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80202d4:	6a3b      	ldr	r3, [r7, #32]
 80202d6:	b29a      	uxth	r2, r3
 80202d8:	f107 0310 	add.w	r3, r7, #16
 80202dc:	9301      	str	r3, [sp, #4]
 80202de:	69fb      	ldr	r3, [r7, #28]
 80202e0:	9300      	str	r3, [sp, #0]
 80202e2:	68bb      	ldr	r3, [r7, #8]
 80202e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80202e6:	68f8      	ldr	r0, [r7, #12]
 80202e8:	f001 fca5 	bl	8021c36 <xTaskCreate>
 80202ec:	4603      	mov	r3, r0
 80202ee:	2b01      	cmp	r3, #1
 80202f0:	d001      	beq.n	80202f6 <osThreadNew+0x11a>
            hTask = NULL;
 80202f2:	2300      	movs	r3, #0
 80202f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80202f6:	693b      	ldr	r3, [r7, #16]
}
 80202f8:	4618      	mov	r0, r3
 80202fa:	3728      	adds	r7, #40	; 0x28
 80202fc:	46bd      	mov	sp, r7
 80202fe:	bd80      	pop	{r7, pc}

08020300 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8020300:	b580      	push	{r7, lr}
 8020302:	b086      	sub	sp, #24
 8020304:	af00      	add	r7, sp, #0
 8020306:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802030c:	f3ef 8305 	mrs	r3, IPSR
 8020310:	60fb      	str	r3, [r7, #12]
  return(result);
 8020312:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8020314:	2b00      	cmp	r3, #0
 8020316:	d102      	bne.n	802031e <osThreadGetStackSpace+0x1e>
 8020318:	693b      	ldr	r3, [r7, #16]
 802031a:	2b00      	cmp	r3, #0
 802031c:	d102      	bne.n	8020324 <osThreadGetStackSpace+0x24>
    sz = 0U;
 802031e:	2300      	movs	r3, #0
 8020320:	617b      	str	r3, [r7, #20]
 8020322:	e005      	b.n	8020330 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 8020324:	6938      	ldr	r0, [r7, #16]
 8020326:	f002 fa63 	bl	80227f0 <uxTaskGetStackHighWaterMark>
 802032a:	4603      	mov	r3, r0
 802032c:	009b      	lsls	r3, r3, #2
 802032e:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 8020330:	697b      	ldr	r3, [r7, #20]
}
 8020332:	4618      	mov	r0, r3
 8020334:	3718      	adds	r7, #24
 8020336:	46bd      	mov	sp, r7
 8020338:	bd80      	pop	{r7, pc}
	...

0802033c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 802033c:	b480      	push	{r7}
 802033e:	b083      	sub	sp, #12
 8020340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020342:	f3ef 8305 	mrs	r3, IPSR
 8020346:	603b      	str	r3, [r7, #0]
  return(result);
 8020348:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802034a:	2b00      	cmp	r3, #0
 802034c:	d003      	beq.n	8020356 <osThreadYield+0x1a>
    stat = osErrorISR;
 802034e:	f06f 0305 	mvn.w	r3, #5
 8020352:	607b      	str	r3, [r7, #4]
 8020354:	e009      	b.n	802036a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8020356:	2300      	movs	r3, #0
 8020358:	607b      	str	r3, [r7, #4]
    taskYIELD();
 802035a:	4b07      	ldr	r3, [pc, #28]	; (8020378 <osThreadYield+0x3c>)
 802035c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020360:	601a      	str	r2, [r3, #0]
 8020362:	f3bf 8f4f 	dsb	sy
 8020366:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 802036a:	687b      	ldr	r3, [r7, #4]
}
 802036c:	4618      	mov	r0, r3
 802036e:	370c      	adds	r7, #12
 8020370:	46bd      	mov	sp, r7
 8020372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020376:	4770      	bx	lr
 8020378:	e000ed04 	.word	0xe000ed04

0802037c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 802037c:	b580      	push	{r7, lr}
 802037e:	b084      	sub	sp, #16
 8020380:	af00      	add	r7, sp, #0
 8020382:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020384:	f3ef 8305 	mrs	r3, IPSR
 8020388:	60bb      	str	r3, [r7, #8]
  return(result);
 802038a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802038c:	2b00      	cmp	r3, #0
 802038e:	d003      	beq.n	8020398 <osDelay+0x1c>
    stat = osErrorISR;
 8020390:	f06f 0305 	mvn.w	r3, #5
 8020394:	60fb      	str	r3, [r7, #12]
 8020396:	e007      	b.n	80203a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8020398:	2300      	movs	r3, #0
 802039a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	2b00      	cmp	r3, #0
 80203a0:	d002      	beq.n	80203a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80203a2:	6878      	ldr	r0, [r7, #4]
 80203a4:	f001 fda6 	bl	8021ef4 <vTaskDelay>
    }
  }

  return (stat);
 80203a8:	68fb      	ldr	r3, [r7, #12]
}
 80203aa:	4618      	mov	r0, r3
 80203ac:	3710      	adds	r7, #16
 80203ae:	46bd      	mov	sp, r7
 80203b0:	bd80      	pop	{r7, pc}

080203b2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80203b2:	b580      	push	{r7, lr}
 80203b4:	b088      	sub	sp, #32
 80203b6:	af00      	add	r7, sp, #0
 80203b8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80203ba:	2300      	movs	r3, #0
 80203bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80203be:	f3ef 8305 	mrs	r3, IPSR
 80203c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80203c4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80203c6:	2b00      	cmp	r3, #0
 80203c8:	d174      	bne.n	80204b4 <osMutexNew+0x102>
    if (attr != NULL) {
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	2b00      	cmp	r3, #0
 80203ce:	d003      	beq.n	80203d8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	685b      	ldr	r3, [r3, #4]
 80203d4:	61bb      	str	r3, [r7, #24]
 80203d6:	e001      	b.n	80203dc <osMutexNew+0x2a>
    } else {
      type = 0U;
 80203d8:	2300      	movs	r3, #0
 80203da:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80203dc:	69bb      	ldr	r3, [r7, #24]
 80203de:	f003 0301 	and.w	r3, r3, #1
 80203e2:	2b00      	cmp	r3, #0
 80203e4:	d002      	beq.n	80203ec <osMutexNew+0x3a>
      rmtx = 1U;
 80203e6:	2301      	movs	r3, #1
 80203e8:	617b      	str	r3, [r7, #20]
 80203ea:	e001      	b.n	80203f0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80203ec:	2300      	movs	r3, #0
 80203ee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80203f0:	69bb      	ldr	r3, [r7, #24]
 80203f2:	f003 0308 	and.w	r3, r3, #8
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	d15c      	bne.n	80204b4 <osMutexNew+0x102>
      mem = -1;
 80203fa:	f04f 33ff 	mov.w	r3, #4294967295
 80203fe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	2b00      	cmp	r3, #0
 8020404:	d015      	beq.n	8020432 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	689b      	ldr	r3, [r3, #8]
 802040a:	2b00      	cmp	r3, #0
 802040c:	d006      	beq.n	802041c <osMutexNew+0x6a>
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	68db      	ldr	r3, [r3, #12]
 8020412:	2b4f      	cmp	r3, #79	; 0x4f
 8020414:	d902      	bls.n	802041c <osMutexNew+0x6a>
          mem = 1;
 8020416:	2301      	movs	r3, #1
 8020418:	613b      	str	r3, [r7, #16]
 802041a:	e00c      	b.n	8020436 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	689b      	ldr	r3, [r3, #8]
 8020420:	2b00      	cmp	r3, #0
 8020422:	d108      	bne.n	8020436 <osMutexNew+0x84>
 8020424:	687b      	ldr	r3, [r7, #4]
 8020426:	68db      	ldr	r3, [r3, #12]
 8020428:	2b00      	cmp	r3, #0
 802042a:	d104      	bne.n	8020436 <osMutexNew+0x84>
            mem = 0;
 802042c:	2300      	movs	r3, #0
 802042e:	613b      	str	r3, [r7, #16]
 8020430:	e001      	b.n	8020436 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8020432:	2300      	movs	r3, #0
 8020434:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8020436:	693b      	ldr	r3, [r7, #16]
 8020438:	2b01      	cmp	r3, #1
 802043a:	d112      	bne.n	8020462 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 802043c:	697b      	ldr	r3, [r7, #20]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d007      	beq.n	8020452 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	689b      	ldr	r3, [r3, #8]
 8020446:	4619      	mov	r1, r3
 8020448:	2004      	movs	r0, #4
 802044a:	f000 fc68 	bl	8020d1e <xQueueCreateMutexStatic>
 802044e:	61f8      	str	r0, [r7, #28]
 8020450:	e016      	b.n	8020480 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	689b      	ldr	r3, [r3, #8]
 8020456:	4619      	mov	r1, r3
 8020458:	2001      	movs	r0, #1
 802045a:	f000 fc60 	bl	8020d1e <xQueueCreateMutexStatic>
 802045e:	61f8      	str	r0, [r7, #28]
 8020460:	e00e      	b.n	8020480 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8020462:	693b      	ldr	r3, [r7, #16]
 8020464:	2b00      	cmp	r3, #0
 8020466:	d10b      	bne.n	8020480 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8020468:	697b      	ldr	r3, [r7, #20]
 802046a:	2b00      	cmp	r3, #0
 802046c:	d004      	beq.n	8020478 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 802046e:	2004      	movs	r0, #4
 8020470:	f000 fc3d 	bl	8020cee <xQueueCreateMutex>
 8020474:	61f8      	str	r0, [r7, #28]
 8020476:	e003      	b.n	8020480 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8020478:	2001      	movs	r0, #1
 802047a:	f000 fc38 	bl	8020cee <xQueueCreateMutex>
 802047e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8020480:	69fb      	ldr	r3, [r7, #28]
 8020482:	2b00      	cmp	r3, #0
 8020484:	d00c      	beq.n	80204a0 <osMutexNew+0xee>
        if (attr != NULL) {
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	2b00      	cmp	r3, #0
 802048a:	d003      	beq.n	8020494 <osMutexNew+0xe2>
          name = attr->name;
 802048c:	687b      	ldr	r3, [r7, #4]
 802048e:	681b      	ldr	r3, [r3, #0]
 8020490:	60fb      	str	r3, [r7, #12]
 8020492:	e001      	b.n	8020498 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8020494:	2300      	movs	r3, #0
 8020496:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8020498:	68f9      	ldr	r1, [r7, #12]
 802049a:	69f8      	ldr	r0, [r7, #28]
 802049c:	f001 fb10 	bl	8021ac0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80204a0:	69fb      	ldr	r3, [r7, #28]
 80204a2:	2b00      	cmp	r3, #0
 80204a4:	d006      	beq.n	80204b4 <osMutexNew+0x102>
 80204a6:	697b      	ldr	r3, [r7, #20]
 80204a8:	2b00      	cmp	r3, #0
 80204aa:	d003      	beq.n	80204b4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80204ac:	69fb      	ldr	r3, [r7, #28]
 80204ae:	f043 0301 	orr.w	r3, r3, #1
 80204b2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80204b4:	69fb      	ldr	r3, [r7, #28]
}
 80204b6:	4618      	mov	r0, r3
 80204b8:	3720      	adds	r7, #32
 80204ba:	46bd      	mov	sp, r7
 80204bc:	bd80      	pop	{r7, pc}

080204be <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80204be:	b580      	push	{r7, lr}
 80204c0:	b086      	sub	sp, #24
 80204c2:	af00      	add	r7, sp, #0
 80204c4:	6078      	str	r0, [r7, #4]
 80204c6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	f023 0301 	bic.w	r3, r3, #1
 80204ce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80204d0:	687b      	ldr	r3, [r7, #4]
 80204d2:	f003 0301 	and.w	r3, r3, #1
 80204d6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80204d8:	2300      	movs	r3, #0
 80204da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80204dc:	f3ef 8305 	mrs	r3, IPSR
 80204e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80204e2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80204e4:	2b00      	cmp	r3, #0
 80204e6:	d003      	beq.n	80204f0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80204e8:	f06f 0305 	mvn.w	r3, #5
 80204ec:	617b      	str	r3, [r7, #20]
 80204ee:	e02c      	b.n	802054a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80204f0:	693b      	ldr	r3, [r7, #16]
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	d103      	bne.n	80204fe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80204f6:	f06f 0303 	mvn.w	r3, #3
 80204fa:	617b      	str	r3, [r7, #20]
 80204fc:	e025      	b.n	802054a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80204fe:	68fb      	ldr	r3, [r7, #12]
 8020500:	2b00      	cmp	r3, #0
 8020502:	d011      	beq.n	8020528 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8020504:	6839      	ldr	r1, [r7, #0]
 8020506:	6938      	ldr	r0, [r7, #16]
 8020508:	f000 fc58 	bl	8020dbc <xQueueTakeMutexRecursive>
 802050c:	4603      	mov	r3, r0
 802050e:	2b01      	cmp	r3, #1
 8020510:	d01b      	beq.n	802054a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8020512:	683b      	ldr	r3, [r7, #0]
 8020514:	2b00      	cmp	r3, #0
 8020516:	d003      	beq.n	8020520 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8020518:	f06f 0301 	mvn.w	r3, #1
 802051c:	617b      	str	r3, [r7, #20]
 802051e:	e014      	b.n	802054a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020520:	f06f 0302 	mvn.w	r3, #2
 8020524:	617b      	str	r3, [r7, #20]
 8020526:	e010      	b.n	802054a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8020528:	6839      	ldr	r1, [r7, #0]
 802052a:	6938      	ldr	r0, [r7, #16]
 802052c:	f000 fef6 	bl	802131c <xQueueSemaphoreTake>
 8020530:	4603      	mov	r3, r0
 8020532:	2b01      	cmp	r3, #1
 8020534:	d009      	beq.n	802054a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8020536:	683b      	ldr	r3, [r7, #0]
 8020538:	2b00      	cmp	r3, #0
 802053a:	d003      	beq.n	8020544 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 802053c:	f06f 0301 	mvn.w	r3, #1
 8020540:	617b      	str	r3, [r7, #20]
 8020542:	e002      	b.n	802054a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020544:	f06f 0302 	mvn.w	r3, #2
 8020548:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 802054a:	697b      	ldr	r3, [r7, #20]
}
 802054c:	4618      	mov	r0, r3
 802054e:	3718      	adds	r7, #24
 8020550:	46bd      	mov	sp, r7
 8020552:	bd80      	pop	{r7, pc}

08020554 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8020554:	b580      	push	{r7, lr}
 8020556:	b086      	sub	sp, #24
 8020558:	af00      	add	r7, sp, #0
 802055a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	f023 0301 	bic.w	r3, r3, #1
 8020562:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020564:	687b      	ldr	r3, [r7, #4]
 8020566:	f003 0301 	and.w	r3, r3, #1
 802056a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 802056c:	2300      	movs	r3, #0
 802056e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020570:	f3ef 8305 	mrs	r3, IPSR
 8020574:	60bb      	str	r3, [r7, #8]
  return(result);
 8020576:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8020578:	2b00      	cmp	r3, #0
 802057a:	d003      	beq.n	8020584 <osMutexRelease+0x30>
    stat = osErrorISR;
 802057c:	f06f 0305 	mvn.w	r3, #5
 8020580:	617b      	str	r3, [r7, #20]
 8020582:	e01f      	b.n	80205c4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8020584:	693b      	ldr	r3, [r7, #16]
 8020586:	2b00      	cmp	r3, #0
 8020588:	d103      	bne.n	8020592 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 802058a:	f06f 0303 	mvn.w	r3, #3
 802058e:	617b      	str	r3, [r7, #20]
 8020590:	e018      	b.n	80205c4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8020592:	68fb      	ldr	r3, [r7, #12]
 8020594:	2b00      	cmp	r3, #0
 8020596:	d009      	beq.n	80205ac <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8020598:	6938      	ldr	r0, [r7, #16]
 802059a:	f000 fbdb 	bl	8020d54 <xQueueGiveMutexRecursive>
 802059e:	4603      	mov	r3, r0
 80205a0:	2b01      	cmp	r3, #1
 80205a2:	d00f      	beq.n	80205c4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80205a4:	f06f 0302 	mvn.w	r3, #2
 80205a8:	617b      	str	r3, [r7, #20]
 80205aa:	e00b      	b.n	80205c4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80205ac:	2300      	movs	r3, #0
 80205ae:	2200      	movs	r2, #0
 80205b0:	2100      	movs	r1, #0
 80205b2:	6938      	ldr	r0, [r7, #16]
 80205b4:	f000 fc38 	bl	8020e28 <xQueueGenericSend>
 80205b8:	4603      	mov	r3, r0
 80205ba:	2b01      	cmp	r3, #1
 80205bc:	d002      	beq.n	80205c4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80205be:	f06f 0302 	mvn.w	r3, #2
 80205c2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80205c4:	697b      	ldr	r3, [r7, #20]
}
 80205c6:	4618      	mov	r0, r3
 80205c8:	3718      	adds	r7, #24
 80205ca:	46bd      	mov	sp, r7
 80205cc:	bd80      	pop	{r7, pc}

080205ce <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80205ce:	b580      	push	{r7, lr}
 80205d0:	b08a      	sub	sp, #40	; 0x28
 80205d2:	af02      	add	r7, sp, #8
 80205d4:	60f8      	str	r0, [r7, #12]
 80205d6:	60b9      	str	r1, [r7, #8]
 80205d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80205da:	2300      	movs	r3, #0
 80205dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80205de:	f3ef 8305 	mrs	r3, IPSR
 80205e2:	613b      	str	r3, [r7, #16]
  return(result);
 80205e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80205e6:	2b00      	cmp	r3, #0
 80205e8:	d15f      	bne.n	80206aa <osMessageQueueNew+0xdc>
 80205ea:	68fb      	ldr	r3, [r7, #12]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d05c      	beq.n	80206aa <osMessageQueueNew+0xdc>
 80205f0:	68bb      	ldr	r3, [r7, #8]
 80205f2:	2b00      	cmp	r3, #0
 80205f4:	d059      	beq.n	80206aa <osMessageQueueNew+0xdc>
    mem = -1;
 80205f6:	f04f 33ff 	mov.w	r3, #4294967295
 80205fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d029      	beq.n	8020656 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	689b      	ldr	r3, [r3, #8]
 8020606:	2b00      	cmp	r3, #0
 8020608:	d012      	beq.n	8020630 <osMessageQueueNew+0x62>
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	68db      	ldr	r3, [r3, #12]
 802060e:	2b4f      	cmp	r3, #79	; 0x4f
 8020610:	d90e      	bls.n	8020630 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8020612:	687b      	ldr	r3, [r7, #4]
 8020614:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8020616:	2b00      	cmp	r3, #0
 8020618:	d00a      	beq.n	8020630 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	695a      	ldr	r2, [r3, #20]
 802061e:	68fb      	ldr	r3, [r7, #12]
 8020620:	68b9      	ldr	r1, [r7, #8]
 8020622:	fb01 f303 	mul.w	r3, r1, r3
 8020626:	429a      	cmp	r2, r3
 8020628:	d302      	bcc.n	8020630 <osMessageQueueNew+0x62>
        mem = 1;
 802062a:	2301      	movs	r3, #1
 802062c:	61bb      	str	r3, [r7, #24]
 802062e:	e014      	b.n	802065a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020630:	687b      	ldr	r3, [r7, #4]
 8020632:	689b      	ldr	r3, [r3, #8]
 8020634:	2b00      	cmp	r3, #0
 8020636:	d110      	bne.n	802065a <osMessageQueueNew+0x8c>
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	68db      	ldr	r3, [r3, #12]
 802063c:	2b00      	cmp	r3, #0
 802063e:	d10c      	bne.n	802065a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020644:	2b00      	cmp	r3, #0
 8020646:	d108      	bne.n	802065a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020648:	687b      	ldr	r3, [r7, #4]
 802064a:	695b      	ldr	r3, [r3, #20]
 802064c:	2b00      	cmp	r3, #0
 802064e:	d104      	bne.n	802065a <osMessageQueueNew+0x8c>
          mem = 0;
 8020650:	2300      	movs	r3, #0
 8020652:	61bb      	str	r3, [r7, #24]
 8020654:	e001      	b.n	802065a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8020656:	2300      	movs	r3, #0
 8020658:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 802065a:	69bb      	ldr	r3, [r7, #24]
 802065c:	2b01      	cmp	r3, #1
 802065e:	d10b      	bne.n	8020678 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	691a      	ldr	r2, [r3, #16]
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	689b      	ldr	r3, [r3, #8]
 8020668:	2100      	movs	r1, #0
 802066a:	9100      	str	r1, [sp, #0]
 802066c:	68b9      	ldr	r1, [r7, #8]
 802066e:	68f8      	ldr	r0, [r7, #12]
 8020670:	f000 fa4e 	bl	8020b10 <xQueueGenericCreateStatic>
 8020674:	61f8      	str	r0, [r7, #28]
 8020676:	e008      	b.n	802068a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8020678:	69bb      	ldr	r3, [r7, #24]
 802067a:	2b00      	cmp	r3, #0
 802067c:	d105      	bne.n	802068a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 802067e:	2200      	movs	r2, #0
 8020680:	68b9      	ldr	r1, [r7, #8]
 8020682:	68f8      	ldr	r0, [r7, #12]
 8020684:	f000 fabc 	bl	8020c00 <xQueueGenericCreate>
 8020688:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 802068a:	69fb      	ldr	r3, [r7, #28]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d00c      	beq.n	80206aa <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	2b00      	cmp	r3, #0
 8020694:	d003      	beq.n	802069e <osMessageQueueNew+0xd0>
        name = attr->name;
 8020696:	687b      	ldr	r3, [r7, #4]
 8020698:	681b      	ldr	r3, [r3, #0]
 802069a:	617b      	str	r3, [r7, #20]
 802069c:	e001      	b.n	80206a2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 802069e:	2300      	movs	r3, #0
 80206a0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80206a2:	6979      	ldr	r1, [r7, #20]
 80206a4:	69f8      	ldr	r0, [r7, #28]
 80206a6:	f001 fa0b 	bl	8021ac0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80206aa:	69fb      	ldr	r3, [r7, #28]
}
 80206ac:	4618      	mov	r0, r3
 80206ae:	3720      	adds	r7, #32
 80206b0:	46bd      	mov	sp, r7
 80206b2:	bd80      	pop	{r7, pc}

080206b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80206b4:	b580      	push	{r7, lr}
 80206b6:	b088      	sub	sp, #32
 80206b8:	af00      	add	r7, sp, #0
 80206ba:	60f8      	str	r0, [r7, #12]
 80206bc:	60b9      	str	r1, [r7, #8]
 80206be:	603b      	str	r3, [r7, #0]
 80206c0:	4613      	mov	r3, r2
 80206c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80206c4:	68fb      	ldr	r3, [r7, #12]
 80206c6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80206c8:	2300      	movs	r3, #0
 80206ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80206cc:	f3ef 8305 	mrs	r3, IPSR
 80206d0:	617b      	str	r3, [r7, #20]
  return(result);
 80206d2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d028      	beq.n	802072a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80206d8:	69bb      	ldr	r3, [r7, #24]
 80206da:	2b00      	cmp	r3, #0
 80206dc:	d005      	beq.n	80206ea <osMessageQueuePut+0x36>
 80206de:	68bb      	ldr	r3, [r7, #8]
 80206e0:	2b00      	cmp	r3, #0
 80206e2:	d002      	beq.n	80206ea <osMessageQueuePut+0x36>
 80206e4:	683b      	ldr	r3, [r7, #0]
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d003      	beq.n	80206f2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80206ea:	f06f 0303 	mvn.w	r3, #3
 80206ee:	61fb      	str	r3, [r7, #28]
 80206f0:	e038      	b.n	8020764 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80206f2:	2300      	movs	r3, #0
 80206f4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80206f6:	f107 0210 	add.w	r2, r7, #16
 80206fa:	2300      	movs	r3, #0
 80206fc:	68b9      	ldr	r1, [r7, #8]
 80206fe:	69b8      	ldr	r0, [r7, #24]
 8020700:	f000 fc90 	bl	8021024 <xQueueGenericSendFromISR>
 8020704:	4603      	mov	r3, r0
 8020706:	2b01      	cmp	r3, #1
 8020708:	d003      	beq.n	8020712 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 802070a:	f06f 0302 	mvn.w	r3, #2
 802070e:	61fb      	str	r3, [r7, #28]
 8020710:	e028      	b.n	8020764 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8020712:	693b      	ldr	r3, [r7, #16]
 8020714:	2b00      	cmp	r3, #0
 8020716:	d025      	beq.n	8020764 <osMessageQueuePut+0xb0>
 8020718:	4b15      	ldr	r3, [pc, #84]	; (8020770 <osMessageQueuePut+0xbc>)
 802071a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802071e:	601a      	str	r2, [r3, #0]
 8020720:	f3bf 8f4f 	dsb	sy
 8020724:	f3bf 8f6f 	isb	sy
 8020728:	e01c      	b.n	8020764 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 802072a:	69bb      	ldr	r3, [r7, #24]
 802072c:	2b00      	cmp	r3, #0
 802072e:	d002      	beq.n	8020736 <osMessageQueuePut+0x82>
 8020730:	68bb      	ldr	r3, [r7, #8]
 8020732:	2b00      	cmp	r3, #0
 8020734:	d103      	bne.n	802073e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8020736:	f06f 0303 	mvn.w	r3, #3
 802073a:	61fb      	str	r3, [r7, #28]
 802073c:	e012      	b.n	8020764 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 802073e:	2300      	movs	r3, #0
 8020740:	683a      	ldr	r2, [r7, #0]
 8020742:	68b9      	ldr	r1, [r7, #8]
 8020744:	69b8      	ldr	r0, [r7, #24]
 8020746:	f000 fb6f 	bl	8020e28 <xQueueGenericSend>
 802074a:	4603      	mov	r3, r0
 802074c:	2b01      	cmp	r3, #1
 802074e:	d009      	beq.n	8020764 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8020750:	683b      	ldr	r3, [r7, #0]
 8020752:	2b00      	cmp	r3, #0
 8020754:	d003      	beq.n	802075e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8020756:	f06f 0301 	mvn.w	r3, #1
 802075a:	61fb      	str	r3, [r7, #28]
 802075c:	e002      	b.n	8020764 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 802075e:	f06f 0302 	mvn.w	r3, #2
 8020762:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020764:	69fb      	ldr	r3, [r7, #28]
}
 8020766:	4618      	mov	r0, r3
 8020768:	3720      	adds	r7, #32
 802076a:	46bd      	mov	sp, r7
 802076c:	bd80      	pop	{r7, pc}
 802076e:	bf00      	nop
 8020770:	e000ed04 	.word	0xe000ed04

08020774 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8020774:	b580      	push	{r7, lr}
 8020776:	b088      	sub	sp, #32
 8020778:	af00      	add	r7, sp, #0
 802077a:	60f8      	str	r0, [r7, #12]
 802077c:	60b9      	str	r1, [r7, #8]
 802077e:	607a      	str	r2, [r7, #4]
 8020780:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020786:	2300      	movs	r3, #0
 8020788:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802078a:	f3ef 8305 	mrs	r3, IPSR
 802078e:	617b      	str	r3, [r7, #20]
  return(result);
 8020790:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8020792:	2b00      	cmp	r3, #0
 8020794:	d028      	beq.n	80207e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020796:	69bb      	ldr	r3, [r7, #24]
 8020798:	2b00      	cmp	r3, #0
 802079a:	d005      	beq.n	80207a8 <osMessageQueueGet+0x34>
 802079c:	68bb      	ldr	r3, [r7, #8]
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d002      	beq.n	80207a8 <osMessageQueueGet+0x34>
 80207a2:	683b      	ldr	r3, [r7, #0]
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d003      	beq.n	80207b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80207a8:	f06f 0303 	mvn.w	r3, #3
 80207ac:	61fb      	str	r3, [r7, #28]
 80207ae:	e037      	b.n	8020820 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80207b0:	2300      	movs	r3, #0
 80207b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80207b4:	f107 0310 	add.w	r3, r7, #16
 80207b8:	461a      	mov	r2, r3
 80207ba:	68b9      	ldr	r1, [r7, #8]
 80207bc:	69b8      	ldr	r0, [r7, #24]
 80207be:	f000 ff9b 	bl	80216f8 <xQueueReceiveFromISR>
 80207c2:	4603      	mov	r3, r0
 80207c4:	2b01      	cmp	r3, #1
 80207c6:	d003      	beq.n	80207d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80207c8:	f06f 0302 	mvn.w	r3, #2
 80207cc:	61fb      	str	r3, [r7, #28]
 80207ce:	e027      	b.n	8020820 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80207d0:	693b      	ldr	r3, [r7, #16]
 80207d2:	2b00      	cmp	r3, #0
 80207d4:	d024      	beq.n	8020820 <osMessageQueueGet+0xac>
 80207d6:	4b15      	ldr	r3, [pc, #84]	; (802082c <osMessageQueueGet+0xb8>)
 80207d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80207dc:	601a      	str	r2, [r3, #0]
 80207de:	f3bf 8f4f 	dsb	sy
 80207e2:	f3bf 8f6f 	isb	sy
 80207e6:	e01b      	b.n	8020820 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80207e8:	69bb      	ldr	r3, [r7, #24]
 80207ea:	2b00      	cmp	r3, #0
 80207ec:	d002      	beq.n	80207f4 <osMessageQueueGet+0x80>
 80207ee:	68bb      	ldr	r3, [r7, #8]
 80207f0:	2b00      	cmp	r3, #0
 80207f2:	d103      	bne.n	80207fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80207f4:	f06f 0303 	mvn.w	r3, #3
 80207f8:	61fb      	str	r3, [r7, #28]
 80207fa:	e011      	b.n	8020820 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80207fc:	683a      	ldr	r2, [r7, #0]
 80207fe:	68b9      	ldr	r1, [r7, #8]
 8020800:	69b8      	ldr	r0, [r7, #24]
 8020802:	f000 fcab 	bl	802115c <xQueueReceive>
 8020806:	4603      	mov	r3, r0
 8020808:	2b01      	cmp	r3, #1
 802080a:	d009      	beq.n	8020820 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 802080c:	683b      	ldr	r3, [r7, #0]
 802080e:	2b00      	cmp	r3, #0
 8020810:	d003      	beq.n	802081a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8020812:	f06f 0301 	mvn.w	r3, #1
 8020816:	61fb      	str	r3, [r7, #28]
 8020818:	e002      	b.n	8020820 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 802081a:	f06f 0302 	mvn.w	r3, #2
 802081e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020820:	69fb      	ldr	r3, [r7, #28]
}
 8020822:	4618      	mov	r0, r3
 8020824:	3720      	adds	r7, #32
 8020826:	46bd      	mov	sp, r7
 8020828:	bd80      	pop	{r7, pc}
 802082a:	bf00      	nop
 802082c:	e000ed04 	.word	0xe000ed04

08020830 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8020830:	b580      	push	{r7, lr}
 8020832:	b086      	sub	sp, #24
 8020834:	af00      	add	r7, sp, #0
 8020836:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020838:	687b      	ldr	r3, [r7, #4]
 802083a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 802083c:	693b      	ldr	r3, [r7, #16]
 802083e:	2b00      	cmp	r3, #0
 8020840:	d102      	bne.n	8020848 <osMessageQueueGetCount+0x18>
    count = 0U;
 8020842:	2300      	movs	r3, #0
 8020844:	617b      	str	r3, [r7, #20]
 8020846:	e00e      	b.n	8020866 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020848:	f3ef 8305 	mrs	r3, IPSR
 802084c:	60fb      	str	r3, [r7, #12]
  return(result);
 802084e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8020850:	2b00      	cmp	r3, #0
 8020852:	d004      	beq.n	802085e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8020854:	6938      	ldr	r0, [r7, #16]
 8020856:	f000 ffed 	bl	8021834 <uxQueueMessagesWaitingFromISR>
 802085a:	6178      	str	r0, [r7, #20]
 802085c:	e003      	b.n	8020866 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 802085e:	6938      	ldr	r0, [r7, #16]
 8020860:	f000 ffca 	bl	80217f8 <uxQueueMessagesWaiting>
 8020864:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8020866:	697b      	ldr	r3, [r7, #20]
}
 8020868:	4618      	mov	r0, r3
 802086a:	3718      	adds	r7, #24
 802086c:	46bd      	mov	sp, r7
 802086e:	bd80      	pop	{r7, pc}

08020870 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8020870:	b480      	push	{r7}
 8020872:	b085      	sub	sp, #20
 8020874:	af00      	add	r7, sp, #0
 8020876:	60f8      	str	r0, [r7, #12]
 8020878:	60b9      	str	r1, [r7, #8]
 802087a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802087c:	68fb      	ldr	r3, [r7, #12]
 802087e:	4a07      	ldr	r2, [pc, #28]	; (802089c <vApplicationGetIdleTaskMemory+0x2c>)
 8020880:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8020882:	68bb      	ldr	r3, [r7, #8]
 8020884:	4a06      	ldr	r2, [pc, #24]	; (80208a0 <vApplicationGetIdleTaskMemory+0x30>)
 8020886:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8020888:	687b      	ldr	r3, [r7, #4]
 802088a:	2280      	movs	r2, #128	; 0x80
 802088c:	601a      	str	r2, [r3, #0]
}
 802088e:	bf00      	nop
 8020890:	3714      	adds	r7, #20
 8020892:	46bd      	mov	sp, r7
 8020894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020898:	4770      	bx	lr
 802089a:	bf00      	nop
 802089c:	200015b0 	.word	0x200015b0
 80208a0:	2000165c 	.word	0x2000165c

080208a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80208a4:	b480      	push	{r7}
 80208a6:	b085      	sub	sp, #20
 80208a8:	af00      	add	r7, sp, #0
 80208aa:	60f8      	str	r0, [r7, #12]
 80208ac:	60b9      	str	r1, [r7, #8]
 80208ae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80208b0:	68fb      	ldr	r3, [r7, #12]
 80208b2:	4a07      	ldr	r2, [pc, #28]	; (80208d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80208b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80208b6:	68bb      	ldr	r3, [r7, #8]
 80208b8:	4a06      	ldr	r2, [pc, #24]	; (80208d4 <vApplicationGetTimerTaskMemory+0x30>)
 80208ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80208c2:	601a      	str	r2, [r3, #0]
}
 80208c4:	bf00      	nop
 80208c6:	3714      	adds	r7, #20
 80208c8:	46bd      	mov	sp, r7
 80208ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ce:	4770      	bx	lr
 80208d0:	2000185c 	.word	0x2000185c
 80208d4:	20001908 	.word	0x20001908

080208d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80208d8:	b480      	push	{r7}
 80208da:	b083      	sub	sp, #12
 80208dc:	af00      	add	r7, sp, #0
 80208de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	f103 0208 	add.w	r2, r3, #8
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80208ea:	687b      	ldr	r3, [r7, #4]
 80208ec:	f04f 32ff 	mov.w	r2, #4294967295
 80208f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80208f2:	687b      	ldr	r3, [r7, #4]
 80208f4:	f103 0208 	add.w	r2, r3, #8
 80208f8:	687b      	ldr	r3, [r7, #4]
 80208fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	f103 0208 	add.w	r2, r3, #8
 8020902:	687b      	ldr	r3, [r7, #4]
 8020904:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8020906:	687b      	ldr	r3, [r7, #4]
 8020908:	2200      	movs	r2, #0
 802090a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802090c:	bf00      	nop
 802090e:	370c      	adds	r7, #12
 8020910:	46bd      	mov	sp, r7
 8020912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020916:	4770      	bx	lr

08020918 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8020918:	b480      	push	{r7}
 802091a:	b083      	sub	sp, #12
 802091c:	af00      	add	r7, sp, #0
 802091e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8020920:	687b      	ldr	r3, [r7, #4]
 8020922:	2200      	movs	r2, #0
 8020924:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8020926:	bf00      	nop
 8020928:	370c      	adds	r7, #12
 802092a:	46bd      	mov	sp, r7
 802092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020930:	4770      	bx	lr

08020932 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8020932:	b480      	push	{r7}
 8020934:	b085      	sub	sp, #20
 8020936:	af00      	add	r7, sp, #0
 8020938:	6078      	str	r0, [r7, #4]
 802093a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	685b      	ldr	r3, [r3, #4]
 8020940:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8020942:	683b      	ldr	r3, [r7, #0]
 8020944:	68fa      	ldr	r2, [r7, #12]
 8020946:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8020948:	68fb      	ldr	r3, [r7, #12]
 802094a:	689a      	ldr	r2, [r3, #8]
 802094c:	683b      	ldr	r3, [r7, #0]
 802094e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	689b      	ldr	r3, [r3, #8]
 8020954:	683a      	ldr	r2, [r7, #0]
 8020956:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8020958:	68fb      	ldr	r3, [r7, #12]
 802095a:	683a      	ldr	r2, [r7, #0]
 802095c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802095e:	683b      	ldr	r3, [r7, #0]
 8020960:	687a      	ldr	r2, [r7, #4]
 8020962:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	1c5a      	adds	r2, r3, #1
 802096a:	687b      	ldr	r3, [r7, #4]
 802096c:	601a      	str	r2, [r3, #0]
}
 802096e:	bf00      	nop
 8020970:	3714      	adds	r7, #20
 8020972:	46bd      	mov	sp, r7
 8020974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020978:	4770      	bx	lr

0802097a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802097a:	b480      	push	{r7}
 802097c:	b085      	sub	sp, #20
 802097e:	af00      	add	r7, sp, #0
 8020980:	6078      	str	r0, [r7, #4]
 8020982:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8020984:	683b      	ldr	r3, [r7, #0]
 8020986:	681b      	ldr	r3, [r3, #0]
 8020988:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802098a:	68bb      	ldr	r3, [r7, #8]
 802098c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020990:	d103      	bne.n	802099a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8020992:	687b      	ldr	r3, [r7, #4]
 8020994:	691b      	ldr	r3, [r3, #16]
 8020996:	60fb      	str	r3, [r7, #12]
 8020998:	e00c      	b.n	80209b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802099a:	687b      	ldr	r3, [r7, #4]
 802099c:	3308      	adds	r3, #8
 802099e:	60fb      	str	r3, [r7, #12]
 80209a0:	e002      	b.n	80209a8 <vListInsert+0x2e>
 80209a2:	68fb      	ldr	r3, [r7, #12]
 80209a4:	685b      	ldr	r3, [r3, #4]
 80209a6:	60fb      	str	r3, [r7, #12]
 80209a8:	68fb      	ldr	r3, [r7, #12]
 80209aa:	685b      	ldr	r3, [r3, #4]
 80209ac:	681b      	ldr	r3, [r3, #0]
 80209ae:	68ba      	ldr	r2, [r7, #8]
 80209b0:	429a      	cmp	r2, r3
 80209b2:	d2f6      	bcs.n	80209a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80209b4:	68fb      	ldr	r3, [r7, #12]
 80209b6:	685a      	ldr	r2, [r3, #4]
 80209b8:	683b      	ldr	r3, [r7, #0]
 80209ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80209bc:	683b      	ldr	r3, [r7, #0]
 80209be:	685b      	ldr	r3, [r3, #4]
 80209c0:	683a      	ldr	r2, [r7, #0]
 80209c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80209c4:	683b      	ldr	r3, [r7, #0]
 80209c6:	68fa      	ldr	r2, [r7, #12]
 80209c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80209ca:	68fb      	ldr	r3, [r7, #12]
 80209cc:	683a      	ldr	r2, [r7, #0]
 80209ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80209d0:	683b      	ldr	r3, [r7, #0]
 80209d2:	687a      	ldr	r2, [r7, #4]
 80209d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	681b      	ldr	r3, [r3, #0]
 80209da:	1c5a      	adds	r2, r3, #1
 80209dc:	687b      	ldr	r3, [r7, #4]
 80209de:	601a      	str	r2, [r3, #0]
}
 80209e0:	bf00      	nop
 80209e2:	3714      	adds	r7, #20
 80209e4:	46bd      	mov	sp, r7
 80209e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209ea:	4770      	bx	lr

080209ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80209ec:	b480      	push	{r7}
 80209ee:	b085      	sub	sp, #20
 80209f0:	af00      	add	r7, sp, #0
 80209f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	691b      	ldr	r3, [r3, #16]
 80209f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80209fa:	687b      	ldr	r3, [r7, #4]
 80209fc:	685b      	ldr	r3, [r3, #4]
 80209fe:	687a      	ldr	r2, [r7, #4]
 8020a00:	6892      	ldr	r2, [r2, #8]
 8020a02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	689b      	ldr	r3, [r3, #8]
 8020a08:	687a      	ldr	r2, [r7, #4]
 8020a0a:	6852      	ldr	r2, [r2, #4]
 8020a0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8020a0e:	68fb      	ldr	r3, [r7, #12]
 8020a10:	685b      	ldr	r3, [r3, #4]
 8020a12:	687a      	ldr	r2, [r7, #4]
 8020a14:	429a      	cmp	r2, r3
 8020a16:	d103      	bne.n	8020a20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	689a      	ldr	r2, [r3, #8]
 8020a1c:	68fb      	ldr	r3, [r7, #12]
 8020a1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	2200      	movs	r2, #0
 8020a24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8020a26:	68fb      	ldr	r3, [r7, #12]
 8020a28:	681b      	ldr	r3, [r3, #0]
 8020a2a:	1e5a      	subs	r2, r3, #1
 8020a2c:	68fb      	ldr	r3, [r7, #12]
 8020a2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8020a30:	68fb      	ldr	r3, [r7, #12]
 8020a32:	681b      	ldr	r3, [r3, #0]
}
 8020a34:	4618      	mov	r0, r3
 8020a36:	3714      	adds	r7, #20
 8020a38:	46bd      	mov	sp, r7
 8020a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a3e:	4770      	bx	lr

08020a40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020a40:	b580      	push	{r7, lr}
 8020a42:	b084      	sub	sp, #16
 8020a44:	af00      	add	r7, sp, #0
 8020a46:	6078      	str	r0, [r7, #4]
 8020a48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8020a4a:	687b      	ldr	r3, [r7, #4]
 8020a4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	d10a      	bne.n	8020a6a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8020a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a58:	f383 8811 	msr	BASEPRI, r3
 8020a5c:	f3bf 8f6f 	isb	sy
 8020a60:	f3bf 8f4f 	dsb	sy
 8020a64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8020a66:	bf00      	nop
 8020a68:	e7fe      	b.n	8020a68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8020a6a:	f002 fd9b 	bl	80235a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020a6e:	68fb      	ldr	r3, [r7, #12]
 8020a70:	681a      	ldr	r2, [r3, #0]
 8020a72:	68fb      	ldr	r3, [r7, #12]
 8020a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020a76:	68f9      	ldr	r1, [r7, #12]
 8020a78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020a7a:	fb01 f303 	mul.w	r3, r1, r3
 8020a7e:	441a      	add	r2, r3
 8020a80:	68fb      	ldr	r3, [r7, #12]
 8020a82:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8020a84:	68fb      	ldr	r3, [r7, #12]
 8020a86:	2200      	movs	r2, #0
 8020a88:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8020a8a:	68fb      	ldr	r3, [r7, #12]
 8020a8c:	681a      	ldr	r2, [r3, #0]
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020a92:	68fb      	ldr	r3, [r7, #12]
 8020a94:	681a      	ldr	r2, [r3, #0]
 8020a96:	68fb      	ldr	r3, [r7, #12]
 8020a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020a9a:	3b01      	subs	r3, #1
 8020a9c:	68f9      	ldr	r1, [r7, #12]
 8020a9e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020aa0:	fb01 f303 	mul.w	r3, r1, r3
 8020aa4:	441a      	add	r2, r3
 8020aa6:	68fb      	ldr	r3, [r7, #12]
 8020aa8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	22ff      	movs	r2, #255	; 0xff
 8020aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8020ab2:	68fb      	ldr	r3, [r7, #12]
 8020ab4:	22ff      	movs	r2, #255	; 0xff
 8020ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8020aba:	683b      	ldr	r3, [r7, #0]
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d114      	bne.n	8020aea <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020ac0:	68fb      	ldr	r3, [r7, #12]
 8020ac2:	691b      	ldr	r3, [r3, #16]
 8020ac4:	2b00      	cmp	r3, #0
 8020ac6:	d01a      	beq.n	8020afe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020ac8:	68fb      	ldr	r3, [r7, #12]
 8020aca:	3310      	adds	r3, #16
 8020acc:	4618      	mov	r0, r3
 8020ace:	f001 fd05 	bl	80224dc <xTaskRemoveFromEventList>
 8020ad2:	4603      	mov	r3, r0
 8020ad4:	2b00      	cmp	r3, #0
 8020ad6:	d012      	beq.n	8020afe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8020ad8:	4b0c      	ldr	r3, [pc, #48]	; (8020b0c <xQueueGenericReset+0xcc>)
 8020ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ade:	601a      	str	r2, [r3, #0]
 8020ae0:	f3bf 8f4f 	dsb	sy
 8020ae4:	f3bf 8f6f 	isb	sy
 8020ae8:	e009      	b.n	8020afe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8020aea:	68fb      	ldr	r3, [r7, #12]
 8020aec:	3310      	adds	r3, #16
 8020aee:	4618      	mov	r0, r3
 8020af0:	f7ff fef2 	bl	80208d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8020af4:	68fb      	ldr	r3, [r7, #12]
 8020af6:	3324      	adds	r3, #36	; 0x24
 8020af8:	4618      	mov	r0, r3
 8020afa:	f7ff feed 	bl	80208d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8020afe:	f002 fd81 	bl	8023604 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8020b02:	2301      	movs	r3, #1
}
 8020b04:	4618      	mov	r0, r3
 8020b06:	3710      	adds	r7, #16
 8020b08:	46bd      	mov	sp, r7
 8020b0a:	bd80      	pop	{r7, pc}
 8020b0c:	e000ed04 	.word	0xe000ed04

08020b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8020b10:	b580      	push	{r7, lr}
 8020b12:	b08e      	sub	sp, #56	; 0x38
 8020b14:	af02      	add	r7, sp, #8
 8020b16:	60f8      	str	r0, [r7, #12]
 8020b18:	60b9      	str	r1, [r7, #8]
 8020b1a:	607a      	str	r2, [r7, #4]
 8020b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020b1e:	68fb      	ldr	r3, [r7, #12]
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	d10a      	bne.n	8020b3a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8020b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b28:	f383 8811 	msr	BASEPRI, r3
 8020b2c:	f3bf 8f6f 	isb	sy
 8020b30:	f3bf 8f4f 	dsb	sy
 8020b34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020b36:	bf00      	nop
 8020b38:	e7fe      	b.n	8020b38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8020b3a:	683b      	ldr	r3, [r7, #0]
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d10a      	bne.n	8020b56 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8020b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b44:	f383 8811 	msr	BASEPRI, r3
 8020b48:	f3bf 8f6f 	isb	sy
 8020b4c:	f3bf 8f4f 	dsb	sy
 8020b50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020b52:	bf00      	nop
 8020b54:	e7fe      	b.n	8020b54 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8020b56:	687b      	ldr	r3, [r7, #4]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d002      	beq.n	8020b62 <xQueueGenericCreateStatic+0x52>
 8020b5c:	68bb      	ldr	r3, [r7, #8]
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	d001      	beq.n	8020b66 <xQueueGenericCreateStatic+0x56>
 8020b62:	2301      	movs	r3, #1
 8020b64:	e000      	b.n	8020b68 <xQueueGenericCreateStatic+0x58>
 8020b66:	2300      	movs	r3, #0
 8020b68:	2b00      	cmp	r3, #0
 8020b6a:	d10a      	bne.n	8020b82 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8020b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b70:	f383 8811 	msr	BASEPRI, r3
 8020b74:	f3bf 8f6f 	isb	sy
 8020b78:	f3bf 8f4f 	dsb	sy
 8020b7c:	623b      	str	r3, [r7, #32]
}
 8020b7e:	bf00      	nop
 8020b80:	e7fe      	b.n	8020b80 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8020b82:	687b      	ldr	r3, [r7, #4]
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	d102      	bne.n	8020b8e <xQueueGenericCreateStatic+0x7e>
 8020b88:	68bb      	ldr	r3, [r7, #8]
 8020b8a:	2b00      	cmp	r3, #0
 8020b8c:	d101      	bne.n	8020b92 <xQueueGenericCreateStatic+0x82>
 8020b8e:	2301      	movs	r3, #1
 8020b90:	e000      	b.n	8020b94 <xQueueGenericCreateStatic+0x84>
 8020b92:	2300      	movs	r3, #0
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d10a      	bne.n	8020bae <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8020b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b9c:	f383 8811 	msr	BASEPRI, r3
 8020ba0:	f3bf 8f6f 	isb	sy
 8020ba4:	f3bf 8f4f 	dsb	sy
 8020ba8:	61fb      	str	r3, [r7, #28]
}
 8020baa:	bf00      	nop
 8020bac:	e7fe      	b.n	8020bac <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8020bae:	2350      	movs	r3, #80	; 0x50
 8020bb0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8020bb2:	697b      	ldr	r3, [r7, #20]
 8020bb4:	2b50      	cmp	r3, #80	; 0x50
 8020bb6:	d00a      	beq.n	8020bce <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8020bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020bbc:	f383 8811 	msr	BASEPRI, r3
 8020bc0:	f3bf 8f6f 	isb	sy
 8020bc4:	f3bf 8f4f 	dsb	sy
 8020bc8:	61bb      	str	r3, [r7, #24]
}
 8020bca:	bf00      	nop
 8020bcc:	e7fe      	b.n	8020bcc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8020bce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020bd0:	683b      	ldr	r3, [r7, #0]
 8020bd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8020bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bd6:	2b00      	cmp	r3, #0
 8020bd8:	d00d      	beq.n	8020bf6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8020bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020bdc:	2201      	movs	r2, #1
 8020bde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020be2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8020be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020be8:	9300      	str	r3, [sp, #0]
 8020bea:	4613      	mov	r3, r2
 8020bec:	687a      	ldr	r2, [r7, #4]
 8020bee:	68b9      	ldr	r1, [r7, #8]
 8020bf0:	68f8      	ldr	r0, [r7, #12]
 8020bf2:	f000 f83f 	bl	8020c74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8020bf8:	4618      	mov	r0, r3
 8020bfa:	3730      	adds	r7, #48	; 0x30
 8020bfc:	46bd      	mov	sp, r7
 8020bfe:	bd80      	pop	{r7, pc}

08020c00 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8020c00:	b580      	push	{r7, lr}
 8020c02:	b08a      	sub	sp, #40	; 0x28
 8020c04:	af02      	add	r7, sp, #8
 8020c06:	60f8      	str	r0, [r7, #12]
 8020c08:	60b9      	str	r1, [r7, #8]
 8020c0a:	4613      	mov	r3, r2
 8020c0c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020c0e:	68fb      	ldr	r3, [r7, #12]
 8020c10:	2b00      	cmp	r3, #0
 8020c12:	d10a      	bne.n	8020c2a <xQueueGenericCreate+0x2a>
	__asm volatile
 8020c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c18:	f383 8811 	msr	BASEPRI, r3
 8020c1c:	f3bf 8f6f 	isb	sy
 8020c20:	f3bf 8f4f 	dsb	sy
 8020c24:	613b      	str	r3, [r7, #16]
}
 8020c26:	bf00      	nop
 8020c28:	e7fe      	b.n	8020c28 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020c2a:	68fb      	ldr	r3, [r7, #12]
 8020c2c:	68ba      	ldr	r2, [r7, #8]
 8020c2e:	fb02 f303 	mul.w	r3, r2, r3
 8020c32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8020c34:	69fb      	ldr	r3, [r7, #28]
 8020c36:	3350      	adds	r3, #80	; 0x50
 8020c38:	4618      	mov	r0, r3
 8020c3a:	f002 fdd5 	bl	80237e8 <pvPortMalloc>
 8020c3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020c40:	69bb      	ldr	r3, [r7, #24]
 8020c42:	2b00      	cmp	r3, #0
 8020c44:	d011      	beq.n	8020c6a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8020c46:	69bb      	ldr	r3, [r7, #24]
 8020c48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020c4a:	697b      	ldr	r3, [r7, #20]
 8020c4c:	3350      	adds	r3, #80	; 0x50
 8020c4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020c50:	69bb      	ldr	r3, [r7, #24]
 8020c52:	2200      	movs	r2, #0
 8020c54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020c58:	79fa      	ldrb	r2, [r7, #7]
 8020c5a:	69bb      	ldr	r3, [r7, #24]
 8020c5c:	9300      	str	r3, [sp, #0]
 8020c5e:	4613      	mov	r3, r2
 8020c60:	697a      	ldr	r2, [r7, #20]
 8020c62:	68b9      	ldr	r1, [r7, #8]
 8020c64:	68f8      	ldr	r0, [r7, #12]
 8020c66:	f000 f805 	bl	8020c74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020c6a:	69bb      	ldr	r3, [r7, #24]
	}
 8020c6c:	4618      	mov	r0, r3
 8020c6e:	3720      	adds	r7, #32
 8020c70:	46bd      	mov	sp, r7
 8020c72:	bd80      	pop	{r7, pc}

08020c74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8020c74:	b580      	push	{r7, lr}
 8020c76:	b084      	sub	sp, #16
 8020c78:	af00      	add	r7, sp, #0
 8020c7a:	60f8      	str	r0, [r7, #12]
 8020c7c:	60b9      	str	r1, [r7, #8]
 8020c7e:	607a      	str	r2, [r7, #4]
 8020c80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8020c82:	68bb      	ldr	r3, [r7, #8]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d103      	bne.n	8020c90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8020c88:	69bb      	ldr	r3, [r7, #24]
 8020c8a:	69ba      	ldr	r2, [r7, #24]
 8020c8c:	601a      	str	r2, [r3, #0]
 8020c8e:	e002      	b.n	8020c96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020c90:	69bb      	ldr	r3, [r7, #24]
 8020c92:	687a      	ldr	r2, [r7, #4]
 8020c94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8020c96:	69bb      	ldr	r3, [r7, #24]
 8020c98:	68fa      	ldr	r2, [r7, #12]
 8020c9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8020c9c:	69bb      	ldr	r3, [r7, #24]
 8020c9e:	68ba      	ldr	r2, [r7, #8]
 8020ca0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8020ca2:	2101      	movs	r1, #1
 8020ca4:	69b8      	ldr	r0, [r7, #24]
 8020ca6:	f7ff fecb 	bl	8020a40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8020caa:	69bb      	ldr	r3, [r7, #24]
 8020cac:	78fa      	ldrb	r2, [r7, #3]
 8020cae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8020cb2:	bf00      	nop
 8020cb4:	3710      	adds	r7, #16
 8020cb6:	46bd      	mov	sp, r7
 8020cb8:	bd80      	pop	{r7, pc}

08020cba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8020cba:	b580      	push	{r7, lr}
 8020cbc:	b082      	sub	sp, #8
 8020cbe:	af00      	add	r7, sp, #0
 8020cc0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	2b00      	cmp	r3, #0
 8020cc6:	d00e      	beq.n	8020ce6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8020cc8:	687b      	ldr	r3, [r7, #4]
 8020cca:	2200      	movs	r2, #0
 8020ccc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8020cce:	687b      	ldr	r3, [r7, #4]
 8020cd0:	2200      	movs	r2, #0
 8020cd2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8020cd4:	687b      	ldr	r3, [r7, #4]
 8020cd6:	2200      	movs	r2, #0
 8020cd8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8020cda:	2300      	movs	r3, #0
 8020cdc:	2200      	movs	r2, #0
 8020cde:	2100      	movs	r1, #0
 8020ce0:	6878      	ldr	r0, [r7, #4]
 8020ce2:	f000 f8a1 	bl	8020e28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8020ce6:	bf00      	nop
 8020ce8:	3708      	adds	r7, #8
 8020cea:	46bd      	mov	sp, r7
 8020cec:	bd80      	pop	{r7, pc}

08020cee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8020cee:	b580      	push	{r7, lr}
 8020cf0:	b086      	sub	sp, #24
 8020cf2:	af00      	add	r7, sp, #0
 8020cf4:	4603      	mov	r3, r0
 8020cf6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020cf8:	2301      	movs	r3, #1
 8020cfa:	617b      	str	r3, [r7, #20]
 8020cfc:	2300      	movs	r3, #0
 8020cfe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8020d00:	79fb      	ldrb	r3, [r7, #7]
 8020d02:	461a      	mov	r2, r3
 8020d04:	6939      	ldr	r1, [r7, #16]
 8020d06:	6978      	ldr	r0, [r7, #20]
 8020d08:	f7ff ff7a 	bl	8020c00 <xQueueGenericCreate>
 8020d0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020d0e:	68f8      	ldr	r0, [r7, #12]
 8020d10:	f7ff ffd3 	bl	8020cba <prvInitialiseMutex>

		return xNewQueue;
 8020d14:	68fb      	ldr	r3, [r7, #12]
	}
 8020d16:	4618      	mov	r0, r3
 8020d18:	3718      	adds	r7, #24
 8020d1a:	46bd      	mov	sp, r7
 8020d1c:	bd80      	pop	{r7, pc}

08020d1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8020d1e:	b580      	push	{r7, lr}
 8020d20:	b088      	sub	sp, #32
 8020d22:	af02      	add	r7, sp, #8
 8020d24:	4603      	mov	r3, r0
 8020d26:	6039      	str	r1, [r7, #0]
 8020d28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020d2a:	2301      	movs	r3, #1
 8020d2c:	617b      	str	r3, [r7, #20]
 8020d2e:	2300      	movs	r3, #0
 8020d30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8020d32:	79fb      	ldrb	r3, [r7, #7]
 8020d34:	9300      	str	r3, [sp, #0]
 8020d36:	683b      	ldr	r3, [r7, #0]
 8020d38:	2200      	movs	r2, #0
 8020d3a:	6939      	ldr	r1, [r7, #16]
 8020d3c:	6978      	ldr	r0, [r7, #20]
 8020d3e:	f7ff fee7 	bl	8020b10 <xQueueGenericCreateStatic>
 8020d42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020d44:	68f8      	ldr	r0, [r7, #12]
 8020d46:	f7ff ffb8 	bl	8020cba <prvInitialiseMutex>

		return xNewQueue;
 8020d4a:	68fb      	ldr	r3, [r7, #12]
	}
 8020d4c:	4618      	mov	r0, r3
 8020d4e:	3718      	adds	r7, #24
 8020d50:	46bd      	mov	sp, r7
 8020d52:	bd80      	pop	{r7, pc}

08020d54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8020d54:	b590      	push	{r4, r7, lr}
 8020d56:	b087      	sub	sp, #28
 8020d58:	af00      	add	r7, sp, #0
 8020d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020d5c:	687b      	ldr	r3, [r7, #4]
 8020d5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020d60:	693b      	ldr	r3, [r7, #16]
 8020d62:	2b00      	cmp	r3, #0
 8020d64:	d10a      	bne.n	8020d7c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8020d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d6a:	f383 8811 	msr	BASEPRI, r3
 8020d6e:	f3bf 8f6f 	isb	sy
 8020d72:	f3bf 8f4f 	dsb	sy
 8020d76:	60fb      	str	r3, [r7, #12]
}
 8020d78:	bf00      	nop
 8020d7a:	e7fe      	b.n	8020d7a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020d7c:	693b      	ldr	r3, [r7, #16]
 8020d7e:	689c      	ldr	r4, [r3, #8]
 8020d80:	f001 fda6 	bl	80228d0 <xTaskGetCurrentTaskHandle>
 8020d84:	4603      	mov	r3, r0
 8020d86:	429c      	cmp	r4, r3
 8020d88:	d111      	bne.n	8020dae <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8020d8a:	693b      	ldr	r3, [r7, #16]
 8020d8c:	68db      	ldr	r3, [r3, #12]
 8020d8e:	1e5a      	subs	r2, r3, #1
 8020d90:	693b      	ldr	r3, [r7, #16]
 8020d92:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8020d94:	693b      	ldr	r3, [r7, #16]
 8020d96:	68db      	ldr	r3, [r3, #12]
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d105      	bne.n	8020da8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8020d9c:	2300      	movs	r3, #0
 8020d9e:	2200      	movs	r2, #0
 8020da0:	2100      	movs	r1, #0
 8020da2:	6938      	ldr	r0, [r7, #16]
 8020da4:	f000 f840 	bl	8020e28 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020da8:	2301      	movs	r3, #1
 8020daa:	617b      	str	r3, [r7, #20]
 8020dac:	e001      	b.n	8020db2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8020dae:	2300      	movs	r3, #0
 8020db0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8020db2:	697b      	ldr	r3, [r7, #20]
	}
 8020db4:	4618      	mov	r0, r3
 8020db6:	371c      	adds	r7, #28
 8020db8:	46bd      	mov	sp, r7
 8020dba:	bd90      	pop	{r4, r7, pc}

08020dbc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8020dbc:	b590      	push	{r4, r7, lr}
 8020dbe:	b087      	sub	sp, #28
 8020dc0:	af00      	add	r7, sp, #0
 8020dc2:	6078      	str	r0, [r7, #4]
 8020dc4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020dc6:	687b      	ldr	r3, [r7, #4]
 8020dc8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020dca:	693b      	ldr	r3, [r7, #16]
 8020dcc:	2b00      	cmp	r3, #0
 8020dce:	d10a      	bne.n	8020de6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8020dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020dd4:	f383 8811 	msr	BASEPRI, r3
 8020dd8:	f3bf 8f6f 	isb	sy
 8020ddc:	f3bf 8f4f 	dsb	sy
 8020de0:	60fb      	str	r3, [r7, #12]
}
 8020de2:	bf00      	nop
 8020de4:	e7fe      	b.n	8020de4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020de6:	693b      	ldr	r3, [r7, #16]
 8020de8:	689c      	ldr	r4, [r3, #8]
 8020dea:	f001 fd71 	bl	80228d0 <xTaskGetCurrentTaskHandle>
 8020dee:	4603      	mov	r3, r0
 8020df0:	429c      	cmp	r4, r3
 8020df2:	d107      	bne.n	8020e04 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020df4:	693b      	ldr	r3, [r7, #16]
 8020df6:	68db      	ldr	r3, [r3, #12]
 8020df8:	1c5a      	adds	r2, r3, #1
 8020dfa:	693b      	ldr	r3, [r7, #16]
 8020dfc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8020dfe:	2301      	movs	r3, #1
 8020e00:	617b      	str	r3, [r7, #20]
 8020e02:	e00c      	b.n	8020e1e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020e04:	6839      	ldr	r1, [r7, #0]
 8020e06:	6938      	ldr	r0, [r7, #16]
 8020e08:	f000 fa88 	bl	802131c <xQueueSemaphoreTake>
 8020e0c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8020e0e:	697b      	ldr	r3, [r7, #20]
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	d004      	beq.n	8020e1e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020e14:	693b      	ldr	r3, [r7, #16]
 8020e16:	68db      	ldr	r3, [r3, #12]
 8020e18:	1c5a      	adds	r2, r3, #1
 8020e1a:	693b      	ldr	r3, [r7, #16]
 8020e1c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8020e1e:	697b      	ldr	r3, [r7, #20]
	}
 8020e20:	4618      	mov	r0, r3
 8020e22:	371c      	adds	r7, #28
 8020e24:	46bd      	mov	sp, r7
 8020e26:	bd90      	pop	{r4, r7, pc}

08020e28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020e28:	b580      	push	{r7, lr}
 8020e2a:	b08e      	sub	sp, #56	; 0x38
 8020e2c:	af00      	add	r7, sp, #0
 8020e2e:	60f8      	str	r0, [r7, #12]
 8020e30:	60b9      	str	r1, [r7, #8]
 8020e32:	607a      	str	r2, [r7, #4]
 8020e34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020e36:	2300      	movs	r3, #0
 8020e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020e3a:	68fb      	ldr	r3, [r7, #12]
 8020e3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d10a      	bne.n	8020e5a <xQueueGenericSend+0x32>
	__asm volatile
 8020e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e48:	f383 8811 	msr	BASEPRI, r3
 8020e4c:	f3bf 8f6f 	isb	sy
 8020e50:	f3bf 8f4f 	dsb	sy
 8020e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020e56:	bf00      	nop
 8020e58:	e7fe      	b.n	8020e58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020e5a:	68bb      	ldr	r3, [r7, #8]
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d103      	bne.n	8020e68 <xQueueGenericSend+0x40>
 8020e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	d101      	bne.n	8020e6c <xQueueGenericSend+0x44>
 8020e68:	2301      	movs	r3, #1
 8020e6a:	e000      	b.n	8020e6e <xQueueGenericSend+0x46>
 8020e6c:	2300      	movs	r3, #0
 8020e6e:	2b00      	cmp	r3, #0
 8020e70:	d10a      	bne.n	8020e88 <xQueueGenericSend+0x60>
	__asm volatile
 8020e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e76:	f383 8811 	msr	BASEPRI, r3
 8020e7a:	f3bf 8f6f 	isb	sy
 8020e7e:	f3bf 8f4f 	dsb	sy
 8020e82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020e84:	bf00      	nop
 8020e86:	e7fe      	b.n	8020e86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020e88:	683b      	ldr	r3, [r7, #0]
 8020e8a:	2b02      	cmp	r3, #2
 8020e8c:	d103      	bne.n	8020e96 <xQueueGenericSend+0x6e>
 8020e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020e92:	2b01      	cmp	r3, #1
 8020e94:	d101      	bne.n	8020e9a <xQueueGenericSend+0x72>
 8020e96:	2301      	movs	r3, #1
 8020e98:	e000      	b.n	8020e9c <xQueueGenericSend+0x74>
 8020e9a:	2300      	movs	r3, #0
 8020e9c:	2b00      	cmp	r3, #0
 8020e9e:	d10a      	bne.n	8020eb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8020ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ea4:	f383 8811 	msr	BASEPRI, r3
 8020ea8:	f3bf 8f6f 	isb	sy
 8020eac:	f3bf 8f4f 	dsb	sy
 8020eb0:	623b      	str	r3, [r7, #32]
}
 8020eb2:	bf00      	nop
 8020eb4:	e7fe      	b.n	8020eb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020eb6:	f001 fd1b 	bl	80228f0 <xTaskGetSchedulerState>
 8020eba:	4603      	mov	r3, r0
 8020ebc:	2b00      	cmp	r3, #0
 8020ebe:	d102      	bne.n	8020ec6 <xQueueGenericSend+0x9e>
 8020ec0:	687b      	ldr	r3, [r7, #4]
 8020ec2:	2b00      	cmp	r3, #0
 8020ec4:	d101      	bne.n	8020eca <xQueueGenericSend+0xa2>
 8020ec6:	2301      	movs	r3, #1
 8020ec8:	e000      	b.n	8020ecc <xQueueGenericSend+0xa4>
 8020eca:	2300      	movs	r3, #0
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d10a      	bne.n	8020ee6 <xQueueGenericSend+0xbe>
	__asm volatile
 8020ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ed4:	f383 8811 	msr	BASEPRI, r3
 8020ed8:	f3bf 8f6f 	isb	sy
 8020edc:	f3bf 8f4f 	dsb	sy
 8020ee0:	61fb      	str	r3, [r7, #28]
}
 8020ee2:	bf00      	nop
 8020ee4:	e7fe      	b.n	8020ee4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020ee6:	f002 fb5d 	bl	80235a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020ef2:	429a      	cmp	r2, r3
 8020ef4:	d302      	bcc.n	8020efc <xQueueGenericSend+0xd4>
 8020ef6:	683b      	ldr	r3, [r7, #0]
 8020ef8:	2b02      	cmp	r3, #2
 8020efa:	d129      	bne.n	8020f50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020efc:	683a      	ldr	r2, [r7, #0]
 8020efe:	68b9      	ldr	r1, [r7, #8]
 8020f00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f02:	f000 fccd 	bl	80218a0 <prvCopyDataToQueue>
 8020f06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d010      	beq.n	8020f32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f12:	3324      	adds	r3, #36	; 0x24
 8020f14:	4618      	mov	r0, r3
 8020f16:	f001 fae1 	bl	80224dc <xTaskRemoveFromEventList>
 8020f1a:	4603      	mov	r3, r0
 8020f1c:	2b00      	cmp	r3, #0
 8020f1e:	d013      	beq.n	8020f48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020f20:	4b3f      	ldr	r3, [pc, #252]	; (8021020 <xQueueGenericSend+0x1f8>)
 8020f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020f26:	601a      	str	r2, [r3, #0]
 8020f28:	f3bf 8f4f 	dsb	sy
 8020f2c:	f3bf 8f6f 	isb	sy
 8020f30:	e00a      	b.n	8020f48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d007      	beq.n	8020f48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020f38:	4b39      	ldr	r3, [pc, #228]	; (8021020 <xQueueGenericSend+0x1f8>)
 8020f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020f3e:	601a      	str	r2, [r3, #0]
 8020f40:	f3bf 8f4f 	dsb	sy
 8020f44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020f48:	f002 fb5c 	bl	8023604 <vPortExitCritical>
				return pdPASS;
 8020f4c:	2301      	movs	r3, #1
 8020f4e:	e063      	b.n	8021018 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020f50:	687b      	ldr	r3, [r7, #4]
 8020f52:	2b00      	cmp	r3, #0
 8020f54:	d103      	bne.n	8020f5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020f56:	f002 fb55 	bl	8023604 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020f5a:	2300      	movs	r3, #0
 8020f5c:	e05c      	b.n	8021018 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020f60:	2b00      	cmp	r3, #0
 8020f62:	d106      	bne.n	8020f72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020f64:	f107 0314 	add.w	r3, r7, #20
 8020f68:	4618      	mov	r0, r3
 8020f6a:	f001 fb1b 	bl	80225a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020f6e:	2301      	movs	r3, #1
 8020f70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020f72:	f002 fb47 	bl	8023604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020f76:	f001 f863 	bl	8022040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020f7a:	f002 fb13 	bl	80235a4 <vPortEnterCritical>
 8020f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020f84:	b25b      	sxtb	r3, r3
 8020f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f8a:	d103      	bne.n	8020f94 <xQueueGenericSend+0x16c>
 8020f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f8e:	2200      	movs	r2, #0
 8020f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020f9a:	b25b      	sxtb	r3, r3
 8020f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020fa0:	d103      	bne.n	8020faa <xQueueGenericSend+0x182>
 8020fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fa4:	2200      	movs	r2, #0
 8020fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020faa:	f002 fb2b 	bl	8023604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020fae:	1d3a      	adds	r2, r7, #4
 8020fb0:	f107 0314 	add.w	r3, r7, #20
 8020fb4:	4611      	mov	r1, r2
 8020fb6:	4618      	mov	r0, r3
 8020fb8:	f001 fb0a 	bl	80225d0 <xTaskCheckForTimeOut>
 8020fbc:	4603      	mov	r3, r0
 8020fbe:	2b00      	cmp	r3, #0
 8020fc0:	d124      	bne.n	802100c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8020fc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020fc4:	f000 fd64 	bl	8021a90 <prvIsQueueFull>
 8020fc8:	4603      	mov	r3, r0
 8020fca:	2b00      	cmp	r3, #0
 8020fcc:	d018      	beq.n	8021000 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8020fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fd0:	3310      	adds	r3, #16
 8020fd2:	687a      	ldr	r2, [r7, #4]
 8020fd4:	4611      	mov	r1, r2
 8020fd6:	4618      	mov	r0, r3
 8020fd8:	f001 fa30 	bl	802243c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8020fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020fde:	f000 fcef 	bl	80219c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020fe2:	f001 f83b 	bl	802205c <xTaskResumeAll>
 8020fe6:	4603      	mov	r3, r0
 8020fe8:	2b00      	cmp	r3, #0
 8020fea:	f47f af7c 	bne.w	8020ee6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8020fee:	4b0c      	ldr	r3, [pc, #48]	; (8021020 <xQueueGenericSend+0x1f8>)
 8020ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ff4:	601a      	str	r2, [r3, #0]
 8020ff6:	f3bf 8f4f 	dsb	sy
 8020ffa:	f3bf 8f6f 	isb	sy
 8020ffe:	e772      	b.n	8020ee6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8021000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021002:	f000 fcdd 	bl	80219c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021006:	f001 f829 	bl	802205c <xTaskResumeAll>
 802100a:	e76c      	b.n	8020ee6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 802100c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802100e:	f000 fcd7 	bl	80219c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021012:	f001 f823 	bl	802205c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8021016:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8021018:	4618      	mov	r0, r3
 802101a:	3738      	adds	r7, #56	; 0x38
 802101c:	46bd      	mov	sp, r7
 802101e:	bd80      	pop	{r7, pc}
 8021020:	e000ed04 	.word	0xe000ed04

08021024 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8021024:	b580      	push	{r7, lr}
 8021026:	b090      	sub	sp, #64	; 0x40
 8021028:	af00      	add	r7, sp, #0
 802102a:	60f8      	str	r0, [r7, #12]
 802102c:	60b9      	str	r1, [r7, #8]
 802102e:	607a      	str	r2, [r7, #4]
 8021030:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8021036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021038:	2b00      	cmp	r3, #0
 802103a:	d10a      	bne.n	8021052 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 802103c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021040:	f383 8811 	msr	BASEPRI, r3
 8021044:	f3bf 8f6f 	isb	sy
 8021048:	f3bf 8f4f 	dsb	sy
 802104c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802104e:	bf00      	nop
 8021050:	e7fe      	b.n	8021050 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021052:	68bb      	ldr	r3, [r7, #8]
 8021054:	2b00      	cmp	r3, #0
 8021056:	d103      	bne.n	8021060 <xQueueGenericSendFromISR+0x3c>
 8021058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802105c:	2b00      	cmp	r3, #0
 802105e:	d101      	bne.n	8021064 <xQueueGenericSendFromISR+0x40>
 8021060:	2301      	movs	r3, #1
 8021062:	e000      	b.n	8021066 <xQueueGenericSendFromISR+0x42>
 8021064:	2300      	movs	r3, #0
 8021066:	2b00      	cmp	r3, #0
 8021068:	d10a      	bne.n	8021080 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 802106a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802106e:	f383 8811 	msr	BASEPRI, r3
 8021072:	f3bf 8f6f 	isb	sy
 8021076:	f3bf 8f4f 	dsb	sy
 802107a:	627b      	str	r3, [r7, #36]	; 0x24
}
 802107c:	bf00      	nop
 802107e:	e7fe      	b.n	802107e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8021080:	683b      	ldr	r3, [r7, #0]
 8021082:	2b02      	cmp	r3, #2
 8021084:	d103      	bne.n	802108e <xQueueGenericSendFromISR+0x6a>
 8021086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802108a:	2b01      	cmp	r3, #1
 802108c:	d101      	bne.n	8021092 <xQueueGenericSendFromISR+0x6e>
 802108e:	2301      	movs	r3, #1
 8021090:	e000      	b.n	8021094 <xQueueGenericSendFromISR+0x70>
 8021092:	2300      	movs	r3, #0
 8021094:	2b00      	cmp	r3, #0
 8021096:	d10a      	bne.n	80210ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8021098:	f04f 0350 	mov.w	r3, #80	; 0x50
 802109c:	f383 8811 	msr	BASEPRI, r3
 80210a0:	f3bf 8f6f 	isb	sy
 80210a4:	f3bf 8f4f 	dsb	sy
 80210a8:	623b      	str	r3, [r7, #32]
}
 80210aa:	bf00      	nop
 80210ac:	e7fe      	b.n	80210ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80210ae:	f002 fb5b 	bl	8023768 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80210b2:	f3ef 8211 	mrs	r2, BASEPRI
 80210b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80210ba:	f383 8811 	msr	BASEPRI, r3
 80210be:	f3bf 8f6f 	isb	sy
 80210c2:	f3bf 8f4f 	dsb	sy
 80210c6:	61fa      	str	r2, [r7, #28]
 80210c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80210ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80210cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80210ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80210d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80210d6:	429a      	cmp	r2, r3
 80210d8:	d302      	bcc.n	80210e0 <xQueueGenericSendFromISR+0xbc>
 80210da:	683b      	ldr	r3, [r7, #0]
 80210dc:	2b02      	cmp	r3, #2
 80210de:	d12f      	bne.n	8021140 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80210e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80210e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80210ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80210f0:	683a      	ldr	r2, [r7, #0]
 80210f2:	68b9      	ldr	r1, [r7, #8]
 80210f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80210f6:	f000 fbd3 	bl	80218a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80210fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80210fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021102:	d112      	bne.n	802112a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021108:	2b00      	cmp	r3, #0
 802110a:	d016      	beq.n	802113a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802110e:	3324      	adds	r3, #36	; 0x24
 8021110:	4618      	mov	r0, r3
 8021112:	f001 f9e3 	bl	80224dc <xTaskRemoveFromEventList>
 8021116:	4603      	mov	r3, r0
 8021118:	2b00      	cmp	r3, #0
 802111a:	d00e      	beq.n	802113a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 802111c:	687b      	ldr	r3, [r7, #4]
 802111e:	2b00      	cmp	r3, #0
 8021120:	d00b      	beq.n	802113a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8021122:	687b      	ldr	r3, [r7, #4]
 8021124:	2201      	movs	r2, #1
 8021126:	601a      	str	r2, [r3, #0]
 8021128:	e007      	b.n	802113a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 802112a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 802112e:	3301      	adds	r3, #1
 8021130:	b2db      	uxtb	r3, r3
 8021132:	b25a      	sxtb	r2, r3
 8021134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021136:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 802113a:	2301      	movs	r3, #1
 802113c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 802113e:	e001      	b.n	8021144 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8021140:	2300      	movs	r3, #0
 8021142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021146:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8021148:	697b      	ldr	r3, [r7, #20]
 802114a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 802114e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8021150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8021152:	4618      	mov	r0, r3
 8021154:	3740      	adds	r7, #64	; 0x40
 8021156:	46bd      	mov	sp, r7
 8021158:	bd80      	pop	{r7, pc}
	...

0802115c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802115c:	b580      	push	{r7, lr}
 802115e:	b08c      	sub	sp, #48	; 0x30
 8021160:	af00      	add	r7, sp, #0
 8021162:	60f8      	str	r0, [r7, #12]
 8021164:	60b9      	str	r1, [r7, #8]
 8021166:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021168:	2300      	movs	r3, #0
 802116a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802116c:	68fb      	ldr	r3, [r7, #12]
 802116e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021172:	2b00      	cmp	r3, #0
 8021174:	d10a      	bne.n	802118c <xQueueReceive+0x30>
	__asm volatile
 8021176:	f04f 0350 	mov.w	r3, #80	; 0x50
 802117a:	f383 8811 	msr	BASEPRI, r3
 802117e:	f3bf 8f6f 	isb	sy
 8021182:	f3bf 8f4f 	dsb	sy
 8021186:	623b      	str	r3, [r7, #32]
}
 8021188:	bf00      	nop
 802118a:	e7fe      	b.n	802118a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802118c:	68bb      	ldr	r3, [r7, #8]
 802118e:	2b00      	cmp	r3, #0
 8021190:	d103      	bne.n	802119a <xQueueReceive+0x3e>
 8021192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021196:	2b00      	cmp	r3, #0
 8021198:	d101      	bne.n	802119e <xQueueReceive+0x42>
 802119a:	2301      	movs	r3, #1
 802119c:	e000      	b.n	80211a0 <xQueueReceive+0x44>
 802119e:	2300      	movs	r3, #0
 80211a0:	2b00      	cmp	r3, #0
 80211a2:	d10a      	bne.n	80211ba <xQueueReceive+0x5e>
	__asm volatile
 80211a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211a8:	f383 8811 	msr	BASEPRI, r3
 80211ac:	f3bf 8f6f 	isb	sy
 80211b0:	f3bf 8f4f 	dsb	sy
 80211b4:	61fb      	str	r3, [r7, #28]
}
 80211b6:	bf00      	nop
 80211b8:	e7fe      	b.n	80211b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80211ba:	f001 fb99 	bl	80228f0 <xTaskGetSchedulerState>
 80211be:	4603      	mov	r3, r0
 80211c0:	2b00      	cmp	r3, #0
 80211c2:	d102      	bne.n	80211ca <xQueueReceive+0x6e>
 80211c4:	687b      	ldr	r3, [r7, #4]
 80211c6:	2b00      	cmp	r3, #0
 80211c8:	d101      	bne.n	80211ce <xQueueReceive+0x72>
 80211ca:	2301      	movs	r3, #1
 80211cc:	e000      	b.n	80211d0 <xQueueReceive+0x74>
 80211ce:	2300      	movs	r3, #0
 80211d0:	2b00      	cmp	r3, #0
 80211d2:	d10a      	bne.n	80211ea <xQueueReceive+0x8e>
	__asm volatile
 80211d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211d8:	f383 8811 	msr	BASEPRI, r3
 80211dc:	f3bf 8f6f 	isb	sy
 80211e0:	f3bf 8f4f 	dsb	sy
 80211e4:	61bb      	str	r3, [r7, #24]
}
 80211e6:	bf00      	nop
 80211e8:	e7fe      	b.n	80211e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80211ea:	f002 f9db 	bl	80235a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80211ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80211f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211f6:	2b00      	cmp	r3, #0
 80211f8:	d01f      	beq.n	802123a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80211fa:	68b9      	ldr	r1, [r7, #8]
 80211fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80211fe:	f000 fbb9 	bl	8021974 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021204:	1e5a      	subs	r2, r3, #1
 8021206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021208:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 802120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802120c:	691b      	ldr	r3, [r3, #16]
 802120e:	2b00      	cmp	r3, #0
 8021210:	d00f      	beq.n	8021232 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021214:	3310      	adds	r3, #16
 8021216:	4618      	mov	r0, r3
 8021218:	f001 f960 	bl	80224dc <xTaskRemoveFromEventList>
 802121c:	4603      	mov	r3, r0
 802121e:	2b00      	cmp	r3, #0
 8021220:	d007      	beq.n	8021232 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8021222:	4b3d      	ldr	r3, [pc, #244]	; (8021318 <xQueueReceive+0x1bc>)
 8021224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021228:	601a      	str	r2, [r3, #0]
 802122a:	f3bf 8f4f 	dsb	sy
 802122e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8021232:	f002 f9e7 	bl	8023604 <vPortExitCritical>
				return pdPASS;
 8021236:	2301      	movs	r3, #1
 8021238:	e069      	b.n	802130e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	2b00      	cmp	r3, #0
 802123e:	d103      	bne.n	8021248 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8021240:	f002 f9e0 	bl	8023604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021244:	2300      	movs	r3, #0
 8021246:	e062      	b.n	802130e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802124a:	2b00      	cmp	r3, #0
 802124c:	d106      	bne.n	802125c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802124e:	f107 0310 	add.w	r3, r7, #16
 8021252:	4618      	mov	r0, r3
 8021254:	f001 f9a6 	bl	80225a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021258:	2301      	movs	r3, #1
 802125a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802125c:	f002 f9d2 	bl	8023604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021260:	f000 feee 	bl	8022040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021264:	f002 f99e 	bl	80235a4 <vPortEnterCritical>
 8021268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802126a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802126e:	b25b      	sxtb	r3, r3
 8021270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021274:	d103      	bne.n	802127e <xQueueReceive+0x122>
 8021276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021278:	2200      	movs	r2, #0
 802127a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021284:	b25b      	sxtb	r3, r3
 8021286:	f1b3 3fff 	cmp.w	r3, #4294967295
 802128a:	d103      	bne.n	8021294 <xQueueReceive+0x138>
 802128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802128e:	2200      	movs	r2, #0
 8021290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021294:	f002 f9b6 	bl	8023604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021298:	1d3a      	adds	r2, r7, #4
 802129a:	f107 0310 	add.w	r3, r7, #16
 802129e:	4611      	mov	r1, r2
 80212a0:	4618      	mov	r0, r3
 80212a2:	f001 f995 	bl	80225d0 <xTaskCheckForTimeOut>
 80212a6:	4603      	mov	r3, r0
 80212a8:	2b00      	cmp	r3, #0
 80212aa:	d123      	bne.n	80212f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80212ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212ae:	f000 fbd9 	bl	8021a64 <prvIsQueueEmpty>
 80212b2:	4603      	mov	r3, r0
 80212b4:	2b00      	cmp	r3, #0
 80212b6:	d017      	beq.n	80212e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80212b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80212ba:	3324      	adds	r3, #36	; 0x24
 80212bc:	687a      	ldr	r2, [r7, #4]
 80212be:	4611      	mov	r1, r2
 80212c0:	4618      	mov	r0, r3
 80212c2:	f001 f8bb 	bl	802243c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80212c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212c8:	f000 fb7a 	bl	80219c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80212cc:	f000 fec6 	bl	802205c <xTaskResumeAll>
 80212d0:	4603      	mov	r3, r0
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	d189      	bne.n	80211ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80212d6:	4b10      	ldr	r3, [pc, #64]	; (8021318 <xQueueReceive+0x1bc>)
 80212d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80212dc:	601a      	str	r2, [r3, #0]
 80212de:	f3bf 8f4f 	dsb	sy
 80212e2:	f3bf 8f6f 	isb	sy
 80212e6:	e780      	b.n	80211ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80212e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212ea:	f000 fb69 	bl	80219c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80212ee:	f000 feb5 	bl	802205c <xTaskResumeAll>
 80212f2:	e77a      	b.n	80211ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80212f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212f6:	f000 fb63 	bl	80219c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80212fa:	f000 feaf 	bl	802205c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80212fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021300:	f000 fbb0 	bl	8021a64 <prvIsQueueEmpty>
 8021304:	4603      	mov	r3, r0
 8021306:	2b00      	cmp	r3, #0
 8021308:	f43f af6f 	beq.w	80211ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 802130c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802130e:	4618      	mov	r0, r3
 8021310:	3730      	adds	r7, #48	; 0x30
 8021312:	46bd      	mov	sp, r7
 8021314:	bd80      	pop	{r7, pc}
 8021316:	bf00      	nop
 8021318:	e000ed04 	.word	0xe000ed04

0802131c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 802131c:	b580      	push	{r7, lr}
 802131e:	b08e      	sub	sp, #56	; 0x38
 8021320:	af00      	add	r7, sp, #0
 8021322:	6078      	str	r0, [r7, #4]
 8021324:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8021326:	2300      	movs	r3, #0
 8021328:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802132a:	687b      	ldr	r3, [r7, #4]
 802132c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 802132e:	2300      	movs	r3, #0
 8021330:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021334:	2b00      	cmp	r3, #0
 8021336:	d10a      	bne.n	802134e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8021338:	f04f 0350 	mov.w	r3, #80	; 0x50
 802133c:	f383 8811 	msr	BASEPRI, r3
 8021340:	f3bf 8f6f 	isb	sy
 8021344:	f3bf 8f4f 	dsb	sy
 8021348:	623b      	str	r3, [r7, #32]
}
 802134a:	bf00      	nop
 802134c:	e7fe      	b.n	802134c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021352:	2b00      	cmp	r3, #0
 8021354:	d00a      	beq.n	802136c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8021356:	f04f 0350 	mov.w	r3, #80	; 0x50
 802135a:	f383 8811 	msr	BASEPRI, r3
 802135e:	f3bf 8f6f 	isb	sy
 8021362:	f3bf 8f4f 	dsb	sy
 8021366:	61fb      	str	r3, [r7, #28]
}
 8021368:	bf00      	nop
 802136a:	e7fe      	b.n	802136a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802136c:	f001 fac0 	bl	80228f0 <xTaskGetSchedulerState>
 8021370:	4603      	mov	r3, r0
 8021372:	2b00      	cmp	r3, #0
 8021374:	d102      	bne.n	802137c <xQueueSemaphoreTake+0x60>
 8021376:	683b      	ldr	r3, [r7, #0]
 8021378:	2b00      	cmp	r3, #0
 802137a:	d101      	bne.n	8021380 <xQueueSemaphoreTake+0x64>
 802137c:	2301      	movs	r3, #1
 802137e:	e000      	b.n	8021382 <xQueueSemaphoreTake+0x66>
 8021380:	2300      	movs	r3, #0
 8021382:	2b00      	cmp	r3, #0
 8021384:	d10a      	bne.n	802139c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8021386:	f04f 0350 	mov.w	r3, #80	; 0x50
 802138a:	f383 8811 	msr	BASEPRI, r3
 802138e:	f3bf 8f6f 	isb	sy
 8021392:	f3bf 8f4f 	dsb	sy
 8021396:	61bb      	str	r3, [r7, #24]
}
 8021398:	bf00      	nop
 802139a:	e7fe      	b.n	802139a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802139c:	f002 f902 	bl	80235a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80213a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80213a4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80213a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213a8:	2b00      	cmp	r3, #0
 80213aa:	d024      	beq.n	80213f6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80213ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213ae:	1e5a      	subs	r2, r3, #1
 80213b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213b2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80213b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	d104      	bne.n	80213c6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80213bc:	f001 fc0e 	bl	8022bdc <pvTaskIncrementMutexHeldCount>
 80213c0:	4602      	mov	r2, r0
 80213c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213c4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80213c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213c8:	691b      	ldr	r3, [r3, #16]
 80213ca:	2b00      	cmp	r3, #0
 80213cc:	d00f      	beq.n	80213ee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80213ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80213d0:	3310      	adds	r3, #16
 80213d2:	4618      	mov	r0, r3
 80213d4:	f001 f882 	bl	80224dc <xTaskRemoveFromEventList>
 80213d8:	4603      	mov	r3, r0
 80213da:	2b00      	cmp	r3, #0
 80213dc:	d007      	beq.n	80213ee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80213de:	4b54      	ldr	r3, [pc, #336]	; (8021530 <xQueueSemaphoreTake+0x214>)
 80213e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80213e4:	601a      	str	r2, [r3, #0]
 80213e6:	f3bf 8f4f 	dsb	sy
 80213ea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80213ee:	f002 f909 	bl	8023604 <vPortExitCritical>
				return pdPASS;
 80213f2:	2301      	movs	r3, #1
 80213f4:	e097      	b.n	8021526 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80213f6:	683b      	ldr	r3, [r7, #0]
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d111      	bne.n	8021420 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80213fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d00a      	beq.n	8021418 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8021402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021406:	f383 8811 	msr	BASEPRI, r3
 802140a:	f3bf 8f6f 	isb	sy
 802140e:	f3bf 8f4f 	dsb	sy
 8021412:	617b      	str	r3, [r7, #20]
}
 8021414:	bf00      	nop
 8021416:	e7fe      	b.n	8021416 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8021418:	f002 f8f4 	bl	8023604 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802141c:	2300      	movs	r3, #0
 802141e:	e082      	b.n	8021526 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021422:	2b00      	cmp	r3, #0
 8021424:	d106      	bne.n	8021434 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8021426:	f107 030c 	add.w	r3, r7, #12
 802142a:	4618      	mov	r0, r3
 802142c:	f001 f8ba 	bl	80225a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021430:	2301      	movs	r3, #1
 8021432:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021434:	f002 f8e6 	bl	8023604 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021438:	f000 fe02 	bl	8022040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802143c:	f002 f8b2 	bl	80235a4 <vPortEnterCritical>
 8021440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021442:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021446:	b25b      	sxtb	r3, r3
 8021448:	f1b3 3fff 	cmp.w	r3, #4294967295
 802144c:	d103      	bne.n	8021456 <xQueueSemaphoreTake+0x13a>
 802144e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021450:	2200      	movs	r2, #0
 8021452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802145c:	b25b      	sxtb	r3, r3
 802145e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021462:	d103      	bne.n	802146c <xQueueSemaphoreTake+0x150>
 8021464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021466:	2200      	movs	r2, #0
 8021468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802146c:	f002 f8ca 	bl	8023604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021470:	463a      	mov	r2, r7
 8021472:	f107 030c 	add.w	r3, r7, #12
 8021476:	4611      	mov	r1, r2
 8021478:	4618      	mov	r0, r3
 802147a:	f001 f8a9 	bl	80225d0 <xTaskCheckForTimeOut>
 802147e:	4603      	mov	r3, r0
 8021480:	2b00      	cmp	r3, #0
 8021482:	d132      	bne.n	80214ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021486:	f000 faed 	bl	8021a64 <prvIsQueueEmpty>
 802148a:	4603      	mov	r3, r0
 802148c:	2b00      	cmp	r3, #0
 802148e:	d026      	beq.n	80214de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021492:	681b      	ldr	r3, [r3, #0]
 8021494:	2b00      	cmp	r3, #0
 8021496:	d109      	bne.n	80214ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8021498:	f002 f884 	bl	80235a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 802149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802149e:	689b      	ldr	r3, [r3, #8]
 80214a0:	4618      	mov	r0, r3
 80214a2:	f001 fa43 	bl	802292c <xTaskPriorityInherit>
 80214a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80214a8:	f002 f8ac 	bl	8023604 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80214ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214ae:	3324      	adds	r3, #36	; 0x24
 80214b0:	683a      	ldr	r2, [r7, #0]
 80214b2:	4611      	mov	r1, r2
 80214b4:	4618      	mov	r0, r3
 80214b6:	f000 ffc1 	bl	802243c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80214ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214bc:	f000 fa80 	bl	80219c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80214c0:	f000 fdcc 	bl	802205c <xTaskResumeAll>
 80214c4:	4603      	mov	r3, r0
 80214c6:	2b00      	cmp	r3, #0
 80214c8:	f47f af68 	bne.w	802139c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80214cc:	4b18      	ldr	r3, [pc, #96]	; (8021530 <xQueueSemaphoreTake+0x214>)
 80214ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80214d2:	601a      	str	r2, [r3, #0]
 80214d4:	f3bf 8f4f 	dsb	sy
 80214d8:	f3bf 8f6f 	isb	sy
 80214dc:	e75e      	b.n	802139c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80214de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214e0:	f000 fa6e 	bl	80219c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80214e4:	f000 fdba 	bl	802205c <xTaskResumeAll>
 80214e8:	e758      	b.n	802139c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80214ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214ec:	f000 fa68 	bl	80219c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80214f0:	f000 fdb4 	bl	802205c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80214f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214f6:	f000 fab5 	bl	8021a64 <prvIsQueueEmpty>
 80214fa:	4603      	mov	r3, r0
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	f43f af4d 	beq.w	802139c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8021502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021504:	2b00      	cmp	r3, #0
 8021506:	d00d      	beq.n	8021524 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8021508:	f002 f84c 	bl	80235a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 802150c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802150e:	f000 f9af 	bl	8021870 <prvGetDisinheritPriorityAfterTimeout>
 8021512:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8021514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021516:	689b      	ldr	r3, [r3, #8]
 8021518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802151a:	4618      	mov	r0, r3
 802151c:	f001 fadc 	bl	8022ad8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8021520:	f002 f870 	bl	8023604 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8021524:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8021526:	4618      	mov	r0, r3
 8021528:	3738      	adds	r7, #56	; 0x38
 802152a:	46bd      	mov	sp, r7
 802152c:	bd80      	pop	{r7, pc}
 802152e:	bf00      	nop
 8021530:	e000ed04 	.word	0xe000ed04

08021534 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8021534:	b580      	push	{r7, lr}
 8021536:	b08e      	sub	sp, #56	; 0x38
 8021538:	af00      	add	r7, sp, #0
 802153a:	60f8      	str	r0, [r7, #12]
 802153c:	60b9      	str	r1, [r7, #8]
 802153e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021540:	2300      	movs	r3, #0
 8021542:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8021544:	68fb      	ldr	r3, [r7, #12]
 8021546:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802154a:	2b00      	cmp	r3, #0
 802154c:	d10a      	bne.n	8021564 <xQueuePeek+0x30>
	__asm volatile
 802154e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021552:	f383 8811 	msr	BASEPRI, r3
 8021556:	f3bf 8f6f 	isb	sy
 802155a:	f3bf 8f4f 	dsb	sy
 802155e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8021560:	bf00      	nop
 8021562:	e7fe      	b.n	8021562 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021564:	68bb      	ldr	r3, [r7, #8]
 8021566:	2b00      	cmp	r3, #0
 8021568:	d103      	bne.n	8021572 <xQueuePeek+0x3e>
 802156a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802156e:	2b00      	cmp	r3, #0
 8021570:	d101      	bne.n	8021576 <xQueuePeek+0x42>
 8021572:	2301      	movs	r3, #1
 8021574:	e000      	b.n	8021578 <xQueuePeek+0x44>
 8021576:	2300      	movs	r3, #0
 8021578:	2b00      	cmp	r3, #0
 802157a:	d10a      	bne.n	8021592 <xQueuePeek+0x5e>
	__asm volatile
 802157c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021580:	f383 8811 	msr	BASEPRI, r3
 8021584:	f3bf 8f6f 	isb	sy
 8021588:	f3bf 8f4f 	dsb	sy
 802158c:	623b      	str	r3, [r7, #32]
}
 802158e:	bf00      	nop
 8021590:	e7fe      	b.n	8021590 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021592:	f001 f9ad 	bl	80228f0 <xTaskGetSchedulerState>
 8021596:	4603      	mov	r3, r0
 8021598:	2b00      	cmp	r3, #0
 802159a:	d102      	bne.n	80215a2 <xQueuePeek+0x6e>
 802159c:	687b      	ldr	r3, [r7, #4]
 802159e:	2b00      	cmp	r3, #0
 80215a0:	d101      	bne.n	80215a6 <xQueuePeek+0x72>
 80215a2:	2301      	movs	r3, #1
 80215a4:	e000      	b.n	80215a8 <xQueuePeek+0x74>
 80215a6:	2300      	movs	r3, #0
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	d10a      	bne.n	80215c2 <xQueuePeek+0x8e>
	__asm volatile
 80215ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80215b0:	f383 8811 	msr	BASEPRI, r3
 80215b4:	f3bf 8f6f 	isb	sy
 80215b8:	f3bf 8f4f 	dsb	sy
 80215bc:	61fb      	str	r3, [r7, #28]
}
 80215be:	bf00      	nop
 80215c0:	e7fe      	b.n	80215c0 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80215c2:	f001 ffef 	bl	80235a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80215c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80215ca:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80215cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	d021      	beq.n	8021616 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80215d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215d4:	68db      	ldr	r3, [r3, #12]
 80215d6:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80215d8:	68b9      	ldr	r1, [r7, #8]
 80215da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80215dc:	f000 f9ca 	bl	8021974 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80215e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80215e4:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80215e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215ea:	2b00      	cmp	r3, #0
 80215ec:	d00f      	beq.n	802160e <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80215ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215f0:	3324      	adds	r3, #36	; 0x24
 80215f2:	4618      	mov	r0, r3
 80215f4:	f000 ff72 	bl	80224dc <xTaskRemoveFromEventList>
 80215f8:	4603      	mov	r3, r0
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d007      	beq.n	802160e <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80215fe:	4b3d      	ldr	r3, [pc, #244]	; (80216f4 <xQueuePeek+0x1c0>)
 8021600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021604:	601a      	str	r2, [r3, #0]
 8021606:	f3bf 8f4f 	dsb	sy
 802160a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802160e:	f001 fff9 	bl	8023604 <vPortExitCritical>
				return pdPASS;
 8021612:	2301      	movs	r3, #1
 8021614:	e069      	b.n	80216ea <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021616:	687b      	ldr	r3, [r7, #4]
 8021618:	2b00      	cmp	r3, #0
 802161a:	d103      	bne.n	8021624 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802161c:	f001 fff2 	bl	8023604 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021620:	2300      	movs	r3, #0
 8021622:	e062      	b.n	80216ea <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021626:	2b00      	cmp	r3, #0
 8021628:	d106      	bne.n	8021638 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802162a:	f107 0314 	add.w	r3, r7, #20
 802162e:	4618      	mov	r0, r3
 8021630:	f000 ffb8 	bl	80225a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021634:	2301      	movs	r3, #1
 8021636:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021638:	f001 ffe4 	bl	8023604 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802163c:	f000 fd00 	bl	8022040 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021640:	f001 ffb0 	bl	80235a4 <vPortEnterCritical>
 8021644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802164a:	b25b      	sxtb	r3, r3
 802164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021650:	d103      	bne.n	802165a <xQueuePeek+0x126>
 8021652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021654:	2200      	movs	r2, #0
 8021656:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802165c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021660:	b25b      	sxtb	r3, r3
 8021662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021666:	d103      	bne.n	8021670 <xQueuePeek+0x13c>
 8021668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802166a:	2200      	movs	r2, #0
 802166c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021670:	f001 ffc8 	bl	8023604 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021674:	1d3a      	adds	r2, r7, #4
 8021676:	f107 0314 	add.w	r3, r7, #20
 802167a:	4611      	mov	r1, r2
 802167c:	4618      	mov	r0, r3
 802167e:	f000 ffa7 	bl	80225d0 <xTaskCheckForTimeOut>
 8021682:	4603      	mov	r3, r0
 8021684:	2b00      	cmp	r3, #0
 8021686:	d123      	bne.n	80216d0 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802168a:	f000 f9eb 	bl	8021a64 <prvIsQueueEmpty>
 802168e:	4603      	mov	r3, r0
 8021690:	2b00      	cmp	r3, #0
 8021692:	d017      	beq.n	80216c4 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021696:	3324      	adds	r3, #36	; 0x24
 8021698:	687a      	ldr	r2, [r7, #4]
 802169a:	4611      	mov	r1, r2
 802169c:	4618      	mov	r0, r3
 802169e:	f000 fecd 	bl	802243c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80216a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216a4:	f000 f98c 	bl	80219c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80216a8:	f000 fcd8 	bl	802205c <xTaskResumeAll>
 80216ac:	4603      	mov	r3, r0
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d187      	bne.n	80215c2 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80216b2:	4b10      	ldr	r3, [pc, #64]	; (80216f4 <xQueuePeek+0x1c0>)
 80216b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80216b8:	601a      	str	r2, [r3, #0]
 80216ba:	f3bf 8f4f 	dsb	sy
 80216be:	f3bf 8f6f 	isb	sy
 80216c2:	e77e      	b.n	80215c2 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80216c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216c6:	f000 f97b 	bl	80219c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80216ca:	f000 fcc7 	bl	802205c <xTaskResumeAll>
 80216ce:	e778      	b.n	80215c2 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80216d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216d2:	f000 f975 	bl	80219c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80216d6:	f000 fcc1 	bl	802205c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80216da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216dc:	f000 f9c2 	bl	8021a64 <prvIsQueueEmpty>
 80216e0:	4603      	mov	r3, r0
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	f43f af6d 	beq.w	80215c2 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80216e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80216ea:	4618      	mov	r0, r3
 80216ec:	3738      	adds	r7, #56	; 0x38
 80216ee:	46bd      	mov	sp, r7
 80216f0:	bd80      	pop	{r7, pc}
 80216f2:	bf00      	nop
 80216f4:	e000ed04 	.word	0xe000ed04

080216f8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80216f8:	b580      	push	{r7, lr}
 80216fa:	b08e      	sub	sp, #56	; 0x38
 80216fc:	af00      	add	r7, sp, #0
 80216fe:	60f8      	str	r0, [r7, #12]
 8021700:	60b9      	str	r1, [r7, #8]
 8021702:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8021704:	68fb      	ldr	r3, [r7, #12]
 8021706:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8021708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802170a:	2b00      	cmp	r3, #0
 802170c:	d10a      	bne.n	8021724 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 802170e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021712:	f383 8811 	msr	BASEPRI, r3
 8021716:	f3bf 8f6f 	isb	sy
 802171a:	f3bf 8f4f 	dsb	sy
 802171e:	623b      	str	r3, [r7, #32]
}
 8021720:	bf00      	nop
 8021722:	e7fe      	b.n	8021722 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021724:	68bb      	ldr	r3, [r7, #8]
 8021726:	2b00      	cmp	r3, #0
 8021728:	d103      	bne.n	8021732 <xQueueReceiveFromISR+0x3a>
 802172a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802172e:	2b00      	cmp	r3, #0
 8021730:	d101      	bne.n	8021736 <xQueueReceiveFromISR+0x3e>
 8021732:	2301      	movs	r3, #1
 8021734:	e000      	b.n	8021738 <xQueueReceiveFromISR+0x40>
 8021736:	2300      	movs	r3, #0
 8021738:	2b00      	cmp	r3, #0
 802173a:	d10a      	bne.n	8021752 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 802173c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021740:	f383 8811 	msr	BASEPRI, r3
 8021744:	f3bf 8f6f 	isb	sy
 8021748:	f3bf 8f4f 	dsb	sy
 802174c:	61fb      	str	r3, [r7, #28]
}
 802174e:	bf00      	nop
 8021750:	e7fe      	b.n	8021750 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8021752:	f002 f809 	bl	8023768 <vPortValidateInterruptPriority>
	__asm volatile
 8021756:	f3ef 8211 	mrs	r2, BASEPRI
 802175a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802175e:	f383 8811 	msr	BASEPRI, r3
 8021762:	f3bf 8f6f 	isb	sy
 8021766:	f3bf 8f4f 	dsb	sy
 802176a:	61ba      	str	r2, [r7, #24]
 802176c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 802176e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021770:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021776:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802177a:	2b00      	cmp	r3, #0
 802177c:	d02f      	beq.n	80217de <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 802177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021788:	68b9      	ldr	r1, [r7, #8]
 802178a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802178c:	f000 f8f2 	bl	8021974 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021792:	1e5a      	subs	r2, r3, #1
 8021794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021796:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8021798:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802179c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80217a0:	d112      	bne.n	80217c8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80217a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80217a4:	691b      	ldr	r3, [r3, #16]
 80217a6:	2b00      	cmp	r3, #0
 80217a8:	d016      	beq.n	80217d8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80217aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80217ac:	3310      	adds	r3, #16
 80217ae:	4618      	mov	r0, r3
 80217b0:	f000 fe94 	bl	80224dc <xTaskRemoveFromEventList>
 80217b4:	4603      	mov	r3, r0
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	d00e      	beq.n	80217d8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80217ba:	687b      	ldr	r3, [r7, #4]
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d00b      	beq.n	80217d8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	2201      	movs	r2, #1
 80217c4:	601a      	str	r2, [r3, #0]
 80217c6:	e007      	b.n	80217d8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80217c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80217cc:	3301      	adds	r3, #1
 80217ce:	b2db      	uxtb	r3, r3
 80217d0:	b25a      	sxtb	r2, r3
 80217d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80217d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80217d8:	2301      	movs	r3, #1
 80217da:	637b      	str	r3, [r7, #52]	; 0x34
 80217dc:	e001      	b.n	80217e2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80217de:	2300      	movs	r3, #0
 80217e0:	637b      	str	r3, [r7, #52]	; 0x34
 80217e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217e4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80217e6:	693b      	ldr	r3, [r7, #16]
 80217e8:	f383 8811 	msr	BASEPRI, r3
}
 80217ec:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80217ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80217f0:	4618      	mov	r0, r3
 80217f2:	3738      	adds	r7, #56	; 0x38
 80217f4:	46bd      	mov	sp, r7
 80217f6:	bd80      	pop	{r7, pc}

080217f8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80217f8:	b580      	push	{r7, lr}
 80217fa:	b084      	sub	sp, #16
 80217fc:	af00      	add	r7, sp, #0
 80217fe:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	2b00      	cmp	r3, #0
 8021804:	d10a      	bne.n	802181c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8021806:	f04f 0350 	mov.w	r3, #80	; 0x50
 802180a:	f383 8811 	msr	BASEPRI, r3
 802180e:	f3bf 8f6f 	isb	sy
 8021812:	f3bf 8f4f 	dsb	sy
 8021816:	60bb      	str	r3, [r7, #8]
}
 8021818:	bf00      	nop
 802181a:	e7fe      	b.n	802181a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 802181c:	f001 fec2 	bl	80235a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021824:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8021826:	f001 feed 	bl	8023604 <vPortExitCritical>

	return uxReturn;
 802182a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 802182c:	4618      	mov	r0, r3
 802182e:	3710      	adds	r7, #16
 8021830:	46bd      	mov	sp, r7
 8021832:	bd80      	pop	{r7, pc}

08021834 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8021834:	b480      	push	{r7}
 8021836:	b087      	sub	sp, #28
 8021838:	af00      	add	r7, sp, #0
 802183a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 802183c:	687b      	ldr	r3, [r7, #4]
 802183e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8021840:	697b      	ldr	r3, [r7, #20]
 8021842:	2b00      	cmp	r3, #0
 8021844:	d10a      	bne.n	802185c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8021846:	f04f 0350 	mov.w	r3, #80	; 0x50
 802184a:	f383 8811 	msr	BASEPRI, r3
 802184e:	f3bf 8f6f 	isb	sy
 8021852:	f3bf 8f4f 	dsb	sy
 8021856:	60fb      	str	r3, [r7, #12]
}
 8021858:	bf00      	nop
 802185a:	e7fe      	b.n	802185a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 802185c:	697b      	ldr	r3, [r7, #20]
 802185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021860:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8021862:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8021864:	4618      	mov	r0, r3
 8021866:	371c      	adds	r7, #28
 8021868:	46bd      	mov	sp, r7
 802186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802186e:	4770      	bx	lr

08021870 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8021870:	b480      	push	{r7}
 8021872:	b085      	sub	sp, #20
 8021874:	af00      	add	r7, sp, #0
 8021876:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8021878:	687b      	ldr	r3, [r7, #4]
 802187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802187c:	2b00      	cmp	r3, #0
 802187e:	d006      	beq.n	802188e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8021880:	687b      	ldr	r3, [r7, #4]
 8021882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021884:	681b      	ldr	r3, [r3, #0]
 8021886:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802188a:	60fb      	str	r3, [r7, #12]
 802188c:	e001      	b.n	8021892 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 802188e:	2300      	movs	r3, #0
 8021890:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8021892:	68fb      	ldr	r3, [r7, #12]
	}
 8021894:	4618      	mov	r0, r3
 8021896:	3714      	adds	r7, #20
 8021898:	46bd      	mov	sp, r7
 802189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802189e:	4770      	bx	lr

080218a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80218a0:	b580      	push	{r7, lr}
 80218a2:	b086      	sub	sp, #24
 80218a4:	af00      	add	r7, sp, #0
 80218a6:	60f8      	str	r0, [r7, #12]
 80218a8:	60b9      	str	r1, [r7, #8]
 80218aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80218ac:	2300      	movs	r3, #0
 80218ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80218b0:	68fb      	ldr	r3, [r7, #12]
 80218b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80218b6:	68fb      	ldr	r3, [r7, #12]
 80218b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218ba:	2b00      	cmp	r3, #0
 80218bc:	d10d      	bne.n	80218da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80218be:	68fb      	ldr	r3, [r7, #12]
 80218c0:	681b      	ldr	r3, [r3, #0]
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d14d      	bne.n	8021962 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80218c6:	68fb      	ldr	r3, [r7, #12]
 80218c8:	689b      	ldr	r3, [r3, #8]
 80218ca:	4618      	mov	r0, r3
 80218cc:	f001 f896 	bl	80229fc <xTaskPriorityDisinherit>
 80218d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80218d2:	68fb      	ldr	r3, [r7, #12]
 80218d4:	2200      	movs	r2, #0
 80218d6:	609a      	str	r2, [r3, #8]
 80218d8:	e043      	b.n	8021962 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80218da:	687b      	ldr	r3, [r7, #4]
 80218dc:	2b00      	cmp	r3, #0
 80218de:	d119      	bne.n	8021914 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80218e0:	68fb      	ldr	r3, [r7, #12]
 80218e2:	6858      	ldr	r0, [r3, #4]
 80218e4:	68fb      	ldr	r3, [r7, #12]
 80218e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218e8:	461a      	mov	r2, r3
 80218ea:	68b9      	ldr	r1, [r7, #8]
 80218ec:	f00c fad3 	bl	802de96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	685a      	ldr	r2, [r3, #4]
 80218f4:	68fb      	ldr	r3, [r7, #12]
 80218f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218f8:	441a      	add	r2, r3
 80218fa:	68fb      	ldr	r3, [r7, #12]
 80218fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80218fe:	68fb      	ldr	r3, [r7, #12]
 8021900:	685a      	ldr	r2, [r3, #4]
 8021902:	68fb      	ldr	r3, [r7, #12]
 8021904:	689b      	ldr	r3, [r3, #8]
 8021906:	429a      	cmp	r2, r3
 8021908:	d32b      	bcc.n	8021962 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802190a:	68fb      	ldr	r3, [r7, #12]
 802190c:	681a      	ldr	r2, [r3, #0]
 802190e:	68fb      	ldr	r3, [r7, #12]
 8021910:	605a      	str	r2, [r3, #4]
 8021912:	e026      	b.n	8021962 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8021914:	68fb      	ldr	r3, [r7, #12]
 8021916:	68d8      	ldr	r0, [r3, #12]
 8021918:	68fb      	ldr	r3, [r7, #12]
 802191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802191c:	461a      	mov	r2, r3
 802191e:	68b9      	ldr	r1, [r7, #8]
 8021920:	f00c fab9 	bl	802de96 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	68da      	ldr	r2, [r3, #12]
 8021928:	68fb      	ldr	r3, [r7, #12]
 802192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802192c:	425b      	negs	r3, r3
 802192e:	441a      	add	r2, r3
 8021930:	68fb      	ldr	r3, [r7, #12]
 8021932:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021934:	68fb      	ldr	r3, [r7, #12]
 8021936:	68da      	ldr	r2, [r3, #12]
 8021938:	68fb      	ldr	r3, [r7, #12]
 802193a:	681b      	ldr	r3, [r3, #0]
 802193c:	429a      	cmp	r2, r3
 802193e:	d207      	bcs.n	8021950 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021940:	68fb      	ldr	r3, [r7, #12]
 8021942:	689a      	ldr	r2, [r3, #8]
 8021944:	68fb      	ldr	r3, [r7, #12]
 8021946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021948:	425b      	negs	r3, r3
 802194a:	441a      	add	r2, r3
 802194c:	68fb      	ldr	r3, [r7, #12]
 802194e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	2b02      	cmp	r3, #2
 8021954:	d105      	bne.n	8021962 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021956:	693b      	ldr	r3, [r7, #16]
 8021958:	2b00      	cmp	r3, #0
 802195a:	d002      	beq.n	8021962 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802195c:	693b      	ldr	r3, [r7, #16]
 802195e:	3b01      	subs	r3, #1
 8021960:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8021962:	693b      	ldr	r3, [r7, #16]
 8021964:	1c5a      	adds	r2, r3, #1
 8021966:	68fb      	ldr	r3, [r7, #12]
 8021968:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802196a:	697b      	ldr	r3, [r7, #20]
}
 802196c:	4618      	mov	r0, r3
 802196e:	3718      	adds	r7, #24
 8021970:	46bd      	mov	sp, r7
 8021972:	bd80      	pop	{r7, pc}

08021974 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8021974:	b580      	push	{r7, lr}
 8021976:	b082      	sub	sp, #8
 8021978:	af00      	add	r7, sp, #0
 802197a:	6078      	str	r0, [r7, #4]
 802197c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802197e:	687b      	ldr	r3, [r7, #4]
 8021980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021982:	2b00      	cmp	r3, #0
 8021984:	d018      	beq.n	80219b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021986:	687b      	ldr	r3, [r7, #4]
 8021988:	68da      	ldr	r2, [r3, #12]
 802198a:	687b      	ldr	r3, [r7, #4]
 802198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802198e:	441a      	add	r2, r3
 8021990:	687b      	ldr	r3, [r7, #4]
 8021992:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8021994:	687b      	ldr	r3, [r7, #4]
 8021996:	68da      	ldr	r2, [r3, #12]
 8021998:	687b      	ldr	r3, [r7, #4]
 802199a:	689b      	ldr	r3, [r3, #8]
 802199c:	429a      	cmp	r2, r3
 802199e:	d303      	bcc.n	80219a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80219a0:	687b      	ldr	r3, [r7, #4]
 80219a2:	681a      	ldr	r2, [r3, #0]
 80219a4:	687b      	ldr	r3, [r7, #4]
 80219a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80219a8:	687b      	ldr	r3, [r7, #4]
 80219aa:	68d9      	ldr	r1, [r3, #12]
 80219ac:	687b      	ldr	r3, [r7, #4]
 80219ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219b0:	461a      	mov	r2, r3
 80219b2:	6838      	ldr	r0, [r7, #0]
 80219b4:	f00c fa6f 	bl	802de96 <memcpy>
	}
}
 80219b8:	bf00      	nop
 80219ba:	3708      	adds	r7, #8
 80219bc:	46bd      	mov	sp, r7
 80219be:	bd80      	pop	{r7, pc}

080219c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80219c0:	b580      	push	{r7, lr}
 80219c2:	b084      	sub	sp, #16
 80219c4:	af00      	add	r7, sp, #0
 80219c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80219c8:	f001 fdec 	bl	80235a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80219cc:	687b      	ldr	r3, [r7, #4]
 80219ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80219d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80219d4:	e011      	b.n	80219fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80219d6:	687b      	ldr	r3, [r7, #4]
 80219d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80219da:	2b00      	cmp	r3, #0
 80219dc:	d012      	beq.n	8021a04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80219de:	687b      	ldr	r3, [r7, #4]
 80219e0:	3324      	adds	r3, #36	; 0x24
 80219e2:	4618      	mov	r0, r3
 80219e4:	f000 fd7a 	bl	80224dc <xTaskRemoveFromEventList>
 80219e8:	4603      	mov	r3, r0
 80219ea:	2b00      	cmp	r3, #0
 80219ec:	d001      	beq.n	80219f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80219ee:	f000 fe51 	bl	8022694 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80219f2:	7bfb      	ldrb	r3, [r7, #15]
 80219f4:	3b01      	subs	r3, #1
 80219f6:	b2db      	uxtb	r3, r3
 80219f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80219fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	dce9      	bgt.n	80219d6 <prvUnlockQueue+0x16>
 8021a02:	e000      	b.n	8021a06 <prvUnlockQueue+0x46>
					break;
 8021a04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	22ff      	movs	r2, #255	; 0xff
 8021a0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8021a0e:	f001 fdf9 	bl	8023604 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8021a12:	f001 fdc7 	bl	80235a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8021a16:	687b      	ldr	r3, [r7, #4]
 8021a18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021a1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021a1e:	e011      	b.n	8021a44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021a20:	687b      	ldr	r3, [r7, #4]
 8021a22:	691b      	ldr	r3, [r3, #16]
 8021a24:	2b00      	cmp	r3, #0
 8021a26:	d012      	beq.n	8021a4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021a28:	687b      	ldr	r3, [r7, #4]
 8021a2a:	3310      	adds	r3, #16
 8021a2c:	4618      	mov	r0, r3
 8021a2e:	f000 fd55 	bl	80224dc <xTaskRemoveFromEventList>
 8021a32:	4603      	mov	r3, r0
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d001      	beq.n	8021a3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8021a38:	f000 fe2c 	bl	8022694 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8021a3c:	7bbb      	ldrb	r3, [r7, #14]
 8021a3e:	3b01      	subs	r3, #1
 8021a40:	b2db      	uxtb	r3, r3
 8021a42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	dce9      	bgt.n	8021a20 <prvUnlockQueue+0x60>
 8021a4c:	e000      	b.n	8021a50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8021a4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8021a50:	687b      	ldr	r3, [r7, #4]
 8021a52:	22ff      	movs	r2, #255	; 0xff
 8021a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8021a58:	f001 fdd4 	bl	8023604 <vPortExitCritical>
}
 8021a5c:	bf00      	nop
 8021a5e:	3710      	adds	r7, #16
 8021a60:	46bd      	mov	sp, r7
 8021a62:	bd80      	pop	{r7, pc}

08021a64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8021a64:	b580      	push	{r7, lr}
 8021a66:	b084      	sub	sp, #16
 8021a68:	af00      	add	r7, sp, #0
 8021a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021a6c:	f001 fd9a 	bl	80235a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021a70:	687b      	ldr	r3, [r7, #4]
 8021a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a74:	2b00      	cmp	r3, #0
 8021a76:	d102      	bne.n	8021a7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8021a78:	2301      	movs	r3, #1
 8021a7a:	60fb      	str	r3, [r7, #12]
 8021a7c:	e001      	b.n	8021a82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8021a7e:	2300      	movs	r3, #0
 8021a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021a82:	f001 fdbf 	bl	8023604 <vPortExitCritical>

	return xReturn;
 8021a86:	68fb      	ldr	r3, [r7, #12]
}
 8021a88:	4618      	mov	r0, r3
 8021a8a:	3710      	adds	r7, #16
 8021a8c:	46bd      	mov	sp, r7
 8021a8e:	bd80      	pop	{r7, pc}

08021a90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8021a90:	b580      	push	{r7, lr}
 8021a92:	b084      	sub	sp, #16
 8021a94:	af00      	add	r7, sp, #0
 8021a96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021a98:	f001 fd84 	bl	80235a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8021a9c:	687b      	ldr	r3, [r7, #4]
 8021a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021aa4:	429a      	cmp	r2, r3
 8021aa6:	d102      	bne.n	8021aae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8021aa8:	2301      	movs	r3, #1
 8021aaa:	60fb      	str	r3, [r7, #12]
 8021aac:	e001      	b.n	8021ab2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8021aae:	2300      	movs	r3, #0
 8021ab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021ab2:	f001 fda7 	bl	8023604 <vPortExitCritical>

	return xReturn;
 8021ab6:	68fb      	ldr	r3, [r7, #12]
}
 8021ab8:	4618      	mov	r0, r3
 8021aba:	3710      	adds	r7, #16
 8021abc:	46bd      	mov	sp, r7
 8021abe:	bd80      	pop	{r7, pc}

08021ac0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8021ac0:	b480      	push	{r7}
 8021ac2:	b085      	sub	sp, #20
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	6078      	str	r0, [r7, #4]
 8021ac8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021aca:	2300      	movs	r3, #0
 8021acc:	60fb      	str	r3, [r7, #12]
 8021ace:	e014      	b.n	8021afa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8021ad0:	4a0f      	ldr	r2, [pc, #60]	; (8021b10 <vQueueAddToRegistry+0x50>)
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021ad8:	2b00      	cmp	r3, #0
 8021ada:	d10b      	bne.n	8021af4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8021adc:	490c      	ldr	r1, [pc, #48]	; (8021b10 <vQueueAddToRegistry+0x50>)
 8021ade:	68fb      	ldr	r3, [r7, #12]
 8021ae0:	683a      	ldr	r2, [r7, #0]
 8021ae2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8021ae6:	4a0a      	ldr	r2, [pc, #40]	; (8021b10 <vQueueAddToRegistry+0x50>)
 8021ae8:	68fb      	ldr	r3, [r7, #12]
 8021aea:	00db      	lsls	r3, r3, #3
 8021aec:	4413      	add	r3, r2
 8021aee:	687a      	ldr	r2, [r7, #4]
 8021af0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8021af2:	e006      	b.n	8021b02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021af4:	68fb      	ldr	r3, [r7, #12]
 8021af6:	3301      	adds	r3, #1
 8021af8:	60fb      	str	r3, [r7, #12]
 8021afa:	68fb      	ldr	r3, [r7, #12]
 8021afc:	2b09      	cmp	r3, #9
 8021afe:	d9e7      	bls.n	8021ad0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8021b00:	bf00      	nop
 8021b02:	bf00      	nop
 8021b04:	3714      	adds	r7, #20
 8021b06:	46bd      	mov	sp, r7
 8021b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b0c:	4770      	bx	lr
 8021b0e:	bf00      	nop
 8021b10:	20001d08 	.word	0x20001d08

08021b14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021b14:	b580      	push	{r7, lr}
 8021b16:	b086      	sub	sp, #24
 8021b18:	af00      	add	r7, sp, #0
 8021b1a:	60f8      	str	r0, [r7, #12]
 8021b1c:	60b9      	str	r1, [r7, #8]
 8021b1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8021b20:	68fb      	ldr	r3, [r7, #12]
 8021b22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8021b24:	f001 fd3e 	bl	80235a4 <vPortEnterCritical>
 8021b28:	697b      	ldr	r3, [r7, #20]
 8021b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021b2e:	b25b      	sxtb	r3, r3
 8021b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b34:	d103      	bne.n	8021b3e <vQueueWaitForMessageRestricted+0x2a>
 8021b36:	697b      	ldr	r3, [r7, #20]
 8021b38:	2200      	movs	r2, #0
 8021b3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021b3e:	697b      	ldr	r3, [r7, #20]
 8021b40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021b44:	b25b      	sxtb	r3, r3
 8021b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b4a:	d103      	bne.n	8021b54 <vQueueWaitForMessageRestricted+0x40>
 8021b4c:	697b      	ldr	r3, [r7, #20]
 8021b4e:	2200      	movs	r2, #0
 8021b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021b54:	f001 fd56 	bl	8023604 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8021b58:	697b      	ldr	r3, [r7, #20]
 8021b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b5c:	2b00      	cmp	r3, #0
 8021b5e:	d106      	bne.n	8021b6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8021b60:	697b      	ldr	r3, [r7, #20]
 8021b62:	3324      	adds	r3, #36	; 0x24
 8021b64:	687a      	ldr	r2, [r7, #4]
 8021b66:	68b9      	ldr	r1, [r7, #8]
 8021b68:	4618      	mov	r0, r3
 8021b6a:	f000 fc8b 	bl	8022484 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8021b6e:	6978      	ldr	r0, [r7, #20]
 8021b70:	f7ff ff26 	bl	80219c0 <prvUnlockQueue>
	}
 8021b74:	bf00      	nop
 8021b76:	3718      	adds	r7, #24
 8021b78:	46bd      	mov	sp, r7
 8021b7a:	bd80      	pop	{r7, pc}

08021b7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8021b7c:	b580      	push	{r7, lr}
 8021b7e:	b08e      	sub	sp, #56	; 0x38
 8021b80:	af04      	add	r7, sp, #16
 8021b82:	60f8      	str	r0, [r7, #12]
 8021b84:	60b9      	str	r1, [r7, #8]
 8021b86:	607a      	str	r2, [r7, #4]
 8021b88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8021b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021b8c:	2b00      	cmp	r3, #0
 8021b8e:	d10a      	bne.n	8021ba6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8021b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b94:	f383 8811 	msr	BASEPRI, r3
 8021b98:	f3bf 8f6f 	isb	sy
 8021b9c:	f3bf 8f4f 	dsb	sy
 8021ba0:	623b      	str	r3, [r7, #32]
}
 8021ba2:	bf00      	nop
 8021ba4:	e7fe      	b.n	8021ba4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8021ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021ba8:	2b00      	cmp	r3, #0
 8021baa:	d10a      	bne.n	8021bc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8021bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021bb0:	f383 8811 	msr	BASEPRI, r3
 8021bb4:	f3bf 8f6f 	isb	sy
 8021bb8:	f3bf 8f4f 	dsb	sy
 8021bbc:	61fb      	str	r3, [r7, #28]
}
 8021bbe:	bf00      	nop
 8021bc0:	e7fe      	b.n	8021bc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8021bc2:	23ac      	movs	r3, #172	; 0xac
 8021bc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8021bc6:	693b      	ldr	r3, [r7, #16]
 8021bc8:	2bac      	cmp	r3, #172	; 0xac
 8021bca:	d00a      	beq.n	8021be2 <xTaskCreateStatic+0x66>
	__asm volatile
 8021bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021bd0:	f383 8811 	msr	BASEPRI, r3
 8021bd4:	f3bf 8f6f 	isb	sy
 8021bd8:	f3bf 8f4f 	dsb	sy
 8021bdc:	61bb      	str	r3, [r7, #24]
}
 8021bde:	bf00      	nop
 8021be0:	e7fe      	b.n	8021be0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8021be2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8021be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021be6:	2b00      	cmp	r3, #0
 8021be8:	d01e      	beq.n	8021c28 <xTaskCreateStatic+0xac>
 8021bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bec:	2b00      	cmp	r3, #0
 8021bee:	d01b      	beq.n	8021c28 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8021bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021bf2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8021bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021bf8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8021bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bfc:	2202      	movs	r2, #2
 8021bfe:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8021c02:	2300      	movs	r3, #0
 8021c04:	9303      	str	r3, [sp, #12]
 8021c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c08:	9302      	str	r3, [sp, #8]
 8021c0a:	f107 0314 	add.w	r3, r7, #20
 8021c0e:	9301      	str	r3, [sp, #4]
 8021c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c12:	9300      	str	r3, [sp, #0]
 8021c14:	683b      	ldr	r3, [r7, #0]
 8021c16:	687a      	ldr	r2, [r7, #4]
 8021c18:	68b9      	ldr	r1, [r7, #8]
 8021c1a:	68f8      	ldr	r0, [r7, #12]
 8021c1c:	f000 f850 	bl	8021cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021c22:	f000 f8f7 	bl	8021e14 <prvAddNewTaskToReadyList>
 8021c26:	e001      	b.n	8021c2c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8021c28:	2300      	movs	r3, #0
 8021c2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8021c2c:	697b      	ldr	r3, [r7, #20]
	}
 8021c2e:	4618      	mov	r0, r3
 8021c30:	3728      	adds	r7, #40	; 0x28
 8021c32:	46bd      	mov	sp, r7
 8021c34:	bd80      	pop	{r7, pc}

08021c36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8021c36:	b580      	push	{r7, lr}
 8021c38:	b08c      	sub	sp, #48	; 0x30
 8021c3a:	af04      	add	r7, sp, #16
 8021c3c:	60f8      	str	r0, [r7, #12]
 8021c3e:	60b9      	str	r1, [r7, #8]
 8021c40:	603b      	str	r3, [r7, #0]
 8021c42:	4613      	mov	r3, r2
 8021c44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8021c46:	88fb      	ldrh	r3, [r7, #6]
 8021c48:	009b      	lsls	r3, r3, #2
 8021c4a:	4618      	mov	r0, r3
 8021c4c:	f001 fdcc 	bl	80237e8 <pvPortMalloc>
 8021c50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8021c52:	697b      	ldr	r3, [r7, #20]
 8021c54:	2b00      	cmp	r3, #0
 8021c56:	d00e      	beq.n	8021c76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021c58:	20ac      	movs	r0, #172	; 0xac
 8021c5a:	f001 fdc5 	bl	80237e8 <pvPortMalloc>
 8021c5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021c60:	69fb      	ldr	r3, [r7, #28]
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	d003      	beq.n	8021c6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8021c66:	69fb      	ldr	r3, [r7, #28]
 8021c68:	697a      	ldr	r2, [r7, #20]
 8021c6a:	631a      	str	r2, [r3, #48]	; 0x30
 8021c6c:	e005      	b.n	8021c7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8021c6e:	6978      	ldr	r0, [r7, #20]
 8021c70:	f001 fe00 	bl	8023874 <vPortFree>
 8021c74:	e001      	b.n	8021c7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8021c76:	2300      	movs	r3, #0
 8021c78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8021c7a:	69fb      	ldr	r3, [r7, #28]
 8021c7c:	2b00      	cmp	r3, #0
 8021c7e:	d017      	beq.n	8021cb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8021c80:	69fb      	ldr	r3, [r7, #28]
 8021c82:	2200      	movs	r2, #0
 8021c84:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8021c88:	88fa      	ldrh	r2, [r7, #6]
 8021c8a:	2300      	movs	r3, #0
 8021c8c:	9303      	str	r3, [sp, #12]
 8021c8e:	69fb      	ldr	r3, [r7, #28]
 8021c90:	9302      	str	r3, [sp, #8]
 8021c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c94:	9301      	str	r3, [sp, #4]
 8021c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c98:	9300      	str	r3, [sp, #0]
 8021c9a:	683b      	ldr	r3, [r7, #0]
 8021c9c:	68b9      	ldr	r1, [r7, #8]
 8021c9e:	68f8      	ldr	r0, [r7, #12]
 8021ca0:	f000 f80e 	bl	8021cc0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021ca4:	69f8      	ldr	r0, [r7, #28]
 8021ca6:	f000 f8b5 	bl	8021e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8021caa:	2301      	movs	r3, #1
 8021cac:	61bb      	str	r3, [r7, #24]
 8021cae:	e002      	b.n	8021cb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8021cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8021cb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8021cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8021cb8:	4618      	mov	r0, r3
 8021cba:	3720      	adds	r7, #32
 8021cbc:	46bd      	mov	sp, r7
 8021cbe:	bd80      	pop	{r7, pc}

08021cc0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8021cc0:	b580      	push	{r7, lr}
 8021cc2:	b088      	sub	sp, #32
 8021cc4:	af00      	add	r7, sp, #0
 8021cc6:	60f8      	str	r0, [r7, #12]
 8021cc8:	60b9      	str	r1, [r7, #8]
 8021cca:	607a      	str	r2, [r7, #4]
 8021ccc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8021cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021cd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	009b      	lsls	r3, r3, #2
 8021cd6:	461a      	mov	r2, r3
 8021cd8:	21a5      	movs	r1, #165	; 0xa5
 8021cda:	f00b ff07 	bl	802daec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8021cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021ce2:	687b      	ldr	r3, [r7, #4]
 8021ce4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021ce8:	3b01      	subs	r3, #1
 8021cea:	009b      	lsls	r3, r3, #2
 8021cec:	4413      	add	r3, r2
 8021cee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8021cf0:	69bb      	ldr	r3, [r7, #24]
 8021cf2:	f023 0307 	bic.w	r3, r3, #7
 8021cf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8021cf8:	69bb      	ldr	r3, [r7, #24]
 8021cfa:	f003 0307 	and.w	r3, r3, #7
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	d00a      	beq.n	8021d18 <prvInitialiseNewTask+0x58>
	__asm volatile
 8021d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021d06:	f383 8811 	msr	BASEPRI, r3
 8021d0a:	f3bf 8f6f 	isb	sy
 8021d0e:	f3bf 8f4f 	dsb	sy
 8021d12:	617b      	str	r3, [r7, #20]
}
 8021d14:	bf00      	nop
 8021d16:	e7fe      	b.n	8021d16 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8021d18:	68bb      	ldr	r3, [r7, #8]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	d01f      	beq.n	8021d5e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021d1e:	2300      	movs	r3, #0
 8021d20:	61fb      	str	r3, [r7, #28]
 8021d22:	e012      	b.n	8021d4a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8021d24:	68ba      	ldr	r2, [r7, #8]
 8021d26:	69fb      	ldr	r3, [r7, #28]
 8021d28:	4413      	add	r3, r2
 8021d2a:	7819      	ldrb	r1, [r3, #0]
 8021d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021d2e:	69fb      	ldr	r3, [r7, #28]
 8021d30:	4413      	add	r3, r2
 8021d32:	3334      	adds	r3, #52	; 0x34
 8021d34:	460a      	mov	r2, r1
 8021d36:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8021d38:	68ba      	ldr	r2, [r7, #8]
 8021d3a:	69fb      	ldr	r3, [r7, #28]
 8021d3c:	4413      	add	r3, r2
 8021d3e:	781b      	ldrb	r3, [r3, #0]
 8021d40:	2b00      	cmp	r3, #0
 8021d42:	d006      	beq.n	8021d52 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021d44:	69fb      	ldr	r3, [r7, #28]
 8021d46:	3301      	adds	r3, #1
 8021d48:	61fb      	str	r3, [r7, #28]
 8021d4a:	69fb      	ldr	r3, [r7, #28]
 8021d4c:	2b0f      	cmp	r3, #15
 8021d4e:	d9e9      	bls.n	8021d24 <prvInitialiseNewTask+0x64>
 8021d50:	e000      	b.n	8021d54 <prvInitialiseNewTask+0x94>
			{
				break;
 8021d52:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8021d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d56:	2200      	movs	r2, #0
 8021d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021d5c:	e003      	b.n	8021d66 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8021d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d60:	2200      	movs	r2, #0
 8021d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8021d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d68:	2b37      	cmp	r3, #55	; 0x37
 8021d6a:	d901      	bls.n	8021d70 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8021d6c:	2337      	movs	r3, #55	; 0x37
 8021d6e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021d74:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8021d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021d7a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8021d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d7e:	2200      	movs	r2, #0
 8021d80:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8021d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d84:	3304      	adds	r3, #4
 8021d86:	4618      	mov	r0, r3
 8021d88:	f7fe fdc6 	bl	8020918 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8021d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d8e:	3318      	adds	r3, #24
 8021d90:	4618      	mov	r0, r3
 8021d92:	f7fe fdc1 	bl	8020918 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8021d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021d9a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021da4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8021da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021daa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8021dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dae:	2200      	movs	r2, #0
 8021db0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8021db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021db4:	2200      	movs	r2, #0
 8021db6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dbc:	2200      	movs	r2, #0
 8021dbe:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8021dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dc4:	3358      	adds	r3, #88	; 0x58
 8021dc6:	224c      	movs	r2, #76	; 0x4c
 8021dc8:	2100      	movs	r1, #0
 8021dca:	4618      	mov	r0, r3
 8021dcc:	f00b fe8e 	bl	802daec <memset>
 8021dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dd2:	4a0d      	ldr	r2, [pc, #52]	; (8021e08 <prvInitialiseNewTask+0x148>)
 8021dd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8021dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dd8:	4a0c      	ldr	r2, [pc, #48]	; (8021e0c <prvInitialiseNewTask+0x14c>)
 8021dda:	661a      	str	r2, [r3, #96]	; 0x60
 8021ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dde:	4a0c      	ldr	r2, [pc, #48]	; (8021e10 <prvInitialiseNewTask+0x150>)
 8021de0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8021de2:	683a      	ldr	r2, [r7, #0]
 8021de4:	68f9      	ldr	r1, [r7, #12]
 8021de6:	69b8      	ldr	r0, [r7, #24]
 8021de8:	f001 faae 	bl	8023348 <pxPortInitialiseStack>
 8021dec:	4602      	mov	r2, r0
 8021dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021df0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8021df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	d002      	beq.n	8021dfe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8021df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021dfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021dfe:	bf00      	nop
 8021e00:	3720      	adds	r7, #32
 8021e02:	46bd      	mov	sp, r7
 8021e04:	bd80      	pop	{r7, pc}
 8021e06:	bf00      	nop
 8021e08:	2000d9d0 	.word	0x2000d9d0
 8021e0c:	2000da38 	.word	0x2000da38
 8021e10:	2000daa0 	.word	0x2000daa0

08021e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8021e14:	b580      	push	{r7, lr}
 8021e16:	b082      	sub	sp, #8
 8021e18:	af00      	add	r7, sp, #0
 8021e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021e1c:	f001 fbc2 	bl	80235a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021e20:	4b2d      	ldr	r3, [pc, #180]	; (8021ed8 <prvAddNewTaskToReadyList+0xc4>)
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	3301      	adds	r3, #1
 8021e26:	4a2c      	ldr	r2, [pc, #176]	; (8021ed8 <prvAddNewTaskToReadyList+0xc4>)
 8021e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021e2a:	4b2c      	ldr	r3, [pc, #176]	; (8021edc <prvAddNewTaskToReadyList+0xc8>)
 8021e2c:	681b      	ldr	r3, [r3, #0]
 8021e2e:	2b00      	cmp	r3, #0
 8021e30:	d109      	bne.n	8021e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8021e32:	4a2a      	ldr	r2, [pc, #168]	; (8021edc <prvAddNewTaskToReadyList+0xc8>)
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021e38:	4b27      	ldr	r3, [pc, #156]	; (8021ed8 <prvAddNewTaskToReadyList+0xc4>)
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	2b01      	cmp	r3, #1
 8021e3e:	d110      	bne.n	8021e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021e40:	f000 fc4c 	bl	80226dc <prvInitialiseTaskLists>
 8021e44:	e00d      	b.n	8021e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8021e46:	4b26      	ldr	r3, [pc, #152]	; (8021ee0 <prvAddNewTaskToReadyList+0xcc>)
 8021e48:	681b      	ldr	r3, [r3, #0]
 8021e4a:	2b00      	cmp	r3, #0
 8021e4c:	d109      	bne.n	8021e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021e4e:	4b23      	ldr	r3, [pc, #140]	; (8021edc <prvAddNewTaskToReadyList+0xc8>)
 8021e50:	681b      	ldr	r3, [r3, #0]
 8021e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e54:	687b      	ldr	r3, [r7, #4]
 8021e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e58:	429a      	cmp	r2, r3
 8021e5a:	d802      	bhi.n	8021e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021e5c:	4a1f      	ldr	r2, [pc, #124]	; (8021edc <prvAddNewTaskToReadyList+0xc8>)
 8021e5e:	687b      	ldr	r3, [r7, #4]
 8021e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8021e62:	4b20      	ldr	r3, [pc, #128]	; (8021ee4 <prvAddNewTaskToReadyList+0xd0>)
 8021e64:	681b      	ldr	r3, [r3, #0]
 8021e66:	3301      	adds	r3, #1
 8021e68:	4a1e      	ldr	r2, [pc, #120]	; (8021ee4 <prvAddNewTaskToReadyList+0xd0>)
 8021e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021e6c:	4b1d      	ldr	r3, [pc, #116]	; (8021ee4 <prvAddNewTaskToReadyList+0xd0>)
 8021e6e:	681a      	ldr	r2, [r3, #0]
 8021e70:	687b      	ldr	r3, [r7, #4]
 8021e72:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8021e74:	687b      	ldr	r3, [r7, #4]
 8021e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e78:	4b1b      	ldr	r3, [pc, #108]	; (8021ee8 <prvAddNewTaskToReadyList+0xd4>)
 8021e7a:	681b      	ldr	r3, [r3, #0]
 8021e7c:	429a      	cmp	r2, r3
 8021e7e:	d903      	bls.n	8021e88 <prvAddNewTaskToReadyList+0x74>
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e84:	4a18      	ldr	r2, [pc, #96]	; (8021ee8 <prvAddNewTaskToReadyList+0xd4>)
 8021e86:	6013      	str	r3, [r2, #0]
 8021e88:	687b      	ldr	r3, [r7, #4]
 8021e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e8c:	4613      	mov	r3, r2
 8021e8e:	009b      	lsls	r3, r3, #2
 8021e90:	4413      	add	r3, r2
 8021e92:	009b      	lsls	r3, r3, #2
 8021e94:	4a15      	ldr	r2, [pc, #84]	; (8021eec <prvAddNewTaskToReadyList+0xd8>)
 8021e96:	441a      	add	r2, r3
 8021e98:	687b      	ldr	r3, [r7, #4]
 8021e9a:	3304      	adds	r3, #4
 8021e9c:	4619      	mov	r1, r3
 8021e9e:	4610      	mov	r0, r2
 8021ea0:	f7fe fd47 	bl	8020932 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8021ea4:	f001 fbae 	bl	8023604 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021ea8:	4b0d      	ldr	r3, [pc, #52]	; (8021ee0 <prvAddNewTaskToReadyList+0xcc>)
 8021eaa:	681b      	ldr	r3, [r3, #0]
 8021eac:	2b00      	cmp	r3, #0
 8021eae:	d00e      	beq.n	8021ece <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021eb0:	4b0a      	ldr	r3, [pc, #40]	; (8021edc <prvAddNewTaskToReadyList+0xc8>)
 8021eb2:	681b      	ldr	r3, [r3, #0]
 8021eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021eb6:	687b      	ldr	r3, [r7, #4]
 8021eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021eba:	429a      	cmp	r2, r3
 8021ebc:	d207      	bcs.n	8021ece <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021ebe:	4b0c      	ldr	r3, [pc, #48]	; (8021ef0 <prvAddNewTaskToReadyList+0xdc>)
 8021ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021ec4:	601a      	str	r2, [r3, #0]
 8021ec6:	f3bf 8f4f 	dsb	sy
 8021eca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021ece:	bf00      	nop
 8021ed0:	3708      	adds	r7, #8
 8021ed2:	46bd      	mov	sp, r7
 8021ed4:	bd80      	pop	{r7, pc}
 8021ed6:	bf00      	nop
 8021ed8:	2000222c 	.word	0x2000222c
 8021edc:	20001d58 	.word	0x20001d58
 8021ee0:	20002238 	.word	0x20002238
 8021ee4:	20002248 	.word	0x20002248
 8021ee8:	20002234 	.word	0x20002234
 8021eec:	20001d5c 	.word	0x20001d5c
 8021ef0:	e000ed04 	.word	0xe000ed04

08021ef4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8021ef4:	b580      	push	{r7, lr}
 8021ef6:	b084      	sub	sp, #16
 8021ef8:	af00      	add	r7, sp, #0
 8021efa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021efc:	2300      	movs	r3, #0
 8021efe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	d017      	beq.n	8021f36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8021f06:	4b13      	ldr	r3, [pc, #76]	; (8021f54 <vTaskDelay+0x60>)
 8021f08:	681b      	ldr	r3, [r3, #0]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	d00a      	beq.n	8021f24 <vTaskDelay+0x30>
	__asm volatile
 8021f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f12:	f383 8811 	msr	BASEPRI, r3
 8021f16:	f3bf 8f6f 	isb	sy
 8021f1a:	f3bf 8f4f 	dsb	sy
 8021f1e:	60bb      	str	r3, [r7, #8]
}
 8021f20:	bf00      	nop
 8021f22:	e7fe      	b.n	8021f22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8021f24:	f000 f88c 	bl	8022040 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021f28:	2100      	movs	r1, #0
 8021f2a:	6878      	ldr	r0, [r7, #4]
 8021f2c:	f000 fe6a 	bl	8022c04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021f30:	f000 f894 	bl	802205c <xTaskResumeAll>
 8021f34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8021f36:	68fb      	ldr	r3, [r7, #12]
 8021f38:	2b00      	cmp	r3, #0
 8021f3a:	d107      	bne.n	8021f4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8021f3c:	4b06      	ldr	r3, [pc, #24]	; (8021f58 <vTaskDelay+0x64>)
 8021f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021f42:	601a      	str	r2, [r3, #0]
 8021f44:	f3bf 8f4f 	dsb	sy
 8021f48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021f4c:	bf00      	nop
 8021f4e:	3710      	adds	r7, #16
 8021f50:	46bd      	mov	sp, r7
 8021f52:	bd80      	pop	{r7, pc}
 8021f54:	20002254 	.word	0x20002254
 8021f58:	e000ed04 	.word	0xe000ed04

08021f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021f5c:	b580      	push	{r7, lr}
 8021f5e:	b08a      	sub	sp, #40	; 0x28
 8021f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8021f62:	2300      	movs	r3, #0
 8021f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8021f66:	2300      	movs	r3, #0
 8021f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021f6a:	463a      	mov	r2, r7
 8021f6c:	1d39      	adds	r1, r7, #4
 8021f6e:	f107 0308 	add.w	r3, r7, #8
 8021f72:	4618      	mov	r0, r3
 8021f74:	f7fe fc7c 	bl	8020870 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021f78:	6839      	ldr	r1, [r7, #0]
 8021f7a:	687b      	ldr	r3, [r7, #4]
 8021f7c:	68ba      	ldr	r2, [r7, #8]
 8021f7e:	9202      	str	r2, [sp, #8]
 8021f80:	9301      	str	r3, [sp, #4]
 8021f82:	2300      	movs	r3, #0
 8021f84:	9300      	str	r3, [sp, #0]
 8021f86:	2300      	movs	r3, #0
 8021f88:	460a      	mov	r2, r1
 8021f8a:	4925      	ldr	r1, [pc, #148]	; (8022020 <vTaskStartScheduler+0xc4>)
 8021f8c:	4825      	ldr	r0, [pc, #148]	; (8022024 <vTaskStartScheduler+0xc8>)
 8021f8e:	f7ff fdf5 	bl	8021b7c <xTaskCreateStatic>
 8021f92:	4603      	mov	r3, r0
 8021f94:	4a24      	ldr	r2, [pc, #144]	; (8022028 <vTaskStartScheduler+0xcc>)
 8021f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8021f98:	4b23      	ldr	r3, [pc, #140]	; (8022028 <vTaskStartScheduler+0xcc>)
 8021f9a:	681b      	ldr	r3, [r3, #0]
 8021f9c:	2b00      	cmp	r3, #0
 8021f9e:	d002      	beq.n	8021fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8021fa0:	2301      	movs	r3, #1
 8021fa2:	617b      	str	r3, [r7, #20]
 8021fa4:	e001      	b.n	8021faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8021fa6:	2300      	movs	r3, #0
 8021fa8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8021faa:	697b      	ldr	r3, [r7, #20]
 8021fac:	2b01      	cmp	r3, #1
 8021fae:	d102      	bne.n	8021fb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8021fb0:	f000 fe7c 	bl	8022cac <xTimerCreateTimerTask>
 8021fb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8021fb6:	697b      	ldr	r3, [r7, #20]
 8021fb8:	2b01      	cmp	r3, #1
 8021fba:	d11d      	bne.n	8021ff8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8021fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021fc0:	f383 8811 	msr	BASEPRI, r3
 8021fc4:	f3bf 8f6f 	isb	sy
 8021fc8:	f3bf 8f4f 	dsb	sy
 8021fcc:	613b      	str	r3, [r7, #16]
}
 8021fce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021fd0:	4b16      	ldr	r3, [pc, #88]	; (802202c <vTaskStartScheduler+0xd0>)
 8021fd2:	681b      	ldr	r3, [r3, #0]
 8021fd4:	3358      	adds	r3, #88	; 0x58
 8021fd6:	4a16      	ldr	r2, [pc, #88]	; (8022030 <vTaskStartScheduler+0xd4>)
 8021fd8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8021fda:	4b16      	ldr	r3, [pc, #88]	; (8022034 <vTaskStartScheduler+0xd8>)
 8021fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8021fe0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8021fe2:	4b15      	ldr	r3, [pc, #84]	; (8022038 <vTaskStartScheduler+0xdc>)
 8021fe4:	2201      	movs	r2, #1
 8021fe6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8021fe8:	4b14      	ldr	r3, [pc, #80]	; (802203c <vTaskStartScheduler+0xe0>)
 8021fea:	2200      	movs	r2, #0
 8021fec:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8021fee:	f7ef f82b 	bl	8011048 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8021ff2:	f001 fa35 	bl	8023460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8021ff6:	e00e      	b.n	8022016 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8021ff8:	697b      	ldr	r3, [r7, #20]
 8021ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021ffe:	d10a      	bne.n	8022016 <vTaskStartScheduler+0xba>
	__asm volatile
 8022000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022004:	f383 8811 	msr	BASEPRI, r3
 8022008:	f3bf 8f6f 	isb	sy
 802200c:	f3bf 8f4f 	dsb	sy
 8022010:	60fb      	str	r3, [r7, #12]
}
 8022012:	bf00      	nop
 8022014:	e7fe      	b.n	8022014 <vTaskStartScheduler+0xb8>
}
 8022016:	bf00      	nop
 8022018:	3718      	adds	r7, #24
 802201a:	46bd      	mov	sp, r7
 802201c:	bd80      	pop	{r7, pc}
 802201e:	bf00      	nop
 8022020:	08033808 	.word	0x08033808
 8022024:	080226ad 	.word	0x080226ad
 8022028:	20002250 	.word	0x20002250
 802202c:	20001d58 	.word	0x20001d58
 8022030:	20000188 	.word	0x20000188
 8022034:	2000224c 	.word	0x2000224c
 8022038:	20002238 	.word	0x20002238
 802203c:	20002230 	.word	0x20002230

08022040 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8022040:	b480      	push	{r7}
 8022042:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8022044:	4b04      	ldr	r3, [pc, #16]	; (8022058 <vTaskSuspendAll+0x18>)
 8022046:	681b      	ldr	r3, [r3, #0]
 8022048:	3301      	adds	r3, #1
 802204a:	4a03      	ldr	r2, [pc, #12]	; (8022058 <vTaskSuspendAll+0x18>)
 802204c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 802204e:	bf00      	nop
 8022050:	46bd      	mov	sp, r7
 8022052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022056:	4770      	bx	lr
 8022058:	20002254 	.word	0x20002254

0802205c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 802205c:	b580      	push	{r7, lr}
 802205e:	b084      	sub	sp, #16
 8022060:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8022062:	2300      	movs	r3, #0
 8022064:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8022066:	2300      	movs	r3, #0
 8022068:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802206a:	4b42      	ldr	r3, [pc, #264]	; (8022174 <xTaskResumeAll+0x118>)
 802206c:	681b      	ldr	r3, [r3, #0]
 802206e:	2b00      	cmp	r3, #0
 8022070:	d10a      	bne.n	8022088 <xTaskResumeAll+0x2c>
	__asm volatile
 8022072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022076:	f383 8811 	msr	BASEPRI, r3
 802207a:	f3bf 8f6f 	isb	sy
 802207e:	f3bf 8f4f 	dsb	sy
 8022082:	603b      	str	r3, [r7, #0]
}
 8022084:	bf00      	nop
 8022086:	e7fe      	b.n	8022086 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8022088:	f001 fa8c 	bl	80235a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802208c:	4b39      	ldr	r3, [pc, #228]	; (8022174 <xTaskResumeAll+0x118>)
 802208e:	681b      	ldr	r3, [r3, #0]
 8022090:	3b01      	subs	r3, #1
 8022092:	4a38      	ldr	r2, [pc, #224]	; (8022174 <xTaskResumeAll+0x118>)
 8022094:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022096:	4b37      	ldr	r3, [pc, #220]	; (8022174 <xTaskResumeAll+0x118>)
 8022098:	681b      	ldr	r3, [r3, #0]
 802209a:	2b00      	cmp	r3, #0
 802209c:	d162      	bne.n	8022164 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802209e:	4b36      	ldr	r3, [pc, #216]	; (8022178 <xTaskResumeAll+0x11c>)
 80220a0:	681b      	ldr	r3, [r3, #0]
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d05e      	beq.n	8022164 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80220a6:	e02f      	b.n	8022108 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80220a8:	4b34      	ldr	r3, [pc, #208]	; (802217c <xTaskResumeAll+0x120>)
 80220aa:	68db      	ldr	r3, [r3, #12]
 80220ac:	68db      	ldr	r3, [r3, #12]
 80220ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80220b0:	68fb      	ldr	r3, [r7, #12]
 80220b2:	3318      	adds	r3, #24
 80220b4:	4618      	mov	r0, r3
 80220b6:	f7fe fc99 	bl	80209ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80220ba:	68fb      	ldr	r3, [r7, #12]
 80220bc:	3304      	adds	r3, #4
 80220be:	4618      	mov	r0, r3
 80220c0:	f7fe fc94 	bl	80209ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80220c4:	68fb      	ldr	r3, [r7, #12]
 80220c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80220c8:	4b2d      	ldr	r3, [pc, #180]	; (8022180 <xTaskResumeAll+0x124>)
 80220ca:	681b      	ldr	r3, [r3, #0]
 80220cc:	429a      	cmp	r2, r3
 80220ce:	d903      	bls.n	80220d8 <xTaskResumeAll+0x7c>
 80220d0:	68fb      	ldr	r3, [r7, #12]
 80220d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220d4:	4a2a      	ldr	r2, [pc, #168]	; (8022180 <xTaskResumeAll+0x124>)
 80220d6:	6013      	str	r3, [r2, #0]
 80220d8:	68fb      	ldr	r3, [r7, #12]
 80220da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80220dc:	4613      	mov	r3, r2
 80220de:	009b      	lsls	r3, r3, #2
 80220e0:	4413      	add	r3, r2
 80220e2:	009b      	lsls	r3, r3, #2
 80220e4:	4a27      	ldr	r2, [pc, #156]	; (8022184 <xTaskResumeAll+0x128>)
 80220e6:	441a      	add	r2, r3
 80220e8:	68fb      	ldr	r3, [r7, #12]
 80220ea:	3304      	adds	r3, #4
 80220ec:	4619      	mov	r1, r3
 80220ee:	4610      	mov	r0, r2
 80220f0:	f7fe fc1f 	bl	8020932 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80220f4:	68fb      	ldr	r3, [r7, #12]
 80220f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80220f8:	4b23      	ldr	r3, [pc, #140]	; (8022188 <xTaskResumeAll+0x12c>)
 80220fa:	681b      	ldr	r3, [r3, #0]
 80220fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220fe:	429a      	cmp	r2, r3
 8022100:	d302      	bcc.n	8022108 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8022102:	4b22      	ldr	r3, [pc, #136]	; (802218c <xTaskResumeAll+0x130>)
 8022104:	2201      	movs	r2, #1
 8022106:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022108:	4b1c      	ldr	r3, [pc, #112]	; (802217c <xTaskResumeAll+0x120>)
 802210a:	681b      	ldr	r3, [r3, #0]
 802210c:	2b00      	cmp	r3, #0
 802210e:	d1cb      	bne.n	80220a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8022110:	68fb      	ldr	r3, [r7, #12]
 8022112:	2b00      	cmp	r3, #0
 8022114:	d001      	beq.n	802211a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8022116:	f000 fbbb 	bl	8022890 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 802211a:	4b1d      	ldr	r3, [pc, #116]	; (8022190 <xTaskResumeAll+0x134>)
 802211c:	681b      	ldr	r3, [r3, #0]
 802211e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8022120:	687b      	ldr	r3, [r7, #4]
 8022122:	2b00      	cmp	r3, #0
 8022124:	d010      	beq.n	8022148 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8022126:	f000 f847 	bl	80221b8 <xTaskIncrementTick>
 802212a:	4603      	mov	r3, r0
 802212c:	2b00      	cmp	r3, #0
 802212e:	d002      	beq.n	8022136 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8022130:	4b16      	ldr	r3, [pc, #88]	; (802218c <xTaskResumeAll+0x130>)
 8022132:	2201      	movs	r2, #1
 8022134:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8022136:	687b      	ldr	r3, [r7, #4]
 8022138:	3b01      	subs	r3, #1
 802213a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 802213c:	687b      	ldr	r3, [r7, #4]
 802213e:	2b00      	cmp	r3, #0
 8022140:	d1f1      	bne.n	8022126 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8022142:	4b13      	ldr	r3, [pc, #76]	; (8022190 <xTaskResumeAll+0x134>)
 8022144:	2200      	movs	r2, #0
 8022146:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8022148:	4b10      	ldr	r3, [pc, #64]	; (802218c <xTaskResumeAll+0x130>)
 802214a:	681b      	ldr	r3, [r3, #0]
 802214c:	2b00      	cmp	r3, #0
 802214e:	d009      	beq.n	8022164 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8022150:	2301      	movs	r3, #1
 8022152:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8022154:	4b0f      	ldr	r3, [pc, #60]	; (8022194 <xTaskResumeAll+0x138>)
 8022156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802215a:	601a      	str	r2, [r3, #0]
 802215c:	f3bf 8f4f 	dsb	sy
 8022160:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022164:	f001 fa4e 	bl	8023604 <vPortExitCritical>

	return xAlreadyYielded;
 8022168:	68bb      	ldr	r3, [r7, #8]
}
 802216a:	4618      	mov	r0, r3
 802216c:	3710      	adds	r7, #16
 802216e:	46bd      	mov	sp, r7
 8022170:	bd80      	pop	{r7, pc}
 8022172:	bf00      	nop
 8022174:	20002254 	.word	0x20002254
 8022178:	2000222c 	.word	0x2000222c
 802217c:	200021ec 	.word	0x200021ec
 8022180:	20002234 	.word	0x20002234
 8022184:	20001d5c 	.word	0x20001d5c
 8022188:	20001d58 	.word	0x20001d58
 802218c:	20002240 	.word	0x20002240
 8022190:	2000223c 	.word	0x2000223c
 8022194:	e000ed04 	.word	0xe000ed04

08022198 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8022198:	b480      	push	{r7}
 802219a:	b083      	sub	sp, #12
 802219c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802219e:	4b05      	ldr	r3, [pc, #20]	; (80221b4 <xTaskGetTickCount+0x1c>)
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80221a4:	687b      	ldr	r3, [r7, #4]
}
 80221a6:	4618      	mov	r0, r3
 80221a8:	370c      	adds	r7, #12
 80221aa:	46bd      	mov	sp, r7
 80221ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221b0:	4770      	bx	lr
 80221b2:	bf00      	nop
 80221b4:	20002230 	.word	0x20002230

080221b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80221b8:	b580      	push	{r7, lr}
 80221ba:	b086      	sub	sp, #24
 80221bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80221be:	2300      	movs	r3, #0
 80221c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80221c2:	4b53      	ldr	r3, [pc, #332]	; (8022310 <xTaskIncrementTick+0x158>)
 80221c4:	681b      	ldr	r3, [r3, #0]
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	f040 8095 	bne.w	80222f6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80221cc:	4b51      	ldr	r3, [pc, #324]	; (8022314 <xTaskIncrementTick+0x15c>)
 80221ce:	681b      	ldr	r3, [r3, #0]
 80221d0:	3301      	adds	r3, #1
 80221d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80221d4:	4a4f      	ldr	r2, [pc, #316]	; (8022314 <xTaskIncrementTick+0x15c>)
 80221d6:	693b      	ldr	r3, [r7, #16]
 80221d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80221da:	693b      	ldr	r3, [r7, #16]
 80221dc:	2b00      	cmp	r3, #0
 80221de:	d120      	bne.n	8022222 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80221e0:	4b4d      	ldr	r3, [pc, #308]	; (8022318 <xTaskIncrementTick+0x160>)
 80221e2:	681b      	ldr	r3, [r3, #0]
 80221e4:	681b      	ldr	r3, [r3, #0]
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	d00a      	beq.n	8022200 <xTaskIncrementTick+0x48>
	__asm volatile
 80221ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221ee:	f383 8811 	msr	BASEPRI, r3
 80221f2:	f3bf 8f6f 	isb	sy
 80221f6:	f3bf 8f4f 	dsb	sy
 80221fa:	603b      	str	r3, [r7, #0]
}
 80221fc:	bf00      	nop
 80221fe:	e7fe      	b.n	80221fe <xTaskIncrementTick+0x46>
 8022200:	4b45      	ldr	r3, [pc, #276]	; (8022318 <xTaskIncrementTick+0x160>)
 8022202:	681b      	ldr	r3, [r3, #0]
 8022204:	60fb      	str	r3, [r7, #12]
 8022206:	4b45      	ldr	r3, [pc, #276]	; (802231c <xTaskIncrementTick+0x164>)
 8022208:	681b      	ldr	r3, [r3, #0]
 802220a:	4a43      	ldr	r2, [pc, #268]	; (8022318 <xTaskIncrementTick+0x160>)
 802220c:	6013      	str	r3, [r2, #0]
 802220e:	4a43      	ldr	r2, [pc, #268]	; (802231c <xTaskIncrementTick+0x164>)
 8022210:	68fb      	ldr	r3, [r7, #12]
 8022212:	6013      	str	r3, [r2, #0]
 8022214:	4b42      	ldr	r3, [pc, #264]	; (8022320 <xTaskIncrementTick+0x168>)
 8022216:	681b      	ldr	r3, [r3, #0]
 8022218:	3301      	adds	r3, #1
 802221a:	4a41      	ldr	r2, [pc, #260]	; (8022320 <xTaskIncrementTick+0x168>)
 802221c:	6013      	str	r3, [r2, #0]
 802221e:	f000 fb37 	bl	8022890 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8022222:	4b40      	ldr	r3, [pc, #256]	; (8022324 <xTaskIncrementTick+0x16c>)
 8022224:	681b      	ldr	r3, [r3, #0]
 8022226:	693a      	ldr	r2, [r7, #16]
 8022228:	429a      	cmp	r2, r3
 802222a:	d349      	bcc.n	80222c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802222c:	4b3a      	ldr	r3, [pc, #232]	; (8022318 <xTaskIncrementTick+0x160>)
 802222e:	681b      	ldr	r3, [r3, #0]
 8022230:	681b      	ldr	r3, [r3, #0]
 8022232:	2b00      	cmp	r3, #0
 8022234:	d104      	bne.n	8022240 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022236:	4b3b      	ldr	r3, [pc, #236]	; (8022324 <xTaskIncrementTick+0x16c>)
 8022238:	f04f 32ff 	mov.w	r2, #4294967295
 802223c:	601a      	str	r2, [r3, #0]
					break;
 802223e:	e03f      	b.n	80222c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022240:	4b35      	ldr	r3, [pc, #212]	; (8022318 <xTaskIncrementTick+0x160>)
 8022242:	681b      	ldr	r3, [r3, #0]
 8022244:	68db      	ldr	r3, [r3, #12]
 8022246:	68db      	ldr	r3, [r3, #12]
 8022248:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802224a:	68bb      	ldr	r3, [r7, #8]
 802224c:	685b      	ldr	r3, [r3, #4]
 802224e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8022250:	693a      	ldr	r2, [r7, #16]
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	429a      	cmp	r2, r3
 8022256:	d203      	bcs.n	8022260 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8022258:	4a32      	ldr	r2, [pc, #200]	; (8022324 <xTaskIncrementTick+0x16c>)
 802225a:	687b      	ldr	r3, [r7, #4]
 802225c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802225e:	e02f      	b.n	80222c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022260:	68bb      	ldr	r3, [r7, #8]
 8022262:	3304      	adds	r3, #4
 8022264:	4618      	mov	r0, r3
 8022266:	f7fe fbc1 	bl	80209ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802226a:	68bb      	ldr	r3, [r7, #8]
 802226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802226e:	2b00      	cmp	r3, #0
 8022270:	d004      	beq.n	802227c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022272:	68bb      	ldr	r3, [r7, #8]
 8022274:	3318      	adds	r3, #24
 8022276:	4618      	mov	r0, r3
 8022278:	f7fe fbb8 	bl	80209ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802227c:	68bb      	ldr	r3, [r7, #8]
 802227e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022280:	4b29      	ldr	r3, [pc, #164]	; (8022328 <xTaskIncrementTick+0x170>)
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	429a      	cmp	r2, r3
 8022286:	d903      	bls.n	8022290 <xTaskIncrementTick+0xd8>
 8022288:	68bb      	ldr	r3, [r7, #8]
 802228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802228c:	4a26      	ldr	r2, [pc, #152]	; (8022328 <xTaskIncrementTick+0x170>)
 802228e:	6013      	str	r3, [r2, #0]
 8022290:	68bb      	ldr	r3, [r7, #8]
 8022292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022294:	4613      	mov	r3, r2
 8022296:	009b      	lsls	r3, r3, #2
 8022298:	4413      	add	r3, r2
 802229a:	009b      	lsls	r3, r3, #2
 802229c:	4a23      	ldr	r2, [pc, #140]	; (802232c <xTaskIncrementTick+0x174>)
 802229e:	441a      	add	r2, r3
 80222a0:	68bb      	ldr	r3, [r7, #8]
 80222a2:	3304      	adds	r3, #4
 80222a4:	4619      	mov	r1, r3
 80222a6:	4610      	mov	r0, r2
 80222a8:	f7fe fb43 	bl	8020932 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80222ac:	68bb      	ldr	r3, [r7, #8]
 80222ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80222b0:	4b1f      	ldr	r3, [pc, #124]	; (8022330 <xTaskIncrementTick+0x178>)
 80222b2:	681b      	ldr	r3, [r3, #0]
 80222b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80222b6:	429a      	cmp	r2, r3
 80222b8:	d3b8      	bcc.n	802222c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80222ba:	2301      	movs	r3, #1
 80222bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80222be:	e7b5      	b.n	802222c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80222c0:	4b1b      	ldr	r3, [pc, #108]	; (8022330 <xTaskIncrementTick+0x178>)
 80222c2:	681b      	ldr	r3, [r3, #0]
 80222c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80222c6:	4919      	ldr	r1, [pc, #100]	; (802232c <xTaskIncrementTick+0x174>)
 80222c8:	4613      	mov	r3, r2
 80222ca:	009b      	lsls	r3, r3, #2
 80222cc:	4413      	add	r3, r2
 80222ce:	009b      	lsls	r3, r3, #2
 80222d0:	440b      	add	r3, r1
 80222d2:	681b      	ldr	r3, [r3, #0]
 80222d4:	2b01      	cmp	r3, #1
 80222d6:	d901      	bls.n	80222dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80222d8:	2301      	movs	r3, #1
 80222da:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 80222dc:	4b15      	ldr	r3, [pc, #84]	; (8022334 <xTaskIncrementTick+0x17c>)
 80222de:	681b      	ldr	r3, [r3, #0]
 80222e0:	2b00      	cmp	r3, #0
 80222e2:	d101      	bne.n	80222e8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80222e4:	f7ee febf 	bl	8011066 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80222e8:	4b13      	ldr	r3, [pc, #76]	; (8022338 <xTaskIncrementTick+0x180>)
 80222ea:	681b      	ldr	r3, [r3, #0]
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d009      	beq.n	8022304 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80222f0:	2301      	movs	r3, #1
 80222f2:	617b      	str	r3, [r7, #20]
 80222f4:	e006      	b.n	8022304 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80222f6:	4b0f      	ldr	r3, [pc, #60]	; (8022334 <xTaskIncrementTick+0x17c>)
 80222f8:	681b      	ldr	r3, [r3, #0]
 80222fa:	3301      	adds	r3, #1
 80222fc:	4a0d      	ldr	r2, [pc, #52]	; (8022334 <xTaskIncrementTick+0x17c>)
 80222fe:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8022300:	f7ee feb1 	bl	8011066 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8022304:	697b      	ldr	r3, [r7, #20]
}
 8022306:	4618      	mov	r0, r3
 8022308:	3718      	adds	r7, #24
 802230a:	46bd      	mov	sp, r7
 802230c:	bd80      	pop	{r7, pc}
 802230e:	bf00      	nop
 8022310:	20002254 	.word	0x20002254
 8022314:	20002230 	.word	0x20002230
 8022318:	200021e4 	.word	0x200021e4
 802231c:	200021e8 	.word	0x200021e8
 8022320:	20002244 	.word	0x20002244
 8022324:	2000224c 	.word	0x2000224c
 8022328:	20002234 	.word	0x20002234
 802232c:	20001d5c 	.word	0x20001d5c
 8022330:	20001d58 	.word	0x20001d58
 8022334:	2000223c 	.word	0x2000223c
 8022338:	20002240 	.word	0x20002240

0802233c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 802233c:	b580      	push	{r7, lr}
 802233e:	b084      	sub	sp, #16
 8022340:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8022342:	4b36      	ldr	r3, [pc, #216]	; (802241c <vTaskSwitchContext+0xe0>)
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	2b00      	cmp	r3, #0
 8022348:	d003      	beq.n	8022352 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802234a:	4b35      	ldr	r3, [pc, #212]	; (8022420 <vTaskSwitchContext+0xe4>)
 802234c:	2201      	movs	r2, #1
 802234e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8022350:	e05f      	b.n	8022412 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8022352:	4b33      	ldr	r3, [pc, #204]	; (8022420 <vTaskSwitchContext+0xe4>)
 8022354:	2200      	movs	r2, #0
 8022356:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8022358:	f7ee fe7d 	bl	8011056 <getRunTimeCounterValue>
 802235c:	4603      	mov	r3, r0
 802235e:	4a31      	ldr	r2, [pc, #196]	; (8022424 <vTaskSwitchContext+0xe8>)
 8022360:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8022362:	4b30      	ldr	r3, [pc, #192]	; (8022424 <vTaskSwitchContext+0xe8>)
 8022364:	681a      	ldr	r2, [r3, #0]
 8022366:	4b30      	ldr	r3, [pc, #192]	; (8022428 <vTaskSwitchContext+0xec>)
 8022368:	681b      	ldr	r3, [r3, #0]
 802236a:	429a      	cmp	r2, r3
 802236c:	d909      	bls.n	8022382 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 802236e:	4b2f      	ldr	r3, [pc, #188]	; (802242c <vTaskSwitchContext+0xf0>)
 8022370:	681b      	ldr	r3, [r3, #0]
 8022372:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8022374:	4a2b      	ldr	r2, [pc, #172]	; (8022424 <vTaskSwitchContext+0xe8>)
 8022376:	6810      	ldr	r0, [r2, #0]
 8022378:	4a2b      	ldr	r2, [pc, #172]	; (8022428 <vTaskSwitchContext+0xec>)
 802237a:	6812      	ldr	r2, [r2, #0]
 802237c:	1a82      	subs	r2, r0, r2
 802237e:	440a      	add	r2, r1
 8022380:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8022382:	4b28      	ldr	r3, [pc, #160]	; (8022424 <vTaskSwitchContext+0xe8>)
 8022384:	681b      	ldr	r3, [r3, #0]
 8022386:	4a28      	ldr	r2, [pc, #160]	; (8022428 <vTaskSwitchContext+0xec>)
 8022388:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802238a:	4b29      	ldr	r3, [pc, #164]	; (8022430 <vTaskSwitchContext+0xf4>)
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	60fb      	str	r3, [r7, #12]
 8022390:	e010      	b.n	80223b4 <vTaskSwitchContext+0x78>
 8022392:	68fb      	ldr	r3, [r7, #12]
 8022394:	2b00      	cmp	r3, #0
 8022396:	d10a      	bne.n	80223ae <vTaskSwitchContext+0x72>
	__asm volatile
 8022398:	f04f 0350 	mov.w	r3, #80	; 0x50
 802239c:	f383 8811 	msr	BASEPRI, r3
 80223a0:	f3bf 8f6f 	isb	sy
 80223a4:	f3bf 8f4f 	dsb	sy
 80223a8:	607b      	str	r3, [r7, #4]
}
 80223aa:	bf00      	nop
 80223ac:	e7fe      	b.n	80223ac <vTaskSwitchContext+0x70>
 80223ae:	68fb      	ldr	r3, [r7, #12]
 80223b0:	3b01      	subs	r3, #1
 80223b2:	60fb      	str	r3, [r7, #12]
 80223b4:	491f      	ldr	r1, [pc, #124]	; (8022434 <vTaskSwitchContext+0xf8>)
 80223b6:	68fa      	ldr	r2, [r7, #12]
 80223b8:	4613      	mov	r3, r2
 80223ba:	009b      	lsls	r3, r3, #2
 80223bc:	4413      	add	r3, r2
 80223be:	009b      	lsls	r3, r3, #2
 80223c0:	440b      	add	r3, r1
 80223c2:	681b      	ldr	r3, [r3, #0]
 80223c4:	2b00      	cmp	r3, #0
 80223c6:	d0e4      	beq.n	8022392 <vTaskSwitchContext+0x56>
 80223c8:	68fa      	ldr	r2, [r7, #12]
 80223ca:	4613      	mov	r3, r2
 80223cc:	009b      	lsls	r3, r3, #2
 80223ce:	4413      	add	r3, r2
 80223d0:	009b      	lsls	r3, r3, #2
 80223d2:	4a18      	ldr	r2, [pc, #96]	; (8022434 <vTaskSwitchContext+0xf8>)
 80223d4:	4413      	add	r3, r2
 80223d6:	60bb      	str	r3, [r7, #8]
 80223d8:	68bb      	ldr	r3, [r7, #8]
 80223da:	685b      	ldr	r3, [r3, #4]
 80223dc:	685a      	ldr	r2, [r3, #4]
 80223de:	68bb      	ldr	r3, [r7, #8]
 80223e0:	605a      	str	r2, [r3, #4]
 80223e2:	68bb      	ldr	r3, [r7, #8]
 80223e4:	685a      	ldr	r2, [r3, #4]
 80223e6:	68bb      	ldr	r3, [r7, #8]
 80223e8:	3308      	adds	r3, #8
 80223ea:	429a      	cmp	r2, r3
 80223ec:	d104      	bne.n	80223f8 <vTaskSwitchContext+0xbc>
 80223ee:	68bb      	ldr	r3, [r7, #8]
 80223f0:	685b      	ldr	r3, [r3, #4]
 80223f2:	685a      	ldr	r2, [r3, #4]
 80223f4:	68bb      	ldr	r3, [r7, #8]
 80223f6:	605a      	str	r2, [r3, #4]
 80223f8:	68bb      	ldr	r3, [r7, #8]
 80223fa:	685b      	ldr	r3, [r3, #4]
 80223fc:	68db      	ldr	r3, [r3, #12]
 80223fe:	4a0b      	ldr	r2, [pc, #44]	; (802242c <vTaskSwitchContext+0xf0>)
 8022400:	6013      	str	r3, [r2, #0]
 8022402:	4a0b      	ldr	r2, [pc, #44]	; (8022430 <vTaskSwitchContext+0xf4>)
 8022404:	68fb      	ldr	r3, [r7, #12]
 8022406:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8022408:	4b08      	ldr	r3, [pc, #32]	; (802242c <vTaskSwitchContext+0xf0>)
 802240a:	681b      	ldr	r3, [r3, #0]
 802240c:	3358      	adds	r3, #88	; 0x58
 802240e:	4a0a      	ldr	r2, [pc, #40]	; (8022438 <vTaskSwitchContext+0xfc>)
 8022410:	6013      	str	r3, [r2, #0]
}
 8022412:	bf00      	nop
 8022414:	3710      	adds	r7, #16
 8022416:	46bd      	mov	sp, r7
 8022418:	bd80      	pop	{r7, pc}
 802241a:	bf00      	nop
 802241c:	20002254 	.word	0x20002254
 8022420:	20002240 	.word	0x20002240
 8022424:	2000225c 	.word	0x2000225c
 8022428:	20002258 	.word	0x20002258
 802242c:	20001d58 	.word	0x20001d58
 8022430:	20002234 	.word	0x20002234
 8022434:	20001d5c 	.word	0x20001d5c
 8022438:	20000188 	.word	0x20000188

0802243c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802243c:	b580      	push	{r7, lr}
 802243e:	b084      	sub	sp, #16
 8022440:	af00      	add	r7, sp, #0
 8022442:	6078      	str	r0, [r7, #4]
 8022444:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	2b00      	cmp	r3, #0
 802244a:	d10a      	bne.n	8022462 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802244c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022450:	f383 8811 	msr	BASEPRI, r3
 8022454:	f3bf 8f6f 	isb	sy
 8022458:	f3bf 8f4f 	dsb	sy
 802245c:	60fb      	str	r3, [r7, #12]
}
 802245e:	bf00      	nop
 8022460:	e7fe      	b.n	8022460 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022462:	4b07      	ldr	r3, [pc, #28]	; (8022480 <vTaskPlaceOnEventList+0x44>)
 8022464:	681b      	ldr	r3, [r3, #0]
 8022466:	3318      	adds	r3, #24
 8022468:	4619      	mov	r1, r3
 802246a:	6878      	ldr	r0, [r7, #4]
 802246c:	f7fe fa85 	bl	802097a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022470:	2101      	movs	r1, #1
 8022472:	6838      	ldr	r0, [r7, #0]
 8022474:	f000 fbc6 	bl	8022c04 <prvAddCurrentTaskToDelayedList>
}
 8022478:	bf00      	nop
 802247a:	3710      	adds	r7, #16
 802247c:	46bd      	mov	sp, r7
 802247e:	bd80      	pop	{r7, pc}
 8022480:	20001d58 	.word	0x20001d58

08022484 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022484:	b580      	push	{r7, lr}
 8022486:	b086      	sub	sp, #24
 8022488:	af00      	add	r7, sp, #0
 802248a:	60f8      	str	r0, [r7, #12]
 802248c:	60b9      	str	r1, [r7, #8]
 802248e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8022490:	68fb      	ldr	r3, [r7, #12]
 8022492:	2b00      	cmp	r3, #0
 8022494:	d10a      	bne.n	80224ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8022496:	f04f 0350 	mov.w	r3, #80	; 0x50
 802249a:	f383 8811 	msr	BASEPRI, r3
 802249e:	f3bf 8f6f 	isb	sy
 80224a2:	f3bf 8f4f 	dsb	sy
 80224a6:	617b      	str	r3, [r7, #20]
}
 80224a8:	bf00      	nop
 80224aa:	e7fe      	b.n	80224aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80224ac:	4b0a      	ldr	r3, [pc, #40]	; (80224d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80224ae:	681b      	ldr	r3, [r3, #0]
 80224b0:	3318      	adds	r3, #24
 80224b2:	4619      	mov	r1, r3
 80224b4:	68f8      	ldr	r0, [r7, #12]
 80224b6:	f7fe fa3c 	bl	8020932 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	2b00      	cmp	r3, #0
 80224be:	d002      	beq.n	80224c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80224c0:	f04f 33ff 	mov.w	r3, #4294967295
 80224c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80224c6:	6879      	ldr	r1, [r7, #4]
 80224c8:	68b8      	ldr	r0, [r7, #8]
 80224ca:	f000 fb9b 	bl	8022c04 <prvAddCurrentTaskToDelayedList>
	}
 80224ce:	bf00      	nop
 80224d0:	3718      	adds	r7, #24
 80224d2:	46bd      	mov	sp, r7
 80224d4:	bd80      	pop	{r7, pc}
 80224d6:	bf00      	nop
 80224d8:	20001d58 	.word	0x20001d58

080224dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80224dc:	b580      	push	{r7, lr}
 80224de:	b086      	sub	sp, #24
 80224e0:	af00      	add	r7, sp, #0
 80224e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80224e4:	687b      	ldr	r3, [r7, #4]
 80224e6:	68db      	ldr	r3, [r3, #12]
 80224e8:	68db      	ldr	r3, [r3, #12]
 80224ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80224ec:	693b      	ldr	r3, [r7, #16]
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	d10a      	bne.n	8022508 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80224f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80224f6:	f383 8811 	msr	BASEPRI, r3
 80224fa:	f3bf 8f6f 	isb	sy
 80224fe:	f3bf 8f4f 	dsb	sy
 8022502:	60fb      	str	r3, [r7, #12]
}
 8022504:	bf00      	nop
 8022506:	e7fe      	b.n	8022506 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8022508:	693b      	ldr	r3, [r7, #16]
 802250a:	3318      	adds	r3, #24
 802250c:	4618      	mov	r0, r3
 802250e:	f7fe fa6d 	bl	80209ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022512:	4b1e      	ldr	r3, [pc, #120]	; (802258c <xTaskRemoveFromEventList+0xb0>)
 8022514:	681b      	ldr	r3, [r3, #0]
 8022516:	2b00      	cmp	r3, #0
 8022518:	d11d      	bne.n	8022556 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802251a:	693b      	ldr	r3, [r7, #16]
 802251c:	3304      	adds	r3, #4
 802251e:	4618      	mov	r0, r3
 8022520:	f7fe fa64 	bl	80209ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8022524:	693b      	ldr	r3, [r7, #16]
 8022526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022528:	4b19      	ldr	r3, [pc, #100]	; (8022590 <xTaskRemoveFromEventList+0xb4>)
 802252a:	681b      	ldr	r3, [r3, #0]
 802252c:	429a      	cmp	r2, r3
 802252e:	d903      	bls.n	8022538 <xTaskRemoveFromEventList+0x5c>
 8022530:	693b      	ldr	r3, [r7, #16]
 8022532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022534:	4a16      	ldr	r2, [pc, #88]	; (8022590 <xTaskRemoveFromEventList+0xb4>)
 8022536:	6013      	str	r3, [r2, #0]
 8022538:	693b      	ldr	r3, [r7, #16]
 802253a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802253c:	4613      	mov	r3, r2
 802253e:	009b      	lsls	r3, r3, #2
 8022540:	4413      	add	r3, r2
 8022542:	009b      	lsls	r3, r3, #2
 8022544:	4a13      	ldr	r2, [pc, #76]	; (8022594 <xTaskRemoveFromEventList+0xb8>)
 8022546:	441a      	add	r2, r3
 8022548:	693b      	ldr	r3, [r7, #16]
 802254a:	3304      	adds	r3, #4
 802254c:	4619      	mov	r1, r3
 802254e:	4610      	mov	r0, r2
 8022550:	f7fe f9ef 	bl	8020932 <vListInsertEnd>
 8022554:	e005      	b.n	8022562 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022556:	693b      	ldr	r3, [r7, #16]
 8022558:	3318      	adds	r3, #24
 802255a:	4619      	mov	r1, r3
 802255c:	480e      	ldr	r0, [pc, #56]	; (8022598 <xTaskRemoveFromEventList+0xbc>)
 802255e:	f7fe f9e8 	bl	8020932 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022562:	693b      	ldr	r3, [r7, #16]
 8022564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022566:	4b0d      	ldr	r3, [pc, #52]	; (802259c <xTaskRemoveFromEventList+0xc0>)
 8022568:	681b      	ldr	r3, [r3, #0]
 802256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802256c:	429a      	cmp	r2, r3
 802256e:	d905      	bls.n	802257c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8022570:	2301      	movs	r3, #1
 8022572:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8022574:	4b0a      	ldr	r3, [pc, #40]	; (80225a0 <xTaskRemoveFromEventList+0xc4>)
 8022576:	2201      	movs	r2, #1
 8022578:	601a      	str	r2, [r3, #0]
 802257a:	e001      	b.n	8022580 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 802257c:	2300      	movs	r3, #0
 802257e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8022580:	697b      	ldr	r3, [r7, #20]
}
 8022582:	4618      	mov	r0, r3
 8022584:	3718      	adds	r7, #24
 8022586:	46bd      	mov	sp, r7
 8022588:	bd80      	pop	{r7, pc}
 802258a:	bf00      	nop
 802258c:	20002254 	.word	0x20002254
 8022590:	20002234 	.word	0x20002234
 8022594:	20001d5c 	.word	0x20001d5c
 8022598:	200021ec 	.word	0x200021ec
 802259c:	20001d58 	.word	0x20001d58
 80225a0:	20002240 	.word	0x20002240

080225a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80225a4:	b480      	push	{r7}
 80225a6:	b083      	sub	sp, #12
 80225a8:	af00      	add	r7, sp, #0
 80225aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80225ac:	4b06      	ldr	r3, [pc, #24]	; (80225c8 <vTaskInternalSetTimeOutState+0x24>)
 80225ae:	681a      	ldr	r2, [r3, #0]
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80225b4:	4b05      	ldr	r3, [pc, #20]	; (80225cc <vTaskInternalSetTimeOutState+0x28>)
 80225b6:	681a      	ldr	r2, [r3, #0]
 80225b8:	687b      	ldr	r3, [r7, #4]
 80225ba:	605a      	str	r2, [r3, #4]
}
 80225bc:	bf00      	nop
 80225be:	370c      	adds	r7, #12
 80225c0:	46bd      	mov	sp, r7
 80225c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225c6:	4770      	bx	lr
 80225c8:	20002244 	.word	0x20002244
 80225cc:	20002230 	.word	0x20002230

080225d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80225d0:	b580      	push	{r7, lr}
 80225d2:	b088      	sub	sp, #32
 80225d4:	af00      	add	r7, sp, #0
 80225d6:	6078      	str	r0, [r7, #4]
 80225d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80225da:	687b      	ldr	r3, [r7, #4]
 80225dc:	2b00      	cmp	r3, #0
 80225de:	d10a      	bne.n	80225f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80225e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225e4:	f383 8811 	msr	BASEPRI, r3
 80225e8:	f3bf 8f6f 	isb	sy
 80225ec:	f3bf 8f4f 	dsb	sy
 80225f0:	613b      	str	r3, [r7, #16]
}
 80225f2:	bf00      	nop
 80225f4:	e7fe      	b.n	80225f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80225f6:	683b      	ldr	r3, [r7, #0]
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	d10a      	bne.n	8022612 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80225fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022600:	f383 8811 	msr	BASEPRI, r3
 8022604:	f3bf 8f6f 	isb	sy
 8022608:	f3bf 8f4f 	dsb	sy
 802260c:	60fb      	str	r3, [r7, #12]
}
 802260e:	bf00      	nop
 8022610:	e7fe      	b.n	8022610 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8022612:	f000 ffc7 	bl	80235a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8022616:	4b1d      	ldr	r3, [pc, #116]	; (802268c <xTaskCheckForTimeOut+0xbc>)
 8022618:	681b      	ldr	r3, [r3, #0]
 802261a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	685b      	ldr	r3, [r3, #4]
 8022620:	69ba      	ldr	r2, [r7, #24]
 8022622:	1ad3      	subs	r3, r2, r3
 8022624:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8022626:	683b      	ldr	r3, [r7, #0]
 8022628:	681b      	ldr	r3, [r3, #0]
 802262a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802262e:	d102      	bne.n	8022636 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8022630:	2300      	movs	r3, #0
 8022632:	61fb      	str	r3, [r7, #28]
 8022634:	e023      	b.n	802267e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8022636:	687b      	ldr	r3, [r7, #4]
 8022638:	681a      	ldr	r2, [r3, #0]
 802263a:	4b15      	ldr	r3, [pc, #84]	; (8022690 <xTaskCheckForTimeOut+0xc0>)
 802263c:	681b      	ldr	r3, [r3, #0]
 802263e:	429a      	cmp	r2, r3
 8022640:	d007      	beq.n	8022652 <xTaskCheckForTimeOut+0x82>
 8022642:	687b      	ldr	r3, [r7, #4]
 8022644:	685b      	ldr	r3, [r3, #4]
 8022646:	69ba      	ldr	r2, [r7, #24]
 8022648:	429a      	cmp	r2, r3
 802264a:	d302      	bcc.n	8022652 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802264c:	2301      	movs	r3, #1
 802264e:	61fb      	str	r3, [r7, #28]
 8022650:	e015      	b.n	802267e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8022652:	683b      	ldr	r3, [r7, #0]
 8022654:	681b      	ldr	r3, [r3, #0]
 8022656:	697a      	ldr	r2, [r7, #20]
 8022658:	429a      	cmp	r2, r3
 802265a:	d20b      	bcs.n	8022674 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802265c:	683b      	ldr	r3, [r7, #0]
 802265e:	681a      	ldr	r2, [r3, #0]
 8022660:	697b      	ldr	r3, [r7, #20]
 8022662:	1ad2      	subs	r2, r2, r3
 8022664:	683b      	ldr	r3, [r7, #0]
 8022666:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022668:	6878      	ldr	r0, [r7, #4]
 802266a:	f7ff ff9b 	bl	80225a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802266e:	2300      	movs	r3, #0
 8022670:	61fb      	str	r3, [r7, #28]
 8022672:	e004      	b.n	802267e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8022674:	683b      	ldr	r3, [r7, #0]
 8022676:	2200      	movs	r2, #0
 8022678:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802267a:	2301      	movs	r3, #1
 802267c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802267e:	f000 ffc1 	bl	8023604 <vPortExitCritical>

	return xReturn;
 8022682:	69fb      	ldr	r3, [r7, #28]
}
 8022684:	4618      	mov	r0, r3
 8022686:	3720      	adds	r7, #32
 8022688:	46bd      	mov	sp, r7
 802268a:	bd80      	pop	{r7, pc}
 802268c:	20002230 	.word	0x20002230
 8022690:	20002244 	.word	0x20002244

08022694 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8022694:	b480      	push	{r7}
 8022696:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8022698:	4b03      	ldr	r3, [pc, #12]	; (80226a8 <vTaskMissedYield+0x14>)
 802269a:	2201      	movs	r2, #1
 802269c:	601a      	str	r2, [r3, #0]
}
 802269e:	bf00      	nop
 80226a0:	46bd      	mov	sp, r7
 80226a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226a6:	4770      	bx	lr
 80226a8:	20002240 	.word	0x20002240

080226ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80226ac:	b580      	push	{r7, lr}
 80226ae:	b082      	sub	sp, #8
 80226b0:	af00      	add	r7, sp, #0
 80226b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80226b4:	f000 f852 	bl	802275c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80226b8:	4b06      	ldr	r3, [pc, #24]	; (80226d4 <prvIdleTask+0x28>)
 80226ba:	681b      	ldr	r3, [r3, #0]
 80226bc:	2b01      	cmp	r3, #1
 80226be:	d9f9      	bls.n	80226b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80226c0:	4b05      	ldr	r3, [pc, #20]	; (80226d8 <prvIdleTask+0x2c>)
 80226c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80226c6:	601a      	str	r2, [r3, #0]
 80226c8:	f3bf 8f4f 	dsb	sy
 80226cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80226d0:	e7f0      	b.n	80226b4 <prvIdleTask+0x8>
 80226d2:	bf00      	nop
 80226d4:	20001d5c 	.word	0x20001d5c
 80226d8:	e000ed04 	.word	0xe000ed04

080226dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80226dc:	b580      	push	{r7, lr}
 80226de:	b082      	sub	sp, #8
 80226e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80226e2:	2300      	movs	r3, #0
 80226e4:	607b      	str	r3, [r7, #4]
 80226e6:	e00c      	b.n	8022702 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80226e8:	687a      	ldr	r2, [r7, #4]
 80226ea:	4613      	mov	r3, r2
 80226ec:	009b      	lsls	r3, r3, #2
 80226ee:	4413      	add	r3, r2
 80226f0:	009b      	lsls	r3, r3, #2
 80226f2:	4a12      	ldr	r2, [pc, #72]	; (802273c <prvInitialiseTaskLists+0x60>)
 80226f4:	4413      	add	r3, r2
 80226f6:	4618      	mov	r0, r3
 80226f8:	f7fe f8ee 	bl	80208d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80226fc:	687b      	ldr	r3, [r7, #4]
 80226fe:	3301      	adds	r3, #1
 8022700:	607b      	str	r3, [r7, #4]
 8022702:	687b      	ldr	r3, [r7, #4]
 8022704:	2b37      	cmp	r3, #55	; 0x37
 8022706:	d9ef      	bls.n	80226e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8022708:	480d      	ldr	r0, [pc, #52]	; (8022740 <prvInitialiseTaskLists+0x64>)
 802270a:	f7fe f8e5 	bl	80208d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802270e:	480d      	ldr	r0, [pc, #52]	; (8022744 <prvInitialiseTaskLists+0x68>)
 8022710:	f7fe f8e2 	bl	80208d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8022714:	480c      	ldr	r0, [pc, #48]	; (8022748 <prvInitialiseTaskLists+0x6c>)
 8022716:	f7fe f8df 	bl	80208d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802271a:	480c      	ldr	r0, [pc, #48]	; (802274c <prvInitialiseTaskLists+0x70>)
 802271c:	f7fe f8dc 	bl	80208d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8022720:	480b      	ldr	r0, [pc, #44]	; (8022750 <prvInitialiseTaskLists+0x74>)
 8022722:	f7fe f8d9 	bl	80208d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8022726:	4b0b      	ldr	r3, [pc, #44]	; (8022754 <prvInitialiseTaskLists+0x78>)
 8022728:	4a05      	ldr	r2, [pc, #20]	; (8022740 <prvInitialiseTaskLists+0x64>)
 802272a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802272c:	4b0a      	ldr	r3, [pc, #40]	; (8022758 <prvInitialiseTaskLists+0x7c>)
 802272e:	4a05      	ldr	r2, [pc, #20]	; (8022744 <prvInitialiseTaskLists+0x68>)
 8022730:	601a      	str	r2, [r3, #0]
}
 8022732:	bf00      	nop
 8022734:	3708      	adds	r7, #8
 8022736:	46bd      	mov	sp, r7
 8022738:	bd80      	pop	{r7, pc}
 802273a:	bf00      	nop
 802273c:	20001d5c 	.word	0x20001d5c
 8022740:	200021bc 	.word	0x200021bc
 8022744:	200021d0 	.word	0x200021d0
 8022748:	200021ec 	.word	0x200021ec
 802274c:	20002200 	.word	0x20002200
 8022750:	20002218 	.word	0x20002218
 8022754:	200021e4 	.word	0x200021e4
 8022758:	200021e8 	.word	0x200021e8

0802275c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802275c:	b580      	push	{r7, lr}
 802275e:	b082      	sub	sp, #8
 8022760:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022762:	e019      	b.n	8022798 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8022764:	f000 ff1e 	bl	80235a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022768:	4b10      	ldr	r3, [pc, #64]	; (80227ac <prvCheckTasksWaitingTermination+0x50>)
 802276a:	68db      	ldr	r3, [r3, #12]
 802276c:	68db      	ldr	r3, [r3, #12]
 802276e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022770:	687b      	ldr	r3, [r7, #4]
 8022772:	3304      	adds	r3, #4
 8022774:	4618      	mov	r0, r3
 8022776:	f7fe f939 	bl	80209ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 802277a:	4b0d      	ldr	r3, [pc, #52]	; (80227b0 <prvCheckTasksWaitingTermination+0x54>)
 802277c:	681b      	ldr	r3, [r3, #0]
 802277e:	3b01      	subs	r3, #1
 8022780:	4a0b      	ldr	r2, [pc, #44]	; (80227b0 <prvCheckTasksWaitingTermination+0x54>)
 8022782:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8022784:	4b0b      	ldr	r3, [pc, #44]	; (80227b4 <prvCheckTasksWaitingTermination+0x58>)
 8022786:	681b      	ldr	r3, [r3, #0]
 8022788:	3b01      	subs	r3, #1
 802278a:	4a0a      	ldr	r2, [pc, #40]	; (80227b4 <prvCheckTasksWaitingTermination+0x58>)
 802278c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802278e:	f000 ff39 	bl	8023604 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8022792:	6878      	ldr	r0, [r7, #4]
 8022794:	f000 f848 	bl	8022828 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022798:	4b06      	ldr	r3, [pc, #24]	; (80227b4 <prvCheckTasksWaitingTermination+0x58>)
 802279a:	681b      	ldr	r3, [r3, #0]
 802279c:	2b00      	cmp	r3, #0
 802279e:	d1e1      	bne.n	8022764 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80227a0:	bf00      	nop
 80227a2:	bf00      	nop
 80227a4:	3708      	adds	r7, #8
 80227a6:	46bd      	mov	sp, r7
 80227a8:	bd80      	pop	{r7, pc}
 80227aa:	bf00      	nop
 80227ac:	20002200 	.word	0x20002200
 80227b0:	2000222c 	.word	0x2000222c
 80227b4:	20002214 	.word	0x20002214

080227b8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80227b8:	b480      	push	{r7}
 80227ba:	b085      	sub	sp, #20
 80227bc:	af00      	add	r7, sp, #0
 80227be:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80227c0:	2300      	movs	r3, #0
 80227c2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80227c4:	e005      	b.n	80227d2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	3301      	adds	r3, #1
 80227ca:	607b      	str	r3, [r7, #4]
			ulCount++;
 80227cc:	68fb      	ldr	r3, [r7, #12]
 80227ce:	3301      	adds	r3, #1
 80227d0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80227d2:	687b      	ldr	r3, [r7, #4]
 80227d4:	781b      	ldrb	r3, [r3, #0]
 80227d6:	2ba5      	cmp	r3, #165	; 0xa5
 80227d8:	d0f5      	beq.n	80227c6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80227da:	68fb      	ldr	r3, [r7, #12]
 80227dc:	089b      	lsrs	r3, r3, #2
 80227de:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80227e0:	68fb      	ldr	r3, [r7, #12]
 80227e2:	b29b      	uxth	r3, r3
	}
 80227e4:	4618      	mov	r0, r3
 80227e6:	3714      	adds	r7, #20
 80227e8:	46bd      	mov	sp, r7
 80227ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227ee:	4770      	bx	lr

080227f0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80227f0:	b580      	push	{r7, lr}
 80227f2:	b086      	sub	sp, #24
 80227f4:	af00      	add	r7, sp, #0
 80227f6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80227f8:	687b      	ldr	r3, [r7, #4]
 80227fa:	2b00      	cmp	r3, #0
 80227fc:	d102      	bne.n	8022804 <uxTaskGetStackHighWaterMark+0x14>
 80227fe:	4b09      	ldr	r3, [pc, #36]	; (8022824 <uxTaskGetStackHighWaterMark+0x34>)
 8022800:	681b      	ldr	r3, [r3, #0]
 8022802:	e000      	b.n	8022806 <uxTaskGetStackHighWaterMark+0x16>
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8022808:	697b      	ldr	r3, [r7, #20]
 802280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802280c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 802280e:	6938      	ldr	r0, [r7, #16]
 8022810:	f7ff ffd2 	bl	80227b8 <prvTaskCheckFreeStackSpace>
 8022814:	4603      	mov	r3, r0
 8022816:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8022818:	68fb      	ldr	r3, [r7, #12]
	}
 802281a:	4618      	mov	r0, r3
 802281c:	3718      	adds	r7, #24
 802281e:	46bd      	mov	sp, r7
 8022820:	bd80      	pop	{r7, pc}
 8022822:	bf00      	nop
 8022824:	20001d58 	.word	0x20001d58

08022828 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8022828:	b580      	push	{r7, lr}
 802282a:	b084      	sub	sp, #16
 802282c:	af00      	add	r7, sp, #0
 802282e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	3358      	adds	r3, #88	; 0x58
 8022834:	4618      	mov	r0, r3
 8022836:	f00b fa5d 	bl	802dcf4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802283a:	687b      	ldr	r3, [r7, #4]
 802283c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022840:	2b00      	cmp	r3, #0
 8022842:	d108      	bne.n	8022856 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022848:	4618      	mov	r0, r3
 802284a:	f001 f813 	bl	8023874 <vPortFree>
				vPortFree( pxTCB );
 802284e:	6878      	ldr	r0, [r7, #4]
 8022850:	f001 f810 	bl	8023874 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8022854:	e018      	b.n	8022888 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8022856:	687b      	ldr	r3, [r7, #4]
 8022858:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802285c:	2b01      	cmp	r3, #1
 802285e:	d103      	bne.n	8022868 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022860:	6878      	ldr	r0, [r7, #4]
 8022862:	f001 f807 	bl	8023874 <vPortFree>
	}
 8022866:	e00f      	b.n	8022888 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022868:	687b      	ldr	r3, [r7, #4]
 802286a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802286e:	2b02      	cmp	r3, #2
 8022870:	d00a      	beq.n	8022888 <prvDeleteTCB+0x60>
	__asm volatile
 8022872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022876:	f383 8811 	msr	BASEPRI, r3
 802287a:	f3bf 8f6f 	isb	sy
 802287e:	f3bf 8f4f 	dsb	sy
 8022882:	60fb      	str	r3, [r7, #12]
}
 8022884:	bf00      	nop
 8022886:	e7fe      	b.n	8022886 <prvDeleteTCB+0x5e>
	}
 8022888:	bf00      	nop
 802288a:	3710      	adds	r7, #16
 802288c:	46bd      	mov	sp, r7
 802288e:	bd80      	pop	{r7, pc}

08022890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8022890:	b480      	push	{r7}
 8022892:	b083      	sub	sp, #12
 8022894:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022896:	4b0c      	ldr	r3, [pc, #48]	; (80228c8 <prvResetNextTaskUnblockTime+0x38>)
 8022898:	681b      	ldr	r3, [r3, #0]
 802289a:	681b      	ldr	r3, [r3, #0]
 802289c:	2b00      	cmp	r3, #0
 802289e:	d104      	bne.n	80228aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80228a0:	4b0a      	ldr	r3, [pc, #40]	; (80228cc <prvResetNextTaskUnblockTime+0x3c>)
 80228a2:	f04f 32ff 	mov.w	r2, #4294967295
 80228a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80228a8:	e008      	b.n	80228bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80228aa:	4b07      	ldr	r3, [pc, #28]	; (80228c8 <prvResetNextTaskUnblockTime+0x38>)
 80228ac:	681b      	ldr	r3, [r3, #0]
 80228ae:	68db      	ldr	r3, [r3, #12]
 80228b0:	68db      	ldr	r3, [r3, #12]
 80228b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80228b4:	687b      	ldr	r3, [r7, #4]
 80228b6:	685b      	ldr	r3, [r3, #4]
 80228b8:	4a04      	ldr	r2, [pc, #16]	; (80228cc <prvResetNextTaskUnblockTime+0x3c>)
 80228ba:	6013      	str	r3, [r2, #0]
}
 80228bc:	bf00      	nop
 80228be:	370c      	adds	r7, #12
 80228c0:	46bd      	mov	sp, r7
 80228c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228c6:	4770      	bx	lr
 80228c8:	200021e4 	.word	0x200021e4
 80228cc:	2000224c 	.word	0x2000224c

080228d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80228d0:	b480      	push	{r7}
 80228d2:	b083      	sub	sp, #12
 80228d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80228d6:	4b05      	ldr	r3, [pc, #20]	; (80228ec <xTaskGetCurrentTaskHandle+0x1c>)
 80228d8:	681b      	ldr	r3, [r3, #0]
 80228da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80228dc:	687b      	ldr	r3, [r7, #4]
	}
 80228de:	4618      	mov	r0, r3
 80228e0:	370c      	adds	r7, #12
 80228e2:	46bd      	mov	sp, r7
 80228e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e8:	4770      	bx	lr
 80228ea:	bf00      	nop
 80228ec:	20001d58 	.word	0x20001d58

080228f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80228f0:	b480      	push	{r7}
 80228f2:	b083      	sub	sp, #12
 80228f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80228f6:	4b0b      	ldr	r3, [pc, #44]	; (8022924 <xTaskGetSchedulerState+0x34>)
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	2b00      	cmp	r3, #0
 80228fc:	d102      	bne.n	8022904 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80228fe:	2301      	movs	r3, #1
 8022900:	607b      	str	r3, [r7, #4]
 8022902:	e008      	b.n	8022916 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022904:	4b08      	ldr	r3, [pc, #32]	; (8022928 <xTaskGetSchedulerState+0x38>)
 8022906:	681b      	ldr	r3, [r3, #0]
 8022908:	2b00      	cmp	r3, #0
 802290a:	d102      	bne.n	8022912 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802290c:	2302      	movs	r3, #2
 802290e:	607b      	str	r3, [r7, #4]
 8022910:	e001      	b.n	8022916 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8022912:	2300      	movs	r3, #0
 8022914:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8022916:	687b      	ldr	r3, [r7, #4]
	}
 8022918:	4618      	mov	r0, r3
 802291a:	370c      	adds	r7, #12
 802291c:	46bd      	mov	sp, r7
 802291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022922:	4770      	bx	lr
 8022924:	20002238 	.word	0x20002238
 8022928:	20002254 	.word	0x20002254

0802292c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 802292c:	b580      	push	{r7, lr}
 802292e:	b084      	sub	sp, #16
 8022930:	af00      	add	r7, sp, #0
 8022932:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8022934:	687b      	ldr	r3, [r7, #4]
 8022936:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8022938:	2300      	movs	r3, #0
 802293a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 802293c:	687b      	ldr	r3, [r7, #4]
 802293e:	2b00      	cmp	r3, #0
 8022940:	d051      	beq.n	80229e6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8022942:	68bb      	ldr	r3, [r7, #8]
 8022944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022946:	4b2a      	ldr	r3, [pc, #168]	; (80229f0 <xTaskPriorityInherit+0xc4>)
 8022948:	681b      	ldr	r3, [r3, #0]
 802294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802294c:	429a      	cmp	r2, r3
 802294e:	d241      	bcs.n	80229d4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022950:	68bb      	ldr	r3, [r7, #8]
 8022952:	699b      	ldr	r3, [r3, #24]
 8022954:	2b00      	cmp	r3, #0
 8022956:	db06      	blt.n	8022966 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022958:	4b25      	ldr	r3, [pc, #148]	; (80229f0 <xTaskPriorityInherit+0xc4>)
 802295a:	681b      	ldr	r3, [r3, #0]
 802295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802295e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022962:	68bb      	ldr	r3, [r7, #8]
 8022964:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8022966:	68bb      	ldr	r3, [r7, #8]
 8022968:	6959      	ldr	r1, [r3, #20]
 802296a:	68bb      	ldr	r3, [r7, #8]
 802296c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802296e:	4613      	mov	r3, r2
 8022970:	009b      	lsls	r3, r3, #2
 8022972:	4413      	add	r3, r2
 8022974:	009b      	lsls	r3, r3, #2
 8022976:	4a1f      	ldr	r2, [pc, #124]	; (80229f4 <xTaskPriorityInherit+0xc8>)
 8022978:	4413      	add	r3, r2
 802297a:	4299      	cmp	r1, r3
 802297c:	d122      	bne.n	80229c4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802297e:	68bb      	ldr	r3, [r7, #8]
 8022980:	3304      	adds	r3, #4
 8022982:	4618      	mov	r0, r3
 8022984:	f7fe f832 	bl	80209ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022988:	4b19      	ldr	r3, [pc, #100]	; (80229f0 <xTaskPriorityInherit+0xc4>)
 802298a:	681b      	ldr	r3, [r3, #0]
 802298c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802298e:	68bb      	ldr	r3, [r7, #8]
 8022990:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8022992:	68bb      	ldr	r3, [r7, #8]
 8022994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022996:	4b18      	ldr	r3, [pc, #96]	; (80229f8 <xTaskPriorityInherit+0xcc>)
 8022998:	681b      	ldr	r3, [r3, #0]
 802299a:	429a      	cmp	r2, r3
 802299c:	d903      	bls.n	80229a6 <xTaskPriorityInherit+0x7a>
 802299e:	68bb      	ldr	r3, [r7, #8]
 80229a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229a2:	4a15      	ldr	r2, [pc, #84]	; (80229f8 <xTaskPriorityInherit+0xcc>)
 80229a4:	6013      	str	r3, [r2, #0]
 80229a6:	68bb      	ldr	r3, [r7, #8]
 80229a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229aa:	4613      	mov	r3, r2
 80229ac:	009b      	lsls	r3, r3, #2
 80229ae:	4413      	add	r3, r2
 80229b0:	009b      	lsls	r3, r3, #2
 80229b2:	4a10      	ldr	r2, [pc, #64]	; (80229f4 <xTaskPriorityInherit+0xc8>)
 80229b4:	441a      	add	r2, r3
 80229b6:	68bb      	ldr	r3, [r7, #8]
 80229b8:	3304      	adds	r3, #4
 80229ba:	4619      	mov	r1, r3
 80229bc:	4610      	mov	r0, r2
 80229be:	f7fd ffb8 	bl	8020932 <vListInsertEnd>
 80229c2:	e004      	b.n	80229ce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80229c4:	4b0a      	ldr	r3, [pc, #40]	; (80229f0 <xTaskPriorityInherit+0xc4>)
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80229ca:	68bb      	ldr	r3, [r7, #8]
 80229cc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80229ce:	2301      	movs	r3, #1
 80229d0:	60fb      	str	r3, [r7, #12]
 80229d2:	e008      	b.n	80229e6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80229d4:	68bb      	ldr	r3, [r7, #8]
 80229d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80229d8:	4b05      	ldr	r3, [pc, #20]	; (80229f0 <xTaskPriorityInherit+0xc4>)
 80229da:	681b      	ldr	r3, [r3, #0]
 80229dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80229de:	429a      	cmp	r2, r3
 80229e0:	d201      	bcs.n	80229e6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80229e2:	2301      	movs	r3, #1
 80229e4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80229e6:	68fb      	ldr	r3, [r7, #12]
	}
 80229e8:	4618      	mov	r0, r3
 80229ea:	3710      	adds	r7, #16
 80229ec:	46bd      	mov	sp, r7
 80229ee:	bd80      	pop	{r7, pc}
 80229f0:	20001d58 	.word	0x20001d58
 80229f4:	20001d5c 	.word	0x20001d5c
 80229f8:	20002234 	.word	0x20002234

080229fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80229fc:	b580      	push	{r7, lr}
 80229fe:	b086      	sub	sp, #24
 8022a00:	af00      	add	r7, sp, #0
 8022a02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8022a04:	687b      	ldr	r3, [r7, #4]
 8022a06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8022a08:	2300      	movs	r3, #0
 8022a0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	2b00      	cmp	r3, #0
 8022a10:	d056      	beq.n	8022ac0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8022a12:	4b2e      	ldr	r3, [pc, #184]	; (8022acc <xTaskPriorityDisinherit+0xd0>)
 8022a14:	681b      	ldr	r3, [r3, #0]
 8022a16:	693a      	ldr	r2, [r7, #16]
 8022a18:	429a      	cmp	r2, r3
 8022a1a:	d00a      	beq.n	8022a32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8022a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a20:	f383 8811 	msr	BASEPRI, r3
 8022a24:	f3bf 8f6f 	isb	sy
 8022a28:	f3bf 8f4f 	dsb	sy
 8022a2c:	60fb      	str	r3, [r7, #12]
}
 8022a2e:	bf00      	nop
 8022a30:	e7fe      	b.n	8022a30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8022a32:	693b      	ldr	r3, [r7, #16]
 8022a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d10a      	bne.n	8022a50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8022a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a3e:	f383 8811 	msr	BASEPRI, r3
 8022a42:	f3bf 8f6f 	isb	sy
 8022a46:	f3bf 8f4f 	dsb	sy
 8022a4a:	60bb      	str	r3, [r7, #8]
}
 8022a4c:	bf00      	nop
 8022a4e:	e7fe      	b.n	8022a4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8022a50:	693b      	ldr	r3, [r7, #16]
 8022a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a54:	1e5a      	subs	r2, r3, #1
 8022a56:	693b      	ldr	r3, [r7, #16]
 8022a58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8022a5a:	693b      	ldr	r3, [r7, #16]
 8022a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a5e:	693b      	ldr	r3, [r7, #16]
 8022a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022a62:	429a      	cmp	r2, r3
 8022a64:	d02c      	beq.n	8022ac0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8022a66:	693b      	ldr	r3, [r7, #16]
 8022a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	d128      	bne.n	8022ac0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022a6e:	693b      	ldr	r3, [r7, #16]
 8022a70:	3304      	adds	r3, #4
 8022a72:	4618      	mov	r0, r3
 8022a74:	f7fd ffba 	bl	80209ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8022a78:	693b      	ldr	r3, [r7, #16]
 8022a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8022a7c:	693b      	ldr	r3, [r7, #16]
 8022a7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022a80:	693b      	ldr	r3, [r7, #16]
 8022a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022a88:	693b      	ldr	r3, [r7, #16]
 8022a8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8022a8c:	693b      	ldr	r3, [r7, #16]
 8022a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a90:	4b0f      	ldr	r3, [pc, #60]	; (8022ad0 <xTaskPriorityDisinherit+0xd4>)
 8022a92:	681b      	ldr	r3, [r3, #0]
 8022a94:	429a      	cmp	r2, r3
 8022a96:	d903      	bls.n	8022aa0 <xTaskPriorityDisinherit+0xa4>
 8022a98:	693b      	ldr	r3, [r7, #16]
 8022a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a9c:	4a0c      	ldr	r2, [pc, #48]	; (8022ad0 <xTaskPriorityDisinherit+0xd4>)
 8022a9e:	6013      	str	r3, [r2, #0]
 8022aa0:	693b      	ldr	r3, [r7, #16]
 8022aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022aa4:	4613      	mov	r3, r2
 8022aa6:	009b      	lsls	r3, r3, #2
 8022aa8:	4413      	add	r3, r2
 8022aaa:	009b      	lsls	r3, r3, #2
 8022aac:	4a09      	ldr	r2, [pc, #36]	; (8022ad4 <xTaskPriorityDisinherit+0xd8>)
 8022aae:	441a      	add	r2, r3
 8022ab0:	693b      	ldr	r3, [r7, #16]
 8022ab2:	3304      	adds	r3, #4
 8022ab4:	4619      	mov	r1, r3
 8022ab6:	4610      	mov	r0, r2
 8022ab8:	f7fd ff3b 	bl	8020932 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8022abc:	2301      	movs	r3, #1
 8022abe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022ac0:	697b      	ldr	r3, [r7, #20]
	}
 8022ac2:	4618      	mov	r0, r3
 8022ac4:	3718      	adds	r7, #24
 8022ac6:	46bd      	mov	sp, r7
 8022ac8:	bd80      	pop	{r7, pc}
 8022aca:	bf00      	nop
 8022acc:	20001d58 	.word	0x20001d58
 8022ad0:	20002234 	.word	0x20002234
 8022ad4:	20001d5c 	.word	0x20001d5c

08022ad8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8022ad8:	b580      	push	{r7, lr}
 8022ada:	b088      	sub	sp, #32
 8022adc:	af00      	add	r7, sp, #0
 8022ade:	6078      	str	r0, [r7, #4]
 8022ae0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8022ae2:	687b      	ldr	r3, [r7, #4]
 8022ae4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8022ae6:	2301      	movs	r3, #1
 8022ae8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8022aea:	687b      	ldr	r3, [r7, #4]
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	d06a      	beq.n	8022bc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8022af0:	69bb      	ldr	r3, [r7, #24]
 8022af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	d10a      	bne.n	8022b0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8022af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022afc:	f383 8811 	msr	BASEPRI, r3
 8022b00:	f3bf 8f6f 	isb	sy
 8022b04:	f3bf 8f4f 	dsb	sy
 8022b08:	60fb      	str	r3, [r7, #12]
}
 8022b0a:	bf00      	nop
 8022b0c:	e7fe      	b.n	8022b0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8022b0e:	69bb      	ldr	r3, [r7, #24]
 8022b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022b12:	683a      	ldr	r2, [r7, #0]
 8022b14:	429a      	cmp	r2, r3
 8022b16:	d902      	bls.n	8022b1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8022b18:	683b      	ldr	r3, [r7, #0]
 8022b1a:	61fb      	str	r3, [r7, #28]
 8022b1c:	e002      	b.n	8022b24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8022b1e:	69bb      	ldr	r3, [r7, #24]
 8022b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022b22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8022b24:	69bb      	ldr	r3, [r7, #24]
 8022b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b28:	69fa      	ldr	r2, [r7, #28]
 8022b2a:	429a      	cmp	r2, r3
 8022b2c:	d04b      	beq.n	8022bc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8022b2e:	69bb      	ldr	r3, [r7, #24]
 8022b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022b32:	697a      	ldr	r2, [r7, #20]
 8022b34:	429a      	cmp	r2, r3
 8022b36:	d146      	bne.n	8022bc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8022b38:	4b25      	ldr	r3, [pc, #148]	; (8022bd0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8022b3a:	681b      	ldr	r3, [r3, #0]
 8022b3c:	69ba      	ldr	r2, [r7, #24]
 8022b3e:	429a      	cmp	r2, r3
 8022b40:	d10a      	bne.n	8022b58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8022b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022b46:	f383 8811 	msr	BASEPRI, r3
 8022b4a:	f3bf 8f6f 	isb	sy
 8022b4e:	f3bf 8f4f 	dsb	sy
 8022b52:	60bb      	str	r3, [r7, #8]
}
 8022b54:	bf00      	nop
 8022b56:	e7fe      	b.n	8022b56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8022b58:	69bb      	ldr	r3, [r7, #24]
 8022b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8022b5e:	69bb      	ldr	r3, [r7, #24]
 8022b60:	69fa      	ldr	r2, [r7, #28]
 8022b62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022b64:	69bb      	ldr	r3, [r7, #24]
 8022b66:	699b      	ldr	r3, [r3, #24]
 8022b68:	2b00      	cmp	r3, #0
 8022b6a:	db04      	blt.n	8022b76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022b6c:	69fb      	ldr	r3, [r7, #28]
 8022b6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022b72:	69bb      	ldr	r3, [r7, #24]
 8022b74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8022b76:	69bb      	ldr	r3, [r7, #24]
 8022b78:	6959      	ldr	r1, [r3, #20]
 8022b7a:	693a      	ldr	r2, [r7, #16]
 8022b7c:	4613      	mov	r3, r2
 8022b7e:	009b      	lsls	r3, r3, #2
 8022b80:	4413      	add	r3, r2
 8022b82:	009b      	lsls	r3, r3, #2
 8022b84:	4a13      	ldr	r2, [pc, #76]	; (8022bd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022b86:	4413      	add	r3, r2
 8022b88:	4299      	cmp	r1, r3
 8022b8a:	d11c      	bne.n	8022bc6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022b8c:	69bb      	ldr	r3, [r7, #24]
 8022b8e:	3304      	adds	r3, #4
 8022b90:	4618      	mov	r0, r3
 8022b92:	f7fd ff2b 	bl	80209ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8022b96:	69bb      	ldr	r3, [r7, #24]
 8022b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022b9a:	4b0f      	ldr	r3, [pc, #60]	; (8022bd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022b9c:	681b      	ldr	r3, [r3, #0]
 8022b9e:	429a      	cmp	r2, r3
 8022ba0:	d903      	bls.n	8022baa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8022ba2:	69bb      	ldr	r3, [r7, #24]
 8022ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ba6:	4a0c      	ldr	r2, [pc, #48]	; (8022bd8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022ba8:	6013      	str	r3, [r2, #0]
 8022baa:	69bb      	ldr	r3, [r7, #24]
 8022bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022bae:	4613      	mov	r3, r2
 8022bb0:	009b      	lsls	r3, r3, #2
 8022bb2:	4413      	add	r3, r2
 8022bb4:	009b      	lsls	r3, r3, #2
 8022bb6:	4a07      	ldr	r2, [pc, #28]	; (8022bd4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022bb8:	441a      	add	r2, r3
 8022bba:	69bb      	ldr	r3, [r7, #24]
 8022bbc:	3304      	adds	r3, #4
 8022bbe:	4619      	mov	r1, r3
 8022bc0:	4610      	mov	r0, r2
 8022bc2:	f7fd feb6 	bl	8020932 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022bc6:	bf00      	nop
 8022bc8:	3720      	adds	r7, #32
 8022bca:	46bd      	mov	sp, r7
 8022bcc:	bd80      	pop	{r7, pc}
 8022bce:	bf00      	nop
 8022bd0:	20001d58 	.word	0x20001d58
 8022bd4:	20001d5c 	.word	0x20001d5c
 8022bd8:	20002234 	.word	0x20002234

08022bdc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8022bdc:	b480      	push	{r7}
 8022bde:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8022be0:	4b07      	ldr	r3, [pc, #28]	; (8022c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8022be2:	681b      	ldr	r3, [r3, #0]
 8022be4:	2b00      	cmp	r3, #0
 8022be6:	d004      	beq.n	8022bf2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8022be8:	4b05      	ldr	r3, [pc, #20]	; (8022c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8022bea:	681b      	ldr	r3, [r3, #0]
 8022bec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8022bee:	3201      	adds	r2, #1
 8022bf0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8022bf2:	4b03      	ldr	r3, [pc, #12]	; (8022c00 <pvTaskIncrementMutexHeldCount+0x24>)
 8022bf4:	681b      	ldr	r3, [r3, #0]
	}
 8022bf6:	4618      	mov	r0, r3
 8022bf8:	46bd      	mov	sp, r7
 8022bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bfe:	4770      	bx	lr
 8022c00:	20001d58 	.word	0x20001d58

08022c04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022c04:	b580      	push	{r7, lr}
 8022c06:	b084      	sub	sp, #16
 8022c08:	af00      	add	r7, sp, #0
 8022c0a:	6078      	str	r0, [r7, #4]
 8022c0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8022c0e:	4b21      	ldr	r3, [pc, #132]	; (8022c94 <prvAddCurrentTaskToDelayedList+0x90>)
 8022c10:	681b      	ldr	r3, [r3, #0]
 8022c12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022c14:	4b20      	ldr	r3, [pc, #128]	; (8022c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c16:	681b      	ldr	r3, [r3, #0]
 8022c18:	3304      	adds	r3, #4
 8022c1a:	4618      	mov	r0, r3
 8022c1c:	f7fd fee6 	bl	80209ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022c26:	d10a      	bne.n	8022c3e <prvAddCurrentTaskToDelayedList+0x3a>
 8022c28:	683b      	ldr	r3, [r7, #0]
 8022c2a:	2b00      	cmp	r3, #0
 8022c2c:	d007      	beq.n	8022c3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022c2e:	4b1a      	ldr	r3, [pc, #104]	; (8022c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	3304      	adds	r3, #4
 8022c34:	4619      	mov	r1, r3
 8022c36:	4819      	ldr	r0, [pc, #100]	; (8022c9c <prvAddCurrentTaskToDelayedList+0x98>)
 8022c38:	f7fd fe7b 	bl	8020932 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8022c3c:	e026      	b.n	8022c8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8022c3e:	68fa      	ldr	r2, [r7, #12]
 8022c40:	687b      	ldr	r3, [r7, #4]
 8022c42:	4413      	add	r3, r2
 8022c44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022c46:	4b14      	ldr	r3, [pc, #80]	; (8022c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c48:	681b      	ldr	r3, [r3, #0]
 8022c4a:	68ba      	ldr	r2, [r7, #8]
 8022c4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8022c4e:	68ba      	ldr	r2, [r7, #8]
 8022c50:	68fb      	ldr	r3, [r7, #12]
 8022c52:	429a      	cmp	r2, r3
 8022c54:	d209      	bcs.n	8022c6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022c56:	4b12      	ldr	r3, [pc, #72]	; (8022ca0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022c58:	681a      	ldr	r2, [r3, #0]
 8022c5a:	4b0f      	ldr	r3, [pc, #60]	; (8022c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	3304      	adds	r3, #4
 8022c60:	4619      	mov	r1, r3
 8022c62:	4610      	mov	r0, r2
 8022c64:	f7fd fe89 	bl	802097a <vListInsert>
}
 8022c68:	e010      	b.n	8022c8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022c6a:	4b0e      	ldr	r3, [pc, #56]	; (8022ca4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8022c6c:	681a      	ldr	r2, [r3, #0]
 8022c6e:	4b0a      	ldr	r3, [pc, #40]	; (8022c98 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c70:	681b      	ldr	r3, [r3, #0]
 8022c72:	3304      	adds	r3, #4
 8022c74:	4619      	mov	r1, r3
 8022c76:	4610      	mov	r0, r2
 8022c78:	f7fd fe7f 	bl	802097a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022c7c:	4b0a      	ldr	r3, [pc, #40]	; (8022ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022c7e:	681b      	ldr	r3, [r3, #0]
 8022c80:	68ba      	ldr	r2, [r7, #8]
 8022c82:	429a      	cmp	r2, r3
 8022c84:	d202      	bcs.n	8022c8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8022c86:	4a08      	ldr	r2, [pc, #32]	; (8022ca8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022c88:	68bb      	ldr	r3, [r7, #8]
 8022c8a:	6013      	str	r3, [r2, #0]
}
 8022c8c:	bf00      	nop
 8022c8e:	3710      	adds	r7, #16
 8022c90:	46bd      	mov	sp, r7
 8022c92:	bd80      	pop	{r7, pc}
 8022c94:	20002230 	.word	0x20002230
 8022c98:	20001d58 	.word	0x20001d58
 8022c9c:	20002218 	.word	0x20002218
 8022ca0:	200021e8 	.word	0x200021e8
 8022ca4:	200021e4 	.word	0x200021e4
 8022ca8:	2000224c 	.word	0x2000224c

08022cac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8022cac:	b580      	push	{r7, lr}
 8022cae:	b08a      	sub	sp, #40	; 0x28
 8022cb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022cb2:	2300      	movs	r3, #0
 8022cb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8022cb6:	f000 fb07 	bl	80232c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8022cba:	4b1c      	ldr	r3, [pc, #112]	; (8022d2c <xTimerCreateTimerTask+0x80>)
 8022cbc:	681b      	ldr	r3, [r3, #0]
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d021      	beq.n	8022d06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8022cc2:	2300      	movs	r3, #0
 8022cc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8022cc6:	2300      	movs	r3, #0
 8022cc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8022cca:	1d3a      	adds	r2, r7, #4
 8022ccc:	f107 0108 	add.w	r1, r7, #8
 8022cd0:	f107 030c 	add.w	r3, r7, #12
 8022cd4:	4618      	mov	r0, r3
 8022cd6:	f7fd fde5 	bl	80208a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8022cda:	6879      	ldr	r1, [r7, #4]
 8022cdc:	68bb      	ldr	r3, [r7, #8]
 8022cde:	68fa      	ldr	r2, [r7, #12]
 8022ce0:	9202      	str	r2, [sp, #8]
 8022ce2:	9301      	str	r3, [sp, #4]
 8022ce4:	2302      	movs	r3, #2
 8022ce6:	9300      	str	r3, [sp, #0]
 8022ce8:	2300      	movs	r3, #0
 8022cea:	460a      	mov	r2, r1
 8022cec:	4910      	ldr	r1, [pc, #64]	; (8022d30 <xTimerCreateTimerTask+0x84>)
 8022cee:	4811      	ldr	r0, [pc, #68]	; (8022d34 <xTimerCreateTimerTask+0x88>)
 8022cf0:	f7fe ff44 	bl	8021b7c <xTaskCreateStatic>
 8022cf4:	4603      	mov	r3, r0
 8022cf6:	4a10      	ldr	r2, [pc, #64]	; (8022d38 <xTimerCreateTimerTask+0x8c>)
 8022cf8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8022cfa:	4b0f      	ldr	r3, [pc, #60]	; (8022d38 <xTimerCreateTimerTask+0x8c>)
 8022cfc:	681b      	ldr	r3, [r3, #0]
 8022cfe:	2b00      	cmp	r3, #0
 8022d00:	d001      	beq.n	8022d06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8022d02:	2301      	movs	r3, #1
 8022d04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8022d06:	697b      	ldr	r3, [r7, #20]
 8022d08:	2b00      	cmp	r3, #0
 8022d0a:	d10a      	bne.n	8022d22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8022d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d10:	f383 8811 	msr	BASEPRI, r3
 8022d14:	f3bf 8f6f 	isb	sy
 8022d18:	f3bf 8f4f 	dsb	sy
 8022d1c:	613b      	str	r3, [r7, #16]
}
 8022d1e:	bf00      	nop
 8022d20:	e7fe      	b.n	8022d20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8022d22:	697b      	ldr	r3, [r7, #20]
}
 8022d24:	4618      	mov	r0, r3
 8022d26:	3718      	adds	r7, #24
 8022d28:	46bd      	mov	sp, r7
 8022d2a:	bd80      	pop	{r7, pc}
 8022d2c:	20002290 	.word	0x20002290
 8022d30:	08033810 	.word	0x08033810
 8022d34:	08022e71 	.word	0x08022e71
 8022d38:	20002294 	.word	0x20002294

08022d3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8022d3c:	b580      	push	{r7, lr}
 8022d3e:	b08a      	sub	sp, #40	; 0x28
 8022d40:	af00      	add	r7, sp, #0
 8022d42:	60f8      	str	r0, [r7, #12]
 8022d44:	60b9      	str	r1, [r7, #8]
 8022d46:	607a      	str	r2, [r7, #4]
 8022d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8022d4a:	2300      	movs	r3, #0
 8022d4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	2b00      	cmp	r3, #0
 8022d52:	d10a      	bne.n	8022d6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8022d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d58:	f383 8811 	msr	BASEPRI, r3
 8022d5c:	f3bf 8f6f 	isb	sy
 8022d60:	f3bf 8f4f 	dsb	sy
 8022d64:	623b      	str	r3, [r7, #32]
}
 8022d66:	bf00      	nop
 8022d68:	e7fe      	b.n	8022d68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022d6a:	4b1a      	ldr	r3, [pc, #104]	; (8022dd4 <xTimerGenericCommand+0x98>)
 8022d6c:	681b      	ldr	r3, [r3, #0]
 8022d6e:	2b00      	cmp	r3, #0
 8022d70:	d02a      	beq.n	8022dc8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022d72:	68bb      	ldr	r3, [r7, #8]
 8022d74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8022d7a:	68fb      	ldr	r3, [r7, #12]
 8022d7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8022d7e:	68bb      	ldr	r3, [r7, #8]
 8022d80:	2b05      	cmp	r3, #5
 8022d82:	dc18      	bgt.n	8022db6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022d84:	f7ff fdb4 	bl	80228f0 <xTaskGetSchedulerState>
 8022d88:	4603      	mov	r3, r0
 8022d8a:	2b02      	cmp	r3, #2
 8022d8c:	d109      	bne.n	8022da2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8022d8e:	4b11      	ldr	r3, [pc, #68]	; (8022dd4 <xTimerGenericCommand+0x98>)
 8022d90:	6818      	ldr	r0, [r3, #0]
 8022d92:	f107 0110 	add.w	r1, r7, #16
 8022d96:	2300      	movs	r3, #0
 8022d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022d9a:	f7fe f845 	bl	8020e28 <xQueueGenericSend>
 8022d9e:	6278      	str	r0, [r7, #36]	; 0x24
 8022da0:	e012      	b.n	8022dc8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022da2:	4b0c      	ldr	r3, [pc, #48]	; (8022dd4 <xTimerGenericCommand+0x98>)
 8022da4:	6818      	ldr	r0, [r3, #0]
 8022da6:	f107 0110 	add.w	r1, r7, #16
 8022daa:	2300      	movs	r3, #0
 8022dac:	2200      	movs	r2, #0
 8022dae:	f7fe f83b 	bl	8020e28 <xQueueGenericSend>
 8022db2:	6278      	str	r0, [r7, #36]	; 0x24
 8022db4:	e008      	b.n	8022dc8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022db6:	4b07      	ldr	r3, [pc, #28]	; (8022dd4 <xTimerGenericCommand+0x98>)
 8022db8:	6818      	ldr	r0, [r3, #0]
 8022dba:	f107 0110 	add.w	r1, r7, #16
 8022dbe:	2300      	movs	r3, #0
 8022dc0:	683a      	ldr	r2, [r7, #0]
 8022dc2:	f7fe f92f 	bl	8021024 <xQueueGenericSendFromISR>
 8022dc6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022dca:	4618      	mov	r0, r3
 8022dcc:	3728      	adds	r7, #40	; 0x28
 8022dce:	46bd      	mov	sp, r7
 8022dd0:	bd80      	pop	{r7, pc}
 8022dd2:	bf00      	nop
 8022dd4:	20002290 	.word	0x20002290

08022dd8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8022dd8:	b580      	push	{r7, lr}
 8022dda:	b088      	sub	sp, #32
 8022ddc:	af02      	add	r7, sp, #8
 8022dde:	6078      	str	r0, [r7, #4]
 8022de0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022de2:	4b22      	ldr	r3, [pc, #136]	; (8022e6c <prvProcessExpiredTimer+0x94>)
 8022de4:	681b      	ldr	r3, [r3, #0]
 8022de6:	68db      	ldr	r3, [r3, #12]
 8022de8:	68db      	ldr	r3, [r3, #12]
 8022dea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022dec:	697b      	ldr	r3, [r7, #20]
 8022dee:	3304      	adds	r3, #4
 8022df0:	4618      	mov	r0, r3
 8022df2:	f7fd fdfb 	bl	80209ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022df6:	697b      	ldr	r3, [r7, #20]
 8022df8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022dfc:	f003 0304 	and.w	r3, r3, #4
 8022e00:	2b00      	cmp	r3, #0
 8022e02:	d022      	beq.n	8022e4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8022e04:	697b      	ldr	r3, [r7, #20]
 8022e06:	699a      	ldr	r2, [r3, #24]
 8022e08:	687b      	ldr	r3, [r7, #4]
 8022e0a:	18d1      	adds	r1, r2, r3
 8022e0c:	687b      	ldr	r3, [r7, #4]
 8022e0e:	683a      	ldr	r2, [r7, #0]
 8022e10:	6978      	ldr	r0, [r7, #20]
 8022e12:	f000 f8d1 	bl	8022fb8 <prvInsertTimerInActiveList>
 8022e16:	4603      	mov	r3, r0
 8022e18:	2b00      	cmp	r3, #0
 8022e1a:	d01f      	beq.n	8022e5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022e1c:	2300      	movs	r3, #0
 8022e1e:	9300      	str	r3, [sp, #0]
 8022e20:	2300      	movs	r3, #0
 8022e22:	687a      	ldr	r2, [r7, #4]
 8022e24:	2100      	movs	r1, #0
 8022e26:	6978      	ldr	r0, [r7, #20]
 8022e28:	f7ff ff88 	bl	8022d3c <xTimerGenericCommand>
 8022e2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8022e2e:	693b      	ldr	r3, [r7, #16]
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	d113      	bne.n	8022e5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8022e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e38:	f383 8811 	msr	BASEPRI, r3
 8022e3c:	f3bf 8f6f 	isb	sy
 8022e40:	f3bf 8f4f 	dsb	sy
 8022e44:	60fb      	str	r3, [r7, #12]
}
 8022e46:	bf00      	nop
 8022e48:	e7fe      	b.n	8022e48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022e4a:	697b      	ldr	r3, [r7, #20]
 8022e4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e50:	f023 0301 	bic.w	r3, r3, #1
 8022e54:	b2da      	uxtb	r2, r3
 8022e56:	697b      	ldr	r3, [r7, #20]
 8022e58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022e5c:	697b      	ldr	r3, [r7, #20]
 8022e5e:	6a1b      	ldr	r3, [r3, #32]
 8022e60:	6978      	ldr	r0, [r7, #20]
 8022e62:	4798      	blx	r3
}
 8022e64:	bf00      	nop
 8022e66:	3718      	adds	r7, #24
 8022e68:	46bd      	mov	sp, r7
 8022e6a:	bd80      	pop	{r7, pc}
 8022e6c:	20002288 	.word	0x20002288

08022e70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022e70:	b580      	push	{r7, lr}
 8022e72:	b084      	sub	sp, #16
 8022e74:	af00      	add	r7, sp, #0
 8022e76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022e78:	f107 0308 	add.w	r3, r7, #8
 8022e7c:	4618      	mov	r0, r3
 8022e7e:	f000 f857 	bl	8022f30 <prvGetNextExpireTime>
 8022e82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022e84:	68bb      	ldr	r3, [r7, #8]
 8022e86:	4619      	mov	r1, r3
 8022e88:	68f8      	ldr	r0, [r7, #12]
 8022e8a:	f000 f803 	bl	8022e94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022e8e:	f000 f8d5 	bl	802303c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022e92:	e7f1      	b.n	8022e78 <prvTimerTask+0x8>

08022e94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022e94:	b580      	push	{r7, lr}
 8022e96:	b084      	sub	sp, #16
 8022e98:	af00      	add	r7, sp, #0
 8022e9a:	6078      	str	r0, [r7, #4]
 8022e9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022e9e:	f7ff f8cf 	bl	8022040 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022ea2:	f107 0308 	add.w	r3, r7, #8
 8022ea6:	4618      	mov	r0, r3
 8022ea8:	f000 f866 	bl	8022f78 <prvSampleTimeNow>
 8022eac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022eae:	68bb      	ldr	r3, [r7, #8]
 8022eb0:	2b00      	cmp	r3, #0
 8022eb2:	d130      	bne.n	8022f16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022eb4:	683b      	ldr	r3, [r7, #0]
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d10a      	bne.n	8022ed0 <prvProcessTimerOrBlockTask+0x3c>
 8022eba:	687a      	ldr	r2, [r7, #4]
 8022ebc:	68fb      	ldr	r3, [r7, #12]
 8022ebe:	429a      	cmp	r2, r3
 8022ec0:	d806      	bhi.n	8022ed0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022ec2:	f7ff f8cb 	bl	802205c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8022ec6:	68f9      	ldr	r1, [r7, #12]
 8022ec8:	6878      	ldr	r0, [r7, #4]
 8022eca:	f7ff ff85 	bl	8022dd8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022ece:	e024      	b.n	8022f1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022ed0:	683b      	ldr	r3, [r7, #0]
 8022ed2:	2b00      	cmp	r3, #0
 8022ed4:	d008      	beq.n	8022ee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8022ed6:	4b13      	ldr	r3, [pc, #76]	; (8022f24 <prvProcessTimerOrBlockTask+0x90>)
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	681b      	ldr	r3, [r3, #0]
 8022edc:	2b00      	cmp	r3, #0
 8022ede:	d101      	bne.n	8022ee4 <prvProcessTimerOrBlockTask+0x50>
 8022ee0:	2301      	movs	r3, #1
 8022ee2:	e000      	b.n	8022ee6 <prvProcessTimerOrBlockTask+0x52>
 8022ee4:	2300      	movs	r3, #0
 8022ee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022ee8:	4b0f      	ldr	r3, [pc, #60]	; (8022f28 <prvProcessTimerOrBlockTask+0x94>)
 8022eea:	6818      	ldr	r0, [r3, #0]
 8022eec:	687a      	ldr	r2, [r7, #4]
 8022eee:	68fb      	ldr	r3, [r7, #12]
 8022ef0:	1ad3      	subs	r3, r2, r3
 8022ef2:	683a      	ldr	r2, [r7, #0]
 8022ef4:	4619      	mov	r1, r3
 8022ef6:	f7fe fe0d 	bl	8021b14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022efa:	f7ff f8af 	bl	802205c <xTaskResumeAll>
 8022efe:	4603      	mov	r3, r0
 8022f00:	2b00      	cmp	r3, #0
 8022f02:	d10a      	bne.n	8022f1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022f04:	4b09      	ldr	r3, [pc, #36]	; (8022f2c <prvProcessTimerOrBlockTask+0x98>)
 8022f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022f0a:	601a      	str	r2, [r3, #0]
 8022f0c:	f3bf 8f4f 	dsb	sy
 8022f10:	f3bf 8f6f 	isb	sy
}
 8022f14:	e001      	b.n	8022f1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8022f16:	f7ff f8a1 	bl	802205c <xTaskResumeAll>
}
 8022f1a:	bf00      	nop
 8022f1c:	3710      	adds	r7, #16
 8022f1e:	46bd      	mov	sp, r7
 8022f20:	bd80      	pop	{r7, pc}
 8022f22:	bf00      	nop
 8022f24:	2000228c 	.word	0x2000228c
 8022f28:	20002290 	.word	0x20002290
 8022f2c:	e000ed04 	.word	0xe000ed04

08022f30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022f30:	b480      	push	{r7}
 8022f32:	b085      	sub	sp, #20
 8022f34:	af00      	add	r7, sp, #0
 8022f36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022f38:	4b0e      	ldr	r3, [pc, #56]	; (8022f74 <prvGetNextExpireTime+0x44>)
 8022f3a:	681b      	ldr	r3, [r3, #0]
 8022f3c:	681b      	ldr	r3, [r3, #0]
 8022f3e:	2b00      	cmp	r3, #0
 8022f40:	d101      	bne.n	8022f46 <prvGetNextExpireTime+0x16>
 8022f42:	2201      	movs	r2, #1
 8022f44:	e000      	b.n	8022f48 <prvGetNextExpireTime+0x18>
 8022f46:	2200      	movs	r2, #0
 8022f48:	687b      	ldr	r3, [r7, #4]
 8022f4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	681b      	ldr	r3, [r3, #0]
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	d105      	bne.n	8022f60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022f54:	4b07      	ldr	r3, [pc, #28]	; (8022f74 <prvGetNextExpireTime+0x44>)
 8022f56:	681b      	ldr	r3, [r3, #0]
 8022f58:	68db      	ldr	r3, [r3, #12]
 8022f5a:	681b      	ldr	r3, [r3, #0]
 8022f5c:	60fb      	str	r3, [r7, #12]
 8022f5e:	e001      	b.n	8022f64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022f60:	2300      	movs	r3, #0
 8022f62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8022f64:	68fb      	ldr	r3, [r7, #12]
}
 8022f66:	4618      	mov	r0, r3
 8022f68:	3714      	adds	r7, #20
 8022f6a:	46bd      	mov	sp, r7
 8022f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f70:	4770      	bx	lr
 8022f72:	bf00      	nop
 8022f74:	20002288 	.word	0x20002288

08022f78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8022f78:	b580      	push	{r7, lr}
 8022f7a:	b084      	sub	sp, #16
 8022f7c:	af00      	add	r7, sp, #0
 8022f7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022f80:	f7ff f90a 	bl	8022198 <xTaskGetTickCount>
 8022f84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8022f86:	4b0b      	ldr	r3, [pc, #44]	; (8022fb4 <prvSampleTimeNow+0x3c>)
 8022f88:	681b      	ldr	r3, [r3, #0]
 8022f8a:	68fa      	ldr	r2, [r7, #12]
 8022f8c:	429a      	cmp	r2, r3
 8022f8e:	d205      	bcs.n	8022f9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022f90:	f000 f936 	bl	8023200 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	2201      	movs	r2, #1
 8022f98:	601a      	str	r2, [r3, #0]
 8022f9a:	e002      	b.n	8022fa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022f9c:	687b      	ldr	r3, [r7, #4]
 8022f9e:	2200      	movs	r2, #0
 8022fa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022fa2:	4a04      	ldr	r2, [pc, #16]	; (8022fb4 <prvSampleTimeNow+0x3c>)
 8022fa4:	68fb      	ldr	r3, [r7, #12]
 8022fa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022fa8:	68fb      	ldr	r3, [r7, #12]
}
 8022faa:	4618      	mov	r0, r3
 8022fac:	3710      	adds	r7, #16
 8022fae:	46bd      	mov	sp, r7
 8022fb0:	bd80      	pop	{r7, pc}
 8022fb2:	bf00      	nop
 8022fb4:	20002298 	.word	0x20002298

08022fb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022fb8:	b580      	push	{r7, lr}
 8022fba:	b086      	sub	sp, #24
 8022fbc:	af00      	add	r7, sp, #0
 8022fbe:	60f8      	str	r0, [r7, #12]
 8022fc0:	60b9      	str	r1, [r7, #8]
 8022fc2:	607a      	str	r2, [r7, #4]
 8022fc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8022fc6:	2300      	movs	r3, #0
 8022fc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022fca:	68fb      	ldr	r3, [r7, #12]
 8022fcc:	68ba      	ldr	r2, [r7, #8]
 8022fce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022fd0:	68fb      	ldr	r3, [r7, #12]
 8022fd2:	68fa      	ldr	r2, [r7, #12]
 8022fd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8022fd6:	68ba      	ldr	r2, [r7, #8]
 8022fd8:	687b      	ldr	r3, [r7, #4]
 8022fda:	429a      	cmp	r2, r3
 8022fdc:	d812      	bhi.n	8023004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022fde:	687a      	ldr	r2, [r7, #4]
 8022fe0:	683b      	ldr	r3, [r7, #0]
 8022fe2:	1ad2      	subs	r2, r2, r3
 8022fe4:	68fb      	ldr	r3, [r7, #12]
 8022fe6:	699b      	ldr	r3, [r3, #24]
 8022fe8:	429a      	cmp	r2, r3
 8022fea:	d302      	bcc.n	8022ff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022fec:	2301      	movs	r3, #1
 8022fee:	617b      	str	r3, [r7, #20]
 8022ff0:	e01b      	b.n	802302a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8022ff2:	4b10      	ldr	r3, [pc, #64]	; (8023034 <prvInsertTimerInActiveList+0x7c>)
 8022ff4:	681a      	ldr	r2, [r3, #0]
 8022ff6:	68fb      	ldr	r3, [r7, #12]
 8022ff8:	3304      	adds	r3, #4
 8022ffa:	4619      	mov	r1, r3
 8022ffc:	4610      	mov	r0, r2
 8022ffe:	f7fd fcbc 	bl	802097a <vListInsert>
 8023002:	e012      	b.n	802302a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8023004:	687a      	ldr	r2, [r7, #4]
 8023006:	683b      	ldr	r3, [r7, #0]
 8023008:	429a      	cmp	r2, r3
 802300a:	d206      	bcs.n	802301a <prvInsertTimerInActiveList+0x62>
 802300c:	68ba      	ldr	r2, [r7, #8]
 802300e:	683b      	ldr	r3, [r7, #0]
 8023010:	429a      	cmp	r2, r3
 8023012:	d302      	bcc.n	802301a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8023014:	2301      	movs	r3, #1
 8023016:	617b      	str	r3, [r7, #20]
 8023018:	e007      	b.n	802302a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802301a:	4b07      	ldr	r3, [pc, #28]	; (8023038 <prvInsertTimerInActiveList+0x80>)
 802301c:	681a      	ldr	r2, [r3, #0]
 802301e:	68fb      	ldr	r3, [r7, #12]
 8023020:	3304      	adds	r3, #4
 8023022:	4619      	mov	r1, r3
 8023024:	4610      	mov	r0, r2
 8023026:	f7fd fca8 	bl	802097a <vListInsert>
		}
	}

	return xProcessTimerNow;
 802302a:	697b      	ldr	r3, [r7, #20]
}
 802302c:	4618      	mov	r0, r3
 802302e:	3718      	adds	r7, #24
 8023030:	46bd      	mov	sp, r7
 8023032:	bd80      	pop	{r7, pc}
 8023034:	2000228c 	.word	0x2000228c
 8023038:	20002288 	.word	0x20002288

0802303c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 802303c:	b580      	push	{r7, lr}
 802303e:	b08e      	sub	sp, #56	; 0x38
 8023040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8023042:	e0ca      	b.n	80231da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8023044:	687b      	ldr	r3, [r7, #4]
 8023046:	2b00      	cmp	r3, #0
 8023048:	da18      	bge.n	802307c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802304a:	1d3b      	adds	r3, r7, #4
 802304c:	3304      	adds	r3, #4
 802304e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8023050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023052:	2b00      	cmp	r3, #0
 8023054:	d10a      	bne.n	802306c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8023056:	f04f 0350 	mov.w	r3, #80	; 0x50
 802305a:	f383 8811 	msr	BASEPRI, r3
 802305e:	f3bf 8f6f 	isb	sy
 8023062:	f3bf 8f4f 	dsb	sy
 8023066:	61fb      	str	r3, [r7, #28]
}
 8023068:	bf00      	nop
 802306a:	e7fe      	b.n	802306a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802306e:	681b      	ldr	r3, [r3, #0]
 8023070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023072:	6850      	ldr	r0, [r2, #4]
 8023074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023076:	6892      	ldr	r2, [r2, #8]
 8023078:	4611      	mov	r1, r2
 802307a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802307c:	687b      	ldr	r3, [r7, #4]
 802307e:	2b00      	cmp	r3, #0
 8023080:	f2c0 80ab 	blt.w	80231da <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8023084:	68fb      	ldr	r3, [r7, #12]
 8023086:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8023088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802308a:	695b      	ldr	r3, [r3, #20]
 802308c:	2b00      	cmp	r3, #0
 802308e:	d004      	beq.n	802309a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023092:	3304      	adds	r3, #4
 8023094:	4618      	mov	r0, r3
 8023096:	f7fd fca9 	bl	80209ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802309a:	463b      	mov	r3, r7
 802309c:	4618      	mov	r0, r3
 802309e:	f7ff ff6b 	bl	8022f78 <prvSampleTimeNow>
 80230a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80230a4:	687b      	ldr	r3, [r7, #4]
 80230a6:	2b09      	cmp	r3, #9
 80230a8:	f200 8096 	bhi.w	80231d8 <prvProcessReceivedCommands+0x19c>
 80230ac:	a201      	add	r2, pc, #4	; (adr r2, 80230b4 <prvProcessReceivedCommands+0x78>)
 80230ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80230b2:	bf00      	nop
 80230b4:	080230dd 	.word	0x080230dd
 80230b8:	080230dd 	.word	0x080230dd
 80230bc:	080230dd 	.word	0x080230dd
 80230c0:	08023151 	.word	0x08023151
 80230c4:	08023165 	.word	0x08023165
 80230c8:	080231af 	.word	0x080231af
 80230cc:	080230dd 	.word	0x080230dd
 80230d0:	080230dd 	.word	0x080230dd
 80230d4:	08023151 	.word	0x08023151
 80230d8:	08023165 	.word	0x08023165
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80230dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80230e2:	f043 0301 	orr.w	r3, r3, #1
 80230e6:	b2da      	uxtb	r2, r3
 80230e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80230ee:	68ba      	ldr	r2, [r7, #8]
 80230f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230f2:	699b      	ldr	r3, [r3, #24]
 80230f4:	18d1      	adds	r1, r2, r3
 80230f6:	68bb      	ldr	r3, [r7, #8]
 80230f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80230fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80230fc:	f7ff ff5c 	bl	8022fb8 <prvInsertTimerInActiveList>
 8023100:	4603      	mov	r3, r0
 8023102:	2b00      	cmp	r3, #0
 8023104:	d069      	beq.n	80231da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8023106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023108:	6a1b      	ldr	r3, [r3, #32]
 802310a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802310c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023110:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023114:	f003 0304 	and.w	r3, r3, #4
 8023118:	2b00      	cmp	r3, #0
 802311a:	d05e      	beq.n	80231da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 802311c:	68ba      	ldr	r2, [r7, #8]
 802311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023120:	699b      	ldr	r3, [r3, #24]
 8023122:	441a      	add	r2, r3
 8023124:	2300      	movs	r3, #0
 8023126:	9300      	str	r3, [sp, #0]
 8023128:	2300      	movs	r3, #0
 802312a:	2100      	movs	r1, #0
 802312c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802312e:	f7ff fe05 	bl	8022d3c <xTimerGenericCommand>
 8023132:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8023134:	6a3b      	ldr	r3, [r7, #32]
 8023136:	2b00      	cmp	r3, #0
 8023138:	d14f      	bne.n	80231da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 802313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802313e:	f383 8811 	msr	BASEPRI, r3
 8023142:	f3bf 8f6f 	isb	sy
 8023146:	f3bf 8f4f 	dsb	sy
 802314a:	61bb      	str	r3, [r7, #24]
}
 802314c:	bf00      	nop
 802314e:	e7fe      	b.n	802314e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023156:	f023 0301 	bic.w	r3, r3, #1
 802315a:	b2da      	uxtb	r2, r3
 802315c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802315e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8023162:	e03a      	b.n	80231da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8023164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023166:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802316a:	f043 0301 	orr.w	r3, r3, #1
 802316e:	b2da      	uxtb	r2, r3
 8023170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023172:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8023176:	68ba      	ldr	r2, [r7, #8]
 8023178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802317a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802317e:	699b      	ldr	r3, [r3, #24]
 8023180:	2b00      	cmp	r3, #0
 8023182:	d10a      	bne.n	802319a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8023184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023188:	f383 8811 	msr	BASEPRI, r3
 802318c:	f3bf 8f6f 	isb	sy
 8023190:	f3bf 8f4f 	dsb	sy
 8023194:	617b      	str	r3, [r7, #20]
}
 8023196:	bf00      	nop
 8023198:	e7fe      	b.n	8023198 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802319c:	699a      	ldr	r2, [r3, #24]
 802319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80231a0:	18d1      	adds	r1, r2, r3
 80231a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80231a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80231a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80231a8:	f7ff ff06 	bl	8022fb8 <prvInsertTimerInActiveList>
					break;
 80231ac:	e015      	b.n	80231da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80231ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80231b4:	f003 0302 	and.w	r3, r3, #2
 80231b8:	2b00      	cmp	r3, #0
 80231ba:	d103      	bne.n	80231c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80231bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80231be:	f000 fb59 	bl	8023874 <vPortFree>
 80231c2:	e00a      	b.n	80231da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80231c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80231ca:	f023 0301 	bic.w	r3, r3, #1
 80231ce:	b2da      	uxtb	r2, r3
 80231d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80231d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80231d6:	e000      	b.n	80231da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80231d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80231da:	4b08      	ldr	r3, [pc, #32]	; (80231fc <prvProcessReceivedCommands+0x1c0>)
 80231dc:	681b      	ldr	r3, [r3, #0]
 80231de:	1d39      	adds	r1, r7, #4
 80231e0:	2200      	movs	r2, #0
 80231e2:	4618      	mov	r0, r3
 80231e4:	f7fd ffba 	bl	802115c <xQueueReceive>
 80231e8:	4603      	mov	r3, r0
 80231ea:	2b00      	cmp	r3, #0
 80231ec:	f47f af2a 	bne.w	8023044 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80231f0:	bf00      	nop
 80231f2:	bf00      	nop
 80231f4:	3730      	adds	r7, #48	; 0x30
 80231f6:	46bd      	mov	sp, r7
 80231f8:	bd80      	pop	{r7, pc}
 80231fa:	bf00      	nop
 80231fc:	20002290 	.word	0x20002290

08023200 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8023200:	b580      	push	{r7, lr}
 8023202:	b088      	sub	sp, #32
 8023204:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8023206:	e048      	b.n	802329a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8023208:	4b2d      	ldr	r3, [pc, #180]	; (80232c0 <prvSwitchTimerLists+0xc0>)
 802320a:	681b      	ldr	r3, [r3, #0]
 802320c:	68db      	ldr	r3, [r3, #12]
 802320e:	681b      	ldr	r3, [r3, #0]
 8023210:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8023212:	4b2b      	ldr	r3, [pc, #172]	; (80232c0 <prvSwitchTimerLists+0xc0>)
 8023214:	681b      	ldr	r3, [r3, #0]
 8023216:	68db      	ldr	r3, [r3, #12]
 8023218:	68db      	ldr	r3, [r3, #12]
 802321a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 802321c:	68fb      	ldr	r3, [r7, #12]
 802321e:	3304      	adds	r3, #4
 8023220:	4618      	mov	r0, r3
 8023222:	f7fd fbe3 	bl	80209ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8023226:	68fb      	ldr	r3, [r7, #12]
 8023228:	6a1b      	ldr	r3, [r3, #32]
 802322a:	68f8      	ldr	r0, [r7, #12]
 802322c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 802322e:	68fb      	ldr	r3, [r7, #12]
 8023230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023234:	f003 0304 	and.w	r3, r3, #4
 8023238:	2b00      	cmp	r3, #0
 802323a:	d02e      	beq.n	802329a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 802323c:	68fb      	ldr	r3, [r7, #12]
 802323e:	699b      	ldr	r3, [r3, #24]
 8023240:	693a      	ldr	r2, [r7, #16]
 8023242:	4413      	add	r3, r2
 8023244:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8023246:	68ba      	ldr	r2, [r7, #8]
 8023248:	693b      	ldr	r3, [r7, #16]
 802324a:	429a      	cmp	r2, r3
 802324c:	d90e      	bls.n	802326c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802324e:	68fb      	ldr	r3, [r7, #12]
 8023250:	68ba      	ldr	r2, [r7, #8]
 8023252:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8023254:	68fb      	ldr	r3, [r7, #12]
 8023256:	68fa      	ldr	r2, [r7, #12]
 8023258:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802325a:	4b19      	ldr	r3, [pc, #100]	; (80232c0 <prvSwitchTimerLists+0xc0>)
 802325c:	681a      	ldr	r2, [r3, #0]
 802325e:	68fb      	ldr	r3, [r7, #12]
 8023260:	3304      	adds	r3, #4
 8023262:	4619      	mov	r1, r3
 8023264:	4610      	mov	r0, r2
 8023266:	f7fd fb88 	bl	802097a <vListInsert>
 802326a:	e016      	b.n	802329a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802326c:	2300      	movs	r3, #0
 802326e:	9300      	str	r3, [sp, #0]
 8023270:	2300      	movs	r3, #0
 8023272:	693a      	ldr	r2, [r7, #16]
 8023274:	2100      	movs	r1, #0
 8023276:	68f8      	ldr	r0, [r7, #12]
 8023278:	f7ff fd60 	bl	8022d3c <xTimerGenericCommand>
 802327c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802327e:	687b      	ldr	r3, [r7, #4]
 8023280:	2b00      	cmp	r3, #0
 8023282:	d10a      	bne.n	802329a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8023284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023288:	f383 8811 	msr	BASEPRI, r3
 802328c:	f3bf 8f6f 	isb	sy
 8023290:	f3bf 8f4f 	dsb	sy
 8023294:	603b      	str	r3, [r7, #0]
}
 8023296:	bf00      	nop
 8023298:	e7fe      	b.n	8023298 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802329a:	4b09      	ldr	r3, [pc, #36]	; (80232c0 <prvSwitchTimerLists+0xc0>)
 802329c:	681b      	ldr	r3, [r3, #0]
 802329e:	681b      	ldr	r3, [r3, #0]
 80232a0:	2b00      	cmp	r3, #0
 80232a2:	d1b1      	bne.n	8023208 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80232a4:	4b06      	ldr	r3, [pc, #24]	; (80232c0 <prvSwitchTimerLists+0xc0>)
 80232a6:	681b      	ldr	r3, [r3, #0]
 80232a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80232aa:	4b06      	ldr	r3, [pc, #24]	; (80232c4 <prvSwitchTimerLists+0xc4>)
 80232ac:	681b      	ldr	r3, [r3, #0]
 80232ae:	4a04      	ldr	r2, [pc, #16]	; (80232c0 <prvSwitchTimerLists+0xc0>)
 80232b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80232b2:	4a04      	ldr	r2, [pc, #16]	; (80232c4 <prvSwitchTimerLists+0xc4>)
 80232b4:	697b      	ldr	r3, [r7, #20]
 80232b6:	6013      	str	r3, [r2, #0]
}
 80232b8:	bf00      	nop
 80232ba:	3718      	adds	r7, #24
 80232bc:	46bd      	mov	sp, r7
 80232be:	bd80      	pop	{r7, pc}
 80232c0:	20002288 	.word	0x20002288
 80232c4:	2000228c 	.word	0x2000228c

080232c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80232c8:	b580      	push	{r7, lr}
 80232ca:	b082      	sub	sp, #8
 80232cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80232ce:	f000 f969 	bl	80235a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80232d2:	4b15      	ldr	r3, [pc, #84]	; (8023328 <prvCheckForValidListAndQueue+0x60>)
 80232d4:	681b      	ldr	r3, [r3, #0]
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	d120      	bne.n	802331c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80232da:	4814      	ldr	r0, [pc, #80]	; (802332c <prvCheckForValidListAndQueue+0x64>)
 80232dc:	f7fd fafc 	bl	80208d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80232e0:	4813      	ldr	r0, [pc, #76]	; (8023330 <prvCheckForValidListAndQueue+0x68>)
 80232e2:	f7fd faf9 	bl	80208d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80232e6:	4b13      	ldr	r3, [pc, #76]	; (8023334 <prvCheckForValidListAndQueue+0x6c>)
 80232e8:	4a10      	ldr	r2, [pc, #64]	; (802332c <prvCheckForValidListAndQueue+0x64>)
 80232ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80232ec:	4b12      	ldr	r3, [pc, #72]	; (8023338 <prvCheckForValidListAndQueue+0x70>)
 80232ee:	4a10      	ldr	r2, [pc, #64]	; (8023330 <prvCheckForValidListAndQueue+0x68>)
 80232f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80232f2:	2300      	movs	r3, #0
 80232f4:	9300      	str	r3, [sp, #0]
 80232f6:	4b11      	ldr	r3, [pc, #68]	; (802333c <prvCheckForValidListAndQueue+0x74>)
 80232f8:	4a11      	ldr	r2, [pc, #68]	; (8023340 <prvCheckForValidListAndQueue+0x78>)
 80232fa:	2110      	movs	r1, #16
 80232fc:	200a      	movs	r0, #10
 80232fe:	f7fd fc07 	bl	8020b10 <xQueueGenericCreateStatic>
 8023302:	4603      	mov	r3, r0
 8023304:	4a08      	ldr	r2, [pc, #32]	; (8023328 <prvCheckForValidListAndQueue+0x60>)
 8023306:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8023308:	4b07      	ldr	r3, [pc, #28]	; (8023328 <prvCheckForValidListAndQueue+0x60>)
 802330a:	681b      	ldr	r3, [r3, #0]
 802330c:	2b00      	cmp	r3, #0
 802330e:	d005      	beq.n	802331c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8023310:	4b05      	ldr	r3, [pc, #20]	; (8023328 <prvCheckForValidListAndQueue+0x60>)
 8023312:	681b      	ldr	r3, [r3, #0]
 8023314:	490b      	ldr	r1, [pc, #44]	; (8023344 <prvCheckForValidListAndQueue+0x7c>)
 8023316:	4618      	mov	r0, r3
 8023318:	f7fe fbd2 	bl	8021ac0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 802331c:	f000 f972 	bl	8023604 <vPortExitCritical>
}
 8023320:	bf00      	nop
 8023322:	46bd      	mov	sp, r7
 8023324:	bd80      	pop	{r7, pc}
 8023326:	bf00      	nop
 8023328:	20002290 	.word	0x20002290
 802332c:	20002260 	.word	0x20002260
 8023330:	20002274 	.word	0x20002274
 8023334:	20002288 	.word	0x20002288
 8023338:	2000228c 	.word	0x2000228c
 802333c:	2000233c 	.word	0x2000233c
 8023340:	2000229c 	.word	0x2000229c
 8023344:	08033818 	.word	0x08033818

08023348 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8023348:	b480      	push	{r7}
 802334a:	b085      	sub	sp, #20
 802334c:	af00      	add	r7, sp, #0
 802334e:	60f8      	str	r0, [r7, #12]
 8023350:	60b9      	str	r1, [r7, #8]
 8023352:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8023354:	68fb      	ldr	r3, [r7, #12]
 8023356:	3b04      	subs	r3, #4
 8023358:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802335a:	68fb      	ldr	r3, [r7, #12]
 802335c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8023360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8023362:	68fb      	ldr	r3, [r7, #12]
 8023364:	3b04      	subs	r3, #4
 8023366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8023368:	68bb      	ldr	r3, [r7, #8]
 802336a:	f023 0201 	bic.w	r2, r3, #1
 802336e:	68fb      	ldr	r3, [r7, #12]
 8023370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8023372:	68fb      	ldr	r3, [r7, #12]
 8023374:	3b04      	subs	r3, #4
 8023376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8023378:	4a0c      	ldr	r2, [pc, #48]	; (80233ac <pxPortInitialiseStack+0x64>)
 802337a:	68fb      	ldr	r3, [r7, #12]
 802337c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802337e:	68fb      	ldr	r3, [r7, #12]
 8023380:	3b14      	subs	r3, #20
 8023382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8023384:	687a      	ldr	r2, [r7, #4]
 8023386:	68fb      	ldr	r3, [r7, #12]
 8023388:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802338a:	68fb      	ldr	r3, [r7, #12]
 802338c:	3b04      	subs	r3, #4
 802338e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8023390:	68fb      	ldr	r3, [r7, #12]
 8023392:	f06f 0202 	mvn.w	r2, #2
 8023396:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8023398:	68fb      	ldr	r3, [r7, #12]
 802339a:	3b20      	subs	r3, #32
 802339c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802339e:	68fb      	ldr	r3, [r7, #12]
}
 80233a0:	4618      	mov	r0, r3
 80233a2:	3714      	adds	r7, #20
 80233a4:	46bd      	mov	sp, r7
 80233a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233aa:	4770      	bx	lr
 80233ac:	080233b1 	.word	0x080233b1

080233b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80233b0:	b480      	push	{r7}
 80233b2:	b085      	sub	sp, #20
 80233b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80233b6:	2300      	movs	r3, #0
 80233b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80233ba:	4b12      	ldr	r3, [pc, #72]	; (8023404 <prvTaskExitError+0x54>)
 80233bc:	681b      	ldr	r3, [r3, #0]
 80233be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80233c2:	d00a      	beq.n	80233da <prvTaskExitError+0x2a>
	__asm volatile
 80233c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80233c8:	f383 8811 	msr	BASEPRI, r3
 80233cc:	f3bf 8f6f 	isb	sy
 80233d0:	f3bf 8f4f 	dsb	sy
 80233d4:	60fb      	str	r3, [r7, #12]
}
 80233d6:	bf00      	nop
 80233d8:	e7fe      	b.n	80233d8 <prvTaskExitError+0x28>
	__asm volatile
 80233da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80233de:	f383 8811 	msr	BASEPRI, r3
 80233e2:	f3bf 8f6f 	isb	sy
 80233e6:	f3bf 8f4f 	dsb	sy
 80233ea:	60bb      	str	r3, [r7, #8]
}
 80233ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80233ee:	bf00      	nop
 80233f0:	687b      	ldr	r3, [r7, #4]
 80233f2:	2b00      	cmp	r3, #0
 80233f4:	d0fc      	beq.n	80233f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80233f6:	bf00      	nop
 80233f8:	bf00      	nop
 80233fa:	3714      	adds	r7, #20
 80233fc:	46bd      	mov	sp, r7
 80233fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023402:	4770      	bx	lr
 8023404:	20000128 	.word	0x20000128
	...

08023410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8023410:	4b07      	ldr	r3, [pc, #28]	; (8023430 <pxCurrentTCBConst2>)
 8023412:	6819      	ldr	r1, [r3, #0]
 8023414:	6808      	ldr	r0, [r1, #0]
 8023416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802341a:	f380 8809 	msr	PSP, r0
 802341e:	f3bf 8f6f 	isb	sy
 8023422:	f04f 0000 	mov.w	r0, #0
 8023426:	f380 8811 	msr	BASEPRI, r0
 802342a:	4770      	bx	lr
 802342c:	f3af 8000 	nop.w

08023430 <pxCurrentTCBConst2>:
 8023430:	20001d58 	.word	0x20001d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8023434:	bf00      	nop
 8023436:	bf00      	nop

08023438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8023438:	4808      	ldr	r0, [pc, #32]	; (802345c <prvPortStartFirstTask+0x24>)
 802343a:	6800      	ldr	r0, [r0, #0]
 802343c:	6800      	ldr	r0, [r0, #0]
 802343e:	f380 8808 	msr	MSP, r0
 8023442:	f04f 0000 	mov.w	r0, #0
 8023446:	f380 8814 	msr	CONTROL, r0
 802344a:	b662      	cpsie	i
 802344c:	b661      	cpsie	f
 802344e:	f3bf 8f4f 	dsb	sy
 8023452:	f3bf 8f6f 	isb	sy
 8023456:	df00      	svc	0
 8023458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802345a:	bf00      	nop
 802345c:	e000ed08 	.word	0xe000ed08

08023460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8023460:	b580      	push	{r7, lr}
 8023462:	b086      	sub	sp, #24
 8023464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8023466:	4b46      	ldr	r3, [pc, #280]	; (8023580 <xPortStartScheduler+0x120>)
 8023468:	681b      	ldr	r3, [r3, #0]
 802346a:	4a46      	ldr	r2, [pc, #280]	; (8023584 <xPortStartScheduler+0x124>)
 802346c:	4293      	cmp	r3, r2
 802346e:	d10a      	bne.n	8023486 <xPortStartScheduler+0x26>
	__asm volatile
 8023470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023474:	f383 8811 	msr	BASEPRI, r3
 8023478:	f3bf 8f6f 	isb	sy
 802347c:	f3bf 8f4f 	dsb	sy
 8023480:	613b      	str	r3, [r7, #16]
}
 8023482:	bf00      	nop
 8023484:	e7fe      	b.n	8023484 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8023486:	4b3e      	ldr	r3, [pc, #248]	; (8023580 <xPortStartScheduler+0x120>)
 8023488:	681b      	ldr	r3, [r3, #0]
 802348a:	4a3f      	ldr	r2, [pc, #252]	; (8023588 <xPortStartScheduler+0x128>)
 802348c:	4293      	cmp	r3, r2
 802348e:	d10a      	bne.n	80234a6 <xPortStartScheduler+0x46>
	__asm volatile
 8023490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023494:	f383 8811 	msr	BASEPRI, r3
 8023498:	f3bf 8f6f 	isb	sy
 802349c:	f3bf 8f4f 	dsb	sy
 80234a0:	60fb      	str	r3, [r7, #12]
}
 80234a2:	bf00      	nop
 80234a4:	e7fe      	b.n	80234a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80234a6:	4b39      	ldr	r3, [pc, #228]	; (802358c <xPortStartScheduler+0x12c>)
 80234a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80234aa:	697b      	ldr	r3, [r7, #20]
 80234ac:	781b      	ldrb	r3, [r3, #0]
 80234ae:	b2db      	uxtb	r3, r3
 80234b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80234b2:	697b      	ldr	r3, [r7, #20]
 80234b4:	22ff      	movs	r2, #255	; 0xff
 80234b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80234b8:	697b      	ldr	r3, [r7, #20]
 80234ba:	781b      	ldrb	r3, [r3, #0]
 80234bc:	b2db      	uxtb	r3, r3
 80234be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80234c0:	78fb      	ldrb	r3, [r7, #3]
 80234c2:	b2db      	uxtb	r3, r3
 80234c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80234c8:	b2da      	uxtb	r2, r3
 80234ca:	4b31      	ldr	r3, [pc, #196]	; (8023590 <xPortStartScheduler+0x130>)
 80234cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80234ce:	4b31      	ldr	r3, [pc, #196]	; (8023594 <xPortStartScheduler+0x134>)
 80234d0:	2207      	movs	r2, #7
 80234d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80234d4:	e009      	b.n	80234ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80234d6:	4b2f      	ldr	r3, [pc, #188]	; (8023594 <xPortStartScheduler+0x134>)
 80234d8:	681b      	ldr	r3, [r3, #0]
 80234da:	3b01      	subs	r3, #1
 80234dc:	4a2d      	ldr	r2, [pc, #180]	; (8023594 <xPortStartScheduler+0x134>)
 80234de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80234e0:	78fb      	ldrb	r3, [r7, #3]
 80234e2:	b2db      	uxtb	r3, r3
 80234e4:	005b      	lsls	r3, r3, #1
 80234e6:	b2db      	uxtb	r3, r3
 80234e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80234ea:	78fb      	ldrb	r3, [r7, #3]
 80234ec:	b2db      	uxtb	r3, r3
 80234ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80234f2:	2b80      	cmp	r3, #128	; 0x80
 80234f4:	d0ef      	beq.n	80234d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80234f6:	4b27      	ldr	r3, [pc, #156]	; (8023594 <xPortStartScheduler+0x134>)
 80234f8:	681b      	ldr	r3, [r3, #0]
 80234fa:	f1c3 0307 	rsb	r3, r3, #7
 80234fe:	2b04      	cmp	r3, #4
 8023500:	d00a      	beq.n	8023518 <xPortStartScheduler+0xb8>
	__asm volatile
 8023502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023506:	f383 8811 	msr	BASEPRI, r3
 802350a:	f3bf 8f6f 	isb	sy
 802350e:	f3bf 8f4f 	dsb	sy
 8023512:	60bb      	str	r3, [r7, #8]
}
 8023514:	bf00      	nop
 8023516:	e7fe      	b.n	8023516 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8023518:	4b1e      	ldr	r3, [pc, #120]	; (8023594 <xPortStartScheduler+0x134>)
 802351a:	681b      	ldr	r3, [r3, #0]
 802351c:	021b      	lsls	r3, r3, #8
 802351e:	4a1d      	ldr	r2, [pc, #116]	; (8023594 <xPortStartScheduler+0x134>)
 8023520:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8023522:	4b1c      	ldr	r3, [pc, #112]	; (8023594 <xPortStartScheduler+0x134>)
 8023524:	681b      	ldr	r3, [r3, #0]
 8023526:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802352a:	4a1a      	ldr	r2, [pc, #104]	; (8023594 <xPortStartScheduler+0x134>)
 802352c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802352e:	687b      	ldr	r3, [r7, #4]
 8023530:	b2da      	uxtb	r2, r3
 8023532:	697b      	ldr	r3, [r7, #20]
 8023534:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8023536:	4b18      	ldr	r3, [pc, #96]	; (8023598 <xPortStartScheduler+0x138>)
 8023538:	681b      	ldr	r3, [r3, #0]
 802353a:	4a17      	ldr	r2, [pc, #92]	; (8023598 <xPortStartScheduler+0x138>)
 802353c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8023542:	4b15      	ldr	r3, [pc, #84]	; (8023598 <xPortStartScheduler+0x138>)
 8023544:	681b      	ldr	r3, [r3, #0]
 8023546:	4a14      	ldr	r2, [pc, #80]	; (8023598 <xPortStartScheduler+0x138>)
 8023548:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802354c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802354e:	f000 f8dd 	bl	802370c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8023552:	4b12      	ldr	r3, [pc, #72]	; (802359c <xPortStartScheduler+0x13c>)
 8023554:	2200      	movs	r2, #0
 8023556:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8023558:	f000 f8fc 	bl	8023754 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802355c:	4b10      	ldr	r3, [pc, #64]	; (80235a0 <xPortStartScheduler+0x140>)
 802355e:	681b      	ldr	r3, [r3, #0]
 8023560:	4a0f      	ldr	r2, [pc, #60]	; (80235a0 <xPortStartScheduler+0x140>)
 8023562:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8023566:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8023568:	f7ff ff66 	bl	8023438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802356c:	f7fe fee6 	bl	802233c <vTaskSwitchContext>
	prvTaskExitError();
 8023570:	f7ff ff1e 	bl	80233b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8023574:	2300      	movs	r3, #0
}
 8023576:	4618      	mov	r0, r3
 8023578:	3718      	adds	r7, #24
 802357a:	46bd      	mov	sp, r7
 802357c:	bd80      	pop	{r7, pc}
 802357e:	bf00      	nop
 8023580:	e000ed00 	.word	0xe000ed00
 8023584:	410fc271 	.word	0x410fc271
 8023588:	410fc270 	.word	0x410fc270
 802358c:	e000e400 	.word	0xe000e400
 8023590:	2000238c 	.word	0x2000238c
 8023594:	20002390 	.word	0x20002390
 8023598:	e000ed20 	.word	0xe000ed20
 802359c:	20000128 	.word	0x20000128
 80235a0:	e000ef34 	.word	0xe000ef34

080235a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80235a4:	b480      	push	{r7}
 80235a6:	b083      	sub	sp, #12
 80235a8:	af00      	add	r7, sp, #0
	__asm volatile
 80235aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80235ae:	f383 8811 	msr	BASEPRI, r3
 80235b2:	f3bf 8f6f 	isb	sy
 80235b6:	f3bf 8f4f 	dsb	sy
 80235ba:	607b      	str	r3, [r7, #4]
}
 80235bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80235be:	4b0f      	ldr	r3, [pc, #60]	; (80235fc <vPortEnterCritical+0x58>)
 80235c0:	681b      	ldr	r3, [r3, #0]
 80235c2:	3301      	adds	r3, #1
 80235c4:	4a0d      	ldr	r2, [pc, #52]	; (80235fc <vPortEnterCritical+0x58>)
 80235c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80235c8:	4b0c      	ldr	r3, [pc, #48]	; (80235fc <vPortEnterCritical+0x58>)
 80235ca:	681b      	ldr	r3, [r3, #0]
 80235cc:	2b01      	cmp	r3, #1
 80235ce:	d10f      	bne.n	80235f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80235d0:	4b0b      	ldr	r3, [pc, #44]	; (8023600 <vPortEnterCritical+0x5c>)
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	b2db      	uxtb	r3, r3
 80235d6:	2b00      	cmp	r3, #0
 80235d8:	d00a      	beq.n	80235f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80235da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80235de:	f383 8811 	msr	BASEPRI, r3
 80235e2:	f3bf 8f6f 	isb	sy
 80235e6:	f3bf 8f4f 	dsb	sy
 80235ea:	603b      	str	r3, [r7, #0]
}
 80235ec:	bf00      	nop
 80235ee:	e7fe      	b.n	80235ee <vPortEnterCritical+0x4a>
	}
}
 80235f0:	bf00      	nop
 80235f2:	370c      	adds	r7, #12
 80235f4:	46bd      	mov	sp, r7
 80235f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235fa:	4770      	bx	lr
 80235fc:	20000128 	.word	0x20000128
 8023600:	e000ed04 	.word	0xe000ed04

08023604 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8023604:	b480      	push	{r7}
 8023606:	b083      	sub	sp, #12
 8023608:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802360a:	4b12      	ldr	r3, [pc, #72]	; (8023654 <vPortExitCritical+0x50>)
 802360c:	681b      	ldr	r3, [r3, #0]
 802360e:	2b00      	cmp	r3, #0
 8023610:	d10a      	bne.n	8023628 <vPortExitCritical+0x24>
	__asm volatile
 8023612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023616:	f383 8811 	msr	BASEPRI, r3
 802361a:	f3bf 8f6f 	isb	sy
 802361e:	f3bf 8f4f 	dsb	sy
 8023622:	607b      	str	r3, [r7, #4]
}
 8023624:	bf00      	nop
 8023626:	e7fe      	b.n	8023626 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8023628:	4b0a      	ldr	r3, [pc, #40]	; (8023654 <vPortExitCritical+0x50>)
 802362a:	681b      	ldr	r3, [r3, #0]
 802362c:	3b01      	subs	r3, #1
 802362e:	4a09      	ldr	r2, [pc, #36]	; (8023654 <vPortExitCritical+0x50>)
 8023630:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8023632:	4b08      	ldr	r3, [pc, #32]	; (8023654 <vPortExitCritical+0x50>)
 8023634:	681b      	ldr	r3, [r3, #0]
 8023636:	2b00      	cmp	r3, #0
 8023638:	d105      	bne.n	8023646 <vPortExitCritical+0x42>
 802363a:	2300      	movs	r3, #0
 802363c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802363e:	683b      	ldr	r3, [r7, #0]
 8023640:	f383 8811 	msr	BASEPRI, r3
}
 8023644:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8023646:	bf00      	nop
 8023648:	370c      	adds	r7, #12
 802364a:	46bd      	mov	sp, r7
 802364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023650:	4770      	bx	lr
 8023652:	bf00      	nop
 8023654:	20000128 	.word	0x20000128
	...

08023660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8023660:	f3ef 8009 	mrs	r0, PSP
 8023664:	f3bf 8f6f 	isb	sy
 8023668:	4b15      	ldr	r3, [pc, #84]	; (80236c0 <pxCurrentTCBConst>)
 802366a:	681a      	ldr	r2, [r3, #0]
 802366c:	f01e 0f10 	tst.w	lr, #16
 8023670:	bf08      	it	eq
 8023672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802367a:	6010      	str	r0, [r2, #0]
 802367c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8023684:	f380 8811 	msr	BASEPRI, r0
 8023688:	f3bf 8f4f 	dsb	sy
 802368c:	f3bf 8f6f 	isb	sy
 8023690:	f7fe fe54 	bl	802233c <vTaskSwitchContext>
 8023694:	f04f 0000 	mov.w	r0, #0
 8023698:	f380 8811 	msr	BASEPRI, r0
 802369c:	bc09      	pop	{r0, r3}
 802369e:	6819      	ldr	r1, [r3, #0]
 80236a0:	6808      	ldr	r0, [r1, #0]
 80236a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236a6:	f01e 0f10 	tst.w	lr, #16
 80236aa:	bf08      	it	eq
 80236ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80236b0:	f380 8809 	msr	PSP, r0
 80236b4:	f3bf 8f6f 	isb	sy
 80236b8:	4770      	bx	lr
 80236ba:	bf00      	nop
 80236bc:	f3af 8000 	nop.w

080236c0 <pxCurrentTCBConst>:
 80236c0:	20001d58 	.word	0x20001d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80236c4:	bf00      	nop
 80236c6:	bf00      	nop

080236c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80236c8:	b580      	push	{r7, lr}
 80236ca:	b082      	sub	sp, #8
 80236cc:	af00      	add	r7, sp, #0
	__asm volatile
 80236ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80236d2:	f383 8811 	msr	BASEPRI, r3
 80236d6:	f3bf 8f6f 	isb	sy
 80236da:	f3bf 8f4f 	dsb	sy
 80236de:	607b      	str	r3, [r7, #4]
}
 80236e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80236e2:	f7fe fd69 	bl	80221b8 <xTaskIncrementTick>
 80236e6:	4603      	mov	r3, r0
 80236e8:	2b00      	cmp	r3, #0
 80236ea:	d003      	beq.n	80236f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80236ec:	4b06      	ldr	r3, [pc, #24]	; (8023708 <xPortSysTickHandler+0x40>)
 80236ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80236f2:	601a      	str	r2, [r3, #0]
 80236f4:	2300      	movs	r3, #0
 80236f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80236f8:	683b      	ldr	r3, [r7, #0]
 80236fa:	f383 8811 	msr	BASEPRI, r3
}
 80236fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8023700:	bf00      	nop
 8023702:	3708      	adds	r7, #8
 8023704:	46bd      	mov	sp, r7
 8023706:	bd80      	pop	{r7, pc}
 8023708:	e000ed04 	.word	0xe000ed04

0802370c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802370c:	b480      	push	{r7}
 802370e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8023710:	4b0b      	ldr	r3, [pc, #44]	; (8023740 <vPortSetupTimerInterrupt+0x34>)
 8023712:	2200      	movs	r2, #0
 8023714:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8023716:	4b0b      	ldr	r3, [pc, #44]	; (8023744 <vPortSetupTimerInterrupt+0x38>)
 8023718:	2200      	movs	r2, #0
 802371a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802371c:	4b0a      	ldr	r3, [pc, #40]	; (8023748 <vPortSetupTimerInterrupt+0x3c>)
 802371e:	681b      	ldr	r3, [r3, #0]
 8023720:	4a0a      	ldr	r2, [pc, #40]	; (802374c <vPortSetupTimerInterrupt+0x40>)
 8023722:	fba2 2303 	umull	r2, r3, r2, r3
 8023726:	099b      	lsrs	r3, r3, #6
 8023728:	4a09      	ldr	r2, [pc, #36]	; (8023750 <vPortSetupTimerInterrupt+0x44>)
 802372a:	3b01      	subs	r3, #1
 802372c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802372e:	4b04      	ldr	r3, [pc, #16]	; (8023740 <vPortSetupTimerInterrupt+0x34>)
 8023730:	2207      	movs	r2, #7
 8023732:	601a      	str	r2, [r3, #0]
}
 8023734:	bf00      	nop
 8023736:	46bd      	mov	sp, r7
 8023738:	f85d 7b04 	ldr.w	r7, [sp], #4
 802373c:	4770      	bx	lr
 802373e:	bf00      	nop
 8023740:	e000e010 	.word	0xe000e010
 8023744:	e000e018 	.word	0xe000e018
 8023748:	20000000 	.word	0x20000000
 802374c:	10624dd3 	.word	0x10624dd3
 8023750:	e000e014 	.word	0xe000e014

08023754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8023764 <vPortEnableVFP+0x10>
 8023758:	6801      	ldr	r1, [r0, #0]
 802375a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802375e:	6001      	str	r1, [r0, #0]
 8023760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023762:	bf00      	nop
 8023764:	e000ed88 	.word	0xe000ed88

08023768 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8023768:	b480      	push	{r7}
 802376a:	b085      	sub	sp, #20
 802376c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802376e:	f3ef 8305 	mrs	r3, IPSR
 8023772:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8023774:	68fb      	ldr	r3, [r7, #12]
 8023776:	2b0f      	cmp	r3, #15
 8023778:	d914      	bls.n	80237a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802377a:	4a17      	ldr	r2, [pc, #92]	; (80237d8 <vPortValidateInterruptPriority+0x70>)
 802377c:	68fb      	ldr	r3, [r7, #12]
 802377e:	4413      	add	r3, r2
 8023780:	781b      	ldrb	r3, [r3, #0]
 8023782:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8023784:	4b15      	ldr	r3, [pc, #84]	; (80237dc <vPortValidateInterruptPriority+0x74>)
 8023786:	781b      	ldrb	r3, [r3, #0]
 8023788:	7afa      	ldrb	r2, [r7, #11]
 802378a:	429a      	cmp	r2, r3
 802378c:	d20a      	bcs.n	80237a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023792:	f383 8811 	msr	BASEPRI, r3
 8023796:	f3bf 8f6f 	isb	sy
 802379a:	f3bf 8f4f 	dsb	sy
 802379e:	607b      	str	r3, [r7, #4]
}
 80237a0:	bf00      	nop
 80237a2:	e7fe      	b.n	80237a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80237a4:	4b0e      	ldr	r3, [pc, #56]	; (80237e0 <vPortValidateInterruptPriority+0x78>)
 80237a6:	681b      	ldr	r3, [r3, #0]
 80237a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80237ac:	4b0d      	ldr	r3, [pc, #52]	; (80237e4 <vPortValidateInterruptPriority+0x7c>)
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	429a      	cmp	r2, r3
 80237b2:	d90a      	bls.n	80237ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80237b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80237b8:	f383 8811 	msr	BASEPRI, r3
 80237bc:	f3bf 8f6f 	isb	sy
 80237c0:	f3bf 8f4f 	dsb	sy
 80237c4:	603b      	str	r3, [r7, #0]
}
 80237c6:	bf00      	nop
 80237c8:	e7fe      	b.n	80237c8 <vPortValidateInterruptPriority+0x60>
	}
 80237ca:	bf00      	nop
 80237cc:	3714      	adds	r7, #20
 80237ce:	46bd      	mov	sp, r7
 80237d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237d4:	4770      	bx	lr
 80237d6:	bf00      	nop
 80237d8:	e000e3f0 	.word	0xe000e3f0
 80237dc:	2000238c 	.word	0x2000238c
 80237e0:	e000ed0c 	.word	0xe000ed0c
 80237e4:	20002390 	.word	0x20002390

080237e8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80237e8:	b580      	push	{r7, lr}
 80237ea:	b084      	sub	sp, #16
 80237ec:	af00      	add	r7, sp, #0
 80237ee:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80237f0:	2300      	movs	r3, #0
 80237f2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	f003 0307 	and.w	r3, r3, #7
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	d004      	beq.n	8023808 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80237fe:	687b      	ldr	r3, [r7, #4]
 8023800:	f023 0307 	bic.w	r3, r3, #7
 8023804:	3308      	adds	r3, #8
 8023806:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8023808:	f7fe fc1a 	bl	8022040 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 802380c:	4b16      	ldr	r3, [pc, #88]	; (8023868 <pvPortMalloc+0x80>)
 802380e:	681b      	ldr	r3, [r3, #0]
 8023810:	2b00      	cmp	r3, #0
 8023812:	d105      	bne.n	8023820 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8023814:	4b15      	ldr	r3, [pc, #84]	; (802386c <pvPortMalloc+0x84>)
 8023816:	f023 0307 	bic.w	r3, r3, #7
 802381a:	461a      	mov	r2, r3
 802381c:	4b12      	ldr	r3, [pc, #72]	; (8023868 <pvPortMalloc+0x80>)
 802381e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8023820:	4b13      	ldr	r3, [pc, #76]	; (8023870 <pvPortMalloc+0x88>)
 8023822:	681a      	ldr	r2, [r3, #0]
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	4413      	add	r3, r2
 8023828:	f24b 1227 	movw	r2, #45351	; 0xb127
 802382c:	4293      	cmp	r3, r2
 802382e:	d813      	bhi.n	8023858 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8023830:	4b0f      	ldr	r3, [pc, #60]	; (8023870 <pvPortMalloc+0x88>)
 8023832:	681a      	ldr	r2, [r3, #0]
 8023834:	687b      	ldr	r3, [r7, #4]
 8023836:	441a      	add	r2, r3
 8023838:	4b0d      	ldr	r3, [pc, #52]	; (8023870 <pvPortMalloc+0x88>)
 802383a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 802383c:	429a      	cmp	r2, r3
 802383e:	d90b      	bls.n	8023858 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8023840:	4b09      	ldr	r3, [pc, #36]	; (8023868 <pvPortMalloc+0x80>)
 8023842:	681a      	ldr	r2, [r3, #0]
 8023844:	4b0a      	ldr	r3, [pc, #40]	; (8023870 <pvPortMalloc+0x88>)
 8023846:	681b      	ldr	r3, [r3, #0]
 8023848:	4413      	add	r3, r2
 802384a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 802384c:	4b08      	ldr	r3, [pc, #32]	; (8023870 <pvPortMalloc+0x88>)
 802384e:	681a      	ldr	r2, [r3, #0]
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	4413      	add	r3, r2
 8023854:	4a06      	ldr	r2, [pc, #24]	; (8023870 <pvPortMalloc+0x88>)
 8023856:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8023858:	f7fe fc00 	bl	802205c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 802385c:	68fb      	ldr	r3, [r7, #12]
}
 802385e:	4618      	mov	r0, r3
 8023860:	3710      	adds	r7, #16
 8023862:	46bd      	mov	sp, r7
 8023864:	bd80      	pop	{r7, pc}
 8023866:	bf00      	nop
 8023868:	2000d4c8 	.word	0x2000d4c8
 802386c:	2000239c 	.word	0x2000239c
 8023870:	2000d4c4 	.word	0x2000d4c4

08023874 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023874:	b480      	push	{r7}
 8023876:	b085      	sub	sp, #20
 8023878:	af00      	add	r7, sp, #0
 802387a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 802387c:	687b      	ldr	r3, [r7, #4]
 802387e:	2b00      	cmp	r3, #0
 8023880:	d00a      	beq.n	8023898 <vPortFree+0x24>
	__asm volatile
 8023882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023886:	f383 8811 	msr	BASEPRI, r3
 802388a:	f3bf 8f6f 	isb	sy
 802388e:	f3bf 8f4f 	dsb	sy
 8023892:	60fb      	str	r3, [r7, #12]
}
 8023894:	bf00      	nop
 8023896:	e7fe      	b.n	8023896 <vPortFree+0x22>
}
 8023898:	bf00      	nop
 802389a:	3714      	adds	r7, #20
 802389c:	46bd      	mov	sp, r7
 802389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238a2:	4770      	bx	lr

080238a4 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80238a4:	b480      	push	{r7}
 80238a6:	b083      	sub	sp, #12
 80238a8:	af00      	add	r7, sp, #0
 80238aa:	6078      	str	r0, [r7, #4]
 80238ac:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80238ae:	683a      	ldr	r2, [r7, #0]
 80238b0:	687b      	ldr	r3, [r7, #4]
 80238b2:	4293      	cmp	r3, r2
 80238b4:	bf38      	it	cc
 80238b6:	4613      	movcc	r3, r2
}
 80238b8:	4618      	mov	r0, r3
 80238ba:	370c      	adds	r7, #12
 80238bc:	46bd      	mov	sp, r7
 80238be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238c2:	4770      	bx	lr

080238c4 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80238c4:	b480      	push	{r7}
 80238c6:	b083      	sub	sp, #12
 80238c8:	af00      	add	r7, sp, #0
 80238ca:	6078      	str	r0, [r7, #4]
 80238cc:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80238ce:	683a      	ldr	r2, [r7, #0]
 80238d0:	687b      	ldr	r3, [r7, #4]
 80238d2:	4293      	cmp	r3, r2
 80238d4:	bf28      	it	cs
 80238d6:	4613      	movcs	r3, r2
}
 80238d8:	4618      	mov	r0, r3
 80238da:	370c      	adds	r7, #12
 80238dc:	46bd      	mov	sp, r7
 80238de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238e2:	4770      	bx	lr

080238e4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80238e4:	b480      	push	{r7}
 80238e6:	b083      	sub	sp, #12
 80238e8:	af00      	add	r7, sp, #0
 80238ea:	6078      	str	r0, [r7, #4]
 80238ec:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80238ee:	687b      	ldr	r3, [r7, #4]
 80238f0:	683a      	ldr	r2, [r7, #0]
 80238f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80238f6:	6839      	ldr	r1, [r7, #0]
 80238f8:	fb01 f202 	mul.w	r2, r1, r2
 80238fc:	1a9b      	subs	r3, r3, r2
 80238fe:	687a      	ldr	r2, [r7, #4]
 8023900:	1ad3      	subs	r3, r2, r3
}
 8023902:	4618      	mov	r0, r3
 8023904:	370c      	adds	r7, #12
 8023906:	46bd      	mov	sp, r7
 8023908:	f85d 7b04 	ldr.w	r7, [sp], #4
 802390c:	4770      	bx	lr

0802390e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 802390e:	b580      	push	{r7, lr}
 8023910:	b082      	sub	sp, #8
 8023912:	af00      	add	r7, sp, #0
 8023914:	6078      	str	r0, [r7, #4]
 8023916:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8023918:	687a      	ldr	r2, [r7, #4]
 802391a:	683b      	ldr	r3, [r7, #0]
 802391c:	4413      	add	r3, r2
 802391e:	3b01      	subs	r3, #1
 8023920:	6839      	ldr	r1, [r7, #0]
 8023922:	4618      	mov	r0, r3
 8023924:	f7ff ffde 	bl	80238e4 <lfs_aligndown>
 8023928:	4603      	mov	r3, r0
}
 802392a:	4618      	mov	r0, r3
 802392c:	3708      	adds	r7, #8
 802392e:	46bd      	mov	sp, r7
 8023930:	bd80      	pop	{r7, pc}

08023932 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8023932:	b480      	push	{r7}
 8023934:	b083      	sub	sp, #12
 8023936:	af00      	add	r7, sp, #0
 8023938:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 802393a:	687b      	ldr	r3, [r7, #4]
 802393c:	3b01      	subs	r3, #1
 802393e:	fab3 f383 	clz	r3, r3
 8023942:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8023946:	4618      	mov	r0, r3
 8023948:	370c      	adds	r7, #12
 802394a:	46bd      	mov	sp, r7
 802394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023950:	4770      	bx	lr

08023952 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023952:	b480      	push	{r7}
 8023954:	b083      	sub	sp, #12
 8023956:	af00      	add	r7, sp, #0
 8023958:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 802395a:	687b      	ldr	r3, [r7, #4]
 802395c:	fa93 f3a3 	rbit	r3, r3
 8023960:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8023964:	4618      	mov	r0, r3
 8023966:	370c      	adds	r7, #12
 8023968:	46bd      	mov	sp, r7
 802396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802396e:	4770      	bx	lr

08023970 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8023970:	b580      	push	{r7, lr}
 8023972:	b082      	sub	sp, #8
 8023974:	af00      	add	r7, sp, #0
 8023976:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8023978:	6878      	ldr	r0, [r7, #4]
 802397a:	f7ed f9b5 	bl	8010ce8 <__popcountsi2>
 802397e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8023980:	4618      	mov	r0, r3
 8023982:	3708      	adds	r7, #8
 8023984:	46bd      	mov	sp, r7
 8023986:	bd80      	pop	{r7, pc}

08023988 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8023988:	b480      	push	{r7}
 802398a:	b083      	sub	sp, #12
 802398c:	af00      	add	r7, sp, #0
 802398e:	6078      	str	r0, [r7, #4]
 8023990:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8023992:	687a      	ldr	r2, [r7, #4]
 8023994:	683b      	ldr	r3, [r7, #0]
 8023996:	1ad3      	subs	r3, r2, r3
}
 8023998:	4618      	mov	r0, r3
 802399a:	370c      	adds	r7, #12
 802399c:	46bd      	mov	sp, r7
 802399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239a2:	4770      	bx	lr

080239a4 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80239a4:	b480      	push	{r7}
 80239a6:	b083      	sub	sp, #12
 80239a8:	af00      	add	r7, sp, #0
 80239aa:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80239ac:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80239ae:	4618      	mov	r0, r3
 80239b0:	370c      	adds	r7, #12
 80239b2:	46bd      	mov	sp, r7
 80239b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239b8:	4770      	bx	lr

080239ba <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80239ba:	b580      	push	{r7, lr}
 80239bc:	b082      	sub	sp, #8
 80239be:	af00      	add	r7, sp, #0
 80239c0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80239c2:	6878      	ldr	r0, [r7, #4]
 80239c4:	f7ff ffee 	bl	80239a4 <lfs_fromle32>
 80239c8:	4603      	mov	r3, r0
}
 80239ca:	4618      	mov	r0, r3
 80239cc:	3708      	adds	r7, #8
 80239ce:	46bd      	mov	sp, r7
 80239d0:	bd80      	pop	{r7, pc}

080239d2 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80239d2:	b480      	push	{r7}
 80239d4:	b083      	sub	sp, #12
 80239d6:	af00      	add	r7, sp, #0
 80239d8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80239da:	687b      	ldr	r3, [r7, #4]
 80239dc:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80239de:	4618      	mov	r0, r3
 80239e0:	370c      	adds	r7, #12
 80239e2:	46bd      	mov	sp, r7
 80239e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239e8:	4770      	bx	lr

080239ea <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80239ea:	b580      	push	{r7, lr}
 80239ec:	b082      	sub	sp, #8
 80239ee:	af00      	add	r7, sp, #0
 80239f0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80239f2:	6878      	ldr	r0, [r7, #4]
 80239f4:	f7ff ffed 	bl	80239d2 <lfs_frombe32>
 80239f8:	4603      	mov	r3, r0
}
 80239fa:	4618      	mov	r0, r3
 80239fc:	3708      	adds	r7, #8
 80239fe:	46bd      	mov	sp, r7
 8023a00:	bd80      	pop	{r7, pc}

08023a02 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8023a02:	b580      	push	{r7, lr}
 8023a04:	b082      	sub	sp, #8
 8023a06:	af00      	add	r7, sp, #0
 8023a08:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 8023a0a:	6878      	ldr	r0, [r7, #4]
 8023a0c:	f008 fed2 	bl	802c7b4 <malloc>
 8023a10:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8023a12:	4618      	mov	r0, r3
 8023a14:	3708      	adds	r7, #8
 8023a16:	46bd      	mov	sp, r7
 8023a18:	bd80      	pop	{r7, pc}

08023a1a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8023a1a:	b580      	push	{r7, lr}
 8023a1c:	b082      	sub	sp, #8
 8023a1e:	af00      	add	r7, sp, #0
 8023a20:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8023a22:	6878      	ldr	r0, [r7, #4]
 8023a24:	f008 fece 	bl	802c7c4 <free>
#else
    (void)p;
#endif
}
 8023a28:	bf00      	nop
 8023a2a:	3708      	adds	r7, #8
 8023a2c:	46bd      	mov	sp, r7
 8023a2e:	bd80      	pop	{r7, pc}

08023a30 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8023a30:	b480      	push	{r7}
 8023a32:	b083      	sub	sp, #12
 8023a34:	af00      	add	r7, sp, #0
 8023a36:	6078      	str	r0, [r7, #4]
 8023a38:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 8023a3a:	683b      	ldr	r3, [r7, #0]
 8023a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8023a40:	601a      	str	r2, [r3, #0]
}
 8023a42:	bf00      	nop
 8023a44:	370c      	adds	r7, #12
 8023a46:	46bd      	mov	sp, r7
 8023a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a4c:	4770      	bx	lr

08023a4e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8023a4e:	b580      	push	{r7, lr}
 8023a50:	b082      	sub	sp, #8
 8023a52:	af00      	add	r7, sp, #0
 8023a54:	6078      	str	r0, [r7, #4]
 8023a56:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023a58:	683b      	ldr	r3, [r7, #0]
 8023a5a:	68d8      	ldr	r0, [r3, #12]
 8023a5c:	687b      	ldr	r3, [r7, #4]
 8023a5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a62:	461a      	mov	r2, r3
 8023a64:	21ff      	movs	r1, #255	; 0xff
 8023a66:	f00a f841 	bl	802daec <memset>
    pcache->block = LFS_BLOCK_NULL;
 8023a6a:	683b      	ldr	r3, [r7, #0]
 8023a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8023a70:	601a      	str	r2, [r3, #0]
}
 8023a72:	bf00      	nop
 8023a74:	3708      	adds	r7, #8
 8023a76:	46bd      	mov	sp, r7
 8023a78:	bd80      	pop	{r7, pc}
	...

08023a7c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8023a7c:	b5b0      	push	{r4, r5, r7, lr}
 8023a7e:	b08a      	sub	sp, #40	; 0x28
 8023a80:	af02      	add	r7, sp, #8
 8023a82:	60f8      	str	r0, [r7, #12]
 8023a84:	60b9      	str	r1, [r7, #8]
 8023a86:	607a      	str	r2, [r7, #4]
 8023a88:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8023a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a8c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8023a8e:	68fb      	ldr	r3, [r7, #12]
 8023a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a92:	6a1b      	ldr	r3, [r3, #32]
 8023a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023a96:	429a      	cmp	r2, r3
 8023a98:	d208      	bcs.n	8023aac <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8023a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023a9e:	441a      	add	r2, r3
 8023aa0:	68fb      	ldr	r3, [r7, #12]
 8023aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023aa4:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8023aa6:	429a      	cmp	r2, r3
 8023aa8:	f240 811b 	bls.w	8023ce2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8023aac:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023ab0:	e11c      	b.n	8023cec <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8023ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023ab4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8023ab6:	68bb      	ldr	r3, [r7, #8]
 8023ab8:	2b00      	cmp	r3, #0
 8023aba:	d03f      	beq.n	8023b3c <lfs_bd_read+0xc0>
 8023abc:	68bb      	ldr	r3, [r7, #8]
 8023abe:	681b      	ldr	r3, [r3, #0]
 8023ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023ac2:	429a      	cmp	r2, r3
 8023ac4:	d13a      	bne.n	8023b3c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8023ac6:	68bb      	ldr	r3, [r7, #8]
 8023ac8:	685a      	ldr	r2, [r3, #4]
 8023aca:	68bb      	ldr	r3, [r7, #8]
 8023acc:	689b      	ldr	r3, [r3, #8]
 8023ace:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8023ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023ad2:	429a      	cmp	r2, r3
 8023ad4:	d232      	bcs.n	8023b3c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8023ad6:	68bb      	ldr	r3, [r7, #8]
 8023ad8:	685b      	ldr	r3, [r3, #4]
 8023ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023adc:	429a      	cmp	r2, r3
 8023ade:	d324      	bcc.n	8023b2a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8023ae0:	68bb      	ldr	r3, [r7, #8]
 8023ae2:	689a      	ldr	r2, [r3, #8]
 8023ae4:	68bb      	ldr	r3, [r7, #8]
 8023ae6:	6859      	ldr	r1, [r3, #4]
 8023ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023aea:	1acb      	subs	r3, r1, r3
 8023aec:	4413      	add	r3, r2
 8023aee:	4619      	mov	r1, r3
 8023af0:	69b8      	ldr	r0, [r7, #24]
 8023af2:	f7ff fee7 	bl	80238c4 <lfs_min>
 8023af6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8023af8:	68bb      	ldr	r3, [r7, #8]
 8023afa:	68da      	ldr	r2, [r3, #12]
 8023afc:	68bb      	ldr	r3, [r7, #8]
 8023afe:	685b      	ldr	r3, [r3, #4]
 8023b00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023b02:	1acb      	subs	r3, r1, r3
 8023b04:	4413      	add	r3, r2
 8023b06:	69ba      	ldr	r2, [r7, #24]
 8023b08:	4619      	mov	r1, r3
 8023b0a:	69f8      	ldr	r0, [r7, #28]
 8023b0c:	f00a f9c3 	bl	802de96 <memcpy>

                data += diff;
 8023b10:	69fa      	ldr	r2, [r7, #28]
 8023b12:	69bb      	ldr	r3, [r7, #24]
 8023b14:	4413      	add	r3, r2
 8023b16:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023b18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b1a:	69bb      	ldr	r3, [r7, #24]
 8023b1c:	4413      	add	r3, r2
 8023b1e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023b20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023b22:	69bb      	ldr	r3, [r7, #24]
 8023b24:	1ad3      	subs	r3, r2, r3
 8023b26:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023b28:	e0db      	b.n	8023ce2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8023b2a:	68bb      	ldr	r3, [r7, #8]
 8023b2c:	685a      	ldr	r2, [r3, #4]
 8023b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023b30:	1ad3      	subs	r3, r2, r3
 8023b32:	4619      	mov	r1, r3
 8023b34:	69b8      	ldr	r0, [r7, #24]
 8023b36:	f7ff fec5 	bl	80238c4 <lfs_min>
 8023b3a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	681b      	ldr	r3, [r3, #0]
 8023b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023b42:	429a      	cmp	r2, r3
 8023b44:	d13a      	bne.n	8023bbc <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8023b46:	687b      	ldr	r3, [r7, #4]
 8023b48:	685a      	ldr	r2, [r3, #4]
 8023b4a:	687b      	ldr	r3, [r7, #4]
 8023b4c:	689b      	ldr	r3, [r3, #8]
 8023b4e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023b50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b52:	429a      	cmp	r2, r3
 8023b54:	d232      	bcs.n	8023bbc <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023b56:	687b      	ldr	r3, [r7, #4]
 8023b58:	685b      	ldr	r3, [r3, #4]
 8023b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b5c:	429a      	cmp	r2, r3
 8023b5e:	d324      	bcc.n	8023baa <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023b60:	687b      	ldr	r3, [r7, #4]
 8023b62:	689a      	ldr	r2, [r3, #8]
 8023b64:	687b      	ldr	r3, [r7, #4]
 8023b66:	6859      	ldr	r1, [r3, #4]
 8023b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023b6a:	1acb      	subs	r3, r1, r3
 8023b6c:	4413      	add	r3, r2
 8023b6e:	4619      	mov	r1, r3
 8023b70:	69b8      	ldr	r0, [r7, #24]
 8023b72:	f7ff fea7 	bl	80238c4 <lfs_min>
 8023b76:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023b78:	687b      	ldr	r3, [r7, #4]
 8023b7a:	68da      	ldr	r2, [r3, #12]
 8023b7c:	687b      	ldr	r3, [r7, #4]
 8023b7e:	685b      	ldr	r3, [r3, #4]
 8023b80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023b82:	1acb      	subs	r3, r1, r3
 8023b84:	4413      	add	r3, r2
 8023b86:	69ba      	ldr	r2, [r7, #24]
 8023b88:	4619      	mov	r1, r3
 8023b8a:	69f8      	ldr	r0, [r7, #28]
 8023b8c:	f00a f983 	bl	802de96 <memcpy>

                data += diff;
 8023b90:	69fa      	ldr	r2, [r7, #28]
 8023b92:	69bb      	ldr	r3, [r7, #24]
 8023b94:	4413      	add	r3, r2
 8023b96:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b9a:	69bb      	ldr	r3, [r7, #24]
 8023b9c:	4413      	add	r3, r2
 8023b9e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023ba2:	69bb      	ldr	r3, [r7, #24]
 8023ba4:	1ad3      	subs	r3, r2, r3
 8023ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023ba8:	e09b      	b.n	8023ce2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8023baa:	687b      	ldr	r3, [r7, #4]
 8023bac:	685a      	ldr	r2, [r3, #4]
 8023bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023bb0:	1ad3      	subs	r3, r2, r3
 8023bb2:	4619      	mov	r1, r3
 8023bb4:	69b8      	ldr	r0, [r7, #24]
 8023bb6:	f7ff fe85 	bl	80238c4 <lfs_min>
 8023bba:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023bbe:	683b      	ldr	r3, [r7, #0]
 8023bc0:	429a      	cmp	r2, r3
 8023bc2:	d336      	bcc.n	8023c32 <lfs_bd_read+0x1b6>
 8023bc4:	68fb      	ldr	r3, [r7, #12]
 8023bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bc8:	695a      	ldr	r2, [r3, #20]
 8023bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023bcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8023bd0:	fb01 f202 	mul.w	r2, r1, r2
 8023bd4:	1a9b      	subs	r3, r3, r2
 8023bd6:	2b00      	cmp	r3, #0
 8023bd8:	d12b      	bne.n	8023c32 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8023bda:	68fb      	ldr	r3, [r7, #12]
 8023bdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bde:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023be0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023be2:	429a      	cmp	r2, r3
 8023be4:	d325      	bcc.n	8023c32 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8023be6:	68fb      	ldr	r3, [r7, #12]
 8023be8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bea:	695b      	ldr	r3, [r3, #20]
 8023bec:	4619      	mov	r1, r3
 8023bee:	69b8      	ldr	r0, [r7, #24]
 8023bf0:	f7ff fe78 	bl	80238e4 <lfs_aligndown>
 8023bf4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8023bf6:	68fb      	ldr	r3, [r7, #12]
 8023bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bfa:	685c      	ldr	r4, [r3, #4]
 8023bfc:	68fb      	ldr	r3, [r7, #12]
 8023bfe:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023c00:	69bb      	ldr	r3, [r7, #24]
 8023c02:	9300      	str	r3, [sp, #0]
 8023c04:	69fb      	ldr	r3, [r7, #28]
 8023c06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023c0a:	47a0      	blx	r4
 8023c0c:	6178      	str	r0, [r7, #20]
            if (err) {
 8023c0e:	697b      	ldr	r3, [r7, #20]
 8023c10:	2b00      	cmp	r3, #0
 8023c12:	d001      	beq.n	8023c18 <lfs_bd_read+0x19c>
                return err;
 8023c14:	697b      	ldr	r3, [r7, #20]
 8023c16:	e069      	b.n	8023cec <lfs_bd_read+0x270>
            }

            data += diff;
 8023c18:	69fa      	ldr	r2, [r7, #28]
 8023c1a:	69bb      	ldr	r3, [r7, #24]
 8023c1c:	4413      	add	r3, r2
 8023c1e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023c22:	69bb      	ldr	r3, [r7, #24]
 8023c24:	4413      	add	r3, r2
 8023c26:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8023c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023c2a:	69bb      	ldr	r3, [r7, #24]
 8023c2c:	1ad3      	subs	r3, r2, r3
 8023c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8023c30:	e057      	b.n	8023ce2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8023c32:	68fb      	ldr	r3, [r7, #12]
 8023c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c36:	6a1b      	ldr	r3, [r3, #32]
 8023c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023c3a:	429a      	cmp	r2, r3
 8023c3c:	d305      	bcc.n	8023c4a <lfs_bd_read+0x1ce>
 8023c3e:	4b2d      	ldr	r3, [pc, #180]	; (8023cf4 <lfs_bd_read+0x278>)
 8023c40:	4a2d      	ldr	r2, [pc, #180]	; (8023cf8 <lfs_bd_read+0x27c>)
 8023c42:	216b      	movs	r1, #107	; 0x6b
 8023c44:	482d      	ldr	r0, [pc, #180]	; (8023cfc <lfs_bd_read+0x280>)
 8023c46:	f008 fd81 	bl	802c74c <__assert_func>
        rcache->block = block;
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023c4e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023c50:	68fb      	ldr	r3, [r7, #12]
 8023c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c54:	695b      	ldr	r3, [r3, #20]
 8023c56:	4619      	mov	r1, r3
 8023c58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023c5a:	f7ff fe43 	bl	80238e4 <lfs_aligndown>
 8023c5e:	4602      	mov	r2, r0
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023c66:	683b      	ldr	r3, [r7, #0]
 8023c68:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8023c6a:	68fb      	ldr	r3, [r7, #12]
 8023c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c6e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023c70:	4619      	mov	r1, r3
 8023c72:	4610      	mov	r0, r2
 8023c74:	f7ff fe4b 	bl	802390e <lfs_alignup>
 8023c78:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8023c7a:	68fb      	ldr	r3, [r7, #12]
 8023c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c7e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023c80:	4619      	mov	r1, r3
 8023c82:	4610      	mov	r0, r2
 8023c84:	f7ff fe1e 	bl	80238c4 <lfs_min>
 8023c88:	4602      	mov	r2, r0
                - rcache->off,
 8023c8a:	687b      	ldr	r3, [r7, #4]
 8023c8c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8023c8e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8023c90:	68fb      	ldr	r3, [r7, #12]
 8023c92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8023c96:	4619      	mov	r1, r3
 8023c98:	4610      	mov	r0, r2
 8023c9a:	f7ff fe13 	bl	80238c4 <lfs_min>
 8023c9e:	4602      	mov	r2, r0
 8023ca0:	687b      	ldr	r3, [r7, #4]
 8023ca2:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023ca4:	68fb      	ldr	r3, [r7, #12]
 8023ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ca8:	685c      	ldr	r4, [r3, #4]
 8023caa:	68fb      	ldr	r3, [r7, #12]
 8023cac:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023cae:	687b      	ldr	r3, [r7, #4]
 8023cb0:	6819      	ldr	r1, [r3, #0]
 8023cb2:	687b      	ldr	r3, [r7, #4]
 8023cb4:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8023cb6:	687b      	ldr	r3, [r7, #4]
 8023cb8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023cba:	687b      	ldr	r3, [r7, #4]
 8023cbc:	689b      	ldr	r3, [r3, #8]
 8023cbe:	9300      	str	r3, [sp, #0]
 8023cc0:	462b      	mov	r3, r5
 8023cc2:	47a0      	blx	r4
 8023cc4:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8023cc6:	693b      	ldr	r3, [r7, #16]
 8023cc8:	2b00      	cmp	r3, #0
 8023cca:	dd05      	ble.n	8023cd8 <lfs_bd_read+0x25c>
 8023ccc:	4b0c      	ldr	r3, [pc, #48]	; (8023d00 <lfs_bd_read+0x284>)
 8023cce:	4a0a      	ldr	r2, [pc, #40]	; (8023cf8 <lfs_bd_read+0x27c>)
 8023cd0:	2176      	movs	r1, #118	; 0x76
 8023cd2:	480a      	ldr	r0, [pc, #40]	; (8023cfc <lfs_bd_read+0x280>)
 8023cd4:	f008 fd3a 	bl	802c74c <__assert_func>
        if (err) {
 8023cd8:	693b      	ldr	r3, [r7, #16]
 8023cda:	2b00      	cmp	r3, #0
 8023cdc:	d001      	beq.n	8023ce2 <lfs_bd_read+0x266>
            return err;
 8023cde:	693b      	ldr	r3, [r7, #16]
 8023ce0:	e004      	b.n	8023cec <lfs_bd_read+0x270>
    while (size > 0) {
 8023ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023ce4:	2b00      	cmp	r3, #0
 8023ce6:	f47f aee4 	bne.w	8023ab2 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8023cea:	2300      	movs	r3, #0
}
 8023cec:	4618      	mov	r0, r3
 8023cee:	3720      	adds	r7, #32
 8023cf0:	46bd      	mov	sp, r7
 8023cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8023cf4:	08033820 	.word	0x08033820
 8023cf8:	08034af4 	.word	0x08034af4
 8023cfc:	08033840 	.word	0x08033840
 8023d00:	08033874 	.word	0x08033874

08023d04 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023d04:	b580      	push	{r7, lr}
 8023d06:	b08e      	sub	sp, #56	; 0x38
 8023d08:	af04      	add	r7, sp, #16
 8023d0a:	60f8      	str	r0, [r7, #12]
 8023d0c:	60b9      	str	r1, [r7, #8]
 8023d0e:	607a      	str	r2, [r7, #4]
 8023d10:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8023d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023d14:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8023d16:	2300      	movs	r3, #0
 8023d18:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8023d1a:	2300      	movs	r3, #0
 8023d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8023d1e:	e039      	b.n	8023d94 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8023d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d24:	1ad3      	subs	r3, r2, r3
 8023d26:	2108      	movs	r1, #8
 8023d28:	4618      	mov	r0, r3
 8023d2a:	f7ff fdcb 	bl	80238c4 <lfs_min>
 8023d2e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8023d30:	683a      	ldr	r2, [r7, #0]
 8023d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d34:	1ad1      	subs	r1, r2, r3
 8023d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d3a:	4413      	add	r3, r2
 8023d3c:	69fa      	ldr	r2, [r7, #28]
 8023d3e:	9203      	str	r2, [sp, #12]
 8023d40:	f107 0210 	add.w	r2, r7, #16
 8023d44:	9202      	str	r2, [sp, #8]
 8023d46:	9301      	str	r3, [sp, #4]
 8023d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d4a:	9300      	str	r3, [sp, #0]
 8023d4c:	460b      	mov	r3, r1
 8023d4e:	687a      	ldr	r2, [r7, #4]
 8023d50:	68b9      	ldr	r1, [r7, #8]
 8023d52:	68f8      	ldr	r0, [r7, #12]
 8023d54:	f7ff fe92 	bl	8023a7c <lfs_bd_read>
 8023d58:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8023d5a:	69bb      	ldr	r3, [r7, #24]
 8023d5c:	2b00      	cmp	r3, #0
 8023d5e:	d001      	beq.n	8023d64 <lfs_bd_cmp+0x60>
            return res;
 8023d60:	69bb      	ldr	r3, [r7, #24]
 8023d62:	e01c      	b.n	8023d9e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023d64:	6a3a      	ldr	r2, [r7, #32]
 8023d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d68:	18d1      	adds	r1, r2, r3
 8023d6a:	f107 0310 	add.w	r3, r7, #16
 8023d6e:	69fa      	ldr	r2, [r7, #28]
 8023d70:	4618      	mov	r0, r3
 8023d72:	f009 fe91 	bl	802da98 <memcmp>
 8023d76:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023d78:	69bb      	ldr	r3, [r7, #24]
 8023d7a:	2b00      	cmp	r3, #0
 8023d7c:	d006      	beq.n	8023d8c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8023d7e:	69bb      	ldr	r3, [r7, #24]
 8023d80:	2b00      	cmp	r3, #0
 8023d82:	da01      	bge.n	8023d88 <lfs_bd_cmp+0x84>
 8023d84:	2301      	movs	r3, #1
 8023d86:	e00a      	b.n	8023d9e <lfs_bd_cmp+0x9a>
 8023d88:	2302      	movs	r3, #2
 8023d8a:	e008      	b.n	8023d9e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8023d8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023d8e:	69fb      	ldr	r3, [r7, #28]
 8023d90:	4413      	add	r3, r2
 8023d92:	627b      	str	r3, [r7, #36]	; 0x24
 8023d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023d98:	429a      	cmp	r2, r3
 8023d9a:	d3c1      	bcc.n	8023d20 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8023d9c:	2300      	movs	r3, #0
}
 8023d9e:	4618      	mov	r0, r3
 8023da0:	3728      	adds	r7, #40	; 0x28
 8023da2:	46bd      	mov	sp, r7
 8023da4:	bd80      	pop	{r7, pc}
	...

08023da8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023da8:	b5b0      	push	{r4, r5, r7, lr}
 8023daa:	b08c      	sub	sp, #48	; 0x30
 8023dac:	af04      	add	r7, sp, #16
 8023dae:	60f8      	str	r0, [r7, #12]
 8023db0:	60b9      	str	r1, [r7, #8]
 8023db2:	607a      	str	r2, [r7, #4]
 8023db4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8023db6:	68bb      	ldr	r3, [r7, #8]
 8023db8:	681b      	ldr	r3, [r3, #0]
 8023dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023dbe:	d061      	beq.n	8023e84 <lfs_bd_flush+0xdc>
 8023dc0:	68bb      	ldr	r3, [r7, #8]
 8023dc2:	681b      	ldr	r3, [r3, #0]
 8023dc4:	f113 0f02 	cmn.w	r3, #2
 8023dc8:	d05c      	beq.n	8023e84 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8023dca:	68bb      	ldr	r3, [r7, #8]
 8023dcc:	681a      	ldr	r2, [r3, #0]
 8023dce:	68fb      	ldr	r3, [r7, #12]
 8023dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023dd2:	6a1b      	ldr	r3, [r3, #32]
 8023dd4:	429a      	cmp	r2, r3
 8023dd6:	d305      	bcc.n	8023de4 <lfs_bd_flush+0x3c>
 8023dd8:	4b2d      	ldr	r3, [pc, #180]	; (8023e90 <lfs_bd_flush+0xe8>)
 8023dda:	4a2e      	ldr	r2, [pc, #184]	; (8023e94 <lfs_bd_flush+0xec>)
 8023ddc:	219e      	movs	r1, #158	; 0x9e
 8023dde:	482e      	ldr	r0, [pc, #184]	; (8023e98 <lfs_bd_flush+0xf0>)
 8023de0:	f008 fcb4 	bl	802c74c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8023de4:	68bb      	ldr	r3, [r7, #8]
 8023de6:	689a      	ldr	r2, [r3, #8]
 8023de8:	68fb      	ldr	r3, [r7, #12]
 8023dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023dec:	699b      	ldr	r3, [r3, #24]
 8023dee:	4619      	mov	r1, r3
 8023df0:	4610      	mov	r0, r2
 8023df2:	f7ff fd8c 	bl	802390e <lfs_alignup>
 8023df6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023df8:	68fb      	ldr	r3, [r7, #12]
 8023dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023dfc:	689c      	ldr	r4, [r3, #8]
 8023dfe:	68fb      	ldr	r3, [r7, #12]
 8023e00:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023e02:	68bb      	ldr	r3, [r7, #8]
 8023e04:	6819      	ldr	r1, [r3, #0]
 8023e06:	68bb      	ldr	r3, [r7, #8]
 8023e08:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8023e0a:	68bb      	ldr	r3, [r7, #8]
 8023e0c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023e0e:	69fb      	ldr	r3, [r7, #28]
 8023e10:	9300      	str	r3, [sp, #0]
 8023e12:	462b      	mov	r3, r5
 8023e14:	47a0      	blx	r4
 8023e16:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8023e18:	69bb      	ldr	r3, [r7, #24]
 8023e1a:	2b00      	cmp	r3, #0
 8023e1c:	dd05      	ble.n	8023e2a <lfs_bd_flush+0x82>
 8023e1e:	4b1f      	ldr	r3, [pc, #124]	; (8023e9c <lfs_bd_flush+0xf4>)
 8023e20:	4a1c      	ldr	r2, [pc, #112]	; (8023e94 <lfs_bd_flush+0xec>)
 8023e22:	21a2      	movs	r1, #162	; 0xa2
 8023e24:	481c      	ldr	r0, [pc, #112]	; (8023e98 <lfs_bd_flush+0xf0>)
 8023e26:	f008 fc91 	bl	802c74c <__assert_func>
        if (err) {
 8023e2a:	69bb      	ldr	r3, [r7, #24]
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d001      	beq.n	8023e34 <lfs_bd_flush+0x8c>
            return err;
 8023e30:	69bb      	ldr	r3, [r7, #24]
 8023e32:	e028      	b.n	8023e86 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8023e34:	78fb      	ldrb	r3, [r7, #3]
 8023e36:	2b00      	cmp	r3, #0
 8023e38:	d020      	beq.n	8023e7c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8023e3a:	6879      	ldr	r1, [r7, #4]
 8023e3c:	68f8      	ldr	r0, [r7, #12]
 8023e3e:	f7ff fdf7 	bl	8023a30 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023e42:	68bb      	ldr	r3, [r7, #8]
 8023e44:	681b      	ldr	r3, [r3, #0]
 8023e46:	68ba      	ldr	r2, [r7, #8]
 8023e48:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8023e4a:	68b9      	ldr	r1, [r7, #8]
 8023e4c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8023e4e:	69f8      	ldr	r0, [r7, #28]
 8023e50:	9003      	str	r0, [sp, #12]
 8023e52:	9102      	str	r1, [sp, #8]
 8023e54:	9201      	str	r2, [sp, #4]
 8023e56:	9300      	str	r3, [sp, #0]
 8023e58:	69fb      	ldr	r3, [r7, #28]
 8023e5a:	687a      	ldr	r2, [r7, #4]
 8023e5c:	2100      	movs	r1, #0
 8023e5e:	68f8      	ldr	r0, [r7, #12]
 8023e60:	f7ff ff50 	bl	8023d04 <lfs_bd_cmp>
 8023e64:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023e66:	697b      	ldr	r3, [r7, #20]
 8023e68:	2b00      	cmp	r3, #0
 8023e6a:	da01      	bge.n	8023e70 <lfs_bd_flush+0xc8>
                return res;
 8023e6c:	697b      	ldr	r3, [r7, #20]
 8023e6e:	e00a      	b.n	8023e86 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023e70:	697b      	ldr	r3, [r7, #20]
 8023e72:	2b00      	cmp	r3, #0
 8023e74:	d002      	beq.n	8023e7c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023e76:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023e7a:	e004      	b.n	8023e86 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8023e7c:	68b9      	ldr	r1, [r7, #8]
 8023e7e:	68f8      	ldr	r0, [r7, #12]
 8023e80:	f7ff fde5 	bl	8023a4e <lfs_cache_zero>
    }

    return 0;
 8023e84:	2300      	movs	r3, #0
}
 8023e86:	4618      	mov	r0, r3
 8023e88:	3720      	adds	r7, #32
 8023e8a:	46bd      	mov	sp, r7
 8023e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8023e8e:	bf00      	nop
 8023e90:	08033880 	.word	0x08033880
 8023e94:	08034b00 	.word	0x08034b00
 8023e98:	08033840 	.word	0x08033840
 8023e9c:	08033874 	.word	0x08033874

08023ea0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023ea0:	b580      	push	{r7, lr}
 8023ea2:	b086      	sub	sp, #24
 8023ea4:	af00      	add	r7, sp, #0
 8023ea6:	60f8      	str	r0, [r7, #12]
 8023ea8:	60b9      	str	r1, [r7, #8]
 8023eaa:	607a      	str	r2, [r7, #4]
 8023eac:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8023eae:	6879      	ldr	r1, [r7, #4]
 8023eb0:	68f8      	ldr	r0, [r7, #12]
 8023eb2:	f7ff fdbd 	bl	8023a30 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023eb6:	78fb      	ldrb	r3, [r7, #3]
 8023eb8:	687a      	ldr	r2, [r7, #4]
 8023eba:	68b9      	ldr	r1, [r7, #8]
 8023ebc:	68f8      	ldr	r0, [r7, #12]
 8023ebe:	f7ff ff73 	bl	8023da8 <lfs_bd_flush>
 8023ec2:	6178      	str	r0, [r7, #20]
    if (err) {
 8023ec4:	697b      	ldr	r3, [r7, #20]
 8023ec6:	2b00      	cmp	r3, #0
 8023ec8:	d001      	beq.n	8023ece <lfs_bd_sync+0x2e>
        return err;
 8023eca:	697b      	ldr	r3, [r7, #20]
 8023ecc:	e011      	b.n	8023ef2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8023ece:	68fb      	ldr	r3, [r7, #12]
 8023ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ed2:	691b      	ldr	r3, [r3, #16]
 8023ed4:	68fa      	ldr	r2, [r7, #12]
 8023ed6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023ed8:	4610      	mov	r0, r2
 8023eda:	4798      	blx	r3
 8023edc:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8023ede:	697b      	ldr	r3, [r7, #20]
 8023ee0:	2b00      	cmp	r3, #0
 8023ee2:	dd05      	ble.n	8023ef0 <lfs_bd_sync+0x50>
 8023ee4:	4b05      	ldr	r3, [pc, #20]	; (8023efc <lfs_bd_sync+0x5c>)
 8023ee6:	4a06      	ldr	r2, [pc, #24]	; (8023f00 <lfs_bd_sync+0x60>)
 8023ee8:	21c8      	movs	r1, #200	; 0xc8
 8023eea:	4806      	ldr	r0, [pc, #24]	; (8023f04 <lfs_bd_sync+0x64>)
 8023eec:	f008 fc2e 	bl	802c74c <__assert_func>
    return err;
 8023ef0:	697b      	ldr	r3, [r7, #20]
}
 8023ef2:	4618      	mov	r0, r3
 8023ef4:	3718      	adds	r7, #24
 8023ef6:	46bd      	mov	sp, r7
 8023ef8:	bd80      	pop	{r7, pc}
 8023efa:	bf00      	nop
 8023efc:	08033874 	.word	0x08033874
 8023f00:	08034b10 	.word	0x08034b10
 8023f04:	08033840 	.word	0x08033840

08023f08 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023f08:	b580      	push	{r7, lr}
 8023f0a:	b088      	sub	sp, #32
 8023f0c:	af00      	add	r7, sp, #0
 8023f0e:	60f8      	str	r0, [r7, #12]
 8023f10:	60b9      	str	r1, [r7, #8]
 8023f12:	607a      	str	r2, [r7, #4]
 8023f14:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8023f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023f18:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8023f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023f1c:	f113 0f02 	cmn.w	r3, #2
 8023f20:	d00b      	beq.n	8023f3a <lfs_bd_prog+0x32>
 8023f22:	68fb      	ldr	r3, [r7, #12]
 8023f24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f26:	6a1b      	ldr	r3, [r3, #32]
 8023f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023f2a:	429a      	cmp	r2, r3
 8023f2c:	d305      	bcc.n	8023f3a <lfs_bd_prog+0x32>
 8023f2e:	4b47      	ldr	r3, [pc, #284]	; (802404c <lfs_bd_prog+0x144>)
 8023f30:	4a47      	ldr	r2, [pc, #284]	; (8024050 <lfs_bd_prog+0x148>)
 8023f32:	21d3      	movs	r1, #211	; 0xd3
 8023f34:	4847      	ldr	r0, [pc, #284]	; (8024054 <lfs_bd_prog+0x14c>)
 8023f36:	f008 fc09 	bl	802c74c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8023f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023f3e:	441a      	add	r2, r3
 8023f40:	68fb      	ldr	r3, [r7, #12]
 8023f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f44:	69db      	ldr	r3, [r3, #28]
 8023f46:	429a      	cmp	r2, r3
 8023f48:	d977      	bls.n	802403a <lfs_bd_prog+0x132>
 8023f4a:	4b43      	ldr	r3, [pc, #268]	; (8024058 <lfs_bd_prog+0x150>)
 8023f4c:	4a40      	ldr	r2, [pc, #256]	; (8024050 <lfs_bd_prog+0x148>)
 8023f4e:	21d4      	movs	r1, #212	; 0xd4
 8023f50:	4840      	ldr	r0, [pc, #256]	; (8024054 <lfs_bd_prog+0x14c>)
 8023f52:	f008 fbfb 	bl	802c74c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8023f56:	68bb      	ldr	r3, [r7, #8]
 8023f58:	681b      	ldr	r3, [r3, #0]
 8023f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023f5c:	429a      	cmp	r2, r3
 8023f5e:	d151      	bne.n	8024004 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8023f60:	68bb      	ldr	r3, [r7, #8]
 8023f62:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8023f64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023f66:	429a      	cmp	r2, r3
 8023f68:	d34c      	bcc.n	8024004 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8023f6a:	68bb      	ldr	r3, [r7, #8]
 8023f6c:	685a      	ldr	r2, [r3, #4]
 8023f6e:	68fb      	ldr	r3, [r7, #12]
 8023f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f74:	4413      	add	r3, r2
                off >= pcache->off &&
 8023f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023f78:	429a      	cmp	r2, r3
 8023f7a:	d243      	bcs.n	8024004 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8023f7c:	68fb      	ldr	r3, [r7, #12]
 8023f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023f82:	68bb      	ldr	r3, [r7, #8]
 8023f84:	6859      	ldr	r1, [r3, #4]
 8023f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023f88:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8023f8a:	4413      	add	r3, r2
 8023f8c:	4619      	mov	r1, r3
 8023f8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023f90:	f7ff fc98 	bl	80238c4 <lfs_min>
 8023f94:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8023f96:	68bb      	ldr	r3, [r7, #8]
 8023f98:	68da      	ldr	r2, [r3, #12]
 8023f9a:	68bb      	ldr	r3, [r7, #8]
 8023f9c:	685b      	ldr	r3, [r3, #4]
 8023f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023fa0:	1acb      	subs	r3, r1, r3
 8023fa2:	4413      	add	r3, r2
 8023fa4:	69ba      	ldr	r2, [r7, #24]
 8023fa6:	69f9      	ldr	r1, [r7, #28]
 8023fa8:	4618      	mov	r0, r3
 8023faa:	f009 ff74 	bl	802de96 <memcpy>

            data += diff;
 8023fae:	69fa      	ldr	r2, [r7, #28]
 8023fb0:	69bb      	ldr	r3, [r7, #24]
 8023fb2:	4413      	add	r3, r2
 8023fb4:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023fb8:	69bb      	ldr	r3, [r7, #24]
 8023fba:	4413      	add	r3, r2
 8023fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8023fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023fc0:	69bb      	ldr	r3, [r7, #24]
 8023fc2:	1ad3      	subs	r3, r2, r3
 8023fc4:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8023fc6:	68bb      	ldr	r3, [r7, #8]
 8023fc8:	6898      	ldr	r0, [r3, #8]
 8023fca:	68bb      	ldr	r3, [r7, #8]
 8023fcc:	685b      	ldr	r3, [r3, #4]
 8023fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023fd0:	1ad3      	subs	r3, r2, r3
 8023fd2:	4619      	mov	r1, r3
 8023fd4:	f7ff fc66 	bl	80238a4 <lfs_max>
 8023fd8:	4602      	mov	r2, r0
 8023fda:	68bb      	ldr	r3, [r7, #8]
 8023fdc:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8023fde:	68bb      	ldr	r3, [r7, #8]
 8023fe0:	689a      	ldr	r2, [r3, #8]
 8023fe2:	68fb      	ldr	r3, [r7, #12]
 8023fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023fe8:	429a      	cmp	r2, r3
 8023fea:	d126      	bne.n	802403a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023fec:	78fb      	ldrb	r3, [r7, #3]
 8023fee:	687a      	ldr	r2, [r7, #4]
 8023ff0:	68b9      	ldr	r1, [r7, #8]
 8023ff2:	68f8      	ldr	r0, [r7, #12]
 8023ff4:	f7ff fed8 	bl	8023da8 <lfs_bd_flush>
 8023ff8:	6178      	str	r0, [r7, #20]
                if (err) {
 8023ffa:	697b      	ldr	r3, [r7, #20]
 8023ffc:	2b00      	cmp	r3, #0
 8023ffe:	d01c      	beq.n	802403a <lfs_bd_prog+0x132>
                    return err;
 8024000:	697b      	ldr	r3, [r7, #20]
 8024002:	e01e      	b.n	8024042 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8024004:	68bb      	ldr	r3, [r7, #8]
 8024006:	681b      	ldr	r3, [r3, #0]
 8024008:	f1b3 3fff 	cmp.w	r3, #4294967295
 802400c:	d005      	beq.n	802401a <lfs_bd_prog+0x112>
 802400e:	4b13      	ldr	r3, [pc, #76]	; (802405c <lfs_bd_prog+0x154>)
 8024010:	4a0f      	ldr	r2, [pc, #60]	; (8024050 <lfs_bd_prog+0x148>)
 8024012:	21f1      	movs	r1, #241	; 0xf1
 8024014:	480f      	ldr	r0, [pc, #60]	; (8024054 <lfs_bd_prog+0x14c>)
 8024016:	f008 fb99 	bl	802c74c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 802401a:	68bb      	ldr	r3, [r7, #8]
 802401c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802401e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8024020:	68fb      	ldr	r3, [r7, #12]
 8024022:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024024:	699b      	ldr	r3, [r3, #24]
 8024026:	4619      	mov	r1, r3
 8024028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802402a:	f7ff fc5b 	bl	80238e4 <lfs_aligndown>
 802402e:	4602      	mov	r2, r0
 8024030:	68bb      	ldr	r3, [r7, #8]
 8024032:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8024034:	68bb      	ldr	r3, [r7, #8]
 8024036:	2200      	movs	r2, #0
 8024038:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 802403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802403c:	2b00      	cmp	r3, #0
 802403e:	d18a      	bne.n	8023f56 <lfs_bd_prog+0x4e>
    }

    return 0;
 8024040:	2300      	movs	r3, #0
}
 8024042:	4618      	mov	r0, r3
 8024044:	3720      	adds	r7, #32
 8024046:	46bd      	mov	sp, r7
 8024048:	bd80      	pop	{r7, pc}
 802404a:	bf00      	nop
 802404c:	080338a8 	.word	0x080338a8
 8024050:	08034b1c 	.word	0x08034b1c
 8024054:	08033840 	.word	0x08033840
 8024058:	080338e4 	.word	0x080338e4
 802405c:	08033908 	.word	0x08033908

08024060 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8024060:	b580      	push	{r7, lr}
 8024062:	b084      	sub	sp, #16
 8024064:	af00      	add	r7, sp, #0
 8024066:	6078      	str	r0, [r7, #4]
 8024068:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802406e:	6a1b      	ldr	r3, [r3, #32]
 8024070:	683a      	ldr	r2, [r7, #0]
 8024072:	429a      	cmp	r2, r3
 8024074:	d305      	bcc.n	8024082 <lfs_bd_erase+0x22>
 8024076:	4b0f      	ldr	r3, [pc, #60]	; (80240b4 <lfs_bd_erase+0x54>)
 8024078:	4a0f      	ldr	r2, [pc, #60]	; (80240b8 <lfs_bd_erase+0x58>)
 802407a:	21ff      	movs	r1, #255	; 0xff
 802407c:	480f      	ldr	r0, [pc, #60]	; (80240bc <lfs_bd_erase+0x5c>)
 802407e:	f008 fb65 	bl	802c74c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8024082:	687b      	ldr	r3, [r7, #4]
 8024084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024086:	68db      	ldr	r3, [r3, #12]
 8024088:	687a      	ldr	r2, [r7, #4]
 802408a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802408c:	6839      	ldr	r1, [r7, #0]
 802408e:	4610      	mov	r0, r2
 8024090:	4798      	blx	r3
 8024092:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8024094:	68fb      	ldr	r3, [r7, #12]
 8024096:	2b00      	cmp	r3, #0
 8024098:	dd06      	ble.n	80240a8 <lfs_bd_erase+0x48>
 802409a:	4b09      	ldr	r3, [pc, #36]	; (80240c0 <lfs_bd_erase+0x60>)
 802409c:	4a06      	ldr	r2, [pc, #24]	; (80240b8 <lfs_bd_erase+0x58>)
 802409e:	f240 1101 	movw	r1, #257	; 0x101
 80240a2:	4806      	ldr	r0, [pc, #24]	; (80240bc <lfs_bd_erase+0x5c>)
 80240a4:	f008 fb52 	bl	802c74c <__assert_func>
    return err;
 80240a8:	68fb      	ldr	r3, [r7, #12]
}
 80240aa:	4618      	mov	r0, r3
 80240ac:	3710      	adds	r7, #16
 80240ae:	46bd      	mov	sp, r7
 80240b0:	bd80      	pop	{r7, pc}
 80240b2:	bf00      	nop
 80240b4:	08033820 	.word	0x08033820
 80240b8:	08034b28 	.word	0x08034b28
 80240bc:	08033840 	.word	0x08033840
 80240c0:	08033874 	.word	0x08033874

080240c4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 80240c4:	b480      	push	{r7}
 80240c6:	b085      	sub	sp, #20
 80240c8:	af00      	add	r7, sp, #0
 80240ca:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 80240cc:	687b      	ldr	r3, [r7, #4]
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 80240d2:	687b      	ldr	r3, [r7, #4]
 80240d4:	685a      	ldr	r2, [r3, #4]
 80240d6:	687b      	ldr	r3, [r7, #4]
 80240d8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 80240da:	687b      	ldr	r3, [r7, #4]
 80240dc:	3304      	adds	r3, #4
 80240de:	68fa      	ldr	r2, [r7, #12]
 80240e0:	601a      	str	r2, [r3, #0]
}
 80240e2:	bf00      	nop
 80240e4:	3714      	adds	r7, #20
 80240e6:	46bd      	mov	sp, r7
 80240e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240ec:	4770      	bx	lr

080240ee <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80240ee:	b480      	push	{r7}
 80240f0:	b083      	sub	sp, #12
 80240f2:	af00      	add	r7, sp, #0
 80240f4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80240f6:	687b      	ldr	r3, [r7, #4]
 80240f8:	681b      	ldr	r3, [r3, #0]
 80240fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80240fe:	d005      	beq.n	802410c <lfs_pair_isnull+0x1e>
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	3304      	adds	r3, #4
 8024104:	681b      	ldr	r3, [r3, #0]
 8024106:	f1b3 3fff 	cmp.w	r3, #4294967295
 802410a:	d101      	bne.n	8024110 <lfs_pair_isnull+0x22>
 802410c:	2301      	movs	r3, #1
 802410e:	e000      	b.n	8024112 <lfs_pair_isnull+0x24>
 8024110:	2300      	movs	r3, #0
 8024112:	f003 0301 	and.w	r3, r3, #1
 8024116:	b2db      	uxtb	r3, r3
}
 8024118:	4618      	mov	r0, r3
 802411a:	370c      	adds	r7, #12
 802411c:	46bd      	mov	sp, r7
 802411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024122:	4770      	bx	lr

08024124 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8024124:	b480      	push	{r7}
 8024126:	b083      	sub	sp, #12
 8024128:	af00      	add	r7, sp, #0
 802412a:	6078      	str	r0, [r7, #4]
 802412c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 802412e:	687b      	ldr	r3, [r7, #4]
 8024130:	681a      	ldr	r2, [r3, #0]
 8024132:	683b      	ldr	r3, [r7, #0]
 8024134:	681b      	ldr	r3, [r3, #0]
 8024136:	429a      	cmp	r2, r3
 8024138:	d017      	beq.n	802416a <lfs_pair_cmp+0x46>
 802413a:	687b      	ldr	r3, [r7, #4]
 802413c:	3304      	adds	r3, #4
 802413e:	681a      	ldr	r2, [r3, #0]
 8024140:	683b      	ldr	r3, [r7, #0]
 8024142:	3304      	adds	r3, #4
 8024144:	681b      	ldr	r3, [r3, #0]
 8024146:	429a      	cmp	r2, r3
 8024148:	d00f      	beq.n	802416a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 802414a:	687b      	ldr	r3, [r7, #4]
 802414c:	681a      	ldr	r2, [r3, #0]
 802414e:	683b      	ldr	r3, [r7, #0]
 8024150:	3304      	adds	r3, #4
 8024152:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8024154:	429a      	cmp	r2, r3
 8024156:	d008      	beq.n	802416a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	3304      	adds	r3, #4
 802415c:	681a      	ldr	r2, [r3, #0]
 802415e:	683b      	ldr	r3, [r7, #0]
 8024160:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8024162:	429a      	cmp	r2, r3
 8024164:	d001      	beq.n	802416a <lfs_pair_cmp+0x46>
 8024166:	2301      	movs	r3, #1
 8024168:	e000      	b.n	802416c <lfs_pair_cmp+0x48>
 802416a:	2300      	movs	r3, #0
}
 802416c:	4618      	mov	r0, r3
 802416e:	370c      	adds	r7, #12
 8024170:	46bd      	mov	sp, r7
 8024172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024176:	4770      	bx	lr

08024178 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8024178:	b480      	push	{r7}
 802417a:	b083      	sub	sp, #12
 802417c:	af00      	add	r7, sp, #0
 802417e:	6078      	str	r0, [r7, #4]
 8024180:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8024182:	687b      	ldr	r3, [r7, #4]
 8024184:	681a      	ldr	r2, [r3, #0]
 8024186:	683b      	ldr	r3, [r7, #0]
 8024188:	681b      	ldr	r3, [r3, #0]
 802418a:	429a      	cmp	r2, r3
 802418c:	d107      	bne.n	802419e <lfs_pair_sync+0x26>
 802418e:	687b      	ldr	r3, [r7, #4]
 8024190:	3304      	adds	r3, #4
 8024192:	681a      	ldr	r2, [r3, #0]
 8024194:	683b      	ldr	r3, [r7, #0]
 8024196:	3304      	adds	r3, #4
 8024198:	681b      	ldr	r3, [r3, #0]
 802419a:	429a      	cmp	r2, r3
 802419c:	d00d      	beq.n	80241ba <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 802419e:	687b      	ldr	r3, [r7, #4]
 80241a0:	681a      	ldr	r2, [r3, #0]
 80241a2:	683b      	ldr	r3, [r7, #0]
 80241a4:	3304      	adds	r3, #4
 80241a6:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80241a8:	429a      	cmp	r2, r3
 80241aa:	d108      	bne.n	80241be <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 80241ac:	687b      	ldr	r3, [r7, #4]
 80241ae:	3304      	adds	r3, #4
 80241b0:	681a      	ldr	r2, [r3, #0]
 80241b2:	683b      	ldr	r3, [r7, #0]
 80241b4:	681b      	ldr	r3, [r3, #0]
 80241b6:	429a      	cmp	r2, r3
 80241b8:	d101      	bne.n	80241be <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 80241ba:	2301      	movs	r3, #1
 80241bc:	e000      	b.n	80241c0 <lfs_pair_sync+0x48>
 80241be:	2300      	movs	r3, #0
 80241c0:	f003 0301 	and.w	r3, r3, #1
 80241c4:	b2db      	uxtb	r3, r3
}
 80241c6:	4618      	mov	r0, r3
 80241c8:	370c      	adds	r7, #12
 80241ca:	46bd      	mov	sp, r7
 80241cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80241d0:	4770      	bx	lr

080241d2 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 80241d2:	b590      	push	{r4, r7, lr}
 80241d4:	b083      	sub	sp, #12
 80241d6:	af00      	add	r7, sp, #0
 80241d8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	681b      	ldr	r3, [r3, #0]
 80241de:	4618      	mov	r0, r3
 80241e0:	f7ff fbe0 	bl	80239a4 <lfs_fromle32>
 80241e4:	4602      	mov	r2, r0
 80241e6:	687b      	ldr	r3, [r7, #4]
 80241e8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80241ea:	687b      	ldr	r3, [r7, #4]
 80241ec:	3304      	adds	r3, #4
 80241ee:	681a      	ldr	r2, [r3, #0]
 80241f0:	687b      	ldr	r3, [r7, #4]
 80241f2:	1d1c      	adds	r4, r3, #4
 80241f4:	4610      	mov	r0, r2
 80241f6:	f7ff fbd5 	bl	80239a4 <lfs_fromle32>
 80241fa:	4603      	mov	r3, r0
 80241fc:	6023      	str	r3, [r4, #0]
}
 80241fe:	bf00      	nop
 8024200:	370c      	adds	r7, #12
 8024202:	46bd      	mov	sp, r7
 8024204:	bd90      	pop	{r4, r7, pc}

08024206 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8024206:	b590      	push	{r4, r7, lr}
 8024208:	b083      	sub	sp, #12
 802420a:	af00      	add	r7, sp, #0
 802420c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 802420e:	687b      	ldr	r3, [r7, #4]
 8024210:	681b      	ldr	r3, [r3, #0]
 8024212:	4618      	mov	r0, r3
 8024214:	f7ff fbd1 	bl	80239ba <lfs_tole32>
 8024218:	4602      	mov	r2, r0
 802421a:	687b      	ldr	r3, [r7, #4]
 802421c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	3304      	adds	r3, #4
 8024222:	681a      	ldr	r2, [r3, #0]
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	1d1c      	adds	r4, r3, #4
 8024228:	4610      	mov	r0, r2
 802422a:	f7ff fbc6 	bl	80239ba <lfs_tole32>
 802422e:	4603      	mov	r3, r0
 8024230:	6023      	str	r3, [r4, #0]
}
 8024232:	bf00      	nop
 8024234:	370c      	adds	r7, #12
 8024236:	46bd      	mov	sp, r7
 8024238:	bd90      	pop	{r4, r7, pc}

0802423a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 802423a:	b480      	push	{r7}
 802423c:	b083      	sub	sp, #12
 802423e:	af00      	add	r7, sp, #0
 8024240:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8024242:	687b      	ldr	r3, [r7, #4]
 8024244:	43db      	mvns	r3, r3
 8024246:	0fdb      	lsrs	r3, r3, #31
 8024248:	b2db      	uxtb	r3, r3
}
 802424a:	4618      	mov	r0, r3
 802424c:	370c      	adds	r7, #12
 802424e:	46bd      	mov	sp, r7
 8024250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024254:	4770      	bx	lr

08024256 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8024256:	b480      	push	{r7}
 8024258:	b083      	sub	sp, #12
 802425a:	af00      	add	r7, sp, #0
 802425c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 802425e:	687b      	ldr	r3, [r7, #4]
 8024260:	059b      	lsls	r3, r3, #22
 8024262:	159b      	asrs	r3, r3, #22
 8024264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024268:	bf0c      	ite	eq
 802426a:	2301      	moveq	r3, #1
 802426c:	2300      	movne	r3, #0
 802426e:	b2db      	uxtb	r3, r3
}
 8024270:	4618      	mov	r0, r3
 8024272:	370c      	adds	r7, #12
 8024274:	46bd      	mov	sp, r7
 8024276:	f85d 7b04 	ldr.w	r7, [sp], #4
 802427a:	4770      	bx	lr

0802427c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 802427c:	b480      	push	{r7}
 802427e:	b083      	sub	sp, #12
 8024280:	af00      	add	r7, sp, #0
 8024282:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8024284:	687b      	ldr	r3, [r7, #4]
 8024286:	0d1b      	lsrs	r3, r3, #20
 8024288:	b29b      	uxth	r3, r3
 802428a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802428e:	b29b      	uxth	r3, r3
}
 8024290:	4618      	mov	r0, r3
 8024292:	370c      	adds	r7, #12
 8024294:	46bd      	mov	sp, r7
 8024296:	f85d 7b04 	ldr.w	r7, [sp], #4
 802429a:	4770      	bx	lr

0802429c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 802429c:	b480      	push	{r7}
 802429e:	b083      	sub	sp, #12
 80242a0:	af00      	add	r7, sp, #0
 80242a2:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80242a4:	687b      	ldr	r3, [r7, #4]
 80242a6:	0d1b      	lsrs	r3, r3, #20
 80242a8:	b29b      	uxth	r3, r3
 80242aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80242ae:	b29b      	uxth	r3, r3
}
 80242b0:	4618      	mov	r0, r3
 80242b2:	370c      	adds	r7, #12
 80242b4:	46bd      	mov	sp, r7
 80242b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242ba:	4770      	bx	lr

080242bc <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80242bc:	b480      	push	{r7}
 80242be:	b083      	sub	sp, #12
 80242c0:	af00      	add	r7, sp, #0
 80242c2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80242c4:	687b      	ldr	r3, [r7, #4]
 80242c6:	0d1b      	lsrs	r3, r3, #20
 80242c8:	b2db      	uxtb	r3, r3
}
 80242ca:	4618      	mov	r0, r3
 80242cc:	370c      	adds	r7, #12
 80242ce:	46bd      	mov	sp, r7
 80242d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242d4:	4770      	bx	lr

080242d6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 80242d6:	b580      	push	{r7, lr}
 80242d8:	b082      	sub	sp, #8
 80242da:	af00      	add	r7, sp, #0
 80242dc:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 80242de:	6878      	ldr	r0, [r7, #4]
 80242e0:	f7ff ffec 	bl	80242bc <lfs_tag_chunk>
 80242e4:	4603      	mov	r3, r0
 80242e6:	b25b      	sxtb	r3, r3
}
 80242e8:	4618      	mov	r0, r3
 80242ea:	3708      	adds	r7, #8
 80242ec:	46bd      	mov	sp, r7
 80242ee:	bd80      	pop	{r7, pc}

080242f0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80242f0:	b480      	push	{r7}
 80242f2:	b083      	sub	sp, #12
 80242f4:	af00      	add	r7, sp, #0
 80242f6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80242f8:	687b      	ldr	r3, [r7, #4]
 80242fa:	0a9b      	lsrs	r3, r3, #10
 80242fc:	b29b      	uxth	r3, r3
 80242fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8024302:	b29b      	uxth	r3, r3
}
 8024304:	4618      	mov	r0, r3
 8024306:	370c      	adds	r7, #12
 8024308:	46bd      	mov	sp, r7
 802430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802430e:	4770      	bx	lr

08024310 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8024310:	b480      	push	{r7}
 8024312:	b083      	sub	sp, #12
 8024314:	af00      	add	r7, sp, #0
 8024316:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8024318:	687b      	ldr	r3, [r7, #4]
 802431a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 802431e:	4618      	mov	r0, r3
 8024320:	370c      	adds	r7, #12
 8024322:	46bd      	mov	sp, r7
 8024324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024328:	4770      	bx	lr

0802432a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 802432a:	b580      	push	{r7, lr}
 802432c:	b082      	sub	sp, #8
 802432e:	af00      	add	r7, sp, #0
 8024330:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8024332:	6878      	ldr	r0, [r7, #4]
 8024334:	f7ff ff8f 	bl	8024256 <lfs_tag_isdelete>
 8024338:	4603      	mov	r3, r0
 802433a:	461a      	mov	r2, r3
 802433c:	687b      	ldr	r3, [r7, #4]
 802433e:	4413      	add	r3, r2
 8024340:	4618      	mov	r0, r3
 8024342:	f7ff ffe5 	bl	8024310 <lfs_tag_size>
 8024346:	4603      	mov	r3, r0
 8024348:	3304      	adds	r3, #4
}
 802434a:	4618      	mov	r0, r3
 802434c:	3708      	adds	r7, #8
 802434e:	46bd      	mov	sp, r7
 8024350:	bd80      	pop	{r7, pc}

08024352 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8024352:	b480      	push	{r7}
 8024354:	b085      	sub	sp, #20
 8024356:	af00      	add	r7, sp, #0
 8024358:	6078      	str	r0, [r7, #4]
 802435a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 802435c:	2300      	movs	r3, #0
 802435e:	60fb      	str	r3, [r7, #12]
 8024360:	e012      	b.n	8024388 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8024362:	68fb      	ldr	r3, [r7, #12]
 8024364:	009b      	lsls	r3, r3, #2
 8024366:	687a      	ldr	r2, [r7, #4]
 8024368:	4413      	add	r3, r2
 802436a:	6819      	ldr	r1, [r3, #0]
 802436c:	68fb      	ldr	r3, [r7, #12]
 802436e:	009b      	lsls	r3, r3, #2
 8024370:	683a      	ldr	r2, [r7, #0]
 8024372:	4413      	add	r3, r2
 8024374:	681a      	ldr	r2, [r3, #0]
 8024376:	68fb      	ldr	r3, [r7, #12]
 8024378:	009b      	lsls	r3, r3, #2
 802437a:	6878      	ldr	r0, [r7, #4]
 802437c:	4403      	add	r3, r0
 802437e:	404a      	eors	r2, r1
 8024380:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8024382:	68fb      	ldr	r3, [r7, #12]
 8024384:	3301      	adds	r3, #1
 8024386:	60fb      	str	r3, [r7, #12]
 8024388:	68fb      	ldr	r3, [r7, #12]
 802438a:	2b02      	cmp	r3, #2
 802438c:	dde9      	ble.n	8024362 <lfs_gstate_xor+0x10>
    }
}
 802438e:	bf00      	nop
 8024390:	bf00      	nop
 8024392:	3714      	adds	r7, #20
 8024394:	46bd      	mov	sp, r7
 8024396:	f85d 7b04 	ldr.w	r7, [sp], #4
 802439a:	4770      	bx	lr

0802439c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 802439c:	b480      	push	{r7}
 802439e:	b085      	sub	sp, #20
 80243a0:	af00      	add	r7, sp, #0
 80243a2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80243a4:	2300      	movs	r3, #0
 80243a6:	60fb      	str	r3, [r7, #12]
 80243a8:	e00b      	b.n	80243c2 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80243aa:	68fb      	ldr	r3, [r7, #12]
 80243ac:	009b      	lsls	r3, r3, #2
 80243ae:	687a      	ldr	r2, [r7, #4]
 80243b0:	4413      	add	r3, r2
 80243b2:	681b      	ldr	r3, [r3, #0]
 80243b4:	2b00      	cmp	r3, #0
 80243b6:	d001      	beq.n	80243bc <lfs_gstate_iszero+0x20>
            return false;
 80243b8:	2300      	movs	r3, #0
 80243ba:	e006      	b.n	80243ca <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80243bc:	68fb      	ldr	r3, [r7, #12]
 80243be:	3301      	adds	r3, #1
 80243c0:	60fb      	str	r3, [r7, #12]
 80243c2:	68fb      	ldr	r3, [r7, #12]
 80243c4:	2b02      	cmp	r3, #2
 80243c6:	ddf0      	ble.n	80243aa <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80243c8:	2301      	movs	r3, #1
}
 80243ca:	4618      	mov	r0, r3
 80243cc:	3714      	adds	r7, #20
 80243ce:	46bd      	mov	sp, r7
 80243d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80243d4:	4770      	bx	lr

080243d6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 80243d6:	b580      	push	{r7, lr}
 80243d8:	b082      	sub	sp, #8
 80243da:	af00      	add	r7, sp, #0
 80243dc:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80243de:	687b      	ldr	r3, [r7, #4]
 80243e0:	681b      	ldr	r3, [r3, #0]
 80243e2:	4618      	mov	r0, r3
 80243e4:	f7ff ff94 	bl	8024310 <lfs_tag_size>
 80243e8:	4603      	mov	r3, r0
 80243ea:	2b00      	cmp	r3, #0
 80243ec:	bf14      	ite	ne
 80243ee:	2301      	movne	r3, #1
 80243f0:	2300      	moveq	r3, #0
 80243f2:	b2db      	uxtb	r3, r3
}
 80243f4:	4618      	mov	r0, r3
 80243f6:	3708      	adds	r7, #8
 80243f8:	46bd      	mov	sp, r7
 80243fa:	bd80      	pop	{r7, pc}

080243fc <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80243fc:	b580      	push	{r7, lr}
 80243fe:	b082      	sub	sp, #8
 8024400:	af00      	add	r7, sp, #0
 8024402:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	681b      	ldr	r3, [r3, #0]
 8024408:	4618      	mov	r0, r3
 802440a:	f7ff ff81 	bl	8024310 <lfs_tag_size>
 802440e:	4603      	mov	r3, r0
 8024410:	b2db      	uxtb	r3, r3
}
 8024412:	4618      	mov	r0, r3
 8024414:	3708      	adds	r7, #8
 8024416:	46bd      	mov	sp, r7
 8024418:	bd80      	pop	{r7, pc}

0802441a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 802441a:	b580      	push	{r7, lr}
 802441c:	b082      	sub	sp, #8
 802441e:	af00      	add	r7, sp, #0
 8024420:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8024422:	687b      	ldr	r3, [r7, #4]
 8024424:	681b      	ldr	r3, [r3, #0]
 8024426:	4618      	mov	r0, r3
 8024428:	f7ff ff28 	bl	802427c <lfs_tag_type1>
 802442c:	4603      	mov	r3, r0
 802442e:	2b00      	cmp	r3, #0
 8024430:	bf14      	ite	ne
 8024432:	2301      	movne	r3, #1
 8024434:	2300      	moveq	r3, #0
 8024436:	b2db      	uxtb	r3, r3
}
 8024438:	4618      	mov	r0, r3
 802443a:	3708      	adds	r7, #8
 802443c:	46bd      	mov	sp, r7
 802443e:	bd80      	pop	{r7, pc}

08024440 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8024440:	b580      	push	{r7, lr}
 8024442:	b082      	sub	sp, #8
 8024444:	af00      	add	r7, sp, #0
 8024446:	6078      	str	r0, [r7, #4]
 8024448:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 802444a:	687b      	ldr	r3, [r7, #4]
 802444c:	681b      	ldr	r3, [r3, #0]
 802444e:	4618      	mov	r0, r3
 8024450:	f7ff ff14 	bl	802427c <lfs_tag_type1>
 8024454:	4603      	mov	r3, r0
 8024456:	2b00      	cmp	r3, #0
 8024458:	d00a      	beq.n	8024470 <lfs_gstate_hasmovehere+0x30>
 802445a:	687b      	ldr	r3, [r7, #4]
 802445c:	3304      	adds	r3, #4
 802445e:	6839      	ldr	r1, [r7, #0]
 8024460:	4618      	mov	r0, r3
 8024462:	f7ff fe5f 	bl	8024124 <lfs_pair_cmp>
 8024466:	4603      	mov	r3, r0
 8024468:	2b00      	cmp	r3, #0
 802446a:	d101      	bne.n	8024470 <lfs_gstate_hasmovehere+0x30>
 802446c:	2301      	movs	r3, #1
 802446e:	e000      	b.n	8024472 <lfs_gstate_hasmovehere+0x32>
 8024470:	2300      	movs	r3, #0
 8024472:	f003 0301 	and.w	r3, r3, #1
 8024476:	b2db      	uxtb	r3, r3
}
 8024478:	4618      	mov	r0, r3
 802447a:	3708      	adds	r7, #8
 802447c:	46bd      	mov	sp, r7
 802447e:	bd80      	pop	{r7, pc}

08024480 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8024480:	b580      	push	{r7, lr}
 8024482:	b082      	sub	sp, #8
 8024484:	af00      	add	r7, sp, #0
 8024486:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	681b      	ldr	r3, [r3, #0]
 802448c:	4618      	mov	r0, r3
 802448e:	f7ff fa89 	bl	80239a4 <lfs_fromle32>
 8024492:	4602      	mov	r2, r0
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	685b      	ldr	r3, [r3, #4]
 802449c:	4618      	mov	r0, r3
 802449e:	f7ff fa81 	bl	80239a4 <lfs_fromle32>
 80244a2:	4602      	mov	r2, r0
 80244a4:	687b      	ldr	r3, [r7, #4]
 80244a6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80244a8:	687b      	ldr	r3, [r7, #4]
 80244aa:	689b      	ldr	r3, [r3, #8]
 80244ac:	4618      	mov	r0, r3
 80244ae:	f7ff fa79 	bl	80239a4 <lfs_fromle32>
 80244b2:	4602      	mov	r2, r0
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	609a      	str	r2, [r3, #8]
}
 80244b8:	bf00      	nop
 80244ba:	3708      	adds	r7, #8
 80244bc:	46bd      	mov	sp, r7
 80244be:	bd80      	pop	{r7, pc}

080244c0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80244c0:	b580      	push	{r7, lr}
 80244c2:	b082      	sub	sp, #8
 80244c4:	af00      	add	r7, sp, #0
 80244c6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80244c8:	687b      	ldr	r3, [r7, #4]
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	4618      	mov	r0, r3
 80244ce:	f7ff fa74 	bl	80239ba <lfs_tole32>
 80244d2:	4602      	mov	r2, r0
 80244d4:	687b      	ldr	r3, [r7, #4]
 80244d6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80244d8:	687b      	ldr	r3, [r7, #4]
 80244da:	685b      	ldr	r3, [r3, #4]
 80244dc:	4618      	mov	r0, r3
 80244de:	f7ff fa6c 	bl	80239ba <lfs_tole32>
 80244e2:	4602      	mov	r2, r0
 80244e4:	687b      	ldr	r3, [r7, #4]
 80244e6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80244e8:	687b      	ldr	r3, [r7, #4]
 80244ea:	689b      	ldr	r3, [r3, #8]
 80244ec:	4618      	mov	r0, r3
 80244ee:	f7ff fa64 	bl	80239ba <lfs_tole32>
 80244f2:	4602      	mov	r2, r0
 80244f4:	687b      	ldr	r3, [r7, #4]
 80244f6:	609a      	str	r2, [r3, #8]
}
 80244f8:	bf00      	nop
 80244fa:	3708      	adds	r7, #8
 80244fc:	46bd      	mov	sp, r7
 80244fe:	bd80      	pop	{r7, pc}

08024500 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8024500:	b580      	push	{r7, lr}
 8024502:	b082      	sub	sp, #8
 8024504:	af00      	add	r7, sp, #0
 8024506:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8024508:	687b      	ldr	r3, [r7, #4]
 802450a:	681b      	ldr	r3, [r3, #0]
 802450c:	4618      	mov	r0, r3
 802450e:	f7ff fa49 	bl	80239a4 <lfs_fromle32>
 8024512:	4602      	mov	r2, r0
 8024514:	687b      	ldr	r3, [r7, #4]
 8024516:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8024518:	687b      	ldr	r3, [r7, #4]
 802451a:	685b      	ldr	r3, [r3, #4]
 802451c:	4618      	mov	r0, r3
 802451e:	f7ff fa41 	bl	80239a4 <lfs_fromle32>
 8024522:	4602      	mov	r2, r0
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	605a      	str	r2, [r3, #4]
}
 8024528:	bf00      	nop
 802452a:	3708      	adds	r7, #8
 802452c:	46bd      	mov	sp, r7
 802452e:	bd80      	pop	{r7, pc}

08024530 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8024530:	b580      	push	{r7, lr}
 8024532:	b082      	sub	sp, #8
 8024534:	af00      	add	r7, sp, #0
 8024536:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8024538:	687b      	ldr	r3, [r7, #4]
 802453a:	681b      	ldr	r3, [r3, #0]
 802453c:	4618      	mov	r0, r3
 802453e:	f7ff fa3c 	bl	80239ba <lfs_tole32>
 8024542:	4602      	mov	r2, r0
 8024544:	687b      	ldr	r3, [r7, #4]
 8024546:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	685b      	ldr	r3, [r3, #4]
 802454c:	4618      	mov	r0, r3
 802454e:	f7ff fa34 	bl	80239ba <lfs_tole32>
 8024552:	4602      	mov	r2, r0
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	605a      	str	r2, [r3, #4]
}
 8024558:	bf00      	nop
 802455a:	3708      	adds	r7, #8
 802455c:	46bd      	mov	sp, r7
 802455e:	bd80      	pop	{r7, pc}

08024560 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8024560:	b580      	push	{r7, lr}
 8024562:	b082      	sub	sp, #8
 8024564:	af00      	add	r7, sp, #0
 8024566:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8024568:	687b      	ldr	r3, [r7, #4]
 802456a:	681b      	ldr	r3, [r3, #0]
 802456c:	4618      	mov	r0, r3
 802456e:	f7ff fa19 	bl	80239a4 <lfs_fromle32>
 8024572:	4602      	mov	r2, r0
 8024574:	687b      	ldr	r3, [r7, #4]
 8024576:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	685b      	ldr	r3, [r3, #4]
 802457c:	4618      	mov	r0, r3
 802457e:	f7ff fa11 	bl	80239a4 <lfs_fromle32>
 8024582:	4602      	mov	r2, r0
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8024588:	687b      	ldr	r3, [r7, #4]
 802458a:	689b      	ldr	r3, [r3, #8]
 802458c:	4618      	mov	r0, r3
 802458e:	f7ff fa09 	bl	80239a4 <lfs_fromle32>
 8024592:	4602      	mov	r2, r0
 8024594:	687b      	ldr	r3, [r7, #4]
 8024596:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	68db      	ldr	r3, [r3, #12]
 802459c:	4618      	mov	r0, r3
 802459e:	f7ff fa01 	bl	80239a4 <lfs_fromle32>
 80245a2:	4602      	mov	r2, r0
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80245a8:	687b      	ldr	r3, [r7, #4]
 80245aa:	691b      	ldr	r3, [r3, #16]
 80245ac:	4618      	mov	r0, r3
 80245ae:	f7ff f9f9 	bl	80239a4 <lfs_fromle32>
 80245b2:	4602      	mov	r2, r0
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80245b8:	687b      	ldr	r3, [r7, #4]
 80245ba:	695b      	ldr	r3, [r3, #20]
 80245bc:	4618      	mov	r0, r3
 80245be:	f7ff f9f1 	bl	80239a4 <lfs_fromle32>
 80245c2:	4602      	mov	r2, r0
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	615a      	str	r2, [r3, #20]
}
 80245c8:	bf00      	nop
 80245ca:	3708      	adds	r7, #8
 80245cc:	46bd      	mov	sp, r7
 80245ce:	bd80      	pop	{r7, pc}

080245d0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80245d0:	b580      	push	{r7, lr}
 80245d2:	b082      	sub	sp, #8
 80245d4:	af00      	add	r7, sp, #0
 80245d6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80245d8:	687b      	ldr	r3, [r7, #4]
 80245da:	681b      	ldr	r3, [r3, #0]
 80245dc:	4618      	mov	r0, r3
 80245de:	f7ff f9ec 	bl	80239ba <lfs_tole32>
 80245e2:	4602      	mov	r2, r0
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80245e8:	687b      	ldr	r3, [r7, #4]
 80245ea:	685b      	ldr	r3, [r3, #4]
 80245ec:	4618      	mov	r0, r3
 80245ee:	f7ff f9e4 	bl	80239ba <lfs_tole32>
 80245f2:	4602      	mov	r2, r0
 80245f4:	687b      	ldr	r3, [r7, #4]
 80245f6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80245f8:	687b      	ldr	r3, [r7, #4]
 80245fa:	689b      	ldr	r3, [r3, #8]
 80245fc:	4618      	mov	r0, r3
 80245fe:	f7ff f9dc 	bl	80239ba <lfs_tole32>
 8024602:	4602      	mov	r2, r0
 8024604:	687b      	ldr	r3, [r7, #4]
 8024606:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8024608:	687b      	ldr	r3, [r7, #4]
 802460a:	68db      	ldr	r3, [r3, #12]
 802460c:	4618      	mov	r0, r3
 802460e:	f7ff f9d4 	bl	80239ba <lfs_tole32>
 8024612:	4602      	mov	r2, r0
 8024614:	687b      	ldr	r3, [r7, #4]
 8024616:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8024618:	687b      	ldr	r3, [r7, #4]
 802461a:	691b      	ldr	r3, [r3, #16]
 802461c:	4618      	mov	r0, r3
 802461e:	f7ff f9cc 	bl	80239ba <lfs_tole32>
 8024622:	4602      	mov	r2, r0
 8024624:	687b      	ldr	r3, [r7, #4]
 8024626:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8024628:	687b      	ldr	r3, [r7, #4]
 802462a:	695b      	ldr	r3, [r3, #20]
 802462c:	4618      	mov	r0, r3
 802462e:	f7ff f9c4 	bl	80239ba <lfs_tole32>
 8024632:	4602      	mov	r2, r0
 8024634:	687b      	ldr	r3, [r7, #4]
 8024636:	615a      	str	r2, [r3, #20]
}
 8024638:	bf00      	nop
 802463a:	3708      	adds	r7, #8
 802463c:	46bd      	mov	sp, r7
 802463e:	bd80      	pop	{r7, pc}

08024640 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8024640:	b480      	push	{r7}
 8024642:	b085      	sub	sp, #20
 8024644:	af00      	add	r7, sp, #0
 8024646:	6078      	str	r0, [r7, #4]
 8024648:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802464a:	1d3b      	adds	r3, r7, #4
 802464c:	60fb      	str	r3, [r7, #12]
 802464e:	e009      	b.n	8024664 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8024650:	68fb      	ldr	r3, [r7, #12]
 8024652:	681b      	ldr	r3, [r3, #0]
 8024654:	683a      	ldr	r2, [r7, #0]
 8024656:	429a      	cmp	r2, r3
 8024658:	d101      	bne.n	802465e <lfs_mlist_isopen+0x1e>
            return true;
 802465a:	2301      	movs	r3, #1
 802465c:	e007      	b.n	802466e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802465e:	68fb      	ldr	r3, [r7, #12]
 8024660:	681b      	ldr	r3, [r3, #0]
 8024662:	60fb      	str	r3, [r7, #12]
 8024664:	68fb      	ldr	r3, [r7, #12]
 8024666:	681b      	ldr	r3, [r3, #0]
 8024668:	2b00      	cmp	r3, #0
 802466a:	d1f1      	bne.n	8024650 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 802466c:	2300      	movs	r3, #0
}
 802466e:	4618      	mov	r0, r3
 8024670:	3714      	adds	r7, #20
 8024672:	46bd      	mov	sp, r7
 8024674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024678:	4770      	bx	lr

0802467a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 802467a:	b480      	push	{r7}
 802467c:	b085      	sub	sp, #20
 802467e:	af00      	add	r7, sp, #0
 8024680:	6078      	str	r0, [r7, #4]
 8024682:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024684:	687b      	ldr	r3, [r7, #4]
 8024686:	3328      	adds	r3, #40	; 0x28
 8024688:	60fb      	str	r3, [r7, #12]
 802468a:	e00d      	b.n	80246a8 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 802468c:	68fb      	ldr	r3, [r7, #12]
 802468e:	681b      	ldr	r3, [r3, #0]
 8024690:	683a      	ldr	r2, [r7, #0]
 8024692:	429a      	cmp	r2, r3
 8024694:	d105      	bne.n	80246a2 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8024696:	68fb      	ldr	r3, [r7, #12]
 8024698:	681b      	ldr	r3, [r3, #0]
 802469a:	681a      	ldr	r2, [r3, #0]
 802469c:	68fb      	ldr	r3, [r7, #12]
 802469e:	601a      	str	r2, [r3, #0]
            break;
 80246a0:	e007      	b.n	80246b2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80246a2:	68fb      	ldr	r3, [r7, #12]
 80246a4:	681b      	ldr	r3, [r3, #0]
 80246a6:	60fb      	str	r3, [r7, #12]
 80246a8:	68fb      	ldr	r3, [r7, #12]
 80246aa:	681b      	ldr	r3, [r3, #0]
 80246ac:	2b00      	cmp	r3, #0
 80246ae:	d1ed      	bne.n	802468c <lfs_mlist_remove+0x12>
        }
    }
}
 80246b0:	bf00      	nop
 80246b2:	bf00      	nop
 80246b4:	3714      	adds	r7, #20
 80246b6:	46bd      	mov	sp, r7
 80246b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246bc:	4770      	bx	lr

080246be <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80246be:	b480      	push	{r7}
 80246c0:	b083      	sub	sp, #12
 80246c2:	af00      	add	r7, sp, #0
 80246c4:	6078      	str	r0, [r7, #4]
 80246c6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80246c8:	687b      	ldr	r3, [r7, #4]
 80246ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80246cc:	683b      	ldr	r3, [r7, #0]
 80246ce:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80246d0:	687b      	ldr	r3, [r7, #4]
 80246d2:	683a      	ldr	r2, [r7, #0]
 80246d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80246d6:	bf00      	nop
 80246d8:	370c      	adds	r7, #12
 80246da:	46bd      	mov	sp, r7
 80246dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246e0:	4770      	bx	lr

080246e2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80246e2:	b480      	push	{r7}
 80246e4:	b085      	sub	sp, #20
 80246e6:	af00      	add	r7, sp, #0
 80246e8:	6078      	str	r0, [r7, #4]
 80246ea:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80246ec:	687b      	ldr	r3, [r7, #4]
 80246ee:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80246f0:	68fb      	ldr	r3, [r7, #12]
 80246f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80246f4:	683a      	ldr	r2, [r7, #0]
 80246f6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80246f8:	68fb      	ldr	r3, [r7, #12]
 80246fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80246fc:	6a1b      	ldr	r3, [r3, #32]
 80246fe:	4413      	add	r3, r2
 8024700:	68fa      	ldr	r2, [r7, #12]
 8024702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8024704:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8024706:	fbb3 f1f2 	udiv	r1, r3, r2
 802470a:	fb01 f202 	mul.w	r2, r1, r2
 802470e:	1a9b      	subs	r3, r3, r2
 8024710:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8024712:	68fb      	ldr	r3, [r7, #12]
 8024714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024716:	68ba      	ldr	r2, [r7, #8]
 8024718:	429a      	cmp	r2, r3
 802471a:	d212      	bcs.n	8024742 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 802471c:	68fb      	ldr	r3, [r7, #12]
 802471e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8024720:	68bb      	ldr	r3, [r7, #8]
 8024722:	095b      	lsrs	r3, r3, #5
 8024724:	009a      	lsls	r2, r3, #2
 8024726:	440a      	add	r2, r1
 8024728:	6811      	ldr	r1, [r2, #0]
 802472a:	68ba      	ldr	r2, [r7, #8]
 802472c:	f002 021f 	and.w	r2, r2, #31
 8024730:	2001      	movs	r0, #1
 8024732:	fa00 f202 	lsl.w	r2, r0, r2
 8024736:	68f8      	ldr	r0, [r7, #12]
 8024738:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802473a:	009b      	lsls	r3, r3, #2
 802473c:	4403      	add	r3, r0
 802473e:	430a      	orrs	r2, r1
 8024740:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8024742:	2300      	movs	r3, #0
}
 8024744:	4618      	mov	r0, r3
 8024746:	3714      	adds	r7, #20
 8024748:	46bd      	mov	sp, r7
 802474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802474e:	4770      	bx	lr

08024750 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024750:	b480      	push	{r7}
 8024752:	b083      	sub	sp, #12
 8024754:	af00      	add	r7, sp, #0
 8024756:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802475c:	6a1a      	ldr	r2, [r3, #32]
 802475e:	687b      	ldr	r3, [r7, #4]
 8024760:	661a      	str	r2, [r3, #96]	; 0x60
}
 8024762:	bf00      	nop
 8024764:	370c      	adds	r7, #12
 8024766:	46bd      	mov	sp, r7
 8024768:	f85d 7b04 	ldr.w	r7, [sp], #4
 802476c:	4770      	bx	lr

0802476e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 802476e:	b580      	push	{r7, lr}
 8024770:	b082      	sub	sp, #8
 8024772:	af00      	add	r7, sp, #0
 8024774:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	2200      	movs	r2, #0
 802477a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	2200      	movs	r2, #0
 8024780:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8024782:	6878      	ldr	r0, [r7, #4]
 8024784:	f7ff ffe4 	bl	8024750 <lfs_alloc_ack>
}
 8024788:	bf00      	nop
 802478a:	3708      	adds	r7, #8
 802478c:	46bd      	mov	sp, r7
 802478e:	bd80      	pop	{r7, pc}

08024790 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8024790:	b580      	push	{r7, lr}
 8024792:	b086      	sub	sp, #24
 8024794:	af02      	add	r7, sp, #8
 8024796:	6078      	str	r0, [r7, #4]
 8024798:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 802479a:	e04f      	b.n	802483c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 802479c:	687b      	ldr	r3, [r7, #4]
 802479e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80247a0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80247a2:	687b      	ldr	r3, [r7, #4]
 80247a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80247a6:	1c5a      	adds	r2, r3, #1
 80247a8:	687b      	ldr	r3, [r7, #4]
 80247aa:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80247ac:	687b      	ldr	r3, [r7, #4]
 80247ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80247b0:	1e5a      	subs	r2, r3, #1
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80247b6:	687b      	ldr	r3, [r7, #4]
 80247b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80247ba:	68bb      	ldr	r3, [r7, #8]
 80247bc:	095b      	lsrs	r3, r3, #5
 80247be:	009b      	lsls	r3, r3, #2
 80247c0:	4413      	add	r3, r2
 80247c2:	681a      	ldr	r2, [r3, #0]
 80247c4:	68bb      	ldr	r3, [r7, #8]
 80247c6:	f003 031f 	and.w	r3, r3, #31
 80247ca:	2101      	movs	r1, #1
 80247cc:	fa01 f303 	lsl.w	r3, r1, r3
 80247d0:	4013      	ands	r3, r2
 80247d2:	2b00      	cmp	r3, #0
 80247d4:	d132      	bne.n	802483c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80247d6:	687b      	ldr	r3, [r7, #4]
 80247d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80247da:	68bb      	ldr	r3, [r7, #8]
 80247dc:	4413      	add	r3, r2
 80247de:	687a      	ldr	r2, [r7, #4]
 80247e0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80247e2:	6a12      	ldr	r2, [r2, #32]
 80247e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80247e8:	fb01 f202 	mul.w	r2, r1, r2
 80247ec:	1a9a      	subs	r2, r3, r2
 80247ee:	683b      	ldr	r3, [r7, #0]
 80247f0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80247f2:	e009      	b.n	8024808 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80247f4:	687b      	ldr	r3, [r7, #4]
 80247f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80247f8:	1c5a      	adds	r2, r3, #1
 80247fa:	687b      	ldr	r3, [r7, #4]
 80247fc:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80247fe:	687b      	ldr	r3, [r7, #4]
 8024800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024802:	1e5a      	subs	r2, r3, #1
 8024804:	687b      	ldr	r3, [r7, #4]
 8024806:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8024808:	687b      	ldr	r3, [r7, #4]
 802480a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802480c:	687b      	ldr	r3, [r7, #4]
 802480e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024810:	429a      	cmp	r2, r3
 8024812:	d011      	beq.n	8024838 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8024814:	687b      	ldr	r3, [r7, #4]
 8024816:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8024818:	687b      	ldr	r3, [r7, #4]
 802481a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802481c:	095b      	lsrs	r3, r3, #5
 802481e:	009b      	lsls	r3, r3, #2
 8024820:	4413      	add	r3, r2
 8024822:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8024824:	687b      	ldr	r3, [r7, #4]
 8024826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024828:	f003 031f 	and.w	r3, r3, #31
 802482c:	2101      	movs	r1, #1
 802482e:	fa01 f303 	lsl.w	r3, r1, r3
 8024832:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8024834:	2b00      	cmp	r3, #0
 8024836:	d1dd      	bne.n	80247f4 <lfs_alloc+0x64>
                }

                return 0;
 8024838:	2300      	movs	r3, #0
 802483a:	e050      	b.n	80248de <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 802483c:	687b      	ldr	r3, [r7, #4]
 802483e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024840:	687b      	ldr	r3, [r7, #4]
 8024842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024844:	429a      	cmp	r2, r3
 8024846:	d1a9      	bne.n	802479c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8024848:	687b      	ldr	r3, [r7, #4]
 802484a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802484c:	2b00      	cmp	r3, #0
 802484e:	d10f      	bne.n	8024870 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024850:	687b      	ldr	r3, [r7, #4]
 8024852:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024858:	4413      	add	r3, r2
 802485a:	4a23      	ldr	r2, [pc, #140]	; (80248e8 <lfs_alloc+0x158>)
 802485c:	9200      	str	r2, [sp, #0]
 802485e:	f240 2247 	movw	r2, #583	; 0x247
 8024862:	4922      	ldr	r1, [pc, #136]	; (80248ec <lfs_alloc+0x15c>)
 8024864:	4822      	ldr	r0, [pc, #136]	; (80248f0 <lfs_alloc+0x160>)
 8024866:	f008 ffab 	bl	802d7c0 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 802486a:	f06f 031b 	mvn.w	r3, #27
 802486e:	e036      	b.n	80248de <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024870:	687b      	ldr	r3, [r7, #4]
 8024872:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024874:	687b      	ldr	r3, [r7, #4]
 8024876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024878:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 802487a:	687a      	ldr	r2, [r7, #4]
 802487c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802487e:	6a12      	ldr	r2, [r2, #32]
 8024880:	fbb3 f1f2 	udiv	r1, r3, r2
 8024884:	fb01 f202 	mul.w	r2, r1, r2
 8024888:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 802488a:	687b      	ldr	r3, [r7, #4]
 802488c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 802488e:	687b      	ldr	r3, [r7, #4]
 8024890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024894:	00da      	lsls	r2, r3, #3
 8024896:	687b      	ldr	r3, [r7, #4]
 8024898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802489a:	4619      	mov	r1, r3
 802489c:	4610      	mov	r0, r2
 802489e:	f7ff f811 	bl	80238c4 <lfs_min>
 80248a2:	4602      	mov	r2, r0
 80248a4:	687b      	ldr	r3, [r7, #4]
 80248a6:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80248a8:	687b      	ldr	r3, [r7, #4]
 80248aa:	2200      	movs	r2, #0
 80248ac:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80248ae:	687b      	ldr	r3, [r7, #4]
 80248b0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80248b2:	687b      	ldr	r3, [r7, #4]
 80248b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80248b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80248b8:	461a      	mov	r2, r3
 80248ba:	2100      	movs	r1, #0
 80248bc:	f009 f916 	bl	802daec <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80248c0:	2301      	movs	r3, #1
 80248c2:	687a      	ldr	r2, [r7, #4]
 80248c4:	490b      	ldr	r1, [pc, #44]	; (80248f4 <lfs_alloc+0x164>)
 80248c6:	6878      	ldr	r0, [r7, #4]
 80248c8:	f005 fb3e 	bl	8029f48 <lfs_fs_rawtraverse>
 80248cc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80248ce:	68fb      	ldr	r3, [r7, #12]
 80248d0:	2b00      	cmp	r3, #0
 80248d2:	f43f af62 	beq.w	802479a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 80248d6:	6878      	ldr	r0, [r7, #4]
 80248d8:	f7ff ff49 	bl	802476e <lfs_alloc_drop>
            return err;
 80248dc:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80248de:	4618      	mov	r0, r3
 80248e0:	3710      	adds	r7, #16
 80248e2:	46bd      	mov	sp, r7
 80248e4:	bd80      	pop	{r7, pc}
 80248e6:	bf00      	nop
 80248e8:	08033954 	.word	0x08033954
 80248ec:	08033840 	.word	0x08033840
 80248f0:	0803392c 	.word	0x0803392c
 80248f4:	080246e3 	.word	0x080246e3

080248f8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80248f8:	b590      	push	{r4, r7, lr}
 80248fa:	b08f      	sub	sp, #60	; 0x3c
 80248fc:	af04      	add	r7, sp, #16
 80248fe:	60f8      	str	r0, [r7, #12]
 8024900:	60b9      	str	r1, [r7, #8]
 8024902:	607a      	str	r2, [r7, #4]
 8024904:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8024906:	68bb      	ldr	r3, [r7, #8]
 8024908:	68db      	ldr	r3, [r3, #12]
 802490a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 802490c:	68bb      	ldr	r3, [r7, #8]
 802490e:	691b      	ldr	r3, [r3, #16]
 8024910:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8024912:	2300      	movs	r3, #0
 8024914:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024916:	68fb      	ldr	r3, [r7, #12]
 8024918:	333c      	adds	r3, #60	; 0x3c
 802491a:	68ba      	ldr	r2, [r7, #8]
 802491c:	4611      	mov	r1, r2
 802491e:	4618      	mov	r0, r3
 8024920:	f7ff fd8e 	bl	8024440 <lfs_gstate_hasmovehere>
 8024924:	4603      	mov	r3, r0
 8024926:	2b00      	cmp	r3, #0
 8024928:	f000 80ba 	beq.w	8024aa0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 802492c:	6878      	ldr	r0, [r7, #4]
 802492e:	f7ff fcdf 	bl	80242f0 <lfs_tag_id>
 8024932:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024934:	2b00      	cmp	r3, #0
 8024936:	f000 80b3 	beq.w	8024aa0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 802493a:	68fb      	ldr	r3, [r7, #12]
 802493c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802493e:	4618      	mov	r0, r3
 8024940:	f7ff fcd6 	bl	80242f0 <lfs_tag_id>
 8024944:	4603      	mov	r3, r0
 8024946:	461c      	mov	r4, r3
 8024948:	6838      	ldr	r0, [r7, #0]
 802494a:	f7ff fcd1 	bl	80242f0 <lfs_tag_id>
 802494e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024950:	429c      	cmp	r4, r3
 8024952:	f200 80a5 	bhi.w	8024aa0 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024956:	6a3b      	ldr	r3, [r7, #32]
 8024958:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802495c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 802495e:	e09f      	b.n	8024aa0 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8024960:	693b      	ldr	r3, [r7, #16]
 8024962:	4618      	mov	r0, r3
 8024964:	f7ff fce1 	bl	802432a <lfs_tag_dsize>
 8024968:	4602      	mov	r2, r0
 802496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802496c:	1a9b      	subs	r3, r3, r2
 802496e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8024970:	693b      	ldr	r3, [r7, #16]
 8024972:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8024974:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8024976:	68bb      	ldr	r3, [r7, #8]
 8024978:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 802497a:	2204      	movs	r2, #4
 802497c:	9203      	str	r2, [sp, #12]
 802497e:	f107 0210 	add.w	r2, r7, #16
 8024982:	9202      	str	r2, [sp, #8]
 8024984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024986:	9201      	str	r2, [sp, #4]
 8024988:	9300      	str	r3, [sp, #0]
 802498a:	2304      	movs	r3, #4
 802498c:	460a      	mov	r2, r1
 802498e:	2100      	movs	r1, #0
 8024990:	68f8      	ldr	r0, [r7, #12]
 8024992:	f7ff f873 	bl	8023a7c <lfs_bd_read>
 8024996:	61b8      	str	r0, [r7, #24]
        if (err) {
 8024998:	69bb      	ldr	r3, [r7, #24]
 802499a:	2b00      	cmp	r3, #0
 802499c:	d001      	beq.n	80249a2 <lfs_dir_getslice+0xaa>
            return err;
 802499e:	69bb      	ldr	r3, [r7, #24]
 80249a0:	e08a      	b.n	8024ab8 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80249a2:	693b      	ldr	r3, [r7, #16]
 80249a4:	4618      	mov	r0, r3
 80249a6:	f7ff f814 	bl	80239d2 <lfs_frombe32>
 80249aa:	4602      	mov	r2, r0
 80249ac:	69fb      	ldr	r3, [r7, #28]
 80249ae:	4053      	eors	r3, r2
 80249b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80249b4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80249b6:	6878      	ldr	r0, [r7, #4]
 80249b8:	f7ff fc9a 	bl	80242f0 <lfs_tag_id>
 80249bc:	4603      	mov	r3, r0
 80249be:	2b00      	cmp	r3, #0
 80249c0:	d02b      	beq.n	8024a1a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80249c2:	69f8      	ldr	r0, [r7, #28]
 80249c4:	f7ff fc5a 	bl	802427c <lfs_tag_type1>
 80249c8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80249ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80249ce:	d124      	bne.n	8024a1a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80249d0:	69f8      	ldr	r0, [r7, #28]
 80249d2:	f7ff fc8d 	bl	80242f0 <lfs_tag_id>
 80249d6:	4603      	mov	r3, r0
 80249d8:	461c      	mov	r4, r3
 80249da:	6a3b      	ldr	r3, [r7, #32]
 80249dc:	683a      	ldr	r2, [r7, #0]
 80249de:	1ad3      	subs	r3, r2, r3
 80249e0:	4618      	mov	r0, r3
 80249e2:	f7ff fc85 	bl	80242f0 <lfs_tag_id>
 80249e6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80249e8:	429c      	cmp	r4, r3
 80249ea:	d816      	bhi.n	8024a1a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80249ec:	6a3b      	ldr	r3, [r7, #32]
 80249ee:	683a      	ldr	r2, [r7, #0]
 80249f0:	1ad2      	subs	r2, r2, r3
 80249f2:	4b33      	ldr	r3, [pc, #204]	; (8024ac0 <lfs_dir_getslice+0x1c8>)
 80249f4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80249f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80249fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80249fe:	69fa      	ldr	r2, [r7, #28]
 8024a00:	429a      	cmp	r2, r3
 8024a02:	d102      	bne.n	8024a0a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8024a04:	f06f 0301 	mvn.w	r3, #1
 8024a08:	e056      	b.n	8024ab8 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8024a0a:	69f8      	ldr	r0, [r7, #28]
 8024a0c:	f7ff fc63 	bl	80242d6 <lfs_tag_splice>
 8024a10:	4603      	mov	r3, r0
 8024a12:	029a      	lsls	r2, r3, #10
 8024a14:	6a3b      	ldr	r3, [r7, #32]
 8024a16:	4413      	add	r3, r2
 8024a18:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8024a1a:	687a      	ldr	r2, [r7, #4]
 8024a1c:	69fb      	ldr	r3, [r7, #28]
 8024a1e:	401a      	ands	r2, r3
 8024a20:	6a3b      	ldr	r3, [r7, #32]
 8024a22:	6839      	ldr	r1, [r7, #0]
 8024a24:	1ac9      	subs	r1, r1, r3
 8024a26:	687b      	ldr	r3, [r7, #4]
 8024a28:	400b      	ands	r3, r1
 8024a2a:	429a      	cmp	r2, r3
 8024a2c:	d138      	bne.n	8024aa0 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 8024a2e:	69f8      	ldr	r0, [r7, #28]
 8024a30:	f7ff fc11 	bl	8024256 <lfs_tag_isdelete>
 8024a34:	4603      	mov	r3, r0
 8024a36:	2b00      	cmp	r3, #0
 8024a38:	d002      	beq.n	8024a40 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 8024a3a:	f06f 0301 	mvn.w	r3, #1
 8024a3e:	e03b      	b.n	8024ab8 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8024a40:	69f8      	ldr	r0, [r7, #28]
 8024a42:	f7ff fc65 	bl	8024310 <lfs_tag_size>
 8024a46:	4603      	mov	r3, r0
 8024a48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8024a4a:	4618      	mov	r0, r3
 8024a4c:	f7fe ff3a 	bl	80238c4 <lfs_min>
 8024a50:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024a52:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024a54:	68bb      	ldr	r3, [r7, #8]
 8024a56:	681b      	ldr	r3, [r3, #0]
 8024a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024a5c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8024a5e:	3204      	adds	r2, #4
 8024a60:	6979      	ldr	r1, [r7, #20]
 8024a62:	9103      	str	r1, [sp, #12]
 8024a64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8024a66:	9102      	str	r1, [sp, #8]
 8024a68:	9201      	str	r2, [sp, #4]
 8024a6a:	9300      	str	r3, [sp, #0]
 8024a6c:	697b      	ldr	r3, [r7, #20]
 8024a6e:	4602      	mov	r2, r0
 8024a70:	2100      	movs	r1, #0
 8024a72:	68f8      	ldr	r0, [r7, #12]
 8024a74:	f7ff f802 	bl	8023a7c <lfs_bd_read>
 8024a78:	61b8      	str	r0, [r7, #24]
            if (err) {
 8024a7a:	69bb      	ldr	r3, [r7, #24]
 8024a7c:	2b00      	cmp	r3, #0
 8024a7e:	d001      	beq.n	8024a84 <lfs_dir_getslice+0x18c>
                return err;
 8024a80:	69bb      	ldr	r3, [r7, #24]
 8024a82:	e019      	b.n	8024ab8 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8024a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024a86:	697b      	ldr	r3, [r7, #20]
 8024a88:	18d0      	adds	r0, r2, r3
 8024a8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8024a8c:	697b      	ldr	r3, [r7, #20]
 8024a8e:	1ad3      	subs	r3, r2, r3
 8024a90:	461a      	mov	r2, r3
 8024a92:	2100      	movs	r1, #0
 8024a94:	f009 f82a 	bl	802daec <memset>

            return tag + gdiff;
 8024a98:	6a3a      	ldr	r2, [r7, #32]
 8024a9a:	69fb      	ldr	r3, [r7, #28]
 8024a9c:	4413      	add	r3, r2
 8024a9e:	e00b      	b.n	8024ab8 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8024aa0:	693b      	ldr	r3, [r7, #16]
 8024aa2:	4618      	mov	r0, r3
 8024aa4:	f7ff fc41 	bl	802432a <lfs_tag_dsize>
 8024aa8:	4603      	mov	r3, r0
 8024aaa:	3304      	adds	r3, #4
 8024aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024aae:	429a      	cmp	r2, r3
 8024ab0:	f4bf af56 	bcs.w	8024960 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8024ab4:	f06f 0301 	mvn.w	r3, #1
}
 8024ab8:	4618      	mov	r0, r3
 8024aba:	372c      	adds	r7, #44	; 0x2c
 8024abc:	46bd      	mov	sp, r7
 8024abe:	bd90      	pop	{r4, r7, pc}
 8024ac0:	000ffc00 	.word	0x000ffc00

08024ac4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8024ac4:	b580      	push	{r7, lr}
 8024ac6:	b088      	sub	sp, #32
 8024ac8:	af04      	add	r7, sp, #16
 8024aca:	60f8      	str	r0, [r7, #12]
 8024acc:	60b9      	str	r1, [r7, #8]
 8024ace:	607a      	str	r2, [r7, #4]
 8024ad0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8024ad2:	6838      	ldr	r0, [r7, #0]
 8024ad4:	f7ff fc1c 	bl	8024310 <lfs_tag_size>
 8024ad8:	4603      	mov	r3, r0
 8024ada:	9302      	str	r3, [sp, #8]
 8024adc:	69bb      	ldr	r3, [r7, #24]
 8024ade:	9301      	str	r3, [sp, #4]
 8024ae0:	2300      	movs	r3, #0
 8024ae2:	9300      	str	r3, [sp, #0]
 8024ae4:	683b      	ldr	r3, [r7, #0]
 8024ae6:	687a      	ldr	r2, [r7, #4]
 8024ae8:	68b9      	ldr	r1, [r7, #8]
 8024aea:	68f8      	ldr	r0, [r7, #12]
 8024aec:	f7ff ff04 	bl	80248f8 <lfs_dir_getslice>
 8024af0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8024af2:	4618      	mov	r0, r3
 8024af4:	3710      	adds	r7, #16
 8024af6:	46bd      	mov	sp, r7
 8024af8:	bd80      	pop	{r7, pc}

08024afa <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8024afa:	b580      	push	{r7, lr}
 8024afc:	b08c      	sub	sp, #48	; 0x30
 8024afe:	af04      	add	r7, sp, #16
 8024b00:	60f8      	str	r0, [r7, #12]
 8024b02:	60b9      	str	r1, [r7, #8]
 8024b04:	607a      	str	r2, [r7, #4]
 8024b06:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8024b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024b0a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8024b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b10:	441a      	add	r2, r3
 8024b12:	68fb      	ldr	r3, [r7, #12]
 8024b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024b16:	69db      	ldr	r3, [r3, #28]
 8024b18:	429a      	cmp	r2, r3
 8024b1a:	f240 80c0 	bls.w	8024c9e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8024b1e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8024b22:	e0c1      	b.n	8024ca8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8024b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024b26:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024b28:	687b      	ldr	r3, [r7, #4]
 8024b2a:	2b00      	cmp	r3, #0
 8024b2c:	d03f      	beq.n	8024bae <lfs_dir_getread+0xb4>
 8024b2e:	687b      	ldr	r3, [r7, #4]
 8024b30:	681b      	ldr	r3, [r3, #0]
 8024b32:	f113 0f02 	cmn.w	r3, #2
 8024b36:	d13a      	bne.n	8024bae <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8024b38:	687b      	ldr	r3, [r7, #4]
 8024b3a:	685a      	ldr	r2, [r3, #4]
 8024b3c:	687b      	ldr	r3, [r7, #4]
 8024b3e:	689b      	ldr	r3, [r3, #8]
 8024b40:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024b42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b44:	429a      	cmp	r2, r3
 8024b46:	d232      	bcs.n	8024bae <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8024b48:	687b      	ldr	r3, [r7, #4]
 8024b4a:	685b      	ldr	r3, [r3, #4]
 8024b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b4e:	429a      	cmp	r2, r3
 8024b50:	d324      	bcc.n	8024b9c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024b52:	687b      	ldr	r3, [r7, #4]
 8024b54:	689a      	ldr	r2, [r3, #8]
 8024b56:	687b      	ldr	r3, [r7, #4]
 8024b58:	6859      	ldr	r1, [r3, #4]
 8024b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024b5c:	1acb      	subs	r3, r1, r3
 8024b5e:	4413      	add	r3, r2
 8024b60:	4619      	mov	r1, r3
 8024b62:	69b8      	ldr	r0, [r7, #24]
 8024b64:	f7fe feae 	bl	80238c4 <lfs_min>
 8024b68:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8024b6a:	687b      	ldr	r3, [r7, #4]
 8024b6c:	68da      	ldr	r2, [r3, #12]
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	685b      	ldr	r3, [r3, #4]
 8024b72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024b74:	1acb      	subs	r3, r1, r3
 8024b76:	4413      	add	r3, r2
 8024b78:	69ba      	ldr	r2, [r7, #24]
 8024b7a:	4619      	mov	r1, r3
 8024b7c:	69f8      	ldr	r0, [r7, #28]
 8024b7e:	f009 f98a 	bl	802de96 <memcpy>

                data += diff;
 8024b82:	69fa      	ldr	r2, [r7, #28]
 8024b84:	69bb      	ldr	r3, [r7, #24]
 8024b86:	4413      	add	r3, r2
 8024b88:	61fb      	str	r3, [r7, #28]
                off += diff;
 8024b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b8c:	69bb      	ldr	r3, [r7, #24]
 8024b8e:	4413      	add	r3, r2
 8024b90:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024b94:	69bb      	ldr	r3, [r7, #24]
 8024b96:	1ad3      	subs	r3, r2, r3
 8024b98:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8024b9a:	e080      	b.n	8024c9e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8024b9c:	687b      	ldr	r3, [r7, #4]
 8024b9e:	685a      	ldr	r2, [r3, #4]
 8024ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024ba2:	1ad3      	subs	r3, r2, r3
 8024ba4:	4619      	mov	r1, r3
 8024ba6:	69b8      	ldr	r0, [r7, #24]
 8024ba8:	f7fe fe8c 	bl	80238c4 <lfs_min>
 8024bac:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8024bae:	683b      	ldr	r3, [r7, #0]
 8024bb0:	681b      	ldr	r3, [r3, #0]
 8024bb2:	f113 0f02 	cmn.w	r3, #2
 8024bb6:	d13a      	bne.n	8024c2e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8024bb8:	683b      	ldr	r3, [r7, #0]
 8024bba:	685a      	ldr	r2, [r3, #4]
 8024bbc:	683b      	ldr	r3, [r7, #0]
 8024bbe:	689b      	ldr	r3, [r3, #8]
 8024bc0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024bc4:	429a      	cmp	r2, r3
 8024bc6:	d232      	bcs.n	8024c2e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8024bc8:	683b      	ldr	r3, [r7, #0]
 8024bca:	685b      	ldr	r3, [r3, #4]
 8024bcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024bce:	429a      	cmp	r2, r3
 8024bd0:	d324      	bcc.n	8024c1c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8024bd2:	683b      	ldr	r3, [r7, #0]
 8024bd4:	689a      	ldr	r2, [r3, #8]
 8024bd6:	683b      	ldr	r3, [r7, #0]
 8024bd8:	6859      	ldr	r1, [r3, #4]
 8024bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024bdc:	1acb      	subs	r3, r1, r3
 8024bde:	4413      	add	r3, r2
 8024be0:	4619      	mov	r1, r3
 8024be2:	69b8      	ldr	r0, [r7, #24]
 8024be4:	f7fe fe6e 	bl	80238c4 <lfs_min>
 8024be8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8024bea:	683b      	ldr	r3, [r7, #0]
 8024bec:	68da      	ldr	r2, [r3, #12]
 8024bee:	683b      	ldr	r3, [r7, #0]
 8024bf0:	685b      	ldr	r3, [r3, #4]
 8024bf2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024bf4:	1acb      	subs	r3, r1, r3
 8024bf6:	4413      	add	r3, r2
 8024bf8:	69ba      	ldr	r2, [r7, #24]
 8024bfa:	4619      	mov	r1, r3
 8024bfc:	69f8      	ldr	r0, [r7, #28]
 8024bfe:	f009 f94a 	bl	802de96 <memcpy>

                data += diff;
 8024c02:	69fa      	ldr	r2, [r7, #28]
 8024c04:	69bb      	ldr	r3, [r7, #24]
 8024c06:	4413      	add	r3, r2
 8024c08:	61fb      	str	r3, [r7, #28]
                off += diff;
 8024c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024c0c:	69bb      	ldr	r3, [r7, #24]
 8024c0e:	4413      	add	r3, r2
 8024c10:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024c12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024c14:	69bb      	ldr	r3, [r7, #24]
 8024c16:	1ad3      	subs	r3, r2, r3
 8024c18:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8024c1a:	e040      	b.n	8024c9e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8024c1c:	683b      	ldr	r3, [r7, #0]
 8024c1e:	685a      	ldr	r2, [r3, #4]
 8024c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024c22:	1ad3      	subs	r3, r2, r3
 8024c24:	4619      	mov	r1, r3
 8024c26:	69b8      	ldr	r0, [r7, #24]
 8024c28:	f7fe fe4c 	bl	80238c4 <lfs_min>
 8024c2c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8024c2e:	683b      	ldr	r3, [r7, #0]
 8024c30:	f06f 0201 	mvn.w	r2, #1
 8024c34:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8024c36:	68fb      	ldr	r3, [r7, #12]
 8024c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024c3a:	695b      	ldr	r3, [r3, #20]
 8024c3c:	4619      	mov	r1, r3
 8024c3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024c40:	f7fe fe50 	bl	80238e4 <lfs_aligndown>
 8024c44:	4602      	mov	r2, r0
 8024c46:	683b      	ldr	r3, [r7, #0]
 8024c48:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c4e:	441a      	add	r2, r3
 8024c50:	68fb      	ldr	r3, [r7, #12]
 8024c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024c54:	695b      	ldr	r3, [r3, #20]
 8024c56:	4619      	mov	r1, r3
 8024c58:	4610      	mov	r0, r2
 8024c5a:	f7fe fe58 	bl	802390e <lfs_alignup>
 8024c5e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024c60:	68fb      	ldr	r3, [r7, #12]
 8024c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024c66:	4619      	mov	r1, r3
 8024c68:	4610      	mov	r0, r2
 8024c6a:	f7fe fe2b 	bl	80238c4 <lfs_min>
 8024c6e:	4602      	mov	r2, r0
 8024c70:	683b      	ldr	r3, [r7, #0]
 8024c72:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024c74:	683b      	ldr	r3, [r7, #0]
 8024c76:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024c78:	683a      	ldr	r2, [r7, #0]
 8024c7a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024c7c:	6839      	ldr	r1, [r7, #0]
 8024c7e:	6889      	ldr	r1, [r1, #8]
 8024c80:	9102      	str	r1, [sp, #8]
 8024c82:	9201      	str	r2, [sp, #4]
 8024c84:	9300      	str	r3, [sp, #0]
 8024c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024c8a:	68b9      	ldr	r1, [r7, #8]
 8024c8c:	68f8      	ldr	r0, [r7, #12]
 8024c8e:	f7ff fe33 	bl	80248f8 <lfs_dir_getslice>
 8024c92:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8024c94:	697b      	ldr	r3, [r7, #20]
 8024c96:	2b00      	cmp	r3, #0
 8024c98:	da01      	bge.n	8024c9e <lfs_dir_getread+0x1a4>
            return err;
 8024c9a:	697b      	ldr	r3, [r7, #20]
 8024c9c:	e004      	b.n	8024ca8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8024c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024ca0:	2b00      	cmp	r3, #0
 8024ca2:	f47f af3f 	bne.w	8024b24 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8024ca6:	2300      	movs	r3, #0
}
 8024ca8:	4618      	mov	r0, r3
 8024caa:	3720      	adds	r7, #32
 8024cac:	46bd      	mov	sp, r7
 8024cae:	bd80      	pop	{r7, pc}

08024cb0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8024cb0:	b590      	push	{r4, r7, lr}
 8024cb2:	b087      	sub	sp, #28
 8024cb4:	af00      	add	r7, sp, #0
 8024cb6:	60f8      	str	r0, [r7, #12]
 8024cb8:	60b9      	str	r1, [r7, #8]
 8024cba:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8024cbc:	68fb      	ldr	r3, [r7, #12]
 8024cbe:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024cc0:	68bb      	ldr	r3, [r7, #8]
 8024cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8024cc6:	2b00      	cmp	r3, #0
 8024cc8:	d001      	beq.n	8024cce <lfs_dir_traverse_filter+0x1e>
 8024cca:	4b24      	ldr	r3, [pc, #144]	; (8024d5c <lfs_dir_traverse_filter+0xac>)
 8024ccc:	e000      	b.n	8024cd0 <lfs_dir_traverse_filter+0x20>
 8024cce:	4b24      	ldr	r3, [pc, #144]	; (8024d60 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024cd0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8024cd2:	697b      	ldr	r3, [r7, #20]
 8024cd4:	681a      	ldr	r2, [r3, #0]
 8024cd6:	68bb      	ldr	r3, [r7, #8]
 8024cd8:	405a      	eors	r2, r3
 8024cda:	693b      	ldr	r3, [r7, #16]
 8024cdc:	4013      	ands	r3, r2
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	d014      	beq.n	8024d0c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8024ce2:	697b      	ldr	r3, [r7, #20]
 8024ce4:	681b      	ldr	r3, [r3, #0]
 8024ce6:	4618      	mov	r0, r3
 8024ce8:	f7ff fab5 	bl	8024256 <lfs_tag_isdelete>
 8024cec:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8024cee:	2b00      	cmp	r3, #0
 8024cf0:	d10c      	bne.n	8024d0c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8024cf2:	68bb      	ldr	r3, [r7, #8]
 8024cf4:	4a19      	ldr	r2, [pc, #100]	; (8024d5c <lfs_dir_traverse_filter+0xac>)
 8024cf6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8024cf8:	697b      	ldr	r3, [r7, #20]
 8024cfa:	6819      	ldr	r1, [r3, #0]
 8024cfc:	4b19      	ldr	r3, [pc, #100]	; (8024d64 <lfs_dir_traverse_filter+0xb4>)
 8024cfe:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8024d00:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8024d04:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8024d08:	429a      	cmp	r2, r3
 8024d0a:	d104      	bne.n	8024d16 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8024d0c:	697b      	ldr	r3, [r7, #20]
 8024d0e:	2200      	movs	r2, #0
 8024d10:	601a      	str	r2, [r3, #0]
        return true;
 8024d12:	2301      	movs	r3, #1
 8024d14:	e01e      	b.n	8024d54 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024d16:	68b8      	ldr	r0, [r7, #8]
 8024d18:	f7ff fab0 	bl	802427c <lfs_tag_type1>
 8024d1c:	4603      	mov	r3, r0
 8024d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024d22:	d116      	bne.n	8024d52 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8024d24:	68b8      	ldr	r0, [r7, #8]
 8024d26:	f7ff fae3 	bl	80242f0 <lfs_tag_id>
 8024d2a:	4603      	mov	r3, r0
 8024d2c:	461c      	mov	r4, r3
 8024d2e:	697b      	ldr	r3, [r7, #20]
 8024d30:	681b      	ldr	r3, [r3, #0]
 8024d32:	4618      	mov	r0, r3
 8024d34:	f7ff fadc 	bl	80242f0 <lfs_tag_id>
 8024d38:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024d3a:	429c      	cmp	r4, r3
 8024d3c:	d809      	bhi.n	8024d52 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8024d3e:	68b8      	ldr	r0, [r7, #8]
 8024d40:	f7ff fac9 	bl	80242d6 <lfs_tag_splice>
 8024d44:	4603      	mov	r3, r0
 8024d46:	029a      	lsls	r2, r3, #10
 8024d48:	697b      	ldr	r3, [r7, #20]
 8024d4a:	681b      	ldr	r3, [r3, #0]
 8024d4c:	441a      	add	r2, r3
 8024d4e:	697b      	ldr	r3, [r7, #20]
 8024d50:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024d52:	2300      	movs	r3, #0
}
 8024d54:	4618      	mov	r0, r3
 8024d56:	371c      	adds	r7, #28
 8024d58:	46bd      	mov	sp, r7
 8024d5a:	bd90      	pop	{r4, r7, pc}
 8024d5c:	7ffffc00 	.word	0x7ffffc00
 8024d60:	700ffc00 	.word	0x700ffc00
 8024d64:	000ffc00 	.word	0x000ffc00

08024d68 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024d68:	b590      	push	{r4, r7, lr}
 8024d6a:	b0c1      	sub	sp, #260	; 0x104
 8024d6c:	af04      	add	r7, sp, #16
 8024d6e:	60f8      	str	r0, [r7, #12]
 8024d70:	60b9      	str	r1, [r7, #8]
 8024d72:	607a      	str	r2, [r7, #4]
 8024d74:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024d76:	2300      	movs	r3, #0
 8024d78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8024d7c:	6838      	ldr	r0, [r7, #0]
 8024d7e:	f7ff fad4 	bl	802432a <lfs_tag_dsize>
 8024d82:	4602      	mov	r2, r0
 8024d84:	687b      	ldr	r3, [r7, #4]
 8024d86:	441a      	add	r2, r3
 8024d88:	68bb      	ldr	r3, [r7, #8]
 8024d8a:	68db      	ldr	r3, [r3, #12]
 8024d8c:	429a      	cmp	r2, r3
 8024d8e:	d237      	bcs.n	8024e00 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8024d90:	6838      	ldr	r0, [r7, #0]
 8024d92:	f7ff faca 	bl	802432a <lfs_tag_dsize>
 8024d96:	4602      	mov	r2, r0
 8024d98:	687b      	ldr	r3, [r7, #4]
 8024d9a:	4413      	add	r3, r2
 8024d9c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8024d9e:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8024da0:	68bb      	ldr	r3, [r7, #8]
 8024da2:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8024da4:	2204      	movs	r2, #4
 8024da6:	9203      	str	r2, [sp, #12]
 8024da8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8024dac:	9202      	str	r2, [sp, #8]
 8024dae:	687a      	ldr	r2, [r7, #4]
 8024db0:	9201      	str	r2, [sp, #4]
 8024db2:	9300      	str	r3, [sp, #0]
 8024db4:	2304      	movs	r3, #4
 8024db6:	460a      	mov	r2, r1
 8024db8:	2100      	movs	r1, #0
 8024dba:	68f8      	ldr	r0, [r7, #12]
 8024dbc:	f7fe fe5e 	bl	8023a7c <lfs_bd_read>
 8024dc0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8024dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024dc8:	2b00      	cmp	r3, #0
 8024dca:	d002      	beq.n	8024dd2 <lfs_dir_traverse+0x6a>
                    return err;
 8024dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024dd0:	e3a6      	b.n	8025520 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8024dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024dd4:	4618      	mov	r0, r3
 8024dd6:	f7fe fdfc 	bl	80239d2 <lfs_frombe32>
 8024dda:	4602      	mov	r2, r0
 8024ddc:	683b      	ldr	r3, [r7, #0]
 8024dde:	4053      	eors	r3, r2
 8024de0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024de4:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8024de6:	68bb      	ldr	r3, [r7, #8]
 8024de8:	681b      	ldr	r3, [r3, #0]
 8024dea:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8024dec:	687b      	ldr	r3, [r7, #4]
 8024dee:	3304      	adds	r3, #4
 8024df0:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8024df2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8024dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024dfc:	603b      	str	r3, [r7, #0]
 8024dfe:	e01b      	b.n	8024e38 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8024e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024e04:	2b00      	cmp	r3, #0
 8024e06:	dd13      	ble.n	8024e30 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8024e08:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024e0c:	681b      	ldr	r3, [r3, #0]
 8024e0e:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8024e10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024e14:	685b      	ldr	r3, [r3, #4]
 8024e16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8024e1a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024e1e:	3308      	adds	r3, #8
 8024e20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8024e24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024e28:	3b01      	subs	r3, #1
 8024e2a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8024e2e:	e003      	b.n	8024e38 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8024e30:	2300      	movs	r3, #0
 8024e32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8024e36:	e2a2      	b.n	802537e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8024e38:	4b7e      	ldr	r3, [pc, #504]	; (8025034 <lfs_dir_traverse+0x2cc>)
 8024e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8024e3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024e40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8024e44:	405a      	eors	r2, r3
 8024e46:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8024e4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8024e4e:	400b      	ands	r3, r1
 8024e50:	4013      	ands	r3, r2
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	f040 8285 	bne.w	8025362 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024e58:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024e5c:	f7ff fa48 	bl	80242f0 <lfs_tag_id>
 8024e60:	4603      	mov	r3, r0
 8024e62:	2b00      	cmp	r3, #0
 8024e64:	f000 80f0 	beq.w	8025048 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024e68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024e6c:	2b02      	cmp	r3, #2
 8024e6e:	d906      	bls.n	8024e7e <lfs_dir_traverse+0x116>
 8024e70:	4b71      	ldr	r3, [pc, #452]	; (8025038 <lfs_dir_traverse+0x2d0>)
 8024e72:	4a72      	ldr	r2, [pc, #456]	; (802503c <lfs_dir_traverse+0x2d4>)
 8024e74:	f240 314e 	movw	r1, #846	; 0x34e
 8024e78:	4871      	ldr	r0, [pc, #452]	; (8025040 <lfs_dir_traverse+0x2d8>)
 8024e7a:	f007 fc67 	bl	802c74c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8024e7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024e80:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e84:	4613      	mov	r3, r2
 8024e86:	011b      	lsls	r3, r3, #4
 8024e88:	1a9b      	subs	r3, r3, r2
 8024e8a:	009b      	lsls	r3, r3, #2
 8024e8c:	33f0      	adds	r3, #240	; 0xf0
 8024e8e:	443b      	add	r3, r7
 8024e90:	3b98      	subs	r3, #152	; 0x98
 8024e92:	68ba      	ldr	r2, [r7, #8]
 8024e94:	601a      	str	r2, [r3, #0]
 8024e96:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e9a:	4613      	mov	r3, r2
 8024e9c:	011b      	lsls	r3, r3, #4
 8024e9e:	1a9b      	subs	r3, r3, r2
 8024ea0:	009b      	lsls	r3, r3, #2
 8024ea2:	33f0      	adds	r3, #240	; 0xf0
 8024ea4:	443b      	add	r3, r7
 8024ea6:	3b94      	subs	r3, #148	; 0x94
 8024ea8:	687a      	ldr	r2, [r7, #4]
 8024eaa:	601a      	str	r2, [r3, #0]
 8024eac:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024eb0:	4613      	mov	r3, r2
 8024eb2:	011b      	lsls	r3, r3, #4
 8024eb4:	1a9b      	subs	r3, r3, r2
 8024eb6:	009b      	lsls	r3, r3, #2
 8024eb8:	33f0      	adds	r3, #240	; 0xf0
 8024eba:	443b      	add	r3, r7
 8024ebc:	3b90      	subs	r3, #144	; 0x90
 8024ebe:	683a      	ldr	r2, [r7, #0]
 8024ec0:	601a      	str	r2, [r3, #0]
 8024ec2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ec6:	4613      	mov	r3, r2
 8024ec8:	011b      	lsls	r3, r3, #4
 8024eca:	1a9b      	subs	r3, r3, r2
 8024ecc:	009b      	lsls	r3, r3, #2
 8024ece:	33f0      	adds	r3, #240	; 0xf0
 8024ed0:	443b      	add	r3, r7
 8024ed2:	3b8c      	subs	r3, #140	; 0x8c
 8024ed4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024ed8:	601a      	str	r2, [r3, #0]
 8024eda:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ede:	4613      	mov	r3, r2
 8024ee0:	011b      	lsls	r3, r3, #4
 8024ee2:	1a9b      	subs	r3, r3, r2
 8024ee4:	009b      	lsls	r3, r3, #2
 8024ee6:	33f0      	adds	r3, #240	; 0xf0
 8024ee8:	443b      	add	r3, r7
 8024eea:	3b88      	subs	r3, #136	; 0x88
 8024eec:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024ef0:	601a      	str	r2, [r3, #0]
 8024ef2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ef6:	4613      	mov	r3, r2
 8024ef8:	011b      	lsls	r3, r3, #4
 8024efa:	1a9b      	subs	r3, r3, r2
 8024efc:	009b      	lsls	r3, r3, #2
 8024efe:	33f0      	adds	r3, #240	; 0xf0
 8024f00:	443b      	add	r3, r7
 8024f02:	3b84      	subs	r3, #132	; 0x84
 8024f04:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024f08:	601a      	str	r2, [r3, #0]
 8024f0a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f0e:	4613      	mov	r3, r2
 8024f10:	011b      	lsls	r3, r3, #4
 8024f12:	1a9b      	subs	r3, r3, r2
 8024f14:	009b      	lsls	r3, r3, #2
 8024f16:	33f0      	adds	r3, #240	; 0xf0
 8024f18:	443b      	add	r3, r7
 8024f1a:	3b80      	subs	r3, #128	; 0x80
 8024f1c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024f20:	601a      	str	r2, [r3, #0]
 8024f22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f26:	4613      	mov	r3, r2
 8024f28:	011b      	lsls	r3, r3, #4
 8024f2a:	1a9b      	subs	r3, r3, r2
 8024f2c:	009b      	lsls	r3, r3, #2
 8024f2e:	33f0      	adds	r3, #240	; 0xf0
 8024f30:	443b      	add	r3, r7
 8024f32:	3b7c      	subs	r3, #124	; 0x7c
 8024f34:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024f38:	801a      	strh	r2, [r3, #0]
 8024f3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f3e:	4613      	mov	r3, r2
 8024f40:	011b      	lsls	r3, r3, #4
 8024f42:	1a9b      	subs	r3, r3, r2
 8024f44:	009b      	lsls	r3, r3, #2
 8024f46:	33f0      	adds	r3, #240	; 0xf0
 8024f48:	443b      	add	r3, r7
 8024f4a:	3b7a      	subs	r3, #122	; 0x7a
 8024f4c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024f50:	801a      	strh	r2, [r3, #0]
 8024f52:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f56:	4613      	mov	r3, r2
 8024f58:	011b      	lsls	r3, r3, #4
 8024f5a:	1a9b      	subs	r3, r3, r2
 8024f5c:	009b      	lsls	r3, r3, #2
 8024f5e:	33f0      	adds	r3, #240	; 0xf0
 8024f60:	443b      	add	r3, r7
 8024f62:	3b78      	subs	r3, #120	; 0x78
 8024f64:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024f68:	801a      	strh	r2, [r3, #0]
 8024f6a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f6e:	4613      	mov	r3, r2
 8024f70:	011b      	lsls	r3, r3, #4
 8024f72:	1a9b      	subs	r3, r3, r2
 8024f74:	009b      	lsls	r3, r3, #2
 8024f76:	33f0      	adds	r3, #240	; 0xf0
 8024f78:	443b      	add	r3, r7
 8024f7a:	3b74      	subs	r3, #116	; 0x74
 8024f7c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024f80:	601a      	str	r2, [r3, #0]
 8024f82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f86:	4613      	mov	r3, r2
 8024f88:	011b      	lsls	r3, r3, #4
 8024f8a:	1a9b      	subs	r3, r3, r2
 8024f8c:	009b      	lsls	r3, r3, #2
 8024f8e:	33f0      	adds	r3, #240	; 0xf0
 8024f90:	443b      	add	r3, r7
 8024f92:	3b70      	subs	r3, #112	; 0x70
 8024f94:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024f98:	601a      	str	r2, [r3, #0]
 8024f9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f9e:	4613      	mov	r3, r2
 8024fa0:	011b      	lsls	r3, r3, #4
 8024fa2:	1a9b      	subs	r3, r3, r2
 8024fa4:	009b      	lsls	r3, r3, #2
 8024fa6:	33f0      	adds	r3, #240	; 0xf0
 8024fa8:	443b      	add	r3, r7
 8024faa:	3b6c      	subs	r3, #108	; 0x6c
 8024fac:	6019      	str	r1, [r3, #0]
 8024fae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024fb2:	4613      	mov	r3, r2
 8024fb4:	011b      	lsls	r3, r3, #4
 8024fb6:	1a9b      	subs	r3, r3, r2
 8024fb8:	009b      	lsls	r3, r3, #2
 8024fba:	33f0      	adds	r3, #240	; 0xf0
 8024fbc:	443b      	add	r3, r7
 8024fbe:	3b68      	subs	r3, #104	; 0x68
 8024fc0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024fc4:	601a      	str	r2, [r3, #0]
 8024fc6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024fca:	4613      	mov	r3, r2
 8024fcc:	011b      	lsls	r3, r3, #4
 8024fce:	1a9b      	subs	r3, r3, r2
 8024fd0:	009b      	lsls	r3, r3, #2
 8024fd2:	33f0      	adds	r3, #240	; 0xf0
 8024fd4:	443b      	add	r3, r7
 8024fd6:	3b68      	subs	r3, #104	; 0x68
 8024fd8:	3304      	adds	r3, #4
 8024fda:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8024fde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024fe2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8024fe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fea:	3301      	adds	r3, #1
 8024fec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8024ff0:	2300      	movs	r3, #0
 8024ff2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8024ff6:	2300      	movs	r3, #0
 8024ff8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8024ffc:	2300      	movs	r3, #0
 8024ffe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8025002:	2300      	movs	r3, #0
 8025004:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8025008:	2300      	movs	r3, #0
 802500a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 802500e:	4b0d      	ldr	r3, [pc, #52]	; (8025044 <lfs_dir_traverse+0x2dc>)
 8025010:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8025014:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025018:	1e5a      	subs	r2, r3, #1
 802501a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 802501e:	4613      	mov	r3, r2
 8025020:	011b      	lsls	r3, r3, #4
 8025022:	1a9b      	subs	r3, r3, r2
 8025024:	009b      	lsls	r3, r3, #2
 8025026:	3328      	adds	r3, #40	; 0x28
 8025028:	440b      	add	r3, r1
 802502a:	3304      	adds	r3, #4
 802502c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8025030:	e19e      	b.n	8025370 <lfs_dir_traverse+0x608>
 8025032:	bf00      	nop
 8025034:	7ff00000 	.word	0x7ff00000
 8025038:	08033958 	.word	0x08033958
 802503c:	08034b38 	.word	0x08034b38
 8025040:	08033840 	.word	0x08033840
 8025044:	08024cb1 	.word	0x08024cb1
            }
        }

popped:
 8025048:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 802504a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 802504e:	f7ff f94f 	bl	80242f0 <lfs_tag_id>
 8025052:	4603      	mov	r3, r0
 8025054:	2b00      	cmp	r3, #0
 8025056:	d015      	beq.n	8025084 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8025058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802505a:	4618      	mov	r0, r3
 802505c:	f7ff f948 	bl	80242f0 <lfs_tag_id>
 8025060:	4603      	mov	r3, r0
 8025062:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8025064:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8025068:	4293      	cmp	r3, r2
 802506a:	f200 817c 	bhi.w	8025366 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 802506e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025070:	4618      	mov	r0, r3
 8025072:	f7ff f93d 	bl	80242f0 <lfs_tag_id>
 8025076:	4603      	mov	r3, r0
 8025078:	461a      	mov	r2, r3
 802507a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 802507e:	4293      	cmp	r3, r2
 8025080:	f240 8171 	bls.w	8025366 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8025084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025086:	4618      	mov	r0, r3
 8025088:	f7ff f908 	bl	802429c <lfs_tag_type3>
 802508c:	4603      	mov	r3, r0
 802508e:	2b00      	cmp	r3, #0
 8025090:	f43f ae74 	beq.w	8024d7c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8025094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025096:	4618      	mov	r0, r3
 8025098:	f7ff f900 	bl	802429c <lfs_tag_type3>
 802509c:	4603      	mov	r3, r0
 802509e:	461a      	mov	r2, r3
 80250a0:	f240 1301 	movw	r3, #257	; 0x101
 80250a4:	429a      	cmp	r2, r3
 80250a6:	f040 80e0 	bne.w	802526a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 80250aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80250ae:	4ab1      	ldr	r2, [pc, #708]	; (8025374 <lfs_dir_traverse+0x60c>)
 80250b0:	4293      	cmp	r3, r2
 80250b2:	f000 815a 	beq.w	802536a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 80250b6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80250ba:	4613      	mov	r3, r2
 80250bc:	011b      	lsls	r3, r3, #4
 80250be:	1a9b      	subs	r3, r3, r2
 80250c0:	009b      	lsls	r3, r3, #2
 80250c2:	33f0      	adds	r3, #240	; 0xf0
 80250c4:	443b      	add	r3, r7
 80250c6:	3b98      	subs	r3, #152	; 0x98
 80250c8:	4618      	mov	r0, r3
 80250ca:	233c      	movs	r3, #60	; 0x3c
 80250cc:	461a      	mov	r2, r3
 80250ce:	2100      	movs	r1, #0
 80250d0:	f008 fd0c 	bl	802daec <memset>
 80250d4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80250d8:	4613      	mov	r3, r2
 80250da:	011b      	lsls	r3, r3, #4
 80250dc:	1a9b      	subs	r3, r3, r2
 80250de:	009b      	lsls	r3, r3, #2
 80250e0:	33f0      	adds	r3, #240	; 0xf0
 80250e2:	443b      	add	r3, r7
 80250e4:	3b98      	subs	r3, #152	; 0x98
 80250e6:	68ba      	ldr	r2, [r7, #8]
 80250e8:	601a      	str	r2, [r3, #0]
 80250ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80250ee:	4613      	mov	r3, r2
 80250f0:	011b      	lsls	r3, r3, #4
 80250f2:	1a9b      	subs	r3, r3, r2
 80250f4:	009b      	lsls	r3, r3, #2
 80250f6:	33f0      	adds	r3, #240	; 0xf0
 80250f8:	443b      	add	r3, r7
 80250fa:	3b94      	subs	r3, #148	; 0x94
 80250fc:	687a      	ldr	r2, [r7, #4]
 80250fe:	601a      	str	r2, [r3, #0]
 8025100:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025104:	4613      	mov	r3, r2
 8025106:	011b      	lsls	r3, r3, #4
 8025108:	1a9b      	subs	r3, r3, r2
 802510a:	009b      	lsls	r3, r3, #2
 802510c:	33f0      	adds	r3, #240	; 0xf0
 802510e:	443b      	add	r3, r7
 8025110:	3b90      	subs	r3, #144	; 0x90
 8025112:	683a      	ldr	r2, [r7, #0]
 8025114:	601a      	str	r2, [r3, #0]
 8025116:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802511a:	4613      	mov	r3, r2
 802511c:	011b      	lsls	r3, r3, #4
 802511e:	1a9b      	subs	r3, r3, r2
 8025120:	009b      	lsls	r3, r3, #2
 8025122:	33f0      	adds	r3, #240	; 0xf0
 8025124:	443b      	add	r3, r7
 8025126:	3b8c      	subs	r3, #140	; 0x8c
 8025128:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 802512c:	601a      	str	r2, [r3, #0]
 802512e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025132:	4613      	mov	r3, r2
 8025134:	011b      	lsls	r3, r3, #4
 8025136:	1a9b      	subs	r3, r3, r2
 8025138:	009b      	lsls	r3, r3, #2
 802513a:	33f0      	adds	r3, #240	; 0xf0
 802513c:	443b      	add	r3, r7
 802513e:	3b88      	subs	r3, #136	; 0x88
 8025140:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8025144:	601a      	str	r2, [r3, #0]
 8025146:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802514a:	4613      	mov	r3, r2
 802514c:	011b      	lsls	r3, r3, #4
 802514e:	1a9b      	subs	r3, r3, r2
 8025150:	009b      	lsls	r3, r3, #2
 8025152:	33f0      	adds	r3, #240	; 0xf0
 8025154:	443b      	add	r3, r7
 8025156:	3b84      	subs	r3, #132	; 0x84
 8025158:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 802515c:	601a      	str	r2, [r3, #0]
 802515e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025162:	4613      	mov	r3, r2
 8025164:	011b      	lsls	r3, r3, #4
 8025166:	1a9b      	subs	r3, r3, r2
 8025168:	009b      	lsls	r3, r3, #2
 802516a:	33f0      	adds	r3, #240	; 0xf0
 802516c:	443b      	add	r3, r7
 802516e:	3b80      	subs	r3, #128	; 0x80
 8025170:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8025174:	601a      	str	r2, [r3, #0]
 8025176:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802517a:	4613      	mov	r3, r2
 802517c:	011b      	lsls	r3, r3, #4
 802517e:	1a9b      	subs	r3, r3, r2
 8025180:	009b      	lsls	r3, r3, #2
 8025182:	33f0      	adds	r3, #240	; 0xf0
 8025184:	443b      	add	r3, r7
 8025186:	3b7c      	subs	r3, #124	; 0x7c
 8025188:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 802518c:	801a      	strh	r2, [r3, #0]
 802518e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025192:	4613      	mov	r3, r2
 8025194:	011b      	lsls	r3, r3, #4
 8025196:	1a9b      	subs	r3, r3, r2
 8025198:	009b      	lsls	r3, r3, #2
 802519a:	33f0      	adds	r3, #240	; 0xf0
 802519c:	443b      	add	r3, r7
 802519e:	3b7a      	subs	r3, #122	; 0x7a
 80251a0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 80251a4:	801a      	strh	r2, [r3, #0]
 80251a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80251aa:	4613      	mov	r3, r2
 80251ac:	011b      	lsls	r3, r3, #4
 80251ae:	1a9b      	subs	r3, r3, r2
 80251b0:	009b      	lsls	r3, r3, #2
 80251b2:	33f0      	adds	r3, #240	; 0xf0
 80251b4:	443b      	add	r3, r7
 80251b6:	3b78      	subs	r3, #120	; 0x78
 80251b8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 80251bc:	801a      	strh	r2, [r3, #0]
 80251be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80251c2:	4613      	mov	r3, r2
 80251c4:	011b      	lsls	r3, r3, #4
 80251c6:	1a9b      	subs	r3, r3, r2
 80251c8:	009b      	lsls	r3, r3, #2
 80251ca:	33f0      	adds	r3, #240	; 0xf0
 80251cc:	443b      	add	r3, r7
 80251ce:	3b74      	subs	r3, #116	; 0x74
 80251d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80251d4:	601a      	str	r2, [r3, #0]
 80251d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80251da:	4613      	mov	r3, r2
 80251dc:	011b      	lsls	r3, r3, #4
 80251de:	1a9b      	subs	r3, r3, r2
 80251e0:	009b      	lsls	r3, r3, #2
 80251e2:	33f0      	adds	r3, #240	; 0xf0
 80251e4:	443b      	add	r3, r7
 80251e6:	3b70      	subs	r3, #112	; 0x70
 80251e8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80251ec:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80251ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251f2:	3301      	adds	r3, #1
 80251f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80251f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80251fa:	4618      	mov	r0, r3
 80251fc:	f7ff f888 	bl	8024310 <lfs_tag_size>
 8025200:	4603      	mov	r3, r0
 8025202:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8025206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025208:	4618      	mov	r0, r3
 802520a:	f7ff f871 	bl	80242f0 <lfs_tag_id>
 802520e:	4603      	mov	r3, r0
 8025210:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8025214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8025218:	60bb      	str	r3, [r7, #8]
            off = 0;
 802521a:	2300      	movs	r3, #0
 802521c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 802521e:	f04f 33ff 	mov.w	r3, #4294967295
 8025222:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8025224:	2300      	movs	r3, #0
 8025226:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 802522a:	2300      	movs	r3, #0
 802522c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8025230:	4b51      	ldr	r3, [pc, #324]	; (8025378 <lfs_dir_traverse+0x610>)
 8025232:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8025236:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 802523a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 802523e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8025242:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8025246:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 802524a:	3301      	adds	r3, #1
 802524c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8025250:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8025254:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8025258:	1ad3      	subs	r3, r2, r3
 802525a:	b29a      	uxth	r2, r3
 802525c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8025260:	4413      	add	r3, r2
 8025262:	b29b      	uxth	r3, r3
 8025264:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8025268:	e588      	b.n	8024d7c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 802526a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802526c:	4618      	mov	r0, r3
 802526e:	f7ff f815 	bl	802429c <lfs_tag_type3>
 8025272:	4603      	mov	r3, r0
 8025274:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8025278:	d159      	bne.n	802532e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 802527a:	2300      	movs	r3, #0
 802527c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8025280:	e04b      	b.n	802531a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8025282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8025286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 802528a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 802528e:	4613      	mov	r3, r2
 8025290:	005b      	lsls	r3, r3, #1
 8025292:	4413      	add	r3, r2
 8025294:	009b      	lsls	r3, r3, #2
 8025296:	461a      	mov	r2, r3
 8025298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802529c:	4413      	add	r3, r2
 802529e:	781b      	ldrb	r3, [r3, #0]
 80252a0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80252a4:	051c      	lsls	r4, r3, #20
 80252a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80252a8:	4618      	mov	r0, r3
 80252aa:	f7ff f821 	bl	80242f0 <lfs_tag_id>
 80252ae:	4603      	mov	r3, r0
 80252b0:	461a      	mov	r2, r3
 80252b2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80252b6:	4413      	add	r3, r2
 80252b8:	029b      	lsls	r3, r3, #10
 80252ba:	ea44 0103 	orr.w	r1, r4, r3
 80252be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80252c2:	4613      	mov	r3, r2
 80252c4:	005b      	lsls	r3, r3, #1
 80252c6:	4413      	add	r3, r2
 80252c8:	009b      	lsls	r3, r3, #2
 80252ca:	461a      	mov	r2, r3
 80252cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80252d0:	4413      	add	r3, r2
 80252d2:	689b      	ldr	r3, [r3, #8]
 80252d4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80252d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80252da:	4613      	mov	r3, r2
 80252dc:	005b      	lsls	r3, r3, #1
 80252de:	4413      	add	r3, r2
 80252e0:	009b      	lsls	r3, r3, #2
 80252e2:	461a      	mov	r2, r3
 80252e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80252e8:	4413      	add	r3, r2
 80252ea:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80252ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80252f0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80252f4:	4798      	blx	r3
 80252f6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80252fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80252fe:	2b00      	cmp	r3, #0
 8025300:	da02      	bge.n	8025308 <lfs_dir_traverse+0x5a0>
                    return res;
 8025302:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8025306:	e10b      	b.n	8025520 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8025308:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802530c:	2b00      	cmp	r3, #0
 802530e:	d12e      	bne.n	802536e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8025310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8025314:	3301      	adds	r3, #1
 8025316:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 802531a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802531c:	4618      	mov	r0, r3
 802531e:	f7fe fff7 	bl	8024310 <lfs_tag_size>
 8025322:	4602      	mov	r2, r0
 8025324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8025328:	4293      	cmp	r3, r2
 802532a:	d3aa      	bcc.n	8025282 <lfs_dir_traverse+0x51a>
 802532c:	e526      	b.n	8024d7c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 802532e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8025332:	029a      	lsls	r2, r3, #10
 8025334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025336:	18d1      	adds	r1, r2, r3
 8025338:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802533c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8025340:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8025344:	4798      	blx	r3
 8025346:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 802534a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802534e:	2b00      	cmp	r3, #0
 8025350:	da02      	bge.n	8025358 <lfs_dir_traverse+0x5f0>
                return res;
 8025352:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8025356:	e0e3      	b.n	8025520 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8025358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802535c:	2b00      	cmp	r3, #0
 802535e:	d10d      	bne.n	802537c <lfs_dir_traverse+0x614>
 8025360:	e50c      	b.n	8024d7c <lfs_dir_traverse+0x14>
                continue;
 8025362:	bf00      	nop
 8025364:	e50a      	b.n	8024d7c <lfs_dir_traverse+0x14>
            continue;
 8025366:	bf00      	nop
 8025368:	e508      	b.n	8024d7c <lfs_dir_traverse+0x14>
                continue;
 802536a:	bf00      	nop
 802536c:	e506      	b.n	8024d7c <lfs_dir_traverse+0x14>
                    break;
 802536e:	bf00      	nop
        {
 8025370:	e504      	b.n	8024d7c <lfs_dir_traverse+0x14>
 8025372:	bf00      	nop
 8025374:	08024cb1 	.word	0x08024cb1
 8025378:	600ffc00 	.word	0x600ffc00
                break;
 802537c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 802537e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025382:	2b00      	cmp	r3, #0
 8025384:	f000 80ca 	beq.w	802551c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8025388:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802538c:	1e5a      	subs	r2, r3, #1
 802538e:	4613      	mov	r3, r2
 8025390:	011b      	lsls	r3, r3, #4
 8025392:	1a9b      	subs	r3, r3, r2
 8025394:	009b      	lsls	r3, r3, #2
 8025396:	33f0      	adds	r3, #240	; 0xf0
 8025398:	443b      	add	r3, r7
 802539a:	3b98      	subs	r3, #152	; 0x98
 802539c:	681b      	ldr	r3, [r3, #0]
 802539e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 80253a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253a4:	1e5a      	subs	r2, r3, #1
 80253a6:	4613      	mov	r3, r2
 80253a8:	011b      	lsls	r3, r3, #4
 80253aa:	1a9b      	subs	r3, r3, r2
 80253ac:	009b      	lsls	r3, r3, #2
 80253ae:	33f0      	adds	r3, #240	; 0xf0
 80253b0:	443b      	add	r3, r7
 80253b2:	3b94      	subs	r3, #148	; 0x94
 80253b4:	681b      	ldr	r3, [r3, #0]
 80253b6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 80253b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253bc:	1e5a      	subs	r2, r3, #1
 80253be:	4613      	mov	r3, r2
 80253c0:	011b      	lsls	r3, r3, #4
 80253c2:	1a9b      	subs	r3, r3, r2
 80253c4:	009b      	lsls	r3, r3, #2
 80253c6:	33f0      	adds	r3, #240	; 0xf0
 80253c8:	443b      	add	r3, r7
 80253ca:	3b90      	subs	r3, #144	; 0x90
 80253cc:	681b      	ldr	r3, [r3, #0]
 80253ce:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 80253d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253d4:	1e5a      	subs	r2, r3, #1
 80253d6:	4613      	mov	r3, r2
 80253d8:	011b      	lsls	r3, r3, #4
 80253da:	1a9b      	subs	r3, r3, r2
 80253dc:	009b      	lsls	r3, r3, #2
 80253de:	33f0      	adds	r3, #240	; 0xf0
 80253e0:	443b      	add	r3, r7
 80253e2:	3b8c      	subs	r3, #140	; 0x8c
 80253e4:	681b      	ldr	r3, [r3, #0]
 80253e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80253ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253ee:	1e5a      	subs	r2, r3, #1
 80253f0:	4613      	mov	r3, r2
 80253f2:	011b      	lsls	r3, r3, #4
 80253f4:	1a9b      	subs	r3, r3, r2
 80253f6:	009b      	lsls	r3, r3, #2
 80253f8:	33f0      	adds	r3, #240	; 0xf0
 80253fa:	443b      	add	r3, r7
 80253fc:	3b88      	subs	r3, #136	; 0x88
 80253fe:	681b      	ldr	r3, [r3, #0]
 8025400:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8025404:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025408:	1e5a      	subs	r2, r3, #1
 802540a:	4613      	mov	r3, r2
 802540c:	011b      	lsls	r3, r3, #4
 802540e:	1a9b      	subs	r3, r3, r2
 8025410:	009b      	lsls	r3, r3, #2
 8025412:	33f0      	adds	r3, #240	; 0xf0
 8025414:	443b      	add	r3, r7
 8025416:	3b84      	subs	r3, #132	; 0x84
 8025418:	681b      	ldr	r3, [r3, #0]
 802541a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 802541e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025422:	1e5a      	subs	r2, r3, #1
 8025424:	4613      	mov	r3, r2
 8025426:	011b      	lsls	r3, r3, #4
 8025428:	1a9b      	subs	r3, r3, r2
 802542a:	009b      	lsls	r3, r3, #2
 802542c:	33f0      	adds	r3, #240	; 0xf0
 802542e:	443b      	add	r3, r7
 8025430:	3b80      	subs	r3, #128	; 0x80
 8025432:	681b      	ldr	r3, [r3, #0]
 8025434:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8025438:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802543c:	1e5a      	subs	r2, r3, #1
 802543e:	4613      	mov	r3, r2
 8025440:	011b      	lsls	r3, r3, #4
 8025442:	1a9b      	subs	r3, r3, r2
 8025444:	009b      	lsls	r3, r3, #2
 8025446:	33f0      	adds	r3, #240	; 0xf0
 8025448:	443b      	add	r3, r7
 802544a:	3b7c      	subs	r3, #124	; 0x7c
 802544c:	881b      	ldrh	r3, [r3, #0]
 802544e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8025452:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025456:	1e5a      	subs	r2, r3, #1
 8025458:	4613      	mov	r3, r2
 802545a:	011b      	lsls	r3, r3, #4
 802545c:	1a9b      	subs	r3, r3, r2
 802545e:	009b      	lsls	r3, r3, #2
 8025460:	33f0      	adds	r3, #240	; 0xf0
 8025462:	443b      	add	r3, r7
 8025464:	3b7a      	subs	r3, #122	; 0x7a
 8025466:	881b      	ldrh	r3, [r3, #0]
 8025468:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 802546c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025470:	1e5a      	subs	r2, r3, #1
 8025472:	4613      	mov	r3, r2
 8025474:	011b      	lsls	r3, r3, #4
 8025476:	1a9b      	subs	r3, r3, r2
 8025478:	009b      	lsls	r3, r3, #2
 802547a:	33f0      	adds	r3, #240	; 0xf0
 802547c:	443b      	add	r3, r7
 802547e:	3b78      	subs	r3, #120	; 0x78
 8025480:	881b      	ldrh	r3, [r3, #0]
 8025482:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8025486:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802548a:	1e5a      	subs	r2, r3, #1
 802548c:	4613      	mov	r3, r2
 802548e:	011b      	lsls	r3, r3, #4
 8025490:	1a9b      	subs	r3, r3, r2
 8025492:	009b      	lsls	r3, r3, #2
 8025494:	33f0      	adds	r3, #240	; 0xf0
 8025496:	443b      	add	r3, r7
 8025498:	3b74      	subs	r3, #116	; 0x74
 802549a:	681b      	ldr	r3, [r3, #0]
 802549c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80254a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80254a4:	1e5a      	subs	r2, r3, #1
 80254a6:	4613      	mov	r3, r2
 80254a8:	011b      	lsls	r3, r3, #4
 80254aa:	1a9b      	subs	r3, r3, r2
 80254ac:	009b      	lsls	r3, r3, #2
 80254ae:	33f0      	adds	r3, #240	; 0xf0
 80254b0:	443b      	add	r3, r7
 80254b2:	3b70      	subs	r3, #112	; 0x70
 80254b4:	681b      	ldr	r3, [r3, #0]
 80254b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80254ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80254be:	1e5a      	subs	r2, r3, #1
 80254c0:	4613      	mov	r3, r2
 80254c2:	011b      	lsls	r3, r3, #4
 80254c4:	1a9b      	subs	r3, r3, r2
 80254c6:	009b      	lsls	r3, r3, #2
 80254c8:	33f0      	adds	r3, #240	; 0xf0
 80254ca:	443b      	add	r3, r7
 80254cc:	3b6c      	subs	r3, #108	; 0x6c
 80254ce:	681b      	ldr	r3, [r3, #0]
 80254d0:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80254d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80254d6:	1e5a      	subs	r2, r3, #1
 80254d8:	4613      	mov	r3, r2
 80254da:	011b      	lsls	r3, r3, #4
 80254dc:	1a9b      	subs	r3, r3, r2
 80254de:	009b      	lsls	r3, r3, #2
 80254e0:	33f0      	adds	r3, #240	; 0xf0
 80254e2:	443b      	add	r3, r7
 80254e4:	3b68      	subs	r3, #104	; 0x68
 80254e6:	681b      	ldr	r3, [r3, #0]
 80254e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80254ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80254f0:	1e5a      	subs	r2, r3, #1
 80254f2:	4613      	mov	r3, r2
 80254f4:	011b      	lsls	r3, r3, #4
 80254f6:	1a9b      	subs	r3, r3, r2
 80254f8:	009b      	lsls	r3, r3, #2
 80254fa:	33f0      	adds	r3, #240	; 0xf0
 80254fc:	443b      	add	r3, r7
 80254fe:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8025502:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8025506:	3204      	adds	r2, #4
 8025508:	e892 0003 	ldmia.w	r2, {r0, r1}
 802550c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8025510:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025514:	3b01      	subs	r3, #1
 8025516:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 802551a:	e596      	b.n	802504a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 802551c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8025520:	4618      	mov	r0, r3
 8025522:	37f4      	adds	r7, #244	; 0xf4
 8025524:	46bd      	mov	sp, r7
 8025526:	bd90      	pop	{r4, r7, pc}

08025528 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8025528:	b590      	push	{r4, r7, lr}
 802552a:	b09f      	sub	sp, #124	; 0x7c
 802552c:	af04      	add	r7, sp, #16
 802552e:	60f8      	str	r0, [r7, #12]
 8025530:	60b9      	str	r1, [r7, #8]
 8025532:	607a      	str	r2, [r7, #4]
 8025534:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8025536:	f04f 33ff 	mov.w	r3, #4294967295
 802553a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 802553c:	687b      	ldr	r3, [r7, #4]
 802553e:	681a      	ldr	r2, [r3, #0]
 8025540:	68fb      	ldr	r3, [r7, #12]
 8025542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025544:	6a1b      	ldr	r3, [r3, #32]
 8025546:	429a      	cmp	r2, r3
 8025548:	d207      	bcs.n	802555a <lfs_dir_fetchmatch+0x32>
 802554a:	687b      	ldr	r3, [r7, #4]
 802554c:	3304      	adds	r3, #4
 802554e:	681a      	ldr	r2, [r3, #0]
 8025550:	68fb      	ldr	r3, [r7, #12]
 8025552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025554:	6a1b      	ldr	r3, [r3, #32]
 8025556:	429a      	cmp	r2, r3
 8025558:	d302      	bcc.n	8025560 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 802555a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802555e:	e342      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8025560:	2300      	movs	r3, #0
 8025562:	633b      	str	r3, [r7, #48]	; 0x30
 8025564:	2300      	movs	r3, #0
 8025566:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8025568:	2300      	movs	r3, #0
 802556a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 802556c:	2300      	movs	r3, #0
 802556e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025570:	e052      	b.n	8025618 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8025572:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8025574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025576:	009b      	lsls	r3, r3, #2
 8025578:	687a      	ldr	r2, [r7, #4]
 802557a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 802557c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 802557e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8025582:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025584:	0092      	lsls	r2, r2, #2
 8025586:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8025588:	2104      	movs	r1, #4
 802558a:	9103      	str	r1, [sp, #12]
 802558c:	9202      	str	r2, [sp, #8]
 802558e:	2200      	movs	r2, #0
 8025590:	9201      	str	r2, [sp, #4]
 8025592:	9300      	str	r3, [sp, #0]
 8025594:	2304      	movs	r3, #4
 8025596:	4602      	mov	r2, r0
 8025598:	2100      	movs	r1, #0
 802559a:	68f8      	ldr	r0, [r7, #12]
 802559c:	f7fe fa6e 	bl	8023a7c <lfs_bd_read>
 80255a0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80255a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255a4:	009b      	lsls	r3, r3, #2
 80255a6:	3368      	adds	r3, #104	; 0x68
 80255a8:	443b      	add	r3, r7
 80255aa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80255ae:	4618      	mov	r0, r3
 80255b0:	f7fe f9f8 	bl	80239a4 <lfs_fromle32>
 80255b4:	4602      	mov	r2, r0
 80255b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255b8:	009b      	lsls	r3, r3, #2
 80255ba:	3368      	adds	r3, #104	; 0x68
 80255bc:	443b      	add	r3, r7
 80255be:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 80255c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80255c4:	2b00      	cmp	r3, #0
 80255c6:	d005      	beq.n	80255d4 <lfs_dir_fetchmatch+0xac>
 80255c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80255ca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80255ce:	d001      	beq.n	80255d4 <lfs_dir_fetchmatch+0xac>
            return err;
 80255d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80255d2:	e308      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 80255d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80255d6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80255da:	d01a      	beq.n	8025612 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80255dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255de:	009b      	lsls	r3, r3, #2
 80255e0:	3368      	adds	r3, #104	; 0x68
 80255e2:	443b      	add	r3, r7
 80255e4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80255e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255ea:	3301      	adds	r3, #1
 80255ec:	2b00      	cmp	r3, #0
 80255ee:	f003 0301 	and.w	r3, r3, #1
 80255f2:	bfb8      	it	lt
 80255f4:	425b      	neglt	r3, r3
 80255f6:	009b      	lsls	r3, r3, #2
 80255f8:	3368      	adds	r3, #104	; 0x68
 80255fa:	443b      	add	r3, r7
 80255fc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8025600:	4619      	mov	r1, r3
 8025602:	4610      	mov	r0, r2
 8025604:	f7fe f9c0 	bl	8023988 <lfs_scmp>
 8025608:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 802560a:	2b00      	cmp	r3, #0
 802560c:	dd01      	ble.n	8025612 <lfs_dir_fetchmatch+0xea>
            r = i;
 802560e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025610:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8025612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025614:	3301      	adds	r3, #1
 8025616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802561a:	2b01      	cmp	r3, #1
 802561c:	dda9      	ble.n	8025572 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 802561e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025620:	2b00      	cmp	r3, #0
 8025622:	f003 0301 	and.w	r3, r3, #1
 8025626:	bfb8      	it	lt
 8025628:	425b      	neglt	r3, r3
 802562a:	009b      	lsls	r3, r3, #2
 802562c:	687a      	ldr	r2, [r7, #4]
 802562e:	4413      	add	r3, r2
 8025630:	681a      	ldr	r2, [r3, #0]
 8025632:	68bb      	ldr	r3, [r7, #8]
 8025634:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8025636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025638:	3301      	adds	r3, #1
 802563a:	2b00      	cmp	r3, #0
 802563c:	f003 0301 	and.w	r3, r3, #1
 8025640:	bfb8      	it	lt
 8025642:	425b      	neglt	r3, r3
 8025644:	009b      	lsls	r3, r3, #2
 8025646:	687a      	ldr	r2, [r7, #4]
 8025648:	4413      	add	r3, r2
 802564a:	681a      	ldr	r2, [r3, #0]
 802564c:	68bb      	ldr	r3, [r7, #8]
 802564e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8025650:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025652:	2b00      	cmp	r3, #0
 8025654:	f003 0301 	and.w	r3, r3, #1
 8025658:	bfb8      	it	lt
 802565a:	425b      	neglt	r3, r3
 802565c:	009b      	lsls	r3, r3, #2
 802565e:	3368      	adds	r3, #104	; 0x68
 8025660:	443b      	add	r3, r7
 8025662:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025666:	68bb      	ldr	r3, [r7, #8]
 8025668:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 802566a:	68bb      	ldr	r3, [r7, #8]
 802566c:	2200      	movs	r2, #0
 802566e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8025670:	2300      	movs	r3, #0
 8025672:	65bb      	str	r3, [r7, #88]	; 0x58
 8025674:	e2a3      	b.n	8025bbe <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8025676:	2300      	movs	r3, #0
 8025678:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 802567a:	f04f 33ff 	mov.w	r3, #4294967295
 802567e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8025680:	2300      	movs	r3, #0
 8025682:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8025686:	4a96      	ldr	r2, [pc, #600]	; (80258e0 <lfs_dir_fetchmatch+0x3b8>)
 8025688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802568c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025690:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8025694:	2300      	movs	r3, #0
 8025696:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 802569a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802569c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 802569e:	68bb      	ldr	r3, [r7, #8]
 80256a0:	689b      	ldr	r3, [r3, #8]
 80256a2:	4618      	mov	r0, r3
 80256a4:	f7fe f989 	bl	80239ba <lfs_tole32>
 80256a8:	4602      	mov	r2, r0
 80256aa:	68bb      	ldr	r3, [r7, #8]
 80256ac:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80256ae:	68bb      	ldr	r3, [r7, #8]
 80256b0:	3308      	adds	r3, #8
 80256b2:	2204      	movs	r2, #4
 80256b4:	4619      	mov	r1, r3
 80256b6:	f04f 30ff 	mov.w	r0, #4294967295
 80256ba:	f005 fbc9 	bl	802ae50 <lfs_crc>
 80256be:	4603      	mov	r3, r0
 80256c0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 80256c2:	68bb      	ldr	r3, [r7, #8]
 80256c4:	689b      	ldr	r3, [r3, #8]
 80256c6:	4618      	mov	r0, r3
 80256c8:	f7fe f96c 	bl	80239a4 <lfs_fromle32>
 80256cc:	4602      	mov	r2, r0
 80256ce:	68bb      	ldr	r3, [r7, #8]
 80256d0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80256d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80256d4:	f7fe fe29 	bl	802432a <lfs_tag_dsize>
 80256d8:	4602      	mov	r2, r0
 80256da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80256dc:	4413      	add	r3, r2
 80256de:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80256e0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80256e2:	68fb      	ldr	r3, [r7, #12]
 80256e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80256e6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80256e8:	68bb      	ldr	r3, [r7, #8]
 80256ea:	681b      	ldr	r3, [r3, #0]
 80256ec:	2204      	movs	r2, #4
 80256ee:	9203      	str	r2, [sp, #12]
 80256f0:	f107 0220 	add.w	r2, r7, #32
 80256f4:	9202      	str	r2, [sp, #8]
 80256f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80256f8:	9201      	str	r2, [sp, #4]
 80256fa:	9300      	str	r3, [sp, #0]
 80256fc:	4603      	mov	r3, r0
 80256fe:	460a      	mov	r2, r1
 8025700:	2100      	movs	r1, #0
 8025702:	68f8      	ldr	r0, [r7, #12]
 8025704:	f7fe f9ba 	bl	8023a7c <lfs_bd_read>
 8025708:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 802570a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802570c:	2b00      	cmp	r3, #0
 802570e:	d009      	beq.n	8025724 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8025710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025712:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025716:	d103      	bne.n	8025720 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8025718:	68bb      	ldr	r3, [r7, #8]
 802571a:	2200      	movs	r2, #0
 802571c:	759a      	strb	r2, [r3, #22]
                    break;
 802571e:	e1d6      	b.n	8025ace <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8025720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025722:	e260      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8025724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025726:	f107 0120 	add.w	r1, r7, #32
 802572a:	2204      	movs	r2, #4
 802572c:	4618      	mov	r0, r3
 802572e:	f005 fb8f 	bl	802ae50 <lfs_crc>
 8025732:	4603      	mov	r3, r0
 8025734:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8025736:	6a3b      	ldr	r3, [r7, #32]
 8025738:	4618      	mov	r0, r3
 802573a:	f7fe f94a 	bl	80239d2 <lfs_frombe32>
 802573e:	4602      	mov	r2, r0
 8025740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025742:	4053      	eors	r3, r2
 8025744:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8025746:	6a3b      	ldr	r3, [r7, #32]
 8025748:	4618      	mov	r0, r3
 802574a:	f7fe fd76 	bl	802423a <lfs_tag_isvalid>
 802574e:	4603      	mov	r3, r0
 8025750:	f083 0301 	eor.w	r3, r3, #1
 8025754:	b2db      	uxtb	r3, r3
 8025756:	2b00      	cmp	r3, #0
 8025758:	d01b      	beq.n	8025792 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802575a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802575c:	f7fe fd8e 	bl	802427c <lfs_tag_type1>
 8025760:	4603      	mov	r3, r0
 8025762:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025766:	d10d      	bne.n	8025784 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8025768:	68bb      	ldr	r3, [r7, #8]
 802576a:	68db      	ldr	r3, [r3, #12]
 802576c:	68fa      	ldr	r2, [r7, #12]
 802576e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025770:	6992      	ldr	r2, [r2, #24]
 8025772:	fbb3 f1f2 	udiv	r1, r3, r2
 8025776:	fb01 f202 	mul.w	r2, r1, r2
 802577a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802577c:	2b00      	cmp	r3, #0
 802577e:	d101      	bne.n	8025784 <lfs_dir_fetchmatch+0x25c>
 8025780:	2301      	movs	r3, #1
 8025782:	e000      	b.n	8025786 <lfs_dir_fetchmatch+0x25e>
 8025784:	2300      	movs	r3, #0
 8025786:	f003 0301 	and.w	r3, r3, #1
 802578a:	b2da      	uxtb	r2, r3
 802578c:	68bb      	ldr	r3, [r7, #8]
 802578e:	759a      	strb	r2, [r3, #22]
                break;
 8025790:	e19d      	b.n	8025ace <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8025792:	6a3b      	ldr	r3, [r7, #32]
 8025794:	4618      	mov	r0, r3
 8025796:	f7fe fdc8 	bl	802432a <lfs_tag_dsize>
 802579a:	4602      	mov	r2, r0
 802579c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802579e:	441a      	add	r2, r3
 80257a0:	68fb      	ldr	r3, [r7, #12]
 80257a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80257a4:	69db      	ldr	r3, [r3, #28]
 80257a6:	429a      	cmp	r2, r3
 80257a8:	d903      	bls.n	80257b2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 80257aa:	68bb      	ldr	r3, [r7, #8]
 80257ac:	2200      	movs	r2, #0
 80257ae:	759a      	strb	r2, [r3, #22]
                break;
 80257b0:	e18d      	b.n	8025ace <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 80257b2:	6a3b      	ldr	r3, [r7, #32]
 80257b4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80257b6:	6a3b      	ldr	r3, [r7, #32]
 80257b8:	4618      	mov	r0, r3
 80257ba:	f7fe fd5f 	bl	802427c <lfs_tag_type1>
 80257be:	4603      	mov	r3, r0
 80257c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80257c4:	d164      	bne.n	8025890 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80257c6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80257c8:	68fb      	ldr	r3, [r7, #12]
 80257ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80257cc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80257ce:	68bb      	ldr	r3, [r7, #8]
 80257d0:	681b      	ldr	r3, [r3, #0]
 80257d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80257d4:	3204      	adds	r2, #4
 80257d6:	2104      	movs	r1, #4
 80257d8:	9103      	str	r1, [sp, #12]
 80257da:	f107 011c 	add.w	r1, r7, #28
 80257de:	9102      	str	r1, [sp, #8]
 80257e0:	9201      	str	r2, [sp, #4]
 80257e2:	9300      	str	r3, [sp, #0]
 80257e4:	4623      	mov	r3, r4
 80257e6:	4602      	mov	r2, r0
 80257e8:	2100      	movs	r1, #0
 80257ea:	68f8      	ldr	r0, [r7, #12]
 80257ec:	f7fe f946 	bl	8023a7c <lfs_bd_read>
 80257f0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80257f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80257f4:	2b00      	cmp	r3, #0
 80257f6:	d009      	beq.n	802580c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80257f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80257fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80257fe:	d103      	bne.n	8025808 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8025800:	68bb      	ldr	r3, [r7, #8]
 8025802:	2200      	movs	r2, #0
 8025804:	759a      	strb	r2, [r3, #22]
                        break;
 8025806:	e162      	b.n	8025ace <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 802580a:	e1ec      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 802580c:	69fb      	ldr	r3, [r7, #28]
 802580e:	4618      	mov	r0, r3
 8025810:	f7fe f8c8 	bl	80239a4 <lfs_fromle32>
 8025814:	4603      	mov	r3, r0
 8025816:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8025818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802581a:	69fb      	ldr	r3, [r7, #28]
 802581c:	429a      	cmp	r2, r3
 802581e:	d003      	beq.n	8025828 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8025820:	68bb      	ldr	r3, [r7, #8]
 8025822:	2200      	movs	r2, #0
 8025824:	759a      	strb	r2, [r3, #22]
                    break;
 8025826:	e152      	b.n	8025ace <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8025828:	6a3b      	ldr	r3, [r7, #32]
 802582a:	4618      	mov	r0, r3
 802582c:	f7fe fd46 	bl	80242bc <lfs_tag_chunk>
 8025830:	4603      	mov	r3, r0
 8025832:	07db      	lsls	r3, r3, #31
 8025834:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025836:	4053      	eors	r3, r2
 8025838:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 802583a:	68fb      	ldr	r3, [r7, #12]
 802583c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802583e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8025842:	2204      	movs	r2, #4
 8025844:	4618      	mov	r0, r3
 8025846:	f005 fb03 	bl	802ae50 <lfs_crc>
 802584a:	4602      	mov	r2, r0
 802584c:	68fb      	ldr	r3, [r7, #12]
 802584e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025852:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8025854:	6a3b      	ldr	r3, [r7, #32]
 8025856:	4618      	mov	r0, r3
 8025858:	f7fe fd67 	bl	802432a <lfs_tag_dsize>
 802585c:	4602      	mov	r2, r0
 802585e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025860:	441a      	add	r2, r3
 8025862:	68bb      	ldr	r3, [r7, #8]
 8025864:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8025866:	68bb      	ldr	r3, [r7, #8]
 8025868:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802586a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 802586c:	68bb      	ldr	r3, [r7, #8]
 802586e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8025872:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8025874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025876:	68bb      	ldr	r3, [r7, #8]
 8025878:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 802587a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802587c:	68bb      	ldr	r3, [r7, #8]
 802587e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8025880:	68bb      	ldr	r3, [r7, #8]
 8025882:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8025886:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8025888:	f04f 33ff 	mov.w	r3, #4294967295
 802588c:	627b      	str	r3, [r7, #36]	; 0x24
 802588e:	e720      	b.n	80256d2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025890:	2304      	movs	r3, #4
 8025892:	647b      	str	r3, [r7, #68]	; 0x44
 8025894:	e032      	b.n	80258fc <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8025896:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025898:	68fb      	ldr	r3, [r7, #12]
 802589a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802589c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802589e:	68bb      	ldr	r3, [r7, #8]
 80258a0:	681b      	ldr	r3, [r3, #0]
 80258a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80258a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80258a6:	440a      	add	r2, r1
 80258a8:	2101      	movs	r1, #1
 80258aa:	9103      	str	r1, [sp, #12]
 80258ac:	f107 011b 	add.w	r1, r7, #27
 80258b0:	9102      	str	r1, [sp, #8]
 80258b2:	9201      	str	r2, [sp, #4]
 80258b4:	9300      	str	r3, [sp, #0]
 80258b6:	4623      	mov	r3, r4
 80258b8:	4602      	mov	r2, r0
 80258ba:	2100      	movs	r1, #0
 80258bc:	68f8      	ldr	r0, [r7, #12]
 80258be:	f7fe f8dd 	bl	8023a7c <lfs_bd_read>
 80258c2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 80258c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80258c6:	2b00      	cmp	r3, #0
 80258c8:	d00c      	beq.n	80258e4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 80258ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80258cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80258d0:	d103      	bne.n	80258da <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 80258d2:	68bb      	ldr	r3, [r7, #8]
 80258d4:	2200      	movs	r2, #0
 80258d6:	759a      	strb	r2, [r3, #22]
 80258d8:	e018      	b.n	802590c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 80258da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80258dc:	e183      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
 80258de:	bf00      	nop
 80258e0:	08033998 	.word	0x08033998
                }

                crc = lfs_crc(crc, &dat, 1);
 80258e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80258e6:	f107 011b 	add.w	r1, r7, #27
 80258ea:	2201      	movs	r2, #1
 80258ec:	4618      	mov	r0, r3
 80258ee:	f005 faaf 	bl	802ae50 <lfs_crc>
 80258f2:	4603      	mov	r3, r0
 80258f4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80258f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80258f8:	3301      	adds	r3, #1
 80258fa:	647b      	str	r3, [r7, #68]	; 0x44
 80258fc:	6a3b      	ldr	r3, [r7, #32]
 80258fe:	4618      	mov	r0, r3
 8025900:	f7fe fd13 	bl	802432a <lfs_tag_dsize>
 8025904:	4602      	mov	r2, r0
 8025906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025908:	4293      	cmp	r3, r2
 802590a:	d3c4      	bcc.n	8025896 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 802590c:	6a3b      	ldr	r3, [r7, #32]
 802590e:	4618      	mov	r0, r3
 8025910:	f7fe fcb4 	bl	802427c <lfs_tag_type1>
 8025914:	4603      	mov	r3, r0
 8025916:	2b00      	cmp	r3, #0
 8025918:	d113      	bne.n	8025942 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 802591a:	6a3b      	ldr	r3, [r7, #32]
 802591c:	4618      	mov	r0, r3
 802591e:	f7fe fce7 	bl	80242f0 <lfs_tag_id>
 8025922:	4603      	mov	r3, r0
 8025924:	461a      	mov	r2, r3
 8025926:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802592a:	4293      	cmp	r3, r2
 802592c:	f200 8083 	bhi.w	8025a36 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8025930:	6a3b      	ldr	r3, [r7, #32]
 8025932:	4618      	mov	r0, r3
 8025934:	f7fe fcdc 	bl	80242f0 <lfs_tag_id>
 8025938:	4603      	mov	r3, r0
 802593a:	3301      	adds	r3, #1
 802593c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8025940:	e079      	b.n	8025a36 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8025942:	6a3b      	ldr	r3, [r7, #32]
 8025944:	4618      	mov	r0, r3
 8025946:	f7fe fc99 	bl	802427c <lfs_tag_type1>
 802594a:	4603      	mov	r3, r0
 802594c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025950:	d134      	bne.n	80259bc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025952:	6a3b      	ldr	r3, [r7, #32]
 8025954:	4618      	mov	r0, r3
 8025956:	f7fe fcbe 	bl	80242d6 <lfs_tag_splice>
 802595a:	4603      	mov	r3, r0
 802595c:	b29a      	uxth	r2, r3
 802595e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8025962:	4413      	add	r3, r2
 8025964:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8025968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802596a:	4ba1      	ldr	r3, [pc, #644]	; (8025bf0 <lfs_dir_fetchmatch+0x6c8>)
 802596c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 802596e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8025972:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8025976:	6a3a      	ldr	r2, [r7, #32]
 8025978:	4293      	cmp	r3, r2
 802597a:	d104      	bne.n	8025986 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 802597c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802597e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025982:	64bb      	str	r3, [r7, #72]	; 0x48
 8025984:	e057      	b.n	8025a36 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8025986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025988:	f1b3 3fff 	cmp.w	r3, #4294967295
 802598c:	d053      	beq.n	8025a36 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 802598e:	6a3b      	ldr	r3, [r7, #32]
 8025990:	4618      	mov	r0, r3
 8025992:	f7fe fcad 	bl	80242f0 <lfs_tag_id>
 8025996:	4603      	mov	r3, r0
 8025998:	461c      	mov	r4, r3
 802599a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802599c:	4618      	mov	r0, r3
 802599e:	f7fe fca7 	bl	80242f0 <lfs_tag_id>
 80259a2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80259a4:	429c      	cmp	r4, r3
 80259a6:	d846      	bhi.n	8025a36 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80259a8:	6a3b      	ldr	r3, [r7, #32]
 80259aa:	4618      	mov	r0, r3
 80259ac:	f7fe fc93 	bl	80242d6 <lfs_tag_splice>
 80259b0:	4603      	mov	r3, r0
 80259b2:	029a      	lsls	r2, r3, #10
 80259b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80259b6:	4413      	add	r3, r2
 80259b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80259ba:	e03c      	b.n	8025a36 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80259bc:	6a3b      	ldr	r3, [r7, #32]
 80259be:	4618      	mov	r0, r3
 80259c0:	f7fe fc5c 	bl	802427c <lfs_tag_type1>
 80259c4:	4603      	mov	r3, r0
 80259c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80259ca:	d134      	bne.n	8025a36 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80259cc:	6a3b      	ldr	r3, [r7, #32]
 80259ce:	4618      	mov	r0, r3
 80259d0:	f7fe fc74 	bl	80242bc <lfs_tag_chunk>
 80259d4:	4603      	mov	r3, r0
 80259d6:	f003 0301 	and.w	r3, r3, #1
 80259da:	2b00      	cmp	r3, #0
 80259dc:	bf14      	ite	ne
 80259de:	2301      	movne	r3, #1
 80259e0:	2300      	moveq	r3, #0
 80259e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80259e6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80259e8:	68fb      	ldr	r3, [r7, #12]
 80259ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80259ec:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80259ee:	68bb      	ldr	r3, [r7, #8]
 80259f0:	681b      	ldr	r3, [r3, #0]
 80259f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80259f4:	3204      	adds	r2, #4
 80259f6:	2108      	movs	r1, #8
 80259f8:	9103      	str	r1, [sp, #12]
 80259fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80259fe:	9102      	str	r1, [sp, #8]
 8025a00:	9201      	str	r2, [sp, #4]
 8025a02:	9300      	str	r3, [sp, #0]
 8025a04:	4623      	mov	r3, r4
 8025a06:	4602      	mov	r2, r0
 8025a08:	2100      	movs	r1, #0
 8025a0a:	68f8      	ldr	r0, [r7, #12]
 8025a0c:	f7fe f836 	bl	8023a7c <lfs_bd_read>
 8025a10:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8025a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025a14:	2b00      	cmp	r3, #0
 8025a16:	d009      	beq.n	8025a2c <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8025a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025a1a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025a1e:	d103      	bne.n	8025a28 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8025a20:	68bb      	ldr	r3, [r7, #8]
 8025a22:	2200      	movs	r2, #0
 8025a24:	759a      	strb	r2, [r3, #22]
                        break;
 8025a26:	e052      	b.n	8025ace <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025a2a:	e0dc      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 8025a2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025a30:	4618      	mov	r0, r3
 8025a32:	f7fe fbce 	bl	80241d2 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8025a36:	6a3a      	ldr	r2, [r7, #32]
 8025a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8025a3a:	405a      	eors	r2, r3
 8025a3c:	683b      	ldr	r3, [r7, #0]
 8025a3e:	4013      	ands	r3, r2
 8025a40:	2b00      	cmp	r3, #0
 8025a42:	f47f ae46 	bne.w	80256d2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025a46:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8025a48:	68bb      	ldr	r3, [r7, #8]
 8025a4a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025a4c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8025a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025a50:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025a52:	617b      	str	r3, [r7, #20]
 8025a54:	f107 0210 	add.w	r2, r7, #16
 8025a58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8025a5c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8025a60:	4798      	blx	r3
 8025a62:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8025a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a66:	2b00      	cmp	r3, #0
 8025a68:	da09      	bge.n	8025a7e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8025a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a6c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025a70:	d103      	bne.n	8025a7a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8025a72:	68bb      	ldr	r3, [r7, #8]
 8025a74:	2200      	movs	r2, #0
 8025a76:	759a      	strb	r2, [r3, #22]
 8025a78:	e029      	b.n	8025ace <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8025a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8025a7c:	e0b3      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8025a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a80:	2b00      	cmp	r3, #0
 8025a82:	d102      	bne.n	8025a8a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8025a84:	6a3b      	ldr	r3, [r7, #32]
 8025a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a88:	e623      	b.n	80256d2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8025a8a:	6a3a      	ldr	r2, [r7, #32]
 8025a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a8e:	405a      	eors	r2, r3
 8025a90:	4b58      	ldr	r3, [pc, #352]	; (8025bf4 <lfs_dir_fetchmatch+0x6cc>)
 8025a92:	4013      	ands	r3, r2
 8025a94:	2b00      	cmp	r3, #0
 8025a96:	d103      	bne.n	8025aa0 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8025a98:	f04f 33ff 	mov.w	r3, #4294967295
 8025a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a9e:	e618      	b.n	80256d2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8025aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025aa2:	2b02      	cmp	r3, #2
 8025aa4:	f47f ae15 	bne.w	80256d2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8025aa8:	6a3b      	ldr	r3, [r7, #32]
 8025aaa:	4618      	mov	r0, r3
 8025aac:	f7fe fc20 	bl	80242f0 <lfs_tag_id>
 8025ab0:	4603      	mov	r3, r0
 8025ab2:	461c      	mov	r4, r3
 8025ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025ab6:	4618      	mov	r0, r3
 8025ab8:	f7fe fc1a 	bl	80242f0 <lfs_tag_id>
 8025abc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8025abe:	429c      	cmp	r4, r3
 8025ac0:	f63f ae07 	bhi.w	80256d2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8025ac4:	6a3b      	ldr	r3, [r7, #32]
 8025ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8025acc:	e601      	b.n	80256d2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8025ace:	68bb      	ldr	r3, [r7, #8]
 8025ad0:	68db      	ldr	r3, [r3, #12]
 8025ad2:	2b00      	cmp	r3, #0
 8025ad4:	d100      	bne.n	8025ad8 <lfs_dir_fetchmatch+0x5b0>
 8025ad6:	e05d      	b.n	8025b94 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8025ad8:	68fb      	ldr	r3, [r7, #12]
 8025ada:	333c      	adds	r3, #60	; 0x3c
 8025adc:	68ba      	ldr	r2, [r7, #8]
 8025ade:	4611      	mov	r1, r2
 8025ae0:	4618      	mov	r0, r3
 8025ae2:	f7fe fcad 	bl	8024440 <lfs_gstate_hasmovehere>
 8025ae6:	4603      	mov	r3, r0
 8025ae8:	2b00      	cmp	r3, #0
 8025aea:	d028      	beq.n	8025b3e <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8025aec:	68fb      	ldr	r3, [r7, #12]
 8025aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025af0:	4618      	mov	r0, r3
 8025af2:	f7fe fbfd 	bl	80242f0 <lfs_tag_id>
 8025af6:	4603      	mov	r3, r0
 8025af8:	461c      	mov	r4, r3
 8025afa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025afc:	4618      	mov	r0, r3
 8025afe:	f7fe fbf7 	bl	80242f0 <lfs_tag_id>
 8025b02:	4603      	mov	r3, r0
 8025b04:	429c      	cmp	r4, r3
 8025b06:	d104      	bne.n	8025b12 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8025b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025b0e:	667b      	str	r3, [r7, #100]	; 0x64
 8025b10:	e015      	b.n	8025b3e <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8025b12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025b18:	d011      	beq.n	8025b3e <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8025b1a:	68fb      	ldr	r3, [r7, #12]
 8025b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025b1e:	4618      	mov	r0, r3
 8025b20:	f7fe fbe6 	bl	80242f0 <lfs_tag_id>
 8025b24:	4603      	mov	r3, r0
 8025b26:	461c      	mov	r4, r3
 8025b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b2a:	4618      	mov	r0, r3
 8025b2c:	f7fe fbe0 	bl	80242f0 <lfs_tag_id>
 8025b30:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8025b32:	429c      	cmp	r4, r3
 8025b34:	d203      	bcs.n	8025b3e <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8025b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b38:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8025b3c:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8025b3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025b40:	2b00      	cmp	r3, #0
 8025b42:	d00f      	beq.n	8025b64 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8025b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b46:	4618      	mov	r0, r3
 8025b48:	f7fe fbd2 	bl	80242f0 <lfs_tag_id>
 8025b4c:	4603      	mov	r3, r0
 8025b4e:	461a      	mov	r2, r3
 8025b50:	68bb      	ldr	r3, [r7, #8]
 8025b52:	8a9b      	ldrh	r3, [r3, #20]
 8025b54:	4619      	mov	r1, r3
 8025b56:	4610      	mov	r0, r2
 8025b58:	f7fd feb4 	bl	80238c4 <lfs_min>
 8025b5c:	4603      	mov	r3, r0
 8025b5e:	b29a      	uxth	r2, r3
 8025b60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025b62:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8025b64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b66:	4618      	mov	r0, r3
 8025b68:	f7fe fb67 	bl	802423a <lfs_tag_isvalid>
 8025b6c:	4603      	mov	r3, r0
 8025b6e:	2b00      	cmp	r3, #0
 8025b70:	d001      	beq.n	8025b76 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8025b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b74:	e037      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8025b76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b78:	4618      	mov	r0, r3
 8025b7a:	f7fe fbb9 	bl	80242f0 <lfs_tag_id>
 8025b7e:	4603      	mov	r3, r0
 8025b80:	461a      	mov	r2, r3
 8025b82:	68bb      	ldr	r3, [r7, #8]
 8025b84:	8a9b      	ldrh	r3, [r3, #20]
 8025b86:	429a      	cmp	r2, r3
 8025b88:	d202      	bcs.n	8025b90 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8025b8a:	f06f 0301 	mvn.w	r3, #1
 8025b8e:	e02a      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8025b90:	2300      	movs	r3, #0
 8025b92:	e028      	b.n	8025be6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8025b94:	68bb      	ldr	r3, [r7, #8]
 8025b96:	4618      	mov	r0, r3
 8025b98:	f7fe fa94 	bl	80240c4 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8025b9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025b9e:	3301      	adds	r3, #1
 8025ba0:	2b00      	cmp	r3, #0
 8025ba2:	f003 0301 	and.w	r3, r3, #1
 8025ba6:	bfb8      	it	lt
 8025ba8:	425b      	neglt	r3, r3
 8025baa:	009b      	lsls	r3, r3, #2
 8025bac:	3368      	adds	r3, #104	; 0x68
 8025bae:	443b      	add	r3, r7
 8025bb0:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025bb4:	68bb      	ldr	r3, [r7, #8]
 8025bb6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8025bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025bba:	3301      	adds	r3, #1
 8025bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8025bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025bc0:	2b01      	cmp	r3, #1
 8025bc2:	f77f ad58 	ble.w	8025676 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8025bc6:	68bb      	ldr	r3, [r7, #8]
 8025bc8:	681a      	ldr	r2, [r3, #0]
 8025bca:	68bb      	ldr	r3, [r7, #8]
 8025bcc:	685b      	ldr	r3, [r3, #4]
 8025bce:	490a      	ldr	r1, [pc, #40]	; (8025bf8 <lfs_dir_fetchmatch+0x6d0>)
 8025bd0:	9101      	str	r1, [sp, #4]
 8025bd2:	9300      	str	r3, [sp, #0]
 8025bd4:	4613      	mov	r3, r2
 8025bd6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8025bda:	4908      	ldr	r1, [pc, #32]	; (8025bfc <lfs_dir_fetchmatch+0x6d4>)
 8025bdc:	4808      	ldr	r0, [pc, #32]	; (8025c00 <lfs_dir_fetchmatch+0x6d8>)
 8025bde:	f007 fdef 	bl	802d7c0 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8025be2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8025be6:	4618      	mov	r0, r3
 8025be8:	376c      	adds	r7, #108	; 0x6c
 8025bea:	46bd      	mov	sp, r7
 8025bec:	bd90      	pop	{r4, r7, pc}
 8025bee:	bf00      	nop
 8025bf0:	000ffc00 	.word	0x000ffc00
 8025bf4:	7ffffc00 	.word	0x7ffffc00
 8025bf8:	08033954 	.word	0x08033954
 8025bfc:	08033840 	.word	0x08033840
 8025c00:	08033960 	.word	0x08033960

08025c04 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8025c04:	b580      	push	{r7, lr}
 8025c06:	b088      	sub	sp, #32
 8025c08:	af04      	add	r7, sp, #16
 8025c0a:	60f8      	str	r0, [r7, #12]
 8025c0c:	60b9      	str	r1, [r7, #8]
 8025c0e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8025c10:	2300      	movs	r3, #0
 8025c12:	9303      	str	r3, [sp, #12]
 8025c14:	2300      	movs	r3, #0
 8025c16:	9302      	str	r3, [sp, #8]
 8025c18:	2300      	movs	r3, #0
 8025c1a:	9301      	str	r3, [sp, #4]
 8025c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8025c20:	9300      	str	r3, [sp, #0]
 8025c22:	f04f 33ff 	mov.w	r3, #4294967295
 8025c26:	687a      	ldr	r2, [r7, #4]
 8025c28:	68b9      	ldr	r1, [r7, #8]
 8025c2a:	68f8      	ldr	r0, [r7, #12]
 8025c2c:	f7ff fc7c 	bl	8025528 <lfs_dir_fetchmatch>
 8025c30:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8025c32:	4618      	mov	r0, r3
 8025c34:	3710      	adds	r7, #16
 8025c36:	46bd      	mov	sp, r7
 8025c38:	bd80      	pop	{r7, pc}
	...

08025c3c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8025c3c:	b580      	push	{r7, lr}
 8025c3e:	b08a      	sub	sp, #40	; 0x28
 8025c40:	af02      	add	r7, sp, #8
 8025c42:	60f8      	str	r0, [r7, #12]
 8025c44:	60b9      	str	r1, [r7, #8]
 8025c46:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8025c48:	f107 0310 	add.w	r3, r7, #16
 8025c4c:	9300      	str	r3, [sp, #0]
 8025c4e:	4b12      	ldr	r3, [pc, #72]	; (8025c98 <lfs_dir_getgstate+0x5c>)
 8025c50:	4a12      	ldr	r2, [pc, #72]	; (8025c9c <lfs_dir_getgstate+0x60>)
 8025c52:	68b9      	ldr	r1, [r7, #8]
 8025c54:	68f8      	ldr	r0, [r7, #12]
 8025c56:	f7fe ff35 	bl	8024ac4 <lfs_dir_get>
 8025c5a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8025c5c:	69fb      	ldr	r3, [r7, #28]
 8025c5e:	2b00      	cmp	r3, #0
 8025c60:	da05      	bge.n	8025c6e <lfs_dir_getgstate+0x32>
 8025c62:	69fb      	ldr	r3, [r7, #28]
 8025c64:	f113 0f02 	cmn.w	r3, #2
 8025c68:	d001      	beq.n	8025c6e <lfs_dir_getgstate+0x32>
        return res;
 8025c6a:	69fb      	ldr	r3, [r7, #28]
 8025c6c:	e00f      	b.n	8025c8e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8025c6e:	69fb      	ldr	r3, [r7, #28]
 8025c70:	f113 0f02 	cmn.w	r3, #2
 8025c74:	d00a      	beq.n	8025c8c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025c76:	f107 0310 	add.w	r3, r7, #16
 8025c7a:	4618      	mov	r0, r3
 8025c7c:	f7fe fc00 	bl	8024480 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025c80:	f107 0310 	add.w	r3, r7, #16
 8025c84:	4619      	mov	r1, r3
 8025c86:	6878      	ldr	r0, [r7, #4]
 8025c88:	f7fe fb63 	bl	8024352 <lfs_gstate_xor>
    }

    return 0;
 8025c8c:	2300      	movs	r3, #0
}
 8025c8e:	4618      	mov	r0, r3
 8025c90:	3720      	adds	r7, #32
 8025c92:	46bd      	mov	sp, r7
 8025c94:	bd80      	pop	{r7, pc}
 8025c96:	bf00      	nop
 8025c98:	7ff0000c 	.word	0x7ff0000c
 8025c9c:	7ff00000 	.word	0x7ff00000

08025ca0 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8025ca0:	b580      	push	{r7, lr}
 8025ca2:	b08a      	sub	sp, #40	; 0x28
 8025ca4:	af02      	add	r7, sp, #8
 8025ca6:	60f8      	str	r0, [r7, #12]
 8025ca8:	60b9      	str	r1, [r7, #8]
 8025caa:	603b      	str	r3, [r7, #0]
 8025cac:	4613      	mov	r3, r2
 8025cae:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8025cb0:	88fb      	ldrh	r3, [r7, #6]
 8025cb2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025cb6:	4293      	cmp	r3, r2
 8025cb8:	d10b      	bne.n	8025cd2 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8025cba:	683b      	ldr	r3, [r7, #0]
 8025cbc:	3308      	adds	r3, #8
 8025cbe:	4932      	ldr	r1, [pc, #200]	; (8025d88 <lfs_dir_getinfo+0xe8>)
 8025cc0:	461a      	mov	r2, r3
 8025cc2:	460b      	mov	r3, r1
 8025cc4:	881b      	ldrh	r3, [r3, #0]
 8025cc6:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8025cc8:	683b      	ldr	r3, [r7, #0]
 8025cca:	2202      	movs	r2, #2
 8025ccc:	701a      	strb	r2, [r3, #0]
        return 0;
 8025cce:	2300      	movs	r3, #0
 8025cd0:	e055      	b.n	8025d7e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025cd2:	88fb      	ldrh	r3, [r7, #6]
 8025cd4:	029a      	lsls	r2, r3, #10
 8025cd6:	68fb      	ldr	r3, [r7, #12]
 8025cd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025cda:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025cdc:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025cde:	683b      	ldr	r3, [r7, #0]
 8025ce0:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025ce2:	9300      	str	r3, [sp, #0]
 8025ce4:	4613      	mov	r3, r2
 8025ce6:	4a29      	ldr	r2, [pc, #164]	; (8025d8c <lfs_dir_getinfo+0xec>)
 8025ce8:	68b9      	ldr	r1, [r7, #8]
 8025cea:	68f8      	ldr	r0, [r7, #12]
 8025cec:	f7fe feea 	bl	8024ac4 <lfs_dir_get>
 8025cf0:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025cf2:	69fb      	ldr	r3, [r7, #28]
 8025cf4:	2b00      	cmp	r3, #0
 8025cf6:	da01      	bge.n	8025cfc <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8025cf8:	69fb      	ldr	r3, [r7, #28]
 8025cfa:	e040      	b.n	8025d7e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8025cfc:	69fb      	ldr	r3, [r7, #28]
 8025cfe:	4618      	mov	r0, r3
 8025d00:	f7fe facc 	bl	802429c <lfs_tag_type3>
 8025d04:	4603      	mov	r3, r0
 8025d06:	b2da      	uxtb	r2, r3
 8025d08:	683b      	ldr	r3, [r7, #0]
 8025d0a:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8025d0c:	88fb      	ldrh	r3, [r7, #6]
 8025d0e:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025d10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025d14:	f043 0308 	orr.w	r3, r3, #8
 8025d18:	f107 0214 	add.w	r2, r7, #20
 8025d1c:	9200      	str	r2, [sp, #0]
 8025d1e:	4a1c      	ldr	r2, [pc, #112]	; (8025d90 <lfs_dir_getinfo+0xf0>)
 8025d20:	68b9      	ldr	r1, [r7, #8]
 8025d22:	68f8      	ldr	r0, [r7, #12]
 8025d24:	f7fe fece 	bl	8024ac4 <lfs_dir_get>
 8025d28:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025d2a:	69fb      	ldr	r3, [r7, #28]
 8025d2c:	2b00      	cmp	r3, #0
 8025d2e:	da01      	bge.n	8025d34 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8025d30:	69fb      	ldr	r3, [r7, #28]
 8025d32:	e024      	b.n	8025d7e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8025d34:	f107 0314 	add.w	r3, r7, #20
 8025d38:	4618      	mov	r0, r3
 8025d3a:	f7fe fbe1 	bl	8024500 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8025d3e:	69fb      	ldr	r3, [r7, #28]
 8025d40:	4618      	mov	r0, r3
 8025d42:	f7fe faab 	bl	802429c <lfs_tag_type3>
 8025d46:	4603      	mov	r3, r0
 8025d48:	461a      	mov	r2, r3
 8025d4a:	f240 2302 	movw	r3, #514	; 0x202
 8025d4e:	429a      	cmp	r2, r3
 8025d50:	d103      	bne.n	8025d5a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025d52:	69ba      	ldr	r2, [r7, #24]
 8025d54:	683b      	ldr	r3, [r7, #0]
 8025d56:	605a      	str	r2, [r3, #4]
 8025d58:	e010      	b.n	8025d7c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8025d5a:	69fb      	ldr	r3, [r7, #28]
 8025d5c:	4618      	mov	r0, r3
 8025d5e:	f7fe fa9d 	bl	802429c <lfs_tag_type3>
 8025d62:	4603      	mov	r3, r0
 8025d64:	461a      	mov	r2, r3
 8025d66:	f240 2301 	movw	r3, #513	; 0x201
 8025d6a:	429a      	cmp	r2, r3
 8025d6c:	d106      	bne.n	8025d7c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8025d6e:	69fb      	ldr	r3, [r7, #28]
 8025d70:	4618      	mov	r0, r3
 8025d72:	f7fe facd 	bl	8024310 <lfs_tag_size>
 8025d76:	4602      	mov	r2, r0
 8025d78:	683b      	ldr	r3, [r7, #0]
 8025d7a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8025d7c:	2300      	movs	r3, #0
}
 8025d7e:	4618      	mov	r0, r3
 8025d80:	3720      	adds	r7, #32
 8025d82:	46bd      	mov	sp, r7
 8025d84:	bd80      	pop	{r7, pc}
 8025d86:	bf00      	nop
 8025d88:	080339a0 	.word	0x080339a0
 8025d8c:	780ffc00 	.word	0x780ffc00
 8025d90:	700ffc00 	.word	0x700ffc00

08025d94 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8025d94:	b590      	push	{r4, r7, lr}
 8025d96:	b08f      	sub	sp, #60	; 0x3c
 8025d98:	af04      	add	r7, sp, #16
 8025d9a:	60f8      	str	r0, [r7, #12]
 8025d9c:	60b9      	str	r1, [r7, #8]
 8025d9e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8025da0:	68fb      	ldr	r3, [r7, #12]
 8025da2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8025da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025da6:	681b      	ldr	r3, [r3, #0]
 8025da8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8025dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025db0:	689c      	ldr	r4, [r3, #8]
 8025db2:	68b8      	ldr	r0, [r7, #8]
 8025db4:	f7fe faac 	bl	8024310 <lfs_tag_size>
 8025db8:	4603      	mov	r3, r0
 8025dba:	4619      	mov	r1, r3
 8025dbc:	4620      	mov	r0, r4
 8025dbe:	f7fd fd81 	bl	80238c4 <lfs_min>
 8025dc2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8025dc4:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8025dc6:	69fb      	ldr	r3, [r7, #28]
 8025dc8:	681b      	ldr	r3, [r3, #0]
 8025dca:	69fa      	ldr	r2, [r7, #28]
 8025dcc:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8025dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025dd0:	6849      	ldr	r1, [r1, #4]
 8025dd2:	69b8      	ldr	r0, [r7, #24]
 8025dd4:	9003      	str	r0, [sp, #12]
 8025dd6:	9102      	str	r1, [sp, #8]
 8025dd8:	9201      	str	r2, [sp, #4]
 8025dda:	9300      	str	r3, [sp, #0]
 8025ddc:	69bb      	ldr	r3, [r7, #24]
 8025dde:	4622      	mov	r2, r4
 8025de0:	2100      	movs	r1, #0
 8025de2:	6a38      	ldr	r0, [r7, #32]
 8025de4:	f7fd ff8e 	bl	8023d04 <lfs_bd_cmp>
 8025de8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8025dea:	697b      	ldr	r3, [r7, #20]
 8025dec:	2b00      	cmp	r3, #0
 8025dee:	d001      	beq.n	8025df4 <lfs_dir_find_match+0x60>
        return res;
 8025df0:	697b      	ldr	r3, [r7, #20]
 8025df2:	e014      	b.n	8025e1e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8025df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025df6:	689c      	ldr	r4, [r3, #8]
 8025df8:	68b8      	ldr	r0, [r7, #8]
 8025dfa:	f7fe fa89 	bl	8024310 <lfs_tag_size>
 8025dfe:	4603      	mov	r3, r0
 8025e00:	429c      	cmp	r4, r3
 8025e02:	d00b      	beq.n	8025e1c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8025e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e06:	689c      	ldr	r4, [r3, #8]
 8025e08:	68b8      	ldr	r0, [r7, #8]
 8025e0a:	f7fe fa81 	bl	8024310 <lfs_tag_size>
 8025e0e:	4603      	mov	r3, r0
 8025e10:	429c      	cmp	r4, r3
 8025e12:	d201      	bcs.n	8025e18 <lfs_dir_find_match+0x84>
 8025e14:	2301      	movs	r3, #1
 8025e16:	e002      	b.n	8025e1e <lfs_dir_find_match+0x8a>
 8025e18:	2302      	movs	r3, #2
 8025e1a:	e000      	b.n	8025e1e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8025e1c:	2300      	movs	r3, #0
}
 8025e1e:	4618      	mov	r0, r3
 8025e20:	372c      	adds	r7, #44	; 0x2c
 8025e22:	46bd      	mov	sp, r7
 8025e24:	bd90      	pop	{r4, r7, pc}
	...

08025e28 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8025e28:	b590      	push	{r4, r7, lr}
 8025e2a:	b093      	sub	sp, #76	; 0x4c
 8025e2c:	af04      	add	r7, sp, #16
 8025e2e:	60f8      	str	r0, [r7, #12]
 8025e30:	60b9      	str	r1, [r7, #8]
 8025e32:	607a      	str	r2, [r7, #4]
 8025e34:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8025e36:	687b      	ldr	r3, [r7, #4]
 8025e38:	681b      	ldr	r3, [r3, #0]
 8025e3a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8025e3c:	683b      	ldr	r3, [r7, #0]
 8025e3e:	2b00      	cmp	r3, #0
 8025e40:	d003      	beq.n	8025e4a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025e42:	683b      	ldr	r3, [r7, #0]
 8025e44:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025e48:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8025e4a:	4b6e      	ldr	r3, [pc, #440]	; (8026004 <lfs_dir_find+0x1dc>)
 8025e4c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8025e4e:	68fb      	ldr	r3, [r7, #12]
 8025e50:	6a1a      	ldr	r2, [r3, #32]
 8025e52:	68bb      	ldr	r3, [r7, #8]
 8025e54:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025e56:	68fb      	ldr	r3, [r7, #12]
 8025e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025e5a:	68bb      	ldr	r3, [r7, #8]
 8025e5c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8025e5e:	496a      	ldr	r1, [pc, #424]	; (8026008 <lfs_dir_find+0x1e0>)
 8025e60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025e62:	f007 feb0 	bl	802dbc6 <strspn>
 8025e66:	4602      	mov	r2, r0
 8025e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e6a:	4413      	add	r3, r2
 8025e6c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8025e6e:	4966      	ldr	r1, [pc, #408]	; (8026008 <lfs_dir_find+0x1e0>)
 8025e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025e72:	f007 fe5f 	bl	802db34 <strcspn>
 8025e76:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e7a:	2b01      	cmp	r3, #1
 8025e7c:	d105      	bne.n	8025e8a <lfs_dir_find+0x62>
 8025e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e80:	781a      	ldrb	r2, [r3, #0]
 8025e82:	4b62      	ldr	r3, [pc, #392]	; (802600c <lfs_dir_find+0x1e4>)
 8025e84:	781b      	ldrb	r3, [r3, #0]
 8025e86:	429a      	cmp	r2, r3
 8025e88:	d00a      	beq.n	8025ea0 <lfs_dir_find+0x78>
 8025e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e8c:	2b02      	cmp	r3, #2
 8025e8e:	d10c      	bne.n	8025eaa <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025e90:	2202      	movs	r2, #2
 8025e92:	495f      	ldr	r1, [pc, #380]	; (8026010 <lfs_dir_find+0x1e8>)
 8025e94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025e96:	f007 fdff 	bl	802da98 <memcmp>
 8025e9a:	4603      	mov	r3, r0
 8025e9c:	2b00      	cmp	r3, #0
 8025e9e:	d104      	bne.n	8025eaa <lfs_dir_find+0x82>
            name += namelen;
 8025ea0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ea4:	4413      	add	r3, r2
 8025ea6:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8025ea8:	e7d9      	b.n	8025e5e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8025eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025eae:	4413      	add	r3, r2
 8025eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025eb2:	2301      	movs	r3, #1
 8025eb4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025eb6:	4954      	ldr	r1, [pc, #336]	; (8026008 <lfs_dir_find+0x1e0>)
 8025eb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025eba:	f007 fe84 	bl	802dbc6 <strspn>
 8025ebe:	4602      	mov	r2, r0
 8025ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ec2:	4413      	add	r3, r2
 8025ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8025ec6:	4950      	ldr	r1, [pc, #320]	; (8026008 <lfs_dir_find+0x1e0>)
 8025ec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025eca:	f007 fe33 	bl	802db34 <strcspn>
 8025ece:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025ed0:	6a3b      	ldr	r3, [r7, #32]
 8025ed2:	2b00      	cmp	r3, #0
 8025ed4:	d01d      	beq.n	8025f12 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025ed6:	6a3b      	ldr	r3, [r7, #32]
 8025ed8:	2b02      	cmp	r3, #2
 8025eda:	d112      	bne.n	8025f02 <lfs_dir_find+0xda>
 8025edc:	2202      	movs	r2, #2
 8025ede:	494c      	ldr	r1, [pc, #304]	; (8026010 <lfs_dir_find+0x1e8>)
 8025ee0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025ee2:	f007 fdd9 	bl	802da98 <memcmp>
 8025ee6:	4603      	mov	r3, r0
 8025ee8:	2b00      	cmp	r3, #0
 8025eea:	d10a      	bne.n	8025f02 <lfs_dir_find+0xda>
                depth -= 1;
 8025eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025eee:	3b01      	subs	r3, #1
 8025ef0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8025ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ef4:	2b00      	cmp	r3, #0
 8025ef6:	d107      	bne.n	8025f08 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8025ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025efa:	6a3b      	ldr	r3, [r7, #32]
 8025efc:	4413      	add	r3, r2
 8025efe:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8025f00:	e7ad      	b.n	8025e5e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8025f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025f04:	3301      	adds	r3, #1
 8025f06:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8025f08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f0a:	6a3b      	ldr	r3, [r7, #32]
 8025f0c:	4413      	add	r3, r2
 8025f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8025f10:	e7d1      	b.n	8025eb6 <lfs_dir_find+0x8e>
                break;
 8025f12:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8025f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025f16:	781b      	ldrb	r3, [r3, #0]
 8025f18:	2b00      	cmp	r3, #0
 8025f1a:	d101      	bne.n	8025f20 <lfs_dir_find+0xf8>
            return tag;
 8025f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f1e:	e06c      	b.n	8025ffa <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8025f20:	687b      	ldr	r3, [r7, #4]
 8025f22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025f24:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8025f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f28:	4618      	mov	r0, r3
 8025f2a:	f7fe f9b7 	bl	802429c <lfs_tag_type3>
 8025f2e:	4603      	mov	r3, r0
 8025f30:	2b02      	cmp	r3, #2
 8025f32:	d002      	beq.n	8025f3a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8025f34:	f06f 0313 	mvn.w	r3, #19
 8025f38:	e05f      	b.n	8025ffa <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8025f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f3c:	4618      	mov	r0, r3
 8025f3e:	f7fe f9d7 	bl	80242f0 <lfs_tag_id>
 8025f42:	4603      	mov	r3, r0
 8025f44:	461a      	mov	r2, r3
 8025f46:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8025f4a:	429a      	cmp	r2, r3
 8025f4c:	d01c      	beq.n	8025f88 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f50:	4618      	mov	r0, r3
 8025f52:	f7fe f9cd 	bl	80242f0 <lfs_tag_id>
 8025f56:	4603      	mov	r3, r0
 8025f58:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025f5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025f5e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025f62:	68ba      	ldr	r2, [r7, #8]
 8025f64:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025f66:	9200      	str	r2, [sp, #0]
 8025f68:	4a2a      	ldr	r2, [pc, #168]	; (8026014 <lfs_dir_find+0x1ec>)
 8025f6a:	68b9      	ldr	r1, [r7, #8]
 8025f6c:	68f8      	ldr	r0, [r7, #12]
 8025f6e:	f7fe fda9 	bl	8024ac4 <lfs_dir_get>
 8025f72:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8025f74:	69fb      	ldr	r3, [r7, #28]
 8025f76:	2b00      	cmp	r3, #0
 8025f78:	da01      	bge.n	8025f7e <lfs_dir_find+0x156>
                return res;
 8025f7a:	69fb      	ldr	r3, [r7, #28]
 8025f7c:	e03d      	b.n	8025ffa <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8025f7e:	68bb      	ldr	r3, [r7, #8]
 8025f80:	3318      	adds	r3, #24
 8025f82:	4618      	mov	r0, r3
 8025f84:	f7fe f925 	bl	80241d2 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025f88:	68bb      	ldr	r3, [r7, #8]
 8025f8a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8025f8e:	212f      	movs	r1, #47	; 0x2f
 8025f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025f92:	f007 fdc2 	bl	802db1a <strchr>
 8025f96:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025f98:	2b00      	cmp	r3, #0
 8025f9a:	d101      	bne.n	8025fa0 <lfs_dir_find+0x178>
 8025f9c:	683b      	ldr	r3, [r7, #0]
 8025f9e:	e000      	b.n	8025fa2 <lfs_dir_find+0x17a>
 8025fa0:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8025fa2:	68fa      	ldr	r2, [r7, #12]
 8025fa4:	613a      	str	r2, [r7, #16]
 8025fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025fa8:	617a      	str	r2, [r7, #20]
 8025faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025fac:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025fae:	f107 0210 	add.w	r2, r7, #16
 8025fb2:	9203      	str	r2, [sp, #12]
 8025fb4:	4a18      	ldr	r2, [pc, #96]	; (8026018 <lfs_dir_find+0x1f0>)
 8025fb6:	9202      	str	r2, [sp, #8]
 8025fb8:	9301      	str	r3, [sp, #4]
 8025fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fbc:	9300      	str	r3, [sp, #0]
 8025fbe:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8025fc2:	4622      	mov	r2, r4
 8025fc4:	68b9      	ldr	r1, [r7, #8]
 8025fc6:	68f8      	ldr	r0, [r7, #12]
 8025fc8:	f7ff faae 	bl	8025528 <lfs_dir_fetchmatch>
 8025fcc:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8025fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fd0:	2b00      	cmp	r3, #0
 8025fd2:	da01      	bge.n	8025fd8 <lfs_dir_find+0x1b0>
                return tag;
 8025fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fd6:	e010      	b.n	8025ffa <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8025fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fda:	2b00      	cmp	r3, #0
 8025fdc:	d004      	beq.n	8025fe8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8025fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fe2:	4413      	add	r3, r2
 8025fe4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8025fe6:	e73a      	b.n	8025e5e <lfs_dir_find+0x36>
            if (!dir->split) {
 8025fe8:	68bb      	ldr	r3, [r7, #8]
 8025fea:	7ddb      	ldrb	r3, [r3, #23]
 8025fec:	f083 0301 	eor.w	r3, r3, #1
 8025ff0:	b2db      	uxtb	r3, r3
 8025ff2:	2b00      	cmp	r3, #0
 8025ff4:	d0c8      	beq.n	8025f88 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8025ff6:	f06f 0301 	mvn.w	r3, #1
    }
}
 8025ffa:	4618      	mov	r0, r3
 8025ffc:	373c      	adds	r7, #60	; 0x3c
 8025ffe:	46bd      	mov	sp, r7
 8026000:	bd90      	pop	{r4, r7, pc}
 8026002:	bf00      	nop
 8026004:	002ffc00 	.word	0x002ffc00
 8026008:	080339a0 	.word	0x080339a0
 802600c:	080339a4 	.word	0x080339a4
 8026010:	080339a8 	.word	0x080339a8
 8026014:	700ffc00 	.word	0x700ffc00
 8026018:	08025d95 	.word	0x08025d95

0802601c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 802601c:	b590      	push	{r4, r7, lr}
 802601e:	b08b      	sub	sp, #44	; 0x2c
 8026020:	af04      	add	r7, sp, #16
 8026022:	60f8      	str	r0, [r7, #12]
 8026024:	60b9      	str	r1, [r7, #8]
 8026026:	607a      	str	r2, [r7, #4]
 8026028:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 802602a:	68fb      	ldr	r3, [r7, #12]
 802602c:	f103 0010 	add.w	r0, r3, #16
 8026030:	68fc      	ldr	r4, [r7, #12]
 8026032:	68bb      	ldr	r3, [r7, #8]
 8026034:	681b      	ldr	r3, [r3, #0]
 8026036:	68ba      	ldr	r2, [r7, #8]
 8026038:	6852      	ldr	r2, [r2, #4]
 802603a:	6839      	ldr	r1, [r7, #0]
 802603c:	9103      	str	r1, [sp, #12]
 802603e:	6879      	ldr	r1, [r7, #4]
 8026040:	9102      	str	r1, [sp, #8]
 8026042:	9201      	str	r2, [sp, #4]
 8026044:	9300      	str	r3, [sp, #0]
 8026046:	2300      	movs	r3, #0
 8026048:	4622      	mov	r2, r4
 802604a:	4601      	mov	r1, r0
 802604c:	68f8      	ldr	r0, [r7, #12]
 802604e:	f7fd ff5b 	bl	8023f08 <lfs_bd_prog>
 8026052:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8026054:	697b      	ldr	r3, [r7, #20]
 8026056:	2b00      	cmp	r3, #0
 8026058:	d001      	beq.n	802605e <lfs_dir_commitprog+0x42>
        return err;
 802605a:	697b      	ldr	r3, [r7, #20]
 802605c:	e010      	b.n	8026080 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 802605e:	68bb      	ldr	r3, [r7, #8]
 8026060:	68db      	ldr	r3, [r3, #12]
 8026062:	683a      	ldr	r2, [r7, #0]
 8026064:	6879      	ldr	r1, [r7, #4]
 8026066:	4618      	mov	r0, r3
 8026068:	f004 fef2 	bl	802ae50 <lfs_crc>
 802606c:	4602      	mov	r2, r0
 802606e:	68bb      	ldr	r3, [r7, #8]
 8026070:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8026072:	68bb      	ldr	r3, [r7, #8]
 8026074:	685a      	ldr	r2, [r3, #4]
 8026076:	683b      	ldr	r3, [r7, #0]
 8026078:	441a      	add	r2, r3
 802607a:	68bb      	ldr	r3, [r7, #8]
 802607c:	605a      	str	r2, [r3, #4]
    return 0;
 802607e:	2300      	movs	r3, #0
}
 8026080:	4618      	mov	r0, r3
 8026082:	371c      	adds	r7, #28
 8026084:	46bd      	mov	sp, r7
 8026086:	bd90      	pop	{r4, r7, pc}

08026088 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8026088:	b590      	push	{r4, r7, lr}
 802608a:	b08f      	sub	sp, #60	; 0x3c
 802608c:	af04      	add	r7, sp, #16
 802608e:	60f8      	str	r0, [r7, #12]
 8026090:	60b9      	str	r1, [r7, #8]
 8026092:	607a      	str	r2, [r7, #4]
 8026094:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8026096:	6878      	ldr	r0, [r7, #4]
 8026098:	f7fe f947 	bl	802432a <lfs_tag_dsize>
 802609c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 802609e:	68bb      	ldr	r3, [r7, #8]
 80260a0:	685a      	ldr	r2, [r3, #4]
 80260a2:	6a3b      	ldr	r3, [r7, #32]
 80260a4:	441a      	add	r2, r3
 80260a6:	68bb      	ldr	r3, [r7, #8]
 80260a8:	695b      	ldr	r3, [r3, #20]
 80260aa:	429a      	cmp	r2, r3
 80260ac:	d902      	bls.n	80260b4 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 80260ae:	f06f 031b 	mvn.w	r3, #27
 80260b2:	e065      	b.n	8026180 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 80260b4:	687b      	ldr	r3, [r7, #4]
 80260b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80260ba:	68bb      	ldr	r3, [r7, #8]
 80260bc:	689b      	ldr	r3, [r3, #8]
 80260be:	4053      	eors	r3, r2
 80260c0:	4618      	mov	r0, r3
 80260c2:	f7fd fc92 	bl	80239ea <lfs_tobe32>
 80260c6:	4603      	mov	r3, r0
 80260c8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 80260ca:	f107 0214 	add.w	r2, r7, #20
 80260ce:	2304      	movs	r3, #4
 80260d0:	68b9      	ldr	r1, [r7, #8]
 80260d2:	68f8      	ldr	r0, [r7, #12]
 80260d4:	f7ff ffa2 	bl	802601c <lfs_dir_commitprog>
 80260d8:	61f8      	str	r0, [r7, #28]
    if (err) {
 80260da:	69fb      	ldr	r3, [r7, #28]
 80260dc:	2b00      	cmp	r3, #0
 80260de:	d001      	beq.n	80260e4 <lfs_dir_commitattr+0x5c>
        return err;
 80260e0:	69fb      	ldr	r3, [r7, #28]
 80260e2:	e04d      	b.n	8026180 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80260e4:	687b      	ldr	r3, [r7, #4]
 80260e6:	2b00      	cmp	r3, #0
 80260e8:	db0c      	blt.n	8026104 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80260ea:	6a3b      	ldr	r3, [r7, #32]
 80260ec:	3b04      	subs	r3, #4
 80260ee:	683a      	ldr	r2, [r7, #0]
 80260f0:	68b9      	ldr	r1, [r7, #8]
 80260f2:	68f8      	ldr	r0, [r7, #12]
 80260f4:	f7ff ff92 	bl	802601c <lfs_dir_commitprog>
 80260f8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80260fa:	69fb      	ldr	r3, [r7, #28]
 80260fc:	2b00      	cmp	r3, #0
 80260fe:	d039      	beq.n	8026174 <lfs_dir_commitattr+0xec>
            return err;
 8026100:	69fb      	ldr	r3, [r7, #28]
 8026102:	e03d      	b.n	8026180 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8026104:	683b      	ldr	r3, [r7, #0]
 8026106:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8026108:	2300      	movs	r3, #0
 802610a:	627b      	str	r3, [r7, #36]	; 0x24
 802610c:	e02d      	b.n	802616a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 802610e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8026110:	6a3a      	ldr	r2, [r7, #32]
 8026112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026114:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8026116:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8026118:	69bb      	ldr	r3, [r7, #24]
 802611a:	681b      	ldr	r3, [r3, #0]
 802611c:	69ba      	ldr	r2, [r7, #24]
 802611e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8026120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026122:	440a      	add	r2, r1
 8026124:	2101      	movs	r1, #1
 8026126:	9103      	str	r1, [sp, #12]
 8026128:	f107 0113 	add.w	r1, r7, #19
 802612c:	9102      	str	r1, [sp, #8]
 802612e:	9201      	str	r2, [sp, #4]
 8026130:	9300      	str	r3, [sp, #0]
 8026132:	4623      	mov	r3, r4
 8026134:	4602      	mov	r2, r0
 8026136:	2100      	movs	r1, #0
 8026138:	68f8      	ldr	r0, [r7, #12]
 802613a:	f7fd fc9f 	bl	8023a7c <lfs_bd_read>
 802613e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8026140:	69fb      	ldr	r3, [r7, #28]
 8026142:	2b00      	cmp	r3, #0
 8026144:	d001      	beq.n	802614a <lfs_dir_commitattr+0xc2>
                return err;
 8026146:	69fb      	ldr	r3, [r7, #28]
 8026148:	e01a      	b.n	8026180 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 802614a:	f107 0213 	add.w	r2, r7, #19
 802614e:	2301      	movs	r3, #1
 8026150:	68b9      	ldr	r1, [r7, #8]
 8026152:	68f8      	ldr	r0, [r7, #12]
 8026154:	f7ff ff62 	bl	802601c <lfs_dir_commitprog>
 8026158:	61f8      	str	r0, [r7, #28]
            if (err) {
 802615a:	69fb      	ldr	r3, [r7, #28]
 802615c:	2b00      	cmp	r3, #0
 802615e:	d001      	beq.n	8026164 <lfs_dir_commitattr+0xdc>
                return err;
 8026160:	69fb      	ldr	r3, [r7, #28]
 8026162:	e00d      	b.n	8026180 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8026164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026166:	3301      	adds	r3, #1
 8026168:	627b      	str	r3, [r7, #36]	; 0x24
 802616a:	6a3b      	ldr	r3, [r7, #32]
 802616c:	3b04      	subs	r3, #4
 802616e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026170:	429a      	cmp	r2, r3
 8026172:	d3cc      	bcc.n	802610e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8026174:	687b      	ldr	r3, [r7, #4]
 8026176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802617a:	68bb      	ldr	r3, [r7, #8]
 802617c:	609a      	str	r2, [r3, #8]
    return 0;
 802617e:	2300      	movs	r3, #0
}
 8026180:	4618      	mov	r0, r3
 8026182:	372c      	adds	r7, #44	; 0x2c
 8026184:	46bd      	mov	sp, r7
 8026186:	bd90      	pop	{r4, r7, pc}

08026188 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8026188:	b590      	push	{r4, r7, lr}
 802618a:	b097      	sub	sp, #92	; 0x5c
 802618c:	af04      	add	r7, sp, #16
 802618e:	6078      	str	r0, [r7, #4]
 8026190:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8026192:	683b      	ldr	r3, [r7, #0]
 8026194:	685b      	ldr	r3, [r3, #4]
 8026196:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 802619a:	687b      	ldr	r3, [r7, #4]
 802619c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802619e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 80261a0:	4619      	mov	r1, r3
 80261a2:	4610      	mov	r0, r2
 80261a4:	f7fd fbb3 	bl	802390e <lfs_alignup>
 80261a8:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 80261aa:	2300      	movs	r3, #0
 80261ac:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 80261ae:	2300      	movs	r3, #0
 80261b0:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 80261b2:	e0a6      	b.n	8026302 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 80261b4:	683b      	ldr	r3, [r7, #0]
 80261b6:	685b      	ldr	r3, [r3, #4]
 80261b8:	3304      	adds	r3, #4
 80261ba:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 80261bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80261be:	6a3b      	ldr	r3, [r7, #32]
 80261c0:	1ad3      	subs	r3, r2, r3
 80261c2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80261c6:	4618      	mov	r0, r3
 80261c8:	f7fd fb7c 	bl	80238c4 <lfs_min>
 80261cc:	4602      	mov	r2, r0
 80261ce:	6a3b      	ldr	r3, [r7, #32]
 80261d0:	4413      	add	r3, r2
 80261d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 80261d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80261d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261d8:	429a      	cmp	r2, r3
 80261da:	d206      	bcs.n	80261ea <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 80261dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80261de:	3b08      	subs	r3, #8
 80261e0:	4619      	mov	r1, r3
 80261e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80261e4:	f7fd fb6e 	bl	80238c4 <lfs_min>
 80261e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80261ea:	f04f 33ff 	mov.w	r3, #4294967295
 80261ee:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80261f0:	6879      	ldr	r1, [r7, #4]
 80261f2:	683b      	ldr	r3, [r7, #0]
 80261f4:	681b      	ldr	r3, [r3, #0]
 80261f6:	2204      	movs	r2, #4
 80261f8:	9203      	str	r2, [sp, #12]
 80261fa:	f107 0214 	add.w	r2, r7, #20
 80261fe:	9202      	str	r2, [sp, #8]
 8026200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026202:	9201      	str	r2, [sp, #4]
 8026204:	9300      	str	r3, [sp, #0]
 8026206:	2304      	movs	r3, #4
 8026208:	460a      	mov	r2, r1
 802620a:	2100      	movs	r1, #0
 802620c:	6878      	ldr	r0, [r7, #4]
 802620e:	f7fd fc35 	bl	8023a7c <lfs_bd_read>
 8026212:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8026214:	69fb      	ldr	r3, [r7, #28]
 8026216:	2b00      	cmp	r3, #0
 8026218:	d005      	beq.n	8026226 <lfs_dir_commitcrc+0x9e>
 802621a:	69fb      	ldr	r3, [r7, #28]
 802621c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026220:	d001      	beq.n	8026226 <lfs_dir_commitcrc+0x9e>
            return err;
 8026222:	69fb      	ldr	r3, [r7, #28]
 8026224:	e0e8      	b.n	80263f8 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8026226:	697b      	ldr	r3, [r7, #20]
 8026228:	4618      	mov	r0, r3
 802622a:	f7fd fbd2 	bl	80239d2 <lfs_frombe32>
 802622e:	4603      	mov	r3, r0
 8026230:	43db      	mvns	r3, r3
 8026232:	0fdb      	lsrs	r3, r3, #31
 8026234:	2b00      	cmp	r3, #0
 8026236:	bf14      	ite	ne
 8026238:	2301      	movne	r3, #1
 802623a:	2300      	moveq	r3, #0
 802623c:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 802623e:	7efb      	ldrb	r3, [r7, #27]
 8026240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026244:	051a      	lsls	r2, r3, #20
 8026246:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8026248:	6a3b      	ldr	r3, [r7, #32]
 802624a:	1acb      	subs	r3, r1, r3
 802624c:	4313      	orrs	r3, r2
 802624e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8026252:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8026256:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8026258:	683b      	ldr	r3, [r7, #0]
 802625a:	689a      	ldr	r2, [r3, #8]
 802625c:	697b      	ldr	r3, [r7, #20]
 802625e:	4053      	eors	r3, r2
 8026260:	4618      	mov	r0, r3
 8026262:	f7fd fbc2 	bl	80239ea <lfs_tobe32>
 8026266:	4603      	mov	r3, r0
 8026268:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 802626a:	683b      	ldr	r3, [r7, #0]
 802626c:	68db      	ldr	r3, [r3, #12]
 802626e:	f107 010c 	add.w	r1, r7, #12
 8026272:	2204      	movs	r2, #4
 8026274:	4618      	mov	r0, r3
 8026276:	f004 fdeb 	bl	802ae50 <lfs_crc>
 802627a:	4602      	mov	r2, r0
 802627c:	683b      	ldr	r3, [r7, #0]
 802627e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8026280:	683b      	ldr	r3, [r7, #0]
 8026282:	68db      	ldr	r3, [r3, #12]
 8026284:	4618      	mov	r0, r3
 8026286:	f7fd fb98 	bl	80239ba <lfs_tole32>
 802628a:	4603      	mov	r3, r0
 802628c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 802628e:	687b      	ldr	r3, [r7, #4]
 8026290:	f103 0010 	add.w	r0, r3, #16
 8026294:	687c      	ldr	r4, [r7, #4]
 8026296:	683b      	ldr	r3, [r7, #0]
 8026298:	681b      	ldr	r3, [r3, #0]
 802629a:	683a      	ldr	r2, [r7, #0]
 802629c:	6852      	ldr	r2, [r2, #4]
 802629e:	2108      	movs	r1, #8
 80262a0:	9103      	str	r1, [sp, #12]
 80262a2:	f107 010c 	add.w	r1, r7, #12
 80262a6:	9102      	str	r1, [sp, #8]
 80262a8:	9201      	str	r2, [sp, #4]
 80262aa:	9300      	str	r3, [sp, #0]
 80262ac:	2300      	movs	r3, #0
 80262ae:	4622      	mov	r2, r4
 80262b0:	4601      	mov	r1, r0
 80262b2:	6878      	ldr	r0, [r7, #4]
 80262b4:	f7fd fe28 	bl	8023f08 <lfs_bd_prog>
 80262b8:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 80262ba:	69fb      	ldr	r3, [r7, #28]
 80262bc:	2b00      	cmp	r3, #0
 80262be:	d001      	beq.n	80262c4 <lfs_dir_commitcrc+0x13c>
            return err;
 80262c0:	69fb      	ldr	r3, [r7, #28]
 80262c2:	e099      	b.n	80263f8 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 80262c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80262c6:	2b00      	cmp	r3, #0
 80262c8:	d106      	bne.n	80262d8 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 80262ca:	683b      	ldr	r3, [r7, #0]
 80262cc:	685b      	ldr	r3, [r3, #4]
 80262ce:	3304      	adds	r3, #4
 80262d0:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 80262d2:	683b      	ldr	r3, [r7, #0]
 80262d4:	68db      	ldr	r3, [r3, #12]
 80262d6:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 80262d8:	697b      	ldr	r3, [r7, #20]
 80262da:	4618      	mov	r0, r3
 80262dc:	f7fe f818 	bl	8024310 <lfs_tag_size>
 80262e0:	4603      	mov	r3, r0
 80262e2:	1d1a      	adds	r2, r3, #4
 80262e4:	683b      	ldr	r3, [r7, #0]
 80262e6:	685b      	ldr	r3, [r3, #4]
 80262e8:	441a      	add	r2, r3
 80262ea:	683b      	ldr	r3, [r7, #0]
 80262ec:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80262ee:	7efb      	ldrb	r3, [r7, #27]
 80262f0:	07da      	lsls	r2, r3, #31
 80262f2:	697b      	ldr	r3, [r7, #20]
 80262f4:	405a      	eors	r2, r3
 80262f6:	683b      	ldr	r3, [r7, #0]
 80262f8:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80262fa:	683b      	ldr	r3, [r7, #0]
 80262fc:	f04f 32ff 	mov.w	r2, #4294967295
 8026300:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8026302:	683b      	ldr	r3, [r7, #0]
 8026304:	685b      	ldr	r3, [r3, #4]
 8026306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8026308:	429a      	cmp	r2, r3
 802630a:	f63f af53 	bhi.w	80261b4 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 802630e:	687b      	ldr	r3, [r7, #4]
 8026310:	f103 0110 	add.w	r1, r3, #16
 8026314:	687a      	ldr	r2, [r7, #4]
 8026316:	2300      	movs	r3, #0
 8026318:	6878      	ldr	r0, [r7, #4]
 802631a:	f7fd fdc1 	bl	8023ea0 <lfs_bd_sync>
 802631e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8026320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026322:	2b00      	cmp	r3, #0
 8026324:	d001      	beq.n	802632a <lfs_dir_commitcrc+0x1a2>
        return err;
 8026326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026328:	e066      	b.n	80263f8 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 802632a:	683b      	ldr	r3, [r7, #0]
 802632c:	691b      	ldr	r3, [r3, #16]
 802632e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8026330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026332:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8026334:	e05b      	b.n	80263ee <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8026336:	f04f 33ff 	mov.w	r3, #4294967295
 802633a:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 802633c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802633e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026340:	e030      	b.n	80263a4 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8026342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026346:	429a      	cmp	r2, r3
 8026348:	d106      	bne.n	8026358 <lfs_dir_commitcrc+0x1d0>
 802634a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802634c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802634e:	429a      	cmp	r2, r3
 8026350:	d002      	beq.n	8026358 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8026352:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8026356:	e04f      	b.n	80263f8 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8026358:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 802635a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802635c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802635e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8026360:	1d18      	adds	r0, r3, #4
 8026362:	683b      	ldr	r3, [r7, #0]
 8026364:	681b      	ldr	r3, [r3, #0]
 8026366:	2201      	movs	r2, #1
 8026368:	9203      	str	r2, [sp, #12]
 802636a:	f107 020b 	add.w	r2, r7, #11
 802636e:	9202      	str	r2, [sp, #8]
 8026370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026372:	9201      	str	r2, [sp, #4]
 8026374:	9300      	str	r3, [sp, #0]
 8026376:	4603      	mov	r3, r0
 8026378:	460a      	mov	r2, r1
 802637a:	2100      	movs	r1, #0
 802637c:	6878      	ldr	r0, [r7, #4]
 802637e:	f7fd fb7d 	bl	8023a7c <lfs_bd_read>
 8026382:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8026384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026386:	2b00      	cmp	r3, #0
 8026388:	d001      	beq.n	802638e <lfs_dir_commitcrc+0x206>
                return err;
 802638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802638c:	e034      	b.n	80263f8 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 802638e:	f107 030b 	add.w	r3, r7, #11
 8026392:	2201      	movs	r2, #1
 8026394:	4619      	mov	r1, r3
 8026396:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026398:	f004 fd5a 	bl	802ae50 <lfs_crc>
 802639c:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 802639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80263a0:	3301      	adds	r3, #1
 80263a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80263a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80263a6:	3304      	adds	r3, #4
 80263a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80263aa:	429a      	cmp	r2, r3
 80263ac:	d3c9      	bcc.n	8026342 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 80263ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80263b0:	2b00      	cmp	r3, #0
 80263b2:	d002      	beq.n	80263ba <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 80263b4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80263b8:	e01e      	b.n	80263f8 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 80263ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80263bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80263be:	1ad3      	subs	r3, r2, r3
 80263c0:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80263c4:	4618      	mov	r0, r3
 80263c6:	f7fd fa7d 	bl	80238c4 <lfs_min>
 80263ca:	4602      	mov	r2, r0
 80263cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80263ce:	4413      	add	r3, r2
 80263d0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 80263d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80263d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263d6:	429a      	cmp	r2, r3
 80263d8:	d206      	bcs.n	80263e8 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 80263da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263dc:	3b08      	subs	r3, #8
 80263de:	4619      	mov	r1, r3
 80263e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80263e2:	f7fd fa6f 	bl	80238c4 <lfs_min>
 80263e6:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 80263e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80263ea:	3304      	adds	r3, #4
 80263ec:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80263ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80263f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263f2:	429a      	cmp	r2, r3
 80263f4:	d39f      	bcc.n	8026336 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80263f6:	2300      	movs	r3, #0
}
 80263f8:	4618      	mov	r0, r3
 80263fa:	374c      	adds	r7, #76	; 0x4c
 80263fc:	46bd      	mov	sp, r7
 80263fe:	bd90      	pop	{r4, r7, pc}

08026400 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8026400:	b580      	push	{r7, lr}
 8026402:	b08a      	sub	sp, #40	; 0x28
 8026404:	af04      	add	r7, sp, #16
 8026406:	6078      	str	r0, [r7, #4]
 8026408:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 802640a:	2300      	movs	r3, #0
 802640c:	617b      	str	r3, [r7, #20]
 802640e:	e016      	b.n	802643e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8026410:	697b      	ldr	r3, [r7, #20]
 8026412:	3301      	adds	r3, #1
 8026414:	2b00      	cmp	r3, #0
 8026416:	f003 0301 	and.w	r3, r3, #1
 802641a:	bfb8      	it	lt
 802641c:	425b      	neglt	r3, r3
 802641e:	009b      	lsls	r3, r3, #2
 8026420:	683a      	ldr	r2, [r7, #0]
 8026422:	4413      	add	r3, r2
 8026424:	4619      	mov	r1, r3
 8026426:	6878      	ldr	r0, [r7, #4]
 8026428:	f7fe f9b2 	bl	8024790 <lfs_alloc>
 802642c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802642e:	68fb      	ldr	r3, [r7, #12]
 8026430:	2b00      	cmp	r3, #0
 8026432:	d001      	beq.n	8026438 <lfs_dir_alloc+0x38>
            return err;
 8026434:	68fb      	ldr	r3, [r7, #12]
 8026436:	e058      	b.n	80264ea <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8026438:	697b      	ldr	r3, [r7, #20]
 802643a:	3301      	adds	r3, #1
 802643c:	617b      	str	r3, [r7, #20]
 802643e:	697b      	ldr	r3, [r7, #20]
 8026440:	2b01      	cmp	r3, #1
 8026442:	dde5      	ble.n	8026410 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8026444:	683b      	ldr	r3, [r7, #0]
 8026446:	2200      	movs	r2, #0
 8026448:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 802644a:	6879      	ldr	r1, [r7, #4]
 802644c:	683b      	ldr	r3, [r7, #0]
 802644e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8026450:	683a      	ldr	r2, [r7, #0]
 8026452:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8026454:	2004      	movs	r0, #4
 8026456:	9003      	str	r0, [sp, #12]
 8026458:	9202      	str	r2, [sp, #8]
 802645a:	2200      	movs	r2, #0
 802645c:	9201      	str	r2, [sp, #4]
 802645e:	9300      	str	r3, [sp, #0]
 8026460:	2304      	movs	r3, #4
 8026462:	460a      	mov	r2, r1
 8026464:	2100      	movs	r1, #0
 8026466:	6878      	ldr	r0, [r7, #4]
 8026468:	f7fd fb08 	bl	8023a7c <lfs_bd_read>
 802646c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 802646e:	683b      	ldr	r3, [r7, #0]
 8026470:	689b      	ldr	r3, [r3, #8]
 8026472:	4618      	mov	r0, r3
 8026474:	f7fd fa96 	bl	80239a4 <lfs_fromle32>
 8026478:	4602      	mov	r2, r0
 802647a:	683b      	ldr	r3, [r7, #0]
 802647c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 802647e:	693b      	ldr	r3, [r7, #16]
 8026480:	2b00      	cmp	r3, #0
 8026482:	d005      	beq.n	8026490 <lfs_dir_alloc+0x90>
 8026484:	693b      	ldr	r3, [r7, #16]
 8026486:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802648a:	d001      	beq.n	8026490 <lfs_dir_alloc+0x90>
        return err;
 802648c:	693b      	ldr	r3, [r7, #16]
 802648e:	e02c      	b.n	80264ea <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8026490:	687b      	ldr	r3, [r7, #4]
 8026492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026496:	2b00      	cmp	r3, #0
 8026498:	dd0e      	ble.n	80264b8 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 802649a:	683b      	ldr	r3, [r7, #0]
 802649c:	689a      	ldr	r2, [r3, #8]
 802649e:	687b      	ldr	r3, [r7, #4]
 80264a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80264a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80264a4:	3301      	adds	r3, #1
 80264a6:	f043 0301 	orr.w	r3, r3, #1
 80264aa:	4619      	mov	r1, r3
 80264ac:	4610      	mov	r0, r2
 80264ae:	f7fd fa2e 	bl	802390e <lfs_alignup>
 80264b2:	4602      	mov	r2, r0
 80264b4:	683b      	ldr	r3, [r7, #0]
 80264b6:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80264b8:	683b      	ldr	r3, [r7, #0]
 80264ba:	2204      	movs	r2, #4
 80264bc:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80264be:	683b      	ldr	r3, [r7, #0]
 80264c0:	f04f 32ff 	mov.w	r2, #4294967295
 80264c4:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80264c6:	683b      	ldr	r3, [r7, #0]
 80264c8:	2200      	movs	r2, #0
 80264ca:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80264cc:	683b      	ldr	r3, [r7, #0]
 80264ce:	f04f 32ff 	mov.w	r2, #4294967295
 80264d2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80264d4:	683b      	ldr	r3, [r7, #0]
 80264d6:	f04f 32ff 	mov.w	r2, #4294967295
 80264da:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80264dc:	683b      	ldr	r3, [r7, #0]
 80264de:	2200      	movs	r2, #0
 80264e0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80264e2:	683b      	ldr	r3, [r7, #0]
 80264e4:	2200      	movs	r2, #0
 80264e6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80264e8:	2300      	movs	r3, #0
}
 80264ea:	4618      	mov	r0, r3
 80264ec:	3718      	adds	r7, #24
 80264ee:	46bd      	mov	sp, r7
 80264f0:	bd80      	pop	{r7, pc}
	...

080264f4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80264f4:	b580      	push	{r7, lr}
 80264f6:	b08a      	sub	sp, #40	; 0x28
 80264f8:	af00      	add	r7, sp, #0
 80264fa:	60f8      	str	r0, [r7, #12]
 80264fc:	60b9      	str	r1, [r7, #8]
 80264fe:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8026500:	68fb      	ldr	r3, [r7, #12]
 8026502:	3348      	adds	r3, #72	; 0x48
 8026504:	461a      	mov	r2, r3
 8026506:	6879      	ldr	r1, [r7, #4]
 8026508:	68f8      	ldr	r0, [r7, #12]
 802650a:	f7ff fb97 	bl	8025c3c <lfs_dir_getgstate>
 802650e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8026510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026512:	2b00      	cmp	r3, #0
 8026514:	d001      	beq.n	802651a <lfs_dir_drop+0x26>
        return err;
 8026516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026518:	e022      	b.n	8026560 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 802651a:	687b      	ldr	r3, [r7, #4]
 802651c:	3318      	adds	r3, #24
 802651e:	4618      	mov	r0, r3
 8026520:	f7fd fe71 	bl	8024206 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8026524:	687b      	ldr	r3, [r7, #4]
 8026526:	7ddb      	ldrb	r3, [r3, #23]
 8026528:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802652c:	051a      	lsls	r2, r3, #20
 802652e:	4b0e      	ldr	r3, [pc, #56]	; (8026568 <lfs_dir_drop+0x74>)
 8026530:	4313      	orrs	r3, r2
 8026532:	61fb      	str	r3, [r7, #28]
 8026534:	687b      	ldr	r3, [r7, #4]
 8026536:	3318      	adds	r3, #24
 8026538:	623b      	str	r3, [r7, #32]
 802653a:	f107 021c 	add.w	r2, r7, #28
 802653e:	2301      	movs	r3, #1
 8026540:	68b9      	ldr	r1, [r7, #8]
 8026542:	68f8      	ldr	r0, [r7, #12]
 8026544:	f001 f978 	bl	8027838 <lfs_dir_commit>
 8026548:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 802654a:	687b      	ldr	r3, [r7, #4]
 802654c:	3318      	adds	r3, #24
 802654e:	4618      	mov	r0, r3
 8026550:	f7fd fe3f 	bl	80241d2 <lfs_pair_fromle32>
    if (err) {
 8026554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026556:	2b00      	cmp	r3, #0
 8026558:	d001      	beq.n	802655e <lfs_dir_drop+0x6a>
        return err;
 802655a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802655c:	e000      	b.n	8026560 <lfs_dir_drop+0x6c>
    }

    return 0;
 802655e:	2300      	movs	r3, #0
}
 8026560:	4618      	mov	r0, r3
 8026562:	3728      	adds	r7, #40	; 0x28
 8026564:	46bd      	mov	sp, r7
 8026566:	bd80      	pop	{r7, pc}
 8026568:	000ffc08 	.word	0x000ffc08

0802656c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 802656c:	b580      	push	{r7, lr}
 802656e:	b092      	sub	sp, #72	; 0x48
 8026570:	af04      	add	r7, sp, #16
 8026572:	60f8      	str	r0, [r7, #12]
 8026574:	60b9      	str	r1, [r7, #8]
 8026576:	607a      	str	r2, [r7, #4]
 8026578:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 802657a:	f107 0310 	add.w	r3, r7, #16
 802657e:	4619      	mov	r1, r3
 8026580:	68f8      	ldr	r0, [r7, #12]
 8026582:	f7ff ff3d 	bl	8026400 <lfs_dir_alloc>
 8026586:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8026588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802658a:	2b00      	cmp	r3, #0
 802658c:	d001      	beq.n	8026592 <lfs_dir_split+0x26>
        return err;
 802658e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026590:	e03c      	b.n	802660c <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8026592:	68bb      	ldr	r3, [r7, #8]
 8026594:	7ddb      	ldrb	r3, [r3, #23]
 8026596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 802659a:	68bb      	ldr	r3, [r7, #8]
 802659c:	699b      	ldr	r3, [r3, #24]
 802659e:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80265a0:	68bb      	ldr	r3, [r7, #8]
 80265a2:	69db      	ldr	r3, [r3, #28]
 80265a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80265a6:	f107 0110 	add.w	r1, r7, #16
 80265aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80265ae:	9302      	str	r3, [sp, #8]
 80265b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80265b4:	9301      	str	r3, [sp, #4]
 80265b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80265b8:	9300      	str	r3, [sp, #0]
 80265ba:	683b      	ldr	r3, [r7, #0]
 80265bc:	687a      	ldr	r2, [r7, #4]
 80265be:	68f8      	ldr	r0, [r7, #12]
 80265c0:	f000 f87a 	bl	80266b8 <lfs_dir_compact>
 80265c4:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80265c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80265c8:	2b00      	cmp	r3, #0
 80265ca:	da01      	bge.n	80265d0 <lfs_dir_split+0x64>
        return res;
 80265cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80265ce:	e01d      	b.n	802660c <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80265d0:	693a      	ldr	r2, [r7, #16]
 80265d2:	68bb      	ldr	r3, [r7, #8]
 80265d4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80265d6:	697a      	ldr	r2, [r7, #20]
 80265d8:	68bb      	ldr	r3, [r7, #8]
 80265da:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80265dc:	68bb      	ldr	r3, [r7, #8]
 80265de:	2201      	movs	r2, #1
 80265e0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80265e2:	68ba      	ldr	r2, [r7, #8]
 80265e4:	68fb      	ldr	r3, [r7, #12]
 80265e6:	3320      	adds	r3, #32
 80265e8:	4619      	mov	r1, r3
 80265ea:	4610      	mov	r0, r2
 80265ec:	f7fd fd9a 	bl	8024124 <lfs_pair_cmp>
 80265f0:	4603      	mov	r3, r0
 80265f2:	2b00      	cmp	r3, #0
 80265f4:	d109      	bne.n	802660a <lfs_dir_split+0x9e>
 80265f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80265fa:	2b00      	cmp	r3, #0
 80265fc:	d105      	bne.n	802660a <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80265fe:	693a      	ldr	r2, [r7, #16]
 8026600:	68fb      	ldr	r3, [r7, #12]
 8026602:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8026604:	697a      	ldr	r2, [r7, #20]
 8026606:	68fb      	ldr	r3, [r7, #12]
 8026608:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 802660a:	2300      	movs	r3, #0
}
 802660c:	4618      	mov	r0, r3
 802660e:	3738      	adds	r7, #56	; 0x38
 8026610:	46bd      	mov	sp, r7
 8026612:	bd80      	pop	{r7, pc}

08026614 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8026614:	b580      	push	{r7, lr}
 8026616:	b086      	sub	sp, #24
 8026618:	af00      	add	r7, sp, #0
 802661a:	60f8      	str	r0, [r7, #12]
 802661c:	60b9      	str	r1, [r7, #8]
 802661e:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8026620:	68fb      	ldr	r3, [r7, #12]
 8026622:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8026624:	68b8      	ldr	r0, [r7, #8]
 8026626:	f7fd fe80 	bl	802432a <lfs_tag_dsize>
 802662a:	4602      	mov	r2, r0
 802662c:	697b      	ldr	r3, [r7, #20]
 802662e:	681b      	ldr	r3, [r3, #0]
 8026630:	441a      	add	r2, r3
 8026632:	697b      	ldr	r3, [r7, #20]
 8026634:	601a      	str	r2, [r3, #0]
    return 0;
 8026636:	2300      	movs	r3, #0
}
 8026638:	4618      	mov	r0, r3
 802663a:	3718      	adds	r7, #24
 802663c:	46bd      	mov	sp, r7
 802663e:	bd80      	pop	{r7, pc}

08026640 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8026640:	b580      	push	{r7, lr}
 8026642:	b086      	sub	sp, #24
 8026644:	af00      	add	r7, sp, #0
 8026646:	60f8      	str	r0, [r7, #12]
 8026648:	60b9      	str	r1, [r7, #8]
 802664a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 802664c:	68fb      	ldr	r3, [r7, #12]
 802664e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8026650:	697b      	ldr	r3, [r7, #20]
 8026652:	6818      	ldr	r0, [r3, #0]
 8026654:	697b      	ldr	r3, [r7, #20]
 8026656:	6859      	ldr	r1, [r3, #4]
 8026658:	687b      	ldr	r3, [r7, #4]
 802665a:	68ba      	ldr	r2, [r7, #8]
 802665c:	f7ff fd14 	bl	8026088 <lfs_dir_commitattr>
 8026660:	4603      	mov	r3, r0
}
 8026662:	4618      	mov	r0, r3
 8026664:	3718      	adds	r7, #24
 8026666:	46bd      	mov	sp, r7
 8026668:	bd80      	pop	{r7, pc}

0802666a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 802666a:	b480      	push	{r7}
 802666c:	b083      	sub	sp, #12
 802666e:	af00      	add	r7, sp, #0
 8026670:	6078      	str	r0, [r7, #4]
 8026672:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8026674:	687b      	ldr	r3, [r7, #4]
 8026676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 802667a:	2b00      	cmp	r3, #0
 802667c:	dd11      	ble.n	80266a2 <lfs_dir_needsrelocation+0x38>
 802667e:	683b      	ldr	r3, [r7, #0]
 8026680:	689b      	ldr	r3, [r3, #8]
 8026682:	3301      	adds	r3, #1
 8026684:	687a      	ldr	r2, [r7, #4]
 8026686:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802668a:	3201      	adds	r2, #1
 802668c:	f042 0201 	orr.w	r2, r2, #1
 8026690:	fbb3 f1f2 	udiv	r1, r3, r2
 8026694:	fb01 f202 	mul.w	r2, r1, r2
 8026698:	1a9b      	subs	r3, r3, r2
 802669a:	2b00      	cmp	r3, #0
 802669c:	d101      	bne.n	80266a2 <lfs_dir_needsrelocation+0x38>
 802669e:	2301      	movs	r3, #1
 80266a0:	e000      	b.n	80266a4 <lfs_dir_needsrelocation+0x3a>
 80266a2:	2300      	movs	r3, #0
 80266a4:	f003 0301 	and.w	r3, r3, #1
 80266a8:	b2db      	uxtb	r3, r3
}
 80266aa:	4618      	mov	r0, r3
 80266ac:	370c      	adds	r7, #12
 80266ae:	46bd      	mov	sp, r7
 80266b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80266b4:	4770      	bx	lr
	...

080266b8 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80266b8:	b580      	push	{r7, lr}
 80266ba:	b0a4      	sub	sp, #144	; 0x90
 80266bc:	af0a      	add	r7, sp, #40	; 0x28
 80266be:	60f8      	str	r0, [r7, #12]
 80266c0:	60b9      	str	r1, [r7, #8]
 80266c2:	607a      	str	r2, [r7, #4]
 80266c4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80266c6:	2300      	movs	r3, #0
 80266c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80266cc:	68b9      	ldr	r1, [r7, #8]
 80266ce:	68f8      	ldr	r0, [r7, #12]
 80266d0:	f7ff ffcb 	bl	802666a <lfs_dir_needsrelocation>
 80266d4:	4603      	mov	r3, r0
 80266d6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80266da:	68bb      	ldr	r3, [r7, #8]
 80266dc:	689b      	ldr	r3, [r3, #8]
 80266de:	1c5a      	adds	r2, r3, #1
 80266e0:	68bb      	ldr	r3, [r7, #8]
 80266e2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80266e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80266e8:	2b00      	cmp	r3, #0
 80266ea:	d00e      	beq.n	802670a <lfs_dir_compact+0x52>
 80266ec:	68bb      	ldr	r3, [r7, #8]
 80266ee:	2200      	movs	r2, #0
 80266f0:	657a      	str	r2, [r7, #84]	; 0x54
 80266f2:	2201      	movs	r2, #1
 80266f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80266f6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80266fa:	4611      	mov	r1, r2
 80266fc:	4618      	mov	r0, r3
 80266fe:	f7fd fd11 	bl	8024124 <lfs_pair_cmp>
 8026702:	4603      	mov	r3, r0
 8026704:	2b00      	cmp	r3, #0
 8026706:	f040 8155 	bne.w	80269b4 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 802670a:	68bb      	ldr	r3, [r7, #8]
 802670c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 802670e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026710:	2300      	movs	r3, #0
 8026712:	643b      	str	r3, [r7, #64]	; 0x40
 8026714:	f04f 33ff 	mov.w	r3, #4294967295
 8026718:	647b      	str	r3, [r7, #68]	; 0x44
 802671a:	f04f 33ff 	mov.w	r3, #4294967295
 802671e:	64bb      	str	r3, [r7, #72]	; 0x48
 8026720:	2300      	movs	r3, #0
 8026722:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8026724:	68fb      	ldr	r3, [r7, #12]
 8026726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802672a:	2b00      	cmp	r3, #0
 802672c:	d004      	beq.n	8026738 <lfs_dir_compact+0x80>
 802672e:	68fb      	ldr	r3, [r7, #12]
 8026730:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026734:	3b08      	subs	r3, #8
 8026736:	e003      	b.n	8026740 <lfs_dir_compact+0x88>
 8026738:	68fb      	ldr	r3, [r7, #12]
 802673a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802673c:	69db      	ldr	r3, [r3, #28]
 802673e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8026740:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8026742:	68bb      	ldr	r3, [r7, #8]
 8026744:	685b      	ldr	r3, [r3, #4]
 8026746:	4619      	mov	r1, r3
 8026748:	68f8      	ldr	r0, [r7, #12]
 802674a:	f7fd fc89 	bl	8024060 <lfs_bd_erase>
 802674e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026752:	2b00      	cmp	r3, #0
 8026754:	d006      	beq.n	8026764 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8026756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026758:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802675c:	f000 812c 	beq.w	80269b8 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8026760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026762:	e188      	b.n	8026a76 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8026764:	68bb      	ldr	r3, [r7, #8]
 8026766:	689b      	ldr	r3, [r3, #8]
 8026768:	4618      	mov	r0, r3
 802676a:	f7fd f926 	bl	80239ba <lfs_tole32>
 802676e:	4602      	mov	r2, r0
 8026770:	68bb      	ldr	r3, [r7, #8]
 8026772:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8026774:	68bb      	ldr	r3, [r7, #8]
 8026776:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 802677a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 802677e:	2304      	movs	r3, #4
 8026780:	68f8      	ldr	r0, [r7, #12]
 8026782:	f7ff fc4b 	bl	802601c <lfs_dir_commitprog>
 8026786:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8026788:	68bb      	ldr	r3, [r7, #8]
 802678a:	689b      	ldr	r3, [r3, #8]
 802678c:	4618      	mov	r0, r3
 802678e:	f7fd f909 	bl	80239a4 <lfs_fromle32>
 8026792:	4602      	mov	r2, r0
 8026794:	68bb      	ldr	r3, [r7, #8]
 8026796:	609a      	str	r2, [r3, #8]
            if (err) {
 8026798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802679a:	2b00      	cmp	r3, #0
 802679c:	d006      	beq.n	80267ac <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 802679e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80267a0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80267a4:	f000 810a 	beq.w	80269bc <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80267a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80267aa:	e164      	b.n	8026a76 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80267ac:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80267b0:	425b      	negs	r3, r3
 80267b2:	b29b      	uxth	r3, r3
 80267b4:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80267b6:	68fa      	ldr	r2, [r7, #12]
 80267b8:	637a      	str	r2, [r7, #52]	; 0x34
 80267ba:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80267be:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80267c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80267c4:	9208      	str	r2, [sp, #32]
 80267c6:	4aae      	ldr	r2, [pc, #696]	; (8026a80 <lfs_dir_compact+0x3c8>)
 80267c8:	9207      	str	r2, [sp, #28]
 80267ca:	9306      	str	r3, [sp, #24]
 80267cc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80267d0:	9305      	str	r3, [sp, #20]
 80267d2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80267d6:	9304      	str	r3, [sp, #16]
 80267d8:	2300      	movs	r3, #0
 80267da:	9303      	str	r3, [sp, #12]
 80267dc:	4ba9      	ldr	r3, [pc, #676]	; (8026a84 <lfs_dir_compact+0x3cc>)
 80267de:	9302      	str	r3, [sp, #8]
 80267e0:	683b      	ldr	r3, [r7, #0]
 80267e2:	9301      	str	r3, [sp, #4]
 80267e4:	687b      	ldr	r3, [r7, #4]
 80267e6:	9300      	str	r3, [sp, #0]
 80267e8:	f04f 33ff 	mov.w	r3, #4294967295
 80267ec:	2200      	movs	r2, #0
 80267ee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80267f0:	68f8      	ldr	r0, [r7, #12]
 80267f2:	f7fe fab9 	bl	8024d68 <lfs_dir_traverse>
 80267f6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80267f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80267fa:	2b00      	cmp	r3, #0
 80267fc:	d006      	beq.n	802680c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80267fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026800:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026804:	f000 80dc 	beq.w	80269c0 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8026808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802680a:	e134      	b.n	8026a76 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 802680c:	68bb      	ldr	r3, [r7, #8]
 802680e:	3318      	adds	r3, #24
 8026810:	4618      	mov	r0, r3
 8026812:	f7fd fc6c 	bl	80240ee <lfs_pair_isnull>
 8026816:	4603      	mov	r3, r0
 8026818:	f083 0301 	eor.w	r3, r3, #1
 802681c:	b2db      	uxtb	r3, r3
 802681e:	2b00      	cmp	r3, #0
 8026820:	d022      	beq.n	8026868 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8026822:	68bb      	ldr	r3, [r7, #8]
 8026824:	3318      	adds	r3, #24
 8026826:	4618      	mov	r0, r3
 8026828:	f7fd fced 	bl	8024206 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 802682c:	68bb      	ldr	r3, [r7, #8]
 802682e:	7ddb      	ldrb	r3, [r3, #23]
 8026830:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8026834:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8026836:	4a94      	ldr	r2, [pc, #592]	; (8026a88 <lfs_dir_compact+0x3d0>)
 8026838:	431a      	orrs	r2, r3
                        dir->tail);
 802683a:	68bb      	ldr	r3, [r7, #8]
 802683c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 802683e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026842:	68f8      	ldr	r0, [r7, #12]
 8026844:	f7ff fc20 	bl	8026088 <lfs_dir_commitattr>
 8026848:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 802684a:	68bb      	ldr	r3, [r7, #8]
 802684c:	3318      	adds	r3, #24
 802684e:	4618      	mov	r0, r3
 8026850:	f7fd fcbf 	bl	80241d2 <lfs_pair_fromle32>
                if (err) {
 8026854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026856:	2b00      	cmp	r3, #0
 8026858:	d006      	beq.n	8026868 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802685a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802685c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026860:	f000 80b0 	beq.w	80269c4 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8026864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026866:	e106      	b.n	8026a76 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8026868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802686c:	2200      	movs	r2, #0
 802686e:	601a      	str	r2, [r3, #0]
 8026870:	605a      	str	r2, [r3, #4]
 8026872:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026874:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8026878:	f083 0301 	eor.w	r3, r3, #1
 802687c:	b2db      	uxtb	r3, r3
 802687e:	2b00      	cmp	r3, #0
 8026880:	d011      	beq.n	80268a6 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8026882:	68fb      	ldr	r3, [r7, #12]
 8026884:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802688c:	4611      	mov	r1, r2
 802688e:	4618      	mov	r0, r3
 8026890:	f7fd fd5f 	bl	8024352 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8026894:	68fb      	ldr	r3, [r7, #12]
 8026896:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802689a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802689e:	4611      	mov	r1, r2
 80268a0:	4618      	mov	r0, r3
 80268a2:	f7fd fd56 	bl	8024352 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80268a6:	68fb      	ldr	r3, [r7, #12]
 80268a8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80268ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80268b0:	4611      	mov	r1, r2
 80268b2:	4618      	mov	r0, r3
 80268b4:	f7fd fd4d 	bl	8024352 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80268b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80268ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80268be:	f023 0303 	bic.w	r3, r3, #3
 80268c2:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80268c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80268c8:	461a      	mov	r2, r3
 80268ca:	68b9      	ldr	r1, [r7, #8]
 80268cc:	68f8      	ldr	r0, [r7, #12]
 80268ce:	f7ff f9b5 	bl	8025c3c <lfs_dir_getgstate>
 80268d2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80268d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80268d6:	2b00      	cmp	r3, #0
 80268d8:	d001      	beq.n	80268de <lfs_dir_compact+0x226>
                return err;
 80268da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80268dc:	e0cb      	b.n	8026a76 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80268de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80268e2:	4618      	mov	r0, r3
 80268e4:	f7fd fd5a 	bl	802439c <lfs_gstate_iszero>
 80268e8:	4603      	mov	r3, r0
 80268ea:	f083 0301 	eor.w	r3, r3, #1
 80268ee:	b2db      	uxtb	r3, r3
 80268f0:	2b00      	cmp	r3, #0
 80268f2:	d016      	beq.n	8026922 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80268f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80268f8:	4618      	mov	r0, r3
 80268fa:	f7fd fde1 	bl	80244c0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80268fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026902:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026906:	4a61      	ldr	r2, [pc, #388]	; (8026a8c <lfs_dir_compact+0x3d4>)
 8026908:	68f8      	ldr	r0, [r7, #12]
 802690a:	f7ff fbbd 	bl	8026088 <lfs_dir_commitattr>
 802690e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8026910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026912:	2b00      	cmp	r3, #0
 8026914:	d005      	beq.n	8026922 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8026916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026918:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802691c:	d054      	beq.n	80269c8 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 802691e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026920:	e0a9      	b.n	8026a76 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8026922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8026926:	4619      	mov	r1, r3
 8026928:	68f8      	ldr	r0, [r7, #12]
 802692a:	f7ff fc2d 	bl	8026188 <lfs_dir_commitcrc>
 802692e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026932:	2b00      	cmp	r3, #0
 8026934:	d005      	beq.n	8026942 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8026936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026938:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802693c:	d046      	beq.n	80269cc <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 802693e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026940:	e099      	b.n	8026a76 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026944:	68fa      	ldr	r2, [r7, #12]
 8026946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026948:	6992      	ldr	r2, [r2, #24]
 802694a:	fbb3 f1f2 	udiv	r1, r3, r2
 802694e:	fb01 f202 	mul.w	r2, r1, r2
 8026952:	1a9b      	subs	r3, r3, r2
 8026954:	2b00      	cmp	r3, #0
 8026956:	d006      	beq.n	8026966 <lfs_dir_compact+0x2ae>
 8026958:	4b4d      	ldr	r3, [pc, #308]	; (8026a90 <lfs_dir_compact+0x3d8>)
 802695a:	4a4e      	ldr	r2, [pc, #312]	; (8026a94 <lfs_dir_compact+0x3dc>)
 802695c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8026960:	484d      	ldr	r0, [pc, #308]	; (8026a98 <lfs_dir_compact+0x3e0>)
 8026962:	f005 fef3 	bl	802c74c <__assert_func>
            lfs_pair_swap(dir->pair);
 8026966:	68bb      	ldr	r3, [r7, #8]
 8026968:	4618      	mov	r0, r3
 802696a:	f7fd fbab 	bl	80240c4 <lfs_pair_swap>
            dir->count = end - begin;
 802696e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8026972:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026976:	1ad3      	subs	r3, r2, r3
 8026978:	b29a      	uxth	r2, r3
 802697a:	68bb      	ldr	r3, [r7, #8]
 802697c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 802697e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026980:	68bb      	ldr	r3, [r7, #8]
 8026982:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8026984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026986:	68bb      	ldr	r3, [r7, #8]
 8026988:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 802698a:	68fb      	ldr	r3, [r7, #12]
 802698c:	3348      	adds	r3, #72	; 0x48
 802698e:	2200      	movs	r2, #0
 8026990:	601a      	str	r2, [r3, #0]
 8026992:	605a      	str	r2, [r3, #4]
 8026994:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026996:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802699a:	f083 0301 	eor.w	r3, r3, #1
 802699e:	b2db      	uxtb	r3, r3
 80269a0:	2b00      	cmp	r3, #0
 80269a2:	d065      	beq.n	8026a70 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80269a4:	68fb      	ldr	r3, [r7, #12]
 80269a6:	68fa      	ldr	r2, [r7, #12]
 80269a8:	333c      	adds	r3, #60	; 0x3c
 80269aa:	3230      	adds	r2, #48	; 0x30
 80269ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80269ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80269b2:	e05d      	b.n	8026a70 <lfs_dir_compact+0x3b8>
        goto relocate;
 80269b4:	bf00      	nop
 80269b6:	e00a      	b.n	80269ce <lfs_dir_compact+0x316>
                    goto relocate;
 80269b8:	bf00      	nop
 80269ba:	e008      	b.n	80269ce <lfs_dir_compact+0x316>
                    goto relocate;
 80269bc:	bf00      	nop
 80269be:	e006      	b.n	80269ce <lfs_dir_compact+0x316>
                    goto relocate;
 80269c0:	bf00      	nop
 80269c2:	e004      	b.n	80269ce <lfs_dir_compact+0x316>
                        goto relocate;
 80269c4:	bf00      	nop
 80269c6:	e002      	b.n	80269ce <lfs_dir_compact+0x316>
                        goto relocate;
 80269c8:	bf00      	nop
 80269ca:	e000      	b.n	80269ce <lfs_dir_compact+0x316>
                    goto relocate;
 80269cc:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80269ce:	2301      	movs	r3, #1
 80269d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80269d4:	68fb      	ldr	r3, [r7, #12]
 80269d6:	3310      	adds	r3, #16
 80269d8:	4619      	mov	r1, r3
 80269da:	68f8      	ldr	r0, [r7, #12]
 80269dc:	f7fd f828 	bl	8023a30 <lfs_cache_drop>
        if (!tired) {
 80269e0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80269e4:	f083 0301 	eor.w	r3, r3, #1
 80269e8:	b2db      	uxtb	r3, r3
 80269ea:	2b00      	cmp	r3, #0
 80269ec:	d009      	beq.n	8026a02 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80269ee:	68bb      	ldr	r3, [r7, #8]
 80269f0:	685b      	ldr	r3, [r3, #4]
 80269f2:	4a2a      	ldr	r2, [pc, #168]	; (8026a9c <lfs_dir_compact+0x3e4>)
 80269f4:	9200      	str	r2, [sp, #0]
 80269f6:	f240 725a 	movw	r2, #1882	; 0x75a
 80269fa:	4927      	ldr	r1, [pc, #156]	; (8026a98 <lfs_dir_compact+0x3e0>)
 80269fc:	4828      	ldr	r0, [pc, #160]	; (8026aa0 <lfs_dir_compact+0x3e8>)
 80269fe:	f006 fedf 	bl	802d7c0 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026a02:	68bb      	ldr	r3, [r7, #8]
 8026a04:	2200      	movs	r2, #0
 8026a06:	617a      	str	r2, [r7, #20]
 8026a08:	2201      	movs	r2, #1
 8026a0a:	61ba      	str	r2, [r7, #24]
 8026a0c:	f107 0214 	add.w	r2, r7, #20
 8026a10:	4611      	mov	r1, r2
 8026a12:	4618      	mov	r0, r3
 8026a14:	f7fd fb86 	bl	8024124 <lfs_pair_cmp>
 8026a18:	4603      	mov	r3, r0
 8026a1a:	2b00      	cmp	r3, #0
 8026a1c:	d10c      	bne.n	8026a38 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 8026a1e:	68bb      	ldr	r3, [r7, #8]
 8026a20:	685b      	ldr	r3, [r3, #4]
 8026a22:	4a1e      	ldr	r2, [pc, #120]	; (8026a9c <lfs_dir_compact+0x3e4>)
 8026a24:	9200      	str	r2, [sp, #0]
 8026a26:	f240 725f 	movw	r2, #1887	; 0x75f
 8026a2a:	491b      	ldr	r1, [pc, #108]	; (8026a98 <lfs_dir_compact+0x3e0>)
 8026a2c:	481d      	ldr	r0, [pc, #116]	; (8026aa4 <lfs_dir_compact+0x3ec>)
 8026a2e:	f006 fec7 	bl	802d7c0 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8026a32:	f06f 031b 	mvn.w	r3, #27
 8026a36:	e01e      	b.n	8026a76 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8026a38:	68bb      	ldr	r3, [r7, #8]
 8026a3a:	3304      	adds	r3, #4
 8026a3c:	4619      	mov	r1, r3
 8026a3e:	68f8      	ldr	r0, [r7, #12]
 8026a40:	f7fd fea6 	bl	8024790 <lfs_alloc>
 8026a44:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8026a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	d00c      	beq.n	8026a66 <lfs_dir_compact+0x3ae>
 8026a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a4e:	f113 0f1c 	cmn.w	r3, #28
 8026a52:	d106      	bne.n	8026a62 <lfs_dir_compact+0x3aa>
 8026a54:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026a58:	f083 0301 	eor.w	r3, r3, #1
 8026a5c:	b2db      	uxtb	r3, r3
 8026a5e:	2b00      	cmp	r3, #0
 8026a60:	d001      	beq.n	8026a66 <lfs_dir_compact+0x3ae>
            return err;
 8026a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a64:	e007      	b.n	8026a76 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8026a66:	2300      	movs	r3, #0
 8026a68:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8026a6c:	bf00      	nop
    while (true) {
 8026a6e:	e64c      	b.n	802670a <lfs_dir_compact+0x52>
        break;
 8026a70:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8026a72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8026a76:	4618      	mov	r0, r3
 8026a78:	3768      	adds	r7, #104	; 0x68
 8026a7a:	46bd      	mov	sp, r7
 8026a7c:	bd80      	pop	{r7, pc}
 8026a7e:	bf00      	nop
 8026a80:	08026641 	.word	0x08026641
 8026a84:	400ffc00 	.word	0x400ffc00
 8026a88:	000ffc08 	.word	0x000ffc08
 8026a8c:	7ffffc0c 	.word	0x7ffffc0c
 8026a90:	080339ac 	.word	0x080339ac
 8026a94:	08034b4c 	.word	0x08034b4c
 8026a98:	08033840 	.word	0x08033840
 8026a9c:	08033954 	.word	0x08033954
 8026aa0:	080339d4 	.word	0x080339d4
 8026aa4:	080339f8 	.word	0x080339f8

08026aa8 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026aa8:	b590      	push	{r4, r7, lr}
 8026aaa:	b097      	sub	sp, #92	; 0x5c
 8026aac:	af0a      	add	r7, sp, #40	; 0x28
 8026aae:	60f8      	str	r0, [r7, #12]
 8026ab0:	60b9      	str	r1, [r7, #8]
 8026ab2:	607a      	str	r2, [r7, #4]
 8026ab4:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8026ab6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026aba:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026abc:	e058      	b.n	8026b70 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8026abe:	2300      	movs	r3, #0
 8026ac0:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8026ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026ac4:	b29b      	uxth	r3, r3
 8026ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026ac8:	b292      	uxth	r2, r2
 8026aca:	4252      	negs	r2, r2
 8026acc:	b292      	uxth	r2, r2
 8026ace:	b212      	sxth	r2, r2
 8026ad0:	f107 0118 	add.w	r1, r7, #24
 8026ad4:	9108      	str	r1, [sp, #32]
 8026ad6:	4979      	ldr	r1, [pc, #484]	; (8026cbc <lfs_dir_splittingcompact+0x214>)
 8026ad8:	9107      	str	r1, [sp, #28]
 8026ada:	9206      	str	r2, [sp, #24]
 8026adc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026ae0:	9205      	str	r2, [sp, #20]
 8026ae2:	9304      	str	r3, [sp, #16]
 8026ae4:	2300      	movs	r3, #0
 8026ae6:	9303      	str	r3, [sp, #12]
 8026ae8:	4b75      	ldr	r3, [pc, #468]	; (8026cc0 <lfs_dir_splittingcompact+0x218>)
 8026aea:	9302      	str	r3, [sp, #8]
 8026aec:	683b      	ldr	r3, [r7, #0]
 8026aee:	9301      	str	r3, [sp, #4]
 8026af0:	687b      	ldr	r3, [r7, #4]
 8026af2:	9300      	str	r3, [sp, #0]
 8026af4:	f04f 33ff 	mov.w	r3, #4294967295
 8026af8:	2200      	movs	r2, #0
 8026afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026afc:	68f8      	ldr	r0, [r7, #12]
 8026afe:	f7fe f933 	bl	8024d68 <lfs_dir_traverse>
 8026b02:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8026b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026b06:	2b00      	cmp	r3, #0
 8026b08:	d001      	beq.n	8026b0e <lfs_dir_splittingcompact+0x66>
                return err;
 8026b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026b0c:	e0d1      	b.n	8026cb2 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8026b0e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b14:	1ad3      	subs	r3, r2, r3
 8026b16:	2bfe      	cmp	r3, #254	; 0xfe
 8026b18:	d822      	bhi.n	8026b60 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026b1a:	68fb      	ldr	r3, [r7, #12]
 8026b1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b1e:	69db      	ldr	r3, [r3, #28]
 8026b20:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8026b24:	68fb      	ldr	r3, [r7, #12]
 8026b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026b2a:	2b00      	cmp	r3, #0
 8026b2c:	d004      	beq.n	8026b38 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8026b2e:	68fb      	ldr	r3, [r7, #12]
 8026b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026b34:	085b      	lsrs	r3, r3, #1
 8026b36:	e003      	b.n	8026b40 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8026b38:	68fb      	ldr	r3, [r7, #12]
 8026b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026b3c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026b3e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8026b40:	68fa      	ldr	r2, [r7, #12]
 8026b42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026b44:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026b46:	4611      	mov	r1, r2
 8026b48:	4618      	mov	r0, r3
 8026b4a:	f7fc fee0 	bl	802390e <lfs_alignup>
 8026b4e:	4603      	mov	r3, r0
 8026b50:	4619      	mov	r1, r3
 8026b52:	4620      	mov	r0, r4
 8026b54:	f7fc feb6 	bl	80238c4 <lfs_min>
 8026b58:	4602      	mov	r2, r0
 8026b5a:	69bb      	ldr	r3, [r7, #24]
 8026b5c:	429a      	cmp	r2, r3
 8026b5e:	d20e      	bcs.n	8026b7e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8026b60:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b66:	1ad3      	subs	r3, r2, r3
 8026b68:	085b      	lsrs	r3, r3, #1
 8026b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026b6c:	4413      	add	r3, r2
 8026b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026b70:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b76:	1ad3      	subs	r3, r2, r3
 8026b78:	2b01      	cmp	r3, #1
 8026b7a:	d8a0      	bhi.n	8026abe <lfs_dir_splittingcompact+0x16>
 8026b7c:	e000      	b.n	8026b80 <lfs_dir_splittingcompact+0xd8>
                break;
 8026b7e:	bf00      	nop
        }

        if (split == begin) {
 8026b80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026b86:	429a      	cmp	r2, r3
 8026b88:	d02d      	beq.n	8026be6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b8c:	b29b      	uxth	r3, r3
 8026b8e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026b92:	9202      	str	r2, [sp, #8]
 8026b94:	9301      	str	r3, [sp, #4]
 8026b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026b98:	9300      	str	r3, [sp, #0]
 8026b9a:	683b      	ldr	r3, [r7, #0]
 8026b9c:	687a      	ldr	r2, [r7, #4]
 8026b9e:	68b9      	ldr	r1, [r7, #8]
 8026ba0:	68f8      	ldr	r0, [r7, #12]
 8026ba2:	f7ff fce3 	bl	802656c <lfs_dir_split>
 8026ba6:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8026ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026baa:	2b00      	cmp	r3, #0
 8026bac:	d005      	beq.n	8026bba <lfs_dir_splittingcompact+0x112>
 8026bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026bb0:	f113 0f1c 	cmn.w	r3, #28
 8026bb4:	d001      	beq.n	8026bba <lfs_dir_splittingcompact+0x112>
            return err;
 8026bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026bb8:	e07b      	b.n	8026cb2 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8026bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026bbc:	2b00      	cmp	r3, #0
 8026bbe:	d00e      	beq.n	8026bde <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8026bc0:	68bb      	ldr	r3, [r7, #8]
 8026bc2:	681a      	ldr	r2, [r3, #0]
 8026bc4:	68bb      	ldr	r3, [r7, #8]
 8026bc6:	685b      	ldr	r3, [r3, #4]
 8026bc8:	493e      	ldr	r1, [pc, #248]	; (8026cc4 <lfs_dir_splittingcompact+0x21c>)
 8026bca:	9101      	str	r1, [sp, #4]
 8026bcc:	9300      	str	r3, [sp, #0]
 8026bce:	4613      	mov	r3, r2
 8026bd0:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8026bd4:	493c      	ldr	r1, [pc, #240]	; (8026cc8 <lfs_dir_splittingcompact+0x220>)
 8026bd6:	483d      	ldr	r0, [pc, #244]	; (8026ccc <lfs_dir_splittingcompact+0x224>)
 8026bd8:	f006 fdf2 	bl	802d7c0 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8026bdc:	e004      	b.n	8026be8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8026bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026be0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8026be4:	e767      	b.n	8026ab6 <lfs_dir_splittingcompact+0xe>
            break;
 8026be6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8026be8:	68b9      	ldr	r1, [r7, #8]
 8026bea:	68f8      	ldr	r0, [r7, #12]
 8026bec:	f7ff fd3d 	bl	802666a <lfs_dir_needsrelocation>
 8026bf0:	4603      	mov	r3, r0
 8026bf2:	2b00      	cmp	r3, #0
 8026bf4:	d04e      	beq.n	8026c94 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026bf6:	68bb      	ldr	r3, [r7, #8]
 8026bf8:	2200      	movs	r2, #0
 8026bfa:	613a      	str	r2, [r7, #16]
 8026bfc:	2201      	movs	r2, #1
 8026bfe:	617a      	str	r2, [r7, #20]
 8026c00:	f107 0210 	add.w	r2, r7, #16
 8026c04:	4611      	mov	r1, r2
 8026c06:	4618      	mov	r0, r3
 8026c08:	f7fd fa8c 	bl	8024124 <lfs_pair_cmp>
 8026c0c:	4603      	mov	r3, r0
 8026c0e:	2b00      	cmp	r3, #0
 8026c10:	d140      	bne.n	8026c94 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8026c12:	68f8      	ldr	r0, [r7, #12]
 8026c14:	f003 fe4c 	bl	802a8b0 <lfs_fs_rawsize>
 8026c18:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8026c1a:	6a3b      	ldr	r3, [r7, #32]
 8026c1c:	2b00      	cmp	r3, #0
 8026c1e:	da01      	bge.n	8026c24 <lfs_dir_splittingcompact+0x17c>
            return size;
 8026c20:	6a3b      	ldr	r3, [r7, #32]
 8026c22:	e046      	b.n	8026cb2 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8026c24:	68fb      	ldr	r3, [r7, #12]
 8026c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026c28:	6a1b      	ldr	r3, [r3, #32]
 8026c2a:	085a      	lsrs	r2, r3, #1
 8026c2c:	6a3b      	ldr	r3, [r7, #32]
 8026c2e:	429a      	cmp	r2, r3
 8026c30:	d930      	bls.n	8026c94 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8026c32:	68bb      	ldr	r3, [r7, #8]
 8026c34:	689b      	ldr	r3, [r3, #8]
 8026c36:	4a23      	ldr	r2, [pc, #140]	; (8026cc4 <lfs_dir_splittingcompact+0x21c>)
 8026c38:	9200      	str	r2, [sp, #0]
 8026c3a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8026c3e:	4922      	ldr	r1, [pc, #136]	; (8026cc8 <lfs_dir_splittingcompact+0x220>)
 8026c40:	4823      	ldr	r0, [pc, #140]	; (8026cd0 <lfs_dir_splittingcompact+0x228>)
 8026c42:	f006 fdbd 	bl	802d7c0 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026c46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026c4a:	9302      	str	r3, [sp, #8]
 8026c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026c50:	9301      	str	r3, [sp, #4]
 8026c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026c54:	9300      	str	r3, [sp, #0]
 8026c56:	683b      	ldr	r3, [r7, #0]
 8026c58:	687a      	ldr	r2, [r7, #4]
 8026c5a:	68b9      	ldr	r1, [r7, #8]
 8026c5c:	68f8      	ldr	r0, [r7, #12]
 8026c5e:	f7ff fc85 	bl	802656c <lfs_dir_split>
 8026c62:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026c64:	69fb      	ldr	r3, [r7, #28]
 8026c66:	2b00      	cmp	r3, #0
 8026c68:	d005      	beq.n	8026c76 <lfs_dir_splittingcompact+0x1ce>
 8026c6a:	69fb      	ldr	r3, [r7, #28]
 8026c6c:	f113 0f1c 	cmn.w	r3, #28
 8026c70:	d001      	beq.n	8026c76 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026c72:	69fb      	ldr	r3, [r7, #28]
 8026c74:	e01d      	b.n	8026cb2 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026c76:	69fb      	ldr	r3, [r7, #28]
 8026c78:	2b00      	cmp	r3, #0
 8026c7a:	d007      	beq.n	8026c8c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8026c7c:	4b11      	ldr	r3, [pc, #68]	; (8026cc4 <lfs_dir_splittingcompact+0x21c>)
 8026c7e:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8026c82:	4911      	ldr	r1, [pc, #68]	; (8026cc8 <lfs_dir_splittingcompact+0x220>)
 8026c84:	4813      	ldr	r0, [pc, #76]	; (8026cd4 <lfs_dir_splittingcompact+0x22c>)
 8026c86:	f006 fd9b 	bl	802d7c0 <iprintf>
 8026c8a:	e003      	b.n	8026c94 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8026c8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026c90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8026c94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026c98:	9302      	str	r3, [sp, #8]
 8026c9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026c9e:	9301      	str	r3, [sp, #4]
 8026ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026ca2:	9300      	str	r3, [sp, #0]
 8026ca4:	683b      	ldr	r3, [r7, #0]
 8026ca6:	687a      	ldr	r2, [r7, #4]
 8026ca8:	68b9      	ldr	r1, [r7, #8]
 8026caa:	68f8      	ldr	r0, [r7, #12]
 8026cac:	f7ff fd04 	bl	80266b8 <lfs_dir_compact>
 8026cb0:	4603      	mov	r3, r0
}
 8026cb2:	4618      	mov	r0, r3
 8026cb4:	3734      	adds	r7, #52	; 0x34
 8026cb6:	46bd      	mov	sp, r7
 8026cb8:	bd90      	pop	{r4, r7, pc}
 8026cba:	bf00      	nop
 8026cbc:	08026615 	.word	0x08026615
 8026cc0:	400ffc00 	.word	0x400ffc00
 8026cc4:	08033954 	.word	0x08033954
 8026cc8:	08033840 	.word	0x08033840
 8026ccc:	08033a30 	.word	0x08033a30
 8026cd0:	08033a60 	.word	0x08033a60
 8026cd4:	08033a90 	.word	0x08033a90

08026cd8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8026cd8:	b5b0      	push	{r4, r5, r7, lr}
 8026cda:	b0a6      	sub	sp, #152	; 0x98
 8026cdc:	af0a      	add	r7, sp, #40	; 0x28
 8026cde:	60f8      	str	r0, [r7, #12]
 8026ce0:	60b9      	str	r1, [r7, #8]
 8026ce2:	607a      	str	r2, [r7, #4]
 8026ce4:	603b      	str	r3, [r7, #0]
    int state = 0;
 8026ce6:	2300      	movs	r3, #0
 8026ce8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8026cea:	2300      	movs	r3, #0
 8026cec:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8026cf0:	2300      	movs	r3, #0
 8026cf2:	667b      	str	r3, [r7, #100]	; 0x64
 8026cf4:	e06d      	b.n	8026dd2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8026cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026cf8:	00db      	lsls	r3, r3, #3
 8026cfa:	683a      	ldr	r2, [r7, #0]
 8026cfc:	4413      	add	r3, r2
 8026cfe:	681b      	ldr	r3, [r3, #0]
 8026d00:	4618      	mov	r0, r3
 8026d02:	f7fd facb 	bl	802429c <lfs_tag_type3>
 8026d06:	4603      	mov	r3, r0
 8026d08:	461a      	mov	r2, r3
 8026d0a:	f240 4301 	movw	r3, #1025	; 0x401
 8026d0e:	429a      	cmp	r2, r3
 8026d10:	d106      	bne.n	8026d20 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8026d12:	68bb      	ldr	r3, [r7, #8]
 8026d14:	8a9b      	ldrh	r3, [r3, #20]
 8026d16:	3301      	adds	r3, #1
 8026d18:	b29a      	uxth	r2, r3
 8026d1a:	68bb      	ldr	r3, [r7, #8]
 8026d1c:	829a      	strh	r2, [r3, #20]
 8026d1e:	e055      	b.n	8026dcc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8026d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d22:	00db      	lsls	r3, r3, #3
 8026d24:	683a      	ldr	r2, [r7, #0]
 8026d26:	4413      	add	r3, r2
 8026d28:	681b      	ldr	r3, [r3, #0]
 8026d2a:	4618      	mov	r0, r3
 8026d2c:	f7fd fab6 	bl	802429c <lfs_tag_type3>
 8026d30:	4603      	mov	r3, r0
 8026d32:	461a      	mov	r2, r3
 8026d34:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026d38:	429a      	cmp	r2, r3
 8026d3a:	d114      	bne.n	8026d66 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8026d3c:	68bb      	ldr	r3, [r7, #8]
 8026d3e:	8a9b      	ldrh	r3, [r3, #20]
 8026d40:	2b00      	cmp	r3, #0
 8026d42:	d106      	bne.n	8026d52 <lfs_dir_relocatingcommit+0x7a>
 8026d44:	4ba4      	ldr	r3, [pc, #656]	; (8026fd8 <lfs_dir_relocatingcommit+0x300>)
 8026d46:	4aa5      	ldr	r2, [pc, #660]	; (8026fdc <lfs_dir_relocatingcommit+0x304>)
 8026d48:	f240 71df 	movw	r1, #2015	; 0x7df
 8026d4c:	48a4      	ldr	r0, [pc, #656]	; (8026fe0 <lfs_dir_relocatingcommit+0x308>)
 8026d4e:	f005 fcfd 	bl	802c74c <__assert_func>
            dir->count -= 1;
 8026d52:	68bb      	ldr	r3, [r7, #8]
 8026d54:	8a9b      	ldrh	r3, [r3, #20]
 8026d56:	3b01      	subs	r3, #1
 8026d58:	b29a      	uxth	r2, r3
 8026d5a:	68bb      	ldr	r3, [r7, #8]
 8026d5c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8026d5e:	2301      	movs	r3, #1
 8026d60:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8026d64:	e032      	b.n	8026dcc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d68:	00db      	lsls	r3, r3, #3
 8026d6a:	683a      	ldr	r2, [r7, #0]
 8026d6c:	4413      	add	r3, r2
 8026d6e:	681b      	ldr	r3, [r3, #0]
 8026d70:	4618      	mov	r0, r3
 8026d72:	f7fd fa83 	bl	802427c <lfs_tag_type1>
 8026d76:	4603      	mov	r3, r0
 8026d78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8026d7c:	d126      	bne.n	8026dcc <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8026d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d80:	00db      	lsls	r3, r3, #3
 8026d82:	683a      	ldr	r2, [r7, #0]
 8026d84:	4413      	add	r3, r2
 8026d86:	685b      	ldr	r3, [r3, #4]
 8026d88:	681a      	ldr	r2, [r3, #0]
 8026d8a:	68bb      	ldr	r3, [r7, #8]
 8026d8c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8026d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d90:	00db      	lsls	r3, r3, #3
 8026d92:	683a      	ldr	r2, [r7, #0]
 8026d94:	4413      	add	r3, r2
 8026d96:	685b      	ldr	r3, [r3, #4]
 8026d98:	685a      	ldr	r2, [r3, #4]
 8026d9a:	68bb      	ldr	r3, [r7, #8]
 8026d9c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8026d9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026da0:	00db      	lsls	r3, r3, #3
 8026da2:	683a      	ldr	r2, [r7, #0]
 8026da4:	4413      	add	r3, r2
 8026da6:	681b      	ldr	r3, [r3, #0]
 8026da8:	4618      	mov	r0, r3
 8026daa:	f7fd fa87 	bl	80242bc <lfs_tag_chunk>
 8026dae:	4603      	mov	r3, r0
 8026db0:	f003 0301 	and.w	r3, r3, #1
 8026db4:	2b00      	cmp	r3, #0
 8026db6:	bf14      	ite	ne
 8026db8:	2301      	movne	r3, #1
 8026dba:	2300      	moveq	r3, #0
 8026dbc:	b2da      	uxtb	r2, r3
 8026dbe:	68bb      	ldr	r3, [r7, #8]
 8026dc0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8026dc2:	68bb      	ldr	r3, [r7, #8]
 8026dc4:	3318      	adds	r3, #24
 8026dc6:	4618      	mov	r0, r3
 8026dc8:	f7fd fa03 	bl	80241d2 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8026dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026dce:	3301      	adds	r3, #1
 8026dd0:	667b      	str	r3, [r7, #100]	; 0x64
 8026dd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8026dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026dd8:	429a      	cmp	r2, r3
 8026dda:	db8c      	blt.n	8026cf6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8026ddc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8026de0:	2b00      	cmp	r3, #0
 8026de2:	d02b      	beq.n	8026e3c <lfs_dir_relocatingcommit+0x164>
 8026de4:	68bb      	ldr	r3, [r7, #8]
 8026de6:	8a9b      	ldrh	r3, [r3, #20]
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	d127      	bne.n	8026e3c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8026dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026df0:	2b00      	cmp	r3, #0
 8026df2:	d106      	bne.n	8026e02 <lfs_dir_relocatingcommit+0x12a>
 8026df4:	4b7b      	ldr	r3, [pc, #492]	; (8026fe4 <lfs_dir_relocatingcommit+0x30c>)
 8026df6:	4a79      	ldr	r2, [pc, #484]	; (8026fdc <lfs_dir_relocatingcommit+0x304>)
 8026df8:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8026dfc:	4878      	ldr	r0, [pc, #480]	; (8026fe0 <lfs_dir_relocatingcommit+0x308>)
 8026dfe:	f005 fca5 	bl	802c74c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8026e02:	68bb      	ldr	r3, [r7, #8]
 8026e04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026e08:	4619      	mov	r1, r3
 8026e0a:	68f8      	ldr	r0, [r7, #12]
 8026e0c:	f003 f9c2 	bl	802a194 <lfs_fs_pred>
 8026e10:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8026e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026e14:	2b00      	cmp	r3, #0
 8026e16:	d005      	beq.n	8026e24 <lfs_dir_relocatingcommit+0x14c>
 8026e18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026e1a:	f113 0f02 	cmn.w	r3, #2
 8026e1e:	d001      	beq.n	8026e24 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8026e20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026e22:	e204      	b.n	802722e <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8026e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026e26:	f113 0f02 	cmn.w	r3, #2
 8026e2a:	d007      	beq.n	8026e3c <lfs_dir_relocatingcommit+0x164>
 8026e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026e30:	7ddb      	ldrb	r3, [r3, #23]
 8026e32:	2b00      	cmp	r3, #0
 8026e34:	d002      	beq.n	8026e3c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8026e36:	2302      	movs	r3, #2
 8026e38:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8026e3a:	e121      	b.n	8027080 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8026e3c:	68bb      	ldr	r3, [r7, #8]
 8026e3e:	7d9b      	ldrb	r3, [r3, #22]
 8026e40:	2b00      	cmp	r3, #0
 8026e42:	f000 80fb 	beq.w	802703c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026e46:	68bb      	ldr	r3, [r7, #8]
 8026e48:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8026e4a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8026e4c:	68bb      	ldr	r3, [r7, #8]
 8026e4e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026e50:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8026e52:	68bb      	ldr	r3, [r7, #8]
 8026e54:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8026e58:	f04f 33ff 	mov.w	r3, #4294967295
 8026e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8026e5e:	68bb      	ldr	r3, [r7, #8]
 8026e60:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026e62:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8026e64:	68fb      	ldr	r3, [r7, #12]
 8026e66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026e6a:	2b00      	cmp	r3, #0
 8026e6c:	d004      	beq.n	8026e78 <lfs_dir_relocatingcommit+0x1a0>
 8026e6e:	68fb      	ldr	r3, [r7, #12]
 8026e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026e74:	3b08      	subs	r3, #8
 8026e76:	e003      	b.n	8026e80 <lfs_dir_relocatingcommit+0x1a8>
 8026e78:	68fb      	ldr	r3, [r7, #12]
 8026e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026e7c:	69db      	ldr	r3, [r3, #28]
 8026e7e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026e80:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026e82:	68bb      	ldr	r3, [r7, #8]
 8026e84:	3318      	adds	r3, #24
 8026e86:	4618      	mov	r0, r3
 8026e88:	f7fd f9bd 	bl	8024206 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8026e8c:	68bb      	ldr	r3, [r7, #8]
 8026e8e:	68da      	ldr	r2, [r3, #12]
 8026e90:	68bb      	ldr	r3, [r7, #8]
 8026e92:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026e94:	68fb      	ldr	r3, [r7, #12]
 8026e96:	62bb      	str	r3, [r7, #40]	; 0x28
 8026e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8026e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026ea2:	9308      	str	r3, [sp, #32]
 8026ea4:	4b50      	ldr	r3, [pc, #320]	; (8026fe8 <lfs_dir_relocatingcommit+0x310>)
 8026ea6:	9307      	str	r3, [sp, #28]
 8026ea8:	2300      	movs	r3, #0
 8026eaa:	9306      	str	r3, [sp, #24]
 8026eac:	2300      	movs	r3, #0
 8026eae:	9305      	str	r3, [sp, #20]
 8026eb0:	2300      	movs	r3, #0
 8026eb2:	9304      	str	r3, [sp, #16]
 8026eb4:	2300      	movs	r3, #0
 8026eb6:	9303      	str	r3, [sp, #12]
 8026eb8:	2300      	movs	r3, #0
 8026eba:	9302      	str	r3, [sp, #8]
 8026ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026ec0:	9301      	str	r3, [sp, #4]
 8026ec2:	683b      	ldr	r3, [r7, #0]
 8026ec4:	9300      	str	r3, [sp, #0]
 8026ec6:	460b      	mov	r3, r1
 8026ec8:	68b9      	ldr	r1, [r7, #8]
 8026eca:	68f8      	ldr	r0, [r7, #12]
 8026ecc:	f7fd ff4c 	bl	8024d68 <lfs_dir_traverse>
 8026ed0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026ed2:	68bb      	ldr	r3, [r7, #8]
 8026ed4:	3318      	adds	r3, #24
 8026ed6:	4618      	mov	r0, r3
 8026ed8:	f7fd f97b 	bl	80241d2 <lfs_pair_fromle32>
        if (err) {
 8026edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ede:	2b00      	cmp	r3, #0
 8026ee0:	d00b      	beq.n	8026efa <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026ee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ee4:	f113 0f1c 	cmn.w	r3, #28
 8026ee8:	f000 80aa 	beq.w	8027040 <lfs_dir_relocatingcommit+0x368>
 8026eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026eee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026ef2:	f000 80a5 	beq.w	8027040 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8026ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ef8:	e199      	b.n	802722e <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8026efa:	f107 031c 	add.w	r3, r7, #28
 8026efe:	2200      	movs	r2, #0
 8026f00:	601a      	str	r2, [r3, #0]
 8026f02:	605a      	str	r2, [r3, #4]
 8026f04:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026f06:	68fb      	ldr	r3, [r7, #12]
 8026f08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8026f0c:	f107 031c 	add.w	r3, r7, #28
 8026f10:	4611      	mov	r1, r2
 8026f12:	4618      	mov	r0, r3
 8026f14:	f7fd fa1d 	bl	8024352 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026f18:	68fb      	ldr	r3, [r7, #12]
 8026f1a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026f1e:	f107 031c 	add.w	r3, r7, #28
 8026f22:	4611      	mov	r1, r2
 8026f24:	4618      	mov	r0, r3
 8026f26:	f7fd fa14 	bl	8024352 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8026f2a:	68fb      	ldr	r3, [r7, #12]
 8026f2c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8026f30:	f107 031c 	add.w	r3, r7, #28
 8026f34:	4611      	mov	r1, r2
 8026f36:	4618      	mov	r0, r3
 8026f38:	f7fd fa0b 	bl	8024352 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026f3c:	69fb      	ldr	r3, [r7, #28]
 8026f3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026f42:	f023 0303 	bic.w	r3, r3, #3
 8026f46:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8026f48:	f107 031c 	add.w	r3, r7, #28
 8026f4c:	4618      	mov	r0, r3
 8026f4e:	f7fd fa25 	bl	802439c <lfs_gstate_iszero>
 8026f52:	4603      	mov	r3, r0
 8026f54:	f083 0301 	eor.w	r3, r3, #1
 8026f58:	b2db      	uxtb	r3, r3
 8026f5a:	2b00      	cmp	r3, #0
 8026f5c:	d027      	beq.n	8026fae <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026f5e:	f107 031c 	add.w	r3, r7, #28
 8026f62:	461a      	mov	r2, r3
 8026f64:	68b9      	ldr	r1, [r7, #8]
 8026f66:	68f8      	ldr	r0, [r7, #12]
 8026f68:	f7fe fe68 	bl	8025c3c <lfs_dir_getgstate>
 8026f6c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8026f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f70:	2b00      	cmp	r3, #0
 8026f72:	d001      	beq.n	8026f78 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8026f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f76:	e15a      	b.n	802722e <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8026f78:	f107 031c 	add.w	r3, r7, #28
 8026f7c:	4618      	mov	r0, r3
 8026f7e:	f7fd fa9f 	bl	80244c0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8026f82:	f107 031c 	add.w	r3, r7, #28
 8026f86:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8026f8a:	4a18      	ldr	r2, [pc, #96]	; (8026fec <lfs_dir_relocatingcommit+0x314>)
 8026f8c:	68f8      	ldr	r0, [r7, #12]
 8026f8e:	f7ff f87b 	bl	8026088 <lfs_dir_commitattr>
 8026f92:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8026f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f96:	2b00      	cmp	r3, #0
 8026f98:	d009      	beq.n	8026fae <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f9c:	f113 0f1c 	cmn.w	r3, #28
 8026fa0:	d050      	beq.n	8027044 <lfs_dir_relocatingcommit+0x36c>
 8026fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026fa4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026fa8:	d04c      	beq.n	8027044 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8026faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026fac:	e13f      	b.n	802722e <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8026fae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026fb2:	4619      	mov	r1, r3
 8026fb4:	68f8      	ldr	r0, [r7, #12]
 8026fb6:	f7ff f8e7 	bl	8026188 <lfs_dir_commitcrc>
 8026fba:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8026fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026fbe:	2b00      	cmp	r3, #0
 8026fc0:	d016      	beq.n	8026ff0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026fc4:	f113 0f1c 	cmn.w	r3, #28
 8026fc8:	d03e      	beq.n	8027048 <lfs_dir_relocatingcommit+0x370>
 8026fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026fcc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026fd0:	d03a      	beq.n	8027048 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8026fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026fd4:	e12b      	b.n	802722e <lfs_dir_relocatingcommit+0x556>
 8026fd6:	bf00      	nop
 8026fd8:	08033abc 	.word	0x08033abc
 8026fdc:	08034b5c 	.word	0x08034b5c
 8026fe0:	08033840 	.word	0x08033840
 8026fe4:	08033acc 	.word	0x08033acc
 8026fe8:	08026641 	.word	0x08026641
 8026fec:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026ff2:	68fa      	ldr	r2, [r7, #12]
 8026ff4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026ff6:	6992      	ldr	r2, [r2, #24]
 8026ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8026ffc:	fb01 f202 	mul.w	r2, r1, r2
 8027000:	1a9b      	subs	r3, r3, r2
 8027002:	2b00      	cmp	r3, #0
 8027004:	d006      	beq.n	8027014 <lfs_dir_relocatingcommit+0x33c>
 8027006:	4b8c      	ldr	r3, [pc, #560]	; (8027238 <lfs_dir_relocatingcommit+0x560>)
 8027008:	4a8c      	ldr	r2, [pc, #560]	; (802723c <lfs_dir_relocatingcommit+0x564>)
 802700a:	f640 0136 	movw	r1, #2102	; 0x836
 802700e:	488c      	ldr	r0, [pc, #560]	; (8027240 <lfs_dir_relocatingcommit+0x568>)
 8027010:	f005 fb9c 	bl	802c74c <__assert_func>
        dir->off = commit.off;
 8027014:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027016:	68bb      	ldr	r3, [r7, #8]
 8027018:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 802701a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802701c:	68bb      	ldr	r3, [r7, #8]
 802701e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8027020:	68fb      	ldr	r3, [r7, #12]
 8027022:	68fa      	ldr	r2, [r7, #12]
 8027024:	333c      	adds	r3, #60	; 0x3c
 8027026:	3230      	adds	r2, #48	; 0x30
 8027028:	ca07      	ldmia	r2, {r0, r1, r2}
 802702a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 802702e:	68fb      	ldr	r3, [r7, #12]
 8027030:	3348      	adds	r3, #72	; 0x48
 8027032:	2200      	movs	r2, #0
 8027034:	601a      	str	r2, [r3, #0]
 8027036:	605a      	str	r2, [r3, #4]
 8027038:	609a      	str	r2, [r3, #8]
 802703a:	e021      	b.n	8027080 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 802703c:	bf00      	nop
 802703e:	e004      	b.n	802704a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8027040:	bf00      	nop
 8027042:	e002      	b.n	802704a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8027044:	bf00      	nop
 8027046:	e000      	b.n	802704a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8027048:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 802704a:	68fb      	ldr	r3, [r7, #12]
 802704c:	3310      	adds	r3, #16
 802704e:	4619      	mov	r1, r3
 8027050:	68f8      	ldr	r0, [r7, #12]
 8027052:	f7fc fced 	bl	8023a30 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8027056:	68bb      	ldr	r3, [r7, #8]
 8027058:	8a9b      	ldrh	r3, [r3, #20]
 802705a:	9302      	str	r3, [sp, #8]
 802705c:	2300      	movs	r3, #0
 802705e:	9301      	str	r3, [sp, #4]
 8027060:	68bb      	ldr	r3, [r7, #8]
 8027062:	9300      	str	r3, [sp, #0]
 8027064:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8027068:	683a      	ldr	r2, [r7, #0]
 802706a:	68b9      	ldr	r1, [r7, #8]
 802706c:	68f8      	ldr	r0, [r7, #12]
 802706e:	f7ff fd1b 	bl	8026aa8 <lfs_dir_splittingcompact>
 8027072:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8027074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027076:	2b00      	cmp	r3, #0
 8027078:	da01      	bge.n	802707e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 802707a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802707c:	e0d7      	b.n	802722e <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 802707e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8027080:	687b      	ldr	r3, [r7, #4]
 8027082:	681b      	ldr	r3, [r3, #0]
 8027084:	64bb      	str	r3, [r7, #72]	; 0x48
 8027086:	687b      	ldr	r3, [r7, #4]
 8027088:	3304      	adds	r3, #4
 802708a:	681b      	ldr	r3, [r3, #0]
 802708c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802708e:	68fb      	ldr	r3, [r7, #12]
 8027090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027092:	663b      	str	r3, [r7, #96]	; 0x60
 8027094:	e0c6      	b.n	8027224 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8027096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027098:	3308      	adds	r3, #8
 802709a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802709e:	4611      	mov	r1, r2
 80270a0:	4618      	mov	r0, r3
 80270a2:	f7fd f83f 	bl	8024124 <lfs_pair_cmp>
 80270a6:	4603      	mov	r3, r0
 80270a8:	2b00      	cmp	r3, #0
 80270aa:	f040 80b8 	bne.w	802721e <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 80270ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80270b0:	68ba      	ldr	r2, [r7, #8]
 80270b2:	f103 0408 	add.w	r4, r3, #8
 80270b6:	4615      	mov	r5, r2
 80270b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80270ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80270bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80270c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 80270c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80270c6:	3308      	adds	r3, #8
 80270c8:	687a      	ldr	r2, [r7, #4]
 80270ca:	429a      	cmp	r2, r3
 80270cc:	f000 809d 	beq.w	802720a <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 80270d0:	2300      	movs	r3, #0
 80270d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80270d4:	e07b      	b.n	80271ce <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80270d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80270d8:	00db      	lsls	r3, r3, #3
 80270da:	683a      	ldr	r2, [r7, #0]
 80270dc:	4413      	add	r3, r2
 80270de:	681b      	ldr	r3, [r3, #0]
 80270e0:	4618      	mov	r0, r3
 80270e2:	f7fd f8db 	bl	802429c <lfs_tag_type3>
 80270e6:	4603      	mov	r3, r0
 80270e8:	461a      	mov	r2, r3
 80270ea:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80270ee:	429a      	cmp	r2, r3
 80270f0:	d115      	bne.n	802711e <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80270f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80270f4:	889c      	ldrh	r4, [r3, #4]
 80270f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80270f8:	00db      	lsls	r3, r3, #3
 80270fa:	683a      	ldr	r2, [r7, #0]
 80270fc:	4413      	add	r3, r2
 80270fe:	681b      	ldr	r3, [r3, #0]
 8027100:	4618      	mov	r0, r3
 8027102:	f7fd f8f5 	bl	80242f0 <lfs_tag_id>
 8027106:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8027108:	429c      	cmp	r4, r3
 802710a:	d108      	bne.n	802711e <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 802710c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802710e:	f04f 32ff 	mov.w	r2, #4294967295
 8027112:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8027114:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027116:	f04f 32ff 	mov.w	r2, #4294967295
 802711a:	60da      	str	r2, [r3, #12]
 802711c:	e054      	b.n	80271c8 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 802711e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027120:	00db      	lsls	r3, r3, #3
 8027122:	683a      	ldr	r2, [r7, #0]
 8027124:	4413      	add	r3, r2
 8027126:	681b      	ldr	r3, [r3, #0]
 8027128:	4618      	mov	r0, r3
 802712a:	f7fd f8b7 	bl	802429c <lfs_tag_type3>
 802712e:	4603      	mov	r3, r0
 8027130:	461a      	mov	r2, r3
 8027132:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8027136:	429a      	cmp	r2, r3
 8027138:	d11c      	bne.n	8027174 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 802713a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802713c:	889c      	ldrh	r4, [r3, #4]
 802713e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027140:	00db      	lsls	r3, r3, #3
 8027142:	683a      	ldr	r2, [r7, #0]
 8027144:	4413      	add	r3, r2
 8027146:	681b      	ldr	r3, [r3, #0]
 8027148:	4618      	mov	r0, r3
 802714a:	f7fd f8d1 	bl	80242f0 <lfs_tag_id>
 802714e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8027150:	429c      	cmp	r4, r3
 8027152:	d90f      	bls.n	8027174 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8027154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027156:	889b      	ldrh	r3, [r3, #4]
 8027158:	3b01      	subs	r3, #1
 802715a:	b29a      	uxth	r2, r3
 802715c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802715e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8027160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027162:	799b      	ldrb	r3, [r3, #6]
 8027164:	2b02      	cmp	r3, #2
 8027166:	d12f      	bne.n	80271c8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8027168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802716c:	1e5a      	subs	r2, r3, #1
 802716e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027170:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8027172:	e029      	b.n	80271c8 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8027174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027176:	00db      	lsls	r3, r3, #3
 8027178:	683a      	ldr	r2, [r7, #0]
 802717a:	4413      	add	r3, r2
 802717c:	681b      	ldr	r3, [r3, #0]
 802717e:	4618      	mov	r0, r3
 8027180:	f7fd f88c 	bl	802429c <lfs_tag_type3>
 8027184:	4603      	mov	r3, r0
 8027186:	461a      	mov	r2, r3
 8027188:	f240 4301 	movw	r3, #1025	; 0x401
 802718c:	429a      	cmp	r2, r3
 802718e:	d11b      	bne.n	80271c8 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8027190:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027192:	889c      	ldrh	r4, [r3, #4]
 8027194:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027196:	00db      	lsls	r3, r3, #3
 8027198:	683a      	ldr	r2, [r7, #0]
 802719a:	4413      	add	r3, r2
 802719c:	681b      	ldr	r3, [r3, #0]
 802719e:	4618      	mov	r0, r3
 80271a0:	f7fd f8a6 	bl	80242f0 <lfs_tag_id>
 80271a4:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 80271a6:	429c      	cmp	r4, r3
 80271a8:	d30e      	bcc.n	80271c8 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 80271aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271ac:	889b      	ldrh	r3, [r3, #4]
 80271ae:	3301      	adds	r3, #1
 80271b0:	b29a      	uxth	r2, r3
 80271b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271b4:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 80271b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271b8:	799b      	ldrb	r3, [r3, #6]
 80271ba:	2b02      	cmp	r3, #2
 80271bc:	d104      	bne.n	80271c8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 80271be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80271c2:	1c5a      	adds	r2, r3, #1
 80271c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271c6:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 80271c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80271ca:	3301      	adds	r3, #1
 80271cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80271ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80271d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80271d4:	429a      	cmp	r2, r3
 80271d6:	f6ff af7e 	blt.w	80270d6 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 80271da:	e016      	b.n	802720a <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 80271dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271de:	889a      	ldrh	r2, [r3, #4]
 80271e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271e2:	8b9b      	ldrh	r3, [r3, #28]
 80271e4:	1ad3      	subs	r3, r2, r3
 80271e6:	b29a      	uxth	r2, r3
 80271e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271ea:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80271ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271ee:	f103 0108 	add.w	r1, r3, #8
 80271f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271f4:	3320      	adds	r3, #32
 80271f6:	461a      	mov	r2, r3
 80271f8:	68f8      	ldr	r0, [r7, #12]
 80271fa:	f7fe fd03 	bl	8025c04 <lfs_dir_fetch>
 80271fe:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8027200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027202:	2b00      	cmp	r3, #0
 8027204:	d001      	beq.n	802720a <lfs_dir_relocatingcommit+0x532>
                    return err;
 8027206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027208:	e011      	b.n	802722e <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 802720a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802720c:	889a      	ldrh	r2, [r3, #4]
 802720e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027210:	8b9b      	ldrh	r3, [r3, #28]
 8027212:	429a      	cmp	r2, r3
 8027214:	d303      	bcc.n	802721e <lfs_dir_relocatingcommit+0x546>
 8027216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027218:	7fdb      	ldrb	r3, [r3, #31]
 802721a:	2b00      	cmp	r3, #0
 802721c:	d1de      	bne.n	80271dc <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802721e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027220:	681b      	ldr	r3, [r3, #0]
 8027222:	663b      	str	r3, [r7, #96]	; 0x60
 8027224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027226:	2b00      	cmp	r3, #0
 8027228:	f47f af35 	bne.w	8027096 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 802722c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 802722e:	4618      	mov	r0, r3
 8027230:	3770      	adds	r7, #112	; 0x70
 8027232:	46bd      	mov	sp, r7
 8027234:	bdb0      	pop	{r4, r5, r7, pc}
 8027236:	bf00      	nop
 8027238:	080339ac 	.word	0x080339ac
 802723c:	08034b5c 	.word	0x08034b5c
 8027240:	08033840 	.word	0x08033840

08027244 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027244:	b5b0      	push	{r4, r5, r7, lr}
 8027246:	b0bc      	sub	sp, #240	; 0xf0
 8027248:	af04      	add	r7, sp, #16
 802724a:	60f8      	str	r0, [r7, #12]
 802724c:	60b9      	str	r1, [r7, #8]
 802724e:	607a      	str	r2, [r7, #4]
 8027250:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8027252:	68fb      	ldr	r3, [r7, #12]
 8027254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027256:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802725a:	e045      	b.n	80272e8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 802725c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027260:	3308      	adds	r3, #8
 8027262:	68ba      	ldr	r2, [r7, #8]
 8027264:	429a      	cmp	r2, r3
 8027266:	d03a      	beq.n	80272de <lfs_dir_orphaningcommit+0x9a>
 8027268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802726c:	3308      	adds	r3, #8
 802726e:	68ba      	ldr	r2, [r7, #8]
 8027270:	4611      	mov	r1, r2
 8027272:	4618      	mov	r0, r3
 8027274:	f7fc ff56 	bl	8024124 <lfs_pair_cmp>
 8027278:	4603      	mov	r3, r0
 802727a:	2b00      	cmp	r3, #0
 802727c:	d12f      	bne.n	80272de <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 802727e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027282:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8027284:	2b01      	cmp	r3, #1
 8027286:	d12a      	bne.n	80272de <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8027288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802728e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027292:	2b00      	cmp	r3, #0
 8027294:	d023      	beq.n	80272de <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8027296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802729a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802729c:	68fb      	ldr	r3, [r7, #12]
 802729e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80272a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80272a2:	429a      	cmp	r2, r3
 80272a4:	d91b      	bls.n	80272de <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80272a6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80272aa:	68f8      	ldr	r0, [r7, #12]
 80272ac:	f001 fa26 	bl	80286fc <lfs_file_outline>
 80272b0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80272b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80272b8:	2b00      	cmp	r3, #0
 80272ba:	d002      	beq.n	80272c2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 80272bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80272c0:	e2ad      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 80272c2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80272c6:	68f8      	ldr	r0, [r7, #12]
 80272c8:	f001 fa3a 	bl	8028740 <lfs_file_flush>
 80272cc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 80272d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80272d4:	2b00      	cmp	r3, #0
 80272d6:	d002      	beq.n	80272de <lfs_dir_orphaningcommit+0x9a>
                return err;
 80272d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80272dc:	e29f      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80272de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80272e2:	681b      	ldr	r3, [r3, #0]
 80272e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80272e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80272ec:	2b00      	cmp	r3, #0
 80272ee:	d1b5      	bne.n	802725c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80272f0:	68bb      	ldr	r3, [r7, #8]
 80272f2:	681b      	ldr	r3, [r3, #0]
 80272f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80272f8:	68bb      	ldr	r3, [r7, #8]
 80272fa:	685b      	ldr	r3, [r3, #4]
 80272fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8027300:	68bb      	ldr	r3, [r7, #8]
 8027302:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027306:	461d      	mov	r5, r3
 8027308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802730a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802730c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8027314:	68ba      	ldr	r2, [r7, #8]
 8027316:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 802731a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802731e:	9301      	str	r3, [sp, #4]
 8027320:	683b      	ldr	r3, [r7, #0]
 8027322:	9300      	str	r3, [sp, #0]
 8027324:	687b      	ldr	r3, [r7, #4]
 8027326:	68f8      	ldr	r0, [r7, #12]
 8027328:	f7ff fcd6 	bl	8026cd8 <lfs_dir_relocatingcommit>
 802732c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8027330:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027334:	2b00      	cmp	r3, #0
 8027336:	da02      	bge.n	802733e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8027338:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802733c:	e26f      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 802733e:	68bb      	ldr	r3, [r7, #8]
 8027340:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027344:	4611      	mov	r1, r2
 8027346:	4618      	mov	r0, r3
 8027348:	f7fc feec 	bl	8024124 <lfs_pair_cmp>
 802734c:	4603      	mov	r3, r0
 802734e:	2b00      	cmp	r3, #0
 8027350:	d109      	bne.n	8027366 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8027352:	68bb      	ldr	r3, [r7, #8]
 8027354:	461d      	mov	r5, r3
 8027356:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 802735a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802735c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802735e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8027362:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8027366:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802736a:	2b02      	cmp	r3, #2
 802736c:	d14a      	bne.n	8027404 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 802736e:	68fb      	ldr	r3, [r7, #12]
 8027370:	3348      	adds	r3, #72	; 0x48
 8027372:	461a      	mov	r2, r3
 8027374:	68b9      	ldr	r1, [r7, #8]
 8027376:	68f8      	ldr	r0, [r7, #12]
 8027378:	f7fe fc60 	bl	8025c3c <lfs_dir_getgstate>
 802737c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8027380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8027384:	2b00      	cmp	r3, #0
 8027386:	d002      	beq.n	802738e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8027388:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802738c:	e247      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 802738e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027390:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8027394:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027396:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 802739a:	68bb      	ldr	r3, [r7, #8]
 802739c:	3318      	adds	r3, #24
 802739e:	4618      	mov	r0, r3
 80273a0:	f7fc ff31 	bl	8024206 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 80273a4:	68bb      	ldr	r3, [r7, #8]
 80273a6:	7ddb      	ldrb	r3, [r3, #23]
 80273a8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80273ac:	051a      	lsls	r2, r3, #20
 80273ae:	4bc2      	ldr	r3, [pc, #776]	; (80276b8 <lfs_dir_orphaningcommit+0x474>)
 80273b0:	4313      	orrs	r3, r2
 80273b2:	667b      	str	r3, [r7, #100]	; 0x64
 80273b4:	68bb      	ldr	r3, [r7, #8]
 80273b6:	3318      	adds	r3, #24
 80273b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80273ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80273be:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80273c2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80273c6:	2000      	movs	r0, #0
 80273c8:	9001      	str	r0, [sp, #4]
 80273ca:	2001      	movs	r0, #1
 80273cc:	9000      	str	r0, [sp, #0]
 80273ce:	68f8      	ldr	r0, [r7, #12]
 80273d0:	f7ff fc82 	bl	8026cd8 <lfs_dir_relocatingcommit>
 80273d4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 80273d8:	68bb      	ldr	r3, [r7, #8]
 80273da:	3318      	adds	r3, #24
 80273dc:	4618      	mov	r0, r3
 80273de:	f7fc fef8 	bl	80241d2 <lfs_pair_fromle32>
        if (state < 0) {
 80273e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273e6:	2b00      	cmp	r3, #0
 80273e8:	da02      	bge.n	80273f0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80273ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273ee:	e216      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80273f0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80273f4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80273f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80273fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80273fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8027404:	2300      	movs	r3, #0
 8027406:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 802740a:	e1fc      	b.n	8027806 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 802740c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8027410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8027414:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027418:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802741c:	4ca7      	ldr	r4, [pc, #668]	; (80276bc <lfs_dir_orphaningcommit+0x478>)
 802741e:	9403      	str	r4, [sp, #12]
 8027420:	9102      	str	r1, [sp, #8]
 8027422:	9201      	str	r2, [sp, #4]
 8027424:	9300      	str	r3, [sp, #0]
 8027426:	4603      	mov	r3, r0
 8027428:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 802742c:	49a4      	ldr	r1, [pc, #656]	; (80276c0 <lfs_dir_orphaningcommit+0x47c>)
 802742e:	48a5      	ldr	r0, [pc, #660]	; (80276c4 <lfs_dir_orphaningcommit+0x480>)
 8027430:	f006 f9c6 	bl	802d7c0 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8027434:	2300      	movs	r3, #0
 8027436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 802743a:	68fb      	ldr	r3, [r7, #12]
 802743c:	f103 0220 	add.w	r2, r3, #32
 8027440:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027444:	4611      	mov	r1, r2
 8027446:	4618      	mov	r0, r3
 8027448:	f7fc fe6c 	bl	8024124 <lfs_pair_cmp>
 802744c:	4603      	mov	r3, r0
 802744e:	2b00      	cmp	r3, #0
 8027450:	d107      	bne.n	8027462 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8027452:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027456:	68fb      	ldr	r3, [r7, #12]
 8027458:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 802745a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802745e:	68fb      	ldr	r3, [r7, #12]
 8027460:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027462:	68fb      	ldr	r3, [r7, #12]
 8027464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027466:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802746a:	e037      	b.n	80274dc <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 802746c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027470:	f103 0208 	add.w	r2, r3, #8
 8027474:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027478:	4611      	mov	r1, r2
 802747a:	4618      	mov	r0, r3
 802747c:	f7fc fe52 	bl	8024124 <lfs_pair_cmp>
 8027480:	4603      	mov	r3, r0
 8027482:	2b00      	cmp	r3, #0
 8027484:	d109      	bne.n	802749a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8027486:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802748a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802748e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8027490:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027494:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027498:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 802749a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802749e:	799b      	ldrb	r3, [r3, #6]
 80274a0:	2b02      	cmp	r3, #2
 80274a2:	d116      	bne.n	80274d2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80274a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80274a8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80274ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80274b0:	4611      	mov	r1, r2
 80274b2:	4618      	mov	r0, r3
 80274b4:	f7fc fe36 	bl	8024124 <lfs_pair_cmp>
 80274b8:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80274ba:	2b00      	cmp	r3, #0
 80274bc:	d109      	bne.n	80274d2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80274be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80274c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80274c6:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80274c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80274cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80274d0:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80274d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80274d6:	681b      	ldr	r3, [r3, #0]
 80274d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80274dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80274e0:	2b00      	cmp	r3, #0
 80274e2:	d1c3      	bne.n	802746c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80274e4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80274e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80274ec:	4619      	mov	r1, r3
 80274ee:	68f8      	ldr	r0, [r7, #12]
 80274f0:	f002 fed8 	bl	802a2a4 <lfs_fs_parent>
 80274f4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80274f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80274fc:	2b00      	cmp	r3, #0
 80274fe:	da07      	bge.n	8027510 <lfs_dir_orphaningcommit+0x2cc>
 8027500:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027504:	f113 0f02 	cmn.w	r3, #2
 8027508:	d002      	beq.n	8027510 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 802750a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802750e:	e186      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8027510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027514:	f113 0f02 	cmn.w	r3, #2
 8027518:	bf14      	ite	ne
 802751a:	2301      	movne	r3, #1
 802751c:	2300      	moveq	r3, #0
 802751e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8027522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027526:	f113 0f02 	cmn.w	r3, #2
 802752a:	f000 809e 	beq.w	802766a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 802752e:	2101      	movs	r1, #1
 8027530:	68f8      	ldr	r0, [r7, #12]
 8027532:	f002 ff0f 	bl	802a354 <lfs_fs_preporphans>
 8027536:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 802753a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802753e:	2b00      	cmp	r3, #0
 8027540:	d002      	beq.n	8027548 <lfs_dir_orphaningcommit+0x304>
                return err;
 8027542:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8027546:	e16a      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027548:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802754c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8027550:	68fb      	ldr	r3, [r7, #12]
 8027552:	3330      	adds	r3, #48	; 0x30
 8027554:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027558:	4611      	mov	r1, r2
 802755a:	4618      	mov	r0, r3
 802755c:	f7fc ff70 	bl	8024440 <lfs_gstate_hasmovehere>
 8027560:	4603      	mov	r3, r0
 8027562:	2b00      	cmp	r3, #0
 8027564:	d02d      	beq.n	80275c2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027566:	68fb      	ldr	r3, [r7, #12]
 8027568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802756a:	4618      	mov	r0, r3
 802756c:	f7fc fec0 	bl	80242f0 <lfs_tag_id>
 8027570:	4603      	mov	r3, r0
 8027572:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8027576:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027578:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802757a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 802757e:	484f      	ldr	r0, [pc, #316]	; (80276bc <lfs_dir_orphaningcommit+0x478>)
 8027580:	9002      	str	r0, [sp, #8]
 8027582:	9201      	str	r2, [sp, #4]
 8027584:	9300      	str	r3, [sp, #0]
 8027586:	460b      	mov	r3, r1
 8027588:	f640 02ed 	movw	r2, #2285	; 0x8ed
 802758c:	494c      	ldr	r1, [pc, #304]	; (80276c0 <lfs_dir_orphaningcommit+0x47c>)
 802758e:	484e      	ldr	r0, [pc, #312]	; (80276c8 <lfs_dir_orphaningcommit+0x484>)
 8027590:	f006 f916 	bl	802d7c0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027594:	2200      	movs	r2, #0
 8027596:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802759a:	68f8      	ldr	r0, [r7, #12]
 802759c:	f002 ff14 	bl	802a3c8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80275a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80275a4:	4618      	mov	r0, r3
 80275a6:	f7fc fea3 	bl	80242f0 <lfs_tag_id>
 80275aa:	4603      	mov	r3, r0
 80275ac:	461a      	mov	r2, r3
 80275ae:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80275b2:	4293      	cmp	r3, r2
 80275b4:	d205      	bcs.n	80275c2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80275b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80275ba:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80275be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80275c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80275c4:	657b      	str	r3, [r7, #84]	; 0x54
 80275c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80275c8:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80275ca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275ce:	4618      	mov	r0, r3
 80275d0:	f7fc fe19 	bl	8024206 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80275d4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80275d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80275dc:	4293      	cmp	r3, r2
 80275de:	d007      	beq.n	80275f0 <lfs_dir_orphaningcommit+0x3ac>
 80275e0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80275e4:	029b      	lsls	r3, r3, #10
 80275e6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80275ea:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80275ee:	e000      	b.n	80275f2 <lfs_dir_orphaningcommit+0x3ae>
 80275f0:	2300      	movs	r3, #0
 80275f2:	647b      	str	r3, [r7, #68]	; 0x44
 80275f4:	2300      	movs	r3, #0
 80275f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80275f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80275fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80275fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027602:	653b      	str	r3, [r7, #80]	; 0x50
 8027604:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027608:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802760c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027610:	2000      	movs	r0, #0
 8027612:	9001      	str	r0, [sp, #4]
 8027614:	2002      	movs	r0, #2
 8027616:	9000      	str	r0, [sp, #0]
 8027618:	68f8      	ldr	r0, [r7, #12]
 802761a:	f7ff fb5d 	bl	8026cd8 <lfs_dir_relocatingcommit>
 802761e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8027622:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027626:	4618      	mov	r0, r3
 8027628:	f7fc fdd3 	bl	80241d2 <lfs_pair_fromle32>
            if (state < 0) {
 802762c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027630:	2b00      	cmp	r3, #0
 8027632:	da02      	bge.n	802763a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8027634:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027638:	e0f1      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 802763a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802763e:	2b01      	cmp	r3, #1
 8027640:	d113      	bne.n	802766a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8027642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8027648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802764a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 802764e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027652:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027656:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802765a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802765e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8027662:	2301      	movs	r3, #1
 8027664:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8027668:	e0cd      	b.n	8027806 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 802766a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802766e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027672:	4619      	mov	r1, r3
 8027674:	68f8      	ldr	r0, [r7, #12]
 8027676:	f002 fd8d 	bl	802a194 <lfs_fs_pred>
 802767a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 802767e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027682:	2b00      	cmp	r3, #0
 8027684:	d007      	beq.n	8027696 <lfs_dir_orphaningcommit+0x452>
 8027686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802768a:	f113 0f02 	cmn.w	r3, #2
 802768e:	d002      	beq.n	8027696 <lfs_dir_orphaningcommit+0x452>
            return err;
 8027690:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027694:	e0c3      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8027696:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802769a:	2b00      	cmp	r3, #0
 802769c:	d01a      	beq.n	80276d4 <lfs_dir_orphaningcommit+0x490>
 802769e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80276a2:	f113 0f02 	cmn.w	r3, #2
 80276a6:	d115      	bne.n	80276d4 <lfs_dir_orphaningcommit+0x490>
 80276a8:	4b08      	ldr	r3, [pc, #32]	; (80276cc <lfs_dir_orphaningcommit+0x488>)
 80276aa:	4a09      	ldr	r2, [pc, #36]	; (80276d0 <lfs_dir_orphaningcommit+0x48c>)
 80276ac:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80276b0:	4803      	ldr	r0, [pc, #12]	; (80276c0 <lfs_dir_orphaningcommit+0x47c>)
 80276b2:	f005 f84b 	bl	802c74c <__assert_func>
 80276b6:	bf00      	nop
 80276b8:	000ffc08 	.word	0x000ffc08
 80276bc:	08033954 	.word	0x08033954
 80276c0:	08033840 	.word	0x08033840
 80276c4:	08033ad4 	.word	0x08033ad4
 80276c8:	08033b10 	.word	0x08033b10
 80276cc:	08033b54 	.word	0x08033b54
 80276d0:	08034b78 	.word	0x08034b78

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80276d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80276d8:	f113 0f02 	cmn.w	r3, #2
 80276dc:	f000 8093 	beq.w	8027806 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80276e0:	68fb      	ldr	r3, [r7, #12]
 80276e2:	3330      	adds	r3, #48	; 0x30
 80276e4:	4618      	mov	r0, r3
 80276e6:	f7fc fe76 	bl	80243d6 <lfs_gstate_hasorphans>
 80276ea:	4603      	mov	r3, r0
 80276ec:	2b00      	cmp	r3, #0
 80276ee:	d011      	beq.n	8027714 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80276f0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80276f4:	425b      	negs	r3, r3
 80276f6:	b2db      	uxtb	r3, r3
 80276f8:	b25b      	sxtb	r3, r3
 80276fa:	4619      	mov	r1, r3
 80276fc:	68f8      	ldr	r0, [r7, #12]
 80276fe:	f002 fe29 	bl	802a354 <lfs_fs_preporphans>
 8027702:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8027706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802770a:	2b00      	cmp	r3, #0
 802770c:	d002      	beq.n	8027714 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 802770e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027712:	e084      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027714:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027718:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802771c:	68fb      	ldr	r3, [r7, #12]
 802771e:	3330      	adds	r3, #48	; 0x30
 8027720:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027724:	4611      	mov	r1, r2
 8027726:	4618      	mov	r0, r3
 8027728:	f7fc fe8a 	bl	8024440 <lfs_gstate_hasmovehere>
 802772c:	4603      	mov	r3, r0
 802772e:	2b00      	cmp	r3, #0
 8027730:	d01c      	beq.n	802776c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027732:	68fb      	ldr	r3, [r7, #12]
 8027734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027736:	4618      	mov	r0, r3
 8027738:	f7fc fdda 	bl	80242f0 <lfs_tag_id>
 802773c:	4603      	mov	r3, r0
 802773e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8027742:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027744:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027746:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 802774a:	4837      	ldr	r0, [pc, #220]	; (8027828 <lfs_dir_orphaningcommit+0x5e4>)
 802774c:	9002      	str	r0, [sp, #8]
 802774e:	9201      	str	r2, [sp, #4]
 8027750:	9300      	str	r3, [sp, #0]
 8027752:	460b      	mov	r3, r1
 8027754:	f640 1221 	movw	r2, #2337	; 0x921
 8027758:	4934      	ldr	r1, [pc, #208]	; (802782c <lfs_dir_orphaningcommit+0x5e8>)
 802775a:	4835      	ldr	r0, [pc, #212]	; (8027830 <lfs_dir_orphaningcommit+0x5ec>)
 802775c:	f006 f830 	bl	802d7c0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027760:	2200      	movs	r2, #0
 8027762:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8027766:	68f8      	ldr	r0, [r7, #12]
 8027768:	f002 fe2e 	bl	802a3c8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 802776c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802776e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8027772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8027778:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802777c:	4618      	mov	r0, r3
 802777e:	f7fc fd42 	bl	8024206 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027782:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027786:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802778a:	4293      	cmp	r3, r2
 802778c:	d007      	beq.n	802779e <lfs_dir_orphaningcommit+0x55a>
 802778e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027792:	029b      	lsls	r3, r3, #10
 8027794:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8027798:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802779c:	e000      	b.n	80277a0 <lfs_dir_orphaningcommit+0x55c>
 802779e:	2300      	movs	r3, #0
 80277a0:	627b      	str	r3, [r7, #36]	; 0x24
 80277a2:	2300      	movs	r3, #0
 80277a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80277a6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80277aa:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80277ae:	051a      	lsls	r2, r3, #20
 80277b0:	4b20      	ldr	r3, [pc, #128]	; (8027834 <lfs_dir_orphaningcommit+0x5f0>)
 80277b2:	4313      	orrs	r3, r2
 80277b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80277b6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80277ba:	633b      	str	r3, [r7, #48]	; 0x30
 80277bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80277c0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80277c4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80277c8:	2000      	movs	r0, #0
 80277ca:	9001      	str	r0, [sp, #4]
 80277cc:	2002      	movs	r0, #2
 80277ce:	9000      	str	r0, [sp, #0]
 80277d0:	68f8      	ldr	r0, [r7, #12]
 80277d2:	f7ff fa81 	bl	8026cd8 <lfs_dir_relocatingcommit>
 80277d6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80277da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80277de:	4618      	mov	r0, r3
 80277e0:	f7fc fcf7 	bl	80241d2 <lfs_pair_fromle32>
            if (state < 0) {
 80277e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80277e8:	2b00      	cmp	r3, #0
 80277ea:	da02      	bge.n	80277f2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80277ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80277f0:	e015      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80277f2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80277f6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80277fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80277fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80277fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027802:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8027806:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802780a:	2b01      	cmp	r3, #1
 802780c:	f43f adfe 	beq.w	802740c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8027810:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8027814:	2b00      	cmp	r3, #0
 8027816:	d001      	beq.n	802781c <lfs_dir_orphaningcommit+0x5d8>
 8027818:	2303      	movs	r3, #3
 802781a:	e000      	b.n	802781e <lfs_dir_orphaningcommit+0x5da>
 802781c:	2300      	movs	r3, #0
}
 802781e:	4618      	mov	r0, r3
 8027820:	37e0      	adds	r7, #224	; 0xe0
 8027822:	46bd      	mov	sp, r7
 8027824:	bdb0      	pop	{r4, r5, r7, pc}
 8027826:	bf00      	nop
 8027828:	08033954 	.word	0x08033954
 802782c:	08033840 	.word	0x08033840
 8027830:	08033b10 	.word	0x08033b10
 8027834:	000ffc08 	.word	0x000ffc08

08027838 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027838:	b580      	push	{r7, lr}
 802783a:	b086      	sub	sp, #24
 802783c:	af00      	add	r7, sp, #0
 802783e:	60f8      	str	r0, [r7, #12]
 8027840:	60b9      	str	r1, [r7, #8]
 8027842:	607a      	str	r2, [r7, #4]
 8027844:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8027846:	683b      	ldr	r3, [r7, #0]
 8027848:	687a      	ldr	r2, [r7, #4]
 802784a:	68b9      	ldr	r1, [r7, #8]
 802784c:	68f8      	ldr	r0, [r7, #12]
 802784e:	f7ff fcf9 	bl	8027244 <lfs_dir_orphaningcommit>
 8027852:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8027854:	697b      	ldr	r3, [r7, #20]
 8027856:	2b00      	cmp	r3, #0
 8027858:	da01      	bge.n	802785e <lfs_dir_commit+0x26>
        return orphans;
 802785a:	697b      	ldr	r3, [r7, #20]
 802785c:	e00d      	b.n	802787a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802785e:	697b      	ldr	r3, [r7, #20]
 8027860:	2b00      	cmp	r3, #0
 8027862:	d009      	beq.n	8027878 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8027864:	2100      	movs	r1, #0
 8027866:	68f8      	ldr	r0, [r7, #12]
 8027868:	f002 fe4e 	bl	802a508 <lfs_fs_deorphan>
 802786c:	6138      	str	r0, [r7, #16]
        if (err) {
 802786e:	693b      	ldr	r3, [r7, #16]
 8027870:	2b00      	cmp	r3, #0
 8027872:	d001      	beq.n	8027878 <lfs_dir_commit+0x40>
            return err;
 8027874:	693b      	ldr	r3, [r7, #16]
 8027876:	e000      	b.n	802787a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8027878:	2300      	movs	r3, #0
}
 802787a:	4618      	mov	r0, r3
 802787c:	3718      	adds	r7, #24
 802787e:	46bd      	mov	sp, r7
 8027880:	bd80      	pop	{r7, pc}
	...

08027884 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8027884:	b5b0      	push	{r4, r5, r7, lr}
 8027886:	b0b8      	sub	sp, #224	; 0xe0
 8027888:	af00      	add	r7, sp, #0
 802788a:	6078      	str	r0, [r7, #4]
 802788c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 802788e:	6878      	ldr	r0, [r7, #4]
 8027890:	f002 ffde 	bl	802a850 <lfs_fs_forceconsistency>
 8027894:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802789c:	2b00      	cmp	r3, #0
 802789e:	d002      	beq.n	80278a6 <lfs_rawmkdir+0x22>
        return err;
 80278a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278a4:	e128      	b.n	8027af8 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 80278a6:	687b      	ldr	r3, [r7, #4]
 80278a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80278aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 80278ae:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 80278b2:	463a      	mov	r2, r7
 80278b4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80278b8:	f103 0108 	add.w	r1, r3, #8
 80278bc:	4603      	mov	r3, r0
 80278be:	6878      	ldr	r0, [r7, #4]
 80278c0:	f7fe fab2 	bl	8025e28 <lfs_dir_find>
 80278c4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 80278c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278cc:	f113 0f02 	cmn.w	r3, #2
 80278d0:	d105      	bne.n	80278de <lfs_rawmkdir+0x5a>
 80278d2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80278d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80278da:	4293      	cmp	r3, r2
 80278dc:	d109      	bne.n	80278f2 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 80278de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278e2:	2b00      	cmp	r3, #0
 80278e4:	da02      	bge.n	80278ec <lfs_rawmkdir+0x68>
 80278e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278ea:	e105      	b.n	8027af8 <lfs_rawmkdir+0x274>
 80278ec:	f06f 0310 	mvn.w	r3, #16
 80278f0:	e102      	b.n	8027af8 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80278f2:	683b      	ldr	r3, [r7, #0]
 80278f4:	4618      	mov	r0, r3
 80278f6:	f7e8 fcd3 	bl	80102a0 <strlen>
 80278fa:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 80278fe:	687b      	ldr	r3, [r7, #4]
 8027900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027902:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8027906:	429a      	cmp	r2, r3
 8027908:	d902      	bls.n	8027910 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 802790a:	f06f 0323 	mvn.w	r3, #35	; 0x23
 802790e:	e0f3      	b.n	8027af8 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 8027910:	6878      	ldr	r0, [r7, #4]
 8027912:	f7fc ff1d 	bl	8024750 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8027916:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802791a:	4619      	mov	r1, r3
 802791c:	6878      	ldr	r0, [r7, #4]
 802791e:	f7fe fd6f 	bl	8026400 <lfs_dir_alloc>
 8027922:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802792a:	2b00      	cmp	r3, #0
 802792c:	d002      	beq.n	8027934 <lfs_rawmkdir+0xb0>
        return err;
 802792e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027932:	e0e1      	b.n	8027af8 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8027934:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8027938:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 802793c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802793e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027940:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8027948:	e012      	b.n	8027970 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 802794a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802794e:	f103 0218 	add.w	r2, r3, #24
 8027952:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027956:	4619      	mov	r1, r3
 8027958:	6878      	ldr	r0, [r7, #4]
 802795a:	f7fe f953 	bl	8025c04 <lfs_dir_fetch>
 802795e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027966:	2b00      	cmp	r3, #0
 8027968:	d002      	beq.n	8027970 <lfs_rawmkdir+0xec>
            return err;
 802796a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802796e:	e0c3      	b.n	8027af8 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8027970:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8027974:	2b00      	cmp	r3, #0
 8027976:	d1e8      	bne.n	802794a <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8027978:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802797c:	3318      	adds	r3, #24
 802797e:	4618      	mov	r0, r3
 8027980:	f7fc fc41 	bl	8024206 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8027984:	4b5e      	ldr	r3, [pc, #376]	; (8027b00 <lfs_rawmkdir+0x27c>)
 8027986:	667b      	str	r3, [r7, #100]	; 0x64
 8027988:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802798c:	3318      	adds	r3, #24
 802798e:	66bb      	str	r3, [r7, #104]	; 0x68
 8027990:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8027994:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8027998:	2301      	movs	r3, #1
 802799a:	6878      	ldr	r0, [r7, #4]
 802799c:	f7ff ff4c 	bl	8027838 <lfs_dir_commit>
 80279a0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 80279a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80279a8:	3318      	adds	r3, #24
 80279aa:	4618      	mov	r0, r3
 80279ac:	f7fc fc11 	bl	80241d2 <lfs_pair_fromle32>
    if (err) {
 80279b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80279b4:	2b00      	cmp	r3, #0
 80279b6:	d002      	beq.n	80279be <lfs_rawmkdir+0x13a>
        return err;
 80279b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80279bc:	e09c      	b.n	8027af8 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 80279be:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80279c2:	2b00      	cmp	r3, #0
 80279c4:	d04c      	beq.n	8027a60 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 80279c6:	2101      	movs	r1, #1
 80279c8:	6878      	ldr	r0, [r7, #4]
 80279ca:	f002 fcc3 	bl	802a354 <lfs_fs_preporphans>
 80279ce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80279d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80279d6:	2b00      	cmp	r3, #0
 80279d8:	d002      	beq.n	80279e0 <lfs_rawmkdir+0x15c>
            return err;
 80279da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80279de:	e08b      	b.n	8027af8 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 80279e0:	2300      	movs	r3, #0
 80279e2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 80279e6:	2300      	movs	r3, #0
 80279e8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 80279ec:	687b      	ldr	r3, [r7, #4]
 80279ee:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80279f2:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 80279f4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80279f8:	4618      	mov	r0, r3
 80279fa:	f7fc fc04 	bl	8024206 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 80279fe:	4b40      	ldr	r3, [pc, #256]	; (8027b00 <lfs_rawmkdir+0x27c>)
 8027a00:	617b      	str	r3, [r7, #20]
 8027a02:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027a06:	61bb      	str	r3, [r7, #24]
 8027a08:	f107 0214 	add.w	r2, r7, #20
 8027a0c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027a10:	2301      	movs	r3, #1
 8027a12:	6878      	ldr	r0, [r7, #4]
 8027a14:	f7ff ff10 	bl	8027838 <lfs_dir_commit>
 8027a18:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8027a1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027a20:	4618      	mov	r0, r3
 8027a22:	f7fc fbd6 	bl	80241d2 <lfs_pair_fromle32>
        if (err) {
 8027a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027a2a:	2b00      	cmp	r3, #0
 8027a2c:	d006      	beq.n	8027a3c <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 8027a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027a32:	687b      	ldr	r3, [r7, #4]
 8027a34:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8027a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027a3a:	e05d      	b.n	8027af8 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 8027a3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027a40:	687b      	ldr	r3, [r7, #4]
 8027a42:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8027a44:	f04f 31ff 	mov.w	r1, #4294967295
 8027a48:	6878      	ldr	r0, [r7, #4]
 8027a4a:	f002 fc83 	bl	802a354 <lfs_fs_preporphans>
 8027a4e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027a56:	2b00      	cmp	r3, #0
 8027a58:	d002      	beq.n	8027a60 <lfs_rawmkdir+0x1dc>
            return err;
 8027a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027a5e:	e04b      	b.n	8027af8 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8027a60:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027a64:	4618      	mov	r0, r3
 8027a66:	f7fc fbce 	bl	8024206 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8027a6a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027a6e:	029b      	lsls	r3, r3, #10
 8027a70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027a74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027a7a:	2300      	movs	r3, #0
 8027a7c:	643b      	str	r3, [r7, #64]	; 0x40
 8027a7e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027a82:	029a      	lsls	r2, r3, #10
 8027a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027a88:	4313      	orrs	r3, r2
 8027a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8027a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8027a90:	683b      	ldr	r3, [r7, #0]
 8027a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8027a94:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027a98:	029b      	lsls	r3, r3, #10
 8027a9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027a9e:	f043 0308 	orr.w	r3, r3, #8
 8027aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027aa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027aa8:	653b      	str	r3, [r7, #80]	; 0x50
 8027aaa:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8027aae:	f083 0301 	eor.w	r3, r3, #1
 8027ab2:	b2db      	uxtb	r3, r3
 8027ab4:	2b00      	cmp	r3, #0
 8027ab6:	d001      	beq.n	8027abc <lfs_rawmkdir+0x238>
 8027ab8:	4b11      	ldr	r3, [pc, #68]	; (8027b00 <lfs_rawmkdir+0x27c>)
 8027aba:	e000      	b.n	8027abe <lfs_rawmkdir+0x23a>
 8027abc:	2300      	movs	r3, #0
 8027abe:	657b      	str	r3, [r7, #84]	; 0x54
 8027ac0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8027ac6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8027aca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8027ace:	f103 0108 	add.w	r1, r3, #8
 8027ad2:	2304      	movs	r3, #4
 8027ad4:	6878      	ldr	r0, [r7, #4]
 8027ad6:	f7ff feaf 	bl	8027838 <lfs_dir_commit>
 8027ada:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8027ade:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027ae2:	4618      	mov	r0, r3
 8027ae4:	f7fc fb75 	bl	80241d2 <lfs_pair_fromle32>
    if (err) {
 8027ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027aec:	2b00      	cmp	r3, #0
 8027aee:	d002      	beq.n	8027af6 <lfs_rawmkdir+0x272>
        return err;
 8027af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027af4:	e000      	b.n	8027af8 <lfs_rawmkdir+0x274>
    }

    return 0;
 8027af6:	2300      	movs	r3, #0
}
 8027af8:	4618      	mov	r0, r3
 8027afa:	37e0      	adds	r7, #224	; 0xe0
 8027afc:	46bd      	mov	sp, r7
 8027afe:	bdb0      	pop	{r4, r5, r7, pc}
 8027b00:	600ffc08 	.word	0x600ffc08

08027b04 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8027b04:	b590      	push	{r4, r7, lr}
 8027b06:	b08d      	sub	sp, #52	; 0x34
 8027b08:	af02      	add	r7, sp, #8
 8027b0a:	60f8      	str	r0, [r7, #12]
 8027b0c:	60b9      	str	r1, [r7, #8]
 8027b0e:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8027b10:	68bb      	ldr	r3, [r7, #8]
 8027b12:	f103 0108 	add.w	r1, r3, #8
 8027b16:	1d3a      	adds	r2, r7, #4
 8027b18:	2300      	movs	r3, #0
 8027b1a:	68f8      	ldr	r0, [r7, #12]
 8027b1c:	f7fe f984 	bl	8025e28 <lfs_dir_find>
 8027b20:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8027b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b24:	2b00      	cmp	r3, #0
 8027b26:	da01      	bge.n	8027b2c <lfs_dir_rawopen+0x28>
        return tag;
 8027b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b2a:	e05e      	b.n	8027bea <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8027b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b2e:	4618      	mov	r0, r3
 8027b30:	f7fc fbb4 	bl	802429c <lfs_tag_type3>
 8027b34:	4603      	mov	r3, r0
 8027b36:	2b02      	cmp	r3, #2
 8027b38:	d002      	beq.n	8027b40 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8027b3a:	f06f 0313 	mvn.w	r3, #19
 8027b3e:	e054      	b.n	8027bea <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8027b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b42:	4618      	mov	r0, r3
 8027b44:	f7fc fbd4 	bl	80242f0 <lfs_tag_id>
 8027b48:	4603      	mov	r3, r0
 8027b4a:	461a      	mov	r2, r3
 8027b4c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027b50:	429a      	cmp	r2, r3
 8027b52:	d106      	bne.n	8027b62 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027b54:	68fb      	ldr	r3, [r7, #12]
 8027b56:	6a1b      	ldr	r3, [r3, #32]
 8027b58:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8027b5a:	68fb      	ldr	r3, [r7, #12]
 8027b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027b5e:	61bb      	str	r3, [r7, #24]
 8027b60:	e01f      	b.n	8027ba2 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027b62:	68bb      	ldr	r3, [r7, #8]
 8027b64:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8027b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b6a:	4618      	mov	r0, r3
 8027b6c:	f7fc fbc0 	bl	80242f0 <lfs_tag_id>
 8027b70:	4603      	mov	r3, r0
 8027b72:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027b74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027b78:	f043 0308 	orr.w	r3, r3, #8
 8027b7c:	f107 0214 	add.w	r2, r7, #20
 8027b80:	9200      	str	r2, [sp, #0]
 8027b82:	4a1c      	ldr	r2, [pc, #112]	; (8027bf4 <lfs_dir_rawopen+0xf0>)
 8027b84:	4621      	mov	r1, r4
 8027b86:	68f8      	ldr	r0, [r7, #12]
 8027b88:	f7fc ff9c 	bl	8024ac4 <lfs_dir_get>
 8027b8c:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8027b8e:	6a3b      	ldr	r3, [r7, #32]
 8027b90:	2b00      	cmp	r3, #0
 8027b92:	da01      	bge.n	8027b98 <lfs_dir_rawopen+0x94>
            return res;
 8027b94:	6a3b      	ldr	r3, [r7, #32]
 8027b96:	e028      	b.n	8027bea <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8027b98:	f107 0314 	add.w	r3, r7, #20
 8027b9c:	4618      	mov	r0, r3
 8027b9e:	f7fc fb18 	bl	80241d2 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8027ba2:	68bb      	ldr	r3, [r7, #8]
 8027ba4:	3308      	adds	r3, #8
 8027ba6:	f107 0214 	add.w	r2, r7, #20
 8027baa:	4619      	mov	r1, r3
 8027bac:	68f8      	ldr	r0, [r7, #12]
 8027bae:	f7fe f829 	bl	8025c04 <lfs_dir_fetch>
 8027bb2:	61f8      	str	r0, [r7, #28]
    if (err) {
 8027bb4:	69fb      	ldr	r3, [r7, #28]
 8027bb6:	2b00      	cmp	r3, #0
 8027bb8:	d001      	beq.n	8027bbe <lfs_dir_rawopen+0xba>
        return err;
 8027bba:	69fb      	ldr	r3, [r7, #28]
 8027bbc:	e015      	b.n	8027bea <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8027bbe:	68bb      	ldr	r3, [r7, #8]
 8027bc0:	689a      	ldr	r2, [r3, #8]
 8027bc2:	68bb      	ldr	r3, [r7, #8]
 8027bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8027bc6:	68bb      	ldr	r3, [r7, #8]
 8027bc8:	68da      	ldr	r2, [r3, #12]
 8027bca:	68bb      	ldr	r3, [r7, #8]
 8027bcc:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8027bce:	68bb      	ldr	r3, [r7, #8]
 8027bd0:	2200      	movs	r2, #0
 8027bd2:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8027bd4:	68bb      	ldr	r3, [r7, #8]
 8027bd6:	2200      	movs	r2, #0
 8027bd8:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8027bda:	68bb      	ldr	r3, [r7, #8]
 8027bdc:	2202      	movs	r2, #2
 8027bde:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8027be0:	68b9      	ldr	r1, [r7, #8]
 8027be2:	68f8      	ldr	r0, [r7, #12]
 8027be4:	f7fc fd6b 	bl	80246be <lfs_mlist_append>

    return 0;
 8027be8:	2300      	movs	r3, #0
}
 8027bea:	4618      	mov	r0, r3
 8027bec:	372c      	adds	r7, #44	; 0x2c
 8027bee:	46bd      	mov	sp, r7
 8027bf0:	bd90      	pop	{r4, r7, pc}
 8027bf2:	bf00      	nop
 8027bf4:	700ffc00 	.word	0x700ffc00

08027bf8 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8027bf8:	b580      	push	{r7, lr}
 8027bfa:	b082      	sub	sp, #8
 8027bfc:	af00      	add	r7, sp, #0
 8027bfe:	6078      	str	r0, [r7, #4]
 8027c00:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8027c02:	6839      	ldr	r1, [r7, #0]
 8027c04:	6878      	ldr	r0, [r7, #4]
 8027c06:	f7fc fd38 	bl	802467a <lfs_mlist_remove>

    return 0;
 8027c0a:	2300      	movs	r3, #0
}
 8027c0c:	4618      	mov	r0, r3
 8027c0e:	3708      	adds	r7, #8
 8027c10:	46bd      	mov	sp, r7
 8027c12:	bd80      	pop	{r7, pc}

08027c14 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8027c14:	b580      	push	{r7, lr}
 8027c16:	b086      	sub	sp, #24
 8027c18:	af00      	add	r7, sp, #0
 8027c1a:	60f8      	str	r0, [r7, #12]
 8027c1c:	60b9      	str	r1, [r7, #8]
 8027c1e:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8027c20:	f44f 7284 	mov.w	r2, #264	; 0x108
 8027c24:	2100      	movs	r1, #0
 8027c26:	6878      	ldr	r0, [r7, #4]
 8027c28:	f005 ff60 	bl	802daec <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8027c2c:	68bb      	ldr	r3, [r7, #8]
 8027c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c30:	2b00      	cmp	r3, #0
 8027c32:	d110      	bne.n	8027c56 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8027c34:	687b      	ldr	r3, [r7, #4]
 8027c36:	2202      	movs	r2, #2
 8027c38:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8027c3a:	687b      	ldr	r3, [r7, #4]
 8027c3c:	3308      	adds	r3, #8
 8027c3e:	4935      	ldr	r1, [pc, #212]	; (8027d14 <lfs_dir_rawread+0x100>)
 8027c40:	461a      	mov	r2, r3
 8027c42:	460b      	mov	r3, r1
 8027c44:	881b      	ldrh	r3, [r3, #0]
 8027c46:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8027c48:	68bb      	ldr	r3, [r7, #8]
 8027c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c4c:	1c5a      	adds	r2, r3, #1
 8027c4e:	68bb      	ldr	r3, [r7, #8]
 8027c50:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027c52:	2301      	movs	r3, #1
 8027c54:	e05a      	b.n	8027d0c <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027c56:	68bb      	ldr	r3, [r7, #8]
 8027c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c5a:	2b01      	cmp	r3, #1
 8027c5c:	d110      	bne.n	8027c80 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8027c5e:	687b      	ldr	r3, [r7, #4]
 8027c60:	2202      	movs	r2, #2
 8027c62:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027c64:	687b      	ldr	r3, [r7, #4]
 8027c66:	3308      	adds	r3, #8
 8027c68:	4a2b      	ldr	r2, [pc, #172]	; (8027d18 <lfs_dir_rawread+0x104>)
 8027c6a:	8811      	ldrh	r1, [r2, #0]
 8027c6c:	7892      	ldrb	r2, [r2, #2]
 8027c6e:	8019      	strh	r1, [r3, #0]
 8027c70:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027c72:	68bb      	ldr	r3, [r7, #8]
 8027c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c76:	1c5a      	adds	r2, r3, #1
 8027c78:	68bb      	ldr	r3, [r7, #8]
 8027c7a:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027c7c:	2301      	movs	r3, #1
 8027c7e:	e045      	b.n	8027d0c <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027c80:	68bb      	ldr	r3, [r7, #8]
 8027c82:	889a      	ldrh	r2, [r3, #4]
 8027c84:	68bb      	ldr	r3, [r7, #8]
 8027c86:	8b9b      	ldrh	r3, [r3, #28]
 8027c88:	429a      	cmp	r2, r3
 8027c8a:	d11a      	bne.n	8027cc2 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8027c8c:	68bb      	ldr	r3, [r7, #8]
 8027c8e:	7fdb      	ldrb	r3, [r3, #31]
 8027c90:	f083 0301 	eor.w	r3, r3, #1
 8027c94:	b2db      	uxtb	r3, r3
 8027c96:	2b00      	cmp	r3, #0
 8027c98:	d001      	beq.n	8027c9e <lfs_dir_rawread+0x8a>
                return false;
 8027c9a:	2300      	movs	r3, #0
 8027c9c:	e036      	b.n	8027d0c <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8027c9e:	68bb      	ldr	r3, [r7, #8]
 8027ca0:	f103 0108 	add.w	r1, r3, #8
 8027ca4:	68bb      	ldr	r3, [r7, #8]
 8027ca6:	3320      	adds	r3, #32
 8027ca8:	461a      	mov	r2, r3
 8027caa:	68f8      	ldr	r0, [r7, #12]
 8027cac:	f7fd ffaa 	bl	8025c04 <lfs_dir_fetch>
 8027cb0:	6178      	str	r0, [r7, #20]
            if (err) {
 8027cb2:	697b      	ldr	r3, [r7, #20]
 8027cb4:	2b00      	cmp	r3, #0
 8027cb6:	d001      	beq.n	8027cbc <lfs_dir_rawread+0xa8>
                return err;
 8027cb8:	697b      	ldr	r3, [r7, #20]
 8027cba:	e027      	b.n	8027d0c <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8027cbc:	68bb      	ldr	r3, [r7, #8]
 8027cbe:	2200      	movs	r2, #0
 8027cc0:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8027cc2:	68bb      	ldr	r3, [r7, #8]
 8027cc4:	f103 0108 	add.w	r1, r3, #8
 8027cc8:	68bb      	ldr	r3, [r7, #8]
 8027cca:	889a      	ldrh	r2, [r3, #4]
 8027ccc:	687b      	ldr	r3, [r7, #4]
 8027cce:	68f8      	ldr	r0, [r7, #12]
 8027cd0:	f7fd ffe6 	bl	8025ca0 <lfs_dir_getinfo>
 8027cd4:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8027cd6:	693b      	ldr	r3, [r7, #16]
 8027cd8:	2b00      	cmp	r3, #0
 8027cda:	d005      	beq.n	8027ce8 <lfs_dir_rawread+0xd4>
 8027cdc:	693b      	ldr	r3, [r7, #16]
 8027cde:	f113 0f02 	cmn.w	r3, #2
 8027ce2:	d001      	beq.n	8027ce8 <lfs_dir_rawread+0xd4>
            return err;
 8027ce4:	693b      	ldr	r3, [r7, #16]
 8027ce6:	e011      	b.n	8027d0c <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8027ce8:	68bb      	ldr	r3, [r7, #8]
 8027cea:	889b      	ldrh	r3, [r3, #4]
 8027cec:	3301      	adds	r3, #1
 8027cee:	b29a      	uxth	r2, r3
 8027cf0:	68bb      	ldr	r3, [r7, #8]
 8027cf2:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8027cf4:	693b      	ldr	r3, [r7, #16]
 8027cf6:	f113 0f02 	cmn.w	r3, #2
 8027cfa:	d100      	bne.n	8027cfe <lfs_dir_rawread+0xea>
    while (true) {
 8027cfc:	e7c0      	b.n	8027c80 <lfs_dir_rawread+0x6c>
            break;
 8027cfe:	bf00      	nop
        }
    }

    dir->pos += 1;
 8027d00:	68bb      	ldr	r3, [r7, #8]
 8027d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027d04:	1c5a      	adds	r2, r3, #1
 8027d06:	68bb      	ldr	r3, [r7, #8]
 8027d08:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8027d0a:	2301      	movs	r3, #1
}
 8027d0c:	4618      	mov	r0, r3
 8027d0e:	3718      	adds	r7, #24
 8027d10:	46bd      	mov	sp, r7
 8027d12:	bd80      	pop	{r7, pc}
 8027d14:	080339a4 	.word	0x080339a4
 8027d18:	080339a8 	.word	0x080339a8

08027d1c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8027d1c:	b590      	push	{r4, r7, lr}
 8027d1e:	b087      	sub	sp, #28
 8027d20:	af00      	add	r7, sp, #0
 8027d22:	6078      	str	r0, [r7, #4]
 8027d24:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8027d26:	683b      	ldr	r3, [r7, #0]
 8027d28:	681b      	ldr	r3, [r3, #0]
 8027d2a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8027d2c:	687b      	ldr	r3, [r7, #4]
 8027d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027d30:	69db      	ldr	r3, [r3, #28]
 8027d32:	3b08      	subs	r3, #8
 8027d34:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8027d36:	697a      	ldr	r2, [r7, #20]
 8027d38:	693b      	ldr	r3, [r7, #16]
 8027d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8027d3e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8027d40:	68fb      	ldr	r3, [r7, #12]
 8027d42:	2b00      	cmp	r3, #0
 8027d44:	d101      	bne.n	8027d4a <lfs_ctz_index+0x2e>
        return 0;
 8027d46:	2300      	movs	r3, #0
 8027d48:	e01c      	b.n	8027d84 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8027d4a:	68fb      	ldr	r3, [r7, #12]
 8027d4c:	3b01      	subs	r3, #1
 8027d4e:	4618      	mov	r0, r3
 8027d50:	f7fb fe0e 	bl	8023970 <lfs_popc>
 8027d54:	4603      	mov	r3, r0
 8027d56:	3302      	adds	r3, #2
 8027d58:	009b      	lsls	r3, r3, #2
 8027d5a:	697a      	ldr	r2, [r7, #20]
 8027d5c:	1ad2      	subs	r2, r2, r3
 8027d5e:	693b      	ldr	r3, [r7, #16]
 8027d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8027d64:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027d66:	693b      	ldr	r3, [r7, #16]
 8027d68:	68fa      	ldr	r2, [r7, #12]
 8027d6a:	fb02 f303 	mul.w	r3, r2, r3
 8027d6e:	697a      	ldr	r2, [r7, #20]
 8027d70:	1ad4      	subs	r4, r2, r3
 8027d72:	68f8      	ldr	r0, [r7, #12]
 8027d74:	f7fb fdfc 	bl	8023970 <lfs_popc>
 8027d78:	4603      	mov	r3, r0
 8027d7a:	009b      	lsls	r3, r3, #2
 8027d7c:	1ae2      	subs	r2, r4, r3
 8027d7e:	683b      	ldr	r3, [r7, #0]
 8027d80:	601a      	str	r2, [r3, #0]
    return i;
 8027d82:	68fb      	ldr	r3, [r7, #12]
}
 8027d84:	4618      	mov	r0, r3
 8027d86:	371c      	adds	r7, #28
 8027d88:	46bd      	mov	sp, r7
 8027d8a:	bd90      	pop	{r4, r7, pc}

08027d8c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8027d8c:	b590      	push	{r4, r7, lr}
 8027d8e:	b08f      	sub	sp, #60	; 0x3c
 8027d90:	af04      	add	r7, sp, #16
 8027d92:	60f8      	str	r0, [r7, #12]
 8027d94:	60b9      	str	r1, [r7, #8]
 8027d96:	607a      	str	r2, [r7, #4]
 8027d98:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d9c:	2b00      	cmp	r3, #0
 8027d9e:	d108      	bne.n	8027db2 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8027da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027da2:	f04f 32ff 	mov.w	r2, #4294967295
 8027da6:	601a      	str	r2, [r3, #0]
        *off = 0;
 8027da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027daa:	2200      	movs	r2, #0
 8027dac:	601a      	str	r2, [r3, #0]
        return 0;
 8027dae:	2300      	movs	r3, #0
 8027db0:	e053      	b.n	8027e5a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027db4:	3b01      	subs	r3, #1
 8027db6:	617b      	str	r3, [r7, #20]
 8027db8:	f107 0314 	add.w	r3, r7, #20
 8027dbc:	4619      	mov	r1, r3
 8027dbe:	68f8      	ldr	r0, [r7, #12]
 8027dc0:	f7ff ffac 	bl	8027d1c <lfs_ctz_index>
 8027dc4:	4603      	mov	r3, r0
 8027dc6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8027dc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8027dcc:	4619      	mov	r1, r3
 8027dce:	68f8      	ldr	r0, [r7, #12]
 8027dd0:	f7ff ffa4 	bl	8027d1c <lfs_ctz_index>
 8027dd4:	4603      	mov	r3, r0
 8027dd6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8027dd8:	e034      	b.n	8027e44 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8027dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027ddc:	6a3b      	ldr	r3, [r7, #32]
 8027dde:	1ad3      	subs	r3, r2, r3
 8027de0:	3301      	adds	r3, #1
 8027de2:	4618      	mov	r0, r3
 8027de4:	f7fb fda5 	bl	8023932 <lfs_npw2>
 8027de8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8027dea:	1e5c      	subs	r4, r3, #1
 8027dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027dee:	f7fb fdb0 	bl	8023952 <lfs_ctz>
 8027df2:	4603      	mov	r3, r0
 8027df4:	4619      	mov	r1, r3
 8027df6:	4620      	mov	r0, r4
 8027df8:	f7fb fd64 	bl	80238c4 <lfs_min>
 8027dfc:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8027dfe:	683b      	ldr	r3, [r7, #0]
 8027e00:	69fa      	ldr	r2, [r7, #28]
 8027e02:	0092      	lsls	r2, r2, #2
 8027e04:	2104      	movs	r1, #4
 8027e06:	9103      	str	r1, [sp, #12]
 8027e08:	4639      	mov	r1, r7
 8027e0a:	9102      	str	r1, [sp, #8]
 8027e0c:	9201      	str	r2, [sp, #4]
 8027e0e:	9300      	str	r3, [sp, #0]
 8027e10:	2304      	movs	r3, #4
 8027e12:	687a      	ldr	r2, [r7, #4]
 8027e14:	68b9      	ldr	r1, [r7, #8]
 8027e16:	68f8      	ldr	r0, [r7, #12]
 8027e18:	f7fb fe30 	bl	8023a7c <lfs_bd_read>
 8027e1c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8027e1e:	683b      	ldr	r3, [r7, #0]
 8027e20:	4618      	mov	r0, r3
 8027e22:	f7fb fdbf 	bl	80239a4 <lfs_fromle32>
 8027e26:	4603      	mov	r3, r0
 8027e28:	603b      	str	r3, [r7, #0]
        if (err) {
 8027e2a:	69bb      	ldr	r3, [r7, #24]
 8027e2c:	2b00      	cmp	r3, #0
 8027e2e:	d001      	beq.n	8027e34 <lfs_ctz_find+0xa8>
            return err;
 8027e30:	69bb      	ldr	r3, [r7, #24]
 8027e32:	e012      	b.n	8027e5a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8027e34:	2201      	movs	r2, #1
 8027e36:	69fb      	ldr	r3, [r7, #28]
 8027e38:	fa02 f303 	lsl.w	r3, r2, r3
 8027e3c:	461a      	mov	r2, r3
 8027e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e40:	1a9b      	subs	r3, r3, r2
 8027e42:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8027e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027e46:	6a3b      	ldr	r3, [r7, #32]
 8027e48:	429a      	cmp	r2, r3
 8027e4a:	d8c6      	bhi.n	8027dda <lfs_ctz_find+0x4e>
    }

    *block = head;
 8027e4c:	683a      	ldr	r2, [r7, #0]
 8027e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027e50:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027e56:	601a      	str	r2, [r3, #0]
    return 0;
 8027e58:	2300      	movs	r3, #0
}
 8027e5a:	4618      	mov	r0, r3
 8027e5c:	372c      	adds	r7, #44	; 0x2c
 8027e5e:	46bd      	mov	sp, r7
 8027e60:	bd90      	pop	{r4, r7, pc}
	...

08027e64 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027e64:	b580      	push	{r7, lr}
 8027e66:	b092      	sub	sp, #72	; 0x48
 8027e68:	af04      	add	r7, sp, #16
 8027e6a:	60f8      	str	r0, [r7, #12]
 8027e6c:	60b9      	str	r1, [r7, #8]
 8027e6e:	607a      	str	r2, [r7, #4]
 8027e70:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027e72:	f107 0320 	add.w	r3, r7, #32
 8027e76:	4619      	mov	r1, r3
 8027e78:	68f8      	ldr	r0, [r7, #12]
 8027e7a:	f7fc fc89 	bl	8024790 <lfs_alloc>
 8027e7e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8027e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e82:	2b00      	cmp	r3, #0
 8027e84:	d001      	beq.n	8027e8a <lfs_ctz_extend+0x26>
            return err;
 8027e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e88:	e0e9      	b.n	802805e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8027e8a:	6a3b      	ldr	r3, [r7, #32]
 8027e8c:	4619      	mov	r1, r3
 8027e8e:	68f8      	ldr	r0, [r7, #12]
 8027e90:	f7fc f8e6 	bl	8024060 <lfs_bd_erase>
 8027e94:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8027e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e98:	2b00      	cmp	r3, #0
 8027e9a:	d006      	beq.n	8027eaa <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8027e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e9e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027ea2:	f000 80cb 	beq.w	802803c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ea8:	e0d9      	b.n	802805e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8027eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027eac:	2b00      	cmp	r3, #0
 8027eae:	d107      	bne.n	8027ec0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027eb0:	6a3a      	ldr	r2, [r7, #32]
 8027eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027eb4:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027eb8:	2200      	movs	r2, #0
 8027eba:	601a      	str	r2, [r3, #0]
                return 0;
 8027ebc:	2300      	movs	r3, #0
 8027ebe:	e0ce      	b.n	802805e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027ec2:	3b01      	subs	r3, #1
 8027ec4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027ec6:	f107 031c 	add.w	r3, r7, #28
 8027eca:	4619      	mov	r1, r3
 8027ecc:	68f8      	ldr	r0, [r7, #12]
 8027ece:	f7ff ff25 	bl	8027d1c <lfs_ctz_index>
 8027ed2:	4603      	mov	r3, r0
 8027ed4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8027ed6:	69fb      	ldr	r3, [r7, #28]
 8027ed8:	3301      	adds	r3, #1
 8027eda:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8027edc:	68fb      	ldr	r3, [r7, #12]
 8027ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027ee0:	69da      	ldr	r2, [r3, #28]
 8027ee2:	69fb      	ldr	r3, [r7, #28]
 8027ee4:	429a      	cmp	r2, r3
 8027ee6:	d044      	beq.n	8027f72 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027ee8:	2300      	movs	r3, #0
 8027eea:	637b      	str	r3, [r7, #52]	; 0x34
 8027eec:	e035      	b.n	8027f5a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8027eee:	69fa      	ldr	r2, [r7, #28]
 8027ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027ef2:	1ad2      	subs	r2, r2, r3
 8027ef4:	2301      	movs	r3, #1
 8027ef6:	9303      	str	r3, [sp, #12]
 8027ef8:	f107 0317 	add.w	r3, r7, #23
 8027efc:	9302      	str	r3, [sp, #8]
 8027efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027f00:	9301      	str	r3, [sp, #4]
 8027f02:	683b      	ldr	r3, [r7, #0]
 8027f04:	9300      	str	r3, [sp, #0]
 8027f06:	4613      	mov	r3, r2
 8027f08:	687a      	ldr	r2, [r7, #4]
 8027f0a:	2100      	movs	r1, #0
 8027f0c:	68f8      	ldr	r0, [r7, #12]
 8027f0e:	f7fb fdb5 	bl	8023a7c <lfs_bd_read>
 8027f12:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8027f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f16:	2b00      	cmp	r3, #0
 8027f18:	d001      	beq.n	8027f1e <lfs_ctz_extend+0xba>
                        return err;
 8027f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f1c:	e09f      	b.n	802805e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8027f1e:	6a3b      	ldr	r3, [r7, #32]
 8027f20:	2201      	movs	r2, #1
 8027f22:	9203      	str	r2, [sp, #12]
 8027f24:	f107 0217 	add.w	r2, r7, #23
 8027f28:	9202      	str	r2, [sp, #8]
 8027f2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027f2c:	9201      	str	r2, [sp, #4]
 8027f2e:	9300      	str	r3, [sp, #0]
 8027f30:	2301      	movs	r3, #1
 8027f32:	687a      	ldr	r2, [r7, #4]
 8027f34:	68b9      	ldr	r1, [r7, #8]
 8027f36:	68f8      	ldr	r0, [r7, #12]
 8027f38:	f7fb ffe6 	bl	8023f08 <lfs_bd_prog>
 8027f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8027f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f40:	2b00      	cmp	r3, #0
 8027f42:	d007      	beq.n	8027f54 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8027f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f46:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027f4a:	d101      	bne.n	8027f50 <lfs_ctz_extend+0xec>
                            goto relocate;
 8027f4c:	bf00      	nop
                    goto relocate;
 8027f4e:	e075      	b.n	802803c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8027f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8027f52:	e084      	b.n	802805e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027f56:	3301      	adds	r3, #1
 8027f58:	637b      	str	r3, [r7, #52]	; 0x34
 8027f5a:	69fb      	ldr	r3, [r7, #28]
 8027f5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027f5e:	429a      	cmp	r2, r3
 8027f60:	d3c5      	bcc.n	8027eee <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8027f62:	6a3a      	ldr	r2, [r7, #32]
 8027f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027f66:	601a      	str	r2, [r3, #0]
                *off = noff;
 8027f68:	69fa      	ldr	r2, [r7, #28]
 8027f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027f6c:	601a      	str	r2, [r3, #0]
                return 0;
 8027f6e:	2300      	movs	r3, #0
 8027f70:	e075      	b.n	802805e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8027f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f74:	3301      	adds	r3, #1
 8027f76:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8027f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f7a:	f7fb fcea 	bl	8023952 <lfs_ctz>
 8027f7e:	4603      	mov	r3, r0
 8027f80:	3301      	adds	r3, #1
 8027f82:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8027f84:	683b      	ldr	r3, [r7, #0]
 8027f86:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8027f88:	2300      	movs	r3, #0
 8027f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8027f8c:	e049      	b.n	8028022 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8027f8e:	69bb      	ldr	r3, [r7, #24]
 8027f90:	4618      	mov	r0, r3
 8027f92:	f7fb fd12 	bl	80239ba <lfs_tole32>
 8027f96:	4603      	mov	r3, r0
 8027f98:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8027f9a:	6a3b      	ldr	r3, [r7, #32]
 8027f9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027f9e:	0092      	lsls	r2, r2, #2
 8027fa0:	2104      	movs	r1, #4
 8027fa2:	9103      	str	r1, [sp, #12]
 8027fa4:	f107 0118 	add.w	r1, r7, #24
 8027fa8:	9102      	str	r1, [sp, #8]
 8027faa:	9201      	str	r2, [sp, #4]
 8027fac:	9300      	str	r3, [sp, #0]
 8027fae:	2301      	movs	r3, #1
 8027fb0:	687a      	ldr	r2, [r7, #4]
 8027fb2:	68b9      	ldr	r1, [r7, #8]
 8027fb4:	68f8      	ldr	r0, [r7, #12]
 8027fb6:	f7fb ffa7 	bl	8023f08 <lfs_bd_prog>
 8027fba:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8027fbc:	69bb      	ldr	r3, [r7, #24]
 8027fbe:	4618      	mov	r0, r3
 8027fc0:	f7fb fcf0 	bl	80239a4 <lfs_fromle32>
 8027fc4:	4603      	mov	r3, r0
 8027fc6:	61bb      	str	r3, [r7, #24]
                if (err) {
 8027fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fca:	2b00      	cmp	r3, #0
 8027fcc:	d005      	beq.n	8027fda <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8027fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fd0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027fd4:	d034      	beq.n	8028040 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8027fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fd8:	e041      	b.n	802805e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8027fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027fdc:	3b01      	subs	r3, #1
 8027fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027fe0:	429a      	cmp	r2, r3
 8027fe2:	d01b      	beq.n	802801c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8027fe4:	69bb      	ldr	r3, [r7, #24]
 8027fe6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027fe8:	0092      	lsls	r2, r2, #2
 8027fea:	2104      	movs	r1, #4
 8027fec:	9103      	str	r1, [sp, #12]
 8027fee:	f107 0118 	add.w	r1, r7, #24
 8027ff2:	9102      	str	r1, [sp, #8]
 8027ff4:	9201      	str	r2, [sp, #4]
 8027ff6:	9300      	str	r3, [sp, #0]
 8027ff8:	2304      	movs	r3, #4
 8027ffa:	687a      	ldr	r2, [r7, #4]
 8027ffc:	2100      	movs	r1, #0
 8027ffe:	68f8      	ldr	r0, [r7, #12]
 8028000:	f7fb fd3c 	bl	8023a7c <lfs_bd_read>
 8028004:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8028006:	69bb      	ldr	r3, [r7, #24]
 8028008:	4618      	mov	r0, r3
 802800a:	f7fb fccb 	bl	80239a4 <lfs_fromle32>
 802800e:	4603      	mov	r3, r0
 8028010:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8028012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028014:	2b00      	cmp	r3, #0
 8028016:	d001      	beq.n	802801c <lfs_ctz_extend+0x1b8>
                        return err;
 8028018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802801a:	e020      	b.n	802805e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 802801c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802801e:	3301      	adds	r3, #1
 8028020:	633b      	str	r3, [r7, #48]	; 0x30
 8028022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8028024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028026:	429a      	cmp	r2, r3
 8028028:	d3b1      	bcc.n	8027f8e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 802802a:	6a3a      	ldr	r2, [r7, #32]
 802802c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802802e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8028030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028032:	009a      	lsls	r2, r3, #2
 8028034:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028036:	601a      	str	r2, [r3, #0]
            return 0;
 8028038:	2300      	movs	r3, #0
 802803a:	e010      	b.n	802805e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 802803c:	bf00      	nop
 802803e:	e000      	b.n	8028042 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8028040:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8028042:	6a3b      	ldr	r3, [r7, #32]
 8028044:	4a08      	ldr	r2, [pc, #32]	; (8028068 <lfs_ctz_extend+0x204>)
 8028046:	9200      	str	r2, [sp, #0]
 8028048:	f640 22da 	movw	r2, #2778	; 0xada
 802804c:	4907      	ldr	r1, [pc, #28]	; (802806c <lfs_ctz_extend+0x208>)
 802804e:	4808      	ldr	r0, [pc, #32]	; (8028070 <lfs_ctz_extend+0x20c>)
 8028050:	f005 fbb6 	bl	802d7c0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8028054:	68b9      	ldr	r1, [r7, #8]
 8028056:	68f8      	ldr	r0, [r7, #12]
 8028058:	f7fb fcea 	bl	8023a30 <lfs_cache_drop>
    while (true) {
 802805c:	e709      	b.n	8027e72 <lfs_ctz_extend+0xe>
    }
}
 802805e:	4618      	mov	r0, r3
 8028060:	3738      	adds	r7, #56	; 0x38
 8028062:	46bd      	mov	sp, r7
 8028064:	bd80      	pop	{r7, pc}
 8028066:	bf00      	nop
 8028068:	08033954 	.word	0x08033954
 802806c:	08033840 	.word	0x08033840
 8028070:	080339d4 	.word	0x080339d4

08028074 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8028074:	b580      	push	{r7, lr}
 8028076:	b090      	sub	sp, #64	; 0x40
 8028078:	af04      	add	r7, sp, #16
 802807a:	60f8      	str	r0, [r7, #12]
 802807c:	60b9      	str	r1, [r7, #8]
 802807e:	607a      	str	r2, [r7, #4]
 8028080:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8028082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028084:	2b00      	cmp	r3, #0
 8028086:	d101      	bne.n	802808c <lfs_ctz_traverse+0x18>
        return 0;
 8028088:	2300      	movs	r3, #0
 802808a:	e06b      	b.n	8028164 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 802808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802808e:	3b01      	subs	r3, #1
 8028090:	61fb      	str	r3, [r7, #28]
 8028092:	f107 031c 	add.w	r3, r7, #28
 8028096:	4619      	mov	r1, r3
 8028098:	68f8      	ldr	r0, [r7, #12]
 802809a:	f7ff fe3f 	bl	8027d1c <lfs_ctz_index>
 802809e:	4603      	mov	r3, r0
 80280a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80280a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80280a4:	6839      	ldr	r1, [r7, #0]
 80280a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80280a8:	4798      	blx	r3
 80280aa:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80280ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280ae:	2b00      	cmp	r3, #0
 80280b0:	d001      	beq.n	80280b6 <lfs_ctz_traverse+0x42>
            return err;
 80280b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280b4:	e056      	b.n	8028164 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 80280b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80280b8:	2b00      	cmp	r3, #0
 80280ba:	d101      	bne.n	80280c0 <lfs_ctz_traverse+0x4c>
            return 0;
 80280bc:	2300      	movs	r3, #0
 80280be:	e051      	b.n	8028164 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80280c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80280c2:	f003 0301 	and.w	r3, r3, #1
 80280c6:	f1c3 0302 	rsb	r3, r3, #2
 80280ca:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80280cc:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80280ce:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80280d0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80280d2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80280d4:	9303      	str	r3, [sp, #12]
 80280d6:	f107 0314 	add.w	r3, r7, #20
 80280da:	9302      	str	r3, [sp, #8]
 80280dc:	2300      	movs	r3, #0
 80280de:	9301      	str	r3, [sp, #4]
 80280e0:	683b      	ldr	r3, [r7, #0]
 80280e2:	9300      	str	r3, [sp, #0]
 80280e4:	4613      	mov	r3, r2
 80280e6:	687a      	ldr	r2, [r7, #4]
 80280e8:	68b9      	ldr	r1, [r7, #8]
 80280ea:	68f8      	ldr	r0, [r7, #12]
 80280ec:	f7fb fcc6 	bl	8023a7c <lfs_bd_read>
 80280f0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80280f2:	697b      	ldr	r3, [r7, #20]
 80280f4:	4618      	mov	r0, r3
 80280f6:	f7fb fc55 	bl	80239a4 <lfs_fromle32>
 80280fa:	4603      	mov	r3, r0
 80280fc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80280fe:	69bb      	ldr	r3, [r7, #24]
 8028100:	4618      	mov	r0, r3
 8028102:	f7fb fc4f 	bl	80239a4 <lfs_fromle32>
 8028106:	4603      	mov	r3, r0
 8028108:	61bb      	str	r3, [r7, #24]
        if (err) {
 802810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802810c:	2b00      	cmp	r3, #0
 802810e:	d001      	beq.n	8028114 <lfs_ctz_traverse+0xa0>
            return err;
 8028110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028112:	e027      	b.n	8028164 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8028114:	2300      	movs	r3, #0
 8028116:	62bb      	str	r3, [r7, #40]	; 0x28
 8028118:	e012      	b.n	8028140 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 802811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802811c:	009b      	lsls	r3, r3, #2
 802811e:	3330      	adds	r3, #48	; 0x30
 8028120:	443b      	add	r3, r7
 8028122:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8028126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028128:	4611      	mov	r1, r2
 802812a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 802812c:	4798      	blx	r3
 802812e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8028130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028132:	2b00      	cmp	r3, #0
 8028134:	d001      	beq.n	802813a <lfs_ctz_traverse+0xc6>
                return err;
 8028136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028138:	e014      	b.n	8028164 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 802813a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802813c:	3301      	adds	r3, #1
 802813e:	62bb      	str	r3, [r7, #40]	; 0x28
 8028140:	6a3b      	ldr	r3, [r7, #32]
 8028142:	3b01      	subs	r3, #1
 8028144:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028146:	429a      	cmp	r2, r3
 8028148:	dbe7      	blt.n	802811a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 802814a:	6a3b      	ldr	r3, [r7, #32]
 802814c:	3b01      	subs	r3, #1
 802814e:	009b      	lsls	r3, r3, #2
 8028150:	3330      	adds	r3, #48	; 0x30
 8028152:	443b      	add	r3, r7
 8028154:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8028158:	603b      	str	r3, [r7, #0]
        index -= count;
 802815a:	6a3b      	ldr	r3, [r7, #32]
 802815c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802815e:	1ad3      	subs	r3, r2, r3
 8028160:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8028162:	e79e      	b.n	80280a2 <lfs_ctz_traverse+0x2e>
    }
}
 8028164:	4618      	mov	r0, r3
 8028166:	3730      	adds	r7, #48	; 0x30
 8028168:	46bd      	mov	sp, r7
 802816a:	bd80      	pop	{r7, pc}

0802816c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802816c:	b5b0      	push	{r4, r5, r7, lr}
 802816e:	b09a      	sub	sp, #104	; 0x68
 8028170:	af02      	add	r7, sp, #8
 8028172:	60f8      	str	r0, [r7, #12]
 8028174:	60b9      	str	r1, [r7, #8]
 8028176:	607a      	str	r2, [r7, #4]
 8028178:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 802817a:	683b      	ldr	r3, [r7, #0]
 802817c:	f003 0302 	and.w	r3, r3, #2
 8028180:	2b00      	cmp	r3, #0
 8028182:	d008      	beq.n	8028196 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8028184:	68f8      	ldr	r0, [r7, #12]
 8028186:	f002 fb63 	bl	802a850 <lfs_fs_forceconsistency>
 802818a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 802818c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802818e:	2b00      	cmp	r3, #0
 8028190:	d001      	beq.n	8028196 <lfs_file_rawopencfg+0x2a>
            return err;
 8028192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028194:	e1b0      	b.n	80284f8 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8028196:	68bb      	ldr	r3, [r7, #8]
 8028198:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802819a:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 802819c:	683a      	ldr	r2, [r7, #0]
 802819e:	68bb      	ldr	r3, [r7, #8]
 80281a0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 80281a2:	68bb      	ldr	r3, [r7, #8]
 80281a4:	2200      	movs	r2, #0
 80281a6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 80281a8:	68bb      	ldr	r3, [r7, #8]
 80281aa:	2200      	movs	r2, #0
 80281ac:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 80281ae:	68bb      	ldr	r3, [r7, #8]
 80281b0:	2200      	movs	r2, #0
 80281b2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 80281b4:	68bb      	ldr	r3, [r7, #8]
 80281b6:	f103 0108 	add.w	r1, r3, #8
 80281ba:	68bb      	ldr	r3, [r7, #8]
 80281bc:	3304      	adds	r3, #4
 80281be:	1d3a      	adds	r2, r7, #4
 80281c0:	68f8      	ldr	r0, [r7, #12]
 80281c2:	f7fd fe31 	bl	8025e28 <lfs_dir_find>
 80281c6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 80281c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281ca:	2b00      	cmp	r3, #0
 80281cc:	da0c      	bge.n	80281e8 <lfs_file_rawopencfg+0x7c>
 80281ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281d0:	f113 0f02 	cmn.w	r3, #2
 80281d4:	d105      	bne.n	80281e2 <lfs_file_rawopencfg+0x76>
 80281d6:	68bb      	ldr	r3, [r7, #8]
 80281d8:	889b      	ldrh	r3, [r3, #4]
 80281da:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80281de:	4293      	cmp	r3, r2
 80281e0:	d102      	bne.n	80281e8 <lfs_file_rawopencfg+0x7c>
        err = tag;
 80281e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80281e6:	e17c      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80281e8:	68bb      	ldr	r3, [r7, #8]
 80281ea:	2201      	movs	r2, #1
 80281ec:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80281ee:	68b9      	ldr	r1, [r7, #8]
 80281f0:	68f8      	ldr	r0, [r7, #12]
 80281f2:	f7fc fa64 	bl	80246be <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80281f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281f8:	f113 0f02 	cmn.w	r3, #2
 80281fc:	d14e      	bne.n	802829c <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80281fe:	683b      	ldr	r3, [r7, #0]
 8028200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8028204:	2b00      	cmp	r3, #0
 8028206:	d103      	bne.n	8028210 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8028208:	f06f 0301 	mvn.w	r3, #1
 802820c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 802820e:	e168      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8028210:	687b      	ldr	r3, [r7, #4]
 8028212:	4618      	mov	r0, r3
 8028214:	f7e8 f844 	bl	80102a0 <strlen>
 8028218:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 802821a:	68fb      	ldr	r3, [r7, #12]
 802821c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802821e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8028220:	429a      	cmp	r2, r3
 8028222:	d903      	bls.n	802822c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8028224:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8028228:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 802822a:	e15a      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802822c:	68bb      	ldr	r3, [r7, #8]
 802822e:	f103 0108 	add.w	r1, r3, #8
 8028232:	68bb      	ldr	r3, [r7, #8]
 8028234:	889b      	ldrh	r3, [r3, #4]
 8028236:	029b      	lsls	r3, r3, #10
 8028238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802823c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028242:	2300      	movs	r3, #0
 8028244:	633b      	str	r3, [r7, #48]	; 0x30
 8028246:	68bb      	ldr	r3, [r7, #8]
 8028248:	889b      	ldrh	r3, [r3, #4]
 802824a:	029a      	lsls	r2, r3, #10
 802824c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802824e:	4313      	orrs	r3, r2
 8028250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028254:	637b      	str	r3, [r7, #52]	; 0x34
 8028256:	687b      	ldr	r3, [r7, #4]
 8028258:	63bb      	str	r3, [r7, #56]	; 0x38
 802825a:	68bb      	ldr	r3, [r7, #8]
 802825c:	889b      	ldrh	r3, [r3, #4]
 802825e:	029b      	lsls	r3, r3, #10
 8028260:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028268:	63fb      	str	r3, [r7, #60]	; 0x3c
 802826a:	2300      	movs	r3, #0
 802826c:	643b      	str	r3, [r7, #64]	; 0x40
 802826e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8028272:	2303      	movs	r3, #3
 8028274:	68f8      	ldr	r0, [r7, #12]
 8028276:	f7ff fadf 	bl	8027838 <lfs_dir_commit>
 802827a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 802827c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802827e:	f113 0f1c 	cmn.w	r3, #28
 8028282:	d001      	beq.n	8028288 <lfs_file_rawopencfg+0x11c>
 8028284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028286:	e001      	b.n	802828c <lfs_file_rawopencfg+0x120>
 8028288:	f06f 0323 	mvn.w	r3, #35	; 0x23
 802828c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 802828e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028290:	2b00      	cmp	r3, #0
 8028292:	f040 8125 	bne.w	80284e0 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8028296:	4b9a      	ldr	r3, [pc, #616]	; (8028500 <lfs_file_rawopencfg+0x394>)
 8028298:	65bb      	str	r3, [r7, #88]	; 0x58
 802829a:	e044      	b.n	8028326 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 802829c:	683b      	ldr	r3, [r7, #0]
 802829e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80282a2:	2b00      	cmp	r3, #0
 80282a4:	d003      	beq.n	80282ae <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 80282a6:	f06f 0310 	mvn.w	r3, #16
 80282aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80282ac:	e119      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 80282ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80282b0:	4618      	mov	r0, r3
 80282b2:	f7fb fff3 	bl	802429c <lfs_tag_type3>
 80282b6:	4603      	mov	r3, r0
 80282b8:	2b01      	cmp	r3, #1
 80282ba:	d003      	beq.n	80282c4 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 80282bc:	f06f 0314 	mvn.w	r3, #20
 80282c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80282c2:	e10e      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 80282c4:	683b      	ldr	r3, [r7, #0]
 80282c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80282ca:	2b00      	cmp	r3, #0
 80282cc:	d00e      	beq.n	80282ec <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 80282ce:	68bb      	ldr	r3, [r7, #8]
 80282d0:	889b      	ldrh	r3, [r3, #4]
 80282d2:	029b      	lsls	r3, r3, #10
 80282d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80282d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80282dc:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 80282de:	68bb      	ldr	r3, [r7, #8]
 80282e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80282e6:	68bb      	ldr	r3, [r7, #8]
 80282e8:	631a      	str	r2, [r3, #48]	; 0x30
 80282ea:	e01c      	b.n	8028326 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80282ec:	68bb      	ldr	r3, [r7, #8]
 80282ee:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80282f2:	68bb      	ldr	r3, [r7, #8]
 80282f4:	889b      	ldrh	r3, [r3, #4]
 80282f6:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80282f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80282fc:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8028300:	68ba      	ldr	r2, [r7, #8]
 8028302:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8028304:	9200      	str	r2, [sp, #0]
 8028306:	4a7f      	ldr	r2, [pc, #508]	; (8028504 <lfs_file_rawopencfg+0x398>)
 8028308:	68f8      	ldr	r0, [r7, #12]
 802830a:	f7fc fbdb 	bl	8024ac4 <lfs_dir_get>
 802830e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8028310:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028312:	2b00      	cmp	r3, #0
 8028314:	da02      	bge.n	802831c <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8028316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028318:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 802831a:	e0e2      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 802831c:	68bb      	ldr	r3, [r7, #8]
 802831e:	3328      	adds	r3, #40	; 0x28
 8028320:	4618      	mov	r0, r3
 8028322:	f7fc f8ed 	bl	8024500 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8028326:	2300      	movs	r3, #0
 8028328:	657b      	str	r3, [r7, #84]	; 0x54
 802832a:	e063      	b.n	80283f4 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 802832c:	68bb      	ldr	r3, [r7, #8]
 802832e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028330:	f003 0301 	and.w	r3, r3, #1
 8028334:	2b00      	cmp	r3, #0
 8028336:	d03c      	beq.n	80283b2 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028338:	68bb      	ldr	r3, [r7, #8]
 802833a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 802833e:	68bb      	ldr	r3, [r7, #8]
 8028340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028342:	6859      	ldr	r1, [r3, #4]
 8028344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028346:	4613      	mov	r3, r2
 8028348:	005b      	lsls	r3, r3, #1
 802834a:	4413      	add	r3, r2
 802834c:	009b      	lsls	r3, r3, #2
 802834e:	440b      	add	r3, r1
 8028350:	781b      	ldrb	r3, [r3, #0]
 8028352:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8028356:	051a      	lsls	r2, r3, #20
 8028358:	68bb      	ldr	r3, [r7, #8]
 802835a:	889b      	ldrh	r3, [r3, #4]
 802835c:	029b      	lsls	r3, r3, #10
 802835e:	ea42 0103 	orr.w	r1, r2, r3
 8028362:	68bb      	ldr	r3, [r7, #8]
 8028364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028366:	6858      	ldr	r0, [r3, #4]
 8028368:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802836a:	4613      	mov	r3, r2
 802836c:	005b      	lsls	r3, r3, #1
 802836e:	4413      	add	r3, r2
 8028370:	009b      	lsls	r3, r3, #2
 8028372:	4403      	add	r3, r0
 8028374:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028376:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 802837a:	68bb      	ldr	r3, [r7, #8]
 802837c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802837e:	6859      	ldr	r1, [r3, #4]
 8028380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028382:	4613      	mov	r3, r2
 8028384:	005b      	lsls	r3, r3, #1
 8028386:	4413      	add	r3, r2
 8028388:	009b      	lsls	r3, r3, #2
 802838a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802838c:	685b      	ldr	r3, [r3, #4]
 802838e:	9300      	str	r3, [sp, #0]
 8028390:	4603      	mov	r3, r0
 8028392:	4a5d      	ldr	r2, [pc, #372]	; (8028508 <lfs_file_rawopencfg+0x39c>)
 8028394:	4621      	mov	r1, r4
 8028396:	68f8      	ldr	r0, [r7, #12]
 8028398:	f7fc fb94 	bl	8024ac4 <lfs_dir_get>
 802839c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 802839e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80283a0:	2b00      	cmp	r3, #0
 80283a2:	da06      	bge.n	80283b2 <lfs_file_rawopencfg+0x246>
 80283a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80283a6:	f113 0f02 	cmn.w	r3, #2
 80283aa:	d002      	beq.n	80283b2 <lfs_file_rawopencfg+0x246>
                err = res;
 80283ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80283ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80283b0:	e097      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80283b2:	68bb      	ldr	r3, [r7, #8]
 80283b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283b6:	f003 0302 	and.w	r3, r3, #2
 80283ba:	2b00      	cmp	r3, #0
 80283bc:	d017      	beq.n	80283ee <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 80283be:	68bb      	ldr	r3, [r7, #8]
 80283c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80283c2:	6859      	ldr	r1, [r3, #4]
 80283c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80283c6:	4613      	mov	r3, r2
 80283c8:	005b      	lsls	r3, r3, #1
 80283ca:	4413      	add	r3, r2
 80283cc:	009b      	lsls	r3, r3, #2
 80283ce:	440b      	add	r3, r1
 80283d0:	689a      	ldr	r2, [r3, #8]
 80283d2:	68fb      	ldr	r3, [r7, #12]
 80283d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80283d6:	429a      	cmp	r2, r3
 80283d8:	d903      	bls.n	80283e2 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 80283da:	f06f 031b 	mvn.w	r3, #27
 80283de:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80283e0:	e07f      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80283e2:	68bb      	ldr	r3, [r7, #8]
 80283e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80283ea:	68bb      	ldr	r3, [r7, #8]
 80283ec:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80283ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80283f0:	3301      	adds	r3, #1
 80283f2:	657b      	str	r3, [r7, #84]	; 0x54
 80283f4:	68bb      	ldr	r3, [r7, #8]
 80283f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80283f8:	689b      	ldr	r3, [r3, #8]
 80283fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80283fc:	429a      	cmp	r2, r3
 80283fe:	d395      	bcc.n	802832c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8028400:	68bb      	ldr	r3, [r7, #8]
 8028402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028404:	681b      	ldr	r3, [r3, #0]
 8028406:	2b00      	cmp	r3, #0
 8028408:	d005      	beq.n	8028416 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 802840a:	68bb      	ldr	r3, [r7, #8]
 802840c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802840e:	681a      	ldr	r2, [r3, #0]
 8028410:	68bb      	ldr	r3, [r7, #8]
 8028412:	64da      	str	r2, [r3, #76]	; 0x4c
 8028414:	e010      	b.n	8028438 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8028416:	68fb      	ldr	r3, [r7, #12]
 8028418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802841c:	4618      	mov	r0, r3
 802841e:	f7fb faf0 	bl	8023a02 <lfs_malloc>
 8028422:	4602      	mov	r2, r0
 8028424:	68bb      	ldr	r3, [r7, #8]
 8028426:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8028428:	68bb      	ldr	r3, [r7, #8]
 802842a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802842c:	2b00      	cmp	r3, #0
 802842e:	d103      	bne.n	8028438 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8028430:	f06f 030b 	mvn.w	r3, #11
 8028434:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8028436:	e054      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8028438:	68bb      	ldr	r3, [r7, #8]
 802843a:	3340      	adds	r3, #64	; 0x40
 802843c:	4619      	mov	r1, r3
 802843e:	68f8      	ldr	r0, [r7, #12]
 8028440:	f7fb fb05 	bl	8023a4e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8028444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028446:	4618      	mov	r0, r3
 8028448:	f7fb ff28 	bl	802429c <lfs_tag_type3>
 802844c:	4603      	mov	r3, r0
 802844e:	461a      	mov	r2, r3
 8028450:	f240 2301 	movw	r3, #513	; 0x201
 8028454:	429a      	cmp	r2, r3
 8028456:	d141      	bne.n	80284dc <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8028458:	68bb      	ldr	r3, [r7, #8]
 802845a:	f06f 0201 	mvn.w	r2, #1
 802845e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8028460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028462:	4618      	mov	r0, r3
 8028464:	f7fb ff54 	bl	8024310 <lfs_tag_size>
 8028468:	4602      	mov	r2, r0
 802846a:	68bb      	ldr	r3, [r7, #8]
 802846c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 802846e:	68bb      	ldr	r3, [r7, #8]
 8028470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028472:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8028476:	68bb      	ldr	r3, [r7, #8]
 8028478:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 802847a:	68bb      	ldr	r3, [r7, #8]
 802847c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802847e:	68bb      	ldr	r3, [r7, #8]
 8028480:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8028482:	68bb      	ldr	r3, [r7, #8]
 8028484:	2200      	movs	r2, #0
 8028486:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8028488:	68fb      	ldr	r3, [r7, #12]
 802848a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802848c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802848e:	68bb      	ldr	r3, [r7, #8]
 8028490:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8028492:	68bb      	ldr	r3, [r7, #8]
 8028494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028496:	2b00      	cmp	r3, #0
 8028498:	d020      	beq.n	80284dc <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802849a:	68bb      	ldr	r3, [r7, #8]
 802849c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80284a0:	68bb      	ldr	r3, [r7, #8]
 80284a2:	889b      	ldrh	r3, [r3, #4]
 80284a4:	029c      	lsls	r4, r3, #10
 80284a6:	68bb      	ldr	r3, [r7, #8]
 80284a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80284aa:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80284ae:	4618      	mov	r0, r3
 80284b0:	f7fb fa08 	bl	80238c4 <lfs_min>
 80284b4:	4603      	mov	r3, r0
 80284b6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80284b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80284bc:	68bb      	ldr	r3, [r7, #8]
 80284be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80284c0:	9300      	str	r3, [sp, #0]
 80284c2:	4613      	mov	r3, r2
 80284c4:	4a0f      	ldr	r2, [pc, #60]	; (8028504 <lfs_file_rawopencfg+0x398>)
 80284c6:	4629      	mov	r1, r5
 80284c8:	68f8      	ldr	r0, [r7, #12]
 80284ca:	f7fc fafb 	bl	8024ac4 <lfs_dir_get>
 80284ce:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80284d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80284d2:	2b00      	cmp	r3, #0
 80284d4:	da02      	bge.n	80284dc <lfs_file_rawopencfg+0x370>
                err = res;
 80284d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80284d8:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80284da:	e002      	b.n	80284e2 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80284dc:	2300      	movs	r3, #0
 80284de:	e00b      	b.n	80284f8 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80284e0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80284e2:	68bb      	ldr	r3, [r7, #8]
 80284e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80284ea:	68bb      	ldr	r3, [r7, #8]
 80284ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80284ee:	68b9      	ldr	r1, [r7, #8]
 80284f0:	68f8      	ldr	r0, [r7, #12]
 80284f2:	f000 f80b 	bl	802850c <lfs_file_rawclose>
    return err;
 80284f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80284f8:	4618      	mov	r0, r3
 80284fa:	3760      	adds	r7, #96	; 0x60
 80284fc:	46bd      	mov	sp, r7
 80284fe:	bdb0      	pop	{r4, r5, r7, pc}
 8028500:	20100000 	.word	0x20100000
 8028504:	700ffc00 	.word	0x700ffc00
 8028508:	7ffffc00 	.word	0x7ffffc00

0802850c <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 802850c:	b580      	push	{r7, lr}
 802850e:	b084      	sub	sp, #16
 8028510:	af00      	add	r7, sp, #0
 8028512:	6078      	str	r0, [r7, #4]
 8028514:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8028516:	6839      	ldr	r1, [r7, #0]
 8028518:	6878      	ldr	r0, [r7, #4]
 802851a:	f000 f9e5 	bl	80288e8 <lfs_file_rawsync>
 802851e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8028520:	6839      	ldr	r1, [r7, #0]
 8028522:	6878      	ldr	r0, [r7, #4]
 8028524:	f7fc f8a9 	bl	802467a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8028528:	683b      	ldr	r3, [r7, #0]
 802852a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802852c:	681b      	ldr	r3, [r3, #0]
 802852e:	2b00      	cmp	r3, #0
 8028530:	d104      	bne.n	802853c <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8028532:	683b      	ldr	r3, [r7, #0]
 8028534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028536:	4618      	mov	r0, r3
 8028538:	f7fb fa6f 	bl	8023a1a <lfs_free>
    }

    return err;
 802853c:	68fb      	ldr	r3, [r7, #12]
}
 802853e:	4618      	mov	r0, r3
 8028540:	3710      	adds	r7, #16
 8028542:	46bd      	mov	sp, r7
 8028544:	bd80      	pop	{r7, pc}
	...

08028548 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8028548:	b590      	push	{r4, r7, lr}
 802854a:	b08d      	sub	sp, #52	; 0x34
 802854c:	af06      	add	r7, sp, #24
 802854e:	6078      	str	r0, [r7, #4]
 8028550:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8028552:	f107 030c 	add.w	r3, r7, #12
 8028556:	4619      	mov	r1, r3
 8028558:	6878      	ldr	r0, [r7, #4]
 802855a:	f7fc f919 	bl	8024790 <lfs_alloc>
 802855e:	6138      	str	r0, [r7, #16]
        if (err) {
 8028560:	693b      	ldr	r3, [r7, #16]
 8028562:	2b00      	cmp	r3, #0
 8028564:	d001      	beq.n	802856a <lfs_file_relocate+0x22>
            return err;
 8028566:	693b      	ldr	r3, [r7, #16]
 8028568:	e0bb      	b.n	80286e2 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 802856a:	68fb      	ldr	r3, [r7, #12]
 802856c:	4619      	mov	r1, r3
 802856e:	6878      	ldr	r0, [r7, #4]
 8028570:	f7fb fd76 	bl	8024060 <lfs_bd_erase>
 8028574:	6138      	str	r0, [r7, #16]
        if (err) {
 8028576:	693b      	ldr	r3, [r7, #16]
 8028578:	2b00      	cmp	r3, #0
 802857a:	d006      	beq.n	802858a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 802857c:	693b      	ldr	r3, [r7, #16]
 802857e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028582:	f000 809b 	beq.w	80286bc <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8028586:	693b      	ldr	r3, [r7, #16]
 8028588:	e0ab      	b.n	80286e2 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 802858a:	2300      	movs	r3, #0
 802858c:	617b      	str	r3, [r7, #20]
 802858e:	e069      	b.n	8028664 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8028590:	683b      	ldr	r3, [r7, #0]
 8028592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028598:	2b00      	cmp	r3, #0
 802859a:	d027      	beq.n	80285ec <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 802859c:	683b      	ldr	r3, [r7, #0]
 802859e:	f103 0008 	add.w	r0, r3, #8
 80285a2:	683b      	ldr	r3, [r7, #0]
 80285a4:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80285a8:	683b      	ldr	r3, [r7, #0]
 80285aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80285ac:	697b      	ldr	r3, [r7, #20]
 80285ae:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80285b0:	683b      	ldr	r3, [r7, #0]
 80285b2:	889b      	ldrh	r3, [r3, #4]
 80285b4:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80285b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80285ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80285be:	2101      	movs	r1, #1
 80285c0:	9105      	str	r1, [sp, #20]
 80285c2:	f107 010b 	add.w	r1, r7, #11
 80285c6:	9104      	str	r1, [sp, #16]
 80285c8:	6979      	ldr	r1, [r7, #20]
 80285ca:	9103      	str	r1, [sp, #12]
 80285cc:	9302      	str	r3, [sp, #8]
 80285ce:	4b47      	ldr	r3, [pc, #284]	; (80286ec <lfs_file_relocate+0x1a4>)
 80285d0:	9301      	str	r3, [sp, #4]
 80285d2:	9200      	str	r2, [sp, #0]
 80285d4:	4623      	mov	r3, r4
 80285d6:	2200      	movs	r2, #0
 80285d8:	4601      	mov	r1, r0
 80285da:	6878      	ldr	r0, [r7, #4]
 80285dc:	f7fc fa8d 	bl	8024afa <lfs_dir_getread>
 80285e0:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80285e2:	693b      	ldr	r3, [r7, #16]
 80285e4:	2b00      	cmp	r3, #0
 80285e6:	d01e      	beq.n	8028626 <lfs_file_relocate+0xde>
                    return err;
 80285e8:	693b      	ldr	r3, [r7, #16]
 80285ea:	e07a      	b.n	80286e2 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80285ec:	683b      	ldr	r3, [r7, #0]
 80285ee:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80285f2:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80285f4:	683b      	ldr	r3, [r7, #0]
 80285f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80285f8:	697b      	ldr	r3, [r7, #20]
 80285fa:	1ad4      	subs	r4, r2, r3
 80285fc:	683b      	ldr	r3, [r7, #0]
 80285fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028600:	2201      	movs	r2, #1
 8028602:	9203      	str	r2, [sp, #12]
 8028604:	f107 020b 	add.w	r2, r7, #11
 8028608:	9202      	str	r2, [sp, #8]
 802860a:	697a      	ldr	r2, [r7, #20]
 802860c:	9201      	str	r2, [sp, #4]
 802860e:	9300      	str	r3, [sp, #0]
 8028610:	4623      	mov	r3, r4
 8028612:	4602      	mov	r2, r0
 8028614:	6878      	ldr	r0, [r7, #4]
 8028616:	f7fb fa31 	bl	8023a7c <lfs_bd_read>
 802861a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 802861c:	693b      	ldr	r3, [r7, #16]
 802861e:	2b00      	cmp	r3, #0
 8028620:	d001      	beq.n	8028626 <lfs_file_relocate+0xde>
                    return err;
 8028622:	693b      	ldr	r3, [r7, #16]
 8028624:	e05d      	b.n	80286e2 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8028626:	687b      	ldr	r3, [r7, #4]
 8028628:	f103 0110 	add.w	r1, r3, #16
 802862c:	6878      	ldr	r0, [r7, #4]
 802862e:	68fb      	ldr	r3, [r7, #12]
 8028630:	2201      	movs	r2, #1
 8028632:	9203      	str	r2, [sp, #12]
 8028634:	f107 020b 	add.w	r2, r7, #11
 8028638:	9202      	str	r2, [sp, #8]
 802863a:	697a      	ldr	r2, [r7, #20]
 802863c:	9201      	str	r2, [sp, #4]
 802863e:	9300      	str	r3, [sp, #0]
 8028640:	2301      	movs	r3, #1
 8028642:	4602      	mov	r2, r0
 8028644:	6878      	ldr	r0, [r7, #4]
 8028646:	f7fb fc5f 	bl	8023f08 <lfs_bd_prog>
 802864a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 802864c:	693b      	ldr	r3, [r7, #16]
 802864e:	2b00      	cmp	r3, #0
 8028650:	d005      	beq.n	802865e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8028652:	693b      	ldr	r3, [r7, #16]
 8028654:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028658:	d032      	beq.n	80286c0 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 802865a:	693b      	ldr	r3, [r7, #16]
 802865c:	e041      	b.n	80286e2 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 802865e:	697b      	ldr	r3, [r7, #20]
 8028660:	3301      	adds	r3, #1
 8028662:	617b      	str	r3, [r7, #20]
 8028664:	683b      	ldr	r3, [r7, #0]
 8028666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028668:	697a      	ldr	r2, [r7, #20]
 802866a:	429a      	cmp	r2, r3
 802866c:	d390      	bcc.n	8028590 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 802866e:	683b      	ldr	r3, [r7, #0]
 8028670:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8028672:	687b      	ldr	r3, [r7, #4]
 8028674:	69d9      	ldr	r1, [r3, #28]
 8028676:	687b      	ldr	r3, [r7, #4]
 8028678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802867c:	461a      	mov	r2, r3
 802867e:	f005 fc0a 	bl	802de96 <memcpy>
        file->cache.block = lfs->pcache.block;
 8028682:	687b      	ldr	r3, [r7, #4]
 8028684:	691a      	ldr	r2, [r3, #16]
 8028686:	683b      	ldr	r3, [r7, #0]
 8028688:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 802868a:	687b      	ldr	r3, [r7, #4]
 802868c:	695a      	ldr	r2, [r3, #20]
 802868e:	683b      	ldr	r3, [r7, #0]
 8028690:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8028692:	687b      	ldr	r3, [r7, #4]
 8028694:	699a      	ldr	r2, [r3, #24]
 8028696:	683b      	ldr	r3, [r7, #0]
 8028698:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 802869a:	687b      	ldr	r3, [r7, #4]
 802869c:	3310      	adds	r3, #16
 802869e:	4619      	mov	r1, r3
 80286a0:	6878      	ldr	r0, [r7, #4]
 80286a2:	f7fb f9d4 	bl	8023a4e <lfs_cache_zero>

        file->block = nblock;
 80286a6:	68fa      	ldr	r2, [r7, #12]
 80286a8:	683b      	ldr	r3, [r7, #0]
 80286aa:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80286ac:	683b      	ldr	r3, [r7, #0]
 80286ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286b0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80286b4:	683b      	ldr	r3, [r7, #0]
 80286b6:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80286b8:	2300      	movs	r3, #0
 80286ba:	e012      	b.n	80286e2 <lfs_file_relocate+0x19a>
                goto relocate;
 80286bc:	bf00      	nop
 80286be:	e000      	b.n	80286c2 <lfs_file_relocate+0x17a>
                    goto relocate;
 80286c0:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80286c2:	68fb      	ldr	r3, [r7, #12]
 80286c4:	4a0a      	ldr	r2, [pc, #40]	; (80286f0 <lfs_file_relocate+0x1a8>)
 80286c6:	9200      	str	r2, [sp, #0]
 80286c8:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 80286cc:	4909      	ldr	r1, [pc, #36]	; (80286f4 <lfs_file_relocate+0x1ac>)
 80286ce:	480a      	ldr	r0, [pc, #40]	; (80286f8 <lfs_file_relocate+0x1b0>)
 80286d0:	f005 f876 	bl	802d7c0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80286d4:	687b      	ldr	r3, [r7, #4]
 80286d6:	3310      	adds	r3, #16
 80286d8:	4619      	mov	r1, r3
 80286da:	6878      	ldr	r0, [r7, #4]
 80286dc:	f7fb f9a8 	bl	8023a30 <lfs_cache_drop>
    while (true) {
 80286e0:	e737      	b.n	8028552 <lfs_file_relocate+0xa>
    }
}
 80286e2:	4618      	mov	r0, r3
 80286e4:	371c      	adds	r7, #28
 80286e6:	46bd      	mov	sp, r7
 80286e8:	bd90      	pop	{r4, r7, pc}
 80286ea:	bf00      	nop
 80286ec:	fff7fc00 	.word	0xfff7fc00
 80286f0:	08033954 	.word	0x08033954
 80286f4:	08033840 	.word	0x08033840
 80286f8:	080339d4 	.word	0x080339d4

080286fc <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80286fc:	b580      	push	{r7, lr}
 80286fe:	b084      	sub	sp, #16
 8028700:	af00      	add	r7, sp, #0
 8028702:	6078      	str	r0, [r7, #4]
 8028704:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8028706:	683b      	ldr	r3, [r7, #0]
 8028708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802870a:	683b      	ldr	r3, [r7, #0]
 802870c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 802870e:	6878      	ldr	r0, [r7, #4]
 8028710:	f7fc f81e 	bl	8024750 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8028714:	6839      	ldr	r1, [r7, #0]
 8028716:	6878      	ldr	r0, [r7, #4]
 8028718:	f7ff ff16 	bl	8028548 <lfs_file_relocate>
 802871c:	60f8      	str	r0, [r7, #12]
    if (err) {
 802871e:	68fb      	ldr	r3, [r7, #12]
 8028720:	2b00      	cmp	r3, #0
 8028722:	d001      	beq.n	8028728 <lfs_file_outline+0x2c>
        return err;
 8028724:	68fb      	ldr	r3, [r7, #12]
 8028726:	e006      	b.n	8028736 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8028728:	683b      	ldr	r3, [r7, #0]
 802872a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802872c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8028730:	683b      	ldr	r3, [r7, #0]
 8028732:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8028734:	2300      	movs	r3, #0
}
 8028736:	4618      	mov	r0, r3
 8028738:	3710      	adds	r7, #16
 802873a:	46bd      	mov	sp, r7
 802873c:	bd80      	pop	{r7, pc}
	...

08028740 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8028740:	b590      	push	{r4, r7, lr}
 8028742:	b09f      	sub	sp, #124	; 0x7c
 8028744:	af02      	add	r7, sp, #8
 8028746:	6078      	str	r0, [r7, #4]
 8028748:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 802874a:	683b      	ldr	r3, [r7, #0]
 802874c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802874e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028752:	2b00      	cmp	r3, #0
 8028754:	d011      	beq.n	802877a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8028756:	683b      	ldr	r3, [r7, #0]
 8028758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802875a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802875e:	2b00      	cmp	r3, #0
 8028760:	d105      	bne.n	802876e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8028762:	683b      	ldr	r3, [r7, #0]
 8028764:	3340      	adds	r3, #64	; 0x40
 8028766:	4619      	mov	r1, r3
 8028768:	6878      	ldr	r0, [r7, #4]
 802876a:	f7fb f961 	bl	8023a30 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 802876e:	683b      	ldr	r3, [r7, #0]
 8028770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028772:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8028776:	683b      	ldr	r3, [r7, #0]
 8028778:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802877a:	683b      	ldr	r3, [r7, #0]
 802877c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802877e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028782:	2b00      	cmp	r3, #0
 8028784:	f000 80a4 	beq.w	80288d0 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8028788:	683b      	ldr	r3, [r7, #0]
 802878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802878c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 802878e:	683b      	ldr	r3, [r7, #0]
 8028790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028796:	2b00      	cmp	r3, #0
 8028798:	d176      	bne.n	8028888 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 802879a:	f107 030c 	add.w	r3, r7, #12
 802879e:	2254      	movs	r2, #84	; 0x54
 80287a0:	2100      	movs	r1, #0
 80287a2:	4618      	mov	r0, r3
 80287a4:	f005 f9a2 	bl	802daec <memset>
                .ctz.head = file->ctz.head,
 80287a8:	683b      	ldr	r3, [r7, #0]
 80287aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80287ac:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80287ae:	683b      	ldr	r3, [r7, #0]
 80287b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80287b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80287b4:	2301      	movs	r3, #1
 80287b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80287b8:	683b      	ldr	r3, [r7, #0]
 80287ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80287bc:	643b      	str	r3, [r7, #64]	; 0x40
 80287be:	687b      	ldr	r3, [r7, #4]
 80287c0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80287c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80287c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80287ca:	687b      	ldr	r3, [r7, #4]
 80287cc:	4619      	mov	r1, r3
 80287ce:	6878      	ldr	r0, [r7, #4]
 80287d0:	f7fb f92e 	bl	8023a30 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80287d4:	e02b      	b.n	802882e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80287d6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80287da:	f107 010c 	add.w	r1, r7, #12
 80287de:	2301      	movs	r3, #1
 80287e0:	6878      	ldr	r0, [r7, #4]
 80287e2:	f000 f90d 	bl	8028a00 <lfs_file_flushedread>
 80287e6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80287e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80287ea:	2b00      	cmp	r3, #0
 80287ec:	da01      	bge.n	80287f2 <lfs_file_flush+0xb2>
                    return res;
 80287ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80287f0:	e06f      	b.n	80288d2 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80287f2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80287f6:	2301      	movs	r3, #1
 80287f8:	6839      	ldr	r1, [r7, #0]
 80287fa:	6878      	ldr	r0, [r7, #4]
 80287fc:	f000 fa08 	bl	8028c10 <lfs_file_flushedwrite>
 8028800:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8028802:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8028804:	2b00      	cmp	r3, #0
 8028806:	da01      	bge.n	802880c <lfs_file_flush+0xcc>
                    return res;
 8028808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802880a:	e062      	b.n	80288d2 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 802880c:	687b      	ldr	r3, [r7, #4]
 802880e:	681b      	ldr	r3, [r3, #0]
 8028810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028814:	d00b      	beq.n	802882e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8028816:	f107 030c 	add.w	r3, r7, #12
 802881a:	3340      	adds	r3, #64	; 0x40
 802881c:	4619      	mov	r1, r3
 802881e:	6878      	ldr	r0, [r7, #4]
 8028820:	f7fb f906 	bl	8023a30 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8028824:	687b      	ldr	r3, [r7, #4]
 8028826:	4619      	mov	r1, r3
 8028828:	6878      	ldr	r0, [r7, #4]
 802882a:	f7fb f901 	bl	8023a30 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 802882e:	683b      	ldr	r3, [r7, #0]
 8028830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028832:	683b      	ldr	r3, [r7, #0]
 8028834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028836:	429a      	cmp	r2, r3
 8028838:	d3cd      	bcc.n	80287d6 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 802883a:	683b      	ldr	r3, [r7, #0]
 802883c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8028840:	687a      	ldr	r2, [r7, #4]
 8028842:	2301      	movs	r3, #1
 8028844:	6878      	ldr	r0, [r7, #4]
 8028846:	f7fb faaf 	bl	8023da8 <lfs_bd_flush>
 802884a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802884c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802884e:	2b00      	cmp	r3, #0
 8028850:	d026      	beq.n	80288a0 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8028852:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028854:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028858:	d001      	beq.n	802885e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 802885a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802885c:	e039      	b.n	80288d2 <lfs_file_flush+0x192>
                        goto relocate;
 802885e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8028860:	683b      	ldr	r3, [r7, #0]
 8028862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028864:	4a1d      	ldr	r2, [pc, #116]	; (80288dc <lfs_file_flush+0x19c>)
 8028866:	9200      	str	r2, [sp, #0]
 8028868:	f640 425f 	movw	r2, #3167	; 0xc5f
 802886c:	491c      	ldr	r1, [pc, #112]	; (80288e0 <lfs_file_flush+0x1a0>)
 802886e:	481d      	ldr	r0, [pc, #116]	; (80288e4 <lfs_file_flush+0x1a4>)
 8028870:	f004 ffa6 	bl	802d7c0 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8028874:	6839      	ldr	r1, [r7, #0]
 8028876:	6878      	ldr	r0, [r7, #4]
 8028878:	f7ff fe66 	bl	8028548 <lfs_file_relocate>
 802887c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802887e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028880:	2b00      	cmp	r3, #0
 8028882:	d0da      	beq.n	802883a <lfs_file_flush+0xfa>
                    return err;
 8028884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028886:	e024      	b.n	80288d2 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8028888:	683b      	ldr	r3, [r7, #0]
 802888a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802888c:	683b      	ldr	r3, [r7, #0]
 802888e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028890:	4619      	mov	r1, r3
 8028892:	4610      	mov	r0, r2
 8028894:	f7fb f806 	bl	80238a4 <lfs_max>
 8028898:	4602      	mov	r2, r0
 802889a:	683b      	ldr	r3, [r7, #0]
 802889c:	635a      	str	r2, [r3, #52]	; 0x34
 802889e:	e000      	b.n	80288a2 <lfs_file_flush+0x162>
                break;
 80288a0:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80288a2:	683b      	ldr	r3, [r7, #0]
 80288a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80288a6:	683b      	ldr	r3, [r7, #0]
 80288a8:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80288aa:	683b      	ldr	r3, [r7, #0]
 80288ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80288ae:	683b      	ldr	r3, [r7, #0]
 80288b0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80288b2:	683b      	ldr	r3, [r7, #0]
 80288b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80288ba:	683b      	ldr	r3, [r7, #0]
 80288bc:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80288be:	683b      	ldr	r3, [r7, #0]
 80288c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80288c6:	683b      	ldr	r3, [r7, #0]
 80288c8:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80288ca:	683b      	ldr	r3, [r7, #0]
 80288cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80288ce:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80288d0:	2300      	movs	r3, #0
}
 80288d2:	4618      	mov	r0, r3
 80288d4:	3774      	adds	r7, #116	; 0x74
 80288d6:	46bd      	mov	sp, r7
 80288d8:	bd90      	pop	{r4, r7, pc}
 80288da:	bf00      	nop
 80288dc:	08033954 	.word	0x08033954
 80288e0:	08033840 	.word	0x08033840
 80288e4:	080339d4 	.word	0x080339d4

080288e8 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80288e8:	b580      	push	{r7, lr}
 80288ea:	b090      	sub	sp, #64	; 0x40
 80288ec:	af00      	add	r7, sp, #0
 80288ee:	6078      	str	r0, [r7, #4]
 80288f0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80288f2:	683b      	ldr	r3, [r7, #0]
 80288f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80288fa:	2b00      	cmp	r3, #0
 80288fc:	d001      	beq.n	8028902 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80288fe:	2300      	movs	r3, #0
 8028900:	e07a      	b.n	80289f8 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8028902:	6839      	ldr	r1, [r7, #0]
 8028904:	6878      	ldr	r0, [r7, #4]
 8028906:	f7ff ff1b 	bl	8028740 <lfs_file_flush>
 802890a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 802890c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802890e:	2b00      	cmp	r3, #0
 8028910:	d007      	beq.n	8028922 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8028912:	683b      	ldr	r3, [r7, #0]
 8028914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028916:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802891a:	683b      	ldr	r3, [r7, #0]
 802891c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 802891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028920:	e06a      	b.n	80289f8 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8028922:	683b      	ldr	r3, [r7, #0]
 8028924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802892a:	2b00      	cmp	r3, #0
 802892c:	d063      	beq.n	80289f6 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 802892e:	683b      	ldr	r3, [r7, #0]
 8028930:	3308      	adds	r3, #8
 8028932:	4618      	mov	r0, r3
 8028934:	f7fb fbdb 	bl	80240ee <lfs_pair_isnull>
 8028938:	4603      	mov	r3, r0
 802893a:	f083 0301 	eor.w	r3, r3, #1
 802893e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8028940:	2b00      	cmp	r3, #0
 8028942:	d058      	beq.n	80289f6 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8028944:	683b      	ldr	r3, [r7, #0]
 8028946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028948:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802894c:	2b00      	cmp	r3, #0
 802894e:	d009      	beq.n	8028964 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028950:	f240 2301 	movw	r3, #513	; 0x201
 8028954:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8028956:	683b      	ldr	r3, [r7, #0]
 8028958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802895a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 802895c:	683b      	ldr	r3, [r7, #0]
 802895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028960:	637b      	str	r3, [r7, #52]	; 0x34
 8028962:	e014      	b.n	802898e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8028964:	f240 2302 	movw	r3, #514	; 0x202
 8028968:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 802896a:	683a      	ldr	r2, [r7, #0]
 802896c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028970:	3228      	adds	r2, #40	; 0x28
 8028972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028976:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802897a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802897e:	4618      	mov	r0, r3
 8028980:	f7fb fdd6 	bl	8024530 <lfs_ctz_tole32>
            buffer = &ctz;
 8028984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028988:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 802898a:	2308      	movs	r3, #8
 802898c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802898e:	683b      	ldr	r3, [r7, #0]
 8028990:	f103 0108 	add.w	r1, r3, #8
 8028994:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8028996:	051a      	lsls	r2, r3, #20
 8028998:	683b      	ldr	r3, [r7, #0]
 802899a:	889b      	ldrh	r3, [r3, #4]
 802899c:	029b      	lsls	r3, r3, #10
 802899e:	431a      	orrs	r2, r3
 80289a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80289a2:	4313      	orrs	r3, r2
 80289a4:	61bb      	str	r3, [r7, #24]
 80289a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80289a8:	61fb      	str	r3, [r7, #28]
 80289aa:	683b      	ldr	r3, [r7, #0]
 80289ac:	889b      	ldrh	r3, [r3, #4]
 80289ae:	029a      	lsls	r2, r3, #10
 80289b0:	683b      	ldr	r3, [r7, #0]
 80289b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80289b4:	689b      	ldr	r3, [r3, #8]
 80289b6:	4313      	orrs	r3, r2
 80289b8:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80289bc:	623b      	str	r3, [r7, #32]
 80289be:	683b      	ldr	r3, [r7, #0]
 80289c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80289c2:	685b      	ldr	r3, [r3, #4]
 80289c4:	627b      	str	r3, [r7, #36]	; 0x24
 80289c6:	f107 0218 	add.w	r2, r7, #24
 80289ca:	2302      	movs	r3, #2
 80289cc:	6878      	ldr	r0, [r7, #4]
 80289ce:	f7fe ff33 	bl	8027838 <lfs_dir_commit>
 80289d2:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80289d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289d6:	2b00      	cmp	r3, #0
 80289d8:	d007      	beq.n	80289ea <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80289da:	683b      	ldr	r3, [r7, #0]
 80289dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289de:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80289e2:	683b      	ldr	r3, [r7, #0]
 80289e4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80289e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289e8:	e006      	b.n	80289f8 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80289ea:	683b      	ldr	r3, [r7, #0]
 80289ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80289f2:	683b      	ldr	r3, [r7, #0]
 80289f4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80289f6:	2300      	movs	r3, #0
}
 80289f8:	4618      	mov	r0, r3
 80289fa:	3740      	adds	r7, #64	; 0x40
 80289fc:	46bd      	mov	sp, r7
 80289fe:	bd80      	pop	{r7, pc}

08028a00 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028a00:	b5b0      	push	{r4, r5, r7, lr}
 8028a02:	b090      	sub	sp, #64	; 0x40
 8028a04:	af06      	add	r7, sp, #24
 8028a06:	60f8      	str	r0, [r7, #12]
 8028a08:	60b9      	str	r1, [r7, #8]
 8028a0a:	607a      	str	r2, [r7, #4]
 8028a0c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8028a0e:	687b      	ldr	r3, [r7, #4]
 8028a10:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8028a12:	683b      	ldr	r3, [r7, #0]
 8028a14:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8028a16:	68bb      	ldr	r3, [r7, #8]
 8028a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028a1a:	68bb      	ldr	r3, [r7, #8]
 8028a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028a1e:	429a      	cmp	r2, r3
 8028a20:	d301      	bcc.n	8028a26 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8028a22:	2300      	movs	r3, #0
 8028a24:	e0b7      	b.n	8028b96 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8028a26:	68bb      	ldr	r3, [r7, #8]
 8028a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028a2a:	68bb      	ldr	r3, [r7, #8]
 8028a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028a2e:	1ad3      	subs	r3, r2, r3
 8028a30:	4619      	mov	r1, r3
 8028a32:	6838      	ldr	r0, [r7, #0]
 8028a34:	f7fa ff46 	bl	80238c4 <lfs_min>
 8028a38:	6038      	str	r0, [r7, #0]
    nsize = size;
 8028a3a:	683b      	ldr	r3, [r7, #0]
 8028a3c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 8028a3e:	e0a5      	b.n	8028b8c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8028a40:	68bb      	ldr	r3, [r7, #8]
 8028a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028a48:	2b00      	cmp	r3, #0
 8028a4a:	d006      	beq.n	8028a5a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8028a4c:	68bb      	ldr	r3, [r7, #8]
 8028a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028a50:	68fb      	ldr	r3, [r7, #12]
 8028a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a54:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028a56:	429a      	cmp	r2, r3
 8028a58:	d130      	bne.n	8028abc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8028a5a:	68bb      	ldr	r3, [r7, #8]
 8028a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028a62:	2b00      	cmp	r3, #0
 8028a64:	d11c      	bne.n	8028aa0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028a66:	68bb      	ldr	r3, [r7, #8]
 8028a68:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8028a6c:	68bb      	ldr	r3, [r7, #8]
 8028a6e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028a70:	68bb      	ldr	r3, [r7, #8]
 8028a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028a74:	68ba      	ldr	r2, [r7, #8]
 8028a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028a78:	68b9      	ldr	r1, [r7, #8]
 8028a7a:	3138      	adds	r1, #56	; 0x38
 8028a7c:	68b8      	ldr	r0, [r7, #8]
 8028a7e:	303c      	adds	r0, #60	; 0x3c
 8028a80:	9003      	str	r0, [sp, #12]
 8028a82:	9102      	str	r1, [sp, #8]
 8028a84:	9201      	str	r2, [sp, #4]
 8028a86:	9300      	str	r3, [sp, #0]
 8028a88:	462b      	mov	r3, r5
 8028a8a:	4622      	mov	r2, r4
 8028a8c:	2100      	movs	r1, #0
 8028a8e:	68f8      	ldr	r0, [r7, #12]
 8028a90:	f7ff f97c 	bl	8027d8c <lfs_ctz_find>
 8028a94:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8028a96:	69fb      	ldr	r3, [r7, #28]
 8028a98:	2b00      	cmp	r3, #0
 8028a9a:	d009      	beq.n	8028ab0 <lfs_file_flushedread+0xb0>
                    return err;
 8028a9c:	69fb      	ldr	r3, [r7, #28]
 8028a9e:	e07a      	b.n	8028b96 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028aa0:	68bb      	ldr	r3, [r7, #8]
 8028aa2:	f06f 0201 	mvn.w	r2, #1
 8028aa6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028aa8:	68bb      	ldr	r3, [r7, #8]
 8028aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028aac:	68bb      	ldr	r3, [r7, #8]
 8028aae:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8028ab0:	68bb      	ldr	r3, [r7, #8]
 8028ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ab4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8028ab8:	68bb      	ldr	r3, [r7, #8]
 8028aba:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028abc:	68fb      	ldr	r3, [r7, #12]
 8028abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028ac0:	69da      	ldr	r2, [r3, #28]
 8028ac2:	68bb      	ldr	r3, [r7, #8]
 8028ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028ac6:	1ad3      	subs	r3, r2, r3
 8028ac8:	4619      	mov	r1, r3
 8028aca:	6a38      	ldr	r0, [r7, #32]
 8028acc:	f7fa fefa 	bl	80238c4 <lfs_min>
 8028ad0:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8028ad2:	68bb      	ldr	r3, [r7, #8]
 8028ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028ada:	2b00      	cmp	r3, #0
 8028adc:	d026      	beq.n	8028b2c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8028ade:	68bb      	ldr	r3, [r7, #8]
 8028ae0:	f103 0408 	add.w	r4, r3, #8
 8028ae4:	68bb      	ldr	r3, [r7, #8]
 8028ae6:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028aea:	68fb      	ldr	r3, [r7, #12]
 8028aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028aee:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028af0:	68bb      	ldr	r3, [r7, #8]
 8028af2:	889b      	ldrh	r3, [r3, #4]
 8028af4:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8028af6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028afe:	68b9      	ldr	r1, [r7, #8]
 8028b00:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8028b02:	69b8      	ldr	r0, [r7, #24]
 8028b04:	9005      	str	r0, [sp, #20]
 8028b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8028b08:	9004      	str	r0, [sp, #16]
 8028b0a:	9103      	str	r1, [sp, #12]
 8028b0c:	9302      	str	r3, [sp, #8]
 8028b0e:	4b24      	ldr	r3, [pc, #144]	; (8028ba0 <lfs_file_flushedread+0x1a0>)
 8028b10:	9301      	str	r3, [sp, #4]
 8028b12:	9200      	str	r2, [sp, #0]
 8028b14:	462b      	mov	r3, r5
 8028b16:	2200      	movs	r2, #0
 8028b18:	4621      	mov	r1, r4
 8028b1a:	68f8      	ldr	r0, [r7, #12]
 8028b1c:	f7fb ffed 	bl	8024afa <lfs_dir_getread>
 8028b20:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8028b22:	693b      	ldr	r3, [r7, #16]
 8028b24:	2b00      	cmp	r3, #0
 8028b26:	d01d      	beq.n	8028b64 <lfs_file_flushedread+0x164>
                return err;
 8028b28:	693b      	ldr	r3, [r7, #16]
 8028b2a:	e034      	b.n	8028b96 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8028b2c:	68bb      	ldr	r3, [r7, #8]
 8028b2e:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028b32:	68fb      	ldr	r3, [r7, #12]
 8028b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028b36:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8028b38:	68bb      	ldr	r3, [r7, #8]
 8028b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028b3c:	68ba      	ldr	r2, [r7, #8]
 8028b3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028b40:	69b9      	ldr	r1, [r7, #24]
 8028b42:	9103      	str	r1, [sp, #12]
 8028b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028b46:	9102      	str	r1, [sp, #8]
 8028b48:	9201      	str	r2, [sp, #4]
 8028b4a:	9300      	str	r3, [sp, #0]
 8028b4c:	4623      	mov	r3, r4
 8028b4e:	4602      	mov	r2, r0
 8028b50:	2100      	movs	r1, #0
 8028b52:	68f8      	ldr	r0, [r7, #12]
 8028b54:	f7fa ff92 	bl	8023a7c <lfs_bd_read>
 8028b58:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028b5a:	697b      	ldr	r3, [r7, #20]
 8028b5c:	2b00      	cmp	r3, #0
 8028b5e:	d001      	beq.n	8028b64 <lfs_file_flushedread+0x164>
                return err;
 8028b60:	697b      	ldr	r3, [r7, #20]
 8028b62:	e018      	b.n	8028b96 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8028b64:	68bb      	ldr	r3, [r7, #8]
 8028b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028b68:	69bb      	ldr	r3, [r7, #24]
 8028b6a:	441a      	add	r2, r3
 8028b6c:	68bb      	ldr	r3, [r7, #8]
 8028b6e:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028b70:	68bb      	ldr	r3, [r7, #8]
 8028b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028b74:	69bb      	ldr	r3, [r7, #24]
 8028b76:	441a      	add	r2, r3
 8028b78:	68bb      	ldr	r3, [r7, #8]
 8028b7a:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028b7e:	69bb      	ldr	r3, [r7, #24]
 8028b80:	4413      	add	r3, r2
 8028b82:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8028b84:	6a3a      	ldr	r2, [r7, #32]
 8028b86:	69bb      	ldr	r3, [r7, #24]
 8028b88:	1ad3      	subs	r3, r2, r3
 8028b8a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8028b8c:	6a3b      	ldr	r3, [r7, #32]
 8028b8e:	2b00      	cmp	r3, #0
 8028b90:	f47f af56 	bne.w	8028a40 <lfs_file_flushedread+0x40>
    }

    return size;
 8028b94:	683b      	ldr	r3, [r7, #0]
}
 8028b96:	4618      	mov	r0, r3
 8028b98:	3728      	adds	r7, #40	; 0x28
 8028b9a:	46bd      	mov	sp, r7
 8028b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8028b9e:	bf00      	nop
 8028ba0:	fff7fc00 	.word	0xfff7fc00

08028ba4 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028ba4:	b580      	push	{r7, lr}
 8028ba6:	b086      	sub	sp, #24
 8028ba8:	af00      	add	r7, sp, #0
 8028baa:	60f8      	str	r0, [r7, #12]
 8028bac:	60b9      	str	r1, [r7, #8]
 8028bae:	607a      	str	r2, [r7, #4]
 8028bb0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8028bb2:	68bb      	ldr	r3, [r7, #8]
 8028bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bb6:	f003 0301 	and.w	r3, r3, #1
 8028bba:	2b00      	cmp	r3, #0
 8028bbc:	d106      	bne.n	8028bcc <lfs_file_rawread+0x28>
 8028bbe:	4b11      	ldr	r3, [pc, #68]	; (8028c04 <lfs_file_rawread+0x60>)
 8028bc0:	4a11      	ldr	r2, [pc, #68]	; (8028c08 <lfs_file_rawread+0x64>)
 8028bc2:	f640 41ea 	movw	r1, #3306	; 0xcea
 8028bc6:	4811      	ldr	r0, [pc, #68]	; (8028c0c <lfs_file_rawread+0x68>)
 8028bc8:	f003 fdc0 	bl	802c74c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028bcc:	68bb      	ldr	r3, [r7, #8]
 8028bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028bd4:	2b00      	cmp	r3, #0
 8028bd6:	d009      	beq.n	8028bec <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8028bd8:	68b9      	ldr	r1, [r7, #8]
 8028bda:	68f8      	ldr	r0, [r7, #12]
 8028bdc:	f7ff fdb0 	bl	8028740 <lfs_file_flush>
 8028be0:	6178      	str	r0, [r7, #20]
        if (err) {
 8028be2:	697b      	ldr	r3, [r7, #20]
 8028be4:	2b00      	cmp	r3, #0
 8028be6:	d001      	beq.n	8028bec <lfs_file_rawread+0x48>
            return err;
 8028be8:	697b      	ldr	r3, [r7, #20]
 8028bea:	e006      	b.n	8028bfa <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8028bec:	683b      	ldr	r3, [r7, #0]
 8028bee:	687a      	ldr	r2, [r7, #4]
 8028bf0:	68b9      	ldr	r1, [r7, #8]
 8028bf2:	68f8      	ldr	r0, [r7, #12]
 8028bf4:	f7ff ff04 	bl	8028a00 <lfs_file_flushedread>
 8028bf8:	4603      	mov	r3, r0
}
 8028bfa:	4618      	mov	r0, r3
 8028bfc:	3718      	adds	r7, #24
 8028bfe:	46bd      	mov	sp, r7
 8028c00:	bd80      	pop	{r7, pc}
 8028c02:	bf00      	nop
 8028c04:	08033b7c 	.word	0x08033b7c
 8028c08:	08034b90 	.word	0x08034b90
 8028c0c:	08033840 	.word	0x08033840

08028c10 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028c10:	b5b0      	push	{r4, r5, r7, lr}
 8028c12:	b090      	sub	sp, #64	; 0x40
 8028c14:	af04      	add	r7, sp, #16
 8028c16:	60f8      	str	r0, [r7, #12]
 8028c18:	60b9      	str	r1, [r7, #8]
 8028c1a:	607a      	str	r2, [r7, #4]
 8028c1c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8028c1e:	687b      	ldr	r3, [r7, #4]
 8028c20:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8028c22:	683b      	ldr	r3, [r7, #0]
 8028c24:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8028c26:	68bb      	ldr	r3, [r7, #8]
 8028c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028c2e:	2b00      	cmp	r3, #0
 8028c30:	f000 810c 	beq.w	8028e4c <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8028c34:	68bb      	ldr	r3, [r7, #8]
 8028c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028c3a:	441a      	add	r2, r3
 8028c3c:	68bb      	ldr	r3, [r7, #8]
 8028c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028c40:	4619      	mov	r1, r3
 8028c42:	4610      	mov	r0, r2
 8028c44:	f7fa fe2e 	bl	80238a4 <lfs_max>
 8028c48:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8028c4a:	68fb      	ldr	r3, [r7, #12]
 8028c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8028c50:	68fb      	ldr	r3, [r7, #12]
 8028c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028c56:	2b00      	cmp	r3, #0
 8028c58:	d004      	beq.n	8028c64 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028c5a:	68fb      	ldr	r3, [r7, #12]
 8028c5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028c60:	08db      	lsrs	r3, r3, #3
 8028c62:	e003      	b.n	8028c6c <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028c64:	68fb      	ldr	r3, [r7, #12]
 8028c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c68:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8028c6a:	08db      	lsrs	r3, r3, #3
 8028c6c:	4619      	mov	r1, r3
 8028c6e:	4610      	mov	r0, r2
 8028c70:	f7fa fe28 	bl	80238c4 <lfs_min>
 8028c74:	4603      	mov	r3, r0
 8028c76:	4619      	mov	r1, r3
 8028c78:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8028c7c:	f7fa fe22 	bl	80238c4 <lfs_min>
 8028c80:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028c82:	429c      	cmp	r4, r3
 8028c84:	f240 80e2 	bls.w	8028e4c <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028c88:	68b9      	ldr	r1, [r7, #8]
 8028c8a:	68f8      	ldr	r0, [r7, #12]
 8028c8c:	f7ff fd36 	bl	80286fc <lfs_file_outline>
 8028c90:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028c94:	2b00      	cmp	r3, #0
 8028c96:	f000 80d9 	beq.w	8028e4c <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8028c9a:	68bb      	ldr	r3, [r7, #8]
 8028c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028ca2:	68bb      	ldr	r3, [r7, #8]
 8028ca4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ca8:	e0d5      	b.n	8028e56 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8028caa:	68bb      	ldr	r3, [r7, #8]
 8028cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028cb2:	2b00      	cmp	r3, #0
 8028cb4:	d006      	beq.n	8028cc4 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8028cb6:	68bb      	ldr	r3, [r7, #8]
 8028cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028cba:	68fb      	ldr	r3, [r7, #12]
 8028cbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028cbe:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8028cc0:	429a      	cmp	r2, r3
 8028cc2:	d16b      	bne.n	8028d9c <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8028cc4:	68bb      	ldr	r3, [r7, #8]
 8028cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028ccc:	2b00      	cmp	r3, #0
 8028cce:	d157      	bne.n	8028d80 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8028cd0:	68bb      	ldr	r3, [r7, #8]
 8028cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028cd8:	2b00      	cmp	r3, #0
 8028cda:	d12d      	bne.n	8028d38 <lfs_file_flushedwrite+0x128>
 8028cdc:	68bb      	ldr	r3, [r7, #8]
 8028cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	d029      	beq.n	8028d38 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028ce4:	68bb      	ldr	r3, [r7, #8]
 8028ce6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8028cea:	68bb      	ldr	r3, [r7, #8]
 8028cec:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028cee:	68bb      	ldr	r3, [r7, #8]
 8028cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8028cf2:	68ba      	ldr	r2, [r7, #8]
 8028cf4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028cf6:	3a01      	subs	r2, #1
 8028cf8:	68b9      	ldr	r1, [r7, #8]
 8028cfa:	3138      	adds	r1, #56	; 0x38
 8028cfc:	68b8      	ldr	r0, [r7, #8]
 8028cfe:	303c      	adds	r0, #60	; 0x3c
 8028d00:	9003      	str	r0, [sp, #12]
 8028d02:	9102      	str	r1, [sp, #8]
 8028d04:	9201      	str	r2, [sp, #4]
 8028d06:	9300      	str	r3, [sp, #0]
 8028d08:	462b      	mov	r3, r5
 8028d0a:	4622      	mov	r2, r4
 8028d0c:	2100      	movs	r1, #0
 8028d0e:	68f8      	ldr	r0, [r7, #12]
 8028d10:	f7ff f83c 	bl	8027d8c <lfs_ctz_find>
 8028d14:	6238      	str	r0, [r7, #32]
                    if (err) {
 8028d16:	6a3b      	ldr	r3, [r7, #32]
 8028d18:	2b00      	cmp	r3, #0
 8028d1a:	d007      	beq.n	8028d2c <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8028d1c:	68bb      	ldr	r3, [r7, #8]
 8028d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d20:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028d24:	68bb      	ldr	r3, [r7, #8]
 8028d26:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8028d28:	6a3b      	ldr	r3, [r7, #32]
 8028d2a:	e094      	b.n	8028e56 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8028d2c:	68bb      	ldr	r3, [r7, #8]
 8028d2e:	3340      	adds	r3, #64	; 0x40
 8028d30:	4619      	mov	r1, r3
 8028d32:	68f8      	ldr	r0, [r7, #12]
 8028d34:	f7fa fe8b 	bl	8023a4e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8028d38:	68f8      	ldr	r0, [r7, #12]
 8028d3a:	f7fb fd09 	bl	8024750 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8028d3e:	68bb      	ldr	r3, [r7, #8]
 8028d40:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028d44:	68fc      	ldr	r4, [r7, #12]
 8028d46:	68bb      	ldr	r3, [r7, #8]
 8028d48:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8028d4a:	68bb      	ldr	r3, [r7, #8]
 8028d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028d4e:	68ba      	ldr	r2, [r7, #8]
 8028d50:	3238      	adds	r2, #56	; 0x38
 8028d52:	68b9      	ldr	r1, [r7, #8]
 8028d54:	313c      	adds	r1, #60	; 0x3c
 8028d56:	9102      	str	r1, [sp, #8]
 8028d58:	9201      	str	r2, [sp, #4]
 8028d5a:	9300      	str	r3, [sp, #0]
 8028d5c:	462b      	mov	r3, r5
 8028d5e:	4622      	mov	r2, r4
 8028d60:	4601      	mov	r1, r0
 8028d62:	68f8      	ldr	r0, [r7, #12]
 8028d64:	f7ff f87e 	bl	8027e64 <lfs_ctz_extend>
 8028d68:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8028d6a:	69fb      	ldr	r3, [r7, #28]
 8028d6c:	2b00      	cmp	r3, #0
 8028d6e:	d00f      	beq.n	8028d90 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028d70:	68bb      	ldr	r3, [r7, #8]
 8028d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d74:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028d78:	68bb      	ldr	r3, [r7, #8]
 8028d7a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8028d7c:	69fb      	ldr	r3, [r7, #28]
 8028d7e:	e06a      	b.n	8028e56 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028d80:	68bb      	ldr	r3, [r7, #8]
 8028d82:	f06f 0201 	mvn.w	r2, #1
 8028d86:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028d88:	68bb      	ldr	r3, [r7, #8]
 8028d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028d8c:	68bb      	ldr	r3, [r7, #8]
 8028d8e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8028d90:	68bb      	ldr	r3, [r7, #8]
 8028d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d94:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028d98:	68bb      	ldr	r3, [r7, #8]
 8028d9a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028d9c:	68fb      	ldr	r3, [r7, #12]
 8028d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028da0:	69da      	ldr	r2, [r3, #28]
 8028da2:	68bb      	ldr	r3, [r7, #8]
 8028da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028da6:	1ad3      	subs	r3, r2, r3
 8028da8:	4619      	mov	r1, r3
 8028daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028dac:	f7fa fd8a 	bl	80238c4 <lfs_min>
 8028db0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8028db2:	68bb      	ldr	r3, [r7, #8]
 8028db4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028db8:	68fc      	ldr	r4, [r7, #12]
 8028dba:	68bb      	ldr	r3, [r7, #8]
 8028dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028dbe:	68ba      	ldr	r2, [r7, #8]
 8028dc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028dc2:	69b9      	ldr	r1, [r7, #24]
 8028dc4:	9103      	str	r1, [sp, #12]
 8028dc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028dc8:	9102      	str	r1, [sp, #8]
 8028dca:	9201      	str	r2, [sp, #4]
 8028dcc:	9300      	str	r3, [sp, #0]
 8028dce:	2301      	movs	r3, #1
 8028dd0:	4622      	mov	r2, r4
 8028dd2:	4601      	mov	r1, r0
 8028dd4:	68f8      	ldr	r0, [r7, #12]
 8028dd6:	f7fb f897 	bl	8023f08 <lfs_bd_prog>
 8028dda:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028ddc:	697b      	ldr	r3, [r7, #20]
 8028dde:	2b00      	cmp	r3, #0
 8028de0:	d01c      	beq.n	8028e1c <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8028de2:	697b      	ldr	r3, [r7, #20]
 8028de4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028de8:	d007      	beq.n	8028dfa <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8028dea:	68bb      	ldr	r3, [r7, #8]
 8028dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028dee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028df2:	68bb      	ldr	r3, [r7, #8]
 8028df4:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028df6:	697b      	ldr	r3, [r7, #20]
 8028df8:	e02d      	b.n	8028e56 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8028dfa:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8028dfc:	68b9      	ldr	r1, [r7, #8]
 8028dfe:	68f8      	ldr	r0, [r7, #12]
 8028e00:	f7ff fba2 	bl	8028548 <lfs_file_relocate>
 8028e04:	6178      	str	r0, [r7, #20]
            if (err) {
 8028e06:	697b      	ldr	r3, [r7, #20]
 8028e08:	2b00      	cmp	r3, #0
 8028e0a:	d0d2      	beq.n	8028db2 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8028e0c:	68bb      	ldr	r3, [r7, #8]
 8028e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e10:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028e14:	68bb      	ldr	r3, [r7, #8]
 8028e16:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028e18:	697b      	ldr	r3, [r7, #20]
 8028e1a:	e01c      	b.n	8028e56 <lfs_file_flushedwrite+0x246>
            break;
 8028e1c:	bf00      	nop
            }
        }

        file->pos += diff;
 8028e1e:	68bb      	ldr	r3, [r7, #8]
 8028e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028e22:	69bb      	ldr	r3, [r7, #24]
 8028e24:	441a      	add	r2, r3
 8028e26:	68bb      	ldr	r3, [r7, #8]
 8028e28:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028e2a:	68bb      	ldr	r3, [r7, #8]
 8028e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028e2e:	69bb      	ldr	r3, [r7, #24]
 8028e30:	441a      	add	r2, r3
 8028e32:	68bb      	ldr	r3, [r7, #8]
 8028e34:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028e38:	69bb      	ldr	r3, [r7, #24]
 8028e3a:	4413      	add	r3, r2
 8028e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8028e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028e40:	69bb      	ldr	r3, [r7, #24]
 8028e42:	1ad3      	subs	r3, r2, r3
 8028e44:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8028e46:	68f8      	ldr	r0, [r7, #12]
 8028e48:	f7fb fc82 	bl	8024750 <lfs_alloc_ack>
    while (nsize > 0) {
 8028e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028e4e:	2b00      	cmp	r3, #0
 8028e50:	f47f af2b 	bne.w	8028caa <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028e54:	683b      	ldr	r3, [r7, #0]
}
 8028e56:	4618      	mov	r0, r3
 8028e58:	3730      	adds	r7, #48	; 0x30
 8028e5a:	46bd      	mov	sp, r7
 8028e5c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028e60 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028e60:	b580      	push	{r7, lr}
 8028e62:	b08a      	sub	sp, #40	; 0x28
 8028e64:	af00      	add	r7, sp, #0
 8028e66:	60f8      	str	r0, [r7, #12]
 8028e68:	60b9      	str	r1, [r7, #8]
 8028e6a:	607a      	str	r2, [r7, #4]
 8028e6c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8028e6e:	68bb      	ldr	r3, [r7, #8]
 8028e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e72:	f003 0302 	and.w	r3, r3, #2
 8028e76:	2b00      	cmp	r3, #0
 8028e78:	d106      	bne.n	8028e88 <lfs_file_rawwrite+0x28>
 8028e7a:	4b38      	ldr	r3, [pc, #224]	; (8028f5c <lfs_file_rawwrite+0xfc>)
 8028e7c:	4a38      	ldr	r2, [pc, #224]	; (8028f60 <lfs_file_rawwrite+0x100>)
 8028e7e:	f640 5155 	movw	r1, #3413	; 0xd55
 8028e82:	4838      	ldr	r0, [pc, #224]	; (8028f64 <lfs_file_rawwrite+0x104>)
 8028e84:	f003 fc62 	bl	802c74c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028e88:	68bb      	ldr	r3, [r7, #8]
 8028e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028e90:	2b00      	cmp	r3, #0
 8028e92:	d009      	beq.n	8028ea8 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028e94:	68b9      	ldr	r1, [r7, #8]
 8028e96:	68f8      	ldr	r0, [r7, #12]
 8028e98:	f7ff fc52 	bl	8028740 <lfs_file_flush>
 8028e9c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ea0:	2b00      	cmp	r3, #0
 8028ea2:	d001      	beq.n	8028ea8 <lfs_file_rawwrite+0x48>
            return err;
 8028ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ea6:	e055      	b.n	8028f54 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028ea8:	68bb      	ldr	r3, [r7, #8]
 8028eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028eb0:	2b00      	cmp	r3, #0
 8028eb2:	d009      	beq.n	8028ec8 <lfs_file_rawwrite+0x68>
 8028eb4:	68bb      	ldr	r3, [r7, #8]
 8028eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028eb8:	68bb      	ldr	r3, [r7, #8]
 8028eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ebc:	429a      	cmp	r2, r3
 8028ebe:	d203      	bcs.n	8028ec8 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028ec0:	68bb      	ldr	r3, [r7, #8]
 8028ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028ec4:	68bb      	ldr	r3, [r7, #8]
 8028ec6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028ec8:	68bb      	ldr	r3, [r7, #8]
 8028eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028ecc:	683b      	ldr	r3, [r7, #0]
 8028ece:	441a      	add	r2, r3
 8028ed0:	68fb      	ldr	r3, [r7, #12]
 8028ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ed4:	429a      	cmp	r2, r3
 8028ed6:	d902      	bls.n	8028ede <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028ed8:	f06f 031a 	mvn.w	r3, #26
 8028edc:	e03a      	b.n	8028f54 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8028ede:	68bb      	ldr	r3, [r7, #8]
 8028ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028ee6:	2b00      	cmp	r3, #0
 8028ee8:	d121      	bne.n	8028f2e <lfs_file_rawwrite+0xce>
 8028eea:	68bb      	ldr	r3, [r7, #8]
 8028eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028eee:	68bb      	ldr	r3, [r7, #8]
 8028ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ef2:	429a      	cmp	r2, r3
 8028ef4:	d91b      	bls.n	8028f2e <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8028ef6:	68bb      	ldr	r3, [r7, #8]
 8028ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028efa:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8028efc:	68bb      	ldr	r3, [r7, #8]
 8028efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028f00:	68bb      	ldr	r3, [r7, #8]
 8028f02:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8028f04:	e00e      	b.n	8028f24 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8028f06:	2300      	movs	r3, #0
 8028f08:	75fb      	strb	r3, [r7, #23]
 8028f0a:	f107 0217 	add.w	r2, r7, #23
 8028f0e:	2301      	movs	r3, #1
 8028f10:	68b9      	ldr	r1, [r7, #8]
 8028f12:	68f8      	ldr	r0, [r7, #12]
 8028f14:	f7ff fe7c 	bl	8028c10 <lfs_file_flushedwrite>
 8028f18:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8028f1a:	69fb      	ldr	r3, [r7, #28]
 8028f1c:	2b00      	cmp	r3, #0
 8028f1e:	da01      	bge.n	8028f24 <lfs_file_rawwrite+0xc4>
                return res;
 8028f20:	69fb      	ldr	r3, [r7, #28]
 8028f22:	e017      	b.n	8028f54 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8028f24:	68bb      	ldr	r3, [r7, #8]
 8028f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028f28:	6a3a      	ldr	r2, [r7, #32]
 8028f2a:	429a      	cmp	r2, r3
 8028f2c:	d8eb      	bhi.n	8028f06 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8028f2e:	683b      	ldr	r3, [r7, #0]
 8028f30:	687a      	ldr	r2, [r7, #4]
 8028f32:	68b9      	ldr	r1, [r7, #8]
 8028f34:	68f8      	ldr	r0, [r7, #12]
 8028f36:	f7ff fe6b 	bl	8028c10 <lfs_file_flushedwrite>
 8028f3a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8028f3c:	69bb      	ldr	r3, [r7, #24]
 8028f3e:	2b00      	cmp	r3, #0
 8028f40:	da01      	bge.n	8028f46 <lfs_file_rawwrite+0xe6>
        return nsize;
 8028f42:	69bb      	ldr	r3, [r7, #24]
 8028f44:	e006      	b.n	8028f54 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8028f46:	68bb      	ldr	r3, [r7, #8]
 8028f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f4a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8028f4e:	68bb      	ldr	r3, [r7, #8]
 8028f50:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8028f52:	69bb      	ldr	r3, [r7, #24]
}
 8028f54:	4618      	mov	r0, r3
 8028f56:	3728      	adds	r7, #40	; 0x28
 8028f58:	46bd      	mov	sp, r7
 8028f5a:	bd80      	pop	{r7, pc}
 8028f5c:	08033bac 	.word	0x08033bac
 8028f60:	08034ba4 	.word	0x08034ba4
 8028f64:	08033840 	.word	0x08033840

08028f68 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8028f68:	b580      	push	{r7, lr}
 8028f6a:	b08c      	sub	sp, #48	; 0x30
 8028f6c:	af00      	add	r7, sp, #0
 8028f6e:	60f8      	str	r0, [r7, #12]
 8028f70:	60b9      	str	r1, [r7, #8]
 8028f72:	607a      	str	r2, [r7, #4]
 8028f74:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8028f76:	68bb      	ldr	r3, [r7, #8]
 8028f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8028f7c:	683b      	ldr	r3, [r7, #0]
 8028f7e:	2b00      	cmp	r3, #0
 8028f80:	d102      	bne.n	8028f88 <lfs_file_rawseek+0x20>
        npos = off;
 8028f82:	687b      	ldr	r3, [r7, #4]
 8028f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028f86:	e025      	b.n	8028fd4 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8028f88:	683b      	ldr	r3, [r7, #0]
 8028f8a:	2b01      	cmp	r3, #1
 8028f8c:	d10f      	bne.n	8028fae <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8028f8e:	68bb      	ldr	r3, [r7, #8]
 8028f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028f92:	461a      	mov	r2, r3
 8028f94:	687b      	ldr	r3, [r7, #4]
 8028f96:	4413      	add	r3, r2
 8028f98:	2b00      	cmp	r3, #0
 8028f9a:	da02      	bge.n	8028fa2 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8028f9c:	f06f 0315 	mvn.w	r3, #21
 8028fa0:	e067      	b.n	8029072 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8028fa2:	68bb      	ldr	r3, [r7, #8]
 8028fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028fa6:	687b      	ldr	r3, [r7, #4]
 8028fa8:	4413      	add	r3, r2
 8028faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028fac:	e012      	b.n	8028fd4 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8028fae:	683b      	ldr	r3, [r7, #0]
 8028fb0:	2b02      	cmp	r3, #2
 8028fb2:	d10f      	bne.n	8028fd4 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8028fb4:	68b9      	ldr	r1, [r7, #8]
 8028fb6:	68f8      	ldr	r0, [r7, #12]
 8028fb8:	f000 f85f 	bl	802907a <lfs_file_rawsize>
 8028fbc:	4602      	mov	r2, r0
 8028fbe:	687b      	ldr	r3, [r7, #4]
 8028fc0:	4413      	add	r3, r2
 8028fc2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8028fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fc6:	2b00      	cmp	r3, #0
 8028fc8:	da02      	bge.n	8028fd0 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8028fca:	f06f 0315 	mvn.w	r3, #21
 8028fce:	e050      	b.n	8029072 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8028fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8028fd4:	68fb      	ldr	r3, [r7, #12]
 8028fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028fda:	429a      	cmp	r2, r3
 8028fdc:	d902      	bls.n	8028fe4 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8028fde:	f06f 0315 	mvn.w	r3, #21
 8028fe2:	e046      	b.n	8029072 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8028fe4:	68bb      	ldr	r3, [r7, #8]
 8028fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028fea:	429a      	cmp	r2, r3
 8028fec:	d101      	bne.n	8028ff2 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8028fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028ff0:	e03f      	b.n	8029072 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8028ff2:	68bb      	ldr	r3, [r7, #8]
 8028ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8028ffa:	2b00      	cmp	r3, #0
 8028ffc:	d12b      	bne.n	8029056 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8028ffe:	68bb      	ldr	r3, [r7, #8]
 8029000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029002:	61bb      	str	r3, [r7, #24]
 8029004:	f107 0318 	add.w	r3, r7, #24
 8029008:	4619      	mov	r1, r3
 802900a:	68f8      	ldr	r0, [r7, #12]
 802900c:	f7fe fe86 	bl	8027d1c <lfs_ctz_index>
 8029010:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8029012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029014:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8029016:	f107 0314 	add.w	r3, r7, #20
 802901a:	4619      	mov	r1, r3
 802901c:	68f8      	ldr	r0, [r7, #12]
 802901e:	f7fe fe7d 	bl	8027d1c <lfs_ctz_index>
 8029022:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8029024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029026:	6a3b      	ldr	r3, [r7, #32]
 8029028:	429a      	cmp	r2, r3
 802902a:	d114      	bne.n	8029056 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 802902c:	68bb      	ldr	r3, [r7, #8]
 802902e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029030:	697b      	ldr	r3, [r7, #20]
 8029032:	429a      	cmp	r2, r3
 8029034:	d80f      	bhi.n	8029056 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8029036:	68bb      	ldr	r3, [r7, #8]
 8029038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802903a:	68bb      	ldr	r3, [r7, #8]
 802903c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802903e:	441a      	add	r2, r3
 8029040:	697b      	ldr	r3, [r7, #20]
 8029042:	429a      	cmp	r2, r3
 8029044:	d907      	bls.n	8029056 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8029046:	68bb      	ldr	r3, [r7, #8]
 8029048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802904a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 802904c:	697a      	ldr	r2, [r7, #20]
 802904e:	68bb      	ldr	r3, [r7, #8]
 8029050:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8029052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029054:	e00d      	b.n	8029072 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8029056:	68b9      	ldr	r1, [r7, #8]
 8029058:	68f8      	ldr	r0, [r7, #12]
 802905a:	f7ff fb71 	bl	8028740 <lfs_file_flush>
 802905e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8029060:	69fb      	ldr	r3, [r7, #28]
 8029062:	2b00      	cmp	r3, #0
 8029064:	d001      	beq.n	802906a <lfs_file_rawseek+0x102>
        return err;
 8029066:	69fb      	ldr	r3, [r7, #28]
 8029068:	e003      	b.n	8029072 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 802906a:	68bb      	ldr	r3, [r7, #8]
 802906c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802906e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8029070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8029072:	4618      	mov	r0, r3
 8029074:	3730      	adds	r7, #48	; 0x30
 8029076:	46bd      	mov	sp, r7
 8029078:	bd80      	pop	{r7, pc}

0802907a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 802907a:	b580      	push	{r7, lr}
 802907c:	b082      	sub	sp, #8
 802907e:	af00      	add	r7, sp, #0
 8029080:	6078      	str	r0, [r7, #4]
 8029082:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8029084:	683b      	ldr	r3, [r7, #0]
 8029086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802908c:	2b00      	cmp	r3, #0
 802908e:	d009      	beq.n	80290a4 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8029090:	683b      	ldr	r3, [r7, #0]
 8029092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029094:	683b      	ldr	r3, [r7, #0]
 8029096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029098:	4619      	mov	r1, r3
 802909a:	4610      	mov	r0, r2
 802909c:	f7fa fc02 	bl	80238a4 <lfs_max>
 80290a0:	4603      	mov	r3, r0
 80290a2:	e001      	b.n	80290a8 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 80290a4:	683b      	ldr	r3, [r7, #0]
 80290a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80290a8:	4618      	mov	r0, r3
 80290aa:	3708      	adds	r7, #8
 80290ac:	46bd      	mov	sp, r7
 80290ae:	bd80      	pop	{r7, pc}

080290b0 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 80290b0:	b580      	push	{r7, lr}
 80290b2:	b08e      	sub	sp, #56	; 0x38
 80290b4:	af00      	add	r7, sp, #0
 80290b6:	60f8      	str	r0, [r7, #12]
 80290b8:	60b9      	str	r1, [r7, #8]
 80290ba:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80290bc:	f107 0208 	add.w	r2, r7, #8
 80290c0:	f107 0114 	add.w	r1, r7, #20
 80290c4:	2300      	movs	r3, #0
 80290c6:	68f8      	ldr	r0, [r7, #12]
 80290c8:	f7fc feae 	bl	8025e28 <lfs_dir_find>
 80290cc:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 80290ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80290d0:	2b00      	cmp	r3, #0
 80290d2:	da01      	bge.n	80290d8 <lfs_rawstat+0x28>
        return (int)tag;
 80290d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80290d6:	e00c      	b.n	80290f2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 80290d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80290da:	4618      	mov	r0, r3
 80290dc:	f7fb f908 	bl	80242f0 <lfs_tag_id>
 80290e0:	4603      	mov	r3, r0
 80290e2:	461a      	mov	r2, r3
 80290e4:	f107 0114 	add.w	r1, r7, #20
 80290e8:	687b      	ldr	r3, [r7, #4]
 80290ea:	68f8      	ldr	r0, [r7, #12]
 80290ec:	f7fc fdd8 	bl	8025ca0 <lfs_dir_getinfo>
 80290f0:	4603      	mov	r3, r0
}
 80290f2:	4618      	mov	r0, r3
 80290f4:	3738      	adds	r7, #56	; 0x38
 80290f6:	46bd      	mov	sp, r7
 80290f8:	bd80      	pop	{r7, pc}
	...

080290fc <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 80290fc:	b580      	push	{r7, lr}
 80290fe:	b0a0      	sub	sp, #128	; 0x80
 8029100:	af02      	add	r7, sp, #8
 8029102:	6078      	str	r0, [r7, #4]
 8029104:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8029106:	6878      	ldr	r0, [r7, #4]
 8029108:	f001 fba2 	bl	802a850 <lfs_fs_forceconsistency>
 802910c:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 802910e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029110:	2b00      	cmp	r3, #0
 8029112:	d001      	beq.n	8029118 <lfs_rawremove+0x1c>
        return err;
 8029114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029116:	e0c4      	b.n	80292a2 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8029118:	463a      	mov	r2, r7
 802911a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802911e:	2300      	movs	r3, #0
 8029120:	6878      	ldr	r0, [r7, #4]
 8029122:	f7fc fe81 	bl	8025e28 <lfs_dir_find>
 8029126:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8029128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802912a:	2b00      	cmp	r3, #0
 802912c:	db09      	blt.n	8029142 <lfs_rawremove+0x46>
 802912e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029130:	4618      	mov	r0, r3
 8029132:	f7fb f8dd 	bl	80242f0 <lfs_tag_id>
 8029136:	4603      	mov	r3, r0
 8029138:	461a      	mov	r2, r3
 802913a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802913e:	429a      	cmp	r2, r3
 8029140:	d107      	bne.n	8029152 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8029142:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029144:	2b00      	cmp	r3, #0
 8029146:	da01      	bge.n	802914c <lfs_rawremove+0x50>
 8029148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802914a:	e0aa      	b.n	80292a2 <lfs_rawremove+0x1a6>
 802914c:	f06f 0315 	mvn.w	r3, #21
 8029150:	e0a7      	b.n	80292a2 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8029152:	687b      	ldr	r3, [r7, #4]
 8029154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029156:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8029158:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802915a:	4618      	mov	r0, r3
 802915c:	f7fb f89e 	bl	802429c <lfs_tag_type3>
 8029160:	4603      	mov	r3, r0
 8029162:	2b02      	cmp	r3, #2
 8029164:	d14a      	bne.n	80291fc <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8029166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029168:	4618      	mov	r0, r3
 802916a:	f7fb f8c1 	bl	80242f0 <lfs_tag_id>
 802916e:	4603      	mov	r3, r0
 8029170:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8029172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029176:	f043 0308 	orr.w	r3, r3, #8
 802917a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802917e:	f107 020c 	add.w	r2, r7, #12
 8029182:	9200      	str	r2, [sp, #0]
 8029184:	4a49      	ldr	r2, [pc, #292]	; (80292ac <lfs_rawremove+0x1b0>)
 8029186:	6878      	ldr	r0, [r7, #4]
 8029188:	f7fb fc9c 	bl	8024ac4 <lfs_dir_get>
 802918c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 802918e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8029190:	2b00      	cmp	r3, #0
 8029192:	da01      	bge.n	8029198 <lfs_rawremove+0x9c>
            return (int)res;
 8029194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8029196:	e084      	b.n	80292a2 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8029198:	f107 030c 	add.w	r3, r7, #12
 802919c:	4618      	mov	r0, r3
 802919e:	f7fb f818 	bl	80241d2 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 80291a2:	f107 020c 	add.w	r2, r7, #12
 80291a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80291aa:	3308      	adds	r3, #8
 80291ac:	4619      	mov	r1, r3
 80291ae:	6878      	ldr	r0, [r7, #4]
 80291b0:	f7fc fd28 	bl	8025c04 <lfs_dir_fetch>
 80291b4:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80291b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291b8:	2b00      	cmp	r3, #0
 80291ba:	d001      	beq.n	80291c0 <lfs_rawremove+0xc4>
            return err;
 80291bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291be:	e070      	b.n	80292a2 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 80291c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80291c4:	2b00      	cmp	r3, #0
 80291c6:	d103      	bne.n	80291d0 <lfs_rawremove+0xd4>
 80291c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80291cc:	2b00      	cmp	r3, #0
 80291ce:	d002      	beq.n	80291d6 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 80291d0:	f06f 0326 	mvn.w	r3, #38	; 0x26
 80291d4:	e065      	b.n	80292a2 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80291d6:	2101      	movs	r1, #1
 80291d8:	6878      	ldr	r0, [r7, #4]
 80291da:	f001 f8bb 	bl	802a354 <lfs_fs_preporphans>
 80291de:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80291e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291e2:	2b00      	cmp	r3, #0
 80291e4:	d001      	beq.n	80291ea <lfs_rawremove+0xee>
            return err;
 80291e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291e8:	e05b      	b.n	80292a2 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 80291ea:	2300      	movs	r3, #0
 80291ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 80291f0:	2300      	movs	r3, #0
 80291f2:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 80291f4:	687b      	ldr	r3, [r7, #4]
 80291f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80291fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 80291fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80291fe:	4618      	mov	r0, r3
 8029200:	f7fb f876 	bl	80242f0 <lfs_tag_id>
 8029204:	4603      	mov	r3, r0
 8029206:	029b      	lsls	r3, r3, #10
 8029208:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802920c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8029210:	61fb      	str	r3, [r7, #28]
 8029212:	2300      	movs	r3, #0
 8029214:	623b      	str	r3, [r7, #32]
 8029216:	f107 021c 	add.w	r2, r7, #28
 802921a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802921e:	2301      	movs	r3, #1
 8029220:	6878      	ldr	r0, [r7, #4]
 8029222:	f7fe fb09 	bl	8027838 <lfs_dir_commit>
 8029226:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8029228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802922a:	2b00      	cmp	r3, #0
 802922c:	d004      	beq.n	8029238 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 802922e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029230:	687b      	ldr	r3, [r7, #4]
 8029232:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8029234:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029236:	e034      	b.n	80292a2 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8029238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802923a:	687b      	ldr	r3, [r7, #4]
 802923c:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 802923e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029240:	4618      	mov	r0, r3
 8029242:	f7fb f82b 	bl	802429c <lfs_tag_type3>
 8029246:	4603      	mov	r3, r0
 8029248:	2b02      	cmp	r3, #2
 802924a:	d129      	bne.n	80292a0 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802924c:	f04f 31ff 	mov.w	r1, #4294967295
 8029250:	6878      	ldr	r0, [r7, #4]
 8029252:	f001 f87f 	bl	802a354 <lfs_fs_preporphans>
 8029256:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029258:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802925a:	2b00      	cmp	r3, #0
 802925c:	d001      	beq.n	8029262 <lfs_rawremove+0x166>
            return err;
 802925e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029260:	e01f      	b.n	80292a2 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8029262:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8029266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802926a:	3308      	adds	r3, #8
 802926c:	4619      	mov	r1, r3
 802926e:	6878      	ldr	r0, [r7, #4]
 8029270:	f000 ff90 	bl	802a194 <lfs_fs_pred>
 8029274:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029278:	2b00      	cmp	r3, #0
 802927a:	d001      	beq.n	8029280 <lfs_rawremove+0x184>
            return err;
 802927c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802927e:	e010      	b.n	80292a2 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8029280:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029284:	f103 0208 	add.w	r2, r3, #8
 8029288:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 802928c:	4619      	mov	r1, r3
 802928e:	6878      	ldr	r0, [r7, #4]
 8029290:	f7fd f930 	bl	80264f4 <lfs_dir_drop>
 8029294:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029298:	2b00      	cmp	r3, #0
 802929a:	d001      	beq.n	80292a0 <lfs_rawremove+0x1a4>
            return err;
 802929c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802929e:	e000      	b.n	80292a2 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 80292a0:	2300      	movs	r3, #0
}
 80292a2:	4618      	mov	r0, r3
 80292a4:	3778      	adds	r7, #120	; 0x78
 80292a6:	46bd      	mov	sp, r7
 80292a8:	bd80      	pop	{r7, pc}
 80292aa:	bf00      	nop
 80292ac:	700ffc00 	.word	0x700ffc00

080292b0 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 80292b0:	b590      	push	{r4, r7, lr}
 80292b2:	b0c3      	sub	sp, #268	; 0x10c
 80292b4:	af02      	add	r7, sp, #8
 80292b6:	60f8      	str	r0, [r7, #12]
 80292b8:	60b9      	str	r1, [r7, #8]
 80292ba:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80292bc:	68f8      	ldr	r0, [r7, #12]
 80292be:	f001 fac7 	bl	802a850 <lfs_fs_forceconsistency>
 80292c2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (err) {
 80292c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292ca:	2b00      	cmp	r3, #0
 80292cc:	d002      	beq.n	80292d4 <lfs_rawrename+0x24>
        return err;
 80292ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292d2:	e1f7      	b.n	80296c4 <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 80292d4:	f107 0208 	add.w	r2, r7, #8
 80292d8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80292dc:	2300      	movs	r3, #0
 80292de:	68f8      	ldr	r0, [r7, #12]
 80292e0:	f7fc fda2 	bl	8025e28 <lfs_dir_find>
 80292e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 80292e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80292ec:	2b00      	cmp	r3, #0
 80292ee:	db0a      	blt.n	8029306 <lfs_rawrename+0x56>
 80292f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80292f4:	4618      	mov	r0, r3
 80292f6:	f7fa fffb 	bl	80242f0 <lfs_tag_id>
 80292fa:	4603      	mov	r3, r0
 80292fc:	461a      	mov	r2, r3
 80292fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8029302:	429a      	cmp	r2, r3
 8029304:	d109      	bne.n	802931a <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8029306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802930a:	2b00      	cmp	r3, #0
 802930c:	da02      	bge.n	8029314 <lfs_rawrename+0x64>
 802930e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029312:	e1d7      	b.n	80296c4 <lfs_rawrename+0x414>
 8029314:	f06f 0315 	mvn.w	r3, #21
 8029318:	e1d4      	b.n	80296c4 <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 802931a:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 802931e:	1d3a      	adds	r2, r7, #4
 8029320:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029324:	68f8      	ldr	r0, [r7, #12]
 8029326:	f7fc fd7f 	bl	8025e28 <lfs_dir_find>
 802932a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 802932e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029332:	2b00      	cmp	r3, #0
 8029334:	db0a      	blt.n	802934c <lfs_rawrename+0x9c>
 8029336:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802933a:	4618      	mov	r0, r3
 802933c:	f7fa ffd8 	bl	80242f0 <lfs_tag_id>
 8029340:	4603      	mov	r3, r0
 8029342:	461a      	mov	r2, r3
 8029344:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8029348:	429a      	cmp	r2, r3
 802934a:	d114      	bne.n	8029376 <lfs_rawrename+0xc6>
 802934c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029350:	f113 0f02 	cmn.w	r3, #2
 8029354:	d105      	bne.n	8029362 <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8029356:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802935a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802935e:	4293      	cmp	r3, r2
 8029360:	d109      	bne.n	8029376 <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8029362:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029366:	2b00      	cmp	r3, #0
 8029368:	da02      	bge.n	8029370 <lfs_rawrename+0xc0>
 802936a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802936e:	e1a9      	b.n	80296c4 <lfs_rawrename+0x414>
 8029370:	f06f 0315 	mvn.w	r3, #21
 8029374:	e1a6      	b.n	80296c4 <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8029376:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802937a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 802937e:	4611      	mov	r1, r2
 8029380:	4618      	mov	r0, r3
 8029382:	f7fa fecf 	bl	8024124 <lfs_pair_cmp>
 8029386:	4603      	mov	r3, r0
 8029388:	2b00      	cmp	r3, #0
 802938a:	bf0c      	ite	eq
 802938c:	2301      	moveq	r3, #1
 802938e:	2300      	movne	r3, #0
 8029390:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8029394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029398:	4618      	mov	r0, r3
 802939a:	f7fa ffa9 	bl	80242f0 <lfs_tag_id>
 802939e:	4603      	mov	r3, r0
 80293a0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 80293a4:	68fb      	ldr	r3, [r7, #12]
 80293a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80293a8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (prevtag == LFS_ERR_NOENT) {
 80293aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80293ae:	f113 0f02 	cmn.w	r3, #2
 80293b2:	d11f      	bne.n	80293f4 <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 80293b4:	687b      	ldr	r3, [r7, #4]
 80293b6:	4618      	mov	r0, r3
 80293b8:	f7e6 ff72 	bl	80102a0 <strlen>
 80293bc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        if (nlen > lfs->name_max) {
 80293c0:	68fb      	ldr	r3, [r7, #12]
 80293c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80293c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80293c8:	429a      	cmp	r2, r3
 80293ca:	d902      	bls.n	80293d2 <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 80293cc:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80293d0:	e178      	b.n	80296c4 <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 80293d2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80293d6:	2b00      	cmp	r3, #0
 80293d8:	f000 8084 	beq.w	80294e4 <lfs_rawrename+0x234>
 80293dc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80293e0:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80293e4:	429a      	cmp	r2, r3
 80293e6:	d37d      	bcc.n	80294e4 <lfs_rawrename+0x234>
            newoldid += 1;
 80293e8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80293ec:	3301      	adds	r3, #1
 80293ee:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80293f2:	e077      	b.n	80294e4 <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 80293f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80293f8:	4618      	mov	r0, r3
 80293fa:	f7fa ff4f 	bl	802429c <lfs_tag_type3>
 80293fe:	4603      	mov	r3, r0
 8029400:	461c      	mov	r4, r3
 8029402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029406:	4618      	mov	r0, r3
 8029408:	f7fa ff48 	bl	802429c <lfs_tag_type3>
 802940c:	4603      	mov	r3, r0
 802940e:	429c      	cmp	r4, r3
 8029410:	d002      	beq.n	8029418 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 8029412:	f06f 0314 	mvn.w	r3, #20
 8029416:	e155      	b.n	80296c4 <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 8029418:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802941c:	2b00      	cmp	r3, #0
 802941e:	d007      	beq.n	8029430 <lfs_rawrename+0x180>
 8029420:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029424:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8029428:	429a      	cmp	r2, r3
 802942a:	d101      	bne.n	8029430 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 802942c:	2300      	movs	r3, #0
 802942e:	e149      	b.n	80296c4 <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8029430:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029434:	4618      	mov	r0, r3
 8029436:	f7fa ff31 	bl	802429c <lfs_tag_type3>
 802943a:	4603      	mov	r3, r0
 802943c:	2b02      	cmp	r3, #2
 802943e:	d151      	bne.n	80294e4 <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8029440:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029444:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8029446:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802944a:	f043 0308 	orr.w	r3, r3, #8
 802944e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029452:	f107 0220 	add.w	r2, r7, #32
 8029456:	9200      	str	r2, [sp, #0]
 8029458:	4a9d      	ldr	r2, [pc, #628]	; (80296d0 <lfs_rawrename+0x420>)
 802945a:	68f8      	ldr	r0, [r7, #12]
 802945c:	f7fb fb32 	bl	8024ac4 <lfs_dir_get>
 8029460:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (res < 0) {
 8029464:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029468:	2b00      	cmp	r3, #0
 802946a:	da02      	bge.n	8029472 <lfs_rawrename+0x1c2>
            return (int)res;
 802946c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029470:	e128      	b.n	80296c4 <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 8029472:	f107 0320 	add.w	r3, r7, #32
 8029476:	4618      	mov	r0, r3
 8029478:	f7fa feab 	bl	80241d2 <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 802947c:	f107 0220 	add.w	r2, r7, #32
 8029480:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029484:	3308      	adds	r3, #8
 8029486:	4619      	mov	r1, r3
 8029488:	68f8      	ldr	r0, [r7, #12]
 802948a:	f7fc fbbb 	bl	8025c04 <lfs_dir_fetch>
 802948e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029492:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029496:	2b00      	cmp	r3, #0
 8029498:	d002      	beq.n	80294a0 <lfs_rawrename+0x1f0>
            return err;
 802949a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802949e:	e111      	b.n	80296c4 <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 80294a0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80294a4:	2b00      	cmp	r3, #0
 80294a6:	d103      	bne.n	80294b0 <lfs_rawrename+0x200>
 80294a8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80294ac:	2b00      	cmp	r3, #0
 80294ae:	d002      	beq.n	80294b6 <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 80294b0:	f06f 0326 	mvn.w	r3, #38	; 0x26
 80294b4:	e106      	b.n	80296c4 <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80294b6:	2101      	movs	r1, #1
 80294b8:	68f8      	ldr	r0, [r7, #12]
 80294ba:	f000 ff4b 	bl	802a354 <lfs_fs_preporphans>
 80294be:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80294c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80294c6:	2b00      	cmp	r3, #0
 80294c8:	d002      	beq.n	80294d0 <lfs_rawrename+0x220>
            return err;
 80294ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80294ce:	e0f9      	b.n	80296c4 <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 80294d0:	2300      	movs	r3, #0
 80294d2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        prevdir.id = 0;
 80294d6:	2300      	movs	r3, #0
 80294d8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        lfs->mlist = &prevdir;
 80294dc:	68fb      	ldr	r3, [r7, #12]
 80294de:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80294e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (!samepair) {
 80294e4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80294e8:	f083 0301 	eor.w	r3, r3, #1
 80294ec:	b2db      	uxtb	r3, r3
 80294ee:	2b00      	cmp	r3, #0
 80294f0:	d007      	beq.n	8029502 <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 80294f2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80294f6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80294fa:	4619      	mov	r1, r3
 80294fc:	68f8      	ldr	r0, [r7, #12]
 80294fe:	f000 ff63 	bl	802a3c8 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8029502:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029506:	f113 0f02 	cmn.w	r3, #2
 802950a:	d007      	beq.n	802951c <lfs_rawrename+0x26c>
 802950c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029510:	029b      	lsls	r3, r3, #10
 8029512:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029516:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802951a:	e000      	b.n	802951e <lfs_rawrename+0x26e>
 802951c:	2300      	movs	r3, #0
 802951e:	653b      	str	r3, [r7, #80]	; 0x50
 8029520:	2300      	movs	r3, #0
 8029522:	657b      	str	r3, [r7, #84]	; 0x54
 8029524:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029528:	029b      	lsls	r3, r3, #10
 802952a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802952e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029532:	65bb      	str	r3, [r7, #88]	; 0x58
 8029534:	2300      	movs	r3, #0
 8029536:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802953c:	4618      	mov	r0, r3
 802953e:	f7fa fead 	bl	802429c <lfs_tag_type3>
 8029542:	4603      	mov	r3, r0
 8029544:	051a      	lsls	r2, r3, #20
 8029546:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802954a:	029b      	lsls	r3, r3, #10
 802954c:	ea42 0403 	orr.w	r4, r2, r3
 8029550:	687b      	ldr	r3, [r7, #4]
 8029552:	4618      	mov	r0, r3
 8029554:	f7e6 fea4 	bl	80102a0 <strlen>
 8029558:	4603      	mov	r3, r0
 802955a:	4323      	orrs	r3, r4
 802955c:	663b      	str	r3, [r7, #96]	; 0x60
 802955e:	687b      	ldr	r3, [r7, #4]
 8029560:	667b      	str	r3, [r7, #100]	; 0x64
 8029562:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029566:	029c      	lsls	r4, r3, #10
 8029568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802956c:	4618      	mov	r0, r3
 802956e:	f7fa febf 	bl	80242f0 <lfs_tag_id>
 8029572:	4603      	mov	r3, r0
 8029574:	4323      	orrs	r3, r4
 8029576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802957a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802957e:	66bb      	str	r3, [r7, #104]	; 0x68
 8029580:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8029584:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029586:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802958a:	2b00      	cmp	r3, #0
 802958c:	d007      	beq.n	802959e <lfs_rawrename+0x2ee>
 802958e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8029592:	029b      	lsls	r3, r3, #10
 8029594:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029598:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802959c:	e000      	b.n	80295a0 <lfs_rawrename+0x2f0>
 802959e:	2300      	movs	r3, #0
 80295a0:	673b      	str	r3, [r7, #112]	; 0x70
 80295a2:	2300      	movs	r3, #0
 80295a4:	677b      	str	r3, [r7, #116]	; 0x74
 80295a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80295aa:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80295ae:	2305      	movs	r3, #5
 80295b0:	68f8      	ldr	r0, [r7, #12]
 80295b2:	f7fe f941 	bl	8027838 <lfs_dir_commit>
 80295b6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 80295ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80295be:	2b00      	cmp	r3, #0
 80295c0:	d005      	beq.n	80295ce <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 80295c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80295c4:	68fb      	ldr	r3, [r7, #12]
 80295c6:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 80295c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80295cc:	e07a      	b.n	80296c4 <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 80295ce:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80295d2:	f083 0301 	eor.w	r3, r3, #1
 80295d6:	b2db      	uxtb	r3, r3
 80295d8:	2b00      	cmp	r3, #0
 80295da:	d02f      	beq.n	802963c <lfs_rawrename+0x38c>
 80295dc:	68fb      	ldr	r3, [r7, #12]
 80295de:	3330      	adds	r3, #48	; 0x30
 80295e0:	4618      	mov	r0, r3
 80295e2:	f7fa ff1a 	bl	802441a <lfs_gstate_hasmove>
 80295e6:	4603      	mov	r3, r0
 80295e8:	2b00      	cmp	r3, #0
 80295ea:	d027      	beq.n	802963c <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80295ec:	2200      	movs	r2, #0
 80295ee:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80295f2:	68f8      	ldr	r0, [r7, #12]
 80295f4:	f000 fee8 	bl	802a3c8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 80295f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295fc:	4618      	mov	r0, r3
 80295fe:	f7fa fe77 	bl	80242f0 <lfs_tag_id>
 8029602:	4603      	mov	r3, r0
 8029604:	029b      	lsls	r3, r3, #10
 8029606:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802960a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802960e:	61bb      	str	r3, [r7, #24]
 8029610:	2300      	movs	r3, #0
 8029612:	61fb      	str	r3, [r7, #28]
 8029614:	f107 0218 	add.w	r2, r7, #24
 8029618:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 802961c:	2301      	movs	r3, #1
 802961e:	68f8      	ldr	r0, [r7, #12]
 8029620:	f7fe f90a 	bl	8027838 <lfs_dir_commit>
 8029624:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8029628:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802962c:	2b00      	cmp	r3, #0
 802962e:	d005      	beq.n	802963c <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 8029630:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029632:	68fb      	ldr	r3, [r7, #12]
 8029634:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8029636:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802963a:	e043      	b.n	80296c4 <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 802963c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802963e:	68fb      	ldr	r3, [r7, #12]
 8029640:	629a      	str	r2, [r3, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
 8029642:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029646:	f113 0f02 	cmn.w	r3, #2
 802964a:	d03a      	beq.n	80296c2 <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 802964c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029650:	4618      	mov	r0, r3
 8029652:	f7fa fe23 	bl	802429c <lfs_tag_type3>
 8029656:	4603      	mov	r3, r0
 8029658:	2b02      	cmp	r3, #2
 802965a:	d132      	bne.n	80296c2 <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802965c:	f04f 31ff 	mov.w	r1, #4294967295
 8029660:	68f8      	ldr	r0, [r7, #12]
 8029662:	f000 fe77 	bl	802a354 <lfs_fs_preporphans>
 8029666:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802966a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802966e:	2b00      	cmp	r3, #0
 8029670:	d002      	beq.n	8029678 <lfs_rawrename+0x3c8>
            return err;
 8029672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029676:	e025      	b.n	80296c4 <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8029678:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802967c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029680:	3308      	adds	r3, #8
 8029682:	4619      	mov	r1, r3
 8029684:	68f8      	ldr	r0, [r7, #12]
 8029686:	f000 fd85 	bl	802a194 <lfs_fs_pred>
 802968a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802968e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029692:	2b00      	cmp	r3, #0
 8029694:	d002      	beq.n	802969c <lfs_rawrename+0x3ec>
            return err;
 8029696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802969a:	e013      	b.n	80296c4 <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 802969c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80296a0:	f103 0208 	add.w	r2, r3, #8
 80296a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80296a8:	4619      	mov	r1, r3
 80296aa:	68f8      	ldr	r0, [r7, #12]
 80296ac:	f7fc ff22 	bl	80264f4 <lfs_dir_drop>
 80296b0:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80296b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80296b8:	2b00      	cmp	r3, #0
 80296ba:	d002      	beq.n	80296c2 <lfs_rawrename+0x412>
            return err;
 80296bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80296c0:	e000      	b.n	80296c4 <lfs_rawrename+0x414>
        }
    }

    return 0;
 80296c2:	2300      	movs	r3, #0
}
 80296c4:	4618      	mov	r0, r3
 80296c6:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80296ca:	46bd      	mov	sp, r7
 80296cc:	bd90      	pop	{r4, r7, pc}
 80296ce:	bf00      	nop
 80296d0:	700ffc00 	.word	0x700ffc00

080296d4 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80296d4:	b580      	push	{r7, lr}
 80296d6:	b08c      	sub	sp, #48	; 0x30
 80296d8:	af00      	add	r7, sp, #0
 80296da:	6078      	str	r0, [r7, #4]
 80296dc:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80296de:	687b      	ldr	r3, [r7, #4]
 80296e0:	683a      	ldr	r2, [r7, #0]
 80296e2:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80296e4:	2300      	movs	r3, #0
 80296e6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80296e8:	687b      	ldr	r3, [r7, #4]
 80296ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296ec:	695b      	ldr	r3, [r3, #20]
 80296ee:	2b00      	cmp	r3, #0
 80296f0:	d106      	bne.n	8029700 <lfs_init+0x2c>
 80296f2:	4b92      	ldr	r3, [pc, #584]	; (802993c <lfs_init+0x268>)
 80296f4:	4a92      	ldr	r2, [pc, #584]	; (8029940 <lfs_init+0x26c>)
 80296f6:	f640 7146 	movw	r1, #3910	; 0xf46
 80296fa:	4892      	ldr	r0, [pc, #584]	; (8029944 <lfs_init+0x270>)
 80296fc:	f003 f826 	bl	802c74c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8029700:	687b      	ldr	r3, [r7, #4]
 8029702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029704:	699b      	ldr	r3, [r3, #24]
 8029706:	2b00      	cmp	r3, #0
 8029708:	d106      	bne.n	8029718 <lfs_init+0x44>
 802970a:	4b8f      	ldr	r3, [pc, #572]	; (8029948 <lfs_init+0x274>)
 802970c:	4a8c      	ldr	r2, [pc, #560]	; (8029940 <lfs_init+0x26c>)
 802970e:	f640 7147 	movw	r1, #3911	; 0xf47
 8029712:	488c      	ldr	r0, [pc, #560]	; (8029944 <lfs_init+0x270>)
 8029714:	f003 f81a 	bl	802c74c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802971e:	2b00      	cmp	r3, #0
 8029720:	d106      	bne.n	8029730 <lfs_init+0x5c>
 8029722:	4b8a      	ldr	r3, [pc, #552]	; (802994c <lfs_init+0x278>)
 8029724:	4a86      	ldr	r2, [pc, #536]	; (8029940 <lfs_init+0x26c>)
 8029726:	f640 7148 	movw	r1, #3912	; 0xf48
 802972a:	4886      	ldr	r0, [pc, #536]	; (8029944 <lfs_init+0x270>)
 802972c:	f003 f80e 	bl	802c74c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8029730:	687b      	ldr	r3, [r7, #4]
 8029732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029736:	687a      	ldr	r2, [r7, #4]
 8029738:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802973a:	6952      	ldr	r2, [r2, #20]
 802973c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029740:	fb01 f202 	mul.w	r2, r1, r2
 8029744:	1a9b      	subs	r3, r3, r2
 8029746:	2b00      	cmp	r3, #0
 8029748:	d006      	beq.n	8029758 <lfs_init+0x84>
 802974a:	4b81      	ldr	r3, [pc, #516]	; (8029950 <lfs_init+0x27c>)
 802974c:	4a7c      	ldr	r2, [pc, #496]	; (8029940 <lfs_init+0x26c>)
 802974e:	f640 714c 	movw	r1, #3916	; 0xf4c
 8029752:	487c      	ldr	r0, [pc, #496]	; (8029944 <lfs_init+0x270>)
 8029754:	f002 fffa 	bl	802c74c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029758:	687b      	ldr	r3, [r7, #4]
 802975a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802975e:	687a      	ldr	r2, [r7, #4]
 8029760:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029762:	6992      	ldr	r2, [r2, #24]
 8029764:	fbb3 f1f2 	udiv	r1, r3, r2
 8029768:	fb01 f202 	mul.w	r2, r1, r2
 802976c:	1a9b      	subs	r3, r3, r2
 802976e:	2b00      	cmp	r3, #0
 8029770:	d006      	beq.n	8029780 <lfs_init+0xac>
 8029772:	4b78      	ldr	r3, [pc, #480]	; (8029954 <lfs_init+0x280>)
 8029774:	4a72      	ldr	r2, [pc, #456]	; (8029940 <lfs_init+0x26c>)
 8029776:	f640 714d 	movw	r1, #3917	; 0xf4d
 802977a:	4872      	ldr	r0, [pc, #456]	; (8029944 <lfs_init+0x270>)
 802977c:	f002 ffe6 	bl	802c74c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8029780:	687b      	ldr	r3, [r7, #4]
 8029782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029784:	69db      	ldr	r3, [r3, #28]
 8029786:	687a      	ldr	r2, [r7, #4]
 8029788:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802978a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 802978c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029790:	fb01 f202 	mul.w	r2, r1, r2
 8029794:	1a9b      	subs	r3, r3, r2
 8029796:	2b00      	cmp	r3, #0
 8029798:	d006      	beq.n	80297a8 <lfs_init+0xd4>
 802979a:	4b6f      	ldr	r3, [pc, #444]	; (8029958 <lfs_init+0x284>)
 802979c:	4a68      	ldr	r2, [pc, #416]	; (8029940 <lfs_init+0x26c>)
 802979e:	f640 714e 	movw	r1, #3918	; 0xf4e
 80297a2:	4868      	ldr	r0, [pc, #416]	; (8029944 <lfs_init+0x270>)
 80297a4:	f002 ffd2 	bl	802c74c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80297a8:	687b      	ldr	r3, [r7, #4]
 80297aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297ac:	69db      	ldr	r3, [r3, #28]
 80297ae:	3b08      	subs	r3, #8
 80297b0:	f04f 32ff 	mov.w	r2, #4294967295
 80297b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80297b8:	4618      	mov	r0, r3
 80297ba:	f7fa f8ba 	bl	8023932 <lfs_npw2>
 80297be:	4603      	mov	r3, r0
 80297c0:	009a      	lsls	r2, r3, #2
 80297c2:	687b      	ldr	r3, [r7, #4]
 80297c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297c6:	69db      	ldr	r3, [r3, #28]
 80297c8:	429a      	cmp	r2, r3
 80297ca:	d906      	bls.n	80297da <lfs_init+0x106>
 80297cc:	4b63      	ldr	r3, [pc, #396]	; (802995c <lfs_init+0x288>)
 80297ce:	4a5c      	ldr	r2, [pc, #368]	; (8029940 <lfs_init+0x26c>)
 80297d0:	f640 7151 	movw	r1, #3921	; 0xf51
 80297d4:	485b      	ldr	r0, [pc, #364]	; (8029944 <lfs_init+0x270>)
 80297d6:	f002 ffb9 	bl	802c74c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80297da:	687b      	ldr	r3, [r7, #4]
 80297dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80297e0:	2b00      	cmp	r3, #0
 80297e2:	d106      	bne.n	80297f2 <lfs_init+0x11e>
 80297e4:	4b5e      	ldr	r3, [pc, #376]	; (8029960 <lfs_init+0x28c>)
 80297e6:	4a56      	ldr	r2, [pc, #344]	; (8029940 <lfs_init+0x26c>)
 80297e8:	f640 715a 	movw	r1, #3930	; 0xf5a
 80297ec:	4855      	ldr	r0, [pc, #340]	; (8029944 <lfs_init+0x270>)
 80297ee:	f002 ffad 	bl	802c74c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80297f2:	687b      	ldr	r3, [r7, #4]
 80297f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80297f8:	2b00      	cmp	r3, #0
 80297fa:	d005      	beq.n	8029808 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80297fc:	687b      	ldr	r3, [r7, #4]
 80297fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029802:	687b      	ldr	r3, [r7, #4]
 8029804:	60da      	str	r2, [r3, #12]
 8029806:	e010      	b.n	802982a <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029808:	687b      	ldr	r3, [r7, #4]
 802980a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802980e:	4618      	mov	r0, r3
 8029810:	f7fa f8f7 	bl	8023a02 <lfs_malloc>
 8029814:	4602      	mov	r2, r0
 8029816:	687b      	ldr	r3, [r7, #4]
 8029818:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 802981a:	687b      	ldr	r3, [r7, #4]
 802981c:	68db      	ldr	r3, [r3, #12]
 802981e:	2b00      	cmp	r3, #0
 8029820:	d103      	bne.n	802982a <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8029822:	f06f 030b 	mvn.w	r3, #11
 8029826:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029828:	e0fd      	b.n	8029a26 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 802982a:	687b      	ldr	r3, [r7, #4]
 802982c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029830:	2b00      	cmp	r3, #0
 8029832:	d005      	beq.n	8029840 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8029834:	687b      	ldr	r3, [r7, #4]
 8029836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802983a:	687b      	ldr	r3, [r7, #4]
 802983c:	61da      	str	r2, [r3, #28]
 802983e:	e010      	b.n	8029862 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029840:	687b      	ldr	r3, [r7, #4]
 8029842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029846:	4618      	mov	r0, r3
 8029848:	f7fa f8db 	bl	8023a02 <lfs_malloc>
 802984c:	4602      	mov	r2, r0
 802984e:	687b      	ldr	r3, [r7, #4]
 8029850:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8029852:	687b      	ldr	r3, [r7, #4]
 8029854:	69db      	ldr	r3, [r3, #28]
 8029856:	2b00      	cmp	r3, #0
 8029858:	d103      	bne.n	8029862 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 802985a:	f06f 030b 	mvn.w	r3, #11
 802985e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029860:	e0e1      	b.n	8029a26 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8029862:	687b      	ldr	r3, [r7, #4]
 8029864:	4619      	mov	r1, r3
 8029866:	6878      	ldr	r0, [r7, #4]
 8029868:	f7fa f8f1 	bl	8023a4e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 802986c:	687b      	ldr	r3, [r7, #4]
 802986e:	3310      	adds	r3, #16
 8029870:	4619      	mov	r1, r3
 8029872:	6878      	ldr	r0, [r7, #4]
 8029874:	f7fa f8eb 	bl	8023a4e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8029878:	687b      	ldr	r3, [r7, #4]
 802987a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802987e:	2b00      	cmp	r3, #0
 8029880:	d106      	bne.n	8029890 <lfs_init+0x1bc>
 8029882:	4b38      	ldr	r3, [pc, #224]	; (8029964 <lfs_init+0x290>)
 8029884:	4a2e      	ldr	r2, [pc, #184]	; (8029940 <lfs_init+0x26c>)
 8029886:	f640 7178 	movw	r1, #3960	; 0xf78
 802988a:	482e      	ldr	r0, [pc, #184]	; (8029944 <lfs_init+0x270>)
 802988c:	f002 ff5e 	bl	802c74c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8029890:	687b      	ldr	r3, [r7, #4]
 8029892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029896:	f003 0307 	and.w	r3, r3, #7
 802989a:	2b00      	cmp	r3, #0
 802989c:	d106      	bne.n	80298ac <lfs_init+0x1d8>
 802989e:	687b      	ldr	r3, [r7, #4]
 80298a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80298a4:	f003 0303 	and.w	r3, r3, #3
 80298a8:	2b00      	cmp	r3, #0
 80298aa:	d006      	beq.n	80298ba <lfs_init+0x1e6>
 80298ac:	4b2e      	ldr	r3, [pc, #184]	; (8029968 <lfs_init+0x294>)
 80298ae:	4a24      	ldr	r2, [pc, #144]	; (8029940 <lfs_init+0x26c>)
 80298b0:	f640 7179 	movw	r1, #3961	; 0xf79
 80298b4:	4823      	ldr	r0, [pc, #140]	; (8029944 <lfs_init+0x270>)
 80298b6:	f002 ff49 	bl	802c74c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80298ba:	687b      	ldr	r3, [r7, #4]
 80298bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80298c0:	2b00      	cmp	r3, #0
 80298c2:	d005      	beq.n	80298d0 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80298c4:	687b      	ldr	r3, [r7, #4]
 80298c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	665a      	str	r2, [r3, #100]	; 0x64
 80298ce:	e010      	b.n	80298f2 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80298d0:	687b      	ldr	r3, [r7, #4]
 80298d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80298d6:	4618      	mov	r0, r3
 80298d8:	f7fa f893 	bl	8023a02 <lfs_malloc>
 80298dc:	4602      	mov	r2, r0
 80298de:	687b      	ldr	r3, [r7, #4]
 80298e0:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80298e2:	687b      	ldr	r3, [r7, #4]
 80298e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80298e6:	2b00      	cmp	r3, #0
 80298e8:	d103      	bne.n	80298f2 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80298ea:	f06f 030b 	mvn.w	r3, #11
 80298ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80298f0:	e099      	b.n	8029a26 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80298f2:	687b      	ldr	r3, [r7, #4]
 80298f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80298f8:	2bff      	cmp	r3, #255	; 0xff
 80298fa:	d906      	bls.n	802990a <lfs_init+0x236>
 80298fc:	4b1b      	ldr	r3, [pc, #108]	; (802996c <lfs_init+0x298>)
 80298fe:	4a10      	ldr	r2, [pc, #64]	; (8029940 <lfs_init+0x26c>)
 8029900:	f640 7186 	movw	r1, #3974	; 0xf86
 8029904:	480f      	ldr	r0, [pc, #60]	; (8029944 <lfs_init+0x270>)
 8029906:	f002 ff21 	bl	802c74c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 802990a:	687b      	ldr	r3, [r7, #4]
 802990c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802990e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8029910:	687b      	ldr	r3, [r7, #4]
 8029912:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8029914:	687b      	ldr	r3, [r7, #4]
 8029916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029918:	2b00      	cmp	r3, #0
 802991a:	d102      	bne.n	8029922 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 802991c:	687b      	ldr	r3, [r7, #4]
 802991e:	22ff      	movs	r2, #255	; 0xff
 8029920:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8029922:	687b      	ldr	r3, [r7, #4]
 8029924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029928:	2b00      	cmp	r3, #0
 802992a:	da23      	bge.n	8029974 <lfs_init+0x2a0>
 802992c:	4b10      	ldr	r3, [pc, #64]	; (8029970 <lfs_init+0x29c>)
 802992e:	4a04      	ldr	r2, [pc, #16]	; (8029940 <lfs_init+0x26c>)
 8029930:	f640 718c 	movw	r1, #3980	; 0xf8c
 8029934:	4803      	ldr	r0, [pc, #12]	; (8029944 <lfs_init+0x270>)
 8029936:	f002 ff09 	bl	802c74c <__assert_func>
 802993a:	bf00      	nop
 802993c:	08033bdc 	.word	0x08033bdc
 8029940:	08034bb8 	.word	0x08034bb8
 8029944:	08033840 	.word	0x08033840
 8029948:	08033bf8 	.word	0x08033bf8
 802994c:	08033c14 	.word	0x08033c14
 8029950:	08033c30 	.word	0x08033c30
 8029954:	08033c60 	.word	0x08033c60
 8029958:	08033c90 	.word	0x08033c90
 802995c:	08033cc4 	.word	0x08033cc4
 8029960:	08033d10 	.word	0x08033d10
 8029964:	08033d2c 	.word	0x08033d2c
 8029968:	08033d4c 	.word	0x08033d4c
 802996c:	08033da0 	.word	0x08033da0
 8029970:	08033dbc 	.word	0x08033dbc
    lfs->file_max = lfs->cfg->file_max;
 8029974:	687b      	ldr	r3, [r7, #4]
 8029976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802997a:	687b      	ldr	r3, [r7, #4]
 802997c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 802997e:	687b      	ldr	r3, [r7, #4]
 8029980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029982:	2b00      	cmp	r3, #0
 8029984:	d103      	bne.n	802998e <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8029986:	687b      	ldr	r3, [r7, #4]
 8029988:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802998c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802998e:	687b      	ldr	r3, [r7, #4]
 8029990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029994:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029998:	4293      	cmp	r3, r2
 802999a:	d906      	bls.n	80299aa <lfs_init+0x2d6>
 802999c:	4b26      	ldr	r3, [pc, #152]	; (8029a38 <lfs_init+0x364>)
 802999e:	4a27      	ldr	r2, [pc, #156]	; (8029a3c <lfs_init+0x368>)
 80299a0:	f640 7192 	movw	r1, #3986	; 0xf92
 80299a4:	4826      	ldr	r0, [pc, #152]	; (8029a40 <lfs_init+0x36c>)
 80299a6:	f002 fed1 	bl	802c74c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80299aa:	687b      	ldr	r3, [r7, #4]
 80299ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80299b0:	687b      	ldr	r3, [r7, #4]
 80299b2:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80299b4:	687b      	ldr	r3, [r7, #4]
 80299b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80299b8:	2b00      	cmp	r3, #0
 80299ba:	d103      	bne.n	80299c4 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80299bc:	687b      	ldr	r3, [r7, #4]
 80299be:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80299c2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80299c4:	687b      	ldr	r3, [r7, #4]
 80299c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80299ca:	687b      	ldr	r3, [r7, #4]
 80299cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299ce:	69db      	ldr	r3, [r3, #28]
 80299d0:	429a      	cmp	r2, r3
 80299d2:	d906      	bls.n	80299e2 <lfs_init+0x30e>
 80299d4:	4b1b      	ldr	r3, [pc, #108]	; (8029a44 <lfs_init+0x370>)
 80299d6:	4a19      	ldr	r2, [pc, #100]	; (8029a3c <lfs_init+0x368>)
 80299d8:	f640 7198 	movw	r1, #3992	; 0xf98
 80299dc:	4818      	ldr	r0, [pc, #96]	; (8029a40 <lfs_init+0x36c>)
 80299de:	f002 feb5 	bl	802c74c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80299e2:	687b      	ldr	r3, [r7, #4]
 80299e4:	f04f 32ff 	mov.w	r2, #4294967295
 80299e8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80299ea:	687b      	ldr	r3, [r7, #4]
 80299ec:	f04f 32ff 	mov.w	r2, #4294967295
 80299f0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80299f2:	687b      	ldr	r3, [r7, #4]
 80299f4:	2200      	movs	r2, #0
 80299f6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	2200      	movs	r2, #0
 80299fc:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80299fe:	687b      	ldr	r3, [r7, #4]
 8029a00:	333c      	adds	r3, #60	; 0x3c
 8029a02:	2200      	movs	r2, #0
 8029a04:	601a      	str	r2, [r3, #0]
 8029a06:	605a      	str	r2, [r3, #4]
 8029a08:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 8029a0a:	687b      	ldr	r3, [r7, #4]
 8029a0c:	3330      	adds	r3, #48	; 0x30
 8029a0e:	2200      	movs	r2, #0
 8029a10:	601a      	str	r2, [r3, #0]
 8029a12:	605a      	str	r2, [r3, #4]
 8029a14:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8029a16:	687b      	ldr	r3, [r7, #4]
 8029a18:	3348      	adds	r3, #72	; 0x48
 8029a1a:	2200      	movs	r2, #0
 8029a1c:	601a      	str	r2, [r3, #0]
 8029a1e:	605a      	str	r2, [r3, #4]
 8029a20:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8029a22:	2300      	movs	r3, #0
 8029a24:	e003      	b.n	8029a2e <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8029a26:	6878      	ldr	r0, [r7, #4]
 8029a28:	f000 f80e 	bl	8029a48 <lfs_deinit>
    return err;
 8029a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8029a2e:	4618      	mov	r0, r3
 8029a30:	3730      	adds	r7, #48	; 0x30
 8029a32:	46bd      	mov	sp, r7
 8029a34:	bd80      	pop	{r7, pc}
 8029a36:	bf00      	nop
 8029a38:	08033de0 	.word	0x08033de0
 8029a3c:	08034bb8 	.word	0x08034bb8
 8029a40:	08033840 	.word	0x08033840
 8029a44:	08033dfc 	.word	0x08033dfc

08029a48 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8029a48:	b580      	push	{r7, lr}
 8029a4a:	b082      	sub	sp, #8
 8029a4c:	af00      	add	r7, sp, #0
 8029a4e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029a50:	687b      	ldr	r3, [r7, #4]
 8029a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a56:	2b00      	cmp	r3, #0
 8029a58:	d104      	bne.n	8029a64 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8029a5a:	687b      	ldr	r3, [r7, #4]
 8029a5c:	68db      	ldr	r3, [r3, #12]
 8029a5e:	4618      	mov	r0, r3
 8029a60:	f7f9 ffdb 	bl	8023a1a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8029a64:	687b      	ldr	r3, [r7, #4]
 8029a66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029a6a:	2b00      	cmp	r3, #0
 8029a6c:	d104      	bne.n	8029a78 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8029a6e:	687b      	ldr	r3, [r7, #4]
 8029a70:	69db      	ldr	r3, [r3, #28]
 8029a72:	4618      	mov	r0, r3
 8029a74:	f7f9 ffd1 	bl	8023a1a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8029a78:	687b      	ldr	r3, [r7, #4]
 8029a7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029a7e:	2b00      	cmp	r3, #0
 8029a80:	d104      	bne.n	8029a8c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8029a82:	687b      	ldr	r3, [r7, #4]
 8029a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029a86:	4618      	mov	r0, r3
 8029a88:	f7f9 ffc7 	bl	8023a1a <lfs_free>
    }

    return 0;
 8029a8c:	2300      	movs	r3, #0
}
 8029a8e:	4618      	mov	r0, r3
 8029a90:	3708      	adds	r7, #8
 8029a92:	46bd      	mov	sp, r7
 8029a94:	bd80      	pop	{r7, pc}
	...

08029a98 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8029a98:	b580      	push	{r7, lr}
 8029a9a:	b0a0      	sub	sp, #128	; 0x80
 8029a9c:	af00      	add	r7, sp, #0
 8029a9e:	6078      	str	r0, [r7, #4]
 8029aa0:	6039      	str	r1, [r7, #0]
    int err = 0;
 8029aa2:	2300      	movs	r3, #0
 8029aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8029aa6:	6839      	ldr	r1, [r7, #0]
 8029aa8:	6878      	ldr	r0, [r7, #4]
 8029aaa:	f7ff fe13 	bl	80296d4 <lfs_init>
 8029aae:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029ab0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029ab2:	2b00      	cmp	r3, #0
 8029ab4:	d001      	beq.n	8029aba <lfs_rawformat+0x22>
            return err;
 8029ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029ab8:	e082      	b.n	8029bc0 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8029aba:	687b      	ldr	r3, [r7, #4]
 8029abc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8029abe:	687b      	ldr	r3, [r7, #4]
 8029ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029ac4:	461a      	mov	r2, r3
 8029ac6:	2100      	movs	r1, #0
 8029ac8:	f004 f810 	bl	802daec <memset>
        lfs->free.off = 0;
 8029acc:	687b      	ldr	r3, [r7, #4]
 8029ace:	2200      	movs	r2, #0
 8029ad0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029ad2:	687b      	ldr	r3, [r7, #4]
 8029ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029ad8:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8029ada:	687b      	ldr	r3, [r7, #4]
 8029adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ade:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029ae0:	4619      	mov	r1, r3
 8029ae2:	4610      	mov	r0, r2
 8029ae4:	f7f9 feee 	bl	80238c4 <lfs_min>
 8029ae8:	4602      	mov	r2, r0
 8029aea:	687b      	ldr	r3, [r7, #4]
 8029aec:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	2200      	movs	r2, #0
 8029af2:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8029af4:	6878      	ldr	r0, [r7, #4]
 8029af6:	f7fa fe2b 	bl	8024750 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8029afa:	f107 030c 	add.w	r3, r7, #12
 8029afe:	4619      	mov	r1, r3
 8029b00:	6878      	ldr	r0, [r7, #4]
 8029b02:	f7fc fc7d 	bl	8026400 <lfs_dir_alloc>
 8029b06:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029b08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029b0a:	2b00      	cmp	r3, #0
 8029b0c:	d14f      	bne.n	8029bae <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8029b0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8029b12:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8029b14:	687b      	ldr	r3, [r7, #4]
 8029b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029b18:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8029b1a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8029b1c:	687b      	ldr	r3, [r7, #4]
 8029b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029b20:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8029b22:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8029b24:	687b      	ldr	r3, [r7, #4]
 8029b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8029b28:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8029b2a:	687b      	ldr	r3, [r7, #4]
 8029b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8029b2e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8029b30:	687b      	ldr	r3, [r7, #4]
 8029b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8029b34:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8029b36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029b3a:	4618      	mov	r0, r3
 8029b3c:	f7fa fd48 	bl	80245d0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8029b40:	4b21      	ldr	r3, [pc, #132]	; (8029bc8 <lfs_rawformat+0x130>)
 8029b42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029b44:	2300      	movs	r3, #0
 8029b46:	653b      	str	r3, [r7, #80]	; 0x50
 8029b48:	4b20      	ldr	r3, [pc, #128]	; (8029bcc <lfs_rawformat+0x134>)
 8029b4a:	657b      	str	r3, [r7, #84]	; 0x54
 8029b4c:	4b20      	ldr	r3, [pc, #128]	; (8029bd0 <lfs_rawformat+0x138>)
 8029b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8029b50:	4b20      	ldr	r3, [pc, #128]	; (8029bd4 <lfs_rawformat+0x13c>)
 8029b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029b54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029b58:	663b      	str	r3, [r7, #96]	; 0x60
 8029b5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8029b5e:	f107 010c 	add.w	r1, r7, #12
 8029b62:	2303      	movs	r3, #3
 8029b64:	6878      	ldr	r0, [r7, #4]
 8029b66:	f7fd fe67 	bl	8027838 <lfs_dir_commit>
 8029b6a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8029b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029b6e:	2b00      	cmp	r3, #0
 8029b70:	d11f      	bne.n	8029bb2 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8029b72:	2300      	movs	r3, #0
 8029b74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8029b78:	f107 010c 	add.w	r1, r7, #12
 8029b7c:	2300      	movs	r3, #0
 8029b7e:	2200      	movs	r2, #0
 8029b80:	6878      	ldr	r0, [r7, #4]
 8029b82:	f7fd fe59 	bl	8027838 <lfs_dir_commit>
 8029b86:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029b88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029b8a:	2b00      	cmp	r3, #0
 8029b8c:	d113      	bne.n	8029bb6 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8029b8e:	2300      	movs	r3, #0
 8029b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029b92:	2301      	movs	r3, #1
 8029b94:	633b      	str	r3, [r7, #48]	; 0x30
 8029b96:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8029b9a:	f107 030c 	add.w	r3, r7, #12
 8029b9e:	4619      	mov	r1, r3
 8029ba0:	6878      	ldr	r0, [r7, #4]
 8029ba2:	f7fc f82f 	bl	8025c04 <lfs_dir_fetch>
 8029ba6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029ba8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029baa:	2b00      	cmp	r3, #0
 8029bac:	e004      	b.n	8029bb8 <lfs_rawformat+0x120>
            goto cleanup;
 8029bae:	bf00      	nop
 8029bb0:	e002      	b.n	8029bb8 <lfs_rawformat+0x120>
            goto cleanup;
 8029bb2:	bf00      	nop
 8029bb4:	e000      	b.n	8029bb8 <lfs_rawformat+0x120>
            goto cleanup;
 8029bb6:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8029bb8:	6878      	ldr	r0, [r7, #4]
 8029bba:	f7ff ff45 	bl	8029a48 <lfs_deinit>
    return err;
 8029bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8029bc0:	4618      	mov	r0, r3
 8029bc2:	3780      	adds	r7, #128	; 0x80
 8029bc4:	46bd      	mov	sp, r7
 8029bc6:	bd80      	pop	{r7, pc}
 8029bc8:	40100000 	.word	0x40100000
 8029bcc:	0ff00008 	.word	0x0ff00008
 8029bd0:	08033e2c 	.word	0x08033e2c
 8029bd4:	20100018 	.word	0x20100018

08029bd8 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8029bd8:	b580      	push	{r7, lr}
 8029bda:	b09c      	sub	sp, #112	; 0x70
 8029bdc:	af04      	add	r7, sp, #16
 8029bde:	6078      	str	r0, [r7, #4]
 8029be0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8029be2:	6839      	ldr	r1, [r7, #0]
 8029be4:	6878      	ldr	r0, [r7, #4]
 8029be6:	f7ff fd75 	bl	80296d4 <lfs_init>
 8029bea:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8029bec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029bee:	2b00      	cmp	r3, #0
 8029bf0:	d001      	beq.n	8029bf6 <lfs_rawmount+0x1e>
        return err;
 8029bf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029bf4:	e192      	b.n	8029f1c <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029bfa:	2220      	movs	r2, #32
 8029bfc:	2100      	movs	r1, #0
 8029bfe:	4618      	mov	r0, r3
 8029c00:	f003 ff74 	bl	802daec <memset>
 8029c04:	2301      	movs	r3, #1
 8029c06:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8029c08:	2300      	movs	r3, #0
 8029c0a:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8029c0c:	e10b      	b.n	8029e26 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8029c0e:	687b      	ldr	r3, [r7, #4]
 8029c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029c12:	6a1b      	ldr	r3, [r3, #32]
 8029c14:	085b      	lsrs	r3, r3, #1
 8029c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029c18:	429a      	cmp	r2, r3
 8029c1a:	d303      	bcc.n	8029c24 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8029c1c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029c20:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029c22:	e177      	b.n	8029f14 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8029c24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029c26:	3301      	adds	r3, #1
 8029c28:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8029c2a:	687b      	ldr	r3, [r7, #4]
 8029c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8029c2e:	4b8a      	ldr	r3, [pc, #552]	; (8029e58 <lfs_rawmount+0x280>)
 8029c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8029c32:	2308      	movs	r3, #8
 8029c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8029c36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029c3a:	f103 0218 	add.w	r2, r3, #24
 8029c3e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029c46:	9303      	str	r3, [sp, #12]
 8029c48:	4b84      	ldr	r3, [pc, #528]	; (8029e5c <lfs_rawmount+0x284>)
 8029c4a:	9302      	str	r3, [sp, #8]
 8029c4c:	2300      	movs	r3, #0
 8029c4e:	9301      	str	r3, [sp, #4]
 8029c50:	4b83      	ldr	r3, [pc, #524]	; (8029e60 <lfs_rawmount+0x288>)
 8029c52:	9300      	str	r3, [sp, #0]
 8029c54:	4b83      	ldr	r3, [pc, #524]	; (8029e64 <lfs_rawmount+0x28c>)
 8029c56:	6878      	ldr	r0, [r7, #4]
 8029c58:	f7fb fc66 	bl	8025528 <lfs_dir_fetchmatch>
 8029c5c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8029c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c60:	2b00      	cmp	r3, #0
 8029c62:	da02      	bge.n	8029c6a <lfs_rawmount+0x92>
            err = tag;
 8029c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c66:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029c68:	e154      	b.n	8029f14 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8029c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c6c:	2b00      	cmp	r3, #0
 8029c6e:	f000 80cd 	beq.w	8029e0c <lfs_rawmount+0x234>
 8029c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c74:	4618      	mov	r0, r3
 8029c76:	f7fa faee 	bl	8024256 <lfs_tag_isdelete>
 8029c7a:	4603      	mov	r3, r0
 8029c7c:	f083 0301 	eor.w	r3, r3, #1
 8029c80:	b2db      	uxtb	r3, r3
 8029c82:	2b00      	cmp	r3, #0
 8029c84:	f000 80c2 	beq.w	8029e0c <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029c8a:	687b      	ldr	r3, [r7, #4]
 8029c8c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8029c8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029c90:	687b      	ldr	r3, [r7, #4]
 8029c92:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8029c94:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029c98:	f107 030c 	add.w	r3, r7, #12
 8029c9c:	9300      	str	r3, [sp, #0]
 8029c9e:	4b72      	ldr	r3, [pc, #456]	; (8029e68 <lfs_rawmount+0x290>)
 8029ca0:	4a70      	ldr	r2, [pc, #448]	; (8029e64 <lfs_rawmount+0x28c>)
 8029ca2:	6878      	ldr	r0, [r7, #4]
 8029ca4:	f7fa ff0e 	bl	8024ac4 <lfs_dir_get>
 8029ca8:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8029caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029cac:	2b00      	cmp	r3, #0
 8029cae:	da02      	bge.n	8029cb6 <lfs_rawmount+0xde>
                err = tag;
 8029cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029cb4:	e12e      	b.n	8029f14 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8029cb6:	f107 030c 	add.w	r3, r7, #12
 8029cba:	4618      	mov	r0, r3
 8029cbc:	f7fa fc50 	bl	8024560 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8029cc0:	68fb      	ldr	r3, [r7, #12]
 8029cc2:	0c1b      	lsrs	r3, r3, #16
 8029cc4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8029cc8:	68fb      	ldr	r3, [r7, #12]
 8029cca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8029cce:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8029cd2:	2b02      	cmp	r3, #2
 8029cd4:	d103      	bne.n	8029cde <lfs_rawmount+0x106>
 8029cd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8029cda:	2b00      	cmp	r3, #0
 8029cdc:	d011      	beq.n	8029d02 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8029cde:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8029ce2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8029ce6:	4961      	ldr	r1, [pc, #388]	; (8029e6c <lfs_rawmount+0x294>)
 8029ce8:	9101      	str	r1, [sp, #4]
 8029cea:	9300      	str	r3, [sp, #0]
 8029cec:	4613      	mov	r3, r2
 8029cee:	f241 0233 	movw	r2, #4147	; 0x1033
 8029cf2:	495f      	ldr	r1, [pc, #380]	; (8029e70 <lfs_rawmount+0x298>)
 8029cf4:	485f      	ldr	r0, [pc, #380]	; (8029e74 <lfs_rawmount+0x29c>)
 8029cf6:	f003 fd63 	bl	802d7c0 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8029cfa:	f06f 0315 	mvn.w	r3, #21
 8029cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029d00:	e083      	b.n	8029e0a <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8029d02:	69bb      	ldr	r3, [r7, #24]
 8029d04:	2b00      	cmp	r3, #0
 8029d06:	d018      	beq.n	8029d3a <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8029d08:	69ba      	ldr	r2, [r7, #24]
 8029d0a:	687b      	ldr	r3, [r7, #4]
 8029d0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029d0e:	429a      	cmp	r2, r3
 8029d10:	d910      	bls.n	8029d34 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8029d12:	69ba      	ldr	r2, [r7, #24]
 8029d14:	687b      	ldr	r3, [r7, #4]
 8029d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029d18:	4954      	ldr	r1, [pc, #336]	; (8029e6c <lfs_rawmount+0x294>)
 8029d1a:	9101      	str	r1, [sp, #4]
 8029d1c:	9300      	str	r3, [sp, #0]
 8029d1e:	4613      	mov	r3, r2
 8029d20:	f241 023c 	movw	r2, #4156	; 0x103c
 8029d24:	4952      	ldr	r1, [pc, #328]	; (8029e70 <lfs_rawmount+0x298>)
 8029d26:	4854      	ldr	r0, [pc, #336]	; (8029e78 <lfs_rawmount+0x2a0>)
 8029d28:	f003 fd4a 	bl	802d7c0 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8029d2c:	f06f 0315 	mvn.w	r3, #21
 8029d30:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029d32:	e06a      	b.n	8029e0a <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8029d34:	69ba      	ldr	r2, [r7, #24]
 8029d36:	687b      	ldr	r3, [r7, #4]
 8029d38:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8029d3a:	69fb      	ldr	r3, [r7, #28]
 8029d3c:	2b00      	cmp	r3, #0
 8029d3e:	d018      	beq.n	8029d72 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8029d40:	69fa      	ldr	r2, [r7, #28]
 8029d42:	687b      	ldr	r3, [r7, #4]
 8029d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029d46:	429a      	cmp	r2, r3
 8029d48:	d910      	bls.n	8029d6c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8029d4a:	69fa      	ldr	r2, [r7, #28]
 8029d4c:	687b      	ldr	r3, [r7, #4]
 8029d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029d50:	4946      	ldr	r1, [pc, #280]	; (8029e6c <lfs_rawmount+0x294>)
 8029d52:	9101      	str	r1, [sp, #4]
 8029d54:	9300      	str	r3, [sp, #0]
 8029d56:	4613      	mov	r3, r2
 8029d58:	f241 0247 	movw	r2, #4167	; 0x1047
 8029d5c:	4944      	ldr	r1, [pc, #272]	; (8029e70 <lfs_rawmount+0x298>)
 8029d5e:	4847      	ldr	r0, [pc, #284]	; (8029e7c <lfs_rawmount+0x2a4>)
 8029d60:	f003 fd2e 	bl	802d7c0 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029d64:	f06f 0315 	mvn.w	r3, #21
 8029d68:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029d6a:	e04e      	b.n	8029e0a <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8029d6c:	69fa      	ldr	r2, [r7, #28]
 8029d6e:	687b      	ldr	r3, [r7, #4]
 8029d70:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8029d72:	6a3b      	ldr	r3, [r7, #32]
 8029d74:	2b00      	cmp	r3, #0
 8029d76:	d018      	beq.n	8029daa <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029d78:	6a3a      	ldr	r2, [r7, #32]
 8029d7a:	687b      	ldr	r3, [r7, #4]
 8029d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029d7e:	429a      	cmp	r2, r3
 8029d80:	d910      	bls.n	8029da4 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029d82:	6a3a      	ldr	r2, [r7, #32]
 8029d84:	687b      	ldr	r3, [r7, #4]
 8029d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029d88:	4938      	ldr	r1, [pc, #224]	; (8029e6c <lfs_rawmount+0x294>)
 8029d8a:	9101      	str	r1, [sp, #4]
 8029d8c:	9300      	str	r3, [sp, #0]
 8029d8e:	4613      	mov	r3, r2
 8029d90:	f241 0252 	movw	r2, #4178	; 0x1052
 8029d94:	4936      	ldr	r1, [pc, #216]	; (8029e70 <lfs_rawmount+0x298>)
 8029d96:	483a      	ldr	r0, [pc, #232]	; (8029e80 <lfs_rawmount+0x2a8>)
 8029d98:	f003 fd12 	bl	802d7c0 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8029d9c:	f06f 0315 	mvn.w	r3, #21
 8029da0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029da2:	e032      	b.n	8029e0a <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8029da4:	6a3a      	ldr	r2, [r7, #32]
 8029da6:	687b      	ldr	r3, [r7, #4]
 8029da8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8029daa:	697a      	ldr	r2, [r7, #20]
 8029dac:	687b      	ldr	r3, [r7, #4]
 8029dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029db0:	6a1b      	ldr	r3, [r3, #32]
 8029db2:	429a      	cmp	r2, r3
 8029db4:	d011      	beq.n	8029dda <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8029db6:	697a      	ldr	r2, [r7, #20]
 8029db8:	687b      	ldr	r3, [r7, #4]
 8029dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029dbc:	6a1b      	ldr	r3, [r3, #32]
 8029dbe:	492b      	ldr	r1, [pc, #172]	; (8029e6c <lfs_rawmount+0x294>)
 8029dc0:	9101      	str	r1, [sp, #4]
 8029dc2:	9300      	str	r3, [sp, #0]
 8029dc4:	4613      	mov	r3, r2
 8029dc6:	f241 025c 	movw	r2, #4188	; 0x105c
 8029dca:	4929      	ldr	r1, [pc, #164]	; (8029e70 <lfs_rawmount+0x298>)
 8029dcc:	482d      	ldr	r0, [pc, #180]	; (8029e84 <lfs_rawmount+0x2ac>)
 8029dce:	f003 fcf7 	bl	802d7c0 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8029dd2:	f06f 0315 	mvn.w	r3, #21
 8029dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029dd8:	e017      	b.n	8029e0a <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8029dda:	693a      	ldr	r2, [r7, #16]
 8029ddc:	687b      	ldr	r3, [r7, #4]
 8029dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029de0:	69db      	ldr	r3, [r3, #28]
 8029de2:	429a      	cmp	r2, r3
 8029de4:	d012      	beq.n	8029e0c <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8029de6:	693a      	ldr	r2, [r7, #16]
 8029de8:	687b      	ldr	r3, [r7, #4]
 8029dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029dec:	69db      	ldr	r3, [r3, #28]
 8029dee:	491f      	ldr	r1, [pc, #124]	; (8029e6c <lfs_rawmount+0x294>)
 8029df0:	9101      	str	r1, [sp, #4]
 8029df2:	9300      	str	r3, [sp, #0]
 8029df4:	4613      	mov	r3, r2
 8029df6:	f241 0263 	movw	r2, #4195	; 0x1063
 8029dfa:	491d      	ldr	r1, [pc, #116]	; (8029e70 <lfs_rawmount+0x298>)
 8029dfc:	4822      	ldr	r0, [pc, #136]	; (8029e88 <lfs_rawmount+0x2b0>)
 8029dfe:	f003 fcdf 	bl	802d7c0 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8029e02:	f06f 0315 	mvn.w	r3, #21
 8029e06:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029e08:	bf00      	nop
            goto cleanup;
 8029e0a:	e083      	b.n	8029f14 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8029e12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029e16:	4619      	mov	r1, r3
 8029e18:	6878      	ldr	r0, [r7, #4]
 8029e1a:	f7fb ff0f 	bl	8025c3c <lfs_dir_getgstate>
 8029e1e:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8029e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029e22:	2b00      	cmp	r3, #0
 8029e24:	d175      	bne.n	8029f12 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8029e26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029e2a:	3318      	adds	r3, #24
 8029e2c:	4618      	mov	r0, r3
 8029e2e:	f7fa f95e 	bl	80240ee <lfs_pair_isnull>
 8029e32:	4603      	mov	r3, r0
 8029e34:	f083 0301 	eor.w	r3, r3, #1
 8029e38:	b2db      	uxtb	r3, r3
 8029e3a:	2b00      	cmp	r3, #0
 8029e3c:	f47f aee7 	bne.w	8029c0e <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029e40:	687b      	ldr	r3, [r7, #4]
 8029e42:	3320      	adds	r3, #32
 8029e44:	4618      	mov	r0, r3
 8029e46:	f7fa f952 	bl	80240ee <lfs_pair_isnull>
 8029e4a:	4603      	mov	r3, r0
 8029e4c:	2b00      	cmp	r3, #0
 8029e4e:	d01d      	beq.n	8029e8c <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029e50:	f06f 0315 	mvn.w	r3, #21
 8029e54:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8029e56:	e05d      	b.n	8029f14 <lfs_rawmount+0x33c>
 8029e58:	08033e2c 	.word	0x08033e2c
 8029e5c:	08025d95 	.word	0x08025d95
 8029e60:	0ff00008 	.word	0x0ff00008
 8029e64:	7ffffc00 	.word	0x7ffffc00
 8029e68:	20100018 	.word	0x20100018
 8029e6c:	08033954 	.word	0x08033954
 8029e70:	08033840 	.word	0x08033840
 8029e74:	08033e38 	.word	0x08033e38
 8029e78:	08033e64 	.word	0x08033e64
 8029e7c:	08033e98 	.word	0x08033e98
 8029e80:	08033ecc 	.word	0x08033ecc
 8029e84:	08033f00 	.word	0x08033f00
 8029e88:	08033f34 	.word	0x08033f34
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8029e8c:	687b      	ldr	r3, [r7, #4]
 8029e8e:	3330      	adds	r3, #48	; 0x30
 8029e90:	4618      	mov	r0, r3
 8029e92:	f7fa fa83 	bl	802439c <lfs_gstate_iszero>
 8029e96:	4603      	mov	r3, r0
 8029e98:	f083 0301 	eor.w	r3, r3, #1
 8029e9c:	b2db      	uxtb	r3, r3
 8029e9e:	2b00      	cmp	r3, #0
 8029ea0:	d010      	beq.n	8029ec4 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029ea2:	687b      	ldr	r3, [r7, #4]
 8029ea4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029ea6:	687b      	ldr	r3, [r7, #4]
 8029ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029eaa:	687a      	ldr	r2, [r7, #4]
 8029eac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029eae:	481d      	ldr	r0, [pc, #116]	; (8029f24 <lfs_rawmount+0x34c>)
 8029eb0:	9002      	str	r0, [sp, #8]
 8029eb2:	9201      	str	r2, [sp, #4]
 8029eb4:	9300      	str	r3, [sp, #0]
 8029eb6:	460b      	mov	r3, r1
 8029eb8:	f241 0279 	movw	r2, #4217	; 0x1079
 8029ebc:	491a      	ldr	r1, [pc, #104]	; (8029f28 <lfs_rawmount+0x350>)
 8029ebe:	481b      	ldr	r0, [pc, #108]	; (8029f2c <lfs_rawmount+0x354>)
 8029ec0:	f003 fc7e 	bl	802d7c0 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029ec8:	4618      	mov	r0, r3
 8029eca:	f7fa f9b6 	bl	802423a <lfs_tag_isvalid>
 8029ece:	4603      	mov	r3, r0
 8029ed0:	f083 0301 	eor.w	r3, r3, #1
 8029ed4:	b2db      	uxtb	r3, r3
 8029ed6:	461a      	mov	r2, r3
 8029ed8:	687b      	ldr	r3, [r7, #4]
 8029eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029edc:	441a      	add	r2, r3
 8029ede:	687b      	ldr	r3, [r7, #4]
 8029ee0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8029ee2:	687b      	ldr	r3, [r7, #4]
 8029ee4:	687a      	ldr	r2, [r7, #4]
 8029ee6:	333c      	adds	r3, #60	; 0x3c
 8029ee8:	3230      	adds	r2, #48	; 0x30
 8029eea:	ca07      	ldmia	r2, {r0, r1, r2}
 8029eec:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8029ef0:	687b      	ldr	r3, [r7, #4]
 8029ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029ef4:	687a      	ldr	r2, [r7, #4]
 8029ef6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029ef8:	6a12      	ldr	r2, [r2, #32]
 8029efa:	fbb3 f1f2 	udiv	r1, r3, r2
 8029efe:	fb01 f202 	mul.w	r2, r1, r2
 8029f02:	1a9a      	subs	r2, r3, r2
 8029f04:	687b      	ldr	r3, [r7, #4]
 8029f06:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8029f08:	6878      	ldr	r0, [r7, #4]
 8029f0a:	f7fa fc30 	bl	802476e <lfs_alloc_drop>

    return 0;
 8029f0e:	2300      	movs	r3, #0
 8029f10:	e004      	b.n	8029f1c <lfs_rawmount+0x344>
            goto cleanup;
 8029f12:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8029f14:	6878      	ldr	r0, [r7, #4]
 8029f16:	f000 f80b 	bl	8029f30 <lfs_rawunmount>
    return err;
 8029f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8029f1c:	4618      	mov	r0, r3
 8029f1e:	3760      	adds	r7, #96	; 0x60
 8029f20:	46bd      	mov	sp, r7
 8029f22:	bd80      	pop	{r7, pc}
 8029f24:	08033954 	.word	0x08033954
 8029f28:	08033840 	.word	0x08033840
 8029f2c:	08033f64 	.word	0x08033f64

08029f30 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8029f30:	b580      	push	{r7, lr}
 8029f32:	b082      	sub	sp, #8
 8029f34:	af00      	add	r7, sp, #0
 8029f36:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8029f38:	6878      	ldr	r0, [r7, #4]
 8029f3a:	f7ff fd85 	bl	8029a48 <lfs_deinit>
 8029f3e:	4603      	mov	r3, r0
}
 8029f40:	4618      	mov	r0, r3
 8029f42:	3708      	adds	r7, #8
 8029f44:	46bd      	mov	sp, r7
 8029f46:	bd80      	pop	{r7, pc}

08029f48 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8029f48:	b590      	push	{r4, r7, lr}
 8029f4a:	b09d      	sub	sp, #116	; 0x74
 8029f4c:	af04      	add	r7, sp, #16
 8029f4e:	60f8      	str	r0, [r7, #12]
 8029f50:	60b9      	str	r1, [r7, #8]
 8029f52:	607a      	str	r2, [r7, #4]
 8029f54:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029f56:	f107 0318 	add.w	r3, r7, #24
 8029f5a:	2220      	movs	r2, #32
 8029f5c:	2100      	movs	r1, #0
 8029f5e:	4618      	mov	r0, r3
 8029f60:	f003 fdc4 	bl	802daec <memset>
 8029f64:	2301      	movs	r3, #1
 8029f66:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8029f68:	2300      	movs	r3, #0
 8029f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8029f6c:	e0a7      	b.n	802a0be <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8029f6e:	68fb      	ldr	r3, [r7, #12]
 8029f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029f72:	6a1b      	ldr	r3, [r3, #32]
 8029f74:	085b      	lsrs	r3, r3, #1
 8029f76:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029f78:	429a      	cmp	r2, r3
 8029f7a:	d302      	bcc.n	8029f82 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029f7c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029f80:	e102      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8029f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029f84:	3301      	adds	r3, #1
 8029f86:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8029f88:	2300      	movs	r3, #0
 8029f8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8029f8c:	e013      	b.n	8029fb6 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8029f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029f90:	3306      	adds	r3, #6
 8029f92:	009b      	lsls	r3, r3, #2
 8029f94:	3360      	adds	r3, #96	; 0x60
 8029f96:	443b      	add	r3, r7
 8029f98:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8029f9c:	68bb      	ldr	r3, [r7, #8]
 8029f9e:	4611      	mov	r1, r2
 8029fa0:	6878      	ldr	r0, [r7, #4]
 8029fa2:	4798      	blx	r3
 8029fa4:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8029fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029fa8:	2b00      	cmp	r3, #0
 8029faa:	d001      	beq.n	8029fb0 <lfs_fs_rawtraverse+0x68>
                return err;
 8029fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029fae:	e0eb      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8029fb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029fb2:	3301      	adds	r3, #1
 8029fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8029fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029fb8:	2b01      	cmp	r3, #1
 8029fba:	dde8      	ble.n	8029f8e <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8029fbc:	f107 0318 	add.w	r3, r7, #24
 8029fc0:	f103 0218 	add.w	r2, r3, #24
 8029fc4:	f107 0318 	add.w	r3, r7, #24
 8029fc8:	4619      	mov	r1, r3
 8029fca:	68f8      	ldr	r0, [r7, #12]
 8029fcc:	f7fb fe1a 	bl	8025c04 <lfs_dir_fetch>
 8029fd0:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8029fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029fd4:	2b00      	cmp	r3, #0
 8029fd6:	d001      	beq.n	8029fdc <lfs_fs_rawtraverse+0x94>
            return err;
 8029fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029fda:	e0d5      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8029fdc:	2300      	movs	r3, #0
 8029fde:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029fe2:	e067      	b.n	802a0b4 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8029fe4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029fe8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8029fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029fee:	f043 0308 	orr.w	r3, r3, #8
 8029ff2:	f107 0118 	add.w	r1, r7, #24
 8029ff6:	f107 0210 	add.w	r2, r7, #16
 8029ffa:	9200      	str	r2, [sp, #0]
 8029ffc:	4a64      	ldr	r2, [pc, #400]	; (802a190 <lfs_fs_rawtraverse+0x248>)
 8029ffe:	68f8      	ldr	r0, [r7, #12]
 802a000:	f7fa fd60 	bl	8024ac4 <lfs_dir_get>
 802a004:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 802a006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a008:	2b00      	cmp	r3, #0
 802a00a:	da05      	bge.n	802a018 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 802a00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a00e:	f113 0f02 	cmn.w	r3, #2
 802a012:	d049      	beq.n	802a0a8 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 802a014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a016:	e0b7      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 802a018:	f107 0310 	add.w	r3, r7, #16
 802a01c:	4618      	mov	r0, r3
 802a01e:	f7fa fa6f 	bl	8024500 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 802a022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a024:	4618      	mov	r0, r3
 802a026:	f7fa f939 	bl	802429c <lfs_tag_type3>
 802a02a:	4603      	mov	r3, r0
 802a02c:	461a      	mov	r2, r3
 802a02e:	f240 2302 	movw	r3, #514	; 0x202
 802a032:	429a      	cmp	r2, r3
 802a034:	d113      	bne.n	802a05e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 802a036:	68f9      	ldr	r1, [r7, #12]
 802a038:	6938      	ldr	r0, [r7, #16]
 802a03a:	697b      	ldr	r3, [r7, #20]
 802a03c:	687a      	ldr	r2, [r7, #4]
 802a03e:	9202      	str	r2, [sp, #8]
 802a040:	68ba      	ldr	r2, [r7, #8]
 802a042:	9201      	str	r2, [sp, #4]
 802a044:	9300      	str	r3, [sp, #0]
 802a046:	4603      	mov	r3, r0
 802a048:	460a      	mov	r2, r1
 802a04a:	2100      	movs	r1, #0
 802a04c:	68f8      	ldr	r0, [r7, #12]
 802a04e:	f7fe f811 	bl	8028074 <lfs_ctz_traverse>
 802a052:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 802a054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a056:	2b00      	cmp	r3, #0
 802a058:	d027      	beq.n	802a0aa <lfs_fs_rawtraverse+0x162>
                    return err;
 802a05a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a05c:	e094      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 802a05e:	78fb      	ldrb	r3, [r7, #3]
 802a060:	2b00      	cmp	r3, #0
 802a062:	d022      	beq.n	802a0aa <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 802a064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a066:	4618      	mov	r0, r3
 802a068:	f7fa f918 	bl	802429c <lfs_tag_type3>
 802a06c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 802a06e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a072:	d11a      	bne.n	802a0aa <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 802a074:	2300      	movs	r3, #0
 802a076:	653b      	str	r3, [r7, #80]	; 0x50
 802a078:	e012      	b.n	802a0a0 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 802a07a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802a07c:	009b      	lsls	r3, r3, #2
 802a07e:	f107 0210 	add.w	r2, r7, #16
 802a082:	4413      	add	r3, r2
 802a084:	681a      	ldr	r2, [r3, #0]
 802a086:	68bb      	ldr	r3, [r7, #8]
 802a088:	4611      	mov	r1, r2
 802a08a:	6878      	ldr	r0, [r7, #4]
 802a08c:	4798      	blx	r3
 802a08e:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 802a090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a092:	2b00      	cmp	r3, #0
 802a094:	d001      	beq.n	802a09a <lfs_fs_rawtraverse+0x152>
                        return err;
 802a096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a098:	e076      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 802a09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802a09c:	3301      	adds	r3, #1
 802a09e:	653b      	str	r3, [r7, #80]	; 0x50
 802a0a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802a0a2:	2b01      	cmp	r3, #1
 802a0a4:	dde9      	ble.n	802a07a <lfs_fs_rawtraverse+0x132>
 802a0a6:	e000      	b.n	802a0aa <lfs_fs_rawtraverse+0x162>
                    continue;
 802a0a8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 802a0aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 802a0ae:	3301      	adds	r3, #1
 802a0b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 802a0b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802a0b6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 802a0ba:	429a      	cmp	r2, r3
 802a0bc:	d392      	bcc.n	8029fe4 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 802a0be:	f107 0318 	add.w	r3, r7, #24
 802a0c2:	3318      	adds	r3, #24
 802a0c4:	4618      	mov	r0, r3
 802a0c6:	f7fa f812 	bl	80240ee <lfs_pair_isnull>
 802a0ca:	4603      	mov	r3, r0
 802a0cc:	f083 0301 	eor.w	r3, r3, #1
 802a0d0:	b2db      	uxtb	r3, r3
 802a0d2:	2b00      	cmp	r3, #0
 802a0d4:	f47f af4b 	bne.w	8029f6e <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802a0d8:	68fb      	ldr	r3, [r7, #12]
 802a0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a0de:	e04f      	b.n	802a180 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 802a0e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0e2:	799b      	ldrb	r3, [r3, #6]
 802a0e4:	2b01      	cmp	r3, #1
 802a0e6:	d147      	bne.n	802a178 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 802a0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a0f0:	2b00      	cmp	r3, #0
 802a0f2:	d01d      	beq.n	802a130 <lfs_fs_rawtraverse+0x1e8>
 802a0f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802a0fc:	2b00      	cmp	r3, #0
 802a0fe:	d117      	bne.n	802a130 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 802a100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a102:	f103 0140 	add.w	r1, r3, #64	; 0x40
 802a106:	68f8      	ldr	r0, [r7, #12]
 802a108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a10a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 802a10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a110:	687a      	ldr	r2, [r7, #4]
 802a112:	9202      	str	r2, [sp, #8]
 802a114:	68ba      	ldr	r2, [r7, #8]
 802a116:	9201      	str	r2, [sp, #4]
 802a118:	9300      	str	r3, [sp, #0]
 802a11a:	4623      	mov	r3, r4
 802a11c:	4602      	mov	r2, r0
 802a11e:	68f8      	ldr	r0, [r7, #12]
 802a120:	f7fd ffa8 	bl	8028074 <lfs_ctz_traverse>
 802a124:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 802a126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802a128:	2b00      	cmp	r3, #0
 802a12a:	d001      	beq.n	802a130 <lfs_fs_rawtraverse+0x1e8>
                return err;
 802a12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802a12e:	e02b      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 802a130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a138:	2b00      	cmp	r3, #0
 802a13a:	d01e      	beq.n	802a17a <lfs_fs_rawtraverse+0x232>
 802a13c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a13e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a140:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802a144:	2b00      	cmp	r3, #0
 802a146:	d118      	bne.n	802a17a <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 802a148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a14a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 802a14e:	68f8      	ldr	r0, [r7, #12]
 802a150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a152:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 802a154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a158:	687a      	ldr	r2, [r7, #4]
 802a15a:	9202      	str	r2, [sp, #8]
 802a15c:	68ba      	ldr	r2, [r7, #8]
 802a15e:	9201      	str	r2, [sp, #4]
 802a160:	9300      	str	r3, [sp, #0]
 802a162:	4623      	mov	r3, r4
 802a164:	4602      	mov	r2, r0
 802a166:	68f8      	ldr	r0, [r7, #12]
 802a168:	f7fd ff84 	bl	8028074 <lfs_ctz_traverse>
 802a16c:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 802a16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802a170:	2b00      	cmp	r3, #0
 802a172:	d002      	beq.n	802a17a <lfs_fs_rawtraverse+0x232>
                return err;
 802a174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802a176:	e007      	b.n	802a188 <lfs_fs_rawtraverse+0x240>
            continue;
 802a178:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802a17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a17c:	681b      	ldr	r3, [r3, #0]
 802a17e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a182:	2b00      	cmp	r3, #0
 802a184:	d1ac      	bne.n	802a0e0 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 802a186:	2300      	movs	r3, #0
}
 802a188:	4618      	mov	r0, r3
 802a18a:	3764      	adds	r7, #100	; 0x64
 802a18c:	46bd      	mov	sp, r7
 802a18e:	bd90      	pop	{r4, r7, pc}
 802a190:	700ffc00 	.word	0x700ffc00

0802a194 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 802a194:	b580      	push	{r7, lr}
 802a196:	b086      	sub	sp, #24
 802a198:	af00      	add	r7, sp, #0
 802a19a:	60f8      	str	r0, [r7, #12]
 802a19c:	60b9      	str	r1, [r7, #8]
 802a19e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 802a1a0:	687b      	ldr	r3, [r7, #4]
 802a1a2:	2200      	movs	r2, #0
 802a1a4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 802a1a6:	687b      	ldr	r3, [r7, #4]
 802a1a8:	2201      	movs	r2, #1
 802a1aa:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 802a1ac:	2300      	movs	r3, #0
 802a1ae:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 802a1b0:	e024      	b.n	802a1fc <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 802a1b2:	68fb      	ldr	r3, [r7, #12]
 802a1b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a1b6:	6a1b      	ldr	r3, [r3, #32]
 802a1b8:	085b      	lsrs	r3, r3, #1
 802a1ba:	697a      	ldr	r2, [r7, #20]
 802a1bc:	429a      	cmp	r2, r3
 802a1be:	d302      	bcc.n	802a1c6 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a1c0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802a1c4:	e027      	b.n	802a216 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 802a1c6:	697b      	ldr	r3, [r7, #20]
 802a1c8:	3301      	adds	r3, #1
 802a1ca:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 802a1cc:	687b      	ldr	r3, [r7, #4]
 802a1ce:	3318      	adds	r3, #24
 802a1d0:	68b9      	ldr	r1, [r7, #8]
 802a1d2:	4618      	mov	r0, r3
 802a1d4:	f7f9 ffa6 	bl	8024124 <lfs_pair_cmp>
 802a1d8:	4603      	mov	r3, r0
 802a1da:	2b00      	cmp	r3, #0
 802a1dc:	d101      	bne.n	802a1e2 <lfs_fs_pred+0x4e>
            return 0;
 802a1de:	2300      	movs	r3, #0
 802a1e0:	e019      	b.n	802a216 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 802a1e2:	687b      	ldr	r3, [r7, #4]
 802a1e4:	3318      	adds	r3, #24
 802a1e6:	461a      	mov	r2, r3
 802a1e8:	6879      	ldr	r1, [r7, #4]
 802a1ea:	68f8      	ldr	r0, [r7, #12]
 802a1ec:	f7fb fd0a 	bl	8025c04 <lfs_dir_fetch>
 802a1f0:	6138      	str	r0, [r7, #16]
        if (err) {
 802a1f2:	693b      	ldr	r3, [r7, #16]
 802a1f4:	2b00      	cmp	r3, #0
 802a1f6:	d001      	beq.n	802a1fc <lfs_fs_pred+0x68>
            return err;
 802a1f8:	693b      	ldr	r3, [r7, #16]
 802a1fa:	e00c      	b.n	802a216 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 802a1fc:	687b      	ldr	r3, [r7, #4]
 802a1fe:	3318      	adds	r3, #24
 802a200:	4618      	mov	r0, r3
 802a202:	f7f9 ff74 	bl	80240ee <lfs_pair_isnull>
 802a206:	4603      	mov	r3, r0
 802a208:	f083 0301 	eor.w	r3, r3, #1
 802a20c:	b2db      	uxtb	r3, r3
 802a20e:	2b00      	cmp	r3, #0
 802a210:	d1cf      	bne.n	802a1b2 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a212:	f06f 0301 	mvn.w	r3, #1
}
 802a216:	4618      	mov	r0, r3
 802a218:	3718      	adds	r7, #24
 802a21a:	46bd      	mov	sp, r7
 802a21c:	bd80      	pop	{r7, pc}

0802a21e <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 802a21e:	b5b0      	push	{r4, r5, r7, lr}
 802a220:	b08e      	sub	sp, #56	; 0x38
 802a222:	af04      	add	r7, sp, #16
 802a224:	60f8      	str	r0, [r7, #12]
 802a226:	60b9      	str	r1, [r7, #8]
 802a228:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 802a22a:	68fb      	ldr	r3, [r7, #12]
 802a22c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 802a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a230:	681b      	ldr	r3, [r3, #0]
 802a232:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 802a234:	687b      	ldr	r3, [r7, #4]
 802a236:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a238:	6a3b      	ldr	r3, [r7, #32]
 802a23a:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 802a23e:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a240:	6a3b      	ldr	r3, [r7, #32]
 802a242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a244:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 802a246:	69fb      	ldr	r3, [r7, #28]
 802a248:	681b      	ldr	r3, [r3, #0]
 802a24a:	69fa      	ldr	r2, [r7, #28]
 802a24c:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 802a24e:	2108      	movs	r1, #8
 802a250:	9103      	str	r1, [sp, #12]
 802a252:	f107 0110 	add.w	r1, r7, #16
 802a256:	9102      	str	r1, [sp, #8]
 802a258:	9201      	str	r2, [sp, #4]
 802a25a:	9300      	str	r3, [sp, #0]
 802a25c:	462b      	mov	r3, r5
 802a25e:	4622      	mov	r2, r4
 802a260:	4601      	mov	r1, r0
 802a262:	6a38      	ldr	r0, [r7, #32]
 802a264:	f7f9 fc0a 	bl	8023a7c <lfs_bd_read>
 802a268:	61b8      	str	r0, [r7, #24]
    if (err) {
 802a26a:	69bb      	ldr	r3, [r7, #24]
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	d001      	beq.n	802a274 <lfs_fs_parent_match+0x56>
        return err;
 802a270:	69bb      	ldr	r3, [r7, #24]
 802a272:	e012      	b.n	802a29a <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 802a274:	f107 0310 	add.w	r3, r7, #16
 802a278:	4618      	mov	r0, r3
 802a27a:	f7f9 ffaa 	bl	80241d2 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 802a27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a280:	1d1a      	adds	r2, r3, #4
 802a282:	f107 0310 	add.w	r3, r7, #16
 802a286:	4611      	mov	r1, r2
 802a288:	4618      	mov	r0, r3
 802a28a:	f7f9 ff4b 	bl	8024124 <lfs_pair_cmp>
 802a28e:	4603      	mov	r3, r0
 802a290:	2b00      	cmp	r3, #0
 802a292:	bf14      	ite	ne
 802a294:	2301      	movne	r3, #1
 802a296:	2300      	moveq	r3, #0
 802a298:	b2db      	uxtb	r3, r3
}
 802a29a:	4618      	mov	r0, r3
 802a29c:	3728      	adds	r7, #40	; 0x28
 802a29e:	46bd      	mov	sp, r7
 802a2a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802a2a4 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 802a2a4:	b580      	push	{r7, lr}
 802a2a6:	b08e      	sub	sp, #56	; 0x38
 802a2a8:	af04      	add	r7, sp, #16
 802a2aa:	60f8      	str	r0, [r7, #12]
 802a2ac:	60b9      	str	r1, [r7, #8]
 802a2ae:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 802a2b0:	687b      	ldr	r3, [r7, #4]
 802a2b2:	2200      	movs	r2, #0
 802a2b4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 802a2b6:	687b      	ldr	r3, [r7, #4]
 802a2b8:	2201      	movs	r2, #1
 802a2ba:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 802a2bc:	2300      	movs	r3, #0
 802a2be:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 802a2c0:	e030      	b.n	802a324 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 802a2c2:	68fb      	ldr	r3, [r7, #12]
 802a2c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a2c6:	6a1b      	ldr	r3, [r3, #32]
 802a2c8:	085b      	lsrs	r3, r3, #1
 802a2ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a2cc:	429a      	cmp	r2, r3
 802a2ce:	d302      	bcc.n	802a2d6 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a2d0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802a2d4:	e033      	b.n	802a33e <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 802a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a2d8:	3301      	adds	r3, #1
 802a2da:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a2dc:	687b      	ldr	r3, [r7, #4]
 802a2de:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a2e2:	68fb      	ldr	r3, [r7, #12]
 802a2e4:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 802a2e6:	68bb      	ldr	r3, [r7, #8]
 802a2e8:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a2ea:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 802a2ec:	68bb      	ldr	r3, [r7, #8]
 802a2ee:	3304      	adds	r3, #4
 802a2f0:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a2f2:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a2f4:	f107 0314 	add.w	r3, r7, #20
 802a2f8:	9303      	str	r3, [sp, #12]
 802a2fa:	4b13      	ldr	r3, [pc, #76]	; (802a348 <lfs_fs_parent+0xa4>)
 802a2fc:	9302      	str	r3, [sp, #8]
 802a2fe:	2300      	movs	r3, #0
 802a300:	9301      	str	r3, [sp, #4]
 802a302:	4b12      	ldr	r3, [pc, #72]	; (802a34c <lfs_fs_parent+0xa8>)
 802a304:	9300      	str	r3, [sp, #0]
 802a306:	4b12      	ldr	r3, [pc, #72]	; (802a350 <lfs_fs_parent+0xac>)
 802a308:	6879      	ldr	r1, [r7, #4]
 802a30a:	68f8      	ldr	r0, [r7, #12]
 802a30c:	f7fb f90c 	bl	8025528 <lfs_dir_fetchmatch>
 802a310:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 802a312:	6a3b      	ldr	r3, [r7, #32]
 802a314:	2b00      	cmp	r3, #0
 802a316:	d005      	beq.n	802a324 <lfs_fs_parent+0x80>
 802a318:	6a3b      	ldr	r3, [r7, #32]
 802a31a:	f113 0f02 	cmn.w	r3, #2
 802a31e:	d001      	beq.n	802a324 <lfs_fs_parent+0x80>
            return tag;
 802a320:	6a3b      	ldr	r3, [r7, #32]
 802a322:	e00c      	b.n	802a33e <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 802a324:	687b      	ldr	r3, [r7, #4]
 802a326:	3318      	adds	r3, #24
 802a328:	4618      	mov	r0, r3
 802a32a:	f7f9 fee0 	bl	80240ee <lfs_pair_isnull>
 802a32e:	4603      	mov	r3, r0
 802a330:	f083 0301 	eor.w	r3, r3, #1
 802a334:	b2db      	uxtb	r3, r3
 802a336:	2b00      	cmp	r3, #0
 802a338:	d1c3      	bne.n	802a2c2 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a33a:	f06f 0301 	mvn.w	r3, #1
}
 802a33e:	4618      	mov	r0, r3
 802a340:	3728      	adds	r7, #40	; 0x28
 802a342:	46bd      	mov	sp, r7
 802a344:	bd80      	pop	{r7, pc}
 802a346:	bf00      	nop
 802a348:	0802a21f 	.word	0x0802a21f
 802a34c:	20000008 	.word	0x20000008
 802a350:	7ff003ff 	.word	0x7ff003ff

0802a354 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 802a354:	b590      	push	{r4, r7, lr}
 802a356:	b083      	sub	sp, #12
 802a358:	af00      	add	r7, sp, #0
 802a35a:	6078      	str	r0, [r7, #4]
 802a35c:	460b      	mov	r3, r1
 802a35e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 802a360:	687b      	ldr	r3, [r7, #4]
 802a362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a364:	4618      	mov	r0, r3
 802a366:	f7f9 ffd3 	bl	8024310 <lfs_tag_size>
 802a36a:	4603      	mov	r3, r0
 802a36c:	2b00      	cmp	r3, #0
 802a36e:	d10a      	bne.n	802a386 <lfs_fs_preporphans+0x32>
 802a370:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a374:	2b00      	cmp	r3, #0
 802a376:	da06      	bge.n	802a386 <lfs_fs_preporphans+0x32>
 802a378:	4b10      	ldr	r3, [pc, #64]	; (802a3bc <lfs_fs_preporphans+0x68>)
 802a37a:	4a11      	ldr	r2, [pc, #68]	; (802a3c0 <lfs_fs_preporphans+0x6c>)
 802a37c:	f241 114c 	movw	r1, #4428	; 0x114c
 802a380:	4810      	ldr	r0, [pc, #64]	; (802a3c4 <lfs_fs_preporphans+0x70>)
 802a382:	f002 f9e3 	bl	802c74c <__assert_func>
    lfs->gstate.tag += orphans;
 802a386:	687b      	ldr	r3, [r7, #4]
 802a388:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802a38a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a38e:	441a      	add	r2, r3
 802a390:	687b      	ldr	r3, [r7, #4]
 802a392:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a394:	687b      	ldr	r3, [r7, #4]
 802a396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a398:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 802a39c:	687b      	ldr	r3, [r7, #4]
 802a39e:	3330      	adds	r3, #48	; 0x30
 802a3a0:	4618      	mov	r0, r3
 802a3a2:	f7fa f818 	bl	80243d6 <lfs_gstate_hasorphans>
 802a3a6:	4603      	mov	r3, r0
 802a3a8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a3aa:	ea44 0203 	orr.w	r2, r4, r3
 802a3ae:	687b      	ldr	r3, [r7, #4]
 802a3b0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 802a3b2:	2300      	movs	r3, #0
}
 802a3b4:	4618      	mov	r0, r3
 802a3b6:	370c      	adds	r7, #12
 802a3b8:	46bd      	mov	sp, r7
 802a3ba:	bd90      	pop	{r4, r7, pc}
 802a3bc:	08033f9c 	.word	0x08033f9c
 802a3c0:	08034bc4 	.word	0x08034bc4
 802a3c4:	08033840 	.word	0x08033840

0802a3c8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 802a3c8:	b480      	push	{r7}
 802a3ca:	b085      	sub	sp, #20
 802a3cc:	af00      	add	r7, sp, #0
 802a3ce:	60f8      	str	r0, [r7, #12]
 802a3d0:	460b      	mov	r3, r1
 802a3d2:	607a      	str	r2, [r7, #4]
 802a3d4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a3d6:	68fb      	ldr	r3, [r7, #12]
 802a3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a3da:	4a17      	ldr	r2, [pc, #92]	; (802a438 <lfs_fs_prepmove+0x70>)
 802a3dc:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 802a3de:	897b      	ldrh	r3, [r7, #10]
 802a3e0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a3e4:	428b      	cmp	r3, r1
 802a3e6:	d006      	beq.n	802a3f6 <lfs_fs_prepmove+0x2e>
 802a3e8:	897b      	ldrh	r3, [r7, #10]
 802a3ea:	029b      	lsls	r3, r3, #10
 802a3ec:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a3f0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a3f4:	e000      	b.n	802a3f8 <lfs_fs_prepmove+0x30>
 802a3f6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a3f8:	431a      	orrs	r2, r3
 802a3fa:	68fb      	ldr	r3, [r7, #12]
 802a3fc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 802a3fe:	897b      	ldrh	r3, [r7, #10]
 802a400:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a404:	4293      	cmp	r3, r2
 802a406:	d002      	beq.n	802a40e <lfs_fs_prepmove+0x46>
 802a408:	687b      	ldr	r3, [r7, #4]
 802a40a:	681b      	ldr	r3, [r3, #0]
 802a40c:	e000      	b.n	802a410 <lfs_fs_prepmove+0x48>
 802a40e:	2300      	movs	r3, #0
 802a410:	68fa      	ldr	r2, [r7, #12]
 802a412:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 802a414:	897b      	ldrh	r3, [r7, #10]
 802a416:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a41a:	4293      	cmp	r3, r2
 802a41c:	d003      	beq.n	802a426 <lfs_fs_prepmove+0x5e>
 802a41e:	687b      	ldr	r3, [r7, #4]
 802a420:	3304      	adds	r3, #4
 802a422:	681b      	ldr	r3, [r3, #0]
 802a424:	e000      	b.n	802a428 <lfs_fs_prepmove+0x60>
 802a426:	2300      	movs	r3, #0
 802a428:	68fa      	ldr	r2, [r7, #12]
 802a42a:	6393      	str	r3, [r2, #56]	; 0x38
}
 802a42c:	bf00      	nop
 802a42e:	3714      	adds	r7, #20
 802a430:	46bd      	mov	sp, r7
 802a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a436:	4770      	bx	lr
 802a438:	800003ff 	.word	0x800003ff

0802a43c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 802a43c:	b5b0      	push	{r4, r5, r7, lr}
 802a43e:	b094      	sub	sp, #80	; 0x50
 802a440:	af04      	add	r7, sp, #16
 802a442:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 802a444:	687b      	ldr	r3, [r7, #4]
 802a446:	333c      	adds	r3, #60	; 0x3c
 802a448:	4618      	mov	r0, r3
 802a44a:	f7f9 ffe6 	bl	802441a <lfs_gstate_hasmove>
 802a44e:	4603      	mov	r3, r0
 802a450:	f083 0301 	eor.w	r3, r3, #1
 802a454:	b2db      	uxtb	r3, r3
 802a456:	2b00      	cmp	r3, #0
 802a458:	d001      	beq.n	802a45e <lfs_fs_demove+0x22>
        return 0;
 802a45a:	2300      	movs	r3, #0
 802a45c:	e049      	b.n	802a4f2 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802a45e:	687b      	ldr	r3, [r7, #4]
 802a460:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 802a462:	687b      	ldr	r3, [r7, #4]
 802a464:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 802a466:	687b      	ldr	r3, [r7, #4]
 802a468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a46a:	4618      	mov	r0, r3
 802a46c:	f7f9 ff40 	bl	80242f0 <lfs_tag_id>
 802a470:	4603      	mov	r3, r0
 802a472:	461a      	mov	r2, r3
 802a474:	4b21      	ldr	r3, [pc, #132]	; (802a4fc <lfs_fs_demove+0xc0>)
 802a476:	9302      	str	r3, [sp, #8]
 802a478:	9201      	str	r2, [sp, #4]
 802a47a:	9400      	str	r4, [sp, #0]
 802a47c:	462b      	mov	r3, r5
 802a47e:	f241 1266 	movw	r2, #4454	; 0x1166
 802a482:	491f      	ldr	r1, [pc, #124]	; (802a500 <lfs_fs_demove+0xc4>)
 802a484:	481f      	ldr	r0, [pc, #124]	; (802a504 <lfs_fs_demove+0xc8>)
 802a486:	f003 f99b 	bl	802d7c0 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802a48a:	687b      	ldr	r3, [r7, #4]
 802a48c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 802a490:	f107 0318 	add.w	r3, r7, #24
 802a494:	4619      	mov	r1, r3
 802a496:	6878      	ldr	r0, [r7, #4]
 802a498:	f7fb fbb4 	bl	8025c04 <lfs_dir_fetch>
 802a49c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 802a49e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a4a0:	2b00      	cmp	r3, #0
 802a4a2:	d001      	beq.n	802a4a8 <lfs_fs_demove+0x6c>
        return err;
 802a4a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a4a6:	e024      	b.n	802a4f2 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 802a4a8:	687b      	ldr	r3, [r7, #4]
 802a4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a4ac:	4618      	mov	r0, r3
 802a4ae:	f7f9 ff1f 	bl	80242f0 <lfs_tag_id>
 802a4b2:	4603      	mov	r3, r0
 802a4b4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a4b6:	2200      	movs	r2, #0
 802a4b8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a4bc:	6878      	ldr	r0, [r7, #4]
 802a4be:	f7ff ff83 	bl	802a3c8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 802a4c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802a4c4:	029b      	lsls	r3, r3, #10
 802a4c6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a4ca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a4ce:	613b      	str	r3, [r7, #16]
 802a4d0:	2300      	movs	r3, #0
 802a4d2:	617b      	str	r3, [r7, #20]
 802a4d4:	f107 0210 	add.w	r2, r7, #16
 802a4d8:	f107 0118 	add.w	r1, r7, #24
 802a4dc:	2301      	movs	r3, #1
 802a4de:	6878      	ldr	r0, [r7, #4]
 802a4e0:	f7fd f9aa 	bl	8027838 <lfs_dir_commit>
 802a4e4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 802a4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a4e8:	2b00      	cmp	r3, #0
 802a4ea:	d001      	beq.n	802a4f0 <lfs_fs_demove+0xb4>
        return err;
 802a4ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a4ee:	e000      	b.n	802a4f2 <lfs_fs_demove+0xb6>
    }

    return 0;
 802a4f0:	2300      	movs	r3, #0
}
 802a4f2:	4618      	mov	r0, r3
 802a4f4:	3740      	adds	r7, #64	; 0x40
 802a4f6:	46bd      	mov	sp, r7
 802a4f8:	bdb0      	pop	{r4, r5, r7, pc}
 802a4fa:	bf00      	nop
 802a4fc:	08033954 	.word	0x08033954
 802a500:	08033840 	.word	0x08033840
 802a504:	08033fd0 	.word	0x08033fd0

0802a508 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 802a508:	b5b0      	push	{r4, r5, r7, lr}
 802a50a:	b0b2      	sub	sp, #200	; 0xc8
 802a50c:	af04      	add	r7, sp, #16
 802a50e:	6078      	str	r0, [r7, #4]
 802a510:	460b      	mov	r3, r1
 802a512:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802a514:	687b      	ldr	r3, [r7, #4]
 802a516:	3330      	adds	r3, #48	; 0x30
 802a518:	4618      	mov	r0, r3
 802a51a:	f7f9 ff5c 	bl	80243d6 <lfs_gstate_hasorphans>
 802a51e:	4603      	mov	r3, r0
 802a520:	f083 0301 	eor.w	r3, r3, #1
 802a524:	b2db      	uxtb	r3, r3
 802a526:	2b00      	cmp	r3, #0
 802a528:	d001      	beq.n	802a52e <lfs_fs_deorphan+0x26>
        return 0;
 802a52a:	2300      	movs	r3, #0
 802a52c:	e17c      	b.n	802a828 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 802a52e:	2300      	movs	r3, #0
 802a530:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802a534:	f107 030c 	add.w	r3, r7, #12
 802a538:	2220      	movs	r2, #32
 802a53a:	2100      	movs	r1, #0
 802a53c:	4618      	mov	r0, r3
 802a53e:	f003 fad5 	bl	802daec <memset>
 802a542:	2301      	movs	r3, #1
 802a544:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802a548:	2301      	movs	r3, #1
 802a54a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802a54c:	e148      	b.n	802a7e0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802a54e:	f107 030c 	add.w	r3, r7, #12
 802a552:	f103 0218 	add.w	r2, r3, #24
 802a556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a55a:	4619      	mov	r1, r3
 802a55c:	6878      	ldr	r0, [r7, #4]
 802a55e:	f7fb fb51 	bl	8025c04 <lfs_dir_fetch>
 802a562:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 802a566:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a56a:	2b00      	cmp	r3, #0
 802a56c:	d002      	beq.n	802a574 <lfs_fs_deorphan+0x6c>
                return err;
 802a56e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a572:	e159      	b.n	802a828 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 802a574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802a578:	f083 0301 	eor.w	r3, r3, #1
 802a57c:	b2db      	uxtb	r3, r3
 802a57e:	2b00      	cmp	r3, #0
 802a580:	f000 8124 	beq.w	802a7cc <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 802a584:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802a588:	f107 030c 	add.w	r3, r7, #12
 802a58c:	3318      	adds	r3, #24
 802a58e:	4619      	mov	r1, r3
 802a590:	6878      	ldr	r0, [r7, #4]
 802a592:	f7ff fe87 	bl	802a2a4 <lfs_fs_parent>
 802a596:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 802a59a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a59e:	2b00      	cmp	r3, #0
 802a5a0:	da07      	bge.n	802a5b2 <lfs_fs_deorphan+0xaa>
 802a5a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a5a6:	f113 0f02 	cmn.w	r3, #2
 802a5aa:	d002      	beq.n	802a5b2 <lfs_fs_deorphan+0xaa>
                    return tag;
 802a5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a5b0:	e13a      	b.n	802a828 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 802a5b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a5b6:	f113 0f02 	cmn.w	r3, #2
 802a5ba:	d157      	bne.n	802a66c <lfs_fs_deorphan+0x164>
 802a5bc:	78fb      	ldrb	r3, [r7, #3]
 802a5be:	2b00      	cmp	r3, #0
 802a5c0:	d054      	beq.n	802a66c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 802a5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a5c6:	499a      	ldr	r1, [pc, #616]	; (802a830 <lfs_fs_deorphan+0x328>)
 802a5c8:	9101      	str	r1, [sp, #4]
 802a5ca:	9300      	str	r3, [sp, #0]
 802a5cc:	4613      	mov	r3, r2
 802a5ce:	f241 12a1 	movw	r2, #4513	; 0x11a1
 802a5d2:	4998      	ldr	r1, [pc, #608]	; (802a834 <lfs_fs_deorphan+0x32c>)
 802a5d4:	4898      	ldr	r0, [pc, #608]	; (802a838 <lfs_fs_deorphan+0x330>)
 802a5d6:	f003 f8f3 	bl	802d7c0 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 802a5da:	687b      	ldr	r3, [r7, #4]
 802a5dc:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802a5e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a5e4:	4619      	mov	r1, r3
 802a5e6:	6878      	ldr	r0, [r7, #4]
 802a5e8:	f7fb fb28 	bl	8025c3c <lfs_dir_getgstate>
 802a5ec:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 802a5f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a5f4:	2b00      	cmp	r3, #0
 802a5f6:	d002      	beq.n	802a5fe <lfs_fs_deorphan+0xf6>
                        return err;
 802a5f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a5fc:	e114      	b.n	802a828 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 802a5fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a602:	3318      	adds	r3, #24
 802a604:	4618      	mov	r0, r3
 802a606:	f7f9 fdfe 	bl	8024206 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a60a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a60e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802a612:	051a      	lsls	r2, r3, #20
 802a614:	4b89      	ldr	r3, [pc, #548]	; (802a83c <lfs_fs_deorphan+0x334>)
 802a616:	4313      	orrs	r3, r2
 802a618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a61c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a620:	3318      	adds	r3, #24
 802a622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a626:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 802a62a:	f107 010c 	add.w	r1, r7, #12
 802a62e:	2301      	movs	r3, #1
 802a630:	6878      	ldr	r0, [r7, #4]
 802a632:	f7fc fe07 	bl	8027244 <lfs_dir_orphaningcommit>
 802a636:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 802a63a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a63e:	3318      	adds	r3, #24
 802a640:	4618      	mov	r0, r3
 802a642:	f7f9 fdc6 	bl	80241d2 <lfs_pair_fromle32>
                    if (state < 0) {
 802a646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a64a:	2b00      	cmp	r3, #0
 802a64c:	da02      	bge.n	802a654 <lfs_fs_deorphan+0x14c>
                        return state;
 802a64e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 802a652:	e0e9      	b.n	802a828 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 802a654:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a658:	3301      	adds	r3, #1
 802a65a:	b2db      	uxtb	r3, r3
 802a65c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 802a660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a664:	2b03      	cmp	r3, #3
 802a666:	f040 80af 	bne.w	802a7c8 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 802a66a:	e763      	b.n	802a534 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 802a66c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a670:	f113 0f02 	cmn.w	r3, #2
 802a674:	f000 80aa 	beq.w	802a7cc <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802a678:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802a67c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802a680:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a684:	9300      	str	r3, [sp, #0]
 802a686:	4613      	mov	r3, r2
 802a688:	4a6d      	ldr	r2, [pc, #436]	; (802a840 <lfs_fs_deorphan+0x338>)
 802a68a:	6878      	ldr	r0, [r7, #4]
 802a68c:	f7fa fa1a 	bl	8024ac4 <lfs_dir_get>
 802a690:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 802a694:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a698:	2b00      	cmp	r3, #0
 802a69a:	da02      	bge.n	802a6a2 <lfs_fs_deorphan+0x19a>
                        return state;
 802a69c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a6a0:	e0c2      	b.n	802a828 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 802a6a2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a6a6:	4618      	mov	r0, r3
 802a6a8:	f7f9 fd93 	bl	80241d2 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 802a6ac:	f107 030c 	add.w	r3, r7, #12
 802a6b0:	f103 0218 	add.w	r2, r3, #24
 802a6b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a6b8:	4611      	mov	r1, r2
 802a6ba:	4618      	mov	r0, r3
 802a6bc:	f7f9 fd5c 	bl	8024178 <lfs_pair_sync>
 802a6c0:	4603      	mov	r3, r0
 802a6c2:	f083 0301 	eor.w	r3, r3, #1
 802a6c6:	b2db      	uxtb	r3, r3
 802a6c8:	2b00      	cmp	r3, #0
 802a6ca:	d07f      	beq.n	802a7cc <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 802a6cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a6d0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802a6d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802a6d8:	4c55      	ldr	r4, [pc, #340]	; (802a830 <lfs_fs_deorphan+0x328>)
 802a6da:	9403      	str	r4, [sp, #12]
 802a6dc:	9102      	str	r1, [sp, #8]
 802a6de:	9201      	str	r2, [sp, #4]
 802a6e0:	9300      	str	r3, [sp, #0]
 802a6e2:	4603      	mov	r3, r0
 802a6e4:	f241 12ca 	movw	r2, #4554	; 0x11ca
 802a6e8:	4952      	ldr	r1, [pc, #328]	; (802a834 <lfs_fs_deorphan+0x32c>)
 802a6ea:	4856      	ldr	r0, [pc, #344]	; (802a844 <lfs_fs_deorphan+0x33c>)
 802a6ec:	f003 f868 	bl	802d7c0 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802a6f0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802a6f4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802a6f8:	687b      	ldr	r3, [r7, #4]
 802a6fa:	3330      	adds	r3, #48	; 0x30
 802a6fc:	f107 020c 	add.w	r2, r7, #12
 802a700:	4611      	mov	r1, r2
 802a702:	4618      	mov	r0, r3
 802a704:	f7f9 fe9c 	bl	8024440 <lfs_gstate_hasmovehere>
 802a708:	4603      	mov	r3, r0
 802a70a:	2b00      	cmp	r3, #0
 802a70c:	d01c      	beq.n	802a748 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802a70e:	687b      	ldr	r3, [r7, #4]
 802a710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a712:	4618      	mov	r0, r3
 802a714:	f7f9 fdec 	bl	80242f0 <lfs_tag_id>
 802a718:	4603      	mov	r3, r0
 802a71a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 802a71e:	68f9      	ldr	r1, [r7, #12]
 802a720:	693b      	ldr	r3, [r7, #16]
 802a722:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802a726:	4842      	ldr	r0, [pc, #264]	; (802a830 <lfs_fs_deorphan+0x328>)
 802a728:	9002      	str	r0, [sp, #8]
 802a72a:	9201      	str	r2, [sp, #4]
 802a72c:	9300      	str	r3, [sp, #0]
 802a72e:	460b      	mov	r3, r1
 802a730:	f241 12d5 	movw	r2, #4565	; 0x11d5
 802a734:	493f      	ldr	r1, [pc, #252]	; (802a834 <lfs_fs_deorphan+0x32c>)
 802a736:	4844      	ldr	r0, [pc, #272]	; (802a848 <lfs_fs_deorphan+0x340>)
 802a738:	f003 f842 	bl	802d7c0 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a73c:	2200      	movs	r2, #0
 802a73e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a742:	6878      	ldr	r0, [r7, #4]
 802a744:	f7ff fe40 	bl	802a3c8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a748:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a74c:	4618      	mov	r0, r3
 802a74e:	f7f9 fd5a 	bl	8024206 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a752:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a756:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a75a:	4293      	cmp	r3, r2
 802a75c:	d007      	beq.n	802a76e <lfs_fs_deorphan+0x266>
 802a75e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a762:	029b      	lsls	r3, r3, #10
 802a764:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a768:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a76c:	e000      	b.n	802a770 <lfs_fs_deorphan+0x268>
 802a76e:	2300      	movs	r3, #0
 802a770:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a772:	2300      	movs	r3, #0
 802a774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a778:	4b34      	ldr	r3, [pc, #208]	; (802a84c <lfs_fs_deorphan+0x344>)
 802a77a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a77e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a786:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a78a:	f107 010c 	add.w	r1, r7, #12
 802a78e:	2302      	movs	r3, #2
 802a790:	6878      	ldr	r0, [r7, #4]
 802a792:	f7fc fd57 	bl	8027244 <lfs_dir_orphaningcommit>
 802a796:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a79a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a79e:	4618      	mov	r0, r3
 802a7a0:	f7f9 fd17 	bl	80241d2 <lfs_pair_fromle32>
                        if (state < 0) {
 802a7a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a7a8:	2b00      	cmp	r3, #0
 802a7aa:	da02      	bge.n	802a7b2 <lfs_fs_deorphan+0x2aa>
                            return state;
 802a7ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 802a7b0:	e03a      	b.n	802a828 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a7b2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a7b6:	3301      	adds	r3, #1
 802a7b8:	b2db      	uxtb	r3, r3
 802a7ba:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a7be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a7c2:	2b03      	cmp	r3, #3
 802a7c4:	d10c      	bne.n	802a7e0 <lfs_fs_deorphan+0x2d8>
 802a7c6:	e6b5      	b.n	802a534 <lfs_fs_deorphan+0x2c>
                    continue;
 802a7c8:	bf00      	nop
 802a7ca:	e009      	b.n	802a7e0 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a7cc:	f107 040c 	add.w	r4, r7, #12
 802a7d0:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 802a7d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a7d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a7d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a7dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 802a7e0:	f107 030c 	add.w	r3, r7, #12
 802a7e4:	3318      	adds	r3, #24
 802a7e6:	4618      	mov	r0, r3
 802a7e8:	f7f9 fc81 	bl	80240ee <lfs_pair_isnull>
 802a7ec:	4603      	mov	r3, r0
 802a7ee:	f083 0301 	eor.w	r3, r3, #1
 802a7f2:	b2db      	uxtb	r3, r3
 802a7f4:	2b00      	cmp	r3, #0
 802a7f6:	f47f aeaa 	bne.w	802a54e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a7fa:	687b      	ldr	r3, [r7, #4]
 802a7fc:	3330      	adds	r3, #48	; 0x30
 802a7fe:	4618      	mov	r0, r3
 802a800:	f7f9 fdfc 	bl	80243fc <lfs_gstate_getorphans>
 802a804:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a806:	461a      	mov	r2, r3
 802a808:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 802a80c:	4619      	mov	r1, r3
 802a80e:	4610      	mov	r0, r2
 802a810:	f7f9 f858 	bl	80238c4 <lfs_min>
 802a814:	4603      	mov	r3, r0
 802a816:	b2db      	uxtb	r3, r3
 802a818:	425b      	negs	r3, r3
 802a81a:	b2db      	uxtb	r3, r3
 802a81c:	b25b      	sxtb	r3, r3
 802a81e:	4619      	mov	r1, r3
 802a820:	6878      	ldr	r0, [r7, #4]
 802a822:	f7ff fd97 	bl	802a354 <lfs_fs_preporphans>
 802a826:	4603      	mov	r3, r0
            found));
}
 802a828:	4618      	mov	r0, r3
 802a82a:	37b8      	adds	r7, #184	; 0xb8
 802a82c:	46bd      	mov	sp, r7
 802a82e:	bdb0      	pop	{r4, r5, r7, pc}
 802a830:	08033954 	.word	0x08033954
 802a834:	08033840 	.word	0x08033840
 802a838:	08034004 	.word	0x08034004
 802a83c:	000ffc08 	.word	0x000ffc08
 802a840:	7ffffc00 	.word	0x7ffffc00
 802a844:	08034034 	.word	0x08034034
 802a848:	08034078 	.word	0x08034078
 802a84c:	600ffc08 	.word	0x600ffc08

0802a850 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a850:	b580      	push	{r7, lr}
 802a852:	b084      	sub	sp, #16
 802a854:	af00      	add	r7, sp, #0
 802a856:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a858:	6878      	ldr	r0, [r7, #4]
 802a85a:	f7ff fdef 	bl	802a43c <lfs_fs_demove>
 802a85e:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a860:	68fb      	ldr	r3, [r7, #12]
 802a862:	2b00      	cmp	r3, #0
 802a864:	d001      	beq.n	802a86a <lfs_fs_forceconsistency+0x1a>
        return err;
 802a866:	68fb      	ldr	r3, [r7, #12]
 802a868:	e00a      	b.n	802a880 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a86a:	2101      	movs	r1, #1
 802a86c:	6878      	ldr	r0, [r7, #4]
 802a86e:	f7ff fe4b 	bl	802a508 <lfs_fs_deorphan>
 802a872:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a874:	68fb      	ldr	r3, [r7, #12]
 802a876:	2b00      	cmp	r3, #0
 802a878:	d001      	beq.n	802a87e <lfs_fs_forceconsistency+0x2e>
        return err;
 802a87a:	68fb      	ldr	r3, [r7, #12]
 802a87c:	e000      	b.n	802a880 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a87e:	2300      	movs	r3, #0
}
 802a880:	4618      	mov	r0, r3
 802a882:	3710      	adds	r7, #16
 802a884:	46bd      	mov	sp, r7
 802a886:	bd80      	pop	{r7, pc}

0802a888 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a888:	b480      	push	{r7}
 802a88a:	b085      	sub	sp, #20
 802a88c:	af00      	add	r7, sp, #0
 802a88e:	6078      	str	r0, [r7, #4]
 802a890:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a892:	687b      	ldr	r3, [r7, #4]
 802a894:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a896:	68fb      	ldr	r3, [r7, #12]
 802a898:	681b      	ldr	r3, [r3, #0]
 802a89a:	1c5a      	adds	r2, r3, #1
 802a89c:	68fb      	ldr	r3, [r7, #12]
 802a89e:	601a      	str	r2, [r3, #0]
    return 0;
 802a8a0:	2300      	movs	r3, #0
}
 802a8a2:	4618      	mov	r0, r3
 802a8a4:	3714      	adds	r7, #20
 802a8a6:	46bd      	mov	sp, r7
 802a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a8ac:	4770      	bx	lr
	...

0802a8b0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a8b0:	b580      	push	{r7, lr}
 802a8b2:	b084      	sub	sp, #16
 802a8b4:	af00      	add	r7, sp, #0
 802a8b6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a8b8:	2300      	movs	r3, #0
 802a8ba:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a8bc:	f107 0208 	add.w	r2, r7, #8
 802a8c0:	2300      	movs	r3, #0
 802a8c2:	4907      	ldr	r1, [pc, #28]	; (802a8e0 <lfs_fs_rawsize+0x30>)
 802a8c4:	6878      	ldr	r0, [r7, #4]
 802a8c6:	f7ff fb3f 	bl	8029f48 <lfs_fs_rawtraverse>
 802a8ca:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a8cc:	68fb      	ldr	r3, [r7, #12]
 802a8ce:	2b00      	cmp	r3, #0
 802a8d0:	d001      	beq.n	802a8d6 <lfs_fs_rawsize+0x26>
        return err;
 802a8d2:	68fb      	ldr	r3, [r7, #12]
 802a8d4:	e000      	b.n	802a8d8 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a8d6:	68bb      	ldr	r3, [r7, #8]
}
 802a8d8:	4618      	mov	r0, r3
 802a8da:	3710      	adds	r7, #16
 802a8dc:	46bd      	mov	sp, r7
 802a8de:	bd80      	pop	{r7, pc}
 802a8e0:	0802a889 	.word	0x0802a889

0802a8e4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a8e4:	b580      	push	{r7, lr}
 802a8e6:	b084      	sub	sp, #16
 802a8e8:	af00      	add	r7, sp, #0
 802a8ea:	6078      	str	r0, [r7, #4]
 802a8ec:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a8ee:	2300      	movs	r3, #0
 802a8f0:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a8f2:	68fb      	ldr	r3, [r7, #12]
 802a8f4:	2b00      	cmp	r3, #0
 802a8f6:	d001      	beq.n	802a8fc <lfs_format+0x18>
        return err;
 802a8f8:	68fb      	ldr	r3, [r7, #12]
 802a8fa:	e005      	b.n	802a908 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a8fc:	6839      	ldr	r1, [r7, #0]
 802a8fe:	6878      	ldr	r0, [r7, #4]
 802a900:	f7ff f8ca 	bl	8029a98 <lfs_rawformat>
 802a904:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a906:	68fb      	ldr	r3, [r7, #12]
}
 802a908:	4618      	mov	r0, r3
 802a90a:	3710      	adds	r7, #16
 802a90c:	46bd      	mov	sp, r7
 802a90e:	bd80      	pop	{r7, pc}

0802a910 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a910:	b580      	push	{r7, lr}
 802a912:	b084      	sub	sp, #16
 802a914:	af00      	add	r7, sp, #0
 802a916:	6078      	str	r0, [r7, #4]
 802a918:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a91a:	2300      	movs	r3, #0
 802a91c:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a91e:	68fb      	ldr	r3, [r7, #12]
 802a920:	2b00      	cmp	r3, #0
 802a922:	d001      	beq.n	802a928 <lfs_mount+0x18>
        return err;
 802a924:	68fb      	ldr	r3, [r7, #12]
 802a926:	e005      	b.n	802a934 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802a928:	6839      	ldr	r1, [r7, #0]
 802a92a:	6878      	ldr	r0, [r7, #4]
 802a92c:	f7ff f954 	bl	8029bd8 <lfs_rawmount>
 802a930:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a932:	68fb      	ldr	r3, [r7, #12]
}
 802a934:	4618      	mov	r0, r3
 802a936:	3710      	adds	r7, #16
 802a938:	46bd      	mov	sp, r7
 802a93a:	bd80      	pop	{r7, pc}

0802a93c <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802a93c:	b580      	push	{r7, lr}
 802a93e:	b084      	sub	sp, #16
 802a940:	af00      	add	r7, sp, #0
 802a942:	6078      	str	r0, [r7, #4]
 802a944:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a946:	2300      	movs	r3, #0
 802a948:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a94a:	68fb      	ldr	r3, [r7, #12]
 802a94c:	2b00      	cmp	r3, #0
 802a94e:	d001      	beq.n	802a954 <lfs_remove+0x18>
        return err;
 802a950:	68fb      	ldr	r3, [r7, #12]
 802a952:	e005      	b.n	802a960 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802a954:	6839      	ldr	r1, [r7, #0]
 802a956:	6878      	ldr	r0, [r7, #4]
 802a958:	f7fe fbd0 	bl	80290fc <lfs_rawremove>
 802a95c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a95e:	68fb      	ldr	r3, [r7, #12]
}
 802a960:	4618      	mov	r0, r3
 802a962:	3710      	adds	r7, #16
 802a964:	46bd      	mov	sp, r7
 802a966:	bd80      	pop	{r7, pc}

0802a968 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802a968:	b580      	push	{r7, lr}
 802a96a:	b086      	sub	sp, #24
 802a96c:	af00      	add	r7, sp, #0
 802a96e:	60f8      	str	r0, [r7, #12]
 802a970:	60b9      	str	r1, [r7, #8]
 802a972:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a974:	2300      	movs	r3, #0
 802a976:	617b      	str	r3, [r7, #20]
    if (err) {
 802a978:	697b      	ldr	r3, [r7, #20]
 802a97a:	2b00      	cmp	r3, #0
 802a97c:	d001      	beq.n	802a982 <lfs_rename+0x1a>
        return err;
 802a97e:	697b      	ldr	r3, [r7, #20]
 802a980:	e006      	b.n	802a990 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802a982:	687a      	ldr	r2, [r7, #4]
 802a984:	68b9      	ldr	r1, [r7, #8]
 802a986:	68f8      	ldr	r0, [r7, #12]
 802a988:	f7fe fc92 	bl	80292b0 <lfs_rawrename>
 802a98c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a98e:	697b      	ldr	r3, [r7, #20]
}
 802a990:	4618      	mov	r0, r3
 802a992:	3718      	adds	r7, #24
 802a994:	46bd      	mov	sp, r7
 802a996:	bd80      	pop	{r7, pc}

0802a998 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802a998:	b580      	push	{r7, lr}
 802a99a:	b086      	sub	sp, #24
 802a99c:	af00      	add	r7, sp, #0
 802a99e:	60f8      	str	r0, [r7, #12]
 802a9a0:	60b9      	str	r1, [r7, #8]
 802a9a2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a9a4:	2300      	movs	r3, #0
 802a9a6:	617b      	str	r3, [r7, #20]
    if (err) {
 802a9a8:	697b      	ldr	r3, [r7, #20]
 802a9aa:	2b00      	cmp	r3, #0
 802a9ac:	d001      	beq.n	802a9b2 <lfs_stat+0x1a>
        return err;
 802a9ae:	697b      	ldr	r3, [r7, #20]
 802a9b0:	e006      	b.n	802a9c0 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802a9b2:	687a      	ldr	r2, [r7, #4]
 802a9b4:	68b9      	ldr	r1, [r7, #8]
 802a9b6:	68f8      	ldr	r0, [r7, #12]
 802a9b8:	f7fe fb7a 	bl	80290b0 <lfs_rawstat>
 802a9bc:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a9be:	697b      	ldr	r3, [r7, #20]
}
 802a9c0:	4618      	mov	r0, r3
 802a9c2:	3718      	adds	r7, #24
 802a9c4:	46bd      	mov	sp, r7
 802a9c6:	bd80      	pop	{r7, pc}

0802a9c8 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802a9c8:	b580      	push	{r7, lr}
 802a9ca:	b088      	sub	sp, #32
 802a9cc:	af02      	add	r7, sp, #8
 802a9ce:	60f8      	str	r0, [r7, #12]
 802a9d0:	60b9      	str	r1, [r7, #8]
 802a9d2:	607a      	str	r2, [r7, #4]
 802a9d4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a9d6:	2300      	movs	r3, #0
 802a9d8:	617b      	str	r3, [r7, #20]
    if (err) {
 802a9da:	697b      	ldr	r3, [r7, #20]
 802a9dc:	2b00      	cmp	r3, #0
 802a9de:	d001      	beq.n	802a9e4 <lfs_file_opencfg+0x1c>
        return err;
 802a9e0:	697b      	ldr	r3, [r7, #20]
 802a9e2:	e01c      	b.n	802aa1e <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a9e4:	68fb      	ldr	r3, [r7, #12]
 802a9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a9e8:	68b9      	ldr	r1, [r7, #8]
 802a9ea:	4618      	mov	r0, r3
 802a9ec:	f7f9 fe28 	bl	8024640 <lfs_mlist_isopen>
 802a9f0:	4603      	mov	r3, r0
 802a9f2:	f083 0301 	eor.w	r3, r3, #1
 802a9f6:	b2db      	uxtb	r3, r3
 802a9f8:	2b00      	cmp	r3, #0
 802a9fa:	d106      	bne.n	802aa0a <lfs_file_opencfg+0x42>
 802a9fc:	4b0a      	ldr	r3, [pc, #40]	; (802aa28 <lfs_file_opencfg+0x60>)
 802a9fe:	4a0b      	ldr	r2, [pc, #44]	; (802aa2c <lfs_file_opencfg+0x64>)
 802aa00:	f241 517b 	movw	r1, #5499	; 0x157b
 802aa04:	480a      	ldr	r0, [pc, #40]	; (802aa30 <lfs_file_opencfg+0x68>)
 802aa06:	f001 fea1 	bl	802c74c <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802aa0a:	6a3b      	ldr	r3, [r7, #32]
 802aa0c:	9300      	str	r3, [sp, #0]
 802aa0e:	683b      	ldr	r3, [r7, #0]
 802aa10:	687a      	ldr	r2, [r7, #4]
 802aa12:	68b9      	ldr	r1, [r7, #8]
 802aa14:	68f8      	ldr	r0, [r7, #12]
 802aa16:	f7fd fba9 	bl	802816c <lfs_file_rawopencfg>
 802aa1a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa1c:	697b      	ldr	r3, [r7, #20]
}
 802aa1e:	4618      	mov	r0, r3
 802aa20:	3718      	adds	r7, #24
 802aa22:	46bd      	mov	sp, r7
 802aa24:	bd80      	pop	{r7, pc}
 802aa26:	bf00      	nop
 802aa28:	080340c0 	.word	0x080340c0
 802aa2c:	08034bd8 	.word	0x08034bd8
 802aa30:	08033840 	.word	0x08033840

0802aa34 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802aa34:	b580      	push	{r7, lr}
 802aa36:	b084      	sub	sp, #16
 802aa38:	af00      	add	r7, sp, #0
 802aa3a:	6078      	str	r0, [r7, #4]
 802aa3c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aa3e:	2300      	movs	r3, #0
 802aa40:	60fb      	str	r3, [r7, #12]
    if (err) {
 802aa42:	68fb      	ldr	r3, [r7, #12]
 802aa44:	2b00      	cmp	r3, #0
 802aa46:	d001      	beq.n	802aa4c <lfs_file_close+0x18>
        return err;
 802aa48:	68fb      	ldr	r3, [r7, #12]
 802aa4a:	e015      	b.n	802aa78 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802aa4c:	687b      	ldr	r3, [r7, #4]
 802aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802aa50:	6839      	ldr	r1, [r7, #0]
 802aa52:	4618      	mov	r0, r3
 802aa54:	f7f9 fdf4 	bl	8024640 <lfs_mlist_isopen>
 802aa58:	4603      	mov	r3, r0
 802aa5a:	2b00      	cmp	r3, #0
 802aa5c:	d106      	bne.n	802aa6c <lfs_file_close+0x38>
 802aa5e:	4b08      	ldr	r3, [pc, #32]	; (802aa80 <lfs_file_close+0x4c>)
 802aa60:	4a08      	ldr	r2, [pc, #32]	; (802aa84 <lfs_file_close+0x50>)
 802aa62:	f241 518a 	movw	r1, #5514	; 0x158a
 802aa66:	4808      	ldr	r0, [pc, #32]	; (802aa88 <lfs_file_close+0x54>)
 802aa68:	f001 fe70 	bl	802c74c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802aa6c:	6839      	ldr	r1, [r7, #0]
 802aa6e:	6878      	ldr	r0, [r7, #4]
 802aa70:	f7fd fd4c 	bl	802850c <lfs_file_rawclose>
 802aa74:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa76:	68fb      	ldr	r3, [r7, #12]
}
 802aa78:	4618      	mov	r0, r3
 802aa7a:	3710      	adds	r7, #16
 802aa7c:	46bd      	mov	sp, r7
 802aa7e:	bd80      	pop	{r7, pc}
 802aa80:	080340f8 	.word	0x080340f8
 802aa84:	08034bec 	.word	0x08034bec
 802aa88:	08033840 	.word	0x08033840

0802aa8c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802aa8c:	b580      	push	{r7, lr}
 802aa8e:	b086      	sub	sp, #24
 802aa90:	af00      	add	r7, sp, #0
 802aa92:	60f8      	str	r0, [r7, #12]
 802aa94:	60b9      	str	r1, [r7, #8]
 802aa96:	607a      	str	r2, [r7, #4]
 802aa98:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aa9a:	2300      	movs	r3, #0
 802aa9c:	617b      	str	r3, [r7, #20]
    if (err) {
 802aa9e:	697b      	ldr	r3, [r7, #20]
 802aaa0:	2b00      	cmp	r3, #0
 802aaa2:	d001      	beq.n	802aaa8 <lfs_file_read+0x1c>
        return err;
 802aaa4:	697b      	ldr	r3, [r7, #20]
 802aaa6:	e017      	b.n	802aad8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802aaa8:	68fb      	ldr	r3, [r7, #12]
 802aaaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802aaac:	68b9      	ldr	r1, [r7, #8]
 802aaae:	4618      	mov	r0, r3
 802aab0:	f7f9 fdc6 	bl	8024640 <lfs_mlist_isopen>
 802aab4:	4603      	mov	r3, r0
 802aab6:	2b00      	cmp	r3, #0
 802aab8:	d106      	bne.n	802aac8 <lfs_file_read+0x3c>
 802aaba:	4b09      	ldr	r3, [pc, #36]	; (802aae0 <lfs_file_read+0x54>)
 802aabc:	4a09      	ldr	r2, [pc, #36]	; (802aae4 <lfs_file_read+0x58>)
 802aabe:	f241 51ac 	movw	r1, #5548	; 0x15ac
 802aac2:	4809      	ldr	r0, [pc, #36]	; (802aae8 <lfs_file_read+0x5c>)
 802aac4:	f001 fe42 	bl	802c74c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802aac8:	683b      	ldr	r3, [r7, #0]
 802aaca:	687a      	ldr	r2, [r7, #4]
 802aacc:	68b9      	ldr	r1, [r7, #8]
 802aace:	68f8      	ldr	r0, [r7, #12]
 802aad0:	f7fe f868 	bl	8028ba4 <lfs_file_rawread>
 802aad4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802aad6:	693b      	ldr	r3, [r7, #16]
}
 802aad8:	4618      	mov	r0, r3
 802aada:	3718      	adds	r7, #24
 802aadc:	46bd      	mov	sp, r7
 802aade:	bd80      	pop	{r7, pc}
 802aae0:	080340f8 	.word	0x080340f8
 802aae4:	08034bfc 	.word	0x08034bfc
 802aae8:	08033840 	.word	0x08033840

0802aaec <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802aaec:	b580      	push	{r7, lr}
 802aaee:	b086      	sub	sp, #24
 802aaf0:	af00      	add	r7, sp, #0
 802aaf2:	60f8      	str	r0, [r7, #12]
 802aaf4:	60b9      	str	r1, [r7, #8]
 802aaf6:	607a      	str	r2, [r7, #4]
 802aaf8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aafa:	2300      	movs	r3, #0
 802aafc:	617b      	str	r3, [r7, #20]
    if (err) {
 802aafe:	697b      	ldr	r3, [r7, #20]
 802ab00:	2b00      	cmp	r3, #0
 802ab02:	d001      	beq.n	802ab08 <lfs_file_write+0x1c>
        return err;
 802ab04:	697b      	ldr	r3, [r7, #20]
 802ab06:	e017      	b.n	802ab38 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802ab08:	68fb      	ldr	r3, [r7, #12]
 802ab0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ab0c:	68b9      	ldr	r1, [r7, #8]
 802ab0e:	4618      	mov	r0, r3
 802ab10:	f7f9 fd96 	bl	8024640 <lfs_mlist_isopen>
 802ab14:	4603      	mov	r3, r0
 802ab16:	2b00      	cmp	r3, #0
 802ab18:	d106      	bne.n	802ab28 <lfs_file_write+0x3c>
 802ab1a:	4b09      	ldr	r3, [pc, #36]	; (802ab40 <lfs_file_write+0x54>)
 802ab1c:	4a09      	ldr	r2, [pc, #36]	; (802ab44 <lfs_file_write+0x58>)
 802ab1e:	f241 51be 	movw	r1, #5566	; 0x15be
 802ab22:	4809      	ldr	r0, [pc, #36]	; (802ab48 <lfs_file_write+0x5c>)
 802ab24:	f001 fe12 	bl	802c74c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802ab28:	683b      	ldr	r3, [r7, #0]
 802ab2a:	687a      	ldr	r2, [r7, #4]
 802ab2c:	68b9      	ldr	r1, [r7, #8]
 802ab2e:	68f8      	ldr	r0, [r7, #12]
 802ab30:	f7fe f996 	bl	8028e60 <lfs_file_rawwrite>
 802ab34:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802ab36:	693b      	ldr	r3, [r7, #16]
}
 802ab38:	4618      	mov	r0, r3
 802ab3a:	3718      	adds	r7, #24
 802ab3c:	46bd      	mov	sp, r7
 802ab3e:	bd80      	pop	{r7, pc}
 802ab40:	080340f8 	.word	0x080340f8
 802ab44:	08034c0c 	.word	0x08034c0c
 802ab48:	08033840 	.word	0x08033840

0802ab4c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802ab4c:	b580      	push	{r7, lr}
 802ab4e:	b086      	sub	sp, #24
 802ab50:	af00      	add	r7, sp, #0
 802ab52:	60f8      	str	r0, [r7, #12]
 802ab54:	60b9      	str	r1, [r7, #8]
 802ab56:	607a      	str	r2, [r7, #4]
 802ab58:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ab5a:	2300      	movs	r3, #0
 802ab5c:	617b      	str	r3, [r7, #20]
    if (err) {
 802ab5e:	697b      	ldr	r3, [r7, #20]
 802ab60:	2b00      	cmp	r3, #0
 802ab62:	d001      	beq.n	802ab68 <lfs_file_seek+0x1c>
        return err;
 802ab64:	697b      	ldr	r3, [r7, #20]
 802ab66:	e017      	b.n	802ab98 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802ab68:	68fb      	ldr	r3, [r7, #12]
 802ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ab6c:	68b9      	ldr	r1, [r7, #8]
 802ab6e:	4618      	mov	r0, r3
 802ab70:	f7f9 fd66 	bl	8024640 <lfs_mlist_isopen>
 802ab74:	4603      	mov	r3, r0
 802ab76:	2b00      	cmp	r3, #0
 802ab78:	d106      	bne.n	802ab88 <lfs_file_seek+0x3c>
 802ab7a:	4b09      	ldr	r3, [pc, #36]	; (802aba0 <lfs_file_seek+0x54>)
 802ab7c:	4a09      	ldr	r2, [pc, #36]	; (802aba4 <lfs_file_seek+0x58>)
 802ab7e:	f241 51d0 	movw	r1, #5584	; 0x15d0
 802ab82:	4809      	ldr	r0, [pc, #36]	; (802aba8 <lfs_file_seek+0x5c>)
 802ab84:	f001 fde2 	bl	802c74c <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802ab88:	683b      	ldr	r3, [r7, #0]
 802ab8a:	687a      	ldr	r2, [r7, #4]
 802ab8c:	68b9      	ldr	r1, [r7, #8]
 802ab8e:	68f8      	ldr	r0, [r7, #12]
 802ab90:	f7fe f9ea 	bl	8028f68 <lfs_file_rawseek>
 802ab94:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802ab96:	693b      	ldr	r3, [r7, #16]
}
 802ab98:	4618      	mov	r0, r3
 802ab9a:	3718      	adds	r7, #24
 802ab9c:	46bd      	mov	sp, r7
 802ab9e:	bd80      	pop	{r7, pc}
 802aba0:	080340f8 	.word	0x080340f8
 802aba4:	08034c1c 	.word	0x08034c1c
 802aba8:	08033840 	.word	0x08033840

0802abac <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802abac:	b580      	push	{r7, lr}
 802abae:	b084      	sub	sp, #16
 802abb0:	af00      	add	r7, sp, #0
 802abb2:	6078      	str	r0, [r7, #4]
 802abb4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802abb6:	2300      	movs	r3, #0
 802abb8:	60fb      	str	r3, [r7, #12]
    if (err) {
 802abba:	68fb      	ldr	r3, [r7, #12]
 802abbc:	2b00      	cmp	r3, #0
 802abbe:	d001      	beq.n	802abc4 <lfs_mkdir+0x18>
        return err;
 802abc0:	68fb      	ldr	r3, [r7, #12]
 802abc2:	e005      	b.n	802abd0 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802abc4:	6839      	ldr	r1, [r7, #0]
 802abc6:	6878      	ldr	r0, [r7, #4]
 802abc8:	f7fc fe5c 	bl	8027884 <lfs_rawmkdir>
 802abcc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802abce:	68fb      	ldr	r3, [r7, #12]
}
 802abd0:	4618      	mov	r0, r3
 802abd2:	3710      	adds	r7, #16
 802abd4:	46bd      	mov	sp, r7
 802abd6:	bd80      	pop	{r7, pc}

0802abd8 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802abd8:	b580      	push	{r7, lr}
 802abda:	b086      	sub	sp, #24
 802abdc:	af00      	add	r7, sp, #0
 802abde:	60f8      	str	r0, [r7, #12]
 802abe0:	60b9      	str	r1, [r7, #8]
 802abe2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802abe4:	2300      	movs	r3, #0
 802abe6:	617b      	str	r3, [r7, #20]
    if (err) {
 802abe8:	697b      	ldr	r3, [r7, #20]
 802abea:	2b00      	cmp	r3, #0
 802abec:	d001      	beq.n	802abf2 <lfs_dir_open+0x1a>
        return err;
 802abee:	697b      	ldr	r3, [r7, #20]
 802abf0:	e019      	b.n	802ac26 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802abf2:	68fb      	ldr	r3, [r7, #12]
 802abf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802abf6:	68b9      	ldr	r1, [r7, #8]
 802abf8:	4618      	mov	r0, r3
 802abfa:	f7f9 fd21 	bl	8024640 <lfs_mlist_isopen>
 802abfe:	4603      	mov	r3, r0
 802ac00:	f083 0301 	eor.w	r3, r3, #1
 802ac04:	b2db      	uxtb	r3, r3
 802ac06:	2b00      	cmp	r3, #0
 802ac08:	d106      	bne.n	802ac18 <lfs_dir_open+0x40>
 802ac0a:	4b09      	ldr	r3, [pc, #36]	; (802ac30 <lfs_dir_open+0x58>)
 802ac0c:	4a09      	ldr	r2, [pc, #36]	; (802ac34 <lfs_dir_open+0x5c>)
 802ac0e:	f241 612d 	movw	r1, #5677	; 0x162d
 802ac12:	4809      	ldr	r0, [pc, #36]	; (802ac38 <lfs_dir_open+0x60>)
 802ac14:	f001 fd9a 	bl	802c74c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802ac18:	687a      	ldr	r2, [r7, #4]
 802ac1a:	68b9      	ldr	r1, [r7, #8]
 802ac1c:	68f8      	ldr	r0, [r7, #12]
 802ac1e:	f7fc ff71 	bl	8027b04 <lfs_dir_rawopen>
 802ac22:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ac24:	697b      	ldr	r3, [r7, #20]
}
 802ac26:	4618      	mov	r0, r3
 802ac28:	3718      	adds	r7, #24
 802ac2a:	46bd      	mov	sp, r7
 802ac2c:	bd80      	pop	{r7, pc}
 802ac2e:	bf00      	nop
 802ac30:	08034130 	.word	0x08034130
 802ac34:	08034c2c 	.word	0x08034c2c
 802ac38:	08033840 	.word	0x08033840

0802ac3c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802ac3c:	b580      	push	{r7, lr}
 802ac3e:	b084      	sub	sp, #16
 802ac40:	af00      	add	r7, sp, #0
 802ac42:	6078      	str	r0, [r7, #4]
 802ac44:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ac46:	2300      	movs	r3, #0
 802ac48:	60fb      	str	r3, [r7, #12]
    if (err) {
 802ac4a:	68fb      	ldr	r3, [r7, #12]
 802ac4c:	2b00      	cmp	r3, #0
 802ac4e:	d001      	beq.n	802ac54 <lfs_dir_close+0x18>
        return err;
 802ac50:	68fb      	ldr	r3, [r7, #12]
 802ac52:	e005      	b.n	802ac60 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802ac54:	6839      	ldr	r1, [r7, #0]
 802ac56:	6878      	ldr	r0, [r7, #4]
 802ac58:	f7fc ffce 	bl	8027bf8 <lfs_dir_rawclose>
 802ac5c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ac5e:	68fb      	ldr	r3, [r7, #12]
}
 802ac60:	4618      	mov	r0, r3
 802ac62:	3710      	adds	r7, #16
 802ac64:	46bd      	mov	sp, r7
 802ac66:	bd80      	pop	{r7, pc}

0802ac68 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802ac68:	b580      	push	{r7, lr}
 802ac6a:	b086      	sub	sp, #24
 802ac6c:	af00      	add	r7, sp, #0
 802ac6e:	60f8      	str	r0, [r7, #12]
 802ac70:	60b9      	str	r1, [r7, #8]
 802ac72:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802ac74:	2300      	movs	r3, #0
 802ac76:	617b      	str	r3, [r7, #20]
    if (err) {
 802ac78:	697b      	ldr	r3, [r7, #20]
 802ac7a:	2b00      	cmp	r3, #0
 802ac7c:	d001      	beq.n	802ac82 <lfs_dir_read+0x1a>
        return err;
 802ac7e:	697b      	ldr	r3, [r7, #20]
 802ac80:	e006      	b.n	802ac90 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802ac82:	687a      	ldr	r2, [r7, #4]
 802ac84:	68b9      	ldr	r1, [r7, #8]
 802ac86:	68f8      	ldr	r0, [r7, #12]
 802ac88:	f7fc ffc4 	bl	8027c14 <lfs_dir_rawread>
 802ac8c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ac8e:	697b      	ldr	r3, [r7, #20]
}
 802ac90:	4618      	mov	r0, r3
 802ac92:	3718      	adds	r7, #24
 802ac94:	46bd      	mov	sp, r7
 802ac96:	bd80      	pop	{r7, pc}

0802ac98 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802ac98:	b580      	push	{r7, lr}
 802ac9a:	b088      	sub	sp, #32
 802ac9c:	af00      	add	r7, sp, #0
 802ac9e:	60f8      	str	r0, [r7, #12]
 802aca0:	60b9      	str	r1, [r7, #8]
 802aca2:	607a      	str	r2, [r7, #4]
 802aca4:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802aca6:	f107 0310 	add.w	r3, r7, #16
 802acaa:	4618      	mov	r0, r3
 802acac:	f7ea faf8 	bl	80152a0 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802acb0:	8abb      	ldrh	r3, [r7, #20]
 802acb2:	461a      	mov	r2, r3
 802acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acb6:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802acb8:	8afb      	ldrh	r3, [r7, #22]
 802acba:	461a      	mov	r2, r3
 802acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acbe:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802acc0:	8b3b      	ldrh	r3, [r7, #24]
 802acc2:	461a      	mov	r2, r3
 802acc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acc6:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802acc8:	8bbb      	ldrh	r3, [r7, #28]
 802acca:	461a      	mov	r2, r3
 802accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acce:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802acd0:	887a      	ldrh	r2, [r7, #2]
 802acd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acd4:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 802acd6:	887a      	ldrh	r2, [r7, #2]
 802acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acda:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 802acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acde:	68fa      	ldr	r2, [r7, #12]
 802ace0:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802ace2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ace4:	68ba      	ldr	r2, [r7, #8]
 802ace6:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acea:	687a      	ldr	r2, [r7, #4]
 802acec:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 802acee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acf0:	4a11      	ldr	r2, [pc, #68]	; (802ad38 <io_fs_init+0xa0>)
 802acf2:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acf6:	4a11      	ldr	r2, [pc, #68]	; (802ad3c <io_fs_init+0xa4>)
 802acf8:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acfc:	4a10      	ldr	r2, [pc, #64]	; (802ad40 <io_fs_init+0xa8>)
 802acfe:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802ad00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ad02:	4a10      	ldr	r2, [pc, #64]	; (802ad44 <io_fs_init+0xac>)
 802ad04:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ad08:	f242 7210 	movw	r2, #10000	; 0x2710
 802ad0c:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 802ad0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ad10:	22ff      	movs	r2, #255	; 0xff
 802ad12:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 802ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ad16:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802ad1a:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 802ad1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ad1e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802ad22:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 802ad24:	8b3b      	ldrh	r3, [r7, #24]
 802ad26:	461a      	mov	r2, r3
 802ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ad2a:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 802ad2c:	2300      	movs	r3, #0
}
 802ad2e:	4618      	mov	r0, r3
 802ad30:	3720      	adds	r7, #32
 802ad32:	46bd      	mov	sp, r7
 802ad34:	bd80      	pop	{r7, pc}
 802ad36:	bf00      	nop
 802ad38:	0802ad49 	.word	0x0802ad49
 802ad3c:	0802ade5 	.word	0x0802ade5
 802ad40:	0802ad9d 	.word	0x0802ad9d
 802ad44:	0802ae39 	.word	0x0802ae39

0802ad48 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802ad48:	b580      	push	{r7, lr}
 802ad4a:	b084      	sub	sp, #16
 802ad4c:	af00      	add	r7, sp, #0
 802ad4e:	60f8      	str	r0, [r7, #12]
 802ad50:	60b9      	str	r1, [r7, #8]
 802ad52:	607a      	str	r2, [r7, #4]
 802ad54:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ad56:	68fb      	ldr	r3, [r7, #12]
 802ad58:	6a1b      	ldr	r3, [r3, #32]
 802ad5a:	68ba      	ldr	r2, [r7, #8]
 802ad5c:	429a      	cmp	r2, r3
 802ad5e:	d305      	bcc.n	802ad6c <block_device_read+0x24>
 802ad60:	4b0b      	ldr	r3, [pc, #44]	; (802ad90 <block_device_read+0x48>)
 802ad62:	4a0c      	ldr	r2, [pc, #48]	; (802ad94 <block_device_read+0x4c>)
 802ad64:	2148      	movs	r1, #72	; 0x48
 802ad66:	480c      	ldr	r0, [pc, #48]	; (802ad98 <block_device_read+0x50>)
 802ad68:	f001 fcf0 	bl	802c74c <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802ad6c:	68fb      	ldr	r3, [r7, #12]
 802ad6e:	69db      	ldr	r3, [r3, #28]
 802ad70:	68ba      	ldr	r2, [r7, #8]
 802ad72:	fb03 f202 	mul.w	r2, r3, r2
 802ad76:	687b      	ldr	r3, [r7, #4]
 802ad78:	4413      	add	r3, r2
 802ad7a:	69ba      	ldr	r2, [r7, #24]
 802ad7c:	b292      	uxth	r2, r2
 802ad7e:	4619      	mov	r1, r3
 802ad80:	6838      	ldr	r0, [r7, #0]
 802ad82:	f7ea fc35 	bl	80155f0 <sFLASH_ReadBuffer>
	return 0;
 802ad86:	2300      	movs	r3, #0
}
 802ad88:	4618      	mov	r0, r3
 802ad8a:	3710      	adds	r7, #16
 802ad8c:	46bd      	mov	sp, r7
 802ad8e:	bd80      	pop	{r7, pc}
 802ad90:	08034168 	.word	0x08034168
 802ad94:	08034c3c 	.word	0x08034c3c
 802ad98:	08034180 	.word	0x08034180

0802ad9c <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802ad9c:	b580      	push	{r7, lr}
 802ad9e:	b082      	sub	sp, #8
 802ada0:	af00      	add	r7, sp, #0
 802ada2:	6078      	str	r0, [r7, #4]
 802ada4:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ada6:	687b      	ldr	r3, [r7, #4]
 802ada8:	6a1b      	ldr	r3, [r3, #32]
 802adaa:	683a      	ldr	r2, [r7, #0]
 802adac:	429a      	cmp	r2, r3
 802adae:	d305      	bcc.n	802adbc <block_device_erase+0x20>
 802adb0:	4b09      	ldr	r3, [pc, #36]	; (802add8 <block_device_erase+0x3c>)
 802adb2:	4a0a      	ldr	r2, [pc, #40]	; (802addc <block_device_erase+0x40>)
 802adb4:	2150      	movs	r1, #80	; 0x50
 802adb6:	480a      	ldr	r0, [pc, #40]	; (802ade0 <block_device_erase+0x44>)
 802adb8:	f001 fcc8 	bl	802c74c <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802adbc:	687b      	ldr	r3, [r7, #4]
 802adbe:	69db      	ldr	r3, [r3, #28]
 802adc0:	683a      	ldr	r2, [r7, #0]
 802adc2:	fb02 f303 	mul.w	r3, r2, r3
 802adc6:	4618      	mov	r0, r3
 802adc8:	f7ea fb10 	bl	80153ec <sFLASH_EraseSector>
	return 0;
 802adcc:	2300      	movs	r3, #0
}
 802adce:	4618      	mov	r0, r3
 802add0:	3708      	adds	r7, #8
 802add2:	46bd      	mov	sp, r7
 802add4:	bd80      	pop	{r7, pc}
 802add6:	bf00      	nop
 802add8:	08034168 	.word	0x08034168
 802addc:	08034c50 	.word	0x08034c50
 802ade0:	08034180 	.word	0x08034180

0802ade4 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802ade4:	b580      	push	{r7, lr}
 802ade6:	b084      	sub	sp, #16
 802ade8:	af00      	add	r7, sp, #0
 802adea:	60f8      	str	r0, [r7, #12]
 802adec:	60b9      	str	r1, [r7, #8]
 802adee:	607a      	str	r2, [r7, #4]
 802adf0:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802adf2:	68fb      	ldr	r3, [r7, #12]
 802adf4:	6a1b      	ldr	r3, [r3, #32]
 802adf6:	68ba      	ldr	r2, [r7, #8]
 802adf8:	429a      	cmp	r2, r3
 802adfa:	d305      	bcc.n	802ae08 <block_device_prog+0x24>
 802adfc:	4b0b      	ldr	r3, [pc, #44]	; (802ae2c <block_device_prog+0x48>)
 802adfe:	4a0c      	ldr	r2, [pc, #48]	; (802ae30 <block_device_prog+0x4c>)
 802ae00:	2158      	movs	r1, #88	; 0x58
 802ae02:	480c      	ldr	r0, [pc, #48]	; (802ae34 <block_device_prog+0x50>)
 802ae04:	f001 fca2 	bl	802c74c <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802ae08:	68fb      	ldr	r3, [r7, #12]
 802ae0a:	69db      	ldr	r3, [r3, #28]
 802ae0c:	68ba      	ldr	r2, [r7, #8]
 802ae0e:	fb03 f202 	mul.w	r2, r3, r2
 802ae12:	687b      	ldr	r3, [r7, #4]
 802ae14:	4413      	add	r3, r2
 802ae16:	69ba      	ldr	r2, [r7, #24]
 802ae18:	b292      	uxth	r2, r2
 802ae1a:	4619      	mov	r1, r3
 802ae1c:	6838      	ldr	r0, [r7, #0]
 802ae1e:	f7ea fb3e 	bl	801549e <sFLASH_WriteBuffer>
	return 0;
 802ae22:	2300      	movs	r3, #0
}
 802ae24:	4618      	mov	r0, r3
 802ae26:	3710      	adds	r7, #16
 802ae28:	46bd      	mov	sp, r7
 802ae2a:	bd80      	pop	{r7, pc}
 802ae2c:	08034168 	.word	0x08034168
 802ae30:	08034c64 	.word	0x08034c64
 802ae34:	08034180 	.word	0x08034180

0802ae38 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802ae38:	b480      	push	{r7}
 802ae3a:	b083      	sub	sp, #12
 802ae3c:	af00      	add	r7, sp, #0
 802ae3e:	6078      	str	r0, [r7, #4]
	return 0;
 802ae40:	2300      	movs	r3, #0
}
 802ae42:	4618      	mov	r0, r3
 802ae44:	370c      	adds	r7, #12
 802ae46:	46bd      	mov	sp, r7
 802ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae4c:	4770      	bx	lr
	...

0802ae50 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802ae50:	b480      	push	{r7}
 802ae52:	b087      	sub	sp, #28
 802ae54:	af00      	add	r7, sp, #0
 802ae56:	60f8      	str	r0, [r7, #12]
 802ae58:	60b9      	str	r1, [r7, #8]
 802ae5a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802ae5c:	68bb      	ldr	r3, [r7, #8]
 802ae5e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802ae60:	2300      	movs	r3, #0
 802ae62:	617b      	str	r3, [r7, #20]
 802ae64:	e024      	b.n	802aeb0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802ae66:	68fb      	ldr	r3, [r7, #12]
 802ae68:	091a      	lsrs	r2, r3, #4
 802ae6a:	6939      	ldr	r1, [r7, #16]
 802ae6c:	697b      	ldr	r3, [r7, #20]
 802ae6e:	440b      	add	r3, r1
 802ae70:	781b      	ldrb	r3, [r3, #0]
 802ae72:	4619      	mov	r1, r3
 802ae74:	68fb      	ldr	r3, [r7, #12]
 802ae76:	404b      	eors	r3, r1
 802ae78:	f003 030f 	and.w	r3, r3, #15
 802ae7c:	4912      	ldr	r1, [pc, #72]	; (802aec8 <lfs_crc+0x78>)
 802ae7e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ae82:	4053      	eors	r3, r2
 802ae84:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802ae86:	68fb      	ldr	r3, [r7, #12]
 802ae88:	091a      	lsrs	r2, r3, #4
 802ae8a:	6939      	ldr	r1, [r7, #16]
 802ae8c:	697b      	ldr	r3, [r7, #20]
 802ae8e:	440b      	add	r3, r1
 802ae90:	781b      	ldrb	r3, [r3, #0]
 802ae92:	091b      	lsrs	r3, r3, #4
 802ae94:	b2db      	uxtb	r3, r3
 802ae96:	4619      	mov	r1, r3
 802ae98:	68fb      	ldr	r3, [r7, #12]
 802ae9a:	404b      	eors	r3, r1
 802ae9c:	f003 030f 	and.w	r3, r3, #15
 802aea0:	4909      	ldr	r1, [pc, #36]	; (802aec8 <lfs_crc+0x78>)
 802aea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802aea6:	4053      	eors	r3, r2
 802aea8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802aeaa:	697b      	ldr	r3, [r7, #20]
 802aeac:	3301      	adds	r3, #1
 802aeae:	617b      	str	r3, [r7, #20]
 802aeb0:	697a      	ldr	r2, [r7, #20]
 802aeb2:	687b      	ldr	r3, [r7, #4]
 802aeb4:	429a      	cmp	r2, r3
 802aeb6:	d3d6      	bcc.n	802ae66 <lfs_crc+0x16>
    }

    return crc;
 802aeb8:	68fb      	ldr	r3, [r7, #12]
}
 802aeba:	4618      	mov	r0, r3
 802aebc:	371c      	adds	r7, #28
 802aebe:	46bd      	mov	sp, r7
 802aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aec4:	4770      	bx	lr
 802aec6:	bf00      	nop
 802aec8:	08034c78 	.word	0x08034c78

0802aecc <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802aecc:	b480      	push	{r7}
 802aece:	b083      	sub	sp, #12
 802aed0:	af00      	add	r7, sp, #0
 802aed2:	6078      	str	r0, [r7, #4]
 802aed4:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802aed6:	687b      	ldr	r3, [r7, #4]
 802aed8:	2b00      	cmp	r3, #0
 802aeda:	d002      	beq.n	802aee2 <spi_fs_init_mutex+0x16>
 802aedc:	4a07      	ldr	r2, [pc, #28]	; (802aefc <spi_fs_init_mutex+0x30>)
 802aede:	687b      	ldr	r3, [r7, #4]
 802aee0:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802aee2:	683b      	ldr	r3, [r7, #0]
 802aee4:	2b00      	cmp	r3, #0
 802aee6:	d002      	beq.n	802aeee <spi_fs_init_mutex+0x22>
 802aee8:	4a05      	ldr	r2, [pc, #20]	; (802af00 <spi_fs_init_mutex+0x34>)
 802aeea:	683b      	ldr	r3, [r7, #0]
 802aeec:	6013      	str	r3, [r2, #0]

};
 802aeee:	bf00      	nop
 802aef0:	370c      	adds	r7, #12
 802aef2:	46bd      	mov	sp, r7
 802aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aef8:	4770      	bx	lr
 802aefa:	bf00      	nop
 802aefc:	2000d9c0 	.word	0x2000d9c0
 802af00:	2000d9c4 	.word	0x2000d9c4

0802af04 <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802af04:	b590      	push	{r4, r7, lr}
 802af06:	b08b      	sub	sp, #44	; 0x2c
 802af08:	af02      	add	r7, sp, #8
 802af0a:	61f8      	str	r0, [r7, #28]
 802af0c:	61b9      	str	r1, [r7, #24]
 802af0e:	617a      	str	r2, [r7, #20]
 802af10:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802af12:	4c14      	ldr	r4, [pc, #80]	; (802af64 <spi_fs_init+0x60>)
 802af14:	463b      	mov	r3, r7
 802af16:	4618      	mov	r0, r3
 802af18:	f7ea f9c2 	bl	80152a0 <sFLASH_GetInfo>
 802af1c:	463b      	mov	r3, r7
 802af1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802af20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802af24:	4b0f      	ldr	r3, [pc, #60]	; (802af64 <spi_fs_init+0x60>)
 802af26:	681b      	ldr	r3, [r3, #0]
 802af28:	2b00      	cmp	r3, #0
 802af2a:	d102      	bne.n	802af32 <spi_fs_init+0x2e>
 802af2c:	f04f 33ff 	mov.w	r3, #4294967295
 802af30:	e013      	b.n	802af5a <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802af32:	8a7b      	ldrh	r3, [r7, #18]
 802af34:	4a0c      	ldr	r2, [pc, #48]	; (802af68 <spi_fs_init+0x64>)
 802af36:	9200      	str	r2, [sp, #0]
 802af38:	697a      	ldr	r2, [r7, #20]
 802af3a:	69b9      	ldr	r1, [r7, #24]
 802af3c:	69f8      	ldr	r0, [r7, #28]
 802af3e:	f7ff feab 	bl	802ac98 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802af42:	220c      	movs	r2, #12
 802af44:	2100      	movs	r1, #0
 802af46:	4809      	ldr	r0, [pc, #36]	; (802af6c <spi_fs_init+0x68>)
 802af48:	f002 fdd0 	bl	802daec <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802af4c:	4b07      	ldr	r3, [pc, #28]	; (802af6c <spi_fs_init+0x68>)
 802af4e:	4a08      	ldr	r2, [pc, #32]	; (802af70 <spi_fs_init+0x6c>)
 802af50:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802af52:	4b06      	ldr	r3, [pc, #24]	; (802af6c <spi_fs_init+0x68>)
 802af54:	2200      	movs	r2, #0
 802af56:	609a      	str	r2, [r3, #8]

	return 0;
 802af58:	2300      	movs	r3, #0
}
 802af5a:	4618      	mov	r0, r3
 802af5c:	3724      	adds	r7, #36	; 0x24
 802af5e:	46bd      	mov	sp, r7
 802af60:	bd90      	pop	{r4, r7, pc}
 802af62:	bf00      	nop
 802af64:	2000d924 	.word	0x2000d924
 802af68:	2000d8d8 	.word	0x2000d8d8
 802af6c:	2000d934 	.word	0x2000d934
 802af70:	2000d4cc 	.word	0x2000d4cc

0802af74 <spi_fs_mount>:

int spi_fs_mount(void){
 802af74:	b580      	push	{r7, lr}
 802af76:	b082      	sub	sp, #8
 802af78:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802af7a:	4b0d      	ldr	r3, [pc, #52]	; (802afb0 <spi_fs_mount+0x3c>)
 802af7c:	681b      	ldr	r3, [r3, #0]
 802af7e:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802af80:	490c      	ldr	r1, [pc, #48]	; (802afb4 <spi_fs_mount+0x40>)
 802af82:	480d      	ldr	r0, [pc, #52]	; (802afb8 <spi_fs_mount+0x44>)
 802af84:	f7ff fcc4 	bl	802a910 <lfs_mount>
 802af88:	6078      	str	r0, [r7, #4]
	if (err) {
 802af8a:	687b      	ldr	r3, [r7, #4]
 802af8c:	2b00      	cmp	r3, #0
 802af8e:	d003      	beq.n	802af98 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802af90:	4b0a      	ldr	r3, [pc, #40]	; (802afbc <spi_fs_mount+0x48>)
 802af92:	2200      	movs	r2, #0
 802af94:	701a      	strb	r2, [r3, #0]
 802af96:	e002      	b.n	802af9e <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802af98:	4b08      	ldr	r3, [pc, #32]	; (802afbc <spi_fs_mount+0x48>)
 802af9a:	2201      	movs	r2, #1
 802af9c:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802af9e:	4b08      	ldr	r3, [pc, #32]	; (802afc0 <spi_fs_mount+0x4c>)
 802afa0:	681b      	ldr	r3, [r3, #0]
 802afa2:	4798      	blx	r3
#endif

	return err;
 802afa4:	687b      	ldr	r3, [r7, #4]
}
 802afa6:	4618      	mov	r0, r3
 802afa8:	3708      	adds	r7, #8
 802afaa:	46bd      	mov	sp, r7
 802afac:	bd80      	pop	{r7, pc}
 802afae:	bf00      	nop
 802afb0:	2000d9c0 	.word	0x2000d9c0
 802afb4:	2000d8d8 	.word	0x2000d8d8
 802afb8:	2000d6d0 	.word	0x2000d6d0
 802afbc:	2000d6cc 	.word	0x2000d6cc
 802afc0:	2000d9c4 	.word	0x2000d9c4

0802afc4 <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802afc4:	b580      	push	{r7, lr}
 802afc6:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802afc8:	4902      	ldr	r1, [pc, #8]	; (802afd4 <spi_fs_format+0x10>)
 802afca:	4803      	ldr	r0, [pc, #12]	; (802afd8 <spi_fs_format+0x14>)
 802afcc:	f7ff fc8a 	bl	802a8e4 <lfs_format>
}
 802afd0:	bf00      	nop
 802afd2:	bd80      	pop	{r7, pc}
 802afd4:	2000d8d8 	.word	0x2000d8d8
 802afd8:	2000d6d0 	.word	0x2000d6d0

0802afdc <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802afdc:	b580      	push	{r7, lr}
 802afde:	b088      	sub	sp, #32
 802afe0:	af02      	add	r7, sp, #8
 802afe2:	60f8      	str	r0, [r7, #12]
 802afe4:	60b9      	str	r1, [r7, #8]
 802afe6:	607a      	str	r2, [r7, #4]
 802afe8:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802afea:	4b19      	ldr	r3, [pc, #100]	; (802b050 <spi_fs_read_file_offset+0x74>)
 802afec:	681b      	ldr	r3, [r3, #0]
 802afee:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802aff0:	4b18      	ldr	r3, [pc, #96]	; (802b054 <spi_fs_read_file_offset+0x78>)
 802aff2:	9300      	str	r3, [sp, #0]
 802aff4:	f240 1301 	movw	r3, #257	; 0x101
 802aff8:	68fa      	ldr	r2, [r7, #12]
 802affa:	4917      	ldr	r1, [pc, #92]	; (802b058 <spi_fs_read_file_offset+0x7c>)
 802affc:	4817      	ldr	r0, [pc, #92]	; (802b05c <spi_fs_read_file_offset+0x80>)
 802affe:	f7ff fce3 	bl	802a9c8 <lfs_file_opencfg>
 802b002:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b004:	697b      	ldr	r3, [r7, #20]
 802b006:	2b00      	cmp	r3, #0
 802b008:	db13      	blt.n	802b032 <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802b00a:	687a      	ldr	r2, [r7, #4]
 802b00c:	2300      	movs	r3, #0
 802b00e:	4912      	ldr	r1, [pc, #72]	; (802b058 <spi_fs_read_file_offset+0x7c>)
 802b010:	4812      	ldr	r0, [pc, #72]	; (802b05c <spi_fs_read_file_offset+0x80>)
 802b012:	f7ff fd9b 	bl	802ab4c <lfs_file_seek>
 802b016:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b018:	697b      	ldr	r3, [r7, #20]
 802b01a:	2b00      	cmp	r3, #0
 802b01c:	db0b      	blt.n	802b036 <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802b01e:	683b      	ldr	r3, [r7, #0]
 802b020:	68ba      	ldr	r2, [r7, #8]
 802b022:	490d      	ldr	r1, [pc, #52]	; (802b058 <spi_fs_read_file_offset+0x7c>)
 802b024:	480d      	ldr	r0, [pc, #52]	; (802b05c <spi_fs_read_file_offset+0x80>)
 802b026:	f7ff fd31 	bl	802aa8c <lfs_file_read>
 802b02a:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b02c:	697b      	ldr	r3, [r7, #20]
 802b02e:	2b00      	cmp	r3, #0

	func_end:
 802b030:	e002      	b.n	802b038 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802b032:	bf00      	nop
 802b034:	e000      	b.n	802b038 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802b036:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802b038:	4907      	ldr	r1, [pc, #28]	; (802b058 <spi_fs_read_file_offset+0x7c>)
 802b03a:	4808      	ldr	r0, [pc, #32]	; (802b05c <spi_fs_read_file_offset+0x80>)
 802b03c:	f7ff fcfa 	bl	802aa34 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b040:	4b07      	ldr	r3, [pc, #28]	; (802b060 <spi_fs_read_file_offset+0x84>)
 802b042:	681b      	ldr	r3, [r3, #0]
 802b044:	4798      	blx	r3
#endif
	return err;
 802b046:	697b      	ldr	r3, [r7, #20]

}
 802b048:	4618      	mov	r0, r3
 802b04a:	3718      	adds	r7, #24
 802b04c:	46bd      	mov	sp, r7
 802b04e:	bd80      	pop	{r7, pc}
 802b050:	2000d9c0 	.word	0x2000d9c0
 802b054:	2000d934 	.word	0x2000d934
 802b058:	2000d748 	.word	0x2000d748
 802b05c:	2000d6d0 	.word	0x2000d6d0
 802b060:	2000d9c4 	.word	0x2000d9c4

0802b064 <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802b064:	b580      	push	{r7, lr}
 802b066:	b088      	sub	sp, #32
 802b068:	af02      	add	r7, sp, #8
 802b06a:	60f8      	str	r0, [r7, #12]
 802b06c:	60b9      	str	r1, [r7, #8]
 802b06e:	607a      	str	r2, [r7, #4]
	int err = 0;
 802b070:	2300      	movs	r3, #0
 802b072:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b074:	4b12      	ldr	r3, [pc, #72]	; (802b0c0 <spi_fs_over_write_file+0x5c>)
 802b076:	681b      	ldr	r3, [r3, #0]
 802b078:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802b07a:	4b12      	ldr	r3, [pc, #72]	; (802b0c4 <spi_fs_over_write_file+0x60>)
 802b07c:	9300      	str	r3, [sp, #0]
 802b07e:	f240 5303 	movw	r3, #1283	; 0x503
 802b082:	68fa      	ldr	r2, [r7, #12]
 802b084:	4910      	ldr	r1, [pc, #64]	; (802b0c8 <spi_fs_over_write_file+0x64>)
 802b086:	4811      	ldr	r0, [pc, #68]	; (802b0cc <spi_fs_over_write_file+0x68>)
 802b088:	f7ff fc9e 	bl	802a9c8 <lfs_file_opencfg>
 802b08c:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b08e:	697b      	ldr	r3, [r7, #20]
 802b090:	2b00      	cmp	r3, #0
 802b092:	db0b      	blt.n	802b0ac <spi_fs_over_write_file+0x48>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802b094:	687b      	ldr	r3, [r7, #4]
 802b096:	68ba      	ldr	r2, [r7, #8]
 802b098:	490b      	ldr	r1, [pc, #44]	; (802b0c8 <spi_fs_over_write_file+0x64>)
 802b09a:	480c      	ldr	r0, [pc, #48]	; (802b0cc <spi_fs_over_write_file+0x68>)
 802b09c:	f7ff fd26 	bl	802aaec <lfs_file_write>
 802b0a0:	6178      	str	r0, [r7, #20]

	lfs_file_close(&lfs, &file);
 802b0a2:	4909      	ldr	r1, [pc, #36]	; (802b0c8 <spi_fs_over_write_file+0x64>)
 802b0a4:	4809      	ldr	r0, [pc, #36]	; (802b0cc <spi_fs_over_write_file+0x68>)
 802b0a6:	f7ff fcc5 	bl	802aa34 <lfs_file_close>
 802b0aa:	e000      	b.n	802b0ae <spi_fs_over_write_file+0x4a>
	if (err < 0) goto func_end;
 802b0ac:	bf00      	nop
	func_end:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b0ae:	4b08      	ldr	r3, [pc, #32]	; (802b0d0 <spi_fs_over_write_file+0x6c>)
 802b0b0:	681b      	ldr	r3, [r3, #0]
 802b0b2:	4798      	blx	r3
#endif
	return err;
 802b0b4:	697b      	ldr	r3, [r7, #20]
}
 802b0b6:	4618      	mov	r0, r3
 802b0b8:	3718      	adds	r7, #24
 802b0ba:	46bd      	mov	sp, r7
 802b0bc:	bd80      	pop	{r7, pc}
 802b0be:	bf00      	nop
 802b0c0:	2000d9c0 	.word	0x2000d9c0
 802b0c4:	2000d934 	.word	0x2000d934
 802b0c8:	2000d748 	.word	0x2000d748
 802b0cc:	2000d6d0 	.word	0x2000d6d0
 802b0d0:	2000d9c4 	.word	0x2000d9c4

0802b0d4 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802b0d4:	b580      	push	{r7, lr}
 802b0d6:	b084      	sub	sp, #16
 802b0d8:	af00      	add	r7, sp, #0
 802b0da:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b0dc:	4b0b      	ldr	r3, [pc, #44]	; (802b10c <spi_fs_file_size+0x38>)
 802b0de:	681b      	ldr	r3, [r3, #0]
 802b0e0:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802b0e2:	4a0b      	ldr	r2, [pc, #44]	; (802b110 <spi_fs_file_size+0x3c>)
 802b0e4:	6879      	ldr	r1, [r7, #4]
 802b0e6:	480b      	ldr	r0, [pc, #44]	; (802b114 <spi_fs_file_size+0x40>)
 802b0e8:	f7ff fc56 	bl	802a998 <lfs_stat>
 802b0ec:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802b0ee:	68fb      	ldr	r3, [r7, #12]
 802b0f0:	2b00      	cmp	r3, #0
 802b0f2:	d102      	bne.n	802b0fa <spi_fs_file_size+0x26>
		err = file_info.size;
 802b0f4:	4b06      	ldr	r3, [pc, #24]	; (802b110 <spi_fs_file_size+0x3c>)
 802b0f6:	685b      	ldr	r3, [r3, #4]
 802b0f8:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b0fa:	4b07      	ldr	r3, [pc, #28]	; (802b118 <spi_fs_file_size+0x44>)
 802b0fc:	681b      	ldr	r3, [r3, #0]
 802b0fe:	4798      	blx	r3
#endif
	return err;
 802b100:	68fb      	ldr	r3, [r7, #12]
}
 802b102:	4618      	mov	r0, r3
 802b104:	3710      	adds	r7, #16
 802b106:	46bd      	mov	sp, r7
 802b108:	bd80      	pop	{r7, pc}
 802b10a:	bf00      	nop
 802b10c:	2000d9c0 	.word	0x2000d9c0
 802b110:	2000d7d0 	.word	0x2000d7d0
 802b114:	2000d6d0 	.word	0x2000d6d0
 802b118:	2000d9c4 	.word	0x2000d9c4

0802b11c <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802b11c:	b580      	push	{r7, lr}
 802b11e:	b088      	sub	sp, #32
 802b120:	af02      	add	r7, sp, #8
 802b122:	60f8      	str	r0, [r7, #12]
 802b124:	60b9      	str	r1, [r7, #8]
 802b126:	607a      	str	r2, [r7, #4]
	int err = 0;
 802b128:	2300      	movs	r3, #0
 802b12a:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b12c:	4b13      	ldr	r3, [pc, #76]	; (802b17c <spi_fs_write_file_to_end+0x60>)
 802b12e:	681b      	ldr	r3, [r3, #0]
 802b130:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802b132:	4b13      	ldr	r3, [pc, #76]	; (802b180 <spi_fs_write_file_to_end+0x64>)
 802b134:	9300      	str	r3, [sp, #0]
 802b136:	f640 1303 	movw	r3, #2307	; 0x903
 802b13a:	68fa      	ldr	r2, [r7, #12]
 802b13c:	4911      	ldr	r1, [pc, #68]	; (802b184 <spi_fs_write_file_to_end+0x68>)
 802b13e:	4812      	ldr	r0, [pc, #72]	; (802b188 <spi_fs_write_file_to_end+0x6c>)
 802b140:	f7ff fc42 	bl	802a9c8 <lfs_file_opencfg>
 802b144:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b146:	697b      	ldr	r3, [r7, #20]
 802b148:	2b00      	cmp	r3, #0
 802b14a:	db09      	blt.n	802b160 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802b14c:	687b      	ldr	r3, [r7, #4]
 802b14e:	68ba      	ldr	r2, [r7, #8]
 802b150:	490c      	ldr	r1, [pc, #48]	; (802b184 <spi_fs_write_file_to_end+0x68>)
 802b152:	480d      	ldr	r0, [pc, #52]	; (802b188 <spi_fs_write_file_to_end+0x6c>)
 802b154:	f7ff fcca 	bl	802aaec <lfs_file_write>
 802b158:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b15a:	697b      	ldr	r3, [r7, #20]
 802b15c:	2b00      	cmp	r3, #0

	func_end:
 802b15e:	e000      	b.n	802b162 <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802b160:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802b162:	4908      	ldr	r1, [pc, #32]	; (802b184 <spi_fs_write_file_to_end+0x68>)
 802b164:	4808      	ldr	r0, [pc, #32]	; (802b188 <spi_fs_write_file_to_end+0x6c>)
 802b166:	f7ff fc65 	bl	802aa34 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b16a:	4b08      	ldr	r3, [pc, #32]	; (802b18c <spi_fs_write_file_to_end+0x70>)
 802b16c:	681b      	ldr	r3, [r3, #0]
 802b16e:	4798      	blx	r3
#endif
	return err;
 802b170:	697b      	ldr	r3, [r7, #20]
}
 802b172:	4618      	mov	r0, r3
 802b174:	3718      	adds	r7, #24
 802b176:	46bd      	mov	sp, r7
 802b178:	bd80      	pop	{r7, pc}
 802b17a:	bf00      	nop
 802b17c:	2000d9c0 	.word	0x2000d9c0
 802b180:	2000d934 	.word	0x2000d934
 802b184:	2000d748 	.word	0x2000d748
 802b188:	2000d6d0 	.word	0x2000d6d0
 802b18c:	2000d9c4 	.word	0x2000d9c4

0802b190 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802b190:	b580      	push	{r7, lr}
 802b192:	b084      	sub	sp, #16
 802b194:	af00      	add	r7, sp, #0
 802b196:	6078      	str	r0, [r7, #4]
 802b198:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802b19a:	2280      	movs	r2, #128	; 0x80
 802b19c:	2100      	movs	r1, #0
 802b19e:	480a      	ldr	r0, [pc, #40]	; (802b1c8 <spi_fs_serch_file_in_dir+0x38>)
 802b1a0:	f002 fca4 	bl	802daec <memset>
	strcpy((char *)temp_buf, dir_path);
 802b1a4:	6879      	ldr	r1, [r7, #4]
 802b1a6:	4808      	ldr	r0, [pc, #32]	; (802b1c8 <spi_fs_serch_file_in_dir+0x38>)
 802b1a8:	f002 fe6d 	bl	802de86 <strcpy>
	strcat((char *)temp_buf, filename);
 802b1ac:	6839      	ldr	r1, [r7, #0]
 802b1ae:	4806      	ldr	r0, [pc, #24]	; (802b1c8 <spi_fs_serch_file_in_dir+0x38>)
 802b1b0:	f002 fca4 	bl	802dafc <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802b1b4:	4804      	ldr	r0, [pc, #16]	; (802b1c8 <spi_fs_serch_file_in_dir+0x38>)
 802b1b6:	f7ff ff8d 	bl	802b0d4 <spi_fs_file_size>
 802b1ba:	60f8      	str	r0, [r7, #12]
	return err;
 802b1bc:	68fb      	ldr	r3, [r7, #12]

}
 802b1be:	4618      	mov	r0, r3
 802b1c0:	3710      	adds	r7, #16
 802b1c2:	46bd      	mov	sp, r7
 802b1c4:	bd80      	pop	{r7, pc}
 802b1c6:	bf00      	nop
 802b1c8:	2000d940 	.word	0x2000d940

0802b1cc <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802b1cc:	b580      	push	{r7, lr}
 802b1ce:	b084      	sub	sp, #16
 802b1d0:	af00      	add	r7, sp, #0
 802b1d2:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b1d4:	4b07      	ldr	r3, [pc, #28]	; (802b1f4 <spi_fs_mkdir+0x28>)
 802b1d6:	681b      	ldr	r3, [r3, #0]
 802b1d8:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802b1da:	6879      	ldr	r1, [r7, #4]
 802b1dc:	4806      	ldr	r0, [pc, #24]	; (802b1f8 <spi_fs_mkdir+0x2c>)
 802b1de:	f7ff fce5 	bl	802abac <lfs_mkdir>
 802b1e2:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b1e4:	4b05      	ldr	r3, [pc, #20]	; (802b1fc <spi_fs_mkdir+0x30>)
 802b1e6:	681b      	ldr	r3, [r3, #0]
 802b1e8:	4798      	blx	r3
#endif

	return err;
 802b1ea:	68fb      	ldr	r3, [r7, #12]
}
 802b1ec:	4618      	mov	r0, r3
 802b1ee:	3710      	adds	r7, #16
 802b1f0:	46bd      	mov	sp, r7
 802b1f2:	bd80      	pop	{r7, pc}
 802b1f4:	2000d9c0 	.word	0x2000d9c0
 802b1f8:	2000d6d0 	.word	0x2000d6d0
 802b1fc:	2000d9c4 	.word	0x2000d9c4

0802b200 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802b200:	b580      	push	{r7, lr}
 802b202:	b084      	sub	sp, #16
 802b204:	af00      	add	r7, sp, #0
 802b206:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b208:	4b07      	ldr	r3, [pc, #28]	; (802b228 <spi_fs_remove+0x28>)
 802b20a:	681b      	ldr	r3, [r3, #0]
 802b20c:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802b20e:	6879      	ldr	r1, [r7, #4]
 802b210:	4806      	ldr	r0, [pc, #24]	; (802b22c <spi_fs_remove+0x2c>)
 802b212:	f7ff fb93 	bl	802a93c <lfs_remove>
 802b216:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b218:	4b05      	ldr	r3, [pc, #20]	; (802b230 <spi_fs_remove+0x30>)
 802b21a:	681b      	ldr	r3, [r3, #0]
 802b21c:	4798      	blx	r3
#endif
	return err;
 802b21e:	68fb      	ldr	r3, [r7, #12]
}
 802b220:	4618      	mov	r0, r3
 802b222:	3710      	adds	r7, #16
 802b224:	46bd      	mov	sp, r7
 802b226:	bd80      	pop	{r7, pc}
 802b228:	2000d9c0 	.word	0x2000d9c0
 802b22c:	2000d6d0 	.word	0x2000d6d0
 802b230:	2000d9c4 	.word	0x2000d9c4

0802b234 <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path, uint8_t deep) {
 802b234:	b580      	push	{r7, lr}
 802b236:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802b23a:	af02      	add	r7, sp, #8
 802b23c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b240:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b244:	6018      	str	r0, [r3, #0]
 802b246:	460a      	mov	r2, r1
 802b248:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b24c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b250:	701a      	strb	r2, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802b252:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b256:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b25a:	681a      	ldr	r2, [r3, #0]
 802b25c:	4945      	ldr	r1, [pc, #276]	; (802b374 <remove_recursively_files_and_directories+0x140>)
 802b25e:	4846      	ldr	r0, [pc, #280]	; (802b378 <remove_recursively_files_and_directories+0x144>)
 802b260:	f7ff fcba 	bl	802abd8 <lfs_dir_open>
 802b264:	4603      	mov	r3, r0
 802b266:	2b00      	cmp	r3, #0
 802b268:	d17f      	bne.n	802b36a <remove_recursively_files_and_directories+0x136>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b26a:	e061      	b.n	802b330 <remove_recursively_files_and_directories+0xfc>
            if (info.type == LFS_TYPE_DIR) {
 802b26c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b270:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802b274:	781b      	ldrb	r3, [r3, #0]
 802b276:	2b02      	cmp	r3, #2
 802b278:	d13d      	bne.n	802b2f6 <remove_recursively_files_and_directories+0xc2>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802b27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b27e:	3308      	adds	r3, #8
 802b280:	493e      	ldr	r1, [pc, #248]	; (802b37c <remove_recursively_files_and_directories+0x148>)
 802b282:	4618      	mov	r0, r3
 802b284:	f7e4 ffac 	bl	80101e0 <strcmp>
 802b288:	4603      	mov	r3, r0
 802b28a:	2b00      	cmp	r3, #0
 802b28c:	d050      	beq.n	802b330 <remove_recursively_files_and_directories+0xfc>
 802b28e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b292:	3308      	adds	r3, #8
 802b294:	493a      	ldr	r1, [pc, #232]	; (802b380 <remove_recursively_files_and_directories+0x14c>)
 802b296:	4618      	mov	r0, r3
 802b298:	f7e4 ffa2 	bl	80101e0 <strcmp>
 802b29c:	4603      	mov	r3, r0
 802b29e:	2b00      	cmp	r3, #0
 802b2a0:	d100      	bne.n	802b2a4 <remove_recursively_files_and_directories+0x70>
 802b2a2:	e045      	b.n	802b330 <remove_recursively_files_and_directories+0xfc>
                printf("Directory: %s\n", info.name);
 802b2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b2a8:	3308      	adds	r3, #8
 802b2aa:	4619      	mov	r1, r3
 802b2ac:	4835      	ldr	r0, [pc, #212]	; (802b384 <remove_recursively_files_and_directories+0x150>)
 802b2ae:	f002 fa87 	bl	802d7c0 <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802b2b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b2b6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b2ba:	f107 0008 	add.w	r0, r7, #8
 802b2be:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802b2c2:	3208      	adds	r2, #8
 802b2c4:	9200      	str	r2, [sp, #0]
 802b2c6:	681b      	ldr	r3, [r3, #0]
 802b2c8:	4a2f      	ldr	r2, [pc, #188]	; (802b388 <remove_recursively_files_and_directories+0x154>)
 802b2ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b2ce:	f002 fa89 	bl	802d7e4 <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802b2d2:	4928      	ldr	r1, [pc, #160]	; (802b374 <remove_recursively_files_and_directories+0x140>)
 802b2d4:	4828      	ldr	r0, [pc, #160]	; (802b378 <remove_recursively_files_and_directories+0x144>)
 802b2d6:	f7ff fcb1 	bl	802ac3c <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path, deep + 1);  // Recursive call for subdirectories
 802b2da:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b2de:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b2e2:	781b      	ldrb	r3, [r3, #0]
 802b2e4:	3301      	adds	r3, #1
 802b2e6:	b2da      	uxtb	r2, r3
 802b2e8:	f107 0308 	add.w	r3, r7, #8
 802b2ec:	4611      	mov	r1, r2
 802b2ee:	4618      	mov	r0, r3
 802b2f0:	f7ff ffa0 	bl	802b234 <remove_recursively_files_and_directories>
 802b2f4:	e01c      	b.n	802b330 <remove_recursively_files_and_directories+0xfc>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802b2f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b2fa:	3308      	adds	r3, #8
 802b2fc:	4619      	mov	r1, r3
 802b2fe:	4823      	ldr	r0, [pc, #140]	; (802b38c <remove_recursively_files_and_directories+0x158>)
 802b300:	f002 fa5e 	bl	802d7c0 <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802b304:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b308:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b30c:	f107 0008 	add.w	r0, r7, #8
 802b310:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802b314:	3208      	adds	r2, #8
 802b316:	9200      	str	r2, [sp, #0]
 802b318:	681b      	ldr	r3, [r3, #0]
 802b31a:	4a1b      	ldr	r2, [pc, #108]	; (802b388 <remove_recursively_files_and_directories+0x154>)
 802b31c:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b320:	f002 fa60 	bl	802d7e4 <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802b324:	f107 0308 	add.w	r3, r7, #8
 802b328:	4619      	mov	r1, r3
 802b32a:	4813      	ldr	r0, [pc, #76]	; (802b378 <remove_recursively_files_and_directories+0x144>)
 802b32c:	f7ff fb06 	bl	802a93c <lfs_remove>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b334:	461a      	mov	r2, r3
 802b336:	490f      	ldr	r1, [pc, #60]	; (802b374 <remove_recursively_files_and_directories+0x140>)
 802b338:	480f      	ldr	r0, [pc, #60]	; (802b378 <remove_recursively_files_and_directories+0x144>)
 802b33a:	f7ff fc95 	bl	802ac68 <lfs_dir_read>
 802b33e:	4603      	mov	r3, r0
 802b340:	2b00      	cmp	r3, #0
 802b342:	dc93      	bgt.n	802b26c <remove_recursively_files_and_directories+0x38>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802b344:	490b      	ldr	r1, [pc, #44]	; (802b374 <remove_recursively_files_and_directories+0x140>)
 802b346:	480c      	ldr	r0, [pc, #48]	; (802b378 <remove_recursively_files_and_directories+0x144>)
 802b348:	f7ff fc78 	bl	802ac3c <lfs_dir_close>
        if (deep >= 1){
 802b34c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b350:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b354:	781b      	ldrb	r3, [r3, #0]
 802b356:	2b00      	cmp	r3, #0
 802b358:	d007      	beq.n	802b36a <remove_recursively_files_and_directories+0x136>
        	lfs_remove(&lfs, path);
 802b35a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b35e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b362:	6819      	ldr	r1, [r3, #0]
 802b364:	4804      	ldr	r0, [pc, #16]	; (802b378 <remove_recursively_files_and_directories+0x144>)
 802b366:	f7ff fae9 	bl	802a93c <lfs_remove>
        }

    }
}
 802b36a:	bf00      	nop
 802b36c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802b370:	46bd      	mov	sp, r7
 802b372:	bd80      	pop	{r7, pc}
 802b374:	2000d79c 	.word	0x2000d79c
 802b378:	2000d6d0 	.word	0x2000d6d0
 802b37c:	080341b8 	.word	0x080341b8
 802b380:	080341bc 	.word	0x080341bc
 802b384:	080341c0 	.word	0x080341c0
 802b388:	080341d0 	.word	0x080341d0
 802b38c:	080341d8 	.word	0x080341d8

0802b390 <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802b390:	b580      	push	{r7, lr}
 802b392:	b084      	sub	sp, #16
 802b394:	af00      	add	r7, sp, #0
 802b396:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b398:	4b0b      	ldr	r3, [pc, #44]	; (802b3c8 <spi_fs_remove_recurcuve_in+0x38>)
 802b39a:	681b      	ldr	r3, [r3, #0]
 802b39c:	4798      	blx	r3
#endif
	uint8_t deep = 0;
 802b39e:	2300      	movs	r3, #0
 802b3a0:	73fb      	strb	r3, [r7, #15]

	remove_recursively_files_and_directories(path, deep);
 802b3a2:	7bfb      	ldrb	r3, [r7, #15]
 802b3a4:	4619      	mov	r1, r3
 802b3a6:	6878      	ldr	r0, [r7, #4]
 802b3a8:	f7ff ff44 	bl	802b234 <remove_recursively_files_and_directories>
	deep = 0;
 802b3ac:	2300      	movs	r3, #0
 802b3ae:	73fb      	strb	r3, [r7, #15]
	remove_recursively_files_and_directories(path, deep);
 802b3b0:	7bfb      	ldrb	r3, [r7, #15]
 802b3b2:	4619      	mov	r1, r3
 802b3b4:	6878      	ldr	r0, [r7, #4]
 802b3b6:	f7ff ff3d 	bl	802b234 <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b3ba:	4b04      	ldr	r3, [pc, #16]	; (802b3cc <spi_fs_remove_recurcuve_in+0x3c>)
 802b3bc:	681b      	ldr	r3, [r3, #0]
 802b3be:	4798      	blx	r3
#endif
}
 802b3c0:	bf00      	nop
 802b3c2:	3710      	adds	r7, #16
 802b3c4:	46bd      	mov	sp, r7
 802b3c6:	bd80      	pop	{r7, pc}
 802b3c8:	2000d9c0 	.word	0x2000d9c0
 802b3cc:	2000d9c4 	.word	0x2000d9c4

0802b3d0 <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802b3d0:	b580      	push	{r7, lr}
 802b3d2:	b084      	sub	sp, #16
 802b3d4:	af00      	add	r7, sp, #0
 802b3d6:	6078      	str	r0, [r7, #4]
 802b3d8:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b3da:	4b08      	ldr	r3, [pc, #32]	; (802b3fc <spi_fs_mv+0x2c>)
 802b3dc:	681b      	ldr	r3, [r3, #0]
 802b3de:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802b3e0:	683a      	ldr	r2, [r7, #0]
 802b3e2:	6879      	ldr	r1, [r7, #4]
 802b3e4:	4806      	ldr	r0, [pc, #24]	; (802b400 <spi_fs_mv+0x30>)
 802b3e6:	f7ff fabf 	bl	802a968 <lfs_rename>
 802b3ea:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b3ec:	4b05      	ldr	r3, [pc, #20]	; (802b404 <spi_fs_mv+0x34>)
 802b3ee:	681b      	ldr	r3, [r3, #0]
 802b3f0:	4798      	blx	r3
#endif
	return err;
 802b3f2:	68fb      	ldr	r3, [r7, #12]
}
 802b3f4:	4618      	mov	r0, r3
 802b3f6:	3710      	adds	r7, #16
 802b3f8:	46bd      	mov	sp, r7
 802b3fa:	bd80      	pop	{r7, pc}
 802b3fc:	2000d9c0 	.word	0x2000d9c0
 802b400:	2000d6d0 	.word	0x2000d6d0
 802b404:	2000d9c4 	.word	0x2000d9c4

0802b408 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802b408:	b480      	push	{r7}
 802b40a:	b08b      	sub	sp, #44	; 0x2c
 802b40c:	af00      	add	r7, sp, #0
 802b40e:	60f8      	str	r0, [r7, #12]
 802b410:	60b9      	str	r1, [r7, #8]
 802b412:	607a      	str	r2, [r7, #4]
 802b414:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802b416:	2300      	movs	r3, #0
 802b418:	61fb      	str	r3, [r7, #28]
 802b41a:	2300      	movs	r3, #0
 802b41c:	623b      	str	r3, [r7, #32]
 802b41e:	6a3b      	ldr	r3, [r7, #32]
 802b420:	627b      	str	r3, [r7, #36]	; 0x24
 802b422:	e06f      	b.n	802b504 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802b424:	2300      	movs	r3, #0
 802b426:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b428:	e005      	b.n	802b436 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802b42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b42c:	3301      	adds	r3, #1
 802b42e:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 802b430:	69bb      	ldr	r3, [r7, #24]
 802b432:	3301      	adds	r3, #1
 802b434:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b43a:	429a      	cmp	r2, r3
 802b43c:	d205      	bcs.n	802b44a <mbedtls_base64_decode+0x42>
 802b43e:	683a      	ldr	r2, [r7, #0]
 802b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b442:	4413      	add	r3, r2
 802b444:	781b      	ldrb	r3, [r3, #0]
 802b446:	2b20      	cmp	r3, #32
 802b448:	d0ef      	beq.n	802b42a <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802b44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b44e:	429a      	cmp	r2, r3
 802b450:	d05d      	beq.n	802b50e <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802b452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b456:	1ad3      	subs	r3, r2, r3
 802b458:	2b01      	cmp	r3, #1
 802b45a:	d90c      	bls.n	802b476 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b45c:	683a      	ldr	r2, [r7, #0]
 802b45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b460:	4413      	add	r3, r2
 802b462:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802b464:	2b0d      	cmp	r3, #13
 802b466:	d106      	bne.n	802b476 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b46a:	3301      	adds	r3, #1
 802b46c:	683a      	ldr	r2, [r7, #0]
 802b46e:	4413      	add	r3, r2
 802b470:	781b      	ldrb	r3, [r3, #0]
 802b472:	2b0a      	cmp	r3, #10
 802b474:	d040      	beq.n	802b4f8 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802b476:	683a      	ldr	r2, [r7, #0]
 802b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b47a:	4413      	add	r3, r2
 802b47c:	781b      	ldrb	r3, [r3, #0]
 802b47e:	2b0a      	cmp	r3, #10
 802b480:	d03c      	beq.n	802b4fc <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802b482:	69bb      	ldr	r3, [r7, #24]
 802b484:	2b00      	cmp	r3, #0
 802b486:	d002      	beq.n	802b48e <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b488:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b48c:	e0d0      	b.n	802b630 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802b48e:	683a      	ldr	r2, [r7, #0]
 802b490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b492:	4413      	add	r3, r2
 802b494:	781b      	ldrb	r3, [r3, #0]
 802b496:	2b3d      	cmp	r3, #61	; 0x3d
 802b498:	d108      	bne.n	802b4ac <mbedtls_base64_decode+0xa4>
 802b49a:	69fb      	ldr	r3, [r7, #28]
 802b49c:	3301      	adds	r3, #1
 802b49e:	61fb      	str	r3, [r7, #28]
 802b4a0:	69fb      	ldr	r3, [r7, #28]
 802b4a2:	2b02      	cmp	r3, #2
 802b4a4:	d902      	bls.n	802b4ac <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b4a6:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b4aa:	e0c1      	b.n	802b630 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802b4ac:	683a      	ldr	r2, [r7, #0]
 802b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b4b0:	4413      	add	r3, r2
 802b4b2:	781b      	ldrb	r3, [r3, #0]
 802b4b4:	b25b      	sxtb	r3, r3
 802b4b6:	2b00      	cmp	r3, #0
 802b4b8:	db08      	blt.n	802b4cc <mbedtls_base64_decode+0xc4>
 802b4ba:	683a      	ldr	r2, [r7, #0]
 802b4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b4be:	4413      	add	r3, r2
 802b4c0:	781b      	ldrb	r3, [r3, #0]
 802b4c2:	461a      	mov	r2, r3
 802b4c4:	4b5d      	ldr	r3, [pc, #372]	; (802b63c <mbedtls_base64_decode+0x234>)
 802b4c6:	5c9b      	ldrb	r3, [r3, r2]
 802b4c8:	2b7f      	cmp	r3, #127	; 0x7f
 802b4ca:	d102      	bne.n	802b4d2 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b4cc:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b4d0:	e0ae      	b.n	802b630 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802b4d2:	683a      	ldr	r2, [r7, #0]
 802b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b4d6:	4413      	add	r3, r2
 802b4d8:	781b      	ldrb	r3, [r3, #0]
 802b4da:	461a      	mov	r2, r3
 802b4dc:	4b57      	ldr	r3, [pc, #348]	; (802b63c <mbedtls_base64_decode+0x234>)
 802b4de:	5c9b      	ldrb	r3, [r3, r2]
 802b4e0:	2b3f      	cmp	r3, #63	; 0x3f
 802b4e2:	d805      	bhi.n	802b4f0 <mbedtls_base64_decode+0xe8>
 802b4e4:	69fb      	ldr	r3, [r7, #28]
 802b4e6:	2b00      	cmp	r3, #0
 802b4e8:	d002      	beq.n	802b4f0 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b4ea:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b4ee:	e09f      	b.n	802b630 <mbedtls_base64_decode+0x228>

        n++;
 802b4f0:	6a3b      	ldr	r3, [r7, #32]
 802b4f2:	3301      	adds	r3, #1
 802b4f4:	623b      	str	r3, [r7, #32]
 802b4f6:	e002      	b.n	802b4fe <mbedtls_base64_decode+0xf6>
            continue;
 802b4f8:	bf00      	nop
 802b4fa:	e000      	b.n	802b4fe <mbedtls_base64_decode+0xf6>
            continue;
 802b4fc:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b500:	3301      	adds	r3, #1
 802b502:	627b      	str	r3, [r7, #36]	; 0x24
 802b504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b508:	429a      	cmp	r2, r3
 802b50a:	d38b      	bcc.n	802b424 <mbedtls_base64_decode+0x1c>
 802b50c:	e000      	b.n	802b510 <mbedtls_base64_decode+0x108>
            break;
 802b50e:	bf00      	nop
    }

    if( n == 0 )
 802b510:	6a3b      	ldr	r3, [r7, #32]
 802b512:	2b00      	cmp	r3, #0
 802b514:	d104      	bne.n	802b520 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802b516:	687b      	ldr	r3, [r7, #4]
 802b518:	2200      	movs	r2, #0
 802b51a:	601a      	str	r2, [r3, #0]
        return( 0 );
 802b51c:	2300      	movs	r3, #0
 802b51e:	e087      	b.n	802b630 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802b520:	6a3b      	ldr	r3, [r7, #32]
 802b522:	08da      	lsrs	r2, r3, #3
 802b524:	4613      	mov	r3, r2
 802b526:	005b      	lsls	r3, r3, #1
 802b528:	4413      	add	r3, r2
 802b52a:	005b      	lsls	r3, r3, #1
 802b52c:	4619      	mov	r1, r3
 802b52e:	6a3b      	ldr	r3, [r7, #32]
 802b530:	f003 0207 	and.w	r2, r3, #7
 802b534:	4613      	mov	r3, r2
 802b536:	005b      	lsls	r3, r3, #1
 802b538:	4413      	add	r3, r2
 802b53a:	005b      	lsls	r3, r3, #1
 802b53c:	3307      	adds	r3, #7
 802b53e:	08db      	lsrs	r3, r3, #3
 802b540:	440b      	add	r3, r1
 802b542:	623b      	str	r3, [r7, #32]
    n -= j;
 802b544:	6a3a      	ldr	r2, [r7, #32]
 802b546:	69fb      	ldr	r3, [r7, #28]
 802b548:	1ad3      	subs	r3, r2, r3
 802b54a:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802b54c:	68fb      	ldr	r3, [r7, #12]
 802b54e:	2b00      	cmp	r3, #0
 802b550:	d003      	beq.n	802b55a <mbedtls_base64_decode+0x152>
 802b552:	68ba      	ldr	r2, [r7, #8]
 802b554:	6a3b      	ldr	r3, [r7, #32]
 802b556:	429a      	cmp	r2, r3
 802b558:	d205      	bcs.n	802b566 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802b55a:	687b      	ldr	r3, [r7, #4]
 802b55c:	6a3a      	ldr	r2, [r7, #32]
 802b55e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802b560:	f06f 0329 	mvn.w	r3, #41	; 0x29
 802b564:	e064      	b.n	802b630 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b566:	2303      	movs	r3, #3
 802b568:	61fb      	str	r3, [r7, #28]
 802b56a:	2300      	movs	r3, #0
 802b56c:	61bb      	str	r3, [r7, #24]
 802b56e:	2300      	movs	r3, #0
 802b570:	623b      	str	r3, [r7, #32]
 802b572:	68fb      	ldr	r3, [r7, #12]
 802b574:	617b      	str	r3, [r7, #20]
 802b576:	e051      	b.n	802b61c <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802b578:	683b      	ldr	r3, [r7, #0]
 802b57a:	781b      	ldrb	r3, [r3, #0]
 802b57c:	2b0d      	cmp	r3, #13
 802b57e:	d046      	beq.n	802b60e <mbedtls_base64_decode+0x206>
 802b580:	683b      	ldr	r3, [r7, #0]
 802b582:	781b      	ldrb	r3, [r3, #0]
 802b584:	2b0a      	cmp	r3, #10
 802b586:	d042      	beq.n	802b60e <mbedtls_base64_decode+0x206>
 802b588:	683b      	ldr	r3, [r7, #0]
 802b58a:	781b      	ldrb	r3, [r3, #0]
 802b58c:	2b20      	cmp	r3, #32
 802b58e:	d03e      	beq.n	802b60e <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802b590:	683b      	ldr	r3, [r7, #0]
 802b592:	781b      	ldrb	r3, [r3, #0]
 802b594:	461a      	mov	r2, r3
 802b596:	4b29      	ldr	r3, [pc, #164]	; (802b63c <mbedtls_base64_decode+0x234>)
 802b598:	5c9b      	ldrb	r3, [r3, r2]
 802b59a:	2b40      	cmp	r3, #64	; 0x40
 802b59c:	bf0c      	ite	eq
 802b59e:	2301      	moveq	r3, #1
 802b5a0:	2300      	movne	r3, #0
 802b5a2:	b2db      	uxtb	r3, r3
 802b5a4:	461a      	mov	r2, r3
 802b5a6:	69fb      	ldr	r3, [r7, #28]
 802b5a8:	1a9b      	subs	r3, r3, r2
 802b5aa:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802b5ac:	69bb      	ldr	r3, [r7, #24]
 802b5ae:	019a      	lsls	r2, r3, #6
 802b5b0:	683b      	ldr	r3, [r7, #0]
 802b5b2:	781b      	ldrb	r3, [r3, #0]
 802b5b4:	4619      	mov	r1, r3
 802b5b6:	4b21      	ldr	r3, [pc, #132]	; (802b63c <mbedtls_base64_decode+0x234>)
 802b5b8:	5c5b      	ldrb	r3, [r3, r1]
 802b5ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b5be:	4313      	orrs	r3, r2
 802b5c0:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802b5c2:	6a3b      	ldr	r3, [r7, #32]
 802b5c4:	3301      	adds	r3, #1
 802b5c6:	623b      	str	r3, [r7, #32]
 802b5c8:	6a3b      	ldr	r3, [r7, #32]
 802b5ca:	2b04      	cmp	r3, #4
 802b5cc:	d120      	bne.n	802b610 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802b5ce:	2300      	movs	r3, #0
 802b5d0:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802b5d2:	69fb      	ldr	r3, [r7, #28]
 802b5d4:	2b00      	cmp	r3, #0
 802b5d6:	d006      	beq.n	802b5e6 <mbedtls_base64_decode+0x1de>
 802b5d8:	69bb      	ldr	r3, [r7, #24]
 802b5da:	0c19      	lsrs	r1, r3, #16
 802b5dc:	697b      	ldr	r3, [r7, #20]
 802b5de:	1c5a      	adds	r2, r3, #1
 802b5e0:	617a      	str	r2, [r7, #20]
 802b5e2:	b2ca      	uxtb	r2, r1
 802b5e4:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802b5e6:	69fb      	ldr	r3, [r7, #28]
 802b5e8:	2b01      	cmp	r3, #1
 802b5ea:	d906      	bls.n	802b5fa <mbedtls_base64_decode+0x1f2>
 802b5ec:	69bb      	ldr	r3, [r7, #24]
 802b5ee:	0a19      	lsrs	r1, r3, #8
 802b5f0:	697b      	ldr	r3, [r7, #20]
 802b5f2:	1c5a      	adds	r2, r3, #1
 802b5f4:	617a      	str	r2, [r7, #20]
 802b5f6:	b2ca      	uxtb	r2, r1
 802b5f8:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802b5fa:	69fb      	ldr	r3, [r7, #28]
 802b5fc:	2b02      	cmp	r3, #2
 802b5fe:	d907      	bls.n	802b610 <mbedtls_base64_decode+0x208>
 802b600:	697b      	ldr	r3, [r7, #20]
 802b602:	1c5a      	adds	r2, r3, #1
 802b604:	617a      	str	r2, [r7, #20]
 802b606:	69ba      	ldr	r2, [r7, #24]
 802b608:	b2d2      	uxtb	r2, r2
 802b60a:	701a      	strb	r2, [r3, #0]
 802b60c:	e000      	b.n	802b610 <mbedtls_base64_decode+0x208>
            continue;
 802b60e:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b612:	3b01      	subs	r3, #1
 802b614:	627b      	str	r3, [r7, #36]	; 0x24
 802b616:	683b      	ldr	r3, [r7, #0]
 802b618:	3301      	adds	r3, #1
 802b61a:	603b      	str	r3, [r7, #0]
 802b61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b61e:	2b00      	cmp	r3, #0
 802b620:	d1aa      	bne.n	802b578 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802b622:	697a      	ldr	r2, [r7, #20]
 802b624:	68fb      	ldr	r3, [r7, #12]
 802b626:	1ad3      	subs	r3, r2, r3
 802b628:	461a      	mov	r2, r3
 802b62a:	687b      	ldr	r3, [r7, #4]
 802b62c:	601a      	str	r2, [r3, #0]

    return( 0 );
 802b62e:	2300      	movs	r3, #0
}
 802b630:	4618      	mov	r0, r3
 802b632:	372c      	adds	r7, #44	; 0x2c
 802b634:	46bd      	mov	sp, r7
 802b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b63a:	4770      	bx	lr
 802b63c:	08034cb8 	.word	0x08034cb8

0802b640 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802b640:	b580      	push	{r7, lr}
 802b642:	b082      	sub	sp, #8
 802b644:	af00      	add	r7, sp, #0
 802b646:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802b648:	2258      	movs	r2, #88	; 0x58
 802b64a:	2100      	movs	r1, #0
 802b64c:	6878      	ldr	r0, [r7, #4]
 802b64e:	f002 fa4d 	bl	802daec <memset>
}
 802b652:	bf00      	nop
 802b654:	3708      	adds	r7, #8
 802b656:	46bd      	mov	sp, r7
 802b658:	bd80      	pop	{r7, pc}

0802b65a <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802b65a:	b580      	push	{r7, lr}
 802b65c:	b082      	sub	sp, #8
 802b65e:	af00      	add	r7, sp, #0
 802b660:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802b662:	687b      	ldr	r3, [r7, #4]
 802b664:	2b00      	cmp	r3, #0
 802b666:	d004      	beq.n	802b672 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802b668:	2158      	movs	r1, #88	; 0x58
 802b66a:	6878      	ldr	r0, [r7, #4]
 802b66c:	f001 f85c 	bl	802c728 <mbedtls_platform_zeroize>
 802b670:	e000      	b.n	802b674 <mbedtls_md5_free+0x1a>
        return;
 802b672:	bf00      	nop
}
 802b674:	3708      	adds	r7, #8
 802b676:	46bd      	mov	sp, r7
 802b678:	bd80      	pop	{r7, pc}
	...

0802b67c <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802b67c:	b480      	push	{r7}
 802b67e:	b083      	sub	sp, #12
 802b680:	af00      	add	r7, sp, #0
 802b682:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802b684:	687b      	ldr	r3, [r7, #4]
 802b686:	2200      	movs	r2, #0
 802b688:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802b68a:	687b      	ldr	r3, [r7, #4]
 802b68c:	2200      	movs	r2, #0
 802b68e:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802b690:	687b      	ldr	r3, [r7, #4]
 802b692:	4a09      	ldr	r2, [pc, #36]	; (802b6b8 <mbedtls_md5_starts_ret+0x3c>)
 802b694:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802b696:	687b      	ldr	r3, [r7, #4]
 802b698:	4a08      	ldr	r2, [pc, #32]	; (802b6bc <mbedtls_md5_starts_ret+0x40>)
 802b69a:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802b69c:	687b      	ldr	r3, [r7, #4]
 802b69e:	4a08      	ldr	r2, [pc, #32]	; (802b6c0 <mbedtls_md5_starts_ret+0x44>)
 802b6a0:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802b6a2:	687b      	ldr	r3, [r7, #4]
 802b6a4:	4a07      	ldr	r2, [pc, #28]	; (802b6c4 <mbedtls_md5_starts_ret+0x48>)
 802b6a6:	615a      	str	r2, [r3, #20]

    return( 0 );
 802b6a8:	2300      	movs	r3, #0
}
 802b6aa:	4618      	mov	r0, r3
 802b6ac:	370c      	adds	r7, #12
 802b6ae:	46bd      	mov	sp, r7
 802b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b6b4:	4770      	bx	lr
 802b6b6:	bf00      	nop
 802b6b8:	67452301 	.word	0x67452301
 802b6bc:	efcdab89 	.word	0xefcdab89
 802b6c0:	98badcfe 	.word	0x98badcfe
 802b6c4:	10325476 	.word	0x10325476

0802b6c8 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802b6c8:	b480      	push	{r7}
 802b6ca:	b097      	sub	sp, #92	; 0x5c
 802b6cc:	af00      	add	r7, sp, #0
 802b6ce:	6078      	str	r0, [r7, #4]
 802b6d0:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802b6d2:	683b      	ldr	r3, [r7, #0]
 802b6d4:	781b      	ldrb	r3, [r3, #0]
 802b6d6:	461a      	mov	r2, r3
 802b6d8:	683b      	ldr	r3, [r7, #0]
 802b6da:	3301      	adds	r3, #1
 802b6dc:	781b      	ldrb	r3, [r3, #0]
 802b6de:	021b      	lsls	r3, r3, #8
 802b6e0:	431a      	orrs	r2, r3
 802b6e2:	683b      	ldr	r3, [r7, #0]
 802b6e4:	3302      	adds	r3, #2
 802b6e6:	781b      	ldrb	r3, [r3, #0]
 802b6e8:	041b      	lsls	r3, r3, #16
 802b6ea:	431a      	orrs	r2, r3
 802b6ec:	683b      	ldr	r3, [r7, #0]
 802b6ee:	3303      	adds	r3, #3
 802b6f0:	781b      	ldrb	r3, [r3, #0]
 802b6f2:	061b      	lsls	r3, r3, #24
 802b6f4:	4313      	orrs	r3, r2
 802b6f6:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802b6f8:	683b      	ldr	r3, [r7, #0]
 802b6fa:	3304      	adds	r3, #4
 802b6fc:	781b      	ldrb	r3, [r3, #0]
 802b6fe:	461a      	mov	r2, r3
 802b700:	683b      	ldr	r3, [r7, #0]
 802b702:	3305      	adds	r3, #5
 802b704:	781b      	ldrb	r3, [r3, #0]
 802b706:	021b      	lsls	r3, r3, #8
 802b708:	431a      	orrs	r2, r3
 802b70a:	683b      	ldr	r3, [r7, #0]
 802b70c:	3306      	adds	r3, #6
 802b70e:	781b      	ldrb	r3, [r3, #0]
 802b710:	041b      	lsls	r3, r3, #16
 802b712:	431a      	orrs	r2, r3
 802b714:	683b      	ldr	r3, [r7, #0]
 802b716:	3307      	adds	r3, #7
 802b718:	781b      	ldrb	r3, [r3, #0]
 802b71a:	061b      	lsls	r3, r3, #24
 802b71c:	4313      	orrs	r3, r2
 802b71e:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802b720:	683b      	ldr	r3, [r7, #0]
 802b722:	3308      	adds	r3, #8
 802b724:	781b      	ldrb	r3, [r3, #0]
 802b726:	461a      	mov	r2, r3
 802b728:	683b      	ldr	r3, [r7, #0]
 802b72a:	3309      	adds	r3, #9
 802b72c:	781b      	ldrb	r3, [r3, #0]
 802b72e:	021b      	lsls	r3, r3, #8
 802b730:	431a      	orrs	r2, r3
 802b732:	683b      	ldr	r3, [r7, #0]
 802b734:	330a      	adds	r3, #10
 802b736:	781b      	ldrb	r3, [r3, #0]
 802b738:	041b      	lsls	r3, r3, #16
 802b73a:	431a      	orrs	r2, r3
 802b73c:	683b      	ldr	r3, [r7, #0]
 802b73e:	330b      	adds	r3, #11
 802b740:	781b      	ldrb	r3, [r3, #0]
 802b742:	061b      	lsls	r3, r3, #24
 802b744:	4313      	orrs	r3, r2
 802b746:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802b748:	683b      	ldr	r3, [r7, #0]
 802b74a:	330c      	adds	r3, #12
 802b74c:	781b      	ldrb	r3, [r3, #0]
 802b74e:	461a      	mov	r2, r3
 802b750:	683b      	ldr	r3, [r7, #0]
 802b752:	330d      	adds	r3, #13
 802b754:	781b      	ldrb	r3, [r3, #0]
 802b756:	021b      	lsls	r3, r3, #8
 802b758:	431a      	orrs	r2, r3
 802b75a:	683b      	ldr	r3, [r7, #0]
 802b75c:	330e      	adds	r3, #14
 802b75e:	781b      	ldrb	r3, [r3, #0]
 802b760:	041b      	lsls	r3, r3, #16
 802b762:	431a      	orrs	r2, r3
 802b764:	683b      	ldr	r3, [r7, #0]
 802b766:	330f      	adds	r3, #15
 802b768:	781b      	ldrb	r3, [r3, #0]
 802b76a:	061b      	lsls	r3, r3, #24
 802b76c:	4313      	orrs	r3, r2
 802b76e:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802b770:	683b      	ldr	r3, [r7, #0]
 802b772:	3310      	adds	r3, #16
 802b774:	781b      	ldrb	r3, [r3, #0]
 802b776:	461a      	mov	r2, r3
 802b778:	683b      	ldr	r3, [r7, #0]
 802b77a:	3311      	adds	r3, #17
 802b77c:	781b      	ldrb	r3, [r3, #0]
 802b77e:	021b      	lsls	r3, r3, #8
 802b780:	431a      	orrs	r2, r3
 802b782:	683b      	ldr	r3, [r7, #0]
 802b784:	3312      	adds	r3, #18
 802b786:	781b      	ldrb	r3, [r3, #0]
 802b788:	041b      	lsls	r3, r3, #16
 802b78a:	431a      	orrs	r2, r3
 802b78c:	683b      	ldr	r3, [r7, #0]
 802b78e:	3313      	adds	r3, #19
 802b790:	781b      	ldrb	r3, [r3, #0]
 802b792:	061b      	lsls	r3, r3, #24
 802b794:	4313      	orrs	r3, r2
 802b796:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b798:	683b      	ldr	r3, [r7, #0]
 802b79a:	3314      	adds	r3, #20
 802b79c:	781b      	ldrb	r3, [r3, #0]
 802b79e:	461a      	mov	r2, r3
 802b7a0:	683b      	ldr	r3, [r7, #0]
 802b7a2:	3315      	adds	r3, #21
 802b7a4:	781b      	ldrb	r3, [r3, #0]
 802b7a6:	021b      	lsls	r3, r3, #8
 802b7a8:	431a      	orrs	r2, r3
 802b7aa:	683b      	ldr	r3, [r7, #0]
 802b7ac:	3316      	adds	r3, #22
 802b7ae:	781b      	ldrb	r3, [r3, #0]
 802b7b0:	041b      	lsls	r3, r3, #16
 802b7b2:	431a      	orrs	r2, r3
 802b7b4:	683b      	ldr	r3, [r7, #0]
 802b7b6:	3317      	adds	r3, #23
 802b7b8:	781b      	ldrb	r3, [r3, #0]
 802b7ba:	061b      	lsls	r3, r3, #24
 802b7bc:	4313      	orrs	r3, r2
 802b7be:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b7c0:	683b      	ldr	r3, [r7, #0]
 802b7c2:	3318      	adds	r3, #24
 802b7c4:	781b      	ldrb	r3, [r3, #0]
 802b7c6:	461a      	mov	r2, r3
 802b7c8:	683b      	ldr	r3, [r7, #0]
 802b7ca:	3319      	adds	r3, #25
 802b7cc:	781b      	ldrb	r3, [r3, #0]
 802b7ce:	021b      	lsls	r3, r3, #8
 802b7d0:	431a      	orrs	r2, r3
 802b7d2:	683b      	ldr	r3, [r7, #0]
 802b7d4:	331a      	adds	r3, #26
 802b7d6:	781b      	ldrb	r3, [r3, #0]
 802b7d8:	041b      	lsls	r3, r3, #16
 802b7da:	431a      	orrs	r2, r3
 802b7dc:	683b      	ldr	r3, [r7, #0]
 802b7de:	331b      	adds	r3, #27
 802b7e0:	781b      	ldrb	r3, [r3, #0]
 802b7e2:	061b      	lsls	r3, r3, #24
 802b7e4:	4313      	orrs	r3, r2
 802b7e6:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b7e8:	683b      	ldr	r3, [r7, #0]
 802b7ea:	331c      	adds	r3, #28
 802b7ec:	781b      	ldrb	r3, [r3, #0]
 802b7ee:	461a      	mov	r2, r3
 802b7f0:	683b      	ldr	r3, [r7, #0]
 802b7f2:	331d      	adds	r3, #29
 802b7f4:	781b      	ldrb	r3, [r3, #0]
 802b7f6:	021b      	lsls	r3, r3, #8
 802b7f8:	431a      	orrs	r2, r3
 802b7fa:	683b      	ldr	r3, [r7, #0]
 802b7fc:	331e      	adds	r3, #30
 802b7fe:	781b      	ldrb	r3, [r3, #0]
 802b800:	041b      	lsls	r3, r3, #16
 802b802:	431a      	orrs	r2, r3
 802b804:	683b      	ldr	r3, [r7, #0]
 802b806:	331f      	adds	r3, #31
 802b808:	781b      	ldrb	r3, [r3, #0]
 802b80a:	061b      	lsls	r3, r3, #24
 802b80c:	4313      	orrs	r3, r2
 802b80e:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b810:	683b      	ldr	r3, [r7, #0]
 802b812:	3320      	adds	r3, #32
 802b814:	781b      	ldrb	r3, [r3, #0]
 802b816:	461a      	mov	r2, r3
 802b818:	683b      	ldr	r3, [r7, #0]
 802b81a:	3321      	adds	r3, #33	; 0x21
 802b81c:	781b      	ldrb	r3, [r3, #0]
 802b81e:	021b      	lsls	r3, r3, #8
 802b820:	431a      	orrs	r2, r3
 802b822:	683b      	ldr	r3, [r7, #0]
 802b824:	3322      	adds	r3, #34	; 0x22
 802b826:	781b      	ldrb	r3, [r3, #0]
 802b828:	041b      	lsls	r3, r3, #16
 802b82a:	431a      	orrs	r2, r3
 802b82c:	683b      	ldr	r3, [r7, #0]
 802b82e:	3323      	adds	r3, #35	; 0x23
 802b830:	781b      	ldrb	r3, [r3, #0]
 802b832:	061b      	lsls	r3, r3, #24
 802b834:	4313      	orrs	r3, r2
 802b836:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b838:	683b      	ldr	r3, [r7, #0]
 802b83a:	3324      	adds	r3, #36	; 0x24
 802b83c:	781b      	ldrb	r3, [r3, #0]
 802b83e:	461a      	mov	r2, r3
 802b840:	683b      	ldr	r3, [r7, #0]
 802b842:	3325      	adds	r3, #37	; 0x25
 802b844:	781b      	ldrb	r3, [r3, #0]
 802b846:	021b      	lsls	r3, r3, #8
 802b848:	431a      	orrs	r2, r3
 802b84a:	683b      	ldr	r3, [r7, #0]
 802b84c:	3326      	adds	r3, #38	; 0x26
 802b84e:	781b      	ldrb	r3, [r3, #0]
 802b850:	041b      	lsls	r3, r3, #16
 802b852:	431a      	orrs	r2, r3
 802b854:	683b      	ldr	r3, [r7, #0]
 802b856:	3327      	adds	r3, #39	; 0x27
 802b858:	781b      	ldrb	r3, [r3, #0]
 802b85a:	061b      	lsls	r3, r3, #24
 802b85c:	4313      	orrs	r3, r2
 802b85e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b860:	683b      	ldr	r3, [r7, #0]
 802b862:	3328      	adds	r3, #40	; 0x28
 802b864:	781b      	ldrb	r3, [r3, #0]
 802b866:	461a      	mov	r2, r3
 802b868:	683b      	ldr	r3, [r7, #0]
 802b86a:	3329      	adds	r3, #41	; 0x29
 802b86c:	781b      	ldrb	r3, [r3, #0]
 802b86e:	021b      	lsls	r3, r3, #8
 802b870:	431a      	orrs	r2, r3
 802b872:	683b      	ldr	r3, [r7, #0]
 802b874:	332a      	adds	r3, #42	; 0x2a
 802b876:	781b      	ldrb	r3, [r3, #0]
 802b878:	041b      	lsls	r3, r3, #16
 802b87a:	431a      	orrs	r2, r3
 802b87c:	683b      	ldr	r3, [r7, #0]
 802b87e:	332b      	adds	r3, #43	; 0x2b
 802b880:	781b      	ldrb	r3, [r3, #0]
 802b882:	061b      	lsls	r3, r3, #24
 802b884:	4313      	orrs	r3, r2
 802b886:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b888:	683b      	ldr	r3, [r7, #0]
 802b88a:	332c      	adds	r3, #44	; 0x2c
 802b88c:	781b      	ldrb	r3, [r3, #0]
 802b88e:	461a      	mov	r2, r3
 802b890:	683b      	ldr	r3, [r7, #0]
 802b892:	332d      	adds	r3, #45	; 0x2d
 802b894:	781b      	ldrb	r3, [r3, #0]
 802b896:	021b      	lsls	r3, r3, #8
 802b898:	431a      	orrs	r2, r3
 802b89a:	683b      	ldr	r3, [r7, #0]
 802b89c:	332e      	adds	r3, #46	; 0x2e
 802b89e:	781b      	ldrb	r3, [r3, #0]
 802b8a0:	041b      	lsls	r3, r3, #16
 802b8a2:	431a      	orrs	r2, r3
 802b8a4:	683b      	ldr	r3, [r7, #0]
 802b8a6:	332f      	adds	r3, #47	; 0x2f
 802b8a8:	781b      	ldrb	r3, [r3, #0]
 802b8aa:	061b      	lsls	r3, r3, #24
 802b8ac:	4313      	orrs	r3, r2
 802b8ae:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b8b0:	683b      	ldr	r3, [r7, #0]
 802b8b2:	3330      	adds	r3, #48	; 0x30
 802b8b4:	781b      	ldrb	r3, [r3, #0]
 802b8b6:	461a      	mov	r2, r3
 802b8b8:	683b      	ldr	r3, [r7, #0]
 802b8ba:	3331      	adds	r3, #49	; 0x31
 802b8bc:	781b      	ldrb	r3, [r3, #0]
 802b8be:	021b      	lsls	r3, r3, #8
 802b8c0:	431a      	orrs	r2, r3
 802b8c2:	683b      	ldr	r3, [r7, #0]
 802b8c4:	3332      	adds	r3, #50	; 0x32
 802b8c6:	781b      	ldrb	r3, [r3, #0]
 802b8c8:	041b      	lsls	r3, r3, #16
 802b8ca:	431a      	orrs	r2, r3
 802b8cc:	683b      	ldr	r3, [r7, #0]
 802b8ce:	3333      	adds	r3, #51	; 0x33
 802b8d0:	781b      	ldrb	r3, [r3, #0]
 802b8d2:	061b      	lsls	r3, r3, #24
 802b8d4:	4313      	orrs	r3, r2
 802b8d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b8d8:	683b      	ldr	r3, [r7, #0]
 802b8da:	3334      	adds	r3, #52	; 0x34
 802b8dc:	781b      	ldrb	r3, [r3, #0]
 802b8de:	461a      	mov	r2, r3
 802b8e0:	683b      	ldr	r3, [r7, #0]
 802b8e2:	3335      	adds	r3, #53	; 0x35
 802b8e4:	781b      	ldrb	r3, [r3, #0]
 802b8e6:	021b      	lsls	r3, r3, #8
 802b8e8:	431a      	orrs	r2, r3
 802b8ea:	683b      	ldr	r3, [r7, #0]
 802b8ec:	3336      	adds	r3, #54	; 0x36
 802b8ee:	781b      	ldrb	r3, [r3, #0]
 802b8f0:	041b      	lsls	r3, r3, #16
 802b8f2:	431a      	orrs	r2, r3
 802b8f4:	683b      	ldr	r3, [r7, #0]
 802b8f6:	3337      	adds	r3, #55	; 0x37
 802b8f8:	781b      	ldrb	r3, [r3, #0]
 802b8fa:	061b      	lsls	r3, r3, #24
 802b8fc:	4313      	orrs	r3, r2
 802b8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b900:	683b      	ldr	r3, [r7, #0]
 802b902:	3338      	adds	r3, #56	; 0x38
 802b904:	781b      	ldrb	r3, [r3, #0]
 802b906:	461a      	mov	r2, r3
 802b908:	683b      	ldr	r3, [r7, #0]
 802b90a:	3339      	adds	r3, #57	; 0x39
 802b90c:	781b      	ldrb	r3, [r3, #0]
 802b90e:	021b      	lsls	r3, r3, #8
 802b910:	431a      	orrs	r2, r3
 802b912:	683b      	ldr	r3, [r7, #0]
 802b914:	333a      	adds	r3, #58	; 0x3a
 802b916:	781b      	ldrb	r3, [r3, #0]
 802b918:	041b      	lsls	r3, r3, #16
 802b91a:	431a      	orrs	r2, r3
 802b91c:	683b      	ldr	r3, [r7, #0]
 802b91e:	333b      	adds	r3, #59	; 0x3b
 802b920:	781b      	ldrb	r3, [r3, #0]
 802b922:	061b      	lsls	r3, r3, #24
 802b924:	4313      	orrs	r3, r2
 802b926:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b928:	683b      	ldr	r3, [r7, #0]
 802b92a:	333c      	adds	r3, #60	; 0x3c
 802b92c:	781b      	ldrb	r3, [r3, #0]
 802b92e:	461a      	mov	r2, r3
 802b930:	683b      	ldr	r3, [r7, #0]
 802b932:	333d      	adds	r3, #61	; 0x3d
 802b934:	781b      	ldrb	r3, [r3, #0]
 802b936:	021b      	lsls	r3, r3, #8
 802b938:	431a      	orrs	r2, r3
 802b93a:	683b      	ldr	r3, [r7, #0]
 802b93c:	333e      	adds	r3, #62	; 0x3e
 802b93e:	781b      	ldrb	r3, [r3, #0]
 802b940:	041b      	lsls	r3, r3, #16
 802b942:	431a      	orrs	r2, r3
 802b944:	683b      	ldr	r3, [r7, #0]
 802b946:	333f      	adds	r3, #63	; 0x3f
 802b948:	781b      	ldrb	r3, [r3, #0]
 802b94a:	061b      	lsls	r3, r3, #24
 802b94c:	4313      	orrs	r3, r2
 802b94e:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802b950:	687b      	ldr	r3, [r7, #4]
 802b952:	689b      	ldr	r3, [r3, #8]
 802b954:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 802b956:	687b      	ldr	r3, [r7, #4]
 802b958:	68db      	ldr	r3, [r3, #12]
 802b95a:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 802b95c:	687b      	ldr	r3, [r7, #4]
 802b95e:	691b      	ldr	r3, [r3, #16]
 802b960:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 802b962:	687b      	ldr	r3, [r7, #4]
 802b964:	695b      	ldr	r3, [r3, #20]
 802b966:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802b968:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b96c:	405a      	eors	r2, r3
 802b96e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b970:	401a      	ands	r2, r3
 802b972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b974:	405a      	eors	r2, r3
 802b976:	68bb      	ldr	r3, [r7, #8]
 802b978:	441a      	add	r2, r3
 802b97a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b97c:	441a      	add	r2, r3
 802b97e:	4ba5      	ldr	r3, [pc, #660]	; (802bc14 <mbedtls_internal_md5_process+0x54c>)
 802b980:	4413      	add	r3, r2
 802b982:	657b      	str	r3, [r7, #84]	; 0x54
 802b984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b986:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b98a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b98c:	4413      	add	r3, r2
 802b98e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802b990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b994:	405a      	eors	r2, r3
 802b996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b998:	401a      	ands	r2, r3
 802b99a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b99c:	405a      	eors	r2, r3
 802b99e:	68fb      	ldr	r3, [r7, #12]
 802b9a0:	441a      	add	r2, r3
 802b9a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9a4:	441a      	add	r2, r3
 802b9a6:	4b9c      	ldr	r3, [pc, #624]	; (802bc18 <mbedtls_internal_md5_process+0x550>)
 802b9a8:	4413      	add	r3, r2
 802b9aa:	64bb      	str	r3, [r7, #72]	; 0x48
 802b9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9ae:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b9b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9b4:	4413      	add	r3, r2
 802b9b6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802b9b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9bc:	405a      	eors	r2, r3
 802b9be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9c0:	401a      	ands	r2, r3
 802b9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9c4:	405a      	eors	r2, r3
 802b9c6:	693b      	ldr	r3, [r7, #16]
 802b9c8:	441a      	add	r2, r3
 802b9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9cc:	441a      	add	r2, r3
 802b9ce:	4b93      	ldr	r3, [pc, #588]	; (802bc1c <mbedtls_internal_md5_process+0x554>)
 802b9d0:	4413      	add	r3, r2
 802b9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9d6:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b9da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9dc:	4413      	add	r3, r2
 802b9de:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802b9e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9e4:	405a      	eors	r2, r3
 802b9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9e8:	401a      	ands	r2, r3
 802b9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9ec:	405a      	eors	r2, r3
 802b9ee:	697b      	ldr	r3, [r7, #20]
 802b9f0:	441a      	add	r2, r3
 802b9f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9f4:	441a      	add	r2, r3
 802b9f6:	4b8a      	ldr	r3, [pc, #552]	; (802bc20 <mbedtls_internal_md5_process+0x558>)
 802b9f8:	4413      	add	r3, r2
 802b9fa:	653b      	str	r3, [r7, #80]	; 0x50
 802b9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9fe:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802ba02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba04:	4413      	add	r3, r2
 802ba06:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802ba08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba0c:	405a      	eors	r2, r3
 802ba0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba10:	401a      	ands	r2, r3
 802ba12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba14:	405a      	eors	r2, r3
 802ba16:	69bb      	ldr	r3, [r7, #24]
 802ba18:	441a      	add	r2, r3
 802ba1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba1c:	441a      	add	r2, r3
 802ba1e:	4b81      	ldr	r3, [pc, #516]	; (802bc24 <mbedtls_internal_md5_process+0x55c>)
 802ba20:	4413      	add	r3, r2
 802ba22:	657b      	str	r3, [r7, #84]	; 0x54
 802ba24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba26:	ea4f 6373 	mov.w	r3, r3, ror #25
 802ba2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba2c:	4413      	add	r3, r2
 802ba2e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802ba30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba34:	405a      	eors	r2, r3
 802ba36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba38:	401a      	ands	r2, r3
 802ba3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba3c:	405a      	eors	r2, r3
 802ba3e:	69fb      	ldr	r3, [r7, #28]
 802ba40:	441a      	add	r2, r3
 802ba42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba44:	441a      	add	r2, r3
 802ba46:	4b78      	ldr	r3, [pc, #480]	; (802bc28 <mbedtls_internal_md5_process+0x560>)
 802ba48:	4413      	add	r3, r2
 802ba4a:	64bb      	str	r3, [r7, #72]	; 0x48
 802ba4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba4e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802ba52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba54:	4413      	add	r3, r2
 802ba56:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802ba58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba5c:	405a      	eors	r2, r3
 802ba5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba60:	401a      	ands	r2, r3
 802ba62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba64:	405a      	eors	r2, r3
 802ba66:	6a3b      	ldr	r3, [r7, #32]
 802ba68:	441a      	add	r2, r3
 802ba6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba6c:	441a      	add	r2, r3
 802ba6e:	4b6f      	ldr	r3, [pc, #444]	; (802bc2c <mbedtls_internal_md5_process+0x564>)
 802ba70:	4413      	add	r3, r2
 802ba72:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ba74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba76:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802ba7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba7c:	4413      	add	r3, r2
 802ba7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802ba80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba84:	405a      	eors	r2, r3
 802ba86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba88:	401a      	ands	r2, r3
 802ba8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba8c:	405a      	eors	r2, r3
 802ba8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba90:	441a      	add	r2, r3
 802ba92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba94:	441a      	add	r2, r3
 802ba96:	4b66      	ldr	r3, [pc, #408]	; (802bc30 <mbedtls_internal_md5_process+0x568>)
 802ba98:	4413      	add	r3, r2
 802ba9a:	653b      	str	r3, [r7, #80]	; 0x50
 802ba9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba9e:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802baa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802baa4:	4413      	add	r3, r2
 802baa6:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802baa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802baaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baac:	405a      	eors	r2, r3
 802baae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bab0:	401a      	ands	r2, r3
 802bab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bab4:	405a      	eors	r2, r3
 802bab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bab8:	441a      	add	r2, r3
 802baba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802babc:	441a      	add	r2, r3
 802babe:	4b5d      	ldr	r3, [pc, #372]	; (802bc34 <mbedtls_internal_md5_process+0x56c>)
 802bac0:	4413      	add	r3, r2
 802bac2:	657b      	str	r3, [r7, #84]	; 0x54
 802bac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bac6:	ea4f 6373 	mov.w	r3, r3, ror #25
 802baca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bacc:	4413      	add	r3, r2
 802bace:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802bad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bad4:	405a      	eors	r2, r3
 802bad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bad8:	401a      	ands	r2, r3
 802bada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802badc:	405a      	eors	r2, r3
 802bade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bae0:	441a      	add	r2, r3
 802bae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bae4:	441a      	add	r2, r3
 802bae6:	4b54      	ldr	r3, [pc, #336]	; (802bc38 <mbedtls_internal_md5_process+0x570>)
 802bae8:	4413      	add	r3, r2
 802baea:	64bb      	str	r3, [r7, #72]	; 0x48
 802baec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baee:	ea4f 5333 	mov.w	r3, r3, ror #20
 802baf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802baf4:	4413      	add	r3, r2
 802baf6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802baf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bafc:	405a      	eors	r2, r3
 802bafe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb00:	401a      	ands	r2, r3
 802bb02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb04:	405a      	eors	r2, r3
 802bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bb08:	441a      	add	r2, r3
 802bb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb0c:	4413      	add	r3, r2
 802bb0e:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 802bb12:	3b4f      	subs	r3, #79	; 0x4f
 802bb14:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb18:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802bb1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb1e:	4413      	add	r3, r2
 802bb20:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802bb22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb26:	405a      	eors	r2, r3
 802bb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb2a:	401a      	ands	r2, r3
 802bb2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb2e:	405a      	eors	r2, r3
 802bb30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bb32:	441a      	add	r2, r3
 802bb34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb36:	441a      	add	r2, r3
 802bb38:	4b40      	ldr	r3, [pc, #256]	; (802bc3c <mbedtls_internal_md5_process+0x574>)
 802bb3a:	4413      	add	r3, r2
 802bb3c:	653b      	str	r3, [r7, #80]	; 0x50
 802bb3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb40:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bb44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb46:	4413      	add	r3, r2
 802bb48:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802bb4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb4e:	405a      	eors	r2, r3
 802bb50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb52:	401a      	ands	r2, r3
 802bb54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb56:	405a      	eors	r2, r3
 802bb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bb5a:	441a      	add	r2, r3
 802bb5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb5e:	441a      	add	r2, r3
 802bb60:	4b37      	ldr	r3, [pc, #220]	; (802bc40 <mbedtls_internal_md5_process+0x578>)
 802bb62:	4413      	add	r3, r2
 802bb64:	657b      	str	r3, [r7, #84]	; 0x54
 802bb66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb68:	ea4f 6373 	mov.w	r3, r3, ror #25
 802bb6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb6e:	4413      	add	r3, r2
 802bb70:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802bb72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb76:	405a      	eors	r2, r3
 802bb78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb7a:	401a      	ands	r2, r3
 802bb7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb7e:	405a      	eors	r2, r3
 802bb80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bb82:	441a      	add	r2, r3
 802bb84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb86:	441a      	add	r2, r3
 802bb88:	4b2e      	ldr	r3, [pc, #184]	; (802bc44 <mbedtls_internal_md5_process+0x57c>)
 802bb8a:	4413      	add	r3, r2
 802bb8c:	64bb      	str	r3, [r7, #72]	; 0x48
 802bb8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb90:	ea4f 5333 	mov.w	r3, r3, ror #20
 802bb94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb96:	4413      	add	r3, r2
 802bb98:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802bb9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb9e:	405a      	eors	r2, r3
 802bba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bba2:	401a      	ands	r2, r3
 802bba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bba6:	405a      	eors	r2, r3
 802bba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bbaa:	441a      	add	r2, r3
 802bbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbae:	441a      	add	r2, r3
 802bbb0:	4b25      	ldr	r3, [pc, #148]	; (802bc48 <mbedtls_internal_md5_process+0x580>)
 802bbb2:	4413      	add	r3, r2
 802bbb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbb8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802bbbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbbe:	4413      	add	r3, r2
 802bbc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802bbc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbc6:	405a      	eors	r2, r3
 802bbc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbca:	401a      	ands	r2, r3
 802bbcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbce:	405a      	eors	r2, r3
 802bbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bbd2:	441a      	add	r2, r3
 802bbd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbd6:	441a      	add	r2, r3
 802bbd8:	4b1c      	ldr	r3, [pc, #112]	; (802bc4c <mbedtls_internal_md5_process+0x584>)
 802bbda:	4413      	add	r3, r2
 802bbdc:	653b      	str	r3, [r7, #80]	; 0x50
 802bbde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbe0:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bbe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bbe6:	4413      	add	r3, r2
 802bbe8:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802bbea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbee:	405a      	eors	r2, r3
 802bbf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbf2:	401a      	ands	r2, r3
 802bbf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbf6:	405a      	eors	r2, r3
 802bbf8:	68fb      	ldr	r3, [r7, #12]
 802bbfa:	441a      	add	r2, r3
 802bbfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbfe:	441a      	add	r2, r3
 802bc00:	4b13      	ldr	r3, [pc, #76]	; (802bc50 <mbedtls_internal_md5_process+0x588>)
 802bc02:	4413      	add	r3, r2
 802bc04:	657b      	str	r3, [r7, #84]	; 0x54
 802bc06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc08:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bc0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc0e:	4413      	add	r3, r2
 802bc10:	e020      	b.n	802bc54 <mbedtls_internal_md5_process+0x58c>
 802bc12:	bf00      	nop
 802bc14:	d76aa478 	.word	0xd76aa478
 802bc18:	e8c7b756 	.word	0xe8c7b756
 802bc1c:	242070db 	.word	0x242070db
 802bc20:	c1bdceee 	.word	0xc1bdceee
 802bc24:	f57c0faf 	.word	0xf57c0faf
 802bc28:	4787c62a 	.word	0x4787c62a
 802bc2c:	a8304613 	.word	0xa8304613
 802bc30:	fd469501 	.word	0xfd469501
 802bc34:	698098d8 	.word	0x698098d8
 802bc38:	8b44f7af 	.word	0x8b44f7af
 802bc3c:	895cd7be 	.word	0x895cd7be
 802bc40:	6b901122 	.word	0x6b901122
 802bc44:	fd987193 	.word	0xfd987193
 802bc48:	a679438e 	.word	0xa679438e
 802bc4c:	49b40821 	.word	0x49b40821
 802bc50:	f61e2562 	.word	0xf61e2562
 802bc54:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802bc56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc5a:	405a      	eors	r2, r3
 802bc5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc5e:	401a      	ands	r2, r3
 802bc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc62:	405a      	eors	r2, r3
 802bc64:	6a3b      	ldr	r3, [r7, #32]
 802bc66:	441a      	add	r2, r3
 802bc68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc6a:	441a      	add	r2, r3
 802bc6c:	4ba4      	ldr	r3, [pc, #656]	; (802bf00 <mbedtls_internal_md5_process+0x838>)
 802bc6e:	4413      	add	r3, r2
 802bc70:	64bb      	str	r3, [r7, #72]	; 0x48
 802bc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc74:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bc78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc7a:	4413      	add	r3, r2
 802bc7c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802bc7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc82:	405a      	eors	r2, r3
 802bc84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc86:	401a      	ands	r2, r3
 802bc88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc8a:	405a      	eors	r2, r3
 802bc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bc8e:	441a      	add	r2, r3
 802bc90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc92:	441a      	add	r2, r3
 802bc94:	4b9b      	ldr	r3, [pc, #620]	; (802bf04 <mbedtls_internal_md5_process+0x83c>)
 802bc96:	4413      	add	r3, r2
 802bc98:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc9c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bca2:	4413      	add	r3, r2
 802bca4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802bca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcaa:	405a      	eors	r2, r3
 802bcac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcae:	401a      	ands	r2, r3
 802bcb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcb2:	405a      	eors	r2, r3
 802bcb4:	68bb      	ldr	r3, [r7, #8]
 802bcb6:	441a      	add	r2, r3
 802bcb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcba:	441a      	add	r2, r3
 802bcbc:	4b92      	ldr	r3, [pc, #584]	; (802bf08 <mbedtls_internal_md5_process+0x840>)
 802bcbe:	4413      	add	r3, r2
 802bcc0:	653b      	str	r3, [r7, #80]	; 0x50
 802bcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcc4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bcc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bcca:	4413      	add	r3, r2
 802bccc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802bcce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bcd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcd2:	405a      	eors	r2, r3
 802bcd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcd6:	401a      	ands	r2, r3
 802bcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcda:	405a      	eors	r2, r3
 802bcdc:	69fb      	ldr	r3, [r7, #28]
 802bcde:	441a      	add	r2, r3
 802bce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bce2:	441a      	add	r2, r3
 802bce4:	4b89      	ldr	r3, [pc, #548]	; (802bf0c <mbedtls_internal_md5_process+0x844>)
 802bce6:	4413      	add	r3, r2
 802bce8:	657b      	str	r3, [r7, #84]	; 0x54
 802bcea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcec:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bcf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bcf2:	4413      	add	r3, r2
 802bcf4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802bcf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcfa:	405a      	eors	r2, r3
 802bcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcfe:	401a      	ands	r2, r3
 802bd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd02:	405a      	eors	r2, r3
 802bd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bd06:	441a      	add	r2, r3
 802bd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd0a:	441a      	add	r2, r3
 802bd0c:	4b80      	ldr	r3, [pc, #512]	; (802bf10 <mbedtls_internal_md5_process+0x848>)
 802bd0e:	4413      	add	r3, r2
 802bd10:	64bb      	str	r3, [r7, #72]	; 0x48
 802bd12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd14:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bd18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd1a:	4413      	add	r3, r2
 802bd1c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802bd1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd22:	405a      	eors	r2, r3
 802bd24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd26:	401a      	ands	r2, r3
 802bd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd2a:	405a      	eors	r2, r3
 802bd2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bd2e:	441a      	add	r2, r3
 802bd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd32:	441a      	add	r2, r3
 802bd34:	4b77      	ldr	r3, [pc, #476]	; (802bf14 <mbedtls_internal_md5_process+0x84c>)
 802bd36:	4413      	add	r3, r2
 802bd38:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd3c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bd40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd42:	4413      	add	r3, r2
 802bd44:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802bd46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd4a:	405a      	eors	r2, r3
 802bd4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd4e:	401a      	ands	r2, r3
 802bd50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd52:	405a      	eors	r2, r3
 802bd54:	69bb      	ldr	r3, [r7, #24]
 802bd56:	441a      	add	r2, r3
 802bd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd5a:	441a      	add	r2, r3
 802bd5c:	4b6e      	ldr	r3, [pc, #440]	; (802bf18 <mbedtls_internal_md5_process+0x850>)
 802bd5e:	4413      	add	r3, r2
 802bd60:	653b      	str	r3, [r7, #80]	; 0x50
 802bd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd64:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bd68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd6a:	4413      	add	r3, r2
 802bd6c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802bd6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd72:	405a      	eors	r2, r3
 802bd74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd76:	401a      	ands	r2, r3
 802bd78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd7a:	405a      	eors	r2, r3
 802bd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bd7e:	441a      	add	r2, r3
 802bd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd82:	441a      	add	r2, r3
 802bd84:	4b65      	ldr	r3, [pc, #404]	; (802bf1c <mbedtls_internal_md5_process+0x854>)
 802bd86:	4413      	add	r3, r2
 802bd88:	657b      	str	r3, [r7, #84]	; 0x54
 802bd8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd8c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bd90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd92:	4413      	add	r3, r2
 802bd94:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802bd96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd9a:	405a      	eors	r2, r3
 802bd9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd9e:	401a      	ands	r2, r3
 802bda0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bda2:	405a      	eors	r2, r3
 802bda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bda6:	441a      	add	r2, r3
 802bda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdaa:	441a      	add	r2, r3
 802bdac:	4b5c      	ldr	r3, [pc, #368]	; (802bf20 <mbedtls_internal_md5_process+0x858>)
 802bdae:	4413      	add	r3, r2
 802bdb0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bdb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdb4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bdb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bdba:	4413      	add	r3, r2
 802bdbc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802bdbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bdc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdc2:	405a      	eors	r2, r3
 802bdc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdc6:	401a      	ands	r2, r3
 802bdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdca:	405a      	eors	r2, r3
 802bdcc:	697b      	ldr	r3, [r7, #20]
 802bdce:	441a      	add	r2, r3
 802bdd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdd2:	441a      	add	r2, r3
 802bdd4:	4b53      	ldr	r3, [pc, #332]	; (802bf24 <mbedtls_internal_md5_process+0x85c>)
 802bdd6:	4413      	add	r3, r2
 802bdd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bdda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bddc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bde0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bde2:	4413      	add	r3, r2
 802bde4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802bde6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bde8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdea:	405a      	eors	r2, r3
 802bdec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdee:	401a      	ands	r2, r3
 802bdf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdf2:	405a      	eors	r2, r3
 802bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bdf6:	441a      	add	r2, r3
 802bdf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdfa:	441a      	add	r2, r3
 802bdfc:	4b4a      	ldr	r3, [pc, #296]	; (802bf28 <mbedtls_internal_md5_process+0x860>)
 802bdfe:	4413      	add	r3, r2
 802be00:	653b      	str	r3, [r7, #80]	; 0x50
 802be02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be04:	ea4f 3333 	mov.w	r3, r3, ror #12
 802be08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be0a:	4413      	add	r3, r2
 802be0c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802be0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be12:	405a      	eors	r2, r3
 802be14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be16:	401a      	ands	r2, r3
 802be18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be1a:	405a      	eors	r2, r3
 802be1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802be1e:	441a      	add	r2, r3
 802be20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be22:	441a      	add	r2, r3
 802be24:	4b41      	ldr	r3, [pc, #260]	; (802bf2c <mbedtls_internal_md5_process+0x864>)
 802be26:	4413      	add	r3, r2
 802be28:	657b      	str	r3, [r7, #84]	; 0x54
 802be2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be2c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802be30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be32:	4413      	add	r3, r2
 802be34:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802be36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be3a:	405a      	eors	r2, r3
 802be3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be3e:	401a      	ands	r2, r3
 802be40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be42:	405a      	eors	r2, r3
 802be44:	693b      	ldr	r3, [r7, #16]
 802be46:	441a      	add	r2, r3
 802be48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be4a:	441a      	add	r2, r3
 802be4c:	4b38      	ldr	r3, [pc, #224]	; (802bf30 <mbedtls_internal_md5_process+0x868>)
 802be4e:	4413      	add	r3, r2
 802be50:	64bb      	str	r3, [r7, #72]	; 0x48
 802be52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be54:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802be58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be5a:	4413      	add	r3, r2
 802be5c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802be5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be62:	405a      	eors	r2, r3
 802be64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be66:	401a      	ands	r2, r3
 802be68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be6a:	405a      	eors	r2, r3
 802be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be6e:	441a      	add	r2, r3
 802be70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be72:	441a      	add	r2, r3
 802be74:	4b2f      	ldr	r3, [pc, #188]	; (802bf34 <mbedtls_internal_md5_process+0x86c>)
 802be76:	4413      	add	r3, r2
 802be78:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be7c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802be80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be82:	4413      	add	r3, r2
 802be84:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802be86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be8a:	405a      	eors	r2, r3
 802be8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be8e:	401a      	ands	r2, r3
 802be90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be92:	405a      	eors	r2, r3
 802be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802be96:	441a      	add	r2, r3
 802be98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be9a:	441a      	add	r2, r3
 802be9c:	4b26      	ldr	r3, [pc, #152]	; (802bf38 <mbedtls_internal_md5_process+0x870>)
 802be9e:	4413      	add	r3, r2
 802bea0:	653b      	str	r3, [r7, #80]	; 0x50
 802bea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bea4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802beaa:	4413      	add	r3, r2
 802beac:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802beae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802beb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802beb2:	405a      	eors	r2, r3
 802beb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802beb6:	405a      	eors	r2, r3
 802beb8:	69fb      	ldr	r3, [r7, #28]
 802beba:	441a      	add	r2, r3
 802bebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bebe:	4413      	add	r3, r2
 802bec0:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 802bec4:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 802bec8:	657b      	str	r3, [r7, #84]	; 0x54
 802beca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802becc:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bed0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bed2:	4413      	add	r3, r2
 802bed4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802bed6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802beda:	405a      	eors	r2, r3
 802bedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bede:	405a      	eors	r2, r3
 802bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bee2:	441a      	add	r2, r3
 802bee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bee6:	441a      	add	r2, r3
 802bee8:	4b14      	ldr	r3, [pc, #80]	; (802bf3c <mbedtls_internal_md5_process+0x874>)
 802beea:	4413      	add	r3, r2
 802beec:	64bb      	str	r3, [r7, #72]	; 0x48
 802beee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bef0:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bef4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bef6:	4413      	add	r3, r2
 802bef8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802befa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802befc:	e020      	b.n	802bf40 <mbedtls_internal_md5_process+0x878>
 802befe:	bf00      	nop
 802bf00:	c040b340 	.word	0xc040b340
 802bf04:	265e5a51 	.word	0x265e5a51
 802bf08:	e9b6c7aa 	.word	0xe9b6c7aa
 802bf0c:	d62f105d 	.word	0xd62f105d
 802bf10:	02441453 	.word	0x02441453
 802bf14:	d8a1e681 	.word	0xd8a1e681
 802bf18:	e7d3fbc8 	.word	0xe7d3fbc8
 802bf1c:	21e1cde6 	.word	0x21e1cde6
 802bf20:	c33707d6 	.word	0xc33707d6
 802bf24:	f4d50d87 	.word	0xf4d50d87
 802bf28:	455a14ed 	.word	0x455a14ed
 802bf2c:	a9e3e905 	.word	0xa9e3e905
 802bf30:	fcefa3f8 	.word	0xfcefa3f8
 802bf34:	676f02d9 	.word	0x676f02d9
 802bf38:	8d2a4c8a 	.word	0x8d2a4c8a
 802bf3c:	8771f681 	.word	0x8771f681
 802bf40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf42:	405a      	eors	r2, r3
 802bf44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf46:	405a      	eors	r2, r3
 802bf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bf4a:	441a      	add	r2, r3
 802bf4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf4e:	441a      	add	r2, r3
 802bf50:	4ba4      	ldr	r3, [pc, #656]	; (802c1e4 <mbedtls_internal_md5_process+0xb1c>)
 802bf52:	4413      	add	r3, r2
 802bf54:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bf56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf58:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bf5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf5e:	4413      	add	r3, r2
 802bf60:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802bf62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf66:	405a      	eors	r2, r3
 802bf68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf6a:	405a      	eors	r2, r3
 802bf6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bf6e:	441a      	add	r2, r3
 802bf70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf72:	441a      	add	r2, r3
 802bf74:	4b9c      	ldr	r3, [pc, #624]	; (802c1e8 <mbedtls_internal_md5_process+0xb20>)
 802bf76:	4413      	add	r3, r2
 802bf78:	653b      	str	r3, [r7, #80]	; 0x50
 802bf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf7c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bf80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf82:	4413      	add	r3, r2
 802bf84:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802bf86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf8a:	405a      	eors	r2, r3
 802bf8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf8e:	405a      	eors	r2, r3
 802bf90:	68fb      	ldr	r3, [r7, #12]
 802bf92:	441a      	add	r2, r3
 802bf94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf96:	441a      	add	r2, r3
 802bf98:	4b94      	ldr	r3, [pc, #592]	; (802c1ec <mbedtls_internal_md5_process+0xb24>)
 802bf9a:	4413      	add	r3, r2
 802bf9c:	657b      	str	r3, [r7, #84]	; 0x54
 802bf9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfa0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bfa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bfa6:	4413      	add	r3, r2
 802bfa8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802bfaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bfac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfae:	405a      	eors	r2, r3
 802bfb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfb2:	405a      	eors	r2, r3
 802bfb4:	69bb      	ldr	r3, [r7, #24]
 802bfb6:	441a      	add	r2, r3
 802bfb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfba:	441a      	add	r2, r3
 802bfbc:	4b8c      	ldr	r3, [pc, #560]	; (802c1f0 <mbedtls_internal_md5_process+0xb28>)
 802bfbe:	4413      	add	r3, r2
 802bfc0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bfc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfc4:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bfc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bfca:	4413      	add	r3, r2
 802bfcc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802bfce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bfd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfd2:	405a      	eors	r2, r3
 802bfd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfd6:	405a      	eors	r2, r3
 802bfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bfda:	441a      	add	r2, r3
 802bfdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfde:	441a      	add	r2, r3
 802bfe0:	4b84      	ldr	r3, [pc, #528]	; (802c1f4 <mbedtls_internal_md5_process+0xb2c>)
 802bfe2:	4413      	add	r3, r2
 802bfe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bfe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfe8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bfec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bfee:	4413      	add	r3, r2
 802bff0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802bff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bff6:	405a      	eors	r2, r3
 802bff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bffa:	405a      	eors	r2, r3
 802bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bffe:	441a      	add	r2, r3
 802c000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c002:	441a      	add	r2, r3
 802c004:	4b7c      	ldr	r3, [pc, #496]	; (802c1f8 <mbedtls_internal_md5_process+0xb30>)
 802c006:	4413      	add	r3, r2
 802c008:	653b      	str	r3, [r7, #80]	; 0x50
 802c00a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c00c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c012:	4413      	add	r3, r2
 802c014:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802c016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c01a:	405a      	eors	r2, r3
 802c01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c01e:	405a      	eors	r2, r3
 802c020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c022:	441a      	add	r2, r3
 802c024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c026:	441a      	add	r2, r3
 802c028:	4b74      	ldr	r3, [pc, #464]	; (802c1fc <mbedtls_internal_md5_process+0xb34>)
 802c02a:	4413      	add	r3, r2
 802c02c:	657b      	str	r3, [r7, #84]	; 0x54
 802c02e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c030:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c034:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c036:	4413      	add	r3, r2
 802c038:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802c03a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c03c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c03e:	405a      	eors	r2, r3
 802c040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c042:	405a      	eors	r2, r3
 802c044:	68bb      	ldr	r3, [r7, #8]
 802c046:	441a      	add	r2, r3
 802c048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c04a:	441a      	add	r2, r3
 802c04c:	4b6c      	ldr	r3, [pc, #432]	; (802c200 <mbedtls_internal_md5_process+0xb38>)
 802c04e:	4413      	add	r3, r2
 802c050:	64bb      	str	r3, [r7, #72]	; 0x48
 802c052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c054:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c05a:	4413      	add	r3, r2
 802c05c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802c05e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c062:	405a      	eors	r2, r3
 802c064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c066:	405a      	eors	r2, r3
 802c068:	697b      	ldr	r3, [r7, #20]
 802c06a:	441a      	add	r2, r3
 802c06c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c06e:	441a      	add	r2, r3
 802c070:	4b64      	ldr	r3, [pc, #400]	; (802c204 <mbedtls_internal_md5_process+0xb3c>)
 802c072:	4413      	add	r3, r2
 802c074:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c078:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c07c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c07e:	4413      	add	r3, r2
 802c080:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802c082:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c086:	405a      	eors	r2, r3
 802c088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c08a:	405a      	eors	r2, r3
 802c08c:	6a3b      	ldr	r3, [r7, #32]
 802c08e:	441a      	add	r2, r3
 802c090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c092:	441a      	add	r2, r3
 802c094:	4b5c      	ldr	r3, [pc, #368]	; (802c208 <mbedtls_internal_md5_process+0xb40>)
 802c096:	4413      	add	r3, r2
 802c098:	653b      	str	r3, [r7, #80]	; 0x50
 802c09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c09c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c0a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c0a2:	4413      	add	r3, r2
 802c0a4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802c0a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c0a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0aa:	405a      	eors	r2, r3
 802c0ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0ae:	405a      	eors	r2, r3
 802c0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c0b2:	441a      	add	r2, r3
 802c0b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c0b6:	441a      	add	r2, r3
 802c0b8:	4b54      	ldr	r3, [pc, #336]	; (802c20c <mbedtls_internal_md5_process+0xb44>)
 802c0ba:	4413      	add	r3, r2
 802c0bc:	657b      	str	r3, [r7, #84]	; 0x54
 802c0be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c0c0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c0c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c0c6:	4413      	add	r3, r2
 802c0c8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802c0ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c0cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0ce:	405a      	eors	r2, r3
 802c0d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0d2:	405a      	eors	r2, r3
 802c0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c0d6:	441a      	add	r2, r3
 802c0d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0da:	441a      	add	r2, r3
 802c0dc:	4b4c      	ldr	r3, [pc, #304]	; (802c210 <mbedtls_internal_md5_process+0xb48>)
 802c0de:	4413      	add	r3, r2
 802c0e0:	64bb      	str	r3, [r7, #72]	; 0x48
 802c0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0e4:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c0e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c0ea:	4413      	add	r3, r2
 802c0ec:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802c0ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c0f2:	405a      	eors	r2, r3
 802c0f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0f6:	405a      	eors	r2, r3
 802c0f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c0fa:	441a      	add	r2, r3
 802c0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0fe:	441a      	add	r2, r3
 802c100:	4b44      	ldr	r3, [pc, #272]	; (802c214 <mbedtls_internal_md5_process+0xb4c>)
 802c102:	4413      	add	r3, r2
 802c104:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c108:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c10c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c10e:	4413      	add	r3, r2
 802c110:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802c112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c116:	405a      	eors	r2, r3
 802c118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c11a:	405a      	eors	r2, r3
 802c11c:	693b      	ldr	r3, [r7, #16]
 802c11e:	441a      	add	r2, r3
 802c120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c122:	441a      	add	r2, r3
 802c124:	4b3c      	ldr	r3, [pc, #240]	; (802c218 <mbedtls_internal_md5_process+0xb50>)
 802c126:	4413      	add	r3, r2
 802c128:	653b      	str	r3, [r7, #80]	; 0x50
 802c12a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c12c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c132:	4413      	add	r3, r2
 802c134:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802c136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c138:	43da      	mvns	r2, r3
 802c13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c13c:	431a      	orrs	r2, r3
 802c13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c140:	405a      	eors	r2, r3
 802c142:	68bb      	ldr	r3, [r7, #8]
 802c144:	441a      	add	r2, r3
 802c146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c148:	441a      	add	r2, r3
 802c14a:	4b34      	ldr	r3, [pc, #208]	; (802c21c <mbedtls_internal_md5_process+0xb54>)
 802c14c:	4413      	add	r3, r2
 802c14e:	657b      	str	r3, [r7, #84]	; 0x54
 802c150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c152:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c156:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c158:	4413      	add	r3, r2
 802c15a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802c15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c15e:	43da      	mvns	r2, r3
 802c160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c162:	431a      	orrs	r2, r3
 802c164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c166:	405a      	eors	r2, r3
 802c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c16a:	441a      	add	r2, r3
 802c16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c16e:	441a      	add	r2, r3
 802c170:	4b2b      	ldr	r3, [pc, #172]	; (802c220 <mbedtls_internal_md5_process+0xb58>)
 802c172:	4413      	add	r3, r2
 802c174:	64bb      	str	r3, [r7, #72]	; 0x48
 802c176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c178:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c17c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c17e:	4413      	add	r3, r2
 802c180:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802c182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c184:	43da      	mvns	r2, r3
 802c186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c188:	431a      	orrs	r2, r3
 802c18a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c18c:	405a      	eors	r2, r3
 802c18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c190:	441a      	add	r2, r3
 802c192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c194:	441a      	add	r2, r3
 802c196:	4b23      	ldr	r3, [pc, #140]	; (802c224 <mbedtls_internal_md5_process+0xb5c>)
 802c198:	4413      	add	r3, r2
 802c19a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c19c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c19e:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c1a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c1a4:	4413      	add	r3, r2
 802c1a6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802c1a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1aa:	43da      	mvns	r2, r3
 802c1ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1ae:	431a      	orrs	r2, r3
 802c1b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c1b2:	405a      	eors	r2, r3
 802c1b4:	69fb      	ldr	r3, [r7, #28]
 802c1b6:	441a      	add	r2, r3
 802c1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c1ba:	441a      	add	r2, r3
 802c1bc:	4b1a      	ldr	r3, [pc, #104]	; (802c228 <mbedtls_internal_md5_process+0xb60>)
 802c1be:	4413      	add	r3, r2
 802c1c0:	653b      	str	r3, [r7, #80]	; 0x50
 802c1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c1c4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c1c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c1ca:	4413      	add	r3, r2
 802c1cc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802c1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c1d0:	43da      	mvns	r2, r3
 802c1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c1d4:	431a      	orrs	r2, r3
 802c1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c1d8:	405a      	eors	r2, r3
 802c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c1dc:	441a      	add	r2, r3
 802c1de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1e0:	e024      	b.n	802c22c <mbedtls_internal_md5_process+0xb64>
 802c1e2:	bf00      	nop
 802c1e4:	6d9d6122 	.word	0x6d9d6122
 802c1e8:	fde5380c 	.word	0xfde5380c
 802c1ec:	a4beea44 	.word	0xa4beea44
 802c1f0:	4bdecfa9 	.word	0x4bdecfa9
 802c1f4:	f6bb4b60 	.word	0xf6bb4b60
 802c1f8:	bebfbc70 	.word	0xbebfbc70
 802c1fc:	289b7ec6 	.word	0x289b7ec6
 802c200:	eaa127fa 	.word	0xeaa127fa
 802c204:	d4ef3085 	.word	0xd4ef3085
 802c208:	04881d05 	.word	0x04881d05
 802c20c:	d9d4d039 	.word	0xd9d4d039
 802c210:	e6db99e5 	.word	0xe6db99e5
 802c214:	1fa27cf8 	.word	0x1fa27cf8
 802c218:	c4ac5665 	.word	0xc4ac5665
 802c21c:	f4292244 	.word	0xf4292244
 802c220:	432aff97 	.word	0x432aff97
 802c224:	ab9423a7 	.word	0xab9423a7
 802c228:	fc93a039 	.word	0xfc93a039
 802c22c:	441a      	add	r2, r3
 802c22e:	4b7d      	ldr	r3, [pc, #500]	; (802c424 <mbedtls_internal_md5_process+0xd5c>)
 802c230:	4413      	add	r3, r2
 802c232:	657b      	str	r3, [r7, #84]	; 0x54
 802c234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c236:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c23c:	4413      	add	r3, r2
 802c23e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802c240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c242:	43da      	mvns	r2, r3
 802c244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c246:	431a      	orrs	r2, r3
 802c248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c24a:	405a      	eors	r2, r3
 802c24c:	697b      	ldr	r3, [r7, #20]
 802c24e:	441a      	add	r2, r3
 802c250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c252:	441a      	add	r2, r3
 802c254:	4b74      	ldr	r3, [pc, #464]	; (802c428 <mbedtls_internal_md5_process+0xd60>)
 802c256:	4413      	add	r3, r2
 802c258:	64bb      	str	r3, [r7, #72]	; 0x48
 802c25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c25c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c262:	4413      	add	r3, r2
 802c264:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802c266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c268:	43da      	mvns	r2, r3
 802c26a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c26c:	431a      	orrs	r2, r3
 802c26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c270:	405a      	eors	r2, r3
 802c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c274:	441a      	add	r2, r3
 802c276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c278:	4413      	add	r3, r2
 802c27a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802c27e:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 802c282:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c286:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c28c:	4413      	add	r3, r2
 802c28e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802c290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c292:	43da      	mvns	r2, r3
 802c294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c296:	431a      	orrs	r2, r3
 802c298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c29a:	405a      	eors	r2, r3
 802c29c:	68fb      	ldr	r3, [r7, #12]
 802c29e:	441a      	add	r2, r3
 802c2a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c2a2:	441a      	add	r2, r3
 802c2a4:	4b61      	ldr	r3, [pc, #388]	; (802c42c <mbedtls_internal_md5_process+0xd64>)
 802c2a6:	4413      	add	r3, r2
 802c2a8:	653b      	str	r3, [r7, #80]	; 0x50
 802c2aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c2ac:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c2b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c2b2:	4413      	add	r3, r2
 802c2b4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802c2b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c2b8:	43da      	mvns	r2, r3
 802c2ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c2bc:	431a      	orrs	r2, r3
 802c2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c2c0:	405a      	eors	r2, r3
 802c2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c2c4:	441a      	add	r2, r3
 802c2c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c2c8:	441a      	add	r2, r3
 802c2ca:	4b59      	ldr	r3, [pc, #356]	; (802c430 <mbedtls_internal_md5_process+0xd68>)
 802c2cc:	4413      	add	r3, r2
 802c2ce:	657b      	str	r3, [r7, #84]	; 0x54
 802c2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c2d2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c2d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c2d8:	4413      	add	r3, r2
 802c2da:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802c2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c2de:	43da      	mvns	r2, r3
 802c2e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c2e2:	431a      	orrs	r2, r3
 802c2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c2e6:	405a      	eors	r2, r3
 802c2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c2ea:	441a      	add	r2, r3
 802c2ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c2ee:	441a      	add	r2, r3
 802c2f0:	4b50      	ldr	r3, [pc, #320]	; (802c434 <mbedtls_internal_md5_process+0xd6c>)
 802c2f2:	4413      	add	r3, r2
 802c2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 802c2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c2f8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c2fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c2fe:	4413      	add	r3, r2
 802c300:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802c302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c304:	43da      	mvns	r2, r3
 802c306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c308:	431a      	orrs	r2, r3
 802c30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c30c:	405a      	eors	r2, r3
 802c30e:	6a3b      	ldr	r3, [r7, #32]
 802c310:	441a      	add	r2, r3
 802c312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c314:	441a      	add	r2, r3
 802c316:	4b48      	ldr	r3, [pc, #288]	; (802c438 <mbedtls_internal_md5_process+0xd70>)
 802c318:	4413      	add	r3, r2
 802c31a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c31c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c31e:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c324:	4413      	add	r3, r2
 802c326:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802c328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c32a:	43da      	mvns	r2, r3
 802c32c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c32e:	431a      	orrs	r2, r3
 802c330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c332:	405a      	eors	r2, r3
 802c334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c336:	441a      	add	r2, r3
 802c338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c33a:	441a      	add	r2, r3
 802c33c:	4b3f      	ldr	r3, [pc, #252]	; (802c43c <mbedtls_internal_md5_process+0xd74>)
 802c33e:	4413      	add	r3, r2
 802c340:	653b      	str	r3, [r7, #80]	; 0x50
 802c342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c344:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c348:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c34a:	4413      	add	r3, r2
 802c34c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802c34e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c350:	43da      	mvns	r2, r3
 802c352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c354:	431a      	orrs	r2, r3
 802c356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c358:	405a      	eors	r2, r3
 802c35a:	69bb      	ldr	r3, [r7, #24]
 802c35c:	441a      	add	r2, r3
 802c35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c360:	441a      	add	r2, r3
 802c362:	4b37      	ldr	r3, [pc, #220]	; (802c440 <mbedtls_internal_md5_process+0xd78>)
 802c364:	4413      	add	r3, r2
 802c366:	657b      	str	r3, [r7, #84]	; 0x54
 802c368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c36a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c36e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c370:	4413      	add	r3, r2
 802c372:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802c374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c376:	43da      	mvns	r2, r3
 802c378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c37a:	431a      	orrs	r2, r3
 802c37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c37e:	405a      	eors	r2, r3
 802c380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c382:	441a      	add	r2, r3
 802c384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c386:	441a      	add	r2, r3
 802c388:	4b2e      	ldr	r3, [pc, #184]	; (802c444 <mbedtls_internal_md5_process+0xd7c>)
 802c38a:	4413      	add	r3, r2
 802c38c:	64bb      	str	r3, [r7, #72]	; 0x48
 802c38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c390:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c394:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c396:	4413      	add	r3, r2
 802c398:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802c39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c39c:	43da      	mvns	r2, r3
 802c39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c3a0:	431a      	orrs	r2, r3
 802c3a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c3a4:	405a      	eors	r2, r3
 802c3a6:	693b      	ldr	r3, [r7, #16]
 802c3a8:	441a      	add	r2, r3
 802c3aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c3ac:	441a      	add	r2, r3
 802c3ae:	4b26      	ldr	r3, [pc, #152]	; (802c448 <mbedtls_internal_md5_process+0xd80>)
 802c3b0:	4413      	add	r3, r2
 802c3b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c3b6:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c3ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c3bc:	4413      	add	r3, r2
 802c3be:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802c3c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c3c2:	43da      	mvns	r2, r3
 802c3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c3c6:	431a      	orrs	r2, r3
 802c3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c3ca:	405a      	eors	r2, r3
 802c3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c3ce:	441a      	add	r2, r3
 802c3d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c3d2:	441a      	add	r2, r3
 802c3d4:	4b1d      	ldr	r3, [pc, #116]	; (802c44c <mbedtls_internal_md5_process+0xd84>)
 802c3d6:	4413      	add	r3, r2
 802c3d8:	653b      	str	r3, [r7, #80]	; 0x50
 802c3da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c3dc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c3e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c3e2:	4413      	add	r3, r2
 802c3e4:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 802c3e6:	687b      	ldr	r3, [r7, #4]
 802c3e8:	689a      	ldr	r2, [r3, #8]
 802c3ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c3ec:	441a      	add	r2, r3
 802c3ee:	687b      	ldr	r3, [r7, #4]
 802c3f0:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802c3f2:	687b      	ldr	r3, [r7, #4]
 802c3f4:	68da      	ldr	r2, [r3, #12]
 802c3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c3f8:	441a      	add	r2, r3
 802c3fa:	687b      	ldr	r3, [r7, #4]
 802c3fc:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802c3fe:	687b      	ldr	r3, [r7, #4]
 802c400:	691a      	ldr	r2, [r3, #16]
 802c402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c404:	441a      	add	r2, r3
 802c406:	687b      	ldr	r3, [r7, #4]
 802c408:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802c40a:	687b      	ldr	r3, [r7, #4]
 802c40c:	695a      	ldr	r2, [r3, #20]
 802c40e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c410:	441a      	add	r2, r3
 802c412:	687b      	ldr	r3, [r7, #4]
 802c414:	615a      	str	r2, [r3, #20]

    return( 0 );
 802c416:	2300      	movs	r3, #0
}
 802c418:	4618      	mov	r0, r3
 802c41a:	375c      	adds	r7, #92	; 0x5c
 802c41c:	46bd      	mov	sp, r7
 802c41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c422:	4770      	bx	lr
 802c424:	655b59c3 	.word	0x655b59c3
 802c428:	8f0ccc92 	.word	0x8f0ccc92
 802c42c:	85845dd1 	.word	0x85845dd1
 802c430:	6fa87e4f 	.word	0x6fa87e4f
 802c434:	fe2ce6e0 	.word	0xfe2ce6e0
 802c438:	a3014314 	.word	0xa3014314
 802c43c:	4e0811a1 	.word	0x4e0811a1
 802c440:	f7537e82 	.word	0xf7537e82
 802c444:	bd3af235 	.word	0xbd3af235
 802c448:	2ad7d2bb 	.word	0x2ad7d2bb
 802c44c:	eb86d391 	.word	0xeb86d391

0802c450 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802c450:	b580      	push	{r7, lr}
 802c452:	b088      	sub	sp, #32
 802c454:	af00      	add	r7, sp, #0
 802c456:	60f8      	str	r0, [r7, #12]
 802c458:	60b9      	str	r1, [r7, #8]
 802c45a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802c45c:	687b      	ldr	r3, [r7, #4]
 802c45e:	2b00      	cmp	r3, #0
 802c460:	d101      	bne.n	802c466 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802c462:	2300      	movs	r3, #0
 802c464:	e065      	b.n	802c532 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802c466:	68fb      	ldr	r3, [r7, #12]
 802c468:	681b      	ldr	r3, [r3, #0]
 802c46a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c46e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802c470:	69fb      	ldr	r3, [r7, #28]
 802c472:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c476:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802c478:	68fb      	ldr	r3, [r7, #12]
 802c47a:	681a      	ldr	r2, [r3, #0]
 802c47c:	687b      	ldr	r3, [r7, #4]
 802c47e:	441a      	add	r2, r3
 802c480:	68fb      	ldr	r3, [r7, #12]
 802c482:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802c484:	68fb      	ldr	r3, [r7, #12]
 802c486:	681a      	ldr	r2, [r3, #0]
 802c488:	68fb      	ldr	r3, [r7, #12]
 802c48a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802c48c:	68fb      	ldr	r3, [r7, #12]
 802c48e:	681b      	ldr	r3, [r3, #0]
 802c490:	687a      	ldr	r2, [r7, #4]
 802c492:	429a      	cmp	r2, r3
 802c494:	d904      	bls.n	802c4a0 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802c496:	68fb      	ldr	r3, [r7, #12]
 802c498:	685b      	ldr	r3, [r3, #4]
 802c49a:	1c5a      	adds	r2, r3, #1
 802c49c:	68fb      	ldr	r3, [r7, #12]
 802c49e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802c4a0:	69fb      	ldr	r3, [r7, #28]
 802c4a2:	2b00      	cmp	r3, #0
 802c4a4:	d034      	beq.n	802c510 <mbedtls_md5_update_ret+0xc0>
 802c4a6:	687a      	ldr	r2, [r7, #4]
 802c4a8:	69bb      	ldr	r3, [r7, #24]
 802c4aa:	429a      	cmp	r2, r3
 802c4ac:	d330      	bcc.n	802c510 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802c4ae:	68fb      	ldr	r3, [r7, #12]
 802c4b0:	f103 0218 	add.w	r2, r3, #24
 802c4b4:	69fb      	ldr	r3, [r7, #28]
 802c4b6:	4413      	add	r3, r2
 802c4b8:	69ba      	ldr	r2, [r7, #24]
 802c4ba:	68b9      	ldr	r1, [r7, #8]
 802c4bc:	4618      	mov	r0, r3
 802c4be:	f001 fcea 	bl	802de96 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c4c2:	68fb      	ldr	r3, [r7, #12]
 802c4c4:	3318      	adds	r3, #24
 802c4c6:	4619      	mov	r1, r3
 802c4c8:	68f8      	ldr	r0, [r7, #12]
 802c4ca:	f7ff f8fd 	bl	802b6c8 <mbedtls_internal_md5_process>
 802c4ce:	6178      	str	r0, [r7, #20]
 802c4d0:	697b      	ldr	r3, [r7, #20]
 802c4d2:	2b00      	cmp	r3, #0
 802c4d4:	d001      	beq.n	802c4da <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802c4d6:	697b      	ldr	r3, [r7, #20]
 802c4d8:	e02b      	b.n	802c532 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802c4da:	68ba      	ldr	r2, [r7, #8]
 802c4dc:	69bb      	ldr	r3, [r7, #24]
 802c4de:	4413      	add	r3, r2
 802c4e0:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802c4e2:	687a      	ldr	r2, [r7, #4]
 802c4e4:	69bb      	ldr	r3, [r7, #24]
 802c4e6:	1ad3      	subs	r3, r2, r3
 802c4e8:	607b      	str	r3, [r7, #4]
        left = 0;
 802c4ea:	2300      	movs	r3, #0
 802c4ec:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802c4ee:	e00f      	b.n	802c510 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802c4f0:	68b9      	ldr	r1, [r7, #8]
 802c4f2:	68f8      	ldr	r0, [r7, #12]
 802c4f4:	f7ff f8e8 	bl	802b6c8 <mbedtls_internal_md5_process>
 802c4f8:	6178      	str	r0, [r7, #20]
 802c4fa:	697b      	ldr	r3, [r7, #20]
 802c4fc:	2b00      	cmp	r3, #0
 802c4fe:	d001      	beq.n	802c504 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802c500:	697b      	ldr	r3, [r7, #20]
 802c502:	e016      	b.n	802c532 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802c504:	68bb      	ldr	r3, [r7, #8]
 802c506:	3340      	adds	r3, #64	; 0x40
 802c508:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802c50a:	687b      	ldr	r3, [r7, #4]
 802c50c:	3b40      	subs	r3, #64	; 0x40
 802c50e:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802c510:	687b      	ldr	r3, [r7, #4]
 802c512:	2b3f      	cmp	r3, #63	; 0x3f
 802c514:	d8ec      	bhi.n	802c4f0 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802c516:	687b      	ldr	r3, [r7, #4]
 802c518:	2b00      	cmp	r3, #0
 802c51a:	d009      	beq.n	802c530 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802c51c:	68fb      	ldr	r3, [r7, #12]
 802c51e:	f103 0218 	add.w	r2, r3, #24
 802c522:	69fb      	ldr	r3, [r7, #28]
 802c524:	4413      	add	r3, r2
 802c526:	687a      	ldr	r2, [r7, #4]
 802c528:	68b9      	ldr	r1, [r7, #8]
 802c52a:	4618      	mov	r0, r3
 802c52c:	f001 fcb3 	bl	802de96 <memcpy>
    }

    return( 0 );
 802c530:	2300      	movs	r3, #0
}
 802c532:	4618      	mov	r0, r3
 802c534:	3720      	adds	r7, #32
 802c536:	46bd      	mov	sp, r7
 802c538:	bd80      	pop	{r7, pc}

0802c53a <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802c53a:	b580      	push	{r7, lr}
 802c53c:	b086      	sub	sp, #24
 802c53e:	af00      	add	r7, sp, #0
 802c540:	6078      	str	r0, [r7, #4]
 802c542:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802c544:	687b      	ldr	r3, [r7, #4]
 802c546:	681b      	ldr	r3, [r3, #0]
 802c548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c54c:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802c54e:	697b      	ldr	r3, [r7, #20]
 802c550:	1c5a      	adds	r2, r3, #1
 802c552:	617a      	str	r2, [r7, #20]
 802c554:	687a      	ldr	r2, [r7, #4]
 802c556:	4413      	add	r3, r2
 802c558:	2280      	movs	r2, #128	; 0x80
 802c55a:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802c55c:	697b      	ldr	r3, [r7, #20]
 802c55e:	2b38      	cmp	r3, #56	; 0x38
 802c560:	d80c      	bhi.n	802c57c <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802c562:	687b      	ldr	r3, [r7, #4]
 802c564:	f103 0218 	add.w	r2, r3, #24
 802c568:	697b      	ldr	r3, [r7, #20]
 802c56a:	18d0      	adds	r0, r2, r3
 802c56c:	697b      	ldr	r3, [r7, #20]
 802c56e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802c572:	461a      	mov	r2, r3
 802c574:	2100      	movs	r1, #0
 802c576:	f001 fab9 	bl	802daec <memset>
 802c57a:	e01e      	b.n	802c5ba <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802c57c:	687b      	ldr	r3, [r7, #4]
 802c57e:	f103 0218 	add.w	r2, r3, #24
 802c582:	697b      	ldr	r3, [r7, #20]
 802c584:	18d0      	adds	r0, r2, r3
 802c586:	697b      	ldr	r3, [r7, #20]
 802c588:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c58c:	461a      	mov	r2, r3
 802c58e:	2100      	movs	r1, #0
 802c590:	f001 faac 	bl	802daec <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c594:	687b      	ldr	r3, [r7, #4]
 802c596:	3318      	adds	r3, #24
 802c598:	4619      	mov	r1, r3
 802c59a:	6878      	ldr	r0, [r7, #4]
 802c59c:	f7ff f894 	bl	802b6c8 <mbedtls_internal_md5_process>
 802c5a0:	6138      	str	r0, [r7, #16]
 802c5a2:	693b      	ldr	r3, [r7, #16]
 802c5a4:	2b00      	cmp	r3, #0
 802c5a6:	d001      	beq.n	802c5ac <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802c5a8:	693b      	ldr	r3, [r7, #16]
 802c5aa:	e0b8      	b.n	802c71e <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802c5ac:	687b      	ldr	r3, [r7, #4]
 802c5ae:	3318      	adds	r3, #24
 802c5b0:	2238      	movs	r2, #56	; 0x38
 802c5b2:	2100      	movs	r1, #0
 802c5b4:	4618      	mov	r0, r3
 802c5b6:	f001 fa99 	bl	802daec <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802c5ba:	687b      	ldr	r3, [r7, #4]
 802c5bc:	681b      	ldr	r3, [r3, #0]
 802c5be:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802c5c0:	687b      	ldr	r3, [r7, #4]
 802c5c2:	685b      	ldr	r3, [r3, #4]
 802c5c4:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802c5c6:	4313      	orrs	r3, r2
 802c5c8:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802c5ca:	687b      	ldr	r3, [r7, #4]
 802c5cc:	681b      	ldr	r3, [r3, #0]
 802c5ce:	00db      	lsls	r3, r3, #3
 802c5d0:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802c5d2:	68bb      	ldr	r3, [r7, #8]
 802c5d4:	b2da      	uxtb	r2, r3
 802c5d6:	687b      	ldr	r3, [r7, #4]
 802c5d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802c5dc:	68bb      	ldr	r3, [r7, #8]
 802c5de:	0a1b      	lsrs	r3, r3, #8
 802c5e0:	b2da      	uxtb	r2, r3
 802c5e2:	687b      	ldr	r3, [r7, #4]
 802c5e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 802c5e8:	68bb      	ldr	r3, [r7, #8]
 802c5ea:	0c1b      	lsrs	r3, r3, #16
 802c5ec:	b2da      	uxtb	r2, r3
 802c5ee:	687b      	ldr	r3, [r7, #4]
 802c5f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 802c5f4:	68bb      	ldr	r3, [r7, #8]
 802c5f6:	0e1b      	lsrs	r3, r3, #24
 802c5f8:	b2da      	uxtb	r2, r3
 802c5fa:	687b      	ldr	r3, [r7, #4]
 802c5fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802c600:	68fb      	ldr	r3, [r7, #12]
 802c602:	b2da      	uxtb	r2, r3
 802c604:	687b      	ldr	r3, [r7, #4]
 802c606:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 802c60a:	68fb      	ldr	r3, [r7, #12]
 802c60c:	0a1b      	lsrs	r3, r3, #8
 802c60e:	b2da      	uxtb	r2, r3
 802c610:	687b      	ldr	r3, [r7, #4]
 802c612:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 802c616:	68fb      	ldr	r3, [r7, #12]
 802c618:	0c1b      	lsrs	r3, r3, #16
 802c61a:	b2da      	uxtb	r2, r3
 802c61c:	687b      	ldr	r3, [r7, #4]
 802c61e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 802c622:	68fb      	ldr	r3, [r7, #12]
 802c624:	0e1b      	lsrs	r3, r3, #24
 802c626:	b2da      	uxtb	r2, r3
 802c628:	687b      	ldr	r3, [r7, #4]
 802c62a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c62e:	687b      	ldr	r3, [r7, #4]
 802c630:	3318      	adds	r3, #24
 802c632:	4619      	mov	r1, r3
 802c634:	6878      	ldr	r0, [r7, #4]
 802c636:	f7ff f847 	bl	802b6c8 <mbedtls_internal_md5_process>
 802c63a:	6138      	str	r0, [r7, #16]
 802c63c:	693b      	ldr	r3, [r7, #16]
 802c63e:	2b00      	cmp	r3, #0
 802c640:	d001      	beq.n	802c646 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802c642:	693b      	ldr	r3, [r7, #16]
 802c644:	e06b      	b.n	802c71e <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802c646:	687b      	ldr	r3, [r7, #4]
 802c648:	689b      	ldr	r3, [r3, #8]
 802c64a:	b2da      	uxtb	r2, r3
 802c64c:	683b      	ldr	r3, [r7, #0]
 802c64e:	701a      	strb	r2, [r3, #0]
 802c650:	687b      	ldr	r3, [r7, #4]
 802c652:	689b      	ldr	r3, [r3, #8]
 802c654:	0a1a      	lsrs	r2, r3, #8
 802c656:	683b      	ldr	r3, [r7, #0]
 802c658:	3301      	adds	r3, #1
 802c65a:	b2d2      	uxtb	r2, r2
 802c65c:	701a      	strb	r2, [r3, #0]
 802c65e:	687b      	ldr	r3, [r7, #4]
 802c660:	689b      	ldr	r3, [r3, #8]
 802c662:	0c1a      	lsrs	r2, r3, #16
 802c664:	683b      	ldr	r3, [r7, #0]
 802c666:	3302      	adds	r3, #2
 802c668:	b2d2      	uxtb	r2, r2
 802c66a:	701a      	strb	r2, [r3, #0]
 802c66c:	687b      	ldr	r3, [r7, #4]
 802c66e:	689b      	ldr	r3, [r3, #8]
 802c670:	0e1a      	lsrs	r2, r3, #24
 802c672:	683b      	ldr	r3, [r7, #0]
 802c674:	3303      	adds	r3, #3
 802c676:	b2d2      	uxtb	r2, r2
 802c678:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802c67a:	687b      	ldr	r3, [r7, #4]
 802c67c:	68da      	ldr	r2, [r3, #12]
 802c67e:	683b      	ldr	r3, [r7, #0]
 802c680:	3304      	adds	r3, #4
 802c682:	b2d2      	uxtb	r2, r2
 802c684:	701a      	strb	r2, [r3, #0]
 802c686:	687b      	ldr	r3, [r7, #4]
 802c688:	68db      	ldr	r3, [r3, #12]
 802c68a:	0a1a      	lsrs	r2, r3, #8
 802c68c:	683b      	ldr	r3, [r7, #0]
 802c68e:	3305      	adds	r3, #5
 802c690:	b2d2      	uxtb	r2, r2
 802c692:	701a      	strb	r2, [r3, #0]
 802c694:	687b      	ldr	r3, [r7, #4]
 802c696:	68db      	ldr	r3, [r3, #12]
 802c698:	0c1a      	lsrs	r2, r3, #16
 802c69a:	683b      	ldr	r3, [r7, #0]
 802c69c:	3306      	adds	r3, #6
 802c69e:	b2d2      	uxtb	r2, r2
 802c6a0:	701a      	strb	r2, [r3, #0]
 802c6a2:	687b      	ldr	r3, [r7, #4]
 802c6a4:	68db      	ldr	r3, [r3, #12]
 802c6a6:	0e1a      	lsrs	r2, r3, #24
 802c6a8:	683b      	ldr	r3, [r7, #0]
 802c6aa:	3307      	adds	r3, #7
 802c6ac:	b2d2      	uxtb	r2, r2
 802c6ae:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802c6b0:	687b      	ldr	r3, [r7, #4]
 802c6b2:	691a      	ldr	r2, [r3, #16]
 802c6b4:	683b      	ldr	r3, [r7, #0]
 802c6b6:	3308      	adds	r3, #8
 802c6b8:	b2d2      	uxtb	r2, r2
 802c6ba:	701a      	strb	r2, [r3, #0]
 802c6bc:	687b      	ldr	r3, [r7, #4]
 802c6be:	691b      	ldr	r3, [r3, #16]
 802c6c0:	0a1a      	lsrs	r2, r3, #8
 802c6c2:	683b      	ldr	r3, [r7, #0]
 802c6c4:	3309      	adds	r3, #9
 802c6c6:	b2d2      	uxtb	r2, r2
 802c6c8:	701a      	strb	r2, [r3, #0]
 802c6ca:	687b      	ldr	r3, [r7, #4]
 802c6cc:	691b      	ldr	r3, [r3, #16]
 802c6ce:	0c1a      	lsrs	r2, r3, #16
 802c6d0:	683b      	ldr	r3, [r7, #0]
 802c6d2:	330a      	adds	r3, #10
 802c6d4:	b2d2      	uxtb	r2, r2
 802c6d6:	701a      	strb	r2, [r3, #0]
 802c6d8:	687b      	ldr	r3, [r7, #4]
 802c6da:	691b      	ldr	r3, [r3, #16]
 802c6dc:	0e1a      	lsrs	r2, r3, #24
 802c6de:	683b      	ldr	r3, [r7, #0]
 802c6e0:	330b      	adds	r3, #11
 802c6e2:	b2d2      	uxtb	r2, r2
 802c6e4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802c6e6:	687b      	ldr	r3, [r7, #4]
 802c6e8:	695a      	ldr	r2, [r3, #20]
 802c6ea:	683b      	ldr	r3, [r7, #0]
 802c6ec:	330c      	adds	r3, #12
 802c6ee:	b2d2      	uxtb	r2, r2
 802c6f0:	701a      	strb	r2, [r3, #0]
 802c6f2:	687b      	ldr	r3, [r7, #4]
 802c6f4:	695b      	ldr	r3, [r3, #20]
 802c6f6:	0a1a      	lsrs	r2, r3, #8
 802c6f8:	683b      	ldr	r3, [r7, #0]
 802c6fa:	330d      	adds	r3, #13
 802c6fc:	b2d2      	uxtb	r2, r2
 802c6fe:	701a      	strb	r2, [r3, #0]
 802c700:	687b      	ldr	r3, [r7, #4]
 802c702:	695b      	ldr	r3, [r3, #20]
 802c704:	0c1a      	lsrs	r2, r3, #16
 802c706:	683b      	ldr	r3, [r7, #0]
 802c708:	330e      	adds	r3, #14
 802c70a:	b2d2      	uxtb	r2, r2
 802c70c:	701a      	strb	r2, [r3, #0]
 802c70e:	687b      	ldr	r3, [r7, #4]
 802c710:	695b      	ldr	r3, [r3, #20]
 802c712:	0e1a      	lsrs	r2, r3, #24
 802c714:	683b      	ldr	r3, [r7, #0]
 802c716:	330f      	adds	r3, #15
 802c718:	b2d2      	uxtb	r2, r2
 802c71a:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802c71c:	2300      	movs	r3, #0
}
 802c71e:	4618      	mov	r0, r3
 802c720:	3718      	adds	r7, #24
 802c722:	46bd      	mov	sp, r7
 802c724:	bd80      	pop	{r7, pc}
	...

0802c728 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802c728:	b580      	push	{r7, lr}
 802c72a:	b082      	sub	sp, #8
 802c72c:	af00      	add	r7, sp, #0
 802c72e:	6078      	str	r0, [r7, #4]
 802c730:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802c732:	4b05      	ldr	r3, [pc, #20]	; (802c748 <mbedtls_platform_zeroize+0x20>)
 802c734:	681b      	ldr	r3, [r3, #0]
 802c736:	683a      	ldr	r2, [r7, #0]
 802c738:	2100      	movs	r1, #0
 802c73a:	6878      	ldr	r0, [r7, #4]
 802c73c:	4798      	blx	r3
}
 802c73e:	bf00      	nop
 802c740:	3708      	adds	r7, #8
 802c742:	46bd      	mov	sp, r7
 802c744:	bd80      	pop	{r7, pc}
 802c746:	bf00      	nop
 802c748:	2000012c 	.word	0x2000012c

0802c74c <__assert_func>:
 802c74c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c74e:	4614      	mov	r4, r2
 802c750:	461a      	mov	r2, r3
 802c752:	4b09      	ldr	r3, [pc, #36]	; (802c778 <__assert_func+0x2c>)
 802c754:	681b      	ldr	r3, [r3, #0]
 802c756:	4605      	mov	r5, r0
 802c758:	68d8      	ldr	r0, [r3, #12]
 802c75a:	b14c      	cbz	r4, 802c770 <__assert_func+0x24>
 802c75c:	4b07      	ldr	r3, [pc, #28]	; (802c77c <__assert_func+0x30>)
 802c75e:	9100      	str	r1, [sp, #0]
 802c760:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c764:	4906      	ldr	r1, [pc, #24]	; (802c780 <__assert_func+0x34>)
 802c766:	462b      	mov	r3, r5
 802c768:	f000 fffa 	bl	802d760 <fiprintf>
 802c76c:	f001 fba8 	bl	802dec0 <abort>
 802c770:	4b04      	ldr	r3, [pc, #16]	; (802c784 <__assert_func+0x38>)
 802c772:	461c      	mov	r4, r3
 802c774:	e7f3      	b.n	802c75e <__assert_func+0x12>
 802c776:	bf00      	nop
 802c778:	20000188 	.word	0x20000188
 802c77c:	08034d38 	.word	0x08034d38
 802c780:	08034d45 	.word	0x08034d45
 802c784:	08034d73 	.word	0x08034d73

0802c788 <_calloc_r>:
 802c788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c78a:	fba1 2402 	umull	r2, r4, r1, r2
 802c78e:	b94c      	cbnz	r4, 802c7a4 <_calloc_r+0x1c>
 802c790:	4611      	mov	r1, r2
 802c792:	9201      	str	r2, [sp, #4]
 802c794:	f000 f83e 	bl	802c814 <_malloc_r>
 802c798:	9a01      	ldr	r2, [sp, #4]
 802c79a:	4605      	mov	r5, r0
 802c79c:	b930      	cbnz	r0, 802c7ac <_calloc_r+0x24>
 802c79e:	4628      	mov	r0, r5
 802c7a0:	b003      	add	sp, #12
 802c7a2:	bd30      	pop	{r4, r5, pc}
 802c7a4:	220c      	movs	r2, #12
 802c7a6:	6002      	str	r2, [r0, #0]
 802c7a8:	2500      	movs	r5, #0
 802c7aa:	e7f8      	b.n	802c79e <_calloc_r+0x16>
 802c7ac:	4621      	mov	r1, r4
 802c7ae:	f001 f99d 	bl	802daec <memset>
 802c7b2:	e7f4      	b.n	802c79e <_calloc_r+0x16>

0802c7b4 <malloc>:
 802c7b4:	4b02      	ldr	r3, [pc, #8]	; (802c7c0 <malloc+0xc>)
 802c7b6:	4601      	mov	r1, r0
 802c7b8:	6818      	ldr	r0, [r3, #0]
 802c7ba:	f000 b82b 	b.w	802c814 <_malloc_r>
 802c7be:	bf00      	nop
 802c7c0:	20000188 	.word	0x20000188

0802c7c4 <free>:
 802c7c4:	4b02      	ldr	r3, [pc, #8]	; (802c7d0 <free+0xc>)
 802c7c6:	4601      	mov	r1, r0
 802c7c8:	6818      	ldr	r0, [r3, #0]
 802c7ca:	f002 b9fb 	b.w	802ebc4 <_free_r>
 802c7ce:	bf00      	nop
 802c7d0:	20000188 	.word	0x20000188

0802c7d4 <sbrk_aligned>:
 802c7d4:	b570      	push	{r4, r5, r6, lr}
 802c7d6:	4e0e      	ldr	r6, [pc, #56]	; (802c810 <sbrk_aligned+0x3c>)
 802c7d8:	460c      	mov	r4, r1
 802c7da:	6831      	ldr	r1, [r6, #0]
 802c7dc:	4605      	mov	r5, r0
 802c7de:	b911      	cbnz	r1, 802c7e6 <sbrk_aligned+0x12>
 802c7e0:	f001 fb02 	bl	802dde8 <_sbrk_r>
 802c7e4:	6030      	str	r0, [r6, #0]
 802c7e6:	4621      	mov	r1, r4
 802c7e8:	4628      	mov	r0, r5
 802c7ea:	f001 fafd 	bl	802dde8 <_sbrk_r>
 802c7ee:	1c43      	adds	r3, r0, #1
 802c7f0:	d00a      	beq.n	802c808 <sbrk_aligned+0x34>
 802c7f2:	1cc4      	adds	r4, r0, #3
 802c7f4:	f024 0403 	bic.w	r4, r4, #3
 802c7f8:	42a0      	cmp	r0, r4
 802c7fa:	d007      	beq.n	802c80c <sbrk_aligned+0x38>
 802c7fc:	1a21      	subs	r1, r4, r0
 802c7fe:	4628      	mov	r0, r5
 802c800:	f001 faf2 	bl	802dde8 <_sbrk_r>
 802c804:	3001      	adds	r0, #1
 802c806:	d101      	bne.n	802c80c <sbrk_aligned+0x38>
 802c808:	f04f 34ff 	mov.w	r4, #4294967295
 802c80c:	4620      	mov	r0, r4
 802c80e:	bd70      	pop	{r4, r5, r6, pc}
 802c810:	2000d9cc 	.word	0x2000d9cc

0802c814 <_malloc_r>:
 802c814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c818:	1ccd      	adds	r5, r1, #3
 802c81a:	f025 0503 	bic.w	r5, r5, #3
 802c81e:	3508      	adds	r5, #8
 802c820:	2d0c      	cmp	r5, #12
 802c822:	bf38      	it	cc
 802c824:	250c      	movcc	r5, #12
 802c826:	2d00      	cmp	r5, #0
 802c828:	4607      	mov	r7, r0
 802c82a:	db01      	blt.n	802c830 <_malloc_r+0x1c>
 802c82c:	42a9      	cmp	r1, r5
 802c82e:	d905      	bls.n	802c83c <_malloc_r+0x28>
 802c830:	230c      	movs	r3, #12
 802c832:	603b      	str	r3, [r7, #0]
 802c834:	2600      	movs	r6, #0
 802c836:	4630      	mov	r0, r6
 802c838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c83c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c910 <_malloc_r+0xfc>
 802c840:	f000 f868 	bl	802c914 <__malloc_lock>
 802c844:	f8d8 3000 	ldr.w	r3, [r8]
 802c848:	461c      	mov	r4, r3
 802c84a:	bb5c      	cbnz	r4, 802c8a4 <_malloc_r+0x90>
 802c84c:	4629      	mov	r1, r5
 802c84e:	4638      	mov	r0, r7
 802c850:	f7ff ffc0 	bl	802c7d4 <sbrk_aligned>
 802c854:	1c43      	adds	r3, r0, #1
 802c856:	4604      	mov	r4, r0
 802c858:	d155      	bne.n	802c906 <_malloc_r+0xf2>
 802c85a:	f8d8 4000 	ldr.w	r4, [r8]
 802c85e:	4626      	mov	r6, r4
 802c860:	2e00      	cmp	r6, #0
 802c862:	d145      	bne.n	802c8f0 <_malloc_r+0xdc>
 802c864:	2c00      	cmp	r4, #0
 802c866:	d048      	beq.n	802c8fa <_malloc_r+0xe6>
 802c868:	6823      	ldr	r3, [r4, #0]
 802c86a:	4631      	mov	r1, r6
 802c86c:	4638      	mov	r0, r7
 802c86e:	eb04 0903 	add.w	r9, r4, r3
 802c872:	f001 fab9 	bl	802dde8 <_sbrk_r>
 802c876:	4581      	cmp	r9, r0
 802c878:	d13f      	bne.n	802c8fa <_malloc_r+0xe6>
 802c87a:	6821      	ldr	r1, [r4, #0]
 802c87c:	1a6d      	subs	r5, r5, r1
 802c87e:	4629      	mov	r1, r5
 802c880:	4638      	mov	r0, r7
 802c882:	f7ff ffa7 	bl	802c7d4 <sbrk_aligned>
 802c886:	3001      	adds	r0, #1
 802c888:	d037      	beq.n	802c8fa <_malloc_r+0xe6>
 802c88a:	6823      	ldr	r3, [r4, #0]
 802c88c:	442b      	add	r3, r5
 802c88e:	6023      	str	r3, [r4, #0]
 802c890:	f8d8 3000 	ldr.w	r3, [r8]
 802c894:	2b00      	cmp	r3, #0
 802c896:	d038      	beq.n	802c90a <_malloc_r+0xf6>
 802c898:	685a      	ldr	r2, [r3, #4]
 802c89a:	42a2      	cmp	r2, r4
 802c89c:	d12b      	bne.n	802c8f6 <_malloc_r+0xe2>
 802c89e:	2200      	movs	r2, #0
 802c8a0:	605a      	str	r2, [r3, #4]
 802c8a2:	e00f      	b.n	802c8c4 <_malloc_r+0xb0>
 802c8a4:	6822      	ldr	r2, [r4, #0]
 802c8a6:	1b52      	subs	r2, r2, r5
 802c8a8:	d41f      	bmi.n	802c8ea <_malloc_r+0xd6>
 802c8aa:	2a0b      	cmp	r2, #11
 802c8ac:	d917      	bls.n	802c8de <_malloc_r+0xca>
 802c8ae:	1961      	adds	r1, r4, r5
 802c8b0:	42a3      	cmp	r3, r4
 802c8b2:	6025      	str	r5, [r4, #0]
 802c8b4:	bf18      	it	ne
 802c8b6:	6059      	strne	r1, [r3, #4]
 802c8b8:	6863      	ldr	r3, [r4, #4]
 802c8ba:	bf08      	it	eq
 802c8bc:	f8c8 1000 	streq.w	r1, [r8]
 802c8c0:	5162      	str	r2, [r4, r5]
 802c8c2:	604b      	str	r3, [r1, #4]
 802c8c4:	4638      	mov	r0, r7
 802c8c6:	f104 060b 	add.w	r6, r4, #11
 802c8ca:	f000 f829 	bl	802c920 <__malloc_unlock>
 802c8ce:	f026 0607 	bic.w	r6, r6, #7
 802c8d2:	1d23      	adds	r3, r4, #4
 802c8d4:	1af2      	subs	r2, r6, r3
 802c8d6:	d0ae      	beq.n	802c836 <_malloc_r+0x22>
 802c8d8:	1b9b      	subs	r3, r3, r6
 802c8da:	50a3      	str	r3, [r4, r2]
 802c8dc:	e7ab      	b.n	802c836 <_malloc_r+0x22>
 802c8de:	42a3      	cmp	r3, r4
 802c8e0:	6862      	ldr	r2, [r4, #4]
 802c8e2:	d1dd      	bne.n	802c8a0 <_malloc_r+0x8c>
 802c8e4:	f8c8 2000 	str.w	r2, [r8]
 802c8e8:	e7ec      	b.n	802c8c4 <_malloc_r+0xb0>
 802c8ea:	4623      	mov	r3, r4
 802c8ec:	6864      	ldr	r4, [r4, #4]
 802c8ee:	e7ac      	b.n	802c84a <_malloc_r+0x36>
 802c8f0:	4634      	mov	r4, r6
 802c8f2:	6876      	ldr	r6, [r6, #4]
 802c8f4:	e7b4      	b.n	802c860 <_malloc_r+0x4c>
 802c8f6:	4613      	mov	r3, r2
 802c8f8:	e7cc      	b.n	802c894 <_malloc_r+0x80>
 802c8fa:	230c      	movs	r3, #12
 802c8fc:	603b      	str	r3, [r7, #0]
 802c8fe:	4638      	mov	r0, r7
 802c900:	f000 f80e 	bl	802c920 <__malloc_unlock>
 802c904:	e797      	b.n	802c836 <_malloc_r+0x22>
 802c906:	6025      	str	r5, [r4, #0]
 802c908:	e7dc      	b.n	802c8c4 <_malloc_r+0xb0>
 802c90a:	605b      	str	r3, [r3, #4]
 802c90c:	deff      	udf	#255	; 0xff
 802c90e:	bf00      	nop
 802c910:	2000d9c8 	.word	0x2000d9c8

0802c914 <__malloc_lock>:
 802c914:	4801      	ldr	r0, [pc, #4]	; (802c91c <__malloc_lock+0x8>)
 802c916:	f001 bab4 	b.w	802de82 <__retarget_lock_acquire_recursive>
 802c91a:	bf00      	nop
 802c91c:	2000db10 	.word	0x2000db10

0802c920 <__malloc_unlock>:
 802c920:	4801      	ldr	r0, [pc, #4]	; (802c928 <__malloc_unlock+0x8>)
 802c922:	f001 baaf 	b.w	802de84 <__retarget_lock_release_recursive>
 802c926:	bf00      	nop
 802c928:	2000db10 	.word	0x2000db10

0802c92c <__cvt>:
 802c92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c930:	ec55 4b10 	vmov	r4, r5, d0
 802c934:	2d00      	cmp	r5, #0
 802c936:	460e      	mov	r6, r1
 802c938:	4619      	mov	r1, r3
 802c93a:	462b      	mov	r3, r5
 802c93c:	bfbb      	ittet	lt
 802c93e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802c942:	461d      	movlt	r5, r3
 802c944:	2300      	movge	r3, #0
 802c946:	232d      	movlt	r3, #45	; 0x2d
 802c948:	700b      	strb	r3, [r1, #0]
 802c94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c94c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802c950:	4691      	mov	r9, r2
 802c952:	f023 0820 	bic.w	r8, r3, #32
 802c956:	bfbc      	itt	lt
 802c958:	4622      	movlt	r2, r4
 802c95a:	4614      	movlt	r4, r2
 802c95c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c960:	d005      	beq.n	802c96e <__cvt+0x42>
 802c962:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802c966:	d100      	bne.n	802c96a <__cvt+0x3e>
 802c968:	3601      	adds	r6, #1
 802c96a:	2102      	movs	r1, #2
 802c96c:	e000      	b.n	802c970 <__cvt+0x44>
 802c96e:	2103      	movs	r1, #3
 802c970:	ab03      	add	r3, sp, #12
 802c972:	9301      	str	r3, [sp, #4]
 802c974:	ab02      	add	r3, sp, #8
 802c976:	9300      	str	r3, [sp, #0]
 802c978:	ec45 4b10 	vmov	d0, r4, r5
 802c97c:	4653      	mov	r3, sl
 802c97e:	4632      	mov	r2, r6
 802c980:	f001 fb2e 	bl	802dfe0 <_dtoa_r>
 802c984:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802c988:	4607      	mov	r7, r0
 802c98a:	d102      	bne.n	802c992 <__cvt+0x66>
 802c98c:	f019 0f01 	tst.w	r9, #1
 802c990:	d022      	beq.n	802c9d8 <__cvt+0xac>
 802c992:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c996:	eb07 0906 	add.w	r9, r7, r6
 802c99a:	d110      	bne.n	802c9be <__cvt+0x92>
 802c99c:	783b      	ldrb	r3, [r7, #0]
 802c99e:	2b30      	cmp	r3, #48	; 0x30
 802c9a0:	d10a      	bne.n	802c9b8 <__cvt+0x8c>
 802c9a2:	2200      	movs	r2, #0
 802c9a4:	2300      	movs	r3, #0
 802c9a6:	4620      	mov	r0, r4
 802c9a8:	4629      	mov	r1, r5
 802c9aa:	f7e4 f8a5 	bl	8010af8 <__aeabi_dcmpeq>
 802c9ae:	b918      	cbnz	r0, 802c9b8 <__cvt+0x8c>
 802c9b0:	f1c6 0601 	rsb	r6, r6, #1
 802c9b4:	f8ca 6000 	str.w	r6, [sl]
 802c9b8:	f8da 3000 	ldr.w	r3, [sl]
 802c9bc:	4499      	add	r9, r3
 802c9be:	2200      	movs	r2, #0
 802c9c0:	2300      	movs	r3, #0
 802c9c2:	4620      	mov	r0, r4
 802c9c4:	4629      	mov	r1, r5
 802c9c6:	f7e4 f897 	bl	8010af8 <__aeabi_dcmpeq>
 802c9ca:	b108      	cbz	r0, 802c9d0 <__cvt+0xa4>
 802c9cc:	f8cd 900c 	str.w	r9, [sp, #12]
 802c9d0:	2230      	movs	r2, #48	; 0x30
 802c9d2:	9b03      	ldr	r3, [sp, #12]
 802c9d4:	454b      	cmp	r3, r9
 802c9d6:	d307      	bcc.n	802c9e8 <__cvt+0xbc>
 802c9d8:	9b03      	ldr	r3, [sp, #12]
 802c9da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c9dc:	1bdb      	subs	r3, r3, r7
 802c9de:	4638      	mov	r0, r7
 802c9e0:	6013      	str	r3, [r2, #0]
 802c9e2:	b004      	add	sp, #16
 802c9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c9e8:	1c59      	adds	r1, r3, #1
 802c9ea:	9103      	str	r1, [sp, #12]
 802c9ec:	701a      	strb	r2, [r3, #0]
 802c9ee:	e7f0      	b.n	802c9d2 <__cvt+0xa6>

0802c9f0 <__exponent>:
 802c9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c9f2:	4603      	mov	r3, r0
 802c9f4:	2900      	cmp	r1, #0
 802c9f6:	bfb8      	it	lt
 802c9f8:	4249      	neglt	r1, r1
 802c9fa:	f803 2b02 	strb.w	r2, [r3], #2
 802c9fe:	bfb4      	ite	lt
 802ca00:	222d      	movlt	r2, #45	; 0x2d
 802ca02:	222b      	movge	r2, #43	; 0x2b
 802ca04:	2909      	cmp	r1, #9
 802ca06:	7042      	strb	r2, [r0, #1]
 802ca08:	dd2a      	ble.n	802ca60 <__exponent+0x70>
 802ca0a:	f10d 0207 	add.w	r2, sp, #7
 802ca0e:	4617      	mov	r7, r2
 802ca10:	260a      	movs	r6, #10
 802ca12:	4694      	mov	ip, r2
 802ca14:	fb91 f5f6 	sdiv	r5, r1, r6
 802ca18:	fb06 1415 	mls	r4, r6, r5, r1
 802ca1c:	3430      	adds	r4, #48	; 0x30
 802ca1e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802ca22:	460c      	mov	r4, r1
 802ca24:	2c63      	cmp	r4, #99	; 0x63
 802ca26:	f102 32ff 	add.w	r2, r2, #4294967295
 802ca2a:	4629      	mov	r1, r5
 802ca2c:	dcf1      	bgt.n	802ca12 <__exponent+0x22>
 802ca2e:	3130      	adds	r1, #48	; 0x30
 802ca30:	f1ac 0402 	sub.w	r4, ip, #2
 802ca34:	f802 1c01 	strb.w	r1, [r2, #-1]
 802ca38:	1c41      	adds	r1, r0, #1
 802ca3a:	4622      	mov	r2, r4
 802ca3c:	42ba      	cmp	r2, r7
 802ca3e:	d30a      	bcc.n	802ca56 <__exponent+0x66>
 802ca40:	f10d 0209 	add.w	r2, sp, #9
 802ca44:	eba2 020c 	sub.w	r2, r2, ip
 802ca48:	42bc      	cmp	r4, r7
 802ca4a:	bf88      	it	hi
 802ca4c:	2200      	movhi	r2, #0
 802ca4e:	4413      	add	r3, r2
 802ca50:	1a18      	subs	r0, r3, r0
 802ca52:	b003      	add	sp, #12
 802ca54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ca56:	f812 5b01 	ldrb.w	r5, [r2], #1
 802ca5a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802ca5e:	e7ed      	b.n	802ca3c <__exponent+0x4c>
 802ca60:	2330      	movs	r3, #48	; 0x30
 802ca62:	3130      	adds	r1, #48	; 0x30
 802ca64:	7083      	strb	r3, [r0, #2]
 802ca66:	70c1      	strb	r1, [r0, #3]
 802ca68:	1d03      	adds	r3, r0, #4
 802ca6a:	e7f1      	b.n	802ca50 <__exponent+0x60>

0802ca6c <_printf_float>:
 802ca6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca70:	ed2d 8b02 	vpush	{d8}
 802ca74:	b08d      	sub	sp, #52	; 0x34
 802ca76:	460c      	mov	r4, r1
 802ca78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802ca7c:	4616      	mov	r6, r2
 802ca7e:	461f      	mov	r7, r3
 802ca80:	4605      	mov	r5, r0
 802ca82:	f001 f923 	bl	802dccc <_localeconv_r>
 802ca86:	f8d0 a000 	ldr.w	sl, [r0]
 802ca8a:	4650      	mov	r0, sl
 802ca8c:	f7e3 fc08 	bl	80102a0 <strlen>
 802ca90:	2300      	movs	r3, #0
 802ca92:	930a      	str	r3, [sp, #40]	; 0x28
 802ca94:	6823      	ldr	r3, [r4, #0]
 802ca96:	9305      	str	r3, [sp, #20]
 802ca98:	f8d8 3000 	ldr.w	r3, [r8]
 802ca9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 802caa0:	3307      	adds	r3, #7
 802caa2:	f023 0307 	bic.w	r3, r3, #7
 802caa6:	f103 0208 	add.w	r2, r3, #8
 802caaa:	f8c8 2000 	str.w	r2, [r8]
 802caae:	e9d3 8900 	ldrd	r8, r9, [r3]
 802cab2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802cab6:	9307      	str	r3, [sp, #28]
 802cab8:	f8cd 8018 	str.w	r8, [sp, #24]
 802cabc:	ee08 0a10 	vmov	s16, r0
 802cac0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802cac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802cac8:	4b9e      	ldr	r3, [pc, #632]	; (802cd44 <_printf_float+0x2d8>)
 802caca:	f04f 32ff 	mov.w	r2, #4294967295
 802cace:	f7e4 f845 	bl	8010b5c <__aeabi_dcmpun>
 802cad2:	bb88      	cbnz	r0, 802cb38 <_printf_float+0xcc>
 802cad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802cad8:	4b9a      	ldr	r3, [pc, #616]	; (802cd44 <_printf_float+0x2d8>)
 802cada:	f04f 32ff 	mov.w	r2, #4294967295
 802cade:	f7e4 f81f 	bl	8010b20 <__aeabi_dcmple>
 802cae2:	bb48      	cbnz	r0, 802cb38 <_printf_float+0xcc>
 802cae4:	2200      	movs	r2, #0
 802cae6:	2300      	movs	r3, #0
 802cae8:	4640      	mov	r0, r8
 802caea:	4649      	mov	r1, r9
 802caec:	f7e4 f80e 	bl	8010b0c <__aeabi_dcmplt>
 802caf0:	b110      	cbz	r0, 802caf8 <_printf_float+0x8c>
 802caf2:	232d      	movs	r3, #45	; 0x2d
 802caf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802caf8:	4a93      	ldr	r2, [pc, #588]	; (802cd48 <_printf_float+0x2dc>)
 802cafa:	4b94      	ldr	r3, [pc, #592]	; (802cd4c <_printf_float+0x2e0>)
 802cafc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802cb00:	bf94      	ite	ls
 802cb02:	4690      	movls	r8, r2
 802cb04:	4698      	movhi	r8, r3
 802cb06:	2303      	movs	r3, #3
 802cb08:	6123      	str	r3, [r4, #16]
 802cb0a:	9b05      	ldr	r3, [sp, #20]
 802cb0c:	f023 0304 	bic.w	r3, r3, #4
 802cb10:	6023      	str	r3, [r4, #0]
 802cb12:	f04f 0900 	mov.w	r9, #0
 802cb16:	9700      	str	r7, [sp, #0]
 802cb18:	4633      	mov	r3, r6
 802cb1a:	aa0b      	add	r2, sp, #44	; 0x2c
 802cb1c:	4621      	mov	r1, r4
 802cb1e:	4628      	mov	r0, r5
 802cb20:	f000 f9da 	bl	802ced8 <_printf_common>
 802cb24:	3001      	adds	r0, #1
 802cb26:	f040 8090 	bne.w	802cc4a <_printf_float+0x1de>
 802cb2a:	f04f 30ff 	mov.w	r0, #4294967295
 802cb2e:	b00d      	add	sp, #52	; 0x34
 802cb30:	ecbd 8b02 	vpop	{d8}
 802cb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb38:	4642      	mov	r2, r8
 802cb3a:	464b      	mov	r3, r9
 802cb3c:	4640      	mov	r0, r8
 802cb3e:	4649      	mov	r1, r9
 802cb40:	f7e4 f80c 	bl	8010b5c <__aeabi_dcmpun>
 802cb44:	b140      	cbz	r0, 802cb58 <_printf_float+0xec>
 802cb46:	464b      	mov	r3, r9
 802cb48:	2b00      	cmp	r3, #0
 802cb4a:	bfbc      	itt	lt
 802cb4c:	232d      	movlt	r3, #45	; 0x2d
 802cb4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802cb52:	4a7f      	ldr	r2, [pc, #508]	; (802cd50 <_printf_float+0x2e4>)
 802cb54:	4b7f      	ldr	r3, [pc, #508]	; (802cd54 <_printf_float+0x2e8>)
 802cb56:	e7d1      	b.n	802cafc <_printf_float+0x90>
 802cb58:	6863      	ldr	r3, [r4, #4]
 802cb5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802cb5e:	9206      	str	r2, [sp, #24]
 802cb60:	1c5a      	adds	r2, r3, #1
 802cb62:	d13f      	bne.n	802cbe4 <_printf_float+0x178>
 802cb64:	2306      	movs	r3, #6
 802cb66:	6063      	str	r3, [r4, #4]
 802cb68:	9b05      	ldr	r3, [sp, #20]
 802cb6a:	6861      	ldr	r1, [r4, #4]
 802cb6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802cb70:	2300      	movs	r3, #0
 802cb72:	9303      	str	r3, [sp, #12]
 802cb74:	ab0a      	add	r3, sp, #40	; 0x28
 802cb76:	e9cd b301 	strd	fp, r3, [sp, #4]
 802cb7a:	ab09      	add	r3, sp, #36	; 0x24
 802cb7c:	ec49 8b10 	vmov	d0, r8, r9
 802cb80:	9300      	str	r3, [sp, #0]
 802cb82:	6022      	str	r2, [r4, #0]
 802cb84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802cb88:	4628      	mov	r0, r5
 802cb8a:	f7ff fecf 	bl	802c92c <__cvt>
 802cb8e:	9b06      	ldr	r3, [sp, #24]
 802cb90:	9909      	ldr	r1, [sp, #36]	; 0x24
 802cb92:	2b47      	cmp	r3, #71	; 0x47
 802cb94:	4680      	mov	r8, r0
 802cb96:	d108      	bne.n	802cbaa <_printf_float+0x13e>
 802cb98:	1cc8      	adds	r0, r1, #3
 802cb9a:	db02      	blt.n	802cba2 <_printf_float+0x136>
 802cb9c:	6863      	ldr	r3, [r4, #4]
 802cb9e:	4299      	cmp	r1, r3
 802cba0:	dd41      	ble.n	802cc26 <_printf_float+0x1ba>
 802cba2:	f1ab 0302 	sub.w	r3, fp, #2
 802cba6:	fa5f fb83 	uxtb.w	fp, r3
 802cbaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802cbae:	d820      	bhi.n	802cbf2 <_printf_float+0x186>
 802cbb0:	3901      	subs	r1, #1
 802cbb2:	465a      	mov	r2, fp
 802cbb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802cbb8:	9109      	str	r1, [sp, #36]	; 0x24
 802cbba:	f7ff ff19 	bl	802c9f0 <__exponent>
 802cbbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cbc0:	1813      	adds	r3, r2, r0
 802cbc2:	2a01      	cmp	r2, #1
 802cbc4:	4681      	mov	r9, r0
 802cbc6:	6123      	str	r3, [r4, #16]
 802cbc8:	dc02      	bgt.n	802cbd0 <_printf_float+0x164>
 802cbca:	6822      	ldr	r2, [r4, #0]
 802cbcc:	07d2      	lsls	r2, r2, #31
 802cbce:	d501      	bpl.n	802cbd4 <_printf_float+0x168>
 802cbd0:	3301      	adds	r3, #1
 802cbd2:	6123      	str	r3, [r4, #16]
 802cbd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802cbd8:	2b00      	cmp	r3, #0
 802cbda:	d09c      	beq.n	802cb16 <_printf_float+0xaa>
 802cbdc:	232d      	movs	r3, #45	; 0x2d
 802cbde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cbe2:	e798      	b.n	802cb16 <_printf_float+0xaa>
 802cbe4:	9a06      	ldr	r2, [sp, #24]
 802cbe6:	2a47      	cmp	r2, #71	; 0x47
 802cbe8:	d1be      	bne.n	802cb68 <_printf_float+0xfc>
 802cbea:	2b00      	cmp	r3, #0
 802cbec:	d1bc      	bne.n	802cb68 <_printf_float+0xfc>
 802cbee:	2301      	movs	r3, #1
 802cbf0:	e7b9      	b.n	802cb66 <_printf_float+0xfa>
 802cbf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802cbf6:	d118      	bne.n	802cc2a <_printf_float+0x1be>
 802cbf8:	2900      	cmp	r1, #0
 802cbfa:	6863      	ldr	r3, [r4, #4]
 802cbfc:	dd0b      	ble.n	802cc16 <_printf_float+0x1aa>
 802cbfe:	6121      	str	r1, [r4, #16]
 802cc00:	b913      	cbnz	r3, 802cc08 <_printf_float+0x19c>
 802cc02:	6822      	ldr	r2, [r4, #0]
 802cc04:	07d0      	lsls	r0, r2, #31
 802cc06:	d502      	bpl.n	802cc0e <_printf_float+0x1a2>
 802cc08:	3301      	adds	r3, #1
 802cc0a:	440b      	add	r3, r1
 802cc0c:	6123      	str	r3, [r4, #16]
 802cc0e:	65a1      	str	r1, [r4, #88]	; 0x58
 802cc10:	f04f 0900 	mov.w	r9, #0
 802cc14:	e7de      	b.n	802cbd4 <_printf_float+0x168>
 802cc16:	b913      	cbnz	r3, 802cc1e <_printf_float+0x1b2>
 802cc18:	6822      	ldr	r2, [r4, #0]
 802cc1a:	07d2      	lsls	r2, r2, #31
 802cc1c:	d501      	bpl.n	802cc22 <_printf_float+0x1b6>
 802cc1e:	3302      	adds	r3, #2
 802cc20:	e7f4      	b.n	802cc0c <_printf_float+0x1a0>
 802cc22:	2301      	movs	r3, #1
 802cc24:	e7f2      	b.n	802cc0c <_printf_float+0x1a0>
 802cc26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802cc2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cc2c:	4299      	cmp	r1, r3
 802cc2e:	db05      	blt.n	802cc3c <_printf_float+0x1d0>
 802cc30:	6823      	ldr	r3, [r4, #0]
 802cc32:	6121      	str	r1, [r4, #16]
 802cc34:	07d8      	lsls	r0, r3, #31
 802cc36:	d5ea      	bpl.n	802cc0e <_printf_float+0x1a2>
 802cc38:	1c4b      	adds	r3, r1, #1
 802cc3a:	e7e7      	b.n	802cc0c <_printf_float+0x1a0>
 802cc3c:	2900      	cmp	r1, #0
 802cc3e:	bfd4      	ite	le
 802cc40:	f1c1 0202 	rsble	r2, r1, #2
 802cc44:	2201      	movgt	r2, #1
 802cc46:	4413      	add	r3, r2
 802cc48:	e7e0      	b.n	802cc0c <_printf_float+0x1a0>
 802cc4a:	6823      	ldr	r3, [r4, #0]
 802cc4c:	055a      	lsls	r2, r3, #21
 802cc4e:	d407      	bmi.n	802cc60 <_printf_float+0x1f4>
 802cc50:	6923      	ldr	r3, [r4, #16]
 802cc52:	4642      	mov	r2, r8
 802cc54:	4631      	mov	r1, r6
 802cc56:	4628      	mov	r0, r5
 802cc58:	47b8      	blx	r7
 802cc5a:	3001      	adds	r0, #1
 802cc5c:	d12c      	bne.n	802ccb8 <_printf_float+0x24c>
 802cc5e:	e764      	b.n	802cb2a <_printf_float+0xbe>
 802cc60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802cc64:	f240 80e0 	bls.w	802ce28 <_printf_float+0x3bc>
 802cc68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802cc6c:	2200      	movs	r2, #0
 802cc6e:	2300      	movs	r3, #0
 802cc70:	f7e3 ff42 	bl	8010af8 <__aeabi_dcmpeq>
 802cc74:	2800      	cmp	r0, #0
 802cc76:	d034      	beq.n	802cce2 <_printf_float+0x276>
 802cc78:	4a37      	ldr	r2, [pc, #220]	; (802cd58 <_printf_float+0x2ec>)
 802cc7a:	2301      	movs	r3, #1
 802cc7c:	4631      	mov	r1, r6
 802cc7e:	4628      	mov	r0, r5
 802cc80:	47b8      	blx	r7
 802cc82:	3001      	adds	r0, #1
 802cc84:	f43f af51 	beq.w	802cb2a <_printf_float+0xbe>
 802cc88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cc8c:	429a      	cmp	r2, r3
 802cc8e:	db02      	blt.n	802cc96 <_printf_float+0x22a>
 802cc90:	6823      	ldr	r3, [r4, #0]
 802cc92:	07d8      	lsls	r0, r3, #31
 802cc94:	d510      	bpl.n	802ccb8 <_printf_float+0x24c>
 802cc96:	ee18 3a10 	vmov	r3, s16
 802cc9a:	4652      	mov	r2, sl
 802cc9c:	4631      	mov	r1, r6
 802cc9e:	4628      	mov	r0, r5
 802cca0:	47b8      	blx	r7
 802cca2:	3001      	adds	r0, #1
 802cca4:	f43f af41 	beq.w	802cb2a <_printf_float+0xbe>
 802cca8:	f04f 0800 	mov.w	r8, #0
 802ccac:	f104 091a 	add.w	r9, r4, #26
 802ccb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ccb2:	3b01      	subs	r3, #1
 802ccb4:	4543      	cmp	r3, r8
 802ccb6:	dc09      	bgt.n	802cccc <_printf_float+0x260>
 802ccb8:	6823      	ldr	r3, [r4, #0]
 802ccba:	079b      	lsls	r3, r3, #30
 802ccbc:	f100 8107 	bmi.w	802cece <_printf_float+0x462>
 802ccc0:	68e0      	ldr	r0, [r4, #12]
 802ccc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ccc4:	4298      	cmp	r0, r3
 802ccc6:	bfb8      	it	lt
 802ccc8:	4618      	movlt	r0, r3
 802ccca:	e730      	b.n	802cb2e <_printf_float+0xc2>
 802cccc:	2301      	movs	r3, #1
 802ccce:	464a      	mov	r2, r9
 802ccd0:	4631      	mov	r1, r6
 802ccd2:	4628      	mov	r0, r5
 802ccd4:	47b8      	blx	r7
 802ccd6:	3001      	adds	r0, #1
 802ccd8:	f43f af27 	beq.w	802cb2a <_printf_float+0xbe>
 802ccdc:	f108 0801 	add.w	r8, r8, #1
 802cce0:	e7e6      	b.n	802ccb0 <_printf_float+0x244>
 802cce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cce4:	2b00      	cmp	r3, #0
 802cce6:	dc39      	bgt.n	802cd5c <_printf_float+0x2f0>
 802cce8:	4a1b      	ldr	r2, [pc, #108]	; (802cd58 <_printf_float+0x2ec>)
 802ccea:	2301      	movs	r3, #1
 802ccec:	4631      	mov	r1, r6
 802ccee:	4628      	mov	r0, r5
 802ccf0:	47b8      	blx	r7
 802ccf2:	3001      	adds	r0, #1
 802ccf4:	f43f af19 	beq.w	802cb2a <_printf_float+0xbe>
 802ccf8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802ccfc:	4313      	orrs	r3, r2
 802ccfe:	d102      	bne.n	802cd06 <_printf_float+0x29a>
 802cd00:	6823      	ldr	r3, [r4, #0]
 802cd02:	07d9      	lsls	r1, r3, #31
 802cd04:	d5d8      	bpl.n	802ccb8 <_printf_float+0x24c>
 802cd06:	ee18 3a10 	vmov	r3, s16
 802cd0a:	4652      	mov	r2, sl
 802cd0c:	4631      	mov	r1, r6
 802cd0e:	4628      	mov	r0, r5
 802cd10:	47b8      	blx	r7
 802cd12:	3001      	adds	r0, #1
 802cd14:	f43f af09 	beq.w	802cb2a <_printf_float+0xbe>
 802cd18:	f04f 0900 	mov.w	r9, #0
 802cd1c:	f104 0a1a 	add.w	sl, r4, #26
 802cd20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cd22:	425b      	negs	r3, r3
 802cd24:	454b      	cmp	r3, r9
 802cd26:	dc01      	bgt.n	802cd2c <_printf_float+0x2c0>
 802cd28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cd2a:	e792      	b.n	802cc52 <_printf_float+0x1e6>
 802cd2c:	2301      	movs	r3, #1
 802cd2e:	4652      	mov	r2, sl
 802cd30:	4631      	mov	r1, r6
 802cd32:	4628      	mov	r0, r5
 802cd34:	47b8      	blx	r7
 802cd36:	3001      	adds	r0, #1
 802cd38:	f43f aef7 	beq.w	802cb2a <_printf_float+0xbe>
 802cd3c:	f109 0901 	add.w	r9, r9, #1
 802cd40:	e7ee      	b.n	802cd20 <_printf_float+0x2b4>
 802cd42:	bf00      	nop
 802cd44:	7fefffff 	.word	0x7fefffff
 802cd48:	08034d74 	.word	0x08034d74
 802cd4c:	08034d78 	.word	0x08034d78
 802cd50:	08034d7c 	.word	0x08034d7c
 802cd54:	08034d80 	.word	0x08034d80
 802cd58:	08035168 	.word	0x08035168
 802cd5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cd5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802cd60:	429a      	cmp	r2, r3
 802cd62:	bfa8      	it	ge
 802cd64:	461a      	movge	r2, r3
 802cd66:	2a00      	cmp	r2, #0
 802cd68:	4691      	mov	r9, r2
 802cd6a:	dc37      	bgt.n	802cddc <_printf_float+0x370>
 802cd6c:	f04f 0b00 	mov.w	fp, #0
 802cd70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802cd74:	f104 021a 	add.w	r2, r4, #26
 802cd78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802cd7a:	9305      	str	r3, [sp, #20]
 802cd7c:	eba3 0309 	sub.w	r3, r3, r9
 802cd80:	455b      	cmp	r3, fp
 802cd82:	dc33      	bgt.n	802cdec <_printf_float+0x380>
 802cd84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cd88:	429a      	cmp	r2, r3
 802cd8a:	db3b      	blt.n	802ce04 <_printf_float+0x398>
 802cd8c:	6823      	ldr	r3, [r4, #0]
 802cd8e:	07da      	lsls	r2, r3, #31
 802cd90:	d438      	bmi.n	802ce04 <_printf_float+0x398>
 802cd92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802cd96:	eba2 0903 	sub.w	r9, r2, r3
 802cd9a:	9b05      	ldr	r3, [sp, #20]
 802cd9c:	1ad2      	subs	r2, r2, r3
 802cd9e:	4591      	cmp	r9, r2
 802cda0:	bfa8      	it	ge
 802cda2:	4691      	movge	r9, r2
 802cda4:	f1b9 0f00 	cmp.w	r9, #0
 802cda8:	dc35      	bgt.n	802ce16 <_printf_float+0x3aa>
 802cdaa:	f04f 0800 	mov.w	r8, #0
 802cdae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802cdb2:	f104 0a1a 	add.w	sl, r4, #26
 802cdb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cdba:	1a9b      	subs	r3, r3, r2
 802cdbc:	eba3 0309 	sub.w	r3, r3, r9
 802cdc0:	4543      	cmp	r3, r8
 802cdc2:	f77f af79 	ble.w	802ccb8 <_printf_float+0x24c>
 802cdc6:	2301      	movs	r3, #1
 802cdc8:	4652      	mov	r2, sl
 802cdca:	4631      	mov	r1, r6
 802cdcc:	4628      	mov	r0, r5
 802cdce:	47b8      	blx	r7
 802cdd0:	3001      	adds	r0, #1
 802cdd2:	f43f aeaa 	beq.w	802cb2a <_printf_float+0xbe>
 802cdd6:	f108 0801 	add.w	r8, r8, #1
 802cdda:	e7ec      	b.n	802cdb6 <_printf_float+0x34a>
 802cddc:	4613      	mov	r3, r2
 802cdde:	4631      	mov	r1, r6
 802cde0:	4642      	mov	r2, r8
 802cde2:	4628      	mov	r0, r5
 802cde4:	47b8      	blx	r7
 802cde6:	3001      	adds	r0, #1
 802cde8:	d1c0      	bne.n	802cd6c <_printf_float+0x300>
 802cdea:	e69e      	b.n	802cb2a <_printf_float+0xbe>
 802cdec:	2301      	movs	r3, #1
 802cdee:	4631      	mov	r1, r6
 802cdf0:	4628      	mov	r0, r5
 802cdf2:	9205      	str	r2, [sp, #20]
 802cdf4:	47b8      	blx	r7
 802cdf6:	3001      	adds	r0, #1
 802cdf8:	f43f ae97 	beq.w	802cb2a <_printf_float+0xbe>
 802cdfc:	9a05      	ldr	r2, [sp, #20]
 802cdfe:	f10b 0b01 	add.w	fp, fp, #1
 802ce02:	e7b9      	b.n	802cd78 <_printf_float+0x30c>
 802ce04:	ee18 3a10 	vmov	r3, s16
 802ce08:	4652      	mov	r2, sl
 802ce0a:	4631      	mov	r1, r6
 802ce0c:	4628      	mov	r0, r5
 802ce0e:	47b8      	blx	r7
 802ce10:	3001      	adds	r0, #1
 802ce12:	d1be      	bne.n	802cd92 <_printf_float+0x326>
 802ce14:	e689      	b.n	802cb2a <_printf_float+0xbe>
 802ce16:	9a05      	ldr	r2, [sp, #20]
 802ce18:	464b      	mov	r3, r9
 802ce1a:	4442      	add	r2, r8
 802ce1c:	4631      	mov	r1, r6
 802ce1e:	4628      	mov	r0, r5
 802ce20:	47b8      	blx	r7
 802ce22:	3001      	adds	r0, #1
 802ce24:	d1c1      	bne.n	802cdaa <_printf_float+0x33e>
 802ce26:	e680      	b.n	802cb2a <_printf_float+0xbe>
 802ce28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ce2a:	2a01      	cmp	r2, #1
 802ce2c:	dc01      	bgt.n	802ce32 <_printf_float+0x3c6>
 802ce2e:	07db      	lsls	r3, r3, #31
 802ce30:	d53a      	bpl.n	802cea8 <_printf_float+0x43c>
 802ce32:	2301      	movs	r3, #1
 802ce34:	4642      	mov	r2, r8
 802ce36:	4631      	mov	r1, r6
 802ce38:	4628      	mov	r0, r5
 802ce3a:	47b8      	blx	r7
 802ce3c:	3001      	adds	r0, #1
 802ce3e:	f43f ae74 	beq.w	802cb2a <_printf_float+0xbe>
 802ce42:	ee18 3a10 	vmov	r3, s16
 802ce46:	4652      	mov	r2, sl
 802ce48:	4631      	mov	r1, r6
 802ce4a:	4628      	mov	r0, r5
 802ce4c:	47b8      	blx	r7
 802ce4e:	3001      	adds	r0, #1
 802ce50:	f43f ae6b 	beq.w	802cb2a <_printf_float+0xbe>
 802ce54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802ce58:	2200      	movs	r2, #0
 802ce5a:	2300      	movs	r3, #0
 802ce5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802ce60:	f7e3 fe4a 	bl	8010af8 <__aeabi_dcmpeq>
 802ce64:	b9d8      	cbnz	r0, 802ce9e <_printf_float+0x432>
 802ce66:	f10a 33ff 	add.w	r3, sl, #4294967295
 802ce6a:	f108 0201 	add.w	r2, r8, #1
 802ce6e:	4631      	mov	r1, r6
 802ce70:	4628      	mov	r0, r5
 802ce72:	47b8      	blx	r7
 802ce74:	3001      	adds	r0, #1
 802ce76:	d10e      	bne.n	802ce96 <_printf_float+0x42a>
 802ce78:	e657      	b.n	802cb2a <_printf_float+0xbe>
 802ce7a:	2301      	movs	r3, #1
 802ce7c:	4652      	mov	r2, sl
 802ce7e:	4631      	mov	r1, r6
 802ce80:	4628      	mov	r0, r5
 802ce82:	47b8      	blx	r7
 802ce84:	3001      	adds	r0, #1
 802ce86:	f43f ae50 	beq.w	802cb2a <_printf_float+0xbe>
 802ce8a:	f108 0801 	add.w	r8, r8, #1
 802ce8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ce90:	3b01      	subs	r3, #1
 802ce92:	4543      	cmp	r3, r8
 802ce94:	dcf1      	bgt.n	802ce7a <_printf_float+0x40e>
 802ce96:	464b      	mov	r3, r9
 802ce98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802ce9c:	e6da      	b.n	802cc54 <_printf_float+0x1e8>
 802ce9e:	f04f 0800 	mov.w	r8, #0
 802cea2:	f104 0a1a 	add.w	sl, r4, #26
 802cea6:	e7f2      	b.n	802ce8e <_printf_float+0x422>
 802cea8:	2301      	movs	r3, #1
 802ceaa:	4642      	mov	r2, r8
 802ceac:	e7df      	b.n	802ce6e <_printf_float+0x402>
 802ceae:	2301      	movs	r3, #1
 802ceb0:	464a      	mov	r2, r9
 802ceb2:	4631      	mov	r1, r6
 802ceb4:	4628      	mov	r0, r5
 802ceb6:	47b8      	blx	r7
 802ceb8:	3001      	adds	r0, #1
 802ceba:	f43f ae36 	beq.w	802cb2a <_printf_float+0xbe>
 802cebe:	f108 0801 	add.w	r8, r8, #1
 802cec2:	68e3      	ldr	r3, [r4, #12]
 802cec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802cec6:	1a5b      	subs	r3, r3, r1
 802cec8:	4543      	cmp	r3, r8
 802ceca:	dcf0      	bgt.n	802ceae <_printf_float+0x442>
 802cecc:	e6f8      	b.n	802ccc0 <_printf_float+0x254>
 802cece:	f04f 0800 	mov.w	r8, #0
 802ced2:	f104 0919 	add.w	r9, r4, #25
 802ced6:	e7f4      	b.n	802cec2 <_printf_float+0x456>

0802ced8 <_printf_common>:
 802ced8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cedc:	4616      	mov	r6, r2
 802cede:	4699      	mov	r9, r3
 802cee0:	688a      	ldr	r2, [r1, #8]
 802cee2:	690b      	ldr	r3, [r1, #16]
 802cee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802cee8:	4293      	cmp	r3, r2
 802ceea:	bfb8      	it	lt
 802ceec:	4613      	movlt	r3, r2
 802ceee:	6033      	str	r3, [r6, #0]
 802cef0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802cef4:	4607      	mov	r7, r0
 802cef6:	460c      	mov	r4, r1
 802cef8:	b10a      	cbz	r2, 802cefe <_printf_common+0x26>
 802cefa:	3301      	adds	r3, #1
 802cefc:	6033      	str	r3, [r6, #0]
 802cefe:	6823      	ldr	r3, [r4, #0]
 802cf00:	0699      	lsls	r1, r3, #26
 802cf02:	bf42      	ittt	mi
 802cf04:	6833      	ldrmi	r3, [r6, #0]
 802cf06:	3302      	addmi	r3, #2
 802cf08:	6033      	strmi	r3, [r6, #0]
 802cf0a:	6825      	ldr	r5, [r4, #0]
 802cf0c:	f015 0506 	ands.w	r5, r5, #6
 802cf10:	d106      	bne.n	802cf20 <_printf_common+0x48>
 802cf12:	f104 0a19 	add.w	sl, r4, #25
 802cf16:	68e3      	ldr	r3, [r4, #12]
 802cf18:	6832      	ldr	r2, [r6, #0]
 802cf1a:	1a9b      	subs	r3, r3, r2
 802cf1c:	42ab      	cmp	r3, r5
 802cf1e:	dc26      	bgt.n	802cf6e <_printf_common+0x96>
 802cf20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cf24:	1e13      	subs	r3, r2, #0
 802cf26:	6822      	ldr	r2, [r4, #0]
 802cf28:	bf18      	it	ne
 802cf2a:	2301      	movne	r3, #1
 802cf2c:	0692      	lsls	r2, r2, #26
 802cf2e:	d42b      	bmi.n	802cf88 <_printf_common+0xb0>
 802cf30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cf34:	4649      	mov	r1, r9
 802cf36:	4638      	mov	r0, r7
 802cf38:	47c0      	blx	r8
 802cf3a:	3001      	adds	r0, #1
 802cf3c:	d01e      	beq.n	802cf7c <_printf_common+0xa4>
 802cf3e:	6823      	ldr	r3, [r4, #0]
 802cf40:	6922      	ldr	r2, [r4, #16]
 802cf42:	f003 0306 	and.w	r3, r3, #6
 802cf46:	2b04      	cmp	r3, #4
 802cf48:	bf02      	ittt	eq
 802cf4a:	68e5      	ldreq	r5, [r4, #12]
 802cf4c:	6833      	ldreq	r3, [r6, #0]
 802cf4e:	1aed      	subeq	r5, r5, r3
 802cf50:	68a3      	ldr	r3, [r4, #8]
 802cf52:	bf0c      	ite	eq
 802cf54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cf58:	2500      	movne	r5, #0
 802cf5a:	4293      	cmp	r3, r2
 802cf5c:	bfc4      	itt	gt
 802cf5e:	1a9b      	subgt	r3, r3, r2
 802cf60:	18ed      	addgt	r5, r5, r3
 802cf62:	2600      	movs	r6, #0
 802cf64:	341a      	adds	r4, #26
 802cf66:	42b5      	cmp	r5, r6
 802cf68:	d11a      	bne.n	802cfa0 <_printf_common+0xc8>
 802cf6a:	2000      	movs	r0, #0
 802cf6c:	e008      	b.n	802cf80 <_printf_common+0xa8>
 802cf6e:	2301      	movs	r3, #1
 802cf70:	4652      	mov	r2, sl
 802cf72:	4649      	mov	r1, r9
 802cf74:	4638      	mov	r0, r7
 802cf76:	47c0      	blx	r8
 802cf78:	3001      	adds	r0, #1
 802cf7a:	d103      	bne.n	802cf84 <_printf_common+0xac>
 802cf7c:	f04f 30ff 	mov.w	r0, #4294967295
 802cf80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cf84:	3501      	adds	r5, #1
 802cf86:	e7c6      	b.n	802cf16 <_printf_common+0x3e>
 802cf88:	18e1      	adds	r1, r4, r3
 802cf8a:	1c5a      	adds	r2, r3, #1
 802cf8c:	2030      	movs	r0, #48	; 0x30
 802cf8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cf92:	4422      	add	r2, r4
 802cf94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cf98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cf9c:	3302      	adds	r3, #2
 802cf9e:	e7c7      	b.n	802cf30 <_printf_common+0x58>
 802cfa0:	2301      	movs	r3, #1
 802cfa2:	4622      	mov	r2, r4
 802cfa4:	4649      	mov	r1, r9
 802cfa6:	4638      	mov	r0, r7
 802cfa8:	47c0      	blx	r8
 802cfaa:	3001      	adds	r0, #1
 802cfac:	d0e6      	beq.n	802cf7c <_printf_common+0xa4>
 802cfae:	3601      	adds	r6, #1
 802cfb0:	e7d9      	b.n	802cf66 <_printf_common+0x8e>
	...

0802cfb4 <_printf_i>:
 802cfb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cfb8:	7e0f      	ldrb	r7, [r1, #24]
 802cfba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802cfbc:	2f78      	cmp	r7, #120	; 0x78
 802cfbe:	4691      	mov	r9, r2
 802cfc0:	4680      	mov	r8, r0
 802cfc2:	460c      	mov	r4, r1
 802cfc4:	469a      	mov	sl, r3
 802cfc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802cfca:	d807      	bhi.n	802cfdc <_printf_i+0x28>
 802cfcc:	2f62      	cmp	r7, #98	; 0x62
 802cfce:	d80a      	bhi.n	802cfe6 <_printf_i+0x32>
 802cfd0:	2f00      	cmp	r7, #0
 802cfd2:	f000 80d4 	beq.w	802d17e <_printf_i+0x1ca>
 802cfd6:	2f58      	cmp	r7, #88	; 0x58
 802cfd8:	f000 80c0 	beq.w	802d15c <_printf_i+0x1a8>
 802cfdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cfe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802cfe4:	e03a      	b.n	802d05c <_printf_i+0xa8>
 802cfe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802cfea:	2b15      	cmp	r3, #21
 802cfec:	d8f6      	bhi.n	802cfdc <_printf_i+0x28>
 802cfee:	a101      	add	r1, pc, #4	; (adr r1, 802cff4 <_printf_i+0x40>)
 802cff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802cff4:	0802d04d 	.word	0x0802d04d
 802cff8:	0802d061 	.word	0x0802d061
 802cffc:	0802cfdd 	.word	0x0802cfdd
 802d000:	0802cfdd 	.word	0x0802cfdd
 802d004:	0802cfdd 	.word	0x0802cfdd
 802d008:	0802cfdd 	.word	0x0802cfdd
 802d00c:	0802d061 	.word	0x0802d061
 802d010:	0802cfdd 	.word	0x0802cfdd
 802d014:	0802cfdd 	.word	0x0802cfdd
 802d018:	0802cfdd 	.word	0x0802cfdd
 802d01c:	0802cfdd 	.word	0x0802cfdd
 802d020:	0802d165 	.word	0x0802d165
 802d024:	0802d08d 	.word	0x0802d08d
 802d028:	0802d11f 	.word	0x0802d11f
 802d02c:	0802cfdd 	.word	0x0802cfdd
 802d030:	0802cfdd 	.word	0x0802cfdd
 802d034:	0802d187 	.word	0x0802d187
 802d038:	0802cfdd 	.word	0x0802cfdd
 802d03c:	0802d08d 	.word	0x0802d08d
 802d040:	0802cfdd 	.word	0x0802cfdd
 802d044:	0802cfdd 	.word	0x0802cfdd
 802d048:	0802d127 	.word	0x0802d127
 802d04c:	682b      	ldr	r3, [r5, #0]
 802d04e:	1d1a      	adds	r2, r3, #4
 802d050:	681b      	ldr	r3, [r3, #0]
 802d052:	602a      	str	r2, [r5, #0]
 802d054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d05c:	2301      	movs	r3, #1
 802d05e:	e09f      	b.n	802d1a0 <_printf_i+0x1ec>
 802d060:	6820      	ldr	r0, [r4, #0]
 802d062:	682b      	ldr	r3, [r5, #0]
 802d064:	0607      	lsls	r7, r0, #24
 802d066:	f103 0104 	add.w	r1, r3, #4
 802d06a:	6029      	str	r1, [r5, #0]
 802d06c:	d501      	bpl.n	802d072 <_printf_i+0xbe>
 802d06e:	681e      	ldr	r6, [r3, #0]
 802d070:	e003      	b.n	802d07a <_printf_i+0xc6>
 802d072:	0646      	lsls	r6, r0, #25
 802d074:	d5fb      	bpl.n	802d06e <_printf_i+0xba>
 802d076:	f9b3 6000 	ldrsh.w	r6, [r3]
 802d07a:	2e00      	cmp	r6, #0
 802d07c:	da03      	bge.n	802d086 <_printf_i+0xd2>
 802d07e:	232d      	movs	r3, #45	; 0x2d
 802d080:	4276      	negs	r6, r6
 802d082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d086:	485a      	ldr	r0, [pc, #360]	; (802d1f0 <_printf_i+0x23c>)
 802d088:	230a      	movs	r3, #10
 802d08a:	e012      	b.n	802d0b2 <_printf_i+0xfe>
 802d08c:	682b      	ldr	r3, [r5, #0]
 802d08e:	6820      	ldr	r0, [r4, #0]
 802d090:	1d19      	adds	r1, r3, #4
 802d092:	6029      	str	r1, [r5, #0]
 802d094:	0605      	lsls	r5, r0, #24
 802d096:	d501      	bpl.n	802d09c <_printf_i+0xe8>
 802d098:	681e      	ldr	r6, [r3, #0]
 802d09a:	e002      	b.n	802d0a2 <_printf_i+0xee>
 802d09c:	0641      	lsls	r1, r0, #25
 802d09e:	d5fb      	bpl.n	802d098 <_printf_i+0xe4>
 802d0a0:	881e      	ldrh	r6, [r3, #0]
 802d0a2:	4853      	ldr	r0, [pc, #332]	; (802d1f0 <_printf_i+0x23c>)
 802d0a4:	2f6f      	cmp	r7, #111	; 0x6f
 802d0a6:	bf0c      	ite	eq
 802d0a8:	2308      	moveq	r3, #8
 802d0aa:	230a      	movne	r3, #10
 802d0ac:	2100      	movs	r1, #0
 802d0ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d0b2:	6865      	ldr	r5, [r4, #4]
 802d0b4:	60a5      	str	r5, [r4, #8]
 802d0b6:	2d00      	cmp	r5, #0
 802d0b8:	bfa2      	ittt	ge
 802d0ba:	6821      	ldrge	r1, [r4, #0]
 802d0bc:	f021 0104 	bicge.w	r1, r1, #4
 802d0c0:	6021      	strge	r1, [r4, #0]
 802d0c2:	b90e      	cbnz	r6, 802d0c8 <_printf_i+0x114>
 802d0c4:	2d00      	cmp	r5, #0
 802d0c6:	d04b      	beq.n	802d160 <_printf_i+0x1ac>
 802d0c8:	4615      	mov	r5, r2
 802d0ca:	fbb6 f1f3 	udiv	r1, r6, r3
 802d0ce:	fb03 6711 	mls	r7, r3, r1, r6
 802d0d2:	5dc7      	ldrb	r7, [r0, r7]
 802d0d4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802d0d8:	4637      	mov	r7, r6
 802d0da:	42bb      	cmp	r3, r7
 802d0dc:	460e      	mov	r6, r1
 802d0de:	d9f4      	bls.n	802d0ca <_printf_i+0x116>
 802d0e0:	2b08      	cmp	r3, #8
 802d0e2:	d10b      	bne.n	802d0fc <_printf_i+0x148>
 802d0e4:	6823      	ldr	r3, [r4, #0]
 802d0e6:	07de      	lsls	r6, r3, #31
 802d0e8:	d508      	bpl.n	802d0fc <_printf_i+0x148>
 802d0ea:	6923      	ldr	r3, [r4, #16]
 802d0ec:	6861      	ldr	r1, [r4, #4]
 802d0ee:	4299      	cmp	r1, r3
 802d0f0:	bfde      	ittt	le
 802d0f2:	2330      	movle	r3, #48	; 0x30
 802d0f4:	f805 3c01 	strble.w	r3, [r5, #-1]
 802d0f8:	f105 35ff 	addle.w	r5, r5, #4294967295
 802d0fc:	1b52      	subs	r2, r2, r5
 802d0fe:	6122      	str	r2, [r4, #16]
 802d100:	f8cd a000 	str.w	sl, [sp]
 802d104:	464b      	mov	r3, r9
 802d106:	aa03      	add	r2, sp, #12
 802d108:	4621      	mov	r1, r4
 802d10a:	4640      	mov	r0, r8
 802d10c:	f7ff fee4 	bl	802ced8 <_printf_common>
 802d110:	3001      	adds	r0, #1
 802d112:	d14a      	bne.n	802d1aa <_printf_i+0x1f6>
 802d114:	f04f 30ff 	mov.w	r0, #4294967295
 802d118:	b004      	add	sp, #16
 802d11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d11e:	6823      	ldr	r3, [r4, #0]
 802d120:	f043 0320 	orr.w	r3, r3, #32
 802d124:	6023      	str	r3, [r4, #0]
 802d126:	4833      	ldr	r0, [pc, #204]	; (802d1f4 <_printf_i+0x240>)
 802d128:	2778      	movs	r7, #120	; 0x78
 802d12a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802d12e:	6823      	ldr	r3, [r4, #0]
 802d130:	6829      	ldr	r1, [r5, #0]
 802d132:	061f      	lsls	r7, r3, #24
 802d134:	f851 6b04 	ldr.w	r6, [r1], #4
 802d138:	d402      	bmi.n	802d140 <_printf_i+0x18c>
 802d13a:	065f      	lsls	r7, r3, #25
 802d13c:	bf48      	it	mi
 802d13e:	b2b6      	uxthmi	r6, r6
 802d140:	07df      	lsls	r7, r3, #31
 802d142:	bf48      	it	mi
 802d144:	f043 0320 	orrmi.w	r3, r3, #32
 802d148:	6029      	str	r1, [r5, #0]
 802d14a:	bf48      	it	mi
 802d14c:	6023      	strmi	r3, [r4, #0]
 802d14e:	b91e      	cbnz	r6, 802d158 <_printf_i+0x1a4>
 802d150:	6823      	ldr	r3, [r4, #0]
 802d152:	f023 0320 	bic.w	r3, r3, #32
 802d156:	6023      	str	r3, [r4, #0]
 802d158:	2310      	movs	r3, #16
 802d15a:	e7a7      	b.n	802d0ac <_printf_i+0xf8>
 802d15c:	4824      	ldr	r0, [pc, #144]	; (802d1f0 <_printf_i+0x23c>)
 802d15e:	e7e4      	b.n	802d12a <_printf_i+0x176>
 802d160:	4615      	mov	r5, r2
 802d162:	e7bd      	b.n	802d0e0 <_printf_i+0x12c>
 802d164:	682b      	ldr	r3, [r5, #0]
 802d166:	6826      	ldr	r6, [r4, #0]
 802d168:	6961      	ldr	r1, [r4, #20]
 802d16a:	1d18      	adds	r0, r3, #4
 802d16c:	6028      	str	r0, [r5, #0]
 802d16e:	0635      	lsls	r5, r6, #24
 802d170:	681b      	ldr	r3, [r3, #0]
 802d172:	d501      	bpl.n	802d178 <_printf_i+0x1c4>
 802d174:	6019      	str	r1, [r3, #0]
 802d176:	e002      	b.n	802d17e <_printf_i+0x1ca>
 802d178:	0670      	lsls	r0, r6, #25
 802d17a:	d5fb      	bpl.n	802d174 <_printf_i+0x1c0>
 802d17c:	8019      	strh	r1, [r3, #0]
 802d17e:	2300      	movs	r3, #0
 802d180:	6123      	str	r3, [r4, #16]
 802d182:	4615      	mov	r5, r2
 802d184:	e7bc      	b.n	802d100 <_printf_i+0x14c>
 802d186:	682b      	ldr	r3, [r5, #0]
 802d188:	1d1a      	adds	r2, r3, #4
 802d18a:	602a      	str	r2, [r5, #0]
 802d18c:	681d      	ldr	r5, [r3, #0]
 802d18e:	6862      	ldr	r2, [r4, #4]
 802d190:	2100      	movs	r1, #0
 802d192:	4628      	mov	r0, r5
 802d194:	f7e3 f834 	bl	8010200 <memchr>
 802d198:	b108      	cbz	r0, 802d19e <_printf_i+0x1ea>
 802d19a:	1b40      	subs	r0, r0, r5
 802d19c:	6060      	str	r0, [r4, #4]
 802d19e:	6863      	ldr	r3, [r4, #4]
 802d1a0:	6123      	str	r3, [r4, #16]
 802d1a2:	2300      	movs	r3, #0
 802d1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d1a8:	e7aa      	b.n	802d100 <_printf_i+0x14c>
 802d1aa:	6923      	ldr	r3, [r4, #16]
 802d1ac:	462a      	mov	r2, r5
 802d1ae:	4649      	mov	r1, r9
 802d1b0:	4640      	mov	r0, r8
 802d1b2:	47d0      	blx	sl
 802d1b4:	3001      	adds	r0, #1
 802d1b6:	d0ad      	beq.n	802d114 <_printf_i+0x160>
 802d1b8:	6823      	ldr	r3, [r4, #0]
 802d1ba:	079b      	lsls	r3, r3, #30
 802d1bc:	d413      	bmi.n	802d1e6 <_printf_i+0x232>
 802d1be:	68e0      	ldr	r0, [r4, #12]
 802d1c0:	9b03      	ldr	r3, [sp, #12]
 802d1c2:	4298      	cmp	r0, r3
 802d1c4:	bfb8      	it	lt
 802d1c6:	4618      	movlt	r0, r3
 802d1c8:	e7a6      	b.n	802d118 <_printf_i+0x164>
 802d1ca:	2301      	movs	r3, #1
 802d1cc:	4632      	mov	r2, r6
 802d1ce:	4649      	mov	r1, r9
 802d1d0:	4640      	mov	r0, r8
 802d1d2:	47d0      	blx	sl
 802d1d4:	3001      	adds	r0, #1
 802d1d6:	d09d      	beq.n	802d114 <_printf_i+0x160>
 802d1d8:	3501      	adds	r5, #1
 802d1da:	68e3      	ldr	r3, [r4, #12]
 802d1dc:	9903      	ldr	r1, [sp, #12]
 802d1de:	1a5b      	subs	r3, r3, r1
 802d1e0:	42ab      	cmp	r3, r5
 802d1e2:	dcf2      	bgt.n	802d1ca <_printf_i+0x216>
 802d1e4:	e7eb      	b.n	802d1be <_printf_i+0x20a>
 802d1e6:	2500      	movs	r5, #0
 802d1e8:	f104 0619 	add.w	r6, r4, #25
 802d1ec:	e7f5      	b.n	802d1da <_printf_i+0x226>
 802d1ee:	bf00      	nop
 802d1f0:	08034d84 	.word	0x08034d84
 802d1f4:	08034d95 	.word	0x08034d95

0802d1f8 <_scanf_float>:
 802d1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d1fc:	b087      	sub	sp, #28
 802d1fe:	4617      	mov	r7, r2
 802d200:	9303      	str	r3, [sp, #12]
 802d202:	688b      	ldr	r3, [r1, #8]
 802d204:	1e5a      	subs	r2, r3, #1
 802d206:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802d20a:	bf83      	ittte	hi
 802d20c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802d210:	195b      	addhi	r3, r3, r5
 802d212:	9302      	strhi	r3, [sp, #8]
 802d214:	2300      	movls	r3, #0
 802d216:	bf86      	itte	hi
 802d218:	f240 135d 	movwhi	r3, #349	; 0x15d
 802d21c:	608b      	strhi	r3, [r1, #8]
 802d21e:	9302      	strls	r3, [sp, #8]
 802d220:	680b      	ldr	r3, [r1, #0]
 802d222:	468b      	mov	fp, r1
 802d224:	2500      	movs	r5, #0
 802d226:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802d22a:	f84b 3b1c 	str.w	r3, [fp], #28
 802d22e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802d232:	4680      	mov	r8, r0
 802d234:	460c      	mov	r4, r1
 802d236:	465e      	mov	r6, fp
 802d238:	46aa      	mov	sl, r5
 802d23a:	46a9      	mov	r9, r5
 802d23c:	9501      	str	r5, [sp, #4]
 802d23e:	68a2      	ldr	r2, [r4, #8]
 802d240:	b152      	cbz	r2, 802d258 <_scanf_float+0x60>
 802d242:	683b      	ldr	r3, [r7, #0]
 802d244:	781b      	ldrb	r3, [r3, #0]
 802d246:	2b4e      	cmp	r3, #78	; 0x4e
 802d248:	d864      	bhi.n	802d314 <_scanf_float+0x11c>
 802d24a:	2b40      	cmp	r3, #64	; 0x40
 802d24c:	d83c      	bhi.n	802d2c8 <_scanf_float+0xd0>
 802d24e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802d252:	b2c8      	uxtb	r0, r1
 802d254:	280e      	cmp	r0, #14
 802d256:	d93a      	bls.n	802d2ce <_scanf_float+0xd6>
 802d258:	f1b9 0f00 	cmp.w	r9, #0
 802d25c:	d003      	beq.n	802d266 <_scanf_float+0x6e>
 802d25e:	6823      	ldr	r3, [r4, #0]
 802d260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802d264:	6023      	str	r3, [r4, #0]
 802d266:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d26a:	f1ba 0f01 	cmp.w	sl, #1
 802d26e:	f200 8113 	bhi.w	802d498 <_scanf_float+0x2a0>
 802d272:	455e      	cmp	r6, fp
 802d274:	f200 8105 	bhi.w	802d482 <_scanf_float+0x28a>
 802d278:	2501      	movs	r5, #1
 802d27a:	4628      	mov	r0, r5
 802d27c:	b007      	add	sp, #28
 802d27e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d282:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802d286:	2a0d      	cmp	r2, #13
 802d288:	d8e6      	bhi.n	802d258 <_scanf_float+0x60>
 802d28a:	a101      	add	r1, pc, #4	; (adr r1, 802d290 <_scanf_float+0x98>)
 802d28c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802d290:	0802d3cf 	.word	0x0802d3cf
 802d294:	0802d259 	.word	0x0802d259
 802d298:	0802d259 	.word	0x0802d259
 802d29c:	0802d259 	.word	0x0802d259
 802d2a0:	0802d42f 	.word	0x0802d42f
 802d2a4:	0802d407 	.word	0x0802d407
 802d2a8:	0802d259 	.word	0x0802d259
 802d2ac:	0802d259 	.word	0x0802d259
 802d2b0:	0802d3dd 	.word	0x0802d3dd
 802d2b4:	0802d259 	.word	0x0802d259
 802d2b8:	0802d259 	.word	0x0802d259
 802d2bc:	0802d259 	.word	0x0802d259
 802d2c0:	0802d259 	.word	0x0802d259
 802d2c4:	0802d395 	.word	0x0802d395
 802d2c8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802d2cc:	e7db      	b.n	802d286 <_scanf_float+0x8e>
 802d2ce:	290e      	cmp	r1, #14
 802d2d0:	d8c2      	bhi.n	802d258 <_scanf_float+0x60>
 802d2d2:	a001      	add	r0, pc, #4	; (adr r0, 802d2d8 <_scanf_float+0xe0>)
 802d2d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802d2d8:	0802d387 	.word	0x0802d387
 802d2dc:	0802d259 	.word	0x0802d259
 802d2e0:	0802d387 	.word	0x0802d387
 802d2e4:	0802d41b 	.word	0x0802d41b
 802d2e8:	0802d259 	.word	0x0802d259
 802d2ec:	0802d335 	.word	0x0802d335
 802d2f0:	0802d371 	.word	0x0802d371
 802d2f4:	0802d371 	.word	0x0802d371
 802d2f8:	0802d371 	.word	0x0802d371
 802d2fc:	0802d371 	.word	0x0802d371
 802d300:	0802d371 	.word	0x0802d371
 802d304:	0802d371 	.word	0x0802d371
 802d308:	0802d371 	.word	0x0802d371
 802d30c:	0802d371 	.word	0x0802d371
 802d310:	0802d371 	.word	0x0802d371
 802d314:	2b6e      	cmp	r3, #110	; 0x6e
 802d316:	d809      	bhi.n	802d32c <_scanf_float+0x134>
 802d318:	2b60      	cmp	r3, #96	; 0x60
 802d31a:	d8b2      	bhi.n	802d282 <_scanf_float+0x8a>
 802d31c:	2b54      	cmp	r3, #84	; 0x54
 802d31e:	d077      	beq.n	802d410 <_scanf_float+0x218>
 802d320:	2b59      	cmp	r3, #89	; 0x59
 802d322:	d199      	bne.n	802d258 <_scanf_float+0x60>
 802d324:	2d07      	cmp	r5, #7
 802d326:	d197      	bne.n	802d258 <_scanf_float+0x60>
 802d328:	2508      	movs	r5, #8
 802d32a:	e029      	b.n	802d380 <_scanf_float+0x188>
 802d32c:	2b74      	cmp	r3, #116	; 0x74
 802d32e:	d06f      	beq.n	802d410 <_scanf_float+0x218>
 802d330:	2b79      	cmp	r3, #121	; 0x79
 802d332:	e7f6      	b.n	802d322 <_scanf_float+0x12a>
 802d334:	6821      	ldr	r1, [r4, #0]
 802d336:	05c8      	lsls	r0, r1, #23
 802d338:	d51a      	bpl.n	802d370 <_scanf_float+0x178>
 802d33a:	9b02      	ldr	r3, [sp, #8]
 802d33c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802d340:	6021      	str	r1, [r4, #0]
 802d342:	f109 0901 	add.w	r9, r9, #1
 802d346:	b11b      	cbz	r3, 802d350 <_scanf_float+0x158>
 802d348:	3b01      	subs	r3, #1
 802d34a:	3201      	adds	r2, #1
 802d34c:	9302      	str	r3, [sp, #8]
 802d34e:	60a2      	str	r2, [r4, #8]
 802d350:	68a3      	ldr	r3, [r4, #8]
 802d352:	3b01      	subs	r3, #1
 802d354:	60a3      	str	r3, [r4, #8]
 802d356:	6923      	ldr	r3, [r4, #16]
 802d358:	3301      	adds	r3, #1
 802d35a:	6123      	str	r3, [r4, #16]
 802d35c:	687b      	ldr	r3, [r7, #4]
 802d35e:	3b01      	subs	r3, #1
 802d360:	2b00      	cmp	r3, #0
 802d362:	607b      	str	r3, [r7, #4]
 802d364:	f340 8084 	ble.w	802d470 <_scanf_float+0x278>
 802d368:	683b      	ldr	r3, [r7, #0]
 802d36a:	3301      	adds	r3, #1
 802d36c:	603b      	str	r3, [r7, #0]
 802d36e:	e766      	b.n	802d23e <_scanf_float+0x46>
 802d370:	eb1a 0f05 	cmn.w	sl, r5
 802d374:	f47f af70 	bne.w	802d258 <_scanf_float+0x60>
 802d378:	6822      	ldr	r2, [r4, #0]
 802d37a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802d37e:	6022      	str	r2, [r4, #0]
 802d380:	f806 3b01 	strb.w	r3, [r6], #1
 802d384:	e7e4      	b.n	802d350 <_scanf_float+0x158>
 802d386:	6822      	ldr	r2, [r4, #0]
 802d388:	0610      	lsls	r0, r2, #24
 802d38a:	f57f af65 	bpl.w	802d258 <_scanf_float+0x60>
 802d38e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d392:	e7f4      	b.n	802d37e <_scanf_float+0x186>
 802d394:	f1ba 0f00 	cmp.w	sl, #0
 802d398:	d10e      	bne.n	802d3b8 <_scanf_float+0x1c0>
 802d39a:	f1b9 0f00 	cmp.w	r9, #0
 802d39e:	d10e      	bne.n	802d3be <_scanf_float+0x1c6>
 802d3a0:	6822      	ldr	r2, [r4, #0]
 802d3a2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d3a6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d3aa:	d108      	bne.n	802d3be <_scanf_float+0x1c6>
 802d3ac:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d3b0:	6022      	str	r2, [r4, #0]
 802d3b2:	f04f 0a01 	mov.w	sl, #1
 802d3b6:	e7e3      	b.n	802d380 <_scanf_float+0x188>
 802d3b8:	f1ba 0f02 	cmp.w	sl, #2
 802d3bc:	d055      	beq.n	802d46a <_scanf_float+0x272>
 802d3be:	2d01      	cmp	r5, #1
 802d3c0:	d002      	beq.n	802d3c8 <_scanf_float+0x1d0>
 802d3c2:	2d04      	cmp	r5, #4
 802d3c4:	f47f af48 	bne.w	802d258 <_scanf_float+0x60>
 802d3c8:	3501      	adds	r5, #1
 802d3ca:	b2ed      	uxtb	r5, r5
 802d3cc:	e7d8      	b.n	802d380 <_scanf_float+0x188>
 802d3ce:	f1ba 0f01 	cmp.w	sl, #1
 802d3d2:	f47f af41 	bne.w	802d258 <_scanf_float+0x60>
 802d3d6:	f04f 0a02 	mov.w	sl, #2
 802d3da:	e7d1      	b.n	802d380 <_scanf_float+0x188>
 802d3dc:	b97d      	cbnz	r5, 802d3fe <_scanf_float+0x206>
 802d3de:	f1b9 0f00 	cmp.w	r9, #0
 802d3e2:	f47f af3c 	bne.w	802d25e <_scanf_float+0x66>
 802d3e6:	6822      	ldr	r2, [r4, #0]
 802d3e8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d3ec:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d3f0:	f47f af39 	bne.w	802d266 <_scanf_float+0x6e>
 802d3f4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d3f8:	6022      	str	r2, [r4, #0]
 802d3fa:	2501      	movs	r5, #1
 802d3fc:	e7c0      	b.n	802d380 <_scanf_float+0x188>
 802d3fe:	2d03      	cmp	r5, #3
 802d400:	d0e2      	beq.n	802d3c8 <_scanf_float+0x1d0>
 802d402:	2d05      	cmp	r5, #5
 802d404:	e7de      	b.n	802d3c4 <_scanf_float+0x1cc>
 802d406:	2d02      	cmp	r5, #2
 802d408:	f47f af26 	bne.w	802d258 <_scanf_float+0x60>
 802d40c:	2503      	movs	r5, #3
 802d40e:	e7b7      	b.n	802d380 <_scanf_float+0x188>
 802d410:	2d06      	cmp	r5, #6
 802d412:	f47f af21 	bne.w	802d258 <_scanf_float+0x60>
 802d416:	2507      	movs	r5, #7
 802d418:	e7b2      	b.n	802d380 <_scanf_float+0x188>
 802d41a:	6822      	ldr	r2, [r4, #0]
 802d41c:	0591      	lsls	r1, r2, #22
 802d41e:	f57f af1b 	bpl.w	802d258 <_scanf_float+0x60>
 802d422:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802d426:	6022      	str	r2, [r4, #0]
 802d428:	f8cd 9004 	str.w	r9, [sp, #4]
 802d42c:	e7a8      	b.n	802d380 <_scanf_float+0x188>
 802d42e:	6822      	ldr	r2, [r4, #0]
 802d430:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802d434:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802d438:	d006      	beq.n	802d448 <_scanf_float+0x250>
 802d43a:	0550      	lsls	r0, r2, #21
 802d43c:	f57f af0c 	bpl.w	802d258 <_scanf_float+0x60>
 802d440:	f1b9 0f00 	cmp.w	r9, #0
 802d444:	f43f af0f 	beq.w	802d266 <_scanf_float+0x6e>
 802d448:	0591      	lsls	r1, r2, #22
 802d44a:	bf58      	it	pl
 802d44c:	9901      	ldrpl	r1, [sp, #4]
 802d44e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d452:	bf58      	it	pl
 802d454:	eba9 0101 	subpl.w	r1, r9, r1
 802d458:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802d45c:	bf58      	it	pl
 802d45e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802d462:	6022      	str	r2, [r4, #0]
 802d464:	f04f 0900 	mov.w	r9, #0
 802d468:	e78a      	b.n	802d380 <_scanf_float+0x188>
 802d46a:	f04f 0a03 	mov.w	sl, #3
 802d46e:	e787      	b.n	802d380 <_scanf_float+0x188>
 802d470:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d474:	4639      	mov	r1, r7
 802d476:	4640      	mov	r0, r8
 802d478:	4798      	blx	r3
 802d47a:	2800      	cmp	r0, #0
 802d47c:	f43f aedf 	beq.w	802d23e <_scanf_float+0x46>
 802d480:	e6ea      	b.n	802d258 <_scanf_float+0x60>
 802d482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d486:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d48a:	463a      	mov	r2, r7
 802d48c:	4640      	mov	r0, r8
 802d48e:	4798      	blx	r3
 802d490:	6923      	ldr	r3, [r4, #16]
 802d492:	3b01      	subs	r3, #1
 802d494:	6123      	str	r3, [r4, #16]
 802d496:	e6ec      	b.n	802d272 <_scanf_float+0x7a>
 802d498:	1e6b      	subs	r3, r5, #1
 802d49a:	2b06      	cmp	r3, #6
 802d49c:	d825      	bhi.n	802d4ea <_scanf_float+0x2f2>
 802d49e:	2d02      	cmp	r5, #2
 802d4a0:	d836      	bhi.n	802d510 <_scanf_float+0x318>
 802d4a2:	455e      	cmp	r6, fp
 802d4a4:	f67f aee8 	bls.w	802d278 <_scanf_float+0x80>
 802d4a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d4ac:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d4b0:	463a      	mov	r2, r7
 802d4b2:	4640      	mov	r0, r8
 802d4b4:	4798      	blx	r3
 802d4b6:	6923      	ldr	r3, [r4, #16]
 802d4b8:	3b01      	subs	r3, #1
 802d4ba:	6123      	str	r3, [r4, #16]
 802d4bc:	e7f1      	b.n	802d4a2 <_scanf_float+0x2aa>
 802d4be:	9802      	ldr	r0, [sp, #8]
 802d4c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d4c4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802d4c8:	9002      	str	r0, [sp, #8]
 802d4ca:	463a      	mov	r2, r7
 802d4cc:	4640      	mov	r0, r8
 802d4ce:	4798      	blx	r3
 802d4d0:	6923      	ldr	r3, [r4, #16]
 802d4d2:	3b01      	subs	r3, #1
 802d4d4:	6123      	str	r3, [r4, #16]
 802d4d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d4da:	fa5f fa8a 	uxtb.w	sl, sl
 802d4de:	f1ba 0f02 	cmp.w	sl, #2
 802d4e2:	d1ec      	bne.n	802d4be <_scanf_float+0x2c6>
 802d4e4:	3d03      	subs	r5, #3
 802d4e6:	b2ed      	uxtb	r5, r5
 802d4e8:	1b76      	subs	r6, r6, r5
 802d4ea:	6823      	ldr	r3, [r4, #0]
 802d4ec:	05da      	lsls	r2, r3, #23
 802d4ee:	d52f      	bpl.n	802d550 <_scanf_float+0x358>
 802d4f0:	055b      	lsls	r3, r3, #21
 802d4f2:	d510      	bpl.n	802d516 <_scanf_float+0x31e>
 802d4f4:	455e      	cmp	r6, fp
 802d4f6:	f67f aebf 	bls.w	802d278 <_scanf_float+0x80>
 802d4fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d4fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d502:	463a      	mov	r2, r7
 802d504:	4640      	mov	r0, r8
 802d506:	4798      	blx	r3
 802d508:	6923      	ldr	r3, [r4, #16]
 802d50a:	3b01      	subs	r3, #1
 802d50c:	6123      	str	r3, [r4, #16]
 802d50e:	e7f1      	b.n	802d4f4 <_scanf_float+0x2fc>
 802d510:	46aa      	mov	sl, r5
 802d512:	9602      	str	r6, [sp, #8]
 802d514:	e7df      	b.n	802d4d6 <_scanf_float+0x2de>
 802d516:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802d51a:	6923      	ldr	r3, [r4, #16]
 802d51c:	2965      	cmp	r1, #101	; 0x65
 802d51e:	f103 33ff 	add.w	r3, r3, #4294967295
 802d522:	f106 35ff 	add.w	r5, r6, #4294967295
 802d526:	6123      	str	r3, [r4, #16]
 802d528:	d00c      	beq.n	802d544 <_scanf_float+0x34c>
 802d52a:	2945      	cmp	r1, #69	; 0x45
 802d52c:	d00a      	beq.n	802d544 <_scanf_float+0x34c>
 802d52e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d532:	463a      	mov	r2, r7
 802d534:	4640      	mov	r0, r8
 802d536:	4798      	blx	r3
 802d538:	6923      	ldr	r3, [r4, #16]
 802d53a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802d53e:	3b01      	subs	r3, #1
 802d540:	1eb5      	subs	r5, r6, #2
 802d542:	6123      	str	r3, [r4, #16]
 802d544:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d548:	463a      	mov	r2, r7
 802d54a:	4640      	mov	r0, r8
 802d54c:	4798      	blx	r3
 802d54e:	462e      	mov	r6, r5
 802d550:	6825      	ldr	r5, [r4, #0]
 802d552:	f015 0510 	ands.w	r5, r5, #16
 802d556:	d158      	bne.n	802d60a <_scanf_float+0x412>
 802d558:	7035      	strb	r5, [r6, #0]
 802d55a:	6823      	ldr	r3, [r4, #0]
 802d55c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d564:	d11c      	bne.n	802d5a0 <_scanf_float+0x3a8>
 802d566:	9b01      	ldr	r3, [sp, #4]
 802d568:	454b      	cmp	r3, r9
 802d56a:	eba3 0209 	sub.w	r2, r3, r9
 802d56e:	d124      	bne.n	802d5ba <_scanf_float+0x3c2>
 802d570:	2200      	movs	r2, #0
 802d572:	4659      	mov	r1, fp
 802d574:	4640      	mov	r0, r8
 802d576:	f002 fe2b 	bl	80301d0 <_strtod_r>
 802d57a:	9b03      	ldr	r3, [sp, #12]
 802d57c:	6821      	ldr	r1, [r4, #0]
 802d57e:	681b      	ldr	r3, [r3, #0]
 802d580:	f011 0f02 	tst.w	r1, #2
 802d584:	ec57 6b10 	vmov	r6, r7, d0
 802d588:	f103 0204 	add.w	r2, r3, #4
 802d58c:	d020      	beq.n	802d5d0 <_scanf_float+0x3d8>
 802d58e:	9903      	ldr	r1, [sp, #12]
 802d590:	600a      	str	r2, [r1, #0]
 802d592:	681b      	ldr	r3, [r3, #0]
 802d594:	e9c3 6700 	strd	r6, r7, [r3]
 802d598:	68e3      	ldr	r3, [r4, #12]
 802d59a:	3301      	adds	r3, #1
 802d59c:	60e3      	str	r3, [r4, #12]
 802d59e:	e66c      	b.n	802d27a <_scanf_float+0x82>
 802d5a0:	9b04      	ldr	r3, [sp, #16]
 802d5a2:	2b00      	cmp	r3, #0
 802d5a4:	d0e4      	beq.n	802d570 <_scanf_float+0x378>
 802d5a6:	9905      	ldr	r1, [sp, #20]
 802d5a8:	230a      	movs	r3, #10
 802d5aa:	462a      	mov	r2, r5
 802d5ac:	3101      	adds	r1, #1
 802d5ae:	4640      	mov	r0, r8
 802d5b0:	f002 fe96 	bl	80302e0 <_strtol_r>
 802d5b4:	9b04      	ldr	r3, [sp, #16]
 802d5b6:	9e05      	ldr	r6, [sp, #20]
 802d5b8:	1ac2      	subs	r2, r0, r3
 802d5ba:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802d5be:	429e      	cmp	r6, r3
 802d5c0:	bf28      	it	cs
 802d5c2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802d5c6:	4912      	ldr	r1, [pc, #72]	; (802d610 <_scanf_float+0x418>)
 802d5c8:	4630      	mov	r0, r6
 802d5ca:	f000 f93f 	bl	802d84c <siprintf>
 802d5ce:	e7cf      	b.n	802d570 <_scanf_float+0x378>
 802d5d0:	f011 0f04 	tst.w	r1, #4
 802d5d4:	9903      	ldr	r1, [sp, #12]
 802d5d6:	600a      	str	r2, [r1, #0]
 802d5d8:	d1db      	bne.n	802d592 <_scanf_float+0x39a>
 802d5da:	f8d3 8000 	ldr.w	r8, [r3]
 802d5de:	ee10 2a10 	vmov	r2, s0
 802d5e2:	ee10 0a10 	vmov	r0, s0
 802d5e6:	463b      	mov	r3, r7
 802d5e8:	4639      	mov	r1, r7
 802d5ea:	f7e3 fab7 	bl	8010b5c <__aeabi_dcmpun>
 802d5ee:	b128      	cbz	r0, 802d5fc <_scanf_float+0x404>
 802d5f0:	4808      	ldr	r0, [pc, #32]	; (802d614 <_scanf_float+0x41c>)
 802d5f2:	f000 fc5f 	bl	802deb4 <nanf>
 802d5f6:	ed88 0a00 	vstr	s0, [r8]
 802d5fa:	e7cd      	b.n	802d598 <_scanf_float+0x3a0>
 802d5fc:	4630      	mov	r0, r6
 802d5fe:	4639      	mov	r1, r7
 802d600:	f7e3 fb0a 	bl	8010c18 <__aeabi_d2f>
 802d604:	f8c8 0000 	str.w	r0, [r8]
 802d608:	e7c6      	b.n	802d598 <_scanf_float+0x3a0>
 802d60a:	2500      	movs	r5, #0
 802d60c:	e635      	b.n	802d27a <_scanf_float+0x82>
 802d60e:	bf00      	nop
 802d610:	08034da6 	.word	0x08034da6
 802d614:	08034d73 	.word	0x08034d73

0802d618 <std>:
 802d618:	2300      	movs	r3, #0
 802d61a:	b510      	push	{r4, lr}
 802d61c:	4604      	mov	r4, r0
 802d61e:	e9c0 3300 	strd	r3, r3, [r0]
 802d622:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d626:	6083      	str	r3, [r0, #8]
 802d628:	8181      	strh	r1, [r0, #12]
 802d62a:	6643      	str	r3, [r0, #100]	; 0x64
 802d62c:	81c2      	strh	r2, [r0, #14]
 802d62e:	6183      	str	r3, [r0, #24]
 802d630:	4619      	mov	r1, r3
 802d632:	2208      	movs	r2, #8
 802d634:	305c      	adds	r0, #92	; 0x5c
 802d636:	f000 fa59 	bl	802daec <memset>
 802d63a:	4b0d      	ldr	r3, [pc, #52]	; (802d670 <std+0x58>)
 802d63c:	6263      	str	r3, [r4, #36]	; 0x24
 802d63e:	4b0d      	ldr	r3, [pc, #52]	; (802d674 <std+0x5c>)
 802d640:	62a3      	str	r3, [r4, #40]	; 0x28
 802d642:	4b0d      	ldr	r3, [pc, #52]	; (802d678 <std+0x60>)
 802d644:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d646:	4b0d      	ldr	r3, [pc, #52]	; (802d67c <std+0x64>)
 802d648:	6323      	str	r3, [r4, #48]	; 0x30
 802d64a:	4b0d      	ldr	r3, [pc, #52]	; (802d680 <std+0x68>)
 802d64c:	6224      	str	r4, [r4, #32]
 802d64e:	429c      	cmp	r4, r3
 802d650:	d006      	beq.n	802d660 <std+0x48>
 802d652:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802d656:	4294      	cmp	r4, r2
 802d658:	d002      	beq.n	802d660 <std+0x48>
 802d65a:	33d0      	adds	r3, #208	; 0xd0
 802d65c:	429c      	cmp	r4, r3
 802d65e:	d105      	bne.n	802d66c <std+0x54>
 802d660:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d668:	f000 bc0a 	b.w	802de80 <__retarget_lock_init_recursive>
 802d66c:	bd10      	pop	{r4, pc}
 802d66e:	bf00      	nop
 802d670:	0802d8e5 	.word	0x0802d8e5
 802d674:	0802d90b 	.word	0x0802d90b
 802d678:	0802d943 	.word	0x0802d943
 802d67c:	0802d967 	.word	0x0802d967
 802d680:	2000d9d0 	.word	0x2000d9d0

0802d684 <stdio_exit_handler>:
 802d684:	4a02      	ldr	r2, [pc, #8]	; (802d690 <stdio_exit_handler+0xc>)
 802d686:	4903      	ldr	r1, [pc, #12]	; (802d694 <stdio_exit_handler+0x10>)
 802d688:	4803      	ldr	r0, [pc, #12]	; (802d698 <stdio_exit_handler+0x14>)
 802d68a:	f000 b87b 	b.w	802d784 <_fwalk_sglue>
 802d68e:	bf00      	nop
 802d690:	20000130 	.word	0x20000130
 802d694:	08030f69 	.word	0x08030f69
 802d698:	2000013c 	.word	0x2000013c

0802d69c <cleanup_stdio>:
 802d69c:	6841      	ldr	r1, [r0, #4]
 802d69e:	4b0c      	ldr	r3, [pc, #48]	; (802d6d0 <cleanup_stdio+0x34>)
 802d6a0:	4299      	cmp	r1, r3
 802d6a2:	b510      	push	{r4, lr}
 802d6a4:	4604      	mov	r4, r0
 802d6a6:	d001      	beq.n	802d6ac <cleanup_stdio+0x10>
 802d6a8:	f003 fc5e 	bl	8030f68 <_fflush_r>
 802d6ac:	68a1      	ldr	r1, [r4, #8]
 802d6ae:	4b09      	ldr	r3, [pc, #36]	; (802d6d4 <cleanup_stdio+0x38>)
 802d6b0:	4299      	cmp	r1, r3
 802d6b2:	d002      	beq.n	802d6ba <cleanup_stdio+0x1e>
 802d6b4:	4620      	mov	r0, r4
 802d6b6:	f003 fc57 	bl	8030f68 <_fflush_r>
 802d6ba:	68e1      	ldr	r1, [r4, #12]
 802d6bc:	4b06      	ldr	r3, [pc, #24]	; (802d6d8 <cleanup_stdio+0x3c>)
 802d6be:	4299      	cmp	r1, r3
 802d6c0:	d004      	beq.n	802d6cc <cleanup_stdio+0x30>
 802d6c2:	4620      	mov	r0, r4
 802d6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d6c8:	f003 bc4e 	b.w	8030f68 <_fflush_r>
 802d6cc:	bd10      	pop	{r4, pc}
 802d6ce:	bf00      	nop
 802d6d0:	2000d9d0 	.word	0x2000d9d0
 802d6d4:	2000da38 	.word	0x2000da38
 802d6d8:	2000daa0 	.word	0x2000daa0

0802d6dc <global_stdio_init.part.0>:
 802d6dc:	b510      	push	{r4, lr}
 802d6de:	4b0b      	ldr	r3, [pc, #44]	; (802d70c <global_stdio_init.part.0+0x30>)
 802d6e0:	4c0b      	ldr	r4, [pc, #44]	; (802d710 <global_stdio_init.part.0+0x34>)
 802d6e2:	4a0c      	ldr	r2, [pc, #48]	; (802d714 <global_stdio_init.part.0+0x38>)
 802d6e4:	601a      	str	r2, [r3, #0]
 802d6e6:	4620      	mov	r0, r4
 802d6e8:	2200      	movs	r2, #0
 802d6ea:	2104      	movs	r1, #4
 802d6ec:	f7ff ff94 	bl	802d618 <std>
 802d6f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802d6f4:	2201      	movs	r2, #1
 802d6f6:	2109      	movs	r1, #9
 802d6f8:	f7ff ff8e 	bl	802d618 <std>
 802d6fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802d700:	2202      	movs	r2, #2
 802d702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d706:	2112      	movs	r1, #18
 802d708:	f7ff bf86 	b.w	802d618 <std>
 802d70c:	2000db08 	.word	0x2000db08
 802d710:	2000d9d0 	.word	0x2000d9d0
 802d714:	0802d685 	.word	0x0802d685

0802d718 <__sfp_lock_acquire>:
 802d718:	4801      	ldr	r0, [pc, #4]	; (802d720 <__sfp_lock_acquire+0x8>)
 802d71a:	f000 bbb2 	b.w	802de82 <__retarget_lock_acquire_recursive>
 802d71e:	bf00      	nop
 802d720:	2000db11 	.word	0x2000db11

0802d724 <__sfp_lock_release>:
 802d724:	4801      	ldr	r0, [pc, #4]	; (802d72c <__sfp_lock_release+0x8>)
 802d726:	f000 bbad 	b.w	802de84 <__retarget_lock_release_recursive>
 802d72a:	bf00      	nop
 802d72c:	2000db11 	.word	0x2000db11

0802d730 <__sinit>:
 802d730:	b510      	push	{r4, lr}
 802d732:	4604      	mov	r4, r0
 802d734:	f7ff fff0 	bl	802d718 <__sfp_lock_acquire>
 802d738:	6a23      	ldr	r3, [r4, #32]
 802d73a:	b11b      	cbz	r3, 802d744 <__sinit+0x14>
 802d73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d740:	f7ff bff0 	b.w	802d724 <__sfp_lock_release>
 802d744:	4b04      	ldr	r3, [pc, #16]	; (802d758 <__sinit+0x28>)
 802d746:	6223      	str	r3, [r4, #32]
 802d748:	4b04      	ldr	r3, [pc, #16]	; (802d75c <__sinit+0x2c>)
 802d74a:	681b      	ldr	r3, [r3, #0]
 802d74c:	2b00      	cmp	r3, #0
 802d74e:	d1f5      	bne.n	802d73c <__sinit+0xc>
 802d750:	f7ff ffc4 	bl	802d6dc <global_stdio_init.part.0>
 802d754:	e7f2      	b.n	802d73c <__sinit+0xc>
 802d756:	bf00      	nop
 802d758:	0802d69d 	.word	0x0802d69d
 802d75c:	2000db08 	.word	0x2000db08

0802d760 <fiprintf>:
 802d760:	b40e      	push	{r1, r2, r3}
 802d762:	b503      	push	{r0, r1, lr}
 802d764:	4601      	mov	r1, r0
 802d766:	ab03      	add	r3, sp, #12
 802d768:	4805      	ldr	r0, [pc, #20]	; (802d780 <fiprintf+0x20>)
 802d76a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d76e:	6800      	ldr	r0, [r0, #0]
 802d770:	9301      	str	r3, [sp, #4]
 802d772:	f003 f90b 	bl	803098c <_vfiprintf_r>
 802d776:	b002      	add	sp, #8
 802d778:	f85d eb04 	ldr.w	lr, [sp], #4
 802d77c:	b003      	add	sp, #12
 802d77e:	4770      	bx	lr
 802d780:	20000188 	.word	0x20000188

0802d784 <_fwalk_sglue>:
 802d784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d788:	4607      	mov	r7, r0
 802d78a:	4688      	mov	r8, r1
 802d78c:	4614      	mov	r4, r2
 802d78e:	2600      	movs	r6, #0
 802d790:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d794:	f1b9 0901 	subs.w	r9, r9, #1
 802d798:	d505      	bpl.n	802d7a6 <_fwalk_sglue+0x22>
 802d79a:	6824      	ldr	r4, [r4, #0]
 802d79c:	2c00      	cmp	r4, #0
 802d79e:	d1f7      	bne.n	802d790 <_fwalk_sglue+0xc>
 802d7a0:	4630      	mov	r0, r6
 802d7a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d7a6:	89ab      	ldrh	r3, [r5, #12]
 802d7a8:	2b01      	cmp	r3, #1
 802d7aa:	d907      	bls.n	802d7bc <_fwalk_sglue+0x38>
 802d7ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d7b0:	3301      	adds	r3, #1
 802d7b2:	d003      	beq.n	802d7bc <_fwalk_sglue+0x38>
 802d7b4:	4629      	mov	r1, r5
 802d7b6:	4638      	mov	r0, r7
 802d7b8:	47c0      	blx	r8
 802d7ba:	4306      	orrs	r6, r0
 802d7bc:	3568      	adds	r5, #104	; 0x68
 802d7be:	e7e9      	b.n	802d794 <_fwalk_sglue+0x10>

0802d7c0 <iprintf>:
 802d7c0:	b40f      	push	{r0, r1, r2, r3}
 802d7c2:	b507      	push	{r0, r1, r2, lr}
 802d7c4:	4906      	ldr	r1, [pc, #24]	; (802d7e0 <iprintf+0x20>)
 802d7c6:	ab04      	add	r3, sp, #16
 802d7c8:	6808      	ldr	r0, [r1, #0]
 802d7ca:	f853 2b04 	ldr.w	r2, [r3], #4
 802d7ce:	6881      	ldr	r1, [r0, #8]
 802d7d0:	9301      	str	r3, [sp, #4]
 802d7d2:	f003 f8db 	bl	803098c <_vfiprintf_r>
 802d7d6:	b003      	add	sp, #12
 802d7d8:	f85d eb04 	ldr.w	lr, [sp], #4
 802d7dc:	b004      	add	sp, #16
 802d7de:	4770      	bx	lr
 802d7e0:	20000188 	.word	0x20000188

0802d7e4 <sniprintf>:
 802d7e4:	b40c      	push	{r2, r3}
 802d7e6:	b530      	push	{r4, r5, lr}
 802d7e8:	4b17      	ldr	r3, [pc, #92]	; (802d848 <sniprintf+0x64>)
 802d7ea:	1e0c      	subs	r4, r1, #0
 802d7ec:	681d      	ldr	r5, [r3, #0]
 802d7ee:	b09d      	sub	sp, #116	; 0x74
 802d7f0:	da08      	bge.n	802d804 <sniprintf+0x20>
 802d7f2:	238b      	movs	r3, #139	; 0x8b
 802d7f4:	602b      	str	r3, [r5, #0]
 802d7f6:	f04f 30ff 	mov.w	r0, #4294967295
 802d7fa:	b01d      	add	sp, #116	; 0x74
 802d7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d800:	b002      	add	sp, #8
 802d802:	4770      	bx	lr
 802d804:	f44f 7302 	mov.w	r3, #520	; 0x208
 802d808:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d80c:	bf14      	ite	ne
 802d80e:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d812:	4623      	moveq	r3, r4
 802d814:	9304      	str	r3, [sp, #16]
 802d816:	9307      	str	r3, [sp, #28]
 802d818:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d81c:	9002      	str	r0, [sp, #8]
 802d81e:	9006      	str	r0, [sp, #24]
 802d820:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d824:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802d826:	ab21      	add	r3, sp, #132	; 0x84
 802d828:	a902      	add	r1, sp, #8
 802d82a:	4628      	mov	r0, r5
 802d82c:	9301      	str	r3, [sp, #4]
 802d82e:	f002 fdb3 	bl	8030398 <_svfiprintf_r>
 802d832:	1c43      	adds	r3, r0, #1
 802d834:	bfbc      	itt	lt
 802d836:	238b      	movlt	r3, #139	; 0x8b
 802d838:	602b      	strlt	r3, [r5, #0]
 802d83a:	2c00      	cmp	r4, #0
 802d83c:	d0dd      	beq.n	802d7fa <sniprintf+0x16>
 802d83e:	9b02      	ldr	r3, [sp, #8]
 802d840:	2200      	movs	r2, #0
 802d842:	701a      	strb	r2, [r3, #0]
 802d844:	e7d9      	b.n	802d7fa <sniprintf+0x16>
 802d846:	bf00      	nop
 802d848:	20000188 	.word	0x20000188

0802d84c <siprintf>:
 802d84c:	b40e      	push	{r1, r2, r3}
 802d84e:	b500      	push	{lr}
 802d850:	b09c      	sub	sp, #112	; 0x70
 802d852:	ab1d      	add	r3, sp, #116	; 0x74
 802d854:	9002      	str	r0, [sp, #8]
 802d856:	9006      	str	r0, [sp, #24]
 802d858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d85c:	4809      	ldr	r0, [pc, #36]	; (802d884 <siprintf+0x38>)
 802d85e:	9107      	str	r1, [sp, #28]
 802d860:	9104      	str	r1, [sp, #16]
 802d862:	4909      	ldr	r1, [pc, #36]	; (802d888 <siprintf+0x3c>)
 802d864:	f853 2b04 	ldr.w	r2, [r3], #4
 802d868:	9105      	str	r1, [sp, #20]
 802d86a:	6800      	ldr	r0, [r0, #0]
 802d86c:	9301      	str	r3, [sp, #4]
 802d86e:	a902      	add	r1, sp, #8
 802d870:	f002 fd92 	bl	8030398 <_svfiprintf_r>
 802d874:	9b02      	ldr	r3, [sp, #8]
 802d876:	2200      	movs	r2, #0
 802d878:	701a      	strb	r2, [r3, #0]
 802d87a:	b01c      	add	sp, #112	; 0x70
 802d87c:	f85d eb04 	ldr.w	lr, [sp], #4
 802d880:	b003      	add	sp, #12
 802d882:	4770      	bx	lr
 802d884:	20000188 	.word	0x20000188
 802d888:	ffff0208 	.word	0xffff0208

0802d88c <siscanf>:
 802d88c:	b40e      	push	{r1, r2, r3}
 802d88e:	b510      	push	{r4, lr}
 802d890:	b09f      	sub	sp, #124	; 0x7c
 802d892:	ac21      	add	r4, sp, #132	; 0x84
 802d894:	f44f 7101 	mov.w	r1, #516	; 0x204
 802d898:	f854 2b04 	ldr.w	r2, [r4], #4
 802d89c:	9201      	str	r2, [sp, #4]
 802d89e:	f8ad 101c 	strh.w	r1, [sp, #28]
 802d8a2:	9004      	str	r0, [sp, #16]
 802d8a4:	9008      	str	r0, [sp, #32]
 802d8a6:	f7e2 fcfb 	bl	80102a0 <strlen>
 802d8aa:	4b0c      	ldr	r3, [pc, #48]	; (802d8dc <siscanf+0x50>)
 802d8ac:	9005      	str	r0, [sp, #20]
 802d8ae:	9009      	str	r0, [sp, #36]	; 0x24
 802d8b0:	930d      	str	r3, [sp, #52]	; 0x34
 802d8b2:	480b      	ldr	r0, [pc, #44]	; (802d8e0 <siscanf+0x54>)
 802d8b4:	9a01      	ldr	r2, [sp, #4]
 802d8b6:	6800      	ldr	r0, [r0, #0]
 802d8b8:	9403      	str	r4, [sp, #12]
 802d8ba:	2300      	movs	r3, #0
 802d8bc:	9311      	str	r3, [sp, #68]	; 0x44
 802d8be:	9316      	str	r3, [sp, #88]	; 0x58
 802d8c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d8c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d8c8:	a904      	add	r1, sp, #16
 802d8ca:	4623      	mov	r3, r4
 802d8cc:	f002 febc 	bl	8030648 <__ssvfiscanf_r>
 802d8d0:	b01f      	add	sp, #124	; 0x7c
 802d8d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d8d6:	b003      	add	sp, #12
 802d8d8:	4770      	bx	lr
 802d8da:	bf00      	nop
 802d8dc:	0802d907 	.word	0x0802d907
 802d8e0:	20000188 	.word	0x20000188

0802d8e4 <__sread>:
 802d8e4:	b510      	push	{r4, lr}
 802d8e6:	460c      	mov	r4, r1
 802d8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d8ec:	f000 fa6a 	bl	802ddc4 <_read_r>
 802d8f0:	2800      	cmp	r0, #0
 802d8f2:	bfab      	itete	ge
 802d8f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d8f6:	89a3      	ldrhlt	r3, [r4, #12]
 802d8f8:	181b      	addge	r3, r3, r0
 802d8fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d8fe:	bfac      	ite	ge
 802d900:	6563      	strge	r3, [r4, #84]	; 0x54
 802d902:	81a3      	strhlt	r3, [r4, #12]
 802d904:	bd10      	pop	{r4, pc}

0802d906 <__seofread>:
 802d906:	2000      	movs	r0, #0
 802d908:	4770      	bx	lr

0802d90a <__swrite>:
 802d90a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d90e:	461f      	mov	r7, r3
 802d910:	898b      	ldrh	r3, [r1, #12]
 802d912:	05db      	lsls	r3, r3, #23
 802d914:	4605      	mov	r5, r0
 802d916:	460c      	mov	r4, r1
 802d918:	4616      	mov	r6, r2
 802d91a:	d505      	bpl.n	802d928 <__swrite+0x1e>
 802d91c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d920:	2302      	movs	r3, #2
 802d922:	2200      	movs	r2, #0
 802d924:	f000 fa3c 	bl	802dda0 <_lseek_r>
 802d928:	89a3      	ldrh	r3, [r4, #12]
 802d92a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d92e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d932:	81a3      	strh	r3, [r4, #12]
 802d934:	4632      	mov	r2, r6
 802d936:	463b      	mov	r3, r7
 802d938:	4628      	mov	r0, r5
 802d93a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d93e:	f000 ba63 	b.w	802de08 <_write_r>

0802d942 <__sseek>:
 802d942:	b510      	push	{r4, lr}
 802d944:	460c      	mov	r4, r1
 802d946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d94a:	f000 fa29 	bl	802dda0 <_lseek_r>
 802d94e:	1c43      	adds	r3, r0, #1
 802d950:	89a3      	ldrh	r3, [r4, #12]
 802d952:	bf15      	itete	ne
 802d954:	6560      	strne	r0, [r4, #84]	; 0x54
 802d956:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d95a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d95e:	81a3      	strheq	r3, [r4, #12]
 802d960:	bf18      	it	ne
 802d962:	81a3      	strhne	r3, [r4, #12]
 802d964:	bd10      	pop	{r4, pc}

0802d966 <__sclose>:
 802d966:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d96a:	f000 b9b3 	b.w	802dcd4 <_close_r>

0802d96e <__swbuf_r>:
 802d96e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d970:	460e      	mov	r6, r1
 802d972:	4614      	mov	r4, r2
 802d974:	4605      	mov	r5, r0
 802d976:	b118      	cbz	r0, 802d980 <__swbuf_r+0x12>
 802d978:	6a03      	ldr	r3, [r0, #32]
 802d97a:	b90b      	cbnz	r3, 802d980 <__swbuf_r+0x12>
 802d97c:	f7ff fed8 	bl	802d730 <__sinit>
 802d980:	69a3      	ldr	r3, [r4, #24]
 802d982:	60a3      	str	r3, [r4, #8]
 802d984:	89a3      	ldrh	r3, [r4, #12]
 802d986:	071a      	lsls	r2, r3, #28
 802d988:	d525      	bpl.n	802d9d6 <__swbuf_r+0x68>
 802d98a:	6923      	ldr	r3, [r4, #16]
 802d98c:	b31b      	cbz	r3, 802d9d6 <__swbuf_r+0x68>
 802d98e:	6823      	ldr	r3, [r4, #0]
 802d990:	6922      	ldr	r2, [r4, #16]
 802d992:	1a98      	subs	r0, r3, r2
 802d994:	6963      	ldr	r3, [r4, #20]
 802d996:	b2f6      	uxtb	r6, r6
 802d998:	4283      	cmp	r3, r0
 802d99a:	4637      	mov	r7, r6
 802d99c:	dc04      	bgt.n	802d9a8 <__swbuf_r+0x3a>
 802d99e:	4621      	mov	r1, r4
 802d9a0:	4628      	mov	r0, r5
 802d9a2:	f003 fae1 	bl	8030f68 <_fflush_r>
 802d9a6:	b9e0      	cbnz	r0, 802d9e2 <__swbuf_r+0x74>
 802d9a8:	68a3      	ldr	r3, [r4, #8]
 802d9aa:	3b01      	subs	r3, #1
 802d9ac:	60a3      	str	r3, [r4, #8]
 802d9ae:	6823      	ldr	r3, [r4, #0]
 802d9b0:	1c5a      	adds	r2, r3, #1
 802d9b2:	6022      	str	r2, [r4, #0]
 802d9b4:	701e      	strb	r6, [r3, #0]
 802d9b6:	6962      	ldr	r2, [r4, #20]
 802d9b8:	1c43      	adds	r3, r0, #1
 802d9ba:	429a      	cmp	r2, r3
 802d9bc:	d004      	beq.n	802d9c8 <__swbuf_r+0x5a>
 802d9be:	89a3      	ldrh	r3, [r4, #12]
 802d9c0:	07db      	lsls	r3, r3, #31
 802d9c2:	d506      	bpl.n	802d9d2 <__swbuf_r+0x64>
 802d9c4:	2e0a      	cmp	r6, #10
 802d9c6:	d104      	bne.n	802d9d2 <__swbuf_r+0x64>
 802d9c8:	4621      	mov	r1, r4
 802d9ca:	4628      	mov	r0, r5
 802d9cc:	f003 facc 	bl	8030f68 <_fflush_r>
 802d9d0:	b938      	cbnz	r0, 802d9e2 <__swbuf_r+0x74>
 802d9d2:	4638      	mov	r0, r7
 802d9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d9d6:	4621      	mov	r1, r4
 802d9d8:	4628      	mov	r0, r5
 802d9da:	f000 f805 	bl	802d9e8 <__swsetup_r>
 802d9de:	2800      	cmp	r0, #0
 802d9e0:	d0d5      	beq.n	802d98e <__swbuf_r+0x20>
 802d9e2:	f04f 37ff 	mov.w	r7, #4294967295
 802d9e6:	e7f4      	b.n	802d9d2 <__swbuf_r+0x64>

0802d9e8 <__swsetup_r>:
 802d9e8:	b538      	push	{r3, r4, r5, lr}
 802d9ea:	4b2a      	ldr	r3, [pc, #168]	; (802da94 <__swsetup_r+0xac>)
 802d9ec:	4605      	mov	r5, r0
 802d9ee:	6818      	ldr	r0, [r3, #0]
 802d9f0:	460c      	mov	r4, r1
 802d9f2:	b118      	cbz	r0, 802d9fc <__swsetup_r+0x14>
 802d9f4:	6a03      	ldr	r3, [r0, #32]
 802d9f6:	b90b      	cbnz	r3, 802d9fc <__swsetup_r+0x14>
 802d9f8:	f7ff fe9a 	bl	802d730 <__sinit>
 802d9fc:	89a3      	ldrh	r3, [r4, #12]
 802d9fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802da02:	0718      	lsls	r0, r3, #28
 802da04:	d422      	bmi.n	802da4c <__swsetup_r+0x64>
 802da06:	06d9      	lsls	r1, r3, #27
 802da08:	d407      	bmi.n	802da1a <__swsetup_r+0x32>
 802da0a:	2309      	movs	r3, #9
 802da0c:	602b      	str	r3, [r5, #0]
 802da0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802da12:	81a3      	strh	r3, [r4, #12]
 802da14:	f04f 30ff 	mov.w	r0, #4294967295
 802da18:	e034      	b.n	802da84 <__swsetup_r+0x9c>
 802da1a:	0758      	lsls	r0, r3, #29
 802da1c:	d512      	bpl.n	802da44 <__swsetup_r+0x5c>
 802da1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802da20:	b141      	cbz	r1, 802da34 <__swsetup_r+0x4c>
 802da22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802da26:	4299      	cmp	r1, r3
 802da28:	d002      	beq.n	802da30 <__swsetup_r+0x48>
 802da2a:	4628      	mov	r0, r5
 802da2c:	f001 f8ca 	bl	802ebc4 <_free_r>
 802da30:	2300      	movs	r3, #0
 802da32:	6363      	str	r3, [r4, #52]	; 0x34
 802da34:	89a3      	ldrh	r3, [r4, #12]
 802da36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802da3a:	81a3      	strh	r3, [r4, #12]
 802da3c:	2300      	movs	r3, #0
 802da3e:	6063      	str	r3, [r4, #4]
 802da40:	6923      	ldr	r3, [r4, #16]
 802da42:	6023      	str	r3, [r4, #0]
 802da44:	89a3      	ldrh	r3, [r4, #12]
 802da46:	f043 0308 	orr.w	r3, r3, #8
 802da4a:	81a3      	strh	r3, [r4, #12]
 802da4c:	6923      	ldr	r3, [r4, #16]
 802da4e:	b94b      	cbnz	r3, 802da64 <__swsetup_r+0x7c>
 802da50:	89a3      	ldrh	r3, [r4, #12]
 802da52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802da56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802da5a:	d003      	beq.n	802da64 <__swsetup_r+0x7c>
 802da5c:	4621      	mov	r1, r4
 802da5e:	4628      	mov	r0, r5
 802da60:	f003 fad0 	bl	8031004 <__smakebuf_r>
 802da64:	89a0      	ldrh	r0, [r4, #12]
 802da66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802da6a:	f010 0301 	ands.w	r3, r0, #1
 802da6e:	d00a      	beq.n	802da86 <__swsetup_r+0x9e>
 802da70:	2300      	movs	r3, #0
 802da72:	60a3      	str	r3, [r4, #8]
 802da74:	6963      	ldr	r3, [r4, #20]
 802da76:	425b      	negs	r3, r3
 802da78:	61a3      	str	r3, [r4, #24]
 802da7a:	6923      	ldr	r3, [r4, #16]
 802da7c:	b943      	cbnz	r3, 802da90 <__swsetup_r+0xa8>
 802da7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802da82:	d1c4      	bne.n	802da0e <__swsetup_r+0x26>
 802da84:	bd38      	pop	{r3, r4, r5, pc}
 802da86:	0781      	lsls	r1, r0, #30
 802da88:	bf58      	it	pl
 802da8a:	6963      	ldrpl	r3, [r4, #20]
 802da8c:	60a3      	str	r3, [r4, #8]
 802da8e:	e7f4      	b.n	802da7a <__swsetup_r+0x92>
 802da90:	2000      	movs	r0, #0
 802da92:	e7f7      	b.n	802da84 <__swsetup_r+0x9c>
 802da94:	20000188 	.word	0x20000188

0802da98 <memcmp>:
 802da98:	b510      	push	{r4, lr}
 802da9a:	3901      	subs	r1, #1
 802da9c:	4402      	add	r2, r0
 802da9e:	4290      	cmp	r0, r2
 802daa0:	d101      	bne.n	802daa6 <memcmp+0xe>
 802daa2:	2000      	movs	r0, #0
 802daa4:	e005      	b.n	802dab2 <memcmp+0x1a>
 802daa6:	7803      	ldrb	r3, [r0, #0]
 802daa8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802daac:	42a3      	cmp	r3, r4
 802daae:	d001      	beq.n	802dab4 <memcmp+0x1c>
 802dab0:	1b18      	subs	r0, r3, r4
 802dab2:	bd10      	pop	{r4, pc}
 802dab4:	3001      	adds	r0, #1
 802dab6:	e7f2      	b.n	802da9e <memcmp+0x6>

0802dab8 <memmove>:
 802dab8:	4288      	cmp	r0, r1
 802daba:	b510      	push	{r4, lr}
 802dabc:	eb01 0402 	add.w	r4, r1, r2
 802dac0:	d902      	bls.n	802dac8 <memmove+0x10>
 802dac2:	4284      	cmp	r4, r0
 802dac4:	4623      	mov	r3, r4
 802dac6:	d807      	bhi.n	802dad8 <memmove+0x20>
 802dac8:	1e43      	subs	r3, r0, #1
 802daca:	42a1      	cmp	r1, r4
 802dacc:	d008      	beq.n	802dae0 <memmove+0x28>
 802dace:	f811 2b01 	ldrb.w	r2, [r1], #1
 802dad2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802dad6:	e7f8      	b.n	802daca <memmove+0x12>
 802dad8:	4402      	add	r2, r0
 802dada:	4601      	mov	r1, r0
 802dadc:	428a      	cmp	r2, r1
 802dade:	d100      	bne.n	802dae2 <memmove+0x2a>
 802dae0:	bd10      	pop	{r4, pc}
 802dae2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802dae6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802daea:	e7f7      	b.n	802dadc <memmove+0x24>

0802daec <memset>:
 802daec:	4402      	add	r2, r0
 802daee:	4603      	mov	r3, r0
 802daf0:	4293      	cmp	r3, r2
 802daf2:	d100      	bne.n	802daf6 <memset+0xa>
 802daf4:	4770      	bx	lr
 802daf6:	f803 1b01 	strb.w	r1, [r3], #1
 802dafa:	e7f9      	b.n	802daf0 <memset+0x4>

0802dafc <strcat>:
 802dafc:	b510      	push	{r4, lr}
 802dafe:	4602      	mov	r2, r0
 802db00:	7814      	ldrb	r4, [r2, #0]
 802db02:	4613      	mov	r3, r2
 802db04:	3201      	adds	r2, #1
 802db06:	2c00      	cmp	r4, #0
 802db08:	d1fa      	bne.n	802db00 <strcat+0x4>
 802db0a:	3b01      	subs	r3, #1
 802db0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802db10:	f803 2f01 	strb.w	r2, [r3, #1]!
 802db14:	2a00      	cmp	r2, #0
 802db16:	d1f9      	bne.n	802db0c <strcat+0x10>
 802db18:	bd10      	pop	{r4, pc}

0802db1a <strchr>:
 802db1a:	b2c9      	uxtb	r1, r1
 802db1c:	4603      	mov	r3, r0
 802db1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802db22:	b11a      	cbz	r2, 802db2c <strchr+0x12>
 802db24:	428a      	cmp	r2, r1
 802db26:	d1f9      	bne.n	802db1c <strchr+0x2>
 802db28:	4618      	mov	r0, r3
 802db2a:	4770      	bx	lr
 802db2c:	2900      	cmp	r1, #0
 802db2e:	bf18      	it	ne
 802db30:	2300      	movne	r3, #0
 802db32:	e7f9      	b.n	802db28 <strchr+0xe>

0802db34 <strcspn>:
 802db34:	b570      	push	{r4, r5, r6, lr}
 802db36:	4603      	mov	r3, r0
 802db38:	461e      	mov	r6, r3
 802db3a:	f813 4b01 	ldrb.w	r4, [r3], #1
 802db3e:	b144      	cbz	r4, 802db52 <strcspn+0x1e>
 802db40:	1e4a      	subs	r2, r1, #1
 802db42:	e001      	b.n	802db48 <strcspn+0x14>
 802db44:	42a5      	cmp	r5, r4
 802db46:	d004      	beq.n	802db52 <strcspn+0x1e>
 802db48:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802db4c:	2d00      	cmp	r5, #0
 802db4e:	d1f9      	bne.n	802db44 <strcspn+0x10>
 802db50:	e7f2      	b.n	802db38 <strcspn+0x4>
 802db52:	1a30      	subs	r0, r6, r0
 802db54:	bd70      	pop	{r4, r5, r6, pc}

0802db56 <strncat>:
 802db56:	b530      	push	{r4, r5, lr}
 802db58:	4604      	mov	r4, r0
 802db5a:	7825      	ldrb	r5, [r4, #0]
 802db5c:	4623      	mov	r3, r4
 802db5e:	3401      	adds	r4, #1
 802db60:	2d00      	cmp	r5, #0
 802db62:	d1fa      	bne.n	802db5a <strncat+0x4>
 802db64:	3a01      	subs	r2, #1
 802db66:	d304      	bcc.n	802db72 <strncat+0x1c>
 802db68:	f811 4b01 	ldrb.w	r4, [r1], #1
 802db6c:	f803 4b01 	strb.w	r4, [r3], #1
 802db70:	b904      	cbnz	r4, 802db74 <strncat+0x1e>
 802db72:	bd30      	pop	{r4, r5, pc}
 802db74:	2a00      	cmp	r2, #0
 802db76:	d1f5      	bne.n	802db64 <strncat+0xe>
 802db78:	701a      	strb	r2, [r3, #0]
 802db7a:	e7f3      	b.n	802db64 <strncat+0xe>

0802db7c <strncmp>:
 802db7c:	b510      	push	{r4, lr}
 802db7e:	b16a      	cbz	r2, 802db9c <strncmp+0x20>
 802db80:	3901      	subs	r1, #1
 802db82:	1884      	adds	r4, r0, r2
 802db84:	f810 2b01 	ldrb.w	r2, [r0], #1
 802db88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802db8c:	429a      	cmp	r2, r3
 802db8e:	d103      	bne.n	802db98 <strncmp+0x1c>
 802db90:	42a0      	cmp	r0, r4
 802db92:	d001      	beq.n	802db98 <strncmp+0x1c>
 802db94:	2a00      	cmp	r2, #0
 802db96:	d1f5      	bne.n	802db84 <strncmp+0x8>
 802db98:	1ad0      	subs	r0, r2, r3
 802db9a:	bd10      	pop	{r4, pc}
 802db9c:	4610      	mov	r0, r2
 802db9e:	e7fc      	b.n	802db9a <strncmp+0x1e>

0802dba0 <strncpy>:
 802dba0:	b510      	push	{r4, lr}
 802dba2:	3901      	subs	r1, #1
 802dba4:	4603      	mov	r3, r0
 802dba6:	b132      	cbz	r2, 802dbb6 <strncpy+0x16>
 802dba8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802dbac:	f803 4b01 	strb.w	r4, [r3], #1
 802dbb0:	3a01      	subs	r2, #1
 802dbb2:	2c00      	cmp	r4, #0
 802dbb4:	d1f7      	bne.n	802dba6 <strncpy+0x6>
 802dbb6:	441a      	add	r2, r3
 802dbb8:	2100      	movs	r1, #0
 802dbba:	4293      	cmp	r3, r2
 802dbbc:	d100      	bne.n	802dbc0 <strncpy+0x20>
 802dbbe:	bd10      	pop	{r4, pc}
 802dbc0:	f803 1b01 	strb.w	r1, [r3], #1
 802dbc4:	e7f9      	b.n	802dbba <strncpy+0x1a>

0802dbc6 <strspn>:
 802dbc6:	b570      	push	{r4, r5, r6, lr}
 802dbc8:	4603      	mov	r3, r0
 802dbca:	461e      	mov	r6, r3
 802dbcc:	f813 4b01 	ldrb.w	r4, [r3], #1
 802dbd0:	b13c      	cbz	r4, 802dbe2 <strspn+0x1c>
 802dbd2:	1e4a      	subs	r2, r1, #1
 802dbd4:	e001      	b.n	802dbda <strspn+0x14>
 802dbd6:	42a5      	cmp	r5, r4
 802dbd8:	d0f7      	beq.n	802dbca <strspn+0x4>
 802dbda:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802dbde:	2d00      	cmp	r5, #0
 802dbe0:	d1f9      	bne.n	802dbd6 <strspn+0x10>
 802dbe2:	1a30      	subs	r0, r6, r0
 802dbe4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802dbe8 <strtok>:
 802dbe8:	4b16      	ldr	r3, [pc, #88]	; (802dc44 <strtok+0x5c>)
 802dbea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802dbec:	681e      	ldr	r6, [r3, #0]
 802dbee:	6c74      	ldr	r4, [r6, #68]	; 0x44
 802dbf0:	4605      	mov	r5, r0
 802dbf2:	b9fc      	cbnz	r4, 802dc34 <strtok+0x4c>
 802dbf4:	2050      	movs	r0, #80	; 0x50
 802dbf6:	9101      	str	r1, [sp, #4]
 802dbf8:	f7fe fddc 	bl	802c7b4 <malloc>
 802dbfc:	9901      	ldr	r1, [sp, #4]
 802dbfe:	6470      	str	r0, [r6, #68]	; 0x44
 802dc00:	4602      	mov	r2, r0
 802dc02:	b920      	cbnz	r0, 802dc0e <strtok+0x26>
 802dc04:	4b10      	ldr	r3, [pc, #64]	; (802dc48 <strtok+0x60>)
 802dc06:	4811      	ldr	r0, [pc, #68]	; (802dc4c <strtok+0x64>)
 802dc08:	215b      	movs	r1, #91	; 0x5b
 802dc0a:	f7fe fd9f 	bl	802c74c <__assert_func>
 802dc0e:	e9c0 4400 	strd	r4, r4, [r0]
 802dc12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802dc16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802dc1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802dc1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802dc22:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802dc26:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802dc2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802dc2e:	6184      	str	r4, [r0, #24]
 802dc30:	7704      	strb	r4, [r0, #28]
 802dc32:	6244      	str	r4, [r0, #36]	; 0x24
 802dc34:	6c72      	ldr	r2, [r6, #68]	; 0x44
 802dc36:	2301      	movs	r3, #1
 802dc38:	4628      	mov	r0, r5
 802dc3a:	b002      	add	sp, #8
 802dc3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dc40:	f000 b806 	b.w	802dc50 <__strtok_r>
 802dc44:	20000188 	.word	0x20000188
 802dc48:	08034dab 	.word	0x08034dab
 802dc4c:	08034dc2 	.word	0x08034dc2

0802dc50 <__strtok_r>:
 802dc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 802dc52:	b908      	cbnz	r0, 802dc58 <__strtok_r+0x8>
 802dc54:	6810      	ldr	r0, [r2, #0]
 802dc56:	b188      	cbz	r0, 802dc7c <__strtok_r+0x2c>
 802dc58:	4604      	mov	r4, r0
 802dc5a:	4620      	mov	r0, r4
 802dc5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 802dc60:	460f      	mov	r7, r1
 802dc62:	f817 6b01 	ldrb.w	r6, [r7], #1
 802dc66:	b91e      	cbnz	r6, 802dc70 <__strtok_r+0x20>
 802dc68:	b965      	cbnz	r5, 802dc84 <__strtok_r+0x34>
 802dc6a:	6015      	str	r5, [r2, #0]
 802dc6c:	4628      	mov	r0, r5
 802dc6e:	e005      	b.n	802dc7c <__strtok_r+0x2c>
 802dc70:	42b5      	cmp	r5, r6
 802dc72:	d1f6      	bne.n	802dc62 <__strtok_r+0x12>
 802dc74:	2b00      	cmp	r3, #0
 802dc76:	d1f0      	bne.n	802dc5a <__strtok_r+0xa>
 802dc78:	6014      	str	r4, [r2, #0]
 802dc7a:	7003      	strb	r3, [r0, #0]
 802dc7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dc7e:	461c      	mov	r4, r3
 802dc80:	e00c      	b.n	802dc9c <__strtok_r+0x4c>
 802dc82:	b915      	cbnz	r5, 802dc8a <__strtok_r+0x3a>
 802dc84:	f814 3b01 	ldrb.w	r3, [r4], #1
 802dc88:	460e      	mov	r6, r1
 802dc8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802dc8e:	42ab      	cmp	r3, r5
 802dc90:	d1f7      	bne.n	802dc82 <__strtok_r+0x32>
 802dc92:	2b00      	cmp	r3, #0
 802dc94:	d0f3      	beq.n	802dc7e <__strtok_r+0x2e>
 802dc96:	2300      	movs	r3, #0
 802dc98:	f804 3c01 	strb.w	r3, [r4, #-1]
 802dc9c:	6014      	str	r4, [r2, #0]
 802dc9e:	e7ed      	b.n	802dc7c <__strtok_r+0x2c>

0802dca0 <strstr>:
 802dca0:	780a      	ldrb	r2, [r1, #0]
 802dca2:	b570      	push	{r4, r5, r6, lr}
 802dca4:	b96a      	cbnz	r2, 802dcc2 <strstr+0x22>
 802dca6:	bd70      	pop	{r4, r5, r6, pc}
 802dca8:	429a      	cmp	r2, r3
 802dcaa:	d109      	bne.n	802dcc0 <strstr+0x20>
 802dcac:	460c      	mov	r4, r1
 802dcae:	4605      	mov	r5, r0
 802dcb0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802dcb4:	2b00      	cmp	r3, #0
 802dcb6:	d0f6      	beq.n	802dca6 <strstr+0x6>
 802dcb8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802dcbc:	429e      	cmp	r6, r3
 802dcbe:	d0f7      	beq.n	802dcb0 <strstr+0x10>
 802dcc0:	3001      	adds	r0, #1
 802dcc2:	7803      	ldrb	r3, [r0, #0]
 802dcc4:	2b00      	cmp	r3, #0
 802dcc6:	d1ef      	bne.n	802dca8 <strstr+0x8>
 802dcc8:	4618      	mov	r0, r3
 802dcca:	e7ec      	b.n	802dca6 <strstr+0x6>

0802dccc <_localeconv_r>:
 802dccc:	4800      	ldr	r0, [pc, #0]	; (802dcd0 <_localeconv_r+0x4>)
 802dcce:	4770      	bx	lr
 802dcd0:	2000027c 	.word	0x2000027c

0802dcd4 <_close_r>:
 802dcd4:	b538      	push	{r3, r4, r5, lr}
 802dcd6:	4d06      	ldr	r5, [pc, #24]	; (802dcf0 <_close_r+0x1c>)
 802dcd8:	2300      	movs	r3, #0
 802dcda:	4604      	mov	r4, r0
 802dcdc:	4608      	mov	r0, r1
 802dcde:	602b      	str	r3, [r5, #0]
 802dce0:	f7e4 fffd 	bl	8012cde <_close>
 802dce4:	1c43      	adds	r3, r0, #1
 802dce6:	d102      	bne.n	802dcee <_close_r+0x1a>
 802dce8:	682b      	ldr	r3, [r5, #0]
 802dcea:	b103      	cbz	r3, 802dcee <_close_r+0x1a>
 802dcec:	6023      	str	r3, [r4, #0]
 802dcee:	bd38      	pop	{r3, r4, r5, pc}
 802dcf0:	2000db0c 	.word	0x2000db0c

0802dcf4 <_reclaim_reent>:
 802dcf4:	4b29      	ldr	r3, [pc, #164]	; (802dd9c <_reclaim_reent+0xa8>)
 802dcf6:	681b      	ldr	r3, [r3, #0]
 802dcf8:	4283      	cmp	r3, r0
 802dcfa:	b570      	push	{r4, r5, r6, lr}
 802dcfc:	4604      	mov	r4, r0
 802dcfe:	d04b      	beq.n	802dd98 <_reclaim_reent+0xa4>
 802dd00:	69c3      	ldr	r3, [r0, #28]
 802dd02:	b143      	cbz	r3, 802dd16 <_reclaim_reent+0x22>
 802dd04:	68db      	ldr	r3, [r3, #12]
 802dd06:	2b00      	cmp	r3, #0
 802dd08:	d144      	bne.n	802dd94 <_reclaim_reent+0xa0>
 802dd0a:	69e3      	ldr	r3, [r4, #28]
 802dd0c:	6819      	ldr	r1, [r3, #0]
 802dd0e:	b111      	cbz	r1, 802dd16 <_reclaim_reent+0x22>
 802dd10:	4620      	mov	r0, r4
 802dd12:	f000 ff57 	bl	802ebc4 <_free_r>
 802dd16:	6961      	ldr	r1, [r4, #20]
 802dd18:	b111      	cbz	r1, 802dd20 <_reclaim_reent+0x2c>
 802dd1a:	4620      	mov	r0, r4
 802dd1c:	f000 ff52 	bl	802ebc4 <_free_r>
 802dd20:	69e1      	ldr	r1, [r4, #28]
 802dd22:	b111      	cbz	r1, 802dd2a <_reclaim_reent+0x36>
 802dd24:	4620      	mov	r0, r4
 802dd26:	f000 ff4d 	bl	802ebc4 <_free_r>
 802dd2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802dd2c:	b111      	cbz	r1, 802dd34 <_reclaim_reent+0x40>
 802dd2e:	4620      	mov	r0, r4
 802dd30:	f000 ff48 	bl	802ebc4 <_free_r>
 802dd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dd36:	b111      	cbz	r1, 802dd3e <_reclaim_reent+0x4a>
 802dd38:	4620      	mov	r0, r4
 802dd3a:	f000 ff43 	bl	802ebc4 <_free_r>
 802dd3e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802dd40:	b111      	cbz	r1, 802dd48 <_reclaim_reent+0x54>
 802dd42:	4620      	mov	r0, r4
 802dd44:	f000 ff3e 	bl	802ebc4 <_free_r>
 802dd48:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802dd4a:	b111      	cbz	r1, 802dd52 <_reclaim_reent+0x5e>
 802dd4c:	4620      	mov	r0, r4
 802dd4e:	f000 ff39 	bl	802ebc4 <_free_r>
 802dd52:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802dd54:	b111      	cbz	r1, 802dd5c <_reclaim_reent+0x68>
 802dd56:	4620      	mov	r0, r4
 802dd58:	f000 ff34 	bl	802ebc4 <_free_r>
 802dd5c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802dd5e:	b111      	cbz	r1, 802dd66 <_reclaim_reent+0x72>
 802dd60:	4620      	mov	r0, r4
 802dd62:	f000 ff2f 	bl	802ebc4 <_free_r>
 802dd66:	6a23      	ldr	r3, [r4, #32]
 802dd68:	b1b3      	cbz	r3, 802dd98 <_reclaim_reent+0xa4>
 802dd6a:	4620      	mov	r0, r4
 802dd6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dd70:	4718      	bx	r3
 802dd72:	5949      	ldr	r1, [r1, r5]
 802dd74:	b941      	cbnz	r1, 802dd88 <_reclaim_reent+0x94>
 802dd76:	3504      	adds	r5, #4
 802dd78:	69e3      	ldr	r3, [r4, #28]
 802dd7a:	2d80      	cmp	r5, #128	; 0x80
 802dd7c:	68d9      	ldr	r1, [r3, #12]
 802dd7e:	d1f8      	bne.n	802dd72 <_reclaim_reent+0x7e>
 802dd80:	4620      	mov	r0, r4
 802dd82:	f000 ff1f 	bl	802ebc4 <_free_r>
 802dd86:	e7c0      	b.n	802dd0a <_reclaim_reent+0x16>
 802dd88:	680e      	ldr	r6, [r1, #0]
 802dd8a:	4620      	mov	r0, r4
 802dd8c:	f000 ff1a 	bl	802ebc4 <_free_r>
 802dd90:	4631      	mov	r1, r6
 802dd92:	e7ef      	b.n	802dd74 <_reclaim_reent+0x80>
 802dd94:	2500      	movs	r5, #0
 802dd96:	e7ef      	b.n	802dd78 <_reclaim_reent+0x84>
 802dd98:	bd70      	pop	{r4, r5, r6, pc}
 802dd9a:	bf00      	nop
 802dd9c:	20000188 	.word	0x20000188

0802dda0 <_lseek_r>:
 802dda0:	b538      	push	{r3, r4, r5, lr}
 802dda2:	4d07      	ldr	r5, [pc, #28]	; (802ddc0 <_lseek_r+0x20>)
 802dda4:	4604      	mov	r4, r0
 802dda6:	4608      	mov	r0, r1
 802dda8:	4611      	mov	r1, r2
 802ddaa:	2200      	movs	r2, #0
 802ddac:	602a      	str	r2, [r5, #0]
 802ddae:	461a      	mov	r2, r3
 802ddb0:	f7e4 ffbc 	bl	8012d2c <_lseek>
 802ddb4:	1c43      	adds	r3, r0, #1
 802ddb6:	d102      	bne.n	802ddbe <_lseek_r+0x1e>
 802ddb8:	682b      	ldr	r3, [r5, #0]
 802ddba:	b103      	cbz	r3, 802ddbe <_lseek_r+0x1e>
 802ddbc:	6023      	str	r3, [r4, #0]
 802ddbe:	bd38      	pop	{r3, r4, r5, pc}
 802ddc0:	2000db0c 	.word	0x2000db0c

0802ddc4 <_read_r>:
 802ddc4:	b538      	push	{r3, r4, r5, lr}
 802ddc6:	4d07      	ldr	r5, [pc, #28]	; (802dde4 <_read_r+0x20>)
 802ddc8:	4604      	mov	r4, r0
 802ddca:	4608      	mov	r0, r1
 802ddcc:	4611      	mov	r1, r2
 802ddce:	2200      	movs	r2, #0
 802ddd0:	602a      	str	r2, [r5, #0]
 802ddd2:	461a      	mov	r2, r3
 802ddd4:	f7e4 ff4a 	bl	8012c6c <_read>
 802ddd8:	1c43      	adds	r3, r0, #1
 802ddda:	d102      	bne.n	802dde2 <_read_r+0x1e>
 802dddc:	682b      	ldr	r3, [r5, #0]
 802ddde:	b103      	cbz	r3, 802dde2 <_read_r+0x1e>
 802dde0:	6023      	str	r3, [r4, #0]
 802dde2:	bd38      	pop	{r3, r4, r5, pc}
 802dde4:	2000db0c 	.word	0x2000db0c

0802dde8 <_sbrk_r>:
 802dde8:	b538      	push	{r3, r4, r5, lr}
 802ddea:	4d06      	ldr	r5, [pc, #24]	; (802de04 <_sbrk_r+0x1c>)
 802ddec:	2300      	movs	r3, #0
 802ddee:	4604      	mov	r4, r0
 802ddf0:	4608      	mov	r0, r1
 802ddf2:	602b      	str	r3, [r5, #0]
 802ddf4:	f7e4 ffa8 	bl	8012d48 <_sbrk>
 802ddf8:	1c43      	adds	r3, r0, #1
 802ddfa:	d102      	bne.n	802de02 <_sbrk_r+0x1a>
 802ddfc:	682b      	ldr	r3, [r5, #0]
 802ddfe:	b103      	cbz	r3, 802de02 <_sbrk_r+0x1a>
 802de00:	6023      	str	r3, [r4, #0]
 802de02:	bd38      	pop	{r3, r4, r5, pc}
 802de04:	2000db0c 	.word	0x2000db0c

0802de08 <_write_r>:
 802de08:	b538      	push	{r3, r4, r5, lr}
 802de0a:	4d07      	ldr	r5, [pc, #28]	; (802de28 <_write_r+0x20>)
 802de0c:	4604      	mov	r4, r0
 802de0e:	4608      	mov	r0, r1
 802de10:	4611      	mov	r1, r2
 802de12:	2200      	movs	r2, #0
 802de14:	602a      	str	r2, [r5, #0]
 802de16:	461a      	mov	r2, r3
 802de18:	f7e4 ff45 	bl	8012ca6 <_write>
 802de1c:	1c43      	adds	r3, r0, #1
 802de1e:	d102      	bne.n	802de26 <_write_r+0x1e>
 802de20:	682b      	ldr	r3, [r5, #0]
 802de22:	b103      	cbz	r3, 802de26 <_write_r+0x1e>
 802de24:	6023      	str	r3, [r4, #0]
 802de26:	bd38      	pop	{r3, r4, r5, pc}
 802de28:	2000db0c 	.word	0x2000db0c

0802de2c <__errno>:
 802de2c:	4b01      	ldr	r3, [pc, #4]	; (802de34 <__errno+0x8>)
 802de2e:	6818      	ldr	r0, [r3, #0]
 802de30:	4770      	bx	lr
 802de32:	bf00      	nop
 802de34:	20000188 	.word	0x20000188

0802de38 <__libc_init_array>:
 802de38:	b570      	push	{r4, r5, r6, lr}
 802de3a:	4d0d      	ldr	r5, [pc, #52]	; (802de70 <__libc_init_array+0x38>)
 802de3c:	4c0d      	ldr	r4, [pc, #52]	; (802de74 <__libc_init_array+0x3c>)
 802de3e:	1b64      	subs	r4, r4, r5
 802de40:	10a4      	asrs	r4, r4, #2
 802de42:	2600      	movs	r6, #0
 802de44:	42a6      	cmp	r6, r4
 802de46:	d109      	bne.n	802de5c <__libc_init_array+0x24>
 802de48:	4d0b      	ldr	r5, [pc, #44]	; (802de78 <__libc_init_array+0x40>)
 802de4a:	4c0c      	ldr	r4, [pc, #48]	; (802de7c <__libc_init_array+0x44>)
 802de4c:	f003 fe1a 	bl	8031a84 <_init>
 802de50:	1b64      	subs	r4, r4, r5
 802de52:	10a4      	asrs	r4, r4, #2
 802de54:	2600      	movs	r6, #0
 802de56:	42a6      	cmp	r6, r4
 802de58:	d105      	bne.n	802de66 <__libc_init_array+0x2e>
 802de5a:	bd70      	pop	{r4, r5, r6, pc}
 802de5c:	f855 3b04 	ldr.w	r3, [r5], #4
 802de60:	4798      	blx	r3
 802de62:	3601      	adds	r6, #1
 802de64:	e7ee      	b.n	802de44 <__libc_init_array+0xc>
 802de66:	f855 3b04 	ldr.w	r3, [r5], #4
 802de6a:	4798      	blx	r3
 802de6c:	3601      	adds	r6, #1
 802de6e:	e7f2      	b.n	802de56 <__libc_init_array+0x1e>
 802de70:	080351e0 	.word	0x080351e0
 802de74:	080351e0 	.word	0x080351e0
 802de78:	080351e0 	.word	0x080351e0
 802de7c:	080351e4 	.word	0x080351e4

0802de80 <__retarget_lock_init_recursive>:
 802de80:	4770      	bx	lr

0802de82 <__retarget_lock_acquire_recursive>:
 802de82:	4770      	bx	lr

0802de84 <__retarget_lock_release_recursive>:
 802de84:	4770      	bx	lr

0802de86 <strcpy>:
 802de86:	4603      	mov	r3, r0
 802de88:	f811 2b01 	ldrb.w	r2, [r1], #1
 802de8c:	f803 2b01 	strb.w	r2, [r3], #1
 802de90:	2a00      	cmp	r2, #0
 802de92:	d1f9      	bne.n	802de88 <strcpy+0x2>
 802de94:	4770      	bx	lr

0802de96 <memcpy>:
 802de96:	440a      	add	r2, r1
 802de98:	4291      	cmp	r1, r2
 802de9a:	f100 33ff 	add.w	r3, r0, #4294967295
 802de9e:	d100      	bne.n	802dea2 <memcpy+0xc>
 802dea0:	4770      	bx	lr
 802dea2:	b510      	push	{r4, lr}
 802dea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802dea8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802deac:	4291      	cmp	r1, r2
 802deae:	d1f9      	bne.n	802dea4 <memcpy+0xe>
 802deb0:	bd10      	pop	{r4, pc}
	...

0802deb4 <nanf>:
 802deb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802debc <nanf+0x8>
 802deb8:	4770      	bx	lr
 802deba:	bf00      	nop
 802debc:	7fc00000 	.word	0x7fc00000

0802dec0 <abort>:
 802dec0:	b508      	push	{r3, lr}
 802dec2:	2006      	movs	r0, #6
 802dec4:	f003 f976 	bl	80311b4 <raise>
 802dec8:	2001      	movs	r0, #1
 802deca:	f7e4 fec5 	bl	8012c58 <_exit>

0802dece <quorem>:
 802dece:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ded2:	6903      	ldr	r3, [r0, #16]
 802ded4:	690c      	ldr	r4, [r1, #16]
 802ded6:	42a3      	cmp	r3, r4
 802ded8:	4607      	mov	r7, r0
 802deda:	db7e      	blt.n	802dfda <quorem+0x10c>
 802dedc:	3c01      	subs	r4, #1
 802dede:	f101 0814 	add.w	r8, r1, #20
 802dee2:	f100 0514 	add.w	r5, r0, #20
 802dee6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802deea:	9301      	str	r3, [sp, #4]
 802deec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802def0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802def4:	3301      	adds	r3, #1
 802def6:	429a      	cmp	r2, r3
 802def8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802defc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802df00:	fbb2 f6f3 	udiv	r6, r2, r3
 802df04:	d331      	bcc.n	802df6a <quorem+0x9c>
 802df06:	f04f 0e00 	mov.w	lr, #0
 802df0a:	4640      	mov	r0, r8
 802df0c:	46ac      	mov	ip, r5
 802df0e:	46f2      	mov	sl, lr
 802df10:	f850 2b04 	ldr.w	r2, [r0], #4
 802df14:	b293      	uxth	r3, r2
 802df16:	fb06 e303 	mla	r3, r6, r3, lr
 802df1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802df1e:	0c1a      	lsrs	r2, r3, #16
 802df20:	b29b      	uxth	r3, r3
 802df22:	ebaa 0303 	sub.w	r3, sl, r3
 802df26:	f8dc a000 	ldr.w	sl, [ip]
 802df2a:	fa13 f38a 	uxtah	r3, r3, sl
 802df2e:	fb06 220e 	mla	r2, r6, lr, r2
 802df32:	9300      	str	r3, [sp, #0]
 802df34:	9b00      	ldr	r3, [sp, #0]
 802df36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802df3a:	b292      	uxth	r2, r2
 802df3c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802df40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802df44:	f8bd 3000 	ldrh.w	r3, [sp]
 802df48:	4581      	cmp	r9, r0
 802df4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802df4e:	f84c 3b04 	str.w	r3, [ip], #4
 802df52:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802df56:	d2db      	bcs.n	802df10 <quorem+0x42>
 802df58:	f855 300b 	ldr.w	r3, [r5, fp]
 802df5c:	b92b      	cbnz	r3, 802df6a <quorem+0x9c>
 802df5e:	9b01      	ldr	r3, [sp, #4]
 802df60:	3b04      	subs	r3, #4
 802df62:	429d      	cmp	r5, r3
 802df64:	461a      	mov	r2, r3
 802df66:	d32c      	bcc.n	802dfc2 <quorem+0xf4>
 802df68:	613c      	str	r4, [r7, #16]
 802df6a:	4638      	mov	r0, r7
 802df6c:	f001 f93c 	bl	802f1e8 <__mcmp>
 802df70:	2800      	cmp	r0, #0
 802df72:	db22      	blt.n	802dfba <quorem+0xec>
 802df74:	3601      	adds	r6, #1
 802df76:	4629      	mov	r1, r5
 802df78:	2000      	movs	r0, #0
 802df7a:	f858 2b04 	ldr.w	r2, [r8], #4
 802df7e:	f8d1 c000 	ldr.w	ip, [r1]
 802df82:	b293      	uxth	r3, r2
 802df84:	1ac3      	subs	r3, r0, r3
 802df86:	0c12      	lsrs	r2, r2, #16
 802df88:	fa13 f38c 	uxtah	r3, r3, ip
 802df8c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802df90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802df94:	b29b      	uxth	r3, r3
 802df96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802df9a:	45c1      	cmp	r9, r8
 802df9c:	f841 3b04 	str.w	r3, [r1], #4
 802dfa0:	ea4f 4022 	mov.w	r0, r2, asr #16
 802dfa4:	d2e9      	bcs.n	802df7a <quorem+0xac>
 802dfa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802dfaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802dfae:	b922      	cbnz	r2, 802dfba <quorem+0xec>
 802dfb0:	3b04      	subs	r3, #4
 802dfb2:	429d      	cmp	r5, r3
 802dfb4:	461a      	mov	r2, r3
 802dfb6:	d30a      	bcc.n	802dfce <quorem+0x100>
 802dfb8:	613c      	str	r4, [r7, #16]
 802dfba:	4630      	mov	r0, r6
 802dfbc:	b003      	add	sp, #12
 802dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dfc2:	6812      	ldr	r2, [r2, #0]
 802dfc4:	3b04      	subs	r3, #4
 802dfc6:	2a00      	cmp	r2, #0
 802dfc8:	d1ce      	bne.n	802df68 <quorem+0x9a>
 802dfca:	3c01      	subs	r4, #1
 802dfcc:	e7c9      	b.n	802df62 <quorem+0x94>
 802dfce:	6812      	ldr	r2, [r2, #0]
 802dfd0:	3b04      	subs	r3, #4
 802dfd2:	2a00      	cmp	r2, #0
 802dfd4:	d1f0      	bne.n	802dfb8 <quorem+0xea>
 802dfd6:	3c01      	subs	r4, #1
 802dfd8:	e7eb      	b.n	802dfb2 <quorem+0xe4>
 802dfda:	2000      	movs	r0, #0
 802dfdc:	e7ee      	b.n	802dfbc <quorem+0xee>
	...

0802dfe0 <_dtoa_r>:
 802dfe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dfe4:	ed2d 8b04 	vpush	{d8-d9}
 802dfe8:	69c5      	ldr	r5, [r0, #28]
 802dfea:	b093      	sub	sp, #76	; 0x4c
 802dfec:	ed8d 0b02 	vstr	d0, [sp, #8]
 802dff0:	ec57 6b10 	vmov	r6, r7, d0
 802dff4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802dff8:	9107      	str	r1, [sp, #28]
 802dffa:	4604      	mov	r4, r0
 802dffc:	920a      	str	r2, [sp, #40]	; 0x28
 802dffe:	930d      	str	r3, [sp, #52]	; 0x34
 802e000:	b975      	cbnz	r5, 802e020 <_dtoa_r+0x40>
 802e002:	2010      	movs	r0, #16
 802e004:	f7fe fbd6 	bl	802c7b4 <malloc>
 802e008:	4602      	mov	r2, r0
 802e00a:	61e0      	str	r0, [r4, #28]
 802e00c:	b920      	cbnz	r0, 802e018 <_dtoa_r+0x38>
 802e00e:	4bae      	ldr	r3, [pc, #696]	; (802e2c8 <_dtoa_r+0x2e8>)
 802e010:	21ef      	movs	r1, #239	; 0xef
 802e012:	48ae      	ldr	r0, [pc, #696]	; (802e2cc <_dtoa_r+0x2ec>)
 802e014:	f7fe fb9a 	bl	802c74c <__assert_func>
 802e018:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802e01c:	6005      	str	r5, [r0, #0]
 802e01e:	60c5      	str	r5, [r0, #12]
 802e020:	69e3      	ldr	r3, [r4, #28]
 802e022:	6819      	ldr	r1, [r3, #0]
 802e024:	b151      	cbz	r1, 802e03c <_dtoa_r+0x5c>
 802e026:	685a      	ldr	r2, [r3, #4]
 802e028:	604a      	str	r2, [r1, #4]
 802e02a:	2301      	movs	r3, #1
 802e02c:	4093      	lsls	r3, r2
 802e02e:	608b      	str	r3, [r1, #8]
 802e030:	4620      	mov	r0, r4
 802e032:	f000 fe53 	bl	802ecdc <_Bfree>
 802e036:	69e3      	ldr	r3, [r4, #28]
 802e038:	2200      	movs	r2, #0
 802e03a:	601a      	str	r2, [r3, #0]
 802e03c:	1e3b      	subs	r3, r7, #0
 802e03e:	bfbb      	ittet	lt
 802e040:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802e044:	9303      	strlt	r3, [sp, #12]
 802e046:	2300      	movge	r3, #0
 802e048:	2201      	movlt	r2, #1
 802e04a:	bfac      	ite	ge
 802e04c:	f8c8 3000 	strge.w	r3, [r8]
 802e050:	f8c8 2000 	strlt.w	r2, [r8]
 802e054:	4b9e      	ldr	r3, [pc, #632]	; (802e2d0 <_dtoa_r+0x2f0>)
 802e056:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802e05a:	ea33 0308 	bics.w	r3, r3, r8
 802e05e:	d11b      	bne.n	802e098 <_dtoa_r+0xb8>
 802e060:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e062:	f242 730f 	movw	r3, #9999	; 0x270f
 802e066:	6013      	str	r3, [r2, #0]
 802e068:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802e06c:	4333      	orrs	r3, r6
 802e06e:	f000 8593 	beq.w	802eb98 <_dtoa_r+0xbb8>
 802e072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e074:	b963      	cbnz	r3, 802e090 <_dtoa_r+0xb0>
 802e076:	4b97      	ldr	r3, [pc, #604]	; (802e2d4 <_dtoa_r+0x2f4>)
 802e078:	e027      	b.n	802e0ca <_dtoa_r+0xea>
 802e07a:	4b97      	ldr	r3, [pc, #604]	; (802e2d8 <_dtoa_r+0x2f8>)
 802e07c:	9300      	str	r3, [sp, #0]
 802e07e:	3308      	adds	r3, #8
 802e080:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802e082:	6013      	str	r3, [r2, #0]
 802e084:	9800      	ldr	r0, [sp, #0]
 802e086:	b013      	add	sp, #76	; 0x4c
 802e088:	ecbd 8b04 	vpop	{d8-d9}
 802e08c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e090:	4b90      	ldr	r3, [pc, #576]	; (802e2d4 <_dtoa_r+0x2f4>)
 802e092:	9300      	str	r3, [sp, #0]
 802e094:	3303      	adds	r3, #3
 802e096:	e7f3      	b.n	802e080 <_dtoa_r+0xa0>
 802e098:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e09c:	2200      	movs	r2, #0
 802e09e:	ec51 0b17 	vmov	r0, r1, d7
 802e0a2:	eeb0 8a47 	vmov.f32	s16, s14
 802e0a6:	eef0 8a67 	vmov.f32	s17, s15
 802e0aa:	2300      	movs	r3, #0
 802e0ac:	f7e2 fd24 	bl	8010af8 <__aeabi_dcmpeq>
 802e0b0:	4681      	mov	r9, r0
 802e0b2:	b160      	cbz	r0, 802e0ce <_dtoa_r+0xee>
 802e0b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e0b6:	2301      	movs	r3, #1
 802e0b8:	6013      	str	r3, [r2, #0]
 802e0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e0bc:	2b00      	cmp	r3, #0
 802e0be:	f000 8568 	beq.w	802eb92 <_dtoa_r+0xbb2>
 802e0c2:	4b86      	ldr	r3, [pc, #536]	; (802e2dc <_dtoa_r+0x2fc>)
 802e0c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802e0c6:	6013      	str	r3, [r2, #0]
 802e0c8:	3b01      	subs	r3, #1
 802e0ca:	9300      	str	r3, [sp, #0]
 802e0cc:	e7da      	b.n	802e084 <_dtoa_r+0xa4>
 802e0ce:	aa10      	add	r2, sp, #64	; 0x40
 802e0d0:	a911      	add	r1, sp, #68	; 0x44
 802e0d2:	4620      	mov	r0, r4
 802e0d4:	eeb0 0a48 	vmov.f32	s0, s16
 802e0d8:	eef0 0a68 	vmov.f32	s1, s17
 802e0dc:	f001 f99a 	bl	802f414 <__d2b>
 802e0e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802e0e4:	4682      	mov	sl, r0
 802e0e6:	2d00      	cmp	r5, #0
 802e0e8:	d07f      	beq.n	802e1ea <_dtoa_r+0x20a>
 802e0ea:	ee18 3a90 	vmov	r3, s17
 802e0ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e0f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802e0f6:	ec51 0b18 	vmov	r0, r1, d8
 802e0fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802e0fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802e102:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802e106:	4619      	mov	r1, r3
 802e108:	2200      	movs	r2, #0
 802e10a:	4b75      	ldr	r3, [pc, #468]	; (802e2e0 <_dtoa_r+0x300>)
 802e10c:	f7e2 f8d4 	bl	80102b8 <__aeabi_dsub>
 802e110:	a367      	add	r3, pc, #412	; (adr r3, 802e2b0 <_dtoa_r+0x2d0>)
 802e112:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e116:	f7e2 fa87 	bl	8010628 <__aeabi_dmul>
 802e11a:	a367      	add	r3, pc, #412	; (adr r3, 802e2b8 <_dtoa_r+0x2d8>)
 802e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e120:	f7e2 f8cc 	bl	80102bc <__adddf3>
 802e124:	4606      	mov	r6, r0
 802e126:	4628      	mov	r0, r5
 802e128:	460f      	mov	r7, r1
 802e12a:	f7e2 fa13 	bl	8010554 <__aeabi_i2d>
 802e12e:	a364      	add	r3, pc, #400	; (adr r3, 802e2c0 <_dtoa_r+0x2e0>)
 802e130:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e134:	f7e2 fa78 	bl	8010628 <__aeabi_dmul>
 802e138:	4602      	mov	r2, r0
 802e13a:	460b      	mov	r3, r1
 802e13c:	4630      	mov	r0, r6
 802e13e:	4639      	mov	r1, r7
 802e140:	f7e2 f8bc 	bl	80102bc <__adddf3>
 802e144:	4606      	mov	r6, r0
 802e146:	460f      	mov	r7, r1
 802e148:	f7e2 fd1e 	bl	8010b88 <__aeabi_d2iz>
 802e14c:	2200      	movs	r2, #0
 802e14e:	4683      	mov	fp, r0
 802e150:	2300      	movs	r3, #0
 802e152:	4630      	mov	r0, r6
 802e154:	4639      	mov	r1, r7
 802e156:	f7e2 fcd9 	bl	8010b0c <__aeabi_dcmplt>
 802e15a:	b148      	cbz	r0, 802e170 <_dtoa_r+0x190>
 802e15c:	4658      	mov	r0, fp
 802e15e:	f7e2 f9f9 	bl	8010554 <__aeabi_i2d>
 802e162:	4632      	mov	r2, r6
 802e164:	463b      	mov	r3, r7
 802e166:	f7e2 fcc7 	bl	8010af8 <__aeabi_dcmpeq>
 802e16a:	b908      	cbnz	r0, 802e170 <_dtoa_r+0x190>
 802e16c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e170:	f1bb 0f16 	cmp.w	fp, #22
 802e174:	d857      	bhi.n	802e226 <_dtoa_r+0x246>
 802e176:	4b5b      	ldr	r3, [pc, #364]	; (802e2e4 <_dtoa_r+0x304>)
 802e178:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e180:	ec51 0b18 	vmov	r0, r1, d8
 802e184:	f7e2 fcc2 	bl	8010b0c <__aeabi_dcmplt>
 802e188:	2800      	cmp	r0, #0
 802e18a:	d04e      	beq.n	802e22a <_dtoa_r+0x24a>
 802e18c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e190:	2300      	movs	r3, #0
 802e192:	930c      	str	r3, [sp, #48]	; 0x30
 802e194:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e196:	1b5b      	subs	r3, r3, r5
 802e198:	1e5a      	subs	r2, r3, #1
 802e19a:	bf45      	ittet	mi
 802e19c:	f1c3 0301 	rsbmi	r3, r3, #1
 802e1a0:	9305      	strmi	r3, [sp, #20]
 802e1a2:	2300      	movpl	r3, #0
 802e1a4:	2300      	movmi	r3, #0
 802e1a6:	9206      	str	r2, [sp, #24]
 802e1a8:	bf54      	ite	pl
 802e1aa:	9305      	strpl	r3, [sp, #20]
 802e1ac:	9306      	strmi	r3, [sp, #24]
 802e1ae:	f1bb 0f00 	cmp.w	fp, #0
 802e1b2:	db3c      	blt.n	802e22e <_dtoa_r+0x24e>
 802e1b4:	9b06      	ldr	r3, [sp, #24]
 802e1b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802e1ba:	445b      	add	r3, fp
 802e1bc:	9306      	str	r3, [sp, #24]
 802e1be:	2300      	movs	r3, #0
 802e1c0:	9308      	str	r3, [sp, #32]
 802e1c2:	9b07      	ldr	r3, [sp, #28]
 802e1c4:	2b09      	cmp	r3, #9
 802e1c6:	d868      	bhi.n	802e29a <_dtoa_r+0x2ba>
 802e1c8:	2b05      	cmp	r3, #5
 802e1ca:	bfc4      	itt	gt
 802e1cc:	3b04      	subgt	r3, #4
 802e1ce:	9307      	strgt	r3, [sp, #28]
 802e1d0:	9b07      	ldr	r3, [sp, #28]
 802e1d2:	f1a3 0302 	sub.w	r3, r3, #2
 802e1d6:	bfcc      	ite	gt
 802e1d8:	2500      	movgt	r5, #0
 802e1da:	2501      	movle	r5, #1
 802e1dc:	2b03      	cmp	r3, #3
 802e1de:	f200 8085 	bhi.w	802e2ec <_dtoa_r+0x30c>
 802e1e2:	e8df f003 	tbb	[pc, r3]
 802e1e6:	3b2e      	.short	0x3b2e
 802e1e8:	5839      	.short	0x5839
 802e1ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802e1ee:	441d      	add	r5, r3
 802e1f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802e1f4:	2b20      	cmp	r3, #32
 802e1f6:	bfc1      	itttt	gt
 802e1f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802e1fc:	fa08 f803 	lslgt.w	r8, r8, r3
 802e200:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802e204:	fa26 f303 	lsrgt.w	r3, r6, r3
 802e208:	bfd6      	itet	le
 802e20a:	f1c3 0320 	rsble	r3, r3, #32
 802e20e:	ea48 0003 	orrgt.w	r0, r8, r3
 802e212:	fa06 f003 	lslle.w	r0, r6, r3
 802e216:	f7e2 f98d 	bl	8010534 <__aeabi_ui2d>
 802e21a:	2201      	movs	r2, #1
 802e21c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802e220:	3d01      	subs	r5, #1
 802e222:	920e      	str	r2, [sp, #56]	; 0x38
 802e224:	e76f      	b.n	802e106 <_dtoa_r+0x126>
 802e226:	2301      	movs	r3, #1
 802e228:	e7b3      	b.n	802e192 <_dtoa_r+0x1b2>
 802e22a:	900c      	str	r0, [sp, #48]	; 0x30
 802e22c:	e7b2      	b.n	802e194 <_dtoa_r+0x1b4>
 802e22e:	9b05      	ldr	r3, [sp, #20]
 802e230:	eba3 030b 	sub.w	r3, r3, fp
 802e234:	9305      	str	r3, [sp, #20]
 802e236:	f1cb 0300 	rsb	r3, fp, #0
 802e23a:	9308      	str	r3, [sp, #32]
 802e23c:	2300      	movs	r3, #0
 802e23e:	930b      	str	r3, [sp, #44]	; 0x2c
 802e240:	e7bf      	b.n	802e1c2 <_dtoa_r+0x1e2>
 802e242:	2300      	movs	r3, #0
 802e244:	9309      	str	r3, [sp, #36]	; 0x24
 802e246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e248:	2b00      	cmp	r3, #0
 802e24a:	dc52      	bgt.n	802e2f2 <_dtoa_r+0x312>
 802e24c:	2301      	movs	r3, #1
 802e24e:	9301      	str	r3, [sp, #4]
 802e250:	9304      	str	r3, [sp, #16]
 802e252:	461a      	mov	r2, r3
 802e254:	920a      	str	r2, [sp, #40]	; 0x28
 802e256:	e00b      	b.n	802e270 <_dtoa_r+0x290>
 802e258:	2301      	movs	r3, #1
 802e25a:	e7f3      	b.n	802e244 <_dtoa_r+0x264>
 802e25c:	2300      	movs	r3, #0
 802e25e:	9309      	str	r3, [sp, #36]	; 0x24
 802e260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e262:	445b      	add	r3, fp
 802e264:	9301      	str	r3, [sp, #4]
 802e266:	3301      	adds	r3, #1
 802e268:	2b01      	cmp	r3, #1
 802e26a:	9304      	str	r3, [sp, #16]
 802e26c:	bfb8      	it	lt
 802e26e:	2301      	movlt	r3, #1
 802e270:	69e0      	ldr	r0, [r4, #28]
 802e272:	2100      	movs	r1, #0
 802e274:	2204      	movs	r2, #4
 802e276:	f102 0614 	add.w	r6, r2, #20
 802e27a:	429e      	cmp	r6, r3
 802e27c:	d93d      	bls.n	802e2fa <_dtoa_r+0x31a>
 802e27e:	6041      	str	r1, [r0, #4]
 802e280:	4620      	mov	r0, r4
 802e282:	f000 fceb 	bl	802ec5c <_Balloc>
 802e286:	9000      	str	r0, [sp, #0]
 802e288:	2800      	cmp	r0, #0
 802e28a:	d139      	bne.n	802e300 <_dtoa_r+0x320>
 802e28c:	4b16      	ldr	r3, [pc, #88]	; (802e2e8 <_dtoa_r+0x308>)
 802e28e:	4602      	mov	r2, r0
 802e290:	f240 11af 	movw	r1, #431	; 0x1af
 802e294:	e6bd      	b.n	802e012 <_dtoa_r+0x32>
 802e296:	2301      	movs	r3, #1
 802e298:	e7e1      	b.n	802e25e <_dtoa_r+0x27e>
 802e29a:	2501      	movs	r5, #1
 802e29c:	2300      	movs	r3, #0
 802e29e:	9307      	str	r3, [sp, #28]
 802e2a0:	9509      	str	r5, [sp, #36]	; 0x24
 802e2a2:	f04f 33ff 	mov.w	r3, #4294967295
 802e2a6:	9301      	str	r3, [sp, #4]
 802e2a8:	9304      	str	r3, [sp, #16]
 802e2aa:	2200      	movs	r2, #0
 802e2ac:	2312      	movs	r3, #18
 802e2ae:	e7d1      	b.n	802e254 <_dtoa_r+0x274>
 802e2b0:	636f4361 	.word	0x636f4361
 802e2b4:	3fd287a7 	.word	0x3fd287a7
 802e2b8:	8b60c8b3 	.word	0x8b60c8b3
 802e2bc:	3fc68a28 	.word	0x3fc68a28
 802e2c0:	509f79fb 	.word	0x509f79fb
 802e2c4:	3fd34413 	.word	0x3fd34413
 802e2c8:	08034dab 	.word	0x08034dab
 802e2cc:	08034e29 	.word	0x08034e29
 802e2d0:	7ff00000 	.word	0x7ff00000
 802e2d4:	08034e25 	.word	0x08034e25
 802e2d8:	08034e1c 	.word	0x08034e1c
 802e2dc:	08035169 	.word	0x08035169
 802e2e0:	3ff80000 	.word	0x3ff80000
 802e2e4:	08034f18 	.word	0x08034f18
 802e2e8:	08034e81 	.word	0x08034e81
 802e2ec:	2301      	movs	r3, #1
 802e2ee:	9309      	str	r3, [sp, #36]	; 0x24
 802e2f0:	e7d7      	b.n	802e2a2 <_dtoa_r+0x2c2>
 802e2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e2f4:	9301      	str	r3, [sp, #4]
 802e2f6:	9304      	str	r3, [sp, #16]
 802e2f8:	e7ba      	b.n	802e270 <_dtoa_r+0x290>
 802e2fa:	3101      	adds	r1, #1
 802e2fc:	0052      	lsls	r2, r2, #1
 802e2fe:	e7ba      	b.n	802e276 <_dtoa_r+0x296>
 802e300:	69e3      	ldr	r3, [r4, #28]
 802e302:	9a00      	ldr	r2, [sp, #0]
 802e304:	601a      	str	r2, [r3, #0]
 802e306:	9b04      	ldr	r3, [sp, #16]
 802e308:	2b0e      	cmp	r3, #14
 802e30a:	f200 80a8 	bhi.w	802e45e <_dtoa_r+0x47e>
 802e30e:	2d00      	cmp	r5, #0
 802e310:	f000 80a5 	beq.w	802e45e <_dtoa_r+0x47e>
 802e314:	f1bb 0f00 	cmp.w	fp, #0
 802e318:	dd38      	ble.n	802e38c <_dtoa_r+0x3ac>
 802e31a:	4bc0      	ldr	r3, [pc, #768]	; (802e61c <_dtoa_r+0x63c>)
 802e31c:	f00b 020f 	and.w	r2, fp, #15
 802e320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e324:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802e328:	e9d3 6700 	ldrd	r6, r7, [r3]
 802e32c:	ea4f 182b 	mov.w	r8, fp, asr #4
 802e330:	d019      	beq.n	802e366 <_dtoa_r+0x386>
 802e332:	4bbb      	ldr	r3, [pc, #748]	; (802e620 <_dtoa_r+0x640>)
 802e334:	ec51 0b18 	vmov	r0, r1, d8
 802e338:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e33c:	f7e2 fa9e 	bl	801087c <__aeabi_ddiv>
 802e340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e344:	f008 080f 	and.w	r8, r8, #15
 802e348:	2503      	movs	r5, #3
 802e34a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802e620 <_dtoa_r+0x640>
 802e34e:	f1b8 0f00 	cmp.w	r8, #0
 802e352:	d10a      	bne.n	802e36a <_dtoa_r+0x38a>
 802e354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e358:	4632      	mov	r2, r6
 802e35a:	463b      	mov	r3, r7
 802e35c:	f7e2 fa8e 	bl	801087c <__aeabi_ddiv>
 802e360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e364:	e02b      	b.n	802e3be <_dtoa_r+0x3de>
 802e366:	2502      	movs	r5, #2
 802e368:	e7ef      	b.n	802e34a <_dtoa_r+0x36a>
 802e36a:	f018 0f01 	tst.w	r8, #1
 802e36e:	d008      	beq.n	802e382 <_dtoa_r+0x3a2>
 802e370:	4630      	mov	r0, r6
 802e372:	4639      	mov	r1, r7
 802e374:	e9d9 2300 	ldrd	r2, r3, [r9]
 802e378:	f7e2 f956 	bl	8010628 <__aeabi_dmul>
 802e37c:	3501      	adds	r5, #1
 802e37e:	4606      	mov	r6, r0
 802e380:	460f      	mov	r7, r1
 802e382:	ea4f 0868 	mov.w	r8, r8, asr #1
 802e386:	f109 0908 	add.w	r9, r9, #8
 802e38a:	e7e0      	b.n	802e34e <_dtoa_r+0x36e>
 802e38c:	f000 809f 	beq.w	802e4ce <_dtoa_r+0x4ee>
 802e390:	f1cb 0600 	rsb	r6, fp, #0
 802e394:	4ba1      	ldr	r3, [pc, #644]	; (802e61c <_dtoa_r+0x63c>)
 802e396:	4fa2      	ldr	r7, [pc, #648]	; (802e620 <_dtoa_r+0x640>)
 802e398:	f006 020f 	and.w	r2, r6, #15
 802e39c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e3a4:	ec51 0b18 	vmov	r0, r1, d8
 802e3a8:	f7e2 f93e 	bl	8010628 <__aeabi_dmul>
 802e3ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3b0:	1136      	asrs	r6, r6, #4
 802e3b2:	2300      	movs	r3, #0
 802e3b4:	2502      	movs	r5, #2
 802e3b6:	2e00      	cmp	r6, #0
 802e3b8:	d17e      	bne.n	802e4b8 <_dtoa_r+0x4d8>
 802e3ba:	2b00      	cmp	r3, #0
 802e3bc:	d1d0      	bne.n	802e360 <_dtoa_r+0x380>
 802e3be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e3c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e3c4:	2b00      	cmp	r3, #0
 802e3c6:	f000 8084 	beq.w	802e4d2 <_dtoa_r+0x4f2>
 802e3ca:	4b96      	ldr	r3, [pc, #600]	; (802e624 <_dtoa_r+0x644>)
 802e3cc:	2200      	movs	r2, #0
 802e3ce:	4640      	mov	r0, r8
 802e3d0:	4649      	mov	r1, r9
 802e3d2:	f7e2 fb9b 	bl	8010b0c <__aeabi_dcmplt>
 802e3d6:	2800      	cmp	r0, #0
 802e3d8:	d07b      	beq.n	802e4d2 <_dtoa_r+0x4f2>
 802e3da:	9b04      	ldr	r3, [sp, #16]
 802e3dc:	2b00      	cmp	r3, #0
 802e3de:	d078      	beq.n	802e4d2 <_dtoa_r+0x4f2>
 802e3e0:	9b01      	ldr	r3, [sp, #4]
 802e3e2:	2b00      	cmp	r3, #0
 802e3e4:	dd39      	ble.n	802e45a <_dtoa_r+0x47a>
 802e3e6:	4b90      	ldr	r3, [pc, #576]	; (802e628 <_dtoa_r+0x648>)
 802e3e8:	2200      	movs	r2, #0
 802e3ea:	4640      	mov	r0, r8
 802e3ec:	4649      	mov	r1, r9
 802e3ee:	f7e2 f91b 	bl	8010628 <__aeabi_dmul>
 802e3f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3f6:	9e01      	ldr	r6, [sp, #4]
 802e3f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 802e3fc:	3501      	adds	r5, #1
 802e3fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e402:	4628      	mov	r0, r5
 802e404:	f7e2 f8a6 	bl	8010554 <__aeabi_i2d>
 802e408:	4642      	mov	r2, r8
 802e40a:	464b      	mov	r3, r9
 802e40c:	f7e2 f90c 	bl	8010628 <__aeabi_dmul>
 802e410:	4b86      	ldr	r3, [pc, #536]	; (802e62c <_dtoa_r+0x64c>)
 802e412:	2200      	movs	r2, #0
 802e414:	f7e1 ff52 	bl	80102bc <__adddf3>
 802e418:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802e41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e420:	9303      	str	r3, [sp, #12]
 802e422:	2e00      	cmp	r6, #0
 802e424:	d158      	bne.n	802e4d8 <_dtoa_r+0x4f8>
 802e426:	4b82      	ldr	r3, [pc, #520]	; (802e630 <_dtoa_r+0x650>)
 802e428:	2200      	movs	r2, #0
 802e42a:	4640      	mov	r0, r8
 802e42c:	4649      	mov	r1, r9
 802e42e:	f7e1 ff43 	bl	80102b8 <__aeabi_dsub>
 802e432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e436:	4680      	mov	r8, r0
 802e438:	4689      	mov	r9, r1
 802e43a:	f7e2 fb85 	bl	8010b48 <__aeabi_dcmpgt>
 802e43e:	2800      	cmp	r0, #0
 802e440:	f040 8296 	bne.w	802e970 <_dtoa_r+0x990>
 802e444:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802e448:	4640      	mov	r0, r8
 802e44a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802e44e:	4649      	mov	r1, r9
 802e450:	f7e2 fb5c 	bl	8010b0c <__aeabi_dcmplt>
 802e454:	2800      	cmp	r0, #0
 802e456:	f040 8289 	bne.w	802e96c <_dtoa_r+0x98c>
 802e45a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802e45e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802e460:	2b00      	cmp	r3, #0
 802e462:	f2c0 814e 	blt.w	802e702 <_dtoa_r+0x722>
 802e466:	f1bb 0f0e 	cmp.w	fp, #14
 802e46a:	f300 814a 	bgt.w	802e702 <_dtoa_r+0x722>
 802e46e:	4b6b      	ldr	r3, [pc, #428]	; (802e61c <_dtoa_r+0x63c>)
 802e470:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e474:	e9d3 8900 	ldrd	r8, r9, [r3]
 802e478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e47a:	2b00      	cmp	r3, #0
 802e47c:	f280 80dc 	bge.w	802e638 <_dtoa_r+0x658>
 802e480:	9b04      	ldr	r3, [sp, #16]
 802e482:	2b00      	cmp	r3, #0
 802e484:	f300 80d8 	bgt.w	802e638 <_dtoa_r+0x658>
 802e488:	f040 826f 	bne.w	802e96a <_dtoa_r+0x98a>
 802e48c:	4b68      	ldr	r3, [pc, #416]	; (802e630 <_dtoa_r+0x650>)
 802e48e:	2200      	movs	r2, #0
 802e490:	4640      	mov	r0, r8
 802e492:	4649      	mov	r1, r9
 802e494:	f7e2 f8c8 	bl	8010628 <__aeabi_dmul>
 802e498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e49c:	f7e2 fb4a 	bl	8010b34 <__aeabi_dcmpge>
 802e4a0:	9e04      	ldr	r6, [sp, #16]
 802e4a2:	4637      	mov	r7, r6
 802e4a4:	2800      	cmp	r0, #0
 802e4a6:	f040 8245 	bne.w	802e934 <_dtoa_r+0x954>
 802e4aa:	9d00      	ldr	r5, [sp, #0]
 802e4ac:	2331      	movs	r3, #49	; 0x31
 802e4ae:	f805 3b01 	strb.w	r3, [r5], #1
 802e4b2:	f10b 0b01 	add.w	fp, fp, #1
 802e4b6:	e241      	b.n	802e93c <_dtoa_r+0x95c>
 802e4b8:	07f2      	lsls	r2, r6, #31
 802e4ba:	d505      	bpl.n	802e4c8 <_dtoa_r+0x4e8>
 802e4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 802e4c0:	f7e2 f8b2 	bl	8010628 <__aeabi_dmul>
 802e4c4:	3501      	adds	r5, #1
 802e4c6:	2301      	movs	r3, #1
 802e4c8:	1076      	asrs	r6, r6, #1
 802e4ca:	3708      	adds	r7, #8
 802e4cc:	e773      	b.n	802e3b6 <_dtoa_r+0x3d6>
 802e4ce:	2502      	movs	r5, #2
 802e4d0:	e775      	b.n	802e3be <_dtoa_r+0x3de>
 802e4d2:	9e04      	ldr	r6, [sp, #16]
 802e4d4:	465f      	mov	r7, fp
 802e4d6:	e792      	b.n	802e3fe <_dtoa_r+0x41e>
 802e4d8:	9900      	ldr	r1, [sp, #0]
 802e4da:	4b50      	ldr	r3, [pc, #320]	; (802e61c <_dtoa_r+0x63c>)
 802e4dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e4e0:	4431      	add	r1, r6
 802e4e2:	9102      	str	r1, [sp, #8]
 802e4e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802e4e6:	eeb0 9a47 	vmov.f32	s18, s14
 802e4ea:	eef0 9a67 	vmov.f32	s19, s15
 802e4ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802e4f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e4f6:	2900      	cmp	r1, #0
 802e4f8:	d044      	beq.n	802e584 <_dtoa_r+0x5a4>
 802e4fa:	494e      	ldr	r1, [pc, #312]	; (802e634 <_dtoa_r+0x654>)
 802e4fc:	2000      	movs	r0, #0
 802e4fe:	f7e2 f9bd 	bl	801087c <__aeabi_ddiv>
 802e502:	ec53 2b19 	vmov	r2, r3, d9
 802e506:	f7e1 fed7 	bl	80102b8 <__aeabi_dsub>
 802e50a:	9d00      	ldr	r5, [sp, #0]
 802e50c:	ec41 0b19 	vmov	d9, r0, r1
 802e510:	4649      	mov	r1, r9
 802e512:	4640      	mov	r0, r8
 802e514:	f7e2 fb38 	bl	8010b88 <__aeabi_d2iz>
 802e518:	4606      	mov	r6, r0
 802e51a:	f7e2 f81b 	bl	8010554 <__aeabi_i2d>
 802e51e:	4602      	mov	r2, r0
 802e520:	460b      	mov	r3, r1
 802e522:	4640      	mov	r0, r8
 802e524:	4649      	mov	r1, r9
 802e526:	f7e1 fec7 	bl	80102b8 <__aeabi_dsub>
 802e52a:	3630      	adds	r6, #48	; 0x30
 802e52c:	f805 6b01 	strb.w	r6, [r5], #1
 802e530:	ec53 2b19 	vmov	r2, r3, d9
 802e534:	4680      	mov	r8, r0
 802e536:	4689      	mov	r9, r1
 802e538:	f7e2 fae8 	bl	8010b0c <__aeabi_dcmplt>
 802e53c:	2800      	cmp	r0, #0
 802e53e:	d164      	bne.n	802e60a <_dtoa_r+0x62a>
 802e540:	4642      	mov	r2, r8
 802e542:	464b      	mov	r3, r9
 802e544:	4937      	ldr	r1, [pc, #220]	; (802e624 <_dtoa_r+0x644>)
 802e546:	2000      	movs	r0, #0
 802e548:	f7e1 feb6 	bl	80102b8 <__aeabi_dsub>
 802e54c:	ec53 2b19 	vmov	r2, r3, d9
 802e550:	f7e2 fadc 	bl	8010b0c <__aeabi_dcmplt>
 802e554:	2800      	cmp	r0, #0
 802e556:	f040 80b6 	bne.w	802e6c6 <_dtoa_r+0x6e6>
 802e55a:	9b02      	ldr	r3, [sp, #8]
 802e55c:	429d      	cmp	r5, r3
 802e55e:	f43f af7c 	beq.w	802e45a <_dtoa_r+0x47a>
 802e562:	4b31      	ldr	r3, [pc, #196]	; (802e628 <_dtoa_r+0x648>)
 802e564:	ec51 0b19 	vmov	r0, r1, d9
 802e568:	2200      	movs	r2, #0
 802e56a:	f7e2 f85d 	bl	8010628 <__aeabi_dmul>
 802e56e:	4b2e      	ldr	r3, [pc, #184]	; (802e628 <_dtoa_r+0x648>)
 802e570:	ec41 0b19 	vmov	d9, r0, r1
 802e574:	2200      	movs	r2, #0
 802e576:	4640      	mov	r0, r8
 802e578:	4649      	mov	r1, r9
 802e57a:	f7e2 f855 	bl	8010628 <__aeabi_dmul>
 802e57e:	4680      	mov	r8, r0
 802e580:	4689      	mov	r9, r1
 802e582:	e7c5      	b.n	802e510 <_dtoa_r+0x530>
 802e584:	ec51 0b17 	vmov	r0, r1, d7
 802e588:	f7e2 f84e 	bl	8010628 <__aeabi_dmul>
 802e58c:	9b02      	ldr	r3, [sp, #8]
 802e58e:	9d00      	ldr	r5, [sp, #0]
 802e590:	930f      	str	r3, [sp, #60]	; 0x3c
 802e592:	ec41 0b19 	vmov	d9, r0, r1
 802e596:	4649      	mov	r1, r9
 802e598:	4640      	mov	r0, r8
 802e59a:	f7e2 faf5 	bl	8010b88 <__aeabi_d2iz>
 802e59e:	4606      	mov	r6, r0
 802e5a0:	f7e1 ffd8 	bl	8010554 <__aeabi_i2d>
 802e5a4:	3630      	adds	r6, #48	; 0x30
 802e5a6:	4602      	mov	r2, r0
 802e5a8:	460b      	mov	r3, r1
 802e5aa:	4640      	mov	r0, r8
 802e5ac:	4649      	mov	r1, r9
 802e5ae:	f7e1 fe83 	bl	80102b8 <__aeabi_dsub>
 802e5b2:	f805 6b01 	strb.w	r6, [r5], #1
 802e5b6:	9b02      	ldr	r3, [sp, #8]
 802e5b8:	429d      	cmp	r5, r3
 802e5ba:	4680      	mov	r8, r0
 802e5bc:	4689      	mov	r9, r1
 802e5be:	f04f 0200 	mov.w	r2, #0
 802e5c2:	d124      	bne.n	802e60e <_dtoa_r+0x62e>
 802e5c4:	4b1b      	ldr	r3, [pc, #108]	; (802e634 <_dtoa_r+0x654>)
 802e5c6:	ec51 0b19 	vmov	r0, r1, d9
 802e5ca:	f7e1 fe77 	bl	80102bc <__adddf3>
 802e5ce:	4602      	mov	r2, r0
 802e5d0:	460b      	mov	r3, r1
 802e5d2:	4640      	mov	r0, r8
 802e5d4:	4649      	mov	r1, r9
 802e5d6:	f7e2 fab7 	bl	8010b48 <__aeabi_dcmpgt>
 802e5da:	2800      	cmp	r0, #0
 802e5dc:	d173      	bne.n	802e6c6 <_dtoa_r+0x6e6>
 802e5de:	ec53 2b19 	vmov	r2, r3, d9
 802e5e2:	4914      	ldr	r1, [pc, #80]	; (802e634 <_dtoa_r+0x654>)
 802e5e4:	2000      	movs	r0, #0
 802e5e6:	f7e1 fe67 	bl	80102b8 <__aeabi_dsub>
 802e5ea:	4602      	mov	r2, r0
 802e5ec:	460b      	mov	r3, r1
 802e5ee:	4640      	mov	r0, r8
 802e5f0:	4649      	mov	r1, r9
 802e5f2:	f7e2 fa8b 	bl	8010b0c <__aeabi_dcmplt>
 802e5f6:	2800      	cmp	r0, #0
 802e5f8:	f43f af2f 	beq.w	802e45a <_dtoa_r+0x47a>
 802e5fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802e5fe:	1e6b      	subs	r3, r5, #1
 802e600:	930f      	str	r3, [sp, #60]	; 0x3c
 802e602:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802e606:	2b30      	cmp	r3, #48	; 0x30
 802e608:	d0f8      	beq.n	802e5fc <_dtoa_r+0x61c>
 802e60a:	46bb      	mov	fp, r7
 802e60c:	e04a      	b.n	802e6a4 <_dtoa_r+0x6c4>
 802e60e:	4b06      	ldr	r3, [pc, #24]	; (802e628 <_dtoa_r+0x648>)
 802e610:	f7e2 f80a 	bl	8010628 <__aeabi_dmul>
 802e614:	4680      	mov	r8, r0
 802e616:	4689      	mov	r9, r1
 802e618:	e7bd      	b.n	802e596 <_dtoa_r+0x5b6>
 802e61a:	bf00      	nop
 802e61c:	08034f18 	.word	0x08034f18
 802e620:	08034ef0 	.word	0x08034ef0
 802e624:	3ff00000 	.word	0x3ff00000
 802e628:	40240000 	.word	0x40240000
 802e62c:	401c0000 	.word	0x401c0000
 802e630:	40140000 	.word	0x40140000
 802e634:	3fe00000 	.word	0x3fe00000
 802e638:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802e63c:	9d00      	ldr	r5, [sp, #0]
 802e63e:	4642      	mov	r2, r8
 802e640:	464b      	mov	r3, r9
 802e642:	4630      	mov	r0, r6
 802e644:	4639      	mov	r1, r7
 802e646:	f7e2 f919 	bl	801087c <__aeabi_ddiv>
 802e64a:	f7e2 fa9d 	bl	8010b88 <__aeabi_d2iz>
 802e64e:	9001      	str	r0, [sp, #4]
 802e650:	f7e1 ff80 	bl	8010554 <__aeabi_i2d>
 802e654:	4642      	mov	r2, r8
 802e656:	464b      	mov	r3, r9
 802e658:	f7e1 ffe6 	bl	8010628 <__aeabi_dmul>
 802e65c:	4602      	mov	r2, r0
 802e65e:	460b      	mov	r3, r1
 802e660:	4630      	mov	r0, r6
 802e662:	4639      	mov	r1, r7
 802e664:	f7e1 fe28 	bl	80102b8 <__aeabi_dsub>
 802e668:	9e01      	ldr	r6, [sp, #4]
 802e66a:	9f04      	ldr	r7, [sp, #16]
 802e66c:	3630      	adds	r6, #48	; 0x30
 802e66e:	f805 6b01 	strb.w	r6, [r5], #1
 802e672:	9e00      	ldr	r6, [sp, #0]
 802e674:	1bae      	subs	r6, r5, r6
 802e676:	42b7      	cmp	r7, r6
 802e678:	4602      	mov	r2, r0
 802e67a:	460b      	mov	r3, r1
 802e67c:	d134      	bne.n	802e6e8 <_dtoa_r+0x708>
 802e67e:	f7e1 fe1d 	bl	80102bc <__adddf3>
 802e682:	4642      	mov	r2, r8
 802e684:	464b      	mov	r3, r9
 802e686:	4606      	mov	r6, r0
 802e688:	460f      	mov	r7, r1
 802e68a:	f7e2 fa5d 	bl	8010b48 <__aeabi_dcmpgt>
 802e68e:	b9c8      	cbnz	r0, 802e6c4 <_dtoa_r+0x6e4>
 802e690:	4642      	mov	r2, r8
 802e692:	464b      	mov	r3, r9
 802e694:	4630      	mov	r0, r6
 802e696:	4639      	mov	r1, r7
 802e698:	f7e2 fa2e 	bl	8010af8 <__aeabi_dcmpeq>
 802e69c:	b110      	cbz	r0, 802e6a4 <_dtoa_r+0x6c4>
 802e69e:	9b01      	ldr	r3, [sp, #4]
 802e6a0:	07db      	lsls	r3, r3, #31
 802e6a2:	d40f      	bmi.n	802e6c4 <_dtoa_r+0x6e4>
 802e6a4:	4651      	mov	r1, sl
 802e6a6:	4620      	mov	r0, r4
 802e6a8:	f000 fb18 	bl	802ecdc <_Bfree>
 802e6ac:	2300      	movs	r3, #0
 802e6ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e6b0:	702b      	strb	r3, [r5, #0]
 802e6b2:	f10b 0301 	add.w	r3, fp, #1
 802e6b6:	6013      	str	r3, [r2, #0]
 802e6b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e6ba:	2b00      	cmp	r3, #0
 802e6bc:	f43f ace2 	beq.w	802e084 <_dtoa_r+0xa4>
 802e6c0:	601d      	str	r5, [r3, #0]
 802e6c2:	e4df      	b.n	802e084 <_dtoa_r+0xa4>
 802e6c4:	465f      	mov	r7, fp
 802e6c6:	462b      	mov	r3, r5
 802e6c8:	461d      	mov	r5, r3
 802e6ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e6ce:	2a39      	cmp	r2, #57	; 0x39
 802e6d0:	d106      	bne.n	802e6e0 <_dtoa_r+0x700>
 802e6d2:	9a00      	ldr	r2, [sp, #0]
 802e6d4:	429a      	cmp	r2, r3
 802e6d6:	d1f7      	bne.n	802e6c8 <_dtoa_r+0x6e8>
 802e6d8:	9900      	ldr	r1, [sp, #0]
 802e6da:	2230      	movs	r2, #48	; 0x30
 802e6dc:	3701      	adds	r7, #1
 802e6de:	700a      	strb	r2, [r1, #0]
 802e6e0:	781a      	ldrb	r2, [r3, #0]
 802e6e2:	3201      	adds	r2, #1
 802e6e4:	701a      	strb	r2, [r3, #0]
 802e6e6:	e790      	b.n	802e60a <_dtoa_r+0x62a>
 802e6e8:	4ba3      	ldr	r3, [pc, #652]	; (802e978 <_dtoa_r+0x998>)
 802e6ea:	2200      	movs	r2, #0
 802e6ec:	f7e1 ff9c 	bl	8010628 <__aeabi_dmul>
 802e6f0:	2200      	movs	r2, #0
 802e6f2:	2300      	movs	r3, #0
 802e6f4:	4606      	mov	r6, r0
 802e6f6:	460f      	mov	r7, r1
 802e6f8:	f7e2 f9fe 	bl	8010af8 <__aeabi_dcmpeq>
 802e6fc:	2800      	cmp	r0, #0
 802e6fe:	d09e      	beq.n	802e63e <_dtoa_r+0x65e>
 802e700:	e7d0      	b.n	802e6a4 <_dtoa_r+0x6c4>
 802e702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e704:	2a00      	cmp	r2, #0
 802e706:	f000 80ca 	beq.w	802e89e <_dtoa_r+0x8be>
 802e70a:	9a07      	ldr	r2, [sp, #28]
 802e70c:	2a01      	cmp	r2, #1
 802e70e:	f300 80ad 	bgt.w	802e86c <_dtoa_r+0x88c>
 802e712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802e714:	2a00      	cmp	r2, #0
 802e716:	f000 80a5 	beq.w	802e864 <_dtoa_r+0x884>
 802e71a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802e71e:	9e08      	ldr	r6, [sp, #32]
 802e720:	9d05      	ldr	r5, [sp, #20]
 802e722:	9a05      	ldr	r2, [sp, #20]
 802e724:	441a      	add	r2, r3
 802e726:	9205      	str	r2, [sp, #20]
 802e728:	9a06      	ldr	r2, [sp, #24]
 802e72a:	2101      	movs	r1, #1
 802e72c:	441a      	add	r2, r3
 802e72e:	4620      	mov	r0, r4
 802e730:	9206      	str	r2, [sp, #24]
 802e732:	f000 fbd3 	bl	802eedc <__i2b>
 802e736:	4607      	mov	r7, r0
 802e738:	b165      	cbz	r5, 802e754 <_dtoa_r+0x774>
 802e73a:	9b06      	ldr	r3, [sp, #24]
 802e73c:	2b00      	cmp	r3, #0
 802e73e:	dd09      	ble.n	802e754 <_dtoa_r+0x774>
 802e740:	42ab      	cmp	r3, r5
 802e742:	9a05      	ldr	r2, [sp, #20]
 802e744:	bfa8      	it	ge
 802e746:	462b      	movge	r3, r5
 802e748:	1ad2      	subs	r2, r2, r3
 802e74a:	9205      	str	r2, [sp, #20]
 802e74c:	9a06      	ldr	r2, [sp, #24]
 802e74e:	1aed      	subs	r5, r5, r3
 802e750:	1ad3      	subs	r3, r2, r3
 802e752:	9306      	str	r3, [sp, #24]
 802e754:	9b08      	ldr	r3, [sp, #32]
 802e756:	b1f3      	cbz	r3, 802e796 <_dtoa_r+0x7b6>
 802e758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e75a:	2b00      	cmp	r3, #0
 802e75c:	f000 80a3 	beq.w	802e8a6 <_dtoa_r+0x8c6>
 802e760:	2e00      	cmp	r6, #0
 802e762:	dd10      	ble.n	802e786 <_dtoa_r+0x7a6>
 802e764:	4639      	mov	r1, r7
 802e766:	4632      	mov	r2, r6
 802e768:	4620      	mov	r0, r4
 802e76a:	f000 fc77 	bl	802f05c <__pow5mult>
 802e76e:	4652      	mov	r2, sl
 802e770:	4601      	mov	r1, r0
 802e772:	4607      	mov	r7, r0
 802e774:	4620      	mov	r0, r4
 802e776:	f000 fbc7 	bl	802ef08 <__multiply>
 802e77a:	4651      	mov	r1, sl
 802e77c:	4680      	mov	r8, r0
 802e77e:	4620      	mov	r0, r4
 802e780:	f000 faac 	bl	802ecdc <_Bfree>
 802e784:	46c2      	mov	sl, r8
 802e786:	9b08      	ldr	r3, [sp, #32]
 802e788:	1b9a      	subs	r2, r3, r6
 802e78a:	d004      	beq.n	802e796 <_dtoa_r+0x7b6>
 802e78c:	4651      	mov	r1, sl
 802e78e:	4620      	mov	r0, r4
 802e790:	f000 fc64 	bl	802f05c <__pow5mult>
 802e794:	4682      	mov	sl, r0
 802e796:	2101      	movs	r1, #1
 802e798:	4620      	mov	r0, r4
 802e79a:	f000 fb9f 	bl	802eedc <__i2b>
 802e79e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e7a0:	2b00      	cmp	r3, #0
 802e7a2:	4606      	mov	r6, r0
 802e7a4:	f340 8081 	ble.w	802e8aa <_dtoa_r+0x8ca>
 802e7a8:	461a      	mov	r2, r3
 802e7aa:	4601      	mov	r1, r0
 802e7ac:	4620      	mov	r0, r4
 802e7ae:	f000 fc55 	bl	802f05c <__pow5mult>
 802e7b2:	9b07      	ldr	r3, [sp, #28]
 802e7b4:	2b01      	cmp	r3, #1
 802e7b6:	4606      	mov	r6, r0
 802e7b8:	dd7a      	ble.n	802e8b0 <_dtoa_r+0x8d0>
 802e7ba:	f04f 0800 	mov.w	r8, #0
 802e7be:	6933      	ldr	r3, [r6, #16]
 802e7c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802e7c4:	6918      	ldr	r0, [r3, #16]
 802e7c6:	f000 fb3b 	bl	802ee40 <__hi0bits>
 802e7ca:	f1c0 0020 	rsb	r0, r0, #32
 802e7ce:	9b06      	ldr	r3, [sp, #24]
 802e7d0:	4418      	add	r0, r3
 802e7d2:	f010 001f 	ands.w	r0, r0, #31
 802e7d6:	f000 8094 	beq.w	802e902 <_dtoa_r+0x922>
 802e7da:	f1c0 0320 	rsb	r3, r0, #32
 802e7de:	2b04      	cmp	r3, #4
 802e7e0:	f340 8085 	ble.w	802e8ee <_dtoa_r+0x90e>
 802e7e4:	9b05      	ldr	r3, [sp, #20]
 802e7e6:	f1c0 001c 	rsb	r0, r0, #28
 802e7ea:	4403      	add	r3, r0
 802e7ec:	9305      	str	r3, [sp, #20]
 802e7ee:	9b06      	ldr	r3, [sp, #24]
 802e7f0:	4403      	add	r3, r0
 802e7f2:	4405      	add	r5, r0
 802e7f4:	9306      	str	r3, [sp, #24]
 802e7f6:	9b05      	ldr	r3, [sp, #20]
 802e7f8:	2b00      	cmp	r3, #0
 802e7fa:	dd05      	ble.n	802e808 <_dtoa_r+0x828>
 802e7fc:	4651      	mov	r1, sl
 802e7fe:	461a      	mov	r2, r3
 802e800:	4620      	mov	r0, r4
 802e802:	f000 fc85 	bl	802f110 <__lshift>
 802e806:	4682      	mov	sl, r0
 802e808:	9b06      	ldr	r3, [sp, #24]
 802e80a:	2b00      	cmp	r3, #0
 802e80c:	dd05      	ble.n	802e81a <_dtoa_r+0x83a>
 802e80e:	4631      	mov	r1, r6
 802e810:	461a      	mov	r2, r3
 802e812:	4620      	mov	r0, r4
 802e814:	f000 fc7c 	bl	802f110 <__lshift>
 802e818:	4606      	mov	r6, r0
 802e81a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e81c:	2b00      	cmp	r3, #0
 802e81e:	d072      	beq.n	802e906 <_dtoa_r+0x926>
 802e820:	4631      	mov	r1, r6
 802e822:	4650      	mov	r0, sl
 802e824:	f000 fce0 	bl	802f1e8 <__mcmp>
 802e828:	2800      	cmp	r0, #0
 802e82a:	da6c      	bge.n	802e906 <_dtoa_r+0x926>
 802e82c:	2300      	movs	r3, #0
 802e82e:	4651      	mov	r1, sl
 802e830:	220a      	movs	r2, #10
 802e832:	4620      	mov	r0, r4
 802e834:	f000 fa74 	bl	802ed20 <__multadd>
 802e838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e83a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e83e:	4682      	mov	sl, r0
 802e840:	2b00      	cmp	r3, #0
 802e842:	f000 81b0 	beq.w	802eba6 <_dtoa_r+0xbc6>
 802e846:	2300      	movs	r3, #0
 802e848:	4639      	mov	r1, r7
 802e84a:	220a      	movs	r2, #10
 802e84c:	4620      	mov	r0, r4
 802e84e:	f000 fa67 	bl	802ed20 <__multadd>
 802e852:	9b01      	ldr	r3, [sp, #4]
 802e854:	2b00      	cmp	r3, #0
 802e856:	4607      	mov	r7, r0
 802e858:	f300 8096 	bgt.w	802e988 <_dtoa_r+0x9a8>
 802e85c:	9b07      	ldr	r3, [sp, #28]
 802e85e:	2b02      	cmp	r3, #2
 802e860:	dc59      	bgt.n	802e916 <_dtoa_r+0x936>
 802e862:	e091      	b.n	802e988 <_dtoa_r+0x9a8>
 802e864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e866:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802e86a:	e758      	b.n	802e71e <_dtoa_r+0x73e>
 802e86c:	9b04      	ldr	r3, [sp, #16]
 802e86e:	1e5e      	subs	r6, r3, #1
 802e870:	9b08      	ldr	r3, [sp, #32]
 802e872:	42b3      	cmp	r3, r6
 802e874:	bfbf      	itttt	lt
 802e876:	9b08      	ldrlt	r3, [sp, #32]
 802e878:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802e87a:	9608      	strlt	r6, [sp, #32]
 802e87c:	1af3      	sublt	r3, r6, r3
 802e87e:	bfb4      	ite	lt
 802e880:	18d2      	addlt	r2, r2, r3
 802e882:	1b9e      	subge	r6, r3, r6
 802e884:	9b04      	ldr	r3, [sp, #16]
 802e886:	bfbc      	itt	lt
 802e888:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802e88a:	2600      	movlt	r6, #0
 802e88c:	2b00      	cmp	r3, #0
 802e88e:	bfb7      	itett	lt
 802e890:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802e894:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802e898:	1a9d      	sublt	r5, r3, r2
 802e89a:	2300      	movlt	r3, #0
 802e89c:	e741      	b.n	802e722 <_dtoa_r+0x742>
 802e89e:	9e08      	ldr	r6, [sp, #32]
 802e8a0:	9d05      	ldr	r5, [sp, #20]
 802e8a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802e8a4:	e748      	b.n	802e738 <_dtoa_r+0x758>
 802e8a6:	9a08      	ldr	r2, [sp, #32]
 802e8a8:	e770      	b.n	802e78c <_dtoa_r+0x7ac>
 802e8aa:	9b07      	ldr	r3, [sp, #28]
 802e8ac:	2b01      	cmp	r3, #1
 802e8ae:	dc19      	bgt.n	802e8e4 <_dtoa_r+0x904>
 802e8b0:	9b02      	ldr	r3, [sp, #8]
 802e8b2:	b9bb      	cbnz	r3, 802e8e4 <_dtoa_r+0x904>
 802e8b4:	9b03      	ldr	r3, [sp, #12]
 802e8b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e8ba:	b99b      	cbnz	r3, 802e8e4 <_dtoa_r+0x904>
 802e8bc:	9b03      	ldr	r3, [sp, #12]
 802e8be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e8c2:	0d1b      	lsrs	r3, r3, #20
 802e8c4:	051b      	lsls	r3, r3, #20
 802e8c6:	b183      	cbz	r3, 802e8ea <_dtoa_r+0x90a>
 802e8c8:	9b05      	ldr	r3, [sp, #20]
 802e8ca:	3301      	adds	r3, #1
 802e8cc:	9305      	str	r3, [sp, #20]
 802e8ce:	9b06      	ldr	r3, [sp, #24]
 802e8d0:	3301      	adds	r3, #1
 802e8d2:	9306      	str	r3, [sp, #24]
 802e8d4:	f04f 0801 	mov.w	r8, #1
 802e8d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e8da:	2b00      	cmp	r3, #0
 802e8dc:	f47f af6f 	bne.w	802e7be <_dtoa_r+0x7de>
 802e8e0:	2001      	movs	r0, #1
 802e8e2:	e774      	b.n	802e7ce <_dtoa_r+0x7ee>
 802e8e4:	f04f 0800 	mov.w	r8, #0
 802e8e8:	e7f6      	b.n	802e8d8 <_dtoa_r+0x8f8>
 802e8ea:	4698      	mov	r8, r3
 802e8ec:	e7f4      	b.n	802e8d8 <_dtoa_r+0x8f8>
 802e8ee:	d082      	beq.n	802e7f6 <_dtoa_r+0x816>
 802e8f0:	9a05      	ldr	r2, [sp, #20]
 802e8f2:	331c      	adds	r3, #28
 802e8f4:	441a      	add	r2, r3
 802e8f6:	9205      	str	r2, [sp, #20]
 802e8f8:	9a06      	ldr	r2, [sp, #24]
 802e8fa:	441a      	add	r2, r3
 802e8fc:	441d      	add	r5, r3
 802e8fe:	9206      	str	r2, [sp, #24]
 802e900:	e779      	b.n	802e7f6 <_dtoa_r+0x816>
 802e902:	4603      	mov	r3, r0
 802e904:	e7f4      	b.n	802e8f0 <_dtoa_r+0x910>
 802e906:	9b04      	ldr	r3, [sp, #16]
 802e908:	2b00      	cmp	r3, #0
 802e90a:	dc37      	bgt.n	802e97c <_dtoa_r+0x99c>
 802e90c:	9b07      	ldr	r3, [sp, #28]
 802e90e:	2b02      	cmp	r3, #2
 802e910:	dd34      	ble.n	802e97c <_dtoa_r+0x99c>
 802e912:	9b04      	ldr	r3, [sp, #16]
 802e914:	9301      	str	r3, [sp, #4]
 802e916:	9b01      	ldr	r3, [sp, #4]
 802e918:	b963      	cbnz	r3, 802e934 <_dtoa_r+0x954>
 802e91a:	4631      	mov	r1, r6
 802e91c:	2205      	movs	r2, #5
 802e91e:	4620      	mov	r0, r4
 802e920:	f000 f9fe 	bl	802ed20 <__multadd>
 802e924:	4601      	mov	r1, r0
 802e926:	4606      	mov	r6, r0
 802e928:	4650      	mov	r0, sl
 802e92a:	f000 fc5d 	bl	802f1e8 <__mcmp>
 802e92e:	2800      	cmp	r0, #0
 802e930:	f73f adbb 	bgt.w	802e4aa <_dtoa_r+0x4ca>
 802e934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e936:	9d00      	ldr	r5, [sp, #0]
 802e938:	ea6f 0b03 	mvn.w	fp, r3
 802e93c:	f04f 0800 	mov.w	r8, #0
 802e940:	4631      	mov	r1, r6
 802e942:	4620      	mov	r0, r4
 802e944:	f000 f9ca 	bl	802ecdc <_Bfree>
 802e948:	2f00      	cmp	r7, #0
 802e94a:	f43f aeab 	beq.w	802e6a4 <_dtoa_r+0x6c4>
 802e94e:	f1b8 0f00 	cmp.w	r8, #0
 802e952:	d005      	beq.n	802e960 <_dtoa_r+0x980>
 802e954:	45b8      	cmp	r8, r7
 802e956:	d003      	beq.n	802e960 <_dtoa_r+0x980>
 802e958:	4641      	mov	r1, r8
 802e95a:	4620      	mov	r0, r4
 802e95c:	f000 f9be 	bl	802ecdc <_Bfree>
 802e960:	4639      	mov	r1, r7
 802e962:	4620      	mov	r0, r4
 802e964:	f000 f9ba 	bl	802ecdc <_Bfree>
 802e968:	e69c      	b.n	802e6a4 <_dtoa_r+0x6c4>
 802e96a:	2600      	movs	r6, #0
 802e96c:	4637      	mov	r7, r6
 802e96e:	e7e1      	b.n	802e934 <_dtoa_r+0x954>
 802e970:	46bb      	mov	fp, r7
 802e972:	4637      	mov	r7, r6
 802e974:	e599      	b.n	802e4aa <_dtoa_r+0x4ca>
 802e976:	bf00      	nop
 802e978:	40240000 	.word	0x40240000
 802e97c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e97e:	2b00      	cmp	r3, #0
 802e980:	f000 80c8 	beq.w	802eb14 <_dtoa_r+0xb34>
 802e984:	9b04      	ldr	r3, [sp, #16]
 802e986:	9301      	str	r3, [sp, #4]
 802e988:	2d00      	cmp	r5, #0
 802e98a:	dd05      	ble.n	802e998 <_dtoa_r+0x9b8>
 802e98c:	4639      	mov	r1, r7
 802e98e:	462a      	mov	r2, r5
 802e990:	4620      	mov	r0, r4
 802e992:	f000 fbbd 	bl	802f110 <__lshift>
 802e996:	4607      	mov	r7, r0
 802e998:	f1b8 0f00 	cmp.w	r8, #0
 802e99c:	d05b      	beq.n	802ea56 <_dtoa_r+0xa76>
 802e99e:	6879      	ldr	r1, [r7, #4]
 802e9a0:	4620      	mov	r0, r4
 802e9a2:	f000 f95b 	bl	802ec5c <_Balloc>
 802e9a6:	4605      	mov	r5, r0
 802e9a8:	b928      	cbnz	r0, 802e9b6 <_dtoa_r+0x9d6>
 802e9aa:	4b83      	ldr	r3, [pc, #524]	; (802ebb8 <_dtoa_r+0xbd8>)
 802e9ac:	4602      	mov	r2, r0
 802e9ae:	f240 21ef 	movw	r1, #751	; 0x2ef
 802e9b2:	f7ff bb2e 	b.w	802e012 <_dtoa_r+0x32>
 802e9b6:	693a      	ldr	r2, [r7, #16]
 802e9b8:	3202      	adds	r2, #2
 802e9ba:	0092      	lsls	r2, r2, #2
 802e9bc:	f107 010c 	add.w	r1, r7, #12
 802e9c0:	300c      	adds	r0, #12
 802e9c2:	f7ff fa68 	bl	802de96 <memcpy>
 802e9c6:	2201      	movs	r2, #1
 802e9c8:	4629      	mov	r1, r5
 802e9ca:	4620      	mov	r0, r4
 802e9cc:	f000 fba0 	bl	802f110 <__lshift>
 802e9d0:	9b00      	ldr	r3, [sp, #0]
 802e9d2:	3301      	adds	r3, #1
 802e9d4:	9304      	str	r3, [sp, #16]
 802e9d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e9da:	4413      	add	r3, r2
 802e9dc:	9308      	str	r3, [sp, #32]
 802e9de:	9b02      	ldr	r3, [sp, #8]
 802e9e0:	f003 0301 	and.w	r3, r3, #1
 802e9e4:	46b8      	mov	r8, r7
 802e9e6:	9306      	str	r3, [sp, #24]
 802e9e8:	4607      	mov	r7, r0
 802e9ea:	9b04      	ldr	r3, [sp, #16]
 802e9ec:	4631      	mov	r1, r6
 802e9ee:	3b01      	subs	r3, #1
 802e9f0:	4650      	mov	r0, sl
 802e9f2:	9301      	str	r3, [sp, #4]
 802e9f4:	f7ff fa6b 	bl	802dece <quorem>
 802e9f8:	4641      	mov	r1, r8
 802e9fa:	9002      	str	r0, [sp, #8]
 802e9fc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802ea00:	4650      	mov	r0, sl
 802ea02:	f000 fbf1 	bl	802f1e8 <__mcmp>
 802ea06:	463a      	mov	r2, r7
 802ea08:	9005      	str	r0, [sp, #20]
 802ea0a:	4631      	mov	r1, r6
 802ea0c:	4620      	mov	r0, r4
 802ea0e:	f000 fc07 	bl	802f220 <__mdiff>
 802ea12:	68c2      	ldr	r2, [r0, #12]
 802ea14:	4605      	mov	r5, r0
 802ea16:	bb02      	cbnz	r2, 802ea5a <_dtoa_r+0xa7a>
 802ea18:	4601      	mov	r1, r0
 802ea1a:	4650      	mov	r0, sl
 802ea1c:	f000 fbe4 	bl	802f1e8 <__mcmp>
 802ea20:	4602      	mov	r2, r0
 802ea22:	4629      	mov	r1, r5
 802ea24:	4620      	mov	r0, r4
 802ea26:	9209      	str	r2, [sp, #36]	; 0x24
 802ea28:	f000 f958 	bl	802ecdc <_Bfree>
 802ea2c:	9b07      	ldr	r3, [sp, #28]
 802ea2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802ea30:	9d04      	ldr	r5, [sp, #16]
 802ea32:	ea43 0102 	orr.w	r1, r3, r2
 802ea36:	9b06      	ldr	r3, [sp, #24]
 802ea38:	4319      	orrs	r1, r3
 802ea3a:	d110      	bne.n	802ea5e <_dtoa_r+0xa7e>
 802ea3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802ea40:	d029      	beq.n	802ea96 <_dtoa_r+0xab6>
 802ea42:	9b05      	ldr	r3, [sp, #20]
 802ea44:	2b00      	cmp	r3, #0
 802ea46:	dd02      	ble.n	802ea4e <_dtoa_r+0xa6e>
 802ea48:	9b02      	ldr	r3, [sp, #8]
 802ea4a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802ea4e:	9b01      	ldr	r3, [sp, #4]
 802ea50:	f883 9000 	strb.w	r9, [r3]
 802ea54:	e774      	b.n	802e940 <_dtoa_r+0x960>
 802ea56:	4638      	mov	r0, r7
 802ea58:	e7ba      	b.n	802e9d0 <_dtoa_r+0x9f0>
 802ea5a:	2201      	movs	r2, #1
 802ea5c:	e7e1      	b.n	802ea22 <_dtoa_r+0xa42>
 802ea5e:	9b05      	ldr	r3, [sp, #20]
 802ea60:	2b00      	cmp	r3, #0
 802ea62:	db04      	blt.n	802ea6e <_dtoa_r+0xa8e>
 802ea64:	9907      	ldr	r1, [sp, #28]
 802ea66:	430b      	orrs	r3, r1
 802ea68:	9906      	ldr	r1, [sp, #24]
 802ea6a:	430b      	orrs	r3, r1
 802ea6c:	d120      	bne.n	802eab0 <_dtoa_r+0xad0>
 802ea6e:	2a00      	cmp	r2, #0
 802ea70:	dded      	ble.n	802ea4e <_dtoa_r+0xa6e>
 802ea72:	4651      	mov	r1, sl
 802ea74:	2201      	movs	r2, #1
 802ea76:	4620      	mov	r0, r4
 802ea78:	f000 fb4a 	bl	802f110 <__lshift>
 802ea7c:	4631      	mov	r1, r6
 802ea7e:	4682      	mov	sl, r0
 802ea80:	f000 fbb2 	bl	802f1e8 <__mcmp>
 802ea84:	2800      	cmp	r0, #0
 802ea86:	dc03      	bgt.n	802ea90 <_dtoa_r+0xab0>
 802ea88:	d1e1      	bne.n	802ea4e <_dtoa_r+0xa6e>
 802ea8a:	f019 0f01 	tst.w	r9, #1
 802ea8e:	d0de      	beq.n	802ea4e <_dtoa_r+0xa6e>
 802ea90:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802ea94:	d1d8      	bne.n	802ea48 <_dtoa_r+0xa68>
 802ea96:	9a01      	ldr	r2, [sp, #4]
 802ea98:	2339      	movs	r3, #57	; 0x39
 802ea9a:	7013      	strb	r3, [r2, #0]
 802ea9c:	462b      	mov	r3, r5
 802ea9e:	461d      	mov	r5, r3
 802eaa0:	3b01      	subs	r3, #1
 802eaa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802eaa6:	2a39      	cmp	r2, #57	; 0x39
 802eaa8:	d06c      	beq.n	802eb84 <_dtoa_r+0xba4>
 802eaaa:	3201      	adds	r2, #1
 802eaac:	701a      	strb	r2, [r3, #0]
 802eaae:	e747      	b.n	802e940 <_dtoa_r+0x960>
 802eab0:	2a00      	cmp	r2, #0
 802eab2:	dd07      	ble.n	802eac4 <_dtoa_r+0xae4>
 802eab4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802eab8:	d0ed      	beq.n	802ea96 <_dtoa_r+0xab6>
 802eaba:	9a01      	ldr	r2, [sp, #4]
 802eabc:	f109 0301 	add.w	r3, r9, #1
 802eac0:	7013      	strb	r3, [r2, #0]
 802eac2:	e73d      	b.n	802e940 <_dtoa_r+0x960>
 802eac4:	9b04      	ldr	r3, [sp, #16]
 802eac6:	9a08      	ldr	r2, [sp, #32]
 802eac8:	f803 9c01 	strb.w	r9, [r3, #-1]
 802eacc:	4293      	cmp	r3, r2
 802eace:	d043      	beq.n	802eb58 <_dtoa_r+0xb78>
 802ead0:	4651      	mov	r1, sl
 802ead2:	2300      	movs	r3, #0
 802ead4:	220a      	movs	r2, #10
 802ead6:	4620      	mov	r0, r4
 802ead8:	f000 f922 	bl	802ed20 <__multadd>
 802eadc:	45b8      	cmp	r8, r7
 802eade:	4682      	mov	sl, r0
 802eae0:	f04f 0300 	mov.w	r3, #0
 802eae4:	f04f 020a 	mov.w	r2, #10
 802eae8:	4641      	mov	r1, r8
 802eaea:	4620      	mov	r0, r4
 802eaec:	d107      	bne.n	802eafe <_dtoa_r+0xb1e>
 802eaee:	f000 f917 	bl	802ed20 <__multadd>
 802eaf2:	4680      	mov	r8, r0
 802eaf4:	4607      	mov	r7, r0
 802eaf6:	9b04      	ldr	r3, [sp, #16]
 802eaf8:	3301      	adds	r3, #1
 802eafa:	9304      	str	r3, [sp, #16]
 802eafc:	e775      	b.n	802e9ea <_dtoa_r+0xa0a>
 802eafe:	f000 f90f 	bl	802ed20 <__multadd>
 802eb02:	4639      	mov	r1, r7
 802eb04:	4680      	mov	r8, r0
 802eb06:	2300      	movs	r3, #0
 802eb08:	220a      	movs	r2, #10
 802eb0a:	4620      	mov	r0, r4
 802eb0c:	f000 f908 	bl	802ed20 <__multadd>
 802eb10:	4607      	mov	r7, r0
 802eb12:	e7f0      	b.n	802eaf6 <_dtoa_r+0xb16>
 802eb14:	9b04      	ldr	r3, [sp, #16]
 802eb16:	9301      	str	r3, [sp, #4]
 802eb18:	9d00      	ldr	r5, [sp, #0]
 802eb1a:	4631      	mov	r1, r6
 802eb1c:	4650      	mov	r0, sl
 802eb1e:	f7ff f9d6 	bl	802dece <quorem>
 802eb22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802eb26:	9b00      	ldr	r3, [sp, #0]
 802eb28:	f805 9b01 	strb.w	r9, [r5], #1
 802eb2c:	1aea      	subs	r2, r5, r3
 802eb2e:	9b01      	ldr	r3, [sp, #4]
 802eb30:	4293      	cmp	r3, r2
 802eb32:	dd07      	ble.n	802eb44 <_dtoa_r+0xb64>
 802eb34:	4651      	mov	r1, sl
 802eb36:	2300      	movs	r3, #0
 802eb38:	220a      	movs	r2, #10
 802eb3a:	4620      	mov	r0, r4
 802eb3c:	f000 f8f0 	bl	802ed20 <__multadd>
 802eb40:	4682      	mov	sl, r0
 802eb42:	e7ea      	b.n	802eb1a <_dtoa_r+0xb3a>
 802eb44:	9b01      	ldr	r3, [sp, #4]
 802eb46:	2b00      	cmp	r3, #0
 802eb48:	bfc8      	it	gt
 802eb4a:	461d      	movgt	r5, r3
 802eb4c:	9b00      	ldr	r3, [sp, #0]
 802eb4e:	bfd8      	it	le
 802eb50:	2501      	movle	r5, #1
 802eb52:	441d      	add	r5, r3
 802eb54:	f04f 0800 	mov.w	r8, #0
 802eb58:	4651      	mov	r1, sl
 802eb5a:	2201      	movs	r2, #1
 802eb5c:	4620      	mov	r0, r4
 802eb5e:	f000 fad7 	bl	802f110 <__lshift>
 802eb62:	4631      	mov	r1, r6
 802eb64:	4682      	mov	sl, r0
 802eb66:	f000 fb3f 	bl	802f1e8 <__mcmp>
 802eb6a:	2800      	cmp	r0, #0
 802eb6c:	dc96      	bgt.n	802ea9c <_dtoa_r+0xabc>
 802eb6e:	d102      	bne.n	802eb76 <_dtoa_r+0xb96>
 802eb70:	f019 0f01 	tst.w	r9, #1
 802eb74:	d192      	bne.n	802ea9c <_dtoa_r+0xabc>
 802eb76:	462b      	mov	r3, r5
 802eb78:	461d      	mov	r5, r3
 802eb7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802eb7e:	2a30      	cmp	r2, #48	; 0x30
 802eb80:	d0fa      	beq.n	802eb78 <_dtoa_r+0xb98>
 802eb82:	e6dd      	b.n	802e940 <_dtoa_r+0x960>
 802eb84:	9a00      	ldr	r2, [sp, #0]
 802eb86:	429a      	cmp	r2, r3
 802eb88:	d189      	bne.n	802ea9e <_dtoa_r+0xabe>
 802eb8a:	f10b 0b01 	add.w	fp, fp, #1
 802eb8e:	2331      	movs	r3, #49	; 0x31
 802eb90:	e796      	b.n	802eac0 <_dtoa_r+0xae0>
 802eb92:	4b0a      	ldr	r3, [pc, #40]	; (802ebbc <_dtoa_r+0xbdc>)
 802eb94:	f7ff ba99 	b.w	802e0ca <_dtoa_r+0xea>
 802eb98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802eb9a:	2b00      	cmp	r3, #0
 802eb9c:	f47f aa6d 	bne.w	802e07a <_dtoa_r+0x9a>
 802eba0:	4b07      	ldr	r3, [pc, #28]	; (802ebc0 <_dtoa_r+0xbe0>)
 802eba2:	f7ff ba92 	b.w	802e0ca <_dtoa_r+0xea>
 802eba6:	9b01      	ldr	r3, [sp, #4]
 802eba8:	2b00      	cmp	r3, #0
 802ebaa:	dcb5      	bgt.n	802eb18 <_dtoa_r+0xb38>
 802ebac:	9b07      	ldr	r3, [sp, #28]
 802ebae:	2b02      	cmp	r3, #2
 802ebb0:	f73f aeb1 	bgt.w	802e916 <_dtoa_r+0x936>
 802ebb4:	e7b0      	b.n	802eb18 <_dtoa_r+0xb38>
 802ebb6:	bf00      	nop
 802ebb8:	08034e81 	.word	0x08034e81
 802ebbc:	08035168 	.word	0x08035168
 802ebc0:	08034e1c 	.word	0x08034e1c

0802ebc4 <_free_r>:
 802ebc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802ebc6:	2900      	cmp	r1, #0
 802ebc8:	d044      	beq.n	802ec54 <_free_r+0x90>
 802ebca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802ebce:	9001      	str	r0, [sp, #4]
 802ebd0:	2b00      	cmp	r3, #0
 802ebd2:	f1a1 0404 	sub.w	r4, r1, #4
 802ebd6:	bfb8      	it	lt
 802ebd8:	18e4      	addlt	r4, r4, r3
 802ebda:	f7fd fe9b 	bl	802c914 <__malloc_lock>
 802ebde:	4a1e      	ldr	r2, [pc, #120]	; (802ec58 <_free_r+0x94>)
 802ebe0:	9801      	ldr	r0, [sp, #4]
 802ebe2:	6813      	ldr	r3, [r2, #0]
 802ebe4:	b933      	cbnz	r3, 802ebf4 <_free_r+0x30>
 802ebe6:	6063      	str	r3, [r4, #4]
 802ebe8:	6014      	str	r4, [r2, #0]
 802ebea:	b003      	add	sp, #12
 802ebec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ebf0:	f7fd be96 	b.w	802c920 <__malloc_unlock>
 802ebf4:	42a3      	cmp	r3, r4
 802ebf6:	d908      	bls.n	802ec0a <_free_r+0x46>
 802ebf8:	6825      	ldr	r5, [r4, #0]
 802ebfa:	1961      	adds	r1, r4, r5
 802ebfc:	428b      	cmp	r3, r1
 802ebfe:	bf01      	itttt	eq
 802ec00:	6819      	ldreq	r1, [r3, #0]
 802ec02:	685b      	ldreq	r3, [r3, #4]
 802ec04:	1949      	addeq	r1, r1, r5
 802ec06:	6021      	streq	r1, [r4, #0]
 802ec08:	e7ed      	b.n	802ebe6 <_free_r+0x22>
 802ec0a:	461a      	mov	r2, r3
 802ec0c:	685b      	ldr	r3, [r3, #4]
 802ec0e:	b10b      	cbz	r3, 802ec14 <_free_r+0x50>
 802ec10:	42a3      	cmp	r3, r4
 802ec12:	d9fa      	bls.n	802ec0a <_free_r+0x46>
 802ec14:	6811      	ldr	r1, [r2, #0]
 802ec16:	1855      	adds	r5, r2, r1
 802ec18:	42a5      	cmp	r5, r4
 802ec1a:	d10b      	bne.n	802ec34 <_free_r+0x70>
 802ec1c:	6824      	ldr	r4, [r4, #0]
 802ec1e:	4421      	add	r1, r4
 802ec20:	1854      	adds	r4, r2, r1
 802ec22:	42a3      	cmp	r3, r4
 802ec24:	6011      	str	r1, [r2, #0]
 802ec26:	d1e0      	bne.n	802ebea <_free_r+0x26>
 802ec28:	681c      	ldr	r4, [r3, #0]
 802ec2a:	685b      	ldr	r3, [r3, #4]
 802ec2c:	6053      	str	r3, [r2, #4]
 802ec2e:	440c      	add	r4, r1
 802ec30:	6014      	str	r4, [r2, #0]
 802ec32:	e7da      	b.n	802ebea <_free_r+0x26>
 802ec34:	d902      	bls.n	802ec3c <_free_r+0x78>
 802ec36:	230c      	movs	r3, #12
 802ec38:	6003      	str	r3, [r0, #0]
 802ec3a:	e7d6      	b.n	802ebea <_free_r+0x26>
 802ec3c:	6825      	ldr	r5, [r4, #0]
 802ec3e:	1961      	adds	r1, r4, r5
 802ec40:	428b      	cmp	r3, r1
 802ec42:	bf04      	itt	eq
 802ec44:	6819      	ldreq	r1, [r3, #0]
 802ec46:	685b      	ldreq	r3, [r3, #4]
 802ec48:	6063      	str	r3, [r4, #4]
 802ec4a:	bf04      	itt	eq
 802ec4c:	1949      	addeq	r1, r1, r5
 802ec4e:	6021      	streq	r1, [r4, #0]
 802ec50:	6054      	str	r4, [r2, #4]
 802ec52:	e7ca      	b.n	802ebea <_free_r+0x26>
 802ec54:	b003      	add	sp, #12
 802ec56:	bd30      	pop	{r4, r5, pc}
 802ec58:	2000d9c8 	.word	0x2000d9c8

0802ec5c <_Balloc>:
 802ec5c:	b570      	push	{r4, r5, r6, lr}
 802ec5e:	69c6      	ldr	r6, [r0, #28]
 802ec60:	4604      	mov	r4, r0
 802ec62:	460d      	mov	r5, r1
 802ec64:	b976      	cbnz	r6, 802ec84 <_Balloc+0x28>
 802ec66:	2010      	movs	r0, #16
 802ec68:	f7fd fda4 	bl	802c7b4 <malloc>
 802ec6c:	4602      	mov	r2, r0
 802ec6e:	61e0      	str	r0, [r4, #28]
 802ec70:	b920      	cbnz	r0, 802ec7c <_Balloc+0x20>
 802ec72:	4b18      	ldr	r3, [pc, #96]	; (802ecd4 <_Balloc+0x78>)
 802ec74:	4818      	ldr	r0, [pc, #96]	; (802ecd8 <_Balloc+0x7c>)
 802ec76:	216b      	movs	r1, #107	; 0x6b
 802ec78:	f7fd fd68 	bl	802c74c <__assert_func>
 802ec7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ec80:	6006      	str	r6, [r0, #0]
 802ec82:	60c6      	str	r6, [r0, #12]
 802ec84:	69e6      	ldr	r6, [r4, #28]
 802ec86:	68f3      	ldr	r3, [r6, #12]
 802ec88:	b183      	cbz	r3, 802ecac <_Balloc+0x50>
 802ec8a:	69e3      	ldr	r3, [r4, #28]
 802ec8c:	68db      	ldr	r3, [r3, #12]
 802ec8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802ec92:	b9b8      	cbnz	r0, 802ecc4 <_Balloc+0x68>
 802ec94:	2101      	movs	r1, #1
 802ec96:	fa01 f605 	lsl.w	r6, r1, r5
 802ec9a:	1d72      	adds	r2, r6, #5
 802ec9c:	0092      	lsls	r2, r2, #2
 802ec9e:	4620      	mov	r0, r4
 802eca0:	f7fd fd72 	bl	802c788 <_calloc_r>
 802eca4:	b160      	cbz	r0, 802ecc0 <_Balloc+0x64>
 802eca6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802ecaa:	e00e      	b.n	802ecca <_Balloc+0x6e>
 802ecac:	2221      	movs	r2, #33	; 0x21
 802ecae:	2104      	movs	r1, #4
 802ecb0:	4620      	mov	r0, r4
 802ecb2:	f7fd fd69 	bl	802c788 <_calloc_r>
 802ecb6:	69e3      	ldr	r3, [r4, #28]
 802ecb8:	60f0      	str	r0, [r6, #12]
 802ecba:	68db      	ldr	r3, [r3, #12]
 802ecbc:	2b00      	cmp	r3, #0
 802ecbe:	d1e4      	bne.n	802ec8a <_Balloc+0x2e>
 802ecc0:	2000      	movs	r0, #0
 802ecc2:	bd70      	pop	{r4, r5, r6, pc}
 802ecc4:	6802      	ldr	r2, [r0, #0]
 802ecc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802ecca:	2300      	movs	r3, #0
 802eccc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802ecd0:	e7f7      	b.n	802ecc2 <_Balloc+0x66>
 802ecd2:	bf00      	nop
 802ecd4:	08034dab 	.word	0x08034dab
 802ecd8:	08034e92 	.word	0x08034e92

0802ecdc <_Bfree>:
 802ecdc:	b570      	push	{r4, r5, r6, lr}
 802ecde:	69c6      	ldr	r6, [r0, #28]
 802ece0:	4605      	mov	r5, r0
 802ece2:	460c      	mov	r4, r1
 802ece4:	b976      	cbnz	r6, 802ed04 <_Bfree+0x28>
 802ece6:	2010      	movs	r0, #16
 802ece8:	f7fd fd64 	bl	802c7b4 <malloc>
 802ecec:	4602      	mov	r2, r0
 802ecee:	61e8      	str	r0, [r5, #28]
 802ecf0:	b920      	cbnz	r0, 802ecfc <_Bfree+0x20>
 802ecf2:	4b09      	ldr	r3, [pc, #36]	; (802ed18 <_Bfree+0x3c>)
 802ecf4:	4809      	ldr	r0, [pc, #36]	; (802ed1c <_Bfree+0x40>)
 802ecf6:	218f      	movs	r1, #143	; 0x8f
 802ecf8:	f7fd fd28 	bl	802c74c <__assert_func>
 802ecfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ed00:	6006      	str	r6, [r0, #0]
 802ed02:	60c6      	str	r6, [r0, #12]
 802ed04:	b13c      	cbz	r4, 802ed16 <_Bfree+0x3a>
 802ed06:	69eb      	ldr	r3, [r5, #28]
 802ed08:	6862      	ldr	r2, [r4, #4]
 802ed0a:	68db      	ldr	r3, [r3, #12]
 802ed0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802ed10:	6021      	str	r1, [r4, #0]
 802ed12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802ed16:	bd70      	pop	{r4, r5, r6, pc}
 802ed18:	08034dab 	.word	0x08034dab
 802ed1c:	08034e92 	.word	0x08034e92

0802ed20 <__multadd>:
 802ed20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ed24:	690d      	ldr	r5, [r1, #16]
 802ed26:	4607      	mov	r7, r0
 802ed28:	460c      	mov	r4, r1
 802ed2a:	461e      	mov	r6, r3
 802ed2c:	f101 0c14 	add.w	ip, r1, #20
 802ed30:	2000      	movs	r0, #0
 802ed32:	f8dc 3000 	ldr.w	r3, [ip]
 802ed36:	b299      	uxth	r1, r3
 802ed38:	fb02 6101 	mla	r1, r2, r1, r6
 802ed3c:	0c1e      	lsrs	r6, r3, #16
 802ed3e:	0c0b      	lsrs	r3, r1, #16
 802ed40:	fb02 3306 	mla	r3, r2, r6, r3
 802ed44:	b289      	uxth	r1, r1
 802ed46:	3001      	adds	r0, #1
 802ed48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802ed4c:	4285      	cmp	r5, r0
 802ed4e:	f84c 1b04 	str.w	r1, [ip], #4
 802ed52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802ed56:	dcec      	bgt.n	802ed32 <__multadd+0x12>
 802ed58:	b30e      	cbz	r6, 802ed9e <__multadd+0x7e>
 802ed5a:	68a3      	ldr	r3, [r4, #8]
 802ed5c:	42ab      	cmp	r3, r5
 802ed5e:	dc19      	bgt.n	802ed94 <__multadd+0x74>
 802ed60:	6861      	ldr	r1, [r4, #4]
 802ed62:	4638      	mov	r0, r7
 802ed64:	3101      	adds	r1, #1
 802ed66:	f7ff ff79 	bl	802ec5c <_Balloc>
 802ed6a:	4680      	mov	r8, r0
 802ed6c:	b928      	cbnz	r0, 802ed7a <__multadd+0x5a>
 802ed6e:	4602      	mov	r2, r0
 802ed70:	4b0c      	ldr	r3, [pc, #48]	; (802eda4 <__multadd+0x84>)
 802ed72:	480d      	ldr	r0, [pc, #52]	; (802eda8 <__multadd+0x88>)
 802ed74:	21ba      	movs	r1, #186	; 0xba
 802ed76:	f7fd fce9 	bl	802c74c <__assert_func>
 802ed7a:	6922      	ldr	r2, [r4, #16]
 802ed7c:	3202      	adds	r2, #2
 802ed7e:	f104 010c 	add.w	r1, r4, #12
 802ed82:	0092      	lsls	r2, r2, #2
 802ed84:	300c      	adds	r0, #12
 802ed86:	f7ff f886 	bl	802de96 <memcpy>
 802ed8a:	4621      	mov	r1, r4
 802ed8c:	4638      	mov	r0, r7
 802ed8e:	f7ff ffa5 	bl	802ecdc <_Bfree>
 802ed92:	4644      	mov	r4, r8
 802ed94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802ed98:	3501      	adds	r5, #1
 802ed9a:	615e      	str	r6, [r3, #20]
 802ed9c:	6125      	str	r5, [r4, #16]
 802ed9e:	4620      	mov	r0, r4
 802eda0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802eda4:	08034e81 	.word	0x08034e81
 802eda8:	08034e92 	.word	0x08034e92

0802edac <__s2b>:
 802edac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802edb0:	460c      	mov	r4, r1
 802edb2:	4615      	mov	r5, r2
 802edb4:	461f      	mov	r7, r3
 802edb6:	2209      	movs	r2, #9
 802edb8:	3308      	adds	r3, #8
 802edba:	4606      	mov	r6, r0
 802edbc:	fb93 f3f2 	sdiv	r3, r3, r2
 802edc0:	2100      	movs	r1, #0
 802edc2:	2201      	movs	r2, #1
 802edc4:	429a      	cmp	r2, r3
 802edc6:	db09      	blt.n	802eddc <__s2b+0x30>
 802edc8:	4630      	mov	r0, r6
 802edca:	f7ff ff47 	bl	802ec5c <_Balloc>
 802edce:	b940      	cbnz	r0, 802ede2 <__s2b+0x36>
 802edd0:	4602      	mov	r2, r0
 802edd2:	4b19      	ldr	r3, [pc, #100]	; (802ee38 <__s2b+0x8c>)
 802edd4:	4819      	ldr	r0, [pc, #100]	; (802ee3c <__s2b+0x90>)
 802edd6:	21d3      	movs	r1, #211	; 0xd3
 802edd8:	f7fd fcb8 	bl	802c74c <__assert_func>
 802eddc:	0052      	lsls	r2, r2, #1
 802edde:	3101      	adds	r1, #1
 802ede0:	e7f0      	b.n	802edc4 <__s2b+0x18>
 802ede2:	9b08      	ldr	r3, [sp, #32]
 802ede4:	6143      	str	r3, [r0, #20]
 802ede6:	2d09      	cmp	r5, #9
 802ede8:	f04f 0301 	mov.w	r3, #1
 802edec:	6103      	str	r3, [r0, #16]
 802edee:	dd16      	ble.n	802ee1e <__s2b+0x72>
 802edf0:	f104 0909 	add.w	r9, r4, #9
 802edf4:	46c8      	mov	r8, r9
 802edf6:	442c      	add	r4, r5
 802edf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 802edfc:	4601      	mov	r1, r0
 802edfe:	3b30      	subs	r3, #48	; 0x30
 802ee00:	220a      	movs	r2, #10
 802ee02:	4630      	mov	r0, r6
 802ee04:	f7ff ff8c 	bl	802ed20 <__multadd>
 802ee08:	45a0      	cmp	r8, r4
 802ee0a:	d1f5      	bne.n	802edf8 <__s2b+0x4c>
 802ee0c:	f1a5 0408 	sub.w	r4, r5, #8
 802ee10:	444c      	add	r4, r9
 802ee12:	1b2d      	subs	r5, r5, r4
 802ee14:	1963      	adds	r3, r4, r5
 802ee16:	42bb      	cmp	r3, r7
 802ee18:	db04      	blt.n	802ee24 <__s2b+0x78>
 802ee1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ee1e:	340a      	adds	r4, #10
 802ee20:	2509      	movs	r5, #9
 802ee22:	e7f6      	b.n	802ee12 <__s2b+0x66>
 802ee24:	f814 3b01 	ldrb.w	r3, [r4], #1
 802ee28:	4601      	mov	r1, r0
 802ee2a:	3b30      	subs	r3, #48	; 0x30
 802ee2c:	220a      	movs	r2, #10
 802ee2e:	4630      	mov	r0, r6
 802ee30:	f7ff ff76 	bl	802ed20 <__multadd>
 802ee34:	e7ee      	b.n	802ee14 <__s2b+0x68>
 802ee36:	bf00      	nop
 802ee38:	08034e81 	.word	0x08034e81
 802ee3c:	08034e92 	.word	0x08034e92

0802ee40 <__hi0bits>:
 802ee40:	0c03      	lsrs	r3, r0, #16
 802ee42:	041b      	lsls	r3, r3, #16
 802ee44:	b9d3      	cbnz	r3, 802ee7c <__hi0bits+0x3c>
 802ee46:	0400      	lsls	r0, r0, #16
 802ee48:	2310      	movs	r3, #16
 802ee4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802ee4e:	bf04      	itt	eq
 802ee50:	0200      	lsleq	r0, r0, #8
 802ee52:	3308      	addeq	r3, #8
 802ee54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802ee58:	bf04      	itt	eq
 802ee5a:	0100      	lsleq	r0, r0, #4
 802ee5c:	3304      	addeq	r3, #4
 802ee5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802ee62:	bf04      	itt	eq
 802ee64:	0080      	lsleq	r0, r0, #2
 802ee66:	3302      	addeq	r3, #2
 802ee68:	2800      	cmp	r0, #0
 802ee6a:	db05      	blt.n	802ee78 <__hi0bits+0x38>
 802ee6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802ee70:	f103 0301 	add.w	r3, r3, #1
 802ee74:	bf08      	it	eq
 802ee76:	2320      	moveq	r3, #32
 802ee78:	4618      	mov	r0, r3
 802ee7a:	4770      	bx	lr
 802ee7c:	2300      	movs	r3, #0
 802ee7e:	e7e4      	b.n	802ee4a <__hi0bits+0xa>

0802ee80 <__lo0bits>:
 802ee80:	6803      	ldr	r3, [r0, #0]
 802ee82:	f013 0207 	ands.w	r2, r3, #7
 802ee86:	d00c      	beq.n	802eea2 <__lo0bits+0x22>
 802ee88:	07d9      	lsls	r1, r3, #31
 802ee8a:	d422      	bmi.n	802eed2 <__lo0bits+0x52>
 802ee8c:	079a      	lsls	r2, r3, #30
 802ee8e:	bf49      	itett	mi
 802ee90:	085b      	lsrmi	r3, r3, #1
 802ee92:	089b      	lsrpl	r3, r3, #2
 802ee94:	6003      	strmi	r3, [r0, #0]
 802ee96:	2201      	movmi	r2, #1
 802ee98:	bf5c      	itt	pl
 802ee9a:	6003      	strpl	r3, [r0, #0]
 802ee9c:	2202      	movpl	r2, #2
 802ee9e:	4610      	mov	r0, r2
 802eea0:	4770      	bx	lr
 802eea2:	b299      	uxth	r1, r3
 802eea4:	b909      	cbnz	r1, 802eeaa <__lo0bits+0x2a>
 802eea6:	0c1b      	lsrs	r3, r3, #16
 802eea8:	2210      	movs	r2, #16
 802eeaa:	b2d9      	uxtb	r1, r3
 802eeac:	b909      	cbnz	r1, 802eeb2 <__lo0bits+0x32>
 802eeae:	3208      	adds	r2, #8
 802eeb0:	0a1b      	lsrs	r3, r3, #8
 802eeb2:	0719      	lsls	r1, r3, #28
 802eeb4:	bf04      	itt	eq
 802eeb6:	091b      	lsreq	r3, r3, #4
 802eeb8:	3204      	addeq	r2, #4
 802eeba:	0799      	lsls	r1, r3, #30
 802eebc:	bf04      	itt	eq
 802eebe:	089b      	lsreq	r3, r3, #2
 802eec0:	3202      	addeq	r2, #2
 802eec2:	07d9      	lsls	r1, r3, #31
 802eec4:	d403      	bmi.n	802eece <__lo0bits+0x4e>
 802eec6:	085b      	lsrs	r3, r3, #1
 802eec8:	f102 0201 	add.w	r2, r2, #1
 802eecc:	d003      	beq.n	802eed6 <__lo0bits+0x56>
 802eece:	6003      	str	r3, [r0, #0]
 802eed0:	e7e5      	b.n	802ee9e <__lo0bits+0x1e>
 802eed2:	2200      	movs	r2, #0
 802eed4:	e7e3      	b.n	802ee9e <__lo0bits+0x1e>
 802eed6:	2220      	movs	r2, #32
 802eed8:	e7e1      	b.n	802ee9e <__lo0bits+0x1e>
	...

0802eedc <__i2b>:
 802eedc:	b510      	push	{r4, lr}
 802eede:	460c      	mov	r4, r1
 802eee0:	2101      	movs	r1, #1
 802eee2:	f7ff febb 	bl	802ec5c <_Balloc>
 802eee6:	4602      	mov	r2, r0
 802eee8:	b928      	cbnz	r0, 802eef6 <__i2b+0x1a>
 802eeea:	4b05      	ldr	r3, [pc, #20]	; (802ef00 <__i2b+0x24>)
 802eeec:	4805      	ldr	r0, [pc, #20]	; (802ef04 <__i2b+0x28>)
 802eeee:	f240 1145 	movw	r1, #325	; 0x145
 802eef2:	f7fd fc2b 	bl	802c74c <__assert_func>
 802eef6:	2301      	movs	r3, #1
 802eef8:	6144      	str	r4, [r0, #20]
 802eefa:	6103      	str	r3, [r0, #16]
 802eefc:	bd10      	pop	{r4, pc}
 802eefe:	bf00      	nop
 802ef00:	08034e81 	.word	0x08034e81
 802ef04:	08034e92 	.word	0x08034e92

0802ef08 <__multiply>:
 802ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ef0c:	4691      	mov	r9, r2
 802ef0e:	690a      	ldr	r2, [r1, #16]
 802ef10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802ef14:	429a      	cmp	r2, r3
 802ef16:	bfb8      	it	lt
 802ef18:	460b      	movlt	r3, r1
 802ef1a:	460c      	mov	r4, r1
 802ef1c:	bfbc      	itt	lt
 802ef1e:	464c      	movlt	r4, r9
 802ef20:	4699      	movlt	r9, r3
 802ef22:	6927      	ldr	r7, [r4, #16]
 802ef24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802ef28:	68a3      	ldr	r3, [r4, #8]
 802ef2a:	6861      	ldr	r1, [r4, #4]
 802ef2c:	eb07 060a 	add.w	r6, r7, sl
 802ef30:	42b3      	cmp	r3, r6
 802ef32:	b085      	sub	sp, #20
 802ef34:	bfb8      	it	lt
 802ef36:	3101      	addlt	r1, #1
 802ef38:	f7ff fe90 	bl	802ec5c <_Balloc>
 802ef3c:	b930      	cbnz	r0, 802ef4c <__multiply+0x44>
 802ef3e:	4602      	mov	r2, r0
 802ef40:	4b44      	ldr	r3, [pc, #272]	; (802f054 <__multiply+0x14c>)
 802ef42:	4845      	ldr	r0, [pc, #276]	; (802f058 <__multiply+0x150>)
 802ef44:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802ef48:	f7fd fc00 	bl	802c74c <__assert_func>
 802ef4c:	f100 0514 	add.w	r5, r0, #20
 802ef50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802ef54:	462b      	mov	r3, r5
 802ef56:	2200      	movs	r2, #0
 802ef58:	4543      	cmp	r3, r8
 802ef5a:	d321      	bcc.n	802efa0 <__multiply+0x98>
 802ef5c:	f104 0314 	add.w	r3, r4, #20
 802ef60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802ef64:	f109 0314 	add.w	r3, r9, #20
 802ef68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802ef6c:	9202      	str	r2, [sp, #8]
 802ef6e:	1b3a      	subs	r2, r7, r4
 802ef70:	3a15      	subs	r2, #21
 802ef72:	f022 0203 	bic.w	r2, r2, #3
 802ef76:	3204      	adds	r2, #4
 802ef78:	f104 0115 	add.w	r1, r4, #21
 802ef7c:	428f      	cmp	r7, r1
 802ef7e:	bf38      	it	cc
 802ef80:	2204      	movcc	r2, #4
 802ef82:	9201      	str	r2, [sp, #4]
 802ef84:	9a02      	ldr	r2, [sp, #8]
 802ef86:	9303      	str	r3, [sp, #12]
 802ef88:	429a      	cmp	r2, r3
 802ef8a:	d80c      	bhi.n	802efa6 <__multiply+0x9e>
 802ef8c:	2e00      	cmp	r6, #0
 802ef8e:	dd03      	ble.n	802ef98 <__multiply+0x90>
 802ef90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802ef94:	2b00      	cmp	r3, #0
 802ef96:	d05b      	beq.n	802f050 <__multiply+0x148>
 802ef98:	6106      	str	r6, [r0, #16]
 802ef9a:	b005      	add	sp, #20
 802ef9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802efa0:	f843 2b04 	str.w	r2, [r3], #4
 802efa4:	e7d8      	b.n	802ef58 <__multiply+0x50>
 802efa6:	f8b3 a000 	ldrh.w	sl, [r3]
 802efaa:	f1ba 0f00 	cmp.w	sl, #0
 802efae:	d024      	beq.n	802effa <__multiply+0xf2>
 802efb0:	f104 0e14 	add.w	lr, r4, #20
 802efb4:	46a9      	mov	r9, r5
 802efb6:	f04f 0c00 	mov.w	ip, #0
 802efba:	f85e 2b04 	ldr.w	r2, [lr], #4
 802efbe:	f8d9 1000 	ldr.w	r1, [r9]
 802efc2:	fa1f fb82 	uxth.w	fp, r2
 802efc6:	b289      	uxth	r1, r1
 802efc8:	fb0a 110b 	mla	r1, sl, fp, r1
 802efcc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802efd0:	f8d9 2000 	ldr.w	r2, [r9]
 802efd4:	4461      	add	r1, ip
 802efd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802efda:	fb0a c20b 	mla	r2, sl, fp, ip
 802efde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802efe2:	b289      	uxth	r1, r1
 802efe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802efe8:	4577      	cmp	r7, lr
 802efea:	f849 1b04 	str.w	r1, [r9], #4
 802efee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802eff2:	d8e2      	bhi.n	802efba <__multiply+0xb2>
 802eff4:	9a01      	ldr	r2, [sp, #4]
 802eff6:	f845 c002 	str.w	ip, [r5, r2]
 802effa:	9a03      	ldr	r2, [sp, #12]
 802effc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802f000:	3304      	adds	r3, #4
 802f002:	f1b9 0f00 	cmp.w	r9, #0
 802f006:	d021      	beq.n	802f04c <__multiply+0x144>
 802f008:	6829      	ldr	r1, [r5, #0]
 802f00a:	f104 0c14 	add.w	ip, r4, #20
 802f00e:	46ae      	mov	lr, r5
 802f010:	f04f 0a00 	mov.w	sl, #0
 802f014:	f8bc b000 	ldrh.w	fp, [ip]
 802f018:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802f01c:	fb09 220b 	mla	r2, r9, fp, r2
 802f020:	4452      	add	r2, sl
 802f022:	b289      	uxth	r1, r1
 802f024:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802f028:	f84e 1b04 	str.w	r1, [lr], #4
 802f02c:	f85c 1b04 	ldr.w	r1, [ip], #4
 802f030:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802f034:	f8be 1000 	ldrh.w	r1, [lr]
 802f038:	fb09 110a 	mla	r1, r9, sl, r1
 802f03c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802f040:	4567      	cmp	r7, ip
 802f042:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802f046:	d8e5      	bhi.n	802f014 <__multiply+0x10c>
 802f048:	9a01      	ldr	r2, [sp, #4]
 802f04a:	50a9      	str	r1, [r5, r2]
 802f04c:	3504      	adds	r5, #4
 802f04e:	e799      	b.n	802ef84 <__multiply+0x7c>
 802f050:	3e01      	subs	r6, #1
 802f052:	e79b      	b.n	802ef8c <__multiply+0x84>
 802f054:	08034e81 	.word	0x08034e81
 802f058:	08034e92 	.word	0x08034e92

0802f05c <__pow5mult>:
 802f05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f060:	4615      	mov	r5, r2
 802f062:	f012 0203 	ands.w	r2, r2, #3
 802f066:	4606      	mov	r6, r0
 802f068:	460f      	mov	r7, r1
 802f06a:	d007      	beq.n	802f07c <__pow5mult+0x20>
 802f06c:	4c25      	ldr	r4, [pc, #148]	; (802f104 <__pow5mult+0xa8>)
 802f06e:	3a01      	subs	r2, #1
 802f070:	2300      	movs	r3, #0
 802f072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802f076:	f7ff fe53 	bl	802ed20 <__multadd>
 802f07a:	4607      	mov	r7, r0
 802f07c:	10ad      	asrs	r5, r5, #2
 802f07e:	d03d      	beq.n	802f0fc <__pow5mult+0xa0>
 802f080:	69f4      	ldr	r4, [r6, #28]
 802f082:	b97c      	cbnz	r4, 802f0a4 <__pow5mult+0x48>
 802f084:	2010      	movs	r0, #16
 802f086:	f7fd fb95 	bl	802c7b4 <malloc>
 802f08a:	4602      	mov	r2, r0
 802f08c:	61f0      	str	r0, [r6, #28]
 802f08e:	b928      	cbnz	r0, 802f09c <__pow5mult+0x40>
 802f090:	4b1d      	ldr	r3, [pc, #116]	; (802f108 <__pow5mult+0xac>)
 802f092:	481e      	ldr	r0, [pc, #120]	; (802f10c <__pow5mult+0xb0>)
 802f094:	f240 11b3 	movw	r1, #435	; 0x1b3
 802f098:	f7fd fb58 	bl	802c74c <__assert_func>
 802f09c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802f0a0:	6004      	str	r4, [r0, #0]
 802f0a2:	60c4      	str	r4, [r0, #12]
 802f0a4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802f0a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802f0ac:	b94c      	cbnz	r4, 802f0c2 <__pow5mult+0x66>
 802f0ae:	f240 2171 	movw	r1, #625	; 0x271
 802f0b2:	4630      	mov	r0, r6
 802f0b4:	f7ff ff12 	bl	802eedc <__i2b>
 802f0b8:	2300      	movs	r3, #0
 802f0ba:	f8c8 0008 	str.w	r0, [r8, #8]
 802f0be:	4604      	mov	r4, r0
 802f0c0:	6003      	str	r3, [r0, #0]
 802f0c2:	f04f 0900 	mov.w	r9, #0
 802f0c6:	07eb      	lsls	r3, r5, #31
 802f0c8:	d50a      	bpl.n	802f0e0 <__pow5mult+0x84>
 802f0ca:	4639      	mov	r1, r7
 802f0cc:	4622      	mov	r2, r4
 802f0ce:	4630      	mov	r0, r6
 802f0d0:	f7ff ff1a 	bl	802ef08 <__multiply>
 802f0d4:	4639      	mov	r1, r7
 802f0d6:	4680      	mov	r8, r0
 802f0d8:	4630      	mov	r0, r6
 802f0da:	f7ff fdff 	bl	802ecdc <_Bfree>
 802f0de:	4647      	mov	r7, r8
 802f0e0:	106d      	asrs	r5, r5, #1
 802f0e2:	d00b      	beq.n	802f0fc <__pow5mult+0xa0>
 802f0e4:	6820      	ldr	r0, [r4, #0]
 802f0e6:	b938      	cbnz	r0, 802f0f8 <__pow5mult+0x9c>
 802f0e8:	4622      	mov	r2, r4
 802f0ea:	4621      	mov	r1, r4
 802f0ec:	4630      	mov	r0, r6
 802f0ee:	f7ff ff0b 	bl	802ef08 <__multiply>
 802f0f2:	6020      	str	r0, [r4, #0]
 802f0f4:	f8c0 9000 	str.w	r9, [r0]
 802f0f8:	4604      	mov	r4, r0
 802f0fa:	e7e4      	b.n	802f0c6 <__pow5mult+0x6a>
 802f0fc:	4638      	mov	r0, r7
 802f0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f102:	bf00      	nop
 802f104:	08034fe0 	.word	0x08034fe0
 802f108:	08034dab 	.word	0x08034dab
 802f10c:	08034e92 	.word	0x08034e92

0802f110 <__lshift>:
 802f110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f114:	460c      	mov	r4, r1
 802f116:	6849      	ldr	r1, [r1, #4]
 802f118:	6923      	ldr	r3, [r4, #16]
 802f11a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802f11e:	68a3      	ldr	r3, [r4, #8]
 802f120:	4607      	mov	r7, r0
 802f122:	4691      	mov	r9, r2
 802f124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802f128:	f108 0601 	add.w	r6, r8, #1
 802f12c:	42b3      	cmp	r3, r6
 802f12e:	db0b      	blt.n	802f148 <__lshift+0x38>
 802f130:	4638      	mov	r0, r7
 802f132:	f7ff fd93 	bl	802ec5c <_Balloc>
 802f136:	4605      	mov	r5, r0
 802f138:	b948      	cbnz	r0, 802f14e <__lshift+0x3e>
 802f13a:	4602      	mov	r2, r0
 802f13c:	4b28      	ldr	r3, [pc, #160]	; (802f1e0 <__lshift+0xd0>)
 802f13e:	4829      	ldr	r0, [pc, #164]	; (802f1e4 <__lshift+0xd4>)
 802f140:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802f144:	f7fd fb02 	bl	802c74c <__assert_func>
 802f148:	3101      	adds	r1, #1
 802f14a:	005b      	lsls	r3, r3, #1
 802f14c:	e7ee      	b.n	802f12c <__lshift+0x1c>
 802f14e:	2300      	movs	r3, #0
 802f150:	f100 0114 	add.w	r1, r0, #20
 802f154:	f100 0210 	add.w	r2, r0, #16
 802f158:	4618      	mov	r0, r3
 802f15a:	4553      	cmp	r3, sl
 802f15c:	db33      	blt.n	802f1c6 <__lshift+0xb6>
 802f15e:	6920      	ldr	r0, [r4, #16]
 802f160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802f164:	f104 0314 	add.w	r3, r4, #20
 802f168:	f019 091f 	ands.w	r9, r9, #31
 802f16c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802f170:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802f174:	d02b      	beq.n	802f1ce <__lshift+0xbe>
 802f176:	f1c9 0e20 	rsb	lr, r9, #32
 802f17a:	468a      	mov	sl, r1
 802f17c:	2200      	movs	r2, #0
 802f17e:	6818      	ldr	r0, [r3, #0]
 802f180:	fa00 f009 	lsl.w	r0, r0, r9
 802f184:	4310      	orrs	r0, r2
 802f186:	f84a 0b04 	str.w	r0, [sl], #4
 802f18a:	f853 2b04 	ldr.w	r2, [r3], #4
 802f18e:	459c      	cmp	ip, r3
 802f190:	fa22 f20e 	lsr.w	r2, r2, lr
 802f194:	d8f3      	bhi.n	802f17e <__lshift+0x6e>
 802f196:	ebac 0304 	sub.w	r3, ip, r4
 802f19a:	3b15      	subs	r3, #21
 802f19c:	f023 0303 	bic.w	r3, r3, #3
 802f1a0:	3304      	adds	r3, #4
 802f1a2:	f104 0015 	add.w	r0, r4, #21
 802f1a6:	4584      	cmp	ip, r0
 802f1a8:	bf38      	it	cc
 802f1aa:	2304      	movcc	r3, #4
 802f1ac:	50ca      	str	r2, [r1, r3]
 802f1ae:	b10a      	cbz	r2, 802f1b4 <__lshift+0xa4>
 802f1b0:	f108 0602 	add.w	r6, r8, #2
 802f1b4:	3e01      	subs	r6, #1
 802f1b6:	4638      	mov	r0, r7
 802f1b8:	612e      	str	r6, [r5, #16]
 802f1ba:	4621      	mov	r1, r4
 802f1bc:	f7ff fd8e 	bl	802ecdc <_Bfree>
 802f1c0:	4628      	mov	r0, r5
 802f1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f1c6:	f842 0f04 	str.w	r0, [r2, #4]!
 802f1ca:	3301      	adds	r3, #1
 802f1cc:	e7c5      	b.n	802f15a <__lshift+0x4a>
 802f1ce:	3904      	subs	r1, #4
 802f1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 802f1d4:	f841 2f04 	str.w	r2, [r1, #4]!
 802f1d8:	459c      	cmp	ip, r3
 802f1da:	d8f9      	bhi.n	802f1d0 <__lshift+0xc0>
 802f1dc:	e7ea      	b.n	802f1b4 <__lshift+0xa4>
 802f1de:	bf00      	nop
 802f1e0:	08034e81 	.word	0x08034e81
 802f1e4:	08034e92 	.word	0x08034e92

0802f1e8 <__mcmp>:
 802f1e8:	b530      	push	{r4, r5, lr}
 802f1ea:	6902      	ldr	r2, [r0, #16]
 802f1ec:	690c      	ldr	r4, [r1, #16]
 802f1ee:	1b12      	subs	r2, r2, r4
 802f1f0:	d10e      	bne.n	802f210 <__mcmp+0x28>
 802f1f2:	f100 0314 	add.w	r3, r0, #20
 802f1f6:	3114      	adds	r1, #20
 802f1f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802f1fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802f200:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802f204:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802f208:	42a5      	cmp	r5, r4
 802f20a:	d003      	beq.n	802f214 <__mcmp+0x2c>
 802f20c:	d305      	bcc.n	802f21a <__mcmp+0x32>
 802f20e:	2201      	movs	r2, #1
 802f210:	4610      	mov	r0, r2
 802f212:	bd30      	pop	{r4, r5, pc}
 802f214:	4283      	cmp	r3, r0
 802f216:	d3f3      	bcc.n	802f200 <__mcmp+0x18>
 802f218:	e7fa      	b.n	802f210 <__mcmp+0x28>
 802f21a:	f04f 32ff 	mov.w	r2, #4294967295
 802f21e:	e7f7      	b.n	802f210 <__mcmp+0x28>

0802f220 <__mdiff>:
 802f220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f224:	460c      	mov	r4, r1
 802f226:	4606      	mov	r6, r0
 802f228:	4611      	mov	r1, r2
 802f22a:	4620      	mov	r0, r4
 802f22c:	4690      	mov	r8, r2
 802f22e:	f7ff ffdb 	bl	802f1e8 <__mcmp>
 802f232:	1e05      	subs	r5, r0, #0
 802f234:	d110      	bne.n	802f258 <__mdiff+0x38>
 802f236:	4629      	mov	r1, r5
 802f238:	4630      	mov	r0, r6
 802f23a:	f7ff fd0f 	bl	802ec5c <_Balloc>
 802f23e:	b930      	cbnz	r0, 802f24e <__mdiff+0x2e>
 802f240:	4b3a      	ldr	r3, [pc, #232]	; (802f32c <__mdiff+0x10c>)
 802f242:	4602      	mov	r2, r0
 802f244:	f240 2137 	movw	r1, #567	; 0x237
 802f248:	4839      	ldr	r0, [pc, #228]	; (802f330 <__mdiff+0x110>)
 802f24a:	f7fd fa7f 	bl	802c74c <__assert_func>
 802f24e:	2301      	movs	r3, #1
 802f250:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802f254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f258:	bfa4      	itt	ge
 802f25a:	4643      	movge	r3, r8
 802f25c:	46a0      	movge	r8, r4
 802f25e:	4630      	mov	r0, r6
 802f260:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802f264:	bfa6      	itte	ge
 802f266:	461c      	movge	r4, r3
 802f268:	2500      	movge	r5, #0
 802f26a:	2501      	movlt	r5, #1
 802f26c:	f7ff fcf6 	bl	802ec5c <_Balloc>
 802f270:	b920      	cbnz	r0, 802f27c <__mdiff+0x5c>
 802f272:	4b2e      	ldr	r3, [pc, #184]	; (802f32c <__mdiff+0x10c>)
 802f274:	4602      	mov	r2, r0
 802f276:	f240 2145 	movw	r1, #581	; 0x245
 802f27a:	e7e5      	b.n	802f248 <__mdiff+0x28>
 802f27c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802f280:	6926      	ldr	r6, [r4, #16]
 802f282:	60c5      	str	r5, [r0, #12]
 802f284:	f104 0914 	add.w	r9, r4, #20
 802f288:	f108 0514 	add.w	r5, r8, #20
 802f28c:	f100 0e14 	add.w	lr, r0, #20
 802f290:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802f294:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802f298:	f108 0210 	add.w	r2, r8, #16
 802f29c:	46f2      	mov	sl, lr
 802f29e:	2100      	movs	r1, #0
 802f2a0:	f859 3b04 	ldr.w	r3, [r9], #4
 802f2a4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802f2a8:	fa11 f88b 	uxtah	r8, r1, fp
 802f2ac:	b299      	uxth	r1, r3
 802f2ae:	0c1b      	lsrs	r3, r3, #16
 802f2b0:	eba8 0801 	sub.w	r8, r8, r1
 802f2b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802f2b8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802f2bc:	fa1f f888 	uxth.w	r8, r8
 802f2c0:	1419      	asrs	r1, r3, #16
 802f2c2:	454e      	cmp	r6, r9
 802f2c4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802f2c8:	f84a 3b04 	str.w	r3, [sl], #4
 802f2cc:	d8e8      	bhi.n	802f2a0 <__mdiff+0x80>
 802f2ce:	1b33      	subs	r3, r6, r4
 802f2d0:	3b15      	subs	r3, #21
 802f2d2:	f023 0303 	bic.w	r3, r3, #3
 802f2d6:	3304      	adds	r3, #4
 802f2d8:	3415      	adds	r4, #21
 802f2da:	42a6      	cmp	r6, r4
 802f2dc:	bf38      	it	cc
 802f2de:	2304      	movcc	r3, #4
 802f2e0:	441d      	add	r5, r3
 802f2e2:	4473      	add	r3, lr
 802f2e4:	469e      	mov	lr, r3
 802f2e6:	462e      	mov	r6, r5
 802f2e8:	4566      	cmp	r6, ip
 802f2ea:	d30e      	bcc.n	802f30a <__mdiff+0xea>
 802f2ec:	f10c 0203 	add.w	r2, ip, #3
 802f2f0:	1b52      	subs	r2, r2, r5
 802f2f2:	f022 0203 	bic.w	r2, r2, #3
 802f2f6:	3d03      	subs	r5, #3
 802f2f8:	45ac      	cmp	ip, r5
 802f2fa:	bf38      	it	cc
 802f2fc:	2200      	movcc	r2, #0
 802f2fe:	4413      	add	r3, r2
 802f300:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802f304:	b17a      	cbz	r2, 802f326 <__mdiff+0x106>
 802f306:	6107      	str	r7, [r0, #16]
 802f308:	e7a4      	b.n	802f254 <__mdiff+0x34>
 802f30a:	f856 8b04 	ldr.w	r8, [r6], #4
 802f30e:	fa11 f288 	uxtah	r2, r1, r8
 802f312:	1414      	asrs	r4, r2, #16
 802f314:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802f318:	b292      	uxth	r2, r2
 802f31a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802f31e:	f84e 2b04 	str.w	r2, [lr], #4
 802f322:	1421      	asrs	r1, r4, #16
 802f324:	e7e0      	b.n	802f2e8 <__mdiff+0xc8>
 802f326:	3f01      	subs	r7, #1
 802f328:	e7ea      	b.n	802f300 <__mdiff+0xe0>
 802f32a:	bf00      	nop
 802f32c:	08034e81 	.word	0x08034e81
 802f330:	08034e92 	.word	0x08034e92

0802f334 <__ulp>:
 802f334:	b082      	sub	sp, #8
 802f336:	ed8d 0b00 	vstr	d0, [sp]
 802f33a:	9a01      	ldr	r2, [sp, #4]
 802f33c:	4b0f      	ldr	r3, [pc, #60]	; (802f37c <__ulp+0x48>)
 802f33e:	4013      	ands	r3, r2
 802f340:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802f344:	2b00      	cmp	r3, #0
 802f346:	dc08      	bgt.n	802f35a <__ulp+0x26>
 802f348:	425b      	negs	r3, r3
 802f34a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802f34e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802f352:	da04      	bge.n	802f35e <__ulp+0x2a>
 802f354:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802f358:	4113      	asrs	r3, r2
 802f35a:	2200      	movs	r2, #0
 802f35c:	e008      	b.n	802f370 <__ulp+0x3c>
 802f35e:	f1a2 0314 	sub.w	r3, r2, #20
 802f362:	2b1e      	cmp	r3, #30
 802f364:	bfda      	itte	le
 802f366:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802f36a:	40da      	lsrle	r2, r3
 802f36c:	2201      	movgt	r2, #1
 802f36e:	2300      	movs	r3, #0
 802f370:	4619      	mov	r1, r3
 802f372:	4610      	mov	r0, r2
 802f374:	ec41 0b10 	vmov	d0, r0, r1
 802f378:	b002      	add	sp, #8
 802f37a:	4770      	bx	lr
 802f37c:	7ff00000 	.word	0x7ff00000

0802f380 <__b2d>:
 802f380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f384:	6906      	ldr	r6, [r0, #16]
 802f386:	f100 0814 	add.w	r8, r0, #20
 802f38a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802f38e:	1f37      	subs	r7, r6, #4
 802f390:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802f394:	4610      	mov	r0, r2
 802f396:	f7ff fd53 	bl	802ee40 <__hi0bits>
 802f39a:	f1c0 0320 	rsb	r3, r0, #32
 802f39e:	280a      	cmp	r0, #10
 802f3a0:	600b      	str	r3, [r1, #0]
 802f3a2:	491b      	ldr	r1, [pc, #108]	; (802f410 <__b2d+0x90>)
 802f3a4:	dc15      	bgt.n	802f3d2 <__b2d+0x52>
 802f3a6:	f1c0 0c0b 	rsb	ip, r0, #11
 802f3aa:	fa22 f30c 	lsr.w	r3, r2, ip
 802f3ae:	45b8      	cmp	r8, r7
 802f3b0:	ea43 0501 	orr.w	r5, r3, r1
 802f3b4:	bf34      	ite	cc
 802f3b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f3ba:	2300      	movcs	r3, #0
 802f3bc:	3015      	adds	r0, #21
 802f3be:	fa02 f000 	lsl.w	r0, r2, r0
 802f3c2:	fa23 f30c 	lsr.w	r3, r3, ip
 802f3c6:	4303      	orrs	r3, r0
 802f3c8:	461c      	mov	r4, r3
 802f3ca:	ec45 4b10 	vmov	d0, r4, r5
 802f3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f3d2:	45b8      	cmp	r8, r7
 802f3d4:	bf3a      	itte	cc
 802f3d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f3da:	f1a6 0708 	subcc.w	r7, r6, #8
 802f3de:	2300      	movcs	r3, #0
 802f3e0:	380b      	subs	r0, #11
 802f3e2:	d012      	beq.n	802f40a <__b2d+0x8a>
 802f3e4:	f1c0 0120 	rsb	r1, r0, #32
 802f3e8:	fa23 f401 	lsr.w	r4, r3, r1
 802f3ec:	4082      	lsls	r2, r0
 802f3ee:	4322      	orrs	r2, r4
 802f3f0:	4547      	cmp	r7, r8
 802f3f2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802f3f6:	bf8c      	ite	hi
 802f3f8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802f3fc:	2200      	movls	r2, #0
 802f3fe:	4083      	lsls	r3, r0
 802f400:	40ca      	lsrs	r2, r1
 802f402:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802f406:	4313      	orrs	r3, r2
 802f408:	e7de      	b.n	802f3c8 <__b2d+0x48>
 802f40a:	ea42 0501 	orr.w	r5, r2, r1
 802f40e:	e7db      	b.n	802f3c8 <__b2d+0x48>
 802f410:	3ff00000 	.word	0x3ff00000

0802f414 <__d2b>:
 802f414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f418:	460f      	mov	r7, r1
 802f41a:	2101      	movs	r1, #1
 802f41c:	ec59 8b10 	vmov	r8, r9, d0
 802f420:	4616      	mov	r6, r2
 802f422:	f7ff fc1b 	bl	802ec5c <_Balloc>
 802f426:	4604      	mov	r4, r0
 802f428:	b930      	cbnz	r0, 802f438 <__d2b+0x24>
 802f42a:	4602      	mov	r2, r0
 802f42c:	4b24      	ldr	r3, [pc, #144]	; (802f4c0 <__d2b+0xac>)
 802f42e:	4825      	ldr	r0, [pc, #148]	; (802f4c4 <__d2b+0xb0>)
 802f430:	f240 310f 	movw	r1, #783	; 0x30f
 802f434:	f7fd f98a 	bl	802c74c <__assert_func>
 802f438:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802f43c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f440:	bb2d      	cbnz	r5, 802f48e <__d2b+0x7a>
 802f442:	9301      	str	r3, [sp, #4]
 802f444:	f1b8 0300 	subs.w	r3, r8, #0
 802f448:	d026      	beq.n	802f498 <__d2b+0x84>
 802f44a:	4668      	mov	r0, sp
 802f44c:	9300      	str	r3, [sp, #0]
 802f44e:	f7ff fd17 	bl	802ee80 <__lo0bits>
 802f452:	e9dd 1200 	ldrd	r1, r2, [sp]
 802f456:	b1e8      	cbz	r0, 802f494 <__d2b+0x80>
 802f458:	f1c0 0320 	rsb	r3, r0, #32
 802f45c:	fa02 f303 	lsl.w	r3, r2, r3
 802f460:	430b      	orrs	r3, r1
 802f462:	40c2      	lsrs	r2, r0
 802f464:	6163      	str	r3, [r4, #20]
 802f466:	9201      	str	r2, [sp, #4]
 802f468:	9b01      	ldr	r3, [sp, #4]
 802f46a:	61a3      	str	r3, [r4, #24]
 802f46c:	2b00      	cmp	r3, #0
 802f46e:	bf14      	ite	ne
 802f470:	2202      	movne	r2, #2
 802f472:	2201      	moveq	r2, #1
 802f474:	6122      	str	r2, [r4, #16]
 802f476:	b1bd      	cbz	r5, 802f4a8 <__d2b+0x94>
 802f478:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802f47c:	4405      	add	r5, r0
 802f47e:	603d      	str	r5, [r7, #0]
 802f480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802f484:	6030      	str	r0, [r6, #0]
 802f486:	4620      	mov	r0, r4
 802f488:	b003      	add	sp, #12
 802f48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802f48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802f492:	e7d6      	b.n	802f442 <__d2b+0x2e>
 802f494:	6161      	str	r1, [r4, #20]
 802f496:	e7e7      	b.n	802f468 <__d2b+0x54>
 802f498:	a801      	add	r0, sp, #4
 802f49a:	f7ff fcf1 	bl	802ee80 <__lo0bits>
 802f49e:	9b01      	ldr	r3, [sp, #4]
 802f4a0:	6163      	str	r3, [r4, #20]
 802f4a2:	3020      	adds	r0, #32
 802f4a4:	2201      	movs	r2, #1
 802f4a6:	e7e5      	b.n	802f474 <__d2b+0x60>
 802f4a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802f4ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802f4b0:	6038      	str	r0, [r7, #0]
 802f4b2:	6918      	ldr	r0, [r3, #16]
 802f4b4:	f7ff fcc4 	bl	802ee40 <__hi0bits>
 802f4b8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802f4bc:	e7e2      	b.n	802f484 <__d2b+0x70>
 802f4be:	bf00      	nop
 802f4c0:	08034e81 	.word	0x08034e81
 802f4c4:	08034e92 	.word	0x08034e92

0802f4c8 <__ratio>:
 802f4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f4cc:	4688      	mov	r8, r1
 802f4ce:	4669      	mov	r1, sp
 802f4d0:	4681      	mov	r9, r0
 802f4d2:	f7ff ff55 	bl	802f380 <__b2d>
 802f4d6:	a901      	add	r1, sp, #4
 802f4d8:	4640      	mov	r0, r8
 802f4da:	ec55 4b10 	vmov	r4, r5, d0
 802f4de:	f7ff ff4f 	bl	802f380 <__b2d>
 802f4e2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f4e6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802f4ea:	eba3 0c02 	sub.w	ip, r3, r2
 802f4ee:	e9dd 3200 	ldrd	r3, r2, [sp]
 802f4f2:	1a9b      	subs	r3, r3, r2
 802f4f4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802f4f8:	ec51 0b10 	vmov	r0, r1, d0
 802f4fc:	2b00      	cmp	r3, #0
 802f4fe:	bfd6      	itet	le
 802f500:	460a      	movle	r2, r1
 802f502:	462a      	movgt	r2, r5
 802f504:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802f508:	468b      	mov	fp, r1
 802f50a:	462f      	mov	r7, r5
 802f50c:	bfd4      	ite	le
 802f50e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802f512:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802f516:	4620      	mov	r0, r4
 802f518:	ee10 2a10 	vmov	r2, s0
 802f51c:	465b      	mov	r3, fp
 802f51e:	4639      	mov	r1, r7
 802f520:	f7e1 f9ac 	bl	801087c <__aeabi_ddiv>
 802f524:	ec41 0b10 	vmov	d0, r0, r1
 802f528:	b003      	add	sp, #12
 802f52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802f52e <__copybits>:
 802f52e:	3901      	subs	r1, #1
 802f530:	b570      	push	{r4, r5, r6, lr}
 802f532:	1149      	asrs	r1, r1, #5
 802f534:	6914      	ldr	r4, [r2, #16]
 802f536:	3101      	adds	r1, #1
 802f538:	f102 0314 	add.w	r3, r2, #20
 802f53c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802f540:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802f544:	1f05      	subs	r5, r0, #4
 802f546:	42a3      	cmp	r3, r4
 802f548:	d30c      	bcc.n	802f564 <__copybits+0x36>
 802f54a:	1aa3      	subs	r3, r4, r2
 802f54c:	3b11      	subs	r3, #17
 802f54e:	f023 0303 	bic.w	r3, r3, #3
 802f552:	3211      	adds	r2, #17
 802f554:	42a2      	cmp	r2, r4
 802f556:	bf88      	it	hi
 802f558:	2300      	movhi	r3, #0
 802f55a:	4418      	add	r0, r3
 802f55c:	2300      	movs	r3, #0
 802f55e:	4288      	cmp	r0, r1
 802f560:	d305      	bcc.n	802f56e <__copybits+0x40>
 802f562:	bd70      	pop	{r4, r5, r6, pc}
 802f564:	f853 6b04 	ldr.w	r6, [r3], #4
 802f568:	f845 6f04 	str.w	r6, [r5, #4]!
 802f56c:	e7eb      	b.n	802f546 <__copybits+0x18>
 802f56e:	f840 3b04 	str.w	r3, [r0], #4
 802f572:	e7f4      	b.n	802f55e <__copybits+0x30>

0802f574 <__any_on>:
 802f574:	f100 0214 	add.w	r2, r0, #20
 802f578:	6900      	ldr	r0, [r0, #16]
 802f57a:	114b      	asrs	r3, r1, #5
 802f57c:	4298      	cmp	r0, r3
 802f57e:	b510      	push	{r4, lr}
 802f580:	db11      	blt.n	802f5a6 <__any_on+0x32>
 802f582:	dd0a      	ble.n	802f59a <__any_on+0x26>
 802f584:	f011 011f 	ands.w	r1, r1, #31
 802f588:	d007      	beq.n	802f59a <__any_on+0x26>
 802f58a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f58e:	fa24 f001 	lsr.w	r0, r4, r1
 802f592:	fa00 f101 	lsl.w	r1, r0, r1
 802f596:	428c      	cmp	r4, r1
 802f598:	d10b      	bne.n	802f5b2 <__any_on+0x3e>
 802f59a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f59e:	4293      	cmp	r3, r2
 802f5a0:	d803      	bhi.n	802f5aa <__any_on+0x36>
 802f5a2:	2000      	movs	r0, #0
 802f5a4:	bd10      	pop	{r4, pc}
 802f5a6:	4603      	mov	r3, r0
 802f5a8:	e7f7      	b.n	802f59a <__any_on+0x26>
 802f5aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f5ae:	2900      	cmp	r1, #0
 802f5b0:	d0f5      	beq.n	802f59e <__any_on+0x2a>
 802f5b2:	2001      	movs	r0, #1
 802f5b4:	e7f6      	b.n	802f5a4 <__any_on+0x30>

0802f5b6 <sulp>:
 802f5b6:	b570      	push	{r4, r5, r6, lr}
 802f5b8:	4604      	mov	r4, r0
 802f5ba:	460d      	mov	r5, r1
 802f5bc:	ec45 4b10 	vmov	d0, r4, r5
 802f5c0:	4616      	mov	r6, r2
 802f5c2:	f7ff feb7 	bl	802f334 <__ulp>
 802f5c6:	ec51 0b10 	vmov	r0, r1, d0
 802f5ca:	b17e      	cbz	r6, 802f5ec <sulp+0x36>
 802f5cc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802f5d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802f5d4:	2b00      	cmp	r3, #0
 802f5d6:	dd09      	ble.n	802f5ec <sulp+0x36>
 802f5d8:	051b      	lsls	r3, r3, #20
 802f5da:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802f5de:	2400      	movs	r4, #0
 802f5e0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802f5e4:	4622      	mov	r2, r4
 802f5e6:	462b      	mov	r3, r5
 802f5e8:	f7e1 f81e 	bl	8010628 <__aeabi_dmul>
 802f5ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0802f5f0 <_strtod_l>:
 802f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5f4:	ed2d 8b02 	vpush	{d8}
 802f5f8:	b09b      	sub	sp, #108	; 0x6c
 802f5fa:	4604      	mov	r4, r0
 802f5fc:	9213      	str	r2, [sp, #76]	; 0x4c
 802f5fe:	2200      	movs	r2, #0
 802f600:	9216      	str	r2, [sp, #88]	; 0x58
 802f602:	460d      	mov	r5, r1
 802f604:	f04f 0800 	mov.w	r8, #0
 802f608:	f04f 0900 	mov.w	r9, #0
 802f60c:	460a      	mov	r2, r1
 802f60e:	9215      	str	r2, [sp, #84]	; 0x54
 802f610:	7811      	ldrb	r1, [r2, #0]
 802f612:	292b      	cmp	r1, #43	; 0x2b
 802f614:	d04c      	beq.n	802f6b0 <_strtod_l+0xc0>
 802f616:	d83a      	bhi.n	802f68e <_strtod_l+0x9e>
 802f618:	290d      	cmp	r1, #13
 802f61a:	d834      	bhi.n	802f686 <_strtod_l+0x96>
 802f61c:	2908      	cmp	r1, #8
 802f61e:	d834      	bhi.n	802f68a <_strtod_l+0x9a>
 802f620:	2900      	cmp	r1, #0
 802f622:	d03d      	beq.n	802f6a0 <_strtod_l+0xb0>
 802f624:	2200      	movs	r2, #0
 802f626:	920a      	str	r2, [sp, #40]	; 0x28
 802f628:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802f62a:	7832      	ldrb	r2, [r6, #0]
 802f62c:	2a30      	cmp	r2, #48	; 0x30
 802f62e:	f040 80b4 	bne.w	802f79a <_strtod_l+0x1aa>
 802f632:	7872      	ldrb	r2, [r6, #1]
 802f634:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 802f638:	2a58      	cmp	r2, #88	; 0x58
 802f63a:	d170      	bne.n	802f71e <_strtod_l+0x12e>
 802f63c:	9302      	str	r3, [sp, #8]
 802f63e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f640:	9301      	str	r3, [sp, #4]
 802f642:	ab16      	add	r3, sp, #88	; 0x58
 802f644:	9300      	str	r3, [sp, #0]
 802f646:	4a8e      	ldr	r2, [pc, #568]	; (802f880 <_strtod_l+0x290>)
 802f648:	ab17      	add	r3, sp, #92	; 0x5c
 802f64a:	a915      	add	r1, sp, #84	; 0x54
 802f64c:	4620      	mov	r0, r4
 802f64e:	f001 fe5f 	bl	8031310 <__gethex>
 802f652:	f010 070f 	ands.w	r7, r0, #15
 802f656:	4605      	mov	r5, r0
 802f658:	d005      	beq.n	802f666 <_strtod_l+0x76>
 802f65a:	2f06      	cmp	r7, #6
 802f65c:	d12a      	bne.n	802f6b4 <_strtod_l+0xc4>
 802f65e:	3601      	adds	r6, #1
 802f660:	2300      	movs	r3, #0
 802f662:	9615      	str	r6, [sp, #84]	; 0x54
 802f664:	930a      	str	r3, [sp, #40]	; 0x28
 802f666:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f668:	2b00      	cmp	r3, #0
 802f66a:	f040 857f 	bne.w	803016c <_strtod_l+0xb7c>
 802f66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f670:	b1db      	cbz	r3, 802f6aa <_strtod_l+0xba>
 802f672:	4642      	mov	r2, r8
 802f674:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802f678:	ec43 2b10 	vmov	d0, r2, r3
 802f67c:	b01b      	add	sp, #108	; 0x6c
 802f67e:	ecbd 8b02 	vpop	{d8}
 802f682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f686:	2920      	cmp	r1, #32
 802f688:	d1cc      	bne.n	802f624 <_strtod_l+0x34>
 802f68a:	3201      	adds	r2, #1
 802f68c:	e7bf      	b.n	802f60e <_strtod_l+0x1e>
 802f68e:	292d      	cmp	r1, #45	; 0x2d
 802f690:	d1c8      	bne.n	802f624 <_strtod_l+0x34>
 802f692:	2101      	movs	r1, #1
 802f694:	910a      	str	r1, [sp, #40]	; 0x28
 802f696:	1c51      	adds	r1, r2, #1
 802f698:	9115      	str	r1, [sp, #84]	; 0x54
 802f69a:	7852      	ldrb	r2, [r2, #1]
 802f69c:	2a00      	cmp	r2, #0
 802f69e:	d1c3      	bne.n	802f628 <_strtod_l+0x38>
 802f6a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f6a2:	9515      	str	r5, [sp, #84]	; 0x54
 802f6a4:	2b00      	cmp	r3, #0
 802f6a6:	f040 855f 	bne.w	8030168 <_strtod_l+0xb78>
 802f6aa:	4642      	mov	r2, r8
 802f6ac:	464b      	mov	r3, r9
 802f6ae:	e7e3      	b.n	802f678 <_strtod_l+0x88>
 802f6b0:	2100      	movs	r1, #0
 802f6b2:	e7ef      	b.n	802f694 <_strtod_l+0xa4>
 802f6b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f6b6:	b13a      	cbz	r2, 802f6c8 <_strtod_l+0xd8>
 802f6b8:	2135      	movs	r1, #53	; 0x35
 802f6ba:	a818      	add	r0, sp, #96	; 0x60
 802f6bc:	f7ff ff37 	bl	802f52e <__copybits>
 802f6c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f6c2:	4620      	mov	r0, r4
 802f6c4:	f7ff fb0a 	bl	802ecdc <_Bfree>
 802f6c8:	3f01      	subs	r7, #1
 802f6ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802f6cc:	2f04      	cmp	r7, #4
 802f6ce:	d806      	bhi.n	802f6de <_strtod_l+0xee>
 802f6d0:	e8df f007 	tbb	[pc, r7]
 802f6d4:	201d0314 	.word	0x201d0314
 802f6d8:	14          	.byte	0x14
 802f6d9:	00          	.byte	0x00
 802f6da:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 802f6de:	05e9      	lsls	r1, r5, #23
 802f6e0:	bf48      	it	mi
 802f6e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802f6e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f6ea:	0d1b      	lsrs	r3, r3, #20
 802f6ec:	051b      	lsls	r3, r3, #20
 802f6ee:	2b00      	cmp	r3, #0
 802f6f0:	d1b9      	bne.n	802f666 <_strtod_l+0x76>
 802f6f2:	f7fe fb9b 	bl	802de2c <__errno>
 802f6f6:	2322      	movs	r3, #34	; 0x22
 802f6f8:	6003      	str	r3, [r0, #0]
 802f6fa:	e7b4      	b.n	802f666 <_strtod_l+0x76>
 802f6fc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 802f700:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802f704:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802f708:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802f70c:	e7e7      	b.n	802f6de <_strtod_l+0xee>
 802f70e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802f888 <_strtod_l+0x298>
 802f712:	e7e4      	b.n	802f6de <_strtod_l+0xee>
 802f714:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802f718:	f04f 38ff 	mov.w	r8, #4294967295
 802f71c:	e7df      	b.n	802f6de <_strtod_l+0xee>
 802f71e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f720:	1c5a      	adds	r2, r3, #1
 802f722:	9215      	str	r2, [sp, #84]	; 0x54
 802f724:	785b      	ldrb	r3, [r3, #1]
 802f726:	2b30      	cmp	r3, #48	; 0x30
 802f728:	d0f9      	beq.n	802f71e <_strtod_l+0x12e>
 802f72a:	2b00      	cmp	r3, #0
 802f72c:	d09b      	beq.n	802f666 <_strtod_l+0x76>
 802f72e:	2301      	movs	r3, #1
 802f730:	f04f 0a00 	mov.w	sl, #0
 802f734:	9304      	str	r3, [sp, #16]
 802f736:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f738:	930b      	str	r3, [sp, #44]	; 0x2c
 802f73a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802f73e:	46d3      	mov	fp, sl
 802f740:	220a      	movs	r2, #10
 802f742:	9815      	ldr	r0, [sp, #84]	; 0x54
 802f744:	7806      	ldrb	r6, [r0, #0]
 802f746:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802f74a:	b2d9      	uxtb	r1, r3
 802f74c:	2909      	cmp	r1, #9
 802f74e:	d926      	bls.n	802f79e <_strtod_l+0x1ae>
 802f750:	494c      	ldr	r1, [pc, #304]	; (802f884 <_strtod_l+0x294>)
 802f752:	2201      	movs	r2, #1
 802f754:	f7fe fa12 	bl	802db7c <strncmp>
 802f758:	2800      	cmp	r0, #0
 802f75a:	d030      	beq.n	802f7be <_strtod_l+0x1ce>
 802f75c:	2000      	movs	r0, #0
 802f75e:	4632      	mov	r2, r6
 802f760:	9005      	str	r0, [sp, #20]
 802f762:	465e      	mov	r6, fp
 802f764:	4603      	mov	r3, r0
 802f766:	2a65      	cmp	r2, #101	; 0x65
 802f768:	d001      	beq.n	802f76e <_strtod_l+0x17e>
 802f76a:	2a45      	cmp	r2, #69	; 0x45
 802f76c:	d113      	bne.n	802f796 <_strtod_l+0x1a6>
 802f76e:	b91e      	cbnz	r6, 802f778 <_strtod_l+0x188>
 802f770:	9a04      	ldr	r2, [sp, #16]
 802f772:	4302      	orrs	r2, r0
 802f774:	d094      	beq.n	802f6a0 <_strtod_l+0xb0>
 802f776:	2600      	movs	r6, #0
 802f778:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802f77a:	1c6a      	adds	r2, r5, #1
 802f77c:	9215      	str	r2, [sp, #84]	; 0x54
 802f77e:	786a      	ldrb	r2, [r5, #1]
 802f780:	2a2b      	cmp	r2, #43	; 0x2b
 802f782:	d074      	beq.n	802f86e <_strtod_l+0x27e>
 802f784:	2a2d      	cmp	r2, #45	; 0x2d
 802f786:	d078      	beq.n	802f87a <_strtod_l+0x28a>
 802f788:	f04f 0c00 	mov.w	ip, #0
 802f78c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802f790:	2909      	cmp	r1, #9
 802f792:	d97f      	bls.n	802f894 <_strtod_l+0x2a4>
 802f794:	9515      	str	r5, [sp, #84]	; 0x54
 802f796:	2700      	movs	r7, #0
 802f798:	e09e      	b.n	802f8d8 <_strtod_l+0x2e8>
 802f79a:	2300      	movs	r3, #0
 802f79c:	e7c8      	b.n	802f730 <_strtod_l+0x140>
 802f79e:	f1bb 0f08 	cmp.w	fp, #8
 802f7a2:	bfd8      	it	le
 802f7a4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802f7a6:	f100 0001 	add.w	r0, r0, #1
 802f7aa:	bfda      	itte	le
 802f7ac:	fb02 3301 	mlale	r3, r2, r1, r3
 802f7b0:	9309      	strle	r3, [sp, #36]	; 0x24
 802f7b2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 802f7b6:	f10b 0b01 	add.w	fp, fp, #1
 802f7ba:	9015      	str	r0, [sp, #84]	; 0x54
 802f7bc:	e7c1      	b.n	802f742 <_strtod_l+0x152>
 802f7be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f7c0:	1c5a      	adds	r2, r3, #1
 802f7c2:	9215      	str	r2, [sp, #84]	; 0x54
 802f7c4:	785a      	ldrb	r2, [r3, #1]
 802f7c6:	f1bb 0f00 	cmp.w	fp, #0
 802f7ca:	d037      	beq.n	802f83c <_strtod_l+0x24c>
 802f7cc:	9005      	str	r0, [sp, #20]
 802f7ce:	465e      	mov	r6, fp
 802f7d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 802f7d4:	2b09      	cmp	r3, #9
 802f7d6:	d912      	bls.n	802f7fe <_strtod_l+0x20e>
 802f7d8:	2301      	movs	r3, #1
 802f7da:	e7c4      	b.n	802f766 <_strtod_l+0x176>
 802f7dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f7de:	1c5a      	adds	r2, r3, #1
 802f7e0:	9215      	str	r2, [sp, #84]	; 0x54
 802f7e2:	785a      	ldrb	r2, [r3, #1]
 802f7e4:	3001      	adds	r0, #1
 802f7e6:	2a30      	cmp	r2, #48	; 0x30
 802f7e8:	d0f8      	beq.n	802f7dc <_strtod_l+0x1ec>
 802f7ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802f7ee:	2b08      	cmp	r3, #8
 802f7f0:	f200 84c1 	bhi.w	8030176 <_strtod_l+0xb86>
 802f7f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f7f6:	9005      	str	r0, [sp, #20]
 802f7f8:	2000      	movs	r0, #0
 802f7fa:	930b      	str	r3, [sp, #44]	; 0x2c
 802f7fc:	4606      	mov	r6, r0
 802f7fe:	3a30      	subs	r2, #48	; 0x30
 802f800:	f100 0301 	add.w	r3, r0, #1
 802f804:	d014      	beq.n	802f830 <_strtod_l+0x240>
 802f806:	9905      	ldr	r1, [sp, #20]
 802f808:	4419      	add	r1, r3
 802f80a:	9105      	str	r1, [sp, #20]
 802f80c:	4633      	mov	r3, r6
 802f80e:	eb00 0c06 	add.w	ip, r0, r6
 802f812:	210a      	movs	r1, #10
 802f814:	4563      	cmp	r3, ip
 802f816:	d113      	bne.n	802f840 <_strtod_l+0x250>
 802f818:	1833      	adds	r3, r6, r0
 802f81a:	2b08      	cmp	r3, #8
 802f81c:	f106 0601 	add.w	r6, r6, #1
 802f820:	4406      	add	r6, r0
 802f822:	dc1a      	bgt.n	802f85a <_strtod_l+0x26a>
 802f824:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f826:	230a      	movs	r3, #10
 802f828:	fb03 2301 	mla	r3, r3, r1, r2
 802f82c:	9309      	str	r3, [sp, #36]	; 0x24
 802f82e:	2300      	movs	r3, #0
 802f830:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f832:	1c51      	adds	r1, r2, #1
 802f834:	9115      	str	r1, [sp, #84]	; 0x54
 802f836:	7852      	ldrb	r2, [r2, #1]
 802f838:	4618      	mov	r0, r3
 802f83a:	e7c9      	b.n	802f7d0 <_strtod_l+0x1e0>
 802f83c:	4658      	mov	r0, fp
 802f83e:	e7d2      	b.n	802f7e6 <_strtod_l+0x1f6>
 802f840:	2b08      	cmp	r3, #8
 802f842:	f103 0301 	add.w	r3, r3, #1
 802f846:	dc03      	bgt.n	802f850 <_strtod_l+0x260>
 802f848:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f84a:	434f      	muls	r7, r1
 802f84c:	9709      	str	r7, [sp, #36]	; 0x24
 802f84e:	e7e1      	b.n	802f814 <_strtod_l+0x224>
 802f850:	2b10      	cmp	r3, #16
 802f852:	bfd8      	it	le
 802f854:	fb01 fa0a 	mulle.w	sl, r1, sl
 802f858:	e7dc      	b.n	802f814 <_strtod_l+0x224>
 802f85a:	2e10      	cmp	r6, #16
 802f85c:	bfdc      	itt	le
 802f85e:	230a      	movle	r3, #10
 802f860:	fb03 2a0a 	mlale	sl, r3, sl, r2
 802f864:	e7e3      	b.n	802f82e <_strtod_l+0x23e>
 802f866:	2300      	movs	r3, #0
 802f868:	9305      	str	r3, [sp, #20]
 802f86a:	2301      	movs	r3, #1
 802f86c:	e780      	b.n	802f770 <_strtod_l+0x180>
 802f86e:	f04f 0c00 	mov.w	ip, #0
 802f872:	1caa      	adds	r2, r5, #2
 802f874:	9215      	str	r2, [sp, #84]	; 0x54
 802f876:	78aa      	ldrb	r2, [r5, #2]
 802f878:	e788      	b.n	802f78c <_strtod_l+0x19c>
 802f87a:	f04f 0c01 	mov.w	ip, #1
 802f87e:	e7f8      	b.n	802f872 <_strtod_l+0x282>
 802f880:	08034ff0 	.word	0x08034ff0
 802f884:	08034fec 	.word	0x08034fec
 802f888:	7ff00000 	.word	0x7ff00000
 802f88c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f88e:	1c51      	adds	r1, r2, #1
 802f890:	9115      	str	r1, [sp, #84]	; 0x54
 802f892:	7852      	ldrb	r2, [r2, #1]
 802f894:	2a30      	cmp	r2, #48	; 0x30
 802f896:	d0f9      	beq.n	802f88c <_strtod_l+0x29c>
 802f898:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 802f89c:	2908      	cmp	r1, #8
 802f89e:	f63f af7a 	bhi.w	802f796 <_strtod_l+0x1a6>
 802f8a2:	3a30      	subs	r2, #48	; 0x30
 802f8a4:	9208      	str	r2, [sp, #32]
 802f8a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f8a8:	920c      	str	r2, [sp, #48]	; 0x30
 802f8aa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f8ac:	1c57      	adds	r7, r2, #1
 802f8ae:	9715      	str	r7, [sp, #84]	; 0x54
 802f8b0:	7852      	ldrb	r2, [r2, #1]
 802f8b2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 802f8b6:	f1be 0f09 	cmp.w	lr, #9
 802f8ba:	d938      	bls.n	802f92e <_strtod_l+0x33e>
 802f8bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 802f8be:	1a7f      	subs	r7, r7, r1
 802f8c0:	2f08      	cmp	r7, #8
 802f8c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802f8c6:	dc03      	bgt.n	802f8d0 <_strtod_l+0x2e0>
 802f8c8:	9908      	ldr	r1, [sp, #32]
 802f8ca:	428f      	cmp	r7, r1
 802f8cc:	bfa8      	it	ge
 802f8ce:	460f      	movge	r7, r1
 802f8d0:	f1bc 0f00 	cmp.w	ip, #0
 802f8d4:	d000      	beq.n	802f8d8 <_strtod_l+0x2e8>
 802f8d6:	427f      	negs	r7, r7
 802f8d8:	2e00      	cmp	r6, #0
 802f8da:	d14f      	bne.n	802f97c <_strtod_l+0x38c>
 802f8dc:	9904      	ldr	r1, [sp, #16]
 802f8de:	4301      	orrs	r1, r0
 802f8e0:	f47f aec1 	bne.w	802f666 <_strtod_l+0x76>
 802f8e4:	2b00      	cmp	r3, #0
 802f8e6:	f47f aedb 	bne.w	802f6a0 <_strtod_l+0xb0>
 802f8ea:	2a69      	cmp	r2, #105	; 0x69
 802f8ec:	d029      	beq.n	802f942 <_strtod_l+0x352>
 802f8ee:	dc26      	bgt.n	802f93e <_strtod_l+0x34e>
 802f8f0:	2a49      	cmp	r2, #73	; 0x49
 802f8f2:	d026      	beq.n	802f942 <_strtod_l+0x352>
 802f8f4:	2a4e      	cmp	r2, #78	; 0x4e
 802f8f6:	f47f aed3 	bne.w	802f6a0 <_strtod_l+0xb0>
 802f8fa:	499b      	ldr	r1, [pc, #620]	; (802fb68 <_strtod_l+0x578>)
 802f8fc:	a815      	add	r0, sp, #84	; 0x54
 802f8fe:	f001 ff47 	bl	8031790 <__match>
 802f902:	2800      	cmp	r0, #0
 802f904:	f43f aecc 	beq.w	802f6a0 <_strtod_l+0xb0>
 802f908:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f90a:	781b      	ldrb	r3, [r3, #0]
 802f90c:	2b28      	cmp	r3, #40	; 0x28
 802f90e:	d12f      	bne.n	802f970 <_strtod_l+0x380>
 802f910:	4996      	ldr	r1, [pc, #600]	; (802fb6c <_strtod_l+0x57c>)
 802f912:	aa18      	add	r2, sp, #96	; 0x60
 802f914:	a815      	add	r0, sp, #84	; 0x54
 802f916:	f001 ff4f 	bl	80317b8 <__hexnan>
 802f91a:	2805      	cmp	r0, #5
 802f91c:	d128      	bne.n	802f970 <_strtod_l+0x380>
 802f91e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802f920:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802f924:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 802f928:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802f92c:	e69b      	b.n	802f666 <_strtod_l+0x76>
 802f92e:	9f08      	ldr	r7, [sp, #32]
 802f930:	210a      	movs	r1, #10
 802f932:	fb01 2107 	mla	r1, r1, r7, r2
 802f936:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802f93a:	9208      	str	r2, [sp, #32]
 802f93c:	e7b5      	b.n	802f8aa <_strtod_l+0x2ba>
 802f93e:	2a6e      	cmp	r2, #110	; 0x6e
 802f940:	e7d9      	b.n	802f8f6 <_strtod_l+0x306>
 802f942:	498b      	ldr	r1, [pc, #556]	; (802fb70 <_strtod_l+0x580>)
 802f944:	a815      	add	r0, sp, #84	; 0x54
 802f946:	f001 ff23 	bl	8031790 <__match>
 802f94a:	2800      	cmp	r0, #0
 802f94c:	f43f aea8 	beq.w	802f6a0 <_strtod_l+0xb0>
 802f950:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f952:	4988      	ldr	r1, [pc, #544]	; (802fb74 <_strtod_l+0x584>)
 802f954:	3b01      	subs	r3, #1
 802f956:	a815      	add	r0, sp, #84	; 0x54
 802f958:	9315      	str	r3, [sp, #84]	; 0x54
 802f95a:	f001 ff19 	bl	8031790 <__match>
 802f95e:	b910      	cbnz	r0, 802f966 <_strtod_l+0x376>
 802f960:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f962:	3301      	adds	r3, #1
 802f964:	9315      	str	r3, [sp, #84]	; 0x54
 802f966:	f8df 921c 	ldr.w	r9, [pc, #540]	; 802fb84 <_strtod_l+0x594>
 802f96a:	f04f 0800 	mov.w	r8, #0
 802f96e:	e67a      	b.n	802f666 <_strtod_l+0x76>
 802f970:	4881      	ldr	r0, [pc, #516]	; (802fb78 <_strtod_l+0x588>)
 802f972:	f001 fc5d 	bl	8031230 <nan>
 802f976:	ec59 8b10 	vmov	r8, r9, d0
 802f97a:	e674      	b.n	802f666 <_strtod_l+0x76>
 802f97c:	9b05      	ldr	r3, [sp, #20]
 802f97e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f980:	1afb      	subs	r3, r7, r3
 802f982:	f1bb 0f00 	cmp.w	fp, #0
 802f986:	bf08      	it	eq
 802f988:	46b3      	moveq	fp, r6
 802f98a:	2e10      	cmp	r6, #16
 802f98c:	9308      	str	r3, [sp, #32]
 802f98e:	4635      	mov	r5, r6
 802f990:	bfa8      	it	ge
 802f992:	2510      	movge	r5, #16
 802f994:	f7e0 fdce 	bl	8010534 <__aeabi_ui2d>
 802f998:	2e09      	cmp	r6, #9
 802f99a:	4680      	mov	r8, r0
 802f99c:	4689      	mov	r9, r1
 802f99e:	dd13      	ble.n	802f9c8 <_strtod_l+0x3d8>
 802f9a0:	4b76      	ldr	r3, [pc, #472]	; (802fb7c <_strtod_l+0x58c>)
 802f9a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f9a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802f9aa:	f7e0 fe3d 	bl	8010628 <__aeabi_dmul>
 802f9ae:	4680      	mov	r8, r0
 802f9b0:	4650      	mov	r0, sl
 802f9b2:	4689      	mov	r9, r1
 802f9b4:	f7e0 fdbe 	bl	8010534 <__aeabi_ui2d>
 802f9b8:	4602      	mov	r2, r0
 802f9ba:	460b      	mov	r3, r1
 802f9bc:	4640      	mov	r0, r8
 802f9be:	4649      	mov	r1, r9
 802f9c0:	f7e0 fc7c 	bl	80102bc <__adddf3>
 802f9c4:	4680      	mov	r8, r0
 802f9c6:	4689      	mov	r9, r1
 802f9c8:	2e0f      	cmp	r6, #15
 802f9ca:	dc38      	bgt.n	802fa3e <_strtod_l+0x44e>
 802f9cc:	9b08      	ldr	r3, [sp, #32]
 802f9ce:	2b00      	cmp	r3, #0
 802f9d0:	f43f ae49 	beq.w	802f666 <_strtod_l+0x76>
 802f9d4:	dd24      	ble.n	802fa20 <_strtod_l+0x430>
 802f9d6:	2b16      	cmp	r3, #22
 802f9d8:	dc0b      	bgt.n	802f9f2 <_strtod_l+0x402>
 802f9da:	4968      	ldr	r1, [pc, #416]	; (802fb7c <_strtod_l+0x58c>)
 802f9dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f9e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f9e4:	4642      	mov	r2, r8
 802f9e6:	464b      	mov	r3, r9
 802f9e8:	f7e0 fe1e 	bl	8010628 <__aeabi_dmul>
 802f9ec:	4680      	mov	r8, r0
 802f9ee:	4689      	mov	r9, r1
 802f9f0:	e639      	b.n	802f666 <_strtod_l+0x76>
 802f9f2:	9a08      	ldr	r2, [sp, #32]
 802f9f4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 802f9f8:	4293      	cmp	r3, r2
 802f9fa:	db20      	blt.n	802fa3e <_strtod_l+0x44e>
 802f9fc:	4c5f      	ldr	r4, [pc, #380]	; (802fb7c <_strtod_l+0x58c>)
 802f9fe:	f1c6 060f 	rsb	r6, r6, #15
 802fa02:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 802fa06:	4642      	mov	r2, r8
 802fa08:	464b      	mov	r3, r9
 802fa0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fa0e:	f7e0 fe0b 	bl	8010628 <__aeabi_dmul>
 802fa12:	9b08      	ldr	r3, [sp, #32]
 802fa14:	1b9e      	subs	r6, r3, r6
 802fa16:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 802fa1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 802fa1e:	e7e3      	b.n	802f9e8 <_strtod_l+0x3f8>
 802fa20:	9b08      	ldr	r3, [sp, #32]
 802fa22:	3316      	adds	r3, #22
 802fa24:	db0b      	blt.n	802fa3e <_strtod_l+0x44e>
 802fa26:	9b05      	ldr	r3, [sp, #20]
 802fa28:	1bdf      	subs	r7, r3, r7
 802fa2a:	4b54      	ldr	r3, [pc, #336]	; (802fb7c <_strtod_l+0x58c>)
 802fa2c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802fa30:	e9d7 2300 	ldrd	r2, r3, [r7]
 802fa34:	4640      	mov	r0, r8
 802fa36:	4649      	mov	r1, r9
 802fa38:	f7e0 ff20 	bl	801087c <__aeabi_ddiv>
 802fa3c:	e7d6      	b.n	802f9ec <_strtod_l+0x3fc>
 802fa3e:	9b08      	ldr	r3, [sp, #32]
 802fa40:	1b75      	subs	r5, r6, r5
 802fa42:	441d      	add	r5, r3
 802fa44:	2d00      	cmp	r5, #0
 802fa46:	dd70      	ble.n	802fb2a <_strtod_l+0x53a>
 802fa48:	f015 030f 	ands.w	r3, r5, #15
 802fa4c:	d00a      	beq.n	802fa64 <_strtod_l+0x474>
 802fa4e:	494b      	ldr	r1, [pc, #300]	; (802fb7c <_strtod_l+0x58c>)
 802fa50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802fa54:	4642      	mov	r2, r8
 802fa56:	464b      	mov	r3, r9
 802fa58:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fa5c:	f7e0 fde4 	bl	8010628 <__aeabi_dmul>
 802fa60:	4680      	mov	r8, r0
 802fa62:	4689      	mov	r9, r1
 802fa64:	f035 050f 	bics.w	r5, r5, #15
 802fa68:	d04d      	beq.n	802fb06 <_strtod_l+0x516>
 802fa6a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 802fa6e:	dd22      	ble.n	802fab6 <_strtod_l+0x4c6>
 802fa70:	2500      	movs	r5, #0
 802fa72:	46ab      	mov	fp, r5
 802fa74:	9509      	str	r5, [sp, #36]	; 0x24
 802fa76:	9505      	str	r5, [sp, #20]
 802fa78:	2322      	movs	r3, #34	; 0x22
 802fa7a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802fb84 <_strtod_l+0x594>
 802fa7e:	6023      	str	r3, [r4, #0]
 802fa80:	f04f 0800 	mov.w	r8, #0
 802fa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fa86:	2b00      	cmp	r3, #0
 802fa88:	f43f aded 	beq.w	802f666 <_strtod_l+0x76>
 802fa8c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fa8e:	4620      	mov	r0, r4
 802fa90:	f7ff f924 	bl	802ecdc <_Bfree>
 802fa94:	9905      	ldr	r1, [sp, #20]
 802fa96:	4620      	mov	r0, r4
 802fa98:	f7ff f920 	bl	802ecdc <_Bfree>
 802fa9c:	4659      	mov	r1, fp
 802fa9e:	4620      	mov	r0, r4
 802faa0:	f7ff f91c 	bl	802ecdc <_Bfree>
 802faa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802faa6:	4620      	mov	r0, r4
 802faa8:	f7ff f918 	bl	802ecdc <_Bfree>
 802faac:	4629      	mov	r1, r5
 802faae:	4620      	mov	r0, r4
 802fab0:	f7ff f914 	bl	802ecdc <_Bfree>
 802fab4:	e5d7      	b.n	802f666 <_strtod_l+0x76>
 802fab6:	4b32      	ldr	r3, [pc, #200]	; (802fb80 <_strtod_l+0x590>)
 802fab8:	9304      	str	r3, [sp, #16]
 802faba:	2300      	movs	r3, #0
 802fabc:	112d      	asrs	r5, r5, #4
 802fabe:	4640      	mov	r0, r8
 802fac0:	4649      	mov	r1, r9
 802fac2:	469a      	mov	sl, r3
 802fac4:	2d01      	cmp	r5, #1
 802fac6:	dc21      	bgt.n	802fb0c <_strtod_l+0x51c>
 802fac8:	b10b      	cbz	r3, 802face <_strtod_l+0x4de>
 802faca:	4680      	mov	r8, r0
 802facc:	4689      	mov	r9, r1
 802face:	492c      	ldr	r1, [pc, #176]	; (802fb80 <_strtod_l+0x590>)
 802fad0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802fad4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802fad8:	4642      	mov	r2, r8
 802fada:	464b      	mov	r3, r9
 802fadc:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fae0:	f7e0 fda2 	bl	8010628 <__aeabi_dmul>
 802fae4:	4b27      	ldr	r3, [pc, #156]	; (802fb84 <_strtod_l+0x594>)
 802fae6:	460a      	mov	r2, r1
 802fae8:	400b      	ands	r3, r1
 802faea:	4927      	ldr	r1, [pc, #156]	; (802fb88 <_strtod_l+0x598>)
 802faec:	428b      	cmp	r3, r1
 802faee:	4680      	mov	r8, r0
 802faf0:	d8be      	bhi.n	802fa70 <_strtod_l+0x480>
 802faf2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802faf6:	428b      	cmp	r3, r1
 802faf8:	bf86      	itte	hi
 802fafa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 802fb8c <_strtod_l+0x59c>
 802fafe:	f04f 38ff 	movhi.w	r8, #4294967295
 802fb02:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 802fb06:	2300      	movs	r3, #0
 802fb08:	9304      	str	r3, [sp, #16]
 802fb0a:	e07b      	b.n	802fc04 <_strtod_l+0x614>
 802fb0c:	07ea      	lsls	r2, r5, #31
 802fb0e:	d505      	bpl.n	802fb1c <_strtod_l+0x52c>
 802fb10:	9b04      	ldr	r3, [sp, #16]
 802fb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb16:	f7e0 fd87 	bl	8010628 <__aeabi_dmul>
 802fb1a:	2301      	movs	r3, #1
 802fb1c:	9a04      	ldr	r2, [sp, #16]
 802fb1e:	3208      	adds	r2, #8
 802fb20:	f10a 0a01 	add.w	sl, sl, #1
 802fb24:	106d      	asrs	r5, r5, #1
 802fb26:	9204      	str	r2, [sp, #16]
 802fb28:	e7cc      	b.n	802fac4 <_strtod_l+0x4d4>
 802fb2a:	d0ec      	beq.n	802fb06 <_strtod_l+0x516>
 802fb2c:	426d      	negs	r5, r5
 802fb2e:	f015 020f 	ands.w	r2, r5, #15
 802fb32:	d00a      	beq.n	802fb4a <_strtod_l+0x55a>
 802fb34:	4b11      	ldr	r3, [pc, #68]	; (802fb7c <_strtod_l+0x58c>)
 802fb36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802fb3a:	4640      	mov	r0, r8
 802fb3c:	4649      	mov	r1, r9
 802fb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb42:	f7e0 fe9b 	bl	801087c <__aeabi_ddiv>
 802fb46:	4680      	mov	r8, r0
 802fb48:	4689      	mov	r9, r1
 802fb4a:	112d      	asrs	r5, r5, #4
 802fb4c:	d0db      	beq.n	802fb06 <_strtod_l+0x516>
 802fb4e:	2d1f      	cmp	r5, #31
 802fb50:	dd1e      	ble.n	802fb90 <_strtod_l+0x5a0>
 802fb52:	2500      	movs	r5, #0
 802fb54:	46ab      	mov	fp, r5
 802fb56:	9509      	str	r5, [sp, #36]	; 0x24
 802fb58:	9505      	str	r5, [sp, #20]
 802fb5a:	2322      	movs	r3, #34	; 0x22
 802fb5c:	f04f 0800 	mov.w	r8, #0
 802fb60:	f04f 0900 	mov.w	r9, #0
 802fb64:	6023      	str	r3, [r4, #0]
 802fb66:	e78d      	b.n	802fa84 <_strtod_l+0x494>
 802fb68:	08034d81 	.word	0x08034d81
 802fb6c:	08035004 	.word	0x08035004
 802fb70:	08034d79 	.word	0x08034d79
 802fb74:	08034e1f 	.word	0x08034e1f
 802fb78:	08034d73 	.word	0x08034d73
 802fb7c:	08034f18 	.word	0x08034f18
 802fb80:	08034ef0 	.word	0x08034ef0
 802fb84:	7ff00000 	.word	0x7ff00000
 802fb88:	7ca00000 	.word	0x7ca00000
 802fb8c:	7fefffff 	.word	0x7fefffff
 802fb90:	f015 0310 	ands.w	r3, r5, #16
 802fb94:	bf18      	it	ne
 802fb96:	236a      	movne	r3, #106	; 0x6a
 802fb98:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802ff3c <_strtod_l+0x94c>
 802fb9c:	9304      	str	r3, [sp, #16]
 802fb9e:	4640      	mov	r0, r8
 802fba0:	4649      	mov	r1, r9
 802fba2:	2300      	movs	r3, #0
 802fba4:	07ea      	lsls	r2, r5, #31
 802fba6:	d504      	bpl.n	802fbb2 <_strtod_l+0x5c2>
 802fba8:	e9da 2300 	ldrd	r2, r3, [sl]
 802fbac:	f7e0 fd3c 	bl	8010628 <__aeabi_dmul>
 802fbb0:	2301      	movs	r3, #1
 802fbb2:	106d      	asrs	r5, r5, #1
 802fbb4:	f10a 0a08 	add.w	sl, sl, #8
 802fbb8:	d1f4      	bne.n	802fba4 <_strtod_l+0x5b4>
 802fbba:	b10b      	cbz	r3, 802fbc0 <_strtod_l+0x5d0>
 802fbbc:	4680      	mov	r8, r0
 802fbbe:	4689      	mov	r9, r1
 802fbc0:	9b04      	ldr	r3, [sp, #16]
 802fbc2:	b1bb      	cbz	r3, 802fbf4 <_strtod_l+0x604>
 802fbc4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802fbc8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802fbcc:	2b00      	cmp	r3, #0
 802fbce:	4649      	mov	r1, r9
 802fbd0:	dd10      	ble.n	802fbf4 <_strtod_l+0x604>
 802fbd2:	2b1f      	cmp	r3, #31
 802fbd4:	f340 811e 	ble.w	802fe14 <_strtod_l+0x824>
 802fbd8:	2b34      	cmp	r3, #52	; 0x34
 802fbda:	bfde      	ittt	le
 802fbdc:	f04f 33ff 	movle.w	r3, #4294967295
 802fbe0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802fbe4:	4093      	lslle	r3, r2
 802fbe6:	f04f 0800 	mov.w	r8, #0
 802fbea:	bfcc      	ite	gt
 802fbec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802fbf0:	ea03 0901 	andle.w	r9, r3, r1
 802fbf4:	2200      	movs	r2, #0
 802fbf6:	2300      	movs	r3, #0
 802fbf8:	4640      	mov	r0, r8
 802fbfa:	4649      	mov	r1, r9
 802fbfc:	f7e0 ff7c 	bl	8010af8 <__aeabi_dcmpeq>
 802fc00:	2800      	cmp	r0, #0
 802fc02:	d1a6      	bne.n	802fb52 <_strtod_l+0x562>
 802fc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fc06:	9300      	str	r3, [sp, #0]
 802fc08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802fc0a:	4633      	mov	r3, r6
 802fc0c:	465a      	mov	r2, fp
 802fc0e:	4620      	mov	r0, r4
 802fc10:	f7ff f8cc 	bl	802edac <__s2b>
 802fc14:	9009      	str	r0, [sp, #36]	; 0x24
 802fc16:	2800      	cmp	r0, #0
 802fc18:	f43f af2a 	beq.w	802fa70 <_strtod_l+0x480>
 802fc1c:	9a08      	ldr	r2, [sp, #32]
 802fc1e:	9b05      	ldr	r3, [sp, #20]
 802fc20:	2a00      	cmp	r2, #0
 802fc22:	eba3 0307 	sub.w	r3, r3, r7
 802fc26:	bfa8      	it	ge
 802fc28:	2300      	movge	r3, #0
 802fc2a:	930c      	str	r3, [sp, #48]	; 0x30
 802fc2c:	2500      	movs	r5, #0
 802fc2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802fc32:	9312      	str	r3, [sp, #72]	; 0x48
 802fc34:	46ab      	mov	fp, r5
 802fc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fc38:	4620      	mov	r0, r4
 802fc3a:	6859      	ldr	r1, [r3, #4]
 802fc3c:	f7ff f80e 	bl	802ec5c <_Balloc>
 802fc40:	9005      	str	r0, [sp, #20]
 802fc42:	2800      	cmp	r0, #0
 802fc44:	f43f af18 	beq.w	802fa78 <_strtod_l+0x488>
 802fc48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fc4a:	691a      	ldr	r2, [r3, #16]
 802fc4c:	3202      	adds	r2, #2
 802fc4e:	f103 010c 	add.w	r1, r3, #12
 802fc52:	0092      	lsls	r2, r2, #2
 802fc54:	300c      	adds	r0, #12
 802fc56:	f7fe f91e 	bl	802de96 <memcpy>
 802fc5a:	ec49 8b10 	vmov	d0, r8, r9
 802fc5e:	aa18      	add	r2, sp, #96	; 0x60
 802fc60:	a917      	add	r1, sp, #92	; 0x5c
 802fc62:	4620      	mov	r0, r4
 802fc64:	f7ff fbd6 	bl	802f414 <__d2b>
 802fc68:	ec49 8b18 	vmov	d8, r8, r9
 802fc6c:	9016      	str	r0, [sp, #88]	; 0x58
 802fc6e:	2800      	cmp	r0, #0
 802fc70:	f43f af02 	beq.w	802fa78 <_strtod_l+0x488>
 802fc74:	2101      	movs	r1, #1
 802fc76:	4620      	mov	r0, r4
 802fc78:	f7ff f930 	bl	802eedc <__i2b>
 802fc7c:	4683      	mov	fp, r0
 802fc7e:	2800      	cmp	r0, #0
 802fc80:	f43f aefa 	beq.w	802fa78 <_strtod_l+0x488>
 802fc84:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802fc86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802fc88:	2e00      	cmp	r6, #0
 802fc8a:	bfab      	itete	ge
 802fc8c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 802fc8e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 802fc90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802fc92:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 802fc96:	bfac      	ite	ge
 802fc98:	eb06 0a03 	addge.w	sl, r6, r3
 802fc9c:	1b9f      	sublt	r7, r3, r6
 802fc9e:	9b04      	ldr	r3, [sp, #16]
 802fca0:	1af6      	subs	r6, r6, r3
 802fca2:	4416      	add	r6, r2
 802fca4:	4ba0      	ldr	r3, [pc, #640]	; (802ff28 <_strtod_l+0x938>)
 802fca6:	3e01      	subs	r6, #1
 802fca8:	429e      	cmp	r6, r3
 802fcaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802fcae:	f280 80c4 	bge.w	802fe3a <_strtod_l+0x84a>
 802fcb2:	1b9b      	subs	r3, r3, r6
 802fcb4:	2b1f      	cmp	r3, #31
 802fcb6:	eba2 0203 	sub.w	r2, r2, r3
 802fcba:	f04f 0101 	mov.w	r1, #1
 802fcbe:	f300 80b0 	bgt.w	802fe22 <_strtod_l+0x832>
 802fcc2:	fa01 f303 	lsl.w	r3, r1, r3
 802fcc6:	930e      	str	r3, [sp, #56]	; 0x38
 802fcc8:	2300      	movs	r3, #0
 802fcca:	930d      	str	r3, [sp, #52]	; 0x34
 802fccc:	eb0a 0602 	add.w	r6, sl, r2
 802fcd0:	9b04      	ldr	r3, [sp, #16]
 802fcd2:	45b2      	cmp	sl, r6
 802fcd4:	4417      	add	r7, r2
 802fcd6:	441f      	add	r7, r3
 802fcd8:	4653      	mov	r3, sl
 802fcda:	bfa8      	it	ge
 802fcdc:	4633      	movge	r3, r6
 802fcde:	42bb      	cmp	r3, r7
 802fce0:	bfa8      	it	ge
 802fce2:	463b      	movge	r3, r7
 802fce4:	2b00      	cmp	r3, #0
 802fce6:	bfc2      	ittt	gt
 802fce8:	1af6      	subgt	r6, r6, r3
 802fcea:	1aff      	subgt	r7, r7, r3
 802fcec:	ebaa 0a03 	subgt.w	sl, sl, r3
 802fcf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802fcf2:	2b00      	cmp	r3, #0
 802fcf4:	dd17      	ble.n	802fd26 <_strtod_l+0x736>
 802fcf6:	4659      	mov	r1, fp
 802fcf8:	461a      	mov	r2, r3
 802fcfa:	4620      	mov	r0, r4
 802fcfc:	f7ff f9ae 	bl	802f05c <__pow5mult>
 802fd00:	4683      	mov	fp, r0
 802fd02:	2800      	cmp	r0, #0
 802fd04:	f43f aeb8 	beq.w	802fa78 <_strtod_l+0x488>
 802fd08:	4601      	mov	r1, r0
 802fd0a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802fd0c:	4620      	mov	r0, r4
 802fd0e:	f7ff f8fb 	bl	802ef08 <__multiply>
 802fd12:	900b      	str	r0, [sp, #44]	; 0x2c
 802fd14:	2800      	cmp	r0, #0
 802fd16:	f43f aeaf 	beq.w	802fa78 <_strtod_l+0x488>
 802fd1a:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fd1c:	4620      	mov	r0, r4
 802fd1e:	f7fe ffdd 	bl	802ecdc <_Bfree>
 802fd22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fd24:	9316      	str	r3, [sp, #88]	; 0x58
 802fd26:	2e00      	cmp	r6, #0
 802fd28:	f300 808c 	bgt.w	802fe44 <_strtod_l+0x854>
 802fd2c:	9b08      	ldr	r3, [sp, #32]
 802fd2e:	2b00      	cmp	r3, #0
 802fd30:	dd08      	ble.n	802fd44 <_strtod_l+0x754>
 802fd32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802fd34:	9905      	ldr	r1, [sp, #20]
 802fd36:	4620      	mov	r0, r4
 802fd38:	f7ff f990 	bl	802f05c <__pow5mult>
 802fd3c:	9005      	str	r0, [sp, #20]
 802fd3e:	2800      	cmp	r0, #0
 802fd40:	f43f ae9a 	beq.w	802fa78 <_strtod_l+0x488>
 802fd44:	2f00      	cmp	r7, #0
 802fd46:	dd08      	ble.n	802fd5a <_strtod_l+0x76a>
 802fd48:	9905      	ldr	r1, [sp, #20]
 802fd4a:	463a      	mov	r2, r7
 802fd4c:	4620      	mov	r0, r4
 802fd4e:	f7ff f9df 	bl	802f110 <__lshift>
 802fd52:	9005      	str	r0, [sp, #20]
 802fd54:	2800      	cmp	r0, #0
 802fd56:	f43f ae8f 	beq.w	802fa78 <_strtod_l+0x488>
 802fd5a:	f1ba 0f00 	cmp.w	sl, #0
 802fd5e:	dd08      	ble.n	802fd72 <_strtod_l+0x782>
 802fd60:	4659      	mov	r1, fp
 802fd62:	4652      	mov	r2, sl
 802fd64:	4620      	mov	r0, r4
 802fd66:	f7ff f9d3 	bl	802f110 <__lshift>
 802fd6a:	4683      	mov	fp, r0
 802fd6c:	2800      	cmp	r0, #0
 802fd6e:	f43f ae83 	beq.w	802fa78 <_strtod_l+0x488>
 802fd72:	9a05      	ldr	r2, [sp, #20]
 802fd74:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fd76:	4620      	mov	r0, r4
 802fd78:	f7ff fa52 	bl	802f220 <__mdiff>
 802fd7c:	4605      	mov	r5, r0
 802fd7e:	2800      	cmp	r0, #0
 802fd80:	f43f ae7a 	beq.w	802fa78 <_strtod_l+0x488>
 802fd84:	68c3      	ldr	r3, [r0, #12]
 802fd86:	930b      	str	r3, [sp, #44]	; 0x2c
 802fd88:	2300      	movs	r3, #0
 802fd8a:	60c3      	str	r3, [r0, #12]
 802fd8c:	4659      	mov	r1, fp
 802fd8e:	f7ff fa2b 	bl	802f1e8 <__mcmp>
 802fd92:	2800      	cmp	r0, #0
 802fd94:	da60      	bge.n	802fe58 <_strtod_l+0x868>
 802fd96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fd98:	ea53 0308 	orrs.w	r3, r3, r8
 802fd9c:	f040 8084 	bne.w	802fea8 <_strtod_l+0x8b8>
 802fda0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fda4:	2b00      	cmp	r3, #0
 802fda6:	d17f      	bne.n	802fea8 <_strtod_l+0x8b8>
 802fda8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802fdac:	0d1b      	lsrs	r3, r3, #20
 802fdae:	051b      	lsls	r3, r3, #20
 802fdb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802fdb4:	d978      	bls.n	802fea8 <_strtod_l+0x8b8>
 802fdb6:	696b      	ldr	r3, [r5, #20]
 802fdb8:	b913      	cbnz	r3, 802fdc0 <_strtod_l+0x7d0>
 802fdba:	692b      	ldr	r3, [r5, #16]
 802fdbc:	2b01      	cmp	r3, #1
 802fdbe:	dd73      	ble.n	802fea8 <_strtod_l+0x8b8>
 802fdc0:	4629      	mov	r1, r5
 802fdc2:	2201      	movs	r2, #1
 802fdc4:	4620      	mov	r0, r4
 802fdc6:	f7ff f9a3 	bl	802f110 <__lshift>
 802fdca:	4659      	mov	r1, fp
 802fdcc:	4605      	mov	r5, r0
 802fdce:	f7ff fa0b 	bl	802f1e8 <__mcmp>
 802fdd2:	2800      	cmp	r0, #0
 802fdd4:	dd68      	ble.n	802fea8 <_strtod_l+0x8b8>
 802fdd6:	9904      	ldr	r1, [sp, #16]
 802fdd8:	4a54      	ldr	r2, [pc, #336]	; (802ff2c <_strtod_l+0x93c>)
 802fdda:	464b      	mov	r3, r9
 802fddc:	2900      	cmp	r1, #0
 802fdde:	f000 8084 	beq.w	802feea <_strtod_l+0x8fa>
 802fde2:	ea02 0109 	and.w	r1, r2, r9
 802fde6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802fdea:	dc7e      	bgt.n	802feea <_strtod_l+0x8fa>
 802fdec:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802fdf0:	f77f aeb3 	ble.w	802fb5a <_strtod_l+0x56a>
 802fdf4:	4b4e      	ldr	r3, [pc, #312]	; (802ff30 <_strtod_l+0x940>)
 802fdf6:	4640      	mov	r0, r8
 802fdf8:	4649      	mov	r1, r9
 802fdfa:	2200      	movs	r2, #0
 802fdfc:	f7e0 fc14 	bl	8010628 <__aeabi_dmul>
 802fe00:	4b4a      	ldr	r3, [pc, #296]	; (802ff2c <_strtod_l+0x93c>)
 802fe02:	400b      	ands	r3, r1
 802fe04:	4680      	mov	r8, r0
 802fe06:	4689      	mov	r9, r1
 802fe08:	2b00      	cmp	r3, #0
 802fe0a:	f47f ae3f 	bne.w	802fa8c <_strtod_l+0x49c>
 802fe0e:	2322      	movs	r3, #34	; 0x22
 802fe10:	6023      	str	r3, [r4, #0]
 802fe12:	e63b      	b.n	802fa8c <_strtod_l+0x49c>
 802fe14:	f04f 32ff 	mov.w	r2, #4294967295
 802fe18:	fa02 f303 	lsl.w	r3, r2, r3
 802fe1c:	ea03 0808 	and.w	r8, r3, r8
 802fe20:	e6e8      	b.n	802fbf4 <_strtod_l+0x604>
 802fe22:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802fe26:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802fe2a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802fe2e:	36e2      	adds	r6, #226	; 0xe2
 802fe30:	fa01 f306 	lsl.w	r3, r1, r6
 802fe34:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802fe38:	e748      	b.n	802fccc <_strtod_l+0x6dc>
 802fe3a:	2100      	movs	r1, #0
 802fe3c:	2301      	movs	r3, #1
 802fe3e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 802fe42:	e743      	b.n	802fccc <_strtod_l+0x6dc>
 802fe44:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fe46:	4632      	mov	r2, r6
 802fe48:	4620      	mov	r0, r4
 802fe4a:	f7ff f961 	bl	802f110 <__lshift>
 802fe4e:	9016      	str	r0, [sp, #88]	; 0x58
 802fe50:	2800      	cmp	r0, #0
 802fe52:	f47f af6b 	bne.w	802fd2c <_strtod_l+0x73c>
 802fe56:	e60f      	b.n	802fa78 <_strtod_l+0x488>
 802fe58:	46ca      	mov	sl, r9
 802fe5a:	d171      	bne.n	802ff40 <_strtod_l+0x950>
 802fe5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fe5e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fe62:	b352      	cbz	r2, 802feba <_strtod_l+0x8ca>
 802fe64:	4a33      	ldr	r2, [pc, #204]	; (802ff34 <_strtod_l+0x944>)
 802fe66:	4293      	cmp	r3, r2
 802fe68:	d12a      	bne.n	802fec0 <_strtod_l+0x8d0>
 802fe6a:	9b04      	ldr	r3, [sp, #16]
 802fe6c:	4641      	mov	r1, r8
 802fe6e:	b1fb      	cbz	r3, 802feb0 <_strtod_l+0x8c0>
 802fe70:	4b2e      	ldr	r3, [pc, #184]	; (802ff2c <_strtod_l+0x93c>)
 802fe72:	ea09 0303 	and.w	r3, r9, r3
 802fe76:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fe7a:	f04f 32ff 	mov.w	r2, #4294967295
 802fe7e:	d81a      	bhi.n	802feb6 <_strtod_l+0x8c6>
 802fe80:	0d1b      	lsrs	r3, r3, #20
 802fe82:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802fe86:	fa02 f303 	lsl.w	r3, r2, r3
 802fe8a:	4299      	cmp	r1, r3
 802fe8c:	d118      	bne.n	802fec0 <_strtod_l+0x8d0>
 802fe8e:	4b2a      	ldr	r3, [pc, #168]	; (802ff38 <_strtod_l+0x948>)
 802fe90:	459a      	cmp	sl, r3
 802fe92:	d102      	bne.n	802fe9a <_strtod_l+0x8aa>
 802fe94:	3101      	adds	r1, #1
 802fe96:	f43f adef 	beq.w	802fa78 <_strtod_l+0x488>
 802fe9a:	4b24      	ldr	r3, [pc, #144]	; (802ff2c <_strtod_l+0x93c>)
 802fe9c:	ea0a 0303 	and.w	r3, sl, r3
 802fea0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802fea4:	f04f 0800 	mov.w	r8, #0
 802fea8:	9b04      	ldr	r3, [sp, #16]
 802feaa:	2b00      	cmp	r3, #0
 802feac:	d1a2      	bne.n	802fdf4 <_strtod_l+0x804>
 802feae:	e5ed      	b.n	802fa8c <_strtod_l+0x49c>
 802feb0:	f04f 33ff 	mov.w	r3, #4294967295
 802feb4:	e7e9      	b.n	802fe8a <_strtod_l+0x89a>
 802feb6:	4613      	mov	r3, r2
 802feb8:	e7e7      	b.n	802fe8a <_strtod_l+0x89a>
 802feba:	ea53 0308 	orrs.w	r3, r3, r8
 802febe:	d08a      	beq.n	802fdd6 <_strtod_l+0x7e6>
 802fec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fec2:	b1e3      	cbz	r3, 802fefe <_strtod_l+0x90e>
 802fec4:	ea13 0f0a 	tst.w	r3, sl
 802fec8:	d0ee      	beq.n	802fea8 <_strtod_l+0x8b8>
 802feca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fecc:	9a04      	ldr	r2, [sp, #16]
 802fece:	4640      	mov	r0, r8
 802fed0:	4649      	mov	r1, r9
 802fed2:	b1c3      	cbz	r3, 802ff06 <_strtod_l+0x916>
 802fed4:	f7ff fb6f 	bl	802f5b6 <sulp>
 802fed8:	4602      	mov	r2, r0
 802feda:	460b      	mov	r3, r1
 802fedc:	ec51 0b18 	vmov	r0, r1, d8
 802fee0:	f7e0 f9ec 	bl	80102bc <__adddf3>
 802fee4:	4680      	mov	r8, r0
 802fee6:	4689      	mov	r9, r1
 802fee8:	e7de      	b.n	802fea8 <_strtod_l+0x8b8>
 802feea:	4013      	ands	r3, r2
 802feec:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802fef0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802fef4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802fef8:	f04f 38ff 	mov.w	r8, #4294967295
 802fefc:	e7d4      	b.n	802fea8 <_strtod_l+0x8b8>
 802fefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802ff00:	ea13 0f08 	tst.w	r3, r8
 802ff04:	e7e0      	b.n	802fec8 <_strtod_l+0x8d8>
 802ff06:	f7ff fb56 	bl	802f5b6 <sulp>
 802ff0a:	4602      	mov	r2, r0
 802ff0c:	460b      	mov	r3, r1
 802ff0e:	ec51 0b18 	vmov	r0, r1, d8
 802ff12:	f7e0 f9d1 	bl	80102b8 <__aeabi_dsub>
 802ff16:	2200      	movs	r2, #0
 802ff18:	2300      	movs	r3, #0
 802ff1a:	4680      	mov	r8, r0
 802ff1c:	4689      	mov	r9, r1
 802ff1e:	f7e0 fdeb 	bl	8010af8 <__aeabi_dcmpeq>
 802ff22:	2800      	cmp	r0, #0
 802ff24:	d0c0      	beq.n	802fea8 <_strtod_l+0x8b8>
 802ff26:	e618      	b.n	802fb5a <_strtod_l+0x56a>
 802ff28:	fffffc02 	.word	0xfffffc02
 802ff2c:	7ff00000 	.word	0x7ff00000
 802ff30:	39500000 	.word	0x39500000
 802ff34:	000fffff 	.word	0x000fffff
 802ff38:	7fefffff 	.word	0x7fefffff
 802ff3c:	08035018 	.word	0x08035018
 802ff40:	4659      	mov	r1, fp
 802ff42:	4628      	mov	r0, r5
 802ff44:	f7ff fac0 	bl	802f4c8 <__ratio>
 802ff48:	ec57 6b10 	vmov	r6, r7, d0
 802ff4c:	ee10 0a10 	vmov	r0, s0
 802ff50:	2200      	movs	r2, #0
 802ff52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802ff56:	4639      	mov	r1, r7
 802ff58:	f7e0 fde2 	bl	8010b20 <__aeabi_dcmple>
 802ff5c:	2800      	cmp	r0, #0
 802ff5e:	d071      	beq.n	8030044 <_strtod_l+0xa54>
 802ff60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ff62:	2b00      	cmp	r3, #0
 802ff64:	d17c      	bne.n	8030060 <_strtod_l+0xa70>
 802ff66:	f1b8 0f00 	cmp.w	r8, #0
 802ff6a:	d15a      	bne.n	8030022 <_strtod_l+0xa32>
 802ff6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ff70:	2b00      	cmp	r3, #0
 802ff72:	d15d      	bne.n	8030030 <_strtod_l+0xa40>
 802ff74:	4b90      	ldr	r3, [pc, #576]	; (80301b8 <_strtod_l+0xbc8>)
 802ff76:	2200      	movs	r2, #0
 802ff78:	4630      	mov	r0, r6
 802ff7a:	4639      	mov	r1, r7
 802ff7c:	f7e0 fdc6 	bl	8010b0c <__aeabi_dcmplt>
 802ff80:	2800      	cmp	r0, #0
 802ff82:	d15c      	bne.n	803003e <_strtod_l+0xa4e>
 802ff84:	4630      	mov	r0, r6
 802ff86:	4639      	mov	r1, r7
 802ff88:	4b8c      	ldr	r3, [pc, #560]	; (80301bc <_strtod_l+0xbcc>)
 802ff8a:	2200      	movs	r2, #0
 802ff8c:	f7e0 fb4c 	bl	8010628 <__aeabi_dmul>
 802ff90:	4606      	mov	r6, r0
 802ff92:	460f      	mov	r7, r1
 802ff94:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802ff98:	9606      	str	r6, [sp, #24]
 802ff9a:	9307      	str	r3, [sp, #28]
 802ff9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802ffa0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802ffa4:	4b86      	ldr	r3, [pc, #536]	; (80301c0 <_strtod_l+0xbd0>)
 802ffa6:	ea0a 0303 	and.w	r3, sl, r3
 802ffaa:	930d      	str	r3, [sp, #52]	; 0x34
 802ffac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802ffae:	4b85      	ldr	r3, [pc, #532]	; (80301c4 <_strtod_l+0xbd4>)
 802ffb0:	429a      	cmp	r2, r3
 802ffb2:	f040 8090 	bne.w	80300d6 <_strtod_l+0xae6>
 802ffb6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 802ffba:	ec49 8b10 	vmov	d0, r8, r9
 802ffbe:	f7ff f9b9 	bl	802f334 <__ulp>
 802ffc2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802ffc6:	ec51 0b10 	vmov	r0, r1, d0
 802ffca:	f7e0 fb2d 	bl	8010628 <__aeabi_dmul>
 802ffce:	4642      	mov	r2, r8
 802ffd0:	464b      	mov	r3, r9
 802ffd2:	f7e0 f973 	bl	80102bc <__adddf3>
 802ffd6:	460b      	mov	r3, r1
 802ffd8:	4979      	ldr	r1, [pc, #484]	; (80301c0 <_strtod_l+0xbd0>)
 802ffda:	4a7b      	ldr	r2, [pc, #492]	; (80301c8 <_strtod_l+0xbd8>)
 802ffdc:	4019      	ands	r1, r3
 802ffde:	4291      	cmp	r1, r2
 802ffe0:	4680      	mov	r8, r0
 802ffe2:	d944      	bls.n	803006e <_strtod_l+0xa7e>
 802ffe4:	ee18 2a90 	vmov	r2, s17
 802ffe8:	4b78      	ldr	r3, [pc, #480]	; (80301cc <_strtod_l+0xbdc>)
 802ffea:	429a      	cmp	r2, r3
 802ffec:	d104      	bne.n	802fff8 <_strtod_l+0xa08>
 802ffee:	ee18 3a10 	vmov	r3, s16
 802fff2:	3301      	adds	r3, #1
 802fff4:	f43f ad40 	beq.w	802fa78 <_strtod_l+0x488>
 802fff8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80301cc <_strtod_l+0xbdc>
 802fffc:	f04f 38ff 	mov.w	r8, #4294967295
 8030000:	9916      	ldr	r1, [sp, #88]	; 0x58
 8030002:	4620      	mov	r0, r4
 8030004:	f7fe fe6a 	bl	802ecdc <_Bfree>
 8030008:	9905      	ldr	r1, [sp, #20]
 803000a:	4620      	mov	r0, r4
 803000c:	f7fe fe66 	bl	802ecdc <_Bfree>
 8030010:	4659      	mov	r1, fp
 8030012:	4620      	mov	r0, r4
 8030014:	f7fe fe62 	bl	802ecdc <_Bfree>
 8030018:	4629      	mov	r1, r5
 803001a:	4620      	mov	r0, r4
 803001c:	f7fe fe5e 	bl	802ecdc <_Bfree>
 8030020:	e609      	b.n	802fc36 <_strtod_l+0x646>
 8030022:	f1b8 0f01 	cmp.w	r8, #1
 8030026:	d103      	bne.n	8030030 <_strtod_l+0xa40>
 8030028:	f1b9 0f00 	cmp.w	r9, #0
 803002c:	f43f ad95 	beq.w	802fb5a <_strtod_l+0x56a>
 8030030:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8030188 <_strtod_l+0xb98>
 8030034:	4f60      	ldr	r7, [pc, #384]	; (80301b8 <_strtod_l+0xbc8>)
 8030036:	ed8d 7b06 	vstr	d7, [sp, #24]
 803003a:	2600      	movs	r6, #0
 803003c:	e7ae      	b.n	802ff9c <_strtod_l+0x9ac>
 803003e:	4f5f      	ldr	r7, [pc, #380]	; (80301bc <_strtod_l+0xbcc>)
 8030040:	2600      	movs	r6, #0
 8030042:	e7a7      	b.n	802ff94 <_strtod_l+0x9a4>
 8030044:	4b5d      	ldr	r3, [pc, #372]	; (80301bc <_strtod_l+0xbcc>)
 8030046:	4630      	mov	r0, r6
 8030048:	4639      	mov	r1, r7
 803004a:	2200      	movs	r2, #0
 803004c:	f7e0 faec 	bl	8010628 <__aeabi_dmul>
 8030050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8030052:	4606      	mov	r6, r0
 8030054:	460f      	mov	r7, r1
 8030056:	2b00      	cmp	r3, #0
 8030058:	d09c      	beq.n	802ff94 <_strtod_l+0x9a4>
 803005a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 803005e:	e79d      	b.n	802ff9c <_strtod_l+0x9ac>
 8030060:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8030190 <_strtod_l+0xba0>
 8030064:	ed8d 7b06 	vstr	d7, [sp, #24]
 8030068:	ec57 6b17 	vmov	r6, r7, d7
 803006c:	e796      	b.n	802ff9c <_strtod_l+0x9ac>
 803006e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8030072:	9b04      	ldr	r3, [sp, #16]
 8030074:	46ca      	mov	sl, r9
 8030076:	2b00      	cmp	r3, #0
 8030078:	d1c2      	bne.n	8030000 <_strtod_l+0xa10>
 803007a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 803007e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8030080:	0d1b      	lsrs	r3, r3, #20
 8030082:	051b      	lsls	r3, r3, #20
 8030084:	429a      	cmp	r2, r3
 8030086:	d1bb      	bne.n	8030000 <_strtod_l+0xa10>
 8030088:	4630      	mov	r0, r6
 803008a:	4639      	mov	r1, r7
 803008c:	f7e0 fe40 	bl	8010d10 <__aeabi_d2lz>
 8030090:	f7e0 fa9c 	bl	80105cc <__aeabi_l2d>
 8030094:	4602      	mov	r2, r0
 8030096:	460b      	mov	r3, r1
 8030098:	4630      	mov	r0, r6
 803009a:	4639      	mov	r1, r7
 803009c:	f7e0 f90c 	bl	80102b8 <__aeabi_dsub>
 80300a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80300a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80300a6:	ea43 0308 	orr.w	r3, r3, r8
 80300aa:	4313      	orrs	r3, r2
 80300ac:	4606      	mov	r6, r0
 80300ae:	460f      	mov	r7, r1
 80300b0:	d054      	beq.n	803015c <_strtod_l+0xb6c>
 80300b2:	a339      	add	r3, pc, #228	; (adr r3, 8030198 <_strtod_l+0xba8>)
 80300b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80300b8:	f7e0 fd28 	bl	8010b0c <__aeabi_dcmplt>
 80300bc:	2800      	cmp	r0, #0
 80300be:	f47f ace5 	bne.w	802fa8c <_strtod_l+0x49c>
 80300c2:	a337      	add	r3, pc, #220	; (adr r3, 80301a0 <_strtod_l+0xbb0>)
 80300c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80300c8:	4630      	mov	r0, r6
 80300ca:	4639      	mov	r1, r7
 80300cc:	f7e0 fd3c 	bl	8010b48 <__aeabi_dcmpgt>
 80300d0:	2800      	cmp	r0, #0
 80300d2:	d095      	beq.n	8030000 <_strtod_l+0xa10>
 80300d4:	e4da      	b.n	802fa8c <_strtod_l+0x49c>
 80300d6:	9b04      	ldr	r3, [sp, #16]
 80300d8:	b333      	cbz	r3, 8030128 <_strtod_l+0xb38>
 80300da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80300dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80300e0:	d822      	bhi.n	8030128 <_strtod_l+0xb38>
 80300e2:	a331      	add	r3, pc, #196	; (adr r3, 80301a8 <_strtod_l+0xbb8>)
 80300e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80300e8:	4630      	mov	r0, r6
 80300ea:	4639      	mov	r1, r7
 80300ec:	f7e0 fd18 	bl	8010b20 <__aeabi_dcmple>
 80300f0:	b1a0      	cbz	r0, 803011c <_strtod_l+0xb2c>
 80300f2:	4639      	mov	r1, r7
 80300f4:	4630      	mov	r0, r6
 80300f6:	f7e0 fd6f 	bl	8010bd8 <__aeabi_d2uiz>
 80300fa:	2801      	cmp	r0, #1
 80300fc:	bf38      	it	cc
 80300fe:	2001      	movcc	r0, #1
 8030100:	f7e0 fa18 	bl	8010534 <__aeabi_ui2d>
 8030104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8030106:	4606      	mov	r6, r0
 8030108:	460f      	mov	r7, r1
 803010a:	bb23      	cbnz	r3, 8030156 <_strtod_l+0xb66>
 803010c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8030110:	9010      	str	r0, [sp, #64]	; 0x40
 8030112:	9311      	str	r3, [sp, #68]	; 0x44
 8030114:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8030118:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 803011c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803011e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8030120:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8030124:	1a9b      	subs	r3, r3, r2
 8030126:	930f      	str	r3, [sp, #60]	; 0x3c
 8030128:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 803012c:	eeb0 0a48 	vmov.f32	s0, s16
 8030130:	eef0 0a68 	vmov.f32	s1, s17
 8030134:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8030138:	f7ff f8fc 	bl	802f334 <__ulp>
 803013c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8030140:	ec53 2b10 	vmov	r2, r3, d0
 8030144:	f7e0 fa70 	bl	8010628 <__aeabi_dmul>
 8030148:	ec53 2b18 	vmov	r2, r3, d8
 803014c:	f7e0 f8b6 	bl	80102bc <__adddf3>
 8030150:	4680      	mov	r8, r0
 8030152:	4689      	mov	r9, r1
 8030154:	e78d      	b.n	8030072 <_strtod_l+0xa82>
 8030156:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 803015a:	e7db      	b.n	8030114 <_strtod_l+0xb24>
 803015c:	a314      	add	r3, pc, #80	; (adr r3, 80301b0 <_strtod_l+0xbc0>)
 803015e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030162:	f7e0 fcd3 	bl	8010b0c <__aeabi_dcmplt>
 8030166:	e7b3      	b.n	80300d0 <_strtod_l+0xae0>
 8030168:	2300      	movs	r3, #0
 803016a:	930a      	str	r3, [sp, #40]	; 0x28
 803016c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 803016e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8030170:	6013      	str	r3, [r2, #0]
 8030172:	f7ff ba7c 	b.w	802f66e <_strtod_l+0x7e>
 8030176:	2a65      	cmp	r2, #101	; 0x65
 8030178:	f43f ab75 	beq.w	802f866 <_strtod_l+0x276>
 803017c:	2a45      	cmp	r2, #69	; 0x45
 803017e:	f43f ab72 	beq.w	802f866 <_strtod_l+0x276>
 8030182:	2301      	movs	r3, #1
 8030184:	f7ff bbaa 	b.w	802f8dc <_strtod_l+0x2ec>
 8030188:	00000000 	.word	0x00000000
 803018c:	bff00000 	.word	0xbff00000
 8030190:	00000000 	.word	0x00000000
 8030194:	3ff00000 	.word	0x3ff00000
 8030198:	94a03595 	.word	0x94a03595
 803019c:	3fdfffff 	.word	0x3fdfffff
 80301a0:	35afe535 	.word	0x35afe535
 80301a4:	3fe00000 	.word	0x3fe00000
 80301a8:	ffc00000 	.word	0xffc00000
 80301ac:	41dfffff 	.word	0x41dfffff
 80301b0:	94a03595 	.word	0x94a03595
 80301b4:	3fcfffff 	.word	0x3fcfffff
 80301b8:	3ff00000 	.word	0x3ff00000
 80301bc:	3fe00000 	.word	0x3fe00000
 80301c0:	7ff00000 	.word	0x7ff00000
 80301c4:	7fe00000 	.word	0x7fe00000
 80301c8:	7c9fffff 	.word	0x7c9fffff
 80301cc:	7fefffff 	.word	0x7fefffff

080301d0 <_strtod_r>:
 80301d0:	4b01      	ldr	r3, [pc, #4]	; (80301d8 <_strtod_r+0x8>)
 80301d2:	f7ff ba0d 	b.w	802f5f0 <_strtod_l>
 80301d6:	bf00      	nop
 80301d8:	2000018c 	.word	0x2000018c

080301dc <_strtol_l.constprop.0>:
 80301dc:	2b01      	cmp	r3, #1
 80301de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80301e2:	d001      	beq.n	80301e8 <_strtol_l.constprop.0+0xc>
 80301e4:	2b24      	cmp	r3, #36	; 0x24
 80301e6:	d906      	bls.n	80301f6 <_strtol_l.constprop.0+0x1a>
 80301e8:	f7fd fe20 	bl	802de2c <__errno>
 80301ec:	2316      	movs	r3, #22
 80301ee:	6003      	str	r3, [r0, #0]
 80301f0:	2000      	movs	r0, #0
 80301f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80301f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80302dc <_strtol_l.constprop.0+0x100>
 80301fa:	460d      	mov	r5, r1
 80301fc:	462e      	mov	r6, r5
 80301fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8030202:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8030206:	f017 0708 	ands.w	r7, r7, #8
 803020a:	d1f7      	bne.n	80301fc <_strtol_l.constprop.0+0x20>
 803020c:	2c2d      	cmp	r4, #45	; 0x2d
 803020e:	d132      	bne.n	8030276 <_strtol_l.constprop.0+0x9a>
 8030210:	782c      	ldrb	r4, [r5, #0]
 8030212:	2701      	movs	r7, #1
 8030214:	1cb5      	adds	r5, r6, #2
 8030216:	2b00      	cmp	r3, #0
 8030218:	d05b      	beq.n	80302d2 <_strtol_l.constprop.0+0xf6>
 803021a:	2b10      	cmp	r3, #16
 803021c:	d109      	bne.n	8030232 <_strtol_l.constprop.0+0x56>
 803021e:	2c30      	cmp	r4, #48	; 0x30
 8030220:	d107      	bne.n	8030232 <_strtol_l.constprop.0+0x56>
 8030222:	782c      	ldrb	r4, [r5, #0]
 8030224:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8030228:	2c58      	cmp	r4, #88	; 0x58
 803022a:	d14d      	bne.n	80302c8 <_strtol_l.constprop.0+0xec>
 803022c:	786c      	ldrb	r4, [r5, #1]
 803022e:	2310      	movs	r3, #16
 8030230:	3502      	adds	r5, #2
 8030232:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8030236:	f108 38ff 	add.w	r8, r8, #4294967295
 803023a:	f04f 0e00 	mov.w	lr, #0
 803023e:	fbb8 f9f3 	udiv	r9, r8, r3
 8030242:	4676      	mov	r6, lr
 8030244:	fb03 8a19 	mls	sl, r3, r9, r8
 8030248:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 803024c:	f1bc 0f09 	cmp.w	ip, #9
 8030250:	d816      	bhi.n	8030280 <_strtol_l.constprop.0+0xa4>
 8030252:	4664      	mov	r4, ip
 8030254:	42a3      	cmp	r3, r4
 8030256:	dd24      	ble.n	80302a2 <_strtol_l.constprop.0+0xc6>
 8030258:	f1be 3fff 	cmp.w	lr, #4294967295
 803025c:	d008      	beq.n	8030270 <_strtol_l.constprop.0+0x94>
 803025e:	45b1      	cmp	r9, r6
 8030260:	d31c      	bcc.n	803029c <_strtol_l.constprop.0+0xc0>
 8030262:	d101      	bne.n	8030268 <_strtol_l.constprop.0+0x8c>
 8030264:	45a2      	cmp	sl, r4
 8030266:	db19      	blt.n	803029c <_strtol_l.constprop.0+0xc0>
 8030268:	fb06 4603 	mla	r6, r6, r3, r4
 803026c:	f04f 0e01 	mov.w	lr, #1
 8030270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8030274:	e7e8      	b.n	8030248 <_strtol_l.constprop.0+0x6c>
 8030276:	2c2b      	cmp	r4, #43	; 0x2b
 8030278:	bf04      	itt	eq
 803027a:	782c      	ldrbeq	r4, [r5, #0]
 803027c:	1cb5      	addeq	r5, r6, #2
 803027e:	e7ca      	b.n	8030216 <_strtol_l.constprop.0+0x3a>
 8030280:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8030284:	f1bc 0f19 	cmp.w	ip, #25
 8030288:	d801      	bhi.n	803028e <_strtol_l.constprop.0+0xb2>
 803028a:	3c37      	subs	r4, #55	; 0x37
 803028c:	e7e2      	b.n	8030254 <_strtol_l.constprop.0+0x78>
 803028e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8030292:	f1bc 0f19 	cmp.w	ip, #25
 8030296:	d804      	bhi.n	80302a2 <_strtol_l.constprop.0+0xc6>
 8030298:	3c57      	subs	r4, #87	; 0x57
 803029a:	e7db      	b.n	8030254 <_strtol_l.constprop.0+0x78>
 803029c:	f04f 3eff 	mov.w	lr, #4294967295
 80302a0:	e7e6      	b.n	8030270 <_strtol_l.constprop.0+0x94>
 80302a2:	f1be 3fff 	cmp.w	lr, #4294967295
 80302a6:	d105      	bne.n	80302b4 <_strtol_l.constprop.0+0xd8>
 80302a8:	2322      	movs	r3, #34	; 0x22
 80302aa:	6003      	str	r3, [r0, #0]
 80302ac:	4646      	mov	r6, r8
 80302ae:	b942      	cbnz	r2, 80302c2 <_strtol_l.constprop.0+0xe6>
 80302b0:	4630      	mov	r0, r6
 80302b2:	e79e      	b.n	80301f2 <_strtol_l.constprop.0+0x16>
 80302b4:	b107      	cbz	r7, 80302b8 <_strtol_l.constprop.0+0xdc>
 80302b6:	4276      	negs	r6, r6
 80302b8:	2a00      	cmp	r2, #0
 80302ba:	d0f9      	beq.n	80302b0 <_strtol_l.constprop.0+0xd4>
 80302bc:	f1be 0f00 	cmp.w	lr, #0
 80302c0:	d000      	beq.n	80302c4 <_strtol_l.constprop.0+0xe8>
 80302c2:	1e69      	subs	r1, r5, #1
 80302c4:	6011      	str	r1, [r2, #0]
 80302c6:	e7f3      	b.n	80302b0 <_strtol_l.constprop.0+0xd4>
 80302c8:	2430      	movs	r4, #48	; 0x30
 80302ca:	2b00      	cmp	r3, #0
 80302cc:	d1b1      	bne.n	8030232 <_strtol_l.constprop.0+0x56>
 80302ce:	2308      	movs	r3, #8
 80302d0:	e7af      	b.n	8030232 <_strtol_l.constprop.0+0x56>
 80302d2:	2c30      	cmp	r4, #48	; 0x30
 80302d4:	d0a5      	beq.n	8030222 <_strtol_l.constprop.0+0x46>
 80302d6:	230a      	movs	r3, #10
 80302d8:	e7ab      	b.n	8030232 <_strtol_l.constprop.0+0x56>
 80302da:	bf00      	nop
 80302dc:	08035041 	.word	0x08035041

080302e0 <_strtol_r>:
 80302e0:	f7ff bf7c 	b.w	80301dc <_strtol_l.constprop.0>

080302e4 <__ssputs_r>:
 80302e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80302e8:	688e      	ldr	r6, [r1, #8]
 80302ea:	461f      	mov	r7, r3
 80302ec:	42be      	cmp	r6, r7
 80302ee:	680b      	ldr	r3, [r1, #0]
 80302f0:	4682      	mov	sl, r0
 80302f2:	460c      	mov	r4, r1
 80302f4:	4690      	mov	r8, r2
 80302f6:	d82c      	bhi.n	8030352 <__ssputs_r+0x6e>
 80302f8:	898a      	ldrh	r2, [r1, #12]
 80302fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80302fe:	d026      	beq.n	803034e <__ssputs_r+0x6a>
 8030300:	6965      	ldr	r5, [r4, #20]
 8030302:	6909      	ldr	r1, [r1, #16]
 8030304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8030308:	eba3 0901 	sub.w	r9, r3, r1
 803030c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8030310:	1c7b      	adds	r3, r7, #1
 8030312:	444b      	add	r3, r9
 8030314:	106d      	asrs	r5, r5, #1
 8030316:	429d      	cmp	r5, r3
 8030318:	bf38      	it	cc
 803031a:	461d      	movcc	r5, r3
 803031c:	0553      	lsls	r3, r2, #21
 803031e:	d527      	bpl.n	8030370 <__ssputs_r+0x8c>
 8030320:	4629      	mov	r1, r5
 8030322:	f7fc fa77 	bl	802c814 <_malloc_r>
 8030326:	4606      	mov	r6, r0
 8030328:	b360      	cbz	r0, 8030384 <__ssputs_r+0xa0>
 803032a:	6921      	ldr	r1, [r4, #16]
 803032c:	464a      	mov	r2, r9
 803032e:	f7fd fdb2 	bl	802de96 <memcpy>
 8030332:	89a3      	ldrh	r3, [r4, #12]
 8030334:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8030338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 803033c:	81a3      	strh	r3, [r4, #12]
 803033e:	6126      	str	r6, [r4, #16]
 8030340:	6165      	str	r5, [r4, #20]
 8030342:	444e      	add	r6, r9
 8030344:	eba5 0509 	sub.w	r5, r5, r9
 8030348:	6026      	str	r6, [r4, #0]
 803034a:	60a5      	str	r5, [r4, #8]
 803034c:	463e      	mov	r6, r7
 803034e:	42be      	cmp	r6, r7
 8030350:	d900      	bls.n	8030354 <__ssputs_r+0x70>
 8030352:	463e      	mov	r6, r7
 8030354:	6820      	ldr	r0, [r4, #0]
 8030356:	4632      	mov	r2, r6
 8030358:	4641      	mov	r1, r8
 803035a:	f7fd fbad 	bl	802dab8 <memmove>
 803035e:	68a3      	ldr	r3, [r4, #8]
 8030360:	1b9b      	subs	r3, r3, r6
 8030362:	60a3      	str	r3, [r4, #8]
 8030364:	6823      	ldr	r3, [r4, #0]
 8030366:	4433      	add	r3, r6
 8030368:	6023      	str	r3, [r4, #0]
 803036a:	2000      	movs	r0, #0
 803036c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030370:	462a      	mov	r2, r5
 8030372:	f001 face 	bl	8031912 <_realloc_r>
 8030376:	4606      	mov	r6, r0
 8030378:	2800      	cmp	r0, #0
 803037a:	d1e0      	bne.n	803033e <__ssputs_r+0x5a>
 803037c:	6921      	ldr	r1, [r4, #16]
 803037e:	4650      	mov	r0, sl
 8030380:	f7fe fc20 	bl	802ebc4 <_free_r>
 8030384:	230c      	movs	r3, #12
 8030386:	f8ca 3000 	str.w	r3, [sl]
 803038a:	89a3      	ldrh	r3, [r4, #12]
 803038c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030390:	81a3      	strh	r3, [r4, #12]
 8030392:	f04f 30ff 	mov.w	r0, #4294967295
 8030396:	e7e9      	b.n	803036c <__ssputs_r+0x88>

08030398 <_svfiprintf_r>:
 8030398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803039c:	4698      	mov	r8, r3
 803039e:	898b      	ldrh	r3, [r1, #12]
 80303a0:	061b      	lsls	r3, r3, #24
 80303a2:	b09d      	sub	sp, #116	; 0x74
 80303a4:	4607      	mov	r7, r0
 80303a6:	460d      	mov	r5, r1
 80303a8:	4614      	mov	r4, r2
 80303aa:	d50e      	bpl.n	80303ca <_svfiprintf_r+0x32>
 80303ac:	690b      	ldr	r3, [r1, #16]
 80303ae:	b963      	cbnz	r3, 80303ca <_svfiprintf_r+0x32>
 80303b0:	2140      	movs	r1, #64	; 0x40
 80303b2:	f7fc fa2f 	bl	802c814 <_malloc_r>
 80303b6:	6028      	str	r0, [r5, #0]
 80303b8:	6128      	str	r0, [r5, #16]
 80303ba:	b920      	cbnz	r0, 80303c6 <_svfiprintf_r+0x2e>
 80303bc:	230c      	movs	r3, #12
 80303be:	603b      	str	r3, [r7, #0]
 80303c0:	f04f 30ff 	mov.w	r0, #4294967295
 80303c4:	e0d0      	b.n	8030568 <_svfiprintf_r+0x1d0>
 80303c6:	2340      	movs	r3, #64	; 0x40
 80303c8:	616b      	str	r3, [r5, #20]
 80303ca:	2300      	movs	r3, #0
 80303cc:	9309      	str	r3, [sp, #36]	; 0x24
 80303ce:	2320      	movs	r3, #32
 80303d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80303d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80303d8:	2330      	movs	r3, #48	; 0x30
 80303da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8030580 <_svfiprintf_r+0x1e8>
 80303de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80303e2:	f04f 0901 	mov.w	r9, #1
 80303e6:	4623      	mov	r3, r4
 80303e8:	469a      	mov	sl, r3
 80303ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80303ee:	b10a      	cbz	r2, 80303f4 <_svfiprintf_r+0x5c>
 80303f0:	2a25      	cmp	r2, #37	; 0x25
 80303f2:	d1f9      	bne.n	80303e8 <_svfiprintf_r+0x50>
 80303f4:	ebba 0b04 	subs.w	fp, sl, r4
 80303f8:	d00b      	beq.n	8030412 <_svfiprintf_r+0x7a>
 80303fa:	465b      	mov	r3, fp
 80303fc:	4622      	mov	r2, r4
 80303fe:	4629      	mov	r1, r5
 8030400:	4638      	mov	r0, r7
 8030402:	f7ff ff6f 	bl	80302e4 <__ssputs_r>
 8030406:	3001      	adds	r0, #1
 8030408:	f000 80a9 	beq.w	803055e <_svfiprintf_r+0x1c6>
 803040c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803040e:	445a      	add	r2, fp
 8030410:	9209      	str	r2, [sp, #36]	; 0x24
 8030412:	f89a 3000 	ldrb.w	r3, [sl]
 8030416:	2b00      	cmp	r3, #0
 8030418:	f000 80a1 	beq.w	803055e <_svfiprintf_r+0x1c6>
 803041c:	2300      	movs	r3, #0
 803041e:	f04f 32ff 	mov.w	r2, #4294967295
 8030422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030426:	f10a 0a01 	add.w	sl, sl, #1
 803042a:	9304      	str	r3, [sp, #16]
 803042c:	9307      	str	r3, [sp, #28]
 803042e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030432:	931a      	str	r3, [sp, #104]	; 0x68
 8030434:	4654      	mov	r4, sl
 8030436:	2205      	movs	r2, #5
 8030438:	f814 1b01 	ldrb.w	r1, [r4], #1
 803043c:	4850      	ldr	r0, [pc, #320]	; (8030580 <_svfiprintf_r+0x1e8>)
 803043e:	f7df fedf 	bl	8010200 <memchr>
 8030442:	9a04      	ldr	r2, [sp, #16]
 8030444:	b9d8      	cbnz	r0, 803047e <_svfiprintf_r+0xe6>
 8030446:	06d0      	lsls	r0, r2, #27
 8030448:	bf44      	itt	mi
 803044a:	2320      	movmi	r3, #32
 803044c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030450:	0711      	lsls	r1, r2, #28
 8030452:	bf44      	itt	mi
 8030454:	232b      	movmi	r3, #43	; 0x2b
 8030456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803045a:	f89a 3000 	ldrb.w	r3, [sl]
 803045e:	2b2a      	cmp	r3, #42	; 0x2a
 8030460:	d015      	beq.n	803048e <_svfiprintf_r+0xf6>
 8030462:	9a07      	ldr	r2, [sp, #28]
 8030464:	4654      	mov	r4, sl
 8030466:	2000      	movs	r0, #0
 8030468:	f04f 0c0a 	mov.w	ip, #10
 803046c:	4621      	mov	r1, r4
 803046e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030472:	3b30      	subs	r3, #48	; 0x30
 8030474:	2b09      	cmp	r3, #9
 8030476:	d94d      	bls.n	8030514 <_svfiprintf_r+0x17c>
 8030478:	b1b0      	cbz	r0, 80304a8 <_svfiprintf_r+0x110>
 803047a:	9207      	str	r2, [sp, #28]
 803047c:	e014      	b.n	80304a8 <_svfiprintf_r+0x110>
 803047e:	eba0 0308 	sub.w	r3, r0, r8
 8030482:	fa09 f303 	lsl.w	r3, r9, r3
 8030486:	4313      	orrs	r3, r2
 8030488:	9304      	str	r3, [sp, #16]
 803048a:	46a2      	mov	sl, r4
 803048c:	e7d2      	b.n	8030434 <_svfiprintf_r+0x9c>
 803048e:	9b03      	ldr	r3, [sp, #12]
 8030490:	1d19      	adds	r1, r3, #4
 8030492:	681b      	ldr	r3, [r3, #0]
 8030494:	9103      	str	r1, [sp, #12]
 8030496:	2b00      	cmp	r3, #0
 8030498:	bfbb      	ittet	lt
 803049a:	425b      	neglt	r3, r3
 803049c:	f042 0202 	orrlt.w	r2, r2, #2
 80304a0:	9307      	strge	r3, [sp, #28]
 80304a2:	9307      	strlt	r3, [sp, #28]
 80304a4:	bfb8      	it	lt
 80304a6:	9204      	strlt	r2, [sp, #16]
 80304a8:	7823      	ldrb	r3, [r4, #0]
 80304aa:	2b2e      	cmp	r3, #46	; 0x2e
 80304ac:	d10c      	bne.n	80304c8 <_svfiprintf_r+0x130>
 80304ae:	7863      	ldrb	r3, [r4, #1]
 80304b0:	2b2a      	cmp	r3, #42	; 0x2a
 80304b2:	d134      	bne.n	803051e <_svfiprintf_r+0x186>
 80304b4:	9b03      	ldr	r3, [sp, #12]
 80304b6:	1d1a      	adds	r2, r3, #4
 80304b8:	681b      	ldr	r3, [r3, #0]
 80304ba:	9203      	str	r2, [sp, #12]
 80304bc:	2b00      	cmp	r3, #0
 80304be:	bfb8      	it	lt
 80304c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80304c4:	3402      	adds	r4, #2
 80304c6:	9305      	str	r3, [sp, #20]
 80304c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8030590 <_svfiprintf_r+0x1f8>
 80304cc:	7821      	ldrb	r1, [r4, #0]
 80304ce:	2203      	movs	r2, #3
 80304d0:	4650      	mov	r0, sl
 80304d2:	f7df fe95 	bl	8010200 <memchr>
 80304d6:	b138      	cbz	r0, 80304e8 <_svfiprintf_r+0x150>
 80304d8:	9b04      	ldr	r3, [sp, #16]
 80304da:	eba0 000a 	sub.w	r0, r0, sl
 80304de:	2240      	movs	r2, #64	; 0x40
 80304e0:	4082      	lsls	r2, r0
 80304e2:	4313      	orrs	r3, r2
 80304e4:	3401      	adds	r4, #1
 80304e6:	9304      	str	r3, [sp, #16]
 80304e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80304ec:	4825      	ldr	r0, [pc, #148]	; (8030584 <_svfiprintf_r+0x1ec>)
 80304ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80304f2:	2206      	movs	r2, #6
 80304f4:	f7df fe84 	bl	8010200 <memchr>
 80304f8:	2800      	cmp	r0, #0
 80304fa:	d038      	beq.n	803056e <_svfiprintf_r+0x1d6>
 80304fc:	4b22      	ldr	r3, [pc, #136]	; (8030588 <_svfiprintf_r+0x1f0>)
 80304fe:	bb1b      	cbnz	r3, 8030548 <_svfiprintf_r+0x1b0>
 8030500:	9b03      	ldr	r3, [sp, #12]
 8030502:	3307      	adds	r3, #7
 8030504:	f023 0307 	bic.w	r3, r3, #7
 8030508:	3308      	adds	r3, #8
 803050a:	9303      	str	r3, [sp, #12]
 803050c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803050e:	4433      	add	r3, r6
 8030510:	9309      	str	r3, [sp, #36]	; 0x24
 8030512:	e768      	b.n	80303e6 <_svfiprintf_r+0x4e>
 8030514:	fb0c 3202 	mla	r2, ip, r2, r3
 8030518:	460c      	mov	r4, r1
 803051a:	2001      	movs	r0, #1
 803051c:	e7a6      	b.n	803046c <_svfiprintf_r+0xd4>
 803051e:	2300      	movs	r3, #0
 8030520:	3401      	adds	r4, #1
 8030522:	9305      	str	r3, [sp, #20]
 8030524:	4619      	mov	r1, r3
 8030526:	f04f 0c0a 	mov.w	ip, #10
 803052a:	4620      	mov	r0, r4
 803052c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030530:	3a30      	subs	r2, #48	; 0x30
 8030532:	2a09      	cmp	r2, #9
 8030534:	d903      	bls.n	803053e <_svfiprintf_r+0x1a6>
 8030536:	2b00      	cmp	r3, #0
 8030538:	d0c6      	beq.n	80304c8 <_svfiprintf_r+0x130>
 803053a:	9105      	str	r1, [sp, #20]
 803053c:	e7c4      	b.n	80304c8 <_svfiprintf_r+0x130>
 803053e:	fb0c 2101 	mla	r1, ip, r1, r2
 8030542:	4604      	mov	r4, r0
 8030544:	2301      	movs	r3, #1
 8030546:	e7f0      	b.n	803052a <_svfiprintf_r+0x192>
 8030548:	ab03      	add	r3, sp, #12
 803054a:	9300      	str	r3, [sp, #0]
 803054c:	462a      	mov	r2, r5
 803054e:	4b0f      	ldr	r3, [pc, #60]	; (803058c <_svfiprintf_r+0x1f4>)
 8030550:	a904      	add	r1, sp, #16
 8030552:	4638      	mov	r0, r7
 8030554:	f7fc fa8a 	bl	802ca6c <_printf_float>
 8030558:	1c42      	adds	r2, r0, #1
 803055a:	4606      	mov	r6, r0
 803055c:	d1d6      	bne.n	803050c <_svfiprintf_r+0x174>
 803055e:	89ab      	ldrh	r3, [r5, #12]
 8030560:	065b      	lsls	r3, r3, #25
 8030562:	f53f af2d 	bmi.w	80303c0 <_svfiprintf_r+0x28>
 8030566:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030568:	b01d      	add	sp, #116	; 0x74
 803056a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803056e:	ab03      	add	r3, sp, #12
 8030570:	9300      	str	r3, [sp, #0]
 8030572:	462a      	mov	r2, r5
 8030574:	4b05      	ldr	r3, [pc, #20]	; (803058c <_svfiprintf_r+0x1f4>)
 8030576:	a904      	add	r1, sp, #16
 8030578:	4638      	mov	r0, r7
 803057a:	f7fc fd1b 	bl	802cfb4 <_printf_i>
 803057e:	e7eb      	b.n	8030558 <_svfiprintf_r+0x1c0>
 8030580:	08035141 	.word	0x08035141
 8030584:	0803514b 	.word	0x0803514b
 8030588:	0802ca6d 	.word	0x0802ca6d
 803058c:	080302e5 	.word	0x080302e5
 8030590:	08035147 	.word	0x08035147

08030594 <_sungetc_r>:
 8030594:	b538      	push	{r3, r4, r5, lr}
 8030596:	1c4b      	adds	r3, r1, #1
 8030598:	4614      	mov	r4, r2
 803059a:	d103      	bne.n	80305a4 <_sungetc_r+0x10>
 803059c:	f04f 35ff 	mov.w	r5, #4294967295
 80305a0:	4628      	mov	r0, r5
 80305a2:	bd38      	pop	{r3, r4, r5, pc}
 80305a4:	8993      	ldrh	r3, [r2, #12]
 80305a6:	f023 0320 	bic.w	r3, r3, #32
 80305aa:	8193      	strh	r3, [r2, #12]
 80305ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80305ae:	6852      	ldr	r2, [r2, #4]
 80305b0:	b2cd      	uxtb	r5, r1
 80305b2:	b18b      	cbz	r3, 80305d8 <_sungetc_r+0x44>
 80305b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80305b6:	4293      	cmp	r3, r2
 80305b8:	dd08      	ble.n	80305cc <_sungetc_r+0x38>
 80305ba:	6823      	ldr	r3, [r4, #0]
 80305bc:	1e5a      	subs	r2, r3, #1
 80305be:	6022      	str	r2, [r4, #0]
 80305c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80305c4:	6863      	ldr	r3, [r4, #4]
 80305c6:	3301      	adds	r3, #1
 80305c8:	6063      	str	r3, [r4, #4]
 80305ca:	e7e9      	b.n	80305a0 <_sungetc_r+0xc>
 80305cc:	4621      	mov	r1, r4
 80305ce:	f000 fd8e 	bl	80310ee <__submore>
 80305d2:	2800      	cmp	r0, #0
 80305d4:	d0f1      	beq.n	80305ba <_sungetc_r+0x26>
 80305d6:	e7e1      	b.n	803059c <_sungetc_r+0x8>
 80305d8:	6921      	ldr	r1, [r4, #16]
 80305da:	6823      	ldr	r3, [r4, #0]
 80305dc:	b151      	cbz	r1, 80305f4 <_sungetc_r+0x60>
 80305de:	4299      	cmp	r1, r3
 80305e0:	d208      	bcs.n	80305f4 <_sungetc_r+0x60>
 80305e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80305e6:	42a9      	cmp	r1, r5
 80305e8:	d104      	bne.n	80305f4 <_sungetc_r+0x60>
 80305ea:	3b01      	subs	r3, #1
 80305ec:	3201      	adds	r2, #1
 80305ee:	6023      	str	r3, [r4, #0]
 80305f0:	6062      	str	r2, [r4, #4]
 80305f2:	e7d5      	b.n	80305a0 <_sungetc_r+0xc>
 80305f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80305f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80305fc:	6363      	str	r3, [r4, #52]	; 0x34
 80305fe:	2303      	movs	r3, #3
 8030600:	63a3      	str	r3, [r4, #56]	; 0x38
 8030602:	4623      	mov	r3, r4
 8030604:	f803 5f46 	strb.w	r5, [r3, #70]!
 8030608:	6023      	str	r3, [r4, #0]
 803060a:	2301      	movs	r3, #1
 803060c:	e7dc      	b.n	80305c8 <_sungetc_r+0x34>

0803060e <__ssrefill_r>:
 803060e:	b510      	push	{r4, lr}
 8030610:	460c      	mov	r4, r1
 8030612:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030614:	b169      	cbz	r1, 8030632 <__ssrefill_r+0x24>
 8030616:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803061a:	4299      	cmp	r1, r3
 803061c:	d001      	beq.n	8030622 <__ssrefill_r+0x14>
 803061e:	f7fe fad1 	bl	802ebc4 <_free_r>
 8030622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030624:	6063      	str	r3, [r4, #4]
 8030626:	2000      	movs	r0, #0
 8030628:	6360      	str	r0, [r4, #52]	; 0x34
 803062a:	b113      	cbz	r3, 8030632 <__ssrefill_r+0x24>
 803062c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 803062e:	6023      	str	r3, [r4, #0]
 8030630:	bd10      	pop	{r4, pc}
 8030632:	6923      	ldr	r3, [r4, #16]
 8030634:	6023      	str	r3, [r4, #0]
 8030636:	2300      	movs	r3, #0
 8030638:	6063      	str	r3, [r4, #4]
 803063a:	89a3      	ldrh	r3, [r4, #12]
 803063c:	f043 0320 	orr.w	r3, r3, #32
 8030640:	81a3      	strh	r3, [r4, #12]
 8030642:	f04f 30ff 	mov.w	r0, #4294967295
 8030646:	e7f3      	b.n	8030630 <__ssrefill_r+0x22>

08030648 <__ssvfiscanf_r>:
 8030648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803064c:	460c      	mov	r4, r1
 803064e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8030652:	2100      	movs	r1, #0
 8030654:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8030658:	49a6      	ldr	r1, [pc, #664]	; (80308f4 <__ssvfiscanf_r+0x2ac>)
 803065a:	91a0      	str	r1, [sp, #640]	; 0x280
 803065c:	f10d 0804 	add.w	r8, sp, #4
 8030660:	49a5      	ldr	r1, [pc, #660]	; (80308f8 <__ssvfiscanf_r+0x2b0>)
 8030662:	4fa6      	ldr	r7, [pc, #664]	; (80308fc <__ssvfiscanf_r+0x2b4>)
 8030664:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8030900 <__ssvfiscanf_r+0x2b8>
 8030668:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 803066c:	4606      	mov	r6, r0
 803066e:	91a1      	str	r1, [sp, #644]	; 0x284
 8030670:	9300      	str	r3, [sp, #0]
 8030672:	7813      	ldrb	r3, [r2, #0]
 8030674:	2b00      	cmp	r3, #0
 8030676:	f000 815a 	beq.w	803092e <__ssvfiscanf_r+0x2e6>
 803067a:	5cf9      	ldrb	r1, [r7, r3]
 803067c:	f011 0108 	ands.w	r1, r1, #8
 8030680:	f102 0501 	add.w	r5, r2, #1
 8030684:	d019      	beq.n	80306ba <__ssvfiscanf_r+0x72>
 8030686:	6863      	ldr	r3, [r4, #4]
 8030688:	2b00      	cmp	r3, #0
 803068a:	dd0f      	ble.n	80306ac <__ssvfiscanf_r+0x64>
 803068c:	6823      	ldr	r3, [r4, #0]
 803068e:	781a      	ldrb	r2, [r3, #0]
 8030690:	5cba      	ldrb	r2, [r7, r2]
 8030692:	0712      	lsls	r2, r2, #28
 8030694:	d401      	bmi.n	803069a <__ssvfiscanf_r+0x52>
 8030696:	462a      	mov	r2, r5
 8030698:	e7eb      	b.n	8030672 <__ssvfiscanf_r+0x2a>
 803069a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803069c:	3201      	adds	r2, #1
 803069e:	9245      	str	r2, [sp, #276]	; 0x114
 80306a0:	6862      	ldr	r2, [r4, #4]
 80306a2:	3301      	adds	r3, #1
 80306a4:	3a01      	subs	r2, #1
 80306a6:	6062      	str	r2, [r4, #4]
 80306a8:	6023      	str	r3, [r4, #0]
 80306aa:	e7ec      	b.n	8030686 <__ssvfiscanf_r+0x3e>
 80306ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80306ae:	4621      	mov	r1, r4
 80306b0:	4630      	mov	r0, r6
 80306b2:	4798      	blx	r3
 80306b4:	2800      	cmp	r0, #0
 80306b6:	d0e9      	beq.n	803068c <__ssvfiscanf_r+0x44>
 80306b8:	e7ed      	b.n	8030696 <__ssvfiscanf_r+0x4e>
 80306ba:	2b25      	cmp	r3, #37	; 0x25
 80306bc:	d012      	beq.n	80306e4 <__ssvfiscanf_r+0x9c>
 80306be:	469a      	mov	sl, r3
 80306c0:	6863      	ldr	r3, [r4, #4]
 80306c2:	2b00      	cmp	r3, #0
 80306c4:	f340 8091 	ble.w	80307ea <__ssvfiscanf_r+0x1a2>
 80306c8:	6822      	ldr	r2, [r4, #0]
 80306ca:	7813      	ldrb	r3, [r2, #0]
 80306cc:	4553      	cmp	r3, sl
 80306ce:	f040 812e 	bne.w	803092e <__ssvfiscanf_r+0x2e6>
 80306d2:	6863      	ldr	r3, [r4, #4]
 80306d4:	3b01      	subs	r3, #1
 80306d6:	6063      	str	r3, [r4, #4]
 80306d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80306da:	3201      	adds	r2, #1
 80306dc:	3301      	adds	r3, #1
 80306de:	6022      	str	r2, [r4, #0]
 80306e0:	9345      	str	r3, [sp, #276]	; 0x114
 80306e2:	e7d8      	b.n	8030696 <__ssvfiscanf_r+0x4e>
 80306e4:	9141      	str	r1, [sp, #260]	; 0x104
 80306e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80306e8:	7853      	ldrb	r3, [r2, #1]
 80306ea:	2b2a      	cmp	r3, #42	; 0x2a
 80306ec:	bf02      	ittt	eq
 80306ee:	2310      	moveq	r3, #16
 80306f0:	1c95      	addeq	r5, r2, #2
 80306f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80306f4:	220a      	movs	r2, #10
 80306f6:	46aa      	mov	sl, r5
 80306f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80306fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8030700:	2b09      	cmp	r3, #9
 8030702:	d91c      	bls.n	803073e <__ssvfiscanf_r+0xf6>
 8030704:	487e      	ldr	r0, [pc, #504]	; (8030900 <__ssvfiscanf_r+0x2b8>)
 8030706:	2203      	movs	r2, #3
 8030708:	f7df fd7a 	bl	8010200 <memchr>
 803070c:	b138      	cbz	r0, 803071e <__ssvfiscanf_r+0xd6>
 803070e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030710:	eba0 0009 	sub.w	r0, r0, r9
 8030714:	2301      	movs	r3, #1
 8030716:	4083      	lsls	r3, r0
 8030718:	4313      	orrs	r3, r2
 803071a:	9341      	str	r3, [sp, #260]	; 0x104
 803071c:	4655      	mov	r5, sl
 803071e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8030722:	2b78      	cmp	r3, #120	; 0x78
 8030724:	d806      	bhi.n	8030734 <__ssvfiscanf_r+0xec>
 8030726:	2b57      	cmp	r3, #87	; 0x57
 8030728:	d810      	bhi.n	803074c <__ssvfiscanf_r+0x104>
 803072a:	2b25      	cmp	r3, #37	; 0x25
 803072c:	d0c7      	beq.n	80306be <__ssvfiscanf_r+0x76>
 803072e:	d857      	bhi.n	80307e0 <__ssvfiscanf_r+0x198>
 8030730:	2b00      	cmp	r3, #0
 8030732:	d065      	beq.n	8030800 <__ssvfiscanf_r+0x1b8>
 8030734:	2303      	movs	r3, #3
 8030736:	9347      	str	r3, [sp, #284]	; 0x11c
 8030738:	230a      	movs	r3, #10
 803073a:	9342      	str	r3, [sp, #264]	; 0x108
 803073c:	e076      	b.n	803082c <__ssvfiscanf_r+0x1e4>
 803073e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8030740:	fb02 1103 	mla	r1, r2, r3, r1
 8030744:	3930      	subs	r1, #48	; 0x30
 8030746:	9143      	str	r1, [sp, #268]	; 0x10c
 8030748:	4655      	mov	r5, sl
 803074a:	e7d4      	b.n	80306f6 <__ssvfiscanf_r+0xae>
 803074c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8030750:	2a20      	cmp	r2, #32
 8030752:	d8ef      	bhi.n	8030734 <__ssvfiscanf_r+0xec>
 8030754:	a101      	add	r1, pc, #4	; (adr r1, 803075c <__ssvfiscanf_r+0x114>)
 8030756:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803075a:	bf00      	nop
 803075c:	0803080f 	.word	0x0803080f
 8030760:	08030735 	.word	0x08030735
 8030764:	08030735 	.word	0x08030735
 8030768:	0803086d 	.word	0x0803086d
 803076c:	08030735 	.word	0x08030735
 8030770:	08030735 	.word	0x08030735
 8030774:	08030735 	.word	0x08030735
 8030778:	08030735 	.word	0x08030735
 803077c:	08030735 	.word	0x08030735
 8030780:	08030735 	.word	0x08030735
 8030784:	08030735 	.word	0x08030735
 8030788:	08030883 	.word	0x08030883
 803078c:	08030869 	.word	0x08030869
 8030790:	080307e7 	.word	0x080307e7
 8030794:	080307e7 	.word	0x080307e7
 8030798:	080307e7 	.word	0x080307e7
 803079c:	08030735 	.word	0x08030735
 80307a0:	08030825 	.word	0x08030825
 80307a4:	08030735 	.word	0x08030735
 80307a8:	08030735 	.word	0x08030735
 80307ac:	08030735 	.word	0x08030735
 80307b0:	08030735 	.word	0x08030735
 80307b4:	08030893 	.word	0x08030893
 80307b8:	08030861 	.word	0x08030861
 80307bc:	08030807 	.word	0x08030807
 80307c0:	08030735 	.word	0x08030735
 80307c4:	08030735 	.word	0x08030735
 80307c8:	0803088f 	.word	0x0803088f
 80307cc:	08030735 	.word	0x08030735
 80307d0:	08030869 	.word	0x08030869
 80307d4:	08030735 	.word	0x08030735
 80307d8:	08030735 	.word	0x08030735
 80307dc:	0803080f 	.word	0x0803080f
 80307e0:	3b45      	subs	r3, #69	; 0x45
 80307e2:	2b02      	cmp	r3, #2
 80307e4:	d8a6      	bhi.n	8030734 <__ssvfiscanf_r+0xec>
 80307e6:	2305      	movs	r3, #5
 80307e8:	e01f      	b.n	803082a <__ssvfiscanf_r+0x1e2>
 80307ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80307ec:	4621      	mov	r1, r4
 80307ee:	4630      	mov	r0, r6
 80307f0:	4798      	blx	r3
 80307f2:	2800      	cmp	r0, #0
 80307f4:	f43f af68 	beq.w	80306c8 <__ssvfiscanf_r+0x80>
 80307f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80307fa:	2800      	cmp	r0, #0
 80307fc:	f040 808d 	bne.w	803091a <__ssvfiscanf_r+0x2d2>
 8030800:	f04f 30ff 	mov.w	r0, #4294967295
 8030804:	e08f      	b.n	8030926 <__ssvfiscanf_r+0x2de>
 8030806:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030808:	f042 0220 	orr.w	r2, r2, #32
 803080c:	9241      	str	r2, [sp, #260]	; 0x104
 803080e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030810:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030814:	9241      	str	r2, [sp, #260]	; 0x104
 8030816:	2210      	movs	r2, #16
 8030818:	2b6f      	cmp	r3, #111	; 0x6f
 803081a:	9242      	str	r2, [sp, #264]	; 0x108
 803081c:	bf34      	ite	cc
 803081e:	2303      	movcc	r3, #3
 8030820:	2304      	movcs	r3, #4
 8030822:	e002      	b.n	803082a <__ssvfiscanf_r+0x1e2>
 8030824:	2300      	movs	r3, #0
 8030826:	9342      	str	r3, [sp, #264]	; 0x108
 8030828:	2303      	movs	r3, #3
 803082a:	9347      	str	r3, [sp, #284]	; 0x11c
 803082c:	6863      	ldr	r3, [r4, #4]
 803082e:	2b00      	cmp	r3, #0
 8030830:	dd3d      	ble.n	80308ae <__ssvfiscanf_r+0x266>
 8030832:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030834:	0659      	lsls	r1, r3, #25
 8030836:	d404      	bmi.n	8030842 <__ssvfiscanf_r+0x1fa>
 8030838:	6823      	ldr	r3, [r4, #0]
 803083a:	781a      	ldrb	r2, [r3, #0]
 803083c:	5cba      	ldrb	r2, [r7, r2]
 803083e:	0712      	lsls	r2, r2, #28
 8030840:	d43c      	bmi.n	80308bc <__ssvfiscanf_r+0x274>
 8030842:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8030844:	2b02      	cmp	r3, #2
 8030846:	dc4b      	bgt.n	80308e0 <__ssvfiscanf_r+0x298>
 8030848:	466b      	mov	r3, sp
 803084a:	4622      	mov	r2, r4
 803084c:	a941      	add	r1, sp, #260	; 0x104
 803084e:	4630      	mov	r0, r6
 8030850:	f000 f9b6 	bl	8030bc0 <_scanf_chars>
 8030854:	2801      	cmp	r0, #1
 8030856:	d06a      	beq.n	803092e <__ssvfiscanf_r+0x2e6>
 8030858:	2802      	cmp	r0, #2
 803085a:	f47f af1c 	bne.w	8030696 <__ssvfiscanf_r+0x4e>
 803085e:	e7cb      	b.n	80307f8 <__ssvfiscanf_r+0x1b0>
 8030860:	2308      	movs	r3, #8
 8030862:	9342      	str	r3, [sp, #264]	; 0x108
 8030864:	2304      	movs	r3, #4
 8030866:	e7e0      	b.n	803082a <__ssvfiscanf_r+0x1e2>
 8030868:	220a      	movs	r2, #10
 803086a:	e7d5      	b.n	8030818 <__ssvfiscanf_r+0x1d0>
 803086c:	4629      	mov	r1, r5
 803086e:	4640      	mov	r0, r8
 8030870:	f000 fc04 	bl	803107c <__sccl>
 8030874:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803087a:	9341      	str	r3, [sp, #260]	; 0x104
 803087c:	4605      	mov	r5, r0
 803087e:	2301      	movs	r3, #1
 8030880:	e7d3      	b.n	803082a <__ssvfiscanf_r+0x1e2>
 8030882:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030888:	9341      	str	r3, [sp, #260]	; 0x104
 803088a:	2300      	movs	r3, #0
 803088c:	e7cd      	b.n	803082a <__ssvfiscanf_r+0x1e2>
 803088e:	2302      	movs	r3, #2
 8030890:	e7cb      	b.n	803082a <__ssvfiscanf_r+0x1e2>
 8030892:	9841      	ldr	r0, [sp, #260]	; 0x104
 8030894:	06c3      	lsls	r3, r0, #27
 8030896:	f53f aefe 	bmi.w	8030696 <__ssvfiscanf_r+0x4e>
 803089a:	9b00      	ldr	r3, [sp, #0]
 803089c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803089e:	1d19      	adds	r1, r3, #4
 80308a0:	9100      	str	r1, [sp, #0]
 80308a2:	681b      	ldr	r3, [r3, #0]
 80308a4:	07c0      	lsls	r0, r0, #31
 80308a6:	bf4c      	ite	mi
 80308a8:	801a      	strhmi	r2, [r3, #0]
 80308aa:	601a      	strpl	r2, [r3, #0]
 80308ac:	e6f3      	b.n	8030696 <__ssvfiscanf_r+0x4e>
 80308ae:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80308b0:	4621      	mov	r1, r4
 80308b2:	4630      	mov	r0, r6
 80308b4:	4798      	blx	r3
 80308b6:	2800      	cmp	r0, #0
 80308b8:	d0bb      	beq.n	8030832 <__ssvfiscanf_r+0x1ea>
 80308ba:	e79d      	b.n	80307f8 <__ssvfiscanf_r+0x1b0>
 80308bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80308be:	3201      	adds	r2, #1
 80308c0:	9245      	str	r2, [sp, #276]	; 0x114
 80308c2:	6862      	ldr	r2, [r4, #4]
 80308c4:	3a01      	subs	r2, #1
 80308c6:	2a00      	cmp	r2, #0
 80308c8:	6062      	str	r2, [r4, #4]
 80308ca:	dd02      	ble.n	80308d2 <__ssvfiscanf_r+0x28a>
 80308cc:	3301      	adds	r3, #1
 80308ce:	6023      	str	r3, [r4, #0]
 80308d0:	e7b2      	b.n	8030838 <__ssvfiscanf_r+0x1f0>
 80308d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80308d4:	4621      	mov	r1, r4
 80308d6:	4630      	mov	r0, r6
 80308d8:	4798      	blx	r3
 80308da:	2800      	cmp	r0, #0
 80308dc:	d0ac      	beq.n	8030838 <__ssvfiscanf_r+0x1f0>
 80308de:	e78b      	b.n	80307f8 <__ssvfiscanf_r+0x1b0>
 80308e0:	2b04      	cmp	r3, #4
 80308e2:	dc0f      	bgt.n	8030904 <__ssvfiscanf_r+0x2bc>
 80308e4:	466b      	mov	r3, sp
 80308e6:	4622      	mov	r2, r4
 80308e8:	a941      	add	r1, sp, #260	; 0x104
 80308ea:	4630      	mov	r0, r6
 80308ec:	f000 f9c2 	bl	8030c74 <_scanf_i>
 80308f0:	e7b0      	b.n	8030854 <__ssvfiscanf_r+0x20c>
 80308f2:	bf00      	nop
 80308f4:	08030595 	.word	0x08030595
 80308f8:	0803060f 	.word	0x0803060f
 80308fc:	08035041 	.word	0x08035041
 8030900:	08035147 	.word	0x08035147
 8030904:	4b0b      	ldr	r3, [pc, #44]	; (8030934 <__ssvfiscanf_r+0x2ec>)
 8030906:	2b00      	cmp	r3, #0
 8030908:	f43f aec5 	beq.w	8030696 <__ssvfiscanf_r+0x4e>
 803090c:	466b      	mov	r3, sp
 803090e:	4622      	mov	r2, r4
 8030910:	a941      	add	r1, sp, #260	; 0x104
 8030912:	4630      	mov	r0, r6
 8030914:	f7fc fc70 	bl	802d1f8 <_scanf_float>
 8030918:	e79c      	b.n	8030854 <__ssvfiscanf_r+0x20c>
 803091a:	89a3      	ldrh	r3, [r4, #12]
 803091c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8030920:	bf18      	it	ne
 8030922:	f04f 30ff 	movne.w	r0, #4294967295
 8030926:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 803092a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803092e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8030930:	e7f9      	b.n	8030926 <__ssvfiscanf_r+0x2de>
 8030932:	bf00      	nop
 8030934:	0802d1f9 	.word	0x0802d1f9

08030938 <__sfputc_r>:
 8030938:	6893      	ldr	r3, [r2, #8]
 803093a:	3b01      	subs	r3, #1
 803093c:	2b00      	cmp	r3, #0
 803093e:	b410      	push	{r4}
 8030940:	6093      	str	r3, [r2, #8]
 8030942:	da08      	bge.n	8030956 <__sfputc_r+0x1e>
 8030944:	6994      	ldr	r4, [r2, #24]
 8030946:	42a3      	cmp	r3, r4
 8030948:	db01      	blt.n	803094e <__sfputc_r+0x16>
 803094a:	290a      	cmp	r1, #10
 803094c:	d103      	bne.n	8030956 <__sfputc_r+0x1e>
 803094e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030952:	f7fd b80c 	b.w	802d96e <__swbuf_r>
 8030956:	6813      	ldr	r3, [r2, #0]
 8030958:	1c58      	adds	r0, r3, #1
 803095a:	6010      	str	r0, [r2, #0]
 803095c:	7019      	strb	r1, [r3, #0]
 803095e:	4608      	mov	r0, r1
 8030960:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030964:	4770      	bx	lr

08030966 <__sfputs_r>:
 8030966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030968:	4606      	mov	r6, r0
 803096a:	460f      	mov	r7, r1
 803096c:	4614      	mov	r4, r2
 803096e:	18d5      	adds	r5, r2, r3
 8030970:	42ac      	cmp	r4, r5
 8030972:	d101      	bne.n	8030978 <__sfputs_r+0x12>
 8030974:	2000      	movs	r0, #0
 8030976:	e007      	b.n	8030988 <__sfputs_r+0x22>
 8030978:	f814 1b01 	ldrb.w	r1, [r4], #1
 803097c:	463a      	mov	r2, r7
 803097e:	4630      	mov	r0, r6
 8030980:	f7ff ffda 	bl	8030938 <__sfputc_r>
 8030984:	1c43      	adds	r3, r0, #1
 8030986:	d1f3      	bne.n	8030970 <__sfputs_r+0xa>
 8030988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803098c <_vfiprintf_r>:
 803098c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030990:	460d      	mov	r5, r1
 8030992:	b09d      	sub	sp, #116	; 0x74
 8030994:	4614      	mov	r4, r2
 8030996:	4698      	mov	r8, r3
 8030998:	4606      	mov	r6, r0
 803099a:	b118      	cbz	r0, 80309a4 <_vfiprintf_r+0x18>
 803099c:	6a03      	ldr	r3, [r0, #32]
 803099e:	b90b      	cbnz	r3, 80309a4 <_vfiprintf_r+0x18>
 80309a0:	f7fc fec6 	bl	802d730 <__sinit>
 80309a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80309a6:	07d9      	lsls	r1, r3, #31
 80309a8:	d405      	bmi.n	80309b6 <_vfiprintf_r+0x2a>
 80309aa:	89ab      	ldrh	r3, [r5, #12]
 80309ac:	059a      	lsls	r2, r3, #22
 80309ae:	d402      	bmi.n	80309b6 <_vfiprintf_r+0x2a>
 80309b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80309b2:	f7fd fa66 	bl	802de82 <__retarget_lock_acquire_recursive>
 80309b6:	89ab      	ldrh	r3, [r5, #12]
 80309b8:	071b      	lsls	r3, r3, #28
 80309ba:	d501      	bpl.n	80309c0 <_vfiprintf_r+0x34>
 80309bc:	692b      	ldr	r3, [r5, #16]
 80309be:	b99b      	cbnz	r3, 80309e8 <_vfiprintf_r+0x5c>
 80309c0:	4629      	mov	r1, r5
 80309c2:	4630      	mov	r0, r6
 80309c4:	f7fd f810 	bl	802d9e8 <__swsetup_r>
 80309c8:	b170      	cbz	r0, 80309e8 <_vfiprintf_r+0x5c>
 80309ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80309cc:	07dc      	lsls	r4, r3, #31
 80309ce:	d504      	bpl.n	80309da <_vfiprintf_r+0x4e>
 80309d0:	f04f 30ff 	mov.w	r0, #4294967295
 80309d4:	b01d      	add	sp, #116	; 0x74
 80309d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80309da:	89ab      	ldrh	r3, [r5, #12]
 80309dc:	0598      	lsls	r0, r3, #22
 80309de:	d4f7      	bmi.n	80309d0 <_vfiprintf_r+0x44>
 80309e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80309e2:	f7fd fa4f 	bl	802de84 <__retarget_lock_release_recursive>
 80309e6:	e7f3      	b.n	80309d0 <_vfiprintf_r+0x44>
 80309e8:	2300      	movs	r3, #0
 80309ea:	9309      	str	r3, [sp, #36]	; 0x24
 80309ec:	2320      	movs	r3, #32
 80309ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80309f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80309f6:	2330      	movs	r3, #48	; 0x30
 80309f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8030bac <_vfiprintf_r+0x220>
 80309fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030a00:	f04f 0901 	mov.w	r9, #1
 8030a04:	4623      	mov	r3, r4
 8030a06:	469a      	mov	sl, r3
 8030a08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8030a0c:	b10a      	cbz	r2, 8030a12 <_vfiprintf_r+0x86>
 8030a0e:	2a25      	cmp	r2, #37	; 0x25
 8030a10:	d1f9      	bne.n	8030a06 <_vfiprintf_r+0x7a>
 8030a12:	ebba 0b04 	subs.w	fp, sl, r4
 8030a16:	d00b      	beq.n	8030a30 <_vfiprintf_r+0xa4>
 8030a18:	465b      	mov	r3, fp
 8030a1a:	4622      	mov	r2, r4
 8030a1c:	4629      	mov	r1, r5
 8030a1e:	4630      	mov	r0, r6
 8030a20:	f7ff ffa1 	bl	8030966 <__sfputs_r>
 8030a24:	3001      	adds	r0, #1
 8030a26:	f000 80a9 	beq.w	8030b7c <_vfiprintf_r+0x1f0>
 8030a2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8030a2c:	445a      	add	r2, fp
 8030a2e:	9209      	str	r2, [sp, #36]	; 0x24
 8030a30:	f89a 3000 	ldrb.w	r3, [sl]
 8030a34:	2b00      	cmp	r3, #0
 8030a36:	f000 80a1 	beq.w	8030b7c <_vfiprintf_r+0x1f0>
 8030a3a:	2300      	movs	r3, #0
 8030a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8030a40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030a44:	f10a 0a01 	add.w	sl, sl, #1
 8030a48:	9304      	str	r3, [sp, #16]
 8030a4a:	9307      	str	r3, [sp, #28]
 8030a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030a50:	931a      	str	r3, [sp, #104]	; 0x68
 8030a52:	4654      	mov	r4, sl
 8030a54:	2205      	movs	r2, #5
 8030a56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030a5a:	4854      	ldr	r0, [pc, #336]	; (8030bac <_vfiprintf_r+0x220>)
 8030a5c:	f7df fbd0 	bl	8010200 <memchr>
 8030a60:	9a04      	ldr	r2, [sp, #16]
 8030a62:	b9d8      	cbnz	r0, 8030a9c <_vfiprintf_r+0x110>
 8030a64:	06d1      	lsls	r1, r2, #27
 8030a66:	bf44      	itt	mi
 8030a68:	2320      	movmi	r3, #32
 8030a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030a6e:	0713      	lsls	r3, r2, #28
 8030a70:	bf44      	itt	mi
 8030a72:	232b      	movmi	r3, #43	; 0x2b
 8030a74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030a78:	f89a 3000 	ldrb.w	r3, [sl]
 8030a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8030a7e:	d015      	beq.n	8030aac <_vfiprintf_r+0x120>
 8030a80:	9a07      	ldr	r2, [sp, #28]
 8030a82:	4654      	mov	r4, sl
 8030a84:	2000      	movs	r0, #0
 8030a86:	f04f 0c0a 	mov.w	ip, #10
 8030a8a:	4621      	mov	r1, r4
 8030a8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030a90:	3b30      	subs	r3, #48	; 0x30
 8030a92:	2b09      	cmp	r3, #9
 8030a94:	d94d      	bls.n	8030b32 <_vfiprintf_r+0x1a6>
 8030a96:	b1b0      	cbz	r0, 8030ac6 <_vfiprintf_r+0x13a>
 8030a98:	9207      	str	r2, [sp, #28]
 8030a9a:	e014      	b.n	8030ac6 <_vfiprintf_r+0x13a>
 8030a9c:	eba0 0308 	sub.w	r3, r0, r8
 8030aa0:	fa09 f303 	lsl.w	r3, r9, r3
 8030aa4:	4313      	orrs	r3, r2
 8030aa6:	9304      	str	r3, [sp, #16]
 8030aa8:	46a2      	mov	sl, r4
 8030aaa:	e7d2      	b.n	8030a52 <_vfiprintf_r+0xc6>
 8030aac:	9b03      	ldr	r3, [sp, #12]
 8030aae:	1d19      	adds	r1, r3, #4
 8030ab0:	681b      	ldr	r3, [r3, #0]
 8030ab2:	9103      	str	r1, [sp, #12]
 8030ab4:	2b00      	cmp	r3, #0
 8030ab6:	bfbb      	ittet	lt
 8030ab8:	425b      	neglt	r3, r3
 8030aba:	f042 0202 	orrlt.w	r2, r2, #2
 8030abe:	9307      	strge	r3, [sp, #28]
 8030ac0:	9307      	strlt	r3, [sp, #28]
 8030ac2:	bfb8      	it	lt
 8030ac4:	9204      	strlt	r2, [sp, #16]
 8030ac6:	7823      	ldrb	r3, [r4, #0]
 8030ac8:	2b2e      	cmp	r3, #46	; 0x2e
 8030aca:	d10c      	bne.n	8030ae6 <_vfiprintf_r+0x15a>
 8030acc:	7863      	ldrb	r3, [r4, #1]
 8030ace:	2b2a      	cmp	r3, #42	; 0x2a
 8030ad0:	d134      	bne.n	8030b3c <_vfiprintf_r+0x1b0>
 8030ad2:	9b03      	ldr	r3, [sp, #12]
 8030ad4:	1d1a      	adds	r2, r3, #4
 8030ad6:	681b      	ldr	r3, [r3, #0]
 8030ad8:	9203      	str	r2, [sp, #12]
 8030ada:	2b00      	cmp	r3, #0
 8030adc:	bfb8      	it	lt
 8030ade:	f04f 33ff 	movlt.w	r3, #4294967295
 8030ae2:	3402      	adds	r4, #2
 8030ae4:	9305      	str	r3, [sp, #20]
 8030ae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8030bbc <_vfiprintf_r+0x230>
 8030aea:	7821      	ldrb	r1, [r4, #0]
 8030aec:	2203      	movs	r2, #3
 8030aee:	4650      	mov	r0, sl
 8030af0:	f7df fb86 	bl	8010200 <memchr>
 8030af4:	b138      	cbz	r0, 8030b06 <_vfiprintf_r+0x17a>
 8030af6:	9b04      	ldr	r3, [sp, #16]
 8030af8:	eba0 000a 	sub.w	r0, r0, sl
 8030afc:	2240      	movs	r2, #64	; 0x40
 8030afe:	4082      	lsls	r2, r0
 8030b00:	4313      	orrs	r3, r2
 8030b02:	3401      	adds	r4, #1
 8030b04:	9304      	str	r3, [sp, #16]
 8030b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030b0a:	4829      	ldr	r0, [pc, #164]	; (8030bb0 <_vfiprintf_r+0x224>)
 8030b0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030b10:	2206      	movs	r2, #6
 8030b12:	f7df fb75 	bl	8010200 <memchr>
 8030b16:	2800      	cmp	r0, #0
 8030b18:	d03f      	beq.n	8030b9a <_vfiprintf_r+0x20e>
 8030b1a:	4b26      	ldr	r3, [pc, #152]	; (8030bb4 <_vfiprintf_r+0x228>)
 8030b1c:	bb1b      	cbnz	r3, 8030b66 <_vfiprintf_r+0x1da>
 8030b1e:	9b03      	ldr	r3, [sp, #12]
 8030b20:	3307      	adds	r3, #7
 8030b22:	f023 0307 	bic.w	r3, r3, #7
 8030b26:	3308      	adds	r3, #8
 8030b28:	9303      	str	r3, [sp, #12]
 8030b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8030b2c:	443b      	add	r3, r7
 8030b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8030b30:	e768      	b.n	8030a04 <_vfiprintf_r+0x78>
 8030b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8030b36:	460c      	mov	r4, r1
 8030b38:	2001      	movs	r0, #1
 8030b3a:	e7a6      	b.n	8030a8a <_vfiprintf_r+0xfe>
 8030b3c:	2300      	movs	r3, #0
 8030b3e:	3401      	adds	r4, #1
 8030b40:	9305      	str	r3, [sp, #20]
 8030b42:	4619      	mov	r1, r3
 8030b44:	f04f 0c0a 	mov.w	ip, #10
 8030b48:	4620      	mov	r0, r4
 8030b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030b4e:	3a30      	subs	r2, #48	; 0x30
 8030b50:	2a09      	cmp	r2, #9
 8030b52:	d903      	bls.n	8030b5c <_vfiprintf_r+0x1d0>
 8030b54:	2b00      	cmp	r3, #0
 8030b56:	d0c6      	beq.n	8030ae6 <_vfiprintf_r+0x15a>
 8030b58:	9105      	str	r1, [sp, #20]
 8030b5a:	e7c4      	b.n	8030ae6 <_vfiprintf_r+0x15a>
 8030b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8030b60:	4604      	mov	r4, r0
 8030b62:	2301      	movs	r3, #1
 8030b64:	e7f0      	b.n	8030b48 <_vfiprintf_r+0x1bc>
 8030b66:	ab03      	add	r3, sp, #12
 8030b68:	9300      	str	r3, [sp, #0]
 8030b6a:	462a      	mov	r2, r5
 8030b6c:	4b12      	ldr	r3, [pc, #72]	; (8030bb8 <_vfiprintf_r+0x22c>)
 8030b6e:	a904      	add	r1, sp, #16
 8030b70:	4630      	mov	r0, r6
 8030b72:	f7fb ff7b 	bl	802ca6c <_printf_float>
 8030b76:	4607      	mov	r7, r0
 8030b78:	1c78      	adds	r0, r7, #1
 8030b7a:	d1d6      	bne.n	8030b2a <_vfiprintf_r+0x19e>
 8030b7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030b7e:	07d9      	lsls	r1, r3, #31
 8030b80:	d405      	bmi.n	8030b8e <_vfiprintf_r+0x202>
 8030b82:	89ab      	ldrh	r3, [r5, #12]
 8030b84:	059a      	lsls	r2, r3, #22
 8030b86:	d402      	bmi.n	8030b8e <_vfiprintf_r+0x202>
 8030b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030b8a:	f7fd f97b 	bl	802de84 <__retarget_lock_release_recursive>
 8030b8e:	89ab      	ldrh	r3, [r5, #12]
 8030b90:	065b      	lsls	r3, r3, #25
 8030b92:	f53f af1d 	bmi.w	80309d0 <_vfiprintf_r+0x44>
 8030b96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030b98:	e71c      	b.n	80309d4 <_vfiprintf_r+0x48>
 8030b9a:	ab03      	add	r3, sp, #12
 8030b9c:	9300      	str	r3, [sp, #0]
 8030b9e:	462a      	mov	r2, r5
 8030ba0:	4b05      	ldr	r3, [pc, #20]	; (8030bb8 <_vfiprintf_r+0x22c>)
 8030ba2:	a904      	add	r1, sp, #16
 8030ba4:	4630      	mov	r0, r6
 8030ba6:	f7fc fa05 	bl	802cfb4 <_printf_i>
 8030baa:	e7e4      	b.n	8030b76 <_vfiprintf_r+0x1ea>
 8030bac:	08035141 	.word	0x08035141
 8030bb0:	0803514b 	.word	0x0803514b
 8030bb4:	0802ca6d 	.word	0x0802ca6d
 8030bb8:	08030967 	.word	0x08030967
 8030bbc:	08035147 	.word	0x08035147

08030bc0 <_scanf_chars>:
 8030bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030bc4:	4615      	mov	r5, r2
 8030bc6:	688a      	ldr	r2, [r1, #8]
 8030bc8:	4680      	mov	r8, r0
 8030bca:	460c      	mov	r4, r1
 8030bcc:	b932      	cbnz	r2, 8030bdc <_scanf_chars+0x1c>
 8030bce:	698a      	ldr	r2, [r1, #24]
 8030bd0:	2a00      	cmp	r2, #0
 8030bd2:	bf0c      	ite	eq
 8030bd4:	2201      	moveq	r2, #1
 8030bd6:	f04f 32ff 	movne.w	r2, #4294967295
 8030bda:	608a      	str	r2, [r1, #8]
 8030bdc:	6822      	ldr	r2, [r4, #0]
 8030bde:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8030c70 <_scanf_chars+0xb0>
 8030be2:	06d1      	lsls	r1, r2, #27
 8030be4:	bf5f      	itttt	pl
 8030be6:	681a      	ldrpl	r2, [r3, #0]
 8030be8:	1d11      	addpl	r1, r2, #4
 8030bea:	6019      	strpl	r1, [r3, #0]
 8030bec:	6816      	ldrpl	r6, [r2, #0]
 8030bee:	2700      	movs	r7, #0
 8030bf0:	69a0      	ldr	r0, [r4, #24]
 8030bf2:	b188      	cbz	r0, 8030c18 <_scanf_chars+0x58>
 8030bf4:	2801      	cmp	r0, #1
 8030bf6:	d107      	bne.n	8030c08 <_scanf_chars+0x48>
 8030bf8:	682a      	ldr	r2, [r5, #0]
 8030bfa:	7811      	ldrb	r1, [r2, #0]
 8030bfc:	6962      	ldr	r2, [r4, #20]
 8030bfe:	5c52      	ldrb	r2, [r2, r1]
 8030c00:	b952      	cbnz	r2, 8030c18 <_scanf_chars+0x58>
 8030c02:	2f00      	cmp	r7, #0
 8030c04:	d031      	beq.n	8030c6a <_scanf_chars+0xaa>
 8030c06:	e022      	b.n	8030c4e <_scanf_chars+0x8e>
 8030c08:	2802      	cmp	r0, #2
 8030c0a:	d120      	bne.n	8030c4e <_scanf_chars+0x8e>
 8030c0c:	682b      	ldr	r3, [r5, #0]
 8030c0e:	781b      	ldrb	r3, [r3, #0]
 8030c10:	f819 3003 	ldrb.w	r3, [r9, r3]
 8030c14:	071b      	lsls	r3, r3, #28
 8030c16:	d41a      	bmi.n	8030c4e <_scanf_chars+0x8e>
 8030c18:	6823      	ldr	r3, [r4, #0]
 8030c1a:	06da      	lsls	r2, r3, #27
 8030c1c:	bf5e      	ittt	pl
 8030c1e:	682b      	ldrpl	r3, [r5, #0]
 8030c20:	781b      	ldrbpl	r3, [r3, #0]
 8030c22:	f806 3b01 	strbpl.w	r3, [r6], #1
 8030c26:	682a      	ldr	r2, [r5, #0]
 8030c28:	686b      	ldr	r3, [r5, #4]
 8030c2a:	3201      	adds	r2, #1
 8030c2c:	602a      	str	r2, [r5, #0]
 8030c2e:	68a2      	ldr	r2, [r4, #8]
 8030c30:	3b01      	subs	r3, #1
 8030c32:	3a01      	subs	r2, #1
 8030c34:	606b      	str	r3, [r5, #4]
 8030c36:	3701      	adds	r7, #1
 8030c38:	60a2      	str	r2, [r4, #8]
 8030c3a:	b142      	cbz	r2, 8030c4e <_scanf_chars+0x8e>
 8030c3c:	2b00      	cmp	r3, #0
 8030c3e:	dcd7      	bgt.n	8030bf0 <_scanf_chars+0x30>
 8030c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030c44:	4629      	mov	r1, r5
 8030c46:	4640      	mov	r0, r8
 8030c48:	4798      	blx	r3
 8030c4a:	2800      	cmp	r0, #0
 8030c4c:	d0d0      	beq.n	8030bf0 <_scanf_chars+0x30>
 8030c4e:	6823      	ldr	r3, [r4, #0]
 8030c50:	f013 0310 	ands.w	r3, r3, #16
 8030c54:	d105      	bne.n	8030c62 <_scanf_chars+0xa2>
 8030c56:	68e2      	ldr	r2, [r4, #12]
 8030c58:	3201      	adds	r2, #1
 8030c5a:	60e2      	str	r2, [r4, #12]
 8030c5c:	69a2      	ldr	r2, [r4, #24]
 8030c5e:	b102      	cbz	r2, 8030c62 <_scanf_chars+0xa2>
 8030c60:	7033      	strb	r3, [r6, #0]
 8030c62:	6923      	ldr	r3, [r4, #16]
 8030c64:	443b      	add	r3, r7
 8030c66:	6123      	str	r3, [r4, #16]
 8030c68:	2000      	movs	r0, #0
 8030c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030c6e:	bf00      	nop
 8030c70:	08035041 	.word	0x08035041

08030c74 <_scanf_i>:
 8030c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030c78:	4698      	mov	r8, r3
 8030c7a:	4b74      	ldr	r3, [pc, #464]	; (8030e4c <_scanf_i+0x1d8>)
 8030c7c:	460c      	mov	r4, r1
 8030c7e:	4682      	mov	sl, r0
 8030c80:	4616      	mov	r6, r2
 8030c82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030c86:	b087      	sub	sp, #28
 8030c88:	ab03      	add	r3, sp, #12
 8030c8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8030c8e:	4b70      	ldr	r3, [pc, #448]	; (8030e50 <_scanf_i+0x1dc>)
 8030c90:	69a1      	ldr	r1, [r4, #24]
 8030c92:	4a70      	ldr	r2, [pc, #448]	; (8030e54 <_scanf_i+0x1e0>)
 8030c94:	2903      	cmp	r1, #3
 8030c96:	bf18      	it	ne
 8030c98:	461a      	movne	r2, r3
 8030c9a:	68a3      	ldr	r3, [r4, #8]
 8030c9c:	9201      	str	r2, [sp, #4]
 8030c9e:	1e5a      	subs	r2, r3, #1
 8030ca0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8030ca4:	bf88      	it	hi
 8030ca6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8030caa:	4627      	mov	r7, r4
 8030cac:	bf82      	ittt	hi
 8030cae:	eb03 0905 	addhi.w	r9, r3, r5
 8030cb2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8030cb6:	60a3      	strhi	r3, [r4, #8]
 8030cb8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8030cbc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8030cc0:	bf98      	it	ls
 8030cc2:	f04f 0900 	movls.w	r9, #0
 8030cc6:	6023      	str	r3, [r4, #0]
 8030cc8:	463d      	mov	r5, r7
 8030cca:	f04f 0b00 	mov.w	fp, #0
 8030cce:	6831      	ldr	r1, [r6, #0]
 8030cd0:	ab03      	add	r3, sp, #12
 8030cd2:	7809      	ldrb	r1, [r1, #0]
 8030cd4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8030cd8:	2202      	movs	r2, #2
 8030cda:	f7df fa91 	bl	8010200 <memchr>
 8030cde:	b328      	cbz	r0, 8030d2c <_scanf_i+0xb8>
 8030ce0:	f1bb 0f01 	cmp.w	fp, #1
 8030ce4:	d159      	bne.n	8030d9a <_scanf_i+0x126>
 8030ce6:	6862      	ldr	r2, [r4, #4]
 8030ce8:	b92a      	cbnz	r2, 8030cf6 <_scanf_i+0x82>
 8030cea:	6822      	ldr	r2, [r4, #0]
 8030cec:	2308      	movs	r3, #8
 8030cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030cf2:	6063      	str	r3, [r4, #4]
 8030cf4:	6022      	str	r2, [r4, #0]
 8030cf6:	6822      	ldr	r2, [r4, #0]
 8030cf8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8030cfc:	6022      	str	r2, [r4, #0]
 8030cfe:	68a2      	ldr	r2, [r4, #8]
 8030d00:	1e51      	subs	r1, r2, #1
 8030d02:	60a1      	str	r1, [r4, #8]
 8030d04:	b192      	cbz	r2, 8030d2c <_scanf_i+0xb8>
 8030d06:	6832      	ldr	r2, [r6, #0]
 8030d08:	1c51      	adds	r1, r2, #1
 8030d0a:	6031      	str	r1, [r6, #0]
 8030d0c:	7812      	ldrb	r2, [r2, #0]
 8030d0e:	f805 2b01 	strb.w	r2, [r5], #1
 8030d12:	6872      	ldr	r2, [r6, #4]
 8030d14:	3a01      	subs	r2, #1
 8030d16:	2a00      	cmp	r2, #0
 8030d18:	6072      	str	r2, [r6, #4]
 8030d1a:	dc07      	bgt.n	8030d2c <_scanf_i+0xb8>
 8030d1c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8030d20:	4631      	mov	r1, r6
 8030d22:	4650      	mov	r0, sl
 8030d24:	4790      	blx	r2
 8030d26:	2800      	cmp	r0, #0
 8030d28:	f040 8085 	bne.w	8030e36 <_scanf_i+0x1c2>
 8030d2c:	f10b 0b01 	add.w	fp, fp, #1
 8030d30:	f1bb 0f03 	cmp.w	fp, #3
 8030d34:	d1cb      	bne.n	8030cce <_scanf_i+0x5a>
 8030d36:	6863      	ldr	r3, [r4, #4]
 8030d38:	b90b      	cbnz	r3, 8030d3e <_scanf_i+0xca>
 8030d3a:	230a      	movs	r3, #10
 8030d3c:	6063      	str	r3, [r4, #4]
 8030d3e:	6863      	ldr	r3, [r4, #4]
 8030d40:	4945      	ldr	r1, [pc, #276]	; (8030e58 <_scanf_i+0x1e4>)
 8030d42:	6960      	ldr	r0, [r4, #20]
 8030d44:	1ac9      	subs	r1, r1, r3
 8030d46:	f000 f999 	bl	803107c <__sccl>
 8030d4a:	f04f 0b00 	mov.w	fp, #0
 8030d4e:	68a3      	ldr	r3, [r4, #8]
 8030d50:	6822      	ldr	r2, [r4, #0]
 8030d52:	2b00      	cmp	r3, #0
 8030d54:	d03d      	beq.n	8030dd2 <_scanf_i+0x15e>
 8030d56:	6831      	ldr	r1, [r6, #0]
 8030d58:	6960      	ldr	r0, [r4, #20]
 8030d5a:	f891 c000 	ldrb.w	ip, [r1]
 8030d5e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8030d62:	2800      	cmp	r0, #0
 8030d64:	d035      	beq.n	8030dd2 <_scanf_i+0x15e>
 8030d66:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8030d6a:	d124      	bne.n	8030db6 <_scanf_i+0x142>
 8030d6c:	0510      	lsls	r0, r2, #20
 8030d6e:	d522      	bpl.n	8030db6 <_scanf_i+0x142>
 8030d70:	f10b 0b01 	add.w	fp, fp, #1
 8030d74:	f1b9 0f00 	cmp.w	r9, #0
 8030d78:	d003      	beq.n	8030d82 <_scanf_i+0x10e>
 8030d7a:	3301      	adds	r3, #1
 8030d7c:	f109 39ff 	add.w	r9, r9, #4294967295
 8030d80:	60a3      	str	r3, [r4, #8]
 8030d82:	6873      	ldr	r3, [r6, #4]
 8030d84:	3b01      	subs	r3, #1
 8030d86:	2b00      	cmp	r3, #0
 8030d88:	6073      	str	r3, [r6, #4]
 8030d8a:	dd1b      	ble.n	8030dc4 <_scanf_i+0x150>
 8030d8c:	6833      	ldr	r3, [r6, #0]
 8030d8e:	3301      	adds	r3, #1
 8030d90:	6033      	str	r3, [r6, #0]
 8030d92:	68a3      	ldr	r3, [r4, #8]
 8030d94:	3b01      	subs	r3, #1
 8030d96:	60a3      	str	r3, [r4, #8]
 8030d98:	e7d9      	b.n	8030d4e <_scanf_i+0xda>
 8030d9a:	f1bb 0f02 	cmp.w	fp, #2
 8030d9e:	d1ae      	bne.n	8030cfe <_scanf_i+0x8a>
 8030da0:	6822      	ldr	r2, [r4, #0]
 8030da2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8030da6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8030daa:	d1bf      	bne.n	8030d2c <_scanf_i+0xb8>
 8030dac:	2310      	movs	r3, #16
 8030dae:	6063      	str	r3, [r4, #4]
 8030db0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030db4:	e7a2      	b.n	8030cfc <_scanf_i+0x88>
 8030db6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8030dba:	6022      	str	r2, [r4, #0]
 8030dbc:	780b      	ldrb	r3, [r1, #0]
 8030dbe:	f805 3b01 	strb.w	r3, [r5], #1
 8030dc2:	e7de      	b.n	8030d82 <_scanf_i+0x10e>
 8030dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030dc8:	4631      	mov	r1, r6
 8030dca:	4650      	mov	r0, sl
 8030dcc:	4798      	blx	r3
 8030dce:	2800      	cmp	r0, #0
 8030dd0:	d0df      	beq.n	8030d92 <_scanf_i+0x11e>
 8030dd2:	6823      	ldr	r3, [r4, #0]
 8030dd4:	05d9      	lsls	r1, r3, #23
 8030dd6:	d50d      	bpl.n	8030df4 <_scanf_i+0x180>
 8030dd8:	42bd      	cmp	r5, r7
 8030dda:	d909      	bls.n	8030df0 <_scanf_i+0x17c>
 8030ddc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8030de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8030de4:	4632      	mov	r2, r6
 8030de6:	4650      	mov	r0, sl
 8030de8:	4798      	blx	r3
 8030dea:	f105 39ff 	add.w	r9, r5, #4294967295
 8030dee:	464d      	mov	r5, r9
 8030df0:	42bd      	cmp	r5, r7
 8030df2:	d028      	beq.n	8030e46 <_scanf_i+0x1d2>
 8030df4:	6822      	ldr	r2, [r4, #0]
 8030df6:	f012 0210 	ands.w	r2, r2, #16
 8030dfa:	d113      	bne.n	8030e24 <_scanf_i+0x1b0>
 8030dfc:	702a      	strb	r2, [r5, #0]
 8030dfe:	6863      	ldr	r3, [r4, #4]
 8030e00:	9e01      	ldr	r6, [sp, #4]
 8030e02:	4639      	mov	r1, r7
 8030e04:	4650      	mov	r0, sl
 8030e06:	47b0      	blx	r6
 8030e08:	f8d8 3000 	ldr.w	r3, [r8]
 8030e0c:	6821      	ldr	r1, [r4, #0]
 8030e0e:	1d1a      	adds	r2, r3, #4
 8030e10:	f8c8 2000 	str.w	r2, [r8]
 8030e14:	f011 0f20 	tst.w	r1, #32
 8030e18:	681b      	ldr	r3, [r3, #0]
 8030e1a:	d00f      	beq.n	8030e3c <_scanf_i+0x1c8>
 8030e1c:	6018      	str	r0, [r3, #0]
 8030e1e:	68e3      	ldr	r3, [r4, #12]
 8030e20:	3301      	adds	r3, #1
 8030e22:	60e3      	str	r3, [r4, #12]
 8030e24:	6923      	ldr	r3, [r4, #16]
 8030e26:	1bed      	subs	r5, r5, r7
 8030e28:	445d      	add	r5, fp
 8030e2a:	442b      	add	r3, r5
 8030e2c:	6123      	str	r3, [r4, #16]
 8030e2e:	2000      	movs	r0, #0
 8030e30:	b007      	add	sp, #28
 8030e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030e36:	f04f 0b00 	mov.w	fp, #0
 8030e3a:	e7ca      	b.n	8030dd2 <_scanf_i+0x15e>
 8030e3c:	07ca      	lsls	r2, r1, #31
 8030e3e:	bf4c      	ite	mi
 8030e40:	8018      	strhmi	r0, [r3, #0]
 8030e42:	6018      	strpl	r0, [r3, #0]
 8030e44:	e7eb      	b.n	8030e1e <_scanf_i+0x1aa>
 8030e46:	2001      	movs	r0, #1
 8030e48:	e7f2      	b.n	8030e30 <_scanf_i+0x1bc>
 8030e4a:	bf00      	nop
 8030e4c:	080341e4 	.word	0x080341e4
 8030e50:	08031a55 	.word	0x08031a55
 8030e54:	080302e1 	.word	0x080302e1
 8030e58:	08035162 	.word	0x08035162

08030e5c <__sflush_r>:
 8030e5c:	898a      	ldrh	r2, [r1, #12]
 8030e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030e62:	4605      	mov	r5, r0
 8030e64:	0710      	lsls	r0, r2, #28
 8030e66:	460c      	mov	r4, r1
 8030e68:	d458      	bmi.n	8030f1c <__sflush_r+0xc0>
 8030e6a:	684b      	ldr	r3, [r1, #4]
 8030e6c:	2b00      	cmp	r3, #0
 8030e6e:	dc05      	bgt.n	8030e7c <__sflush_r+0x20>
 8030e70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030e72:	2b00      	cmp	r3, #0
 8030e74:	dc02      	bgt.n	8030e7c <__sflush_r+0x20>
 8030e76:	2000      	movs	r0, #0
 8030e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030e7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030e7e:	2e00      	cmp	r6, #0
 8030e80:	d0f9      	beq.n	8030e76 <__sflush_r+0x1a>
 8030e82:	2300      	movs	r3, #0
 8030e84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030e88:	682f      	ldr	r7, [r5, #0]
 8030e8a:	6a21      	ldr	r1, [r4, #32]
 8030e8c:	602b      	str	r3, [r5, #0]
 8030e8e:	d032      	beq.n	8030ef6 <__sflush_r+0x9a>
 8030e90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030e92:	89a3      	ldrh	r3, [r4, #12]
 8030e94:	075a      	lsls	r2, r3, #29
 8030e96:	d505      	bpl.n	8030ea4 <__sflush_r+0x48>
 8030e98:	6863      	ldr	r3, [r4, #4]
 8030e9a:	1ac0      	subs	r0, r0, r3
 8030e9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030e9e:	b10b      	cbz	r3, 8030ea4 <__sflush_r+0x48>
 8030ea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030ea2:	1ac0      	subs	r0, r0, r3
 8030ea4:	2300      	movs	r3, #0
 8030ea6:	4602      	mov	r2, r0
 8030ea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030eaa:	6a21      	ldr	r1, [r4, #32]
 8030eac:	4628      	mov	r0, r5
 8030eae:	47b0      	blx	r6
 8030eb0:	1c43      	adds	r3, r0, #1
 8030eb2:	89a3      	ldrh	r3, [r4, #12]
 8030eb4:	d106      	bne.n	8030ec4 <__sflush_r+0x68>
 8030eb6:	6829      	ldr	r1, [r5, #0]
 8030eb8:	291d      	cmp	r1, #29
 8030eba:	d82b      	bhi.n	8030f14 <__sflush_r+0xb8>
 8030ebc:	4a29      	ldr	r2, [pc, #164]	; (8030f64 <__sflush_r+0x108>)
 8030ebe:	410a      	asrs	r2, r1
 8030ec0:	07d6      	lsls	r6, r2, #31
 8030ec2:	d427      	bmi.n	8030f14 <__sflush_r+0xb8>
 8030ec4:	2200      	movs	r2, #0
 8030ec6:	6062      	str	r2, [r4, #4]
 8030ec8:	04d9      	lsls	r1, r3, #19
 8030eca:	6922      	ldr	r2, [r4, #16]
 8030ecc:	6022      	str	r2, [r4, #0]
 8030ece:	d504      	bpl.n	8030eda <__sflush_r+0x7e>
 8030ed0:	1c42      	adds	r2, r0, #1
 8030ed2:	d101      	bne.n	8030ed8 <__sflush_r+0x7c>
 8030ed4:	682b      	ldr	r3, [r5, #0]
 8030ed6:	b903      	cbnz	r3, 8030eda <__sflush_r+0x7e>
 8030ed8:	6560      	str	r0, [r4, #84]	; 0x54
 8030eda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030edc:	602f      	str	r7, [r5, #0]
 8030ede:	2900      	cmp	r1, #0
 8030ee0:	d0c9      	beq.n	8030e76 <__sflush_r+0x1a>
 8030ee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030ee6:	4299      	cmp	r1, r3
 8030ee8:	d002      	beq.n	8030ef0 <__sflush_r+0x94>
 8030eea:	4628      	mov	r0, r5
 8030eec:	f7fd fe6a 	bl	802ebc4 <_free_r>
 8030ef0:	2000      	movs	r0, #0
 8030ef2:	6360      	str	r0, [r4, #52]	; 0x34
 8030ef4:	e7c0      	b.n	8030e78 <__sflush_r+0x1c>
 8030ef6:	2301      	movs	r3, #1
 8030ef8:	4628      	mov	r0, r5
 8030efa:	47b0      	blx	r6
 8030efc:	1c41      	adds	r1, r0, #1
 8030efe:	d1c8      	bne.n	8030e92 <__sflush_r+0x36>
 8030f00:	682b      	ldr	r3, [r5, #0]
 8030f02:	2b00      	cmp	r3, #0
 8030f04:	d0c5      	beq.n	8030e92 <__sflush_r+0x36>
 8030f06:	2b1d      	cmp	r3, #29
 8030f08:	d001      	beq.n	8030f0e <__sflush_r+0xb2>
 8030f0a:	2b16      	cmp	r3, #22
 8030f0c:	d101      	bne.n	8030f12 <__sflush_r+0xb6>
 8030f0e:	602f      	str	r7, [r5, #0]
 8030f10:	e7b1      	b.n	8030e76 <__sflush_r+0x1a>
 8030f12:	89a3      	ldrh	r3, [r4, #12]
 8030f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030f18:	81a3      	strh	r3, [r4, #12]
 8030f1a:	e7ad      	b.n	8030e78 <__sflush_r+0x1c>
 8030f1c:	690f      	ldr	r7, [r1, #16]
 8030f1e:	2f00      	cmp	r7, #0
 8030f20:	d0a9      	beq.n	8030e76 <__sflush_r+0x1a>
 8030f22:	0793      	lsls	r3, r2, #30
 8030f24:	680e      	ldr	r6, [r1, #0]
 8030f26:	bf08      	it	eq
 8030f28:	694b      	ldreq	r3, [r1, #20]
 8030f2a:	600f      	str	r7, [r1, #0]
 8030f2c:	bf18      	it	ne
 8030f2e:	2300      	movne	r3, #0
 8030f30:	eba6 0807 	sub.w	r8, r6, r7
 8030f34:	608b      	str	r3, [r1, #8]
 8030f36:	f1b8 0f00 	cmp.w	r8, #0
 8030f3a:	dd9c      	ble.n	8030e76 <__sflush_r+0x1a>
 8030f3c:	6a21      	ldr	r1, [r4, #32]
 8030f3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030f40:	4643      	mov	r3, r8
 8030f42:	463a      	mov	r2, r7
 8030f44:	4628      	mov	r0, r5
 8030f46:	47b0      	blx	r6
 8030f48:	2800      	cmp	r0, #0
 8030f4a:	dc06      	bgt.n	8030f5a <__sflush_r+0xfe>
 8030f4c:	89a3      	ldrh	r3, [r4, #12]
 8030f4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030f52:	81a3      	strh	r3, [r4, #12]
 8030f54:	f04f 30ff 	mov.w	r0, #4294967295
 8030f58:	e78e      	b.n	8030e78 <__sflush_r+0x1c>
 8030f5a:	4407      	add	r7, r0
 8030f5c:	eba8 0800 	sub.w	r8, r8, r0
 8030f60:	e7e9      	b.n	8030f36 <__sflush_r+0xda>
 8030f62:	bf00      	nop
 8030f64:	dfbffffe 	.word	0xdfbffffe

08030f68 <_fflush_r>:
 8030f68:	b538      	push	{r3, r4, r5, lr}
 8030f6a:	690b      	ldr	r3, [r1, #16]
 8030f6c:	4605      	mov	r5, r0
 8030f6e:	460c      	mov	r4, r1
 8030f70:	b913      	cbnz	r3, 8030f78 <_fflush_r+0x10>
 8030f72:	2500      	movs	r5, #0
 8030f74:	4628      	mov	r0, r5
 8030f76:	bd38      	pop	{r3, r4, r5, pc}
 8030f78:	b118      	cbz	r0, 8030f82 <_fflush_r+0x1a>
 8030f7a:	6a03      	ldr	r3, [r0, #32]
 8030f7c:	b90b      	cbnz	r3, 8030f82 <_fflush_r+0x1a>
 8030f7e:	f7fc fbd7 	bl	802d730 <__sinit>
 8030f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030f86:	2b00      	cmp	r3, #0
 8030f88:	d0f3      	beq.n	8030f72 <_fflush_r+0xa>
 8030f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030f8c:	07d0      	lsls	r0, r2, #31
 8030f8e:	d404      	bmi.n	8030f9a <_fflush_r+0x32>
 8030f90:	0599      	lsls	r1, r3, #22
 8030f92:	d402      	bmi.n	8030f9a <_fflush_r+0x32>
 8030f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030f96:	f7fc ff74 	bl	802de82 <__retarget_lock_acquire_recursive>
 8030f9a:	4628      	mov	r0, r5
 8030f9c:	4621      	mov	r1, r4
 8030f9e:	f7ff ff5d 	bl	8030e5c <__sflush_r>
 8030fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030fa4:	07da      	lsls	r2, r3, #31
 8030fa6:	4605      	mov	r5, r0
 8030fa8:	d4e4      	bmi.n	8030f74 <_fflush_r+0xc>
 8030faa:	89a3      	ldrh	r3, [r4, #12]
 8030fac:	059b      	lsls	r3, r3, #22
 8030fae:	d4e1      	bmi.n	8030f74 <_fflush_r+0xc>
 8030fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030fb2:	f7fc ff67 	bl	802de84 <__retarget_lock_release_recursive>
 8030fb6:	e7dd      	b.n	8030f74 <_fflush_r+0xc>

08030fb8 <__swhatbuf_r>:
 8030fb8:	b570      	push	{r4, r5, r6, lr}
 8030fba:	460c      	mov	r4, r1
 8030fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030fc0:	2900      	cmp	r1, #0
 8030fc2:	b096      	sub	sp, #88	; 0x58
 8030fc4:	4615      	mov	r5, r2
 8030fc6:	461e      	mov	r6, r3
 8030fc8:	da0d      	bge.n	8030fe6 <__swhatbuf_r+0x2e>
 8030fca:	89a3      	ldrh	r3, [r4, #12]
 8030fcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030fd0:	f04f 0100 	mov.w	r1, #0
 8030fd4:	bf0c      	ite	eq
 8030fd6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8030fda:	2340      	movne	r3, #64	; 0x40
 8030fdc:	2000      	movs	r0, #0
 8030fde:	6031      	str	r1, [r6, #0]
 8030fe0:	602b      	str	r3, [r5, #0]
 8030fe2:	b016      	add	sp, #88	; 0x58
 8030fe4:	bd70      	pop	{r4, r5, r6, pc}
 8030fe6:	466a      	mov	r2, sp
 8030fe8:	f000 f8ec 	bl	80311c4 <_fstat_r>
 8030fec:	2800      	cmp	r0, #0
 8030fee:	dbec      	blt.n	8030fca <__swhatbuf_r+0x12>
 8030ff0:	9901      	ldr	r1, [sp, #4]
 8030ff2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8030ff6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8030ffa:	4259      	negs	r1, r3
 8030ffc:	4159      	adcs	r1, r3
 8030ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8031002:	e7eb      	b.n	8030fdc <__swhatbuf_r+0x24>

08031004 <__smakebuf_r>:
 8031004:	898b      	ldrh	r3, [r1, #12]
 8031006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8031008:	079d      	lsls	r5, r3, #30
 803100a:	4606      	mov	r6, r0
 803100c:	460c      	mov	r4, r1
 803100e:	d507      	bpl.n	8031020 <__smakebuf_r+0x1c>
 8031010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8031014:	6023      	str	r3, [r4, #0]
 8031016:	6123      	str	r3, [r4, #16]
 8031018:	2301      	movs	r3, #1
 803101a:	6163      	str	r3, [r4, #20]
 803101c:	b002      	add	sp, #8
 803101e:	bd70      	pop	{r4, r5, r6, pc}
 8031020:	ab01      	add	r3, sp, #4
 8031022:	466a      	mov	r2, sp
 8031024:	f7ff ffc8 	bl	8030fb8 <__swhatbuf_r>
 8031028:	9900      	ldr	r1, [sp, #0]
 803102a:	4605      	mov	r5, r0
 803102c:	4630      	mov	r0, r6
 803102e:	f7fb fbf1 	bl	802c814 <_malloc_r>
 8031032:	b948      	cbnz	r0, 8031048 <__smakebuf_r+0x44>
 8031034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8031038:	059a      	lsls	r2, r3, #22
 803103a:	d4ef      	bmi.n	803101c <__smakebuf_r+0x18>
 803103c:	f023 0303 	bic.w	r3, r3, #3
 8031040:	f043 0302 	orr.w	r3, r3, #2
 8031044:	81a3      	strh	r3, [r4, #12]
 8031046:	e7e3      	b.n	8031010 <__smakebuf_r+0xc>
 8031048:	89a3      	ldrh	r3, [r4, #12]
 803104a:	6020      	str	r0, [r4, #0]
 803104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031050:	81a3      	strh	r3, [r4, #12]
 8031052:	9b00      	ldr	r3, [sp, #0]
 8031054:	6163      	str	r3, [r4, #20]
 8031056:	9b01      	ldr	r3, [sp, #4]
 8031058:	6120      	str	r0, [r4, #16]
 803105a:	b15b      	cbz	r3, 8031074 <__smakebuf_r+0x70>
 803105c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031060:	4630      	mov	r0, r6
 8031062:	f000 f8c1 	bl	80311e8 <_isatty_r>
 8031066:	b128      	cbz	r0, 8031074 <__smakebuf_r+0x70>
 8031068:	89a3      	ldrh	r3, [r4, #12]
 803106a:	f023 0303 	bic.w	r3, r3, #3
 803106e:	f043 0301 	orr.w	r3, r3, #1
 8031072:	81a3      	strh	r3, [r4, #12]
 8031074:	89a3      	ldrh	r3, [r4, #12]
 8031076:	431d      	orrs	r5, r3
 8031078:	81a5      	strh	r5, [r4, #12]
 803107a:	e7cf      	b.n	803101c <__smakebuf_r+0x18>

0803107c <__sccl>:
 803107c:	b570      	push	{r4, r5, r6, lr}
 803107e:	780b      	ldrb	r3, [r1, #0]
 8031080:	4604      	mov	r4, r0
 8031082:	2b5e      	cmp	r3, #94	; 0x5e
 8031084:	bf0b      	itete	eq
 8031086:	784b      	ldrbeq	r3, [r1, #1]
 8031088:	1c4a      	addne	r2, r1, #1
 803108a:	1c8a      	addeq	r2, r1, #2
 803108c:	2100      	movne	r1, #0
 803108e:	bf08      	it	eq
 8031090:	2101      	moveq	r1, #1
 8031092:	3801      	subs	r0, #1
 8031094:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8031098:	f800 1f01 	strb.w	r1, [r0, #1]!
 803109c:	42a8      	cmp	r0, r5
 803109e:	d1fb      	bne.n	8031098 <__sccl+0x1c>
 80310a0:	b90b      	cbnz	r3, 80310a6 <__sccl+0x2a>
 80310a2:	1e50      	subs	r0, r2, #1
 80310a4:	bd70      	pop	{r4, r5, r6, pc}
 80310a6:	f081 0101 	eor.w	r1, r1, #1
 80310aa:	54e1      	strb	r1, [r4, r3]
 80310ac:	4610      	mov	r0, r2
 80310ae:	4602      	mov	r2, r0
 80310b0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80310b4:	2d2d      	cmp	r5, #45	; 0x2d
 80310b6:	d005      	beq.n	80310c4 <__sccl+0x48>
 80310b8:	2d5d      	cmp	r5, #93	; 0x5d
 80310ba:	d016      	beq.n	80310ea <__sccl+0x6e>
 80310bc:	2d00      	cmp	r5, #0
 80310be:	d0f1      	beq.n	80310a4 <__sccl+0x28>
 80310c0:	462b      	mov	r3, r5
 80310c2:	e7f2      	b.n	80310aa <__sccl+0x2e>
 80310c4:	7846      	ldrb	r6, [r0, #1]
 80310c6:	2e5d      	cmp	r6, #93	; 0x5d
 80310c8:	d0fa      	beq.n	80310c0 <__sccl+0x44>
 80310ca:	42b3      	cmp	r3, r6
 80310cc:	dcf8      	bgt.n	80310c0 <__sccl+0x44>
 80310ce:	3002      	adds	r0, #2
 80310d0:	461a      	mov	r2, r3
 80310d2:	3201      	adds	r2, #1
 80310d4:	4296      	cmp	r6, r2
 80310d6:	54a1      	strb	r1, [r4, r2]
 80310d8:	dcfb      	bgt.n	80310d2 <__sccl+0x56>
 80310da:	1af2      	subs	r2, r6, r3
 80310dc:	3a01      	subs	r2, #1
 80310de:	1c5d      	adds	r5, r3, #1
 80310e0:	42b3      	cmp	r3, r6
 80310e2:	bfa8      	it	ge
 80310e4:	2200      	movge	r2, #0
 80310e6:	18ab      	adds	r3, r5, r2
 80310e8:	e7e1      	b.n	80310ae <__sccl+0x32>
 80310ea:	4610      	mov	r0, r2
 80310ec:	e7da      	b.n	80310a4 <__sccl+0x28>

080310ee <__submore>:
 80310ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80310f2:	460c      	mov	r4, r1
 80310f4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80310f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80310fa:	4299      	cmp	r1, r3
 80310fc:	d11d      	bne.n	803113a <__submore+0x4c>
 80310fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8031102:	f7fb fb87 	bl	802c814 <_malloc_r>
 8031106:	b918      	cbnz	r0, 8031110 <__submore+0x22>
 8031108:	f04f 30ff 	mov.w	r0, #4294967295
 803110c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8031114:	63a3      	str	r3, [r4, #56]	; 0x38
 8031116:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 803111a:	6360      	str	r0, [r4, #52]	; 0x34
 803111c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8031120:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8031124:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8031128:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 803112c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8031130:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8031134:	6020      	str	r0, [r4, #0]
 8031136:	2000      	movs	r0, #0
 8031138:	e7e8      	b.n	803110c <__submore+0x1e>
 803113a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 803113c:	0077      	lsls	r7, r6, #1
 803113e:	463a      	mov	r2, r7
 8031140:	f000 fbe7 	bl	8031912 <_realloc_r>
 8031144:	4605      	mov	r5, r0
 8031146:	2800      	cmp	r0, #0
 8031148:	d0de      	beq.n	8031108 <__submore+0x1a>
 803114a:	eb00 0806 	add.w	r8, r0, r6
 803114e:	4601      	mov	r1, r0
 8031150:	4632      	mov	r2, r6
 8031152:	4640      	mov	r0, r8
 8031154:	f7fc fe9f 	bl	802de96 <memcpy>
 8031158:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 803115c:	f8c4 8000 	str.w	r8, [r4]
 8031160:	e7e9      	b.n	8031136 <__submore+0x48>

08031162 <_raise_r>:
 8031162:	291f      	cmp	r1, #31
 8031164:	b538      	push	{r3, r4, r5, lr}
 8031166:	4604      	mov	r4, r0
 8031168:	460d      	mov	r5, r1
 803116a:	d904      	bls.n	8031176 <_raise_r+0x14>
 803116c:	2316      	movs	r3, #22
 803116e:	6003      	str	r3, [r0, #0]
 8031170:	f04f 30ff 	mov.w	r0, #4294967295
 8031174:	bd38      	pop	{r3, r4, r5, pc}
 8031176:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8031178:	b112      	cbz	r2, 8031180 <_raise_r+0x1e>
 803117a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803117e:	b94b      	cbnz	r3, 8031194 <_raise_r+0x32>
 8031180:	4620      	mov	r0, r4
 8031182:	f000 f853 	bl	803122c <_getpid_r>
 8031186:	462a      	mov	r2, r5
 8031188:	4601      	mov	r1, r0
 803118a:	4620      	mov	r0, r4
 803118c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8031190:	f000 b83a 	b.w	8031208 <_kill_r>
 8031194:	2b01      	cmp	r3, #1
 8031196:	d00a      	beq.n	80311ae <_raise_r+0x4c>
 8031198:	1c59      	adds	r1, r3, #1
 803119a:	d103      	bne.n	80311a4 <_raise_r+0x42>
 803119c:	2316      	movs	r3, #22
 803119e:	6003      	str	r3, [r0, #0]
 80311a0:	2001      	movs	r0, #1
 80311a2:	e7e7      	b.n	8031174 <_raise_r+0x12>
 80311a4:	2400      	movs	r4, #0
 80311a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80311aa:	4628      	mov	r0, r5
 80311ac:	4798      	blx	r3
 80311ae:	2000      	movs	r0, #0
 80311b0:	e7e0      	b.n	8031174 <_raise_r+0x12>
	...

080311b4 <raise>:
 80311b4:	4b02      	ldr	r3, [pc, #8]	; (80311c0 <raise+0xc>)
 80311b6:	4601      	mov	r1, r0
 80311b8:	6818      	ldr	r0, [r3, #0]
 80311ba:	f7ff bfd2 	b.w	8031162 <_raise_r>
 80311be:	bf00      	nop
 80311c0:	20000188 	.word	0x20000188

080311c4 <_fstat_r>:
 80311c4:	b538      	push	{r3, r4, r5, lr}
 80311c6:	4d07      	ldr	r5, [pc, #28]	; (80311e4 <_fstat_r+0x20>)
 80311c8:	2300      	movs	r3, #0
 80311ca:	4604      	mov	r4, r0
 80311cc:	4608      	mov	r0, r1
 80311ce:	4611      	mov	r1, r2
 80311d0:	602b      	str	r3, [r5, #0]
 80311d2:	f7e1 fd90 	bl	8012cf6 <_fstat>
 80311d6:	1c43      	adds	r3, r0, #1
 80311d8:	d102      	bne.n	80311e0 <_fstat_r+0x1c>
 80311da:	682b      	ldr	r3, [r5, #0]
 80311dc:	b103      	cbz	r3, 80311e0 <_fstat_r+0x1c>
 80311de:	6023      	str	r3, [r4, #0]
 80311e0:	bd38      	pop	{r3, r4, r5, pc}
 80311e2:	bf00      	nop
 80311e4:	2000db0c 	.word	0x2000db0c

080311e8 <_isatty_r>:
 80311e8:	b538      	push	{r3, r4, r5, lr}
 80311ea:	4d06      	ldr	r5, [pc, #24]	; (8031204 <_isatty_r+0x1c>)
 80311ec:	2300      	movs	r3, #0
 80311ee:	4604      	mov	r4, r0
 80311f0:	4608      	mov	r0, r1
 80311f2:	602b      	str	r3, [r5, #0]
 80311f4:	f7e1 fd8f 	bl	8012d16 <_isatty>
 80311f8:	1c43      	adds	r3, r0, #1
 80311fa:	d102      	bne.n	8031202 <_isatty_r+0x1a>
 80311fc:	682b      	ldr	r3, [r5, #0]
 80311fe:	b103      	cbz	r3, 8031202 <_isatty_r+0x1a>
 8031200:	6023      	str	r3, [r4, #0]
 8031202:	bd38      	pop	{r3, r4, r5, pc}
 8031204:	2000db0c 	.word	0x2000db0c

08031208 <_kill_r>:
 8031208:	b538      	push	{r3, r4, r5, lr}
 803120a:	4d07      	ldr	r5, [pc, #28]	; (8031228 <_kill_r+0x20>)
 803120c:	2300      	movs	r3, #0
 803120e:	4604      	mov	r4, r0
 8031210:	4608      	mov	r0, r1
 8031212:	4611      	mov	r1, r2
 8031214:	602b      	str	r3, [r5, #0]
 8031216:	f7e1 fd0f 	bl	8012c38 <_kill>
 803121a:	1c43      	adds	r3, r0, #1
 803121c:	d102      	bne.n	8031224 <_kill_r+0x1c>
 803121e:	682b      	ldr	r3, [r5, #0]
 8031220:	b103      	cbz	r3, 8031224 <_kill_r+0x1c>
 8031222:	6023      	str	r3, [r4, #0]
 8031224:	bd38      	pop	{r3, r4, r5, pc}
 8031226:	bf00      	nop
 8031228:	2000db0c 	.word	0x2000db0c

0803122c <_getpid_r>:
 803122c:	f7e1 bcfc 	b.w	8012c28 <_getpid>

08031230 <nan>:
 8031230:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8031238 <nan+0x8>
 8031234:	4770      	bx	lr
 8031236:	bf00      	nop
 8031238:	00000000 	.word	0x00000000
 803123c:	7ff80000 	.word	0x7ff80000

08031240 <rshift>:
 8031240:	6903      	ldr	r3, [r0, #16]
 8031242:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8031246:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803124a:	ea4f 1261 	mov.w	r2, r1, asr #5
 803124e:	f100 0414 	add.w	r4, r0, #20
 8031252:	dd45      	ble.n	80312e0 <rshift+0xa0>
 8031254:	f011 011f 	ands.w	r1, r1, #31
 8031258:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803125c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8031260:	d10c      	bne.n	803127c <rshift+0x3c>
 8031262:	f100 0710 	add.w	r7, r0, #16
 8031266:	4629      	mov	r1, r5
 8031268:	42b1      	cmp	r1, r6
 803126a:	d334      	bcc.n	80312d6 <rshift+0x96>
 803126c:	1a9b      	subs	r3, r3, r2
 803126e:	009b      	lsls	r3, r3, #2
 8031270:	1eea      	subs	r2, r5, #3
 8031272:	4296      	cmp	r6, r2
 8031274:	bf38      	it	cc
 8031276:	2300      	movcc	r3, #0
 8031278:	4423      	add	r3, r4
 803127a:	e015      	b.n	80312a8 <rshift+0x68>
 803127c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8031280:	f1c1 0820 	rsb	r8, r1, #32
 8031284:	40cf      	lsrs	r7, r1
 8031286:	f105 0e04 	add.w	lr, r5, #4
 803128a:	46a1      	mov	r9, r4
 803128c:	4576      	cmp	r6, lr
 803128e:	46f4      	mov	ip, lr
 8031290:	d815      	bhi.n	80312be <rshift+0x7e>
 8031292:	1a9a      	subs	r2, r3, r2
 8031294:	0092      	lsls	r2, r2, #2
 8031296:	3a04      	subs	r2, #4
 8031298:	3501      	adds	r5, #1
 803129a:	42ae      	cmp	r6, r5
 803129c:	bf38      	it	cc
 803129e:	2200      	movcc	r2, #0
 80312a0:	18a3      	adds	r3, r4, r2
 80312a2:	50a7      	str	r7, [r4, r2]
 80312a4:	b107      	cbz	r7, 80312a8 <rshift+0x68>
 80312a6:	3304      	adds	r3, #4
 80312a8:	1b1a      	subs	r2, r3, r4
 80312aa:	42a3      	cmp	r3, r4
 80312ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80312b0:	bf08      	it	eq
 80312b2:	2300      	moveq	r3, #0
 80312b4:	6102      	str	r2, [r0, #16]
 80312b6:	bf08      	it	eq
 80312b8:	6143      	streq	r3, [r0, #20]
 80312ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80312be:	f8dc c000 	ldr.w	ip, [ip]
 80312c2:	fa0c fc08 	lsl.w	ip, ip, r8
 80312c6:	ea4c 0707 	orr.w	r7, ip, r7
 80312ca:	f849 7b04 	str.w	r7, [r9], #4
 80312ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80312d2:	40cf      	lsrs	r7, r1
 80312d4:	e7da      	b.n	803128c <rshift+0x4c>
 80312d6:	f851 cb04 	ldr.w	ip, [r1], #4
 80312da:	f847 cf04 	str.w	ip, [r7, #4]!
 80312de:	e7c3      	b.n	8031268 <rshift+0x28>
 80312e0:	4623      	mov	r3, r4
 80312e2:	e7e1      	b.n	80312a8 <rshift+0x68>

080312e4 <__hexdig_fun>:
 80312e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80312e8:	2b09      	cmp	r3, #9
 80312ea:	d802      	bhi.n	80312f2 <__hexdig_fun+0xe>
 80312ec:	3820      	subs	r0, #32
 80312ee:	b2c0      	uxtb	r0, r0
 80312f0:	4770      	bx	lr
 80312f2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80312f6:	2b05      	cmp	r3, #5
 80312f8:	d801      	bhi.n	80312fe <__hexdig_fun+0x1a>
 80312fa:	3847      	subs	r0, #71	; 0x47
 80312fc:	e7f7      	b.n	80312ee <__hexdig_fun+0xa>
 80312fe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8031302:	2b05      	cmp	r3, #5
 8031304:	d801      	bhi.n	803130a <__hexdig_fun+0x26>
 8031306:	3827      	subs	r0, #39	; 0x27
 8031308:	e7f1      	b.n	80312ee <__hexdig_fun+0xa>
 803130a:	2000      	movs	r0, #0
 803130c:	4770      	bx	lr
	...

08031310 <__gethex>:
 8031310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8031314:	4617      	mov	r7, r2
 8031316:	680a      	ldr	r2, [r1, #0]
 8031318:	b085      	sub	sp, #20
 803131a:	f102 0b02 	add.w	fp, r2, #2
 803131e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8031322:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8031326:	4681      	mov	r9, r0
 8031328:	468a      	mov	sl, r1
 803132a:	9302      	str	r3, [sp, #8]
 803132c:	32fe      	adds	r2, #254	; 0xfe
 803132e:	eb02 030b 	add.w	r3, r2, fp
 8031332:	46d8      	mov	r8, fp
 8031334:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8031338:	9301      	str	r3, [sp, #4]
 803133a:	2830      	cmp	r0, #48	; 0x30
 803133c:	d0f7      	beq.n	803132e <__gethex+0x1e>
 803133e:	f7ff ffd1 	bl	80312e4 <__hexdig_fun>
 8031342:	4604      	mov	r4, r0
 8031344:	2800      	cmp	r0, #0
 8031346:	d138      	bne.n	80313ba <__gethex+0xaa>
 8031348:	49a7      	ldr	r1, [pc, #668]	; (80315e8 <__gethex+0x2d8>)
 803134a:	2201      	movs	r2, #1
 803134c:	4640      	mov	r0, r8
 803134e:	f7fc fc15 	bl	802db7c <strncmp>
 8031352:	4606      	mov	r6, r0
 8031354:	2800      	cmp	r0, #0
 8031356:	d169      	bne.n	803142c <__gethex+0x11c>
 8031358:	f898 0001 	ldrb.w	r0, [r8, #1]
 803135c:	465d      	mov	r5, fp
 803135e:	f7ff ffc1 	bl	80312e4 <__hexdig_fun>
 8031362:	2800      	cmp	r0, #0
 8031364:	d064      	beq.n	8031430 <__gethex+0x120>
 8031366:	465a      	mov	r2, fp
 8031368:	7810      	ldrb	r0, [r2, #0]
 803136a:	2830      	cmp	r0, #48	; 0x30
 803136c:	4690      	mov	r8, r2
 803136e:	f102 0201 	add.w	r2, r2, #1
 8031372:	d0f9      	beq.n	8031368 <__gethex+0x58>
 8031374:	f7ff ffb6 	bl	80312e4 <__hexdig_fun>
 8031378:	2301      	movs	r3, #1
 803137a:	fab0 f480 	clz	r4, r0
 803137e:	0964      	lsrs	r4, r4, #5
 8031380:	465e      	mov	r6, fp
 8031382:	9301      	str	r3, [sp, #4]
 8031384:	4642      	mov	r2, r8
 8031386:	4615      	mov	r5, r2
 8031388:	3201      	adds	r2, #1
 803138a:	7828      	ldrb	r0, [r5, #0]
 803138c:	f7ff ffaa 	bl	80312e4 <__hexdig_fun>
 8031390:	2800      	cmp	r0, #0
 8031392:	d1f8      	bne.n	8031386 <__gethex+0x76>
 8031394:	4994      	ldr	r1, [pc, #592]	; (80315e8 <__gethex+0x2d8>)
 8031396:	2201      	movs	r2, #1
 8031398:	4628      	mov	r0, r5
 803139a:	f7fc fbef 	bl	802db7c <strncmp>
 803139e:	b978      	cbnz	r0, 80313c0 <__gethex+0xb0>
 80313a0:	b946      	cbnz	r6, 80313b4 <__gethex+0xa4>
 80313a2:	1c6e      	adds	r6, r5, #1
 80313a4:	4632      	mov	r2, r6
 80313a6:	4615      	mov	r5, r2
 80313a8:	3201      	adds	r2, #1
 80313aa:	7828      	ldrb	r0, [r5, #0]
 80313ac:	f7ff ff9a 	bl	80312e4 <__hexdig_fun>
 80313b0:	2800      	cmp	r0, #0
 80313b2:	d1f8      	bne.n	80313a6 <__gethex+0x96>
 80313b4:	1b73      	subs	r3, r6, r5
 80313b6:	009e      	lsls	r6, r3, #2
 80313b8:	e004      	b.n	80313c4 <__gethex+0xb4>
 80313ba:	2400      	movs	r4, #0
 80313bc:	4626      	mov	r6, r4
 80313be:	e7e1      	b.n	8031384 <__gethex+0x74>
 80313c0:	2e00      	cmp	r6, #0
 80313c2:	d1f7      	bne.n	80313b4 <__gethex+0xa4>
 80313c4:	782b      	ldrb	r3, [r5, #0]
 80313c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80313ca:	2b50      	cmp	r3, #80	; 0x50
 80313cc:	d13d      	bne.n	803144a <__gethex+0x13a>
 80313ce:	786b      	ldrb	r3, [r5, #1]
 80313d0:	2b2b      	cmp	r3, #43	; 0x2b
 80313d2:	d02f      	beq.n	8031434 <__gethex+0x124>
 80313d4:	2b2d      	cmp	r3, #45	; 0x2d
 80313d6:	d031      	beq.n	803143c <__gethex+0x12c>
 80313d8:	1c69      	adds	r1, r5, #1
 80313da:	f04f 0b00 	mov.w	fp, #0
 80313de:	7808      	ldrb	r0, [r1, #0]
 80313e0:	f7ff ff80 	bl	80312e4 <__hexdig_fun>
 80313e4:	1e42      	subs	r2, r0, #1
 80313e6:	b2d2      	uxtb	r2, r2
 80313e8:	2a18      	cmp	r2, #24
 80313ea:	d82e      	bhi.n	803144a <__gethex+0x13a>
 80313ec:	f1a0 0210 	sub.w	r2, r0, #16
 80313f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80313f4:	f7ff ff76 	bl	80312e4 <__hexdig_fun>
 80313f8:	f100 3cff 	add.w	ip, r0, #4294967295
 80313fc:	fa5f fc8c 	uxtb.w	ip, ip
 8031400:	f1bc 0f18 	cmp.w	ip, #24
 8031404:	d91d      	bls.n	8031442 <__gethex+0x132>
 8031406:	f1bb 0f00 	cmp.w	fp, #0
 803140a:	d000      	beq.n	803140e <__gethex+0xfe>
 803140c:	4252      	negs	r2, r2
 803140e:	4416      	add	r6, r2
 8031410:	f8ca 1000 	str.w	r1, [sl]
 8031414:	b1dc      	cbz	r4, 803144e <__gethex+0x13e>
 8031416:	9b01      	ldr	r3, [sp, #4]
 8031418:	2b00      	cmp	r3, #0
 803141a:	bf14      	ite	ne
 803141c:	f04f 0800 	movne.w	r8, #0
 8031420:	f04f 0806 	moveq.w	r8, #6
 8031424:	4640      	mov	r0, r8
 8031426:	b005      	add	sp, #20
 8031428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803142c:	4645      	mov	r5, r8
 803142e:	4626      	mov	r6, r4
 8031430:	2401      	movs	r4, #1
 8031432:	e7c7      	b.n	80313c4 <__gethex+0xb4>
 8031434:	f04f 0b00 	mov.w	fp, #0
 8031438:	1ca9      	adds	r1, r5, #2
 803143a:	e7d0      	b.n	80313de <__gethex+0xce>
 803143c:	f04f 0b01 	mov.w	fp, #1
 8031440:	e7fa      	b.n	8031438 <__gethex+0x128>
 8031442:	230a      	movs	r3, #10
 8031444:	fb03 0002 	mla	r0, r3, r2, r0
 8031448:	e7d0      	b.n	80313ec <__gethex+0xdc>
 803144a:	4629      	mov	r1, r5
 803144c:	e7e0      	b.n	8031410 <__gethex+0x100>
 803144e:	eba5 0308 	sub.w	r3, r5, r8
 8031452:	3b01      	subs	r3, #1
 8031454:	4621      	mov	r1, r4
 8031456:	2b07      	cmp	r3, #7
 8031458:	dc0a      	bgt.n	8031470 <__gethex+0x160>
 803145a:	4648      	mov	r0, r9
 803145c:	f7fd fbfe 	bl	802ec5c <_Balloc>
 8031460:	4604      	mov	r4, r0
 8031462:	b940      	cbnz	r0, 8031476 <__gethex+0x166>
 8031464:	4b61      	ldr	r3, [pc, #388]	; (80315ec <__gethex+0x2dc>)
 8031466:	4602      	mov	r2, r0
 8031468:	21e4      	movs	r1, #228	; 0xe4
 803146a:	4861      	ldr	r0, [pc, #388]	; (80315f0 <__gethex+0x2e0>)
 803146c:	f7fb f96e 	bl	802c74c <__assert_func>
 8031470:	3101      	adds	r1, #1
 8031472:	105b      	asrs	r3, r3, #1
 8031474:	e7ef      	b.n	8031456 <__gethex+0x146>
 8031476:	f100 0a14 	add.w	sl, r0, #20
 803147a:	2300      	movs	r3, #0
 803147c:	495a      	ldr	r1, [pc, #360]	; (80315e8 <__gethex+0x2d8>)
 803147e:	f8cd a004 	str.w	sl, [sp, #4]
 8031482:	469b      	mov	fp, r3
 8031484:	45a8      	cmp	r8, r5
 8031486:	d342      	bcc.n	803150e <__gethex+0x1fe>
 8031488:	9801      	ldr	r0, [sp, #4]
 803148a:	f840 bb04 	str.w	fp, [r0], #4
 803148e:	eba0 000a 	sub.w	r0, r0, sl
 8031492:	1080      	asrs	r0, r0, #2
 8031494:	6120      	str	r0, [r4, #16]
 8031496:	ea4f 1840 	mov.w	r8, r0, lsl #5
 803149a:	4658      	mov	r0, fp
 803149c:	f7fd fcd0 	bl	802ee40 <__hi0bits>
 80314a0:	683d      	ldr	r5, [r7, #0]
 80314a2:	eba8 0000 	sub.w	r0, r8, r0
 80314a6:	42a8      	cmp	r0, r5
 80314a8:	dd59      	ble.n	803155e <__gethex+0x24e>
 80314aa:	eba0 0805 	sub.w	r8, r0, r5
 80314ae:	4641      	mov	r1, r8
 80314b0:	4620      	mov	r0, r4
 80314b2:	f7fe f85f 	bl	802f574 <__any_on>
 80314b6:	4683      	mov	fp, r0
 80314b8:	b1b8      	cbz	r0, 80314ea <__gethex+0x1da>
 80314ba:	f108 33ff 	add.w	r3, r8, #4294967295
 80314be:	1159      	asrs	r1, r3, #5
 80314c0:	f003 021f 	and.w	r2, r3, #31
 80314c4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80314c8:	f04f 0b01 	mov.w	fp, #1
 80314cc:	fa0b f202 	lsl.w	r2, fp, r2
 80314d0:	420a      	tst	r2, r1
 80314d2:	d00a      	beq.n	80314ea <__gethex+0x1da>
 80314d4:	455b      	cmp	r3, fp
 80314d6:	dd06      	ble.n	80314e6 <__gethex+0x1d6>
 80314d8:	f1a8 0102 	sub.w	r1, r8, #2
 80314dc:	4620      	mov	r0, r4
 80314de:	f7fe f849 	bl	802f574 <__any_on>
 80314e2:	2800      	cmp	r0, #0
 80314e4:	d138      	bne.n	8031558 <__gethex+0x248>
 80314e6:	f04f 0b02 	mov.w	fp, #2
 80314ea:	4641      	mov	r1, r8
 80314ec:	4620      	mov	r0, r4
 80314ee:	f7ff fea7 	bl	8031240 <rshift>
 80314f2:	4446      	add	r6, r8
 80314f4:	68bb      	ldr	r3, [r7, #8]
 80314f6:	42b3      	cmp	r3, r6
 80314f8:	da41      	bge.n	803157e <__gethex+0x26e>
 80314fa:	4621      	mov	r1, r4
 80314fc:	4648      	mov	r0, r9
 80314fe:	f7fd fbed 	bl	802ecdc <_Bfree>
 8031502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8031504:	2300      	movs	r3, #0
 8031506:	6013      	str	r3, [r2, #0]
 8031508:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 803150c:	e78a      	b.n	8031424 <__gethex+0x114>
 803150e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8031512:	2a2e      	cmp	r2, #46	; 0x2e
 8031514:	d014      	beq.n	8031540 <__gethex+0x230>
 8031516:	2b20      	cmp	r3, #32
 8031518:	d106      	bne.n	8031528 <__gethex+0x218>
 803151a:	9b01      	ldr	r3, [sp, #4]
 803151c:	f843 bb04 	str.w	fp, [r3], #4
 8031520:	f04f 0b00 	mov.w	fp, #0
 8031524:	9301      	str	r3, [sp, #4]
 8031526:	465b      	mov	r3, fp
 8031528:	7828      	ldrb	r0, [r5, #0]
 803152a:	9303      	str	r3, [sp, #12]
 803152c:	f7ff feda 	bl	80312e4 <__hexdig_fun>
 8031530:	9b03      	ldr	r3, [sp, #12]
 8031532:	f000 000f 	and.w	r0, r0, #15
 8031536:	4098      	lsls	r0, r3
 8031538:	ea4b 0b00 	orr.w	fp, fp, r0
 803153c:	3304      	adds	r3, #4
 803153e:	e7a1      	b.n	8031484 <__gethex+0x174>
 8031540:	45a8      	cmp	r8, r5
 8031542:	d8e8      	bhi.n	8031516 <__gethex+0x206>
 8031544:	2201      	movs	r2, #1
 8031546:	4628      	mov	r0, r5
 8031548:	9303      	str	r3, [sp, #12]
 803154a:	f7fc fb17 	bl	802db7c <strncmp>
 803154e:	4926      	ldr	r1, [pc, #152]	; (80315e8 <__gethex+0x2d8>)
 8031550:	9b03      	ldr	r3, [sp, #12]
 8031552:	2800      	cmp	r0, #0
 8031554:	d1df      	bne.n	8031516 <__gethex+0x206>
 8031556:	e795      	b.n	8031484 <__gethex+0x174>
 8031558:	f04f 0b03 	mov.w	fp, #3
 803155c:	e7c5      	b.n	80314ea <__gethex+0x1da>
 803155e:	da0b      	bge.n	8031578 <__gethex+0x268>
 8031560:	eba5 0800 	sub.w	r8, r5, r0
 8031564:	4621      	mov	r1, r4
 8031566:	4642      	mov	r2, r8
 8031568:	4648      	mov	r0, r9
 803156a:	f7fd fdd1 	bl	802f110 <__lshift>
 803156e:	eba6 0608 	sub.w	r6, r6, r8
 8031572:	4604      	mov	r4, r0
 8031574:	f100 0a14 	add.w	sl, r0, #20
 8031578:	f04f 0b00 	mov.w	fp, #0
 803157c:	e7ba      	b.n	80314f4 <__gethex+0x1e4>
 803157e:	687b      	ldr	r3, [r7, #4]
 8031580:	42b3      	cmp	r3, r6
 8031582:	dd73      	ble.n	803166c <__gethex+0x35c>
 8031584:	1b9e      	subs	r6, r3, r6
 8031586:	42b5      	cmp	r5, r6
 8031588:	dc34      	bgt.n	80315f4 <__gethex+0x2e4>
 803158a:	68fb      	ldr	r3, [r7, #12]
 803158c:	2b02      	cmp	r3, #2
 803158e:	d023      	beq.n	80315d8 <__gethex+0x2c8>
 8031590:	2b03      	cmp	r3, #3
 8031592:	d025      	beq.n	80315e0 <__gethex+0x2d0>
 8031594:	2b01      	cmp	r3, #1
 8031596:	d115      	bne.n	80315c4 <__gethex+0x2b4>
 8031598:	42b5      	cmp	r5, r6
 803159a:	d113      	bne.n	80315c4 <__gethex+0x2b4>
 803159c:	2d01      	cmp	r5, #1
 803159e:	d10b      	bne.n	80315b8 <__gethex+0x2a8>
 80315a0:	9a02      	ldr	r2, [sp, #8]
 80315a2:	687b      	ldr	r3, [r7, #4]
 80315a4:	6013      	str	r3, [r2, #0]
 80315a6:	2301      	movs	r3, #1
 80315a8:	6123      	str	r3, [r4, #16]
 80315aa:	f8ca 3000 	str.w	r3, [sl]
 80315ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80315b0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80315b4:	601c      	str	r4, [r3, #0]
 80315b6:	e735      	b.n	8031424 <__gethex+0x114>
 80315b8:	1e69      	subs	r1, r5, #1
 80315ba:	4620      	mov	r0, r4
 80315bc:	f7fd ffda 	bl	802f574 <__any_on>
 80315c0:	2800      	cmp	r0, #0
 80315c2:	d1ed      	bne.n	80315a0 <__gethex+0x290>
 80315c4:	4621      	mov	r1, r4
 80315c6:	4648      	mov	r0, r9
 80315c8:	f7fd fb88 	bl	802ecdc <_Bfree>
 80315cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80315ce:	2300      	movs	r3, #0
 80315d0:	6013      	str	r3, [r2, #0]
 80315d2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80315d6:	e725      	b.n	8031424 <__gethex+0x114>
 80315d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80315da:	2b00      	cmp	r3, #0
 80315dc:	d1f2      	bne.n	80315c4 <__gethex+0x2b4>
 80315de:	e7df      	b.n	80315a0 <__gethex+0x290>
 80315e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80315e2:	2b00      	cmp	r3, #0
 80315e4:	d1dc      	bne.n	80315a0 <__gethex+0x290>
 80315e6:	e7ed      	b.n	80315c4 <__gethex+0x2b4>
 80315e8:	08034fec 	.word	0x08034fec
 80315ec:	08034e81 	.word	0x08034e81
 80315f0:	08035175 	.word	0x08035175
 80315f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80315f8:	f1bb 0f00 	cmp.w	fp, #0
 80315fc:	d133      	bne.n	8031666 <__gethex+0x356>
 80315fe:	f1b8 0f00 	cmp.w	r8, #0
 8031602:	d004      	beq.n	803160e <__gethex+0x2fe>
 8031604:	4641      	mov	r1, r8
 8031606:	4620      	mov	r0, r4
 8031608:	f7fd ffb4 	bl	802f574 <__any_on>
 803160c:	4683      	mov	fp, r0
 803160e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8031612:	2301      	movs	r3, #1
 8031614:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8031618:	f008 081f 	and.w	r8, r8, #31
 803161c:	fa03 f308 	lsl.w	r3, r3, r8
 8031620:	4213      	tst	r3, r2
 8031622:	4631      	mov	r1, r6
 8031624:	4620      	mov	r0, r4
 8031626:	bf18      	it	ne
 8031628:	f04b 0b02 	orrne.w	fp, fp, #2
 803162c:	1bad      	subs	r5, r5, r6
 803162e:	f7ff fe07 	bl	8031240 <rshift>
 8031632:	687e      	ldr	r6, [r7, #4]
 8031634:	f04f 0802 	mov.w	r8, #2
 8031638:	f1bb 0f00 	cmp.w	fp, #0
 803163c:	d04a      	beq.n	80316d4 <__gethex+0x3c4>
 803163e:	68fb      	ldr	r3, [r7, #12]
 8031640:	2b02      	cmp	r3, #2
 8031642:	d016      	beq.n	8031672 <__gethex+0x362>
 8031644:	2b03      	cmp	r3, #3
 8031646:	d018      	beq.n	803167a <__gethex+0x36a>
 8031648:	2b01      	cmp	r3, #1
 803164a:	d109      	bne.n	8031660 <__gethex+0x350>
 803164c:	f01b 0f02 	tst.w	fp, #2
 8031650:	d006      	beq.n	8031660 <__gethex+0x350>
 8031652:	f8da 3000 	ldr.w	r3, [sl]
 8031656:	ea4b 0b03 	orr.w	fp, fp, r3
 803165a:	f01b 0f01 	tst.w	fp, #1
 803165e:	d10f      	bne.n	8031680 <__gethex+0x370>
 8031660:	f048 0810 	orr.w	r8, r8, #16
 8031664:	e036      	b.n	80316d4 <__gethex+0x3c4>
 8031666:	f04f 0b01 	mov.w	fp, #1
 803166a:	e7d0      	b.n	803160e <__gethex+0x2fe>
 803166c:	f04f 0801 	mov.w	r8, #1
 8031670:	e7e2      	b.n	8031638 <__gethex+0x328>
 8031672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8031674:	f1c3 0301 	rsb	r3, r3, #1
 8031678:	930f      	str	r3, [sp, #60]	; 0x3c
 803167a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803167c:	2b00      	cmp	r3, #0
 803167e:	d0ef      	beq.n	8031660 <__gethex+0x350>
 8031680:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8031684:	f104 0214 	add.w	r2, r4, #20
 8031688:	ea4f 038b 	mov.w	r3, fp, lsl #2
 803168c:	9301      	str	r3, [sp, #4]
 803168e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8031692:	2300      	movs	r3, #0
 8031694:	4694      	mov	ip, r2
 8031696:	f852 1b04 	ldr.w	r1, [r2], #4
 803169a:	f1b1 3fff 	cmp.w	r1, #4294967295
 803169e:	d01e      	beq.n	80316de <__gethex+0x3ce>
 80316a0:	3101      	adds	r1, #1
 80316a2:	f8cc 1000 	str.w	r1, [ip]
 80316a6:	f1b8 0f02 	cmp.w	r8, #2
 80316aa:	f104 0214 	add.w	r2, r4, #20
 80316ae:	d13d      	bne.n	803172c <__gethex+0x41c>
 80316b0:	683b      	ldr	r3, [r7, #0]
 80316b2:	3b01      	subs	r3, #1
 80316b4:	42ab      	cmp	r3, r5
 80316b6:	d10b      	bne.n	80316d0 <__gethex+0x3c0>
 80316b8:	1169      	asrs	r1, r5, #5
 80316ba:	2301      	movs	r3, #1
 80316bc:	f005 051f 	and.w	r5, r5, #31
 80316c0:	fa03 f505 	lsl.w	r5, r3, r5
 80316c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80316c8:	421d      	tst	r5, r3
 80316ca:	bf18      	it	ne
 80316cc:	f04f 0801 	movne.w	r8, #1
 80316d0:	f048 0820 	orr.w	r8, r8, #32
 80316d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80316d6:	601c      	str	r4, [r3, #0]
 80316d8:	9b02      	ldr	r3, [sp, #8]
 80316da:	601e      	str	r6, [r3, #0]
 80316dc:	e6a2      	b.n	8031424 <__gethex+0x114>
 80316de:	4290      	cmp	r0, r2
 80316e0:	f842 3c04 	str.w	r3, [r2, #-4]
 80316e4:	d8d6      	bhi.n	8031694 <__gethex+0x384>
 80316e6:	68a2      	ldr	r2, [r4, #8]
 80316e8:	4593      	cmp	fp, r2
 80316ea:	db17      	blt.n	803171c <__gethex+0x40c>
 80316ec:	6861      	ldr	r1, [r4, #4]
 80316ee:	4648      	mov	r0, r9
 80316f0:	3101      	adds	r1, #1
 80316f2:	f7fd fab3 	bl	802ec5c <_Balloc>
 80316f6:	4682      	mov	sl, r0
 80316f8:	b918      	cbnz	r0, 8031702 <__gethex+0x3f2>
 80316fa:	4b1b      	ldr	r3, [pc, #108]	; (8031768 <__gethex+0x458>)
 80316fc:	4602      	mov	r2, r0
 80316fe:	2184      	movs	r1, #132	; 0x84
 8031700:	e6b3      	b.n	803146a <__gethex+0x15a>
 8031702:	6922      	ldr	r2, [r4, #16]
 8031704:	3202      	adds	r2, #2
 8031706:	f104 010c 	add.w	r1, r4, #12
 803170a:	0092      	lsls	r2, r2, #2
 803170c:	300c      	adds	r0, #12
 803170e:	f7fc fbc2 	bl	802de96 <memcpy>
 8031712:	4621      	mov	r1, r4
 8031714:	4648      	mov	r0, r9
 8031716:	f7fd fae1 	bl	802ecdc <_Bfree>
 803171a:	4654      	mov	r4, sl
 803171c:	6922      	ldr	r2, [r4, #16]
 803171e:	1c51      	adds	r1, r2, #1
 8031720:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8031724:	6121      	str	r1, [r4, #16]
 8031726:	2101      	movs	r1, #1
 8031728:	6151      	str	r1, [r2, #20]
 803172a:	e7bc      	b.n	80316a6 <__gethex+0x396>
 803172c:	6921      	ldr	r1, [r4, #16]
 803172e:	4559      	cmp	r1, fp
 8031730:	dd0b      	ble.n	803174a <__gethex+0x43a>
 8031732:	2101      	movs	r1, #1
 8031734:	4620      	mov	r0, r4
 8031736:	f7ff fd83 	bl	8031240 <rshift>
 803173a:	68bb      	ldr	r3, [r7, #8]
 803173c:	3601      	adds	r6, #1
 803173e:	42b3      	cmp	r3, r6
 8031740:	f6ff aedb 	blt.w	80314fa <__gethex+0x1ea>
 8031744:	f04f 0801 	mov.w	r8, #1
 8031748:	e7c2      	b.n	80316d0 <__gethex+0x3c0>
 803174a:	f015 051f 	ands.w	r5, r5, #31
 803174e:	d0f9      	beq.n	8031744 <__gethex+0x434>
 8031750:	9b01      	ldr	r3, [sp, #4]
 8031752:	441a      	add	r2, r3
 8031754:	f1c5 0520 	rsb	r5, r5, #32
 8031758:	f852 0c04 	ldr.w	r0, [r2, #-4]
 803175c:	f7fd fb70 	bl	802ee40 <__hi0bits>
 8031760:	42a8      	cmp	r0, r5
 8031762:	dbe6      	blt.n	8031732 <__gethex+0x422>
 8031764:	e7ee      	b.n	8031744 <__gethex+0x434>
 8031766:	bf00      	nop
 8031768:	08034e81 	.word	0x08034e81

0803176c <L_shift>:
 803176c:	f1c2 0208 	rsb	r2, r2, #8
 8031770:	0092      	lsls	r2, r2, #2
 8031772:	b570      	push	{r4, r5, r6, lr}
 8031774:	f1c2 0620 	rsb	r6, r2, #32
 8031778:	6843      	ldr	r3, [r0, #4]
 803177a:	6804      	ldr	r4, [r0, #0]
 803177c:	fa03 f506 	lsl.w	r5, r3, r6
 8031780:	432c      	orrs	r4, r5
 8031782:	40d3      	lsrs	r3, r2
 8031784:	6004      	str	r4, [r0, #0]
 8031786:	f840 3f04 	str.w	r3, [r0, #4]!
 803178a:	4288      	cmp	r0, r1
 803178c:	d3f4      	bcc.n	8031778 <L_shift+0xc>
 803178e:	bd70      	pop	{r4, r5, r6, pc}

08031790 <__match>:
 8031790:	b530      	push	{r4, r5, lr}
 8031792:	6803      	ldr	r3, [r0, #0]
 8031794:	3301      	adds	r3, #1
 8031796:	f811 4b01 	ldrb.w	r4, [r1], #1
 803179a:	b914      	cbnz	r4, 80317a2 <__match+0x12>
 803179c:	6003      	str	r3, [r0, #0]
 803179e:	2001      	movs	r0, #1
 80317a0:	bd30      	pop	{r4, r5, pc}
 80317a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80317a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80317aa:	2d19      	cmp	r5, #25
 80317ac:	bf98      	it	ls
 80317ae:	3220      	addls	r2, #32
 80317b0:	42a2      	cmp	r2, r4
 80317b2:	d0f0      	beq.n	8031796 <__match+0x6>
 80317b4:	2000      	movs	r0, #0
 80317b6:	e7f3      	b.n	80317a0 <__match+0x10>

080317b8 <__hexnan>:
 80317b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80317bc:	680b      	ldr	r3, [r1, #0]
 80317be:	6801      	ldr	r1, [r0, #0]
 80317c0:	115e      	asrs	r6, r3, #5
 80317c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80317c6:	f013 031f 	ands.w	r3, r3, #31
 80317ca:	b087      	sub	sp, #28
 80317cc:	bf18      	it	ne
 80317ce:	3604      	addne	r6, #4
 80317d0:	2500      	movs	r5, #0
 80317d2:	1f37      	subs	r7, r6, #4
 80317d4:	4682      	mov	sl, r0
 80317d6:	4690      	mov	r8, r2
 80317d8:	9301      	str	r3, [sp, #4]
 80317da:	f846 5c04 	str.w	r5, [r6, #-4]
 80317de:	46b9      	mov	r9, r7
 80317e0:	463c      	mov	r4, r7
 80317e2:	9502      	str	r5, [sp, #8]
 80317e4:	46ab      	mov	fp, r5
 80317e6:	784a      	ldrb	r2, [r1, #1]
 80317e8:	1c4b      	adds	r3, r1, #1
 80317ea:	9303      	str	r3, [sp, #12]
 80317ec:	b342      	cbz	r2, 8031840 <__hexnan+0x88>
 80317ee:	4610      	mov	r0, r2
 80317f0:	9105      	str	r1, [sp, #20]
 80317f2:	9204      	str	r2, [sp, #16]
 80317f4:	f7ff fd76 	bl	80312e4 <__hexdig_fun>
 80317f8:	2800      	cmp	r0, #0
 80317fa:	d14f      	bne.n	803189c <__hexnan+0xe4>
 80317fc:	9a04      	ldr	r2, [sp, #16]
 80317fe:	9905      	ldr	r1, [sp, #20]
 8031800:	2a20      	cmp	r2, #32
 8031802:	d818      	bhi.n	8031836 <__hexnan+0x7e>
 8031804:	9b02      	ldr	r3, [sp, #8]
 8031806:	459b      	cmp	fp, r3
 8031808:	dd13      	ble.n	8031832 <__hexnan+0x7a>
 803180a:	454c      	cmp	r4, r9
 803180c:	d206      	bcs.n	803181c <__hexnan+0x64>
 803180e:	2d07      	cmp	r5, #7
 8031810:	dc04      	bgt.n	803181c <__hexnan+0x64>
 8031812:	462a      	mov	r2, r5
 8031814:	4649      	mov	r1, r9
 8031816:	4620      	mov	r0, r4
 8031818:	f7ff ffa8 	bl	803176c <L_shift>
 803181c:	4544      	cmp	r4, r8
 803181e:	d950      	bls.n	80318c2 <__hexnan+0x10a>
 8031820:	2300      	movs	r3, #0
 8031822:	f1a4 0904 	sub.w	r9, r4, #4
 8031826:	f844 3c04 	str.w	r3, [r4, #-4]
 803182a:	f8cd b008 	str.w	fp, [sp, #8]
 803182e:	464c      	mov	r4, r9
 8031830:	461d      	mov	r5, r3
 8031832:	9903      	ldr	r1, [sp, #12]
 8031834:	e7d7      	b.n	80317e6 <__hexnan+0x2e>
 8031836:	2a29      	cmp	r2, #41	; 0x29
 8031838:	d155      	bne.n	80318e6 <__hexnan+0x12e>
 803183a:	3102      	adds	r1, #2
 803183c:	f8ca 1000 	str.w	r1, [sl]
 8031840:	f1bb 0f00 	cmp.w	fp, #0
 8031844:	d04f      	beq.n	80318e6 <__hexnan+0x12e>
 8031846:	454c      	cmp	r4, r9
 8031848:	d206      	bcs.n	8031858 <__hexnan+0xa0>
 803184a:	2d07      	cmp	r5, #7
 803184c:	dc04      	bgt.n	8031858 <__hexnan+0xa0>
 803184e:	462a      	mov	r2, r5
 8031850:	4649      	mov	r1, r9
 8031852:	4620      	mov	r0, r4
 8031854:	f7ff ff8a 	bl	803176c <L_shift>
 8031858:	4544      	cmp	r4, r8
 803185a:	d934      	bls.n	80318c6 <__hexnan+0x10e>
 803185c:	f1a8 0204 	sub.w	r2, r8, #4
 8031860:	4623      	mov	r3, r4
 8031862:	f853 1b04 	ldr.w	r1, [r3], #4
 8031866:	f842 1f04 	str.w	r1, [r2, #4]!
 803186a:	429f      	cmp	r7, r3
 803186c:	d2f9      	bcs.n	8031862 <__hexnan+0xaa>
 803186e:	1b3b      	subs	r3, r7, r4
 8031870:	f023 0303 	bic.w	r3, r3, #3
 8031874:	3304      	adds	r3, #4
 8031876:	3e03      	subs	r6, #3
 8031878:	3401      	adds	r4, #1
 803187a:	42a6      	cmp	r6, r4
 803187c:	bf38      	it	cc
 803187e:	2304      	movcc	r3, #4
 8031880:	4443      	add	r3, r8
 8031882:	2200      	movs	r2, #0
 8031884:	f843 2b04 	str.w	r2, [r3], #4
 8031888:	429f      	cmp	r7, r3
 803188a:	d2fb      	bcs.n	8031884 <__hexnan+0xcc>
 803188c:	683b      	ldr	r3, [r7, #0]
 803188e:	b91b      	cbnz	r3, 8031898 <__hexnan+0xe0>
 8031890:	4547      	cmp	r7, r8
 8031892:	d126      	bne.n	80318e2 <__hexnan+0x12a>
 8031894:	2301      	movs	r3, #1
 8031896:	603b      	str	r3, [r7, #0]
 8031898:	2005      	movs	r0, #5
 803189a:	e025      	b.n	80318e8 <__hexnan+0x130>
 803189c:	3501      	adds	r5, #1
 803189e:	2d08      	cmp	r5, #8
 80318a0:	f10b 0b01 	add.w	fp, fp, #1
 80318a4:	dd06      	ble.n	80318b4 <__hexnan+0xfc>
 80318a6:	4544      	cmp	r4, r8
 80318a8:	d9c3      	bls.n	8031832 <__hexnan+0x7a>
 80318aa:	2300      	movs	r3, #0
 80318ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80318b0:	2501      	movs	r5, #1
 80318b2:	3c04      	subs	r4, #4
 80318b4:	6822      	ldr	r2, [r4, #0]
 80318b6:	f000 000f 	and.w	r0, r0, #15
 80318ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80318be:	6020      	str	r0, [r4, #0]
 80318c0:	e7b7      	b.n	8031832 <__hexnan+0x7a>
 80318c2:	2508      	movs	r5, #8
 80318c4:	e7b5      	b.n	8031832 <__hexnan+0x7a>
 80318c6:	9b01      	ldr	r3, [sp, #4]
 80318c8:	2b00      	cmp	r3, #0
 80318ca:	d0df      	beq.n	803188c <__hexnan+0xd4>
 80318cc:	f1c3 0320 	rsb	r3, r3, #32
 80318d0:	f04f 32ff 	mov.w	r2, #4294967295
 80318d4:	40da      	lsrs	r2, r3
 80318d6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80318da:	4013      	ands	r3, r2
 80318dc:	f846 3c04 	str.w	r3, [r6, #-4]
 80318e0:	e7d4      	b.n	803188c <__hexnan+0xd4>
 80318e2:	3f04      	subs	r7, #4
 80318e4:	e7d2      	b.n	803188c <__hexnan+0xd4>
 80318e6:	2004      	movs	r0, #4
 80318e8:	b007      	add	sp, #28
 80318ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080318ee <__ascii_mbtowc>:
 80318ee:	b082      	sub	sp, #8
 80318f0:	b901      	cbnz	r1, 80318f4 <__ascii_mbtowc+0x6>
 80318f2:	a901      	add	r1, sp, #4
 80318f4:	b142      	cbz	r2, 8031908 <__ascii_mbtowc+0x1a>
 80318f6:	b14b      	cbz	r3, 803190c <__ascii_mbtowc+0x1e>
 80318f8:	7813      	ldrb	r3, [r2, #0]
 80318fa:	600b      	str	r3, [r1, #0]
 80318fc:	7812      	ldrb	r2, [r2, #0]
 80318fe:	1e10      	subs	r0, r2, #0
 8031900:	bf18      	it	ne
 8031902:	2001      	movne	r0, #1
 8031904:	b002      	add	sp, #8
 8031906:	4770      	bx	lr
 8031908:	4610      	mov	r0, r2
 803190a:	e7fb      	b.n	8031904 <__ascii_mbtowc+0x16>
 803190c:	f06f 0001 	mvn.w	r0, #1
 8031910:	e7f8      	b.n	8031904 <__ascii_mbtowc+0x16>

08031912 <_realloc_r>:
 8031912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031916:	4680      	mov	r8, r0
 8031918:	4614      	mov	r4, r2
 803191a:	460e      	mov	r6, r1
 803191c:	b921      	cbnz	r1, 8031928 <_realloc_r+0x16>
 803191e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031922:	4611      	mov	r1, r2
 8031924:	f7fa bf76 	b.w	802c814 <_malloc_r>
 8031928:	b92a      	cbnz	r2, 8031936 <_realloc_r+0x24>
 803192a:	f7fd f94b 	bl	802ebc4 <_free_r>
 803192e:	4625      	mov	r5, r4
 8031930:	4628      	mov	r0, r5
 8031932:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031936:	f000 f89c 	bl	8031a72 <_malloc_usable_size_r>
 803193a:	4284      	cmp	r4, r0
 803193c:	4607      	mov	r7, r0
 803193e:	d802      	bhi.n	8031946 <_realloc_r+0x34>
 8031940:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8031944:	d812      	bhi.n	803196c <_realloc_r+0x5a>
 8031946:	4621      	mov	r1, r4
 8031948:	4640      	mov	r0, r8
 803194a:	f7fa ff63 	bl	802c814 <_malloc_r>
 803194e:	4605      	mov	r5, r0
 8031950:	2800      	cmp	r0, #0
 8031952:	d0ed      	beq.n	8031930 <_realloc_r+0x1e>
 8031954:	42bc      	cmp	r4, r7
 8031956:	4622      	mov	r2, r4
 8031958:	4631      	mov	r1, r6
 803195a:	bf28      	it	cs
 803195c:	463a      	movcs	r2, r7
 803195e:	f7fc fa9a 	bl	802de96 <memcpy>
 8031962:	4631      	mov	r1, r6
 8031964:	4640      	mov	r0, r8
 8031966:	f7fd f92d 	bl	802ebc4 <_free_r>
 803196a:	e7e1      	b.n	8031930 <_realloc_r+0x1e>
 803196c:	4635      	mov	r5, r6
 803196e:	e7df      	b.n	8031930 <_realloc_r+0x1e>

08031970 <_strtoul_l.constprop.0>:
 8031970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031974:	4f36      	ldr	r7, [pc, #216]	; (8031a50 <_strtoul_l.constprop.0+0xe0>)
 8031976:	4686      	mov	lr, r0
 8031978:	460d      	mov	r5, r1
 803197a:	4628      	mov	r0, r5
 803197c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031980:	5d3e      	ldrb	r6, [r7, r4]
 8031982:	f016 0608 	ands.w	r6, r6, #8
 8031986:	d1f8      	bne.n	803197a <_strtoul_l.constprop.0+0xa>
 8031988:	2c2d      	cmp	r4, #45	; 0x2d
 803198a:	d130      	bne.n	80319ee <_strtoul_l.constprop.0+0x7e>
 803198c:	782c      	ldrb	r4, [r5, #0]
 803198e:	2601      	movs	r6, #1
 8031990:	1c85      	adds	r5, r0, #2
 8031992:	2b00      	cmp	r3, #0
 8031994:	d057      	beq.n	8031a46 <_strtoul_l.constprop.0+0xd6>
 8031996:	2b10      	cmp	r3, #16
 8031998:	d109      	bne.n	80319ae <_strtoul_l.constprop.0+0x3e>
 803199a:	2c30      	cmp	r4, #48	; 0x30
 803199c:	d107      	bne.n	80319ae <_strtoul_l.constprop.0+0x3e>
 803199e:	7828      	ldrb	r0, [r5, #0]
 80319a0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80319a4:	2858      	cmp	r0, #88	; 0x58
 80319a6:	d149      	bne.n	8031a3c <_strtoul_l.constprop.0+0xcc>
 80319a8:	786c      	ldrb	r4, [r5, #1]
 80319aa:	2310      	movs	r3, #16
 80319ac:	3502      	adds	r5, #2
 80319ae:	f04f 38ff 	mov.w	r8, #4294967295
 80319b2:	2700      	movs	r7, #0
 80319b4:	fbb8 f8f3 	udiv	r8, r8, r3
 80319b8:	fb03 f908 	mul.w	r9, r3, r8
 80319bc:	ea6f 0909 	mvn.w	r9, r9
 80319c0:	4638      	mov	r0, r7
 80319c2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80319c6:	f1bc 0f09 	cmp.w	ip, #9
 80319ca:	d815      	bhi.n	80319f8 <_strtoul_l.constprop.0+0x88>
 80319cc:	4664      	mov	r4, ip
 80319ce:	42a3      	cmp	r3, r4
 80319d0:	dd23      	ble.n	8031a1a <_strtoul_l.constprop.0+0xaa>
 80319d2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80319d6:	d007      	beq.n	80319e8 <_strtoul_l.constprop.0+0x78>
 80319d8:	4580      	cmp	r8, r0
 80319da:	d31b      	bcc.n	8031a14 <_strtoul_l.constprop.0+0xa4>
 80319dc:	d101      	bne.n	80319e2 <_strtoul_l.constprop.0+0x72>
 80319de:	45a1      	cmp	r9, r4
 80319e0:	db18      	blt.n	8031a14 <_strtoul_l.constprop.0+0xa4>
 80319e2:	fb00 4003 	mla	r0, r0, r3, r4
 80319e6:	2701      	movs	r7, #1
 80319e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80319ec:	e7e9      	b.n	80319c2 <_strtoul_l.constprop.0+0x52>
 80319ee:	2c2b      	cmp	r4, #43	; 0x2b
 80319f0:	bf04      	itt	eq
 80319f2:	782c      	ldrbeq	r4, [r5, #0]
 80319f4:	1c85      	addeq	r5, r0, #2
 80319f6:	e7cc      	b.n	8031992 <_strtoul_l.constprop.0+0x22>
 80319f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80319fc:	f1bc 0f19 	cmp.w	ip, #25
 8031a00:	d801      	bhi.n	8031a06 <_strtoul_l.constprop.0+0x96>
 8031a02:	3c37      	subs	r4, #55	; 0x37
 8031a04:	e7e3      	b.n	80319ce <_strtoul_l.constprop.0+0x5e>
 8031a06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8031a0a:	f1bc 0f19 	cmp.w	ip, #25
 8031a0e:	d804      	bhi.n	8031a1a <_strtoul_l.constprop.0+0xaa>
 8031a10:	3c57      	subs	r4, #87	; 0x57
 8031a12:	e7dc      	b.n	80319ce <_strtoul_l.constprop.0+0x5e>
 8031a14:	f04f 37ff 	mov.w	r7, #4294967295
 8031a18:	e7e6      	b.n	80319e8 <_strtoul_l.constprop.0+0x78>
 8031a1a:	1c7b      	adds	r3, r7, #1
 8031a1c:	d106      	bne.n	8031a2c <_strtoul_l.constprop.0+0xbc>
 8031a1e:	2322      	movs	r3, #34	; 0x22
 8031a20:	f8ce 3000 	str.w	r3, [lr]
 8031a24:	4638      	mov	r0, r7
 8031a26:	b932      	cbnz	r2, 8031a36 <_strtoul_l.constprop.0+0xc6>
 8031a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8031a2c:	b106      	cbz	r6, 8031a30 <_strtoul_l.constprop.0+0xc0>
 8031a2e:	4240      	negs	r0, r0
 8031a30:	2a00      	cmp	r2, #0
 8031a32:	d0f9      	beq.n	8031a28 <_strtoul_l.constprop.0+0xb8>
 8031a34:	b107      	cbz	r7, 8031a38 <_strtoul_l.constprop.0+0xc8>
 8031a36:	1e69      	subs	r1, r5, #1
 8031a38:	6011      	str	r1, [r2, #0]
 8031a3a:	e7f5      	b.n	8031a28 <_strtoul_l.constprop.0+0xb8>
 8031a3c:	2430      	movs	r4, #48	; 0x30
 8031a3e:	2b00      	cmp	r3, #0
 8031a40:	d1b5      	bne.n	80319ae <_strtoul_l.constprop.0+0x3e>
 8031a42:	2308      	movs	r3, #8
 8031a44:	e7b3      	b.n	80319ae <_strtoul_l.constprop.0+0x3e>
 8031a46:	2c30      	cmp	r4, #48	; 0x30
 8031a48:	d0a9      	beq.n	803199e <_strtoul_l.constprop.0+0x2e>
 8031a4a:	230a      	movs	r3, #10
 8031a4c:	e7af      	b.n	80319ae <_strtoul_l.constprop.0+0x3e>
 8031a4e:	bf00      	nop
 8031a50:	08035041 	.word	0x08035041

08031a54 <_strtoul_r>:
 8031a54:	f7ff bf8c 	b.w	8031970 <_strtoul_l.constprop.0>

08031a58 <__ascii_wctomb>:
 8031a58:	b149      	cbz	r1, 8031a6e <__ascii_wctomb+0x16>
 8031a5a:	2aff      	cmp	r2, #255	; 0xff
 8031a5c:	bf85      	ittet	hi
 8031a5e:	238a      	movhi	r3, #138	; 0x8a
 8031a60:	6003      	strhi	r3, [r0, #0]
 8031a62:	700a      	strbls	r2, [r1, #0]
 8031a64:	f04f 30ff 	movhi.w	r0, #4294967295
 8031a68:	bf98      	it	ls
 8031a6a:	2001      	movls	r0, #1
 8031a6c:	4770      	bx	lr
 8031a6e:	4608      	mov	r0, r1
 8031a70:	4770      	bx	lr

08031a72 <_malloc_usable_size_r>:
 8031a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031a76:	1f18      	subs	r0, r3, #4
 8031a78:	2b00      	cmp	r3, #0
 8031a7a:	bfbc      	itt	lt
 8031a7c:	580b      	ldrlt	r3, [r1, r0]
 8031a7e:	18c0      	addlt	r0, r0, r3
 8031a80:	4770      	bx	lr
	...

08031a84 <_init>:
 8031a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a86:	bf00      	nop
 8031a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a8a:	bc08      	pop	{r3}
 8031a8c:	469e      	mov	lr, r3
 8031a8e:	4770      	bx	lr

08031a90 <_fini>:
 8031a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a92:	bf00      	nop
 8031a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a96:	bc08      	pop	{r3}
 8031a98:	469e      	mov	lr, r3
 8031a9a:	4770      	bx	lr
