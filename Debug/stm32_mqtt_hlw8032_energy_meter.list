
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002150c  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003640  080316b0  080316b0  000316b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034cf0  08034cf0  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  08034cf0  08034cf0  00034cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08034cf8  08034cf8  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034cf8  08034cf8  00034cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08034cfc  08034cfc  00034cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08034d00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d7fc  200002f8  08034ff8  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000daf4  08034ff8  0004daf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002efbc  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b19  00000000  00000000  0006f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ab0  00000000  00000000  00076e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002269  00000000  00000000  000798f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f9aa  00000000  00000000  0007bb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000330a8  00000000  00000000  0009b503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa256  00000000  00000000  000ce5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ca7c  00000000  00000000  00178804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00185280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08031694 	.word	0x08031694

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	08031694 	.word	0x08031694

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	; 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9ba 	b.w	8011044 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9e08      	ldr	r6, [sp, #32]
 8010d82:	460d      	mov	r5, r1
 8010d84:	4604      	mov	r4, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14a      	bne.n	8010e22 <__udivmoddi4+0xa6>
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	4694      	mov	ip, r2
 8010d90:	d965      	bls.n	8010e5e <__udivmoddi4+0xe2>
 8010d92:	fab2 f382 	clz	r3, r2
 8010d96:	b143      	cbz	r3, 8010daa <__udivmoddi4+0x2e>
 8010d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8010d9c:	f1c3 0220 	rsb	r2, r3, #32
 8010da0:	409f      	lsls	r7, r3
 8010da2:	fa20 f202 	lsr.w	r2, r0, r2
 8010da6:	4317      	orrs	r7, r2
 8010da8:	409c      	lsls	r4, r3
 8010daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010dae:	fa1f f58c 	uxth.w	r5, ip
 8010db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8010db6:	0c22      	lsrs	r2, r4, #16
 8010db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8010dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010dc0:	fb01 f005 	mul.w	r0, r1, r5
 8010dc4:	4290      	cmp	r0, r2
 8010dc6:	d90a      	bls.n	8010dde <__udivmoddi4+0x62>
 8010dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8010dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8010dd0:	f080 811c 	bcs.w	801100c <__udivmoddi4+0x290>
 8010dd4:	4290      	cmp	r0, r2
 8010dd6:	f240 8119 	bls.w	801100c <__udivmoddi4+0x290>
 8010dda:	3902      	subs	r1, #2
 8010ddc:	4462      	add	r2, ip
 8010dde:	1a12      	subs	r2, r2, r0
 8010de0:	b2a4      	uxth	r4, r4
 8010de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8010de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8010dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010dee:	fb00 f505 	mul.w	r5, r0, r5
 8010df2:	42a5      	cmp	r5, r4
 8010df4:	d90a      	bls.n	8010e0c <__udivmoddi4+0x90>
 8010df6:	eb1c 0404 	adds.w	r4, ip, r4
 8010dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8010dfe:	f080 8107 	bcs.w	8011010 <__udivmoddi4+0x294>
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	f240 8104 	bls.w	8011010 <__udivmoddi4+0x294>
 8010e08:	4464      	add	r4, ip
 8010e0a:	3802      	subs	r0, #2
 8010e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	2100      	movs	r1, #0
 8010e14:	b11e      	cbz	r6, 8010e1e <__udivmoddi4+0xa2>
 8010e16:	40dc      	lsrs	r4, r3
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	428b      	cmp	r3, r1
 8010e24:	d908      	bls.n	8010e38 <__udivmoddi4+0xbc>
 8010e26:	2e00      	cmp	r6, #0
 8010e28:	f000 80ed 	beq.w	8011006 <__udivmoddi4+0x28a>
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8010e32:	4608      	mov	r0, r1
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	fab3 f183 	clz	r1, r3
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d149      	bne.n	8010ed4 <__udivmoddi4+0x158>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d302      	bcc.n	8010e4a <__udivmoddi4+0xce>
 8010e44:	4282      	cmp	r2, r0
 8010e46:	f200 80f8 	bhi.w	801103a <__udivmoddi4+0x2be>
 8010e4a:	1a84      	subs	r4, r0, r2
 8010e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8010e50:	2001      	movs	r0, #1
 8010e52:	4617      	mov	r7, r2
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0e2      	beq.n	8010e1e <__udivmoddi4+0xa2>
 8010e58:	e9c6 4700 	strd	r4, r7, [r6]
 8010e5c:	e7df      	b.n	8010e1e <__udivmoddi4+0xa2>
 8010e5e:	b902      	cbnz	r2, 8010e62 <__udivmoddi4+0xe6>
 8010e60:	deff      	udf	#255	; 0xff
 8010e62:	fab2 f382 	clz	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f040 8090 	bne.w	8010f8c <__udivmoddi4+0x210>
 8010e6c:	1a8a      	subs	r2, r1, r2
 8010e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e72:	fa1f fe8c 	uxth.w	lr, ip
 8010e76:	2101      	movs	r1, #1
 8010e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8010e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8010e80:	0c22      	lsrs	r2, r4, #16
 8010e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010e86:	fb0e f005 	mul.w	r0, lr, r5
 8010e8a:	4290      	cmp	r0, r2
 8010e8c:	d908      	bls.n	8010ea0 <__udivmoddi4+0x124>
 8010e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8010e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8010e96:	d202      	bcs.n	8010e9e <__udivmoddi4+0x122>
 8010e98:	4290      	cmp	r0, r2
 8010e9a:	f200 80cb 	bhi.w	8011034 <__udivmoddi4+0x2b8>
 8010e9e:	4645      	mov	r5, r8
 8010ea0:	1a12      	subs	r2, r2, r0
 8010ea2:	b2a4      	uxth	r4, r4
 8010ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8010ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8010eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8010eb4:	45a6      	cmp	lr, r4
 8010eb6:	d908      	bls.n	8010eca <__udivmoddi4+0x14e>
 8010eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8010ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8010ec0:	d202      	bcs.n	8010ec8 <__udivmoddi4+0x14c>
 8010ec2:	45a6      	cmp	lr, r4
 8010ec4:	f200 80bb 	bhi.w	801103e <__udivmoddi4+0x2c2>
 8010ec8:	4610      	mov	r0, r2
 8010eca:	eba4 040e 	sub.w	r4, r4, lr
 8010ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010ed2:	e79f      	b.n	8010e14 <__udivmoddi4+0x98>
 8010ed4:	f1c1 0720 	rsb	r7, r1, #32
 8010ed8:	408b      	lsls	r3, r1
 8010eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8010ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8010ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8010ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8010eea:	40fd      	lsrs	r5, r7
 8010eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010ef0:	4323      	orrs	r3, r4
 8010ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8010ef6:	fa1f fe8c 	uxth.w	lr, ip
 8010efa:	fb09 5518 	mls	r5, r9, r8, r5
 8010efe:	0c1c      	lsrs	r4, r3, #16
 8010f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010f04:	fb08 f50e 	mul.w	r5, r8, lr
 8010f08:	42a5      	cmp	r5, r4
 8010f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8010f12:	d90b      	bls.n	8010f2c <__udivmoddi4+0x1b0>
 8010f14:	eb1c 0404 	adds.w	r4, ip, r4
 8010f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8010f1c:	f080 8088 	bcs.w	8011030 <__udivmoddi4+0x2b4>
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	f240 8085 	bls.w	8011030 <__udivmoddi4+0x2b4>
 8010f26:	f1a8 0802 	sub.w	r8, r8, #2
 8010f2a:	4464      	add	r4, ip
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	b29d      	uxth	r5, r3
 8010f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8010f34:	fb09 4413 	mls	r4, r9, r3, r4
 8010f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8010f40:	45a6      	cmp	lr, r4
 8010f42:	d908      	bls.n	8010f56 <__udivmoddi4+0x1da>
 8010f44:	eb1c 0404 	adds.w	r4, ip, r4
 8010f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8010f4c:	d26c      	bcs.n	8011028 <__udivmoddi4+0x2ac>
 8010f4e:	45a6      	cmp	lr, r4
 8010f50:	d96a      	bls.n	8011028 <__udivmoddi4+0x2ac>
 8010f52:	3b02      	subs	r3, #2
 8010f54:	4464      	add	r4, ip
 8010f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8010f5e:	eba4 040e 	sub.w	r4, r4, lr
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	46c8      	mov	r8, r9
 8010f66:	46ae      	mov	lr, r5
 8010f68:	d356      	bcc.n	8011018 <__udivmoddi4+0x29c>
 8010f6a:	d053      	beq.n	8011014 <__udivmoddi4+0x298>
 8010f6c:	b156      	cbz	r6, 8010f84 <__udivmoddi4+0x208>
 8010f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8010f72:	eb64 040e 	sbc.w	r4, r4, lr
 8010f76:	fa04 f707 	lsl.w	r7, r4, r7
 8010f7a:	40ca      	lsrs	r2, r1
 8010f7c:	40cc      	lsrs	r4, r1
 8010f7e:	4317      	orrs	r7, r2
 8010f80:	e9c6 7400 	strd	r7, r4, [r6]
 8010f84:	4618      	mov	r0, r3
 8010f86:	2100      	movs	r1, #0
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	f1c3 0120 	rsb	r1, r3, #32
 8010f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8010f94:	fa20 f201 	lsr.w	r2, r0, r1
 8010f98:	fa25 f101 	lsr.w	r1, r5, r1
 8010f9c:	409d      	lsls	r5, r3
 8010f9e:	432a      	orrs	r2, r5
 8010fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010fa4:	fa1f fe8c 	uxth.w	lr, ip
 8010fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8010fac:	fb07 1510 	mls	r5, r7, r0, r1
 8010fb0:	0c11      	lsrs	r1, r2, #16
 8010fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8010fba:	428d      	cmp	r5, r1
 8010fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8010fc0:	d908      	bls.n	8010fd4 <__udivmoddi4+0x258>
 8010fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8010fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8010fca:	d22f      	bcs.n	801102c <__udivmoddi4+0x2b0>
 8010fcc:	428d      	cmp	r5, r1
 8010fce:	d92d      	bls.n	801102c <__udivmoddi4+0x2b0>
 8010fd0:	3802      	subs	r0, #2
 8010fd2:	4461      	add	r1, ip
 8010fd4:	1b49      	subs	r1, r1, r5
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8010fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8010fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8010fe8:	4291      	cmp	r1, r2
 8010fea:	d908      	bls.n	8010ffe <__udivmoddi4+0x282>
 8010fec:	eb1c 0202 	adds.w	r2, ip, r2
 8010ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8010ff4:	d216      	bcs.n	8011024 <__udivmoddi4+0x2a8>
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	d914      	bls.n	8011024 <__udivmoddi4+0x2a8>
 8010ffa:	3d02      	subs	r5, #2
 8010ffc:	4462      	add	r2, ip
 8010ffe:	1a52      	subs	r2, r2, r1
 8011000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8011004:	e738      	b.n	8010e78 <__udivmoddi4+0xfc>
 8011006:	4631      	mov	r1, r6
 8011008:	4630      	mov	r0, r6
 801100a:	e708      	b.n	8010e1e <__udivmoddi4+0xa2>
 801100c:	4639      	mov	r1, r7
 801100e:	e6e6      	b.n	8010dde <__udivmoddi4+0x62>
 8011010:	4610      	mov	r0, r2
 8011012:	e6fb      	b.n	8010e0c <__udivmoddi4+0x90>
 8011014:	4548      	cmp	r0, r9
 8011016:	d2a9      	bcs.n	8010f6c <__udivmoddi4+0x1f0>
 8011018:	ebb9 0802 	subs.w	r8, r9, r2
 801101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8011020:	3b01      	subs	r3, #1
 8011022:	e7a3      	b.n	8010f6c <__udivmoddi4+0x1f0>
 8011024:	4645      	mov	r5, r8
 8011026:	e7ea      	b.n	8010ffe <__udivmoddi4+0x282>
 8011028:	462b      	mov	r3, r5
 801102a:	e794      	b.n	8010f56 <__udivmoddi4+0x1da>
 801102c:	4640      	mov	r0, r8
 801102e:	e7d1      	b.n	8010fd4 <__udivmoddi4+0x258>
 8011030:	46d0      	mov	r8, sl
 8011032:	e77b      	b.n	8010f2c <__udivmoddi4+0x1b0>
 8011034:	3d02      	subs	r5, #2
 8011036:	4462      	add	r2, ip
 8011038:	e732      	b.n	8010ea0 <__udivmoddi4+0x124>
 801103a:	4608      	mov	r0, r1
 801103c:	e70a      	b.n	8010e54 <__udivmoddi4+0xd8>
 801103e:	4464      	add	r4, ip
 8011040:	3802      	subs	r0, #2
 8011042:	e742      	b.n	8010eca <__udivmoddi4+0x14e>

08011044 <__aeabi_idiv0>:
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop

08011048 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0

}
 801104c:	bf00      	nop
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8011056:	b480      	push	{r7}
 8011058:	af00      	add	r7, sp, #0
return 0;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
	...

08011068 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
 8011070:	460b      	mov	r3, r1
 8011072:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	4a0e      	ldr	r2, [pc, #56]	; (80110b4 <HAL_UARTEx_RxEventCallback+0x4c>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d116      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801107e:	887b      	ldrh	r3, [r7, #2]
 8011080:	2b18      	cmp	r3, #24
 8011082:	d113      	bne.n	80110ac <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011084:	4b0c      	ldr	r3, [pc, #48]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f00f f9e1 	bl	8020450 <osMessageQueueGetCount>
 801108e:	4603      	mov	r3, r0
 8011090:	2b00      	cmp	r3, #0
 8011092:	d106      	bne.n	80110a2 <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 8011094:	4b08      	ldr	r3, [pc, #32]	; (80110b8 <HAL_UARTEx_RxEventCallback+0x50>)
 8011096:	6818      	ldr	r0, [r3, #0]
 8011098:	2300      	movs	r3, #0
 801109a:	2200      	movs	r2, #0
 801109c:	4907      	ldr	r1, [pc, #28]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 801109e:	f00f f919 	bl	80202d4 <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110a2:	2218      	movs	r2, #24
 80110a4:	4905      	ldr	r1, [pc, #20]	; (80110bc <HAL_UARTEx_RxEventCallback+0x54>)
 80110a6:	4806      	ldr	r0, [pc, #24]	; (80110c0 <HAL_UARTEx_RxEventCallback+0x58>)
 80110a8:	f006 fb0c 	bl	80176c4 <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110ac:	bf00      	nop
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	40004400 	.word	0x40004400
 80110b8:	20000448 	.word	0x20000448
 80110bc:	20000474 	.word	0x20000474
 80110c0:	200003d8 	.word	0x200003d8

080110c4 <EthMutexTake>:

void EthMutexTake(void){
 80110c4:	b580      	push	{r7, lr}
 80110c6:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110c8:	4b04      	ldr	r3, [pc, #16]	; (80110dc <EthMutexTake+0x18>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	f04f 31ff 	mov.w	r1, #4294967295
 80110d0:	4618      	mov	r0, r3
 80110d2:	f00f f804 	bl	80200de <osMutexAcquire>
}
 80110d6:	bf00      	nop
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20000464 	.word	0x20000464

080110e0 <EthMutexRelease>:

void EthMutexRelease(void){
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110e4:	4b03      	ldr	r3, [pc, #12]	; (80110f4 <EthMutexRelease+0x14>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	4618      	mov	r0, r3
 80110ea:	f00f f843 	bl	8020174 <osMutexRelease>
}
 80110ee:	bf00      	nop
 80110f0:	bd80      	pop	{r7, pc}
 80110f2:	bf00      	nop
 80110f4:	20000464 	.word	0x20000464

080110f8 <LfsMutexTake>:

void LfsMutexTake(void){
 80110f8:	b580      	push	{r7, lr}
 80110fa:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 80110fc:	4b04      	ldr	r3, [pc, #16]	; (8011110 <LfsMutexTake+0x18>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	f04f 31ff 	mov.w	r1, #4294967295
 8011104:	4618      	mov	r0, r3
 8011106:	f00e ffea 	bl	80200de <osMutexAcquire>
}
 801110a:	bf00      	nop
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000468 	.word	0x20000468

08011114 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011118:	4b03      	ldr	r3, [pc, #12]	; (8011128 <LfsMutexRelease+0x14>)
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f00f f829 	bl	8020174 <osMutexRelease>
}
 8011122:	bf00      	nop
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	20000468 	.word	0x20000468

0801112c <SocketMutexTake>:

void SocketMutexTake(void){
 801112c:	b580      	push	{r7, lr}
 801112e:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 8011130:	4b04      	ldr	r3, [pc, #16]	; (8011144 <SocketMutexTake+0x18>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	f04f 31ff 	mov.w	r1, #4294967295
 8011138:	4618      	mov	r0, r3
 801113a:	f00e ffd0 	bl	80200de <osMutexAcquire>
}
 801113e:	bf00      	nop
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	2000046c 	.word	0x2000046c

08011148 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011148:	b580      	push	{r7, lr}
 801114a:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 801114c:	4b03      	ldr	r3, [pc, #12]	; (801115c <SocketMutexRelease+0x14>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	4618      	mov	r0, r3
 8011152:	f00f f80f 	bl	8020174 <osMutexRelease>
}
 8011156:	bf00      	nop
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	2000046c 	.word	0x2000046c

08011160 <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 8011160:	b580      	push	{r7, lr}
 8011162:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011164:	4b04      	ldr	r3, [pc, #16]	; (8011178 <ServiceSockMutexTake+0x18>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	f04f 31ff 	mov.w	r1, #4294967295
 801116c:	4618      	mov	r0, r3
 801116e:	f00e ffb6 	bl	80200de <osMutexAcquire>
}
 8011172:	bf00      	nop
 8011174:	bd80      	pop	{r7, pc}
 8011176:	bf00      	nop
 8011178:	20000470 	.word	0x20000470

0801117c <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 801117c:	b580      	push	{r7, lr}
 801117e:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 8011180:	4b03      	ldr	r3, [pc, #12]	; (8011190 <ServiceSockMutexRelease+0x14>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	4618      	mov	r0, r3
 8011186:	f00e fff5 	bl	8020174 <osMutexRelease>
}
 801118a:	bf00      	nop
 801118c:	bd80      	pop	{r7, pc}
 801118e:	bf00      	nop
 8011190:	20000470 	.word	0x20000470

08011194 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 8011198:	2200      	movs	r2, #0
 801119a:	2102      	movs	r1, #2
 801119c:	4802      	ldr	r0, [pc, #8]	; (80111a8 <PowerON_HLW8032+0x14>)
 801119e:	f004 fcc1 	bl	8015b24 <HAL_GPIO_WritePin>
}
 80111a2:	bf00      	nop
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	40020000 	.word	0x40020000

080111ac <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111ac:	b580      	push	{r7, lr}
 80111ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111b0:	2201      	movs	r2, #1
 80111b2:	2102      	movs	r1, #2
 80111b4:	4802      	ldr	r0, [pc, #8]	; (80111c0 <PowerOFF_HLW8032+0x14>)
 80111b6:	f004 fcb5 	bl	8015b24 <HAL_GPIO_WritePin>
}
 80111ba:	bf00      	nop
 80111bc:	bd80      	pop	{r7, pc}
 80111be:	bf00      	nop
 80111c0:	40020000 	.word	0x40020000

080111c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111c8:	b672      	cpsid	i
}
 80111ca:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111cc:	4b60      	ldr	r3, [pc, #384]	; (8011350 <main+0x18c>)
 80111ce:	4a61      	ldr	r2, [pc, #388]	; (8011354 <main+0x190>)
 80111d0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111d2:	b662      	cpsie	i
}
 80111d4:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111d6:	f004 f94f 	bl	8015478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111da:	f000 f927 	bl	801142c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111de:	485e      	ldr	r0, [pc, #376]	; (8011358 <main+0x194>)
 80111e0:	f00b fb30 	bl	801c844 <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111e4:	f000 fa54 	bl	8011690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111e8:	f000 fa26 	bl	8011638 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111ec:	f000 f9b8 	bl	8011560 <MX_SPI1_Init>
  MX_SPI3_Init();
 80111f0:	f000 f9ec 	bl	80115cc <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 80111f4:	f00e fd6c 	bl	801fcd0 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 80111f8:	f000 f984 	bl	8011504 <MX_CRC_Init>
  MX_IWDG_Init();
 80111fc:	f000 f996 	bl	801152c <MX_IWDG_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 8011200:	f00e fd66 	bl	801fcd0 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011204:	f00e fdb0 	bl	801fd68 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011208:	4854      	ldr	r0, [pc, #336]	; (801135c <main+0x198>)
 801120a:	f00e fee2 	bl	801ffd2 <osMutexNew>
 801120e:	4603      	mov	r3, r0
 8011210:	4a53      	ldr	r2, [pc, #332]	; (8011360 <main+0x19c>)
 8011212:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011214:	4853      	ldr	r0, [pc, #332]	; (8011364 <main+0x1a0>)
 8011216:	f00e fedc 	bl	801ffd2 <osMutexNew>
 801121a:	4603      	mov	r3, r0
 801121c:	4a52      	ldr	r2, [pc, #328]	; (8011368 <main+0x1a4>)
 801121e:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 8011220:	4852      	ldr	r0, [pc, #328]	; (801136c <main+0x1a8>)
 8011222:	f00e fed6 	bl	801ffd2 <osMutexNew>
 8011226:	4603      	mov	r3, r0
 8011228:	4a51      	ldr	r2, [pc, #324]	; (8011370 <main+0x1ac>)
 801122a:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 801122c:	4851      	ldr	r0, [pc, #324]	; (8011374 <main+0x1b0>)
 801122e:	f00e fed0 	bl	801ffd2 <osMutexNew>
 8011232:	4603      	mov	r3, r0
 8011234:	4a50      	ldr	r2, [pc, #320]	; (8011378 <main+0x1b4>)
 8011236:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011238:	4a50      	ldr	r2, [pc, #320]	; (801137c <main+0x1b8>)
 801123a:	211e      	movs	r1, #30
 801123c:	2001      	movs	r0, #1
 801123e:	f00e ffd6 	bl	80201ee <osMessageQueueNew>
 8011242:	4603      	mov	r3, r0
 8011244:	4a4e      	ldr	r2, [pc, #312]	; (8011380 <main+0x1bc>)
 8011246:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011248:	4a4e      	ldr	r2, [pc, #312]	; (8011384 <main+0x1c0>)
 801124a:	2120      	movs	r1, #32
 801124c:	2001      	movs	r0, #1
 801124e:	f00e ffce 	bl	80201ee <osMessageQueueNew>
 8011252:	4603      	mov	r3, r0
 8011254:	4a4c      	ldr	r2, [pc, #304]	; (8011388 <main+0x1c4>)
 8011256:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011258:	4a4c      	ldr	r2, [pc, #304]	; (801138c <main+0x1c8>)
 801125a:	2124      	movs	r1, #36	; 0x24
 801125c:	2001      	movs	r0, #1
 801125e:	f00e ffc6 	bl	80201ee <osMessageQueueNew>
 8011262:	4603      	mov	r3, r0
 8011264:	4a4a      	ldr	r2, [pc, #296]	; (8011390 <main+0x1cc>)
 8011266:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011268:	4a4a      	ldr	r2, [pc, #296]	; (8011394 <main+0x1d0>)
 801126a:	2108      	movs	r1, #8
 801126c:	2001      	movs	r0, #1
 801126e:	f00e ffbe 	bl	80201ee <osMessageQueueNew>
 8011272:	4603      	mov	r3, r0
 8011274:	4a48      	ldr	r2, [pc, #288]	; (8011398 <main+0x1d4>)
 8011276:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011278:	4a48      	ldr	r2, [pc, #288]	; (801139c <main+0x1d8>)
 801127a:	21c6      	movs	r1, #198	; 0xc6
 801127c:	2001      	movs	r0, #1
 801127e:	f00e ffb6 	bl	80201ee <osMessageQueueNew>
 8011282:	4603      	mov	r3, r0
 8011284:	4a46      	ldr	r2, [pc, #280]	; (80113a0 <main+0x1dc>)
 8011286:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011288:	4a46      	ldr	r2, [pc, #280]	; (80113a4 <main+0x1e0>)
 801128a:	2102      	movs	r1, #2
 801128c:	2001      	movs	r0, #1
 801128e:	f00e ffae 	bl	80201ee <osMessageQueueNew>
 8011292:	4603      	mov	r3, r0
 8011294:	4a44      	ldr	r2, [pc, #272]	; (80113a8 <main+0x1e4>)
 8011296:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 8011298:	4a44      	ldr	r2, [pc, #272]	; (80113ac <main+0x1e8>)
 801129a:	2104      	movs	r1, #4
 801129c:	2001      	movs	r0, #1
 801129e:	f00e ffa6 	bl	80201ee <osMessageQueueNew>
 80112a2:	4603      	mov	r3, r0
 80112a4:	4a42      	ldr	r2, [pc, #264]	; (80113b0 <main+0x1ec>)
 80112a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112a8:	4a42      	ldr	r2, [pc, #264]	; (80113b4 <main+0x1f0>)
 80112aa:	2100      	movs	r1, #0
 80112ac:	4842      	ldr	r0, [pc, #264]	; (80113b8 <main+0x1f4>)
 80112ae:	f00e fda5 	bl	801fdfc <osThreadNew>
 80112b2:	4603      	mov	r3, r0
 80112b4:	4a41      	ldr	r2, [pc, #260]	; (80113bc <main+0x1f8>)
 80112b6:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112b8:	4a41      	ldr	r2, [pc, #260]	; (80113c0 <main+0x1fc>)
 80112ba:	2100      	movs	r1, #0
 80112bc:	4841      	ldr	r0, [pc, #260]	; (80113c4 <main+0x200>)
 80112be:	f00e fd9d 	bl	801fdfc <osThreadNew>
 80112c2:	4603      	mov	r3, r0
 80112c4:	4a40      	ldr	r2, [pc, #256]	; (80113c8 <main+0x204>)
 80112c6:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112c8:	4a40      	ldr	r2, [pc, #256]	; (80113cc <main+0x208>)
 80112ca:	2100      	movs	r1, #0
 80112cc:	4840      	ldr	r0, [pc, #256]	; (80113d0 <main+0x20c>)
 80112ce:	f00e fd95 	bl	801fdfc <osThreadNew>
 80112d2:	4603      	mov	r3, r0
 80112d4:	4a3f      	ldr	r2, [pc, #252]	; (80113d4 <main+0x210>)
 80112d6:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112d8:	4a3f      	ldr	r2, [pc, #252]	; (80113d8 <main+0x214>)
 80112da:	2100      	movs	r1, #0
 80112dc:	483f      	ldr	r0, [pc, #252]	; (80113dc <main+0x218>)
 80112de:	f00e fd8d 	bl	801fdfc <osThreadNew>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4a3e      	ldr	r2, [pc, #248]	; (80113e0 <main+0x21c>)
 80112e6:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112e8:	4a3e      	ldr	r2, [pc, #248]	; (80113e4 <main+0x220>)
 80112ea:	2100      	movs	r1, #0
 80112ec:	483e      	ldr	r0, [pc, #248]	; (80113e8 <main+0x224>)
 80112ee:	f00e fd85 	bl	801fdfc <osThreadNew>
 80112f2:	4603      	mov	r3, r0
 80112f4:	4a3d      	ldr	r2, [pc, #244]	; (80113ec <main+0x228>)
 80112f6:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 80112f8:	4a3d      	ldr	r2, [pc, #244]	; (80113f0 <main+0x22c>)
 80112fa:	2100      	movs	r1, #0
 80112fc:	483d      	ldr	r0, [pc, #244]	; (80113f4 <main+0x230>)
 80112fe:	f00e fd7d 	bl	801fdfc <osThreadNew>
 8011302:	4603      	mov	r3, r0
 8011304:	4a3c      	ldr	r2, [pc, #240]	; (80113f8 <main+0x234>)
 8011306:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011308:	4a3c      	ldr	r2, [pc, #240]	; (80113fc <main+0x238>)
 801130a:	2100      	movs	r1, #0
 801130c:	483c      	ldr	r0, [pc, #240]	; (8011400 <main+0x23c>)
 801130e:	f00e fd75 	bl	801fdfc <osThreadNew>
 8011312:	4603      	mov	r3, r0
 8011314:	4a3b      	ldr	r2, [pc, #236]	; (8011404 <main+0x240>)
 8011316:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011318:	4a3b      	ldr	r2, [pc, #236]	; (8011408 <main+0x244>)
 801131a:	2100      	movs	r1, #0
 801131c:	483b      	ldr	r0, [pc, #236]	; (801140c <main+0x248>)
 801131e:	f00e fd6d 	bl	801fdfc <osThreadNew>
 8011322:	4603      	mov	r3, r0
 8011324:	4a3a      	ldr	r2, [pc, #232]	; (8011410 <main+0x24c>)
 8011326:	6013      	str	r3, [r2, #0]

  /* creation of resetWatchDog */
  resetWatchDogHandle = osThreadNew(vResetWatchDog, NULL, &resetWatchDog_attributes);
 8011328:	4a3a      	ldr	r2, [pc, #232]	; (8011414 <main+0x250>)
 801132a:	2100      	movs	r1, #0
 801132c:	483a      	ldr	r0, [pc, #232]	; (8011418 <main+0x254>)
 801132e:	f00e fd65 	bl	801fdfc <osThreadNew>
 8011332:	4603      	mov	r3, r0
 8011334:	4a39      	ldr	r2, [pc, #228]	; (801141c <main+0x258>)
 8011336:	6013      	str	r3, [r2, #0]

  /* creation of SendBroadcast */
  SendBroadcastHandle = osThreadNew(vSendBroadcast, NULL, &SendBroadcast_attributes);
 8011338:	4a39      	ldr	r2, [pc, #228]	; (8011420 <main+0x25c>)
 801133a:	2100      	movs	r1, #0
 801133c:	4839      	ldr	r0, [pc, #228]	; (8011424 <main+0x260>)
 801133e:	f00e fd5d 	bl	801fdfc <osThreadNew>
 8011342:	4603      	mov	r3, r0
 8011344:	4a38      	ldr	r2, [pc, #224]	; (8011428 <main+0x264>)
 8011346:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011348:	f00e fd32 	bl	801fdb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 801134c:	e7fe      	b.n	801134c <main+0x188>
 801134e:	bf00      	nop
 8011350:	e000ed00 	.word	0xe000ed00
 8011354:	08010000 	.word	0x08010000
 8011358:	0801fad5 	.word	0x0801fad5
 801135c:	08033f18 	.word	0x08033f18
 8011360:	20000464 	.word	0x20000464
 8011364:	08033f28 	.word	0x08033f28
 8011368:	20000468 	.word	0x20000468
 801136c:	08033f38 	.word	0x08033f38
 8011370:	2000046c 	.word	0x2000046c
 8011374:	08033f48 	.word	0x08033f48
 8011378:	20000470 	.word	0x20000470
 801137c:	08033e70 	.word	0x08033e70
 8011380:	20000448 	.word	0x20000448
 8011384:	08033e88 	.word	0x08033e88
 8011388:	2000044c 	.word	0x2000044c
 801138c:	08033ea0 	.word	0x08033ea0
 8011390:	20000450 	.word	0x20000450
 8011394:	08033eb8 	.word	0x08033eb8
 8011398:	20000454 	.word	0x20000454
 801139c:	08033ed0 	.word	0x08033ed0
 80113a0:	20000458 	.word	0x20000458
 80113a4:	08033ee8 	.word	0x08033ee8
 80113a8:	2000045c 	.word	0x2000045c
 80113ac:	08033f00 	.word	0x08033f00
 80113b0:	20000460 	.word	0x20000460
 80113b4:	08033d08 	.word	0x08033d08
 80113b8:	08011785 	.word	0x08011785
 80113bc:	20000420 	.word	0x20000420
 80113c0:	08033d2c 	.word	0x08033d2c
 80113c4:	08011795 	.word	0x08011795
 80113c8:	20000424 	.word	0x20000424
 80113cc:	08033d50 	.word	0x08033d50
 80113d0:	08011929 	.word	0x08011929
 80113d4:	20000428 	.word	0x20000428
 80113d8:	08033d74 	.word	0x08033d74
 80113dc:	08011c91 	.word	0x08011c91
 80113e0:	2000042c 	.word	0x2000042c
 80113e4:	08033d98 	.word	0x08033d98
 80113e8:	08011ccd 	.word	0x08011ccd
 80113ec:	20000430 	.word	0x20000430
 80113f0:	08033dbc 	.word	0x08033dbc
 80113f4:	08012249 	.word	0x08012249
 80113f8:	20000434 	.word	0x20000434
 80113fc:	08033de0 	.word	0x08033de0
 8011400:	080122e5 	.word	0x080122e5
 8011404:	20000438 	.word	0x20000438
 8011408:	08033e04 	.word	0x08033e04
 801140c:	08012469 	.word	0x08012469
 8011410:	2000043c 	.word	0x2000043c
 8011414:	08033e28 	.word	0x08033e28
 8011418:	08012701 	.word	0x08012701
 801141c:	20000440 	.word	0x20000440
 8011420:	08033e4c 	.word	0x08033e4c
 8011424:	0801271d 	.word	0x0801271d
 8011428:	20000444 	.word	0x20000444

0801142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b094      	sub	sp, #80	; 0x50
 8011430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011432:	f107 0320 	add.w	r3, r7, #32
 8011436:	2230      	movs	r2, #48	; 0x30
 8011438:	2100      	movs	r1, #0
 801143a:	4618      	mov	r0, r3
 801143c:	f01c f95e 	bl	802d6fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011440:	f107 030c 	add.w	r3, r7, #12
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
 8011448:	605a      	str	r2, [r3, #4]
 801144a:	609a      	str	r2, [r3, #8]
 801144c:	60da      	str	r2, [r3, #12]
 801144e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011450:	2300      	movs	r3, #0
 8011452:	60bb      	str	r3, [r7, #8]
 8011454:	4b29      	ldr	r3, [pc, #164]	; (80114fc <SystemClock_Config+0xd0>)
 8011456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011458:	4a28      	ldr	r2, [pc, #160]	; (80114fc <SystemClock_Config+0xd0>)
 801145a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801145e:	6413      	str	r3, [r2, #64]	; 0x40
 8011460:	4b26      	ldr	r3, [pc, #152]	; (80114fc <SystemClock_Config+0xd0>)
 8011462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011468:	60bb      	str	r3, [r7, #8]
 801146a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 801146c:	2300      	movs	r3, #0
 801146e:	607b      	str	r3, [r7, #4]
 8011470:	4b23      	ldr	r3, [pc, #140]	; (8011500 <SystemClock_Config+0xd4>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011478:	4a21      	ldr	r2, [pc, #132]	; (8011500 <SystemClock_Config+0xd4>)
 801147a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801147e:	6013      	str	r3, [r2, #0]
 8011480:	4b1f      	ldr	r3, [pc, #124]	; (8011500 <SystemClock_Config+0xd4>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011488:	607b      	str	r3, [r7, #4]
 801148a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 801148c:	2309      	movs	r3, #9
 801148e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011490:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8011496:	2301      	movs	r3, #1
 8011498:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801149a:	2302      	movs	r3, #2
 801149c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801149e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80114a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80114a4:	2304      	movs	r3, #4
 80114a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80114a8:	2354      	movs	r3, #84	; 0x54
 80114aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80114ac:	2302      	movs	r3, #2
 80114ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80114b0:	2304      	movs	r3, #4
 80114b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114b4:	f107 0320 	add.w	r3, r7, #32
 80114b8:	4618      	mov	r0, r3
 80114ba:	f004 fb9f 	bl	8015bfc <HAL_RCC_OscConfig>
 80114be:	4603      	mov	r3, r0
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d001      	beq.n	80114c8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80114c4:	f001 f944 	bl	8012750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114c8:	230f      	movs	r3, #15
 80114ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114cc:	2302      	movs	r3, #2
 80114ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114d0:	2300      	movs	r3, #0
 80114d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80114d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114da:	2300      	movs	r3, #0
 80114dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80114de:	f107 030c 	add.w	r3, r7, #12
 80114e2:	2102      	movs	r1, #2
 80114e4:	4618      	mov	r0, r3
 80114e6:	f004 fe01 	bl	80160ec <HAL_RCC_ClockConfig>
 80114ea:	4603      	mov	r3, r0
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d001      	beq.n	80114f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80114f0:	f001 f92e 	bl	8012750 <Error_Handler>
  }
}
 80114f4:	bf00      	nop
 80114f6:	3750      	adds	r7, #80	; 0x50
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}
 80114fc:	40023800 	.word	0x40023800
 8011500:	40007000 	.word	0x40007000

08011504 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8011508:	4b06      	ldr	r3, [pc, #24]	; (8011524 <MX_CRC_Init+0x20>)
 801150a:	4a07      	ldr	r2, [pc, #28]	; (8011528 <MX_CRC_Init+0x24>)
 801150c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801150e:	4805      	ldr	r0, [pc, #20]	; (8011524 <MX_CRC_Init+0x20>)
 8011510:	f004 f8d6 	bl	80156c0 <HAL_CRC_Init>
 8011514:	4603      	mov	r3, r0
 8011516:	2b00      	cmp	r3, #0
 8011518:	d001      	beq.n	801151e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 801151a:	f001 f919 	bl	8012750 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801151e:	bf00      	nop
 8011520:	bd80      	pop	{r7, pc}
 8011522:	bf00      	nop
 8011524:	20000314 	.word	0x20000314
 8011528:	40023000 	.word	0x40023000

0801152c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8011530:	4b09      	ldr	r3, [pc, #36]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011532:	4a0a      	ldr	r2, [pc, #40]	; (801155c <MX_IWDG_Init+0x30>)
 8011534:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8011536:	4b08      	ldr	r3, [pc, #32]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011538:	2206      	movs	r2, #6
 801153a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 801153c:	4b06      	ldr	r3, [pc, #24]	; (8011558 <MX_IWDG_Init+0x2c>)
 801153e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8011542:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011544:	4804      	ldr	r0, [pc, #16]	; (8011558 <MX_IWDG_Init+0x2c>)
 8011546:	f004 fb06 	bl	8015b56 <HAL_IWDG_Init>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d001      	beq.n	8011554 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8011550:	f001 f8fe 	bl	8012750 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011554:	bf00      	nop
 8011556:	bd80      	pop	{r7, pc}
 8011558:	2000031c 	.word	0x2000031c
 801155c:	40003000 	.word	0x40003000

08011560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011564:	4b17      	ldr	r3, [pc, #92]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011566:	4a18      	ldr	r2, [pc, #96]	; (80115c8 <MX_SPI1_Init+0x68>)
 8011568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801156a:	4b16      	ldr	r3, [pc, #88]	; (80115c4 <MX_SPI1_Init+0x64>)
 801156c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8011572:	4b14      	ldr	r3, [pc, #80]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011574:	2200      	movs	r2, #0
 8011576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011578:	4b12      	ldr	r3, [pc, #72]	; (80115c4 <MX_SPI1_Init+0x64>)
 801157a:	2200      	movs	r2, #0
 801157c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801157e:	4b11      	ldr	r3, [pc, #68]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011580:	2202      	movs	r2, #2
 8011582:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011584:	4b0f      	ldr	r3, [pc, #60]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011586:	2201      	movs	r2, #1
 8011588:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801158a:	4b0e      	ldr	r3, [pc, #56]	; (80115c4 <MX_SPI1_Init+0x64>)
 801158c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011590:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011592:	4b0c      	ldr	r3, [pc, #48]	; (80115c4 <MX_SPI1_Init+0x64>)
 8011594:	2200      	movs	r2, #0
 8011596:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011598:	4b0a      	ldr	r3, [pc, #40]	; (80115c4 <MX_SPI1_Init+0x64>)
 801159a:	2200      	movs	r2, #0
 801159c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801159e:	4b09      	ldr	r3, [pc, #36]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115a4:	4b07      	ldr	r3, [pc, #28]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80115aa:	4b06      	ldr	r3, [pc, #24]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115ac:	220a      	movs	r2, #10
 80115ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80115b0:	4804      	ldr	r0, [pc, #16]	; (80115c4 <MX_SPI1_Init+0x64>)
 80115b2:	f004 ffed 	bl	8016590 <HAL_SPI_Init>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d001      	beq.n	80115c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80115bc:	f001 f8c8 	bl	8012750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80115c0:	bf00      	nop
 80115c2:	bd80      	pop	{r7, pc}
 80115c4:	20000328 	.word	0x20000328
 80115c8:	40013000 	.word	0x40013000

080115cc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80115d0:	4b17      	ldr	r3, [pc, #92]	; (8011630 <MX_SPI3_Init+0x64>)
 80115d2:	4a18      	ldr	r2, [pc, #96]	; (8011634 <MX_SPI3_Init+0x68>)
 80115d4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80115d6:	4b16      	ldr	r3, [pc, #88]	; (8011630 <MX_SPI3_Init+0x64>)
 80115d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80115dc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80115de:	4b14      	ldr	r3, [pc, #80]	; (8011630 <MX_SPI3_Init+0x64>)
 80115e0:	2200      	movs	r2, #0
 80115e2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80115e4:	4b12      	ldr	r3, [pc, #72]	; (8011630 <MX_SPI3_Init+0x64>)
 80115e6:	2200      	movs	r2, #0
 80115e8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80115ea:	4b11      	ldr	r3, [pc, #68]	; (8011630 <MX_SPI3_Init+0x64>)
 80115ec:	2202      	movs	r2, #2
 80115ee:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80115f0:	4b0f      	ldr	r3, [pc, #60]	; (8011630 <MX_SPI3_Init+0x64>)
 80115f2:	2201      	movs	r2, #1
 80115f4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80115f6:	4b0e      	ldr	r3, [pc, #56]	; (8011630 <MX_SPI3_Init+0x64>)
 80115f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80115fc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80115fe:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <MX_SPI3_Init+0x64>)
 8011600:	2200      	movs	r2, #0
 8011602:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011604:	4b0a      	ldr	r3, [pc, #40]	; (8011630 <MX_SPI3_Init+0x64>)
 8011606:	2200      	movs	r2, #0
 8011608:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 801160a:	4b09      	ldr	r3, [pc, #36]	; (8011630 <MX_SPI3_Init+0x64>)
 801160c:	2200      	movs	r2, #0
 801160e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011610:	4b07      	ldr	r3, [pc, #28]	; (8011630 <MX_SPI3_Init+0x64>)
 8011612:	2200      	movs	r2, #0
 8011614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011616:	4b06      	ldr	r3, [pc, #24]	; (8011630 <MX_SPI3_Init+0x64>)
 8011618:	220a      	movs	r2, #10
 801161a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801161c:	4804      	ldr	r0, [pc, #16]	; (8011630 <MX_SPI3_Init+0x64>)
 801161e:	f004 ffb7 	bl	8016590 <HAL_SPI_Init>
 8011622:	4603      	mov	r3, r0
 8011624:	2b00      	cmp	r3, #0
 8011626:	d001      	beq.n	801162c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011628:	f001 f892 	bl	8012750 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801162c:	bf00      	nop
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20000380 	.word	0x20000380
 8011634:	40003c00 	.word	0x40003c00

08011638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 801163c:	4b12      	ldr	r3, [pc, #72]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801163e:	4a13      	ldr	r2, [pc, #76]	; (801168c <MX_USART2_UART_Init+0x54>)
 8011640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 8011642:	4b11      	ldr	r3, [pc, #68]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011644:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8011648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 801164a:	4b0f      	ldr	r3, [pc, #60]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801164c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011650:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8011652:	4b0d      	ldr	r3, [pc, #52]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011654:	2200      	movs	r2, #0
 8011656:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8011658:	4b0b      	ldr	r3, [pc, #44]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801165a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801165e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8011660:	4b09      	ldr	r3, [pc, #36]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011662:	2204      	movs	r2, #4
 8011664:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011666:	4b08      	ldr	r3, [pc, #32]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011668:	2200      	movs	r2, #0
 801166a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 801166c:	4b06      	ldr	r3, [pc, #24]	; (8011688 <MX_USART2_UART_Init+0x50>)
 801166e:	2200      	movs	r2, #0
 8011670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8011672:	4805      	ldr	r0, [pc, #20]	; (8011688 <MX_USART2_UART_Init+0x50>)
 8011674:	f005 ffd6 	bl	8017624 <HAL_UART_Init>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	d001      	beq.n	8011682 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 801167e:	f001 f867 	bl	8012750 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8011682:	bf00      	nop
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	200003d8 	.word	0x200003d8
 801168c:	40004400 	.word	0x40004400

08011690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b088      	sub	sp, #32
 8011694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011696:	f107 030c 	add.w	r3, r7, #12
 801169a:	2200      	movs	r2, #0
 801169c:	601a      	str	r2, [r3, #0]
 801169e:	605a      	str	r2, [r3, #4]
 80116a0:	609a      	str	r2, [r3, #8]
 80116a2:	60da      	str	r2, [r3, #12]
 80116a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116a6:	2300      	movs	r3, #0
 80116a8:	60bb      	str	r3, [r7, #8]
 80116aa:	4b33      	ldr	r3, [pc, #204]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ae:	4a32      	ldr	r2, [pc, #200]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b4:	6313      	str	r3, [r2, #48]	; 0x30
 80116b6:	4b30      	ldr	r3, [pc, #192]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116be:	60bb      	str	r3, [r7, #8]
 80116c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116c2:	2300      	movs	r3, #0
 80116c4:	607b      	str	r3, [r7, #4]
 80116c6:	4b2c      	ldr	r3, [pc, #176]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ca:	4a2b      	ldr	r2, [pc, #172]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116cc:	f043 0301 	orr.w	r3, r3, #1
 80116d0:	6313      	str	r3, [r2, #48]	; 0x30
 80116d2:	4b29      	ldr	r3, [pc, #164]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d6:	f003 0301 	and.w	r3, r3, #1
 80116da:	607b      	str	r3, [r7, #4]
 80116dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116de:	2300      	movs	r3, #0
 80116e0:	603b      	str	r3, [r7, #0]
 80116e2:	4b25      	ldr	r3, [pc, #148]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e6:	4a24      	ldr	r2, [pc, #144]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116e8:	f043 0302 	orr.w	r3, r3, #2
 80116ec:	6313      	str	r3, [r2, #48]	; 0x30
 80116ee:	4b22      	ldr	r3, [pc, #136]	; (8011778 <MX_GPIO_Init+0xe8>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f2:	f003 0302 	and.w	r3, r3, #2
 80116f6:	603b      	str	r3, [r7, #0]
 80116f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 80116fa:	2201      	movs	r2, #1
 80116fc:	2112      	movs	r1, #18
 80116fe:	481f      	ldr	r0, [pc, #124]	; (801177c <MX_GPIO_Init+0xec>)
 8011700:	f004 fa10 	bl	8015b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 8011704:	2200      	movs	r2, #0
 8011706:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801170a:	481c      	ldr	r0, [pc, #112]	; (801177c <MX_GPIO_Init+0xec>)
 801170c:	f004 fa0a 	bl	8015b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 8011710:	2200      	movs	r2, #0
 8011712:	2140      	movs	r1, #64	; 0x40
 8011714:	481a      	ldr	r0, [pc, #104]	; (8011780 <MX_GPIO_Init+0xf0>)
 8011716:	f004 fa05 	bl	8015b24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 801171a:	f248 0302 	movw	r3, #32770	; 0x8002
 801171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011720:	2301      	movs	r3, #1
 8011722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011724:	2300      	movs	r3, #0
 8011726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011728:	2300      	movs	r3, #0
 801172a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801172c:	f107 030c 	add.w	r3, r7, #12
 8011730:	4619      	mov	r1, r3
 8011732:	4812      	ldr	r0, [pc, #72]	; (801177c <MX_GPIO_Init+0xec>)
 8011734:	f004 f872 	bl	801581c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 8011738:	2310      	movs	r3, #16
 801173a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801173c:	2301      	movs	r3, #1
 801173e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011740:	2300      	movs	r3, #0
 8011742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011744:	2303      	movs	r3, #3
 8011746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 8011748:	f107 030c 	add.w	r3, r7, #12
 801174c:	4619      	mov	r1, r3
 801174e:	480b      	ldr	r0, [pc, #44]	; (801177c <MX_GPIO_Init+0xec>)
 8011750:	f004 f864 	bl	801581c <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8011754:	2340      	movs	r3, #64	; 0x40
 8011756:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011758:	2301      	movs	r3, #1
 801175a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801175c:	2300      	movs	r3, #0
 801175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011760:	2300      	movs	r3, #0
 8011762:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8011764:	f107 030c 	add.w	r3, r7, #12
 8011768:	4619      	mov	r1, r3
 801176a:	4805      	ldr	r0, [pc, #20]	; (8011780 <MX_GPIO_Init+0xf0>)
 801176c:	f004 f856 	bl	801581c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8011770:	bf00      	nop
 8011772:	3720      	adds	r7, #32
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	40023800 	.word	0x40023800
 801177c:	40020000 	.word	0x40020000
 8011780:	40020400 	.word	0x40020400

08011784 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801178c:	2001      	movs	r0, #1
 801178e:	f00e fc05 	bl	801ff9c <osDelay>
 8011792:	e7fb      	b.n	801178c <StartDefaultTask+0x8>

08011794 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b098      	sub	sp, #96	; 0x60
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	65fb      	str	r3, [r7, #92]	; 0x5c
	float				old_resistance;


	PowerSett.resistance = 0.001;
 80117a0:	4b57      	ldr	r3, [pc, #348]	; (8011900 <vSensorsTask+0x16c>)
 80117a2:	60fb      	str	r3, [r7, #12]
	PowerSett.save = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	723b      	strb	r3, [r7, #8]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 80117a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80117ac:	f00e fbf6 	bl	801ff9c <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80117b0:	4b54      	ldr	r3, [pc, #336]	; (8011904 <vSensorsTask+0x170>)
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	f107 0108 	add.w	r1, r7, #8
 80117b8:	2200      	movs	r2, #0
 80117ba:	4618      	mov	r0, r3
 80117bc:	f00f fcca 	bl	8021154 <xQueuePeek>
	old_resistance = PowerSett.resistance;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	65bb      	str	r3, [r7, #88]	; 0x58
	PowerOFF_HLW8032();
 80117c4:	f7ff fcf2 	bl	80111ac <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 80117c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117cc:	f00e fbe6 	bl	801ff9c <osDelay>
	USART2->DR; //read data from register if exist
 80117d0:	4b4d      	ldr	r3, [pc, #308]	; (8011908 <vSensorsTask+0x174>)
 80117d2:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80117d4:	2218      	movs	r2, #24
 80117d6:	494d      	ldr	r1, [pc, #308]	; (801190c <vSensorsTask+0x178>)
 80117d8:	484d      	ldr	r0, [pc, #308]	; (8011910 <vSensorsTask+0x17c>)
 80117da:	f005 ff73 	bl	80176c4 <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 80117de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117e2:	f00e fbdb 	bl	801ff9c <osDelay>
	PowerON_HLW8032();
 80117e6:	f7ff fcd5 	bl	8011194 <PowerON_HLW8032>

	sens_task_start:


	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80117ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80117ee:	eeb0 0a67 	vmov.f32	s0, s15
 80117f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80117f6:	4847      	ldr	r0, [pc, #284]	; (8011914 <vSensorsTask+0x180>)
 80117f8:	f003 f836 	bl	8014868 <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 80117fc:	4b46      	ldr	r3, [pc, #280]	; (8011918 <vSensorsTask+0x184>)
 80117fe:	6818      	ldr	r0, [r3, #0]
 8011800:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011808:	2200      	movs	r2, #0
 801180a:	f00e fdc3 	bl	8020394 <osMessageQueueGet>
 801180e:	4603      	mov	r3, r0
 8011810:	f113 0f02 	cmn.w	r3, #2
 8011814:	d04c      	beq.n	80118b0 <vSensorsTask+0x11c>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 8011816:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801181a:	4618      	mov	r0, r3
 801181c:	f003 f896 	bl	801494c <RecvRawString>
 8011820:	4603      	mov	r3, r0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d155      	bne.n	80118d2 <vSensorsTask+0x13e>
			test_kWh_from_read 				= GetKWh();
 8011826:	f003 fac3 	bl	8014db0 <GetKWh>
 801182a:	eef0 7a40 	vmov.f32	s15, s0
 801182e:	4b3b      	ldr	r3, [pc, #236]	; (801191c <vSensorsTask+0x188>)
 8011830:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 8011834:	f003 fabc 	bl	8014db0 <GetKWh>
 8011838:	eeb0 7a40 	vmov.f32	s14, s0
 801183c:	4b38      	ldr	r3, [pc, #224]	; (8011920 <vSensorsTask+0x18c>)
 801183e:	edd3 7a00 	vldr	s15, [r3]
 8011842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011846:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.Voltage 				= GetVoltage();
 801184a:	f003 f977 	bl	8014b3c <GetVoltage>
 801184e:	eef0 7a40 	vmov.f32	s15, s0
 8011852:	edc7 7a04 	vstr	s15, [r7, #16]
			PowerData.ApparPower 			= GetApparentPower();
 8011856:	f003 fa21 	bl	8014c9c <GetApparentPower>
 801185a:	eef0 7a40 	vmov.f32	s15, s0
 801185e:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.ActivePower 			= GetActivePower();
 8011862:	f003 f9dd 	bl	8014c20 <GetActivePower>
 8011866:	eef0 7a40 	vmov.f32	s15, s0
 801186a:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Current 				= GetCurrent();
 801186e:	f003 f9b1 	bl	8014bd4 <GetCurrent>
 8011872:	eef0 7a40 	vmov.f32	s15, s0
 8011876:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.PowerFactor			= PowerFactor();
 801187a:	f003 fa37 	bl	8014cec <PowerFactor>
 801187e:	eef0 7a40 	vmov.f32	s15, s0
 8011882:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.test_pulse_counter 	= GetTestPulse();
 8011886:	f003 fa6d 	bl	8014d64 <GetTestPulse>
 801188a:	4603      	mov	r3, r0
 801188c:	62bb      	str	r3, [r7, #40]	; 0x28
			PowerData.readed_counter 		= GetCountedPulse();
 801188e:	f003 fa75 	bl	8014d7c <GetCountedPulse>
 8011892:	4603      	mov	r3, r0
 8011894:	62fb      	str	r3, [r7, #44]	; 0x2c
			PowerData.PF_reg				= GetPFReg();
 8011896:	f003 fa7d 	bl	8014d94 <GetPFReg>
 801189a:	4603      	mov	r3, r0
 801189c:	633b      	str	r3, [r7, #48]	; 0x30
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 801189e:	4b21      	ldr	r3, [pc, #132]	; (8011924 <vSensorsTask+0x190>)
 80118a0:	6818      	ldr	r0, [r3, #0]
 80118a2:	f107 0110 	add.w	r1, r7, #16
 80118a6:	2302      	movs	r3, #2
 80118a8:	2200      	movs	r2, #0
 80118aa:	f00f f8cd 	bl	8020a48 <xQueueGenericSend>
 80118ae:	e010      	b.n	80118d2 <vSensorsTask+0x13e>
		}
	}else{
		count++;
 80118b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118b2:	3301      	adds	r3, #1
 80118b4:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118b6:	e004      	b.n	80118c2 <vSensorsTask+0x12e>
			temp = USART2->DR;
 80118b8:	4b13      	ldr	r3, [pc, #76]	; (8011908 <vSensorsTask+0x174>)
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	657b      	str	r3, [r7, #84]	; 0x54
			osThreadYield();
 80118be:	f00e fb4d 	bl	801ff5c <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118c2:	2218      	movs	r2, #24
 80118c4:	4911      	ldr	r1, [pc, #68]	; (801190c <vSensorsTask+0x178>)
 80118c6:	4812      	ldr	r0, [pc, #72]	; (8011910 <vSensorsTask+0x17c>)
 80118c8:	f005 fefc 	bl	80176c4 <HAL_UARTEx_ReceiveToIdle_IT>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b01      	cmp	r3, #1
 80118d0:	d0f2      	beq.n	80118b8 <vSensorsTask+0x124>
		}
	}
	osThreadYield();
 80118d2:	f00e fb43 	bl	801ff5c <osThreadYield>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80118d6:	4b0b      	ldr	r3, [pc, #44]	; (8011904 <vSensorsTask+0x170>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f107 0108 	add.w	r1, r7, #8
 80118de:	2200      	movs	r2, #0
 80118e0:	4618      	mov	r0, r3
 80118e2:	f00f fc37 	bl	8021154 <xQueuePeek>
    if (PowerSett.resistance != old_resistance){
 80118e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80118ea:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80118ee:	eeb4 7a67 	vcmp.f32	s14, s15
 80118f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f6:	d081      	beq.n	80117fc <vSensorsTask+0x68>
    	old_resistance = PowerSett.resistance;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	65bb      	str	r3, [r7, #88]	; 0x58
    	goto sens_task_start;
 80118fc:	e775      	b.n	80117ea <vSensorsTask+0x56>
 80118fe:	bf00      	nop
 8011900:	3a83126f 	.word	0x3a83126f
 8011904:	20000454 	.word	0x20000454
 8011908:	40004400 	.word	0x40004400
 801190c:	20000474 	.word	0x20000474
 8011910:	200003d8 	.word	0x200003d8
 8011914:	001cafc0 	.word	0x001cafc0
 8011918:	20000448 	.word	0x20000448
 801191c:	20000498 	.word	0x20000498
 8011920:	20000494 	.word	0x20000494
 8011924:	20000450 	.word	0x20000450

08011928 <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 8011928:	b590      	push	{r4, r7, lr}
 801192a:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 801192e:	af12      	add	r7, sp, #72	; 0x48
 8011930:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011934:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011938:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 801193a:	2314      	movs	r3, #20
 801193c:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8011940:	2300      	movs	r3, #0
 8011942:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 8011946:	f04f 0300 	mov.w	r3, #0
 801194a:	f207 4204 	addw	r2, r7, #1028	; 0x404
 801194e:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 8011950:	4cbc      	ldr	r4, [pc, #752]	; (8011c44 <vRW_Settings_Tas+0x31c>)
 8011952:	4668      	mov	r0, sp
 8011954:	f104 0310 	add.w	r3, r4, #16
 8011958:	2248      	movs	r2, #72	; 0x48
 801195a:	4619      	mov	r1, r3
 801195c:	f01c f8a3 	bl	802daa6 <memcpy>
 8011960:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011964:	f003 fd34 	bl	80153d0 <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8011968:	4bb7      	ldr	r3, [pc, #732]	; (8011c48 <vRW_Settings_Tas+0x320>)
 801196a:	4ab8      	ldr	r2, [pc, #736]	; (8011c4c <vRW_Settings_Tas+0x324>)
 801196c:	49b8      	ldr	r1, [pc, #736]	; (8011c50 <vRW_Settings_Tas+0x328>)
 801196e:	48b9      	ldr	r0, [pc, #740]	; (8011c54 <vRW_Settings_Tas+0x32c>)
 8011970:	f003 faa8 	bl	8014ec4 <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011974:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011978:	f507 7101 	add.w	r1, r7, #516	; 0x204
 801197c:	f507 7041 	add.w	r0, r7, #772	; 0x304
 8011980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011984:	f019 f8c6 	bl	802ab14 <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8011988:	49b3      	ldr	r1, [pc, #716]	; (8011c58 <vRW_Settings_Tas+0x330>)
 801198a:	48b4      	ldr	r0, [pc, #720]	; (8011c5c <vRW_Settings_Tas+0x334>)
 801198c:	f019 f8a6 	bl	802aadc <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 8011990:	f019 f8f8 	bl	802ab84 <spi_fs_mount>
 8011994:	4603      	mov	r3, r0
 8011996:	2b00      	cmp	r3, #0
 8011998:	da03      	bge.n	80119a2 <vRW_Settings_Tas+0x7a>
		spi_fs_format();
 801199a:	f019 f91b 	bl	802abd4 <spi_fs_format>
		spi_fs_mount();
 801199e:	f019 f8f1 	bl	802ab84 <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 80119a2:	48af      	ldr	r0, [pc, #700]	; (8011c60 <vRW_Settings_Tas+0x338>)
 80119a4:	f019 f99e 	bl	802ace4 <spi_fs_file_size>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	dd0f      	ble.n	80119ce <vRW_Settings_Tas+0xa6>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 80119ae:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119b2:	2308      	movs	r3, #8
 80119b4:	2200      	movs	r2, #0
 80119b6:	48aa      	ldr	r0, [pc, #680]	; (8011c60 <vRW_Settings_Tas+0x338>)
 80119b8:	f019 f918 	bl	802abec <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119bc:	4ba9      	ldr	r3, [pc, #676]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 80119be:	6818      	ldr	r0, [r3, #0]
 80119c0:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119c4:	2302      	movs	r3, #2
 80119c6:	2200      	movs	r2, #0
 80119c8:	f00f f83e 	bl	8020a48 <xQueueGenericSend>
 80119cc:	e013      	b.n	80119f6 <vRW_Settings_Tas+0xce>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 80119ce:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119d2:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119d6:	4aa4      	ldr	r2, [pc, #656]	; (8011c68 <vRW_Settings_Tas+0x340>)
 80119d8:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 80119da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119de:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119e2:	2201      	movs	r2, #1
 80119e4:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119e6:	4b9f      	ldr	r3, [pc, #636]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 80119e8:	6818      	ldr	r0, [r3, #0]
 80119ea:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119ee:	2302      	movs	r3, #2
 80119f0:	2200      	movs	r2, #0
 80119f2:	f00f f829 	bl	8020a48 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 80119f6:	489d      	ldr	r0, [pc, #628]	; (8011c6c <vRW_Settings_Tas+0x344>)
 80119f8:	f019 f974 	bl	802ace4 <spi_fs_file_size>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	dd0f      	ble.n	8011a22 <vRW_Settings_Tas+0xfa>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8011a02:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a06:	23c6      	movs	r3, #198	; 0xc6
 8011a08:	2200      	movs	r2, #0
 8011a0a:	4898      	ldr	r0, [pc, #608]	; (8011c6c <vRW_Settings_Tas+0x344>)
 8011a0c:	f019 f8ee 	bl	802abec <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a10:	4b97      	ldr	r3, [pc, #604]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011a12:	6818      	ldr	r0, [r3, #0]
 8011a14:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a18:	2302      	movs	r3, #2
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	f00f f814 	bl	8020a48 <xQueueGenericSend>
 8011a20:	e027      	b.n	8011a72 <vRW_Settings_Tas+0x14a>
	}else{
		MQTT_cred.save 			= 1;
 8011a22:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a26:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 8011a2e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a32:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a36:	2200      	movs	r2, #0
 8011a38:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 8011a3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a3e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a42:	2200      	movs	r2, #0
 8011a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		MQTT_cred.pass[0]		= '\0';
 8011a48:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a4c:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a50:	2200      	movs	r2, #0
 8011a52:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		MQTT_cred.uri[0]		= '\0';
 8011a56:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a5a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a5e:	2200      	movs	r2, #0
 8011a60:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a62:	4b83      	ldr	r3, [pc, #524]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011a64:	6818      	ldr	r0, [r3, #0]
 8011a66:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a6a:	2302      	movs	r3, #2
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	f00e ffeb 	bl	8020a48 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 8011a72:	4880      	ldr	r0, [pc, #512]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a74:	f019 f936 	bl	802ace4 <spi_fs_file_size>
 8011a78:	4603      	mov	r3, r0
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	dd0f      	ble.n	8011a9e <vRW_Settings_Tas+0x176>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a7e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a82:	2302      	movs	r3, #2
 8011a84:	2200      	movs	r2, #0
 8011a86:	487b      	ldr	r0, [pc, #492]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011a88:	f019 f8b0 	bl	802abec <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a8c:	4b7a      	ldr	r3, [pc, #488]	; (8011c78 <vRW_Settings_Tas+0x350>)
 8011a8e:	6818      	ldr	r0, [r3, #0]
 8011a90:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a94:	2302      	movs	r3, #2
 8011a96:	2200      	movs	r2, #0
 8011a98:	f00e ffd6 	bl	8020a48 <xQueueGenericSend>
 8011a9c:	e00b      	b.n	8011ab6 <vRW_Settings_Tas+0x18e>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011a9e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aa2:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011aaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aae:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011ab2:	2201      	movs	r2, #1
 8011ab4:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011ab6:	4871      	ldr	r0, [pc, #452]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011ab8:	f019 f914 	bl	802ace4 <spi_fs_file_size>
 8011abc:	4603      	mov	r3, r0
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	dd0b      	ble.n	8011ada <vRW_Settings_Tas+0x1b2>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011ac2:	2304      	movs	r3, #4
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	496e      	ldr	r1, [pc, #440]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011ac8:	486c      	ldr	r0, [pc, #432]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011aca:	f019 f88f 	bl	802abec <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011ace:	4b6c      	ldr	r3, [pc, #432]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011ad6:	6013      	str	r3, [r2, #0]
 8011ad8:	e00d      	b.n	8011af6 <vRW_Settings_Tas+0x1ce>
	}else{
		test_kWh_from_flash = 0.0;
 8011ada:	4b69      	ldr	r3, [pc, #420]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011adc:	f04f 0200 	mov.w	r2, #0
 8011ae0:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011ae2:	f04f 0300 	mov.w	r3, #0
 8011ae6:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011aea:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011aec:	2204      	movs	r2, #4
 8011aee:	4964      	ldr	r1, [pc, #400]	; (8011c80 <vRW_Settings_Tas+0x358>)
 8011af0:	4862      	ldr	r0, [pc, #392]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011af2:	f019 f8bf 	bl	802ac74 <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011af6:	4863      	ldr	r0, [pc, #396]	; (8011c84 <vRW_Settings_Tas+0x35c>)
 8011af8:	f019 f970 	bl	802addc <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011afc:	4862      	ldr	r0, [pc, #392]	; (8011c88 <vRW_Settings_Tas+0x360>)
 8011afe:	f019 fa4f 	bl	802afa0 <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011b02:	4861      	ldr	r0, [pc, #388]	; (8011c88 <vRW_Settings_Tas+0x360>)
 8011b04:	f019 f96a 	bl	802addc <spi_fs_mkdir>
	/* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011b08:	4b56      	ldr	r3, [pc, #344]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b10:	2200      	movs	r2, #0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f00f fb1e 	bl	8021154 <xQueuePeek>
	  if (PowerSett.save){
 8011b18:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b1c:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b20:	781b      	ldrb	r3, [r3, #0]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d014      	beq.n	8011b50 <vRW_Settings_Tas+0x228>
		  PowerSett.save = 0;
 8011b26:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b2a:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b2e:	2200      	movs	r2, #0
 8011b30:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011b32:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011b36:	2208      	movs	r2, #8
 8011b38:	4619      	mov	r1, r3
 8011b3a:	4849      	ldr	r0, [pc, #292]	; (8011c60 <vRW_Settings_Tas+0x338>)
 8011b3c:	f019 f89a 	bl	802ac74 <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011b40:	4b48      	ldr	r3, [pc, #288]	; (8011c64 <vRW_Settings_Tas+0x33c>)
 8011b42:	6818      	ldr	r0, [r3, #0]
 8011b44:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b48:	2302      	movs	r3, #2
 8011b4a:	2200      	movs	r2, #0
 8011b4c:	f00e ff7c 	bl	8020a48 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011b50:	4b47      	ldr	r3, [pc, #284]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b58:	2200      	movs	r2, #0
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f00f fafa 	bl	8021154 <xQueuePeek>
	  if (MQTT_cred.save){
 8011b60:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b64:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d014      	beq.n	8011b98 <vRW_Settings_Tas+0x270>
		  MQTT_cred.save = 0;
 8011b6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b72:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b76:	2200      	movs	r2, #0
 8011b78:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b7e:	22c6      	movs	r2, #198	; 0xc6
 8011b80:	4619      	mov	r1, r3
 8011b82:	483a      	ldr	r0, [pc, #232]	; (8011c6c <vRW_Settings_Tas+0x344>)
 8011b84:	f019 f876 	bl	802ac74 <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b88:	4b39      	ldr	r3, [pc, #228]	; (8011c70 <vRW_Settings_Tas+0x348>)
 8011b8a:	6818      	ldr	r0, [r3, #0]
 8011b8c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b90:	2302      	movs	r3, #2
 8011b92:	2200      	movs	r2, #0
 8011b94:	f00e ff58 	bl	8020a48 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011b98:	4b37      	ldr	r3, [pc, #220]	; (8011c78 <vRW_Settings_Tas+0x350>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	f00f fad6 	bl	8021154 <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011ba8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bac:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bb0:	781b      	ldrb	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00c      	beq.n	8011bd0 <vRW_Settings_Tas+0x2a8>
		  mb_tcp_sett.save = 0;
 8011bb6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bba:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bbe:	2200      	movs	r2, #0
 8011bc0:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011bc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bc6:	2202      	movs	r2, #2
 8011bc8:	4619      	mov	r1, r3
 8011bca:	482a      	ldr	r0, [pc, #168]	; (8011c74 <vRW_Settings_Tas+0x34c>)
 8011bcc:	f019 f852 	bl	802ac74 <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011bd0:	4b2e      	ldr	r3, [pc, #184]	; (8011c8c <vRW_Settings_Tas+0x364>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f107 010c 	add.w	r1, r7, #12
 8011bd8:	2200      	movs	r2, #0
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f00f faba 	bl	8021154 <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011be0:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8011be4:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d312      	bcc.n	8011c12 <vRW_Settings_Tas+0x2ea>
 8011bec:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bf0:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011bf4:	ed93 7a02 	vldr	s14, [r3, #8]
 8011bf8:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8011bfc:	edd3 7a00 	vldr	s15, [r3]
 8011c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c10:	dd0d      	ble.n	8011c2e <vRW_Settings_Tas+0x306>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011c12:	f107 030c 	add.w	r3, r7, #12
 8011c16:	3308      	adds	r3, #8
 8011c18:	2204      	movs	r2, #4
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4817      	ldr	r0, [pc, #92]	; (8011c7c <vRW_Settings_Tas+0x354>)
 8011c1e:	f019 f829 	bl	802ac74 <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011c22:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011c26:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011c2a:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  time_counter ++;
 8011c2e:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011c32:	3301      	adds	r3, #1
 8011c34:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    osDelay(delay1s);
 8011c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c3c:	f00e f9ae 	bl	801ff9c <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011c40:	e762      	b.n	8011b08 <vRW_Settings_Tas+0x1e0>
 8011c42:	bf00      	nop
 8011c44:	20000328 	.word	0x20000328
 8011c48:	08015425 	.word	0x08015425
 8011c4c:	08015401 	.word	0x08015401
 8011c50:	08015461 	.word	0x08015461
 8011c54:	08015449 	.word	0x08015449
 8011c58:	08011115 	.word	0x08011115
 8011c5c:	080110f9 	.word	0x080110f9
 8011c60:	080317d4 	.word	0x080317d4
 8011c64:	20000454 	.word	0x20000454
 8011c68:	3a83126f 	.word	0x3a83126f
 8011c6c:	080317e4 	.word	0x080317e4
 8011c70:	20000458 	.word	0x20000458
 8011c74:	080317f4 	.word	0x080317f4
 8011c78:	2000045c 	.word	0x2000045c
 8011c7c:	08031808 	.word	0x08031808
 8011c80:	20000494 	.word	0x20000494
 8011c84:	0803181c 	.word	0x0803181c
 8011c88:	08031824 	.word	0x08031824
 8011c8c:	20000450 	.word	0x20000450

08011c90 <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011ca2:	f00a f8a9 	bl	801bdf8 <DHCP_time_handler>
	httpServer_time_handler();
 8011ca6:	f00d fc85 	bl	801f5b4 <httpServer_time_handler>
	dns_service_increment_second();
 8011caa:	f00a fe33 	bl	801c914 <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011cae:	4b06      	ldr	r3, [pc, #24]	; (8011cc8 <vOneSecondTickTask+0x38>)
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	f107 010c 	add.w	r1, r7, #12
 8011cb6:	2302      	movs	r3, #2
 8011cb8:	2200      	movs	r2, #0
 8011cba:	f00e fec5 	bl	8020a48 <xQueueGenericSend>
    osDelay(delay1s);
 8011cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011cc2:	f00e f96b 	bl	801ff9c <osDelay>
	seconds++ ;
 8011cc6:	e7e9      	b.n	8011c9c <vOneSecondTickTask+0xc>
 8011cc8:	20000460 	.word	0x20000460

08011ccc <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011ccc:	b590      	push	{r4, r7, lr}
 8011cce:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af12      	add	r7, sp, #72	; 0x48
 8011cd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cda:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011cde:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011ce2:	f103 0308 	add.w	r3, r3, #8
 8011ce6:	2220      	movs	r2, #32
 8011ce8:	2100      	movs	r1, #0
 8011cea:	4618      	mov	r0, r3
 8011cec:	f01b fd06 	bl	802d6fc <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011cf0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011cf4:	f103 0308 	add.w	r3, r3, #8
 8011cf8:	2217      	movs	r2, #23
 8011cfa:	2100      	movs	r1, #0
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f01b fcfd 	bl	802d6fc <memset>

	  NetInfo.mac[0]	= 0x40;
 8011d02:	2340      	movs	r3, #64	; 0x40
 8011d04:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d08:	f102 0208 	add.w	r2, r2, #8
 8011d0c:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011d0e:	2308      	movs	r3, #8
 8011d10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d14:	f102 0209 	add.w	r2, r2, #9
 8011d18:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011d1a:	4bdc      	ldr	r3, [pc, #880]	; (801208c <vMaintEthTask+0x3c0>)
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d22:	f102 020a 	add.w	r2, r2, #10
 8011d26:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011d28:	4bd9      	ldr	r3, [pc, #868]	; (8012090 <vMaintEthTask+0x3c4>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d30:	f102 020b 	add.w	r2, r2, #11
 8011d34:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011d36:	4bd7      	ldr	r3, [pc, #860]	; (8012094 <vMaintEthTask+0x3c8>)
 8011d38:	781b      	ldrb	r3, [r3, #0]
 8011d3a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d3e:	f102 020c 	add.w	r2, r2, #12
 8011d42:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011d44:	4bd4      	ldr	r3, [pc, #848]	; (8012098 <vMaintEthTask+0x3cc>)
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d4c:	f102 020d 	add.w	r2, r2, #13
 8011d50:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011d52:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011d56:	f103 030b 	add.w	r3, r3, #11
 8011d5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d5e:	f102 0208 	add.w	r2, r2, #8
 8011d62:	6810      	ldr	r0, [r2, #0]
 8011d64:	6018      	str	r0, [r3, #0]
 8011d66:	8892      	ldrh	r2, [r2, #4]
 8011d68:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011d6a:	2302      	movs	r3, #2
 8011d6c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d70:	f102 021e 	add.w	r2, r2, #30
 8011d74:	7013      	strb	r3, [r2, #0]
 8011d76:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d7a:	f103 030e 	add.w	r3, r3, #14
 8011d7e:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d80:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d84:	f102 0211 	add.w	r2, r2, #17
 8011d88:	6013      	str	r3, [r2, #0]
 8011d8a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d8e:	f103 0312 	add.w	r3, r3, #18
 8011d92:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011d94:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d98:	f102 0215 	add.w	r2, r2, #21
 8011d9c:	6013      	str	r3, [r2, #0]
 8011d9e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011da2:	f103 0316 	add.w	r3, r3, #22
 8011da6:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011da8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dac:	f102 0219 	add.w	r2, r2, #25
 8011db0:	6013      	str	r3, [r2, #0]
 8011db2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011db6:	f103 031a 	add.w	r3, r3, #26
 8011dba:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011dbc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dc0:	f102 021d 	add.w	r2, r2, #29
 8011dc4:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011dc6:	4cb5      	ldr	r4, [pc, #724]	; (801209c <vMaintEthTask+0x3d0>)
 8011dc8:	4668      	mov	r0, sp
 8011dca:	f104 0310 	add.w	r3, r4, #16
 8011dce:	2248      	movs	r2, #72	; 0x48
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	f01b fe68 	bl	802daa6 <memcpy>
 8011dd6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011dda:	f00d ff3d 	bl	801fc58 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011dde:	49b0      	ldr	r1, [pc, #704]	; (80120a0 <vMaintEthTask+0x3d4>)
 8011de0:	48b0      	ldr	r0, [pc, #704]	; (80120a4 <vMaintEthTask+0x3d8>)
 8011de2:	f00d fee5 	bl	801fbb0 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011de6:	48b0      	ldr	r0, [pc, #704]	; (80120a8 <vMaintEthTask+0x3dc>)
 8011de8:	f00d feca 	bl	801fb80 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011dec:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011df0:	f103 0308 	add.w	r3, r3, #8
 8011df4:	4618      	mov	r0, r3
 8011df6:	f00d fdc7 	bl	801f988 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011dfa:	49ac      	ldr	r1, [pc, #688]	; (80120ac <vMaintEthTask+0x3e0>)
 8011dfc:	48ac      	ldr	r0, [pc, #688]	; (80120b0 <vMaintEthTask+0x3e4>)
 8011dfe:	f007 ff45 	bl	8019c8c <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011e02:	49ac      	ldr	r1, [pc, #688]	; (80120b4 <vMaintEthTask+0x3e8>)
 8011e04:	48ac      	ldr	r0, [pc, #688]	; (80120b8 <vMaintEthTask+0x3ec>)
 8011e06:	f007 ff1b 	bl	8019c40 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011e0a:	49ac      	ldr	r1, [pc, #688]	; (80120bc <vMaintEthTask+0x3f0>)
 8011e0c:	48ac      	ldr	r0, [pc, #688]	; (80120c0 <vMaintEthTask+0x3f4>)
 8011e0e:	f007 fef1 	bl	8019bf4 <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011e12:	4aac      	ldr	r2, [pc, #688]	; (80120c4 <vMaintEthTask+0x3f8>)
 8011e14:	49ac      	ldr	r1, [pc, #688]	; (80120c8 <vMaintEthTask+0x3fc>)
 8011e16:	48ac      	ldr	r0, [pc, #688]	; (80120c8 <vMaintEthTask+0x3fc>)
 8011e18:	f008 fc9c 	bl	801a754 <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011e1c:	f107 0320 	add.w	r3, r7, #32
 8011e20:	3b18      	subs	r3, #24
 8011e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e26:	4619      	mov	r1, r3
 8011e28:	2004      	movs	r0, #4
 8011e2a:	f00a fd1d 	bl	801c868 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011e2e:	48a7      	ldr	r0, [pc, #668]	; (80120cc <vMaintEthTask+0x400>)
 8011e30:	f00a fd08 	bl	801c844 <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011e34:	49a6      	ldr	r1, [pc, #664]	; (80120d0 <vMaintEthTask+0x404>)
 8011e36:	48a7      	ldr	r0, [pc, #668]	; (80120d4 <vMaintEthTask+0x408>)
 8011e38:	f00a fce8 	bl	801c80c <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011e3c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e40:	f103 031e 	add.w	r3, r3, #30
 8011e44:	781b      	ldrb	r3, [r3, #0]
 8011e46:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e4a:	f102 0201 	add.w	r2, r2, #1
 8011e4e:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011e56:	f102 0208 	add.w	r2, r2, #8
 8011e5a:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011e5c:	f00d fe52 	bl	801fb04 <w5500_init>
 8011e60:	4603      	mov	r3, r0
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	f040 81eb 	bne.w	801223e <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011e68:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e6c:	f00f fe52 	bl	8021b14 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e70:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e74:	f103 0308 	add.w	r3, r3, #8
 8011e78:	2206      	movs	r2, #6
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8011e80:	f006 fc74 	bl	801876c <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e84:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e88:	f103 031e 	add.w	r3, r3, #30
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	2b02      	cmp	r3, #2
 8011e90:	d106      	bne.n	8011ea0 <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e92:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8011e96:	4619      	mov	r1, r3
 8011e98:	2000      	movs	r0, #0
 8011e9a:	f009 ff03 	bl	801bca4 <DHCP_init>
 8011e9e:	e003      	b.n	8011ea8 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011ea0:	f00d fd82 	bl	801f9a8 <network_init>
			set_ip_aasigned();
 8011ea4:	f00d fe22 	bl	801faec <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011ea8:	f7ff f940 	bl	801112c <SocketMutexTake>
			dhcp_rutine();
 8011eac:	f00d fdcc 	bl	801fa48 <dhcp_rutine>

			if (!link_status()){
 8011eb0:	f00d fde2 	bl	801fa78 <link_status>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	f040 80e0 	bne.w	801207c <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ec2:	f102 020e 	add.w	r2, r2, #14
 8011ec6:	7013      	strb	r3, [r2, #0]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ece:	f102 020f 	add.w	r2, r2, #15
 8011ed2:	7013      	strb	r3, [r2, #0]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eda:	f102 0210 	add.w	r2, r2, #16
 8011ede:	7013      	strb	r3, [r2, #0]
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ee6:	f102 0211 	add.w	r2, r2, #17
 8011eea:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011eec:	2300      	movs	r3, #0
 8011eee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ef2:	f102 0212 	add.w	r2, r2, #18
 8011ef6:	7013      	strb	r3, [r2, #0]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011efe:	f102 0213 	add.w	r2, r2, #19
 8011f02:	7013      	strb	r3, [r2, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f0a:	f102 0214 	add.w	r2, r2, #20
 8011f0e:	7013      	strb	r3, [r2, #0]
 8011f10:	2300      	movs	r3, #0
 8011f12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f16:	f102 0215 	add.w	r2, r2, #21
 8011f1a:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f22:	f102 0216 	add.w	r2, r2, #22
 8011f26:	7013      	strb	r3, [r2, #0]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f2e:	f102 0217 	add.w	r2, r2, #23
 8011f32:	7013      	strb	r3, [r2, #0]
 8011f34:	2300      	movs	r3, #0
 8011f36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f3a:	f102 0218 	add.w	r2, r2, #24
 8011f3e:	7013      	strb	r3, [r2, #0]
 8011f40:	2300      	movs	r3, #0
 8011f42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f46:	f102 0219 	add.w	r2, r2, #25
 8011f4a:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f52:	f102 021a 	add.w	r2, r2, #26
 8011f56:	7013      	strb	r3, [r2, #0]
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f5e:	f102 021b 	add.w	r2, r2, #27
 8011f62:	7013      	strb	r3, [r2, #0]
 8011f64:	2300      	movs	r3, #0
 8011f66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f6a:	f102 021c 	add.w	r2, r2, #28
 8011f6e:	7013      	strb	r3, [r2, #0]
 8011f70:	2300      	movs	r3, #0
 8011f72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f76:	f102 021d 	add.w	r2, r2, #29
 8011f7a:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f7c:	f7ff f8e4 	bl	8011148 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f80:	2300      	movs	r3, #0
 8011f82:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f86:	f102 021f 	add.w	r2, r2, #31
 8011f8a:	7013      	strb	r3, [r2, #0]
 8011f8c:	e05a      	b.n	8012044 <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f8e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f92:	f103 031f 	add.w	r3, r3, #31
 8011f96:	781a      	ldrb	r2, [r3, #0]
 8011f98:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f9c:	f103 031f 	add.w	r3, r3, #31
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fa6:	443a      	add	r2, r7
 8011fa8:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011fac:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fb0:	443b      	add	r3, r7
 8011fb2:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011fb6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fba:	f103 031f 	add.w	r3, r3, #31
 8011fbe:	781a      	ldrb	r2, [r3, #0]
 8011fc0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fc4:	f103 031f 	add.w	r3, r3, #31
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fce:	443a      	add	r2, r7
 8011fd0:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011fd4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fd8:	443b      	add	r3, r7
 8011fda:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011fde:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fe2:	f103 031f 	add.w	r3, r3, #31
 8011fe6:	781a      	ldrb	r2, [r3, #0]
 8011fe8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fec:	f103 031f 	add.w	r3, r3, #31
 8011ff0:	781b      	ldrb	r3, [r3, #0]
 8011ff2:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011ff6:	443a      	add	r2, r7
 8011ff8:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8011ffc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012000:	443b      	add	r3, r7
 8012002:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8012006:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801200a:	f103 031f 	add.w	r3, r3, #31
 801200e:	781a      	ldrb	r2, [r3, #0]
 8012010:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012014:	f103 031f 	add.w	r3, r3, #31
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801201e:	443a      	add	r2, r7
 8012020:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012024:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012028:	443b      	add	r3, r7
 801202a:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 801202e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012032:	f103 031f 	add.w	r3, r3, #31
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	3301      	adds	r3, #1
 801203a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801203e:	f102 021f 	add.w	r2, r2, #31
 8012042:	7013      	strb	r3, [r2, #0]
 8012044:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012048:	f103 031f 	add.w	r3, r3, #31
 801204c:	781b      	ldrb	r3, [r3, #0]
 801204e:	2b03      	cmp	r3, #3
 8012050:	d99d      	bls.n	8011f8e <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 8012052:	2300      	movs	r3, #0
 8012054:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8012058:	f102 0208 	add.w	r2, r2, #8
 801205c:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 801205e:	4b1e      	ldr	r3, [pc, #120]	; (80120d8 <vMaintEthTask+0x40c>)
 8012060:	6818      	ldr	r0, [r3, #0]
 8012062:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012066:	f101 0108 	add.w	r1, r1, #8
 801206a:	2302      	movs	r3, #2
 801206c:	2200      	movs	r2, #0
 801206e:	f00e fceb 	bl	8020a48 <xQueueGenericSend>
				break;
 8012072:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8012074:	2001      	movs	r0, #1
 8012076:	f00d ff91 	bl	801ff9c <osDelay>
 801207a:	e6df      	b.n	8011e3c <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 801207c:	2300      	movs	r3, #0
 801207e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012082:	f102 021f 	add.w	r2, r2, #31
 8012086:	7013      	strb	r3, [r2, #0]
 8012088:	e083      	b.n	8012192 <vMaintEthTask+0x4c6>
 801208a:	bf00      	nop
 801208c:	1fff7a10 	.word	0x1fff7a10
 8012090:	1fff7a11 	.word	0x1fff7a11
 8012094:	1fff7a12 	.word	0x1fff7a12
 8012098:	1fff7a13 	.word	0x1fff7a13
 801209c:	20000380 	.word	0x20000380
 80120a0:	0801fc11 	.word	0x0801fc11
 80120a4:	0801fbf9 	.word	0x0801fbf9
 80120a8:	0801ff9d 	.word	0x0801ff9d
 80120ac:	0801fc89 	.word	0x0801fc89
 80120b0:	0801fcad 	.word	0x0801fcad
 80120b4:	0801fc41 	.word	0x0801fc41
 80120b8:	0801fc29 	.word	0x0801fc29
 80120bc:	080110e1 	.word	0x080110e1
 80120c0:	080110c5 	.word	0x080110c5
 80120c4:	0801f9dd 	.word	0x0801f9dd
 80120c8:	0801f9f5 	.word	0x0801f9f5
 80120cc:	0801fad5 	.word	0x0801fad5
 80120d0:	0801117d 	.word	0x0801117d
 80120d4:	08011161 	.word	0x08011161
 80120d8:	2000044c 	.word	0x2000044c
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 80120dc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120e0:	f103 031f 	add.w	r3, r3, #31
 80120e4:	781a      	ldrb	r2, [r3, #0]
 80120e6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ea:	f103 031f 	add.w	r3, r3, #31
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 80120f4:	443a      	add	r2, r7
 80120f6:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 80120fa:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80120fe:	443b      	add	r3, r7
 8012100:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8012104:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012108:	f103 031f 	add.w	r3, r3, #31
 801210c:	781a      	ldrb	r2, [r3, #0]
 801210e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012112:	f103 031f 	add.w	r3, r3, #31
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801211c:	443a      	add	r2, r7
 801211e:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8012122:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012126:	443b      	add	r3, r7
 8012128:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 801212c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012130:	f103 031f 	add.w	r3, r3, #31
 8012134:	781a      	ldrb	r2, [r3, #0]
 8012136:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801213a:	f103 031f 	add.w	r3, r3, #31
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012144:	443a      	add	r2, r7
 8012146:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 801214a:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801214e:	443b      	add	r3, r7
 8012150:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8012154:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012158:	f103 031f 	add.w	r3, r3, #31
 801215c:	781a      	ldrb	r2, [r3, #0]
 801215e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012162:	f103 031f 	add.w	r3, r3, #31
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801216c:	443a      	add	r2, r7
 801216e:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012172:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012176:	443b      	add	r3, r7
 8012178:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 801217c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012180:	f103 031f 	add.w	r3, r3, #31
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	3301      	adds	r3, #1
 8012188:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801218c:	f102 021f 	add.w	r2, r2, #31
 8012190:	7013      	strb	r3, [r2, #0]
 8012192:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012196:	f103 031f 	add.w	r3, r3, #31
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b03      	cmp	r3, #3
 801219e:	d99d      	bls.n	80120dc <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 80121a0:	2301      	movs	r3, #1
 80121a2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121a6:	f102 0208 	add.w	r2, r2, #8
 80121aa:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 80121ac:	f00d fc86 	bl	801fabc <link_speed>
 80121b0:	4603      	mov	r3, r0
 80121b2:	b2db      	uxtb	r3, r3
 80121b4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121b8:	f102 020a 	add.w	r2, r2, #10
 80121bc:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 80121be:	f00d fc71 	bl	801faa4 <link_duplex>
 80121c2:	4603      	mov	r3, r0
 80121c4:	b2db      	uxtb	r3, r3
 80121c6:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121ca:	f102 0209 	add.w	r2, r2, #9
 80121ce:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 80121d0:	f009 fea0 	bl	801bf14 <getDHCPLeasetime>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80121da:	f102 0204 	add.w	r2, r2, #4
 80121de:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 80121e0:	f7fe ffb2 	bl	8011148 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 80121e4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121e8:	f103 030e 	add.w	r3, r3, #14
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10e      	bne.n	8012210 <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121f2:	4b14      	ldr	r3, [pc, #80]	; (8012244 <vMaintEthTask+0x578>)
 80121f4:	6818      	ldr	r0, [r3, #0]
 80121f6:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80121fa:	f101 0108 	add.w	r1, r1, #8
 80121fe:	2302      	movs	r3, #2
 8012200:	2200      	movs	r2, #0
 8012202:	f00e fc21 	bl	8020a48 <xQueueGenericSend>
				osDelay(delay1s);
 8012206:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801220a:	f00d fec7 	bl	801ff9c <osDelay>
				continue;
 801220e:	e015      	b.n	801223c <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 8012210:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012214:	f103 0308 	add.w	r3, r3, #8
 8012218:	3315      	adds	r3, #21
 801221a:	4618      	mov	r0, r3
 801221c:	f00a fb3e 	bl	801c89c <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 8012220:	4b08      	ldr	r3, [pc, #32]	; (8012244 <vMaintEthTask+0x578>)
 8012222:	6818      	ldr	r0, [r3, #0]
 8012224:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012228:	f101 0108 	add.w	r1, r1, #8
 801222c:	2302      	movs	r3, #2
 801222e:	2200      	movs	r2, #0
 8012230:	f00e fc0a 	bl	8020a48 <xQueueGenericSend>
			osDelay(delay1s);
 8012234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012238:	f00d feb0 	bl	801ff9c <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 801223c:	e634      	b.n	8011ea8 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 801223e:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 8012240:	e5fc      	b.n	8011e3c <vMaintEthTask+0x170>
 8012242:	bf00      	nop
 8012244:	2000044c 	.word	0x2000044c

08012248 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 8012250:	4b1d      	ldr	r3, [pc, #116]	; (80122c8 <vDebugMemUsage+0x80>)
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4618      	mov	r0, r3
 8012256:	f00d fe63 	bl	801ff20 <osThreadGetStackSpace>
 801225a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 801225c:	4b1b      	ldr	r3, [pc, #108]	; (80122cc <vDebugMemUsage+0x84>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4618      	mov	r0, r3
 8012262:	f00d fe5d 	bl	801ff20 <osThreadGetStackSpace>
 8012266:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8012268:	4b19      	ldr	r3, [pc, #100]	; (80122d0 <vDebugMemUsage+0x88>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4618      	mov	r0, r3
 801226e:	f00d fe57 	bl	801ff20 <osThreadGetStackSpace>
 8012272:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 8012274:	4b17      	ldr	r3, [pc, #92]	; (80122d4 <vDebugMemUsage+0x8c>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4618      	mov	r0, r3
 801227a:	f00d fe51 	bl	801ff20 <osThreadGetStackSpace>
 801227e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 8012280:	4b15      	ldr	r3, [pc, #84]	; (80122d8 <vDebugMemUsage+0x90>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4618      	mov	r0, r3
 8012286:	f00d fe4b 	bl	801ff20 <osThreadGetStackSpace>
 801228a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 801228c:	4b13      	ldr	r3, [pc, #76]	; (80122dc <vDebugMemUsage+0x94>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f00d fe45 	bl	801ff20 <osThreadGetStackSpace>
 8012296:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 8012298:	4b11      	ldr	r3, [pc, #68]	; (80122e0 <vDebugMemUsage+0x98>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4618      	mov	r0, r3
 801229e:	f00d fe3f 	bl	801ff20 <osThreadGetStackSpace>
 80122a2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122a4:	2000      	movs	r0, #0
 80122a6:	f00d fe3b 	bl	801ff20 <osThreadGetStackSpace>
 80122aa:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122ac:	2000      	movs	r0, #0
 80122ae:	f00d fe37 	bl	801ff20 <osThreadGetStackSpace>
 80122b2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122b4:	2000      	movs	r0, #0
 80122b6:	f00d fe33 	bl	801ff20 <osThreadGetStackSpace>
 80122ba:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 80122bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122c0:	f00d fe6c 	bl	801ff9c <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80122c4:	e7c4      	b.n	8012250 <vDebugMemUsage+0x8>
 80122c6:	bf00      	nop
 80122c8:	20000420 	.word	0x20000420
 80122cc:	20000424 	.word	0x20000424
 80122d0:	20000428 	.word	0x20000428
 80122d4:	2000042c 	.word	0x2000042c
 80122d8:	20000430 	.word	0x20000430
 80122dc:	20000434 	.word	0x20000434
 80122e0:	20000438 	.word	0x20000438

080122e4 <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 80122ea:	b084      	sub	sp, #16
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122f2:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 80122f6:	4a4d      	ldr	r2, [pc, #308]	; (801242c <httpServ+0x148>)
 80122f8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80122fc:	f103 0308 	add.w	r3, r3, #8
 8012300:	6812      	ldr	r2, [r2, #0]
 8012302:	4611      	mov	r1, r2
 8012304:	8019      	strh	r1, [r3, #0]
 8012306:	3302      	adds	r3, #2
 8012308:	0c12      	lsrs	r2, r2, #16
 801230a:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 801230c:	2303      	movs	r3, #3
 801230e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012312:	f102 020e 	add.w	r2, r2, #14
 8012316:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 8012318:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801231c:	f103 0308 	add.w	r3, r3, #8
 8012320:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012324:	f102 020e 	add.w	r2, r2, #14
 8012328:	7812      	ldrb	r2, [r2, #0]
 801232a:	f607 0108 	addw	r1, r7, #2056	; 0x808
 801232e:	f107 0010 	add.w	r0, r7, #16
 8012332:	3808      	subs	r0, #8
 8012334:	f00c fb66 	bl	801ea04 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 8012338:	483d      	ldr	r0, [pc, #244]	; (8012430 <httpServ+0x14c>)
 801233a:	f00d fad5 	bl	801f8e8 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 801233e:	483d      	ldr	r0, [pc, #244]	; (8012434 <httpServ+0x150>)
 8012340:	f00d faea 	bl	801f918 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 8012344:	4b3c      	ldr	r3, [pc, #240]	; (8012438 <httpServ+0x154>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	2103      	movs	r1, #3
 801234a:	4618      	mov	r0, r3
 801234c:	f000 fce6 	bl	8012d1c <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 8012350:	4b3a      	ldr	r3, [pc, #232]	; (801243c <httpServ+0x158>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2104      	movs	r1, #4
 8012356:	4618      	mov	r0, r3
 8012358:	f000 fce0 	bl	8012d1c <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 801235c:	4b38      	ldr	r3, [pc, #224]	; (8012440 <httpServ+0x15c>)
 801235e:	681b      	ldr	r3, [r3, #0]
 8012360:	2100      	movs	r1, #0
 8012362:	4618      	mov	r0, r3
 8012364:	f000 fcda 	bl	8012d1c <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8012368:	4b36      	ldr	r3, [pc, #216]	; (8012444 <httpServ+0x160>)
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	2102      	movs	r1, #2
 801236e:	4618      	mov	r0, r3
 8012370:	f000 fcd4 	bl	8012d1c <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 8012374:	4b34      	ldr	r3, [pc, #208]	; (8012448 <httpServ+0x164>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2105      	movs	r1, #5
 801237a:	4618      	mov	r0, r3
 801237c:	f000 fcce 	bl	8012d1c <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 8012380:	4932      	ldr	r1, [pc, #200]	; (801244c <httpServ+0x168>)
 8012382:	4833      	ldr	r0, [pc, #204]	; (8012450 <httpServ+0x16c>)
 8012384:	f00d f932 	bl	801f5ec <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 8012388:	4932      	ldr	r1, [pc, #200]	; (8012454 <httpServ+0x170>)
 801238a:	4833      	ldr	r0, [pc, #204]	; (8012458 <httpServ+0x174>)
 801238c:	f00d f92e 	bl	801f5ec <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 8012390:	4932      	ldr	r1, [pc, #200]	; (801245c <httpServ+0x178>)
 8012392:	4833      	ldr	r0, [pc, #204]	; (8012460 <httpServ+0x17c>)
 8012394:	f00d f92a 	bl	801f5ec <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012398:	4b32      	ldr	r3, [pc, #200]	; (8012464 <httpServ+0x180>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80123a0:	f101 010c 	add.w	r1, r1, #12
 80123a4:	2200      	movs	r2, #0
 80123a6:	4618      	mov	r0, r3
 80123a8:	f00e fed4 	bl	8021154 <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123b0:	f103 030c 	add.w	r3, r3, #12
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d02f      	beq.n	801241a <httpServ+0x136>
 80123ba:	f00d fb8b 	bl	801fad4 <assigned_ip>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d12a      	bne.n	801241a <httpServ+0x136>
		  for(i = 0 ; i < http_nsockets; i++){
 80123c4:	2300      	movs	r3, #0
 80123c6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123ca:	f102 020f 	add.w	r2, r2, #15
 80123ce:	7013      	strb	r3, [r2, #0]
 80123d0:	e016      	b.n	8012400 <httpServ+0x11c>
			  SocketMutexTake();
 80123d2:	f7fe feab 	bl	801112c <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 80123d6:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123da:	f103 030f 	add.w	r3, r3, #15
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	4618      	mov	r0, r3
 80123e2:	f00c fb2b 	bl	801ea3c <httpServer_run>
			  SocketMutexRelease();
 80123e6:	f7fe feaf 	bl	8011148 <SocketMutexRelease>
		  for(i = 0 ; i < http_nsockets; i++){
 80123ea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123ee:	f103 030f 	add.w	r3, r3, #15
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	3301      	adds	r3, #1
 80123f6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123fa:	f102 020f 	add.w	r2, r2, #15
 80123fe:	7013      	strb	r3, [r2, #0]
 8012400:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012404:	f103 030f 	add.w	r3, r3, #15
 8012408:	781a      	ldrb	r2, [r3, #0]
 801240a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801240e:	f103 030e 	add.w	r3, r3, #14
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	429a      	cmp	r2, r3
 8012416:	d3dc      	bcc.n	80123d2 <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012418:	e003      	b.n	8012422 <httpServ+0x13e>
			  //osDelay(delay0_1s);

		  }
	  }else{
		  osDelay(delay1s);
 801241a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801241e:	f00d fdbd 	bl	801ff9c <osDelay>
	  }
	  osDelay(delay0_1s);
 8012422:	2064      	movs	r0, #100	; 0x64
 8012424:	f00d fdba 	bl	801ff9c <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012428:	e7b6      	b.n	8012398 <httpServ+0xb4>
 801242a:	bf00      	nop
 801242c:	08032444 	.word	0x08032444
 8012430:	08013a2d 	.word	0x08013a2d
 8012434:	08013b41 	.word	0x08013b41
 8012438:	20000450 	.word	0x20000450
 801243c:	20000454 	.word	0x20000454
 8012440:	20000458 	.word	0x20000458
 8012444:	2000045c 	.word	0x2000045c
 8012448:	20000460 	.word	0x20000460
 801244c:	08031830 	.word	0x08031830
 8012450:	08031b4c 	.word	0x08031b4c
 8012454:	08031b58 	.word	0x08031b58
 8012458:	08031e8c 	.word	0x08031e8c
 801245c:	08031ea0 	.word	0x08031ea0
 8012460:	08032438 	.word	0x08032438
 8012464:	2000044c 	.word	0x2000044c

08012468 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	f5ad 6d22 	sub.w	sp, sp, #2592	; 0xa20
 801246e:	af02      	add	r7, sp, #8
 8012470:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012474:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 8012478:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 801247a:	4995      	ldr	r1, [pc, #596]	; (80126d0 <vMQTT_Task+0x268>)
 801247c:	4895      	ldr	r0, [pc, #596]	; (80126d4 <vMQTT_Task+0x26c>)
 801247e:	f001 fc2f 	bl	8013ce0 <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 8012482:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012486:	f00d fd89 	bl	801ff9c <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 801248a:	4b93      	ldr	r3, [pc, #588]	; (80126d8 <vMQTT_Task+0x270>)
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8012492:	2200      	movs	r2, #0
 8012494:	4618      	mov	r0, r3
 8012496:	f00e fe5d 	bl	8021154 <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 801249a:	f897 39f8 	ldrb.w	r3, [r7, #2552]	; 0x9f8
 801249e:	f083 0301 	eor.w	r3, r3, #1
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f040 8108 	bne.w	80126ba <vMQTT_Task+0x252>
 80124aa:	f00d fb13 	bl	801fad4 <assigned_ip>
 80124ae:	4603      	mov	r3, r0
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	f040 8102 	bne.w	80126ba <vMQTT_Task+0x252>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124b6:	4b89      	ldr	r3, [pc, #548]	; (80126dc <vMQTT_Task+0x274>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124be:	2200      	movs	r2, #0
 80124c0:	4618      	mov	r0, r3
 80124c2:	f00e fe47 	bl	8021154 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124c6:	e00b      	b.n	80124e0 <vMQTT_Task+0x78>
			osDelay(delay1s);
 80124c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124cc:	f00d fd66 	bl	801ff9c <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124d0:	4b82      	ldr	r3, [pc, #520]	; (80126dc <vMQTT_Task+0x274>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124d8:	2200      	movs	r2, #0
 80124da:	4618      	mov	r0, r3
 80124dc:	f00e fe3a 	bl	8021154 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124e0:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 80124e4:	f083 0301 	eor.w	r3, r3, #1
 80124e8:	b2db      	uxtb	r3, r3
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d1ec      	bne.n	80124c8 <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80124ee:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 80124f2:	f083 0301 	eor.w	r3, r3, #1
 80124f6:	b2db      	uxtb	r3, r3
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	f040 80e0 	bne.w	80126be <vMQTT_Task+0x256>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 80124fe:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8012502:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012506:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 801250a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801250e:	9301      	str	r3, [sp, #4]
 8012510:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8012514:	9300      	str	r3, [sp, #0]
 8012516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801251a:	f001 fbfd 	bl	8013d18 <mqtt_client_init>
 801251e:	4603      	mov	r3, r0
 8012520:	2b00      	cmp	r3, #0
 8012522:	f040 80ce 	bne.w	80126c2 <vMQTT_Task+0x25a>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 8012526:	f001 fce3 	bl	8013ef0 <mqtt_client_connect>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	f2c0 80ca 	blt.w	80126c6 <vMQTT_Task+0x25e>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8012532:	f001 fd2d 	bl	8013f90 <mqtt_client_reg_dev_on_home_assist>
 8012536:	4603      	mov	r3, r0
 8012538:	2b00      	cmp	r3, #0
 801253a:	f040 80c6 	bne.w	80126ca <vMQTT_Task+0x262>

		generate_status_topik(topik_name, 0);
 801253e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012542:	2100      	movs	r1, #0
 8012544:	4618      	mov	r0, r3
 8012546:	f002 f93d 	bl	80147c4 <generate_status_topik>
		while (1){
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801254a:	4b65      	ldr	r3, [pc, #404]	; (80126e0 <vMQTT_Task+0x278>)
 801254c:	681b      	ldr	r3, [r3, #0]
 801254e:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 8012552:	2200      	movs	r2, #0
 8012554:	4618      	mov	r0, r3
 8012556:	f00e fdfd 	bl	8021154 <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 801255a:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 801255e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012562:	edd3 7a02 	vldr	s15, [r3, #8]
 8012566:	f107 030c 	add.w	r3, r7, #12
 801256a:	eeb0 0a67 	vmov.f32	s0, s15
 801256e:	495d      	ldr	r1, [pc, #372]	; (80126e4 <vMQTT_Task+0x27c>)
 8012570:	4618      	mov	r0, r3
 8012572:	f002 f95f 	bl	8014834 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012576:	f107 020c 	add.w	r2, r7, #12
 801257a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801257e:	4611      	mov	r1, r2
 8012580:	4618      	mov	r0, r3
 8012582:	f001 fe45 	bl	8014210 <send_data_to_topik>
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	f040 8086 	bne.w	801269a <vMQTT_Task+0x232>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 801258e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012592:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012596:	edd3 7a00 	vldr	s15, [r3]
 801259a:	f107 030c 	add.w	r3, r7, #12
 801259e:	eeb0 0a67 	vmov.f32	s0, s15
 80125a2:	4951      	ldr	r1, [pc, #324]	; (80126e8 <vMQTT_Task+0x280>)
 80125a4:	4618      	mov	r0, r3
 80125a6:	f002 f945 	bl	8014834 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125aa:	f107 020c 	add.w	r2, r7, #12
 80125ae:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125b2:	4611      	mov	r1, r2
 80125b4:	4618      	mov	r0, r3
 80125b6:	f001 fe2b 	bl	8014210 <send_data_to_topik>
 80125ba:	4603      	mov	r3, r0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d16e      	bne.n	801269e <vMQTT_Task+0x236>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 80125c0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80125cc:	f107 030c 	add.w	r3, r7, #12
 80125d0:	eeb0 0a67 	vmov.f32	s0, s15
 80125d4:	4945      	ldr	r1, [pc, #276]	; (80126ec <vMQTT_Task+0x284>)
 80125d6:	4618      	mov	r0, r3
 80125d8:	f002 f92c 	bl	8014834 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125dc:	f107 020c 	add.w	r2, r7, #12
 80125e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125e4:	4611      	mov	r1, r2
 80125e6:	4618      	mov	r0, r3
 80125e8:	f001 fe12 	bl	8014210 <send_data_to_topik>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d157      	bne.n	80126a2 <vMQTT_Task+0x23a>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 80125f2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125f6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80125fe:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80126f0 <vMQTT_Task+0x288>
 8012602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012606:	f107 030c 	add.w	r3, r7, #12
 801260a:	eeb0 0a67 	vmov.f32	s0, s15
 801260e:	4939      	ldr	r1, [pc, #228]	; (80126f4 <vMQTT_Task+0x28c>)
 8012610:	4618      	mov	r0, r3
 8012612:	f002 f90f 	bl	8014834 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012616:	f107 020c 	add.w	r2, r7, #12
 801261a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801261e:	4611      	mov	r1, r2
 8012620:	4618      	mov	r0, r3
 8012622:	f001 fdf5 	bl	8014210 <send_data_to_topik>
 8012626:	4603      	mov	r3, r0
 8012628:	2b00      	cmp	r3, #0
 801262a:	d13c      	bne.n	80126a6 <vMQTT_Task+0x23e>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ActivePower);
 801262c:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012630:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012634:	edd3 7a03 	vldr	s15, [r3, #12]
 8012638:	f107 030c 	add.w	r3, r7, #12
 801263c:	eeb0 0a67 	vmov.f32	s0, s15
 8012640:	492d      	ldr	r1, [pc, #180]	; (80126f8 <vMQTT_Task+0x290>)
 8012642:	4618      	mov	r0, r3
 8012644:	f002 f8f6 	bl	8014834 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012648:	f107 020c 	add.w	r2, r7, #12
 801264c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012650:	4611      	mov	r1, r2
 8012652:	4618      	mov	r0, r3
 8012654:	f001 fddc 	bl	8014210 <send_data_to_topik>
 8012658:	4603      	mov	r3, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	d125      	bne.n	80126aa <vMQTT_Task+0x242>

			generate_key_value_JSON(topik_payload, dev_class_apparent_power, PowerData.ApparPower);
 801265e:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012666:	edd3 7a04 	vldr	s15, [r3, #16]
 801266a:	f107 030c 	add.w	r3, r7, #12
 801266e:	eeb0 0a67 	vmov.f32	s0, s15
 8012672:	4922      	ldr	r1, [pc, #136]	; (80126fc <vMQTT_Task+0x294>)
 8012674:	4618      	mov	r0, r3
 8012676:	f002 f8dd 	bl	8014834 <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801267a:	f107 020c 	add.w	r2, r7, #12
 801267e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012682:	4611      	mov	r1, r2
 8012684:	4618      	mov	r0, r3
 8012686:	f001 fdc3 	bl	8014210 <send_data_to_topik>
 801268a:	4603      	mov	r3, r0
 801268c:	2b00      	cmp	r3, #0
 801268e:	d10e      	bne.n	80126ae <vMQTT_Task+0x246>



			osDelay(delay30s);
 8012690:	f247 5030 	movw	r0, #30000	; 0x7530
 8012694:	f00d fc82 	bl	801ff9c <osDelay>
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 8012698:	e757      	b.n	801254a <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801269a:	bf00      	nop
 801269c:	e008      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801269e:	bf00      	nop
 80126a0:	e006      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126a2:	bf00      	nop
 80126a4:	e004      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126a6:	bf00      	nop
 80126a8:	e002      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126aa:	bf00      	nop
 80126ac:	e000      	b.n	80126b0 <vMQTT_Task+0x248>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ae:	bf00      	nop
		}
		osDelay(delay1s);
 80126b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80126b4:	f00d fc72 	bl	801ff9c <osDelay>
 80126b8:	e6e3      	b.n	8012482 <vMQTT_Task+0x1a>
			continue;
 80126ba:	bf00      	nop
 80126bc:	e6e1      	b.n	8012482 <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 80126be:	bf00      	nop
 80126c0:	e6df      	b.n	8012482 <vMQTT_Task+0x1a>
			continue;
 80126c2:	bf00      	nop
 80126c4:	e6dd      	b.n	8012482 <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 80126c6:	bf00      	nop
 80126c8:	e6db      	b.n	8012482 <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 80126ca:	bf00      	nop
		osDelay(delay1s);
 80126cc:	e6d9      	b.n	8012482 <vMQTT_Task+0x1a>
 80126ce:	bf00      	nop
 80126d0:	08011149 	.word	0x08011149
 80126d4:	0801112d 	.word	0x0801112d
 80126d8:	2000044c 	.word	0x2000044c
 80126dc:	20000458 	.word	0x20000458
 80126e0:	20000450 	.word	0x20000450
 80126e4:	08032448 	.word	0x08032448
 80126e8:	08032450 	.word	0x08032450
 80126ec:	08032458 	.word	0x08032458
 80126f0:	42c80000 	.word	0x42c80000
 80126f4:	08032460 	.word	0x08032460
 80126f8:	08032470 	.word	0x08032470
 80126fc:	08032478 	.word	0x08032478

08012700 <vResetWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vResetWatchDog */
void vResetWatchDog(void *argument)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vResetWatchDog */
  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 8012708:	4803      	ldr	r0, [pc, #12]	; (8012718 <vResetWatchDog+0x18>)
 801270a:	f003 fa66 	bl	8015bda <HAL_IWDG_Refresh>
    osDelay(1);
 801270e:	2001      	movs	r0, #1
 8012710:	f00d fc44 	bl	801ff9c <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 8012714:	e7f8      	b.n	8012708 <vResetWatchDog+0x8>
 8012716:	bf00      	nop
 8012718:	2000031c 	.word	0x2000031c

0801271c <vSendBroadcast>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSendBroadcast */
void vSendBroadcast(void *argument)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSendBroadcast */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8012724:	2001      	movs	r0, #1
 8012726:	f00d fc39 	bl	801ff9c <osDelay>
 801272a:	e7fb      	b.n	8012724 <vSendBroadcast+0x8>

0801272c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b082      	sub	sp, #8
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	4a04      	ldr	r2, [pc, #16]	; (801274c <HAL_TIM_PeriodElapsedCallback+0x20>)
 801273a:	4293      	cmp	r3, r2
 801273c:	d101      	bne.n	8012742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801273e:	f002 febd 	bl	80154bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8012742:	bf00      	nop
 8012744:	3708      	adds	r7, #8
 8012746:	46bd      	mov	sp, r7
 8012748:	bd80      	pop	{r7, pc}
 801274a:	bf00      	nop
 801274c:	40010000 	.word	0x40010000

08012750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012750:	b480      	push	{r7}
 8012752:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012754:	b672      	cpsid	i
}
 8012756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012758:	e7fe      	b.n	8012758 <Error_Handler+0x8>
	...

0801275c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801275c:	b580      	push	{r7, lr}
 801275e:	b082      	sub	sp, #8
 8012760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012762:	2300      	movs	r3, #0
 8012764:	607b      	str	r3, [r7, #4]
 8012766:	4b12      	ldr	r3, [pc, #72]	; (80127b0 <HAL_MspInit+0x54>)
 8012768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801276a:	4a11      	ldr	r2, [pc, #68]	; (80127b0 <HAL_MspInit+0x54>)
 801276c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012770:	6453      	str	r3, [r2, #68]	; 0x44
 8012772:	4b0f      	ldr	r3, [pc, #60]	; (80127b0 <HAL_MspInit+0x54>)
 8012774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801277a:	607b      	str	r3, [r7, #4]
 801277c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801277e:	2300      	movs	r3, #0
 8012780:	603b      	str	r3, [r7, #0]
 8012782:	4b0b      	ldr	r3, [pc, #44]	; (80127b0 <HAL_MspInit+0x54>)
 8012784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012786:	4a0a      	ldr	r2, [pc, #40]	; (80127b0 <HAL_MspInit+0x54>)
 8012788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801278c:	6413      	str	r3, [r2, #64]	; 0x40
 801278e:	4b08      	ldr	r3, [pc, #32]	; (80127b0 <HAL_MspInit+0x54>)
 8012790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012796:	603b      	str	r3, [r7, #0]
 8012798:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 801279a:	2200      	movs	r2, #0
 801279c:	210f      	movs	r1, #15
 801279e:	f06f 0001 	mvn.w	r0, #1
 80127a2:	f002 ff63 	bl	801566c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80127a6:	bf00      	nop
 80127a8:	3708      	adds	r7, #8
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}
 80127ae:	bf00      	nop
 80127b0:	40023800 	.word	0x40023800

080127b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80127b4:	b480      	push	{r7}
 80127b6:	b085      	sub	sp, #20
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4a0b      	ldr	r2, [pc, #44]	; (80127f0 <HAL_CRC_MspInit+0x3c>)
 80127c2:	4293      	cmp	r3, r2
 80127c4:	d10d      	bne.n	80127e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80127c6:	2300      	movs	r3, #0
 80127c8:	60fb      	str	r3, [r7, #12]
 80127ca:	4b0a      	ldr	r3, [pc, #40]	; (80127f4 <HAL_CRC_MspInit+0x40>)
 80127cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ce:	4a09      	ldr	r2, [pc, #36]	; (80127f4 <HAL_CRC_MspInit+0x40>)
 80127d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80127d4:	6313      	str	r3, [r2, #48]	; 0x30
 80127d6:	4b07      	ldr	r3, [pc, #28]	; (80127f4 <HAL_CRC_MspInit+0x40>)
 80127d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80127de:	60fb      	str	r3, [r7, #12]
 80127e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80127e2:	bf00      	nop
 80127e4:	3714      	adds	r7, #20
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop
 80127f0:	40023000 	.word	0x40023000
 80127f4:	40023800 	.word	0x40023800

080127f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b08c      	sub	sp, #48	; 0x30
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012800:	f107 031c 	add.w	r3, r7, #28
 8012804:	2200      	movs	r2, #0
 8012806:	601a      	str	r2, [r3, #0]
 8012808:	605a      	str	r2, [r3, #4]
 801280a:	609a      	str	r2, [r3, #8]
 801280c:	60da      	str	r2, [r3, #12]
 801280e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a32      	ldr	r2, [pc, #200]	; (80128e0 <HAL_SPI_MspInit+0xe8>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d12c      	bne.n	8012874 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801281a:	2300      	movs	r3, #0
 801281c:	61bb      	str	r3, [r7, #24]
 801281e:	4b31      	ldr	r3, [pc, #196]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 8012820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012822:	4a30      	ldr	r2, [pc, #192]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 8012824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012828:	6453      	str	r3, [r2, #68]	; 0x44
 801282a:	4b2e      	ldr	r3, [pc, #184]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 801282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801282e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8012832:	61bb      	str	r3, [r7, #24]
 8012834:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012836:	2300      	movs	r3, #0
 8012838:	617b      	str	r3, [r7, #20]
 801283a:	4b2a      	ldr	r3, [pc, #168]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 801283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801283e:	4a29      	ldr	r2, [pc, #164]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 8012840:	f043 0301 	orr.w	r3, r3, #1
 8012844:	6313      	str	r3, [r2, #48]	; 0x30
 8012846:	4b27      	ldr	r3, [pc, #156]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 8012848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801284a:	f003 0301 	and.w	r3, r3, #1
 801284e:	617b      	str	r3, [r7, #20]
 8012850:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8012852:	23e0      	movs	r3, #224	; 0xe0
 8012854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012856:	2302      	movs	r3, #2
 8012858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801285a:	2300      	movs	r3, #0
 801285c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801285e:	2303      	movs	r3, #3
 8012860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8012862:	2305      	movs	r3, #5
 8012864:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012866:	f107 031c 	add.w	r3, r7, #28
 801286a:	4619      	mov	r1, r3
 801286c:	481e      	ldr	r0, [pc, #120]	; (80128e8 <HAL_SPI_MspInit+0xf0>)
 801286e:	f002 ffd5 	bl	801581c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8012872:	e030      	b.n	80128d6 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	4a1c      	ldr	r2, [pc, #112]	; (80128ec <HAL_SPI_MspInit+0xf4>)
 801287a:	4293      	cmp	r3, r2
 801287c:	d12b      	bne.n	80128d6 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 801287e:	2300      	movs	r3, #0
 8012880:	613b      	str	r3, [r7, #16]
 8012882:	4b18      	ldr	r3, [pc, #96]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 8012884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012886:	4a17      	ldr	r2, [pc, #92]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 8012888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801288c:	6413      	str	r3, [r2, #64]	; 0x40
 801288e:	4b15      	ldr	r3, [pc, #84]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 8012890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012896:	613b      	str	r3, [r7, #16]
 8012898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801289a:	2300      	movs	r3, #0
 801289c:	60fb      	str	r3, [r7, #12]
 801289e:	4b11      	ldr	r3, [pc, #68]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 80128a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128a2:	4a10      	ldr	r2, [pc, #64]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 80128a4:	f043 0302 	orr.w	r3, r3, #2
 80128a8:	6313      	str	r3, [r2, #48]	; 0x30
 80128aa:	4b0e      	ldr	r3, [pc, #56]	; (80128e4 <HAL_SPI_MspInit+0xec>)
 80128ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80128ae:	f003 0302 	and.w	r3, r3, #2
 80128b2:	60fb      	str	r3, [r7, #12]
 80128b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80128b6:	2338      	movs	r3, #56	; 0x38
 80128b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128ba:	2302      	movs	r3, #2
 80128bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128be:	2300      	movs	r3, #0
 80128c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80128c2:	2303      	movs	r3, #3
 80128c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80128c6:	2306      	movs	r3, #6
 80128c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80128ca:	f107 031c 	add.w	r3, r7, #28
 80128ce:	4619      	mov	r1, r3
 80128d0:	4807      	ldr	r0, [pc, #28]	; (80128f0 <HAL_SPI_MspInit+0xf8>)
 80128d2:	f002 ffa3 	bl	801581c <HAL_GPIO_Init>
}
 80128d6:	bf00      	nop
 80128d8:	3730      	adds	r7, #48	; 0x30
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
 80128de:	bf00      	nop
 80128e0:	40013000 	.word	0x40013000
 80128e4:	40023800 	.word	0x40023800
 80128e8:	40020000 	.word	0x40020000
 80128ec:	40003c00 	.word	0x40003c00
 80128f0:	40020400 	.word	0x40020400

080128f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b08a      	sub	sp, #40	; 0x28
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80128fc:	f107 0314 	add.w	r3, r7, #20
 8012900:	2200      	movs	r2, #0
 8012902:	601a      	str	r2, [r3, #0]
 8012904:	605a      	str	r2, [r3, #4]
 8012906:	609a      	str	r2, [r3, #8]
 8012908:	60da      	str	r2, [r3, #12]
 801290a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	4a1d      	ldr	r2, [pc, #116]	; (8012988 <HAL_UART_MspInit+0x94>)
 8012912:	4293      	cmp	r3, r2
 8012914:	d133      	bne.n	801297e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8012916:	2300      	movs	r3, #0
 8012918:	613b      	str	r3, [r7, #16]
 801291a:	4b1c      	ldr	r3, [pc, #112]	; (801298c <HAL_UART_MspInit+0x98>)
 801291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801291e:	4a1b      	ldr	r2, [pc, #108]	; (801298c <HAL_UART_MspInit+0x98>)
 8012920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012924:	6413      	str	r3, [r2, #64]	; 0x40
 8012926:	4b19      	ldr	r3, [pc, #100]	; (801298c <HAL_UART_MspInit+0x98>)
 8012928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801292e:	613b      	str	r3, [r7, #16]
 8012930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012932:	2300      	movs	r3, #0
 8012934:	60fb      	str	r3, [r7, #12]
 8012936:	4b15      	ldr	r3, [pc, #84]	; (801298c <HAL_UART_MspInit+0x98>)
 8012938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801293a:	4a14      	ldr	r2, [pc, #80]	; (801298c <HAL_UART_MspInit+0x98>)
 801293c:	f043 0301 	orr.w	r3, r3, #1
 8012940:	6313      	str	r3, [r2, #48]	; 0x30
 8012942:	4b12      	ldr	r3, [pc, #72]	; (801298c <HAL_UART_MspInit+0x98>)
 8012944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	60fb      	str	r3, [r7, #12]
 801294c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 801294e:	230c      	movs	r3, #12
 8012950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012952:	2302      	movs	r3, #2
 8012954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012956:	2300      	movs	r3, #0
 8012958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801295a:	2303      	movs	r3, #3
 801295c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 801295e:	2307      	movs	r3, #7
 8012960:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012962:	f107 0314 	add.w	r3, r7, #20
 8012966:	4619      	mov	r1, r3
 8012968:	4809      	ldr	r0, [pc, #36]	; (8012990 <HAL_UART_MspInit+0x9c>)
 801296a:	f002 ff57 	bl	801581c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 801296e:	2200      	movs	r2, #0
 8012970:	2105      	movs	r1, #5
 8012972:	2026      	movs	r0, #38	; 0x26
 8012974:	f002 fe7a 	bl	801566c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012978:	2026      	movs	r0, #38	; 0x26
 801297a:	f002 fe93 	bl	80156a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 801297e:	bf00      	nop
 8012980:	3728      	adds	r7, #40	; 0x28
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	40004400 	.word	0x40004400
 801298c:	40023800 	.word	0x40023800
 8012990:	40020000 	.word	0x40020000

08012994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b08c      	sub	sp, #48	; 0x30
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 801299c:	2300      	movs	r3, #0
 801299e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80129a0:	2300      	movs	r3, #0
 80129a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80129a4:	2300      	movs	r3, #0
 80129a6:	60bb      	str	r3, [r7, #8]
 80129a8:	4b2e      	ldr	r3, [pc, #184]	; (8012a64 <HAL_InitTick+0xd0>)
 80129aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129ac:	4a2d      	ldr	r2, [pc, #180]	; (8012a64 <HAL_InitTick+0xd0>)
 80129ae:	f043 0301 	orr.w	r3, r3, #1
 80129b2:	6453      	str	r3, [r2, #68]	; 0x44
 80129b4:	4b2b      	ldr	r3, [pc, #172]	; (8012a64 <HAL_InitTick+0xd0>)
 80129b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129b8:	f003 0301 	and.w	r3, r3, #1
 80129bc:	60bb      	str	r3, [r7, #8]
 80129be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80129c0:	f107 020c 	add.w	r2, r7, #12
 80129c4:	f107 0310 	add.w	r3, r7, #16
 80129c8:	4611      	mov	r1, r2
 80129ca:	4618      	mov	r0, r3
 80129cc:	f003 fdae 	bl	801652c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80129d0:	f003 fd98 	bl	8016504 <HAL_RCC_GetPCLK2Freq>
 80129d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80129d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129d8:	4a23      	ldr	r2, [pc, #140]	; (8012a68 <HAL_InitTick+0xd4>)
 80129da:	fba2 2303 	umull	r2, r3, r2, r3
 80129de:	0c9b      	lsrs	r3, r3, #18
 80129e0:	3b01      	subs	r3, #1
 80129e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80129e4:	4b21      	ldr	r3, [pc, #132]	; (8012a6c <HAL_InitTick+0xd8>)
 80129e6:	4a22      	ldr	r2, [pc, #136]	; (8012a70 <HAL_InitTick+0xdc>)
 80129e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80129ea:	4b20      	ldr	r3, [pc, #128]	; (8012a6c <HAL_InitTick+0xd8>)
 80129ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80129f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80129f2:	4a1e      	ldr	r2, [pc, #120]	; (8012a6c <HAL_InitTick+0xd8>)
 80129f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80129f8:	4b1c      	ldr	r3, [pc, #112]	; (8012a6c <HAL_InitTick+0xd8>)
 80129fa:	2200      	movs	r2, #0
 80129fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80129fe:	4b1b      	ldr	r3, [pc, #108]	; (8012a6c <HAL_InitTick+0xd8>)
 8012a00:	2200      	movs	r2, #0
 8012a02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012a04:	4b19      	ldr	r3, [pc, #100]	; (8012a6c <HAL_InitTick+0xd8>)
 8012a06:	2200      	movs	r2, #0
 8012a08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8012a0a:	4818      	ldr	r0, [pc, #96]	; (8012a6c <HAL_InitTick+0xd8>)
 8012a0c:	f004 fb96 	bl	801713c <HAL_TIM_Base_Init>
 8012a10:	4603      	mov	r3, r0
 8012a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8012a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d11b      	bne.n	8012a56 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8012a1e:	4813      	ldr	r0, [pc, #76]	; (8012a6c <HAL_InitTick+0xd8>)
 8012a20:	f004 fbe6 	bl	80171f0 <HAL_TIM_Base_Start_IT>
 8012a24:	4603      	mov	r3, r0
 8012a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8012a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d111      	bne.n	8012a56 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012a32:	2019      	movs	r0, #25
 8012a34:	f002 fe36 	bl	80156a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	2b0f      	cmp	r3, #15
 8012a3c:	d808      	bhi.n	8012a50 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8012a3e:	2200      	movs	r2, #0
 8012a40:	6879      	ldr	r1, [r7, #4]
 8012a42:	2019      	movs	r0, #25
 8012a44:	f002 fe12 	bl	801566c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012a48:	4a0a      	ldr	r2, [pc, #40]	; (8012a74 <HAL_InitTick+0xe0>)
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6013      	str	r3, [r2, #0]
 8012a4e:	e002      	b.n	8012a56 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8012a50:	2301      	movs	r3, #1
 8012a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3730      	adds	r7, #48	; 0x30
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	40023800 	.word	0x40023800
 8012a68:	431bde83 	.word	0x431bde83
 8012a6c:	2000049c 	.word	0x2000049c
 8012a70:	40010000 	.word	0x40010000
 8012a74:	200000bc 	.word	0x200000bc

08012a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012a7c:	e7fe      	b.n	8012a7c <NMI_Handler+0x4>

08012a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012a7e:	b480      	push	{r7}
 8012a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012a82:	e7fe      	b.n	8012a82 <HardFault_Handler+0x4>

08012a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012a84:	b480      	push	{r7}
 8012a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012a88:	e7fe      	b.n	8012a88 <MemManage_Handler+0x4>

08012a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012a8a:	b480      	push	{r7}
 8012a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012a8e:	e7fe      	b.n	8012a8e <BusFault_Handler+0x4>

08012a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012a90:	b480      	push	{r7}
 8012a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012a94:	e7fe      	b.n	8012a94 <UsageFault_Handler+0x4>

08012a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012a96:	b480      	push	{r7}
 8012a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012a9a:	bf00      	nop
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa2:	4770      	bx	lr

08012aa4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012aa8:	4802      	ldr	r0, [pc, #8]	; (8012ab4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012aaa:	f004 fc03 	bl	80172b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012aae:	bf00      	nop
 8012ab0:	bd80      	pop	{r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	2000049c 	.word	0x2000049c

08012ab8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012abc:	4802      	ldr	r0, [pc, #8]	; (8012ac8 <USART2_IRQHandler+0x10>)
 8012abe:	f004 fe5f 	bl	8017780 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012ac2:	bf00      	nop
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	200003d8 	.word	0x200003d8

08012acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012acc:	b480      	push	{r7}
 8012ace:	af00      	add	r7, sp, #0
  return 1;
 8012ad0:	2301      	movs	r3, #1
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ada:	4770      	bx	lr

08012adc <_kill>:

int _kill(int pid, int sig)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012ae6:	f01a ffa9 	bl	802da3c <__errno>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2216      	movs	r2, #22
 8012aee:	601a      	str	r2, [r3, #0]
  return -1;
 8012af0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <_exit>:

void _exit (int status)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012b04:	f04f 31ff 	mov.w	r1, #4294967295
 8012b08:	6878      	ldr	r0, [r7, #4]
 8012b0a:	f7ff ffe7 	bl	8012adc <_kill>
  while (1) {}    /* Make sure we hang here */
 8012b0e:	e7fe      	b.n	8012b0e <_exit+0x12>

08012b10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b086      	sub	sp, #24
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	617b      	str	r3, [r7, #20]
 8012b20:	e00a      	b.n	8012b38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012b22:	f3af 8000 	nop.w
 8012b26:	4601      	mov	r1, r0
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	1c5a      	adds	r2, r3, #1
 8012b2c:	60ba      	str	r2, [r7, #8]
 8012b2e:	b2ca      	uxtb	r2, r1
 8012b30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	3301      	adds	r3, #1
 8012b36:	617b      	str	r3, [r7, #20]
 8012b38:	697a      	ldr	r2, [r7, #20]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	dbf0      	blt.n	8012b22 <_read+0x12>
  }

  return len;
 8012b40:	687b      	ldr	r3, [r7, #4]
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3718      	adds	r7, #24
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b086      	sub	sp, #24
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	60f8      	str	r0, [r7, #12]
 8012b52:	60b9      	str	r1, [r7, #8]
 8012b54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b56:	2300      	movs	r3, #0
 8012b58:	617b      	str	r3, [r7, #20]
 8012b5a:	e009      	b.n	8012b70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	1c5a      	adds	r2, r3, #1
 8012b60:	60ba      	str	r2, [r7, #8]
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	4618      	mov	r0, r3
 8012b66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012b6a:	697b      	ldr	r3, [r7, #20]
 8012b6c:	3301      	adds	r3, #1
 8012b6e:	617b      	str	r3, [r7, #20]
 8012b70:	697a      	ldr	r2, [r7, #20]
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	dbf1      	blt.n	8012b5c <_write+0x12>
  }
  return len;
 8012b78:	687b      	ldr	r3, [r7, #4]
}
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	3718      	adds	r7, #24
 8012b7e:	46bd      	mov	sp, r7
 8012b80:	bd80      	pop	{r7, pc}

08012b82 <_close>:

int _close(int file)
{
 8012b82:	b480      	push	{r7}
 8012b84:	b083      	sub	sp, #12
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b8e:	4618      	mov	r0, r3
 8012b90:	370c      	adds	r7, #12
 8012b92:	46bd      	mov	sp, r7
 8012b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b98:	4770      	bx	lr

08012b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012b9a:	b480      	push	{r7}
 8012b9c:	b083      	sub	sp, #12
 8012b9e:	af00      	add	r7, sp, #0
 8012ba0:	6078      	str	r0, [r7, #4]
 8012ba2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012baa:	605a      	str	r2, [r3, #4]
  return 0;
 8012bac:	2300      	movs	r3, #0
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	370c      	adds	r7, #12
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb8:	4770      	bx	lr

08012bba <_isatty>:

int _isatty(int file)
{
 8012bba:	b480      	push	{r7}
 8012bbc:	b083      	sub	sp, #12
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012bc2:	2301      	movs	r3, #1
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	370c      	adds	r7, #12
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bce:	4770      	bx	lr

08012bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b085      	sub	sp, #20
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012bdc:	2300      	movs	r3, #0
}
 8012bde:	4618      	mov	r0, r3
 8012be0:	3714      	adds	r7, #20
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr
	...

08012bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b086      	sub	sp, #24
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012bf4:	4a14      	ldr	r2, [pc, #80]	; (8012c48 <_sbrk+0x5c>)
 8012bf6:	4b15      	ldr	r3, [pc, #84]	; (8012c4c <_sbrk+0x60>)
 8012bf8:	1ad3      	subs	r3, r2, r3
 8012bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012c00:	4b13      	ldr	r3, [pc, #76]	; (8012c50 <_sbrk+0x64>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d102      	bne.n	8012c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012c08:	4b11      	ldr	r3, [pc, #68]	; (8012c50 <_sbrk+0x64>)
 8012c0a:	4a12      	ldr	r2, [pc, #72]	; (8012c54 <_sbrk+0x68>)
 8012c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012c0e:	4b10      	ldr	r3, [pc, #64]	; (8012c50 <_sbrk+0x64>)
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	4413      	add	r3, r2
 8012c16:	693a      	ldr	r2, [r7, #16]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d207      	bcs.n	8012c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012c1c:	f01a ff0e 	bl	802da3c <__errno>
 8012c20:	4603      	mov	r3, r0
 8012c22:	220c      	movs	r2, #12
 8012c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012c26:	f04f 33ff 	mov.w	r3, #4294967295
 8012c2a:	e009      	b.n	8012c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012c2c:	4b08      	ldr	r3, [pc, #32]	; (8012c50 <_sbrk+0x64>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012c32:	4b07      	ldr	r3, [pc, #28]	; (8012c50 <_sbrk+0x64>)
 8012c34:	681a      	ldr	r2, [r3, #0]
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	4413      	add	r3, r2
 8012c3a:	4a05      	ldr	r2, [pc, #20]	; (8012c50 <_sbrk+0x64>)
 8012c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	3718      	adds	r7, #24
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	20010000 	.word	0x20010000
 8012c4c:	00000400 	.word	0x00000400
 8012c50:	200004e4 	.word	0x200004e4
 8012c54:	2000daf8 	.word	0x2000daf8

08012c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012c5c:	4b06      	ldr	r3, [pc, #24]	; (8012c78 <SystemInit+0x20>)
 8012c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c62:	4a05      	ldr	r2, [pc, #20]	; (8012c78 <SystemInit+0x20>)
 8012c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012c6c:	bf00      	nop
 8012c6e:	46bd      	mov	sp, r7
 8012c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop
 8012c78:	e000ed00 	.word	0xe000ed00

08012c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012c80:	f7ff ffea 	bl	8012c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012c84:	480c      	ldr	r0, [pc, #48]	; (8012cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012c86:	490d      	ldr	r1, [pc, #52]	; (8012cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012c88:	4a0d      	ldr	r2, [pc, #52]	; (8012cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012c8c:	e002      	b.n	8012c94 <LoopCopyDataInit>

08012c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012c92:	3304      	adds	r3, #4

08012c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012c98:	d3f9      	bcc.n	8012c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012c9a:	4a0a      	ldr	r2, [pc, #40]	; (8012cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012c9c:	4c0a      	ldr	r4, [pc, #40]	; (8012cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012ca0:	e001      	b.n	8012ca6 <LoopFillZerobss>

08012ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012ca4:	3204      	adds	r2, #4

08012ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012ca8:	d3fb      	bcc.n	8012ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012caa:	f01a fecd 	bl	802da48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012cae:	f7fe fa89 	bl	80111c4 <main>
  bx  lr    
 8012cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012cb4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012cbc:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012cc0:	08034d00 	.word	0x08034d00
  ldr r2, =_sbss
 8012cc4:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012cc8:	2000daf4 	.word	0x2000daf4

08012ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012ccc:	e7fe      	b.n	8012ccc <ADC_IRQHandler>

08012cce <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012cce:	b480      	push	{r7}
 8012cd0:	b083      	sub	sp, #12
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012cd8:	79fb      	ldrb	r3, [r7, #7]
 8012cda:	2b2f      	cmp	r3, #47	; 0x2f
 8012cdc:	d905      	bls.n	8012cea <CharToDec+0x1c>
 8012cde:	79fb      	ldrb	r3, [r7, #7]
 8012ce0:	2b39      	cmp	r3, #57	; 0x39
 8012ce2:	d802      	bhi.n	8012cea <CharToDec+0x1c>
 8012ce4:	79fb      	ldrb	r3, [r7, #7]
 8012ce6:	3b30      	subs	r3, #48	; 0x30
 8012ce8:	e012      	b.n	8012d10 <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012cea:	79fb      	ldrb	r3, [r7, #7]
 8012cec:	2b60      	cmp	r3, #96	; 0x60
 8012cee:	d905      	bls.n	8012cfc <CharToDec+0x2e>
 8012cf0:	79fb      	ldrb	r3, [r7, #7]
 8012cf2:	2b66      	cmp	r3, #102	; 0x66
 8012cf4:	d802      	bhi.n	8012cfc <CharToDec+0x2e>
 8012cf6:	79fb      	ldrb	r3, [r7, #7]
 8012cf8:	3b57      	subs	r3, #87	; 0x57
 8012cfa:	e009      	b.n	8012d10 <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012cfc:	79fb      	ldrb	r3, [r7, #7]
 8012cfe:	2b40      	cmp	r3, #64	; 0x40
 8012d00:	d905      	bls.n	8012d0e <CharToDec+0x40>
 8012d02:	79fb      	ldrb	r3, [r7, #7]
 8012d04:	2b46      	cmp	r3, #70	; 0x46
 8012d06:	d802      	bhi.n	8012d0e <CharToDec+0x40>
 8012d08:	79fb      	ldrb	r3, [r7, #7]
 8012d0a:	3b37      	subs	r3, #55	; 0x37
 8012d0c:	e000      	b.n	8012d10 <CharToDec+0x42>
    return 0;
 8012d0e:	2300      	movs	r3, #0
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	370c      	adds	r7, #12
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr

08012d1c <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012d1c:	b480      	push	{r7}
 8012d1e:	b083      	sub	sp, #12
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	460b      	mov	r3, r1
 8012d26:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012d28:	78fb      	ldrb	r3, [r7, #3]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d106      	bne.n	8012d3c <http_parse_params_init+0x20>
		if (xQueue){
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d034      	beq.n	8012d9e <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012d34:	4a1d      	ldr	r2, [pc, #116]	; (8012dac <http_parse_params_init+0x90>)
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012d3a:	e030      	b.n	8012d9e <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012d3c:	78fb      	ldrb	r3, [r7, #3]
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	d106      	bne.n	8012d50 <http_parse_params_init+0x34>
		if (xQueue){
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d02a      	beq.n	8012d9e <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012d48:	4a19      	ldr	r2, [pc, #100]	; (8012db0 <http_parse_params_init+0x94>)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6013      	str	r3, [r2, #0]
}
 8012d4e:	e026      	b.n	8012d9e <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012d50:	78fb      	ldrb	r3, [r7, #3]
 8012d52:	2b02      	cmp	r3, #2
 8012d54:	d106      	bne.n	8012d64 <http_parse_params_init+0x48>
		if (xQueue){
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d020      	beq.n	8012d9e <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8012d5c:	4a15      	ldr	r2, [pc, #84]	; (8012db4 <http_parse_params_init+0x98>)
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	6013      	str	r3, [r2, #0]
}
 8012d62:	e01c      	b.n	8012d9e <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 8012d64:	78fb      	ldrb	r3, [r7, #3]
 8012d66:	2b03      	cmp	r3, #3
 8012d68:	d106      	bne.n	8012d78 <http_parse_params_init+0x5c>
		if (xQueue){
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d016      	beq.n	8012d9e <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 8012d70:	4a11      	ldr	r2, [pc, #68]	; (8012db8 <http_parse_params_init+0x9c>)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6013      	str	r3, [r2, #0]
}
 8012d76:	e012      	b.n	8012d9e <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8012d78:	78fb      	ldrb	r3, [r7, #3]
 8012d7a:	2b04      	cmp	r3, #4
 8012d7c:	d106      	bne.n	8012d8c <http_parse_params_init+0x70>
		if (xQueue){
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d00c      	beq.n	8012d9e <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 8012d84:	4a0d      	ldr	r2, [pc, #52]	; (8012dbc <http_parse_params_init+0xa0>)
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	6013      	str	r3, [r2, #0]
}
 8012d8a:	e008      	b.n	8012d9e <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8012d8c:	78fb      	ldrb	r3, [r7, #3]
 8012d8e:	2b05      	cmp	r3, #5
 8012d90:	d105      	bne.n	8012d9e <http_parse_params_init+0x82>
		if (xQueue){
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d002      	beq.n	8012d9e <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8012d98:	4a09      	ldr	r2, [pc, #36]	; (8012dc0 <http_parse_params_init+0xa4>)
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	6013      	str	r3, [r2, #0]
}
 8012d9e:	bf00      	nop
 8012da0:	370c      	adds	r7, #12
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr
 8012daa:	bf00      	nop
 8012dac:	200004e8 	.word	0x200004e8
 8012db0:	200004ec 	.word	0x200004ec
 8012db4:	200004f0 	.word	0x200004f0
 8012db8:	200004f4 	.word	0x200004f4
 8012dbc:	200004f8 	.word	0x200004f8
 8012dc0:	200004fc 	.word	0x200004fc

08012dc4 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b0cc      	sub	sp, #304	; 0x130
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012dce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012dd2:	6018      	str	r0, [r3, #0]
 8012dd4:	460a      	mov	r2, r1
 8012dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012dda:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012dde:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 8012de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012de4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8012de8:	781b      	ldrb	r3, [r3, #0]
 8012dea:	2b04      	cmp	r3, #4
 8012dec:	f200 814a 	bhi.w	8013084 <param_from_http_to_Q+0x2c0>
 8012df0:	a201      	add	r2, pc, #4	; (adr r2, 8012df8 <param_from_http_to_Q+0x34>)
 8012df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012df6:	bf00      	nop
 8012df8:	08012e0d 	.word	0x08012e0d
 8012dfc:	08013085 	.word	0x08013085
 8012e00:	08012f99 	.word	0x08012f99
 8012e04:	08013085 	.word	0x08013085
 8012e08:	0801301f 	.word	0x0801301f

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 8012e0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e10:	22c6      	movs	r2, #198	; 0xc6
 8012e12:	2100      	movs	r1, #0
 8012e14:	4618      	mov	r0, r3
 8012e16:	f01a fc71 	bl	802d6fc <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1")){
 8012e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e22:	499c      	ldr	r1, [pc, #624]	; (8013094 <param_from_http_to_Q+0x2d0>)
 8012e24:	6818      	ldr	r0, [r3, #0]
 8012e26:	f00b fc59 	bl	801e6dc <get_http_param_value>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2131      	movs	r1, #49	; 0x31
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f01a fc7b 	bl	802d72a <strchr>
 8012e34:	4603      	mov	r3, r0
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d003      	beq.n	8012e42 <param_from_http_to_Q+0x7e>
				MQTT_params.enable = 1;
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8012e40:	e012      	b.n	8012e68 <param_from_http_to_Q+0xa4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0")) {
 8012e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e4a:	4992      	ldr	r1, [pc, #584]	; (8013094 <param_from_http_to_Q+0x2d0>)
 8012e4c:	6818      	ldr	r0, [r3, #0]
 8012e4e:	f00b fc45 	bl	801e6dc <get_http_param_value>
 8012e52:	4603      	mov	r3, r0
 8012e54:	2130      	movs	r1, #48	; 0x30
 8012e56:	4618      	mov	r0, r3
 8012e58:	f01a fc67 	bl	802d72a <strchr>
 8012e5c:	4603      	mov	r3, r0
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d002      	beq.n	8012e68 <param_from_http_to_Q+0xa4>
				MQTT_params.enable = 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8012e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012e6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012e70:	4989      	ldr	r1, [pc, #548]	; (8013098 <param_from_http_to_Q+0x2d4>)
 8012e72:	6818      	ldr	r0, [r3, #0]
 8012e74:	f00b fc32 	bl	801e6dc <get_http_param_value>
 8012e78:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8012e7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d106      	bne.n	8012e92 <param_from_http_to_Q+0xce>
 8012e84:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012e88:	f7fd fa0a 	bl	80102a0 <strlen>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	2b20      	cmp	r3, #32
 8012e90:	d807      	bhi.n	8012ea2 <param_from_http_to_Q+0xde>
				strcpy(MQTT_params.login, buf);
 8012e92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012e96:	3384      	adds	r3, #132	; 0x84
 8012e98:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f01a fdfa 	bl	802da96 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 8012ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012eaa:	497c      	ldr	r1, [pc, #496]	; (801309c <param_from_http_to_Q+0x2d8>)
 8012eac:	6818      	ldr	r0, [r3, #0]
 8012eae:	f00b fc15 	bl	801e6dc <get_http_param_value>
 8012eb2:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8012eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d106      	bne.n	8012ecc <param_from_http_to_Q+0x108>
 8012ebe:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012ec2:	f7fd f9ed 	bl	80102a0 <strlen>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b20      	cmp	r3, #32
 8012eca:	d807      	bhi.n	8012edc <param_from_http_to_Q+0x118>
				strcpy(MQTT_params.pass, buf);
 8012ecc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012ed0:	33a5      	adds	r3, #165	; 0xa5
 8012ed2:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f01a fddd 	bl	802da96 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 8012edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012ee4:	496e      	ldr	r1, [pc, #440]	; (80130a0 <param_from_http_to_Q+0x2dc>)
 8012ee6:	6818      	ldr	r0, [r3, #0]
 8012ee8:	f00b fbf8 	bl	801e6dc <get_http_param_value>
 8012eec:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 8012ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d106      	bne.n	8012f06 <param_from_http_to_Q+0x142>
 8012ef8:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012efc:	f7fd f9d0 	bl	80102a0 <strlen>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b7f      	cmp	r3, #127	; 0x7f
 8012f04:	d808      	bhi.n	8012f18 <param_from_http_to_Q+0x154>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 8012f06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012f0a:	3302      	adds	r3, #2
 8012f0c:	227f      	movs	r2, #127	; 0x7f
 8012f0e:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8012f12:	4618      	mov	r0, r3
 8012f14:	f01a fc4c 	bl	802d7b0 <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 8012f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012f20:	4960      	ldr	r1, [pc, #384]	; (80130a4 <param_from_http_to_Q+0x2e0>)
 8012f22:	6818      	ldr	r0, [r3, #0]
 8012f24:	f00b fbda 	bl	801e6dc <get_http_param_value>
 8012f28:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8012f2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d106      	bne.n	8012f42 <param_from_http_to_Q+0x17e>
 8012f34:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012f38:	f7fd f9b2 	bl	80102a0 <strlen>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	2b05      	cmp	r3, #5
 8012f40:	d81e      	bhi.n	8012f80 <param_from_http_to_Q+0x1bc>
				sscanf(buf, "%d", &port);
 8012f42:	f107 0316 	add.w	r3, r7, #22
 8012f46:	461a      	mov	r2, r3
 8012f48:	4957      	ldr	r1, [pc, #348]	; (80130a8 <param_from_http_to_Q+0x2e4>)
 8012f4a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8012f4e:	f01a faa5 	bl	802d49c <siscanf>
				if ((port > 0) && (port < 65535)){
 8012f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f56:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012f5a:	881b      	ldrh	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d00f      	beq.n	8012f80 <param_from_http_to_Q+0x1bc>
 8012f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f64:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012f68:	881b      	ldrh	r3, [r3, #0]
 8012f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d006      	beq.n	8012f80 <param_from_http_to_Q+0x1bc>
					MQTT_params.port = port;
 8012f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012f76:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8012f7a:	881b      	ldrh	r3, [r3, #0]
 8012f7c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 8012f80:	2301      	movs	r3, #1
 8012f82:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8012f86:	4b49      	ldr	r3, [pc, #292]	; (80130ac <param_from_http_to_Q+0x2e8>)
 8012f88:	6818      	ldr	r0, [r3, #0]
 8012f8a:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8012f8e:	2302      	movs	r3, #2
 8012f90:	2200      	movs	r2, #0
 8012f92:	f00d fd59 	bl	8020a48 <xQueueGenericSend>

			break;
 8012f96:	e078      	b.n	801308a <param_from_http_to_Q+0x2c6>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8012f98:	f107 031c 	add.w	r3, r7, #28
 8012f9c:	2202      	movs	r2, #2
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f01a fbab 	bl	802d6fc <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 8012fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012faa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fae:	4940      	ldr	r1, [pc, #256]	; (80130b0 <param_from_http_to_Q+0x2ec>)
 8012fb0:	6818      	ldr	r0, [r3, #0]
 8012fb2:	f00b fb93 	bl	801e6dc <get_http_param_value>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	2131      	movs	r1, #49	; 0x31
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f01a fbb5 	bl	802d72a <strchr>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d006      	beq.n	8012fd4 <param_from_http_to_Q+0x210>
				ModBusTCP_parameters.enable = 1;
 8012fc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012fce:	2201      	movs	r2, #1
 8012fd0:	705a      	strb	r2, [r3, #1]
 8012fd2:	e015      	b.n	8013000 <param_from_http_to_Q+0x23c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 8012fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8012fdc:	4934      	ldr	r1, [pc, #208]	; (80130b0 <param_from_http_to_Q+0x2ec>)
 8012fde:	6818      	ldr	r0, [r3, #0]
 8012fe0:	f00b fb7c 	bl	801e6dc <get_http_param_value>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2130      	movs	r1, #48	; 0x30
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f01a fb9e 	bl	802d72a <strchr>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d005      	beq.n	8013000 <param_from_http_to_Q+0x23c>
				ModBusTCP_parameters.enable = 0;
 8012ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8012ff8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8012ffc:	2200      	movs	r2, #0
 8012ffe:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 8013000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013004:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013008:	2201      	movs	r2, #1
 801300a:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 801300c:	4b29      	ldr	r3, [pc, #164]	; (80130b4 <param_from_http_to_Q+0x2f0>)
 801300e:	6818      	ldr	r0, [r3, #0]
 8013010:	f107 011c 	add.w	r1, r7, #28
 8013014:	2302      	movs	r3, #2
 8013016:	2200      	movs	r2, #0
 8013018:	f00d fd16 	bl	8020a48 <xQueueGenericSend>
			break;
 801301c:	e035      	b.n	801308a <param_from_http_to_Q+0x2c6>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 801301e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013022:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013026:	4924      	ldr	r1, [pc, #144]	; (80130b8 <param_from_http_to_Q+0x2f4>)
 8013028:	6818      	ldr	r0, [r3, #0]
 801302a:	f00b fb57 	bl	801e6dc <get_http_param_value>
 801302e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 8013032:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013036:	2b00      	cmp	r3, #0
 8013038:	d026      	beq.n	8013088 <param_from_http_to_Q+0x2c4>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 801303a:	4a20      	ldr	r2, [pc, #128]	; (80130bc <param_from_http_to_Q+0x2f8>)
 801303c:	4920      	ldr	r1, [pc, #128]	; (80130c0 <param_from_http_to_Q+0x2fc>)
 801303e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013042:	f01a fa2b 	bl	802d49c <siscanf>
				if (float_temp > 0){									//validate value
 8013046:	4b1d      	ldr	r3, [pc, #116]	; (80130bc <param_from_http_to_Q+0x2f8>)
 8013048:	edd3 7a00 	vldr	s15, [r3]
 801304c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013054:	dc00      	bgt.n	8013058 <param_from_http_to_Q+0x294>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 8013056:	e017      	b.n	8013088 <param_from_http_to_Q+0x2c4>
					PowShunSett.resistance = float_temp;
 8013058:	4b18      	ldr	r3, [pc, #96]	; (80130bc <param_from_http_to_Q+0x2f8>)
 801305a:	681a      	ldr	r2, [r3, #0]
 801305c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013060:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013064:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 8013066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801306a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801306e:	2201      	movs	r2, #1
 8013070:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 8013072:	4b14      	ldr	r3, [pc, #80]	; (80130c4 <param_from_http_to_Q+0x300>)
 8013074:	6818      	ldr	r0, [r3, #0]
 8013076:	f107 010c 	add.w	r1, r7, #12
 801307a:	2302      	movs	r3, #2
 801307c:	2200      	movs	r2, #0
 801307e:	f00d fce3 	bl	8020a48 <xQueueGenericSend>
			break;
 8013082:	e001      	b.n	8013088 <param_from_http_to_Q+0x2c4>
		default:
			break;
 8013084:	bf00      	nop
 8013086:	e000      	b.n	801308a <param_from_http_to_Q+0x2c6>
			break;
 8013088:	bf00      	nop
	}
}
 801308a:	bf00      	nop
 801308c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}
 8013094:	08032488 	.word	0x08032488
 8013098:	08032490 	.word	0x08032490
 801309c:	08032498 	.word	0x08032498
 80130a0:	080324a4 	.word	0x080324a4
 80130a4:	080324a8 	.word	0x080324a8
 80130a8:	080324b0 	.word	0x080324b0
 80130ac:	200004e8 	.word	0x200004e8
 80130b0:	080324b4 	.word	0x080324b4
 80130b4:	200004f0 	.word	0x200004f0
 80130b8:	080324bc 	.word	0x080324bc
 80130bc:	20000500 	.word	0x20000500
 80130c0:	080324c4 	.word	0x080324c4
 80130c4:	200004f8 	.word	0x200004f8

080130c8 <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 80130c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130cc:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80130d0:	af0a      	add	r7, sp, #40	; 0x28
 80130d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130d6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80130da:	6018      	str	r0, [r3, #0]
 80130dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130e0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80130e4:	601a      	str	r2, [r3, #0]
 80130e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130ea:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 80130ee:	460a      	mov	r2, r1
 80130f0:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 80130f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80130f6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80130fa:	4a73      	ldr	r2, [pc, #460]	; (80132c8 <param_from_Q_to_JSON+0x200>)
 80130fc:	4618      	mov	r0, r3
 80130fe:	4611      	mov	r1, r2
 8013100:	2351      	movs	r3, #81	; 0x51
 8013102:	461a      	mov	r2, r3
 8013104:	f01a fccf 	bl	802daa6 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 8013108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801310c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8013110:	4a6e      	ldr	r2, [pc, #440]	; (80132cc <param_from_Q_to_JSON+0x204>)
 8013112:	4618      	mov	r0, r3
 8013114:	4611      	mov	r1, r2
 8013116:	2384      	movs	r3, #132	; 0x84
 8013118:	461a      	mov	r2, r3
 801311a:	f01a fcc4 	bl	802daa6 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 801311e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013122:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8013126:	4a6a      	ldr	r2, [pc, #424]	; (80132d0 <param_from_Q_to_JSON+0x208>)
 8013128:	461c      	mov	r4, r3
 801312a:	4615      	mov	r5, r2
 801312c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801312e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013130:	682b      	ldr	r3, [r5, #0]
 8013132:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8013134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013138:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	2b04      	cmp	r3, #4
 8013140:	f000 8093 	beq.w	801326a <param_from_Q_to_JSON+0x1a2>
 8013144:	2b04      	cmp	r3, #4
 8013146:	f300 80b8 	bgt.w	80132ba <param_from_Q_to_JSON+0x1f2>
 801314a:	2b00      	cmp	r3, #0
 801314c:	d002      	beq.n	8013154 <param_from_Q_to_JSON+0x8c>
 801314e:	2b03      	cmp	r3, #3
 8013150:	d031      	beq.n	80131b6 <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 8013152:	e0b2      	b.n	80132ba <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8013154:	4b5f      	ldr	r3, [pc, #380]	; (80132d4 <param_from_Q_to_JSON+0x20c>)
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	f507 719c 	add.w	r1, r7, #312	; 0x138
 801315c:	2200      	movs	r2, #0
 801315e:	4618      	mov	r0, r3
 8013160:	f00d fff8 	bl	8021154 <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8013164:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 8013168:	461d      	mov	r5, r3
 801316a:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 801316e:	461e      	mov	r6, r3
 8013170:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013174:	1c9c      	adds	r4, r3, #2
 8013176:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801317a:	f103 0284 	add.w	r2, r3, #132	; 0x84
 801317e:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8013182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013186:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 801318a:	9601      	str	r6, [sp, #4]
 801318c:	9500      	str	r5, [sp, #0]
 801318e:	4623      	mov	r3, r4
 8013190:	6800      	ldr	r0, [r0, #0]
 8013192:	f01a f963 	bl	802d45c <siprintf>
			*len = strlen(buf);
 8013196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801319a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 801319e:	6818      	ldr	r0, [r3, #0]
 80131a0:	f7fd f87e 	bl	80102a0 <strlen>
 80131a4:	4603      	mov	r3, r0
 80131a6:	b29a      	uxth	r2, r3
 80131a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80131ac:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	801a      	strh	r2, [r3, #0]
			break;
 80131b4:	e082      	b.n	80132bc <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 80131b6:	4b48      	ldr	r3, [pc, #288]	; (80132d8 <param_from_Q_to_JSON+0x210>)
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80131be:	2200      	movs	r2, #0
 80131c0:	4618      	mov	r0, r3
 80131c2:	f00d ffc7 	bl	8021154 <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 80131c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80131ca:	4618      	mov	r0, r3
 80131cc:	f7fd f9d4 	bl	8010578 <__aeabi_f2d>
 80131d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80131d4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fd f9cd 	bl	8010578 <__aeabi_f2d>
 80131de:	4604      	mov	r4, r0
 80131e0:	460d      	mov	r5, r1
 80131e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fd f9c6 	bl	8010578 <__aeabi_f2d>
 80131ec:	4680      	mov	r8, r0
 80131ee:	4689      	mov	r9, r1
 80131f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80131f4:	4618      	mov	r0, r3
 80131f6:	f7fd f9bf 	bl	8010578 <__aeabi_f2d>
 80131fa:	4682      	mov	sl, r0
 80131fc:	468b      	mov	fp, r1
 80131fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013202:	4618      	mov	r0, r3
 8013204:	f7fd f9b8 	bl	8010578 <__aeabi_f2d>
 8013208:	e9c7 0100 	strd	r0, r1, [r7]
 801320c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013210:	4618      	mov	r0, r3
 8013212:	f7fd f9b1 	bl	8010578 <__aeabi_f2d>
 8013216:	4602      	mov	r2, r0
 8013218:	460b      	mov	r3, r1
 801321a:	f107 0634 	add.w	r6, r7, #52	; 0x34
 801321e:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8013222:	f5a1 70f2 	sub.w	r0, r1, #484	; 0x1e4
 8013226:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801322a:	ed97 7b00 	vldr	d7, [r7]
 801322e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013232:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8013236:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801323a:	e9cd 4500 	strd	r4, r5, [sp]
 801323e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013242:	4631      	mov	r1, r6
 8013244:	6800      	ldr	r0, [r0, #0]
 8013246:	f01a f909 	bl	802d45c <siprintf>
			*len = strlen(buf);
 801324a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801324e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013252:	6818      	ldr	r0, [r3, #0]
 8013254:	f7fd f824 	bl	80102a0 <strlen>
 8013258:	4603      	mov	r3, r0
 801325a:	b29a      	uxth	r2, r3
 801325c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013260:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	801a      	strh	r2, [r3, #0]
			break;
 8013268:	e028      	b.n	80132bc <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 801326a:	4b1c      	ldr	r3, [pc, #112]	; (80132dc <param_from_Q_to_JSON+0x214>)
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8013272:	2200      	movs	r2, #0
 8013274:	4618      	mov	r0, r3
 8013276:	f00d ff6d 	bl	8021154 <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 801327a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801327e:	4618      	mov	r0, r3
 8013280:	f7fd f97a 	bl	8010578 <__aeabi_f2d>
 8013284:	4602      	mov	r2, r0
 8013286:	460b      	mov	r3, r1
 8013288:	f107 0120 	add.w	r1, r7, #32
 801328c:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8013290:	f5a0 70f2 	sub.w	r0, r0, #484	; 0x1e4
 8013294:	6800      	ldr	r0, [r0, #0]
 8013296:	f01a f8e1 	bl	802d45c <siprintf>
			*len = strlen(buf);
 801329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801329e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80132a2:	6818      	ldr	r0, [r3, #0]
 80132a4:	f7fc fffc 	bl	80102a0 <strlen>
 80132a8:	4603      	mov	r3, r0
 80132aa:	b29a      	uxth	r2, r3
 80132ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80132b0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	801a      	strh	r2, [r3, #0]
			break;
 80132b8:	e000      	b.n	80132bc <param_from_Q_to_JSON+0x1f4>
			break;
 80132ba:	bf00      	nop
	}
}
 80132bc:	bf00      	nop
 80132be:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80132c2:	46bd      	mov	sp, r7
 80132c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c8:	080324c8 	.word	0x080324c8
 80132cc:	0803251c 	.word	0x0803251c
 80132d0:	080325a0 	.word	0x080325a0
 80132d4:	200004e8 	.word	0x200004e8
 80132d8:	200004f4 	.word	0x200004f4
 80132dc:	200004f8 	.word	0x200004f8

080132e0 <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 80132e0:	b590      	push	{r4, r7, lr}
 80132e2:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80132e6:	af02      	add	r7, sp, #8
 80132e8:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 80132ec:	f5a4 7439 	sub.w	r4, r4, #740	; 0x2e4
 80132f0:	6020      	str	r0, [r4, #0]
 80132f2:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80132f6:	f5a0 703a 	sub.w	r0, r0, #744	; 0x2e8
 80132fa:	6001      	str	r1, [r0, #0]
 80132fc:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8013300:	f5a1 713b 	sub.w	r1, r1, #748	; 0x2ec
 8013304:	600a      	str	r2, [r1, #0]
 8013306:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 801330a:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 801330e:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 8013310:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8013314:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 8013318:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801331c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013320:	49ac      	ldr	r1, [pc, #688]	; (80135d4 <write_to_file+0x2f4>)
 8013322:	6818      	ldr	r0, [r3, #0]
 8013324:	f00b f9da 	bl	801e6dc <get_http_param_value>
 8013328:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 801332c:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d025      	beq.n	8013380 <write_to_file+0xa0>
		strcpy(filename, base_path);
 8013334:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013338:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 801333c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013340:	6819      	ldr	r1, [r3, #0]
 8013342:	4610      	mov	r0, r2
 8013344:	f01a fba7 	bl	802da96 <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 8013348:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801334c:	222d      	movs	r2, #45	; 0x2d
 801334e:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8013352:	4618      	mov	r0, r3
 8013354:	f01a fa07 	bl	802d766 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 8013358:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801335c:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013360:	499d      	ldr	r1, [pc, #628]	; (80135d8 <write_to_file+0x2f8>)
 8013362:	6818      	ldr	r0, [r3, #0]
 8013364:	f00b f9ba 	bl	801e6dc <get_http_param_value>
 8013368:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 801336c:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013370:	f7fc ff96 	bl	80102a0 <strlen>
 8013374:	4603      	mov	r3, r0
 8013376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801337a:	f080 8113 	bcs.w	80135a4 <write_to_file+0x2c4>
 801337e:	e011      	b.n	80133a4 <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 8013380:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013384:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	4a94      	ldr	r2, [pc, #592]	; (80135dc <write_to_file+0x2fc>)
 801338c:	6810      	ldr	r0, [r2, #0]
 801338e:	6018      	str	r0, [r3, #0]
 8013390:	8892      	ldrh	r2, [r2, #4]
 8013392:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013394:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013398:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2205      	movs	r2, #5
 80133a0:	801a      	strh	r2, [r3, #0]
		return;
 80133a2:	e111      	b.n	80135c8 <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 80133a4:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	f000 80e9 	beq.w	8013580 <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 80133ae:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 80133b2:	f7fc ff75 	bl	80102a0 <strlen>
 80133b6:	4603      	mov	r3, r0
 80133b8:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 80133bc:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80133c0:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80133ca:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80133ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80133d2:	f017 fe21 	bl	802b018 <mbedtls_base64_decode>
 80133d6:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 80133da:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80133de:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80133e2:	497f      	ldr	r1, [pc, #508]	; (80135e0 <write_to_file+0x300>)
 80133e4:	6818      	ldr	r0, [r3, #0]
 80133e6:	f00b f979 	bl	801e6dc <get_http_param_value>
 80133ea:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 80133ee:	2300      	movs	r3, #0
 80133f0:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80133f4:	e030      	b.n	8013458 <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 80133f6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80133fa:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80133fe:	4413      	add	r3, r2
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff fc63 	bl	8012cce <CharToDec>
 8013408:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 801340c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013410:	3301      	adds	r3, #1
 8013412:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8013416:	4413      	add	r3, r2
 8013418:	781b      	ldrb	r3, [r3, #0]
 801341a:	4618      	mov	r0, r3
 801341c:	f7ff fc57 	bl	8012cce <CharToDec>
 8013420:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 8013424:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8013428:	011b      	lsls	r3, r3, #4
 801342a:	b25a      	sxtb	r2, r3
 801342c:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8013430:	b25b      	sxtb	r3, r3
 8013432:	4313      	orrs	r3, r2
 8013434:	b259      	sxtb	r1, r3
 8013436:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801343a:	0fda      	lsrs	r2, r3, #31
 801343c:	4413      	add	r3, r2
 801343e:	105b      	asrs	r3, r3, #1
 8013440:	461a      	mov	r2, r3
 8013442:	b2c9      	uxtb	r1, r1
 8013444:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013448:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801344c:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 801344e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013452:	3302      	adds	r3, #2
 8013454:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8013458:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801345c:	2b1f      	cmp	r3, #31
 801345e:	ddca      	ble.n	80133f6 <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 8013460:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013464:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013468:	2200      	movs	r2, #0
 801346a:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 801346c:	f107 0310 	add.w	r3, r7, #16
 8013470:	4618      	mov	r0, r3
 8013472:	f017 feed 	bl	802b250 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 8013476:	f107 0310 	add.w	r3, r7, #16
 801347a:	4618      	mov	r0, r3
 801347c:	f017 ff06 	bl	802b28c <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 8013480:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801348a:	f107 0310 	add.w	r3, r7, #16
 801348e:	4618      	mov	r0, r3
 8013490:	f018 fde6 	bl	802c060 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 8013494:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8013498:	f107 0310 	add.w	r3, r7, #16
 801349c:	4611      	mov	r1, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f018 fe53 	bl	802c14a <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 80134a4:	f107 0310 	add.w	r3, r7, #16
 80134a8:	4618      	mov	r0, r3
 80134aa:	f017 fede 	bl	802b26a <mbedtls_md5_free>
		output[16] = '\0';
 80134ae:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80134b2:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 80134b6:	2200      	movs	r2, #0
 80134b8:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 80134ba:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80134be:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80134c2:	2210      	movs	r2, #16
 80134c4:	4618      	mov	r0, r3
 80134c6:	f01a f961 	bl	802d78c <strncmp>
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d006      	beq.n	80134de <write_to_file+0x1fe>
			err = -1;
 80134d0:	f04f 33ff 	mov.w	r3, #4294967295
 80134d4:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 80134d8:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80134dc:	e074      	b.n	80135c8 <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 80134de:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80134e2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80134e6:	493f      	ldr	r1, [pc, #252]	; (80135e4 <write_to_file+0x304>)
 80134e8:	6818      	ldr	r0, [r3, #0]
 80134ea:	f00b f8f7 	bl	801e6dc <get_http_param_value>
 80134ee:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 80134f2:	210a      	movs	r1, #10
 80134f4:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80134f8:	f00b f9a2 	bl	801e840 <ATOI>
 80134fc:	4603      	mov	r3, r0
 80134fe:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 8013502:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d10f      	bne.n	801352a <write_to_file+0x24a>
			part =0;
 801350a:	4b37      	ldr	r3, [pc, #220]	; (80135e8 <write_to_file+0x308>)
 801350c:	2200      	movs	r2, #0
 801350e:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 8013510:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801351a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801351e:	4618      	mov	r0, r3
 8013520:	f017 fba8 	bl	802ac74 <spi_fs_over_write_file>
 8013524:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 8013528:	e01d      	b.n	8013566 <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 801352a:	210a      	movs	r1, #10
 801352c:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8013530:	f00b f986 	bl	801e840 <ATOI>
 8013534:	4603      	mov	r3, r0
 8013536:	461a      	mov	r2, r3
 8013538:	4b2b      	ldr	r3, [pc, #172]	; (80135e8 <write_to_file+0x308>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	429a      	cmp	r2, r3
 801353e:	d006      	beq.n	801354e <write_to_file+0x26e>
				err = -1;
 8013540:	f04f 33ff 	mov.w	r3, #4294967295
 8013544:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 8013548:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 801354c:	e03c      	b.n	80135c8 <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 801354e:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013552:	681a      	ldr	r2, [r3, #0]
 8013554:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8013558:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801355c:	4618      	mov	r0, r3
 801355e:	f017 fbe5 	bl	802ad2c <spi_fs_write_file_to_end>
 8013562:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 8013566:	4b20      	ldr	r3, [pc, #128]	; (80135e8 <write_to_file+0x308>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	3301      	adds	r3, #1
 801356c:	4a1e      	ldr	r2, [pc, #120]	; (80135e8 <write_to_file+0x308>)
 801356e:	6013      	str	r3, [r2, #0]

		if (err < 0){
 8013570:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013574:	2b00      	cmp	r3, #0
 8013576:	da15      	bge.n	80135a4 <write_to_file+0x2c4>
			err = 0;
 8013578:	2300      	movs	r3, #0
 801357a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 801357e:	e011      	b.n	80135a4 <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 8013580:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013584:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	4a14      	ldr	r2, [pc, #80]	; (80135dc <write_to_file+0x2fc>)
 801358c:	6810      	ldr	r0, [r2, #0]
 801358e:	6018      	str	r0, [r3, #0]
 8013590:	8892      	ldrh	r2, [r2, #4]
 8013592:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013594:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013598:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	2205      	movs	r2, #5
 80135a0:	801a      	strh	r2, [r3, #0]
		return;
 80135a2:	e011      	b.n	80135c8 <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 80135a4:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80135a8:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	4a0f      	ldr	r2, [pc, #60]	; (80135ec <write_to_file+0x30c>)
 80135b0:	8811      	ldrh	r1, [r2, #0]
 80135b2:	7892      	ldrb	r2, [r2, #2]
 80135b4:	8019      	strh	r1, [r3, #0]
 80135b6:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 80135b8:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80135bc:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	2202      	movs	r2, #2
 80135c4:	801a      	strh	r2, [r3, #0]
}
 80135c6:	e7ff      	b.n	80135c8 <write_to_file+0x2e8>
 80135c8:	4618      	mov	r0, r3
 80135ca:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd90      	pop	{r4, r7, pc}
 80135d2:	bf00      	nop
 80135d4:	080325b4 	.word	0x080325b4
 80135d8:	080325c8 	.word	0x080325c8
 80135dc:	080325c0 	.word	0x080325c0
 80135e0:	080325d0 	.word	0x080325d0
 80135e4:	080325d8 	.word	0x080325d8
 80135e8:	20000504 	.word	0x20000504
 80135ec:	080325e0 	.word	0x080325e0

080135f0 <web_mkdir>:

int8_t web_mkdir(char * buf, char * base_path){
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b092      	sub	sp, #72	; 0x48
 80135f4:	af02      	add	r7, sp, #8
 80135f6:	6078      	str	r0, [r7, #4]
 80135f8:	6039      	str	r1, [r7, #0]

	char * dirname;
	char tmp[MAX_CONTENT_NAME_LEN];

	dirname = get_http_param_value((char *)buf, "dirname");
 80135fa:	4912      	ldr	r1, [pc, #72]	; (8013644 <web_mkdir+0x54>)
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f00b f86d 	bl	801e6dc <get_http_param_value>
 8013602:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (dirname != 0 || (strlen(dirname) < MAX_CONTENT_NAME_LEN - 5)) //TODO add dirname validation
 8013604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013606:	2b00      	cmp	r3, #0
 8013608:	d105      	bne.n	8013616 <web_mkdir+0x26>
 801360a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801360c:	f7fc fe48 	bl	80102a0 <strlen>
 8013610:	4603      	mov	r3, r0
 8013612:	2b2c      	cmp	r3, #44	; 0x2c
 8013614:	d810      	bhi.n	8013638 <web_mkdir+0x48>
		{
			snprintf(tmp, sizeof(tmp), "%s%s", base_path, dirname);
 8013616:	f107 0008 	add.w	r0, r7, #8
 801361a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801361c:	9300      	str	r3, [sp, #0]
 801361e:	683b      	ldr	r3, [r7, #0]
 8013620:	4a09      	ldr	r2, [pc, #36]	; (8013648 <web_mkdir+0x58>)
 8013622:	2132      	movs	r1, #50	; 0x32
 8013624:	f019 fee6 	bl	802d3f4 <sniprintf>
			return (spi_fs_mkdir(tmp));
 8013628:	f107 0308 	add.w	r3, r7, #8
 801362c:	4618      	mov	r0, r3
 801362e:	f017 fbd5 	bl	802addc <spi_fs_mkdir>
 8013632:	4603      	mov	r3, r0
 8013634:	b25b      	sxtb	r3, r3
 8013636:	e001      	b.n	801363c <web_mkdir+0x4c>
		}
	return -1;
 8013638:	f04f 33ff 	mov.w	r3, #4294967295
}
 801363c:	4618      	mov	r0, r3
 801363e:	3740      	adds	r7, #64	; 0x40
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}
 8013644:	080325e4 	.word	0x080325e4
 8013648:	080325ec 	.word	0x080325ec

0801364c <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 801364c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013650:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8013654:	af16      	add	r7, sp, #88	; 0x58
 8013656:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801365a:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 801365e:	6018      	str	r0, [r3, #0]
 8013660:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013664:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013668:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 801366a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801366e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8013672:	4a5d      	ldr	r2, [pc, #372]	; (80137e8 <read_all_parameters+0x19c>)
 8013674:	4618      	mov	r0, r3
 8013676:	4611      	mov	r1, r2
 8013678:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801367c:	461a      	mov	r2, r3
 801367e:	f01a fa12 	bl	802daa6 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 8013682:	4b5a      	ldr	r3, [pc, #360]	; (80137ec <read_all_parameters+0x1a0>)
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 801368a:	2200      	movs	r2, #0
 801368c:	4618      	mov	r0, r3
 801368e:	f00d fd61 	bl	8021154 <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 8013692:	4b57      	ldr	r3, [pc, #348]	; (80137f0 <read_all_parameters+0x1a4>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	f507 7111 	add.w	r1, r7, #580	; 0x244
 801369a:	2200      	movs	r2, #0
 801369c:	4618      	mov	r0, r3
 801369e:	f00d fd59 	bl	8021154 <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 80136a2:	4b54      	ldr	r3, [pc, #336]	; (80137f4 <read_all_parameters+0x1a8>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 80136aa:	2200      	movs	r2, #0
 80136ac:	4618      	mov	r0, r3
 80136ae:	f00d fd51 	bl	8021154 <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 80136b2:	4b51      	ldr	r3, [pc, #324]	; (80137f8 <read_all_parameters+0x1ac>)
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 80136ba:	2200      	movs	r2, #0
 80136bc:	4618      	mov	r0, r3
 80136be:	f00d fd49 	bl	8021154 <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 80136c2:	4b4e      	ldr	r3, [pc, #312]	; (80137fc <read_all_parameters+0x1b0>)
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 80136ca:	2200      	movs	r2, #0
 80136cc:	4618      	mov	r0, r3
 80136ce:	f00d fd41 	bl	8021154 <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 80136d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fc ff4e 	bl	8010578 <__aeabi_f2d>
 80136dc:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80136e0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fc ff47 	bl	8010578 <__aeabi_f2d>
 80136ea:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80136ee:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80136f2:	4618      	mov	r0, r3
 80136f4:	f7fc ff40 	bl	8010578 <__aeabi_f2d>
 80136f8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80136fc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8013700:	4618      	mov	r0, r3
 8013702:	f7fc ff39 	bl	8010578 <__aeabi_f2d>
 8013706:	e9c7 0106 	strd	r0, r1, [r7, #24]
 801370a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801370e:	4618      	mov	r0, r3
 8013710:	f7fc ff32 	bl	8010578 <__aeabi_f2d>
 8013714:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8013718:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801371c:	4618      	mov	r0, r3
 801371e:	f7fc ff2b 	bl	8010578 <__aeabi_f2d>
 8013722:	4682      	mov	sl, r0
 8013724:	468b      	mov	fp, r1
 8013726:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801372a:	4618      	mov	r0, r3
 801372c:	f7fc ff24 	bl	8010578 <__aeabi_f2d>
 8013730:	4680      	mov	r8, r0
 8013732:	4689      	mov	r9, r1
 8013734:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8013738:	60fb      	str	r3, [r7, #12]
 801373a:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 801373e:	60bb      	str	r3, [r7, #8]
 8013740:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8013744:	607b      	str	r3, [r7, #4]
 8013746:	f8d7 4264 	ldr.w	r4, [r7, #612]	; 0x264
 801374a:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 801374e:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8013752:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8013756:	f107 0644 	add.w	r6, r7, #68	; 0x44
 801375a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801375e:	f5a3 750d 	sub.w	r5, r3, #564	; 0x234
 8013762:	9214      	str	r2, [sp, #80]	; 0x50
 8013764:	9113      	str	r1, [sp, #76]	; 0x4c
 8013766:	9012      	str	r0, [sp, #72]	; 0x48
 8013768:	9411      	str	r4, [sp, #68]	; 0x44
 801376a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801376e:	3302      	adds	r3, #2
 8013770:	9310      	str	r3, [sp, #64]	; 0x40
 8013772:	6879      	ldr	r1, [r7, #4]
 8013774:	910f      	str	r1, [sp, #60]	; 0x3c
 8013776:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 801377a:	3384      	adds	r3, #132	; 0x84
 801377c:	930e      	str	r3, [sp, #56]	; 0x38
 801377e:	68b9      	ldr	r1, [r7, #8]
 8013780:	910d      	str	r1, [sp, #52]	; 0x34
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	930c      	str	r3, [sp, #48]	; 0x30
 8013786:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 801378a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801378e:	ed97 7b04 	vldr	d7, [r7, #16]
 8013792:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013796:	ed97 7b06 	vldr	d7, [r7, #24]
 801379a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801379e:	ed97 7b08 	vldr	d7, [r7, #32]
 80137a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137a6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80137aa:	ed8d 7b00 	vstr	d7, [sp]
 80137ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80137b2:	4631      	mov	r1, r6
 80137b4:	6828      	ldr	r0, [r5, #0]
 80137b6:	f019 fe51 	bl	802d45c <siprintf>
	*len = strlen(buf);
 80137ba:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80137be:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 80137c2:	6818      	ldr	r0, [r3, #0]
 80137c4:	f7fc fd6c 	bl	80102a0 <strlen>
 80137c8:	4603      	mov	r3, r0
 80137ca:	b29a      	uxth	r2, r3
 80137cc:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80137d0:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	801a      	strh	r2, [r3, #0]

	return 0 ;
 80137d8:	2300      	movs	r3, #0
}
 80137da:	4618      	mov	r0, r3
 80137dc:	f507 771d 	add.w	r7, r7, #628	; 0x274
 80137e0:	46bd      	mov	sp, r7
 80137e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137e6:	bf00      	nop
 80137e8:	080325f4 	.word	0x080325f4
 80137ec:	200004f4 	.word	0x200004f4
 80137f0:	200004f8 	.word	0x200004f8
 80137f4:	200004e8 	.word	0x200004e8
 80137f8:	200004f0 	.word	0x200004f0
 80137fc:	200004fc 	.word	0x200004fc

08013800 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 8013800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013802:	b0db      	sub	sp, #364	; 0x16c
 8013804:	af0e      	add	r7, sp, #56	; 0x38
 8013806:	6378      	str	r0, [r7, #52]	; 0x34
 8013808:	f507 7098 	add.w	r0, r7, #304	; 0x130
 801380c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8013810:	6001      	str	r1, [r0, #0]
 8013812:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8013816:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 801381a:	600a      	str	r2, [r1, #0]
 801381c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8013820:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8013824:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 8013826:	2300      	movs	r3, #0
 8013828:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 801382c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013830:	4618      	mov	r0, r3
 8013832:	f017 fd0d 	bl	802b250 <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 8013836:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801383a:	4618      	mov	r0, r3
 801383c:	f017 fd26 	bl	802b28c <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013840:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013844:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013846:	4618      	mov	r0, r3
 8013848:	f01a f925 	bl	802da96 <strcpy>
	strncat(path, filename, 20);
 801384c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013850:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013854:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013858:	2214      	movs	r2, #20
 801385a:	6819      	ldr	r1, [r3, #0]
 801385c:	f019 ff83 	bl	802d766 <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013860:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013864:	2241      	movs	r2, #65	; 0x41
 8013866:	2100      	movs	r1, #0
 8013868:	4618      	mov	r0, r3
 801386a:	f019 ff47 	bl	802d6fc <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 801386e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013872:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013876:	2340      	movs	r3, #64	; 0x40
 8013878:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801387c:	f017 f9b6 	bl	802abec <spi_fs_read_file_offset>
 8013880:	4603      	mov	r3, r0
 8013882:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 8013886:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 801388a:	2b40      	cmp	r3, #64	; 0x40
 801388c:	d110      	bne.n	80138b0 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 801388e:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013892:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013896:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801389a:	4618      	mov	r0, r3
 801389c:	f018 fbe0 	bl	802c060 <mbedtls_md5_update_ret>
				offset += readed_len;
 80138a0:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 80138a4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80138a8:	4413      	add	r3, r2
 80138aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80138ae:	e019      	b.n	80138e4 <calculate_md5_file+0xe4>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 80138b0:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 80138b4:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80138b8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80138bc:	4618      	mov	r0, r3
 80138be:	f018 fbcf 	bl	802c060 <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 80138c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80138c6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80138ca:	4611      	mov	r1, r2
 80138cc:	4618      	mov	r0, r3
 80138ce:	f018 fc3c 	bl	802c14a <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 80138d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80138d6:	4618      	mov	r0, r3
 80138d8:	f017 fcc7 	bl	802b26a <mbedtls_md5_free>
				md5sum[16] = '\0';
 80138dc:	2300      	movs	r3, #0
 80138de:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				break;
 80138e2:	e002      	b.n	80138ea <calculate_md5_file+0xea>
			}
		}
		osThreadYield();
 80138e4:	f00c fb3a 	bl	801ff5c <osThreadYield>
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 80138e8:	e7ba      	b.n	8013860 <calculate_md5_file+0x60>
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 80138ea:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80138ee:	469c      	mov	ip, r3
 80138f0:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80138f4:	469e      	mov	lr, r3
 80138f6:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80138fa:	461d      	mov	r5, r3
 80138fc:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8013900:	461e      	mov	r6, r3
 8013902:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8013906:	627b      	str	r3, [r7, #36]	; 0x24
 8013908:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 801390c:	623b      	str	r3, [r7, #32]
 801390e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8013912:	61fb      	str	r3, [r7, #28]
 8013914:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013918:	61bb      	str	r3, [r7, #24]
 801391a:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 801391e:	617b      	str	r3, [r7, #20]
 8013920:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8013924:	613b      	str	r3, [r7, #16]
 8013926:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 801392a:	60fb      	str	r3, [r7, #12]
 801392c:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8013930:	60bb      	str	r3, [r7, #8]
 8013932:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8013936:	607b      	str	r3, [r7, #4]
 8013938:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 801393c:	461c      	mov	r4, r3
 801393e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013942:	4619      	mov	r1, r3
 8013944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013948:	461a      	mov	r2, r3
 801394a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801394e:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8013952:	920d      	str	r2, [sp, #52]	; 0x34
 8013954:	910c      	str	r1, [sp, #48]	; 0x30
 8013956:	940b      	str	r4, [sp, #44]	; 0x2c
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	920a      	str	r2, [sp, #40]	; 0x28
 801395c:	68ba      	ldr	r2, [r7, #8]
 801395e:	9209      	str	r2, [sp, #36]	; 0x24
 8013960:	68fa      	ldr	r2, [r7, #12]
 8013962:	9208      	str	r2, [sp, #32]
 8013964:	693a      	ldr	r2, [r7, #16]
 8013966:	9207      	str	r2, [sp, #28]
 8013968:	697a      	ldr	r2, [r7, #20]
 801396a:	9206      	str	r2, [sp, #24]
 801396c:	69ba      	ldr	r2, [r7, #24]
 801396e:	9205      	str	r2, [sp, #20]
 8013970:	69fa      	ldr	r2, [r7, #28]
 8013972:	9204      	str	r2, [sp, #16]
 8013974:	6a3a      	ldr	r2, [r7, #32]
 8013976:	9203      	str	r2, [sp, #12]
 8013978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801397a:	9302      	str	r3, [sp, #8]
 801397c:	9601      	str	r6, [sp, #4]
 801397e:	9500      	str	r5, [sp, #0]
 8013980:	4673      	mov	r3, lr
 8013982:	4662      	mov	r2, ip
 8013984:	4908      	ldr	r1, [pc, #32]	; (80139a8 <calculate_md5_file+0x1a8>)
 8013986:	6800      	ldr	r0, [r0, #0]
 8013988:	f019 fd68 	bl	802d45c <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 801398c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	2220      	movs	r2, #32
 8013998:	801a      	strh	r2, [r3, #0]
	return 0;
 801399a:	2300      	movs	r3, #0
}
 801399c:	4618      	mov	r0, r3
 801399e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139a6:	bf00      	nop
 80139a8:	08032724 	.word	0x08032724

080139ac <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b092      	sub	sp, #72	; 0x48
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 80139b6:	f107 0308 	add.w	r3, r7, #8
 80139ba:	4a18      	ldr	r2, [pc, #96]	; (8013a1c <activate_firmware+0x70>)
 80139bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80139be:	c303      	stmia	r3!, {r0, r1}
 80139c0:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 80139c2:	f107 0308 	add.w	r3, r7, #8
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fc fc6a 	bl	80102a0 <strlen>
 80139cc:	4603      	mov	r3, r0
 80139ce:	461a      	mov	r2, r3
 80139d0:	f107 0308 	add.w	r3, r7, #8
 80139d4:	4413      	add	r3, r2
 80139d6:	4912      	ldr	r1, [pc, #72]	; (8013a20 <activate_firmware+0x74>)
 80139d8:	461a      	mov	r2, r3
 80139da:	460b      	mov	r3, r1
 80139dc:	cb03      	ldmia	r3!, {r0, r1}
 80139de:	6010      	str	r0, [r2, #0]
 80139e0:	6051      	str	r1, [r2, #4]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 80139e6:	f107 0308 	add.w	r3, r7, #8
 80139ea:	490e      	ldr	r1, [pc, #56]	; (8013a24 <activate_firmware+0x78>)
 80139ec:	4618      	mov	r0, r3
 80139ee:	f017 faf7 	bl	802afe0 <spi_fs_mv>
 80139f2:	6478      	str	r0, [r7, #68]	; 0x44

	if(err >= 0){
 80139f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	db0a      	blt.n	8013a10 <activate_firmware+0x64>
		strcpy(buf, "OK");
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4a0a      	ldr	r2, [pc, #40]	; (8013a28 <activate_firmware+0x7c>)
 80139fe:	8811      	ldrh	r1, [r2, #0]
 8013a00:	7892      	ldrb	r2, [r2, #2]
 8013a02:	8019      	strh	r1, [r3, #0]
 8013a04:	709a      	strb	r2, [r3, #2]
		* len = 2;
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	2202      	movs	r2, #2
 8013a0a:	801a      	strh	r2, [r3, #0]
		return 1;
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e000      	b.n	8013a12 <activate_firmware+0x66>
	}

 	return 0;
 8013a10:	2300      	movs	r3, #0
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3748      	adds	r7, #72	; 0x48
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	08032768 	.word	0x08032768
 8013a20:	08032774 	.word	0x08032774
 8013a24:	08032780 	.word	0x08032780
 8013a28:	08032790 	.word	0x08032790

08013a2c <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b086      	sub	sp, #24
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	607a      	str	r2, [r7, #4]
 8013a38:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 8013a42:	4937      	ldr	r1, [pc, #220]	; (8013b20 <http_post_cgi_processor+0xf4>)
 8013a44:	68f8      	ldr	r0, [r7, #12]
 8013a46:	f7fc fbcb 	bl	80101e0 <strcmp>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d106      	bne.n	8013a5e <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013a50:	2100      	movs	r1, #0
 8013a52:	68b8      	ldr	r0, [r7, #8]
 8013a54:	f7ff f9b6 	bl	8012dc4 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	75fb      	strb	r3, [r7, #23]
 8013a5c:	e05a      	b.n	8013b14 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013a5e:	4931      	ldr	r1, [pc, #196]	; (8013b24 <http_post_cgi_processor+0xf8>)
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f7fc fbbd 	bl	80101e0 <strcmp>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d106      	bne.n	8013a7a <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013a6c:	2102      	movs	r1, #2
 8013a6e:	68b8      	ldr	r0, [r7, #8]
 8013a70:	f7ff f9a8 	bl	8012dc4 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013a74:	2301      	movs	r3, #1
 8013a76:	75fb      	strb	r3, [r7, #23]
 8013a78:	e04c      	b.n	8013b14 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013a7a:	492b      	ldr	r1, [pc, #172]	; (8013b28 <http_post_cgi_processor+0xfc>)
 8013a7c:	68f8      	ldr	r0, [r7, #12]
 8013a7e:	f7fc fbaf 	bl	80101e0 <strcmp>
 8013a82:	4603      	mov	r3, r0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d10e      	bne.n	8013aa6 <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013a88:	4b28      	ldr	r3, [pc, #160]	; (8013b2c <http_post_cgi_processor+0x100>)
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	68b8      	ldr	r0, [r7, #8]
 8013a90:	f7ff fc26 	bl	80132e0 <write_to_file>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	da02      	bge.n	8013aa0 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	75fb      	strb	r3, [r7, #23]
 8013a9e:	e039      	b.n	8013b14 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	75fb      	strb	r3, [r7, #23]
 8013aa4:	e036      	b.n	8013b14 <http_post_cgi_processor+0xe8>
		}
	}else if (strcmp((const char *)uri_name, "web_mkdir.cgi") == 0){
 8013aa6:	4922      	ldr	r1, [pc, #136]	; (8013b30 <http_post_cgi_processor+0x104>)
 8013aa8:	68f8      	ldr	r0, [r7, #12]
 8013aaa:	f7fc fb99 	bl	80101e0 <strcmp>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d10c      	bne.n	8013ace <http_post_cgi_processor+0xa2>
		if( web_mkdir((char *)uri, HTTP_FS_DIR) >= 0){
 8013ab4:	491d      	ldr	r1, [pc, #116]	; (8013b2c <http_post_cgi_processor+0x100>)
 8013ab6:	68b8      	ldr	r0, [r7, #8]
 8013ab8:	f7ff fd9a 	bl	80135f0 <web_mkdir>
 8013abc:	4603      	mov	r3, r0
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	db02      	blt.n	8013ac8 <http_post_cgi_processor+0x9c>
			ret = HTTP_OK;
 8013ac2:	2301      	movs	r3, #1
 8013ac4:	75fb      	strb	r3, [r7, #23]
 8013ac6:	e025      	b.n	8013b14 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_RESET;
 8013ac8:	2302      	movs	r3, #2
 8013aca:	75fb      	strb	r3, [r7, #23]
 8013acc:	e022      	b.n	8013b14 <http_post_cgi_processor+0xe8>
		}

	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 8013ace:	4919      	ldr	r1, [pc, #100]	; (8013b34 <http_post_cgi_processor+0x108>)
 8013ad0:	68f8      	ldr	r0, [r7, #12]
 8013ad2:	f7fc fb85 	bl	80101e0 <strcmp>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d106      	bne.n	8013aea <http_post_cgi_processor+0xbe>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 8013adc:	2104      	movs	r1, #4
 8013ade:	68b8      	ldr	r0, [r7, #8]
 8013ae0:	f7ff f970 	bl	8012dc4 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013ae4:	2301      	movs	r3, #1
 8013ae6:	75fb      	strb	r3, [r7, #23]
 8013ae8:	e014      	b.n	8013b14 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 8013aea:	4913      	ldr	r1, [pc, #76]	; (8013b38 <http_post_cgi_processor+0x10c>)
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f7fc fb77 	bl	80101e0 <strcmp>
 8013af2:	4603      	mov	r3, r0
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d10d      	bne.n	8013b14 <http_post_cgi_processor+0xe8>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013af8:	4b10      	ldr	r3, [pc, #64]	; (8013b3c <http_post_cgi_processor+0x110>)
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	6839      	ldr	r1, [r7, #0]
 8013afe:	68b8      	ldr	r0, [r7, #8]
 8013b00:	f7ff fbee 	bl	80132e0 <write_to_file>
 8013b04:	4603      	mov	r3, r0
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	da02      	bge.n	8013b10 <http_post_cgi_processor+0xe4>
			ret = HTTP_FAILED;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	75fb      	strb	r3, [r7, #23]
 8013b0e:	e001      	b.n	8013b14 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013b10:	2301      	movs	r3, #1
 8013b12:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8013b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b16:	4618      	mov	r0, r3
 8013b18:	3718      	adds	r7, #24
 8013b1a:	46bd      	mov	sp, r7
 8013b1c:	bd80      	pop	{r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	08032794 	.word	0x08032794
 8013b24:	080327a8 	.word	0x080327a8
 8013b28:	080327bc 	.word	0x080327bc
 8013b2c:	080327cc 	.word	0x080327cc
 8013b30:	080327d4 	.word	0x080327d4
 8013b34:	080327e4 	.word	0x080327e4
 8013b38:	080327fc 	.word	0x080327fc
 8013b3c:	08032768 	.word	0x08032768

08013b40 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b086      	sub	sp, #24
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	60f8      	str	r0, [r7, #12]
 8013b48:	60b9      	str	r1, [r7, #8]
 8013b4a:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8013b50:	494f      	ldr	r1, [pc, #316]	; (8013c90 <http_get_cgi_processor+0x150>)
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f7fc fb44 	bl	80101e0 <strcmp>
 8013b58:	4603      	mov	r3, r0
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d107      	bne.n	8013b6e <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	2100      	movs	r1, #0
 8013b62:	68b8      	ldr	r0, [r7, #8]
 8013b64:	f7ff fab0 	bl	80130c8 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013b68:	2301      	movs	r3, #1
 8013b6a:	75fb      	strb	r3, [r7, #23]
 8013b6c:	e08b      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013b6e:	4949      	ldr	r1, [pc, #292]	; (8013c94 <http_get_cgi_processor+0x154>)
 8013b70:	68f8      	ldr	r0, [r7, #12]
 8013b72:	f7fc fb35 	bl	80101e0 <strcmp>
 8013b76:	4603      	mov	r3, r0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d10b      	bne.n	8013b94 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	4946      	ldr	r1, [pc, #280]	; (8013c98 <http_get_cgi_processor+0x158>)
 8013b80:	461a      	mov	r2, r3
 8013b82:	460b      	mov	r3, r1
 8013b84:	881b      	ldrh	r3, [r3, #0]
 8013b86:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2202      	movs	r2, #2
 8013b90:	801a      	strh	r2, [r3, #0]
 8013b92:	e078      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013b94:	4941      	ldr	r1, [pc, #260]	; (8013c9c <http_get_cgi_processor+0x15c>)
 8013b96:	68f8      	ldr	r0, [r7, #12]
 8013b98:	f7fc fb22 	bl	80101e0 <strcmp>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d107      	bne.n	8013bb2 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	2103      	movs	r1, #3
 8013ba6:	68b8      	ldr	r0, [r7, #8]
 8013ba8:	f7ff fa8e 	bl	80130c8 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013bac:	2301      	movs	r3, #1
 8013bae:	75fb      	strb	r3, [r7, #23]
 8013bb0:	e069      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013bb2:	493b      	ldr	r1, [pc, #236]	; (8013ca0 <http_get_cgi_processor+0x160>)
 8013bb4:	68f8      	ldr	r0, [r7, #12]
 8013bb6:	f7fc fb13 	bl	80101e0 <strcmp>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d107      	bne.n	8013bd0 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	2104      	movs	r1, #4
 8013bc4:	68b8      	ldr	r0, [r7, #8]
 8013bc6:	f7ff fa7f 	bl	80130c8 <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013bca:	2301      	movs	r3, #1
 8013bcc:	75fb      	strb	r3, [r7, #23]
 8013bce:	e05a      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013bd0:	4934      	ldr	r1, [pc, #208]	; (8013ca4 <http_get_cgi_processor+0x164>)
 8013bd2:	68f8      	ldr	r0, [r7, #12]
 8013bd4:	f7fc fb04 	bl	80101e0 <strcmp>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d106      	bne.n	8013bec <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013bde:	6879      	ldr	r1, [r7, #4]
 8013be0:	68b8      	ldr	r0, [r7, #8]
 8013be2:	f7ff fd33 	bl	801364c <read_all_parameters>
		ret = HTTP_OK;
 8013be6:	2301      	movs	r3, #1
 8013be8:	75fb      	strb	r3, [r7, #23]
 8013bea:	e04c      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013bec:	492e      	ldr	r1, [pc, #184]	; (8013ca8 <http_get_cgi_processor+0x168>)
 8013bee:	68f8      	ldr	r0, [r7, #12]
 8013bf0:	f7fc faf6 	bl	80101e0 <strcmp>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d111      	bne.n	8013c1e <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	68ba      	ldr	r2, [r7, #8]
 8013bfe:	492b      	ldr	r1, [pc, #172]	; (8013cac <http_get_cgi_processor+0x16c>)
 8013c00:	482b      	ldr	r0, [pc, #172]	; (8013cb0 <http_get_cgi_processor+0x170>)
 8013c02:	f7ff fdfd 	bl	8013800 <calculate_md5_file>
 8013c06:	4603      	mov	r3, r0
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d102      	bne.n	8013c12 <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	75fb      	strb	r3, [r7, #23]
 8013c10:	e039      	b.n	8013c86 <http_get_cgi_processor+0x146>
		}else{
			* len = 0;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	2200      	movs	r2, #0
 8013c16:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	75fb      	strb	r3, [r7, #23]
 8013c1c:	e033      	b.n	8013c86 <http_get_cgi_processor+0x146>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013c1e:	4925      	ldr	r1, [pc, #148]	; (8013cb4 <http_get_cgi_processor+0x174>)
 8013c20:	68f8      	ldr	r0, [r7, #12]
 8013c22:	f7fc fadd 	bl	80101e0 <strcmp>
 8013c26:	4603      	mov	r3, r0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d106      	bne.n	8013c3a <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013c2c:	6879      	ldr	r1, [r7, #4]
 8013c2e:	68b8      	ldr	r0, [r7, #8]
 8013c30:	f7ff febc 	bl	80139ac <activate_firmware>
 8013c34:	4603      	mov	r3, r0
 8013c36:	75fb      	strb	r3, [r7, #23]
 8013c38:	e025      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "erace_web_interface.cgi") == 0){
 8013c3a:	491f      	ldr	r1, [pc, #124]	; (8013cb8 <http_get_cgi_processor+0x178>)
 8013c3c:	68f8      	ldr	r0, [r7, #12]
 8013c3e:	f7fc facf 	bl	80101e0 <strcmp>
 8013c42:	4603      	mov	r3, r0
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d105      	bne.n	8013c54 <http_get_cgi_processor+0x114>
		spi_fs_remove_recurcuve_in("/web");
 8013c48:	481c      	ldr	r0, [pc, #112]	; (8013cbc <http_get_cgi_processor+0x17c>)
 8013c4a:	f017 f9a9 	bl	802afa0 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013c4e:	2301      	movs	r3, #1
 8013c50:	75fb      	strb	r3, [r7, #23]
 8013c52:	e018      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013c54:	491a      	ldr	r1, [pc, #104]	; (8013cc0 <http_get_cgi_processor+0x180>)
 8013c56:	68f8      	ldr	r0, [r7, #12]
 8013c58:	f7fc fac2 	bl	80101e0 <strcmp>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d105      	bne.n	8013c6e <http_get_cgi_processor+0x12e>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013c62:	4818      	ldr	r0, [pc, #96]	; (8013cc4 <http_get_cgi_processor+0x184>)
 8013c64:	f017 f8d4 	bl	802ae10 <spi_fs_remove>
		ret = HTTP_OK;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	75fb      	strb	r3, [r7, #23]
 8013c6c:	e00b      	b.n	8013c86 <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013c6e:	4916      	ldr	r1, [pc, #88]	; (8013cc8 <http_get_cgi_processor+0x188>)
 8013c70:	68f8      	ldr	r0, [r7, #12]
 8013c72:	f7fc fab5 	bl	80101e0 <strcmp>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d104      	bne.n	8013c86 <http_get_cgi_processor+0x146>
		spi_fs_remove_recurcuve_in("/");
 8013c7c:	4813      	ldr	r0, [pc, #76]	; (8013ccc <http_get_cgi_processor+0x18c>)
 8013c7e:	f017 f98f 	bl	802afa0 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013c82:	2301      	movs	r3, #1
 8013c84:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	3718      	adds	r7, #24
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}
 8013c90:	08032810 	.word	0x08032810
 8013c94:	08032824 	.word	0x08032824
 8013c98:	08032830 	.word	0x08032830
 8013c9c:	08032834 	.word	0x08032834
 8013ca0:	08032840 	.word	0x08032840
 8013ca4:	08032854 	.word	0x08032854
 8013ca8:	08032860 	.word	0x08032860
 8013cac:	08032774 	.word	0x08032774
 8013cb0:	08032768 	.word	0x08032768
 8013cb4:	08032878 	.word	0x08032878
 8013cb8:	08032890 	.word	0x08032890
 8013cbc:	080328a8 	.word	0x080328a8
 8013cc0:	080328b0 	.word	0x080328b0
 8013cc4:	080328c4 	.word	0x080328c4
 8013cc8:	080328d8 	.word	0x080328d8
 8013ccc:	080328ec 	.word	0x080328ec

08013cd0 <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8013cd0:	b480      	push	{r7}
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	bf00      	nop
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr
	...

08013ce0 <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8013ce0:	b480      	push	{r7}
 8013ce2:	b083      	sub	sp, #12
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d002      	beq.n	8013cf6 <init_mqtt_call_mutex+0x16>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	4a07      	ldr	r2, [pc, #28]	; (8013d10 <init_mqtt_call_mutex+0x30>)
 8013cf4:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d002      	beq.n	8013d02 <init_mqtt_call_mutex+0x22>
 8013cfc:	683b      	ldr	r3, [r7, #0]
 8013cfe:	4a05      	ldr	r2, [pc, #20]	; (8013d14 <init_mqtt_call_mutex+0x34>)
 8013d00:	6013      	str	r3, [r2, #0]
}
 8013d02:	bf00      	nop
 8013d04:	370c      	adds	r7, #12
 8013d06:	46bd      	mov	sp, r7
 8013d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0c:	4770      	bx	lr
 8013d0e:	bf00      	nop
 8013d10:	2000005c 	.word	0x2000005c
 8013d14:	20000060 	.word	0x20000060

08013d18 <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8013d18:	b5b0      	push	{r4, r5, r7, lr}
 8013d1a:	b088      	sub	sp, #32
 8013d1c:	af04      	add	r7, sp, #16
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
 8013d24:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 8013d26:	4a5e      	ldr	r2, [pc, #376]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8013d2c:	4a5d      	ldr	r2, [pc, #372]	; (8013ea4 <mqtt_client_init+0x18c>)
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8013d32:	4a5d      	ldr	r2, [pc, #372]	; (8013ea8 <mqtt_client_init+0x190>)
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 8013d38:	4a5c      	ldr	r2, [pc, #368]	; (8013eac <mqtt_client_init+0x194>)
 8013d3a:	6a3b      	ldr	r3, [r7, #32]
 8013d3c:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 8013d3e:	4a5c      	ldr	r2, [pc, #368]	; (8013eb0 <mqtt_client_init+0x198>)
 8013d40:	887b      	ldrh	r3, [r7, #2]
 8013d42:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8013d44:	4a5b      	ldr	r2, [pc, #364]	; (8013eb4 <mqtt_client_init+0x19c>)
 8013d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013d48:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 8013d4a:	4b55      	ldr	r3, [pc, #340]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	78db      	ldrb	r3, [r3, #3]
 8013d50:	461c      	mov	r4, r3
 8013d52:	4b53      	ldr	r3, [pc, #332]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	791b      	ldrb	r3, [r3, #4]
 8013d58:	461d      	mov	r5, r3
 8013d5a:	4b51      	ldr	r3, [pc, #324]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	795b      	ldrb	r3, [r3, #5]
 8013d60:	461a      	mov	r2, r3
 8013d62:	4b4f      	ldr	r3, [pc, #316]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	799b      	ldrb	r3, [r3, #6]
 8013d68:	4619      	mov	r1, r3
 8013d6a:	4b4d      	ldr	r3, [pc, #308]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	79db      	ldrb	r3, [r3, #7]
 8013d70:	4618      	mov	r0, r3
 8013d72:	4b4b      	ldr	r3, [pc, #300]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	7a1b      	ldrb	r3, [r3, #8]
 8013d78:	9303      	str	r3, [sp, #12]
 8013d7a:	9002      	str	r0, [sp, #8]
 8013d7c:	9101      	str	r1, [sp, #4]
 8013d7e:	9200      	str	r2, [sp, #0]
 8013d80:	462b      	mov	r3, r5
 8013d82:	4622      	mov	r2, r4
 8013d84:	494c      	ldr	r1, [pc, #304]	; (8013eb8 <mqtt_client_init+0x1a0>)
 8013d86:	484d      	ldr	r0, [pc, #308]	; (8013ebc <mqtt_client_init+0x1a4>)
 8013d88:	f019 fb68 	bl	802d45c <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 8013d8c:	484b      	ldr	r0, [pc, #300]	; (8013ebc <mqtt_client_init+0x1a4>)
 8013d8e:	f000 fa6f 	bl	8014270 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 8013d92:	4b43      	ldr	r3, [pc, #268]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	7a5b      	ldrb	r3, [r3, #9]
 8013d98:	4619      	mov	r1, r3
 8013d9a:	4b41      	ldr	r3, [pc, #260]	; (8013ea0 <mqtt_client_init+0x188>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	7a9b      	ldrb	r3, [r3, #10]
 8013da0:	4618      	mov	r0, r3
 8013da2:	4b3f      	ldr	r3, [pc, #252]	; (8013ea0 <mqtt_client_init+0x188>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	7adb      	ldrb	r3, [r3, #11]
 8013da8:	461a      	mov	r2, r3
 8013daa:	4b3d      	ldr	r3, [pc, #244]	; (8013ea0 <mqtt_client_init+0x188>)
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	7b1b      	ldrb	r3, [r3, #12]
 8013db0:	9301      	str	r3, [sp, #4]
 8013db2:	9200      	str	r2, [sp, #0]
 8013db4:	4603      	mov	r3, r0
 8013db6:	460a      	mov	r2, r1
 8013db8:	4941      	ldr	r1, [pc, #260]	; (8013ec0 <mqtt_client_init+0x1a8>)
 8013dba:	4842      	ldr	r0, [pc, #264]	; (8013ec4 <mqtt_client_init+0x1ac>)
 8013dbc:	f019 fb4e 	bl	802d45c <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 8013dc0:	4840      	ldr	r0, [pc, #256]	; (8013ec4 <mqtt_client_init+0x1ac>)
 8013dc2:	f000 fa77 	bl	80142b4 <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 8013dc6:	4b37      	ldr	r3, [pc, #220]	; (8013ea4 <mqtt_client_init+0x18c>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	3302      	adds	r3, #2
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f008 fda7 	bl	801c920 <isValidIPv4>
 8013dd2:	4603      	mov	r3, r0
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00c      	beq.n	8013df2 <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 8013dd8:	4b32      	ldr	r3, [pc, #200]	; (8013ea4 <mqtt_client_init+0x18c>)
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	1c98      	adds	r0, r3, #2
 8013dde:	4b3a      	ldr	r3, [pc, #232]	; (8013ec8 <mqtt_client_init+0x1b0>)
 8013de0:	9301      	str	r3, [sp, #4]
 8013de2:	4b3a      	ldr	r3, [pc, #232]	; (8013ecc <mqtt_client_init+0x1b4>)
 8013de4:	9300      	str	r3, [sp, #0]
 8013de6:	4b3a      	ldr	r3, [pc, #232]	; (8013ed0 <mqtt_client_init+0x1b8>)
 8013de8:	4a3a      	ldr	r2, [pc, #232]	; (8013ed4 <mqtt_client_init+0x1bc>)
 8013dea:	493b      	ldr	r1, [pc, #236]	; (8013ed8 <mqtt_client_init+0x1c0>)
 8013dec:	f019 fb56 	bl	802d49c <siscanf>
 8013df0:	e00d      	b.n	8013e0e <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 8013df2:	4b2c      	ldr	r3, [pc, #176]	; (8013ea4 <mqtt_client_init+0x18c>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	3302      	adds	r3, #2
 8013df8:	4936      	ldr	r1, [pc, #216]	; (8013ed4 <mqtt_client_init+0x1bc>)
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f008 fd60 	bl	801c8c0 <dns_service_resolve_name>
 8013e00:	4603      	mov	r3, r0
 8013e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e06:	d102      	bne.n	8013e0e <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 8013e08:	f04f 33ff 	mov.w	r3, #4294967295
 8013e0c:	e043      	b.n	8013e96 <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 8013e0e:	4b33      	ldr	r3, [pc, #204]	; (8013edc <mqtt_client_init+0x1c4>)
 8013e10:	2200      	movs	r2, #0
 8013e12:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 8013e14:	4b31      	ldr	r3, [pc, #196]	; (8013edc <mqtt_client_init+0x1c4>)
 8013e16:	2203      	movs	r2, #3
 8013e18:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 8013e1a:	4b30      	ldr	r3, [pc, #192]	; (8013edc <mqtt_client_init+0x1c4>)
 8013e1c:	4a27      	ldr	r2, [pc, #156]	; (8013ebc <mqtt_client_init+0x1a4>)
 8013e1e:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8013e20:	4b2e      	ldr	r3, [pc, #184]	; (8013edc <mqtt_client_init+0x1c4>)
 8013e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8013e26:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 8013e28:	4b2c      	ldr	r3, [pc, #176]	; (8013edc <mqtt_client_init+0x1c4>)
 8013e2a:	2201      	movs	r2, #1
 8013e2c:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 8013e2e:	4b1d      	ldr	r3, [pc, #116]	; (8013ea4 <mqtt_client_init+0x18c>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	3384      	adds	r3, #132	; 0x84
 8013e34:	4a29      	ldr	r2, [pc, #164]	; (8013edc <mqtt_client_init+0x1c4>)
 8013e36:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 8013e38:	4b1a      	ldr	r3, [pc, #104]	; (8013ea4 <mqtt_client_init+0x18c>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	33a5      	adds	r3, #165	; 0xa5
 8013e3e:	4a27      	ldr	r2, [pc, #156]	; (8013edc <mqtt_client_init+0x1c4>)
 8013e40:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 8013e42:	4b18      	ldr	r3, [pc, #96]	; (8013ea4 <mqtt_client_init+0x18c>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 8013e4a:	4b25      	ldr	r3, [pc, #148]	; (8013ee0 <mqtt_client_init+0x1c8>)
 8013e4c:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 8013e4e:	4b25      	ldr	r3, [pc, #148]	; (8013ee4 <mqtt_client_init+0x1cc>)
 8013e50:	2200      	movs	r2, #0
 8013e52:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8013e54:	4b23      	ldr	r3, [pc, #140]	; (8013ee4 <mqtt_client_init+0x1cc>)
 8013e56:	2200      	movs	r2, #0
 8013e58:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 8013e5a:	4b22      	ldr	r3, [pc, #136]	; (8013ee4 <mqtt_client_init+0x1cc>)
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 8013e60:	4b20      	ldr	r3, [pc, #128]	; (8013ee4 <mqtt_client_init+0x1cc>)
 8013e62:	2200      	movs	r2, #0
 8013e64:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 8013e66:	2105      	movs	r1, #5
 8013e68:	481f      	ldr	r0, [pc, #124]	; (8013ee8 <mqtt_client_init+0x1d0>)
 8013e6a:	f009 faf3 	bl	801d454 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 8013e6e:	4b0e      	ldr	r3, [pc, #56]	; (8013ea8 <mqtt_client_init+0x190>)
 8013e70:	681a      	ldr	r2, [r3, #0]
 8013e72:	4b0f      	ldr	r3, [pc, #60]	; (8013eb0 <mqtt_client_init+0x198>)
 8013e74:	881b      	ldrh	r3, [r3, #0]
 8013e76:	4618      	mov	r0, r3
 8013e78:	4b0c      	ldr	r3, [pc, #48]	; (8013eac <mqtt_client_init+0x194>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	490d      	ldr	r1, [pc, #52]	; (8013eb4 <mqtt_client_init+0x19c>)
 8013e7e:	8809      	ldrh	r1, [r1, #0]
 8013e80:	9102      	str	r1, [sp, #8]
 8013e82:	9301      	str	r3, [sp, #4]
 8013e84:	9000      	str	r0, [sp, #0]
 8013e86:	4613      	mov	r3, r2
 8013e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e8c:	4916      	ldr	r1, [pc, #88]	; (8013ee8 <mqtt_client_init+0x1d0>)
 8013e8e:	4817      	ldr	r0, [pc, #92]	; (8013eec <mqtt_client_init+0x1d4>)
 8013e90:	f008 fe30 	bl	801caf4 <MQTTClientInit>

	return 0;
 8013e94:	2300      	movs	r3, #0
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3710      	adds	r7, #16
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bdb0      	pop	{r4, r5, r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	2000050c 	.word	0x2000050c
 8013ea4:	20000508 	.word	0x20000508
 8013ea8:	20000538 	.word	0x20000538
 8013eac:	20000534 	.word	0x20000534
 8013eb0:	20000816 	.word	0x20000816
 8013eb4:	20000814 	.word	0x20000814
 8013eb8:	080328f0 	.word	0x080328f0
 8013ebc:	20000510 	.word	0x20000510
 8013ec0:	0803290c 	.word	0x0803290c
 8013ec4:	20000520 	.word	0x20000520
 8013ec8:	2000081b 	.word	0x2000081b
 8013ecc:	2000081a 	.word	0x2000081a
 8013ed0:	20000819 	.word	0x20000819
 8013ed4:	20000818 	.word	0x20000818
 8013ed8:	08032918 	.word	0x08032918
 8013edc:	20000004 	.word	0x20000004
 8013ee0:	2000081c 	.word	0x2000081c
 8013ee4:	2000088c 	.word	0x2000088c
 8013ee8:	20000820 	.word	0x20000820
 8013eec:	20000830 	.word	0x20000830

08013ef0 <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 8013ef6:	4b1f      	ldr	r3, [pc, #124]	; (8013f74 <mqtt_client_connect+0x84>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 8013efc:	4b1e      	ldr	r3, [pc, #120]	; (8013f78 <mqtt_client_connect+0x88>)
 8013efe:	881b      	ldrh	r3, [r3, #0]
 8013f00:	461a      	mov	r2, r3
 8013f02:	491e      	ldr	r1, [pc, #120]	; (8013f7c <mqtt_client_connect+0x8c>)
 8013f04:	481e      	ldr	r0, [pc, #120]	; (8013f80 <mqtt_client_connect+0x90>)
 8013f06:	f009 fb22 	bl	801d54e <ConnectNetwork>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8013f0e:	4b1d      	ldr	r3, [pc, #116]	; (8013f84 <mqtt_client_connect+0x94>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	4798      	blx	r3
	if (result != 1) {
 8013f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d010      	beq.n	8013f3e <mqtt_client_connect+0x4e>
		set_mutex();
 8013f1c:	4b15      	ldr	r3, [pc, #84]	; (8013f74 <mqtt_client_connect+0x84>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 8013f22:	4b17      	ldr	r3, [pc, #92]	; (8013f80 <mqtt_client_connect+0x90>)
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	b2db      	uxtb	r3, r3
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f004 ff29 	bl	8018d80 <close>
		release_mutex();
 8013f2e:	4b15      	ldr	r3, [pc, #84]	; (8013f84 <mqtt_client_connect+0x94>)
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8013f34:	88fb      	ldrh	r3, [r7, #6]
 8013f36:	3b0a      	subs	r3, #10
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	b21b      	sxth	r3, r3
 8013f3c:	e016      	b.n	8013f6c <mqtt_client_connect+0x7c>
	}
	set_mutex();
 8013f3e:	4b0d      	ldr	r3, [pc, #52]	; (8013f74 <mqtt_client_connect+0x84>)
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8013f44:	4910      	ldr	r1, [pc, #64]	; (8013f88 <mqtt_client_connect+0x98>)
 8013f46:	4811      	ldr	r0, [pc, #68]	; (8013f8c <mqtt_client_connect+0x9c>)
 8013f48:	f009 f8da 	bl	801d100 <MQTTConnect>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8013f50:	4b0c      	ldr	r3, [pc, #48]	; (8013f84 <mqtt_client_connect+0x94>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 8013f56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d004      	beq.n	8013f68 <mqtt_client_connect+0x78>
 8013f5e:	88fb      	ldrh	r3, [r7, #6]
 8013f60:	3b14      	subs	r3, #20
 8013f62:	b29b      	uxth	r3, r3
 8013f64:	b21b      	sxth	r3, r3
 8013f66:	e001      	b.n	8013f6c <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 8013f68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3708      	adds	r7, #8
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	2000005c 	.word	0x2000005c
 8013f78:	2000081c 	.word	0x2000081c
 8013f7c:	20000818 	.word	0x20000818
 8013f80:	20000820 	.word	0x20000820
 8013f84:	20000060 	.word	0x20000060
 8013f88:	20000004 	.word	0x20000004
 8013f8c:	20000830 	.word	0x20000830

08013f90 <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b082      	sub	sp, #8
 8013f94:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013f96:	2280      	movs	r2, #128	; 0x80
 8013f98:	2100      	movs	r1, #0
 8013f9a:	4897      	ldr	r0, [pc, #604]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013f9c:	f019 fbae 	bl	802d6fc <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	2103      	movs	r1, #3
 8013fa4:	4894      	ldr	r0, [pc, #592]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013fa6:	f000 f9a5 	bl	80142f4 <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 8013faa:	2200      	movs	r2, #0
 8013fac:	2103      	movs	r1, #3
 8013fae:	4893      	ldr	r0, [pc, #588]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013fb0:	f000 fa52 	bl	8014458 <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8013fb4:	4891      	ldr	r0, [pc, #580]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013fb6:	f7fc f973 	bl	80102a0 <strlen>
 8013fba:	4603      	mov	r3, r0
 8013fbc:	4a90      	ldr	r2, [pc, #576]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013fbe:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8013fc0:	4b8f      	ldr	r3, [pc, #572]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013fc2:	4a8e      	ldr	r2, [pc, #568]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8013fc4:	609a      	str	r2, [r3, #8]
		set_mutex();
 8013fc6:	4b8f      	ldr	r3, [pc, #572]	; (8014204 <mqtt_client_reg_dev_on_home_assist+0x274>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8013fcc:	4a8c      	ldr	r2, [pc, #560]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013fce:	498a      	ldr	r1, [pc, #552]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8013fd0:	488d      	ldr	r0, [pc, #564]	; (8014208 <mqtt_client_reg_dev_on_home_assist+0x278>)
 8013fd2:	f009 f91b 	bl	801d20c <MQTTPublish>
 8013fd6:	4603      	mov	r3, r0
 8013fd8:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8013fda:	4b8c      	ldr	r3, [pc, #560]	; (801420c <mqtt_client_reg_dev_on_home_assist+0x27c>)
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8013fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d002      	beq.n	8013fee <mqtt_client_reg_dev_on_home_assist+0x5e>
 8013fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fec:	e100      	b.n	80141f0 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 8013fee:	4b84      	ldr	r3, [pc, #528]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013ff0:	889b      	ldrh	r3, [r3, #4]
 8013ff2:	3301      	adds	r3, #1
 8013ff4:	b29a      	uxth	r2, r3
 8013ff6:	4b82      	ldr	r3, [pc, #520]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8013ff8:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8013ffa:	2280      	movs	r2, #128	; 0x80
 8013ffc:	2100      	movs	r1, #0
 8013ffe:	487e      	ldr	r0, [pc, #504]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014000:	f019 fb7c 	bl	802d6fc <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 8014004:	2200      	movs	r2, #0
 8014006:	2105      	movs	r1, #5
 8014008:	487b      	ldr	r0, [pc, #492]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 801400a:	f000 f973 	bl	80142f4 <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 801400e:	2200      	movs	r2, #0
 8014010:	2105      	movs	r1, #5
 8014012:	487a      	ldr	r0, [pc, #488]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014014:	f000 fa20 	bl	8014458 <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8014018:	4878      	ldr	r0, [pc, #480]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 801401a:	f7fc f941 	bl	80102a0 <strlen>
 801401e:	4603      	mov	r3, r0
 8014020:	4a77      	ldr	r2, [pc, #476]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014022:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8014024:	4b76      	ldr	r3, [pc, #472]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014026:	4a75      	ldr	r2, [pc, #468]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014028:	609a      	str	r2, [r3, #8]
		set_mutex();
 801402a:	4b76      	ldr	r3, [pc, #472]	; (8014204 <mqtt_client_reg_dev_on_home_assist+0x274>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014030:	4a73      	ldr	r2, [pc, #460]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014032:	4971      	ldr	r1, [pc, #452]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014034:	4874      	ldr	r0, [pc, #464]	; (8014208 <mqtt_client_reg_dev_on_home_assist+0x278>)
 8014036:	f009 f8e9 	bl	801d20c <MQTTPublish>
 801403a:	4603      	mov	r3, r0
 801403c:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801403e:	4b73      	ldr	r3, [pc, #460]	; (801420c <mqtt_client_reg_dev_on_home_assist+0x27c>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d002      	beq.n	8014052 <mqtt_client_reg_dev_on_home_assist+0xc2>
 801404c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014050:	e0ce      	b.n	80141f0 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 8014052:	4b6b      	ldr	r3, [pc, #428]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014054:	889b      	ldrh	r3, [r3, #4]
 8014056:	3301      	adds	r3, #1
 8014058:	b29a      	uxth	r2, r3
 801405a:	4b69      	ldr	r3, [pc, #420]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801405c:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801405e:	2280      	movs	r2, #128	; 0x80
 8014060:	2100      	movs	r1, #0
 8014062:	4865      	ldr	r0, [pc, #404]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014064:	f019 fb4a 	bl	802d6fc <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 8014068:	2200      	movs	r2, #0
 801406a:	2104      	movs	r1, #4
 801406c:	4862      	ldr	r0, [pc, #392]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 801406e:	f000 f941 	bl	80142f4 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 8014072:	2200      	movs	r2, #0
 8014074:	2104      	movs	r1, #4
 8014076:	4861      	ldr	r0, [pc, #388]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014078:	f000 f9ee 	bl	8014458 <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 801407c:	485f      	ldr	r0, [pc, #380]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 801407e:	f7fc f90f 	bl	80102a0 <strlen>
 8014082:	4603      	mov	r3, r0
 8014084:	4a5e      	ldr	r2, [pc, #376]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014086:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8014088:	4b5d      	ldr	r3, [pc, #372]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801408a:	4a5c      	ldr	r2, [pc, #368]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 801408c:	609a      	str	r2, [r3, #8]
		set_mutex();
 801408e:	4b5d      	ldr	r3, [pc, #372]	; (8014204 <mqtt_client_reg_dev_on_home_assist+0x274>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014094:	4a5a      	ldr	r2, [pc, #360]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014096:	4958      	ldr	r1, [pc, #352]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014098:	485b      	ldr	r0, [pc, #364]	; (8014208 <mqtt_client_reg_dev_on_home_assist+0x278>)
 801409a:	f009 f8b7 	bl	801d20c <MQTTPublish>
 801409e:	4603      	mov	r3, r0
 80140a0:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80140a2:	4b5a      	ldr	r3, [pc, #360]	; (801420c <mqtt_client_reg_dev_on_home_assist+0x27c>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80140a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d002      	beq.n	80140b6 <mqtt_client_reg_dev_on_home_assist+0x126>
 80140b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140b4:	e09c      	b.n	80141f0 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 80140b6:	4b52      	ldr	r3, [pc, #328]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140b8:	889b      	ldrh	r3, [r3, #4]
 80140ba:	3301      	adds	r3, #1
 80140bc:	b29a      	uxth	r2, r3
 80140be:	4b50      	ldr	r3, [pc, #320]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140c0:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG APPARENT POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80140c2:	2280      	movs	r2, #128	; 0x80
 80140c4:	2100      	movs	r1, #0
 80140c6:	484c      	ldr	r0, [pc, #304]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 80140c8:	f019 fb18 	bl	802d6fc <memset>
		get_config_topik_string(buf_topik, APPARENT_POWER_SENSOR_TOPIK, 0);
 80140cc:	2200      	movs	r2, #0
 80140ce:	2108      	movs	r1, #8
 80140d0:	4849      	ldr	r0, [pc, #292]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 80140d2:	f000 f90f 	bl	80142f4 <get_config_topik_string>
		get_config_payload_string(buf_payload, APPARENT_POWER_SENSOR_PAYLOAD, 0);
 80140d6:	2200      	movs	r2, #0
 80140d8:	2108      	movs	r1, #8
 80140da:	4848      	ldr	r0, [pc, #288]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80140dc:	f000 f9bc 	bl	8014458 <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 80140e0:	4846      	ldr	r0, [pc, #280]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80140e2:	f7fc f8dd 	bl	80102a0 <strlen>
 80140e6:	4603      	mov	r3, r0
 80140e8:	4a45      	ldr	r2, [pc, #276]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140ea:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 80140ec:	4b44      	ldr	r3, [pc, #272]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140ee:	4a43      	ldr	r2, [pc, #268]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80140f0:	609a      	str	r2, [r3, #8]
		set_mutex();
 80140f2:	4b44      	ldr	r3, [pc, #272]	; (8014204 <mqtt_client_reg_dev_on_home_assist+0x274>)
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80140f8:	4a41      	ldr	r2, [pc, #260]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80140fa:	493f      	ldr	r1, [pc, #252]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 80140fc:	4842      	ldr	r0, [pc, #264]	; (8014208 <mqtt_client_reg_dev_on_home_assist+0x278>)
 80140fe:	f009 f885 	bl	801d20c <MQTTPublish>
 8014102:	4603      	mov	r3, r0
 8014104:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014106:	4b41      	ldr	r3, [pc, #260]	; (801420c <mqtt_client_reg_dev_on_home_assist+0x27c>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801410c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d002      	beq.n	801411a <mqtt_client_reg_dev_on_home_assist+0x18a>
 8014114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014118:	e06a      	b.n	80141f0 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 801411a:	4b39      	ldr	r3, [pc, #228]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801411c:	889b      	ldrh	r3, [r3, #4]
 801411e:	3301      	adds	r3, #1
 8014120:	b29a      	uxth	r2, r3
 8014122:	4b37      	ldr	r3, [pc, #220]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014124:	809a      	strh	r2, [r3, #4]


//------------------------------REG APPARENT POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014126:	2280      	movs	r2, #128	; 0x80
 8014128:	2100      	movs	r1, #0
 801412a:	4833      	ldr	r0, [pc, #204]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 801412c:	f019 fae6 	bl	802d6fc <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 8014130:	2200      	movs	r2, #0
 8014132:	2106      	movs	r1, #6
 8014134:	4830      	ldr	r0, [pc, #192]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014136:	f000 f8dd 	bl	80142f4 <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 801413a:	2200      	movs	r2, #0
 801413c:	2106      	movs	r1, #6
 801413e:	482f      	ldr	r0, [pc, #188]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014140:	f000 f98a 	bl	8014458 <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 8014144:	482d      	ldr	r0, [pc, #180]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014146:	f7fc f8ab 	bl	80102a0 <strlen>
 801414a:	4603      	mov	r3, r0
 801414c:	4a2c      	ldr	r2, [pc, #176]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801414e:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 8014150:	4b2b      	ldr	r3, [pc, #172]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014152:	4a2a      	ldr	r2, [pc, #168]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 8014154:	609a      	str	r2, [r3, #8]
		set_mutex();
 8014156:	4b2b      	ldr	r3, [pc, #172]	; (8014204 <mqtt_client_reg_dev_on_home_assist+0x274>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801415c:	4a28      	ldr	r2, [pc, #160]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 801415e:	4926      	ldr	r1, [pc, #152]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014160:	4829      	ldr	r0, [pc, #164]	; (8014208 <mqtt_client_reg_dev_on_home_assist+0x278>)
 8014162:	f009 f853 	bl	801d20c <MQTTPublish>
 8014166:	4603      	mov	r3, r0
 8014168:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801416a:	4b28      	ldr	r3, [pc, #160]	; (801420c <mqtt_client_reg_dev_on_home_assist+0x27c>)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d002      	beq.n	801417e <mqtt_client_reg_dev_on_home_assist+0x1ee>
 8014178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801417c:	e038      	b.n	80141f0 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 801417e:	4b20      	ldr	r3, [pc, #128]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014180:	889b      	ldrh	r3, [r3, #4]
 8014182:	3301      	adds	r3, #1
 8014184:	b29a      	uxth	r2, r3
 8014186:	4b1e      	ldr	r3, [pc, #120]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 8014188:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801418a:	2280      	movs	r2, #128	; 0x80
 801418c:	2100      	movs	r1, #0
 801418e:	481a      	ldr	r0, [pc, #104]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 8014190:	f019 fab4 	bl	802d6fc <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 8014194:	2200      	movs	r2, #0
 8014196:	2107      	movs	r1, #7
 8014198:	4817      	ldr	r0, [pc, #92]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 801419a:	f000 f8ab 	bl	80142f4 <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 801419e:	2200      	movs	r2, #0
 80141a0:	2107      	movs	r1, #7
 80141a2:	4816      	ldr	r0, [pc, #88]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80141a4:	f000 f958 	bl	8014458 <get_config_payload_string>
		mqtt_message.payloadlen = strlen(buf_payload);
 80141a8:	4814      	ldr	r0, [pc, #80]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80141aa:	f7fc f879 	bl	80102a0 <strlen>
 80141ae:	4603      	mov	r3, r0
 80141b0:	4a13      	ldr	r2, [pc, #76]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80141b2:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload = buf_payload;
 80141b4:	4b12      	ldr	r3, [pc, #72]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80141b6:	4a11      	ldr	r2, [pc, #68]	; (80141fc <mqtt_client_reg_dev_on_home_assist+0x26c>)
 80141b8:	609a      	str	r2, [r3, #8]
		set_mutex();
 80141ba:	4b12      	ldr	r3, [pc, #72]	; (8014204 <mqtt_client_reg_dev_on_home_assist+0x274>)
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80141c0:	4a0f      	ldr	r2, [pc, #60]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80141c2:	490d      	ldr	r1, [pc, #52]	; (80141f8 <mqtt_client_reg_dev_on_home_assist+0x268>)
 80141c4:	4810      	ldr	r0, [pc, #64]	; (8014208 <mqtt_client_reg_dev_on_home_assist+0x278>)
 80141c6:	f009 f821 	bl	801d20c <MQTTPublish>
 80141ca:	4603      	mov	r3, r0
 80141cc:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80141ce:	4b0f      	ldr	r3, [pc, #60]	; (801420c <mqtt_client_reg_dev_on_home_assist+0x27c>)
 80141d0:	681b      	ldr	r3, [r3, #0]
 80141d2:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80141d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d002      	beq.n	80141e2 <mqtt_client_reg_dev_on_home_assist+0x252>
 80141dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80141e0:	e006      	b.n	80141f0 <mqtt_client_reg_dev_on_home_assist+0x260>
		mqtt_message.id++;
 80141e2:	4b07      	ldr	r3, [pc, #28]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80141e4:	889b      	ldrh	r3, [r3, #4]
 80141e6:	3301      	adds	r3, #1
 80141e8:	b29a      	uxth	r2, r3
 80141ea:	4b05      	ldr	r3, [pc, #20]	; (8014200 <mqtt_client_reg_dev_on_home_assist+0x270>)
 80141ec:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 80141ee:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	3708      	adds	r7, #8
 80141f4:	46bd      	mov	sp, r7
 80141f6:	bd80      	pop	{r7, pc}
 80141f8:	2000053c 	.word	0x2000053c
 80141fc:	200005bc 	.word	0x200005bc
 8014200:	2000088c 	.word	0x2000088c
 8014204:	2000005c 	.word	0x2000005c
 8014208:	20000830 	.word	0x20000830
 801420c:	20000060 	.word	0x20000060

08014210 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 8014210:	b580      	push	{r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 801421a:	6838      	ldr	r0, [r7, #0]
 801421c:	f7fc f840 	bl	80102a0 <strlen>
 8014220:	4603      	mov	r3, r0
 8014222:	4a0f      	ldr	r2, [pc, #60]	; (8014260 <send_data_to_topik+0x50>)
 8014224:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 8014226:	4a0e      	ldr	r2, [pc, #56]	; (8014260 <send_data_to_topik+0x50>)
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 801422c:	4b0c      	ldr	r3, [pc, #48]	; (8014260 <send_data_to_topik+0x50>)
 801422e:	889b      	ldrh	r3, [r3, #4]
 8014230:	3301      	adds	r3, #1
 8014232:	b29a      	uxth	r2, r3
 8014234:	4b0a      	ldr	r3, [pc, #40]	; (8014260 <send_data_to_topik+0x50>)
 8014236:	809a      	strh	r2, [r3, #4]
	set_mutex();
 8014238:	4b0a      	ldr	r3, [pc, #40]	; (8014264 <send_data_to_topik+0x54>)
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 801423e:	4a08      	ldr	r2, [pc, #32]	; (8014260 <send_data_to_topik+0x50>)
 8014240:	6879      	ldr	r1, [r7, #4]
 8014242:	4809      	ldr	r0, [pc, #36]	; (8014268 <send_data_to_topik+0x58>)
 8014244:	f008 ffe2 	bl	801d20c <MQTTPublish>
 8014248:	4603      	mov	r3, r0
 801424a:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 801424c:	4b07      	ldr	r3, [pc, #28]	; (801426c <send_data_to_topik+0x5c>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 8014252:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3710      	adds	r7, #16
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	2000088c 	.word	0x2000088c
 8014264:	2000005c 	.word	0x2000005c
 8014268:	20000830 	.word	0x20000830
 801426c:	20000060 	.word	0x20000060

08014270 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 8014270:	b580      	push	{r7, lr}
 8014272:	b084      	sub	sp, #16
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 8014278:	2300      	movs	r3, #0
 801427a:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7fc f80f 	bl	80102a0 <strlen>
 8014282:	4603      	mov	r3, r0
 8014284:	2b0d      	cmp	r3, #13
 8014286:	d902      	bls.n	801428e <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 8014288:	230e      	movs	r3, #14
 801428a:	73fb      	strb	r3, [r7, #15]
 801428c:	e004      	b.n	8014298 <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7fc f806 	bl	80102a0 <strlen>
 8014294:	4603      	mov	r3, r0
 8014296:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 8014298:	7bfb      	ldrb	r3, [r7, #15]
 801429a:	461a      	mov	r2, r3
 801429c:	6879      	ldr	r1, [r7, #4]
 801429e:	4804      	ldr	r0, [pc, #16]	; (80142b0 <set_device_id+0x40>)
 80142a0:	f019 fa86 	bl	802d7b0 <strncpy>
	return 0;
 80142a4:	2300      	movs	r3, #0
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3710      	adds	r7, #16
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}
 80142ae:	bf00      	nop
 80142b0:	2000089c 	.word	0x2000089c

080142b4 <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 80142b4:	b580      	push	{r7, lr}
 80142b6:	b082      	sub	sp, #8
 80142b8:	af00      	add	r7, sp, #0
 80142ba:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 80142bc:	4b0c      	ldr	r3, [pc, #48]	; (80142f0 <set_device_conf_ip+0x3c>)
 80142be:	2200      	movs	r2, #0
 80142c0:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 80142c2:	6878      	ldr	r0, [r7, #4]
 80142c4:	f7fb ffec 	bl	80102a0 <strlen>
 80142c8:	4603      	mov	r3, r0
 80142ca:	2b12      	cmp	r3, #18
 80142cc:	d80a      	bhi.n	80142e4 <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f7fb ffe6 	bl	80102a0 <strlen>
 80142d4:	4603      	mov	r3, r0
 80142d6:	461a      	mov	r2, r3
 80142d8:	6879      	ldr	r1, [r7, #4]
 80142da:	4805      	ldr	r0, [pc, #20]	; (80142f0 <set_device_conf_ip+0x3c>)
 80142dc:	f019 fa68 	bl	802d7b0 <strncpy>
		return 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	e001      	b.n	80142e8 <set_device_conf_ip+0x34>
	}
	return -1;
 80142e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3708      	adds	r7, #8
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}
 80142f0:	200008ac 	.word	0x200008ac

080142f4 <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b086      	sub	sp, #24
 80142f8:	af04      	add	r7, sp, #16
 80142fa:	6078      	str	r0, [r7, #4]
 80142fc:	460b      	mov	r3, r1
 80142fe:	70fb      	strb	r3, [r7, #3]
 8014300:	4613      	mov	r3, r2
 8014302:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 8014304:	2100      	movs	r1, #0
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f019 fbc5 	bl	802da96 <strcpy>
	switch (topik_type) {
 801430c:	78fb      	ldrb	r3, [r7, #3]
 801430e:	3b01      	subs	r3, #1
 8014310:	2b07      	cmp	r3, #7
 8014312:	d87b      	bhi.n	801440c <get_config_topik_string+0x118>
 8014314:	a201      	add	r2, pc, #4	; (adr r2, 801431c <get_config_topik_string+0x28>)
 8014316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801431a:	bf00      	nop
 801431c:	0801433d 	.word	0x0801433d
 8014320:	08014357 	.word	0x08014357
 8014324:	08014371 	.word	0x08014371
 8014328:	080143a5 	.word	0x080143a5
 801432c:	0801438b 	.word	0x0801438b
 8014330:	080143d9 	.word	0x080143d9
 8014334:	080143f3 	.word	0x080143f3
 8014338:	080143bf 	.word	0x080143bf
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 801433c:	78bb      	ldrb	r3, [r7, #2]
 801433e:	9302      	str	r3, [sp, #8]
 8014340:	4b36      	ldr	r3, [pc, #216]	; (801441c <get_config_topik_string+0x128>)
 8014342:	9301      	str	r3, [sp, #4]
 8014344:	4b36      	ldr	r3, [pc, #216]	; (8014420 <get_config_topik_string+0x12c>)
 8014346:	9300      	str	r3, [sp, #0]
 8014348:	4b36      	ldr	r3, [pc, #216]	; (8014424 <get_config_topik_string+0x130>)
 801434a:	4a37      	ldr	r2, [pc, #220]	; (8014428 <get_config_topik_string+0x134>)
 801434c:	4937      	ldr	r1, [pc, #220]	; (801442c <get_config_topik_string+0x138>)
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f019 f884 	bl	802d45c <siprintf>
			break;
 8014354:	e05d      	b.n	8014412 <get_config_topik_string+0x11e>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 8014356:	78bb      	ldrb	r3, [r7, #2]
 8014358:	9302      	str	r3, [sp, #8]
 801435a:	4b35      	ldr	r3, [pc, #212]	; (8014430 <get_config_topik_string+0x13c>)
 801435c:	9301      	str	r3, [sp, #4]
 801435e:	4b30      	ldr	r3, [pc, #192]	; (8014420 <get_config_topik_string+0x12c>)
 8014360:	9300      	str	r3, [sp, #0]
 8014362:	4b33      	ldr	r3, [pc, #204]	; (8014430 <get_config_topik_string+0x13c>)
 8014364:	4a30      	ldr	r2, [pc, #192]	; (8014428 <get_config_topik_string+0x134>)
 8014366:	4931      	ldr	r1, [pc, #196]	; (801442c <get_config_topik_string+0x138>)
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f019 f877 	bl	802d45c <siprintf>
			break;
 801436e:	e050      	b.n	8014412 <get_config_topik_string+0x11e>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 8014370:	4b30      	ldr	r3, [pc, #192]	; (8014434 <get_config_topik_string+0x140>)
 8014372:	9302      	str	r3, [sp, #8]
 8014374:	4b2a      	ldr	r3, [pc, #168]	; (8014420 <get_config_topik_string+0x12c>)
 8014376:	9301      	str	r3, [sp, #4]
 8014378:	4b2f      	ldr	r3, [pc, #188]	; (8014438 <get_config_topik_string+0x144>)
 801437a:	9300      	str	r3, [sp, #0]
 801437c:	4b2f      	ldr	r3, [pc, #188]	; (801443c <get_config_topik_string+0x148>)
 801437e:	4a2a      	ldr	r2, [pc, #168]	; (8014428 <get_config_topik_string+0x134>)
 8014380:	492f      	ldr	r1, [pc, #188]	; (8014440 <get_config_topik_string+0x14c>)
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f019 f86a 	bl	802d45c <siprintf>
			break;
 8014388:	e043      	b.n	8014412 <get_config_topik_string+0x11e>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 801438a:	4b2e      	ldr	r3, [pc, #184]	; (8014444 <get_config_topik_string+0x150>)
 801438c:	9302      	str	r3, [sp, #8]
 801438e:	4b24      	ldr	r3, [pc, #144]	; (8014420 <get_config_topik_string+0x12c>)
 8014390:	9301      	str	r3, [sp, #4]
 8014392:	4b29      	ldr	r3, [pc, #164]	; (8014438 <get_config_topik_string+0x144>)
 8014394:	9300      	str	r3, [sp, #0]
 8014396:	4b29      	ldr	r3, [pc, #164]	; (801443c <get_config_topik_string+0x148>)
 8014398:	4a23      	ldr	r2, [pc, #140]	; (8014428 <get_config_topik_string+0x134>)
 801439a:	4929      	ldr	r1, [pc, #164]	; (8014440 <get_config_topik_string+0x14c>)
 801439c:	6878      	ldr	r0, [r7, #4]
 801439e:	f019 f85d 	bl	802d45c <siprintf>
			break;
 80143a2:	e036      	b.n	8014412 <get_config_topik_string+0x11e>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 80143a4:	4b28      	ldr	r3, [pc, #160]	; (8014448 <get_config_topik_string+0x154>)
 80143a6:	9302      	str	r3, [sp, #8]
 80143a8:	4b1d      	ldr	r3, [pc, #116]	; (8014420 <get_config_topik_string+0x12c>)
 80143aa:	9301      	str	r3, [sp, #4]
 80143ac:	4b22      	ldr	r3, [pc, #136]	; (8014438 <get_config_topik_string+0x144>)
 80143ae:	9300      	str	r3, [sp, #0]
 80143b0:	4b22      	ldr	r3, [pc, #136]	; (801443c <get_config_topik_string+0x148>)
 80143b2:	4a1d      	ldr	r2, [pc, #116]	; (8014428 <get_config_topik_string+0x134>)
 80143b4:	4922      	ldr	r1, [pc, #136]	; (8014440 <get_config_topik_string+0x14c>)
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f019 f850 	bl	802d45c <siprintf>
			break;
 80143bc:	e029      	b.n	8014412 <get_config_topik_string+0x11e>
		case APPARENT_POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power);
 80143be:	4b23      	ldr	r3, [pc, #140]	; (801444c <get_config_topik_string+0x158>)
 80143c0:	9302      	str	r3, [sp, #8]
 80143c2:	4b17      	ldr	r3, [pc, #92]	; (8014420 <get_config_topik_string+0x12c>)
 80143c4:	9301      	str	r3, [sp, #4]
 80143c6:	4b1c      	ldr	r3, [pc, #112]	; (8014438 <get_config_topik_string+0x144>)
 80143c8:	9300      	str	r3, [sp, #0]
 80143ca:	4b1c      	ldr	r3, [pc, #112]	; (801443c <get_config_topik_string+0x148>)
 80143cc:	4a16      	ldr	r2, [pc, #88]	; (8014428 <get_config_topik_string+0x134>)
 80143ce:	491c      	ldr	r1, [pc, #112]	; (8014440 <get_config_topik_string+0x14c>)
 80143d0:	6878      	ldr	r0, [r7, #4]
 80143d2:	f019 f843 	bl	802d45c <siprintf>
			break;
 80143d6:	e01c      	b.n	8014412 <get_config_topik_string+0x11e>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 80143d8:	4b1d      	ldr	r3, [pc, #116]	; (8014450 <get_config_topik_string+0x15c>)
 80143da:	9302      	str	r3, [sp, #8]
 80143dc:	4b10      	ldr	r3, [pc, #64]	; (8014420 <get_config_topik_string+0x12c>)
 80143de:	9301      	str	r3, [sp, #4]
 80143e0:	4b15      	ldr	r3, [pc, #84]	; (8014438 <get_config_topik_string+0x144>)
 80143e2:	9300      	str	r3, [sp, #0]
 80143e4:	4b15      	ldr	r3, [pc, #84]	; (801443c <get_config_topik_string+0x148>)
 80143e6:	4a10      	ldr	r2, [pc, #64]	; (8014428 <get_config_topik_string+0x134>)
 80143e8:	4915      	ldr	r1, [pc, #84]	; (8014440 <get_config_topik_string+0x14c>)
 80143ea:	6878      	ldr	r0, [r7, #4]
 80143ec:	f019 f836 	bl	802d45c <siprintf>
			break;
 80143f0:	e00f      	b.n	8014412 <get_config_topik_string+0x11e>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 80143f2:	4b18      	ldr	r3, [pc, #96]	; (8014454 <get_config_topik_string+0x160>)
 80143f4:	9302      	str	r3, [sp, #8]
 80143f6:	4b0a      	ldr	r3, [pc, #40]	; (8014420 <get_config_topik_string+0x12c>)
 80143f8:	9301      	str	r3, [sp, #4]
 80143fa:	4b0f      	ldr	r3, [pc, #60]	; (8014438 <get_config_topik_string+0x144>)
 80143fc:	9300      	str	r3, [sp, #0]
 80143fe:	4b0f      	ldr	r3, [pc, #60]	; (801443c <get_config_topik_string+0x148>)
 8014400:	4a09      	ldr	r2, [pc, #36]	; (8014428 <get_config_topik_string+0x134>)
 8014402:	490f      	ldr	r1, [pc, #60]	; (8014440 <get_config_topik_string+0x14c>)
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f019 f829 	bl	802d45c <siprintf>
			break;
 801440a:	e002      	b.n	8014412 <get_config_topik_string+0x11e>
		default:
			return -1;
 801440c:	f04f 33ff 	mov.w	r3, #4294967295
 8014410:	e000      	b.n	8014414 <get_config_topik_string+0x120>
			break;
	}


	return 0;
 8014412:	2300      	movs	r3, #0
}
 8014414:	4618      	mov	r0, r3
 8014416:	3708      	adds	r7, #8
 8014418:	46bd      	mov	sp, r7
 801441a:	bd80      	pop	{r7, pc}
 801441c:	2000008c 	.word	0x2000008c
 8014420:	2000089c 	.word	0x2000089c
 8014424:	20000074 	.word	0x20000074
 8014428:	20000064 	.word	0x20000064
 801442c:	08033f70 	.word	0x08033f70
 8014430:	20000084 	.word	0x20000084
 8014434:	08032954 	.word	0x08032954
 8014438:	0803295c 	.word	0x0803295c
 801443c:	08032934 	.word	0x08032934
 8014440:	0803293c 	.word	0x0803293c
 8014444:	08032964 	.word	0x08032964
 8014448:	0803296c 	.word	0x0803296c
 801444c:	08032974 	.word	0x08032974
 8014450:	08032984 	.word	0x08032984
 8014454:	08032994 	.word	0x08032994

08014458 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 8014458:	b590      	push	{r4, r7, lr}
 801445a:	b097      	sub	sp, #92	; 0x5c
 801445c:	af12      	add	r7, sp, #72	; 0x48
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	460b      	mov	r3, r1
 8014462:	70fb      	strb	r3, [r7, #3]
 8014464:	4613      	mov	r3, r2
 8014466:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 8014468:	2300      	movs	r3, #0
 801446a:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2200      	movs	r2, #0
 8014470:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 8014472:	78fb      	ldrb	r3, [r7, #3]
 8014474:	3b01      	subs	r3, #1
 8014476:	2b07      	cmp	r3, #7
 8014478:	f200 8181 	bhi.w	801477e <get_config_payload_string+0x326>
 801447c:	a201      	add	r2, pc, #4	; (adr r2, 8014484 <get_config_payload_string+0x2c>)
 801447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014482:	bf00      	nop
 8014484:	080144d9 	.word	0x080144d9
 8014488:	080144a5 	.word	0x080144a5
 801448c:	08014507 	.word	0x08014507
 8014490:	080145b3 	.word	0x080145b3
 8014494:	0801455d 	.word	0x0801455d
 8014498:	0801465f 	.word	0x0801465f
 801449c:	08014729 	.word	0x08014729
 80144a0:	08014609 	.word	0x08014609
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 80144a4:	78bb      	ldrb	r3, [r7, #2]
 80144a6:	78ba      	ldrb	r2, [r7, #2]
 80144a8:	78b9      	ldrb	r1, [r7, #2]
 80144aa:	78b8      	ldrb	r0, [r7, #2]
 80144ac:	4c81      	ldr	r4, [pc, #516]	; (80146b4 <get_config_payload_string+0x25c>)
 80144ae:	9407      	str	r4, [sp, #28]
 80144b0:	4c81      	ldr	r4, [pc, #516]	; (80146b8 <get_config_payload_string+0x260>)
 80144b2:	9406      	str	r4, [sp, #24]
 80144b4:	4c80      	ldr	r4, [pc, #512]	; (80146b8 <get_config_payload_string+0x260>)
 80144b6:	9405      	str	r4, [sp, #20]
 80144b8:	9004      	str	r0, [sp, #16]
 80144ba:	487f      	ldr	r0, [pc, #508]	; (80146b8 <get_config_payload_string+0x260>)
 80144bc:	9003      	str	r0, [sp, #12]
 80144be:	9102      	str	r1, [sp, #8]
 80144c0:	9201      	str	r2, [sp, #4]
 80144c2:	9300      	str	r3, [sp, #0]
 80144c4:	4b7c      	ldr	r3, [pc, #496]	; (80146b8 <get_config_payload_string+0x260>)
 80144c6:	4a7c      	ldr	r2, [pc, #496]	; (80146b8 <get_config_payload_string+0x260>)
 80144c8:	497c      	ldr	r1, [pc, #496]	; (80146bc <get_config_payload_string+0x264>)
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f018 ffc6 	bl	802d45c <siprintf>
 80144d0:	4603      	mov	r3, r0
 80144d2:	73fb      	strb	r3, [r7, #15]
			return len;
 80144d4:	7bfb      	ldrb	r3, [r7, #15]
 80144d6:	e155      	b.n	8014784 <get_config_payload_string+0x32c>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 80144d8:	78b9      	ldrb	r1, [r7, #2]
 80144da:	78bb      	ldrb	r3, [r7, #2]
 80144dc:	78ba      	ldrb	r2, [r7, #2]
 80144de:	4875      	ldr	r0, [pc, #468]	; (80146b4 <get_config_payload_string+0x25c>)
 80144e0:	9005      	str	r0, [sp, #20]
 80144e2:	4875      	ldr	r0, [pc, #468]	; (80146b8 <get_config_payload_string+0x260>)
 80144e4:	9004      	str	r0, [sp, #16]
 80144e6:	4874      	ldr	r0, [pc, #464]	; (80146b8 <get_config_payload_string+0x260>)
 80144e8:	9003      	str	r0, [sp, #12]
 80144ea:	9202      	str	r2, [sp, #8]
 80144ec:	4a72      	ldr	r2, [pc, #456]	; (80146b8 <get_config_payload_string+0x260>)
 80144ee:	9201      	str	r2, [sp, #4]
 80144f0:	9300      	str	r3, [sp, #0]
 80144f2:	460b      	mov	r3, r1
 80144f4:	4a70      	ldr	r2, [pc, #448]	; (80146b8 <get_config_payload_string+0x260>)
 80144f6:	4972      	ldr	r1, [pc, #456]	; (80146c0 <get_config_payload_string+0x268>)
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f018 ffaf 	bl	802d45c <siprintf>
 80144fe:	4603      	mov	r3, r0
 8014500:	73fb      	strb	r3, [r7, #15]
			return len;
 8014502:	7bfb      	ldrb	r3, [r7, #15]
 8014504:	e13e      	b.n	8014784 <get_config_payload_string+0x32c>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 8014506:	4b6b      	ldr	r3, [pc, #428]	; (80146b4 <get_config_payload_string+0x25c>)
 8014508:	9310      	str	r3, [sp, #64]	; 0x40
 801450a:	4b6e      	ldr	r3, [pc, #440]	; (80146c4 <get_config_payload_string+0x26c>)
 801450c:	930f      	str	r3, [sp, #60]	; 0x3c
 801450e:	4b6e      	ldr	r3, [pc, #440]	; (80146c8 <get_config_payload_string+0x270>)
 8014510:	930e      	str	r3, [sp, #56]	; 0x38
 8014512:	4b6e      	ldr	r3, [pc, #440]	; (80146cc <get_config_payload_string+0x274>)
 8014514:	930d      	str	r3, [sp, #52]	; 0x34
 8014516:	4b6e      	ldr	r3, [pc, #440]	; (80146d0 <get_config_payload_string+0x278>)
 8014518:	930c      	str	r3, [sp, #48]	; 0x30
 801451a:	4b6e      	ldr	r3, [pc, #440]	; (80146d4 <get_config_payload_string+0x27c>)
 801451c:	930b      	str	r3, [sp, #44]	; 0x2c
 801451e:	4b66      	ldr	r3, [pc, #408]	; (80146b8 <get_config_payload_string+0x260>)
 8014520:	930a      	str	r3, [sp, #40]	; 0x28
 8014522:	4b6d      	ldr	r3, [pc, #436]	; (80146d8 <get_config_payload_string+0x280>)
 8014524:	9309      	str	r3, [sp, #36]	; 0x24
 8014526:	4b6d      	ldr	r3, [pc, #436]	; (80146dc <get_config_payload_string+0x284>)
 8014528:	9308      	str	r3, [sp, #32]
 801452a:	4b6d      	ldr	r3, [pc, #436]	; (80146e0 <get_config_payload_string+0x288>)
 801452c:	9307      	str	r3, [sp, #28]
 801452e:	4b62      	ldr	r3, [pc, #392]	; (80146b8 <get_config_payload_string+0x260>)
 8014530:	9306      	str	r3, [sp, #24]
 8014532:	4b69      	ldr	r3, [pc, #420]	; (80146d8 <get_config_payload_string+0x280>)
 8014534:	9305      	str	r3, [sp, #20]
 8014536:	4b6b      	ldr	r3, [pc, #428]	; (80146e4 <get_config_payload_string+0x28c>)
 8014538:	9304      	str	r3, [sp, #16]
 801453a:	4b6b      	ldr	r3, [pc, #428]	; (80146e8 <get_config_payload_string+0x290>)
 801453c:	9303      	str	r3, [sp, #12]
 801453e:	4b68      	ldr	r3, [pc, #416]	; (80146e0 <get_config_payload_string+0x288>)
 8014540:	9302      	str	r3, [sp, #8]
 8014542:	4b6a      	ldr	r3, [pc, #424]	; (80146ec <get_config_payload_string+0x294>)
 8014544:	9301      	str	r3, [sp, #4]
 8014546:	4b5c      	ldr	r3, [pc, #368]	; (80146b8 <get_config_payload_string+0x260>)
 8014548:	9300      	str	r3, [sp, #0]
 801454a:	4b63      	ldr	r3, [pc, #396]	; (80146d8 <get_config_payload_string+0x280>)
 801454c:	4a64      	ldr	r2, [pc, #400]	; (80146e0 <get_config_payload_string+0x288>)
 801454e:	4968      	ldr	r1, [pc, #416]	; (80146f0 <get_config_payload_string+0x298>)
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f018 ff83 	bl	802d45c <siprintf>
 8014556:	4603      	mov	r3, r0
 8014558:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801455a:	e113      	b.n	8014784 <get_config_payload_string+0x32c>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 801455c:	4b55      	ldr	r3, [pc, #340]	; (80146b4 <get_config_payload_string+0x25c>)
 801455e:	9310      	str	r3, [sp, #64]	; 0x40
 8014560:	4b58      	ldr	r3, [pc, #352]	; (80146c4 <get_config_payload_string+0x26c>)
 8014562:	930f      	str	r3, [sp, #60]	; 0x3c
 8014564:	4b58      	ldr	r3, [pc, #352]	; (80146c8 <get_config_payload_string+0x270>)
 8014566:	930e      	str	r3, [sp, #56]	; 0x38
 8014568:	4b58      	ldr	r3, [pc, #352]	; (80146cc <get_config_payload_string+0x274>)
 801456a:	930d      	str	r3, [sp, #52]	; 0x34
 801456c:	4b58      	ldr	r3, [pc, #352]	; (80146d0 <get_config_payload_string+0x278>)
 801456e:	930c      	str	r3, [sp, #48]	; 0x30
 8014570:	4b58      	ldr	r3, [pc, #352]	; (80146d4 <get_config_payload_string+0x27c>)
 8014572:	930b      	str	r3, [sp, #44]	; 0x2c
 8014574:	4b50      	ldr	r3, [pc, #320]	; (80146b8 <get_config_payload_string+0x260>)
 8014576:	930a      	str	r3, [sp, #40]	; 0x28
 8014578:	4b57      	ldr	r3, [pc, #348]	; (80146d8 <get_config_payload_string+0x280>)
 801457a:	9309      	str	r3, [sp, #36]	; 0x24
 801457c:	4b5d      	ldr	r3, [pc, #372]	; (80146f4 <get_config_payload_string+0x29c>)
 801457e:	9308      	str	r3, [sp, #32]
 8014580:	4b5d      	ldr	r3, [pc, #372]	; (80146f8 <get_config_payload_string+0x2a0>)
 8014582:	9307      	str	r3, [sp, #28]
 8014584:	4b4c      	ldr	r3, [pc, #304]	; (80146b8 <get_config_payload_string+0x260>)
 8014586:	9306      	str	r3, [sp, #24]
 8014588:	4b53      	ldr	r3, [pc, #332]	; (80146d8 <get_config_payload_string+0x280>)
 801458a:	9305      	str	r3, [sp, #20]
 801458c:	4b5b      	ldr	r3, [pc, #364]	; (80146fc <get_config_payload_string+0x2a4>)
 801458e:	9304      	str	r3, [sp, #16]
 8014590:	4b5b      	ldr	r3, [pc, #364]	; (8014700 <get_config_payload_string+0x2a8>)
 8014592:	9303      	str	r3, [sp, #12]
 8014594:	4b58      	ldr	r3, [pc, #352]	; (80146f8 <get_config_payload_string+0x2a0>)
 8014596:	9302      	str	r3, [sp, #8]
 8014598:	4b54      	ldr	r3, [pc, #336]	; (80146ec <get_config_payload_string+0x294>)
 801459a:	9301      	str	r3, [sp, #4]
 801459c:	4b46      	ldr	r3, [pc, #280]	; (80146b8 <get_config_payload_string+0x260>)
 801459e:	9300      	str	r3, [sp, #0]
 80145a0:	4b4d      	ldr	r3, [pc, #308]	; (80146d8 <get_config_payload_string+0x280>)
 80145a2:	4a55      	ldr	r2, [pc, #340]	; (80146f8 <get_config_payload_string+0x2a0>)
 80145a4:	4952      	ldr	r1, [pc, #328]	; (80146f0 <get_config_payload_string+0x298>)
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f018 ff58 	bl	802d45c <siprintf>
 80145ac:	4603      	mov	r3, r0
 80145ae:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80145b0:	e0e8      	b.n	8014784 <get_config_payload_string+0x32c>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 80145b2:	4b40      	ldr	r3, [pc, #256]	; (80146b4 <get_config_payload_string+0x25c>)
 80145b4:	9310      	str	r3, [sp, #64]	; 0x40
 80145b6:	4b43      	ldr	r3, [pc, #268]	; (80146c4 <get_config_payload_string+0x26c>)
 80145b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80145ba:	4b43      	ldr	r3, [pc, #268]	; (80146c8 <get_config_payload_string+0x270>)
 80145bc:	930e      	str	r3, [sp, #56]	; 0x38
 80145be:	4b43      	ldr	r3, [pc, #268]	; (80146cc <get_config_payload_string+0x274>)
 80145c0:	930d      	str	r3, [sp, #52]	; 0x34
 80145c2:	4b43      	ldr	r3, [pc, #268]	; (80146d0 <get_config_payload_string+0x278>)
 80145c4:	930c      	str	r3, [sp, #48]	; 0x30
 80145c6:	4b43      	ldr	r3, [pc, #268]	; (80146d4 <get_config_payload_string+0x27c>)
 80145c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80145ca:	4b3b      	ldr	r3, [pc, #236]	; (80146b8 <get_config_payload_string+0x260>)
 80145cc:	930a      	str	r3, [sp, #40]	; 0x28
 80145ce:	4b42      	ldr	r3, [pc, #264]	; (80146d8 <get_config_payload_string+0x280>)
 80145d0:	9309      	str	r3, [sp, #36]	; 0x24
 80145d2:	4b4c      	ldr	r3, [pc, #304]	; (8014704 <get_config_payload_string+0x2ac>)
 80145d4:	9308      	str	r3, [sp, #32]
 80145d6:	4b4c      	ldr	r3, [pc, #304]	; (8014708 <get_config_payload_string+0x2b0>)
 80145d8:	9307      	str	r3, [sp, #28]
 80145da:	4b37      	ldr	r3, [pc, #220]	; (80146b8 <get_config_payload_string+0x260>)
 80145dc:	9306      	str	r3, [sp, #24]
 80145de:	4b3e      	ldr	r3, [pc, #248]	; (80146d8 <get_config_payload_string+0x280>)
 80145e0:	9305      	str	r3, [sp, #20]
 80145e2:	4b4a      	ldr	r3, [pc, #296]	; (801470c <get_config_payload_string+0x2b4>)
 80145e4:	9304      	str	r3, [sp, #16]
 80145e6:	4b46      	ldr	r3, [pc, #280]	; (8014700 <get_config_payload_string+0x2a8>)
 80145e8:	9303      	str	r3, [sp, #12]
 80145ea:	4b47      	ldr	r3, [pc, #284]	; (8014708 <get_config_payload_string+0x2b0>)
 80145ec:	9302      	str	r3, [sp, #8]
 80145ee:	4b3f      	ldr	r3, [pc, #252]	; (80146ec <get_config_payload_string+0x294>)
 80145f0:	9301      	str	r3, [sp, #4]
 80145f2:	4b31      	ldr	r3, [pc, #196]	; (80146b8 <get_config_payload_string+0x260>)
 80145f4:	9300      	str	r3, [sp, #0]
 80145f6:	4b38      	ldr	r3, [pc, #224]	; (80146d8 <get_config_payload_string+0x280>)
 80145f8:	4a43      	ldr	r2, [pc, #268]	; (8014708 <get_config_payload_string+0x2b0>)
 80145fa:	493d      	ldr	r1, [pc, #244]	; (80146f0 <get_config_payload_string+0x298>)
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f018 ff2d 	bl	802d45c <siprintf>
 8014602:	4603      	mov	r3, r0
 8014604:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014606:	e0bd      	b.n	8014784 <get_config_payload_string+0x32c>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014608:	4b2a      	ldr	r3, [pc, #168]	; (80146b4 <get_config_payload_string+0x25c>)
 801460a:	9310      	str	r3, [sp, #64]	; 0x40
 801460c:	4b2d      	ldr	r3, [pc, #180]	; (80146c4 <get_config_payload_string+0x26c>)
 801460e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014610:	4b2d      	ldr	r3, [pc, #180]	; (80146c8 <get_config_payload_string+0x270>)
 8014612:	930e      	str	r3, [sp, #56]	; 0x38
 8014614:	4b2d      	ldr	r3, [pc, #180]	; (80146cc <get_config_payload_string+0x274>)
 8014616:	930d      	str	r3, [sp, #52]	; 0x34
 8014618:	4b2d      	ldr	r3, [pc, #180]	; (80146d0 <get_config_payload_string+0x278>)
 801461a:	930c      	str	r3, [sp, #48]	; 0x30
 801461c:	4b2d      	ldr	r3, [pc, #180]	; (80146d4 <get_config_payload_string+0x27c>)
 801461e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014620:	4b25      	ldr	r3, [pc, #148]	; (80146b8 <get_config_payload_string+0x260>)
 8014622:	930a      	str	r3, [sp, #40]	; 0x28
 8014624:	4b2c      	ldr	r3, [pc, #176]	; (80146d8 <get_config_payload_string+0x280>)
 8014626:	9309      	str	r3, [sp, #36]	; 0x24
 8014628:	4b39      	ldr	r3, [pc, #228]	; (8014710 <get_config_payload_string+0x2b8>)
 801462a:	9308      	str	r3, [sp, #32]
 801462c:	4b39      	ldr	r3, [pc, #228]	; (8014714 <get_config_payload_string+0x2bc>)
 801462e:	9307      	str	r3, [sp, #28]
 8014630:	4b21      	ldr	r3, [pc, #132]	; (80146b8 <get_config_payload_string+0x260>)
 8014632:	9306      	str	r3, [sp, #24]
 8014634:	4b28      	ldr	r3, [pc, #160]	; (80146d8 <get_config_payload_string+0x280>)
 8014636:	9305      	str	r3, [sp, #20]
 8014638:	4b37      	ldr	r3, [pc, #220]	; (8014718 <get_config_payload_string+0x2c0>)
 801463a:	9304      	str	r3, [sp, #16]
 801463c:	4b30      	ldr	r3, [pc, #192]	; (8014700 <get_config_payload_string+0x2a8>)
 801463e:	9303      	str	r3, [sp, #12]
 8014640:	4b34      	ldr	r3, [pc, #208]	; (8014714 <get_config_payload_string+0x2bc>)
 8014642:	9302      	str	r3, [sp, #8]
 8014644:	4b29      	ldr	r3, [pc, #164]	; (80146ec <get_config_payload_string+0x294>)
 8014646:	9301      	str	r3, [sp, #4]
 8014648:	4b1b      	ldr	r3, [pc, #108]	; (80146b8 <get_config_payload_string+0x260>)
 801464a:	9300      	str	r3, [sp, #0]
 801464c:	4b22      	ldr	r3, [pc, #136]	; (80146d8 <get_config_payload_string+0x280>)
 801464e:	4a31      	ldr	r2, [pc, #196]	; (8014714 <get_config_payload_string+0x2bc>)
 8014650:	4927      	ldr	r1, [pc, #156]	; (80146f0 <get_config_payload_string+0x298>)
 8014652:	6878      	ldr	r0, [r7, #4]
 8014654:	f018 ff02 	bl	802d45c <siprintf>
 8014658:	4603      	mov	r3, r0
 801465a:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801465c:	e092      	b.n	8014784 <get_config_payload_string+0x32c>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 801465e:	4b15      	ldr	r3, [pc, #84]	; (80146b4 <get_config_payload_string+0x25c>)
 8014660:	9310      	str	r3, [sp, #64]	; 0x40
 8014662:	4b18      	ldr	r3, [pc, #96]	; (80146c4 <get_config_payload_string+0x26c>)
 8014664:	930f      	str	r3, [sp, #60]	; 0x3c
 8014666:	4b18      	ldr	r3, [pc, #96]	; (80146c8 <get_config_payload_string+0x270>)
 8014668:	930e      	str	r3, [sp, #56]	; 0x38
 801466a:	4b18      	ldr	r3, [pc, #96]	; (80146cc <get_config_payload_string+0x274>)
 801466c:	930d      	str	r3, [sp, #52]	; 0x34
 801466e:	4b18      	ldr	r3, [pc, #96]	; (80146d0 <get_config_payload_string+0x278>)
 8014670:	930c      	str	r3, [sp, #48]	; 0x30
 8014672:	4b18      	ldr	r3, [pc, #96]	; (80146d4 <get_config_payload_string+0x27c>)
 8014674:	930b      	str	r3, [sp, #44]	; 0x2c
 8014676:	4b10      	ldr	r3, [pc, #64]	; (80146b8 <get_config_payload_string+0x260>)
 8014678:	930a      	str	r3, [sp, #40]	; 0x28
 801467a:	4b17      	ldr	r3, [pc, #92]	; (80146d8 <get_config_payload_string+0x280>)
 801467c:	9309      	str	r3, [sp, #36]	; 0x24
 801467e:	4b27      	ldr	r3, [pc, #156]	; (801471c <get_config_payload_string+0x2c4>)
 8014680:	9308      	str	r3, [sp, #32]
 8014682:	4b27      	ldr	r3, [pc, #156]	; (8014720 <get_config_payload_string+0x2c8>)
 8014684:	9307      	str	r3, [sp, #28]
 8014686:	4b0c      	ldr	r3, [pc, #48]	; (80146b8 <get_config_payload_string+0x260>)
 8014688:	9306      	str	r3, [sp, #24]
 801468a:	4b13      	ldr	r3, [pc, #76]	; (80146d8 <get_config_payload_string+0x280>)
 801468c:	9305      	str	r3, [sp, #20]
 801468e:	4b25      	ldr	r3, [pc, #148]	; (8014724 <get_config_payload_string+0x2cc>)
 8014690:	9304      	str	r3, [sp, #16]
 8014692:	4b1b      	ldr	r3, [pc, #108]	; (8014700 <get_config_payload_string+0x2a8>)
 8014694:	9303      	str	r3, [sp, #12]
 8014696:	4b22      	ldr	r3, [pc, #136]	; (8014720 <get_config_payload_string+0x2c8>)
 8014698:	9302      	str	r3, [sp, #8]
 801469a:	4b14      	ldr	r3, [pc, #80]	; (80146ec <get_config_payload_string+0x294>)
 801469c:	9301      	str	r3, [sp, #4]
 801469e:	4b06      	ldr	r3, [pc, #24]	; (80146b8 <get_config_payload_string+0x260>)
 80146a0:	9300      	str	r3, [sp, #0]
 80146a2:	4b0d      	ldr	r3, [pc, #52]	; (80146d8 <get_config_payload_string+0x280>)
 80146a4:	4a1e      	ldr	r2, [pc, #120]	; (8014720 <get_config_payload_string+0x2c8>)
 80146a6:	4912      	ldr	r1, [pc, #72]	; (80146f0 <get_config_payload_string+0x298>)
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f018 fed7 	bl	802d45c <siprintf>
 80146ae:	4603      	mov	r3, r0
 80146b0:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80146b2:	e067      	b.n	8014784 <get_config_payload_string+0x32c>
 80146b4:	200008ac 	.word	0x200008ac
 80146b8:	2000089c 	.word	0x2000089c
 80146bc:	08033f8c 	.word	0x08033f8c
 80146c0:	0803414c 	.word	0x0803414c
 80146c4:	0803299c 	.word	0x0803299c
 80146c8:	080329a4 	.word	0x080329a4
 80146cc:	080329ac 	.word	0x080329ac
 80146d0:	080329bc 	.word	0x080329bc
 80146d4:	080329cc 	.word	0x080329cc
 80146d8:	0803295c 	.word	0x0803295c
 80146dc:	080329dc 	.word	0x080329dc
 80146e0:	08032954 	.word	0x08032954
 80146e4:	080329e0 	.word	0x080329e0
 80146e8:	080329f0 	.word	0x080329f0
 80146ec:	08032a14 	.word	0x08032a14
 80146f0:	080342e4 	.word	0x080342e4
 80146f4:	08032a1c 	.word	0x08032a1c
 80146f8:	08032964 	.word	0x08032964
 80146fc:	08032a20 	.word	0x08032a20
 8014700:	08032a30 	.word	0x08032a30
 8014704:	08032a34 	.word	0x08032a34
 8014708:	0803296c 	.word	0x0803296c
 801470c:	08032a38 	.word	0x08032a38
 8014710:	08032a50 	.word	0x08032a50
 8014714:	08032974 	.word	0x08032974
 8014718:	08032a54 	.word	0x08032a54
 801471c:	08032a74 	.word	0x08032a74
 8014720:	08032984 	.word	0x08032984
 8014724:	08032a78 	.word	0x08032a78
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8014728:	4b18      	ldr	r3, [pc, #96]	; (801478c <get_config_payload_string+0x334>)
 801472a:	9310      	str	r3, [sp, #64]	; 0x40
 801472c:	4b18      	ldr	r3, [pc, #96]	; (8014790 <get_config_payload_string+0x338>)
 801472e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014730:	4b18      	ldr	r3, [pc, #96]	; (8014794 <get_config_payload_string+0x33c>)
 8014732:	930e      	str	r3, [sp, #56]	; 0x38
 8014734:	4b18      	ldr	r3, [pc, #96]	; (8014798 <get_config_payload_string+0x340>)
 8014736:	930d      	str	r3, [sp, #52]	; 0x34
 8014738:	4b18      	ldr	r3, [pc, #96]	; (801479c <get_config_payload_string+0x344>)
 801473a:	930c      	str	r3, [sp, #48]	; 0x30
 801473c:	4b18      	ldr	r3, [pc, #96]	; (80147a0 <get_config_payload_string+0x348>)
 801473e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014740:	4b18      	ldr	r3, [pc, #96]	; (80147a4 <get_config_payload_string+0x34c>)
 8014742:	930a      	str	r3, [sp, #40]	; 0x28
 8014744:	4b18      	ldr	r3, [pc, #96]	; (80147a8 <get_config_payload_string+0x350>)
 8014746:	9309      	str	r3, [sp, #36]	; 0x24
 8014748:	4b18      	ldr	r3, [pc, #96]	; (80147ac <get_config_payload_string+0x354>)
 801474a:	9308      	str	r3, [sp, #32]
 801474c:	4b18      	ldr	r3, [pc, #96]	; (80147b0 <get_config_payload_string+0x358>)
 801474e:	9307      	str	r3, [sp, #28]
 8014750:	4b14      	ldr	r3, [pc, #80]	; (80147a4 <get_config_payload_string+0x34c>)
 8014752:	9306      	str	r3, [sp, #24]
 8014754:	4b14      	ldr	r3, [pc, #80]	; (80147a8 <get_config_payload_string+0x350>)
 8014756:	9305      	str	r3, [sp, #20]
 8014758:	4b16      	ldr	r3, [pc, #88]	; (80147b4 <get_config_payload_string+0x35c>)
 801475a:	9304      	str	r3, [sp, #16]
 801475c:	4b16      	ldr	r3, [pc, #88]	; (80147b8 <get_config_payload_string+0x360>)
 801475e:	9303      	str	r3, [sp, #12]
 8014760:	4b13      	ldr	r3, [pc, #76]	; (80147b0 <get_config_payload_string+0x358>)
 8014762:	9302      	str	r3, [sp, #8]
 8014764:	4b15      	ldr	r3, [pc, #84]	; (80147bc <get_config_payload_string+0x364>)
 8014766:	9301      	str	r3, [sp, #4]
 8014768:	4b0e      	ldr	r3, [pc, #56]	; (80147a4 <get_config_payload_string+0x34c>)
 801476a:	9300      	str	r3, [sp, #0]
 801476c:	4b0e      	ldr	r3, [pc, #56]	; (80147a8 <get_config_payload_string+0x350>)
 801476e:	4a10      	ldr	r2, [pc, #64]	; (80147b0 <get_config_payload_string+0x358>)
 8014770:	4913      	ldr	r1, [pc, #76]	; (80147c0 <get_config_payload_string+0x368>)
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f018 fe72 	bl	802d45c <siprintf>
 8014778:	4603      	mov	r3, r0
 801477a:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801477c:	e002      	b.n	8014784 <get_config_payload_string+0x32c>

		default:
			return -1;
 801477e:	f04f 33ff 	mov.w	r3, #4294967295
 8014782:	e7ff      	b.n	8014784 <get_config_payload_string+0x32c>
			break;
	}
}
 8014784:	4618      	mov	r0, r3
 8014786:	3714      	adds	r7, #20
 8014788:	46bd      	mov	sp, r7
 801478a:	bd90      	pop	{r4, r7, pc}
 801478c:	200008ac 	.word	0x200008ac
 8014790:	0803299c 	.word	0x0803299c
 8014794:	080329a4 	.word	0x080329a4
 8014798:	080329ac 	.word	0x080329ac
 801479c:	080329bc 	.word	0x080329bc
 80147a0:	080329cc 	.word	0x080329cc
 80147a4:	2000089c 	.word	0x2000089c
 80147a8:	0803295c 	.word	0x0803295c
 80147ac:	08032aa4 	.word	0x08032aa4
 80147b0:	08032994 	.word	0x08032994
 80147b4:	08032aa8 	.word	0x08032aa8
 80147b8:	08032a30 	.word	0x08032a30
 80147bc:	08032a14 	.word	0x08032a14
 80147c0:	080342e4 	.word	0x080342e4

080147c4 <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 80147c4:	b580      	push	{r7, lr}
 80147c6:	b084      	sub	sp, #16
 80147c8:	af02      	add	r7, sp, #8
 80147ca:	6078      	str	r0, [r7, #4]
 80147cc:	460b      	mov	r3, r1
 80147ce:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 80147d6:	4b11      	ldr	r3, [pc, #68]	; (801481c <generate_status_topik+0x58>)
 80147d8:	9300      	str	r3, [sp, #0]
 80147da:	4b11      	ldr	r3, [pc, #68]	; (8014820 <generate_status_topik+0x5c>)
 80147dc:	4a11      	ldr	r2, [pc, #68]	; (8014824 <generate_status_topik+0x60>)
 80147de:	4912      	ldr	r1, [pc, #72]	; (8014828 <generate_status_topik+0x64>)
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f018 fe3b 	bl	802d45c <siprintf>

	switch (topik_type) {
 80147e6:	78fb      	ldrb	r3, [r7, #3]
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d002      	beq.n	80147f2 <generate_status_topik+0x2e>
 80147ec:	2b02      	cmp	r3, #2
 80147ee:	d006      	beq.n	80147fe <generate_status_topik+0x3a>
 80147f0:	e00b      	b.n	801480a <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 80147f2:	4a0b      	ldr	r2, [pc, #44]	; (8014820 <generate_status_topik+0x5c>)
 80147f4:	490d      	ldr	r1, [pc, #52]	; (801482c <generate_status_topik+0x68>)
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f018 fe30 	bl	802d45c <siprintf>
			break;
 80147fc:	e008      	b.n	8014810 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 80147fe:	4a08      	ldr	r2, [pc, #32]	; (8014820 <generate_status_topik+0x5c>)
 8014800:	490b      	ldr	r1, [pc, #44]	; (8014830 <generate_status_topik+0x6c>)
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f018 fe2a 	bl	802d45c <siprintf>
			break;
 8014808:	e002      	b.n	8014810 <generate_status_topik+0x4c>

		default:
			return -1;
 801480a:	f04f 33ff 	mov.w	r3, #4294967295
 801480e:	e000      	b.n	8014812 <generate_status_topik+0x4e>
			break;
	}

	return 0;
 8014810:	2300      	movs	r3, #0
}
 8014812:	4618      	mov	r0, r3
 8014814:	3708      	adds	r7, #8
 8014816:	46bd      	mov	sp, r7
 8014818:	bd80      	pop	{r7, pc}
 801481a:	bf00      	nop
 801481c:	08032a14 	.word	0x08032a14
 8014820:	2000089c 	.word	0x2000089c
 8014824:	0803295c 	.word	0x0803295c
 8014828:	08032ad0 	.word	0x08032ad0
 801482c:	20000094 	.word	0x20000094
 8014830:	200000a4 	.word	0x200000a4

08014834 <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af02      	add	r7, sp, #8
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8014842:	6878      	ldr	r0, [r7, #4]
 8014844:	f7fb fe98 	bl	8010578 <__aeabi_f2d>
 8014848:	4602      	mov	r2, r0
 801484a:	460b      	mov	r3, r1
 801484c:	e9cd 2300 	strd	r2, r3, [sp]
 8014850:	68ba      	ldr	r2, [r7, #8]
 8014852:	4904      	ldr	r1, [pc, #16]	; (8014864 <generate_key_value_JSON+0x30>)
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f018 fe01 	bl	802d45c <siprintf>
}
 801485a:	bf00      	nop
 801485c:	3710      	adds	r7, #16
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	08032adc 	.word	0x08032adc

08014868 <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 8014868:	b5b0      	push	{r4, r5, r7, lr}
 801486a:	b084      	sub	sp, #16
 801486c:	af00      	add	r7, sp, #0
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 8014876:	68f8      	ldr	r0, [r7, #12]
 8014878:	f7fb fe5c 	bl	8010534 <__aeabi_ui2d>
 801487c:	4604      	mov	r4, r0
 801487e:	460d      	mov	r5, r1
 8014880:	68b8      	ldr	r0, [r7, #8]
 8014882:	f7fb fe57 	bl	8010534 <__aeabi_ui2d>
 8014886:	f04f 0200 	mov.w	r2, #0
 801488a:	4b17      	ldr	r3, [pc, #92]	; (80148e8 <InitHLW8032+0x80>)
 801488c:	f7fb fecc 	bl	8010628 <__aeabi_dmul>
 8014890:	4602      	mov	r2, r0
 8014892:	460b      	mov	r3, r1
 8014894:	4620      	mov	r0, r4
 8014896:	4629      	mov	r1, r5
 8014898:	f7fb fff0 	bl	801087c <__aeabi_ddiv>
 801489c:	4602      	mov	r2, r0
 801489e:	460b      	mov	r3, r1
 80148a0:	4610      	mov	r0, r2
 80148a2:	4619      	mov	r1, r3
 80148a4:	f7fc f9b8 	bl	8010c18 <__aeabi_d2f>
 80148a8:	4603      	mov	r3, r0
 80148aa:	4a10      	ldr	r2, [pc, #64]	; (80148ec <InitHLW8032+0x84>)
 80148ac:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f7fb fe62 	bl	8010578 <__aeabi_f2d>
 80148b4:	f04f 0200 	mov.w	r2, #0
 80148b8:	4b0b      	ldr	r3, [pc, #44]	; (80148e8 <InitHLW8032+0x80>)
 80148ba:	f7fb feb5 	bl	8010628 <__aeabi_dmul>
 80148be:	4602      	mov	r2, r0
 80148c0:	460b      	mov	r3, r1
 80148c2:	f04f 0000 	mov.w	r0, #0
 80148c6:	490a      	ldr	r1, [pc, #40]	; (80148f0 <InitHLW8032+0x88>)
 80148c8:	f7fb ffd8 	bl	801087c <__aeabi_ddiv>
 80148cc:	4602      	mov	r2, r0
 80148ce:	460b      	mov	r3, r1
 80148d0:	4610      	mov	r0, r2
 80148d2:	4619      	mov	r1, r3
 80148d4:	f7fc f9a0 	bl	8010c18 <__aeabi_d2f>
 80148d8:	4603      	mov	r3, r0
 80148da:	4a06      	ldr	r2, [pc, #24]	; (80148f4 <InitHLW8032+0x8c>)
 80148dc:	6013      	str	r3, [r2, #0]
}
 80148de:	bf00      	nop
 80148e0:	3710      	adds	r7, #16
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bdb0      	pop	{r4, r5, r7, pc}
 80148e6:	bf00      	nop
 80148e8:	408f4000 	.word	0x408f4000
 80148ec:	200000b4 	.word	0x200000b4
 80148f0:	3ff00000 	.word	0x3ff00000
 80148f4:	200000b8 	.word	0x200000b8

080148f8 <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 80148f8:	b480      	push	{r7}
 80148fa:	b085      	sub	sp, #20
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8014900:	2300      	movs	r3, #0
 8014902:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014904:	2302      	movs	r3, #2
 8014906:	73fb      	strb	r3, [r7, #15]
 8014908:	e00e      	b.n	8014928 <Checksum+0x30>
		tmp = string[i];
 801490a:	7bfb      	ldrb	r3, [r7, #15]
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	4413      	add	r3, r2
 8014910:	781b      	ldrb	r3, [r3, #0]
 8014912:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8014914:	7bfb      	ldrb	r3, [r7, #15]
 8014916:	687a      	ldr	r2, [r7, #4]
 8014918:	4413      	add	r3, r2
 801491a:	781a      	ldrb	r2, [r3, #0]
 801491c:	7bbb      	ldrb	r3, [r7, #14]
 801491e:	4413      	add	r3, r2
 8014920:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014922:	7bfb      	ldrb	r3, [r7, #15]
 8014924:	3301      	adds	r3, #1
 8014926:	73fb      	strb	r3, [r7, #15]
 8014928:	7bfb      	ldrb	r3, [r7, #15]
 801492a:	2b16      	cmp	r3, #22
 801492c:	d9ed      	bls.n	801490a <Checksum+0x12>
	}
	if (byte == string[23])
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	3317      	adds	r3, #23
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	7bba      	ldrb	r2, [r7, #14]
 8014936:	429a      	cmp	r2, r3
 8014938:	d101      	bne.n	801493e <Checksum+0x46>
	{
		return 1;
 801493a:	2301      	movs	r3, #1
 801493c:	e000      	b.n	8014940 <Checksum+0x48>
	}
	return 0;
 801493e:	2300      	movs	r3, #0
}
 8014940:	4618      	mov	r0, r3
 8014942:	3714      	adds	r7, #20
 8014944:	46bd      	mov	sp, r7
 8014946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494a:	4770      	bx	lr

0801494c <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	3301      	adds	r3, #1
 8014958:	215a      	movs	r1, #90	; 0x5a
 801495a:	4618      	mov	r0, r3
 801495c:	f7fb fc40 	bl	80101e0 <strcmp>
 8014960:	4603      	mov	r3, r0
 8014962:	2b00      	cmp	r3, #0
 8014964:	d102      	bne.n	801496c <RecvRawString+0x20>
		return -1; //error code
 8014966:	f04f 33ff 	mov.w	r3, #4294967295
 801496a:	e0a9      	b.n	8014ac0 <RecvRawString+0x174>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f7ff ffc3 	bl	80148f8 <Checksum>
 8014972:	4603      	mov	r3, r0
 8014974:	2b00      	cmp	r3, #0
 8014976:	d102      	bne.n	801497e <RecvRawString+0x32>
		return -2; //Checksum Error
 8014978:	f06f 0301 	mvn.w	r3, #1
 801497c:	e0a0      	b.n	8014ac0 <RecvRawString+0x174>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	3302      	adds	r3, #2
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	041a      	lsls	r2, r3, #16
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	3303      	adds	r3, #3
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	021b      	lsls	r3, r3, #8
 801498e:	4413      	add	r3, r2
 8014990:	687a      	ldr	r2, [r7, #4]
 8014992:	3204      	adds	r2, #4
 8014994:	7812      	ldrb	r2, [r2, #0]
 8014996:	4413      	add	r3, r2
 8014998:	4a4b      	ldr	r2, [pc, #300]	; (8014ac8 <RecvRawString+0x17c>)
 801499a:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	3314      	adds	r3, #20
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	099b      	lsrs	r3, r3, #6
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	f003 0301 	and.w	r3, r3, #1
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d00e      	beq.n	80149cc <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	3305      	adds	r3, #5
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	041a      	lsls	r2, r3, #16
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	3306      	adds	r3, #6
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	021b      	lsls	r3, r3, #8
 80149be:	4413      	add	r3, r2
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	3207      	adds	r2, #7
 80149c4:	7812      	ldrb	r2, [r2, #0]
 80149c6:	4413      	add	r3, r2
 80149c8:	4a40      	ldr	r2, [pc, #256]	; (8014acc <RecvRawString+0x180>)
 80149ca:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	3308      	adds	r3, #8
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	041a      	lsls	r2, r3, #16
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	3309      	adds	r3, #9
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	021b      	lsls	r3, r3, #8
 80149dc:	4413      	add	r3, r2
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	320a      	adds	r2, #10
 80149e2:	7812      	ldrb	r2, [r2, #0]
 80149e4:	4413      	add	r3, r2
 80149e6:	4a3a      	ldr	r2, [pc, #232]	; (8014ad0 <RecvRawString+0x184>)
 80149e8:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	3314      	adds	r3, #20
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	095b      	lsrs	r3, r3, #5
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	f003 0301 	and.w	r3, r3, #1
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d00e      	beq.n	8014a1a <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	330b      	adds	r3, #11
 8014a00:	781b      	ldrb	r3, [r3, #0]
 8014a02:	041a      	lsls	r2, r3, #16
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	330c      	adds	r3, #12
 8014a08:	781b      	ldrb	r3, [r3, #0]
 8014a0a:	021b      	lsls	r3, r3, #8
 8014a0c:	4413      	add	r3, r2
 8014a0e:	687a      	ldr	r2, [r7, #4]
 8014a10:	320d      	adds	r2, #13
 8014a12:	7812      	ldrb	r2, [r2, #0]
 8014a14:	4413      	add	r3, r2
 8014a16:	4a2f      	ldr	r2, [pc, #188]	; (8014ad4 <RecvRawString+0x188>)
 8014a18:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	330e      	adds	r3, #14
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	041a      	lsls	r2, r3, #16
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	330f      	adds	r3, #15
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	021b      	lsls	r3, r3, #8
 8014a2a:	4413      	add	r3, r2
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	3210      	adds	r2, #16
 8014a30:	7812      	ldrb	r2, [r2, #0]
 8014a32:	4413      	add	r3, r2
 8014a34:	4a28      	ldr	r2, [pc, #160]	; (8014ad8 <RecvRawString+0x18c>)
 8014a36:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	3314      	adds	r3, #20
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	091b      	lsrs	r3, r3, #4
 8014a40:	b2db      	uxtb	r3, r3
 8014a42:	f003 0301 	and.w	r3, r3, #1
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d00e      	beq.n	8014a68 <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	3311      	adds	r3, #17
 8014a4e:	781b      	ldrb	r3, [r3, #0]
 8014a50:	041a      	lsls	r2, r3, #16
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	3312      	adds	r3, #18
 8014a56:	781b      	ldrb	r3, [r3, #0]
 8014a58:	021b      	lsls	r3, r3, #8
 8014a5a:	4413      	add	r3, r2
 8014a5c:	687a      	ldr	r2, [r7, #4]
 8014a5e:	3213      	adds	r2, #19
 8014a60:	7812      	ldrb	r2, [r2, #0]
 8014a62:	4413      	add	r3, r2
 8014a64:	4a1d      	ldr	r2, [pc, #116]	; (8014adc <RecvRawString+0x190>)
 8014a66:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	3315      	adds	r3, #21
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	021b      	lsls	r3, r3, #8
 8014a72:	b29a      	uxth	r2, r3
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	3316      	adds	r3, #22
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	b29b      	uxth	r3, r3
 8014a7c:	4413      	add	r3, r2
 8014a7e:	b29a      	uxth	r2, r3
 8014a80:	4b17      	ldr	r3, [pc, #92]	; (8014ae0 <RecvRawString+0x194>)
 8014a82:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	3314      	adds	r3, #20
 8014a88:	781b      	ldrb	r3, [r3, #0]
 8014a8a:	09db      	lsrs	r3, r3, #7
 8014a8c:	b2db      	uxtb	r3, r3
 8014a8e:	f003 0301 	and.w	r3, r3, #1
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d004      	beq.n	8014aa0 <RecvRawString+0x154>
	{
		PFData++;
 8014a96:	4b13      	ldr	r3, [pc, #76]	; (8014ae4 <RecvRawString+0x198>)
 8014a98:	681b      	ldr	r3, [r3, #0]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	4a11      	ldr	r2, [pc, #68]	; (8014ae4 <RecvRawString+0x198>)
 8014a9e:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014aa0:	4b11      	ldr	r3, [pc, #68]	; (8014ae8 <RecvRawString+0x19c>)
 8014aa2:	881a      	ldrh	r2, [r3, #0]
 8014aa4:	4b0e      	ldr	r3, [pc, #56]	; (8014ae0 <RecvRawString+0x194>)
 8014aa6:	881b      	ldrh	r3, [r3, #0]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d904      	bls.n	8014ab6 <RecvRawString+0x16a>
		test_flag++;
 8014aac:	4b0f      	ldr	r3, [pc, #60]	; (8014aec <RecvRawString+0x1a0>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	4a0e      	ldr	r2, [pc, #56]	; (8014aec <RecvRawString+0x1a0>)
 8014ab4:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8014ab6:	4b0a      	ldr	r3, [pc, #40]	; (8014ae0 <RecvRawString+0x194>)
 8014ab8:	881a      	ldrh	r2, [r3, #0]
 8014aba:	4b0b      	ldr	r3, [pc, #44]	; (8014ae8 <RecvRawString+0x19c>)
 8014abc:	801a      	strh	r2, [r3, #0]

	return 0;
 8014abe:	2300      	movs	r3, #0
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3708      	adds	r7, #8
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}
 8014ac8:	200008c0 	.word	0x200008c0
 8014acc:	200008c4 	.word	0x200008c4
 8014ad0:	200008d0 	.word	0x200008d0
 8014ad4:	200008d4 	.word	0x200008d4
 8014ad8:	200008c8 	.word	0x200008c8
 8014adc:	200008cc 	.word	0x200008cc
 8014ae0:	200008dc 	.word	0x200008dc
 8014ae4:	200008d8 	.word	0x200008d8
 8014ae8:	200008de 	.word	0x200008de
 8014aec:	200008e0 	.word	0x200008e0

08014af0 <GetVolRaw>:

float GetVolRaw(void){
 8014af0:	b480      	push	{r7}
 8014af2:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014af4:	4b0e      	ldr	r3, [pc, #56]	; (8014b30 <GetVolRaw+0x40>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d102      	bne.n	8014b02 <GetVolRaw+0x12>
		return 0;
 8014afc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014b34 <GetVolRaw+0x44>
 8014b00:	e00d      	b.n	8014b1e <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014b02:	4b0d      	ldr	r3, [pc, #52]	; (8014b38 <GetVolRaw+0x48>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	ee07 3a90 	vmov	s15, r3
 8014b0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014b0e:	4b08      	ldr	r3, [pc, #32]	; (8014b30 <GetVolRaw+0x40>)
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	ee07 3a90 	vmov	s15, r3
 8014b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014b1e:	eef0 7a66 	vmov.f32	s15, s13
 8014b22:	eeb0 0a67 	vmov.f32	s0, s15
 8014b26:	46bd      	mov	sp, r7
 8014b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b2c:	4770      	bx	lr
 8014b2e:	bf00      	nop
 8014b30:	200008c4 	.word	0x200008c4
 8014b34:	00000000 	.word	0x00000000
 8014b38:	200008c0 	.word	0x200008c0

08014b3c <GetVoltage>:

float GetVoltage(void){
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8014b42:	f7ff ffd5 	bl	8014af0 <GetVolRaw>
 8014b46:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 8014b4a:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <GetVoltage+0x44>)
 8014b4c:	edd3 7a00 	vldr	s15, [r3]
 8014b50:	ed97 7a00 	vldr	s14, [r7]
 8014b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014b58:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 8014b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014b60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b68:	d501      	bpl.n	8014b6e <GetVoltage+0x32>
 8014b6a:	4b06      	ldr	r3, [pc, #24]	; (8014b84 <GetVoltage+0x48>)
 8014b6c:	607b      	str	r3, [r7, #4]
	return RealVolt;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	ee07 3a90 	vmov	s15, r3
}
 8014b74:	eeb0 0a67 	vmov.f32	s0, s15
 8014b78:	3708      	adds	r7, #8
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	200000b4 	.word	0x200000b4
 8014b84:	3089705f 	.word	0x3089705f

08014b88 <GetCurrentRaw>:

float GetCurrentRaw(void){
 8014b88:	b480      	push	{r7}
 8014b8a:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8014b8c:	4b0e      	ldr	r3, [pc, #56]	; (8014bc8 <GetCurrentRaw+0x40>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d102      	bne.n	8014b9a <GetCurrentRaw+0x12>
		return 0;
 8014b94:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014bcc <GetCurrentRaw+0x44>
 8014b98:	e00d      	b.n	8014bb6 <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8014b9a:	4b0d      	ldr	r3, [pc, #52]	; (8014bd0 <GetCurrentRaw+0x48>)
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	ee07 3a90 	vmov	s15, r3
 8014ba2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014ba6:	4b08      	ldr	r3, [pc, #32]	; (8014bc8 <GetCurrentRaw+0x40>)
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	ee07 3a90 	vmov	s15, r3
 8014bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014bb2:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014bb6:	eef0 7a66 	vmov.f32	s15, s13
 8014bba:	eeb0 0a67 	vmov.f32	s0, s15
 8014bbe:	46bd      	mov	sp, r7
 8014bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc4:	4770      	bx	lr
 8014bc6:	bf00      	nop
 8014bc8:	200008d4 	.word	0x200008d4
 8014bcc:	00000000 	.word	0x00000000
 8014bd0:	200008d0 	.word	0x200008d0

08014bd4 <GetCurrent>:

float GetCurrent(void){
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b082      	sub	sp, #8
 8014bd8:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8014bda:	f7ff ffd5 	bl	8014b88 <GetCurrentRaw>
 8014bde:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014be2:	4b0d      	ldr	r3, [pc, #52]	; (8014c18 <GetCurrent+0x44>)
 8014be4:	edd3 7a00 	vldr	s15, [r3]
 8014be8:	ed97 7a00 	vldr	s14, [r7]
 8014bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bf0:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8014bf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c00:	d501      	bpl.n	8014c06 <GetCurrent+0x32>
 8014c02:	4b06      	ldr	r3, [pc, #24]	; (8014c1c <GetCurrent+0x48>)
 8014c04:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	ee07 3a90 	vmov	s15, r3
}
 8014c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8014c10:	3708      	adds	r7, #8
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	200000b8 	.word	0x200000b8
 8014c1c:	3089705f 	.word	0x3089705f

08014c20 <GetActivePower>:

float GetActivePower(void){
 8014c20:	b480      	push	{r7}
 8014c22:	b083      	sub	sp, #12
 8014c24:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 8014c26:	4b18      	ldr	r3, [pc, #96]	; (8014c88 <GetActivePower+0x68>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d102      	bne.n	8014c34 <GetActivePower+0x14>
		return 0;
 8014c2e:	f04f 0300 	mov.w	r3, #0
 8014c32:	e01f      	b.n	8014c74 <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014c34:	4b15      	ldr	r3, [pc, #84]	; (8014c8c <GetActivePower+0x6c>)
 8014c36:	681a      	ldr	r2, [r3, #0]
 8014c38:	4b13      	ldr	r3, [pc, #76]	; (8014c88 <GetActivePower+0x68>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c40:	ee07 3a90 	vmov	s15, r3
 8014c44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014c48:	4b11      	ldr	r3, [pc, #68]	; (8014c90 <GetActivePower+0x70>)
 8014c4a:	edd3 7a00 	vldr	s15, [r3]
 8014c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014c52:	4b10      	ldr	r3, [pc, #64]	; (8014c94 <GetActivePower+0x74>)
 8014c54:	edd3 7a00 	vldr	s15, [r3]
 8014c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c5c:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 8014c60:	edd7 7a01 	vldr	s15, [r7, #4]
 8014c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c6c:	d501      	bpl.n	8014c72 <GetActivePower+0x52>
 8014c6e:	4b0a      	ldr	r3, [pc, #40]	; (8014c98 <GetActivePower+0x78>)
 8014c70:	607b      	str	r3, [r7, #4]

	return tmp;
 8014c72:	687b      	ldr	r3, [r7, #4]
}
 8014c74:	ee07 3a90 	vmov	s15, r3
 8014c78:	eeb0 0a67 	vmov.f32	s0, s15
 8014c7c:	370c      	adds	r7, #12
 8014c7e:	46bd      	mov	sp, r7
 8014c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c84:	4770      	bx	lr
 8014c86:	bf00      	nop
 8014c88:	200008cc 	.word	0x200008cc
 8014c8c:	200008c8 	.word	0x200008c8
 8014c90:	200000b4 	.word	0x200000b4
 8014c94:	200000b8 	.word	0x200000b8
 8014c98:	3089705f 	.word	0x3089705f

08014c9c <GetApparentPower>:

float GetApparentPower(void){
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b084      	sub	sp, #16
 8014ca0:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 8014ca2:	f7ff ff4b 	bl	8014b3c <GetVoltage>
 8014ca6:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 8014caa:	f7ff ff93 	bl	8014bd4 <GetCurrent>
 8014cae:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 8014cb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8014cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8014cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014cbe:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 8014cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8014cc6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8014cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cd2:	d501      	bpl.n	8014cd8 <GetApparentPower+0x3c>
 8014cd4:	4b04      	ldr	r3, [pc, #16]	; (8014ce8 <GetApparentPower+0x4c>)
 8014cd6:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	ee07 3a90 	vmov	s15, r3
}
 8014cde:	eeb0 0a67 	vmov.f32	s0, s15
 8014ce2:	3710      	adds	r7, #16
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	3089705f 	.word	0x3089705f

08014cec <PowerFactor>:

float PowerFactor(void){
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b084      	sub	sp, #16
 8014cf0:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 8014cf2:	f7ff ff95 	bl	8014c20 <GetActivePower>
 8014cf6:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8014cfa:	f7ff ffcf 	bl	8014c9c <GetApparentPower>
 8014cfe:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 1;
 8014d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8014d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0e:	d102      	bne.n	8014d16 <PowerFactor+0x2a>
 8014d10:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014d14:	e01e      	b.n	8014d54 <PowerFactor+0x68>
	if (ActivePower 	== 0) return 1;
 8014d16:	edd7 7a03 	vldr	s15, [r7, #12]
 8014d1a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d22:	d102      	bne.n	8014d2a <PowerFactor+0x3e>
 8014d24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014d28:	e014      	b.n	8014d54 <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8014d2a:	ed97 7a03 	vldr	s14, [r7, #12]
 8014d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3a:	dd02      	ble.n	8014d42 <PowerFactor+0x56>
 8014d3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8014d40:	e008      	b.n	8014d54 <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 8014d42:	edd7 6a03 	vldr	s13, [r7, #12]
 8014d46:	ed97 7a02 	vldr	s14, [r7, #8]
 8014d4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014d4e:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 8014d52:	687b      	ldr	r3, [r7, #4]
}
 8014d54:	ee07 3a90 	vmov	s15, r3
 8014d58:	eeb0 0a67 	vmov.f32	s0, s15
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
	...

08014d64 <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 8014d64:	b480      	push	{r7}
 8014d66:	af00      	add	r7, sp, #0
	return test_flag;
 8014d68:	4b03      	ldr	r3, [pc, #12]	; (8014d78 <GetTestPulse+0x14>)
 8014d6a:	681b      	ldr	r3, [r3, #0]
}
 8014d6c:	4618      	mov	r0, r3
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d74:	4770      	bx	lr
 8014d76:	bf00      	nop
 8014d78:	200008e0 	.word	0x200008e0

08014d7c <GetCountedPulse>:

uint32_t GetCountedPulse(){
 8014d7c:	b480      	push	{r7}
 8014d7e:	af00      	add	r7, sp, #0
	return PFData;
 8014d80:	4b03      	ldr	r3, [pc, #12]	; (8014d90 <GetCountedPulse+0x14>)
 8014d82:	681b      	ldr	r3, [r3, #0]
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr
 8014d8e:	bf00      	nop
 8014d90:	200008d8 	.word	0x200008d8

08014d94 <GetPFReg>:

uint32_t GetPFReg(){
 8014d94:	b480      	push	{r7}
 8014d96:	af00      	add	r7, sp, #0
	return PF_reg;
 8014d98:	4b03      	ldr	r3, [pc, #12]	; (8014da8 <GetPFReg+0x14>)
 8014d9a:	881b      	ldrh	r3, [r3, #0]
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da4:	4770      	bx	lr
 8014da6:	bf00      	nop
 8014da8:	200008dc 	.word	0x200008dc
 8014dac:	00000000 	.word	0x00000000

08014db0 <GetKWh>:

float GetKWh(void){
 8014db0:	b5b0      	push	{r4, r5, r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 8014db6:	f7ff ff71 	bl	8014c9c <GetApparentPower>
 8014dba:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 8014dbe:	4b38      	ldr	r3, [pc, #224]	; (8014ea0 <GetKWh+0xf0>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fb fbb6 	bl	8010534 <__aeabi_ui2d>
 8014dc8:	4602      	mov	r2, r0
 8014dca:	460b      	mov	r3, r1
 8014dcc:	f04f 0000 	mov.w	r0, #0
 8014dd0:	4934      	ldr	r1, [pc, #208]	; (8014ea4 <GetKWh+0xf4>)
 8014dd2:	f7fb fd53 	bl	801087c <__aeabi_ddiv>
 8014dd6:	4602      	mov	r2, r0
 8014dd8:	460b      	mov	r3, r1
 8014dda:	4614      	mov	r4, r2
 8014ddc:	461d      	mov	r5, r3
 8014dde:	4b32      	ldr	r3, [pc, #200]	; (8014ea8 <GetKWh+0xf8>)
 8014de0:	ed93 7a00 	vldr	s14, [r3]
 8014de4:	4b31      	ldr	r3, [pc, #196]	; (8014eac <GetKWh+0xfc>)
 8014de6:	edd3 7a00 	vldr	s15, [r3]
 8014dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014dee:	ee17 0a90 	vmov	r0, s15
 8014df2:	f7fb fbc1 	bl	8010578 <__aeabi_f2d>
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	f04f 0000 	mov.w	r0, #0
 8014dfe:	4929      	ldr	r1, [pc, #164]	; (8014ea4 <GetKWh+0xf4>)
 8014e00:	f7fb fd3c 	bl	801087c <__aeabi_ddiv>
 8014e04:	4602      	mov	r2, r0
 8014e06:	460b      	mov	r3, r1
 8014e08:	4620      	mov	r0, r4
 8014e0a:	4629      	mov	r1, r5
 8014e0c:	f7fb fc0c 	bl	8010628 <__aeabi_dmul>
 8014e10:	4602      	mov	r2, r0
 8014e12:	460b      	mov	r3, r1
 8014e14:	4610      	mov	r0, r2
 8014e16:	4619      	mov	r1, r3
 8014e18:	a31d      	add	r3, pc, #116	; (adr r3, 8014e90 <GetKWh+0xe0>)
 8014e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e1e:	f7fb fc03 	bl	8010628 <__aeabi_dmul>
 8014e22:	4602      	mov	r2, r0
 8014e24:	460b      	mov	r3, r1
 8014e26:	4610      	mov	r0, r2
 8014e28:	4619      	mov	r1, r3
 8014e2a:	a31b      	add	r3, pc, #108	; (adr r3, 8014e98 <GetKWh+0xe8>)
 8014e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e30:	f7fb fbfa 	bl	8010628 <__aeabi_dmul>
 8014e34:	4602      	mov	r2, r0
 8014e36:	460b      	mov	r3, r1
 8014e38:	4610      	mov	r0, r2
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	f7fb feec 	bl	8010c18 <__aeabi_d2f>
 8014e40:	4603      	mov	r3, r0
 8014e42:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 8014e44:	f7ff ff8e 	bl	8014d64 <GetTestPulse>
 8014e48:	4603      	mov	r3, r0
 8014e4a:	041c      	lsls	r4, r3, #16
 8014e4c:	f7ff ffa2 	bl	8014d94 <GetPFReg>
 8014e50:	4603      	mov	r3, r0
 8014e52:	4423      	add	r3, r4
 8014e54:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	ee07 3a90 	vmov	s15, r3
 8014e5c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014e60:	ed97 7a01 	vldr	s14, [r7, #4]
 8014e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014e68:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 8014e6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8014e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e78:	d501      	bpl.n	8014e7e <GetKWh+0xce>
 8014e7a:	4b0d      	ldr	r3, [pc, #52]	; (8014eb0 <GetKWh+0x100>)
 8014e7c:	60fb      	str	r3, [r7, #12]

	return kWh;
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	ee07 3a90 	vmov	s15, r3
}
 8014e84:	eeb0 0a67 	vmov.f32	s0, s15
 8014e88:	3710      	adds	r7, #16
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	00000000 	.word	0x00000000
 8014e94:	41cdcd65 	.word	0x41cdcd65
 8014e98:	00000000 	.word	0x00000000
 8014e9c:	40ac2000 	.word	0x40ac2000
 8014ea0:	200008c8 	.word	0x200008c8
 8014ea4:	3ff00000 	.word	0x3ff00000
 8014ea8:	200000b4 	.word	0x200000b4
 8014eac:	200000b8 	.word	0x200000b8
 8014eb0:	3089705f 	.word	0x3089705f

08014eb4 <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 8014eb4:	b480      	push	{r7}
 8014eb6:	af00      	add	r7, sp, #0
 8014eb8:	bf00      	nop
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ec0:	4770      	bx	lr
	...

08014ec4 <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 8014ec4:	b480      	push	{r7}
 8014ec6:	b085      	sub	sp, #20
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	60b9      	str	r1, [r7, #8]
 8014ece:	607a      	str	r2, [r7, #4]
 8014ed0:	603b      	str	r3, [r7, #0]

	if (chip_select){
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d003      	beq.n	8014ee0 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8014ed8:	4a0e      	ldr	r2, [pc, #56]	; (8014f14 <SPI_flash_reg_cb+0x50>)
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	60d3      	str	r3, [r2, #12]
 8014ede:	e002      	b.n	8014ee6 <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8014ee0:	4b0c      	ldr	r3, [pc, #48]	; (8014f14 <SPI_flash_reg_cb+0x50>)
 8014ee2:	4a0d      	ldr	r2, [pc, #52]	; (8014f18 <SPI_flash_reg_cb+0x54>)
 8014ee4:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d003      	beq.n	8014ef4 <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8014eec:	4a09      	ldr	r2, [pc, #36]	; (8014f14 <SPI_flash_reg_cb+0x50>)
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	6113      	str	r3, [r2, #16]
 8014ef2:	e002      	b.n	8014efa <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 8014ef4:	4b07      	ldr	r3, [pc, #28]	; (8014f14 <SPI_flash_reg_cb+0x50>)
 8014ef6:	4a08      	ldr	r2, [pc, #32]	; (8014f18 <SPI_flash_reg_cb+0x54>)
 8014ef8:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8014efa:	4a06      	ldr	r2, [pc, #24]	; (8014f14 <SPI_flash_reg_cb+0x50>)
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8014f00:	4a04      	ldr	r2, [pc, #16]	; (8014f14 <SPI_flash_reg_cb+0x50>)
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	6093      	str	r3, [r2, #8]

}
 8014f06:	bf00      	nop
 8014f08:	3714      	adds	r7, #20
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f10:	4770      	bx	lr
 8014f12:	bf00      	nop
 8014f14:	200008e4 	.word	0x200008e4
 8014f18:	08014eb5 	.word	0x08014eb5

08014f1c <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8014f20:	f000 f89c 	bl	801505c <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 8014f24:	2066      	movs	r0, #102	; 0x66
 8014f26:	f000 fa1f 	bl	8015368 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8014f2a:	2099      	movs	r0, #153	; 0x99
 8014f2c:	f000 fa1c 	bl	8015368 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8014f30:	f000 f89e 	bl	8015070 <sFLASH_CS_HIGH>
}
 8014f34:	bf00      	nop
 8014f36:	bd80      	pop	{r7, pc}

08014f38 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 8014f38:	b590      	push	{r4, r7, lr}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 8014f40:	f7ff ffec 	bl	8014f1c <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 8014f44:	f000 f9d2 	bl	80152ec <sFLASH_ReadID>
 8014f48:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	4a3e      	ldr	r2, [pc, #248]	; (8015048 <sFLASH_GetInfo+0x110>)
 8014f4e:	4293      	cmp	r3, r2
 8014f50:	d03f      	beq.n	8014fd2 <sFLASH_GetInfo+0x9a>
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	4a3c      	ldr	r2, [pc, #240]	; (8015048 <sFLASH_GetInfo+0x110>)
 8014f56:	4293      	cmp	r3, r2
 8014f58:	d867      	bhi.n	801502a <sFLASH_GetInfo+0xf2>
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	4a3b      	ldr	r2, [pc, #236]	; (801504c <sFLASH_GetInfo+0x114>)
 8014f5e:	4293      	cmp	r3, r2
 8014f60:	d021      	beq.n	8014fa6 <sFLASH_GetInfo+0x6e>
 8014f62:	68fb      	ldr	r3, [r7, #12]
 8014f64:	4a39      	ldr	r2, [pc, #228]	; (801504c <sFLASH_GetInfo+0x114>)
 8014f66:	4293      	cmp	r3, r2
 8014f68:	d85f      	bhi.n	801502a <sFLASH_GetInfo+0xf2>
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	4a38      	ldr	r2, [pc, #224]	; (8015050 <sFLASH_GetInfo+0x118>)
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d045      	beq.n	8014ffe <sFLASH_GetInfo+0xc6>
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	4a37      	ldr	r2, [pc, #220]	; (8015054 <sFLASH_GetInfo+0x11c>)
 8014f76:	4293      	cmp	r3, r2
 8014f78:	d157      	bne.n	801502a <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 8014f7a:	4b37      	ldr	r3, [pc, #220]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014f7c:	4a35      	ldr	r2, [pc, #212]	; (8015054 <sFLASH_GetInfo+0x11c>)
 8014f7e:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014f80:	4b35      	ldr	r3, [pc, #212]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014f82:	2201      	movs	r2, #1
 8014f84:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014f86:	4b34      	ldr	r3, [pc, #208]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014f88:	2201      	movs	r2, #1
 8014f8a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014f8c:	4b32      	ldr	r3, [pc, #200]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014f8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014f92:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014f94:	4b30      	ldr	r3, [pc, #192]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014f96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014f9a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 8014f9c:	4b2e      	ldr	r3, [pc, #184]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014fa2:	819a      	strh	r2, [r3, #12]
			break;
 8014fa4:	e045      	b.n	8015032 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 8014fa6:	4b2c      	ldr	r3, [pc, #176]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fa8:	4a28      	ldr	r2, [pc, #160]	; (801504c <sFLASH_GetInfo+0x114>)
 8014faa:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014fac:	4b2a      	ldr	r3, [pc, #168]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fae:	2201      	movs	r2, #1
 8014fb0:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014fb2:	4b29      	ldr	r3, [pc, #164]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fb4:	2201      	movs	r2, #1
 8014fb6:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014fb8:	4b27      	ldr	r3, [pc, #156]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014fbe:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014fc0:	4b25      	ldr	r3, [pc, #148]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014fc6:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8014fc8:	4b23      	ldr	r3, [pc, #140]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014fce:	819a      	strh	r2, [r3, #12]
			break;
 8014fd0:	e02f      	b.n	8015032 <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 8014fd2:	4b21      	ldr	r3, [pc, #132]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fd4:	4a1c      	ldr	r2, [pc, #112]	; (8015048 <sFLASH_GetInfo+0x110>)
 8014fd6:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8014fd8:	4b1f      	ldr	r3, [pc, #124]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fda:	2201      	movs	r2, #1
 8014fdc:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8014fde:	4b1e      	ldr	r3, [pc, #120]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fe0:	2201      	movs	r2, #1
 8014fe2:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8014fe4:	4b1c      	ldr	r3, [pc, #112]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014fea:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8014fec:	4b1a      	ldr	r3, [pc, #104]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014ff2:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 8014ff4:	4b18      	ldr	r3, [pc, #96]	; (8015058 <sFLASH_GetInfo+0x120>)
 8014ff6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ffa:	819a      	strh	r2, [r3, #12]
			break;
 8014ffc:	e019      	b.n	8015032 <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8014ffe:	4b16      	ldr	r3, [pc, #88]	; (8015058 <sFLASH_GetInfo+0x120>)
 8015000:	4a13      	ldr	r2, [pc, #76]	; (8015050 <sFLASH_GetInfo+0x118>)
 8015002:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015004:	4b14      	ldr	r3, [pc, #80]	; (8015058 <sFLASH_GetInfo+0x120>)
 8015006:	2201      	movs	r2, #1
 8015008:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 801500a:	4b13      	ldr	r3, [pc, #76]	; (8015058 <sFLASH_GetInfo+0x120>)
 801500c:	2201      	movs	r2, #1
 801500e:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015010:	4b11      	ldr	r3, [pc, #68]	; (8015058 <sFLASH_GetInfo+0x120>)
 8015012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015016:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015018:	4b0f      	ldr	r3, [pc, #60]	; (8015058 <sFLASH_GetInfo+0x120>)
 801501a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801501e:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015020:	4b0d      	ldr	r3, [pc, #52]	; (8015058 <sFLASH_GetInfo+0x120>)
 8015022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8015026:	819a      	strh	r2, [r3, #12]
			break;
 8015028:	e003      	b.n	8015032 <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 801502a:	4b0b      	ldr	r3, [pc, #44]	; (8015058 <sFLASH_GetInfo+0x120>)
 801502c:	2200      	movs	r2, #0
 801502e:	601a      	str	r2, [r3, #0]
			break;
 8015030:	bf00      	nop
	}

	return flash_info;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	4a08      	ldr	r2, [pc, #32]	; (8015058 <sFLASH_GetInfo+0x120>)
 8015036:	461c      	mov	r4, r3
 8015038:	4613      	mov	r3, r2
 801503a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801503c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8015040:	6878      	ldr	r0, [r7, #4]
 8015042:	3714      	adds	r7, #20
 8015044:	46bd      	mov	sp, r7
 8015046:	bd90      	pop	{r4, r7, pc}
 8015048:	00ef4017 	.word	0x00ef4017
 801504c:	00ef4016 	.word	0x00ef4016
 8015050:	00c22016 	.word	0x00c22016
 8015054:	00ef4015 	.word	0x00ef4015
 8015058:	200008f8 	.word	0x200008f8

0801505c <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 801505c:	b580      	push	{r7, lr}
 801505e:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8015060:	4b02      	ldr	r3, [pc, #8]	; (801506c <sFLASH_CS_LOW+0x10>)
 8015062:	68db      	ldr	r3, [r3, #12]
 8015064:	4798      	blx	r3

}
 8015066:	bf00      	nop
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	200008e4 	.word	0x200008e4

08015070 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8015070:	b580      	push	{r7, lr}
 8015072:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 8015074:	4b02      	ldr	r3, [pc, #8]	; (8015080 <sFLASH_CS_HIGH+0x10>)
 8015076:	691b      	ldr	r3, [r3, #16]
 8015078:	4798      	blx	r3
}
 801507a:	bf00      	nop
 801507c:	bd80      	pop	{r7, pc}
 801507e:	bf00      	nop
 8015080:	200008e4 	.word	0x200008e4

08015084 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 801508c:	f000 f97c 	bl	8015388 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015090:	f7ff ffe4 	bl	801505c <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 8015094:	2020      	movs	r0, #32
 8015096:	f000 f967 	bl	8015368 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	0c1b      	lsrs	r3, r3, #16
 801509e:	b2db      	uxtb	r3, r3
 80150a0:	4618      	mov	r0, r3
 80150a2:	f000 f961 	bl	8015368 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	0a1b      	lsrs	r3, r3, #8
 80150aa:	b2db      	uxtb	r3, r3
 80150ac:	4618      	mov	r0, r3
 80150ae:	f000 f95b 	bl	8015368 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	b2db      	uxtb	r3, r3
 80150b6:	4618      	mov	r0, r3
 80150b8:	f000 f956 	bl	8015368 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80150bc:	f7ff ffd8 	bl	8015070 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80150c0:	f000 f96d 	bl	801539e <sFLASH_WaitForWriteEnd>
}
 80150c4:	bf00      	nop
 80150c6:	3708      	adds	r7, #8
 80150c8:	46bd      	mov	sp, r7
 80150ca:	bd80      	pop	{r7, pc}

080150cc <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b084      	sub	sp, #16
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	4613      	mov	r3, r2
 80150d8:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 80150da:	f000 f955 	bl	8015388 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80150de:	f7ff ffbd 	bl	801505c <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 80150e2:	2002      	movs	r0, #2
 80150e4:	f000 f940 	bl	8015368 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	0c1b      	lsrs	r3, r3, #16
 80150ec:	b2db      	uxtb	r3, r3
 80150ee:	4618      	mov	r0, r3
 80150f0:	f000 f93a 	bl	8015368 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	0a1b      	lsrs	r3, r3, #8
 80150f8:	b2db      	uxtb	r3, r3
 80150fa:	4618      	mov	r0, r3
 80150fc:	f000 f934 	bl	8015368 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	b2db      	uxtb	r3, r3
 8015104:	4618      	mov	r0, r3
 8015106:	f000 f92f 	bl	8015368 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 801510a:	e007      	b.n	801511c <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	781b      	ldrb	r3, [r3, #0]
 8015110:	4618      	mov	r0, r3
 8015112:	f000 f929 	bl	8015368 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	3301      	adds	r3, #1
 801511a:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 801511c:	88fb      	ldrh	r3, [r7, #6]
 801511e:	1e5a      	subs	r2, r3, #1
 8015120:	80fa      	strh	r2, [r7, #6]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d1f2      	bne.n	801510c <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015126:	f7ff ffa3 	bl	8015070 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 801512a:	f000 f938 	bl	801539e <sFLASH_WaitForWriteEnd>
}
 801512e:	bf00      	nop
 8015130:	3710      	adds	r7, #16
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}

08015136 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 8015136:	b580      	push	{r7, lr}
 8015138:	b086      	sub	sp, #24
 801513a:	af00      	add	r7, sp, #0
 801513c:	60f8      	str	r0, [r7, #12]
 801513e:	60b9      	str	r1, [r7, #8]
 8015140:	4613      	mov	r3, r2
 8015142:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	75fb      	strb	r3, [r7, #23]
 8015148:	2300      	movs	r3, #0
 801514a:	75bb      	strb	r3, [r7, #22]
 801514c:	2300      	movs	r3, #0
 801514e:	757b      	strb	r3, [r7, #21]
 8015150:	2300      	movs	r3, #0
 8015152:	753b      	strb	r3, [r7, #20]
 8015154:	2300      	movs	r3, #0
 8015156:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 801515c:	7d7b      	ldrb	r3, [r7, #21]
 801515e:	425b      	negs	r3, r3
 8015160:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015162:	88fb      	ldrh	r3, [r7, #6]
 8015164:	0a1b      	lsrs	r3, r3, #8
 8015166:	b29b      	uxth	r3, r3
 8015168:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801516a:	88fb      	ldrh	r3, [r7, #6]
 801516c:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 801516e:	7d7b      	ldrb	r3, [r7, #21]
 8015170:	2b00      	cmp	r3, #0
 8015172:	d124      	bne.n	80151be <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 8015174:	7dfb      	ldrb	r3, [r7, #23]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d114      	bne.n	80151a4 <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801517a:	88fb      	ldrh	r3, [r7, #6]
 801517c:	461a      	mov	r2, r3
 801517e:	68b9      	ldr	r1, [r7, #8]
 8015180:	68f8      	ldr	r0, [r7, #12]
 8015182:	f7ff ffa3 	bl	80150cc <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 8015186:	e07b      	b.n	8015280 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015188:	f44f 7280 	mov.w	r2, #256	; 0x100
 801518c:	68b9      	ldr	r1, [r7, #8]
 801518e:	68f8      	ldr	r0, [r7, #12]
 8015190:	f7ff ff9c 	bl	80150cc <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801519a:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801519c:	68fb      	ldr	r3, [r7, #12]
 801519e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80151a2:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80151a4:	7dfb      	ldrb	r3, [r7, #23]
 80151a6:	1e5a      	subs	r2, r3, #1
 80151a8:	75fa      	strb	r2, [r7, #23]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d1ec      	bne.n	8015188 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80151ae:	7dbb      	ldrb	r3, [r7, #22]
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	461a      	mov	r2, r3
 80151b4:	68b9      	ldr	r1, [r7, #8]
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	f7ff ff88 	bl	80150cc <sFLASH_WritePage>
}
 80151bc:	e060      	b.n	8015280 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80151be:	7dfb      	ldrb	r3, [r7, #23]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d125      	bne.n	8015210 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80151c4:	7dba      	ldrb	r2, [r7, #22]
 80151c6:	7d3b      	ldrb	r3, [r7, #20]
 80151c8:	429a      	cmp	r2, r3
 80151ca:	d91a      	bls.n	8015202 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 80151cc:	7dba      	ldrb	r2, [r7, #22]
 80151ce:	7d3b      	ldrb	r3, [r7, #20]
 80151d0:	1ad3      	subs	r3, r2, r3
 80151d2:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80151d4:	7d3b      	ldrb	r3, [r7, #20]
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	461a      	mov	r2, r3
 80151da:	68b9      	ldr	r1, [r7, #8]
 80151dc:	68f8      	ldr	r0, [r7, #12]
 80151de:	f7ff ff75 	bl	80150cc <sFLASH_WritePage>
        WriteAddr +=  count;
 80151e2:	7d3b      	ldrb	r3, [r7, #20]
 80151e4:	68ba      	ldr	r2, [r7, #8]
 80151e6:	4413      	add	r3, r2
 80151e8:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 80151ea:	7d3b      	ldrb	r3, [r7, #20]
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	4413      	add	r3, r2
 80151f0:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 80151f2:	7cfb      	ldrb	r3, [r7, #19]
 80151f4:	b29b      	uxth	r3, r3
 80151f6:	461a      	mov	r2, r3
 80151f8:	68b9      	ldr	r1, [r7, #8]
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f7ff ff66 	bl	80150cc <sFLASH_WritePage>
}
 8015200:	e03e      	b.n	8015280 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 8015202:	88fb      	ldrh	r3, [r7, #6]
 8015204:	461a      	mov	r2, r3
 8015206:	68b9      	ldr	r1, [r7, #8]
 8015208:	68f8      	ldr	r0, [r7, #12]
 801520a:	f7ff ff5f 	bl	80150cc <sFLASH_WritePage>
}
 801520e:	e037      	b.n	8015280 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8015210:	7d3b      	ldrb	r3, [r7, #20]
 8015212:	b29b      	uxth	r3, r3
 8015214:	88fa      	ldrh	r2, [r7, #6]
 8015216:	1ad3      	subs	r3, r2, r3
 8015218:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 801521a:	88fb      	ldrh	r3, [r7, #6]
 801521c:	0a1b      	lsrs	r3, r3, #8
 801521e:	b29b      	uxth	r3, r3
 8015220:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015222:	88fb      	ldrh	r3, [r7, #6]
 8015224:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 8015226:	7d3b      	ldrb	r3, [r7, #20]
 8015228:	b29b      	uxth	r3, r3
 801522a:	461a      	mov	r2, r3
 801522c:	68b9      	ldr	r1, [r7, #8]
 801522e:	68f8      	ldr	r0, [r7, #12]
 8015230:	f7ff ff4c 	bl	80150cc <sFLASH_WritePage>
      WriteAddr +=  count;
 8015234:	7d3b      	ldrb	r3, [r7, #20]
 8015236:	68ba      	ldr	r2, [r7, #8]
 8015238:	4413      	add	r3, r2
 801523a:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 801523c:	7d3b      	ldrb	r3, [r7, #20]
 801523e:	68fa      	ldr	r2, [r7, #12]
 8015240:	4413      	add	r3, r2
 8015242:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015244:	e00d      	b.n	8015262 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 8015246:	f44f 7280 	mov.w	r2, #256	; 0x100
 801524a:	68b9      	ldr	r1, [r7, #8]
 801524c:	68f8      	ldr	r0, [r7, #12]
 801524e:	f7ff ff3d 	bl	80150cc <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015258:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015260:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 8015262:	7dfb      	ldrb	r3, [r7, #23]
 8015264:	1e5a      	subs	r2, r3, #1
 8015266:	75fa      	strb	r2, [r7, #23]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d1ec      	bne.n	8015246 <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 801526c:	7dbb      	ldrb	r3, [r7, #22]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d006      	beq.n	8015280 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 8015272:	7dbb      	ldrb	r3, [r7, #22]
 8015274:	b29b      	uxth	r3, r3
 8015276:	461a      	mov	r2, r3
 8015278:	68b9      	ldr	r1, [r7, #8]
 801527a:	68f8      	ldr	r0, [r7, #12]
 801527c:	f7ff ff26 	bl	80150cc <sFLASH_WritePage>
}
 8015280:	bf00      	nop
 8015282:	3718      	adds	r7, #24
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b084      	sub	sp, #16
 801528c:	af00      	add	r7, sp, #0
 801528e:	60f8      	str	r0, [r7, #12]
 8015290:	60b9      	str	r1, [r7, #8]
 8015292:	4613      	mov	r3, r2
 8015294:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015296:	f7ff fee1 	bl	801505c <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 801529a:	2003      	movs	r0, #3
 801529c:	f000 f864 	bl	8015368 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	0c1b      	lsrs	r3, r3, #16
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	4618      	mov	r0, r3
 80152a8:	f000 f85e 	bl	8015368 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	0a1b      	lsrs	r3, r3, #8
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	4618      	mov	r0, r3
 80152b4:	f000 f858 	bl	8015368 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 80152b8:	68bb      	ldr	r3, [r7, #8]
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	4618      	mov	r0, r3
 80152be:	f000 f853 	bl	8015368 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 80152c2:	e008      	b.n	80152d6 <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 80152c4:	f000 f846 	bl	8015354 <sFLASH_ReadByte>
 80152c8:	4603      	mov	r3, r0
 80152ca:	461a      	mov	r2, r3
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	3301      	adds	r3, #1
 80152d4:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 80152d6:	88fb      	ldrh	r3, [r7, #6]
 80152d8:	1e5a      	subs	r2, r3, #1
 80152da:	80fa      	strh	r2, [r7, #6]
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d1f1      	bne.n	80152c4 <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80152e0:	f7ff fec6 	bl	8015070 <sFLASH_CS_HIGH>
}
 80152e4:	bf00      	nop
 80152e6:	3710      	adds	r7, #16
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b084      	sub	sp, #16
 80152f0:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80152f2:	2300      	movs	r3, #0
 80152f4:	60fb      	str	r3, [r7, #12]
 80152f6:	2300      	movs	r3, #0
 80152f8:	60bb      	str	r3, [r7, #8]
 80152fa:	2300      	movs	r3, #0
 80152fc:	607b      	str	r3, [r7, #4]
 80152fe:	2300      	movs	r3, #0
 8015300:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015302:	f7ff feab 	bl	801505c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015306:	f7ff feb3 	bl	8015070 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801530a:	f7ff fea7 	bl	801505c <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801530e:	f7ff feaf 	bl	8015070 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015312:	f7ff fea3 	bl	801505c <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 8015316:	209f      	movs	r0, #159	; 0x9f
 8015318:	f000 f826 	bl	8015368 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 801531c:	f000 f81a 	bl	8015354 <sFLASH_ReadByte>
 8015320:	4603      	mov	r3, r0
 8015322:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 8015324:	f000 f816 	bl	8015354 <sFLASH_ReadByte>
 8015328:	4603      	mov	r3, r0
 801532a:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 801532c:	f000 f812 	bl	8015354 <sFLASH_ReadByte>
 8015330:	4603      	mov	r3, r0
 8015332:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015334:	f7ff fe9c 	bl	8015070 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	041a      	lsls	r2, r3, #16
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	021b      	lsls	r3, r3, #8
 8015340:	4313      	orrs	r3, r2
 8015342:	683a      	ldr	r2, [r7, #0]
 8015344:	4313      	orrs	r3, r2
 8015346:	60fb      	str	r3, [r7, #12]

  return Temp;
 8015348:	68fb      	ldr	r3, [r7, #12]
}
 801534a:	4618      	mov	r0, r3
 801534c:	3710      	adds	r7, #16
 801534e:	46bd      	mov	sp, r7
 8015350:	bd80      	pop	{r7, pc}
	...

08015354 <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 8015354:	b580      	push	{r7, lr}
 8015356:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8015358:	4b02      	ldr	r3, [pc, #8]	; (8015364 <sFLASH_ReadByte+0x10>)
 801535a:	685b      	ldr	r3, [r3, #4]
 801535c:	4798      	blx	r3
 801535e:	4603      	mov	r3, r0
}
 8015360:	4618      	mov	r0, r3
 8015362:	bd80      	pop	{r7, pc}
 8015364:	200008e4 	.word	0x200008e4

08015368 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015368:	b580      	push	{r7, lr}
 801536a:	b082      	sub	sp, #8
 801536c:	af00      	add	r7, sp, #0
 801536e:	4603      	mov	r3, r0
 8015370:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 8015372:	4b04      	ldr	r3, [pc, #16]	; (8015384 <sFLASH_SendByte+0x1c>)
 8015374:	689b      	ldr	r3, [r3, #8]
 8015376:	79fa      	ldrb	r2, [r7, #7]
 8015378:	4610      	mov	r0, r2
 801537a:	4798      	blx	r3
}
 801537c:	bf00      	nop
 801537e:	3708      	adds	r7, #8
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	200008e4 	.word	0x200008e4

08015388 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801538c:	f7ff fe66 	bl	801505c <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 8015390:	2006      	movs	r0, #6
 8015392:	f7ff ffe9 	bl	8015368 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015396:	f7ff fe6b 	bl	8015070 <sFLASH_CS_HIGH>
}
 801539a:	bf00      	nop
 801539c:	bd80      	pop	{r7, pc}

0801539e <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 801539e:	b580      	push	{r7, lr}
 80153a0:	b082      	sub	sp, #8
 80153a2:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 80153a4:	2300      	movs	r3, #0
 80153a6:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80153a8:	f7ff fe58 	bl	801505c <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 80153ac:	2005      	movs	r0, #5
 80153ae:	f7ff ffdb 	bl	8015368 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 80153b2:	f7ff ffcf 	bl	8015354 <sFLASH_ReadByte>
 80153b6:	4603      	mov	r3, r0
 80153b8:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 80153ba:	79fb      	ldrb	r3, [r7, #7]
 80153bc:	f003 0301 	and.w	r3, r3, #1
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d1f6      	bne.n	80153b2 <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80153c4:	f7ff fe54 	bl	8015070 <sFLASH_CS_HIGH>
}
 80153c8:	bf00      	nop
 80153ca:	3708      	adds	r7, #8
 80153cc:	46bd      	mov	sp, r7
 80153ce:	bd80      	pop	{r7, pc}

080153d0 <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 80153d0:	b084      	sub	sp, #16
 80153d2:	b580      	push	{r7, lr}
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	f107 0c08 	add.w	ip, r7, #8
 80153da:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 80153de:	4b07      	ldr	r3, [pc, #28]	; (80153fc <SPI_flash_set+0x2c>)
 80153e0:	4618      	mov	r0, r3
 80153e2:	f107 0308 	add.w	r3, r7, #8
 80153e6:	2258      	movs	r2, #88	; 0x58
 80153e8:	4619      	mov	r1, r3
 80153ea:	f018 fb5c 	bl	802daa6 <memcpy>
}
 80153ee:	bf00      	nop
 80153f0:	46bd      	mov	sp, r7
 80153f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80153f6:	b004      	add	sp, #16
 80153f8:	4770      	bx	lr
 80153fa:	bf00      	nop
 80153fc:	20000908 	.word	0x20000908

08015400 <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 8015400:	b580      	push	{r7, lr}
 8015402:	b082      	sub	sp, #8
 8015404:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 8015406:	1df9      	adds	r1, r7, #7
 8015408:	f241 3388 	movw	r3, #5000	; 0x1388
 801540c:	2201      	movs	r2, #1
 801540e:	4804      	ldr	r0, [pc, #16]	; (8015420 <SPI_flash_read_byte+0x20>)
 8015410:	f001 fa8a 	bl	8016928 <HAL_SPI_Receive>
	return byte;
 8015414:	79fb      	ldrb	r3, [r7, #7]
}
 8015416:	4618      	mov	r0, r3
 8015418:	3708      	adds	r7, #8
 801541a:	46bd      	mov	sp, r7
 801541c:	bd80      	pop	{r7, pc}
 801541e:	bf00      	nop
 8015420:	20000908 	.word	0x20000908

08015424 <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	4603      	mov	r3, r0
 801542c:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 801542e:	1df9      	adds	r1, r7, #7
 8015430:	f241 3388 	movw	r3, #5000	; 0x1388
 8015434:	2201      	movs	r2, #1
 8015436:	4803      	ldr	r0, [pc, #12]	; (8015444 <SPI_flash_send_byte+0x20>)
 8015438:	f001 f933 	bl	80166a2 <HAL_SPI_Transmit>

}
 801543c:	bf00      	nop
 801543e:	3708      	adds	r7, #8
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}
 8015444:	20000908 	.word	0x20000908

08015448 <SPI_flash_select>:

void SPI_flash_select(void){
 8015448:	b580      	push	{r7, lr}
 801544a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 801544c:	2200      	movs	r2, #0
 801544e:	2110      	movs	r1, #16
 8015450:	4802      	ldr	r0, [pc, #8]	; (801545c <SPI_flash_select+0x14>)
 8015452:	f000 fb67 	bl	8015b24 <HAL_GPIO_WritePin>
}
 8015456:	bf00      	nop
 8015458:	bd80      	pop	{r7, pc}
 801545a:	bf00      	nop
 801545c:	40020000 	.word	0x40020000

08015460 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 8015460:	b580      	push	{r7, lr}
 8015462:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8015464:	2201      	movs	r2, #1
 8015466:	2110      	movs	r1, #16
 8015468:	4802      	ldr	r0, [pc, #8]	; (8015474 <SPI_flash_deselect+0x14>)
 801546a:	f000 fb5b 	bl	8015b24 <HAL_GPIO_WritePin>
}
 801546e:	bf00      	nop
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	40020000 	.word	0x40020000

08015478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801547c:	4b0e      	ldr	r3, [pc, #56]	; (80154b8 <HAL_Init+0x40>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	4a0d      	ldr	r2, [pc, #52]	; (80154b8 <HAL_Init+0x40>)
 8015482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8015488:	4b0b      	ldr	r3, [pc, #44]	; (80154b8 <HAL_Init+0x40>)
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	4a0a      	ldr	r2, [pc, #40]	; (80154b8 <HAL_Init+0x40>)
 801548e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015494:	4b08      	ldr	r3, [pc, #32]	; (80154b8 <HAL_Init+0x40>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	4a07      	ldr	r2, [pc, #28]	; (80154b8 <HAL_Init+0x40>)
 801549a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801549e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80154a0:	2003      	movs	r0, #3
 80154a2:	f000 f8d8 	bl	8015656 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80154a6:	200f      	movs	r0, #15
 80154a8:	f7fd fa74 	bl	8012994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80154ac:	f7fd f956 	bl	801275c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80154b0:	2300      	movs	r3, #0
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	bd80      	pop	{r7, pc}
 80154b6:	bf00      	nop
 80154b8:	40023c00 	.word	0x40023c00

080154bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80154bc:	b480      	push	{r7}
 80154be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80154c0:	4b06      	ldr	r3, [pc, #24]	; (80154dc <HAL_IncTick+0x20>)
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	461a      	mov	r2, r3
 80154c6:	4b06      	ldr	r3, [pc, #24]	; (80154e0 <HAL_IncTick+0x24>)
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	4413      	add	r3, r2
 80154cc:	4a04      	ldr	r2, [pc, #16]	; (80154e0 <HAL_IncTick+0x24>)
 80154ce:	6013      	str	r3, [r2, #0]
}
 80154d0:	bf00      	nop
 80154d2:	46bd      	mov	sp, r7
 80154d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop
 80154dc:	200000c0 	.word	0x200000c0
 80154e0:	20000960 	.word	0x20000960

080154e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80154e4:	b480      	push	{r7}
 80154e6:	af00      	add	r7, sp, #0
  return uwTick;
 80154e8:	4b03      	ldr	r3, [pc, #12]	; (80154f8 <HAL_GetTick+0x14>)
 80154ea:	681b      	ldr	r3, [r3, #0]
}
 80154ec:	4618      	mov	r0, r3
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr
 80154f6:	bf00      	nop
 80154f8:	20000960 	.word	0x20000960

080154fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80154fc:	b480      	push	{r7}
 80154fe:	b085      	sub	sp, #20
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	f003 0307 	and.w	r3, r3, #7
 801550a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801550c:	4b0c      	ldr	r3, [pc, #48]	; (8015540 <__NVIC_SetPriorityGrouping+0x44>)
 801550e:	68db      	ldr	r3, [r3, #12]
 8015510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8015512:	68ba      	ldr	r2, [r7, #8]
 8015514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015518:	4013      	ands	r3, r2
 801551a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8015524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801552c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801552e:	4a04      	ldr	r2, [pc, #16]	; (8015540 <__NVIC_SetPriorityGrouping+0x44>)
 8015530:	68bb      	ldr	r3, [r7, #8]
 8015532:	60d3      	str	r3, [r2, #12]
}
 8015534:	bf00      	nop
 8015536:	3714      	adds	r7, #20
 8015538:	46bd      	mov	sp, r7
 801553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553e:	4770      	bx	lr
 8015540:	e000ed00 	.word	0xe000ed00

08015544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8015544:	b480      	push	{r7}
 8015546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015548:	4b04      	ldr	r3, [pc, #16]	; (801555c <__NVIC_GetPriorityGrouping+0x18>)
 801554a:	68db      	ldr	r3, [r3, #12]
 801554c:	0a1b      	lsrs	r3, r3, #8
 801554e:	f003 0307 	and.w	r3, r3, #7
}
 8015552:	4618      	mov	r0, r3
 8015554:	46bd      	mov	sp, r7
 8015556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555a:	4770      	bx	lr
 801555c:	e000ed00 	.word	0xe000ed00

08015560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015560:	b480      	push	{r7}
 8015562:	b083      	sub	sp, #12
 8015564:	af00      	add	r7, sp, #0
 8015566:	4603      	mov	r3, r0
 8015568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801556a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801556e:	2b00      	cmp	r3, #0
 8015570:	db0b      	blt.n	801558a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015572:	79fb      	ldrb	r3, [r7, #7]
 8015574:	f003 021f 	and.w	r2, r3, #31
 8015578:	4907      	ldr	r1, [pc, #28]	; (8015598 <__NVIC_EnableIRQ+0x38>)
 801557a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801557e:	095b      	lsrs	r3, r3, #5
 8015580:	2001      	movs	r0, #1
 8015582:	fa00 f202 	lsl.w	r2, r0, r2
 8015586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801558a:	bf00      	nop
 801558c:	370c      	adds	r7, #12
 801558e:	46bd      	mov	sp, r7
 8015590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015594:	4770      	bx	lr
 8015596:	bf00      	nop
 8015598:	e000e100 	.word	0xe000e100

0801559c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801559c:	b480      	push	{r7}
 801559e:	b083      	sub	sp, #12
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	4603      	mov	r3, r0
 80155a4:	6039      	str	r1, [r7, #0]
 80155a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	db0a      	blt.n	80155c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80155b0:	683b      	ldr	r3, [r7, #0]
 80155b2:	b2da      	uxtb	r2, r3
 80155b4:	490c      	ldr	r1, [pc, #48]	; (80155e8 <__NVIC_SetPriority+0x4c>)
 80155b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155ba:	0112      	lsls	r2, r2, #4
 80155bc:	b2d2      	uxtb	r2, r2
 80155be:	440b      	add	r3, r1
 80155c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80155c4:	e00a      	b.n	80155dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80155c6:	683b      	ldr	r3, [r7, #0]
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	4908      	ldr	r1, [pc, #32]	; (80155ec <__NVIC_SetPriority+0x50>)
 80155cc:	79fb      	ldrb	r3, [r7, #7]
 80155ce:	f003 030f 	and.w	r3, r3, #15
 80155d2:	3b04      	subs	r3, #4
 80155d4:	0112      	lsls	r2, r2, #4
 80155d6:	b2d2      	uxtb	r2, r2
 80155d8:	440b      	add	r3, r1
 80155da:	761a      	strb	r2, [r3, #24]
}
 80155dc:	bf00      	nop
 80155de:	370c      	adds	r7, #12
 80155e0:	46bd      	mov	sp, r7
 80155e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e6:	4770      	bx	lr
 80155e8:	e000e100 	.word	0xe000e100
 80155ec:	e000ed00 	.word	0xe000ed00

080155f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80155f0:	b480      	push	{r7}
 80155f2:	b089      	sub	sp, #36	; 0x24
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	60f8      	str	r0, [r7, #12]
 80155f8:	60b9      	str	r1, [r7, #8]
 80155fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80155fc:	68fb      	ldr	r3, [r7, #12]
 80155fe:	f003 0307 	and.w	r3, r3, #7
 8015602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8015604:	69fb      	ldr	r3, [r7, #28]
 8015606:	f1c3 0307 	rsb	r3, r3, #7
 801560a:	2b04      	cmp	r3, #4
 801560c:	bf28      	it	cs
 801560e:	2304      	movcs	r3, #4
 8015610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8015612:	69fb      	ldr	r3, [r7, #28]
 8015614:	3304      	adds	r3, #4
 8015616:	2b06      	cmp	r3, #6
 8015618:	d902      	bls.n	8015620 <NVIC_EncodePriority+0x30>
 801561a:	69fb      	ldr	r3, [r7, #28]
 801561c:	3b03      	subs	r3, #3
 801561e:	e000      	b.n	8015622 <NVIC_EncodePriority+0x32>
 8015620:	2300      	movs	r3, #0
 8015622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015624:	f04f 32ff 	mov.w	r2, #4294967295
 8015628:	69bb      	ldr	r3, [r7, #24]
 801562a:	fa02 f303 	lsl.w	r3, r2, r3
 801562e:	43da      	mvns	r2, r3
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	401a      	ands	r2, r3
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015638:	f04f 31ff 	mov.w	r1, #4294967295
 801563c:	697b      	ldr	r3, [r7, #20]
 801563e:	fa01 f303 	lsl.w	r3, r1, r3
 8015642:	43d9      	mvns	r1, r3
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015648:	4313      	orrs	r3, r2
         );
}
 801564a:	4618      	mov	r0, r3
 801564c:	3724      	adds	r7, #36	; 0x24
 801564e:	46bd      	mov	sp, r7
 8015650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015654:	4770      	bx	lr

08015656 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015656:	b580      	push	{r7, lr}
 8015658:	b082      	sub	sp, #8
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801565e:	6878      	ldr	r0, [r7, #4]
 8015660:	f7ff ff4c 	bl	80154fc <__NVIC_SetPriorityGrouping>
}
 8015664:	bf00      	nop
 8015666:	3708      	adds	r7, #8
 8015668:	46bd      	mov	sp, r7
 801566a:	bd80      	pop	{r7, pc}

0801566c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801566c:	b580      	push	{r7, lr}
 801566e:	b086      	sub	sp, #24
 8015670:	af00      	add	r7, sp, #0
 8015672:	4603      	mov	r3, r0
 8015674:	60b9      	str	r1, [r7, #8]
 8015676:	607a      	str	r2, [r7, #4]
 8015678:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 801567a:	2300      	movs	r3, #0
 801567c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801567e:	f7ff ff61 	bl	8015544 <__NVIC_GetPriorityGrouping>
 8015682:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	68b9      	ldr	r1, [r7, #8]
 8015688:	6978      	ldr	r0, [r7, #20]
 801568a:	f7ff ffb1 	bl	80155f0 <NVIC_EncodePriority>
 801568e:	4602      	mov	r2, r0
 8015690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015694:	4611      	mov	r1, r2
 8015696:	4618      	mov	r0, r3
 8015698:	f7ff ff80 	bl	801559c <__NVIC_SetPriority>
}
 801569c:	bf00      	nop
 801569e:	3718      	adds	r7, #24
 80156a0:	46bd      	mov	sp, r7
 80156a2:	bd80      	pop	{r7, pc}

080156a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b082      	sub	sp, #8
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	4603      	mov	r3, r0
 80156ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80156ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7ff ff54 	bl	8015560 <__NVIC_EnableIRQ>
}
 80156b8:	bf00      	nop
 80156ba:	3708      	adds	r7, #8
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d101      	bne.n	80156d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80156ce:	2301      	movs	r3, #1
 80156d0:	e00e      	b.n	80156f0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	795b      	ldrb	r3, [r3, #5]
 80156d6:	b2db      	uxtb	r3, r3
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d105      	bne.n	80156e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	2200      	movs	r2, #0
 80156e0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80156e2:	6878      	ldr	r0, [r7, #4]
 80156e4:	f7fd f866 	bl	80127b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	2201      	movs	r2, #1
 80156ec:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80156ee:	2300      	movs	r3, #0
}
 80156f0:	4618      	mov	r0, r3
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b084      	sub	sp, #16
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015704:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8015706:	f7ff feed 	bl	80154e4 <HAL_GetTick>
 801570a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015712:	b2db      	uxtb	r3, r3
 8015714:	2b02      	cmp	r3, #2
 8015716:	d008      	beq.n	801572a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	2280      	movs	r2, #128	; 0x80
 801571c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	2200      	movs	r2, #0
 8015722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8015726:	2301      	movs	r3, #1
 8015728:	e052      	b.n	80157d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	681a      	ldr	r2, [r3, #0]
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f022 0216 	bic.w	r2, r2, #22
 8015738:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	695a      	ldr	r2, [r3, #20]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015748:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801574e:	2b00      	cmp	r3, #0
 8015750:	d103      	bne.n	801575a <HAL_DMA_Abort+0x62>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015756:	2b00      	cmp	r3, #0
 8015758:	d007      	beq.n	801576a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	681a      	ldr	r2, [r3, #0]
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	f022 0208 	bic.w	r2, r2, #8
 8015768:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	681a      	ldr	r2, [r3, #0]
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	f022 0201 	bic.w	r2, r2, #1
 8015778:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801577a:	e013      	b.n	80157a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801577c:	f7ff feb2 	bl	80154e4 <HAL_GetTick>
 8015780:	4602      	mov	r2, r0
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	1ad3      	subs	r3, r2, r3
 8015786:	2b05      	cmp	r3, #5
 8015788:	d90c      	bls.n	80157a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2220      	movs	r2, #32
 801578e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	2203      	movs	r2, #3
 8015794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2200      	movs	r2, #0
 801579c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80157a0:	2303      	movs	r3, #3
 80157a2:	e015      	b.n	80157d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	f003 0301 	and.w	r3, r3, #1
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d1e4      	bne.n	801577c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157b6:	223f      	movs	r2, #63	; 0x3f
 80157b8:	409a      	lsls	r2, r3
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	2201      	movs	r2, #1
 80157c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	2200      	movs	r2, #0
 80157ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80157ce:	2300      	movs	r3, #0
}
 80157d0:	4618      	mov	r0, r3
 80157d2:	3710      	adds	r7, #16
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80157d8:	b480      	push	{r7}
 80157da:	b083      	sub	sp, #12
 80157dc:	af00      	add	r7, sp, #0
 80157de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	2b02      	cmp	r3, #2
 80157ea:	d004      	beq.n	80157f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	2280      	movs	r2, #128	; 0x80
 80157f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80157f2:	2301      	movs	r3, #1
 80157f4:	e00c      	b.n	8015810 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2205      	movs	r2, #5
 80157fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	681a      	ldr	r2, [r3, #0]
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	f022 0201 	bic.w	r2, r2, #1
 801580c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801580e:	2300      	movs	r3, #0
}
 8015810:	4618      	mov	r0, r3
 8015812:	370c      	adds	r7, #12
 8015814:	46bd      	mov	sp, r7
 8015816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581a:	4770      	bx	lr

0801581c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801581c:	b480      	push	{r7}
 801581e:	b089      	sub	sp, #36	; 0x24
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
 8015824:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015826:	2300      	movs	r3, #0
 8015828:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801582a:	2300      	movs	r3, #0
 801582c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801582e:	2300      	movs	r3, #0
 8015830:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015832:	2300      	movs	r3, #0
 8015834:	61fb      	str	r3, [r7, #28]
 8015836:	e159      	b.n	8015aec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015838:	2201      	movs	r2, #1
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	fa02 f303 	lsl.w	r3, r2, r3
 8015840:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	697a      	ldr	r2, [r7, #20]
 8015848:	4013      	ands	r3, r2
 801584a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801584c:	693a      	ldr	r2, [r7, #16]
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	429a      	cmp	r2, r3
 8015852:	f040 8148 	bne.w	8015ae6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015856:	683b      	ldr	r3, [r7, #0]
 8015858:	685b      	ldr	r3, [r3, #4]
 801585a:	f003 0303 	and.w	r3, r3, #3
 801585e:	2b01      	cmp	r3, #1
 8015860:	d005      	beq.n	801586e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801586a:	2b02      	cmp	r3, #2
 801586c:	d130      	bne.n	80158d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	689b      	ldr	r3, [r3, #8]
 8015872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	005b      	lsls	r3, r3, #1
 8015878:	2203      	movs	r2, #3
 801587a:	fa02 f303 	lsl.w	r3, r2, r3
 801587e:	43db      	mvns	r3, r3
 8015880:	69ba      	ldr	r2, [r7, #24]
 8015882:	4013      	ands	r3, r2
 8015884:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	68da      	ldr	r2, [r3, #12]
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	005b      	lsls	r3, r3, #1
 801588e:	fa02 f303 	lsl.w	r3, r2, r3
 8015892:	69ba      	ldr	r2, [r7, #24]
 8015894:	4313      	orrs	r3, r2
 8015896:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	69ba      	ldr	r2, [r7, #24]
 801589c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80158a4:	2201      	movs	r2, #1
 80158a6:	69fb      	ldr	r3, [r7, #28]
 80158a8:	fa02 f303 	lsl.w	r3, r2, r3
 80158ac:	43db      	mvns	r3, r3
 80158ae:	69ba      	ldr	r2, [r7, #24]
 80158b0:	4013      	ands	r3, r2
 80158b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80158b4:	683b      	ldr	r3, [r7, #0]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	091b      	lsrs	r3, r3, #4
 80158ba:	f003 0201 	and.w	r2, r3, #1
 80158be:	69fb      	ldr	r3, [r7, #28]
 80158c0:	fa02 f303 	lsl.w	r3, r2, r3
 80158c4:	69ba      	ldr	r2, [r7, #24]
 80158c6:	4313      	orrs	r3, r2
 80158c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	69ba      	ldr	r2, [r7, #24]
 80158ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	685b      	ldr	r3, [r3, #4]
 80158d4:	f003 0303 	and.w	r3, r3, #3
 80158d8:	2b03      	cmp	r3, #3
 80158da:	d017      	beq.n	801590c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	68db      	ldr	r3, [r3, #12]
 80158e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80158e2:	69fb      	ldr	r3, [r7, #28]
 80158e4:	005b      	lsls	r3, r3, #1
 80158e6:	2203      	movs	r2, #3
 80158e8:	fa02 f303 	lsl.w	r3, r2, r3
 80158ec:	43db      	mvns	r3, r3
 80158ee:	69ba      	ldr	r2, [r7, #24]
 80158f0:	4013      	ands	r3, r2
 80158f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80158f4:	683b      	ldr	r3, [r7, #0]
 80158f6:	689a      	ldr	r2, [r3, #8]
 80158f8:	69fb      	ldr	r3, [r7, #28]
 80158fa:	005b      	lsls	r3, r3, #1
 80158fc:	fa02 f303 	lsl.w	r3, r2, r3
 8015900:	69ba      	ldr	r2, [r7, #24]
 8015902:	4313      	orrs	r3, r2
 8015904:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	69ba      	ldr	r2, [r7, #24]
 801590a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	f003 0303 	and.w	r3, r3, #3
 8015914:	2b02      	cmp	r3, #2
 8015916:	d123      	bne.n	8015960 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015918:	69fb      	ldr	r3, [r7, #28]
 801591a:	08da      	lsrs	r2, r3, #3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	3208      	adds	r2, #8
 8015920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015924:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015926:	69fb      	ldr	r3, [r7, #28]
 8015928:	f003 0307 	and.w	r3, r3, #7
 801592c:	009b      	lsls	r3, r3, #2
 801592e:	220f      	movs	r2, #15
 8015930:	fa02 f303 	lsl.w	r3, r2, r3
 8015934:	43db      	mvns	r3, r3
 8015936:	69ba      	ldr	r2, [r7, #24]
 8015938:	4013      	ands	r3, r2
 801593a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	691a      	ldr	r2, [r3, #16]
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	f003 0307 	and.w	r3, r3, #7
 8015946:	009b      	lsls	r3, r3, #2
 8015948:	fa02 f303 	lsl.w	r3, r2, r3
 801594c:	69ba      	ldr	r2, [r7, #24]
 801594e:	4313      	orrs	r3, r2
 8015950:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015952:	69fb      	ldr	r3, [r7, #28]
 8015954:	08da      	lsrs	r2, r3, #3
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	3208      	adds	r2, #8
 801595a:	69b9      	ldr	r1, [r7, #24]
 801595c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015966:	69fb      	ldr	r3, [r7, #28]
 8015968:	005b      	lsls	r3, r3, #1
 801596a:	2203      	movs	r2, #3
 801596c:	fa02 f303 	lsl.w	r3, r2, r3
 8015970:	43db      	mvns	r3, r3
 8015972:	69ba      	ldr	r2, [r7, #24]
 8015974:	4013      	ands	r3, r2
 8015976:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	685b      	ldr	r3, [r3, #4]
 801597c:	f003 0203 	and.w	r2, r3, #3
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	005b      	lsls	r3, r3, #1
 8015984:	fa02 f303 	lsl.w	r3, r2, r3
 8015988:	69ba      	ldr	r2, [r7, #24]
 801598a:	4313      	orrs	r3, r2
 801598c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	69ba      	ldr	r2, [r7, #24]
 8015992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	685b      	ldr	r3, [r3, #4]
 8015998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801599c:	2b00      	cmp	r3, #0
 801599e:	f000 80a2 	beq.w	8015ae6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80159a2:	2300      	movs	r3, #0
 80159a4:	60fb      	str	r3, [r7, #12]
 80159a6:	4b57      	ldr	r3, [pc, #348]	; (8015b04 <HAL_GPIO_Init+0x2e8>)
 80159a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159aa:	4a56      	ldr	r2, [pc, #344]	; (8015b04 <HAL_GPIO_Init+0x2e8>)
 80159ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80159b0:	6453      	str	r3, [r2, #68]	; 0x44
 80159b2:	4b54      	ldr	r3, [pc, #336]	; (8015b04 <HAL_GPIO_Init+0x2e8>)
 80159b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80159b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80159ba:	60fb      	str	r3, [r7, #12]
 80159bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80159be:	4a52      	ldr	r2, [pc, #328]	; (8015b08 <HAL_GPIO_Init+0x2ec>)
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	089b      	lsrs	r3, r3, #2
 80159c4:	3302      	adds	r3, #2
 80159c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80159cc:	69fb      	ldr	r3, [r7, #28]
 80159ce:	f003 0303 	and.w	r3, r3, #3
 80159d2:	009b      	lsls	r3, r3, #2
 80159d4:	220f      	movs	r2, #15
 80159d6:	fa02 f303 	lsl.w	r3, r2, r3
 80159da:	43db      	mvns	r3, r3
 80159dc:	69ba      	ldr	r2, [r7, #24]
 80159de:	4013      	ands	r3, r2
 80159e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	4a49      	ldr	r2, [pc, #292]	; (8015b0c <HAL_GPIO_Init+0x2f0>)
 80159e6:	4293      	cmp	r3, r2
 80159e8:	d019      	beq.n	8015a1e <HAL_GPIO_Init+0x202>
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	4a48      	ldr	r2, [pc, #288]	; (8015b10 <HAL_GPIO_Init+0x2f4>)
 80159ee:	4293      	cmp	r3, r2
 80159f0:	d013      	beq.n	8015a1a <HAL_GPIO_Init+0x1fe>
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	4a47      	ldr	r2, [pc, #284]	; (8015b14 <HAL_GPIO_Init+0x2f8>)
 80159f6:	4293      	cmp	r3, r2
 80159f8:	d00d      	beq.n	8015a16 <HAL_GPIO_Init+0x1fa>
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	4a46      	ldr	r2, [pc, #280]	; (8015b18 <HAL_GPIO_Init+0x2fc>)
 80159fe:	4293      	cmp	r3, r2
 8015a00:	d007      	beq.n	8015a12 <HAL_GPIO_Init+0x1f6>
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	4a45      	ldr	r2, [pc, #276]	; (8015b1c <HAL_GPIO_Init+0x300>)
 8015a06:	4293      	cmp	r3, r2
 8015a08:	d101      	bne.n	8015a0e <HAL_GPIO_Init+0x1f2>
 8015a0a:	2304      	movs	r3, #4
 8015a0c:	e008      	b.n	8015a20 <HAL_GPIO_Init+0x204>
 8015a0e:	2307      	movs	r3, #7
 8015a10:	e006      	b.n	8015a20 <HAL_GPIO_Init+0x204>
 8015a12:	2303      	movs	r3, #3
 8015a14:	e004      	b.n	8015a20 <HAL_GPIO_Init+0x204>
 8015a16:	2302      	movs	r3, #2
 8015a18:	e002      	b.n	8015a20 <HAL_GPIO_Init+0x204>
 8015a1a:	2301      	movs	r3, #1
 8015a1c:	e000      	b.n	8015a20 <HAL_GPIO_Init+0x204>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	69fa      	ldr	r2, [r7, #28]
 8015a22:	f002 0203 	and.w	r2, r2, #3
 8015a26:	0092      	lsls	r2, r2, #2
 8015a28:	4093      	lsls	r3, r2
 8015a2a:	69ba      	ldr	r2, [r7, #24]
 8015a2c:	4313      	orrs	r3, r2
 8015a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015a30:	4935      	ldr	r1, [pc, #212]	; (8015b08 <HAL_GPIO_Init+0x2ec>)
 8015a32:	69fb      	ldr	r3, [r7, #28]
 8015a34:	089b      	lsrs	r3, r3, #2
 8015a36:	3302      	adds	r3, #2
 8015a38:	69ba      	ldr	r2, [r7, #24]
 8015a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015a3e:	4b38      	ldr	r3, [pc, #224]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015a40:	689b      	ldr	r3, [r3, #8]
 8015a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	43db      	mvns	r3, r3
 8015a48:	69ba      	ldr	r2, [r7, #24]
 8015a4a:	4013      	ands	r3, r2
 8015a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015a4e:	683b      	ldr	r3, [r7, #0]
 8015a50:	685b      	ldr	r3, [r3, #4]
 8015a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d003      	beq.n	8015a62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015a5a:	69ba      	ldr	r2, [r7, #24]
 8015a5c:	693b      	ldr	r3, [r7, #16]
 8015a5e:	4313      	orrs	r3, r2
 8015a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015a62:	4a2f      	ldr	r2, [pc, #188]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015a64:	69bb      	ldr	r3, [r7, #24]
 8015a66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015a68:	4b2d      	ldr	r3, [pc, #180]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015a6a:	68db      	ldr	r3, [r3, #12]
 8015a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a6e:	693b      	ldr	r3, [r7, #16]
 8015a70:	43db      	mvns	r3, r3
 8015a72:	69ba      	ldr	r2, [r7, #24]
 8015a74:	4013      	ands	r3, r2
 8015a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	685b      	ldr	r3, [r3, #4]
 8015a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d003      	beq.n	8015a8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015a84:	69ba      	ldr	r2, [r7, #24]
 8015a86:	693b      	ldr	r3, [r7, #16]
 8015a88:	4313      	orrs	r3, r2
 8015a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015a8c:	4a24      	ldr	r2, [pc, #144]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015a92:	4b23      	ldr	r3, [pc, #140]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015a94:	685b      	ldr	r3, [r3, #4]
 8015a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015a98:	693b      	ldr	r3, [r7, #16]
 8015a9a:	43db      	mvns	r3, r3
 8015a9c:	69ba      	ldr	r2, [r7, #24]
 8015a9e:	4013      	ands	r3, r2
 8015aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d003      	beq.n	8015ab6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8015aae:	69ba      	ldr	r2, [r7, #24]
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	4313      	orrs	r3, r2
 8015ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015ab6:	4a1a      	ldr	r2, [pc, #104]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015abc:	4b18      	ldr	r3, [pc, #96]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	43db      	mvns	r3, r3
 8015ac6:	69ba      	ldr	r2, [r7, #24]
 8015ac8:	4013      	ands	r3, r2
 8015aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015acc:	683b      	ldr	r3, [r7, #0]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d003      	beq.n	8015ae0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015ad8:	69ba      	ldr	r2, [r7, #24]
 8015ada:	693b      	ldr	r3, [r7, #16]
 8015adc:	4313      	orrs	r3, r2
 8015ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015ae0:	4a0f      	ldr	r2, [pc, #60]	; (8015b20 <HAL_GPIO_Init+0x304>)
 8015ae2:	69bb      	ldr	r3, [r7, #24]
 8015ae4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015ae6:	69fb      	ldr	r3, [r7, #28]
 8015ae8:	3301      	adds	r3, #1
 8015aea:	61fb      	str	r3, [r7, #28]
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	2b0f      	cmp	r3, #15
 8015af0:	f67f aea2 	bls.w	8015838 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop
 8015af8:	3724      	adds	r7, #36	; 0x24
 8015afa:	46bd      	mov	sp, r7
 8015afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b00:	4770      	bx	lr
 8015b02:	bf00      	nop
 8015b04:	40023800 	.word	0x40023800
 8015b08:	40013800 	.word	0x40013800
 8015b0c:	40020000 	.word	0x40020000
 8015b10:	40020400 	.word	0x40020400
 8015b14:	40020800 	.word	0x40020800
 8015b18:	40020c00 	.word	0x40020c00
 8015b1c:	40021000 	.word	0x40021000
 8015b20:	40013c00 	.word	0x40013c00

08015b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015b24:	b480      	push	{r7}
 8015b26:	b083      	sub	sp, #12
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
 8015b2c:	460b      	mov	r3, r1
 8015b2e:	807b      	strh	r3, [r7, #2]
 8015b30:	4613      	mov	r3, r2
 8015b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015b34:	787b      	ldrb	r3, [r7, #1]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d003      	beq.n	8015b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015b3a:	887a      	ldrh	r2, [r7, #2]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015b40:	e003      	b.n	8015b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015b42:	887b      	ldrh	r3, [r7, #2]
 8015b44:	041a      	lsls	r2, r3, #16
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	619a      	str	r2, [r3, #24]
}
 8015b4a:	bf00      	nop
 8015b4c:	370c      	adds	r7, #12
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b54:	4770      	bx	lr

08015b56 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b084      	sub	sp, #16
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d101      	bne.n	8015b68 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015b64:	2301      	movs	r3, #1
 8015b66:	e034      	b.n	8015bd2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8015b70:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	f245 5255 	movw	r2, #21845	; 0x5555
 8015b7a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	6852      	ldr	r2, [r2, #4]
 8015b84:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	687a      	ldr	r2, [r7, #4]
 8015b8c:	6892      	ldr	r2, [r2, #8]
 8015b8e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015b90:	f7ff fca8 	bl	80154e4 <HAL_GetTick>
 8015b94:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015b96:	e00f      	b.n	8015bb8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015b98:	f7ff fca4 	bl	80154e4 <HAL_GetTick>
 8015b9c:	4602      	mov	r2, r0
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	1ad3      	subs	r3, r2, r3
 8015ba2:	2b31      	cmp	r3, #49	; 0x31
 8015ba4:	d908      	bls.n	8015bb8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	68db      	ldr	r3, [r3, #12]
 8015bac:	f003 0303 	and.w	r3, r3, #3
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d001      	beq.n	8015bb8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8015bb4:	2303      	movs	r3, #3
 8015bb6:	e00c      	b.n	8015bd2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	68db      	ldr	r3, [r3, #12]
 8015bbe:	f003 0303 	and.w	r3, r3, #3
 8015bc2:	2b00      	cmp	r3, #0
 8015bc4:	d1e8      	bne.n	8015b98 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015bce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015bd0:	2300      	movs	r3, #0
}
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	3710      	adds	r7, #16
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	bd80      	pop	{r7, pc}

08015bda <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015bda:	b480      	push	{r7}
 8015bdc:	b083      	sub	sp, #12
 8015bde:	af00      	add	r7, sp, #0
 8015be0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015bea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015bec:	2300      	movs	r3, #0
}
 8015bee:	4618      	mov	r0, r3
 8015bf0:	370c      	adds	r7, #12
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf8:	4770      	bx	lr
	...

08015bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b086      	sub	sp, #24
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d101      	bne.n	8015c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e267      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	f003 0301 	and.w	r3, r3, #1
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d075      	beq.n	8015d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015c1a:	4b88      	ldr	r3, [pc, #544]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c1c:	689b      	ldr	r3, [r3, #8]
 8015c1e:	f003 030c 	and.w	r3, r3, #12
 8015c22:	2b04      	cmp	r3, #4
 8015c24:	d00c      	beq.n	8015c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015c26:	4b85      	ldr	r3, [pc, #532]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c28:	689b      	ldr	r3, [r3, #8]
 8015c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015c2e:	2b08      	cmp	r3, #8
 8015c30:	d112      	bne.n	8015c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015c32:	4b82      	ldr	r3, [pc, #520]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c34:	685b      	ldr	r3, [r3, #4]
 8015c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015c3e:	d10b      	bne.n	8015c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015c40:	4b7e      	ldr	r3, [pc, #504]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d05b      	beq.n	8015d04 <HAL_RCC_OscConfig+0x108>
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	685b      	ldr	r3, [r3, #4]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d157      	bne.n	8015d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8015c54:	2301      	movs	r3, #1
 8015c56:	e242      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c60:	d106      	bne.n	8015c70 <HAL_RCC_OscConfig+0x74>
 8015c62:	4b76      	ldr	r3, [pc, #472]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	4a75      	ldr	r2, [pc, #468]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015c6c:	6013      	str	r3, [r2, #0]
 8015c6e:	e01d      	b.n	8015cac <HAL_RCC_OscConfig+0xb0>
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	685b      	ldr	r3, [r3, #4]
 8015c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015c78:	d10c      	bne.n	8015c94 <HAL_RCC_OscConfig+0x98>
 8015c7a:	4b70      	ldr	r3, [pc, #448]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	4a6f      	ldr	r2, [pc, #444]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015c84:	6013      	str	r3, [r2, #0]
 8015c86:	4b6d      	ldr	r3, [pc, #436]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	4a6c      	ldr	r2, [pc, #432]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015c90:	6013      	str	r3, [r2, #0]
 8015c92:	e00b      	b.n	8015cac <HAL_RCC_OscConfig+0xb0>
 8015c94:	4b69      	ldr	r3, [pc, #420]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	4a68      	ldr	r2, [pc, #416]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015c9e:	6013      	str	r3, [r2, #0]
 8015ca0:	4b66      	ldr	r3, [pc, #408]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	4a65      	ldr	r2, [pc, #404]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d013      	beq.n	8015cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cb4:	f7ff fc16 	bl	80154e4 <HAL_GetTick>
 8015cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015cba:	e008      	b.n	8015cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015cbc:	f7ff fc12 	bl	80154e4 <HAL_GetTick>
 8015cc0:	4602      	mov	r2, r0
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	1ad3      	subs	r3, r2, r3
 8015cc6:	2b64      	cmp	r3, #100	; 0x64
 8015cc8:	d901      	bls.n	8015cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015cca:	2303      	movs	r3, #3
 8015ccc:	e207      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015cce:	4b5b      	ldr	r3, [pc, #364]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d0f0      	beq.n	8015cbc <HAL_RCC_OscConfig+0xc0>
 8015cda:	e014      	b.n	8015d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015cdc:	f7ff fc02 	bl	80154e4 <HAL_GetTick>
 8015ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015ce2:	e008      	b.n	8015cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015ce4:	f7ff fbfe 	bl	80154e4 <HAL_GetTick>
 8015ce8:	4602      	mov	r2, r0
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	1ad3      	subs	r3, r2, r3
 8015cee:	2b64      	cmp	r3, #100	; 0x64
 8015cf0:	d901      	bls.n	8015cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8015cf2:	2303      	movs	r3, #3
 8015cf4:	e1f3      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015cf6:	4b51      	ldr	r3, [pc, #324]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d1f0      	bne.n	8015ce4 <HAL_RCC_OscConfig+0xe8>
 8015d02:	e000      	b.n	8015d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	f003 0302 	and.w	r3, r3, #2
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d063      	beq.n	8015dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015d12:	4b4a      	ldr	r3, [pc, #296]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d14:	689b      	ldr	r3, [r3, #8]
 8015d16:	f003 030c 	and.w	r3, r3, #12
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d00b      	beq.n	8015d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015d1e:	4b47      	ldr	r3, [pc, #284]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d20:	689b      	ldr	r3, [r3, #8]
 8015d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8015d26:	2b08      	cmp	r3, #8
 8015d28:	d11c      	bne.n	8015d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015d2a:	4b44      	ldr	r3, [pc, #272]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d116      	bne.n	8015d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015d36:	4b41      	ldr	r3, [pc, #260]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	f003 0302 	and.w	r3, r3, #2
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d005      	beq.n	8015d4e <HAL_RCC_OscConfig+0x152>
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	68db      	ldr	r3, [r3, #12]
 8015d46:	2b01      	cmp	r3, #1
 8015d48:	d001      	beq.n	8015d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	e1c7      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015d4e:	4b3b      	ldr	r3, [pc, #236]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	691b      	ldr	r3, [r3, #16]
 8015d5a:	00db      	lsls	r3, r3, #3
 8015d5c:	4937      	ldr	r1, [pc, #220]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d5e:	4313      	orrs	r3, r2
 8015d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015d62:	e03a      	b.n	8015dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	68db      	ldr	r3, [r3, #12]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d020      	beq.n	8015dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015d6c:	4b34      	ldr	r3, [pc, #208]	; (8015e40 <HAL_RCC_OscConfig+0x244>)
 8015d6e:	2201      	movs	r2, #1
 8015d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015d72:	f7ff fbb7 	bl	80154e4 <HAL_GetTick>
 8015d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015d78:	e008      	b.n	8015d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015d7a:	f7ff fbb3 	bl	80154e4 <HAL_GetTick>
 8015d7e:	4602      	mov	r2, r0
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	1ad3      	subs	r3, r2, r3
 8015d84:	2b02      	cmp	r3, #2
 8015d86:	d901      	bls.n	8015d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8015d88:	2303      	movs	r3, #3
 8015d8a:	e1a8      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015d8c:	4b2b      	ldr	r3, [pc, #172]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	f003 0302 	and.w	r3, r3, #2
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d0f0      	beq.n	8015d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015d98:	4b28      	ldr	r3, [pc, #160]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	691b      	ldr	r3, [r3, #16]
 8015da4:	00db      	lsls	r3, r3, #3
 8015da6:	4925      	ldr	r1, [pc, #148]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015da8:	4313      	orrs	r3, r2
 8015daa:	600b      	str	r3, [r1, #0]
 8015dac:	e015      	b.n	8015dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8015dae:	4b24      	ldr	r3, [pc, #144]	; (8015e40 <HAL_RCC_OscConfig+0x244>)
 8015db0:	2200      	movs	r2, #0
 8015db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015db4:	f7ff fb96 	bl	80154e4 <HAL_GetTick>
 8015db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015dba:	e008      	b.n	8015dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015dbc:	f7ff fb92 	bl	80154e4 <HAL_GetTick>
 8015dc0:	4602      	mov	r2, r0
 8015dc2:	693b      	ldr	r3, [r7, #16]
 8015dc4:	1ad3      	subs	r3, r2, r3
 8015dc6:	2b02      	cmp	r3, #2
 8015dc8:	d901      	bls.n	8015dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8015dca:	2303      	movs	r3, #3
 8015dcc:	e187      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015dce:	4b1b      	ldr	r3, [pc, #108]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	f003 0302 	and.w	r3, r3, #2
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d1f0      	bne.n	8015dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	f003 0308 	and.w	r3, r3, #8
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d036      	beq.n	8015e54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	695b      	ldr	r3, [r3, #20]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d016      	beq.n	8015e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015dee:	4b15      	ldr	r3, [pc, #84]	; (8015e44 <HAL_RCC_OscConfig+0x248>)
 8015df0:	2201      	movs	r2, #1
 8015df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015df4:	f7ff fb76 	bl	80154e4 <HAL_GetTick>
 8015df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015dfa:	e008      	b.n	8015e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015dfc:	f7ff fb72 	bl	80154e4 <HAL_GetTick>
 8015e00:	4602      	mov	r2, r0
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	1ad3      	subs	r3, r2, r3
 8015e06:	2b02      	cmp	r3, #2
 8015e08:	d901      	bls.n	8015e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8015e0a:	2303      	movs	r3, #3
 8015e0c:	e167      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015e0e:	4b0b      	ldr	r3, [pc, #44]	; (8015e3c <HAL_RCC_OscConfig+0x240>)
 8015e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e12:	f003 0302 	and.w	r3, r3, #2
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d0f0      	beq.n	8015dfc <HAL_RCC_OscConfig+0x200>
 8015e1a:	e01b      	b.n	8015e54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015e1c:	4b09      	ldr	r3, [pc, #36]	; (8015e44 <HAL_RCC_OscConfig+0x248>)
 8015e1e:	2200      	movs	r2, #0
 8015e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015e22:	f7ff fb5f 	bl	80154e4 <HAL_GetTick>
 8015e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015e28:	e00e      	b.n	8015e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015e2a:	f7ff fb5b 	bl	80154e4 <HAL_GetTick>
 8015e2e:	4602      	mov	r2, r0
 8015e30:	693b      	ldr	r3, [r7, #16]
 8015e32:	1ad3      	subs	r3, r2, r3
 8015e34:	2b02      	cmp	r3, #2
 8015e36:	d907      	bls.n	8015e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8015e38:	2303      	movs	r3, #3
 8015e3a:	e150      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
 8015e3c:	40023800 	.word	0x40023800
 8015e40:	42470000 	.word	0x42470000
 8015e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015e48:	4b88      	ldr	r3, [pc, #544]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e4c:	f003 0302 	and.w	r3, r3, #2
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d1ea      	bne.n	8015e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	f003 0304 	and.w	r3, r3, #4
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	f000 8097 	beq.w	8015f90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8015e62:	2300      	movs	r3, #0
 8015e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015e66:	4b81      	ldr	r3, [pc, #516]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d10f      	bne.n	8015e92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015e72:	2300      	movs	r3, #0
 8015e74:	60bb      	str	r3, [r7, #8]
 8015e76:	4b7d      	ldr	r3, [pc, #500]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e7a:	4a7c      	ldr	r2, [pc, #496]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015e80:	6413      	str	r3, [r2, #64]	; 0x40
 8015e82:	4b7a      	ldr	r3, [pc, #488]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015e8a:	60bb      	str	r3, [r7, #8]
 8015e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8015e8e:	2301      	movs	r3, #1
 8015e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e92:	4b77      	ldr	r3, [pc, #476]	; (8016070 <HAL_RCC_OscConfig+0x474>)
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d118      	bne.n	8015ed0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015e9e:	4b74      	ldr	r3, [pc, #464]	; (8016070 <HAL_RCC_OscConfig+0x474>)
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	4a73      	ldr	r2, [pc, #460]	; (8016070 <HAL_RCC_OscConfig+0x474>)
 8015ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8015eaa:	f7ff fb1b 	bl	80154e4 <HAL_GetTick>
 8015eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015eb0:	e008      	b.n	8015ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015eb2:	f7ff fb17 	bl	80154e4 <HAL_GetTick>
 8015eb6:	4602      	mov	r2, r0
 8015eb8:	693b      	ldr	r3, [r7, #16]
 8015eba:	1ad3      	subs	r3, r2, r3
 8015ebc:	2b02      	cmp	r3, #2
 8015ebe:	d901      	bls.n	8015ec4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8015ec0:	2303      	movs	r3, #3
 8015ec2:	e10c      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015ec4:	4b6a      	ldr	r3, [pc, #424]	; (8016070 <HAL_RCC_OscConfig+0x474>)
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d0f0      	beq.n	8015eb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	689b      	ldr	r3, [r3, #8]
 8015ed4:	2b01      	cmp	r3, #1
 8015ed6:	d106      	bne.n	8015ee6 <HAL_RCC_OscConfig+0x2ea>
 8015ed8:	4b64      	ldr	r3, [pc, #400]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015edc:	4a63      	ldr	r2, [pc, #396]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015ede:	f043 0301 	orr.w	r3, r3, #1
 8015ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8015ee4:	e01c      	b.n	8015f20 <HAL_RCC_OscConfig+0x324>
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	689b      	ldr	r3, [r3, #8]
 8015eea:	2b05      	cmp	r3, #5
 8015eec:	d10c      	bne.n	8015f08 <HAL_RCC_OscConfig+0x30c>
 8015eee:	4b5f      	ldr	r3, [pc, #380]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ef2:	4a5e      	ldr	r2, [pc, #376]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015ef4:	f043 0304 	orr.w	r3, r3, #4
 8015ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8015efa:	4b5c      	ldr	r3, [pc, #368]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015efe:	4a5b      	ldr	r2, [pc, #364]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f00:	f043 0301 	orr.w	r3, r3, #1
 8015f04:	6713      	str	r3, [r2, #112]	; 0x70
 8015f06:	e00b      	b.n	8015f20 <HAL_RCC_OscConfig+0x324>
 8015f08:	4b58      	ldr	r3, [pc, #352]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f0c:	4a57      	ldr	r2, [pc, #348]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f0e:	f023 0301 	bic.w	r3, r3, #1
 8015f12:	6713      	str	r3, [r2, #112]	; 0x70
 8015f14:	4b55      	ldr	r3, [pc, #340]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f18:	4a54      	ldr	r2, [pc, #336]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f1a:	f023 0304 	bic.w	r3, r3, #4
 8015f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d015      	beq.n	8015f54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015f28:	f7ff fadc 	bl	80154e4 <HAL_GetTick>
 8015f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015f2e:	e00a      	b.n	8015f46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015f30:	f7ff fad8 	bl	80154e4 <HAL_GetTick>
 8015f34:	4602      	mov	r2, r0
 8015f36:	693b      	ldr	r3, [r7, #16]
 8015f38:	1ad3      	subs	r3, r2, r3
 8015f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d901      	bls.n	8015f46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8015f42:	2303      	movs	r3, #3
 8015f44:	e0cb      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015f46:	4b49      	ldr	r3, [pc, #292]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f4a:	f003 0302 	and.w	r3, r3, #2
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d0ee      	beq.n	8015f30 <HAL_RCC_OscConfig+0x334>
 8015f52:	e014      	b.n	8015f7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8015f54:	f7ff fac6 	bl	80154e4 <HAL_GetTick>
 8015f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015f5a:	e00a      	b.n	8015f72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015f5c:	f7ff fac2 	bl	80154e4 <HAL_GetTick>
 8015f60:	4602      	mov	r2, r0
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	1ad3      	subs	r3, r2, r3
 8015f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	d901      	bls.n	8015f72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8015f6e:	2303      	movs	r3, #3
 8015f70:	e0b5      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015f72:	4b3e      	ldr	r3, [pc, #248]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f76:	f003 0302 	and.w	r3, r3, #2
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d1ee      	bne.n	8015f5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015f7e:	7dfb      	ldrb	r3, [r7, #23]
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d105      	bne.n	8015f90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8015f84:	4b39      	ldr	r3, [pc, #228]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f88:	4a38      	ldr	r2, [pc, #224]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	699b      	ldr	r3, [r3, #24]
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	f000 80a1 	beq.w	80160dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015f9a:	4b34      	ldr	r3, [pc, #208]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015f9c:	689b      	ldr	r3, [r3, #8]
 8015f9e:	f003 030c 	and.w	r3, r3, #12
 8015fa2:	2b08      	cmp	r3, #8
 8015fa4:	d05c      	beq.n	8016060 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	699b      	ldr	r3, [r3, #24]
 8015faa:	2b02      	cmp	r3, #2
 8015fac:	d141      	bne.n	8016032 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015fae:	4b31      	ldr	r3, [pc, #196]	; (8016074 <HAL_RCC_OscConfig+0x478>)
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015fb4:	f7ff fa96 	bl	80154e4 <HAL_GetTick>
 8015fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015fba:	e008      	b.n	8015fce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015fbc:	f7ff fa92 	bl	80154e4 <HAL_GetTick>
 8015fc0:	4602      	mov	r2, r0
 8015fc2:	693b      	ldr	r3, [r7, #16]
 8015fc4:	1ad3      	subs	r3, r2, r3
 8015fc6:	2b02      	cmp	r3, #2
 8015fc8:	d901      	bls.n	8015fce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8015fca:	2303      	movs	r3, #3
 8015fcc:	e087      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015fce:	4b27      	ldr	r3, [pc, #156]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d1f0      	bne.n	8015fbc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	69da      	ldr	r2, [r3, #28]
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	6a1b      	ldr	r3, [r3, #32]
 8015fe2:	431a      	orrs	r2, r3
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe8:	019b      	lsls	r3, r3, #6
 8015fea:	431a      	orrs	r2, r3
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ff0:	085b      	lsrs	r3, r3, #1
 8015ff2:	3b01      	subs	r3, #1
 8015ff4:	041b      	lsls	r3, r3, #16
 8015ff6:	431a      	orrs	r2, r3
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ffc:	061b      	lsls	r3, r3, #24
 8015ffe:	491b      	ldr	r1, [pc, #108]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8016000:	4313      	orrs	r3, r2
 8016002:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8016004:	4b1b      	ldr	r3, [pc, #108]	; (8016074 <HAL_RCC_OscConfig+0x478>)
 8016006:	2201      	movs	r2, #1
 8016008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801600a:	f7ff fa6b 	bl	80154e4 <HAL_GetTick>
 801600e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016010:	e008      	b.n	8016024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016012:	f7ff fa67 	bl	80154e4 <HAL_GetTick>
 8016016:	4602      	mov	r2, r0
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	1ad3      	subs	r3, r2, r3
 801601c:	2b02      	cmp	r3, #2
 801601e:	d901      	bls.n	8016024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8016020:	2303      	movs	r3, #3
 8016022:	e05c      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016024:	4b11      	ldr	r3, [pc, #68]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801602c:	2b00      	cmp	r3, #0
 801602e:	d0f0      	beq.n	8016012 <HAL_RCC_OscConfig+0x416>
 8016030:	e054      	b.n	80160dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8016032:	4b10      	ldr	r3, [pc, #64]	; (8016074 <HAL_RCC_OscConfig+0x478>)
 8016034:	2200      	movs	r2, #0
 8016036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016038:	f7ff fa54 	bl	80154e4 <HAL_GetTick>
 801603c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801603e:	e008      	b.n	8016052 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016040:	f7ff fa50 	bl	80154e4 <HAL_GetTick>
 8016044:	4602      	mov	r2, r0
 8016046:	693b      	ldr	r3, [r7, #16]
 8016048:	1ad3      	subs	r3, r2, r3
 801604a:	2b02      	cmp	r3, #2
 801604c:	d901      	bls.n	8016052 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 801604e:	2303      	movs	r3, #3
 8016050:	e045      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016052:	4b06      	ldr	r3, [pc, #24]	; (801606c <HAL_RCC_OscConfig+0x470>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801605a:	2b00      	cmp	r3, #0
 801605c:	d1f0      	bne.n	8016040 <HAL_RCC_OscConfig+0x444>
 801605e:	e03d      	b.n	80160dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	699b      	ldr	r3, [r3, #24]
 8016064:	2b01      	cmp	r3, #1
 8016066:	d107      	bne.n	8016078 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8016068:	2301      	movs	r3, #1
 801606a:	e038      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
 801606c:	40023800 	.word	0x40023800
 8016070:	40007000 	.word	0x40007000
 8016074:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8016078:	4b1b      	ldr	r3, [pc, #108]	; (80160e8 <HAL_RCC_OscConfig+0x4ec>)
 801607a:	685b      	ldr	r3, [r3, #4]
 801607c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	699b      	ldr	r3, [r3, #24]
 8016082:	2b01      	cmp	r3, #1
 8016084:	d028      	beq.n	80160d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8016090:	429a      	cmp	r2, r3
 8016092:	d121      	bne.n	80160d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801609e:	429a      	cmp	r2, r3
 80160a0:	d11a      	bne.n	80160d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80160a2:	68fa      	ldr	r2, [r7, #12]
 80160a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80160a8:	4013      	ands	r3, r2
 80160aa:	687a      	ldr	r2, [r7, #4]
 80160ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80160ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80160b0:	4293      	cmp	r3, r2
 80160b2:	d111      	bne.n	80160d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80160be:	085b      	lsrs	r3, r3, #1
 80160c0:	3b01      	subs	r3, #1
 80160c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80160c4:	429a      	cmp	r2, r3
 80160c6:	d107      	bne.n	80160d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80160d4:	429a      	cmp	r2, r3
 80160d6:	d001      	beq.n	80160dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80160d8:	2301      	movs	r3, #1
 80160da:	e000      	b.n	80160de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80160dc:	2300      	movs	r3, #0
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3718      	adds	r7, #24
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	40023800 	.word	0x40023800

080160ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b084      	sub	sp, #16
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d101      	bne.n	8016100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80160fc:	2301      	movs	r3, #1
 80160fe:	e0cc      	b.n	801629a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016100:	4b68      	ldr	r3, [pc, #416]	; (80162a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	f003 0307 	and.w	r3, r3, #7
 8016108:	683a      	ldr	r2, [r7, #0]
 801610a:	429a      	cmp	r2, r3
 801610c:	d90c      	bls.n	8016128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801610e:	4b65      	ldr	r3, [pc, #404]	; (80162a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016110:	683a      	ldr	r2, [r7, #0]
 8016112:	b2d2      	uxtb	r2, r2
 8016114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016116:	4b63      	ldr	r3, [pc, #396]	; (80162a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016118:	681b      	ldr	r3, [r3, #0]
 801611a:	f003 0307 	and.w	r3, r3, #7
 801611e:	683a      	ldr	r2, [r7, #0]
 8016120:	429a      	cmp	r2, r3
 8016122:	d001      	beq.n	8016128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8016124:	2301      	movs	r3, #1
 8016126:	e0b8      	b.n	801629a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	f003 0302 	and.w	r3, r3, #2
 8016130:	2b00      	cmp	r3, #0
 8016132:	d020      	beq.n	8016176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	f003 0304 	and.w	r3, r3, #4
 801613c:	2b00      	cmp	r3, #0
 801613e:	d005      	beq.n	801614c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016140:	4b59      	ldr	r3, [pc, #356]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016142:	689b      	ldr	r3, [r3, #8]
 8016144:	4a58      	ldr	r2, [pc, #352]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801614a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	f003 0308 	and.w	r3, r3, #8
 8016154:	2b00      	cmp	r3, #0
 8016156:	d005      	beq.n	8016164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016158:	4b53      	ldr	r3, [pc, #332]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 801615a:	689b      	ldr	r3, [r3, #8]
 801615c:	4a52      	ldr	r2, [pc, #328]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 801615e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8016162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8016164:	4b50      	ldr	r3, [pc, #320]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016166:	689b      	ldr	r3, [r3, #8]
 8016168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	494d      	ldr	r1, [pc, #308]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016172:	4313      	orrs	r3, r2
 8016174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	f003 0301 	and.w	r3, r3, #1
 801617e:	2b00      	cmp	r3, #0
 8016180:	d044      	beq.n	801620c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	685b      	ldr	r3, [r3, #4]
 8016186:	2b01      	cmp	r3, #1
 8016188:	d107      	bne.n	801619a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801618a:	4b47      	ldr	r3, [pc, #284]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016192:	2b00      	cmp	r3, #0
 8016194:	d119      	bne.n	80161ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8016196:	2301      	movs	r3, #1
 8016198:	e07f      	b.n	801629a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	2b02      	cmp	r3, #2
 80161a0:	d003      	beq.n	80161aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80161a6:	2b03      	cmp	r3, #3
 80161a8:	d107      	bne.n	80161ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80161aa:	4b3f      	ldr	r3, [pc, #252]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d109      	bne.n	80161ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80161b6:	2301      	movs	r3, #1
 80161b8:	e06f      	b.n	801629a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80161ba:	4b3b      	ldr	r3, [pc, #236]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f003 0302 	and.w	r3, r3, #2
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d101      	bne.n	80161ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80161c6:	2301      	movs	r3, #1
 80161c8:	e067      	b.n	801629a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80161ca:	4b37      	ldr	r3, [pc, #220]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	f023 0203 	bic.w	r2, r3, #3
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	4934      	ldr	r1, [pc, #208]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 80161d8:	4313      	orrs	r3, r2
 80161da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80161dc:	f7ff f982 	bl	80154e4 <HAL_GetTick>
 80161e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80161e2:	e00a      	b.n	80161fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80161e4:	f7ff f97e 	bl	80154e4 <HAL_GetTick>
 80161e8:	4602      	mov	r2, r0
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	1ad3      	subs	r3, r2, r3
 80161ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80161f2:	4293      	cmp	r3, r2
 80161f4:	d901      	bls.n	80161fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80161f6:	2303      	movs	r3, #3
 80161f8:	e04f      	b.n	801629a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80161fa:	4b2b      	ldr	r3, [pc, #172]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 80161fc:	689b      	ldr	r3, [r3, #8]
 80161fe:	f003 020c 	and.w	r2, r3, #12
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	685b      	ldr	r3, [r3, #4]
 8016206:	009b      	lsls	r3, r3, #2
 8016208:	429a      	cmp	r2, r3
 801620a:	d1eb      	bne.n	80161e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801620c:	4b25      	ldr	r3, [pc, #148]	; (80162a4 <HAL_RCC_ClockConfig+0x1b8>)
 801620e:	681b      	ldr	r3, [r3, #0]
 8016210:	f003 0307 	and.w	r3, r3, #7
 8016214:	683a      	ldr	r2, [r7, #0]
 8016216:	429a      	cmp	r2, r3
 8016218:	d20c      	bcs.n	8016234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801621a:	4b22      	ldr	r3, [pc, #136]	; (80162a4 <HAL_RCC_ClockConfig+0x1b8>)
 801621c:	683a      	ldr	r2, [r7, #0]
 801621e:	b2d2      	uxtb	r2, r2
 8016220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8016222:	4b20      	ldr	r3, [pc, #128]	; (80162a4 <HAL_RCC_ClockConfig+0x1b8>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	f003 0307 	and.w	r3, r3, #7
 801622a:	683a      	ldr	r2, [r7, #0]
 801622c:	429a      	cmp	r2, r3
 801622e:	d001      	beq.n	8016234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016230:	2301      	movs	r3, #1
 8016232:	e032      	b.n	801629a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	f003 0304 	and.w	r3, r3, #4
 801623c:	2b00      	cmp	r3, #0
 801623e:	d008      	beq.n	8016252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016240:	4b19      	ldr	r3, [pc, #100]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016242:	689b      	ldr	r3, [r3, #8]
 8016244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	68db      	ldr	r3, [r3, #12]
 801624c:	4916      	ldr	r1, [pc, #88]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 801624e:	4313      	orrs	r3, r2
 8016250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	f003 0308 	and.w	r3, r3, #8
 801625a:	2b00      	cmp	r3, #0
 801625c:	d009      	beq.n	8016272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801625e:	4b12      	ldr	r3, [pc, #72]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 8016260:	689b      	ldr	r3, [r3, #8]
 8016262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	691b      	ldr	r3, [r3, #16]
 801626a:	00db      	lsls	r3, r3, #3
 801626c:	490e      	ldr	r1, [pc, #56]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 801626e:	4313      	orrs	r3, r2
 8016270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8016272:	f000 f821 	bl	80162b8 <HAL_RCC_GetSysClockFreq>
 8016276:	4602      	mov	r2, r0
 8016278:	4b0b      	ldr	r3, [pc, #44]	; (80162a8 <HAL_RCC_ClockConfig+0x1bc>)
 801627a:	689b      	ldr	r3, [r3, #8]
 801627c:	091b      	lsrs	r3, r3, #4
 801627e:	f003 030f 	and.w	r3, r3, #15
 8016282:	490a      	ldr	r1, [pc, #40]	; (80162ac <HAL_RCC_ClockConfig+0x1c0>)
 8016284:	5ccb      	ldrb	r3, [r1, r3]
 8016286:	fa22 f303 	lsr.w	r3, r2, r3
 801628a:	4a09      	ldr	r2, [pc, #36]	; (80162b0 <HAL_RCC_ClockConfig+0x1c4>)
 801628c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 801628e:	4b09      	ldr	r3, [pc, #36]	; (80162b4 <HAL_RCC_ClockConfig+0x1c8>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	4618      	mov	r0, r3
 8016294:	f7fc fb7e 	bl	8012994 <HAL_InitTick>

  return HAL_OK;
 8016298:	2300      	movs	r3, #0
}
 801629a:	4618      	mov	r0, r3
 801629c:	3710      	adds	r7, #16
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
 80162a2:	bf00      	nop
 80162a4:	40023c00 	.word	0x40023c00
 80162a8:	40023800 	.word	0x40023800
 80162ac:	08033f58 	.word	0x08033f58
 80162b0:	20000000 	.word	0x20000000
 80162b4:	200000bc 	.word	0x200000bc

080162b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80162b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80162bc:	b094      	sub	sp, #80	; 0x50
 80162be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80162c0:	2300      	movs	r3, #0
 80162c2:	647b      	str	r3, [r7, #68]	; 0x44
 80162c4:	2300      	movs	r3, #0
 80162c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80162c8:	2300      	movs	r3, #0
 80162ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80162cc:	2300      	movs	r3, #0
 80162ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80162d0:	4b79      	ldr	r3, [pc, #484]	; (80164b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80162d2:	689b      	ldr	r3, [r3, #8]
 80162d4:	f003 030c 	and.w	r3, r3, #12
 80162d8:	2b08      	cmp	r3, #8
 80162da:	d00d      	beq.n	80162f8 <HAL_RCC_GetSysClockFreq+0x40>
 80162dc:	2b08      	cmp	r3, #8
 80162de:	f200 80e1 	bhi.w	80164a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d002      	beq.n	80162ec <HAL_RCC_GetSysClockFreq+0x34>
 80162e6:	2b04      	cmp	r3, #4
 80162e8:	d003      	beq.n	80162f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80162ea:	e0db      	b.n	80164a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80162ec:	4b73      	ldr	r3, [pc, #460]	; (80164bc <HAL_RCC_GetSysClockFreq+0x204>)
 80162ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80162f0:	e0db      	b.n	80164aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80162f2:	4b73      	ldr	r3, [pc, #460]	; (80164c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80162f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80162f6:	e0d8      	b.n	80164aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80162f8:	4b6f      	ldr	r3, [pc, #444]	; (80164b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80162fa:	685b      	ldr	r3, [r3, #4]
 80162fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016300:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8016302:	4b6d      	ldr	r3, [pc, #436]	; (80164b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801630a:	2b00      	cmp	r3, #0
 801630c:	d063      	beq.n	80163d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801630e:	4b6a      	ldr	r3, [pc, #424]	; (80164b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8016310:	685b      	ldr	r3, [r3, #4]
 8016312:	099b      	lsrs	r3, r3, #6
 8016314:	2200      	movs	r2, #0
 8016316:	63bb      	str	r3, [r7, #56]	; 0x38
 8016318:	63fa      	str	r2, [r7, #60]	; 0x3c
 801631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801631c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016320:	633b      	str	r3, [r7, #48]	; 0x30
 8016322:	2300      	movs	r3, #0
 8016324:	637b      	str	r3, [r7, #52]	; 0x34
 8016326:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801632a:	4622      	mov	r2, r4
 801632c:	462b      	mov	r3, r5
 801632e:	f04f 0000 	mov.w	r0, #0
 8016332:	f04f 0100 	mov.w	r1, #0
 8016336:	0159      	lsls	r1, r3, #5
 8016338:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801633c:	0150      	lsls	r0, r2, #5
 801633e:	4602      	mov	r2, r0
 8016340:	460b      	mov	r3, r1
 8016342:	4621      	mov	r1, r4
 8016344:	1a51      	subs	r1, r2, r1
 8016346:	6139      	str	r1, [r7, #16]
 8016348:	4629      	mov	r1, r5
 801634a:	eb63 0301 	sbc.w	r3, r3, r1
 801634e:	617b      	str	r3, [r7, #20]
 8016350:	f04f 0200 	mov.w	r2, #0
 8016354:	f04f 0300 	mov.w	r3, #0
 8016358:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801635c:	4659      	mov	r1, fp
 801635e:	018b      	lsls	r3, r1, #6
 8016360:	4651      	mov	r1, sl
 8016362:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8016366:	4651      	mov	r1, sl
 8016368:	018a      	lsls	r2, r1, #6
 801636a:	4651      	mov	r1, sl
 801636c:	ebb2 0801 	subs.w	r8, r2, r1
 8016370:	4659      	mov	r1, fp
 8016372:	eb63 0901 	sbc.w	r9, r3, r1
 8016376:	f04f 0200 	mov.w	r2, #0
 801637a:	f04f 0300 	mov.w	r3, #0
 801637e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8016382:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8016386:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801638a:	4690      	mov	r8, r2
 801638c:	4699      	mov	r9, r3
 801638e:	4623      	mov	r3, r4
 8016390:	eb18 0303 	adds.w	r3, r8, r3
 8016394:	60bb      	str	r3, [r7, #8]
 8016396:	462b      	mov	r3, r5
 8016398:	eb49 0303 	adc.w	r3, r9, r3
 801639c:	60fb      	str	r3, [r7, #12]
 801639e:	f04f 0200 	mov.w	r2, #0
 80163a2:	f04f 0300 	mov.w	r3, #0
 80163a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80163aa:	4629      	mov	r1, r5
 80163ac:	024b      	lsls	r3, r1, #9
 80163ae:	4621      	mov	r1, r4
 80163b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80163b4:	4621      	mov	r1, r4
 80163b6:	024a      	lsls	r2, r1, #9
 80163b8:	4610      	mov	r0, r2
 80163ba:	4619      	mov	r1, r3
 80163bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163be:	2200      	movs	r2, #0
 80163c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80163c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80163c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80163c8:	f7fa fc76 	bl	8010cb8 <__aeabi_uldivmod>
 80163cc:	4602      	mov	r2, r0
 80163ce:	460b      	mov	r3, r1
 80163d0:	4613      	mov	r3, r2
 80163d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80163d4:	e058      	b.n	8016488 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80163d6:	4b38      	ldr	r3, [pc, #224]	; (80164b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	099b      	lsrs	r3, r3, #6
 80163dc:	2200      	movs	r2, #0
 80163de:	4618      	mov	r0, r3
 80163e0:	4611      	mov	r1, r2
 80163e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80163e6:	623b      	str	r3, [r7, #32]
 80163e8:	2300      	movs	r3, #0
 80163ea:	627b      	str	r3, [r7, #36]	; 0x24
 80163ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80163f0:	4642      	mov	r2, r8
 80163f2:	464b      	mov	r3, r9
 80163f4:	f04f 0000 	mov.w	r0, #0
 80163f8:	f04f 0100 	mov.w	r1, #0
 80163fc:	0159      	lsls	r1, r3, #5
 80163fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8016402:	0150      	lsls	r0, r2, #5
 8016404:	4602      	mov	r2, r0
 8016406:	460b      	mov	r3, r1
 8016408:	4641      	mov	r1, r8
 801640a:	ebb2 0a01 	subs.w	sl, r2, r1
 801640e:	4649      	mov	r1, r9
 8016410:	eb63 0b01 	sbc.w	fp, r3, r1
 8016414:	f04f 0200 	mov.w	r2, #0
 8016418:	f04f 0300 	mov.w	r3, #0
 801641c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8016420:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8016424:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8016428:	ebb2 040a 	subs.w	r4, r2, sl
 801642c:	eb63 050b 	sbc.w	r5, r3, fp
 8016430:	f04f 0200 	mov.w	r2, #0
 8016434:	f04f 0300 	mov.w	r3, #0
 8016438:	00eb      	lsls	r3, r5, #3
 801643a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801643e:	00e2      	lsls	r2, r4, #3
 8016440:	4614      	mov	r4, r2
 8016442:	461d      	mov	r5, r3
 8016444:	4643      	mov	r3, r8
 8016446:	18e3      	adds	r3, r4, r3
 8016448:	603b      	str	r3, [r7, #0]
 801644a:	464b      	mov	r3, r9
 801644c:	eb45 0303 	adc.w	r3, r5, r3
 8016450:	607b      	str	r3, [r7, #4]
 8016452:	f04f 0200 	mov.w	r2, #0
 8016456:	f04f 0300 	mov.w	r3, #0
 801645a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801645e:	4629      	mov	r1, r5
 8016460:	028b      	lsls	r3, r1, #10
 8016462:	4621      	mov	r1, r4
 8016464:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8016468:	4621      	mov	r1, r4
 801646a:	028a      	lsls	r2, r1, #10
 801646c:	4610      	mov	r0, r2
 801646e:	4619      	mov	r1, r3
 8016470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016472:	2200      	movs	r2, #0
 8016474:	61bb      	str	r3, [r7, #24]
 8016476:	61fa      	str	r2, [r7, #28]
 8016478:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801647c:	f7fa fc1c 	bl	8010cb8 <__aeabi_uldivmod>
 8016480:	4602      	mov	r2, r0
 8016482:	460b      	mov	r3, r1
 8016484:	4613      	mov	r3, r2
 8016486:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8016488:	4b0b      	ldr	r3, [pc, #44]	; (80164b8 <HAL_RCC_GetSysClockFreq+0x200>)
 801648a:	685b      	ldr	r3, [r3, #4]
 801648c:	0c1b      	lsrs	r3, r3, #16
 801648e:	f003 0303 	and.w	r3, r3, #3
 8016492:	3301      	adds	r3, #1
 8016494:	005b      	lsls	r3, r3, #1
 8016496:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8016498:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801649a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801649c:	fbb2 f3f3 	udiv	r3, r2, r3
 80164a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80164a2:	e002      	b.n	80164aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80164a4:	4b05      	ldr	r3, [pc, #20]	; (80164bc <HAL_RCC_GetSysClockFreq+0x204>)
 80164a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80164a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80164aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3750      	adds	r7, #80	; 0x50
 80164b0:	46bd      	mov	sp, r7
 80164b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80164b6:	bf00      	nop
 80164b8:	40023800 	.word	0x40023800
 80164bc:	00f42400 	.word	0x00f42400
 80164c0:	007a1200 	.word	0x007a1200

080164c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80164c4:	b480      	push	{r7}
 80164c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80164c8:	4b03      	ldr	r3, [pc, #12]	; (80164d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80164ca:	681b      	ldr	r3, [r3, #0]
}
 80164cc:	4618      	mov	r0, r3
 80164ce:	46bd      	mov	sp, r7
 80164d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop
 80164d8:	20000000 	.word	0x20000000

080164dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80164e0:	f7ff fff0 	bl	80164c4 <HAL_RCC_GetHCLKFreq>
 80164e4:	4602      	mov	r2, r0
 80164e6:	4b05      	ldr	r3, [pc, #20]	; (80164fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80164e8:	689b      	ldr	r3, [r3, #8]
 80164ea:	0a9b      	lsrs	r3, r3, #10
 80164ec:	f003 0307 	and.w	r3, r3, #7
 80164f0:	4903      	ldr	r1, [pc, #12]	; (8016500 <HAL_RCC_GetPCLK1Freq+0x24>)
 80164f2:	5ccb      	ldrb	r3, [r1, r3]
 80164f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80164f8:	4618      	mov	r0, r3
 80164fa:	bd80      	pop	{r7, pc}
 80164fc:	40023800 	.word	0x40023800
 8016500:	08033f68 	.word	0x08033f68

08016504 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8016508:	f7ff ffdc 	bl	80164c4 <HAL_RCC_GetHCLKFreq>
 801650c:	4602      	mov	r2, r0
 801650e:	4b05      	ldr	r3, [pc, #20]	; (8016524 <HAL_RCC_GetPCLK2Freq+0x20>)
 8016510:	689b      	ldr	r3, [r3, #8]
 8016512:	0b5b      	lsrs	r3, r3, #13
 8016514:	f003 0307 	and.w	r3, r3, #7
 8016518:	4903      	ldr	r1, [pc, #12]	; (8016528 <HAL_RCC_GetPCLK2Freq+0x24>)
 801651a:	5ccb      	ldrb	r3, [r1, r3]
 801651c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016520:	4618      	mov	r0, r3
 8016522:	bd80      	pop	{r7, pc}
 8016524:	40023800 	.word	0x40023800
 8016528:	08033f68 	.word	0x08033f68

0801652c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801652c:	b480      	push	{r7}
 801652e:	b083      	sub	sp, #12
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
 8016534:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	220f      	movs	r2, #15
 801653a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801653c:	4b12      	ldr	r3, [pc, #72]	; (8016588 <HAL_RCC_GetClockConfig+0x5c>)
 801653e:	689b      	ldr	r3, [r3, #8]
 8016540:	f003 0203 	and.w	r2, r3, #3
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016548:	4b0f      	ldr	r3, [pc, #60]	; (8016588 <HAL_RCC_GetClockConfig+0x5c>)
 801654a:	689b      	ldr	r3, [r3, #8]
 801654c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8016554:	4b0c      	ldr	r3, [pc, #48]	; (8016588 <HAL_RCC_GetClockConfig+0x5c>)
 8016556:	689b      	ldr	r3, [r3, #8]
 8016558:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016560:	4b09      	ldr	r3, [pc, #36]	; (8016588 <HAL_RCC_GetClockConfig+0x5c>)
 8016562:	689b      	ldr	r3, [r3, #8]
 8016564:	08db      	lsrs	r3, r3, #3
 8016566:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801656e:	4b07      	ldr	r3, [pc, #28]	; (801658c <HAL_RCC_GetClockConfig+0x60>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f003 0207 	and.w	r2, r3, #7
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	601a      	str	r2, [r3, #0]
}
 801657a:	bf00      	nop
 801657c:	370c      	adds	r7, #12
 801657e:	46bd      	mov	sp, r7
 8016580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016584:	4770      	bx	lr
 8016586:	bf00      	nop
 8016588:	40023800 	.word	0x40023800
 801658c:	40023c00 	.word	0x40023c00

08016590 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b082      	sub	sp, #8
 8016594:	af00      	add	r7, sp, #0
 8016596:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d101      	bne.n	80165a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801659e:	2301      	movs	r3, #1
 80165a0:	e07b      	b.n	801669a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d108      	bne.n	80165bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	685b      	ldr	r3, [r3, #4]
 80165ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80165b2:	d009      	beq.n	80165c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	2200      	movs	r2, #0
 80165b8:	61da      	str	r2, [r3, #28]
 80165ba:	e005      	b.n	80165c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2200      	movs	r2, #0
 80165c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2200      	movs	r2, #0
 80165c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2200      	movs	r2, #0
 80165cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80165d4:	b2db      	uxtb	r3, r3
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d106      	bne.n	80165e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	2200      	movs	r2, #0
 80165de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80165e2:	6878      	ldr	r0, [r7, #4]
 80165e4:	f7fc f908 	bl	80127f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	2202      	movs	r2, #2
 80165ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	681a      	ldr	r2, [r3, #0]
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80165fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	685b      	ldr	r3, [r3, #4]
 8016604:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	689b      	ldr	r3, [r3, #8]
 801660c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8016610:	431a      	orrs	r2, r3
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	68db      	ldr	r3, [r3, #12]
 8016616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801661a:	431a      	orrs	r2, r3
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	691b      	ldr	r3, [r3, #16]
 8016620:	f003 0302 	and.w	r3, r3, #2
 8016624:	431a      	orrs	r2, r3
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	695b      	ldr	r3, [r3, #20]
 801662a:	f003 0301 	and.w	r3, r3, #1
 801662e:	431a      	orrs	r2, r3
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	699b      	ldr	r3, [r3, #24]
 8016634:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016638:	431a      	orrs	r2, r3
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	69db      	ldr	r3, [r3, #28]
 801663e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016642:	431a      	orrs	r2, r3
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6a1b      	ldr	r3, [r3, #32]
 8016648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801664c:	ea42 0103 	orr.w	r1, r2, r3
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016654:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	430a      	orrs	r2, r1
 801665e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	699b      	ldr	r3, [r3, #24]
 8016664:	0c1b      	lsrs	r3, r3, #16
 8016666:	f003 0104 	and.w	r1, r3, #4
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801666e:	f003 0210 	and.w	r2, r3, #16
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	430a      	orrs	r2, r1
 8016678:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	69da      	ldr	r2, [r3, #28]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8016688:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2200      	movs	r2, #0
 801668e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8016698:	2300      	movs	r3, #0
}
 801669a:	4618      	mov	r0, r3
 801669c:	3708      	adds	r7, #8
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}

080166a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80166a2:	b580      	push	{r7, lr}
 80166a4:	b088      	sub	sp, #32
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	60f8      	str	r0, [r7, #12]
 80166aa:	60b9      	str	r1, [r7, #8]
 80166ac:	603b      	str	r3, [r7, #0]
 80166ae:	4613      	mov	r3, r2
 80166b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80166b2:	2300      	movs	r3, #0
 80166b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80166bc:	2b01      	cmp	r3, #1
 80166be:	d101      	bne.n	80166c4 <HAL_SPI_Transmit+0x22>
 80166c0:	2302      	movs	r3, #2
 80166c2:	e12d      	b.n	8016920 <HAL_SPI_Transmit+0x27e>
 80166c4:	68fb      	ldr	r3, [r7, #12]
 80166c6:	2201      	movs	r2, #1
 80166c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80166cc:	f7fe ff0a 	bl	80154e4 <HAL_GetTick>
 80166d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80166d2:	88fb      	ldrh	r3, [r7, #6]
 80166d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80166dc:	b2db      	uxtb	r3, r3
 80166de:	2b01      	cmp	r3, #1
 80166e0:	d002      	beq.n	80166e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80166e2:	2302      	movs	r3, #2
 80166e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80166e6:	e116      	b.n	8016916 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d002      	beq.n	80166f4 <HAL_SPI_Transmit+0x52>
 80166ee:	88fb      	ldrh	r3, [r7, #6]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d102      	bne.n	80166fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80166f4:	2301      	movs	r3, #1
 80166f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80166f8:	e10d      	b.n	8016916 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	2203      	movs	r2, #3
 80166fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	2200      	movs	r2, #0
 8016706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	68ba      	ldr	r2, [r7, #8]
 801670c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	88fa      	ldrh	r2, [r7, #6]
 8016712:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8016714:	68fb      	ldr	r3, [r7, #12]
 8016716:	88fa      	ldrh	r2, [r7, #6]
 8016718:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	2200      	movs	r2, #0
 801671e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2200      	movs	r2, #0
 8016724:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2200      	movs	r2, #0
 801672a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	2200      	movs	r2, #0
 8016730:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8016732:	68fb      	ldr	r3, [r7, #12]
 8016734:	2200      	movs	r2, #0
 8016736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016738:	68fb      	ldr	r3, [r7, #12]
 801673a:	689b      	ldr	r3, [r3, #8]
 801673c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016740:	d10f      	bne.n	8016762 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	681a      	ldr	r2, [r3, #0]
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016750:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	681a      	ldr	r2, [r3, #0]
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016760:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801676c:	2b40      	cmp	r3, #64	; 0x40
 801676e:	d007      	beq.n	8016780 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	681a      	ldr	r2, [r3, #0]
 8016776:	68fb      	ldr	r3, [r7, #12]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801677e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	68db      	ldr	r3, [r3, #12]
 8016784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016788:	d14f      	bne.n	801682a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801678a:	68fb      	ldr	r3, [r7, #12]
 801678c:	685b      	ldr	r3, [r3, #4]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d002      	beq.n	8016798 <HAL_SPI_Transmit+0xf6>
 8016792:	8afb      	ldrh	r3, [r7, #22]
 8016794:	2b01      	cmp	r3, #1
 8016796:	d142      	bne.n	801681e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801679c:	881a      	ldrh	r2, [r3, #0]
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80167a4:	68fb      	ldr	r3, [r7, #12]
 80167a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167a8:	1c9a      	adds	r2, r3, #2
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80167b2:	b29b      	uxth	r3, r3
 80167b4:	3b01      	subs	r3, #1
 80167b6:	b29a      	uxth	r2, r3
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80167bc:	e02f      	b.n	801681e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	689b      	ldr	r3, [r3, #8]
 80167c4:	f003 0302 	and.w	r3, r3, #2
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	d112      	bne.n	80167f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167d0:	881a      	ldrh	r2, [r3, #0]
 80167d2:	68fb      	ldr	r3, [r7, #12]
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167dc:	1c9a      	adds	r2, r3, #2
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	3b01      	subs	r3, #1
 80167ea:	b29a      	uxth	r2, r3
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80167f0:	e015      	b.n	801681e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80167f2:	f7fe fe77 	bl	80154e4 <HAL_GetTick>
 80167f6:	4602      	mov	r2, r0
 80167f8:	69bb      	ldr	r3, [r7, #24]
 80167fa:	1ad3      	subs	r3, r2, r3
 80167fc:	683a      	ldr	r2, [r7, #0]
 80167fe:	429a      	cmp	r2, r3
 8016800:	d803      	bhi.n	801680a <HAL_SPI_Transmit+0x168>
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016808:	d102      	bne.n	8016810 <HAL_SPI_Transmit+0x16e>
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d106      	bne.n	801681e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8016810:	2303      	movs	r3, #3
 8016812:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	2201      	movs	r2, #1
 8016818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 801681c:	e07b      	b.n	8016916 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016822:	b29b      	uxth	r3, r3
 8016824:	2b00      	cmp	r3, #0
 8016826:	d1ca      	bne.n	80167be <HAL_SPI_Transmit+0x11c>
 8016828:	e050      	b.n	80168cc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	685b      	ldr	r3, [r3, #4]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d002      	beq.n	8016838 <HAL_SPI_Transmit+0x196>
 8016832:	8afb      	ldrh	r3, [r7, #22]
 8016834:	2b01      	cmp	r3, #1
 8016836:	d144      	bne.n	80168c2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	330c      	adds	r3, #12
 8016842:	7812      	ldrb	r2, [r2, #0]
 8016844:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801684a:	1c5a      	adds	r2, r3, #1
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016854:	b29b      	uxth	r3, r3
 8016856:	3b01      	subs	r3, #1
 8016858:	b29a      	uxth	r2, r3
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 801685e:	e030      	b.n	80168c2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	689b      	ldr	r3, [r3, #8]
 8016866:	f003 0302 	and.w	r3, r3, #2
 801686a:	2b02      	cmp	r3, #2
 801686c:	d113      	bne.n	8016896 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	330c      	adds	r3, #12
 8016878:	7812      	ldrb	r2, [r2, #0]
 801687a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016880:	1c5a      	adds	r2, r3, #1
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801688a:	b29b      	uxth	r3, r3
 801688c:	3b01      	subs	r3, #1
 801688e:	b29a      	uxth	r2, r3
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	86da      	strh	r2, [r3, #54]	; 0x36
 8016894:	e015      	b.n	80168c2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016896:	f7fe fe25 	bl	80154e4 <HAL_GetTick>
 801689a:	4602      	mov	r2, r0
 801689c:	69bb      	ldr	r3, [r7, #24]
 801689e:	1ad3      	subs	r3, r2, r3
 80168a0:	683a      	ldr	r2, [r7, #0]
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d803      	bhi.n	80168ae <HAL_SPI_Transmit+0x20c>
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ac:	d102      	bne.n	80168b4 <HAL_SPI_Transmit+0x212>
 80168ae:	683b      	ldr	r3, [r7, #0]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	d106      	bne.n	80168c2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80168b4:	2303      	movs	r3, #3
 80168b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	2201      	movs	r2, #1
 80168bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80168c0:	e029      	b.n	8016916 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80168c6:	b29b      	uxth	r3, r3
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d1c9      	bne.n	8016860 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80168cc:	69ba      	ldr	r2, [r7, #24]
 80168ce:	6839      	ldr	r1, [r7, #0]
 80168d0:	68f8      	ldr	r0, [r7, #12]
 80168d2:	f000 fbdf 	bl	8017094 <SPI_EndRxTxTransaction>
 80168d6:	4603      	mov	r3, r0
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d002      	beq.n	80168e2 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	2220      	movs	r2, #32
 80168e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80168e2:	68fb      	ldr	r3, [r7, #12]
 80168e4:	689b      	ldr	r3, [r3, #8]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d10a      	bne.n	8016900 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80168ea:	2300      	movs	r3, #0
 80168ec:	613b      	str	r3, [r7, #16]
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	68db      	ldr	r3, [r3, #12]
 80168f4:	613b      	str	r3, [r7, #16]
 80168f6:	68fb      	ldr	r3, [r7, #12]
 80168f8:	681b      	ldr	r3, [r3, #0]
 80168fa:	689b      	ldr	r3, [r3, #8]
 80168fc:	613b      	str	r3, [r7, #16]
 80168fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016900:	68fb      	ldr	r3, [r7, #12]
 8016902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016904:	2b00      	cmp	r3, #0
 8016906:	d002      	beq.n	801690e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8016908:	2301      	movs	r3, #1
 801690a:	77fb      	strb	r3, [r7, #31]
 801690c:	e003      	b.n	8016916 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	2201      	movs	r2, #1
 8016912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8016916:	68fb      	ldr	r3, [r7, #12]
 8016918:	2200      	movs	r2, #0
 801691a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801691e:	7ffb      	ldrb	r3, [r7, #31]
}
 8016920:	4618      	mov	r0, r3
 8016922:	3720      	adds	r7, #32
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}

08016928 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	b088      	sub	sp, #32
 801692c:	af02      	add	r7, sp, #8
 801692e:	60f8      	str	r0, [r7, #12]
 8016930:	60b9      	str	r1, [r7, #8]
 8016932:	603b      	str	r3, [r7, #0]
 8016934:	4613      	mov	r3, r2
 8016936:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016938:	2300      	movs	r3, #0
 801693a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016942:	b2db      	uxtb	r3, r3
 8016944:	2b01      	cmp	r3, #1
 8016946:	d002      	beq.n	801694e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016948:	2302      	movs	r3, #2
 801694a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801694c:	e0fb      	b.n	8016b46 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	685b      	ldr	r3, [r3, #4]
 8016952:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016956:	d112      	bne.n	801697e <HAL_SPI_Receive+0x56>
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	689b      	ldr	r3, [r3, #8]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d10e      	bne.n	801697e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	2204      	movs	r2, #4
 8016964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016968:	88fa      	ldrh	r2, [r7, #6]
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	9300      	str	r3, [sp, #0]
 801696e:	4613      	mov	r3, r2
 8016970:	68ba      	ldr	r2, [r7, #8]
 8016972:	68b9      	ldr	r1, [r7, #8]
 8016974:	68f8      	ldr	r0, [r7, #12]
 8016976:	f000 f8ef 	bl	8016b58 <HAL_SPI_TransmitReceive>
 801697a:	4603      	mov	r3, r0
 801697c:	e0e8      	b.n	8016b50 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016984:	2b01      	cmp	r3, #1
 8016986:	d101      	bne.n	801698c <HAL_SPI_Receive+0x64>
 8016988:	2302      	movs	r3, #2
 801698a:	e0e1      	b.n	8016b50 <HAL_SPI_Receive+0x228>
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2201      	movs	r2, #1
 8016990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016994:	f7fe fda6 	bl	80154e4 <HAL_GetTick>
 8016998:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d002      	beq.n	80169a6 <HAL_SPI_Receive+0x7e>
 80169a0:	88fb      	ldrh	r3, [r7, #6]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d102      	bne.n	80169ac <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80169a6:	2301      	movs	r3, #1
 80169a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80169aa:	e0cc      	b.n	8016b46 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	2204      	movs	r2, #4
 80169b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	2200      	movs	r2, #0
 80169b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	68ba      	ldr	r2, [r7, #8]
 80169be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	88fa      	ldrh	r2, [r7, #6]
 80169c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	88fa      	ldrh	r2, [r7, #6]
 80169ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	2200      	movs	r2, #0
 80169d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	2200      	movs	r2, #0
 80169d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	2200      	movs	r2, #0
 80169dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	2200      	movs	r2, #0
 80169e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	2200      	movs	r2, #0
 80169e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	689b      	ldr	r3, [r3, #8]
 80169ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80169f2:	d10f      	bne.n	8016a14 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	681a      	ldr	r2, [r3, #0]
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016a02:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016a12:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a1e:	2b40      	cmp	r3, #64	; 0x40
 8016a20:	d007      	beq.n	8016a32 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	681a      	ldr	r2, [r3, #0]
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016a30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	68db      	ldr	r3, [r3, #12]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d16a      	bne.n	8016b10 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016a3a:	e032      	b.n	8016aa2 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	689b      	ldr	r3, [r3, #8]
 8016a42:	f003 0301 	and.w	r3, r3, #1
 8016a46:	2b01      	cmp	r3, #1
 8016a48:	d115      	bne.n	8016a76 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016a4a:	68fb      	ldr	r3, [r7, #12]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	f103 020c 	add.w	r2, r3, #12
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a56:	7812      	ldrb	r2, [r2, #0]
 8016a58:	b2d2      	uxtb	r2, r2
 8016a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a60:	1c5a      	adds	r2, r3, #1
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016a6a:	b29b      	uxth	r3, r3
 8016a6c:	3b01      	subs	r3, #1
 8016a6e:	b29a      	uxth	r2, r3
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016a74:	e015      	b.n	8016aa2 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016a76:	f7fe fd35 	bl	80154e4 <HAL_GetTick>
 8016a7a:	4602      	mov	r2, r0
 8016a7c:	693b      	ldr	r3, [r7, #16]
 8016a7e:	1ad3      	subs	r3, r2, r3
 8016a80:	683a      	ldr	r2, [r7, #0]
 8016a82:	429a      	cmp	r2, r3
 8016a84:	d803      	bhi.n	8016a8e <HAL_SPI_Receive+0x166>
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a8c:	d102      	bne.n	8016a94 <HAL_SPI_Receive+0x16c>
 8016a8e:	683b      	ldr	r3, [r7, #0]
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d106      	bne.n	8016aa2 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016a94:	2303      	movs	r3, #3
 8016a96:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	2201      	movs	r2, #1
 8016a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016aa0:	e051      	b.n	8016b46 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d1c7      	bne.n	8016a3c <HAL_SPI_Receive+0x114>
 8016aac:	e035      	b.n	8016b1a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016aae:	68fb      	ldr	r3, [r7, #12]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	689b      	ldr	r3, [r3, #8]
 8016ab4:	f003 0301 	and.w	r3, r3, #1
 8016ab8:	2b01      	cmp	r3, #1
 8016aba:	d113      	bne.n	8016ae4 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	68da      	ldr	r2, [r3, #12]
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ac6:	b292      	uxth	r2, r2
 8016ac8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ace:	1c9a      	adds	r2, r3, #2
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016ad8:	b29b      	uxth	r3, r3
 8016ada:	3b01      	subs	r3, #1
 8016adc:	b29a      	uxth	r2, r3
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016ae2:	e015      	b.n	8016b10 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016ae4:	f7fe fcfe 	bl	80154e4 <HAL_GetTick>
 8016ae8:	4602      	mov	r2, r0
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	1ad3      	subs	r3, r2, r3
 8016aee:	683a      	ldr	r2, [r7, #0]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d803      	bhi.n	8016afc <HAL_SPI_Receive+0x1d4>
 8016af4:	683b      	ldr	r3, [r7, #0]
 8016af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016afa:	d102      	bne.n	8016b02 <HAL_SPI_Receive+0x1da>
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d106      	bne.n	8016b10 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8016b02:	2303      	movs	r3, #3
 8016b04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	2201      	movs	r2, #1
 8016b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016b0e:	e01a      	b.n	8016b46 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016b14:	b29b      	uxth	r3, r3
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d1c9      	bne.n	8016aae <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016b1a:	693a      	ldr	r2, [r7, #16]
 8016b1c:	6839      	ldr	r1, [r7, #0]
 8016b1e:	68f8      	ldr	r0, [r7, #12]
 8016b20:	f000 fa52 	bl	8016fc8 <SPI_EndRxTransaction>
 8016b24:	4603      	mov	r3, r0
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d002      	beq.n	8016b30 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	2220      	movs	r2, #32
 8016b2e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d002      	beq.n	8016b3e <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8016b38:	2301      	movs	r3, #1
 8016b3a:	75fb      	strb	r3, [r7, #23]
 8016b3c:	e003      	b.n	8016b46 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	2201      	movs	r2, #1
 8016b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	2200      	movs	r2, #0
 8016b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	3718      	adds	r7, #24
 8016b54:	46bd      	mov	sp, r7
 8016b56:	bd80      	pop	{r7, pc}

08016b58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b08c      	sub	sp, #48	; 0x30
 8016b5c:	af00      	add	r7, sp, #0
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	60b9      	str	r1, [r7, #8]
 8016b62:	607a      	str	r2, [r7, #4]
 8016b64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016b66:	2301      	movs	r3, #1
 8016b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	d101      	bne.n	8016b7e <HAL_SPI_TransmitReceive+0x26>
 8016b7a:	2302      	movs	r3, #2
 8016b7c:	e198      	b.n	8016eb0 <HAL_SPI_TransmitReceive+0x358>
 8016b7e:	68fb      	ldr	r3, [r7, #12]
 8016b80:	2201      	movs	r2, #1
 8016b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016b86:	f7fe fcad 	bl	80154e4 <HAL_GetTick>
 8016b8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016b8c:	68fb      	ldr	r3, [r7, #12]
 8016b8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	685b      	ldr	r3, [r3, #4]
 8016b9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016b9c:	887b      	ldrh	r3, [r7, #2]
 8016b9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d00f      	beq.n	8016bc8 <HAL_SPI_TransmitReceive+0x70>
 8016ba8:	69fb      	ldr	r3, [r7, #28]
 8016baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016bae:	d107      	bne.n	8016bc0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	689b      	ldr	r3, [r3, #8]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d103      	bne.n	8016bc0 <HAL_SPI_TransmitReceive+0x68>
 8016bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016bbc:	2b04      	cmp	r3, #4
 8016bbe:	d003      	beq.n	8016bc8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016bc0:	2302      	movs	r3, #2
 8016bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016bc6:	e16d      	b.n	8016ea4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016bc8:	68bb      	ldr	r3, [r7, #8]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d005      	beq.n	8016bda <HAL_SPI_TransmitReceive+0x82>
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d002      	beq.n	8016bda <HAL_SPI_TransmitReceive+0x82>
 8016bd4:	887b      	ldrh	r3, [r7, #2]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d103      	bne.n	8016be2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016bda:	2301      	movs	r3, #1
 8016bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016be0:	e160      	b.n	8016ea4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016be8:	b2db      	uxtb	r3, r3
 8016bea:	2b04      	cmp	r3, #4
 8016bec:	d003      	beq.n	8016bf6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2205      	movs	r2, #5
 8016bf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016bfc:	68fb      	ldr	r3, [r7, #12]
 8016bfe:	687a      	ldr	r2, [r7, #4]
 8016c00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	887a      	ldrh	r2, [r7, #2]
 8016c06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	887a      	ldrh	r2, [r7, #2]
 8016c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	68ba      	ldr	r2, [r7, #8]
 8016c12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	887a      	ldrh	r2, [r7, #2]
 8016c18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	887a      	ldrh	r2, [r7, #2]
 8016c1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	2200      	movs	r2, #0
 8016c24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2200      	movs	r2, #0
 8016c2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c36:	2b40      	cmp	r3, #64	; 0x40
 8016c38:	d007      	beq.n	8016c4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	681a      	ldr	r2, [r3, #0]
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016c48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016c4a:	68fb      	ldr	r3, [r7, #12]
 8016c4c:	68db      	ldr	r3, [r3, #12]
 8016c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016c52:	d17c      	bne.n	8016d4e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	685b      	ldr	r3, [r3, #4]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d002      	beq.n	8016c62 <HAL_SPI_TransmitReceive+0x10a>
 8016c5c:	8b7b      	ldrh	r3, [r7, #26]
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d16a      	bne.n	8016d38 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c66:	881a      	ldrh	r2, [r3, #0]
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016c6e:	68fb      	ldr	r3, [r7, #12]
 8016c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c72:	1c9a      	adds	r2, r3, #2
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	3b01      	subs	r3, #1
 8016c80:	b29a      	uxth	r2, r3
 8016c82:	68fb      	ldr	r3, [r7, #12]
 8016c84:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016c86:	e057      	b.n	8016d38 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	689b      	ldr	r3, [r3, #8]
 8016c8e:	f003 0302 	and.w	r3, r3, #2
 8016c92:	2b02      	cmp	r3, #2
 8016c94:	d11b      	bne.n	8016cce <HAL_SPI_TransmitReceive+0x176>
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016c9a:	b29b      	uxth	r3, r3
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d016      	beq.n	8016cce <HAL_SPI_TransmitReceive+0x176>
 8016ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca2:	2b01      	cmp	r3, #1
 8016ca4:	d113      	bne.n	8016cce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016caa:	881a      	ldrh	r2, [r3, #0]
 8016cac:	68fb      	ldr	r3, [r7, #12]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016cb6:	1c9a      	adds	r2, r3, #2
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016cc0:	b29b      	uxth	r3, r3
 8016cc2:	3b01      	subs	r3, #1
 8016cc4:	b29a      	uxth	r2, r3
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016cce:	68fb      	ldr	r3, [r7, #12]
 8016cd0:	681b      	ldr	r3, [r3, #0]
 8016cd2:	689b      	ldr	r3, [r3, #8]
 8016cd4:	f003 0301 	and.w	r3, r3, #1
 8016cd8:	2b01      	cmp	r3, #1
 8016cda:	d119      	bne.n	8016d10 <HAL_SPI_TransmitReceive+0x1b8>
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d014      	beq.n	8016d10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	68da      	ldr	r2, [r3, #12]
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cf0:	b292      	uxth	r2, r2
 8016cf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cf8:	1c9a      	adds	r2, r3, #2
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016d02:	b29b      	uxth	r3, r3
 8016d04:	3b01      	subs	r3, #1
 8016d06:	b29a      	uxth	r2, r3
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016d0c:	2301      	movs	r3, #1
 8016d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8016d10:	f7fe fbe8 	bl	80154e4 <HAL_GetTick>
 8016d14:	4602      	mov	r2, r0
 8016d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d18:	1ad3      	subs	r3, r2, r3
 8016d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d80b      	bhi.n	8016d38 <HAL_SPI_TransmitReceive+0x1e0>
 8016d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d26:	d007      	beq.n	8016d38 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8016d28:	2303      	movs	r3, #3
 8016d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	2201      	movs	r2, #1
 8016d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016d36:	e0b5      	b.n	8016ea4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d3c:	b29b      	uxth	r3, r3
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d1a2      	bne.n	8016c88 <HAL_SPI_TransmitReceive+0x130>
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d19d      	bne.n	8016c88 <HAL_SPI_TransmitReceive+0x130>
 8016d4c:	e080      	b.n	8016e50 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	685b      	ldr	r3, [r3, #4]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d002      	beq.n	8016d5c <HAL_SPI_TransmitReceive+0x204>
 8016d56:	8b7b      	ldrh	r3, [r7, #26]
 8016d58:	2b01      	cmp	r3, #1
 8016d5a:	d16f      	bne.n	8016e3c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	330c      	adds	r3, #12
 8016d66:	7812      	ldrb	r2, [r2, #0]
 8016d68:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d6e:	1c5a      	adds	r2, r3, #1
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d78:	b29b      	uxth	r3, r3
 8016d7a:	3b01      	subs	r3, #1
 8016d7c:	b29a      	uxth	r2, r3
 8016d7e:	68fb      	ldr	r3, [r7, #12]
 8016d80:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016d82:	e05b      	b.n	8016e3c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	689b      	ldr	r3, [r3, #8]
 8016d8a:	f003 0302 	and.w	r3, r3, #2
 8016d8e:	2b02      	cmp	r3, #2
 8016d90:	d11c      	bne.n	8016dcc <HAL_SPI_TransmitReceive+0x274>
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016d96:	b29b      	uxth	r3, r3
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d017      	beq.n	8016dcc <HAL_SPI_TransmitReceive+0x274>
 8016d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d9e:	2b01      	cmp	r3, #1
 8016da0:	d114      	bne.n	8016dcc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	330c      	adds	r3, #12
 8016dac:	7812      	ldrb	r2, [r2, #0]
 8016dae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016db4:	1c5a      	adds	r2, r3, #1
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	3b01      	subs	r3, #1
 8016dc2:	b29a      	uxth	r2, r3
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	689b      	ldr	r3, [r3, #8]
 8016dd2:	f003 0301 	and.w	r3, r3, #1
 8016dd6:	2b01      	cmp	r3, #1
 8016dd8:	d119      	bne.n	8016e0e <HAL_SPI_TransmitReceive+0x2b6>
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016dde:	b29b      	uxth	r3, r3
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d014      	beq.n	8016e0e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	68da      	ldr	r2, [r3, #12]
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dee:	b2d2      	uxtb	r2, r2
 8016df0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016df6:	1c5a      	adds	r2, r3, #1
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	3b01      	subs	r3, #1
 8016e04:	b29a      	uxth	r2, r3
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8016e0a:	2301      	movs	r3, #1
 8016e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8016e0e:	f7fe fb69 	bl	80154e4 <HAL_GetTick>
 8016e12:	4602      	mov	r2, r0
 8016e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e16:	1ad3      	subs	r3, r2, r3
 8016e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e1a:	429a      	cmp	r2, r3
 8016e1c:	d803      	bhi.n	8016e26 <HAL_SPI_TransmitReceive+0x2ce>
 8016e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e24:	d102      	bne.n	8016e2c <HAL_SPI_TransmitReceive+0x2d4>
 8016e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d107      	bne.n	8016e3c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8016e2c:	2303      	movs	r3, #3
 8016e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	2201      	movs	r2, #1
 8016e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8016e3a:	e033      	b.n	8016ea4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016e40:	b29b      	uxth	r3, r3
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d19e      	bne.n	8016d84 <HAL_SPI_TransmitReceive+0x22c>
 8016e46:	68fb      	ldr	r3, [r7, #12]
 8016e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d199      	bne.n	8016d84 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016e54:	68f8      	ldr	r0, [r7, #12]
 8016e56:	f000 f91d 	bl	8017094 <SPI_EndRxTxTransaction>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d006      	beq.n	8016e6e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8016e60:	2301      	movs	r3, #1
 8016e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	2220      	movs	r2, #32
 8016e6a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8016e6c:	e01a      	b.n	8016ea4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	689b      	ldr	r3, [r3, #8]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d10a      	bne.n	8016e8c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016e76:	2300      	movs	r3, #0
 8016e78:	617b      	str	r3, [r7, #20]
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	68db      	ldr	r3, [r3, #12]
 8016e80:	617b      	str	r3, [r7, #20]
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	689b      	ldr	r3, [r3, #8]
 8016e88:	617b      	str	r3, [r7, #20]
 8016e8a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d003      	beq.n	8016e9c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8016e94:	2301      	movs	r3, #1
 8016e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8016e9a:	e003      	b.n	8016ea4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016e9c:	68fb      	ldr	r3, [r7, #12]
 8016e9e:	2201      	movs	r2, #1
 8016ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016eac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3730      	adds	r7, #48	; 0x30
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}

08016eb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b088      	sub	sp, #32
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	60b9      	str	r1, [r7, #8]
 8016ec2:	603b      	str	r3, [r7, #0]
 8016ec4:	4613      	mov	r3, r2
 8016ec6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8016ec8:	f7fe fb0c 	bl	80154e4 <HAL_GetTick>
 8016ecc:	4602      	mov	r2, r0
 8016ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed0:	1a9b      	subs	r3, r3, r2
 8016ed2:	683a      	ldr	r2, [r7, #0]
 8016ed4:	4413      	add	r3, r2
 8016ed6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8016ed8:	f7fe fb04 	bl	80154e4 <HAL_GetTick>
 8016edc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8016ede:	4b39      	ldr	r3, [pc, #228]	; (8016fc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	015b      	lsls	r3, r3, #5
 8016ee4:	0d1b      	lsrs	r3, r3, #20
 8016ee6:	69fa      	ldr	r2, [r7, #28]
 8016ee8:	fb02 f303 	mul.w	r3, r2, r3
 8016eec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016eee:	e054      	b.n	8016f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8016ef0:	683b      	ldr	r3, [r7, #0]
 8016ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ef6:	d050      	beq.n	8016f9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8016ef8:	f7fe faf4 	bl	80154e4 <HAL_GetTick>
 8016efc:	4602      	mov	r2, r0
 8016efe:	69bb      	ldr	r3, [r7, #24]
 8016f00:	1ad3      	subs	r3, r2, r3
 8016f02:	69fa      	ldr	r2, [r7, #28]
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d902      	bls.n	8016f0e <SPI_WaitFlagStateUntilTimeout+0x56>
 8016f08:	69fb      	ldr	r3, [r7, #28]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d13d      	bne.n	8016f8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	685a      	ldr	r2, [r3, #4]
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8016f1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016f26:	d111      	bne.n	8016f4c <SPI_WaitFlagStateUntilTimeout+0x94>
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	689b      	ldr	r3, [r3, #8]
 8016f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016f30:	d004      	beq.n	8016f3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	689b      	ldr	r3, [r3, #8]
 8016f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f3a:	d107      	bne.n	8016f4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	681a      	ldr	r2, [r3, #0]
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016f4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016f54:	d10f      	bne.n	8016f76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	681a      	ldr	r2, [r3, #0]
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8016f64:	601a      	str	r2, [r3, #0]
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	681a      	ldr	r2, [r3, #0]
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8016f74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	2201      	movs	r2, #1
 8016f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	2200      	movs	r2, #0
 8016f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8016f86:	2303      	movs	r3, #3
 8016f88:	e017      	b.n	8016fba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d101      	bne.n	8016f94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8016f90:	2300      	movs	r3, #0
 8016f92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	3b01      	subs	r3, #1
 8016f98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8016f9a:	68fb      	ldr	r3, [r7, #12]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	689a      	ldr	r2, [r3, #8]
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	4013      	ands	r3, r2
 8016fa4:	68ba      	ldr	r2, [r7, #8]
 8016fa6:	429a      	cmp	r2, r3
 8016fa8:	bf0c      	ite	eq
 8016faa:	2301      	moveq	r3, #1
 8016fac:	2300      	movne	r3, #0
 8016fae:	b2db      	uxtb	r3, r3
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	79fb      	ldrb	r3, [r7, #7]
 8016fb4:	429a      	cmp	r2, r3
 8016fb6:	d19b      	bne.n	8016ef0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8016fb8:	2300      	movs	r3, #0
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3720      	adds	r7, #32
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	20000000 	.word	0x20000000

08016fc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b086      	sub	sp, #24
 8016fcc:	af02      	add	r7, sp, #8
 8016fce:	60f8      	str	r0, [r7, #12]
 8016fd0:	60b9      	str	r1, [r7, #8]
 8016fd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016fdc:	d111      	bne.n	8017002 <SPI_EndRxTransaction+0x3a>
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	689b      	ldr	r3, [r3, #8]
 8016fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016fe6:	d004      	beq.n	8016ff2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	689b      	ldr	r3, [r3, #8]
 8016fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016ff0:	d107      	bne.n	8017002 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	681a      	ldr	r2, [r3, #0]
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017000:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	685b      	ldr	r3, [r3, #4]
 8017006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801700a:	d12a      	bne.n	8017062 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	689b      	ldr	r3, [r3, #8]
 8017010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017014:	d012      	beq.n	801703c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	9300      	str	r3, [sp, #0]
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	2200      	movs	r2, #0
 801701e:	2180      	movs	r1, #128	; 0x80
 8017020:	68f8      	ldr	r0, [r7, #12]
 8017022:	f7ff ff49 	bl	8016eb8 <SPI_WaitFlagStateUntilTimeout>
 8017026:	4603      	mov	r3, r0
 8017028:	2b00      	cmp	r3, #0
 801702a:	d02d      	beq.n	8017088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017030:	f043 0220 	orr.w	r2, r3, #32
 8017034:	68fb      	ldr	r3, [r7, #12]
 8017036:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8017038:	2303      	movs	r3, #3
 801703a:	e026      	b.n	801708a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	9300      	str	r3, [sp, #0]
 8017040:	68bb      	ldr	r3, [r7, #8]
 8017042:	2200      	movs	r2, #0
 8017044:	2101      	movs	r1, #1
 8017046:	68f8      	ldr	r0, [r7, #12]
 8017048:	f7ff ff36 	bl	8016eb8 <SPI_WaitFlagStateUntilTimeout>
 801704c:	4603      	mov	r3, r0
 801704e:	2b00      	cmp	r3, #0
 8017050:	d01a      	beq.n	8017088 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017056:	f043 0220 	orr.w	r2, r3, #32
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801705e:	2303      	movs	r3, #3
 8017060:	e013      	b.n	801708a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	9300      	str	r3, [sp, #0]
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	2200      	movs	r2, #0
 801706a:	2101      	movs	r1, #1
 801706c:	68f8      	ldr	r0, [r7, #12]
 801706e:	f7ff ff23 	bl	8016eb8 <SPI_WaitFlagStateUntilTimeout>
 8017072:	4603      	mov	r3, r0
 8017074:	2b00      	cmp	r3, #0
 8017076:	d007      	beq.n	8017088 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801707c:	f043 0220 	orr.w	r2, r3, #32
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017084:	2303      	movs	r3, #3
 8017086:	e000      	b.n	801708a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8017088:	2300      	movs	r3, #0
}
 801708a:	4618      	mov	r0, r3
 801708c:	3710      	adds	r7, #16
 801708e:	46bd      	mov	sp, r7
 8017090:	bd80      	pop	{r7, pc}
	...

08017094 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b088      	sub	sp, #32
 8017098:	af02      	add	r7, sp, #8
 801709a:	60f8      	str	r0, [r7, #12]
 801709c:	60b9      	str	r1, [r7, #8]
 801709e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	9300      	str	r3, [sp, #0]
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	2201      	movs	r2, #1
 80170a8:	2102      	movs	r1, #2
 80170aa:	68f8      	ldr	r0, [r7, #12]
 80170ac:	f7ff ff04 	bl	8016eb8 <SPI_WaitFlagStateUntilTimeout>
 80170b0:	4603      	mov	r3, r0
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d007      	beq.n	80170c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80170ba:	f043 0220 	orr.w	r2, r3, #32
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80170c2:	2303      	movs	r3, #3
 80170c4:	e032      	b.n	801712c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80170c6:	4b1b      	ldr	r3, [pc, #108]	; (8017134 <SPI_EndRxTxTransaction+0xa0>)
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	4a1b      	ldr	r2, [pc, #108]	; (8017138 <SPI_EndRxTxTransaction+0xa4>)
 80170cc:	fba2 2303 	umull	r2, r3, r2, r3
 80170d0:	0d5b      	lsrs	r3, r3, #21
 80170d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80170d6:	fb02 f303 	mul.w	r3, r2, r3
 80170da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80170e4:	d112      	bne.n	801710c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	9300      	str	r3, [sp, #0]
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	2200      	movs	r2, #0
 80170ee:	2180      	movs	r1, #128	; 0x80
 80170f0:	68f8      	ldr	r0, [r7, #12]
 80170f2:	f7ff fee1 	bl	8016eb8 <SPI_WaitFlagStateUntilTimeout>
 80170f6:	4603      	mov	r3, r0
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d016      	beq.n	801712a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017100:	f043 0220 	orr.w	r2, r3, #32
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017108:	2303      	movs	r3, #3
 801710a:	e00f      	b.n	801712c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801710c:	697b      	ldr	r3, [r7, #20]
 801710e:	2b00      	cmp	r3, #0
 8017110:	d00a      	beq.n	8017128 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8017112:	697b      	ldr	r3, [r7, #20]
 8017114:	3b01      	subs	r3, #1
 8017116:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	689b      	ldr	r3, [r3, #8]
 801711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017122:	2b80      	cmp	r3, #128	; 0x80
 8017124:	d0f2      	beq.n	801710c <SPI_EndRxTxTransaction+0x78>
 8017126:	e000      	b.n	801712a <SPI_EndRxTxTransaction+0x96>
        break;
 8017128:	bf00      	nop
  }

  return HAL_OK;
 801712a:	2300      	movs	r3, #0
}
 801712c:	4618      	mov	r0, r3
 801712e:	3718      	adds	r7, #24
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}
 8017134:	20000000 	.word	0x20000000
 8017138:	165e9f81 	.word	0x165e9f81

0801713c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	2b00      	cmp	r3, #0
 8017148:	d101      	bne.n	801714e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801714a:	2301      	movs	r3, #1
 801714c:	e041      	b.n	80171d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017154:	b2db      	uxtb	r3, r3
 8017156:	2b00      	cmp	r3, #0
 8017158:	d106      	bne.n	8017168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2200      	movs	r2, #0
 801715e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f000 f839 	bl	80171da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	2202      	movs	r2, #2
 801716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681a      	ldr	r2, [r3, #0]
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	3304      	adds	r3, #4
 8017178:	4619      	mov	r1, r3
 801717a:	4610      	mov	r0, r2
 801717c:	f000 f9b2 	bl	80174e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2201      	movs	r2, #1
 8017184:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	2201      	movs	r2, #1
 801718c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2201      	movs	r2, #1
 8017194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2201      	movs	r2, #1
 801719c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	2201      	movs	r2, #1
 80171a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	2201      	movs	r2, #1
 80171ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	2201      	movs	r2, #1
 80171b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2201      	movs	r2, #1
 80171bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2201      	movs	r2, #1
 80171c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	2201      	movs	r2, #1
 80171cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80171d0:	2300      	movs	r3, #0
}
 80171d2:	4618      	mov	r0, r3
 80171d4:	3708      	adds	r7, #8
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}

080171da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80171da:	b480      	push	{r7}
 80171dc:	b083      	sub	sp, #12
 80171de:	af00      	add	r7, sp, #0
 80171e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80171e2:	bf00      	nop
 80171e4:	370c      	adds	r7, #12
 80171e6:	46bd      	mov	sp, r7
 80171e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ec:	4770      	bx	lr
	...

080171f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80171f0:	b480      	push	{r7}
 80171f2:	b085      	sub	sp, #20
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80171fe:	b2db      	uxtb	r3, r3
 8017200:	2b01      	cmp	r3, #1
 8017202:	d001      	beq.n	8017208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8017204:	2301      	movs	r3, #1
 8017206:	e044      	b.n	8017292 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2202      	movs	r2, #2
 801720c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	68da      	ldr	r2, [r3, #12]
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	f042 0201 	orr.w	r2, r2, #1
 801721e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	4a1e      	ldr	r2, [pc, #120]	; (80172a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8017226:	4293      	cmp	r3, r2
 8017228:	d018      	beq.n	801725c <HAL_TIM_Base_Start_IT+0x6c>
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017232:	d013      	beq.n	801725c <HAL_TIM_Base_Start_IT+0x6c>
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	4a1a      	ldr	r2, [pc, #104]	; (80172a4 <HAL_TIM_Base_Start_IT+0xb4>)
 801723a:	4293      	cmp	r3, r2
 801723c:	d00e      	beq.n	801725c <HAL_TIM_Base_Start_IT+0x6c>
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	4a19      	ldr	r2, [pc, #100]	; (80172a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8017244:	4293      	cmp	r3, r2
 8017246:	d009      	beq.n	801725c <HAL_TIM_Base_Start_IT+0x6c>
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	4a17      	ldr	r2, [pc, #92]	; (80172ac <HAL_TIM_Base_Start_IT+0xbc>)
 801724e:	4293      	cmp	r3, r2
 8017250:	d004      	beq.n	801725c <HAL_TIM_Base_Start_IT+0x6c>
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	4a16      	ldr	r2, [pc, #88]	; (80172b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8017258:	4293      	cmp	r3, r2
 801725a:	d111      	bne.n	8017280 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	689b      	ldr	r3, [r3, #8]
 8017262:	f003 0307 	and.w	r3, r3, #7
 8017266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	2b06      	cmp	r3, #6
 801726c:	d010      	beq.n	8017290 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	681a      	ldr	r2, [r3, #0]
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	f042 0201 	orr.w	r2, r2, #1
 801727c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801727e:	e007      	b.n	8017290 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	f042 0201 	orr.w	r2, r2, #1
 801728e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017290:	2300      	movs	r3, #0
}
 8017292:	4618      	mov	r0, r3
 8017294:	3714      	adds	r7, #20
 8017296:	46bd      	mov	sp, r7
 8017298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729c:	4770      	bx	lr
 801729e:	bf00      	nop
 80172a0:	40010000 	.word	0x40010000
 80172a4:	40000400 	.word	0x40000400
 80172a8:	40000800 	.word	0x40000800
 80172ac:	40000c00 	.word	0x40000c00
 80172b0:	40014000 	.word	0x40014000

080172b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80172b4:	b580      	push	{r7, lr}
 80172b6:	b084      	sub	sp, #16
 80172b8:	af00      	add	r7, sp, #0
 80172ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	68db      	ldr	r3, [r3, #12]
 80172c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	691b      	ldr	r3, [r3, #16]
 80172ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	f003 0302 	and.w	r3, r3, #2
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d020      	beq.n	8017318 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	f003 0302 	and.w	r3, r3, #2
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d01b      	beq.n	8017318 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80172e0:	687b      	ldr	r3, [r7, #4]
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	f06f 0202 	mvn.w	r2, #2
 80172e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	2201      	movs	r2, #1
 80172ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	699b      	ldr	r3, [r3, #24]
 80172f6:	f003 0303 	and.w	r3, r3, #3
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d003      	beq.n	8017306 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f000 f8d2 	bl	80174a8 <HAL_TIM_IC_CaptureCallback>
 8017304:	e005      	b.n	8017312 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	f000 f8c4 	bl	8017494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801730c:	6878      	ldr	r0, [r7, #4]
 801730e:	f000 f8d5 	bl	80174bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	2200      	movs	r2, #0
 8017316:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017318:	68bb      	ldr	r3, [r7, #8]
 801731a:	f003 0304 	and.w	r3, r3, #4
 801731e:	2b00      	cmp	r3, #0
 8017320:	d020      	beq.n	8017364 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	f003 0304 	and.w	r3, r3, #4
 8017328:	2b00      	cmp	r3, #0
 801732a:	d01b      	beq.n	8017364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	f06f 0204 	mvn.w	r2, #4
 8017334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	2202      	movs	r2, #2
 801733a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	699b      	ldr	r3, [r3, #24]
 8017342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017346:	2b00      	cmp	r3, #0
 8017348:	d003      	beq.n	8017352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f000 f8ac 	bl	80174a8 <HAL_TIM_IC_CaptureCallback>
 8017350:	e005      	b.n	801735e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f000 f89e 	bl	8017494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f000 f8af 	bl	80174bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2200      	movs	r2, #0
 8017362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8017364:	68bb      	ldr	r3, [r7, #8]
 8017366:	f003 0308 	and.w	r3, r3, #8
 801736a:	2b00      	cmp	r3, #0
 801736c:	d020      	beq.n	80173b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801736e:	68fb      	ldr	r3, [r7, #12]
 8017370:	f003 0308 	and.w	r3, r3, #8
 8017374:	2b00      	cmp	r3, #0
 8017376:	d01b      	beq.n	80173b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	f06f 0208 	mvn.w	r2, #8
 8017380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	2204      	movs	r2, #4
 8017386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	69db      	ldr	r3, [r3, #28]
 801738e:	f003 0303 	and.w	r3, r3, #3
 8017392:	2b00      	cmp	r3, #0
 8017394:	d003      	beq.n	801739e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	f000 f886 	bl	80174a8 <HAL_TIM_IC_CaptureCallback>
 801739c:	e005      	b.n	80173aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f000 f878 	bl	8017494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80173a4:	6878      	ldr	r0, [r7, #4]
 80173a6:	f000 f889 	bl	80174bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	2200      	movs	r2, #0
 80173ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	f003 0310 	and.w	r3, r3, #16
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d020      	beq.n	80173fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80173ba:	68fb      	ldr	r3, [r7, #12]
 80173bc:	f003 0310 	and.w	r3, r3, #16
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d01b      	beq.n	80173fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	681b      	ldr	r3, [r3, #0]
 80173c8:	f06f 0210 	mvn.w	r2, #16
 80173cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	2208      	movs	r2, #8
 80173d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	69db      	ldr	r3, [r3, #28]
 80173da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d003      	beq.n	80173ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80173e2:	6878      	ldr	r0, [r7, #4]
 80173e4:	f000 f860 	bl	80174a8 <HAL_TIM_IC_CaptureCallback>
 80173e8:	e005      	b.n	80173f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f000 f852 	bl	8017494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f000 f863 	bl	80174bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2200      	movs	r2, #0
 80173fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	f003 0301 	and.w	r3, r3, #1
 8017402:	2b00      	cmp	r3, #0
 8017404:	d00c      	beq.n	8017420 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	f003 0301 	and.w	r3, r3, #1
 801740c:	2b00      	cmp	r3, #0
 801740e:	d007      	beq.n	8017420 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	f06f 0201 	mvn.w	r2, #1
 8017418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f7fb f986 	bl	801272c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017426:	2b00      	cmp	r3, #0
 8017428:	d00c      	beq.n	8017444 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801742a:	68fb      	ldr	r3, [r7, #12]
 801742c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017430:	2b00      	cmp	r3, #0
 8017432:	d007      	beq.n	8017444 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801743c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f000 f8e6 	bl	8017610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8017444:	68bb      	ldr	r3, [r7, #8]
 8017446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00c      	beq.n	8017468 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017454:	2b00      	cmp	r3, #0
 8017456:	d007      	beq.n	8017468 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017462:	6878      	ldr	r0, [r7, #4]
 8017464:	f000 f834 	bl	80174d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017468:	68bb      	ldr	r3, [r7, #8]
 801746a:	f003 0320 	and.w	r3, r3, #32
 801746e:	2b00      	cmp	r3, #0
 8017470:	d00c      	beq.n	801748c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	f003 0320 	and.w	r3, r3, #32
 8017478:	2b00      	cmp	r3, #0
 801747a:	d007      	beq.n	801748c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	f06f 0220 	mvn.w	r2, #32
 8017484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f000 f8b8 	bl	80175fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801748c:	bf00      	nop
 801748e:	3710      	adds	r7, #16
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017494:	b480      	push	{r7}
 8017496:	b083      	sub	sp, #12
 8017498:	af00      	add	r7, sp, #0
 801749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801749c:	bf00      	nop
 801749e:	370c      	adds	r7, #12
 80174a0:	46bd      	mov	sp, r7
 80174a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a6:	4770      	bx	lr

080174a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80174a8:	b480      	push	{r7}
 80174aa:	b083      	sub	sp, #12
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80174b0:	bf00      	nop
 80174b2:	370c      	adds	r7, #12
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr

080174bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80174bc:	b480      	push	{r7}
 80174be:	b083      	sub	sp, #12
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80174c4:	bf00      	nop
 80174c6:	370c      	adds	r7, #12
 80174c8:	46bd      	mov	sp, r7
 80174ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ce:	4770      	bx	lr

080174d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80174d0:	b480      	push	{r7}
 80174d2:	b083      	sub	sp, #12
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80174d8:	bf00      	nop
 80174da:	370c      	adds	r7, #12
 80174dc:	46bd      	mov	sp, r7
 80174de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e2:	4770      	bx	lr

080174e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80174e4:	b480      	push	{r7}
 80174e6:	b085      	sub	sp, #20
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	4a3a      	ldr	r2, [pc, #232]	; (80175e0 <TIM_Base_SetConfig+0xfc>)
 80174f8:	4293      	cmp	r3, r2
 80174fa:	d00f      	beq.n	801751c <TIM_Base_SetConfig+0x38>
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017502:	d00b      	beq.n	801751c <TIM_Base_SetConfig+0x38>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	4a37      	ldr	r2, [pc, #220]	; (80175e4 <TIM_Base_SetConfig+0x100>)
 8017508:	4293      	cmp	r3, r2
 801750a:	d007      	beq.n	801751c <TIM_Base_SetConfig+0x38>
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	4a36      	ldr	r2, [pc, #216]	; (80175e8 <TIM_Base_SetConfig+0x104>)
 8017510:	4293      	cmp	r3, r2
 8017512:	d003      	beq.n	801751c <TIM_Base_SetConfig+0x38>
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	4a35      	ldr	r2, [pc, #212]	; (80175ec <TIM_Base_SetConfig+0x108>)
 8017518:	4293      	cmp	r3, r2
 801751a:	d108      	bne.n	801752e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	685b      	ldr	r3, [r3, #4]
 8017528:	68fa      	ldr	r2, [r7, #12]
 801752a:	4313      	orrs	r3, r2
 801752c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	4a2b      	ldr	r2, [pc, #172]	; (80175e0 <TIM_Base_SetConfig+0xfc>)
 8017532:	4293      	cmp	r3, r2
 8017534:	d01b      	beq.n	801756e <TIM_Base_SetConfig+0x8a>
 8017536:	687b      	ldr	r3, [r7, #4]
 8017538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801753c:	d017      	beq.n	801756e <TIM_Base_SetConfig+0x8a>
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	4a28      	ldr	r2, [pc, #160]	; (80175e4 <TIM_Base_SetConfig+0x100>)
 8017542:	4293      	cmp	r3, r2
 8017544:	d013      	beq.n	801756e <TIM_Base_SetConfig+0x8a>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	4a27      	ldr	r2, [pc, #156]	; (80175e8 <TIM_Base_SetConfig+0x104>)
 801754a:	4293      	cmp	r3, r2
 801754c:	d00f      	beq.n	801756e <TIM_Base_SetConfig+0x8a>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	4a26      	ldr	r2, [pc, #152]	; (80175ec <TIM_Base_SetConfig+0x108>)
 8017552:	4293      	cmp	r3, r2
 8017554:	d00b      	beq.n	801756e <TIM_Base_SetConfig+0x8a>
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	4a25      	ldr	r2, [pc, #148]	; (80175f0 <TIM_Base_SetConfig+0x10c>)
 801755a:	4293      	cmp	r3, r2
 801755c:	d007      	beq.n	801756e <TIM_Base_SetConfig+0x8a>
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	4a24      	ldr	r2, [pc, #144]	; (80175f4 <TIM_Base_SetConfig+0x110>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d003      	beq.n	801756e <TIM_Base_SetConfig+0x8a>
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	4a23      	ldr	r2, [pc, #140]	; (80175f8 <TIM_Base_SetConfig+0x114>)
 801756a:	4293      	cmp	r3, r2
 801756c:	d108      	bne.n	8017580 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017574:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8017576:	683b      	ldr	r3, [r7, #0]
 8017578:	68db      	ldr	r3, [r3, #12]
 801757a:	68fa      	ldr	r2, [r7, #12]
 801757c:	4313      	orrs	r3, r2
 801757e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017580:	68fb      	ldr	r3, [r7, #12]
 8017582:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	695b      	ldr	r3, [r3, #20]
 801758a:	4313      	orrs	r3, r2
 801758c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	68fa      	ldr	r2, [r7, #12]
 8017592:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8017594:	683b      	ldr	r3, [r7, #0]
 8017596:	689a      	ldr	r2, [r3, #8]
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	687b      	ldr	r3, [r7, #4]
 80175a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	4a0e      	ldr	r2, [pc, #56]	; (80175e0 <TIM_Base_SetConfig+0xfc>)
 80175a8:	4293      	cmp	r3, r2
 80175aa:	d103      	bne.n	80175b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	691a      	ldr	r2, [r3, #16]
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2201      	movs	r2, #1
 80175b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	691b      	ldr	r3, [r3, #16]
 80175be:	f003 0301 	and.w	r3, r3, #1
 80175c2:	2b01      	cmp	r3, #1
 80175c4:	d105      	bne.n	80175d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	691b      	ldr	r3, [r3, #16]
 80175ca:	f023 0201 	bic.w	r2, r3, #1
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	611a      	str	r2, [r3, #16]
  }
}
 80175d2:	bf00      	nop
 80175d4:	3714      	adds	r7, #20
 80175d6:	46bd      	mov	sp, r7
 80175d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175dc:	4770      	bx	lr
 80175de:	bf00      	nop
 80175e0:	40010000 	.word	0x40010000
 80175e4:	40000400 	.word	0x40000400
 80175e8:	40000800 	.word	0x40000800
 80175ec:	40000c00 	.word	0x40000c00
 80175f0:	40014000 	.word	0x40014000
 80175f4:	40014400 	.word	0x40014400
 80175f8:	40014800 	.word	0x40014800

080175fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80175fc:	b480      	push	{r7}
 80175fe:	b083      	sub	sp, #12
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017604:	bf00      	nop
 8017606:	370c      	adds	r7, #12
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr

08017610 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017610:	b480      	push	{r7}
 8017612:	b083      	sub	sp, #12
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017618:	bf00      	nop
 801761a:	370c      	adds	r7, #12
 801761c:	46bd      	mov	sp, r7
 801761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017622:	4770      	bx	lr

08017624 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d101      	bne.n	8017636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017632:	2301      	movs	r3, #1
 8017634:	e042      	b.n	80176bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801763c:	b2db      	uxtb	r3, r3
 801763e:	2b00      	cmp	r3, #0
 8017640:	d106      	bne.n	8017650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	2200      	movs	r2, #0
 8017646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801764a:	6878      	ldr	r0, [r7, #4]
 801764c:	f7fb f952 	bl	80128f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	2224      	movs	r2, #36	; 0x24
 8017654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	68da      	ldr	r2, [r3, #12]
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8017666:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f000 fd11 	bl	8018090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	691a      	ldr	r2, [r3, #16]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801767c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	695a      	ldr	r2, [r3, #20]
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801768c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	681b      	ldr	r3, [r3, #0]
 8017692:	68da      	ldr	r2, [r3, #12]
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801769c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	2200      	movs	r2, #0
 80176a2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	2220      	movs	r2, #32
 80176a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	2220      	movs	r2, #32
 80176b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2200      	movs	r2, #0
 80176b8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80176ba:	2300      	movs	r3, #0
}
 80176bc:	4618      	mov	r0, r3
 80176be:	3708      	adds	r7, #8
 80176c0:	46bd      	mov	sp, r7
 80176c2:	bd80      	pop	{r7, pc}

080176c4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b08c      	sub	sp, #48	; 0x30
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	60f8      	str	r0, [r7, #12]
 80176cc:	60b9      	str	r1, [r7, #8]
 80176ce:	4613      	mov	r3, r2
 80176d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80176d8:	b2db      	uxtb	r3, r3
 80176da:	2b20      	cmp	r3, #32
 80176dc:	d14a      	bne.n	8017774 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80176de:	68bb      	ldr	r3, [r7, #8]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d002      	beq.n	80176ea <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80176e4:	88fb      	ldrh	r3, [r7, #6]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d101      	bne.n	80176ee <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80176ea:	2301      	movs	r3, #1
 80176ec:	e043      	b.n	8017776 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	2201      	movs	r2, #1
 80176f2:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	2200      	movs	r2, #0
 80176f8:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80176fa:	88fb      	ldrh	r3, [r7, #6]
 80176fc:	461a      	mov	r2, r3
 80176fe:	68b9      	ldr	r1, [r7, #8]
 8017700:	68f8      	ldr	r0, [r7, #12]
 8017702:	f000 faed 	bl	8017ce0 <UART_Start_Receive_IT>
 8017706:	4603      	mov	r3, r0
 8017708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801770c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017710:	2b00      	cmp	r3, #0
 8017712:	d12c      	bne.n	801776e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017718:	2b01      	cmp	r3, #1
 801771a:	d125      	bne.n	8017768 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 801771c:	2300      	movs	r3, #0
 801771e:	613b      	str	r3, [r7, #16]
 8017720:	68fb      	ldr	r3, [r7, #12]
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	613b      	str	r3, [r7, #16]
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	685b      	ldr	r3, [r3, #4]
 801772e:	613b      	str	r3, [r7, #16]
 8017730:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	330c      	adds	r3, #12
 8017738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801773a:	69bb      	ldr	r3, [r7, #24]
 801773c:	e853 3f00 	ldrex	r3, [r3]
 8017740:	617b      	str	r3, [r7, #20]
   return(result);
 8017742:	697b      	ldr	r3, [r7, #20]
 8017744:	f043 0310 	orr.w	r3, r3, #16
 8017748:	62bb      	str	r3, [r7, #40]	; 0x28
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	330c      	adds	r3, #12
 8017750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017752:	627a      	str	r2, [r7, #36]	; 0x24
 8017754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017756:	6a39      	ldr	r1, [r7, #32]
 8017758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801775a:	e841 2300 	strex	r3, r2, [r1]
 801775e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017760:	69fb      	ldr	r3, [r7, #28]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d1e5      	bne.n	8017732 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017766:	e002      	b.n	801776e <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017768:	2301      	movs	r3, #1
 801776a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801776e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017772:	e000      	b.n	8017776 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8017774:	2302      	movs	r3, #2
  }
}
 8017776:	4618      	mov	r0, r3
 8017778:	3730      	adds	r7, #48	; 0x30
 801777a:	46bd      	mov	sp, r7
 801777c:	bd80      	pop	{r7, pc}
	...

08017780 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b0ba      	sub	sp, #232	; 0xe8
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	68db      	ldr	r3, [r3, #12]
 8017798:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	695b      	ldr	r3, [r3, #20]
 80177a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80177a6:	2300      	movs	r3, #0
 80177a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80177ac:	2300      	movs	r3, #0
 80177ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80177b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80177b6:	f003 030f 	and.w	r3, r3, #15
 80177ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80177be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d10f      	bne.n	80177e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80177c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80177ca:	f003 0320 	and.w	r3, r3, #32
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d009      	beq.n	80177e6 <HAL_UART_IRQHandler+0x66>
 80177d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80177d6:	f003 0320 	and.w	r3, r3, #32
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d003      	beq.n	80177e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f000 fb97 	bl	8017f12 <UART_Receive_IT>
      return;
 80177e4:	e25b      	b.n	8017c9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80177e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	f000 80de 	beq.w	80179ac <HAL_UART_IRQHandler+0x22c>
 80177f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80177f4:	f003 0301 	and.w	r3, r3, #1
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d106      	bne.n	801780a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80177fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017800:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8017804:	2b00      	cmp	r3, #0
 8017806:	f000 80d1 	beq.w	80179ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801780a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801780e:	f003 0301 	and.w	r3, r3, #1
 8017812:	2b00      	cmp	r3, #0
 8017814:	d00b      	beq.n	801782e <HAL_UART_IRQHandler+0xae>
 8017816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801781a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801781e:	2b00      	cmp	r3, #0
 8017820:	d005      	beq.n	801782e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017826:	f043 0201 	orr.w	r2, r3, #1
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801782e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017832:	f003 0304 	and.w	r3, r3, #4
 8017836:	2b00      	cmp	r3, #0
 8017838:	d00b      	beq.n	8017852 <HAL_UART_IRQHandler+0xd2>
 801783a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801783e:	f003 0301 	and.w	r3, r3, #1
 8017842:	2b00      	cmp	r3, #0
 8017844:	d005      	beq.n	8017852 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801784a:	f043 0202 	orr.w	r2, r3, #2
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017852:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017856:	f003 0302 	and.w	r3, r3, #2
 801785a:	2b00      	cmp	r3, #0
 801785c:	d00b      	beq.n	8017876 <HAL_UART_IRQHandler+0xf6>
 801785e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017862:	f003 0301 	and.w	r3, r3, #1
 8017866:	2b00      	cmp	r3, #0
 8017868:	d005      	beq.n	8017876 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801786e:	f043 0204 	orr.w	r2, r3, #4
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801787a:	f003 0308 	and.w	r3, r3, #8
 801787e:	2b00      	cmp	r3, #0
 8017880:	d011      	beq.n	80178a6 <HAL_UART_IRQHandler+0x126>
 8017882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017886:	f003 0320 	and.w	r3, r3, #32
 801788a:	2b00      	cmp	r3, #0
 801788c:	d105      	bne.n	801789a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801788e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017892:	f003 0301 	and.w	r3, r3, #1
 8017896:	2b00      	cmp	r3, #0
 8017898:	d005      	beq.n	80178a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801789e:	f043 0208 	orr.w	r2, r3, #8
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	f000 81f2 	beq.w	8017c94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80178b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80178b4:	f003 0320 	and.w	r3, r3, #32
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d008      	beq.n	80178ce <HAL_UART_IRQHandler+0x14e>
 80178bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80178c0:	f003 0320 	and.w	r3, r3, #32
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d002      	beq.n	80178ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80178c8:	6878      	ldr	r0, [r7, #4]
 80178ca:	f000 fb22 	bl	8017f12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	695b      	ldr	r3, [r3, #20]
 80178d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178d8:	2b40      	cmp	r3, #64	; 0x40
 80178da:	bf0c      	ite	eq
 80178dc:	2301      	moveq	r3, #1
 80178de:	2300      	movne	r3, #0
 80178e0:	b2db      	uxtb	r3, r3
 80178e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80178ea:	f003 0308 	and.w	r3, r3, #8
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d103      	bne.n	80178fa <HAL_UART_IRQHandler+0x17a>
 80178f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d04f      	beq.n	801799a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f000 fa2a 	bl	8017d54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	695b      	ldr	r3, [r3, #20]
 8017906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801790a:	2b40      	cmp	r3, #64	; 0x40
 801790c:	d141      	bne.n	8017992 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	3314      	adds	r3, #20
 8017914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801791c:	e853 3f00 	ldrex	r3, [r3]
 8017920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8017924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801792c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	3314      	adds	r3, #20
 8017936:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801793a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801793e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017942:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017946:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801794a:	e841 2300 	strex	r3, r2, [r1]
 801794e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017952:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017956:	2b00      	cmp	r3, #0
 8017958:	d1d9      	bne.n	801790e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801795e:	2b00      	cmp	r3, #0
 8017960:	d013      	beq.n	801798a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017966:	4a7e      	ldr	r2, [pc, #504]	; (8017b60 <HAL_UART_IRQHandler+0x3e0>)
 8017968:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801796e:	4618      	mov	r0, r3
 8017970:	f7fd ff32 	bl	80157d8 <HAL_DMA_Abort_IT>
 8017974:	4603      	mov	r3, r0
 8017976:	2b00      	cmp	r3, #0
 8017978:	d016      	beq.n	80179a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801797e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017980:	687a      	ldr	r2, [r7, #4]
 8017982:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017984:	4610      	mov	r0, r2
 8017986:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017988:	e00e      	b.n	80179a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f000 f99e 	bl	8017ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017990:	e00a      	b.n	80179a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f000 f99a 	bl	8017ccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017998:	e006      	b.n	80179a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801799a:	6878      	ldr	r0, [r7, #4]
 801799c:	f000 f996 	bl	8017ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2200      	movs	r2, #0
 80179a4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80179a6:	e175      	b.n	8017c94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179a8:	bf00      	nop
    return;
 80179aa:	e173      	b.n	8017c94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80179b0:	2b01      	cmp	r3, #1
 80179b2:	f040 814f 	bne.w	8017c54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80179b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80179ba:	f003 0310 	and.w	r3, r3, #16
 80179be:	2b00      	cmp	r3, #0
 80179c0:	f000 8148 	beq.w	8017c54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80179c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80179c8:	f003 0310 	and.w	r3, r3, #16
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	f000 8141 	beq.w	8017c54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80179d2:	2300      	movs	r3, #0
 80179d4:	60bb      	str	r3, [r7, #8]
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	60bb      	str	r3, [r7, #8]
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	60bb      	str	r3, [r7, #8]
 80179e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	695b      	ldr	r3, [r3, #20]
 80179ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80179f2:	2b40      	cmp	r3, #64	; 0x40
 80179f4:	f040 80b6 	bne.w	8017b64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	685b      	ldr	r3, [r3, #4]
 8017a00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017a04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	f000 8145 	beq.w	8017c98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017a12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017a16:	429a      	cmp	r2, r3
 8017a18:	f080 813e 	bcs.w	8017c98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017a22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a28:	69db      	ldr	r3, [r3, #28]
 8017a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017a2e:	f000 8088 	beq.w	8017b42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	330c      	adds	r3, #12
 8017a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017a40:	e853 3f00 	ldrex	r3, [r3]
 8017a44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017a48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017a50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	330c      	adds	r3, #12
 8017a5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017a5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017a62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017a6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017a6e:	e841 2300 	strex	r3, r2, [r1]
 8017a72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017a76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d1d9      	bne.n	8017a32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	3314      	adds	r3, #20
 8017a84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017a88:	e853 3f00 	ldrex	r3, [r3]
 8017a8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017a8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017a90:	f023 0301 	bic.w	r3, r3, #1
 8017a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	3314      	adds	r3, #20
 8017a9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017aa2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aa8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017aaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017aae:	e841 2300 	strex	r3, r2, [r1]
 8017ab2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d1e1      	bne.n	8017a7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	3314      	adds	r3, #20
 8017ac0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017ac4:	e853 3f00 	ldrex	r3, [r3]
 8017ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017aca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017acc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	3314      	adds	r3, #20
 8017ada:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017ade:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017ae0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ae2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017ae4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017ae6:	e841 2300 	strex	r3, r2, [r1]
 8017aea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	d1e3      	bne.n	8017aba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2220      	movs	r2, #32
 8017af6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2200      	movs	r2, #0
 8017afe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	681b      	ldr	r3, [r3, #0]
 8017b04:	330c      	adds	r3, #12
 8017b06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b0a:	e853 3f00 	ldrex	r3, [r3]
 8017b0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b12:	f023 0310 	bic.w	r3, r3, #16
 8017b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	330c      	adds	r3, #12
 8017b20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017b24:	65ba      	str	r2, [r7, #88]	; 0x58
 8017b26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017b2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017b2c:	e841 2300 	strex	r3, r2, [r1]
 8017b30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d1e3      	bne.n	8017b00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7fd fddb 	bl	80156f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	2202      	movs	r2, #2
 8017b46:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017b50:	b29b      	uxth	r3, r3
 8017b52:	1ad3      	subs	r3, r2, r3
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	4619      	mov	r1, r3
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f7f9 fa85 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017b5e:	e09b      	b.n	8017c98 <HAL_UART_IRQHandler+0x518>
 8017b60:	08017e1b 	.word	0x08017e1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	1ad3      	subs	r3, r2, r3
 8017b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017b78:	b29b      	uxth	r3, r3
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	f000 808e 	beq.w	8017c9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017b80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	f000 8089 	beq.w	8017c9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	330c      	adds	r3, #12
 8017b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b94:	e853 3f00 	ldrex	r3, [r3]
 8017b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	330c      	adds	r3, #12
 8017baa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017bae:	647a      	str	r2, [r7, #68]	; 0x44
 8017bb0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017bb6:	e841 2300 	strex	r3, r2, [r1]
 8017bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d1e3      	bne.n	8017b8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	3314      	adds	r3, #20
 8017bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bcc:	e853 3f00 	ldrex	r3, [r3]
 8017bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8017bd2:	6a3b      	ldr	r3, [r7, #32]
 8017bd4:	f023 0301 	bic.w	r3, r3, #1
 8017bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	3314      	adds	r3, #20
 8017be2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017be6:	633a      	str	r2, [r7, #48]	; 0x30
 8017be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bee:	e841 2300 	strex	r3, r2, [r1]
 8017bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bf6:	2b00      	cmp	r3, #0
 8017bf8:	d1e3      	bne.n	8017bc2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2220      	movs	r2, #32
 8017bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	2200      	movs	r2, #0
 8017c06:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	330c      	adds	r3, #12
 8017c0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c10:	693b      	ldr	r3, [r7, #16]
 8017c12:	e853 3f00 	ldrex	r3, [r3]
 8017c16:	60fb      	str	r3, [r7, #12]
   return(result);
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	f023 0310 	bic.w	r3, r3, #16
 8017c1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	330c      	adds	r3, #12
 8017c28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017c2c:	61fa      	str	r2, [r7, #28]
 8017c2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c30:	69b9      	ldr	r1, [r7, #24]
 8017c32:	69fa      	ldr	r2, [r7, #28]
 8017c34:	e841 2300 	strex	r3, r2, [r1]
 8017c38:	617b      	str	r3, [r7, #20]
   return(result);
 8017c3a:	697b      	ldr	r3, [r7, #20]
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d1e3      	bne.n	8017c08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2202      	movs	r2, #2
 8017c44:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017c46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017c4a:	4619      	mov	r1, r3
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f7f9 fa0b 	bl	8011068 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017c52:	e023      	b.n	8017c9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d009      	beq.n	8017c74 <HAL_UART_IRQHandler+0x4f4>
 8017c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d003      	beq.n	8017c74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017c6c:	6878      	ldr	r0, [r7, #4]
 8017c6e:	f000 f8e8 	bl	8017e42 <UART_Transmit_IT>
    return;
 8017c72:	e014      	b.n	8017c9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d00e      	beq.n	8017c9e <HAL_UART_IRQHandler+0x51e>
 8017c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d008      	beq.n	8017c9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017c8c:	6878      	ldr	r0, [r7, #4]
 8017c8e:	f000 f928 	bl	8017ee2 <UART_EndTransmit_IT>
    return;
 8017c92:	e004      	b.n	8017c9e <HAL_UART_IRQHandler+0x51e>
    return;
 8017c94:	bf00      	nop
 8017c96:	e002      	b.n	8017c9e <HAL_UART_IRQHandler+0x51e>
      return;
 8017c98:	bf00      	nop
 8017c9a:	e000      	b.n	8017c9e <HAL_UART_IRQHandler+0x51e>
      return;
 8017c9c:	bf00      	nop
  }
}
 8017c9e:	37e8      	adds	r7, #232	; 0xe8
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b083      	sub	sp, #12
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017cac:	bf00      	nop
 8017cae:	370c      	adds	r7, #12
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cb6:	4770      	bx	lr

08017cb8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b083      	sub	sp, #12
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8017cc0:	bf00      	nop
 8017cc2:	370c      	adds	r7, #12
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cca:	4770      	bx	lr

08017ccc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017ccc:	b480      	push	{r7}
 8017cce:	b083      	sub	sp, #12
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017cd4:	bf00      	nop
 8017cd6:	370c      	adds	r7, #12
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cde:	4770      	bx	lr

08017ce0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017ce0:	b480      	push	{r7}
 8017ce2:	b085      	sub	sp, #20
 8017ce4:	af00      	add	r7, sp, #0
 8017ce6:	60f8      	str	r0, [r7, #12]
 8017ce8:	60b9      	str	r1, [r7, #8]
 8017cea:	4613      	mov	r3, r2
 8017cec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	68ba      	ldr	r2, [r7, #8]
 8017cf2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	88fa      	ldrh	r2, [r7, #6]
 8017cf8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	88fa      	ldrh	r2, [r7, #6]
 8017cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	2200      	movs	r2, #0
 8017d04:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	2222      	movs	r2, #34	; 0x22
 8017d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	691b      	ldr	r3, [r3, #16]
 8017d12:	2b00      	cmp	r3, #0
 8017d14:	d007      	beq.n	8017d26 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017d16:	68fb      	ldr	r3, [r7, #12]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	68da      	ldr	r2, [r3, #12]
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017d24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	695a      	ldr	r2, [r3, #20]
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	f042 0201 	orr.w	r2, r2, #1
 8017d34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	68da      	ldr	r2, [r3, #12]
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	f042 0220 	orr.w	r2, r2, #32
 8017d44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017d46:	2300      	movs	r3, #0
}
 8017d48:	4618      	mov	r0, r3
 8017d4a:	3714      	adds	r7, #20
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d52:	4770      	bx	lr

08017d54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017d54:	b480      	push	{r7}
 8017d56:	b095      	sub	sp, #84	; 0x54
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	330c      	adds	r3, #12
 8017d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d66:	e853 3f00 	ldrex	r3, [r3]
 8017d6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	681b      	ldr	r3, [r3, #0]
 8017d78:	330c      	adds	r3, #12
 8017d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017d7c:	643a      	str	r2, [r7, #64]	; 0x40
 8017d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017d82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017d84:	e841 2300 	strex	r3, r2, [r1]
 8017d88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d1e5      	bne.n	8017d5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	3314      	adds	r3, #20
 8017d96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d98:	6a3b      	ldr	r3, [r7, #32]
 8017d9a:	e853 3f00 	ldrex	r3, [r3]
 8017d9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017da0:	69fb      	ldr	r3, [r7, #28]
 8017da2:	f023 0301 	bic.w	r3, r3, #1
 8017da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	3314      	adds	r3, #20
 8017dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017db0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017db2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017db6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017db8:	e841 2300 	strex	r3, r2, [r1]
 8017dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d1e5      	bne.n	8017d90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dc8:	2b01      	cmp	r3, #1
 8017dca:	d119      	bne.n	8017e00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	330c      	adds	r3, #12
 8017dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	e853 3f00 	ldrex	r3, [r3]
 8017dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8017ddc:	68bb      	ldr	r3, [r7, #8]
 8017dde:	f023 0310 	bic.w	r3, r3, #16
 8017de2:	647b      	str	r3, [r7, #68]	; 0x44
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	330c      	adds	r3, #12
 8017dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017dec:	61ba      	str	r2, [r7, #24]
 8017dee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017df0:	6979      	ldr	r1, [r7, #20]
 8017df2:	69ba      	ldr	r2, [r7, #24]
 8017df4:	e841 2300 	strex	r3, r2, [r1]
 8017df8:	613b      	str	r3, [r7, #16]
   return(result);
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d1e5      	bne.n	8017dcc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2220      	movs	r2, #32
 8017e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8017e0e:	bf00      	nop
 8017e10:	3754      	adds	r7, #84	; 0x54
 8017e12:	46bd      	mov	sp, r7
 8017e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e18:	4770      	bx	lr

08017e1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017e1a:	b580      	push	{r7, lr}
 8017e1c:	b084      	sub	sp, #16
 8017e1e:	af00      	add	r7, sp, #0
 8017e20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	2200      	movs	r2, #0
 8017e2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2200      	movs	r2, #0
 8017e32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017e34:	68f8      	ldr	r0, [r7, #12]
 8017e36:	f7ff ff49 	bl	8017ccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017e3a:	bf00      	nop
 8017e3c:	3710      	adds	r7, #16
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}

08017e42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017e42:	b480      	push	{r7}
 8017e44:	b085      	sub	sp, #20
 8017e46:	af00      	add	r7, sp, #0
 8017e48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017e50:	b2db      	uxtb	r3, r3
 8017e52:	2b21      	cmp	r3, #33	; 0x21
 8017e54:	d13e      	bne.n	8017ed4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	689b      	ldr	r3, [r3, #8]
 8017e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017e5e:	d114      	bne.n	8017e8a <UART_Transmit_IT+0x48>
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	691b      	ldr	r3, [r3, #16]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d110      	bne.n	8017e8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	6a1b      	ldr	r3, [r3, #32]
 8017e6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	881b      	ldrh	r3, [r3, #0]
 8017e72:	461a      	mov	r2, r3
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017e7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	6a1b      	ldr	r3, [r3, #32]
 8017e82:	1c9a      	adds	r2, r3, #2
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	621a      	str	r2, [r3, #32]
 8017e88:	e008      	b.n	8017e9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	6a1b      	ldr	r3, [r3, #32]
 8017e8e:	1c59      	adds	r1, r3, #1
 8017e90:	687a      	ldr	r2, [r7, #4]
 8017e92:	6211      	str	r1, [r2, #32]
 8017e94:	781a      	ldrb	r2, [r3, #0]
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017ea0:	b29b      	uxth	r3, r3
 8017ea2:	3b01      	subs	r3, #1
 8017ea4:	b29b      	uxth	r3, r3
 8017ea6:	687a      	ldr	r2, [r7, #4]
 8017ea8:	4619      	mov	r1, r3
 8017eaa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d10f      	bne.n	8017ed0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	68da      	ldr	r2, [r3, #12]
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017ebe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	681b      	ldr	r3, [r3, #0]
 8017ec4:	68da      	ldr	r2, [r3, #12]
 8017ec6:	687b      	ldr	r3, [r7, #4]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017ece:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	e000      	b.n	8017ed6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017ed4:	2302      	movs	r3, #2
  }
}
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	3714      	adds	r7, #20
 8017eda:	46bd      	mov	sp, r7
 8017edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee0:	4770      	bx	lr

08017ee2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017ee2:	b580      	push	{r7, lr}
 8017ee4:	b082      	sub	sp, #8
 8017ee6:	af00      	add	r7, sp, #0
 8017ee8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	68da      	ldr	r2, [r3, #12]
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017ef8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017efa:	687b      	ldr	r3, [r7, #4]
 8017efc:	2220      	movs	r2, #32
 8017efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7ff fece 	bl	8017ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017f08:	2300      	movs	r3, #0
}
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	3708      	adds	r7, #8
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd80      	pop	{r7, pc}

08017f12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017f12:	b580      	push	{r7, lr}
 8017f14:	b08c      	sub	sp, #48	; 0x30
 8017f16:	af00      	add	r7, sp, #0
 8017f18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017f20:	b2db      	uxtb	r3, r3
 8017f22:	2b22      	cmp	r3, #34	; 0x22
 8017f24:	f040 80ae 	bne.w	8018084 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	689b      	ldr	r3, [r3, #8]
 8017f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f30:	d117      	bne.n	8017f62 <UART_Receive_IT+0x50>
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	691b      	ldr	r3, [r3, #16]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d113      	bne.n	8017f62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017f3a:	2300      	movs	r3, #0
 8017f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	b29b      	uxth	r3, r3
 8017f4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017f50:	b29a      	uxth	r2, r3
 8017f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f5a:	1c9a      	adds	r2, r3, #2
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8017f60:	e026      	b.n	8017fb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017f68:	2300      	movs	r3, #0
 8017f6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	689b      	ldr	r3, [r3, #8]
 8017f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f74:	d007      	beq.n	8017f86 <UART_Receive_IT+0x74>
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	689b      	ldr	r3, [r3, #8]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d10a      	bne.n	8017f94 <UART_Receive_IT+0x82>
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	691b      	ldr	r3, [r3, #16]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d106      	bne.n	8017f94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	b2da      	uxtb	r2, r3
 8017f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f90:	701a      	strb	r2, [r3, #0]
 8017f92:	e008      	b.n	8017fa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	685b      	ldr	r3, [r3, #4]
 8017f9a:	b2db      	uxtb	r3, r3
 8017f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017fa0:	b2da      	uxtb	r2, r3
 8017fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017faa:	1c5a      	adds	r2, r3, #1
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017fb4:	b29b      	uxth	r3, r3
 8017fb6:	3b01      	subs	r3, #1
 8017fb8:	b29b      	uxth	r3, r3
 8017fba:	687a      	ldr	r2, [r7, #4]
 8017fbc:	4619      	mov	r1, r3
 8017fbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d15d      	bne.n	8018080 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	68da      	ldr	r2, [r3, #12]
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	f022 0220 	bic.w	r2, r2, #32
 8017fd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	68da      	ldr	r2, [r3, #12]
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017fe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	695a      	ldr	r2, [r3, #20]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	f022 0201 	bic.w	r2, r2, #1
 8017ff2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	2220      	movs	r2, #32
 8017ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	2200      	movs	r2, #0
 8018000:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018006:	2b01      	cmp	r3, #1
 8018008:	d135      	bne.n	8018076 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	2200      	movs	r2, #0
 801800e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	330c      	adds	r3, #12
 8018016:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018018:	697b      	ldr	r3, [r7, #20]
 801801a:	e853 3f00 	ldrex	r3, [r3]
 801801e:	613b      	str	r3, [r7, #16]
   return(result);
 8018020:	693b      	ldr	r3, [r7, #16]
 8018022:	f023 0310 	bic.w	r3, r3, #16
 8018026:	627b      	str	r3, [r7, #36]	; 0x24
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	330c      	adds	r3, #12
 801802e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018030:	623a      	str	r2, [r7, #32]
 8018032:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018034:	69f9      	ldr	r1, [r7, #28]
 8018036:	6a3a      	ldr	r2, [r7, #32]
 8018038:	e841 2300 	strex	r3, r2, [r1]
 801803c:	61bb      	str	r3, [r7, #24]
   return(result);
 801803e:	69bb      	ldr	r3, [r7, #24]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1e5      	bne.n	8018010 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	f003 0310 	and.w	r3, r3, #16
 801804e:	2b10      	cmp	r3, #16
 8018050:	d10a      	bne.n	8018068 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8018052:	2300      	movs	r3, #0
 8018054:	60fb      	str	r3, [r7, #12]
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	681b      	ldr	r3, [r3, #0]
 801805c:	60fb      	str	r3, [r7, #12]
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	60fb      	str	r3, [r7, #12]
 8018066:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801806c:	4619      	mov	r1, r3
 801806e:	6878      	ldr	r0, [r7, #4]
 8018070:	f7f8 fffa 	bl	8011068 <HAL_UARTEx_RxEventCallback>
 8018074:	e002      	b.n	801807c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	f7ff fe1e 	bl	8017cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801807c:	2300      	movs	r3, #0
 801807e:	e002      	b.n	8018086 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8018080:	2300      	movs	r3, #0
 8018082:	e000      	b.n	8018086 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8018084:	2302      	movs	r3, #2
  }
}
 8018086:	4618      	mov	r0, r3
 8018088:	3730      	adds	r7, #48	; 0x30
 801808a:	46bd      	mov	sp, r7
 801808c:	bd80      	pop	{r7, pc}
	...

08018090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8018094:	b0c0      	sub	sp, #256	; 0x100
 8018096:	af00      	add	r7, sp, #0
 8018098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801809c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	691b      	ldr	r3, [r3, #16]
 80180a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80180a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180ac:	68d9      	ldr	r1, [r3, #12]
 80180ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180b2:	681a      	ldr	r2, [r3, #0]
 80180b4:	ea40 0301 	orr.w	r3, r0, r1
 80180b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80180ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180be:	689a      	ldr	r2, [r3, #8]
 80180c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180c4:	691b      	ldr	r3, [r3, #16]
 80180c6:	431a      	orrs	r2, r3
 80180c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180cc:	695b      	ldr	r3, [r3, #20]
 80180ce:	431a      	orrs	r2, r3
 80180d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180d4:	69db      	ldr	r3, [r3, #28]
 80180d6:	4313      	orrs	r3, r2
 80180d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80180dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	68db      	ldr	r3, [r3, #12]
 80180e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80180e8:	f021 010c 	bic.w	r1, r1, #12
 80180ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180f0:	681a      	ldr	r2, [r3, #0]
 80180f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80180f6:	430b      	orrs	r3, r1
 80180f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80180fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	695b      	ldr	r3, [r3, #20]
 8018102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8018106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801810a:	6999      	ldr	r1, [r3, #24]
 801810c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018110:	681a      	ldr	r2, [r3, #0]
 8018112:	ea40 0301 	orr.w	r3, r0, r1
 8018116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801811c:	681a      	ldr	r2, [r3, #0]
 801811e:	4b8f      	ldr	r3, [pc, #572]	; (801835c <UART_SetConfig+0x2cc>)
 8018120:	429a      	cmp	r2, r3
 8018122:	d005      	beq.n	8018130 <UART_SetConfig+0xa0>
 8018124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018128:	681a      	ldr	r2, [r3, #0]
 801812a:	4b8d      	ldr	r3, [pc, #564]	; (8018360 <UART_SetConfig+0x2d0>)
 801812c:	429a      	cmp	r2, r3
 801812e:	d104      	bne.n	801813a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018130:	f7fe f9e8 	bl	8016504 <HAL_RCC_GetPCLK2Freq>
 8018134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8018138:	e003      	b.n	8018142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801813a:	f7fe f9cf 	bl	80164dc <HAL_RCC_GetPCLK1Freq>
 801813e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018146:	69db      	ldr	r3, [r3, #28]
 8018148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801814c:	f040 810c 	bne.w	8018368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018154:	2200      	movs	r2, #0
 8018156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801815a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 801815e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8018162:	4622      	mov	r2, r4
 8018164:	462b      	mov	r3, r5
 8018166:	1891      	adds	r1, r2, r2
 8018168:	65b9      	str	r1, [r7, #88]	; 0x58
 801816a:	415b      	adcs	r3, r3
 801816c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801816e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8018172:	4621      	mov	r1, r4
 8018174:	eb12 0801 	adds.w	r8, r2, r1
 8018178:	4629      	mov	r1, r5
 801817a:	eb43 0901 	adc.w	r9, r3, r1
 801817e:	f04f 0200 	mov.w	r2, #0
 8018182:	f04f 0300 	mov.w	r3, #0
 8018186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801818a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801818e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8018192:	4690      	mov	r8, r2
 8018194:	4699      	mov	r9, r3
 8018196:	4623      	mov	r3, r4
 8018198:	eb18 0303 	adds.w	r3, r8, r3
 801819c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80181a0:	462b      	mov	r3, r5
 80181a2:	eb49 0303 	adc.w	r3, r9, r3
 80181a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80181aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	2200      	movs	r2, #0
 80181b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80181b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80181ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80181be:	460b      	mov	r3, r1
 80181c0:	18db      	adds	r3, r3, r3
 80181c2:	653b      	str	r3, [r7, #80]	; 0x50
 80181c4:	4613      	mov	r3, r2
 80181c6:	eb42 0303 	adc.w	r3, r2, r3
 80181ca:	657b      	str	r3, [r7, #84]	; 0x54
 80181cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80181d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80181d4:	f7f8 fd70 	bl	8010cb8 <__aeabi_uldivmod>
 80181d8:	4602      	mov	r2, r0
 80181da:	460b      	mov	r3, r1
 80181dc:	4b61      	ldr	r3, [pc, #388]	; (8018364 <UART_SetConfig+0x2d4>)
 80181de:	fba3 2302 	umull	r2, r3, r3, r2
 80181e2:	095b      	lsrs	r3, r3, #5
 80181e4:	011c      	lsls	r4, r3, #4
 80181e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80181ea:	2200      	movs	r2, #0
 80181ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80181f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80181f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80181f8:	4642      	mov	r2, r8
 80181fa:	464b      	mov	r3, r9
 80181fc:	1891      	adds	r1, r2, r2
 80181fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8018200:	415b      	adcs	r3, r3
 8018202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018208:	4641      	mov	r1, r8
 801820a:	eb12 0a01 	adds.w	sl, r2, r1
 801820e:	4649      	mov	r1, r9
 8018210:	eb43 0b01 	adc.w	fp, r3, r1
 8018214:	f04f 0200 	mov.w	r2, #0
 8018218:	f04f 0300 	mov.w	r3, #0
 801821c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8018224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8018228:	4692      	mov	sl, r2
 801822a:	469b      	mov	fp, r3
 801822c:	4643      	mov	r3, r8
 801822e:	eb1a 0303 	adds.w	r3, sl, r3
 8018232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018236:	464b      	mov	r3, r9
 8018238:	eb4b 0303 	adc.w	r3, fp, r3
 801823c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	2200      	movs	r2, #0
 8018248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801824c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8018254:	460b      	mov	r3, r1
 8018256:	18db      	adds	r3, r3, r3
 8018258:	643b      	str	r3, [r7, #64]	; 0x40
 801825a:	4613      	mov	r3, r2
 801825c:	eb42 0303 	adc.w	r3, r2, r3
 8018260:	647b      	str	r3, [r7, #68]	; 0x44
 8018262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8018266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 801826a:	f7f8 fd25 	bl	8010cb8 <__aeabi_uldivmod>
 801826e:	4602      	mov	r2, r0
 8018270:	460b      	mov	r3, r1
 8018272:	4611      	mov	r1, r2
 8018274:	4b3b      	ldr	r3, [pc, #236]	; (8018364 <UART_SetConfig+0x2d4>)
 8018276:	fba3 2301 	umull	r2, r3, r3, r1
 801827a:	095b      	lsrs	r3, r3, #5
 801827c:	2264      	movs	r2, #100	; 0x64
 801827e:	fb02 f303 	mul.w	r3, r2, r3
 8018282:	1acb      	subs	r3, r1, r3
 8018284:	00db      	lsls	r3, r3, #3
 8018286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801828a:	4b36      	ldr	r3, [pc, #216]	; (8018364 <UART_SetConfig+0x2d4>)
 801828c:	fba3 2302 	umull	r2, r3, r3, r2
 8018290:	095b      	lsrs	r3, r3, #5
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8018298:	441c      	add	r4, r3
 801829a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801829e:	2200      	movs	r2, #0
 80182a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80182a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80182a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80182ac:	4642      	mov	r2, r8
 80182ae:	464b      	mov	r3, r9
 80182b0:	1891      	adds	r1, r2, r2
 80182b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80182b4:	415b      	adcs	r3, r3
 80182b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80182b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80182bc:	4641      	mov	r1, r8
 80182be:	1851      	adds	r1, r2, r1
 80182c0:	6339      	str	r1, [r7, #48]	; 0x30
 80182c2:	4649      	mov	r1, r9
 80182c4:	414b      	adcs	r3, r1
 80182c6:	637b      	str	r3, [r7, #52]	; 0x34
 80182c8:	f04f 0200 	mov.w	r2, #0
 80182cc:	f04f 0300 	mov.w	r3, #0
 80182d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80182d4:	4659      	mov	r1, fp
 80182d6:	00cb      	lsls	r3, r1, #3
 80182d8:	4651      	mov	r1, sl
 80182da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80182de:	4651      	mov	r1, sl
 80182e0:	00ca      	lsls	r2, r1, #3
 80182e2:	4610      	mov	r0, r2
 80182e4:	4619      	mov	r1, r3
 80182e6:	4603      	mov	r3, r0
 80182e8:	4642      	mov	r2, r8
 80182ea:	189b      	adds	r3, r3, r2
 80182ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80182f0:	464b      	mov	r3, r9
 80182f2:	460a      	mov	r2, r1
 80182f4:	eb42 0303 	adc.w	r3, r2, r3
 80182f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80182fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018300:	685b      	ldr	r3, [r3, #4]
 8018302:	2200      	movs	r2, #0
 8018304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801830c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8018310:	460b      	mov	r3, r1
 8018312:	18db      	adds	r3, r3, r3
 8018314:	62bb      	str	r3, [r7, #40]	; 0x28
 8018316:	4613      	mov	r3, r2
 8018318:	eb42 0303 	adc.w	r3, r2, r3
 801831c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801831e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8018326:	f7f8 fcc7 	bl	8010cb8 <__aeabi_uldivmod>
 801832a:	4602      	mov	r2, r0
 801832c:	460b      	mov	r3, r1
 801832e:	4b0d      	ldr	r3, [pc, #52]	; (8018364 <UART_SetConfig+0x2d4>)
 8018330:	fba3 1302 	umull	r1, r3, r3, r2
 8018334:	095b      	lsrs	r3, r3, #5
 8018336:	2164      	movs	r1, #100	; 0x64
 8018338:	fb01 f303 	mul.w	r3, r1, r3
 801833c:	1ad3      	subs	r3, r2, r3
 801833e:	00db      	lsls	r3, r3, #3
 8018340:	3332      	adds	r3, #50	; 0x32
 8018342:	4a08      	ldr	r2, [pc, #32]	; (8018364 <UART_SetConfig+0x2d4>)
 8018344:	fba2 2303 	umull	r2, r3, r2, r3
 8018348:	095b      	lsrs	r3, r3, #5
 801834a:	f003 0207 	and.w	r2, r3, #7
 801834e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4422      	add	r2, r4
 8018356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018358:	e106      	b.n	8018568 <UART_SetConfig+0x4d8>
 801835a:	bf00      	nop
 801835c:	40011000 	.word	0x40011000
 8018360:	40011400 	.word	0x40011400
 8018364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801836c:	2200      	movs	r2, #0
 801836e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8018376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801837a:	4642      	mov	r2, r8
 801837c:	464b      	mov	r3, r9
 801837e:	1891      	adds	r1, r2, r2
 8018380:	6239      	str	r1, [r7, #32]
 8018382:	415b      	adcs	r3, r3
 8018384:	627b      	str	r3, [r7, #36]	; 0x24
 8018386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801838a:	4641      	mov	r1, r8
 801838c:	1854      	adds	r4, r2, r1
 801838e:	4649      	mov	r1, r9
 8018390:	eb43 0501 	adc.w	r5, r3, r1
 8018394:	f04f 0200 	mov.w	r2, #0
 8018398:	f04f 0300 	mov.w	r3, #0
 801839c:	00eb      	lsls	r3, r5, #3
 801839e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80183a2:	00e2      	lsls	r2, r4, #3
 80183a4:	4614      	mov	r4, r2
 80183a6:	461d      	mov	r5, r3
 80183a8:	4643      	mov	r3, r8
 80183aa:	18e3      	adds	r3, r4, r3
 80183ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80183b0:	464b      	mov	r3, r9
 80183b2:	eb45 0303 	adc.w	r3, r5, r3
 80183b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80183ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183be:	685b      	ldr	r3, [r3, #4]
 80183c0:	2200      	movs	r2, #0
 80183c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80183c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80183ca:	f04f 0200 	mov.w	r2, #0
 80183ce:	f04f 0300 	mov.w	r3, #0
 80183d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80183d6:	4629      	mov	r1, r5
 80183d8:	008b      	lsls	r3, r1, #2
 80183da:	4621      	mov	r1, r4
 80183dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80183e0:	4621      	mov	r1, r4
 80183e2:	008a      	lsls	r2, r1, #2
 80183e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80183e8:	f7f8 fc66 	bl	8010cb8 <__aeabi_uldivmod>
 80183ec:	4602      	mov	r2, r0
 80183ee:	460b      	mov	r3, r1
 80183f0:	4b60      	ldr	r3, [pc, #384]	; (8018574 <UART_SetConfig+0x4e4>)
 80183f2:	fba3 2302 	umull	r2, r3, r3, r2
 80183f6:	095b      	lsrs	r3, r3, #5
 80183f8:	011c      	lsls	r4, r3, #4
 80183fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80183fe:	2200      	movs	r2, #0
 8018400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8018408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 801840c:	4642      	mov	r2, r8
 801840e:	464b      	mov	r3, r9
 8018410:	1891      	adds	r1, r2, r2
 8018412:	61b9      	str	r1, [r7, #24]
 8018414:	415b      	adcs	r3, r3
 8018416:	61fb      	str	r3, [r7, #28]
 8018418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801841c:	4641      	mov	r1, r8
 801841e:	1851      	adds	r1, r2, r1
 8018420:	6139      	str	r1, [r7, #16]
 8018422:	4649      	mov	r1, r9
 8018424:	414b      	adcs	r3, r1
 8018426:	617b      	str	r3, [r7, #20]
 8018428:	f04f 0200 	mov.w	r2, #0
 801842c:	f04f 0300 	mov.w	r3, #0
 8018430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018434:	4659      	mov	r1, fp
 8018436:	00cb      	lsls	r3, r1, #3
 8018438:	4651      	mov	r1, sl
 801843a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801843e:	4651      	mov	r1, sl
 8018440:	00ca      	lsls	r2, r1, #3
 8018442:	4610      	mov	r0, r2
 8018444:	4619      	mov	r1, r3
 8018446:	4603      	mov	r3, r0
 8018448:	4642      	mov	r2, r8
 801844a:	189b      	adds	r3, r3, r2
 801844c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018450:	464b      	mov	r3, r9
 8018452:	460a      	mov	r2, r1
 8018454:	eb42 0303 	adc.w	r3, r2, r3
 8018458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801845c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	2200      	movs	r2, #0
 8018464:	67bb      	str	r3, [r7, #120]	; 0x78
 8018466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018468:	f04f 0200 	mov.w	r2, #0
 801846c:	f04f 0300 	mov.w	r3, #0
 8018470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018474:	4649      	mov	r1, r9
 8018476:	008b      	lsls	r3, r1, #2
 8018478:	4641      	mov	r1, r8
 801847a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801847e:	4641      	mov	r1, r8
 8018480:	008a      	lsls	r2, r1, #2
 8018482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8018486:	f7f8 fc17 	bl	8010cb8 <__aeabi_uldivmod>
 801848a:	4602      	mov	r2, r0
 801848c:	460b      	mov	r3, r1
 801848e:	4611      	mov	r1, r2
 8018490:	4b38      	ldr	r3, [pc, #224]	; (8018574 <UART_SetConfig+0x4e4>)
 8018492:	fba3 2301 	umull	r2, r3, r3, r1
 8018496:	095b      	lsrs	r3, r3, #5
 8018498:	2264      	movs	r2, #100	; 0x64
 801849a:	fb02 f303 	mul.w	r3, r2, r3
 801849e:	1acb      	subs	r3, r1, r3
 80184a0:	011b      	lsls	r3, r3, #4
 80184a2:	3332      	adds	r3, #50	; 0x32
 80184a4:	4a33      	ldr	r2, [pc, #204]	; (8018574 <UART_SetConfig+0x4e4>)
 80184a6:	fba2 2303 	umull	r2, r3, r2, r3
 80184aa:	095b      	lsrs	r3, r3, #5
 80184ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80184b0:	441c      	add	r4, r3
 80184b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80184b6:	2200      	movs	r2, #0
 80184b8:	673b      	str	r3, [r7, #112]	; 0x70
 80184ba:	677a      	str	r2, [r7, #116]	; 0x74
 80184bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80184c0:	4642      	mov	r2, r8
 80184c2:	464b      	mov	r3, r9
 80184c4:	1891      	adds	r1, r2, r2
 80184c6:	60b9      	str	r1, [r7, #8]
 80184c8:	415b      	adcs	r3, r3
 80184ca:	60fb      	str	r3, [r7, #12]
 80184cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80184d0:	4641      	mov	r1, r8
 80184d2:	1851      	adds	r1, r2, r1
 80184d4:	6039      	str	r1, [r7, #0]
 80184d6:	4649      	mov	r1, r9
 80184d8:	414b      	adcs	r3, r1
 80184da:	607b      	str	r3, [r7, #4]
 80184dc:	f04f 0200 	mov.w	r2, #0
 80184e0:	f04f 0300 	mov.w	r3, #0
 80184e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80184e8:	4659      	mov	r1, fp
 80184ea:	00cb      	lsls	r3, r1, #3
 80184ec:	4651      	mov	r1, sl
 80184ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80184f2:	4651      	mov	r1, sl
 80184f4:	00ca      	lsls	r2, r1, #3
 80184f6:	4610      	mov	r0, r2
 80184f8:	4619      	mov	r1, r3
 80184fa:	4603      	mov	r3, r0
 80184fc:	4642      	mov	r2, r8
 80184fe:	189b      	adds	r3, r3, r2
 8018500:	66bb      	str	r3, [r7, #104]	; 0x68
 8018502:	464b      	mov	r3, r9
 8018504:	460a      	mov	r2, r1
 8018506:	eb42 0303 	adc.w	r3, r2, r3
 801850a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018510:	685b      	ldr	r3, [r3, #4]
 8018512:	2200      	movs	r2, #0
 8018514:	663b      	str	r3, [r7, #96]	; 0x60
 8018516:	667a      	str	r2, [r7, #100]	; 0x64
 8018518:	f04f 0200 	mov.w	r2, #0
 801851c:	f04f 0300 	mov.w	r3, #0
 8018520:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8018524:	4649      	mov	r1, r9
 8018526:	008b      	lsls	r3, r1, #2
 8018528:	4641      	mov	r1, r8
 801852a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801852e:	4641      	mov	r1, r8
 8018530:	008a      	lsls	r2, r1, #2
 8018532:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8018536:	f7f8 fbbf 	bl	8010cb8 <__aeabi_uldivmod>
 801853a:	4602      	mov	r2, r0
 801853c:	460b      	mov	r3, r1
 801853e:	4b0d      	ldr	r3, [pc, #52]	; (8018574 <UART_SetConfig+0x4e4>)
 8018540:	fba3 1302 	umull	r1, r3, r3, r2
 8018544:	095b      	lsrs	r3, r3, #5
 8018546:	2164      	movs	r1, #100	; 0x64
 8018548:	fb01 f303 	mul.w	r3, r1, r3
 801854c:	1ad3      	subs	r3, r2, r3
 801854e:	011b      	lsls	r3, r3, #4
 8018550:	3332      	adds	r3, #50	; 0x32
 8018552:	4a08      	ldr	r2, [pc, #32]	; (8018574 <UART_SetConfig+0x4e4>)
 8018554:	fba2 2303 	umull	r2, r3, r2, r3
 8018558:	095b      	lsrs	r3, r3, #5
 801855a:	f003 020f 	and.w	r2, r3, #15
 801855e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	4422      	add	r2, r4
 8018566:	609a      	str	r2, [r3, #8]
}
 8018568:	bf00      	nop
 801856a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801856e:	46bd      	mov	sp, r7
 8018570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018574:	51eb851f 	.word	0x51eb851f

08018578 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b084      	sub	sp, #16
 801857c:	af00      	add	r7, sp, #0
 801857e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8018580:	4b22      	ldr	r3, [pc, #136]	; (801860c <WIZCHIP_READ+0x94>)
 8018582:	68db      	ldr	r3, [r3, #12]
 8018584:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018586:	4b21      	ldr	r3, [pc, #132]	; (801860c <WIZCHIP_READ+0x94>)
 8018588:	695b      	ldr	r3, [r3, #20]
 801858a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801858c:	4b1f      	ldr	r3, [pc, #124]	; (801860c <WIZCHIP_READ+0x94>)
 801858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018590:	2b00      	cmp	r3, #0
 8018592:	d003      	beq.n	801859c <WIZCHIP_READ+0x24>
 8018594:	4b1d      	ldr	r3, [pc, #116]	; (801860c <WIZCHIP_READ+0x94>)
 8018596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018598:	2b00      	cmp	r3, #0
 801859a:	d114      	bne.n	80185c6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 801859c:	4b1b      	ldr	r3, [pc, #108]	; (801860c <WIZCHIP_READ+0x94>)
 801859e:	6a1b      	ldr	r3, [r3, #32]
 80185a0:	687a      	ldr	r2, [r7, #4]
 80185a2:	0c12      	lsrs	r2, r2, #16
 80185a4:	b2d2      	uxtb	r2, r2
 80185a6:	4610      	mov	r0, r2
 80185a8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80185aa:	4b18      	ldr	r3, [pc, #96]	; (801860c <WIZCHIP_READ+0x94>)
 80185ac:	6a1b      	ldr	r3, [r3, #32]
 80185ae:	687a      	ldr	r2, [r7, #4]
 80185b0:	0a12      	lsrs	r2, r2, #8
 80185b2:	b2d2      	uxtb	r2, r2
 80185b4:	4610      	mov	r0, r2
 80185b6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80185b8:	4b14      	ldr	r3, [pc, #80]	; (801860c <WIZCHIP_READ+0x94>)
 80185ba:	6a1b      	ldr	r3, [r3, #32]
 80185bc:	687a      	ldr	r2, [r7, #4]
 80185be:	b2d2      	uxtb	r2, r2
 80185c0:	4610      	mov	r0, r2
 80185c2:	4798      	blx	r3
 80185c4:	e011      	b.n	80185ea <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	0c1b      	lsrs	r3, r3, #16
 80185ca:	b2db      	uxtb	r3, r3
 80185cc:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	0a1b      	lsrs	r3, r3, #8
 80185d2:	b2db      	uxtb	r3, r3
 80185d4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	b2db      	uxtb	r3, r3
 80185da:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80185dc:	4b0b      	ldr	r3, [pc, #44]	; (801860c <WIZCHIP_READ+0x94>)
 80185de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80185e0:	f107 020c 	add.w	r2, r7, #12
 80185e4:	2103      	movs	r1, #3
 80185e6:	4610      	mov	r0, r2
 80185e8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80185ea:	4b08      	ldr	r3, [pc, #32]	; (801860c <WIZCHIP_READ+0x94>)
 80185ec:	69db      	ldr	r3, [r3, #28]
 80185ee:	4798      	blx	r3
 80185f0:	4603      	mov	r3, r0
 80185f2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80185f4:	4b05      	ldr	r3, [pc, #20]	; (801860c <WIZCHIP_READ+0x94>)
 80185f6:	699b      	ldr	r3, [r3, #24]
 80185f8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80185fa:	4b04      	ldr	r3, [pc, #16]	; (801860c <WIZCHIP_READ+0x94>)
 80185fc:	691b      	ldr	r3, [r3, #16]
 80185fe:	4798      	blx	r3
   return ret;
 8018600:	7bfb      	ldrb	r3, [r7, #15]
}
 8018602:	4618      	mov	r0, r3
 8018604:	3710      	adds	r7, #16
 8018606:	46bd      	mov	sp, r7
 8018608:	bd80      	pop	{r7, pc}
 801860a:	bf00      	nop
 801860c:	200000c4 	.word	0x200000c4

08018610 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b084      	sub	sp, #16
 8018614:	af00      	add	r7, sp, #0
 8018616:	6078      	str	r0, [r7, #4]
 8018618:	460b      	mov	r3, r1
 801861a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 801861c:	4b22      	ldr	r3, [pc, #136]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 801861e:	68db      	ldr	r3, [r3, #12]
 8018620:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018622:	4b21      	ldr	r3, [pc, #132]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 8018624:	695b      	ldr	r3, [r3, #20]
 8018626:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f043 0304 	orr.w	r3, r3, #4
 801862e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018630:	4b1d      	ldr	r3, [pc, #116]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 8018632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018634:	2b00      	cmp	r3, #0
 8018636:	d119      	bne.n	801866c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018638:	4b1b      	ldr	r3, [pc, #108]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 801863a:	6a1b      	ldr	r3, [r3, #32]
 801863c:	687a      	ldr	r2, [r7, #4]
 801863e:	0c12      	lsrs	r2, r2, #16
 8018640:	b2d2      	uxtb	r2, r2
 8018642:	4610      	mov	r0, r2
 8018644:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018646:	4b18      	ldr	r3, [pc, #96]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 8018648:	6a1b      	ldr	r3, [r3, #32]
 801864a:	687a      	ldr	r2, [r7, #4]
 801864c:	0a12      	lsrs	r2, r2, #8
 801864e:	b2d2      	uxtb	r2, r2
 8018650:	4610      	mov	r0, r2
 8018652:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018654:	4b14      	ldr	r3, [pc, #80]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 8018656:	6a1b      	ldr	r3, [r3, #32]
 8018658:	687a      	ldr	r2, [r7, #4]
 801865a:	b2d2      	uxtb	r2, r2
 801865c:	4610      	mov	r0, r2
 801865e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8018660:	4b11      	ldr	r3, [pc, #68]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 8018662:	6a1b      	ldr	r3, [r3, #32]
 8018664:	78fa      	ldrb	r2, [r7, #3]
 8018666:	4610      	mov	r0, r2
 8018668:	4798      	blx	r3
 801866a:	e013      	b.n	8018694 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	0c1b      	lsrs	r3, r3, #16
 8018670:	b2db      	uxtb	r3, r3
 8018672:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	0a1b      	lsrs	r3, r3, #8
 8018678:	b2db      	uxtb	r3, r3
 801867a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	b2db      	uxtb	r3, r3
 8018680:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8018682:	78fb      	ldrb	r3, [r7, #3]
 8018684:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8018686:	4b08      	ldr	r3, [pc, #32]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 8018688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801868a:	f107 020c 	add.w	r2, r7, #12
 801868e:	2104      	movs	r1, #4
 8018690:	4610      	mov	r0, r2
 8018692:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018694:	4b04      	ldr	r3, [pc, #16]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 8018696:	699b      	ldr	r3, [r3, #24]
 8018698:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801869a:	4b03      	ldr	r3, [pc, #12]	; (80186a8 <WIZCHIP_WRITE+0x98>)
 801869c:	691b      	ldr	r3, [r3, #16]
 801869e:	4798      	blx	r3
}
 80186a0:	bf00      	nop
 80186a2:	3710      	adds	r7, #16
 80186a4:	46bd      	mov	sp, r7
 80186a6:	bd80      	pop	{r7, pc}
 80186a8:	200000c4 	.word	0x200000c4

080186ac <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80186ac:	b590      	push	{r4, r7, lr}
 80186ae:	b087      	sub	sp, #28
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	60f8      	str	r0, [r7, #12]
 80186b4:	60b9      	str	r1, [r7, #8]
 80186b6:	4613      	mov	r3, r2
 80186b8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80186ba:	4b2b      	ldr	r3, [pc, #172]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 80186bc:	68db      	ldr	r3, [r3, #12]
 80186be:	4798      	blx	r3
   WIZCHIP.CS._select();
 80186c0:	4b29      	ldr	r3, [pc, #164]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 80186c2:	695b      	ldr	r3, [r3, #20]
 80186c4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80186c6:	4b28      	ldr	r3, [pc, #160]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 80186c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d003      	beq.n	80186d6 <WIZCHIP_READ_BUF+0x2a>
 80186ce:	4b26      	ldr	r3, [pc, #152]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 80186d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d126      	bne.n	8018724 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80186d6:	4b24      	ldr	r3, [pc, #144]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 80186d8:	6a1b      	ldr	r3, [r3, #32]
 80186da:	68fa      	ldr	r2, [r7, #12]
 80186dc:	0c12      	lsrs	r2, r2, #16
 80186de:	b2d2      	uxtb	r2, r2
 80186e0:	4610      	mov	r0, r2
 80186e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80186e4:	4b20      	ldr	r3, [pc, #128]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 80186e6:	6a1b      	ldr	r3, [r3, #32]
 80186e8:	68fa      	ldr	r2, [r7, #12]
 80186ea:	0a12      	lsrs	r2, r2, #8
 80186ec:	b2d2      	uxtb	r2, r2
 80186ee:	4610      	mov	r0, r2
 80186f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80186f2:	4b1d      	ldr	r3, [pc, #116]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 80186f4:	6a1b      	ldr	r3, [r3, #32]
 80186f6:	68fa      	ldr	r2, [r7, #12]
 80186f8:	b2d2      	uxtb	r2, r2
 80186fa:	4610      	mov	r0, r2
 80186fc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80186fe:	2300      	movs	r3, #0
 8018700:	82fb      	strh	r3, [r7, #22]
 8018702:	e00a      	b.n	801871a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8018704:	4b18      	ldr	r3, [pc, #96]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 8018706:	69db      	ldr	r3, [r3, #28]
 8018708:	8afa      	ldrh	r2, [r7, #22]
 801870a:	68b9      	ldr	r1, [r7, #8]
 801870c:	188c      	adds	r4, r1, r2
 801870e:	4798      	blx	r3
 8018710:	4603      	mov	r3, r0
 8018712:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8018714:	8afb      	ldrh	r3, [r7, #22]
 8018716:	3301      	adds	r3, #1
 8018718:	82fb      	strh	r3, [r7, #22]
 801871a:	8afa      	ldrh	r2, [r7, #22]
 801871c:	88fb      	ldrh	r3, [r7, #6]
 801871e:	429a      	cmp	r2, r3
 8018720:	d3f0      	bcc.n	8018704 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018722:	e017      	b.n	8018754 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018724:	68fb      	ldr	r3, [r7, #12]
 8018726:	0c1b      	lsrs	r3, r3, #16
 8018728:	b2db      	uxtb	r3, r3
 801872a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	0a1b      	lsrs	r3, r3, #8
 8018730:	b2db      	uxtb	r3, r3
 8018732:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	b2db      	uxtb	r3, r3
 8018738:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 801873a:	4b0b      	ldr	r3, [pc, #44]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 801873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801873e:	f107 0210 	add.w	r2, r7, #16
 8018742:	2103      	movs	r1, #3
 8018744:	4610      	mov	r0, r2
 8018746:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8018748:	4b07      	ldr	r3, [pc, #28]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 801874a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801874c:	88fa      	ldrh	r2, [r7, #6]
 801874e:	4611      	mov	r1, r2
 8018750:	68b8      	ldr	r0, [r7, #8]
 8018752:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018754:	4b04      	ldr	r3, [pc, #16]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 8018756:	699b      	ldr	r3, [r3, #24]
 8018758:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801875a:	4b03      	ldr	r3, [pc, #12]	; (8018768 <WIZCHIP_READ_BUF+0xbc>)
 801875c:	691b      	ldr	r3, [r3, #16]
 801875e:	4798      	blx	r3
}
 8018760:	bf00      	nop
 8018762:	371c      	adds	r7, #28
 8018764:	46bd      	mov	sp, r7
 8018766:	bd90      	pop	{r4, r7, pc}
 8018768:	200000c4 	.word	0x200000c4

0801876c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 801876c:	b580      	push	{r7, lr}
 801876e:	b086      	sub	sp, #24
 8018770:	af00      	add	r7, sp, #0
 8018772:	60f8      	str	r0, [r7, #12]
 8018774:	60b9      	str	r1, [r7, #8]
 8018776:	4613      	mov	r3, r2
 8018778:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 801877a:	4b2b      	ldr	r3, [pc, #172]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 801877c:	68db      	ldr	r3, [r3, #12]
 801877e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018780:	4b29      	ldr	r3, [pc, #164]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 8018782:	695b      	ldr	r3, [r3, #20]
 8018784:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	f043 0304 	orr.w	r3, r3, #4
 801878c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 801878e:	4b26      	ldr	r3, [pc, #152]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 8018790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018792:	2b00      	cmp	r3, #0
 8018794:	d126      	bne.n	80187e4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018796:	4b24      	ldr	r3, [pc, #144]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 8018798:	6a1b      	ldr	r3, [r3, #32]
 801879a:	68fa      	ldr	r2, [r7, #12]
 801879c:	0c12      	lsrs	r2, r2, #16
 801879e:	b2d2      	uxtb	r2, r2
 80187a0:	4610      	mov	r0, r2
 80187a2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80187a4:	4b20      	ldr	r3, [pc, #128]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 80187a6:	6a1b      	ldr	r3, [r3, #32]
 80187a8:	68fa      	ldr	r2, [r7, #12]
 80187aa:	0a12      	lsrs	r2, r2, #8
 80187ac:	b2d2      	uxtb	r2, r2
 80187ae:	4610      	mov	r0, r2
 80187b0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80187b2:	4b1d      	ldr	r3, [pc, #116]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 80187b4:	6a1b      	ldr	r3, [r3, #32]
 80187b6:	68fa      	ldr	r2, [r7, #12]
 80187b8:	b2d2      	uxtb	r2, r2
 80187ba:	4610      	mov	r0, r2
 80187bc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80187be:	2300      	movs	r3, #0
 80187c0:	82fb      	strh	r3, [r7, #22]
 80187c2:	e00a      	b.n	80187da <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80187c4:	4b18      	ldr	r3, [pc, #96]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 80187c6:	6a1b      	ldr	r3, [r3, #32]
 80187c8:	8afa      	ldrh	r2, [r7, #22]
 80187ca:	68b9      	ldr	r1, [r7, #8]
 80187cc:	440a      	add	r2, r1
 80187ce:	7812      	ldrb	r2, [r2, #0]
 80187d0:	4610      	mov	r0, r2
 80187d2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80187d4:	8afb      	ldrh	r3, [r7, #22]
 80187d6:	3301      	adds	r3, #1
 80187d8:	82fb      	strh	r3, [r7, #22]
 80187da:	8afa      	ldrh	r2, [r7, #22]
 80187dc:	88fb      	ldrh	r3, [r7, #6]
 80187de:	429a      	cmp	r2, r3
 80187e0:	d3f0      	bcc.n	80187c4 <WIZCHIP_WRITE_BUF+0x58>
 80187e2:	e017      	b.n	8018814 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80187e4:	68fb      	ldr	r3, [r7, #12]
 80187e6:	0c1b      	lsrs	r3, r3, #16
 80187e8:	b2db      	uxtb	r3, r3
 80187ea:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	0a1b      	lsrs	r3, r3, #8
 80187f0:	b2db      	uxtb	r3, r3
 80187f2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80187fa:	4b0b      	ldr	r3, [pc, #44]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 80187fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80187fe:	f107 0210 	add.w	r2, r7, #16
 8018802:	2103      	movs	r1, #3
 8018804:	4610      	mov	r0, r2
 8018806:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8018808:	4b07      	ldr	r3, [pc, #28]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 801880a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801880c:	88fa      	ldrh	r2, [r7, #6]
 801880e:	4611      	mov	r1, r2
 8018810:	68b8      	ldr	r0, [r7, #8]
 8018812:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018814:	4b04      	ldr	r3, [pc, #16]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 8018816:	699b      	ldr	r3, [r3, #24]
 8018818:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 801881a:	4b03      	ldr	r3, [pc, #12]	; (8018828 <WIZCHIP_WRITE_BUF+0xbc>)
 801881c:	691b      	ldr	r3, [r3, #16]
 801881e:	4798      	blx	r3
}
 8018820:	bf00      	nop
 8018822:	3718      	adds	r7, #24
 8018824:	46bd      	mov	sp, r7
 8018826:	bd80      	pop	{r7, pc}
 8018828:	200000c4 	.word	0x200000c4

0801882c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 801882c:	b590      	push	{r4, r7, lr}
 801882e:	b085      	sub	sp, #20
 8018830:	af00      	add	r7, sp, #0
 8018832:	4603      	mov	r3, r0
 8018834:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018836:	2300      	movs	r3, #0
 8018838:	81fb      	strh	r3, [r7, #14]
 801883a:	2300      	movs	r3, #0
 801883c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 801883e:	79fb      	ldrb	r3, [r7, #7]
 8018840:	009b      	lsls	r3, r3, #2
 8018842:	3301      	adds	r3, #1
 8018844:	00db      	lsls	r3, r3, #3
 8018846:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801884a:	4618      	mov	r0, r3
 801884c:	f7ff fe94 	bl	8018578 <WIZCHIP_READ>
 8018850:	4603      	mov	r3, r0
 8018852:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018854:	89bb      	ldrh	r3, [r7, #12]
 8018856:	021b      	lsls	r3, r3, #8
 8018858:	b29c      	uxth	r4, r3
 801885a:	79fb      	ldrb	r3, [r7, #7]
 801885c:	009b      	lsls	r3, r3, #2
 801885e:	3301      	adds	r3, #1
 8018860:	00db      	lsls	r3, r3, #3
 8018862:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018866:	4618      	mov	r0, r3
 8018868:	f7ff fe86 	bl	8018578 <WIZCHIP_READ>
 801886c:	4603      	mov	r3, r0
 801886e:	b29b      	uxth	r3, r3
 8018870:	4423      	add	r3, r4
 8018872:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018874:	89bb      	ldrh	r3, [r7, #12]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d01a      	beq.n	80188b0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 801887a:	79fb      	ldrb	r3, [r7, #7]
 801887c:	009b      	lsls	r3, r3, #2
 801887e:	3301      	adds	r3, #1
 8018880:	00db      	lsls	r3, r3, #3
 8018882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018886:	4618      	mov	r0, r3
 8018888:	f7ff fe76 	bl	8018578 <WIZCHIP_READ>
 801888c:	4603      	mov	r3, r0
 801888e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018890:	89fb      	ldrh	r3, [r7, #14]
 8018892:	021b      	lsls	r3, r3, #8
 8018894:	b29c      	uxth	r4, r3
 8018896:	79fb      	ldrb	r3, [r7, #7]
 8018898:	009b      	lsls	r3, r3, #2
 801889a:	3301      	adds	r3, #1
 801889c:	00db      	lsls	r3, r3, #3
 801889e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7ff fe68 	bl	8018578 <WIZCHIP_READ>
 80188a8:	4603      	mov	r3, r0
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	4423      	add	r3, r4
 80188ae:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80188b0:	89fa      	ldrh	r2, [r7, #14]
 80188b2:	89bb      	ldrh	r3, [r7, #12]
 80188b4:	429a      	cmp	r2, r3
 80188b6:	d1c2      	bne.n	801883e <getSn_TX_FSR+0x12>
   return val;
 80188b8:	89fb      	ldrh	r3, [r7, #14]
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	3714      	adds	r7, #20
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd90      	pop	{r4, r7, pc}

080188c2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80188c2:	b590      	push	{r4, r7, lr}
 80188c4:	b085      	sub	sp, #20
 80188c6:	af00      	add	r7, sp, #0
 80188c8:	4603      	mov	r3, r0
 80188ca:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80188cc:	2300      	movs	r3, #0
 80188ce:	81fb      	strh	r3, [r7, #14]
 80188d0:	2300      	movs	r3, #0
 80188d2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80188d4:	79fb      	ldrb	r3, [r7, #7]
 80188d6:	009b      	lsls	r3, r3, #2
 80188d8:	3301      	adds	r3, #1
 80188da:	00db      	lsls	r3, r3, #3
 80188dc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80188e0:	4618      	mov	r0, r3
 80188e2:	f7ff fe49 	bl	8018578 <WIZCHIP_READ>
 80188e6:	4603      	mov	r3, r0
 80188e8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80188ea:	89bb      	ldrh	r3, [r7, #12]
 80188ec:	021b      	lsls	r3, r3, #8
 80188ee:	b29c      	uxth	r4, r3
 80188f0:	79fb      	ldrb	r3, [r7, #7]
 80188f2:	009b      	lsls	r3, r3, #2
 80188f4:	3301      	adds	r3, #1
 80188f6:	00db      	lsls	r3, r3, #3
 80188f8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80188fc:	4618      	mov	r0, r3
 80188fe:	f7ff fe3b 	bl	8018578 <WIZCHIP_READ>
 8018902:	4603      	mov	r3, r0
 8018904:	b29b      	uxth	r3, r3
 8018906:	4423      	add	r3, r4
 8018908:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 801890a:	89bb      	ldrh	r3, [r7, #12]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d01a      	beq.n	8018946 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018910:	79fb      	ldrb	r3, [r7, #7]
 8018912:	009b      	lsls	r3, r3, #2
 8018914:	3301      	adds	r3, #1
 8018916:	00db      	lsls	r3, r3, #3
 8018918:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 801891c:	4618      	mov	r0, r3
 801891e:	f7ff fe2b 	bl	8018578 <WIZCHIP_READ>
 8018922:	4603      	mov	r3, r0
 8018924:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018926:	89fb      	ldrh	r3, [r7, #14]
 8018928:	021b      	lsls	r3, r3, #8
 801892a:	b29c      	uxth	r4, r3
 801892c:	79fb      	ldrb	r3, [r7, #7]
 801892e:	009b      	lsls	r3, r3, #2
 8018930:	3301      	adds	r3, #1
 8018932:	00db      	lsls	r3, r3, #3
 8018934:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018938:	4618      	mov	r0, r3
 801893a:	f7ff fe1d 	bl	8018578 <WIZCHIP_READ>
 801893e:	4603      	mov	r3, r0
 8018940:	b29b      	uxth	r3, r3
 8018942:	4423      	add	r3, r4
 8018944:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018946:	89fa      	ldrh	r2, [r7, #14]
 8018948:	89bb      	ldrh	r3, [r7, #12]
 801894a:	429a      	cmp	r2, r3
 801894c:	d1c2      	bne.n	80188d4 <getSn_RX_RSR+0x12>
   return val;
 801894e:	89fb      	ldrh	r3, [r7, #14]
}
 8018950:	4618      	mov	r0, r3
 8018952:	3714      	adds	r7, #20
 8018954:	46bd      	mov	sp, r7
 8018956:	bd90      	pop	{r4, r7, pc}

08018958 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018958:	b590      	push	{r4, r7, lr}
 801895a:	b085      	sub	sp, #20
 801895c:	af00      	add	r7, sp, #0
 801895e:	4603      	mov	r3, r0
 8018960:	6039      	str	r1, [r7, #0]
 8018962:	71fb      	strb	r3, [r7, #7]
 8018964:	4613      	mov	r3, r2
 8018966:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018968:	2300      	movs	r3, #0
 801896a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 801896c:	2300      	movs	r3, #0
 801896e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8018970:	88bb      	ldrh	r3, [r7, #4]
 8018972:	2b00      	cmp	r3, #0
 8018974:	d048      	beq.n	8018a08 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8018976:	79fb      	ldrb	r3, [r7, #7]
 8018978:	009b      	lsls	r3, r3, #2
 801897a:	3301      	adds	r3, #1
 801897c:	00db      	lsls	r3, r3, #3
 801897e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018982:	4618      	mov	r0, r3
 8018984:	f7ff fdf8 	bl	8018578 <WIZCHIP_READ>
 8018988:	4603      	mov	r3, r0
 801898a:	b29b      	uxth	r3, r3
 801898c:	021b      	lsls	r3, r3, #8
 801898e:	b29c      	uxth	r4, r3
 8018990:	79fb      	ldrb	r3, [r7, #7]
 8018992:	009b      	lsls	r3, r3, #2
 8018994:	3301      	adds	r3, #1
 8018996:	00db      	lsls	r3, r3, #3
 8018998:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 801899c:	4618      	mov	r0, r3
 801899e:	f7ff fdeb 	bl	8018578 <WIZCHIP_READ>
 80189a2:	4603      	mov	r3, r0
 80189a4:	b29b      	uxth	r3, r3
 80189a6:	4423      	add	r3, r4
 80189a8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80189aa:	89fb      	ldrh	r3, [r7, #14]
 80189ac:	021b      	lsls	r3, r3, #8
 80189ae:	79fa      	ldrb	r2, [r7, #7]
 80189b0:	0092      	lsls	r2, r2, #2
 80189b2:	3202      	adds	r2, #2
 80189b4:	00d2      	lsls	r2, r2, #3
 80189b6:	4413      	add	r3, r2
 80189b8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80189ba:	88bb      	ldrh	r3, [r7, #4]
 80189bc:	461a      	mov	r2, r3
 80189be:	6839      	ldr	r1, [r7, #0]
 80189c0:	68b8      	ldr	r0, [r7, #8]
 80189c2:	f7ff fed3 	bl	801876c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80189c6:	89fa      	ldrh	r2, [r7, #14]
 80189c8:	88bb      	ldrh	r3, [r7, #4]
 80189ca:	4413      	add	r3, r2
 80189cc:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80189ce:	79fb      	ldrb	r3, [r7, #7]
 80189d0:	009b      	lsls	r3, r3, #2
 80189d2:	3301      	adds	r3, #1
 80189d4:	00db      	lsls	r3, r3, #3
 80189d6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80189da:	461a      	mov	r2, r3
 80189dc:	89fb      	ldrh	r3, [r7, #14]
 80189de:	0a1b      	lsrs	r3, r3, #8
 80189e0:	b29b      	uxth	r3, r3
 80189e2:	b2db      	uxtb	r3, r3
 80189e4:	4619      	mov	r1, r3
 80189e6:	4610      	mov	r0, r2
 80189e8:	f7ff fe12 	bl	8018610 <WIZCHIP_WRITE>
 80189ec:	79fb      	ldrb	r3, [r7, #7]
 80189ee:	009b      	lsls	r3, r3, #2
 80189f0:	3301      	adds	r3, #1
 80189f2:	00db      	lsls	r3, r3, #3
 80189f4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80189f8:	461a      	mov	r2, r3
 80189fa:	89fb      	ldrh	r3, [r7, #14]
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	4619      	mov	r1, r3
 8018a00:	4610      	mov	r0, r2
 8018a02:	f7ff fe05 	bl	8018610 <WIZCHIP_WRITE>
 8018a06:	e000      	b.n	8018a0a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8018a08:	bf00      	nop
}
 8018a0a:	3714      	adds	r7, #20
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd90      	pop	{r4, r7, pc}

08018a10 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018a10:	b590      	push	{r4, r7, lr}
 8018a12:	b085      	sub	sp, #20
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	4603      	mov	r3, r0
 8018a18:	6039      	str	r1, [r7, #0]
 8018a1a:	71fb      	strb	r3, [r7, #7]
 8018a1c:	4613      	mov	r3, r2
 8018a1e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018a20:	2300      	movs	r3, #0
 8018a22:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018a24:	2300      	movs	r3, #0
 8018a26:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8018a28:	88bb      	ldrh	r3, [r7, #4]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d048      	beq.n	8018ac0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8018a2e:	79fb      	ldrb	r3, [r7, #7]
 8018a30:	009b      	lsls	r3, r3, #2
 8018a32:	3301      	adds	r3, #1
 8018a34:	00db      	lsls	r3, r3, #3
 8018a36:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	f7ff fd9c 	bl	8018578 <WIZCHIP_READ>
 8018a40:	4603      	mov	r3, r0
 8018a42:	b29b      	uxth	r3, r3
 8018a44:	021b      	lsls	r3, r3, #8
 8018a46:	b29c      	uxth	r4, r3
 8018a48:	79fb      	ldrb	r3, [r7, #7]
 8018a4a:	009b      	lsls	r3, r3, #2
 8018a4c:	3301      	adds	r3, #1
 8018a4e:	00db      	lsls	r3, r3, #3
 8018a50:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7ff fd8f 	bl	8018578 <WIZCHIP_READ>
 8018a5a:	4603      	mov	r3, r0
 8018a5c:	b29b      	uxth	r3, r3
 8018a5e:	4423      	add	r3, r4
 8018a60:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8018a62:	89fb      	ldrh	r3, [r7, #14]
 8018a64:	021b      	lsls	r3, r3, #8
 8018a66:	79fa      	ldrb	r2, [r7, #7]
 8018a68:	0092      	lsls	r2, r2, #2
 8018a6a:	3203      	adds	r2, #3
 8018a6c:	00d2      	lsls	r2, r2, #3
 8018a6e:	4413      	add	r3, r2
 8018a70:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8018a72:	88bb      	ldrh	r3, [r7, #4]
 8018a74:	461a      	mov	r2, r3
 8018a76:	6839      	ldr	r1, [r7, #0]
 8018a78:	68b8      	ldr	r0, [r7, #8]
 8018a7a:	f7ff fe17 	bl	80186ac <WIZCHIP_READ_BUF>
   ptr += len;
 8018a7e:	89fa      	ldrh	r2, [r7, #14]
 8018a80:	88bb      	ldrh	r3, [r7, #4]
 8018a82:	4413      	add	r3, r2
 8018a84:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018a86:	79fb      	ldrb	r3, [r7, #7]
 8018a88:	009b      	lsls	r3, r3, #2
 8018a8a:	3301      	adds	r3, #1
 8018a8c:	00db      	lsls	r3, r3, #3
 8018a8e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018a92:	461a      	mov	r2, r3
 8018a94:	89fb      	ldrh	r3, [r7, #14]
 8018a96:	0a1b      	lsrs	r3, r3, #8
 8018a98:	b29b      	uxth	r3, r3
 8018a9a:	b2db      	uxtb	r3, r3
 8018a9c:	4619      	mov	r1, r3
 8018a9e:	4610      	mov	r0, r2
 8018aa0:	f7ff fdb6 	bl	8018610 <WIZCHIP_WRITE>
 8018aa4:	79fb      	ldrb	r3, [r7, #7]
 8018aa6:	009b      	lsls	r3, r3, #2
 8018aa8:	3301      	adds	r3, #1
 8018aaa:	00db      	lsls	r3, r3, #3
 8018aac:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018ab0:	461a      	mov	r2, r3
 8018ab2:	89fb      	ldrh	r3, [r7, #14]
 8018ab4:	b2db      	uxtb	r3, r3
 8018ab6:	4619      	mov	r1, r3
 8018ab8:	4610      	mov	r0, r2
 8018aba:	f7ff fda9 	bl	8018610 <WIZCHIP_WRITE>
 8018abe:	e000      	b.n	8018ac2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8018ac0:	bf00      	nop
}
 8018ac2:	3714      	adds	r7, #20
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd90      	pop	{r4, r7, pc}

08018ac8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018ac8:	b590      	push	{r4, r7, lr}
 8018aca:	b085      	sub	sp, #20
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	4603      	mov	r3, r0
 8018ad0:	460a      	mov	r2, r1
 8018ad2:	71fb      	strb	r3, [r7, #7]
 8018ad4:	4613      	mov	r3, r2
 8018ad6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018ad8:	2300      	movs	r3, #0
 8018ada:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018adc:	79fb      	ldrb	r3, [r7, #7]
 8018ade:	009b      	lsls	r3, r3, #2
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	00db      	lsls	r3, r3, #3
 8018ae4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018ae8:	4618      	mov	r0, r3
 8018aea:	f7ff fd45 	bl	8018578 <WIZCHIP_READ>
 8018aee:	4603      	mov	r3, r0
 8018af0:	b29b      	uxth	r3, r3
 8018af2:	021b      	lsls	r3, r3, #8
 8018af4:	b29c      	uxth	r4, r3
 8018af6:	79fb      	ldrb	r3, [r7, #7]
 8018af8:	009b      	lsls	r3, r3, #2
 8018afa:	3301      	adds	r3, #1
 8018afc:	00db      	lsls	r3, r3, #3
 8018afe:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018b02:	4618      	mov	r0, r3
 8018b04:	f7ff fd38 	bl	8018578 <WIZCHIP_READ>
 8018b08:	4603      	mov	r3, r0
 8018b0a:	b29b      	uxth	r3, r3
 8018b0c:	4423      	add	r3, r4
 8018b0e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8018b10:	89fa      	ldrh	r2, [r7, #14]
 8018b12:	88bb      	ldrh	r3, [r7, #4]
 8018b14:	4413      	add	r3, r2
 8018b16:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8018b18:	79fb      	ldrb	r3, [r7, #7]
 8018b1a:	009b      	lsls	r3, r3, #2
 8018b1c:	3301      	adds	r3, #1
 8018b1e:	00db      	lsls	r3, r3, #3
 8018b20:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018b24:	461a      	mov	r2, r3
 8018b26:	89fb      	ldrh	r3, [r7, #14]
 8018b28:	0a1b      	lsrs	r3, r3, #8
 8018b2a:	b29b      	uxth	r3, r3
 8018b2c:	b2db      	uxtb	r3, r3
 8018b2e:	4619      	mov	r1, r3
 8018b30:	4610      	mov	r0, r2
 8018b32:	f7ff fd6d 	bl	8018610 <WIZCHIP_WRITE>
 8018b36:	79fb      	ldrb	r3, [r7, #7]
 8018b38:	009b      	lsls	r3, r3, #2
 8018b3a:	3301      	adds	r3, #1
 8018b3c:	00db      	lsls	r3, r3, #3
 8018b3e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018b42:	461a      	mov	r2, r3
 8018b44:	89fb      	ldrh	r3, [r7, #14]
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	4619      	mov	r1, r3
 8018b4a:	4610      	mov	r0, r2
 8018b4c:	f7ff fd60 	bl	8018610 <WIZCHIP_WRITE>
}
 8018b50:	bf00      	nop
 8018b52:	3714      	adds	r7, #20
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd90      	pop	{r4, r7, pc}

08018b58 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018b58:	b590      	push	{r4, r7, lr}
 8018b5a:	b085      	sub	sp, #20
 8018b5c:	af00      	add	r7, sp, #0
 8018b5e:	4604      	mov	r4, r0
 8018b60:	4608      	mov	r0, r1
 8018b62:	4611      	mov	r1, r2
 8018b64:	461a      	mov	r2, r3
 8018b66:	4623      	mov	r3, r4
 8018b68:	71fb      	strb	r3, [r7, #7]
 8018b6a:	4603      	mov	r3, r0
 8018b6c:	71bb      	strb	r3, [r7, #6]
 8018b6e:	460b      	mov	r3, r1
 8018b70:	80bb      	strh	r3, [r7, #4]
 8018b72:	4613      	mov	r3, r2
 8018b74:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018b76:	79fb      	ldrb	r3, [r7, #7]
 8018b78:	2b08      	cmp	r3, #8
 8018b7a:	d902      	bls.n	8018b82 <socket+0x2a>
 8018b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8018b80:	e0f0      	b.n	8018d64 <socket+0x20c>
	switch(protocol)
 8018b82:	79bb      	ldrb	r3, [r7, #6]
 8018b84:	2b01      	cmp	r3, #1
 8018b86:	d005      	beq.n	8018b94 <socket+0x3c>
 8018b88:	2b00      	cmp	r3, #0
 8018b8a:	dd11      	ble.n	8018bb0 <socket+0x58>
 8018b8c:	3b02      	subs	r3, #2
 8018b8e:	2b02      	cmp	r3, #2
 8018b90:	d80e      	bhi.n	8018bb0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8018b92:	e011      	b.n	8018bb8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018b94:	f107 030c 	add.w	r3, r7, #12
 8018b98:	2204      	movs	r2, #4
 8018b9a:	4619      	mov	r1, r3
 8018b9c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8018ba0:	f7ff fd84 	bl	80186ac <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d105      	bne.n	8018bb6 <socket+0x5e>
 8018baa:	f06f 0302 	mvn.w	r3, #2
 8018bae:	e0d9      	b.n	8018d64 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8018bb0:	f06f 0304 	mvn.w	r3, #4
 8018bb4:	e0d6      	b.n	8018d64 <socket+0x20c>
	    break;
 8018bb6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018bb8:	78fb      	ldrb	r3, [r7, #3]
 8018bba:	f003 0304 	and.w	r3, r3, #4
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	d002      	beq.n	8018bc8 <socket+0x70>
 8018bc2:	f06f 0305 	mvn.w	r3, #5
 8018bc6:	e0cd      	b.n	8018d64 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018bc8:	78fb      	ldrb	r3, [r7, #3]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d028      	beq.n	8018c20 <socket+0xc8>
	{
   	switch(protocol)
 8018bce:	79bb      	ldrb	r3, [r7, #6]
 8018bd0:	2b01      	cmp	r3, #1
 8018bd2:	d002      	beq.n	8018bda <socket+0x82>
 8018bd4:	2b02      	cmp	r3, #2
 8018bd6:	d008      	beq.n	8018bea <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018bd8:	e022      	b.n	8018c20 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018bda:	78fb      	ldrb	r3, [r7, #3]
 8018bdc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8018be0:	2b00      	cmp	r3, #0
 8018be2:	d11a      	bne.n	8018c1a <socket+0xc2>
 8018be4:	f06f 0305 	mvn.w	r3, #5
 8018be8:	e0bc      	b.n	8018d64 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8018bea:	78fb      	ldrb	r3, [r7, #3]
 8018bec:	f003 0320 	and.w	r3, r3, #32
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d006      	beq.n	8018c02 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8018bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	db02      	blt.n	8018c02 <socket+0xaa>
 8018bfc:	f06f 0305 	mvn.w	r3, #5
 8018c00:	e0b0      	b.n	8018d64 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8018c02:	78fb      	ldrb	r3, [r7, #3]
 8018c04:	f003 0310 	and.w	r3, r3, #16
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d008      	beq.n	8018c1e <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8018c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	db04      	blt.n	8018c1e <socket+0xc6>
 8018c14:	f06f 0305 	mvn.w	r3, #5
 8018c18:	e0a4      	b.n	8018d64 <socket+0x20c>
   	      break;
 8018c1a:	bf00      	nop
 8018c1c:	e000      	b.n	8018c20 <socket+0xc8>
   	      break;
 8018c1e:	bf00      	nop
   	}
   }
	close(sn);
 8018c20:	79fb      	ldrb	r3, [r7, #7]
 8018c22:	4618      	mov	r0, r3
 8018c24:	f000 f8ac 	bl	8018d80 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8018c28:	79fb      	ldrb	r3, [r7, #7]
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	3301      	adds	r3, #1
 8018c2e:	00db      	lsls	r3, r3, #3
 8018c30:	4618      	mov	r0, r3
 8018c32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018c36:	f023 030f 	bic.w	r3, r3, #15
 8018c3a:	b25a      	sxtb	r2, r3
 8018c3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c40:	4313      	orrs	r3, r2
 8018c42:	b25b      	sxtb	r3, r3
 8018c44:	b2db      	uxtb	r3, r3
 8018c46:	4619      	mov	r1, r3
 8018c48:	f7ff fce2 	bl	8018610 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8018c4c:	88bb      	ldrh	r3, [r7, #4]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	d110      	bne.n	8018c74 <socket+0x11c>
	{
	   port = sock_any_port++;
 8018c52:	4b46      	ldr	r3, [pc, #280]	; (8018d6c <socket+0x214>)
 8018c54:	881b      	ldrh	r3, [r3, #0]
 8018c56:	1c5a      	adds	r2, r3, #1
 8018c58:	b291      	uxth	r1, r2
 8018c5a:	4a44      	ldr	r2, [pc, #272]	; (8018d6c <socket+0x214>)
 8018c5c:	8011      	strh	r1, [r2, #0]
 8018c5e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8018c60:	4b42      	ldr	r3, [pc, #264]	; (8018d6c <socket+0x214>)
 8018c62:	881b      	ldrh	r3, [r3, #0]
 8018c64:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018c68:	4293      	cmp	r3, r2
 8018c6a:	d103      	bne.n	8018c74 <socket+0x11c>
 8018c6c:	4b3f      	ldr	r3, [pc, #252]	; (8018d6c <socket+0x214>)
 8018c6e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018c72:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8018c74:	79fb      	ldrb	r3, [r7, #7]
 8018c76:	009b      	lsls	r3, r3, #2
 8018c78:	3301      	adds	r3, #1
 8018c7a:	00db      	lsls	r3, r3, #3
 8018c7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018c80:	461a      	mov	r2, r3
 8018c82:	88bb      	ldrh	r3, [r7, #4]
 8018c84:	0a1b      	lsrs	r3, r3, #8
 8018c86:	b29b      	uxth	r3, r3
 8018c88:	b2db      	uxtb	r3, r3
 8018c8a:	4619      	mov	r1, r3
 8018c8c:	4610      	mov	r0, r2
 8018c8e:	f7ff fcbf 	bl	8018610 <WIZCHIP_WRITE>
 8018c92:	79fb      	ldrb	r3, [r7, #7]
 8018c94:	009b      	lsls	r3, r3, #2
 8018c96:	3301      	adds	r3, #1
 8018c98:	00db      	lsls	r3, r3, #3
 8018c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8018c9e:	461a      	mov	r2, r3
 8018ca0:	88bb      	ldrh	r3, [r7, #4]
 8018ca2:	b2db      	uxtb	r3, r3
 8018ca4:	4619      	mov	r1, r3
 8018ca6:	4610      	mov	r0, r2
 8018ca8:	f7ff fcb2 	bl	8018610 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8018cac:	79fb      	ldrb	r3, [r7, #7]
 8018cae:	009b      	lsls	r3, r3, #2
 8018cb0:	3301      	adds	r3, #1
 8018cb2:	00db      	lsls	r3, r3, #3
 8018cb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018cb8:	2101      	movs	r1, #1
 8018cba:	4618      	mov	r0, r3
 8018cbc:	f7ff fca8 	bl	8018610 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8018cc0:	bf00      	nop
 8018cc2:	79fb      	ldrb	r3, [r7, #7]
 8018cc4:	009b      	lsls	r3, r3, #2
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	00db      	lsls	r3, r3, #3
 8018cca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018cce:	4618      	mov	r0, r3
 8018cd0:	f7ff fc52 	bl	8018578 <WIZCHIP_READ>
 8018cd4:	4603      	mov	r3, r0
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d1f3      	bne.n	8018cc2 <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8018cda:	79fb      	ldrb	r3, [r7, #7]
 8018cdc:	2201      	movs	r2, #1
 8018cde:	fa02 f303 	lsl.w	r3, r2, r3
 8018ce2:	b21b      	sxth	r3, r3
 8018ce4:	43db      	mvns	r3, r3
 8018ce6:	b21a      	sxth	r2, r3
 8018ce8:	4b21      	ldr	r3, [pc, #132]	; (8018d70 <socket+0x218>)
 8018cea:	881b      	ldrh	r3, [r3, #0]
 8018cec:	b21b      	sxth	r3, r3
 8018cee:	4013      	ands	r3, r2
 8018cf0:	b21b      	sxth	r3, r3
 8018cf2:	b29a      	uxth	r2, r3
 8018cf4:	4b1e      	ldr	r3, [pc, #120]	; (8018d70 <socket+0x218>)
 8018cf6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8018cf8:	78fb      	ldrb	r3, [r7, #3]
 8018cfa:	f003 0201 	and.w	r2, r3, #1
 8018cfe:	79fb      	ldrb	r3, [r7, #7]
 8018d00:	fa02 f303 	lsl.w	r3, r2, r3
 8018d04:	b21a      	sxth	r2, r3
 8018d06:	4b1a      	ldr	r3, [pc, #104]	; (8018d70 <socket+0x218>)
 8018d08:	881b      	ldrh	r3, [r3, #0]
 8018d0a:	b21b      	sxth	r3, r3
 8018d0c:	4313      	orrs	r3, r2
 8018d0e:	b21b      	sxth	r3, r3
 8018d10:	b29a      	uxth	r2, r3
 8018d12:	4b17      	ldr	r3, [pc, #92]	; (8018d70 <socket+0x218>)
 8018d14:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8018d16:	79fb      	ldrb	r3, [r7, #7]
 8018d18:	2201      	movs	r2, #1
 8018d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8018d1e:	b21b      	sxth	r3, r3
 8018d20:	43db      	mvns	r3, r3
 8018d22:	b21a      	sxth	r2, r3
 8018d24:	4b13      	ldr	r3, [pc, #76]	; (8018d74 <socket+0x21c>)
 8018d26:	881b      	ldrh	r3, [r3, #0]
 8018d28:	b21b      	sxth	r3, r3
 8018d2a:	4013      	ands	r3, r2
 8018d2c:	b21b      	sxth	r3, r3
 8018d2e:	b29a      	uxth	r2, r3
 8018d30:	4b10      	ldr	r3, [pc, #64]	; (8018d74 <socket+0x21c>)
 8018d32:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8018d34:	79fb      	ldrb	r3, [r7, #7]
 8018d36:	4a10      	ldr	r2, [pc, #64]	; (8018d78 <socket+0x220>)
 8018d38:	2100      	movs	r1, #0
 8018d3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8018d3e:	79fb      	ldrb	r3, [r7, #7]
 8018d40:	4a0e      	ldr	r2, [pc, #56]	; (8018d7c <socket+0x224>)
 8018d42:	2100      	movs	r1, #0
 8018d44:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8018d46:	bf00      	nop
 8018d48:	79fb      	ldrb	r3, [r7, #7]
 8018d4a:	009b      	lsls	r3, r3, #2
 8018d4c:	3301      	adds	r3, #1
 8018d4e:	00db      	lsls	r3, r3, #3
 8018d50:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7ff fc0f 	bl	8018578 <WIZCHIP_READ>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d0f3      	beq.n	8018d48 <socket+0x1f0>
   return (int8_t)sn;
 8018d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8018d64:	4618      	mov	r0, r3
 8018d66:	3714      	adds	r7, #20
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd90      	pop	{r4, r7, pc}
 8018d6c:	200000c2 	.word	0x200000c2
 8018d70:	20000964 	.word	0x20000964
 8018d74:	20000966 	.word	0x20000966
 8018d78:	20000968 	.word	0x20000968
 8018d7c:	20000978 	.word	0x20000978

08018d80 <close>:

int8_t close(uint8_t sn)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b082      	sub	sp, #8
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	4603      	mov	r3, r0
 8018d88:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018d8a:	79fb      	ldrb	r3, [r7, #7]
 8018d8c:	2b08      	cmp	r3, #8
 8018d8e:	d902      	bls.n	8018d96 <close+0x16>
 8018d90:	f04f 33ff 	mov.w	r3, #4294967295
 8018d94:	e055      	b.n	8018e42 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8018d96:	79fb      	ldrb	r3, [r7, #7]
 8018d98:	009b      	lsls	r3, r3, #2
 8018d9a:	3301      	adds	r3, #1
 8018d9c:	00db      	lsls	r3, r3, #3
 8018d9e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018da2:	2110      	movs	r1, #16
 8018da4:	4618      	mov	r0, r3
 8018da6:	f7ff fc33 	bl	8018610 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8018daa:	bf00      	nop
 8018dac:	79fb      	ldrb	r3, [r7, #7]
 8018dae:	009b      	lsls	r3, r3, #2
 8018db0:	3301      	adds	r3, #1
 8018db2:	00db      	lsls	r3, r3, #3
 8018db4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7ff fbdd 	bl	8018578 <WIZCHIP_READ>
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d1f3      	bne.n	8018dac <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8018dc4:	79fb      	ldrb	r3, [r7, #7]
 8018dc6:	009b      	lsls	r3, r3, #2
 8018dc8:	3301      	adds	r3, #1
 8018dca:	00db      	lsls	r3, r3, #3
 8018dcc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018dd0:	211f      	movs	r1, #31
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f7ff fc1c 	bl	8018610 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8018dd8:	79fb      	ldrb	r3, [r7, #7]
 8018dda:	2201      	movs	r2, #1
 8018ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8018de0:	b21b      	sxth	r3, r3
 8018de2:	43db      	mvns	r3, r3
 8018de4:	b21a      	sxth	r2, r3
 8018de6:	4b19      	ldr	r3, [pc, #100]	; (8018e4c <close+0xcc>)
 8018de8:	881b      	ldrh	r3, [r3, #0]
 8018dea:	b21b      	sxth	r3, r3
 8018dec:	4013      	ands	r3, r2
 8018dee:	b21b      	sxth	r3, r3
 8018df0:	b29a      	uxth	r2, r3
 8018df2:	4b16      	ldr	r3, [pc, #88]	; (8018e4c <close+0xcc>)
 8018df4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8018df6:	79fb      	ldrb	r3, [r7, #7]
 8018df8:	2201      	movs	r2, #1
 8018dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8018dfe:	b21b      	sxth	r3, r3
 8018e00:	43db      	mvns	r3, r3
 8018e02:	b21a      	sxth	r2, r3
 8018e04:	4b12      	ldr	r3, [pc, #72]	; (8018e50 <close+0xd0>)
 8018e06:	881b      	ldrh	r3, [r3, #0]
 8018e08:	b21b      	sxth	r3, r3
 8018e0a:	4013      	ands	r3, r2
 8018e0c:	b21b      	sxth	r3, r3
 8018e0e:	b29a      	uxth	r2, r3
 8018e10:	4b0f      	ldr	r3, [pc, #60]	; (8018e50 <close+0xd0>)
 8018e12:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8018e14:	79fb      	ldrb	r3, [r7, #7]
 8018e16:	4a0f      	ldr	r2, [pc, #60]	; (8018e54 <close+0xd4>)
 8018e18:	2100      	movs	r1, #0
 8018e1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8018e1e:	79fb      	ldrb	r3, [r7, #7]
 8018e20:	4a0d      	ldr	r2, [pc, #52]	; (8018e58 <close+0xd8>)
 8018e22:	2100      	movs	r1, #0
 8018e24:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8018e26:	bf00      	nop
 8018e28:	79fb      	ldrb	r3, [r7, #7]
 8018e2a:	009b      	lsls	r3, r3, #2
 8018e2c:	3301      	adds	r3, #1
 8018e2e:	00db      	lsls	r3, r3, #3
 8018e30:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7ff fb9f 	bl	8018578 <WIZCHIP_READ>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d1f3      	bne.n	8018e28 <close+0xa8>
	return SOCK_OK;
 8018e40:	2301      	movs	r3, #1
}
 8018e42:	4618      	mov	r0, r3
 8018e44:	3708      	adds	r7, #8
 8018e46:	46bd      	mov	sp, r7
 8018e48:	bd80      	pop	{r7, pc}
 8018e4a:	bf00      	nop
 8018e4c:	20000964 	.word	0x20000964
 8018e50:	20000966 	.word	0x20000966
 8018e54:	20000968 	.word	0x20000968
 8018e58:	20000978 	.word	0x20000978

08018e5c <listen>:

int8_t listen(uint8_t sn)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b082      	sub	sp, #8
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	4603      	mov	r3, r0
 8018e64:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8018e66:	79fb      	ldrb	r3, [r7, #7]
 8018e68:	2b08      	cmp	r3, #8
 8018e6a:	d902      	bls.n	8018e72 <listen+0x16>
 8018e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e70:	e049      	b.n	8018f06 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018e72:	79fb      	ldrb	r3, [r7, #7]
 8018e74:	009b      	lsls	r3, r3, #2
 8018e76:	3301      	adds	r3, #1
 8018e78:	00db      	lsls	r3, r3, #3
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	f7ff fb7c 	bl	8018578 <WIZCHIP_READ>
 8018e80:	4603      	mov	r3, r0
 8018e82:	f003 030f 	and.w	r3, r3, #15
 8018e86:	2b01      	cmp	r3, #1
 8018e88:	d002      	beq.n	8018e90 <listen+0x34>
 8018e8a:	f06f 0304 	mvn.w	r3, #4
 8018e8e:	e03a      	b.n	8018f06 <listen+0xaa>
	CHECK_SOCKINIT();
 8018e90:	79fb      	ldrb	r3, [r7, #7]
 8018e92:	009b      	lsls	r3, r3, #2
 8018e94:	3301      	adds	r3, #1
 8018e96:	00db      	lsls	r3, r3, #3
 8018e98:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018e9c:	4618      	mov	r0, r3
 8018e9e:	f7ff fb6b 	bl	8018578 <WIZCHIP_READ>
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	2b13      	cmp	r3, #19
 8018ea6:	d002      	beq.n	8018eae <listen+0x52>
 8018ea8:	f06f 0302 	mvn.w	r3, #2
 8018eac:	e02b      	b.n	8018f06 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8018eae:	79fb      	ldrb	r3, [r7, #7]
 8018eb0:	009b      	lsls	r3, r3, #2
 8018eb2:	3301      	adds	r3, #1
 8018eb4:	00db      	lsls	r3, r3, #3
 8018eb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018eba:	2102      	movs	r1, #2
 8018ebc:	4618      	mov	r0, r3
 8018ebe:	f7ff fba7 	bl	8018610 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8018ec2:	bf00      	nop
 8018ec4:	79fb      	ldrb	r3, [r7, #7]
 8018ec6:	009b      	lsls	r3, r3, #2
 8018ec8:	3301      	adds	r3, #1
 8018eca:	00db      	lsls	r3, r3, #3
 8018ecc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018ed0:	4618      	mov	r0, r3
 8018ed2:	f7ff fb51 	bl	8018578 <WIZCHIP_READ>
 8018ed6:	4603      	mov	r3, r0
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d1f3      	bne.n	8018ec4 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018edc:	e006      	b.n	8018eec <listen+0x90>
   {
         close(sn);
 8018ede:	79fb      	ldrb	r3, [r7, #7]
 8018ee0:	4618      	mov	r0, r3
 8018ee2:	f7ff ff4d 	bl	8018d80 <close>
         return SOCKERR_SOCKCLOSED;
 8018ee6:	f06f 0303 	mvn.w	r3, #3
 8018eea:	e00c      	b.n	8018f06 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8018eec:	79fb      	ldrb	r3, [r7, #7]
 8018eee:	009b      	lsls	r3, r3, #2
 8018ef0:	3301      	adds	r3, #1
 8018ef2:	00db      	lsls	r3, r3, #3
 8018ef4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018ef8:	4618      	mov	r0, r3
 8018efa:	f7ff fb3d 	bl	8018578 <WIZCHIP_READ>
 8018efe:	4603      	mov	r3, r0
 8018f00:	2b14      	cmp	r3, #20
 8018f02:	d1ec      	bne.n	8018ede <listen+0x82>
   }
   return SOCK_OK;
 8018f04:	2301      	movs	r3, #1
}
 8018f06:	4618      	mov	r0, r3
 8018f08:	3708      	adds	r7, #8
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	bd80      	pop	{r7, pc}
	...

08018f10 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b084      	sub	sp, #16
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	4603      	mov	r3, r0
 8018f18:	6039      	str	r1, [r7, #0]
 8018f1a:	71fb      	strb	r3, [r7, #7]
 8018f1c:	4613      	mov	r3, r2
 8018f1e:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8018f20:	79fb      	ldrb	r3, [r7, #7]
 8018f22:	2b08      	cmp	r3, #8
 8018f24:	d902      	bls.n	8018f2c <connect+0x1c>
 8018f26:	f04f 33ff 	mov.w	r3, #4294967295
 8018f2a:	e0c6      	b.n	80190ba <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8018f2c:	79fb      	ldrb	r3, [r7, #7]
 8018f2e:	009b      	lsls	r3, r3, #2
 8018f30:	3301      	adds	r3, #1
 8018f32:	00db      	lsls	r3, r3, #3
 8018f34:	4618      	mov	r0, r3
 8018f36:	f7ff fb1f 	bl	8018578 <WIZCHIP_READ>
 8018f3a:	4603      	mov	r3, r0
 8018f3c:	f003 030f 	and.w	r3, r3, #15
 8018f40:	2b01      	cmp	r3, #1
 8018f42:	d002      	beq.n	8018f4a <connect+0x3a>
 8018f44:	f06f 0304 	mvn.w	r3, #4
 8018f48:	e0b7      	b.n	80190ba <connect+0x1aa>
   CHECK_SOCKINIT();
 8018f4a:	79fb      	ldrb	r3, [r7, #7]
 8018f4c:	009b      	lsls	r3, r3, #2
 8018f4e:	3301      	adds	r3, #1
 8018f50:	00db      	lsls	r3, r3, #3
 8018f52:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8018f56:	4618      	mov	r0, r3
 8018f58:	f7ff fb0e 	bl	8018578 <WIZCHIP_READ>
 8018f5c:	4603      	mov	r3, r0
 8018f5e:	2b13      	cmp	r3, #19
 8018f60:	d002      	beq.n	8018f68 <connect+0x58>
 8018f62:	f06f 0302 	mvn.w	r3, #2
 8018f66:	e0a8      	b.n	80190ba <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8018f68:	683b      	ldr	r3, [r7, #0]
 8018f6a:	781b      	ldrb	r3, [r3, #0]
 8018f6c:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	021b      	lsls	r3, r3, #8
 8018f72:	683a      	ldr	r2, [r7, #0]
 8018f74:	3201      	adds	r2, #1
 8018f76:	7812      	ldrb	r2, [r2, #0]
 8018f78:	4413      	add	r3, r2
 8018f7a:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8018f7c:	68fb      	ldr	r3, [r7, #12]
 8018f7e:	021b      	lsls	r3, r3, #8
 8018f80:	683a      	ldr	r2, [r7, #0]
 8018f82:	3202      	adds	r2, #2
 8018f84:	7812      	ldrb	r2, [r2, #0]
 8018f86:	4413      	add	r3, r2
 8018f88:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	021b      	lsls	r3, r3, #8
 8018f8e:	683a      	ldr	r2, [r7, #0]
 8018f90:	3203      	adds	r2, #3
 8018f92:	7812      	ldrb	r2, [r2, #0]
 8018f94:	4413      	add	r3, r2
 8018f96:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f9e:	d002      	beq.n	8018fa6 <connect+0x96>
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d102      	bne.n	8018fac <connect+0x9c>
 8018fa6:	f06f 030b 	mvn.w	r3, #11
 8018faa:	e086      	b.n	80190ba <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8018fac:	88bb      	ldrh	r3, [r7, #4]
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d102      	bne.n	8018fb8 <connect+0xa8>
 8018fb2:	f06f 030a 	mvn.w	r3, #10
 8018fb6:	e080      	b.n	80190ba <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8018fb8:	79fb      	ldrb	r3, [r7, #7]
 8018fba:	009b      	lsls	r3, r3, #2
 8018fbc:	3301      	adds	r3, #1
 8018fbe:	00db      	lsls	r3, r3, #3
 8018fc0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8018fc4:	2204      	movs	r2, #4
 8018fc6:	6839      	ldr	r1, [r7, #0]
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f7ff fbcf 	bl	801876c <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8018fce:	79fb      	ldrb	r3, [r7, #7]
 8018fd0:	009b      	lsls	r3, r3, #2
 8018fd2:	3301      	adds	r3, #1
 8018fd4:	00db      	lsls	r3, r3, #3
 8018fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018fda:	461a      	mov	r2, r3
 8018fdc:	88bb      	ldrh	r3, [r7, #4]
 8018fde:	0a1b      	lsrs	r3, r3, #8
 8018fe0:	b29b      	uxth	r3, r3
 8018fe2:	b2db      	uxtb	r3, r3
 8018fe4:	4619      	mov	r1, r3
 8018fe6:	4610      	mov	r0, r2
 8018fe8:	f7ff fb12 	bl	8018610 <WIZCHIP_WRITE>
 8018fec:	79fb      	ldrb	r3, [r7, #7]
 8018fee:	009b      	lsls	r3, r3, #2
 8018ff0:	3301      	adds	r3, #1
 8018ff2:	00db      	lsls	r3, r3, #3
 8018ff4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8018ff8:	461a      	mov	r2, r3
 8018ffa:	88bb      	ldrh	r3, [r7, #4]
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	4619      	mov	r1, r3
 8019000:	4610      	mov	r0, r2
 8019002:	f7ff fb05 	bl	8018610 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8019006:	79fb      	ldrb	r3, [r7, #7]
 8019008:	009b      	lsls	r3, r3, #2
 801900a:	3301      	adds	r3, #1
 801900c:	00db      	lsls	r3, r3, #3
 801900e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019012:	2104      	movs	r1, #4
 8019014:	4618      	mov	r0, r3
 8019016:	f7ff fafb 	bl	8018610 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 801901a:	bf00      	nop
 801901c:	79fb      	ldrb	r3, [r7, #7]
 801901e:	009b      	lsls	r3, r3, #2
 8019020:	3301      	adds	r3, #1
 8019022:	00db      	lsls	r3, r3, #3
 8019024:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019028:	4618      	mov	r0, r3
 801902a:	f7ff faa5 	bl	8018578 <WIZCHIP_READ>
 801902e:	4603      	mov	r3, r0
 8019030:	2b00      	cmp	r3, #0
 8019032:	d1f3      	bne.n	801901c <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019034:	4b23      	ldr	r3, [pc, #140]	; (80190c4 <connect+0x1b4>)
 8019036:	881b      	ldrh	r3, [r3, #0]
 8019038:	461a      	mov	r2, r3
 801903a:	79fb      	ldrb	r3, [r7, #7]
 801903c:	fa42 f303 	asr.w	r3, r2, r3
 8019040:	f003 0301 	and.w	r3, r3, #1
 8019044:	2b00      	cmp	r3, #0
 8019046:	d02b      	beq.n	80190a0 <connect+0x190>
 8019048:	2300      	movs	r3, #0
 801904a:	e036      	b.n	80190ba <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 801904c:	79fb      	ldrb	r3, [r7, #7]
 801904e:	009b      	lsls	r3, r3, #2
 8019050:	3301      	adds	r3, #1
 8019052:	00db      	lsls	r3, r3, #3
 8019054:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019058:	4618      	mov	r0, r3
 801905a:	f7ff fa8d 	bl	8018578 <WIZCHIP_READ>
 801905e:	4603      	mov	r3, r0
 8019060:	f003 0308 	and.w	r3, r3, #8
 8019064:	2b00      	cmp	r3, #0
 8019066:	d00c      	beq.n	8019082 <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8019068:	79fb      	ldrb	r3, [r7, #7]
 801906a:	009b      	lsls	r3, r3, #2
 801906c:	3301      	adds	r3, #1
 801906e:	00db      	lsls	r3, r3, #3
 8019070:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019074:	2108      	movs	r1, #8
 8019076:	4618      	mov	r0, r3
 8019078:	f7ff faca 	bl	8018610 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 801907c:	f06f 030c 	mvn.w	r3, #12
 8019080:	e01b      	b.n	80190ba <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 8019082:	79fb      	ldrb	r3, [r7, #7]
 8019084:	009b      	lsls	r3, r3, #2
 8019086:	3301      	adds	r3, #1
 8019088:	00db      	lsls	r3, r3, #3
 801908a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801908e:	4618      	mov	r0, r3
 8019090:	f7ff fa72 	bl	8018578 <WIZCHIP_READ>
 8019094:	4603      	mov	r3, r0
 8019096:	2b00      	cmp	r3, #0
 8019098:	d102      	bne.n	80190a0 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 801909a:	f06f 0303 	mvn.w	r3, #3
 801909e:	e00c      	b.n	80190ba <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80190a0:	79fb      	ldrb	r3, [r7, #7]
 80190a2:	009b      	lsls	r3, r3, #2
 80190a4:	3301      	adds	r3, #1
 80190a6:	00db      	lsls	r3, r3, #3
 80190a8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80190ac:	4618      	mov	r0, r3
 80190ae:	f7ff fa63 	bl	8018578 <WIZCHIP_READ>
 80190b2:	4603      	mov	r3, r0
 80190b4:	2b17      	cmp	r3, #23
 80190b6:	d1c9      	bne.n	801904c <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80190b8:	2301      	movs	r3, #1
}
 80190ba:	4618      	mov	r0, r3
 80190bc:	3710      	adds	r7, #16
 80190be:	46bd      	mov	sp, r7
 80190c0:	bd80      	pop	{r7, pc}
 80190c2:	bf00      	nop
 80190c4:	20000964 	.word	0x20000964

080190c8 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b082      	sub	sp, #8
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	4603      	mov	r3, r0
 80190d0:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80190d2:	79fb      	ldrb	r3, [r7, #7]
 80190d4:	2b08      	cmp	r3, #8
 80190d6:	d902      	bls.n	80190de <disconnect+0x16>
 80190d8:	f04f 33ff 	mov.w	r3, #4294967295
 80190dc:	e062      	b.n	80191a4 <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80190de:	79fb      	ldrb	r3, [r7, #7]
 80190e0:	009b      	lsls	r3, r3, #2
 80190e2:	3301      	adds	r3, #1
 80190e4:	00db      	lsls	r3, r3, #3
 80190e6:	4618      	mov	r0, r3
 80190e8:	f7ff fa46 	bl	8018578 <WIZCHIP_READ>
 80190ec:	4603      	mov	r3, r0
 80190ee:	f003 030f 	and.w	r3, r3, #15
 80190f2:	2b01      	cmp	r3, #1
 80190f4:	d002      	beq.n	80190fc <disconnect+0x34>
 80190f6:	f06f 0304 	mvn.w	r3, #4
 80190fa:	e053      	b.n	80191a4 <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 80190fc:	79fb      	ldrb	r3, [r7, #7]
 80190fe:	009b      	lsls	r3, r3, #2
 8019100:	3301      	adds	r3, #1
 8019102:	00db      	lsls	r3, r3, #3
 8019104:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019108:	2108      	movs	r1, #8
 801910a:	4618      	mov	r0, r3
 801910c:	f7ff fa80 	bl	8018610 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019110:	bf00      	nop
 8019112:	79fb      	ldrb	r3, [r7, #7]
 8019114:	009b      	lsls	r3, r3, #2
 8019116:	3301      	adds	r3, #1
 8019118:	00db      	lsls	r3, r3, #3
 801911a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801911e:	4618      	mov	r0, r3
 8019120:	f7ff fa2a 	bl	8018578 <WIZCHIP_READ>
 8019124:	4603      	mov	r3, r0
 8019126:	2b00      	cmp	r3, #0
 8019128:	d1f3      	bne.n	8019112 <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 801912a:	79fb      	ldrb	r3, [r7, #7]
 801912c:	2201      	movs	r2, #1
 801912e:	fa02 f303 	lsl.w	r3, r2, r3
 8019132:	b21b      	sxth	r3, r3
 8019134:	43db      	mvns	r3, r3
 8019136:	b21a      	sxth	r2, r3
 8019138:	4b1c      	ldr	r3, [pc, #112]	; (80191ac <disconnect+0xe4>)
 801913a:	881b      	ldrh	r3, [r3, #0]
 801913c:	b21b      	sxth	r3, r3
 801913e:	4013      	ands	r3, r2
 8019140:	b21b      	sxth	r3, r3
 8019142:	b29a      	uxth	r2, r3
 8019144:	4b19      	ldr	r3, [pc, #100]	; (80191ac <disconnect+0xe4>)
 8019146:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019148:	4b19      	ldr	r3, [pc, #100]	; (80191b0 <disconnect+0xe8>)
 801914a:	881b      	ldrh	r3, [r3, #0]
 801914c:	461a      	mov	r2, r3
 801914e:	79fb      	ldrb	r3, [r7, #7]
 8019150:	fa42 f303 	asr.w	r3, r2, r3
 8019154:	f003 0301 	and.w	r3, r3, #1
 8019158:	2b00      	cmp	r3, #0
 801915a:	d016      	beq.n	801918a <disconnect+0xc2>
 801915c:	2300      	movs	r3, #0
 801915e:	e021      	b.n	80191a4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8019160:	79fb      	ldrb	r3, [r7, #7]
 8019162:	009b      	lsls	r3, r3, #2
 8019164:	3301      	adds	r3, #1
 8019166:	00db      	lsls	r3, r3, #3
 8019168:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801916c:	4618      	mov	r0, r3
 801916e:	f7ff fa03 	bl	8018578 <WIZCHIP_READ>
 8019172:	4603      	mov	r3, r0
 8019174:	f003 0308 	and.w	r3, r3, #8
 8019178:	2b00      	cmp	r3, #0
 801917a:	d006      	beq.n	801918a <disconnect+0xc2>
	   {
	      close(sn);
 801917c:	79fb      	ldrb	r3, [r7, #7]
 801917e:	4618      	mov	r0, r3
 8019180:	f7ff fdfe 	bl	8018d80 <close>
	      return SOCKERR_TIMEOUT;
 8019184:	f06f 030c 	mvn.w	r3, #12
 8019188:	e00c      	b.n	80191a4 <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 801918a:	79fb      	ldrb	r3, [r7, #7]
 801918c:	009b      	lsls	r3, r3, #2
 801918e:	3301      	adds	r3, #1
 8019190:	00db      	lsls	r3, r3, #3
 8019192:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019196:	4618      	mov	r0, r3
 8019198:	f7ff f9ee 	bl	8018578 <WIZCHIP_READ>
 801919c:	4603      	mov	r3, r0
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d1de      	bne.n	8019160 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80191a2:	2301      	movs	r3, #1
}
 80191a4:	4618      	mov	r0, r3
 80191a6:	3708      	adds	r7, #8
 80191a8:	46bd      	mov	sp, r7
 80191aa:	bd80      	pop	{r7, pc}
 80191ac:	20000966 	.word	0x20000966
 80191b0:	20000964 	.word	0x20000964

080191b4 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b084      	sub	sp, #16
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	4603      	mov	r3, r0
 80191bc:	6039      	str	r1, [r7, #0]
 80191be:	71fb      	strb	r3, [r7, #7]
 80191c0:	4613      	mov	r3, r2
 80191c2:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80191c4:	2300      	movs	r3, #0
 80191c6:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80191c8:	2300      	movs	r3, #0
 80191ca:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80191cc:	79fb      	ldrb	r3, [r7, #7]
 80191ce:	2b08      	cmp	r3, #8
 80191d0:	d902      	bls.n	80191d8 <send+0x24>
 80191d2:	f04f 33ff 	mov.w	r3, #4294967295
 80191d6:	e0de      	b.n	8019396 <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80191d8:	79fb      	ldrb	r3, [r7, #7]
 80191da:	009b      	lsls	r3, r3, #2
 80191dc:	3301      	adds	r3, #1
 80191de:	00db      	lsls	r3, r3, #3
 80191e0:	4618      	mov	r0, r3
 80191e2:	f7ff f9c9 	bl	8018578 <WIZCHIP_READ>
 80191e6:	4603      	mov	r3, r0
 80191e8:	f003 030f 	and.w	r3, r3, #15
 80191ec:	2b01      	cmp	r3, #1
 80191ee:	d002      	beq.n	80191f6 <send+0x42>
 80191f0:	f06f 0304 	mvn.w	r3, #4
 80191f4:	e0cf      	b.n	8019396 <send+0x1e2>
   CHECK_SOCKDATA();
 80191f6:	88bb      	ldrh	r3, [r7, #4]
 80191f8:	2b00      	cmp	r3, #0
 80191fa:	d102      	bne.n	8019202 <send+0x4e>
 80191fc:	f06f 030d 	mvn.w	r3, #13
 8019200:	e0c9      	b.n	8019396 <send+0x1e2>
   tmp = getSn_SR(sn);
 8019202:	79fb      	ldrb	r3, [r7, #7]
 8019204:	009b      	lsls	r3, r3, #2
 8019206:	3301      	adds	r3, #1
 8019208:	00db      	lsls	r3, r3, #3
 801920a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801920e:	4618      	mov	r0, r3
 8019210:	f7ff f9b2 	bl	8018578 <WIZCHIP_READ>
 8019214:	4603      	mov	r3, r0
 8019216:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8019218:	7bfb      	ldrb	r3, [r7, #15]
 801921a:	2b17      	cmp	r3, #23
 801921c:	d005      	beq.n	801922a <send+0x76>
 801921e:	7bfb      	ldrb	r3, [r7, #15]
 8019220:	2b1c      	cmp	r3, #28
 8019222:	d002      	beq.n	801922a <send+0x76>
 8019224:	f06f 0306 	mvn.w	r3, #6
 8019228:	e0b5      	b.n	8019396 <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 801922a:	4b5d      	ldr	r3, [pc, #372]	; (80193a0 <send+0x1ec>)
 801922c:	881b      	ldrh	r3, [r3, #0]
 801922e:	461a      	mov	r2, r3
 8019230:	79fb      	ldrb	r3, [r7, #7]
 8019232:	fa42 f303 	asr.w	r3, r2, r3
 8019236:	f003 0301 	and.w	r3, r3, #1
 801923a:	2b00      	cmp	r3, #0
 801923c:	d039      	beq.n	80192b2 <send+0xfe>
   {
      tmp = getSn_IR(sn);
 801923e:	79fb      	ldrb	r3, [r7, #7]
 8019240:	009b      	lsls	r3, r3, #2
 8019242:	3301      	adds	r3, #1
 8019244:	00db      	lsls	r3, r3, #3
 8019246:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801924a:	4618      	mov	r0, r3
 801924c:	f7ff f994 	bl	8018578 <WIZCHIP_READ>
 8019250:	4603      	mov	r3, r0
 8019252:	f003 031f 	and.w	r3, r3, #31
 8019256:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8019258:	7bfb      	ldrb	r3, [r7, #15]
 801925a:	f003 0310 	and.w	r3, r3, #16
 801925e:	2b00      	cmp	r3, #0
 8019260:	d019      	beq.n	8019296 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019262:	79fb      	ldrb	r3, [r7, #7]
 8019264:	009b      	lsls	r3, r3, #2
 8019266:	3301      	adds	r3, #1
 8019268:	00db      	lsls	r3, r3, #3
 801926a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801926e:	2110      	movs	r1, #16
 8019270:	4618      	mov	r0, r3
 8019272:	f7ff f9cd 	bl	8018610 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8019276:	79fb      	ldrb	r3, [r7, #7]
 8019278:	2201      	movs	r2, #1
 801927a:	fa02 f303 	lsl.w	r3, r2, r3
 801927e:	b21b      	sxth	r3, r3
 8019280:	43db      	mvns	r3, r3
 8019282:	b21a      	sxth	r2, r3
 8019284:	4b46      	ldr	r3, [pc, #280]	; (80193a0 <send+0x1ec>)
 8019286:	881b      	ldrh	r3, [r3, #0]
 8019288:	b21b      	sxth	r3, r3
 801928a:	4013      	ands	r3, r2
 801928c:	b21b      	sxth	r3, r3
 801928e:	b29a      	uxth	r2, r3
 8019290:	4b43      	ldr	r3, [pc, #268]	; (80193a0 <send+0x1ec>)
 8019292:	801a      	strh	r2, [r3, #0]
 8019294:	e00d      	b.n	80192b2 <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8019296:	7bfb      	ldrb	r3, [r7, #15]
 8019298:	f003 0308 	and.w	r3, r3, #8
 801929c:	2b00      	cmp	r3, #0
 801929e:	d006      	beq.n	80192ae <send+0xfa>
      {
         close(sn);
 80192a0:	79fb      	ldrb	r3, [r7, #7]
 80192a2:	4618      	mov	r0, r3
 80192a4:	f7ff fd6c 	bl	8018d80 <close>
         return SOCKERR_TIMEOUT;
 80192a8:	f06f 030c 	mvn.w	r3, #12
 80192ac:	e073      	b.n	8019396 <send+0x1e2>
      }
      else return SOCK_BUSY;
 80192ae:	2300      	movs	r3, #0
 80192b0:	e071      	b.n	8019396 <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80192b2:	79fb      	ldrb	r3, [r7, #7]
 80192b4:	009b      	lsls	r3, r3, #2
 80192b6:	3301      	adds	r3, #1
 80192b8:	00db      	lsls	r3, r3, #3
 80192ba:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80192be:	4618      	mov	r0, r3
 80192c0:	f7ff f95a 	bl	8018578 <WIZCHIP_READ>
 80192c4:	4603      	mov	r3, r0
 80192c6:	b29b      	uxth	r3, r3
 80192c8:	029b      	lsls	r3, r3, #10
 80192ca:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80192cc:	88ba      	ldrh	r2, [r7, #4]
 80192ce:	89bb      	ldrh	r3, [r7, #12]
 80192d0:	429a      	cmp	r2, r3
 80192d2:	d901      	bls.n	80192d8 <send+0x124>
 80192d4:	89bb      	ldrh	r3, [r7, #12]
 80192d6:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80192d8:	79fb      	ldrb	r3, [r7, #7]
 80192da:	4618      	mov	r0, r3
 80192dc:	f7ff faa6 	bl	801882c <getSn_TX_FSR>
 80192e0:	4603      	mov	r3, r0
 80192e2:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80192e4:	79fb      	ldrb	r3, [r7, #7]
 80192e6:	009b      	lsls	r3, r3, #2
 80192e8:	3301      	adds	r3, #1
 80192ea:	00db      	lsls	r3, r3, #3
 80192ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80192f0:	4618      	mov	r0, r3
 80192f2:	f7ff f941 	bl	8018578 <WIZCHIP_READ>
 80192f6:	4603      	mov	r3, r0
 80192f8:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80192fa:	7bfb      	ldrb	r3, [r7, #15]
 80192fc:	2b17      	cmp	r3, #23
 80192fe:	d009      	beq.n	8019314 <send+0x160>
 8019300:	7bfb      	ldrb	r3, [r7, #15]
 8019302:	2b1c      	cmp	r3, #28
 8019304:	d006      	beq.n	8019314 <send+0x160>
      {
         close(sn);
 8019306:	79fb      	ldrb	r3, [r7, #7]
 8019308:	4618      	mov	r0, r3
 801930a:	f7ff fd39 	bl	8018d80 <close>
         return SOCKERR_SOCKSTATUS;
 801930e:	f06f 0306 	mvn.w	r3, #6
 8019312:	e040      	b.n	8019396 <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8019314:	4b23      	ldr	r3, [pc, #140]	; (80193a4 <send+0x1f0>)
 8019316:	881b      	ldrh	r3, [r3, #0]
 8019318:	461a      	mov	r2, r3
 801931a:	79fb      	ldrb	r3, [r7, #7]
 801931c:	fa42 f303 	asr.w	r3, r2, r3
 8019320:	f003 0301 	and.w	r3, r3, #1
 8019324:	2b00      	cmp	r3, #0
 8019326:	d005      	beq.n	8019334 <send+0x180>
 8019328:	88ba      	ldrh	r2, [r7, #4]
 801932a:	89bb      	ldrh	r3, [r7, #12]
 801932c:	429a      	cmp	r2, r3
 801932e:	d901      	bls.n	8019334 <send+0x180>
 8019330:	2300      	movs	r3, #0
 8019332:	e030      	b.n	8019396 <send+0x1e2>
      if(len <= freesize) break;
 8019334:	88ba      	ldrh	r2, [r7, #4]
 8019336:	89bb      	ldrh	r3, [r7, #12]
 8019338:	429a      	cmp	r2, r3
 801933a:	d900      	bls.n	801933e <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 801933c:	e7cc      	b.n	80192d8 <send+0x124>
      if(len <= freesize) break;
 801933e:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8019340:	88ba      	ldrh	r2, [r7, #4]
 8019342:	79fb      	ldrb	r3, [r7, #7]
 8019344:	6839      	ldr	r1, [r7, #0]
 8019346:	4618      	mov	r0, r3
 8019348:	f7ff fb06 	bl	8018958 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 801934c:	79fb      	ldrb	r3, [r7, #7]
 801934e:	009b      	lsls	r3, r3, #2
 8019350:	3301      	adds	r3, #1
 8019352:	00db      	lsls	r3, r3, #3
 8019354:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019358:	2120      	movs	r1, #32
 801935a:	4618      	mov	r0, r3
 801935c:	f7ff f958 	bl	8018610 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8019360:	bf00      	nop
 8019362:	79fb      	ldrb	r3, [r7, #7]
 8019364:	009b      	lsls	r3, r3, #2
 8019366:	3301      	adds	r3, #1
 8019368:	00db      	lsls	r3, r3, #3
 801936a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801936e:	4618      	mov	r0, r3
 8019370:	f7ff f902 	bl	8018578 <WIZCHIP_READ>
 8019374:	4603      	mov	r3, r0
 8019376:	2b00      	cmp	r3, #0
 8019378:	d1f3      	bne.n	8019362 <send+0x1ae>
   sock_is_sending |= (1 << sn);
 801937a:	79fb      	ldrb	r3, [r7, #7]
 801937c:	2201      	movs	r2, #1
 801937e:	fa02 f303 	lsl.w	r3, r2, r3
 8019382:	b21a      	sxth	r2, r3
 8019384:	4b06      	ldr	r3, [pc, #24]	; (80193a0 <send+0x1ec>)
 8019386:	881b      	ldrh	r3, [r3, #0]
 8019388:	b21b      	sxth	r3, r3
 801938a:	4313      	orrs	r3, r2
 801938c:	b21b      	sxth	r3, r3
 801938e:	b29a      	uxth	r2, r3
 8019390:	4b03      	ldr	r3, [pc, #12]	; (80193a0 <send+0x1ec>)
 8019392:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019394:	88bb      	ldrh	r3, [r7, #4]
}
 8019396:	4618      	mov	r0, r3
 8019398:	3710      	adds	r7, #16
 801939a:	46bd      	mov	sp, r7
 801939c:	bd80      	pop	{r7, pc}
 801939e:	bf00      	nop
 80193a0:	20000966 	.word	0x20000966
 80193a4:	20000964 	.word	0x20000964

080193a8 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80193a8:	b590      	push	{r4, r7, lr}
 80193aa:	b085      	sub	sp, #20
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	4603      	mov	r3, r0
 80193b0:	6039      	str	r1, [r7, #0]
 80193b2:	71fb      	strb	r3, [r7, #7]
 80193b4:	4613      	mov	r3, r2
 80193b6:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80193b8:	2300      	movs	r3, #0
 80193ba:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80193bc:	2300      	movs	r3, #0
 80193be:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80193c0:	79fb      	ldrb	r3, [r7, #7]
 80193c2:	2b08      	cmp	r3, #8
 80193c4:	d902      	bls.n	80193cc <recv+0x24>
 80193c6:	f04f 33ff 	mov.w	r3, #4294967295
 80193ca:	e09c      	b.n	8019506 <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80193cc:	79fb      	ldrb	r3, [r7, #7]
 80193ce:	009b      	lsls	r3, r3, #2
 80193d0:	3301      	adds	r3, #1
 80193d2:	00db      	lsls	r3, r3, #3
 80193d4:	4618      	mov	r0, r3
 80193d6:	f7ff f8cf 	bl	8018578 <WIZCHIP_READ>
 80193da:	4603      	mov	r3, r0
 80193dc:	f003 030f 	and.w	r3, r3, #15
 80193e0:	2b01      	cmp	r3, #1
 80193e2:	d002      	beq.n	80193ea <recv+0x42>
 80193e4:	f06f 0304 	mvn.w	r3, #4
 80193e8:	e08d      	b.n	8019506 <recv+0x15e>
   CHECK_SOCKDATA();
 80193ea:	88bb      	ldrh	r3, [r7, #4]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d102      	bne.n	80193f6 <recv+0x4e>
 80193f0:	f06f 030d 	mvn.w	r3, #13
 80193f4:	e087      	b.n	8019506 <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80193f6:	79fb      	ldrb	r3, [r7, #7]
 80193f8:	009b      	lsls	r3, r3, #2
 80193fa:	3301      	adds	r3, #1
 80193fc:	00db      	lsls	r3, r3, #3
 80193fe:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8019402:	4618      	mov	r0, r3
 8019404:	f7ff f8b8 	bl	8018578 <WIZCHIP_READ>
 8019408:	4603      	mov	r3, r0
 801940a:	b29b      	uxth	r3, r3
 801940c:	029b      	lsls	r3, r3, #10
 801940e:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8019410:	89ba      	ldrh	r2, [r7, #12]
 8019412:	88bb      	ldrh	r3, [r7, #4]
 8019414:	429a      	cmp	r2, r3
 8019416:	d201      	bcs.n	801941c <recv+0x74>
 8019418:	89bb      	ldrh	r3, [r7, #12]
 801941a:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 801941c:	79fb      	ldrb	r3, [r7, #7]
 801941e:	4618      	mov	r0, r3
 8019420:	f7ff fa4f 	bl	80188c2 <getSn_RX_RSR>
 8019424:	4603      	mov	r3, r0
 8019426:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8019428:	79fb      	ldrb	r3, [r7, #7]
 801942a:	009b      	lsls	r3, r3, #2
 801942c:	3301      	adds	r3, #1
 801942e:	00db      	lsls	r3, r3, #3
 8019430:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019434:	4618      	mov	r0, r3
 8019436:	f7ff f89f 	bl	8018578 <WIZCHIP_READ>
 801943a:	4603      	mov	r3, r0
 801943c:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 801943e:	7bfb      	ldrb	r3, [r7, #15]
 8019440:	2b17      	cmp	r3, #23
 8019442:	d026      	beq.n	8019492 <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 8019444:	7bfb      	ldrb	r3, [r7, #15]
 8019446:	2b1c      	cmp	r3, #28
 8019448:	d11c      	bne.n	8019484 <recv+0xdc>
            {
               if(recvsize != 0) break;
 801944a:	89bb      	ldrh	r3, [r7, #12]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d133      	bne.n	80194b8 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8019450:	79fb      	ldrb	r3, [r7, #7]
 8019452:	4618      	mov	r0, r3
 8019454:	f7ff f9ea 	bl	801882c <getSn_TX_FSR>
 8019458:	4603      	mov	r3, r0
 801945a:	461c      	mov	r4, r3
 801945c:	79fb      	ldrb	r3, [r7, #7]
 801945e:	009b      	lsls	r3, r3, #2
 8019460:	3301      	adds	r3, #1
 8019462:	00db      	lsls	r3, r3, #3
 8019464:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019468:	4618      	mov	r0, r3
 801946a:	f7ff f885 	bl	8018578 <WIZCHIP_READ>
 801946e:	4603      	mov	r3, r0
 8019470:	029b      	lsls	r3, r3, #10
 8019472:	429c      	cmp	r4, r3
 8019474:	d10d      	bne.n	8019492 <recv+0xea>
               {
                  close(sn);
 8019476:	79fb      	ldrb	r3, [r7, #7]
 8019478:	4618      	mov	r0, r3
 801947a:	f7ff fc81 	bl	8018d80 <close>
                  return SOCKERR_SOCKSTATUS;
 801947e:	f06f 0306 	mvn.w	r3, #6
 8019482:	e040      	b.n	8019506 <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 8019484:	79fb      	ldrb	r3, [r7, #7]
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff fc7a 	bl	8018d80 <close>
               return SOCKERR_SOCKSTATUS;
 801948c:	f06f 0306 	mvn.w	r3, #6
 8019490:	e039      	b.n	8019506 <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8019492:	4b1f      	ldr	r3, [pc, #124]	; (8019510 <recv+0x168>)
 8019494:	881b      	ldrh	r3, [r3, #0]
 8019496:	461a      	mov	r2, r3
 8019498:	79fb      	ldrb	r3, [r7, #7]
 801949a:	fa42 f303 	asr.w	r3, r2, r3
 801949e:	f003 0301 	and.w	r3, r3, #1
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d004      	beq.n	80194b0 <recv+0x108>
 80194a6:	89bb      	ldrh	r3, [r7, #12]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d101      	bne.n	80194b0 <recv+0x108>
 80194ac:	2300      	movs	r3, #0
 80194ae:	e02a      	b.n	8019506 <recv+0x15e>
         if(recvsize != 0) break;
 80194b0:	89bb      	ldrh	r3, [r7, #12]
 80194b2:	2b00      	cmp	r3, #0
 80194b4:	d102      	bne.n	80194bc <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80194b6:	e7b1      	b.n	801941c <recv+0x74>
               if(recvsize != 0) break;
 80194b8:	bf00      	nop
 80194ba:	e000      	b.n	80194be <recv+0x116>
         if(recvsize != 0) break;
 80194bc:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80194be:	89ba      	ldrh	r2, [r7, #12]
 80194c0:	88bb      	ldrh	r3, [r7, #4]
 80194c2:	429a      	cmp	r2, r3
 80194c4:	d201      	bcs.n	80194ca <recv+0x122>
 80194c6:	89bb      	ldrh	r3, [r7, #12]
 80194c8:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80194ca:	88ba      	ldrh	r2, [r7, #4]
 80194cc:	79fb      	ldrb	r3, [r7, #7]
 80194ce:	6839      	ldr	r1, [r7, #0]
 80194d0:	4618      	mov	r0, r3
 80194d2:	f7ff fa9d 	bl	8018a10 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80194d6:	79fb      	ldrb	r3, [r7, #7]
 80194d8:	009b      	lsls	r3, r3, #2
 80194da:	3301      	adds	r3, #1
 80194dc:	00db      	lsls	r3, r3, #3
 80194de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80194e2:	2140      	movs	r1, #64	; 0x40
 80194e4:	4618      	mov	r0, r3
 80194e6:	f7ff f893 	bl	8018610 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80194ea:	bf00      	nop
 80194ec:	79fb      	ldrb	r3, [r7, #7]
 80194ee:	009b      	lsls	r3, r3, #2
 80194f0:	3301      	adds	r3, #1
 80194f2:	00db      	lsls	r3, r3, #3
 80194f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80194f8:	4618      	mov	r0, r3
 80194fa:	f7ff f83d 	bl	8018578 <WIZCHIP_READ>
 80194fe:	4603      	mov	r3, r0
 8019500:	2b00      	cmp	r3, #0
 8019502:	d1f3      	bne.n	80194ec <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019504:	88bb      	ldrh	r3, [r7, #4]
}
 8019506:	4618      	mov	r0, r3
 8019508:	3714      	adds	r7, #20
 801950a:	46bd      	mov	sp, r7
 801950c:	bd90      	pop	{r4, r7, pc}
 801950e:	bf00      	nop
 8019510:	20000964 	.word	0x20000964

08019514 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8019514:	b580      	push	{r7, lr}
 8019516:	b086      	sub	sp, #24
 8019518:	af00      	add	r7, sp, #0
 801951a:	60b9      	str	r1, [r7, #8]
 801951c:	607b      	str	r3, [r7, #4]
 801951e:	4603      	mov	r3, r0
 8019520:	73fb      	strb	r3, [r7, #15]
 8019522:	4613      	mov	r3, r2
 8019524:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8019526:	2300      	movs	r3, #0
 8019528:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 801952a:	2300      	movs	r3, #0
 801952c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 801952e:	7bfb      	ldrb	r3, [r7, #15]
 8019530:	2b08      	cmp	r3, #8
 8019532:	d902      	bls.n	801953a <sendto+0x26>
 8019534:	f04f 33ff 	mov.w	r3, #4294967295
 8019538:	e11b      	b.n	8019772 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 801953a:	7bfb      	ldrb	r3, [r7, #15]
 801953c:	009b      	lsls	r3, r3, #2
 801953e:	3301      	adds	r3, #1
 8019540:	00db      	lsls	r3, r3, #3
 8019542:	4618      	mov	r0, r3
 8019544:	f7ff f818 	bl	8018578 <WIZCHIP_READ>
 8019548:	4603      	mov	r3, r0
 801954a:	f003 030f 	and.w	r3, r3, #15
 801954e:	3b02      	subs	r3, #2
 8019550:	2b02      	cmp	r3, #2
 8019552:	d902      	bls.n	801955a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019554:	f06f 0304 	mvn.w	r3, #4
 8019558:	e10b      	b.n	8019772 <sendto+0x25e>
         break;
 801955a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 801955c:	89bb      	ldrh	r3, [r7, #12]
 801955e:	2b00      	cmp	r3, #0
 8019560:	d102      	bne.n	8019568 <sendto+0x54>
 8019562:	f06f 030d 	mvn.w	r3, #13
 8019566:	e104      	b.n	8019772 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	781b      	ldrb	r3, [r3, #0]
 801956c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 801956e:	693b      	ldr	r3, [r7, #16]
 8019570:	021b      	lsls	r3, r3, #8
 8019572:	687a      	ldr	r2, [r7, #4]
 8019574:	3201      	adds	r2, #1
 8019576:	7812      	ldrb	r2, [r2, #0]
 8019578:	4413      	add	r3, r2
 801957a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 801957c:	693b      	ldr	r3, [r7, #16]
 801957e:	021b      	lsls	r3, r3, #8
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	3202      	adds	r2, #2
 8019584:	7812      	ldrb	r2, [r2, #0]
 8019586:	4413      	add	r3, r2
 8019588:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 801958a:	693b      	ldr	r3, [r7, #16]
 801958c:	021b      	lsls	r3, r3, #8
 801958e:	687a      	ldr	r2, [r7, #4]
 8019590:	3203      	adds	r2, #3
 8019592:	7812      	ldrb	r2, [r2, #0]
 8019594:	4413      	add	r3, r2
 8019596:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8019598:	693b      	ldr	r3, [r7, #16]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d10e      	bne.n	80195bc <sendto+0xa8>
 801959e:	7bfb      	ldrb	r3, [r7, #15]
 80195a0:	009b      	lsls	r3, r3, #2
 80195a2:	3301      	adds	r3, #1
 80195a4:	00db      	lsls	r3, r3, #3
 80195a6:	4618      	mov	r0, r3
 80195a8:	f7fe ffe6 	bl	8018578 <WIZCHIP_READ>
 80195ac:	4603      	mov	r3, r0
 80195ae:	f003 0304 	and.w	r3, r3, #4
 80195b2:	2b04      	cmp	r3, #4
 80195b4:	d002      	beq.n	80195bc <sendto+0xa8>
 80195b6:	f06f 030b 	mvn.w	r3, #11
 80195ba:	e0da      	b.n	8019772 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80195bc:	8c3b      	ldrh	r3, [r7, #32]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d10e      	bne.n	80195e0 <sendto+0xcc>
 80195c2:	7bfb      	ldrb	r3, [r7, #15]
 80195c4:	009b      	lsls	r3, r3, #2
 80195c6:	3301      	adds	r3, #1
 80195c8:	00db      	lsls	r3, r3, #3
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7fe ffd4 	bl	8018578 <WIZCHIP_READ>
 80195d0:	4603      	mov	r3, r0
 80195d2:	f003 0304 	and.w	r3, r3, #4
 80195d6:	2b04      	cmp	r3, #4
 80195d8:	d002      	beq.n	80195e0 <sendto+0xcc>
 80195da:	f06f 030a 	mvn.w	r3, #10
 80195de:	e0c8      	b.n	8019772 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80195e0:	7bfb      	ldrb	r3, [r7, #15]
 80195e2:	009b      	lsls	r3, r3, #2
 80195e4:	3301      	adds	r3, #1
 80195e6:	00db      	lsls	r3, r3, #3
 80195e8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80195ec:	4618      	mov	r0, r3
 80195ee:	f7fe ffc3 	bl	8018578 <WIZCHIP_READ>
 80195f2:	4603      	mov	r3, r0
 80195f4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80195f6:	7dfb      	ldrb	r3, [r7, #23]
 80195f8:	2b42      	cmp	r3, #66	; 0x42
 80195fa:	d008      	beq.n	801960e <sendto+0xfa>
 80195fc:	7dfb      	ldrb	r3, [r7, #23]
 80195fe:	2b22      	cmp	r3, #34	; 0x22
 8019600:	d005      	beq.n	801960e <sendto+0xfa>
 8019602:	7dfb      	ldrb	r3, [r7, #23]
 8019604:	2b32      	cmp	r3, #50	; 0x32
 8019606:	d002      	beq.n	801960e <sendto+0xfa>
 8019608:	f06f 0306 	mvn.w	r3, #6
 801960c:	e0b1      	b.n	8019772 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 801960e:	7bfb      	ldrb	r3, [r7, #15]
 8019610:	009b      	lsls	r3, r3, #2
 8019612:	3301      	adds	r3, #1
 8019614:	00db      	lsls	r3, r3, #3
 8019616:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 801961a:	2204      	movs	r2, #4
 801961c:	6879      	ldr	r1, [r7, #4]
 801961e:	4618      	mov	r0, r3
 8019620:	f7ff f8a4 	bl	801876c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8019624:	7bfb      	ldrb	r3, [r7, #15]
 8019626:	009b      	lsls	r3, r3, #2
 8019628:	3301      	adds	r3, #1
 801962a:	00db      	lsls	r3, r3, #3
 801962c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019630:	461a      	mov	r2, r3
 8019632:	8c3b      	ldrh	r3, [r7, #32]
 8019634:	0a1b      	lsrs	r3, r3, #8
 8019636:	b29b      	uxth	r3, r3
 8019638:	b2db      	uxtb	r3, r3
 801963a:	4619      	mov	r1, r3
 801963c:	4610      	mov	r0, r2
 801963e:	f7fe ffe7 	bl	8018610 <WIZCHIP_WRITE>
 8019642:	7bfb      	ldrb	r3, [r7, #15]
 8019644:	009b      	lsls	r3, r3, #2
 8019646:	3301      	adds	r3, #1
 8019648:	00db      	lsls	r3, r3, #3
 801964a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 801964e:	461a      	mov	r2, r3
 8019650:	8c3b      	ldrh	r3, [r7, #32]
 8019652:	b2db      	uxtb	r3, r3
 8019654:	4619      	mov	r1, r3
 8019656:	4610      	mov	r0, r2
 8019658:	f7fe ffda 	bl	8018610 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 801965c:	7bfb      	ldrb	r3, [r7, #15]
 801965e:	009b      	lsls	r3, r3, #2
 8019660:	3301      	adds	r3, #1
 8019662:	00db      	lsls	r3, r3, #3
 8019664:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019668:	4618      	mov	r0, r3
 801966a:	f7fe ff85 	bl	8018578 <WIZCHIP_READ>
 801966e:	4603      	mov	r3, r0
 8019670:	b29b      	uxth	r3, r3
 8019672:	029b      	lsls	r3, r3, #10
 8019674:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8019676:	89ba      	ldrh	r2, [r7, #12]
 8019678:	8abb      	ldrh	r3, [r7, #20]
 801967a:	429a      	cmp	r2, r3
 801967c:	d901      	bls.n	8019682 <sendto+0x16e>
 801967e:	8abb      	ldrh	r3, [r7, #20]
 8019680:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8019682:	7bfb      	ldrb	r3, [r7, #15]
 8019684:	4618      	mov	r0, r3
 8019686:	f7ff f8d1 	bl	801882c <getSn_TX_FSR>
 801968a:	4603      	mov	r3, r0
 801968c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 801968e:	7bfb      	ldrb	r3, [r7, #15]
 8019690:	009b      	lsls	r3, r3, #2
 8019692:	3301      	adds	r3, #1
 8019694:	00db      	lsls	r3, r3, #3
 8019696:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801969a:	4618      	mov	r0, r3
 801969c:	f7fe ff6c 	bl	8018578 <WIZCHIP_READ>
 80196a0:	4603      	mov	r3, r0
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d102      	bne.n	80196ac <sendto+0x198>
 80196a6:	f06f 0303 	mvn.w	r3, #3
 80196aa:	e062      	b.n	8019772 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80196ac:	4b33      	ldr	r3, [pc, #204]	; (801977c <sendto+0x268>)
 80196ae:	881b      	ldrh	r3, [r3, #0]
 80196b0:	461a      	mov	r2, r3
 80196b2:	7bfb      	ldrb	r3, [r7, #15]
 80196b4:	fa42 f303 	asr.w	r3, r2, r3
 80196b8:	f003 0301 	and.w	r3, r3, #1
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d005      	beq.n	80196cc <sendto+0x1b8>
 80196c0:	89ba      	ldrh	r2, [r7, #12]
 80196c2:	8abb      	ldrh	r3, [r7, #20]
 80196c4:	429a      	cmp	r2, r3
 80196c6:	d901      	bls.n	80196cc <sendto+0x1b8>
 80196c8:	2300      	movs	r3, #0
 80196ca:	e052      	b.n	8019772 <sendto+0x25e>
      if(len <= freesize) break;
 80196cc:	89ba      	ldrh	r2, [r7, #12]
 80196ce:	8abb      	ldrh	r3, [r7, #20]
 80196d0:	429a      	cmp	r2, r3
 80196d2:	d900      	bls.n	80196d6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80196d4:	e7d5      	b.n	8019682 <sendto+0x16e>
      if(len <= freesize) break;
 80196d6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80196d8:	89ba      	ldrh	r2, [r7, #12]
 80196da:	7bfb      	ldrb	r3, [r7, #15]
 80196dc:	68b9      	ldr	r1, [r7, #8]
 80196de:	4618      	mov	r0, r3
 80196e0:	f7ff f93a 	bl	8018958 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80196e4:	7bfb      	ldrb	r3, [r7, #15]
 80196e6:	009b      	lsls	r3, r3, #2
 80196e8:	3301      	adds	r3, #1
 80196ea:	00db      	lsls	r3, r3, #3
 80196ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80196f0:	2120      	movs	r1, #32
 80196f2:	4618      	mov	r0, r3
 80196f4:	f7fe ff8c 	bl	8018610 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80196f8:	bf00      	nop
 80196fa:	7bfb      	ldrb	r3, [r7, #15]
 80196fc:	009b      	lsls	r3, r3, #2
 80196fe:	3301      	adds	r3, #1
 8019700:	00db      	lsls	r3, r3, #3
 8019702:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019706:	4618      	mov	r0, r3
 8019708:	f7fe ff36 	bl	8018578 <WIZCHIP_READ>
 801970c:	4603      	mov	r3, r0
 801970e:	2b00      	cmp	r3, #0
 8019710:	d1f3      	bne.n	80196fa <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8019712:	7bfb      	ldrb	r3, [r7, #15]
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	3301      	adds	r3, #1
 8019718:	00db      	lsls	r3, r3, #3
 801971a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801971e:	4618      	mov	r0, r3
 8019720:	f7fe ff2a 	bl	8018578 <WIZCHIP_READ>
 8019724:	4603      	mov	r3, r0
 8019726:	f003 031f 	and.w	r3, r3, #31
 801972a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 801972c:	7dfb      	ldrb	r3, [r7, #23]
 801972e:	f003 0310 	and.w	r3, r3, #16
 8019732:	2b00      	cmp	r3, #0
 8019734:	d00c      	beq.n	8019750 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019736:	7bfb      	ldrb	r3, [r7, #15]
 8019738:	009b      	lsls	r3, r3, #2
 801973a:	3301      	adds	r3, #1
 801973c:	00db      	lsls	r3, r3, #3
 801973e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019742:	2110      	movs	r1, #16
 8019744:	4618      	mov	r0, r3
 8019746:	f7fe ff63 	bl	8018610 <WIZCHIP_WRITE>
         break;
 801974a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801974c:	89bb      	ldrh	r3, [r7, #12]
 801974e:	e010      	b.n	8019772 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8019750:	7dfb      	ldrb	r3, [r7, #23]
 8019752:	f003 0308 	and.w	r3, r3, #8
 8019756:	2b00      	cmp	r3, #0
 8019758:	d0db      	beq.n	8019712 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 801975a:	7bfb      	ldrb	r3, [r7, #15]
 801975c:	009b      	lsls	r3, r3, #2
 801975e:	3301      	adds	r3, #1
 8019760:	00db      	lsls	r3, r3, #3
 8019762:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019766:	2108      	movs	r1, #8
 8019768:	4618      	mov	r0, r3
 801976a:	f7fe ff51 	bl	8018610 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 801976e:	f06f 030c 	mvn.w	r3, #12
}
 8019772:	4618      	mov	r0, r3
 8019774:	3718      	adds	r7, #24
 8019776:	46bd      	mov	sp, r7
 8019778:	bd80      	pop	{r7, pc}
 801977a:	bf00      	nop
 801977c:	20000964 	.word	0x20000964

08019780 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b088      	sub	sp, #32
 8019784:	af00      	add	r7, sp, #0
 8019786:	60b9      	str	r1, [r7, #8]
 8019788:	607b      	str	r3, [r7, #4]
 801978a:	4603      	mov	r3, r0
 801978c:	73fb      	strb	r3, [r7, #15]
 801978e:	4613      	mov	r3, r2
 8019790:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8019792:	2300      	movs	r3, #0
 8019794:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019796:	7bfb      	ldrb	r3, [r7, #15]
 8019798:	2b08      	cmp	r3, #8
 801979a:	d902      	bls.n	80197a2 <recvfrom+0x22>
 801979c:	f04f 33ff 	mov.w	r3, #4294967295
 80197a0:	e1d4      	b.n	8019b4c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80197a2:	7bfb      	ldrb	r3, [r7, #15]
 80197a4:	009b      	lsls	r3, r3, #2
 80197a6:	3301      	adds	r3, #1
 80197a8:	00db      	lsls	r3, r3, #3
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7fe fee4 	bl	8018578 <WIZCHIP_READ>
 80197b0:	4603      	mov	r3, r0
 80197b2:	777b      	strb	r3, [r7, #29]
 80197b4:	7f7b      	ldrb	r3, [r7, #29]
 80197b6:	f003 030f 	and.w	r3, r3, #15
 80197ba:	3b02      	subs	r3, #2
 80197bc:	2b02      	cmp	r3, #2
 80197be:	d902      	bls.n	80197c6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80197c0:	f06f 0304 	mvn.w	r3, #4
 80197c4:	e1c2      	b.n	8019b4c <recvfrom+0x3cc>
         break;
 80197c6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80197c8:	89bb      	ldrh	r3, [r7, #12]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d102      	bne.n	80197d4 <recvfrom+0x54>
 80197ce:	f06f 030d 	mvn.w	r3, #13
 80197d2:	e1bb      	b.n	8019b4c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80197d4:	7bfb      	ldrb	r3, [r7, #15]
 80197d6:	4a88      	ldr	r2, [pc, #544]	; (80199f8 <recvfrom+0x278>)
 80197d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d128      	bne.n	8019832 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80197e0:	7bfb      	ldrb	r3, [r7, #15]
 80197e2:	4618      	mov	r0, r3
 80197e4:	f7ff f86d 	bl	80188c2 <getSn_RX_RSR>
 80197e8:	4603      	mov	r3, r0
 80197ea:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80197ec:	7bfb      	ldrb	r3, [r7, #15]
 80197ee:	009b      	lsls	r3, r3, #2
 80197f0:	3301      	adds	r3, #1
 80197f2:	00db      	lsls	r3, r3, #3
 80197f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7fe febd 	bl	8018578 <WIZCHIP_READ>
 80197fe:	4603      	mov	r3, r0
 8019800:	2b00      	cmp	r3, #0
 8019802:	d102      	bne.n	801980a <recvfrom+0x8a>
 8019804:	f06f 0303 	mvn.w	r3, #3
 8019808:	e1a0      	b.n	8019b4c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 801980a:	4b7c      	ldr	r3, [pc, #496]	; (80199fc <recvfrom+0x27c>)
 801980c:	881b      	ldrh	r3, [r3, #0]
 801980e:	461a      	mov	r2, r3
 8019810:	7bfb      	ldrb	r3, [r7, #15]
 8019812:	fa42 f303 	asr.w	r3, r2, r3
 8019816:	f003 0301 	and.w	r3, r3, #1
 801981a:	2b00      	cmp	r3, #0
 801981c:	d004      	beq.n	8019828 <recvfrom+0xa8>
 801981e:	8bfb      	ldrh	r3, [r7, #30]
 8019820:	2b00      	cmp	r3, #0
 8019822:	d101      	bne.n	8019828 <recvfrom+0xa8>
 8019824:	2300      	movs	r3, #0
 8019826:	e191      	b.n	8019b4c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8019828:	8bfb      	ldrh	r3, [r7, #30]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d100      	bne.n	8019830 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 801982e:	e7d7      	b.n	80197e0 <recvfrom+0x60>
         if(pack_len != 0) break;
 8019830:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8019832:	7f7b      	ldrb	r3, [r7, #29]
 8019834:	f003 0307 	and.w	r3, r3, #7
 8019838:	2b04      	cmp	r3, #4
 801983a:	d079      	beq.n	8019930 <recvfrom+0x1b0>
 801983c:	2b04      	cmp	r3, #4
 801983e:	f300 8142 	bgt.w	8019ac6 <recvfrom+0x346>
 8019842:	2b02      	cmp	r3, #2
 8019844:	d003      	beq.n	801984e <recvfrom+0xce>
 8019846:	2b03      	cmp	r3, #3
 8019848:	f000 80dc 	beq.w	8019a04 <recvfrom+0x284>
 801984c:	e13b      	b.n	8019ac6 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 801984e:	7bfb      	ldrb	r3, [r7, #15]
 8019850:	4a69      	ldr	r2, [pc, #420]	; (80199f8 <recvfrom+0x278>)
 8019852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d152      	bne.n	8019900 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 801985a:	f107 0114 	add.w	r1, r7, #20
 801985e:	7bfb      	ldrb	r3, [r7, #15]
 8019860:	2208      	movs	r2, #8
 8019862:	4618      	mov	r0, r3
 8019864:	f7ff f8d4 	bl	8018a10 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019868:	7bfb      	ldrb	r3, [r7, #15]
 801986a:	009b      	lsls	r3, r3, #2
 801986c:	3301      	adds	r3, #1
 801986e:	00db      	lsls	r3, r3, #3
 8019870:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019874:	2140      	movs	r1, #64	; 0x40
 8019876:	4618      	mov	r0, r3
 8019878:	f7fe feca 	bl	8018610 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801987c:	bf00      	nop
 801987e:	7bfb      	ldrb	r3, [r7, #15]
 8019880:	009b      	lsls	r3, r3, #2
 8019882:	3301      	adds	r3, #1
 8019884:	00db      	lsls	r3, r3, #3
 8019886:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801988a:	4618      	mov	r0, r3
 801988c:	f7fe fe74 	bl	8018578 <WIZCHIP_READ>
 8019890:	4603      	mov	r3, r0
 8019892:	2b00      	cmp	r3, #0
 8019894:	d1f3      	bne.n	801987e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019896:	7d3a      	ldrb	r2, [r7, #20]
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	3301      	adds	r3, #1
 80198a0:	7d7a      	ldrb	r2, [r7, #21]
 80198a2:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	3302      	adds	r3, #2
 80198a8:	7dba      	ldrb	r2, [r7, #22]
 80198aa:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	3303      	adds	r3, #3
 80198b0:	7dfa      	ldrb	r2, [r7, #23]
 80198b2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80198b4:	7e3b      	ldrb	r3, [r7, #24]
 80198b6:	b29a      	uxth	r2, r3
 80198b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ba:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80198bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198be:	881b      	ldrh	r3, [r3, #0]
 80198c0:	021b      	lsls	r3, r3, #8
 80198c2:	b29a      	uxth	r2, r3
 80198c4:	7e7b      	ldrb	r3, [r7, #25]
 80198c6:	b29b      	uxth	r3, r3
 80198c8:	4413      	add	r3, r2
 80198ca:	b29a      	uxth	r2, r3
 80198cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ce:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80198d0:	7eba      	ldrb	r2, [r7, #26]
 80198d2:	7bfb      	ldrb	r3, [r7, #15]
 80198d4:	b291      	uxth	r1, r2
 80198d6:	4a48      	ldr	r2, [pc, #288]	; (80199f8 <recvfrom+0x278>)
 80198d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80198dc:	7bfb      	ldrb	r3, [r7, #15]
 80198de:	4a46      	ldr	r2, [pc, #280]	; (80199f8 <recvfrom+0x278>)
 80198e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80198e4:	021b      	lsls	r3, r3, #8
 80198e6:	b299      	uxth	r1, r3
 80198e8:	7efb      	ldrb	r3, [r7, #27]
 80198ea:	b29a      	uxth	r2, r3
 80198ec:	7bfb      	ldrb	r3, [r7, #15]
 80198ee:	440a      	add	r2, r1
 80198f0:	b291      	uxth	r1, r2
 80198f2:	4a41      	ldr	r2, [pc, #260]	; (80199f8 <recvfrom+0x278>)
 80198f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80198f8:	7bfb      	ldrb	r3, [r7, #15]
 80198fa:	4a41      	ldr	r2, [pc, #260]	; (8019a00 <recvfrom+0x280>)
 80198fc:	2180      	movs	r1, #128	; 0x80
 80198fe:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019900:	7bfb      	ldrb	r3, [r7, #15]
 8019902:	4a3d      	ldr	r2, [pc, #244]	; (80199f8 <recvfrom+0x278>)
 8019904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019908:	89ba      	ldrh	r2, [r7, #12]
 801990a:	429a      	cmp	r2, r3
 801990c:	d202      	bcs.n	8019914 <recvfrom+0x194>
 801990e:	89bb      	ldrh	r3, [r7, #12]
 8019910:	83fb      	strh	r3, [r7, #30]
 8019912:	e004      	b.n	801991e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8019914:	7bfb      	ldrb	r3, [r7, #15]
 8019916:	4a38      	ldr	r2, [pc, #224]	; (80199f8 <recvfrom+0x278>)
 8019918:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801991c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 801991e:	8bfb      	ldrh	r3, [r7, #30]
 8019920:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019922:	8bfa      	ldrh	r2, [r7, #30]
 8019924:	7bfb      	ldrb	r3, [r7, #15]
 8019926:	68b9      	ldr	r1, [r7, #8]
 8019928:	4618      	mov	r0, r3
 801992a:	f7ff f871 	bl	8018a10 <wiz_recv_data>
			break;
 801992e:	e0d6      	b.n	8019ade <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8019930:	7bfb      	ldrb	r3, [r7, #15]
 8019932:	4a31      	ldr	r2, [pc, #196]	; (80199f8 <recvfrom+0x278>)
 8019934:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d146      	bne.n	80199ca <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 801993c:	f107 0114 	add.w	r1, r7, #20
 8019940:	7bfb      	ldrb	r3, [r7, #15]
 8019942:	2202      	movs	r2, #2
 8019944:	4618      	mov	r0, r3
 8019946:	f7ff f863 	bl	8018a10 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 801994a:	7bfb      	ldrb	r3, [r7, #15]
 801994c:	009b      	lsls	r3, r3, #2
 801994e:	3301      	adds	r3, #1
 8019950:	00db      	lsls	r3, r3, #3
 8019952:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019956:	2140      	movs	r1, #64	; 0x40
 8019958:	4618      	mov	r0, r3
 801995a:	f7fe fe59 	bl	8018610 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 801995e:	bf00      	nop
 8019960:	7bfb      	ldrb	r3, [r7, #15]
 8019962:	009b      	lsls	r3, r3, #2
 8019964:	3301      	adds	r3, #1
 8019966:	00db      	lsls	r3, r3, #3
 8019968:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801996c:	4618      	mov	r0, r3
 801996e:	f7fe fe03 	bl	8018578 <WIZCHIP_READ>
 8019972:	4603      	mov	r3, r0
 8019974:	2b00      	cmp	r3, #0
 8019976:	d1f3      	bne.n	8019960 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019978:	7d3a      	ldrb	r2, [r7, #20]
 801997a:	7bfb      	ldrb	r3, [r7, #15]
 801997c:	b291      	uxth	r1, r2
 801997e:	4a1e      	ldr	r2, [pc, #120]	; (80199f8 <recvfrom+0x278>)
 8019980:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019984:	7bfb      	ldrb	r3, [r7, #15]
 8019986:	4a1c      	ldr	r2, [pc, #112]	; (80199f8 <recvfrom+0x278>)
 8019988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801998c:	021b      	lsls	r3, r3, #8
 801998e:	b29a      	uxth	r2, r3
 8019990:	7d7b      	ldrb	r3, [r7, #21]
 8019992:	b29b      	uxth	r3, r3
 8019994:	4413      	add	r3, r2
 8019996:	b29a      	uxth	r2, r3
 8019998:	7bfb      	ldrb	r3, [r7, #15]
 801999a:	3a02      	subs	r2, #2
 801999c:	b291      	uxth	r1, r2
 801999e:	4a16      	ldr	r2, [pc, #88]	; (80199f8 <recvfrom+0x278>)
 80199a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80199a4:	7bfb      	ldrb	r3, [r7, #15]
 80199a6:	4a14      	ldr	r2, [pc, #80]	; (80199f8 <recvfrom+0x278>)
 80199a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199ac:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80199b0:	4293      	cmp	r3, r2
 80199b2:	d906      	bls.n	80199c2 <recvfrom+0x242>
   			{
   			   close(sn);
 80199b4:	7bfb      	ldrb	r3, [r7, #15]
 80199b6:	4618      	mov	r0, r3
 80199b8:	f7ff f9e2 	bl	8018d80 <close>
   			   return SOCKFATAL_PACKLEN;
 80199bc:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80199c0:	e0c4      	b.n	8019b4c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80199c2:	7bfb      	ldrb	r3, [r7, #15]
 80199c4:	4a0e      	ldr	r2, [pc, #56]	; (8019a00 <recvfrom+0x280>)
 80199c6:	2180      	movs	r1, #128	; 0x80
 80199c8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80199ca:	7bfb      	ldrb	r3, [r7, #15]
 80199cc:	4a0a      	ldr	r2, [pc, #40]	; (80199f8 <recvfrom+0x278>)
 80199ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199d2:	89ba      	ldrh	r2, [r7, #12]
 80199d4:	429a      	cmp	r2, r3
 80199d6:	d202      	bcs.n	80199de <recvfrom+0x25e>
 80199d8:	89bb      	ldrh	r3, [r7, #12]
 80199da:	83fb      	strh	r3, [r7, #30]
 80199dc:	e004      	b.n	80199e8 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80199de:	7bfb      	ldrb	r3, [r7, #15]
 80199e0:	4a05      	ldr	r2, [pc, #20]	; (80199f8 <recvfrom+0x278>)
 80199e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199e6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80199e8:	8bfa      	ldrh	r2, [r7, #30]
 80199ea:	7bfb      	ldrb	r3, [r7, #15]
 80199ec:	68b9      	ldr	r1, [r7, #8]
 80199ee:	4618      	mov	r0, r3
 80199f0:	f7ff f80e 	bl	8018a10 <wiz_recv_data>
		   break;
 80199f4:	e073      	b.n	8019ade <recvfrom+0x35e>
 80199f6:	bf00      	nop
 80199f8:	20000968 	.word	0x20000968
 80199fc:	20000964 	.word	0x20000964
 8019a00:	20000978 	.word	0x20000978
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8019a04:	7bfb      	ldrb	r3, [r7, #15]
 8019a06:	4a53      	ldr	r2, [pc, #332]	; (8019b54 <recvfrom+0x3d4>)
 8019a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d144      	bne.n	8019a9a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8019a10:	f107 0114 	add.w	r1, r7, #20
 8019a14:	7bfb      	ldrb	r3, [r7, #15]
 8019a16:	2206      	movs	r2, #6
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f7fe fff9 	bl	8018a10 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019a1e:	7bfb      	ldrb	r3, [r7, #15]
 8019a20:	009b      	lsls	r3, r3, #2
 8019a22:	3301      	adds	r3, #1
 8019a24:	00db      	lsls	r3, r3, #3
 8019a26:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a2a:	2140      	movs	r1, #64	; 0x40
 8019a2c:	4618      	mov	r0, r3
 8019a2e:	f7fe fdef 	bl	8018610 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019a32:	bf00      	nop
 8019a34:	7bfb      	ldrb	r3, [r7, #15]
 8019a36:	009b      	lsls	r3, r3, #2
 8019a38:	3301      	adds	r3, #1
 8019a3a:	00db      	lsls	r3, r3, #3
 8019a3c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a40:	4618      	mov	r0, r3
 8019a42:	f7fe fd99 	bl	8018578 <WIZCHIP_READ>
 8019a46:	4603      	mov	r3, r0
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d1f3      	bne.n	8019a34 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8019a4c:	7d3a      	ldrb	r2, [r7, #20]
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	3301      	adds	r3, #1
 8019a56:	7d7a      	ldrb	r2, [r7, #21]
 8019a58:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	3302      	adds	r3, #2
 8019a5e:	7dba      	ldrb	r2, [r7, #22]
 8019a60:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	3303      	adds	r3, #3
 8019a66:	7dfa      	ldrb	r2, [r7, #23]
 8019a68:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019a6a:	7e3a      	ldrb	r2, [r7, #24]
 8019a6c:	7bfb      	ldrb	r3, [r7, #15]
 8019a6e:	b291      	uxth	r1, r2
 8019a70:	4a38      	ldr	r2, [pc, #224]	; (8019b54 <recvfrom+0x3d4>)
 8019a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019a76:	7bfb      	ldrb	r3, [r7, #15]
 8019a78:	4a36      	ldr	r2, [pc, #216]	; (8019b54 <recvfrom+0x3d4>)
 8019a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a7e:	021b      	lsls	r3, r3, #8
 8019a80:	b299      	uxth	r1, r3
 8019a82:	7e7b      	ldrb	r3, [r7, #25]
 8019a84:	b29a      	uxth	r2, r3
 8019a86:	7bfb      	ldrb	r3, [r7, #15]
 8019a88:	440a      	add	r2, r1
 8019a8a:	b291      	uxth	r1, r2
 8019a8c:	4a31      	ldr	r2, [pc, #196]	; (8019b54 <recvfrom+0x3d4>)
 8019a8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8019a92:	7bfb      	ldrb	r3, [r7, #15]
 8019a94:	4a30      	ldr	r2, [pc, #192]	; (8019b58 <recvfrom+0x3d8>)
 8019a96:	2180      	movs	r1, #128	; 0x80
 8019a98:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019a9a:	7bfb      	ldrb	r3, [r7, #15]
 8019a9c:	4a2d      	ldr	r2, [pc, #180]	; (8019b54 <recvfrom+0x3d4>)
 8019a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019aa2:	89ba      	ldrh	r2, [r7, #12]
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	d202      	bcs.n	8019aae <recvfrom+0x32e>
 8019aa8:	89bb      	ldrh	r3, [r7, #12]
 8019aaa:	83fb      	strh	r3, [r7, #30]
 8019aac:	e004      	b.n	8019ab8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8019aae:	7bfb      	ldrb	r3, [r7, #15]
 8019ab0:	4a28      	ldr	r2, [pc, #160]	; (8019b54 <recvfrom+0x3d4>)
 8019ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019ab6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019ab8:	8bfa      	ldrh	r2, [r7, #30]
 8019aba:	7bfb      	ldrb	r3, [r7, #15]
 8019abc:	68b9      	ldr	r1, [r7, #8]
 8019abe:	4618      	mov	r0, r3
 8019ac0:	f7fe ffa6 	bl	8018a10 <wiz_recv_data>
			break;
 8019ac4:	e00b      	b.n	8019ade <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019ac6:	8bfa      	ldrh	r2, [r7, #30]
 8019ac8:	7bfb      	ldrb	r3, [r7, #15]
 8019aca:	4611      	mov	r1, r2
 8019acc:	4618      	mov	r0, r3
 8019ace:	f7fe fffb 	bl	8018ac8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8019ad2:	7bfb      	ldrb	r3, [r7, #15]
 8019ad4:	491f      	ldr	r1, [pc, #124]	; (8019b54 <recvfrom+0x3d4>)
 8019ad6:	8bfa      	ldrh	r2, [r7, #30]
 8019ad8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019adc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8019ade:	7bfb      	ldrb	r3, [r7, #15]
 8019ae0:	009b      	lsls	r3, r3, #2
 8019ae2:	3301      	adds	r3, #1
 8019ae4:	00db      	lsls	r3, r3, #3
 8019ae6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019aea:	2140      	movs	r1, #64	; 0x40
 8019aec:	4618      	mov	r0, r3
 8019aee:	f7fe fd8f 	bl	8018610 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8019af2:	bf00      	nop
 8019af4:	7bfb      	ldrb	r3, [r7, #15]
 8019af6:	009b      	lsls	r3, r3, #2
 8019af8:	3301      	adds	r3, #1
 8019afa:	00db      	lsls	r3, r3, #3
 8019afc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019b00:	4618      	mov	r0, r3
 8019b02:	f7fe fd39 	bl	8018578 <WIZCHIP_READ>
 8019b06:	4603      	mov	r3, r0
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	d1f3      	bne.n	8019af4 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8019b0c:	7bfb      	ldrb	r3, [r7, #15]
 8019b0e:	4a11      	ldr	r2, [pc, #68]	; (8019b54 <recvfrom+0x3d4>)
 8019b10:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8019b14:	7bfb      	ldrb	r3, [r7, #15]
 8019b16:	8bfa      	ldrh	r2, [r7, #30]
 8019b18:	1a8a      	subs	r2, r1, r2
 8019b1a:	b291      	uxth	r1, r2
 8019b1c:	4a0d      	ldr	r2, [pc, #52]	; (8019b54 <recvfrom+0x3d4>)
 8019b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8019b22:	7bfb      	ldrb	r3, [r7, #15]
 8019b24:	4a0b      	ldr	r2, [pc, #44]	; (8019b54 <recvfrom+0x3d4>)
 8019b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d009      	beq.n	8019b42 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8019b2e:	7bfb      	ldrb	r3, [r7, #15]
 8019b30:	4a09      	ldr	r2, [pc, #36]	; (8019b58 <recvfrom+0x3d8>)
 8019b32:	5cd2      	ldrb	r2, [r2, r3]
 8019b34:	7bfb      	ldrb	r3, [r7, #15]
 8019b36:	f042 0201 	orr.w	r2, r2, #1
 8019b3a:	b2d1      	uxtb	r1, r2
 8019b3c:	4a06      	ldr	r2, [pc, #24]	; (8019b58 <recvfrom+0x3d8>)
 8019b3e:	54d1      	strb	r1, [r2, r3]
 8019b40:	e003      	b.n	8019b4a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8019b42:	7bfb      	ldrb	r3, [r7, #15]
 8019b44:	4a04      	ldr	r2, [pc, #16]	; (8019b58 <recvfrom+0x3d8>)
 8019b46:	2100      	movs	r1, #0
 8019b48:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019b4a:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b4c:	4618      	mov	r0, r3
 8019b4e:	3720      	adds	r7, #32
 8019b50:	46bd      	mov	sp, r7
 8019b52:	bd80      	pop	{r7, pc}
 8019b54:	20000968 	.word	0x20000968
 8019b58:	20000978 	.word	0x20000978

08019b5c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019b5c:	b480      	push	{r7}
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	bf00      	nop
 8019b62:	46bd      	mov	sp, r7
 8019b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b68:	4770      	bx	lr

08019b6a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019b6a:	b480      	push	{r7}
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	bf00      	nop
 8019b70:	46bd      	mov	sp, r7
 8019b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b76:	4770      	bx	lr

08019b78 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019b78:	b480      	push	{r7}
 8019b7a:	af00      	add	r7, sp, #0
 8019b7c:	bf00      	nop
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b84:	4770      	bx	lr

08019b86 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019b86:	b480      	push	{r7}
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	bf00      	nop
 8019b8c:	46bd      	mov	sp, r7
 8019b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b92:	4770      	bx	lr

08019b94 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019b94:	b480      	push	{r7}
 8019b96:	b083      	sub	sp, #12
 8019b98:	af00      	add	r7, sp, #0
 8019b9a:	6078      	str	r0, [r7, #4]
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	781b      	ldrb	r3, [r3, #0]
 8019ba0:	b2db      	uxtb	r3, r3
 8019ba2:	4618      	mov	r0, r3
 8019ba4:	370c      	adds	r7, #12
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bac:	4770      	bx	lr

08019bae <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8019bae:	b480      	push	{r7}
 8019bb0:	b083      	sub	sp, #12
 8019bb2:	af00      	add	r7, sp, #0
 8019bb4:	6078      	str	r0, [r7, #4]
 8019bb6:	460b      	mov	r3, r1
 8019bb8:	70fb      	strb	r3, [r7, #3]
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	78fa      	ldrb	r2, [r7, #3]
 8019bbe:	701a      	strb	r2, [r3, #0]
 8019bc0:	bf00      	nop
 8019bc2:	370c      	adds	r7, #12
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bca:	4770      	bx	lr

08019bcc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019bcc:	b480      	push	{r7}
 8019bce:	af00      	add	r7, sp, #0
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	46bd      	mov	sp, r7
 8019bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bda:	4770      	bx	lr

08019bdc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019bdc:	b480      	push	{r7}
 8019bde:	b083      	sub	sp, #12
 8019be0:	af00      	add	r7, sp, #0
 8019be2:	4603      	mov	r3, r0
 8019be4:	71fb      	strb	r3, [r7, #7]
 8019be6:	bf00      	nop
 8019be8:	370c      	adds	r7, #12
 8019bea:	46bd      	mov	sp, r7
 8019bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf0:	4770      	bx	lr
	...

08019bf4 <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8019bf4:	b480      	push	{r7}
 8019bf6:	b083      	sub	sp, #12
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
 8019bfc:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d002      	beq.n	8019c0a <reg_wizchip_cris_cbfunc+0x16>
 8019c04:	683b      	ldr	r3, [r7, #0]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d106      	bne.n	8019c18 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8019c0a:	4b0a      	ldr	r3, [pc, #40]	; (8019c34 <reg_wizchip_cris_cbfunc+0x40>)
 8019c0c:	4a0a      	ldr	r2, [pc, #40]	; (8019c38 <reg_wizchip_cris_cbfunc+0x44>)
 8019c0e:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8019c10:	4b08      	ldr	r3, [pc, #32]	; (8019c34 <reg_wizchip_cris_cbfunc+0x40>)
 8019c12:	4a0a      	ldr	r2, [pc, #40]	; (8019c3c <reg_wizchip_cris_cbfunc+0x48>)
 8019c14:	611a      	str	r2, [r3, #16]
 8019c16:	e006      	b.n	8019c26 <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8019c18:	4a06      	ldr	r2, [pc, #24]	; (8019c34 <reg_wizchip_cris_cbfunc+0x40>)
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8019c1e:	4a05      	ldr	r2, [pc, #20]	; (8019c34 <reg_wizchip_cris_cbfunc+0x40>)
 8019c20:	683b      	ldr	r3, [r7, #0]
 8019c22:	6113      	str	r3, [r2, #16]
   }
}
 8019c24:	bf00      	nop
 8019c26:	bf00      	nop
 8019c28:	370c      	adds	r7, #12
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c30:	4770      	bx	lr
 8019c32:	bf00      	nop
 8019c34:	200000c4 	.word	0x200000c4
 8019c38:	08019b5d 	.word	0x08019b5d
 8019c3c:	08019b6b 	.word	0x08019b6b

08019c40 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8019c40:	b480      	push	{r7}
 8019c42:	b083      	sub	sp, #12
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	6078      	str	r0, [r7, #4]
 8019c48:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d002      	beq.n	8019c56 <reg_wizchip_cs_cbfunc+0x16>
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d106      	bne.n	8019c64 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8019c56:	4b0a      	ldr	r3, [pc, #40]	; (8019c80 <reg_wizchip_cs_cbfunc+0x40>)
 8019c58:	4a0a      	ldr	r2, [pc, #40]	; (8019c84 <reg_wizchip_cs_cbfunc+0x44>)
 8019c5a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8019c5c:	4b08      	ldr	r3, [pc, #32]	; (8019c80 <reg_wizchip_cs_cbfunc+0x40>)
 8019c5e:	4a0a      	ldr	r2, [pc, #40]	; (8019c88 <reg_wizchip_cs_cbfunc+0x48>)
 8019c60:	619a      	str	r2, [r3, #24]
 8019c62:	e006      	b.n	8019c72 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8019c64:	4a06      	ldr	r2, [pc, #24]	; (8019c80 <reg_wizchip_cs_cbfunc+0x40>)
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8019c6a:	4a05      	ldr	r2, [pc, #20]	; (8019c80 <reg_wizchip_cs_cbfunc+0x40>)
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	6193      	str	r3, [r2, #24]
   }
}
 8019c70:	bf00      	nop
 8019c72:	bf00      	nop
 8019c74:	370c      	adds	r7, #12
 8019c76:	46bd      	mov	sp, r7
 8019c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7c:	4770      	bx	lr
 8019c7e:	bf00      	nop
 8019c80:	200000c4 	.word	0x200000c4
 8019c84:	08019b79 	.word	0x08019b79
 8019c88:	08019b87 	.word	0x08019b87

08019c8c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	b083      	sub	sp, #12
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
 8019c94:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8019c96:	bf00      	nop
 8019c98:	4b0f      	ldr	r3, [pc, #60]	; (8019cd8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019c9a:	881b      	ldrh	r3, [r3, #0]
 8019c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019ca0:	2b00      	cmp	r3, #0
 8019ca2:	d0f9      	beq.n	8019c98 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d002      	beq.n	8019cb0 <reg_wizchip_spi_cbfunc+0x24>
 8019caa:	683b      	ldr	r3, [r7, #0]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d106      	bne.n	8019cbe <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8019cb0:	4b09      	ldr	r3, [pc, #36]	; (8019cd8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019cb2:	4a0a      	ldr	r2, [pc, #40]	; (8019cdc <reg_wizchip_spi_cbfunc+0x50>)
 8019cb4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8019cb6:	4b08      	ldr	r3, [pc, #32]	; (8019cd8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019cb8:	4a09      	ldr	r2, [pc, #36]	; (8019ce0 <reg_wizchip_spi_cbfunc+0x54>)
 8019cba:	621a      	str	r2, [r3, #32]
 8019cbc:	e006      	b.n	8019ccc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8019cbe:	4a06      	ldr	r2, [pc, #24]	; (8019cd8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8019cc4:	4a04      	ldr	r2, [pc, #16]	; (8019cd8 <reg_wizchip_spi_cbfunc+0x4c>)
 8019cc6:	683b      	ldr	r3, [r7, #0]
 8019cc8:	6213      	str	r3, [r2, #32]
   }
}
 8019cca:	bf00      	nop
 8019ccc:	bf00      	nop
 8019cce:	370c      	adds	r7, #12
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd6:	4770      	bx	lr
 8019cd8:	200000c4 	.word	0x200000c4
 8019cdc:	08019bcd 	.word	0x08019bcd
 8019ce0:	08019bdd 	.word	0x08019bdd

08019ce4 <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8019ce4:	b590      	push	{r4, r7, lr}
 8019ce6:	b087      	sub	sp, #28
 8019ce8:	af00      	add	r7, sp, #0
 8019cea:	4603      	mov	r3, r0
 8019cec:	6039      	str	r1, [r7, #0]
 8019cee:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8019cf0:	2300      	movs	r3, #0
 8019cf2:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	60fb      	str	r3, [r7, #12]
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8019cfc:	79fb      	ldrb	r3, [r7, #7]
 8019cfe:	2b0f      	cmp	r3, #15
 8019d00:	f200 80c7 	bhi.w	8019e92 <ctlwizchip+0x1ae>
 8019d04:	a201      	add	r2, pc, #4	; (adr r2, 8019d0c <ctlwizchip+0x28>)
 8019d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d0a:	bf00      	nop
 8019d0c:	08019d4d 	.word	0x08019d4d
 8019d10:	08019d53 	.word	0x08019d53
 8019d14:	08019d7f 	.word	0x08019d7f
 8019d18:	08019d73 	.word	0x08019d73
 8019d1c:	08019d8d 	.word	0x08019d8d
 8019d20:	08019d99 	.word	0x08019d99
 8019d24:	08019da7 	.word	0x08019da7
 8019d28:	08019dcd 	.word	0x08019dcd
 8019d2c:	08019df3 	.word	0x08019df3
 8019d30:	08019e37 	.word	0x08019e37
 8019d34:	08019e3d 	.word	0x08019e3d
 8019d38:	08019e45 	.word	0x08019e45
 8019d3c:	08019e99 	.word	0x08019e99
 8019d40:	08019e4d 	.word	0x08019e4d
 8019d44:	08019e5b 	.word	0x08019e5b
 8019d48:	08019e77 	.word	0x08019e77
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8019d4c:	f000 f8ea 	bl	8019f24 <wizchip_sw_reset>
         break;
 8019d50:	e0a3      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	2b00      	cmp	r3, #0
 8019d56:	d004      	beq.n	8019d62 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8019d58:	683b      	ldr	r3, [r7, #0]
 8019d5a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	3308      	adds	r3, #8
 8019d60:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8019d62:	68fb      	ldr	r3, [r7, #12]
 8019d64:	693a      	ldr	r2, [r7, #16]
 8019d66:	4611      	mov	r1, r2
 8019d68:	4618      	mov	r0, r3
 8019d6a:	f000 f927 	bl	8019fbc <wizchip_init>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	e094      	b.n	8019e9c <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8019d72:	683b      	ldr	r3, [r7, #0]
 8019d74:	881b      	ldrh	r3, [r3, #0]
 8019d76:	4618      	mov	r0, r3
 8019d78:	f000 f9ac 	bl	801a0d4 <wizchip_clrinterrupt>
         break;
 8019d7c:	e08d      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8019d7e:	f000 f9dd 	bl	801a13c <wizchip_getinterrupt>
 8019d82:	4603      	mov	r3, r0
 8019d84:	461a      	mov	r2, r3
 8019d86:	683b      	ldr	r3, [r7, #0]
 8019d88:	801a      	strh	r2, [r3, #0]
         break;
 8019d8a:	e086      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8019d8c:	683b      	ldr	r3, [r7, #0]
 8019d8e:	881b      	ldrh	r3, [r3, #0]
 8019d90:	4618      	mov	r0, r3
 8019d92:	f000 f9f8 	bl	801a186 <wizchip_setinterruptmask>
         break;         
 8019d96:	e080      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8019d98:	f000 fa10 	bl	801a1bc <wizchip_getinterruptmask>
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	461a      	mov	r2, r3
 8019da0:	683b      	ldr	r3, [r7, #0]
 8019da2:	801a      	strh	r2, [r3, #0]
         break;
 8019da4:	e079      	b.n	8019e9a <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8019da6:	683b      	ldr	r3, [r7, #0]
 8019da8:	881b      	ldrh	r3, [r3, #0]
 8019daa:	0a1b      	lsrs	r3, r3, #8
 8019dac:	b29b      	uxth	r3, r3
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	4619      	mov	r1, r3
 8019db2:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019db6:	f7fe fc2b 	bl	8018610 <WIZCHIP_WRITE>
 8019dba:	683b      	ldr	r3, [r7, #0]
 8019dbc:	881b      	ldrh	r3, [r3, #0]
 8019dbe:	b2db      	uxtb	r3, r3
 8019dc0:	4619      	mov	r1, r3
 8019dc2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019dc6:	f7fe fc23 	bl	8018610 <WIZCHIP_WRITE>
         break;
 8019dca:	e066      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8019dcc:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8019dd0:	f7fe fbd2 	bl	8018578 <WIZCHIP_READ>
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	b29b      	uxth	r3, r3
 8019dd8:	021b      	lsls	r3, r3, #8
 8019dda:	b29c      	uxth	r4, r3
 8019ddc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8019de0:	f7fe fbca 	bl	8018578 <WIZCHIP_READ>
 8019de4:	4603      	mov	r3, r0
 8019de6:	b29b      	uxth	r3, r3
 8019de8:	4423      	add	r3, r4
 8019dea:	b29a      	uxth	r2, r3
 8019dec:	683b      	ldr	r3, [r7, #0]
 8019dee:	801a      	strh	r2, [r3, #0]
         break;
 8019df0:	e053      	b.n	8019e9a <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8019df2:	4b2c      	ldr	r3, [pc, #176]	; (8019ea4 <ctlwizchip+0x1c0>)
 8019df4:	789a      	ldrb	r2, [r3, #2]
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8019dfa:	683b      	ldr	r3, [r7, #0]
 8019dfc:	3301      	adds	r3, #1
 8019dfe:	4a29      	ldr	r2, [pc, #164]	; (8019ea4 <ctlwizchip+0x1c0>)
 8019e00:	78d2      	ldrb	r2, [r2, #3]
 8019e02:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8019e04:	683b      	ldr	r3, [r7, #0]
 8019e06:	3302      	adds	r3, #2
 8019e08:	4a26      	ldr	r2, [pc, #152]	; (8019ea4 <ctlwizchip+0x1c0>)
 8019e0a:	7912      	ldrb	r2, [r2, #4]
 8019e0c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8019e0e:	683b      	ldr	r3, [r7, #0]
 8019e10:	3303      	adds	r3, #3
 8019e12:	4a24      	ldr	r2, [pc, #144]	; (8019ea4 <ctlwizchip+0x1c0>)
 8019e14:	7952      	ldrb	r2, [r2, #5]
 8019e16:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	3304      	adds	r3, #4
 8019e1c:	4a21      	ldr	r2, [pc, #132]	; (8019ea4 <ctlwizchip+0x1c0>)
 8019e1e:	7992      	ldrb	r2, [r2, #6]
 8019e20:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8019e22:	683b      	ldr	r3, [r7, #0]
 8019e24:	3305      	adds	r3, #5
 8019e26:	4a1f      	ldr	r2, [pc, #124]	; (8019ea4 <ctlwizchip+0x1c0>)
 8019e28:	79d2      	ldrb	r2, [r2, #7]
 8019e2a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	3306      	adds	r3, #6
 8019e30:	2200      	movs	r2, #0
 8019e32:	701a      	strb	r2, [r3, #0]
         break;
 8019e34:	e031      	b.n	8019e9a <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8019e36:	f000 fa13 	bl	801a260 <wizphy_reset>
         break;
 8019e3a:	e02e      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8019e3c:	6838      	ldr	r0, [r7, #0]
 8019e3e:	f000 fa36 	bl	801a2ae <wizphy_setphyconf>
         break;
 8019e42:	e02a      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8019e44:	6838      	ldr	r0, [r7, #0]
 8019e46:	f000 fa75 	bl	801a334 <wizphy_getphyconf>
         break;
 8019e4a:	e026      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8019e4c:	683b      	ldr	r3, [r7, #0]
 8019e4e:	781b      	ldrb	r3, [r3, #0]
 8019e50:	4618      	mov	r0, r3
 8019e52:	f000 faf7 	bl	801a444 <wizphy_setphypmode>
 8019e56:	4603      	mov	r3, r0
 8019e58:	e020      	b.n	8019e9c <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8019e5a:	f000 f9e8 	bl	801a22e <wizphy_getphypmode>
 8019e5e:	4603      	mov	r3, r0
 8019e60:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019e62:	7dfb      	ldrb	r3, [r7, #23]
 8019e64:	2bff      	cmp	r3, #255	; 0xff
 8019e66:	d102      	bne.n	8019e6e <ctlwizchip+0x18a>
 8019e68:	f04f 33ff 	mov.w	r3, #4294967295
 8019e6c:	e016      	b.n	8019e9c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019e6e:	683b      	ldr	r3, [r7, #0]
 8019e70:	7dfa      	ldrb	r2, [r7, #23]
 8019e72:	701a      	strb	r2, [r3, #0]
         break;
 8019e74:	e011      	b.n	8019e9a <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8019e76:	f000 f9c4 	bl	801a202 <wizphy_getphylink>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8019e7e:	7dfb      	ldrb	r3, [r7, #23]
 8019e80:	2bff      	cmp	r3, #255	; 0xff
 8019e82:	d102      	bne.n	8019e8a <ctlwizchip+0x1a6>
 8019e84:	f04f 33ff 	mov.w	r3, #4294967295
 8019e88:	e008      	b.n	8019e9c <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8019e8a:	683b      	ldr	r3, [r7, #0]
 8019e8c:	7dfa      	ldrb	r2, [r7, #23]
 8019e8e:	701a      	strb	r2, [r3, #0]
         break;
 8019e90:	e003      	b.n	8019e9a <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8019e92:	f04f 33ff 	mov.w	r3, #4294967295
 8019e96:	e001      	b.n	8019e9c <ctlwizchip+0x1b8>
         break;
 8019e98:	bf00      	nop
   }
   return 0;
 8019e9a:	2300      	movs	r3, #0
}
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	371c      	adds	r7, #28
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd90      	pop	{r4, r7, pc}
 8019ea4:	200000c4 	.word	0x200000c4

08019ea8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8019ea8:	b580      	push	{r7, lr}
 8019eaa:	b082      	sub	sp, #8
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	4603      	mov	r3, r0
 8019eb0:	6039      	str	r1, [r7, #0]
 8019eb2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8019eb4:	79fb      	ldrb	r3, [r7, #7]
 8019eb6:	2b05      	cmp	r3, #5
 8019eb8:	d82c      	bhi.n	8019f14 <ctlnetwork+0x6c>
 8019eba:	a201      	add	r2, pc, #4	; (adr r2, 8019ec0 <ctlnetwork+0x18>)
 8019ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ec0:	08019ed9 	.word	0x08019ed9
 8019ec4:	08019ee1 	.word	0x08019ee1
 8019ec8:	08019ee9 	.word	0x08019ee9
 8019ecc:	08019ef7 	.word	0x08019ef7
 8019ed0:	08019f05 	.word	0x08019f05
 8019ed4:	08019f0d 	.word	0x08019f0d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8019ed8:	6838      	ldr	r0, [r7, #0]
 8019eda:	f000 fafd 	bl	801a4d8 <wizchip_setnetinfo>
         break;
 8019ede:	e01c      	b.n	8019f1a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8019ee0:	6838      	ldr	r0, [r7, #0]
 8019ee2:	f000 fb39 	bl	801a558 <wizchip_getnetinfo>
         break;
 8019ee6:	e018      	b.n	8019f1a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8019ee8:	683b      	ldr	r3, [r7, #0]
 8019eea:	781b      	ldrb	r3, [r3, #0]
 8019eec:	4618      	mov	r0, r3
 8019eee:	f000 fb73 	bl	801a5d8 <wizchip_setnetmode>
 8019ef2:	4603      	mov	r3, r0
 8019ef4:	e012      	b.n	8019f1c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8019ef6:	f000 fb91 	bl	801a61c <wizchip_getnetmode>
 8019efa:	4603      	mov	r3, r0
 8019efc:	461a      	mov	r2, r3
 8019efe:	683b      	ldr	r3, [r7, #0]
 8019f00:	701a      	strb	r2, [r3, #0]
         break;
 8019f02:	e00a      	b.n	8019f1a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8019f04:	6838      	ldr	r0, [r7, #0]
 8019f06:	f000 fb91 	bl	801a62c <wizchip_settimeout>
         break;
 8019f0a:	e006      	b.n	8019f1a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8019f0c:	6838      	ldr	r0, [r7, #0]
 8019f0e:	f000 fbae 	bl	801a66e <wizchip_gettimeout>
         break;
 8019f12:	e002      	b.n	8019f1a <ctlnetwork+0x72>
      default:
         return -1;
 8019f14:	f04f 33ff 	mov.w	r3, #4294967295
 8019f18:	e000      	b.n	8019f1c <ctlnetwork+0x74>
   }
   return 0;
 8019f1a:	2300      	movs	r3, #0
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3708      	adds	r7, #8
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}

08019f24 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b086      	sub	sp, #24
 8019f28:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8019f2a:	1d3b      	adds	r3, r7, #4
 8019f2c:	2206      	movs	r2, #6
 8019f2e:	4619      	mov	r1, r3
 8019f30:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8019f34:	f7fe fbba 	bl	80186ac <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8019f38:	f107 0314 	add.w	r3, r7, #20
 8019f3c:	2204      	movs	r2, #4
 8019f3e:	4619      	mov	r1, r3
 8019f40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019f44:	f7fe fbb2 	bl	80186ac <WIZCHIP_READ_BUF>
 8019f48:	f107 0310 	add.w	r3, r7, #16
 8019f4c:	2204      	movs	r2, #4
 8019f4e:	4619      	mov	r1, r3
 8019f50:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8019f54:	f7fe fbaa 	bl	80186ac <WIZCHIP_READ_BUF>
 8019f58:	f107 030c 	add.w	r3, r7, #12
 8019f5c:	2204      	movs	r2, #4
 8019f5e:	4619      	mov	r1, r3
 8019f60:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8019f64:	f7fe fba2 	bl	80186ac <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8019f68:	2180      	movs	r1, #128	; 0x80
 8019f6a:	2000      	movs	r0, #0
 8019f6c:	f7fe fb50 	bl	8018610 <WIZCHIP_WRITE>
   getMR(); // for delay
 8019f70:	2000      	movs	r0, #0
 8019f72:	f7fe fb01 	bl	8018578 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8019f76:	1d3b      	adds	r3, r7, #4
 8019f78:	2206      	movs	r2, #6
 8019f7a:	4619      	mov	r1, r3
 8019f7c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8019f80:	f7fe fbf4 	bl	801876c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8019f84:	f107 0314 	add.w	r3, r7, #20
 8019f88:	2204      	movs	r2, #4
 8019f8a:	4619      	mov	r1, r3
 8019f8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8019f90:	f7fe fbec 	bl	801876c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8019f94:	f107 0310 	add.w	r3, r7, #16
 8019f98:	2204      	movs	r2, #4
 8019f9a:	4619      	mov	r1, r3
 8019f9c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8019fa0:	f7fe fbe4 	bl	801876c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8019fa4:	f107 030c 	add.w	r3, r7, #12
 8019fa8:	2204      	movs	r2, #4
 8019faa:	4619      	mov	r1, r3
 8019fac:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8019fb0:	f7fe fbdc 	bl	801876c <WIZCHIP_WRITE_BUF>
}
 8019fb4:	bf00      	nop
 8019fb6:	3718      	adds	r7, #24
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}

08019fbc <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b084      	sub	sp, #16
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8019fc6:	2300      	movs	r3, #0
 8019fc8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8019fca:	f7ff ffab 	bl	8019f24 <wizchip_sw_reset>
   if(txsize)
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d03b      	beq.n	801a04c <wizchip_init+0x90>
   {
      tmp = 0;
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019fd8:	2300      	movs	r3, #0
 8019fda:	73fb      	strb	r3, [r7, #15]
 8019fdc:	e015      	b.n	801a00a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8019fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019fe2:	687a      	ldr	r2, [r7, #4]
 8019fe4:	4413      	add	r3, r2
 8019fe6:	781a      	ldrb	r2, [r3, #0]
 8019fe8:	7bbb      	ldrb	r3, [r7, #14]
 8019fea:	4413      	add	r3, r2
 8019fec:	b2db      	uxtb	r3, r3
 8019fee:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8019ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8019ff4:	2b10      	cmp	r3, #16
 8019ff6:	dd02      	ble.n	8019ffe <wizchip_init+0x42>
 8019ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8019ffc:	e066      	b.n	801a0cc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8019ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a002:	b2db      	uxtb	r3, r3
 801a004:	3301      	adds	r3, #1
 801a006:	b2db      	uxtb	r3, r3
 801a008:	73fb      	strb	r3, [r7, #15]
 801a00a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a00e:	2b07      	cmp	r3, #7
 801a010:	dde5      	ble.n	8019fde <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a012:	2300      	movs	r3, #0
 801a014:	73fb      	strb	r3, [r7, #15]
 801a016:	e015      	b.n	801a044 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801a018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a01c:	009b      	lsls	r3, r3, #2
 801a01e:	3301      	adds	r3, #1
 801a020:	00db      	lsls	r3, r3, #3
 801a022:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801a026:	4618      	mov	r0, r3
 801a028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a02c:	687a      	ldr	r2, [r7, #4]
 801a02e:	4413      	add	r3, r2
 801a030:	781b      	ldrb	r3, [r3, #0]
 801a032:	4619      	mov	r1, r3
 801a034:	f7fe faec 	bl	8018610 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a03c:	b2db      	uxtb	r3, r3
 801a03e:	3301      	adds	r3, #1
 801a040:	b2db      	uxtb	r3, r3
 801a042:	73fb      	strb	r3, [r7, #15]
 801a044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a048:	2b07      	cmp	r3, #7
 801a04a:	dde5      	ble.n	801a018 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801a04c:	683b      	ldr	r3, [r7, #0]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d03b      	beq.n	801a0ca <wizchip_init+0x10e>
   {
      tmp = 0;
 801a052:	2300      	movs	r3, #0
 801a054:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a056:	2300      	movs	r3, #0
 801a058:	73fb      	strb	r3, [r7, #15]
 801a05a:	e015      	b.n	801a088 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801a05c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a060:	683a      	ldr	r2, [r7, #0]
 801a062:	4413      	add	r3, r2
 801a064:	781a      	ldrb	r2, [r3, #0]
 801a066:	7bbb      	ldrb	r3, [r7, #14]
 801a068:	4413      	add	r3, r2
 801a06a:	b2db      	uxtb	r3, r3
 801a06c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a06e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a072:	2b10      	cmp	r3, #16
 801a074:	dd02      	ble.n	801a07c <wizchip_init+0xc0>
 801a076:	f04f 33ff 	mov.w	r3, #4294967295
 801a07a:	e027      	b.n	801a0cc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a07c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a080:	b2db      	uxtb	r3, r3
 801a082:	3301      	adds	r3, #1
 801a084:	b2db      	uxtb	r3, r3
 801a086:	73fb      	strb	r3, [r7, #15]
 801a088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a08c:	2b07      	cmp	r3, #7
 801a08e:	dde5      	ble.n	801a05c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a090:	2300      	movs	r3, #0
 801a092:	73fb      	strb	r3, [r7, #15]
 801a094:	e015      	b.n	801a0c2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801a096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a09a:	009b      	lsls	r3, r3, #2
 801a09c:	3301      	adds	r3, #1
 801a09e:	00db      	lsls	r3, r3, #3
 801a0a0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0aa:	683a      	ldr	r2, [r7, #0]
 801a0ac:	4413      	add	r3, r2
 801a0ae:	781b      	ldrb	r3, [r3, #0]
 801a0b0:	4619      	mov	r1, r3
 801a0b2:	f7fe faad 	bl	8018610 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0ba:	b2db      	uxtb	r3, r3
 801a0bc:	3301      	adds	r3, #1
 801a0be:	b2db      	uxtb	r3, r3
 801a0c0:	73fb      	strb	r3, [r7, #15]
 801a0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a0c6:	2b07      	cmp	r3, #7
 801a0c8:	dde5      	ble.n	801a096 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801a0ca:	2300      	movs	r3, #0
}
 801a0cc:	4618      	mov	r0, r3
 801a0ce:	3710      	adds	r7, #16
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	bd80      	pop	{r7, pc}

0801a0d4 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b084      	sub	sp, #16
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	4603      	mov	r3, r0
 801a0dc:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 801a0de:	88fb      	ldrh	r3, [r7, #6]
 801a0e0:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801a0e2:	88fb      	ldrh	r3, [r7, #6]
 801a0e4:	0a1b      	lsrs	r3, r3, #8
 801a0e6:	b29b      	uxth	r3, r3
 801a0e8:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801a0ea:	7bfb      	ldrb	r3, [r7, #15]
 801a0ec:	f023 030f 	bic.w	r3, r3, #15
 801a0f0:	b2db      	uxtb	r3, r3
 801a0f2:	4619      	mov	r1, r3
 801a0f4:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a0f8:	f7fe fa8a 	bl	8018610 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801a0fc:	2300      	movs	r3, #0
 801a0fe:	73fb      	strb	r3, [r7, #15]
 801a100:	e014      	b.n	801a12c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801a102:	7bba      	ldrb	r2, [r7, #14]
 801a104:	7bfb      	ldrb	r3, [r7, #15]
 801a106:	fa42 f303 	asr.w	r3, r2, r3
 801a10a:	f003 0301 	and.w	r3, r3, #1
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d009      	beq.n	801a126 <wizchip_clrinterrupt+0x52>
 801a112:	7bfb      	ldrb	r3, [r7, #15]
 801a114:	009b      	lsls	r3, r3, #2
 801a116:	3301      	adds	r3, #1
 801a118:	00db      	lsls	r3, r3, #3
 801a11a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a11e:	211f      	movs	r1, #31
 801a120:	4618      	mov	r0, r3
 801a122:	f7fe fa75 	bl	8018610 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801a126:	7bfb      	ldrb	r3, [r7, #15]
 801a128:	3301      	adds	r3, #1
 801a12a:	73fb      	strb	r3, [r7, #15]
 801a12c:	7bfb      	ldrb	r3, [r7, #15]
 801a12e:	2b07      	cmp	r3, #7
 801a130:	d9e7      	bls.n	801a102 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 801a132:	bf00      	nop
 801a134:	bf00      	nop
 801a136:	3710      	adds	r7, #16
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}

0801a13c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b082      	sub	sp, #8
 801a140:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801a142:	2300      	movs	r3, #0
 801a144:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 801a146:	2300      	movs	r3, #0
 801a148:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a14a:	2300      	movs	r3, #0
 801a14c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801a14e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a152:	f7fe fa11 	bl	8018578 <WIZCHIP_READ>
 801a156:	4603      	mov	r3, r0
 801a158:	f023 030f 	bic.w	r3, r3, #15
 801a15c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 801a15e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 801a162:	f7fe fa09 	bl	8018578 <WIZCHIP_READ>
 801a166:	4603      	mov	r3, r0
 801a168:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801a16a:	79bb      	ldrb	r3, [r7, #6]
 801a16c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 801a16e:	88bb      	ldrh	r3, [r7, #4]
 801a170:	021b      	lsls	r3, r3, #8
 801a172:	b29a      	uxth	r2, r3
 801a174:	79fb      	ldrb	r3, [r7, #7]
 801a176:	b29b      	uxth	r3, r3
 801a178:	4413      	add	r3, r2
 801a17a:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a17c:	88bb      	ldrh	r3, [r7, #4]
}
 801a17e:	4618      	mov	r0, r3
 801a180:	3708      	adds	r7, #8
 801a182:	46bd      	mov	sp, r7
 801a184:	bd80      	pop	{r7, pc}

0801a186 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801a186:	b580      	push	{r7, lr}
 801a188:	b084      	sub	sp, #16
 801a18a:	af00      	add	r7, sp, #0
 801a18c:	4603      	mov	r3, r0
 801a18e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 801a190:	88fb      	ldrh	r3, [r7, #6]
 801a192:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801a194:	88fb      	ldrh	r3, [r7, #6]
 801a196:	0a1b      	lsrs	r3, r3, #8
 801a198:	b29b      	uxth	r3, r3
 801a19a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801a19c:	7bfb      	ldrb	r3, [r7, #15]
 801a19e:	4619      	mov	r1, r3
 801a1a0:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a1a4:	f7fe fa34 	bl	8018610 <WIZCHIP_WRITE>
   setSIMR(simr);
 801a1a8:	7bbb      	ldrb	r3, [r7, #14]
 801a1aa:	4619      	mov	r1, r3
 801a1ac:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a1b0:	f7fe fa2e 	bl	8018610 <WIZCHIP_WRITE>
#endif   
}
 801a1b4:	bf00      	nop
 801a1b6:	3710      	adds	r7, #16
 801a1b8:	46bd      	mov	sp, r7
 801a1ba:	bd80      	pop	{r7, pc}

0801a1bc <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b082      	sub	sp, #8
 801a1c0:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 801a1c6:	2300      	movs	r3, #0
 801a1c8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801a1ce:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a1d2:	f7fe f9d1 	bl	8018578 <WIZCHIP_READ>
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 801a1da:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a1de:	f7fe f9cb 	bl	8018578 <WIZCHIP_READ>
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801a1e6:	79bb      	ldrb	r3, [r7, #6]
 801a1e8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 801a1ea:	88bb      	ldrh	r3, [r7, #4]
 801a1ec:	021b      	lsls	r3, r3, #8
 801a1ee:	b29a      	uxth	r2, r3
 801a1f0:	79fb      	ldrb	r3, [r7, #7]
 801a1f2:	b29b      	uxth	r3, r3
 801a1f4:	4413      	add	r3, r2
 801a1f6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a1f8:	88bb      	ldrh	r3, [r7, #4]
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3708      	adds	r7, #8
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}

0801a202 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801a202:	b580      	push	{r7, lr}
 801a204:	b082      	sub	sp, #8
 801a206:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801a208:	2300      	movs	r3, #0
 801a20a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801a20c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a210:	f7fe f9b2 	bl	8018578 <WIZCHIP_READ>
 801a214:	4603      	mov	r3, r0
 801a216:	f003 0301 	and.w	r3, r3, #1
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d001      	beq.n	801a222 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 801a21e:	2301      	movs	r3, #1
 801a220:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 801a222:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a226:	4618      	mov	r0, r3
 801a228:	3708      	adds	r7, #8
 801a22a:	46bd      	mov	sp, r7
 801a22c:	bd80      	pop	{r7, pc}

0801a22e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801a22e:	b580      	push	{r7, lr}
 801a230:	b082      	sub	sp, #8
 801a232:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801a234:	2300      	movs	r3, #0
 801a236:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801a238:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a23c:	f7fe f99c 	bl	8018578 <WIZCHIP_READ>
 801a240:	4603      	mov	r3, r0
 801a242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a246:	2b30      	cmp	r3, #48	; 0x30
 801a248:	d102      	bne.n	801a250 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 801a24a:	2301      	movs	r3, #1
 801a24c:	71fb      	strb	r3, [r7, #7]
 801a24e:	e001      	b.n	801a254 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 801a250:	2300      	movs	r3, #0
 801a252:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 801a254:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a258:	4618      	mov	r0, r3
 801a25a:	3708      	adds	r7, #8
 801a25c:	46bd      	mov	sp, r7
 801a25e:	bd80      	pop	{r7, pc}

0801a260 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801a260:	b580      	push	{r7, lr}
 801a262:	b082      	sub	sp, #8
 801a264:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801a266:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a26a:	f7fe f985 	bl	8018578 <WIZCHIP_READ>
 801a26e:	4603      	mov	r3, r0
 801a270:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 801a272:	79fb      	ldrb	r3, [r7, #7]
 801a274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a278:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a27a:	79fb      	ldrb	r3, [r7, #7]
 801a27c:	4619      	mov	r1, r3
 801a27e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a282:	f7fe f9c5 	bl	8018610 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801a286:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a28a:	f7fe f975 	bl	8018578 <WIZCHIP_READ>
 801a28e:	4603      	mov	r3, r0
 801a290:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 801a292:	79fb      	ldrb	r3, [r7, #7]
 801a294:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a298:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a29a:	79fb      	ldrb	r3, [r7, #7]
 801a29c:	4619      	mov	r1, r3
 801a29e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a2a2:	f7fe f9b5 	bl	8018610 <WIZCHIP_WRITE>
}
 801a2a6:	bf00      	nop
 801a2a8:	3708      	adds	r7, #8
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd80      	pop	{r7, pc}

0801a2ae <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801a2ae:	b580      	push	{r7, lr}
 801a2b0:	b084      	sub	sp, #16
 801a2b2:	af00      	add	r7, sp, #0
 801a2b4:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a2b6:	2300      	movs	r3, #0
 801a2b8:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	781b      	ldrb	r3, [r3, #0]
 801a2be:	2b01      	cmp	r3, #1
 801a2c0:	d104      	bne.n	801a2cc <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 801a2c2:	7bfb      	ldrb	r3, [r7, #15]
 801a2c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a2c8:	73fb      	strb	r3, [r7, #15]
 801a2ca:	e003      	b.n	801a2d4 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 801a2cc:	7bfb      	ldrb	r3, [r7, #15]
 801a2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a2d2:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	785b      	ldrb	r3, [r3, #1]
 801a2d8:	2b01      	cmp	r3, #1
 801a2da:	d104      	bne.n	801a2e6 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a2dc:	7bfb      	ldrb	r3, [r7, #15]
 801a2de:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a2e2:	73fb      	strb	r3, [r7, #15]
 801a2e4:	e019      	b.n	801a31a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	78db      	ldrb	r3, [r3, #3]
 801a2ea:	2b01      	cmp	r3, #1
 801a2ec:	d10d      	bne.n	801a30a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	789b      	ldrb	r3, [r3, #2]
 801a2f2:	2b01      	cmp	r3, #1
 801a2f4:	d104      	bne.n	801a300 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 801a2f6:	7bfb      	ldrb	r3, [r7, #15]
 801a2f8:	f043 0318 	orr.w	r3, r3, #24
 801a2fc:	73fb      	strb	r3, [r7, #15]
 801a2fe:	e00c      	b.n	801a31a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801a300:	7bfb      	ldrb	r3, [r7, #15]
 801a302:	f043 0308 	orr.w	r3, r3, #8
 801a306:	73fb      	strb	r3, [r7, #15]
 801a308:	e007      	b.n	801a31a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	789b      	ldrb	r3, [r3, #2]
 801a30e:	2b01      	cmp	r3, #1
 801a310:	d103      	bne.n	801a31a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 801a312:	7bfb      	ldrb	r3, [r7, #15]
 801a314:	f043 0310 	orr.w	r3, r3, #16
 801a318:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 801a31a:	7bfb      	ldrb	r3, [r7, #15]
 801a31c:	4619      	mov	r1, r3
 801a31e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a322:	f7fe f975 	bl	8018610 <WIZCHIP_WRITE>
   wizphy_reset();
 801a326:	f7ff ff9b 	bl	801a260 <wizphy_reset>
}
 801a32a:	bf00      	nop
 801a32c:	3710      	adds	r7, #16
 801a32e:	46bd      	mov	sp, r7
 801a330:	bd80      	pop	{r7, pc}
	...

0801a334 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801a334:	b580      	push	{r7, lr}
 801a336:	b084      	sub	sp, #16
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a33c:	2300      	movs	r3, #0
 801a33e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a340:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a344:	f7fe f918 	bl	8018578 <WIZCHIP_READ>
 801a348:	4603      	mov	r3, r0
 801a34a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a34c:	7bfb      	ldrb	r3, [r7, #15]
 801a34e:	119b      	asrs	r3, r3, #6
 801a350:	b2db      	uxtb	r3, r3
 801a352:	f003 0301 	and.w	r3, r3, #1
 801a356:	b2da      	uxtb	r2, r3
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a35c:	7bfb      	ldrb	r3, [r7, #15]
 801a35e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a362:	2b20      	cmp	r3, #32
 801a364:	d001      	beq.n	801a36a <wizphy_getphyconf+0x36>
 801a366:	2b38      	cmp	r3, #56	; 0x38
 801a368:	d103      	bne.n	801a372 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	2201      	movs	r2, #1
 801a36e:	705a      	strb	r2, [r3, #1]
         break;
 801a370:	e003      	b.n	801a37a <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	2200      	movs	r2, #0
 801a376:	705a      	strb	r2, [r3, #1]
         break;
 801a378:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a37a:	7bfb      	ldrb	r3, [r7, #15]
 801a37c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a380:	3b10      	subs	r3, #16
 801a382:	2b10      	cmp	r3, #16
 801a384:	bf8c      	ite	hi
 801a386:	2201      	movhi	r2, #1
 801a388:	2200      	movls	r2, #0
 801a38a:	b2d2      	uxtb	r2, r2
 801a38c:	2a00      	cmp	r2, #0
 801a38e:	d10f      	bne.n	801a3b0 <wizphy_getphyconf+0x7c>
 801a390:	4a1b      	ldr	r2, [pc, #108]	; (801a400 <wizphy_getphyconf+0xcc>)
 801a392:	fa22 f303 	lsr.w	r3, r2, r3
 801a396:	f003 0301 	and.w	r3, r3, #1
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	bf14      	ite	ne
 801a39e:	2301      	movne	r3, #1
 801a3a0:	2300      	moveq	r3, #0
 801a3a2:	b2db      	uxtb	r3, r3
 801a3a4:	2b00      	cmp	r3, #0
 801a3a6:	d003      	beq.n	801a3b0 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	2201      	movs	r2, #1
 801a3ac:	709a      	strb	r2, [r3, #2]
         break;
 801a3ae:	e003      	b.n	801a3b8 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	709a      	strb	r2, [r3, #2]
         break;
 801a3b6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a3b8:	7bfb      	ldrb	r3, [r7, #15]
 801a3ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a3be:	3b08      	subs	r3, #8
 801a3c0:	2b18      	cmp	r3, #24
 801a3c2:	bf8c      	ite	hi
 801a3c4:	2201      	movhi	r2, #1
 801a3c6:	2200      	movls	r2, #0
 801a3c8:	b2d2      	uxtb	r2, r2
 801a3ca:	2a00      	cmp	r2, #0
 801a3cc:	d10f      	bne.n	801a3ee <wizphy_getphyconf+0xba>
 801a3ce:	4a0d      	ldr	r2, [pc, #52]	; (801a404 <wizphy_getphyconf+0xd0>)
 801a3d0:	fa22 f303 	lsr.w	r3, r2, r3
 801a3d4:	f003 0301 	and.w	r3, r3, #1
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	bf14      	ite	ne
 801a3dc:	2301      	movne	r3, #1
 801a3de:	2300      	moveq	r3, #0
 801a3e0:	b2db      	uxtb	r3, r3
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d003      	beq.n	801a3ee <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	2201      	movs	r2, #1
 801a3ea:	70da      	strb	r2, [r3, #3]
         break;
 801a3ec:	e003      	b.n	801a3f6 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	2200      	movs	r2, #0
 801a3f2:	70da      	strb	r2, [r3, #3]
         break;
 801a3f4:	bf00      	nop
   }
}
 801a3f6:	bf00      	nop
 801a3f8:	3710      	adds	r7, #16
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	bd80      	pop	{r7, pc}
 801a3fe:	bf00      	nop
 801a400:	00010101 	.word	0x00010101
 801a404:	01010001 	.word	0x01010001

0801a408 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b084      	sub	sp, #16
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a410:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a414:	f7fe f8b0 	bl	8018578 <WIZCHIP_READ>
 801a418:	4603      	mov	r3, r0
 801a41a:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a41c:	7bfb      	ldrb	r3, [r7, #15]
 801a41e:	109b      	asrs	r3, r3, #2
 801a420:	b2db      	uxtb	r3, r3
 801a422:	f003 0301 	and.w	r3, r3, #1
 801a426:	b2da      	uxtb	r2, r3
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a42c:	7bfb      	ldrb	r3, [r7, #15]
 801a42e:	105b      	asrs	r3, r3, #1
 801a430:	b2db      	uxtb	r3, r3
 801a432:	f003 0301 	and.w	r3, r3, #1
 801a436:	b2da      	uxtb	r2, r3
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	709a      	strb	r2, [r3, #2]
}
 801a43c:	bf00      	nop
 801a43e:	3710      	adds	r7, #16
 801a440:	46bd      	mov	sp, r7
 801a442:	bd80      	pop	{r7, pc}

0801a444 <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b084      	sub	sp, #16
 801a448:	af00      	add	r7, sp, #0
 801a44a:	4603      	mov	r3, r0
 801a44c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a44e:	2300      	movs	r3, #0
 801a450:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a452:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a456:	f7fe f88f 	bl	8018578 <WIZCHIP_READ>
 801a45a:	4603      	mov	r3, r0
 801a45c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a45e:	7bfb      	ldrb	r3, [r7, #15]
 801a460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a464:	2b00      	cmp	r3, #0
 801a466:	d102      	bne.n	801a46e <wizphy_setphypmode+0x2a>
 801a468:	f04f 33ff 	mov.w	r3, #4294967295
 801a46c:	e030      	b.n	801a4d0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a46e:	7bfb      	ldrb	r3, [r7, #15]
 801a470:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 801a474:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a476:	79fb      	ldrb	r3, [r7, #7]
 801a478:	2b01      	cmp	r3, #1
 801a47a:	d104      	bne.n	801a486 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a47c:	7bfb      	ldrb	r3, [r7, #15]
 801a47e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801a482:	73fb      	strb	r3, [r7, #15]
 801a484:	e003      	b.n	801a48e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a486:	7bfb      	ldrb	r3, [r7, #15]
 801a488:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a48c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a48e:	7bfb      	ldrb	r3, [r7, #15]
 801a490:	4619      	mov	r1, r3
 801a492:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a496:	f7fe f8bb 	bl	8018610 <WIZCHIP_WRITE>
   wizphy_reset();
 801a49a:	f7ff fee1 	bl	801a260 <wizphy_reset>
   tmp = getPHYCFGR();
 801a49e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a4a2:	f7fe f869 	bl	8018578 <WIZCHIP_READ>
 801a4a6:	4603      	mov	r3, r0
 801a4a8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a4aa:	79fb      	ldrb	r3, [r7, #7]
 801a4ac:	2b01      	cmp	r3, #1
 801a4ae:	d106      	bne.n	801a4be <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a4b0:	7bfb      	ldrb	r3, [r7, #15]
 801a4b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d008      	beq.n	801a4cc <wizphy_setphypmode+0x88>
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	e008      	b.n	801a4d0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a4be:	7bfb      	ldrb	r3, [r7, #15]
 801a4c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	d001      	beq.n	801a4cc <wizphy_setphypmode+0x88>
 801a4c8:	2300      	movs	r3, #0
 801a4ca:	e001      	b.n	801a4d0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a4cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3710      	adds	r7, #16
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	bd80      	pop	{r7, pc}

0801a4d8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a4d8:	b580      	push	{r7, lr}
 801a4da:	b082      	sub	sp, #8
 801a4dc:	af00      	add	r7, sp, #0
 801a4de:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	2206      	movs	r2, #6
 801a4e4:	4619      	mov	r1, r3
 801a4e6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a4ea:	f7fe f93f 	bl	801876c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	330e      	adds	r3, #14
 801a4f2:	2204      	movs	r2, #4
 801a4f4:	4619      	mov	r1, r3
 801a4f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a4fa:	f7fe f937 	bl	801876c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	330a      	adds	r3, #10
 801a502:	2204      	movs	r2, #4
 801a504:	4619      	mov	r1, r3
 801a506:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a50a:	f7fe f92f 	bl	801876c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	3306      	adds	r3, #6
 801a512:	2204      	movs	r2, #4
 801a514:	4619      	mov	r1, r3
 801a516:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a51a:	f7fe f927 	bl	801876c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	7c9a      	ldrb	r2, [r3, #18]
 801a522:	4b0b      	ldr	r3, [pc, #44]	; (801a550 <wizchip_setnetinfo+0x78>)
 801a524:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	7cda      	ldrb	r2, [r3, #19]
 801a52a:	4b09      	ldr	r3, [pc, #36]	; (801a550 <wizchip_setnetinfo+0x78>)
 801a52c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	7d1a      	ldrb	r2, [r3, #20]
 801a532:	4b07      	ldr	r3, [pc, #28]	; (801a550 <wizchip_setnetinfo+0x78>)
 801a534:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	7d5a      	ldrb	r2, [r3, #21]
 801a53a:	4b05      	ldr	r3, [pc, #20]	; (801a550 <wizchip_setnetinfo+0x78>)
 801a53c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	7d9a      	ldrb	r2, [r3, #22]
 801a542:	4b04      	ldr	r3, [pc, #16]	; (801a554 <wizchip_setnetinfo+0x7c>)
 801a544:	701a      	strb	r2, [r3, #0]
}
 801a546:	bf00      	nop
 801a548:	3708      	adds	r7, #8
 801a54a:	46bd      	mov	sp, r7
 801a54c:	bd80      	pop	{r7, pc}
 801a54e:	bf00      	nop
 801a550:	20000980 	.word	0x20000980
 801a554:	20000984 	.word	0x20000984

0801a558 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a558:	b580      	push	{r7, lr}
 801a55a:	b082      	sub	sp, #8
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2206      	movs	r2, #6
 801a564:	4619      	mov	r1, r3
 801a566:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a56a:	f7fe f89f 	bl	80186ac <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	330e      	adds	r3, #14
 801a572:	2204      	movs	r2, #4
 801a574:	4619      	mov	r1, r3
 801a576:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a57a:	f7fe f897 	bl	80186ac <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a57e:	687b      	ldr	r3, [r7, #4]
 801a580:	330a      	adds	r3, #10
 801a582:	2204      	movs	r2, #4
 801a584:	4619      	mov	r1, r3
 801a586:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a58a:	f7fe f88f 	bl	80186ac <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a58e:	687b      	ldr	r3, [r7, #4]
 801a590:	3306      	adds	r3, #6
 801a592:	2204      	movs	r2, #4
 801a594:	4619      	mov	r1, r3
 801a596:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a59a:	f7fe f887 	bl	80186ac <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a59e:	4b0c      	ldr	r3, [pc, #48]	; (801a5d0 <wizchip_getnetinfo+0x78>)
 801a5a0:	781a      	ldrb	r2, [r3, #0]
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a5a6:	4b0a      	ldr	r3, [pc, #40]	; (801a5d0 <wizchip_getnetinfo+0x78>)
 801a5a8:	785a      	ldrb	r2, [r3, #1]
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a5ae:	4b08      	ldr	r3, [pc, #32]	; (801a5d0 <wizchip_getnetinfo+0x78>)
 801a5b0:	789a      	ldrb	r2, [r3, #2]
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a5b6:	4b06      	ldr	r3, [pc, #24]	; (801a5d0 <wizchip_getnetinfo+0x78>)
 801a5b8:	78da      	ldrb	r2, [r3, #3]
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a5be:	4b05      	ldr	r3, [pc, #20]	; (801a5d4 <wizchip_getnetinfo+0x7c>)
 801a5c0:	781a      	ldrb	r2, [r3, #0]
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	759a      	strb	r2, [r3, #22]
}
 801a5c6:	bf00      	nop
 801a5c8:	3708      	adds	r7, #8
 801a5ca:	46bd      	mov	sp, r7
 801a5cc:	bd80      	pop	{r7, pc}
 801a5ce:	bf00      	nop
 801a5d0:	20000980 	.word	0x20000980
 801a5d4:	20000984 	.word	0x20000984

0801a5d8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b084      	sub	sp, #16
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	4603      	mov	r3, r0
 801a5e0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a5e2:	2300      	movs	r3, #0
 801a5e4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a5e6:	79fb      	ldrb	r3, [r7, #7]
 801a5e8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d002      	beq.n	801a5f6 <wizchip_setnetmode+0x1e>
 801a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 801a5f4:	e00e      	b.n	801a614 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a5f6:	2000      	movs	r0, #0
 801a5f8:	f7fd ffbe 	bl	8018578 <WIZCHIP_READ>
 801a5fc:	4603      	mov	r3, r0
 801a5fe:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a600:	7bfa      	ldrb	r2, [r7, #15]
 801a602:	79fb      	ldrb	r3, [r7, #7]
 801a604:	4313      	orrs	r3, r2
 801a606:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a608:	7bfb      	ldrb	r3, [r7, #15]
 801a60a:	4619      	mov	r1, r3
 801a60c:	2000      	movs	r0, #0
 801a60e:	f7fd ffff 	bl	8018610 <WIZCHIP_WRITE>
   return 0;
 801a612:	2300      	movs	r3, #0
}
 801a614:	4618      	mov	r0, r3
 801a616:	3710      	adds	r7, #16
 801a618:	46bd      	mov	sp, r7
 801a61a:	bd80      	pop	{r7, pc}

0801a61c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a61c:	b580      	push	{r7, lr}
 801a61e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a620:	2000      	movs	r0, #0
 801a622:	f7fd ffa9 	bl	8018578 <WIZCHIP_READ>
 801a626:	4603      	mov	r3, r0
}
 801a628:	4618      	mov	r0, r3
 801a62a:	bd80      	pop	{r7, pc}

0801a62c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a62c:	b580      	push	{r7, lr}
 801a62e:	b082      	sub	sp, #8
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	781b      	ldrb	r3, [r3, #0]
 801a638:	4619      	mov	r1, r3
 801a63a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a63e:	f7fd ffe7 	bl	8018610 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	885b      	ldrh	r3, [r3, #2]
 801a646:	0a1b      	lsrs	r3, r3, #8
 801a648:	b29b      	uxth	r3, r3
 801a64a:	b2db      	uxtb	r3, r3
 801a64c:	4619      	mov	r1, r3
 801a64e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a652:	f7fd ffdd 	bl	8018610 <WIZCHIP_WRITE>
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	885b      	ldrh	r3, [r3, #2]
 801a65a:	b2db      	uxtb	r3, r3
 801a65c:	4619      	mov	r1, r3
 801a65e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a662:	f7fd ffd5 	bl	8018610 <WIZCHIP_WRITE>
}
 801a666:	bf00      	nop
 801a668:	3708      	adds	r7, #8
 801a66a:	46bd      	mov	sp, r7
 801a66c:	bd80      	pop	{r7, pc}

0801a66e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801a66e:	b590      	push	{r4, r7, lr}
 801a670:	b083      	sub	sp, #12
 801a672:	af00      	add	r7, sp, #0
 801a674:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801a676:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a67a:	f7fd ff7d 	bl	8018578 <WIZCHIP_READ>
 801a67e:	4603      	mov	r3, r0
 801a680:	461a      	mov	r2, r3
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801a686:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a68a:	f7fd ff75 	bl	8018578 <WIZCHIP_READ>
 801a68e:	4603      	mov	r3, r0
 801a690:	b29b      	uxth	r3, r3
 801a692:	021b      	lsls	r3, r3, #8
 801a694:	b29c      	uxth	r4, r3
 801a696:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a69a:	f7fd ff6d 	bl	8018578 <WIZCHIP_READ>
 801a69e:	4603      	mov	r3, r0
 801a6a0:	b29b      	uxth	r3, r3
 801a6a2:	4423      	add	r3, r4
 801a6a4:	b29a      	uxth	r2, r3
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	805a      	strh	r2, [r3, #2]
}
 801a6aa:	bf00      	nop
 801a6ac:	370c      	adds	r7, #12
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	bd90      	pop	{r4, r7, pc}
	...

0801a6b4 <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801a6b8:	2204      	movs	r2, #4
 801a6ba:	4909      	ldr	r1, [pc, #36]	; (801a6e0 <default_ip_assign+0x2c>)
 801a6bc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a6c0:	f7fe f854 	bl	801876c <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801a6c4:	2204      	movs	r2, #4
 801a6c6:	4907      	ldr	r1, [pc, #28]	; (801a6e4 <default_ip_assign+0x30>)
 801a6c8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a6cc:	f7fe f84e 	bl	801876c <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801a6d0:	2204      	movs	r2, #4
 801a6d2:	4905      	ldr	r1, [pc, #20]	; (801a6e8 <default_ip_assign+0x34>)
 801a6d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a6d8:	f7fe f848 	bl	801876c <WIZCHIP_WRITE_BUF>
}
 801a6dc:	bf00      	nop
 801a6de:	bd80      	pop	{r7, pc}
 801a6e0:	20000994 	.word	0x20000994
 801a6e4:	2000099c 	.word	0x2000099c
 801a6e8:	20000998 	.word	0x20000998

0801a6ec <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801a6ec:	b580      	push	{r7, lr}
 801a6ee:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801a6f0:	2180      	movs	r1, #128	; 0x80
 801a6f2:	2000      	movs	r0, #0
 801a6f4:	f7fd ff8c 	bl	8018610 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a6f8:	2000      	movs	r0, #0
 801a6fa:	f7fd ff3d 	bl	8018578 <WIZCHIP_READ>
   default_ip_assign();
 801a6fe:	f7ff ffd9 	bl	801a6b4 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801a702:	2206      	movs	r2, #6
 801a704:	4903      	ldr	r1, [pc, #12]	; (801a714 <default_ip_update+0x28>)
 801a706:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a70a:	f7fe f82f 	bl	801876c <WIZCHIP_WRITE_BUF>
}
 801a70e:	bf00      	nop
 801a710:	bd80      	pop	{r7, pc}
 801a712:	bf00      	nop
 801a714:	200009b4 	.word	0x200009b4

0801a718 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801a71c:	2180      	movs	r1, #128	; 0x80
 801a71e:	2000      	movs	r0, #0
 801a720:	f7fd ff76 	bl	8018610 <WIZCHIP_WRITE>
	getMR(); // for delay
 801a724:	2000      	movs	r0, #0
 801a726:	f7fd ff27 	bl	8018578 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801a72a:	2206      	movs	r2, #6
 801a72c:	4903      	ldr	r1, [pc, #12]	; (801a73c <default_ip_conflict+0x24>)
 801a72e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a732:	f7fe f81b 	bl	801876c <WIZCHIP_WRITE_BUF>
}
 801a736:	bf00      	nop
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	bf00      	nop
 801a73c:	200009b4 	.word	0x200009b4

0801a740 <default_delay>:

void default_delay(uint32_t time){}
 801a740:	b480      	push	{r7}
 801a742:	b083      	sub	sp, #12
 801a744:	af00      	add	r7, sp, #0
 801a746:	6078      	str	r0, [r7, #4]
 801a748:	bf00      	nop
 801a74a:	370c      	adds	r7, #12
 801a74c:	46bd      	mov	sp, r7
 801a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a752:	4770      	bx	lr

0801a754 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801a754:	b480      	push	{r7}
 801a756:	b085      	sub	sp, #20
 801a758:	af00      	add	r7, sp, #0
 801a75a:	60f8      	str	r0, [r7, #12]
 801a75c:	60b9      	str	r1, [r7, #8]
 801a75e:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801a760:	4b10      	ldr	r3, [pc, #64]	; (801a7a4 <reg_dhcp_cbfunc+0x50>)
 801a762:	4a11      	ldr	r2, [pc, #68]	; (801a7a8 <reg_dhcp_cbfunc+0x54>)
 801a764:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801a766:	4b11      	ldr	r3, [pc, #68]	; (801a7ac <reg_dhcp_cbfunc+0x58>)
 801a768:	4a11      	ldr	r2, [pc, #68]	; (801a7b0 <reg_dhcp_cbfunc+0x5c>)
 801a76a:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801a76c:	4b11      	ldr	r3, [pc, #68]	; (801a7b4 <reg_dhcp_cbfunc+0x60>)
 801a76e:	4a12      	ldr	r2, [pc, #72]	; (801a7b8 <reg_dhcp_cbfunc+0x64>)
 801a770:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801a772:	68fb      	ldr	r3, [r7, #12]
 801a774:	2b00      	cmp	r3, #0
 801a776:	d002      	beq.n	801a77e <reg_dhcp_cbfunc+0x2a>
 801a778:	4a0a      	ldr	r2, [pc, #40]	; (801a7a4 <reg_dhcp_cbfunc+0x50>)
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801a77e:	68bb      	ldr	r3, [r7, #8]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d002      	beq.n	801a78a <reg_dhcp_cbfunc+0x36>
 801a784:	4a09      	ldr	r2, [pc, #36]	; (801a7ac <reg_dhcp_cbfunc+0x58>)
 801a786:	68bb      	ldr	r3, [r7, #8]
 801a788:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d002      	beq.n	801a796 <reg_dhcp_cbfunc+0x42>
 801a790:	4a08      	ldr	r2, [pc, #32]	; (801a7b4 <reg_dhcp_cbfunc+0x60>)
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	6013      	str	r3, [r2, #0]
}
 801a796:	bf00      	nop
 801a798:	3714      	adds	r7, #20
 801a79a:	46bd      	mov	sp, r7
 801a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a0:	4770      	bx	lr
 801a7a2:	bf00      	nop
 801a7a4:	20000104 	.word	0x20000104
 801a7a8:	0801a6b5 	.word	0x0801a6b5
 801a7ac:	20000108 	.word	0x20000108
 801a7b0:	0801a6ed 	.word	0x0801a6ed
 801a7b4:	2000010c 	.word	0x2000010c
 801a7b8:	0801a719 	.word	0x0801a719

0801a7bc <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801a7bc:	b580      	push	{r7, lr}
 801a7be:	b084      	sub	sp, #16
 801a7c0:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801a7c2:	463b      	mov	r3, r7
 801a7c4:	2206      	movs	r2, #6
 801a7c6:	4619      	mov	r1, r3
 801a7c8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a7cc:	f7fd ff6e 	bl	80186ac <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801a7d0:	4b72      	ldr	r3, [pc, #456]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	2201      	movs	r2, #1
 801a7d6:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801a7d8:	4b70      	ldr	r3, [pc, #448]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a7da:	681b      	ldr	r3, [r3, #0]
 801a7dc:	2201      	movs	r2, #1
 801a7de:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801a7e0:	4b6e      	ldr	r3, [pc, #440]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	2206      	movs	r2, #6
 801a7e6:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801a7e8:	4b6c      	ldr	r3, [pc, #432]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	2200      	movs	r2, #0
 801a7ee:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801a7f0:	4b6a      	ldr	r3, [pc, #424]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	3304      	adds	r3, #4
 801a7f6:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801a7f8:	4b69      	ldr	r3, [pc, #420]	; (801a9a0 <makeDHCPMSG+0x1e4>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	0e1b      	lsrs	r3, r3, #24
 801a7fe:	b2da      	uxtb	r2, r3
 801a800:	68bb      	ldr	r3, [r7, #8]
 801a802:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801a804:	4b66      	ldr	r3, [pc, #408]	; (801a9a0 <makeDHCPMSG+0x1e4>)
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	0c1a      	lsrs	r2, r3, #16
 801a80a:	68bb      	ldr	r3, [r7, #8]
 801a80c:	3301      	adds	r3, #1
 801a80e:	b2d2      	uxtb	r2, r2
 801a810:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801a812:	4b63      	ldr	r3, [pc, #396]	; (801a9a0 <makeDHCPMSG+0x1e4>)
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	0a1a      	lsrs	r2, r3, #8
 801a818:	68bb      	ldr	r3, [r7, #8]
 801a81a:	3302      	adds	r3, #2
 801a81c:	b2d2      	uxtb	r2, r2
 801a81e:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801a820:	4b5f      	ldr	r3, [pc, #380]	; (801a9a0 <makeDHCPMSG+0x1e4>)
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	68bb      	ldr	r3, [r7, #8]
 801a826:	3303      	adds	r3, #3
 801a828:	b2d2      	uxtb	r2, r2
 801a82a:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801a82c:	4b5b      	ldr	r3, [pc, #364]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	2200      	movs	r2, #0
 801a832:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801a834:	4b59      	ldr	r3, [pc, #356]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	330a      	adds	r3, #10
 801a83a:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801a83c:	68bb      	ldr	r3, [r7, #8]
 801a83e:	2280      	movs	r2, #128	; 0x80
 801a840:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801a842:	68bb      	ldr	r3, [r7, #8]
 801a844:	3301      	adds	r3, #1
 801a846:	2200      	movs	r2, #0
 801a848:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801a84a:	4b54      	ldr	r3, [pc, #336]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2200      	movs	r2, #0
 801a850:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801a852:	4b52      	ldr	r3, [pc, #328]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	2200      	movs	r2, #0
 801a858:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801a85a:	4b50      	ldr	r3, [pc, #320]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	2200      	movs	r2, #0
 801a860:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801a862:	4b4e      	ldr	r3, [pc, #312]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	2200      	movs	r2, #0
 801a868:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801a86a:	4b4c      	ldr	r3, [pc, #304]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	2200      	movs	r2, #0
 801a870:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801a872:	4b4a      	ldr	r3, [pc, #296]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	2200      	movs	r2, #0
 801a878:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801a87a:	4b48      	ldr	r3, [pc, #288]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	2200      	movs	r2, #0
 801a880:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801a882:	4b46      	ldr	r3, [pc, #280]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	2200      	movs	r2, #0
 801a888:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801a88a:	4b44      	ldr	r3, [pc, #272]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	2200      	movs	r2, #0
 801a890:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801a892:	4b42      	ldr	r3, [pc, #264]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a894:	681b      	ldr	r3, [r3, #0]
 801a896:	2200      	movs	r2, #0
 801a898:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801a89a:	4b40      	ldr	r3, [pc, #256]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	2200      	movs	r2, #0
 801a8a0:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801a8a2:	4b3e      	ldr	r3, [pc, #248]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801a8aa:	4b3c      	ldr	r3, [pc, #240]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801a8b2:	4b3a      	ldr	r3, [pc, #232]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801a8ba:	4b38      	ldr	r3, [pc, #224]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	2200      	movs	r2, #0
 801a8c0:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801a8c2:	4b36      	ldr	r3, [pc, #216]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801a8ca:	4b34      	ldr	r3, [pc, #208]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	4a35      	ldr	r2, [pc, #212]	; (801a9a4 <makeDHCPMSG+0x1e8>)
 801a8d0:	7812      	ldrb	r2, [r2, #0]
 801a8d2:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801a8d4:	4b31      	ldr	r3, [pc, #196]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	4a32      	ldr	r2, [pc, #200]	; (801a9a4 <makeDHCPMSG+0x1e8>)
 801a8da:	7852      	ldrb	r2, [r2, #1]
 801a8dc:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801a8de:	4b2f      	ldr	r3, [pc, #188]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	4a30      	ldr	r2, [pc, #192]	; (801a9a4 <makeDHCPMSG+0x1e8>)
 801a8e4:	7892      	ldrb	r2, [r2, #2]
 801a8e6:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801a8e8:	4b2c      	ldr	r3, [pc, #176]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	4a2d      	ldr	r2, [pc, #180]	; (801a9a4 <makeDHCPMSG+0x1e8>)
 801a8ee:	78d2      	ldrb	r2, [r2, #3]
 801a8f0:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801a8f2:	4b2a      	ldr	r3, [pc, #168]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	4a2b      	ldr	r2, [pc, #172]	; (801a9a4 <makeDHCPMSG+0x1e8>)
 801a8f8:	7912      	ldrb	r2, [r2, #4]
 801a8fa:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801a8fe:	4b27      	ldr	r3, [pc, #156]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	4a28      	ldr	r2, [pc, #160]	; (801a9a4 <makeDHCPMSG+0x1e8>)
 801a904:	7952      	ldrb	r2, [r2, #5]
 801a906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801a90a:	2306      	movs	r3, #6
 801a90c:	73fb      	strb	r3, [r7, #15]
 801a90e:	e008      	b.n	801a922 <makeDHCPMSG+0x166>
 801a910:	4b22      	ldr	r3, [pc, #136]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a912:	681a      	ldr	r2, [r3, #0]
 801a914:	7bfb      	ldrb	r3, [r7, #15]
 801a916:	4413      	add	r3, r2
 801a918:	2200      	movs	r2, #0
 801a91a:	771a      	strb	r2, [r3, #28]
 801a91c:	7bfb      	ldrb	r3, [r7, #15]
 801a91e:	3301      	adds	r3, #1
 801a920:	73fb      	strb	r3, [r7, #15]
 801a922:	7bfb      	ldrb	r3, [r7, #15]
 801a924:	2b0f      	cmp	r3, #15
 801a926:	d9f3      	bls.n	801a910 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801a928:	2300      	movs	r3, #0
 801a92a:	73fb      	strb	r3, [r7, #15]
 801a92c:	e009      	b.n	801a942 <makeDHCPMSG+0x186>
 801a92e:	4b1b      	ldr	r3, [pc, #108]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a930:	681a      	ldr	r2, [r3, #0]
 801a932:	7bfb      	ldrb	r3, [r7, #15]
 801a934:	4413      	add	r3, r2
 801a936:	2200      	movs	r2, #0
 801a938:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801a93c:	7bfb      	ldrb	r3, [r7, #15]
 801a93e:	3301      	adds	r3, #1
 801a940:	73fb      	strb	r3, [r7, #15]
 801a942:	7bfb      	ldrb	r3, [r7, #15]
 801a944:	2b3f      	cmp	r3, #63	; 0x3f
 801a946:	d9f2      	bls.n	801a92e <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801a948:	2300      	movs	r3, #0
 801a94a:	73fb      	strb	r3, [r7, #15]
 801a94c:	e009      	b.n	801a962 <makeDHCPMSG+0x1a6>
 801a94e:	4b13      	ldr	r3, [pc, #76]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a950:	681a      	ldr	r2, [r3, #0]
 801a952:	7bfb      	ldrb	r3, [r7, #15]
 801a954:	4413      	add	r3, r2
 801a956:	2200      	movs	r2, #0
 801a958:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801a95c:	7bfb      	ldrb	r3, [r7, #15]
 801a95e:	3301      	adds	r3, #1
 801a960:	73fb      	strb	r3, [r7, #15]
 801a962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a966:	2b00      	cmp	r3, #0
 801a968:	daf1      	bge.n	801a94e <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801a96a:	4b0c      	ldr	r3, [pc, #48]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	2263      	movs	r2, #99	; 0x63
 801a970:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801a974:	4b09      	ldr	r3, [pc, #36]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a976:	681b      	ldr	r3, [r3, #0]
 801a978:	2282      	movs	r2, #130	; 0x82
 801a97a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801a97e:	4b07      	ldr	r3, [pc, #28]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a980:	681b      	ldr	r3, [r3, #0]
 801a982:	2253      	movs	r2, #83	; 0x53
 801a984:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801a988:	4b04      	ldr	r3, [pc, #16]	; (801a99c <makeDHCPMSG+0x1e0>)
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	2263      	movs	r2, #99	; 0x63
 801a98e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 801a992:	bf00      	nop
 801a994:	3710      	adds	r7, #16
 801a996:	46bd      	mov	sp, r7
 801a998:	bd80      	pop	{r7, pc}
 801a99a:	bf00      	nop
 801a99c:	200009b0 	.word	0x200009b0
 801a9a0:	200009ac 	.word	0x200009ac
 801a9a4:	200009b4 	.word	0x200009b4

0801a9a8 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801a9a8:	b5b0      	push	{r4, r5, r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801a9b2:	f7ff ff03 	bl	801a7bc <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801a9b6:	4b56      	ldr	r3, [pc, #344]	; (801ab10 <send_DHCP_DISCOVER+0x168>)
 801a9b8:	2200      	movs	r2, #0
 801a9ba:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801a9bc:	4b54      	ldr	r3, [pc, #336]	; (801ab10 <send_DHCP_DISCOVER+0x168>)
 801a9be:	2200      	movs	r2, #0
 801a9c0:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801a9c2:	4b53      	ldr	r3, [pc, #332]	; (801ab10 <send_DHCP_DISCOVER+0x168>)
 801a9c4:	2200      	movs	r2, #0
 801a9c6:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801a9c8:	4b51      	ldr	r3, [pc, #324]	; (801ab10 <send_DHCP_DISCOVER+0x168>)
 801a9ca:	2200      	movs	r2, #0
 801a9cc:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801a9ce:	4b51      	ldr	r3, [pc, #324]	; (801ab14 <send_DHCP_DISCOVER+0x16c>)
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801a9d4:	4b4f      	ldr	r3, [pc, #316]	; (801ab14 <send_DHCP_DISCOVER+0x16c>)
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801a9da:	4b4e      	ldr	r3, [pc, #312]	; (801ab14 <send_DHCP_DISCOVER+0x16c>)
 801a9dc:	2200      	movs	r2, #0
 801a9de:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801a9e0:	4b4c      	ldr	r3, [pc, #304]	; (801ab14 <send_DHCP_DISCOVER+0x16c>)
 801a9e2:	2200      	movs	r2, #0
 801a9e4:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801a9e6:	2304      	movs	r3, #4
 801a9e8:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801a9ea:	4b4b      	ldr	r3, [pc, #300]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801a9ec:	681a      	ldr	r2, [r3, #0]
 801a9ee:	88bb      	ldrh	r3, [r7, #4]
 801a9f0:	1c59      	adds	r1, r3, #1
 801a9f2:	80b9      	strh	r1, [r7, #4]
 801a9f4:	4413      	add	r3, r2
 801a9f6:	2235      	movs	r2, #53	; 0x35
 801a9f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801a9fc:	4b46      	ldr	r3, [pc, #280]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801a9fe:	681a      	ldr	r2, [r3, #0]
 801aa00:	88bb      	ldrh	r3, [r7, #4]
 801aa02:	1c59      	adds	r1, r3, #1
 801aa04:	80b9      	strh	r1, [r7, #4]
 801aa06:	4413      	add	r3, r2
 801aa08:	2201      	movs	r2, #1
 801aa0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801aa0e:	4b42      	ldr	r3, [pc, #264]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aa10:	681a      	ldr	r2, [r3, #0]
 801aa12:	88bb      	ldrh	r3, [r7, #4]
 801aa14:	1c59      	adds	r1, r3, #1
 801aa16:	80b9      	strh	r1, [r7, #4]
 801aa18:	4413      	add	r3, r2
 801aa1a:	2201      	movs	r2, #1
 801aa1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801aa20:	4b3d      	ldr	r3, [pc, #244]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aa22:	681a      	ldr	r2, [r3, #0]
 801aa24:	88bb      	ldrh	r3, [r7, #4]
 801aa26:	1c59      	adds	r1, r3, #1
 801aa28:	80b9      	strh	r1, [r7, #4]
 801aa2a:	4413      	add	r3, r2
 801aa2c:	223d      	movs	r2, #61	; 0x3d
 801aa2e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801aa32:	4b39      	ldr	r3, [pc, #228]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aa34:	681a      	ldr	r2, [r3, #0]
 801aa36:	88bb      	ldrh	r3, [r7, #4]
 801aa38:	1c59      	adds	r1, r3, #1
 801aa3a:	80b9      	strh	r1, [r7, #4]
 801aa3c:	4413      	add	r3, r2
 801aa3e:	2207      	movs	r2, #7
 801aa40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801aa44:	4b34      	ldr	r3, [pc, #208]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aa46:	681a      	ldr	r2, [r3, #0]
 801aa48:	88bb      	ldrh	r3, [r7, #4]
 801aa4a:	1c59      	adds	r1, r3, #1
 801aa4c:	80b9      	strh	r1, [r7, #4]
 801aa4e:	4413      	add	r3, r2
 801aa50:	2201      	movs	r2, #1
 801aa52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801aa56:	4b30      	ldr	r3, [pc, #192]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aa58:	681a      	ldr	r2, [r3, #0]
 801aa5a:	88bb      	ldrh	r3, [r7, #4]
 801aa5c:	1c59      	adds	r1, r3, #1
 801aa5e:	80b9      	strh	r1, [r7, #4]
 801aa60:	4618      	mov	r0, r3
 801aa62:	4b2e      	ldr	r3, [pc, #184]	; (801ab1c <send_DHCP_DISCOVER+0x174>)
 801aa64:	7819      	ldrb	r1, [r3, #0]
 801aa66:	1813      	adds	r3, r2, r0
 801aa68:	460a      	mov	r2, r1
 801aa6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801aa6e:	4b2a      	ldr	r3, [pc, #168]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aa70:	681a      	ldr	r2, [r3, #0]
 801aa72:	88bb      	ldrh	r3, [r7, #4]
 801aa74:	1c59      	adds	r1, r3, #1
 801aa76:	80b9      	strh	r1, [r7, #4]
 801aa78:	4618      	mov	r0, r3
 801aa7a:	4b28      	ldr	r3, [pc, #160]	; (801ab1c <send_DHCP_DISCOVER+0x174>)
 801aa7c:	7859      	ldrb	r1, [r3, #1]
 801aa7e:	1813      	adds	r3, r2, r0
 801aa80:	460a      	mov	r2, r1
 801aa82:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801aa86:	4b24      	ldr	r3, [pc, #144]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aa88:	681a      	ldr	r2, [r3, #0]
 801aa8a:	88bb      	ldrh	r3, [r7, #4]
 801aa8c:	1c59      	adds	r1, r3, #1
 801aa8e:	80b9      	strh	r1, [r7, #4]
 801aa90:	4618      	mov	r0, r3
 801aa92:	4b22      	ldr	r3, [pc, #136]	; (801ab1c <send_DHCP_DISCOVER+0x174>)
 801aa94:	7899      	ldrb	r1, [r3, #2]
 801aa96:	1813      	adds	r3, r2, r0
 801aa98:	460a      	mov	r2, r1
 801aa9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801aa9e:	4b1e      	ldr	r3, [pc, #120]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aaa0:	681a      	ldr	r2, [r3, #0]
 801aaa2:	88bb      	ldrh	r3, [r7, #4]
 801aaa4:	1c59      	adds	r1, r3, #1
 801aaa6:	80b9      	strh	r1, [r7, #4]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	4b1c      	ldr	r3, [pc, #112]	; (801ab1c <send_DHCP_DISCOVER+0x174>)
 801aaac:	78d9      	ldrb	r1, [r3, #3]
 801aaae:	1813      	adds	r3, r2, r0
 801aab0:	460a      	mov	r2, r1
 801aab2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801aab6:	4b18      	ldr	r3, [pc, #96]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	88bb      	ldrh	r3, [r7, #4]
 801aabc:	1c59      	adds	r1, r3, #1
 801aabe:	80b9      	strh	r1, [r7, #4]
 801aac0:	4618      	mov	r0, r3
 801aac2:	4b16      	ldr	r3, [pc, #88]	; (801ab1c <send_DHCP_DISCOVER+0x174>)
 801aac4:	7919      	ldrb	r1, [r3, #4]
 801aac6:	1813      	adds	r3, r2, r0
 801aac8:	460a      	mov	r2, r1
 801aaca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801aace:	4b12      	ldr	r3, [pc, #72]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aad0:	681a      	ldr	r2, [r3, #0]
 801aad2:	88bb      	ldrh	r3, [r7, #4]
 801aad4:	1c59      	adds	r1, r3, #1
 801aad6:	80b9      	strh	r1, [r7, #4]
 801aad8:	4618      	mov	r0, r3
 801aada:	4b10      	ldr	r3, [pc, #64]	; (801ab1c <send_DHCP_DISCOVER+0x174>)
 801aadc:	7959      	ldrb	r1, [r3, #5]
 801aade:	1813      	adds	r3, r2, r0
 801aae0:	460a      	mov	r2, r1
 801aae2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801aae6:	4b0c      	ldr	r3, [pc, #48]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aae8:	681a      	ldr	r2, [r3, #0]
 801aaea:	88bb      	ldrh	r3, [r7, #4]
 801aaec:	1c59      	adds	r1, r3, #1
 801aaee:	80b9      	strh	r1, [r7, #4]
 801aaf0:	4413      	add	r3, r2
 801aaf2:	220c      	movs	r2, #12
 801aaf4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801aaf8:	4b07      	ldr	r3, [pc, #28]	; (801ab18 <send_DHCP_DISCOVER+0x170>)
 801aafa:	681a      	ldr	r2, [r3, #0]
 801aafc:	88bb      	ldrh	r3, [r7, #4]
 801aafe:	1c59      	adds	r1, r3, #1
 801ab00:	80b9      	strh	r1, [r7, #4]
 801ab02:	4413      	add	r3, r2
 801ab04:	2200      	movs	r2, #0
 801ab06:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	80fb      	strh	r3, [r7, #6]
 801ab0e:	e017      	b.n	801ab40 <send_DHCP_DISCOVER+0x198>
 801ab10:	20000988 	.word	0x20000988
 801ab14:	2000098c 	.word	0x2000098c
 801ab18:	200009b0 	.word	0x200009b0
 801ab1c:	200009b4 	.word	0x200009b4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801ab20:	88f9      	ldrh	r1, [r7, #6]
 801ab22:	4b80      	ldr	r3, [pc, #512]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ab24:	681a      	ldr	r2, [r3, #0]
 801ab26:	88bb      	ldrh	r3, [r7, #4]
 801ab28:	1c58      	adds	r0, r3, #1
 801ab2a:	80b8      	strh	r0, [r7, #4]
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	4b7e      	ldr	r3, [pc, #504]	; (801ad28 <send_DHCP_DISCOVER+0x380>)
 801ab30:	5c59      	ldrb	r1, [r3, r1]
 801ab32:	1813      	adds	r3, r2, r0
 801ab34:	460a      	mov	r2, r1
 801ab36:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ab3a:	88fb      	ldrh	r3, [r7, #6]
 801ab3c:	3301      	adds	r3, #1
 801ab3e:	80fb      	strh	r3, [r7, #6]
 801ab40:	88fb      	ldrh	r3, [r7, #6]
 801ab42:	4a79      	ldr	r2, [pc, #484]	; (801ad28 <send_DHCP_DISCOVER+0x380>)
 801ab44:	5cd3      	ldrb	r3, [r2, r3]
 801ab46:	2b00      	cmp	r3, #0
 801ab48:	d1ea      	bne.n	801ab20 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801ab4a:	4b78      	ldr	r3, [pc, #480]	; (801ad2c <send_DHCP_DISCOVER+0x384>)
 801ab4c:	78db      	ldrb	r3, [r3, #3]
 801ab4e:	091b      	lsrs	r3, r3, #4
 801ab50:	b2da      	uxtb	r2, r3
 801ab52:	4b74      	ldr	r3, [pc, #464]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ab54:	681c      	ldr	r4, [r3, #0]
 801ab56:	88bb      	ldrh	r3, [r7, #4]
 801ab58:	1c59      	adds	r1, r3, #1
 801ab5a:	80b9      	strh	r1, [r7, #4]
 801ab5c:	461d      	mov	r5, r3
 801ab5e:	4610      	mov	r0, r2
 801ab60:	f001 f9e4 	bl	801bf2c <NibbleToHex>
 801ab64:	4603      	mov	r3, r0
 801ab66:	461a      	mov	r2, r3
 801ab68:	1963      	adds	r3, r4, r5
 801ab6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801ab6e:	4b6f      	ldr	r3, [pc, #444]	; (801ad2c <send_DHCP_DISCOVER+0x384>)
 801ab70:	78da      	ldrb	r2, [r3, #3]
 801ab72:	4b6c      	ldr	r3, [pc, #432]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ab74:	681c      	ldr	r4, [r3, #0]
 801ab76:	88bb      	ldrh	r3, [r7, #4]
 801ab78:	1c59      	adds	r1, r3, #1
 801ab7a:	80b9      	strh	r1, [r7, #4]
 801ab7c:	461d      	mov	r5, r3
 801ab7e:	4610      	mov	r0, r2
 801ab80:	f001 f9d4 	bl	801bf2c <NibbleToHex>
 801ab84:	4603      	mov	r3, r0
 801ab86:	461a      	mov	r2, r3
 801ab88:	1963      	adds	r3, r4, r5
 801ab8a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801ab8e:	4b67      	ldr	r3, [pc, #412]	; (801ad2c <send_DHCP_DISCOVER+0x384>)
 801ab90:	791b      	ldrb	r3, [r3, #4]
 801ab92:	091b      	lsrs	r3, r3, #4
 801ab94:	b2da      	uxtb	r2, r3
 801ab96:	4b63      	ldr	r3, [pc, #396]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ab98:	681c      	ldr	r4, [r3, #0]
 801ab9a:	88bb      	ldrh	r3, [r7, #4]
 801ab9c:	1c59      	adds	r1, r3, #1
 801ab9e:	80b9      	strh	r1, [r7, #4]
 801aba0:	461d      	mov	r5, r3
 801aba2:	4610      	mov	r0, r2
 801aba4:	f001 f9c2 	bl	801bf2c <NibbleToHex>
 801aba8:	4603      	mov	r3, r0
 801abaa:	461a      	mov	r2, r3
 801abac:	1963      	adds	r3, r4, r5
 801abae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801abb2:	4b5e      	ldr	r3, [pc, #376]	; (801ad2c <send_DHCP_DISCOVER+0x384>)
 801abb4:	791a      	ldrb	r2, [r3, #4]
 801abb6:	4b5b      	ldr	r3, [pc, #364]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801abb8:	681c      	ldr	r4, [r3, #0]
 801abba:	88bb      	ldrh	r3, [r7, #4]
 801abbc:	1c59      	adds	r1, r3, #1
 801abbe:	80b9      	strh	r1, [r7, #4]
 801abc0:	461d      	mov	r5, r3
 801abc2:	4610      	mov	r0, r2
 801abc4:	f001 f9b2 	bl	801bf2c <NibbleToHex>
 801abc8:	4603      	mov	r3, r0
 801abca:	461a      	mov	r2, r3
 801abcc:	1963      	adds	r3, r4, r5
 801abce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801abd2:	4b56      	ldr	r3, [pc, #344]	; (801ad2c <send_DHCP_DISCOVER+0x384>)
 801abd4:	795b      	ldrb	r3, [r3, #5]
 801abd6:	091b      	lsrs	r3, r3, #4
 801abd8:	b2da      	uxtb	r2, r3
 801abda:	4b52      	ldr	r3, [pc, #328]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801abdc:	681c      	ldr	r4, [r3, #0]
 801abde:	88bb      	ldrh	r3, [r7, #4]
 801abe0:	1c59      	adds	r1, r3, #1
 801abe2:	80b9      	strh	r1, [r7, #4]
 801abe4:	461d      	mov	r5, r3
 801abe6:	4610      	mov	r0, r2
 801abe8:	f001 f9a0 	bl	801bf2c <NibbleToHex>
 801abec:	4603      	mov	r3, r0
 801abee:	461a      	mov	r2, r3
 801abf0:	1963      	adds	r3, r4, r5
 801abf2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801abf6:	4b4d      	ldr	r3, [pc, #308]	; (801ad2c <send_DHCP_DISCOVER+0x384>)
 801abf8:	795a      	ldrb	r2, [r3, #5]
 801abfa:	4b4a      	ldr	r3, [pc, #296]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801abfc:	681c      	ldr	r4, [r3, #0]
 801abfe:	88bb      	ldrh	r3, [r7, #4]
 801ac00:	1c59      	adds	r1, r3, #1
 801ac02:	80b9      	strh	r1, [r7, #4]
 801ac04:	461d      	mov	r5, r3
 801ac06:	4610      	mov	r0, r2
 801ac08:	f001 f990 	bl	801bf2c <NibbleToHex>
 801ac0c:	4603      	mov	r3, r0
 801ac0e:	461a      	mov	r2, r3
 801ac10:	1963      	adds	r3, r4, r5
 801ac12:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801ac16:	88fb      	ldrh	r3, [r7, #6]
 801ac18:	b2d9      	uxtb	r1, r3
 801ac1a:	4b42      	ldr	r3, [pc, #264]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ac1c:	681a      	ldr	r2, [r3, #0]
 801ac1e:	88b8      	ldrh	r0, [r7, #4]
 801ac20:	88fb      	ldrh	r3, [r7, #6]
 801ac22:	3307      	adds	r3, #7
 801ac24:	1ac3      	subs	r3, r0, r3
 801ac26:	3106      	adds	r1, #6
 801ac28:	b2c9      	uxtb	r1, r1
 801ac2a:	4413      	add	r3, r2
 801ac2c:	460a      	mov	r2, r1
 801ac2e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801ac32:	4b3c      	ldr	r3, [pc, #240]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ac34:	681a      	ldr	r2, [r3, #0]
 801ac36:	88bb      	ldrh	r3, [r7, #4]
 801ac38:	1c59      	adds	r1, r3, #1
 801ac3a:	80b9      	strh	r1, [r7, #4]
 801ac3c:	4413      	add	r3, r2
 801ac3e:	2237      	movs	r2, #55	; 0x37
 801ac40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801ac44:	4b37      	ldr	r3, [pc, #220]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ac46:	681a      	ldr	r2, [r3, #0]
 801ac48:	88bb      	ldrh	r3, [r7, #4]
 801ac4a:	1c59      	adds	r1, r3, #1
 801ac4c:	80b9      	strh	r1, [r7, #4]
 801ac4e:	4413      	add	r3, r2
 801ac50:	2206      	movs	r2, #6
 801ac52:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801ac56:	4b33      	ldr	r3, [pc, #204]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ac58:	681a      	ldr	r2, [r3, #0]
 801ac5a:	88bb      	ldrh	r3, [r7, #4]
 801ac5c:	1c59      	adds	r1, r3, #1
 801ac5e:	80b9      	strh	r1, [r7, #4]
 801ac60:	4413      	add	r3, r2
 801ac62:	2201      	movs	r2, #1
 801ac64:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801ac68:	4b2e      	ldr	r3, [pc, #184]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ac6a:	681a      	ldr	r2, [r3, #0]
 801ac6c:	88bb      	ldrh	r3, [r7, #4]
 801ac6e:	1c59      	adds	r1, r3, #1
 801ac70:	80b9      	strh	r1, [r7, #4]
 801ac72:	4413      	add	r3, r2
 801ac74:	2203      	movs	r2, #3
 801ac76:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801ac7a:	4b2a      	ldr	r3, [pc, #168]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ac7c:	681a      	ldr	r2, [r3, #0]
 801ac7e:	88bb      	ldrh	r3, [r7, #4]
 801ac80:	1c59      	adds	r1, r3, #1
 801ac82:	80b9      	strh	r1, [r7, #4]
 801ac84:	4413      	add	r3, r2
 801ac86:	2206      	movs	r2, #6
 801ac88:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801ac8c:	4b25      	ldr	r3, [pc, #148]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ac8e:	681a      	ldr	r2, [r3, #0]
 801ac90:	88bb      	ldrh	r3, [r7, #4]
 801ac92:	1c59      	adds	r1, r3, #1
 801ac94:	80b9      	strh	r1, [r7, #4]
 801ac96:	4413      	add	r3, r2
 801ac98:	220f      	movs	r2, #15
 801ac9a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801ac9e:	4b21      	ldr	r3, [pc, #132]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801aca0:	681a      	ldr	r2, [r3, #0]
 801aca2:	88bb      	ldrh	r3, [r7, #4]
 801aca4:	1c59      	adds	r1, r3, #1
 801aca6:	80b9      	strh	r1, [r7, #4]
 801aca8:	4413      	add	r3, r2
 801acaa:	223a      	movs	r2, #58	; 0x3a
 801acac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801acb0:	4b1c      	ldr	r3, [pc, #112]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801acb2:	681a      	ldr	r2, [r3, #0]
 801acb4:	88bb      	ldrh	r3, [r7, #4]
 801acb6:	1c59      	adds	r1, r3, #1
 801acb8:	80b9      	strh	r1, [r7, #4]
 801acba:	4413      	add	r3, r2
 801acbc:	223b      	movs	r2, #59	; 0x3b
 801acbe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801acc2:	4b18      	ldr	r3, [pc, #96]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801acc4:	681a      	ldr	r2, [r3, #0]
 801acc6:	88bb      	ldrh	r3, [r7, #4]
 801acc8:	1c59      	adds	r1, r3, #1
 801acca:	80b9      	strh	r1, [r7, #4]
 801accc:	4413      	add	r3, r2
 801acce:	22ff      	movs	r2, #255	; 0xff
 801acd0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801acd4:	88bb      	ldrh	r3, [r7, #4]
 801acd6:	80fb      	strh	r3, [r7, #6]
 801acd8:	e009      	b.n	801acee <send_DHCP_DISCOVER+0x346>
 801acda:	4b12      	ldr	r3, [pc, #72]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801acdc:	681a      	ldr	r2, [r3, #0]
 801acde:	88fb      	ldrh	r3, [r7, #6]
 801ace0:	4413      	add	r3, r2
 801ace2:	2200      	movs	r2, #0
 801ace4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801ace8:	88fb      	ldrh	r3, [r7, #6]
 801acea:	3301      	adds	r3, #1
 801acec:	80fb      	strh	r3, [r7, #6]
 801acee:	88fb      	ldrh	r3, [r7, #6]
 801acf0:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801acf4:	d3f1      	bcc.n	801acda <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801acf6:	23ff      	movs	r3, #255	; 0xff
 801acf8:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801acfa:	23ff      	movs	r3, #255	; 0xff
 801acfc:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801acfe:	23ff      	movs	r3, #255	; 0xff
 801ad00:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801ad02:	23ff      	movs	r3, #255	; 0xff
 801ad04:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801ad06:	4b0a      	ldr	r3, [pc, #40]	; (801ad30 <send_DHCP_DISCOVER+0x388>)
 801ad08:	7818      	ldrb	r0, [r3, #0]
 801ad0a:	4b06      	ldr	r3, [pc, #24]	; (801ad24 <send_DHCP_DISCOVER+0x37c>)
 801ad0c:	6819      	ldr	r1, [r3, #0]
 801ad0e:	463b      	mov	r3, r7
 801ad10:	2243      	movs	r2, #67	; 0x43
 801ad12:	9200      	str	r2, [sp, #0]
 801ad14:	f44f 7209 	mov.w	r2, #548	; 0x224
 801ad18:	f7fe fbfc 	bl	8019514 <sendto>
}
 801ad1c:	bf00      	nop
 801ad1e:	3708      	adds	r7, #8
 801ad20:	46bd      	mov	sp, r7
 801ad22:	bdb0      	pop	{r4, r5, r7, pc}
 801ad24:	200009b0 	.word	0x200009b0
 801ad28:	200000f8 	.word	0x200000f8
 801ad2c:	200009b4 	.word	0x200009b4
 801ad30:	20000985 	.word	0x20000985

0801ad34 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801ad34:	b5b0      	push	{r4, r5, r7, lr}
 801ad36:	b086      	sub	sp, #24
 801ad38:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801ad3a:	2300      	movs	r3, #0
 801ad3c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801ad3e:	f7ff fd3d 	bl	801a7bc <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801ad42:	4b1b      	ldr	r3, [pc, #108]	; (801adb0 <send_DHCP_REQUEST+0x7c>)
 801ad44:	f993 3000 	ldrsb.w	r3, [r3]
 801ad48:	2b03      	cmp	r3, #3
 801ad4a:	d004      	beq.n	801ad56 <send_DHCP_REQUEST+0x22>
 801ad4c:	4b18      	ldr	r3, [pc, #96]	; (801adb0 <send_DHCP_REQUEST+0x7c>)
 801ad4e:	f993 3000 	ldrsb.w	r3, [r3]
 801ad52:	2b04      	cmp	r3, #4
 801ad54:	d134      	bne.n	801adc0 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801ad56:	4b17      	ldr	r3, [pc, #92]	; (801adb4 <send_DHCP_REQUEST+0x80>)
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	330a      	adds	r3, #10
 801ad5c:	2200      	movs	r2, #0
 801ad5e:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801ad60:	4b14      	ldr	r3, [pc, #80]	; (801adb4 <send_DHCP_REQUEST+0x80>)
 801ad62:	681b      	ldr	r3, [r3, #0]
 801ad64:	330a      	adds	r3, #10
 801ad66:	3301      	adds	r3, #1
 801ad68:	2200      	movs	r2, #0
 801ad6a:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801ad6c:	4b11      	ldr	r3, [pc, #68]	; (801adb4 <send_DHCP_REQUEST+0x80>)
 801ad6e:	681b      	ldr	r3, [r3, #0]
 801ad70:	4a11      	ldr	r2, [pc, #68]	; (801adb8 <send_DHCP_REQUEST+0x84>)
 801ad72:	7812      	ldrb	r2, [r2, #0]
 801ad74:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801ad76:	4b0f      	ldr	r3, [pc, #60]	; (801adb4 <send_DHCP_REQUEST+0x80>)
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	4a0f      	ldr	r2, [pc, #60]	; (801adb8 <send_DHCP_REQUEST+0x84>)
 801ad7c:	7852      	ldrb	r2, [r2, #1]
 801ad7e:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801ad80:	4b0c      	ldr	r3, [pc, #48]	; (801adb4 <send_DHCP_REQUEST+0x80>)
 801ad82:	681b      	ldr	r3, [r3, #0]
 801ad84:	4a0c      	ldr	r2, [pc, #48]	; (801adb8 <send_DHCP_REQUEST+0x84>)
 801ad86:	7892      	ldrb	r2, [r2, #2]
 801ad88:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801ad8a:	4b0a      	ldr	r3, [pc, #40]	; (801adb4 <send_DHCP_REQUEST+0x80>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	4a0a      	ldr	r2, [pc, #40]	; (801adb8 <send_DHCP_REQUEST+0x84>)
 801ad90:	78d2      	ldrb	r2, [r2, #3]
 801ad92:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801ad94:	4b09      	ldr	r3, [pc, #36]	; (801adbc <send_DHCP_REQUEST+0x88>)
 801ad96:	781b      	ldrb	r3, [r3, #0]
 801ad98:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801ad9a:	4b08      	ldr	r3, [pc, #32]	; (801adbc <send_DHCP_REQUEST+0x88>)
 801ad9c:	785b      	ldrb	r3, [r3, #1]
 801ad9e:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801ada0:	4b06      	ldr	r3, [pc, #24]	; (801adbc <send_DHCP_REQUEST+0x88>)
 801ada2:	789b      	ldrb	r3, [r3, #2]
 801ada4:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801ada6:	4b05      	ldr	r3, [pc, #20]	; (801adbc <send_DHCP_REQUEST+0x88>)
 801ada8:	78db      	ldrb	r3, [r3, #3]
 801adaa:	71fb      	strb	r3, [r7, #7]
 801adac:	e010      	b.n	801add0 <send_DHCP_REQUEST+0x9c>
 801adae:	bf00      	nop
 801adb0:	200009a4 	.word	0x200009a4
 801adb4:	200009b0 	.word	0x200009b0
 801adb8:	20000994 	.word	0x20000994
 801adbc:	20000988 	.word	0x20000988
   }
   else
   {
   	ip[0] = 255;
 801adc0:	23ff      	movs	r3, #255	; 0xff
 801adc2:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801adc4:	23ff      	movs	r3, #255	; 0xff
 801adc6:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801adc8:	23ff      	movs	r3, #255	; 0xff
 801adca:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801adcc:	23ff      	movs	r3, #255	; 0xff
 801adce:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801add0:	2304      	movs	r3, #4
 801add2:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801add4:	4b8d      	ldr	r3, [pc, #564]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801add6:	681a      	ldr	r2, [r3, #0]
 801add8:	897b      	ldrh	r3, [r7, #10]
 801adda:	1c59      	adds	r1, r3, #1
 801addc:	8179      	strh	r1, [r7, #10]
 801adde:	4413      	add	r3, r2
 801ade0:	2235      	movs	r2, #53	; 0x35
 801ade2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ade6:	4b89      	ldr	r3, [pc, #548]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ade8:	681a      	ldr	r2, [r3, #0]
 801adea:	897b      	ldrh	r3, [r7, #10]
 801adec:	1c59      	adds	r1, r3, #1
 801adee:	8179      	strh	r1, [r7, #10]
 801adf0:	4413      	add	r3, r2
 801adf2:	2201      	movs	r2, #1
 801adf4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801adf8:	4b84      	ldr	r3, [pc, #528]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801adfa:	681a      	ldr	r2, [r3, #0]
 801adfc:	897b      	ldrh	r3, [r7, #10]
 801adfe:	1c59      	adds	r1, r3, #1
 801ae00:	8179      	strh	r1, [r7, #10]
 801ae02:	4413      	add	r3, r2
 801ae04:	2203      	movs	r2, #3
 801ae06:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801ae0a:	4b80      	ldr	r3, [pc, #512]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ae0c:	681a      	ldr	r2, [r3, #0]
 801ae0e:	897b      	ldrh	r3, [r7, #10]
 801ae10:	1c59      	adds	r1, r3, #1
 801ae12:	8179      	strh	r1, [r7, #10]
 801ae14:	4413      	add	r3, r2
 801ae16:	223d      	movs	r2, #61	; 0x3d
 801ae18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801ae1c:	4b7b      	ldr	r3, [pc, #492]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ae1e:	681a      	ldr	r2, [r3, #0]
 801ae20:	897b      	ldrh	r3, [r7, #10]
 801ae22:	1c59      	adds	r1, r3, #1
 801ae24:	8179      	strh	r1, [r7, #10]
 801ae26:	4413      	add	r3, r2
 801ae28:	2207      	movs	r2, #7
 801ae2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ae2e:	4b77      	ldr	r3, [pc, #476]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ae30:	681a      	ldr	r2, [r3, #0]
 801ae32:	897b      	ldrh	r3, [r7, #10]
 801ae34:	1c59      	adds	r1, r3, #1
 801ae36:	8179      	strh	r1, [r7, #10]
 801ae38:	4413      	add	r3, r2
 801ae3a:	2201      	movs	r2, #1
 801ae3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801ae40:	4b72      	ldr	r3, [pc, #456]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ae42:	681a      	ldr	r2, [r3, #0]
 801ae44:	897b      	ldrh	r3, [r7, #10]
 801ae46:	1c59      	adds	r1, r3, #1
 801ae48:	8179      	strh	r1, [r7, #10]
 801ae4a:	4618      	mov	r0, r3
 801ae4c:	4b70      	ldr	r3, [pc, #448]	; (801b010 <send_DHCP_REQUEST+0x2dc>)
 801ae4e:	7819      	ldrb	r1, [r3, #0]
 801ae50:	1813      	adds	r3, r2, r0
 801ae52:	460a      	mov	r2, r1
 801ae54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801ae58:	4b6c      	ldr	r3, [pc, #432]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ae5a:	681a      	ldr	r2, [r3, #0]
 801ae5c:	897b      	ldrh	r3, [r7, #10]
 801ae5e:	1c59      	adds	r1, r3, #1
 801ae60:	8179      	strh	r1, [r7, #10]
 801ae62:	4618      	mov	r0, r3
 801ae64:	4b6a      	ldr	r3, [pc, #424]	; (801b010 <send_DHCP_REQUEST+0x2dc>)
 801ae66:	7859      	ldrb	r1, [r3, #1]
 801ae68:	1813      	adds	r3, r2, r0
 801ae6a:	460a      	mov	r2, r1
 801ae6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801ae70:	4b66      	ldr	r3, [pc, #408]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ae72:	681a      	ldr	r2, [r3, #0]
 801ae74:	897b      	ldrh	r3, [r7, #10]
 801ae76:	1c59      	adds	r1, r3, #1
 801ae78:	8179      	strh	r1, [r7, #10]
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	4b64      	ldr	r3, [pc, #400]	; (801b010 <send_DHCP_REQUEST+0x2dc>)
 801ae7e:	7899      	ldrb	r1, [r3, #2]
 801ae80:	1813      	adds	r3, r2, r0
 801ae82:	460a      	mov	r2, r1
 801ae84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801ae88:	4b60      	ldr	r3, [pc, #384]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801ae8a:	681a      	ldr	r2, [r3, #0]
 801ae8c:	897b      	ldrh	r3, [r7, #10]
 801ae8e:	1c59      	adds	r1, r3, #1
 801ae90:	8179      	strh	r1, [r7, #10]
 801ae92:	4618      	mov	r0, r3
 801ae94:	4b5e      	ldr	r3, [pc, #376]	; (801b010 <send_DHCP_REQUEST+0x2dc>)
 801ae96:	78d9      	ldrb	r1, [r3, #3]
 801ae98:	1813      	adds	r3, r2, r0
 801ae9a:	460a      	mov	r2, r1
 801ae9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801aea0:	4b5a      	ldr	r3, [pc, #360]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801aea2:	681a      	ldr	r2, [r3, #0]
 801aea4:	897b      	ldrh	r3, [r7, #10]
 801aea6:	1c59      	adds	r1, r3, #1
 801aea8:	8179      	strh	r1, [r7, #10]
 801aeaa:	4618      	mov	r0, r3
 801aeac:	4b58      	ldr	r3, [pc, #352]	; (801b010 <send_DHCP_REQUEST+0x2dc>)
 801aeae:	7919      	ldrb	r1, [r3, #4]
 801aeb0:	1813      	adds	r3, r2, r0
 801aeb2:	460a      	mov	r2, r1
 801aeb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801aeb8:	4b54      	ldr	r3, [pc, #336]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801aeba:	681a      	ldr	r2, [r3, #0]
 801aebc:	897b      	ldrh	r3, [r7, #10]
 801aebe:	1c59      	adds	r1, r3, #1
 801aec0:	8179      	strh	r1, [r7, #10]
 801aec2:	4618      	mov	r0, r3
 801aec4:	4b52      	ldr	r3, [pc, #328]	; (801b010 <send_DHCP_REQUEST+0x2dc>)
 801aec6:	7959      	ldrb	r1, [r3, #5]
 801aec8:	1813      	adds	r3, r2, r0
 801aeca:	460a      	mov	r2, r1
 801aecc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801aed0:	79fb      	ldrb	r3, [r7, #7]
 801aed2:	2bff      	cmp	r3, #255	; 0xff
 801aed4:	f040 8084 	bne.w	801afe0 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801aed8:	4b4c      	ldr	r3, [pc, #304]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801aeda:	681a      	ldr	r2, [r3, #0]
 801aedc:	897b      	ldrh	r3, [r7, #10]
 801aede:	1c59      	adds	r1, r3, #1
 801aee0:	8179      	strh	r1, [r7, #10]
 801aee2:	4413      	add	r3, r2
 801aee4:	2232      	movs	r2, #50	; 0x32
 801aee6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801aeea:	4b48      	ldr	r3, [pc, #288]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801aeec:	681a      	ldr	r2, [r3, #0]
 801aeee:	897b      	ldrh	r3, [r7, #10]
 801aef0:	1c59      	adds	r1, r3, #1
 801aef2:	8179      	strh	r1, [r7, #10]
 801aef4:	4413      	add	r3, r2
 801aef6:	2204      	movs	r2, #4
 801aef8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801aefc:	4b43      	ldr	r3, [pc, #268]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801aefe:	681a      	ldr	r2, [r3, #0]
 801af00:	897b      	ldrh	r3, [r7, #10]
 801af02:	1c59      	adds	r1, r3, #1
 801af04:	8179      	strh	r1, [r7, #10]
 801af06:	4618      	mov	r0, r3
 801af08:	4b42      	ldr	r3, [pc, #264]	; (801b014 <send_DHCP_REQUEST+0x2e0>)
 801af0a:	7819      	ldrb	r1, [r3, #0]
 801af0c:	1813      	adds	r3, r2, r0
 801af0e:	460a      	mov	r2, r1
 801af10:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801af14:	4b3d      	ldr	r3, [pc, #244]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801af16:	681a      	ldr	r2, [r3, #0]
 801af18:	897b      	ldrh	r3, [r7, #10]
 801af1a:	1c59      	adds	r1, r3, #1
 801af1c:	8179      	strh	r1, [r7, #10]
 801af1e:	4618      	mov	r0, r3
 801af20:	4b3c      	ldr	r3, [pc, #240]	; (801b014 <send_DHCP_REQUEST+0x2e0>)
 801af22:	7859      	ldrb	r1, [r3, #1]
 801af24:	1813      	adds	r3, r2, r0
 801af26:	460a      	mov	r2, r1
 801af28:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801af2c:	4b37      	ldr	r3, [pc, #220]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801af2e:	681a      	ldr	r2, [r3, #0]
 801af30:	897b      	ldrh	r3, [r7, #10]
 801af32:	1c59      	adds	r1, r3, #1
 801af34:	8179      	strh	r1, [r7, #10]
 801af36:	4618      	mov	r0, r3
 801af38:	4b36      	ldr	r3, [pc, #216]	; (801b014 <send_DHCP_REQUEST+0x2e0>)
 801af3a:	7899      	ldrb	r1, [r3, #2]
 801af3c:	1813      	adds	r3, r2, r0
 801af3e:	460a      	mov	r2, r1
 801af40:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801af44:	4b31      	ldr	r3, [pc, #196]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801af46:	681a      	ldr	r2, [r3, #0]
 801af48:	897b      	ldrh	r3, [r7, #10]
 801af4a:	1c59      	adds	r1, r3, #1
 801af4c:	8179      	strh	r1, [r7, #10]
 801af4e:	4618      	mov	r0, r3
 801af50:	4b30      	ldr	r3, [pc, #192]	; (801b014 <send_DHCP_REQUEST+0x2e0>)
 801af52:	78d9      	ldrb	r1, [r3, #3]
 801af54:	1813      	adds	r3, r2, r0
 801af56:	460a      	mov	r2, r1
 801af58:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801af5c:	4b2b      	ldr	r3, [pc, #172]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801af5e:	681a      	ldr	r2, [r3, #0]
 801af60:	897b      	ldrh	r3, [r7, #10]
 801af62:	1c59      	adds	r1, r3, #1
 801af64:	8179      	strh	r1, [r7, #10]
 801af66:	4413      	add	r3, r2
 801af68:	2236      	movs	r2, #54	; 0x36
 801af6a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801af6e:	4b27      	ldr	r3, [pc, #156]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801af70:	681a      	ldr	r2, [r3, #0]
 801af72:	897b      	ldrh	r3, [r7, #10]
 801af74:	1c59      	adds	r1, r3, #1
 801af76:	8179      	strh	r1, [r7, #10]
 801af78:	4413      	add	r3, r2
 801af7a:	2204      	movs	r2, #4
 801af7c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801af80:	4b22      	ldr	r3, [pc, #136]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801af82:	681a      	ldr	r2, [r3, #0]
 801af84:	897b      	ldrh	r3, [r7, #10]
 801af86:	1c59      	adds	r1, r3, #1
 801af88:	8179      	strh	r1, [r7, #10]
 801af8a:	4618      	mov	r0, r3
 801af8c:	4b22      	ldr	r3, [pc, #136]	; (801b018 <send_DHCP_REQUEST+0x2e4>)
 801af8e:	7819      	ldrb	r1, [r3, #0]
 801af90:	1813      	adds	r3, r2, r0
 801af92:	460a      	mov	r2, r1
 801af94:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801af98:	4b1c      	ldr	r3, [pc, #112]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801af9a:	681a      	ldr	r2, [r3, #0]
 801af9c:	897b      	ldrh	r3, [r7, #10]
 801af9e:	1c59      	adds	r1, r3, #1
 801afa0:	8179      	strh	r1, [r7, #10]
 801afa2:	4618      	mov	r0, r3
 801afa4:	4b1c      	ldr	r3, [pc, #112]	; (801b018 <send_DHCP_REQUEST+0x2e4>)
 801afa6:	7859      	ldrb	r1, [r3, #1]
 801afa8:	1813      	adds	r3, r2, r0
 801afaa:	460a      	mov	r2, r1
 801afac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801afb0:	4b16      	ldr	r3, [pc, #88]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801afb2:	681a      	ldr	r2, [r3, #0]
 801afb4:	897b      	ldrh	r3, [r7, #10]
 801afb6:	1c59      	adds	r1, r3, #1
 801afb8:	8179      	strh	r1, [r7, #10]
 801afba:	4618      	mov	r0, r3
 801afbc:	4b16      	ldr	r3, [pc, #88]	; (801b018 <send_DHCP_REQUEST+0x2e4>)
 801afbe:	7899      	ldrb	r1, [r3, #2]
 801afc0:	1813      	adds	r3, r2, r0
 801afc2:	460a      	mov	r2, r1
 801afc4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801afc8:	4b10      	ldr	r3, [pc, #64]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801afca:	681a      	ldr	r2, [r3, #0]
 801afcc:	897b      	ldrh	r3, [r7, #10]
 801afce:	1c59      	adds	r1, r3, #1
 801afd0:	8179      	strh	r1, [r7, #10]
 801afd2:	4618      	mov	r0, r3
 801afd4:	4b10      	ldr	r3, [pc, #64]	; (801b018 <send_DHCP_REQUEST+0x2e4>)
 801afd6:	78d9      	ldrb	r1, [r3, #3]
 801afd8:	1813      	adds	r3, r2, r0
 801afda:	460a      	mov	r2, r1
 801afdc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801afe0:	4b0a      	ldr	r3, [pc, #40]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801afe2:	681a      	ldr	r2, [r3, #0]
 801afe4:	897b      	ldrh	r3, [r7, #10]
 801afe6:	1c59      	adds	r1, r3, #1
 801afe8:	8179      	strh	r1, [r7, #10]
 801afea:	4413      	add	r3, r2
 801afec:	220c      	movs	r2, #12
 801afee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801aff2:	4b06      	ldr	r3, [pc, #24]	; (801b00c <send_DHCP_REQUEST+0x2d8>)
 801aff4:	681a      	ldr	r2, [r3, #0]
 801aff6:	897b      	ldrh	r3, [r7, #10]
 801aff8:	1c59      	adds	r1, r3, #1
 801affa:	8179      	strh	r1, [r7, #10]
 801affc:	4413      	add	r3, r2
 801affe:	2200      	movs	r2, #0
 801b000:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b004:	2300      	movs	r3, #0
 801b006:	60fb      	str	r3, [r7, #12]
 801b008:	e019      	b.n	801b03e <send_DHCP_REQUEST+0x30a>
 801b00a:	bf00      	nop
 801b00c:	200009b0 	.word	0x200009b0
 801b010:	200009b4 	.word	0x200009b4
 801b014:	20000994 	.word	0x20000994
 801b018:	20000988 	.word	0x20000988
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801b01c:	4b86      	ldr	r3, [pc, #536]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b01e:	681a      	ldr	r2, [r3, #0]
 801b020:	897b      	ldrh	r3, [r7, #10]
 801b022:	1c59      	adds	r1, r3, #1
 801b024:	8179      	strh	r1, [r7, #10]
 801b026:	4618      	mov	r0, r3
 801b028:	4984      	ldr	r1, [pc, #528]	; (801b23c <send_DHCP_REQUEST+0x508>)
 801b02a:	68fb      	ldr	r3, [r7, #12]
 801b02c:	440b      	add	r3, r1
 801b02e:	7819      	ldrb	r1, [r3, #0]
 801b030:	1813      	adds	r3, r2, r0
 801b032:	460a      	mov	r2, r1
 801b034:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	3301      	adds	r3, #1
 801b03c:	60fb      	str	r3, [r7, #12]
 801b03e:	4a7f      	ldr	r2, [pc, #508]	; (801b23c <send_DHCP_REQUEST+0x508>)
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	4413      	add	r3, r2
 801b044:	781b      	ldrb	r3, [r3, #0]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d1e8      	bne.n	801b01c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801b04a:	4b7d      	ldr	r3, [pc, #500]	; (801b240 <send_DHCP_REQUEST+0x50c>)
 801b04c:	78db      	ldrb	r3, [r3, #3]
 801b04e:	091b      	lsrs	r3, r3, #4
 801b050:	b2da      	uxtb	r2, r3
 801b052:	4b79      	ldr	r3, [pc, #484]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b054:	681c      	ldr	r4, [r3, #0]
 801b056:	897b      	ldrh	r3, [r7, #10]
 801b058:	1c59      	adds	r1, r3, #1
 801b05a:	8179      	strh	r1, [r7, #10]
 801b05c:	461d      	mov	r5, r3
 801b05e:	4610      	mov	r0, r2
 801b060:	f000 ff64 	bl	801bf2c <NibbleToHex>
 801b064:	4603      	mov	r3, r0
 801b066:	461a      	mov	r2, r3
 801b068:	1963      	adds	r3, r4, r5
 801b06a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801b06e:	4b74      	ldr	r3, [pc, #464]	; (801b240 <send_DHCP_REQUEST+0x50c>)
 801b070:	78da      	ldrb	r2, [r3, #3]
 801b072:	4b71      	ldr	r3, [pc, #452]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b074:	681c      	ldr	r4, [r3, #0]
 801b076:	897b      	ldrh	r3, [r7, #10]
 801b078:	1c59      	adds	r1, r3, #1
 801b07a:	8179      	strh	r1, [r7, #10]
 801b07c:	461d      	mov	r5, r3
 801b07e:	4610      	mov	r0, r2
 801b080:	f000 ff54 	bl	801bf2c <NibbleToHex>
 801b084:	4603      	mov	r3, r0
 801b086:	461a      	mov	r2, r3
 801b088:	1963      	adds	r3, r4, r5
 801b08a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801b08e:	4b6c      	ldr	r3, [pc, #432]	; (801b240 <send_DHCP_REQUEST+0x50c>)
 801b090:	791b      	ldrb	r3, [r3, #4]
 801b092:	091b      	lsrs	r3, r3, #4
 801b094:	b2da      	uxtb	r2, r3
 801b096:	4b68      	ldr	r3, [pc, #416]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b098:	681c      	ldr	r4, [r3, #0]
 801b09a:	897b      	ldrh	r3, [r7, #10]
 801b09c:	1c59      	adds	r1, r3, #1
 801b09e:	8179      	strh	r1, [r7, #10]
 801b0a0:	461d      	mov	r5, r3
 801b0a2:	4610      	mov	r0, r2
 801b0a4:	f000 ff42 	bl	801bf2c <NibbleToHex>
 801b0a8:	4603      	mov	r3, r0
 801b0aa:	461a      	mov	r2, r3
 801b0ac:	1963      	adds	r3, r4, r5
 801b0ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801b0b2:	4b63      	ldr	r3, [pc, #396]	; (801b240 <send_DHCP_REQUEST+0x50c>)
 801b0b4:	791a      	ldrb	r2, [r3, #4]
 801b0b6:	4b60      	ldr	r3, [pc, #384]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b0b8:	681c      	ldr	r4, [r3, #0]
 801b0ba:	897b      	ldrh	r3, [r7, #10]
 801b0bc:	1c59      	adds	r1, r3, #1
 801b0be:	8179      	strh	r1, [r7, #10]
 801b0c0:	461d      	mov	r5, r3
 801b0c2:	4610      	mov	r0, r2
 801b0c4:	f000 ff32 	bl	801bf2c <NibbleToHex>
 801b0c8:	4603      	mov	r3, r0
 801b0ca:	461a      	mov	r2, r3
 801b0cc:	1963      	adds	r3, r4, r5
 801b0ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801b0d2:	4b5b      	ldr	r3, [pc, #364]	; (801b240 <send_DHCP_REQUEST+0x50c>)
 801b0d4:	795b      	ldrb	r3, [r3, #5]
 801b0d6:	091b      	lsrs	r3, r3, #4
 801b0d8:	b2da      	uxtb	r2, r3
 801b0da:	4b57      	ldr	r3, [pc, #348]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b0dc:	681c      	ldr	r4, [r3, #0]
 801b0de:	897b      	ldrh	r3, [r7, #10]
 801b0e0:	1c59      	adds	r1, r3, #1
 801b0e2:	8179      	strh	r1, [r7, #10]
 801b0e4:	461d      	mov	r5, r3
 801b0e6:	4610      	mov	r0, r2
 801b0e8:	f000 ff20 	bl	801bf2c <NibbleToHex>
 801b0ec:	4603      	mov	r3, r0
 801b0ee:	461a      	mov	r2, r3
 801b0f0:	1963      	adds	r3, r4, r5
 801b0f2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801b0f6:	4b52      	ldr	r3, [pc, #328]	; (801b240 <send_DHCP_REQUEST+0x50c>)
 801b0f8:	795a      	ldrb	r2, [r3, #5]
 801b0fa:	4b4f      	ldr	r3, [pc, #316]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b0fc:	681c      	ldr	r4, [r3, #0]
 801b0fe:	897b      	ldrh	r3, [r7, #10]
 801b100:	1c59      	adds	r1, r3, #1
 801b102:	8179      	strh	r1, [r7, #10]
 801b104:	461d      	mov	r5, r3
 801b106:	4610      	mov	r0, r2
 801b108:	f000 ff10 	bl	801bf2c <NibbleToHex>
 801b10c:	4603      	mov	r3, r0
 801b10e:	461a      	mov	r2, r3
 801b110:	1963      	adds	r3, r4, r5
 801b112:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	b2d9      	uxtb	r1, r3
 801b11a:	4b47      	ldr	r3, [pc, #284]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b11c:	681a      	ldr	r2, [r3, #0]
 801b11e:	8978      	ldrh	r0, [r7, #10]
 801b120:	68fb      	ldr	r3, [r7, #12]
 801b122:	3307      	adds	r3, #7
 801b124:	1ac3      	subs	r3, r0, r3
 801b126:	3106      	adds	r1, #6
 801b128:	b2c9      	uxtb	r1, r1
 801b12a:	4413      	add	r3, r2
 801b12c:	460a      	mov	r2, r1
 801b12e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801b132:	4b41      	ldr	r3, [pc, #260]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b134:	681a      	ldr	r2, [r3, #0]
 801b136:	897b      	ldrh	r3, [r7, #10]
 801b138:	1c59      	adds	r1, r3, #1
 801b13a:	8179      	strh	r1, [r7, #10]
 801b13c:	4413      	add	r3, r2
 801b13e:	2237      	movs	r2, #55	; 0x37
 801b140:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801b144:	4b3c      	ldr	r3, [pc, #240]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b146:	681a      	ldr	r2, [r3, #0]
 801b148:	897b      	ldrh	r3, [r7, #10]
 801b14a:	1c59      	adds	r1, r3, #1
 801b14c:	8179      	strh	r1, [r7, #10]
 801b14e:	4413      	add	r3, r2
 801b150:	2208      	movs	r2, #8
 801b152:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b156:	4b38      	ldr	r3, [pc, #224]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b158:	681a      	ldr	r2, [r3, #0]
 801b15a:	897b      	ldrh	r3, [r7, #10]
 801b15c:	1c59      	adds	r1, r3, #1
 801b15e:	8179      	strh	r1, [r7, #10]
 801b160:	4413      	add	r3, r2
 801b162:	2201      	movs	r2, #1
 801b164:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b168:	4b33      	ldr	r3, [pc, #204]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b16a:	681a      	ldr	r2, [r3, #0]
 801b16c:	897b      	ldrh	r3, [r7, #10]
 801b16e:	1c59      	adds	r1, r3, #1
 801b170:	8179      	strh	r1, [r7, #10]
 801b172:	4413      	add	r3, r2
 801b174:	2203      	movs	r2, #3
 801b176:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b17a:	4b2f      	ldr	r3, [pc, #188]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b17c:	681a      	ldr	r2, [r3, #0]
 801b17e:	897b      	ldrh	r3, [r7, #10]
 801b180:	1c59      	adds	r1, r3, #1
 801b182:	8179      	strh	r1, [r7, #10]
 801b184:	4413      	add	r3, r2
 801b186:	2206      	movs	r2, #6
 801b188:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b18c:	4b2a      	ldr	r3, [pc, #168]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b18e:	681a      	ldr	r2, [r3, #0]
 801b190:	897b      	ldrh	r3, [r7, #10]
 801b192:	1c59      	adds	r1, r3, #1
 801b194:	8179      	strh	r1, [r7, #10]
 801b196:	4413      	add	r3, r2
 801b198:	220f      	movs	r2, #15
 801b19a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b19e:	4b26      	ldr	r3, [pc, #152]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b1a0:	681a      	ldr	r2, [r3, #0]
 801b1a2:	897b      	ldrh	r3, [r7, #10]
 801b1a4:	1c59      	adds	r1, r3, #1
 801b1a6:	8179      	strh	r1, [r7, #10]
 801b1a8:	4413      	add	r3, r2
 801b1aa:	223a      	movs	r2, #58	; 0x3a
 801b1ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b1b0:	4b21      	ldr	r3, [pc, #132]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b1b2:	681a      	ldr	r2, [r3, #0]
 801b1b4:	897b      	ldrh	r3, [r7, #10]
 801b1b6:	1c59      	adds	r1, r3, #1
 801b1b8:	8179      	strh	r1, [r7, #10]
 801b1ba:	4413      	add	r3, r2
 801b1bc:	223b      	movs	r2, #59	; 0x3b
 801b1be:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801b1c2:	4b1d      	ldr	r3, [pc, #116]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b1c4:	681a      	ldr	r2, [r3, #0]
 801b1c6:	897b      	ldrh	r3, [r7, #10]
 801b1c8:	1c59      	adds	r1, r3, #1
 801b1ca:	8179      	strh	r1, [r7, #10]
 801b1cc:	4413      	add	r3, r2
 801b1ce:	221f      	movs	r2, #31
 801b1d0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801b1d4:	4b18      	ldr	r3, [pc, #96]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b1d6:	681a      	ldr	r2, [r3, #0]
 801b1d8:	897b      	ldrh	r3, [r7, #10]
 801b1da:	1c59      	adds	r1, r3, #1
 801b1dc:	8179      	strh	r1, [r7, #10]
 801b1de:	4413      	add	r3, r2
 801b1e0:	2221      	movs	r2, #33	; 0x21
 801b1e2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b1e6:	4b14      	ldr	r3, [pc, #80]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b1e8:	681a      	ldr	r2, [r3, #0]
 801b1ea:	897b      	ldrh	r3, [r7, #10]
 801b1ec:	1c59      	adds	r1, r3, #1
 801b1ee:	8179      	strh	r1, [r7, #10]
 801b1f0:	4413      	add	r3, r2
 801b1f2:	22ff      	movs	r2, #255	; 0xff
 801b1f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b1f8:	897b      	ldrh	r3, [r7, #10]
 801b1fa:	60fb      	str	r3, [r7, #12]
 801b1fc:	e009      	b.n	801b212 <send_DHCP_REQUEST+0x4de>
 801b1fe:	4b0e      	ldr	r3, [pc, #56]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b200:	681a      	ldr	r2, [r3, #0]
 801b202:	68fb      	ldr	r3, [r7, #12]
 801b204:	4413      	add	r3, r2
 801b206:	33ec      	adds	r3, #236	; 0xec
 801b208:	2200      	movs	r2, #0
 801b20a:	701a      	strb	r2, [r3, #0]
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	3301      	adds	r3, #1
 801b210:	60fb      	str	r3, [r7, #12]
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b218:	dbf1      	blt.n	801b1fe <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b21a:	4b0a      	ldr	r3, [pc, #40]	; (801b244 <send_DHCP_REQUEST+0x510>)
 801b21c:	7818      	ldrb	r0, [r3, #0]
 801b21e:	4b06      	ldr	r3, [pc, #24]	; (801b238 <send_DHCP_REQUEST+0x504>)
 801b220:	6819      	ldr	r1, [r3, #0]
 801b222:	1d3b      	adds	r3, r7, #4
 801b224:	2243      	movs	r2, #67	; 0x43
 801b226:	9200      	str	r2, [sp, #0]
 801b228:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b22c:	f7fe f972 	bl	8019514 <sendto>

}
 801b230:	bf00      	nop
 801b232:	3710      	adds	r7, #16
 801b234:	46bd      	mov	sp, r7
 801b236:	bdb0      	pop	{r4, r5, r7, pc}
 801b238:	200009b0 	.word	0x200009b0
 801b23c:	200000f8 	.word	0x200000f8
 801b240:	200009b4 	.word	0x200009b4
 801b244:	20000985 	.word	0x20000985

0801b248 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801b248:	b580      	push	{r7, lr}
 801b24a:	b086      	sub	sp, #24
 801b24c:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b24e:	2300      	movs	r3, #0
 801b250:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801b252:	f7ff fab3 	bl	801a7bc <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b256:	2304      	movs	r3, #4
 801b258:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b25a:	4b9f      	ldr	r3, [pc, #636]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	330a      	adds	r3, #10
 801b260:	2200      	movs	r2, #0
 801b262:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b264:	4b9c      	ldr	r3, [pc, #624]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	330a      	adds	r3, #10
 801b26a:	3301      	adds	r3, #1
 801b26c:	2200      	movs	r2, #0
 801b26e:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b270:	4b99      	ldr	r3, [pc, #612]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b272:	681a      	ldr	r2, [r3, #0]
 801b274:	897b      	ldrh	r3, [r7, #10]
 801b276:	1c59      	adds	r1, r3, #1
 801b278:	8179      	strh	r1, [r7, #10]
 801b27a:	4413      	add	r3, r2
 801b27c:	2235      	movs	r2, #53	; 0x35
 801b27e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b282:	4b95      	ldr	r3, [pc, #596]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b284:	681a      	ldr	r2, [r3, #0]
 801b286:	897b      	ldrh	r3, [r7, #10]
 801b288:	1c59      	adds	r1, r3, #1
 801b28a:	8179      	strh	r1, [r7, #10]
 801b28c:	4413      	add	r3, r2
 801b28e:	2201      	movs	r2, #1
 801b290:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801b294:	4b90      	ldr	r3, [pc, #576]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b296:	681a      	ldr	r2, [r3, #0]
 801b298:	897b      	ldrh	r3, [r7, #10]
 801b29a:	1c59      	adds	r1, r3, #1
 801b29c:	8179      	strh	r1, [r7, #10]
 801b29e:	4413      	add	r3, r2
 801b2a0:	2204      	movs	r2, #4
 801b2a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b2a6:	4b8c      	ldr	r3, [pc, #560]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b2a8:	681a      	ldr	r2, [r3, #0]
 801b2aa:	897b      	ldrh	r3, [r7, #10]
 801b2ac:	1c59      	adds	r1, r3, #1
 801b2ae:	8179      	strh	r1, [r7, #10]
 801b2b0:	4413      	add	r3, r2
 801b2b2:	223d      	movs	r2, #61	; 0x3d
 801b2b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b2b8:	4b87      	ldr	r3, [pc, #540]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b2ba:	681a      	ldr	r2, [r3, #0]
 801b2bc:	897b      	ldrh	r3, [r7, #10]
 801b2be:	1c59      	adds	r1, r3, #1
 801b2c0:	8179      	strh	r1, [r7, #10]
 801b2c2:	4413      	add	r3, r2
 801b2c4:	2207      	movs	r2, #7
 801b2c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b2ca:	4b83      	ldr	r3, [pc, #524]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b2cc:	681a      	ldr	r2, [r3, #0]
 801b2ce:	897b      	ldrh	r3, [r7, #10]
 801b2d0:	1c59      	adds	r1, r3, #1
 801b2d2:	8179      	strh	r1, [r7, #10]
 801b2d4:	4413      	add	r3, r2
 801b2d6:	2201      	movs	r2, #1
 801b2d8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b2dc:	4b7e      	ldr	r3, [pc, #504]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	897b      	ldrh	r3, [r7, #10]
 801b2e2:	1c59      	adds	r1, r3, #1
 801b2e4:	8179      	strh	r1, [r7, #10]
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	4b7c      	ldr	r3, [pc, #496]	; (801b4dc <send_DHCP_DECLINE+0x294>)
 801b2ea:	7819      	ldrb	r1, [r3, #0]
 801b2ec:	1813      	adds	r3, r2, r0
 801b2ee:	460a      	mov	r2, r1
 801b2f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b2f4:	4b78      	ldr	r3, [pc, #480]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b2f6:	681a      	ldr	r2, [r3, #0]
 801b2f8:	897b      	ldrh	r3, [r7, #10]
 801b2fa:	1c59      	adds	r1, r3, #1
 801b2fc:	8179      	strh	r1, [r7, #10]
 801b2fe:	4618      	mov	r0, r3
 801b300:	4b76      	ldr	r3, [pc, #472]	; (801b4dc <send_DHCP_DECLINE+0x294>)
 801b302:	7859      	ldrb	r1, [r3, #1]
 801b304:	1813      	adds	r3, r2, r0
 801b306:	460a      	mov	r2, r1
 801b308:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b30c:	4b72      	ldr	r3, [pc, #456]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b30e:	681a      	ldr	r2, [r3, #0]
 801b310:	897b      	ldrh	r3, [r7, #10]
 801b312:	1c59      	adds	r1, r3, #1
 801b314:	8179      	strh	r1, [r7, #10]
 801b316:	4618      	mov	r0, r3
 801b318:	4b70      	ldr	r3, [pc, #448]	; (801b4dc <send_DHCP_DECLINE+0x294>)
 801b31a:	7899      	ldrb	r1, [r3, #2]
 801b31c:	1813      	adds	r3, r2, r0
 801b31e:	460a      	mov	r2, r1
 801b320:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b324:	4b6c      	ldr	r3, [pc, #432]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b326:	681a      	ldr	r2, [r3, #0]
 801b328:	897b      	ldrh	r3, [r7, #10]
 801b32a:	1c59      	adds	r1, r3, #1
 801b32c:	8179      	strh	r1, [r7, #10]
 801b32e:	4618      	mov	r0, r3
 801b330:	4b6a      	ldr	r3, [pc, #424]	; (801b4dc <send_DHCP_DECLINE+0x294>)
 801b332:	78d9      	ldrb	r1, [r3, #3]
 801b334:	1813      	adds	r3, r2, r0
 801b336:	460a      	mov	r2, r1
 801b338:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b33c:	4b66      	ldr	r3, [pc, #408]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b33e:	681a      	ldr	r2, [r3, #0]
 801b340:	897b      	ldrh	r3, [r7, #10]
 801b342:	1c59      	adds	r1, r3, #1
 801b344:	8179      	strh	r1, [r7, #10]
 801b346:	4618      	mov	r0, r3
 801b348:	4b64      	ldr	r3, [pc, #400]	; (801b4dc <send_DHCP_DECLINE+0x294>)
 801b34a:	7919      	ldrb	r1, [r3, #4]
 801b34c:	1813      	adds	r3, r2, r0
 801b34e:	460a      	mov	r2, r1
 801b350:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b354:	4b60      	ldr	r3, [pc, #384]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b356:	681a      	ldr	r2, [r3, #0]
 801b358:	897b      	ldrh	r3, [r7, #10]
 801b35a:	1c59      	adds	r1, r3, #1
 801b35c:	8179      	strh	r1, [r7, #10]
 801b35e:	4618      	mov	r0, r3
 801b360:	4b5e      	ldr	r3, [pc, #376]	; (801b4dc <send_DHCP_DECLINE+0x294>)
 801b362:	7959      	ldrb	r1, [r3, #5]
 801b364:	1813      	adds	r3, r2, r0
 801b366:	460a      	mov	r2, r1
 801b368:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b36c:	4b5a      	ldr	r3, [pc, #360]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b36e:	681a      	ldr	r2, [r3, #0]
 801b370:	897b      	ldrh	r3, [r7, #10]
 801b372:	1c59      	adds	r1, r3, #1
 801b374:	8179      	strh	r1, [r7, #10]
 801b376:	4413      	add	r3, r2
 801b378:	2232      	movs	r2, #50	; 0x32
 801b37a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b37e:	4b56      	ldr	r3, [pc, #344]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b380:	681a      	ldr	r2, [r3, #0]
 801b382:	897b      	ldrh	r3, [r7, #10]
 801b384:	1c59      	adds	r1, r3, #1
 801b386:	8179      	strh	r1, [r7, #10]
 801b388:	4413      	add	r3, r2
 801b38a:	2204      	movs	r2, #4
 801b38c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b390:	4b51      	ldr	r3, [pc, #324]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b392:	681a      	ldr	r2, [r3, #0]
 801b394:	897b      	ldrh	r3, [r7, #10]
 801b396:	1c59      	adds	r1, r3, #1
 801b398:	8179      	strh	r1, [r7, #10]
 801b39a:	4618      	mov	r0, r3
 801b39c:	4b50      	ldr	r3, [pc, #320]	; (801b4e0 <send_DHCP_DECLINE+0x298>)
 801b39e:	7819      	ldrb	r1, [r3, #0]
 801b3a0:	1813      	adds	r3, r2, r0
 801b3a2:	460a      	mov	r2, r1
 801b3a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b3a8:	4b4b      	ldr	r3, [pc, #300]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b3aa:	681a      	ldr	r2, [r3, #0]
 801b3ac:	897b      	ldrh	r3, [r7, #10]
 801b3ae:	1c59      	adds	r1, r3, #1
 801b3b0:	8179      	strh	r1, [r7, #10]
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	4b4a      	ldr	r3, [pc, #296]	; (801b4e0 <send_DHCP_DECLINE+0x298>)
 801b3b6:	7859      	ldrb	r1, [r3, #1]
 801b3b8:	1813      	adds	r3, r2, r0
 801b3ba:	460a      	mov	r2, r1
 801b3bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b3c0:	4b45      	ldr	r3, [pc, #276]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b3c2:	681a      	ldr	r2, [r3, #0]
 801b3c4:	897b      	ldrh	r3, [r7, #10]
 801b3c6:	1c59      	adds	r1, r3, #1
 801b3c8:	8179      	strh	r1, [r7, #10]
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	4b44      	ldr	r3, [pc, #272]	; (801b4e0 <send_DHCP_DECLINE+0x298>)
 801b3ce:	7899      	ldrb	r1, [r3, #2]
 801b3d0:	1813      	adds	r3, r2, r0
 801b3d2:	460a      	mov	r2, r1
 801b3d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b3d8:	4b3f      	ldr	r3, [pc, #252]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b3da:	681a      	ldr	r2, [r3, #0]
 801b3dc:	897b      	ldrh	r3, [r7, #10]
 801b3de:	1c59      	adds	r1, r3, #1
 801b3e0:	8179      	strh	r1, [r7, #10]
 801b3e2:	4618      	mov	r0, r3
 801b3e4:	4b3e      	ldr	r3, [pc, #248]	; (801b4e0 <send_DHCP_DECLINE+0x298>)
 801b3e6:	78d9      	ldrb	r1, [r3, #3]
 801b3e8:	1813      	adds	r3, r2, r0
 801b3ea:	460a      	mov	r2, r1
 801b3ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b3f0:	4b39      	ldr	r3, [pc, #228]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b3f2:	681a      	ldr	r2, [r3, #0]
 801b3f4:	897b      	ldrh	r3, [r7, #10]
 801b3f6:	1c59      	adds	r1, r3, #1
 801b3f8:	8179      	strh	r1, [r7, #10]
 801b3fa:	4413      	add	r3, r2
 801b3fc:	2236      	movs	r2, #54	; 0x36
 801b3fe:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b402:	4b35      	ldr	r3, [pc, #212]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b404:	681a      	ldr	r2, [r3, #0]
 801b406:	897b      	ldrh	r3, [r7, #10]
 801b408:	1c59      	adds	r1, r3, #1
 801b40a:	8179      	strh	r1, [r7, #10]
 801b40c:	4413      	add	r3, r2
 801b40e:	2204      	movs	r2, #4
 801b410:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b414:	4b30      	ldr	r3, [pc, #192]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b416:	681a      	ldr	r2, [r3, #0]
 801b418:	897b      	ldrh	r3, [r7, #10]
 801b41a:	1c59      	adds	r1, r3, #1
 801b41c:	8179      	strh	r1, [r7, #10]
 801b41e:	4618      	mov	r0, r3
 801b420:	4b30      	ldr	r3, [pc, #192]	; (801b4e4 <send_DHCP_DECLINE+0x29c>)
 801b422:	7819      	ldrb	r1, [r3, #0]
 801b424:	1813      	adds	r3, r2, r0
 801b426:	460a      	mov	r2, r1
 801b428:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b42c:	4b2a      	ldr	r3, [pc, #168]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b42e:	681a      	ldr	r2, [r3, #0]
 801b430:	897b      	ldrh	r3, [r7, #10]
 801b432:	1c59      	adds	r1, r3, #1
 801b434:	8179      	strh	r1, [r7, #10]
 801b436:	4618      	mov	r0, r3
 801b438:	4b2a      	ldr	r3, [pc, #168]	; (801b4e4 <send_DHCP_DECLINE+0x29c>)
 801b43a:	7859      	ldrb	r1, [r3, #1]
 801b43c:	1813      	adds	r3, r2, r0
 801b43e:	460a      	mov	r2, r1
 801b440:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b444:	4b24      	ldr	r3, [pc, #144]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b446:	681a      	ldr	r2, [r3, #0]
 801b448:	897b      	ldrh	r3, [r7, #10]
 801b44a:	1c59      	adds	r1, r3, #1
 801b44c:	8179      	strh	r1, [r7, #10]
 801b44e:	4618      	mov	r0, r3
 801b450:	4b24      	ldr	r3, [pc, #144]	; (801b4e4 <send_DHCP_DECLINE+0x29c>)
 801b452:	7899      	ldrb	r1, [r3, #2]
 801b454:	1813      	adds	r3, r2, r0
 801b456:	460a      	mov	r2, r1
 801b458:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b45c:	4b1e      	ldr	r3, [pc, #120]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b45e:	681a      	ldr	r2, [r3, #0]
 801b460:	897b      	ldrh	r3, [r7, #10]
 801b462:	1c59      	adds	r1, r3, #1
 801b464:	8179      	strh	r1, [r7, #10]
 801b466:	4618      	mov	r0, r3
 801b468:	4b1e      	ldr	r3, [pc, #120]	; (801b4e4 <send_DHCP_DECLINE+0x29c>)
 801b46a:	78d9      	ldrb	r1, [r3, #3]
 801b46c:	1813      	adds	r3, r2, r0
 801b46e:	460a      	mov	r2, r1
 801b470:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b474:	4b18      	ldr	r3, [pc, #96]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b476:	681a      	ldr	r2, [r3, #0]
 801b478:	897b      	ldrh	r3, [r7, #10]
 801b47a:	1c59      	adds	r1, r3, #1
 801b47c:	8179      	strh	r1, [r7, #10]
 801b47e:	4413      	add	r3, r2
 801b480:	22ff      	movs	r2, #255	; 0xff
 801b482:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b486:	897b      	ldrh	r3, [r7, #10]
 801b488:	60fb      	str	r3, [r7, #12]
 801b48a:	e009      	b.n	801b4a0 <send_DHCP_DECLINE+0x258>
 801b48c:	4b12      	ldr	r3, [pc, #72]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b48e:	681a      	ldr	r2, [r3, #0]
 801b490:	68fb      	ldr	r3, [r7, #12]
 801b492:	4413      	add	r3, r2
 801b494:	33ec      	adds	r3, #236	; 0xec
 801b496:	2200      	movs	r2, #0
 801b498:	701a      	strb	r2, [r3, #0]
 801b49a:	68fb      	ldr	r3, [r7, #12]
 801b49c:	3301      	adds	r3, #1
 801b49e:	60fb      	str	r3, [r7, #12]
 801b4a0:	68fb      	ldr	r3, [r7, #12]
 801b4a2:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b4a6:	dbf1      	blt.n	801b48c <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b4a8:	23ff      	movs	r3, #255	; 0xff
 801b4aa:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b4ac:	23ff      	movs	r3, #255	; 0xff
 801b4ae:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b4b0:	23ff      	movs	r3, #255	; 0xff
 801b4b2:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b4b4:	23ff      	movs	r3, #255	; 0xff
 801b4b6:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b4b8:	4b0b      	ldr	r3, [pc, #44]	; (801b4e8 <send_DHCP_DECLINE+0x2a0>)
 801b4ba:	7818      	ldrb	r0, [r3, #0]
 801b4bc:	4b06      	ldr	r3, [pc, #24]	; (801b4d8 <send_DHCP_DECLINE+0x290>)
 801b4be:	6819      	ldr	r1, [r3, #0]
 801b4c0:	1d3b      	adds	r3, r7, #4
 801b4c2:	2243      	movs	r2, #67	; 0x43
 801b4c4:	9200      	str	r2, [sp, #0]
 801b4c6:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b4ca:	f7fe f823 	bl	8019514 <sendto>
}
 801b4ce:	bf00      	nop
 801b4d0:	3710      	adds	r7, #16
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	bd80      	pop	{r7, pc}
 801b4d6:	bf00      	nop
 801b4d8:	200009b0 	.word	0x200009b0
 801b4dc:	200009b4 	.word	0x200009b4
 801b4e0:	20000994 	.word	0x20000994
 801b4e4:	20000988 	.word	0x20000988
 801b4e8:	20000985 	.word	0x20000985

0801b4ec <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b4ec:	b590      	push	{r4, r7, lr}
 801b4ee:	b089      	sub	sp, #36	; 0x24
 801b4f0:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b4f2:	2300      	movs	r3, #0
 801b4f4:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b4f6:	4ba1      	ldr	r3, [pc, #644]	; (801b77c <parseDHCPMSG+0x290>)
 801b4f8:	781b      	ldrb	r3, [r3, #0]
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	f7fd f9e1 	bl	80188c2 <getSn_RX_RSR>
 801b500:	4603      	mov	r3, r0
 801b502:	823b      	strh	r3, [r7, #16]
 801b504:	8a3b      	ldrh	r3, [r7, #16]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d011      	beq.n	801b52e <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b50a:	4b9c      	ldr	r3, [pc, #624]	; (801b77c <parseDHCPMSG+0x290>)
 801b50c:	7818      	ldrb	r0, [r3, #0]
 801b50e:	4b9c      	ldr	r3, [pc, #624]	; (801b780 <parseDHCPMSG+0x294>)
 801b510:	6819      	ldr	r1, [r3, #0]
 801b512:	1d3c      	adds	r4, r7, #4
 801b514:	8a3a      	ldrh	r2, [r7, #16]
 801b516:	1cbb      	adds	r3, r7, #2
 801b518:	9300      	str	r3, [sp, #0]
 801b51a:	4623      	mov	r3, r4
 801b51c:	f7fe f930 	bl	8019780 <recvfrom>
 801b520:	4603      	mov	r3, r0
 801b522:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b524:	887b      	ldrh	r3, [r7, #2]
 801b526:	2b43      	cmp	r3, #67	; 0x43
 801b528:	f040 81ed 	bne.w	801b906 <parseDHCPMSG+0x41a>
 801b52c:	e001      	b.n	801b532 <parseDHCPMSG+0x46>
   else return 0;
 801b52e:	2300      	movs	r3, #0
 801b530:	e1eb      	b.n	801b90a <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b532:	4b93      	ldr	r3, [pc, #588]	; (801b780 <parseDHCPMSG+0x294>)
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	7f1a      	ldrb	r2, [r3, #28]
 801b538:	4b92      	ldr	r3, [pc, #584]	; (801b784 <parseDHCPMSG+0x298>)
 801b53a:	781b      	ldrb	r3, [r3, #0]
 801b53c:	429a      	cmp	r2, r3
 801b53e:	d124      	bne.n	801b58a <parseDHCPMSG+0x9e>
 801b540:	4b8f      	ldr	r3, [pc, #572]	; (801b780 <parseDHCPMSG+0x294>)
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	7f5a      	ldrb	r2, [r3, #29]
 801b546:	4b8f      	ldr	r3, [pc, #572]	; (801b784 <parseDHCPMSG+0x298>)
 801b548:	785b      	ldrb	r3, [r3, #1]
 801b54a:	429a      	cmp	r2, r3
 801b54c:	d11d      	bne.n	801b58a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b54e:	4b8c      	ldr	r3, [pc, #560]	; (801b780 <parseDHCPMSG+0x294>)
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	7f9a      	ldrb	r2, [r3, #30]
 801b554:	4b8b      	ldr	r3, [pc, #556]	; (801b784 <parseDHCPMSG+0x298>)
 801b556:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b558:	429a      	cmp	r2, r3
 801b55a:	d116      	bne.n	801b58a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b55c:	4b88      	ldr	r3, [pc, #544]	; (801b780 <parseDHCPMSG+0x294>)
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	7fda      	ldrb	r2, [r3, #31]
 801b562:	4b88      	ldr	r3, [pc, #544]	; (801b784 <parseDHCPMSG+0x298>)
 801b564:	78db      	ldrb	r3, [r3, #3]
 801b566:	429a      	cmp	r2, r3
 801b568:	d10f      	bne.n	801b58a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b56a:	4b85      	ldr	r3, [pc, #532]	; (801b780 <parseDHCPMSG+0x294>)
 801b56c:	681b      	ldr	r3, [r3, #0]
 801b56e:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b572:	4b84      	ldr	r3, [pc, #528]	; (801b784 <parseDHCPMSG+0x298>)
 801b574:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b576:	429a      	cmp	r2, r3
 801b578:	d107      	bne.n	801b58a <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b57a:	4b81      	ldr	r3, [pc, #516]	; (801b780 <parseDHCPMSG+0x294>)
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b582:	4b80      	ldr	r3, [pc, #512]	; (801b784 <parseDHCPMSG+0x298>)
 801b584:	795b      	ldrb	r3, [r3, #5]
 801b586:	429a      	cmp	r2, r3
 801b588:	d001      	beq.n	801b58e <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b58a:	2300      	movs	r3, #0
 801b58c:	e1bd      	b.n	801b90a <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b58e:	4b7e      	ldr	r3, [pc, #504]	; (801b788 <parseDHCPMSG+0x29c>)
 801b590:	781b      	ldrb	r3, [r3, #0]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d10b      	bne.n	801b5ae <parseDHCPMSG+0xc2>
 801b596:	4b7c      	ldr	r3, [pc, #496]	; (801b788 <parseDHCPMSG+0x29c>)
 801b598:	785b      	ldrb	r3, [r3, #1]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d107      	bne.n	801b5ae <parseDHCPMSG+0xc2>
 801b59e:	4b7a      	ldr	r3, [pc, #488]	; (801b788 <parseDHCPMSG+0x29c>)
 801b5a0:	789b      	ldrb	r3, [r3, #2]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d103      	bne.n	801b5ae <parseDHCPMSG+0xc2>
 801b5a6:	4b78      	ldr	r3, [pc, #480]	; (801b788 <parseDHCPMSG+0x29c>)
 801b5a8:	78db      	ldrb	r3, [r3, #3]
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d029      	beq.n	801b602 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b5ae:	793a      	ldrb	r2, [r7, #4]
 801b5b0:	4b75      	ldr	r3, [pc, #468]	; (801b788 <parseDHCPMSG+0x29c>)
 801b5b2:	781b      	ldrb	r3, [r3, #0]
 801b5b4:	429a      	cmp	r2, r3
 801b5b6:	d10e      	bne.n	801b5d6 <parseDHCPMSG+0xea>
 801b5b8:	797a      	ldrb	r2, [r7, #5]
 801b5ba:	4b73      	ldr	r3, [pc, #460]	; (801b788 <parseDHCPMSG+0x29c>)
 801b5bc:	785b      	ldrb	r3, [r3, #1]
 801b5be:	429a      	cmp	r2, r3
 801b5c0:	d109      	bne.n	801b5d6 <parseDHCPMSG+0xea>
 801b5c2:	79ba      	ldrb	r2, [r7, #6]
 801b5c4:	4b70      	ldr	r3, [pc, #448]	; (801b788 <parseDHCPMSG+0x29c>)
 801b5c6:	789b      	ldrb	r3, [r3, #2]
 801b5c8:	429a      	cmp	r2, r3
 801b5ca:	d104      	bne.n	801b5d6 <parseDHCPMSG+0xea>
 801b5cc:	79fa      	ldrb	r2, [r7, #7]
 801b5ce:	4b6e      	ldr	r3, [pc, #440]	; (801b788 <parseDHCPMSG+0x29c>)
 801b5d0:	78db      	ldrb	r3, [r3, #3]
 801b5d2:	429a      	cmp	r2, r3
 801b5d4:	d015      	beq.n	801b602 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b5d6:	793a      	ldrb	r2, [r7, #4]
 801b5d8:	4b6c      	ldr	r3, [pc, #432]	; (801b78c <parseDHCPMSG+0x2a0>)
 801b5da:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b5dc:	429a      	cmp	r2, r3
 801b5de:	d10e      	bne.n	801b5fe <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b5e0:	797a      	ldrb	r2, [r7, #5]
 801b5e2:	4b6a      	ldr	r3, [pc, #424]	; (801b78c <parseDHCPMSG+0x2a0>)
 801b5e4:	785b      	ldrb	r3, [r3, #1]
 801b5e6:	429a      	cmp	r2, r3
 801b5e8:	d109      	bne.n	801b5fe <parseDHCPMSG+0x112>
 801b5ea:	79ba      	ldrb	r2, [r7, #6]
 801b5ec:	4b67      	ldr	r3, [pc, #412]	; (801b78c <parseDHCPMSG+0x2a0>)
 801b5ee:	789b      	ldrb	r3, [r3, #2]
 801b5f0:	429a      	cmp	r2, r3
 801b5f2:	d104      	bne.n	801b5fe <parseDHCPMSG+0x112>
 801b5f4:	79fa      	ldrb	r2, [r7, #7]
 801b5f6:	4b65      	ldr	r3, [pc, #404]	; (801b78c <parseDHCPMSG+0x2a0>)
 801b5f8:	78db      	ldrb	r3, [r3, #3]
 801b5fa:	429a      	cmp	r2, r3
 801b5fc:	d001      	beq.n	801b602 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b5fe:	2300      	movs	r3, #0
 801b600:	e183      	b.n	801b90a <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b602:	4b5f      	ldr	r3, [pc, #380]	; (801b780 <parseDHCPMSG+0x294>)
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b608:	697b      	ldr	r3, [r7, #20]
 801b60a:	33f0      	adds	r3, #240	; 0xf0
 801b60c:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b60e:	8a3b      	ldrh	r3, [r7, #16]
 801b610:	3bf0      	subs	r3, #240	; 0xf0
 801b612:	697a      	ldr	r2, [r7, #20]
 801b614:	4413      	add	r3, r2
 801b616:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b618:	e170      	b.n	801b8fc <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b61a:	697b      	ldr	r3, [r7, #20]
 801b61c:	781b      	ldrb	r3, [r3, #0]
 801b61e:	2b36      	cmp	r3, #54	; 0x36
 801b620:	dc76      	bgt.n	801b710 <parseDHCPMSG+0x224>
 801b622:	2b00      	cmp	r3, #0
 801b624:	f2c0 815d 	blt.w	801b8e2 <parseDHCPMSG+0x3f6>
 801b628:	2b36      	cmp	r3, #54	; 0x36
 801b62a:	f200 815a 	bhi.w	801b8e2 <parseDHCPMSG+0x3f6>
 801b62e:	a201      	add	r2, pc, #4	; (adr r2, 801b634 <parseDHCPMSG+0x148>)
 801b630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b634:	0801b71d 	.word	0x0801b71d
 801b638:	0801b73d 	.word	0x0801b73d
 801b63c:	0801b8e3 	.word	0x0801b8e3
 801b640:	0801b795 	.word	0x0801b795
 801b644:	0801b8e3 	.word	0x0801b8e3
 801b648:	0801b8e3 	.word	0x0801b8e3
 801b64c:	0801b7e1 	.word	0x0801b7e1
 801b650:	0801b8e3 	.word	0x0801b8e3
 801b654:	0801b8e3 	.word	0x0801b8e3
 801b658:	0801b8e3 	.word	0x0801b8e3
 801b65c:	0801b8e3 	.word	0x0801b8e3
 801b660:	0801b8e3 	.word	0x0801b8e3
 801b664:	0801b8e3 	.word	0x0801b8e3
 801b668:	0801b8e3 	.word	0x0801b8e3
 801b66c:	0801b8e3 	.word	0x0801b8e3
 801b670:	0801b8e3 	.word	0x0801b8e3
 801b674:	0801b8e3 	.word	0x0801b8e3
 801b678:	0801b8e3 	.word	0x0801b8e3
 801b67c:	0801b8e3 	.word	0x0801b8e3
 801b680:	0801b8e3 	.word	0x0801b8e3
 801b684:	0801b8e3 	.word	0x0801b8e3
 801b688:	0801b8e3 	.word	0x0801b8e3
 801b68c:	0801b8e3 	.word	0x0801b8e3
 801b690:	0801b8e3 	.word	0x0801b8e3
 801b694:	0801b8e3 	.word	0x0801b8e3
 801b698:	0801b8e3 	.word	0x0801b8e3
 801b69c:	0801b8e3 	.word	0x0801b8e3
 801b6a0:	0801b8e3 	.word	0x0801b8e3
 801b6a4:	0801b8e3 	.word	0x0801b8e3
 801b6a8:	0801b8e3 	.word	0x0801b8e3
 801b6ac:	0801b8e3 	.word	0x0801b8e3
 801b6b0:	0801b8e3 	.word	0x0801b8e3
 801b6b4:	0801b8e3 	.word	0x0801b8e3
 801b6b8:	0801b8e3 	.word	0x0801b8e3
 801b6bc:	0801b8e3 	.word	0x0801b8e3
 801b6c0:	0801b8e3 	.word	0x0801b8e3
 801b6c4:	0801b8e3 	.word	0x0801b8e3
 801b6c8:	0801b8e3 	.word	0x0801b8e3
 801b6cc:	0801b8e3 	.word	0x0801b8e3
 801b6d0:	0801b8e3 	.word	0x0801b8e3
 801b6d4:	0801b8e3 	.word	0x0801b8e3
 801b6d8:	0801b8e3 	.word	0x0801b8e3
 801b6dc:	0801b8e3 	.word	0x0801b8e3
 801b6e0:	0801b8e3 	.word	0x0801b8e3
 801b6e4:	0801b8e3 	.word	0x0801b8e3
 801b6e8:	0801b8e3 	.word	0x0801b8e3
 801b6ec:	0801b8e3 	.word	0x0801b8e3
 801b6f0:	0801b8e3 	.word	0x0801b8e3
 801b6f4:	0801b8e3 	.word	0x0801b8e3
 801b6f8:	0801b8e3 	.word	0x0801b8e3
 801b6fc:	0801b8e3 	.word	0x0801b8e3
 801b700:	0801b82d 	.word	0x0801b82d
 801b704:	0801b8e3 	.word	0x0801b8e3
 801b708:	0801b725 	.word	0x0801b725
 801b70c:	0801b889 	.word	0x0801b889
 801b710:	2bff      	cmp	r3, #255	; 0xff
 801b712:	f040 80e6 	bne.w	801b8e2 <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	617b      	str	r3, [r7, #20]
   				break;
 801b71a:	e0ef      	b.n	801b8fc <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801b71c:	697b      	ldr	r3, [r7, #20]
 801b71e:	3301      	adds	r3, #1
 801b720:	617b      	str	r3, [r7, #20]
   				break;
 801b722:	e0eb      	b.n	801b8fc <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801b724:	697b      	ldr	r3, [r7, #20]
 801b726:	3301      	adds	r3, #1
 801b728:	617b      	str	r3, [r7, #20]
   				p++;
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	3301      	adds	r3, #1
 801b72e:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801b730:	697b      	ldr	r3, [r7, #20]
 801b732:	1c5a      	adds	r2, r3, #1
 801b734:	617a      	str	r2, [r7, #20]
 801b736:	781b      	ldrb	r3, [r3, #0]
 801b738:	74fb      	strb	r3, [r7, #19]
   				break;
 801b73a:	e0df      	b.n	801b8fc <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801b73c:	697b      	ldr	r3, [r7, #20]
 801b73e:	3301      	adds	r3, #1
 801b740:	617b      	str	r3, [r7, #20]
   				p++;
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	3301      	adds	r3, #1
 801b746:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801b748:	697b      	ldr	r3, [r7, #20]
 801b74a:	1c5a      	adds	r2, r3, #1
 801b74c:	617a      	str	r2, [r7, #20]
 801b74e:	781a      	ldrb	r2, [r3, #0]
 801b750:	4b0f      	ldr	r3, [pc, #60]	; (801b790 <parseDHCPMSG+0x2a4>)
 801b752:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801b754:	697b      	ldr	r3, [r7, #20]
 801b756:	1c5a      	adds	r2, r3, #1
 801b758:	617a      	str	r2, [r7, #20]
 801b75a:	781a      	ldrb	r2, [r3, #0]
 801b75c:	4b0c      	ldr	r3, [pc, #48]	; (801b790 <parseDHCPMSG+0x2a4>)
 801b75e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	1c5a      	adds	r2, r3, #1
 801b764:	617a      	str	r2, [r7, #20]
 801b766:	781a      	ldrb	r2, [r3, #0]
 801b768:	4b09      	ldr	r3, [pc, #36]	; (801b790 <parseDHCPMSG+0x2a4>)
 801b76a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801b76c:	697b      	ldr	r3, [r7, #20]
 801b76e:	1c5a      	adds	r2, r3, #1
 801b770:	617a      	str	r2, [r7, #20]
 801b772:	781a      	ldrb	r2, [r3, #0]
 801b774:	4b06      	ldr	r3, [pc, #24]	; (801b790 <parseDHCPMSG+0x2a4>)
 801b776:	70da      	strb	r2, [r3, #3]
   				break;
 801b778:	e0c0      	b.n	801b8fc <parseDHCPMSG+0x410>
 801b77a:	bf00      	nop
 801b77c:	20000985 	.word	0x20000985
 801b780:	200009b0 	.word	0x200009b0
 801b784:	200009b4 	.word	0x200009b4
 801b788:	20000988 	.word	0x20000988
 801b78c:	2000098c 	.word	0x2000098c
 801b790:	2000099c 	.word	0x2000099c
   			case routersOnSubnet :
   				p++;
 801b794:	697b      	ldr	r3, [r7, #20]
 801b796:	3301      	adds	r3, #1
 801b798:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b79a:	697b      	ldr	r3, [r7, #20]
 801b79c:	1c5a      	adds	r2, r3, #1
 801b79e:	617a      	str	r2, [r7, #20]
 801b7a0:	781b      	ldrb	r3, [r3, #0]
 801b7a2:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801b7a4:	697b      	ldr	r3, [r7, #20]
 801b7a6:	1c5a      	adds	r2, r3, #1
 801b7a8:	617a      	str	r2, [r7, #20]
 801b7aa:	781a      	ldrb	r2, [r3, #0]
 801b7ac:	4b59      	ldr	r3, [pc, #356]	; (801b914 <parseDHCPMSG+0x428>)
 801b7ae:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801b7b0:	697b      	ldr	r3, [r7, #20]
 801b7b2:	1c5a      	adds	r2, r3, #1
 801b7b4:	617a      	str	r2, [r7, #20]
 801b7b6:	781a      	ldrb	r2, [r3, #0]
 801b7b8:	4b56      	ldr	r3, [pc, #344]	; (801b914 <parseDHCPMSG+0x428>)
 801b7ba:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801b7bc:	697b      	ldr	r3, [r7, #20]
 801b7be:	1c5a      	adds	r2, r3, #1
 801b7c0:	617a      	str	r2, [r7, #20]
 801b7c2:	781a      	ldrb	r2, [r3, #0]
 801b7c4:	4b53      	ldr	r3, [pc, #332]	; (801b914 <parseDHCPMSG+0x428>)
 801b7c6:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801b7c8:	697b      	ldr	r3, [r7, #20]
 801b7ca:	1c5a      	adds	r2, r3, #1
 801b7cc:	617a      	str	r2, [r7, #20]
 801b7ce:	781a      	ldrb	r2, [r3, #0]
 801b7d0:	4b50      	ldr	r3, [pc, #320]	; (801b914 <parseDHCPMSG+0x428>)
 801b7d2:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b7d4:	7afb      	ldrb	r3, [r7, #11]
 801b7d6:	3b04      	subs	r3, #4
 801b7d8:	697a      	ldr	r2, [r7, #20]
 801b7da:	4413      	add	r3, r2
 801b7dc:	617b      	str	r3, [r7, #20]
   				break;
 801b7de:	e08d      	b.n	801b8fc <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801b7e0:	697b      	ldr	r3, [r7, #20]
 801b7e2:	3301      	adds	r3, #1
 801b7e4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801b7e6:	697b      	ldr	r3, [r7, #20]
 801b7e8:	1c5a      	adds	r2, r3, #1
 801b7ea:	617a      	str	r2, [r7, #20]
 801b7ec:	781b      	ldrb	r3, [r3, #0]
 801b7ee:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801b7f0:	697b      	ldr	r3, [r7, #20]
 801b7f2:	1c5a      	adds	r2, r3, #1
 801b7f4:	617a      	str	r2, [r7, #20]
 801b7f6:	781a      	ldrb	r2, [r3, #0]
 801b7f8:	4b47      	ldr	r3, [pc, #284]	; (801b918 <parseDHCPMSG+0x42c>)
 801b7fa:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801b7fc:	697b      	ldr	r3, [r7, #20]
 801b7fe:	1c5a      	adds	r2, r3, #1
 801b800:	617a      	str	r2, [r7, #20]
 801b802:	781a      	ldrb	r2, [r3, #0]
 801b804:	4b44      	ldr	r3, [pc, #272]	; (801b918 <parseDHCPMSG+0x42c>)
 801b806:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801b808:	697b      	ldr	r3, [r7, #20]
 801b80a:	1c5a      	adds	r2, r3, #1
 801b80c:	617a      	str	r2, [r7, #20]
 801b80e:	781a      	ldrb	r2, [r3, #0]
 801b810:	4b41      	ldr	r3, [pc, #260]	; (801b918 <parseDHCPMSG+0x42c>)
 801b812:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801b814:	697b      	ldr	r3, [r7, #20]
 801b816:	1c5a      	adds	r2, r3, #1
 801b818:	617a      	str	r2, [r7, #20]
 801b81a:	781a      	ldrb	r2, [r3, #0]
 801b81c:	4b3e      	ldr	r3, [pc, #248]	; (801b918 <parseDHCPMSG+0x42c>)
 801b81e:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801b820:	7afb      	ldrb	r3, [r7, #11]
 801b822:	3b04      	subs	r3, #4
 801b824:	697a      	ldr	r2, [r7, #20]
 801b826:	4413      	add	r3, r2
 801b828:	617b      	str	r3, [r7, #20]
   				break;
 801b82a:	e067      	b.n	801b8fc <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801b82c:	697b      	ldr	r3, [r7, #20]
 801b82e:	3301      	adds	r3, #1
 801b830:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b832:	697b      	ldr	r3, [r7, #20]
 801b834:	1c5a      	adds	r2, r3, #1
 801b836:	617a      	str	r2, [r7, #20]
 801b838:	781b      	ldrb	r3, [r3, #0]
 801b83a:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801b83c:	697b      	ldr	r3, [r7, #20]
 801b83e:	1c5a      	adds	r2, r3, #1
 801b840:	617a      	str	r2, [r7, #20]
 801b842:	781b      	ldrb	r3, [r3, #0]
 801b844:	461a      	mov	r2, r3
 801b846:	4b35      	ldr	r3, [pc, #212]	; (801b91c <parseDHCPMSG+0x430>)
 801b848:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b84a:	4b34      	ldr	r3, [pc, #208]	; (801b91c <parseDHCPMSG+0x430>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	021a      	lsls	r2, r3, #8
 801b850:	697b      	ldr	r3, [r7, #20]
 801b852:	1c59      	adds	r1, r3, #1
 801b854:	6179      	str	r1, [r7, #20]
 801b856:	781b      	ldrb	r3, [r3, #0]
 801b858:	4413      	add	r3, r2
 801b85a:	4a30      	ldr	r2, [pc, #192]	; (801b91c <parseDHCPMSG+0x430>)
 801b85c:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b85e:	4b2f      	ldr	r3, [pc, #188]	; (801b91c <parseDHCPMSG+0x430>)
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	021a      	lsls	r2, r3, #8
 801b864:	697b      	ldr	r3, [r7, #20]
 801b866:	1c59      	adds	r1, r3, #1
 801b868:	6179      	str	r1, [r7, #20]
 801b86a:	781b      	ldrb	r3, [r3, #0]
 801b86c:	4413      	add	r3, r2
 801b86e:	4a2b      	ldr	r2, [pc, #172]	; (801b91c <parseDHCPMSG+0x430>)
 801b870:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801b872:	4b2a      	ldr	r3, [pc, #168]	; (801b91c <parseDHCPMSG+0x430>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	021a      	lsls	r2, r3, #8
 801b878:	697b      	ldr	r3, [r7, #20]
 801b87a:	1c59      	adds	r1, r3, #1
 801b87c:	6179      	str	r1, [r7, #20]
 801b87e:	781b      	ldrb	r3, [r3, #0]
 801b880:	4413      	add	r3, r2
 801b882:	4a26      	ldr	r2, [pc, #152]	; (801b91c <parseDHCPMSG+0x430>)
 801b884:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801b886:	e039      	b.n	801b8fc <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801b888:	697b      	ldr	r3, [r7, #20]
 801b88a:	3301      	adds	r3, #1
 801b88c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b88e:	697b      	ldr	r3, [r7, #20]
 801b890:	1c5a      	adds	r2, r3, #1
 801b892:	617a      	str	r2, [r7, #20]
 801b894:	781b      	ldrb	r3, [r3, #0]
 801b896:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801b898:	697b      	ldr	r3, [r7, #20]
 801b89a:	1c5a      	adds	r2, r3, #1
 801b89c:	617a      	str	r2, [r7, #20]
 801b89e:	781a      	ldrb	r2, [r3, #0]
 801b8a0:	4b1f      	ldr	r3, [pc, #124]	; (801b920 <parseDHCPMSG+0x434>)
 801b8a2:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801b8a4:	697b      	ldr	r3, [r7, #20]
 801b8a6:	1c5a      	adds	r2, r3, #1
 801b8a8:	617a      	str	r2, [r7, #20]
 801b8aa:	781a      	ldrb	r2, [r3, #0]
 801b8ac:	4b1c      	ldr	r3, [pc, #112]	; (801b920 <parseDHCPMSG+0x434>)
 801b8ae:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801b8b0:	697b      	ldr	r3, [r7, #20]
 801b8b2:	1c5a      	adds	r2, r3, #1
 801b8b4:	617a      	str	r2, [r7, #20]
 801b8b6:	781a      	ldrb	r2, [r3, #0]
 801b8b8:	4b19      	ldr	r3, [pc, #100]	; (801b920 <parseDHCPMSG+0x434>)
 801b8ba:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801b8bc:	697b      	ldr	r3, [r7, #20]
 801b8be:	1c5a      	adds	r2, r3, #1
 801b8c0:	617a      	str	r2, [r7, #20]
 801b8c2:	781a      	ldrb	r2, [r3, #0]
 801b8c4:	4b16      	ldr	r3, [pc, #88]	; (801b920 <parseDHCPMSG+0x434>)
 801b8c6:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801b8c8:	793a      	ldrb	r2, [r7, #4]
 801b8ca:	4b16      	ldr	r3, [pc, #88]	; (801b924 <parseDHCPMSG+0x438>)
 801b8cc:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801b8ce:	797a      	ldrb	r2, [r7, #5]
 801b8d0:	4b14      	ldr	r3, [pc, #80]	; (801b924 <parseDHCPMSG+0x438>)
 801b8d2:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801b8d4:	79ba      	ldrb	r2, [r7, #6]
 801b8d6:	4b13      	ldr	r3, [pc, #76]	; (801b924 <parseDHCPMSG+0x438>)
 801b8d8:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801b8da:	79fa      	ldrb	r2, [r7, #7]
 801b8dc:	4b11      	ldr	r3, [pc, #68]	; (801b924 <parseDHCPMSG+0x438>)
 801b8de:	70da      	strb	r2, [r3, #3]
   				break;
 801b8e0:	e00c      	b.n	801b8fc <parseDHCPMSG+0x410>
   			default :
   				p++;
 801b8e2:	697b      	ldr	r3, [r7, #20]
 801b8e4:	3301      	adds	r3, #1
 801b8e6:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801b8e8:	697b      	ldr	r3, [r7, #20]
 801b8ea:	1c5a      	adds	r2, r3, #1
 801b8ec:	617a      	str	r2, [r7, #20]
 801b8ee:	781b      	ldrb	r3, [r3, #0]
 801b8f0:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801b8f2:	7afb      	ldrb	r3, [r7, #11]
 801b8f4:	697a      	ldr	r2, [r7, #20]
 801b8f6:	4413      	add	r3, r2
 801b8f8:	617b      	str	r3, [r7, #20]
   				break;
 801b8fa:	bf00      	nop
		while ( p < e ) {
 801b8fc:	697a      	ldr	r2, [r7, #20]
 801b8fe:	68fb      	ldr	r3, [r7, #12]
 801b900:	429a      	cmp	r2, r3
 801b902:	f4ff ae8a 	bcc.w	801b61a <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801b906:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801b90a:	4618      	mov	r0, r3
 801b90c:	371c      	adds	r7, #28
 801b90e:	46bd      	mov	sp, r7
 801b910:	bd90      	pop	{r4, r7, pc}
 801b912:	bf00      	nop
 801b914:	20000998 	.word	0x20000998
 801b918:	200009a0 	.word	0x200009a0
 801b91c:	200000f0 	.word	0x200000f0
 801b920:	20000988 	.word	0x20000988
 801b924:	2000098c 	.word	0x2000098c

0801b928 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b082      	sub	sp, #8
 801b92c:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801b92e:	4b7f      	ldr	r3, [pc, #508]	; (801bb2c <DHCP_run+0x204>)
 801b930:	f993 3000 	ldrsb.w	r3, [r3]
 801b934:	2b06      	cmp	r3, #6
 801b936:	d101      	bne.n	801b93c <DHCP_run+0x14>
 801b938:	2305      	movs	r3, #5
 801b93a:	e0f3      	b.n	801bb24 <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801b93c:	4b7c      	ldr	r3, [pc, #496]	; (801bb30 <DHCP_run+0x208>)
 801b93e:	781b      	ldrb	r3, [r3, #0]
 801b940:	009b      	lsls	r3, r3, #2
 801b942:	3301      	adds	r3, #1
 801b944:	00db      	lsls	r3, r3, #3
 801b946:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7fc fe14 	bl	8018578 <WIZCHIP_READ>
 801b950:	4603      	mov	r3, r0
 801b952:	2b22      	cmp	r3, #34	; 0x22
 801b954:	d006      	beq.n	801b964 <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801b956:	4b76      	ldr	r3, [pc, #472]	; (801bb30 <DHCP_run+0x208>)
 801b958:	7818      	ldrb	r0, [r3, #0]
 801b95a:	2300      	movs	r3, #0
 801b95c:	2244      	movs	r2, #68	; 0x44
 801b95e:	2102      	movs	r1, #2
 801b960:	f7fd f8fa 	bl	8018b58 <socket>

	ret = DHCP_RUNNING;
 801b964:	2301      	movs	r3, #1
 801b966:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801b968:	f7ff fdc0 	bl	801b4ec <parseDHCPMSG>
 801b96c:	4603      	mov	r3, r0
 801b96e:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801b970:	4b6e      	ldr	r3, [pc, #440]	; (801bb2c <DHCP_run+0x204>)
 801b972:	f993 3000 	ldrsb.w	r3, [r3]
 801b976:	2b04      	cmp	r3, #4
 801b978:	f200 80d0 	bhi.w	801bb1c <DHCP_run+0x1f4>
 801b97c:	a201      	add	r2, pc, #4	; (adr r2, 801b984 <DHCP_run+0x5c>)
 801b97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b982:	bf00      	nop
 801b984:	0801b999 	.word	0x0801b999
 801b988:	0801b9bd 	.word	0x0801b9bd
 801b98c:	0801ba01 	.word	0x0801ba01
 801b990:	0801ba51 	.word	0x0801ba51
 801b994:	0801baab 	.word	0x0801baab
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801b998:	4b66      	ldr	r3, [pc, #408]	; (801bb34 <DHCP_run+0x20c>)
 801b99a:	2200      	movs	r2, #0
 801b99c:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801b99e:	4b65      	ldr	r3, [pc, #404]	; (801bb34 <DHCP_run+0x20c>)
 801b9a0:	2200      	movs	r2, #0
 801b9a2:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801b9a4:	4b63      	ldr	r3, [pc, #396]	; (801bb34 <DHCP_run+0x20c>)
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801b9aa:	4b62      	ldr	r3, [pc, #392]	; (801bb34 <DHCP_run+0x20c>)
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801b9b0:	f7fe fffa 	bl	801a9a8 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801b9b4:	4b5d      	ldr	r3, [pc, #372]	; (801bb2c <DHCP_run+0x204>)
 801b9b6:	2201      	movs	r2, #1
 801b9b8:	701a      	strb	r2, [r3, #0]
   		break;
 801b9ba:	e0b2      	b.n	801bb22 <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801b9bc:	79bb      	ldrb	r3, [r7, #6]
 801b9be:	2b02      	cmp	r3, #2
 801b9c0:	d119      	bne.n	801b9f6 <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801b9c2:	4b5d      	ldr	r3, [pc, #372]	; (801bb38 <DHCP_run+0x210>)
 801b9c4:	681b      	ldr	r3, [r3, #0]
 801b9c6:	7c1a      	ldrb	r2, [r3, #16]
 801b9c8:	4b5a      	ldr	r3, [pc, #360]	; (801bb34 <DHCP_run+0x20c>)
 801b9ca:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801b9cc:	4b5a      	ldr	r3, [pc, #360]	; (801bb38 <DHCP_run+0x210>)
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	7c5a      	ldrb	r2, [r3, #17]
 801b9d2:	4b58      	ldr	r3, [pc, #352]	; (801bb34 <DHCP_run+0x20c>)
 801b9d4:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801b9d6:	4b58      	ldr	r3, [pc, #352]	; (801bb38 <DHCP_run+0x210>)
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	7c9a      	ldrb	r2, [r3, #18]
 801b9dc:	4b55      	ldr	r3, [pc, #340]	; (801bb34 <DHCP_run+0x20c>)
 801b9de:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801b9e0:	4b55      	ldr	r3, [pc, #340]	; (801bb38 <DHCP_run+0x210>)
 801b9e2:	681b      	ldr	r3, [r3, #0]
 801b9e4:	7cda      	ldrb	r2, [r3, #19]
 801b9e6:	4b53      	ldr	r3, [pc, #332]	; (801bb34 <DHCP_run+0x20c>)
 801b9e8:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801b9ea:	f7ff f9a3 	bl	801ad34 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801b9ee:	4b4f      	ldr	r3, [pc, #316]	; (801bb2c <DHCP_run+0x204>)
 801b9f0:	2202      	movs	r2, #2
 801b9f2:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801b9f4:	e095      	b.n	801bb22 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801b9f6:	f000 f8b1 	bl	801bb5c <check_DHCP_timeout>
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	71fb      	strb	r3, [r7, #7]
         break;
 801b9fe:	e090      	b.n	801bb22 <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801ba00:	79bb      	ldrb	r3, [r7, #6]
 801ba02:	2b05      	cmp	r3, #5
 801ba04:	d116      	bne.n	801ba34 <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801ba06:	f000 f909 	bl	801bc1c <check_DHCP_leasedIP>
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	d008      	beq.n	801ba22 <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801ba10:	4b4a      	ldr	r3, [pc, #296]	; (801bb3c <DHCP_run+0x214>)
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	4798      	blx	r3
					reset_DHCP_timeout();
 801ba16:	f000 f9d9 	bl	801bdcc <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801ba1a:	4b44      	ldr	r3, [pc, #272]	; (801bb2c <DHCP_run+0x204>)
 801ba1c:	2203      	movs	r2, #3
 801ba1e:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801ba20:	e07f      	b.n	801bb22 <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801ba22:	f000 f9d3 	bl	801bdcc <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801ba26:	4b46      	ldr	r3, [pc, #280]	; (801bb40 <DHCP_run+0x218>)
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801ba2c:	4b3f      	ldr	r3, [pc, #252]	; (801bb2c <DHCP_run+0x204>)
 801ba2e:	2200      	movs	r2, #0
 801ba30:	701a      	strb	r2, [r3, #0]
		break;
 801ba32:	e076      	b.n	801bb22 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801ba34:	79bb      	ldrb	r3, [r7, #6]
 801ba36:	2b06      	cmp	r3, #6
 801ba38:	d105      	bne.n	801ba46 <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801ba3a:	f000 f9c7 	bl	801bdcc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801ba3e:	4b3b      	ldr	r3, [pc, #236]	; (801bb2c <DHCP_run+0x204>)
 801ba40:	2201      	movs	r2, #1
 801ba42:	701a      	strb	r2, [r3, #0]
		break;
 801ba44:	e06d      	b.n	801bb22 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801ba46:	f000 f889 	bl	801bb5c <check_DHCP_timeout>
 801ba4a:	4603      	mov	r3, r0
 801ba4c:	71fb      	strb	r3, [r7, #7]
		break;
 801ba4e:	e068      	b.n	801bb22 <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801ba50:	2304      	movs	r3, #4
 801ba52:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801ba54:	4b3b      	ldr	r3, [pc, #236]	; (801bb44 <DHCP_run+0x21c>)
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ba5c:	d060      	beq.n	801bb20 <DHCP_run+0x1f8>
 801ba5e:	4b39      	ldr	r3, [pc, #228]	; (801bb44 <DHCP_run+0x21c>)
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	089a      	lsrs	r2, r3, #2
 801ba64:	4b38      	ldr	r3, [pc, #224]	; (801bb48 <DHCP_run+0x220>)
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	429a      	cmp	r2, r3
 801ba6a:	d259      	bcs.n	801bb20 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801ba70:	4b30      	ldr	r3, [pc, #192]	; (801bb34 <DHCP_run+0x20c>)
 801ba72:	781a      	ldrb	r2, [r3, #0]
 801ba74:	4b35      	ldr	r3, [pc, #212]	; (801bb4c <DHCP_run+0x224>)
 801ba76:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801ba78:	4b2e      	ldr	r3, [pc, #184]	; (801bb34 <DHCP_run+0x20c>)
 801ba7a:	785a      	ldrb	r2, [r3, #1]
 801ba7c:	4b33      	ldr	r3, [pc, #204]	; (801bb4c <DHCP_run+0x224>)
 801ba7e:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801ba80:	4b2c      	ldr	r3, [pc, #176]	; (801bb34 <DHCP_run+0x20c>)
 801ba82:	789a      	ldrb	r2, [r3, #2]
 801ba84:	4b31      	ldr	r3, [pc, #196]	; (801bb4c <DHCP_run+0x224>)
 801ba86:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801ba88:	4b2a      	ldr	r3, [pc, #168]	; (801bb34 <DHCP_run+0x20c>)
 801ba8a:	78da      	ldrb	r2, [r3, #3]
 801ba8c:	4b2f      	ldr	r3, [pc, #188]	; (801bb4c <DHCP_run+0x224>)
 801ba8e:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801ba90:	4b2f      	ldr	r3, [pc, #188]	; (801bb50 <DHCP_run+0x228>)
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	3301      	adds	r3, #1
 801ba96:	4a2e      	ldr	r2, [pc, #184]	; (801bb50 <DHCP_run+0x228>)
 801ba98:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801ba9a:	f7ff f94b 	bl	801ad34 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801ba9e:	f000 f995 	bl	801bdcc <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801baa2:	4b22      	ldr	r3, [pc, #136]	; (801bb2c <DHCP_run+0x204>)
 801baa4:	2204      	movs	r2, #4
 801baa6:	701a      	strb	r2, [r3, #0]
			}
		break;
 801baa8:	e03a      	b.n	801bb20 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801baaa:	2304      	movs	r3, #4
 801baac:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801baae:	79bb      	ldrb	r3, [r7, #6]
 801bab0:	2b05      	cmp	r3, #5
 801bab2:	d125      	bne.n	801bb00 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801bab4:	4b27      	ldr	r3, [pc, #156]	; (801bb54 <DHCP_run+0x22c>)
 801bab6:	2200      	movs	r2, #0
 801bab8:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801baba:	4b24      	ldr	r3, [pc, #144]	; (801bb4c <DHCP_run+0x224>)
 801babc:	781a      	ldrb	r2, [r3, #0]
 801babe:	4b1d      	ldr	r3, [pc, #116]	; (801bb34 <DHCP_run+0x20c>)
 801bac0:	781b      	ldrb	r3, [r3, #0]
 801bac2:	429a      	cmp	r2, r3
 801bac4:	d111      	bne.n	801baea <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bac6:	4b21      	ldr	r3, [pc, #132]	; (801bb4c <DHCP_run+0x224>)
 801bac8:	785a      	ldrb	r2, [r3, #1]
 801baca:	4b1a      	ldr	r3, [pc, #104]	; (801bb34 <DHCP_run+0x20c>)
 801bacc:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801bace:	429a      	cmp	r2, r3
 801bad0:	d10b      	bne.n	801baea <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bad2:	4b1e      	ldr	r3, [pc, #120]	; (801bb4c <DHCP_run+0x224>)
 801bad4:	789a      	ldrb	r2, [r3, #2]
 801bad6:	4b17      	ldr	r3, [pc, #92]	; (801bb34 <DHCP_run+0x20c>)
 801bad8:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bada:	429a      	cmp	r2, r3
 801badc:	d105      	bne.n	801baea <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801bade:	4b1b      	ldr	r3, [pc, #108]	; (801bb4c <DHCP_run+0x224>)
 801bae0:	78da      	ldrb	r2, [r3, #3]
 801bae2:	4b14      	ldr	r3, [pc, #80]	; (801bb34 <DHCP_run+0x20c>)
 801bae4:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bae6:	429a      	cmp	r2, r3
 801bae8:	d004      	beq.n	801baf4 <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801baea:	2303      	movs	r3, #3
 801baec:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801baee:	4b1a      	ldr	r3, [pc, #104]	; (801bb58 <DHCP_run+0x230>)
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801baf4:	f000 f96a 	bl	801bdcc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801baf8:	4b0c      	ldr	r3, [pc, #48]	; (801bb2c <DHCP_run+0x204>)
 801bafa:	2203      	movs	r2, #3
 801bafc:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801bafe:	e010      	b.n	801bb22 <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bb00:	79bb      	ldrb	r3, [r7, #6]
 801bb02:	2b06      	cmp	r3, #6
 801bb04:	d105      	bne.n	801bb12 <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801bb06:	f000 f961 	bl	801bdcc <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bb0a:	4b08      	ldr	r3, [pc, #32]	; (801bb2c <DHCP_run+0x204>)
 801bb0c:	2201      	movs	r2, #1
 801bb0e:	701a      	strb	r2, [r3, #0]
	   	break;
 801bb10:	e007      	b.n	801bb22 <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bb12:	f000 f823 	bl	801bb5c <check_DHCP_timeout>
 801bb16:	4603      	mov	r3, r0
 801bb18:	71fb      	strb	r3, [r7, #7]
	   	break;
 801bb1a:	e002      	b.n	801bb22 <DHCP_run+0x1fa>
		default :
   		break;
 801bb1c:	bf00      	nop
 801bb1e:	e000      	b.n	801bb22 <DHCP_run+0x1fa>
		break;
 801bb20:	bf00      	nop
	}

	return ret;
 801bb22:	79fb      	ldrb	r3, [r7, #7]
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	3708      	adds	r7, #8
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	200009a4 	.word	0x200009a4
 801bb30:	20000985 	.word	0x20000985
 801bb34:	20000994 	.word	0x20000994
 801bb38:	200009b0 	.word	0x200009b0
 801bb3c:	20000104 	.word	0x20000104
 801bb40:	2000010c 	.word	0x2000010c
 801bb44:	200000f0 	.word	0x200000f0
 801bb48:	200009a8 	.word	0x200009a8
 801bb4c:	20000990 	.word	0x20000990
 801bb50:	200009ac 	.word	0x200009ac
 801bb54:	200009a5 	.word	0x200009a5
 801bb58:	20000108 	.word	0x20000108

0801bb5c <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b082      	sub	sp, #8
 801bb60:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801bb62:	2301      	movs	r3, #1
 801bb64:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 801bb66:	4b29      	ldr	r3, [pc, #164]	; (801bc0c <check_DHCP_timeout+0xb0>)
 801bb68:	f993 3000 	ldrsb.w	r3, [r3]
 801bb6c:	2b63      	cmp	r3, #99	; 0x63
 801bb6e:	dc2d      	bgt.n	801bbcc <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 801bb70:	4b27      	ldr	r3, [pc, #156]	; (801bc10 <check_DHCP_timeout+0xb4>)
 801bb72:	681a      	ldr	r2, [r3, #0]
 801bb74:	4b27      	ldr	r3, [pc, #156]	; (801bc14 <check_DHCP_timeout+0xb8>)
 801bb76:	681b      	ldr	r3, [r3, #0]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	d242      	bcs.n	801bc02 <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 801bb7c:	4b26      	ldr	r3, [pc, #152]	; (801bc18 <check_DHCP_timeout+0xbc>)
 801bb7e:	f993 3000 	ldrsb.w	r3, [r3]
 801bb82:	2b04      	cmp	r3, #4
 801bb84:	d00c      	beq.n	801bba0 <check_DHCP_timeout+0x44>
 801bb86:	2b04      	cmp	r3, #4
 801bb88:	dc0d      	bgt.n	801bba6 <check_DHCP_timeout+0x4a>
 801bb8a:	2b01      	cmp	r3, #1
 801bb8c:	d002      	beq.n	801bb94 <check_DHCP_timeout+0x38>
 801bb8e:	2b02      	cmp	r3, #2
 801bb90:	d003      	beq.n	801bb9a <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801bb92:	e008      	b.n	801bba6 <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 801bb94:	f7fe ff08 	bl	801a9a8 <send_DHCP_DISCOVER>
				break;
 801bb98:	e006      	b.n	801bba8 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801bb9a:	f7ff f8cb 	bl	801ad34 <send_DHCP_REQUEST>
				break;
 801bb9e:	e003      	b.n	801bba8 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 801bba0:	f7ff f8c8 	bl	801ad34 <send_DHCP_REQUEST>
				break;
 801bba4:	e000      	b.n	801bba8 <check_DHCP_timeout+0x4c>
				break;
 801bba6:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801bba8:	4b1a      	ldr	r3, [pc, #104]	; (801bc14 <check_DHCP_timeout+0xb8>)
 801bbaa:	2200      	movs	r2, #0
 801bbac:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801bbae:	4b19      	ldr	r3, [pc, #100]	; (801bc14 <check_DHCP_timeout+0xb8>)
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	3302      	adds	r3, #2
 801bbb4:	4a16      	ldr	r2, [pc, #88]	; (801bc10 <check_DHCP_timeout+0xb4>)
 801bbb6:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801bbb8:	4b14      	ldr	r3, [pc, #80]	; (801bc0c <check_DHCP_timeout+0xb0>)
 801bbba:	f993 3000 	ldrsb.w	r3, [r3]
 801bbbe:	b2db      	uxtb	r3, r3
 801bbc0:	3301      	adds	r3, #1
 801bbc2:	b2db      	uxtb	r3, r3
 801bbc4:	b25a      	sxtb	r2, r3
 801bbc6:	4b11      	ldr	r3, [pc, #68]	; (801bc0c <check_DHCP_timeout+0xb0>)
 801bbc8:	701a      	strb	r2, [r3, #0]
 801bbca:	e01a      	b.n	801bc02 <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 801bbcc:	4b12      	ldr	r3, [pc, #72]	; (801bc18 <check_DHCP_timeout+0xbc>)
 801bbce:	f993 3000 	ldrsb.w	r3, [r3]
 801bbd2:	2b04      	cmp	r3, #4
 801bbd4:	d00c      	beq.n	801bbf0 <check_DHCP_timeout+0x94>
 801bbd6:	2b04      	cmp	r3, #4
 801bbd8:	dc10      	bgt.n	801bbfc <check_DHCP_timeout+0xa0>
 801bbda:	2b01      	cmp	r3, #1
 801bbdc:	d002      	beq.n	801bbe4 <check_DHCP_timeout+0x88>
 801bbde:	2b02      	cmp	r3, #2
 801bbe0:	d006      	beq.n	801bbf0 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 801bbe2:	e00b      	b.n	801bbfc <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 801bbe4:	4b0c      	ldr	r3, [pc, #48]	; (801bc18 <check_DHCP_timeout+0xbc>)
 801bbe6:	2200      	movs	r2, #0
 801bbe8:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 801bbea:	2300      	movs	r3, #0
 801bbec:	71fb      	strb	r3, [r7, #7]
				break;
 801bbee:	e006      	b.n	801bbfe <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 801bbf0:	f7fe feda 	bl	801a9a8 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bbf4:	4b08      	ldr	r3, [pc, #32]	; (801bc18 <check_DHCP_timeout+0xbc>)
 801bbf6:	2201      	movs	r2, #1
 801bbf8:	701a      	strb	r2, [r3, #0]
				break;
 801bbfa:	e000      	b.n	801bbfe <check_DHCP_timeout+0xa2>
				break;
 801bbfc:	bf00      	nop
		}
		reset_DHCP_timeout();
 801bbfe:	f000 f8e5 	bl	801bdcc <reset_DHCP_timeout>
	}
	return ret;
 801bc02:	79fb      	ldrb	r3, [r7, #7]
}
 801bc04:	4618      	mov	r0, r3
 801bc06:	3708      	adds	r7, #8
 801bc08:	46bd      	mov	sp, r7
 801bc0a:	bd80      	pop	{r7, pc}
 801bc0c:	200009a5 	.word	0x200009a5
 801bc10:	200000f4 	.word	0x200000f4
 801bc14:	200009a8 	.word	0x200009a8
 801bc18:	200009a4 	.word	0x200009a4

0801bc1c <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b084      	sub	sp, #16
 801bc20:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801bc22:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bc26:	f7fc fca7 	bl	8018578 <WIZCHIP_READ>
 801bc2a:	4603      	mov	r3, r0
 801bc2c:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801bc2e:	2103      	movs	r1, #3
 801bc30:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bc34:	f7fc fcec 	bl	8018610 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801bc38:	4b15      	ldr	r3, [pc, #84]	; (801bc90 <check_DHCP_leasedIP+0x74>)
 801bc3a:	7818      	ldrb	r0, [r3, #0]
 801bc3c:	f241 3388 	movw	r3, #5000	; 0x1388
 801bc40:	9300      	str	r3, [sp, #0]
 801bc42:	4b14      	ldr	r3, [pc, #80]	; (801bc94 <check_DHCP_leasedIP+0x78>)
 801bc44:	2211      	movs	r2, #17
 801bc46:	4914      	ldr	r1, [pc, #80]	; (801bc98 <check_DHCP_leasedIP+0x7c>)
 801bc48:	f7fd fc64 	bl	8019514 <sendto>
 801bc4c:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801bc4e:	79fb      	ldrb	r3, [r7, #7]
 801bc50:	4619      	mov	r1, r3
 801bc52:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bc56:	f7fc fcdb 	bl	8018610 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801bc5a:	683b      	ldr	r3, [r7, #0]
 801bc5c:	f113 0f0d 	cmn.w	r3, #13
 801bc60:	d101      	bne.n	801bc66 <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801bc62:	2301      	movs	r3, #1
 801bc64:	e010      	b.n	801bc88 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801bc66:	f7ff faef 	bl	801b248 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801bc6a:	4b0c      	ldr	r3, [pc, #48]	; (801bc9c <check_DHCP_leasedIP+0x80>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bc70:	e003      	b.n	801bc7a <check_DHCP_leasedIP+0x5e>

			delay(200);
 801bc72:	4b0b      	ldr	r3, [pc, #44]	; (801bca0 <check_DHCP_leasedIP+0x84>)
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	20c8      	movs	r0, #200	; 0xc8
 801bc78:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bc7a:	4b08      	ldr	r3, [pc, #32]	; (801bc9c <check_DHCP_leasedIP+0x80>)
 801bc7c:	681a      	ldr	r2, [r3, #0]
 801bc7e:	683b      	ldr	r3, [r7, #0]
 801bc80:	1ad3      	subs	r3, r2, r3
 801bc82:	2b01      	cmp	r3, #1
 801bc84:	d9f5      	bls.n	801bc72 <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801bc86:	2300      	movs	r3, #0
	}
}	
 801bc88:	4618      	mov	r0, r3
 801bc8a:	3708      	adds	r7, #8
 801bc8c:	46bd      	mov	sp, r7
 801bc8e:	bd80      	pop	{r7, pc}
 801bc90:	20000985 	.word	0x20000985
 801bc94:	20000994 	.word	0x20000994
 801bc98:	08032aec 	.word	0x08032aec
 801bc9c:	200009a8 	.word	0x200009a8
 801bca0:	20000110 	.word	0x20000110

0801bca4 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b084      	sub	sp, #16
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	4603      	mov	r3, r0
 801bcac:	6039      	str	r1, [r7, #0]
 801bcae:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801bcb0:	2300      	movs	r3, #0
 801bcb2:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801bcb4:	2206      	movs	r2, #6
 801bcb6:	493f      	ldr	r1, [pc, #252]	; (801bdb4 <DHCP_init+0x110>)
 801bcb8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bcbc:	f7fc fcf6 	bl	80186ac <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801bcc0:	4b3c      	ldr	r3, [pc, #240]	; (801bdb4 <DHCP_init+0x110>)
 801bcc2:	781a      	ldrb	r2, [r3, #0]
 801bcc4:	4b3b      	ldr	r3, [pc, #236]	; (801bdb4 <DHCP_init+0x110>)
 801bcc6:	785b      	ldrb	r3, [r3, #1]
 801bcc8:	4313      	orrs	r3, r2
 801bcca:	b2da      	uxtb	r2, r3
 801bccc:	4b39      	ldr	r3, [pc, #228]	; (801bdb4 <DHCP_init+0x110>)
 801bcce:	789b      	ldrb	r3, [r3, #2]
 801bcd0:	4313      	orrs	r3, r2
 801bcd2:	b2da      	uxtb	r2, r3
 801bcd4:	4b37      	ldr	r3, [pc, #220]	; (801bdb4 <DHCP_init+0x110>)
 801bcd6:	78db      	ldrb	r3, [r3, #3]
 801bcd8:	4313      	orrs	r3, r2
 801bcda:	b2da      	uxtb	r2, r3
 801bcdc:	4b35      	ldr	r3, [pc, #212]	; (801bdb4 <DHCP_init+0x110>)
 801bcde:	791b      	ldrb	r3, [r3, #4]
 801bce0:	4313      	orrs	r3, r2
 801bce2:	b2da      	uxtb	r2, r3
 801bce4:	4b33      	ldr	r3, [pc, #204]	; (801bdb4 <DHCP_init+0x110>)
 801bce6:	795b      	ldrb	r3, [r3, #5]
 801bce8:	4313      	orrs	r3, r2
 801bcea:	b2db      	uxtb	r3, r3
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d117      	bne.n	801bd20 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801bcf0:	4b30      	ldr	r3, [pc, #192]	; (801bdb4 <DHCP_init+0x110>)
 801bcf2:	2200      	movs	r2, #0
 801bcf4:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801bcf6:	4b2f      	ldr	r3, [pc, #188]	; (801bdb4 <DHCP_init+0x110>)
 801bcf8:	2208      	movs	r2, #8
 801bcfa:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801bcfc:	4b2d      	ldr	r3, [pc, #180]	; (801bdb4 <DHCP_init+0x110>)
 801bcfe:	22dc      	movs	r2, #220	; 0xdc
 801bd00:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801bd02:	4b2c      	ldr	r3, [pc, #176]	; (801bdb4 <DHCP_init+0x110>)
 801bd04:	2200      	movs	r2, #0
 801bd06:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801bd08:	4b2a      	ldr	r3, [pc, #168]	; (801bdb4 <DHCP_init+0x110>)
 801bd0a:	2200      	movs	r2, #0
 801bd0c:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801bd0e:	4b29      	ldr	r3, [pc, #164]	; (801bdb4 <DHCP_init+0x110>)
 801bd10:	2200      	movs	r2, #0
 801bd12:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801bd14:	2206      	movs	r2, #6
 801bd16:	4927      	ldr	r1, [pc, #156]	; (801bdb4 <DHCP_init+0x110>)
 801bd18:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bd1c:	f7fc fd26 	bl	801876c <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801bd20:	4a25      	ldr	r2, [pc, #148]	; (801bdb8 <DHCP_init+0x114>)
 801bd22:	79fb      	ldrb	r3, [r7, #7]
 801bd24:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801bd26:	4a25      	ldr	r2, [pc, #148]	; (801bdbc <DHCP_init+0x118>)
 801bd28:	683b      	ldr	r3, [r7, #0]
 801bd2a:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801bd2c:	4b24      	ldr	r3, [pc, #144]	; (801bdc0 <DHCP_init+0x11c>)
 801bd2e:	4a25      	ldr	r2, [pc, #148]	; (801bdc4 <DHCP_init+0x120>)
 801bd30:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801bd32:	4b20      	ldr	r3, [pc, #128]	; (801bdb4 <DHCP_init+0x110>)
 801bd34:	78db      	ldrb	r3, [r3, #3]
 801bd36:	461a      	mov	r2, r3
 801bd38:	4b21      	ldr	r3, [pc, #132]	; (801bdc0 <DHCP_init+0x11c>)
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	4413      	add	r3, r2
 801bd3e:	4a20      	ldr	r2, [pc, #128]	; (801bdc0 <DHCP_init+0x11c>)
 801bd40:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801bd42:	4b1c      	ldr	r3, [pc, #112]	; (801bdb4 <DHCP_init+0x110>)
 801bd44:	791b      	ldrb	r3, [r3, #4]
 801bd46:	461a      	mov	r2, r3
 801bd48:	4b1d      	ldr	r3, [pc, #116]	; (801bdc0 <DHCP_init+0x11c>)
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	4413      	add	r3, r2
 801bd4e:	4a1c      	ldr	r2, [pc, #112]	; (801bdc0 <DHCP_init+0x11c>)
 801bd50:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801bd52:	4b18      	ldr	r3, [pc, #96]	; (801bdb4 <DHCP_init+0x110>)
 801bd54:	795b      	ldrb	r3, [r3, #5]
 801bd56:	461a      	mov	r2, r3
 801bd58:	4b19      	ldr	r3, [pc, #100]	; (801bdc0 <DHCP_init+0x11c>)
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	4413      	add	r3, r2
 801bd5e:	4a18      	ldr	r2, [pc, #96]	; (801bdc0 <DHCP_init+0x11c>)
 801bd60:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801bd62:	4b14      	ldr	r3, [pc, #80]	; (801bdb4 <DHCP_init+0x110>)
 801bd64:	78da      	ldrb	r2, [r3, #3]
 801bd66:	4b13      	ldr	r3, [pc, #76]	; (801bdb4 <DHCP_init+0x110>)
 801bd68:	791b      	ldrb	r3, [r3, #4]
 801bd6a:	4053      	eors	r3, r2
 801bd6c:	b2da      	uxtb	r2, r3
 801bd6e:	4b11      	ldr	r3, [pc, #68]	; (801bdb4 <DHCP_init+0x110>)
 801bd70:	795b      	ldrb	r3, [r3, #5]
 801bd72:	4053      	eors	r3, r2
 801bd74:	b2db      	uxtb	r3, r3
 801bd76:	461a      	mov	r2, r3
 801bd78:	4b11      	ldr	r3, [pc, #68]	; (801bdc0 <DHCP_init+0x11c>)
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	4413      	add	r3, r2
 801bd7e:	4a10      	ldr	r2, [pc, #64]	; (801bdc0 <DHCP_init+0x11c>)
 801bd80:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801bd82:	f107 030c 	add.w	r3, r7, #12
 801bd86:	2204      	movs	r2, #4
 801bd88:	4619      	mov	r1, r3
 801bd8a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801bd8e:	f7fc fced 	bl	801876c <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801bd92:	f107 030c 	add.w	r3, r7, #12
 801bd96:	2204      	movs	r2, #4
 801bd98:	4619      	mov	r1, r3
 801bd9a:	f44f 7080 	mov.w	r0, #256	; 0x100
 801bd9e:	f7fc fce5 	bl	801876c <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801bda2:	f000 f813 	bl	801bdcc <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801bda6:	4b08      	ldr	r3, [pc, #32]	; (801bdc8 <DHCP_init+0x124>)
 801bda8:	2200      	movs	r2, #0
 801bdaa:	701a      	strb	r2, [r3, #0]
}
 801bdac:	bf00      	nop
 801bdae:	3710      	adds	r7, #16
 801bdb0:	46bd      	mov	sp, r7
 801bdb2:	bd80      	pop	{r7, pc}
 801bdb4:	200009b4 	.word	0x200009b4
 801bdb8:	20000985 	.word	0x20000985
 801bdbc:	200009b0 	.word	0x200009b0
 801bdc0:	200009ac 	.word	0x200009ac
 801bdc4:	12345678 	.word	0x12345678
 801bdc8:	200009a4 	.word	0x200009a4

0801bdcc <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801bdcc:	b480      	push	{r7}
 801bdce:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801bdd0:	4b06      	ldr	r3, [pc, #24]	; (801bdec <reset_DHCP_timeout+0x20>)
 801bdd2:	2200      	movs	r2, #0
 801bdd4:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801bdd6:	4b06      	ldr	r3, [pc, #24]	; (801bdf0 <reset_DHCP_timeout+0x24>)
 801bdd8:	2202      	movs	r2, #2
 801bdda:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801bddc:	4b05      	ldr	r3, [pc, #20]	; (801bdf4 <reset_DHCP_timeout+0x28>)
 801bdde:	2200      	movs	r2, #0
 801bde0:	701a      	strb	r2, [r3, #0]
}
 801bde2:	bf00      	nop
 801bde4:	46bd      	mov	sp, r7
 801bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdea:	4770      	bx	lr
 801bdec:	200009a8 	.word	0x200009a8
 801bdf0:	200000f4 	.word	0x200000f4
 801bdf4:	200009a5 	.word	0x200009a5

0801bdf8 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801bdf8:	b480      	push	{r7}
 801bdfa:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801bdfc:	4b04      	ldr	r3, [pc, #16]	; (801be10 <DHCP_time_handler+0x18>)
 801bdfe:	681b      	ldr	r3, [r3, #0]
 801be00:	3301      	adds	r3, #1
 801be02:	4a03      	ldr	r2, [pc, #12]	; (801be10 <DHCP_time_handler+0x18>)
 801be04:	6013      	str	r3, [r2, #0]
}
 801be06:	bf00      	nop
 801be08:	46bd      	mov	sp, r7
 801be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be0e:	4770      	bx	lr
 801be10:	200009a8 	.word	0x200009a8

0801be14 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801be14:	b480      	push	{r7}
 801be16:	b083      	sub	sp, #12
 801be18:	af00      	add	r7, sp, #0
 801be1a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801be1c:	4b0c      	ldr	r3, [pc, #48]	; (801be50 <getIPfromDHCP+0x3c>)
 801be1e:	781a      	ldrb	r2, [r3, #0]
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	3301      	adds	r3, #1
 801be28:	4a09      	ldr	r2, [pc, #36]	; (801be50 <getIPfromDHCP+0x3c>)
 801be2a:	7852      	ldrb	r2, [r2, #1]
 801be2c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	3302      	adds	r3, #2
 801be32:	4a07      	ldr	r2, [pc, #28]	; (801be50 <getIPfromDHCP+0x3c>)
 801be34:	7892      	ldrb	r2, [r2, #2]
 801be36:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	3303      	adds	r3, #3
 801be3c:	4a04      	ldr	r2, [pc, #16]	; (801be50 <getIPfromDHCP+0x3c>)
 801be3e:	78d2      	ldrb	r2, [r2, #3]
 801be40:	701a      	strb	r2, [r3, #0]
}
 801be42:	bf00      	nop
 801be44:	370c      	adds	r7, #12
 801be46:	46bd      	mov	sp, r7
 801be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be4c:	4770      	bx	lr
 801be4e:	bf00      	nop
 801be50:	20000994 	.word	0x20000994

0801be54 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801be54:	b480      	push	{r7}
 801be56:	b083      	sub	sp, #12
 801be58:	af00      	add	r7, sp, #0
 801be5a:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801be5c:	4b0c      	ldr	r3, [pc, #48]	; (801be90 <getGWfromDHCP+0x3c>)
 801be5e:	781a      	ldrb	r2, [r3, #0]
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	3301      	adds	r3, #1
 801be68:	4a09      	ldr	r2, [pc, #36]	; (801be90 <getGWfromDHCP+0x3c>)
 801be6a:	7852      	ldrb	r2, [r2, #1]
 801be6c:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801be6e:	687b      	ldr	r3, [r7, #4]
 801be70:	3302      	adds	r3, #2
 801be72:	4a07      	ldr	r2, [pc, #28]	; (801be90 <getGWfromDHCP+0x3c>)
 801be74:	7892      	ldrb	r2, [r2, #2]
 801be76:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801be78:	687b      	ldr	r3, [r7, #4]
 801be7a:	3303      	adds	r3, #3
 801be7c:	4a04      	ldr	r2, [pc, #16]	; (801be90 <getGWfromDHCP+0x3c>)
 801be7e:	78d2      	ldrb	r2, [r2, #3]
 801be80:	701a      	strb	r2, [r3, #0]
}
 801be82:	bf00      	nop
 801be84:	370c      	adds	r7, #12
 801be86:	46bd      	mov	sp, r7
 801be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be8c:	4770      	bx	lr
 801be8e:	bf00      	nop
 801be90:	20000998 	.word	0x20000998

0801be94 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801be94:	b480      	push	{r7}
 801be96:	b083      	sub	sp, #12
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801be9c:	4b0c      	ldr	r3, [pc, #48]	; (801bed0 <getSNfromDHCP+0x3c>)
 801be9e:	781a      	ldrb	r2, [r3, #0]
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	3301      	adds	r3, #1
 801bea8:	4a09      	ldr	r2, [pc, #36]	; (801bed0 <getSNfromDHCP+0x3c>)
 801beaa:	7852      	ldrb	r2, [r2, #1]
 801beac:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	3302      	adds	r3, #2
 801beb2:	4a07      	ldr	r2, [pc, #28]	; (801bed0 <getSNfromDHCP+0x3c>)
 801beb4:	7892      	ldrb	r2, [r2, #2]
 801beb6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	3303      	adds	r3, #3
 801bebc:	4a04      	ldr	r2, [pc, #16]	; (801bed0 <getSNfromDHCP+0x3c>)
 801bebe:	78d2      	ldrb	r2, [r2, #3]
 801bec0:	701a      	strb	r2, [r3, #0]
}
 801bec2:	bf00      	nop
 801bec4:	370c      	adds	r7, #12
 801bec6:	46bd      	mov	sp, r7
 801bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801becc:	4770      	bx	lr
 801bece:	bf00      	nop
 801bed0:	2000099c 	.word	0x2000099c

0801bed4 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801bed4:	b480      	push	{r7}
 801bed6:	b083      	sub	sp, #12
 801bed8:	af00      	add	r7, sp, #0
 801beda:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801bedc:	4b0c      	ldr	r3, [pc, #48]	; (801bf10 <getDNSfromDHCP+0x3c>)
 801bede:	781a      	ldrb	r2, [r3, #0]
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	3301      	adds	r3, #1
 801bee8:	4a09      	ldr	r2, [pc, #36]	; (801bf10 <getDNSfromDHCP+0x3c>)
 801beea:	7852      	ldrb	r2, [r2, #1]
 801beec:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	3302      	adds	r3, #2
 801bef2:	4a07      	ldr	r2, [pc, #28]	; (801bf10 <getDNSfromDHCP+0x3c>)
 801bef4:	7892      	ldrb	r2, [r2, #2]
 801bef6:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	3303      	adds	r3, #3
 801befc:	4a04      	ldr	r2, [pc, #16]	; (801bf10 <getDNSfromDHCP+0x3c>)
 801befe:	78d2      	ldrb	r2, [r2, #3]
 801bf00:	701a      	strb	r2, [r3, #0]
}
 801bf02:	bf00      	nop
 801bf04:	370c      	adds	r7, #12
 801bf06:	46bd      	mov	sp, r7
 801bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf0c:	4770      	bx	lr
 801bf0e:	bf00      	nop
 801bf10:	200009a0 	.word	0x200009a0

0801bf14 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801bf14:	b480      	push	{r7}
 801bf16:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801bf18:	4b03      	ldr	r3, [pc, #12]	; (801bf28 <getDHCPLeasetime+0x14>)
 801bf1a:	681b      	ldr	r3, [r3, #0]
}
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	46bd      	mov	sp, r7
 801bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf24:	4770      	bx	lr
 801bf26:	bf00      	nop
 801bf28:	200000f0 	.word	0x200000f0

0801bf2c <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801bf2c:	b480      	push	{r7}
 801bf2e:	b083      	sub	sp, #12
 801bf30:	af00      	add	r7, sp, #0
 801bf32:	4603      	mov	r3, r0
 801bf34:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801bf36:	79fb      	ldrb	r3, [r7, #7]
 801bf38:	f003 030f 	and.w	r3, r3, #15
 801bf3c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801bf3e:	79fb      	ldrb	r3, [r7, #7]
 801bf40:	2b09      	cmp	r3, #9
 801bf42:	d803      	bhi.n	801bf4c <NibbleToHex+0x20>
    return nibble + '0';
 801bf44:	79fb      	ldrb	r3, [r7, #7]
 801bf46:	3330      	adds	r3, #48	; 0x30
 801bf48:	b2db      	uxtb	r3, r3
 801bf4a:	e002      	b.n	801bf52 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801bf4c:	79fb      	ldrb	r3, [r7, #7]
 801bf4e:	3337      	adds	r3, #55	; 0x37
 801bf50:	b2db      	uxtb	r3, r3
}
 801bf52:	4618      	mov	r0, r3
 801bf54:	370c      	adds	r7, #12
 801bf56:	46bd      	mov	sp, r7
 801bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf5c:	4770      	bx	lr

0801bf5e <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801bf5e:	b480      	push	{r7}
 801bf60:	b085      	sub	sp, #20
 801bf62:	af00      	add	r7, sp, #0
 801bf64:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	1c5a      	adds	r2, r3, #1
 801bf6a:	607a      	str	r2, [r7, #4]
 801bf6c:	781b      	ldrb	r3, [r3, #0]
 801bf6e:	b29b      	uxth	r3, r3
 801bf70:	021b      	lsls	r3, r3, #8
 801bf72:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	781b      	ldrb	r3, [r3, #0]
 801bf78:	b29a      	uxth	r2, r3
 801bf7a:	89fb      	ldrh	r3, [r7, #14]
 801bf7c:	4413      	add	r3, r2
 801bf7e:	81fb      	strh	r3, [r7, #14]
	return i;
 801bf80:	89fb      	ldrh	r3, [r7, #14]
}
 801bf82:	4618      	mov	r0, r3
 801bf84:	3714      	adds	r7, #20
 801bf86:	46bd      	mov	sp, r7
 801bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf8c:	4770      	bx	lr

0801bf8e <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801bf8e:	b480      	push	{r7}
 801bf90:	b083      	sub	sp, #12
 801bf92:	af00      	add	r7, sp, #0
 801bf94:	6078      	str	r0, [r7, #4]
 801bf96:	460b      	mov	r3, r1
 801bf98:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801bf9a:	887b      	ldrh	r3, [r7, #2]
 801bf9c:	0a1b      	lsrs	r3, r3, #8
 801bf9e:	b299      	uxth	r1, r3
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	1c5a      	adds	r2, r3, #1
 801bfa4:	607a      	str	r2, [r7, #4]
 801bfa6:	b2ca      	uxtb	r2, r1
 801bfa8:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	1c5a      	adds	r2, r3, #1
 801bfae:	607a      	str	r2, [r7, #4]
 801bfb0:	887a      	ldrh	r2, [r7, #2]
 801bfb2:	b2d2      	uxtb	r2, r2
 801bfb4:	701a      	strb	r2, [r3, #0]
	return s;
 801bfb6:	687b      	ldr	r3, [r7, #4]
}
 801bfb8:	4618      	mov	r0, r3
 801bfba:	370c      	adds	r7, #12
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfc2:	4770      	bx	lr

0801bfc4 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801bfc4:	b480      	push	{r7}
 801bfc6:	b08b      	sub	sp, #44	; 0x2c
 801bfc8:	af00      	add	r7, sp, #0
 801bfca:	60f8      	str	r0, [r7, #12]
 801bfcc:	60b9      	str	r1, [r7, #8]
 801bfce:	607a      	str	r2, [r7, #4]
 801bfd0:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801bfda:	2300      	movs	r3, #0
 801bfdc:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801bfde:	68bb      	ldr	r3, [r7, #8]
 801bfe0:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801bfe2:	6a3b      	ldr	r3, [r7, #32]
 801bfe4:	1c5a      	adds	r2, r3, #1
 801bfe6:	623a      	str	r2, [r7, #32]
 801bfe8:	781b      	ldrb	r3, [r3, #0]
 801bfea:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 801bfec:	69bb      	ldr	r3, [r7, #24]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d102      	bne.n	801bff8 <parse_name+0x34>
 801bff2:	69fb      	ldr	r3, [r7, #28]
 801bff4:	3301      	adds	r3, #1
 801bff6:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801bff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bffa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bffe:	2bc0      	cmp	r3, #192	; 0xc0
 801c000:	d117      	bne.n	801c032 <parse_name+0x6e>
		{
			if (!indirect)
 801c002:	69bb      	ldr	r3, [r7, #24]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d102      	bne.n	801c00e <parse_name+0x4a>
				clen++;
 801c008:	69fb      	ldr	r3, [r7, #28]
 801c00a:	3301      	adds	r3, #1
 801c00c:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801c00e:	2301      	movs	r3, #1
 801c010:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801c012:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c014:	021b      	lsls	r3, r3, #8
 801c016:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801c01a:	6a3a      	ldr	r2, [r7, #32]
 801c01c:	7812      	ldrb	r2, [r2, #0]
 801c01e:	4413      	add	r3, r2
 801c020:	461a      	mov	r2, r3
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	4413      	add	r3, r2
 801c026:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801c028:	6a3b      	ldr	r3, [r7, #32]
 801c02a:	1c5a      	adds	r2, r3, #1
 801c02c:	623a      	str	r2, [r7, #32]
 801c02e:	781b      	ldrb	r3, [r3, #0]
 801c030:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801c032:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c034:	2b00      	cmp	r3, #0
 801c036:	d02b      	beq.n	801c090 <parse_name+0xcc>
			break;

		len -= slen + 1;
 801c038:	887a      	ldrh	r2, [r7, #2]
 801c03a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c03c:	1ad3      	subs	r3, r2, r3
 801c03e:	b29b      	uxth	r3, r3
 801c040:	3b01      	subs	r3, #1
 801c042:	b29b      	uxth	r3, r3
 801c044:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801c046:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	da02      	bge.n	801c054 <parse_name+0x90>
 801c04e:	f04f 33ff 	mov.w	r3, #4294967295
 801c052:	e038      	b.n	801c0c6 <parse_name+0x102>

		if (!indirect) clen += slen;
 801c054:	69bb      	ldr	r3, [r7, #24]
 801c056:	2b00      	cmp	r3, #0
 801c058:	d10c      	bne.n	801c074 <parse_name+0xb0>
 801c05a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c05c:	69fa      	ldr	r2, [r7, #28]
 801c05e:	4413      	add	r3, r2
 801c060:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801c062:	e007      	b.n	801c074 <parse_name+0xb0>
 801c064:	6a3a      	ldr	r2, [r7, #32]
 801c066:	1c53      	adds	r3, r2, #1
 801c068:	623b      	str	r3, [r7, #32]
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	1c59      	adds	r1, r3, #1
 801c06e:	6079      	str	r1, [r7, #4]
 801c070:	7812      	ldrb	r2, [r2, #0]
 801c072:	701a      	strb	r2, [r3, #0]
 801c074:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c076:	1e5a      	subs	r2, r3, #1
 801c078:	84fa      	strh	r2, [r7, #38]	; 0x26
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d1f2      	bne.n	801c064 <parse_name+0xa0>
		*buf++ = '.';
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	1c5a      	adds	r2, r3, #1
 801c082:	607a      	str	r2, [r7, #4]
 801c084:	222e      	movs	r2, #46	; 0x2e
 801c086:	701a      	strb	r2, [r3, #0]
		nseg++;
 801c088:	697b      	ldr	r3, [r7, #20]
 801c08a:	3301      	adds	r3, #1
 801c08c:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801c08e:	e7a8      	b.n	801bfe2 <parse_name+0x1e>
			break;
 801c090:	bf00      	nop
	}

	if (nseg == 0)
 801c092:	697b      	ldr	r3, [r7, #20]
 801c094:	2b00      	cmp	r3, #0
 801c096:	d10a      	bne.n	801c0ae <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	1c5a      	adds	r2, r3, #1
 801c09c:	607a      	str	r2, [r7, #4]
 801c09e:	222e      	movs	r2, #46	; 0x2e
 801c0a0:	701a      	strb	r2, [r3, #0]
		len--;
 801c0a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c0a6:	b29b      	uxth	r3, r3
 801c0a8:	3b01      	subs	r3, #1
 801c0aa:	b29b      	uxth	r3, r3
 801c0ac:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	1c5a      	adds	r2, r3, #1
 801c0b2:	607a      	str	r2, [r7, #4]
 801c0b4:	2200      	movs	r2, #0
 801c0b6:	701a      	strb	r2, [r3, #0]
	len--;
 801c0b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c0bc:	b29b      	uxth	r3, r3
 801c0be:	3b01      	subs	r3, #1
 801c0c0:	b29b      	uxth	r3, r3
 801c0c2:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801c0c4:	69fb      	ldr	r3, [r7, #28]
}
 801c0c6:	4618      	mov	r0, r3
 801c0c8:	372c      	adds	r7, #44	; 0x2c
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d0:	4770      	bx	lr

0801c0d2 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801c0d2:	b580      	push	{r7, lr}
 801c0d4:	b0b4      	sub	sp, #208	; 0xd0
 801c0d6:	af00      	add	r7, sp, #0
 801c0d8:	6078      	str	r0, [r7, #4]
 801c0da:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c0dc:	f107 020c 	add.w	r2, r7, #12
 801c0e0:	23c0      	movs	r3, #192	; 0xc0
 801c0e2:	6839      	ldr	r1, [r7, #0]
 801c0e4:	6878      	ldr	r0, [r7, #4]
 801c0e6:	f7ff ff6d 	bl	801bfc4 <parse_name>
 801c0ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 801c0ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0f6:	d101      	bne.n	801c0fc <dns_question+0x2a>
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	e00b      	b.n	801c114 <dns_question+0x42>

	cp += len;
 801c0fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c100:	683a      	ldr	r2, [r7, #0]
 801c102:	4413      	add	r3, r2
 801c104:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801c106:	683b      	ldr	r3, [r7, #0]
 801c108:	3302      	adds	r3, #2
 801c10a:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801c10c:	683b      	ldr	r3, [r7, #0]
 801c10e:	3302      	adds	r3, #2
 801c110:	603b      	str	r3, [r7, #0]

	return cp;
 801c112:	683b      	ldr	r3, [r7, #0]
}
 801c114:	4618      	mov	r0, r3
 801c116:	37d0      	adds	r7, #208	; 0xd0
 801c118:	46bd      	mov	sp, r7
 801c11a:	bd80      	pop	{r7, pc}

0801c11c <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801c11c:	b580      	push	{r7, lr}
 801c11e:	b0b6      	sub	sp, #216	; 0xd8
 801c120:	af00      	add	r7, sp, #0
 801c122:	60f8      	str	r0, [r7, #12]
 801c124:	60b9      	str	r1, [r7, #8]
 801c126:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c128:	f107 0210 	add.w	r2, r7, #16
 801c12c:	23c0      	movs	r3, #192	; 0xc0
 801c12e:	68b9      	ldr	r1, [r7, #8]
 801c130:	68f8      	ldr	r0, [r7, #12]
 801c132:	f7ff ff47 	bl	801bfc4 <parse_name>
 801c136:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 801c13a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c142:	d101      	bne.n	801c148 <dns_answer+0x2c>
 801c144:	2300      	movs	r3, #0
 801c146:	e0f9      	b.n	801c33c <dns_answer+0x220>

	cp += len;
 801c148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c14c:	68ba      	ldr	r2, [r7, #8]
 801c14e:	4413      	add	r3, r2
 801c150:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801c152:	68b8      	ldr	r0, [r7, #8]
 801c154:	f7ff ff03 	bl	801bf5e <get16>
 801c158:	4603      	mov	r3, r0
 801c15a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 801c15e:	68bb      	ldr	r3, [r7, #8]
 801c160:	3302      	adds	r3, #2
 801c162:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801c164:	68bb      	ldr	r3, [r7, #8]
 801c166:	3302      	adds	r3, #2
 801c168:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801c16a:	68bb      	ldr	r3, [r7, #8]
 801c16c:	3304      	adds	r3, #4
 801c16e:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801c170:	68bb      	ldr	r3, [r7, #8]
 801c172:	3302      	adds	r3, #2
 801c174:	60bb      	str	r3, [r7, #8]


	switch (type)
 801c176:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c17a:	2b10      	cmp	r3, #16
 801c17c:	f000 80da 	beq.w	801c334 <dns_answer+0x218>
 801c180:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c184:	2b10      	cmp	r3, #16
 801c186:	f300 80d7 	bgt.w	801c338 <dns_answer+0x21c>
 801c18a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c18e:	2b0f      	cmp	r3, #15
 801c190:	d07d      	beq.n	801c28e <dns_answer+0x172>
 801c192:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c196:	2b0f      	cmp	r3, #15
 801c198:	f300 80ce 	bgt.w	801c338 <dns_answer+0x21c>
 801c19c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c1a0:	2b0c      	cmp	r3, #12
 801c1a2:	dc26      	bgt.n	801c1f2 <dns_answer+0xd6>
 801c1a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	f340 80c5 	ble.w	801c338 <dns_answer+0x21c>
 801c1ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c1b2:	2201      	movs	r2, #1
 801c1b4:	fa02 f303 	lsl.w	r3, r2, r3
 801c1b8:	f241 32a4 	movw	r2, #5028	; 0x13a4
 801c1bc:	401a      	ands	r2, r3
 801c1be:	2a00      	cmp	r2, #0
 801c1c0:	bf14      	ite	ne
 801c1c2:	2201      	movne	r2, #1
 801c1c4:	2200      	moveq	r2, #0
 801c1c6:	b2d2      	uxtb	r2, r2
 801c1c8:	2a00      	cmp	r2, #0
 801c1ca:	d133      	bne.n	801c234 <dns_answer+0x118>
 801c1cc:	f003 0240 	and.w	r2, r3, #64	; 0x40
 801c1d0:	2a00      	cmp	r2, #0
 801c1d2:	bf14      	ite	ne
 801c1d4:	2201      	movne	r2, #1
 801c1d6:	2200      	moveq	r2, #0
 801c1d8:	b2d2      	uxtb	r2, r2
 801c1da:	2a00      	cmp	r2, #0
 801c1dc:	d170      	bne.n	801c2c0 <dns_answer+0x1a4>
 801c1de:	f003 0302 	and.w	r3, r3, #2
 801c1e2:	2b00      	cmp	r3, #0
 801c1e4:	bf14      	ite	ne
 801c1e6:	2301      	movne	r3, #1
 801c1e8:	2300      	moveq	r3, #0
 801c1ea:	b2db      	uxtb	r3, r3
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d105      	bne.n	801c1fc <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801c1f0:	e0a2      	b.n	801c338 <dns_answer+0x21c>
	switch (type)
 801c1f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c1f6:	2b0d      	cmp	r3, #13
 801c1f8:	d032      	beq.n	801c260 <dns_answer+0x144>
		break;
 801c1fa:	e09d      	b.n	801c338 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801c1fc:	68bb      	ldr	r3, [r7, #8]
 801c1fe:	1c5a      	adds	r2, r3, #1
 801c200:	60ba      	str	r2, [r7, #8]
 801c202:	781a      	ldrb	r2, [r3, #0]
 801c204:	687b      	ldr	r3, [r7, #4]
 801c206:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801c208:	68bb      	ldr	r3, [r7, #8]
 801c20a:	1c5a      	adds	r2, r3, #1
 801c20c:	60ba      	str	r2, [r7, #8]
 801c20e:	687a      	ldr	r2, [r7, #4]
 801c210:	3201      	adds	r2, #1
 801c212:	781b      	ldrb	r3, [r3, #0]
 801c214:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801c216:	68bb      	ldr	r3, [r7, #8]
 801c218:	1c5a      	adds	r2, r3, #1
 801c21a:	60ba      	str	r2, [r7, #8]
 801c21c:	687a      	ldr	r2, [r7, #4]
 801c21e:	3202      	adds	r2, #2
 801c220:	781b      	ldrb	r3, [r3, #0]
 801c222:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801c224:	68bb      	ldr	r3, [r7, #8]
 801c226:	1c5a      	adds	r2, r3, #1
 801c228:	60ba      	str	r2, [r7, #8]
 801c22a:	687a      	ldr	r2, [r7, #4]
 801c22c:	3203      	adds	r2, #3
 801c22e:	781b      	ldrb	r3, [r3, #0]
 801c230:	7013      	strb	r3, [r2, #0]
		break;
 801c232:	e082      	b.n	801c33a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c234:	f107 0210 	add.w	r2, r7, #16
 801c238:	23c0      	movs	r3, #192	; 0xc0
 801c23a:	68b9      	ldr	r1, [r7, #8]
 801c23c:	68f8      	ldr	r0, [r7, #12]
 801c23e:	f7ff fec1 	bl	801bfc4 <parse_name>
 801c242:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c24e:	d101      	bne.n	801c254 <dns_answer+0x138>
 801c250:	2300      	movs	r3, #0
 801c252:	e073      	b.n	801c33c <dns_answer+0x220>
		cp += len;
 801c254:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c258:	68ba      	ldr	r2, [r7, #8]
 801c25a:	4413      	add	r3, r2
 801c25c:	60bb      	str	r3, [r7, #8]
		break;
 801c25e:	e06c      	b.n	801c33a <dns_answer+0x21e>
		len = *cp++;
 801c260:	68bb      	ldr	r3, [r7, #8]
 801c262:	1c5a      	adds	r2, r3, #1
 801c264:	60ba      	str	r2, [r7, #8]
 801c266:	781b      	ldrb	r3, [r3, #0]
 801c268:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c26c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c270:	68ba      	ldr	r2, [r7, #8]
 801c272:	4413      	add	r3, r2
 801c274:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801c276:	68bb      	ldr	r3, [r7, #8]
 801c278:	1c5a      	adds	r2, r3, #1
 801c27a:	60ba      	str	r2, [r7, #8]
 801c27c:	781b      	ldrb	r3, [r3, #0]
 801c27e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c286:	68ba      	ldr	r2, [r7, #8]
 801c288:	4413      	add	r3, r2
 801c28a:	60bb      	str	r3, [r7, #8]
		break;
 801c28c:	e055      	b.n	801c33a <dns_answer+0x21e>
		cp += 2;
 801c28e:	68bb      	ldr	r3, [r7, #8]
 801c290:	3302      	adds	r3, #2
 801c292:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c294:	f107 0210 	add.w	r2, r7, #16
 801c298:	23c0      	movs	r3, #192	; 0xc0
 801c29a:	68b9      	ldr	r1, [r7, #8]
 801c29c:	68f8      	ldr	r0, [r7, #12]
 801c29e:	f7ff fe91 	bl	801bfc4 <parse_name>
 801c2a2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c2a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2ae:	d101      	bne.n	801c2b4 <dns_answer+0x198>
 801c2b0:	2300      	movs	r3, #0
 801c2b2:	e043      	b.n	801c33c <dns_answer+0x220>
		cp += len;
 801c2b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2b8:	68ba      	ldr	r2, [r7, #8]
 801c2ba:	4413      	add	r3, r2
 801c2bc:	60bb      	str	r3, [r7, #8]
		break;
 801c2be:	e03c      	b.n	801c33a <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c2c0:	f107 0210 	add.w	r2, r7, #16
 801c2c4:	23c0      	movs	r3, #192	; 0xc0
 801c2c6:	68b9      	ldr	r1, [r7, #8]
 801c2c8:	68f8      	ldr	r0, [r7, #12]
 801c2ca:	f7ff fe7b 	bl	801bfc4 <parse_name>
 801c2ce:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c2d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2da:	d101      	bne.n	801c2e0 <dns_answer+0x1c4>
 801c2dc:	2300      	movs	r3, #0
 801c2de:	e02d      	b.n	801c33c <dns_answer+0x220>
		cp += len;
 801c2e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c2e4:	68ba      	ldr	r2, [r7, #8]
 801c2e6:	4413      	add	r3, r2
 801c2e8:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c2ea:	f107 0210 	add.w	r2, r7, #16
 801c2ee:	23c0      	movs	r3, #192	; 0xc0
 801c2f0:	68b9      	ldr	r1, [r7, #8]
 801c2f2:	68f8      	ldr	r0, [r7, #12]
 801c2f4:	f7ff fe66 	bl	801bfc4 <parse_name>
 801c2f8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c2fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c300:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c304:	d101      	bne.n	801c30a <dns_answer+0x1ee>
 801c306:	2300      	movs	r3, #0
 801c308:	e018      	b.n	801c33c <dns_answer+0x220>
		cp += len;
 801c30a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c30e:	68ba      	ldr	r2, [r7, #8]
 801c310:	4413      	add	r3, r2
 801c312:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c314:	68bb      	ldr	r3, [r7, #8]
 801c316:	3304      	adds	r3, #4
 801c318:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c31a:	68bb      	ldr	r3, [r7, #8]
 801c31c:	3304      	adds	r3, #4
 801c31e:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c320:	68bb      	ldr	r3, [r7, #8]
 801c322:	3304      	adds	r3, #4
 801c324:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c326:	68bb      	ldr	r3, [r7, #8]
 801c328:	3304      	adds	r3, #4
 801c32a:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c32c:	68bb      	ldr	r3, [r7, #8]
 801c32e:	3304      	adds	r3, #4
 801c330:	60bb      	str	r3, [r7, #8]
		break;
 801c332:	e002      	b.n	801c33a <dns_answer+0x21e>
		break;
 801c334:	bf00      	nop
 801c336:	e000      	b.n	801c33a <dns_answer+0x21e>
		break;
 801c338:	bf00      	nop
	}

	return cp;
 801c33a:	68bb      	ldr	r3, [r7, #8]
}
 801c33c:	4618      	mov	r0, r3
 801c33e:	37d8      	adds	r7, #216	; 0xd8
 801c340:	46bd      	mov	sp, r7
 801c342:	bd80      	pop	{r7, pc}

0801c344 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b088      	sub	sp, #32
 801c348:	af00      	add	r7, sp, #0
 801c34a:	60f8      	str	r0, [r7, #12]
 801c34c:	60b9      	str	r1, [r7, #8]
 801c34e:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c350:	68bb      	ldr	r3, [r7, #8]
 801c352:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c354:	2212      	movs	r2, #18
 801c356:	2100      	movs	r1, #0
 801c358:	68f8      	ldr	r0, [r7, #12]
 801c35a:	f011 f9cf 	bl	802d6fc <memset>

	pdhdr->id = get16(&msg[0]);
 801c35e:	6978      	ldr	r0, [r7, #20]
 801c360:	f7ff fdfd 	bl	801bf5e <get16>
 801c364:	4603      	mov	r3, r0
 801c366:	461a      	mov	r2, r3
 801c368:	68fb      	ldr	r3, [r7, #12]
 801c36a:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c36c:	697b      	ldr	r3, [r7, #20]
 801c36e:	3302      	adds	r3, #2
 801c370:	4618      	mov	r0, r3
 801c372:	f7ff fdf4 	bl	801bf5e <get16>
 801c376:	4603      	mov	r3, r0
 801c378:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c37a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c37e:	2b00      	cmp	r3, #0
 801c380:	da02      	bge.n	801c388 <parseDNSMSG+0x44>
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	2201      	movs	r2, #1
 801c386:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c388:	8a7b      	ldrh	r3, [r7, #18]
 801c38a:	0adb      	lsrs	r3, r3, #11
 801c38c:	b29b      	uxth	r3, r3
 801c38e:	b2db      	uxtb	r3, r3
 801c390:	f003 030f 	and.w	r3, r3, #15
 801c394:	b2da      	uxtb	r2, r3
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c39a:	8a7b      	ldrh	r3, [r7, #18]
 801c39c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d002      	beq.n	801c3aa <parseDNSMSG+0x66>
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	2201      	movs	r2, #1
 801c3a8:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c3aa:	8a7b      	ldrh	r3, [r7, #18]
 801c3ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d002      	beq.n	801c3ba <parseDNSMSG+0x76>
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	2201      	movs	r2, #1
 801c3b8:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c3ba:	8a7b      	ldrh	r3, [r7, #18]
 801c3bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d002      	beq.n	801c3ca <parseDNSMSG+0x86>
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	2201      	movs	r2, #1
 801c3c8:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c3ca:	8a7b      	ldrh	r3, [r7, #18]
 801c3cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d002      	beq.n	801c3da <parseDNSMSG+0x96>
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	2201      	movs	r2, #1
 801c3d8:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c3da:	8a7b      	ldrh	r3, [r7, #18]
 801c3dc:	b2db      	uxtb	r3, r3
 801c3de:	f003 030f 	and.w	r3, r3, #15
 801c3e2:	b2da      	uxtb	r2, r3
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c3e8:	697b      	ldr	r3, [r7, #20]
 801c3ea:	3304      	adds	r3, #4
 801c3ec:	4618      	mov	r0, r3
 801c3ee:	f7ff fdb6 	bl	801bf5e <get16>
 801c3f2:	4603      	mov	r3, r0
 801c3f4:	461a      	mov	r2, r3
 801c3f6:	68fb      	ldr	r3, [r7, #12]
 801c3f8:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c3fa:	697b      	ldr	r3, [r7, #20]
 801c3fc:	3306      	adds	r3, #6
 801c3fe:	4618      	mov	r0, r3
 801c400:	f7ff fdad 	bl	801bf5e <get16>
 801c404:	4603      	mov	r3, r0
 801c406:	461a      	mov	r2, r3
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c40c:	697b      	ldr	r3, [r7, #20]
 801c40e:	3308      	adds	r3, #8
 801c410:	4618      	mov	r0, r3
 801c412:	f7ff fda4 	bl	801bf5e <get16>
 801c416:	4603      	mov	r3, r0
 801c418:	461a      	mov	r2, r3
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c41e:	697b      	ldr	r3, [r7, #20]
 801c420:	330a      	adds	r3, #10
 801c422:	4618      	mov	r0, r3
 801c424:	f7ff fd9b 	bl	801bf5e <get16>
 801c428:	4603      	mov	r3, r0
 801c42a:	461a      	mov	r2, r3
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c430:	697b      	ldr	r3, [r7, #20]
 801c432:	330c      	adds	r3, #12
 801c434:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c436:	2300      	movs	r3, #0
 801c438:	83fb      	strh	r3, [r7, #30]
 801c43a:	e00d      	b.n	801c458 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c43c:	69b9      	ldr	r1, [r7, #24]
 801c43e:	6978      	ldr	r0, [r7, #20]
 801c440:	f7ff fe47 	bl	801c0d2 <dns_question>
 801c444:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c446:	69bb      	ldr	r3, [r7, #24]
 801c448:	2b00      	cmp	r3, #0
 801c44a:	d102      	bne.n	801c452 <parseDNSMSG+0x10e>
 801c44c:	f04f 33ff 	mov.w	r3, #4294967295
 801c450:	e03b      	b.n	801c4ca <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c452:	8bfb      	ldrh	r3, [r7, #30]
 801c454:	3301      	adds	r3, #1
 801c456:	83fb      	strh	r3, [r7, #30]
 801c458:	68fb      	ldr	r3, [r7, #12]
 801c45a:	895b      	ldrh	r3, [r3, #10]
 801c45c:	8bfa      	ldrh	r2, [r7, #30]
 801c45e:	429a      	cmp	r2, r3
 801c460:	d3ec      	bcc.n	801c43c <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c462:	2300      	movs	r3, #0
 801c464:	83fb      	strh	r3, [r7, #30]
 801c466:	e00e      	b.n	801c486 <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c468:	687a      	ldr	r2, [r7, #4]
 801c46a:	69b9      	ldr	r1, [r7, #24]
 801c46c:	6978      	ldr	r0, [r7, #20]
 801c46e:	f7ff fe55 	bl	801c11c <dns_answer>
 801c472:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c474:	69bb      	ldr	r3, [r7, #24]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d102      	bne.n	801c480 <parseDNSMSG+0x13c>
 801c47a:	f04f 33ff 	mov.w	r3, #4294967295
 801c47e:	e024      	b.n	801c4ca <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c480:	8bfb      	ldrh	r3, [r7, #30]
 801c482:	3301      	adds	r3, #1
 801c484:	83fb      	strh	r3, [r7, #30]
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	899b      	ldrh	r3, [r3, #12]
 801c48a:	8bfa      	ldrh	r2, [r7, #30]
 801c48c:	429a      	cmp	r2, r3
 801c48e:	d3eb      	bcc.n	801c468 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c490:	2300      	movs	r3, #0
 801c492:	83fb      	strh	r3, [r7, #30]
 801c494:	e002      	b.n	801c49c <parseDNSMSG+0x158>
 801c496:	8bfb      	ldrh	r3, [r7, #30]
 801c498:	3301      	adds	r3, #1
 801c49a:	83fb      	strh	r3, [r7, #30]
 801c49c:	68fb      	ldr	r3, [r7, #12]
 801c49e:	89db      	ldrh	r3, [r3, #14]
 801c4a0:	8bfa      	ldrh	r2, [r7, #30]
 801c4a2:	429a      	cmp	r2, r3
 801c4a4:	d3f7      	bcc.n	801c496 <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c4a6:	2300      	movs	r3, #0
 801c4a8:	83fb      	strh	r3, [r7, #30]
 801c4aa:	e002      	b.n	801c4b2 <parseDNSMSG+0x16e>
 801c4ac:	8bfb      	ldrh	r3, [r7, #30]
 801c4ae:	3301      	adds	r3, #1
 801c4b0:	83fb      	strh	r3, [r7, #30]
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	8a1b      	ldrh	r3, [r3, #16]
 801c4b6:	8bfa      	ldrh	r2, [r7, #30]
 801c4b8:	429a      	cmp	r2, r3
 801c4ba:	d3f7      	bcc.n	801c4ac <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	7a1b      	ldrb	r3, [r3, #8]
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d101      	bne.n	801c4c8 <parseDNSMSG+0x184>
 801c4c4:	2301      	movs	r3, #1
 801c4c6:	e000      	b.n	801c4ca <parseDNSMSG+0x186>
	else return 0;
 801c4c8:	2300      	movs	r3, #0
}
 801c4ca:	4618      	mov	r0, r3
 801c4cc:	3720      	adds	r7, #32
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	bd80      	pop	{r7, pc}
	...

0801c4d4 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c4d4:	b580      	push	{r7, lr}
 801c4d6:	b0b8      	sub	sp, #224	; 0xe0
 801c4d8:	af00      	add	r7, sp, #0
 801c4da:	60b9      	str	r1, [r7, #8]
 801c4dc:	607a      	str	r2, [r7, #4]
 801c4de:	461a      	mov	r2, r3
 801c4e0:	4603      	mov	r3, r0
 801c4e2:	81fb      	strh	r3, [r7, #14]
 801c4e4:	4613      	mov	r3, r2
 801c4e6:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 801c4ee:	4b57      	ldr	r3, [pc, #348]	; (801c64c <dns_makequery+0x178>)
 801c4f0:	881b      	ldrh	r3, [r3, #0]
 801c4f2:	3301      	adds	r3, #1
 801c4f4:	b29a      	uxth	r2, r3
 801c4f6:	4b55      	ldr	r3, [pc, #340]	; (801c64c <dns_makequery+0x178>)
 801c4f8:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c4fa:	4b54      	ldr	r3, [pc, #336]	; (801c64c <dns_makequery+0x178>)
 801c4fc:	881b      	ldrh	r3, [r3, #0]
 801c4fe:	4619      	mov	r1, r3
 801c500:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c504:	f7ff fd43 	bl	801bf8e <put16>
 801c508:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c50c:	89fb      	ldrh	r3, [r7, #14]
 801c50e:	02db      	lsls	r3, r3, #11
 801c510:	b21b      	sxth	r3, r3
 801c512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c516:	b21b      	sxth	r3, r3
 801c518:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 801c51c:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 801c520:	4619      	mov	r1, r3
 801c522:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c526:	f7ff fd32 	bl	801bf8e <put16>
 801c52a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 801c52e:	2101      	movs	r1, #1
 801c530:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c534:	f7ff fd2b 	bl	801bf8e <put16>
 801c538:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c53c:	2100      	movs	r1, #0
 801c53e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c542:	f7ff fd24 	bl	801bf8e <put16>
 801c546:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c54a:	2100      	movs	r1, #0
 801c54c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c550:	f7ff fd1d 	bl	801bf8e <put16>
 801c554:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c558:	2100      	movs	r1, #0
 801c55a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c55e:	f7ff fd16 	bl	801bf8e <put16>
 801c562:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 801c566:	f107 0310 	add.w	r3, r7, #16
 801c56a:	68b9      	ldr	r1, [r7, #8]
 801c56c:	4618      	mov	r0, r3
 801c56e:	f011 fa92 	bl	802da96 <strcpy>
	dname = sname;
 801c572:	f107 0310 	add.w	r3, r7, #16
 801c576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 801c57a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c57e:	f7f3 fe8f 	bl	80102a0 <strlen>
 801c582:	4603      	mov	r3, r0
 801c584:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c588:	212e      	movs	r1, #46	; 0x2e
 801c58a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c58e:	f011 f8cc 	bl	802d72a <strchr>
 801c592:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d006      	beq.n	801c5ac <dns_makequery+0xd8>
 801c59e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c5a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c5a6:	1ad3      	subs	r3, r2, r3
 801c5a8:	81bb      	strh	r3, [r7, #12]
 801c5aa:	e002      	b.n	801c5b2 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c5ac:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801c5b0:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c5b6:	1c5a      	adds	r2, r3, #1
 801c5b8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c5bc:	89ba      	ldrh	r2, [r7, #12]
 801c5be:	b2d2      	uxtb	r2, r2
 801c5c0:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c5c2:	89bb      	ldrh	r3, [r7, #12]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d029      	beq.n	801c61c <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c5c8:	89bb      	ldrh	r3, [r7, #12]
 801c5ca:	461a      	mov	r2, r3
 801c5cc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c5d0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c5d4:	f011 f8ec 	bl	802d7b0 <strncpy>
		cp += len;
 801c5d8:	89bb      	ldrh	r3, [r7, #12]
 801c5da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c5de:	4413      	add	r3, r2
 801c5e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801c5e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d107      	bne.n	801c5fc <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c5ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c5f0:	1c5a      	adds	r2, r3, #1
 801c5f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c5f6:	2200      	movs	r2, #0
 801c5f8:	701a      	strb	r2, [r3, #0]
			break;
 801c5fa:	e010      	b.n	801c61e <dns_makequery+0x14a>
		}
		dname += len+1;
 801c5fc:	89bb      	ldrh	r3, [r7, #12]
 801c5fe:	3301      	adds	r3, #1
 801c600:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c604:	4413      	add	r3, r2
 801c606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 801c60a:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801c60e:	89bb      	ldrh	r3, [r7, #12]
 801c610:	1ad3      	subs	r3, r2, r3
 801c612:	b29b      	uxth	r3, r3
 801c614:	3b01      	subs	r3, #1
 801c616:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 801c61a:	e7b5      	b.n	801c588 <dns_makequery+0xb4>
		if (len == 0) break;
 801c61c:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c61e:	2101      	movs	r1, #1
 801c620:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c624:	f7ff fcb3 	bl	801bf8e <put16>
 801c628:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c62c:	2101      	movs	r1, #1
 801c62e:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c632:	f7ff fcac 	bl	801bf8e <put16>
 801c636:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c63a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	1ad3      	subs	r3, r2, r3
 801c642:	b21b      	sxth	r3, r3
}
 801c644:	4618      	mov	r0, r3
 801c646:	37e0      	adds	r7, #224	; 0xe0
 801c648:	46bd      	mov	sp, r7
 801c64a:	bd80      	pop	{r7, pc}
 801c64c:	200009c2 	.word	0x200009c2

0801c650 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c650:	b480      	push	{r7}
 801c652:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c654:	4b0f      	ldr	r3, [pc, #60]	; (801c694 <check_DNS_timeout+0x44>)
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	2b02      	cmp	r3, #2
 801c65a:	d914      	bls.n	801c686 <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c65c:	4b0d      	ldr	r3, [pc, #52]	; (801c694 <check_DNS_timeout+0x44>)
 801c65e:	2200      	movs	r2, #0
 801c660:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c662:	4b0d      	ldr	r3, [pc, #52]	; (801c698 <check_DNS_timeout+0x48>)
 801c664:	781b      	ldrb	r3, [r3, #0]
 801c666:	2b01      	cmp	r3, #1
 801c668:	d905      	bls.n	801c676 <check_DNS_timeout+0x26>
			retry_count = 0;
 801c66a:	4b0b      	ldr	r3, [pc, #44]	; (801c698 <check_DNS_timeout+0x48>)
 801c66c:	2200      	movs	r2, #0
 801c66e:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c670:	f04f 33ff 	mov.w	r3, #4294967295
 801c674:	e008      	b.n	801c688 <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c676:	4b08      	ldr	r3, [pc, #32]	; (801c698 <check_DNS_timeout+0x48>)
 801c678:	781b      	ldrb	r3, [r3, #0]
 801c67a:	3301      	adds	r3, #1
 801c67c:	b2da      	uxtb	r2, r3
 801c67e:	4b06      	ldr	r3, [pc, #24]	; (801c698 <check_DNS_timeout+0x48>)
 801c680:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801c682:	2300      	movs	r3, #0
 801c684:	e000      	b.n	801c688 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801c686:	2301      	movs	r3, #1
}
 801c688:	4618      	mov	r0, r3
 801c68a:	46bd      	mov	sp, r7
 801c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c690:	4770      	bx	lr
 801c692:	bf00      	nop
 801c694:	200009c4 	.word	0x200009c4
 801c698:	200009c8 	.word	0x200009c8

0801c69c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801c69c:	b480      	push	{r7}
 801c69e:	b083      	sub	sp, #12
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	6039      	str	r1, [r7, #0]
 801c6a6:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801c6a8:	4a07      	ldr	r2, [pc, #28]	; (801c6c8 <DNS_init+0x2c>)
 801c6aa:	79fb      	ldrb	r3, [r7, #7]
 801c6ac:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801c6ae:	4a07      	ldr	r2, [pc, #28]	; (801c6cc <DNS_init+0x30>)
 801c6b0:	683b      	ldr	r3, [r7, #0]
 801c6b2:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801c6b4:	4b06      	ldr	r3, [pc, #24]	; (801c6d0 <DNS_init+0x34>)
 801c6b6:	f241 1222 	movw	r2, #4386	; 0x1122
 801c6ba:	801a      	strh	r2, [r3, #0]
}
 801c6bc:	bf00      	nop
 801c6be:	370c      	adds	r7, #12
 801c6c0:	46bd      	mov	sp, r7
 801c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6c6:	4770      	bx	lr
 801c6c8:	200009c0 	.word	0x200009c0
 801c6cc:	200009bc 	.word	0x200009bc
 801c6d0:	200009c2 	.word	0x200009c2

0801c6d4 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801c6d4:	b590      	push	{r4, r7, lr}
 801c6d6:	b08f      	sub	sp, #60	; 0x3c
 801c6d8:	af02      	add	r7, sp, #8
 801c6da:	60f8      	str	r0, [r7, #12]
 801c6dc:	60b9      	str	r1, [r7, #8]
 801c6de:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801c6e0:	4b3b      	ldr	r3, [pc, #236]	; (801c7d0 <DNS_run+0xfc>)
 801c6e2:	2200      	movs	r2, #0
 801c6e4:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801c6e6:	4b3b      	ldr	r3, [pc, #236]	; (801c7d4 <DNS_run+0x100>)
 801c6e8:	2200      	movs	r2, #0
 801c6ea:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801c6ec:	4b3a      	ldr	r3, [pc, #232]	; (801c7d8 <DNS_run+0x104>)
 801c6ee:	7818      	ldrb	r0, [r3, #0]
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	2102      	movs	r1, #2
 801c6f6:	f7fc fa2f 	bl	8018b58 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801c6fa:	4b38      	ldr	r3, [pc, #224]	; (801c7dc <DNS_run+0x108>)
 801c6fc:	681a      	ldr	r2, [r3, #0]
 801c6fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c702:	68b9      	ldr	r1, [r7, #8]
 801c704:	2000      	movs	r0, #0
 801c706:	f7ff fee5 	bl	801c4d4 <dns_makequery>
 801c70a:	4603      	mov	r3, r0
 801c70c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c70e:	4b32      	ldr	r3, [pc, #200]	; (801c7d8 <DNS_run+0x104>)
 801c710:	7818      	ldrb	r0, [r3, #0]
 801c712:	4b32      	ldr	r3, [pc, #200]	; (801c7dc <DNS_run+0x108>)
 801c714:	6819      	ldr	r1, [r3, #0]
 801c716:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c718:	2335      	movs	r3, #53	; 0x35
 801c71a:	9300      	str	r3, [sp, #0]
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	f7fc fef9 	bl	8019514 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c722:	4b2d      	ldr	r3, [pc, #180]	; (801c7d8 <DNS_run+0x104>)
 801c724:	781b      	ldrb	r3, [r3, #0]
 801c726:	4618      	mov	r0, r3
 801c728:	f7fc f8cb 	bl	80188c2 <getSn_RX_RSR>
 801c72c:	4603      	mov	r3, r0
 801c72e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801c730:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c732:	2b00      	cmp	r3, #0
 801c734:	d029      	beq.n	801c78a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801c736:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c73c:	d902      	bls.n	801c744 <DNS_run+0x70>
 801c73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c742:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801c744:	4b24      	ldr	r3, [pc, #144]	; (801c7d8 <DNS_run+0x104>)
 801c746:	7818      	ldrb	r0, [r3, #0]
 801c748:	4b24      	ldr	r3, [pc, #144]	; (801c7dc <DNS_run+0x108>)
 801c74a:	6819      	ldr	r1, [r3, #0]
 801c74c:	f107 0414 	add.w	r4, r7, #20
 801c750:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c752:	f107 0312 	add.w	r3, r7, #18
 801c756:	9300      	str	r3, [sp, #0]
 801c758:	4623      	mov	r3, r4
 801c75a:	f7fd f811 	bl	8019780 <recvfrom>
 801c75e:	4603      	mov	r3, r0
 801c760:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801c762:	4b1e      	ldr	r3, [pc, #120]	; (801c7dc <DNS_run+0x108>)
 801c764:	6819      	ldr	r1, [r3, #0]
 801c766:	f107 0318 	add.w	r3, r7, #24
 801c76a:	687a      	ldr	r2, [r7, #4]
 801c76c:	4618      	mov	r0, r3
 801c76e:	f7ff fde9 	bl	801c344 <parseDNSMSG>
 801c772:	4603      	mov	r3, r0
 801c774:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 801c778:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801c77a:	4b17      	ldr	r3, [pc, #92]	; (801c7d8 <DNS_run+0x104>)
 801c77c:	781b      	ldrb	r3, [r3, #0]
 801c77e:	4618      	mov	r0, r3
 801c780:	f7fc fafe 	bl	8018d80 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801c784:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801c788:	e01e      	b.n	801c7c8 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801c78a:	f7ff ff61 	bl	801c650 <check_DNS_timeout>
 801c78e:	4603      	mov	r3, r0
 801c790:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 801c794:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c798:	2b00      	cmp	r3, #0
 801c79a:	da06      	bge.n	801c7aa <DNS_run+0xd6>
			close(DNS_SOCKET);
 801c79c:	4b0e      	ldr	r3, [pc, #56]	; (801c7d8 <DNS_run+0x104>)
 801c79e:	781b      	ldrb	r3, [r3, #0]
 801c7a0:	4618      	mov	r0, r3
 801c7a2:	f7fc faed 	bl	8018d80 <close>
			return 0; // timeout occurred
 801c7a6:	2300      	movs	r3, #0
 801c7a8:	e00e      	b.n	801c7c8 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801c7aa:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d1b7      	bne.n	801c722 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c7b2:	4b09      	ldr	r3, [pc, #36]	; (801c7d8 <DNS_run+0x104>)
 801c7b4:	7818      	ldrb	r0, [r3, #0]
 801c7b6:	4b09      	ldr	r3, [pc, #36]	; (801c7dc <DNS_run+0x108>)
 801c7b8:	6819      	ldr	r1, [r3, #0]
 801c7ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c7bc:	2335      	movs	r3, #53	; 0x35
 801c7be:	9300      	str	r3, [sp, #0]
 801c7c0:	68fb      	ldr	r3, [r7, #12]
 801c7c2:	f7fc fea7 	bl	8019514 <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801c7c6:	e7ac      	b.n	801c722 <DNS_run+0x4e>
}
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	3734      	adds	r7, #52	; 0x34
 801c7cc:	46bd      	mov	sp, r7
 801c7ce:	bd90      	pop	{r4, r7, pc}
 801c7d0:	200009c8 	.word	0x200009c8
 801c7d4:	200009c4 	.word	0x200009c4
 801c7d8:	200009c0 	.word	0x200009c0
 801c7dc:	200009bc 	.word	0x200009bc

0801c7e0 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801c7e0:	b480      	push	{r7}
 801c7e2:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801c7e4:	4b04      	ldr	r3, [pc, #16]	; (801c7f8 <DNS_time_handler+0x18>)
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	3301      	adds	r3, #1
 801c7ea:	4a03      	ldr	r2, [pc, #12]	; (801c7f8 <DNS_time_handler+0x18>)
 801c7ec:	6013      	str	r3, [r2, #0]
}
 801c7ee:	bf00      	nop
 801c7f0:	46bd      	mov	sp, r7
 801c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7f6:	4770      	bx	lr
 801c7f8:	200009c4 	.word	0x200009c4

0801c7fc <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801c7fc:	b480      	push	{r7}
 801c7fe:	af00      	add	r7, sp, #0
 801c800:	bf00      	nop
 801c802:	46bd      	mov	sp, r7
 801c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c808:	4770      	bx	lr
	...

0801c80c <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801c80c:	b480      	push	{r7}
 801c80e:	b083      	sub	sp, #12
 801c810:	af00      	add	r7, sp, #0
 801c812:	6078      	str	r0, [r7, #4]
 801c814:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	d002      	beq.n	801c822 <dns_service_reg_cb_mutex+0x16>
 801c81c:	4a07      	ldr	r2, [pc, #28]	; (801c83c <dns_service_reg_cb_mutex+0x30>)
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801c822:	683b      	ldr	r3, [r7, #0]
 801c824:	2b00      	cmp	r3, #0
 801c826:	d002      	beq.n	801c82e <dns_service_reg_cb_mutex+0x22>
 801c828:	4a05      	ldr	r2, [pc, #20]	; (801c840 <dns_service_reg_cb_mutex+0x34>)
 801c82a:	683b      	ldr	r3, [r7, #0]
 801c82c:	6013      	str	r3, [r2, #0]

}
 801c82e:	bf00      	nop
 801c830:	370c      	adds	r7, #12
 801c832:	46bd      	mov	sp, r7
 801c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c838:	4770      	bx	lr
 801c83a:	bf00      	nop
 801c83c:	20000114 	.word	0x20000114
 801c840:	20000118 	.word	0x20000118

0801c844 <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801c844:	b480      	push	{r7}
 801c846:	b083      	sub	sp, #12
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	2b00      	cmp	r3, #0
 801c850:	d002      	beq.n	801c858 <dns_service_reg_cb_net_ready+0x14>
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	4a03      	ldr	r2, [pc, #12]	; (801c864 <dns_service_reg_cb_net_ready+0x20>)
 801c856:	6013      	str	r3, [r2, #0]

}
 801c858:	bf00      	nop
 801c85a:	370c      	adds	r7, #12
 801c85c:	46bd      	mov	sp, r7
 801c85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c862:	4770      	bx	lr
 801c864:	2000011c 	.word	0x2000011c

0801c868 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801c868:	b580      	push	{r7, lr}
 801c86a:	b082      	sub	sp, #8
 801c86c:	af00      	add	r7, sp, #0
 801c86e:	4603      	mov	r3, r0
 801c870:	6039      	str	r1, [r7, #0]
 801c872:	71fb      	strb	r3, [r7, #7]
 801c874:	4613      	mov	r3, r2
 801c876:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801c878:	88bb      	ldrh	r3, [r7, #4]
 801c87a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c87e:	d202      	bcs.n	801c886 <dns_service_init+0x1e>
 801c880:	f04f 33ff 	mov.w	r3, #4294967295
 801c884:	e005      	b.n	801c892 <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801c886:	79fb      	ldrb	r3, [r7, #7]
 801c888:	6839      	ldr	r1, [r7, #0]
 801c88a:	4618      	mov	r0, r3
 801c88c:	f7ff ff06 	bl	801c69c <DNS_init>
	return 0;
 801c890:	2300      	movs	r3, #0
}
 801c892:	4618      	mov	r0, r3
 801c894:	3708      	adds	r7, #8
 801c896:	46bd      	mov	sp, r7
 801c898:	bd80      	pop	{r7, pc}
	...

0801c89c <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801c89c:	b480      	push	{r7}
 801c89e:	b083      	sub	sp, #12
 801c8a0:	af00      	add	r7, sp, #0
 801c8a2:	6078      	str	r0, [r7, #4]
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	681b      	ldr	r3, [r3, #0]
 801c8a8:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801c8aa:	4b04      	ldr	r3, [pc, #16]	; (801c8bc <dns_service_set_dns_ip+0x20>)
 801c8ac:	601a      	str	r2, [r3, #0]
}
 801c8ae:	bf00      	nop
 801c8b0:	370c      	adds	r7, #12
 801c8b2:	46bd      	mov	sp, r7
 801c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8b8:	4770      	bx	lr
 801c8ba:	bf00      	nop
 801c8bc:	200009cc 	.word	0x200009cc

0801c8c0 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801c8c0:	b580      	push	{r7, lr}
 801c8c2:	b084      	sub	sp, #16
 801c8c4:	af00      	add	r7, sp, #0
 801c8c6:	6078      	str	r0, [r7, #4]
 801c8c8:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801c8ca:	4b0e      	ldr	r3, [pc, #56]	; (801c904 <dns_service_resolve_name+0x44>)
 801c8cc:	681b      	ldr	r3, [r3, #0]
 801c8ce:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady()){
 801c8d0:	4b0d      	ldr	r3, [pc, #52]	; (801c908 <dns_service_resolve_name+0x48>)
 801c8d2:	681b      	ldr	r3, [r3, #0]
 801c8d4:	4798      	blx	r3
 801c8d6:	4603      	mov	r3, r0
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d007      	beq.n	801c8ec <dns_service_resolve_name+0x2c>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801c8dc:	683a      	ldr	r2, [r7, #0]
 801c8de:	6879      	ldr	r1, [r7, #4]
 801c8e0:	480a      	ldr	r0, [pc, #40]	; (801c90c <dns_service_resolve_name+0x4c>)
 801c8e2:	f7ff fef7 	bl	801c6d4 <DNS_run>
 801c8e6:	4603      	mov	r3, r0
 801c8e8:	73fb      	strb	r3, [r7, #15]
 801c8ea:	e001      	b.n	801c8f0 <dns_service_resolve_name+0x30>
	}else{
		err = -1;
 801c8ec:	23ff      	movs	r3, #255	; 0xff
 801c8ee:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801c8f0:	4b07      	ldr	r3, [pc, #28]	; (801c910 <dns_service_resolve_name+0x50>)
 801c8f2:	681b      	ldr	r3, [r3, #0]
 801c8f4:	4798      	blx	r3
#endif
	return err;
 801c8f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c8fa:	4618      	mov	r0, r3
 801c8fc:	3710      	adds	r7, #16
 801c8fe:	46bd      	mov	sp, r7
 801c900:	bd80      	pop	{r7, pc}
 801c902:	bf00      	nop
 801c904:	20000114 	.word	0x20000114
 801c908:	2000011c 	.word	0x2000011c
 801c90c:	200009cc 	.word	0x200009cc
 801c910:	20000118 	.word	0x20000118

0801c914 <dns_service_increment_second>:

void dns_service_increment_second(void){
 801c914:	b580      	push	{r7, lr}
 801c916:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801c918:	f7ff ff62 	bl	801c7e0 <DNS_time_handler>
}
 801c91c:	bf00      	nop
 801c91e:	bd80      	pop	{r7, pc}

0801c920 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801c920:	b580      	push	{r7, lr}
 801c922:	b086      	sub	sp, #24
 801c924:	af00      	add	r7, sp, #0
 801c926:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d101      	bne.n	801c932 <isValidIPv4+0x12>
        return false;
 801c92e:	2300      	movs	r3, #0
 801c930:	e068      	b.n	801ca04 <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801c932:	2300      	movs	r3, #0
 801c934:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801c936:	2300      	movs	r3, #0
 801c938:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801c93a:	2300      	movs	r3, #0
 801c93c:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801c93e:	2300      	movs	r3, #0
 801c940:	60bb      	str	r3, [r7, #8]
 801c942:	e043      	b.n	801c9cc <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801c944:	687a      	ldr	r2, [r7, #4]
 801c946:	68bb      	ldr	r3, [r7, #8]
 801c948:	4413      	add	r3, r2
 801c94a:	781b      	ldrb	r3, [r3, #0]
 801c94c:	3b30      	subs	r3, #48	; 0x30
 801c94e:	2b09      	cmp	r3, #9
 801c950:	d818      	bhi.n	801c984 <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801c952:	697a      	ldr	r2, [r7, #20]
 801c954:	4613      	mov	r3, r2
 801c956:	009b      	lsls	r3, r3, #2
 801c958:	4413      	add	r3, r2
 801c95a:	005b      	lsls	r3, r3, #1
 801c95c:	4619      	mov	r1, r3
 801c95e:	687a      	ldr	r2, [r7, #4]
 801c960:	68bb      	ldr	r3, [r7, #8]
 801c962:	4413      	add	r3, r2
 801c964:	781b      	ldrb	r3, [r3, #0]
 801c966:	3b30      	subs	r3, #48	; 0x30
 801c968:	440b      	add	r3, r1
 801c96a:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801c96c:	697b      	ldr	r3, [r7, #20]
 801c96e:	2b00      	cmp	r3, #0
 801c970:	db02      	blt.n	801c978 <isValidIPv4+0x58>
 801c972:	697b      	ldr	r3, [r7, #20]
 801c974:	2bff      	cmp	r3, #255	; 0xff
 801c976:	dd01      	ble.n	801c97c <isValidIPv4+0x5c>
                return false;
 801c978:	2300      	movs	r3, #0
 801c97a:	e043      	b.n	801ca04 <isValidIPv4+0xe4>
            }

            segmentLength++;
 801c97c:	68fb      	ldr	r3, [r7, #12]
 801c97e:	3301      	adds	r3, #1
 801c980:	60fb      	str	r3, [r7, #12]
 801c982:	e020      	b.n	801c9c6 <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801c984:	687a      	ldr	r2, [r7, #4]
 801c986:	68bb      	ldr	r3, [r7, #8]
 801c988:	4413      	add	r3, r2
 801c98a:	781b      	ldrb	r3, [r3, #0]
 801c98c:	2b2e      	cmp	r3, #46	; 0x2e
 801c98e:	d118      	bne.n	801c9c2 <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	2b01      	cmp	r3, #1
 801c994:	dd09      	ble.n	801c9aa <isValidIPv4+0x8a>
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	68ba      	ldr	r2, [r7, #8]
 801c99a:	1ad3      	subs	r3, r2, r3
 801c99c:	687a      	ldr	r2, [r7, #4]
 801c99e:	4413      	add	r3, r2
 801c9a0:	781b      	ldrb	r3, [r3, #0]
 801c9a2:	2b30      	cmp	r3, #48	; 0x30
 801c9a4:	d101      	bne.n	801c9aa <isValidIPv4+0x8a>
                return false;
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	e02c      	b.n	801ca04 <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801c9aa:	2300      	movs	r3, #0
 801c9ac:	617b      	str	r3, [r7, #20]
            count++;
 801c9ae:	693b      	ldr	r3, [r7, #16]
 801c9b0:	3301      	adds	r3, #1
 801c9b2:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801c9b8:	693b      	ldr	r3, [r7, #16]
 801c9ba:	2b03      	cmp	r3, #3
 801c9bc:	dd03      	ble.n	801c9c6 <isValidIPv4+0xa6>
                return false;
 801c9be:	2300      	movs	r3, #0
 801c9c0:	e020      	b.n	801ca04 <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801c9c2:	2300      	movs	r3, #0
 801c9c4:	e01e      	b.n	801ca04 <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801c9c6:	68bb      	ldr	r3, [r7, #8]
 801c9c8:	3301      	adds	r3, #1
 801c9ca:	60bb      	str	r3, [r7, #8]
 801c9cc:	687a      	ldr	r2, [r7, #4]
 801c9ce:	68bb      	ldr	r3, [r7, #8]
 801c9d0:	4413      	add	r3, r2
 801c9d2:	781b      	ldrb	r3, [r3, #0]
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d1b5      	bne.n	801c944 <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801c9d8:	68fb      	ldr	r3, [r7, #12]
 801c9da:	2b01      	cmp	r3, #1
 801c9dc:	dd0c      	ble.n	801c9f8 <isValidIPv4+0xd8>
 801c9de:	6878      	ldr	r0, [r7, #4]
 801c9e0:	f7f3 fc5e 	bl	80102a0 <strlen>
 801c9e4:	4602      	mov	r2, r0
 801c9e6:	68fb      	ldr	r3, [r7, #12]
 801c9e8:	1ad3      	subs	r3, r2, r3
 801c9ea:	687a      	ldr	r2, [r7, #4]
 801c9ec:	4413      	add	r3, r2
 801c9ee:	781b      	ldrb	r3, [r3, #0]
 801c9f0:	2b30      	cmp	r3, #48	; 0x30
 801c9f2:	d101      	bne.n	801c9f8 <isValidIPv4+0xd8>
        return false;
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	e005      	b.n	801ca04 <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801c9f8:	693b      	ldr	r3, [r7, #16]
 801c9fa:	2b03      	cmp	r3, #3
 801c9fc:	bf0c      	ite	eq
 801c9fe:	2301      	moveq	r3, #1
 801ca00:	2300      	movne	r3, #0
 801ca02:	b2db      	uxtb	r3, r3
}
 801ca04:	4618      	mov	r0, r3
 801ca06:	3718      	adds	r7, #24
 801ca08:	46bd      	mov	sp, r7
 801ca0a:	bd80      	pop	{r7, pc}

0801ca0c <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801ca0c:	b480      	push	{r7}
 801ca0e:	b085      	sub	sp, #20
 801ca10:	af00      	add	r7, sp, #0
 801ca12:	60f8      	str	r0, [r7, #12]
 801ca14:	60b9      	str	r1, [r7, #8]
 801ca16:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	68ba      	ldr	r2, [r7, #8]
 801ca1c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	687a      	ldr	r2, [r7, #4]
 801ca22:	601a      	str	r2, [r3, #0]
}
 801ca24:	bf00      	nop
 801ca26:	3714      	adds	r7, #20
 801ca28:	46bd      	mov	sp, r7
 801ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca2e:	4770      	bx	lr

0801ca30 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801ca30:	b480      	push	{r7}
 801ca32:	b083      	sub	sp, #12
 801ca34:	af00      	add	r7, sp, #0
 801ca36:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	681b      	ldr	r3, [r3, #0]
 801ca3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca40:	4293      	cmp	r3, r2
 801ca42:	d003      	beq.n	801ca4c <getNextPacketId+0x1c>
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	3301      	adds	r3, #1
 801ca4a:	e000      	b.n	801ca4e <getNextPacketId+0x1e>
 801ca4c:	2301      	movs	r3, #1
 801ca4e:	687a      	ldr	r2, [r7, #4]
 801ca50:	6013      	str	r3, [r2, #0]
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	681b      	ldr	r3, [r3, #0]
}
 801ca56:	4618      	mov	r0, r3
 801ca58:	370c      	adds	r7, #12
 801ca5a:	46bd      	mov	sp, r7
 801ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca60:	4770      	bx	lr

0801ca62 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801ca62:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca64:	b087      	sub	sp, #28
 801ca66:	af00      	add	r7, sp, #0
 801ca68:	60f8      	str	r0, [r7, #12]
 801ca6a:	60b9      	str	r1, [r7, #8]
 801ca6c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801ca6e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca72:	617b      	str	r3, [r7, #20]
        sent = 0;
 801ca74:	2300      	movs	r3, #0
 801ca76:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801ca78:	e018      	b.n	801caac <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801ca7a:	68fb      	ldr	r3, [r7, #12]
 801ca7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ca7e:	689c      	ldr	r4, [r3, #8]
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	691a      	ldr	r2, [r3, #16]
 801ca88:	693b      	ldr	r3, [r7, #16]
 801ca8a:	18d6      	adds	r6, r2, r3
 801ca8c:	6878      	ldr	r0, [r7, #4]
 801ca8e:	f000 fccb 	bl	801d428 <TimerLeftMS>
 801ca92:	4603      	mov	r3, r0
 801ca94:	68ba      	ldr	r2, [r7, #8]
 801ca96:	4631      	mov	r1, r6
 801ca98:	4628      	mov	r0, r5
 801ca9a:	47a0      	blx	r4
 801ca9c:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801ca9e:	697b      	ldr	r3, [r7, #20]
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	db0e      	blt.n	801cac2 <sendPacket+0x60>
            break;
        sent += rc;
 801caa4:	693a      	ldr	r2, [r7, #16]
 801caa6:	697b      	ldr	r3, [r7, #20]
 801caa8:	4413      	add	r3, r2
 801caaa:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801caac:	693a      	ldr	r2, [r7, #16]
 801caae:	68bb      	ldr	r3, [r7, #8]
 801cab0:	429a      	cmp	r2, r3
 801cab2:	da07      	bge.n	801cac4 <sendPacket+0x62>
 801cab4:	6878      	ldr	r0, [r7, #4]
 801cab6:	f000 fc75 	bl	801d3a4 <TimerIsExpired>
 801caba:	4603      	mov	r3, r0
 801cabc:	2b00      	cmp	r3, #0
 801cabe:	d0dc      	beq.n	801ca7a <sendPacket+0x18>
 801cac0:	e000      	b.n	801cac4 <sendPacket+0x62>
            break;
 801cac2:	bf00      	nop
    }
    if (sent == length)
 801cac4:	693a      	ldr	r2, [r7, #16]
 801cac6:	68bb      	ldr	r3, [r7, #8]
 801cac8:	429a      	cmp	r2, r3
 801caca:	d10b      	bne.n	801cae4 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801cacc:	68fb      	ldr	r3, [r7, #12]
 801cace:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801cad2:	68fb      	ldr	r3, [r7, #12]
 801cad4:	699b      	ldr	r3, [r3, #24]
 801cad6:	4619      	mov	r1, r3
 801cad8:	4610      	mov	r0, r2
 801cada:	f000 fc8d 	bl	801d3f8 <TimerCountdown>
        rc = SUCCESSS;
 801cade:	2300      	movs	r3, #0
 801cae0:	617b      	str	r3, [r7, #20]
 801cae2:	e002      	b.n	801caea <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801cae4:	f04f 33ff 	mov.w	r3, #4294967295
 801cae8:	617b      	str	r3, [r7, #20]
    return rc;
 801caea:	697b      	ldr	r3, [r7, #20]
}
 801caec:	4618      	mov	r0, r3
 801caee:	371c      	adds	r7, #28
 801caf0:	46bd      	mov	sp, r7
 801caf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801caf4 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801caf4:	b580      	push	{r7, lr}
 801caf6:	b086      	sub	sp, #24
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	60f8      	str	r0, [r7, #12]
 801cafc:	60b9      	str	r1, [r7, #8]
 801cafe:	607a      	str	r2, [r7, #4]
 801cb00:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	68ba      	ldr	r2, [r7, #8]
 801cb06:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cb08:	2300      	movs	r3, #0
 801cb0a:	617b      	str	r3, [r7, #20]
 801cb0c:	e009      	b.n	801cb22 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801cb0e:	68fa      	ldr	r2, [r7, #12]
 801cb10:	697b      	ldr	r3, [r7, #20]
 801cb12:	3304      	adds	r3, #4
 801cb14:	00db      	lsls	r3, r3, #3
 801cb16:	4413      	add	r3, r2
 801cb18:	2200      	movs	r2, #0
 801cb1a:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cb1c:	697b      	ldr	r3, [r7, #20]
 801cb1e:	3301      	adds	r3, #1
 801cb20:	617b      	str	r3, [r7, #20]
 801cb22:	697b      	ldr	r3, [r7, #20]
 801cb24:	2b04      	cmp	r3, #4
 801cb26:	ddf2      	ble.n	801cb0e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801cb28:	68fb      	ldr	r3, [r7, #12]
 801cb2a:	687a      	ldr	r2, [r7, #4]
 801cb2c:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801cb2e:	68fb      	ldr	r3, [r7, #12]
 801cb30:	683a      	ldr	r2, [r7, #0]
 801cb32:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801cb34:	68fb      	ldr	r3, [r7, #12]
 801cb36:	6a3a      	ldr	r2, [r7, #32]
 801cb38:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801cb3a:	68fb      	ldr	r3, [r7, #12]
 801cb3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cb3e:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801cb40:	68fb      	ldr	r3, [r7, #12]
 801cb42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801cb44:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801cb46:	68fb      	ldr	r3, [r7, #12]
 801cb48:	2200      	movs	r2, #0
 801cb4a:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801cb4c:	68fb      	ldr	r3, [r7, #12]
 801cb4e:	2200      	movs	r2, #0
 801cb50:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801cb52:	68fb      	ldr	r3, [r7, #12]
 801cb54:	2200      	movs	r2, #0
 801cb56:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801cb58:	68fb      	ldr	r3, [r7, #12]
 801cb5a:	2201      	movs	r2, #1
 801cb5c:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801cb5e:	68fb      	ldr	r3, [r7, #12]
 801cb60:	3354      	adds	r3, #84	; 0x54
 801cb62:	4618      	mov	r0, r3
 801cb64:	f000 fc11 	bl	801d38a <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801cb68:	bf00      	nop
 801cb6a:	3718      	adds	r7, #24
 801cb6c:	46bd      	mov	sp, r7
 801cb6e:	bd80      	pop	{r7, pc}

0801cb70 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801cb70:	b590      	push	{r4, r7, lr}
 801cb72:	b08b      	sub	sp, #44	; 0x2c
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	60f8      	str	r0, [r7, #12]
 801cb78:	60b9      	str	r1, [r7, #8]
 801cb7a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801cb7c:	2301      	movs	r3, #1
 801cb7e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801cb80:	2300      	movs	r3, #0
 801cb82:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801cb84:	2304      	movs	r3, #4
 801cb86:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801cb88:	68bb      	ldr	r3, [r7, #8]
 801cb8a:	2200      	movs	r2, #0
 801cb8c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801cb8e:	f04f 33ff 	mov.w	r3, #4294967295
 801cb92:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801cb94:	6a3b      	ldr	r3, [r7, #32]
 801cb96:	3301      	adds	r3, #1
 801cb98:	623b      	str	r3, [r7, #32]
 801cb9a:	6a3a      	ldr	r2, [r7, #32]
 801cb9c:	69fb      	ldr	r3, [r7, #28]
 801cb9e:	429a      	cmp	r2, r3
 801cba0:	dd03      	ble.n	801cbaa <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801cba2:	f04f 33ff 	mov.w	r3, #4294967295
 801cba6:	61bb      	str	r3, [r7, #24]
            goto exit;
 801cba8:	e021      	b.n	801cbee <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cbae:	685c      	ldr	r4, [r3, #4]
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801cbb4:	f107 0117 	add.w	r1, r7, #23
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	2201      	movs	r2, #1
 801cbbc:	47a0      	blx	r4
 801cbbe:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801cbc0:	69bb      	ldr	r3, [r7, #24]
 801cbc2:	2b01      	cmp	r3, #1
 801cbc4:	d112      	bne.n	801cbec <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801cbc6:	68bb      	ldr	r3, [r7, #8]
 801cbc8:	681a      	ldr	r2, [r3, #0]
 801cbca:	7dfb      	ldrb	r3, [r7, #23]
 801cbcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cbd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cbd2:	fb01 f303 	mul.w	r3, r1, r3
 801cbd6:	441a      	add	r2, r3
 801cbd8:	68bb      	ldr	r3, [r7, #8]
 801cbda:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801cbdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbde:	01db      	lsls	r3, r3, #7
 801cbe0:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801cbe2:	7dfb      	ldrb	r3, [r7, #23]
 801cbe4:	b25b      	sxtb	r3, r3
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	dbd1      	blt.n	801cb8e <decodePacket+0x1e>
exit:
 801cbea:	e000      	b.n	801cbee <decodePacket+0x7e>
            goto exit;
 801cbec:	bf00      	nop
    return len;
 801cbee:	6a3b      	ldr	r3, [r7, #32]
}
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	372c      	adds	r7, #44	; 0x2c
 801cbf4:	46bd      	mov	sp, r7
 801cbf6:	bd90      	pop	{r4, r7, pc}

0801cbf8 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801cbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbfa:	b089      	sub	sp, #36	; 0x24
 801cbfc:	af00      	add	r7, sp, #0
 801cbfe:	60f8      	str	r0, [r7, #12]
 801cc00:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801cc02:	f04f 33ff 	mov.w	r3, #4294967295
 801cc06:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801cc08:	2300      	movs	r3, #0
 801cc0a:	617b      	str	r3, [r7, #20]
    int len = 0;
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801cc10:	2300      	movs	r3, #0
 801cc12:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801cc14:	68fb      	ldr	r3, [r7, #12]
 801cc16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc18:	685c      	ldr	r4, [r3, #4]
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	695e      	ldr	r6, [r3, #20]
 801cc22:	68b8      	ldr	r0, [r7, #8]
 801cc24:	f000 fc00 	bl	801d428 <TimerLeftMS>
 801cc28:	4603      	mov	r3, r0
 801cc2a:	2201      	movs	r2, #1
 801cc2c:	4631      	mov	r1, r6
 801cc2e:	4628      	mov	r0, r5
 801cc30:	47a0      	blx	r4
 801cc32:	4603      	mov	r3, r0
 801cc34:	2b01      	cmp	r3, #1
 801cc36:	d13b      	bne.n	801ccb0 <readPacket+0xb8>
        goto exit;

    len = 1;
 801cc38:	2301      	movs	r3, #1
 801cc3a:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801cc3c:	68b8      	ldr	r0, [r7, #8]
 801cc3e:	f000 fbf3 	bl	801d428 <TimerLeftMS>
 801cc42:	4602      	mov	r2, r0
 801cc44:	f107 0310 	add.w	r3, r7, #16
 801cc48:	4619      	mov	r1, r3
 801cc4a:	68f8      	ldr	r0, [r7, #12]
 801cc4c:	f7ff ff90 	bl	801cb70 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801cc50:	68fb      	ldr	r3, [r7, #12]
 801cc52:	695b      	ldr	r3, [r3, #20]
 801cc54:	3301      	adds	r3, #1
 801cc56:	693a      	ldr	r2, [r7, #16]
 801cc58:	4611      	mov	r1, r2
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f000 ff49 	bl	801daf2 <MQTTPacket_encode>
 801cc60:	4602      	mov	r2, r0
 801cc62:	69bb      	ldr	r3, [r7, #24]
 801cc64:	4413      	add	r3, r2
 801cc66:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801cc68:	693b      	ldr	r3, [r7, #16]
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	dd16      	ble.n	801cc9c <readPacket+0xa4>
 801cc6e:	68fb      	ldr	r3, [r7, #12]
 801cc70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc72:	685c      	ldr	r4, [r3, #4]
 801cc74:	68fb      	ldr	r3, [r7, #12]
 801cc76:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	695a      	ldr	r2, [r3, #20]
 801cc7c:	69bb      	ldr	r3, [r7, #24]
 801cc7e:	18d6      	adds	r6, r2, r3
 801cc80:	693b      	ldr	r3, [r7, #16]
 801cc82:	607b      	str	r3, [r7, #4]
 801cc84:	68b8      	ldr	r0, [r7, #8]
 801cc86:	f000 fbcf 	bl	801d428 <TimerLeftMS>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	687a      	ldr	r2, [r7, #4]
 801cc8e:	4631      	mov	r1, r6
 801cc90:	4628      	mov	r0, r5
 801cc92:	47a0      	blx	r4
 801cc94:	4602      	mov	r2, r0
 801cc96:	693b      	ldr	r3, [r7, #16]
 801cc98:	429a      	cmp	r2, r3
 801cc9a:	d10b      	bne.n	801ccb4 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801cc9c:	68fb      	ldr	r3, [r7, #12]
 801cc9e:	695b      	ldr	r3, [r3, #20]
 801cca0:	781b      	ldrb	r3, [r3, #0]
 801cca2:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801cca4:	7d3b      	ldrb	r3, [r7, #20]
 801cca6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801ccaa:	b2db      	uxtb	r3, r3
 801ccac:	61fb      	str	r3, [r7, #28]
 801ccae:	e002      	b.n	801ccb6 <readPacket+0xbe>
        goto exit;
 801ccb0:	bf00      	nop
 801ccb2:	e000      	b.n	801ccb6 <readPacket+0xbe>
        goto exit;
 801ccb4:	bf00      	nop
exit:
    return rc;
 801ccb6:	69fb      	ldr	r3, [r7, #28]
}
 801ccb8:	4618      	mov	r0, r3
 801ccba:	3724      	adds	r7, #36	; 0x24
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ccc0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801ccc0:	b480      	push	{r7}
 801ccc2:	b087      	sub	sp, #28
 801ccc4:	af00      	add	r7, sp, #0
 801ccc6:	6078      	str	r0, [r7, #4]
 801ccc8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801ccca:	687b      	ldr	r3, [r7, #4]
 801cccc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801ccce:	683b      	ldr	r3, [r7, #0]
 801ccd0:	689b      	ldr	r3, [r3, #8]
 801ccd2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801ccd4:	683b      	ldr	r3, [r7, #0]
 801ccd6:	685b      	ldr	r3, [r3, #4]
 801ccd8:	461a      	mov	r2, r3
 801ccda:	693b      	ldr	r3, [r7, #16]
 801ccdc:	4413      	add	r3, r2
 801ccde:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801cce0:	e039      	b.n	801cd56 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801cce2:	693b      	ldr	r3, [r7, #16]
 801cce4:	781b      	ldrb	r3, [r3, #0]
 801cce6:	2b2f      	cmp	r3, #47	; 0x2f
 801cce8:	d103      	bne.n	801ccf2 <isTopicMatched+0x32>
 801ccea:	697b      	ldr	r3, [r7, #20]
 801ccec:	781b      	ldrb	r3, [r3, #0]
 801ccee:	2b2f      	cmp	r3, #47	; 0x2f
 801ccf0:	d13a      	bne.n	801cd68 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801ccf2:	697b      	ldr	r3, [r7, #20]
 801ccf4:	781b      	ldrb	r3, [r3, #0]
 801ccf6:	2b2b      	cmp	r3, #43	; 0x2b
 801ccf8:	d009      	beq.n	801cd0e <isTopicMatched+0x4e>
 801ccfa:	697b      	ldr	r3, [r7, #20]
 801ccfc:	781b      	ldrb	r3, [r3, #0]
 801ccfe:	2b23      	cmp	r3, #35	; 0x23
 801cd00:	d005      	beq.n	801cd0e <isTopicMatched+0x4e>
 801cd02:	697b      	ldr	r3, [r7, #20]
 801cd04:	781a      	ldrb	r2, [r3, #0]
 801cd06:	693b      	ldr	r3, [r7, #16]
 801cd08:	781b      	ldrb	r3, [r3, #0]
 801cd0a:	429a      	cmp	r2, r3
 801cd0c:	d12e      	bne.n	801cd6c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801cd0e:	697b      	ldr	r3, [r7, #20]
 801cd10:	781b      	ldrb	r3, [r3, #0]
 801cd12:	2b2b      	cmp	r3, #43	; 0x2b
 801cd14:	d112      	bne.n	801cd3c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801cd16:	693b      	ldr	r3, [r7, #16]
 801cd18:	3301      	adds	r3, #1
 801cd1a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801cd1c:	e005      	b.n	801cd2a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801cd1e:	693b      	ldr	r3, [r7, #16]
 801cd20:	3301      	adds	r3, #1
 801cd22:	613b      	str	r3, [r7, #16]
 801cd24:	693b      	ldr	r3, [r7, #16]
 801cd26:	3301      	adds	r3, #1
 801cd28:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801cd2a:	68fa      	ldr	r2, [r7, #12]
 801cd2c:	68bb      	ldr	r3, [r7, #8]
 801cd2e:	429a      	cmp	r2, r3
 801cd30:	d20b      	bcs.n	801cd4a <isTopicMatched+0x8a>
 801cd32:	68fb      	ldr	r3, [r7, #12]
 801cd34:	781b      	ldrb	r3, [r3, #0]
 801cd36:	2b2f      	cmp	r3, #47	; 0x2f
 801cd38:	d1f1      	bne.n	801cd1e <isTopicMatched+0x5e>
 801cd3a:	e006      	b.n	801cd4a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801cd3c:	697b      	ldr	r3, [r7, #20]
 801cd3e:	781b      	ldrb	r3, [r3, #0]
 801cd40:	2b23      	cmp	r3, #35	; 0x23
 801cd42:	d102      	bne.n	801cd4a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801cd44:	68bb      	ldr	r3, [r7, #8]
 801cd46:	3b01      	subs	r3, #1
 801cd48:	613b      	str	r3, [r7, #16]
        curf++;
 801cd4a:	697b      	ldr	r3, [r7, #20]
 801cd4c:	3301      	adds	r3, #1
 801cd4e:	617b      	str	r3, [r7, #20]
        curn++;
 801cd50:	693b      	ldr	r3, [r7, #16]
 801cd52:	3301      	adds	r3, #1
 801cd54:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801cd56:	697b      	ldr	r3, [r7, #20]
 801cd58:	781b      	ldrb	r3, [r3, #0]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d007      	beq.n	801cd6e <isTopicMatched+0xae>
 801cd5e:	693a      	ldr	r2, [r7, #16]
 801cd60:	68bb      	ldr	r3, [r7, #8]
 801cd62:	429a      	cmp	r2, r3
 801cd64:	d3bd      	bcc.n	801cce2 <isTopicMatched+0x22>
 801cd66:	e002      	b.n	801cd6e <isTopicMatched+0xae>
            break;
 801cd68:	bf00      	nop
 801cd6a:	e000      	b.n	801cd6e <isTopicMatched+0xae>
            break;
 801cd6c:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801cd6e:	693a      	ldr	r2, [r7, #16]
 801cd70:	68bb      	ldr	r3, [r7, #8]
 801cd72:	429a      	cmp	r2, r3
 801cd74:	d105      	bne.n	801cd82 <isTopicMatched+0xc2>
 801cd76:	697b      	ldr	r3, [r7, #20]
 801cd78:	781b      	ldrb	r3, [r3, #0]
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d101      	bne.n	801cd82 <isTopicMatched+0xc2>
 801cd7e:	2301      	movs	r3, #1
 801cd80:	e000      	b.n	801cd84 <isTopicMatched+0xc4>
 801cd82:	2300      	movs	r3, #0
 801cd84:	b2db      	uxtb	r3, r3
}
 801cd86:	4618      	mov	r0, r3
 801cd88:	371c      	adds	r7, #28
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd90:	4770      	bx	lr

0801cd92 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801cd92:	b580      	push	{r7, lr}
 801cd94:	b08a      	sub	sp, #40	; 0x28
 801cd96:	af00      	add	r7, sp, #0
 801cd98:	60f8      	str	r0, [r7, #12]
 801cd9a:	60b9      	str	r1, [r7, #8]
 801cd9c:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801cd9e:	f04f 33ff 	mov.w	r3, #4294967295
 801cda2:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cda4:	2300      	movs	r3, #0
 801cda6:	627b      	str	r3, [r7, #36]	; 0x24
 801cda8:	e03f      	b.n	801ce2a <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801cdaa:	68fa      	ldr	r2, [r7, #12]
 801cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdae:	3304      	adds	r3, #4
 801cdb0:	00db      	lsls	r3, r3, #3
 801cdb2:	4413      	add	r3, r2
 801cdb4:	685b      	ldr	r3, [r3, #4]
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	d034      	beq.n	801ce24 <deliverMessage+0x92>
 801cdba:	68fa      	ldr	r2, [r7, #12]
 801cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdbe:	3304      	adds	r3, #4
 801cdc0:	00db      	lsls	r3, r3, #3
 801cdc2:	4413      	add	r3, r2
 801cdc4:	685b      	ldr	r3, [r3, #4]
 801cdc6:	4619      	mov	r1, r3
 801cdc8:	68b8      	ldr	r0, [r7, #8]
 801cdca:	f001 f861 	bl	801de90 <MQTTPacket_equals>
 801cdce:	4603      	mov	r3, r0
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d10c      	bne.n	801cdee <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801cdd4:	68fa      	ldr	r2, [r7, #12]
 801cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdd8:	3304      	adds	r3, #4
 801cdda:	00db      	lsls	r3, r3, #3
 801cddc:	4413      	add	r3, r2
 801cdde:	685b      	ldr	r3, [r3, #4]
 801cde0:	68b9      	ldr	r1, [r7, #8]
 801cde2:	4618      	mov	r0, r3
 801cde4:	f7ff ff6c 	bl	801ccc0 <isTopicMatched>
 801cde8:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801cdea:	2b00      	cmp	r3, #0
 801cdec:	d01a      	beq.n	801ce24 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801cdee:	68fa      	ldr	r2, [r7, #12]
 801cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdf2:	3304      	adds	r3, #4
 801cdf4:	00db      	lsls	r3, r3, #3
 801cdf6:	4413      	add	r3, r2
 801cdf8:	689b      	ldr	r3, [r3, #8]
 801cdfa:	2b00      	cmp	r3, #0
 801cdfc:	d012      	beq.n	801ce24 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801cdfe:	f107 0318 	add.w	r3, r7, #24
 801ce02:	687a      	ldr	r2, [r7, #4]
 801ce04:	68b9      	ldr	r1, [r7, #8]
 801ce06:	4618      	mov	r0, r3
 801ce08:	f7ff fe00 	bl	801ca0c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801ce0c:	68fa      	ldr	r2, [r7, #12]
 801ce0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce10:	3304      	adds	r3, #4
 801ce12:	00db      	lsls	r3, r3, #3
 801ce14:	4413      	add	r3, r2
 801ce16:	689b      	ldr	r3, [r3, #8]
 801ce18:	f107 0218 	add.w	r2, r7, #24
 801ce1c:	4610      	mov	r0, r2
 801ce1e:	4798      	blx	r3
                rc = SUCCESSS;
 801ce20:	2300      	movs	r3, #0
 801ce22:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce26:	3301      	adds	r3, #1
 801ce28:	627b      	str	r3, [r7, #36]	; 0x24
 801ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce2c:	2b04      	cmp	r3, #4
 801ce2e:	ddbc      	ble.n	801cdaa <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801ce30:	6a3b      	ldr	r3, [r7, #32]
 801ce32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce36:	d112      	bne.n	801ce5e <deliverMessage+0xcc>
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d00e      	beq.n	801ce5e <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801ce40:	f107 0310 	add.w	r3, r7, #16
 801ce44:	687a      	ldr	r2, [r7, #4]
 801ce46:	68b9      	ldr	r1, [r7, #8]
 801ce48:	4618      	mov	r0, r3
 801ce4a:	f7ff fddf 	bl	801ca0c <NewMessageData>
        c->defaultMessageHandler(&md);
 801ce4e:	68fb      	ldr	r3, [r7, #12]
 801ce50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce52:	f107 0210 	add.w	r2, r7, #16
 801ce56:	4610      	mov	r0, r2
 801ce58:	4798      	blx	r3
        rc = SUCCESSS;
 801ce5a:	2300      	movs	r3, #0
 801ce5c:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801ce5e:	6a3b      	ldr	r3, [r7, #32]
}
 801ce60:	4618      	mov	r0, r3
 801ce62:	3728      	adds	r7, #40	; 0x28
 801ce64:	46bd      	mov	sp, r7
 801ce66:	bd80      	pop	{r7, pc}

0801ce68 <keepalive>:


int keepalive(MQTTClient* c)
{
 801ce68:	b580      	push	{r7, lr}
 801ce6a:	b086      	sub	sp, #24
 801ce6c:	af00      	add	r7, sp, #0
 801ce6e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801ce70:	f04f 33ff 	mov.w	r3, #4294967295
 801ce74:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	699b      	ldr	r3, [r3, #24]
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d102      	bne.n	801ce84 <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801ce7e:	2300      	movs	r3, #0
 801ce80:	617b      	str	r3, [r7, #20]
        goto exit;
 801ce82:	e033      	b.n	801ceec <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	3354      	adds	r3, #84	; 0x54
 801ce88:	4618      	mov	r0, r3
 801ce8a:	f000 fa8b 	bl	801d3a4 <TimerIsExpired>
 801ce8e:	4603      	mov	r3, r0
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d02a      	beq.n	801ceea <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	7f1b      	ldrb	r3, [r3, #28]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d126      	bne.n	801ceea <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801ce9c:	f107 0308 	add.w	r3, r7, #8
 801cea0:	4618      	mov	r0, r3
 801cea2:	f000 fa72 	bl	801d38a <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801cea6:	f107 0308 	add.w	r3, r7, #8
 801ceaa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801ceae:	4618      	mov	r0, r3
 801ceb0:	f000 fa8e 	bl	801d3d0 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	691a      	ldr	r2, [r3, #16]
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	689b      	ldr	r3, [r3, #8]
 801cebc:	4619      	mov	r1, r3
 801cebe:	4610      	mov	r0, r2
 801cec0:	f000 fd4b 	bl	801d95a <MQTTSerialize_pingreq>
 801cec4:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801cec6:	693b      	ldr	r3, [r7, #16]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	dd0f      	ble.n	801ceec <keepalive+0x84>
 801cecc:	f107 0308 	add.w	r3, r7, #8
 801ced0:	461a      	mov	r2, r3
 801ced2:	6939      	ldr	r1, [r7, #16]
 801ced4:	6878      	ldr	r0, [r7, #4]
 801ced6:	f7ff fdc4 	bl	801ca62 <sendPacket>
 801ceda:	6178      	str	r0, [r7, #20]
 801cedc:	697b      	ldr	r3, [r7, #20]
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d104      	bne.n	801ceec <keepalive+0x84>
                c->ping_outstanding = 1;
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	2201      	movs	r2, #1
 801cee6:	771a      	strb	r2, [r3, #28]
 801cee8:	e000      	b.n	801ceec <keepalive+0x84>
        }
    }

exit:
 801ceea:	bf00      	nop
    return rc;
 801ceec:	697b      	ldr	r3, [r7, #20]
}
 801ceee:	4618      	mov	r0, r3
 801cef0:	3718      	adds	r7, #24
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}
	...

0801cef8 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801cef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cefa:	b095      	sub	sp, #84	; 0x54
 801cefc:	af06      	add	r7, sp, #24
 801cefe:	6078      	str	r0, [r7, #4]
 801cf00:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801cf02:	6839      	ldr	r1, [r7, #0]
 801cf04:	6878      	ldr	r0, [r7, #4]
 801cf06:	f7ff fe77 	bl	801cbf8 <readPacket>
 801cf0a:	4603      	mov	r3, r0
 801cf0c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 801cf0e:	2300      	movs	r3, #0
 801cf10:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 801cf12:	2300      	movs	r3, #0
 801cf14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 801cf16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cf18:	3b02      	subs	r3, #2
 801cf1a:	2b0b      	cmp	r3, #11
 801cf1c:	f200 80c0 	bhi.w	801d0a0 <cycle+0x1a8>
 801cf20:	a201      	add	r2, pc, #4	; (adr r2, 801cf28 <cycle+0x30>)
 801cf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf26:	bf00      	nop
 801cf28:	0801d0a1 	.word	0x0801d0a1
 801cf2c:	0801cf59 	.word	0x0801cf59
 801cf30:	0801d0a1 	.word	0x0801d0a1
 801cf34:	0801d021 	.word	0x0801d021
 801cf38:	0801d0a1 	.word	0x0801d0a1
 801cf3c:	0801d0a1 	.word	0x0801d0a1
 801cf40:	0801d0a1 	.word	0x0801d0a1
 801cf44:	0801d0a1 	.word	0x0801d0a1
 801cf48:	0801d0a1 	.word	0x0801d0a1
 801cf4c:	0801d0a1 	.word	0x0801d0a1
 801cf50:	0801d0a1 	.word	0x0801d0a1
 801cf54:	0801d093 	.word	0x0801d093
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801cf5c:	687a      	ldr	r2, [r7, #4]
 801cf5e:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801cf60:	4616      	mov	r6, r2
 801cf62:	f107 0210 	add.w	r2, r7, #16
 801cf66:	1d15      	adds	r5, r2, #4
 801cf68:	f107 0210 	add.w	r2, r7, #16
 801cf6c:	1c54      	adds	r4, r2, #1
 801cf6e:	f107 010c 	add.w	r1, r7, #12
 801cf72:	f107 0210 	add.w	r2, r7, #16
 801cf76:	1c90      	adds	r0, r2, #2
 801cf78:	9604      	str	r6, [sp, #16]
 801cf7a:	9303      	str	r3, [sp, #12]
 801cf7c:	f107 0310 	add.w	r3, r7, #16
 801cf80:	330c      	adds	r3, #12
 801cf82:	9302      	str	r3, [sp, #8]
 801cf84:	f107 0310 	add.w	r3, r7, #16
 801cf88:	3308      	adds	r3, #8
 801cf8a:	9301      	str	r3, [sp, #4]
 801cf8c:	f107 0320 	add.w	r3, r7, #32
 801cf90:	9300      	str	r3, [sp, #0]
 801cf92:	462b      	mov	r3, r5
 801cf94:	4622      	mov	r2, r4
 801cf96:	f000 fcef 	bl	801d978 <MQTTDeserialize_publish>
 801cf9a:	4603      	mov	r3, r0
 801cf9c:	2b01      	cmp	r3, #1
 801cf9e:	f040 8083 	bne.w	801d0a8 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	b2db      	uxtb	r3, r3
 801cfa6:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801cfa8:	f107 0210 	add.w	r2, r7, #16
 801cfac:	f107 0320 	add.w	r3, r7, #32
 801cfb0:	4619      	mov	r1, r3
 801cfb2:	6878      	ldr	r0, [r7, #4]
 801cfb4:	f7ff feed 	bl	801cd92 <deliverMessage>
            if (msg.qos != QOS0)
 801cfb8:	7c3b      	ldrb	r3, [r7, #16]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	d06d      	beq.n	801d09a <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801cfbe:	7c3b      	ldrb	r3, [r7, #16]
 801cfc0:	2b01      	cmp	r3, #1
 801cfc2:	d10c      	bne.n	801cfde <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801cfc4:	687b      	ldr	r3, [r7, #4]
 801cfc6:	6918      	ldr	r0, [r3, #16]
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	689b      	ldr	r3, [r3, #8]
 801cfcc:	4619      	mov	r1, r3
 801cfce:	8abb      	ldrh	r3, [r7, #20]
 801cfd0:	9300      	str	r3, [sp, #0]
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	2204      	movs	r2, #4
 801cfd6:	f001 f828 	bl	801e02a <MQTTSerialize_ack>
 801cfda:	6378      	str	r0, [r7, #52]	; 0x34
 801cfdc:	e00e      	b.n	801cffc <cycle+0x104>
                else if (msg.qos == QOS2)
 801cfde:	7c3b      	ldrb	r3, [r7, #16]
 801cfe0:	2b02      	cmp	r3, #2
 801cfe2:	d10b      	bne.n	801cffc <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	6918      	ldr	r0, [r3, #16]
 801cfe8:	687b      	ldr	r3, [r7, #4]
 801cfea:	689b      	ldr	r3, [r3, #8]
 801cfec:	4619      	mov	r1, r3
 801cfee:	8abb      	ldrh	r3, [r7, #20]
 801cff0:	9300      	str	r3, [sp, #0]
 801cff2:	2300      	movs	r3, #0
 801cff4:	2205      	movs	r2, #5
 801cff6:	f001 f818 	bl	801e02a <MQTTSerialize_ack>
 801cffa:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801cffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cffe:	2b00      	cmp	r3, #0
 801d000:	dc03      	bgt.n	801d00a <cycle+0x112>
                    rc = FAILURE;
 801d002:	f04f 33ff 	mov.w	r3, #4294967295
 801d006:	633b      	str	r3, [r7, #48]	; 0x30
 801d008:	e005      	b.n	801d016 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801d00a:	683a      	ldr	r2, [r7, #0]
 801d00c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d00e:	6878      	ldr	r0, [r7, #4]
 801d010:	f7ff fd27 	bl	801ca62 <sendPacket>
 801d014:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801d016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d018:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d01c:	d13d      	bne.n	801d09a <cycle+0x1a2>
                    goto exit; // there was a problem
 801d01e:	e044      	b.n	801d0aa <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	695c      	ldr	r4, [r3, #20]
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	68db      	ldr	r3, [r3, #12]
 801d028:	f107 020a 	add.w	r2, r7, #10
 801d02c:	f107 0109 	add.w	r1, r7, #9
 801d030:	f107 0008 	add.w	r0, r7, #8
 801d034:	9300      	str	r3, [sp, #0]
 801d036:	4623      	mov	r3, r4
 801d038:	f000 fd10 	bl	801da5c <MQTTDeserialize_ack>
 801d03c:	4603      	mov	r3, r0
 801d03e:	2b01      	cmp	r3, #1
 801d040:	d003      	beq.n	801d04a <cycle+0x152>
                rc = FAILURE;
 801d042:	f04f 33ff 	mov.w	r3, #4294967295
 801d046:	633b      	str	r3, [r7, #48]	; 0x30
 801d048:	e01e      	b.n	801d088 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	6918      	ldr	r0, [r3, #16]
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	689b      	ldr	r3, [r3, #8]
 801d052:	4619      	mov	r1, r3
 801d054:	897b      	ldrh	r3, [r7, #10]
 801d056:	9300      	str	r3, [sp, #0]
 801d058:	2300      	movs	r3, #0
 801d05a:	2206      	movs	r2, #6
 801d05c:	f000 ffe5 	bl	801e02a <MQTTSerialize_ack>
 801d060:	6378      	str	r0, [r7, #52]	; 0x34
 801d062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d064:	2b00      	cmp	r3, #0
 801d066:	dc03      	bgt.n	801d070 <cycle+0x178>
                rc = FAILURE;
 801d068:	f04f 33ff 	mov.w	r3, #4294967295
 801d06c:	633b      	str	r3, [r7, #48]	; 0x30
 801d06e:	e00b      	b.n	801d088 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801d070:	683a      	ldr	r2, [r7, #0]
 801d072:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d074:	6878      	ldr	r0, [r7, #4]
 801d076:	f7ff fcf4 	bl	801ca62 <sendPacket>
 801d07a:	6338      	str	r0, [r7, #48]	; 0x30
 801d07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d002      	beq.n	801d088 <cycle+0x190>
                rc = FAILURE; // there was a problem
 801d082:	f04f 33ff 	mov.w	r3, #4294967295
 801d086:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801d088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d08e:	d106      	bne.n	801d09e <cycle+0x1a6>
                goto exit; // there was a problem
 801d090:	e00b      	b.n	801d0aa <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	2200      	movs	r2, #0
 801d096:	771a      	strb	r2, [r3, #28]
            break;
 801d098:	e002      	b.n	801d0a0 <cycle+0x1a8>
            break;
 801d09a:	bf00      	nop
 801d09c:	e000      	b.n	801d0a0 <cycle+0x1a8>
            break;
 801d09e:	bf00      	nop
    }
    keepalive(c);
 801d0a0:	6878      	ldr	r0, [r7, #4]
 801d0a2:	f7ff fee1 	bl	801ce68 <keepalive>
 801d0a6:	e000      	b.n	801d0aa <cycle+0x1b2>
                goto exit;
 801d0a8:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801d0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d101      	bne.n	801d0b4 <cycle+0x1bc>
        rc = packet_type;
 801d0b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d0b2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 801d0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	373c      	adds	r7, #60	; 0x3c
 801d0ba:	46bd      	mov	sp, r7
 801d0bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d0be:	bf00      	nop

0801d0c0 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801d0c0:	b580      	push	{r7, lr}
 801d0c2:	b086      	sub	sp, #24
 801d0c4:	af00      	add	r7, sp, #0
 801d0c6:	60f8      	str	r0, [r7, #12]
 801d0c8:	60b9      	str	r1, [r7, #8]
 801d0ca:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d0cc:	f04f 33ff 	mov.w	r3, #4294967295
 801d0d0:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801d0d2:	6878      	ldr	r0, [r7, #4]
 801d0d4:	f000 f966 	bl	801d3a4 <TimerIsExpired>
 801d0d8:	4603      	mov	r3, r0
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d109      	bne.n	801d0f2 <waitfor+0x32>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801d0de:	6879      	ldr	r1, [r7, #4]
 801d0e0:	68f8      	ldr	r0, [r7, #12]
 801d0e2:	f7ff ff09 	bl	801cef8 <cycle>
 801d0e6:	6178      	str	r0, [r7, #20]
 801d0e8:	697a      	ldr	r2, [r7, #20]
 801d0ea:	68bb      	ldr	r3, [r7, #8]
 801d0ec:	429a      	cmp	r2, r3
 801d0ee:	d1f0      	bne.n	801d0d2 <waitfor+0x12>
 801d0f0:	e000      	b.n	801d0f4 <waitfor+0x34>
            break; // we timed out
 801d0f2:	bf00      	nop

    return rc;
 801d0f4:	697b      	ldr	r3, [r7, #20]
}
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	3718      	adds	r7, #24
 801d0fa:	46bd      	mov	sp, r7
 801d0fc:	bd80      	pop	{r7, pc}
	...

0801d100 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d100:	b580      	push	{r7, lr}
 801d102:	b09e      	sub	sp, #120	; 0x78
 801d104:	af00      	add	r7, sp, #0
 801d106:	6078      	str	r0, [r7, #4]
 801d108:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801d10a:	f04f 33ff 	mov.w	r3, #4294967295
 801d10e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d110:	4a3d      	ldr	r2, [pc, #244]	; (801d208 <MQTTConnect+0x108>)
 801d112:	f107 0310 	add.w	r3, r7, #16
 801d116:	4611      	mov	r1, r2
 801d118:	2258      	movs	r2, #88	; 0x58
 801d11a:	4618      	mov	r0, r3
 801d11c:	f010 fcc3 	bl	802daa6 <memcpy>
    int len = 0;
 801d120:	2300      	movs	r3, #0
 801d122:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	6a1b      	ldr	r3, [r3, #32]
 801d128:	2b00      	cmp	r3, #0
 801d12a:	d15d      	bne.n	801d1e8 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801d12c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d130:	4618      	mov	r0, r3
 801d132:	f000 f92a 	bl	801d38a <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	685a      	ldr	r2, [r3, #4]
 801d13a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d13e:	4611      	mov	r1, r2
 801d140:	4618      	mov	r0, r3
 801d142:	f000 f945 	bl	801d3d0 <TimerCountdownMS>

    if (options == 0)
 801d146:	683b      	ldr	r3, [r7, #0]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d102      	bne.n	801d152 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801d14c:	f107 0310 	add.w	r3, r7, #16
 801d150:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801d152:	683b      	ldr	r3, [r7, #0]
 801d154:	8b1b      	ldrh	r3, [r3, #24]
 801d156:	461a      	mov	r2, r3
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d15c:	687b      	ldr	r3, [r7, #4]
 801d15e:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	699b      	ldr	r3, [r3, #24]
 801d166:	4619      	mov	r1, r3
 801d168:	4610      	mov	r0, r2
 801d16a:	f000 f945 	bl	801d3f8 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	6918      	ldr	r0, [r3, #16]
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	689b      	ldr	r3, [r3, #8]
 801d176:	683a      	ldr	r2, [r7, #0]
 801d178:	4619      	mov	r1, r3
 801d17a:	f000 fa75 	bl	801d668 <MQTTSerialize_connect>
 801d17e:	6738      	str	r0, [r7, #112]	; 0x70
 801d180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d182:	2b00      	cmp	r3, #0
 801d184:	dd32      	ble.n	801d1ec <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801d186:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d18a:	461a      	mov	r2, r3
 801d18c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d18e:	6878      	ldr	r0, [r7, #4]
 801d190:	f7ff fc67 	bl	801ca62 <sendPacket>
 801d194:	6778      	str	r0, [r7, #116]	; 0x74
 801d196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d129      	bne.n	801d1f0 <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801d19c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d1a0:	461a      	mov	r2, r3
 801d1a2:	2102      	movs	r1, #2
 801d1a4:	6878      	ldr	r0, [r7, #4]
 801d1a6:	f7ff ff8b 	bl	801d0c0 <waitfor>
 801d1aa:	4603      	mov	r3, r0
 801d1ac:	2b02      	cmp	r3, #2
 801d1ae:	d117      	bne.n	801d1e0 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801d1b0:	23ff      	movs	r3, #255	; 0xff
 801d1b2:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	695a      	ldr	r2, [r3, #20]
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	68db      	ldr	r3, [r3, #12]
 801d1c0:	f107 010f 	add.w	r1, r7, #15
 801d1c4:	f107 000e 	add.w	r0, r7, #14
 801d1c8:	f000 fb3a 	bl	801d840 <MQTTDeserialize_connack>
 801d1cc:	4603      	mov	r3, r0
 801d1ce:	2b01      	cmp	r3, #1
 801d1d0:	d102      	bne.n	801d1d8 <MQTTConnect+0xd8>
            rc = connack_rc;
 801d1d2:	7bfb      	ldrb	r3, [r7, #15]
 801d1d4:	677b      	str	r3, [r7, #116]	; 0x74
 801d1d6:	e00c      	b.n	801d1f2 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801d1d8:	f04f 33ff 	mov.w	r3, #4294967295
 801d1dc:	677b      	str	r3, [r7, #116]	; 0x74
 801d1de:	e008      	b.n	801d1f2 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801d1e0:	f04f 33ff 	mov.w	r3, #4294967295
 801d1e4:	677b      	str	r3, [r7, #116]	; 0x74
 801d1e6:	e004      	b.n	801d1f2 <MQTTConnect+0xf2>
		goto exit;
 801d1e8:	bf00      	nop
 801d1ea:	e002      	b.n	801d1f2 <MQTTConnect+0xf2>
        goto exit;
 801d1ec:	bf00      	nop
 801d1ee:	e000      	b.n	801d1f2 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801d1f0:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801d1f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d1f4:	2b00      	cmp	r3, #0
 801d1f6:	d102      	bne.n	801d1fe <MQTTConnect+0xfe>
        c->isconnected = 1;
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	2201      	movs	r2, #1
 801d1fc:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801d1fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801d200:	4618      	mov	r0, r3
 801d202:	3778      	adds	r7, #120	; 0x78
 801d204:	46bd      	mov	sp, r7
 801d206:	bd80      	pop	{r7, pc}
 801d208:	08032b00 	.word	0x08032b00

0801d20c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801d20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d20e:	b097      	sub	sp, #92	; 0x5c
 801d210:	af08      	add	r7, sp, #32
 801d212:	60f8      	str	r0, [r7, #12]
 801d214:	60b9      	str	r1, [r7, #8]
 801d216:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d218:	f04f 33ff 	mov.w	r3, #4294967295
 801d21c:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801d21e:	2300      	movs	r3, #0
 801d220:	61fb      	str	r3, [r7, #28]
 801d222:	2300      	movs	r3, #0
 801d224:	623b      	str	r3, [r7, #32]
 801d226:	2300      	movs	r3, #0
 801d228:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801d22a:	68bb      	ldr	r3, [r7, #8]
 801d22c:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801d22e:	2300      	movs	r3, #0
 801d230:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	6a1b      	ldr	r3, [r3, #32]
 801d236:	2b00      	cmp	r3, #0
 801d238:	f000 809b 	beq.w	801d372 <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801d23c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d240:	4618      	mov	r0, r3
 801d242:	f000 f8a2 	bl	801d38a <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	685a      	ldr	r2, [r3, #4]
 801d24a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d24e:	4611      	mov	r1, r2
 801d250:	4618      	mov	r0, r3
 801d252:	f000 f8bd 	bl	801d3d0 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	781b      	ldrb	r3, [r3, #0]
 801d25a:	2b01      	cmp	r3, #1
 801d25c:	d003      	beq.n	801d266 <MQTTPublish+0x5a>
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	781b      	ldrb	r3, [r3, #0]
 801d262:	2b02      	cmp	r3, #2
 801d264:	d106      	bne.n	801d274 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801d266:	68f8      	ldr	r0, [r7, #12]
 801d268:	f7ff fbe2 	bl	801ca30 <getNextPacketId>
 801d26c:	4603      	mov	r3, r0
 801d26e:	b29a      	uxth	r2, r3
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	691b      	ldr	r3, [r3, #16]
 801d278:	603b      	str	r3, [r7, #0]
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	689b      	ldr	r3, [r3, #8]
 801d27e:	469c      	mov	ip, r3
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	781b      	ldrb	r3, [r3, #0]
 801d284:	469e      	mov	lr, r3
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	785d      	ldrb	r5, [r3, #1]
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	689b      	ldr	r3, [r3, #8]
 801d292:	687a      	ldr	r2, [r7, #4]
 801d294:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d296:	9206      	str	r2, [sp, #24]
 801d298:	9305      	str	r3, [sp, #20]
 801d29a:	ac02      	add	r4, sp, #8
 801d29c:	f107 031c 	add.w	r3, r7, #28
 801d2a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d2a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d2a8:	9601      	str	r6, [sp, #4]
 801d2aa:	9500      	str	r5, [sp, #0]
 801d2ac:	4673      	mov	r3, lr
 801d2ae:	2200      	movs	r2, #0
 801d2b0:	4661      	mov	r1, ip
 801d2b2:	6838      	ldr	r0, [r7, #0]
 801d2b4:	f000 fe43 	bl	801df3e <MQTTSerialize_publish>
 801d2b8:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	dd5a      	ble.n	801d376 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801d2c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2c4:	461a      	mov	r2, r3
 801d2c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d2c8:	68f8      	ldr	r0, [r7, #12]
 801d2ca:	f7ff fbca 	bl	801ca62 <sendPacket>
 801d2ce:	6378      	str	r0, [r7, #52]	; 0x34
 801d2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2d2:	2b00      	cmp	r3, #0
 801d2d4:	d151      	bne.n	801d37a <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	781b      	ldrb	r3, [r3, #0]
 801d2da:	2b01      	cmp	r3, #1
 801d2dc:	d122      	bne.n	801d324 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801d2de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d2e2:	461a      	mov	r2, r3
 801d2e4:	2104      	movs	r1, #4
 801d2e6:	68f8      	ldr	r0, [r7, #12]
 801d2e8:	f7ff feea 	bl	801d0c0 <waitfor>
 801d2ec:	4603      	mov	r3, r0
 801d2ee:	2b04      	cmp	r3, #4
 801d2f0:	d114      	bne.n	801d31c <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	695c      	ldr	r4, [r3, #20]
 801d2f6:	68fb      	ldr	r3, [r7, #12]
 801d2f8:	68db      	ldr	r3, [r3, #12]
 801d2fa:	f107 021a 	add.w	r2, r7, #26
 801d2fe:	f107 0119 	add.w	r1, r7, #25
 801d302:	f107 0018 	add.w	r0, r7, #24
 801d306:	9300      	str	r3, [sp, #0]
 801d308:	4623      	mov	r3, r4
 801d30a:	f000 fba7 	bl	801da5c <MQTTDeserialize_ack>
 801d30e:	4603      	mov	r3, r0
 801d310:	2b01      	cmp	r3, #1
 801d312:	d035      	beq.n	801d380 <MQTTPublish+0x174>
                rc = FAILURE;
 801d314:	f04f 33ff 	mov.w	r3, #4294967295
 801d318:	637b      	str	r3, [r7, #52]	; 0x34
 801d31a:	e031      	b.n	801d380 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d31c:	f04f 33ff 	mov.w	r3, #4294967295
 801d320:	637b      	str	r3, [r7, #52]	; 0x34
 801d322:	e02d      	b.n	801d380 <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	781b      	ldrb	r3, [r3, #0]
 801d328:	2b02      	cmp	r3, #2
 801d32a:	d128      	bne.n	801d37e <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801d32c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d330:	461a      	mov	r2, r3
 801d332:	2107      	movs	r1, #7
 801d334:	68f8      	ldr	r0, [r7, #12]
 801d336:	f7ff fec3 	bl	801d0c0 <waitfor>
 801d33a:	4603      	mov	r3, r0
 801d33c:	2b07      	cmp	r3, #7
 801d33e:	d114      	bne.n	801d36a <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d340:	68fb      	ldr	r3, [r7, #12]
 801d342:	695c      	ldr	r4, [r3, #20]
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	68db      	ldr	r3, [r3, #12]
 801d348:	f107 0216 	add.w	r2, r7, #22
 801d34c:	f107 0115 	add.w	r1, r7, #21
 801d350:	f107 0014 	add.w	r0, r7, #20
 801d354:	9300      	str	r3, [sp, #0]
 801d356:	4623      	mov	r3, r4
 801d358:	f000 fb80 	bl	801da5c <MQTTDeserialize_ack>
 801d35c:	4603      	mov	r3, r0
 801d35e:	2b01      	cmp	r3, #1
 801d360:	d00e      	beq.n	801d380 <MQTTPublish+0x174>
                rc = FAILURE;
 801d362:	f04f 33ff 	mov.w	r3, #4294967295
 801d366:	637b      	str	r3, [r7, #52]	; 0x34
 801d368:	e00a      	b.n	801d380 <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d36a:	f04f 33ff 	mov.w	r3, #4294967295
 801d36e:	637b      	str	r3, [r7, #52]	; 0x34
 801d370:	e006      	b.n	801d380 <MQTTPublish+0x174>
		goto exit;
 801d372:	bf00      	nop
 801d374:	e004      	b.n	801d380 <MQTTPublish+0x174>
        goto exit;
 801d376:	bf00      	nop
 801d378:	e002      	b.n	801d380 <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d37a:	bf00      	nop
 801d37c:	e000      	b.n	801d380 <MQTTPublish+0x174>
    }

exit:
 801d37e:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d382:	4618      	mov	r0, r3
 801d384:	373c      	adds	r7, #60	; 0x3c
 801d386:	46bd      	mov	sp, r7
 801d388:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d38a <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d38a:	b480      	push	{r7}
 801d38c:	b083      	sub	sp, #12
 801d38e:	af00      	add	r7, sp, #0
 801d390:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	2200      	movs	r2, #0
 801d396:	605a      	str	r2, [r3, #4]
}
 801d398:	bf00      	nop
 801d39a:	370c      	adds	r7, #12
 801d39c:	46bd      	mov	sp, r7
 801d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3a2:	4770      	bx	lr

0801d3a4 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d3a4:	b480      	push	{r7}
 801d3a6:	b085      	sub	sp, #20
 801d3a8:	af00      	add	r7, sp, #0
 801d3aa:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	685a      	ldr	r2, [r3, #4]
 801d3b0:	4b06      	ldr	r3, [pc, #24]	; (801d3cc <TimerIsExpired+0x28>)
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	1ad3      	subs	r3, r2, r3
 801d3b6:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	0fdb      	lsrs	r3, r3, #31
 801d3bc:	b2db      	uxtb	r3, r3
}
 801d3be:	4618      	mov	r0, r3
 801d3c0:	3714      	adds	r7, #20
 801d3c2:	46bd      	mov	sp, r7
 801d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3c8:	4770      	bx	lr
 801d3ca:	bf00      	nop
 801d3cc:	200009d0 	.word	0x200009d0

0801d3d0 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d3d0:	b480      	push	{r7}
 801d3d2:	b083      	sub	sp, #12
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	6078      	str	r0, [r7, #4]
 801d3d8:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d3da:	4b06      	ldr	r3, [pc, #24]	; (801d3f4 <TimerCountdownMS+0x24>)
 801d3dc:	681a      	ldr	r2, [r3, #0]
 801d3de:	683b      	ldr	r3, [r7, #0]
 801d3e0:	441a      	add	r2, r3
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	605a      	str	r2, [r3, #4]
}
 801d3e6:	bf00      	nop
 801d3e8:	370c      	adds	r7, #12
 801d3ea:	46bd      	mov	sp, r7
 801d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3f0:	4770      	bx	lr
 801d3f2:	bf00      	nop
 801d3f4:	200009d0 	.word	0x200009d0

0801d3f8 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d3f8:	b480      	push	{r7}
 801d3fa:	b083      	sub	sp, #12
 801d3fc:	af00      	add	r7, sp, #0
 801d3fe:	6078      	str	r0, [r7, #4]
 801d400:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d402:	683b      	ldr	r3, [r7, #0]
 801d404:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d408:	fb03 f202 	mul.w	r2, r3, r2
 801d40c:	4b05      	ldr	r3, [pc, #20]	; (801d424 <TimerCountdown+0x2c>)
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	441a      	add	r2, r3
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	605a      	str	r2, [r3, #4]
}
 801d416:	bf00      	nop
 801d418:	370c      	adds	r7, #12
 801d41a:	46bd      	mov	sp, r7
 801d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d420:	4770      	bx	lr
 801d422:	bf00      	nop
 801d424:	200009d0 	.word	0x200009d0

0801d428 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d428:	b480      	push	{r7}
 801d42a:	b085      	sub	sp, #20
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	685a      	ldr	r2, [r3, #4]
 801d434:	4b06      	ldr	r3, [pc, #24]	; (801d450 <TimerLeftMS+0x28>)
 801d436:	681b      	ldr	r3, [r3, #0]
 801d438:	1ad3      	subs	r3, r2, r3
 801d43a:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d442:	4618      	mov	r0, r3
 801d444:	3714      	adds	r7, #20
 801d446:	46bd      	mov	sp, r7
 801d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d44c:	4770      	bx	lr
 801d44e:	bf00      	nop
 801d450:	200009d0 	.word	0x200009d0

0801d454 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d454:	b480      	push	{r7}
 801d456:	b083      	sub	sp, #12
 801d458:	af00      	add	r7, sp, #0
 801d45a:	6078      	str	r0, [r7, #4]
 801d45c:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	683a      	ldr	r2, [r7, #0]
 801d462:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d464:	687b      	ldr	r3, [r7, #4]
 801d466:	4a07      	ldr	r2, [pc, #28]	; (801d484 <NewNetwork+0x30>)
 801d468:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	4a06      	ldr	r2, [pc, #24]	; (801d488 <NewNetwork+0x34>)
 801d46e:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	4a06      	ldr	r2, [pc, #24]	; (801d48c <NewNetwork+0x38>)
 801d474:	60da      	str	r2, [r3, #12]
}
 801d476:	bf00      	nop
 801d478:	370c      	adds	r7, #12
 801d47a:	46bd      	mov	sp, r7
 801d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d480:	4770      	bx	lr
 801d482:	bf00      	nop
 801d484:	0801d491 	.word	0x0801d491
 801d488:	0801d4eb 	.word	0x0801d4eb
 801d48c:	0801d533 	.word	0x0801d533

0801d490 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d490:	b580      	push	{r7, lr}
 801d492:	b084      	sub	sp, #16
 801d494:	af00      	add	r7, sp, #0
 801d496:	60f8      	str	r0, [r7, #12]
 801d498:	60b9      	str	r1, [r7, #8]
 801d49a:	607a      	str	r2, [r7, #4]
 801d49c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	681b      	ldr	r3, [r3, #0]
 801d4a2:	009b      	lsls	r3, r3, #2
 801d4a4:	3301      	adds	r3, #1
 801d4a6:	00db      	lsls	r3, r3, #3
 801d4a8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	f7fb f863 	bl	8018578 <WIZCHIP_READ>
 801d4b2:	4603      	mov	r3, r0
 801d4b4:	2b17      	cmp	r3, #23
 801d4b6:	d113      	bne.n	801d4e0 <w5x00_read+0x50>
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	681b      	ldr	r3, [r3, #0]
 801d4bc:	b2db      	uxtb	r3, r3
 801d4be:	4618      	mov	r0, r3
 801d4c0:	f7fb f9ff 	bl	80188c2 <getSn_RX_RSR>
 801d4c4:	4603      	mov	r3, r0
 801d4c6:	2b00      	cmp	r3, #0
 801d4c8:	d00a      	beq.n	801d4e0 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d4ca:	68fb      	ldr	r3, [r7, #12]
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	b2db      	uxtb	r3, r3
 801d4d0:	687a      	ldr	r2, [r7, #4]
 801d4d2:	b292      	uxth	r2, r2
 801d4d4:	68b9      	ldr	r1, [r7, #8]
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	f7fb ff66 	bl	80193a8 <recv>
 801d4dc:	4603      	mov	r3, r0
 801d4de:	e000      	b.n	801d4e2 <w5x00_read+0x52>

	return SOCK_ERROR;
 801d4e0:	2300      	movs	r3, #0
}
 801d4e2:	4618      	mov	r0, r3
 801d4e4:	3710      	adds	r7, #16
 801d4e6:	46bd      	mov	sp, r7
 801d4e8:	bd80      	pop	{r7, pc}

0801d4ea <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d4ea:	b580      	push	{r7, lr}
 801d4ec:	b084      	sub	sp, #16
 801d4ee:	af00      	add	r7, sp, #0
 801d4f0:	60f8      	str	r0, [r7, #12]
 801d4f2:	60b9      	str	r1, [r7, #8]
 801d4f4:	607a      	str	r2, [r7, #4]
 801d4f6:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	009b      	lsls	r3, r3, #2
 801d4fe:	3301      	adds	r3, #1
 801d500:	00db      	lsls	r3, r3, #3
 801d502:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d506:	4618      	mov	r0, r3
 801d508:	f7fb f836 	bl	8018578 <WIZCHIP_READ>
 801d50c:	4603      	mov	r3, r0
 801d50e:	2b17      	cmp	r3, #23
 801d510:	d10a      	bne.n	801d528 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	b2db      	uxtb	r3, r3
 801d518:	687a      	ldr	r2, [r7, #4]
 801d51a:	b292      	uxth	r2, r2
 801d51c:	68b9      	ldr	r1, [r7, #8]
 801d51e:	4618      	mov	r0, r3
 801d520:	f7fb fe48 	bl	80191b4 <send>
 801d524:	4603      	mov	r3, r0
 801d526:	e000      	b.n	801d52a <w5x00_write+0x40>

	return SOCK_ERROR;
 801d528:	2300      	movs	r3, #0
}
 801d52a:	4618      	mov	r0, r3
 801d52c:	3710      	adds	r7, #16
 801d52e:	46bd      	mov	sp, r7
 801d530:	bd80      	pop	{r7, pc}

0801d532 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d532:	b580      	push	{r7, lr}
 801d534:	b082      	sub	sp, #8
 801d536:	af00      	add	r7, sp, #0
 801d538:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d53a:	687b      	ldr	r3, [r7, #4]
 801d53c:	681b      	ldr	r3, [r3, #0]
 801d53e:	b2db      	uxtb	r3, r3
 801d540:	4618      	mov	r0, r3
 801d542:	f7fb fdc1 	bl	80190c8 <disconnect>
}
 801d546:	bf00      	nop
 801d548:	3708      	adds	r7, #8
 801d54a:	46bd      	mov	sp, r7
 801d54c:	bd80      	pop	{r7, pc}

0801d54e <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d54e:	b580      	push	{r7, lr}
 801d550:	b086      	sub	sp, #24
 801d552:	af00      	add	r7, sp, #0
 801d554:	60f8      	str	r0, [r7, #12]
 801d556:	60b9      	str	r1, [r7, #8]
 801d558:	4613      	mov	r3, r2
 801d55a:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d55c:	f243 0339 	movw	r3, #12345	; 0x3039
 801d560:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	b2d8      	uxtb	r0, r3
 801d568:	8afa      	ldrh	r2, [r7, #22]
 801d56a:	2300      	movs	r3, #0
 801d56c:	2101      	movs	r1, #1
 801d56e:	f7fb faf3 	bl	8018b58 <socket>
 801d572:	4603      	mov	r3, r0
 801d574:	461a      	mov	r2, r3
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	429a      	cmp	r2, r3
 801d57c:	d001      	beq.n	801d582 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d57e:	2300      	movs	r3, #0
 801d580:	e00d      	b.n	801d59e <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	b2db      	uxtb	r3, r3
 801d588:	88fa      	ldrh	r2, [r7, #6]
 801d58a:	68b9      	ldr	r1, [r7, #8]
 801d58c:	4618      	mov	r0, r3
 801d58e:	f7fb fcbf 	bl	8018f10 <connect>
 801d592:	4603      	mov	r3, r0
 801d594:	2b01      	cmp	r3, #1
 801d596:	d001      	beq.n	801d59c <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d598:	2300      	movs	r3, #0
 801d59a:	e000      	b.n	801d59e <ConnectNetwork+0x50>

	return SOCK_OK;
 801d59c:	2301      	movs	r3, #1
}
 801d59e:	4618      	mov	r0, r3
 801d5a0:	3718      	adds	r7, #24
 801d5a2:	46bd      	mov	sp, r7
 801d5a4:	bd80      	pop	{r7, pc}

0801d5a6 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d5a6:	b590      	push	{r4, r7, lr}
 801d5a8:	b085      	sub	sp, #20
 801d5aa:	af00      	add	r7, sp, #0
 801d5ac:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	7a1b      	ldrb	r3, [r3, #8]
 801d5b6:	2b03      	cmp	r3, #3
 801d5b8:	d102      	bne.n	801d5c0 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d5ba:	230c      	movs	r3, #12
 801d5bc:	60fb      	str	r3, [r7, #12]
 801d5be:	e005      	b.n	801d5cc <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	7a1b      	ldrb	r3, [r3, #8]
 801d5c4:	2b04      	cmp	r3, #4
 801d5c6:	d101      	bne.n	801d5cc <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d5c8:	230a      	movs	r3, #10
 801d5ca:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	330c      	adds	r3, #12
 801d5d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5d4:	f000 fc43 	bl	801de5e <MQTTstrlen>
 801d5d8:	4603      	mov	r3, r0
 801d5da:	3302      	adds	r3, #2
 801d5dc:	68fa      	ldr	r2, [r7, #12]
 801d5de:	4413      	add	r3, r2
 801d5e0:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d5e2:	687b      	ldr	r3, [r7, #4]
 801d5e4:	7edb      	ldrb	r3, [r3, #27]
 801d5e6:	2b00      	cmp	r3, #0
 801d5e8:	d013      	beq.n	801d612 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	3324      	adds	r3, #36	; 0x24
 801d5ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5f2:	f000 fc34 	bl	801de5e <MQTTstrlen>
 801d5f6:	4603      	mov	r3, r0
 801d5f8:	1c9c      	adds	r4, r3, #2
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	3330      	adds	r3, #48	; 0x30
 801d5fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d602:	f000 fc2c 	bl	801de5e <MQTTstrlen>
 801d606:	4603      	mov	r3, r0
 801d608:	4423      	add	r3, r4
 801d60a:	3302      	adds	r3, #2
 801d60c:	68fa      	ldr	r2, [r7, #12]
 801d60e:	4413      	add	r3, r2
 801d610:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d616:	2b00      	cmp	r3, #0
 801d618:	d103      	bne.n	801d622 <MQTTSerialize_connectLength+0x7c>
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d61e:	2b00      	cmp	r3, #0
 801d620:	d00a      	beq.n	801d638 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	3340      	adds	r3, #64	; 0x40
 801d626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d62a:	f000 fc18 	bl	801de5e <MQTTstrlen>
 801d62e:	4603      	mov	r3, r0
 801d630:	3302      	adds	r3, #2
 801d632:	68fa      	ldr	r2, [r7, #12]
 801d634:	4413      	add	r3, r2
 801d636:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801d638:	687b      	ldr	r3, [r7, #4]
 801d63a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	d103      	bne.n	801d648 <MQTTSerialize_connectLength+0xa2>
 801d640:	687b      	ldr	r3, [r7, #4]
 801d642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d644:	2b00      	cmp	r3, #0
 801d646:	d00a      	beq.n	801d65e <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801d648:	687b      	ldr	r3, [r7, #4]
 801d64a:	334c      	adds	r3, #76	; 0x4c
 801d64c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d650:	f000 fc05 	bl	801de5e <MQTTstrlen>
 801d654:	4603      	mov	r3, r0
 801d656:	3302      	adds	r3, #2
 801d658:	68fa      	ldr	r2, [r7, #12]
 801d65a:	4413      	add	r3, r2
 801d65c:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801d65e:	68fb      	ldr	r3, [r7, #12]
}
 801d660:	4618      	mov	r0, r3
 801d662:	3714      	adds	r7, #20
 801d664:	46bd      	mov	sp, r7
 801d666:	bd90      	pop	{r4, r7, pc}

0801d668 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801d668:	b580      	push	{r7, lr}
 801d66a:	b08a      	sub	sp, #40	; 0x28
 801d66c:	af00      	add	r7, sp, #0
 801d66e:	60f8      	str	r0, [r7, #12]
 801d670:	60b9      	str	r1, [r7, #8]
 801d672:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801d678:	2300      	movs	r3, #0
 801d67a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801d67c:	2300      	movs	r3, #0
 801d67e:	617b      	str	r3, [r7, #20]
	int len = 0;
 801d680:	2300      	movs	r3, #0
 801d682:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801d684:	f04f 33ff 	mov.w	r3, #4294967295
 801d688:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801d68a:	6878      	ldr	r0, [r7, #4]
 801d68c:	f7ff ff8b 	bl	801d5a6 <MQTTSerialize_connectLength>
 801d690:	6238      	str	r0, [r7, #32]
 801d692:	6a38      	ldr	r0, [r7, #32]
 801d694:	f000 fa98 	bl	801dbc8 <MQTTPacket_len>
 801d698:	4602      	mov	r2, r0
 801d69a:	68bb      	ldr	r3, [r7, #8]
 801d69c:	4293      	cmp	r3, r2
 801d69e:	da03      	bge.n	801d6a8 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d6a0:	f06f 0301 	mvn.w	r3, #1
 801d6a4:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801d6a6:	e0c2      	b.n	801d82e <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801d6a8:	2300      	movs	r3, #0
 801d6aa:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801d6ac:	7e3b      	ldrb	r3, [r7, #24]
 801d6ae:	2201      	movs	r2, #1
 801d6b0:	f362 1307 	bfi	r3, r2, #4, #4
 801d6b4:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d6b6:	7e3a      	ldrb	r2, [r7, #24]
 801d6b8:	f107 031c 	add.w	r3, r7, #28
 801d6bc:	4611      	mov	r1, r2
 801d6be:	4618      	mov	r0, r3
 801d6c0:	f000 fb11 	bl	801dce6 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801d6c4:	69fb      	ldr	r3, [r7, #28]
 801d6c6:	6a39      	ldr	r1, [r7, #32]
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	f000 fa12 	bl	801daf2 <MQTTPacket_encode>
 801d6ce:	4602      	mov	r2, r0
 801d6d0:	69fb      	ldr	r3, [r7, #28]
 801d6d2:	4413      	add	r3, r2
 801d6d4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	7a1b      	ldrb	r3, [r3, #8]
 801d6da:	2b04      	cmp	r3, #4
 801d6dc:	d10c      	bne.n	801d6f8 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801d6de:	f107 031c 	add.w	r3, r7, #28
 801d6e2:	4955      	ldr	r1, [pc, #340]	; (801d838 <MQTTSerialize_connect+0x1d0>)
 801d6e4:	4618      	mov	r0, r3
 801d6e6:	f000 fb3c 	bl	801dd62 <writeCString>
		writeChar(&ptr, (char) 4);
 801d6ea:	f107 031c 	add.w	r3, r7, #28
 801d6ee:	2104      	movs	r1, #4
 801d6f0:	4618      	mov	r0, r3
 801d6f2:	f000 faf8 	bl	801dce6 <writeChar>
 801d6f6:	e00b      	b.n	801d710 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801d6f8:	f107 031c 	add.w	r3, r7, #28
 801d6fc:	494f      	ldr	r1, [pc, #316]	; (801d83c <MQTTSerialize_connect+0x1d4>)
 801d6fe:	4618      	mov	r0, r3
 801d700:	f000 fb2f 	bl	801dd62 <writeCString>
		writeChar(&ptr, (char) 3);
 801d704:	f107 031c 	add.w	r3, r7, #28
 801d708:	2103      	movs	r1, #3
 801d70a:	4618      	mov	r0, r3
 801d70c:	f000 faeb 	bl	801dce6 <writeChar>
	}

	flags.all = 0;
 801d710:	2300      	movs	r3, #0
 801d712:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801d714:	687b      	ldr	r3, [r7, #4]
 801d716:	7e9b      	ldrb	r3, [r3, #26]
 801d718:	f003 0301 	and.w	r3, r3, #1
 801d71c:	b2da      	uxtb	r2, r3
 801d71e:	7d3b      	ldrb	r3, [r7, #20]
 801d720:	f362 0341 	bfi	r3, r2, #1, #1
 801d724:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	7edb      	ldrb	r3, [r3, #27]
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	bf14      	ite	ne
 801d72e:	2301      	movne	r3, #1
 801d730:	2300      	moveq	r3, #0
 801d732:	b2da      	uxtb	r2, r3
 801d734:	7d3b      	ldrb	r3, [r7, #20]
 801d736:	f362 0382 	bfi	r3, r2, #2, #1
 801d73a:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801d73c:	7d3b      	ldrb	r3, [r7, #20]
 801d73e:	f003 0304 	and.w	r3, r3, #4
 801d742:	b2db      	uxtb	r3, r3
 801d744:	2b00      	cmp	r3, #0
 801d746:	d013      	beq.n	801d770 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801d74e:	f003 0303 	and.w	r3, r3, #3
 801d752:	b2da      	uxtb	r2, r3
 801d754:	7d3b      	ldrb	r3, [r7, #20]
 801d756:	f362 03c4 	bfi	r3, r2, #3, #2
 801d75a:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801d75c:	687b      	ldr	r3, [r7, #4]
 801d75e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d762:	f003 0301 	and.w	r3, r3, #1
 801d766:	b2da      	uxtb	r2, r3
 801d768:	7d3b      	ldrb	r3, [r7, #20]
 801d76a:	f362 1345 	bfi	r3, r2, #5, #1
 801d76e:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d774:	2b00      	cmp	r3, #0
 801d776:	d103      	bne.n	801d780 <MQTTSerialize_connect+0x118>
 801d778:	687b      	ldr	r3, [r7, #4]
 801d77a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d77c:	2b00      	cmp	r3, #0
 801d77e:	d003      	beq.n	801d788 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801d780:	7d3b      	ldrb	r3, [r7, #20]
 801d782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d786:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d78c:	2b00      	cmp	r3, #0
 801d78e:	d103      	bne.n	801d798 <MQTTSerialize_connect+0x130>
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d794:	2b00      	cmp	r3, #0
 801d796:	d003      	beq.n	801d7a0 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801d798:	7d3b      	ldrb	r3, [r7, #20]
 801d79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d79e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801d7a0:	7d3a      	ldrb	r2, [r7, #20]
 801d7a2:	f107 031c 	add.w	r3, r7, #28
 801d7a6:	4611      	mov	r1, r2
 801d7a8:	4618      	mov	r0, r3
 801d7aa:	f000 fa9c 	bl	801dce6 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	8b1b      	ldrh	r3, [r3, #24]
 801d7b2:	461a      	mov	r2, r3
 801d7b4:	f107 031c 	add.w	r3, r7, #28
 801d7b8:	4611      	mov	r1, r2
 801d7ba:	4618      	mov	r0, r3
 801d7bc:	f000 faa8 	bl	801dd10 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	f107 001c 	add.w	r0, r7, #28
 801d7c6:	330c      	adds	r3, #12
 801d7c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d7ca:	f000 fae9 	bl	801dda0 <writeMQTTString>
	if (options->willFlag)
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	7edb      	ldrb	r3, [r3, #27]
 801d7d2:	2b00      	cmp	r3, #0
 801d7d4:	d00d      	beq.n	801d7f2 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801d7d6:	687b      	ldr	r3, [r7, #4]
 801d7d8:	f107 001c 	add.w	r0, r7, #28
 801d7dc:	3324      	adds	r3, #36	; 0x24
 801d7de:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d7e0:	f000 fade 	bl	801dda0 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	f107 001c 	add.w	r0, r7, #28
 801d7ea:	3330      	adds	r3, #48	; 0x30
 801d7ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d7ee:	f000 fad7 	bl	801dda0 <writeMQTTString>
	}
	if (flags.bits.username)
 801d7f2:	7d3b      	ldrb	r3, [r7, #20]
 801d7f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801d7f8:	b2db      	uxtb	r3, r3
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d006      	beq.n	801d80c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801d7fe:	687b      	ldr	r3, [r7, #4]
 801d800:	f107 001c 	add.w	r0, r7, #28
 801d804:	3340      	adds	r3, #64	; 0x40
 801d806:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d808:	f000 faca 	bl	801dda0 <writeMQTTString>
	if (flags.bits.password)
 801d80c:	7d3b      	ldrb	r3, [r7, #20]
 801d80e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d812:	b2db      	uxtb	r3, r3
 801d814:	2b00      	cmp	r3, #0
 801d816:	d006      	beq.n	801d826 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	f107 001c 	add.w	r0, r7, #28
 801d81e:	334c      	adds	r3, #76	; 0x4c
 801d820:	cb0e      	ldmia	r3, {r1, r2, r3}
 801d822:	f000 fabd 	bl	801dda0 <writeMQTTString>

	rc = ptr - buf;
 801d826:	69fa      	ldr	r2, [r7, #28]
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	1ad3      	subs	r3, r2, r3
 801d82c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d830:	4618      	mov	r0, r3
 801d832:	3728      	adds	r7, #40	; 0x28
 801d834:	46bd      	mov	sp, r7
 801d836:	bd80      	pop	{r7, pc}
 801d838:	08032b58 	.word	0x08032b58
 801d83c:	08032b60 	.word	0x08032b60

0801d840 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b08a      	sub	sp, #40	; 0x28
 801d844:	af00      	add	r7, sp, #0
 801d846:	60f8      	str	r0, [r7, #12]
 801d848:	60b9      	str	r1, [r7, #8]
 801d84a:	607a      	str	r2, [r7, #4]
 801d84c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d84e:	2300      	movs	r3, #0
 801d850:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d852:	687b      	ldr	r3, [r7, #4]
 801d854:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d856:	2300      	movs	r3, #0
 801d858:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d85a:	2300      	movs	r3, #0
 801d85c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801d85e:	2300      	movs	r3, #0
 801d860:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d862:	f107 0318 	add.w	r3, r7, #24
 801d866:	4618      	mov	r0, r3
 801d868:	f000 fa29 	bl	801dcbe <readChar>
 801d86c:	4603      	mov	r3, r0
 801d86e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801d870:	7f3b      	ldrb	r3, [r7, #28]
 801d872:	f023 030f 	bic.w	r3, r3, #15
 801d876:	b2db      	uxtb	r3, r3
 801d878:	2b20      	cmp	r3, #32
 801d87a:	d12e      	bne.n	801d8da <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d87c:	69bb      	ldr	r3, [r7, #24]
 801d87e:	f107 0214 	add.w	r2, r7, #20
 801d882:	4611      	mov	r1, r2
 801d884:	4618      	mov	r0, r3
 801d886:	f000 f9e9 	bl	801dc5c <MQTTPacket_decodeBuf>
 801d88a:	6278      	str	r0, [r7, #36]	; 0x24
 801d88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d88e:	69bb      	ldr	r3, [r7, #24]
 801d890:	4413      	add	r3, r2
 801d892:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d894:	69bb      	ldr	r3, [r7, #24]
 801d896:	697a      	ldr	r2, [r7, #20]
 801d898:	4413      	add	r3, r2
 801d89a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801d89c:	69bb      	ldr	r3, [r7, #24]
 801d89e:	6a3a      	ldr	r2, [r7, #32]
 801d8a0:	1ad3      	subs	r3, r2, r3
 801d8a2:	2b01      	cmp	r3, #1
 801d8a4:	dd1b      	ble.n	801d8de <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801d8a6:	f107 0318 	add.w	r3, r7, #24
 801d8aa:	4618      	mov	r0, r3
 801d8ac:	f000 fa07 	bl	801dcbe <readChar>
 801d8b0:	4603      	mov	r3, r0
 801d8b2:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801d8b4:	7c3b      	ldrb	r3, [r7, #16]
 801d8b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801d8ba:	b2db      	uxtb	r3, r3
 801d8bc:	461a      	mov	r2, r3
 801d8be:	68fb      	ldr	r3, [r7, #12]
 801d8c0:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801d8c2:	f107 0318 	add.w	r3, r7, #24
 801d8c6:	4618      	mov	r0, r3
 801d8c8:	f000 f9f9 	bl	801dcbe <readChar>
 801d8cc:	4603      	mov	r3, r0
 801d8ce:	461a      	mov	r2, r3
 801d8d0:	68bb      	ldr	r3, [r7, #8]
 801d8d2:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801d8d4:	2301      	movs	r3, #1
 801d8d6:	627b      	str	r3, [r7, #36]	; 0x24
 801d8d8:	e002      	b.n	801d8e0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d8da:	bf00      	nop
 801d8dc:	e000      	b.n	801d8e0 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801d8de:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	3728      	adds	r7, #40	; 0x28
 801d8e6:	46bd      	mov	sp, r7
 801d8e8:	bd80      	pop	{r7, pc}

0801d8ea <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801d8ea:	b580      	push	{r7, lr}
 801d8ec:	b088      	sub	sp, #32
 801d8ee:	af00      	add	r7, sp, #0
 801d8f0:	60f8      	str	r0, [r7, #12]
 801d8f2:	60b9      	str	r1, [r7, #8]
 801d8f4:	4613      	mov	r3, r2
 801d8f6:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801d8f8:	2300      	movs	r3, #0
 801d8fa:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801d8fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d900:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801d906:	68bb      	ldr	r3, [r7, #8]
 801d908:	2b01      	cmp	r3, #1
 801d90a:	dc03      	bgt.n	801d914 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801d90c:	f06f 0301 	mvn.w	r3, #1
 801d910:	61fb      	str	r3, [r7, #28]
		goto exit;
 801d912:	e01d      	b.n	801d950 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801d914:	2300      	movs	r3, #0
 801d916:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801d918:	79fb      	ldrb	r3, [r7, #7]
 801d91a:	f003 030f 	and.w	r3, r3, #15
 801d91e:	b2da      	uxtb	r2, r3
 801d920:	7e3b      	ldrb	r3, [r7, #24]
 801d922:	f362 1307 	bfi	r3, r2, #4, #4
 801d926:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801d928:	7e3a      	ldrb	r2, [r7, #24]
 801d92a:	f107 0314 	add.w	r3, r7, #20
 801d92e:	4611      	mov	r1, r2
 801d930:	4618      	mov	r0, r3
 801d932:	f000 f9d8 	bl	801dce6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801d936:	697b      	ldr	r3, [r7, #20]
 801d938:	2100      	movs	r1, #0
 801d93a:	4618      	mov	r0, r3
 801d93c:	f000 f8d9 	bl	801daf2 <MQTTPacket_encode>
 801d940:	4602      	mov	r2, r0
 801d942:	697b      	ldr	r3, [r7, #20]
 801d944:	4413      	add	r3, r2
 801d946:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801d948:	697a      	ldr	r2, [r7, #20]
 801d94a:	68fb      	ldr	r3, [r7, #12]
 801d94c:	1ad3      	subs	r3, r2, r3
 801d94e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801d950:	69fb      	ldr	r3, [r7, #28]
}
 801d952:	4618      	mov	r0, r3
 801d954:	3720      	adds	r7, #32
 801d956:	46bd      	mov	sp, r7
 801d958:	bd80      	pop	{r7, pc}

0801d95a <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801d95a:	b580      	push	{r7, lr}
 801d95c:	b082      	sub	sp, #8
 801d95e:	af00      	add	r7, sp, #0
 801d960:	6078      	str	r0, [r7, #4]
 801d962:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801d964:	220c      	movs	r2, #12
 801d966:	6839      	ldr	r1, [r7, #0]
 801d968:	6878      	ldr	r0, [r7, #4]
 801d96a:	f7ff ffbe 	bl	801d8ea <MQTTSerialize_zero>
 801d96e:	4603      	mov	r3, r0
}
 801d970:	4618      	mov	r0, r3
 801d972:	3708      	adds	r7, #8
 801d974:	46bd      	mov	sp, r7
 801d976:	bd80      	pop	{r7, pc}

0801d978 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801d978:	b580      	push	{r7, lr}
 801d97a:	b08a      	sub	sp, #40	; 0x28
 801d97c:	af00      	add	r7, sp, #0
 801d97e:	60f8      	str	r0, [r7, #12]
 801d980:	60b9      	str	r1, [r7, #8]
 801d982:	607a      	str	r2, [r7, #4]
 801d984:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801d986:	2300      	movs	r3, #0
 801d988:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801d98a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d98c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801d98e:	2300      	movs	r3, #0
 801d990:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801d992:	2300      	movs	r3, #0
 801d994:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801d996:	2300      	movs	r3, #0
 801d998:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801d99a:	f107 0318 	add.w	r3, r7, #24
 801d99e:	4618      	mov	r0, r3
 801d9a0:	f000 f98d 	bl	801dcbe <readChar>
 801d9a4:	4603      	mov	r3, r0
 801d9a6:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801d9a8:	7f3b      	ldrb	r3, [r7, #28]
 801d9aa:	f023 030f 	bic.w	r3, r3, #15
 801d9ae:	b2db      	uxtb	r3, r3
 801d9b0:	2b30      	cmp	r3, #48	; 0x30
 801d9b2:	d14b      	bne.n	801da4c <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801d9b4:	7f3b      	ldrb	r3, [r7, #28]
 801d9b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801d9ba:	b2db      	uxtb	r3, r3
 801d9bc:	461a      	mov	r2, r3
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801d9c2:	7f3b      	ldrb	r3, [r7, #28]
 801d9c4:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801d9c8:	b2db      	uxtb	r3, r3
 801d9ca:	461a      	mov	r2, r3
 801d9cc:	68bb      	ldr	r3, [r7, #8]
 801d9ce:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801d9d0:	7f3b      	ldrb	r3, [r7, #28]
 801d9d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801d9d6:	b2db      	uxtb	r3, r3
 801d9d8:	461a      	mov	r2, r3
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801d9de:	69bb      	ldr	r3, [r7, #24]
 801d9e0:	f107 0214 	add.w	r2, r7, #20
 801d9e4:	4611      	mov	r1, r2
 801d9e6:	4618      	mov	r0, r3
 801d9e8:	f000 f938 	bl	801dc5c <MQTTPacket_decodeBuf>
 801d9ec:	6278      	str	r0, [r7, #36]	; 0x24
 801d9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d9f0:	69bb      	ldr	r3, [r7, #24]
 801d9f2:	4413      	add	r3, r2
 801d9f4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801d9f6:	69bb      	ldr	r3, [r7, #24]
 801d9f8:	697a      	ldr	r2, [r7, #20]
 801d9fa:	4413      	add	r3, r2
 801d9fc:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801d9fe:	f107 0318 	add.w	r3, r7, #24
 801da02:	6a3a      	ldr	r2, [r7, #32]
 801da04:	4619      	mov	r1, r3
 801da06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801da08:	f000 f9f8 	bl	801ddfc <readMQTTLenString>
 801da0c:	4603      	mov	r3, r0
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d01e      	beq.n	801da50 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801da12:	69bb      	ldr	r3, [r7, #24]
 801da14:	6a3a      	ldr	r2, [r7, #32]
 801da16:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801da18:	2b00      	cmp	r3, #0
 801da1a:	db19      	blt.n	801da50 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801da1c:	68bb      	ldr	r3, [r7, #8]
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	2b00      	cmp	r3, #0
 801da22:	dd08      	ble.n	801da36 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801da24:	f107 0318 	add.w	r3, r7, #24
 801da28:	4618      	mov	r0, r3
 801da2a:	f000 f92d 	bl	801dc88 <readInt>
 801da2e:	4603      	mov	r3, r0
 801da30:	b29a      	uxth	r2, r3
 801da32:	683b      	ldr	r3, [r7, #0]
 801da34:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801da36:	69bb      	ldr	r3, [r7, #24]
 801da38:	6a3a      	ldr	r2, [r7, #32]
 801da3a:	1ad2      	subs	r2, r2, r3
 801da3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da3e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801da40:	69ba      	ldr	r2, [r7, #24]
 801da42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801da44:	601a      	str	r2, [r3, #0]
	rc = 1;
 801da46:	2301      	movs	r3, #1
 801da48:	627b      	str	r3, [r7, #36]	; 0x24
 801da4a:	e002      	b.n	801da52 <MQTTDeserialize_publish+0xda>
		goto exit;
 801da4c:	bf00      	nop
 801da4e:	e000      	b.n	801da52 <MQTTDeserialize_publish+0xda>
		goto exit;
 801da50:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801da52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801da54:	4618      	mov	r0, r3
 801da56:	3728      	adds	r7, #40	; 0x28
 801da58:	46bd      	mov	sp, r7
 801da5a:	bd80      	pop	{r7, pc}

0801da5c <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801da5c:	b580      	push	{r7, lr}
 801da5e:	b08a      	sub	sp, #40	; 0x28
 801da60:	af00      	add	r7, sp, #0
 801da62:	60f8      	str	r0, [r7, #12]
 801da64:	60b9      	str	r1, [r7, #8]
 801da66:	607a      	str	r2, [r7, #4]
 801da68:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801da6a:	2300      	movs	r3, #0
 801da6c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801da6e:	683b      	ldr	r3, [r7, #0]
 801da70:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801da72:	2300      	movs	r3, #0
 801da74:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801da76:	2300      	movs	r3, #0
 801da78:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801da7a:	f107 0318 	add.w	r3, r7, #24
 801da7e:	4618      	mov	r0, r3
 801da80:	f000 f91d 	bl	801dcbe <readChar>
 801da84:	4603      	mov	r3, r0
 801da86:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801da88:	7f3b      	ldrb	r3, [r7, #28]
 801da8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801da8e:	b2db      	uxtb	r3, r3
 801da90:	461a      	mov	r2, r3
 801da92:	68bb      	ldr	r3, [r7, #8]
 801da94:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801da96:	7f3b      	ldrb	r3, [r7, #28]
 801da98:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801da9c:	b2db      	uxtb	r3, r3
 801da9e:	461a      	mov	r2, r3
 801daa0:	68fb      	ldr	r3, [r7, #12]
 801daa2:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801daa4:	69bb      	ldr	r3, [r7, #24]
 801daa6:	f107 0214 	add.w	r2, r7, #20
 801daaa:	4611      	mov	r1, r2
 801daac:	4618      	mov	r0, r3
 801daae:	f000 f8d5 	bl	801dc5c <MQTTPacket_decodeBuf>
 801dab2:	6278      	str	r0, [r7, #36]	; 0x24
 801dab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dab6:	69bb      	ldr	r3, [r7, #24]
 801dab8:	4413      	add	r3, r2
 801daba:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dabc:	69bb      	ldr	r3, [r7, #24]
 801dabe:	697a      	ldr	r2, [r7, #20]
 801dac0:	4413      	add	r3, r2
 801dac2:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801dac4:	69bb      	ldr	r3, [r7, #24]
 801dac6:	6a3a      	ldr	r2, [r7, #32]
 801dac8:	1ad3      	subs	r3, r2, r3
 801daca:	2b01      	cmp	r3, #1
 801dacc:	dd0b      	ble.n	801dae6 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801dace:	f107 0318 	add.w	r3, r7, #24
 801dad2:	4618      	mov	r0, r3
 801dad4:	f000 f8d8 	bl	801dc88 <readInt>
 801dad8:	4603      	mov	r3, r0
 801dada:	b29a      	uxth	r2, r3
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801dae0:	2301      	movs	r3, #1
 801dae2:	627b      	str	r3, [r7, #36]	; 0x24
 801dae4:	e000      	b.n	801dae8 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801dae6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801daea:	4618      	mov	r0, r3
 801daec:	3728      	adds	r7, #40	; 0x28
 801daee:	46bd      	mov	sp, r7
 801daf0:	bd80      	pop	{r7, pc}

0801daf2 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801daf2:	b480      	push	{r7}
 801daf4:	b085      	sub	sp, #20
 801daf6:	af00      	add	r7, sp, #0
 801daf8:	6078      	str	r0, [r7, #4]
 801dafa:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801dafc:	2300      	movs	r3, #0
 801dafe:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	425a      	negs	r2, r3
 801db04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801db0c:	bf58      	it	pl
 801db0e:	4253      	negpl	r3, r2
 801db10:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801db12:	683b      	ldr	r3, [r7, #0]
 801db14:	2b00      	cmp	r3, #0
 801db16:	da00      	bge.n	801db1a <MQTTPacket_encode+0x28>
 801db18:	337f      	adds	r3, #127	; 0x7f
 801db1a:	11db      	asrs	r3, r3, #7
 801db1c:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801db1e:	683b      	ldr	r3, [r7, #0]
 801db20:	2b00      	cmp	r3, #0
 801db22:	dd03      	ble.n	801db2c <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801db24:	7afb      	ldrb	r3, [r7, #11]
 801db26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801db2a:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	1c5a      	adds	r2, r3, #1
 801db30:	60fa      	str	r2, [r7, #12]
 801db32:	461a      	mov	r2, r3
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	4413      	add	r3, r2
 801db38:	7afa      	ldrb	r2, [r7, #11]
 801db3a:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801db3c:	683b      	ldr	r3, [r7, #0]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	dcde      	bgt.n	801db00 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801db42:	68fb      	ldr	r3, [r7, #12]
}
 801db44:	4618      	mov	r0, r3
 801db46:	3714      	adds	r7, #20
 801db48:	46bd      	mov	sp, r7
 801db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db4e:	4770      	bx	lr

0801db50 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801db50:	b580      	push	{r7, lr}
 801db52:	b086      	sub	sp, #24
 801db54:	af00      	add	r7, sp, #0
 801db56:	6078      	str	r0, [r7, #4]
 801db58:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801db5a:	2301      	movs	r3, #1
 801db5c:	617b      	str	r3, [r7, #20]
	int len = 0;
 801db5e:	2300      	movs	r3, #0
 801db60:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801db62:	683b      	ldr	r3, [r7, #0]
 801db64:	2200      	movs	r2, #0
 801db66:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801db68:	f04f 33ff 	mov.w	r3, #4294967295
 801db6c:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801db6e:	693b      	ldr	r3, [r7, #16]
 801db70:	3301      	adds	r3, #1
 801db72:	613b      	str	r3, [r7, #16]
 801db74:	693b      	ldr	r3, [r7, #16]
 801db76:	2b04      	cmp	r3, #4
 801db78:	dd03      	ble.n	801db82 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801db7a:	f04f 33ff 	mov.w	r3, #4294967295
 801db7e:	60fb      	str	r3, [r7, #12]
			goto exit;
 801db80:	e01d      	b.n	801dbbe <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801db82:	f107 020b 	add.w	r2, r7, #11
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	2101      	movs	r1, #1
 801db8a:	4610      	mov	r0, r2
 801db8c:	4798      	blx	r3
 801db8e:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	2b01      	cmp	r3, #1
 801db94:	d112      	bne.n	801dbbc <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801db96:	683b      	ldr	r3, [r7, #0]
 801db98:	681a      	ldr	r2, [r3, #0]
 801db9a:	7afb      	ldrb	r3, [r7, #11]
 801db9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dba0:	6979      	ldr	r1, [r7, #20]
 801dba2:	fb01 f303 	mul.w	r3, r1, r3
 801dba6:	441a      	add	r2, r3
 801dba8:	683b      	ldr	r3, [r7, #0]
 801dbaa:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801dbac:	697b      	ldr	r3, [r7, #20]
 801dbae:	01db      	lsls	r3, r3, #7
 801dbb0:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801dbb2:	7afb      	ldrb	r3, [r7, #11]
 801dbb4:	b25b      	sxtb	r3, r3
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	dbd6      	blt.n	801db68 <MQTTPacket_decode+0x18>
exit:
 801dbba:	e000      	b.n	801dbbe <MQTTPacket_decode+0x6e>
			goto exit;
 801dbbc:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801dbbe:	693b      	ldr	r3, [r7, #16]
}
 801dbc0:	4618      	mov	r0, r3
 801dbc2:	3718      	adds	r7, #24
 801dbc4:	46bd      	mov	sp, r7
 801dbc6:	bd80      	pop	{r7, pc}

0801dbc8 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801dbc8:	b480      	push	{r7}
 801dbca:	b083      	sub	sp, #12
 801dbcc:	af00      	add	r7, sp, #0
 801dbce:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801dbd0:	687b      	ldr	r3, [r7, #4]
 801dbd2:	3301      	adds	r3, #1
 801dbd4:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	2b7f      	cmp	r3, #127	; 0x7f
 801dbda:	dc03      	bgt.n	801dbe4 <MQTTPacket_len+0x1c>
		rem_len += 1;
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	3301      	adds	r3, #1
 801dbe0:	607b      	str	r3, [r7, #4]
 801dbe2:	e012      	b.n	801dc0a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801dbea:	da03      	bge.n	801dbf4 <MQTTPacket_len+0x2c>
		rem_len += 2;
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	3302      	adds	r3, #2
 801dbf0:	607b      	str	r3, [r7, #4]
 801dbf2:	e00a      	b.n	801dc0a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801dbf4:	687b      	ldr	r3, [r7, #4]
 801dbf6:	4a08      	ldr	r2, [pc, #32]	; (801dc18 <MQTTPacket_len+0x50>)
 801dbf8:	4293      	cmp	r3, r2
 801dbfa:	dc03      	bgt.n	801dc04 <MQTTPacket_len+0x3c>
		rem_len += 3;
 801dbfc:	687b      	ldr	r3, [r7, #4]
 801dbfe:	3303      	adds	r3, #3
 801dc00:	607b      	str	r3, [r7, #4]
 801dc02:	e002      	b.n	801dc0a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801dc04:	687b      	ldr	r3, [r7, #4]
 801dc06:	3304      	adds	r3, #4
 801dc08:	607b      	str	r3, [r7, #4]
	return rem_len;
 801dc0a:	687b      	ldr	r3, [r7, #4]
}
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	370c      	adds	r7, #12
 801dc10:	46bd      	mov	sp, r7
 801dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc16:	4770      	bx	lr
 801dc18:	001ffffe 	.word	0x001ffffe

0801dc1c <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801dc1c:	b480      	push	{r7}
 801dc1e:	b085      	sub	sp, #20
 801dc20:	af00      	add	r7, sp, #0
 801dc22:	6078      	str	r0, [r7, #4]
 801dc24:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801dc26:	2300      	movs	r3, #0
 801dc28:	60fb      	str	r3, [r7, #12]
 801dc2a:	e00a      	b.n	801dc42 <bufchar+0x26>
		*c = *bufptr++;
 801dc2c:	4b0a      	ldr	r3, [pc, #40]	; (801dc58 <bufchar+0x3c>)
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	1c5a      	adds	r2, r3, #1
 801dc32:	4909      	ldr	r1, [pc, #36]	; (801dc58 <bufchar+0x3c>)
 801dc34:	600a      	str	r2, [r1, #0]
 801dc36:	781a      	ldrb	r2, [r3, #0]
 801dc38:	687b      	ldr	r3, [r7, #4]
 801dc3a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	3301      	adds	r3, #1
 801dc40:	60fb      	str	r3, [r7, #12]
 801dc42:	68fa      	ldr	r2, [r7, #12]
 801dc44:	683b      	ldr	r3, [r7, #0]
 801dc46:	429a      	cmp	r2, r3
 801dc48:	dbf0      	blt.n	801dc2c <bufchar+0x10>
	return count;
 801dc4a:	683b      	ldr	r3, [r7, #0]
}
 801dc4c:	4618      	mov	r0, r3
 801dc4e:	3714      	adds	r7, #20
 801dc50:	46bd      	mov	sp, r7
 801dc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc56:	4770      	bx	lr
 801dc58:	200009d4 	.word	0x200009d4

0801dc5c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801dc5c:	b580      	push	{r7, lr}
 801dc5e:	b082      	sub	sp, #8
 801dc60:	af00      	add	r7, sp, #0
 801dc62:	6078      	str	r0, [r7, #4]
 801dc64:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801dc66:	4a06      	ldr	r2, [pc, #24]	; (801dc80 <MQTTPacket_decodeBuf+0x24>)
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801dc6c:	6839      	ldr	r1, [r7, #0]
 801dc6e:	4805      	ldr	r0, [pc, #20]	; (801dc84 <MQTTPacket_decodeBuf+0x28>)
 801dc70:	f7ff ff6e 	bl	801db50 <MQTTPacket_decode>
 801dc74:	4603      	mov	r3, r0
}
 801dc76:	4618      	mov	r0, r3
 801dc78:	3708      	adds	r7, #8
 801dc7a:	46bd      	mov	sp, r7
 801dc7c:	bd80      	pop	{r7, pc}
 801dc7e:	bf00      	nop
 801dc80:	200009d4 	.word	0x200009d4
 801dc84:	0801dc1d 	.word	0x0801dc1d

0801dc88 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801dc88:	b480      	push	{r7}
 801dc8a:	b085      	sub	sp, #20
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	681b      	ldr	r3, [r3, #0]
 801dc94:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801dc96:	68fb      	ldr	r3, [r7, #12]
 801dc98:	781b      	ldrb	r3, [r3, #0]
 801dc9a:	021b      	lsls	r3, r3, #8
 801dc9c:	68fa      	ldr	r2, [r7, #12]
 801dc9e:	3201      	adds	r2, #1
 801dca0:	7812      	ldrb	r2, [r2, #0]
 801dca2:	4413      	add	r3, r2
 801dca4:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801dca6:	687b      	ldr	r3, [r7, #4]
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	1c9a      	adds	r2, r3, #2
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	601a      	str	r2, [r3, #0]
	return len;
 801dcb0:	68bb      	ldr	r3, [r7, #8]
}
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	3714      	adds	r7, #20
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcbc:	4770      	bx	lr

0801dcbe <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801dcbe:	b480      	push	{r7}
 801dcc0:	b085      	sub	sp, #20
 801dcc2:	af00      	add	r7, sp, #0
 801dcc4:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801dcc6:	687b      	ldr	r3, [r7, #4]
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	781b      	ldrb	r3, [r3, #0]
 801dccc:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801dcce:	687b      	ldr	r3, [r7, #4]
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	1c5a      	adds	r2, r3, #1
 801dcd4:	687b      	ldr	r3, [r7, #4]
 801dcd6:	601a      	str	r2, [r3, #0]
	return c;
 801dcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 801dcda:	4618      	mov	r0, r3
 801dcdc:	3714      	adds	r7, #20
 801dcde:	46bd      	mov	sp, r7
 801dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dce4:	4770      	bx	lr

0801dce6 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801dce6:	b480      	push	{r7}
 801dce8:	b083      	sub	sp, #12
 801dcea:	af00      	add	r7, sp, #0
 801dcec:	6078      	str	r0, [r7, #4]
 801dcee:	460b      	mov	r3, r1
 801dcf0:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801dcf2:	687b      	ldr	r3, [r7, #4]
 801dcf4:	681b      	ldr	r3, [r3, #0]
 801dcf6:	78fa      	ldrb	r2, [r7, #3]
 801dcf8:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	1c5a      	adds	r2, r3, #1
 801dd00:	687b      	ldr	r3, [r7, #4]
 801dd02:	601a      	str	r2, [r3, #0]
}
 801dd04:	bf00      	nop
 801dd06:	370c      	adds	r7, #12
 801dd08:	46bd      	mov	sp, r7
 801dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd0e:	4770      	bx	lr

0801dd10 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801dd10:	b480      	push	{r7}
 801dd12:	b083      	sub	sp, #12
 801dd14:	af00      	add	r7, sp, #0
 801dd16:	6078      	str	r0, [r7, #4]
 801dd18:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801dd1a:	683b      	ldr	r3, [r7, #0]
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	da00      	bge.n	801dd22 <writeInt+0x12>
 801dd20:	33ff      	adds	r3, #255	; 0xff
 801dd22:	121b      	asrs	r3, r3, #8
 801dd24:	461a      	mov	r2, r3
 801dd26:	687b      	ldr	r3, [r7, #4]
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	b2d2      	uxtb	r2, r2
 801dd2c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801dd2e:	687b      	ldr	r3, [r7, #4]
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	1c5a      	adds	r2, r3, #1
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801dd38:	683b      	ldr	r3, [r7, #0]
 801dd3a:	425a      	negs	r2, r3
 801dd3c:	b2db      	uxtb	r3, r3
 801dd3e:	b2d2      	uxtb	r2, r2
 801dd40:	bf58      	it	pl
 801dd42:	4253      	negpl	r3, r2
 801dd44:	687a      	ldr	r2, [r7, #4]
 801dd46:	6812      	ldr	r2, [r2, #0]
 801dd48:	b2db      	uxtb	r3, r3
 801dd4a:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	1c5a      	adds	r2, r3, #1
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	601a      	str	r2, [r3, #0]
}
 801dd56:	bf00      	nop
 801dd58:	370c      	adds	r7, #12
 801dd5a:	46bd      	mov	sp, r7
 801dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd60:	4770      	bx	lr

0801dd62 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801dd62:	b580      	push	{r7, lr}
 801dd64:	b084      	sub	sp, #16
 801dd66:	af00      	add	r7, sp, #0
 801dd68:	6078      	str	r0, [r7, #4]
 801dd6a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801dd6c:	6838      	ldr	r0, [r7, #0]
 801dd6e:	f7f2 fa97 	bl	80102a0 <strlen>
 801dd72:	4603      	mov	r3, r0
 801dd74:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801dd76:	68f9      	ldr	r1, [r7, #12]
 801dd78:	6878      	ldr	r0, [r7, #4]
 801dd7a:	f7ff ffc9 	bl	801dd10 <writeInt>
	memcpy(*pptr, string, len);
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	681b      	ldr	r3, [r3, #0]
 801dd82:	68fa      	ldr	r2, [r7, #12]
 801dd84:	6839      	ldr	r1, [r7, #0]
 801dd86:	4618      	mov	r0, r3
 801dd88:	f00f fe8d 	bl	802daa6 <memcpy>
	*pptr += len;
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	681a      	ldr	r2, [r3, #0]
 801dd90:	68fb      	ldr	r3, [r7, #12]
 801dd92:	441a      	add	r2, r3
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	601a      	str	r2, [r3, #0]
}
 801dd98:	bf00      	nop
 801dd9a:	3710      	adds	r7, #16
 801dd9c:	46bd      	mov	sp, r7
 801dd9e:	bd80      	pop	{r7, pc}

0801dda0 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801dda0:	b580      	push	{r7, lr}
 801dda2:	b084      	sub	sp, #16
 801dda4:	af00      	add	r7, sp, #0
 801dda6:	60f8      	str	r0, [r7, #12]
 801dda8:	4638      	mov	r0, r7
 801ddaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	dd12      	ble.n	801ddda <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801ddb4:	687b      	ldr	r3, [r7, #4]
 801ddb6:	4619      	mov	r1, r3
 801ddb8:	68f8      	ldr	r0, [r7, #12]
 801ddba:	f7ff ffa9 	bl	801dd10 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801ddbe:	68fb      	ldr	r3, [r7, #12]
 801ddc0:	681b      	ldr	r3, [r3, #0]
 801ddc2:	68b9      	ldr	r1, [r7, #8]
 801ddc4:	687a      	ldr	r2, [r7, #4]
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	f00f fe6d 	bl	802daa6 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	687a      	ldr	r2, [r7, #4]
 801ddd2:	441a      	add	r2, r3
 801ddd4:	68fb      	ldr	r3, [r7, #12]
 801ddd6:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801ddd8:	e00c      	b.n	801ddf4 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801ddda:	683b      	ldr	r3, [r7, #0]
 801dddc:	2b00      	cmp	r3, #0
 801ddde:	d005      	beq.n	801ddec <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801dde0:	683b      	ldr	r3, [r7, #0]
 801dde2:	4619      	mov	r1, r3
 801dde4:	68f8      	ldr	r0, [r7, #12]
 801dde6:	f7ff ffbc 	bl	801dd62 <writeCString>
}
 801ddea:	e003      	b.n	801ddf4 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801ddec:	2100      	movs	r1, #0
 801ddee:	68f8      	ldr	r0, [r7, #12]
 801ddf0:	f7ff ff8e 	bl	801dd10 <writeInt>
}
 801ddf4:	bf00      	nop
 801ddf6:	3710      	adds	r7, #16
 801ddf8:	46bd      	mov	sp, r7
 801ddfa:	bd80      	pop	{r7, pc}

0801ddfc <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b086      	sub	sp, #24
 801de00:	af00      	add	r7, sp, #0
 801de02:	60f8      	str	r0, [r7, #12]
 801de04:	60b9      	str	r1, [r7, #8]
 801de06:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801de08:	2300      	movs	r3, #0
 801de0a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801de0c:	68bb      	ldr	r3, [r7, #8]
 801de0e:	681b      	ldr	r3, [r3, #0]
 801de10:	687a      	ldr	r2, [r7, #4]
 801de12:	1ad3      	subs	r3, r2, r3
 801de14:	2b01      	cmp	r3, #1
 801de16:	dd1a      	ble.n	801de4e <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801de18:	68b8      	ldr	r0, [r7, #8]
 801de1a:	f7ff ff35 	bl	801dc88 <readInt>
 801de1e:	4602      	mov	r2, r0
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801de24:	68bb      	ldr	r3, [r7, #8]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	68fa      	ldr	r2, [r7, #12]
 801de2a:	6852      	ldr	r2, [r2, #4]
 801de2c:	4413      	add	r3, r2
 801de2e:	687a      	ldr	r2, [r7, #4]
 801de30:	429a      	cmp	r2, r3
 801de32:	d30c      	bcc.n	801de4e <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801de34:	68bb      	ldr	r3, [r7, #8]
 801de36:	681a      	ldr	r2, [r3, #0]
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801de3c:	68bb      	ldr	r3, [r7, #8]
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	68fa      	ldr	r2, [r7, #12]
 801de42:	6852      	ldr	r2, [r2, #4]
 801de44:	441a      	add	r2, r3
 801de46:	68bb      	ldr	r3, [r7, #8]
 801de48:	601a      	str	r2, [r3, #0]
			rc = 1;
 801de4a:	2301      	movs	r3, #1
 801de4c:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	2200      	movs	r2, #0
 801de52:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801de54:	697b      	ldr	r3, [r7, #20]
}
 801de56:	4618      	mov	r0, r3
 801de58:	3718      	adds	r7, #24
 801de5a:	46bd      	mov	sp, r7
 801de5c:	bd80      	pop	{r7, pc}

0801de5e <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801de5e:	b580      	push	{r7, lr}
 801de60:	b086      	sub	sp, #24
 801de62:	af00      	add	r7, sp, #0
 801de64:	1d3b      	adds	r3, r7, #4
 801de66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801de6a:	2300      	movs	r3, #0
 801de6c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801de6e:	687b      	ldr	r3, [r7, #4]
 801de70:	2b00      	cmp	r3, #0
 801de72:	d006      	beq.n	801de82 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	4618      	mov	r0, r3
 801de78:	f7f2 fa12 	bl	80102a0 <strlen>
 801de7c:	4603      	mov	r3, r0
 801de7e:	617b      	str	r3, [r7, #20]
 801de80:	e001      	b.n	801de86 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801de82:	68bb      	ldr	r3, [r7, #8]
 801de84:	617b      	str	r3, [r7, #20]
	return rc;
 801de86:	697b      	ldr	r3, [r7, #20]
}
 801de88:	4618      	mov	r0, r3
 801de8a:	3718      	adds	r7, #24
 801de8c:	46bd      	mov	sp, r7
 801de8e:	bd80      	pop	{r7, pc}

0801de90 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b086      	sub	sp, #24
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
 801de98:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801de9a:	2300      	movs	r3, #0
 801de9c:	617b      	str	r3, [r7, #20]
		blen = 0;
 801de9e:	2300      	movs	r3, #0
 801dea0:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	2b00      	cmp	r3, #0
 801dea8:	d00a      	beq.n	801dec0 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	681b      	ldr	r3, [r3, #0]
 801deae:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801deb0:	687b      	ldr	r3, [r7, #4]
 801deb2:	681b      	ldr	r3, [r3, #0]
 801deb4:	4618      	mov	r0, r3
 801deb6:	f7f2 f9f3 	bl	80102a0 <strlen>
 801deba:	4603      	mov	r3, r0
 801debc:	617b      	str	r3, [r7, #20]
 801debe:	e005      	b.n	801decc <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801dec0:	687b      	ldr	r3, [r7, #4]
 801dec2:	689b      	ldr	r3, [r3, #8]
 801dec4:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	685b      	ldr	r3, [r3, #4]
 801deca:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801decc:	6838      	ldr	r0, [r7, #0]
 801dece:	f7f2 f9e7 	bl	80102a0 <strlen>
 801ded2:	4603      	mov	r3, r0
 801ded4:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801ded6:	697a      	ldr	r2, [r7, #20]
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	429a      	cmp	r2, r3
 801dedc:	d10a      	bne.n	801def4 <MQTTPacket_equals+0x64>
 801dede:	697b      	ldr	r3, [r7, #20]
 801dee0:	461a      	mov	r2, r3
 801dee2:	6839      	ldr	r1, [r7, #0]
 801dee4:	6938      	ldr	r0, [r7, #16]
 801dee6:	f00f fc51 	bl	802d78c <strncmp>
 801deea:	4603      	mov	r3, r0
 801deec:	2b00      	cmp	r3, #0
 801deee:	d101      	bne.n	801def4 <MQTTPacket_equals+0x64>
 801def0:	2301      	movs	r3, #1
 801def2:	e000      	b.n	801def6 <MQTTPacket_equals+0x66>
 801def4:	2300      	movs	r3, #0
}
 801def6:	4618      	mov	r0, r3
 801def8:	3718      	adds	r7, #24
 801defa:	46bd      	mov	sp, r7
 801defc:	bd80      	pop	{r7, pc}

0801defe <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801defe:	b580      	push	{r7, lr}
 801df00:	b086      	sub	sp, #24
 801df02:	af00      	add	r7, sp, #0
 801df04:	60f8      	str	r0, [r7, #12]
 801df06:	4638      	mov	r0, r7
 801df08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801df0c:	2300      	movs	r3, #0
 801df0e:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801df10:	463b      	mov	r3, r7
 801df12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801df16:	f7ff ffa2 	bl	801de5e <MQTTstrlen>
 801df1a:	4603      	mov	r3, r0
 801df1c:	1c9a      	adds	r2, r3, #2
 801df1e:	6a3b      	ldr	r3, [r7, #32]
 801df20:	4413      	add	r3, r2
 801df22:	697a      	ldr	r2, [r7, #20]
 801df24:	4413      	add	r3, r2
 801df26:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801df28:	68fb      	ldr	r3, [r7, #12]
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	dd02      	ble.n	801df34 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801df2e:	697b      	ldr	r3, [r7, #20]
 801df30:	3302      	adds	r3, #2
 801df32:	617b      	str	r3, [r7, #20]
	return len;
 801df34:	697b      	ldr	r3, [r7, #20]
}
 801df36:	4618      	mov	r0, r3
 801df38:	3718      	adds	r7, #24
 801df3a:	46bd      	mov	sp, r7
 801df3c:	bd80      	pop	{r7, pc}

0801df3e <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801df3e:	b580      	push	{r7, lr}
 801df40:	b08a      	sub	sp, #40	; 0x28
 801df42:	af02      	add	r7, sp, #8
 801df44:	60f8      	str	r0, [r7, #12]
 801df46:	60b9      	str	r1, [r7, #8]
 801df48:	603b      	str	r3, [r7, #0]
 801df4a:	4613      	mov	r3, r2
 801df4c:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801df52:	2300      	movs	r3, #0
 801df54:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801df56:	2300      	movs	r3, #0
 801df58:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801df5a:	2300      	movs	r3, #0
 801df5c:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801df5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801df60:	9300      	str	r3, [sp, #0]
 801df62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801df66:	cb0e      	ldmia	r3, {r1, r2, r3}
 801df68:	6838      	ldr	r0, [r7, #0]
 801df6a:	f7ff ffc8 	bl	801defe <MQTTSerialize_publishLength>
 801df6e:	61b8      	str	r0, [r7, #24]
 801df70:	69b8      	ldr	r0, [r7, #24]
 801df72:	f7ff fe29 	bl	801dbc8 <MQTTPacket_len>
 801df76:	4602      	mov	r2, r0
 801df78:	68bb      	ldr	r3, [r7, #8]
 801df7a:	4293      	cmp	r3, r2
 801df7c:	da03      	bge.n	801df86 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801df7e:	f06f 0301 	mvn.w	r3, #1
 801df82:	61fb      	str	r3, [r7, #28]
		goto exit;
 801df84:	e04c      	b.n	801e020 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801df86:	7c3b      	ldrb	r3, [r7, #16]
 801df88:	2203      	movs	r2, #3
 801df8a:	f362 1307 	bfi	r3, r2, #4, #4
 801df8e:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801df90:	79fb      	ldrb	r3, [r7, #7]
 801df92:	f003 0301 	and.w	r3, r3, #1
 801df96:	b2da      	uxtb	r2, r3
 801df98:	7c3b      	ldrb	r3, [r7, #16]
 801df9a:	f362 03c3 	bfi	r3, r2, #3, #1
 801df9e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801dfa0:	683b      	ldr	r3, [r7, #0]
 801dfa2:	f003 0303 	and.w	r3, r3, #3
 801dfa6:	b2da      	uxtb	r2, r3
 801dfa8:	7c3b      	ldrb	r3, [r7, #16]
 801dfaa:	f362 0342 	bfi	r3, r2, #1, #2
 801dfae:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801dfb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801dfb4:	f003 0301 	and.w	r3, r3, #1
 801dfb8:	b2da      	uxtb	r2, r3
 801dfba:	7c3b      	ldrb	r3, [r7, #16]
 801dfbc:	f362 0300 	bfi	r3, r2, #0, #1
 801dfc0:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801dfc2:	7c3a      	ldrb	r2, [r7, #16]
 801dfc4:	f107 0314 	add.w	r3, r7, #20
 801dfc8:	4611      	mov	r1, r2
 801dfca:	4618      	mov	r0, r3
 801dfcc:	f7ff fe8b 	bl	801dce6 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801dfd0:	697b      	ldr	r3, [r7, #20]
 801dfd2:	69b9      	ldr	r1, [r7, #24]
 801dfd4:	4618      	mov	r0, r3
 801dfd6:	f7ff fd8c 	bl	801daf2 <MQTTPacket_encode>
 801dfda:	4602      	mov	r2, r0
 801dfdc:	697b      	ldr	r3, [r7, #20]
 801dfde:	4413      	add	r3, r2
 801dfe0:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801dfe2:	f107 0014 	add.w	r0, r7, #20
 801dfe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801dfea:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dfec:	f7ff fed8 	bl	801dda0 <writeMQTTString>

	if (qos > 0)
 801dff0:	683b      	ldr	r3, [r7, #0]
 801dff2:	2b00      	cmp	r3, #0
 801dff4:	dd06      	ble.n	801e004 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801dff6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801dff8:	f107 0314 	add.w	r3, r7, #20
 801dffc:	4611      	mov	r1, r2
 801dffe:	4618      	mov	r0, r3
 801e000:	f7ff fe86 	bl	801dd10 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801e004:	697b      	ldr	r3, [r7, #20]
 801e006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e008:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e00a:	4618      	mov	r0, r3
 801e00c:	f00f fd4b 	bl	802daa6 <memcpy>
	ptr += payloadlen;
 801e010:	697a      	ldr	r2, [r7, #20]
 801e012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e014:	4413      	add	r3, r2
 801e016:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801e018:	697a      	ldr	r2, [r7, #20]
 801e01a:	68fb      	ldr	r3, [r7, #12]
 801e01c:	1ad3      	subs	r3, r2, r3
 801e01e:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e020:	69fb      	ldr	r3, [r7, #28]
}
 801e022:	4618      	mov	r0, r3
 801e024:	3720      	adds	r7, #32
 801e026:	46bd      	mov	sp, r7
 801e028:	bd80      	pop	{r7, pc}

0801e02a <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801e02a:	b580      	push	{r7, lr}
 801e02c:	b088      	sub	sp, #32
 801e02e:	af00      	add	r7, sp, #0
 801e030:	60f8      	str	r0, [r7, #12]
 801e032:	60b9      	str	r1, [r7, #8]
 801e034:	4611      	mov	r1, r2
 801e036:	461a      	mov	r2, r3
 801e038:	460b      	mov	r3, r1
 801e03a:	71fb      	strb	r3, [r7, #7]
 801e03c:	4613      	mov	r3, r2
 801e03e:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801e040:	2300      	movs	r3, #0
 801e042:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e044:	2300      	movs	r3, #0
 801e046:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801e04c:	68bb      	ldr	r3, [r7, #8]
 801e04e:	2b03      	cmp	r3, #3
 801e050:	dc03      	bgt.n	801e05a <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e052:	f06f 0301 	mvn.w	r3, #1
 801e056:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e058:	e037      	b.n	801e0ca <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801e05a:	79fb      	ldrb	r3, [r7, #7]
 801e05c:	f003 030f 	and.w	r3, r3, #15
 801e060:	b2da      	uxtb	r2, r3
 801e062:	7e3b      	ldrb	r3, [r7, #24]
 801e064:	f362 1307 	bfi	r3, r2, #4, #4
 801e068:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801e06a:	79bb      	ldrb	r3, [r7, #6]
 801e06c:	f003 0301 	and.w	r3, r3, #1
 801e070:	b2da      	uxtb	r2, r3
 801e072:	7e3b      	ldrb	r3, [r7, #24]
 801e074:	f362 03c3 	bfi	r3, r2, #3, #1
 801e078:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e07a:	79fb      	ldrb	r3, [r7, #7]
 801e07c:	2b06      	cmp	r3, #6
 801e07e:	bf0c      	ite	eq
 801e080:	2301      	moveq	r3, #1
 801e082:	2300      	movne	r3, #0
 801e084:	b2db      	uxtb	r3, r3
 801e086:	f003 0303 	and.w	r3, r3, #3
 801e08a:	b2da      	uxtb	r2, r3
 801e08c:	7e3b      	ldrb	r3, [r7, #24]
 801e08e:	f362 0342 	bfi	r3, r2, #1, #2
 801e092:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801e094:	7e3a      	ldrb	r2, [r7, #24]
 801e096:	f107 0314 	add.w	r3, r7, #20
 801e09a:	4611      	mov	r1, r2
 801e09c:	4618      	mov	r0, r3
 801e09e:	f7ff fe22 	bl	801dce6 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e0a2:	697b      	ldr	r3, [r7, #20]
 801e0a4:	2102      	movs	r1, #2
 801e0a6:	4618      	mov	r0, r3
 801e0a8:	f7ff fd23 	bl	801daf2 <MQTTPacket_encode>
 801e0ac:	4602      	mov	r2, r0
 801e0ae:	697b      	ldr	r3, [r7, #20]
 801e0b0:	4413      	add	r3, r2
 801e0b2:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801e0b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e0b6:	f107 0314 	add.w	r3, r7, #20
 801e0ba:	4611      	mov	r1, r2
 801e0bc:	4618      	mov	r0, r3
 801e0be:	f7ff fe27 	bl	801dd10 <writeInt>
	rc = ptr - buf;
 801e0c2:	697a      	ldr	r2, [r7, #20]
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	1ad3      	subs	r3, r2, r3
 801e0c8:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e0ca:	69fb      	ldr	r3, [r7, #28]
}
 801e0cc:	4618      	mov	r0, r3
 801e0ce:	3720      	adds	r7, #32
 801e0d0:	46bd      	mov	sp, r7
 801e0d2:	bd80      	pop	{r7, pc}

0801e0d4 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801e0d4:	b590      	push	{r4, r7, lr}
 801e0d6:	b085      	sub	sp, #20
 801e0d8:	af00      	add	r7, sp, #0
 801e0da:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e0dc:	2300      	movs	r3, #0
 801e0de:	60fb      	str	r3, [r7, #12]
 801e0e0:	2300      	movs	r3, #0
 801e0e2:	60bb      	str	r3, [r7, #8]
 801e0e4:	e02e      	b.n	801e144 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801e0e6:	68bb      	ldr	r3, [r7, #8]
 801e0e8:	687a      	ldr	r2, [r7, #4]
 801e0ea:	441a      	add	r2, r3
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	6879      	ldr	r1, [r7, #4]
 801e0f0:	440b      	add	r3, r1
 801e0f2:	7812      	ldrb	r2, [r2, #0]
 801e0f4:	701a      	strb	r2, [r3, #0]
 801e0f6:	781b      	ldrb	r3, [r3, #0]
 801e0f8:	2b25      	cmp	r3, #37	; 0x25
 801e0fa:	d11d      	bne.n	801e138 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801e0fc:	68bb      	ldr	r3, [r7, #8]
 801e0fe:	3301      	adds	r3, #1
 801e100:	687a      	ldr	r2, [r7, #4]
 801e102:	4413      	add	r3, r2
 801e104:	781b      	ldrb	r3, [r3, #0]
 801e106:	4618      	mov	r0, r3
 801e108:	f000 fbf1 	bl	801e8ee <C2D>
 801e10c:	4603      	mov	r3, r0
 801e10e:	011b      	lsls	r3, r3, #4
 801e110:	b2dc      	uxtb	r4, r3
 801e112:	68bb      	ldr	r3, [r7, #8]
 801e114:	3302      	adds	r3, #2
 801e116:	687a      	ldr	r2, [r7, #4]
 801e118:	4413      	add	r3, r2
 801e11a:	781b      	ldrb	r3, [r3, #0]
 801e11c:	4618      	mov	r0, r3
 801e11e:	f000 fbe6 	bl	801e8ee <C2D>
 801e122:	4603      	mov	r3, r0
 801e124:	4619      	mov	r1, r3
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	687a      	ldr	r2, [r7, #4]
 801e12a:	4413      	add	r3, r2
 801e12c:	1862      	adds	r2, r4, r1
 801e12e:	b2d2      	uxtb	r2, r2
 801e130:	701a      	strb	r2, [r3, #0]
			y+=2;
 801e132:	68bb      	ldr	r3, [r7, #8]
 801e134:	3302      	adds	r3, #2
 801e136:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e138:	68fb      	ldr	r3, [r7, #12]
 801e13a:	3301      	adds	r3, #1
 801e13c:	60fb      	str	r3, [r7, #12]
 801e13e:	68bb      	ldr	r3, [r7, #8]
 801e140:	3301      	adds	r3, #1
 801e142:	60bb      	str	r3, [r7, #8]
 801e144:	68bb      	ldr	r3, [r7, #8]
 801e146:	687a      	ldr	r2, [r7, #4]
 801e148:	4413      	add	r3, r2
 801e14a:	781b      	ldrb	r3, [r3, #0]
 801e14c:	2b00      	cmp	r3, #0
 801e14e:	d1ca      	bne.n	801e0e6 <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801e150:	68fb      	ldr	r3, [r7, #12]
 801e152:	687a      	ldr	r2, [r7, #4]
 801e154:	4413      	add	r3, r2
 801e156:	2200      	movs	r2, #0
 801e158:	701a      	strb	r2, [r3, #0]
}
 801e15a:	bf00      	nop
 801e15c:	3714      	adds	r7, #20
 801e15e:	46bd      	mov	sp, r7
 801e160:	bd90      	pop	{r4, r7, pc}
	...

0801e164 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801e164:	b580      	push	{r7, lr}
 801e166:	b088      	sub	sp, #32
 801e168:	af00      	add	r7, sp, #0
 801e16a:	60f8      	str	r0, [r7, #12]
 801e16c:	460b      	mov	r3, r1
 801e16e:	607a      	str	r2, [r7, #4]
 801e170:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801e172:	7afb      	ldrb	r3, [r7, #11]
 801e174:	2b01      	cmp	r3, #1
 801e176:	d102      	bne.n	801e17e <make_http_response_head+0x1a>
 801e178:	4b42      	ldr	r3, [pc, #264]	; (801e284 <make_http_response_head+0x120>)
 801e17a:	61fb      	str	r3, [r7, #28]
 801e17c:	e061      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801e17e:	7afb      	ldrb	r3, [r7, #11]
 801e180:	2b02      	cmp	r3, #2
 801e182:	d102      	bne.n	801e18a <make_http_response_head+0x26>
 801e184:	4b40      	ldr	r3, [pc, #256]	; (801e288 <make_http_response_head+0x124>)
 801e186:	61fb      	str	r3, [r7, #28]
 801e188:	e05b      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801e18a:	7afb      	ldrb	r3, [r7, #11]
 801e18c:	2b03      	cmp	r3, #3
 801e18e:	d102      	bne.n	801e196 <make_http_response_head+0x32>
 801e190:	4b3e      	ldr	r3, [pc, #248]	; (801e28c <make_http_response_head+0x128>)
 801e192:	61fb      	str	r3, [r7, #28]
 801e194:	e055      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801e196:	7afb      	ldrb	r3, [r7, #11]
 801e198:	2b04      	cmp	r3, #4
 801e19a:	d102      	bne.n	801e1a2 <make_http_response_head+0x3e>
 801e19c:	4b3c      	ldr	r3, [pc, #240]	; (801e290 <make_http_response_head+0x12c>)
 801e19e:	61fb      	str	r3, [r7, #28]
 801e1a0:	e04f      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801e1a2:	7afb      	ldrb	r3, [r7, #11]
 801e1a4:	2b05      	cmp	r3, #5
 801e1a6:	d102      	bne.n	801e1ae <make_http_response_head+0x4a>
 801e1a8:	4b3a      	ldr	r3, [pc, #232]	; (801e294 <make_http_response_head+0x130>)
 801e1aa:	61fb      	str	r3, [r7, #28]
 801e1ac:	e049      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801e1ae:	7afb      	ldrb	r3, [r7, #11]
 801e1b0:	2b09      	cmp	r3, #9
 801e1b2:	d102      	bne.n	801e1ba <make_http_response_head+0x56>
 801e1b4:	4b38      	ldr	r3, [pc, #224]	; (801e298 <make_http_response_head+0x134>)
 801e1b6:	61fb      	str	r3, [r7, #28]
 801e1b8:	e043      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801e1ba:	7afb      	ldrb	r3, [r7, #11]
 801e1bc:	2b0a      	cmp	r3, #10
 801e1be:	d102      	bne.n	801e1c6 <make_http_response_head+0x62>
 801e1c0:	4b36      	ldr	r3, [pc, #216]	; (801e29c <make_http_response_head+0x138>)
 801e1c2:	61fb      	str	r3, [r7, #28]
 801e1c4:	e03d      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801e1c6:	7afb      	ldrb	r3, [r7, #11]
 801e1c8:	2b0c      	cmp	r3, #12
 801e1ca:	d102      	bne.n	801e1d2 <make_http_response_head+0x6e>
 801e1cc:	4b34      	ldr	r3, [pc, #208]	; (801e2a0 <make_http_response_head+0x13c>)
 801e1ce:	61fb      	str	r3, [r7, #28]
 801e1d0:	e037      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801e1d2:	7afb      	ldrb	r3, [r7, #11]
 801e1d4:	2b0b      	cmp	r3, #11
 801e1d6:	d102      	bne.n	801e1de <make_http_response_head+0x7a>
 801e1d8:	4b32      	ldr	r3, [pc, #200]	; (801e2a4 <make_http_response_head+0x140>)
 801e1da:	61fb      	str	r3, [r7, #28]
 801e1dc:	e031      	b.n	801e242 <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801e1de:	7afb      	ldrb	r3, [r7, #11]
 801e1e0:	2b08      	cmp	r3, #8
 801e1e2:	d102      	bne.n	801e1ea <make_http_response_head+0x86>
 801e1e4:	4b30      	ldr	r3, [pc, #192]	; (801e2a8 <make_http_response_head+0x144>)
 801e1e6:	61fb      	str	r3, [r7, #28]
 801e1e8:	e02b      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801e1ea:	7afb      	ldrb	r3, [r7, #11]
 801e1ec:	2b0d      	cmp	r3, #13
 801e1ee:	d102      	bne.n	801e1f6 <make_http_response_head+0x92>
 801e1f0:	4b2e      	ldr	r3, [pc, #184]	; (801e2ac <make_http_response_head+0x148>)
 801e1f2:	61fb      	str	r3, [r7, #28]
 801e1f4:	e025      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801e1f6:	7afb      	ldrb	r3, [r7, #11]
 801e1f8:	2b0e      	cmp	r3, #14
 801e1fa:	d102      	bne.n	801e202 <make_http_response_head+0x9e>
 801e1fc:	4b2c      	ldr	r3, [pc, #176]	; (801e2b0 <make_http_response_head+0x14c>)
 801e1fe:	61fb      	str	r3, [r7, #28]
 801e200:	e01f      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801e202:	7afb      	ldrb	r3, [r7, #11]
 801e204:	2b14      	cmp	r3, #20
 801e206:	d102      	bne.n	801e20e <make_http_response_head+0xaa>
 801e208:	4b2a      	ldr	r3, [pc, #168]	; (801e2b4 <make_http_response_head+0x150>)
 801e20a:	61fb      	str	r3, [r7, #28]
 801e20c:	e019      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801e20e:	7afb      	ldrb	r3, [r7, #11]
 801e210:	2b15      	cmp	r3, #21
 801e212:	d102      	bne.n	801e21a <make_http_response_head+0xb6>
 801e214:	4b28      	ldr	r3, [pc, #160]	; (801e2b8 <make_http_response_head+0x154>)
 801e216:	61fb      	str	r3, [r7, #28]
 801e218:	e013      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801e21a:	7afb      	ldrb	r3, [r7, #11]
 801e21c:	2b16      	cmp	r3, #22
 801e21e:	d102      	bne.n	801e226 <make_http_response_head+0xc2>
 801e220:	4b26      	ldr	r3, [pc, #152]	; (801e2bc <make_http_response_head+0x158>)
 801e222:	61fb      	str	r3, [r7, #28]
 801e224:	e00d      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801e226:	7afb      	ldrb	r3, [r7, #11]
 801e228:	2b17      	cmp	r3, #23
 801e22a:	d102      	bne.n	801e232 <make_http_response_head+0xce>
 801e22c:	4b24      	ldr	r3, [pc, #144]	; (801e2c0 <make_http_response_head+0x15c>)
 801e22e:	61fb      	str	r3, [r7, #28]
 801e230:	e007      	b.n	801e242 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801e232:	7afb      	ldrb	r3, [r7, #11]
 801e234:	2b18      	cmp	r3, #24
 801e236:	d102      	bne.n	801e23e <make_http_response_head+0xda>
 801e238:	4b22      	ldr	r3, [pc, #136]	; (801e2c4 <make_http_response_head+0x160>)
 801e23a:	61fb      	str	r3, [r7, #28]
 801e23c:	e001      	b.n	801e242 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801e23e:	2300      	movs	r3, #0
 801e240:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801e242:	f107 0310 	add.w	r3, r7, #16
 801e246:	687a      	ldr	r2, [r7, #4]
 801e248:	491f      	ldr	r1, [pc, #124]	; (801e2c8 <make_http_response_head+0x164>)
 801e24a:	4618      	mov	r0, r3
 801e24c:	f00f f906 	bl	802d45c <siprintf>
	strcpy(buf, head);
 801e250:	69f9      	ldr	r1, [r7, #28]
 801e252:	68f8      	ldr	r0, [r7, #12]
 801e254:	f00f fc1f 	bl	802da96 <strcpy>
	strcat(buf, tmp);
 801e258:	f107 0310 	add.w	r3, r7, #16
 801e25c:	4619      	mov	r1, r3
 801e25e:	68f8      	ldr	r0, [r7, #12]
 801e260:	f00f fa54 	bl	802d70c <strcat>
	strcat(buf, "\r\n\r\n");
 801e264:	68f8      	ldr	r0, [r7, #12]
 801e266:	f7f2 f81b 	bl	80102a0 <strlen>
 801e26a:	4603      	mov	r3, r0
 801e26c:	461a      	mov	r2, r3
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	4413      	add	r3, r2
 801e272:	4a16      	ldr	r2, [pc, #88]	; (801e2cc <make_http_response_head+0x168>)
 801e274:	6810      	ldr	r0, [r2, #0]
 801e276:	6018      	str	r0, [r3, #0]
 801e278:	7912      	ldrb	r2, [r2, #4]
 801e27a:	711a      	strb	r2, [r3, #4]
}
 801e27c:	bf00      	nop
 801e27e:	3720      	adds	r7, #32
 801e280:	46bd      	mov	sp, r7
 801e282:	bd80      	pop	{r7, pc}
 801e284:	08032b68 	.word	0x08032b68
 801e288:	08032bbc 	.word	0x08032bbc
 801e28c:	08032bf8 	.word	0x08032bf8
 801e290:	08032c34 	.word	0x08032c34
 801e294:	08032c70 	.word	0x08032c70
 801e298:	08032cc0 	.word	0x08032cc0
 801e29c:	08032d14 	.word	0x08032d14
 801e2a0:	08032d50 	.word	0x08032d50
 801e2a4:	08032d94 	.word	0x08032d94
 801e2a8:	08032ddc 	.word	0x08032ddc
 801e2ac:	08032e38 	.word	0x08032e38
 801e2b0:	08032e74 	.word	0x08032e74
 801e2b4:	08032eb4 	.word	0x08032eb4
 801e2b8:	08032f04 	.word	0x08032f04
 801e2bc:	08032f54 	.word	0x08032f54
 801e2c0:	08032f9c 	.word	0x08032f9c
 801e2c4:	08032fec 	.word	0x08032fec
 801e2c8:	0803302c 	.word	0x0803302c
 801e2cc:	08033030 	.word	0x08033030

0801e2d0 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801e2d0:	b580      	push	{r7, lr}
 801e2d2:	b084      	sub	sp, #16
 801e2d4:	af00      	add	r7, sp, #0
 801e2d6:	6078      	str	r0, [r7, #4]
 801e2d8:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801e2da:	683b      	ldr	r3, [r7, #0]
 801e2dc:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801e2de:	499f      	ldr	r1, [pc, #636]	; (801e55c <find_http_uri_type+0x28c>)
 801e2e0:	68f8      	ldr	r0, [r7, #12]
 801e2e2:	f00f fae5 	bl	802d8b0 <strstr>
 801e2e6:	4603      	mov	r3, r0
 801e2e8:	2b00      	cmp	r3, #0
 801e2ea:	d106      	bne.n	801e2fa <find_http_uri_type+0x2a>
 801e2ec:	499c      	ldr	r1, [pc, #624]	; (801e560 <find_http_uri_type+0x290>)
 801e2ee:	68f8      	ldr	r0, [r7, #12]
 801e2f0:	f00f fade 	bl	802d8b0 <strstr>
 801e2f4:	4603      	mov	r3, r0
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d003      	beq.n	801e302 <find_http_uri_type+0x32>
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	2201      	movs	r2, #1
 801e2fe:	701a      	strb	r2, [r3, #0]
 801e300:	e127      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801e302:	4998      	ldr	r1, [pc, #608]	; (801e564 <find_http_uri_type+0x294>)
 801e304:	68f8      	ldr	r0, [r7, #12]
 801e306:	f00f fad3 	bl	802d8b0 <strstr>
 801e30a:	4603      	mov	r3, r0
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d003      	beq.n	801e318 <find_http_uri_type+0x48>
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	2202      	movs	r2, #2
 801e314:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801e316:	e11c      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801e318:	4993      	ldr	r1, [pc, #588]	; (801e568 <find_http_uri_type+0x298>)
 801e31a:	68f8      	ldr	r0, [r7, #12]
 801e31c:	f00f fac8 	bl	802d8b0 <strstr>
 801e320:	4603      	mov	r3, r0
 801e322:	2b00      	cmp	r3, #0
 801e324:	d106      	bne.n	801e334 <find_http_uri_type+0x64>
 801e326:	4991      	ldr	r1, [pc, #580]	; (801e56c <find_http_uri_type+0x29c>)
 801e328:	68f8      	ldr	r0, [r7, #12]
 801e32a:	f00f fac1 	bl	802d8b0 <strstr>
 801e32e:	4603      	mov	r3, r0
 801e330:	2b00      	cmp	r3, #0
 801e332:	d003      	beq.n	801e33c <find_http_uri_type+0x6c>
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	2203      	movs	r2, #3
 801e338:	701a      	strb	r2, [r3, #0]
 801e33a:	e10a      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801e33c:	498c      	ldr	r1, [pc, #560]	; (801e570 <find_http_uri_type+0x2a0>)
 801e33e:	68f8      	ldr	r0, [r7, #12]
 801e340:	f00f fab6 	bl	802d8b0 <strstr>
 801e344:	4603      	mov	r3, r0
 801e346:	2b00      	cmp	r3, #0
 801e348:	d106      	bne.n	801e358 <find_http_uri_type+0x88>
 801e34a:	498a      	ldr	r1, [pc, #552]	; (801e574 <find_http_uri_type+0x2a4>)
 801e34c:	68f8      	ldr	r0, [r7, #12]
 801e34e:	f00f faaf 	bl	802d8b0 <strstr>
 801e352:	4603      	mov	r3, r0
 801e354:	2b00      	cmp	r3, #0
 801e356:	d003      	beq.n	801e360 <find_http_uri_type+0x90>
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	2204      	movs	r2, #4
 801e35c:	701a      	strb	r2, [r3, #0]
 801e35e:	e0f8      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e360:	4985      	ldr	r1, [pc, #532]	; (801e578 <find_http_uri_type+0x2a8>)
 801e362:	68f8      	ldr	r0, [r7, #12]
 801e364:	f00f faa4 	bl	802d8b0 <strstr>
 801e368:	4603      	mov	r3, r0
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d003      	beq.n	801e376 <find_http_uri_type+0xa6>
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	2205      	movs	r2, #5
 801e372:	701a      	strb	r2, [r3, #0]
}
 801e374:	e0ed      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e376:	4981      	ldr	r1, [pc, #516]	; (801e57c <find_http_uri_type+0x2ac>)
 801e378:	68f8      	ldr	r0, [r7, #12]
 801e37a:	f00f fa99 	bl	802d8b0 <strstr>
 801e37e:	4603      	mov	r3, r0
 801e380:	2b00      	cmp	r3, #0
 801e382:	d106      	bne.n	801e392 <find_http_uri_type+0xc2>
 801e384:	497e      	ldr	r1, [pc, #504]	; (801e580 <find_http_uri_type+0x2b0>)
 801e386:	68f8      	ldr	r0, [r7, #12]
 801e388:	f00f fa92 	bl	802d8b0 <strstr>
 801e38c:	4603      	mov	r3, r0
 801e38e:	2b00      	cmp	r3, #0
 801e390:	d003      	beq.n	801e39a <find_http_uri_type+0xca>
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	2208      	movs	r2, #8
 801e396:	701a      	strb	r2, [r3, #0]
 801e398:	e0db      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e39a:	497a      	ldr	r1, [pc, #488]	; (801e584 <find_http_uri_type+0x2b4>)
 801e39c:	68f8      	ldr	r0, [r7, #12]
 801e39e:	f00f fa87 	bl	802d8b0 <strstr>
 801e3a2:	4603      	mov	r3, r0
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	d106      	bne.n	801e3b6 <find_http_uri_type+0xe6>
 801e3a8:	4977      	ldr	r1, [pc, #476]	; (801e588 <find_http_uri_type+0x2b8>)
 801e3aa:	68f8      	ldr	r0, [r7, #12]
 801e3ac:	f00f fa80 	bl	802d8b0 <strstr>
 801e3b0:	4603      	mov	r3, r0
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d003      	beq.n	801e3be <find_http_uri_type+0xee>
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	220c      	movs	r2, #12
 801e3ba:	701a      	strb	r2, [r3, #0]
 801e3bc:	e0c9      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e3be:	4973      	ldr	r1, [pc, #460]	; (801e58c <find_http_uri_type+0x2bc>)
 801e3c0:	68f8      	ldr	r0, [r7, #12]
 801e3c2:	f00f fa75 	bl	802d8b0 <strstr>
 801e3c6:	4603      	mov	r3, r0
 801e3c8:	2b00      	cmp	r3, #0
 801e3ca:	d106      	bne.n	801e3da <find_http_uri_type+0x10a>
 801e3cc:	4970      	ldr	r1, [pc, #448]	; (801e590 <find_http_uri_type+0x2c0>)
 801e3ce:	68f8      	ldr	r0, [r7, #12]
 801e3d0:	f00f fa6e 	bl	802d8b0 <strstr>
 801e3d4:	4603      	mov	r3, r0
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d003      	beq.n	801e3e2 <find_http_uri_type+0x112>
 801e3da:	687b      	ldr	r3, [r7, #4]
 801e3dc:	220b      	movs	r2, #11
 801e3de:	701a      	strb	r2, [r3, #0]
 801e3e0:	e0b7      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e3e2:	4967      	ldr	r1, [pc, #412]	; (801e580 <find_http_uri_type+0x2b0>)
 801e3e4:	68f8      	ldr	r0, [r7, #12]
 801e3e6:	f00f fa63 	bl	802d8b0 <strstr>
 801e3ea:	4603      	mov	r3, r0
 801e3ec:	2b00      	cmp	r3, #0
 801e3ee:	d106      	bne.n	801e3fe <find_http_uri_type+0x12e>
 801e3f0:	4962      	ldr	r1, [pc, #392]	; (801e57c <find_http_uri_type+0x2ac>)
 801e3f2:	68f8      	ldr	r0, [r7, #12]
 801e3f4:	f00f fa5c 	bl	802d8b0 <strstr>
 801e3f8:	4603      	mov	r3, r0
 801e3fa:	2b00      	cmp	r3, #0
 801e3fc:	d003      	beq.n	801e406 <find_http_uri_type+0x136>
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	2208      	movs	r2, #8
 801e402:	701a      	strb	r2, [r3, #0]
 801e404:	e0a5      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e406:	4963      	ldr	r1, [pc, #396]	; (801e594 <find_http_uri_type+0x2c4>)
 801e408:	68f8      	ldr	r0, [r7, #12]
 801e40a:	f00f fa51 	bl	802d8b0 <strstr>
 801e40e:	4603      	mov	r3, r0
 801e410:	2b00      	cmp	r3, #0
 801e412:	d106      	bne.n	801e422 <find_http_uri_type+0x152>
 801e414:	4960      	ldr	r1, [pc, #384]	; (801e598 <find_http_uri_type+0x2c8>)
 801e416:	68f8      	ldr	r0, [r7, #12]
 801e418:	f00f fa4a 	bl	802d8b0 <strstr>
 801e41c:	4603      	mov	r3, r0
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d003      	beq.n	801e42a <find_http_uri_type+0x15a>
 801e422:	687b      	ldr	r3, [r7, #4]
 801e424:	2209      	movs	r2, #9
 801e426:	701a      	strb	r2, [r3, #0]
 801e428:	e093      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e42a:	495c      	ldr	r1, [pc, #368]	; (801e59c <find_http_uri_type+0x2cc>)
 801e42c:	68f8      	ldr	r0, [r7, #12]
 801e42e:	f00f fa3f 	bl	802d8b0 <strstr>
 801e432:	4603      	mov	r3, r0
 801e434:	2b00      	cmp	r3, #0
 801e436:	d106      	bne.n	801e446 <find_http_uri_type+0x176>
 801e438:	4959      	ldr	r1, [pc, #356]	; (801e5a0 <find_http_uri_type+0x2d0>)
 801e43a:	68f8      	ldr	r0, [r7, #12]
 801e43c:	f00f fa38 	bl	802d8b0 <strstr>
 801e440:	4603      	mov	r3, r0
 801e442:	2b00      	cmp	r3, #0
 801e444:	d003      	beq.n	801e44e <find_http_uri_type+0x17e>
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	220a      	movs	r2, #10
 801e44a:	701a      	strb	r2, [r3, #0]
 801e44c:	e081      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e44e:	4955      	ldr	r1, [pc, #340]	; (801e5a4 <find_http_uri_type+0x2d4>)
 801e450:	68f8      	ldr	r0, [r7, #12]
 801e452:	f00f fa2d 	bl	802d8b0 <strstr>
 801e456:	4603      	mov	r3, r0
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d106      	bne.n	801e46a <find_http_uri_type+0x19a>
 801e45c:	4952      	ldr	r1, [pc, #328]	; (801e5a8 <find_http_uri_type+0x2d8>)
 801e45e:	68f8      	ldr	r0, [r7, #12]
 801e460:	f00f fa26 	bl	802d8b0 <strstr>
 801e464:	4603      	mov	r3, r0
 801e466:	2b00      	cmp	r3, #0
 801e468:	d003      	beq.n	801e472 <find_http_uri_type+0x1a2>
 801e46a:	687b      	ldr	r3, [r7, #4]
 801e46c:	220d      	movs	r2, #13
 801e46e:	701a      	strb	r2, [r3, #0]
 801e470:	e06f      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e472:	494e      	ldr	r1, [pc, #312]	; (801e5ac <find_http_uri_type+0x2dc>)
 801e474:	68f8      	ldr	r0, [r7, #12]
 801e476:	f00f fa1b 	bl	802d8b0 <strstr>
 801e47a:	4603      	mov	r3, r0
 801e47c:	2b00      	cmp	r3, #0
 801e47e:	d106      	bne.n	801e48e <find_http_uri_type+0x1be>
 801e480:	494b      	ldr	r1, [pc, #300]	; (801e5b0 <find_http_uri_type+0x2e0>)
 801e482:	68f8      	ldr	r0, [r7, #12]
 801e484:	f00f fa14 	bl	802d8b0 <strstr>
 801e488:	4603      	mov	r3, r0
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d003      	beq.n	801e496 <find_http_uri_type+0x1c6>
 801e48e:	687b      	ldr	r3, [r7, #4]
 801e490:	220e      	movs	r2, #14
 801e492:	701a      	strb	r2, [r3, #0]
 801e494:	e05d      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e496:	4947      	ldr	r1, [pc, #284]	; (801e5b4 <find_http_uri_type+0x2e4>)
 801e498:	68f8      	ldr	r0, [r7, #12]
 801e49a:	f00f fa09 	bl	802d8b0 <strstr>
 801e49e:	4603      	mov	r3, r0
 801e4a0:	2b00      	cmp	r3, #0
 801e4a2:	d106      	bne.n	801e4b2 <find_http_uri_type+0x1e2>
 801e4a4:	4944      	ldr	r1, [pc, #272]	; (801e5b8 <find_http_uri_type+0x2e8>)
 801e4a6:	68f8      	ldr	r0, [r7, #12]
 801e4a8:	f00f fa02 	bl	802d8b0 <strstr>
 801e4ac:	4603      	mov	r3, r0
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d003      	beq.n	801e4ba <find_http_uri_type+0x1ea>
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	2214      	movs	r2, #20
 801e4b6:	701a      	strb	r2, [r3, #0]
 801e4b8:	e04b      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e4ba:	4940      	ldr	r1, [pc, #256]	; (801e5bc <find_http_uri_type+0x2ec>)
 801e4bc:	68f8      	ldr	r0, [r7, #12]
 801e4be:	f00f f9f7 	bl	802d8b0 <strstr>
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	2b00      	cmp	r3, #0
 801e4c6:	d106      	bne.n	801e4d6 <find_http_uri_type+0x206>
 801e4c8:	493d      	ldr	r1, [pc, #244]	; (801e5c0 <find_http_uri_type+0x2f0>)
 801e4ca:	68f8      	ldr	r0, [r7, #12]
 801e4cc:	f00f f9f0 	bl	802d8b0 <strstr>
 801e4d0:	4603      	mov	r3, r0
 801e4d2:	2b00      	cmp	r3, #0
 801e4d4:	d003      	beq.n	801e4de <find_http_uri_type+0x20e>
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	2215      	movs	r2, #21
 801e4da:	701a      	strb	r2, [r3, #0]
 801e4dc:	e039      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e4de:	4939      	ldr	r1, [pc, #228]	; (801e5c4 <find_http_uri_type+0x2f4>)
 801e4e0:	68f8      	ldr	r0, [r7, #12]
 801e4e2:	f00f f9e5 	bl	802d8b0 <strstr>
 801e4e6:	4603      	mov	r3, r0
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d106      	bne.n	801e4fa <find_http_uri_type+0x22a>
 801e4ec:	4936      	ldr	r1, [pc, #216]	; (801e5c8 <find_http_uri_type+0x2f8>)
 801e4ee:	68f8      	ldr	r0, [r7, #12]
 801e4f0:	f00f f9de 	bl	802d8b0 <strstr>
 801e4f4:	4603      	mov	r3, r0
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d003      	beq.n	801e502 <find_http_uri_type+0x232>
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	2216      	movs	r2, #22
 801e4fe:	701a      	strb	r2, [r3, #0]
 801e500:	e027      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e502:	4932      	ldr	r1, [pc, #200]	; (801e5cc <find_http_uri_type+0x2fc>)
 801e504:	68f8      	ldr	r0, [r7, #12]
 801e506:	f00f f9d3 	bl	802d8b0 <strstr>
 801e50a:	4603      	mov	r3, r0
 801e50c:	2b00      	cmp	r3, #0
 801e50e:	d106      	bne.n	801e51e <find_http_uri_type+0x24e>
 801e510:	492f      	ldr	r1, [pc, #188]	; (801e5d0 <find_http_uri_type+0x300>)
 801e512:	68f8      	ldr	r0, [r7, #12]
 801e514:	f00f f9cc 	bl	802d8b0 <strstr>
 801e518:	4603      	mov	r3, r0
 801e51a:	2b00      	cmp	r3, #0
 801e51c:	d003      	beq.n	801e526 <find_http_uri_type+0x256>
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	2217      	movs	r2, #23
 801e522:	701a      	strb	r2, [r3, #0]
 801e524:	e015      	b.n	801e552 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e526:	492b      	ldr	r1, [pc, #172]	; (801e5d4 <find_http_uri_type+0x304>)
 801e528:	68f8      	ldr	r0, [r7, #12]
 801e52a:	f00f f9c1 	bl	802d8b0 <strstr>
 801e52e:	4603      	mov	r3, r0
 801e530:	2b00      	cmp	r3, #0
 801e532:	d106      	bne.n	801e542 <find_http_uri_type+0x272>
 801e534:	4928      	ldr	r1, [pc, #160]	; (801e5d8 <find_http_uri_type+0x308>)
 801e536:	68f8      	ldr	r0, [r7, #12]
 801e538:	f00f f9ba 	bl	802d8b0 <strstr>
 801e53c:	4603      	mov	r3, r0
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d003      	beq.n	801e54a <find_http_uri_type+0x27a>
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	2218      	movs	r2, #24
 801e546:	701a      	strb	r2, [r3, #0]
 801e548:	e003      	b.n	801e552 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	2200      	movs	r2, #0
 801e54e:	701a      	strb	r2, [r3, #0]
}
 801e550:	e7ff      	b.n	801e552 <find_http_uri_type+0x282>
 801e552:	bf00      	nop
 801e554:	3710      	adds	r7, #16
 801e556:	46bd      	mov	sp, r7
 801e558:	bd80      	pop	{r7, pc}
 801e55a:	bf00      	nop
 801e55c:	08033038 	.word	0x08033038
 801e560:	08033040 	.word	0x08033040
 801e564:	08033048 	.word	0x08033048
 801e568:	08033050 	.word	0x08033050
 801e56c:	08033058 	.word	0x08033058
 801e570:	08033060 	.word	0x08033060
 801e574:	08033068 	.word	0x08033068
 801e578:	08033070 	.word	0x08033070
 801e57c:	08033078 	.word	0x08033078
 801e580:	08033080 	.word	0x08033080
 801e584:	08033088 	.word	0x08033088
 801e588:	08033090 	.word	0x08033090
 801e58c:	08033098 	.word	0x08033098
 801e590:	0803309c 	.word	0x0803309c
 801e594:	080330a0 	.word	0x080330a0
 801e598:	080330a8 	.word	0x080330a8
 801e59c:	080330b0 	.word	0x080330b0
 801e5a0:	080330b8 	.word	0x080330b8
 801e5a4:	080330c0 	.word	0x080330c0
 801e5a8:	080330c8 	.word	0x080330c8
 801e5ac:	080330d0 	.word	0x080330d0
 801e5b0:	080330d8 	.word	0x080330d8
 801e5b4:	080330e0 	.word	0x080330e0
 801e5b8:	080330e8 	.word	0x080330e8
 801e5bc:	080330f0 	.word	0x080330f0
 801e5c0:	080330f8 	.word	0x080330f8
 801e5c4:	08033100 	.word	0x08033100
 801e5c8:	08033108 	.word	0x08033108
 801e5cc:	08033110 	.word	0x08033110
 801e5d0:	08033118 	.word	0x08033118
 801e5d4:	08033120 	.word	0x08033120
 801e5d8:	08033128 	.word	0x08033128

0801e5dc <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801e5dc:	b580      	push	{r7, lr}
 801e5de:	b084      	sub	sp, #16
 801e5e0:	af00      	add	r7, sp, #0
 801e5e2:	6078      	str	r0, [r7, #4]
 801e5e4:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801e5e6:	4935      	ldr	r1, [pc, #212]	; (801e6bc <parse_http_request+0xe0>)
 801e5e8:	6838      	ldr	r0, [r7, #0]
 801e5ea:	f00f f905 	bl	802d7f8 <strtok>
 801e5ee:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801e5f0:	68fb      	ldr	r3, [r7, #12]
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d103      	bne.n	801e5fe <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801e5f6:	687b      	ldr	r3, [r7, #4]
 801e5f8:	2200      	movs	r2, #0
 801e5fa:	701a      	strb	r2, [r3, #0]
    return;
 801e5fc:	e05a      	b.n	801e6b4 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801e5fe:	4930      	ldr	r1, [pc, #192]	; (801e6c0 <parse_http_request+0xe4>)
 801e600:	68f8      	ldr	r0, [r7, #12]
 801e602:	f7f1 fded 	bl	80101e0 <strcmp>
 801e606:	4603      	mov	r3, r0
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d006      	beq.n	801e61a <parse_http_request+0x3e>
 801e60c:	492d      	ldr	r1, [pc, #180]	; (801e6c4 <parse_http_request+0xe8>)
 801e60e:	68f8      	ldr	r0, [r7, #12]
 801e610:	f7f1 fde6 	bl	80101e0 <strcmp>
 801e614:	4603      	mov	r3, r0
 801e616:	2b00      	cmp	r3, #0
 801e618:	d10a      	bne.n	801e630 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	2201      	movs	r2, #1
 801e61e:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801e620:	68fb      	ldr	r3, [r7, #12]
 801e622:	3304      	adds	r3, #4
 801e624:	4925      	ldr	r1, [pc, #148]	; (801e6bc <parse_http_request+0xe0>)
 801e626:	4618      	mov	r0, r3
 801e628:	f00f f8e6 	bl	802d7f8 <strtok>
 801e62c:	60f8      	str	r0, [r7, #12]
 801e62e:	e034      	b.n	801e69a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801e630:	4925      	ldr	r1, [pc, #148]	; (801e6c8 <parse_http_request+0xec>)
 801e632:	68f8      	ldr	r0, [r7, #12]
 801e634:	f7f1 fdd4 	bl	80101e0 <strcmp>
 801e638:	4603      	mov	r3, r0
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d006      	beq.n	801e64c <parse_http_request+0x70>
 801e63e:	4923      	ldr	r1, [pc, #140]	; (801e6cc <parse_http_request+0xf0>)
 801e640:	68f8      	ldr	r0, [r7, #12]
 801e642:	f7f1 fdcd 	bl	80101e0 <strcmp>
 801e646:	4603      	mov	r3, r0
 801e648:	2b00      	cmp	r3, #0
 801e64a:	d10a      	bne.n	801e662 <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	2202      	movs	r2, #2
 801e650:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801e652:	68fb      	ldr	r3, [r7, #12]
 801e654:	3305      	adds	r3, #5
 801e656:	4919      	ldr	r1, [pc, #100]	; (801e6bc <parse_http_request+0xe0>)
 801e658:	4618      	mov	r0, r3
 801e65a:	f00f f8cd 	bl	802d7f8 <strtok>
 801e65e:	60f8      	str	r0, [r7, #12]
 801e660:	e01b      	b.n	801e69a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801e662:	491b      	ldr	r1, [pc, #108]	; (801e6d0 <parse_http_request+0xf4>)
 801e664:	68f8      	ldr	r0, [r7, #12]
 801e666:	f7f1 fdbb 	bl	80101e0 <strcmp>
 801e66a:	4603      	mov	r3, r0
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d006      	beq.n	801e67e <parse_http_request+0xa2>
 801e670:	4918      	ldr	r1, [pc, #96]	; (801e6d4 <parse_http_request+0xf8>)
 801e672:	68f8      	ldr	r0, [r7, #12]
 801e674:	f7f1 fdb4 	bl	80101e0 <strcmp>
 801e678:	4603      	mov	r3, r0
 801e67a:	2b00      	cmp	r3, #0
 801e67c:	d10a      	bne.n	801e694 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801e67e:	68fb      	ldr	r3, [r7, #12]
 801e680:	3305      	adds	r3, #5
 801e682:	4915      	ldr	r1, [pc, #84]	; (801e6d8 <parse_http_request+0xfc>)
 801e684:	4618      	mov	r0, r3
 801e686:	f00f f8b7 	bl	802d7f8 <strtok>
 801e68a:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	2203      	movs	r2, #3
 801e690:	701a      	strb	r2, [r3, #0]
 801e692:	e002      	b.n	801e69a <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	2200      	movs	r2, #0
 801e698:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d103      	bne.n	801e6a8 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	2200      	movs	r2, #0
 801e6a4:	701a      	strb	r2, [r3, #0]
    return;
 801e6a6:	e005      	b.n	801e6b4 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	3302      	adds	r3, #2
 801e6ac:	68f9      	ldr	r1, [r7, #12]
 801e6ae:	4618      	mov	r0, r3
 801e6b0:	f00f f9f1 	bl	802da96 <strcpy>
}
 801e6b4:	3710      	adds	r7, #16
 801e6b6:	46bd      	mov	sp, r7
 801e6b8:	bd80      	pop	{r7, pc}
 801e6ba:	bf00      	nop
 801e6bc:	08033130 	.word	0x08033130
 801e6c0:	08033134 	.word	0x08033134
 801e6c4:	08033138 	.word	0x08033138
 801e6c8:	0803313c 	.word	0x0803313c
 801e6cc:	08033144 	.word	0x08033144
 801e6d0:	0803314c 	.word	0x0803314c
 801e6d4:	08033154 	.word	0x08033154
 801e6d8:	0803315c 	.word	0x0803315c

0801e6dc <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801e6dc:	b580      	push	{r7, lr}
 801e6de:	b08a      	sub	sp, #40	; 0x28
 801e6e0:	af00      	add	r7, sp, #0
 801e6e2:	6078      	str	r0, [r7, #4]
 801e6e4:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801e6e6:	2300      	movs	r3, #0
 801e6e8:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801e6ea:	4b3c      	ldr	r3, [pc, #240]	; (801e7dc <get_http_param_value+0x100>)
 801e6ec:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	837b      	strh	r3, [r7, #26]
 801e6f2:	2300      	movs	r3, #0
 801e6f4:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801e6f6:	2300      	movs	r3, #0
 801e6f8:	60bb      	str	r3, [r7, #8]
 801e6fa:	f107 030c 	add.w	r3, r7, #12
 801e6fe:	2200      	movs	r2, #0
 801e700:	601a      	str	r2, [r3, #0]
 801e702:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	2b00      	cmp	r3, #0
 801e708:	d002      	beq.n	801e710 <get_http_param_value+0x34>
 801e70a:	683b      	ldr	r3, [r7, #0]
 801e70c:	2b00      	cmp	r3, #0
 801e70e:	d101      	bne.n	801e714 <get_http_param_value+0x38>
 801e710:	2300      	movs	r3, #0
 801e712:	e05f      	b.n	801e7d4 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801e714:	f107 0308 	add.w	r3, r7, #8
 801e718:	4a31      	ldr	r2, [pc, #196]	; (801e7e0 <get_http_param_value+0x104>)
 801e71a:	4932      	ldr	r1, [pc, #200]	; (801e7e4 <get_http_param_value+0x108>)
 801e71c:	6878      	ldr	r0, [r7, #4]
 801e71e:	f000 f8b4 	bl	801e88a <mid>
 801e722:	4603      	mov	r3, r0
 801e724:	2b00      	cmp	r3, #0
 801e726:	d001      	beq.n	801e72c <get_http_param_value+0x50>
		return 0;
 801e728:	2300      	movs	r3, #0
 801e72a:	e053      	b.n	801e7d4 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801e72c:	f107 0308 	add.w	r3, r7, #8
 801e730:	210a      	movs	r1, #10
 801e732:	4618      	mov	r0, r3
 801e734:	f000 f884 	bl	801e840 <ATOI>
 801e738:	4603      	mov	r3, r0
 801e73a:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801e73c:	492a      	ldr	r1, [pc, #168]	; (801e7e8 <get_http_param_value+0x10c>)
 801e73e:	6878      	ldr	r0, [r7, #4]
 801e740:	f00f f8b6 	bl	802d8b0 <strstr>
 801e744:	6078      	str	r0, [r7, #4]
	uri += 4;
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	3304      	adds	r3, #4
 801e74a:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801e74c:	8b3b      	ldrh	r3, [r7, #24]
 801e74e:	687a      	ldr	r2, [r7, #4]
 801e750:	4413      	add	r3, r2
 801e752:	2200      	movs	r2, #0
 801e754:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801e756:	6839      	ldr	r1, [r7, #0]
 801e758:	6878      	ldr	r0, [r7, #4]
 801e75a:	f00f f8a9 	bl	802d8b0 <strstr>
 801e75e:	6238      	str	r0, [r7, #32]
 801e760:	6a3b      	ldr	r3, [r7, #32]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d033      	beq.n	801e7ce <get_http_param_value+0xf2>
	{
		test = name + 1;
 801e766:	6a3b      	ldr	r3, [r7, #32]
 801e768:	3301      	adds	r3, #1
 801e76a:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801e76c:	6838      	ldr	r0, [r7, #0]
 801e76e:	f7f1 fd97 	bl	80102a0 <strlen>
 801e772:	4603      	mov	r3, r0
 801e774:	3301      	adds	r3, #1
 801e776:	6a3a      	ldr	r2, [r7, #32]
 801e778:	4413      	add	r3, r2
 801e77a:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801e77c:	2126      	movs	r1, #38	; 0x26
 801e77e:	6a38      	ldr	r0, [r7, #32]
 801e780:	f00e ffd3 	bl	802d72a <strchr>
 801e784:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 801e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e788:	2b00      	cmp	r3, #0
 801e78a:	d106      	bne.n	801e79a <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801e78c:	6a38      	ldr	r0, [r7, #32]
 801e78e:	f7f1 fd87 	bl	80102a0 <strlen>
 801e792:	4602      	mov	r2, r0
 801e794:	6a3b      	ldr	r3, [r7, #32]
 801e796:	4413      	add	r3, r2
 801e798:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801e79a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e79c:	6a3b      	ldr	r3, [r7, #32]
 801e79e:	1ad3      	subs	r3, r2, r3
 801e7a0:	837b      	strh	r3, [r7, #26]

		if(len)
 801e7a2:	8b7b      	ldrh	r3, [r7, #26]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d00e      	beq.n	801e7c6 <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801e7a8:	8b7b      	ldrh	r3, [r7, #26]
 801e7aa:	69fa      	ldr	r2, [r7, #28]
 801e7ac:	4413      	add	r3, r2
 801e7ae:	2200      	movs	r2, #0
 801e7b0:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801e7b2:	8b7b      	ldrh	r3, [r7, #26]
 801e7b4:	461a      	mov	r2, r3
 801e7b6:	6a39      	ldr	r1, [r7, #32]
 801e7b8:	69f8      	ldr	r0, [r7, #28]
 801e7ba:	f00e fff9 	bl	802d7b0 <strncpy>
			unescape_http_url((char *)ret);
 801e7be:	69f8      	ldr	r0, [r7, #28]
 801e7c0:	f7ff fc88 	bl	801e0d4 <unescape_http_url>
 801e7c4:	e005      	b.n	801e7d2 <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801e7c6:	69fb      	ldr	r3, [r7, #28]
 801e7c8:	2200      	movs	r2, #0
 801e7ca:	701a      	strb	r2, [r3, #0]
 801e7cc:	e001      	b.n	801e7d2 <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801e7ce:	2300      	movs	r3, #0
 801e7d0:	e000      	b.n	801e7d4 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801e7d2:	69fb      	ldr	r3, [r7, #28]
}
 801e7d4:	4618      	mov	r0, r3
 801e7d6:	3728      	adds	r7, #40	; 0x28
 801e7d8:	46bd      	mov	sp, r7
 801e7da:	bd80      	pop	{r7, pc}
 801e7dc:	200009d8 	.word	0x200009d8
 801e7e0:	08033160 	.word	0x08033160
 801e7e4:	08033164 	.word	0x08033164
 801e7e8:	08033030 	.word	0x08033030

0801e7ec <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801e7ec:	b580      	push	{r7, lr}
 801e7ee:	b084      	sub	sp, #16
 801e7f0:	af00      	add	r7, sp, #0
 801e7f2:	6078      	str	r0, [r7, #4]
 801e7f4:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	d101      	bne.n	801e800 <get_http_uri_name+0x14>
 801e7fc:	2300      	movs	r3, #0
 801e7fe:	e017      	b.n	801e830 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801e800:	6879      	ldr	r1, [r7, #4]
 801e802:	6838      	ldr	r0, [r7, #0]
 801e804:	f00f f947 	bl	802da96 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801e808:	490b      	ldr	r1, [pc, #44]	; (801e838 <get_http_uri_name+0x4c>)
 801e80a:	6838      	ldr	r0, [r7, #0]
 801e80c:	f00e fff4 	bl	802d7f8 <strtok>
 801e810:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801e812:	490a      	ldr	r1, [pc, #40]	; (801e83c <get_http_uri_name+0x50>)
 801e814:	68f8      	ldr	r0, [r7, #12]
 801e816:	f7f1 fce3 	bl	80101e0 <strcmp>
 801e81a:	4603      	mov	r3, r0
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d002      	beq.n	801e826 <get_http_uri_name+0x3a>
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	3301      	adds	r3, #1
 801e824:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801e826:	68f9      	ldr	r1, [r7, #12]
 801e828:	6838      	ldr	r0, [r7, #0]
 801e82a:	f00f f934 	bl	802da96 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801e82e:	2301      	movs	r3, #1
}
 801e830:	4618      	mov	r0, r3
 801e832:	3710      	adds	r7, #16
 801e834:	46bd      	mov	sp, r7
 801e836:	bd80      	pop	{r7, pc}
 801e838:	08033178 	.word	0x08033178
 801e83c:	0803317c 	.word	0x0803317c

0801e840 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801e840:	b590      	push	{r4, r7, lr}
 801e842:	b085      	sub	sp, #20
 801e844:	af00      	add	r7, sp, #0
 801e846:	6078      	str	r0, [r7, #4]
 801e848:	460b      	mov	r3, r1
 801e84a:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801e84c:	2300      	movs	r3, #0
 801e84e:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e850:	e00d      	b.n	801e86e <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801e852:	78fb      	ldrb	r3, [r7, #3]
 801e854:	68fa      	ldr	r2, [r7, #12]
 801e856:	fb02 f403 	mul.w	r4, r2, r3
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	1c5a      	adds	r2, r3, #1
 801e85e:	607a      	str	r2, [r7, #4]
 801e860:	781b      	ldrb	r3, [r3, #0]
 801e862:	4618      	mov	r0, r3
 801e864:	f000 f843 	bl	801e8ee <C2D>
 801e868:	4603      	mov	r3, r0
 801e86a:	4423      	add	r3, r4
 801e86c:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	781b      	ldrb	r3, [r3, #0]
 801e872:	2b00      	cmp	r3, #0
 801e874:	d003      	beq.n	801e87e <ATOI+0x3e>
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	781b      	ldrb	r3, [r3, #0]
 801e87a:	2b20      	cmp	r3, #32
 801e87c:	d1e9      	bne.n	801e852 <ATOI+0x12>
	return num;
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	b29b      	uxth	r3, r3
}
 801e882:	4618      	mov	r0, r3
 801e884:	3714      	adds	r7, #20
 801e886:	46bd      	mov	sp, r7
 801e888:	bd90      	pop	{r4, r7, pc}

0801e88a <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801e88a:	b580      	push	{r7, lr}
 801e88c:	b088      	sub	sp, #32
 801e88e:	af00      	add	r7, sp, #0
 801e890:	60f8      	str	r0, [r7, #12]
 801e892:	60b9      	str	r1, [r7, #8]
 801e894:	607a      	str	r2, [r7, #4]
 801e896:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801e898:	68b9      	ldr	r1, [r7, #8]
 801e89a:	68f8      	ldr	r0, [r7, #12]
 801e89c:	f00f f808 	bl	802d8b0 <strstr>
 801e8a0:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801e8a2:	69fb      	ldr	r3, [r7, #28]
 801e8a4:	2b00      	cmp	r3, #0
 801e8a6:	d102      	bne.n	801e8ae <mid+0x24>
 801e8a8:	f04f 33ff 	mov.w	r3, #4294967295
 801e8ac:	e01b      	b.n	801e8e6 <mid+0x5c>
	sub1+=strlen((char*)s1);
 801e8ae:	68b8      	ldr	r0, [r7, #8]
 801e8b0:	f7f1 fcf6 	bl	80102a0 <strlen>
 801e8b4:	4602      	mov	r2, r0
 801e8b6:	69fb      	ldr	r3, [r7, #28]
 801e8b8:	4413      	add	r3, r2
 801e8ba:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801e8bc:	6879      	ldr	r1, [r7, #4]
 801e8be:	69f8      	ldr	r0, [r7, #28]
 801e8c0:	f00e fff6 	bl	802d8b0 <strstr>
 801e8c4:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801e8c6:	69ba      	ldr	r2, [r7, #24]
 801e8c8:	69fb      	ldr	r3, [r7, #28]
 801e8ca:	1ad3      	subs	r3, r2, r3
 801e8cc:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801e8ce:	8afb      	ldrh	r3, [r7, #22]
 801e8d0:	461a      	mov	r2, r3
 801e8d2:	69f9      	ldr	r1, [r7, #28]
 801e8d4:	6838      	ldr	r0, [r7, #0]
 801e8d6:	f00e ff6b 	bl	802d7b0 <strncpy>
	sub[n]='\0';
 801e8da:	8afb      	ldrh	r3, [r7, #22]
 801e8dc:	683a      	ldr	r2, [r7, #0]
 801e8de:	4413      	add	r3, r2
 801e8e0:	2200      	movs	r2, #0
 801e8e2:	701a      	strb	r2, [r3, #0]
	return 0;
 801e8e4:	2300      	movs	r3, #0
}
 801e8e6:	4618      	mov	r0, r3
 801e8e8:	3720      	adds	r7, #32
 801e8ea:	46bd      	mov	sp, r7
 801e8ec:	bd80      	pop	{r7, pc}

0801e8ee <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801e8ee:	b480      	push	{r7}
 801e8f0:	b083      	sub	sp, #12
 801e8f2:	af00      	add	r7, sp, #0
 801e8f4:	4603      	mov	r3, r0
 801e8f6:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801e8f8:	79fb      	ldrb	r3, [r7, #7]
 801e8fa:	2b2f      	cmp	r3, #47	; 0x2f
 801e8fc:	d906      	bls.n	801e90c <C2D+0x1e>
 801e8fe:	79fb      	ldrb	r3, [r7, #7]
 801e900:	2b39      	cmp	r3, #57	; 0x39
 801e902:	d803      	bhi.n	801e90c <C2D+0x1e>
		return c - '0';
 801e904:	79fb      	ldrb	r3, [r7, #7]
 801e906:	3b30      	subs	r3, #48	; 0x30
 801e908:	b2db      	uxtb	r3, r3
 801e90a:	e014      	b.n	801e936 <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801e90c:	79fb      	ldrb	r3, [r7, #7]
 801e90e:	2b60      	cmp	r3, #96	; 0x60
 801e910:	d906      	bls.n	801e920 <C2D+0x32>
 801e912:	79fb      	ldrb	r3, [r7, #7]
 801e914:	2b66      	cmp	r3, #102	; 0x66
 801e916:	d803      	bhi.n	801e920 <C2D+0x32>
		return 10 + c -'a';
 801e918:	79fb      	ldrb	r3, [r7, #7]
 801e91a:	3b57      	subs	r3, #87	; 0x57
 801e91c:	b2db      	uxtb	r3, r3
 801e91e:	e00a      	b.n	801e936 <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801e920:	79fb      	ldrb	r3, [r7, #7]
 801e922:	2b40      	cmp	r3, #64	; 0x40
 801e924:	d906      	bls.n	801e934 <C2D+0x46>
 801e926:	79fb      	ldrb	r3, [r7, #7]
 801e928:	2b46      	cmp	r3, #70	; 0x46
 801e92a:	d803      	bhi.n	801e934 <C2D+0x46>
		return 10 + c -'A';
 801e92c:	79fb      	ldrb	r3, [r7, #7]
 801e92e:	3b37      	subs	r3, #55	; 0x37
 801e930:	b2db      	uxtb	r3, r3
 801e932:	e000      	b.n	801e936 <C2D+0x48>

	return (char)c;
 801e934:	79fb      	ldrb	r3, [r7, #7]
}
 801e936:	4618      	mov	r0, r3
 801e938:	370c      	adds	r7, #12
 801e93a:	46bd      	mov	sp, r7
 801e93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e940:	4770      	bx	lr

0801e942 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801e942:	b480      	push	{r7}
 801e944:	af00      	add	r7, sp, #0
 801e946:	bf00      	nop
 801e948:	46bd      	mov	sp, r7
 801e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e94e:	4770      	bx	lr

0801e950 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801e950:	b480      	push	{r7}
 801e952:	af00      	add	r7, sp, #0
 801e954:	bf00      	nop
 801e956:	46bd      	mov	sp, r7
 801e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e95c:	4770      	bx	lr
	...

0801e960 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801e960:	b480      	push	{r7}
 801e962:	b085      	sub	sp, #20
 801e964:	af00      	add	r7, sp, #0
 801e966:	4603      	mov	r3, r0
 801e968:	6039      	str	r1, [r7, #0]
 801e96a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801e96c:	2300      	movs	r3, #0
 801e96e:	73fb      	strb	r3, [r7, #15]
 801e970:	e009      	b.n	801e986 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801e972:	7bfb      	ldrb	r3, [r7, #15]
 801e974:	683a      	ldr	r2, [r7, #0]
 801e976:	441a      	add	r2, r3
 801e978:	7bfb      	ldrb	r3, [r7, #15]
 801e97a:	7811      	ldrb	r1, [r2, #0]
 801e97c:	4a07      	ldr	r2, [pc, #28]	; (801e99c <httpServer_Sockinit+0x3c>)
 801e97e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801e980:	7bfb      	ldrb	r3, [r7, #15]
 801e982:	3301      	adds	r3, #1
 801e984:	73fb      	strb	r3, [r7, #15]
 801e986:	7bfa      	ldrb	r2, [r7, #15]
 801e988:	79fb      	ldrb	r3, [r7, #7]
 801e98a:	429a      	cmp	r2, r3
 801e98c:	d3f1      	bcc.n	801e972 <httpServer_Sockinit+0x12>
	}
}
 801e98e:	bf00      	nop
 801e990:	bf00      	nop
 801e992:	3714      	adds	r7, #20
 801e994:	46bd      	mov	sp, r7
 801e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e99a:	4770      	bx	lr
 801e99c:	200011d8 	.word	0x200011d8

0801e9a0 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801e9a0:	b480      	push	{r7}
 801e9a2:	b083      	sub	sp, #12
 801e9a4:	af00      	add	r7, sp, #0
 801e9a6:	4603      	mov	r3, r0
 801e9a8:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801e9aa:	79fb      	ldrb	r3, [r7, #7]
 801e9ac:	4a03      	ldr	r2, [pc, #12]	; (801e9bc <getHTTPSocketNum+0x1c>)
 801e9ae:	5cd3      	ldrb	r3, [r2, r3]
}
 801e9b0:	4618      	mov	r0, r3
 801e9b2:	370c      	adds	r7, #12
 801e9b4:	46bd      	mov	sp, r7
 801e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9ba:	4770      	bx	lr
 801e9bc:	200011d8 	.word	0x200011d8

0801e9c0 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801e9c0:	b480      	push	{r7}
 801e9c2:	b085      	sub	sp, #20
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	4603      	mov	r3, r0
 801e9c8:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801e9ca:	2300      	movs	r3, #0
 801e9cc:	73fb      	strb	r3, [r7, #15]
 801e9ce:	e00b      	b.n	801e9e8 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801e9d0:	7bfb      	ldrb	r3, [r7, #15]
 801e9d2:	4a0b      	ldr	r2, [pc, #44]	; (801ea00 <getHTTPSequenceNum+0x40>)
 801e9d4:	5cd3      	ldrb	r3, [r2, r3]
 801e9d6:	79fa      	ldrb	r2, [r7, #7]
 801e9d8:	429a      	cmp	r2, r3
 801e9da:	d102      	bne.n	801e9e2 <getHTTPSequenceNum+0x22>
 801e9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e9e0:	e007      	b.n	801e9f2 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801e9e2:	7bfb      	ldrb	r3, [r7, #15]
 801e9e4:	3301      	adds	r3, #1
 801e9e6:	73fb      	strb	r3, [r7, #15]
 801e9e8:	7bfb      	ldrb	r3, [r7, #15]
 801e9ea:	2b07      	cmp	r3, #7
 801e9ec:	d9f0      	bls.n	801e9d0 <getHTTPSequenceNum+0x10>

	return -1;
 801e9ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	3714      	adds	r7, #20
 801e9f6:	46bd      	mov	sp, r7
 801e9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9fc:	4770      	bx	lr
 801e9fe:	bf00      	nop
 801ea00:	200011d8 	.word	0x200011d8

0801ea04 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801ea04:	b580      	push	{r7, lr}
 801ea06:	b084      	sub	sp, #16
 801ea08:	af00      	add	r7, sp, #0
 801ea0a:	60f8      	str	r0, [r7, #12]
 801ea0c:	60b9      	str	r1, [r7, #8]
 801ea0e:	603b      	str	r3, [r7, #0]
 801ea10:	4613      	mov	r3, r2
 801ea12:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801ea14:	4a07      	ldr	r2, [pc, #28]	; (801ea34 <httpServer_init+0x30>)
 801ea16:	68fb      	ldr	r3, [r7, #12]
 801ea18:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801ea1a:	4a07      	ldr	r2, [pc, #28]	; (801ea38 <httpServer_init+0x34>)
 801ea1c:	68bb      	ldr	r3, [r7, #8]
 801ea1e:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801ea20:	79fb      	ldrb	r3, [r7, #7]
 801ea22:	6839      	ldr	r1, [r7, #0]
 801ea24:	4618      	mov	r0, r3
 801ea26:	f7ff ff9b 	bl	801e960 <httpServer_Sockinit>
}
 801ea2a:	bf00      	nop
 801ea2c:	3710      	adds	r7, #16
 801ea2e:	46bd      	mov	sp, r7
 801ea30:	bd80      	pop	{r7, pc}
 801ea32:	bf00      	nop
 801ea34:	200012b8 	.word	0x200012b8
 801ea38:	200012bc 	.word	0x200012bc

0801ea3c <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801ea3c:	b590      	push	{r4, r7, lr}
 801ea3e:	b089      	sub	sp, #36	; 0x24
 801ea40:	af02      	add	r7, sp, #8
 801ea42:	4603      	mov	r3, r0
 801ea44:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801ea46:	2300      	movs	r3, #0
 801ea48:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801ea4a:	4bb4      	ldr	r3, [pc, #720]	; (801ed1c <httpServer_run+0x2e0>)
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	4ab4      	ldr	r2, [pc, #720]	; (801ed20 <httpServer_run+0x2e4>)
 801ea50:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801ea52:	4bb4      	ldr	r3, [pc, #720]	; (801ed24 <httpServer_run+0x2e8>)
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	4ab4      	ldr	r2, [pc, #720]	; (801ed28 <httpServer_run+0x2ec>)
 801ea58:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801ea5a:	79fb      	ldrb	r3, [r7, #7]
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	f7ff ff9f 	bl	801e9a0 <getHTTPSocketNum>
 801ea62:	4603      	mov	r3, r0
 801ea64:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801ea66:	7bfb      	ldrb	r3, [r7, #15]
 801ea68:	009b      	lsls	r3, r3, #2
 801ea6a:	3301      	adds	r3, #1
 801ea6c:	00db      	lsls	r3, r3, #3
 801ea6e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ea72:	4618      	mov	r0, r3
 801ea74:	f7f9 fd80 	bl	8018578 <WIZCHIP_READ>
 801ea78:	4603      	mov	r3, r0
 801ea7a:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801ea7c:	7bfb      	ldrb	r3, [r7, #15]
 801ea7e:	009b      	lsls	r3, r3, #2
 801ea80:	3301      	adds	r3, #1
 801ea82:	00db      	lsls	r3, r3, #3
 801ea84:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ea88:	4618      	mov	r0, r3
 801ea8a:	f7f9 fd75 	bl	8018578 <WIZCHIP_READ>
 801ea8e:	4603      	mov	r3, r0
 801ea90:	2b1c      	cmp	r3, #28
 801ea92:	f200 813e 	bhi.w	801ed12 <httpServer_run+0x2d6>
 801ea96:	a201      	add	r2, pc, #4	; (adr r2, 801ea9c <httpServer_run+0x60>)
 801ea98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea9c:	0801ecfb 	.word	0x0801ecfb
 801eaa0:	0801ed13 	.word	0x0801ed13
 801eaa4:	0801ed13 	.word	0x0801ed13
 801eaa8:	0801ed13 	.word	0x0801ed13
 801eaac:	0801ed13 	.word	0x0801ed13
 801eab0:	0801ed13 	.word	0x0801ed13
 801eab4:	0801ed13 	.word	0x0801ed13
 801eab8:	0801ed13 	.word	0x0801ed13
 801eabc:	0801ed13 	.word	0x0801ed13
 801eac0:	0801ed13 	.word	0x0801ed13
 801eac4:	0801ed13 	.word	0x0801ed13
 801eac8:	0801ed13 	.word	0x0801ed13
 801eacc:	0801ed13 	.word	0x0801ed13
 801ead0:	0801ed13 	.word	0x0801ed13
 801ead4:	0801ed13 	.word	0x0801ed13
 801ead8:	0801ed13 	.word	0x0801ed13
 801eadc:	0801ed13 	.word	0x0801ed13
 801eae0:	0801ed13 	.word	0x0801ed13
 801eae4:	0801ed13 	.word	0x0801ed13
 801eae8:	0801ed09 	.word	0x0801ed09
 801eaec:	0801ed13 	.word	0x0801ed13
 801eaf0:	0801ed13 	.word	0x0801ed13
 801eaf4:	0801ed13 	.word	0x0801ed13
 801eaf8:	0801eb11 	.word	0x0801eb11
 801eafc:	0801ed13 	.word	0x0801ed13
 801eb00:	0801ed13 	.word	0x0801ed13
 801eb04:	0801ed13 	.word	0x0801ed13
 801eb08:	0801ed13 	.word	0x0801ed13
 801eb0c:	0801ecf1 	.word	0x0801ecf1
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801eb10:	7bfb      	ldrb	r3, [r7, #15]
 801eb12:	009b      	lsls	r3, r3, #2
 801eb14:	3301      	adds	r3, #1
 801eb16:	00db      	lsls	r3, r3, #3
 801eb18:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801eb1c:	4618      	mov	r0, r3
 801eb1e:	f7f9 fd2b 	bl	8018578 <WIZCHIP_READ>
 801eb22:	4603      	mov	r3, r0
 801eb24:	f003 0301 	and.w	r3, r3, #1
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d009      	beq.n	801eb40 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801eb2c:	7bfb      	ldrb	r3, [r7, #15]
 801eb2e:	009b      	lsls	r3, r3, #2
 801eb30:	3301      	adds	r3, #1
 801eb32:	00db      	lsls	r3, r3, #3
 801eb34:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801eb38:	2101      	movs	r1, #1
 801eb3a:	4618      	mov	r0, r3
 801eb3c:	f7f9 fd68 	bl	8018610 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801eb40:	79fa      	ldrb	r2, [r7, #7]
 801eb42:	497a      	ldr	r1, [pc, #488]	; (801ed2c <httpServer_run+0x2f0>)
 801eb44:	4613      	mov	r3, r2
 801eb46:	011b      	lsls	r3, r3, #4
 801eb48:	4413      	add	r3, r2
 801eb4a:	009b      	lsls	r3, r3, #2
 801eb4c:	440b      	add	r3, r1
 801eb4e:	781b      	ldrb	r3, [r3, #0]
 801eb50:	2b04      	cmp	r3, #4
 801eb52:	f000 809b 	beq.w	801ec8c <httpServer_run+0x250>
 801eb56:	2b04      	cmp	r3, #4
 801eb58:	f300 80c4 	bgt.w	801ece4 <httpServer_run+0x2a8>
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d002      	beq.n	801eb66 <httpServer_run+0x12a>
 801eb60:	2b03      	cmp	r3, #3
 801eb62:	d06e      	beq.n	801ec42 <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801eb64:	e0be      	b.n	801ece4 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801eb66:	7bfb      	ldrb	r3, [r7, #15]
 801eb68:	4618      	mov	r0, r3
 801eb6a:	f7f9 feaa 	bl	80188c2 <getSn_RX_RSR>
 801eb6e:	4603      	mov	r3, r0
 801eb70:	82fb      	strh	r3, [r7, #22]
 801eb72:	8afb      	ldrh	r3, [r7, #22]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	f000 80b7 	beq.w	801ece8 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801eb7a:	8afb      	ldrh	r3, [r7, #22]
 801eb7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eb80:	d902      	bls.n	801eb88 <httpServer_run+0x14c>
 801eb82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801eb86:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801eb88:	4b65      	ldr	r3, [pc, #404]	; (801ed20 <httpServer_run+0x2e4>)
 801eb8a:	6819      	ldr	r1, [r3, #0]
 801eb8c:	8afa      	ldrh	r2, [r7, #22]
 801eb8e:	7bfb      	ldrb	r3, [r7, #15]
 801eb90:	4618      	mov	r0, r3
 801eb92:	f7fa fc09 	bl	80193a8 <recv>
 801eb96:	4603      	mov	r3, r0
 801eb98:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801eb9a:	4b61      	ldr	r3, [pc, #388]	; (801ed20 <httpServer_run+0x2e4>)
 801eb9c:	681a      	ldr	r2, [r3, #0]
 801eb9e:	8afb      	ldrh	r3, [r7, #22]
 801eba0:	4413      	add	r3, r2
 801eba2:	2200      	movs	r2, #0
 801eba4:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801eba6:	4b60      	ldr	r3, [pc, #384]	; (801ed28 <httpServer_run+0x2ec>)
 801eba8:	681b      	ldr	r3, [r3, #0]
 801ebaa:	4a5d      	ldr	r2, [pc, #372]	; (801ed20 <httpServer_run+0x2e4>)
 801ebac:	6812      	ldr	r2, [r2, #0]
 801ebae:	4611      	mov	r1, r2
 801ebb0:	4618      	mov	r0, r3
 801ebb2:	f7ff fd13 	bl	801e5dc <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801ebb6:	4b5c      	ldr	r3, [pc, #368]	; (801ed28 <httpServer_run+0x2ec>)
 801ebb8:	681a      	ldr	r2, [r3, #0]
 801ebba:	7bfb      	ldrb	r3, [r7, #15]
 801ebbc:	4611      	mov	r1, r2
 801ebbe:	4618      	mov	r0, r3
 801ebc0:	f000 fac4 	bl	801f14c <http_process_handler>
						gettime = get_httpServer_timecount();
 801ebc4:	f000 fd04 	bl	801f5d0 <get_httpServer_timecount>
 801ebc8:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ebca:	e006      	b.n	801ebda <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801ebcc:	f000 fd00 	bl	801f5d0 <get_httpServer_timecount>
 801ebd0:	4602      	mov	r2, r0
 801ebd2:	693b      	ldr	r3, [r7, #16]
 801ebd4:	1ad3      	subs	r3, r2, r3
 801ebd6:	2b03      	cmp	r3, #3
 801ebd8:	d813      	bhi.n	801ec02 <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ebda:	7bfb      	ldrb	r3, [r7, #15]
 801ebdc:	4618      	mov	r0, r3
 801ebde:	f7f9 fe25 	bl	801882c <getSn_TX_FSR>
 801ebe2:	4603      	mov	r3, r0
 801ebe4:	461c      	mov	r4, r3
 801ebe6:	7bfb      	ldrb	r3, [r7, #15]
 801ebe8:	009b      	lsls	r3, r3, #2
 801ebea:	3301      	adds	r3, #1
 801ebec:	00db      	lsls	r3, r3, #3
 801ebee:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801ebf2:	4618      	mov	r0, r3
 801ebf4:	f7f9 fcc0 	bl	8018578 <WIZCHIP_READ>
 801ebf8:	4603      	mov	r3, r0
 801ebfa:	029b      	lsls	r3, r3, #10
 801ebfc:	429c      	cmp	r4, r3
 801ebfe:	d1e5      	bne.n	801ebcc <httpServer_run+0x190>
 801ec00:	e000      	b.n	801ec04 <httpServer_run+0x1c8>
								break;
 801ec02:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801ec04:	79fa      	ldrb	r2, [r7, #7]
 801ec06:	4949      	ldr	r1, [pc, #292]	; (801ed2c <httpServer_run+0x2f0>)
 801ec08:	4613      	mov	r3, r2
 801ec0a:	011b      	lsls	r3, r3, #4
 801ec0c:	4413      	add	r3, r2
 801ec0e:	009b      	lsls	r3, r3, #2
 801ec10:	440b      	add	r3, r1
 801ec12:	3338      	adds	r3, #56	; 0x38
 801ec14:	681b      	ldr	r3, [r3, #0]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d009      	beq.n	801ec2e <httpServer_run+0x1f2>
 801ec1a:	79fa      	ldrb	r2, [r7, #7]
 801ec1c:	4943      	ldr	r1, [pc, #268]	; (801ed2c <httpServer_run+0x2f0>)
 801ec1e:	4613      	mov	r3, r2
 801ec20:	011b      	lsls	r3, r3, #4
 801ec22:	4413      	add	r3, r2
 801ec24:	009b      	lsls	r3, r3, #2
 801ec26:	440b      	add	r3, r1
 801ec28:	2203      	movs	r2, #3
 801ec2a:	701a      	strb	r2, [r3, #0]
					break;
 801ec2c:	e05c      	b.n	801ece8 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801ec2e:	79fa      	ldrb	r2, [r7, #7]
 801ec30:	493e      	ldr	r1, [pc, #248]	; (801ed2c <httpServer_run+0x2f0>)
 801ec32:	4613      	mov	r3, r2
 801ec34:	011b      	lsls	r3, r3, #4
 801ec36:	4413      	add	r3, r2
 801ec38:	009b      	lsls	r3, r3, #2
 801ec3a:	440b      	add	r3, r1
 801ec3c:	2204      	movs	r2, #4
 801ec3e:	701a      	strb	r2, [r3, #0]
					break;
 801ec40:	e052      	b.n	801ece8 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801ec42:	79fa      	ldrb	r2, [r7, #7]
 801ec44:	4613      	mov	r3, r2
 801ec46:	011b      	lsls	r3, r3, #4
 801ec48:	4413      	add	r3, r2
 801ec4a:	009b      	lsls	r3, r3, #2
 801ec4c:	4a37      	ldr	r2, [pc, #220]	; (801ed2c <httpServer_run+0x2f0>)
 801ec4e:	4413      	add	r3, r2
 801ec50:	1c59      	adds	r1, r3, #1
 801ec52:	4b37      	ldr	r3, [pc, #220]	; (801ed30 <httpServer_run+0x2f4>)
 801ec54:	681a      	ldr	r2, [r3, #0]
 801ec56:	7bf8      	ldrb	r0, [r7, #15]
 801ec58:	2300      	movs	r3, #0
 801ec5a:	9300      	str	r3, [sp, #0]
 801ec5c:	2300      	movs	r3, #0
 801ec5e:	f000 f8d5 	bl	801ee0c <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801ec62:	79fa      	ldrb	r2, [r7, #7]
 801ec64:	4931      	ldr	r1, [pc, #196]	; (801ed2c <httpServer_run+0x2f0>)
 801ec66:	4613      	mov	r3, r2
 801ec68:	011b      	lsls	r3, r3, #4
 801ec6a:	4413      	add	r3, r2
 801ec6c:	009b      	lsls	r3, r3, #2
 801ec6e:	440b      	add	r3, r1
 801ec70:	3338      	adds	r3, #56	; 0x38
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	2b00      	cmp	r3, #0
 801ec76:	d139      	bne.n	801ecec <httpServer_run+0x2b0>
 801ec78:	79fa      	ldrb	r2, [r7, #7]
 801ec7a:	492c      	ldr	r1, [pc, #176]	; (801ed2c <httpServer_run+0x2f0>)
 801ec7c:	4613      	mov	r3, r2
 801ec7e:	011b      	lsls	r3, r3, #4
 801ec80:	4413      	add	r3, r2
 801ec82:	009b      	lsls	r3, r3, #2
 801ec84:	440b      	add	r3, r1
 801ec86:	2204      	movs	r2, #4
 801ec88:	701a      	strb	r2, [r3, #0]
					break;
 801ec8a:	e02f      	b.n	801ecec <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801ec8c:	79fa      	ldrb	r2, [r7, #7]
 801ec8e:	4927      	ldr	r1, [pc, #156]	; (801ed2c <httpServer_run+0x2f0>)
 801ec90:	4613      	mov	r3, r2
 801ec92:	011b      	lsls	r3, r3, #4
 801ec94:	4413      	add	r3, r2
 801ec96:	009b      	lsls	r3, r3, #2
 801ec98:	440b      	add	r3, r1
 801ec9a:	3338      	adds	r3, #56	; 0x38
 801ec9c:	2200      	movs	r2, #0
 801ec9e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801eca0:	79fa      	ldrb	r2, [r7, #7]
 801eca2:	4922      	ldr	r1, [pc, #136]	; (801ed2c <httpServer_run+0x2f0>)
 801eca4:	4613      	mov	r3, r2
 801eca6:	011b      	lsls	r3, r3, #4
 801eca8:	4413      	add	r3, r2
 801ecaa:	009b      	lsls	r3, r3, #2
 801ecac:	440b      	add	r3, r1
 801ecae:	333c      	adds	r3, #60	; 0x3c
 801ecb0:	2200      	movs	r2, #0
 801ecb2:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801ecb4:	79fa      	ldrb	r2, [r7, #7]
 801ecb6:	491d      	ldr	r1, [pc, #116]	; (801ed2c <httpServer_run+0x2f0>)
 801ecb8:	4613      	mov	r3, r2
 801ecba:	011b      	lsls	r3, r3, #4
 801ecbc:	4413      	add	r3, r2
 801ecbe:	009b      	lsls	r3, r3, #2
 801ecc0:	440b      	add	r3, r1
 801ecc2:	3334      	adds	r3, #52	; 0x34
 801ecc4:	2200      	movs	r2, #0
 801ecc6:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801ecc8:	79fa      	ldrb	r2, [r7, #7]
 801ecca:	4918      	ldr	r1, [pc, #96]	; (801ed2c <httpServer_run+0x2f0>)
 801eccc:	4613      	mov	r3, r2
 801ecce:	011b      	lsls	r3, r3, #4
 801ecd0:	4413      	add	r3, r2
 801ecd2:	009b      	lsls	r3, r3, #2
 801ecd4:	440b      	add	r3, r1
 801ecd6:	2200      	movs	r2, #0
 801ecd8:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801ecda:	7bfb      	ldrb	r3, [r7, #15]
 801ecdc:	4618      	mov	r0, r3
 801ecde:	f000 fa13 	bl	801f108 <http_disconnect>
					break;
 801ece2:	e004      	b.n	801ecee <httpServer_run+0x2b2>
					break;
 801ece4:	bf00      	nop
 801ece6:	e015      	b.n	801ed14 <httpServer_run+0x2d8>
					break;
 801ece8:	bf00      	nop
 801ecea:	e013      	b.n	801ed14 <httpServer_run+0x2d8>
					break;
 801ecec:	bf00      	nop
			}
			break;
 801ecee:	e011      	b.n	801ed14 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801ecf0:	7bfb      	ldrb	r3, [r7, #15]
 801ecf2:	4618      	mov	r0, r3
 801ecf4:	f7fa f9e8 	bl	80190c8 <disconnect>
			break;
 801ecf8:	e00c      	b.n	801ed14 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801ecfa:	7bf8      	ldrb	r0, [r7, #15]
 801ecfc:	2300      	movs	r3, #0
 801ecfe:	2250      	movs	r2, #80	; 0x50
 801ed00:	2101      	movs	r1, #1
 801ed02:	f7f9 ff29 	bl	8018b58 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801ed06:	e005      	b.n	801ed14 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801ed08:	7bfb      	ldrb	r3, [r7, #15]
 801ed0a:	4618      	mov	r0, r3
 801ed0c:	f7fa f8a6 	bl	8018e5c <listen>
			break;
 801ed10:	e000      	b.n	801ed14 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801ed12:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801ed14:	bf00      	nop
 801ed16:	371c      	adds	r7, #28
 801ed18:	46bd      	mov	sp, r7
 801ed1a:	bd90      	pop	{r4, r7, pc}
 801ed1c:	200012bc 	.word	0x200012bc
 801ed20:	200011e0 	.word	0x200011e0
 801ed24:	200012b8 	.word	0x200012b8
 801ed28:	200011e4 	.word	0x200011e4
 801ed2c:	200012c4 	.word	0x200012c4
 801ed30:	200011e8 	.word	0x200011e8

0801ed34 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801ed34:	b590      	push	{r4, r7, lr}
 801ed36:	b083      	sub	sp, #12
 801ed38:	af00      	add	r7, sp, #0
 801ed3a:	603a      	str	r2, [r7, #0]
 801ed3c:	461a      	mov	r2, r3
 801ed3e:	4603      	mov	r3, r0
 801ed40:	71fb      	strb	r3, [r7, #7]
 801ed42:	460b      	mov	r3, r1
 801ed44:	71bb      	strb	r3, [r7, #6]
 801ed46:	4613      	mov	r3, r2
 801ed48:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801ed4a:	88bb      	ldrh	r3, [r7, #4]
 801ed4c:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ed50:	d029      	beq.n	801eda6 <send_http_response_header+0x72>
 801ed52:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801ed56:	dc3a      	bgt.n	801edce <send_http_response_header+0x9a>
 801ed58:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ed5c:	d019      	beq.n	801ed92 <send_http_response_header+0x5e>
 801ed5e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801ed62:	dc34      	bgt.n	801edce <send_http_response_header+0x9a>
 801ed64:	2bc8      	cmp	r3, #200	; 0xc8
 801ed66:	d003      	beq.n	801ed70 <send_http_response_header+0x3c>
 801ed68:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 801ed6c:	d025      	beq.n	801edba <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801ed6e:	e02e      	b.n	801edce <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801ed70:	79bb      	ldrb	r3, [r7, #6]
 801ed72:	2b08      	cmp	r3, #8
 801ed74:	d00a      	beq.n	801ed8c <send_http_response_header+0x58>
 801ed76:	79bb      	ldrb	r3, [r7, #6]
 801ed78:	2b09      	cmp	r3, #9
 801ed7a:	d007      	beq.n	801ed8c <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801ed7c:	4b1f      	ldr	r3, [pc, #124]	; (801edfc <send_http_response_header+0xc8>)
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	79b9      	ldrb	r1, [r7, #6]
 801ed82:	683a      	ldr	r2, [r7, #0]
 801ed84:	4618      	mov	r0, r3
 801ed86:	f7ff f9ed 	bl	801e164 <make_http_response_head>
			break;
 801ed8a:	e021      	b.n	801edd0 <send_http_response_header+0x9c>
				http_status = 0;
 801ed8c:	2300      	movs	r3, #0
 801ed8e:	80bb      	strh	r3, [r7, #4]
			break;
 801ed90:	e01e      	b.n	801edd0 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801ed92:	4b1a      	ldr	r3, [pc, #104]	; (801edfc <send_http_response_header+0xc8>)
 801ed94:	681b      	ldr	r3, [r3, #0]
 801ed96:	4a1a      	ldr	r2, [pc, #104]	; (801ee00 <send_http_response_header+0xcc>)
 801ed98:	4618      	mov	r0, r3
 801ed9a:	4611      	mov	r1, r2
 801ed9c:	2376      	movs	r3, #118	; 0x76
 801ed9e:	461a      	mov	r2, r3
 801eda0:	f00e fe81 	bl	802daa6 <memcpy>
			break;
 801eda4:	e014      	b.n	801edd0 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801eda6:	4b15      	ldr	r3, [pc, #84]	; (801edfc <send_http_response_header+0xc8>)
 801eda8:	681b      	ldr	r3, [r3, #0]
 801edaa:	4a16      	ldr	r2, [pc, #88]	; (801ee04 <send_http_response_header+0xd0>)
 801edac:	4618      	mov	r0, r3
 801edae:	4611      	mov	r1, r2
 801edb0:	2399      	movs	r3, #153	; 0x99
 801edb2:	461a      	mov	r2, r3
 801edb4:	f00e fe77 	bl	802daa6 <memcpy>
			break;
 801edb8:	e00a      	b.n	801edd0 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801edba:	4b10      	ldr	r3, [pc, #64]	; (801edfc <send_http_response_header+0xc8>)
 801edbc:	681b      	ldr	r3, [r3, #0]
 801edbe:	4a12      	ldr	r2, [pc, #72]	; (801ee08 <send_http_response_header+0xd4>)
 801edc0:	4618      	mov	r0, r3
 801edc2:	4611      	mov	r1, r2
 801edc4:	239e      	movs	r3, #158	; 0x9e
 801edc6:	461a      	mov	r2, r3
 801edc8:	f00e fe6d 	bl	802daa6 <memcpy>
			break;
 801edcc:	e000      	b.n	801edd0 <send_http_response_header+0x9c>
			break;
 801edce:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801edd0:	88bb      	ldrh	r3, [r7, #4]
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d00d      	beq.n	801edf2 <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801edd6:	4b09      	ldr	r3, [pc, #36]	; (801edfc <send_http_response_header+0xc8>)
 801edd8:	681c      	ldr	r4, [r3, #0]
 801edda:	4b08      	ldr	r3, [pc, #32]	; (801edfc <send_http_response_header+0xc8>)
 801eddc:	681b      	ldr	r3, [r3, #0]
 801edde:	4618      	mov	r0, r3
 801ede0:	f7f1 fa5e 	bl	80102a0 <strlen>
 801ede4:	4603      	mov	r3, r0
 801ede6:	b29a      	uxth	r2, r3
 801ede8:	79fb      	ldrb	r3, [r7, #7]
 801edea:	4621      	mov	r1, r4
 801edec:	4618      	mov	r0, r3
 801edee:	f7fa f9e1 	bl	80191b4 <send>
	}
}
 801edf2:	bf00      	nop
 801edf4:	370c      	adds	r7, #12
 801edf6:	46bd      	mov	sp, r7
 801edf8:	bd90      	pop	{r4, r7, pc}
 801edfa:	bf00      	nop
 801edfc:	200011e8 	.word	0x200011e8
 801ee00:	080344f4 	.word	0x080344f4
 801ee04:	08034458 	.word	0x08034458
 801ee08:	0803456c 	.word	0x0803456c

0801ee0c <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801ee0c:	b580      	push	{r7, lr}
 801ee0e:	b0a6      	sub	sp, #152	; 0x98
 801ee10:	af00      	add	r7, sp, #0
 801ee12:	60b9      	str	r1, [r7, #8]
 801ee14:	607a      	str	r2, [r7, #4]
 801ee16:	603b      	str	r3, [r7, #0]
 801ee18:	4603      	mov	r3, r0
 801ee1a:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801ee1c:	2300      	movs	r3, #0
 801ee1e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801ee22:	2300      	movs	r3, #0
 801ee24:	613b      	str	r3, [r7, #16]
 801ee26:	f107 0314 	add.w	r3, r7, #20
 801ee2a:	227c      	movs	r2, #124	; 0x7c
 801ee2c:	2100      	movs	r1, #0
 801ee2e:	4618      	mov	r0, r3
 801ee30:	f00e fc64 	bl	802d6fc <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801ee34:	7bfb      	ldrb	r3, [r7, #15]
 801ee36:	4618      	mov	r0, r3
 801ee38:	f7ff fdc2 	bl	801e9c0 <getHTTPSequenceNum>
 801ee3c:	4603      	mov	r3, r0
 801ee3e:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 801ee42:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 801ee46:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ee4a:	f000 812e 	beq.w	801f0aa <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801ee4e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee52:	4998      	ldr	r1, [pc, #608]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ee54:	4613      	mov	r3, r2
 801ee56:	011b      	lsls	r3, r3, #4
 801ee58:	4413      	add	r3, r2
 801ee5a:	009b      	lsls	r3, r3, #2
 801ee5c:	440b      	add	r3, r1
 801ee5e:	3338      	adds	r3, #56	; 0x38
 801ee60:	681b      	ldr	r3, [r3, #0]
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d140      	bne.n	801eee8 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801ee66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ee6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ee6e:	d336      	bcc.n	801eede <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801ee70:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee74:	498f      	ldr	r1, [pc, #572]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ee76:	4613      	mov	r3, r2
 801ee78:	011b      	lsls	r3, r3, #4
 801ee7a:	4413      	add	r3, r2
 801ee7c:	009b      	lsls	r3, r3, #2
 801ee7e:	440b      	add	r3, r1
 801ee80:	3334      	adds	r3, #52	; 0x34
 801ee82:	683a      	ldr	r2, [r7, #0]
 801ee84:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801ee86:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ee8a:	498a      	ldr	r1, [pc, #552]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ee8c:	4613      	mov	r3, r2
 801ee8e:	011b      	lsls	r3, r3, #4
 801ee90:	4413      	add	r3, r2
 801ee92:	009b      	lsls	r3, r3, #2
 801ee94:	440b      	add	r3, r1
 801ee96:	3338      	adds	r3, #56	; 0x38
 801ee98:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801ee9c:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801ee9e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801eea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801eea6:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eeaa:	4613      	mov	r3, r2
 801eeac:	011b      	lsls	r3, r3, #4
 801eeae:	4413      	add	r3, r2
 801eeb0:	009b      	lsls	r3, r3, #2
 801eeb2:	4a80      	ldr	r2, [pc, #512]	; (801f0b4 <send_http_response_body+0x2a8>)
 801eeb4:	4413      	add	r3, r2
 801eeb6:	3301      	adds	r3, #1
 801eeb8:	2232      	movs	r2, #50	; 0x32
 801eeba:	2100      	movs	r1, #0
 801eebc:	4618      	mov	r0, r3
 801eebe:	f00e fc1d 	bl	802d6fc <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801eec2:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eec6:	4613      	mov	r3, r2
 801eec8:	011b      	lsls	r3, r3, #4
 801eeca:	4413      	add	r3, r2
 801eecc:	009b      	lsls	r3, r3, #2
 801eece:	4a79      	ldr	r2, [pc, #484]	; (801f0b4 <send_http_response_body+0x2a8>)
 801eed0:	4413      	add	r3, r2
 801eed2:	3301      	adds	r3, #1
 801eed4:	68b9      	ldr	r1, [r7, #8]
 801eed6:	4618      	mov	r0, r3
 801eed8:	f00e fddd 	bl	802da96 <strcpy>
 801eedc:	e028      	b.n	801ef30 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801eede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801eee2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801eee6:	e023      	b.n	801ef30 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801eee8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801eeec:	4971      	ldr	r1, [pc, #452]	; (801f0b4 <send_http_response_body+0x2a8>)
 801eeee:	4613      	mov	r3, r2
 801eef0:	011b      	lsls	r3, r3, #4
 801eef2:	4413      	add	r3, r2
 801eef4:	009b      	lsls	r3, r3, #2
 801eef6:	440b      	add	r3, r1
 801eef8:	3338      	adds	r3, #56	; 0x38
 801eefa:	6819      	ldr	r1, [r3, #0]
 801eefc:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef00:	486c      	ldr	r0, [pc, #432]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ef02:	4613      	mov	r3, r2
 801ef04:	011b      	lsls	r3, r3, #4
 801ef06:	4413      	add	r3, r2
 801ef08:	009b      	lsls	r3, r3, #2
 801ef0a:	4403      	add	r3, r0
 801ef0c:	333c      	adds	r3, #60	; 0x3c
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	1acb      	subs	r3, r1, r3
 801ef12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801ef16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ef1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ef1e:	d304      	bcc.n	801ef2a <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801ef20:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801ef24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ef28:	e002      	b.n	801ef30 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801ef2a:	2301      	movs	r3, #1
 801ef2c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801ef30:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef34:	495f      	ldr	r1, [pc, #380]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ef36:	4613      	mov	r3, r2
 801ef38:	011b      	lsls	r3, r3, #4
 801ef3a:	4413      	add	r3, r2
 801ef3c:	009b      	lsls	r3, r3, #2
 801ef3e:	440b      	add	r3, r1
 801ef40:	3340      	adds	r3, #64	; 0x40
 801ef42:	781b      	ldrb	r3, [r3, #0]
 801ef44:	2b01      	cmp	r3, #1
 801ef46:	d129      	bne.n	801ef9c <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801ef48:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef4c:	4959      	ldr	r1, [pc, #356]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ef4e:	4613      	mov	r3, r2
 801ef50:	011b      	lsls	r3, r3, #4
 801ef52:	4413      	add	r3, r2
 801ef54:	009b      	lsls	r3, r3, #2
 801ef56:	440b      	add	r3, r1
 801ef58:	3338      	adds	r3, #56	; 0x38
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d00a      	beq.n	801ef76 <send_http_response_body+0x16a>
 801ef60:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef64:	4953      	ldr	r1, [pc, #332]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ef66:	4613      	mov	r3, r2
 801ef68:	011b      	lsls	r3, r3, #4
 801ef6a:	4413      	add	r3, r2
 801ef6c:	009b      	lsls	r3, r3, #2
 801ef6e:	440b      	add	r3, r1
 801ef70:	3334      	adds	r3, #52	; 0x34
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801ef76:	683b      	ldr	r3, [r7, #0]
 801ef78:	b298      	uxth	r0, r3
 801ef7a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801ef7e:	494d      	ldr	r1, [pc, #308]	; (801f0b4 <send_http_response_body+0x2a8>)
 801ef80:	4613      	mov	r3, r2
 801ef82:	011b      	lsls	r3, r3, #4
 801ef84:	4413      	add	r3, r2
 801ef86:	009b      	lsls	r3, r3, #2
 801ef88:	440b      	add	r3, r1
 801ef8a:	333c      	adds	r3, #60	; 0x3c
 801ef8c:	681a      	ldr	r2, [r3, #0]
 801ef8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ef92:	b29b      	uxth	r3, r3
 801ef94:	6879      	ldr	r1, [r7, #4]
 801ef96:	f000 fbc9 	bl	801f72c <read_userReg_webContent>
 801ef9a:	e035      	b.n	801f008 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801ef9c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801efa0:	4944      	ldr	r1, [pc, #272]	; (801f0b4 <send_http_response_body+0x2a8>)
 801efa2:	4613      	mov	r3, r2
 801efa4:	011b      	lsls	r3, r3, #4
 801efa6:	4413      	add	r3, r2
 801efa8:	009b      	lsls	r3, r3, #2
 801efaa:	440b      	add	r3, r1
 801efac:	3340      	adds	r3, #64	; 0x40
 801efae:	781b      	ldrb	r3, [r3, #0]
 801efb0:	2b04      	cmp	r3, #4
 801efb2:	d126      	bne.n	801f002 <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801efb4:	f107 0310 	add.w	r3, r7, #16
 801efb8:	2280      	movs	r2, #128	; 0x80
 801efba:	2100      	movs	r1, #0
 801efbc:	4618      	mov	r0, r3
 801efbe:	f00e fb9d 	bl	802d6fc <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801efc2:	f107 0310 	add.w	r3, r7, #16
 801efc6:	4a3c      	ldr	r2, [pc, #240]	; (801f0b8 <send_http_response_body+0x2ac>)
 801efc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801efcc:	6018      	str	r0, [r3, #0]
 801efce:	3304      	adds	r3, #4
 801efd0:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801efd2:	f107 0310 	add.w	r3, r7, #16
 801efd6:	68b9      	ldr	r1, [r7, #8]
 801efd8:	4618      	mov	r0, r3
 801efda:	f00e fb97 	bl	802d70c <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801efde:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801efe2:	4934      	ldr	r1, [pc, #208]	; (801f0b4 <send_http_response_body+0x2a8>)
 801efe4:	4613      	mov	r3, r2
 801efe6:	011b      	lsls	r3, r3, #4
 801efe8:	4413      	add	r3, r2
 801efea:	009b      	lsls	r3, r3, #2
 801efec:	440b      	add	r3, r1
 801efee:	333c      	adds	r3, #60	; 0x3c
 801eff0:	681a      	ldr	r2, [r3, #0]
 801eff2:	f107 0010 	add.w	r0, r7, #16
 801eff6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801effa:	6879      	ldr	r1, [r7, #4]
 801effc:	f00b fdf6 	bl	802abec <spi_fs_read_file_offset>
 801f000:	e002      	b.n	801f008 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801f002:	2300      	movs	r3, #0
 801f004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801f008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f00c:	2b00      	cmp	r3, #0
 801f00e:	d008      	beq.n	801f022 <send_http_response_body+0x216>
 801f010:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f014:	b29a      	uxth	r2, r3
 801f016:	7bfb      	ldrb	r3, [r7, #15]
 801f018:	6879      	ldr	r1, [r7, #4]
 801f01a:	4618      	mov	r0, r3
 801f01c:	f7fa f8ca 	bl	80191b4 <send>
 801f020:	e002      	b.n	801f028 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801f022:	2301      	movs	r3, #1
 801f024:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 801f028:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d024      	beq.n	801f07a <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f030:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f034:	491f      	ldr	r1, [pc, #124]	; (801f0b4 <send_http_response_body+0x2a8>)
 801f036:	4613      	mov	r3, r2
 801f038:	011b      	lsls	r3, r3, #4
 801f03a:	4413      	add	r3, r2
 801f03c:	009b      	lsls	r3, r3, #2
 801f03e:	440b      	add	r3, r1
 801f040:	3334      	adds	r3, #52	; 0x34
 801f042:	2200      	movs	r2, #0
 801f044:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f046:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f04a:	491a      	ldr	r1, [pc, #104]	; (801f0b4 <send_http_response_body+0x2a8>)
 801f04c:	4613      	mov	r3, r2
 801f04e:	011b      	lsls	r3, r3, #4
 801f050:	4413      	add	r3, r2
 801f052:	009b      	lsls	r3, r3, #2
 801f054:	440b      	add	r3, r1
 801f056:	3338      	adds	r3, #56	; 0x38
 801f058:	2200      	movs	r2, #0
 801f05a:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f05c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f060:	4914      	ldr	r1, [pc, #80]	; (801f0b4 <send_http_response_body+0x2a8>)
 801f062:	4613      	mov	r3, r2
 801f064:	011b      	lsls	r3, r3, #4
 801f066:	4413      	add	r3, r2
 801f068:	009b      	lsls	r3, r3, #2
 801f06a:	440b      	add	r3, r1
 801f06c:	333c      	adds	r3, #60	; 0x3c
 801f06e:	2200      	movs	r2, #0
 801f070:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f072:	2300      	movs	r3, #0
 801f074:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 801f078:	e018      	b.n	801f0ac <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f07a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f07e:	490d      	ldr	r1, [pc, #52]	; (801f0b4 <send_http_response_body+0x2a8>)
 801f080:	4613      	mov	r3, r2
 801f082:	011b      	lsls	r3, r3, #4
 801f084:	4413      	add	r3, r2
 801f086:	009b      	lsls	r3, r3, #2
 801f088:	440b      	add	r3, r1
 801f08a:	333c      	adds	r3, #60	; 0x3c
 801f08c:	6819      	ldr	r1, [r3, #0]
 801f08e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f092:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f096:	4419      	add	r1, r3
 801f098:	4806      	ldr	r0, [pc, #24]	; (801f0b4 <send_http_response_body+0x2a8>)
 801f09a:	4613      	mov	r3, r2
 801f09c:	011b      	lsls	r3, r3, #4
 801f09e:	4413      	add	r3, r2
 801f0a0:	009b      	lsls	r3, r3, #2
 801f0a2:	4403      	add	r3, r0
 801f0a4:	333c      	adds	r3, #60	; 0x3c
 801f0a6:	6019      	str	r1, [r3, #0]
 801f0a8:	e000      	b.n	801f0ac <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f0aa:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801f0ac:	3798      	adds	r7, #152	; 0x98
 801f0ae:	46bd      	mov	sp, r7
 801f0b0:	bd80      	pop	{r7, pc}
 801f0b2:	bf00      	nop
 801f0b4:	200012c4 	.word	0x200012c4
 801f0b8:	08033184 	.word	0x08033184

0801f0bc <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801f0bc:	b580      	push	{r7, lr}
 801f0be:	b088      	sub	sp, #32
 801f0c0:	af02      	add	r7, sp, #8
 801f0c2:	60b9      	str	r1, [r7, #8]
 801f0c4:	607a      	str	r2, [r7, #4]
 801f0c6:	461a      	mov	r2, r3
 801f0c8:	4603      	mov	r3, r0
 801f0ca:	73fb      	strb	r3, [r7, #15]
 801f0cc:	4613      	mov	r3, r2
 801f0ce:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801f0d0:	2300      	movs	r3, #0
 801f0d2:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801f0d4:	89ba      	ldrh	r2, [r7, #12]
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	9300      	str	r3, [sp, #0]
 801f0da:	4613      	mov	r3, r2
 801f0dc:	4a08      	ldr	r2, [pc, #32]	; (801f100 <send_http_response_cgi+0x44>)
 801f0de:	4909      	ldr	r1, [pc, #36]	; (801f104 <send_http_response_cgi+0x48>)
 801f0e0:	68b8      	ldr	r0, [r7, #8]
 801f0e2:	f00e f9bb 	bl	802d45c <siprintf>
 801f0e6:	4603      	mov	r3, r0
 801f0e8:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f0ea:	8afa      	ldrh	r2, [r7, #22]
 801f0ec:	7bfb      	ldrb	r3, [r7, #15]
 801f0ee:	68b9      	ldr	r1, [r7, #8]
 801f0f0:	4618      	mov	r0, r3
 801f0f2:	f7fa f85f 	bl	80191b4 <send>
}
 801f0f6:	bf00      	nop
 801f0f8:	3718      	adds	r7, #24
 801f0fa:	46bd      	mov	sp, r7
 801f0fc:	bd80      	pop	{r7, pc}
 801f0fe:	bf00      	nop
 801f100:	0803318c 	.word	0x0803318c
 801f104:	080331e8 	.word	0x080331e8

0801f108 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801f108:	b580      	push	{r7, lr}
 801f10a:	b082      	sub	sp, #8
 801f10c:	af00      	add	r7, sp, #0
 801f10e:	4603      	mov	r3, r0
 801f110:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801f112:	79fb      	ldrb	r3, [r7, #7]
 801f114:	009b      	lsls	r3, r3, #2
 801f116:	3301      	adds	r3, #1
 801f118:	00db      	lsls	r3, r3, #3
 801f11a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f11e:	2108      	movs	r1, #8
 801f120:	4618      	mov	r0, r3
 801f122:	f7f9 fa75 	bl	8018610 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801f126:	bf00      	nop
 801f128:	79fb      	ldrb	r3, [r7, #7]
 801f12a:	009b      	lsls	r3, r3, #2
 801f12c:	3301      	adds	r3, #1
 801f12e:	00db      	lsls	r3, r3, #3
 801f130:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f134:	4618      	mov	r0, r3
 801f136:	f7f9 fa1f 	bl	8018578 <WIZCHIP_READ>
 801f13a:	4603      	mov	r3, r0
 801f13c:	2b00      	cmp	r3, #0
 801f13e:	d1f3      	bne.n	801f128 <http_disconnect+0x20>

	return SOCK_OK;
 801f140:	2301      	movs	r3, #1
}
 801f142:	4618      	mov	r0, r3
 801f144:	3708      	adds	r7, #8
 801f146:	46bd      	mov	sp, r7
 801f148:	bd80      	pop	{r7, pc}
	...

0801f14c <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801f14c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f150:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801f154:	af02      	add	r7, sp, #8
 801f156:	4602      	mov	r2, r0
 801f158:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f15c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f160:	6019      	str	r1, [r3, #0]
 801f162:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f166:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f16a:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801f16c:	2300      	movs	r3, #0
 801f16e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 801f172:	2300      	movs	r3, #0
 801f174:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 801f178:	2300      	movs	r3, #0
 801f17a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801f17e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f182:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f186:	2200      	movs	r2, #0
 801f188:	601a      	str	r2, [r3, #0]
 801f18a:	3304      	adds	r3, #4
 801f18c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801f190:	2100      	movs	r1, #0
 801f192:	4618      	mov	r0, r3
 801f194:	f00e fab2 	bl	802d6fc <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801f198:	f04f 0200 	mov.w	r2, #0
 801f19c:	f04f 0300 	mov.w	r3, #0
 801f1a0:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f1a4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1a8:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f1ac:	781b      	ldrb	r3, [r3, #0]
 801f1ae:	4618      	mov	r0, r3
 801f1b0:	f7ff fc06 	bl	801e9c0 <getHTTPSequenceNum>
 801f1b4:	4603      	mov	r3, r0
 801f1b6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 801f1ba:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 801f1be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1c2:	f000 81e5 	beq.w	801f590 <http_process_handler+0x444>

	http_status = 0;
 801f1c6:	2300      	movs	r3, #0
 801f1c8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 801f1cc:	4ba6      	ldr	r3, [pc, #664]	; (801f468 <http_process_handler+0x31c>)
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	4aa6      	ldr	r2, [pc, #664]	; (801f46c <http_process_handler+0x320>)
 801f1d2:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801f1d4:	2300      	movs	r3, #0
 801f1d6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801f1da:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f1de:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	781b      	ldrb	r3, [r3, #0]
 801f1e6:	2b03      	cmp	r3, #3
 801f1e8:	f000 8154 	beq.w	801f494 <http_process_handler+0x348>
 801f1ec:	2b03      	cmp	r3, #3
 801f1ee:	f300 81be 	bgt.w	801f56e <http_process_handler+0x422>
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	d007      	beq.n	801f206 <http_process_handler+0xba>
 801f1f6:	2b00      	cmp	r3, #0
 801f1f8:	f2c0 81b9 	blt.w	801f56e <http_process_handler+0x422>
 801f1fc:	3b01      	subs	r3, #1
 801f1fe:	2b01      	cmp	r3, #1
 801f200:	f200 81b5 	bhi.w	801f56e <http_process_handler+0x422>
 801f204:	e010      	b.n	801f228 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801f206:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f20a:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f20e:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f212:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f216:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f21a:	7818      	ldrb	r0, [r3, #0]
 801f21c:	4613      	mov	r3, r2
 801f21e:	2200      	movs	r2, #0
 801f220:	2100      	movs	r1, #0
 801f222:	f7ff fd87 	bl	801ed34 <send_http_response_header>
			break;
 801f226:	e1b6      	b.n	801f596 <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801f228:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f22c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	3302      	adds	r3, #2
 801f234:	f107 0208 	add.w	r2, r7, #8
 801f238:	4611      	mov	r1, r2
 801f23a:	4618      	mov	r0, r3
 801f23c:	f7ff fad6 	bl	801e7ec <get_http_uri_name>
			uri_name = uri_buf;
 801f240:	f107 0308 	add.w	r3, r7, #8
 801f244:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801f248:	4989      	ldr	r1, [pc, #548]	; (801f470 <http_process_handler+0x324>)
 801f24a:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f24e:	f7f0 ffc7 	bl	80101e0 <strcmp>
 801f252:	4603      	mov	r3, r0
 801f254:	2b00      	cmp	r3, #0
 801f256:	d10b      	bne.n	801f270 <http_process_handler+0x124>
 801f258:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f25c:	4985      	ldr	r1, [pc, #532]	; (801f474 <http_process_handler+0x328>)
 801f25e:	461a      	mov	r2, r3
 801f260:	460b      	mov	r3, r1
 801f262:	cb03      	ldmia	r3!, {r0, r1}
 801f264:	6010      	str	r0, [r2, #0]
 801f266:	6051      	str	r1, [r2, #4]
 801f268:	8819      	ldrh	r1, [r3, #0]
 801f26a:	789b      	ldrb	r3, [r3, #2]
 801f26c:	8111      	strh	r1, [r2, #8]
 801f26e:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801f270:	4981      	ldr	r1, [pc, #516]	; (801f478 <http_process_handler+0x32c>)
 801f272:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f276:	f7f0 ffb3 	bl	80101e0 <strcmp>
 801f27a:	4603      	mov	r3, r0
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	d10a      	bne.n	801f296 <http_process_handler+0x14a>
 801f280:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f284:	4a7d      	ldr	r2, [pc, #500]	; (801f47c <http_process_handler+0x330>)
 801f286:	461c      	mov	r4, r3
 801f288:	4613      	mov	r3, r2
 801f28a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801f28c:	6020      	str	r0, [r4, #0]
 801f28e:	6061      	str	r1, [r4, #4]
 801f290:	60a2      	str	r2, [r4, #8]
 801f292:	781b      	ldrb	r3, [r3, #0]
 801f294:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801f296:	497a      	ldr	r1, [pc, #488]	; (801f480 <http_process_handler+0x334>)
 801f298:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f29c:	f7f0 ffa0 	bl	80101e0 <strcmp>
 801f2a0:	4603      	mov	r3, r0
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	d10b      	bne.n	801f2be <http_process_handler+0x172>
 801f2a6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f2aa:	4a76      	ldr	r2, [pc, #472]	; (801f484 <http_process_handler+0x338>)
 801f2ac:	461d      	mov	r5, r3
 801f2ae:	4614      	mov	r4, r2
 801f2b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f2b2:	6028      	str	r0, [r5, #0]
 801f2b4:	6069      	str	r1, [r5, #4]
 801f2b6:	60aa      	str	r2, [r5, #8]
 801f2b8:	60eb      	str	r3, [r5, #12]
 801f2ba:	8823      	ldrh	r3, [r4, #0]
 801f2bc:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801f2be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f2c2:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f2c6:	681b      	ldr	r3, [r3, #0]
 801f2c8:	3301      	adds	r3, #1
 801f2ca:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f2ce:	4618      	mov	r0, r3
 801f2d0:	f7fe fffe 	bl	801e2d0 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801f2d4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f2d8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	785b      	ldrb	r3, [r3, #1]
 801f2e0:	2b08      	cmp	r3, #8
 801f2e2:	d131      	bne.n	801f348 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801f2e4:	4b68      	ldr	r3, [pc, #416]	; (801f488 <http_process_handler+0x33c>)
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f2ec:	4619      	mov	r1, r3
 801f2ee:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f2f2:	f000 fa59 	bl	801f7a8 <http_get_cgi_handler>
 801f2f6:	4603      	mov	r3, r0
 801f2f8:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801f2fc:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f300:	2b00      	cmp	r3, #0
 801f302:	d015      	beq.n	801f330 <http_process_handler+0x1e4>
 801f304:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f308:	f240 729e 	movw	r2, #1950	; 0x79e
 801f30c:	4293      	cmp	r3, r2
 801f30e:	d80f      	bhi.n	801f330 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801f310:	4b56      	ldr	r3, [pc, #344]	; (801f46c <http_process_handler+0x320>)
 801f312:	6819      	ldr	r1, [r3, #0]
 801f314:	4b5c      	ldr	r3, [pc, #368]	; (801f488 <http_process_handler+0x33c>)
 801f316:	681a      	ldr	r2, [r3, #0]
 801f318:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f31c:	b29c      	uxth	r4, r3
 801f31e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f322:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f326:	7818      	ldrb	r0, [r3, #0]
 801f328:	4623      	mov	r3, r4
 801f32a:	f7ff fec7 	bl	801f0bc <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801f32e:	e131      	b.n	801f594 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f330:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f334:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f338:	7818      	ldrb	r0, [r3, #0]
 801f33a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f33e:	2200      	movs	r2, #0
 801f340:	2108      	movs	r1, #8
 801f342:	f7ff fcf7 	bl	801ed34 <send_http_response_header>
			break;
 801f346:	e125      	b.n	801f594 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f348:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f34c:	484f      	ldr	r0, [pc, #316]	; (801f48c <http_process_handler+0x340>)
 801f34e:	f00b fd27 	bl	802ada0 <spi_fs_serch_file_in_dir>
 801f352:	4603      	mov	r3, r0
 801f354:	17da      	asrs	r2, r3, #31
 801f356:	4698      	mov	r8, r3
 801f358:	4691      	mov	r9, r2
 801f35a:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 801f35e:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 801f362:	2a01      	cmp	r2, #1
 801f364:	f173 0300 	sbcs.w	r3, r3, #0
 801f368:	db12      	blt.n	801f390 <http_process_handler+0x244>
					file_len = err;
 801f36a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801f36e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 801f372:	2301      	movs	r3, #1
 801f374:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f378:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f37c:	4944      	ldr	r1, [pc, #272]	; (801f490 <http_process_handler+0x344>)
 801f37e:	4613      	mov	r3, r2
 801f380:	011b      	lsls	r3, r3, #4
 801f382:	4413      	add	r3, r2
 801f384:	009b      	lsls	r3, r3, #2
 801f386:	440b      	add	r3, r1
 801f388:	3340      	adds	r3, #64	; 0x40
 801f38a:	2204      	movs	r2, #4
 801f38c:	701a      	strb	r2, [r3, #0]
 801f38e:	e024      	b.n	801f3da <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f390:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f394:	f207 210e 	addw	r1, r7, #526	; 0x20e
 801f398:	f107 0308 	add.w	r3, r7, #8
 801f39c:	4618      	mov	r0, r3
 801f39e:	f000 f989 	bl	801f6b4 <find_userReg_webContent>
 801f3a2:	4603      	mov	r3, r0
 801f3a4:	2b00      	cmp	r3, #0
 801f3a6:	d012      	beq.n	801f3ce <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f3a8:	2301      	movs	r3, #1
 801f3aa:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 801f3ae:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 801f3b2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f3b6:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f3ba:	4935      	ldr	r1, [pc, #212]	; (801f490 <http_process_handler+0x344>)
 801f3bc:	4613      	mov	r3, r2
 801f3be:	011b      	lsls	r3, r3, #4
 801f3c0:	4413      	add	r3, r2
 801f3c2:	009b      	lsls	r3, r3, #2
 801f3c4:	440b      	add	r3, r1
 801f3c6:	3340      	adds	r3, #64	; 0x40
 801f3c8:	2201      	movs	r2, #1
 801f3ca:	701a      	strb	r2, [r3, #0]
 801f3cc:	e005      	b.n	801f3da <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f3ce:	2300      	movs	r3, #0
 801f3d0:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 801f3d4:	2300      	movs	r3, #0
 801f3d6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 801f3da:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	d111      	bne.n	801f406 <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f3e2:	4924      	ldr	r1, [pc, #144]	; (801f474 <http_process_handler+0x328>)
 801f3e4:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f3e8:	f7f0 fefa 	bl	80101e0 <strcmp>
 801f3ec:	4603      	mov	r3, r0
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d104      	bne.n	801f3fc <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f3f2:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f3f6:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f3fa:	e007      	b.n	801f40c <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f3fc:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801f400:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f404:	e002      	b.n	801f40c <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f406:	23c8      	movs	r3, #200	; 0xc8
 801f408:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 801f40c:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f410:	2b00      	cmp	r3, #0
 801f412:	d011      	beq.n	801f438 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f414:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f418:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f41c:	681b      	ldr	r3, [r3, #0]
 801f41e:	7859      	ldrb	r1, [r3, #1]
 801f420:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801f424:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 801f428:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f42c:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f430:	7818      	ldrb	r0, [r3, #0]
 801f432:	4623      	mov	r3, r4
 801f434:	f7ff fc7e 	bl	801ed34 <send_http_response_header>
				if(http_status == STATUS_OK)
 801f438:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f43c:	2bc8      	cmp	r3, #200	; 0xc8
 801f43e:	f040 80a9 	bne.w	801f594 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f442:	4b0a      	ldr	r3, [pc, #40]	; (801f46c <http_process_handler+0x320>)
 801f444:	6819      	ldr	r1, [r3, #0]
 801f446:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f44a:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801f44e:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 801f452:	7810      	ldrb	r0, [r2, #0]
 801f454:	9300      	str	r3, [sp, #0]
 801f456:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f45a:	460a      	mov	r2, r1
 801f45c:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f460:	f7ff fcd4 	bl	801ee0c <send_http_response_body>
			break;
 801f464:	e096      	b.n	801f594 <http_process_handler+0x448>
 801f466:	bf00      	nop
 801f468:	200012bc 	.word	0x200012bc
 801f46c:	200011e8 	.word	0x200011e8
 801f470:	080331f4 	.word	0x080331f4
 801f474:	080331f8 	.word	0x080331f8
 801f478:	08033204 	.word	0x08033204
 801f47c:	08033208 	.word	0x08033208
 801f480:	08033218 	.word	0x08033218
 801f484:	08033220 	.word	0x08033220
 801f488:	200012b8 	.word	0x200012b8
 801f48c:	08033184 	.word	0x08033184
 801f490:	200012c4 	.word	0x200012c4

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f494:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f498:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	1c98      	adds	r0, r3, #2
 801f4a0:	f107 0308 	add.w	r3, r7, #8
 801f4a4:	4a3e      	ldr	r2, [pc, #248]	; (801f5a0 <http_process_handler+0x454>)
 801f4a6:	493f      	ldr	r1, [pc, #252]	; (801f5a4 <http_process_handler+0x458>)
 801f4a8:	f7ff f9ef 	bl	801e88a <mid>
			uri_name = uri_buf;
 801f4ac:	f107 0308 	add.w	r3, r7, #8
 801f4b0:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f4b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f4b8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f4bc:	681b      	ldr	r3, [r3, #0]
 801f4be:	3301      	adds	r3, #1
 801f4c0:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f4c4:	4618      	mov	r0, r3
 801f4c6:	f7fe ff03 	bl	801e2d0 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f4ca:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f4ce:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f4d2:	681b      	ldr	r3, [r3, #0]
 801f4d4:	785b      	ldrb	r3, [r3, #1]
 801f4d6:	2b08      	cmp	r3, #8
 801f4d8:	d13c      	bne.n	801f554 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f4da:	4b33      	ldr	r3, [pc, #204]	; (801f5a8 <http_process_handler+0x45c>)
 801f4dc:	681a      	ldr	r2, [r3, #0]
 801f4de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801f4e2:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801f4e6:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 801f4ea:	6809      	ldr	r1, [r1, #0]
 801f4ec:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f4f0:	f000 f988 	bl	801f804 <http_post_cgi_handler>
 801f4f4:	4603      	mov	r3, r0
 801f4f6:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f4fa:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d01c      	beq.n	801f53c <http_process_handler+0x3f0>
 801f502:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f506:	f240 72be 	movw	r2, #1982	; 0x7be
 801f50a:	4293      	cmp	r3, r2
 801f50c:	d816      	bhi.n	801f53c <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f50e:	4b27      	ldr	r3, [pc, #156]	; (801f5ac <http_process_handler+0x460>)
 801f510:	6819      	ldr	r1, [r3, #0]
 801f512:	4b25      	ldr	r3, [pc, #148]	; (801f5a8 <http_process_handler+0x45c>)
 801f514:	681a      	ldr	r2, [r3, #0]
 801f516:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f51a:	b29c      	uxth	r4, r3
 801f51c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f520:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f524:	7818      	ldrb	r0, [r3, #0]
 801f526:	4623      	mov	r3, r4
 801f528:	f7ff fdc8 	bl	801f0bc <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f52c:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f530:	2b02      	cmp	r3, #2
 801f532:	d11b      	bne.n	801f56c <http_process_handler+0x420>
 801f534:	4b1e      	ldr	r3, [pc, #120]	; (801f5b0 <http_process_handler+0x464>)
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	4798      	blx	r3
 801f53a:	e017      	b.n	801f56c <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f53c:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f540:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f544:	7818      	ldrb	r0, [r3, #0]
 801f546:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f54a:	2200      	movs	r2, #0
 801f54c:	2108      	movs	r1, #8
 801f54e:	f7ff fbf1 	bl	801ed34 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f552:	e020      	b.n	801f596 <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f554:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f558:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f55c:	7818      	ldrb	r0, [r3, #0]
 801f55e:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f562:	2200      	movs	r2, #0
 801f564:	2100      	movs	r1, #0
 801f566:	f7ff fbe5 	bl	801ed34 <send_http_response_header>
			break;
 801f56a:	e014      	b.n	801f596 <http_process_handler+0x44a>
 801f56c:	e013      	b.n	801f596 <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f56e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f572:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f576:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f57a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f57e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f582:	7818      	ldrb	r0, [r3, #0]
 801f584:	4613      	mov	r3, r2
 801f586:	2200      	movs	r2, #0
 801f588:	2100      	movs	r1, #0
 801f58a:	f7ff fbd3 	bl	801ed34 <send_http_response_header>
			break;
 801f58e:	e002      	b.n	801f596 <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f590:	bf00      	nop
 801f592:	e000      	b.n	801f596 <http_process_handler+0x44a>
			break;
 801f594:	bf00      	nop
	}
}
 801f596:	f507 770a 	add.w	r7, r7, #552	; 0x228
 801f59a:	46bd      	mov	sp, r7
 801f59c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f5a0:	08033234 	.word	0x08033234
 801f5a4:	080331f4 	.word	0x080331f4
 801f5a8:	200011e8 	.word	0x200011e8
 801f5ac:	200012b8 	.word	0x200012b8
 801f5b0:	20000120 	.word	0x20000120

0801f5b4 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f5b4:	b480      	push	{r7}
 801f5b6:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f5b8:	4b04      	ldr	r3, [pc, #16]	; (801f5cc <httpServer_time_handler+0x18>)
 801f5ba:	681b      	ldr	r3, [r3, #0]
 801f5bc:	3301      	adds	r3, #1
 801f5be:	4a03      	ldr	r2, [pc, #12]	; (801f5cc <httpServer_time_handler+0x18>)
 801f5c0:	6013      	str	r3, [r2, #0]
}
 801f5c2:	bf00      	nop
 801f5c4:	46bd      	mov	sp, r7
 801f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5ca:	4770      	bx	lr
 801f5cc:	200012c0 	.word	0x200012c0

0801f5d0 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801f5d0:	b580      	push	{r7, lr}
 801f5d2:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801f5d4:	4b03      	ldr	r3, [pc, #12]	; (801f5e4 <get_httpServer_timecount+0x14>)
 801f5d6:	681b      	ldr	r3, [r3, #0]
 801f5d8:	2001      	movs	r0, #1
 801f5da:	4798      	blx	r3
	return httpServer_tick_1s;
 801f5dc:	4b02      	ldr	r3, [pc, #8]	; (801f5e8 <get_httpServer_timecount+0x18>)
 801f5de:	681b      	ldr	r3, [r3, #0]
}
 801f5e0:	4618      	mov	r0, r3
 801f5e2:	bd80      	pop	{r7, pc}
 801f5e4:	20000124 	.word	0x20000124
 801f5e8:	200012c0 	.word	0x200012c0

0801f5ec <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801f5ec:	b580      	push	{r7, lr}
 801f5ee:	b084      	sub	sp, #16
 801f5f0:	af00      	add	r7, sp, #0
 801f5f2:	6078      	str	r0, [r7, #4]
 801f5f4:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801f5f6:	687b      	ldr	r3, [r7, #4]
 801f5f8:	2b00      	cmp	r3, #0
 801f5fa:	d04e      	beq.n	801f69a <reg_httpServer_webContent+0xae>
 801f5fc:	683b      	ldr	r3, [r7, #0]
 801f5fe:	2b00      	cmp	r3, #0
 801f600:	d04b      	beq.n	801f69a <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801f602:	4b29      	ldr	r3, [pc, #164]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f604:	881b      	ldrh	r3, [r3, #0]
 801f606:	2b03      	cmp	r3, #3
 801f608:	d849      	bhi.n	801f69e <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801f60a:	6878      	ldr	r0, [r7, #4]
 801f60c:	f7f0 fe48 	bl	80102a0 <strlen>
 801f610:	4603      	mov	r3, r0
 801f612:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801f614:	6838      	ldr	r0, [r7, #0]
 801f616:	f7f0 fe43 	bl	80102a0 <strlen>
 801f61a:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801f61c:	4b22      	ldr	r3, [pc, #136]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f61e:	881b      	ldrh	r3, [r3, #0]
 801f620:	461a      	mov	r2, r3
 801f622:	4b21      	ldr	r3, [pc, #132]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f624:	881b      	ldrh	r3, [r3, #0]
 801f626:	4618      	mov	r0, r3
 801f628:	2332      	movs	r3, #50	; 0x32
 801f62a:	fb02 f303 	mul.w	r3, r2, r3
 801f62e:	4a1f      	ldr	r2, [pc, #124]	; (801f6ac <reg_httpServer_webContent+0xc0>)
 801f630:	441a      	add	r2, r3
 801f632:	491f      	ldr	r1, [pc, #124]	; (801f6b0 <reg_httpServer_webContent+0xc4>)
 801f634:	4603      	mov	r3, r0
 801f636:	005b      	lsls	r3, r3, #1
 801f638:	4403      	add	r3, r0
 801f63a:	009b      	lsls	r3, r3, #2
 801f63c:	440b      	add	r3, r1
 801f63e:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801f640:	4b19      	ldr	r3, [pc, #100]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f642:	881b      	ldrh	r3, [r3, #0]
 801f644:	4619      	mov	r1, r3
 801f646:	4a1a      	ldr	r2, [pc, #104]	; (801f6b0 <reg_httpServer_webContent+0xc4>)
 801f648:	460b      	mov	r3, r1
 801f64a:	005b      	lsls	r3, r3, #1
 801f64c:	440b      	add	r3, r1
 801f64e:	009b      	lsls	r3, r3, #2
 801f650:	4413      	add	r3, r2
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	6879      	ldr	r1, [r7, #4]
 801f656:	4618      	mov	r0, r3
 801f658:	f00e fa1d 	bl	802da96 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801f65c:	4b12      	ldr	r3, [pc, #72]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f65e:	881b      	ldrh	r3, [r3, #0]
 801f660:	4619      	mov	r1, r3
 801f662:	4a13      	ldr	r2, [pc, #76]	; (801f6b0 <reg_httpServer_webContent+0xc4>)
 801f664:	460b      	mov	r3, r1
 801f666:	005b      	lsls	r3, r3, #1
 801f668:	440b      	add	r3, r1
 801f66a:	009b      	lsls	r3, r3, #2
 801f66c:	4413      	add	r3, r2
 801f66e:	3304      	adds	r3, #4
 801f670:	68ba      	ldr	r2, [r7, #8]
 801f672:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801f674:	4b0c      	ldr	r3, [pc, #48]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f676:	881b      	ldrh	r3, [r3, #0]
 801f678:	4619      	mov	r1, r3
 801f67a:	4a0d      	ldr	r2, [pc, #52]	; (801f6b0 <reg_httpServer_webContent+0xc4>)
 801f67c:	460b      	mov	r3, r1
 801f67e:	005b      	lsls	r3, r3, #1
 801f680:	440b      	add	r3, r1
 801f682:	009b      	lsls	r3, r3, #2
 801f684:	4413      	add	r3, r2
 801f686:	3308      	adds	r3, #8
 801f688:	683a      	ldr	r2, [r7, #0]
 801f68a:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801f68c:	4b06      	ldr	r3, [pc, #24]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f68e:	881b      	ldrh	r3, [r3, #0]
 801f690:	3301      	adds	r3, #1
 801f692:	b29a      	uxth	r2, r3
 801f694:	4b04      	ldr	r3, [pc, #16]	; (801f6a8 <reg_httpServer_webContent+0xbc>)
 801f696:	801a      	strh	r2, [r3, #0]
 801f698:	e002      	b.n	801f6a0 <reg_httpServer_webContent+0xb4>
		return;
 801f69a:	bf00      	nop
 801f69c:	e000      	b.n	801f6a0 <reg_httpServer_webContent+0xb4>
		return;
 801f69e:	bf00      	nop
}
 801f6a0:	3710      	adds	r7, #16
 801f6a2:	46bd      	mov	sp, r7
 801f6a4:	bd80      	pop	{r7, pc}
 801f6a6:	bf00      	nop
 801f6a8:	200012b4 	.word	0x200012b4
 801f6ac:	200011ec 	.word	0x200011ec
 801f6b0:	200014e4 	.word	0x200014e4

0801f6b4 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801f6b4:	b580      	push	{r7, lr}
 801f6b6:	b086      	sub	sp, #24
 801f6b8:	af00      	add	r7, sp, #0
 801f6ba:	60f8      	str	r0, [r7, #12]
 801f6bc:	60b9      	str	r1, [r7, #8]
 801f6be:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801f6c0:	2300      	movs	r3, #0
 801f6c2:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801f6c4:	2300      	movs	r3, #0
 801f6c6:	82fb      	strh	r3, [r7, #22]
 801f6c8:	e022      	b.n	801f710 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801f6ca:	8afa      	ldrh	r2, [r7, #22]
 801f6cc:	4915      	ldr	r1, [pc, #84]	; (801f724 <find_userReg_webContent+0x70>)
 801f6ce:	4613      	mov	r3, r2
 801f6d0:	005b      	lsls	r3, r3, #1
 801f6d2:	4413      	add	r3, r2
 801f6d4:	009b      	lsls	r3, r3, #2
 801f6d6:	440b      	add	r3, r1
 801f6d8:	681b      	ldr	r3, [r3, #0]
 801f6da:	4619      	mov	r1, r3
 801f6dc:	68f8      	ldr	r0, [r7, #12]
 801f6de:	f7f0 fd7f 	bl	80101e0 <strcmp>
 801f6e2:	4603      	mov	r3, r0
 801f6e4:	2b00      	cmp	r3, #0
 801f6e6:	d110      	bne.n	801f70a <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801f6e8:	8afa      	ldrh	r2, [r7, #22]
 801f6ea:	490e      	ldr	r1, [pc, #56]	; (801f724 <find_userReg_webContent+0x70>)
 801f6ec:	4613      	mov	r3, r2
 801f6ee:	005b      	lsls	r3, r3, #1
 801f6f0:	4413      	add	r3, r2
 801f6f2:	009b      	lsls	r3, r3, #2
 801f6f4:	440b      	add	r3, r1
 801f6f6:	3304      	adds	r3, #4
 801f6f8:	681a      	ldr	r2, [r3, #0]
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801f6fe:	68bb      	ldr	r3, [r7, #8]
 801f700:	8afa      	ldrh	r2, [r7, #22]
 801f702:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801f704:	2301      	movs	r3, #1
 801f706:	757b      	strb	r3, [r7, #21]
			break;
 801f708:	e007      	b.n	801f71a <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801f70a:	8afb      	ldrh	r3, [r7, #22]
 801f70c:	3301      	adds	r3, #1
 801f70e:	82fb      	strh	r3, [r7, #22]
 801f710:	4b05      	ldr	r3, [pc, #20]	; (801f728 <find_userReg_webContent+0x74>)
 801f712:	881b      	ldrh	r3, [r3, #0]
 801f714:	8afa      	ldrh	r2, [r7, #22]
 801f716:	429a      	cmp	r2, r3
 801f718:	d3d7      	bcc.n	801f6ca <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801f71a:	7d7b      	ldrb	r3, [r7, #21]
}
 801f71c:	4618      	mov	r0, r3
 801f71e:	3718      	adds	r7, #24
 801f720:	46bd      	mov	sp, r7
 801f722:	bd80      	pop	{r7, pc}
 801f724:	200014e4 	.word	0x200014e4
 801f728:	200012b4 	.word	0x200012b4

0801f72c <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801f72c:	b580      	push	{r7, lr}
 801f72e:	b086      	sub	sp, #24
 801f730:	af00      	add	r7, sp, #0
 801f732:	60b9      	str	r1, [r7, #8]
 801f734:	607a      	str	r2, [r7, #4]
 801f736:	461a      	mov	r2, r3
 801f738:	4603      	mov	r3, r0
 801f73a:	81fb      	strh	r3, [r7, #14]
 801f73c:	4613      	mov	r3, r2
 801f73e:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801f740:	2300      	movs	r3, #0
 801f742:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801f744:	4b16      	ldr	r3, [pc, #88]	; (801f7a0 <read_userReg_webContent+0x74>)
 801f746:	881b      	ldrh	r3, [r3, #0]
 801f748:	89fa      	ldrh	r2, [r7, #14]
 801f74a:	429a      	cmp	r2, r3
 801f74c:	d901      	bls.n	801f752 <read_userReg_webContent+0x26>
 801f74e:	2300      	movs	r3, #0
 801f750:	e021      	b.n	801f796 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801f752:	89fa      	ldrh	r2, [r7, #14]
 801f754:	4913      	ldr	r1, [pc, #76]	; (801f7a4 <read_userReg_webContent+0x78>)
 801f756:	4613      	mov	r3, r2
 801f758:	005b      	lsls	r3, r3, #1
 801f75a:	4413      	add	r3, r2
 801f75c:	009b      	lsls	r3, r3, #2
 801f75e:	440b      	add	r3, r1
 801f760:	3308      	adds	r3, #8
 801f762:	681b      	ldr	r3, [r3, #0]
 801f764:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	2b00      	cmp	r3, #0
 801f76a:	d003      	beq.n	801f774 <read_userReg_webContent+0x48>
 801f76c:	697a      	ldr	r2, [r7, #20]
 801f76e:	687b      	ldr	r3, [r7, #4]
 801f770:	4413      	add	r3, r2
 801f772:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801f774:	89bb      	ldrh	r3, [r7, #12]
 801f776:	461a      	mov	r2, r3
 801f778:	6979      	ldr	r1, [r7, #20]
 801f77a:	68b8      	ldr	r0, [r7, #8]
 801f77c:	f00e f818 	bl	802d7b0 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801f780:	89bb      	ldrh	r3, [r7, #12]
 801f782:	68ba      	ldr	r2, [r7, #8]
 801f784:	4413      	add	r3, r2
 801f786:	2200      	movs	r2, #0
 801f788:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801f78a:	68b8      	ldr	r0, [r7, #8]
 801f78c:	f7f0 fd88 	bl	80102a0 <strlen>
 801f790:	4603      	mov	r3, r0
 801f792:	827b      	strh	r3, [r7, #18]
	return ret;
 801f794:	8a7b      	ldrh	r3, [r7, #18]
}
 801f796:	4618      	mov	r0, r3
 801f798:	3718      	adds	r7, #24
 801f79a:	46bd      	mov	sp, r7
 801f79c:	bd80      	pop	{r7, pc}
 801f79e:	bf00      	nop
 801f7a0:	200012b4 	.word	0x200012b4
 801f7a4:	200014e4 	.word	0x200014e4

0801f7a8 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801f7a8:	b580      	push	{r7, lr}
 801f7aa:	b086      	sub	sp, #24
 801f7ac:	af00      	add	r7, sp, #0
 801f7ae:	60f8      	str	r0, [r7, #12]
 801f7b0:	60b9      	str	r1, [r7, #8]
 801f7b2:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801f7b4:	2301      	movs	r3, #1
 801f7b6:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f7b8:	2300      	movs	r3, #0
 801f7ba:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801f7bc:	4b0f      	ldr	r3, [pc, #60]	; (801f7fc <http_get_cgi_handler+0x54>)
 801f7be:	681b      	ldr	r3, [r3, #0]
 801f7c0:	f107 0214 	add.w	r2, r7, #20
 801f7c4:	68b9      	ldr	r1, [r7, #8]
 801f7c6:	68f8      	ldr	r0, [r7, #12]
 801f7c8:	4798      	blx	r3
 801f7ca:	4603      	mov	r3, r0
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d108      	bne.n	801f7e2 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f7d0:	490b      	ldr	r1, [pc, #44]	; (801f800 <http_get_cgi_handler+0x58>)
 801f7d2:	68f8      	ldr	r0, [r7, #12]
 801f7d4:	f7f0 fd04 	bl	80101e0 <strcmp>
 801f7d8:	4603      	mov	r3, r0
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	d001      	beq.n	801f7e2 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f7de:	2300      	movs	r3, #0
 801f7e0:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f7e2:	7dfb      	ldrb	r3, [r7, #23]
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	d003      	beq.n	801f7f0 <http_get_cgi_handler+0x48>
 801f7e8:	8abb      	ldrh	r3, [r7, #20]
 801f7ea:	461a      	mov	r2, r3
 801f7ec:	687b      	ldr	r3, [r7, #4]
 801f7ee:	601a      	str	r2, [r3, #0]
	return ret;
 801f7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 801f7f2:	4618      	mov	r0, r3
 801f7f4:	3718      	adds	r7, #24
 801f7f6:	46bd      	mov	sp, r7
 801f7f8:	bd80      	pop	{r7, pc}
 801f7fa:	bf00      	nop
 801f7fc:	20001518 	.word	0x20001518
 801f800:	080332ec 	.word	0x080332ec

0801f804 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801f804:	b590      	push	{r4, r7, lr}
 801f806:	b087      	sub	sp, #28
 801f808:	af00      	add	r7, sp, #0
 801f80a:	60f8      	str	r0, [r7, #12]
 801f80c:	60b9      	str	r1, [r7, #8]
 801f80e:	607a      	str	r2, [r7, #4]
 801f810:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801f812:	2301      	movs	r3, #1
 801f814:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801f816:	2300      	movs	r3, #0
 801f818:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801f81a:	2300      	movs	r3, #0
 801f81c:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801f81e:	4b20      	ldr	r3, [pc, #128]	; (801f8a0 <http_post_cgi_handler+0x9c>)
 801f820:	681c      	ldr	r4, [r3, #0]
 801f822:	68bb      	ldr	r3, [r7, #8]
 801f824:	1c99      	adds	r1, r3, #2
 801f826:	f107 0314 	add.w	r3, r7, #20
 801f82a:	687a      	ldr	r2, [r7, #4]
 801f82c:	68f8      	ldr	r0, [r7, #12]
 801f82e:	47a0      	blx	r4
 801f830:	4603      	mov	r3, r0
 801f832:	2b00      	cmp	r3, #0
 801f834:	d127      	bne.n	801f886 <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801f836:	491b      	ldr	r1, [pc, #108]	; (801f8a4 <http_post_cgi_handler+0xa0>)
 801f838:	68f8      	ldr	r0, [r7, #12]
 801f83a:	f7f0 fcd1 	bl	80101e0 <strcmp>
 801f83e:	4603      	mov	r3, r0
 801f840:	2b00      	cmp	r3, #0
 801f842:	d10b      	bne.n	801f85c <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801f844:	2301      	movs	r3, #1
 801f846:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f848:	7dbb      	ldrb	r3, [r7, #22]
 801f84a:	461a      	mov	r2, r3
 801f84c:	4916      	ldr	r1, [pc, #88]	; (801f8a8 <http_post_cgi_handler+0xa4>)
 801f84e:	6878      	ldr	r0, [r7, #4]
 801f850:	f00d fe04 	bl	802d45c <siprintf>
 801f854:	4603      	mov	r3, r0
 801f856:	b29b      	uxth	r3, r3
 801f858:	82bb      	strh	r3, [r7, #20]
 801f85a:	e014      	b.n	801f886 <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801f85c:	4913      	ldr	r1, [pc, #76]	; (801f8ac <http_post_cgi_handler+0xa8>)
 801f85e:	68f8      	ldr	r0, [r7, #12]
 801f860:	f7f0 fcbe 	bl	80101e0 <strcmp>
 801f864:	4603      	mov	r3, r0
 801f866:	2b00      	cmp	r3, #0
 801f868:	d10b      	bne.n	801f882 <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801f86a:	2301      	movs	r3, #1
 801f86c:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801f86e:	7dbb      	ldrb	r3, [r7, #22]
 801f870:	461a      	mov	r2, r3
 801f872:	490d      	ldr	r1, [pc, #52]	; (801f8a8 <http_post_cgi_handler+0xa4>)
 801f874:	6878      	ldr	r0, [r7, #4]
 801f876:	f00d fdf1 	bl	802d45c <siprintf>
 801f87a:	4603      	mov	r3, r0
 801f87c:	b29b      	uxth	r3, r3
 801f87e:	82bb      	strh	r3, [r7, #20]
 801f880:	e001      	b.n	801f886 <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801f882:	2300      	movs	r3, #0
 801f884:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801f886:	7dfb      	ldrb	r3, [r7, #23]
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d003      	beq.n	801f894 <http_post_cgi_handler+0x90>
 801f88c:	8abb      	ldrh	r3, [r7, #20]
 801f88e:	461a      	mov	r2, r3
 801f890:	683b      	ldr	r3, [r7, #0]
 801f892:	601a      	str	r2, [r3, #0]
	return ret;
 801f894:	7dfb      	ldrb	r3, [r7, #23]
}
 801f896:	4618      	mov	r0, r3
 801f898:	371c      	adds	r7, #28
 801f89a:	46bd      	mov	sp, r7
 801f89c:	bd90      	pop	{r4, r7, pc}
 801f89e:	bf00      	nop
 801f8a0:	20001514 	.word	0x20001514
 801f8a4:	080332ec 	.word	0x080332ec
 801f8a8:	080332f8 	.word	0x080332f8
 801f8ac:	080332fc 	.word	0x080332fc

0801f8b0 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801f8b0:	b480      	push	{r7}
 801f8b2:	b085      	sub	sp, #20
 801f8b4:	af00      	add	r7, sp, #0
 801f8b6:	60f8      	str	r0, [r7, #12]
 801f8b8:	60b9      	str	r1, [r7, #8]
 801f8ba:	607a      	str	r2, [r7, #4]

	;
}
 801f8bc:	bf00      	nop
 801f8be:	4618      	mov	r0, r3
 801f8c0:	3714      	adds	r7, #20
 801f8c2:	46bd      	mov	sp, r7
 801f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8c8:	4770      	bx	lr

0801f8ca <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801f8ca:	b480      	push	{r7}
 801f8cc:	b085      	sub	sp, #20
 801f8ce:	af00      	add	r7, sp, #0
 801f8d0:	60f8      	str	r0, [r7, #12]
 801f8d2:	60b9      	str	r1, [r7, #8]
 801f8d4:	607a      	str	r2, [r7, #4]
 801f8d6:	603b      	str	r3, [r7, #0]
	;
}
 801f8d8:	bf00      	nop
 801f8da:	4618      	mov	r0, r3
 801f8dc:	3714      	adds	r7, #20
 801f8de:	46bd      	mov	sp, r7
 801f8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8e4:	4770      	bx	lr
	...

0801f8e8 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801f8e8:	b480      	push	{r7}
 801f8ea:	b083      	sub	sp, #12
 801f8ec:	af00      	add	r7, sp, #0
 801f8ee:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801f8f0:	4b07      	ldr	r3, [pc, #28]	; (801f910 <reg_external_post_cgi_processor+0x28>)
 801f8f2:	4a08      	ldr	r2, [pc, #32]	; (801f914 <reg_external_post_cgi_processor+0x2c>)
 801f8f4:	601a      	str	r2, [r3, #0]
	if (function) {
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	2b00      	cmp	r3, #0
 801f8fa:	d002      	beq.n	801f902 <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801f8fc:	4a04      	ldr	r2, [pc, #16]	; (801f910 <reg_external_post_cgi_processor+0x28>)
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	6013      	str	r3, [r2, #0]
	}

}
 801f902:	bf00      	nop
 801f904:	370c      	adds	r7, #12
 801f906:	46bd      	mov	sp, r7
 801f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f90c:	4770      	bx	lr
 801f90e:	bf00      	nop
 801f910:	20001514 	.word	0x20001514
 801f914:	0801f8cb 	.word	0x0801f8cb

0801f918 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801f918:	b480      	push	{r7}
 801f91a:	b083      	sub	sp, #12
 801f91c:	af00      	add	r7, sp, #0
 801f91e:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801f920:	4b07      	ldr	r3, [pc, #28]	; (801f940 <reg_external_get_cgi_processor+0x28>)
 801f922:	4a08      	ldr	r2, [pc, #32]	; (801f944 <reg_external_get_cgi_processor+0x2c>)
 801f924:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801f926:	687b      	ldr	r3, [r7, #4]
 801f928:	2b00      	cmp	r3, #0
 801f92a:	d002      	beq.n	801f932 <reg_external_get_cgi_processor+0x1a>
 801f92c:	4a04      	ldr	r2, [pc, #16]	; (801f940 <reg_external_get_cgi_processor+0x28>)
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	6013      	str	r3, [r2, #0]

}
 801f932:	bf00      	nop
 801f934:	370c      	adds	r7, #12
 801f936:	46bd      	mov	sp, r7
 801f938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f93c:	4770      	bx	lr
 801f93e:	bf00      	nop
 801f940:	20001518 	.word	0x20001518
 801f944:	0801f8b1 	.word	0x0801f8b1

0801f948 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801f948:	b480      	push	{r7}
 801f94a:	af00      	add	r7, sp, #0
 801f94c:	bf00      	nop
 801f94e:	46bd      	mov	sp, r7
 801f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f954:	4770      	bx	lr

0801f956 <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801f956:	b480      	push	{r7}
 801f958:	b083      	sub	sp, #12
 801f95a:	af00      	add	r7, sp, #0
 801f95c:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801f95e:	687b      	ldr	r3, [r7, #4]
 801f960:	f242 7210 	movw	r2, #10000	; 0x2710
 801f964:	fb02 f303 	mul.w	r3, r2, r3
 801f968:	607b      	str	r3, [r7, #4]

	while (sec){
 801f96a:	e002      	b.n	801f972 <proto_delay_func+0x1c>
		sec--;
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	3b01      	subs	r3, #1
 801f970:	607b      	str	r3, [r7, #4]
	while (sec){
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	2b00      	cmp	r3, #0
 801f976:	d1f9      	bne.n	801f96c <proto_delay_func+0x16>
	}

}
 801f978:	bf00      	nop
 801f97a:	bf00      	nop
 801f97c:	370c      	adds	r7, #12
 801f97e:	46bd      	mov	sp, r7
 801f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f984:	4770      	bx	lr
	...

0801f988 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801f988:	b480      	push	{r7}
 801f98a:	b083      	sub	sp, #12
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801f990:	4a04      	ldr	r2, [pc, #16]	; (801f9a4 <w5500_lib_init+0x1c>)
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	6013      	str	r3, [r2, #0]
}
 801f996:	bf00      	nop
 801f998:	370c      	adds	r7, #12
 801f99a:	46bd      	mov	sp, r7
 801f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9a0:	4770      	bx	lr
 801f9a2:	bf00      	nop
 801f9a4:	20001520 	.word	0x20001520

0801f9a8 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801f9a8:	b580      	push	{r7, lr}
 801f9aa:	b082      	sub	sp, #8
 801f9ac:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801f9ae:	2303      	movs	r3, #3
 801f9b0:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801f9b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801f9b6:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801f9b8:	4b07      	ldr	r3, [pc, #28]	; (801f9d8 <network_init+0x30>)
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	4619      	mov	r1, r3
 801f9be:	2000      	movs	r0, #0
 801f9c0:	f7fa fa72 	bl	8019ea8 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801f9c4:	1d3b      	adds	r3, r7, #4
 801f9c6:	4619      	mov	r1, r3
 801f9c8:	2004      	movs	r0, #4
 801f9ca:	f7fa fa6d 	bl	8019ea8 <ctlnetwork>
}
 801f9ce:	bf00      	nop
 801f9d0:	3708      	adds	r7, #8
 801f9d2:	46bd      	mov	sp, r7
 801f9d4:	bd80      	pop	{r7, pc}
 801f9d6:	bf00      	nop
 801f9d8:	20001520 	.word	0x20001520

0801f9dc <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801f9dc:	b480      	push	{r7}
 801f9de:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801f9e0:	4b03      	ldr	r3, [pc, #12]	; (801f9f0 <Callback_IPConflict+0x14>)
 801f9e2:	2200      	movs	r2, #0
 801f9e4:	701a      	strb	r2, [r3, #0]
}
 801f9e6:	bf00      	nop
 801f9e8:	46bd      	mov	sp, r7
 801f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9ee:	4770      	bx	lr
 801f9f0:	2000151c 	.word	0x2000151c

0801f9f4 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801f9f4:	b580      	push	{r7, lr}
 801f9f6:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801f9f8:	4b11      	ldr	r3, [pc, #68]	; (801fa40 <Callback_IPAssigned+0x4c>)
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	3306      	adds	r3, #6
 801f9fe:	4618      	mov	r0, r3
 801fa00:	f7fc fa08 	bl	801be14 <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801fa04:	4b0e      	ldr	r3, [pc, #56]	; (801fa40 <Callback_IPAssigned+0x4c>)
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	330e      	adds	r3, #14
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	f7fc fa22 	bl	801be54 <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801fa10:	4b0b      	ldr	r3, [pc, #44]	; (801fa40 <Callback_IPAssigned+0x4c>)
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	330a      	adds	r3, #10
 801fa16:	4618      	mov	r0, r3
 801fa18:	f7fc fa3c 	bl	801be94 <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801fa1c:	4b08      	ldr	r3, [pc, #32]	; (801fa40 <Callback_IPAssigned+0x4c>)
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	3312      	adds	r3, #18
 801fa22:	4618      	mov	r0, r3
 801fa24:	f7fc fa56 	bl	801bed4 <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801fa28:	4b05      	ldr	r3, [pc, #20]	; (801fa40 <Callback_IPAssigned+0x4c>)
 801fa2a:	681b      	ldr	r3, [r3, #0]
 801fa2c:	2202      	movs	r2, #2
 801fa2e:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801fa30:	f7ff ffba 	bl	801f9a8 <network_init>

   ip_dhcp_assigned = true;
 801fa34:	4b03      	ldr	r3, [pc, #12]	; (801fa44 <Callback_IPAssigned+0x50>)
 801fa36:	2201      	movs	r2, #1
 801fa38:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801fa3a:	bf00      	nop
 801fa3c:	bd80      	pop	{r7, pc}
 801fa3e:	bf00      	nop
 801fa40:	20001520 	.word	0x20001520
 801fa44:	2000151c 	.word	0x2000151c

0801fa48 <dhcp_rutine>:

void dhcp_rutine(void){
 801fa48:	b580      	push	{r7, lr}
 801fa4a:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801fa4c:	f7fb ff6c 	bl	801b928 <DHCP_run>
 801fa50:	4603      	mov	r3, r0
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d004      	beq.n	801fa60 <dhcp_rutine+0x18>
 801fa56:	2b00      	cmp	r3, #0
 801fa58:	db09      	blt.n	801fa6e <dhcp_rutine+0x26>
 801fa5a:	3b02      	subs	r3, #2
 801fa5c:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801fa5e:	e006      	b.n	801fa6e <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801fa60:	4b04      	ldr	r3, [pc, #16]	; (801fa74 <dhcp_rutine+0x2c>)
 801fa62:	781b      	ldrb	r3, [r3, #0]
 801fa64:	3301      	adds	r3, #1
 801fa66:	b2da      	uxtb	r2, r3
 801fa68:	4b02      	ldr	r3, [pc, #8]	; (801fa74 <dhcp_rutine+0x2c>)
 801fa6a:	701a      	strb	r2, [r3, #0]
				break;
 801fa6c:	e000      	b.n	801fa70 <dhcp_rutine+0x28>
				break;
 801fa6e:	bf00      	nop
			}
}
 801fa70:	bf00      	nop
 801fa72:	bd80      	pop	{r7, pc}
 801fa74:	20001524 	.word	0x20001524

0801fa78 <link_status>:

int link_status(void){
 801fa78:	b580      	push	{r7, lr}
 801fa7a:	b082      	sub	sp, #8
 801fa7c:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801fa7e:	1dfb      	adds	r3, r7, #7
 801fa80:	4619      	mov	r1, r3
 801fa82:	200f      	movs	r0, #15
 801fa84:	f7fa f92e 	bl	8019ce4 <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801fa88:	79fb      	ldrb	r3, [r7, #7]
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	d102      	bne.n	801fa94 <link_status+0x1c>
 801fa8e:	4b04      	ldr	r3, [pc, #16]	; (801faa0 <link_status+0x28>)
 801fa90:	2200      	movs	r2, #0
 801fa92:	701a      	strb	r2, [r3, #0]
	return temp;
 801fa94:	79fb      	ldrb	r3, [r7, #7]
}
 801fa96:	4618      	mov	r0, r3
 801fa98:	3708      	adds	r7, #8
 801fa9a:	46bd      	mov	sp, r7
 801fa9c:	bd80      	pop	{r7, pc}
 801fa9e:	bf00      	nop
 801faa0:	2000151c 	.word	0x2000151c

0801faa4 <link_duplex>:

int link_duplex(void){
 801faa4:	b580      	push	{r7, lr}
 801faa6:	b082      	sub	sp, #8
 801faa8:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801faaa:	1d3b      	adds	r3, r7, #4
 801faac:	4618      	mov	r0, r3
 801faae:	f7fa fcab 	bl	801a408 <wizphy_getphystat>
	return phy_status.duplex;
 801fab2:	79fb      	ldrb	r3, [r7, #7]
}
 801fab4:	4618      	mov	r0, r3
 801fab6:	3708      	adds	r7, #8
 801fab8:	46bd      	mov	sp, r7
 801faba:	bd80      	pop	{r7, pc}

0801fabc <link_speed>:

int link_speed(void){
 801fabc:	b580      	push	{r7, lr}
 801fabe:	b082      	sub	sp, #8
 801fac0:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fac2:	1d3b      	adds	r3, r7, #4
 801fac4:	4618      	mov	r0, r3
 801fac6:	f7fa fc9f 	bl	801a408 <wizphy_getphystat>
	return phy_status.speed;
 801faca:	79bb      	ldrb	r3, [r7, #6]
}
 801facc:	4618      	mov	r0, r3
 801face:	3708      	adds	r7, #8
 801fad0:	46bd      	mov	sp, r7
 801fad2:	bd80      	pop	{r7, pc}

0801fad4 <assigned_ip>:

int assigned_ip(void){
 801fad4:	b480      	push	{r7}
 801fad6:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801fad8:	4b03      	ldr	r3, [pc, #12]	; (801fae8 <assigned_ip+0x14>)
 801fada:	781b      	ldrb	r3, [r3, #0]
}
 801fadc:	4618      	mov	r0, r3
 801fade:	46bd      	mov	sp, r7
 801fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fae4:	4770      	bx	lr
 801fae6:	bf00      	nop
 801fae8:	2000151c 	.word	0x2000151c

0801faec <set_ip_aasigned>:

void set_ip_aasigned(void){
 801faec:	b480      	push	{r7}
 801faee:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801faf0:	4b03      	ldr	r3, [pc, #12]	; (801fb00 <set_ip_aasigned+0x14>)
 801faf2:	2201      	movs	r2, #1
 801faf4:	701a      	strb	r2, [r3, #0]
}
 801faf6:	bf00      	nop
 801faf8:	46bd      	mov	sp, r7
 801fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fafe:	4770      	bx	lr
 801fb00:	2000151c 	.word	0x2000151c

0801fb04 <w5500_init>:

int w5500_init(void)
{
 801fb04:	b590      	push	{r4, r7, lr}
 801fb06:	b085      	sub	sp, #20
 801fb08:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801fb0a:	4b18      	ldr	r3, [pc, #96]	; (801fb6c <w5500_init+0x68>)
 801fb0c:	463c      	mov	r4, r7
 801fb0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801fb10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801fb14:	4b16      	ldr	r3, [pc, #88]	; (801fb70 <w5500_init+0x6c>)
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	4798      	blx	r3
  delay_ms(delay0_5s);
 801fb1a:	4b16      	ldr	r3, [pc, #88]	; (801fb74 <w5500_init+0x70>)
 801fb1c:	681b      	ldr	r3, [r3, #0]
 801fb1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801fb22:	4798      	blx	r3
  ResetOFF();
 801fb24:	4b14      	ldr	r3, [pc, #80]	; (801fb78 <w5500_init+0x74>)
 801fb26:	681b      	ldr	r3, [r3, #0]
 801fb28:	4798      	blx	r3
  delay_ms(delay3s);
 801fb2a:	4b12      	ldr	r3, [pc, #72]	; (801fb74 <w5500_init+0x70>)
 801fb2c:	681b      	ldr	r3, [r3, #0]
 801fb2e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801fb32:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801fb34:	463b      	mov	r3, r7
 801fb36:	4619      	mov	r1, r3
 801fb38:	2001      	movs	r0, #1
 801fb3a:	f7fa f8d3 	bl	8019ce4 <ctlwizchip>
 801fb3e:	4603      	mov	r3, r0
 801fb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb44:	d102      	bne.n	801fb4c <w5500_init+0x48>
  {
	  return -1;
 801fb46:	f04f 33ff 	mov.w	r3, #4294967295
 801fb4a:	e00b      	b.n	801fb64 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801fb4c:	f7ff ff94 	bl	801fa78 <link_status>
 801fb50:	4603      	mov	r3, r0
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d102      	bne.n	801fb5c <w5500_init+0x58>
	   return -1;
 801fb56:	f04f 33ff 	mov.w	r3, #4294967295
 801fb5a:	e003      	b.n	801fb64 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801fb5c:	4b07      	ldr	r3, [pc, #28]	; (801fb7c <w5500_init+0x78>)
 801fb5e:	2200      	movs	r2, #0
 801fb60:	701a      	strb	r2, [r3, #0]
  return 0;
 801fb62:	2300      	movs	r3, #0
}
 801fb64:	4618      	mov	r0, r3
 801fb66:	3714      	adds	r7, #20
 801fb68:	46bd      	mov	sp, r7
 801fb6a:	bd90      	pop	{r4, r7, pc}
 801fb6c:	08033310 	.word	0x08033310
 801fb70:	2000152c 	.word	0x2000152c
 801fb74:	20001528 	.word	0x20001528
 801fb78:	20001530 	.word	0x20001530
 801fb7c:	2000151c 	.word	0x2000151c

0801fb80 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801fb80:	b480      	push	{r7}
 801fb82:	b083      	sub	sp, #12
 801fb84:	af00      	add	r7, sp, #0
 801fb86:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801fb88:	4b07      	ldr	r3, [pc, #28]	; (801fba8 <w5500_delay_cb+0x28>)
 801fb8a:	4a08      	ldr	r2, [pc, #32]	; (801fbac <w5500_delay_cb+0x2c>)
 801fb8c:	601a      	str	r2, [r3, #0]

	if (function){
 801fb8e:	687b      	ldr	r3, [r7, #4]
 801fb90:	2b00      	cmp	r3, #0
 801fb92:	d002      	beq.n	801fb9a <w5500_delay_cb+0x1a>
		delay_ms = function;
 801fb94:	4a04      	ldr	r2, [pc, #16]	; (801fba8 <w5500_delay_cb+0x28>)
 801fb96:	687b      	ldr	r3, [r7, #4]
 801fb98:	6013      	str	r3, [r2, #0]
	}
}
 801fb9a:	bf00      	nop
 801fb9c:	370c      	adds	r7, #12
 801fb9e:	46bd      	mov	sp, r7
 801fba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fba4:	4770      	bx	lr
 801fba6:	bf00      	nop
 801fba8:	20001528 	.word	0x20001528
 801fbac:	0801f957 	.word	0x0801f957

0801fbb0 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801fbb0:	b480      	push	{r7}
 801fbb2:	b083      	sub	sp, #12
 801fbb4:	af00      	add	r7, sp, #0
 801fbb6:	6078      	str	r0, [r7, #4]
 801fbb8:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801fbba:	4b0c      	ldr	r3, [pc, #48]	; (801fbec <w5500_reset_cb+0x3c>)
 801fbbc:	4a0c      	ldr	r2, [pc, #48]	; (801fbf0 <w5500_reset_cb+0x40>)
 801fbbe:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801fbc0:	4b0c      	ldr	r3, [pc, #48]	; (801fbf4 <w5500_reset_cb+0x44>)
 801fbc2:	4a0b      	ldr	r2, [pc, #44]	; (801fbf0 <w5500_reset_cb+0x40>)
 801fbc4:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	2b00      	cmp	r3, #0
 801fbca:	d002      	beq.n	801fbd2 <w5500_reset_cb+0x22>
 801fbcc:	4a07      	ldr	r2, [pc, #28]	; (801fbec <w5500_reset_cb+0x3c>)
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 801fbd2:	683b      	ldr	r3, [r7, #0]
 801fbd4:	2b00      	cmp	r3, #0
 801fbd6:	d002      	beq.n	801fbde <w5500_reset_cb+0x2e>
 801fbd8:	4a06      	ldr	r2, [pc, #24]	; (801fbf4 <w5500_reset_cb+0x44>)
 801fbda:	683b      	ldr	r3, [r7, #0]
 801fbdc:	6013      	str	r3, [r2, #0]
}
 801fbde:	bf00      	nop
 801fbe0:	370c      	adds	r7, #12
 801fbe2:	46bd      	mov	sp, r7
 801fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbe8:	4770      	bx	lr
 801fbea:	bf00      	nop
 801fbec:	2000152c 	.word	0x2000152c
 801fbf0:	0801f949 	.word	0x0801f949
 801fbf4:	20001530 	.word	0x20001530

0801fbf8 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 801fbfc:	2200      	movs	r2, #0
 801fbfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fc02:	4802      	ldr	r0, [pc, #8]	; (801fc0c <Eth_reset_on+0x14>)
 801fc04:	f7f5 ff8e 	bl	8015b24 <HAL_GPIO_WritePin>
}
 801fc08:	bf00      	nop
 801fc0a:	bd80      	pop	{r7, pc}
 801fc0c:	40020000 	.word	0x40020000

0801fc10 <Eth_reset_off>:

void Eth_reset_off(void){
 801fc10:	b580      	push	{r7, lr}
 801fc12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 801fc14:	2201      	movs	r2, #1
 801fc16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801fc1a:	4802      	ldr	r0, [pc, #8]	; (801fc24 <Eth_reset_off+0x14>)
 801fc1c:	f7f5 ff82 	bl	8015b24 <HAL_GPIO_WritePin>
}
 801fc20:	bf00      	nop
 801fc22:	bd80      	pop	{r7, pc}
 801fc24:	40020000 	.word	0x40020000

0801fc28 <Eth_spi_select>:

void Eth_spi_select(void){
 801fc28:	b580      	push	{r7, lr}
 801fc2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 801fc2c:	2200      	movs	r2, #0
 801fc2e:	2140      	movs	r1, #64	; 0x40
 801fc30:	4802      	ldr	r0, [pc, #8]	; (801fc3c <Eth_spi_select+0x14>)
 801fc32:	f7f5 ff77 	bl	8015b24 <HAL_GPIO_WritePin>
}
 801fc36:	bf00      	nop
 801fc38:	bd80      	pop	{r7, pc}
 801fc3a:	bf00      	nop
 801fc3c:	40020400 	.word	0x40020400

0801fc40 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 801fc40:	b580      	push	{r7, lr}
 801fc42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 801fc44:	2201      	movs	r2, #1
 801fc46:	2140      	movs	r1, #64	; 0x40
 801fc48:	4802      	ldr	r0, [pc, #8]	; (801fc54 <Eth_spi_deselect+0x14>)
 801fc4a:	f7f5 ff6b 	bl	8015b24 <HAL_GPIO_WritePin>
}
 801fc4e:	bf00      	nop
 801fc50:	bd80      	pop	{r7, pc}
 801fc52:	bf00      	nop
 801fc54:	40020400 	.word	0x40020400

0801fc58 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 801fc58:	b084      	sub	sp, #16
 801fc5a:	b580      	push	{r7, lr}
 801fc5c:	af00      	add	r7, sp, #0
 801fc5e:	f107 0c08 	add.w	ip, r7, #8
 801fc62:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 801fc66:	4b07      	ldr	r3, [pc, #28]	; (801fc84 <Reg_eth_spi+0x2c>)
 801fc68:	4618      	mov	r0, r3
 801fc6a:	f107 0308 	add.w	r3, r7, #8
 801fc6e:	2258      	movs	r2, #88	; 0x58
 801fc70:	4619      	mov	r1, r3
 801fc72:	f00d ff18 	bl	802daa6 <memcpy>
}
 801fc76:	bf00      	nop
 801fc78:	46bd      	mov	sp, r7
 801fc7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801fc7e:	b004      	add	sp, #16
 801fc80:	4770      	bx	lr
 801fc82:	bf00      	nop
 801fc84:	20001534 	.word	0x20001534

0801fc88 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 801fc88:	b580      	push	{r7, lr}
 801fc8a:	b082      	sub	sp, #8
 801fc8c:	af00      	add	r7, sp, #0
 801fc8e:	4603      	mov	r3, r0
 801fc90:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 801fc92:	1df9      	adds	r1, r7, #7
 801fc94:	f241 3388 	movw	r3, #5000	; 0x1388
 801fc98:	2201      	movs	r2, #1
 801fc9a:	4803      	ldr	r0, [pc, #12]	; (801fca8 <Eth_spi_send_byte+0x20>)
 801fc9c:	f7f6 fd01 	bl	80166a2 <HAL_SPI_Transmit>
}
 801fca0:	bf00      	nop
 801fca2:	3708      	adds	r7, #8
 801fca4:	46bd      	mov	sp, r7
 801fca6:	bd80      	pop	{r7, pc}
 801fca8:	20001534 	.word	0x20001534

0801fcac <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 801fcac:	b580      	push	{r7, lr}
 801fcae:	b082      	sub	sp, #8
 801fcb0:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 801fcb2:	1df9      	adds	r1, r7, #7
 801fcb4:	f241 3388 	movw	r3, #5000	; 0x1388
 801fcb8:	2201      	movs	r2, #1
 801fcba:	4804      	ldr	r0, [pc, #16]	; (801fccc <Eth_spi_resv_byte+0x20>)
 801fcbc:	f7f6 fe34 	bl	8016928 <HAL_SPI_Receive>
	return byte;
 801fcc0:	79fb      	ldrb	r3, [r7, #7]
}
 801fcc2:	4618      	mov	r0, r3
 801fcc4:	3708      	adds	r7, #8
 801fcc6:	46bd      	mov	sp, r7
 801fcc8:	bd80      	pop	{r7, pc}
 801fcca:	bf00      	nop
 801fccc:	20001534 	.word	0x20001534

0801fcd0 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 801fcd0:	b480      	push	{r7}
 801fcd2:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 801fcd4:	bf00      	nop
 801fcd6:	46bd      	mov	sp, r7
 801fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcdc:	4770      	bx	lr
	...

0801fce0 <__NVIC_SetPriority>:
{
 801fce0:	b480      	push	{r7}
 801fce2:	b083      	sub	sp, #12
 801fce4:	af00      	add	r7, sp, #0
 801fce6:	4603      	mov	r3, r0
 801fce8:	6039      	str	r1, [r7, #0]
 801fcea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801fcec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801fcf0:	2b00      	cmp	r3, #0
 801fcf2:	db0a      	blt.n	801fd0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801fcf4:	683b      	ldr	r3, [r7, #0]
 801fcf6:	b2da      	uxtb	r2, r3
 801fcf8:	490c      	ldr	r1, [pc, #48]	; (801fd2c <__NVIC_SetPriority+0x4c>)
 801fcfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801fcfe:	0112      	lsls	r2, r2, #4
 801fd00:	b2d2      	uxtb	r2, r2
 801fd02:	440b      	add	r3, r1
 801fd04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801fd08:	e00a      	b.n	801fd20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801fd0a:	683b      	ldr	r3, [r7, #0]
 801fd0c:	b2da      	uxtb	r2, r3
 801fd0e:	4908      	ldr	r1, [pc, #32]	; (801fd30 <__NVIC_SetPriority+0x50>)
 801fd10:	79fb      	ldrb	r3, [r7, #7]
 801fd12:	f003 030f 	and.w	r3, r3, #15
 801fd16:	3b04      	subs	r3, #4
 801fd18:	0112      	lsls	r2, r2, #4
 801fd1a:	b2d2      	uxtb	r2, r2
 801fd1c:	440b      	add	r3, r1
 801fd1e:	761a      	strb	r2, [r3, #24]
}
 801fd20:	bf00      	nop
 801fd22:	370c      	adds	r7, #12
 801fd24:	46bd      	mov	sp, r7
 801fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd2a:	4770      	bx	lr
 801fd2c:	e000e100 	.word	0xe000e100
 801fd30:	e000ed00 	.word	0xe000ed00

0801fd34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801fd34:	b580      	push	{r7, lr}
 801fd36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801fd38:	4b05      	ldr	r3, [pc, #20]	; (801fd50 <SysTick_Handler+0x1c>)
 801fd3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 801fd3c:	f002 fbe0 	bl	8022500 <xTaskGetSchedulerState>
 801fd40:	4603      	mov	r3, r0
 801fd42:	2b01      	cmp	r3, #1
 801fd44:	d001      	beq.n	801fd4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801fd46:	f003 fac7 	bl	80232d8 <xPortSysTickHandler>
  }
}
 801fd4a:	bf00      	nop
 801fd4c:	bd80      	pop	{r7, pc}
 801fd4e:	bf00      	nop
 801fd50:	e000e010 	.word	0xe000e010

0801fd54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801fd54:	b580      	push	{r7, lr}
 801fd56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 801fd58:	2100      	movs	r1, #0
 801fd5a:	f06f 0004 	mvn.w	r0, #4
 801fd5e:	f7ff ffbf 	bl	801fce0 <__NVIC_SetPriority>
#endif
}
 801fd62:	bf00      	nop
 801fd64:	bd80      	pop	{r7, pc}
	...

0801fd68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 801fd68:	b480      	push	{r7}
 801fd6a:	b083      	sub	sp, #12
 801fd6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fd6e:	f3ef 8305 	mrs	r3, IPSR
 801fd72:	603b      	str	r3, [r7, #0]
  return(result);
 801fd74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fd76:	2b00      	cmp	r3, #0
 801fd78:	d003      	beq.n	801fd82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801fd7a:	f06f 0305 	mvn.w	r3, #5
 801fd7e:	607b      	str	r3, [r7, #4]
 801fd80:	e00c      	b.n	801fd9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801fd82:	4b0a      	ldr	r3, [pc, #40]	; (801fdac <osKernelInitialize+0x44>)
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	d105      	bne.n	801fd96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801fd8a:	4b08      	ldr	r3, [pc, #32]	; (801fdac <osKernelInitialize+0x44>)
 801fd8c:	2201      	movs	r2, #1
 801fd8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801fd90:	2300      	movs	r3, #0
 801fd92:	607b      	str	r3, [r7, #4]
 801fd94:	e002      	b.n	801fd9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801fd96:	f04f 33ff 	mov.w	r3, #4294967295
 801fd9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801fd9c:	687b      	ldr	r3, [r7, #4]
}
 801fd9e:	4618      	mov	r0, r3
 801fda0:	370c      	adds	r7, #12
 801fda2:	46bd      	mov	sp, r7
 801fda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fda8:	4770      	bx	lr
 801fdaa:	bf00      	nop
 801fdac:	2000158c 	.word	0x2000158c

0801fdb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801fdb0:	b580      	push	{r7, lr}
 801fdb2:	b082      	sub	sp, #8
 801fdb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fdb6:	f3ef 8305 	mrs	r3, IPSR
 801fdba:	603b      	str	r3, [r7, #0]
  return(result);
 801fdbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d003      	beq.n	801fdca <osKernelStart+0x1a>
    stat = osErrorISR;
 801fdc2:	f06f 0305 	mvn.w	r3, #5
 801fdc6:	607b      	str	r3, [r7, #4]
 801fdc8:	e010      	b.n	801fdec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801fdca:	4b0b      	ldr	r3, [pc, #44]	; (801fdf8 <osKernelStart+0x48>)
 801fdcc:	681b      	ldr	r3, [r3, #0]
 801fdce:	2b01      	cmp	r3, #1
 801fdd0:	d109      	bne.n	801fde6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801fdd2:	f7ff ffbf 	bl	801fd54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801fdd6:	4b08      	ldr	r3, [pc, #32]	; (801fdf8 <osKernelStart+0x48>)
 801fdd8:	2202      	movs	r2, #2
 801fdda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801fddc:	f001 fece 	bl	8021b7c <vTaskStartScheduler>
      stat = osOK;
 801fde0:	2300      	movs	r3, #0
 801fde2:	607b      	str	r3, [r7, #4]
 801fde4:	e002      	b.n	801fdec <osKernelStart+0x3c>
    } else {
      stat = osError;
 801fde6:	f04f 33ff 	mov.w	r3, #4294967295
 801fdea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801fdec:	687b      	ldr	r3, [r7, #4]
}
 801fdee:	4618      	mov	r0, r3
 801fdf0:	3708      	adds	r7, #8
 801fdf2:	46bd      	mov	sp, r7
 801fdf4:	bd80      	pop	{r7, pc}
 801fdf6:	bf00      	nop
 801fdf8:	2000158c 	.word	0x2000158c

0801fdfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801fdfc:	b580      	push	{r7, lr}
 801fdfe:	b08e      	sub	sp, #56	; 0x38
 801fe00:	af04      	add	r7, sp, #16
 801fe02:	60f8      	str	r0, [r7, #12]
 801fe04:	60b9      	str	r1, [r7, #8]
 801fe06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801fe08:	2300      	movs	r3, #0
 801fe0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801fe0c:	f3ef 8305 	mrs	r3, IPSR
 801fe10:	617b      	str	r3, [r7, #20]
  return(result);
 801fe12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	d17e      	bne.n	801ff16 <osThreadNew+0x11a>
 801fe18:	68fb      	ldr	r3, [r7, #12]
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d07b      	beq.n	801ff16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801fe1e:	2380      	movs	r3, #128	; 0x80
 801fe20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801fe22:	2318      	movs	r3, #24
 801fe24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801fe26:	2300      	movs	r3, #0
 801fe28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801fe2a:	f04f 33ff 	mov.w	r3, #4294967295
 801fe2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d045      	beq.n	801fec2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	2b00      	cmp	r3, #0
 801fe3c:	d002      	beq.n	801fe44 <osThreadNew+0x48>
        name = attr->name;
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801fe44:	687b      	ldr	r3, [r7, #4]
 801fe46:	699b      	ldr	r3, [r3, #24]
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	d002      	beq.n	801fe52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 801fe4c:	687b      	ldr	r3, [r7, #4]
 801fe4e:	699b      	ldr	r3, [r3, #24]
 801fe50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801fe52:	69fb      	ldr	r3, [r7, #28]
 801fe54:	2b00      	cmp	r3, #0
 801fe56:	d008      	beq.n	801fe6a <osThreadNew+0x6e>
 801fe58:	69fb      	ldr	r3, [r7, #28]
 801fe5a:	2b38      	cmp	r3, #56	; 0x38
 801fe5c:	d805      	bhi.n	801fe6a <osThreadNew+0x6e>
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	685b      	ldr	r3, [r3, #4]
 801fe62:	f003 0301 	and.w	r3, r3, #1
 801fe66:	2b00      	cmp	r3, #0
 801fe68:	d001      	beq.n	801fe6e <osThreadNew+0x72>
        return (NULL);
 801fe6a:	2300      	movs	r3, #0
 801fe6c:	e054      	b.n	801ff18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	695b      	ldr	r3, [r3, #20]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d003      	beq.n	801fe7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	695b      	ldr	r3, [r3, #20]
 801fe7a:	089b      	lsrs	r3, r3, #2
 801fe7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801fe7e:	687b      	ldr	r3, [r7, #4]
 801fe80:	689b      	ldr	r3, [r3, #8]
 801fe82:	2b00      	cmp	r3, #0
 801fe84:	d00e      	beq.n	801fea4 <osThreadNew+0xa8>
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	68db      	ldr	r3, [r3, #12]
 801fe8a:	2bab      	cmp	r3, #171	; 0xab
 801fe8c:	d90a      	bls.n	801fea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801fe92:	2b00      	cmp	r3, #0
 801fe94:	d006      	beq.n	801fea4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	695b      	ldr	r3, [r3, #20]
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	d002      	beq.n	801fea4 <osThreadNew+0xa8>
        mem = 1;
 801fe9e:	2301      	movs	r3, #1
 801fea0:	61bb      	str	r3, [r7, #24]
 801fea2:	e010      	b.n	801fec6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	689b      	ldr	r3, [r3, #8]
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d10c      	bne.n	801fec6 <osThreadNew+0xca>
 801feac:	687b      	ldr	r3, [r7, #4]
 801feae:	68db      	ldr	r3, [r3, #12]
 801feb0:	2b00      	cmp	r3, #0
 801feb2:	d108      	bne.n	801fec6 <osThreadNew+0xca>
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	691b      	ldr	r3, [r3, #16]
 801feb8:	2b00      	cmp	r3, #0
 801feba:	d104      	bne.n	801fec6 <osThreadNew+0xca>
          mem = 0;
 801febc:	2300      	movs	r3, #0
 801febe:	61bb      	str	r3, [r7, #24]
 801fec0:	e001      	b.n	801fec6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801fec2:	2300      	movs	r3, #0
 801fec4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801fec6:	69bb      	ldr	r3, [r7, #24]
 801fec8:	2b01      	cmp	r3, #1
 801feca:	d110      	bne.n	801feee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801fed0:	687a      	ldr	r2, [r7, #4]
 801fed2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801fed4:	9202      	str	r2, [sp, #8]
 801fed6:	9301      	str	r3, [sp, #4]
 801fed8:	69fb      	ldr	r3, [r7, #28]
 801feda:	9300      	str	r3, [sp, #0]
 801fedc:	68bb      	ldr	r3, [r7, #8]
 801fede:	6a3a      	ldr	r2, [r7, #32]
 801fee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fee2:	68f8      	ldr	r0, [r7, #12]
 801fee4:	f001 fc5a 	bl	802179c <xTaskCreateStatic>
 801fee8:	4603      	mov	r3, r0
 801feea:	613b      	str	r3, [r7, #16]
 801feec:	e013      	b.n	801ff16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801feee:	69bb      	ldr	r3, [r7, #24]
 801fef0:	2b00      	cmp	r3, #0
 801fef2:	d110      	bne.n	801ff16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801fef4:	6a3b      	ldr	r3, [r7, #32]
 801fef6:	b29a      	uxth	r2, r3
 801fef8:	f107 0310 	add.w	r3, r7, #16
 801fefc:	9301      	str	r3, [sp, #4]
 801fefe:	69fb      	ldr	r3, [r7, #28]
 801ff00:	9300      	str	r3, [sp, #0]
 801ff02:	68bb      	ldr	r3, [r7, #8]
 801ff04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ff06:	68f8      	ldr	r0, [r7, #12]
 801ff08:	f001 fca5 	bl	8021856 <xTaskCreate>
 801ff0c:	4603      	mov	r3, r0
 801ff0e:	2b01      	cmp	r3, #1
 801ff10:	d001      	beq.n	801ff16 <osThreadNew+0x11a>
            hTask = NULL;
 801ff12:	2300      	movs	r3, #0
 801ff14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801ff16:	693b      	ldr	r3, [r7, #16]
}
 801ff18:	4618      	mov	r0, r3
 801ff1a:	3728      	adds	r7, #40	; 0x28
 801ff1c:	46bd      	mov	sp, r7
 801ff1e:	bd80      	pop	{r7, pc}

0801ff20 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 801ff20:	b580      	push	{r7, lr}
 801ff22:	b086      	sub	sp, #24
 801ff24:	af00      	add	r7, sp, #0
 801ff26:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ff2c:	f3ef 8305 	mrs	r3, IPSR
 801ff30:	60fb      	str	r3, [r7, #12]
  return(result);
 801ff32:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d102      	bne.n	801ff3e <osThreadGetStackSpace+0x1e>
 801ff38:	693b      	ldr	r3, [r7, #16]
 801ff3a:	2b00      	cmp	r3, #0
 801ff3c:	d102      	bne.n	801ff44 <osThreadGetStackSpace+0x24>
    sz = 0U;
 801ff3e:	2300      	movs	r3, #0
 801ff40:	617b      	str	r3, [r7, #20]
 801ff42:	e005      	b.n	801ff50 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 801ff44:	6938      	ldr	r0, [r7, #16]
 801ff46:	f002 fa5b 	bl	8022400 <uxTaskGetStackHighWaterMark>
 801ff4a:	4603      	mov	r3, r0
 801ff4c:	009b      	lsls	r3, r3, #2
 801ff4e:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 801ff50:	697b      	ldr	r3, [r7, #20]
}
 801ff52:	4618      	mov	r0, r3
 801ff54:	3718      	adds	r7, #24
 801ff56:	46bd      	mov	sp, r7
 801ff58:	bd80      	pop	{r7, pc}
	...

0801ff5c <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 801ff5c:	b480      	push	{r7}
 801ff5e:	b083      	sub	sp, #12
 801ff60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ff62:	f3ef 8305 	mrs	r3, IPSR
 801ff66:	603b      	str	r3, [r7, #0]
  return(result);
 801ff68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ff6a:	2b00      	cmp	r3, #0
 801ff6c:	d003      	beq.n	801ff76 <osThreadYield+0x1a>
    stat = osErrorISR;
 801ff6e:	f06f 0305 	mvn.w	r3, #5
 801ff72:	607b      	str	r3, [r7, #4]
 801ff74:	e009      	b.n	801ff8a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 801ff76:	2300      	movs	r3, #0
 801ff78:	607b      	str	r3, [r7, #4]
    taskYIELD();
 801ff7a:	4b07      	ldr	r3, [pc, #28]	; (801ff98 <osThreadYield+0x3c>)
 801ff7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ff80:	601a      	str	r2, [r3, #0]
 801ff82:	f3bf 8f4f 	dsb	sy
 801ff86:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 801ff8a:	687b      	ldr	r3, [r7, #4]
}
 801ff8c:	4618      	mov	r0, r3
 801ff8e:	370c      	adds	r7, #12
 801ff90:	46bd      	mov	sp, r7
 801ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff96:	4770      	bx	lr
 801ff98:	e000ed04 	.word	0xe000ed04

0801ff9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801ff9c:	b580      	push	{r7, lr}
 801ff9e:	b084      	sub	sp, #16
 801ffa0:	af00      	add	r7, sp, #0
 801ffa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ffa4:	f3ef 8305 	mrs	r3, IPSR
 801ffa8:	60bb      	str	r3, [r7, #8]
  return(result);
 801ffaa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d003      	beq.n	801ffb8 <osDelay+0x1c>
    stat = osErrorISR;
 801ffb0:	f06f 0305 	mvn.w	r3, #5
 801ffb4:	60fb      	str	r3, [r7, #12]
 801ffb6:	e007      	b.n	801ffc8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801ffb8:	2300      	movs	r3, #0
 801ffba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801ffbc:	687b      	ldr	r3, [r7, #4]
 801ffbe:	2b00      	cmp	r3, #0
 801ffc0:	d002      	beq.n	801ffc8 <osDelay+0x2c>
      vTaskDelay(ticks);
 801ffc2:	6878      	ldr	r0, [r7, #4]
 801ffc4:	f001 fda6 	bl	8021b14 <vTaskDelay>
    }
  }

  return (stat);
 801ffc8:	68fb      	ldr	r3, [r7, #12]
}
 801ffca:	4618      	mov	r0, r3
 801ffcc:	3710      	adds	r7, #16
 801ffce:	46bd      	mov	sp, r7
 801ffd0:	bd80      	pop	{r7, pc}

0801ffd2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801ffd2:	b580      	push	{r7, lr}
 801ffd4:	b088      	sub	sp, #32
 801ffd6:	af00      	add	r7, sp, #0
 801ffd8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801ffda:	2300      	movs	r3, #0
 801ffdc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801ffde:	f3ef 8305 	mrs	r3, IPSR
 801ffe2:	60bb      	str	r3, [r7, #8]
  return(result);
 801ffe4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801ffe6:	2b00      	cmp	r3, #0
 801ffe8:	d174      	bne.n	80200d4 <osMutexNew+0x102>
    if (attr != NULL) {
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	2b00      	cmp	r3, #0
 801ffee:	d003      	beq.n	801fff8 <osMutexNew+0x26>
      type = attr->attr_bits;
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	685b      	ldr	r3, [r3, #4]
 801fff4:	61bb      	str	r3, [r7, #24]
 801fff6:	e001      	b.n	801fffc <osMutexNew+0x2a>
    } else {
      type = 0U;
 801fff8:	2300      	movs	r3, #0
 801fffa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 801fffc:	69bb      	ldr	r3, [r7, #24]
 801fffe:	f003 0301 	and.w	r3, r3, #1
 8020002:	2b00      	cmp	r3, #0
 8020004:	d002      	beq.n	802000c <osMutexNew+0x3a>
      rmtx = 1U;
 8020006:	2301      	movs	r3, #1
 8020008:	617b      	str	r3, [r7, #20]
 802000a:	e001      	b.n	8020010 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 802000c:	2300      	movs	r3, #0
 802000e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8020010:	69bb      	ldr	r3, [r7, #24]
 8020012:	f003 0308 	and.w	r3, r3, #8
 8020016:	2b00      	cmp	r3, #0
 8020018:	d15c      	bne.n	80200d4 <osMutexNew+0x102>
      mem = -1;
 802001a:	f04f 33ff 	mov.w	r3, #4294967295
 802001e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8020020:	687b      	ldr	r3, [r7, #4]
 8020022:	2b00      	cmp	r3, #0
 8020024:	d015      	beq.n	8020052 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8020026:	687b      	ldr	r3, [r7, #4]
 8020028:	689b      	ldr	r3, [r3, #8]
 802002a:	2b00      	cmp	r3, #0
 802002c:	d006      	beq.n	802003c <osMutexNew+0x6a>
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	68db      	ldr	r3, [r3, #12]
 8020032:	2b4f      	cmp	r3, #79	; 0x4f
 8020034:	d902      	bls.n	802003c <osMutexNew+0x6a>
          mem = 1;
 8020036:	2301      	movs	r3, #1
 8020038:	613b      	str	r3, [r7, #16]
 802003a:	e00c      	b.n	8020056 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	689b      	ldr	r3, [r3, #8]
 8020040:	2b00      	cmp	r3, #0
 8020042:	d108      	bne.n	8020056 <osMutexNew+0x84>
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	68db      	ldr	r3, [r3, #12]
 8020048:	2b00      	cmp	r3, #0
 802004a:	d104      	bne.n	8020056 <osMutexNew+0x84>
            mem = 0;
 802004c:	2300      	movs	r3, #0
 802004e:	613b      	str	r3, [r7, #16]
 8020050:	e001      	b.n	8020056 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8020052:	2300      	movs	r3, #0
 8020054:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8020056:	693b      	ldr	r3, [r7, #16]
 8020058:	2b01      	cmp	r3, #1
 802005a:	d112      	bne.n	8020082 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 802005c:	697b      	ldr	r3, [r7, #20]
 802005e:	2b00      	cmp	r3, #0
 8020060:	d007      	beq.n	8020072 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	689b      	ldr	r3, [r3, #8]
 8020066:	4619      	mov	r1, r3
 8020068:	2004      	movs	r0, #4
 802006a:	f000 fc68 	bl	802093e <xQueueCreateMutexStatic>
 802006e:	61f8      	str	r0, [r7, #28]
 8020070:	e016      	b.n	80200a0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	689b      	ldr	r3, [r3, #8]
 8020076:	4619      	mov	r1, r3
 8020078:	2001      	movs	r0, #1
 802007a:	f000 fc60 	bl	802093e <xQueueCreateMutexStatic>
 802007e:	61f8      	str	r0, [r7, #28]
 8020080:	e00e      	b.n	80200a0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8020082:	693b      	ldr	r3, [r7, #16]
 8020084:	2b00      	cmp	r3, #0
 8020086:	d10b      	bne.n	80200a0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8020088:	697b      	ldr	r3, [r7, #20]
 802008a:	2b00      	cmp	r3, #0
 802008c:	d004      	beq.n	8020098 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 802008e:	2004      	movs	r0, #4
 8020090:	f000 fc3d 	bl	802090e <xQueueCreateMutex>
 8020094:	61f8      	str	r0, [r7, #28]
 8020096:	e003      	b.n	80200a0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8020098:	2001      	movs	r0, #1
 802009a:	f000 fc38 	bl	802090e <xQueueCreateMutex>
 802009e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80200a0:	69fb      	ldr	r3, [r7, #28]
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d00c      	beq.n	80200c0 <osMutexNew+0xee>
        if (attr != NULL) {
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	2b00      	cmp	r3, #0
 80200aa:	d003      	beq.n	80200b4 <osMutexNew+0xe2>
          name = attr->name;
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	681b      	ldr	r3, [r3, #0]
 80200b0:	60fb      	str	r3, [r7, #12]
 80200b2:	e001      	b.n	80200b8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80200b4:	2300      	movs	r3, #0
 80200b6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80200b8:	68f9      	ldr	r1, [r7, #12]
 80200ba:	69f8      	ldr	r0, [r7, #28]
 80200bc:	f001 fb10 	bl	80216e0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80200c0:	69fb      	ldr	r3, [r7, #28]
 80200c2:	2b00      	cmp	r3, #0
 80200c4:	d006      	beq.n	80200d4 <osMutexNew+0x102>
 80200c6:	697b      	ldr	r3, [r7, #20]
 80200c8:	2b00      	cmp	r3, #0
 80200ca:	d003      	beq.n	80200d4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80200cc:	69fb      	ldr	r3, [r7, #28]
 80200ce:	f043 0301 	orr.w	r3, r3, #1
 80200d2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80200d4:	69fb      	ldr	r3, [r7, #28]
}
 80200d6:	4618      	mov	r0, r3
 80200d8:	3720      	adds	r7, #32
 80200da:	46bd      	mov	sp, r7
 80200dc:	bd80      	pop	{r7, pc}

080200de <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80200de:	b580      	push	{r7, lr}
 80200e0:	b086      	sub	sp, #24
 80200e2:	af00      	add	r7, sp, #0
 80200e4:	6078      	str	r0, [r7, #4]
 80200e6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80200e8:	687b      	ldr	r3, [r7, #4]
 80200ea:	f023 0301 	bic.w	r3, r3, #1
 80200ee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80200f0:	687b      	ldr	r3, [r7, #4]
 80200f2:	f003 0301 	and.w	r3, r3, #1
 80200f6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80200f8:	2300      	movs	r3, #0
 80200fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80200fc:	f3ef 8305 	mrs	r3, IPSR
 8020100:	60bb      	str	r3, [r7, #8]
  return(result);
 8020102:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8020104:	2b00      	cmp	r3, #0
 8020106:	d003      	beq.n	8020110 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8020108:	f06f 0305 	mvn.w	r3, #5
 802010c:	617b      	str	r3, [r7, #20]
 802010e:	e02c      	b.n	802016a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8020110:	693b      	ldr	r3, [r7, #16]
 8020112:	2b00      	cmp	r3, #0
 8020114:	d103      	bne.n	802011e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8020116:	f06f 0303 	mvn.w	r3, #3
 802011a:	617b      	str	r3, [r7, #20]
 802011c:	e025      	b.n	802016a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 802011e:	68fb      	ldr	r3, [r7, #12]
 8020120:	2b00      	cmp	r3, #0
 8020122:	d011      	beq.n	8020148 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8020124:	6839      	ldr	r1, [r7, #0]
 8020126:	6938      	ldr	r0, [r7, #16]
 8020128:	f000 fc58 	bl	80209dc <xQueueTakeMutexRecursive>
 802012c:	4603      	mov	r3, r0
 802012e:	2b01      	cmp	r3, #1
 8020130:	d01b      	beq.n	802016a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8020132:	683b      	ldr	r3, [r7, #0]
 8020134:	2b00      	cmp	r3, #0
 8020136:	d003      	beq.n	8020140 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8020138:	f06f 0301 	mvn.w	r3, #1
 802013c:	617b      	str	r3, [r7, #20]
 802013e:	e014      	b.n	802016a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020140:	f06f 0302 	mvn.w	r3, #2
 8020144:	617b      	str	r3, [r7, #20]
 8020146:	e010      	b.n	802016a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8020148:	6839      	ldr	r1, [r7, #0]
 802014a:	6938      	ldr	r0, [r7, #16]
 802014c:	f000 fef6 	bl	8020f3c <xQueueSemaphoreTake>
 8020150:	4603      	mov	r3, r0
 8020152:	2b01      	cmp	r3, #1
 8020154:	d009      	beq.n	802016a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8020156:	683b      	ldr	r3, [r7, #0]
 8020158:	2b00      	cmp	r3, #0
 802015a:	d003      	beq.n	8020164 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 802015c:	f06f 0301 	mvn.w	r3, #1
 8020160:	617b      	str	r3, [r7, #20]
 8020162:	e002      	b.n	802016a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020164:	f06f 0302 	mvn.w	r3, #2
 8020168:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 802016a:	697b      	ldr	r3, [r7, #20]
}
 802016c:	4618      	mov	r0, r3
 802016e:	3718      	adds	r7, #24
 8020170:	46bd      	mov	sp, r7
 8020172:	bd80      	pop	{r7, pc}

08020174 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8020174:	b580      	push	{r7, lr}
 8020176:	b086      	sub	sp, #24
 8020178:	af00      	add	r7, sp, #0
 802017a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 802017c:	687b      	ldr	r3, [r7, #4]
 802017e:	f023 0301 	bic.w	r3, r3, #1
 8020182:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	f003 0301 	and.w	r3, r3, #1
 802018a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 802018c:	2300      	movs	r3, #0
 802018e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020190:	f3ef 8305 	mrs	r3, IPSR
 8020194:	60bb      	str	r3, [r7, #8]
  return(result);
 8020196:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8020198:	2b00      	cmp	r3, #0
 802019a:	d003      	beq.n	80201a4 <osMutexRelease+0x30>
    stat = osErrorISR;
 802019c:	f06f 0305 	mvn.w	r3, #5
 80201a0:	617b      	str	r3, [r7, #20]
 80201a2:	e01f      	b.n	80201e4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80201a4:	693b      	ldr	r3, [r7, #16]
 80201a6:	2b00      	cmp	r3, #0
 80201a8:	d103      	bne.n	80201b2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80201aa:	f06f 0303 	mvn.w	r3, #3
 80201ae:	617b      	str	r3, [r7, #20]
 80201b0:	e018      	b.n	80201e4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80201b2:	68fb      	ldr	r3, [r7, #12]
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d009      	beq.n	80201cc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80201b8:	6938      	ldr	r0, [r7, #16]
 80201ba:	f000 fbdb 	bl	8020974 <xQueueGiveMutexRecursive>
 80201be:	4603      	mov	r3, r0
 80201c0:	2b01      	cmp	r3, #1
 80201c2:	d00f      	beq.n	80201e4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80201c4:	f06f 0302 	mvn.w	r3, #2
 80201c8:	617b      	str	r3, [r7, #20]
 80201ca:	e00b      	b.n	80201e4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80201cc:	2300      	movs	r3, #0
 80201ce:	2200      	movs	r2, #0
 80201d0:	2100      	movs	r1, #0
 80201d2:	6938      	ldr	r0, [r7, #16]
 80201d4:	f000 fc38 	bl	8020a48 <xQueueGenericSend>
 80201d8:	4603      	mov	r3, r0
 80201da:	2b01      	cmp	r3, #1
 80201dc:	d002      	beq.n	80201e4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80201de:	f06f 0302 	mvn.w	r3, #2
 80201e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80201e4:	697b      	ldr	r3, [r7, #20]
}
 80201e6:	4618      	mov	r0, r3
 80201e8:	3718      	adds	r7, #24
 80201ea:	46bd      	mov	sp, r7
 80201ec:	bd80      	pop	{r7, pc}

080201ee <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80201ee:	b580      	push	{r7, lr}
 80201f0:	b08a      	sub	sp, #40	; 0x28
 80201f2:	af02      	add	r7, sp, #8
 80201f4:	60f8      	str	r0, [r7, #12]
 80201f6:	60b9      	str	r1, [r7, #8]
 80201f8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80201fa:	2300      	movs	r3, #0
 80201fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80201fe:	f3ef 8305 	mrs	r3, IPSR
 8020202:	613b      	str	r3, [r7, #16]
  return(result);
 8020204:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8020206:	2b00      	cmp	r3, #0
 8020208:	d15f      	bne.n	80202ca <osMessageQueueNew+0xdc>
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	2b00      	cmp	r3, #0
 802020e:	d05c      	beq.n	80202ca <osMessageQueueNew+0xdc>
 8020210:	68bb      	ldr	r3, [r7, #8]
 8020212:	2b00      	cmp	r3, #0
 8020214:	d059      	beq.n	80202ca <osMessageQueueNew+0xdc>
    mem = -1;
 8020216:	f04f 33ff 	mov.w	r3, #4294967295
 802021a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 802021c:	687b      	ldr	r3, [r7, #4]
 802021e:	2b00      	cmp	r3, #0
 8020220:	d029      	beq.n	8020276 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8020222:	687b      	ldr	r3, [r7, #4]
 8020224:	689b      	ldr	r3, [r3, #8]
 8020226:	2b00      	cmp	r3, #0
 8020228:	d012      	beq.n	8020250 <osMessageQueueNew+0x62>
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	68db      	ldr	r3, [r3, #12]
 802022e:	2b4f      	cmp	r3, #79	; 0x4f
 8020230:	d90e      	bls.n	8020250 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8020236:	2b00      	cmp	r3, #0
 8020238:	d00a      	beq.n	8020250 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	695a      	ldr	r2, [r3, #20]
 802023e:	68fb      	ldr	r3, [r7, #12]
 8020240:	68b9      	ldr	r1, [r7, #8]
 8020242:	fb01 f303 	mul.w	r3, r1, r3
 8020246:	429a      	cmp	r2, r3
 8020248:	d302      	bcc.n	8020250 <osMessageQueueNew+0x62>
        mem = 1;
 802024a:	2301      	movs	r3, #1
 802024c:	61bb      	str	r3, [r7, #24]
 802024e:	e014      	b.n	802027a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	689b      	ldr	r3, [r3, #8]
 8020254:	2b00      	cmp	r3, #0
 8020256:	d110      	bne.n	802027a <osMessageQueueNew+0x8c>
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	68db      	ldr	r3, [r3, #12]
 802025c:	2b00      	cmp	r3, #0
 802025e:	d10c      	bne.n	802027a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020260:	687b      	ldr	r3, [r7, #4]
 8020262:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020264:	2b00      	cmp	r3, #0
 8020266:	d108      	bne.n	802027a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	695b      	ldr	r3, [r3, #20]
 802026c:	2b00      	cmp	r3, #0
 802026e:	d104      	bne.n	802027a <osMessageQueueNew+0x8c>
          mem = 0;
 8020270:	2300      	movs	r3, #0
 8020272:	61bb      	str	r3, [r7, #24]
 8020274:	e001      	b.n	802027a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8020276:	2300      	movs	r3, #0
 8020278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 802027a:	69bb      	ldr	r3, [r7, #24]
 802027c:	2b01      	cmp	r3, #1
 802027e:	d10b      	bne.n	8020298 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	691a      	ldr	r2, [r3, #16]
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	689b      	ldr	r3, [r3, #8]
 8020288:	2100      	movs	r1, #0
 802028a:	9100      	str	r1, [sp, #0]
 802028c:	68b9      	ldr	r1, [r7, #8]
 802028e:	68f8      	ldr	r0, [r7, #12]
 8020290:	f000 fa4e 	bl	8020730 <xQueueGenericCreateStatic>
 8020294:	61f8      	str	r0, [r7, #28]
 8020296:	e008      	b.n	80202aa <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8020298:	69bb      	ldr	r3, [r7, #24]
 802029a:	2b00      	cmp	r3, #0
 802029c:	d105      	bne.n	80202aa <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 802029e:	2200      	movs	r2, #0
 80202a0:	68b9      	ldr	r1, [r7, #8]
 80202a2:	68f8      	ldr	r0, [r7, #12]
 80202a4:	f000 fabc 	bl	8020820 <xQueueGenericCreate>
 80202a8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80202aa:	69fb      	ldr	r3, [r7, #28]
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d00c      	beq.n	80202ca <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	d003      	beq.n	80202be <osMessageQueueNew+0xd0>
        name = attr->name;
 80202b6:	687b      	ldr	r3, [r7, #4]
 80202b8:	681b      	ldr	r3, [r3, #0]
 80202ba:	617b      	str	r3, [r7, #20]
 80202bc:	e001      	b.n	80202c2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80202be:	2300      	movs	r3, #0
 80202c0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80202c2:	6979      	ldr	r1, [r7, #20]
 80202c4:	69f8      	ldr	r0, [r7, #28]
 80202c6:	f001 fa0b 	bl	80216e0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80202ca:	69fb      	ldr	r3, [r7, #28]
}
 80202cc:	4618      	mov	r0, r3
 80202ce:	3720      	adds	r7, #32
 80202d0:	46bd      	mov	sp, r7
 80202d2:	bd80      	pop	{r7, pc}

080202d4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80202d4:	b580      	push	{r7, lr}
 80202d6:	b088      	sub	sp, #32
 80202d8:	af00      	add	r7, sp, #0
 80202da:	60f8      	str	r0, [r7, #12]
 80202dc:	60b9      	str	r1, [r7, #8]
 80202de:	603b      	str	r3, [r7, #0]
 80202e0:	4613      	mov	r3, r2
 80202e2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80202e4:	68fb      	ldr	r3, [r7, #12]
 80202e6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80202e8:	2300      	movs	r3, #0
 80202ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80202ec:	f3ef 8305 	mrs	r3, IPSR
 80202f0:	617b      	str	r3, [r7, #20]
  return(result);
 80202f2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80202f4:	2b00      	cmp	r3, #0
 80202f6:	d028      	beq.n	802034a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80202f8:	69bb      	ldr	r3, [r7, #24]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d005      	beq.n	802030a <osMessageQueuePut+0x36>
 80202fe:	68bb      	ldr	r3, [r7, #8]
 8020300:	2b00      	cmp	r3, #0
 8020302:	d002      	beq.n	802030a <osMessageQueuePut+0x36>
 8020304:	683b      	ldr	r3, [r7, #0]
 8020306:	2b00      	cmp	r3, #0
 8020308:	d003      	beq.n	8020312 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 802030a:	f06f 0303 	mvn.w	r3, #3
 802030e:	61fb      	str	r3, [r7, #28]
 8020310:	e038      	b.n	8020384 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8020312:	2300      	movs	r3, #0
 8020314:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8020316:	f107 0210 	add.w	r2, r7, #16
 802031a:	2300      	movs	r3, #0
 802031c:	68b9      	ldr	r1, [r7, #8]
 802031e:	69b8      	ldr	r0, [r7, #24]
 8020320:	f000 fc90 	bl	8020c44 <xQueueGenericSendFromISR>
 8020324:	4603      	mov	r3, r0
 8020326:	2b01      	cmp	r3, #1
 8020328:	d003      	beq.n	8020332 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 802032a:	f06f 0302 	mvn.w	r3, #2
 802032e:	61fb      	str	r3, [r7, #28]
 8020330:	e028      	b.n	8020384 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8020332:	693b      	ldr	r3, [r7, #16]
 8020334:	2b00      	cmp	r3, #0
 8020336:	d025      	beq.n	8020384 <osMessageQueuePut+0xb0>
 8020338:	4b15      	ldr	r3, [pc, #84]	; (8020390 <osMessageQueuePut+0xbc>)
 802033a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802033e:	601a      	str	r2, [r3, #0]
 8020340:	f3bf 8f4f 	dsb	sy
 8020344:	f3bf 8f6f 	isb	sy
 8020348:	e01c      	b.n	8020384 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 802034a:	69bb      	ldr	r3, [r7, #24]
 802034c:	2b00      	cmp	r3, #0
 802034e:	d002      	beq.n	8020356 <osMessageQueuePut+0x82>
 8020350:	68bb      	ldr	r3, [r7, #8]
 8020352:	2b00      	cmp	r3, #0
 8020354:	d103      	bne.n	802035e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8020356:	f06f 0303 	mvn.w	r3, #3
 802035a:	61fb      	str	r3, [r7, #28]
 802035c:	e012      	b.n	8020384 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 802035e:	2300      	movs	r3, #0
 8020360:	683a      	ldr	r2, [r7, #0]
 8020362:	68b9      	ldr	r1, [r7, #8]
 8020364:	69b8      	ldr	r0, [r7, #24]
 8020366:	f000 fb6f 	bl	8020a48 <xQueueGenericSend>
 802036a:	4603      	mov	r3, r0
 802036c:	2b01      	cmp	r3, #1
 802036e:	d009      	beq.n	8020384 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8020370:	683b      	ldr	r3, [r7, #0]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d003      	beq.n	802037e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8020376:	f06f 0301 	mvn.w	r3, #1
 802037a:	61fb      	str	r3, [r7, #28]
 802037c:	e002      	b.n	8020384 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 802037e:	f06f 0302 	mvn.w	r3, #2
 8020382:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020384:	69fb      	ldr	r3, [r7, #28]
}
 8020386:	4618      	mov	r0, r3
 8020388:	3720      	adds	r7, #32
 802038a:	46bd      	mov	sp, r7
 802038c:	bd80      	pop	{r7, pc}
 802038e:	bf00      	nop
 8020390:	e000ed04 	.word	0xe000ed04

08020394 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8020394:	b580      	push	{r7, lr}
 8020396:	b088      	sub	sp, #32
 8020398:	af00      	add	r7, sp, #0
 802039a:	60f8      	str	r0, [r7, #12]
 802039c:	60b9      	str	r1, [r7, #8]
 802039e:	607a      	str	r2, [r7, #4]
 80203a0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80203a2:	68fb      	ldr	r3, [r7, #12]
 80203a4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80203a6:	2300      	movs	r3, #0
 80203a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80203aa:	f3ef 8305 	mrs	r3, IPSR
 80203ae:	617b      	str	r3, [r7, #20]
  return(result);
 80203b0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80203b2:	2b00      	cmp	r3, #0
 80203b4:	d028      	beq.n	8020408 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80203b6:	69bb      	ldr	r3, [r7, #24]
 80203b8:	2b00      	cmp	r3, #0
 80203ba:	d005      	beq.n	80203c8 <osMessageQueueGet+0x34>
 80203bc:	68bb      	ldr	r3, [r7, #8]
 80203be:	2b00      	cmp	r3, #0
 80203c0:	d002      	beq.n	80203c8 <osMessageQueueGet+0x34>
 80203c2:	683b      	ldr	r3, [r7, #0]
 80203c4:	2b00      	cmp	r3, #0
 80203c6:	d003      	beq.n	80203d0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80203c8:	f06f 0303 	mvn.w	r3, #3
 80203cc:	61fb      	str	r3, [r7, #28]
 80203ce:	e037      	b.n	8020440 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80203d0:	2300      	movs	r3, #0
 80203d2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80203d4:	f107 0310 	add.w	r3, r7, #16
 80203d8:	461a      	mov	r2, r3
 80203da:	68b9      	ldr	r1, [r7, #8]
 80203dc:	69b8      	ldr	r0, [r7, #24]
 80203de:	f000 ff9b 	bl	8021318 <xQueueReceiveFromISR>
 80203e2:	4603      	mov	r3, r0
 80203e4:	2b01      	cmp	r3, #1
 80203e6:	d003      	beq.n	80203f0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80203e8:	f06f 0302 	mvn.w	r3, #2
 80203ec:	61fb      	str	r3, [r7, #28]
 80203ee:	e027      	b.n	8020440 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80203f0:	693b      	ldr	r3, [r7, #16]
 80203f2:	2b00      	cmp	r3, #0
 80203f4:	d024      	beq.n	8020440 <osMessageQueueGet+0xac>
 80203f6:	4b15      	ldr	r3, [pc, #84]	; (802044c <osMessageQueueGet+0xb8>)
 80203f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80203fc:	601a      	str	r2, [r3, #0]
 80203fe:	f3bf 8f4f 	dsb	sy
 8020402:	f3bf 8f6f 	isb	sy
 8020406:	e01b      	b.n	8020440 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8020408:	69bb      	ldr	r3, [r7, #24]
 802040a:	2b00      	cmp	r3, #0
 802040c:	d002      	beq.n	8020414 <osMessageQueueGet+0x80>
 802040e:	68bb      	ldr	r3, [r7, #8]
 8020410:	2b00      	cmp	r3, #0
 8020412:	d103      	bne.n	802041c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8020414:	f06f 0303 	mvn.w	r3, #3
 8020418:	61fb      	str	r3, [r7, #28]
 802041a:	e011      	b.n	8020440 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 802041c:	683a      	ldr	r2, [r7, #0]
 802041e:	68b9      	ldr	r1, [r7, #8]
 8020420:	69b8      	ldr	r0, [r7, #24]
 8020422:	f000 fcab 	bl	8020d7c <xQueueReceive>
 8020426:	4603      	mov	r3, r0
 8020428:	2b01      	cmp	r3, #1
 802042a:	d009      	beq.n	8020440 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 802042c:	683b      	ldr	r3, [r7, #0]
 802042e:	2b00      	cmp	r3, #0
 8020430:	d003      	beq.n	802043a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8020432:	f06f 0301 	mvn.w	r3, #1
 8020436:	61fb      	str	r3, [r7, #28]
 8020438:	e002      	b.n	8020440 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 802043a:	f06f 0302 	mvn.w	r3, #2
 802043e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020440:	69fb      	ldr	r3, [r7, #28]
}
 8020442:	4618      	mov	r0, r3
 8020444:	3720      	adds	r7, #32
 8020446:	46bd      	mov	sp, r7
 8020448:	bd80      	pop	{r7, pc}
 802044a:	bf00      	nop
 802044c:	e000ed04 	.word	0xe000ed04

08020450 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8020450:	b580      	push	{r7, lr}
 8020452:	b086      	sub	sp, #24
 8020454:	af00      	add	r7, sp, #0
 8020456:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 802045c:	693b      	ldr	r3, [r7, #16]
 802045e:	2b00      	cmp	r3, #0
 8020460:	d102      	bne.n	8020468 <osMessageQueueGetCount+0x18>
    count = 0U;
 8020462:	2300      	movs	r3, #0
 8020464:	617b      	str	r3, [r7, #20]
 8020466:	e00e      	b.n	8020486 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020468:	f3ef 8305 	mrs	r3, IPSR
 802046c:	60fb      	str	r3, [r7, #12]
  return(result);
 802046e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8020470:	2b00      	cmp	r3, #0
 8020472:	d004      	beq.n	802047e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8020474:	6938      	ldr	r0, [r7, #16]
 8020476:	f000 ffed 	bl	8021454 <uxQueueMessagesWaitingFromISR>
 802047a:	6178      	str	r0, [r7, #20]
 802047c:	e003      	b.n	8020486 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 802047e:	6938      	ldr	r0, [r7, #16]
 8020480:	f000 ffca 	bl	8021418 <uxQueueMessagesWaiting>
 8020484:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8020486:	697b      	ldr	r3, [r7, #20]
}
 8020488:	4618      	mov	r0, r3
 802048a:	3718      	adds	r7, #24
 802048c:	46bd      	mov	sp, r7
 802048e:	bd80      	pop	{r7, pc}

08020490 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8020490:	b480      	push	{r7}
 8020492:	b085      	sub	sp, #20
 8020494:	af00      	add	r7, sp, #0
 8020496:	60f8      	str	r0, [r7, #12]
 8020498:	60b9      	str	r1, [r7, #8]
 802049a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802049c:	68fb      	ldr	r3, [r7, #12]
 802049e:	4a07      	ldr	r2, [pc, #28]	; (80204bc <vApplicationGetIdleTaskMemory+0x2c>)
 80204a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80204a2:	68bb      	ldr	r3, [r7, #8]
 80204a4:	4a06      	ldr	r2, [pc, #24]	; (80204c0 <vApplicationGetIdleTaskMemory+0x30>)
 80204a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80204a8:	687b      	ldr	r3, [r7, #4]
 80204aa:	2280      	movs	r2, #128	; 0x80
 80204ac:	601a      	str	r2, [r3, #0]
}
 80204ae:	bf00      	nop
 80204b0:	3714      	adds	r7, #20
 80204b2:	46bd      	mov	sp, r7
 80204b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204b8:	4770      	bx	lr
 80204ba:	bf00      	nop
 80204bc:	20001590 	.word	0x20001590
 80204c0:	2000163c 	.word	0x2000163c

080204c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80204c4:	b480      	push	{r7}
 80204c6:	b085      	sub	sp, #20
 80204c8:	af00      	add	r7, sp, #0
 80204ca:	60f8      	str	r0, [r7, #12]
 80204cc:	60b9      	str	r1, [r7, #8]
 80204ce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80204d0:	68fb      	ldr	r3, [r7, #12]
 80204d2:	4a07      	ldr	r2, [pc, #28]	; (80204f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80204d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80204d6:	68bb      	ldr	r3, [r7, #8]
 80204d8:	4a06      	ldr	r2, [pc, #24]	; (80204f4 <vApplicationGetTimerTaskMemory+0x30>)
 80204da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80204dc:	687b      	ldr	r3, [r7, #4]
 80204de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80204e2:	601a      	str	r2, [r3, #0]
}
 80204e4:	bf00      	nop
 80204e6:	3714      	adds	r7, #20
 80204e8:	46bd      	mov	sp, r7
 80204ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ee:	4770      	bx	lr
 80204f0:	2000183c 	.word	0x2000183c
 80204f4:	200018e8 	.word	0x200018e8

080204f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80204f8:	b480      	push	{r7}
 80204fa:	b083      	sub	sp, #12
 80204fc:	af00      	add	r7, sp, #0
 80204fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8020500:	687b      	ldr	r3, [r7, #4]
 8020502:	f103 0208 	add.w	r2, r3, #8
 8020506:	687b      	ldr	r3, [r7, #4]
 8020508:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 802050a:	687b      	ldr	r3, [r7, #4]
 802050c:	f04f 32ff 	mov.w	r2, #4294967295
 8020510:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8020512:	687b      	ldr	r3, [r7, #4]
 8020514:	f103 0208 	add.w	r2, r3, #8
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	f103 0208 	add.w	r2, r3, #8
 8020522:	687b      	ldr	r3, [r7, #4]
 8020524:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8020526:	687b      	ldr	r3, [r7, #4]
 8020528:	2200      	movs	r2, #0
 802052a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 802052c:	bf00      	nop
 802052e:	370c      	adds	r7, #12
 8020530:	46bd      	mov	sp, r7
 8020532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020536:	4770      	bx	lr

08020538 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8020538:	b480      	push	{r7}
 802053a:	b083      	sub	sp, #12
 802053c:	af00      	add	r7, sp, #0
 802053e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8020540:	687b      	ldr	r3, [r7, #4]
 8020542:	2200      	movs	r2, #0
 8020544:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8020546:	bf00      	nop
 8020548:	370c      	adds	r7, #12
 802054a:	46bd      	mov	sp, r7
 802054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020550:	4770      	bx	lr

08020552 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8020552:	b480      	push	{r7}
 8020554:	b085      	sub	sp, #20
 8020556:	af00      	add	r7, sp, #0
 8020558:	6078      	str	r0, [r7, #4]
 802055a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	685b      	ldr	r3, [r3, #4]
 8020560:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8020562:	683b      	ldr	r3, [r7, #0]
 8020564:	68fa      	ldr	r2, [r7, #12]
 8020566:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8020568:	68fb      	ldr	r3, [r7, #12]
 802056a:	689a      	ldr	r2, [r3, #8]
 802056c:	683b      	ldr	r3, [r7, #0]
 802056e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	689b      	ldr	r3, [r3, #8]
 8020574:	683a      	ldr	r2, [r7, #0]
 8020576:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8020578:	68fb      	ldr	r3, [r7, #12]
 802057a:	683a      	ldr	r2, [r7, #0]
 802057c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802057e:	683b      	ldr	r3, [r7, #0]
 8020580:	687a      	ldr	r2, [r7, #4]
 8020582:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	1c5a      	adds	r2, r3, #1
 802058a:	687b      	ldr	r3, [r7, #4]
 802058c:	601a      	str	r2, [r3, #0]
}
 802058e:	bf00      	nop
 8020590:	3714      	adds	r7, #20
 8020592:	46bd      	mov	sp, r7
 8020594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020598:	4770      	bx	lr

0802059a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802059a:	b480      	push	{r7}
 802059c:	b085      	sub	sp, #20
 802059e:	af00      	add	r7, sp, #0
 80205a0:	6078      	str	r0, [r7, #4]
 80205a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80205a4:	683b      	ldr	r3, [r7, #0]
 80205a6:	681b      	ldr	r3, [r3, #0]
 80205a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80205aa:	68bb      	ldr	r3, [r7, #8]
 80205ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80205b0:	d103      	bne.n	80205ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	691b      	ldr	r3, [r3, #16]
 80205b6:	60fb      	str	r3, [r7, #12]
 80205b8:	e00c      	b.n	80205d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	3308      	adds	r3, #8
 80205be:	60fb      	str	r3, [r7, #12]
 80205c0:	e002      	b.n	80205c8 <vListInsert+0x2e>
 80205c2:	68fb      	ldr	r3, [r7, #12]
 80205c4:	685b      	ldr	r3, [r3, #4]
 80205c6:	60fb      	str	r3, [r7, #12]
 80205c8:	68fb      	ldr	r3, [r7, #12]
 80205ca:	685b      	ldr	r3, [r3, #4]
 80205cc:	681b      	ldr	r3, [r3, #0]
 80205ce:	68ba      	ldr	r2, [r7, #8]
 80205d0:	429a      	cmp	r2, r3
 80205d2:	d2f6      	bcs.n	80205c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80205d4:	68fb      	ldr	r3, [r7, #12]
 80205d6:	685a      	ldr	r2, [r3, #4]
 80205d8:	683b      	ldr	r3, [r7, #0]
 80205da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80205dc:	683b      	ldr	r3, [r7, #0]
 80205de:	685b      	ldr	r3, [r3, #4]
 80205e0:	683a      	ldr	r2, [r7, #0]
 80205e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80205e4:	683b      	ldr	r3, [r7, #0]
 80205e6:	68fa      	ldr	r2, [r7, #12]
 80205e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80205ea:	68fb      	ldr	r3, [r7, #12]
 80205ec:	683a      	ldr	r2, [r7, #0]
 80205ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80205f0:	683b      	ldr	r3, [r7, #0]
 80205f2:	687a      	ldr	r2, [r7, #4]
 80205f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80205f6:	687b      	ldr	r3, [r7, #4]
 80205f8:	681b      	ldr	r3, [r3, #0]
 80205fa:	1c5a      	adds	r2, r3, #1
 80205fc:	687b      	ldr	r3, [r7, #4]
 80205fe:	601a      	str	r2, [r3, #0]
}
 8020600:	bf00      	nop
 8020602:	3714      	adds	r7, #20
 8020604:	46bd      	mov	sp, r7
 8020606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802060a:	4770      	bx	lr

0802060c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 802060c:	b480      	push	{r7}
 802060e:	b085      	sub	sp, #20
 8020610:	af00      	add	r7, sp, #0
 8020612:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	691b      	ldr	r3, [r3, #16]
 8020618:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	685b      	ldr	r3, [r3, #4]
 802061e:	687a      	ldr	r2, [r7, #4]
 8020620:	6892      	ldr	r2, [r2, #8]
 8020622:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	689b      	ldr	r3, [r3, #8]
 8020628:	687a      	ldr	r2, [r7, #4]
 802062a:	6852      	ldr	r2, [r2, #4]
 802062c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 802062e:	68fb      	ldr	r3, [r7, #12]
 8020630:	685b      	ldr	r3, [r3, #4]
 8020632:	687a      	ldr	r2, [r7, #4]
 8020634:	429a      	cmp	r2, r3
 8020636:	d103      	bne.n	8020640 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	689a      	ldr	r2, [r3, #8]
 802063c:	68fb      	ldr	r3, [r7, #12]
 802063e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	2200      	movs	r2, #0
 8020644:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8020646:	68fb      	ldr	r3, [r7, #12]
 8020648:	681b      	ldr	r3, [r3, #0]
 802064a:	1e5a      	subs	r2, r3, #1
 802064c:	68fb      	ldr	r3, [r7, #12]
 802064e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8020650:	68fb      	ldr	r3, [r7, #12]
 8020652:	681b      	ldr	r3, [r3, #0]
}
 8020654:	4618      	mov	r0, r3
 8020656:	3714      	adds	r7, #20
 8020658:	46bd      	mov	sp, r7
 802065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802065e:	4770      	bx	lr

08020660 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020660:	b580      	push	{r7, lr}
 8020662:	b084      	sub	sp, #16
 8020664:	af00      	add	r7, sp, #0
 8020666:	6078      	str	r0, [r7, #4]
 8020668:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 802066a:	687b      	ldr	r3, [r7, #4]
 802066c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 802066e:	68fb      	ldr	r3, [r7, #12]
 8020670:	2b00      	cmp	r3, #0
 8020672:	d10a      	bne.n	802068a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8020674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020678:	f383 8811 	msr	BASEPRI, r3
 802067c:	f3bf 8f6f 	isb	sy
 8020680:	f3bf 8f4f 	dsb	sy
 8020684:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8020686:	bf00      	nop
 8020688:	e7fe      	b.n	8020688 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 802068a:	f002 fd93 	bl	80231b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	681a      	ldr	r2, [r3, #0]
 8020692:	68fb      	ldr	r3, [r7, #12]
 8020694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020696:	68f9      	ldr	r1, [r7, #12]
 8020698:	6c09      	ldr	r1, [r1, #64]	; 0x40
 802069a:	fb01 f303 	mul.w	r3, r1, r3
 802069e:	441a      	add	r2, r3
 80206a0:	68fb      	ldr	r3, [r7, #12]
 80206a2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	2200      	movs	r2, #0
 80206a8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80206aa:	68fb      	ldr	r3, [r7, #12]
 80206ac:	681a      	ldr	r2, [r3, #0]
 80206ae:	68fb      	ldr	r3, [r7, #12]
 80206b0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80206b2:	68fb      	ldr	r3, [r7, #12]
 80206b4:	681a      	ldr	r2, [r3, #0]
 80206b6:	68fb      	ldr	r3, [r7, #12]
 80206b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80206ba:	3b01      	subs	r3, #1
 80206bc:	68f9      	ldr	r1, [r7, #12]
 80206be:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80206c0:	fb01 f303 	mul.w	r3, r1, r3
 80206c4:	441a      	add	r2, r3
 80206c6:	68fb      	ldr	r3, [r7, #12]
 80206c8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80206ca:	68fb      	ldr	r3, [r7, #12]
 80206cc:	22ff      	movs	r2, #255	; 0xff
 80206ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80206d2:	68fb      	ldr	r3, [r7, #12]
 80206d4:	22ff      	movs	r2, #255	; 0xff
 80206d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80206da:	683b      	ldr	r3, [r7, #0]
 80206dc:	2b00      	cmp	r3, #0
 80206de:	d114      	bne.n	802070a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	691b      	ldr	r3, [r3, #16]
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d01a      	beq.n	802071e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80206e8:	68fb      	ldr	r3, [r7, #12]
 80206ea:	3310      	adds	r3, #16
 80206ec:	4618      	mov	r0, r3
 80206ee:	f001 fcfd 	bl	80220ec <xTaskRemoveFromEventList>
 80206f2:	4603      	mov	r3, r0
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d012      	beq.n	802071e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80206f8:	4b0c      	ldr	r3, [pc, #48]	; (802072c <xQueueGenericReset+0xcc>)
 80206fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80206fe:	601a      	str	r2, [r3, #0]
 8020700:	f3bf 8f4f 	dsb	sy
 8020704:	f3bf 8f6f 	isb	sy
 8020708:	e009      	b.n	802071e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 802070a:	68fb      	ldr	r3, [r7, #12]
 802070c:	3310      	adds	r3, #16
 802070e:	4618      	mov	r0, r3
 8020710:	f7ff fef2 	bl	80204f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8020714:	68fb      	ldr	r3, [r7, #12]
 8020716:	3324      	adds	r3, #36	; 0x24
 8020718:	4618      	mov	r0, r3
 802071a:	f7ff feed 	bl	80204f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 802071e:	f002 fd79 	bl	8023214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8020722:	2301      	movs	r3, #1
}
 8020724:	4618      	mov	r0, r3
 8020726:	3710      	adds	r7, #16
 8020728:	46bd      	mov	sp, r7
 802072a:	bd80      	pop	{r7, pc}
 802072c:	e000ed04 	.word	0xe000ed04

08020730 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8020730:	b580      	push	{r7, lr}
 8020732:	b08e      	sub	sp, #56	; 0x38
 8020734:	af02      	add	r7, sp, #8
 8020736:	60f8      	str	r0, [r7, #12]
 8020738:	60b9      	str	r1, [r7, #8]
 802073a:	607a      	str	r2, [r7, #4]
 802073c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802073e:	68fb      	ldr	r3, [r7, #12]
 8020740:	2b00      	cmp	r3, #0
 8020742:	d10a      	bne.n	802075a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8020744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020748:	f383 8811 	msr	BASEPRI, r3
 802074c:	f3bf 8f6f 	isb	sy
 8020750:	f3bf 8f4f 	dsb	sy
 8020754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020756:	bf00      	nop
 8020758:	e7fe      	b.n	8020758 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 802075a:	683b      	ldr	r3, [r7, #0]
 802075c:	2b00      	cmp	r3, #0
 802075e:	d10a      	bne.n	8020776 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8020760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020764:	f383 8811 	msr	BASEPRI, r3
 8020768:	f3bf 8f6f 	isb	sy
 802076c:	f3bf 8f4f 	dsb	sy
 8020770:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020772:	bf00      	nop
 8020774:	e7fe      	b.n	8020774 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	2b00      	cmp	r3, #0
 802077a:	d002      	beq.n	8020782 <xQueueGenericCreateStatic+0x52>
 802077c:	68bb      	ldr	r3, [r7, #8]
 802077e:	2b00      	cmp	r3, #0
 8020780:	d001      	beq.n	8020786 <xQueueGenericCreateStatic+0x56>
 8020782:	2301      	movs	r3, #1
 8020784:	e000      	b.n	8020788 <xQueueGenericCreateStatic+0x58>
 8020786:	2300      	movs	r3, #0
 8020788:	2b00      	cmp	r3, #0
 802078a:	d10a      	bne.n	80207a2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 802078c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020790:	f383 8811 	msr	BASEPRI, r3
 8020794:	f3bf 8f6f 	isb	sy
 8020798:	f3bf 8f4f 	dsb	sy
 802079c:	623b      	str	r3, [r7, #32]
}
 802079e:	bf00      	nop
 80207a0:	e7fe      	b.n	80207a0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80207a2:	687b      	ldr	r3, [r7, #4]
 80207a4:	2b00      	cmp	r3, #0
 80207a6:	d102      	bne.n	80207ae <xQueueGenericCreateStatic+0x7e>
 80207a8:	68bb      	ldr	r3, [r7, #8]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d101      	bne.n	80207b2 <xQueueGenericCreateStatic+0x82>
 80207ae:	2301      	movs	r3, #1
 80207b0:	e000      	b.n	80207b4 <xQueueGenericCreateStatic+0x84>
 80207b2:	2300      	movs	r3, #0
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d10a      	bne.n	80207ce <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80207b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207bc:	f383 8811 	msr	BASEPRI, r3
 80207c0:	f3bf 8f6f 	isb	sy
 80207c4:	f3bf 8f4f 	dsb	sy
 80207c8:	61fb      	str	r3, [r7, #28]
}
 80207ca:	bf00      	nop
 80207cc:	e7fe      	b.n	80207cc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80207ce:	2350      	movs	r3, #80	; 0x50
 80207d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80207d2:	697b      	ldr	r3, [r7, #20]
 80207d4:	2b50      	cmp	r3, #80	; 0x50
 80207d6:	d00a      	beq.n	80207ee <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80207d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80207dc:	f383 8811 	msr	BASEPRI, r3
 80207e0:	f3bf 8f6f 	isb	sy
 80207e4:	f3bf 8f4f 	dsb	sy
 80207e8:	61bb      	str	r3, [r7, #24]
}
 80207ea:	bf00      	nop
 80207ec:	e7fe      	b.n	80207ec <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80207ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80207f0:	683b      	ldr	r3, [r7, #0]
 80207f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80207f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d00d      	beq.n	8020816 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80207fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80207fc:	2201      	movs	r2, #1
 80207fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020802:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8020806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020808:	9300      	str	r3, [sp, #0]
 802080a:	4613      	mov	r3, r2
 802080c:	687a      	ldr	r2, [r7, #4]
 802080e:	68b9      	ldr	r1, [r7, #8]
 8020810:	68f8      	ldr	r0, [r7, #12]
 8020812:	f000 f83f 	bl	8020894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8020818:	4618      	mov	r0, r3
 802081a:	3730      	adds	r7, #48	; 0x30
 802081c:	46bd      	mov	sp, r7
 802081e:	bd80      	pop	{r7, pc}

08020820 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8020820:	b580      	push	{r7, lr}
 8020822:	b08a      	sub	sp, #40	; 0x28
 8020824:	af02      	add	r7, sp, #8
 8020826:	60f8      	str	r0, [r7, #12]
 8020828:	60b9      	str	r1, [r7, #8]
 802082a:	4613      	mov	r3, r2
 802082c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 802082e:	68fb      	ldr	r3, [r7, #12]
 8020830:	2b00      	cmp	r3, #0
 8020832:	d10a      	bne.n	802084a <xQueueGenericCreate+0x2a>
	__asm volatile
 8020834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020838:	f383 8811 	msr	BASEPRI, r3
 802083c:	f3bf 8f6f 	isb	sy
 8020840:	f3bf 8f4f 	dsb	sy
 8020844:	613b      	str	r3, [r7, #16]
}
 8020846:	bf00      	nop
 8020848:	e7fe      	b.n	8020848 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802084a:	68fb      	ldr	r3, [r7, #12]
 802084c:	68ba      	ldr	r2, [r7, #8]
 802084e:	fb02 f303 	mul.w	r3, r2, r3
 8020852:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8020854:	69fb      	ldr	r3, [r7, #28]
 8020856:	3350      	adds	r3, #80	; 0x50
 8020858:	4618      	mov	r0, r3
 802085a:	f002 fdcd 	bl	80233f8 <pvPortMalloc>
 802085e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020860:	69bb      	ldr	r3, [r7, #24]
 8020862:	2b00      	cmp	r3, #0
 8020864:	d011      	beq.n	802088a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8020866:	69bb      	ldr	r3, [r7, #24]
 8020868:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 802086a:	697b      	ldr	r3, [r7, #20]
 802086c:	3350      	adds	r3, #80	; 0x50
 802086e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020870:	69bb      	ldr	r3, [r7, #24]
 8020872:	2200      	movs	r2, #0
 8020874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020878:	79fa      	ldrb	r2, [r7, #7]
 802087a:	69bb      	ldr	r3, [r7, #24]
 802087c:	9300      	str	r3, [sp, #0]
 802087e:	4613      	mov	r3, r2
 8020880:	697a      	ldr	r2, [r7, #20]
 8020882:	68b9      	ldr	r1, [r7, #8]
 8020884:	68f8      	ldr	r0, [r7, #12]
 8020886:	f000 f805 	bl	8020894 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 802088a:	69bb      	ldr	r3, [r7, #24]
	}
 802088c:	4618      	mov	r0, r3
 802088e:	3720      	adds	r7, #32
 8020890:	46bd      	mov	sp, r7
 8020892:	bd80      	pop	{r7, pc}

08020894 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8020894:	b580      	push	{r7, lr}
 8020896:	b084      	sub	sp, #16
 8020898:	af00      	add	r7, sp, #0
 802089a:	60f8      	str	r0, [r7, #12]
 802089c:	60b9      	str	r1, [r7, #8]
 802089e:	607a      	str	r2, [r7, #4]
 80208a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80208a2:	68bb      	ldr	r3, [r7, #8]
 80208a4:	2b00      	cmp	r3, #0
 80208a6:	d103      	bne.n	80208b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80208a8:	69bb      	ldr	r3, [r7, #24]
 80208aa:	69ba      	ldr	r2, [r7, #24]
 80208ac:	601a      	str	r2, [r3, #0]
 80208ae:	e002      	b.n	80208b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80208b0:	69bb      	ldr	r3, [r7, #24]
 80208b2:	687a      	ldr	r2, [r7, #4]
 80208b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80208b6:	69bb      	ldr	r3, [r7, #24]
 80208b8:	68fa      	ldr	r2, [r7, #12]
 80208ba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80208bc:	69bb      	ldr	r3, [r7, #24]
 80208be:	68ba      	ldr	r2, [r7, #8]
 80208c0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80208c2:	2101      	movs	r1, #1
 80208c4:	69b8      	ldr	r0, [r7, #24]
 80208c6:	f7ff fecb 	bl	8020660 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80208ca:	69bb      	ldr	r3, [r7, #24]
 80208cc:	78fa      	ldrb	r2, [r7, #3]
 80208ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80208d2:	bf00      	nop
 80208d4:	3710      	adds	r7, #16
 80208d6:	46bd      	mov	sp, r7
 80208d8:	bd80      	pop	{r7, pc}

080208da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80208da:	b580      	push	{r7, lr}
 80208dc:	b082      	sub	sp, #8
 80208de:	af00      	add	r7, sp, #0
 80208e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80208e2:	687b      	ldr	r3, [r7, #4]
 80208e4:	2b00      	cmp	r3, #0
 80208e6:	d00e      	beq.n	8020906 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	2200      	movs	r2, #0
 80208ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	2200      	movs	r2, #0
 80208f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	2200      	movs	r2, #0
 80208f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80208fa:	2300      	movs	r3, #0
 80208fc:	2200      	movs	r2, #0
 80208fe:	2100      	movs	r1, #0
 8020900:	6878      	ldr	r0, [r7, #4]
 8020902:	f000 f8a1 	bl	8020a48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8020906:	bf00      	nop
 8020908:	3708      	adds	r7, #8
 802090a:	46bd      	mov	sp, r7
 802090c:	bd80      	pop	{r7, pc}

0802090e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 802090e:	b580      	push	{r7, lr}
 8020910:	b086      	sub	sp, #24
 8020912:	af00      	add	r7, sp, #0
 8020914:	4603      	mov	r3, r0
 8020916:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020918:	2301      	movs	r3, #1
 802091a:	617b      	str	r3, [r7, #20]
 802091c:	2300      	movs	r3, #0
 802091e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8020920:	79fb      	ldrb	r3, [r7, #7]
 8020922:	461a      	mov	r2, r3
 8020924:	6939      	ldr	r1, [r7, #16]
 8020926:	6978      	ldr	r0, [r7, #20]
 8020928:	f7ff ff7a 	bl	8020820 <xQueueGenericCreate>
 802092c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 802092e:	68f8      	ldr	r0, [r7, #12]
 8020930:	f7ff ffd3 	bl	80208da <prvInitialiseMutex>

		return xNewQueue;
 8020934:	68fb      	ldr	r3, [r7, #12]
	}
 8020936:	4618      	mov	r0, r3
 8020938:	3718      	adds	r7, #24
 802093a:	46bd      	mov	sp, r7
 802093c:	bd80      	pop	{r7, pc}

0802093e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 802093e:	b580      	push	{r7, lr}
 8020940:	b088      	sub	sp, #32
 8020942:	af02      	add	r7, sp, #8
 8020944:	4603      	mov	r3, r0
 8020946:	6039      	str	r1, [r7, #0]
 8020948:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 802094a:	2301      	movs	r3, #1
 802094c:	617b      	str	r3, [r7, #20]
 802094e:	2300      	movs	r3, #0
 8020950:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8020952:	79fb      	ldrb	r3, [r7, #7]
 8020954:	9300      	str	r3, [sp, #0]
 8020956:	683b      	ldr	r3, [r7, #0]
 8020958:	2200      	movs	r2, #0
 802095a:	6939      	ldr	r1, [r7, #16]
 802095c:	6978      	ldr	r0, [r7, #20]
 802095e:	f7ff fee7 	bl	8020730 <xQueueGenericCreateStatic>
 8020962:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020964:	68f8      	ldr	r0, [r7, #12]
 8020966:	f7ff ffb8 	bl	80208da <prvInitialiseMutex>

		return xNewQueue;
 802096a:	68fb      	ldr	r3, [r7, #12]
	}
 802096c:	4618      	mov	r0, r3
 802096e:	3718      	adds	r7, #24
 8020970:	46bd      	mov	sp, r7
 8020972:	bd80      	pop	{r7, pc}

08020974 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8020974:	b590      	push	{r4, r7, lr}
 8020976:	b087      	sub	sp, #28
 8020978:	af00      	add	r7, sp, #0
 802097a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 802097c:	687b      	ldr	r3, [r7, #4]
 802097e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020980:	693b      	ldr	r3, [r7, #16]
 8020982:	2b00      	cmp	r3, #0
 8020984:	d10a      	bne.n	802099c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8020986:	f04f 0350 	mov.w	r3, #80	; 0x50
 802098a:	f383 8811 	msr	BASEPRI, r3
 802098e:	f3bf 8f6f 	isb	sy
 8020992:	f3bf 8f4f 	dsb	sy
 8020996:	60fb      	str	r3, [r7, #12]
}
 8020998:	bf00      	nop
 802099a:	e7fe      	b.n	802099a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 802099c:	693b      	ldr	r3, [r7, #16]
 802099e:	689c      	ldr	r4, [r3, #8]
 80209a0:	f001 fd9e 	bl	80224e0 <xTaskGetCurrentTaskHandle>
 80209a4:	4603      	mov	r3, r0
 80209a6:	429c      	cmp	r4, r3
 80209a8:	d111      	bne.n	80209ce <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80209aa:	693b      	ldr	r3, [r7, #16]
 80209ac:	68db      	ldr	r3, [r3, #12]
 80209ae:	1e5a      	subs	r2, r3, #1
 80209b0:	693b      	ldr	r3, [r7, #16]
 80209b2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80209b4:	693b      	ldr	r3, [r7, #16]
 80209b6:	68db      	ldr	r3, [r3, #12]
 80209b8:	2b00      	cmp	r3, #0
 80209ba:	d105      	bne.n	80209c8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80209bc:	2300      	movs	r3, #0
 80209be:	2200      	movs	r2, #0
 80209c0:	2100      	movs	r1, #0
 80209c2:	6938      	ldr	r0, [r7, #16]
 80209c4:	f000 f840 	bl	8020a48 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80209c8:	2301      	movs	r3, #1
 80209ca:	617b      	str	r3, [r7, #20]
 80209cc:	e001      	b.n	80209d2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80209ce:	2300      	movs	r3, #0
 80209d0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80209d2:	697b      	ldr	r3, [r7, #20]
	}
 80209d4:	4618      	mov	r0, r3
 80209d6:	371c      	adds	r7, #28
 80209d8:	46bd      	mov	sp, r7
 80209da:	bd90      	pop	{r4, r7, pc}

080209dc <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80209dc:	b590      	push	{r4, r7, lr}
 80209de:	b087      	sub	sp, #28
 80209e0:	af00      	add	r7, sp, #0
 80209e2:	6078      	str	r0, [r7, #4]
 80209e4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80209e6:	687b      	ldr	r3, [r7, #4]
 80209e8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80209ea:	693b      	ldr	r3, [r7, #16]
 80209ec:	2b00      	cmp	r3, #0
 80209ee:	d10a      	bne.n	8020a06 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80209f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80209f4:	f383 8811 	msr	BASEPRI, r3
 80209f8:	f3bf 8f6f 	isb	sy
 80209fc:	f3bf 8f4f 	dsb	sy
 8020a00:	60fb      	str	r3, [r7, #12]
}
 8020a02:	bf00      	nop
 8020a04:	e7fe      	b.n	8020a04 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020a06:	693b      	ldr	r3, [r7, #16]
 8020a08:	689c      	ldr	r4, [r3, #8]
 8020a0a:	f001 fd69 	bl	80224e0 <xTaskGetCurrentTaskHandle>
 8020a0e:	4603      	mov	r3, r0
 8020a10:	429c      	cmp	r4, r3
 8020a12:	d107      	bne.n	8020a24 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020a14:	693b      	ldr	r3, [r7, #16]
 8020a16:	68db      	ldr	r3, [r3, #12]
 8020a18:	1c5a      	adds	r2, r3, #1
 8020a1a:	693b      	ldr	r3, [r7, #16]
 8020a1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8020a1e:	2301      	movs	r3, #1
 8020a20:	617b      	str	r3, [r7, #20]
 8020a22:	e00c      	b.n	8020a3e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020a24:	6839      	ldr	r1, [r7, #0]
 8020a26:	6938      	ldr	r0, [r7, #16]
 8020a28:	f000 fa88 	bl	8020f3c <xQueueSemaphoreTake>
 8020a2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8020a2e:	697b      	ldr	r3, [r7, #20]
 8020a30:	2b00      	cmp	r3, #0
 8020a32:	d004      	beq.n	8020a3e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020a34:	693b      	ldr	r3, [r7, #16]
 8020a36:	68db      	ldr	r3, [r3, #12]
 8020a38:	1c5a      	adds	r2, r3, #1
 8020a3a:	693b      	ldr	r3, [r7, #16]
 8020a3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8020a3e:	697b      	ldr	r3, [r7, #20]
	}
 8020a40:	4618      	mov	r0, r3
 8020a42:	371c      	adds	r7, #28
 8020a44:	46bd      	mov	sp, r7
 8020a46:	bd90      	pop	{r4, r7, pc}

08020a48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020a48:	b580      	push	{r7, lr}
 8020a4a:	b08e      	sub	sp, #56	; 0x38
 8020a4c:	af00      	add	r7, sp, #0
 8020a4e:	60f8      	str	r0, [r7, #12]
 8020a50:	60b9      	str	r1, [r7, #8]
 8020a52:	607a      	str	r2, [r7, #4]
 8020a54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020a56:	2300      	movs	r3, #0
 8020a58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020a5a:	68fb      	ldr	r3, [r7, #12]
 8020a5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	d10a      	bne.n	8020a7a <xQueueGenericSend+0x32>
	__asm volatile
 8020a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a68:	f383 8811 	msr	BASEPRI, r3
 8020a6c:	f3bf 8f6f 	isb	sy
 8020a70:	f3bf 8f4f 	dsb	sy
 8020a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020a76:	bf00      	nop
 8020a78:	e7fe      	b.n	8020a78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020a7a:	68bb      	ldr	r3, [r7, #8]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d103      	bne.n	8020a88 <xQueueGenericSend+0x40>
 8020a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	d101      	bne.n	8020a8c <xQueueGenericSend+0x44>
 8020a88:	2301      	movs	r3, #1
 8020a8a:	e000      	b.n	8020a8e <xQueueGenericSend+0x46>
 8020a8c:	2300      	movs	r3, #0
 8020a8e:	2b00      	cmp	r3, #0
 8020a90:	d10a      	bne.n	8020aa8 <xQueueGenericSend+0x60>
	__asm volatile
 8020a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a96:	f383 8811 	msr	BASEPRI, r3
 8020a9a:	f3bf 8f6f 	isb	sy
 8020a9e:	f3bf 8f4f 	dsb	sy
 8020aa2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020aa4:	bf00      	nop
 8020aa6:	e7fe      	b.n	8020aa6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020aa8:	683b      	ldr	r3, [r7, #0]
 8020aaa:	2b02      	cmp	r3, #2
 8020aac:	d103      	bne.n	8020ab6 <xQueueGenericSend+0x6e>
 8020aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020ab2:	2b01      	cmp	r3, #1
 8020ab4:	d101      	bne.n	8020aba <xQueueGenericSend+0x72>
 8020ab6:	2301      	movs	r3, #1
 8020ab8:	e000      	b.n	8020abc <xQueueGenericSend+0x74>
 8020aba:	2300      	movs	r3, #0
 8020abc:	2b00      	cmp	r3, #0
 8020abe:	d10a      	bne.n	8020ad6 <xQueueGenericSend+0x8e>
	__asm volatile
 8020ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ac4:	f383 8811 	msr	BASEPRI, r3
 8020ac8:	f3bf 8f6f 	isb	sy
 8020acc:	f3bf 8f4f 	dsb	sy
 8020ad0:	623b      	str	r3, [r7, #32]
}
 8020ad2:	bf00      	nop
 8020ad4:	e7fe      	b.n	8020ad4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020ad6:	f001 fd13 	bl	8022500 <xTaskGetSchedulerState>
 8020ada:	4603      	mov	r3, r0
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d102      	bne.n	8020ae6 <xQueueGenericSend+0x9e>
 8020ae0:	687b      	ldr	r3, [r7, #4]
 8020ae2:	2b00      	cmp	r3, #0
 8020ae4:	d101      	bne.n	8020aea <xQueueGenericSend+0xa2>
 8020ae6:	2301      	movs	r3, #1
 8020ae8:	e000      	b.n	8020aec <xQueueGenericSend+0xa4>
 8020aea:	2300      	movs	r3, #0
 8020aec:	2b00      	cmp	r3, #0
 8020aee:	d10a      	bne.n	8020b06 <xQueueGenericSend+0xbe>
	__asm volatile
 8020af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020af4:	f383 8811 	msr	BASEPRI, r3
 8020af8:	f3bf 8f6f 	isb	sy
 8020afc:	f3bf 8f4f 	dsb	sy
 8020b00:	61fb      	str	r3, [r7, #28]
}
 8020b02:	bf00      	nop
 8020b04:	e7fe      	b.n	8020b04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020b06:	f002 fb55 	bl	80231b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020b12:	429a      	cmp	r2, r3
 8020b14:	d302      	bcc.n	8020b1c <xQueueGenericSend+0xd4>
 8020b16:	683b      	ldr	r3, [r7, #0]
 8020b18:	2b02      	cmp	r3, #2
 8020b1a:	d129      	bne.n	8020b70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020b1c:	683a      	ldr	r2, [r7, #0]
 8020b1e:	68b9      	ldr	r1, [r7, #8]
 8020b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020b22:	f000 fccd 	bl	80214c0 <prvCopyDataToQueue>
 8020b26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	d010      	beq.n	8020b52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020b32:	3324      	adds	r3, #36	; 0x24
 8020b34:	4618      	mov	r0, r3
 8020b36:	f001 fad9 	bl	80220ec <xTaskRemoveFromEventList>
 8020b3a:	4603      	mov	r3, r0
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d013      	beq.n	8020b68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020b40:	4b3f      	ldr	r3, [pc, #252]	; (8020c40 <xQueueGenericSend+0x1f8>)
 8020b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020b46:	601a      	str	r2, [r3, #0]
 8020b48:	f3bf 8f4f 	dsb	sy
 8020b4c:	f3bf 8f6f 	isb	sy
 8020b50:	e00a      	b.n	8020b68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d007      	beq.n	8020b68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020b58:	4b39      	ldr	r3, [pc, #228]	; (8020c40 <xQueueGenericSend+0x1f8>)
 8020b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020b5e:	601a      	str	r2, [r3, #0]
 8020b60:	f3bf 8f4f 	dsb	sy
 8020b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020b68:	f002 fb54 	bl	8023214 <vPortExitCritical>
				return pdPASS;
 8020b6c:	2301      	movs	r3, #1
 8020b6e:	e063      	b.n	8020c38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020b70:	687b      	ldr	r3, [r7, #4]
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	d103      	bne.n	8020b7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020b76:	f002 fb4d 	bl	8023214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020b7a:	2300      	movs	r3, #0
 8020b7c:	e05c      	b.n	8020c38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020b80:	2b00      	cmp	r3, #0
 8020b82:	d106      	bne.n	8020b92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020b84:	f107 0314 	add.w	r3, r7, #20
 8020b88:	4618      	mov	r0, r3
 8020b8a:	f001 fb13 	bl	80221b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020b8e:	2301      	movs	r3, #1
 8020b90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020b92:	f002 fb3f 	bl	8023214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020b96:	f001 f863 	bl	8021c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020b9a:	f002 fb0b 	bl	80231b4 <vPortEnterCritical>
 8020b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020ba4:	b25b      	sxtb	r3, r3
 8020ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020baa:	d103      	bne.n	8020bb4 <xQueueGenericSend+0x16c>
 8020bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bae:	2200      	movs	r2, #0
 8020bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020bba:	b25b      	sxtb	r3, r3
 8020bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020bc0:	d103      	bne.n	8020bca <xQueueGenericSend+0x182>
 8020bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bc4:	2200      	movs	r2, #0
 8020bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020bca:	f002 fb23 	bl	8023214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020bce:	1d3a      	adds	r2, r7, #4
 8020bd0:	f107 0314 	add.w	r3, r7, #20
 8020bd4:	4611      	mov	r1, r2
 8020bd6:	4618      	mov	r0, r3
 8020bd8:	f001 fb02 	bl	80221e0 <xTaskCheckForTimeOut>
 8020bdc:	4603      	mov	r3, r0
 8020bde:	2b00      	cmp	r3, #0
 8020be0:	d124      	bne.n	8020c2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8020be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020be4:	f000 fd64 	bl	80216b0 <prvIsQueueFull>
 8020be8:	4603      	mov	r3, r0
 8020bea:	2b00      	cmp	r3, #0
 8020bec:	d018      	beq.n	8020c20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8020bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020bf0:	3310      	adds	r3, #16
 8020bf2:	687a      	ldr	r2, [r7, #4]
 8020bf4:	4611      	mov	r1, r2
 8020bf6:	4618      	mov	r0, r3
 8020bf8:	f001 fa28 	bl	802204c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8020bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020bfe:	f000 fcef 	bl	80215e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020c02:	f001 f83b 	bl	8021c7c <xTaskResumeAll>
 8020c06:	4603      	mov	r3, r0
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	f47f af7c 	bne.w	8020b06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8020c0e:	4b0c      	ldr	r3, [pc, #48]	; (8020c40 <xQueueGenericSend+0x1f8>)
 8020c10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020c14:	601a      	str	r2, [r3, #0]
 8020c16:	f3bf 8f4f 	dsb	sy
 8020c1a:	f3bf 8f6f 	isb	sy
 8020c1e:	e772      	b.n	8020b06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8020c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020c22:	f000 fcdd 	bl	80215e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020c26:	f001 f829 	bl	8021c7c <xTaskResumeAll>
 8020c2a:	e76c      	b.n	8020b06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8020c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020c2e:	f000 fcd7 	bl	80215e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020c32:	f001 f823 	bl	8021c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8020c36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8020c38:	4618      	mov	r0, r3
 8020c3a:	3738      	adds	r7, #56	; 0x38
 8020c3c:	46bd      	mov	sp, r7
 8020c3e:	bd80      	pop	{r7, pc}
 8020c40:	e000ed04 	.word	0xe000ed04

08020c44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8020c44:	b580      	push	{r7, lr}
 8020c46:	b090      	sub	sp, #64	; 0x40
 8020c48:	af00      	add	r7, sp, #0
 8020c4a:	60f8      	str	r0, [r7, #12]
 8020c4c:	60b9      	str	r1, [r7, #8]
 8020c4e:	607a      	str	r2, [r7, #4]
 8020c50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8020c52:	68fb      	ldr	r3, [r7, #12]
 8020c54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8020c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	d10a      	bne.n	8020c72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8020c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c60:	f383 8811 	msr	BASEPRI, r3
 8020c64:	f3bf 8f6f 	isb	sy
 8020c68:	f3bf 8f4f 	dsb	sy
 8020c6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020c6e:	bf00      	nop
 8020c70:	e7fe      	b.n	8020c70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020c72:	68bb      	ldr	r3, [r7, #8]
 8020c74:	2b00      	cmp	r3, #0
 8020c76:	d103      	bne.n	8020c80 <xQueueGenericSendFromISR+0x3c>
 8020c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	d101      	bne.n	8020c84 <xQueueGenericSendFromISR+0x40>
 8020c80:	2301      	movs	r3, #1
 8020c82:	e000      	b.n	8020c86 <xQueueGenericSendFromISR+0x42>
 8020c84:	2300      	movs	r3, #0
 8020c86:	2b00      	cmp	r3, #0
 8020c88:	d10a      	bne.n	8020ca0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8020c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020c8e:	f383 8811 	msr	BASEPRI, r3
 8020c92:	f3bf 8f6f 	isb	sy
 8020c96:	f3bf 8f4f 	dsb	sy
 8020c9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020c9c:	bf00      	nop
 8020c9e:	e7fe      	b.n	8020c9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020ca0:	683b      	ldr	r3, [r7, #0]
 8020ca2:	2b02      	cmp	r3, #2
 8020ca4:	d103      	bne.n	8020cae <xQueueGenericSendFromISR+0x6a>
 8020ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020caa:	2b01      	cmp	r3, #1
 8020cac:	d101      	bne.n	8020cb2 <xQueueGenericSendFromISR+0x6e>
 8020cae:	2301      	movs	r3, #1
 8020cb0:	e000      	b.n	8020cb4 <xQueueGenericSendFromISR+0x70>
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	2b00      	cmp	r3, #0
 8020cb6:	d10a      	bne.n	8020cce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8020cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cbc:	f383 8811 	msr	BASEPRI, r3
 8020cc0:	f3bf 8f6f 	isb	sy
 8020cc4:	f3bf 8f4f 	dsb	sy
 8020cc8:	623b      	str	r3, [r7, #32]
}
 8020cca:	bf00      	nop
 8020ccc:	e7fe      	b.n	8020ccc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8020cce:	f002 fb53 	bl	8023378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8020cd2:	f3ef 8211 	mrs	r2, BASEPRI
 8020cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020cda:	f383 8811 	msr	BASEPRI, r3
 8020cde:	f3bf 8f6f 	isb	sy
 8020ce2:	f3bf 8f4f 	dsb	sy
 8020ce6:	61fa      	str	r2, [r7, #28]
 8020ce8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8020cea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8020cec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020cf6:	429a      	cmp	r2, r3
 8020cf8:	d302      	bcc.n	8020d00 <xQueueGenericSendFromISR+0xbc>
 8020cfa:	683b      	ldr	r3, [r7, #0]
 8020cfc:	2b02      	cmp	r3, #2
 8020cfe:	d12f      	bne.n	8020d60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8020d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020d06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020d10:	683a      	ldr	r2, [r7, #0]
 8020d12:	68b9      	ldr	r1, [r7, #8]
 8020d14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8020d16:	f000 fbd3 	bl	80214c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8020d1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8020d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d22:	d112      	bne.n	8020d4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020d28:	2b00      	cmp	r3, #0
 8020d2a:	d016      	beq.n	8020d5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d2e:	3324      	adds	r3, #36	; 0x24
 8020d30:	4618      	mov	r0, r3
 8020d32:	f001 f9db 	bl	80220ec <xTaskRemoveFromEventList>
 8020d36:	4603      	mov	r3, r0
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d00e      	beq.n	8020d5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	2b00      	cmp	r3, #0
 8020d40:	d00b      	beq.n	8020d5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8020d42:	687b      	ldr	r3, [r7, #4]
 8020d44:	2201      	movs	r2, #1
 8020d46:	601a      	str	r2, [r3, #0]
 8020d48:	e007      	b.n	8020d5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8020d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8020d4e:	3301      	adds	r3, #1
 8020d50:	b2db      	uxtb	r3, r3
 8020d52:	b25a      	sxtb	r2, r3
 8020d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8020d5a:	2301      	movs	r3, #1
 8020d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8020d5e:	e001      	b.n	8020d64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8020d60:	2300      	movs	r3, #0
 8020d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8020d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020d66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8020d68:	697b      	ldr	r3, [r7, #20]
 8020d6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8020d6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8020d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8020d72:	4618      	mov	r0, r3
 8020d74:	3740      	adds	r7, #64	; 0x40
 8020d76:	46bd      	mov	sp, r7
 8020d78:	bd80      	pop	{r7, pc}
	...

08020d7c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8020d7c:	b580      	push	{r7, lr}
 8020d7e:	b08c      	sub	sp, #48	; 0x30
 8020d80:	af00      	add	r7, sp, #0
 8020d82:	60f8      	str	r0, [r7, #12]
 8020d84:	60b9      	str	r1, [r7, #8]
 8020d86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8020d88:	2300      	movs	r3, #0
 8020d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020d8c:	68fb      	ldr	r3, [r7, #12]
 8020d8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020d92:	2b00      	cmp	r3, #0
 8020d94:	d10a      	bne.n	8020dac <xQueueReceive+0x30>
	__asm volatile
 8020d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d9a:	f383 8811 	msr	BASEPRI, r3
 8020d9e:	f3bf 8f6f 	isb	sy
 8020da2:	f3bf 8f4f 	dsb	sy
 8020da6:	623b      	str	r3, [r7, #32]
}
 8020da8:	bf00      	nop
 8020daa:	e7fe      	b.n	8020daa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020dac:	68bb      	ldr	r3, [r7, #8]
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	d103      	bne.n	8020dba <xQueueReceive+0x3e>
 8020db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d101      	bne.n	8020dbe <xQueueReceive+0x42>
 8020dba:	2301      	movs	r3, #1
 8020dbc:	e000      	b.n	8020dc0 <xQueueReceive+0x44>
 8020dbe:	2300      	movs	r3, #0
 8020dc0:	2b00      	cmp	r3, #0
 8020dc2:	d10a      	bne.n	8020dda <xQueueReceive+0x5e>
	__asm volatile
 8020dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020dc8:	f383 8811 	msr	BASEPRI, r3
 8020dcc:	f3bf 8f6f 	isb	sy
 8020dd0:	f3bf 8f4f 	dsb	sy
 8020dd4:	61fb      	str	r3, [r7, #28]
}
 8020dd6:	bf00      	nop
 8020dd8:	e7fe      	b.n	8020dd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020dda:	f001 fb91 	bl	8022500 <xTaskGetSchedulerState>
 8020dde:	4603      	mov	r3, r0
 8020de0:	2b00      	cmp	r3, #0
 8020de2:	d102      	bne.n	8020dea <xQueueReceive+0x6e>
 8020de4:	687b      	ldr	r3, [r7, #4]
 8020de6:	2b00      	cmp	r3, #0
 8020de8:	d101      	bne.n	8020dee <xQueueReceive+0x72>
 8020dea:	2301      	movs	r3, #1
 8020dec:	e000      	b.n	8020df0 <xQueueReceive+0x74>
 8020dee:	2300      	movs	r3, #0
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d10a      	bne.n	8020e0a <xQueueReceive+0x8e>
	__asm volatile
 8020df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020df8:	f383 8811 	msr	BASEPRI, r3
 8020dfc:	f3bf 8f6f 	isb	sy
 8020e00:	f3bf 8f4f 	dsb	sy
 8020e04:	61bb      	str	r3, [r7, #24]
}
 8020e06:	bf00      	nop
 8020e08:	e7fe      	b.n	8020e08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020e0a:	f002 f9d3 	bl	80231b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8020e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020e12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8020e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e16:	2b00      	cmp	r3, #0
 8020e18:	d01f      	beq.n	8020e5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8020e1a:	68b9      	ldr	r1, [r7, #8]
 8020e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020e1e:	f000 fbb9 	bl	8021594 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8020e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020e24:	1e5a      	subs	r2, r3, #1
 8020e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e2c:	691b      	ldr	r3, [r3, #16]
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	d00f      	beq.n	8020e52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e34:	3310      	adds	r3, #16
 8020e36:	4618      	mov	r0, r3
 8020e38:	f001 f958 	bl	80220ec <xTaskRemoveFromEventList>
 8020e3c:	4603      	mov	r3, r0
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d007      	beq.n	8020e52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020e42:	4b3d      	ldr	r3, [pc, #244]	; (8020f38 <xQueueReceive+0x1bc>)
 8020e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020e48:	601a      	str	r2, [r3, #0]
 8020e4a:	f3bf 8f4f 	dsb	sy
 8020e4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8020e52:	f002 f9df 	bl	8023214 <vPortExitCritical>
				return pdPASS;
 8020e56:	2301      	movs	r3, #1
 8020e58:	e069      	b.n	8020f2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d103      	bne.n	8020e68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020e60:	f002 f9d8 	bl	8023214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8020e64:	2300      	movs	r3, #0
 8020e66:	e062      	b.n	8020f2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020e6a:	2b00      	cmp	r3, #0
 8020e6c:	d106      	bne.n	8020e7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020e6e:	f107 0310 	add.w	r3, r7, #16
 8020e72:	4618      	mov	r0, r3
 8020e74:	f001 f99e 	bl	80221b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020e78:	2301      	movs	r3, #1
 8020e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020e7c:	f002 f9ca 	bl	8023214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020e80:	f000 feee 	bl	8021c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020e84:	f002 f996 	bl	80231b4 <vPortEnterCritical>
 8020e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020e8e:	b25b      	sxtb	r3, r3
 8020e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020e94:	d103      	bne.n	8020e9e <xQueueReceive+0x122>
 8020e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e98:	2200      	movs	r2, #0
 8020e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020ea4:	b25b      	sxtb	r3, r3
 8020ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020eaa:	d103      	bne.n	8020eb4 <xQueueReceive+0x138>
 8020eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020eae:	2200      	movs	r2, #0
 8020eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020eb4:	f002 f9ae 	bl	8023214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020eb8:	1d3a      	adds	r2, r7, #4
 8020eba:	f107 0310 	add.w	r3, r7, #16
 8020ebe:	4611      	mov	r1, r2
 8020ec0:	4618      	mov	r0, r3
 8020ec2:	f001 f98d 	bl	80221e0 <xTaskCheckForTimeOut>
 8020ec6:	4603      	mov	r3, r0
 8020ec8:	2b00      	cmp	r3, #0
 8020eca:	d123      	bne.n	8020f14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020ece:	f000 fbd9 	bl	8021684 <prvIsQueueEmpty>
 8020ed2:	4603      	mov	r3, r0
 8020ed4:	2b00      	cmp	r3, #0
 8020ed6:	d017      	beq.n	8020f08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8020ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020eda:	3324      	adds	r3, #36	; 0x24
 8020edc:	687a      	ldr	r2, [r7, #4]
 8020ede:	4611      	mov	r1, r2
 8020ee0:	4618      	mov	r0, r3
 8020ee2:	f001 f8b3 	bl	802204c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8020ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020ee8:	f000 fb7a 	bl	80215e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8020eec:	f000 fec6 	bl	8021c7c <xTaskResumeAll>
 8020ef0:	4603      	mov	r3, r0
 8020ef2:	2b00      	cmp	r3, #0
 8020ef4:	d189      	bne.n	8020e0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8020ef6:	4b10      	ldr	r3, [pc, #64]	; (8020f38 <xQueueReceive+0x1bc>)
 8020ef8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020efc:	601a      	str	r2, [r3, #0]
 8020efe:	f3bf 8f4f 	dsb	sy
 8020f02:	f3bf 8f6f 	isb	sy
 8020f06:	e780      	b.n	8020e0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8020f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020f0a:	f000 fb69 	bl	80215e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020f0e:	f000 feb5 	bl	8021c7c <xTaskResumeAll>
 8020f12:	e77a      	b.n	8020e0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8020f14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020f16:	f000 fb63 	bl	80215e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020f1a:	f000 feaf 	bl	8021c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8020f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020f20:	f000 fbb0 	bl	8021684 <prvIsQueueEmpty>
 8020f24:	4603      	mov	r3, r0
 8020f26:	2b00      	cmp	r3, #0
 8020f28:	f43f af6f 	beq.w	8020e0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8020f2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8020f2e:	4618      	mov	r0, r3
 8020f30:	3730      	adds	r7, #48	; 0x30
 8020f32:	46bd      	mov	sp, r7
 8020f34:	bd80      	pop	{r7, pc}
 8020f36:	bf00      	nop
 8020f38:	e000ed04 	.word	0xe000ed04

08020f3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8020f3c:	b580      	push	{r7, lr}
 8020f3e:	b08e      	sub	sp, #56	; 0x38
 8020f40:	af00      	add	r7, sp, #0
 8020f42:	6078      	str	r0, [r7, #4]
 8020f44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8020f46:	2300      	movs	r3, #0
 8020f48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020f4a:	687b      	ldr	r3, [r7, #4]
 8020f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8020f4e:	2300      	movs	r3, #0
 8020f50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8020f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f54:	2b00      	cmp	r3, #0
 8020f56:	d10a      	bne.n	8020f6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8020f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f5c:	f383 8811 	msr	BASEPRI, r3
 8020f60:	f3bf 8f6f 	isb	sy
 8020f64:	f3bf 8f4f 	dsb	sy
 8020f68:	623b      	str	r3, [r7, #32]
}
 8020f6a:	bf00      	nop
 8020f6c:	e7fe      	b.n	8020f6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8020f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020f72:	2b00      	cmp	r3, #0
 8020f74:	d00a      	beq.n	8020f8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8020f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020f7a:	f383 8811 	msr	BASEPRI, r3
 8020f7e:	f3bf 8f6f 	isb	sy
 8020f82:	f3bf 8f4f 	dsb	sy
 8020f86:	61fb      	str	r3, [r7, #28]
}
 8020f88:	bf00      	nop
 8020f8a:	e7fe      	b.n	8020f8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020f8c:	f001 fab8 	bl	8022500 <xTaskGetSchedulerState>
 8020f90:	4603      	mov	r3, r0
 8020f92:	2b00      	cmp	r3, #0
 8020f94:	d102      	bne.n	8020f9c <xQueueSemaphoreTake+0x60>
 8020f96:	683b      	ldr	r3, [r7, #0]
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d101      	bne.n	8020fa0 <xQueueSemaphoreTake+0x64>
 8020f9c:	2301      	movs	r3, #1
 8020f9e:	e000      	b.n	8020fa2 <xQueueSemaphoreTake+0x66>
 8020fa0:	2300      	movs	r3, #0
 8020fa2:	2b00      	cmp	r3, #0
 8020fa4:	d10a      	bne.n	8020fbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8020fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020faa:	f383 8811 	msr	BASEPRI, r3
 8020fae:	f3bf 8f6f 	isb	sy
 8020fb2:	f3bf 8f4f 	dsb	sy
 8020fb6:	61bb      	str	r3, [r7, #24]
}
 8020fb8:	bf00      	nop
 8020fba:	e7fe      	b.n	8020fba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020fbc:	f002 f8fa 	bl	80231b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8020fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020fc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8020fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fc8:	2b00      	cmp	r3, #0
 8020fca:	d024      	beq.n	8021016 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8020fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020fce:	1e5a      	subs	r2, r3, #1
 8020fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8020fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fd6:	681b      	ldr	r3, [r3, #0]
 8020fd8:	2b00      	cmp	r3, #0
 8020fda:	d104      	bne.n	8020fe6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8020fdc:	f001 fc06 	bl	80227ec <pvTaskIncrementMutexHeldCount>
 8020fe0:	4602      	mov	r2, r0
 8020fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fe4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020fe8:	691b      	ldr	r3, [r3, #16]
 8020fea:	2b00      	cmp	r3, #0
 8020fec:	d00f      	beq.n	802100e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ff0:	3310      	adds	r3, #16
 8020ff2:	4618      	mov	r0, r3
 8020ff4:	f001 f87a 	bl	80220ec <xTaskRemoveFromEventList>
 8020ff8:	4603      	mov	r3, r0
 8020ffa:	2b00      	cmp	r3, #0
 8020ffc:	d007      	beq.n	802100e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8020ffe:	4b54      	ldr	r3, [pc, #336]	; (8021150 <xQueueSemaphoreTake+0x214>)
 8021000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021004:	601a      	str	r2, [r3, #0]
 8021006:	f3bf 8f4f 	dsb	sy
 802100a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802100e:	f002 f901 	bl	8023214 <vPortExitCritical>
				return pdPASS;
 8021012:	2301      	movs	r3, #1
 8021014:	e097      	b.n	8021146 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021016:	683b      	ldr	r3, [r7, #0]
 8021018:	2b00      	cmp	r3, #0
 802101a:	d111      	bne.n	8021040 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 802101c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802101e:	2b00      	cmp	r3, #0
 8021020:	d00a      	beq.n	8021038 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8021022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021026:	f383 8811 	msr	BASEPRI, r3
 802102a:	f3bf 8f6f 	isb	sy
 802102e:	f3bf 8f4f 	dsb	sy
 8021032:	617b      	str	r3, [r7, #20]
}
 8021034:	bf00      	nop
 8021036:	e7fe      	b.n	8021036 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8021038:	f002 f8ec 	bl	8023214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 802103c:	2300      	movs	r3, #0
 802103e:	e082      	b.n	8021146 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021042:	2b00      	cmp	r3, #0
 8021044:	d106      	bne.n	8021054 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8021046:	f107 030c 	add.w	r3, r7, #12
 802104a:	4618      	mov	r0, r3
 802104c:	f001 f8b2 	bl	80221b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021050:	2301      	movs	r3, #1
 8021052:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021054:	f002 f8de 	bl	8023214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021058:	f000 fe02 	bl	8021c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 802105c:	f002 f8aa 	bl	80231b4 <vPortEnterCritical>
 8021060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021062:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021066:	b25b      	sxtb	r3, r3
 8021068:	f1b3 3fff 	cmp.w	r3, #4294967295
 802106c:	d103      	bne.n	8021076 <xQueueSemaphoreTake+0x13a>
 802106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021070:	2200      	movs	r2, #0
 8021072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021078:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802107c:	b25b      	sxtb	r3, r3
 802107e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021082:	d103      	bne.n	802108c <xQueueSemaphoreTake+0x150>
 8021084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021086:	2200      	movs	r2, #0
 8021088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802108c:	f002 f8c2 	bl	8023214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021090:	463a      	mov	r2, r7
 8021092:	f107 030c 	add.w	r3, r7, #12
 8021096:	4611      	mov	r1, r2
 8021098:	4618      	mov	r0, r3
 802109a:	f001 f8a1 	bl	80221e0 <xTaskCheckForTimeOut>
 802109e:	4603      	mov	r3, r0
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d132      	bne.n	802110a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80210a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210a6:	f000 faed 	bl	8021684 <prvIsQueueEmpty>
 80210aa:	4603      	mov	r3, r0
 80210ac:	2b00      	cmp	r3, #0
 80210ae:	d026      	beq.n	80210fe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80210b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	2b00      	cmp	r3, #0
 80210b6:	d109      	bne.n	80210cc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80210b8:	f002 f87c 	bl	80231b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80210bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210be:	689b      	ldr	r3, [r3, #8]
 80210c0:	4618      	mov	r0, r3
 80210c2:	f001 fa3b 	bl	802253c <xTaskPriorityInherit>
 80210c6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80210c8:	f002 f8a4 	bl	8023214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80210cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80210ce:	3324      	adds	r3, #36	; 0x24
 80210d0:	683a      	ldr	r2, [r7, #0]
 80210d2:	4611      	mov	r1, r2
 80210d4:	4618      	mov	r0, r3
 80210d6:	f000 ffb9 	bl	802204c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80210da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80210dc:	f000 fa80 	bl	80215e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80210e0:	f000 fdcc 	bl	8021c7c <xTaskResumeAll>
 80210e4:	4603      	mov	r3, r0
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	f47f af68 	bne.w	8020fbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80210ec:	4b18      	ldr	r3, [pc, #96]	; (8021150 <xQueueSemaphoreTake+0x214>)
 80210ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80210f2:	601a      	str	r2, [r3, #0]
 80210f4:	f3bf 8f4f 	dsb	sy
 80210f8:	f3bf 8f6f 	isb	sy
 80210fc:	e75e      	b.n	8020fbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80210fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021100:	f000 fa6e 	bl	80215e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8021104:	f000 fdba 	bl	8021c7c <xTaskResumeAll>
 8021108:	e758      	b.n	8020fbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 802110a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802110c:	f000 fa68 	bl	80215e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021110:	f000 fdb4 	bl	8021c7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021116:	f000 fab5 	bl	8021684 <prvIsQueueEmpty>
 802111a:	4603      	mov	r3, r0
 802111c:	2b00      	cmp	r3, #0
 802111e:	f43f af4d 	beq.w	8020fbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8021122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021124:	2b00      	cmp	r3, #0
 8021126:	d00d      	beq.n	8021144 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8021128:	f002 f844 	bl	80231b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 802112c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802112e:	f000 f9af 	bl	8021490 <prvGetDisinheritPriorityAfterTimeout>
 8021132:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8021134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021136:	689b      	ldr	r3, [r3, #8]
 8021138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802113a:	4618      	mov	r0, r3
 802113c:	f001 fad4 	bl	80226e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8021140:	f002 f868 	bl	8023214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8021144:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8021146:	4618      	mov	r0, r3
 8021148:	3738      	adds	r7, #56	; 0x38
 802114a:	46bd      	mov	sp, r7
 802114c:	bd80      	pop	{r7, pc}
 802114e:	bf00      	nop
 8021150:	e000ed04 	.word	0xe000ed04

08021154 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8021154:	b580      	push	{r7, lr}
 8021156:	b08e      	sub	sp, #56	; 0x38
 8021158:	af00      	add	r7, sp, #0
 802115a:	60f8      	str	r0, [r7, #12]
 802115c:	60b9      	str	r1, [r7, #8]
 802115e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021160:	2300      	movs	r3, #0
 8021162:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8021164:	68fb      	ldr	r3, [r7, #12]
 8021166:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802116a:	2b00      	cmp	r3, #0
 802116c:	d10a      	bne.n	8021184 <xQueuePeek+0x30>
	__asm volatile
 802116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021172:	f383 8811 	msr	BASEPRI, r3
 8021176:	f3bf 8f6f 	isb	sy
 802117a:	f3bf 8f4f 	dsb	sy
 802117e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8021180:	bf00      	nop
 8021182:	e7fe      	b.n	8021182 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021184:	68bb      	ldr	r3, [r7, #8]
 8021186:	2b00      	cmp	r3, #0
 8021188:	d103      	bne.n	8021192 <xQueuePeek+0x3e>
 802118a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802118e:	2b00      	cmp	r3, #0
 8021190:	d101      	bne.n	8021196 <xQueuePeek+0x42>
 8021192:	2301      	movs	r3, #1
 8021194:	e000      	b.n	8021198 <xQueuePeek+0x44>
 8021196:	2300      	movs	r3, #0
 8021198:	2b00      	cmp	r3, #0
 802119a:	d10a      	bne.n	80211b2 <xQueuePeek+0x5e>
	__asm volatile
 802119c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211a0:	f383 8811 	msr	BASEPRI, r3
 80211a4:	f3bf 8f6f 	isb	sy
 80211a8:	f3bf 8f4f 	dsb	sy
 80211ac:	623b      	str	r3, [r7, #32]
}
 80211ae:	bf00      	nop
 80211b0:	e7fe      	b.n	80211b0 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80211b2:	f001 f9a5 	bl	8022500 <xTaskGetSchedulerState>
 80211b6:	4603      	mov	r3, r0
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d102      	bne.n	80211c2 <xQueuePeek+0x6e>
 80211bc:	687b      	ldr	r3, [r7, #4]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d101      	bne.n	80211c6 <xQueuePeek+0x72>
 80211c2:	2301      	movs	r3, #1
 80211c4:	e000      	b.n	80211c8 <xQueuePeek+0x74>
 80211c6:	2300      	movs	r3, #0
 80211c8:	2b00      	cmp	r3, #0
 80211ca:	d10a      	bne.n	80211e2 <xQueuePeek+0x8e>
	__asm volatile
 80211cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80211d0:	f383 8811 	msr	BASEPRI, r3
 80211d4:	f3bf 8f6f 	isb	sy
 80211d8:	f3bf 8f4f 	dsb	sy
 80211dc:	61fb      	str	r3, [r7, #28]
}
 80211de:	bf00      	nop
 80211e0:	e7fe      	b.n	80211e0 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80211e2:	f001 ffe7 	bl	80231b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80211e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211ea:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80211ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211ee:	2b00      	cmp	r3, #0
 80211f0:	d021      	beq.n	8021236 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80211f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80211f4:	68db      	ldr	r3, [r3, #12]
 80211f6:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80211f8:	68b9      	ldr	r1, [r7, #8]
 80211fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80211fc:	f000 f9ca 	bl	8021594 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8021200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021202:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021204:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802120a:	2b00      	cmp	r3, #0
 802120c:	d00f      	beq.n	802122e <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802120e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021210:	3324      	adds	r3, #36	; 0x24
 8021212:	4618      	mov	r0, r3
 8021214:	f000 ff6a 	bl	80220ec <xTaskRemoveFromEventList>
 8021218:	4603      	mov	r3, r0
 802121a:	2b00      	cmp	r3, #0
 802121c:	d007      	beq.n	802122e <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 802121e:	4b3d      	ldr	r3, [pc, #244]	; (8021314 <xQueuePeek+0x1c0>)
 8021220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021224:	601a      	str	r2, [r3, #0]
 8021226:	f3bf 8f4f 	dsb	sy
 802122a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 802122e:	f001 fff1 	bl	8023214 <vPortExitCritical>
				return pdPASS;
 8021232:	2301      	movs	r3, #1
 8021234:	e069      	b.n	802130a <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	2b00      	cmp	r3, #0
 802123a:	d103      	bne.n	8021244 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 802123c:	f001 ffea 	bl	8023214 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021240:	2300      	movs	r3, #0
 8021242:	e062      	b.n	802130a <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021246:	2b00      	cmp	r3, #0
 8021248:	d106      	bne.n	8021258 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802124a:	f107 0314 	add.w	r3, r7, #20
 802124e:	4618      	mov	r0, r3
 8021250:	f000 ffb0 	bl	80221b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021254:	2301      	movs	r3, #1
 8021256:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8021258:	f001 ffdc 	bl	8023214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 802125c:	f000 fd00 	bl	8021c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021260:	f001 ffa8 	bl	80231b4 <vPortEnterCritical>
 8021264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802126a:	b25b      	sxtb	r3, r3
 802126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021270:	d103      	bne.n	802127a <xQueuePeek+0x126>
 8021272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021274:	2200      	movs	r2, #0
 8021276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802127a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802127c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021280:	b25b      	sxtb	r3, r3
 8021282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021286:	d103      	bne.n	8021290 <xQueuePeek+0x13c>
 8021288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802128a:	2200      	movs	r2, #0
 802128c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021290:	f001 ffc0 	bl	8023214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021294:	1d3a      	adds	r2, r7, #4
 8021296:	f107 0314 	add.w	r3, r7, #20
 802129a:	4611      	mov	r1, r2
 802129c:	4618      	mov	r0, r3
 802129e:	f000 ff9f 	bl	80221e0 <xTaskCheckForTimeOut>
 80212a2:	4603      	mov	r3, r0
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	d123      	bne.n	80212f0 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80212a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212aa:	f000 f9eb 	bl	8021684 <prvIsQueueEmpty>
 80212ae:	4603      	mov	r3, r0
 80212b0:	2b00      	cmp	r3, #0
 80212b2:	d017      	beq.n	80212e4 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80212b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80212b6:	3324      	adds	r3, #36	; 0x24
 80212b8:	687a      	ldr	r2, [r7, #4]
 80212ba:	4611      	mov	r1, r2
 80212bc:	4618      	mov	r0, r3
 80212be:	f000 fec5 	bl	802204c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80212c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212c4:	f000 f98c 	bl	80215e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80212c8:	f000 fcd8 	bl	8021c7c <xTaskResumeAll>
 80212cc:	4603      	mov	r3, r0
 80212ce:	2b00      	cmp	r3, #0
 80212d0:	d187      	bne.n	80211e2 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 80212d2:	4b10      	ldr	r3, [pc, #64]	; (8021314 <xQueuePeek+0x1c0>)
 80212d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80212d8:	601a      	str	r2, [r3, #0]
 80212da:	f3bf 8f4f 	dsb	sy
 80212de:	f3bf 8f6f 	isb	sy
 80212e2:	e77e      	b.n	80211e2 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 80212e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212e6:	f000 f97b 	bl	80215e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80212ea:	f000 fcc7 	bl	8021c7c <xTaskResumeAll>
 80212ee:	e778      	b.n	80211e2 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 80212f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212f2:	f000 f975 	bl	80215e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80212f6:	f000 fcc1 	bl	8021c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80212fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80212fc:	f000 f9c2 	bl	8021684 <prvIsQueueEmpty>
 8021300:	4603      	mov	r3, r0
 8021302:	2b00      	cmp	r3, #0
 8021304:	f43f af6d 	beq.w	80211e2 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8021308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 802130a:	4618      	mov	r0, r3
 802130c:	3738      	adds	r7, #56	; 0x38
 802130e:	46bd      	mov	sp, r7
 8021310:	bd80      	pop	{r7, pc}
 8021312:	bf00      	nop
 8021314:	e000ed04 	.word	0xe000ed04

08021318 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8021318:	b580      	push	{r7, lr}
 802131a:	b08e      	sub	sp, #56	; 0x38
 802131c:	af00      	add	r7, sp, #0
 802131e:	60f8      	str	r0, [r7, #12]
 8021320:	60b9      	str	r1, [r7, #8]
 8021322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8021324:	68fb      	ldr	r3, [r7, #12]
 8021326:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8021328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802132a:	2b00      	cmp	r3, #0
 802132c:	d10a      	bne.n	8021344 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 802132e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021332:	f383 8811 	msr	BASEPRI, r3
 8021336:	f3bf 8f6f 	isb	sy
 802133a:	f3bf 8f4f 	dsb	sy
 802133e:	623b      	str	r3, [r7, #32]
}
 8021340:	bf00      	nop
 8021342:	e7fe      	b.n	8021342 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021344:	68bb      	ldr	r3, [r7, #8]
 8021346:	2b00      	cmp	r3, #0
 8021348:	d103      	bne.n	8021352 <xQueueReceiveFromISR+0x3a>
 802134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802134e:	2b00      	cmp	r3, #0
 8021350:	d101      	bne.n	8021356 <xQueueReceiveFromISR+0x3e>
 8021352:	2301      	movs	r3, #1
 8021354:	e000      	b.n	8021358 <xQueueReceiveFromISR+0x40>
 8021356:	2300      	movs	r3, #0
 8021358:	2b00      	cmp	r3, #0
 802135a:	d10a      	bne.n	8021372 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 802135c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021360:	f383 8811 	msr	BASEPRI, r3
 8021364:	f3bf 8f6f 	isb	sy
 8021368:	f3bf 8f4f 	dsb	sy
 802136c:	61fb      	str	r3, [r7, #28]
}
 802136e:	bf00      	nop
 8021370:	e7fe      	b.n	8021370 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8021372:	f002 f801 	bl	8023378 <vPortValidateInterruptPriority>
	__asm volatile
 8021376:	f3ef 8211 	mrs	r2, BASEPRI
 802137a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802137e:	f383 8811 	msr	BASEPRI, r3
 8021382:	f3bf 8f6f 	isb	sy
 8021386:	f3bf 8f4f 	dsb	sy
 802138a:	61ba      	str	r2, [r7, #24]
 802138c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 802138e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021396:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802139a:	2b00      	cmp	r3, #0
 802139c:	d02f      	beq.n	80213fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 802139e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80213a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80213a8:	68b9      	ldr	r1, [r7, #8]
 80213aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80213ac:	f000 f8f2 	bl	8021594 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80213b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80213b2:	1e5a      	subs	r2, r3, #1
 80213b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80213b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80213bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80213c0:	d112      	bne.n	80213e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80213c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213c4:	691b      	ldr	r3, [r3, #16]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d016      	beq.n	80213f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80213ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213cc:	3310      	adds	r3, #16
 80213ce:	4618      	mov	r0, r3
 80213d0:	f000 fe8c 	bl	80220ec <xTaskRemoveFromEventList>
 80213d4:	4603      	mov	r3, r0
 80213d6:	2b00      	cmp	r3, #0
 80213d8:	d00e      	beq.n	80213f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80213da:	687b      	ldr	r3, [r7, #4]
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d00b      	beq.n	80213f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80213e0:	687b      	ldr	r3, [r7, #4]
 80213e2:	2201      	movs	r2, #1
 80213e4:	601a      	str	r2, [r3, #0]
 80213e6:	e007      	b.n	80213f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80213e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80213ec:	3301      	adds	r3, #1
 80213ee:	b2db      	uxtb	r3, r3
 80213f0:	b25a      	sxtb	r2, r3
 80213f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80213f8:	2301      	movs	r3, #1
 80213fa:	637b      	str	r3, [r7, #52]	; 0x34
 80213fc:	e001      	b.n	8021402 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80213fe:	2300      	movs	r3, #0
 8021400:	637b      	str	r3, [r7, #52]	; 0x34
 8021402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021404:	613b      	str	r3, [r7, #16]
	__asm volatile
 8021406:	693b      	ldr	r3, [r7, #16]
 8021408:	f383 8811 	msr	BASEPRI, r3
}
 802140c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 802140e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8021410:	4618      	mov	r0, r3
 8021412:	3738      	adds	r7, #56	; 0x38
 8021414:	46bd      	mov	sp, r7
 8021416:	bd80      	pop	{r7, pc}

08021418 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8021418:	b580      	push	{r7, lr}
 802141a:	b084      	sub	sp, #16
 802141c:	af00      	add	r7, sp, #0
 802141e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8021420:	687b      	ldr	r3, [r7, #4]
 8021422:	2b00      	cmp	r3, #0
 8021424:	d10a      	bne.n	802143c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8021426:	f04f 0350 	mov.w	r3, #80	; 0x50
 802142a:	f383 8811 	msr	BASEPRI, r3
 802142e:	f3bf 8f6f 	isb	sy
 8021432:	f3bf 8f4f 	dsb	sy
 8021436:	60bb      	str	r3, [r7, #8]
}
 8021438:	bf00      	nop
 802143a:	e7fe      	b.n	802143a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 802143c:	f001 feba 	bl	80231b4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8021440:	687b      	ldr	r3, [r7, #4]
 8021442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021444:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8021446:	f001 fee5 	bl	8023214 <vPortExitCritical>

	return uxReturn;
 802144a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 802144c:	4618      	mov	r0, r3
 802144e:	3710      	adds	r7, #16
 8021450:	46bd      	mov	sp, r7
 8021452:	bd80      	pop	{r7, pc}

08021454 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8021454:	b480      	push	{r7}
 8021456:	b087      	sub	sp, #28
 8021458:	af00      	add	r7, sp, #0
 802145a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 802145c:	687b      	ldr	r3, [r7, #4]
 802145e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8021460:	697b      	ldr	r3, [r7, #20]
 8021462:	2b00      	cmp	r3, #0
 8021464:	d10a      	bne.n	802147c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8021466:	f04f 0350 	mov.w	r3, #80	; 0x50
 802146a:	f383 8811 	msr	BASEPRI, r3
 802146e:	f3bf 8f6f 	isb	sy
 8021472:	f3bf 8f4f 	dsb	sy
 8021476:	60fb      	str	r3, [r7, #12]
}
 8021478:	bf00      	nop
 802147a:	e7fe      	b.n	802147a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 802147c:	697b      	ldr	r3, [r7, #20]
 802147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021480:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8021482:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8021484:	4618      	mov	r0, r3
 8021486:	371c      	adds	r7, #28
 8021488:	46bd      	mov	sp, r7
 802148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802148e:	4770      	bx	lr

08021490 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8021490:	b480      	push	{r7}
 8021492:	b085      	sub	sp, #20
 8021494:	af00      	add	r7, sp, #0
 8021496:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8021498:	687b      	ldr	r3, [r7, #4]
 802149a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802149c:	2b00      	cmp	r3, #0
 802149e:	d006      	beq.n	80214ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214a4:	681b      	ldr	r3, [r3, #0]
 80214a6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80214aa:	60fb      	str	r3, [r7, #12]
 80214ac:	e001      	b.n	80214b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80214ae:	2300      	movs	r3, #0
 80214b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80214b2:	68fb      	ldr	r3, [r7, #12]
	}
 80214b4:	4618      	mov	r0, r3
 80214b6:	3714      	adds	r7, #20
 80214b8:	46bd      	mov	sp, r7
 80214ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80214be:	4770      	bx	lr

080214c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80214c0:	b580      	push	{r7, lr}
 80214c2:	b086      	sub	sp, #24
 80214c4:	af00      	add	r7, sp, #0
 80214c6:	60f8      	str	r0, [r7, #12]
 80214c8:	60b9      	str	r1, [r7, #8]
 80214ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80214cc:	2300      	movs	r3, #0
 80214ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80214d0:	68fb      	ldr	r3, [r7, #12]
 80214d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80214d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80214d6:	68fb      	ldr	r3, [r7, #12]
 80214d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80214da:	2b00      	cmp	r3, #0
 80214dc:	d10d      	bne.n	80214fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80214de:	68fb      	ldr	r3, [r7, #12]
 80214e0:	681b      	ldr	r3, [r3, #0]
 80214e2:	2b00      	cmp	r3, #0
 80214e4:	d14d      	bne.n	8021582 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80214e6:	68fb      	ldr	r3, [r7, #12]
 80214e8:	689b      	ldr	r3, [r3, #8]
 80214ea:	4618      	mov	r0, r3
 80214ec:	f001 f88e 	bl	802260c <xTaskPriorityDisinherit>
 80214f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80214f2:	68fb      	ldr	r3, [r7, #12]
 80214f4:	2200      	movs	r2, #0
 80214f6:	609a      	str	r2, [r3, #8]
 80214f8:	e043      	b.n	8021582 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80214fa:	687b      	ldr	r3, [r7, #4]
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d119      	bne.n	8021534 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021500:	68fb      	ldr	r3, [r7, #12]
 8021502:	6858      	ldr	r0, [r3, #4]
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021508:	461a      	mov	r2, r3
 802150a:	68b9      	ldr	r1, [r7, #8]
 802150c:	f00c facb 	bl	802daa6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021510:	68fb      	ldr	r3, [r7, #12]
 8021512:	685a      	ldr	r2, [r3, #4]
 8021514:	68fb      	ldr	r3, [r7, #12]
 8021516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021518:	441a      	add	r2, r3
 802151a:	68fb      	ldr	r3, [r7, #12]
 802151c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 802151e:	68fb      	ldr	r3, [r7, #12]
 8021520:	685a      	ldr	r2, [r3, #4]
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	689b      	ldr	r3, [r3, #8]
 8021526:	429a      	cmp	r2, r3
 8021528:	d32b      	bcc.n	8021582 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 802152a:	68fb      	ldr	r3, [r7, #12]
 802152c:	681a      	ldr	r2, [r3, #0]
 802152e:	68fb      	ldr	r3, [r7, #12]
 8021530:	605a      	str	r2, [r3, #4]
 8021532:	e026      	b.n	8021582 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8021534:	68fb      	ldr	r3, [r7, #12]
 8021536:	68d8      	ldr	r0, [r3, #12]
 8021538:	68fb      	ldr	r3, [r7, #12]
 802153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802153c:	461a      	mov	r2, r3
 802153e:	68b9      	ldr	r1, [r7, #8]
 8021540:	f00c fab1 	bl	802daa6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8021544:	68fb      	ldr	r3, [r7, #12]
 8021546:	68da      	ldr	r2, [r3, #12]
 8021548:	68fb      	ldr	r3, [r7, #12]
 802154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802154c:	425b      	negs	r3, r3
 802154e:	441a      	add	r2, r3
 8021550:	68fb      	ldr	r3, [r7, #12]
 8021552:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8021554:	68fb      	ldr	r3, [r7, #12]
 8021556:	68da      	ldr	r2, [r3, #12]
 8021558:	68fb      	ldr	r3, [r7, #12]
 802155a:	681b      	ldr	r3, [r3, #0]
 802155c:	429a      	cmp	r2, r3
 802155e:	d207      	bcs.n	8021570 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021560:	68fb      	ldr	r3, [r7, #12]
 8021562:	689a      	ldr	r2, [r3, #8]
 8021564:	68fb      	ldr	r3, [r7, #12]
 8021566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021568:	425b      	negs	r3, r3
 802156a:	441a      	add	r2, r3
 802156c:	68fb      	ldr	r3, [r7, #12]
 802156e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8021570:	687b      	ldr	r3, [r7, #4]
 8021572:	2b02      	cmp	r3, #2
 8021574:	d105      	bne.n	8021582 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021576:	693b      	ldr	r3, [r7, #16]
 8021578:	2b00      	cmp	r3, #0
 802157a:	d002      	beq.n	8021582 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802157c:	693b      	ldr	r3, [r7, #16]
 802157e:	3b01      	subs	r3, #1
 8021580:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8021582:	693b      	ldr	r3, [r7, #16]
 8021584:	1c5a      	adds	r2, r3, #1
 8021586:	68fb      	ldr	r3, [r7, #12]
 8021588:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802158a:	697b      	ldr	r3, [r7, #20]
}
 802158c:	4618      	mov	r0, r3
 802158e:	3718      	adds	r7, #24
 8021590:	46bd      	mov	sp, r7
 8021592:	bd80      	pop	{r7, pc}

08021594 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8021594:	b580      	push	{r7, lr}
 8021596:	b082      	sub	sp, #8
 8021598:	af00      	add	r7, sp, #0
 802159a:	6078      	str	r0, [r7, #4]
 802159c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802159e:	687b      	ldr	r3, [r7, #4]
 80215a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	d018      	beq.n	80215d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80215a6:	687b      	ldr	r3, [r7, #4]
 80215a8:	68da      	ldr	r2, [r3, #12]
 80215aa:	687b      	ldr	r3, [r7, #4]
 80215ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215ae:	441a      	add	r2, r3
 80215b0:	687b      	ldr	r3, [r7, #4]
 80215b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	68da      	ldr	r2, [r3, #12]
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	689b      	ldr	r3, [r3, #8]
 80215bc:	429a      	cmp	r2, r3
 80215be:	d303      	bcc.n	80215c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	681a      	ldr	r2, [r3, #0]
 80215c4:	687b      	ldr	r3, [r7, #4]
 80215c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	68d9      	ldr	r1, [r3, #12]
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80215d0:	461a      	mov	r2, r3
 80215d2:	6838      	ldr	r0, [r7, #0]
 80215d4:	f00c fa67 	bl	802daa6 <memcpy>
	}
}
 80215d8:	bf00      	nop
 80215da:	3708      	adds	r7, #8
 80215dc:	46bd      	mov	sp, r7
 80215de:	bd80      	pop	{r7, pc}

080215e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80215e0:	b580      	push	{r7, lr}
 80215e2:	b084      	sub	sp, #16
 80215e4:	af00      	add	r7, sp, #0
 80215e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80215e8:	f001 fde4 	bl	80231b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80215ec:	687b      	ldr	r3, [r7, #4]
 80215ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80215f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80215f4:	e011      	b.n	802161a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80215f6:	687b      	ldr	r3, [r7, #4]
 80215f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215fa:	2b00      	cmp	r3, #0
 80215fc:	d012      	beq.n	8021624 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80215fe:	687b      	ldr	r3, [r7, #4]
 8021600:	3324      	adds	r3, #36	; 0x24
 8021602:	4618      	mov	r0, r3
 8021604:	f000 fd72 	bl	80220ec <xTaskRemoveFromEventList>
 8021608:	4603      	mov	r3, r0
 802160a:	2b00      	cmp	r3, #0
 802160c:	d001      	beq.n	8021612 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 802160e:	f000 fe49 	bl	80222a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8021612:	7bfb      	ldrb	r3, [r7, #15]
 8021614:	3b01      	subs	r3, #1
 8021616:	b2db      	uxtb	r3, r3
 8021618:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 802161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 802161e:	2b00      	cmp	r3, #0
 8021620:	dce9      	bgt.n	80215f6 <prvUnlockQueue+0x16>
 8021622:	e000      	b.n	8021626 <prvUnlockQueue+0x46>
					break;
 8021624:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8021626:	687b      	ldr	r3, [r7, #4]
 8021628:	22ff      	movs	r2, #255	; 0xff
 802162a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 802162e:	f001 fdf1 	bl	8023214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8021632:	f001 fdbf 	bl	80231b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802163c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 802163e:	e011      	b.n	8021664 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	691b      	ldr	r3, [r3, #16]
 8021644:	2b00      	cmp	r3, #0
 8021646:	d012      	beq.n	802166e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8021648:	687b      	ldr	r3, [r7, #4]
 802164a:	3310      	adds	r3, #16
 802164c:	4618      	mov	r0, r3
 802164e:	f000 fd4d 	bl	80220ec <xTaskRemoveFromEventList>
 8021652:	4603      	mov	r3, r0
 8021654:	2b00      	cmp	r3, #0
 8021656:	d001      	beq.n	802165c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8021658:	f000 fe24 	bl	80222a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 802165c:	7bbb      	ldrb	r3, [r7, #14]
 802165e:	3b01      	subs	r3, #1
 8021660:	b2db      	uxtb	r3, r3
 8021662:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021664:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021668:	2b00      	cmp	r3, #0
 802166a:	dce9      	bgt.n	8021640 <prvUnlockQueue+0x60>
 802166c:	e000      	b.n	8021670 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 802166e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8021670:	687b      	ldr	r3, [r7, #4]
 8021672:	22ff      	movs	r2, #255	; 0xff
 8021674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8021678:	f001 fdcc 	bl	8023214 <vPortExitCritical>
}
 802167c:	bf00      	nop
 802167e:	3710      	adds	r7, #16
 8021680:	46bd      	mov	sp, r7
 8021682:	bd80      	pop	{r7, pc}

08021684 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8021684:	b580      	push	{r7, lr}
 8021686:	b084      	sub	sp, #16
 8021688:	af00      	add	r7, sp, #0
 802168a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 802168c:	f001 fd92 	bl	80231b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021690:	687b      	ldr	r3, [r7, #4]
 8021692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021694:	2b00      	cmp	r3, #0
 8021696:	d102      	bne.n	802169e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8021698:	2301      	movs	r3, #1
 802169a:	60fb      	str	r3, [r7, #12]
 802169c:	e001      	b.n	80216a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 802169e:	2300      	movs	r3, #0
 80216a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80216a2:	f001 fdb7 	bl	8023214 <vPortExitCritical>

	return xReturn;
 80216a6:	68fb      	ldr	r3, [r7, #12]
}
 80216a8:	4618      	mov	r0, r3
 80216aa:	3710      	adds	r7, #16
 80216ac:	46bd      	mov	sp, r7
 80216ae:	bd80      	pop	{r7, pc}

080216b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80216b0:	b580      	push	{r7, lr}
 80216b2:	b084      	sub	sp, #16
 80216b4:	af00      	add	r7, sp, #0
 80216b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80216b8:	f001 fd7c 	bl	80231b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80216bc:	687b      	ldr	r3, [r7, #4]
 80216be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80216c4:	429a      	cmp	r2, r3
 80216c6:	d102      	bne.n	80216ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80216c8:	2301      	movs	r3, #1
 80216ca:	60fb      	str	r3, [r7, #12]
 80216cc:	e001      	b.n	80216d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80216ce:	2300      	movs	r3, #0
 80216d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80216d2:	f001 fd9f 	bl	8023214 <vPortExitCritical>

	return xReturn;
 80216d6:	68fb      	ldr	r3, [r7, #12]
}
 80216d8:	4618      	mov	r0, r3
 80216da:	3710      	adds	r7, #16
 80216dc:	46bd      	mov	sp, r7
 80216de:	bd80      	pop	{r7, pc}

080216e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80216e0:	b480      	push	{r7}
 80216e2:	b085      	sub	sp, #20
 80216e4:	af00      	add	r7, sp, #0
 80216e6:	6078      	str	r0, [r7, #4]
 80216e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80216ea:	2300      	movs	r3, #0
 80216ec:	60fb      	str	r3, [r7, #12]
 80216ee:	e014      	b.n	802171a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80216f0:	4a0f      	ldr	r2, [pc, #60]	; (8021730 <vQueueAddToRegistry+0x50>)
 80216f2:	68fb      	ldr	r3, [r7, #12]
 80216f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d10b      	bne.n	8021714 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80216fc:	490c      	ldr	r1, [pc, #48]	; (8021730 <vQueueAddToRegistry+0x50>)
 80216fe:	68fb      	ldr	r3, [r7, #12]
 8021700:	683a      	ldr	r2, [r7, #0]
 8021702:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8021706:	4a0a      	ldr	r2, [pc, #40]	; (8021730 <vQueueAddToRegistry+0x50>)
 8021708:	68fb      	ldr	r3, [r7, #12]
 802170a:	00db      	lsls	r3, r3, #3
 802170c:	4413      	add	r3, r2
 802170e:	687a      	ldr	r2, [r7, #4]
 8021710:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8021712:	e006      	b.n	8021722 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	3301      	adds	r3, #1
 8021718:	60fb      	str	r3, [r7, #12]
 802171a:	68fb      	ldr	r3, [r7, #12]
 802171c:	2b09      	cmp	r3, #9
 802171e:	d9e7      	bls.n	80216f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8021720:	bf00      	nop
 8021722:	bf00      	nop
 8021724:	3714      	adds	r7, #20
 8021726:	46bd      	mov	sp, r7
 8021728:	f85d 7b04 	ldr.w	r7, [sp], #4
 802172c:	4770      	bx	lr
 802172e:	bf00      	nop
 8021730:	20001ce8 	.word	0x20001ce8

08021734 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021734:	b580      	push	{r7, lr}
 8021736:	b086      	sub	sp, #24
 8021738:	af00      	add	r7, sp, #0
 802173a:	60f8      	str	r0, [r7, #12]
 802173c:	60b9      	str	r1, [r7, #8]
 802173e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8021740:	68fb      	ldr	r3, [r7, #12]
 8021742:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8021744:	f001 fd36 	bl	80231b4 <vPortEnterCritical>
 8021748:	697b      	ldr	r3, [r7, #20]
 802174a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802174e:	b25b      	sxtb	r3, r3
 8021750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021754:	d103      	bne.n	802175e <vQueueWaitForMessageRestricted+0x2a>
 8021756:	697b      	ldr	r3, [r7, #20]
 8021758:	2200      	movs	r2, #0
 802175a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802175e:	697b      	ldr	r3, [r7, #20]
 8021760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021764:	b25b      	sxtb	r3, r3
 8021766:	f1b3 3fff 	cmp.w	r3, #4294967295
 802176a:	d103      	bne.n	8021774 <vQueueWaitForMessageRestricted+0x40>
 802176c:	697b      	ldr	r3, [r7, #20]
 802176e:	2200      	movs	r2, #0
 8021770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021774:	f001 fd4e 	bl	8023214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8021778:	697b      	ldr	r3, [r7, #20]
 802177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802177c:	2b00      	cmp	r3, #0
 802177e:	d106      	bne.n	802178e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8021780:	697b      	ldr	r3, [r7, #20]
 8021782:	3324      	adds	r3, #36	; 0x24
 8021784:	687a      	ldr	r2, [r7, #4]
 8021786:	68b9      	ldr	r1, [r7, #8]
 8021788:	4618      	mov	r0, r3
 802178a:	f000 fc83 	bl	8022094 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 802178e:	6978      	ldr	r0, [r7, #20]
 8021790:	f7ff ff26 	bl	80215e0 <prvUnlockQueue>
	}
 8021794:	bf00      	nop
 8021796:	3718      	adds	r7, #24
 8021798:	46bd      	mov	sp, r7
 802179a:	bd80      	pop	{r7, pc}

0802179c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 802179c:	b580      	push	{r7, lr}
 802179e:	b08e      	sub	sp, #56	; 0x38
 80217a0:	af04      	add	r7, sp, #16
 80217a2:	60f8      	str	r0, [r7, #12]
 80217a4:	60b9      	str	r1, [r7, #8]
 80217a6:	607a      	str	r2, [r7, #4]
 80217a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80217aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d10a      	bne.n	80217c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80217b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217b4:	f383 8811 	msr	BASEPRI, r3
 80217b8:	f3bf 8f6f 	isb	sy
 80217bc:	f3bf 8f4f 	dsb	sy
 80217c0:	623b      	str	r3, [r7, #32]
}
 80217c2:	bf00      	nop
 80217c4:	e7fe      	b.n	80217c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80217c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80217c8:	2b00      	cmp	r3, #0
 80217ca:	d10a      	bne.n	80217e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80217cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217d0:	f383 8811 	msr	BASEPRI, r3
 80217d4:	f3bf 8f6f 	isb	sy
 80217d8:	f3bf 8f4f 	dsb	sy
 80217dc:	61fb      	str	r3, [r7, #28]
}
 80217de:	bf00      	nop
 80217e0:	e7fe      	b.n	80217e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80217e2:	23ac      	movs	r3, #172	; 0xac
 80217e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80217e6:	693b      	ldr	r3, [r7, #16]
 80217e8:	2bac      	cmp	r3, #172	; 0xac
 80217ea:	d00a      	beq.n	8021802 <xTaskCreateStatic+0x66>
	__asm volatile
 80217ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217f0:	f383 8811 	msr	BASEPRI, r3
 80217f4:	f3bf 8f6f 	isb	sy
 80217f8:	f3bf 8f4f 	dsb	sy
 80217fc:	61bb      	str	r3, [r7, #24]
}
 80217fe:	bf00      	nop
 8021800:	e7fe      	b.n	8021800 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8021802:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8021804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021806:	2b00      	cmp	r3, #0
 8021808:	d01e      	beq.n	8021848 <xTaskCreateStatic+0xac>
 802180a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802180c:	2b00      	cmp	r3, #0
 802180e:	d01b      	beq.n	8021848 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8021810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021812:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8021814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021818:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 802181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802181c:	2202      	movs	r2, #2
 802181e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8021822:	2300      	movs	r3, #0
 8021824:	9303      	str	r3, [sp, #12]
 8021826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021828:	9302      	str	r3, [sp, #8]
 802182a:	f107 0314 	add.w	r3, r7, #20
 802182e:	9301      	str	r3, [sp, #4]
 8021830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021832:	9300      	str	r3, [sp, #0]
 8021834:	683b      	ldr	r3, [r7, #0]
 8021836:	687a      	ldr	r2, [r7, #4]
 8021838:	68b9      	ldr	r1, [r7, #8]
 802183a:	68f8      	ldr	r0, [r7, #12]
 802183c:	f000 f850 	bl	80218e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021842:	f000 f8f7 	bl	8021a34 <prvAddNewTaskToReadyList>
 8021846:	e001      	b.n	802184c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8021848:	2300      	movs	r3, #0
 802184a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 802184c:	697b      	ldr	r3, [r7, #20]
	}
 802184e:	4618      	mov	r0, r3
 8021850:	3728      	adds	r7, #40	; 0x28
 8021852:	46bd      	mov	sp, r7
 8021854:	bd80      	pop	{r7, pc}

08021856 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8021856:	b580      	push	{r7, lr}
 8021858:	b08c      	sub	sp, #48	; 0x30
 802185a:	af04      	add	r7, sp, #16
 802185c:	60f8      	str	r0, [r7, #12]
 802185e:	60b9      	str	r1, [r7, #8]
 8021860:	603b      	str	r3, [r7, #0]
 8021862:	4613      	mov	r3, r2
 8021864:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8021866:	88fb      	ldrh	r3, [r7, #6]
 8021868:	009b      	lsls	r3, r3, #2
 802186a:	4618      	mov	r0, r3
 802186c:	f001 fdc4 	bl	80233f8 <pvPortMalloc>
 8021870:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8021872:	697b      	ldr	r3, [r7, #20]
 8021874:	2b00      	cmp	r3, #0
 8021876:	d00e      	beq.n	8021896 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021878:	20ac      	movs	r0, #172	; 0xac
 802187a:	f001 fdbd 	bl	80233f8 <pvPortMalloc>
 802187e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021880:	69fb      	ldr	r3, [r7, #28]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d003      	beq.n	802188e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8021886:	69fb      	ldr	r3, [r7, #28]
 8021888:	697a      	ldr	r2, [r7, #20]
 802188a:	631a      	str	r2, [r3, #48]	; 0x30
 802188c:	e005      	b.n	802189a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 802188e:	6978      	ldr	r0, [r7, #20]
 8021890:	f001 fdf8 	bl	8023484 <vPortFree>
 8021894:	e001      	b.n	802189a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8021896:	2300      	movs	r3, #0
 8021898:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 802189a:	69fb      	ldr	r3, [r7, #28]
 802189c:	2b00      	cmp	r3, #0
 802189e:	d017      	beq.n	80218d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80218a0:	69fb      	ldr	r3, [r7, #28]
 80218a2:	2200      	movs	r2, #0
 80218a4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80218a8:	88fa      	ldrh	r2, [r7, #6]
 80218aa:	2300      	movs	r3, #0
 80218ac:	9303      	str	r3, [sp, #12]
 80218ae:	69fb      	ldr	r3, [r7, #28]
 80218b0:	9302      	str	r3, [sp, #8]
 80218b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80218b4:	9301      	str	r3, [sp, #4]
 80218b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218b8:	9300      	str	r3, [sp, #0]
 80218ba:	683b      	ldr	r3, [r7, #0]
 80218bc:	68b9      	ldr	r1, [r7, #8]
 80218be:	68f8      	ldr	r0, [r7, #12]
 80218c0:	f000 f80e 	bl	80218e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80218c4:	69f8      	ldr	r0, [r7, #28]
 80218c6:	f000 f8b5 	bl	8021a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80218ca:	2301      	movs	r3, #1
 80218cc:	61bb      	str	r3, [r7, #24]
 80218ce:	e002      	b.n	80218d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80218d0:	f04f 33ff 	mov.w	r3, #4294967295
 80218d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80218d6:	69bb      	ldr	r3, [r7, #24]
	}
 80218d8:	4618      	mov	r0, r3
 80218da:	3720      	adds	r7, #32
 80218dc:	46bd      	mov	sp, r7
 80218de:	bd80      	pop	{r7, pc}

080218e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80218e0:	b580      	push	{r7, lr}
 80218e2:	b088      	sub	sp, #32
 80218e4:	af00      	add	r7, sp, #0
 80218e6:	60f8      	str	r0, [r7, #12]
 80218e8:	60b9      	str	r1, [r7, #8]
 80218ea:	607a      	str	r2, [r7, #4]
 80218ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80218ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80218f2:	687b      	ldr	r3, [r7, #4]
 80218f4:	009b      	lsls	r3, r3, #2
 80218f6:	461a      	mov	r2, r3
 80218f8:	21a5      	movs	r1, #165	; 0xa5
 80218fa:	f00b feff 	bl	802d6fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80218fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021902:	687b      	ldr	r3, [r7, #4]
 8021904:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021908:	3b01      	subs	r3, #1
 802190a:	009b      	lsls	r3, r3, #2
 802190c:	4413      	add	r3, r2
 802190e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8021910:	69bb      	ldr	r3, [r7, #24]
 8021912:	f023 0307 	bic.w	r3, r3, #7
 8021916:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8021918:	69bb      	ldr	r3, [r7, #24]
 802191a:	f003 0307 	and.w	r3, r3, #7
 802191e:	2b00      	cmp	r3, #0
 8021920:	d00a      	beq.n	8021938 <prvInitialiseNewTask+0x58>
	__asm volatile
 8021922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021926:	f383 8811 	msr	BASEPRI, r3
 802192a:	f3bf 8f6f 	isb	sy
 802192e:	f3bf 8f4f 	dsb	sy
 8021932:	617b      	str	r3, [r7, #20]
}
 8021934:	bf00      	nop
 8021936:	e7fe      	b.n	8021936 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8021938:	68bb      	ldr	r3, [r7, #8]
 802193a:	2b00      	cmp	r3, #0
 802193c:	d01f      	beq.n	802197e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 802193e:	2300      	movs	r3, #0
 8021940:	61fb      	str	r3, [r7, #28]
 8021942:	e012      	b.n	802196a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8021944:	68ba      	ldr	r2, [r7, #8]
 8021946:	69fb      	ldr	r3, [r7, #28]
 8021948:	4413      	add	r3, r2
 802194a:	7819      	ldrb	r1, [r3, #0]
 802194c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802194e:	69fb      	ldr	r3, [r7, #28]
 8021950:	4413      	add	r3, r2
 8021952:	3334      	adds	r3, #52	; 0x34
 8021954:	460a      	mov	r2, r1
 8021956:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8021958:	68ba      	ldr	r2, [r7, #8]
 802195a:	69fb      	ldr	r3, [r7, #28]
 802195c:	4413      	add	r3, r2
 802195e:	781b      	ldrb	r3, [r3, #0]
 8021960:	2b00      	cmp	r3, #0
 8021962:	d006      	beq.n	8021972 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021964:	69fb      	ldr	r3, [r7, #28]
 8021966:	3301      	adds	r3, #1
 8021968:	61fb      	str	r3, [r7, #28]
 802196a:	69fb      	ldr	r3, [r7, #28]
 802196c:	2b0f      	cmp	r3, #15
 802196e:	d9e9      	bls.n	8021944 <prvInitialiseNewTask+0x64>
 8021970:	e000      	b.n	8021974 <prvInitialiseNewTask+0x94>
			{
				break;
 8021972:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8021974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021976:	2200      	movs	r2, #0
 8021978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802197c:	e003      	b.n	8021986 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 802197e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021980:	2200      	movs	r2, #0
 8021982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8021986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021988:	2b37      	cmp	r3, #55	; 0x37
 802198a:	d901      	bls.n	8021990 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 802198c:	2337      	movs	r3, #55	; 0x37
 802198e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021994:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8021996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802199a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 802199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802199e:	2200      	movs	r2, #0
 80219a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80219a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219a4:	3304      	adds	r3, #4
 80219a6:	4618      	mov	r0, r3
 80219a8:	f7fe fdc6 	bl	8020538 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80219ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219ae:	3318      	adds	r3, #24
 80219b0:	4618      	mov	r0, r3
 80219b2:	f7fe fdc1 	bl	8020538 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80219b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80219ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80219bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80219c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80219c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80219ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80219cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219ce:	2200      	movs	r2, #0
 80219d0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80219d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219d4:	2200      	movs	r2, #0
 80219d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80219da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219dc:	2200      	movs	r2, #0
 80219de:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80219e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219e4:	3358      	adds	r3, #88	; 0x58
 80219e6:	224c      	movs	r2, #76	; 0x4c
 80219e8:	2100      	movs	r1, #0
 80219ea:	4618      	mov	r0, r3
 80219ec:	f00b fe86 	bl	802d6fc <memset>
 80219f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219f2:	4a0d      	ldr	r2, [pc, #52]	; (8021a28 <prvInitialiseNewTask+0x148>)
 80219f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80219f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219f8:	4a0c      	ldr	r2, [pc, #48]	; (8021a2c <prvInitialiseNewTask+0x14c>)
 80219fa:	661a      	str	r2, [r3, #96]	; 0x60
 80219fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219fe:	4a0c      	ldr	r2, [pc, #48]	; (8021a30 <prvInitialiseNewTask+0x150>)
 8021a00:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8021a02:	683a      	ldr	r2, [r7, #0]
 8021a04:	68f9      	ldr	r1, [r7, #12]
 8021a06:	69b8      	ldr	r0, [r7, #24]
 8021a08:	f001 faa6 	bl	8022f58 <pxPortInitialiseStack>
 8021a0c:	4602      	mov	r2, r0
 8021a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021a10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8021a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a14:	2b00      	cmp	r3, #0
 8021a16:	d002      	beq.n	8021a1e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8021a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021a1e:	bf00      	nop
 8021a20:	3720      	adds	r7, #32
 8021a22:	46bd      	mov	sp, r7
 8021a24:	bd80      	pop	{r7, pc}
 8021a26:	bf00      	nop
 8021a28:	2000d9b0 	.word	0x2000d9b0
 8021a2c:	2000da18 	.word	0x2000da18
 8021a30:	2000da80 	.word	0x2000da80

08021a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8021a34:	b580      	push	{r7, lr}
 8021a36:	b082      	sub	sp, #8
 8021a38:	af00      	add	r7, sp, #0
 8021a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021a3c:	f001 fbba 	bl	80231b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021a40:	4b2d      	ldr	r3, [pc, #180]	; (8021af8 <prvAddNewTaskToReadyList+0xc4>)
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	3301      	adds	r3, #1
 8021a46:	4a2c      	ldr	r2, [pc, #176]	; (8021af8 <prvAddNewTaskToReadyList+0xc4>)
 8021a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021a4a:	4b2c      	ldr	r3, [pc, #176]	; (8021afc <prvAddNewTaskToReadyList+0xc8>)
 8021a4c:	681b      	ldr	r3, [r3, #0]
 8021a4e:	2b00      	cmp	r3, #0
 8021a50:	d109      	bne.n	8021a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8021a52:	4a2a      	ldr	r2, [pc, #168]	; (8021afc <prvAddNewTaskToReadyList+0xc8>)
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021a58:	4b27      	ldr	r3, [pc, #156]	; (8021af8 <prvAddNewTaskToReadyList+0xc4>)
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	2b01      	cmp	r3, #1
 8021a5e:	d110      	bne.n	8021a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021a60:	f000 fc44 	bl	80222ec <prvInitialiseTaskLists>
 8021a64:	e00d      	b.n	8021a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8021a66:	4b26      	ldr	r3, [pc, #152]	; (8021b00 <prvAddNewTaskToReadyList+0xcc>)
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	2b00      	cmp	r3, #0
 8021a6c:	d109      	bne.n	8021a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021a6e:	4b23      	ldr	r3, [pc, #140]	; (8021afc <prvAddNewTaskToReadyList+0xc8>)
 8021a70:	681b      	ldr	r3, [r3, #0]
 8021a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a74:	687b      	ldr	r3, [r7, #4]
 8021a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021a78:	429a      	cmp	r2, r3
 8021a7a:	d802      	bhi.n	8021a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021a7c:	4a1f      	ldr	r2, [pc, #124]	; (8021afc <prvAddNewTaskToReadyList+0xc8>)
 8021a7e:	687b      	ldr	r3, [r7, #4]
 8021a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8021a82:	4b20      	ldr	r3, [pc, #128]	; (8021b04 <prvAddNewTaskToReadyList+0xd0>)
 8021a84:	681b      	ldr	r3, [r3, #0]
 8021a86:	3301      	adds	r3, #1
 8021a88:	4a1e      	ldr	r2, [pc, #120]	; (8021b04 <prvAddNewTaskToReadyList+0xd0>)
 8021a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021a8c:	4b1d      	ldr	r3, [pc, #116]	; (8021b04 <prvAddNewTaskToReadyList+0xd0>)
 8021a8e:	681a      	ldr	r2, [r3, #0]
 8021a90:	687b      	ldr	r3, [r7, #4]
 8021a92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8021a94:	687b      	ldr	r3, [r7, #4]
 8021a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021a98:	4b1b      	ldr	r3, [pc, #108]	; (8021b08 <prvAddNewTaskToReadyList+0xd4>)
 8021a9a:	681b      	ldr	r3, [r3, #0]
 8021a9c:	429a      	cmp	r2, r3
 8021a9e:	d903      	bls.n	8021aa8 <prvAddNewTaskToReadyList+0x74>
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021aa4:	4a18      	ldr	r2, [pc, #96]	; (8021b08 <prvAddNewTaskToReadyList+0xd4>)
 8021aa6:	6013      	str	r3, [r2, #0]
 8021aa8:	687b      	ldr	r3, [r7, #4]
 8021aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021aac:	4613      	mov	r3, r2
 8021aae:	009b      	lsls	r3, r3, #2
 8021ab0:	4413      	add	r3, r2
 8021ab2:	009b      	lsls	r3, r3, #2
 8021ab4:	4a15      	ldr	r2, [pc, #84]	; (8021b0c <prvAddNewTaskToReadyList+0xd8>)
 8021ab6:	441a      	add	r2, r3
 8021ab8:	687b      	ldr	r3, [r7, #4]
 8021aba:	3304      	adds	r3, #4
 8021abc:	4619      	mov	r1, r3
 8021abe:	4610      	mov	r0, r2
 8021ac0:	f7fe fd47 	bl	8020552 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8021ac4:	f001 fba6 	bl	8023214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021ac8:	4b0d      	ldr	r3, [pc, #52]	; (8021b00 <prvAddNewTaskToReadyList+0xcc>)
 8021aca:	681b      	ldr	r3, [r3, #0]
 8021acc:	2b00      	cmp	r3, #0
 8021ace:	d00e      	beq.n	8021aee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021ad0:	4b0a      	ldr	r3, [pc, #40]	; (8021afc <prvAddNewTaskToReadyList+0xc8>)
 8021ad2:	681b      	ldr	r3, [r3, #0]
 8021ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ad6:	687b      	ldr	r3, [r7, #4]
 8021ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ada:	429a      	cmp	r2, r3
 8021adc:	d207      	bcs.n	8021aee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021ade:	4b0c      	ldr	r3, [pc, #48]	; (8021b10 <prvAddNewTaskToReadyList+0xdc>)
 8021ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021ae4:	601a      	str	r2, [r3, #0]
 8021ae6:	f3bf 8f4f 	dsb	sy
 8021aea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021aee:	bf00      	nop
 8021af0:	3708      	adds	r7, #8
 8021af2:	46bd      	mov	sp, r7
 8021af4:	bd80      	pop	{r7, pc}
 8021af6:	bf00      	nop
 8021af8:	2000220c 	.word	0x2000220c
 8021afc:	20001d38 	.word	0x20001d38
 8021b00:	20002218 	.word	0x20002218
 8021b04:	20002228 	.word	0x20002228
 8021b08:	20002214 	.word	0x20002214
 8021b0c:	20001d3c 	.word	0x20001d3c
 8021b10:	e000ed04 	.word	0xe000ed04

08021b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8021b14:	b580      	push	{r7, lr}
 8021b16:	b084      	sub	sp, #16
 8021b18:	af00      	add	r7, sp, #0
 8021b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021b1c:	2300      	movs	r3, #0
 8021b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021b20:	687b      	ldr	r3, [r7, #4]
 8021b22:	2b00      	cmp	r3, #0
 8021b24:	d017      	beq.n	8021b56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8021b26:	4b13      	ldr	r3, [pc, #76]	; (8021b74 <vTaskDelay+0x60>)
 8021b28:	681b      	ldr	r3, [r3, #0]
 8021b2a:	2b00      	cmp	r3, #0
 8021b2c:	d00a      	beq.n	8021b44 <vTaskDelay+0x30>
	__asm volatile
 8021b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b32:	f383 8811 	msr	BASEPRI, r3
 8021b36:	f3bf 8f6f 	isb	sy
 8021b3a:	f3bf 8f4f 	dsb	sy
 8021b3e:	60bb      	str	r3, [r7, #8]
}
 8021b40:	bf00      	nop
 8021b42:	e7fe      	b.n	8021b42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8021b44:	f000 f88c 	bl	8021c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021b48:	2100      	movs	r1, #0
 8021b4a:	6878      	ldr	r0, [r7, #4]
 8021b4c:	f000 fe62 	bl	8022814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021b50:	f000 f894 	bl	8021c7c <xTaskResumeAll>
 8021b54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8021b56:	68fb      	ldr	r3, [r7, #12]
 8021b58:	2b00      	cmp	r3, #0
 8021b5a:	d107      	bne.n	8021b6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8021b5c:	4b06      	ldr	r3, [pc, #24]	; (8021b78 <vTaskDelay+0x64>)
 8021b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021b62:	601a      	str	r2, [r3, #0]
 8021b64:	f3bf 8f4f 	dsb	sy
 8021b68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021b6c:	bf00      	nop
 8021b6e:	3710      	adds	r7, #16
 8021b70:	46bd      	mov	sp, r7
 8021b72:	bd80      	pop	{r7, pc}
 8021b74:	20002234 	.word	0x20002234
 8021b78:	e000ed04 	.word	0xe000ed04

08021b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021b7c:	b580      	push	{r7, lr}
 8021b7e:	b08a      	sub	sp, #40	; 0x28
 8021b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8021b82:	2300      	movs	r3, #0
 8021b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8021b86:	2300      	movs	r3, #0
 8021b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021b8a:	463a      	mov	r2, r7
 8021b8c:	1d39      	adds	r1, r7, #4
 8021b8e:	f107 0308 	add.w	r3, r7, #8
 8021b92:	4618      	mov	r0, r3
 8021b94:	f7fe fc7c 	bl	8020490 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021b98:	6839      	ldr	r1, [r7, #0]
 8021b9a:	687b      	ldr	r3, [r7, #4]
 8021b9c:	68ba      	ldr	r2, [r7, #8]
 8021b9e:	9202      	str	r2, [sp, #8]
 8021ba0:	9301      	str	r3, [sp, #4]
 8021ba2:	2300      	movs	r3, #0
 8021ba4:	9300      	str	r3, [sp, #0]
 8021ba6:	2300      	movs	r3, #0
 8021ba8:	460a      	mov	r2, r1
 8021baa:	4925      	ldr	r1, [pc, #148]	; (8021c40 <vTaskStartScheduler+0xc4>)
 8021bac:	4825      	ldr	r0, [pc, #148]	; (8021c44 <vTaskStartScheduler+0xc8>)
 8021bae:	f7ff fdf5 	bl	802179c <xTaskCreateStatic>
 8021bb2:	4603      	mov	r3, r0
 8021bb4:	4a24      	ldr	r2, [pc, #144]	; (8021c48 <vTaskStartScheduler+0xcc>)
 8021bb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8021bb8:	4b23      	ldr	r3, [pc, #140]	; (8021c48 <vTaskStartScheduler+0xcc>)
 8021bba:	681b      	ldr	r3, [r3, #0]
 8021bbc:	2b00      	cmp	r3, #0
 8021bbe:	d002      	beq.n	8021bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8021bc0:	2301      	movs	r3, #1
 8021bc2:	617b      	str	r3, [r7, #20]
 8021bc4:	e001      	b.n	8021bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8021bc6:	2300      	movs	r3, #0
 8021bc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8021bca:	697b      	ldr	r3, [r7, #20]
 8021bcc:	2b01      	cmp	r3, #1
 8021bce:	d102      	bne.n	8021bd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8021bd0:	f000 fe74 	bl	80228bc <xTimerCreateTimerTask>
 8021bd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8021bd6:	697b      	ldr	r3, [r7, #20]
 8021bd8:	2b01      	cmp	r3, #1
 8021bda:	d11d      	bne.n	8021c18 <vTaskStartScheduler+0x9c>
	__asm volatile
 8021bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021be0:	f383 8811 	msr	BASEPRI, r3
 8021be4:	f3bf 8f6f 	isb	sy
 8021be8:	f3bf 8f4f 	dsb	sy
 8021bec:	613b      	str	r3, [r7, #16]
}
 8021bee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021bf0:	4b16      	ldr	r3, [pc, #88]	; (8021c4c <vTaskStartScheduler+0xd0>)
 8021bf2:	681b      	ldr	r3, [r3, #0]
 8021bf4:	3358      	adds	r3, #88	; 0x58
 8021bf6:	4a16      	ldr	r2, [pc, #88]	; (8021c50 <vTaskStartScheduler+0xd4>)
 8021bf8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8021bfa:	4b16      	ldr	r3, [pc, #88]	; (8021c54 <vTaskStartScheduler+0xd8>)
 8021bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8021c00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8021c02:	4b15      	ldr	r3, [pc, #84]	; (8021c58 <vTaskStartScheduler+0xdc>)
 8021c04:	2201      	movs	r2, #1
 8021c06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8021c08:	4b14      	ldr	r3, [pc, #80]	; (8021c5c <vTaskStartScheduler+0xe0>)
 8021c0a:	2200      	movs	r2, #0
 8021c0c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8021c0e:	f7ef fa1b 	bl	8011048 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8021c12:	f001 fa2d 	bl	8023070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8021c16:	e00e      	b.n	8021c36 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8021c18:	697b      	ldr	r3, [r7, #20]
 8021c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021c1e:	d10a      	bne.n	8021c36 <vTaskStartScheduler+0xba>
	__asm volatile
 8021c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c24:	f383 8811 	msr	BASEPRI, r3
 8021c28:	f3bf 8f6f 	isb	sy
 8021c2c:	f3bf 8f4f 	dsb	sy
 8021c30:	60fb      	str	r3, [r7, #12]
}
 8021c32:	bf00      	nop
 8021c34:	e7fe      	b.n	8021c34 <vTaskStartScheduler+0xb8>
}
 8021c36:	bf00      	nop
 8021c38:	3718      	adds	r7, #24
 8021c3a:	46bd      	mov	sp, r7
 8021c3c:	bd80      	pop	{r7, pc}
 8021c3e:	bf00      	nop
 8021c40:	08033320 	.word	0x08033320
 8021c44:	080222bd 	.word	0x080222bd
 8021c48:	20002230 	.word	0x20002230
 8021c4c:	20001d38 	.word	0x20001d38
 8021c50:	20000188 	.word	0x20000188
 8021c54:	2000222c 	.word	0x2000222c
 8021c58:	20002218 	.word	0x20002218
 8021c5c:	20002210 	.word	0x20002210

08021c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8021c60:	b480      	push	{r7}
 8021c62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8021c64:	4b04      	ldr	r3, [pc, #16]	; (8021c78 <vTaskSuspendAll+0x18>)
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	3301      	adds	r3, #1
 8021c6a:	4a03      	ldr	r2, [pc, #12]	; (8021c78 <vTaskSuspendAll+0x18>)
 8021c6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8021c6e:	bf00      	nop
 8021c70:	46bd      	mov	sp, r7
 8021c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c76:	4770      	bx	lr
 8021c78:	20002234 	.word	0x20002234

08021c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8021c7c:	b580      	push	{r7, lr}
 8021c7e:	b084      	sub	sp, #16
 8021c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8021c82:	2300      	movs	r3, #0
 8021c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8021c86:	2300      	movs	r3, #0
 8021c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8021c8a:	4b42      	ldr	r3, [pc, #264]	; (8021d94 <xTaskResumeAll+0x118>)
 8021c8c:	681b      	ldr	r3, [r3, #0]
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d10a      	bne.n	8021ca8 <xTaskResumeAll+0x2c>
	__asm volatile
 8021c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021c96:	f383 8811 	msr	BASEPRI, r3
 8021c9a:	f3bf 8f6f 	isb	sy
 8021c9e:	f3bf 8f4f 	dsb	sy
 8021ca2:	603b      	str	r3, [r7, #0]
}
 8021ca4:	bf00      	nop
 8021ca6:	e7fe      	b.n	8021ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8021ca8:	f001 fa84 	bl	80231b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8021cac:	4b39      	ldr	r3, [pc, #228]	; (8021d94 <xTaskResumeAll+0x118>)
 8021cae:	681b      	ldr	r3, [r3, #0]
 8021cb0:	3b01      	subs	r3, #1
 8021cb2:	4a38      	ldr	r2, [pc, #224]	; (8021d94 <xTaskResumeAll+0x118>)
 8021cb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021cb6:	4b37      	ldr	r3, [pc, #220]	; (8021d94 <xTaskResumeAll+0x118>)
 8021cb8:	681b      	ldr	r3, [r3, #0]
 8021cba:	2b00      	cmp	r3, #0
 8021cbc:	d162      	bne.n	8021d84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8021cbe:	4b36      	ldr	r3, [pc, #216]	; (8021d98 <xTaskResumeAll+0x11c>)
 8021cc0:	681b      	ldr	r3, [r3, #0]
 8021cc2:	2b00      	cmp	r3, #0
 8021cc4:	d05e      	beq.n	8021d84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021cc6:	e02f      	b.n	8021d28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021cc8:	4b34      	ldr	r3, [pc, #208]	; (8021d9c <xTaskResumeAll+0x120>)
 8021cca:	68db      	ldr	r3, [r3, #12]
 8021ccc:	68db      	ldr	r3, [r3, #12]
 8021cce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021cd0:	68fb      	ldr	r3, [r7, #12]
 8021cd2:	3318      	adds	r3, #24
 8021cd4:	4618      	mov	r0, r3
 8021cd6:	f7fe fc99 	bl	802060c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021cda:	68fb      	ldr	r3, [r7, #12]
 8021cdc:	3304      	adds	r3, #4
 8021cde:	4618      	mov	r0, r3
 8021ce0:	f7fe fc94 	bl	802060c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8021ce4:	68fb      	ldr	r3, [r7, #12]
 8021ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ce8:	4b2d      	ldr	r3, [pc, #180]	; (8021da0 <xTaskResumeAll+0x124>)
 8021cea:	681b      	ldr	r3, [r3, #0]
 8021cec:	429a      	cmp	r2, r3
 8021cee:	d903      	bls.n	8021cf8 <xTaskResumeAll+0x7c>
 8021cf0:	68fb      	ldr	r3, [r7, #12]
 8021cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021cf4:	4a2a      	ldr	r2, [pc, #168]	; (8021da0 <xTaskResumeAll+0x124>)
 8021cf6:	6013      	str	r3, [r2, #0]
 8021cf8:	68fb      	ldr	r3, [r7, #12]
 8021cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021cfc:	4613      	mov	r3, r2
 8021cfe:	009b      	lsls	r3, r3, #2
 8021d00:	4413      	add	r3, r2
 8021d02:	009b      	lsls	r3, r3, #2
 8021d04:	4a27      	ldr	r2, [pc, #156]	; (8021da4 <xTaskResumeAll+0x128>)
 8021d06:	441a      	add	r2, r3
 8021d08:	68fb      	ldr	r3, [r7, #12]
 8021d0a:	3304      	adds	r3, #4
 8021d0c:	4619      	mov	r1, r3
 8021d0e:	4610      	mov	r0, r2
 8021d10:	f7fe fc1f 	bl	8020552 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021d18:	4b23      	ldr	r3, [pc, #140]	; (8021da8 <xTaskResumeAll+0x12c>)
 8021d1a:	681b      	ldr	r3, [r3, #0]
 8021d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d1e:	429a      	cmp	r2, r3
 8021d20:	d302      	bcc.n	8021d28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8021d22:	4b22      	ldr	r3, [pc, #136]	; (8021dac <xTaskResumeAll+0x130>)
 8021d24:	2201      	movs	r2, #1
 8021d26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8021d28:	4b1c      	ldr	r3, [pc, #112]	; (8021d9c <xTaskResumeAll+0x120>)
 8021d2a:	681b      	ldr	r3, [r3, #0]
 8021d2c:	2b00      	cmp	r3, #0
 8021d2e:	d1cb      	bne.n	8021cc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8021d30:	68fb      	ldr	r3, [r7, #12]
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d001      	beq.n	8021d3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8021d36:	f000 fbb3 	bl	80224a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8021d3a:	4b1d      	ldr	r3, [pc, #116]	; (8021db0 <xTaskResumeAll+0x134>)
 8021d3c:	681b      	ldr	r3, [r3, #0]
 8021d3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	d010      	beq.n	8021d68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8021d46:	f000 f847 	bl	8021dd8 <xTaskIncrementTick>
 8021d4a:	4603      	mov	r3, r0
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	d002      	beq.n	8021d56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8021d50:	4b16      	ldr	r3, [pc, #88]	; (8021dac <xTaskResumeAll+0x130>)
 8021d52:	2201      	movs	r2, #1
 8021d54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8021d56:	687b      	ldr	r3, [r7, #4]
 8021d58:	3b01      	subs	r3, #1
 8021d5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8021d5c:	687b      	ldr	r3, [r7, #4]
 8021d5e:	2b00      	cmp	r3, #0
 8021d60:	d1f1      	bne.n	8021d46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8021d62:	4b13      	ldr	r3, [pc, #76]	; (8021db0 <xTaskResumeAll+0x134>)
 8021d64:	2200      	movs	r2, #0
 8021d66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8021d68:	4b10      	ldr	r3, [pc, #64]	; (8021dac <xTaskResumeAll+0x130>)
 8021d6a:	681b      	ldr	r3, [r3, #0]
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	d009      	beq.n	8021d84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8021d70:	2301      	movs	r3, #1
 8021d72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8021d74:	4b0f      	ldr	r3, [pc, #60]	; (8021db4 <xTaskResumeAll+0x138>)
 8021d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021d7a:	601a      	str	r2, [r3, #0]
 8021d7c:	f3bf 8f4f 	dsb	sy
 8021d80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8021d84:	f001 fa46 	bl	8023214 <vPortExitCritical>

	return xAlreadyYielded;
 8021d88:	68bb      	ldr	r3, [r7, #8]
}
 8021d8a:	4618      	mov	r0, r3
 8021d8c:	3710      	adds	r7, #16
 8021d8e:	46bd      	mov	sp, r7
 8021d90:	bd80      	pop	{r7, pc}
 8021d92:	bf00      	nop
 8021d94:	20002234 	.word	0x20002234
 8021d98:	2000220c 	.word	0x2000220c
 8021d9c:	200021cc 	.word	0x200021cc
 8021da0:	20002214 	.word	0x20002214
 8021da4:	20001d3c 	.word	0x20001d3c
 8021da8:	20001d38 	.word	0x20001d38
 8021dac:	20002220 	.word	0x20002220
 8021db0:	2000221c 	.word	0x2000221c
 8021db4:	e000ed04 	.word	0xe000ed04

08021db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8021db8:	b480      	push	{r7}
 8021dba:	b083      	sub	sp, #12
 8021dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8021dbe:	4b05      	ldr	r3, [pc, #20]	; (8021dd4 <xTaskGetTickCount+0x1c>)
 8021dc0:	681b      	ldr	r3, [r3, #0]
 8021dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8021dc4:	687b      	ldr	r3, [r7, #4]
}
 8021dc6:	4618      	mov	r0, r3
 8021dc8:	370c      	adds	r7, #12
 8021dca:	46bd      	mov	sp, r7
 8021dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dd0:	4770      	bx	lr
 8021dd2:	bf00      	nop
 8021dd4:	20002210 	.word	0x20002210

08021dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8021dd8:	b580      	push	{r7, lr}
 8021dda:	b086      	sub	sp, #24
 8021ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8021dde:	2300      	movs	r3, #0
 8021de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8021de2:	4b4f      	ldr	r3, [pc, #316]	; (8021f20 <xTaskIncrementTick+0x148>)
 8021de4:	681b      	ldr	r3, [r3, #0]
 8021de6:	2b00      	cmp	r3, #0
 8021de8:	f040 808f 	bne.w	8021f0a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8021dec:	4b4d      	ldr	r3, [pc, #308]	; (8021f24 <xTaskIncrementTick+0x14c>)
 8021dee:	681b      	ldr	r3, [r3, #0]
 8021df0:	3301      	adds	r3, #1
 8021df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8021df4:	4a4b      	ldr	r2, [pc, #300]	; (8021f24 <xTaskIncrementTick+0x14c>)
 8021df6:	693b      	ldr	r3, [r7, #16]
 8021df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8021dfa:	693b      	ldr	r3, [r7, #16]
 8021dfc:	2b00      	cmp	r3, #0
 8021dfe:	d120      	bne.n	8021e42 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8021e00:	4b49      	ldr	r3, [pc, #292]	; (8021f28 <xTaskIncrementTick+0x150>)
 8021e02:	681b      	ldr	r3, [r3, #0]
 8021e04:	681b      	ldr	r3, [r3, #0]
 8021e06:	2b00      	cmp	r3, #0
 8021e08:	d00a      	beq.n	8021e20 <xTaskIncrementTick+0x48>
	__asm volatile
 8021e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021e0e:	f383 8811 	msr	BASEPRI, r3
 8021e12:	f3bf 8f6f 	isb	sy
 8021e16:	f3bf 8f4f 	dsb	sy
 8021e1a:	603b      	str	r3, [r7, #0]
}
 8021e1c:	bf00      	nop
 8021e1e:	e7fe      	b.n	8021e1e <xTaskIncrementTick+0x46>
 8021e20:	4b41      	ldr	r3, [pc, #260]	; (8021f28 <xTaskIncrementTick+0x150>)
 8021e22:	681b      	ldr	r3, [r3, #0]
 8021e24:	60fb      	str	r3, [r7, #12]
 8021e26:	4b41      	ldr	r3, [pc, #260]	; (8021f2c <xTaskIncrementTick+0x154>)
 8021e28:	681b      	ldr	r3, [r3, #0]
 8021e2a:	4a3f      	ldr	r2, [pc, #252]	; (8021f28 <xTaskIncrementTick+0x150>)
 8021e2c:	6013      	str	r3, [r2, #0]
 8021e2e:	4a3f      	ldr	r2, [pc, #252]	; (8021f2c <xTaskIncrementTick+0x154>)
 8021e30:	68fb      	ldr	r3, [r7, #12]
 8021e32:	6013      	str	r3, [r2, #0]
 8021e34:	4b3e      	ldr	r3, [pc, #248]	; (8021f30 <xTaskIncrementTick+0x158>)
 8021e36:	681b      	ldr	r3, [r3, #0]
 8021e38:	3301      	adds	r3, #1
 8021e3a:	4a3d      	ldr	r2, [pc, #244]	; (8021f30 <xTaskIncrementTick+0x158>)
 8021e3c:	6013      	str	r3, [r2, #0]
 8021e3e:	f000 fb2f 	bl	80224a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8021e42:	4b3c      	ldr	r3, [pc, #240]	; (8021f34 <xTaskIncrementTick+0x15c>)
 8021e44:	681b      	ldr	r3, [r3, #0]
 8021e46:	693a      	ldr	r2, [r7, #16]
 8021e48:	429a      	cmp	r2, r3
 8021e4a:	d349      	bcc.n	8021ee0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021e4c:	4b36      	ldr	r3, [pc, #216]	; (8021f28 <xTaskIncrementTick+0x150>)
 8021e4e:	681b      	ldr	r3, [r3, #0]
 8021e50:	681b      	ldr	r3, [r3, #0]
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d104      	bne.n	8021e60 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021e56:	4b37      	ldr	r3, [pc, #220]	; (8021f34 <xTaskIncrementTick+0x15c>)
 8021e58:	f04f 32ff 	mov.w	r2, #4294967295
 8021e5c:	601a      	str	r2, [r3, #0]
					break;
 8021e5e:	e03f      	b.n	8021ee0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021e60:	4b31      	ldr	r3, [pc, #196]	; (8021f28 <xTaskIncrementTick+0x150>)
 8021e62:	681b      	ldr	r3, [r3, #0]
 8021e64:	68db      	ldr	r3, [r3, #12]
 8021e66:	68db      	ldr	r3, [r3, #12]
 8021e68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8021e6a:	68bb      	ldr	r3, [r7, #8]
 8021e6c:	685b      	ldr	r3, [r3, #4]
 8021e6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8021e70:	693a      	ldr	r2, [r7, #16]
 8021e72:	687b      	ldr	r3, [r7, #4]
 8021e74:	429a      	cmp	r2, r3
 8021e76:	d203      	bcs.n	8021e80 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8021e78:	4a2e      	ldr	r2, [pc, #184]	; (8021f34 <xTaskIncrementTick+0x15c>)
 8021e7a:	687b      	ldr	r3, [r7, #4]
 8021e7c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8021e7e:	e02f      	b.n	8021ee0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8021e80:	68bb      	ldr	r3, [r7, #8]
 8021e82:	3304      	adds	r3, #4
 8021e84:	4618      	mov	r0, r3
 8021e86:	f7fe fbc1 	bl	802060c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8021e8a:	68bb      	ldr	r3, [r7, #8]
 8021e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021e8e:	2b00      	cmp	r3, #0
 8021e90:	d004      	beq.n	8021e9c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8021e92:	68bb      	ldr	r3, [r7, #8]
 8021e94:	3318      	adds	r3, #24
 8021e96:	4618      	mov	r0, r3
 8021e98:	f7fe fbb8 	bl	802060c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8021e9c:	68bb      	ldr	r3, [r7, #8]
 8021e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ea0:	4b25      	ldr	r3, [pc, #148]	; (8021f38 <xTaskIncrementTick+0x160>)
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	429a      	cmp	r2, r3
 8021ea6:	d903      	bls.n	8021eb0 <xTaskIncrementTick+0xd8>
 8021ea8:	68bb      	ldr	r3, [r7, #8]
 8021eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021eac:	4a22      	ldr	r2, [pc, #136]	; (8021f38 <xTaskIncrementTick+0x160>)
 8021eae:	6013      	str	r3, [r2, #0]
 8021eb0:	68bb      	ldr	r3, [r7, #8]
 8021eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021eb4:	4613      	mov	r3, r2
 8021eb6:	009b      	lsls	r3, r3, #2
 8021eb8:	4413      	add	r3, r2
 8021eba:	009b      	lsls	r3, r3, #2
 8021ebc:	4a1f      	ldr	r2, [pc, #124]	; (8021f3c <xTaskIncrementTick+0x164>)
 8021ebe:	441a      	add	r2, r3
 8021ec0:	68bb      	ldr	r3, [r7, #8]
 8021ec2:	3304      	adds	r3, #4
 8021ec4:	4619      	mov	r1, r3
 8021ec6:	4610      	mov	r0, r2
 8021ec8:	f7fe fb43 	bl	8020552 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8021ecc:	68bb      	ldr	r3, [r7, #8]
 8021ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ed0:	4b1b      	ldr	r3, [pc, #108]	; (8021f40 <xTaskIncrementTick+0x168>)
 8021ed2:	681b      	ldr	r3, [r3, #0]
 8021ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021ed6:	429a      	cmp	r2, r3
 8021ed8:	d3b8      	bcc.n	8021e4c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8021eda:	2301      	movs	r3, #1
 8021edc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8021ede:	e7b5      	b.n	8021e4c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8021ee0:	4b17      	ldr	r3, [pc, #92]	; (8021f40 <xTaskIncrementTick+0x168>)
 8021ee2:	681b      	ldr	r3, [r3, #0]
 8021ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021ee6:	4915      	ldr	r1, [pc, #84]	; (8021f3c <xTaskIncrementTick+0x164>)
 8021ee8:	4613      	mov	r3, r2
 8021eea:	009b      	lsls	r3, r3, #2
 8021eec:	4413      	add	r3, r2
 8021eee:	009b      	lsls	r3, r3, #2
 8021ef0:	440b      	add	r3, r1
 8021ef2:	681b      	ldr	r3, [r3, #0]
 8021ef4:	2b01      	cmp	r3, #1
 8021ef6:	d901      	bls.n	8021efc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8021ef8:	2301      	movs	r3, #1
 8021efa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8021efc:	4b11      	ldr	r3, [pc, #68]	; (8021f44 <xTaskIncrementTick+0x16c>)
 8021efe:	681b      	ldr	r3, [r3, #0]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d007      	beq.n	8021f14 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8021f04:	2301      	movs	r3, #1
 8021f06:	617b      	str	r3, [r7, #20]
 8021f08:	e004      	b.n	8021f14 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8021f0a:	4b0f      	ldr	r3, [pc, #60]	; (8021f48 <xTaskIncrementTick+0x170>)
 8021f0c:	681b      	ldr	r3, [r3, #0]
 8021f0e:	3301      	adds	r3, #1
 8021f10:	4a0d      	ldr	r2, [pc, #52]	; (8021f48 <xTaskIncrementTick+0x170>)
 8021f12:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8021f14:	697b      	ldr	r3, [r7, #20]
}
 8021f16:	4618      	mov	r0, r3
 8021f18:	3718      	adds	r7, #24
 8021f1a:	46bd      	mov	sp, r7
 8021f1c:	bd80      	pop	{r7, pc}
 8021f1e:	bf00      	nop
 8021f20:	20002234 	.word	0x20002234
 8021f24:	20002210 	.word	0x20002210
 8021f28:	200021c4 	.word	0x200021c4
 8021f2c:	200021c8 	.word	0x200021c8
 8021f30:	20002224 	.word	0x20002224
 8021f34:	2000222c 	.word	0x2000222c
 8021f38:	20002214 	.word	0x20002214
 8021f3c:	20001d3c 	.word	0x20001d3c
 8021f40:	20001d38 	.word	0x20001d38
 8021f44:	20002220 	.word	0x20002220
 8021f48:	2000221c 	.word	0x2000221c

08021f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8021f4c:	b580      	push	{r7, lr}
 8021f4e:	b084      	sub	sp, #16
 8021f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8021f52:	4b36      	ldr	r3, [pc, #216]	; (802202c <vTaskSwitchContext+0xe0>)
 8021f54:	681b      	ldr	r3, [r3, #0]
 8021f56:	2b00      	cmp	r3, #0
 8021f58:	d003      	beq.n	8021f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8021f5a:	4b35      	ldr	r3, [pc, #212]	; (8022030 <vTaskSwitchContext+0xe4>)
 8021f5c:	2201      	movs	r2, #1
 8021f5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8021f60:	e05f      	b.n	8022022 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8021f62:	4b33      	ldr	r3, [pc, #204]	; (8022030 <vTaskSwitchContext+0xe4>)
 8021f64:	2200      	movs	r2, #0
 8021f66:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8021f68:	f7ef f875 	bl	8011056 <getRunTimeCounterValue>
 8021f6c:	4603      	mov	r3, r0
 8021f6e:	4a31      	ldr	r2, [pc, #196]	; (8022034 <vTaskSwitchContext+0xe8>)
 8021f70:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8021f72:	4b30      	ldr	r3, [pc, #192]	; (8022034 <vTaskSwitchContext+0xe8>)
 8021f74:	681a      	ldr	r2, [r3, #0]
 8021f76:	4b30      	ldr	r3, [pc, #192]	; (8022038 <vTaskSwitchContext+0xec>)
 8021f78:	681b      	ldr	r3, [r3, #0]
 8021f7a:	429a      	cmp	r2, r3
 8021f7c:	d909      	bls.n	8021f92 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8021f7e:	4b2f      	ldr	r3, [pc, #188]	; (802203c <vTaskSwitchContext+0xf0>)
 8021f80:	681b      	ldr	r3, [r3, #0]
 8021f82:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8021f84:	4a2b      	ldr	r2, [pc, #172]	; (8022034 <vTaskSwitchContext+0xe8>)
 8021f86:	6810      	ldr	r0, [r2, #0]
 8021f88:	4a2b      	ldr	r2, [pc, #172]	; (8022038 <vTaskSwitchContext+0xec>)
 8021f8a:	6812      	ldr	r2, [r2, #0]
 8021f8c:	1a82      	subs	r2, r0, r2
 8021f8e:	440a      	add	r2, r1
 8021f90:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8021f92:	4b28      	ldr	r3, [pc, #160]	; (8022034 <vTaskSwitchContext+0xe8>)
 8021f94:	681b      	ldr	r3, [r3, #0]
 8021f96:	4a28      	ldr	r2, [pc, #160]	; (8022038 <vTaskSwitchContext+0xec>)
 8021f98:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8021f9a:	4b29      	ldr	r3, [pc, #164]	; (8022040 <vTaskSwitchContext+0xf4>)
 8021f9c:	681b      	ldr	r3, [r3, #0]
 8021f9e:	60fb      	str	r3, [r7, #12]
 8021fa0:	e010      	b.n	8021fc4 <vTaskSwitchContext+0x78>
 8021fa2:	68fb      	ldr	r3, [r7, #12]
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d10a      	bne.n	8021fbe <vTaskSwitchContext+0x72>
	__asm volatile
 8021fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021fac:	f383 8811 	msr	BASEPRI, r3
 8021fb0:	f3bf 8f6f 	isb	sy
 8021fb4:	f3bf 8f4f 	dsb	sy
 8021fb8:	607b      	str	r3, [r7, #4]
}
 8021fba:	bf00      	nop
 8021fbc:	e7fe      	b.n	8021fbc <vTaskSwitchContext+0x70>
 8021fbe:	68fb      	ldr	r3, [r7, #12]
 8021fc0:	3b01      	subs	r3, #1
 8021fc2:	60fb      	str	r3, [r7, #12]
 8021fc4:	491f      	ldr	r1, [pc, #124]	; (8022044 <vTaskSwitchContext+0xf8>)
 8021fc6:	68fa      	ldr	r2, [r7, #12]
 8021fc8:	4613      	mov	r3, r2
 8021fca:	009b      	lsls	r3, r3, #2
 8021fcc:	4413      	add	r3, r2
 8021fce:	009b      	lsls	r3, r3, #2
 8021fd0:	440b      	add	r3, r1
 8021fd2:	681b      	ldr	r3, [r3, #0]
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d0e4      	beq.n	8021fa2 <vTaskSwitchContext+0x56>
 8021fd8:	68fa      	ldr	r2, [r7, #12]
 8021fda:	4613      	mov	r3, r2
 8021fdc:	009b      	lsls	r3, r3, #2
 8021fde:	4413      	add	r3, r2
 8021fe0:	009b      	lsls	r3, r3, #2
 8021fe2:	4a18      	ldr	r2, [pc, #96]	; (8022044 <vTaskSwitchContext+0xf8>)
 8021fe4:	4413      	add	r3, r2
 8021fe6:	60bb      	str	r3, [r7, #8]
 8021fe8:	68bb      	ldr	r3, [r7, #8]
 8021fea:	685b      	ldr	r3, [r3, #4]
 8021fec:	685a      	ldr	r2, [r3, #4]
 8021fee:	68bb      	ldr	r3, [r7, #8]
 8021ff0:	605a      	str	r2, [r3, #4]
 8021ff2:	68bb      	ldr	r3, [r7, #8]
 8021ff4:	685a      	ldr	r2, [r3, #4]
 8021ff6:	68bb      	ldr	r3, [r7, #8]
 8021ff8:	3308      	adds	r3, #8
 8021ffa:	429a      	cmp	r2, r3
 8021ffc:	d104      	bne.n	8022008 <vTaskSwitchContext+0xbc>
 8021ffe:	68bb      	ldr	r3, [r7, #8]
 8022000:	685b      	ldr	r3, [r3, #4]
 8022002:	685a      	ldr	r2, [r3, #4]
 8022004:	68bb      	ldr	r3, [r7, #8]
 8022006:	605a      	str	r2, [r3, #4]
 8022008:	68bb      	ldr	r3, [r7, #8]
 802200a:	685b      	ldr	r3, [r3, #4]
 802200c:	68db      	ldr	r3, [r3, #12]
 802200e:	4a0b      	ldr	r2, [pc, #44]	; (802203c <vTaskSwitchContext+0xf0>)
 8022010:	6013      	str	r3, [r2, #0]
 8022012:	4a0b      	ldr	r2, [pc, #44]	; (8022040 <vTaskSwitchContext+0xf4>)
 8022014:	68fb      	ldr	r3, [r7, #12]
 8022016:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8022018:	4b08      	ldr	r3, [pc, #32]	; (802203c <vTaskSwitchContext+0xf0>)
 802201a:	681b      	ldr	r3, [r3, #0]
 802201c:	3358      	adds	r3, #88	; 0x58
 802201e:	4a0a      	ldr	r2, [pc, #40]	; (8022048 <vTaskSwitchContext+0xfc>)
 8022020:	6013      	str	r3, [r2, #0]
}
 8022022:	bf00      	nop
 8022024:	3710      	adds	r7, #16
 8022026:	46bd      	mov	sp, r7
 8022028:	bd80      	pop	{r7, pc}
 802202a:	bf00      	nop
 802202c:	20002234 	.word	0x20002234
 8022030:	20002220 	.word	0x20002220
 8022034:	2000223c 	.word	0x2000223c
 8022038:	20002238 	.word	0x20002238
 802203c:	20001d38 	.word	0x20001d38
 8022040:	20002214 	.word	0x20002214
 8022044:	20001d3c 	.word	0x20001d3c
 8022048:	20000188 	.word	0x20000188

0802204c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 802204c:	b580      	push	{r7, lr}
 802204e:	b084      	sub	sp, #16
 8022050:	af00      	add	r7, sp, #0
 8022052:	6078      	str	r0, [r7, #4]
 8022054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	2b00      	cmp	r3, #0
 802205a:	d10a      	bne.n	8022072 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802205c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022060:	f383 8811 	msr	BASEPRI, r3
 8022064:	f3bf 8f6f 	isb	sy
 8022068:	f3bf 8f4f 	dsb	sy
 802206c:	60fb      	str	r3, [r7, #12]
}
 802206e:	bf00      	nop
 8022070:	e7fe      	b.n	8022070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022072:	4b07      	ldr	r3, [pc, #28]	; (8022090 <vTaskPlaceOnEventList+0x44>)
 8022074:	681b      	ldr	r3, [r3, #0]
 8022076:	3318      	adds	r3, #24
 8022078:	4619      	mov	r1, r3
 802207a:	6878      	ldr	r0, [r7, #4]
 802207c:	f7fe fa8d 	bl	802059a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022080:	2101      	movs	r1, #1
 8022082:	6838      	ldr	r0, [r7, #0]
 8022084:	f000 fbc6 	bl	8022814 <prvAddCurrentTaskToDelayedList>
}
 8022088:	bf00      	nop
 802208a:	3710      	adds	r7, #16
 802208c:	46bd      	mov	sp, r7
 802208e:	bd80      	pop	{r7, pc}
 8022090:	20001d38 	.word	0x20001d38

08022094 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022094:	b580      	push	{r7, lr}
 8022096:	b086      	sub	sp, #24
 8022098:	af00      	add	r7, sp, #0
 802209a:	60f8      	str	r0, [r7, #12]
 802209c:	60b9      	str	r1, [r7, #8]
 802209e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80220a0:	68fb      	ldr	r3, [r7, #12]
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	d10a      	bne.n	80220bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80220a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80220aa:	f383 8811 	msr	BASEPRI, r3
 80220ae:	f3bf 8f6f 	isb	sy
 80220b2:	f3bf 8f4f 	dsb	sy
 80220b6:	617b      	str	r3, [r7, #20]
}
 80220b8:	bf00      	nop
 80220ba:	e7fe      	b.n	80220ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80220bc:	4b0a      	ldr	r3, [pc, #40]	; (80220e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80220be:	681b      	ldr	r3, [r3, #0]
 80220c0:	3318      	adds	r3, #24
 80220c2:	4619      	mov	r1, r3
 80220c4:	68f8      	ldr	r0, [r7, #12]
 80220c6:	f7fe fa44 	bl	8020552 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80220ca:	687b      	ldr	r3, [r7, #4]
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	d002      	beq.n	80220d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80220d0:	f04f 33ff 	mov.w	r3, #4294967295
 80220d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80220d6:	6879      	ldr	r1, [r7, #4]
 80220d8:	68b8      	ldr	r0, [r7, #8]
 80220da:	f000 fb9b 	bl	8022814 <prvAddCurrentTaskToDelayedList>
	}
 80220de:	bf00      	nop
 80220e0:	3718      	adds	r7, #24
 80220e2:	46bd      	mov	sp, r7
 80220e4:	bd80      	pop	{r7, pc}
 80220e6:	bf00      	nop
 80220e8:	20001d38 	.word	0x20001d38

080220ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80220ec:	b580      	push	{r7, lr}
 80220ee:	b086      	sub	sp, #24
 80220f0:	af00      	add	r7, sp, #0
 80220f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80220f4:	687b      	ldr	r3, [r7, #4]
 80220f6:	68db      	ldr	r3, [r3, #12]
 80220f8:	68db      	ldr	r3, [r3, #12]
 80220fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80220fc:	693b      	ldr	r3, [r7, #16]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d10a      	bne.n	8022118 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8022102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022106:	f383 8811 	msr	BASEPRI, r3
 802210a:	f3bf 8f6f 	isb	sy
 802210e:	f3bf 8f4f 	dsb	sy
 8022112:	60fb      	str	r3, [r7, #12]
}
 8022114:	bf00      	nop
 8022116:	e7fe      	b.n	8022116 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8022118:	693b      	ldr	r3, [r7, #16]
 802211a:	3318      	adds	r3, #24
 802211c:	4618      	mov	r0, r3
 802211e:	f7fe fa75 	bl	802060c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022122:	4b1e      	ldr	r3, [pc, #120]	; (802219c <xTaskRemoveFromEventList+0xb0>)
 8022124:	681b      	ldr	r3, [r3, #0]
 8022126:	2b00      	cmp	r3, #0
 8022128:	d11d      	bne.n	8022166 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 802212a:	693b      	ldr	r3, [r7, #16]
 802212c:	3304      	adds	r3, #4
 802212e:	4618      	mov	r0, r3
 8022130:	f7fe fa6c 	bl	802060c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8022134:	693b      	ldr	r3, [r7, #16]
 8022136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022138:	4b19      	ldr	r3, [pc, #100]	; (80221a0 <xTaskRemoveFromEventList+0xb4>)
 802213a:	681b      	ldr	r3, [r3, #0]
 802213c:	429a      	cmp	r2, r3
 802213e:	d903      	bls.n	8022148 <xTaskRemoveFromEventList+0x5c>
 8022140:	693b      	ldr	r3, [r7, #16]
 8022142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022144:	4a16      	ldr	r2, [pc, #88]	; (80221a0 <xTaskRemoveFromEventList+0xb4>)
 8022146:	6013      	str	r3, [r2, #0]
 8022148:	693b      	ldr	r3, [r7, #16]
 802214a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802214c:	4613      	mov	r3, r2
 802214e:	009b      	lsls	r3, r3, #2
 8022150:	4413      	add	r3, r2
 8022152:	009b      	lsls	r3, r3, #2
 8022154:	4a13      	ldr	r2, [pc, #76]	; (80221a4 <xTaskRemoveFromEventList+0xb8>)
 8022156:	441a      	add	r2, r3
 8022158:	693b      	ldr	r3, [r7, #16]
 802215a:	3304      	adds	r3, #4
 802215c:	4619      	mov	r1, r3
 802215e:	4610      	mov	r0, r2
 8022160:	f7fe f9f7 	bl	8020552 <vListInsertEnd>
 8022164:	e005      	b.n	8022172 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022166:	693b      	ldr	r3, [r7, #16]
 8022168:	3318      	adds	r3, #24
 802216a:	4619      	mov	r1, r3
 802216c:	480e      	ldr	r0, [pc, #56]	; (80221a8 <xTaskRemoveFromEventList+0xbc>)
 802216e:	f7fe f9f0 	bl	8020552 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022172:	693b      	ldr	r3, [r7, #16]
 8022174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022176:	4b0d      	ldr	r3, [pc, #52]	; (80221ac <xTaskRemoveFromEventList+0xc0>)
 8022178:	681b      	ldr	r3, [r3, #0]
 802217a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802217c:	429a      	cmp	r2, r3
 802217e:	d905      	bls.n	802218c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8022180:	2301      	movs	r3, #1
 8022182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8022184:	4b0a      	ldr	r3, [pc, #40]	; (80221b0 <xTaskRemoveFromEventList+0xc4>)
 8022186:	2201      	movs	r2, #1
 8022188:	601a      	str	r2, [r3, #0]
 802218a:	e001      	b.n	8022190 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 802218c:	2300      	movs	r3, #0
 802218e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8022190:	697b      	ldr	r3, [r7, #20]
}
 8022192:	4618      	mov	r0, r3
 8022194:	3718      	adds	r7, #24
 8022196:	46bd      	mov	sp, r7
 8022198:	bd80      	pop	{r7, pc}
 802219a:	bf00      	nop
 802219c:	20002234 	.word	0x20002234
 80221a0:	20002214 	.word	0x20002214
 80221a4:	20001d3c 	.word	0x20001d3c
 80221a8:	200021cc 	.word	0x200021cc
 80221ac:	20001d38 	.word	0x20001d38
 80221b0:	20002220 	.word	0x20002220

080221b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80221b4:	b480      	push	{r7}
 80221b6:	b083      	sub	sp, #12
 80221b8:	af00      	add	r7, sp, #0
 80221ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80221bc:	4b06      	ldr	r3, [pc, #24]	; (80221d8 <vTaskInternalSetTimeOutState+0x24>)
 80221be:	681a      	ldr	r2, [r3, #0]
 80221c0:	687b      	ldr	r3, [r7, #4]
 80221c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80221c4:	4b05      	ldr	r3, [pc, #20]	; (80221dc <vTaskInternalSetTimeOutState+0x28>)
 80221c6:	681a      	ldr	r2, [r3, #0]
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	605a      	str	r2, [r3, #4]
}
 80221cc:	bf00      	nop
 80221ce:	370c      	adds	r7, #12
 80221d0:	46bd      	mov	sp, r7
 80221d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80221d6:	4770      	bx	lr
 80221d8:	20002224 	.word	0x20002224
 80221dc:	20002210 	.word	0x20002210

080221e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80221e0:	b580      	push	{r7, lr}
 80221e2:	b088      	sub	sp, #32
 80221e4:	af00      	add	r7, sp, #0
 80221e6:	6078      	str	r0, [r7, #4]
 80221e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80221ea:	687b      	ldr	r3, [r7, #4]
 80221ec:	2b00      	cmp	r3, #0
 80221ee:	d10a      	bne.n	8022206 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80221f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221f4:	f383 8811 	msr	BASEPRI, r3
 80221f8:	f3bf 8f6f 	isb	sy
 80221fc:	f3bf 8f4f 	dsb	sy
 8022200:	613b      	str	r3, [r7, #16]
}
 8022202:	bf00      	nop
 8022204:	e7fe      	b.n	8022204 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8022206:	683b      	ldr	r3, [r7, #0]
 8022208:	2b00      	cmp	r3, #0
 802220a:	d10a      	bne.n	8022222 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 802220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022210:	f383 8811 	msr	BASEPRI, r3
 8022214:	f3bf 8f6f 	isb	sy
 8022218:	f3bf 8f4f 	dsb	sy
 802221c:	60fb      	str	r3, [r7, #12]
}
 802221e:	bf00      	nop
 8022220:	e7fe      	b.n	8022220 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8022222:	f000 ffc7 	bl	80231b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8022226:	4b1d      	ldr	r3, [pc, #116]	; (802229c <xTaskCheckForTimeOut+0xbc>)
 8022228:	681b      	ldr	r3, [r3, #0]
 802222a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 802222c:	687b      	ldr	r3, [r7, #4]
 802222e:	685b      	ldr	r3, [r3, #4]
 8022230:	69ba      	ldr	r2, [r7, #24]
 8022232:	1ad3      	subs	r3, r2, r3
 8022234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8022236:	683b      	ldr	r3, [r7, #0]
 8022238:	681b      	ldr	r3, [r3, #0]
 802223a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802223e:	d102      	bne.n	8022246 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8022240:	2300      	movs	r3, #0
 8022242:	61fb      	str	r3, [r7, #28]
 8022244:	e023      	b.n	802228e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	681a      	ldr	r2, [r3, #0]
 802224a:	4b15      	ldr	r3, [pc, #84]	; (80222a0 <xTaskCheckForTimeOut+0xc0>)
 802224c:	681b      	ldr	r3, [r3, #0]
 802224e:	429a      	cmp	r2, r3
 8022250:	d007      	beq.n	8022262 <xTaskCheckForTimeOut+0x82>
 8022252:	687b      	ldr	r3, [r7, #4]
 8022254:	685b      	ldr	r3, [r3, #4]
 8022256:	69ba      	ldr	r2, [r7, #24]
 8022258:	429a      	cmp	r2, r3
 802225a:	d302      	bcc.n	8022262 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802225c:	2301      	movs	r3, #1
 802225e:	61fb      	str	r3, [r7, #28]
 8022260:	e015      	b.n	802228e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8022262:	683b      	ldr	r3, [r7, #0]
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	697a      	ldr	r2, [r7, #20]
 8022268:	429a      	cmp	r2, r3
 802226a:	d20b      	bcs.n	8022284 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802226c:	683b      	ldr	r3, [r7, #0]
 802226e:	681a      	ldr	r2, [r3, #0]
 8022270:	697b      	ldr	r3, [r7, #20]
 8022272:	1ad2      	subs	r2, r2, r3
 8022274:	683b      	ldr	r3, [r7, #0]
 8022276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022278:	6878      	ldr	r0, [r7, #4]
 802227a:	f7ff ff9b 	bl	80221b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802227e:	2300      	movs	r3, #0
 8022280:	61fb      	str	r3, [r7, #28]
 8022282:	e004      	b.n	802228e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8022284:	683b      	ldr	r3, [r7, #0]
 8022286:	2200      	movs	r2, #0
 8022288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802228a:	2301      	movs	r3, #1
 802228c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802228e:	f000 ffc1 	bl	8023214 <vPortExitCritical>

	return xReturn;
 8022292:	69fb      	ldr	r3, [r7, #28]
}
 8022294:	4618      	mov	r0, r3
 8022296:	3720      	adds	r7, #32
 8022298:	46bd      	mov	sp, r7
 802229a:	bd80      	pop	{r7, pc}
 802229c:	20002210 	.word	0x20002210
 80222a0:	20002224 	.word	0x20002224

080222a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80222a4:	b480      	push	{r7}
 80222a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80222a8:	4b03      	ldr	r3, [pc, #12]	; (80222b8 <vTaskMissedYield+0x14>)
 80222aa:	2201      	movs	r2, #1
 80222ac:	601a      	str	r2, [r3, #0]
}
 80222ae:	bf00      	nop
 80222b0:	46bd      	mov	sp, r7
 80222b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222b6:	4770      	bx	lr
 80222b8:	20002220 	.word	0x20002220

080222bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80222bc:	b580      	push	{r7, lr}
 80222be:	b082      	sub	sp, #8
 80222c0:	af00      	add	r7, sp, #0
 80222c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80222c4:	f000 f852 	bl	802236c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80222c8:	4b06      	ldr	r3, [pc, #24]	; (80222e4 <prvIdleTask+0x28>)
 80222ca:	681b      	ldr	r3, [r3, #0]
 80222cc:	2b01      	cmp	r3, #1
 80222ce:	d9f9      	bls.n	80222c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80222d0:	4b05      	ldr	r3, [pc, #20]	; (80222e8 <prvIdleTask+0x2c>)
 80222d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80222d6:	601a      	str	r2, [r3, #0]
 80222d8:	f3bf 8f4f 	dsb	sy
 80222dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80222e0:	e7f0      	b.n	80222c4 <prvIdleTask+0x8>
 80222e2:	bf00      	nop
 80222e4:	20001d3c 	.word	0x20001d3c
 80222e8:	e000ed04 	.word	0xe000ed04

080222ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80222ec:	b580      	push	{r7, lr}
 80222ee:	b082      	sub	sp, #8
 80222f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80222f2:	2300      	movs	r3, #0
 80222f4:	607b      	str	r3, [r7, #4]
 80222f6:	e00c      	b.n	8022312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80222f8:	687a      	ldr	r2, [r7, #4]
 80222fa:	4613      	mov	r3, r2
 80222fc:	009b      	lsls	r3, r3, #2
 80222fe:	4413      	add	r3, r2
 8022300:	009b      	lsls	r3, r3, #2
 8022302:	4a12      	ldr	r2, [pc, #72]	; (802234c <prvInitialiseTaskLists+0x60>)
 8022304:	4413      	add	r3, r2
 8022306:	4618      	mov	r0, r3
 8022308:	f7fe f8f6 	bl	80204f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 802230c:	687b      	ldr	r3, [r7, #4]
 802230e:	3301      	adds	r3, #1
 8022310:	607b      	str	r3, [r7, #4]
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	2b37      	cmp	r3, #55	; 0x37
 8022316:	d9ef      	bls.n	80222f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8022318:	480d      	ldr	r0, [pc, #52]	; (8022350 <prvInitialiseTaskLists+0x64>)
 802231a:	f7fe f8ed 	bl	80204f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 802231e:	480d      	ldr	r0, [pc, #52]	; (8022354 <prvInitialiseTaskLists+0x68>)
 8022320:	f7fe f8ea 	bl	80204f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8022324:	480c      	ldr	r0, [pc, #48]	; (8022358 <prvInitialiseTaskLists+0x6c>)
 8022326:	f7fe f8e7 	bl	80204f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 802232a:	480c      	ldr	r0, [pc, #48]	; (802235c <prvInitialiseTaskLists+0x70>)
 802232c:	f7fe f8e4 	bl	80204f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8022330:	480b      	ldr	r0, [pc, #44]	; (8022360 <prvInitialiseTaskLists+0x74>)
 8022332:	f7fe f8e1 	bl	80204f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8022336:	4b0b      	ldr	r3, [pc, #44]	; (8022364 <prvInitialiseTaskLists+0x78>)
 8022338:	4a05      	ldr	r2, [pc, #20]	; (8022350 <prvInitialiseTaskLists+0x64>)
 802233a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 802233c:	4b0a      	ldr	r3, [pc, #40]	; (8022368 <prvInitialiseTaskLists+0x7c>)
 802233e:	4a05      	ldr	r2, [pc, #20]	; (8022354 <prvInitialiseTaskLists+0x68>)
 8022340:	601a      	str	r2, [r3, #0]
}
 8022342:	bf00      	nop
 8022344:	3708      	adds	r7, #8
 8022346:	46bd      	mov	sp, r7
 8022348:	bd80      	pop	{r7, pc}
 802234a:	bf00      	nop
 802234c:	20001d3c 	.word	0x20001d3c
 8022350:	2000219c 	.word	0x2000219c
 8022354:	200021b0 	.word	0x200021b0
 8022358:	200021cc 	.word	0x200021cc
 802235c:	200021e0 	.word	0x200021e0
 8022360:	200021f8 	.word	0x200021f8
 8022364:	200021c4 	.word	0x200021c4
 8022368:	200021c8 	.word	0x200021c8

0802236c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802236c:	b580      	push	{r7, lr}
 802236e:	b082      	sub	sp, #8
 8022370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022372:	e019      	b.n	80223a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8022374:	f000 ff1e 	bl	80231b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022378:	4b10      	ldr	r3, [pc, #64]	; (80223bc <prvCheckTasksWaitingTermination+0x50>)
 802237a:	68db      	ldr	r3, [r3, #12]
 802237c:	68db      	ldr	r3, [r3, #12]
 802237e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022380:	687b      	ldr	r3, [r7, #4]
 8022382:	3304      	adds	r3, #4
 8022384:	4618      	mov	r0, r3
 8022386:	f7fe f941 	bl	802060c <uxListRemove>
				--uxCurrentNumberOfTasks;
 802238a:	4b0d      	ldr	r3, [pc, #52]	; (80223c0 <prvCheckTasksWaitingTermination+0x54>)
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	3b01      	subs	r3, #1
 8022390:	4a0b      	ldr	r2, [pc, #44]	; (80223c0 <prvCheckTasksWaitingTermination+0x54>)
 8022392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8022394:	4b0b      	ldr	r3, [pc, #44]	; (80223c4 <prvCheckTasksWaitingTermination+0x58>)
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	3b01      	subs	r3, #1
 802239a:	4a0a      	ldr	r2, [pc, #40]	; (80223c4 <prvCheckTasksWaitingTermination+0x58>)
 802239c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802239e:	f000 ff39 	bl	8023214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80223a2:	6878      	ldr	r0, [r7, #4]
 80223a4:	f000 f848 	bl	8022438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80223a8:	4b06      	ldr	r3, [pc, #24]	; (80223c4 <prvCheckTasksWaitingTermination+0x58>)
 80223aa:	681b      	ldr	r3, [r3, #0]
 80223ac:	2b00      	cmp	r3, #0
 80223ae:	d1e1      	bne.n	8022374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80223b0:	bf00      	nop
 80223b2:	bf00      	nop
 80223b4:	3708      	adds	r7, #8
 80223b6:	46bd      	mov	sp, r7
 80223b8:	bd80      	pop	{r7, pc}
 80223ba:	bf00      	nop
 80223bc:	200021e0 	.word	0x200021e0
 80223c0:	2000220c 	.word	0x2000220c
 80223c4:	200021f4 	.word	0x200021f4

080223c8 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80223c8:	b480      	push	{r7}
 80223ca:	b085      	sub	sp, #20
 80223cc:	af00      	add	r7, sp, #0
 80223ce:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80223d0:	2300      	movs	r3, #0
 80223d2:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80223d4:	e005      	b.n	80223e2 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80223d6:	687b      	ldr	r3, [r7, #4]
 80223d8:	3301      	adds	r3, #1
 80223da:	607b      	str	r3, [r7, #4]
			ulCount++;
 80223dc:	68fb      	ldr	r3, [r7, #12]
 80223de:	3301      	adds	r3, #1
 80223e0:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80223e2:	687b      	ldr	r3, [r7, #4]
 80223e4:	781b      	ldrb	r3, [r3, #0]
 80223e6:	2ba5      	cmp	r3, #165	; 0xa5
 80223e8:	d0f5      	beq.n	80223d6 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80223ea:	68fb      	ldr	r3, [r7, #12]
 80223ec:	089b      	lsrs	r3, r3, #2
 80223ee:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80223f0:	68fb      	ldr	r3, [r7, #12]
 80223f2:	b29b      	uxth	r3, r3
	}
 80223f4:	4618      	mov	r0, r3
 80223f6:	3714      	adds	r7, #20
 80223f8:	46bd      	mov	sp, r7
 80223fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223fe:	4770      	bx	lr

08022400 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8022400:	b580      	push	{r7, lr}
 8022402:	b086      	sub	sp, #24
 8022404:	af00      	add	r7, sp, #0
 8022406:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8022408:	687b      	ldr	r3, [r7, #4]
 802240a:	2b00      	cmp	r3, #0
 802240c:	d102      	bne.n	8022414 <uxTaskGetStackHighWaterMark+0x14>
 802240e:	4b09      	ldr	r3, [pc, #36]	; (8022434 <uxTaskGetStackHighWaterMark+0x34>)
 8022410:	681b      	ldr	r3, [r3, #0]
 8022412:	e000      	b.n	8022416 <uxTaskGetStackHighWaterMark+0x16>
 8022414:	687b      	ldr	r3, [r7, #4]
 8022416:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8022418:	697b      	ldr	r3, [r7, #20]
 802241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802241c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 802241e:	6938      	ldr	r0, [r7, #16]
 8022420:	f7ff ffd2 	bl	80223c8 <prvTaskCheckFreeStackSpace>
 8022424:	4603      	mov	r3, r0
 8022426:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8022428:	68fb      	ldr	r3, [r7, #12]
	}
 802242a:	4618      	mov	r0, r3
 802242c:	3718      	adds	r7, #24
 802242e:	46bd      	mov	sp, r7
 8022430:	bd80      	pop	{r7, pc}
 8022432:	bf00      	nop
 8022434:	20001d38 	.word	0x20001d38

08022438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8022438:	b580      	push	{r7, lr}
 802243a:	b084      	sub	sp, #16
 802243c:	af00      	add	r7, sp, #0
 802243e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8022440:	687b      	ldr	r3, [r7, #4]
 8022442:	3358      	adds	r3, #88	; 0x58
 8022444:	4618      	mov	r0, r3
 8022446:	f00b fa5d 	bl	802d904 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 802244a:	687b      	ldr	r3, [r7, #4]
 802244c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022450:	2b00      	cmp	r3, #0
 8022452:	d108      	bne.n	8022466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8022454:	687b      	ldr	r3, [r7, #4]
 8022456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022458:	4618      	mov	r0, r3
 802245a:	f001 f813 	bl	8023484 <vPortFree>
				vPortFree( pxTCB );
 802245e:	6878      	ldr	r0, [r7, #4]
 8022460:	f001 f810 	bl	8023484 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8022464:	e018      	b.n	8022498 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8022466:	687b      	ldr	r3, [r7, #4]
 8022468:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802246c:	2b01      	cmp	r3, #1
 802246e:	d103      	bne.n	8022478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022470:	6878      	ldr	r0, [r7, #4]
 8022472:	f001 f807 	bl	8023484 <vPortFree>
	}
 8022476:	e00f      	b.n	8022498 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802247e:	2b02      	cmp	r3, #2
 8022480:	d00a      	beq.n	8022498 <prvDeleteTCB+0x60>
	__asm volatile
 8022482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022486:	f383 8811 	msr	BASEPRI, r3
 802248a:	f3bf 8f6f 	isb	sy
 802248e:	f3bf 8f4f 	dsb	sy
 8022492:	60fb      	str	r3, [r7, #12]
}
 8022494:	bf00      	nop
 8022496:	e7fe      	b.n	8022496 <prvDeleteTCB+0x5e>
	}
 8022498:	bf00      	nop
 802249a:	3710      	adds	r7, #16
 802249c:	46bd      	mov	sp, r7
 802249e:	bd80      	pop	{r7, pc}

080224a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80224a0:	b480      	push	{r7}
 80224a2:	b083      	sub	sp, #12
 80224a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80224a6:	4b0c      	ldr	r3, [pc, #48]	; (80224d8 <prvResetNextTaskUnblockTime+0x38>)
 80224a8:	681b      	ldr	r3, [r3, #0]
 80224aa:	681b      	ldr	r3, [r3, #0]
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	d104      	bne.n	80224ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80224b0:	4b0a      	ldr	r3, [pc, #40]	; (80224dc <prvResetNextTaskUnblockTime+0x3c>)
 80224b2:	f04f 32ff 	mov.w	r2, #4294967295
 80224b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80224b8:	e008      	b.n	80224cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80224ba:	4b07      	ldr	r3, [pc, #28]	; (80224d8 <prvResetNextTaskUnblockTime+0x38>)
 80224bc:	681b      	ldr	r3, [r3, #0]
 80224be:	68db      	ldr	r3, [r3, #12]
 80224c0:	68db      	ldr	r3, [r3, #12]
 80224c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80224c4:	687b      	ldr	r3, [r7, #4]
 80224c6:	685b      	ldr	r3, [r3, #4]
 80224c8:	4a04      	ldr	r2, [pc, #16]	; (80224dc <prvResetNextTaskUnblockTime+0x3c>)
 80224ca:	6013      	str	r3, [r2, #0]
}
 80224cc:	bf00      	nop
 80224ce:	370c      	adds	r7, #12
 80224d0:	46bd      	mov	sp, r7
 80224d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224d6:	4770      	bx	lr
 80224d8:	200021c4 	.word	0x200021c4
 80224dc:	2000222c 	.word	0x2000222c

080224e0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80224e0:	b480      	push	{r7}
 80224e2:	b083      	sub	sp, #12
 80224e4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80224e6:	4b05      	ldr	r3, [pc, #20]	; (80224fc <xTaskGetCurrentTaskHandle+0x1c>)
 80224e8:	681b      	ldr	r3, [r3, #0]
 80224ea:	607b      	str	r3, [r7, #4]

		return xReturn;
 80224ec:	687b      	ldr	r3, [r7, #4]
	}
 80224ee:	4618      	mov	r0, r3
 80224f0:	370c      	adds	r7, #12
 80224f2:	46bd      	mov	sp, r7
 80224f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224f8:	4770      	bx	lr
 80224fa:	bf00      	nop
 80224fc:	20001d38 	.word	0x20001d38

08022500 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8022500:	b480      	push	{r7}
 8022502:	b083      	sub	sp, #12
 8022504:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8022506:	4b0b      	ldr	r3, [pc, #44]	; (8022534 <xTaskGetSchedulerState+0x34>)
 8022508:	681b      	ldr	r3, [r3, #0]
 802250a:	2b00      	cmp	r3, #0
 802250c:	d102      	bne.n	8022514 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 802250e:	2301      	movs	r3, #1
 8022510:	607b      	str	r3, [r7, #4]
 8022512:	e008      	b.n	8022526 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022514:	4b08      	ldr	r3, [pc, #32]	; (8022538 <xTaskGetSchedulerState+0x38>)
 8022516:	681b      	ldr	r3, [r3, #0]
 8022518:	2b00      	cmp	r3, #0
 802251a:	d102      	bne.n	8022522 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 802251c:	2302      	movs	r3, #2
 802251e:	607b      	str	r3, [r7, #4]
 8022520:	e001      	b.n	8022526 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8022522:	2300      	movs	r3, #0
 8022524:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8022526:	687b      	ldr	r3, [r7, #4]
	}
 8022528:	4618      	mov	r0, r3
 802252a:	370c      	adds	r7, #12
 802252c:	46bd      	mov	sp, r7
 802252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022532:	4770      	bx	lr
 8022534:	20002218 	.word	0x20002218
 8022538:	20002234 	.word	0x20002234

0802253c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 802253c:	b580      	push	{r7, lr}
 802253e:	b084      	sub	sp, #16
 8022540:	af00      	add	r7, sp, #0
 8022542:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8022544:	687b      	ldr	r3, [r7, #4]
 8022546:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8022548:	2300      	movs	r3, #0
 802254a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 802254c:	687b      	ldr	r3, [r7, #4]
 802254e:	2b00      	cmp	r3, #0
 8022550:	d051      	beq.n	80225f6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8022552:	68bb      	ldr	r3, [r7, #8]
 8022554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022556:	4b2a      	ldr	r3, [pc, #168]	; (8022600 <xTaskPriorityInherit+0xc4>)
 8022558:	681b      	ldr	r3, [r3, #0]
 802255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802255c:	429a      	cmp	r2, r3
 802255e:	d241      	bcs.n	80225e4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022560:	68bb      	ldr	r3, [r7, #8]
 8022562:	699b      	ldr	r3, [r3, #24]
 8022564:	2b00      	cmp	r3, #0
 8022566:	db06      	blt.n	8022576 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022568:	4b25      	ldr	r3, [pc, #148]	; (8022600 <xTaskPriorityInherit+0xc4>)
 802256a:	681b      	ldr	r3, [r3, #0]
 802256c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802256e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022572:	68bb      	ldr	r3, [r7, #8]
 8022574:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8022576:	68bb      	ldr	r3, [r7, #8]
 8022578:	6959      	ldr	r1, [r3, #20]
 802257a:	68bb      	ldr	r3, [r7, #8]
 802257c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802257e:	4613      	mov	r3, r2
 8022580:	009b      	lsls	r3, r3, #2
 8022582:	4413      	add	r3, r2
 8022584:	009b      	lsls	r3, r3, #2
 8022586:	4a1f      	ldr	r2, [pc, #124]	; (8022604 <xTaskPriorityInherit+0xc8>)
 8022588:	4413      	add	r3, r2
 802258a:	4299      	cmp	r1, r3
 802258c:	d122      	bne.n	80225d4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802258e:	68bb      	ldr	r3, [r7, #8]
 8022590:	3304      	adds	r3, #4
 8022592:	4618      	mov	r0, r3
 8022594:	f7fe f83a 	bl	802060c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022598:	4b19      	ldr	r3, [pc, #100]	; (8022600 <xTaskPriorityInherit+0xc4>)
 802259a:	681b      	ldr	r3, [r3, #0]
 802259c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802259e:	68bb      	ldr	r3, [r7, #8]
 80225a0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80225a2:	68bb      	ldr	r3, [r7, #8]
 80225a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225a6:	4b18      	ldr	r3, [pc, #96]	; (8022608 <xTaskPriorityInherit+0xcc>)
 80225a8:	681b      	ldr	r3, [r3, #0]
 80225aa:	429a      	cmp	r2, r3
 80225ac:	d903      	bls.n	80225b6 <xTaskPriorityInherit+0x7a>
 80225ae:	68bb      	ldr	r3, [r7, #8]
 80225b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225b2:	4a15      	ldr	r2, [pc, #84]	; (8022608 <xTaskPriorityInherit+0xcc>)
 80225b4:	6013      	str	r3, [r2, #0]
 80225b6:	68bb      	ldr	r3, [r7, #8]
 80225b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225ba:	4613      	mov	r3, r2
 80225bc:	009b      	lsls	r3, r3, #2
 80225be:	4413      	add	r3, r2
 80225c0:	009b      	lsls	r3, r3, #2
 80225c2:	4a10      	ldr	r2, [pc, #64]	; (8022604 <xTaskPriorityInherit+0xc8>)
 80225c4:	441a      	add	r2, r3
 80225c6:	68bb      	ldr	r3, [r7, #8]
 80225c8:	3304      	adds	r3, #4
 80225ca:	4619      	mov	r1, r3
 80225cc:	4610      	mov	r0, r2
 80225ce:	f7fd ffc0 	bl	8020552 <vListInsertEnd>
 80225d2:	e004      	b.n	80225de <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80225d4:	4b0a      	ldr	r3, [pc, #40]	; (8022600 <xTaskPriorityInherit+0xc4>)
 80225d6:	681b      	ldr	r3, [r3, #0]
 80225d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80225da:	68bb      	ldr	r3, [r7, #8]
 80225dc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80225de:	2301      	movs	r3, #1
 80225e0:	60fb      	str	r3, [r7, #12]
 80225e2:	e008      	b.n	80225f6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80225e4:	68bb      	ldr	r3, [r7, #8]
 80225e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80225e8:	4b05      	ldr	r3, [pc, #20]	; (8022600 <xTaskPriorityInherit+0xc4>)
 80225ea:	681b      	ldr	r3, [r3, #0]
 80225ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80225ee:	429a      	cmp	r2, r3
 80225f0:	d201      	bcs.n	80225f6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80225f2:	2301      	movs	r3, #1
 80225f4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80225f6:	68fb      	ldr	r3, [r7, #12]
	}
 80225f8:	4618      	mov	r0, r3
 80225fa:	3710      	adds	r7, #16
 80225fc:	46bd      	mov	sp, r7
 80225fe:	bd80      	pop	{r7, pc}
 8022600:	20001d38 	.word	0x20001d38
 8022604:	20001d3c 	.word	0x20001d3c
 8022608:	20002214 	.word	0x20002214

0802260c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 802260c:	b580      	push	{r7, lr}
 802260e:	b086      	sub	sp, #24
 8022610:	af00      	add	r7, sp, #0
 8022612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8022614:	687b      	ldr	r3, [r7, #4]
 8022616:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8022618:	2300      	movs	r3, #0
 802261a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 802261c:	687b      	ldr	r3, [r7, #4]
 802261e:	2b00      	cmp	r3, #0
 8022620:	d056      	beq.n	80226d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8022622:	4b2e      	ldr	r3, [pc, #184]	; (80226dc <xTaskPriorityDisinherit+0xd0>)
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	693a      	ldr	r2, [r7, #16]
 8022628:	429a      	cmp	r2, r3
 802262a:	d00a      	beq.n	8022642 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 802262c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022630:	f383 8811 	msr	BASEPRI, r3
 8022634:	f3bf 8f6f 	isb	sy
 8022638:	f3bf 8f4f 	dsb	sy
 802263c:	60fb      	str	r3, [r7, #12]
}
 802263e:	bf00      	nop
 8022640:	e7fe      	b.n	8022640 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8022642:	693b      	ldr	r3, [r7, #16]
 8022644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022646:	2b00      	cmp	r3, #0
 8022648:	d10a      	bne.n	8022660 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 802264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802264e:	f383 8811 	msr	BASEPRI, r3
 8022652:	f3bf 8f6f 	isb	sy
 8022656:	f3bf 8f4f 	dsb	sy
 802265a:	60bb      	str	r3, [r7, #8]
}
 802265c:	bf00      	nop
 802265e:	e7fe      	b.n	802265e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8022660:	693b      	ldr	r3, [r7, #16]
 8022662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022664:	1e5a      	subs	r2, r3, #1
 8022666:	693b      	ldr	r3, [r7, #16]
 8022668:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 802266a:	693b      	ldr	r3, [r7, #16]
 802266c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802266e:	693b      	ldr	r3, [r7, #16]
 8022670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022672:	429a      	cmp	r2, r3
 8022674:	d02c      	beq.n	80226d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8022676:	693b      	ldr	r3, [r7, #16]
 8022678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802267a:	2b00      	cmp	r3, #0
 802267c:	d128      	bne.n	80226d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802267e:	693b      	ldr	r3, [r7, #16]
 8022680:	3304      	adds	r3, #4
 8022682:	4618      	mov	r0, r3
 8022684:	f7fd ffc2 	bl	802060c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8022688:	693b      	ldr	r3, [r7, #16]
 802268a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802268c:	693b      	ldr	r3, [r7, #16]
 802268e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022690:	693b      	ldr	r3, [r7, #16]
 8022692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022694:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022698:	693b      	ldr	r3, [r7, #16]
 802269a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 802269c:	693b      	ldr	r3, [r7, #16]
 802269e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80226a0:	4b0f      	ldr	r3, [pc, #60]	; (80226e0 <xTaskPriorityDisinherit+0xd4>)
 80226a2:	681b      	ldr	r3, [r3, #0]
 80226a4:	429a      	cmp	r2, r3
 80226a6:	d903      	bls.n	80226b0 <xTaskPriorityDisinherit+0xa4>
 80226a8:	693b      	ldr	r3, [r7, #16]
 80226aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80226ac:	4a0c      	ldr	r2, [pc, #48]	; (80226e0 <xTaskPriorityDisinherit+0xd4>)
 80226ae:	6013      	str	r3, [r2, #0]
 80226b0:	693b      	ldr	r3, [r7, #16]
 80226b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80226b4:	4613      	mov	r3, r2
 80226b6:	009b      	lsls	r3, r3, #2
 80226b8:	4413      	add	r3, r2
 80226ba:	009b      	lsls	r3, r3, #2
 80226bc:	4a09      	ldr	r2, [pc, #36]	; (80226e4 <xTaskPriorityDisinherit+0xd8>)
 80226be:	441a      	add	r2, r3
 80226c0:	693b      	ldr	r3, [r7, #16]
 80226c2:	3304      	adds	r3, #4
 80226c4:	4619      	mov	r1, r3
 80226c6:	4610      	mov	r0, r2
 80226c8:	f7fd ff43 	bl	8020552 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80226cc:	2301      	movs	r3, #1
 80226ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80226d0:	697b      	ldr	r3, [r7, #20]
	}
 80226d2:	4618      	mov	r0, r3
 80226d4:	3718      	adds	r7, #24
 80226d6:	46bd      	mov	sp, r7
 80226d8:	bd80      	pop	{r7, pc}
 80226da:	bf00      	nop
 80226dc:	20001d38 	.word	0x20001d38
 80226e0:	20002214 	.word	0x20002214
 80226e4:	20001d3c 	.word	0x20001d3c

080226e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80226e8:	b580      	push	{r7, lr}
 80226ea:	b088      	sub	sp, #32
 80226ec:	af00      	add	r7, sp, #0
 80226ee:	6078      	str	r0, [r7, #4]
 80226f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80226f2:	687b      	ldr	r3, [r7, #4]
 80226f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80226f6:	2301      	movs	r3, #1
 80226f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	2b00      	cmp	r3, #0
 80226fe:	d06a      	beq.n	80227d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8022700:	69bb      	ldr	r3, [r7, #24]
 8022702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022704:	2b00      	cmp	r3, #0
 8022706:	d10a      	bne.n	802271e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8022708:	f04f 0350 	mov.w	r3, #80	; 0x50
 802270c:	f383 8811 	msr	BASEPRI, r3
 8022710:	f3bf 8f6f 	isb	sy
 8022714:	f3bf 8f4f 	dsb	sy
 8022718:	60fb      	str	r3, [r7, #12]
}
 802271a:	bf00      	nop
 802271c:	e7fe      	b.n	802271c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 802271e:	69bb      	ldr	r3, [r7, #24]
 8022720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022722:	683a      	ldr	r2, [r7, #0]
 8022724:	429a      	cmp	r2, r3
 8022726:	d902      	bls.n	802272e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8022728:	683b      	ldr	r3, [r7, #0]
 802272a:	61fb      	str	r3, [r7, #28]
 802272c:	e002      	b.n	8022734 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 802272e:	69bb      	ldr	r3, [r7, #24]
 8022730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022732:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8022734:	69bb      	ldr	r3, [r7, #24]
 8022736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022738:	69fa      	ldr	r2, [r7, #28]
 802273a:	429a      	cmp	r2, r3
 802273c:	d04b      	beq.n	80227d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 802273e:	69bb      	ldr	r3, [r7, #24]
 8022740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022742:	697a      	ldr	r2, [r7, #20]
 8022744:	429a      	cmp	r2, r3
 8022746:	d146      	bne.n	80227d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8022748:	4b25      	ldr	r3, [pc, #148]	; (80227e0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 802274a:	681b      	ldr	r3, [r3, #0]
 802274c:	69ba      	ldr	r2, [r7, #24]
 802274e:	429a      	cmp	r2, r3
 8022750:	d10a      	bne.n	8022768 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8022752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022756:	f383 8811 	msr	BASEPRI, r3
 802275a:	f3bf 8f6f 	isb	sy
 802275e:	f3bf 8f4f 	dsb	sy
 8022762:	60bb      	str	r3, [r7, #8]
}
 8022764:	bf00      	nop
 8022766:	e7fe      	b.n	8022766 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8022768:	69bb      	ldr	r3, [r7, #24]
 802276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802276c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 802276e:	69bb      	ldr	r3, [r7, #24]
 8022770:	69fa      	ldr	r2, [r7, #28]
 8022772:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022774:	69bb      	ldr	r3, [r7, #24]
 8022776:	699b      	ldr	r3, [r3, #24]
 8022778:	2b00      	cmp	r3, #0
 802277a:	db04      	blt.n	8022786 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 802277c:	69fb      	ldr	r3, [r7, #28]
 802277e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022782:	69bb      	ldr	r3, [r7, #24]
 8022784:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8022786:	69bb      	ldr	r3, [r7, #24]
 8022788:	6959      	ldr	r1, [r3, #20]
 802278a:	693a      	ldr	r2, [r7, #16]
 802278c:	4613      	mov	r3, r2
 802278e:	009b      	lsls	r3, r3, #2
 8022790:	4413      	add	r3, r2
 8022792:	009b      	lsls	r3, r3, #2
 8022794:	4a13      	ldr	r2, [pc, #76]	; (80227e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022796:	4413      	add	r3, r2
 8022798:	4299      	cmp	r1, r3
 802279a:	d11c      	bne.n	80227d6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802279c:	69bb      	ldr	r3, [r7, #24]
 802279e:	3304      	adds	r3, #4
 80227a0:	4618      	mov	r0, r3
 80227a2:	f7fd ff33 	bl	802060c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80227a6:	69bb      	ldr	r3, [r7, #24]
 80227a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227aa:	4b0f      	ldr	r3, [pc, #60]	; (80227e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80227ac:	681b      	ldr	r3, [r3, #0]
 80227ae:	429a      	cmp	r2, r3
 80227b0:	d903      	bls.n	80227ba <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80227b2:	69bb      	ldr	r3, [r7, #24]
 80227b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80227b6:	4a0c      	ldr	r2, [pc, #48]	; (80227e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80227b8:	6013      	str	r3, [r2, #0]
 80227ba:	69bb      	ldr	r3, [r7, #24]
 80227bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80227be:	4613      	mov	r3, r2
 80227c0:	009b      	lsls	r3, r3, #2
 80227c2:	4413      	add	r3, r2
 80227c4:	009b      	lsls	r3, r3, #2
 80227c6:	4a07      	ldr	r2, [pc, #28]	; (80227e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80227c8:	441a      	add	r2, r3
 80227ca:	69bb      	ldr	r3, [r7, #24]
 80227cc:	3304      	adds	r3, #4
 80227ce:	4619      	mov	r1, r3
 80227d0:	4610      	mov	r0, r2
 80227d2:	f7fd febe 	bl	8020552 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80227d6:	bf00      	nop
 80227d8:	3720      	adds	r7, #32
 80227da:	46bd      	mov	sp, r7
 80227dc:	bd80      	pop	{r7, pc}
 80227de:	bf00      	nop
 80227e0:	20001d38 	.word	0x20001d38
 80227e4:	20001d3c 	.word	0x20001d3c
 80227e8:	20002214 	.word	0x20002214

080227ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80227ec:	b480      	push	{r7}
 80227ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80227f0:	4b07      	ldr	r3, [pc, #28]	; (8022810 <pvTaskIncrementMutexHeldCount+0x24>)
 80227f2:	681b      	ldr	r3, [r3, #0]
 80227f4:	2b00      	cmp	r3, #0
 80227f6:	d004      	beq.n	8022802 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80227f8:	4b05      	ldr	r3, [pc, #20]	; (8022810 <pvTaskIncrementMutexHeldCount+0x24>)
 80227fa:	681b      	ldr	r3, [r3, #0]
 80227fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80227fe:	3201      	adds	r2, #1
 8022800:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8022802:	4b03      	ldr	r3, [pc, #12]	; (8022810 <pvTaskIncrementMutexHeldCount+0x24>)
 8022804:	681b      	ldr	r3, [r3, #0]
	}
 8022806:	4618      	mov	r0, r3
 8022808:	46bd      	mov	sp, r7
 802280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802280e:	4770      	bx	lr
 8022810:	20001d38 	.word	0x20001d38

08022814 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022814:	b580      	push	{r7, lr}
 8022816:	b084      	sub	sp, #16
 8022818:	af00      	add	r7, sp, #0
 802281a:	6078      	str	r0, [r7, #4]
 802281c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 802281e:	4b21      	ldr	r3, [pc, #132]	; (80228a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8022820:	681b      	ldr	r3, [r3, #0]
 8022822:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022824:	4b20      	ldr	r3, [pc, #128]	; (80228a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8022826:	681b      	ldr	r3, [r3, #0]
 8022828:	3304      	adds	r3, #4
 802282a:	4618      	mov	r0, r3
 802282c:	f7fd feee 	bl	802060c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022830:	687b      	ldr	r3, [r7, #4]
 8022832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022836:	d10a      	bne.n	802284e <prvAddCurrentTaskToDelayedList+0x3a>
 8022838:	683b      	ldr	r3, [r7, #0]
 802283a:	2b00      	cmp	r3, #0
 802283c:	d007      	beq.n	802284e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802283e:	4b1a      	ldr	r3, [pc, #104]	; (80228a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8022840:	681b      	ldr	r3, [r3, #0]
 8022842:	3304      	adds	r3, #4
 8022844:	4619      	mov	r1, r3
 8022846:	4819      	ldr	r0, [pc, #100]	; (80228ac <prvAddCurrentTaskToDelayedList+0x98>)
 8022848:	f7fd fe83 	bl	8020552 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 802284c:	e026      	b.n	802289c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 802284e:	68fa      	ldr	r2, [r7, #12]
 8022850:	687b      	ldr	r3, [r7, #4]
 8022852:	4413      	add	r3, r2
 8022854:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022856:	4b14      	ldr	r3, [pc, #80]	; (80228a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	68ba      	ldr	r2, [r7, #8]
 802285c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 802285e:	68ba      	ldr	r2, [r7, #8]
 8022860:	68fb      	ldr	r3, [r7, #12]
 8022862:	429a      	cmp	r2, r3
 8022864:	d209      	bcs.n	802287a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022866:	4b12      	ldr	r3, [pc, #72]	; (80228b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022868:	681a      	ldr	r2, [r3, #0]
 802286a:	4b0f      	ldr	r3, [pc, #60]	; (80228a8 <prvAddCurrentTaskToDelayedList+0x94>)
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	3304      	adds	r3, #4
 8022870:	4619      	mov	r1, r3
 8022872:	4610      	mov	r0, r2
 8022874:	f7fd fe91 	bl	802059a <vListInsert>
}
 8022878:	e010      	b.n	802289c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 802287a:	4b0e      	ldr	r3, [pc, #56]	; (80228b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 802287c:	681a      	ldr	r2, [r3, #0]
 802287e:	4b0a      	ldr	r3, [pc, #40]	; (80228a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8022880:	681b      	ldr	r3, [r3, #0]
 8022882:	3304      	adds	r3, #4
 8022884:	4619      	mov	r1, r3
 8022886:	4610      	mov	r0, r2
 8022888:	f7fd fe87 	bl	802059a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 802288c:	4b0a      	ldr	r3, [pc, #40]	; (80228b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	68ba      	ldr	r2, [r7, #8]
 8022892:	429a      	cmp	r2, r3
 8022894:	d202      	bcs.n	802289c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8022896:	4a08      	ldr	r2, [pc, #32]	; (80228b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022898:	68bb      	ldr	r3, [r7, #8]
 802289a:	6013      	str	r3, [r2, #0]
}
 802289c:	bf00      	nop
 802289e:	3710      	adds	r7, #16
 80228a0:	46bd      	mov	sp, r7
 80228a2:	bd80      	pop	{r7, pc}
 80228a4:	20002210 	.word	0x20002210
 80228a8:	20001d38 	.word	0x20001d38
 80228ac:	200021f8 	.word	0x200021f8
 80228b0:	200021c8 	.word	0x200021c8
 80228b4:	200021c4 	.word	0x200021c4
 80228b8:	2000222c 	.word	0x2000222c

080228bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80228bc:	b580      	push	{r7, lr}
 80228be:	b08a      	sub	sp, #40	; 0x28
 80228c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80228c2:	2300      	movs	r3, #0
 80228c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80228c6:	f000 fb07 	bl	8022ed8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80228ca:	4b1c      	ldr	r3, [pc, #112]	; (802293c <xTimerCreateTimerTask+0x80>)
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d021      	beq.n	8022916 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80228d2:	2300      	movs	r3, #0
 80228d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80228d6:	2300      	movs	r3, #0
 80228d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80228da:	1d3a      	adds	r2, r7, #4
 80228dc:	f107 0108 	add.w	r1, r7, #8
 80228e0:	f107 030c 	add.w	r3, r7, #12
 80228e4:	4618      	mov	r0, r3
 80228e6:	f7fd fded 	bl	80204c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80228ea:	6879      	ldr	r1, [r7, #4]
 80228ec:	68bb      	ldr	r3, [r7, #8]
 80228ee:	68fa      	ldr	r2, [r7, #12]
 80228f0:	9202      	str	r2, [sp, #8]
 80228f2:	9301      	str	r3, [sp, #4]
 80228f4:	2302      	movs	r3, #2
 80228f6:	9300      	str	r3, [sp, #0]
 80228f8:	2300      	movs	r3, #0
 80228fa:	460a      	mov	r2, r1
 80228fc:	4910      	ldr	r1, [pc, #64]	; (8022940 <xTimerCreateTimerTask+0x84>)
 80228fe:	4811      	ldr	r0, [pc, #68]	; (8022944 <xTimerCreateTimerTask+0x88>)
 8022900:	f7fe ff4c 	bl	802179c <xTaskCreateStatic>
 8022904:	4603      	mov	r3, r0
 8022906:	4a10      	ldr	r2, [pc, #64]	; (8022948 <xTimerCreateTimerTask+0x8c>)
 8022908:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 802290a:	4b0f      	ldr	r3, [pc, #60]	; (8022948 <xTimerCreateTimerTask+0x8c>)
 802290c:	681b      	ldr	r3, [r3, #0]
 802290e:	2b00      	cmp	r3, #0
 8022910:	d001      	beq.n	8022916 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8022912:	2301      	movs	r3, #1
 8022914:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8022916:	697b      	ldr	r3, [r7, #20]
 8022918:	2b00      	cmp	r3, #0
 802291a:	d10a      	bne.n	8022932 <xTimerCreateTimerTask+0x76>
	__asm volatile
 802291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022920:	f383 8811 	msr	BASEPRI, r3
 8022924:	f3bf 8f6f 	isb	sy
 8022928:	f3bf 8f4f 	dsb	sy
 802292c:	613b      	str	r3, [r7, #16]
}
 802292e:	bf00      	nop
 8022930:	e7fe      	b.n	8022930 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8022932:	697b      	ldr	r3, [r7, #20]
}
 8022934:	4618      	mov	r0, r3
 8022936:	3718      	adds	r7, #24
 8022938:	46bd      	mov	sp, r7
 802293a:	bd80      	pop	{r7, pc}
 802293c:	20002270 	.word	0x20002270
 8022940:	08033328 	.word	0x08033328
 8022944:	08022a81 	.word	0x08022a81
 8022948:	20002274 	.word	0x20002274

0802294c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 802294c:	b580      	push	{r7, lr}
 802294e:	b08a      	sub	sp, #40	; 0x28
 8022950:	af00      	add	r7, sp, #0
 8022952:	60f8      	str	r0, [r7, #12]
 8022954:	60b9      	str	r1, [r7, #8]
 8022956:	607a      	str	r2, [r7, #4]
 8022958:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 802295a:	2300      	movs	r3, #0
 802295c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 802295e:	68fb      	ldr	r3, [r7, #12]
 8022960:	2b00      	cmp	r3, #0
 8022962:	d10a      	bne.n	802297a <xTimerGenericCommand+0x2e>
	__asm volatile
 8022964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022968:	f383 8811 	msr	BASEPRI, r3
 802296c:	f3bf 8f6f 	isb	sy
 8022970:	f3bf 8f4f 	dsb	sy
 8022974:	623b      	str	r3, [r7, #32]
}
 8022976:	bf00      	nop
 8022978:	e7fe      	b.n	8022978 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 802297a:	4b1a      	ldr	r3, [pc, #104]	; (80229e4 <xTimerGenericCommand+0x98>)
 802297c:	681b      	ldr	r3, [r3, #0]
 802297e:	2b00      	cmp	r3, #0
 8022980:	d02a      	beq.n	80229d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022982:	68bb      	ldr	r3, [r7, #8]
 8022984:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 802298a:	68fb      	ldr	r3, [r7, #12]
 802298c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 802298e:	68bb      	ldr	r3, [r7, #8]
 8022990:	2b05      	cmp	r3, #5
 8022992:	dc18      	bgt.n	80229c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022994:	f7ff fdb4 	bl	8022500 <xTaskGetSchedulerState>
 8022998:	4603      	mov	r3, r0
 802299a:	2b02      	cmp	r3, #2
 802299c:	d109      	bne.n	80229b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 802299e:	4b11      	ldr	r3, [pc, #68]	; (80229e4 <xTimerGenericCommand+0x98>)
 80229a0:	6818      	ldr	r0, [r3, #0]
 80229a2:	f107 0110 	add.w	r1, r7, #16
 80229a6:	2300      	movs	r3, #0
 80229a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80229aa:	f7fe f84d 	bl	8020a48 <xQueueGenericSend>
 80229ae:	6278      	str	r0, [r7, #36]	; 0x24
 80229b0:	e012      	b.n	80229d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80229b2:	4b0c      	ldr	r3, [pc, #48]	; (80229e4 <xTimerGenericCommand+0x98>)
 80229b4:	6818      	ldr	r0, [r3, #0]
 80229b6:	f107 0110 	add.w	r1, r7, #16
 80229ba:	2300      	movs	r3, #0
 80229bc:	2200      	movs	r2, #0
 80229be:	f7fe f843 	bl	8020a48 <xQueueGenericSend>
 80229c2:	6278      	str	r0, [r7, #36]	; 0x24
 80229c4:	e008      	b.n	80229d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80229c6:	4b07      	ldr	r3, [pc, #28]	; (80229e4 <xTimerGenericCommand+0x98>)
 80229c8:	6818      	ldr	r0, [r3, #0]
 80229ca:	f107 0110 	add.w	r1, r7, #16
 80229ce:	2300      	movs	r3, #0
 80229d0:	683a      	ldr	r2, [r7, #0]
 80229d2:	f7fe f937 	bl	8020c44 <xQueueGenericSendFromISR>
 80229d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80229d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80229da:	4618      	mov	r0, r3
 80229dc:	3728      	adds	r7, #40	; 0x28
 80229de:	46bd      	mov	sp, r7
 80229e0:	bd80      	pop	{r7, pc}
 80229e2:	bf00      	nop
 80229e4:	20002270 	.word	0x20002270

080229e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80229e8:	b580      	push	{r7, lr}
 80229ea:	b088      	sub	sp, #32
 80229ec:	af02      	add	r7, sp, #8
 80229ee:	6078      	str	r0, [r7, #4]
 80229f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80229f2:	4b22      	ldr	r3, [pc, #136]	; (8022a7c <prvProcessExpiredTimer+0x94>)
 80229f4:	681b      	ldr	r3, [r3, #0]
 80229f6:	68db      	ldr	r3, [r3, #12]
 80229f8:	68db      	ldr	r3, [r3, #12]
 80229fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80229fc:	697b      	ldr	r3, [r7, #20]
 80229fe:	3304      	adds	r3, #4
 8022a00:	4618      	mov	r0, r3
 8022a02:	f7fd fe03 	bl	802060c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022a06:	697b      	ldr	r3, [r7, #20]
 8022a08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a0c:	f003 0304 	and.w	r3, r3, #4
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d022      	beq.n	8022a5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8022a14:	697b      	ldr	r3, [r7, #20]
 8022a16:	699a      	ldr	r2, [r3, #24]
 8022a18:	687b      	ldr	r3, [r7, #4]
 8022a1a:	18d1      	adds	r1, r2, r3
 8022a1c:	687b      	ldr	r3, [r7, #4]
 8022a1e:	683a      	ldr	r2, [r7, #0]
 8022a20:	6978      	ldr	r0, [r7, #20]
 8022a22:	f000 f8d1 	bl	8022bc8 <prvInsertTimerInActiveList>
 8022a26:	4603      	mov	r3, r0
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	d01f      	beq.n	8022a6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022a2c:	2300      	movs	r3, #0
 8022a2e:	9300      	str	r3, [sp, #0]
 8022a30:	2300      	movs	r3, #0
 8022a32:	687a      	ldr	r2, [r7, #4]
 8022a34:	2100      	movs	r1, #0
 8022a36:	6978      	ldr	r0, [r7, #20]
 8022a38:	f7ff ff88 	bl	802294c <xTimerGenericCommand>
 8022a3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8022a3e:	693b      	ldr	r3, [r7, #16]
 8022a40:	2b00      	cmp	r3, #0
 8022a42:	d113      	bne.n	8022a6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8022a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022a48:	f383 8811 	msr	BASEPRI, r3
 8022a4c:	f3bf 8f6f 	isb	sy
 8022a50:	f3bf 8f4f 	dsb	sy
 8022a54:	60fb      	str	r3, [r7, #12]
}
 8022a56:	bf00      	nop
 8022a58:	e7fe      	b.n	8022a58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022a5a:	697b      	ldr	r3, [r7, #20]
 8022a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022a60:	f023 0301 	bic.w	r3, r3, #1
 8022a64:	b2da      	uxtb	r2, r3
 8022a66:	697b      	ldr	r3, [r7, #20]
 8022a68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022a6c:	697b      	ldr	r3, [r7, #20]
 8022a6e:	6a1b      	ldr	r3, [r3, #32]
 8022a70:	6978      	ldr	r0, [r7, #20]
 8022a72:	4798      	blx	r3
}
 8022a74:	bf00      	nop
 8022a76:	3718      	adds	r7, #24
 8022a78:	46bd      	mov	sp, r7
 8022a7a:	bd80      	pop	{r7, pc}
 8022a7c:	20002268 	.word	0x20002268

08022a80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022a80:	b580      	push	{r7, lr}
 8022a82:	b084      	sub	sp, #16
 8022a84:	af00      	add	r7, sp, #0
 8022a86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022a88:	f107 0308 	add.w	r3, r7, #8
 8022a8c:	4618      	mov	r0, r3
 8022a8e:	f000 f857 	bl	8022b40 <prvGetNextExpireTime>
 8022a92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022a94:	68bb      	ldr	r3, [r7, #8]
 8022a96:	4619      	mov	r1, r3
 8022a98:	68f8      	ldr	r0, [r7, #12]
 8022a9a:	f000 f803 	bl	8022aa4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022a9e:	f000 f8d5 	bl	8022c4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022aa2:	e7f1      	b.n	8022a88 <prvTimerTask+0x8>

08022aa4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022aa4:	b580      	push	{r7, lr}
 8022aa6:	b084      	sub	sp, #16
 8022aa8:	af00      	add	r7, sp, #0
 8022aaa:	6078      	str	r0, [r7, #4]
 8022aac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022aae:	f7ff f8d7 	bl	8021c60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022ab2:	f107 0308 	add.w	r3, r7, #8
 8022ab6:	4618      	mov	r0, r3
 8022ab8:	f000 f866 	bl	8022b88 <prvSampleTimeNow>
 8022abc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022abe:	68bb      	ldr	r3, [r7, #8]
 8022ac0:	2b00      	cmp	r3, #0
 8022ac2:	d130      	bne.n	8022b26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022ac4:	683b      	ldr	r3, [r7, #0]
 8022ac6:	2b00      	cmp	r3, #0
 8022ac8:	d10a      	bne.n	8022ae0 <prvProcessTimerOrBlockTask+0x3c>
 8022aca:	687a      	ldr	r2, [r7, #4]
 8022acc:	68fb      	ldr	r3, [r7, #12]
 8022ace:	429a      	cmp	r2, r3
 8022ad0:	d806      	bhi.n	8022ae0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022ad2:	f7ff f8d3 	bl	8021c7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8022ad6:	68f9      	ldr	r1, [r7, #12]
 8022ad8:	6878      	ldr	r0, [r7, #4]
 8022ada:	f7ff ff85 	bl	80229e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022ade:	e024      	b.n	8022b2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022ae0:	683b      	ldr	r3, [r7, #0]
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d008      	beq.n	8022af8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8022ae6:	4b13      	ldr	r3, [pc, #76]	; (8022b34 <prvProcessTimerOrBlockTask+0x90>)
 8022ae8:	681b      	ldr	r3, [r3, #0]
 8022aea:	681b      	ldr	r3, [r3, #0]
 8022aec:	2b00      	cmp	r3, #0
 8022aee:	d101      	bne.n	8022af4 <prvProcessTimerOrBlockTask+0x50>
 8022af0:	2301      	movs	r3, #1
 8022af2:	e000      	b.n	8022af6 <prvProcessTimerOrBlockTask+0x52>
 8022af4:	2300      	movs	r3, #0
 8022af6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022af8:	4b0f      	ldr	r3, [pc, #60]	; (8022b38 <prvProcessTimerOrBlockTask+0x94>)
 8022afa:	6818      	ldr	r0, [r3, #0]
 8022afc:	687a      	ldr	r2, [r7, #4]
 8022afe:	68fb      	ldr	r3, [r7, #12]
 8022b00:	1ad3      	subs	r3, r2, r3
 8022b02:	683a      	ldr	r2, [r7, #0]
 8022b04:	4619      	mov	r1, r3
 8022b06:	f7fe fe15 	bl	8021734 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022b0a:	f7ff f8b7 	bl	8021c7c <xTaskResumeAll>
 8022b0e:	4603      	mov	r3, r0
 8022b10:	2b00      	cmp	r3, #0
 8022b12:	d10a      	bne.n	8022b2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022b14:	4b09      	ldr	r3, [pc, #36]	; (8022b3c <prvProcessTimerOrBlockTask+0x98>)
 8022b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022b1a:	601a      	str	r2, [r3, #0]
 8022b1c:	f3bf 8f4f 	dsb	sy
 8022b20:	f3bf 8f6f 	isb	sy
}
 8022b24:	e001      	b.n	8022b2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8022b26:	f7ff f8a9 	bl	8021c7c <xTaskResumeAll>
}
 8022b2a:	bf00      	nop
 8022b2c:	3710      	adds	r7, #16
 8022b2e:	46bd      	mov	sp, r7
 8022b30:	bd80      	pop	{r7, pc}
 8022b32:	bf00      	nop
 8022b34:	2000226c 	.word	0x2000226c
 8022b38:	20002270 	.word	0x20002270
 8022b3c:	e000ed04 	.word	0xe000ed04

08022b40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022b40:	b480      	push	{r7}
 8022b42:	b085      	sub	sp, #20
 8022b44:	af00      	add	r7, sp, #0
 8022b46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022b48:	4b0e      	ldr	r3, [pc, #56]	; (8022b84 <prvGetNextExpireTime+0x44>)
 8022b4a:	681b      	ldr	r3, [r3, #0]
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	2b00      	cmp	r3, #0
 8022b50:	d101      	bne.n	8022b56 <prvGetNextExpireTime+0x16>
 8022b52:	2201      	movs	r2, #1
 8022b54:	e000      	b.n	8022b58 <prvGetNextExpireTime+0x18>
 8022b56:	2200      	movs	r2, #0
 8022b58:	687b      	ldr	r3, [r7, #4]
 8022b5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022b5c:	687b      	ldr	r3, [r7, #4]
 8022b5e:	681b      	ldr	r3, [r3, #0]
 8022b60:	2b00      	cmp	r3, #0
 8022b62:	d105      	bne.n	8022b70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022b64:	4b07      	ldr	r3, [pc, #28]	; (8022b84 <prvGetNextExpireTime+0x44>)
 8022b66:	681b      	ldr	r3, [r3, #0]
 8022b68:	68db      	ldr	r3, [r3, #12]
 8022b6a:	681b      	ldr	r3, [r3, #0]
 8022b6c:	60fb      	str	r3, [r7, #12]
 8022b6e:	e001      	b.n	8022b74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022b70:	2300      	movs	r3, #0
 8022b72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8022b74:	68fb      	ldr	r3, [r7, #12]
}
 8022b76:	4618      	mov	r0, r3
 8022b78:	3714      	adds	r7, #20
 8022b7a:	46bd      	mov	sp, r7
 8022b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b80:	4770      	bx	lr
 8022b82:	bf00      	nop
 8022b84:	20002268 	.word	0x20002268

08022b88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8022b88:	b580      	push	{r7, lr}
 8022b8a:	b084      	sub	sp, #16
 8022b8c:	af00      	add	r7, sp, #0
 8022b8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022b90:	f7ff f912 	bl	8021db8 <xTaskGetTickCount>
 8022b94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8022b96:	4b0b      	ldr	r3, [pc, #44]	; (8022bc4 <prvSampleTimeNow+0x3c>)
 8022b98:	681b      	ldr	r3, [r3, #0]
 8022b9a:	68fa      	ldr	r2, [r7, #12]
 8022b9c:	429a      	cmp	r2, r3
 8022b9e:	d205      	bcs.n	8022bac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022ba0:	f000 f936 	bl	8022e10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022ba4:	687b      	ldr	r3, [r7, #4]
 8022ba6:	2201      	movs	r2, #1
 8022ba8:	601a      	str	r2, [r3, #0]
 8022baa:	e002      	b.n	8022bb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	2200      	movs	r2, #0
 8022bb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022bb2:	4a04      	ldr	r2, [pc, #16]	; (8022bc4 <prvSampleTimeNow+0x3c>)
 8022bb4:	68fb      	ldr	r3, [r7, #12]
 8022bb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022bb8:	68fb      	ldr	r3, [r7, #12]
}
 8022bba:	4618      	mov	r0, r3
 8022bbc:	3710      	adds	r7, #16
 8022bbe:	46bd      	mov	sp, r7
 8022bc0:	bd80      	pop	{r7, pc}
 8022bc2:	bf00      	nop
 8022bc4:	20002278 	.word	0x20002278

08022bc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022bc8:	b580      	push	{r7, lr}
 8022bca:	b086      	sub	sp, #24
 8022bcc:	af00      	add	r7, sp, #0
 8022bce:	60f8      	str	r0, [r7, #12]
 8022bd0:	60b9      	str	r1, [r7, #8]
 8022bd2:	607a      	str	r2, [r7, #4]
 8022bd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8022bd6:	2300      	movs	r3, #0
 8022bd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022bda:	68fb      	ldr	r3, [r7, #12]
 8022bdc:	68ba      	ldr	r2, [r7, #8]
 8022bde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022be0:	68fb      	ldr	r3, [r7, #12]
 8022be2:	68fa      	ldr	r2, [r7, #12]
 8022be4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8022be6:	68ba      	ldr	r2, [r7, #8]
 8022be8:	687b      	ldr	r3, [r7, #4]
 8022bea:	429a      	cmp	r2, r3
 8022bec:	d812      	bhi.n	8022c14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022bee:	687a      	ldr	r2, [r7, #4]
 8022bf0:	683b      	ldr	r3, [r7, #0]
 8022bf2:	1ad2      	subs	r2, r2, r3
 8022bf4:	68fb      	ldr	r3, [r7, #12]
 8022bf6:	699b      	ldr	r3, [r3, #24]
 8022bf8:	429a      	cmp	r2, r3
 8022bfa:	d302      	bcc.n	8022c02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022bfc:	2301      	movs	r3, #1
 8022bfe:	617b      	str	r3, [r7, #20]
 8022c00:	e01b      	b.n	8022c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8022c02:	4b10      	ldr	r3, [pc, #64]	; (8022c44 <prvInsertTimerInActiveList+0x7c>)
 8022c04:	681a      	ldr	r2, [r3, #0]
 8022c06:	68fb      	ldr	r3, [r7, #12]
 8022c08:	3304      	adds	r3, #4
 8022c0a:	4619      	mov	r1, r3
 8022c0c:	4610      	mov	r0, r2
 8022c0e:	f7fd fcc4 	bl	802059a <vListInsert>
 8022c12:	e012      	b.n	8022c3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8022c14:	687a      	ldr	r2, [r7, #4]
 8022c16:	683b      	ldr	r3, [r7, #0]
 8022c18:	429a      	cmp	r2, r3
 8022c1a:	d206      	bcs.n	8022c2a <prvInsertTimerInActiveList+0x62>
 8022c1c:	68ba      	ldr	r2, [r7, #8]
 8022c1e:	683b      	ldr	r3, [r7, #0]
 8022c20:	429a      	cmp	r2, r3
 8022c22:	d302      	bcc.n	8022c2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8022c24:	2301      	movs	r3, #1
 8022c26:	617b      	str	r3, [r7, #20]
 8022c28:	e007      	b.n	8022c3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022c2a:	4b07      	ldr	r3, [pc, #28]	; (8022c48 <prvInsertTimerInActiveList+0x80>)
 8022c2c:	681a      	ldr	r2, [r3, #0]
 8022c2e:	68fb      	ldr	r3, [r7, #12]
 8022c30:	3304      	adds	r3, #4
 8022c32:	4619      	mov	r1, r3
 8022c34:	4610      	mov	r0, r2
 8022c36:	f7fd fcb0 	bl	802059a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8022c3a:	697b      	ldr	r3, [r7, #20]
}
 8022c3c:	4618      	mov	r0, r3
 8022c3e:	3718      	adds	r7, #24
 8022c40:	46bd      	mov	sp, r7
 8022c42:	bd80      	pop	{r7, pc}
 8022c44:	2000226c 	.word	0x2000226c
 8022c48:	20002268 	.word	0x20002268

08022c4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8022c4c:	b580      	push	{r7, lr}
 8022c4e:	b08e      	sub	sp, #56	; 0x38
 8022c50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022c52:	e0ca      	b.n	8022dea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8022c54:	687b      	ldr	r3, [r7, #4]
 8022c56:	2b00      	cmp	r3, #0
 8022c58:	da18      	bge.n	8022c8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8022c5a:	1d3b      	adds	r3, r7, #4
 8022c5c:	3304      	adds	r3, #4
 8022c5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8022c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c62:	2b00      	cmp	r3, #0
 8022c64:	d10a      	bne.n	8022c7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8022c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022c6a:	f383 8811 	msr	BASEPRI, r3
 8022c6e:	f3bf 8f6f 	isb	sy
 8022c72:	f3bf 8f4f 	dsb	sy
 8022c76:	61fb      	str	r3, [r7, #28]
}
 8022c78:	bf00      	nop
 8022c7a:	e7fe      	b.n	8022c7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8022c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022c7e:	681b      	ldr	r3, [r3, #0]
 8022c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c82:	6850      	ldr	r0, [r2, #4]
 8022c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022c86:	6892      	ldr	r2, [r2, #8]
 8022c88:	4611      	mov	r1, r2
 8022c8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8022c8c:	687b      	ldr	r3, [r7, #4]
 8022c8e:	2b00      	cmp	r3, #0
 8022c90:	f2c0 80ab 	blt.w	8022dea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8022c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022c9a:	695b      	ldr	r3, [r3, #20]
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	d004      	beq.n	8022caa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022ca2:	3304      	adds	r3, #4
 8022ca4:	4618      	mov	r0, r3
 8022ca6:	f7fd fcb1 	bl	802060c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022caa:	463b      	mov	r3, r7
 8022cac:	4618      	mov	r0, r3
 8022cae:	f7ff ff6b 	bl	8022b88 <prvSampleTimeNow>
 8022cb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8022cb4:	687b      	ldr	r3, [r7, #4]
 8022cb6:	2b09      	cmp	r3, #9
 8022cb8:	f200 8096 	bhi.w	8022de8 <prvProcessReceivedCommands+0x19c>
 8022cbc:	a201      	add	r2, pc, #4	; (adr r2, 8022cc4 <prvProcessReceivedCommands+0x78>)
 8022cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8022cc2:	bf00      	nop
 8022cc4:	08022ced 	.word	0x08022ced
 8022cc8:	08022ced 	.word	0x08022ced
 8022ccc:	08022ced 	.word	0x08022ced
 8022cd0:	08022d61 	.word	0x08022d61
 8022cd4:	08022d75 	.word	0x08022d75
 8022cd8:	08022dbf 	.word	0x08022dbf
 8022cdc:	08022ced 	.word	0x08022ced
 8022ce0:	08022ced 	.word	0x08022ced
 8022ce4:	08022d61 	.word	0x08022d61
 8022ce8:	08022d75 	.word	0x08022d75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022cf2:	f043 0301 	orr.w	r3, r3, #1
 8022cf6:	b2da      	uxtb	r2, r3
 8022cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022cfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8022cfe:	68ba      	ldr	r2, [r7, #8]
 8022d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d02:	699b      	ldr	r3, [r3, #24]
 8022d04:	18d1      	adds	r1, r2, r3
 8022d06:	68bb      	ldr	r3, [r7, #8]
 8022d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022d0c:	f7ff ff5c 	bl	8022bc8 <prvInsertTimerInActiveList>
 8022d10:	4603      	mov	r3, r0
 8022d12:	2b00      	cmp	r3, #0
 8022d14:	d069      	beq.n	8022dea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d18:	6a1b      	ldr	r3, [r3, #32]
 8022d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022d1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022d24:	f003 0304 	and.w	r3, r3, #4
 8022d28:	2b00      	cmp	r3, #0
 8022d2a:	d05e      	beq.n	8022dea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8022d2c:	68ba      	ldr	r2, [r7, #8]
 8022d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d30:	699b      	ldr	r3, [r3, #24]
 8022d32:	441a      	add	r2, r3
 8022d34:	2300      	movs	r3, #0
 8022d36:	9300      	str	r3, [sp, #0]
 8022d38:	2300      	movs	r3, #0
 8022d3a:	2100      	movs	r1, #0
 8022d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022d3e:	f7ff fe05 	bl	802294c <xTimerGenericCommand>
 8022d42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8022d44:	6a3b      	ldr	r3, [r7, #32]
 8022d46:	2b00      	cmp	r3, #0
 8022d48:	d14f      	bne.n	8022dea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8022d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d4e:	f383 8811 	msr	BASEPRI, r3
 8022d52:	f3bf 8f6f 	isb	sy
 8022d56:	f3bf 8f4f 	dsb	sy
 8022d5a:	61bb      	str	r3, [r7, #24]
}
 8022d5c:	bf00      	nop
 8022d5e:	e7fe      	b.n	8022d5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022d66:	f023 0301 	bic.w	r3, r3, #1
 8022d6a:	b2da      	uxtb	r2, r3
 8022d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8022d72:	e03a      	b.n	8022dea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8022d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022d7a:	f043 0301 	orr.w	r3, r3, #1
 8022d7e:	b2da      	uxtb	r2, r3
 8022d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8022d86:	68ba      	ldr	r2, [r7, #8]
 8022d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8022d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d8e:	699b      	ldr	r3, [r3, #24]
 8022d90:	2b00      	cmp	r3, #0
 8022d92:	d10a      	bne.n	8022daa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8022d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d98:	f383 8811 	msr	BASEPRI, r3
 8022d9c:	f3bf 8f6f 	isb	sy
 8022da0:	f3bf 8f4f 	dsb	sy
 8022da4:	617b      	str	r3, [r7, #20]
}
 8022da6:	bf00      	nop
 8022da8:	e7fe      	b.n	8022da8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8022daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dac:	699a      	ldr	r2, [r3, #24]
 8022dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022db0:	18d1      	adds	r1, r2, r3
 8022db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022db6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022db8:	f7ff ff06 	bl	8022bc8 <prvInsertTimerInActiveList>
					break;
 8022dbc:	e015      	b.n	8022dea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8022dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022dc4:	f003 0302 	and.w	r3, r3, #2
 8022dc8:	2b00      	cmp	r3, #0
 8022dca:	d103      	bne.n	8022dd4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8022dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022dce:	f000 fb59 	bl	8023484 <vPortFree>
 8022dd2:	e00a      	b.n	8022dea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022dd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022dda:	f023 0301 	bic.w	r3, r3, #1
 8022dde:	b2da      	uxtb	r2, r3
 8022de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022de2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8022de6:	e000      	b.n	8022dea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8022de8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8022dea:	4b08      	ldr	r3, [pc, #32]	; (8022e0c <prvProcessReceivedCommands+0x1c0>)
 8022dec:	681b      	ldr	r3, [r3, #0]
 8022dee:	1d39      	adds	r1, r7, #4
 8022df0:	2200      	movs	r2, #0
 8022df2:	4618      	mov	r0, r3
 8022df4:	f7fd ffc2 	bl	8020d7c <xQueueReceive>
 8022df8:	4603      	mov	r3, r0
 8022dfa:	2b00      	cmp	r3, #0
 8022dfc:	f47f af2a 	bne.w	8022c54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8022e00:	bf00      	nop
 8022e02:	bf00      	nop
 8022e04:	3730      	adds	r7, #48	; 0x30
 8022e06:	46bd      	mov	sp, r7
 8022e08:	bd80      	pop	{r7, pc}
 8022e0a:	bf00      	nop
 8022e0c:	20002270 	.word	0x20002270

08022e10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8022e10:	b580      	push	{r7, lr}
 8022e12:	b088      	sub	sp, #32
 8022e14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022e16:	e048      	b.n	8022eaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022e18:	4b2d      	ldr	r3, [pc, #180]	; (8022ed0 <prvSwitchTimerLists+0xc0>)
 8022e1a:	681b      	ldr	r3, [r3, #0]
 8022e1c:	68db      	ldr	r3, [r3, #12]
 8022e1e:	681b      	ldr	r3, [r3, #0]
 8022e20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022e22:	4b2b      	ldr	r3, [pc, #172]	; (8022ed0 <prvSwitchTimerLists+0xc0>)
 8022e24:	681b      	ldr	r3, [r3, #0]
 8022e26:	68db      	ldr	r3, [r3, #12]
 8022e28:	68db      	ldr	r3, [r3, #12]
 8022e2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022e2c:	68fb      	ldr	r3, [r7, #12]
 8022e2e:	3304      	adds	r3, #4
 8022e30:	4618      	mov	r0, r3
 8022e32:	f7fd fbeb 	bl	802060c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022e36:	68fb      	ldr	r3, [r7, #12]
 8022e38:	6a1b      	ldr	r3, [r3, #32]
 8022e3a:	68f8      	ldr	r0, [r7, #12]
 8022e3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022e3e:	68fb      	ldr	r3, [r7, #12]
 8022e40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e44:	f003 0304 	and.w	r3, r3, #4
 8022e48:	2b00      	cmp	r3, #0
 8022e4a:	d02e      	beq.n	8022eaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8022e4c:	68fb      	ldr	r3, [r7, #12]
 8022e4e:	699b      	ldr	r3, [r3, #24]
 8022e50:	693a      	ldr	r2, [r7, #16]
 8022e52:	4413      	add	r3, r2
 8022e54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8022e56:	68ba      	ldr	r2, [r7, #8]
 8022e58:	693b      	ldr	r3, [r7, #16]
 8022e5a:	429a      	cmp	r2, r3
 8022e5c:	d90e      	bls.n	8022e7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8022e5e:	68fb      	ldr	r3, [r7, #12]
 8022e60:	68ba      	ldr	r2, [r7, #8]
 8022e62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022e64:	68fb      	ldr	r3, [r7, #12]
 8022e66:	68fa      	ldr	r2, [r7, #12]
 8022e68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022e6a:	4b19      	ldr	r3, [pc, #100]	; (8022ed0 <prvSwitchTimerLists+0xc0>)
 8022e6c:	681a      	ldr	r2, [r3, #0]
 8022e6e:	68fb      	ldr	r3, [r7, #12]
 8022e70:	3304      	adds	r3, #4
 8022e72:	4619      	mov	r1, r3
 8022e74:	4610      	mov	r0, r2
 8022e76:	f7fd fb90 	bl	802059a <vListInsert>
 8022e7a:	e016      	b.n	8022eaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022e7c:	2300      	movs	r3, #0
 8022e7e:	9300      	str	r3, [sp, #0]
 8022e80:	2300      	movs	r3, #0
 8022e82:	693a      	ldr	r2, [r7, #16]
 8022e84:	2100      	movs	r1, #0
 8022e86:	68f8      	ldr	r0, [r7, #12]
 8022e88:	f7ff fd60 	bl	802294c <xTimerGenericCommand>
 8022e8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	d10a      	bne.n	8022eaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8022e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022e98:	f383 8811 	msr	BASEPRI, r3
 8022e9c:	f3bf 8f6f 	isb	sy
 8022ea0:	f3bf 8f4f 	dsb	sy
 8022ea4:	603b      	str	r3, [r7, #0]
}
 8022ea6:	bf00      	nop
 8022ea8:	e7fe      	b.n	8022ea8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8022eaa:	4b09      	ldr	r3, [pc, #36]	; (8022ed0 <prvSwitchTimerLists+0xc0>)
 8022eac:	681b      	ldr	r3, [r3, #0]
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	2b00      	cmp	r3, #0
 8022eb2:	d1b1      	bne.n	8022e18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8022eb4:	4b06      	ldr	r3, [pc, #24]	; (8022ed0 <prvSwitchTimerLists+0xc0>)
 8022eb6:	681b      	ldr	r3, [r3, #0]
 8022eb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8022eba:	4b06      	ldr	r3, [pc, #24]	; (8022ed4 <prvSwitchTimerLists+0xc4>)
 8022ebc:	681b      	ldr	r3, [r3, #0]
 8022ebe:	4a04      	ldr	r2, [pc, #16]	; (8022ed0 <prvSwitchTimerLists+0xc0>)
 8022ec0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8022ec2:	4a04      	ldr	r2, [pc, #16]	; (8022ed4 <prvSwitchTimerLists+0xc4>)
 8022ec4:	697b      	ldr	r3, [r7, #20]
 8022ec6:	6013      	str	r3, [r2, #0]
}
 8022ec8:	bf00      	nop
 8022eca:	3718      	adds	r7, #24
 8022ecc:	46bd      	mov	sp, r7
 8022ece:	bd80      	pop	{r7, pc}
 8022ed0:	20002268 	.word	0x20002268
 8022ed4:	2000226c 	.word	0x2000226c

08022ed8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8022ed8:	b580      	push	{r7, lr}
 8022eda:	b082      	sub	sp, #8
 8022edc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8022ede:	f000 f969 	bl	80231b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8022ee2:	4b15      	ldr	r3, [pc, #84]	; (8022f38 <prvCheckForValidListAndQueue+0x60>)
 8022ee4:	681b      	ldr	r3, [r3, #0]
 8022ee6:	2b00      	cmp	r3, #0
 8022ee8:	d120      	bne.n	8022f2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8022eea:	4814      	ldr	r0, [pc, #80]	; (8022f3c <prvCheckForValidListAndQueue+0x64>)
 8022eec:	f7fd fb04 	bl	80204f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8022ef0:	4813      	ldr	r0, [pc, #76]	; (8022f40 <prvCheckForValidListAndQueue+0x68>)
 8022ef2:	f7fd fb01 	bl	80204f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8022ef6:	4b13      	ldr	r3, [pc, #76]	; (8022f44 <prvCheckForValidListAndQueue+0x6c>)
 8022ef8:	4a10      	ldr	r2, [pc, #64]	; (8022f3c <prvCheckForValidListAndQueue+0x64>)
 8022efa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8022efc:	4b12      	ldr	r3, [pc, #72]	; (8022f48 <prvCheckForValidListAndQueue+0x70>)
 8022efe:	4a10      	ldr	r2, [pc, #64]	; (8022f40 <prvCheckForValidListAndQueue+0x68>)
 8022f00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8022f02:	2300      	movs	r3, #0
 8022f04:	9300      	str	r3, [sp, #0]
 8022f06:	4b11      	ldr	r3, [pc, #68]	; (8022f4c <prvCheckForValidListAndQueue+0x74>)
 8022f08:	4a11      	ldr	r2, [pc, #68]	; (8022f50 <prvCheckForValidListAndQueue+0x78>)
 8022f0a:	2110      	movs	r1, #16
 8022f0c:	200a      	movs	r0, #10
 8022f0e:	f7fd fc0f 	bl	8020730 <xQueueGenericCreateStatic>
 8022f12:	4603      	mov	r3, r0
 8022f14:	4a08      	ldr	r2, [pc, #32]	; (8022f38 <prvCheckForValidListAndQueue+0x60>)
 8022f16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8022f18:	4b07      	ldr	r3, [pc, #28]	; (8022f38 <prvCheckForValidListAndQueue+0x60>)
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	d005      	beq.n	8022f2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8022f20:	4b05      	ldr	r3, [pc, #20]	; (8022f38 <prvCheckForValidListAndQueue+0x60>)
 8022f22:	681b      	ldr	r3, [r3, #0]
 8022f24:	490b      	ldr	r1, [pc, #44]	; (8022f54 <prvCheckForValidListAndQueue+0x7c>)
 8022f26:	4618      	mov	r0, r3
 8022f28:	f7fe fbda 	bl	80216e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022f2c:	f000 f972 	bl	8023214 <vPortExitCritical>
}
 8022f30:	bf00      	nop
 8022f32:	46bd      	mov	sp, r7
 8022f34:	bd80      	pop	{r7, pc}
 8022f36:	bf00      	nop
 8022f38:	20002270 	.word	0x20002270
 8022f3c:	20002240 	.word	0x20002240
 8022f40:	20002254 	.word	0x20002254
 8022f44:	20002268 	.word	0x20002268
 8022f48:	2000226c 	.word	0x2000226c
 8022f4c:	2000231c 	.word	0x2000231c
 8022f50:	2000227c 	.word	0x2000227c
 8022f54:	08033330 	.word	0x08033330

08022f58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8022f58:	b480      	push	{r7}
 8022f5a:	b085      	sub	sp, #20
 8022f5c:	af00      	add	r7, sp, #0
 8022f5e:	60f8      	str	r0, [r7, #12]
 8022f60:	60b9      	str	r1, [r7, #8]
 8022f62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8022f64:	68fb      	ldr	r3, [r7, #12]
 8022f66:	3b04      	subs	r3, #4
 8022f68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8022f6a:	68fb      	ldr	r3, [r7, #12]
 8022f6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8022f70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022f72:	68fb      	ldr	r3, [r7, #12]
 8022f74:	3b04      	subs	r3, #4
 8022f76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8022f78:	68bb      	ldr	r3, [r7, #8]
 8022f7a:	f023 0201 	bic.w	r2, r3, #1
 8022f7e:	68fb      	ldr	r3, [r7, #12]
 8022f80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8022f82:	68fb      	ldr	r3, [r7, #12]
 8022f84:	3b04      	subs	r3, #4
 8022f86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8022f88:	4a0c      	ldr	r2, [pc, #48]	; (8022fbc <pxPortInitialiseStack+0x64>)
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8022f8e:	68fb      	ldr	r3, [r7, #12]
 8022f90:	3b14      	subs	r3, #20
 8022f92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8022f94:	687a      	ldr	r2, [r7, #4]
 8022f96:	68fb      	ldr	r3, [r7, #12]
 8022f98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	3b04      	subs	r3, #4
 8022f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8022fa0:	68fb      	ldr	r3, [r7, #12]
 8022fa2:	f06f 0202 	mvn.w	r2, #2
 8022fa6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8022fa8:	68fb      	ldr	r3, [r7, #12]
 8022faa:	3b20      	subs	r3, #32
 8022fac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8022fae:	68fb      	ldr	r3, [r7, #12]
}
 8022fb0:	4618      	mov	r0, r3
 8022fb2:	3714      	adds	r7, #20
 8022fb4:	46bd      	mov	sp, r7
 8022fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022fba:	4770      	bx	lr
 8022fbc:	08022fc1 	.word	0x08022fc1

08022fc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8022fc0:	b480      	push	{r7}
 8022fc2:	b085      	sub	sp, #20
 8022fc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8022fc6:	2300      	movs	r3, #0
 8022fc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8022fca:	4b12      	ldr	r3, [pc, #72]	; (8023014 <prvTaskExitError+0x54>)
 8022fcc:	681b      	ldr	r3, [r3, #0]
 8022fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022fd2:	d00a      	beq.n	8022fea <prvTaskExitError+0x2a>
	__asm volatile
 8022fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022fd8:	f383 8811 	msr	BASEPRI, r3
 8022fdc:	f3bf 8f6f 	isb	sy
 8022fe0:	f3bf 8f4f 	dsb	sy
 8022fe4:	60fb      	str	r3, [r7, #12]
}
 8022fe6:	bf00      	nop
 8022fe8:	e7fe      	b.n	8022fe8 <prvTaskExitError+0x28>
	__asm volatile
 8022fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022fee:	f383 8811 	msr	BASEPRI, r3
 8022ff2:	f3bf 8f6f 	isb	sy
 8022ff6:	f3bf 8f4f 	dsb	sy
 8022ffa:	60bb      	str	r3, [r7, #8]
}
 8022ffc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8022ffe:	bf00      	nop
 8023000:	687b      	ldr	r3, [r7, #4]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d0fc      	beq.n	8023000 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8023006:	bf00      	nop
 8023008:	bf00      	nop
 802300a:	3714      	adds	r7, #20
 802300c:	46bd      	mov	sp, r7
 802300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023012:	4770      	bx	lr
 8023014:	20000128 	.word	0x20000128
	...

08023020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8023020:	4b07      	ldr	r3, [pc, #28]	; (8023040 <pxCurrentTCBConst2>)
 8023022:	6819      	ldr	r1, [r3, #0]
 8023024:	6808      	ldr	r0, [r1, #0]
 8023026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802302a:	f380 8809 	msr	PSP, r0
 802302e:	f3bf 8f6f 	isb	sy
 8023032:	f04f 0000 	mov.w	r0, #0
 8023036:	f380 8811 	msr	BASEPRI, r0
 802303a:	4770      	bx	lr
 802303c:	f3af 8000 	nop.w

08023040 <pxCurrentTCBConst2>:
 8023040:	20001d38 	.word	0x20001d38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8023044:	bf00      	nop
 8023046:	bf00      	nop

08023048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8023048:	4808      	ldr	r0, [pc, #32]	; (802306c <prvPortStartFirstTask+0x24>)
 802304a:	6800      	ldr	r0, [r0, #0]
 802304c:	6800      	ldr	r0, [r0, #0]
 802304e:	f380 8808 	msr	MSP, r0
 8023052:	f04f 0000 	mov.w	r0, #0
 8023056:	f380 8814 	msr	CONTROL, r0
 802305a:	b662      	cpsie	i
 802305c:	b661      	cpsie	f
 802305e:	f3bf 8f4f 	dsb	sy
 8023062:	f3bf 8f6f 	isb	sy
 8023066:	df00      	svc	0
 8023068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802306a:	bf00      	nop
 802306c:	e000ed08 	.word	0xe000ed08

08023070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8023070:	b580      	push	{r7, lr}
 8023072:	b086      	sub	sp, #24
 8023074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8023076:	4b46      	ldr	r3, [pc, #280]	; (8023190 <xPortStartScheduler+0x120>)
 8023078:	681b      	ldr	r3, [r3, #0]
 802307a:	4a46      	ldr	r2, [pc, #280]	; (8023194 <xPortStartScheduler+0x124>)
 802307c:	4293      	cmp	r3, r2
 802307e:	d10a      	bne.n	8023096 <xPortStartScheduler+0x26>
	__asm volatile
 8023080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023084:	f383 8811 	msr	BASEPRI, r3
 8023088:	f3bf 8f6f 	isb	sy
 802308c:	f3bf 8f4f 	dsb	sy
 8023090:	613b      	str	r3, [r7, #16]
}
 8023092:	bf00      	nop
 8023094:	e7fe      	b.n	8023094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8023096:	4b3e      	ldr	r3, [pc, #248]	; (8023190 <xPortStartScheduler+0x120>)
 8023098:	681b      	ldr	r3, [r3, #0]
 802309a:	4a3f      	ldr	r2, [pc, #252]	; (8023198 <xPortStartScheduler+0x128>)
 802309c:	4293      	cmp	r3, r2
 802309e:	d10a      	bne.n	80230b6 <xPortStartScheduler+0x46>
	__asm volatile
 80230a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80230a4:	f383 8811 	msr	BASEPRI, r3
 80230a8:	f3bf 8f6f 	isb	sy
 80230ac:	f3bf 8f4f 	dsb	sy
 80230b0:	60fb      	str	r3, [r7, #12]
}
 80230b2:	bf00      	nop
 80230b4:	e7fe      	b.n	80230b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80230b6:	4b39      	ldr	r3, [pc, #228]	; (802319c <xPortStartScheduler+0x12c>)
 80230b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80230ba:	697b      	ldr	r3, [r7, #20]
 80230bc:	781b      	ldrb	r3, [r3, #0]
 80230be:	b2db      	uxtb	r3, r3
 80230c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80230c2:	697b      	ldr	r3, [r7, #20]
 80230c4:	22ff      	movs	r2, #255	; 0xff
 80230c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80230c8:	697b      	ldr	r3, [r7, #20]
 80230ca:	781b      	ldrb	r3, [r3, #0]
 80230cc:	b2db      	uxtb	r3, r3
 80230ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80230d0:	78fb      	ldrb	r3, [r7, #3]
 80230d2:	b2db      	uxtb	r3, r3
 80230d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80230d8:	b2da      	uxtb	r2, r3
 80230da:	4b31      	ldr	r3, [pc, #196]	; (80231a0 <xPortStartScheduler+0x130>)
 80230dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80230de:	4b31      	ldr	r3, [pc, #196]	; (80231a4 <xPortStartScheduler+0x134>)
 80230e0:	2207      	movs	r2, #7
 80230e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80230e4:	e009      	b.n	80230fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80230e6:	4b2f      	ldr	r3, [pc, #188]	; (80231a4 <xPortStartScheduler+0x134>)
 80230e8:	681b      	ldr	r3, [r3, #0]
 80230ea:	3b01      	subs	r3, #1
 80230ec:	4a2d      	ldr	r2, [pc, #180]	; (80231a4 <xPortStartScheduler+0x134>)
 80230ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80230f0:	78fb      	ldrb	r3, [r7, #3]
 80230f2:	b2db      	uxtb	r3, r3
 80230f4:	005b      	lsls	r3, r3, #1
 80230f6:	b2db      	uxtb	r3, r3
 80230f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80230fa:	78fb      	ldrb	r3, [r7, #3]
 80230fc:	b2db      	uxtb	r3, r3
 80230fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023102:	2b80      	cmp	r3, #128	; 0x80
 8023104:	d0ef      	beq.n	80230e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8023106:	4b27      	ldr	r3, [pc, #156]	; (80231a4 <xPortStartScheduler+0x134>)
 8023108:	681b      	ldr	r3, [r3, #0]
 802310a:	f1c3 0307 	rsb	r3, r3, #7
 802310e:	2b04      	cmp	r3, #4
 8023110:	d00a      	beq.n	8023128 <xPortStartScheduler+0xb8>
	__asm volatile
 8023112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023116:	f383 8811 	msr	BASEPRI, r3
 802311a:	f3bf 8f6f 	isb	sy
 802311e:	f3bf 8f4f 	dsb	sy
 8023122:	60bb      	str	r3, [r7, #8]
}
 8023124:	bf00      	nop
 8023126:	e7fe      	b.n	8023126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8023128:	4b1e      	ldr	r3, [pc, #120]	; (80231a4 <xPortStartScheduler+0x134>)
 802312a:	681b      	ldr	r3, [r3, #0]
 802312c:	021b      	lsls	r3, r3, #8
 802312e:	4a1d      	ldr	r2, [pc, #116]	; (80231a4 <xPortStartScheduler+0x134>)
 8023130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8023132:	4b1c      	ldr	r3, [pc, #112]	; (80231a4 <xPortStartScheduler+0x134>)
 8023134:	681b      	ldr	r3, [r3, #0]
 8023136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802313a:	4a1a      	ldr	r2, [pc, #104]	; (80231a4 <xPortStartScheduler+0x134>)
 802313c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 802313e:	687b      	ldr	r3, [r7, #4]
 8023140:	b2da      	uxtb	r2, r3
 8023142:	697b      	ldr	r3, [r7, #20]
 8023144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8023146:	4b18      	ldr	r3, [pc, #96]	; (80231a8 <xPortStartScheduler+0x138>)
 8023148:	681b      	ldr	r3, [r3, #0]
 802314a:	4a17      	ldr	r2, [pc, #92]	; (80231a8 <xPortStartScheduler+0x138>)
 802314c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8023152:	4b15      	ldr	r3, [pc, #84]	; (80231a8 <xPortStartScheduler+0x138>)
 8023154:	681b      	ldr	r3, [r3, #0]
 8023156:	4a14      	ldr	r2, [pc, #80]	; (80231a8 <xPortStartScheduler+0x138>)
 8023158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802315c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802315e:	f000 f8dd 	bl	802331c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8023162:	4b12      	ldr	r3, [pc, #72]	; (80231ac <xPortStartScheduler+0x13c>)
 8023164:	2200      	movs	r2, #0
 8023166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8023168:	f000 f8fc 	bl	8023364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802316c:	4b10      	ldr	r3, [pc, #64]	; (80231b0 <xPortStartScheduler+0x140>)
 802316e:	681b      	ldr	r3, [r3, #0]
 8023170:	4a0f      	ldr	r2, [pc, #60]	; (80231b0 <xPortStartScheduler+0x140>)
 8023172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8023176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8023178:	f7ff ff66 	bl	8023048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802317c:	f7fe fee6 	bl	8021f4c <vTaskSwitchContext>
	prvTaskExitError();
 8023180:	f7ff ff1e 	bl	8022fc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8023184:	2300      	movs	r3, #0
}
 8023186:	4618      	mov	r0, r3
 8023188:	3718      	adds	r7, #24
 802318a:	46bd      	mov	sp, r7
 802318c:	bd80      	pop	{r7, pc}
 802318e:	bf00      	nop
 8023190:	e000ed00 	.word	0xe000ed00
 8023194:	410fc271 	.word	0x410fc271
 8023198:	410fc270 	.word	0x410fc270
 802319c:	e000e400 	.word	0xe000e400
 80231a0:	2000236c 	.word	0x2000236c
 80231a4:	20002370 	.word	0x20002370
 80231a8:	e000ed20 	.word	0xe000ed20
 80231ac:	20000128 	.word	0x20000128
 80231b0:	e000ef34 	.word	0xe000ef34

080231b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80231b4:	b480      	push	{r7}
 80231b6:	b083      	sub	sp, #12
 80231b8:	af00      	add	r7, sp, #0
	__asm volatile
 80231ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80231be:	f383 8811 	msr	BASEPRI, r3
 80231c2:	f3bf 8f6f 	isb	sy
 80231c6:	f3bf 8f4f 	dsb	sy
 80231ca:	607b      	str	r3, [r7, #4]
}
 80231cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80231ce:	4b0f      	ldr	r3, [pc, #60]	; (802320c <vPortEnterCritical+0x58>)
 80231d0:	681b      	ldr	r3, [r3, #0]
 80231d2:	3301      	adds	r3, #1
 80231d4:	4a0d      	ldr	r2, [pc, #52]	; (802320c <vPortEnterCritical+0x58>)
 80231d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80231d8:	4b0c      	ldr	r3, [pc, #48]	; (802320c <vPortEnterCritical+0x58>)
 80231da:	681b      	ldr	r3, [r3, #0]
 80231dc:	2b01      	cmp	r3, #1
 80231de:	d10f      	bne.n	8023200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80231e0:	4b0b      	ldr	r3, [pc, #44]	; (8023210 <vPortEnterCritical+0x5c>)
 80231e2:	681b      	ldr	r3, [r3, #0]
 80231e4:	b2db      	uxtb	r3, r3
 80231e6:	2b00      	cmp	r3, #0
 80231e8:	d00a      	beq.n	8023200 <vPortEnterCritical+0x4c>
	__asm volatile
 80231ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80231ee:	f383 8811 	msr	BASEPRI, r3
 80231f2:	f3bf 8f6f 	isb	sy
 80231f6:	f3bf 8f4f 	dsb	sy
 80231fa:	603b      	str	r3, [r7, #0]
}
 80231fc:	bf00      	nop
 80231fe:	e7fe      	b.n	80231fe <vPortEnterCritical+0x4a>
	}
}
 8023200:	bf00      	nop
 8023202:	370c      	adds	r7, #12
 8023204:	46bd      	mov	sp, r7
 8023206:	f85d 7b04 	ldr.w	r7, [sp], #4
 802320a:	4770      	bx	lr
 802320c:	20000128 	.word	0x20000128
 8023210:	e000ed04 	.word	0xe000ed04

08023214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8023214:	b480      	push	{r7}
 8023216:	b083      	sub	sp, #12
 8023218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 802321a:	4b12      	ldr	r3, [pc, #72]	; (8023264 <vPortExitCritical+0x50>)
 802321c:	681b      	ldr	r3, [r3, #0]
 802321e:	2b00      	cmp	r3, #0
 8023220:	d10a      	bne.n	8023238 <vPortExitCritical+0x24>
	__asm volatile
 8023222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023226:	f383 8811 	msr	BASEPRI, r3
 802322a:	f3bf 8f6f 	isb	sy
 802322e:	f3bf 8f4f 	dsb	sy
 8023232:	607b      	str	r3, [r7, #4]
}
 8023234:	bf00      	nop
 8023236:	e7fe      	b.n	8023236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8023238:	4b0a      	ldr	r3, [pc, #40]	; (8023264 <vPortExitCritical+0x50>)
 802323a:	681b      	ldr	r3, [r3, #0]
 802323c:	3b01      	subs	r3, #1
 802323e:	4a09      	ldr	r2, [pc, #36]	; (8023264 <vPortExitCritical+0x50>)
 8023240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8023242:	4b08      	ldr	r3, [pc, #32]	; (8023264 <vPortExitCritical+0x50>)
 8023244:	681b      	ldr	r3, [r3, #0]
 8023246:	2b00      	cmp	r3, #0
 8023248:	d105      	bne.n	8023256 <vPortExitCritical+0x42>
 802324a:	2300      	movs	r3, #0
 802324c:	603b      	str	r3, [r7, #0]
	__asm volatile
 802324e:	683b      	ldr	r3, [r7, #0]
 8023250:	f383 8811 	msr	BASEPRI, r3
}
 8023254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8023256:	bf00      	nop
 8023258:	370c      	adds	r7, #12
 802325a:	46bd      	mov	sp, r7
 802325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023260:	4770      	bx	lr
 8023262:	bf00      	nop
 8023264:	20000128 	.word	0x20000128
	...

08023270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8023270:	f3ef 8009 	mrs	r0, PSP
 8023274:	f3bf 8f6f 	isb	sy
 8023278:	4b15      	ldr	r3, [pc, #84]	; (80232d0 <pxCurrentTCBConst>)
 802327a:	681a      	ldr	r2, [r3, #0]
 802327c:	f01e 0f10 	tst.w	lr, #16
 8023280:	bf08      	it	eq
 8023282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802328a:	6010      	str	r0, [r2, #0]
 802328c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8023294:	f380 8811 	msr	BASEPRI, r0
 8023298:	f3bf 8f4f 	dsb	sy
 802329c:	f3bf 8f6f 	isb	sy
 80232a0:	f7fe fe54 	bl	8021f4c <vTaskSwitchContext>
 80232a4:	f04f 0000 	mov.w	r0, #0
 80232a8:	f380 8811 	msr	BASEPRI, r0
 80232ac:	bc09      	pop	{r0, r3}
 80232ae:	6819      	ldr	r1, [r3, #0]
 80232b0:	6808      	ldr	r0, [r1, #0]
 80232b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232b6:	f01e 0f10 	tst.w	lr, #16
 80232ba:	bf08      	it	eq
 80232bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80232c0:	f380 8809 	msr	PSP, r0
 80232c4:	f3bf 8f6f 	isb	sy
 80232c8:	4770      	bx	lr
 80232ca:	bf00      	nop
 80232cc:	f3af 8000 	nop.w

080232d0 <pxCurrentTCBConst>:
 80232d0:	20001d38 	.word	0x20001d38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80232d4:	bf00      	nop
 80232d6:	bf00      	nop

080232d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80232d8:	b580      	push	{r7, lr}
 80232da:	b082      	sub	sp, #8
 80232dc:	af00      	add	r7, sp, #0
	__asm volatile
 80232de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80232e2:	f383 8811 	msr	BASEPRI, r3
 80232e6:	f3bf 8f6f 	isb	sy
 80232ea:	f3bf 8f4f 	dsb	sy
 80232ee:	607b      	str	r3, [r7, #4]
}
 80232f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80232f2:	f7fe fd71 	bl	8021dd8 <xTaskIncrementTick>
 80232f6:	4603      	mov	r3, r0
 80232f8:	2b00      	cmp	r3, #0
 80232fa:	d003      	beq.n	8023304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80232fc:	4b06      	ldr	r3, [pc, #24]	; (8023318 <xPortSysTickHandler+0x40>)
 80232fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8023302:	601a      	str	r2, [r3, #0]
 8023304:	2300      	movs	r3, #0
 8023306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8023308:	683b      	ldr	r3, [r7, #0]
 802330a:	f383 8811 	msr	BASEPRI, r3
}
 802330e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8023310:	bf00      	nop
 8023312:	3708      	adds	r7, #8
 8023314:	46bd      	mov	sp, r7
 8023316:	bd80      	pop	{r7, pc}
 8023318:	e000ed04 	.word	0xe000ed04

0802331c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 802331c:	b480      	push	{r7}
 802331e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8023320:	4b0b      	ldr	r3, [pc, #44]	; (8023350 <vPortSetupTimerInterrupt+0x34>)
 8023322:	2200      	movs	r2, #0
 8023324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8023326:	4b0b      	ldr	r3, [pc, #44]	; (8023354 <vPortSetupTimerInterrupt+0x38>)
 8023328:	2200      	movs	r2, #0
 802332a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 802332c:	4b0a      	ldr	r3, [pc, #40]	; (8023358 <vPortSetupTimerInterrupt+0x3c>)
 802332e:	681b      	ldr	r3, [r3, #0]
 8023330:	4a0a      	ldr	r2, [pc, #40]	; (802335c <vPortSetupTimerInterrupt+0x40>)
 8023332:	fba2 2303 	umull	r2, r3, r2, r3
 8023336:	099b      	lsrs	r3, r3, #6
 8023338:	4a09      	ldr	r2, [pc, #36]	; (8023360 <vPortSetupTimerInterrupt+0x44>)
 802333a:	3b01      	subs	r3, #1
 802333c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 802333e:	4b04      	ldr	r3, [pc, #16]	; (8023350 <vPortSetupTimerInterrupt+0x34>)
 8023340:	2207      	movs	r2, #7
 8023342:	601a      	str	r2, [r3, #0]
}
 8023344:	bf00      	nop
 8023346:	46bd      	mov	sp, r7
 8023348:	f85d 7b04 	ldr.w	r7, [sp], #4
 802334c:	4770      	bx	lr
 802334e:	bf00      	nop
 8023350:	e000e010 	.word	0xe000e010
 8023354:	e000e018 	.word	0xe000e018
 8023358:	20000000 	.word	0x20000000
 802335c:	10624dd3 	.word	0x10624dd3
 8023360:	e000e014 	.word	0xe000e014

08023364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8023374 <vPortEnableVFP+0x10>
 8023368:	6801      	ldr	r1, [r0, #0]
 802336a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802336e:	6001      	str	r1, [r0, #0]
 8023370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023372:	bf00      	nop
 8023374:	e000ed88 	.word	0xe000ed88

08023378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8023378:	b480      	push	{r7}
 802337a:	b085      	sub	sp, #20
 802337c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802337e:	f3ef 8305 	mrs	r3, IPSR
 8023382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8023384:	68fb      	ldr	r3, [r7, #12]
 8023386:	2b0f      	cmp	r3, #15
 8023388:	d914      	bls.n	80233b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802338a:	4a17      	ldr	r2, [pc, #92]	; (80233e8 <vPortValidateInterruptPriority+0x70>)
 802338c:	68fb      	ldr	r3, [r7, #12]
 802338e:	4413      	add	r3, r2
 8023390:	781b      	ldrb	r3, [r3, #0]
 8023392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8023394:	4b15      	ldr	r3, [pc, #84]	; (80233ec <vPortValidateInterruptPriority+0x74>)
 8023396:	781b      	ldrb	r3, [r3, #0]
 8023398:	7afa      	ldrb	r2, [r7, #11]
 802339a:	429a      	cmp	r2, r3
 802339c:	d20a      	bcs.n	80233b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802339e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80233a2:	f383 8811 	msr	BASEPRI, r3
 80233a6:	f3bf 8f6f 	isb	sy
 80233aa:	f3bf 8f4f 	dsb	sy
 80233ae:	607b      	str	r3, [r7, #4]
}
 80233b0:	bf00      	nop
 80233b2:	e7fe      	b.n	80233b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80233b4:	4b0e      	ldr	r3, [pc, #56]	; (80233f0 <vPortValidateInterruptPriority+0x78>)
 80233b6:	681b      	ldr	r3, [r3, #0]
 80233b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80233bc:	4b0d      	ldr	r3, [pc, #52]	; (80233f4 <vPortValidateInterruptPriority+0x7c>)
 80233be:	681b      	ldr	r3, [r3, #0]
 80233c0:	429a      	cmp	r2, r3
 80233c2:	d90a      	bls.n	80233da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80233c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80233c8:	f383 8811 	msr	BASEPRI, r3
 80233cc:	f3bf 8f6f 	isb	sy
 80233d0:	f3bf 8f4f 	dsb	sy
 80233d4:	603b      	str	r3, [r7, #0]
}
 80233d6:	bf00      	nop
 80233d8:	e7fe      	b.n	80233d8 <vPortValidateInterruptPriority+0x60>
	}
 80233da:	bf00      	nop
 80233dc:	3714      	adds	r7, #20
 80233de:	46bd      	mov	sp, r7
 80233e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233e4:	4770      	bx	lr
 80233e6:	bf00      	nop
 80233e8:	e000e3f0 	.word	0xe000e3f0
 80233ec:	2000236c 	.word	0x2000236c
 80233f0:	e000ed0c 	.word	0xe000ed0c
 80233f4:	20002370 	.word	0x20002370

080233f8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80233f8:	b580      	push	{r7, lr}
 80233fa:	b084      	sub	sp, #16
 80233fc:	af00      	add	r7, sp, #0
 80233fe:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8023400:	2300      	movs	r3, #0
 8023402:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8023404:	687b      	ldr	r3, [r7, #4]
 8023406:	f003 0307 	and.w	r3, r3, #7
 802340a:	2b00      	cmp	r3, #0
 802340c:	d004      	beq.n	8023418 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 802340e:	687b      	ldr	r3, [r7, #4]
 8023410:	f023 0307 	bic.w	r3, r3, #7
 8023414:	3308      	adds	r3, #8
 8023416:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8023418:	f7fe fc22 	bl	8021c60 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 802341c:	4b16      	ldr	r3, [pc, #88]	; (8023478 <pvPortMalloc+0x80>)
 802341e:	681b      	ldr	r3, [r3, #0]
 8023420:	2b00      	cmp	r3, #0
 8023422:	d105      	bne.n	8023430 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8023424:	4b15      	ldr	r3, [pc, #84]	; (802347c <pvPortMalloc+0x84>)
 8023426:	f023 0307 	bic.w	r3, r3, #7
 802342a:	461a      	mov	r2, r3
 802342c:	4b12      	ldr	r3, [pc, #72]	; (8023478 <pvPortMalloc+0x80>)
 802342e:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8023430:	4b13      	ldr	r3, [pc, #76]	; (8023480 <pvPortMalloc+0x88>)
 8023432:	681a      	ldr	r2, [r3, #0]
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	4413      	add	r3, r2
 8023438:	f24b 1227 	movw	r2, #45351	; 0xb127
 802343c:	4293      	cmp	r3, r2
 802343e:	d813      	bhi.n	8023468 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8023440:	4b0f      	ldr	r3, [pc, #60]	; (8023480 <pvPortMalloc+0x88>)
 8023442:	681a      	ldr	r2, [r3, #0]
 8023444:	687b      	ldr	r3, [r7, #4]
 8023446:	441a      	add	r2, r3
 8023448:	4b0d      	ldr	r3, [pc, #52]	; (8023480 <pvPortMalloc+0x88>)
 802344a:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 802344c:	429a      	cmp	r2, r3
 802344e:	d90b      	bls.n	8023468 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8023450:	4b09      	ldr	r3, [pc, #36]	; (8023478 <pvPortMalloc+0x80>)
 8023452:	681a      	ldr	r2, [r3, #0]
 8023454:	4b0a      	ldr	r3, [pc, #40]	; (8023480 <pvPortMalloc+0x88>)
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	4413      	add	r3, r2
 802345a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 802345c:	4b08      	ldr	r3, [pc, #32]	; (8023480 <pvPortMalloc+0x88>)
 802345e:	681a      	ldr	r2, [r3, #0]
 8023460:	687b      	ldr	r3, [r7, #4]
 8023462:	4413      	add	r3, r2
 8023464:	4a06      	ldr	r2, [pc, #24]	; (8023480 <pvPortMalloc+0x88>)
 8023466:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8023468:	f7fe fc08 	bl	8021c7c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 802346c:	68fb      	ldr	r3, [r7, #12]
}
 802346e:	4618      	mov	r0, r3
 8023470:	3710      	adds	r7, #16
 8023472:	46bd      	mov	sp, r7
 8023474:	bd80      	pop	{r7, pc}
 8023476:	bf00      	nop
 8023478:	2000d4a8 	.word	0x2000d4a8
 802347c:	2000237c 	.word	0x2000237c
 8023480:	2000d4a4 	.word	0x2000d4a4

08023484 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023484:	b480      	push	{r7}
 8023486:	b085      	sub	sp, #20
 8023488:	af00      	add	r7, sp, #0
 802348a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	2b00      	cmp	r3, #0
 8023490:	d00a      	beq.n	80234a8 <vPortFree+0x24>
	__asm volatile
 8023492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023496:	f383 8811 	msr	BASEPRI, r3
 802349a:	f3bf 8f6f 	isb	sy
 802349e:	f3bf 8f4f 	dsb	sy
 80234a2:	60fb      	str	r3, [r7, #12]
}
 80234a4:	bf00      	nop
 80234a6:	e7fe      	b.n	80234a6 <vPortFree+0x22>
}
 80234a8:	bf00      	nop
 80234aa:	3714      	adds	r7, #20
 80234ac:	46bd      	mov	sp, r7
 80234ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234b2:	4770      	bx	lr

080234b4 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 80234b4:	b480      	push	{r7}
 80234b6:	b083      	sub	sp, #12
 80234b8:	af00      	add	r7, sp, #0
 80234ba:	6078      	str	r0, [r7, #4]
 80234bc:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 80234be:	683a      	ldr	r2, [r7, #0]
 80234c0:	687b      	ldr	r3, [r7, #4]
 80234c2:	4293      	cmp	r3, r2
 80234c4:	bf38      	it	cc
 80234c6:	4613      	movcc	r3, r2
}
 80234c8:	4618      	mov	r0, r3
 80234ca:	370c      	adds	r7, #12
 80234cc:	46bd      	mov	sp, r7
 80234ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234d2:	4770      	bx	lr

080234d4 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 80234d4:	b480      	push	{r7}
 80234d6:	b083      	sub	sp, #12
 80234d8:	af00      	add	r7, sp, #0
 80234da:	6078      	str	r0, [r7, #4]
 80234dc:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 80234de:	683a      	ldr	r2, [r7, #0]
 80234e0:	687b      	ldr	r3, [r7, #4]
 80234e2:	4293      	cmp	r3, r2
 80234e4:	bf28      	it	cs
 80234e6:	4613      	movcs	r3, r2
}
 80234e8:	4618      	mov	r0, r3
 80234ea:	370c      	adds	r7, #12
 80234ec:	46bd      	mov	sp, r7
 80234ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80234f2:	4770      	bx	lr

080234f4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80234f4:	b480      	push	{r7}
 80234f6:	b083      	sub	sp, #12
 80234f8:	af00      	add	r7, sp, #0
 80234fa:	6078      	str	r0, [r7, #4]
 80234fc:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80234fe:	687b      	ldr	r3, [r7, #4]
 8023500:	683a      	ldr	r2, [r7, #0]
 8023502:	fbb3 f2f2 	udiv	r2, r3, r2
 8023506:	6839      	ldr	r1, [r7, #0]
 8023508:	fb01 f202 	mul.w	r2, r1, r2
 802350c:	1a9b      	subs	r3, r3, r2
 802350e:	687a      	ldr	r2, [r7, #4]
 8023510:	1ad3      	subs	r3, r2, r3
}
 8023512:	4618      	mov	r0, r3
 8023514:	370c      	adds	r7, #12
 8023516:	46bd      	mov	sp, r7
 8023518:	f85d 7b04 	ldr.w	r7, [sp], #4
 802351c:	4770      	bx	lr

0802351e <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 802351e:	b580      	push	{r7, lr}
 8023520:	b082      	sub	sp, #8
 8023522:	af00      	add	r7, sp, #0
 8023524:	6078      	str	r0, [r7, #4]
 8023526:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 8023528:	687a      	ldr	r2, [r7, #4]
 802352a:	683b      	ldr	r3, [r7, #0]
 802352c:	4413      	add	r3, r2
 802352e:	3b01      	subs	r3, #1
 8023530:	6839      	ldr	r1, [r7, #0]
 8023532:	4618      	mov	r0, r3
 8023534:	f7ff ffde 	bl	80234f4 <lfs_aligndown>
 8023538:	4603      	mov	r3, r0
}
 802353a:	4618      	mov	r0, r3
 802353c:	3708      	adds	r7, #8
 802353e:	46bd      	mov	sp, r7
 8023540:	bd80      	pop	{r7, pc}

08023542 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8023542:	b480      	push	{r7}
 8023544:	b083      	sub	sp, #12
 8023546:	af00      	add	r7, sp, #0
 8023548:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 802354a:	687b      	ldr	r3, [r7, #4]
 802354c:	3b01      	subs	r3, #1
 802354e:	fab3 f383 	clz	r3, r3
 8023552:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8023556:	4618      	mov	r0, r3
 8023558:	370c      	adds	r7, #12
 802355a:	46bd      	mov	sp, r7
 802355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023560:	4770      	bx	lr

08023562 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023562:	b480      	push	{r7}
 8023564:	b083      	sub	sp, #12
 8023566:	af00      	add	r7, sp, #0
 8023568:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 802356a:	687b      	ldr	r3, [r7, #4]
 802356c:	fa93 f3a3 	rbit	r3, r3
 8023570:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8023574:	4618      	mov	r0, r3
 8023576:	370c      	adds	r7, #12
 8023578:	46bd      	mov	sp, r7
 802357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802357e:	4770      	bx	lr

08023580 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8023580:	b580      	push	{r7, lr}
 8023582:	b082      	sub	sp, #8
 8023584:	af00      	add	r7, sp, #0
 8023586:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8023588:	6878      	ldr	r0, [r7, #4]
 802358a:	f7ed fbad 	bl	8010ce8 <__popcountsi2>
 802358e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8023590:	4618      	mov	r0, r3
 8023592:	3708      	adds	r7, #8
 8023594:	46bd      	mov	sp, r7
 8023596:	bd80      	pop	{r7, pc}

08023598 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8023598:	b480      	push	{r7}
 802359a:	b083      	sub	sp, #12
 802359c:	af00      	add	r7, sp, #0
 802359e:	6078      	str	r0, [r7, #4]
 80235a0:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80235a2:	687a      	ldr	r2, [r7, #4]
 80235a4:	683b      	ldr	r3, [r7, #0]
 80235a6:	1ad3      	subs	r3, r2, r3
}
 80235a8:	4618      	mov	r0, r3
 80235aa:	370c      	adds	r7, #12
 80235ac:	46bd      	mov	sp, r7
 80235ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235b2:	4770      	bx	lr

080235b4 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80235b4:	b480      	push	{r7}
 80235b6:	b083      	sub	sp, #12
 80235b8:	af00      	add	r7, sp, #0
 80235ba:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 80235bc:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80235be:	4618      	mov	r0, r3
 80235c0:	370c      	adds	r7, #12
 80235c2:	46bd      	mov	sp, r7
 80235c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235c8:	4770      	bx	lr

080235ca <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80235ca:	b580      	push	{r7, lr}
 80235cc:	b082      	sub	sp, #8
 80235ce:	af00      	add	r7, sp, #0
 80235d0:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80235d2:	6878      	ldr	r0, [r7, #4]
 80235d4:	f7ff ffee 	bl	80235b4 <lfs_fromle32>
 80235d8:	4603      	mov	r3, r0
}
 80235da:	4618      	mov	r0, r3
 80235dc:	3708      	adds	r7, #8
 80235de:	46bd      	mov	sp, r7
 80235e0:	bd80      	pop	{r7, pc}

080235e2 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80235e2:	b480      	push	{r7}
 80235e4:	b083      	sub	sp, #12
 80235e6:	af00      	add	r7, sp, #0
 80235e8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80235ea:	687b      	ldr	r3, [r7, #4]
 80235ec:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 80235ee:	4618      	mov	r0, r3
 80235f0:	370c      	adds	r7, #12
 80235f2:	46bd      	mov	sp, r7
 80235f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235f8:	4770      	bx	lr

080235fa <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80235fa:	b580      	push	{r7, lr}
 80235fc:	b082      	sub	sp, #8
 80235fe:	af00      	add	r7, sp, #0
 8023600:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8023602:	6878      	ldr	r0, [r7, #4]
 8023604:	f7ff ffed 	bl	80235e2 <lfs_frombe32>
 8023608:	4603      	mov	r3, r0
}
 802360a:	4618      	mov	r0, r3
 802360c:	3708      	adds	r7, #8
 802360e:	46bd      	mov	sp, r7
 8023610:	bd80      	pop	{r7, pc}

08023612 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8023612:	b580      	push	{r7, lr}
 8023614:	b082      	sub	sp, #8
 8023616:	af00      	add	r7, sp, #0
 8023618:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 802361a:	6878      	ldr	r0, [r7, #4]
 802361c:	f008 fed2 	bl	802c3c4 <malloc>
 8023620:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8023622:	4618      	mov	r0, r3
 8023624:	3708      	adds	r7, #8
 8023626:	46bd      	mov	sp, r7
 8023628:	bd80      	pop	{r7, pc}

0802362a <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 802362a:	b580      	push	{r7, lr}
 802362c:	b082      	sub	sp, #8
 802362e:	af00      	add	r7, sp, #0
 8023630:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8023632:	6878      	ldr	r0, [r7, #4]
 8023634:	f008 fece 	bl	802c3d4 <free>
#else
    (void)p;
#endif
}
 8023638:	bf00      	nop
 802363a:	3708      	adds	r7, #8
 802363c:	46bd      	mov	sp, r7
 802363e:	bd80      	pop	{r7, pc}

08023640 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8023640:	b480      	push	{r7}
 8023642:	b083      	sub	sp, #12
 8023644:	af00      	add	r7, sp, #0
 8023646:	6078      	str	r0, [r7, #4]
 8023648:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 802364a:	683b      	ldr	r3, [r7, #0]
 802364c:	f04f 32ff 	mov.w	r2, #4294967295
 8023650:	601a      	str	r2, [r3, #0]
}
 8023652:	bf00      	nop
 8023654:	370c      	adds	r7, #12
 8023656:	46bd      	mov	sp, r7
 8023658:	f85d 7b04 	ldr.w	r7, [sp], #4
 802365c:	4770      	bx	lr

0802365e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 802365e:	b580      	push	{r7, lr}
 8023660:	b082      	sub	sp, #8
 8023662:	af00      	add	r7, sp, #0
 8023664:	6078      	str	r0, [r7, #4]
 8023666:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023668:	683b      	ldr	r3, [r7, #0]
 802366a:	68d8      	ldr	r0, [r3, #12]
 802366c:	687b      	ldr	r3, [r7, #4]
 802366e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023672:	461a      	mov	r2, r3
 8023674:	21ff      	movs	r1, #255	; 0xff
 8023676:	f00a f841 	bl	802d6fc <memset>
    pcache->block = LFS_BLOCK_NULL;
 802367a:	683b      	ldr	r3, [r7, #0]
 802367c:	f04f 32ff 	mov.w	r2, #4294967295
 8023680:	601a      	str	r2, [r3, #0]
}
 8023682:	bf00      	nop
 8023684:	3708      	adds	r7, #8
 8023686:	46bd      	mov	sp, r7
 8023688:	bd80      	pop	{r7, pc}
	...

0802368c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 802368c:	b5b0      	push	{r4, r5, r7, lr}
 802368e:	b08a      	sub	sp, #40	; 0x28
 8023690:	af02      	add	r7, sp, #8
 8023692:	60f8      	str	r0, [r7, #12]
 8023694:	60b9      	str	r1, [r7, #8]
 8023696:	607a      	str	r2, [r7, #4]
 8023698:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 802369a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802369c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 802369e:	68fb      	ldr	r3, [r7, #12]
 80236a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80236a2:	6a1b      	ldr	r3, [r3, #32]
 80236a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80236a6:	429a      	cmp	r2, r3
 80236a8:	d208      	bcs.n	80236bc <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 80236aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80236ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80236ae:	441a      	add	r2, r3
 80236b0:	68fb      	ldr	r3, [r7, #12]
 80236b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80236b4:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 80236b6:	429a      	cmp	r2, r3
 80236b8:	f240 811b 	bls.w	80238f2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 80236bc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80236c0:	e11c      	b.n	80238fc <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80236c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80236c4:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80236c6:	68bb      	ldr	r3, [r7, #8]
 80236c8:	2b00      	cmp	r3, #0
 80236ca:	d03f      	beq.n	802374c <lfs_bd_read+0xc0>
 80236cc:	68bb      	ldr	r3, [r7, #8]
 80236ce:	681b      	ldr	r3, [r3, #0]
 80236d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80236d2:	429a      	cmp	r2, r3
 80236d4:	d13a      	bne.n	802374c <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 80236d6:	68bb      	ldr	r3, [r7, #8]
 80236d8:	685a      	ldr	r2, [r3, #4]
 80236da:	68bb      	ldr	r3, [r7, #8]
 80236dc:	689b      	ldr	r3, [r3, #8]
 80236de:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80236e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80236e2:	429a      	cmp	r2, r3
 80236e4:	d232      	bcs.n	802374c <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 80236e6:	68bb      	ldr	r3, [r7, #8]
 80236e8:	685b      	ldr	r3, [r3, #4]
 80236ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80236ec:	429a      	cmp	r2, r3
 80236ee:	d324      	bcc.n	802373a <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 80236f0:	68bb      	ldr	r3, [r7, #8]
 80236f2:	689a      	ldr	r2, [r3, #8]
 80236f4:	68bb      	ldr	r3, [r7, #8]
 80236f6:	6859      	ldr	r1, [r3, #4]
 80236f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80236fa:	1acb      	subs	r3, r1, r3
 80236fc:	4413      	add	r3, r2
 80236fe:	4619      	mov	r1, r3
 8023700:	69b8      	ldr	r0, [r7, #24]
 8023702:	f7ff fee7 	bl	80234d4 <lfs_min>
 8023706:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8023708:	68bb      	ldr	r3, [r7, #8]
 802370a:	68da      	ldr	r2, [r3, #12]
 802370c:	68bb      	ldr	r3, [r7, #8]
 802370e:	685b      	ldr	r3, [r3, #4]
 8023710:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023712:	1acb      	subs	r3, r1, r3
 8023714:	4413      	add	r3, r2
 8023716:	69ba      	ldr	r2, [r7, #24]
 8023718:	4619      	mov	r1, r3
 802371a:	69f8      	ldr	r0, [r7, #28]
 802371c:	f00a f9c3 	bl	802daa6 <memcpy>

                data += diff;
 8023720:	69fa      	ldr	r2, [r7, #28]
 8023722:	69bb      	ldr	r3, [r7, #24]
 8023724:	4413      	add	r3, r2
 8023726:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802372a:	69bb      	ldr	r3, [r7, #24]
 802372c:	4413      	add	r3, r2
 802372e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023732:	69bb      	ldr	r3, [r7, #24]
 8023734:	1ad3      	subs	r3, r2, r3
 8023736:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023738:	e0db      	b.n	80238f2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 802373a:	68bb      	ldr	r3, [r7, #8]
 802373c:	685a      	ldr	r2, [r3, #4]
 802373e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023740:	1ad3      	subs	r3, r2, r3
 8023742:	4619      	mov	r1, r3
 8023744:	69b8      	ldr	r0, [r7, #24]
 8023746:	f7ff fec5 	bl	80234d4 <lfs_min>
 802374a:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 802374c:	687b      	ldr	r3, [r7, #4]
 802374e:	681b      	ldr	r3, [r3, #0]
 8023750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023752:	429a      	cmp	r2, r3
 8023754:	d13a      	bne.n	80237cc <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8023756:	687b      	ldr	r3, [r7, #4]
 8023758:	685a      	ldr	r2, [r3, #4]
 802375a:	687b      	ldr	r3, [r7, #4]
 802375c:	689b      	ldr	r3, [r3, #8]
 802375e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023760:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023762:	429a      	cmp	r2, r3
 8023764:	d232      	bcs.n	80237cc <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023766:	687b      	ldr	r3, [r7, #4]
 8023768:	685b      	ldr	r3, [r3, #4]
 802376a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802376c:	429a      	cmp	r2, r3
 802376e:	d324      	bcc.n	80237ba <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	689a      	ldr	r2, [r3, #8]
 8023774:	687b      	ldr	r3, [r7, #4]
 8023776:	6859      	ldr	r1, [r3, #4]
 8023778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802377a:	1acb      	subs	r3, r1, r3
 802377c:	4413      	add	r3, r2
 802377e:	4619      	mov	r1, r3
 8023780:	69b8      	ldr	r0, [r7, #24]
 8023782:	f7ff fea7 	bl	80234d4 <lfs_min>
 8023786:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	68da      	ldr	r2, [r3, #12]
 802378c:	687b      	ldr	r3, [r7, #4]
 802378e:	685b      	ldr	r3, [r3, #4]
 8023790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023792:	1acb      	subs	r3, r1, r3
 8023794:	4413      	add	r3, r2
 8023796:	69ba      	ldr	r2, [r7, #24]
 8023798:	4619      	mov	r1, r3
 802379a:	69f8      	ldr	r0, [r7, #28]
 802379c:	f00a f983 	bl	802daa6 <memcpy>

                data += diff;
 80237a0:	69fa      	ldr	r2, [r7, #28]
 80237a2:	69bb      	ldr	r3, [r7, #24]
 80237a4:	4413      	add	r3, r2
 80237a6:	61fb      	str	r3, [r7, #28]
                off += diff;
 80237a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80237aa:	69bb      	ldr	r3, [r7, #24]
 80237ac:	4413      	add	r3, r2
 80237ae:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80237b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80237b2:	69bb      	ldr	r3, [r7, #24]
 80237b4:	1ad3      	subs	r3, r2, r3
 80237b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80237b8:	e09b      	b.n	80238f2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80237ba:	687b      	ldr	r3, [r7, #4]
 80237bc:	685a      	ldr	r2, [r3, #4]
 80237be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237c0:	1ad3      	subs	r3, r2, r3
 80237c2:	4619      	mov	r1, r3
 80237c4:	69b8      	ldr	r0, [r7, #24]
 80237c6:	f7ff fe85 	bl	80234d4 <lfs_min>
 80237ca:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80237cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80237ce:	683b      	ldr	r3, [r7, #0]
 80237d0:	429a      	cmp	r2, r3
 80237d2:	d336      	bcc.n	8023842 <lfs_bd_read+0x1b6>
 80237d4:	68fb      	ldr	r3, [r7, #12]
 80237d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237d8:	695a      	ldr	r2, [r3, #20]
 80237da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80237dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80237e0:	fb01 f202 	mul.w	r2, r1, r2
 80237e4:	1a9b      	subs	r3, r3, r2
 80237e6:	2b00      	cmp	r3, #0
 80237e8:	d12b      	bne.n	8023842 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 80237ea:	68fb      	ldr	r3, [r7, #12]
 80237ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237ee:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 80237f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80237f2:	429a      	cmp	r2, r3
 80237f4:	d325      	bcc.n	8023842 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 80237f6:	68fb      	ldr	r3, [r7, #12]
 80237f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80237fa:	695b      	ldr	r3, [r3, #20]
 80237fc:	4619      	mov	r1, r3
 80237fe:	69b8      	ldr	r0, [r7, #24]
 8023800:	f7ff fe78 	bl	80234f4 <lfs_aligndown>
 8023804:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8023806:	68fb      	ldr	r3, [r7, #12]
 8023808:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802380a:	685c      	ldr	r4, [r3, #4]
 802380c:	68fb      	ldr	r3, [r7, #12]
 802380e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023810:	69bb      	ldr	r3, [r7, #24]
 8023812:	9300      	str	r3, [sp, #0]
 8023814:	69fb      	ldr	r3, [r7, #28]
 8023816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023818:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802381a:	47a0      	blx	r4
 802381c:	6178      	str	r0, [r7, #20]
            if (err) {
 802381e:	697b      	ldr	r3, [r7, #20]
 8023820:	2b00      	cmp	r3, #0
 8023822:	d001      	beq.n	8023828 <lfs_bd_read+0x19c>
                return err;
 8023824:	697b      	ldr	r3, [r7, #20]
 8023826:	e069      	b.n	80238fc <lfs_bd_read+0x270>
            }

            data += diff;
 8023828:	69fa      	ldr	r2, [r7, #28]
 802382a:	69bb      	ldr	r3, [r7, #24]
 802382c:	4413      	add	r3, r2
 802382e:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023830:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023832:	69bb      	ldr	r3, [r7, #24]
 8023834:	4413      	add	r3, r2
 8023836:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8023838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 802383a:	69bb      	ldr	r3, [r7, #24]
 802383c:	1ad3      	subs	r3, r2, r3
 802383e:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8023840:	e057      	b.n	80238f2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8023842:	68fb      	ldr	r3, [r7, #12]
 8023844:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023846:	6a1b      	ldr	r3, [r3, #32]
 8023848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802384a:	429a      	cmp	r2, r3
 802384c:	d305      	bcc.n	802385a <lfs_bd_read+0x1ce>
 802384e:	4b2d      	ldr	r3, [pc, #180]	; (8023904 <lfs_bd_read+0x278>)
 8023850:	4a2d      	ldr	r2, [pc, #180]	; (8023908 <lfs_bd_read+0x27c>)
 8023852:	216b      	movs	r1, #107	; 0x6b
 8023854:	482d      	ldr	r0, [pc, #180]	; (802390c <lfs_bd_read+0x280>)
 8023856:	f008 fd81 	bl	802c35c <__assert_func>
        rcache->block = block;
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802385e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023860:	68fb      	ldr	r3, [r7, #12]
 8023862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023864:	695b      	ldr	r3, [r3, #20]
 8023866:	4619      	mov	r1, r3
 8023868:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802386a:	f7ff fe43 	bl	80234f4 <lfs_aligndown>
 802386e:	4602      	mov	r2, r0
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023876:	683b      	ldr	r3, [r7, #0]
 8023878:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 802387a:	68fb      	ldr	r3, [r7, #12]
 802387c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802387e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023880:	4619      	mov	r1, r3
 8023882:	4610      	mov	r0, r2
 8023884:	f7ff fe4b 	bl	802351e <lfs_alignup>
 8023888:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 802388a:	68fb      	ldr	r3, [r7, #12]
 802388c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802388e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023890:	4619      	mov	r1, r3
 8023892:	4610      	mov	r0, r2
 8023894:	f7ff fe1e 	bl	80234d4 <lfs_min>
 8023898:	4602      	mov	r2, r0
                - rcache->off,
 802389a:	687b      	ldr	r3, [r7, #4]
 802389c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 802389e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 80238a0:	68fb      	ldr	r3, [r7, #12]
 80238a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 80238a6:	4619      	mov	r1, r3
 80238a8:	4610      	mov	r0, r2
 80238aa:	f7ff fe13 	bl	80234d4 <lfs_min>
 80238ae:	4602      	mov	r2, r0
 80238b0:	687b      	ldr	r3, [r7, #4]
 80238b2:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80238b4:	68fb      	ldr	r3, [r7, #12]
 80238b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80238b8:	685c      	ldr	r4, [r3, #4]
 80238ba:	68fb      	ldr	r3, [r7, #12]
 80238bc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80238be:	687b      	ldr	r3, [r7, #4]
 80238c0:	6819      	ldr	r1, [r3, #0]
 80238c2:	687b      	ldr	r3, [r7, #4]
 80238c4:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 80238c6:	687b      	ldr	r3, [r7, #4]
 80238c8:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 80238ca:	687b      	ldr	r3, [r7, #4]
 80238cc:	689b      	ldr	r3, [r3, #8]
 80238ce:	9300      	str	r3, [sp, #0]
 80238d0:	462b      	mov	r3, r5
 80238d2:	47a0      	blx	r4
 80238d4:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 80238d6:	693b      	ldr	r3, [r7, #16]
 80238d8:	2b00      	cmp	r3, #0
 80238da:	dd05      	ble.n	80238e8 <lfs_bd_read+0x25c>
 80238dc:	4b0c      	ldr	r3, [pc, #48]	; (8023910 <lfs_bd_read+0x284>)
 80238de:	4a0a      	ldr	r2, [pc, #40]	; (8023908 <lfs_bd_read+0x27c>)
 80238e0:	2176      	movs	r1, #118	; 0x76
 80238e2:	480a      	ldr	r0, [pc, #40]	; (802390c <lfs_bd_read+0x280>)
 80238e4:	f008 fd3a 	bl	802c35c <__assert_func>
        if (err) {
 80238e8:	693b      	ldr	r3, [r7, #16]
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	d001      	beq.n	80238f2 <lfs_bd_read+0x266>
            return err;
 80238ee:	693b      	ldr	r3, [r7, #16]
 80238f0:	e004      	b.n	80238fc <lfs_bd_read+0x270>
    while (size > 0) {
 80238f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80238f4:	2b00      	cmp	r3, #0
 80238f6:	f47f aee4 	bne.w	80236c2 <lfs_bd_read+0x36>
        }
    }

    return 0;
 80238fa:	2300      	movs	r3, #0
}
 80238fc:	4618      	mov	r0, r3
 80238fe:	3720      	adds	r7, #32
 8023900:	46bd      	mov	sp, r7
 8023902:	bdb0      	pop	{r4, r5, r7, pc}
 8023904:	08033338 	.word	0x08033338
 8023908:	0803460c 	.word	0x0803460c
 802390c:	08033358 	.word	0x08033358
 8023910:	0803338c 	.word	0x0803338c

08023914 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023914:	b580      	push	{r7, lr}
 8023916:	b08e      	sub	sp, #56	; 0x38
 8023918:	af04      	add	r7, sp, #16
 802391a:	60f8      	str	r0, [r7, #12]
 802391c:	60b9      	str	r1, [r7, #8]
 802391e:	607a      	str	r2, [r7, #4]
 8023920:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8023922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023924:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8023926:	2300      	movs	r3, #0
 8023928:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 802392a:	2300      	movs	r3, #0
 802392c:	627b      	str	r3, [r7, #36]	; 0x24
 802392e:	e039      	b.n	80239a4 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8023930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023934:	1ad3      	subs	r3, r2, r3
 8023936:	2108      	movs	r1, #8
 8023938:	4618      	mov	r0, r3
 802393a:	f7ff fdcb 	bl	80234d4 <lfs_min>
 802393e:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8023940:	683a      	ldr	r2, [r7, #0]
 8023942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023944:	1ad1      	subs	r1, r2, r3
 8023946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802394a:	4413      	add	r3, r2
 802394c:	69fa      	ldr	r2, [r7, #28]
 802394e:	9203      	str	r2, [sp, #12]
 8023950:	f107 0210 	add.w	r2, r7, #16
 8023954:	9202      	str	r2, [sp, #8]
 8023956:	9301      	str	r3, [sp, #4]
 8023958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802395a:	9300      	str	r3, [sp, #0]
 802395c:	460b      	mov	r3, r1
 802395e:	687a      	ldr	r2, [r7, #4]
 8023960:	68b9      	ldr	r1, [r7, #8]
 8023962:	68f8      	ldr	r0, [r7, #12]
 8023964:	f7ff fe92 	bl	802368c <lfs_bd_read>
 8023968:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 802396a:	69bb      	ldr	r3, [r7, #24]
 802396c:	2b00      	cmp	r3, #0
 802396e:	d001      	beq.n	8023974 <lfs_bd_cmp+0x60>
            return res;
 8023970:	69bb      	ldr	r3, [r7, #24]
 8023972:	e01c      	b.n	80239ae <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023974:	6a3a      	ldr	r2, [r7, #32]
 8023976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023978:	18d1      	adds	r1, r2, r3
 802397a:	f107 0310 	add.w	r3, r7, #16
 802397e:	69fa      	ldr	r2, [r7, #28]
 8023980:	4618      	mov	r0, r3
 8023982:	f009 fe91 	bl	802d6a8 <memcmp>
 8023986:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023988:	69bb      	ldr	r3, [r7, #24]
 802398a:	2b00      	cmp	r3, #0
 802398c:	d006      	beq.n	802399c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 802398e:	69bb      	ldr	r3, [r7, #24]
 8023990:	2b00      	cmp	r3, #0
 8023992:	da01      	bge.n	8023998 <lfs_bd_cmp+0x84>
 8023994:	2301      	movs	r3, #1
 8023996:	e00a      	b.n	80239ae <lfs_bd_cmp+0x9a>
 8023998:	2302      	movs	r3, #2
 802399a:	e008      	b.n	80239ae <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 802399c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802399e:	69fb      	ldr	r3, [r7, #28]
 80239a0:	4413      	add	r3, r2
 80239a2:	627b      	str	r3, [r7, #36]	; 0x24
 80239a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80239a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80239a8:	429a      	cmp	r2, r3
 80239aa:	d3c1      	bcc.n	8023930 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 80239ac:	2300      	movs	r3, #0
}
 80239ae:	4618      	mov	r0, r3
 80239b0:	3728      	adds	r7, #40	; 0x28
 80239b2:	46bd      	mov	sp, r7
 80239b4:	bd80      	pop	{r7, pc}
	...

080239b8 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 80239b8:	b5b0      	push	{r4, r5, r7, lr}
 80239ba:	b08c      	sub	sp, #48	; 0x30
 80239bc:	af04      	add	r7, sp, #16
 80239be:	60f8      	str	r0, [r7, #12]
 80239c0:	60b9      	str	r1, [r7, #8]
 80239c2:	607a      	str	r2, [r7, #4]
 80239c4:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 80239c6:	68bb      	ldr	r3, [r7, #8]
 80239c8:	681b      	ldr	r3, [r3, #0]
 80239ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80239ce:	d061      	beq.n	8023a94 <lfs_bd_flush+0xdc>
 80239d0:	68bb      	ldr	r3, [r7, #8]
 80239d2:	681b      	ldr	r3, [r3, #0]
 80239d4:	f113 0f02 	cmn.w	r3, #2
 80239d8:	d05c      	beq.n	8023a94 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 80239da:	68bb      	ldr	r3, [r7, #8]
 80239dc:	681a      	ldr	r2, [r3, #0]
 80239de:	68fb      	ldr	r3, [r7, #12]
 80239e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80239e2:	6a1b      	ldr	r3, [r3, #32]
 80239e4:	429a      	cmp	r2, r3
 80239e6:	d305      	bcc.n	80239f4 <lfs_bd_flush+0x3c>
 80239e8:	4b2d      	ldr	r3, [pc, #180]	; (8023aa0 <lfs_bd_flush+0xe8>)
 80239ea:	4a2e      	ldr	r2, [pc, #184]	; (8023aa4 <lfs_bd_flush+0xec>)
 80239ec:	219e      	movs	r1, #158	; 0x9e
 80239ee:	482e      	ldr	r0, [pc, #184]	; (8023aa8 <lfs_bd_flush+0xf0>)
 80239f0:	f008 fcb4 	bl	802c35c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 80239f4:	68bb      	ldr	r3, [r7, #8]
 80239f6:	689a      	ldr	r2, [r3, #8]
 80239f8:	68fb      	ldr	r3, [r7, #12]
 80239fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80239fc:	699b      	ldr	r3, [r3, #24]
 80239fe:	4619      	mov	r1, r3
 8023a00:	4610      	mov	r0, r2
 8023a02:	f7ff fd8c 	bl	802351e <lfs_alignup>
 8023a06:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023a08:	68fb      	ldr	r3, [r7, #12]
 8023a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a0c:	689c      	ldr	r4, [r3, #8]
 8023a0e:	68fb      	ldr	r3, [r7, #12]
 8023a10:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023a12:	68bb      	ldr	r3, [r7, #8]
 8023a14:	6819      	ldr	r1, [r3, #0]
 8023a16:	68bb      	ldr	r3, [r7, #8]
 8023a18:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8023a1a:	68bb      	ldr	r3, [r7, #8]
 8023a1c:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023a1e:	69fb      	ldr	r3, [r7, #28]
 8023a20:	9300      	str	r3, [sp, #0]
 8023a22:	462b      	mov	r3, r5
 8023a24:	47a0      	blx	r4
 8023a26:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8023a28:	69bb      	ldr	r3, [r7, #24]
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	dd05      	ble.n	8023a3a <lfs_bd_flush+0x82>
 8023a2e:	4b1f      	ldr	r3, [pc, #124]	; (8023aac <lfs_bd_flush+0xf4>)
 8023a30:	4a1c      	ldr	r2, [pc, #112]	; (8023aa4 <lfs_bd_flush+0xec>)
 8023a32:	21a2      	movs	r1, #162	; 0xa2
 8023a34:	481c      	ldr	r0, [pc, #112]	; (8023aa8 <lfs_bd_flush+0xf0>)
 8023a36:	f008 fc91 	bl	802c35c <__assert_func>
        if (err) {
 8023a3a:	69bb      	ldr	r3, [r7, #24]
 8023a3c:	2b00      	cmp	r3, #0
 8023a3e:	d001      	beq.n	8023a44 <lfs_bd_flush+0x8c>
            return err;
 8023a40:	69bb      	ldr	r3, [r7, #24]
 8023a42:	e028      	b.n	8023a96 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8023a44:	78fb      	ldrb	r3, [r7, #3]
 8023a46:	2b00      	cmp	r3, #0
 8023a48:	d020      	beq.n	8023a8c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8023a4a:	6879      	ldr	r1, [r7, #4]
 8023a4c:	68f8      	ldr	r0, [r7, #12]
 8023a4e:	f7ff fdf7 	bl	8023640 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023a52:	68bb      	ldr	r3, [r7, #8]
 8023a54:	681b      	ldr	r3, [r3, #0]
 8023a56:	68ba      	ldr	r2, [r7, #8]
 8023a58:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8023a5a:	68b9      	ldr	r1, [r7, #8]
 8023a5c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8023a5e:	69f8      	ldr	r0, [r7, #28]
 8023a60:	9003      	str	r0, [sp, #12]
 8023a62:	9102      	str	r1, [sp, #8]
 8023a64:	9201      	str	r2, [sp, #4]
 8023a66:	9300      	str	r3, [sp, #0]
 8023a68:	69fb      	ldr	r3, [r7, #28]
 8023a6a:	687a      	ldr	r2, [r7, #4]
 8023a6c:	2100      	movs	r1, #0
 8023a6e:	68f8      	ldr	r0, [r7, #12]
 8023a70:	f7ff ff50 	bl	8023914 <lfs_bd_cmp>
 8023a74:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023a76:	697b      	ldr	r3, [r7, #20]
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	da01      	bge.n	8023a80 <lfs_bd_flush+0xc8>
                return res;
 8023a7c:	697b      	ldr	r3, [r7, #20]
 8023a7e:	e00a      	b.n	8023a96 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023a80:	697b      	ldr	r3, [r7, #20]
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	d002      	beq.n	8023a8c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023a86:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023a8a:	e004      	b.n	8023a96 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8023a8c:	68b9      	ldr	r1, [r7, #8]
 8023a8e:	68f8      	ldr	r0, [r7, #12]
 8023a90:	f7ff fde5 	bl	802365e <lfs_cache_zero>
    }

    return 0;
 8023a94:	2300      	movs	r3, #0
}
 8023a96:	4618      	mov	r0, r3
 8023a98:	3720      	adds	r7, #32
 8023a9a:	46bd      	mov	sp, r7
 8023a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8023a9e:	bf00      	nop
 8023aa0:	08033398 	.word	0x08033398
 8023aa4:	08034618 	.word	0x08034618
 8023aa8:	08033358 	.word	0x08033358
 8023aac:	0803338c 	.word	0x0803338c

08023ab0 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023ab0:	b580      	push	{r7, lr}
 8023ab2:	b086      	sub	sp, #24
 8023ab4:	af00      	add	r7, sp, #0
 8023ab6:	60f8      	str	r0, [r7, #12]
 8023ab8:	60b9      	str	r1, [r7, #8]
 8023aba:	607a      	str	r2, [r7, #4]
 8023abc:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8023abe:	6879      	ldr	r1, [r7, #4]
 8023ac0:	68f8      	ldr	r0, [r7, #12]
 8023ac2:	f7ff fdbd 	bl	8023640 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023ac6:	78fb      	ldrb	r3, [r7, #3]
 8023ac8:	687a      	ldr	r2, [r7, #4]
 8023aca:	68b9      	ldr	r1, [r7, #8]
 8023acc:	68f8      	ldr	r0, [r7, #12]
 8023ace:	f7ff ff73 	bl	80239b8 <lfs_bd_flush>
 8023ad2:	6178      	str	r0, [r7, #20]
    if (err) {
 8023ad4:	697b      	ldr	r3, [r7, #20]
 8023ad6:	2b00      	cmp	r3, #0
 8023ad8:	d001      	beq.n	8023ade <lfs_bd_sync+0x2e>
        return err;
 8023ada:	697b      	ldr	r3, [r7, #20]
 8023adc:	e011      	b.n	8023b02 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8023ade:	68fb      	ldr	r3, [r7, #12]
 8023ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ae2:	691b      	ldr	r3, [r3, #16]
 8023ae4:	68fa      	ldr	r2, [r7, #12]
 8023ae6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023ae8:	4610      	mov	r0, r2
 8023aea:	4798      	blx	r3
 8023aec:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8023aee:	697b      	ldr	r3, [r7, #20]
 8023af0:	2b00      	cmp	r3, #0
 8023af2:	dd05      	ble.n	8023b00 <lfs_bd_sync+0x50>
 8023af4:	4b05      	ldr	r3, [pc, #20]	; (8023b0c <lfs_bd_sync+0x5c>)
 8023af6:	4a06      	ldr	r2, [pc, #24]	; (8023b10 <lfs_bd_sync+0x60>)
 8023af8:	21c8      	movs	r1, #200	; 0xc8
 8023afa:	4806      	ldr	r0, [pc, #24]	; (8023b14 <lfs_bd_sync+0x64>)
 8023afc:	f008 fc2e 	bl	802c35c <__assert_func>
    return err;
 8023b00:	697b      	ldr	r3, [r7, #20]
}
 8023b02:	4618      	mov	r0, r3
 8023b04:	3718      	adds	r7, #24
 8023b06:	46bd      	mov	sp, r7
 8023b08:	bd80      	pop	{r7, pc}
 8023b0a:	bf00      	nop
 8023b0c:	0803338c 	.word	0x0803338c
 8023b10:	08034628 	.word	0x08034628
 8023b14:	08033358 	.word	0x08033358

08023b18 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023b18:	b580      	push	{r7, lr}
 8023b1a:	b088      	sub	sp, #32
 8023b1c:	af00      	add	r7, sp, #0
 8023b1e:	60f8      	str	r0, [r7, #12]
 8023b20:	60b9      	str	r1, [r7, #8]
 8023b22:	607a      	str	r2, [r7, #4]
 8023b24:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8023b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023b28:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8023b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023b2c:	f113 0f02 	cmn.w	r3, #2
 8023b30:	d00b      	beq.n	8023b4a <lfs_bd_prog+0x32>
 8023b32:	68fb      	ldr	r3, [r7, #12]
 8023b34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b36:	6a1b      	ldr	r3, [r3, #32]
 8023b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023b3a:	429a      	cmp	r2, r3
 8023b3c:	d305      	bcc.n	8023b4a <lfs_bd_prog+0x32>
 8023b3e:	4b47      	ldr	r3, [pc, #284]	; (8023c5c <lfs_bd_prog+0x144>)
 8023b40:	4a47      	ldr	r2, [pc, #284]	; (8023c60 <lfs_bd_prog+0x148>)
 8023b42:	21d3      	movs	r1, #211	; 0xd3
 8023b44:	4847      	ldr	r0, [pc, #284]	; (8023c64 <lfs_bd_prog+0x14c>)
 8023b46:	f008 fc09 	bl	802c35c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8023b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023b4e:	441a      	add	r2, r3
 8023b50:	68fb      	ldr	r3, [r7, #12]
 8023b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b54:	69db      	ldr	r3, [r3, #28]
 8023b56:	429a      	cmp	r2, r3
 8023b58:	d977      	bls.n	8023c4a <lfs_bd_prog+0x132>
 8023b5a:	4b43      	ldr	r3, [pc, #268]	; (8023c68 <lfs_bd_prog+0x150>)
 8023b5c:	4a40      	ldr	r2, [pc, #256]	; (8023c60 <lfs_bd_prog+0x148>)
 8023b5e:	21d4      	movs	r1, #212	; 0xd4
 8023b60:	4840      	ldr	r0, [pc, #256]	; (8023c64 <lfs_bd_prog+0x14c>)
 8023b62:	f008 fbfb 	bl	802c35c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8023b66:	68bb      	ldr	r3, [r7, #8]
 8023b68:	681b      	ldr	r3, [r3, #0]
 8023b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023b6c:	429a      	cmp	r2, r3
 8023b6e:	d151      	bne.n	8023c14 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8023b70:	68bb      	ldr	r3, [r7, #8]
 8023b72:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8023b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b76:	429a      	cmp	r2, r3
 8023b78:	d34c      	bcc.n	8023c14 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8023b7a:	68bb      	ldr	r3, [r7, #8]
 8023b7c:	685a      	ldr	r2, [r3, #4]
 8023b7e:	68fb      	ldr	r3, [r7, #12]
 8023b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023b84:	4413      	add	r3, r2
                off >= pcache->off &&
 8023b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023b88:	429a      	cmp	r2, r3
 8023b8a:	d243      	bcs.n	8023c14 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8023b8c:	68fb      	ldr	r3, [r7, #12]
 8023b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023b92:	68bb      	ldr	r3, [r7, #8]
 8023b94:	6859      	ldr	r1, [r3, #4]
 8023b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023b98:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8023b9a:	4413      	add	r3, r2
 8023b9c:	4619      	mov	r1, r3
 8023b9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023ba0:	f7ff fc98 	bl	80234d4 <lfs_min>
 8023ba4:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8023ba6:	68bb      	ldr	r3, [r7, #8]
 8023ba8:	68da      	ldr	r2, [r3, #12]
 8023baa:	68bb      	ldr	r3, [r7, #8]
 8023bac:	685b      	ldr	r3, [r3, #4]
 8023bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023bb0:	1acb      	subs	r3, r1, r3
 8023bb2:	4413      	add	r3, r2
 8023bb4:	69ba      	ldr	r2, [r7, #24]
 8023bb6:	69f9      	ldr	r1, [r7, #28]
 8023bb8:	4618      	mov	r0, r3
 8023bba:	f009 ff74 	bl	802daa6 <memcpy>

            data += diff;
 8023bbe:	69fa      	ldr	r2, [r7, #28]
 8023bc0:	69bb      	ldr	r3, [r7, #24]
 8023bc2:	4413      	add	r3, r2
 8023bc4:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023bc8:	69bb      	ldr	r3, [r7, #24]
 8023bca:	4413      	add	r3, r2
 8023bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8023bce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023bd0:	69bb      	ldr	r3, [r7, #24]
 8023bd2:	1ad3      	subs	r3, r2, r3
 8023bd4:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8023bd6:	68bb      	ldr	r3, [r7, #8]
 8023bd8:	6898      	ldr	r0, [r3, #8]
 8023bda:	68bb      	ldr	r3, [r7, #8]
 8023bdc:	685b      	ldr	r3, [r3, #4]
 8023bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023be0:	1ad3      	subs	r3, r2, r3
 8023be2:	4619      	mov	r1, r3
 8023be4:	f7ff fc66 	bl	80234b4 <lfs_max>
 8023be8:	4602      	mov	r2, r0
 8023bea:	68bb      	ldr	r3, [r7, #8]
 8023bec:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8023bee:	68bb      	ldr	r3, [r7, #8]
 8023bf0:	689a      	ldr	r2, [r3, #8]
 8023bf2:	68fb      	ldr	r3, [r7, #12]
 8023bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023bf8:	429a      	cmp	r2, r3
 8023bfa:	d126      	bne.n	8023c4a <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023bfc:	78fb      	ldrb	r3, [r7, #3]
 8023bfe:	687a      	ldr	r2, [r7, #4]
 8023c00:	68b9      	ldr	r1, [r7, #8]
 8023c02:	68f8      	ldr	r0, [r7, #12]
 8023c04:	f7ff fed8 	bl	80239b8 <lfs_bd_flush>
 8023c08:	6178      	str	r0, [r7, #20]
                if (err) {
 8023c0a:	697b      	ldr	r3, [r7, #20]
 8023c0c:	2b00      	cmp	r3, #0
 8023c0e:	d01c      	beq.n	8023c4a <lfs_bd_prog+0x132>
                    return err;
 8023c10:	697b      	ldr	r3, [r7, #20]
 8023c12:	e01e      	b.n	8023c52 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8023c14:	68bb      	ldr	r3, [r7, #8]
 8023c16:	681b      	ldr	r3, [r3, #0]
 8023c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023c1c:	d005      	beq.n	8023c2a <lfs_bd_prog+0x112>
 8023c1e:	4b13      	ldr	r3, [pc, #76]	; (8023c6c <lfs_bd_prog+0x154>)
 8023c20:	4a0f      	ldr	r2, [pc, #60]	; (8023c60 <lfs_bd_prog+0x148>)
 8023c22:	21f1      	movs	r1, #241	; 0xf1
 8023c24:	480f      	ldr	r0, [pc, #60]	; (8023c64 <lfs_bd_prog+0x14c>)
 8023c26:	f008 fb99 	bl	802c35c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8023c2a:	68bb      	ldr	r3, [r7, #8]
 8023c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023c2e:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8023c30:	68fb      	ldr	r3, [r7, #12]
 8023c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c34:	699b      	ldr	r3, [r3, #24]
 8023c36:	4619      	mov	r1, r3
 8023c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8023c3a:	f7ff fc5b 	bl	80234f4 <lfs_aligndown>
 8023c3e:	4602      	mov	r2, r0
 8023c40:	68bb      	ldr	r3, [r7, #8]
 8023c42:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8023c44:	68bb      	ldr	r3, [r7, #8]
 8023c46:	2200      	movs	r2, #0
 8023c48:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8023c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023c4c:	2b00      	cmp	r3, #0
 8023c4e:	d18a      	bne.n	8023b66 <lfs_bd_prog+0x4e>
    }

    return 0;
 8023c50:	2300      	movs	r3, #0
}
 8023c52:	4618      	mov	r0, r3
 8023c54:	3720      	adds	r7, #32
 8023c56:	46bd      	mov	sp, r7
 8023c58:	bd80      	pop	{r7, pc}
 8023c5a:	bf00      	nop
 8023c5c:	080333c0 	.word	0x080333c0
 8023c60:	08034634 	.word	0x08034634
 8023c64:	08033358 	.word	0x08033358
 8023c68:	080333fc 	.word	0x080333fc
 8023c6c:	08033420 	.word	0x08033420

08023c70 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8023c70:	b580      	push	{r7, lr}
 8023c72:	b084      	sub	sp, #16
 8023c74:	af00      	add	r7, sp, #0
 8023c76:	6078      	str	r0, [r7, #4]
 8023c78:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c7e:	6a1b      	ldr	r3, [r3, #32]
 8023c80:	683a      	ldr	r2, [r7, #0]
 8023c82:	429a      	cmp	r2, r3
 8023c84:	d305      	bcc.n	8023c92 <lfs_bd_erase+0x22>
 8023c86:	4b0f      	ldr	r3, [pc, #60]	; (8023cc4 <lfs_bd_erase+0x54>)
 8023c88:	4a0f      	ldr	r2, [pc, #60]	; (8023cc8 <lfs_bd_erase+0x58>)
 8023c8a:	21ff      	movs	r1, #255	; 0xff
 8023c8c:	480f      	ldr	r0, [pc, #60]	; (8023ccc <lfs_bd_erase+0x5c>)
 8023c8e:	f008 fb65 	bl	802c35c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8023c92:	687b      	ldr	r3, [r7, #4]
 8023c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c96:	68db      	ldr	r3, [r3, #12]
 8023c98:	687a      	ldr	r2, [r7, #4]
 8023c9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023c9c:	6839      	ldr	r1, [r7, #0]
 8023c9e:	4610      	mov	r0, r2
 8023ca0:	4798      	blx	r3
 8023ca2:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8023ca4:	68fb      	ldr	r3, [r7, #12]
 8023ca6:	2b00      	cmp	r3, #0
 8023ca8:	dd06      	ble.n	8023cb8 <lfs_bd_erase+0x48>
 8023caa:	4b09      	ldr	r3, [pc, #36]	; (8023cd0 <lfs_bd_erase+0x60>)
 8023cac:	4a06      	ldr	r2, [pc, #24]	; (8023cc8 <lfs_bd_erase+0x58>)
 8023cae:	f240 1101 	movw	r1, #257	; 0x101
 8023cb2:	4806      	ldr	r0, [pc, #24]	; (8023ccc <lfs_bd_erase+0x5c>)
 8023cb4:	f008 fb52 	bl	802c35c <__assert_func>
    return err;
 8023cb8:	68fb      	ldr	r3, [r7, #12]
}
 8023cba:	4618      	mov	r0, r3
 8023cbc:	3710      	adds	r7, #16
 8023cbe:	46bd      	mov	sp, r7
 8023cc0:	bd80      	pop	{r7, pc}
 8023cc2:	bf00      	nop
 8023cc4:	08033338 	.word	0x08033338
 8023cc8:	08034640 	.word	0x08034640
 8023ccc:	08033358 	.word	0x08033358
 8023cd0:	0803338c 	.word	0x0803338c

08023cd4 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8023cd4:	b480      	push	{r7}
 8023cd6:	b085      	sub	sp, #20
 8023cd8:	af00      	add	r7, sp, #0
 8023cda:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 8023cdc:	687b      	ldr	r3, [r7, #4]
 8023cde:	681b      	ldr	r3, [r3, #0]
 8023ce0:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8023ce2:	687b      	ldr	r3, [r7, #4]
 8023ce4:	685a      	ldr	r2, [r3, #4]
 8023ce6:	687b      	ldr	r3, [r7, #4]
 8023ce8:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 8023cea:	687b      	ldr	r3, [r7, #4]
 8023cec:	3304      	adds	r3, #4
 8023cee:	68fa      	ldr	r2, [r7, #12]
 8023cf0:	601a      	str	r2, [r3, #0]
}
 8023cf2:	bf00      	nop
 8023cf4:	3714      	adds	r7, #20
 8023cf6:	46bd      	mov	sp, r7
 8023cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023cfc:	4770      	bx	lr

08023cfe <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 8023cfe:	b480      	push	{r7}
 8023d00:	b083      	sub	sp, #12
 8023d02:	af00      	add	r7, sp, #0
 8023d04:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8023d06:	687b      	ldr	r3, [r7, #4]
 8023d08:	681b      	ldr	r3, [r3, #0]
 8023d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d0e:	d005      	beq.n	8023d1c <lfs_pair_isnull+0x1e>
 8023d10:	687b      	ldr	r3, [r7, #4]
 8023d12:	3304      	adds	r3, #4
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d1a:	d101      	bne.n	8023d20 <lfs_pair_isnull+0x22>
 8023d1c:	2301      	movs	r3, #1
 8023d1e:	e000      	b.n	8023d22 <lfs_pair_isnull+0x24>
 8023d20:	2300      	movs	r3, #0
 8023d22:	f003 0301 	and.w	r3, r3, #1
 8023d26:	b2db      	uxtb	r3, r3
}
 8023d28:	4618      	mov	r0, r3
 8023d2a:	370c      	adds	r7, #12
 8023d2c:	46bd      	mov	sp, r7
 8023d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d32:	4770      	bx	lr

08023d34 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023d34:	b480      	push	{r7}
 8023d36:	b083      	sub	sp, #12
 8023d38:	af00      	add	r7, sp, #0
 8023d3a:	6078      	str	r0, [r7, #4]
 8023d3c:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023d3e:	687b      	ldr	r3, [r7, #4]
 8023d40:	681a      	ldr	r2, [r3, #0]
 8023d42:	683b      	ldr	r3, [r7, #0]
 8023d44:	681b      	ldr	r3, [r3, #0]
 8023d46:	429a      	cmp	r2, r3
 8023d48:	d017      	beq.n	8023d7a <lfs_pair_cmp+0x46>
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	3304      	adds	r3, #4
 8023d4e:	681a      	ldr	r2, [r3, #0]
 8023d50:	683b      	ldr	r3, [r7, #0]
 8023d52:	3304      	adds	r3, #4
 8023d54:	681b      	ldr	r3, [r3, #0]
 8023d56:	429a      	cmp	r2, r3
 8023d58:	d00f      	beq.n	8023d7a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023d5a:	687b      	ldr	r3, [r7, #4]
 8023d5c:	681a      	ldr	r2, [r3, #0]
 8023d5e:	683b      	ldr	r3, [r7, #0]
 8023d60:	3304      	adds	r3, #4
 8023d62:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023d64:	429a      	cmp	r2, r3
 8023d66:	d008      	beq.n	8023d7a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8023d68:	687b      	ldr	r3, [r7, #4]
 8023d6a:	3304      	adds	r3, #4
 8023d6c:	681a      	ldr	r2, [r3, #0]
 8023d6e:	683b      	ldr	r3, [r7, #0]
 8023d70:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8023d72:	429a      	cmp	r2, r3
 8023d74:	d001      	beq.n	8023d7a <lfs_pair_cmp+0x46>
 8023d76:	2301      	movs	r3, #1
 8023d78:	e000      	b.n	8023d7c <lfs_pair_cmp+0x48>
 8023d7a:	2300      	movs	r3, #0
}
 8023d7c:	4618      	mov	r0, r3
 8023d7e:	370c      	adds	r7, #12
 8023d80:	46bd      	mov	sp, r7
 8023d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023d86:	4770      	bx	lr

08023d88 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8023d88:	b480      	push	{r7}
 8023d8a:	b083      	sub	sp, #12
 8023d8c:	af00      	add	r7, sp, #0
 8023d8e:	6078      	str	r0, [r7, #4]
 8023d90:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023d92:	687b      	ldr	r3, [r7, #4]
 8023d94:	681a      	ldr	r2, [r3, #0]
 8023d96:	683b      	ldr	r3, [r7, #0]
 8023d98:	681b      	ldr	r3, [r3, #0]
 8023d9a:	429a      	cmp	r2, r3
 8023d9c:	d107      	bne.n	8023dae <lfs_pair_sync+0x26>
 8023d9e:	687b      	ldr	r3, [r7, #4]
 8023da0:	3304      	adds	r3, #4
 8023da2:	681a      	ldr	r2, [r3, #0]
 8023da4:	683b      	ldr	r3, [r7, #0]
 8023da6:	3304      	adds	r3, #4
 8023da8:	681b      	ldr	r3, [r3, #0]
 8023daa:	429a      	cmp	r2, r3
 8023dac:	d00d      	beq.n	8023dca <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023dae:	687b      	ldr	r3, [r7, #4]
 8023db0:	681a      	ldr	r2, [r3, #0]
 8023db2:	683b      	ldr	r3, [r7, #0]
 8023db4:	3304      	adds	r3, #4
 8023db6:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023db8:	429a      	cmp	r2, r3
 8023dba:	d108      	bne.n	8023dce <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 8023dbc:	687b      	ldr	r3, [r7, #4]
 8023dbe:	3304      	adds	r3, #4
 8023dc0:	681a      	ldr	r2, [r3, #0]
 8023dc2:	683b      	ldr	r3, [r7, #0]
 8023dc4:	681b      	ldr	r3, [r3, #0]
 8023dc6:	429a      	cmp	r2, r3
 8023dc8:	d101      	bne.n	8023dce <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8023dca:	2301      	movs	r3, #1
 8023dcc:	e000      	b.n	8023dd0 <lfs_pair_sync+0x48>
 8023dce:	2300      	movs	r3, #0
 8023dd0:	f003 0301 	and.w	r3, r3, #1
 8023dd4:	b2db      	uxtb	r3, r3
}
 8023dd6:	4618      	mov	r0, r3
 8023dd8:	370c      	adds	r7, #12
 8023dda:	46bd      	mov	sp, r7
 8023ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023de0:	4770      	bx	lr

08023de2 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8023de2:	b590      	push	{r4, r7, lr}
 8023de4:	b083      	sub	sp, #12
 8023de6:	af00      	add	r7, sp, #0
 8023de8:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8023dea:	687b      	ldr	r3, [r7, #4]
 8023dec:	681b      	ldr	r3, [r3, #0]
 8023dee:	4618      	mov	r0, r3
 8023df0:	f7ff fbe0 	bl	80235b4 <lfs_fromle32>
 8023df4:	4602      	mov	r2, r0
 8023df6:	687b      	ldr	r3, [r7, #4]
 8023df8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8023dfa:	687b      	ldr	r3, [r7, #4]
 8023dfc:	3304      	adds	r3, #4
 8023dfe:	681a      	ldr	r2, [r3, #0]
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	1d1c      	adds	r4, r3, #4
 8023e04:	4610      	mov	r0, r2
 8023e06:	f7ff fbd5 	bl	80235b4 <lfs_fromle32>
 8023e0a:	4603      	mov	r3, r0
 8023e0c:	6023      	str	r3, [r4, #0]
}
 8023e0e:	bf00      	nop
 8023e10:	370c      	adds	r7, #12
 8023e12:	46bd      	mov	sp, r7
 8023e14:	bd90      	pop	{r4, r7, pc}

08023e16 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 8023e16:	b590      	push	{r4, r7, lr}
 8023e18:	b083      	sub	sp, #12
 8023e1a:	af00      	add	r7, sp, #0
 8023e1c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8023e1e:	687b      	ldr	r3, [r7, #4]
 8023e20:	681b      	ldr	r3, [r3, #0]
 8023e22:	4618      	mov	r0, r3
 8023e24:	f7ff fbd1 	bl	80235ca <lfs_tole32>
 8023e28:	4602      	mov	r2, r0
 8023e2a:	687b      	ldr	r3, [r7, #4]
 8023e2c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8023e2e:	687b      	ldr	r3, [r7, #4]
 8023e30:	3304      	adds	r3, #4
 8023e32:	681a      	ldr	r2, [r3, #0]
 8023e34:	687b      	ldr	r3, [r7, #4]
 8023e36:	1d1c      	adds	r4, r3, #4
 8023e38:	4610      	mov	r0, r2
 8023e3a:	f7ff fbc6 	bl	80235ca <lfs_tole32>
 8023e3e:	4603      	mov	r3, r0
 8023e40:	6023      	str	r3, [r4, #0]
}
 8023e42:	bf00      	nop
 8023e44:	370c      	adds	r7, #12
 8023e46:	46bd      	mov	sp, r7
 8023e48:	bd90      	pop	{r4, r7, pc}

08023e4a <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8023e4a:	b480      	push	{r7}
 8023e4c:	b083      	sub	sp, #12
 8023e4e:	af00      	add	r7, sp, #0
 8023e50:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8023e52:	687b      	ldr	r3, [r7, #4]
 8023e54:	43db      	mvns	r3, r3
 8023e56:	0fdb      	lsrs	r3, r3, #31
 8023e58:	b2db      	uxtb	r3, r3
}
 8023e5a:	4618      	mov	r0, r3
 8023e5c:	370c      	adds	r7, #12
 8023e5e:	46bd      	mov	sp, r7
 8023e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e64:	4770      	bx	lr

08023e66 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8023e66:	b480      	push	{r7}
 8023e68:	b083      	sub	sp, #12
 8023e6a:	af00      	add	r7, sp, #0
 8023e6c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8023e6e:	687b      	ldr	r3, [r7, #4]
 8023e70:	059b      	lsls	r3, r3, #22
 8023e72:	159b      	asrs	r3, r3, #22
 8023e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023e78:	bf0c      	ite	eq
 8023e7a:	2301      	moveq	r3, #1
 8023e7c:	2300      	movne	r3, #0
 8023e7e:	b2db      	uxtb	r3, r3
}
 8023e80:	4618      	mov	r0, r3
 8023e82:	370c      	adds	r7, #12
 8023e84:	46bd      	mov	sp, r7
 8023e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023e8a:	4770      	bx	lr

08023e8c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 8023e8c:	b480      	push	{r7}
 8023e8e:	b083      	sub	sp, #12
 8023e90:	af00      	add	r7, sp, #0
 8023e92:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8023e94:	687b      	ldr	r3, [r7, #4]
 8023e96:	0d1b      	lsrs	r3, r3, #20
 8023e98:	b29b      	uxth	r3, r3
 8023e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8023e9e:	b29b      	uxth	r3, r3
}
 8023ea0:	4618      	mov	r0, r3
 8023ea2:	370c      	adds	r7, #12
 8023ea4:	46bd      	mov	sp, r7
 8023ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eaa:	4770      	bx	lr

08023eac <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 8023eac:	b480      	push	{r7}
 8023eae:	b083      	sub	sp, #12
 8023eb0:	af00      	add	r7, sp, #0
 8023eb2:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8023eb4:	687b      	ldr	r3, [r7, #4]
 8023eb6:	0d1b      	lsrs	r3, r3, #20
 8023eb8:	b29b      	uxth	r3, r3
 8023eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8023ebe:	b29b      	uxth	r3, r3
}
 8023ec0:	4618      	mov	r0, r3
 8023ec2:	370c      	adds	r7, #12
 8023ec4:	46bd      	mov	sp, r7
 8023ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023eca:	4770      	bx	lr

08023ecc <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 8023ecc:	b480      	push	{r7}
 8023ece:	b083      	sub	sp, #12
 8023ed0:	af00      	add	r7, sp, #0
 8023ed2:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8023ed4:	687b      	ldr	r3, [r7, #4]
 8023ed6:	0d1b      	lsrs	r3, r3, #20
 8023ed8:	b2db      	uxtb	r3, r3
}
 8023eda:	4618      	mov	r0, r3
 8023edc:	370c      	adds	r7, #12
 8023ede:	46bd      	mov	sp, r7
 8023ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023ee4:	4770      	bx	lr

08023ee6 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8023ee6:	b580      	push	{r7, lr}
 8023ee8:	b082      	sub	sp, #8
 8023eea:	af00      	add	r7, sp, #0
 8023eec:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8023eee:	6878      	ldr	r0, [r7, #4]
 8023ef0:	f7ff ffec 	bl	8023ecc <lfs_tag_chunk>
 8023ef4:	4603      	mov	r3, r0
 8023ef6:	b25b      	sxtb	r3, r3
}
 8023ef8:	4618      	mov	r0, r3
 8023efa:	3708      	adds	r7, #8
 8023efc:	46bd      	mov	sp, r7
 8023efe:	bd80      	pop	{r7, pc}

08023f00 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8023f00:	b480      	push	{r7}
 8023f02:	b083      	sub	sp, #12
 8023f04:	af00      	add	r7, sp, #0
 8023f06:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	0a9b      	lsrs	r3, r3, #10
 8023f0c:	b29b      	uxth	r3, r3
 8023f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8023f12:	b29b      	uxth	r3, r3
}
 8023f14:	4618      	mov	r0, r3
 8023f16:	370c      	adds	r7, #12
 8023f18:	46bd      	mov	sp, r7
 8023f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f1e:	4770      	bx	lr

08023f20 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8023f20:	b480      	push	{r7}
 8023f22:	b083      	sub	sp, #12
 8023f24:	af00      	add	r7, sp, #0
 8023f26:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 8023f28:	687b      	ldr	r3, [r7, #4]
 8023f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8023f2e:	4618      	mov	r0, r3
 8023f30:	370c      	adds	r7, #12
 8023f32:	46bd      	mov	sp, r7
 8023f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f38:	4770      	bx	lr

08023f3a <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8023f3a:	b580      	push	{r7, lr}
 8023f3c:	b082      	sub	sp, #8
 8023f3e:	af00      	add	r7, sp, #0
 8023f40:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8023f42:	6878      	ldr	r0, [r7, #4]
 8023f44:	f7ff ff8f 	bl	8023e66 <lfs_tag_isdelete>
 8023f48:	4603      	mov	r3, r0
 8023f4a:	461a      	mov	r2, r3
 8023f4c:	687b      	ldr	r3, [r7, #4]
 8023f4e:	4413      	add	r3, r2
 8023f50:	4618      	mov	r0, r3
 8023f52:	f7ff ffe5 	bl	8023f20 <lfs_tag_size>
 8023f56:	4603      	mov	r3, r0
 8023f58:	3304      	adds	r3, #4
}
 8023f5a:	4618      	mov	r0, r3
 8023f5c:	3708      	adds	r7, #8
 8023f5e:	46bd      	mov	sp, r7
 8023f60:	bd80      	pop	{r7, pc}

08023f62 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8023f62:	b480      	push	{r7}
 8023f64:	b085      	sub	sp, #20
 8023f66:	af00      	add	r7, sp, #0
 8023f68:	6078      	str	r0, [r7, #4]
 8023f6a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8023f6c:	2300      	movs	r3, #0
 8023f6e:	60fb      	str	r3, [r7, #12]
 8023f70:	e012      	b.n	8023f98 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8023f72:	68fb      	ldr	r3, [r7, #12]
 8023f74:	009b      	lsls	r3, r3, #2
 8023f76:	687a      	ldr	r2, [r7, #4]
 8023f78:	4413      	add	r3, r2
 8023f7a:	6819      	ldr	r1, [r3, #0]
 8023f7c:	68fb      	ldr	r3, [r7, #12]
 8023f7e:	009b      	lsls	r3, r3, #2
 8023f80:	683a      	ldr	r2, [r7, #0]
 8023f82:	4413      	add	r3, r2
 8023f84:	681a      	ldr	r2, [r3, #0]
 8023f86:	68fb      	ldr	r3, [r7, #12]
 8023f88:	009b      	lsls	r3, r3, #2
 8023f8a:	6878      	ldr	r0, [r7, #4]
 8023f8c:	4403      	add	r3, r0
 8023f8e:	404a      	eors	r2, r1
 8023f90:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8023f92:	68fb      	ldr	r3, [r7, #12]
 8023f94:	3301      	adds	r3, #1
 8023f96:	60fb      	str	r3, [r7, #12]
 8023f98:	68fb      	ldr	r3, [r7, #12]
 8023f9a:	2b02      	cmp	r3, #2
 8023f9c:	dde9      	ble.n	8023f72 <lfs_gstate_xor+0x10>
    }
}
 8023f9e:	bf00      	nop
 8023fa0:	bf00      	nop
 8023fa2:	3714      	adds	r7, #20
 8023fa4:	46bd      	mov	sp, r7
 8023fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023faa:	4770      	bx	lr

08023fac <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 8023fac:	b480      	push	{r7}
 8023fae:	b085      	sub	sp, #20
 8023fb0:	af00      	add	r7, sp, #0
 8023fb2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8023fb4:	2300      	movs	r3, #0
 8023fb6:	60fb      	str	r3, [r7, #12]
 8023fb8:	e00b      	b.n	8023fd2 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 8023fba:	68fb      	ldr	r3, [r7, #12]
 8023fbc:	009b      	lsls	r3, r3, #2
 8023fbe:	687a      	ldr	r2, [r7, #4]
 8023fc0:	4413      	add	r3, r2
 8023fc2:	681b      	ldr	r3, [r3, #0]
 8023fc4:	2b00      	cmp	r3, #0
 8023fc6:	d001      	beq.n	8023fcc <lfs_gstate_iszero+0x20>
            return false;
 8023fc8:	2300      	movs	r3, #0
 8023fca:	e006      	b.n	8023fda <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 8023fcc:	68fb      	ldr	r3, [r7, #12]
 8023fce:	3301      	adds	r3, #1
 8023fd0:	60fb      	str	r3, [r7, #12]
 8023fd2:	68fb      	ldr	r3, [r7, #12]
 8023fd4:	2b02      	cmp	r3, #2
 8023fd6:	ddf0      	ble.n	8023fba <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8023fd8:	2301      	movs	r3, #1
}
 8023fda:	4618      	mov	r0, r3
 8023fdc:	3714      	adds	r7, #20
 8023fde:	46bd      	mov	sp, r7
 8023fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023fe4:	4770      	bx	lr

08023fe6 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8023fe6:	b580      	push	{r7, lr}
 8023fe8:	b082      	sub	sp, #8
 8023fea:	af00      	add	r7, sp, #0
 8023fec:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8023fee:	687b      	ldr	r3, [r7, #4]
 8023ff0:	681b      	ldr	r3, [r3, #0]
 8023ff2:	4618      	mov	r0, r3
 8023ff4:	f7ff ff94 	bl	8023f20 <lfs_tag_size>
 8023ff8:	4603      	mov	r3, r0
 8023ffa:	2b00      	cmp	r3, #0
 8023ffc:	bf14      	ite	ne
 8023ffe:	2301      	movne	r3, #1
 8024000:	2300      	moveq	r3, #0
 8024002:	b2db      	uxtb	r3, r3
}
 8024004:	4618      	mov	r0, r3
 8024006:	3708      	adds	r7, #8
 8024008:	46bd      	mov	sp, r7
 802400a:	bd80      	pop	{r7, pc}

0802400c <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 802400c:	b580      	push	{r7, lr}
 802400e:	b082      	sub	sp, #8
 8024010:	af00      	add	r7, sp, #0
 8024012:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8024014:	687b      	ldr	r3, [r7, #4]
 8024016:	681b      	ldr	r3, [r3, #0]
 8024018:	4618      	mov	r0, r3
 802401a:	f7ff ff81 	bl	8023f20 <lfs_tag_size>
 802401e:	4603      	mov	r3, r0
 8024020:	b2db      	uxtb	r3, r3
}
 8024022:	4618      	mov	r0, r3
 8024024:	3708      	adds	r7, #8
 8024026:	46bd      	mov	sp, r7
 8024028:	bd80      	pop	{r7, pc}

0802402a <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 802402a:	b580      	push	{r7, lr}
 802402c:	b082      	sub	sp, #8
 802402e:	af00      	add	r7, sp, #0
 8024030:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8024032:	687b      	ldr	r3, [r7, #4]
 8024034:	681b      	ldr	r3, [r3, #0]
 8024036:	4618      	mov	r0, r3
 8024038:	f7ff ff28 	bl	8023e8c <lfs_tag_type1>
 802403c:	4603      	mov	r3, r0
 802403e:	2b00      	cmp	r3, #0
 8024040:	bf14      	ite	ne
 8024042:	2301      	movne	r3, #1
 8024044:	2300      	moveq	r3, #0
 8024046:	b2db      	uxtb	r3, r3
}
 8024048:	4618      	mov	r0, r3
 802404a:	3708      	adds	r7, #8
 802404c:	46bd      	mov	sp, r7
 802404e:	bd80      	pop	{r7, pc}

08024050 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8024050:	b580      	push	{r7, lr}
 8024052:	b082      	sub	sp, #8
 8024054:	af00      	add	r7, sp, #0
 8024056:	6078      	str	r0, [r7, #4]
 8024058:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 802405a:	687b      	ldr	r3, [r7, #4]
 802405c:	681b      	ldr	r3, [r3, #0]
 802405e:	4618      	mov	r0, r3
 8024060:	f7ff ff14 	bl	8023e8c <lfs_tag_type1>
 8024064:	4603      	mov	r3, r0
 8024066:	2b00      	cmp	r3, #0
 8024068:	d00a      	beq.n	8024080 <lfs_gstate_hasmovehere+0x30>
 802406a:	687b      	ldr	r3, [r7, #4]
 802406c:	3304      	adds	r3, #4
 802406e:	6839      	ldr	r1, [r7, #0]
 8024070:	4618      	mov	r0, r3
 8024072:	f7ff fe5f 	bl	8023d34 <lfs_pair_cmp>
 8024076:	4603      	mov	r3, r0
 8024078:	2b00      	cmp	r3, #0
 802407a:	d101      	bne.n	8024080 <lfs_gstate_hasmovehere+0x30>
 802407c:	2301      	movs	r3, #1
 802407e:	e000      	b.n	8024082 <lfs_gstate_hasmovehere+0x32>
 8024080:	2300      	movs	r3, #0
 8024082:	f003 0301 	and.w	r3, r3, #1
 8024086:	b2db      	uxtb	r3, r3
}
 8024088:	4618      	mov	r0, r3
 802408a:	3708      	adds	r7, #8
 802408c:	46bd      	mov	sp, r7
 802408e:	bd80      	pop	{r7, pc}

08024090 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8024090:	b580      	push	{r7, lr}
 8024092:	b082      	sub	sp, #8
 8024094:	af00      	add	r7, sp, #0
 8024096:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8024098:	687b      	ldr	r3, [r7, #4]
 802409a:	681b      	ldr	r3, [r3, #0]
 802409c:	4618      	mov	r0, r3
 802409e:	f7ff fa89 	bl	80235b4 <lfs_fromle32>
 80240a2:	4602      	mov	r2, r0
 80240a4:	687b      	ldr	r3, [r7, #4]
 80240a6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 80240a8:	687b      	ldr	r3, [r7, #4]
 80240aa:	685b      	ldr	r3, [r3, #4]
 80240ac:	4618      	mov	r0, r3
 80240ae:	f7ff fa81 	bl	80235b4 <lfs_fromle32>
 80240b2:	4602      	mov	r2, r0
 80240b4:	687b      	ldr	r3, [r7, #4]
 80240b6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 80240b8:	687b      	ldr	r3, [r7, #4]
 80240ba:	689b      	ldr	r3, [r3, #8]
 80240bc:	4618      	mov	r0, r3
 80240be:	f7ff fa79 	bl	80235b4 <lfs_fromle32>
 80240c2:	4602      	mov	r2, r0
 80240c4:	687b      	ldr	r3, [r7, #4]
 80240c6:	609a      	str	r2, [r3, #8]
}
 80240c8:	bf00      	nop
 80240ca:	3708      	adds	r7, #8
 80240cc:	46bd      	mov	sp, r7
 80240ce:	bd80      	pop	{r7, pc}

080240d0 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 80240d0:	b580      	push	{r7, lr}
 80240d2:	b082      	sub	sp, #8
 80240d4:	af00      	add	r7, sp, #0
 80240d6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 80240d8:	687b      	ldr	r3, [r7, #4]
 80240da:	681b      	ldr	r3, [r3, #0]
 80240dc:	4618      	mov	r0, r3
 80240de:	f7ff fa74 	bl	80235ca <lfs_tole32>
 80240e2:	4602      	mov	r2, r0
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 80240e8:	687b      	ldr	r3, [r7, #4]
 80240ea:	685b      	ldr	r3, [r3, #4]
 80240ec:	4618      	mov	r0, r3
 80240ee:	f7ff fa6c 	bl	80235ca <lfs_tole32>
 80240f2:	4602      	mov	r2, r0
 80240f4:	687b      	ldr	r3, [r7, #4]
 80240f6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	689b      	ldr	r3, [r3, #8]
 80240fc:	4618      	mov	r0, r3
 80240fe:	f7ff fa64 	bl	80235ca <lfs_tole32>
 8024102:	4602      	mov	r2, r0
 8024104:	687b      	ldr	r3, [r7, #4]
 8024106:	609a      	str	r2, [r3, #8]
}
 8024108:	bf00      	nop
 802410a:	3708      	adds	r7, #8
 802410c:	46bd      	mov	sp, r7
 802410e:	bd80      	pop	{r7, pc}

08024110 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8024110:	b580      	push	{r7, lr}
 8024112:	b082      	sub	sp, #8
 8024114:	af00      	add	r7, sp, #0
 8024116:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	681b      	ldr	r3, [r3, #0]
 802411c:	4618      	mov	r0, r3
 802411e:	f7ff fa49 	bl	80235b4 <lfs_fromle32>
 8024122:	4602      	mov	r2, r0
 8024124:	687b      	ldr	r3, [r7, #4]
 8024126:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8024128:	687b      	ldr	r3, [r7, #4]
 802412a:	685b      	ldr	r3, [r3, #4]
 802412c:	4618      	mov	r0, r3
 802412e:	f7ff fa41 	bl	80235b4 <lfs_fromle32>
 8024132:	4602      	mov	r2, r0
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	605a      	str	r2, [r3, #4]
}
 8024138:	bf00      	nop
 802413a:	3708      	adds	r7, #8
 802413c:	46bd      	mov	sp, r7
 802413e:	bd80      	pop	{r7, pc}

08024140 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 8024140:	b580      	push	{r7, lr}
 8024142:	b082      	sub	sp, #8
 8024144:	af00      	add	r7, sp, #0
 8024146:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 8024148:	687b      	ldr	r3, [r7, #4]
 802414a:	681b      	ldr	r3, [r3, #0]
 802414c:	4618      	mov	r0, r3
 802414e:	f7ff fa3c 	bl	80235ca <lfs_tole32>
 8024152:	4602      	mov	r2, r0
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8024158:	687b      	ldr	r3, [r7, #4]
 802415a:	685b      	ldr	r3, [r3, #4]
 802415c:	4618      	mov	r0, r3
 802415e:	f7ff fa34 	bl	80235ca <lfs_tole32>
 8024162:	4602      	mov	r2, r0
 8024164:	687b      	ldr	r3, [r7, #4]
 8024166:	605a      	str	r2, [r3, #4]
}
 8024168:	bf00      	nop
 802416a:	3708      	adds	r7, #8
 802416c:	46bd      	mov	sp, r7
 802416e:	bd80      	pop	{r7, pc}

08024170 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8024170:	b580      	push	{r7, lr}
 8024172:	b082      	sub	sp, #8
 8024174:	af00      	add	r7, sp, #0
 8024176:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	681b      	ldr	r3, [r3, #0]
 802417c:	4618      	mov	r0, r3
 802417e:	f7ff fa19 	bl	80235b4 <lfs_fromle32>
 8024182:	4602      	mov	r2, r0
 8024184:	687b      	ldr	r3, [r7, #4]
 8024186:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8024188:	687b      	ldr	r3, [r7, #4]
 802418a:	685b      	ldr	r3, [r3, #4]
 802418c:	4618      	mov	r0, r3
 802418e:	f7ff fa11 	bl	80235b4 <lfs_fromle32>
 8024192:	4602      	mov	r2, r0
 8024194:	687b      	ldr	r3, [r7, #4]
 8024196:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8024198:	687b      	ldr	r3, [r7, #4]
 802419a:	689b      	ldr	r3, [r3, #8]
 802419c:	4618      	mov	r0, r3
 802419e:	f7ff fa09 	bl	80235b4 <lfs_fromle32>
 80241a2:	4602      	mov	r2, r0
 80241a4:	687b      	ldr	r3, [r7, #4]
 80241a6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 80241a8:	687b      	ldr	r3, [r7, #4]
 80241aa:	68db      	ldr	r3, [r3, #12]
 80241ac:	4618      	mov	r0, r3
 80241ae:	f7ff fa01 	bl	80235b4 <lfs_fromle32>
 80241b2:	4602      	mov	r2, r0
 80241b4:	687b      	ldr	r3, [r7, #4]
 80241b6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 80241b8:	687b      	ldr	r3, [r7, #4]
 80241ba:	691b      	ldr	r3, [r3, #16]
 80241bc:	4618      	mov	r0, r3
 80241be:	f7ff f9f9 	bl	80235b4 <lfs_fromle32>
 80241c2:	4602      	mov	r2, r0
 80241c4:	687b      	ldr	r3, [r7, #4]
 80241c6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 80241c8:	687b      	ldr	r3, [r7, #4]
 80241ca:	695b      	ldr	r3, [r3, #20]
 80241cc:	4618      	mov	r0, r3
 80241ce:	f7ff f9f1 	bl	80235b4 <lfs_fromle32>
 80241d2:	4602      	mov	r2, r0
 80241d4:	687b      	ldr	r3, [r7, #4]
 80241d6:	615a      	str	r2, [r3, #20]
}
 80241d8:	bf00      	nop
 80241da:	3708      	adds	r7, #8
 80241dc:	46bd      	mov	sp, r7
 80241de:	bd80      	pop	{r7, pc}

080241e0 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 80241e0:	b580      	push	{r7, lr}
 80241e2:	b082      	sub	sp, #8
 80241e4:	af00      	add	r7, sp, #0
 80241e6:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 80241e8:	687b      	ldr	r3, [r7, #4]
 80241ea:	681b      	ldr	r3, [r3, #0]
 80241ec:	4618      	mov	r0, r3
 80241ee:	f7ff f9ec 	bl	80235ca <lfs_tole32>
 80241f2:	4602      	mov	r2, r0
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80241f8:	687b      	ldr	r3, [r7, #4]
 80241fa:	685b      	ldr	r3, [r3, #4]
 80241fc:	4618      	mov	r0, r3
 80241fe:	f7ff f9e4 	bl	80235ca <lfs_tole32>
 8024202:	4602      	mov	r2, r0
 8024204:	687b      	ldr	r3, [r7, #4]
 8024206:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8024208:	687b      	ldr	r3, [r7, #4]
 802420a:	689b      	ldr	r3, [r3, #8]
 802420c:	4618      	mov	r0, r3
 802420e:	f7ff f9dc 	bl	80235ca <lfs_tole32>
 8024212:	4602      	mov	r2, r0
 8024214:	687b      	ldr	r3, [r7, #4]
 8024216:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	68db      	ldr	r3, [r3, #12]
 802421c:	4618      	mov	r0, r3
 802421e:	f7ff f9d4 	bl	80235ca <lfs_tole32>
 8024222:	4602      	mov	r2, r0
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8024228:	687b      	ldr	r3, [r7, #4]
 802422a:	691b      	ldr	r3, [r3, #16]
 802422c:	4618      	mov	r0, r3
 802422e:	f7ff f9cc 	bl	80235ca <lfs_tole32>
 8024232:	4602      	mov	r2, r0
 8024234:	687b      	ldr	r3, [r7, #4]
 8024236:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8024238:	687b      	ldr	r3, [r7, #4]
 802423a:	695b      	ldr	r3, [r3, #20]
 802423c:	4618      	mov	r0, r3
 802423e:	f7ff f9c4 	bl	80235ca <lfs_tole32>
 8024242:	4602      	mov	r2, r0
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	615a      	str	r2, [r3, #20]
}
 8024248:	bf00      	nop
 802424a:	3708      	adds	r7, #8
 802424c:	46bd      	mov	sp, r7
 802424e:	bd80      	pop	{r7, pc}

08024250 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8024250:	b480      	push	{r7}
 8024252:	b085      	sub	sp, #20
 8024254:	af00      	add	r7, sp, #0
 8024256:	6078      	str	r0, [r7, #4]
 8024258:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802425a:	1d3b      	adds	r3, r7, #4
 802425c:	60fb      	str	r3, [r7, #12]
 802425e:	e009      	b.n	8024274 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8024260:	68fb      	ldr	r3, [r7, #12]
 8024262:	681b      	ldr	r3, [r3, #0]
 8024264:	683a      	ldr	r2, [r7, #0]
 8024266:	429a      	cmp	r2, r3
 8024268:	d101      	bne.n	802426e <lfs_mlist_isopen+0x1e>
            return true;
 802426a:	2301      	movs	r3, #1
 802426c:	e007      	b.n	802427e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802426e:	68fb      	ldr	r3, [r7, #12]
 8024270:	681b      	ldr	r3, [r3, #0]
 8024272:	60fb      	str	r3, [r7, #12]
 8024274:	68fb      	ldr	r3, [r7, #12]
 8024276:	681b      	ldr	r3, [r3, #0]
 8024278:	2b00      	cmp	r3, #0
 802427a:	d1f1      	bne.n	8024260 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 802427c:	2300      	movs	r3, #0
}
 802427e:	4618      	mov	r0, r3
 8024280:	3714      	adds	r7, #20
 8024282:	46bd      	mov	sp, r7
 8024284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024288:	4770      	bx	lr

0802428a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 802428a:	b480      	push	{r7}
 802428c:	b085      	sub	sp, #20
 802428e:	af00      	add	r7, sp, #0
 8024290:	6078      	str	r0, [r7, #4]
 8024292:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024294:	687b      	ldr	r3, [r7, #4]
 8024296:	3328      	adds	r3, #40	; 0x28
 8024298:	60fb      	str	r3, [r7, #12]
 802429a:	e00d      	b.n	80242b8 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 802429c:	68fb      	ldr	r3, [r7, #12]
 802429e:	681b      	ldr	r3, [r3, #0]
 80242a0:	683a      	ldr	r2, [r7, #0]
 80242a2:	429a      	cmp	r2, r3
 80242a4:	d105      	bne.n	80242b2 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 80242a6:	68fb      	ldr	r3, [r7, #12]
 80242a8:	681b      	ldr	r3, [r3, #0]
 80242aa:	681a      	ldr	r2, [r3, #0]
 80242ac:	68fb      	ldr	r3, [r7, #12]
 80242ae:	601a      	str	r2, [r3, #0]
            break;
 80242b0:	e007      	b.n	80242c2 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 80242b2:	68fb      	ldr	r3, [r7, #12]
 80242b4:	681b      	ldr	r3, [r3, #0]
 80242b6:	60fb      	str	r3, [r7, #12]
 80242b8:	68fb      	ldr	r3, [r7, #12]
 80242ba:	681b      	ldr	r3, [r3, #0]
 80242bc:	2b00      	cmp	r3, #0
 80242be:	d1ed      	bne.n	802429c <lfs_mlist_remove+0x12>
        }
    }
}
 80242c0:	bf00      	nop
 80242c2:	bf00      	nop
 80242c4:	3714      	adds	r7, #20
 80242c6:	46bd      	mov	sp, r7
 80242c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242cc:	4770      	bx	lr

080242ce <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 80242ce:	b480      	push	{r7}
 80242d0:	b083      	sub	sp, #12
 80242d2:	af00      	add	r7, sp, #0
 80242d4:	6078      	str	r0, [r7, #4]
 80242d6:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80242dc:	683b      	ldr	r3, [r7, #0]
 80242de:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 80242e0:	687b      	ldr	r3, [r7, #4]
 80242e2:	683a      	ldr	r2, [r7, #0]
 80242e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80242e6:	bf00      	nop
 80242e8:	370c      	adds	r7, #12
 80242ea:	46bd      	mov	sp, r7
 80242ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242f0:	4770      	bx	lr

080242f2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80242f2:	b480      	push	{r7}
 80242f4:	b085      	sub	sp, #20
 80242f6:	af00      	add	r7, sp, #0
 80242f8:	6078      	str	r0, [r7, #4]
 80242fa:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80242fc:	687b      	ldr	r3, [r7, #4]
 80242fe:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8024300:	68fb      	ldr	r3, [r7, #12]
 8024302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024304:	683a      	ldr	r2, [r7, #0]
 8024306:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8024308:	68fb      	ldr	r3, [r7, #12]
 802430a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802430c:	6a1b      	ldr	r3, [r3, #32]
 802430e:	4413      	add	r3, r2
 8024310:	68fa      	ldr	r2, [r7, #12]
 8024312:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8024314:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8024316:	fbb3 f1f2 	udiv	r1, r3, r2
 802431a:	fb01 f202 	mul.w	r2, r1, r2
 802431e:	1a9b      	subs	r3, r3, r2
 8024320:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8024322:	68fb      	ldr	r3, [r7, #12]
 8024324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024326:	68ba      	ldr	r2, [r7, #8]
 8024328:	429a      	cmp	r2, r3
 802432a:	d212      	bcs.n	8024352 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8024330:	68bb      	ldr	r3, [r7, #8]
 8024332:	095b      	lsrs	r3, r3, #5
 8024334:	009a      	lsls	r2, r3, #2
 8024336:	440a      	add	r2, r1
 8024338:	6811      	ldr	r1, [r2, #0]
 802433a:	68ba      	ldr	r2, [r7, #8]
 802433c:	f002 021f 	and.w	r2, r2, #31
 8024340:	2001      	movs	r0, #1
 8024342:	fa00 f202 	lsl.w	r2, r0, r2
 8024346:	68f8      	ldr	r0, [r7, #12]
 8024348:	6e40      	ldr	r0, [r0, #100]	; 0x64
 802434a:	009b      	lsls	r3, r3, #2
 802434c:	4403      	add	r3, r0
 802434e:	430a      	orrs	r2, r1
 8024350:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8024352:	2300      	movs	r3, #0
}
 8024354:	4618      	mov	r0, r3
 8024356:	3714      	adds	r7, #20
 8024358:	46bd      	mov	sp, r7
 802435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802435e:	4770      	bx	lr

08024360 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024360:	b480      	push	{r7}
 8024362:	b083      	sub	sp, #12
 8024364:	af00      	add	r7, sp, #0
 8024366:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024368:	687b      	ldr	r3, [r7, #4]
 802436a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802436c:	6a1a      	ldr	r2, [r3, #32]
 802436e:	687b      	ldr	r3, [r7, #4]
 8024370:	661a      	str	r2, [r3, #96]	; 0x60
}
 8024372:	bf00      	nop
 8024374:	370c      	adds	r7, #12
 8024376:	46bd      	mov	sp, r7
 8024378:	f85d 7b04 	ldr.w	r7, [sp], #4
 802437c:	4770      	bx	lr

0802437e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 802437e:	b580      	push	{r7, lr}
 8024380:	b082      	sub	sp, #8
 8024382:	af00      	add	r7, sp, #0
 8024384:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8024386:	687b      	ldr	r3, [r7, #4]
 8024388:	2200      	movs	r2, #0
 802438a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 802438c:	687b      	ldr	r3, [r7, #4]
 802438e:	2200      	movs	r2, #0
 8024390:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8024392:	6878      	ldr	r0, [r7, #4]
 8024394:	f7ff ffe4 	bl	8024360 <lfs_alloc_ack>
}
 8024398:	bf00      	nop
 802439a:	3708      	adds	r7, #8
 802439c:	46bd      	mov	sp, r7
 802439e:	bd80      	pop	{r7, pc}

080243a0 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 80243a0:	b580      	push	{r7, lr}
 80243a2:	b086      	sub	sp, #24
 80243a4:	af02      	add	r7, sp, #8
 80243a6:	6078      	str	r0, [r7, #4]
 80243a8:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 80243aa:	e04f      	b.n	802444c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 80243ac:	687b      	ldr	r3, [r7, #4]
 80243ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80243b0:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 80243b2:	687b      	ldr	r3, [r7, #4]
 80243b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80243b6:	1c5a      	adds	r2, r3, #1
 80243b8:	687b      	ldr	r3, [r7, #4]
 80243ba:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 80243bc:	687b      	ldr	r3, [r7, #4]
 80243be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80243c0:	1e5a      	subs	r2, r3, #1
 80243c2:	687b      	ldr	r3, [r7, #4]
 80243c4:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 80243c6:	687b      	ldr	r3, [r7, #4]
 80243c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80243ca:	68bb      	ldr	r3, [r7, #8]
 80243cc:	095b      	lsrs	r3, r3, #5
 80243ce:	009b      	lsls	r3, r3, #2
 80243d0:	4413      	add	r3, r2
 80243d2:	681a      	ldr	r2, [r3, #0]
 80243d4:	68bb      	ldr	r3, [r7, #8]
 80243d6:	f003 031f 	and.w	r3, r3, #31
 80243da:	2101      	movs	r1, #1
 80243dc:	fa01 f303 	lsl.w	r3, r1, r3
 80243e0:	4013      	ands	r3, r2
 80243e2:	2b00      	cmp	r3, #0
 80243e4:	d132      	bne.n	802444c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 80243e6:	687b      	ldr	r3, [r7, #4]
 80243e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80243ea:	68bb      	ldr	r3, [r7, #8]
 80243ec:	4413      	add	r3, r2
 80243ee:	687a      	ldr	r2, [r7, #4]
 80243f0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80243f2:	6a12      	ldr	r2, [r2, #32]
 80243f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80243f8:	fb01 f202 	mul.w	r2, r1, r2
 80243fc:	1a9a      	subs	r2, r3, r2
 80243fe:	683b      	ldr	r3, [r7, #0]
 8024400:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8024402:	e009      	b.n	8024418 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8024404:	687b      	ldr	r3, [r7, #4]
 8024406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024408:	1c5a      	adds	r2, r3, #1
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 802440e:	687b      	ldr	r3, [r7, #4]
 8024410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024412:	1e5a      	subs	r2, r3, #1
 8024414:	687b      	ldr	r3, [r7, #4]
 8024416:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8024418:	687b      	ldr	r3, [r7, #4]
 802441a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 802441c:	687b      	ldr	r3, [r7, #4]
 802441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024420:	429a      	cmp	r2, r3
 8024422:	d011      	beq.n	8024448 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8024424:	687b      	ldr	r3, [r7, #4]
 8024426:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8024428:	687b      	ldr	r3, [r7, #4]
 802442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 802442c:	095b      	lsrs	r3, r3, #5
 802442e:	009b      	lsls	r3, r3, #2
 8024430:	4413      	add	r3, r2
 8024432:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8024434:	687b      	ldr	r3, [r7, #4]
 8024436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024438:	f003 031f 	and.w	r3, r3, #31
 802443c:	2101      	movs	r1, #1
 802443e:	fa01 f303 	lsl.w	r3, r1, r3
 8024442:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8024444:	2b00      	cmp	r3, #0
 8024446:	d1dd      	bne.n	8024404 <lfs_alloc+0x64>
                }

                return 0;
 8024448:	2300      	movs	r3, #0
 802444a:	e050      	b.n	80244ee <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024450:	687b      	ldr	r3, [r7, #4]
 8024452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024454:	429a      	cmp	r2, r3
 8024456:	d1a9      	bne.n	80243ac <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802445c:	2b00      	cmp	r3, #0
 802445e:	d10f      	bne.n	8024480 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024460:	687b      	ldr	r3, [r7, #4]
 8024462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024468:	4413      	add	r3, r2
 802446a:	4a23      	ldr	r2, [pc, #140]	; (80244f8 <lfs_alloc+0x158>)
 802446c:	9200      	str	r2, [sp, #0]
 802446e:	f240 2247 	movw	r2, #583	; 0x247
 8024472:	4922      	ldr	r1, [pc, #136]	; (80244fc <lfs_alloc+0x15c>)
 8024474:	4822      	ldr	r0, [pc, #136]	; (8024500 <lfs_alloc+0x160>)
 8024476:	f008 ffab 	bl	802d3d0 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 802447a:	f06f 031b 	mvn.w	r3, #27
 802447e:	e036      	b.n	80244ee <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024480:	687b      	ldr	r3, [r7, #4]
 8024482:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024484:	687b      	ldr	r3, [r7, #4]
 8024486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024488:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 802448a:	687a      	ldr	r2, [r7, #4]
 802448c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802448e:	6a12      	ldr	r2, [r2, #32]
 8024490:	fbb3 f1f2 	udiv	r1, r3, r2
 8024494:	fb01 f202 	mul.w	r2, r1, r2
 8024498:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 802449a:	687b      	ldr	r3, [r7, #4]
 802449c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 802449e:	687b      	ldr	r3, [r7, #4]
 80244a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80244a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80244a4:	00da      	lsls	r2, r3, #3
 80244a6:	687b      	ldr	r3, [r7, #4]
 80244a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80244aa:	4619      	mov	r1, r3
 80244ac:	4610      	mov	r0, r2
 80244ae:	f7ff f811 	bl	80234d4 <lfs_min>
 80244b2:	4602      	mov	r2, r0
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80244b8:	687b      	ldr	r3, [r7, #4]
 80244ba:	2200      	movs	r2, #0
 80244bc:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80244be:	687b      	ldr	r3, [r7, #4]
 80244c0:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80244c2:	687b      	ldr	r3, [r7, #4]
 80244c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80244c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80244c8:	461a      	mov	r2, r3
 80244ca:	2100      	movs	r1, #0
 80244cc:	f009 f916 	bl	802d6fc <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 80244d0:	2301      	movs	r3, #1
 80244d2:	687a      	ldr	r2, [r7, #4]
 80244d4:	490b      	ldr	r1, [pc, #44]	; (8024504 <lfs_alloc+0x164>)
 80244d6:	6878      	ldr	r0, [r7, #4]
 80244d8:	f005 fb3e 	bl	8029b58 <lfs_fs_rawtraverse>
 80244dc:	60f8      	str	r0, [r7, #12]
        if (err) {
 80244de:	68fb      	ldr	r3, [r7, #12]
 80244e0:	2b00      	cmp	r3, #0
 80244e2:	f43f af62 	beq.w	80243aa <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 80244e6:	6878      	ldr	r0, [r7, #4]
 80244e8:	f7ff ff49 	bl	802437e <lfs_alloc_drop>
            return err;
 80244ec:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 80244ee:	4618      	mov	r0, r3
 80244f0:	3710      	adds	r7, #16
 80244f2:	46bd      	mov	sp, r7
 80244f4:	bd80      	pop	{r7, pc}
 80244f6:	bf00      	nop
 80244f8:	0803346c 	.word	0x0803346c
 80244fc:	08033358 	.word	0x08033358
 8024500:	08033444 	.word	0x08033444
 8024504:	080242f3 	.word	0x080242f3

08024508 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8024508:	b590      	push	{r4, r7, lr}
 802450a:	b08f      	sub	sp, #60	; 0x3c
 802450c:	af04      	add	r7, sp, #16
 802450e:	60f8      	str	r0, [r7, #12]
 8024510:	60b9      	str	r1, [r7, #8]
 8024512:	607a      	str	r2, [r7, #4]
 8024514:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8024516:	68bb      	ldr	r3, [r7, #8]
 8024518:	68db      	ldr	r3, [r3, #12]
 802451a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 802451c:	68bb      	ldr	r3, [r7, #8]
 802451e:	691b      	ldr	r3, [r3, #16]
 8024520:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8024522:	2300      	movs	r3, #0
 8024524:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024526:	68fb      	ldr	r3, [r7, #12]
 8024528:	333c      	adds	r3, #60	; 0x3c
 802452a:	68ba      	ldr	r2, [r7, #8]
 802452c:	4611      	mov	r1, r2
 802452e:	4618      	mov	r0, r3
 8024530:	f7ff fd8e 	bl	8024050 <lfs_gstate_hasmovehere>
 8024534:	4603      	mov	r3, r0
 8024536:	2b00      	cmp	r3, #0
 8024538:	f000 80ba 	beq.w	80246b0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 802453c:	6878      	ldr	r0, [r7, #4]
 802453e:	f7ff fcdf 	bl	8023f00 <lfs_tag_id>
 8024542:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 8024544:	2b00      	cmp	r3, #0
 8024546:	f000 80b3 	beq.w	80246b0 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 802454a:	68fb      	ldr	r3, [r7, #12]
 802454c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802454e:	4618      	mov	r0, r3
 8024550:	f7ff fcd6 	bl	8023f00 <lfs_tag_id>
 8024554:	4603      	mov	r3, r0
 8024556:	461c      	mov	r4, r3
 8024558:	6838      	ldr	r0, [r7, #0]
 802455a:	f7ff fcd1 	bl	8023f00 <lfs_tag_id>
 802455e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024560:	429c      	cmp	r4, r3
 8024562:	f200 80a5 	bhi.w	80246b0 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024566:	6a3b      	ldr	r3, [r7, #32]
 8024568:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802456c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 802456e:	e09f      	b.n	80246b0 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8024570:	693b      	ldr	r3, [r7, #16]
 8024572:	4618      	mov	r0, r3
 8024574:	f7ff fce1 	bl	8023f3a <lfs_tag_dsize>
 8024578:	4602      	mov	r2, r0
 802457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802457c:	1a9b      	subs	r3, r3, r2
 802457e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8024580:	693b      	ldr	r3, [r7, #16]
 8024582:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8024584:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8024586:	68bb      	ldr	r3, [r7, #8]
 8024588:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 802458a:	2204      	movs	r2, #4
 802458c:	9203      	str	r2, [sp, #12]
 802458e:	f107 0210 	add.w	r2, r7, #16
 8024592:	9202      	str	r2, [sp, #8]
 8024594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024596:	9201      	str	r2, [sp, #4]
 8024598:	9300      	str	r3, [sp, #0]
 802459a:	2304      	movs	r3, #4
 802459c:	460a      	mov	r2, r1
 802459e:	2100      	movs	r1, #0
 80245a0:	68f8      	ldr	r0, [r7, #12]
 80245a2:	f7ff f873 	bl	802368c <lfs_bd_read>
 80245a6:	61b8      	str	r0, [r7, #24]
        if (err) {
 80245a8:	69bb      	ldr	r3, [r7, #24]
 80245aa:	2b00      	cmp	r3, #0
 80245ac:	d001      	beq.n	80245b2 <lfs_dir_getslice+0xaa>
            return err;
 80245ae:	69bb      	ldr	r3, [r7, #24]
 80245b0:	e08a      	b.n	80246c8 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 80245b2:	693b      	ldr	r3, [r7, #16]
 80245b4:	4618      	mov	r0, r3
 80245b6:	f7ff f814 	bl	80235e2 <lfs_frombe32>
 80245ba:	4602      	mov	r2, r0
 80245bc:	69fb      	ldr	r3, [r7, #28]
 80245be:	4053      	eors	r3, r2
 80245c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80245c4:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 80245c6:	6878      	ldr	r0, [r7, #4]
 80245c8:	f7ff fc9a 	bl	8023f00 <lfs_tag_id>
 80245cc:	4603      	mov	r3, r0
 80245ce:	2b00      	cmp	r3, #0
 80245d0:	d02b      	beq.n	802462a <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80245d2:	69f8      	ldr	r0, [r7, #28]
 80245d4:	f7ff fc5a 	bl	8023e8c <lfs_tag_type1>
 80245d8:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 80245da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80245de:	d124      	bne.n	802462a <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 80245e0:	69f8      	ldr	r0, [r7, #28]
 80245e2:	f7ff fc8d 	bl	8023f00 <lfs_tag_id>
 80245e6:	4603      	mov	r3, r0
 80245e8:	461c      	mov	r4, r3
 80245ea:	6a3b      	ldr	r3, [r7, #32]
 80245ec:	683a      	ldr	r2, [r7, #0]
 80245ee:	1ad3      	subs	r3, r2, r3
 80245f0:	4618      	mov	r0, r3
 80245f2:	f7ff fc85 	bl	8023f00 <lfs_tag_id>
 80245f6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80245f8:	429c      	cmp	r4, r3
 80245fa:	d816      	bhi.n	802462a <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80245fc:	6a3b      	ldr	r3, [r7, #32]
 80245fe:	683a      	ldr	r2, [r7, #0]
 8024600:	1ad2      	subs	r2, r2, r3
 8024602:	4b33      	ldr	r3, [pc, #204]	; (80246d0 <lfs_dir_getslice+0x1c8>)
 8024604:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8024606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802460a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802460e:	69fa      	ldr	r2, [r7, #28]
 8024610:	429a      	cmp	r2, r3
 8024612:	d102      	bne.n	802461a <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 8024614:	f06f 0301 	mvn.w	r3, #1
 8024618:	e056      	b.n	80246c8 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 802461a:	69f8      	ldr	r0, [r7, #28]
 802461c:	f7ff fc63 	bl	8023ee6 <lfs_tag_splice>
 8024620:	4603      	mov	r3, r0
 8024622:	029a      	lsls	r2, r3, #10
 8024624:	6a3b      	ldr	r3, [r7, #32]
 8024626:	4413      	add	r3, r2
 8024628:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 802462a:	687a      	ldr	r2, [r7, #4]
 802462c:	69fb      	ldr	r3, [r7, #28]
 802462e:	401a      	ands	r2, r3
 8024630:	6a3b      	ldr	r3, [r7, #32]
 8024632:	6839      	ldr	r1, [r7, #0]
 8024634:	1ac9      	subs	r1, r1, r3
 8024636:	687b      	ldr	r3, [r7, #4]
 8024638:	400b      	ands	r3, r1
 802463a:	429a      	cmp	r2, r3
 802463c:	d138      	bne.n	80246b0 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 802463e:	69f8      	ldr	r0, [r7, #28]
 8024640:	f7ff fc11 	bl	8023e66 <lfs_tag_isdelete>
 8024644:	4603      	mov	r3, r0
 8024646:	2b00      	cmp	r3, #0
 8024648:	d002      	beq.n	8024650 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 802464a:	f06f 0301 	mvn.w	r3, #1
 802464e:	e03b      	b.n	80246c8 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8024650:	69f8      	ldr	r0, [r7, #28]
 8024652:	f7ff fc65 	bl	8023f20 <lfs_tag_size>
 8024656:	4603      	mov	r3, r0
 8024658:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802465a:	4618      	mov	r0, r3
 802465c:	f7fe ff3a 	bl	80234d4 <lfs_min>
 8024660:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024662:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024664:	68bb      	ldr	r3, [r7, #8]
 8024666:	681b      	ldr	r3, [r3, #0]
 8024668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802466a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 802466c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 802466e:	3204      	adds	r2, #4
 8024670:	6979      	ldr	r1, [r7, #20]
 8024672:	9103      	str	r1, [sp, #12]
 8024674:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8024676:	9102      	str	r1, [sp, #8]
 8024678:	9201      	str	r2, [sp, #4]
 802467a:	9300      	str	r3, [sp, #0]
 802467c:	697b      	ldr	r3, [r7, #20]
 802467e:	4602      	mov	r2, r0
 8024680:	2100      	movs	r1, #0
 8024682:	68f8      	ldr	r0, [r7, #12]
 8024684:	f7ff f802 	bl	802368c <lfs_bd_read>
 8024688:	61b8      	str	r0, [r7, #24]
            if (err) {
 802468a:	69bb      	ldr	r3, [r7, #24]
 802468c:	2b00      	cmp	r3, #0
 802468e:	d001      	beq.n	8024694 <lfs_dir_getslice+0x18c>
                return err;
 8024690:	69bb      	ldr	r3, [r7, #24]
 8024692:	e019      	b.n	80246c8 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8024694:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024696:	697b      	ldr	r3, [r7, #20]
 8024698:	18d0      	adds	r0, r2, r3
 802469a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 802469c:	697b      	ldr	r3, [r7, #20]
 802469e:	1ad3      	subs	r3, r2, r3
 80246a0:	461a      	mov	r2, r3
 80246a2:	2100      	movs	r1, #0
 80246a4:	f009 f82a 	bl	802d6fc <memset>

            return tag + gdiff;
 80246a8:	6a3a      	ldr	r2, [r7, #32]
 80246aa:	69fb      	ldr	r3, [r7, #28]
 80246ac:	4413      	add	r3, r2
 80246ae:	e00b      	b.n	80246c8 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 80246b0:	693b      	ldr	r3, [r7, #16]
 80246b2:	4618      	mov	r0, r3
 80246b4:	f7ff fc41 	bl	8023f3a <lfs_tag_dsize>
 80246b8:	4603      	mov	r3, r0
 80246ba:	3304      	adds	r3, #4
 80246bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80246be:	429a      	cmp	r2, r3
 80246c0:	f4bf af56 	bcs.w	8024570 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 80246c4:	f06f 0301 	mvn.w	r3, #1
}
 80246c8:	4618      	mov	r0, r3
 80246ca:	372c      	adds	r7, #44	; 0x2c
 80246cc:	46bd      	mov	sp, r7
 80246ce:	bd90      	pop	{r4, r7, pc}
 80246d0:	000ffc00 	.word	0x000ffc00

080246d4 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 80246d4:	b580      	push	{r7, lr}
 80246d6:	b088      	sub	sp, #32
 80246d8:	af04      	add	r7, sp, #16
 80246da:	60f8      	str	r0, [r7, #12]
 80246dc:	60b9      	str	r1, [r7, #8]
 80246de:	607a      	str	r2, [r7, #4]
 80246e0:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 80246e2:	6838      	ldr	r0, [r7, #0]
 80246e4:	f7ff fc1c 	bl	8023f20 <lfs_tag_size>
 80246e8:	4603      	mov	r3, r0
 80246ea:	9302      	str	r3, [sp, #8]
 80246ec:	69bb      	ldr	r3, [r7, #24]
 80246ee:	9301      	str	r3, [sp, #4]
 80246f0:	2300      	movs	r3, #0
 80246f2:	9300      	str	r3, [sp, #0]
 80246f4:	683b      	ldr	r3, [r7, #0]
 80246f6:	687a      	ldr	r2, [r7, #4]
 80246f8:	68b9      	ldr	r1, [r7, #8]
 80246fa:	68f8      	ldr	r0, [r7, #12]
 80246fc:	f7ff ff04 	bl	8024508 <lfs_dir_getslice>
 8024700:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8024702:	4618      	mov	r0, r3
 8024704:	3710      	adds	r7, #16
 8024706:	46bd      	mov	sp, r7
 8024708:	bd80      	pop	{r7, pc}

0802470a <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 802470a:	b580      	push	{r7, lr}
 802470c:	b08c      	sub	sp, #48	; 0x30
 802470e:	af04      	add	r7, sp, #16
 8024710:	60f8      	str	r0, [r7, #12]
 8024712:	60b9      	str	r1, [r7, #8]
 8024714:	607a      	str	r2, [r7, #4]
 8024716:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8024718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802471a:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 802471c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802471e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024720:	441a      	add	r2, r3
 8024722:	68fb      	ldr	r3, [r7, #12]
 8024724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024726:	69db      	ldr	r3, [r3, #28]
 8024728:	429a      	cmp	r2, r3
 802472a:	f240 80c0 	bls.w	80248ae <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 802472e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8024732:	e0c1      	b.n	80248b8 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8024734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024736:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024738:	687b      	ldr	r3, [r7, #4]
 802473a:	2b00      	cmp	r3, #0
 802473c:	d03f      	beq.n	80247be <lfs_dir_getread+0xb4>
 802473e:	687b      	ldr	r3, [r7, #4]
 8024740:	681b      	ldr	r3, [r3, #0]
 8024742:	f113 0f02 	cmn.w	r3, #2
 8024746:	d13a      	bne.n	80247be <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8024748:	687b      	ldr	r3, [r7, #4]
 802474a:	685a      	ldr	r2, [r3, #4]
 802474c:	687b      	ldr	r3, [r7, #4]
 802474e:	689b      	ldr	r3, [r3, #8]
 8024750:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024754:	429a      	cmp	r2, r3
 8024756:	d232      	bcs.n	80247be <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8024758:	687b      	ldr	r3, [r7, #4]
 802475a:	685b      	ldr	r3, [r3, #4]
 802475c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802475e:	429a      	cmp	r2, r3
 8024760:	d324      	bcc.n	80247ac <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024762:	687b      	ldr	r3, [r7, #4]
 8024764:	689a      	ldr	r2, [r3, #8]
 8024766:	687b      	ldr	r3, [r7, #4]
 8024768:	6859      	ldr	r1, [r3, #4]
 802476a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802476c:	1acb      	subs	r3, r1, r3
 802476e:	4413      	add	r3, r2
 8024770:	4619      	mov	r1, r3
 8024772:	69b8      	ldr	r0, [r7, #24]
 8024774:	f7fe feae 	bl	80234d4 <lfs_min>
 8024778:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 802477a:	687b      	ldr	r3, [r7, #4]
 802477c:	68da      	ldr	r2, [r3, #12]
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	685b      	ldr	r3, [r3, #4]
 8024782:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024784:	1acb      	subs	r3, r1, r3
 8024786:	4413      	add	r3, r2
 8024788:	69ba      	ldr	r2, [r7, #24]
 802478a:	4619      	mov	r1, r3
 802478c:	69f8      	ldr	r0, [r7, #28]
 802478e:	f009 f98a 	bl	802daa6 <memcpy>

                data += diff;
 8024792:	69fa      	ldr	r2, [r7, #28]
 8024794:	69bb      	ldr	r3, [r7, #24]
 8024796:	4413      	add	r3, r2
 8024798:	61fb      	str	r3, [r7, #28]
                off += diff;
 802479a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802479c:	69bb      	ldr	r3, [r7, #24]
 802479e:	4413      	add	r3, r2
 80247a0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80247a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80247a4:	69bb      	ldr	r3, [r7, #24]
 80247a6:	1ad3      	subs	r3, r2, r3
 80247a8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80247aa:	e080      	b.n	80248ae <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 80247ac:	687b      	ldr	r3, [r7, #4]
 80247ae:	685a      	ldr	r2, [r3, #4]
 80247b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247b2:	1ad3      	subs	r3, r2, r3
 80247b4:	4619      	mov	r1, r3
 80247b6:	69b8      	ldr	r0, [r7, #24]
 80247b8:	f7fe fe8c 	bl	80234d4 <lfs_min>
 80247bc:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 80247be:	683b      	ldr	r3, [r7, #0]
 80247c0:	681b      	ldr	r3, [r3, #0]
 80247c2:	f113 0f02 	cmn.w	r3, #2
 80247c6:	d13a      	bne.n	802483e <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 80247c8:	683b      	ldr	r3, [r7, #0]
 80247ca:	685a      	ldr	r2, [r3, #4]
 80247cc:	683b      	ldr	r3, [r7, #0]
 80247ce:	689b      	ldr	r3, [r3, #8]
 80247d0:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 80247d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247d4:	429a      	cmp	r2, r3
 80247d6:	d232      	bcs.n	802483e <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 80247d8:	683b      	ldr	r3, [r7, #0]
 80247da:	685b      	ldr	r3, [r3, #4]
 80247dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80247de:	429a      	cmp	r2, r3
 80247e0:	d324      	bcc.n	802482c <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 80247e2:	683b      	ldr	r3, [r7, #0]
 80247e4:	689a      	ldr	r2, [r3, #8]
 80247e6:	683b      	ldr	r3, [r7, #0]
 80247e8:	6859      	ldr	r1, [r3, #4]
 80247ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80247ec:	1acb      	subs	r3, r1, r3
 80247ee:	4413      	add	r3, r2
 80247f0:	4619      	mov	r1, r3
 80247f2:	69b8      	ldr	r0, [r7, #24]
 80247f4:	f7fe fe6e 	bl	80234d4 <lfs_min>
 80247f8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80247fa:	683b      	ldr	r3, [r7, #0]
 80247fc:	68da      	ldr	r2, [r3, #12]
 80247fe:	683b      	ldr	r3, [r7, #0]
 8024800:	685b      	ldr	r3, [r3, #4]
 8024802:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024804:	1acb      	subs	r3, r1, r3
 8024806:	4413      	add	r3, r2
 8024808:	69ba      	ldr	r2, [r7, #24]
 802480a:	4619      	mov	r1, r3
 802480c:	69f8      	ldr	r0, [r7, #28]
 802480e:	f009 f94a 	bl	802daa6 <memcpy>

                data += diff;
 8024812:	69fa      	ldr	r2, [r7, #28]
 8024814:	69bb      	ldr	r3, [r7, #24]
 8024816:	4413      	add	r3, r2
 8024818:	61fb      	str	r3, [r7, #28]
                off += diff;
 802481a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802481c:	69bb      	ldr	r3, [r7, #24]
 802481e:	4413      	add	r3, r2
 8024820:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024822:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024824:	69bb      	ldr	r3, [r7, #24]
 8024826:	1ad3      	subs	r3, r2, r3
 8024828:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 802482a:	e040      	b.n	80248ae <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 802482c:	683b      	ldr	r3, [r7, #0]
 802482e:	685a      	ldr	r2, [r3, #4]
 8024830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024832:	1ad3      	subs	r3, r2, r3
 8024834:	4619      	mov	r1, r3
 8024836:	69b8      	ldr	r0, [r7, #24]
 8024838:	f7fe fe4c 	bl	80234d4 <lfs_min>
 802483c:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 802483e:	683b      	ldr	r3, [r7, #0]
 8024840:	f06f 0201 	mvn.w	r2, #1
 8024844:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8024846:	68fb      	ldr	r3, [r7, #12]
 8024848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802484a:	695b      	ldr	r3, [r3, #20]
 802484c:	4619      	mov	r1, r3
 802484e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024850:	f7fe fe50 	bl	80234f4 <lfs_aligndown>
 8024854:	4602      	mov	r2, r0
 8024856:	683b      	ldr	r3, [r7, #0]
 8024858:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 802485a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802485c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802485e:	441a      	add	r2, r3
 8024860:	68fb      	ldr	r3, [r7, #12]
 8024862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024864:	695b      	ldr	r3, [r3, #20]
 8024866:	4619      	mov	r1, r3
 8024868:	4610      	mov	r0, r2
 802486a:	f7fe fe58 	bl	802351e <lfs_alignup>
 802486e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024870:	68fb      	ldr	r3, [r7, #12]
 8024872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024876:	4619      	mov	r1, r3
 8024878:	4610      	mov	r0, r2
 802487a:	f7fe fe2b 	bl	80234d4 <lfs_min>
 802487e:	4602      	mov	r2, r0
 8024880:	683b      	ldr	r3, [r7, #0]
 8024882:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024884:	683b      	ldr	r3, [r7, #0]
 8024886:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024888:	683a      	ldr	r2, [r7, #0]
 802488a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 802488c:	6839      	ldr	r1, [r7, #0]
 802488e:	6889      	ldr	r1, [r1, #8]
 8024890:	9102      	str	r1, [sp, #8]
 8024892:	9201      	str	r2, [sp, #4]
 8024894:	9300      	str	r3, [sp, #0]
 8024896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802489a:	68b9      	ldr	r1, [r7, #8]
 802489c:	68f8      	ldr	r0, [r7, #12]
 802489e:	f7ff fe33 	bl	8024508 <lfs_dir_getslice>
 80248a2:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 80248a4:	697b      	ldr	r3, [r7, #20]
 80248a6:	2b00      	cmp	r3, #0
 80248a8:	da01      	bge.n	80248ae <lfs_dir_getread+0x1a4>
            return err;
 80248aa:	697b      	ldr	r3, [r7, #20]
 80248ac:	e004      	b.n	80248b8 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 80248ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80248b0:	2b00      	cmp	r3, #0
 80248b2:	f47f af3f 	bne.w	8024734 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 80248b6:	2300      	movs	r3, #0
}
 80248b8:	4618      	mov	r0, r3
 80248ba:	3720      	adds	r7, #32
 80248bc:	46bd      	mov	sp, r7
 80248be:	bd80      	pop	{r7, pc}

080248c0 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 80248c0:	b590      	push	{r4, r7, lr}
 80248c2:	b087      	sub	sp, #28
 80248c4:	af00      	add	r7, sp, #0
 80248c6:	60f8      	str	r0, [r7, #12]
 80248c8:	60b9      	str	r1, [r7, #8]
 80248ca:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 80248cc:	68fb      	ldr	r3, [r7, #12]
 80248ce:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80248d0:	68bb      	ldr	r3, [r7, #8]
 80248d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 80248d6:	2b00      	cmp	r3, #0
 80248d8:	d001      	beq.n	80248de <lfs_dir_traverse_filter+0x1e>
 80248da:	4b24      	ldr	r3, [pc, #144]	; (802496c <lfs_dir_traverse_filter+0xac>)
 80248dc:	e000      	b.n	80248e0 <lfs_dir_traverse_filter+0x20>
 80248de:	4b24      	ldr	r3, [pc, #144]	; (8024970 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 80248e0:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 80248e2:	697b      	ldr	r3, [r7, #20]
 80248e4:	681a      	ldr	r2, [r3, #0]
 80248e6:	68bb      	ldr	r3, [r7, #8]
 80248e8:	405a      	eors	r2, r3
 80248ea:	693b      	ldr	r3, [r7, #16]
 80248ec:	4013      	ands	r3, r2
 80248ee:	2b00      	cmp	r3, #0
 80248f0:	d014      	beq.n	802491c <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80248f2:	697b      	ldr	r3, [r7, #20]
 80248f4:	681b      	ldr	r3, [r3, #0]
 80248f6:	4618      	mov	r0, r3
 80248f8:	f7ff fab5 	bl	8023e66 <lfs_tag_isdelete>
 80248fc:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80248fe:	2b00      	cmp	r3, #0
 8024900:	d10c      	bne.n	802491c <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8024902:	68bb      	ldr	r3, [r7, #8]
 8024904:	4a19      	ldr	r2, [pc, #100]	; (802496c <lfs_dir_traverse_filter+0xac>)
 8024906:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8024908:	697b      	ldr	r3, [r7, #20]
 802490a:	6819      	ldr	r1, [r3, #0]
 802490c:	4b19      	ldr	r3, [pc, #100]	; (8024974 <lfs_dir_traverse_filter+0xb4>)
 802490e:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8024910:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8024914:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8024918:	429a      	cmp	r2, r3
 802491a:	d104      	bne.n	8024926 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 802491c:	697b      	ldr	r3, [r7, #20]
 802491e:	2200      	movs	r2, #0
 8024920:	601a      	str	r2, [r3, #0]
        return true;
 8024922:	2301      	movs	r3, #1
 8024924:	e01e      	b.n	8024964 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024926:	68b8      	ldr	r0, [r7, #8]
 8024928:	f7ff fab0 	bl	8023e8c <lfs_tag_type1>
 802492c:	4603      	mov	r3, r0
 802492e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024932:	d116      	bne.n	8024962 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8024934:	68b8      	ldr	r0, [r7, #8]
 8024936:	f7ff fae3 	bl	8023f00 <lfs_tag_id>
 802493a:	4603      	mov	r3, r0
 802493c:	461c      	mov	r4, r3
 802493e:	697b      	ldr	r3, [r7, #20]
 8024940:	681b      	ldr	r3, [r3, #0]
 8024942:	4618      	mov	r0, r3
 8024944:	f7ff fadc 	bl	8023f00 <lfs_tag_id>
 8024948:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 802494a:	429c      	cmp	r4, r3
 802494c:	d809      	bhi.n	8024962 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 802494e:	68b8      	ldr	r0, [r7, #8]
 8024950:	f7ff fac9 	bl	8023ee6 <lfs_tag_splice>
 8024954:	4603      	mov	r3, r0
 8024956:	029a      	lsls	r2, r3, #10
 8024958:	697b      	ldr	r3, [r7, #20]
 802495a:	681b      	ldr	r3, [r3, #0]
 802495c:	441a      	add	r2, r3
 802495e:	697b      	ldr	r3, [r7, #20]
 8024960:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024962:	2300      	movs	r3, #0
}
 8024964:	4618      	mov	r0, r3
 8024966:	371c      	adds	r7, #28
 8024968:	46bd      	mov	sp, r7
 802496a:	bd90      	pop	{r4, r7, pc}
 802496c:	7ffffc00 	.word	0x7ffffc00
 8024970:	700ffc00 	.word	0x700ffc00
 8024974:	000ffc00 	.word	0x000ffc00

08024978 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024978:	b590      	push	{r4, r7, lr}
 802497a:	b0c1      	sub	sp, #260	; 0x104
 802497c:	af04      	add	r7, sp, #16
 802497e:	60f8      	str	r0, [r7, #12]
 8024980:	60b9      	str	r1, [r7, #8]
 8024982:	607a      	str	r2, [r7, #4]
 8024984:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024986:	2300      	movs	r3, #0
 8024988:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 802498c:	6838      	ldr	r0, [r7, #0]
 802498e:	f7ff fad4 	bl	8023f3a <lfs_tag_dsize>
 8024992:	4602      	mov	r2, r0
 8024994:	687b      	ldr	r3, [r7, #4]
 8024996:	441a      	add	r2, r3
 8024998:	68bb      	ldr	r3, [r7, #8]
 802499a:	68db      	ldr	r3, [r3, #12]
 802499c:	429a      	cmp	r2, r3
 802499e:	d237      	bcs.n	8024a10 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 80249a0:	6838      	ldr	r0, [r7, #0]
 80249a2:	f7ff faca 	bl	8023f3a <lfs_tag_dsize>
 80249a6:	4602      	mov	r2, r0
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	4413      	add	r3, r2
 80249ac:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 80249ae:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 80249b0:	68bb      	ldr	r3, [r7, #8]
 80249b2:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 80249b4:	2204      	movs	r2, #4
 80249b6:	9203      	str	r2, [sp, #12]
 80249b8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80249bc:	9202      	str	r2, [sp, #8]
 80249be:	687a      	ldr	r2, [r7, #4]
 80249c0:	9201      	str	r2, [sp, #4]
 80249c2:	9300      	str	r3, [sp, #0]
 80249c4:	2304      	movs	r3, #4
 80249c6:	460a      	mov	r2, r1
 80249c8:	2100      	movs	r1, #0
 80249ca:	68f8      	ldr	r0, [r7, #12]
 80249cc:	f7fe fe5e 	bl	802368c <lfs_bd_read>
 80249d0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 80249d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80249d8:	2b00      	cmp	r3, #0
 80249da:	d002      	beq.n	80249e2 <lfs_dir_traverse+0x6a>
                    return err;
 80249dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80249e0:	e3a6      	b.n	8025130 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 80249e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80249e4:	4618      	mov	r0, r3
 80249e6:	f7fe fdfc 	bl	80235e2 <lfs_frombe32>
 80249ea:	4602      	mov	r2, r0
 80249ec:	683b      	ldr	r3, [r7, #0]
 80249ee:	4053      	eors	r3, r2
 80249f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80249f4:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 80249f6:	68bb      	ldr	r3, [r7, #8]
 80249f8:	681b      	ldr	r3, [r3, #0]
 80249fa:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 80249fc:	687b      	ldr	r3, [r7, #4]
 80249fe:	3304      	adds	r3, #4
 8024a00:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8024a02:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8024a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024a0c:	603b      	str	r3, [r7, #0]
 8024a0e:	e01b      	b.n	8024a48 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8024a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024a14:	2b00      	cmp	r3, #0
 8024a16:	dd13      	ble.n	8024a40 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8024a18:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024a1c:	681b      	ldr	r3, [r3, #0]
 8024a1e:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8024a20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024a24:	685b      	ldr	r3, [r3, #4]
 8024a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8024a2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024a2e:	3308      	adds	r3, #8
 8024a30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8024a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024a38:	3b01      	subs	r3, #1
 8024a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8024a3e:	e003      	b.n	8024a48 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8024a40:	2300      	movs	r3, #0
 8024a42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8024a46:	e2a2      	b.n	8024f8e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8024a48:	4b7e      	ldr	r3, [pc, #504]	; (8024c44 <lfs_dir_traverse+0x2cc>)
 8024a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8024a4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8024a54:	405a      	eors	r2, r3
 8024a56:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8024a5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8024a5e:	400b      	ands	r3, r1
 8024a60:	4013      	ands	r3, r2
 8024a62:	2b00      	cmp	r3, #0
 8024a64:	f040 8285 	bne.w	8024f72 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024a68:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024a6c:	f7ff fa48 	bl	8023f00 <lfs_tag_id>
 8024a70:	4603      	mov	r3, r0
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	f000 80f0 	beq.w	8024c58 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024a78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024a7c:	2b02      	cmp	r3, #2
 8024a7e:	d906      	bls.n	8024a8e <lfs_dir_traverse+0x116>
 8024a80:	4b71      	ldr	r3, [pc, #452]	; (8024c48 <lfs_dir_traverse+0x2d0>)
 8024a82:	4a72      	ldr	r2, [pc, #456]	; (8024c4c <lfs_dir_traverse+0x2d4>)
 8024a84:	f240 314e 	movw	r1, #846	; 0x34e
 8024a88:	4871      	ldr	r0, [pc, #452]	; (8024c50 <lfs_dir_traverse+0x2d8>)
 8024a8a:	f007 fc67 	bl	802c35c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8024a8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024a90:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024a94:	4613      	mov	r3, r2
 8024a96:	011b      	lsls	r3, r3, #4
 8024a98:	1a9b      	subs	r3, r3, r2
 8024a9a:	009b      	lsls	r3, r3, #2
 8024a9c:	33f0      	adds	r3, #240	; 0xf0
 8024a9e:	443b      	add	r3, r7
 8024aa0:	3b98      	subs	r3, #152	; 0x98
 8024aa2:	68ba      	ldr	r2, [r7, #8]
 8024aa4:	601a      	str	r2, [r3, #0]
 8024aa6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024aaa:	4613      	mov	r3, r2
 8024aac:	011b      	lsls	r3, r3, #4
 8024aae:	1a9b      	subs	r3, r3, r2
 8024ab0:	009b      	lsls	r3, r3, #2
 8024ab2:	33f0      	adds	r3, #240	; 0xf0
 8024ab4:	443b      	add	r3, r7
 8024ab6:	3b94      	subs	r3, #148	; 0x94
 8024ab8:	687a      	ldr	r2, [r7, #4]
 8024aba:	601a      	str	r2, [r3, #0]
 8024abc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ac0:	4613      	mov	r3, r2
 8024ac2:	011b      	lsls	r3, r3, #4
 8024ac4:	1a9b      	subs	r3, r3, r2
 8024ac6:	009b      	lsls	r3, r3, #2
 8024ac8:	33f0      	adds	r3, #240	; 0xf0
 8024aca:	443b      	add	r3, r7
 8024acc:	3b90      	subs	r3, #144	; 0x90
 8024ace:	683a      	ldr	r2, [r7, #0]
 8024ad0:	601a      	str	r2, [r3, #0]
 8024ad2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ad6:	4613      	mov	r3, r2
 8024ad8:	011b      	lsls	r3, r3, #4
 8024ada:	1a9b      	subs	r3, r3, r2
 8024adc:	009b      	lsls	r3, r3, #2
 8024ade:	33f0      	adds	r3, #240	; 0xf0
 8024ae0:	443b      	add	r3, r7
 8024ae2:	3b8c      	subs	r3, #140	; 0x8c
 8024ae4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024ae8:	601a      	str	r2, [r3, #0]
 8024aea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024aee:	4613      	mov	r3, r2
 8024af0:	011b      	lsls	r3, r3, #4
 8024af2:	1a9b      	subs	r3, r3, r2
 8024af4:	009b      	lsls	r3, r3, #2
 8024af6:	33f0      	adds	r3, #240	; 0xf0
 8024af8:	443b      	add	r3, r7
 8024afa:	3b88      	subs	r3, #136	; 0x88
 8024afc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024b00:	601a      	str	r2, [r3, #0]
 8024b02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b06:	4613      	mov	r3, r2
 8024b08:	011b      	lsls	r3, r3, #4
 8024b0a:	1a9b      	subs	r3, r3, r2
 8024b0c:	009b      	lsls	r3, r3, #2
 8024b0e:	33f0      	adds	r3, #240	; 0xf0
 8024b10:	443b      	add	r3, r7
 8024b12:	3b84      	subs	r3, #132	; 0x84
 8024b14:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024b18:	601a      	str	r2, [r3, #0]
 8024b1a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b1e:	4613      	mov	r3, r2
 8024b20:	011b      	lsls	r3, r3, #4
 8024b22:	1a9b      	subs	r3, r3, r2
 8024b24:	009b      	lsls	r3, r3, #2
 8024b26:	33f0      	adds	r3, #240	; 0xf0
 8024b28:	443b      	add	r3, r7
 8024b2a:	3b80      	subs	r3, #128	; 0x80
 8024b2c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024b30:	601a      	str	r2, [r3, #0]
 8024b32:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b36:	4613      	mov	r3, r2
 8024b38:	011b      	lsls	r3, r3, #4
 8024b3a:	1a9b      	subs	r3, r3, r2
 8024b3c:	009b      	lsls	r3, r3, #2
 8024b3e:	33f0      	adds	r3, #240	; 0xf0
 8024b40:	443b      	add	r3, r7
 8024b42:	3b7c      	subs	r3, #124	; 0x7c
 8024b44:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024b48:	801a      	strh	r2, [r3, #0]
 8024b4a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b4e:	4613      	mov	r3, r2
 8024b50:	011b      	lsls	r3, r3, #4
 8024b52:	1a9b      	subs	r3, r3, r2
 8024b54:	009b      	lsls	r3, r3, #2
 8024b56:	33f0      	adds	r3, #240	; 0xf0
 8024b58:	443b      	add	r3, r7
 8024b5a:	3b7a      	subs	r3, #122	; 0x7a
 8024b5c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024b60:	801a      	strh	r2, [r3, #0]
 8024b62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b66:	4613      	mov	r3, r2
 8024b68:	011b      	lsls	r3, r3, #4
 8024b6a:	1a9b      	subs	r3, r3, r2
 8024b6c:	009b      	lsls	r3, r3, #2
 8024b6e:	33f0      	adds	r3, #240	; 0xf0
 8024b70:	443b      	add	r3, r7
 8024b72:	3b78      	subs	r3, #120	; 0x78
 8024b74:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024b78:	801a      	strh	r2, [r3, #0]
 8024b7a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b7e:	4613      	mov	r3, r2
 8024b80:	011b      	lsls	r3, r3, #4
 8024b82:	1a9b      	subs	r3, r3, r2
 8024b84:	009b      	lsls	r3, r3, #2
 8024b86:	33f0      	adds	r3, #240	; 0xf0
 8024b88:	443b      	add	r3, r7
 8024b8a:	3b74      	subs	r3, #116	; 0x74
 8024b8c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024b90:	601a      	str	r2, [r3, #0]
 8024b92:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024b96:	4613      	mov	r3, r2
 8024b98:	011b      	lsls	r3, r3, #4
 8024b9a:	1a9b      	subs	r3, r3, r2
 8024b9c:	009b      	lsls	r3, r3, #2
 8024b9e:	33f0      	adds	r3, #240	; 0xf0
 8024ba0:	443b      	add	r3, r7
 8024ba2:	3b70      	subs	r3, #112	; 0x70
 8024ba4:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024ba8:	601a      	str	r2, [r3, #0]
 8024baa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024bae:	4613      	mov	r3, r2
 8024bb0:	011b      	lsls	r3, r3, #4
 8024bb2:	1a9b      	subs	r3, r3, r2
 8024bb4:	009b      	lsls	r3, r3, #2
 8024bb6:	33f0      	adds	r3, #240	; 0xf0
 8024bb8:	443b      	add	r3, r7
 8024bba:	3b6c      	subs	r3, #108	; 0x6c
 8024bbc:	6019      	str	r1, [r3, #0]
 8024bbe:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024bc2:	4613      	mov	r3, r2
 8024bc4:	011b      	lsls	r3, r3, #4
 8024bc6:	1a9b      	subs	r3, r3, r2
 8024bc8:	009b      	lsls	r3, r3, #2
 8024bca:	33f0      	adds	r3, #240	; 0xf0
 8024bcc:	443b      	add	r3, r7
 8024bce:	3b68      	subs	r3, #104	; 0x68
 8024bd0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024bd4:	601a      	str	r2, [r3, #0]
 8024bd6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024bda:	4613      	mov	r3, r2
 8024bdc:	011b      	lsls	r3, r3, #4
 8024bde:	1a9b      	subs	r3, r3, r2
 8024be0:	009b      	lsls	r3, r3, #2
 8024be2:	33f0      	adds	r3, #240	; 0xf0
 8024be4:	443b      	add	r3, r7
 8024be6:	3b68      	subs	r3, #104	; 0x68
 8024be8:	3304      	adds	r3, #4
 8024bea:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8024bee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024bf2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8024bf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024bfa:	3301      	adds	r3, #1
 8024bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8024c00:	2300      	movs	r3, #0
 8024c02:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8024c06:	2300      	movs	r3, #0
 8024c08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8024c0c:	2300      	movs	r3, #0
 8024c0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8024c12:	2300      	movs	r3, #0
 8024c14:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8024c18:	2300      	movs	r3, #0
 8024c1a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8024c1e:	4b0d      	ldr	r3, [pc, #52]	; (8024c54 <lfs_dir_traverse+0x2dc>)
 8024c20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8024c24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024c28:	1e5a      	subs	r2, r3, #1
 8024c2a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8024c2e:	4613      	mov	r3, r2
 8024c30:	011b      	lsls	r3, r3, #4
 8024c32:	1a9b      	subs	r3, r3, r2
 8024c34:	009b      	lsls	r3, r3, #2
 8024c36:	3328      	adds	r3, #40	; 0x28
 8024c38:	440b      	add	r3, r1
 8024c3a:	3304      	adds	r3, #4
 8024c3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8024c40:	e19e      	b.n	8024f80 <lfs_dir_traverse+0x608>
 8024c42:	bf00      	nop
 8024c44:	7ff00000 	.word	0x7ff00000
 8024c48:	08033470 	.word	0x08033470
 8024c4c:	08034650 	.word	0x08034650
 8024c50:	08033358 	.word	0x08033358
 8024c54:	080248c1 	.word	0x080248c1
            }
        }

popped:
 8024c58:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 8024c5a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024c5e:	f7ff f94f 	bl	8023f00 <lfs_tag_id>
 8024c62:	4603      	mov	r3, r0
 8024c64:	2b00      	cmp	r3, #0
 8024c66:	d015      	beq.n	8024c94 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c6a:	4618      	mov	r0, r3
 8024c6c:	f7ff f948 	bl	8023f00 <lfs_tag_id>
 8024c70:	4603      	mov	r3, r0
 8024c72:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8024c74:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8024c78:	4293      	cmp	r3, r2
 8024c7a:	f200 817c 	bhi.w	8024f76 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8024c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c80:	4618      	mov	r0, r3
 8024c82:	f7ff f93d 	bl	8023f00 <lfs_tag_id>
 8024c86:	4603      	mov	r3, r0
 8024c88:	461a      	mov	r2, r3
 8024c8a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8024c8e:	4293      	cmp	r3, r2
 8024c90:	f240 8171 	bls.w	8024f76 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8024c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024c96:	4618      	mov	r0, r3
 8024c98:	f7ff f908 	bl	8023eac <lfs_tag_type3>
 8024c9c:	4603      	mov	r3, r0
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	f43f ae74 	beq.w	802498c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8024ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024ca6:	4618      	mov	r0, r3
 8024ca8:	f7ff f900 	bl	8023eac <lfs_tag_type3>
 8024cac:	4603      	mov	r3, r0
 8024cae:	461a      	mov	r2, r3
 8024cb0:	f240 1301 	movw	r3, #257	; 0x101
 8024cb4:	429a      	cmp	r2, r3
 8024cb6:	f040 80e0 	bne.w	8024e7a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 8024cba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024cbe:	4ab1      	ldr	r2, [pc, #708]	; (8024f84 <lfs_dir_traverse+0x60c>)
 8024cc0:	4293      	cmp	r3, r2
 8024cc2:	f000 815a 	beq.w	8024f7a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8024cc6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cca:	4613      	mov	r3, r2
 8024ccc:	011b      	lsls	r3, r3, #4
 8024cce:	1a9b      	subs	r3, r3, r2
 8024cd0:	009b      	lsls	r3, r3, #2
 8024cd2:	33f0      	adds	r3, #240	; 0xf0
 8024cd4:	443b      	add	r3, r7
 8024cd6:	3b98      	subs	r3, #152	; 0x98
 8024cd8:	4618      	mov	r0, r3
 8024cda:	233c      	movs	r3, #60	; 0x3c
 8024cdc:	461a      	mov	r2, r3
 8024cde:	2100      	movs	r1, #0
 8024ce0:	f008 fd0c 	bl	802d6fc <memset>
 8024ce4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ce8:	4613      	mov	r3, r2
 8024cea:	011b      	lsls	r3, r3, #4
 8024cec:	1a9b      	subs	r3, r3, r2
 8024cee:	009b      	lsls	r3, r3, #2
 8024cf0:	33f0      	adds	r3, #240	; 0xf0
 8024cf2:	443b      	add	r3, r7
 8024cf4:	3b98      	subs	r3, #152	; 0x98
 8024cf6:	68ba      	ldr	r2, [r7, #8]
 8024cf8:	601a      	str	r2, [r3, #0]
 8024cfa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024cfe:	4613      	mov	r3, r2
 8024d00:	011b      	lsls	r3, r3, #4
 8024d02:	1a9b      	subs	r3, r3, r2
 8024d04:	009b      	lsls	r3, r3, #2
 8024d06:	33f0      	adds	r3, #240	; 0xf0
 8024d08:	443b      	add	r3, r7
 8024d0a:	3b94      	subs	r3, #148	; 0x94
 8024d0c:	687a      	ldr	r2, [r7, #4]
 8024d0e:	601a      	str	r2, [r3, #0]
 8024d10:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d14:	4613      	mov	r3, r2
 8024d16:	011b      	lsls	r3, r3, #4
 8024d18:	1a9b      	subs	r3, r3, r2
 8024d1a:	009b      	lsls	r3, r3, #2
 8024d1c:	33f0      	adds	r3, #240	; 0xf0
 8024d1e:	443b      	add	r3, r7
 8024d20:	3b90      	subs	r3, #144	; 0x90
 8024d22:	683a      	ldr	r2, [r7, #0]
 8024d24:	601a      	str	r2, [r3, #0]
 8024d26:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d2a:	4613      	mov	r3, r2
 8024d2c:	011b      	lsls	r3, r3, #4
 8024d2e:	1a9b      	subs	r3, r3, r2
 8024d30:	009b      	lsls	r3, r3, #2
 8024d32:	33f0      	adds	r3, #240	; 0xf0
 8024d34:	443b      	add	r3, r7
 8024d36:	3b8c      	subs	r3, #140	; 0x8c
 8024d38:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024d3c:	601a      	str	r2, [r3, #0]
 8024d3e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d42:	4613      	mov	r3, r2
 8024d44:	011b      	lsls	r3, r3, #4
 8024d46:	1a9b      	subs	r3, r3, r2
 8024d48:	009b      	lsls	r3, r3, #2
 8024d4a:	33f0      	adds	r3, #240	; 0xf0
 8024d4c:	443b      	add	r3, r7
 8024d4e:	3b88      	subs	r3, #136	; 0x88
 8024d50:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024d54:	601a      	str	r2, [r3, #0]
 8024d56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d5a:	4613      	mov	r3, r2
 8024d5c:	011b      	lsls	r3, r3, #4
 8024d5e:	1a9b      	subs	r3, r3, r2
 8024d60:	009b      	lsls	r3, r3, #2
 8024d62:	33f0      	adds	r3, #240	; 0xf0
 8024d64:	443b      	add	r3, r7
 8024d66:	3b84      	subs	r3, #132	; 0x84
 8024d68:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024d6c:	601a      	str	r2, [r3, #0]
 8024d6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d72:	4613      	mov	r3, r2
 8024d74:	011b      	lsls	r3, r3, #4
 8024d76:	1a9b      	subs	r3, r3, r2
 8024d78:	009b      	lsls	r3, r3, #2
 8024d7a:	33f0      	adds	r3, #240	; 0xf0
 8024d7c:	443b      	add	r3, r7
 8024d7e:	3b80      	subs	r3, #128	; 0x80
 8024d80:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024d84:	601a      	str	r2, [r3, #0]
 8024d86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024d8a:	4613      	mov	r3, r2
 8024d8c:	011b      	lsls	r3, r3, #4
 8024d8e:	1a9b      	subs	r3, r3, r2
 8024d90:	009b      	lsls	r3, r3, #2
 8024d92:	33f0      	adds	r3, #240	; 0xf0
 8024d94:	443b      	add	r3, r7
 8024d96:	3b7c      	subs	r3, #124	; 0x7c
 8024d98:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024d9c:	801a      	strh	r2, [r3, #0]
 8024d9e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024da2:	4613      	mov	r3, r2
 8024da4:	011b      	lsls	r3, r3, #4
 8024da6:	1a9b      	subs	r3, r3, r2
 8024da8:	009b      	lsls	r3, r3, #2
 8024daa:	33f0      	adds	r3, #240	; 0xf0
 8024dac:	443b      	add	r3, r7
 8024dae:	3b7a      	subs	r3, #122	; 0x7a
 8024db0:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024db4:	801a      	strh	r2, [r3, #0]
 8024db6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dba:	4613      	mov	r3, r2
 8024dbc:	011b      	lsls	r3, r3, #4
 8024dbe:	1a9b      	subs	r3, r3, r2
 8024dc0:	009b      	lsls	r3, r3, #2
 8024dc2:	33f0      	adds	r3, #240	; 0xf0
 8024dc4:	443b      	add	r3, r7
 8024dc6:	3b78      	subs	r3, #120	; 0x78
 8024dc8:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024dcc:	801a      	strh	r2, [r3, #0]
 8024dce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dd2:	4613      	mov	r3, r2
 8024dd4:	011b      	lsls	r3, r3, #4
 8024dd6:	1a9b      	subs	r3, r3, r2
 8024dd8:	009b      	lsls	r3, r3, #2
 8024dda:	33f0      	adds	r3, #240	; 0xf0
 8024ddc:	443b      	add	r3, r7
 8024dde:	3b74      	subs	r3, #116	; 0x74
 8024de0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024de4:	601a      	str	r2, [r3, #0]
 8024de6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024dea:	4613      	mov	r3, r2
 8024dec:	011b      	lsls	r3, r3, #4
 8024dee:	1a9b      	subs	r3, r3, r2
 8024df0:	009b      	lsls	r3, r3, #2
 8024df2:	33f0      	adds	r3, #240	; 0xf0
 8024df4:	443b      	add	r3, r7
 8024df6:	3b70      	subs	r3, #112	; 0x70
 8024df8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024dfc:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 8024dfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024e02:	3301      	adds	r3, #1
 8024e04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 8024e08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e0a:	4618      	mov	r0, r3
 8024e0c:	f7ff f888 	bl	8023f20 <lfs_tag_size>
 8024e10:	4603      	mov	r3, r0
 8024e12:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 8024e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e18:	4618      	mov	r0, r3
 8024e1a:	f7ff f871 	bl	8023f00 <lfs_tag_id>
 8024e1e:	4603      	mov	r3, r0
 8024e20:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 8024e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024e28:	60bb      	str	r3, [r7, #8]
            off = 0;
 8024e2a:	2300      	movs	r3, #0
 8024e2c:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 8024e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8024e32:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 8024e34:	2300      	movs	r3, #0
 8024e36:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 8024e3a:	2300      	movs	r3, #0
 8024e3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 8024e40:	4b51      	ldr	r3, [pc, #324]	; (8024f88 <lfs_dir_traverse+0x610>)
 8024e42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 8024e46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8024e4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 8024e4e:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024e52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8024e56:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024e5a:	3301      	adds	r3, #1
 8024e5c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8024e60:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8024e64:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8024e68:	1ad3      	subs	r3, r2, r3
 8024e6a:	b29a      	uxth	r2, r3
 8024e6c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8024e70:	4413      	add	r3, r2
 8024e72:	b29b      	uxth	r3, r3
 8024e74:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8024e78:	e588      	b.n	802498c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8024e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024e7c:	4618      	mov	r0, r3
 8024e7e:	f7ff f815 	bl	8023eac <lfs_tag_type3>
 8024e82:	4603      	mov	r3, r0
 8024e84:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8024e88:	d159      	bne.n	8024f3e <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024e8a:	2300      	movs	r3, #0
 8024e8c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024e90:	e04b      	b.n	8024f2a <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8024e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8024e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024e9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024e9e:	4613      	mov	r3, r2
 8024ea0:	005b      	lsls	r3, r3, #1
 8024ea2:	4413      	add	r3, r2
 8024ea4:	009b      	lsls	r3, r3, #2
 8024ea6:	461a      	mov	r2, r3
 8024ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024eac:	4413      	add	r3, r2
 8024eae:	781b      	ldrb	r3, [r3, #0]
 8024eb0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8024eb4:	051c      	lsls	r4, r3, #20
 8024eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024eb8:	4618      	mov	r0, r3
 8024eba:	f7ff f821 	bl	8023f00 <lfs_tag_id>
 8024ebe:	4603      	mov	r3, r0
 8024ec0:	461a      	mov	r2, r3
 8024ec2:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024ec6:	4413      	add	r3, r2
 8024ec8:	029b      	lsls	r3, r3, #10
 8024eca:	ea44 0103 	orr.w	r1, r4, r3
 8024ece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024ed2:	4613      	mov	r3, r2
 8024ed4:	005b      	lsls	r3, r3, #1
 8024ed6:	4413      	add	r3, r2
 8024ed8:	009b      	lsls	r3, r3, #2
 8024eda:	461a      	mov	r2, r3
 8024edc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024ee0:	4413      	add	r3, r2
 8024ee2:	689b      	ldr	r3, [r3, #8]
 8024ee4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8024ee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8024eea:	4613      	mov	r3, r2
 8024eec:	005b      	lsls	r3, r3, #1
 8024eee:	4413      	add	r3, r2
 8024ef0:	009b      	lsls	r3, r3, #2
 8024ef2:	461a      	mov	r2, r3
 8024ef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8024ef8:	4413      	add	r3, r2
 8024efa:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8024efc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024f00:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024f04:	4798      	blx	r3
 8024f06:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 8024f0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f0e:	2b00      	cmp	r3, #0
 8024f10:	da02      	bge.n	8024f18 <lfs_dir_traverse+0x5a0>
                    return res;
 8024f12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f16:	e10b      	b.n	8025130 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 8024f18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f1c:	2b00      	cmp	r3, #0
 8024f1e:	d12e      	bne.n	8024f7e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8024f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024f24:	3301      	adds	r3, #1
 8024f26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024f2c:	4618      	mov	r0, r3
 8024f2e:	f7fe fff7 	bl	8023f20 <lfs_tag_size>
 8024f32:	4602      	mov	r2, r0
 8024f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8024f38:	4293      	cmp	r3, r2
 8024f3a:	d3aa      	bcc.n	8024e92 <lfs_dir_traverse+0x51a>
 8024f3c:	e526      	b.n	802498c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 8024f3e:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8024f42:	029a      	lsls	r2, r3, #10
 8024f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024f46:	18d1      	adds	r1, r2, r3
 8024f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8024f4c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024f50:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8024f54:	4798      	blx	r3
 8024f56:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 8024f5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f5e:	2b00      	cmp	r3, #0
 8024f60:	da02      	bge.n	8024f68 <lfs_dir_traverse+0x5f0>
                return res;
 8024f62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f66:	e0e3      	b.n	8025130 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8024f68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8024f6c:	2b00      	cmp	r3, #0
 8024f6e:	d10d      	bne.n	8024f8c <lfs_dir_traverse+0x614>
 8024f70:	e50c      	b.n	802498c <lfs_dir_traverse+0x14>
                continue;
 8024f72:	bf00      	nop
 8024f74:	e50a      	b.n	802498c <lfs_dir_traverse+0x14>
            continue;
 8024f76:	bf00      	nop
 8024f78:	e508      	b.n	802498c <lfs_dir_traverse+0x14>
                continue;
 8024f7a:	bf00      	nop
 8024f7c:	e506      	b.n	802498c <lfs_dir_traverse+0x14>
                    break;
 8024f7e:	bf00      	nop
        {
 8024f80:	e504      	b.n	802498c <lfs_dir_traverse+0x14>
 8024f82:	bf00      	nop
 8024f84:	080248c1 	.word	0x080248c1
 8024f88:	600ffc00 	.word	0x600ffc00
                break;
 8024f8c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 8024f8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024f92:	2b00      	cmp	r3, #0
 8024f94:	f000 80ca 	beq.w	802512c <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8024f98:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024f9c:	1e5a      	subs	r2, r3, #1
 8024f9e:	4613      	mov	r3, r2
 8024fa0:	011b      	lsls	r3, r3, #4
 8024fa2:	1a9b      	subs	r3, r3, r2
 8024fa4:	009b      	lsls	r3, r3, #2
 8024fa6:	33f0      	adds	r3, #240	; 0xf0
 8024fa8:	443b      	add	r3, r7
 8024faa:	3b98      	subs	r3, #152	; 0x98
 8024fac:	681b      	ldr	r3, [r3, #0]
 8024fae:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8024fb0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fb4:	1e5a      	subs	r2, r3, #1
 8024fb6:	4613      	mov	r3, r2
 8024fb8:	011b      	lsls	r3, r3, #4
 8024fba:	1a9b      	subs	r3, r3, r2
 8024fbc:	009b      	lsls	r3, r3, #2
 8024fbe:	33f0      	adds	r3, #240	; 0xf0
 8024fc0:	443b      	add	r3, r7
 8024fc2:	3b94      	subs	r3, #148	; 0x94
 8024fc4:	681b      	ldr	r3, [r3, #0]
 8024fc6:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8024fc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fcc:	1e5a      	subs	r2, r3, #1
 8024fce:	4613      	mov	r3, r2
 8024fd0:	011b      	lsls	r3, r3, #4
 8024fd2:	1a9b      	subs	r3, r3, r2
 8024fd4:	009b      	lsls	r3, r3, #2
 8024fd6:	33f0      	adds	r3, #240	; 0xf0
 8024fd8:	443b      	add	r3, r7
 8024fda:	3b90      	subs	r3, #144	; 0x90
 8024fdc:	681b      	ldr	r3, [r3, #0]
 8024fde:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8024fe0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fe4:	1e5a      	subs	r2, r3, #1
 8024fe6:	4613      	mov	r3, r2
 8024fe8:	011b      	lsls	r3, r3, #4
 8024fea:	1a9b      	subs	r3, r3, r2
 8024fec:	009b      	lsls	r3, r3, #2
 8024fee:	33f0      	adds	r3, #240	; 0xf0
 8024ff0:	443b      	add	r3, r7
 8024ff2:	3b8c      	subs	r3, #140	; 0x8c
 8024ff4:	681b      	ldr	r3, [r3, #0]
 8024ff6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 8024ffa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024ffe:	1e5a      	subs	r2, r3, #1
 8025000:	4613      	mov	r3, r2
 8025002:	011b      	lsls	r3, r3, #4
 8025004:	1a9b      	subs	r3, r3, r2
 8025006:	009b      	lsls	r3, r3, #2
 8025008:	33f0      	adds	r3, #240	; 0xf0
 802500a:	443b      	add	r3, r7
 802500c:	3b88      	subs	r3, #136	; 0x88
 802500e:	681b      	ldr	r3, [r3, #0]
 8025010:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 8025014:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025018:	1e5a      	subs	r2, r3, #1
 802501a:	4613      	mov	r3, r2
 802501c:	011b      	lsls	r3, r3, #4
 802501e:	1a9b      	subs	r3, r3, r2
 8025020:	009b      	lsls	r3, r3, #2
 8025022:	33f0      	adds	r3, #240	; 0xf0
 8025024:	443b      	add	r3, r7
 8025026:	3b84      	subs	r3, #132	; 0x84
 8025028:	681b      	ldr	r3, [r3, #0]
 802502a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 802502e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025032:	1e5a      	subs	r2, r3, #1
 8025034:	4613      	mov	r3, r2
 8025036:	011b      	lsls	r3, r3, #4
 8025038:	1a9b      	subs	r3, r3, r2
 802503a:	009b      	lsls	r3, r3, #2
 802503c:	33f0      	adds	r3, #240	; 0xf0
 802503e:	443b      	add	r3, r7
 8025040:	3b80      	subs	r3, #128	; 0x80
 8025042:	681b      	ldr	r3, [r3, #0]
 8025044:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 8025048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802504c:	1e5a      	subs	r2, r3, #1
 802504e:	4613      	mov	r3, r2
 8025050:	011b      	lsls	r3, r3, #4
 8025052:	1a9b      	subs	r3, r3, r2
 8025054:	009b      	lsls	r3, r3, #2
 8025056:	33f0      	adds	r3, #240	; 0xf0
 8025058:	443b      	add	r3, r7
 802505a:	3b7c      	subs	r3, #124	; 0x7c
 802505c:	881b      	ldrh	r3, [r3, #0]
 802505e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8025062:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025066:	1e5a      	subs	r2, r3, #1
 8025068:	4613      	mov	r3, r2
 802506a:	011b      	lsls	r3, r3, #4
 802506c:	1a9b      	subs	r3, r3, r2
 802506e:	009b      	lsls	r3, r3, #2
 8025070:	33f0      	adds	r3, #240	; 0xf0
 8025072:	443b      	add	r3, r7
 8025074:	3b7a      	subs	r3, #122	; 0x7a
 8025076:	881b      	ldrh	r3, [r3, #0]
 8025078:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 802507c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025080:	1e5a      	subs	r2, r3, #1
 8025082:	4613      	mov	r3, r2
 8025084:	011b      	lsls	r3, r3, #4
 8025086:	1a9b      	subs	r3, r3, r2
 8025088:	009b      	lsls	r3, r3, #2
 802508a:	33f0      	adds	r3, #240	; 0xf0
 802508c:	443b      	add	r3, r7
 802508e:	3b78      	subs	r3, #120	; 0x78
 8025090:	881b      	ldrh	r3, [r3, #0]
 8025092:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8025096:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802509a:	1e5a      	subs	r2, r3, #1
 802509c:	4613      	mov	r3, r2
 802509e:	011b      	lsls	r3, r3, #4
 80250a0:	1a9b      	subs	r3, r3, r2
 80250a2:	009b      	lsls	r3, r3, #2
 80250a4:	33f0      	adds	r3, #240	; 0xf0
 80250a6:	443b      	add	r3, r7
 80250a8:	3b74      	subs	r3, #116	; 0x74
 80250aa:	681b      	ldr	r3, [r3, #0]
 80250ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 80250b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250b4:	1e5a      	subs	r2, r3, #1
 80250b6:	4613      	mov	r3, r2
 80250b8:	011b      	lsls	r3, r3, #4
 80250ba:	1a9b      	subs	r3, r3, r2
 80250bc:	009b      	lsls	r3, r3, #2
 80250be:	33f0      	adds	r3, #240	; 0xf0
 80250c0:	443b      	add	r3, r7
 80250c2:	3b70      	subs	r3, #112	; 0x70
 80250c4:	681b      	ldr	r3, [r3, #0]
 80250c6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 80250ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250ce:	1e5a      	subs	r2, r3, #1
 80250d0:	4613      	mov	r3, r2
 80250d2:	011b      	lsls	r3, r3, #4
 80250d4:	1a9b      	subs	r3, r3, r2
 80250d6:	009b      	lsls	r3, r3, #2
 80250d8:	33f0      	adds	r3, #240	; 0xf0
 80250da:	443b      	add	r3, r7
 80250dc:	3b6c      	subs	r3, #108	; 0x6c
 80250de:	681b      	ldr	r3, [r3, #0]
 80250e0:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 80250e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80250e6:	1e5a      	subs	r2, r3, #1
 80250e8:	4613      	mov	r3, r2
 80250ea:	011b      	lsls	r3, r3, #4
 80250ec:	1a9b      	subs	r3, r3, r2
 80250ee:	009b      	lsls	r3, r3, #2
 80250f0:	33f0      	adds	r3, #240	; 0xf0
 80250f2:	443b      	add	r3, r7
 80250f4:	3b68      	subs	r3, #104	; 0x68
 80250f6:	681b      	ldr	r3, [r3, #0]
 80250f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80250fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025100:	1e5a      	subs	r2, r3, #1
 8025102:	4613      	mov	r3, r2
 8025104:	011b      	lsls	r3, r3, #4
 8025106:	1a9b      	subs	r3, r3, r2
 8025108:	009b      	lsls	r3, r3, #2
 802510a:	33f0      	adds	r3, #240	; 0xf0
 802510c:	443b      	add	r3, r7
 802510e:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 8025112:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8025116:	3204      	adds	r2, #4
 8025118:	e892 0003 	ldmia.w	r2, {r0, r1}
 802511c:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 8025120:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025124:	3b01      	subs	r3, #1
 8025126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 802512a:	e596      	b.n	8024c5a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 802512c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 8025130:	4618      	mov	r0, r3
 8025132:	37f4      	adds	r7, #244	; 0xf4
 8025134:	46bd      	mov	sp, r7
 8025136:	bd90      	pop	{r4, r7, pc}

08025138 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8025138:	b590      	push	{r4, r7, lr}
 802513a:	b09f      	sub	sp, #124	; 0x7c
 802513c:	af04      	add	r7, sp, #16
 802513e:	60f8      	str	r0, [r7, #12]
 8025140:	60b9      	str	r1, [r7, #8]
 8025142:	607a      	str	r2, [r7, #4]
 8025144:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8025146:	f04f 33ff 	mov.w	r3, #4294967295
 802514a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 802514c:	687b      	ldr	r3, [r7, #4]
 802514e:	681a      	ldr	r2, [r3, #0]
 8025150:	68fb      	ldr	r3, [r7, #12]
 8025152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025154:	6a1b      	ldr	r3, [r3, #32]
 8025156:	429a      	cmp	r2, r3
 8025158:	d207      	bcs.n	802516a <lfs_dir_fetchmatch+0x32>
 802515a:	687b      	ldr	r3, [r7, #4]
 802515c:	3304      	adds	r3, #4
 802515e:	681a      	ldr	r2, [r3, #0]
 8025160:	68fb      	ldr	r3, [r7, #12]
 8025162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025164:	6a1b      	ldr	r3, [r3, #32]
 8025166:	429a      	cmp	r2, r3
 8025168:	d302      	bcc.n	8025170 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 802516a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802516e:	e342      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8025170:	2300      	movs	r3, #0
 8025172:	633b      	str	r3, [r7, #48]	; 0x30
 8025174:	2300      	movs	r3, #0
 8025176:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8025178:	2300      	movs	r3, #0
 802517a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 802517c:	2300      	movs	r3, #0
 802517e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025180:	e052      	b.n	8025228 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8025182:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8025184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025186:	009b      	lsls	r3, r3, #2
 8025188:	687a      	ldr	r2, [r7, #4]
 802518a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 802518c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 802518e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8025192:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025194:	0092      	lsls	r2, r2, #2
 8025196:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8025198:	2104      	movs	r1, #4
 802519a:	9103      	str	r1, [sp, #12]
 802519c:	9202      	str	r2, [sp, #8]
 802519e:	2200      	movs	r2, #0
 80251a0:	9201      	str	r2, [sp, #4]
 80251a2:	9300      	str	r3, [sp, #0]
 80251a4:	2304      	movs	r3, #4
 80251a6:	4602      	mov	r2, r0
 80251a8:	2100      	movs	r1, #0
 80251aa:	68f8      	ldr	r0, [r7, #12]
 80251ac:	f7fe fa6e 	bl	802368c <lfs_bd_read>
 80251b0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 80251b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251b4:	009b      	lsls	r3, r3, #2
 80251b6:	3368      	adds	r3, #104	; 0x68
 80251b8:	443b      	add	r3, r7
 80251ba:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80251be:	4618      	mov	r0, r3
 80251c0:	f7fe f9f8 	bl	80235b4 <lfs_fromle32>
 80251c4:	4602      	mov	r2, r0
 80251c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251c8:	009b      	lsls	r3, r3, #2
 80251ca:	3368      	adds	r3, #104	; 0x68
 80251cc:	443b      	add	r3, r7
 80251ce:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 80251d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251d4:	2b00      	cmp	r3, #0
 80251d6:	d005      	beq.n	80251e4 <lfs_dir_fetchmatch+0xac>
 80251d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80251de:	d001      	beq.n	80251e4 <lfs_dir_fetchmatch+0xac>
            return err;
 80251e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251e2:	e308      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 80251e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80251e6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80251ea:	d01a      	beq.n	8025222 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80251ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251ee:	009b      	lsls	r3, r3, #2
 80251f0:	3368      	adds	r3, #104	; 0x68
 80251f2:	443b      	add	r3, r7
 80251f4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80251f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80251fa:	3301      	adds	r3, #1
 80251fc:	2b00      	cmp	r3, #0
 80251fe:	f003 0301 	and.w	r3, r3, #1
 8025202:	bfb8      	it	lt
 8025204:	425b      	neglt	r3, r3
 8025206:	009b      	lsls	r3, r3, #2
 8025208:	3368      	adds	r3, #104	; 0x68
 802520a:	443b      	add	r3, r7
 802520c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8025210:	4619      	mov	r1, r3
 8025212:	4610      	mov	r0, r2
 8025214:	f7fe f9c0 	bl	8023598 <lfs_scmp>
 8025218:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 802521a:	2b00      	cmp	r3, #0
 802521c:	dd01      	ble.n	8025222 <lfs_dir_fetchmatch+0xea>
            r = i;
 802521e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025220:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8025222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025224:	3301      	adds	r3, #1
 8025226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802522a:	2b01      	cmp	r3, #1
 802522c:	dda9      	ble.n	8025182 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 802522e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025230:	2b00      	cmp	r3, #0
 8025232:	f003 0301 	and.w	r3, r3, #1
 8025236:	bfb8      	it	lt
 8025238:	425b      	neglt	r3, r3
 802523a:	009b      	lsls	r3, r3, #2
 802523c:	687a      	ldr	r2, [r7, #4]
 802523e:	4413      	add	r3, r2
 8025240:	681a      	ldr	r2, [r3, #0]
 8025242:	68bb      	ldr	r3, [r7, #8]
 8025244:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8025246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025248:	3301      	adds	r3, #1
 802524a:	2b00      	cmp	r3, #0
 802524c:	f003 0301 	and.w	r3, r3, #1
 8025250:	bfb8      	it	lt
 8025252:	425b      	neglt	r3, r3
 8025254:	009b      	lsls	r3, r3, #2
 8025256:	687a      	ldr	r2, [r7, #4]
 8025258:	4413      	add	r3, r2
 802525a:	681a      	ldr	r2, [r3, #0]
 802525c:	68bb      	ldr	r3, [r7, #8]
 802525e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8025260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025262:	2b00      	cmp	r3, #0
 8025264:	f003 0301 	and.w	r3, r3, #1
 8025268:	bfb8      	it	lt
 802526a:	425b      	neglt	r3, r3
 802526c:	009b      	lsls	r3, r3, #2
 802526e:	3368      	adds	r3, #104	; 0x68
 8025270:	443b      	add	r3, r7
 8025272:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025276:	68bb      	ldr	r3, [r7, #8]
 8025278:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 802527a:	68bb      	ldr	r3, [r7, #8]
 802527c:	2200      	movs	r2, #0
 802527e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8025280:	2300      	movs	r3, #0
 8025282:	65bb      	str	r3, [r7, #88]	; 0x58
 8025284:	e2a3      	b.n	80257ce <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8025286:	2300      	movs	r3, #0
 8025288:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 802528a:	f04f 33ff 	mov.w	r3, #4294967295
 802528e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8025290:	2300      	movs	r3, #0
 8025292:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8025296:	4a96      	ldr	r2, [pc, #600]	; (80254f0 <lfs_dir_fetchmatch+0x3b8>)
 8025298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802529c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80252a0:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 80252a4:	2300      	movs	r3, #0
 80252a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 80252aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80252ac:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 80252ae:	68bb      	ldr	r3, [r7, #8]
 80252b0:	689b      	ldr	r3, [r3, #8]
 80252b2:	4618      	mov	r0, r3
 80252b4:	f7fe f989 	bl	80235ca <lfs_tole32>
 80252b8:	4602      	mov	r2, r0
 80252ba:	68bb      	ldr	r3, [r7, #8]
 80252bc:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 80252be:	68bb      	ldr	r3, [r7, #8]
 80252c0:	3308      	adds	r3, #8
 80252c2:	2204      	movs	r2, #4
 80252c4:	4619      	mov	r1, r3
 80252c6:	f04f 30ff 	mov.w	r0, #4294967295
 80252ca:	f005 fbc9 	bl	802aa60 <lfs_crc>
 80252ce:	4603      	mov	r3, r0
 80252d0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 80252d2:	68bb      	ldr	r3, [r7, #8]
 80252d4:	689b      	ldr	r3, [r3, #8]
 80252d6:	4618      	mov	r0, r3
 80252d8:	f7fe f96c 	bl	80235b4 <lfs_fromle32>
 80252dc:	4602      	mov	r2, r0
 80252de:	68bb      	ldr	r3, [r7, #8]
 80252e0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80252e2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80252e4:	f7fe fe29 	bl	8023f3a <lfs_tag_dsize>
 80252e8:	4602      	mov	r2, r0
 80252ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80252ec:	4413      	add	r3, r2
 80252ee:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80252f0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80252f2:	68fb      	ldr	r3, [r7, #12]
 80252f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80252f6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80252f8:	68bb      	ldr	r3, [r7, #8]
 80252fa:	681b      	ldr	r3, [r3, #0]
 80252fc:	2204      	movs	r2, #4
 80252fe:	9203      	str	r2, [sp, #12]
 8025300:	f107 0220 	add.w	r2, r7, #32
 8025304:	9202      	str	r2, [sp, #8]
 8025306:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025308:	9201      	str	r2, [sp, #4]
 802530a:	9300      	str	r3, [sp, #0]
 802530c:	4603      	mov	r3, r0
 802530e:	460a      	mov	r2, r1
 8025310:	2100      	movs	r1, #0
 8025312:	68f8      	ldr	r0, [r7, #12]
 8025314:	f7fe f9ba 	bl	802368c <lfs_bd_read>
 8025318:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 802531a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802531c:	2b00      	cmp	r3, #0
 802531e:	d009      	beq.n	8025334 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 8025320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025322:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025326:	d103      	bne.n	8025330 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 8025328:	68bb      	ldr	r3, [r7, #8]
 802532a:	2200      	movs	r2, #0
 802532c:	759a      	strb	r2, [r3, #22]
                    break;
 802532e:	e1d6      	b.n	80256de <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 8025330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025332:	e260      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 8025334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025336:	f107 0120 	add.w	r1, r7, #32
 802533a:	2204      	movs	r2, #4
 802533c:	4618      	mov	r0, r3
 802533e:	f005 fb8f 	bl	802aa60 <lfs_crc>
 8025342:	4603      	mov	r3, r0
 8025344:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 8025346:	6a3b      	ldr	r3, [r7, #32]
 8025348:	4618      	mov	r0, r3
 802534a:	f7fe f94a 	bl	80235e2 <lfs_frombe32>
 802534e:	4602      	mov	r2, r0
 8025350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025352:	4053      	eors	r3, r2
 8025354:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8025356:	6a3b      	ldr	r3, [r7, #32]
 8025358:	4618      	mov	r0, r3
 802535a:	f7fe fd76 	bl	8023e4a <lfs_tag_isvalid>
 802535e:	4603      	mov	r3, r0
 8025360:	f083 0301 	eor.w	r3, r3, #1
 8025364:	b2db      	uxtb	r3, r3
 8025366:	2b00      	cmp	r3, #0
 8025368:	d01b      	beq.n	80253a2 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802536a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802536c:	f7fe fd8e 	bl	8023e8c <lfs_tag_type1>
 8025370:	4603      	mov	r3, r0
 8025372:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025376:	d10d      	bne.n	8025394 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8025378:	68bb      	ldr	r3, [r7, #8]
 802537a:	68db      	ldr	r3, [r3, #12]
 802537c:	68fa      	ldr	r2, [r7, #12]
 802537e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025380:	6992      	ldr	r2, [r2, #24]
 8025382:	fbb3 f1f2 	udiv	r1, r3, r2
 8025386:	fb01 f202 	mul.w	r2, r1, r2
 802538a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802538c:	2b00      	cmp	r3, #0
 802538e:	d101      	bne.n	8025394 <lfs_dir_fetchmatch+0x25c>
 8025390:	2301      	movs	r3, #1
 8025392:	e000      	b.n	8025396 <lfs_dir_fetchmatch+0x25e>
 8025394:	2300      	movs	r3, #0
 8025396:	f003 0301 	and.w	r3, r3, #1
 802539a:	b2da      	uxtb	r2, r3
 802539c:	68bb      	ldr	r3, [r7, #8]
 802539e:	759a      	strb	r2, [r3, #22]
                break;
 80253a0:	e19d      	b.n	80256de <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 80253a2:	6a3b      	ldr	r3, [r7, #32]
 80253a4:	4618      	mov	r0, r3
 80253a6:	f7fe fdc8 	bl	8023f3a <lfs_tag_dsize>
 80253aa:	4602      	mov	r2, r0
 80253ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80253ae:	441a      	add	r2, r3
 80253b0:	68fb      	ldr	r3, [r7, #12]
 80253b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80253b4:	69db      	ldr	r3, [r3, #28]
 80253b6:	429a      	cmp	r2, r3
 80253b8:	d903      	bls.n	80253c2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 80253ba:	68bb      	ldr	r3, [r7, #8]
 80253bc:	2200      	movs	r2, #0
 80253be:	759a      	strb	r2, [r3, #22]
                break;
 80253c0:	e18d      	b.n	80256de <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 80253c2:	6a3b      	ldr	r3, [r7, #32]
 80253c4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 80253c6:	6a3b      	ldr	r3, [r7, #32]
 80253c8:	4618      	mov	r0, r3
 80253ca:	f7fe fd5f 	bl	8023e8c <lfs_tag_type1>
 80253ce:	4603      	mov	r3, r0
 80253d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80253d4:	d164      	bne.n	80254a0 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 80253d6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80253d8:	68fb      	ldr	r3, [r7, #12]
 80253da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80253dc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80253de:	68bb      	ldr	r3, [r7, #8]
 80253e0:	681b      	ldr	r3, [r3, #0]
 80253e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80253e4:	3204      	adds	r2, #4
 80253e6:	2104      	movs	r1, #4
 80253e8:	9103      	str	r1, [sp, #12]
 80253ea:	f107 011c 	add.w	r1, r7, #28
 80253ee:	9102      	str	r1, [sp, #8]
 80253f0:	9201      	str	r2, [sp, #4]
 80253f2:	9300      	str	r3, [sp, #0]
 80253f4:	4623      	mov	r3, r4
 80253f6:	4602      	mov	r2, r0
 80253f8:	2100      	movs	r1, #0
 80253fa:	68f8      	ldr	r0, [r7, #12]
 80253fc:	f7fe f946 	bl	802368c <lfs_bd_read>
 8025400:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 8025402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025404:	2b00      	cmp	r3, #0
 8025406:	d009      	beq.n	802541c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 8025408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802540a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802540e:	d103      	bne.n	8025418 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 8025410:	68bb      	ldr	r3, [r7, #8]
 8025412:	2200      	movs	r2, #0
 8025414:	759a      	strb	r2, [r3, #22]
                        break;
 8025416:	e162      	b.n	80256de <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 802541a:	e1ec      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 802541c:	69fb      	ldr	r3, [r7, #28]
 802541e:	4618      	mov	r0, r3
 8025420:	f7fe f8c8 	bl	80235b4 <lfs_fromle32>
 8025424:	4603      	mov	r3, r0
 8025426:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 8025428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802542a:	69fb      	ldr	r3, [r7, #28]
 802542c:	429a      	cmp	r2, r3
 802542e:	d003      	beq.n	8025438 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 8025430:	68bb      	ldr	r3, [r7, #8]
 8025432:	2200      	movs	r2, #0
 8025434:	759a      	strb	r2, [r3, #22]
                    break;
 8025436:	e152      	b.n	80256de <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 8025438:	6a3b      	ldr	r3, [r7, #32]
 802543a:	4618      	mov	r0, r3
 802543c:	f7fe fd46 	bl	8023ecc <lfs_tag_chunk>
 8025440:	4603      	mov	r3, r0
 8025442:	07db      	lsls	r3, r3, #31
 8025444:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8025446:	4053      	eors	r3, r2
 8025448:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 802544a:	68fb      	ldr	r3, [r7, #12]
 802544c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802544e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8025452:	2204      	movs	r2, #4
 8025454:	4618      	mov	r0, r3
 8025456:	f005 fb03 	bl	802aa60 <lfs_crc>
 802545a:	4602      	mov	r2, r0
 802545c:	68fb      	ldr	r3, [r7, #12]
 802545e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025462:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8025464:	6a3b      	ldr	r3, [r7, #32]
 8025466:	4618      	mov	r0, r3
 8025468:	f7fe fd67 	bl	8023f3a <lfs_tag_dsize>
 802546c:	4602      	mov	r2, r0
 802546e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025470:	441a      	add	r2, r3
 8025472:	68bb      	ldr	r3, [r7, #8]
 8025474:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8025476:	68bb      	ldr	r3, [r7, #8]
 8025478:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802547a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 802547c:	68bb      	ldr	r3, [r7, #8]
 802547e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8025482:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8025484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025486:	68bb      	ldr	r3, [r7, #8]
 8025488:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 802548a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802548c:	68bb      	ldr	r3, [r7, #8]
 802548e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8025490:	68bb      	ldr	r3, [r7, #8]
 8025492:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8025496:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8025498:	f04f 33ff 	mov.w	r3, #4294967295
 802549c:	627b      	str	r3, [r7, #36]	; 0x24
 802549e:	e720      	b.n	80252e2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80254a0:	2304      	movs	r3, #4
 80254a2:	647b      	str	r3, [r7, #68]	; 0x44
 80254a4:	e032      	b.n	802550c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 80254a6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80254a8:	68fb      	ldr	r3, [r7, #12]
 80254aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80254ac:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80254ae:	68bb      	ldr	r3, [r7, #8]
 80254b0:	681b      	ldr	r3, [r3, #0]
 80254b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80254b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80254b6:	440a      	add	r2, r1
 80254b8:	2101      	movs	r1, #1
 80254ba:	9103      	str	r1, [sp, #12]
 80254bc:	f107 011b 	add.w	r1, r7, #27
 80254c0:	9102      	str	r1, [sp, #8]
 80254c2:	9201      	str	r2, [sp, #4]
 80254c4:	9300      	str	r3, [sp, #0]
 80254c6:	4623      	mov	r3, r4
 80254c8:	4602      	mov	r2, r0
 80254ca:	2100      	movs	r1, #0
 80254cc:	68f8      	ldr	r0, [r7, #12]
 80254ce:	f7fe f8dd 	bl	802368c <lfs_bd_read>
 80254d2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 80254d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254d6:	2b00      	cmp	r3, #0
 80254d8:	d00c      	beq.n	80254f4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 80254da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80254dc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80254e0:	d103      	bne.n	80254ea <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 80254e2:	68bb      	ldr	r3, [r7, #8]
 80254e4:	2200      	movs	r2, #0
 80254e6:	759a      	strb	r2, [r3, #22]
 80254e8:	e018      	b.n	802551c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 80254ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80254ec:	e183      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
 80254ee:	bf00      	nop
 80254f0:	080334b0 	.word	0x080334b0
                }

                crc = lfs_crc(crc, &dat, 1);
 80254f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80254f6:	f107 011b 	add.w	r1, r7, #27
 80254fa:	2201      	movs	r2, #1
 80254fc:	4618      	mov	r0, r3
 80254fe:	f005 faaf 	bl	802aa60 <lfs_crc>
 8025502:	4603      	mov	r3, r0
 8025504:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025508:	3301      	adds	r3, #1
 802550a:	647b      	str	r3, [r7, #68]	; 0x44
 802550c:	6a3b      	ldr	r3, [r7, #32]
 802550e:	4618      	mov	r0, r3
 8025510:	f7fe fd13 	bl	8023f3a <lfs_tag_dsize>
 8025514:	4602      	mov	r2, r0
 8025516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025518:	4293      	cmp	r3, r2
 802551a:	d3c4      	bcc.n	80254a6 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 802551c:	6a3b      	ldr	r3, [r7, #32]
 802551e:	4618      	mov	r0, r3
 8025520:	f7fe fcb4 	bl	8023e8c <lfs_tag_type1>
 8025524:	4603      	mov	r3, r0
 8025526:	2b00      	cmp	r3, #0
 8025528:	d113      	bne.n	8025552 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 802552a:	6a3b      	ldr	r3, [r7, #32]
 802552c:	4618      	mov	r0, r3
 802552e:	f7fe fce7 	bl	8023f00 <lfs_tag_id>
 8025532:	4603      	mov	r3, r0
 8025534:	461a      	mov	r2, r3
 8025536:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 802553a:	4293      	cmp	r3, r2
 802553c:	f200 8083 	bhi.w	8025646 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 8025540:	6a3b      	ldr	r3, [r7, #32]
 8025542:	4618      	mov	r0, r3
 8025544:	f7fe fcdc 	bl	8023f00 <lfs_tag_id>
 8025548:	4603      	mov	r3, r0
 802554a:	3301      	adds	r3, #1
 802554c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8025550:	e079      	b.n	8025646 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8025552:	6a3b      	ldr	r3, [r7, #32]
 8025554:	4618      	mov	r0, r3
 8025556:	f7fe fc99 	bl	8023e8c <lfs_tag_type1>
 802555a:	4603      	mov	r3, r0
 802555c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025560:	d134      	bne.n	80255cc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025562:	6a3b      	ldr	r3, [r7, #32]
 8025564:	4618      	mov	r0, r3
 8025566:	f7fe fcbe 	bl	8023ee6 <lfs_tag_splice>
 802556a:	4603      	mov	r3, r0
 802556c:	b29a      	uxth	r2, r3
 802556e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8025572:	4413      	add	r3, r2
 8025574:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8025578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802557a:	4ba1      	ldr	r3, [pc, #644]	; (8025800 <lfs_dir_fetchmatch+0x6c8>)
 802557c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 802557e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8025582:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8025586:	6a3a      	ldr	r2, [r7, #32]
 8025588:	4293      	cmp	r3, r2
 802558a:	d104      	bne.n	8025596 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 802558c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802558e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025592:	64bb      	str	r3, [r7, #72]	; 0x48
 8025594:	e057      	b.n	8025646 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8025596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025598:	f1b3 3fff 	cmp.w	r3, #4294967295
 802559c:	d053      	beq.n	8025646 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 802559e:	6a3b      	ldr	r3, [r7, #32]
 80255a0:	4618      	mov	r0, r3
 80255a2:	f7fe fcad 	bl	8023f00 <lfs_tag_id>
 80255a6:	4603      	mov	r3, r0
 80255a8:	461c      	mov	r4, r3
 80255aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255ac:	4618      	mov	r0, r3
 80255ae:	f7fe fca7 	bl	8023f00 <lfs_tag_id>
 80255b2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 80255b4:	429c      	cmp	r4, r3
 80255b6:	d846      	bhi.n	8025646 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80255b8:	6a3b      	ldr	r3, [r7, #32]
 80255ba:	4618      	mov	r0, r3
 80255bc:	f7fe fc93 	bl	8023ee6 <lfs_tag_splice>
 80255c0:	4603      	mov	r3, r0
 80255c2:	029a      	lsls	r2, r3, #10
 80255c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80255c6:	4413      	add	r3, r2
 80255c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80255ca:	e03c      	b.n	8025646 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 80255cc:	6a3b      	ldr	r3, [r7, #32]
 80255ce:	4618      	mov	r0, r3
 80255d0:	f7fe fc5c 	bl	8023e8c <lfs_tag_type1>
 80255d4:	4603      	mov	r3, r0
 80255d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80255da:	d134      	bne.n	8025646 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 80255dc:	6a3b      	ldr	r3, [r7, #32]
 80255de:	4618      	mov	r0, r3
 80255e0:	f7fe fc74 	bl	8023ecc <lfs_tag_chunk>
 80255e4:	4603      	mov	r3, r0
 80255e6:	f003 0301 	and.w	r3, r3, #1
 80255ea:	2b00      	cmp	r3, #0
 80255ec:	bf14      	ite	ne
 80255ee:	2301      	movne	r3, #1
 80255f0:	2300      	moveq	r3, #0
 80255f2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80255f6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80255f8:	68fb      	ldr	r3, [r7, #12]
 80255fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80255fc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80255fe:	68bb      	ldr	r3, [r7, #8]
 8025600:	681b      	ldr	r3, [r3, #0]
 8025602:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025604:	3204      	adds	r2, #4
 8025606:	2108      	movs	r1, #8
 8025608:	9103      	str	r1, [sp, #12]
 802560a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 802560e:	9102      	str	r1, [sp, #8]
 8025610:	9201      	str	r2, [sp, #4]
 8025612:	9300      	str	r3, [sp, #0]
 8025614:	4623      	mov	r3, r4
 8025616:	4602      	mov	r2, r0
 8025618:	2100      	movs	r1, #0
 802561a:	68f8      	ldr	r0, [r7, #12]
 802561c:	f7fe f836 	bl	802368c <lfs_bd_read>
 8025620:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8025622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025624:	2b00      	cmp	r3, #0
 8025626:	d009      	beq.n	802563c <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 8025628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802562a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802562e:	d103      	bne.n	8025638 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 8025630:	68bb      	ldr	r3, [r7, #8]
 8025632:	2200      	movs	r2, #0
 8025634:	759a      	strb	r2, [r3, #22]
                        break;
 8025636:	e052      	b.n	80256de <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 8025638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802563a:	e0dc      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 802563c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8025640:	4618      	mov	r0, r3
 8025642:	f7fe fbce 	bl	8023de2 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8025646:	6a3a      	ldr	r2, [r7, #32]
 8025648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802564a:	405a      	eors	r2, r3
 802564c:	683b      	ldr	r3, [r7, #0]
 802564e:	4013      	ands	r3, r2
 8025650:	2b00      	cmp	r3, #0
 8025652:	f47f ae46 	bne.w	80252e2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025656:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8025658:	68bb      	ldr	r3, [r7, #8]
 802565a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 802565c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 802565e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025660:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025662:	617b      	str	r3, [r7, #20]
 8025664:	f107 0210 	add.w	r2, r7, #16
 8025668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 802566c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8025670:	4798      	blx	r3
 8025672:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8025674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025676:	2b00      	cmp	r3, #0
 8025678:	da09      	bge.n	802568e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 802567a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802567c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025680:	d103      	bne.n	802568a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8025682:	68bb      	ldr	r3, [r7, #8]
 8025684:	2200      	movs	r2, #0
 8025686:	759a      	strb	r2, [r3, #22]
 8025688:	e029      	b.n	80256de <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 802568a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 802568c:	e0b3      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 802568e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025690:	2b00      	cmp	r3, #0
 8025692:	d102      	bne.n	802569a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8025694:	6a3b      	ldr	r3, [r7, #32]
 8025696:	64bb      	str	r3, [r7, #72]	; 0x48
 8025698:	e623      	b.n	80252e2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 802569a:	6a3a      	ldr	r2, [r7, #32]
 802569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802569e:	405a      	eors	r2, r3
 80256a0:	4b58      	ldr	r3, [pc, #352]	; (8025804 <lfs_dir_fetchmatch+0x6cc>)
 80256a2:	4013      	ands	r3, r2
 80256a4:	2b00      	cmp	r3, #0
 80256a6:	d103      	bne.n	80256b0 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 80256a8:	f04f 33ff 	mov.w	r3, #4294967295
 80256ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80256ae:	e618      	b.n	80252e2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 80256b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80256b2:	2b02      	cmp	r3, #2
 80256b4:	f47f ae15 	bne.w	80252e2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 80256b8:	6a3b      	ldr	r3, [r7, #32]
 80256ba:	4618      	mov	r0, r3
 80256bc:	f7fe fc20 	bl	8023f00 <lfs_tag_id>
 80256c0:	4603      	mov	r3, r0
 80256c2:	461c      	mov	r4, r3
 80256c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80256c6:	4618      	mov	r0, r3
 80256c8:	f7fe fc1a 	bl	8023f00 <lfs_tag_id>
 80256cc:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 80256ce:	429c      	cmp	r4, r3
 80256d0:	f63f ae07 	bhi.w	80252e2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 80256d4:	6a3b      	ldr	r3, [r7, #32]
 80256d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80256da:	64bb      	str	r3, [r7, #72]	; 0x48
 80256dc:	e601      	b.n	80252e2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 80256de:	68bb      	ldr	r3, [r7, #8]
 80256e0:	68db      	ldr	r3, [r3, #12]
 80256e2:	2b00      	cmp	r3, #0
 80256e4:	d100      	bne.n	80256e8 <lfs_dir_fetchmatch+0x5b0>
 80256e6:	e05d      	b.n	80257a4 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 80256e8:	68fb      	ldr	r3, [r7, #12]
 80256ea:	333c      	adds	r3, #60	; 0x3c
 80256ec:	68ba      	ldr	r2, [r7, #8]
 80256ee:	4611      	mov	r1, r2
 80256f0:	4618      	mov	r0, r3
 80256f2:	f7fe fcad 	bl	8024050 <lfs_gstate_hasmovehere>
 80256f6:	4603      	mov	r3, r0
 80256f8:	2b00      	cmp	r3, #0
 80256fa:	d028      	beq.n	802574e <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 80256fc:	68fb      	ldr	r3, [r7, #12]
 80256fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025700:	4618      	mov	r0, r3
 8025702:	f7fe fbfd 	bl	8023f00 <lfs_tag_id>
 8025706:	4603      	mov	r3, r0
 8025708:	461c      	mov	r4, r3
 802570a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802570c:	4618      	mov	r0, r3
 802570e:	f7fe fbf7 	bl	8023f00 <lfs_tag_id>
 8025712:	4603      	mov	r3, r0
 8025714:	429c      	cmp	r4, r3
 8025716:	d104      	bne.n	8025722 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8025718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802571a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 802571e:	667b      	str	r3, [r7, #100]	; 0x64
 8025720:	e015      	b.n	802574e <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8025722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025728:	d011      	beq.n	802574e <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 802572a:	68fb      	ldr	r3, [r7, #12]
 802572c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802572e:	4618      	mov	r0, r3
 8025730:	f7fe fbe6 	bl	8023f00 <lfs_tag_id>
 8025734:	4603      	mov	r3, r0
 8025736:	461c      	mov	r4, r3
 8025738:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802573a:	4618      	mov	r0, r3
 802573c:	f7fe fbe0 	bl	8023f00 <lfs_tag_id>
 8025740:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8025742:	429c      	cmp	r4, r3
 8025744:	d203      	bcs.n	802574e <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8025746:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025748:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802574c:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 802574e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025750:	2b00      	cmp	r3, #0
 8025752:	d00f      	beq.n	8025774 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8025754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025756:	4618      	mov	r0, r3
 8025758:	f7fe fbd2 	bl	8023f00 <lfs_tag_id>
 802575c:	4603      	mov	r3, r0
 802575e:	461a      	mov	r2, r3
 8025760:	68bb      	ldr	r3, [r7, #8]
 8025762:	8a9b      	ldrh	r3, [r3, #20]
 8025764:	4619      	mov	r1, r3
 8025766:	4610      	mov	r0, r2
 8025768:	f7fd feb4 	bl	80234d4 <lfs_min>
 802576c:	4603      	mov	r3, r0
 802576e:	b29a      	uxth	r2, r3
 8025770:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025772:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8025774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025776:	4618      	mov	r0, r3
 8025778:	f7fe fb67 	bl	8023e4a <lfs_tag_isvalid>
 802577c:	4603      	mov	r3, r0
 802577e:	2b00      	cmp	r3, #0
 8025780:	d001      	beq.n	8025786 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8025782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025784:	e037      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8025786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025788:	4618      	mov	r0, r3
 802578a:	f7fe fbb9 	bl	8023f00 <lfs_tag_id>
 802578e:	4603      	mov	r3, r0
 8025790:	461a      	mov	r2, r3
 8025792:	68bb      	ldr	r3, [r7, #8]
 8025794:	8a9b      	ldrh	r3, [r3, #20]
 8025796:	429a      	cmp	r2, r3
 8025798:	d202      	bcs.n	80257a0 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 802579a:	f06f 0301 	mvn.w	r3, #1
 802579e:	e02a      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 80257a0:	2300      	movs	r3, #0
 80257a2:	e028      	b.n	80257f6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 80257a4:	68bb      	ldr	r3, [r7, #8]
 80257a6:	4618      	mov	r0, r3
 80257a8:	f7fe fa94 	bl	8023cd4 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 80257ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80257ae:	3301      	adds	r3, #1
 80257b0:	2b00      	cmp	r3, #0
 80257b2:	f003 0301 	and.w	r3, r3, #1
 80257b6:	bfb8      	it	lt
 80257b8:	425b      	neglt	r3, r3
 80257ba:	009b      	lsls	r3, r3, #2
 80257bc:	3368      	adds	r3, #104	; 0x68
 80257be:	443b      	add	r3, r7
 80257c0:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80257c4:	68bb      	ldr	r3, [r7, #8]
 80257c6:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 80257c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80257ca:	3301      	adds	r3, #1
 80257cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80257ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80257d0:	2b01      	cmp	r3, #1
 80257d2:	f77f ad58 	ble.w	8025286 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 80257d6:	68bb      	ldr	r3, [r7, #8]
 80257d8:	681a      	ldr	r2, [r3, #0]
 80257da:	68bb      	ldr	r3, [r7, #8]
 80257dc:	685b      	ldr	r3, [r3, #4]
 80257de:	490a      	ldr	r1, [pc, #40]	; (8025808 <lfs_dir_fetchmatch+0x6d0>)
 80257e0:	9101      	str	r1, [sp, #4]
 80257e2:	9300      	str	r3, [sp, #0]
 80257e4:	4613      	mov	r3, r2
 80257e6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80257ea:	4908      	ldr	r1, [pc, #32]	; (802580c <lfs_dir_fetchmatch+0x6d4>)
 80257ec:	4808      	ldr	r0, [pc, #32]	; (8025810 <lfs_dir_fetchmatch+0x6d8>)
 80257ee:	f007 fdef 	bl	802d3d0 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 80257f2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 80257f6:	4618      	mov	r0, r3
 80257f8:	376c      	adds	r7, #108	; 0x6c
 80257fa:	46bd      	mov	sp, r7
 80257fc:	bd90      	pop	{r4, r7, pc}
 80257fe:	bf00      	nop
 8025800:	000ffc00 	.word	0x000ffc00
 8025804:	7ffffc00 	.word	0x7ffffc00
 8025808:	0803346c 	.word	0x0803346c
 802580c:	08033358 	.word	0x08033358
 8025810:	08033478 	.word	0x08033478

08025814 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8025814:	b580      	push	{r7, lr}
 8025816:	b088      	sub	sp, #32
 8025818:	af04      	add	r7, sp, #16
 802581a:	60f8      	str	r0, [r7, #12]
 802581c:	60b9      	str	r1, [r7, #8]
 802581e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8025820:	2300      	movs	r3, #0
 8025822:	9303      	str	r3, [sp, #12]
 8025824:	2300      	movs	r3, #0
 8025826:	9302      	str	r3, [sp, #8]
 8025828:	2300      	movs	r3, #0
 802582a:	9301      	str	r3, [sp, #4]
 802582c:	f04f 33ff 	mov.w	r3, #4294967295
 8025830:	9300      	str	r3, [sp, #0]
 8025832:	f04f 33ff 	mov.w	r3, #4294967295
 8025836:	687a      	ldr	r2, [r7, #4]
 8025838:	68b9      	ldr	r1, [r7, #8]
 802583a:	68f8      	ldr	r0, [r7, #12]
 802583c:	f7ff fc7c 	bl	8025138 <lfs_dir_fetchmatch>
 8025840:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8025842:	4618      	mov	r0, r3
 8025844:	3710      	adds	r7, #16
 8025846:	46bd      	mov	sp, r7
 8025848:	bd80      	pop	{r7, pc}
	...

0802584c <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 802584c:	b580      	push	{r7, lr}
 802584e:	b08a      	sub	sp, #40	; 0x28
 8025850:	af02      	add	r7, sp, #8
 8025852:	60f8      	str	r0, [r7, #12]
 8025854:	60b9      	str	r1, [r7, #8]
 8025856:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8025858:	f107 0310 	add.w	r3, r7, #16
 802585c:	9300      	str	r3, [sp, #0]
 802585e:	4b12      	ldr	r3, [pc, #72]	; (80258a8 <lfs_dir_getgstate+0x5c>)
 8025860:	4a12      	ldr	r2, [pc, #72]	; (80258ac <lfs_dir_getgstate+0x60>)
 8025862:	68b9      	ldr	r1, [r7, #8]
 8025864:	68f8      	ldr	r0, [r7, #12]
 8025866:	f7fe ff35 	bl	80246d4 <lfs_dir_get>
 802586a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 802586c:	69fb      	ldr	r3, [r7, #28]
 802586e:	2b00      	cmp	r3, #0
 8025870:	da05      	bge.n	802587e <lfs_dir_getgstate+0x32>
 8025872:	69fb      	ldr	r3, [r7, #28]
 8025874:	f113 0f02 	cmn.w	r3, #2
 8025878:	d001      	beq.n	802587e <lfs_dir_getgstate+0x32>
        return res;
 802587a:	69fb      	ldr	r3, [r7, #28]
 802587c:	e00f      	b.n	802589e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 802587e:	69fb      	ldr	r3, [r7, #28]
 8025880:	f113 0f02 	cmn.w	r3, #2
 8025884:	d00a      	beq.n	802589c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025886:	f107 0310 	add.w	r3, r7, #16
 802588a:	4618      	mov	r0, r3
 802588c:	f7fe fc00 	bl	8024090 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025890:	f107 0310 	add.w	r3, r7, #16
 8025894:	4619      	mov	r1, r3
 8025896:	6878      	ldr	r0, [r7, #4]
 8025898:	f7fe fb63 	bl	8023f62 <lfs_gstate_xor>
    }

    return 0;
 802589c:	2300      	movs	r3, #0
}
 802589e:	4618      	mov	r0, r3
 80258a0:	3720      	adds	r7, #32
 80258a2:	46bd      	mov	sp, r7
 80258a4:	bd80      	pop	{r7, pc}
 80258a6:	bf00      	nop
 80258a8:	7ff0000c 	.word	0x7ff0000c
 80258ac:	7ff00000 	.word	0x7ff00000

080258b0 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 80258b0:	b580      	push	{r7, lr}
 80258b2:	b08a      	sub	sp, #40	; 0x28
 80258b4:	af02      	add	r7, sp, #8
 80258b6:	60f8      	str	r0, [r7, #12]
 80258b8:	60b9      	str	r1, [r7, #8]
 80258ba:	603b      	str	r3, [r7, #0]
 80258bc:	4613      	mov	r3, r2
 80258be:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 80258c0:	88fb      	ldrh	r3, [r7, #6]
 80258c2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80258c6:	4293      	cmp	r3, r2
 80258c8:	d10b      	bne.n	80258e2 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 80258ca:	683b      	ldr	r3, [r7, #0]
 80258cc:	3308      	adds	r3, #8
 80258ce:	4932      	ldr	r1, [pc, #200]	; (8025998 <lfs_dir_getinfo+0xe8>)
 80258d0:	461a      	mov	r2, r3
 80258d2:	460b      	mov	r3, r1
 80258d4:	881b      	ldrh	r3, [r3, #0]
 80258d6:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 80258d8:	683b      	ldr	r3, [r7, #0]
 80258da:	2202      	movs	r2, #2
 80258dc:	701a      	strb	r2, [r3, #0]
        return 0;
 80258de:	2300      	movs	r3, #0
 80258e0:	e055      	b.n	802598e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 80258e2:	88fb      	ldrh	r3, [r7, #6]
 80258e4:	029a      	lsls	r2, r3, #10
 80258e6:	68fb      	ldr	r3, [r7, #12]
 80258e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80258ea:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 80258ec:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 80258ee:	683b      	ldr	r3, [r7, #0]
 80258f0:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 80258f2:	9300      	str	r3, [sp, #0]
 80258f4:	4613      	mov	r3, r2
 80258f6:	4a29      	ldr	r2, [pc, #164]	; (802599c <lfs_dir_getinfo+0xec>)
 80258f8:	68b9      	ldr	r1, [r7, #8]
 80258fa:	68f8      	ldr	r0, [r7, #12]
 80258fc:	f7fe feea 	bl	80246d4 <lfs_dir_get>
 8025900:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025902:	69fb      	ldr	r3, [r7, #28]
 8025904:	2b00      	cmp	r3, #0
 8025906:	da01      	bge.n	802590c <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8025908:	69fb      	ldr	r3, [r7, #28]
 802590a:	e040      	b.n	802598e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 802590c:	69fb      	ldr	r3, [r7, #28]
 802590e:	4618      	mov	r0, r3
 8025910:	f7fe facc 	bl	8023eac <lfs_tag_type3>
 8025914:	4603      	mov	r3, r0
 8025916:	b2da      	uxtb	r2, r3
 8025918:	683b      	ldr	r3, [r7, #0]
 802591a:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 802591c:	88fb      	ldrh	r3, [r7, #6]
 802591e:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025924:	f043 0308 	orr.w	r3, r3, #8
 8025928:	f107 0214 	add.w	r2, r7, #20
 802592c:	9200      	str	r2, [sp, #0]
 802592e:	4a1c      	ldr	r2, [pc, #112]	; (80259a0 <lfs_dir_getinfo+0xf0>)
 8025930:	68b9      	ldr	r1, [r7, #8]
 8025932:	68f8      	ldr	r0, [r7, #12]
 8025934:	f7fe fece 	bl	80246d4 <lfs_dir_get>
 8025938:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 802593a:	69fb      	ldr	r3, [r7, #28]
 802593c:	2b00      	cmp	r3, #0
 802593e:	da01      	bge.n	8025944 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8025940:	69fb      	ldr	r3, [r7, #28]
 8025942:	e024      	b.n	802598e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8025944:	f107 0314 	add.w	r3, r7, #20
 8025948:	4618      	mov	r0, r3
 802594a:	f7fe fbe1 	bl	8024110 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 802594e:	69fb      	ldr	r3, [r7, #28]
 8025950:	4618      	mov	r0, r3
 8025952:	f7fe faab 	bl	8023eac <lfs_tag_type3>
 8025956:	4603      	mov	r3, r0
 8025958:	461a      	mov	r2, r3
 802595a:	f240 2302 	movw	r3, #514	; 0x202
 802595e:	429a      	cmp	r2, r3
 8025960:	d103      	bne.n	802596a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025962:	69ba      	ldr	r2, [r7, #24]
 8025964:	683b      	ldr	r3, [r7, #0]
 8025966:	605a      	str	r2, [r3, #4]
 8025968:	e010      	b.n	802598c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 802596a:	69fb      	ldr	r3, [r7, #28]
 802596c:	4618      	mov	r0, r3
 802596e:	f7fe fa9d 	bl	8023eac <lfs_tag_type3>
 8025972:	4603      	mov	r3, r0
 8025974:	461a      	mov	r2, r3
 8025976:	f240 2301 	movw	r3, #513	; 0x201
 802597a:	429a      	cmp	r2, r3
 802597c:	d106      	bne.n	802598c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 802597e:	69fb      	ldr	r3, [r7, #28]
 8025980:	4618      	mov	r0, r3
 8025982:	f7fe facd 	bl	8023f20 <lfs_tag_size>
 8025986:	4602      	mov	r2, r0
 8025988:	683b      	ldr	r3, [r7, #0]
 802598a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 802598c:	2300      	movs	r3, #0
}
 802598e:	4618      	mov	r0, r3
 8025990:	3720      	adds	r7, #32
 8025992:	46bd      	mov	sp, r7
 8025994:	bd80      	pop	{r7, pc}
 8025996:	bf00      	nop
 8025998:	080334b8 	.word	0x080334b8
 802599c:	780ffc00 	.word	0x780ffc00
 80259a0:	700ffc00 	.word	0x700ffc00

080259a4 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 80259a4:	b590      	push	{r4, r7, lr}
 80259a6:	b08f      	sub	sp, #60	; 0x3c
 80259a8:	af04      	add	r7, sp, #16
 80259aa:	60f8      	str	r0, [r7, #12]
 80259ac:	60b9      	str	r1, [r7, #8]
 80259ae:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 80259b0:	68fb      	ldr	r3, [r7, #12]
 80259b2:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 80259b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259b6:	681b      	ldr	r3, [r3, #0]
 80259b8:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80259ba:	687b      	ldr	r3, [r7, #4]
 80259bc:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 80259be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259c0:	689c      	ldr	r4, [r3, #8]
 80259c2:	68b8      	ldr	r0, [r7, #8]
 80259c4:	f7fe faac 	bl	8023f20 <lfs_tag_size>
 80259c8:	4603      	mov	r3, r0
 80259ca:	4619      	mov	r1, r3
 80259cc:	4620      	mov	r0, r4
 80259ce:	f7fd fd81 	bl	80234d4 <lfs_min>
 80259d2:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 80259d4:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 80259d6:	69fb      	ldr	r3, [r7, #28]
 80259d8:	681b      	ldr	r3, [r3, #0]
 80259da:	69fa      	ldr	r2, [r7, #28]
 80259dc:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 80259de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80259e0:	6849      	ldr	r1, [r1, #4]
 80259e2:	69b8      	ldr	r0, [r7, #24]
 80259e4:	9003      	str	r0, [sp, #12]
 80259e6:	9102      	str	r1, [sp, #8]
 80259e8:	9201      	str	r2, [sp, #4]
 80259ea:	9300      	str	r3, [sp, #0]
 80259ec:	69bb      	ldr	r3, [r7, #24]
 80259ee:	4622      	mov	r2, r4
 80259f0:	2100      	movs	r1, #0
 80259f2:	6a38      	ldr	r0, [r7, #32]
 80259f4:	f7fd ff8e 	bl	8023914 <lfs_bd_cmp>
 80259f8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 80259fa:	697b      	ldr	r3, [r7, #20]
 80259fc:	2b00      	cmp	r3, #0
 80259fe:	d001      	beq.n	8025a04 <lfs_dir_find_match+0x60>
        return res;
 8025a00:	697b      	ldr	r3, [r7, #20]
 8025a02:	e014      	b.n	8025a2e <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8025a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a06:	689c      	ldr	r4, [r3, #8]
 8025a08:	68b8      	ldr	r0, [r7, #8]
 8025a0a:	f7fe fa89 	bl	8023f20 <lfs_tag_size>
 8025a0e:	4603      	mov	r3, r0
 8025a10:	429c      	cmp	r4, r3
 8025a12:	d00b      	beq.n	8025a2c <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8025a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a16:	689c      	ldr	r4, [r3, #8]
 8025a18:	68b8      	ldr	r0, [r7, #8]
 8025a1a:	f7fe fa81 	bl	8023f20 <lfs_tag_size>
 8025a1e:	4603      	mov	r3, r0
 8025a20:	429c      	cmp	r4, r3
 8025a22:	d201      	bcs.n	8025a28 <lfs_dir_find_match+0x84>
 8025a24:	2301      	movs	r3, #1
 8025a26:	e002      	b.n	8025a2e <lfs_dir_find_match+0x8a>
 8025a28:	2302      	movs	r3, #2
 8025a2a:	e000      	b.n	8025a2e <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8025a2c:	2300      	movs	r3, #0
}
 8025a2e:	4618      	mov	r0, r3
 8025a30:	372c      	adds	r7, #44	; 0x2c
 8025a32:	46bd      	mov	sp, r7
 8025a34:	bd90      	pop	{r4, r7, pc}
	...

08025a38 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8025a38:	b590      	push	{r4, r7, lr}
 8025a3a:	b093      	sub	sp, #76	; 0x4c
 8025a3c:	af04      	add	r7, sp, #16
 8025a3e:	60f8      	str	r0, [r7, #12]
 8025a40:	60b9      	str	r1, [r7, #8]
 8025a42:	607a      	str	r2, [r7, #4]
 8025a44:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8025a46:	687b      	ldr	r3, [r7, #4]
 8025a48:	681b      	ldr	r3, [r3, #0]
 8025a4a:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8025a4c:	683b      	ldr	r3, [r7, #0]
 8025a4e:	2b00      	cmp	r3, #0
 8025a50:	d003      	beq.n	8025a5a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025a52:	683b      	ldr	r3, [r7, #0]
 8025a54:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025a58:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8025a5a:	4b6e      	ldr	r3, [pc, #440]	; (8025c14 <lfs_dir_find+0x1dc>)
 8025a5c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8025a5e:	68fb      	ldr	r3, [r7, #12]
 8025a60:	6a1a      	ldr	r2, [r3, #32]
 8025a62:	68bb      	ldr	r3, [r7, #8]
 8025a64:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025a66:	68fb      	ldr	r3, [r7, #12]
 8025a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025a6a:	68bb      	ldr	r3, [r7, #8]
 8025a6c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8025a6e:	496a      	ldr	r1, [pc, #424]	; (8025c18 <lfs_dir_find+0x1e0>)
 8025a70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025a72:	f007 feb0 	bl	802d7d6 <strspn>
 8025a76:	4602      	mov	r2, r0
 8025a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025a7a:	4413      	add	r3, r2
 8025a7c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8025a7e:	4966      	ldr	r1, [pc, #408]	; (8025c18 <lfs_dir_find+0x1e0>)
 8025a80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025a82:	f007 fe5f 	bl	802d744 <strcspn>
 8025a86:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a8a:	2b01      	cmp	r3, #1
 8025a8c:	d105      	bne.n	8025a9a <lfs_dir_find+0x62>
 8025a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025a90:	781a      	ldrb	r2, [r3, #0]
 8025a92:	4b62      	ldr	r3, [pc, #392]	; (8025c1c <lfs_dir_find+0x1e4>)
 8025a94:	781b      	ldrb	r3, [r3, #0]
 8025a96:	429a      	cmp	r2, r3
 8025a98:	d00a      	beq.n	8025ab0 <lfs_dir_find+0x78>
 8025a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025a9c:	2b02      	cmp	r3, #2
 8025a9e:	d10c      	bne.n	8025aba <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025aa0:	2202      	movs	r2, #2
 8025aa2:	495f      	ldr	r1, [pc, #380]	; (8025c20 <lfs_dir_find+0x1e8>)
 8025aa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025aa6:	f007 fdff 	bl	802d6a8 <memcmp>
 8025aaa:	4603      	mov	r3, r0
 8025aac:	2b00      	cmp	r3, #0
 8025aae:	d104      	bne.n	8025aba <lfs_dir_find+0x82>
            name += namelen;
 8025ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025ab4:	4413      	add	r3, r2
 8025ab6:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8025ab8:	e7d9      	b.n	8025a6e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8025aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025abe:	4413      	add	r3, r2
 8025ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025ac2:	2301      	movs	r3, #1
 8025ac4:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025ac6:	4954      	ldr	r1, [pc, #336]	; (8025c18 <lfs_dir_find+0x1e0>)
 8025ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025aca:	f007 fe84 	bl	802d7d6 <strspn>
 8025ace:	4602      	mov	r2, r0
 8025ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ad2:	4413      	add	r3, r2
 8025ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8025ad6:	4950      	ldr	r1, [pc, #320]	; (8025c18 <lfs_dir_find+0x1e0>)
 8025ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025ada:	f007 fe33 	bl	802d744 <strcspn>
 8025ade:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025ae0:	6a3b      	ldr	r3, [r7, #32]
 8025ae2:	2b00      	cmp	r3, #0
 8025ae4:	d01d      	beq.n	8025b22 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025ae6:	6a3b      	ldr	r3, [r7, #32]
 8025ae8:	2b02      	cmp	r3, #2
 8025aea:	d112      	bne.n	8025b12 <lfs_dir_find+0xda>
 8025aec:	2202      	movs	r2, #2
 8025aee:	494c      	ldr	r1, [pc, #304]	; (8025c20 <lfs_dir_find+0x1e8>)
 8025af0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025af2:	f007 fdd9 	bl	802d6a8 <memcmp>
 8025af6:	4603      	mov	r3, r0
 8025af8:	2b00      	cmp	r3, #0
 8025afa:	d10a      	bne.n	8025b12 <lfs_dir_find+0xda>
                depth -= 1;
 8025afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025afe:	3b01      	subs	r3, #1
 8025b00:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8025b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b04:	2b00      	cmp	r3, #0
 8025b06:	d107      	bne.n	8025b18 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8025b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025b0a:	6a3b      	ldr	r3, [r7, #32]
 8025b0c:	4413      	add	r3, r2
 8025b0e:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8025b10:	e7ad      	b.n	8025a6e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8025b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025b14:	3301      	adds	r3, #1
 8025b16:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8025b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025b1a:	6a3b      	ldr	r3, [r7, #32]
 8025b1c:	4413      	add	r3, r2
 8025b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8025b20:	e7d1      	b.n	8025ac6 <lfs_dir_find+0x8e>
                break;
 8025b22:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8025b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025b26:	781b      	ldrb	r3, [r3, #0]
 8025b28:	2b00      	cmp	r3, #0
 8025b2a:	d101      	bne.n	8025b30 <lfs_dir_find+0xf8>
            return tag;
 8025b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b2e:	e06c      	b.n	8025c0a <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8025b30:	687b      	ldr	r3, [r7, #4]
 8025b32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025b34:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8025b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b38:	4618      	mov	r0, r3
 8025b3a:	f7fe f9b7 	bl	8023eac <lfs_tag_type3>
 8025b3e:	4603      	mov	r3, r0
 8025b40:	2b02      	cmp	r3, #2
 8025b42:	d002      	beq.n	8025b4a <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8025b44:	f06f 0313 	mvn.w	r3, #19
 8025b48:	e05f      	b.n	8025c0a <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8025b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b4c:	4618      	mov	r0, r3
 8025b4e:	f7fe f9d7 	bl	8023f00 <lfs_tag_id>
 8025b52:	4603      	mov	r3, r0
 8025b54:	461a      	mov	r2, r3
 8025b56:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8025b5a:	429a      	cmp	r2, r3
 8025b5c:	d01c      	beq.n	8025b98 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b60:	4618      	mov	r0, r3
 8025b62:	f7fe f9cd 	bl	8023f00 <lfs_tag_id>
 8025b66:	4603      	mov	r3, r0
 8025b68:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025b6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025b6e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025b72:	68ba      	ldr	r2, [r7, #8]
 8025b74:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025b76:	9200      	str	r2, [sp, #0]
 8025b78:	4a2a      	ldr	r2, [pc, #168]	; (8025c24 <lfs_dir_find+0x1ec>)
 8025b7a:	68b9      	ldr	r1, [r7, #8]
 8025b7c:	68f8      	ldr	r0, [r7, #12]
 8025b7e:	f7fe fda9 	bl	80246d4 <lfs_dir_get>
 8025b82:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8025b84:	69fb      	ldr	r3, [r7, #28]
 8025b86:	2b00      	cmp	r3, #0
 8025b88:	da01      	bge.n	8025b8e <lfs_dir_find+0x156>
                return res;
 8025b8a:	69fb      	ldr	r3, [r7, #28]
 8025b8c:	e03d      	b.n	8025c0a <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8025b8e:	68bb      	ldr	r3, [r7, #8]
 8025b90:	3318      	adds	r3, #24
 8025b92:	4618      	mov	r0, r3
 8025b94:	f7fe f925 	bl	8023de2 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025b98:	68bb      	ldr	r3, [r7, #8]
 8025b9a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8025b9e:	212f      	movs	r1, #47	; 0x2f
 8025ba0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025ba2:	f007 fdc2 	bl	802d72a <strchr>
 8025ba6:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025ba8:	2b00      	cmp	r3, #0
 8025baa:	d101      	bne.n	8025bb0 <lfs_dir_find+0x178>
 8025bac:	683b      	ldr	r3, [r7, #0]
 8025bae:	e000      	b.n	8025bb2 <lfs_dir_find+0x17a>
 8025bb0:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8025bb2:	68fa      	ldr	r2, [r7, #12]
 8025bb4:	613a      	str	r2, [r7, #16]
 8025bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025bb8:	617a      	str	r2, [r7, #20]
 8025bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025bbc:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025bbe:	f107 0210 	add.w	r2, r7, #16
 8025bc2:	9203      	str	r2, [sp, #12]
 8025bc4:	4a18      	ldr	r2, [pc, #96]	; (8025c28 <lfs_dir_find+0x1f0>)
 8025bc6:	9202      	str	r2, [sp, #8]
 8025bc8:	9301      	str	r3, [sp, #4]
 8025bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bcc:	9300      	str	r3, [sp, #0]
 8025bce:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8025bd2:	4622      	mov	r2, r4
 8025bd4:	68b9      	ldr	r1, [r7, #8]
 8025bd6:	68f8      	ldr	r0, [r7, #12]
 8025bd8:	f7ff faae 	bl	8025138 <lfs_dir_fetchmatch>
 8025bdc:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8025bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025be0:	2b00      	cmp	r3, #0
 8025be2:	da01      	bge.n	8025be8 <lfs_dir_find+0x1b0>
                return tag;
 8025be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025be6:	e010      	b.n	8025c0a <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8025be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025bea:	2b00      	cmp	r3, #0
 8025bec:	d004      	beq.n	8025bf8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8025bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025bf2:	4413      	add	r3, r2
 8025bf4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8025bf6:	e73a      	b.n	8025a6e <lfs_dir_find+0x36>
            if (!dir->split) {
 8025bf8:	68bb      	ldr	r3, [r7, #8]
 8025bfa:	7ddb      	ldrb	r3, [r3, #23]
 8025bfc:	f083 0301 	eor.w	r3, r3, #1
 8025c00:	b2db      	uxtb	r3, r3
 8025c02:	2b00      	cmp	r3, #0
 8025c04:	d0c8      	beq.n	8025b98 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8025c06:	f06f 0301 	mvn.w	r3, #1
    }
}
 8025c0a:	4618      	mov	r0, r3
 8025c0c:	373c      	adds	r7, #60	; 0x3c
 8025c0e:	46bd      	mov	sp, r7
 8025c10:	bd90      	pop	{r4, r7, pc}
 8025c12:	bf00      	nop
 8025c14:	002ffc00 	.word	0x002ffc00
 8025c18:	080334b8 	.word	0x080334b8
 8025c1c:	080334bc 	.word	0x080334bc
 8025c20:	080334c0 	.word	0x080334c0
 8025c24:	700ffc00 	.word	0x700ffc00
 8025c28:	080259a5 	.word	0x080259a5

08025c2c <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8025c2c:	b590      	push	{r4, r7, lr}
 8025c2e:	b08b      	sub	sp, #44	; 0x2c
 8025c30:	af04      	add	r7, sp, #16
 8025c32:	60f8      	str	r0, [r7, #12]
 8025c34:	60b9      	str	r1, [r7, #8]
 8025c36:	607a      	str	r2, [r7, #4]
 8025c38:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8025c3a:	68fb      	ldr	r3, [r7, #12]
 8025c3c:	f103 0010 	add.w	r0, r3, #16
 8025c40:	68fc      	ldr	r4, [r7, #12]
 8025c42:	68bb      	ldr	r3, [r7, #8]
 8025c44:	681b      	ldr	r3, [r3, #0]
 8025c46:	68ba      	ldr	r2, [r7, #8]
 8025c48:	6852      	ldr	r2, [r2, #4]
 8025c4a:	6839      	ldr	r1, [r7, #0]
 8025c4c:	9103      	str	r1, [sp, #12]
 8025c4e:	6879      	ldr	r1, [r7, #4]
 8025c50:	9102      	str	r1, [sp, #8]
 8025c52:	9201      	str	r2, [sp, #4]
 8025c54:	9300      	str	r3, [sp, #0]
 8025c56:	2300      	movs	r3, #0
 8025c58:	4622      	mov	r2, r4
 8025c5a:	4601      	mov	r1, r0
 8025c5c:	68f8      	ldr	r0, [r7, #12]
 8025c5e:	f7fd ff5b 	bl	8023b18 <lfs_bd_prog>
 8025c62:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8025c64:	697b      	ldr	r3, [r7, #20]
 8025c66:	2b00      	cmp	r3, #0
 8025c68:	d001      	beq.n	8025c6e <lfs_dir_commitprog+0x42>
        return err;
 8025c6a:	697b      	ldr	r3, [r7, #20]
 8025c6c:	e010      	b.n	8025c90 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8025c6e:	68bb      	ldr	r3, [r7, #8]
 8025c70:	68db      	ldr	r3, [r3, #12]
 8025c72:	683a      	ldr	r2, [r7, #0]
 8025c74:	6879      	ldr	r1, [r7, #4]
 8025c76:	4618      	mov	r0, r3
 8025c78:	f004 fef2 	bl	802aa60 <lfs_crc>
 8025c7c:	4602      	mov	r2, r0
 8025c7e:	68bb      	ldr	r3, [r7, #8]
 8025c80:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8025c82:	68bb      	ldr	r3, [r7, #8]
 8025c84:	685a      	ldr	r2, [r3, #4]
 8025c86:	683b      	ldr	r3, [r7, #0]
 8025c88:	441a      	add	r2, r3
 8025c8a:	68bb      	ldr	r3, [r7, #8]
 8025c8c:	605a      	str	r2, [r3, #4]
    return 0;
 8025c8e:	2300      	movs	r3, #0
}
 8025c90:	4618      	mov	r0, r3
 8025c92:	371c      	adds	r7, #28
 8025c94:	46bd      	mov	sp, r7
 8025c96:	bd90      	pop	{r4, r7, pc}

08025c98 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8025c98:	b590      	push	{r4, r7, lr}
 8025c9a:	b08f      	sub	sp, #60	; 0x3c
 8025c9c:	af04      	add	r7, sp, #16
 8025c9e:	60f8      	str	r0, [r7, #12]
 8025ca0:	60b9      	str	r1, [r7, #8]
 8025ca2:	607a      	str	r2, [r7, #4]
 8025ca4:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8025ca6:	6878      	ldr	r0, [r7, #4]
 8025ca8:	f7fe f947 	bl	8023f3a <lfs_tag_dsize>
 8025cac:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8025cae:	68bb      	ldr	r3, [r7, #8]
 8025cb0:	685a      	ldr	r2, [r3, #4]
 8025cb2:	6a3b      	ldr	r3, [r7, #32]
 8025cb4:	441a      	add	r2, r3
 8025cb6:	68bb      	ldr	r3, [r7, #8]
 8025cb8:	695b      	ldr	r3, [r3, #20]
 8025cba:	429a      	cmp	r2, r3
 8025cbc:	d902      	bls.n	8025cc4 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8025cbe:	f06f 031b 	mvn.w	r3, #27
 8025cc2:	e065      	b.n	8025d90 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8025cc4:	687b      	ldr	r3, [r7, #4]
 8025cc6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025cca:	68bb      	ldr	r3, [r7, #8]
 8025ccc:	689b      	ldr	r3, [r3, #8]
 8025cce:	4053      	eors	r3, r2
 8025cd0:	4618      	mov	r0, r3
 8025cd2:	f7fd fc92 	bl	80235fa <lfs_tobe32>
 8025cd6:	4603      	mov	r3, r0
 8025cd8:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8025cda:	f107 0214 	add.w	r2, r7, #20
 8025cde:	2304      	movs	r3, #4
 8025ce0:	68b9      	ldr	r1, [r7, #8]
 8025ce2:	68f8      	ldr	r0, [r7, #12]
 8025ce4:	f7ff ffa2 	bl	8025c2c <lfs_dir_commitprog>
 8025ce8:	61f8      	str	r0, [r7, #28]
    if (err) {
 8025cea:	69fb      	ldr	r3, [r7, #28]
 8025cec:	2b00      	cmp	r3, #0
 8025cee:	d001      	beq.n	8025cf4 <lfs_dir_commitattr+0x5c>
        return err;
 8025cf0:	69fb      	ldr	r3, [r7, #28]
 8025cf2:	e04d      	b.n	8025d90 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8025cf4:	687b      	ldr	r3, [r7, #4]
 8025cf6:	2b00      	cmp	r3, #0
 8025cf8:	db0c      	blt.n	8025d14 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8025cfa:	6a3b      	ldr	r3, [r7, #32]
 8025cfc:	3b04      	subs	r3, #4
 8025cfe:	683a      	ldr	r2, [r7, #0]
 8025d00:	68b9      	ldr	r1, [r7, #8]
 8025d02:	68f8      	ldr	r0, [r7, #12]
 8025d04:	f7ff ff92 	bl	8025c2c <lfs_dir_commitprog>
 8025d08:	61f8      	str	r0, [r7, #28]
        if (err) {
 8025d0a:	69fb      	ldr	r3, [r7, #28]
 8025d0c:	2b00      	cmp	r3, #0
 8025d0e:	d039      	beq.n	8025d84 <lfs_dir_commitattr+0xec>
            return err;
 8025d10:	69fb      	ldr	r3, [r7, #28]
 8025d12:	e03d      	b.n	8025d90 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8025d14:	683b      	ldr	r3, [r7, #0]
 8025d16:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025d18:	2300      	movs	r3, #0
 8025d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8025d1c:	e02d      	b.n	8025d7a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8025d1e:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8025d20:	6a3a      	ldr	r2, [r7, #32]
 8025d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d24:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8025d26:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 8025d28:	69bb      	ldr	r3, [r7, #24]
 8025d2a:	681b      	ldr	r3, [r3, #0]
 8025d2c:	69ba      	ldr	r2, [r7, #24]
 8025d2e:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8025d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d32:	440a      	add	r2, r1
 8025d34:	2101      	movs	r1, #1
 8025d36:	9103      	str	r1, [sp, #12]
 8025d38:	f107 0113 	add.w	r1, r7, #19
 8025d3c:	9102      	str	r1, [sp, #8]
 8025d3e:	9201      	str	r2, [sp, #4]
 8025d40:	9300      	str	r3, [sp, #0]
 8025d42:	4623      	mov	r3, r4
 8025d44:	4602      	mov	r2, r0
 8025d46:	2100      	movs	r1, #0
 8025d48:	68f8      	ldr	r0, [r7, #12]
 8025d4a:	f7fd fc9f 	bl	802368c <lfs_bd_read>
 8025d4e:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025d50:	69fb      	ldr	r3, [r7, #28]
 8025d52:	2b00      	cmp	r3, #0
 8025d54:	d001      	beq.n	8025d5a <lfs_dir_commitattr+0xc2>
                return err;
 8025d56:	69fb      	ldr	r3, [r7, #28]
 8025d58:	e01a      	b.n	8025d90 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8025d5a:	f107 0213 	add.w	r2, r7, #19
 8025d5e:	2301      	movs	r3, #1
 8025d60:	68b9      	ldr	r1, [r7, #8]
 8025d62:	68f8      	ldr	r0, [r7, #12]
 8025d64:	f7ff ff62 	bl	8025c2c <lfs_dir_commitprog>
 8025d68:	61f8      	str	r0, [r7, #28]
            if (err) {
 8025d6a:	69fb      	ldr	r3, [r7, #28]
 8025d6c:	2b00      	cmp	r3, #0
 8025d6e:	d001      	beq.n	8025d74 <lfs_dir_commitattr+0xdc>
                return err;
 8025d70:	69fb      	ldr	r3, [r7, #28]
 8025d72:	e00d      	b.n	8025d90 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8025d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d76:	3301      	adds	r3, #1
 8025d78:	627b      	str	r3, [r7, #36]	; 0x24
 8025d7a:	6a3b      	ldr	r3, [r7, #32]
 8025d7c:	3b04      	subs	r3, #4
 8025d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025d80:	429a      	cmp	r2, r3
 8025d82:	d3cc      	bcc.n	8025d1e <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8025d84:	687b      	ldr	r3, [r7, #4]
 8025d86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8025d8a:	68bb      	ldr	r3, [r7, #8]
 8025d8c:	609a      	str	r2, [r3, #8]
    return 0;
 8025d8e:	2300      	movs	r3, #0
}
 8025d90:	4618      	mov	r0, r3
 8025d92:	372c      	adds	r7, #44	; 0x2c
 8025d94:	46bd      	mov	sp, r7
 8025d96:	bd90      	pop	{r4, r7, pc}

08025d98 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8025d98:	b590      	push	{r4, r7, lr}
 8025d9a:	b097      	sub	sp, #92	; 0x5c
 8025d9c:	af04      	add	r7, sp, #16
 8025d9e:	6078      	str	r0, [r7, #4]
 8025da0:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025da2:	683b      	ldr	r3, [r7, #0]
 8025da4:	685b      	ldr	r3, [r3, #4]
 8025da6:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 8025daa:	687b      	ldr	r3, [r7, #4]
 8025dac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025dae:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8025db0:	4619      	mov	r1, r3
 8025db2:	4610      	mov	r0, r2
 8025db4:	f7fd fbb3 	bl	802351e <lfs_alignup>
 8025db8:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 8025dba:	2300      	movs	r3, #0
 8025dbc:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 8025dbe:	2300      	movs	r3, #0
 8025dc0:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8025dc2:	e0a6      	b.n	8025f12 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8025dc4:	683b      	ldr	r3, [r7, #0]
 8025dc6:	685b      	ldr	r3, [r3, #4]
 8025dc8:	3304      	adds	r3, #4
 8025dca:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8025dcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025dce:	6a3b      	ldr	r3, [r7, #32]
 8025dd0:	1ad3      	subs	r3, r2, r3
 8025dd2:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8025dd6:	4618      	mov	r0, r3
 8025dd8:	f7fd fb7c 	bl	80234d4 <lfs_min>
 8025ddc:	4602      	mov	r2, r0
 8025dde:	6a3b      	ldr	r3, [r7, #32]
 8025de0:	4413      	add	r3, r2
 8025de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8025de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025de8:	429a      	cmp	r2, r3
 8025dea:	d206      	bcs.n	8025dfa <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8025dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025dee:	3b08      	subs	r3, #8
 8025df0:	4619      	mov	r1, r3
 8025df2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8025df4:	f7fd fb6e 	bl	80234d4 <lfs_min>
 8025df8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 8025dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8025dfe:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 8025e00:	6879      	ldr	r1, [r7, #4]
 8025e02:	683b      	ldr	r3, [r7, #0]
 8025e04:	681b      	ldr	r3, [r3, #0]
 8025e06:	2204      	movs	r2, #4
 8025e08:	9203      	str	r2, [sp, #12]
 8025e0a:	f107 0214 	add.w	r2, r7, #20
 8025e0e:	9202      	str	r2, [sp, #8]
 8025e10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8025e12:	9201      	str	r2, [sp, #4]
 8025e14:	9300      	str	r3, [sp, #0]
 8025e16:	2304      	movs	r3, #4
 8025e18:	460a      	mov	r2, r1
 8025e1a:	2100      	movs	r1, #0
 8025e1c:	6878      	ldr	r0, [r7, #4]
 8025e1e:	f7fd fc35 	bl	802368c <lfs_bd_read>
 8025e22:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8025e24:	69fb      	ldr	r3, [r7, #28]
 8025e26:	2b00      	cmp	r3, #0
 8025e28:	d005      	beq.n	8025e36 <lfs_dir_commitcrc+0x9e>
 8025e2a:	69fb      	ldr	r3, [r7, #28]
 8025e2c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025e30:	d001      	beq.n	8025e36 <lfs_dir_commitcrc+0x9e>
            return err;
 8025e32:	69fb      	ldr	r3, [r7, #28]
 8025e34:	e0e8      	b.n	8026008 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8025e36:	697b      	ldr	r3, [r7, #20]
 8025e38:	4618      	mov	r0, r3
 8025e3a:	f7fd fbd2 	bl	80235e2 <lfs_frombe32>
 8025e3e:	4603      	mov	r3, r0
 8025e40:	43db      	mvns	r3, r3
 8025e42:	0fdb      	lsrs	r3, r3, #31
 8025e44:	2b00      	cmp	r3, #0
 8025e46:	bf14      	ite	ne
 8025e48:	2301      	movne	r3, #1
 8025e4a:	2300      	moveq	r3, #0
 8025e4c:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8025e4e:	7efb      	ldrb	r3, [r7, #27]
 8025e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8025e54:	051a      	lsls	r2, r3, #20
 8025e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8025e58:	6a3b      	ldr	r3, [r7, #32]
 8025e5a:	1acb      	subs	r3, r1, r3
 8025e5c:	4313      	orrs	r3, r2
 8025e5e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8025e62:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8025e66:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8025e68:	683b      	ldr	r3, [r7, #0]
 8025e6a:	689a      	ldr	r2, [r3, #8]
 8025e6c:	697b      	ldr	r3, [r7, #20]
 8025e6e:	4053      	eors	r3, r2
 8025e70:	4618      	mov	r0, r3
 8025e72:	f7fd fbc2 	bl	80235fa <lfs_tobe32>
 8025e76:	4603      	mov	r3, r0
 8025e78:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8025e7a:	683b      	ldr	r3, [r7, #0]
 8025e7c:	68db      	ldr	r3, [r3, #12]
 8025e7e:	f107 010c 	add.w	r1, r7, #12
 8025e82:	2204      	movs	r2, #4
 8025e84:	4618      	mov	r0, r3
 8025e86:	f004 fdeb 	bl	802aa60 <lfs_crc>
 8025e8a:	4602      	mov	r2, r0
 8025e8c:	683b      	ldr	r3, [r7, #0]
 8025e8e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8025e90:	683b      	ldr	r3, [r7, #0]
 8025e92:	68db      	ldr	r3, [r3, #12]
 8025e94:	4618      	mov	r0, r3
 8025e96:	f7fd fb98 	bl	80235ca <lfs_tole32>
 8025e9a:	4603      	mov	r3, r0
 8025e9c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 8025e9e:	687b      	ldr	r3, [r7, #4]
 8025ea0:	f103 0010 	add.w	r0, r3, #16
 8025ea4:	687c      	ldr	r4, [r7, #4]
 8025ea6:	683b      	ldr	r3, [r7, #0]
 8025ea8:	681b      	ldr	r3, [r3, #0]
 8025eaa:	683a      	ldr	r2, [r7, #0]
 8025eac:	6852      	ldr	r2, [r2, #4]
 8025eae:	2108      	movs	r1, #8
 8025eb0:	9103      	str	r1, [sp, #12]
 8025eb2:	f107 010c 	add.w	r1, r7, #12
 8025eb6:	9102      	str	r1, [sp, #8]
 8025eb8:	9201      	str	r2, [sp, #4]
 8025eba:	9300      	str	r3, [sp, #0]
 8025ebc:	2300      	movs	r3, #0
 8025ebe:	4622      	mov	r2, r4
 8025ec0:	4601      	mov	r1, r0
 8025ec2:	6878      	ldr	r0, [r7, #4]
 8025ec4:	f7fd fe28 	bl	8023b18 <lfs_bd_prog>
 8025ec8:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8025eca:	69fb      	ldr	r3, [r7, #28]
 8025ecc:	2b00      	cmp	r3, #0
 8025ece:	d001      	beq.n	8025ed4 <lfs_dir_commitcrc+0x13c>
            return err;
 8025ed0:	69fb      	ldr	r3, [r7, #28]
 8025ed2:	e099      	b.n	8026008 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8025ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025ed6:	2b00      	cmp	r3, #0
 8025ed8:	d106      	bne.n	8025ee8 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 8025eda:	683b      	ldr	r3, [r7, #0]
 8025edc:	685b      	ldr	r3, [r3, #4]
 8025ede:	3304      	adds	r3, #4
 8025ee0:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8025ee2:	683b      	ldr	r3, [r7, #0]
 8025ee4:	68db      	ldr	r3, [r3, #12]
 8025ee6:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8025ee8:	697b      	ldr	r3, [r7, #20]
 8025eea:	4618      	mov	r0, r3
 8025eec:	f7fe f818 	bl	8023f20 <lfs_tag_size>
 8025ef0:	4603      	mov	r3, r0
 8025ef2:	1d1a      	adds	r2, r3, #4
 8025ef4:	683b      	ldr	r3, [r7, #0]
 8025ef6:	685b      	ldr	r3, [r3, #4]
 8025ef8:	441a      	add	r2, r3
 8025efa:	683b      	ldr	r3, [r7, #0]
 8025efc:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8025efe:	7efb      	ldrb	r3, [r7, #27]
 8025f00:	07da      	lsls	r2, r3, #31
 8025f02:	697b      	ldr	r3, [r7, #20]
 8025f04:	405a      	eors	r2, r3
 8025f06:	683b      	ldr	r3, [r7, #0]
 8025f08:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 8025f0a:	683b      	ldr	r3, [r7, #0]
 8025f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8025f10:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 8025f12:	683b      	ldr	r3, [r7, #0]
 8025f14:	685b      	ldr	r3, [r3, #4]
 8025f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025f18:	429a      	cmp	r2, r3
 8025f1a:	f63f af53 	bhi.w	8025dc4 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8025f1e:	687b      	ldr	r3, [r7, #4]
 8025f20:	f103 0110 	add.w	r1, r3, #16
 8025f24:	687a      	ldr	r2, [r7, #4]
 8025f26:	2300      	movs	r3, #0
 8025f28:	6878      	ldr	r0, [r7, #4]
 8025f2a:	f7fd fdc1 	bl	8023ab0 <lfs_bd_sync>
 8025f2e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8025f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f32:	2b00      	cmp	r3, #0
 8025f34:	d001      	beq.n	8025f3a <lfs_dir_commitcrc+0x1a2>
        return err;
 8025f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f38:	e066      	b.n	8026008 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 8025f3a:	683b      	ldr	r3, [r7, #0]
 8025f3c:	691b      	ldr	r3, [r3, #16]
 8025f3e:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 8025f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025f42:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8025f44:	e05b      	b.n	8025ffe <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 8025f46:	f04f 33ff 	mov.w	r3, #4294967295
 8025f4a:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8025f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025f50:	e030      	b.n	8025fb4 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8025f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8025f56:	429a      	cmp	r2, r3
 8025f58:	d106      	bne.n	8025f68 <lfs_dir_commitcrc+0x1d0>
 8025f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025f5e:	429a      	cmp	r2, r3
 8025f60:	d002      	beq.n	8025f68 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8025f62:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8025f66:	e04f      	b.n	8026008 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8025f68:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 8025f6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025f6e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8025f70:	1d18      	adds	r0, r3, #4
 8025f72:	683b      	ldr	r3, [r7, #0]
 8025f74:	681b      	ldr	r3, [r3, #0]
 8025f76:	2201      	movs	r2, #1
 8025f78:	9203      	str	r2, [sp, #12]
 8025f7a:	f107 020b 	add.w	r2, r7, #11
 8025f7e:	9202      	str	r2, [sp, #8]
 8025f80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025f82:	9201      	str	r2, [sp, #4]
 8025f84:	9300      	str	r3, [sp, #0]
 8025f86:	4603      	mov	r3, r0
 8025f88:	460a      	mov	r2, r1
 8025f8a:	2100      	movs	r1, #0
 8025f8c:	6878      	ldr	r0, [r7, #4]
 8025f8e:	f7fd fb7d 	bl	802368c <lfs_bd_read>
 8025f92:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8025f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f96:	2b00      	cmp	r3, #0
 8025f98:	d001      	beq.n	8025f9e <lfs_dir_commitcrc+0x206>
                return err;
 8025f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f9c:	e034      	b.n	8026008 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 8025f9e:	f107 030b 	add.w	r3, r7, #11
 8025fa2:	2201      	movs	r2, #1
 8025fa4:	4619      	mov	r1, r3
 8025fa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025fa8:	f004 fd5a 	bl	802aa60 <lfs_crc>
 8025fac:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8025fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025fb0:	3301      	adds	r3, #1
 8025fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025fb6:	3304      	adds	r3, #4
 8025fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025fba:	429a      	cmp	r2, r3
 8025fbc:	d3c9      	bcc.n	8025f52 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 8025fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025fc0:	2b00      	cmp	r3, #0
 8025fc2:	d002      	beq.n	8025fca <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8025fc4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8025fc8:	e01e      	b.n	8026008 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 8025fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025fce:	1ad3      	subs	r3, r2, r3
 8025fd0:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8025fd4:	4618      	mov	r0, r3
 8025fd6:	f7fd fa7d 	bl	80234d4 <lfs_min>
 8025fda:	4602      	mov	r2, r0
 8025fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025fde:	4413      	add	r3, r2
 8025fe0:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8025fe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8025fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fe6:	429a      	cmp	r2, r3
 8025fe8:	d206      	bcs.n	8025ff8 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 8025fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025fec:	3b08      	subs	r3, #8
 8025fee:	4619      	mov	r1, r3
 8025ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8025ff2:	f7fd fa6f 	bl	80234d4 <lfs_min>
 8025ff6:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 8025ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025ffa:	3304      	adds	r3, #4
 8025ffc:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 8025ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026002:	429a      	cmp	r2, r3
 8026004:	d39f      	bcc.n	8025f46 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 8026006:	2300      	movs	r3, #0
}
 8026008:	4618      	mov	r0, r3
 802600a:	374c      	adds	r7, #76	; 0x4c
 802600c:	46bd      	mov	sp, r7
 802600e:	bd90      	pop	{r4, r7, pc}

08026010 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8026010:	b580      	push	{r7, lr}
 8026012:	b08a      	sub	sp, #40	; 0x28
 8026014:	af04      	add	r7, sp, #16
 8026016:	6078      	str	r0, [r7, #4]
 8026018:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 802601a:	2300      	movs	r3, #0
 802601c:	617b      	str	r3, [r7, #20]
 802601e:	e016      	b.n	802604e <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8026020:	697b      	ldr	r3, [r7, #20]
 8026022:	3301      	adds	r3, #1
 8026024:	2b00      	cmp	r3, #0
 8026026:	f003 0301 	and.w	r3, r3, #1
 802602a:	bfb8      	it	lt
 802602c:	425b      	neglt	r3, r3
 802602e:	009b      	lsls	r3, r3, #2
 8026030:	683a      	ldr	r2, [r7, #0]
 8026032:	4413      	add	r3, r2
 8026034:	4619      	mov	r1, r3
 8026036:	6878      	ldr	r0, [r7, #4]
 8026038:	f7fe f9b2 	bl	80243a0 <lfs_alloc>
 802603c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802603e:	68fb      	ldr	r3, [r7, #12]
 8026040:	2b00      	cmp	r3, #0
 8026042:	d001      	beq.n	8026048 <lfs_dir_alloc+0x38>
            return err;
 8026044:	68fb      	ldr	r3, [r7, #12]
 8026046:	e058      	b.n	80260fa <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 8026048:	697b      	ldr	r3, [r7, #20]
 802604a:	3301      	adds	r3, #1
 802604c:	617b      	str	r3, [r7, #20]
 802604e:	697b      	ldr	r3, [r7, #20]
 8026050:	2b01      	cmp	r3, #1
 8026052:	dde5      	ble.n	8026020 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8026054:	683b      	ldr	r3, [r7, #0]
 8026056:	2200      	movs	r2, #0
 8026058:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 802605a:	6879      	ldr	r1, [r7, #4]
 802605c:	683b      	ldr	r3, [r7, #0]
 802605e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8026060:	683a      	ldr	r2, [r7, #0]
 8026062:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8026064:	2004      	movs	r0, #4
 8026066:	9003      	str	r0, [sp, #12]
 8026068:	9202      	str	r2, [sp, #8]
 802606a:	2200      	movs	r2, #0
 802606c:	9201      	str	r2, [sp, #4]
 802606e:	9300      	str	r3, [sp, #0]
 8026070:	2304      	movs	r3, #4
 8026072:	460a      	mov	r2, r1
 8026074:	2100      	movs	r1, #0
 8026076:	6878      	ldr	r0, [r7, #4]
 8026078:	f7fd fb08 	bl	802368c <lfs_bd_read>
 802607c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 802607e:	683b      	ldr	r3, [r7, #0]
 8026080:	689b      	ldr	r3, [r3, #8]
 8026082:	4618      	mov	r0, r3
 8026084:	f7fd fa96 	bl	80235b4 <lfs_fromle32>
 8026088:	4602      	mov	r2, r0
 802608a:	683b      	ldr	r3, [r7, #0]
 802608c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 802608e:	693b      	ldr	r3, [r7, #16]
 8026090:	2b00      	cmp	r3, #0
 8026092:	d005      	beq.n	80260a0 <lfs_dir_alloc+0x90>
 8026094:	693b      	ldr	r3, [r7, #16]
 8026096:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802609a:	d001      	beq.n	80260a0 <lfs_dir_alloc+0x90>
        return err;
 802609c:	693b      	ldr	r3, [r7, #16]
 802609e:	e02c      	b.n	80260fa <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 80260a0:	687b      	ldr	r3, [r7, #4]
 80260a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80260a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	dd0e      	ble.n	80260c8 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 80260aa:	683b      	ldr	r3, [r7, #0]
 80260ac:	689a      	ldr	r2, [r3, #8]
 80260ae:	687b      	ldr	r3, [r7, #4]
 80260b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80260b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80260b4:	3301      	adds	r3, #1
 80260b6:	f043 0301 	orr.w	r3, r3, #1
 80260ba:	4619      	mov	r1, r3
 80260bc:	4610      	mov	r0, r2
 80260be:	f7fd fa2e 	bl	802351e <lfs_alignup>
 80260c2:	4602      	mov	r2, r0
 80260c4:	683b      	ldr	r3, [r7, #0]
 80260c6:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 80260c8:	683b      	ldr	r3, [r7, #0]
 80260ca:	2204      	movs	r2, #4
 80260cc:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 80260ce:	683b      	ldr	r3, [r7, #0]
 80260d0:	f04f 32ff 	mov.w	r2, #4294967295
 80260d4:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 80260d6:	683b      	ldr	r3, [r7, #0]
 80260d8:	2200      	movs	r2, #0
 80260da:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 80260dc:	683b      	ldr	r3, [r7, #0]
 80260de:	f04f 32ff 	mov.w	r2, #4294967295
 80260e2:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 80260e4:	683b      	ldr	r3, [r7, #0]
 80260e6:	f04f 32ff 	mov.w	r2, #4294967295
 80260ea:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 80260ec:	683b      	ldr	r3, [r7, #0]
 80260ee:	2200      	movs	r2, #0
 80260f0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80260f2:	683b      	ldr	r3, [r7, #0]
 80260f4:	2200      	movs	r2, #0
 80260f6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80260f8:	2300      	movs	r3, #0
}
 80260fa:	4618      	mov	r0, r3
 80260fc:	3718      	adds	r7, #24
 80260fe:	46bd      	mov	sp, r7
 8026100:	bd80      	pop	{r7, pc}
	...

08026104 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8026104:	b580      	push	{r7, lr}
 8026106:	b08a      	sub	sp, #40	; 0x28
 8026108:	af00      	add	r7, sp, #0
 802610a:	60f8      	str	r0, [r7, #12]
 802610c:	60b9      	str	r1, [r7, #8]
 802610e:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8026110:	68fb      	ldr	r3, [r7, #12]
 8026112:	3348      	adds	r3, #72	; 0x48
 8026114:	461a      	mov	r2, r3
 8026116:	6879      	ldr	r1, [r7, #4]
 8026118:	68f8      	ldr	r0, [r7, #12]
 802611a:	f7ff fb97 	bl	802584c <lfs_dir_getgstate>
 802611e:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8026120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026122:	2b00      	cmp	r3, #0
 8026124:	d001      	beq.n	802612a <lfs_dir_drop+0x26>
        return err;
 8026126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026128:	e022      	b.n	8026170 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 802612a:	687b      	ldr	r3, [r7, #4]
 802612c:	3318      	adds	r3, #24
 802612e:	4618      	mov	r0, r3
 8026130:	f7fd fe71 	bl	8023e16 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	7ddb      	ldrb	r3, [r3, #23]
 8026138:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802613c:	051a      	lsls	r2, r3, #20
 802613e:	4b0e      	ldr	r3, [pc, #56]	; (8026178 <lfs_dir_drop+0x74>)
 8026140:	4313      	orrs	r3, r2
 8026142:	61fb      	str	r3, [r7, #28]
 8026144:	687b      	ldr	r3, [r7, #4]
 8026146:	3318      	adds	r3, #24
 8026148:	623b      	str	r3, [r7, #32]
 802614a:	f107 021c 	add.w	r2, r7, #28
 802614e:	2301      	movs	r3, #1
 8026150:	68b9      	ldr	r1, [r7, #8]
 8026152:	68f8      	ldr	r0, [r7, #12]
 8026154:	f001 f978 	bl	8027448 <lfs_dir_commit>
 8026158:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 802615a:	687b      	ldr	r3, [r7, #4]
 802615c:	3318      	adds	r3, #24
 802615e:	4618      	mov	r0, r3
 8026160:	f7fd fe3f 	bl	8023de2 <lfs_pair_fromle32>
    if (err) {
 8026164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026166:	2b00      	cmp	r3, #0
 8026168:	d001      	beq.n	802616e <lfs_dir_drop+0x6a>
        return err;
 802616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802616c:	e000      	b.n	8026170 <lfs_dir_drop+0x6c>
    }

    return 0;
 802616e:	2300      	movs	r3, #0
}
 8026170:	4618      	mov	r0, r3
 8026172:	3728      	adds	r7, #40	; 0x28
 8026174:	46bd      	mov	sp, r7
 8026176:	bd80      	pop	{r7, pc}
 8026178:	000ffc08 	.word	0x000ffc08

0802617c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 802617c:	b580      	push	{r7, lr}
 802617e:	b092      	sub	sp, #72	; 0x48
 8026180:	af04      	add	r7, sp, #16
 8026182:	60f8      	str	r0, [r7, #12]
 8026184:	60b9      	str	r1, [r7, #8]
 8026186:	607a      	str	r2, [r7, #4]
 8026188:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 802618a:	f107 0310 	add.w	r3, r7, #16
 802618e:	4619      	mov	r1, r3
 8026190:	68f8      	ldr	r0, [r7, #12]
 8026192:	f7ff ff3d 	bl	8026010 <lfs_dir_alloc>
 8026196:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8026198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802619a:	2b00      	cmp	r3, #0
 802619c:	d001      	beq.n	80261a2 <lfs_dir_split+0x26>
        return err;
 802619e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80261a0:	e03c      	b.n	802621c <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80261a2:	68bb      	ldr	r3, [r7, #8]
 80261a4:	7ddb      	ldrb	r3, [r3, #23]
 80261a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 80261aa:	68bb      	ldr	r3, [r7, #8]
 80261ac:	699b      	ldr	r3, [r3, #24]
 80261ae:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 80261b0:	68bb      	ldr	r3, [r7, #8]
 80261b2:	69db      	ldr	r3, [r3, #28]
 80261b4:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80261b6:	f107 0110 	add.w	r1, r7, #16
 80261ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80261be:	9302      	str	r3, [sp, #8]
 80261c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80261c4:	9301      	str	r3, [sp, #4]
 80261c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80261c8:	9300      	str	r3, [sp, #0]
 80261ca:	683b      	ldr	r3, [r7, #0]
 80261cc:	687a      	ldr	r2, [r7, #4]
 80261ce:	68f8      	ldr	r0, [r7, #12]
 80261d0:	f000 f87a 	bl	80262c8 <lfs_dir_compact>
 80261d4:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 80261d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261d8:	2b00      	cmp	r3, #0
 80261da:	da01      	bge.n	80261e0 <lfs_dir_split+0x64>
        return res;
 80261dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80261de:	e01d      	b.n	802621c <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 80261e0:	693a      	ldr	r2, [r7, #16]
 80261e2:	68bb      	ldr	r3, [r7, #8]
 80261e4:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 80261e6:	697a      	ldr	r2, [r7, #20]
 80261e8:	68bb      	ldr	r3, [r7, #8]
 80261ea:	61da      	str	r2, [r3, #28]
    dir->split = true;
 80261ec:	68bb      	ldr	r3, [r7, #8]
 80261ee:	2201      	movs	r2, #1
 80261f0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80261f2:	68ba      	ldr	r2, [r7, #8]
 80261f4:	68fb      	ldr	r3, [r7, #12]
 80261f6:	3320      	adds	r3, #32
 80261f8:	4619      	mov	r1, r3
 80261fa:	4610      	mov	r0, r2
 80261fc:	f7fd fd9a 	bl	8023d34 <lfs_pair_cmp>
 8026200:	4603      	mov	r3, r0
 8026202:	2b00      	cmp	r3, #0
 8026204:	d109      	bne.n	802621a <lfs_dir_split+0x9e>
 8026206:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802620a:	2b00      	cmp	r3, #0
 802620c:	d105      	bne.n	802621a <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 802620e:	693a      	ldr	r2, [r7, #16]
 8026210:	68fb      	ldr	r3, [r7, #12]
 8026212:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8026214:	697a      	ldr	r2, [r7, #20]
 8026216:	68fb      	ldr	r3, [r7, #12]
 8026218:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 802621a:	2300      	movs	r3, #0
}
 802621c:	4618      	mov	r0, r3
 802621e:	3738      	adds	r7, #56	; 0x38
 8026220:	46bd      	mov	sp, r7
 8026222:	bd80      	pop	{r7, pc}

08026224 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8026224:	b580      	push	{r7, lr}
 8026226:	b086      	sub	sp, #24
 8026228:	af00      	add	r7, sp, #0
 802622a:	60f8      	str	r0, [r7, #12]
 802622c:	60b9      	str	r1, [r7, #8]
 802622e:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8026230:	68fb      	ldr	r3, [r7, #12]
 8026232:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8026234:	68b8      	ldr	r0, [r7, #8]
 8026236:	f7fd fe80 	bl	8023f3a <lfs_tag_dsize>
 802623a:	4602      	mov	r2, r0
 802623c:	697b      	ldr	r3, [r7, #20]
 802623e:	681b      	ldr	r3, [r3, #0]
 8026240:	441a      	add	r2, r3
 8026242:	697b      	ldr	r3, [r7, #20]
 8026244:	601a      	str	r2, [r3, #0]
    return 0;
 8026246:	2300      	movs	r3, #0
}
 8026248:	4618      	mov	r0, r3
 802624a:	3718      	adds	r7, #24
 802624c:	46bd      	mov	sp, r7
 802624e:	bd80      	pop	{r7, pc}

08026250 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8026250:	b580      	push	{r7, lr}
 8026252:	b086      	sub	sp, #24
 8026254:	af00      	add	r7, sp, #0
 8026256:	60f8      	str	r0, [r7, #12]
 8026258:	60b9      	str	r1, [r7, #8]
 802625a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 802625c:	68fb      	ldr	r3, [r7, #12]
 802625e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8026260:	697b      	ldr	r3, [r7, #20]
 8026262:	6818      	ldr	r0, [r3, #0]
 8026264:	697b      	ldr	r3, [r7, #20]
 8026266:	6859      	ldr	r1, [r3, #4]
 8026268:	687b      	ldr	r3, [r7, #4]
 802626a:	68ba      	ldr	r2, [r7, #8]
 802626c:	f7ff fd14 	bl	8025c98 <lfs_dir_commitattr>
 8026270:	4603      	mov	r3, r0
}
 8026272:	4618      	mov	r0, r3
 8026274:	3718      	adds	r7, #24
 8026276:	46bd      	mov	sp, r7
 8026278:	bd80      	pop	{r7, pc}

0802627a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 802627a:	b480      	push	{r7}
 802627c:	b083      	sub	sp, #12
 802627e:	af00      	add	r7, sp, #0
 8026280:	6078      	str	r0, [r7, #4]
 8026282:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8026284:	687b      	ldr	r3, [r7, #4]
 8026286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 802628a:	2b00      	cmp	r3, #0
 802628c:	dd11      	ble.n	80262b2 <lfs_dir_needsrelocation+0x38>
 802628e:	683b      	ldr	r3, [r7, #0]
 8026290:	689b      	ldr	r3, [r3, #8]
 8026292:	3301      	adds	r3, #1
 8026294:	687a      	ldr	r2, [r7, #4]
 8026296:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802629a:	3201      	adds	r2, #1
 802629c:	f042 0201 	orr.w	r2, r2, #1
 80262a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80262a4:	fb01 f202 	mul.w	r2, r1, r2
 80262a8:	1a9b      	subs	r3, r3, r2
 80262aa:	2b00      	cmp	r3, #0
 80262ac:	d101      	bne.n	80262b2 <lfs_dir_needsrelocation+0x38>
 80262ae:	2301      	movs	r3, #1
 80262b0:	e000      	b.n	80262b4 <lfs_dir_needsrelocation+0x3a>
 80262b2:	2300      	movs	r3, #0
 80262b4:	f003 0301 	and.w	r3, r3, #1
 80262b8:	b2db      	uxtb	r3, r3
}
 80262ba:	4618      	mov	r0, r3
 80262bc:	370c      	adds	r7, #12
 80262be:	46bd      	mov	sp, r7
 80262c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80262c4:	4770      	bx	lr
	...

080262c8 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80262c8:	b580      	push	{r7, lr}
 80262ca:	b0a4      	sub	sp, #144	; 0x90
 80262cc:	af0a      	add	r7, sp, #40	; 0x28
 80262ce:	60f8      	str	r0, [r7, #12]
 80262d0:	60b9      	str	r1, [r7, #8]
 80262d2:	607a      	str	r2, [r7, #4]
 80262d4:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 80262d6:	2300      	movs	r3, #0
 80262d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 80262dc:	68b9      	ldr	r1, [r7, #8]
 80262de:	68f8      	ldr	r0, [r7, #12]
 80262e0:	f7ff ffcb 	bl	802627a <lfs_dir_needsrelocation>
 80262e4:	4603      	mov	r3, r0
 80262e6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 80262ea:	68bb      	ldr	r3, [r7, #8]
 80262ec:	689b      	ldr	r3, [r3, #8]
 80262ee:	1c5a      	adds	r2, r3, #1
 80262f0:	68bb      	ldr	r3, [r7, #8]
 80262f2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80262f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80262f8:	2b00      	cmp	r3, #0
 80262fa:	d00e      	beq.n	802631a <lfs_dir_compact+0x52>
 80262fc:	68bb      	ldr	r3, [r7, #8]
 80262fe:	2200      	movs	r2, #0
 8026300:	657a      	str	r2, [r7, #84]	; 0x54
 8026302:	2201      	movs	r2, #1
 8026304:	65ba      	str	r2, [r7, #88]	; 0x58
 8026306:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802630a:	4611      	mov	r1, r2
 802630c:	4618      	mov	r0, r3
 802630e:	f7fd fd11 	bl	8023d34 <lfs_pair_cmp>
 8026312:	4603      	mov	r3, r0
 8026314:	2b00      	cmp	r3, #0
 8026316:	f040 8155 	bne.w	80265c4 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 802631a:	68bb      	ldr	r3, [r7, #8]
 802631c:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 802631e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8026320:	2300      	movs	r3, #0
 8026322:	643b      	str	r3, [r7, #64]	; 0x40
 8026324:	f04f 33ff 	mov.w	r3, #4294967295
 8026328:	647b      	str	r3, [r7, #68]	; 0x44
 802632a:	f04f 33ff 	mov.w	r3, #4294967295
 802632e:	64bb      	str	r3, [r7, #72]	; 0x48
 8026330:	2300      	movs	r3, #0
 8026332:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 8026334:	68fb      	ldr	r3, [r7, #12]
 8026336:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 802633a:	2b00      	cmp	r3, #0
 802633c:	d004      	beq.n	8026348 <lfs_dir_compact+0x80>
 802633e:	68fb      	ldr	r3, [r7, #12]
 8026340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026344:	3b08      	subs	r3, #8
 8026346:	e003      	b.n	8026350 <lfs_dir_compact+0x88>
 8026348:	68fb      	ldr	r3, [r7, #12]
 802634a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802634c:	69db      	ldr	r3, [r3, #28]
 802634e:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8026350:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8026352:	68bb      	ldr	r3, [r7, #8]
 8026354:	685b      	ldr	r3, [r3, #4]
 8026356:	4619      	mov	r1, r3
 8026358:	68f8      	ldr	r0, [r7, #12]
 802635a:	f7fd fc89 	bl	8023c70 <lfs_bd_erase>
 802635e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026362:	2b00      	cmp	r3, #0
 8026364:	d006      	beq.n	8026374 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8026366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026368:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802636c:	f000 812c 	beq.w	80265c8 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8026370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026372:	e188      	b.n	8026686 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8026374:	68bb      	ldr	r3, [r7, #8]
 8026376:	689b      	ldr	r3, [r3, #8]
 8026378:	4618      	mov	r0, r3
 802637a:	f7fd f926 	bl	80235ca <lfs_tole32>
 802637e:	4602      	mov	r2, r0
 8026380:	68bb      	ldr	r3, [r7, #8]
 8026382:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8026384:	68bb      	ldr	r3, [r7, #8]
 8026386:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 802638a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 802638e:	2304      	movs	r3, #4
 8026390:	68f8      	ldr	r0, [r7, #12]
 8026392:	f7ff fc4b 	bl	8025c2c <lfs_dir_commitprog>
 8026396:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8026398:	68bb      	ldr	r3, [r7, #8]
 802639a:	689b      	ldr	r3, [r3, #8]
 802639c:	4618      	mov	r0, r3
 802639e:	f7fd f909 	bl	80235b4 <lfs_fromle32>
 80263a2:	4602      	mov	r2, r0
 80263a4:	68bb      	ldr	r3, [r7, #8]
 80263a6:	609a      	str	r2, [r3, #8]
            if (err) {
 80263a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80263aa:	2b00      	cmp	r3, #0
 80263ac:	d006      	beq.n	80263bc <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 80263ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80263b0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80263b4:	f000 810a 	beq.w	80265cc <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 80263b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80263ba:	e164      	b.n	8026686 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 80263bc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80263c0:	425b      	negs	r3, r3
 80263c2:	b29b      	uxth	r3, r3
 80263c4:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 80263c6:	68fa      	ldr	r2, [r7, #12]
 80263c8:	637a      	str	r2, [r7, #52]	; 0x34
 80263ca:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80263ce:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 80263d0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80263d4:	9208      	str	r2, [sp, #32]
 80263d6:	4aae      	ldr	r2, [pc, #696]	; (8026690 <lfs_dir_compact+0x3c8>)
 80263d8:	9207      	str	r2, [sp, #28]
 80263da:	9306      	str	r3, [sp, #24]
 80263dc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80263e0:	9305      	str	r3, [sp, #20]
 80263e2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80263e6:	9304      	str	r3, [sp, #16]
 80263e8:	2300      	movs	r3, #0
 80263ea:	9303      	str	r3, [sp, #12]
 80263ec:	4ba9      	ldr	r3, [pc, #676]	; (8026694 <lfs_dir_compact+0x3cc>)
 80263ee:	9302      	str	r3, [sp, #8]
 80263f0:	683b      	ldr	r3, [r7, #0]
 80263f2:	9301      	str	r3, [sp, #4]
 80263f4:	687b      	ldr	r3, [r7, #4]
 80263f6:	9300      	str	r3, [sp, #0]
 80263f8:	f04f 33ff 	mov.w	r3, #4294967295
 80263fc:	2200      	movs	r2, #0
 80263fe:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8026400:	68f8      	ldr	r0, [r7, #12]
 8026402:	f7fe fab9 	bl	8024978 <lfs_dir_traverse>
 8026406:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 8026408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802640a:	2b00      	cmp	r3, #0
 802640c:	d006      	beq.n	802641c <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 802640e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026410:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026414:	f000 80dc 	beq.w	80265d0 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 8026418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802641a:	e134      	b.n	8026686 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 802641c:	68bb      	ldr	r3, [r7, #8]
 802641e:	3318      	adds	r3, #24
 8026420:	4618      	mov	r0, r3
 8026422:	f7fd fc6c 	bl	8023cfe <lfs_pair_isnull>
 8026426:	4603      	mov	r3, r0
 8026428:	f083 0301 	eor.w	r3, r3, #1
 802642c:	b2db      	uxtb	r3, r3
 802642e:	2b00      	cmp	r3, #0
 8026430:	d022      	beq.n	8026478 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 8026432:	68bb      	ldr	r3, [r7, #8]
 8026434:	3318      	adds	r3, #24
 8026436:	4618      	mov	r0, r3
 8026438:	f7fd fced 	bl	8023e16 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 802643c:	68bb      	ldr	r3, [r7, #8]
 802643e:	7ddb      	ldrb	r3, [r3, #23]
 8026440:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8026444:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 8026446:	4a94      	ldr	r2, [pc, #592]	; (8026698 <lfs_dir_compact+0x3d0>)
 8026448:	431a      	orrs	r2, r3
                        dir->tail);
 802644a:	68bb      	ldr	r3, [r7, #8]
 802644c:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 802644e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026452:	68f8      	ldr	r0, [r7, #12]
 8026454:	f7ff fc20 	bl	8025c98 <lfs_dir_commitattr>
 8026458:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 802645a:	68bb      	ldr	r3, [r7, #8]
 802645c:	3318      	adds	r3, #24
 802645e:	4618      	mov	r0, r3
 8026460:	f7fd fcbf 	bl	8023de2 <lfs_pair_fromle32>
                if (err) {
 8026464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026466:	2b00      	cmp	r3, #0
 8026468:	d006      	beq.n	8026478 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802646a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802646c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026470:	f000 80b0 	beq.w	80265d4 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8026474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026476:	e106      	b.n	8026686 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8026478:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802647c:	2200      	movs	r2, #0
 802647e:	601a      	str	r2, [r3, #0]
 8026480:	605a      	str	r2, [r3, #4]
 8026482:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026484:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8026488:	f083 0301 	eor.w	r3, r3, #1
 802648c:	b2db      	uxtb	r3, r3
 802648e:	2b00      	cmp	r3, #0
 8026490:	d011      	beq.n	80264b6 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8026492:	68fb      	ldr	r3, [r7, #12]
 8026494:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802649c:	4611      	mov	r1, r2
 802649e:	4618      	mov	r0, r3
 80264a0:	f7fd fd5f 	bl	8023f62 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 80264a4:	68fb      	ldr	r3, [r7, #12]
 80264a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80264aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264ae:	4611      	mov	r1, r2
 80264b0:	4618      	mov	r0, r3
 80264b2:	f7fd fd56 	bl	8023f62 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 80264b6:	68fb      	ldr	r3, [r7, #12]
 80264b8:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80264bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264c0:	4611      	mov	r1, r2
 80264c2:	4618      	mov	r0, r3
 80264c4:	f7fd fd4d 	bl	8023f62 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 80264c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80264ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80264ce:	f023 0303 	bic.w	r3, r3, #3
 80264d2:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 80264d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264d8:	461a      	mov	r2, r3
 80264da:	68b9      	ldr	r1, [r7, #8]
 80264dc:	68f8      	ldr	r0, [r7, #12]
 80264de:	f7ff f9b5 	bl	802584c <lfs_dir_getgstate>
 80264e2:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80264e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264e6:	2b00      	cmp	r3, #0
 80264e8:	d001      	beq.n	80264ee <lfs_dir_compact+0x226>
                return err;
 80264ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80264ec:	e0cb      	b.n	8026686 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 80264ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80264f2:	4618      	mov	r0, r3
 80264f4:	f7fd fd5a 	bl	8023fac <lfs_gstate_iszero>
 80264f8:	4603      	mov	r3, r0
 80264fa:	f083 0301 	eor.w	r3, r3, #1
 80264fe:	b2db      	uxtb	r3, r3
 8026500:	2b00      	cmp	r3, #0
 8026502:	d016      	beq.n	8026532 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 8026504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026508:	4618      	mov	r0, r3
 802650a:	f7fd fde1 	bl	80240d0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 802650e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026512:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026516:	4a61      	ldr	r2, [pc, #388]	; (802669c <lfs_dir_compact+0x3d4>)
 8026518:	68f8      	ldr	r0, [r7, #12]
 802651a:	f7ff fbbd 	bl	8025c98 <lfs_dir_commitattr>
 802651e:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 8026520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026522:	2b00      	cmp	r3, #0
 8026524:	d005      	beq.n	8026532 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 8026526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026528:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802652c:	d054      	beq.n	80265d8 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 802652e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026530:	e0a9      	b.n	8026686 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 8026532:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8026536:	4619      	mov	r1, r3
 8026538:	68f8      	ldr	r0, [r7, #12]
 802653a:	f7ff fc2d 	bl	8025d98 <lfs_dir_commitcrc>
 802653e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026542:	2b00      	cmp	r3, #0
 8026544:	d005      	beq.n	8026552 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 8026546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026548:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802654c:	d046      	beq.n	80265dc <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 802654e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026550:	e099      	b.n	8026686 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026554:	68fa      	ldr	r2, [r7, #12]
 8026556:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026558:	6992      	ldr	r2, [r2, #24]
 802655a:	fbb3 f1f2 	udiv	r1, r3, r2
 802655e:	fb01 f202 	mul.w	r2, r1, r2
 8026562:	1a9b      	subs	r3, r3, r2
 8026564:	2b00      	cmp	r3, #0
 8026566:	d006      	beq.n	8026576 <lfs_dir_compact+0x2ae>
 8026568:	4b4d      	ldr	r3, [pc, #308]	; (80266a0 <lfs_dir_compact+0x3d8>)
 802656a:	4a4e      	ldr	r2, [pc, #312]	; (80266a4 <lfs_dir_compact+0x3dc>)
 802656c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8026570:	484d      	ldr	r0, [pc, #308]	; (80266a8 <lfs_dir_compact+0x3e0>)
 8026572:	f005 fef3 	bl	802c35c <__assert_func>
            lfs_pair_swap(dir->pair);
 8026576:	68bb      	ldr	r3, [r7, #8]
 8026578:	4618      	mov	r0, r3
 802657a:	f7fd fbab 	bl	8023cd4 <lfs_pair_swap>
            dir->count = end - begin;
 802657e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8026582:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026586:	1ad3      	subs	r3, r2, r3
 8026588:	b29a      	uxth	r2, r3
 802658a:	68bb      	ldr	r3, [r7, #8]
 802658c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 802658e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026590:	68bb      	ldr	r3, [r7, #8]
 8026592:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8026594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026596:	68bb      	ldr	r3, [r7, #8]
 8026598:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 802659a:	68fb      	ldr	r3, [r7, #12]
 802659c:	3348      	adds	r3, #72	; 0x48
 802659e:	2200      	movs	r2, #0
 80265a0:	601a      	str	r2, [r3, #0]
 80265a2:	605a      	str	r2, [r3, #4]
 80265a4:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 80265a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80265aa:	f083 0301 	eor.w	r3, r3, #1
 80265ae:	b2db      	uxtb	r3, r3
 80265b0:	2b00      	cmp	r3, #0
 80265b2:	d065      	beq.n	8026680 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 80265b4:	68fb      	ldr	r3, [r7, #12]
 80265b6:	68fa      	ldr	r2, [r7, #12]
 80265b8:	333c      	adds	r3, #60	; 0x3c
 80265ba:	3230      	adds	r2, #48	; 0x30
 80265bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80265be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 80265c2:	e05d      	b.n	8026680 <lfs_dir_compact+0x3b8>
        goto relocate;
 80265c4:	bf00      	nop
 80265c6:	e00a      	b.n	80265de <lfs_dir_compact+0x316>
                    goto relocate;
 80265c8:	bf00      	nop
 80265ca:	e008      	b.n	80265de <lfs_dir_compact+0x316>
                    goto relocate;
 80265cc:	bf00      	nop
 80265ce:	e006      	b.n	80265de <lfs_dir_compact+0x316>
                    goto relocate;
 80265d0:	bf00      	nop
 80265d2:	e004      	b.n	80265de <lfs_dir_compact+0x316>
                        goto relocate;
 80265d4:	bf00      	nop
 80265d6:	e002      	b.n	80265de <lfs_dir_compact+0x316>
                        goto relocate;
 80265d8:	bf00      	nop
 80265da:	e000      	b.n	80265de <lfs_dir_compact+0x316>
                    goto relocate;
 80265dc:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 80265de:	2301      	movs	r3, #1
 80265e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 80265e4:	68fb      	ldr	r3, [r7, #12]
 80265e6:	3310      	adds	r3, #16
 80265e8:	4619      	mov	r1, r3
 80265ea:	68f8      	ldr	r0, [r7, #12]
 80265ec:	f7fd f828 	bl	8023640 <lfs_cache_drop>
        if (!tired) {
 80265f0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80265f4:	f083 0301 	eor.w	r3, r3, #1
 80265f8:	b2db      	uxtb	r3, r3
 80265fa:	2b00      	cmp	r3, #0
 80265fc:	d009      	beq.n	8026612 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80265fe:	68bb      	ldr	r3, [r7, #8]
 8026600:	685b      	ldr	r3, [r3, #4]
 8026602:	4a2a      	ldr	r2, [pc, #168]	; (80266ac <lfs_dir_compact+0x3e4>)
 8026604:	9200      	str	r2, [sp, #0]
 8026606:	f240 725a 	movw	r2, #1882	; 0x75a
 802660a:	4927      	ldr	r1, [pc, #156]	; (80266a8 <lfs_dir_compact+0x3e0>)
 802660c:	4828      	ldr	r0, [pc, #160]	; (80266b0 <lfs_dir_compact+0x3e8>)
 802660e:	f006 fedf 	bl	802d3d0 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026612:	68bb      	ldr	r3, [r7, #8]
 8026614:	2200      	movs	r2, #0
 8026616:	617a      	str	r2, [r7, #20]
 8026618:	2201      	movs	r2, #1
 802661a:	61ba      	str	r2, [r7, #24]
 802661c:	f107 0214 	add.w	r2, r7, #20
 8026620:	4611      	mov	r1, r2
 8026622:	4618      	mov	r0, r3
 8026624:	f7fd fb86 	bl	8023d34 <lfs_pair_cmp>
 8026628:	4603      	mov	r3, r0
 802662a:	2b00      	cmp	r3, #0
 802662c:	d10c      	bne.n	8026648 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 802662e:	68bb      	ldr	r3, [r7, #8]
 8026630:	685b      	ldr	r3, [r3, #4]
 8026632:	4a1e      	ldr	r2, [pc, #120]	; (80266ac <lfs_dir_compact+0x3e4>)
 8026634:	9200      	str	r2, [sp, #0]
 8026636:	f240 725f 	movw	r2, #1887	; 0x75f
 802663a:	491b      	ldr	r1, [pc, #108]	; (80266a8 <lfs_dir_compact+0x3e0>)
 802663c:	481d      	ldr	r0, [pc, #116]	; (80266b4 <lfs_dir_compact+0x3ec>)
 802663e:	f006 fec7 	bl	802d3d0 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 8026642:	f06f 031b 	mvn.w	r3, #27
 8026646:	e01e      	b.n	8026686 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 8026648:	68bb      	ldr	r3, [r7, #8]
 802664a:	3304      	adds	r3, #4
 802664c:	4619      	mov	r1, r3
 802664e:	68f8      	ldr	r0, [r7, #12]
 8026650:	f7fd fea6 	bl	80243a0 <lfs_alloc>
 8026654:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8026656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026658:	2b00      	cmp	r3, #0
 802665a:	d00c      	beq.n	8026676 <lfs_dir_compact+0x3ae>
 802665c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802665e:	f113 0f1c 	cmn.w	r3, #28
 8026662:	d106      	bne.n	8026672 <lfs_dir_compact+0x3aa>
 8026664:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026668:	f083 0301 	eor.w	r3, r3, #1
 802666c:	b2db      	uxtb	r3, r3
 802666e:	2b00      	cmp	r3, #0
 8026670:	d001      	beq.n	8026676 <lfs_dir_compact+0x3ae>
            return err;
 8026672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026674:	e007      	b.n	8026686 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8026676:	2300      	movs	r3, #0
 8026678:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 802667c:	bf00      	nop
    while (true) {
 802667e:	e64c      	b.n	802631a <lfs_dir_compact+0x52>
        break;
 8026680:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8026682:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8026686:	4618      	mov	r0, r3
 8026688:	3768      	adds	r7, #104	; 0x68
 802668a:	46bd      	mov	sp, r7
 802668c:	bd80      	pop	{r7, pc}
 802668e:	bf00      	nop
 8026690:	08026251 	.word	0x08026251
 8026694:	400ffc00 	.word	0x400ffc00
 8026698:	000ffc08 	.word	0x000ffc08
 802669c:	7ffffc0c 	.word	0x7ffffc0c
 80266a0:	080334c4 	.word	0x080334c4
 80266a4:	08034664 	.word	0x08034664
 80266a8:	08033358 	.word	0x08033358
 80266ac:	0803346c 	.word	0x0803346c
 80266b0:	080334ec 	.word	0x080334ec
 80266b4:	08033510 	.word	0x08033510

080266b8 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80266b8:	b590      	push	{r4, r7, lr}
 80266ba:	b097      	sub	sp, #92	; 0x5c
 80266bc:	af0a      	add	r7, sp, #40	; 0x28
 80266be:	60f8      	str	r0, [r7, #12]
 80266c0:	60b9      	str	r1, [r7, #8]
 80266c2:	607a      	str	r2, [r7, #4]
 80266c4:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 80266c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80266ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 80266cc:	e058      	b.n	8026780 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 80266ce:	2300      	movs	r3, #0
 80266d0:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 80266d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80266d4:	b29b      	uxth	r3, r3
 80266d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80266d8:	b292      	uxth	r2, r2
 80266da:	4252      	negs	r2, r2
 80266dc:	b292      	uxth	r2, r2
 80266de:	b212      	sxth	r2, r2
 80266e0:	f107 0118 	add.w	r1, r7, #24
 80266e4:	9108      	str	r1, [sp, #32]
 80266e6:	4979      	ldr	r1, [pc, #484]	; (80268cc <lfs_dir_splittingcompact+0x214>)
 80266e8:	9107      	str	r1, [sp, #28]
 80266ea:	9206      	str	r2, [sp, #24]
 80266ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80266f0:	9205      	str	r2, [sp, #20]
 80266f2:	9304      	str	r3, [sp, #16]
 80266f4:	2300      	movs	r3, #0
 80266f6:	9303      	str	r3, [sp, #12]
 80266f8:	4b75      	ldr	r3, [pc, #468]	; (80268d0 <lfs_dir_splittingcompact+0x218>)
 80266fa:	9302      	str	r3, [sp, #8]
 80266fc:	683b      	ldr	r3, [r7, #0]
 80266fe:	9301      	str	r3, [sp, #4]
 8026700:	687b      	ldr	r3, [r7, #4]
 8026702:	9300      	str	r3, [sp, #0]
 8026704:	f04f 33ff 	mov.w	r3, #4294967295
 8026708:	2200      	movs	r2, #0
 802670a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 802670c:	68f8      	ldr	r0, [r7, #12]
 802670e:	f7fe f933 	bl	8024978 <lfs_dir_traverse>
 8026712:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8026714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026716:	2b00      	cmp	r3, #0
 8026718:	d001      	beq.n	802671e <lfs_dir_splittingcompact+0x66>
                return err;
 802671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802671c:	e0d1      	b.n	80268c2 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 802671e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026724:	1ad3      	subs	r3, r2, r3
 8026726:	2bfe      	cmp	r3, #254	; 0xfe
 8026728:	d822      	bhi.n	8026770 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802672a:	68fb      	ldr	r3, [r7, #12]
 802672c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802672e:	69db      	ldr	r3, [r3, #28]
 8026730:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8026734:	68fb      	ldr	r3, [r7, #12]
 8026736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802673a:	2b00      	cmp	r3, #0
 802673c:	d004      	beq.n	8026748 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 802673e:	68fb      	ldr	r3, [r7, #12]
 8026740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026744:	085b      	lsrs	r3, r3, #1
 8026746:	e003      	b.n	8026750 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8026748:	68fb      	ldr	r3, [r7, #12]
 802674a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802674c:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 802674e:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8026750:	68fa      	ldr	r2, [r7, #12]
 8026752:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026754:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026756:	4611      	mov	r1, r2
 8026758:	4618      	mov	r0, r3
 802675a:	f7fc fee0 	bl	802351e <lfs_alignup>
 802675e:	4603      	mov	r3, r0
 8026760:	4619      	mov	r1, r3
 8026762:	4620      	mov	r0, r4
 8026764:	f7fc feb6 	bl	80234d4 <lfs_min>
 8026768:	4602      	mov	r2, r0
 802676a:	69bb      	ldr	r3, [r7, #24]
 802676c:	429a      	cmp	r2, r3
 802676e:	d20e      	bcs.n	802678e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8026770:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026776:	1ad3      	subs	r3, r2, r3
 8026778:	085b      	lsrs	r3, r3, #1
 802677a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802677c:	4413      	add	r3, r2
 802677e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026780:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026786:	1ad3      	subs	r3, r2, r3
 8026788:	2b01      	cmp	r3, #1
 802678a:	d8a0      	bhi.n	80266ce <lfs_dir_splittingcompact+0x16>
 802678c:	e000      	b.n	8026790 <lfs_dir_splittingcompact+0xd8>
                break;
 802678e:	bf00      	nop
        }

        if (split == begin) {
 8026790:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026796:	429a      	cmp	r2, r3
 8026798:	d02d      	beq.n	80267f6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 802679a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802679c:	b29b      	uxth	r3, r3
 802679e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80267a2:	9202      	str	r2, [sp, #8]
 80267a4:	9301      	str	r3, [sp, #4]
 80267a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80267a8:	9300      	str	r3, [sp, #0]
 80267aa:	683b      	ldr	r3, [r7, #0]
 80267ac:	687a      	ldr	r2, [r7, #4]
 80267ae:	68b9      	ldr	r1, [r7, #8]
 80267b0:	68f8      	ldr	r0, [r7, #12]
 80267b2:	f7ff fce3 	bl	802617c <lfs_dir_split>
 80267b6:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 80267b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80267ba:	2b00      	cmp	r3, #0
 80267bc:	d005      	beq.n	80267ca <lfs_dir_splittingcompact+0x112>
 80267be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80267c0:	f113 0f1c 	cmn.w	r3, #28
 80267c4:	d001      	beq.n	80267ca <lfs_dir_splittingcompact+0x112>
            return err;
 80267c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80267c8:	e07b      	b.n	80268c2 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 80267ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80267cc:	2b00      	cmp	r3, #0
 80267ce:	d00e      	beq.n	80267ee <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 80267d0:	68bb      	ldr	r3, [r7, #8]
 80267d2:	681a      	ldr	r2, [r3, #0]
 80267d4:	68bb      	ldr	r3, [r7, #8]
 80267d6:	685b      	ldr	r3, [r3, #4]
 80267d8:	493e      	ldr	r1, [pc, #248]	; (80268d4 <lfs_dir_splittingcompact+0x21c>)
 80267da:	9101      	str	r1, [sp, #4]
 80267dc:	9300      	str	r3, [sp, #0]
 80267de:	4613      	mov	r3, r2
 80267e0:	f240 72a9 	movw	r2, #1961	; 0x7a9
 80267e4:	493c      	ldr	r1, [pc, #240]	; (80268d8 <lfs_dir_splittingcompact+0x220>)
 80267e6:	483d      	ldr	r0, [pc, #244]	; (80268dc <lfs_dir_splittingcompact+0x224>)
 80267e8:	f006 fdf2 	bl	802d3d0 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 80267ec:	e004      	b.n	80267f8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 80267ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80267f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 80267f4:	e767      	b.n	80266c6 <lfs_dir_splittingcompact+0xe>
            break;
 80267f6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 80267f8:	68b9      	ldr	r1, [r7, #8]
 80267fa:	68f8      	ldr	r0, [r7, #12]
 80267fc:	f7ff fd3d 	bl	802627a <lfs_dir_needsrelocation>
 8026800:	4603      	mov	r3, r0
 8026802:	2b00      	cmp	r3, #0
 8026804:	d04e      	beq.n	80268a4 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026806:	68bb      	ldr	r3, [r7, #8]
 8026808:	2200      	movs	r2, #0
 802680a:	613a      	str	r2, [r7, #16]
 802680c:	2201      	movs	r2, #1
 802680e:	617a      	str	r2, [r7, #20]
 8026810:	f107 0210 	add.w	r2, r7, #16
 8026814:	4611      	mov	r1, r2
 8026816:	4618      	mov	r0, r3
 8026818:	f7fd fa8c 	bl	8023d34 <lfs_pair_cmp>
 802681c:	4603      	mov	r3, r0
 802681e:	2b00      	cmp	r3, #0
 8026820:	d140      	bne.n	80268a4 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8026822:	68f8      	ldr	r0, [r7, #12]
 8026824:	f003 fe4c 	bl	802a4c0 <lfs_fs_rawsize>
 8026828:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 802682a:	6a3b      	ldr	r3, [r7, #32]
 802682c:	2b00      	cmp	r3, #0
 802682e:	da01      	bge.n	8026834 <lfs_dir_splittingcompact+0x17c>
            return size;
 8026830:	6a3b      	ldr	r3, [r7, #32]
 8026832:	e046      	b.n	80268c2 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8026834:	68fb      	ldr	r3, [r7, #12]
 8026836:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026838:	6a1b      	ldr	r3, [r3, #32]
 802683a:	085a      	lsrs	r2, r3, #1
 802683c:	6a3b      	ldr	r3, [r7, #32]
 802683e:	429a      	cmp	r2, r3
 8026840:	d930      	bls.n	80268a4 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8026842:	68bb      	ldr	r3, [r7, #8]
 8026844:	689b      	ldr	r3, [r3, #8]
 8026846:	4a23      	ldr	r2, [pc, #140]	; (80268d4 <lfs_dir_splittingcompact+0x21c>)
 8026848:	9200      	str	r2, [sp, #0]
 802684a:	f240 72bd 	movw	r2, #1981	; 0x7bd
 802684e:	4922      	ldr	r1, [pc, #136]	; (80268d8 <lfs_dir_splittingcompact+0x220>)
 8026850:	4823      	ldr	r0, [pc, #140]	; (80268e0 <lfs_dir_splittingcompact+0x228>)
 8026852:	f006 fdbd 	bl	802d3d0 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026856:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802685a:	9302      	str	r3, [sp, #8]
 802685c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026860:	9301      	str	r3, [sp, #4]
 8026862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026864:	9300      	str	r3, [sp, #0]
 8026866:	683b      	ldr	r3, [r7, #0]
 8026868:	687a      	ldr	r2, [r7, #4]
 802686a:	68b9      	ldr	r1, [r7, #8]
 802686c:	68f8      	ldr	r0, [r7, #12]
 802686e:	f7ff fc85 	bl	802617c <lfs_dir_split>
 8026872:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026874:	69fb      	ldr	r3, [r7, #28]
 8026876:	2b00      	cmp	r3, #0
 8026878:	d005      	beq.n	8026886 <lfs_dir_splittingcompact+0x1ce>
 802687a:	69fb      	ldr	r3, [r7, #28]
 802687c:	f113 0f1c 	cmn.w	r3, #28
 8026880:	d001      	beq.n	8026886 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026882:	69fb      	ldr	r3, [r7, #28]
 8026884:	e01d      	b.n	80268c2 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026886:	69fb      	ldr	r3, [r7, #28]
 8026888:	2b00      	cmp	r3, #0
 802688a:	d007      	beq.n	802689c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 802688c:	4b11      	ldr	r3, [pc, #68]	; (80268d4 <lfs_dir_splittingcompact+0x21c>)
 802688e:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8026892:	4911      	ldr	r1, [pc, #68]	; (80268d8 <lfs_dir_splittingcompact+0x220>)
 8026894:	4813      	ldr	r0, [pc, #76]	; (80268e4 <lfs_dir_splittingcompact+0x22c>)
 8026896:	f006 fd9b 	bl	802d3d0 <iprintf>
 802689a:	e003      	b.n	80268a4 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 802689c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80268a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 80268a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80268a8:	9302      	str	r3, [sp, #8]
 80268aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80268ae:	9301      	str	r3, [sp, #4]
 80268b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80268b2:	9300      	str	r3, [sp, #0]
 80268b4:	683b      	ldr	r3, [r7, #0]
 80268b6:	687a      	ldr	r2, [r7, #4]
 80268b8:	68b9      	ldr	r1, [r7, #8]
 80268ba:	68f8      	ldr	r0, [r7, #12]
 80268bc:	f7ff fd04 	bl	80262c8 <lfs_dir_compact>
 80268c0:	4603      	mov	r3, r0
}
 80268c2:	4618      	mov	r0, r3
 80268c4:	3734      	adds	r7, #52	; 0x34
 80268c6:	46bd      	mov	sp, r7
 80268c8:	bd90      	pop	{r4, r7, pc}
 80268ca:	bf00      	nop
 80268cc:	08026225 	.word	0x08026225
 80268d0:	400ffc00 	.word	0x400ffc00
 80268d4:	0803346c 	.word	0x0803346c
 80268d8:	08033358 	.word	0x08033358
 80268dc:	08033548 	.word	0x08033548
 80268e0:	08033578 	.word	0x08033578
 80268e4:	080335a8 	.word	0x080335a8

080268e8 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 80268e8:	b5b0      	push	{r4, r5, r7, lr}
 80268ea:	b0a6      	sub	sp, #152	; 0x98
 80268ec:	af0a      	add	r7, sp, #40	; 0x28
 80268ee:	60f8      	str	r0, [r7, #12]
 80268f0:	60b9      	str	r1, [r7, #8]
 80268f2:	607a      	str	r2, [r7, #4]
 80268f4:	603b      	str	r3, [r7, #0]
    int state = 0;
 80268f6:	2300      	movs	r3, #0
 80268f8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 80268fa:	2300      	movs	r3, #0
 80268fc:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8026900:	2300      	movs	r3, #0
 8026902:	667b      	str	r3, [r7, #100]	; 0x64
 8026904:	e06d      	b.n	80269e2 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8026906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026908:	00db      	lsls	r3, r3, #3
 802690a:	683a      	ldr	r2, [r7, #0]
 802690c:	4413      	add	r3, r2
 802690e:	681b      	ldr	r3, [r3, #0]
 8026910:	4618      	mov	r0, r3
 8026912:	f7fd facb 	bl	8023eac <lfs_tag_type3>
 8026916:	4603      	mov	r3, r0
 8026918:	461a      	mov	r2, r3
 802691a:	f240 4301 	movw	r3, #1025	; 0x401
 802691e:	429a      	cmp	r2, r3
 8026920:	d106      	bne.n	8026930 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8026922:	68bb      	ldr	r3, [r7, #8]
 8026924:	8a9b      	ldrh	r3, [r3, #20]
 8026926:	3301      	adds	r3, #1
 8026928:	b29a      	uxth	r2, r3
 802692a:	68bb      	ldr	r3, [r7, #8]
 802692c:	829a      	strh	r2, [r3, #20]
 802692e:	e055      	b.n	80269dc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8026930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026932:	00db      	lsls	r3, r3, #3
 8026934:	683a      	ldr	r2, [r7, #0]
 8026936:	4413      	add	r3, r2
 8026938:	681b      	ldr	r3, [r3, #0]
 802693a:	4618      	mov	r0, r3
 802693c:	f7fd fab6 	bl	8023eac <lfs_tag_type3>
 8026940:	4603      	mov	r3, r0
 8026942:	461a      	mov	r2, r3
 8026944:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026948:	429a      	cmp	r2, r3
 802694a:	d114      	bne.n	8026976 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 802694c:	68bb      	ldr	r3, [r7, #8]
 802694e:	8a9b      	ldrh	r3, [r3, #20]
 8026950:	2b00      	cmp	r3, #0
 8026952:	d106      	bne.n	8026962 <lfs_dir_relocatingcommit+0x7a>
 8026954:	4ba4      	ldr	r3, [pc, #656]	; (8026be8 <lfs_dir_relocatingcommit+0x300>)
 8026956:	4aa5      	ldr	r2, [pc, #660]	; (8026bec <lfs_dir_relocatingcommit+0x304>)
 8026958:	f240 71df 	movw	r1, #2015	; 0x7df
 802695c:	48a4      	ldr	r0, [pc, #656]	; (8026bf0 <lfs_dir_relocatingcommit+0x308>)
 802695e:	f005 fcfd 	bl	802c35c <__assert_func>
            dir->count -= 1;
 8026962:	68bb      	ldr	r3, [r7, #8]
 8026964:	8a9b      	ldrh	r3, [r3, #20]
 8026966:	3b01      	subs	r3, #1
 8026968:	b29a      	uxth	r2, r3
 802696a:	68bb      	ldr	r3, [r7, #8]
 802696c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 802696e:	2301      	movs	r3, #1
 8026970:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8026974:	e032      	b.n	80269dc <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026978:	00db      	lsls	r3, r3, #3
 802697a:	683a      	ldr	r2, [r7, #0]
 802697c:	4413      	add	r3, r2
 802697e:	681b      	ldr	r3, [r3, #0]
 8026980:	4618      	mov	r0, r3
 8026982:	f7fd fa83 	bl	8023e8c <lfs_tag_type1>
 8026986:	4603      	mov	r3, r0
 8026988:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802698c:	d126      	bne.n	80269dc <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 802698e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026990:	00db      	lsls	r3, r3, #3
 8026992:	683a      	ldr	r2, [r7, #0]
 8026994:	4413      	add	r3, r2
 8026996:	685b      	ldr	r3, [r3, #4]
 8026998:	681a      	ldr	r2, [r3, #0]
 802699a:	68bb      	ldr	r3, [r7, #8]
 802699c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 802699e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80269a0:	00db      	lsls	r3, r3, #3
 80269a2:	683a      	ldr	r2, [r7, #0]
 80269a4:	4413      	add	r3, r2
 80269a6:	685b      	ldr	r3, [r3, #4]
 80269a8:	685a      	ldr	r2, [r3, #4]
 80269aa:	68bb      	ldr	r3, [r7, #8]
 80269ac:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 80269ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80269b0:	00db      	lsls	r3, r3, #3
 80269b2:	683a      	ldr	r2, [r7, #0]
 80269b4:	4413      	add	r3, r2
 80269b6:	681b      	ldr	r3, [r3, #0]
 80269b8:	4618      	mov	r0, r3
 80269ba:	f7fd fa87 	bl	8023ecc <lfs_tag_chunk>
 80269be:	4603      	mov	r3, r0
 80269c0:	f003 0301 	and.w	r3, r3, #1
 80269c4:	2b00      	cmp	r3, #0
 80269c6:	bf14      	ite	ne
 80269c8:	2301      	movne	r3, #1
 80269ca:	2300      	moveq	r3, #0
 80269cc:	b2da      	uxtb	r2, r3
 80269ce:	68bb      	ldr	r3, [r7, #8]
 80269d0:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 80269d2:	68bb      	ldr	r3, [r7, #8]
 80269d4:	3318      	adds	r3, #24
 80269d6:	4618      	mov	r0, r3
 80269d8:	f7fd fa03 	bl	8023de2 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 80269dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80269de:	3301      	adds	r3, #1
 80269e0:	667b      	str	r3, [r7, #100]	; 0x64
 80269e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80269e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80269e8:	429a      	cmp	r2, r3
 80269ea:	db8c      	blt.n	8026906 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 80269ec:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80269f0:	2b00      	cmp	r3, #0
 80269f2:	d02b      	beq.n	8026a4c <lfs_dir_relocatingcommit+0x164>
 80269f4:	68bb      	ldr	r3, [r7, #8]
 80269f6:	8a9b      	ldrh	r3, [r3, #20]
 80269f8:	2b00      	cmp	r3, #0
 80269fa:	d127      	bne.n	8026a4c <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 80269fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026a00:	2b00      	cmp	r3, #0
 8026a02:	d106      	bne.n	8026a12 <lfs_dir_relocatingcommit+0x12a>
 8026a04:	4b7b      	ldr	r3, [pc, #492]	; (8026bf4 <lfs_dir_relocatingcommit+0x30c>)
 8026a06:	4a79      	ldr	r2, [pc, #484]	; (8026bec <lfs_dir_relocatingcommit+0x304>)
 8026a08:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8026a0c:	4878      	ldr	r0, [pc, #480]	; (8026bf0 <lfs_dir_relocatingcommit+0x308>)
 8026a0e:	f005 fca5 	bl	802c35c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8026a12:	68bb      	ldr	r3, [r7, #8]
 8026a14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026a18:	4619      	mov	r1, r3
 8026a1a:	68f8      	ldr	r0, [r7, #12]
 8026a1c:	f003 f9c2 	bl	8029da4 <lfs_fs_pred>
 8026a20:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8026a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026a24:	2b00      	cmp	r3, #0
 8026a26:	d005      	beq.n	8026a34 <lfs_dir_relocatingcommit+0x14c>
 8026a28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026a2a:	f113 0f02 	cmn.w	r3, #2
 8026a2e:	d001      	beq.n	8026a34 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8026a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026a32:	e204      	b.n	8026e3e <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8026a34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026a36:	f113 0f02 	cmn.w	r3, #2
 8026a3a:	d007      	beq.n	8026a4c <lfs_dir_relocatingcommit+0x164>
 8026a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026a40:	7ddb      	ldrb	r3, [r3, #23]
 8026a42:	2b00      	cmp	r3, #0
 8026a44:	d002      	beq.n	8026a4c <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8026a46:	2302      	movs	r3, #2
 8026a48:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8026a4a:	e121      	b.n	8026c90 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8026a4c:	68bb      	ldr	r3, [r7, #8]
 8026a4e:	7d9b      	ldrb	r3, [r3, #22]
 8026a50:	2b00      	cmp	r3, #0
 8026a52:	f000 80fb 	beq.w	8026c4c <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026a56:	68bb      	ldr	r3, [r7, #8]
 8026a58:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8026a5a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8026a5c:	68bb      	ldr	r3, [r7, #8]
 8026a5e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026a60:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8026a62:	68bb      	ldr	r3, [r7, #8]
 8026a64:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026a66:	63bb      	str	r3, [r7, #56]	; 0x38
 8026a68:	f04f 33ff 	mov.w	r3, #4294967295
 8026a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8026a6e:	68bb      	ldr	r3, [r7, #8]
 8026a70:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026a72:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8026a74:	68fb      	ldr	r3, [r7, #12]
 8026a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026a7a:	2b00      	cmp	r3, #0
 8026a7c:	d004      	beq.n	8026a88 <lfs_dir_relocatingcommit+0x1a0>
 8026a7e:	68fb      	ldr	r3, [r7, #12]
 8026a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026a84:	3b08      	subs	r3, #8
 8026a86:	e003      	b.n	8026a90 <lfs_dir_relocatingcommit+0x1a8>
 8026a88:	68fb      	ldr	r3, [r7, #12]
 8026a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026a8c:	69db      	ldr	r3, [r3, #28]
 8026a8e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026a90:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026a92:	68bb      	ldr	r3, [r7, #8]
 8026a94:	3318      	adds	r3, #24
 8026a96:	4618      	mov	r0, r3
 8026a98:	f7fd f9bd 	bl	8023e16 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8026a9c:	68bb      	ldr	r3, [r7, #8]
 8026a9e:	68da      	ldr	r2, [r3, #12]
 8026aa0:	68bb      	ldr	r3, [r7, #8]
 8026aa2:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026aa4:	68fb      	ldr	r3, [r7, #12]
 8026aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8026aa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8026aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026ab2:	9308      	str	r3, [sp, #32]
 8026ab4:	4b50      	ldr	r3, [pc, #320]	; (8026bf8 <lfs_dir_relocatingcommit+0x310>)
 8026ab6:	9307      	str	r3, [sp, #28]
 8026ab8:	2300      	movs	r3, #0
 8026aba:	9306      	str	r3, [sp, #24]
 8026abc:	2300      	movs	r3, #0
 8026abe:	9305      	str	r3, [sp, #20]
 8026ac0:	2300      	movs	r3, #0
 8026ac2:	9304      	str	r3, [sp, #16]
 8026ac4:	2300      	movs	r3, #0
 8026ac6:	9303      	str	r3, [sp, #12]
 8026ac8:	2300      	movs	r3, #0
 8026aca:	9302      	str	r3, [sp, #8]
 8026acc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026ad0:	9301      	str	r3, [sp, #4]
 8026ad2:	683b      	ldr	r3, [r7, #0]
 8026ad4:	9300      	str	r3, [sp, #0]
 8026ad6:	460b      	mov	r3, r1
 8026ad8:	68b9      	ldr	r1, [r7, #8]
 8026ada:	68f8      	ldr	r0, [r7, #12]
 8026adc:	f7fd ff4c 	bl	8024978 <lfs_dir_traverse>
 8026ae0:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026ae2:	68bb      	ldr	r3, [r7, #8]
 8026ae4:	3318      	adds	r3, #24
 8026ae6:	4618      	mov	r0, r3
 8026ae8:	f7fd f97b 	bl	8023de2 <lfs_pair_fromle32>
        if (err) {
 8026aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026aee:	2b00      	cmp	r3, #0
 8026af0:	d00b      	beq.n	8026b0a <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026af4:	f113 0f1c 	cmn.w	r3, #28
 8026af8:	f000 80aa 	beq.w	8026c50 <lfs_dir_relocatingcommit+0x368>
 8026afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026afe:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026b02:	f000 80a5 	beq.w	8026c50 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8026b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b08:	e199      	b.n	8026e3e <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8026b0a:	f107 031c 	add.w	r3, r7, #28
 8026b0e:	2200      	movs	r2, #0
 8026b10:	601a      	str	r2, [r3, #0]
 8026b12:	605a      	str	r2, [r3, #4]
 8026b14:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026b16:	68fb      	ldr	r3, [r7, #12]
 8026b18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8026b1c:	f107 031c 	add.w	r3, r7, #28
 8026b20:	4611      	mov	r1, r2
 8026b22:	4618      	mov	r0, r3
 8026b24:	f7fd fa1d 	bl	8023f62 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026b28:	68fb      	ldr	r3, [r7, #12]
 8026b2a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026b2e:	f107 031c 	add.w	r3, r7, #28
 8026b32:	4611      	mov	r1, r2
 8026b34:	4618      	mov	r0, r3
 8026b36:	f7fd fa14 	bl	8023f62 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8026b3a:	68fb      	ldr	r3, [r7, #12]
 8026b3c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8026b40:	f107 031c 	add.w	r3, r7, #28
 8026b44:	4611      	mov	r1, r2
 8026b46:	4618      	mov	r0, r3
 8026b48:	f7fd fa0b 	bl	8023f62 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026b4c:	69fb      	ldr	r3, [r7, #28]
 8026b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026b52:	f023 0303 	bic.w	r3, r3, #3
 8026b56:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8026b58:	f107 031c 	add.w	r3, r7, #28
 8026b5c:	4618      	mov	r0, r3
 8026b5e:	f7fd fa25 	bl	8023fac <lfs_gstate_iszero>
 8026b62:	4603      	mov	r3, r0
 8026b64:	f083 0301 	eor.w	r3, r3, #1
 8026b68:	b2db      	uxtb	r3, r3
 8026b6a:	2b00      	cmp	r3, #0
 8026b6c:	d027      	beq.n	8026bbe <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026b6e:	f107 031c 	add.w	r3, r7, #28
 8026b72:	461a      	mov	r2, r3
 8026b74:	68b9      	ldr	r1, [r7, #8]
 8026b76:	68f8      	ldr	r0, [r7, #12]
 8026b78:	f7fe fe68 	bl	802584c <lfs_dir_getgstate>
 8026b7c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8026b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b80:	2b00      	cmp	r3, #0
 8026b82:	d001      	beq.n	8026b88 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8026b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026b86:	e15a      	b.n	8026e3e <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8026b88:	f107 031c 	add.w	r3, r7, #28
 8026b8c:	4618      	mov	r0, r3
 8026b8e:	f7fd fa9f 	bl	80240d0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8026b92:	f107 031c 	add.w	r3, r7, #28
 8026b96:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8026b9a:	4a18      	ldr	r2, [pc, #96]	; (8026bfc <lfs_dir_relocatingcommit+0x314>)
 8026b9c:	68f8      	ldr	r0, [r7, #12]
 8026b9e:	f7ff f87b 	bl	8025c98 <lfs_dir_commitattr>
 8026ba2:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8026ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ba6:	2b00      	cmp	r3, #0
 8026ba8:	d009      	beq.n	8026bbe <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bac:	f113 0f1c 	cmn.w	r3, #28
 8026bb0:	d050      	beq.n	8026c54 <lfs_dir_relocatingcommit+0x36c>
 8026bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bb4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026bb8:	d04c      	beq.n	8026c54 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8026bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bbc:	e13f      	b.n	8026e3e <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8026bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026bc2:	4619      	mov	r1, r3
 8026bc4:	68f8      	ldr	r0, [r7, #12]
 8026bc6:	f7ff f8e7 	bl	8025d98 <lfs_dir_commitcrc>
 8026bca:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8026bcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bce:	2b00      	cmp	r3, #0
 8026bd0:	d016      	beq.n	8026c00 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bd4:	f113 0f1c 	cmn.w	r3, #28
 8026bd8:	d03e      	beq.n	8026c58 <lfs_dir_relocatingcommit+0x370>
 8026bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026bdc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026be0:	d03a      	beq.n	8026c58 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8026be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026be4:	e12b      	b.n	8026e3e <lfs_dir_relocatingcommit+0x556>
 8026be6:	bf00      	nop
 8026be8:	080335d4 	.word	0x080335d4
 8026bec:	08034674 	.word	0x08034674
 8026bf0:	08033358 	.word	0x08033358
 8026bf4:	080335e4 	.word	0x080335e4
 8026bf8:	08026251 	.word	0x08026251
 8026bfc:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026c02:	68fa      	ldr	r2, [r7, #12]
 8026c04:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026c06:	6992      	ldr	r2, [r2, #24]
 8026c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8026c0c:	fb01 f202 	mul.w	r2, r1, r2
 8026c10:	1a9b      	subs	r3, r3, r2
 8026c12:	2b00      	cmp	r3, #0
 8026c14:	d006      	beq.n	8026c24 <lfs_dir_relocatingcommit+0x33c>
 8026c16:	4b8c      	ldr	r3, [pc, #560]	; (8026e48 <lfs_dir_relocatingcommit+0x560>)
 8026c18:	4a8c      	ldr	r2, [pc, #560]	; (8026e4c <lfs_dir_relocatingcommit+0x564>)
 8026c1a:	f640 0136 	movw	r1, #2102	; 0x836
 8026c1e:	488c      	ldr	r0, [pc, #560]	; (8026e50 <lfs_dir_relocatingcommit+0x568>)
 8026c20:	f005 fb9c 	bl	802c35c <__assert_func>
        dir->off = commit.off;
 8026c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026c26:	68bb      	ldr	r3, [r7, #8]
 8026c28:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8026c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026c2c:	68bb      	ldr	r3, [r7, #8]
 8026c2e:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8026c30:	68fb      	ldr	r3, [r7, #12]
 8026c32:	68fa      	ldr	r2, [r7, #12]
 8026c34:	333c      	adds	r3, #60	; 0x3c
 8026c36:	3230      	adds	r2, #48	; 0x30
 8026c38:	ca07      	ldmia	r2, {r0, r1, r2}
 8026c3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8026c3e:	68fb      	ldr	r3, [r7, #12]
 8026c40:	3348      	adds	r3, #72	; 0x48
 8026c42:	2200      	movs	r2, #0
 8026c44:	601a      	str	r2, [r3, #0]
 8026c46:	605a      	str	r2, [r3, #4]
 8026c48:	609a      	str	r2, [r3, #8]
 8026c4a:	e021      	b.n	8026c90 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8026c4c:	bf00      	nop
 8026c4e:	e004      	b.n	8026c5a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026c50:	bf00      	nop
 8026c52:	e002      	b.n	8026c5a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8026c54:	bf00      	nop
 8026c56:	e000      	b.n	8026c5a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8026c58:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 8026c5a:	68fb      	ldr	r3, [r7, #12]
 8026c5c:	3310      	adds	r3, #16
 8026c5e:	4619      	mov	r1, r3
 8026c60:	68f8      	ldr	r0, [r7, #12]
 8026c62:	f7fc fced 	bl	8023640 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8026c66:	68bb      	ldr	r3, [r7, #8]
 8026c68:	8a9b      	ldrh	r3, [r3, #20]
 8026c6a:	9302      	str	r3, [sp, #8]
 8026c6c:	2300      	movs	r3, #0
 8026c6e:	9301      	str	r3, [sp, #4]
 8026c70:	68bb      	ldr	r3, [r7, #8]
 8026c72:	9300      	str	r3, [sp, #0]
 8026c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026c78:	683a      	ldr	r2, [r7, #0]
 8026c7a:	68b9      	ldr	r1, [r7, #8]
 8026c7c:	68f8      	ldr	r0, [r7, #12]
 8026c7e:	f7ff fd1b 	bl	80266b8 <lfs_dir_splittingcompact>
 8026c82:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8026c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026c86:	2b00      	cmp	r3, #0
 8026c88:	da01      	bge.n	8026c8e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 8026c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026c8c:	e0d7      	b.n	8026e3e <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 8026c8e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8026c90:	687b      	ldr	r3, [r7, #4]
 8026c92:	681b      	ldr	r3, [r3, #0]
 8026c94:	64bb      	str	r3, [r7, #72]	; 0x48
 8026c96:	687b      	ldr	r3, [r7, #4]
 8026c98:	3304      	adds	r3, #4
 8026c9a:	681b      	ldr	r3, [r3, #0]
 8026c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026c9e:	68fb      	ldr	r3, [r7, #12]
 8026ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8026ca4:	e0c6      	b.n	8026e34 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8026ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026ca8:	3308      	adds	r3, #8
 8026caa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8026cae:	4611      	mov	r1, r2
 8026cb0:	4618      	mov	r0, r3
 8026cb2:	f7fd f83f 	bl	8023d34 <lfs_pair_cmp>
 8026cb6:	4603      	mov	r3, r0
 8026cb8:	2b00      	cmp	r3, #0
 8026cba:	f040 80b8 	bne.w	8026e2e <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 8026cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026cc0:	68ba      	ldr	r2, [r7, #8]
 8026cc2:	f103 0408 	add.w	r4, r3, #8
 8026cc6:	4615      	mov	r5, r2
 8026cc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026ccc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8026cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026cd6:	3308      	adds	r3, #8
 8026cd8:	687a      	ldr	r2, [r7, #4]
 8026cda:	429a      	cmp	r2, r3
 8026cdc:	f000 809d 	beq.w	8026e1a <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8026ce0:	2300      	movs	r3, #0
 8026ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026ce4:	e07b      	b.n	8026dde <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026ce8:	00db      	lsls	r3, r3, #3
 8026cea:	683a      	ldr	r2, [r7, #0]
 8026cec:	4413      	add	r3, r2
 8026cee:	681b      	ldr	r3, [r3, #0]
 8026cf0:	4618      	mov	r0, r3
 8026cf2:	f7fd f8db 	bl	8023eac <lfs_tag_type3>
 8026cf6:	4603      	mov	r3, r0
 8026cf8:	461a      	mov	r2, r3
 8026cfa:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026cfe:	429a      	cmp	r2, r3
 8026d00:	d115      	bne.n	8026d2e <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 8026d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d04:	889c      	ldrh	r4, [r3, #4]
 8026d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d08:	00db      	lsls	r3, r3, #3
 8026d0a:	683a      	ldr	r2, [r7, #0]
 8026d0c:	4413      	add	r3, r2
 8026d0e:	681b      	ldr	r3, [r3, #0]
 8026d10:	4618      	mov	r0, r3
 8026d12:	f7fd f8f5 	bl	8023f00 <lfs_tag_id>
 8026d16:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026d18:	429c      	cmp	r4, r3
 8026d1a:	d108      	bne.n	8026d2e <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 8026d1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8026d22:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 8026d24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d26:	f04f 32ff 	mov.w	r2, #4294967295
 8026d2a:	60da      	str	r2, [r3, #12]
 8026d2c:	e054      	b.n	8026dd8 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d30:	00db      	lsls	r3, r3, #3
 8026d32:	683a      	ldr	r2, [r7, #0]
 8026d34:	4413      	add	r3, r2
 8026d36:	681b      	ldr	r3, [r3, #0]
 8026d38:	4618      	mov	r0, r3
 8026d3a:	f7fd f8b7 	bl	8023eac <lfs_tag_type3>
 8026d3e:	4603      	mov	r3, r0
 8026d40:	461a      	mov	r2, r3
 8026d42:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026d46:	429a      	cmp	r2, r3
 8026d48:	d11c      	bne.n	8026d84 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 8026d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d4c:	889c      	ldrh	r4, [r3, #4]
 8026d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d50:	00db      	lsls	r3, r3, #3
 8026d52:	683a      	ldr	r2, [r7, #0]
 8026d54:	4413      	add	r3, r2
 8026d56:	681b      	ldr	r3, [r3, #0]
 8026d58:	4618      	mov	r0, r3
 8026d5a:	f7fd f8d1 	bl	8023f00 <lfs_tag_id>
 8026d5e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8026d60:	429c      	cmp	r4, r3
 8026d62:	d90f      	bls.n	8026d84 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8026d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d66:	889b      	ldrh	r3, [r3, #4]
 8026d68:	3b01      	subs	r3, #1
 8026d6a:	b29a      	uxth	r2, r3
 8026d6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d6e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d72:	799b      	ldrb	r3, [r3, #6]
 8026d74:	2b02      	cmp	r3, #2
 8026d76:	d12f      	bne.n	8026dd8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8026d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026d7c:	1e5a      	subs	r2, r3, #1
 8026d7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026d80:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8026d82:	e029      	b.n	8026dd8 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026d86:	00db      	lsls	r3, r3, #3
 8026d88:	683a      	ldr	r2, [r7, #0]
 8026d8a:	4413      	add	r3, r2
 8026d8c:	681b      	ldr	r3, [r3, #0]
 8026d8e:	4618      	mov	r0, r3
 8026d90:	f7fd f88c 	bl	8023eac <lfs_tag_type3>
 8026d94:	4603      	mov	r3, r0
 8026d96:	461a      	mov	r2, r3
 8026d98:	f240 4301 	movw	r3, #1025	; 0x401
 8026d9c:	429a      	cmp	r2, r3
 8026d9e:	d11b      	bne.n	8026dd8 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8026da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026da2:	889c      	ldrh	r4, [r3, #4]
 8026da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026da6:	00db      	lsls	r3, r3, #3
 8026da8:	683a      	ldr	r2, [r7, #0]
 8026daa:	4413      	add	r3, r2
 8026dac:	681b      	ldr	r3, [r3, #0]
 8026dae:	4618      	mov	r0, r3
 8026db0:	f7fd f8a6 	bl	8023f00 <lfs_tag_id>
 8026db4:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8026db6:	429c      	cmp	r4, r3
 8026db8:	d30e      	bcc.n	8026dd8 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 8026dba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dbc:	889b      	ldrh	r3, [r3, #4]
 8026dbe:	3301      	adds	r3, #1
 8026dc0:	b29a      	uxth	r2, r3
 8026dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dc4:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8026dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dc8:	799b      	ldrb	r3, [r3, #6]
 8026dca:	2b02      	cmp	r3, #2
 8026dcc:	d104      	bne.n	8026dd8 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 8026dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026dd2:	1c5a      	adds	r2, r3, #1
 8026dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dd6:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8026dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026dda:	3301      	adds	r3, #1
 8026ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8026dde:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8026de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026de4:	429a      	cmp	r2, r3
 8026de6:	f6ff af7e 	blt.w	8026ce6 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8026dea:	e016      	b.n	8026e1a <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 8026dec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dee:	889a      	ldrh	r2, [r3, #4]
 8026df0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026df2:	8b9b      	ldrh	r3, [r3, #28]
 8026df4:	1ad3      	subs	r3, r2, r3
 8026df6:	b29a      	uxth	r2, r3
 8026df8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dfa:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8026dfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026dfe:	f103 0108 	add.w	r1, r3, #8
 8026e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e04:	3320      	adds	r3, #32
 8026e06:	461a      	mov	r2, r3
 8026e08:	68f8      	ldr	r0, [r7, #12]
 8026e0a:	f7fe fd03 	bl	8025814 <lfs_dir_fetch>
 8026e0e:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 8026e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026e12:	2b00      	cmp	r3, #0
 8026e14:	d001      	beq.n	8026e1a <lfs_dir_relocatingcommit+0x532>
                    return err;
 8026e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8026e18:	e011      	b.n	8026e3e <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 8026e1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e1c:	889a      	ldrh	r2, [r3, #4]
 8026e1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e20:	8b9b      	ldrh	r3, [r3, #28]
 8026e22:	429a      	cmp	r2, r3
 8026e24:	d303      	bcc.n	8026e2e <lfs_dir_relocatingcommit+0x546>
 8026e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e28:	7fdb      	ldrb	r3, [r3, #31]
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	d1de      	bne.n	8026dec <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8026e2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e30:	681b      	ldr	r3, [r3, #0]
 8026e32:	663b      	str	r3, [r7, #96]	; 0x60
 8026e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026e36:	2b00      	cmp	r3, #0
 8026e38:	f47f af35 	bne.w	8026ca6 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 8026e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8026e3e:	4618      	mov	r0, r3
 8026e40:	3770      	adds	r7, #112	; 0x70
 8026e42:	46bd      	mov	sp, r7
 8026e44:	bdb0      	pop	{r4, r5, r7, pc}
 8026e46:	bf00      	nop
 8026e48:	080334c4 	.word	0x080334c4
 8026e4c:	08034674 	.word	0x08034674
 8026e50:	08033358 	.word	0x08033358

08026e54 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8026e54:	b5b0      	push	{r4, r5, r7, lr}
 8026e56:	b0bc      	sub	sp, #240	; 0xf0
 8026e58:	af04      	add	r7, sp, #16
 8026e5a:	60f8      	str	r0, [r7, #12]
 8026e5c:	60b9      	str	r1, [r7, #8]
 8026e5e:	607a      	str	r2, [r7, #4]
 8026e60:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026e62:	68fb      	ldr	r3, [r7, #12]
 8026e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8026e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026e6a:	e045      	b.n	8026ef8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e70:	3308      	adds	r3, #8
 8026e72:	68ba      	ldr	r2, [r7, #8]
 8026e74:	429a      	cmp	r2, r3
 8026e76:	d03a      	beq.n	8026eee <lfs_dir_orphaningcommit+0x9a>
 8026e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e7c:	3308      	adds	r3, #8
 8026e7e:	68ba      	ldr	r2, [r7, #8]
 8026e80:	4611      	mov	r1, r2
 8026e82:	4618      	mov	r0, r3
 8026e84:	f7fc ff56 	bl	8023d34 <lfs_pair_cmp>
 8026e88:	4603      	mov	r3, r0
 8026e8a:	2b00      	cmp	r3, #0
 8026e8c:	d12f      	bne.n	8026eee <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e92:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8026e94:	2b01      	cmp	r3, #1
 8026e96:	d12a      	bne.n	8026eee <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026e98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8026e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8026ea2:	2b00      	cmp	r3, #0
 8026ea4:	d023      	beq.n	8026eee <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8026ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8026eac:	68fb      	ldr	r3, [r7, #12]
 8026eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8026eb2:	429a      	cmp	r2, r3
 8026eb4:	d91b      	bls.n	8026eee <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8026eb6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026eba:	68f8      	ldr	r0, [r7, #12]
 8026ebc:	f001 fa26 	bl	802830c <lfs_file_outline>
 8026ec0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026ec4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026ec8:	2b00      	cmp	r3, #0
 8026eca:	d002      	beq.n	8026ed2 <lfs_dir_orphaningcommit+0x7e>
                return err;
 8026ecc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026ed0:	e2ad      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8026ed2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8026ed6:	68f8      	ldr	r0, [r7, #12]
 8026ed8:	f001 fa3a 	bl	8028350 <lfs_file_flush>
 8026edc:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8026ee0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026ee4:	2b00      	cmp	r3, #0
 8026ee6:	d002      	beq.n	8026eee <lfs_dir_orphaningcommit+0x9a>
                return err;
 8026ee8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8026eec:	e29f      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8026eee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026ef2:	681b      	ldr	r3, [r3, #0]
 8026ef4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8026ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8026efc:	2b00      	cmp	r3, #0
 8026efe:	d1b5      	bne.n	8026e6c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 8026f00:	68bb      	ldr	r3, [r7, #8]
 8026f02:	681b      	ldr	r3, [r3, #0]
 8026f04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8026f08:	68bb      	ldr	r3, [r7, #8]
 8026f0a:	685b      	ldr	r3, [r3, #4]
 8026f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 8026f10:	68bb      	ldr	r3, [r7, #8]
 8026f12:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026f16:	461d      	mov	r5, r3
 8026f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8026f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8026f1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8026f20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 8026f24:	68ba      	ldr	r2, [r7, #8]
 8026f26:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8026f2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8026f2e:	9301      	str	r3, [sp, #4]
 8026f30:	683b      	ldr	r3, [r7, #0]
 8026f32:	9300      	str	r3, [sp, #0]
 8026f34:	687b      	ldr	r3, [r7, #4]
 8026f36:	68f8      	ldr	r0, [r7, #12]
 8026f38:	f7ff fcd6 	bl	80268e8 <lfs_dir_relocatingcommit>
 8026f3c:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 8026f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026f44:	2b00      	cmp	r3, #0
 8026f46:	da02      	bge.n	8026f4e <lfs_dir_orphaningcommit+0xfa>
        return state;
 8026f48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026f4c:	e26f      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 8026f4e:	68bb      	ldr	r3, [r7, #8]
 8026f50:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026f54:	4611      	mov	r1, r2
 8026f56:	4618      	mov	r0, r3
 8026f58:	f7fc feec 	bl	8023d34 <lfs_pair_cmp>
 8026f5c:	4603      	mov	r3, r0
 8026f5e:	2b00      	cmp	r3, #0
 8026f60:	d109      	bne.n	8026f76 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8026f62:	68bb      	ldr	r3, [r7, #8]
 8026f64:	461d      	mov	r5, r3
 8026f66:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8026f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8026f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8026f6e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8026f72:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8026f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026f7a:	2b02      	cmp	r3, #2
 8026f7c:	d14a      	bne.n	8027014 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8026f7e:	68fb      	ldr	r3, [r7, #12]
 8026f80:	3348      	adds	r3, #72	; 0x48
 8026f82:	461a      	mov	r2, r3
 8026f84:	68b9      	ldr	r1, [r7, #8]
 8026f86:	68f8      	ldr	r0, [r7, #12]
 8026f88:	f7fe fc60 	bl	802584c <lfs_dir_getgstate>
 8026f8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8026f90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026f94:	2b00      	cmp	r3, #0
 8026f96:	d002      	beq.n	8026f9e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8026f98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8026f9c:	e247      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 8026f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8026fa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8026fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8026fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 8026faa:	68bb      	ldr	r3, [r7, #8]
 8026fac:	3318      	adds	r3, #24
 8026fae:	4618      	mov	r0, r3
 8026fb0:	f7fc ff31 	bl	8023e16 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8026fb4:	68bb      	ldr	r3, [r7, #8]
 8026fb6:	7ddb      	ldrb	r3, [r3, #23]
 8026fb8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8026fbc:	051a      	lsls	r2, r3, #20
 8026fbe:	4bc2      	ldr	r3, [pc, #776]	; (80272c8 <lfs_dir_orphaningcommit+0x474>)
 8026fc0:	4313      	orrs	r3, r2
 8026fc2:	667b      	str	r3, [r7, #100]	; 0x64
 8026fc4:	68bb      	ldr	r3, [r7, #8]
 8026fc6:	3318      	adds	r3, #24
 8026fc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8026fca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8026fce:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8026fd2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8026fd6:	2000      	movs	r0, #0
 8026fd8:	9001      	str	r0, [sp, #4]
 8026fda:	2001      	movs	r0, #1
 8026fdc:	9000      	str	r0, [sp, #0]
 8026fde:	68f8      	ldr	r0, [r7, #12]
 8026fe0:	f7ff fc82 	bl	80268e8 <lfs_dir_relocatingcommit>
 8026fe4:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8026fe8:	68bb      	ldr	r3, [r7, #8]
 8026fea:	3318      	adds	r3, #24
 8026fec:	4618      	mov	r0, r3
 8026fee:	f7fc fef8 	bl	8023de2 <lfs_pair_fromle32>
        if (state < 0) {
 8026ff2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026ff6:	2b00      	cmp	r3, #0
 8026ff8:	da02      	bge.n	8027000 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 8026ffa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8026ffe:	e216      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 8027000:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027004:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802700a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802700c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 8027014:	2300      	movs	r3, #0
 8027016:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 802701a:	e1fc      	b.n	8027416 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 802701c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8027020:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8027024:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027028:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802702c:	4ca7      	ldr	r4, [pc, #668]	; (80272cc <lfs_dir_orphaningcommit+0x478>)
 802702e:	9403      	str	r4, [sp, #12]
 8027030:	9102      	str	r1, [sp, #8]
 8027032:	9201      	str	r2, [sp, #4]
 8027034:	9300      	str	r3, [sp, #0]
 8027036:	4603      	mov	r3, r0
 8027038:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 802703c:	49a4      	ldr	r1, [pc, #656]	; (80272d0 <lfs_dir_orphaningcommit+0x47c>)
 802703e:	48a5      	ldr	r0, [pc, #660]	; (80272d4 <lfs_dir_orphaningcommit+0x480>)
 8027040:	f006 f9c6 	bl	802d3d0 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 8027044:	2300      	movs	r3, #0
 8027046:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 802704a:	68fb      	ldr	r3, [r7, #12]
 802704c:	f103 0220 	add.w	r2, r3, #32
 8027050:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027054:	4611      	mov	r1, r2
 8027056:	4618      	mov	r0, r3
 8027058:	f7fc fe6c 	bl	8023d34 <lfs_pair_cmp>
 802705c:	4603      	mov	r3, r0
 802705e:	2b00      	cmp	r3, #0
 8027060:	d107      	bne.n	8027072 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8027062:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027066:	68fb      	ldr	r3, [r7, #12]
 8027068:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 802706a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802706e:	68fb      	ldr	r3, [r7, #12]
 8027070:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027072:	68fb      	ldr	r3, [r7, #12]
 8027074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027076:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802707a:	e037      	b.n	80270ec <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 802707c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027080:	f103 0208 	add.w	r2, r3, #8
 8027084:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027088:	4611      	mov	r1, r2
 802708a:	4618      	mov	r0, r3
 802708c:	f7fc fe52 	bl	8023d34 <lfs_pair_cmp>
 8027090:	4603      	mov	r3, r0
 8027092:	2b00      	cmp	r3, #0
 8027094:	d109      	bne.n	80270aa <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8027096:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802709a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802709e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 80270a0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80270a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270a8:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 80270aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270ae:	799b      	ldrb	r3, [r3, #6]
 80270b0:	2b02      	cmp	r3, #2
 80270b2:	d116      	bne.n	80270e2 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 80270b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270b8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80270bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80270c0:	4611      	mov	r1, r2
 80270c2:	4618      	mov	r0, r3
 80270c4:	f7fc fe36 	bl	8023d34 <lfs_pair_cmp>
 80270c8:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 80270ca:	2b00      	cmp	r3, #0
 80270cc:	d109      	bne.n	80270e2 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 80270ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80270d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270d6:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 80270d8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80270dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270e0:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80270e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270e6:	681b      	ldr	r3, [r3, #0]
 80270e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80270ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80270f0:	2b00      	cmp	r3, #0
 80270f2:	d1c3      	bne.n	802707c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80270f4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80270f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80270fc:	4619      	mov	r1, r3
 80270fe:	68f8      	ldr	r0, [r7, #12]
 8027100:	f002 fed8 	bl	8029eb4 <lfs_fs_parent>
 8027104:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 8027108:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802710c:	2b00      	cmp	r3, #0
 802710e:	da07      	bge.n	8027120 <lfs_dir_orphaningcommit+0x2cc>
 8027110:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027114:	f113 0f02 	cmn.w	r3, #2
 8027118:	d002      	beq.n	8027120 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 802711a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802711e:	e186      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 8027120:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027124:	f113 0f02 	cmn.w	r3, #2
 8027128:	bf14      	ite	ne
 802712a:	2301      	movne	r3, #1
 802712c:	2300      	moveq	r3, #0
 802712e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 8027132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027136:	f113 0f02 	cmn.w	r3, #2
 802713a:	f000 809e 	beq.w	802727a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 802713e:	2101      	movs	r1, #1
 8027140:	68f8      	ldr	r0, [r7, #12]
 8027142:	f002 ff0f 	bl	8029f64 <lfs_fs_preporphans>
 8027146:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 802714a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 802714e:	2b00      	cmp	r3, #0
 8027150:	d002      	beq.n	8027158 <lfs_dir_orphaningcommit+0x304>
                return err;
 8027152:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8027156:	e16a      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027158:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802715c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8027160:	68fb      	ldr	r3, [r7, #12]
 8027162:	3330      	adds	r3, #48	; 0x30
 8027164:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027168:	4611      	mov	r1, r2
 802716a:	4618      	mov	r0, r3
 802716c:	f7fc ff70 	bl	8024050 <lfs_gstate_hasmovehere>
 8027170:	4603      	mov	r3, r0
 8027172:	2b00      	cmp	r3, #0
 8027174:	d02d      	beq.n	80271d2 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027176:	68fb      	ldr	r3, [r7, #12]
 8027178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802717a:	4618      	mov	r0, r3
 802717c:	f7fc fec0 	bl	8023f00 <lfs_tag_id>
 8027180:	4603      	mov	r3, r0
 8027182:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8027186:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027188:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802718a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 802718e:	484f      	ldr	r0, [pc, #316]	; (80272cc <lfs_dir_orphaningcommit+0x478>)
 8027190:	9002      	str	r0, [sp, #8]
 8027192:	9201      	str	r2, [sp, #4]
 8027194:	9300      	str	r3, [sp, #0]
 8027196:	460b      	mov	r3, r1
 8027198:	f640 02ed 	movw	r2, #2285	; 0x8ed
 802719c:	494c      	ldr	r1, [pc, #304]	; (80272d0 <lfs_dir_orphaningcommit+0x47c>)
 802719e:	484e      	ldr	r0, [pc, #312]	; (80272d8 <lfs_dir_orphaningcommit+0x484>)
 80271a0:	f006 f916 	bl	802d3d0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80271a4:	2200      	movs	r2, #0
 80271a6:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80271aa:	68f8      	ldr	r0, [r7, #12]
 80271ac:	f002 ff14 	bl	8029fd8 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 80271b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271b4:	4618      	mov	r0, r3
 80271b6:	f7fc fea3 	bl	8023f00 <lfs_tag_id>
 80271ba:	4603      	mov	r3, r0
 80271bc:	461a      	mov	r2, r3
 80271be:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80271c2:	4293      	cmp	r3, r2
 80271c4:	d205      	bcs.n	80271d2 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 80271c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80271ca:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80271ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 80271d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80271d4:	657b      	str	r3, [r7, #84]	; 0x54
 80271d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80271d8:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 80271da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80271de:	4618      	mov	r0, r3
 80271e0:	f7fc fe19 	bl	8023e16 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 80271e4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80271e8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80271ec:	4293      	cmp	r3, r2
 80271ee:	d007      	beq.n	8027200 <lfs_dir_orphaningcommit+0x3ac>
 80271f0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80271f4:	029b      	lsls	r3, r3, #10
 80271f6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80271fa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80271fe:	e000      	b.n	8027202 <lfs_dir_orphaningcommit+0x3ae>
 8027200:	2300      	movs	r3, #0
 8027202:	647b      	str	r3, [r7, #68]	; 0x44
 8027204:	2300      	movs	r3, #0
 8027206:	64bb      	str	r3, [r7, #72]	; 0x48
 8027208:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802720c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802720e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027212:	653b      	str	r3, [r7, #80]	; 0x50
 8027214:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8027218:	f107 0254 	add.w	r2, r7, #84	; 0x54
 802721c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027220:	2000      	movs	r0, #0
 8027222:	9001      	str	r0, [sp, #4]
 8027224:	2002      	movs	r0, #2
 8027226:	9000      	str	r0, [sp, #0]
 8027228:	68f8      	ldr	r0, [r7, #12]
 802722a:	f7ff fb5d 	bl	80268e8 <lfs_dir_relocatingcommit>
 802722e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 8027232:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027236:	4618      	mov	r0, r3
 8027238:	f7fc fdd3 	bl	8023de2 <lfs_pair_fromle32>
            if (state < 0) {
 802723c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027240:	2b00      	cmp	r3, #0
 8027242:	da02      	bge.n	802724a <lfs_dir_orphaningcommit+0x3f6>
                return state;
 8027244:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027248:	e0f1      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 802724a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802724e:	2b01      	cmp	r3, #1
 8027250:	d113      	bne.n	802727a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8027252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8027258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802725a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 802725e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027262:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802726a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802726e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8027272:	2301      	movs	r3, #1
 8027274:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8027278:	e0cd      	b.n	8027416 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 802727a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802727e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027282:	4619      	mov	r1, r3
 8027284:	68f8      	ldr	r0, [r7, #12]
 8027286:	f002 fd8d 	bl	8029da4 <lfs_fs_pred>
 802728a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 802728e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027292:	2b00      	cmp	r3, #0
 8027294:	d007      	beq.n	80272a6 <lfs_dir_orphaningcommit+0x452>
 8027296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802729a:	f113 0f02 	cmn.w	r3, #2
 802729e:	d002      	beq.n	80272a6 <lfs_dir_orphaningcommit+0x452>
            return err;
 80272a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80272a4:	e0c3      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 80272a6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80272aa:	2b00      	cmp	r3, #0
 80272ac:	d01a      	beq.n	80272e4 <lfs_dir_orphaningcommit+0x490>
 80272ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80272b2:	f113 0f02 	cmn.w	r3, #2
 80272b6:	d115      	bne.n	80272e4 <lfs_dir_orphaningcommit+0x490>
 80272b8:	4b08      	ldr	r3, [pc, #32]	; (80272dc <lfs_dir_orphaningcommit+0x488>)
 80272ba:	4a09      	ldr	r2, [pc, #36]	; (80272e0 <lfs_dir_orphaningcommit+0x48c>)
 80272bc:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80272c0:	4803      	ldr	r0, [pc, #12]	; (80272d0 <lfs_dir_orphaningcommit+0x47c>)
 80272c2:	f005 f84b 	bl	802c35c <__assert_func>
 80272c6:	bf00      	nop
 80272c8:	000ffc08 	.word	0x000ffc08
 80272cc:	0803346c 	.word	0x0803346c
 80272d0:	08033358 	.word	0x08033358
 80272d4:	080335ec 	.word	0x080335ec
 80272d8:	08033628 	.word	0x08033628
 80272dc:	0803366c 	.word	0x0803366c
 80272e0:	08034690 	.word	0x08034690

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 80272e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80272e8:	f113 0f02 	cmn.w	r3, #2
 80272ec:	f000 8093 	beq.w	8027416 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80272f0:	68fb      	ldr	r3, [r7, #12]
 80272f2:	3330      	adds	r3, #48	; 0x30
 80272f4:	4618      	mov	r0, r3
 80272f6:	f7fc fe76 	bl	8023fe6 <lfs_gstate_hasorphans>
 80272fa:	4603      	mov	r3, r0
 80272fc:	2b00      	cmp	r3, #0
 80272fe:	d011      	beq.n	8027324 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 8027300:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8027304:	425b      	negs	r3, r3
 8027306:	b2db      	uxtb	r3, r3
 8027308:	b25b      	sxtb	r3, r3
 802730a:	4619      	mov	r1, r3
 802730c:	68f8      	ldr	r0, [r7, #12]
 802730e:	f002 fe29 	bl	8029f64 <lfs_fs_preporphans>
 8027312:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 8027316:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802731a:	2b00      	cmp	r3, #0
 802731c:	d002      	beq.n	8027324 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 802731e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027322:	e084      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027324:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027328:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802732c:	68fb      	ldr	r3, [r7, #12]
 802732e:	3330      	adds	r3, #48	; 0x30
 8027330:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027334:	4611      	mov	r1, r2
 8027336:	4618      	mov	r0, r3
 8027338:	f7fc fe8a 	bl	8024050 <lfs_gstate_hasmovehere>
 802733c:	4603      	mov	r3, r0
 802733e:	2b00      	cmp	r3, #0
 8027340:	d01c      	beq.n	802737c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027342:	68fb      	ldr	r3, [r7, #12]
 8027344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027346:	4618      	mov	r0, r3
 8027348:	f7fc fdda 	bl	8023f00 <lfs_tag_id>
 802734c:	4603      	mov	r3, r0
 802734e:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8027352:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027356:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 802735a:	4837      	ldr	r0, [pc, #220]	; (8027438 <lfs_dir_orphaningcommit+0x5e4>)
 802735c:	9002      	str	r0, [sp, #8]
 802735e:	9201      	str	r2, [sp, #4]
 8027360:	9300      	str	r3, [sp, #0]
 8027362:	460b      	mov	r3, r1
 8027364:	f640 1221 	movw	r2, #2337	; 0x921
 8027368:	4934      	ldr	r1, [pc, #208]	; (802743c <lfs_dir_orphaningcommit+0x5e8>)
 802736a:	4835      	ldr	r0, [pc, #212]	; (8027440 <lfs_dir_orphaningcommit+0x5ec>)
 802736c:	f006 f830 	bl	802d3d0 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027370:	2200      	movs	r2, #0
 8027372:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8027376:	68f8      	ldr	r0, [r7, #12]
 8027378:	f002 fe2e 	bl	8029fd8 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 802737c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802737e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8027382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8027388:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802738c:	4618      	mov	r0, r3
 802738e:	f7fc fd42 	bl	8023e16 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027392:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027396:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802739a:	4293      	cmp	r3, r2
 802739c:	d007      	beq.n	80273ae <lfs_dir_orphaningcommit+0x55a>
 802739e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80273a2:	029b      	lsls	r3, r3, #10
 80273a4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80273a8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80273ac:	e000      	b.n	80273b0 <lfs_dir_orphaningcommit+0x55c>
 80273ae:	2300      	movs	r3, #0
 80273b0:	627b      	str	r3, [r7, #36]	; 0x24
 80273b2:	2300      	movs	r3, #0
 80273b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80273b6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80273ba:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80273be:	051a      	lsls	r2, r3, #20
 80273c0:	4b20      	ldr	r3, [pc, #128]	; (8027444 <lfs_dir_orphaningcommit+0x5f0>)
 80273c2:	4313      	orrs	r3, r2
 80273c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80273c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80273ca:	633b      	str	r3, [r7, #48]	; 0x30
 80273cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80273d0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80273d4:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80273d8:	2000      	movs	r0, #0
 80273da:	9001      	str	r0, [sp, #4]
 80273dc:	2002      	movs	r0, #2
 80273de:	9000      	str	r0, [sp, #0]
 80273e0:	68f8      	ldr	r0, [r7, #12]
 80273e2:	f7ff fa81 	bl	80268e8 <lfs_dir_relocatingcommit>
 80273e6:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80273ea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80273ee:	4618      	mov	r0, r3
 80273f0:	f7fc fcf7 	bl	8023de2 <lfs_pair_fromle32>
            if (state < 0) {
 80273f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273f8:	2b00      	cmp	r3, #0
 80273fa:	da02      	bge.n	8027402 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80273fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027400:	e015      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 8027402:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027406:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 802740a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802740c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802740e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027412:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 8027416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802741a:	2b01      	cmp	r3, #1
 802741c:	f43f adfe 	beq.w	802701c <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 8027420:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8027424:	2b00      	cmp	r3, #0
 8027426:	d001      	beq.n	802742c <lfs_dir_orphaningcommit+0x5d8>
 8027428:	2303      	movs	r3, #3
 802742a:	e000      	b.n	802742e <lfs_dir_orphaningcommit+0x5da>
 802742c:	2300      	movs	r3, #0
}
 802742e:	4618      	mov	r0, r3
 8027430:	37e0      	adds	r7, #224	; 0xe0
 8027432:	46bd      	mov	sp, r7
 8027434:	bdb0      	pop	{r4, r5, r7, pc}
 8027436:	bf00      	nop
 8027438:	0803346c 	.word	0x0803346c
 802743c:	08033358 	.word	0x08033358
 8027440:	08033628 	.word	0x08033628
 8027444:	000ffc08 	.word	0x000ffc08

08027448 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027448:	b580      	push	{r7, lr}
 802744a:	b086      	sub	sp, #24
 802744c:	af00      	add	r7, sp, #0
 802744e:	60f8      	str	r0, [r7, #12]
 8027450:	60b9      	str	r1, [r7, #8]
 8027452:	607a      	str	r2, [r7, #4]
 8027454:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8027456:	683b      	ldr	r3, [r7, #0]
 8027458:	687a      	ldr	r2, [r7, #4]
 802745a:	68b9      	ldr	r1, [r7, #8]
 802745c:	68f8      	ldr	r0, [r7, #12]
 802745e:	f7ff fcf9 	bl	8026e54 <lfs_dir_orphaningcommit>
 8027462:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8027464:	697b      	ldr	r3, [r7, #20]
 8027466:	2b00      	cmp	r3, #0
 8027468:	da01      	bge.n	802746e <lfs_dir_commit+0x26>
        return orphans;
 802746a:	697b      	ldr	r3, [r7, #20]
 802746c:	e00d      	b.n	802748a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802746e:	697b      	ldr	r3, [r7, #20]
 8027470:	2b00      	cmp	r3, #0
 8027472:	d009      	beq.n	8027488 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8027474:	2100      	movs	r1, #0
 8027476:	68f8      	ldr	r0, [r7, #12]
 8027478:	f002 fe4e 	bl	802a118 <lfs_fs_deorphan>
 802747c:	6138      	str	r0, [r7, #16]
        if (err) {
 802747e:	693b      	ldr	r3, [r7, #16]
 8027480:	2b00      	cmp	r3, #0
 8027482:	d001      	beq.n	8027488 <lfs_dir_commit+0x40>
            return err;
 8027484:	693b      	ldr	r3, [r7, #16]
 8027486:	e000      	b.n	802748a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8027488:	2300      	movs	r3, #0
}
 802748a:	4618      	mov	r0, r3
 802748c:	3718      	adds	r7, #24
 802748e:	46bd      	mov	sp, r7
 8027490:	bd80      	pop	{r7, pc}
	...

08027494 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8027494:	b5b0      	push	{r4, r5, r7, lr}
 8027496:	b0b8      	sub	sp, #224	; 0xe0
 8027498:	af00      	add	r7, sp, #0
 802749a:	6078      	str	r0, [r7, #4]
 802749c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 802749e:	6878      	ldr	r0, [r7, #4]
 80274a0:	f002 ffde 	bl	802a460 <lfs_fs_forceconsistency>
 80274a4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80274a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274ac:	2b00      	cmp	r3, #0
 80274ae:	d002      	beq.n	80274b6 <lfs_rawmkdir+0x22>
        return err;
 80274b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274b4:	e128      	b.n	8027708 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 80274b6:	687b      	ldr	r3, [r7, #4]
 80274b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80274ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 80274be:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 80274c2:	463a      	mov	r2, r7
 80274c4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80274c8:	f103 0108 	add.w	r1, r3, #8
 80274cc:	4603      	mov	r3, r0
 80274ce:	6878      	ldr	r0, [r7, #4]
 80274d0:	f7fe fab2 	bl	8025a38 <lfs_dir_find>
 80274d4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 80274d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274dc:	f113 0f02 	cmn.w	r3, #2
 80274e0:	d105      	bne.n	80274ee <lfs_rawmkdir+0x5a>
 80274e2:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80274e6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80274ea:	4293      	cmp	r3, r2
 80274ec:	d109      	bne.n	8027502 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 80274ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274f2:	2b00      	cmp	r3, #0
 80274f4:	da02      	bge.n	80274fc <lfs_rawmkdir+0x68>
 80274f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80274fa:	e105      	b.n	8027708 <lfs_rawmkdir+0x274>
 80274fc:	f06f 0310 	mvn.w	r3, #16
 8027500:	e102      	b.n	8027708 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8027502:	683b      	ldr	r3, [r7, #0]
 8027504:	4618      	mov	r0, r3
 8027506:	f7e8 fecb 	bl	80102a0 <strlen>
 802750a:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 802750e:	687b      	ldr	r3, [r7, #4]
 8027510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027512:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8027516:	429a      	cmp	r2, r3
 8027518:	d902      	bls.n	8027520 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 802751a:	f06f 0323 	mvn.w	r3, #35	; 0x23
 802751e:	e0f3      	b.n	8027708 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 8027520:	6878      	ldr	r0, [r7, #4]
 8027522:	f7fc ff1d 	bl	8024360 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8027526:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802752a:	4619      	mov	r1, r3
 802752c:	6878      	ldr	r0, [r7, #4]
 802752e:	f7fe fd6f 	bl	8026010 <lfs_dir_alloc>
 8027532:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802753a:	2b00      	cmp	r3, #0
 802753c:	d002      	beq.n	8027544 <lfs_rawmkdir+0xb0>
        return err;
 802753e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027542:	e0e1      	b.n	8027708 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8027544:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8027548:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 802754c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802754e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027550:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8027558:	e012      	b.n	8027580 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 802755a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802755e:	f103 0218 	add.w	r2, r3, #24
 8027562:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027566:	4619      	mov	r1, r3
 8027568:	6878      	ldr	r0, [r7, #4]
 802756a:	f7fe f953 	bl	8025814 <lfs_dir_fetch>
 802756e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027576:	2b00      	cmp	r3, #0
 8027578:	d002      	beq.n	8027580 <lfs_rawmkdir+0xec>
            return err;
 802757a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802757e:	e0c3      	b.n	8027708 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8027580:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8027584:	2b00      	cmp	r3, #0
 8027586:	d1e8      	bne.n	802755a <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8027588:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802758c:	3318      	adds	r3, #24
 802758e:	4618      	mov	r0, r3
 8027590:	f7fc fc41 	bl	8023e16 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8027594:	4b5e      	ldr	r3, [pc, #376]	; (8027710 <lfs_rawmkdir+0x27c>)
 8027596:	667b      	str	r3, [r7, #100]	; 0x64
 8027598:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802759c:	3318      	adds	r3, #24
 802759e:	66bb      	str	r3, [r7, #104]	; 0x68
 80275a0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80275a4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80275a8:	2301      	movs	r3, #1
 80275aa:	6878      	ldr	r0, [r7, #4]
 80275ac:	f7ff ff4c 	bl	8027448 <lfs_dir_commit>
 80275b0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 80275b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80275b8:	3318      	adds	r3, #24
 80275ba:	4618      	mov	r0, r3
 80275bc:	f7fc fc11 	bl	8023de2 <lfs_pair_fromle32>
    if (err) {
 80275c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275c4:	2b00      	cmp	r3, #0
 80275c6:	d002      	beq.n	80275ce <lfs_rawmkdir+0x13a>
        return err;
 80275c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275cc:	e09c      	b.n	8027708 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 80275ce:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80275d2:	2b00      	cmp	r3, #0
 80275d4:	d04c      	beq.n	8027670 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 80275d6:	2101      	movs	r1, #1
 80275d8:	6878      	ldr	r0, [r7, #4]
 80275da:	f002 fcc3 	bl	8029f64 <lfs_fs_preporphans>
 80275de:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 80275e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275e6:	2b00      	cmp	r3, #0
 80275e8:	d002      	beq.n	80275f0 <lfs_rawmkdir+0x15c>
            return err;
 80275ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80275ee:	e08b      	b.n	8027708 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 80275f0:	2300      	movs	r3, #0
 80275f2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 80275f6:	2300      	movs	r3, #0
 80275f8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 80275fc:	687b      	ldr	r3, [r7, #4]
 80275fe:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8027602:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8027604:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027608:	4618      	mov	r0, r3
 802760a:	f7fc fc04 	bl	8023e16 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 802760e:	4b40      	ldr	r3, [pc, #256]	; (8027710 <lfs_rawmkdir+0x27c>)
 8027610:	617b      	str	r3, [r7, #20]
 8027612:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027616:	61bb      	str	r3, [r7, #24]
 8027618:	f107 0214 	add.w	r2, r7, #20
 802761c:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027620:	2301      	movs	r3, #1
 8027622:	6878      	ldr	r0, [r7, #4]
 8027624:	f7ff ff10 	bl	8027448 <lfs_dir_commit>
 8027628:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 802762c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027630:	4618      	mov	r0, r3
 8027632:	f7fc fbd6 	bl	8023de2 <lfs_pair_fromle32>
        if (err) {
 8027636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802763a:	2b00      	cmp	r3, #0
 802763c:	d006      	beq.n	802764c <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 802763e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027642:	687b      	ldr	r3, [r7, #4]
 8027644:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8027646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802764a:	e05d      	b.n	8027708 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 802764c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027650:	687b      	ldr	r3, [r7, #4]
 8027652:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8027654:	f04f 31ff 	mov.w	r1, #4294967295
 8027658:	6878      	ldr	r0, [r7, #4]
 802765a:	f002 fc83 	bl	8029f64 <lfs_fs_preporphans>
 802765e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027666:	2b00      	cmp	r3, #0
 8027668:	d002      	beq.n	8027670 <lfs_rawmkdir+0x1dc>
            return err;
 802766a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802766e:	e04b      	b.n	8027708 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8027670:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027674:	4618      	mov	r0, r3
 8027676:	f7fc fbce 	bl	8023e16 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 802767a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 802767e:	029b      	lsls	r3, r3, #10
 8027680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027688:	63fb      	str	r3, [r7, #60]	; 0x3c
 802768a:	2300      	movs	r3, #0
 802768c:	643b      	str	r3, [r7, #64]	; 0x40
 802768e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027692:	029a      	lsls	r2, r3, #10
 8027694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027698:	4313      	orrs	r3, r2
 802769a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 802769e:	647b      	str	r3, [r7, #68]	; 0x44
 80276a0:	683b      	ldr	r3, [r7, #0]
 80276a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80276a4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80276a8:	029b      	lsls	r3, r3, #10
 80276aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80276ae:	f043 0308 	orr.w	r3, r3, #8
 80276b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80276b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276b8:	653b      	str	r3, [r7, #80]	; 0x50
 80276ba:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 80276be:	f083 0301 	eor.w	r3, r3, #1
 80276c2:	b2db      	uxtb	r3, r3
 80276c4:	2b00      	cmp	r3, #0
 80276c6:	d001      	beq.n	80276cc <lfs_rawmkdir+0x238>
 80276c8:	4b11      	ldr	r3, [pc, #68]	; (8027710 <lfs_rawmkdir+0x27c>)
 80276ca:	e000      	b.n	80276ce <lfs_rawmkdir+0x23a>
 80276cc:	2300      	movs	r3, #0
 80276ce:	657b      	str	r3, [r7, #84]	; 0x54
 80276d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80276d6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80276da:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80276de:	f103 0108 	add.w	r1, r3, #8
 80276e2:	2304      	movs	r3, #4
 80276e4:	6878      	ldr	r0, [r7, #4]
 80276e6:	f7ff feaf 	bl	8027448 <lfs_dir_commit>
 80276ea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 80276ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80276f2:	4618      	mov	r0, r3
 80276f4:	f7fc fb75 	bl	8023de2 <lfs_pair_fromle32>
    if (err) {
 80276f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80276fc:	2b00      	cmp	r3, #0
 80276fe:	d002      	beq.n	8027706 <lfs_rawmkdir+0x272>
        return err;
 8027700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027704:	e000      	b.n	8027708 <lfs_rawmkdir+0x274>
    }

    return 0;
 8027706:	2300      	movs	r3, #0
}
 8027708:	4618      	mov	r0, r3
 802770a:	37e0      	adds	r7, #224	; 0xe0
 802770c:	46bd      	mov	sp, r7
 802770e:	bdb0      	pop	{r4, r5, r7, pc}
 8027710:	600ffc08 	.word	0x600ffc08

08027714 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8027714:	b590      	push	{r4, r7, lr}
 8027716:	b08d      	sub	sp, #52	; 0x34
 8027718:	af02      	add	r7, sp, #8
 802771a:	60f8      	str	r0, [r7, #12]
 802771c:	60b9      	str	r1, [r7, #8]
 802771e:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8027720:	68bb      	ldr	r3, [r7, #8]
 8027722:	f103 0108 	add.w	r1, r3, #8
 8027726:	1d3a      	adds	r2, r7, #4
 8027728:	2300      	movs	r3, #0
 802772a:	68f8      	ldr	r0, [r7, #12]
 802772c:	f7fe f984 	bl	8025a38 <lfs_dir_find>
 8027730:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8027732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027734:	2b00      	cmp	r3, #0
 8027736:	da01      	bge.n	802773c <lfs_dir_rawopen+0x28>
        return tag;
 8027738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802773a:	e05e      	b.n	80277fa <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 802773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802773e:	4618      	mov	r0, r3
 8027740:	f7fc fbb4 	bl	8023eac <lfs_tag_type3>
 8027744:	4603      	mov	r3, r0
 8027746:	2b02      	cmp	r3, #2
 8027748:	d002      	beq.n	8027750 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 802774a:	f06f 0313 	mvn.w	r3, #19
 802774e:	e054      	b.n	80277fa <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8027750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027752:	4618      	mov	r0, r3
 8027754:	f7fc fbd4 	bl	8023f00 <lfs_tag_id>
 8027758:	4603      	mov	r3, r0
 802775a:	461a      	mov	r2, r3
 802775c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027760:	429a      	cmp	r2, r3
 8027762:	d106      	bne.n	8027772 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027764:	68fb      	ldr	r3, [r7, #12]
 8027766:	6a1b      	ldr	r3, [r3, #32]
 8027768:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 802776a:	68fb      	ldr	r3, [r7, #12]
 802776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802776e:	61bb      	str	r3, [r7, #24]
 8027770:	e01f      	b.n	80277b2 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027772:	68bb      	ldr	r3, [r7, #8]
 8027774:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8027778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802777a:	4618      	mov	r0, r3
 802777c:	f7fc fbc0 	bl	8023f00 <lfs_tag_id>
 8027780:	4603      	mov	r3, r0
 8027782:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027788:	f043 0308 	orr.w	r3, r3, #8
 802778c:	f107 0214 	add.w	r2, r7, #20
 8027790:	9200      	str	r2, [sp, #0]
 8027792:	4a1c      	ldr	r2, [pc, #112]	; (8027804 <lfs_dir_rawopen+0xf0>)
 8027794:	4621      	mov	r1, r4
 8027796:	68f8      	ldr	r0, [r7, #12]
 8027798:	f7fc ff9c 	bl	80246d4 <lfs_dir_get>
 802779c:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 802779e:	6a3b      	ldr	r3, [r7, #32]
 80277a0:	2b00      	cmp	r3, #0
 80277a2:	da01      	bge.n	80277a8 <lfs_dir_rawopen+0x94>
            return res;
 80277a4:	6a3b      	ldr	r3, [r7, #32]
 80277a6:	e028      	b.n	80277fa <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 80277a8:	f107 0314 	add.w	r3, r7, #20
 80277ac:	4618      	mov	r0, r3
 80277ae:	f7fc fb18 	bl	8023de2 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 80277b2:	68bb      	ldr	r3, [r7, #8]
 80277b4:	3308      	adds	r3, #8
 80277b6:	f107 0214 	add.w	r2, r7, #20
 80277ba:	4619      	mov	r1, r3
 80277bc:	68f8      	ldr	r0, [r7, #12]
 80277be:	f7fe f829 	bl	8025814 <lfs_dir_fetch>
 80277c2:	61f8      	str	r0, [r7, #28]
    if (err) {
 80277c4:	69fb      	ldr	r3, [r7, #28]
 80277c6:	2b00      	cmp	r3, #0
 80277c8:	d001      	beq.n	80277ce <lfs_dir_rawopen+0xba>
        return err;
 80277ca:	69fb      	ldr	r3, [r7, #28]
 80277cc:	e015      	b.n	80277fa <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 80277ce:	68bb      	ldr	r3, [r7, #8]
 80277d0:	689a      	ldr	r2, [r3, #8]
 80277d2:	68bb      	ldr	r3, [r7, #8]
 80277d4:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 80277d6:	68bb      	ldr	r3, [r7, #8]
 80277d8:	68da      	ldr	r2, [r3, #12]
 80277da:	68bb      	ldr	r3, [r7, #8]
 80277dc:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 80277de:	68bb      	ldr	r3, [r7, #8]
 80277e0:	2200      	movs	r2, #0
 80277e2:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 80277e4:	68bb      	ldr	r3, [r7, #8]
 80277e6:	2200      	movs	r2, #0
 80277e8:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 80277ea:	68bb      	ldr	r3, [r7, #8]
 80277ec:	2202      	movs	r2, #2
 80277ee:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 80277f0:	68b9      	ldr	r1, [r7, #8]
 80277f2:	68f8      	ldr	r0, [r7, #12]
 80277f4:	f7fc fd6b 	bl	80242ce <lfs_mlist_append>

    return 0;
 80277f8:	2300      	movs	r3, #0
}
 80277fa:	4618      	mov	r0, r3
 80277fc:	372c      	adds	r7, #44	; 0x2c
 80277fe:	46bd      	mov	sp, r7
 8027800:	bd90      	pop	{r4, r7, pc}
 8027802:	bf00      	nop
 8027804:	700ffc00 	.word	0x700ffc00

08027808 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8027808:	b580      	push	{r7, lr}
 802780a:	b082      	sub	sp, #8
 802780c:	af00      	add	r7, sp, #0
 802780e:	6078      	str	r0, [r7, #4]
 8027810:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8027812:	6839      	ldr	r1, [r7, #0]
 8027814:	6878      	ldr	r0, [r7, #4]
 8027816:	f7fc fd38 	bl	802428a <lfs_mlist_remove>

    return 0;
 802781a:	2300      	movs	r3, #0
}
 802781c:	4618      	mov	r0, r3
 802781e:	3708      	adds	r7, #8
 8027820:	46bd      	mov	sp, r7
 8027822:	bd80      	pop	{r7, pc}

08027824 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8027824:	b580      	push	{r7, lr}
 8027826:	b086      	sub	sp, #24
 8027828:	af00      	add	r7, sp, #0
 802782a:	60f8      	str	r0, [r7, #12]
 802782c:	60b9      	str	r1, [r7, #8]
 802782e:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8027830:	f44f 7284 	mov.w	r2, #264	; 0x108
 8027834:	2100      	movs	r1, #0
 8027836:	6878      	ldr	r0, [r7, #4]
 8027838:	f005 ff60 	bl	802d6fc <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 802783c:	68bb      	ldr	r3, [r7, #8]
 802783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027840:	2b00      	cmp	r3, #0
 8027842:	d110      	bne.n	8027866 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8027844:	687b      	ldr	r3, [r7, #4]
 8027846:	2202      	movs	r2, #2
 8027848:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 802784a:	687b      	ldr	r3, [r7, #4]
 802784c:	3308      	adds	r3, #8
 802784e:	4935      	ldr	r1, [pc, #212]	; (8027924 <lfs_dir_rawread+0x100>)
 8027850:	461a      	mov	r2, r3
 8027852:	460b      	mov	r3, r1
 8027854:	881b      	ldrh	r3, [r3, #0]
 8027856:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8027858:	68bb      	ldr	r3, [r7, #8]
 802785a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802785c:	1c5a      	adds	r2, r3, #1
 802785e:	68bb      	ldr	r3, [r7, #8]
 8027860:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027862:	2301      	movs	r3, #1
 8027864:	e05a      	b.n	802791c <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027866:	68bb      	ldr	r3, [r7, #8]
 8027868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802786a:	2b01      	cmp	r3, #1
 802786c:	d110      	bne.n	8027890 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 802786e:	687b      	ldr	r3, [r7, #4]
 8027870:	2202      	movs	r2, #2
 8027872:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027874:	687b      	ldr	r3, [r7, #4]
 8027876:	3308      	adds	r3, #8
 8027878:	4a2b      	ldr	r2, [pc, #172]	; (8027928 <lfs_dir_rawread+0x104>)
 802787a:	8811      	ldrh	r1, [r2, #0]
 802787c:	7892      	ldrb	r2, [r2, #2]
 802787e:	8019      	strh	r1, [r3, #0]
 8027880:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027882:	68bb      	ldr	r3, [r7, #8]
 8027884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027886:	1c5a      	adds	r2, r3, #1
 8027888:	68bb      	ldr	r3, [r7, #8]
 802788a:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 802788c:	2301      	movs	r3, #1
 802788e:	e045      	b.n	802791c <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027890:	68bb      	ldr	r3, [r7, #8]
 8027892:	889a      	ldrh	r2, [r3, #4]
 8027894:	68bb      	ldr	r3, [r7, #8]
 8027896:	8b9b      	ldrh	r3, [r3, #28]
 8027898:	429a      	cmp	r2, r3
 802789a:	d11a      	bne.n	80278d2 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 802789c:	68bb      	ldr	r3, [r7, #8]
 802789e:	7fdb      	ldrb	r3, [r3, #31]
 80278a0:	f083 0301 	eor.w	r3, r3, #1
 80278a4:	b2db      	uxtb	r3, r3
 80278a6:	2b00      	cmp	r3, #0
 80278a8:	d001      	beq.n	80278ae <lfs_dir_rawread+0x8a>
                return false;
 80278aa:	2300      	movs	r3, #0
 80278ac:	e036      	b.n	802791c <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 80278ae:	68bb      	ldr	r3, [r7, #8]
 80278b0:	f103 0108 	add.w	r1, r3, #8
 80278b4:	68bb      	ldr	r3, [r7, #8]
 80278b6:	3320      	adds	r3, #32
 80278b8:	461a      	mov	r2, r3
 80278ba:	68f8      	ldr	r0, [r7, #12]
 80278bc:	f7fd ffaa 	bl	8025814 <lfs_dir_fetch>
 80278c0:	6178      	str	r0, [r7, #20]
            if (err) {
 80278c2:	697b      	ldr	r3, [r7, #20]
 80278c4:	2b00      	cmp	r3, #0
 80278c6:	d001      	beq.n	80278cc <lfs_dir_rawread+0xa8>
                return err;
 80278c8:	697b      	ldr	r3, [r7, #20]
 80278ca:	e027      	b.n	802791c <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 80278cc:	68bb      	ldr	r3, [r7, #8]
 80278ce:	2200      	movs	r2, #0
 80278d0:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 80278d2:	68bb      	ldr	r3, [r7, #8]
 80278d4:	f103 0108 	add.w	r1, r3, #8
 80278d8:	68bb      	ldr	r3, [r7, #8]
 80278da:	889a      	ldrh	r2, [r3, #4]
 80278dc:	687b      	ldr	r3, [r7, #4]
 80278de:	68f8      	ldr	r0, [r7, #12]
 80278e0:	f7fd ffe6 	bl	80258b0 <lfs_dir_getinfo>
 80278e4:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 80278e6:	693b      	ldr	r3, [r7, #16]
 80278e8:	2b00      	cmp	r3, #0
 80278ea:	d005      	beq.n	80278f8 <lfs_dir_rawread+0xd4>
 80278ec:	693b      	ldr	r3, [r7, #16]
 80278ee:	f113 0f02 	cmn.w	r3, #2
 80278f2:	d001      	beq.n	80278f8 <lfs_dir_rawread+0xd4>
            return err;
 80278f4:	693b      	ldr	r3, [r7, #16]
 80278f6:	e011      	b.n	802791c <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 80278f8:	68bb      	ldr	r3, [r7, #8]
 80278fa:	889b      	ldrh	r3, [r3, #4]
 80278fc:	3301      	adds	r3, #1
 80278fe:	b29a      	uxth	r2, r3
 8027900:	68bb      	ldr	r3, [r7, #8]
 8027902:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8027904:	693b      	ldr	r3, [r7, #16]
 8027906:	f113 0f02 	cmn.w	r3, #2
 802790a:	d100      	bne.n	802790e <lfs_dir_rawread+0xea>
    while (true) {
 802790c:	e7c0      	b.n	8027890 <lfs_dir_rawread+0x6c>
            break;
 802790e:	bf00      	nop
        }
    }

    dir->pos += 1;
 8027910:	68bb      	ldr	r3, [r7, #8]
 8027912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027914:	1c5a      	adds	r2, r3, #1
 8027916:	68bb      	ldr	r3, [r7, #8]
 8027918:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 802791a:	2301      	movs	r3, #1
}
 802791c:	4618      	mov	r0, r3
 802791e:	3718      	adds	r7, #24
 8027920:	46bd      	mov	sp, r7
 8027922:	bd80      	pop	{r7, pc}
 8027924:	080334bc 	.word	0x080334bc
 8027928:	080334c0 	.word	0x080334c0

0802792c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 802792c:	b590      	push	{r4, r7, lr}
 802792e:	b087      	sub	sp, #28
 8027930:	af00      	add	r7, sp, #0
 8027932:	6078      	str	r0, [r7, #4]
 8027934:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8027936:	683b      	ldr	r3, [r7, #0]
 8027938:	681b      	ldr	r3, [r3, #0]
 802793a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 802793c:	687b      	ldr	r3, [r7, #4]
 802793e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027940:	69db      	ldr	r3, [r3, #28]
 8027942:	3b08      	subs	r3, #8
 8027944:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8027946:	697a      	ldr	r2, [r7, #20]
 8027948:	693b      	ldr	r3, [r7, #16]
 802794a:	fbb2 f3f3 	udiv	r3, r2, r3
 802794e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8027950:	68fb      	ldr	r3, [r7, #12]
 8027952:	2b00      	cmp	r3, #0
 8027954:	d101      	bne.n	802795a <lfs_ctz_index+0x2e>
        return 0;
 8027956:	2300      	movs	r3, #0
 8027958:	e01c      	b.n	8027994 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 802795a:	68fb      	ldr	r3, [r7, #12]
 802795c:	3b01      	subs	r3, #1
 802795e:	4618      	mov	r0, r3
 8027960:	f7fb fe0e 	bl	8023580 <lfs_popc>
 8027964:	4603      	mov	r3, r0
 8027966:	3302      	adds	r3, #2
 8027968:	009b      	lsls	r3, r3, #2
 802796a:	697a      	ldr	r2, [r7, #20]
 802796c:	1ad2      	subs	r2, r2, r3
 802796e:	693b      	ldr	r3, [r7, #16]
 8027970:	fbb2 f3f3 	udiv	r3, r2, r3
 8027974:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027976:	693b      	ldr	r3, [r7, #16]
 8027978:	68fa      	ldr	r2, [r7, #12]
 802797a:	fb02 f303 	mul.w	r3, r2, r3
 802797e:	697a      	ldr	r2, [r7, #20]
 8027980:	1ad4      	subs	r4, r2, r3
 8027982:	68f8      	ldr	r0, [r7, #12]
 8027984:	f7fb fdfc 	bl	8023580 <lfs_popc>
 8027988:	4603      	mov	r3, r0
 802798a:	009b      	lsls	r3, r3, #2
 802798c:	1ae2      	subs	r2, r4, r3
 802798e:	683b      	ldr	r3, [r7, #0]
 8027990:	601a      	str	r2, [r3, #0]
    return i;
 8027992:	68fb      	ldr	r3, [r7, #12]
}
 8027994:	4618      	mov	r0, r3
 8027996:	371c      	adds	r7, #28
 8027998:	46bd      	mov	sp, r7
 802799a:	bd90      	pop	{r4, r7, pc}

0802799c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 802799c:	b590      	push	{r4, r7, lr}
 802799e:	b08f      	sub	sp, #60	; 0x3c
 80279a0:	af04      	add	r7, sp, #16
 80279a2:	60f8      	str	r0, [r7, #12]
 80279a4:	60b9      	str	r1, [r7, #8]
 80279a6:	607a      	str	r2, [r7, #4]
 80279a8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80279aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80279ac:	2b00      	cmp	r3, #0
 80279ae:	d108      	bne.n	80279c2 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 80279b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80279b2:	f04f 32ff 	mov.w	r2, #4294967295
 80279b6:	601a      	str	r2, [r3, #0]
        *off = 0;
 80279b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80279ba:	2200      	movs	r2, #0
 80279bc:	601a      	str	r2, [r3, #0]
        return 0;
 80279be:	2300      	movs	r3, #0
 80279c0:	e053      	b.n	8027a6a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80279c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80279c4:	3b01      	subs	r3, #1
 80279c6:	617b      	str	r3, [r7, #20]
 80279c8:	f107 0314 	add.w	r3, r7, #20
 80279cc:	4619      	mov	r1, r3
 80279ce:	68f8      	ldr	r0, [r7, #12]
 80279d0:	f7ff ffac 	bl	802792c <lfs_ctz_index>
 80279d4:	4603      	mov	r3, r0
 80279d6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 80279d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80279dc:	4619      	mov	r1, r3
 80279de:	68f8      	ldr	r0, [r7, #12]
 80279e0:	f7ff ffa4 	bl	802792c <lfs_ctz_index>
 80279e4:	4603      	mov	r3, r0
 80279e6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 80279e8:	e034      	b.n	8027a54 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 80279ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80279ec:	6a3b      	ldr	r3, [r7, #32]
 80279ee:	1ad3      	subs	r3, r2, r3
 80279f0:	3301      	adds	r3, #1
 80279f2:	4618      	mov	r0, r3
 80279f4:	f7fb fda5 	bl	8023542 <lfs_npw2>
 80279f8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 80279fa:	1e5c      	subs	r4, r3, #1
 80279fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80279fe:	f7fb fdb0 	bl	8023562 <lfs_ctz>
 8027a02:	4603      	mov	r3, r0
 8027a04:	4619      	mov	r1, r3
 8027a06:	4620      	mov	r0, r4
 8027a08:	f7fb fd64 	bl	80234d4 <lfs_min>
 8027a0c:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8027a0e:	683b      	ldr	r3, [r7, #0]
 8027a10:	69fa      	ldr	r2, [r7, #28]
 8027a12:	0092      	lsls	r2, r2, #2
 8027a14:	2104      	movs	r1, #4
 8027a16:	9103      	str	r1, [sp, #12]
 8027a18:	4639      	mov	r1, r7
 8027a1a:	9102      	str	r1, [sp, #8]
 8027a1c:	9201      	str	r2, [sp, #4]
 8027a1e:	9300      	str	r3, [sp, #0]
 8027a20:	2304      	movs	r3, #4
 8027a22:	687a      	ldr	r2, [r7, #4]
 8027a24:	68b9      	ldr	r1, [r7, #8]
 8027a26:	68f8      	ldr	r0, [r7, #12]
 8027a28:	f7fb fe30 	bl	802368c <lfs_bd_read>
 8027a2c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8027a2e:	683b      	ldr	r3, [r7, #0]
 8027a30:	4618      	mov	r0, r3
 8027a32:	f7fb fdbf 	bl	80235b4 <lfs_fromle32>
 8027a36:	4603      	mov	r3, r0
 8027a38:	603b      	str	r3, [r7, #0]
        if (err) {
 8027a3a:	69bb      	ldr	r3, [r7, #24]
 8027a3c:	2b00      	cmp	r3, #0
 8027a3e:	d001      	beq.n	8027a44 <lfs_ctz_find+0xa8>
            return err;
 8027a40:	69bb      	ldr	r3, [r7, #24]
 8027a42:	e012      	b.n	8027a6a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8027a44:	2201      	movs	r2, #1
 8027a46:	69fb      	ldr	r3, [r7, #28]
 8027a48:	fa02 f303 	lsl.w	r3, r2, r3
 8027a4c:	461a      	mov	r2, r3
 8027a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027a50:	1a9b      	subs	r3, r3, r2
 8027a52:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8027a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027a56:	6a3b      	ldr	r3, [r7, #32]
 8027a58:	429a      	cmp	r2, r3
 8027a5a:	d8c6      	bhi.n	80279ea <lfs_ctz_find+0x4e>
    }

    *block = head;
 8027a5c:	683a      	ldr	r2, [r7, #0]
 8027a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027a60:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027a62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027a66:	601a      	str	r2, [r3, #0]
    return 0;
 8027a68:	2300      	movs	r3, #0
}
 8027a6a:	4618      	mov	r0, r3
 8027a6c:	372c      	adds	r7, #44	; 0x2c
 8027a6e:	46bd      	mov	sp, r7
 8027a70:	bd90      	pop	{r4, r7, pc}
	...

08027a74 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027a74:	b580      	push	{r7, lr}
 8027a76:	b092      	sub	sp, #72	; 0x48
 8027a78:	af04      	add	r7, sp, #16
 8027a7a:	60f8      	str	r0, [r7, #12]
 8027a7c:	60b9      	str	r1, [r7, #8]
 8027a7e:	607a      	str	r2, [r7, #4]
 8027a80:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027a82:	f107 0320 	add.w	r3, r7, #32
 8027a86:	4619      	mov	r1, r3
 8027a88:	68f8      	ldr	r0, [r7, #12]
 8027a8a:	f7fc fc89 	bl	80243a0 <lfs_alloc>
 8027a8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8027a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a92:	2b00      	cmp	r3, #0
 8027a94:	d001      	beq.n	8027a9a <lfs_ctz_extend+0x26>
            return err;
 8027a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027a98:	e0e9      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8027a9a:	6a3b      	ldr	r3, [r7, #32]
 8027a9c:	4619      	mov	r1, r3
 8027a9e:	68f8      	ldr	r0, [r7, #12]
 8027aa0:	f7fc f8e6 	bl	8023c70 <lfs_bd_erase>
 8027aa4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8027aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027aa8:	2b00      	cmp	r3, #0
 8027aaa:	d006      	beq.n	8027aba <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8027aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027aae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027ab2:	f000 80cb 	beq.w	8027c4c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ab8:	e0d9      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8027aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027abc:	2b00      	cmp	r3, #0
 8027abe:	d107      	bne.n	8027ad0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027ac0:	6a3a      	ldr	r2, [r7, #32]
 8027ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027ac4:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027ac8:	2200      	movs	r2, #0
 8027aca:	601a      	str	r2, [r3, #0]
                return 0;
 8027acc:	2300      	movs	r3, #0
 8027ace:	e0ce      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027ad2:	3b01      	subs	r3, #1
 8027ad4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027ad6:	f107 031c 	add.w	r3, r7, #28
 8027ada:	4619      	mov	r1, r3
 8027adc:	68f8      	ldr	r0, [r7, #12]
 8027ade:	f7ff ff25 	bl	802792c <lfs_ctz_index>
 8027ae2:	4603      	mov	r3, r0
 8027ae4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8027ae6:	69fb      	ldr	r3, [r7, #28]
 8027ae8:	3301      	adds	r3, #1
 8027aea:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8027aec:	68fb      	ldr	r3, [r7, #12]
 8027aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027af0:	69da      	ldr	r2, [r3, #28]
 8027af2:	69fb      	ldr	r3, [r7, #28]
 8027af4:	429a      	cmp	r2, r3
 8027af6:	d044      	beq.n	8027b82 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027af8:	2300      	movs	r3, #0
 8027afa:	637b      	str	r3, [r7, #52]	; 0x34
 8027afc:	e035      	b.n	8027b6a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8027afe:	69fa      	ldr	r2, [r7, #28]
 8027b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027b02:	1ad2      	subs	r2, r2, r3
 8027b04:	2301      	movs	r3, #1
 8027b06:	9303      	str	r3, [sp, #12]
 8027b08:	f107 0317 	add.w	r3, r7, #23
 8027b0c:	9302      	str	r3, [sp, #8]
 8027b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027b10:	9301      	str	r3, [sp, #4]
 8027b12:	683b      	ldr	r3, [r7, #0]
 8027b14:	9300      	str	r3, [sp, #0]
 8027b16:	4613      	mov	r3, r2
 8027b18:	687a      	ldr	r2, [r7, #4]
 8027b1a:	2100      	movs	r1, #0
 8027b1c:	68f8      	ldr	r0, [r7, #12]
 8027b1e:	f7fb fdb5 	bl	802368c <lfs_bd_read>
 8027b22:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8027b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b26:	2b00      	cmp	r3, #0
 8027b28:	d001      	beq.n	8027b2e <lfs_ctz_extend+0xba>
                        return err;
 8027b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b2c:	e09f      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8027b2e:	6a3b      	ldr	r3, [r7, #32]
 8027b30:	2201      	movs	r2, #1
 8027b32:	9203      	str	r2, [sp, #12]
 8027b34:	f107 0217 	add.w	r2, r7, #23
 8027b38:	9202      	str	r2, [sp, #8]
 8027b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027b3c:	9201      	str	r2, [sp, #4]
 8027b3e:	9300      	str	r3, [sp, #0]
 8027b40:	2301      	movs	r3, #1
 8027b42:	687a      	ldr	r2, [r7, #4]
 8027b44:	68b9      	ldr	r1, [r7, #8]
 8027b46:	68f8      	ldr	r0, [r7, #12]
 8027b48:	f7fb ffe6 	bl	8023b18 <lfs_bd_prog>
 8027b4c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8027b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	d007      	beq.n	8027b64 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8027b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027b56:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027b5a:	d101      	bne.n	8027b60 <lfs_ctz_extend+0xec>
                            goto relocate;
 8027b5c:	bf00      	nop
                    goto relocate;
 8027b5e:	e075      	b.n	8027c4c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8027b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8027b62:	e084      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027b66:	3301      	adds	r3, #1
 8027b68:	637b      	str	r3, [r7, #52]	; 0x34
 8027b6a:	69fb      	ldr	r3, [r7, #28]
 8027b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027b6e:	429a      	cmp	r2, r3
 8027b70:	d3c5      	bcc.n	8027afe <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8027b72:	6a3a      	ldr	r2, [r7, #32]
 8027b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027b76:	601a      	str	r2, [r3, #0]
                *off = noff;
 8027b78:	69fa      	ldr	r2, [r7, #28]
 8027b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027b7c:	601a      	str	r2, [r3, #0]
                return 0;
 8027b7e:	2300      	movs	r3, #0
 8027b80:	e075      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8027b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027b84:	3301      	adds	r3, #1
 8027b86:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8027b88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027b8a:	f7fb fcea 	bl	8023562 <lfs_ctz>
 8027b8e:	4603      	mov	r3, r0
 8027b90:	3301      	adds	r3, #1
 8027b92:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8027b94:	683b      	ldr	r3, [r7, #0]
 8027b96:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8027b98:	2300      	movs	r3, #0
 8027b9a:	633b      	str	r3, [r7, #48]	; 0x30
 8027b9c:	e049      	b.n	8027c32 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8027b9e:	69bb      	ldr	r3, [r7, #24]
 8027ba0:	4618      	mov	r0, r3
 8027ba2:	f7fb fd12 	bl	80235ca <lfs_tole32>
 8027ba6:	4603      	mov	r3, r0
 8027ba8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8027baa:	6a3b      	ldr	r3, [r7, #32]
 8027bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027bae:	0092      	lsls	r2, r2, #2
 8027bb0:	2104      	movs	r1, #4
 8027bb2:	9103      	str	r1, [sp, #12]
 8027bb4:	f107 0118 	add.w	r1, r7, #24
 8027bb8:	9102      	str	r1, [sp, #8]
 8027bba:	9201      	str	r2, [sp, #4]
 8027bbc:	9300      	str	r3, [sp, #0]
 8027bbe:	2301      	movs	r3, #1
 8027bc0:	687a      	ldr	r2, [r7, #4]
 8027bc2:	68b9      	ldr	r1, [r7, #8]
 8027bc4:	68f8      	ldr	r0, [r7, #12]
 8027bc6:	f7fb ffa7 	bl	8023b18 <lfs_bd_prog>
 8027bca:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8027bcc:	69bb      	ldr	r3, [r7, #24]
 8027bce:	4618      	mov	r0, r3
 8027bd0:	f7fb fcf0 	bl	80235b4 <lfs_fromle32>
 8027bd4:	4603      	mov	r3, r0
 8027bd6:	61bb      	str	r3, [r7, #24]
                if (err) {
 8027bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027bda:	2b00      	cmp	r3, #0
 8027bdc:	d005      	beq.n	8027bea <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8027bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027be0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027be4:	d034      	beq.n	8027c50 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8027be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027be8:	e041      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8027bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027bec:	3b01      	subs	r3, #1
 8027bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027bf0:	429a      	cmp	r2, r3
 8027bf2:	d01b      	beq.n	8027c2c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8027bf4:	69bb      	ldr	r3, [r7, #24]
 8027bf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027bf8:	0092      	lsls	r2, r2, #2
 8027bfa:	2104      	movs	r1, #4
 8027bfc:	9103      	str	r1, [sp, #12]
 8027bfe:	f107 0118 	add.w	r1, r7, #24
 8027c02:	9102      	str	r1, [sp, #8]
 8027c04:	9201      	str	r2, [sp, #4]
 8027c06:	9300      	str	r3, [sp, #0]
 8027c08:	2304      	movs	r3, #4
 8027c0a:	687a      	ldr	r2, [r7, #4]
 8027c0c:	2100      	movs	r1, #0
 8027c0e:	68f8      	ldr	r0, [r7, #12]
 8027c10:	f7fb fd3c 	bl	802368c <lfs_bd_read>
 8027c14:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8027c16:	69bb      	ldr	r3, [r7, #24]
 8027c18:	4618      	mov	r0, r3
 8027c1a:	f7fb fccb 	bl	80235b4 <lfs_fromle32>
 8027c1e:	4603      	mov	r3, r0
 8027c20:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8027c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c24:	2b00      	cmp	r3, #0
 8027c26:	d001      	beq.n	8027c2c <lfs_ctz_extend+0x1b8>
                        return err;
 8027c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027c2a:	e020      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8027c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027c2e:	3301      	adds	r3, #1
 8027c30:	633b      	str	r3, [r7, #48]	; 0x30
 8027c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c36:	429a      	cmp	r2, r3
 8027c38:	d3b1      	bcc.n	8027b9e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8027c3a:	6a3a      	ldr	r2, [r7, #32]
 8027c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027c3e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8027c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027c42:	009a      	lsls	r2, r3, #2
 8027c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027c46:	601a      	str	r2, [r3, #0]
            return 0;
 8027c48:	2300      	movs	r3, #0
 8027c4a:	e010      	b.n	8027c6e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8027c4c:	bf00      	nop
 8027c4e:	e000      	b.n	8027c52 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8027c50:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8027c52:	6a3b      	ldr	r3, [r7, #32]
 8027c54:	4a08      	ldr	r2, [pc, #32]	; (8027c78 <lfs_ctz_extend+0x204>)
 8027c56:	9200      	str	r2, [sp, #0]
 8027c58:	f640 22da 	movw	r2, #2778	; 0xada
 8027c5c:	4907      	ldr	r1, [pc, #28]	; (8027c7c <lfs_ctz_extend+0x208>)
 8027c5e:	4808      	ldr	r0, [pc, #32]	; (8027c80 <lfs_ctz_extend+0x20c>)
 8027c60:	f005 fbb6 	bl	802d3d0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8027c64:	68b9      	ldr	r1, [r7, #8]
 8027c66:	68f8      	ldr	r0, [r7, #12]
 8027c68:	f7fb fcea 	bl	8023640 <lfs_cache_drop>
    while (true) {
 8027c6c:	e709      	b.n	8027a82 <lfs_ctz_extend+0xe>
    }
}
 8027c6e:	4618      	mov	r0, r3
 8027c70:	3738      	adds	r7, #56	; 0x38
 8027c72:	46bd      	mov	sp, r7
 8027c74:	bd80      	pop	{r7, pc}
 8027c76:	bf00      	nop
 8027c78:	0803346c 	.word	0x0803346c
 8027c7c:	08033358 	.word	0x08033358
 8027c80:	080334ec 	.word	0x080334ec

08027c84 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8027c84:	b580      	push	{r7, lr}
 8027c86:	b090      	sub	sp, #64	; 0x40
 8027c88:	af04      	add	r7, sp, #16
 8027c8a:	60f8      	str	r0, [r7, #12]
 8027c8c:	60b9      	str	r1, [r7, #8]
 8027c8e:	607a      	str	r2, [r7, #4]
 8027c90:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027c94:	2b00      	cmp	r3, #0
 8027c96:	d101      	bne.n	8027c9c <lfs_ctz_traverse+0x18>
        return 0;
 8027c98:	2300      	movs	r3, #0
 8027c9a:	e06b      	b.n	8027d74 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027c9e:	3b01      	subs	r3, #1
 8027ca0:	61fb      	str	r3, [r7, #28]
 8027ca2:	f107 031c 	add.w	r3, r7, #28
 8027ca6:	4619      	mov	r1, r3
 8027ca8:	68f8      	ldr	r0, [r7, #12]
 8027caa:	f7ff fe3f 	bl	802792c <lfs_ctz_index>
 8027cae:	4603      	mov	r3, r0
 8027cb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8027cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027cb4:	6839      	ldr	r1, [r7, #0]
 8027cb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027cb8:	4798      	blx	r3
 8027cba:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8027cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027cbe:	2b00      	cmp	r3, #0
 8027cc0:	d001      	beq.n	8027cc6 <lfs_ctz_traverse+0x42>
            return err;
 8027cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027cc4:	e056      	b.n	8027d74 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8027cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cc8:	2b00      	cmp	r3, #0
 8027cca:	d101      	bne.n	8027cd0 <lfs_ctz_traverse+0x4c>
            return 0;
 8027ccc:	2300      	movs	r3, #0
 8027cce:	e051      	b.n	8027d74 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8027cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027cd2:	f003 0301 	and.w	r3, r3, #1
 8027cd6:	f1c3 0302 	rsb	r3, r3, #2
 8027cda:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8027cdc:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 8027cde:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8027ce0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8027ce2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8027ce4:	9303      	str	r3, [sp, #12]
 8027ce6:	f107 0314 	add.w	r3, r7, #20
 8027cea:	9302      	str	r3, [sp, #8]
 8027cec:	2300      	movs	r3, #0
 8027cee:	9301      	str	r3, [sp, #4]
 8027cf0:	683b      	ldr	r3, [r7, #0]
 8027cf2:	9300      	str	r3, [sp, #0]
 8027cf4:	4613      	mov	r3, r2
 8027cf6:	687a      	ldr	r2, [r7, #4]
 8027cf8:	68b9      	ldr	r1, [r7, #8]
 8027cfa:	68f8      	ldr	r0, [r7, #12]
 8027cfc:	f7fb fcc6 	bl	802368c <lfs_bd_read>
 8027d00:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 8027d02:	697b      	ldr	r3, [r7, #20]
 8027d04:	4618      	mov	r0, r3
 8027d06:	f7fb fc55 	bl	80235b4 <lfs_fromle32>
 8027d0a:	4603      	mov	r3, r0
 8027d0c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8027d0e:	69bb      	ldr	r3, [r7, #24]
 8027d10:	4618      	mov	r0, r3
 8027d12:	f7fb fc4f 	bl	80235b4 <lfs_fromle32>
 8027d16:	4603      	mov	r3, r0
 8027d18:	61bb      	str	r3, [r7, #24]
        if (err) {
 8027d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d1c:	2b00      	cmp	r3, #0
 8027d1e:	d001      	beq.n	8027d24 <lfs_ctz_traverse+0xa0>
            return err;
 8027d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d22:	e027      	b.n	8027d74 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8027d24:	2300      	movs	r3, #0
 8027d26:	62bb      	str	r3, [r7, #40]	; 0x28
 8027d28:	e012      	b.n	8027d50 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8027d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d2c:	009b      	lsls	r3, r3, #2
 8027d2e:	3330      	adds	r3, #48	; 0x30
 8027d30:	443b      	add	r3, r7
 8027d32:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 8027d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8027d38:	4611      	mov	r1, r2
 8027d3a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8027d3c:	4798      	blx	r3
 8027d3e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8027d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d42:	2b00      	cmp	r3, #0
 8027d44:	d001      	beq.n	8027d4a <lfs_ctz_traverse+0xc6>
                return err;
 8027d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027d48:	e014      	b.n	8027d74 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8027d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027d4c:	3301      	adds	r3, #1
 8027d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8027d50:	6a3b      	ldr	r3, [r7, #32]
 8027d52:	3b01      	subs	r3, #1
 8027d54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8027d56:	429a      	cmp	r2, r3
 8027d58:	dbe7      	blt.n	8027d2a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8027d5a:	6a3b      	ldr	r3, [r7, #32]
 8027d5c:	3b01      	subs	r3, #1
 8027d5e:	009b      	lsls	r3, r3, #2
 8027d60:	3330      	adds	r3, #48	; 0x30
 8027d62:	443b      	add	r3, r7
 8027d64:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8027d68:	603b      	str	r3, [r7, #0]
        index -= count;
 8027d6a:	6a3b      	ldr	r3, [r7, #32]
 8027d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8027d6e:	1ad3      	subs	r3, r2, r3
 8027d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8027d72:	e79e      	b.n	8027cb2 <lfs_ctz_traverse+0x2e>
    }
}
 8027d74:	4618      	mov	r0, r3
 8027d76:	3730      	adds	r7, #48	; 0x30
 8027d78:	46bd      	mov	sp, r7
 8027d7a:	bd80      	pop	{r7, pc}

08027d7c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 8027d7c:	b5b0      	push	{r4, r5, r7, lr}
 8027d7e:	b09a      	sub	sp, #104	; 0x68
 8027d80:	af02      	add	r7, sp, #8
 8027d82:	60f8      	str	r0, [r7, #12]
 8027d84:	60b9      	str	r1, [r7, #8]
 8027d86:	607a      	str	r2, [r7, #4]
 8027d88:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027d8a:	683b      	ldr	r3, [r7, #0]
 8027d8c:	f003 0302 	and.w	r3, r3, #2
 8027d90:	2b00      	cmp	r3, #0
 8027d92:	d008      	beq.n	8027da6 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8027d94:	68f8      	ldr	r0, [r7, #12]
 8027d96:	f002 fb63 	bl	802a460 <lfs_fs_forceconsistency>
 8027d9a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8027d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027d9e:	2b00      	cmp	r3, #0
 8027da0:	d001      	beq.n	8027da6 <lfs_file_rawopencfg+0x2a>
            return err;
 8027da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8027da4:	e1b0      	b.n	8028108 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8027da6:	68bb      	ldr	r3, [r7, #8]
 8027da8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8027daa:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8027dac:	683a      	ldr	r2, [r7, #0]
 8027dae:	68bb      	ldr	r3, [r7, #8]
 8027db0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8027db2:	68bb      	ldr	r3, [r7, #8]
 8027db4:	2200      	movs	r2, #0
 8027db6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8027db8:	68bb      	ldr	r3, [r7, #8]
 8027dba:	2200      	movs	r2, #0
 8027dbc:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 8027dbe:	68bb      	ldr	r3, [r7, #8]
 8027dc0:	2200      	movs	r2, #0
 8027dc2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8027dc4:	68bb      	ldr	r3, [r7, #8]
 8027dc6:	f103 0108 	add.w	r1, r3, #8
 8027dca:	68bb      	ldr	r3, [r7, #8]
 8027dcc:	3304      	adds	r3, #4
 8027dce:	1d3a      	adds	r2, r7, #4
 8027dd0:	68f8      	ldr	r0, [r7, #12]
 8027dd2:	f7fd fe31 	bl	8025a38 <lfs_dir_find>
 8027dd6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8027dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027dda:	2b00      	cmp	r3, #0
 8027ddc:	da0c      	bge.n	8027df8 <lfs_file_rawopencfg+0x7c>
 8027dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027de0:	f113 0f02 	cmn.w	r3, #2
 8027de4:	d105      	bne.n	8027df2 <lfs_file_rawopencfg+0x76>
 8027de6:	68bb      	ldr	r3, [r7, #8]
 8027de8:	889b      	ldrh	r3, [r3, #4]
 8027dea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8027dee:	4293      	cmp	r3, r2
 8027df0:	d102      	bne.n	8027df8 <lfs_file_rawopencfg+0x7c>
        err = tag;
 8027df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027df4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027df6:	e17c      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8027df8:	68bb      	ldr	r3, [r7, #8]
 8027dfa:	2201      	movs	r2, #1
 8027dfc:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 8027dfe:	68b9      	ldr	r1, [r7, #8]
 8027e00:	68f8      	ldr	r0, [r7, #12]
 8027e02:	f7fc fa64 	bl	80242ce <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8027e06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027e08:	f113 0f02 	cmn.w	r3, #2
 8027e0c:	d14e      	bne.n	8027eac <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 8027e0e:	683b      	ldr	r3, [r7, #0]
 8027e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8027e14:	2b00      	cmp	r3, #0
 8027e16:	d103      	bne.n	8027e20 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8027e18:	f06f 0301 	mvn.w	r3, #1
 8027e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027e1e:	e168      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 8027e20:	687b      	ldr	r3, [r7, #4]
 8027e22:	4618      	mov	r0, r3
 8027e24:	f7e8 fa3c 	bl	80102a0 <strlen>
 8027e28:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8027e2a:	68fb      	ldr	r3, [r7, #12]
 8027e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8027e2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8027e30:	429a      	cmp	r2, r3
 8027e32:	d903      	bls.n	8027e3c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 8027e34:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027e38:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027e3a:	e15a      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8027e3c:	68bb      	ldr	r3, [r7, #8]
 8027e3e:	f103 0108 	add.w	r1, r3, #8
 8027e42:	68bb      	ldr	r3, [r7, #8]
 8027e44:	889b      	ldrh	r3, [r3, #4]
 8027e46:	029b      	lsls	r3, r3, #10
 8027e48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027e52:	2300      	movs	r3, #0
 8027e54:	633b      	str	r3, [r7, #48]	; 0x30
 8027e56:	68bb      	ldr	r3, [r7, #8]
 8027e58:	889b      	ldrh	r3, [r3, #4]
 8027e5a:	029a      	lsls	r2, r3, #10
 8027e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8027e5e:	4313      	orrs	r3, r2
 8027e60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e64:	637b      	str	r3, [r7, #52]	; 0x34
 8027e66:	687b      	ldr	r3, [r7, #4]
 8027e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8027e6a:	68bb      	ldr	r3, [r7, #8]
 8027e6c:	889b      	ldrh	r3, [r3, #4]
 8027e6e:	029b      	lsls	r3, r3, #10
 8027e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027e74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027e7a:	2300      	movs	r3, #0
 8027e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8027e7e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8027e82:	2303      	movs	r3, #3
 8027e84:	68f8      	ldr	r0, [r7, #12]
 8027e86:	f7ff fadf 	bl	8027448 <lfs_dir_commit>
 8027e8a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 8027e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027e8e:	f113 0f1c 	cmn.w	r3, #28
 8027e92:	d001      	beq.n	8027e98 <lfs_file_rawopencfg+0x11c>
 8027e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027e96:	e001      	b.n	8027e9c <lfs_file_rawopencfg+0x120>
 8027e98:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8027e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 8027e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027ea0:	2b00      	cmp	r3, #0
 8027ea2:	f040 8125 	bne.w	80280f0 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8027ea6:	4b9a      	ldr	r3, [pc, #616]	; (8028110 <lfs_file_rawopencfg+0x394>)
 8027ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8027eaa:	e044      	b.n	8027f36 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 8027eac:	683b      	ldr	r3, [r7, #0]
 8027eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	d003      	beq.n	8027ebe <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8027eb6:	f06f 0310 	mvn.w	r3, #16
 8027eba:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027ebc:	e119      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 8027ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027ec0:	4618      	mov	r0, r3
 8027ec2:	f7fb fff3 	bl	8023eac <lfs_tag_type3>
 8027ec6:	4603      	mov	r3, r0
 8027ec8:	2b01      	cmp	r3, #1
 8027eca:	d003      	beq.n	8027ed4 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 8027ecc:	f06f 0314 	mvn.w	r3, #20
 8027ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8027ed2:	e10e      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8027ed4:	683b      	ldr	r3, [r7, #0]
 8027ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8027eda:	2b00      	cmp	r3, #0
 8027edc:	d00e      	beq.n	8027efc <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 8027ede:	68bb      	ldr	r3, [r7, #8]
 8027ee0:	889b      	ldrh	r3, [r3, #4]
 8027ee2:	029b      	lsls	r3, r3, #10
 8027ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027eec:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 8027eee:	68bb      	ldr	r3, [r7, #8]
 8027ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ef2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027ef6:	68bb      	ldr	r3, [r7, #8]
 8027ef8:	631a      	str	r2, [r3, #48]	; 0x30
 8027efa:	e01c      	b.n	8027f36 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027efc:	68bb      	ldr	r3, [r7, #8]
 8027efe:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027f02:	68bb      	ldr	r3, [r7, #8]
 8027f04:	889b      	ldrh	r3, [r3, #4]
 8027f06:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027f08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027f0c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8027f10:	68ba      	ldr	r2, [r7, #8]
 8027f12:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027f14:	9200      	str	r2, [sp, #0]
 8027f16:	4a7f      	ldr	r2, [pc, #508]	; (8028114 <lfs_file_rawopencfg+0x398>)
 8027f18:	68f8      	ldr	r0, [r7, #12]
 8027f1a:	f7fc fbdb 	bl	80246d4 <lfs_dir_get>
 8027f1e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8027f20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027f22:	2b00      	cmp	r3, #0
 8027f24:	da02      	bge.n	8027f2c <lfs_file_rawopencfg+0x1b0>
            err = tag;
 8027f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8027f28:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8027f2a:	e0e2      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 8027f2c:	68bb      	ldr	r3, [r7, #8]
 8027f2e:	3328      	adds	r3, #40	; 0x28
 8027f30:	4618      	mov	r0, r3
 8027f32:	f7fc f8ed 	bl	8024110 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8027f36:	2300      	movs	r3, #0
 8027f38:	657b      	str	r3, [r7, #84]	; 0x54
 8027f3a:	e063      	b.n	8028004 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 8027f3c:	68bb      	ldr	r3, [r7, #8]
 8027f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027f40:	f003 0301 	and.w	r3, r3, #1
 8027f44:	2b00      	cmp	r3, #0
 8027f46:	d03c      	beq.n	8027fc2 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027f48:	68bb      	ldr	r3, [r7, #8]
 8027f4a:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 8027f4e:	68bb      	ldr	r3, [r7, #8]
 8027f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027f52:	6859      	ldr	r1, [r3, #4]
 8027f54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027f56:	4613      	mov	r3, r2
 8027f58:	005b      	lsls	r3, r3, #1
 8027f5a:	4413      	add	r3, r2
 8027f5c:	009b      	lsls	r3, r3, #2
 8027f5e:	440b      	add	r3, r1
 8027f60:	781b      	ldrb	r3, [r3, #0]
 8027f62:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8027f66:	051a      	lsls	r2, r3, #20
 8027f68:	68bb      	ldr	r3, [r7, #8]
 8027f6a:	889b      	ldrh	r3, [r3, #4]
 8027f6c:	029b      	lsls	r3, r3, #10
 8027f6e:	ea42 0103 	orr.w	r1, r2, r3
 8027f72:	68bb      	ldr	r3, [r7, #8]
 8027f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027f76:	6858      	ldr	r0, [r3, #4]
 8027f78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027f7a:	4613      	mov	r3, r2
 8027f7c:	005b      	lsls	r3, r3, #1
 8027f7e:	4413      	add	r3, r2
 8027f80:	009b      	lsls	r3, r3, #2
 8027f82:	4403      	add	r3, r0
 8027f84:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027f86:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 8027f8a:	68bb      	ldr	r3, [r7, #8]
 8027f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027f8e:	6859      	ldr	r1, [r3, #4]
 8027f90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027f92:	4613      	mov	r3, r2
 8027f94:	005b      	lsls	r3, r3, #1
 8027f96:	4413      	add	r3, r2
 8027f98:	009b      	lsls	r3, r3, #2
 8027f9a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8027f9c:	685b      	ldr	r3, [r3, #4]
 8027f9e:	9300      	str	r3, [sp, #0]
 8027fa0:	4603      	mov	r3, r0
 8027fa2:	4a5d      	ldr	r2, [pc, #372]	; (8028118 <lfs_file_rawopencfg+0x39c>)
 8027fa4:	4621      	mov	r1, r4
 8027fa6:	68f8      	ldr	r0, [r7, #12]
 8027fa8:	f7fc fb94 	bl	80246d4 <lfs_dir_get>
 8027fac:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 8027fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027fb0:	2b00      	cmp	r3, #0
 8027fb2:	da06      	bge.n	8027fc2 <lfs_file_rawopencfg+0x246>
 8027fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027fb6:	f113 0f02 	cmn.w	r3, #2
 8027fba:	d002      	beq.n	8027fc2 <lfs_file_rawopencfg+0x246>
                err = res;
 8027fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8027fc0:	e097      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8027fc2:	68bb      	ldr	r3, [r7, #8]
 8027fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027fc6:	f003 0302 	and.w	r3, r3, #2
 8027fca:	2b00      	cmp	r3, #0
 8027fcc:	d017      	beq.n	8027ffe <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 8027fce:	68bb      	ldr	r3, [r7, #8]
 8027fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8027fd2:	6859      	ldr	r1, [r3, #4]
 8027fd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8027fd6:	4613      	mov	r3, r2
 8027fd8:	005b      	lsls	r3, r3, #1
 8027fda:	4413      	add	r3, r2
 8027fdc:	009b      	lsls	r3, r3, #2
 8027fde:	440b      	add	r3, r1
 8027fe0:	689a      	ldr	r2, [r3, #8]
 8027fe2:	68fb      	ldr	r3, [r7, #12]
 8027fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8027fe6:	429a      	cmp	r2, r3
 8027fe8:	d903      	bls.n	8027ff2 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 8027fea:	f06f 031b 	mvn.w	r3, #27
 8027fee:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8027ff0:	e07f      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 8027ff2:	68bb      	ldr	r3, [r7, #8]
 8027ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8027ff6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8027ffa:	68bb      	ldr	r3, [r7, #8]
 8027ffc:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8027ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8028000:	3301      	adds	r3, #1
 8028002:	657b      	str	r3, [r7, #84]	; 0x54
 8028004:	68bb      	ldr	r3, [r7, #8]
 8028006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028008:	689b      	ldr	r3, [r3, #8]
 802800a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802800c:	429a      	cmp	r2, r3
 802800e:	d395      	bcc.n	8027f3c <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8028010:	68bb      	ldr	r3, [r7, #8]
 8028012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028014:	681b      	ldr	r3, [r3, #0]
 8028016:	2b00      	cmp	r3, #0
 8028018:	d005      	beq.n	8028026 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 802801a:	68bb      	ldr	r3, [r7, #8]
 802801c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802801e:	681a      	ldr	r2, [r3, #0]
 8028020:	68bb      	ldr	r3, [r7, #8]
 8028022:	64da      	str	r2, [r3, #76]	; 0x4c
 8028024:	e010      	b.n	8028048 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8028026:	68fb      	ldr	r3, [r7, #12]
 8028028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802802c:	4618      	mov	r0, r3
 802802e:	f7fb faf0 	bl	8023612 <lfs_malloc>
 8028032:	4602      	mov	r2, r0
 8028034:	68bb      	ldr	r3, [r7, #8]
 8028036:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8028038:	68bb      	ldr	r3, [r7, #8]
 802803a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802803c:	2b00      	cmp	r3, #0
 802803e:	d103      	bne.n	8028048 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 8028040:	f06f 030b 	mvn.w	r3, #11
 8028044:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8028046:	e054      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 8028048:	68bb      	ldr	r3, [r7, #8]
 802804a:	3340      	adds	r3, #64	; 0x40
 802804c:	4619      	mov	r1, r3
 802804e:	68f8      	ldr	r0, [r7, #12]
 8028050:	f7fb fb05 	bl	802365e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8028054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028056:	4618      	mov	r0, r3
 8028058:	f7fb ff28 	bl	8023eac <lfs_tag_type3>
 802805c:	4603      	mov	r3, r0
 802805e:	461a      	mov	r2, r3
 8028060:	f240 2301 	movw	r3, #513	; 0x201
 8028064:	429a      	cmp	r2, r3
 8028066:	d141      	bne.n	80280ec <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8028068:	68bb      	ldr	r3, [r7, #8]
 802806a:	f06f 0201 	mvn.w	r2, #1
 802806e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8028070:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028072:	4618      	mov	r0, r3
 8028074:	f7fb ff54 	bl	8023f20 <lfs_tag_size>
 8028078:	4602      	mov	r2, r0
 802807a:	68bb      	ldr	r3, [r7, #8]
 802807c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 802807e:	68bb      	ldr	r3, [r7, #8]
 8028080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028082:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8028086:	68bb      	ldr	r3, [r7, #8]
 8028088:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 802808a:	68bb      	ldr	r3, [r7, #8]
 802808c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802808e:	68bb      	ldr	r3, [r7, #8]
 8028090:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8028092:	68bb      	ldr	r3, [r7, #8]
 8028094:	2200      	movs	r2, #0
 8028096:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8028098:	68fb      	ldr	r3, [r7, #12]
 802809a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802809c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802809e:	68bb      	ldr	r3, [r7, #8]
 80280a0:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 80280a2:	68bb      	ldr	r3, [r7, #8]
 80280a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80280a6:	2b00      	cmp	r3, #0
 80280a8:	d020      	beq.n	80280ec <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80280aa:	68bb      	ldr	r3, [r7, #8]
 80280ac:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 80280b0:	68bb      	ldr	r3, [r7, #8]
 80280b2:	889b      	ldrh	r3, [r3, #4]
 80280b4:	029c      	lsls	r4, r3, #10
 80280b6:	68bb      	ldr	r3, [r7, #8]
 80280b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80280ba:	f240 31fe 	movw	r1, #1022	; 0x3fe
 80280be:	4618      	mov	r0, r3
 80280c0:	f7fb fa08 	bl	80234d4 <lfs_min>
 80280c4:	4603      	mov	r3, r0
 80280c6:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80280c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 80280cc:	68bb      	ldr	r3, [r7, #8]
 80280ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80280d0:	9300      	str	r3, [sp, #0]
 80280d2:	4613      	mov	r3, r2
 80280d4:	4a0f      	ldr	r2, [pc, #60]	; (8028114 <lfs_file_rawopencfg+0x398>)
 80280d6:	4629      	mov	r1, r5
 80280d8:	68f8      	ldr	r0, [r7, #12]
 80280da:	f7fc fafb 	bl	80246d4 <lfs_dir_get>
 80280de:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 80280e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80280e2:	2b00      	cmp	r3, #0
 80280e4:	da02      	bge.n	80280ec <lfs_file_rawopencfg+0x370>
                err = res;
 80280e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80280e8:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80280ea:	e002      	b.n	80280f2 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 80280ec:	2300      	movs	r3, #0
 80280ee:	e00b      	b.n	8028108 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80280f0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80280f2:	68bb      	ldr	r3, [r7, #8]
 80280f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80280f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80280fa:	68bb      	ldr	r3, [r7, #8]
 80280fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80280fe:	68b9      	ldr	r1, [r7, #8]
 8028100:	68f8      	ldr	r0, [r7, #12]
 8028102:	f000 f80b 	bl	802811c <lfs_file_rawclose>
    return err;
 8028106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8028108:	4618      	mov	r0, r3
 802810a:	3760      	adds	r7, #96	; 0x60
 802810c:	46bd      	mov	sp, r7
 802810e:	bdb0      	pop	{r4, r5, r7, pc}
 8028110:	20100000 	.word	0x20100000
 8028114:	700ffc00 	.word	0x700ffc00
 8028118:	7ffffc00 	.word	0x7ffffc00

0802811c <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 802811c:	b580      	push	{r7, lr}
 802811e:	b084      	sub	sp, #16
 8028120:	af00      	add	r7, sp, #0
 8028122:	6078      	str	r0, [r7, #4]
 8028124:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8028126:	6839      	ldr	r1, [r7, #0]
 8028128:	6878      	ldr	r0, [r7, #4]
 802812a:	f000 f9e5 	bl	80284f8 <lfs_file_rawsync>
 802812e:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8028130:	6839      	ldr	r1, [r7, #0]
 8028132:	6878      	ldr	r0, [r7, #4]
 8028134:	f7fc f8a9 	bl	802428a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8028138:	683b      	ldr	r3, [r7, #0]
 802813a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802813c:	681b      	ldr	r3, [r3, #0]
 802813e:	2b00      	cmp	r3, #0
 8028140:	d104      	bne.n	802814c <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8028142:	683b      	ldr	r3, [r7, #0]
 8028144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8028146:	4618      	mov	r0, r3
 8028148:	f7fb fa6f 	bl	802362a <lfs_free>
    }

    return err;
 802814c:	68fb      	ldr	r3, [r7, #12]
}
 802814e:	4618      	mov	r0, r3
 8028150:	3710      	adds	r7, #16
 8028152:	46bd      	mov	sp, r7
 8028154:	bd80      	pop	{r7, pc}
	...

08028158 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8028158:	b590      	push	{r4, r7, lr}
 802815a:	b08d      	sub	sp, #52	; 0x34
 802815c:	af06      	add	r7, sp, #24
 802815e:	6078      	str	r0, [r7, #4]
 8028160:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8028162:	f107 030c 	add.w	r3, r7, #12
 8028166:	4619      	mov	r1, r3
 8028168:	6878      	ldr	r0, [r7, #4]
 802816a:	f7fc f919 	bl	80243a0 <lfs_alloc>
 802816e:	6138      	str	r0, [r7, #16]
        if (err) {
 8028170:	693b      	ldr	r3, [r7, #16]
 8028172:	2b00      	cmp	r3, #0
 8028174:	d001      	beq.n	802817a <lfs_file_relocate+0x22>
            return err;
 8028176:	693b      	ldr	r3, [r7, #16]
 8028178:	e0bb      	b.n	80282f2 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 802817a:	68fb      	ldr	r3, [r7, #12]
 802817c:	4619      	mov	r1, r3
 802817e:	6878      	ldr	r0, [r7, #4]
 8028180:	f7fb fd76 	bl	8023c70 <lfs_bd_erase>
 8028184:	6138      	str	r0, [r7, #16]
        if (err) {
 8028186:	693b      	ldr	r3, [r7, #16]
 8028188:	2b00      	cmp	r3, #0
 802818a:	d006      	beq.n	802819a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 802818c:	693b      	ldr	r3, [r7, #16]
 802818e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028192:	f000 809b 	beq.w	80282cc <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8028196:	693b      	ldr	r3, [r7, #16]
 8028198:	e0ab      	b.n	80282f2 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 802819a:	2300      	movs	r3, #0
 802819c:	617b      	str	r3, [r7, #20]
 802819e:	e069      	b.n	8028274 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80281a0:	683b      	ldr	r3, [r7, #0]
 80281a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80281a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80281a8:	2b00      	cmp	r3, #0
 80281aa:	d027      	beq.n	80281fc <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 80281ac:	683b      	ldr	r3, [r7, #0]
 80281ae:	f103 0008 	add.w	r0, r3, #8
 80281b2:	683b      	ldr	r3, [r7, #0]
 80281b4:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80281b8:	683b      	ldr	r3, [r7, #0]
 80281ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 80281bc:	697b      	ldr	r3, [r7, #20]
 80281be:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80281c0:	683b      	ldr	r3, [r7, #0]
 80281c2:	889b      	ldrh	r3, [r3, #4]
 80281c4:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 80281c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80281ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80281ce:	2101      	movs	r1, #1
 80281d0:	9105      	str	r1, [sp, #20]
 80281d2:	f107 010b 	add.w	r1, r7, #11
 80281d6:	9104      	str	r1, [sp, #16]
 80281d8:	6979      	ldr	r1, [r7, #20]
 80281da:	9103      	str	r1, [sp, #12]
 80281dc:	9302      	str	r3, [sp, #8]
 80281de:	4b47      	ldr	r3, [pc, #284]	; (80282fc <lfs_file_relocate+0x1a4>)
 80281e0:	9301      	str	r3, [sp, #4]
 80281e2:	9200      	str	r2, [sp, #0]
 80281e4:	4623      	mov	r3, r4
 80281e6:	2200      	movs	r2, #0
 80281e8:	4601      	mov	r1, r0
 80281ea:	6878      	ldr	r0, [r7, #4]
 80281ec:	f7fc fa8d 	bl	802470a <lfs_dir_getread>
 80281f0:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80281f2:	693b      	ldr	r3, [r7, #16]
 80281f4:	2b00      	cmp	r3, #0
 80281f6:	d01e      	beq.n	8028236 <lfs_file_relocate+0xde>
                    return err;
 80281f8:	693b      	ldr	r3, [r7, #16]
 80281fa:	e07a      	b.n	80282f2 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80281fc:	683b      	ldr	r3, [r7, #0]
 80281fe:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8028202:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8028204:	683b      	ldr	r3, [r7, #0]
 8028206:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8028208:	697b      	ldr	r3, [r7, #20]
 802820a:	1ad4      	subs	r4, r2, r3
 802820c:	683b      	ldr	r3, [r7, #0]
 802820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028210:	2201      	movs	r2, #1
 8028212:	9203      	str	r2, [sp, #12]
 8028214:	f107 020b 	add.w	r2, r7, #11
 8028218:	9202      	str	r2, [sp, #8]
 802821a:	697a      	ldr	r2, [r7, #20]
 802821c:	9201      	str	r2, [sp, #4]
 802821e:	9300      	str	r3, [sp, #0]
 8028220:	4623      	mov	r3, r4
 8028222:	4602      	mov	r2, r0
 8028224:	6878      	ldr	r0, [r7, #4]
 8028226:	f7fb fa31 	bl	802368c <lfs_bd_read>
 802822a:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 802822c:	693b      	ldr	r3, [r7, #16]
 802822e:	2b00      	cmp	r3, #0
 8028230:	d001      	beq.n	8028236 <lfs_file_relocate+0xde>
                    return err;
 8028232:	693b      	ldr	r3, [r7, #16]
 8028234:	e05d      	b.n	80282f2 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8028236:	687b      	ldr	r3, [r7, #4]
 8028238:	f103 0110 	add.w	r1, r3, #16
 802823c:	6878      	ldr	r0, [r7, #4]
 802823e:	68fb      	ldr	r3, [r7, #12]
 8028240:	2201      	movs	r2, #1
 8028242:	9203      	str	r2, [sp, #12]
 8028244:	f107 020b 	add.w	r2, r7, #11
 8028248:	9202      	str	r2, [sp, #8]
 802824a:	697a      	ldr	r2, [r7, #20]
 802824c:	9201      	str	r2, [sp, #4]
 802824e:	9300      	str	r3, [sp, #0]
 8028250:	2301      	movs	r3, #1
 8028252:	4602      	mov	r2, r0
 8028254:	6878      	ldr	r0, [r7, #4]
 8028256:	f7fb fc5f 	bl	8023b18 <lfs_bd_prog>
 802825a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 802825c:	693b      	ldr	r3, [r7, #16]
 802825e:	2b00      	cmp	r3, #0
 8028260:	d005      	beq.n	802826e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8028262:	693b      	ldr	r3, [r7, #16]
 8028264:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028268:	d032      	beq.n	80282d0 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 802826a:	693b      	ldr	r3, [r7, #16]
 802826c:	e041      	b.n	80282f2 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 802826e:	697b      	ldr	r3, [r7, #20]
 8028270:	3301      	adds	r3, #1
 8028272:	617b      	str	r3, [r7, #20]
 8028274:	683b      	ldr	r3, [r7, #0]
 8028276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028278:	697a      	ldr	r2, [r7, #20]
 802827a:	429a      	cmp	r2, r3
 802827c:	d390      	bcc.n	80281a0 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 802827e:	683b      	ldr	r3, [r7, #0]
 8028280:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8028282:	687b      	ldr	r3, [r7, #4]
 8028284:	69d9      	ldr	r1, [r3, #28]
 8028286:	687b      	ldr	r3, [r7, #4]
 8028288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802828a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802828c:	461a      	mov	r2, r3
 802828e:	f005 fc0a 	bl	802daa6 <memcpy>
        file->cache.block = lfs->pcache.block;
 8028292:	687b      	ldr	r3, [r7, #4]
 8028294:	691a      	ldr	r2, [r3, #16]
 8028296:	683b      	ldr	r3, [r7, #0]
 8028298:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 802829a:	687b      	ldr	r3, [r7, #4]
 802829c:	695a      	ldr	r2, [r3, #20]
 802829e:	683b      	ldr	r3, [r7, #0]
 80282a0:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80282a2:	687b      	ldr	r3, [r7, #4]
 80282a4:	699a      	ldr	r2, [r3, #24]
 80282a6:	683b      	ldr	r3, [r7, #0]
 80282a8:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80282aa:	687b      	ldr	r3, [r7, #4]
 80282ac:	3310      	adds	r3, #16
 80282ae:	4619      	mov	r1, r3
 80282b0:	6878      	ldr	r0, [r7, #4]
 80282b2:	f7fb f9d4 	bl	802365e <lfs_cache_zero>

        file->block = nblock;
 80282b6:	68fa      	ldr	r2, [r7, #12]
 80282b8:	683b      	ldr	r3, [r7, #0]
 80282ba:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 80282bc:	683b      	ldr	r3, [r7, #0]
 80282be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80282c4:	683b      	ldr	r3, [r7, #0]
 80282c6:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 80282c8:	2300      	movs	r3, #0
 80282ca:	e012      	b.n	80282f2 <lfs_file_relocate+0x19a>
                goto relocate;
 80282cc:	bf00      	nop
 80282ce:	e000      	b.n	80282d2 <lfs_file_relocate+0x17a>
                    goto relocate;
 80282d0:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80282d2:	68fb      	ldr	r3, [r7, #12]
 80282d4:	4a0a      	ldr	r2, [pc, #40]	; (8028300 <lfs_file_relocate+0x1a8>)
 80282d6:	9200      	str	r2, [sp, #0]
 80282d8:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 80282dc:	4909      	ldr	r1, [pc, #36]	; (8028304 <lfs_file_relocate+0x1ac>)
 80282de:	480a      	ldr	r0, [pc, #40]	; (8028308 <lfs_file_relocate+0x1b0>)
 80282e0:	f005 f876 	bl	802d3d0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 80282e4:	687b      	ldr	r3, [r7, #4]
 80282e6:	3310      	adds	r3, #16
 80282e8:	4619      	mov	r1, r3
 80282ea:	6878      	ldr	r0, [r7, #4]
 80282ec:	f7fb f9a8 	bl	8023640 <lfs_cache_drop>
    while (true) {
 80282f0:	e737      	b.n	8028162 <lfs_file_relocate+0xa>
    }
}
 80282f2:	4618      	mov	r0, r3
 80282f4:	371c      	adds	r7, #28
 80282f6:	46bd      	mov	sp, r7
 80282f8:	bd90      	pop	{r4, r7, pc}
 80282fa:	bf00      	nop
 80282fc:	fff7fc00 	.word	0xfff7fc00
 8028300:	0803346c 	.word	0x0803346c
 8028304:	08033358 	.word	0x08033358
 8028308:	080334ec 	.word	0x080334ec

0802830c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 802830c:	b580      	push	{r7, lr}
 802830e:	b084      	sub	sp, #16
 8028310:	af00      	add	r7, sp, #0
 8028312:	6078      	str	r0, [r7, #4]
 8028314:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8028316:	683b      	ldr	r3, [r7, #0]
 8028318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802831a:	683b      	ldr	r3, [r7, #0]
 802831c:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 802831e:	6878      	ldr	r0, [r7, #4]
 8028320:	f7fc f81e 	bl	8024360 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8028324:	6839      	ldr	r1, [r7, #0]
 8028326:	6878      	ldr	r0, [r7, #4]
 8028328:	f7ff ff16 	bl	8028158 <lfs_file_relocate>
 802832c:	60f8      	str	r0, [r7, #12]
    if (err) {
 802832e:	68fb      	ldr	r3, [r7, #12]
 8028330:	2b00      	cmp	r3, #0
 8028332:	d001      	beq.n	8028338 <lfs_file_outline+0x2c>
        return err;
 8028334:	68fb      	ldr	r3, [r7, #12]
 8028336:	e006      	b.n	8028346 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8028338:	683b      	ldr	r3, [r7, #0]
 802833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802833c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8028340:	683b      	ldr	r3, [r7, #0]
 8028342:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8028344:	2300      	movs	r3, #0
}
 8028346:	4618      	mov	r0, r3
 8028348:	3710      	adds	r7, #16
 802834a:	46bd      	mov	sp, r7
 802834c:	bd80      	pop	{r7, pc}
	...

08028350 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8028350:	b590      	push	{r4, r7, lr}
 8028352:	b09f      	sub	sp, #124	; 0x7c
 8028354:	af02      	add	r7, sp, #8
 8028356:	6078      	str	r0, [r7, #4]
 8028358:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 802835a:	683b      	ldr	r3, [r7, #0]
 802835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802835e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028362:	2b00      	cmp	r3, #0
 8028364:	d011      	beq.n	802838a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8028366:	683b      	ldr	r3, [r7, #0]
 8028368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802836a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802836e:	2b00      	cmp	r3, #0
 8028370:	d105      	bne.n	802837e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8028372:	683b      	ldr	r3, [r7, #0]
 8028374:	3340      	adds	r3, #64	; 0x40
 8028376:	4619      	mov	r1, r3
 8028378:	6878      	ldr	r0, [r7, #4]
 802837a:	f7fb f961 	bl	8023640 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 802837e:	683b      	ldr	r3, [r7, #0]
 8028380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028382:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8028386:	683b      	ldr	r3, [r7, #0]
 8028388:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802838a:	683b      	ldr	r3, [r7, #0]
 802838c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802838e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028392:	2b00      	cmp	r3, #0
 8028394:	f000 80a4 	beq.w	80284e0 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8028398:	683b      	ldr	r3, [r7, #0]
 802839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802839c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 802839e:	683b      	ldr	r3, [r7, #0]
 80283a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80283a6:	2b00      	cmp	r3, #0
 80283a8:	d176      	bne.n	8028498 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 80283aa:	f107 030c 	add.w	r3, r7, #12
 80283ae:	2254      	movs	r2, #84	; 0x54
 80283b0:	2100      	movs	r1, #0
 80283b2:	4618      	mov	r0, r3
 80283b4:	f005 f9a2 	bl	802d6fc <memset>
                .ctz.head = file->ctz.head,
 80283b8:	683b      	ldr	r3, [r7, #0]
 80283ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 80283bc:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 80283be:	683b      	ldr	r3, [r7, #0]
 80283c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 80283c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80283c4:	2301      	movs	r3, #1
 80283c6:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 80283c8:	683b      	ldr	r3, [r7, #0]
 80283ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 80283cc:	643b      	str	r3, [r7, #64]	; 0x40
 80283ce:	687b      	ldr	r3, [r7, #4]
 80283d0:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 80283d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80283d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 80283da:	687b      	ldr	r3, [r7, #4]
 80283dc:	4619      	mov	r1, r3
 80283de:	6878      	ldr	r0, [r7, #4]
 80283e0:	f7fb f92e 	bl	8023640 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 80283e4:	e02b      	b.n	802843e <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 80283e6:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80283ea:	f107 010c 	add.w	r1, r7, #12
 80283ee:	2301      	movs	r3, #1
 80283f0:	6878      	ldr	r0, [r7, #4]
 80283f2:	f000 f90d 	bl	8028610 <lfs_file_flushedread>
 80283f6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80283f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80283fa:	2b00      	cmp	r3, #0
 80283fc:	da01      	bge.n	8028402 <lfs_file_flush+0xb2>
                    return res;
 80283fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8028400:	e06f      	b.n	80284e2 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 8028402:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8028406:	2301      	movs	r3, #1
 8028408:	6839      	ldr	r1, [r7, #0]
 802840a:	6878      	ldr	r0, [r7, #4]
 802840c:	f000 fa08 	bl	8028820 <lfs_file_flushedwrite>
 8028410:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8028412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8028414:	2b00      	cmp	r3, #0
 8028416:	da01      	bge.n	802841c <lfs_file_flush+0xcc>
                    return res;
 8028418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802841a:	e062      	b.n	80284e2 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 802841c:	687b      	ldr	r3, [r7, #4]
 802841e:	681b      	ldr	r3, [r3, #0]
 8028420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8028424:	d00b      	beq.n	802843e <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8028426:	f107 030c 	add.w	r3, r7, #12
 802842a:	3340      	adds	r3, #64	; 0x40
 802842c:	4619      	mov	r1, r3
 802842e:	6878      	ldr	r0, [r7, #4]
 8028430:	f7fb f906 	bl	8023640 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8028434:	687b      	ldr	r3, [r7, #4]
 8028436:	4619      	mov	r1, r3
 8028438:	6878      	ldr	r0, [r7, #4]
 802843a:	f7fb f901 	bl	8023640 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 802843e:	683b      	ldr	r3, [r7, #0]
 8028440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028442:	683b      	ldr	r3, [r7, #0]
 8028444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028446:	429a      	cmp	r2, r3
 8028448:	d3cd      	bcc.n	80283e6 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 802844a:	683b      	ldr	r3, [r7, #0]
 802844c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8028450:	687a      	ldr	r2, [r7, #4]
 8028452:	2301      	movs	r3, #1
 8028454:	6878      	ldr	r0, [r7, #4]
 8028456:	f7fb faaf 	bl	80239b8 <lfs_bd_flush>
 802845a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802845c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802845e:	2b00      	cmp	r3, #0
 8028460:	d026      	beq.n	80284b0 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8028462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028464:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028468:	d001      	beq.n	802846e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 802846a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802846c:	e039      	b.n	80284e2 <lfs_file_flush+0x192>
                        goto relocate;
 802846e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8028470:	683b      	ldr	r3, [r7, #0]
 8028472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028474:	4a1d      	ldr	r2, [pc, #116]	; (80284ec <lfs_file_flush+0x19c>)
 8028476:	9200      	str	r2, [sp, #0]
 8028478:	f640 425f 	movw	r2, #3167	; 0xc5f
 802847c:	491c      	ldr	r1, [pc, #112]	; (80284f0 <lfs_file_flush+0x1a0>)
 802847e:	481d      	ldr	r0, [pc, #116]	; (80284f4 <lfs_file_flush+0x1a4>)
 8028480:	f004 ffa6 	bl	802d3d0 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8028484:	6839      	ldr	r1, [r7, #0]
 8028486:	6878      	ldr	r0, [r7, #4]
 8028488:	f7ff fe66 	bl	8028158 <lfs_file_relocate>
 802848c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802848e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028490:	2b00      	cmp	r3, #0
 8028492:	d0da      	beq.n	802844a <lfs_file_flush+0xfa>
                    return err;
 8028494:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028496:	e024      	b.n	80284e2 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8028498:	683b      	ldr	r3, [r7, #0]
 802849a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802849c:	683b      	ldr	r3, [r7, #0]
 802849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80284a0:	4619      	mov	r1, r3
 80284a2:	4610      	mov	r0, r2
 80284a4:	f7fb f806 	bl	80234b4 <lfs_max>
 80284a8:	4602      	mov	r2, r0
 80284aa:	683b      	ldr	r3, [r7, #0]
 80284ac:	635a      	str	r2, [r3, #52]	; 0x34
 80284ae:	e000      	b.n	80284b2 <lfs_file_flush+0x162>
                break;
 80284b0:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 80284b2:	683b      	ldr	r3, [r7, #0]
 80284b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80284b6:	683b      	ldr	r3, [r7, #0]
 80284b8:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 80284ba:	683b      	ldr	r3, [r7, #0]
 80284bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80284be:	683b      	ldr	r3, [r7, #0]
 80284c0:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 80284c2:	683b      	ldr	r3, [r7, #0]
 80284c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80284ca:	683b      	ldr	r3, [r7, #0]
 80284cc:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 80284ce:	683b      	ldr	r3, [r7, #0]
 80284d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80284d6:	683b      	ldr	r3, [r7, #0]
 80284d8:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 80284da:	683b      	ldr	r3, [r7, #0]
 80284dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80284de:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 80284e0:	2300      	movs	r3, #0
}
 80284e2:	4618      	mov	r0, r3
 80284e4:	3774      	adds	r7, #116	; 0x74
 80284e6:	46bd      	mov	sp, r7
 80284e8:	bd90      	pop	{r4, r7, pc}
 80284ea:	bf00      	nop
 80284ec:	0803346c 	.word	0x0803346c
 80284f0:	08033358 	.word	0x08033358
 80284f4:	080334ec 	.word	0x080334ec

080284f8 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80284f8:	b580      	push	{r7, lr}
 80284fa:	b090      	sub	sp, #64	; 0x40
 80284fc:	af00      	add	r7, sp, #0
 80284fe:	6078      	str	r0, [r7, #4]
 8028500:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8028502:	683b      	ldr	r3, [r7, #0]
 8028504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 802850a:	2b00      	cmp	r3, #0
 802850c:	d001      	beq.n	8028512 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 802850e:	2300      	movs	r3, #0
 8028510:	e07a      	b.n	8028608 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8028512:	6839      	ldr	r1, [r7, #0]
 8028514:	6878      	ldr	r0, [r7, #4]
 8028516:	f7ff ff1b 	bl	8028350 <lfs_file_flush>
 802851a:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 802851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802851e:	2b00      	cmp	r3, #0
 8028520:	d007      	beq.n	8028532 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8028522:	683b      	ldr	r3, [r7, #0]
 8028524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028526:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 802852a:	683b      	ldr	r3, [r7, #0]
 802852c:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 802852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028530:	e06a      	b.n	8028608 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8028532:	683b      	ldr	r3, [r7, #0]
 8028534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802853a:	2b00      	cmp	r3, #0
 802853c:	d063      	beq.n	8028606 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 802853e:	683b      	ldr	r3, [r7, #0]
 8028540:	3308      	adds	r3, #8
 8028542:	4618      	mov	r0, r3
 8028544:	f7fb fbdb 	bl	8023cfe <lfs_pair_isnull>
 8028548:	4603      	mov	r3, r0
 802854a:	f083 0301 	eor.w	r3, r3, #1
 802854e:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8028550:	2b00      	cmp	r3, #0
 8028552:	d058      	beq.n	8028606 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8028554:	683b      	ldr	r3, [r7, #0]
 8028556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802855c:	2b00      	cmp	r3, #0
 802855e:	d009      	beq.n	8028574 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028560:	f240 2301 	movw	r3, #513	; 0x201
 8028564:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8028566:	683b      	ldr	r3, [r7, #0]
 8028568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802856a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 802856c:	683b      	ldr	r3, [r7, #0]
 802856e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028570:	637b      	str	r3, [r7, #52]	; 0x34
 8028572:	e014      	b.n	802859e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8028574:	f240 2302 	movw	r3, #514	; 0x202
 8028578:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 802857a:	683a      	ldr	r2, [r7, #0]
 802857c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028580:	3228      	adds	r2, #40	; 0x28
 8028582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028586:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802858a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802858e:	4618      	mov	r0, r3
 8028590:	f7fb fdd6 	bl	8024140 <lfs_ctz_tole32>
            buffer = &ctz;
 8028594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028598:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 802859a:	2308      	movs	r3, #8
 802859c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802859e:	683b      	ldr	r3, [r7, #0]
 80285a0:	f103 0108 	add.w	r1, r3, #8
 80285a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80285a6:	051a      	lsls	r2, r3, #20
 80285a8:	683b      	ldr	r3, [r7, #0]
 80285aa:	889b      	ldrh	r3, [r3, #4]
 80285ac:	029b      	lsls	r3, r3, #10
 80285ae:	431a      	orrs	r2, r3
 80285b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80285b2:	4313      	orrs	r3, r2
 80285b4:	61bb      	str	r3, [r7, #24]
 80285b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80285b8:	61fb      	str	r3, [r7, #28]
 80285ba:	683b      	ldr	r3, [r7, #0]
 80285bc:	889b      	ldrh	r3, [r3, #4]
 80285be:	029a      	lsls	r2, r3, #10
 80285c0:	683b      	ldr	r3, [r7, #0]
 80285c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80285c4:	689b      	ldr	r3, [r3, #8]
 80285c6:	4313      	orrs	r3, r2
 80285c8:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 80285cc:	623b      	str	r3, [r7, #32]
 80285ce:	683b      	ldr	r3, [r7, #0]
 80285d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80285d2:	685b      	ldr	r3, [r3, #4]
 80285d4:	627b      	str	r3, [r7, #36]	; 0x24
 80285d6:	f107 0218 	add.w	r2, r7, #24
 80285da:	2302      	movs	r3, #2
 80285dc:	6878      	ldr	r0, [r7, #4]
 80285de:	f7fe ff33 	bl	8027448 <lfs_dir_commit>
 80285e2:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 80285e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80285e6:	2b00      	cmp	r3, #0
 80285e8:	d007      	beq.n	80285fa <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 80285ea:	683b      	ldr	r3, [r7, #0]
 80285ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80285f2:	683b      	ldr	r3, [r7, #0]
 80285f4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80285f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80285f8:	e006      	b.n	8028608 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80285fa:	683b      	ldr	r3, [r7, #0]
 80285fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80285fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8028602:	683b      	ldr	r3, [r7, #0]
 8028604:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8028606:	2300      	movs	r3, #0
}
 8028608:	4618      	mov	r0, r3
 802860a:	3740      	adds	r7, #64	; 0x40
 802860c:	46bd      	mov	sp, r7
 802860e:	bd80      	pop	{r7, pc}

08028610 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028610:	b5b0      	push	{r4, r5, r7, lr}
 8028612:	b090      	sub	sp, #64	; 0x40
 8028614:	af06      	add	r7, sp, #24
 8028616:	60f8      	str	r0, [r7, #12]
 8028618:	60b9      	str	r1, [r7, #8]
 802861a:	607a      	str	r2, [r7, #4]
 802861c:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 802861e:	687b      	ldr	r3, [r7, #4]
 8028620:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 8028622:	683b      	ldr	r3, [r7, #0]
 8028624:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 8028626:	68bb      	ldr	r3, [r7, #8]
 8028628:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802862a:	68bb      	ldr	r3, [r7, #8]
 802862c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802862e:	429a      	cmp	r2, r3
 8028630:	d301      	bcc.n	8028636 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 8028632:	2300      	movs	r3, #0
 8028634:	e0b7      	b.n	80287a6 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8028636:	68bb      	ldr	r3, [r7, #8]
 8028638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802863a:	68bb      	ldr	r3, [r7, #8]
 802863c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802863e:	1ad3      	subs	r3, r2, r3
 8028640:	4619      	mov	r1, r3
 8028642:	6838      	ldr	r0, [r7, #0]
 8028644:	f7fa ff46 	bl	80234d4 <lfs_min>
 8028648:	6038      	str	r0, [r7, #0]
    nsize = size;
 802864a:	683b      	ldr	r3, [r7, #0]
 802864c:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 802864e:	e0a5      	b.n	802879c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8028650:	68bb      	ldr	r3, [r7, #8]
 8028652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028658:	2b00      	cmp	r3, #0
 802865a:	d006      	beq.n	802866a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 802865c:	68bb      	ldr	r3, [r7, #8]
 802865e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028660:	68fb      	ldr	r3, [r7, #12]
 8028662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028664:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028666:	429a      	cmp	r2, r3
 8028668:	d130      	bne.n	80286cc <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 802866a:	68bb      	ldr	r3, [r7, #8]
 802866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802866e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028672:	2b00      	cmp	r3, #0
 8028674:	d11c      	bne.n	80286b0 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028676:	68bb      	ldr	r3, [r7, #8]
 8028678:	f103 0440 	add.w	r4, r3, #64	; 0x40
 802867c:	68bb      	ldr	r3, [r7, #8]
 802867e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028680:	68bb      	ldr	r3, [r7, #8]
 8028682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028684:	68ba      	ldr	r2, [r7, #8]
 8028686:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028688:	68b9      	ldr	r1, [r7, #8]
 802868a:	3138      	adds	r1, #56	; 0x38
 802868c:	68b8      	ldr	r0, [r7, #8]
 802868e:	303c      	adds	r0, #60	; 0x3c
 8028690:	9003      	str	r0, [sp, #12]
 8028692:	9102      	str	r1, [sp, #8]
 8028694:	9201      	str	r2, [sp, #4]
 8028696:	9300      	str	r3, [sp, #0]
 8028698:	462b      	mov	r3, r5
 802869a:	4622      	mov	r2, r4
 802869c:	2100      	movs	r1, #0
 802869e:	68f8      	ldr	r0, [r7, #12]
 80286a0:	f7ff f97c 	bl	802799c <lfs_ctz_find>
 80286a4:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 80286a6:	69fb      	ldr	r3, [r7, #28]
 80286a8:	2b00      	cmp	r3, #0
 80286aa:	d009      	beq.n	80286c0 <lfs_file_flushedread+0xb0>
                    return err;
 80286ac:	69fb      	ldr	r3, [r7, #28]
 80286ae:	e07a      	b.n	80287a6 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80286b0:	68bb      	ldr	r3, [r7, #8]
 80286b2:	f06f 0201 	mvn.w	r2, #1
 80286b6:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80286b8:	68bb      	ldr	r3, [r7, #8]
 80286ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80286bc:	68bb      	ldr	r3, [r7, #8]
 80286be:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 80286c0:	68bb      	ldr	r3, [r7, #8]
 80286c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286c4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80286c8:	68bb      	ldr	r3, [r7, #8]
 80286ca:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80286cc:	68fb      	ldr	r3, [r7, #12]
 80286ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80286d0:	69da      	ldr	r2, [r3, #28]
 80286d2:	68bb      	ldr	r3, [r7, #8]
 80286d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80286d6:	1ad3      	subs	r3, r2, r3
 80286d8:	4619      	mov	r1, r3
 80286da:	6a38      	ldr	r0, [r7, #32]
 80286dc:	f7fa fefa 	bl	80234d4 <lfs_min>
 80286e0:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 80286e2:	68bb      	ldr	r3, [r7, #8]
 80286e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80286ea:	2b00      	cmp	r3, #0
 80286ec:	d026      	beq.n	802873c <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 80286ee:	68bb      	ldr	r3, [r7, #8]
 80286f0:	f103 0408 	add.w	r4, r3, #8
 80286f4:	68bb      	ldr	r3, [r7, #8]
 80286f6:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80286fa:	68fb      	ldr	r3, [r7, #12]
 80286fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80286fe:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028700:	68bb      	ldr	r3, [r7, #8]
 8028702:	889b      	ldrh	r3, [r3, #4]
 8028704:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8028706:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802870a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802870e:	68b9      	ldr	r1, [r7, #8]
 8028710:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8028712:	69b8      	ldr	r0, [r7, #24]
 8028714:	9005      	str	r0, [sp, #20]
 8028716:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8028718:	9004      	str	r0, [sp, #16]
 802871a:	9103      	str	r1, [sp, #12]
 802871c:	9302      	str	r3, [sp, #8]
 802871e:	4b24      	ldr	r3, [pc, #144]	; (80287b0 <lfs_file_flushedread+0x1a0>)
 8028720:	9301      	str	r3, [sp, #4]
 8028722:	9200      	str	r2, [sp, #0]
 8028724:	462b      	mov	r3, r5
 8028726:	2200      	movs	r2, #0
 8028728:	4621      	mov	r1, r4
 802872a:	68f8      	ldr	r0, [r7, #12]
 802872c:	f7fb ffed 	bl	802470a <lfs_dir_getread>
 8028730:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8028732:	693b      	ldr	r3, [r7, #16]
 8028734:	2b00      	cmp	r3, #0
 8028736:	d01d      	beq.n	8028774 <lfs_file_flushedread+0x164>
                return err;
 8028738:	693b      	ldr	r3, [r7, #16]
 802873a:	e034      	b.n	80287a6 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 802873c:	68bb      	ldr	r3, [r7, #8]
 802873e:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028742:	68fb      	ldr	r3, [r7, #12]
 8028744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028746:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8028748:	68bb      	ldr	r3, [r7, #8]
 802874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802874c:	68ba      	ldr	r2, [r7, #8]
 802874e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028750:	69b9      	ldr	r1, [r7, #24]
 8028752:	9103      	str	r1, [sp, #12]
 8028754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028756:	9102      	str	r1, [sp, #8]
 8028758:	9201      	str	r2, [sp, #4]
 802875a:	9300      	str	r3, [sp, #0]
 802875c:	4623      	mov	r3, r4
 802875e:	4602      	mov	r2, r0
 8028760:	2100      	movs	r1, #0
 8028762:	68f8      	ldr	r0, [r7, #12]
 8028764:	f7fa ff92 	bl	802368c <lfs_bd_read>
 8028768:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 802876a:	697b      	ldr	r3, [r7, #20]
 802876c:	2b00      	cmp	r3, #0
 802876e:	d001      	beq.n	8028774 <lfs_file_flushedread+0x164>
                return err;
 8028770:	697b      	ldr	r3, [r7, #20]
 8028772:	e018      	b.n	80287a6 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8028774:	68bb      	ldr	r3, [r7, #8]
 8028776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028778:	69bb      	ldr	r3, [r7, #24]
 802877a:	441a      	add	r2, r3
 802877c:	68bb      	ldr	r3, [r7, #8]
 802877e:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028780:	68bb      	ldr	r3, [r7, #8]
 8028782:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028784:	69bb      	ldr	r3, [r7, #24]
 8028786:	441a      	add	r2, r3
 8028788:	68bb      	ldr	r3, [r7, #8]
 802878a:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 802878c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802878e:	69bb      	ldr	r3, [r7, #24]
 8028790:	4413      	add	r3, r2
 8028792:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8028794:	6a3a      	ldr	r2, [r7, #32]
 8028796:	69bb      	ldr	r3, [r7, #24]
 8028798:	1ad3      	subs	r3, r2, r3
 802879a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 802879c:	6a3b      	ldr	r3, [r7, #32]
 802879e:	2b00      	cmp	r3, #0
 80287a0:	f47f af56 	bne.w	8028650 <lfs_file_flushedread+0x40>
    }

    return size;
 80287a4:	683b      	ldr	r3, [r7, #0]
}
 80287a6:	4618      	mov	r0, r3
 80287a8:	3728      	adds	r7, #40	; 0x28
 80287aa:	46bd      	mov	sp, r7
 80287ac:	bdb0      	pop	{r4, r5, r7, pc}
 80287ae:	bf00      	nop
 80287b0:	fff7fc00 	.word	0xfff7fc00

080287b4 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80287b4:	b580      	push	{r7, lr}
 80287b6:	b086      	sub	sp, #24
 80287b8:	af00      	add	r7, sp, #0
 80287ba:	60f8      	str	r0, [r7, #12]
 80287bc:	60b9      	str	r1, [r7, #8]
 80287be:	607a      	str	r2, [r7, #4]
 80287c0:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 80287c2:	68bb      	ldr	r3, [r7, #8]
 80287c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287c6:	f003 0301 	and.w	r3, r3, #1
 80287ca:	2b00      	cmp	r3, #0
 80287cc:	d106      	bne.n	80287dc <lfs_file_rawread+0x28>
 80287ce:	4b11      	ldr	r3, [pc, #68]	; (8028814 <lfs_file_rawread+0x60>)
 80287d0:	4a11      	ldr	r2, [pc, #68]	; (8028818 <lfs_file_rawread+0x64>)
 80287d2:	f640 41ea 	movw	r1, #3306	; 0xcea
 80287d6:	4811      	ldr	r0, [pc, #68]	; (802881c <lfs_file_rawread+0x68>)
 80287d8:	f003 fdc0 	bl	802c35c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 80287dc:	68bb      	ldr	r3, [r7, #8]
 80287de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80287e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80287e4:	2b00      	cmp	r3, #0
 80287e6:	d009      	beq.n	80287fc <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80287e8:	68b9      	ldr	r1, [r7, #8]
 80287ea:	68f8      	ldr	r0, [r7, #12]
 80287ec:	f7ff fdb0 	bl	8028350 <lfs_file_flush>
 80287f0:	6178      	str	r0, [r7, #20]
        if (err) {
 80287f2:	697b      	ldr	r3, [r7, #20]
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	d001      	beq.n	80287fc <lfs_file_rawread+0x48>
            return err;
 80287f8:	697b      	ldr	r3, [r7, #20]
 80287fa:	e006      	b.n	802880a <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 80287fc:	683b      	ldr	r3, [r7, #0]
 80287fe:	687a      	ldr	r2, [r7, #4]
 8028800:	68b9      	ldr	r1, [r7, #8]
 8028802:	68f8      	ldr	r0, [r7, #12]
 8028804:	f7ff ff04 	bl	8028610 <lfs_file_flushedread>
 8028808:	4603      	mov	r3, r0
}
 802880a:	4618      	mov	r0, r3
 802880c:	3718      	adds	r7, #24
 802880e:	46bd      	mov	sp, r7
 8028810:	bd80      	pop	{r7, pc}
 8028812:	bf00      	nop
 8028814:	08033694 	.word	0x08033694
 8028818:	080346a8 	.word	0x080346a8
 802881c:	08033358 	.word	0x08033358

08028820 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028820:	b5b0      	push	{r4, r5, r7, lr}
 8028822:	b090      	sub	sp, #64	; 0x40
 8028824:	af04      	add	r7, sp, #16
 8028826:	60f8      	str	r0, [r7, #12]
 8028828:	60b9      	str	r1, [r7, #8]
 802882a:	607a      	str	r2, [r7, #4]
 802882c:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 802882e:	687b      	ldr	r3, [r7, #4]
 8028830:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8028832:	683b      	ldr	r3, [r7, #0]
 8028834:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8028836:	68bb      	ldr	r3, [r7, #8]
 8028838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802883a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802883e:	2b00      	cmp	r3, #0
 8028840:	f000 810c 	beq.w	8028a5c <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8028844:	68bb      	ldr	r3, [r7, #8]
 8028846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802884a:	441a      	add	r2, r3
 802884c:	68bb      	ldr	r3, [r7, #8]
 802884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028850:	4619      	mov	r1, r3
 8028852:	4610      	mov	r0, r2
 8028854:	f7fa fe2e 	bl	80234b4 <lfs_max>
 8028858:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 802885a:	68fb      	ldr	r3, [r7, #12]
 802885c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802885e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8028860:	68fb      	ldr	r3, [r7, #12]
 8028862:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028866:	2b00      	cmp	r3, #0
 8028868:	d004      	beq.n	8028874 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 802886a:	68fb      	ldr	r3, [r7, #12]
 802886c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802886e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028870:	08db      	lsrs	r3, r3, #3
 8028872:	e003      	b.n	802887c <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028874:	68fb      	ldr	r3, [r7, #12]
 8028876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028878:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 802887a:	08db      	lsrs	r3, r3, #3
 802887c:	4619      	mov	r1, r3
 802887e:	4610      	mov	r0, r2
 8028880:	f7fa fe28 	bl	80234d4 <lfs_min>
 8028884:	4603      	mov	r3, r0
 8028886:	4619      	mov	r1, r3
 8028888:	f240 30fe 	movw	r0, #1022	; 0x3fe
 802888c:	f7fa fe22 	bl	80234d4 <lfs_min>
 8028890:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028892:	429c      	cmp	r4, r3
 8028894:	f240 80e2 	bls.w	8028a5c <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028898:	68b9      	ldr	r1, [r7, #8]
 802889a:	68f8      	ldr	r0, [r7, #12]
 802889c:	f7ff fd36 	bl	802830c <lfs_file_outline>
 80288a0:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80288a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288a4:	2b00      	cmp	r3, #0
 80288a6:	f000 80d9 	beq.w	8028a5c <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 80288aa:	68bb      	ldr	r3, [r7, #8]
 80288ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80288b2:	68bb      	ldr	r3, [r7, #8]
 80288b4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80288b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80288b8:	e0d5      	b.n	8028a66 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80288ba:	68bb      	ldr	r3, [r7, #8]
 80288bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80288c2:	2b00      	cmp	r3, #0
 80288c4:	d006      	beq.n	80288d4 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 80288c6:	68bb      	ldr	r3, [r7, #8]
 80288c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80288ca:	68fb      	ldr	r3, [r7, #12]
 80288cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80288ce:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80288d0:	429a      	cmp	r2, r3
 80288d2:	d16b      	bne.n	80289ac <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 80288d4:	68bb      	ldr	r3, [r7, #8]
 80288d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80288dc:	2b00      	cmp	r3, #0
 80288de:	d157      	bne.n	8028990 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 80288e0:	68bb      	ldr	r3, [r7, #8]
 80288e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80288e8:	2b00      	cmp	r3, #0
 80288ea:	d12d      	bne.n	8028948 <lfs_file_flushedwrite+0x128>
 80288ec:	68bb      	ldr	r3, [r7, #8]
 80288ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80288f0:	2b00      	cmp	r3, #0
 80288f2:	d029      	beq.n	8028948 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 80288f4:	68bb      	ldr	r3, [r7, #8]
 80288f6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80288fa:	68bb      	ldr	r3, [r7, #8]
 80288fc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80288fe:	68bb      	ldr	r3, [r7, #8]
 8028900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8028902:	68ba      	ldr	r2, [r7, #8]
 8028904:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028906:	3a01      	subs	r2, #1
 8028908:	68b9      	ldr	r1, [r7, #8]
 802890a:	3138      	adds	r1, #56	; 0x38
 802890c:	68b8      	ldr	r0, [r7, #8]
 802890e:	303c      	adds	r0, #60	; 0x3c
 8028910:	9003      	str	r0, [sp, #12]
 8028912:	9102      	str	r1, [sp, #8]
 8028914:	9201      	str	r2, [sp, #4]
 8028916:	9300      	str	r3, [sp, #0]
 8028918:	462b      	mov	r3, r5
 802891a:	4622      	mov	r2, r4
 802891c:	2100      	movs	r1, #0
 802891e:	68f8      	ldr	r0, [r7, #12]
 8028920:	f7ff f83c 	bl	802799c <lfs_ctz_find>
 8028924:	6238      	str	r0, [r7, #32]
                    if (err) {
 8028926:	6a3b      	ldr	r3, [r7, #32]
 8028928:	2b00      	cmp	r3, #0
 802892a:	d007      	beq.n	802893c <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 802892c:	68bb      	ldr	r3, [r7, #8]
 802892e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028930:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028934:	68bb      	ldr	r3, [r7, #8]
 8028936:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8028938:	6a3b      	ldr	r3, [r7, #32]
 802893a:	e094      	b.n	8028a66 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 802893c:	68bb      	ldr	r3, [r7, #8]
 802893e:	3340      	adds	r3, #64	; 0x40
 8028940:	4619      	mov	r1, r3
 8028942:	68f8      	ldr	r0, [r7, #12]
 8028944:	f7fa fe8b 	bl	802365e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8028948:	68f8      	ldr	r0, [r7, #12]
 802894a:	f7fb fd09 	bl	8024360 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 802894e:	68bb      	ldr	r3, [r7, #8]
 8028950:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028954:	68fc      	ldr	r4, [r7, #12]
 8028956:	68bb      	ldr	r3, [r7, #8]
 8028958:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 802895a:	68bb      	ldr	r3, [r7, #8]
 802895c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802895e:	68ba      	ldr	r2, [r7, #8]
 8028960:	3238      	adds	r2, #56	; 0x38
 8028962:	68b9      	ldr	r1, [r7, #8]
 8028964:	313c      	adds	r1, #60	; 0x3c
 8028966:	9102      	str	r1, [sp, #8]
 8028968:	9201      	str	r2, [sp, #4]
 802896a:	9300      	str	r3, [sp, #0]
 802896c:	462b      	mov	r3, r5
 802896e:	4622      	mov	r2, r4
 8028970:	4601      	mov	r1, r0
 8028972:	68f8      	ldr	r0, [r7, #12]
 8028974:	f7ff f87e 	bl	8027a74 <lfs_ctz_extend>
 8028978:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 802897a:	69fb      	ldr	r3, [r7, #28]
 802897c:	2b00      	cmp	r3, #0
 802897e:	d00f      	beq.n	80289a0 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028980:	68bb      	ldr	r3, [r7, #8]
 8028982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028984:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028988:	68bb      	ldr	r3, [r7, #8]
 802898a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 802898c:	69fb      	ldr	r3, [r7, #28]
 802898e:	e06a      	b.n	8028a66 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028990:	68bb      	ldr	r3, [r7, #8]
 8028992:	f06f 0201 	mvn.w	r2, #1
 8028996:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028998:	68bb      	ldr	r3, [r7, #8]
 802899a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802899c:	68bb      	ldr	r3, [r7, #8]
 802899e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80289a0:	68bb      	ldr	r3, [r7, #8]
 80289a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80289a8:	68bb      	ldr	r3, [r7, #8]
 80289aa:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80289ac:	68fb      	ldr	r3, [r7, #12]
 80289ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80289b0:	69da      	ldr	r2, [r3, #28]
 80289b2:	68bb      	ldr	r3, [r7, #8]
 80289b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80289b6:	1ad3      	subs	r3, r2, r3
 80289b8:	4619      	mov	r1, r3
 80289ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80289bc:	f7fa fd8a 	bl	80234d4 <lfs_min>
 80289c0:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80289c2:	68bb      	ldr	r3, [r7, #8]
 80289c4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80289c8:	68fc      	ldr	r4, [r7, #12]
 80289ca:	68bb      	ldr	r3, [r7, #8]
 80289cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80289ce:	68ba      	ldr	r2, [r7, #8]
 80289d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80289d2:	69b9      	ldr	r1, [r7, #24]
 80289d4:	9103      	str	r1, [sp, #12]
 80289d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80289d8:	9102      	str	r1, [sp, #8]
 80289da:	9201      	str	r2, [sp, #4]
 80289dc:	9300      	str	r3, [sp, #0]
 80289de:	2301      	movs	r3, #1
 80289e0:	4622      	mov	r2, r4
 80289e2:	4601      	mov	r1, r0
 80289e4:	68f8      	ldr	r0, [r7, #12]
 80289e6:	f7fb f897 	bl	8023b18 <lfs_bd_prog>
 80289ea:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 80289ec:	697b      	ldr	r3, [r7, #20]
 80289ee:	2b00      	cmp	r3, #0
 80289f0:	d01c      	beq.n	8028a2c <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 80289f2:	697b      	ldr	r3, [r7, #20]
 80289f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80289f8:	d007      	beq.n	8028a0a <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 80289fa:	68bb      	ldr	r3, [r7, #8]
 80289fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028a02:	68bb      	ldr	r3, [r7, #8]
 8028a04:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028a06:	697b      	ldr	r3, [r7, #20]
 8028a08:	e02d      	b.n	8028a66 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8028a0a:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8028a0c:	68b9      	ldr	r1, [r7, #8]
 8028a0e:	68f8      	ldr	r0, [r7, #12]
 8028a10:	f7ff fba2 	bl	8028158 <lfs_file_relocate>
 8028a14:	6178      	str	r0, [r7, #20]
            if (err) {
 8028a16:	697b      	ldr	r3, [r7, #20]
 8028a18:	2b00      	cmp	r3, #0
 8028a1a:	d0d2      	beq.n	80289c2 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8028a1c:	68bb      	ldr	r3, [r7, #8]
 8028a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a20:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028a24:	68bb      	ldr	r3, [r7, #8]
 8028a26:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028a28:	697b      	ldr	r3, [r7, #20]
 8028a2a:	e01c      	b.n	8028a66 <lfs_file_flushedwrite+0x246>
            break;
 8028a2c:	bf00      	nop
            }
        }

        file->pos += diff;
 8028a2e:	68bb      	ldr	r3, [r7, #8]
 8028a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028a32:	69bb      	ldr	r3, [r7, #24]
 8028a34:	441a      	add	r2, r3
 8028a36:	68bb      	ldr	r3, [r7, #8]
 8028a38:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028a3a:	68bb      	ldr	r3, [r7, #8]
 8028a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028a3e:	69bb      	ldr	r3, [r7, #24]
 8028a40:	441a      	add	r2, r3
 8028a42:	68bb      	ldr	r3, [r7, #8]
 8028a44:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028a48:	69bb      	ldr	r3, [r7, #24]
 8028a4a:	4413      	add	r3, r2
 8028a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8028a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028a50:	69bb      	ldr	r3, [r7, #24]
 8028a52:	1ad3      	subs	r3, r2, r3
 8028a54:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8028a56:	68f8      	ldr	r0, [r7, #12]
 8028a58:	f7fb fc82 	bl	8024360 <lfs_alloc_ack>
    while (nsize > 0) {
 8028a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028a5e:	2b00      	cmp	r3, #0
 8028a60:	f47f af2b 	bne.w	80288ba <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028a64:	683b      	ldr	r3, [r7, #0]
}
 8028a66:	4618      	mov	r0, r3
 8028a68:	3730      	adds	r7, #48	; 0x30
 8028a6a:	46bd      	mov	sp, r7
 8028a6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028a70 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028a70:	b580      	push	{r7, lr}
 8028a72:	b08a      	sub	sp, #40	; 0x28
 8028a74:	af00      	add	r7, sp, #0
 8028a76:	60f8      	str	r0, [r7, #12]
 8028a78:	60b9      	str	r1, [r7, #8]
 8028a7a:	607a      	str	r2, [r7, #4]
 8028a7c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8028a7e:	68bb      	ldr	r3, [r7, #8]
 8028a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a82:	f003 0302 	and.w	r3, r3, #2
 8028a86:	2b00      	cmp	r3, #0
 8028a88:	d106      	bne.n	8028a98 <lfs_file_rawwrite+0x28>
 8028a8a:	4b38      	ldr	r3, [pc, #224]	; (8028b6c <lfs_file_rawwrite+0xfc>)
 8028a8c:	4a38      	ldr	r2, [pc, #224]	; (8028b70 <lfs_file_rawwrite+0x100>)
 8028a8e:	f640 5155 	movw	r1, #3413	; 0xd55
 8028a92:	4838      	ldr	r0, [pc, #224]	; (8028b74 <lfs_file_rawwrite+0x104>)
 8028a94:	f003 fc62 	bl	802c35c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028a98:	68bb      	ldr	r3, [r7, #8]
 8028a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028aa0:	2b00      	cmp	r3, #0
 8028aa2:	d009      	beq.n	8028ab8 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028aa4:	68b9      	ldr	r1, [r7, #8]
 8028aa6:	68f8      	ldr	r0, [r7, #12]
 8028aa8:	f7ff fc52 	bl	8028350 <lfs_file_flush>
 8028aac:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ab0:	2b00      	cmp	r3, #0
 8028ab2:	d001      	beq.n	8028ab8 <lfs_file_rawwrite+0x48>
            return err;
 8028ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028ab6:	e055      	b.n	8028b64 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028ab8:	68bb      	ldr	r3, [r7, #8]
 8028aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028ac0:	2b00      	cmp	r3, #0
 8028ac2:	d009      	beq.n	8028ad8 <lfs_file_rawwrite+0x68>
 8028ac4:	68bb      	ldr	r3, [r7, #8]
 8028ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028ac8:	68bb      	ldr	r3, [r7, #8]
 8028aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028acc:	429a      	cmp	r2, r3
 8028ace:	d203      	bcs.n	8028ad8 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028ad0:	68bb      	ldr	r3, [r7, #8]
 8028ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028ad4:	68bb      	ldr	r3, [r7, #8]
 8028ad6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028ad8:	68bb      	ldr	r3, [r7, #8]
 8028ada:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028adc:	683b      	ldr	r3, [r7, #0]
 8028ade:	441a      	add	r2, r3
 8028ae0:	68fb      	ldr	r3, [r7, #12]
 8028ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028ae4:	429a      	cmp	r2, r3
 8028ae6:	d902      	bls.n	8028aee <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028ae8:	f06f 031a 	mvn.w	r3, #26
 8028aec:	e03a      	b.n	8028b64 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8028aee:	68bb      	ldr	r3, [r7, #8]
 8028af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028af6:	2b00      	cmp	r3, #0
 8028af8:	d121      	bne.n	8028b3e <lfs_file_rawwrite+0xce>
 8028afa:	68bb      	ldr	r3, [r7, #8]
 8028afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028afe:	68bb      	ldr	r3, [r7, #8]
 8028b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b02:	429a      	cmp	r2, r3
 8028b04:	d91b      	bls.n	8028b3e <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8028b06:	68bb      	ldr	r3, [r7, #8]
 8028b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b0a:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8028b0c:	68bb      	ldr	r3, [r7, #8]
 8028b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028b10:	68bb      	ldr	r3, [r7, #8]
 8028b12:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8028b14:	e00e      	b.n	8028b34 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8028b16:	2300      	movs	r3, #0
 8028b18:	75fb      	strb	r3, [r7, #23]
 8028b1a:	f107 0217 	add.w	r2, r7, #23
 8028b1e:	2301      	movs	r3, #1
 8028b20:	68b9      	ldr	r1, [r7, #8]
 8028b22:	68f8      	ldr	r0, [r7, #12]
 8028b24:	f7ff fe7c 	bl	8028820 <lfs_file_flushedwrite>
 8028b28:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8028b2a:	69fb      	ldr	r3, [r7, #28]
 8028b2c:	2b00      	cmp	r3, #0
 8028b2e:	da01      	bge.n	8028b34 <lfs_file_rawwrite+0xc4>
                return res;
 8028b30:	69fb      	ldr	r3, [r7, #28]
 8028b32:	e017      	b.n	8028b64 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8028b34:	68bb      	ldr	r3, [r7, #8]
 8028b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b38:	6a3a      	ldr	r2, [r7, #32]
 8028b3a:	429a      	cmp	r2, r3
 8028b3c:	d8eb      	bhi.n	8028b16 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8028b3e:	683b      	ldr	r3, [r7, #0]
 8028b40:	687a      	ldr	r2, [r7, #4]
 8028b42:	68b9      	ldr	r1, [r7, #8]
 8028b44:	68f8      	ldr	r0, [r7, #12]
 8028b46:	f7ff fe6b 	bl	8028820 <lfs_file_flushedwrite>
 8028b4a:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8028b4c:	69bb      	ldr	r3, [r7, #24]
 8028b4e:	2b00      	cmp	r3, #0
 8028b50:	da01      	bge.n	8028b56 <lfs_file_rawwrite+0xe6>
        return nsize;
 8028b52:	69bb      	ldr	r3, [r7, #24]
 8028b54:	e006      	b.n	8028b64 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8028b56:	68bb      	ldr	r3, [r7, #8]
 8028b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b5a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8028b5e:	68bb      	ldr	r3, [r7, #8]
 8028b60:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8028b62:	69bb      	ldr	r3, [r7, #24]
}
 8028b64:	4618      	mov	r0, r3
 8028b66:	3728      	adds	r7, #40	; 0x28
 8028b68:	46bd      	mov	sp, r7
 8028b6a:	bd80      	pop	{r7, pc}
 8028b6c:	080336c4 	.word	0x080336c4
 8028b70:	080346bc 	.word	0x080346bc
 8028b74:	08033358 	.word	0x08033358

08028b78 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8028b78:	b580      	push	{r7, lr}
 8028b7a:	b08c      	sub	sp, #48	; 0x30
 8028b7c:	af00      	add	r7, sp, #0
 8028b7e:	60f8      	str	r0, [r7, #12]
 8028b80:	60b9      	str	r1, [r7, #8]
 8028b82:	607a      	str	r2, [r7, #4]
 8028b84:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8028b86:	68bb      	ldr	r3, [r7, #8]
 8028b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8028b8c:	683b      	ldr	r3, [r7, #0]
 8028b8e:	2b00      	cmp	r3, #0
 8028b90:	d102      	bne.n	8028b98 <lfs_file_rawseek+0x20>
        npos = off;
 8028b92:	687b      	ldr	r3, [r7, #4]
 8028b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028b96:	e025      	b.n	8028be4 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8028b98:	683b      	ldr	r3, [r7, #0]
 8028b9a:	2b01      	cmp	r3, #1
 8028b9c:	d10f      	bne.n	8028bbe <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8028b9e:	68bb      	ldr	r3, [r7, #8]
 8028ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ba2:	461a      	mov	r2, r3
 8028ba4:	687b      	ldr	r3, [r7, #4]
 8028ba6:	4413      	add	r3, r2
 8028ba8:	2b00      	cmp	r3, #0
 8028baa:	da02      	bge.n	8028bb2 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8028bac:	f06f 0315 	mvn.w	r3, #21
 8028bb0:	e067      	b.n	8028c82 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8028bb2:	68bb      	ldr	r3, [r7, #8]
 8028bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028bb6:	687b      	ldr	r3, [r7, #4]
 8028bb8:	4413      	add	r3, r2
 8028bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028bbc:	e012      	b.n	8028be4 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8028bbe:	683b      	ldr	r3, [r7, #0]
 8028bc0:	2b02      	cmp	r3, #2
 8028bc2:	d10f      	bne.n	8028be4 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8028bc4:	68b9      	ldr	r1, [r7, #8]
 8028bc6:	68f8      	ldr	r0, [r7, #12]
 8028bc8:	f000 f85f 	bl	8028c8a <lfs_file_rawsize>
 8028bcc:	4602      	mov	r2, r0
 8028bce:	687b      	ldr	r3, [r7, #4]
 8028bd0:	4413      	add	r3, r2
 8028bd2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8028bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028bd6:	2b00      	cmp	r3, #0
 8028bd8:	da02      	bge.n	8028be0 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8028bda:	f06f 0315 	mvn.w	r3, #21
 8028bde:	e050      	b.n	8028c82 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8028be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8028be4:	68fb      	ldr	r3, [r7, #12]
 8028be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028bea:	429a      	cmp	r2, r3
 8028bec:	d902      	bls.n	8028bf4 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8028bee:	f06f 0315 	mvn.w	r3, #21
 8028bf2:	e046      	b.n	8028c82 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8028bf4:	68bb      	ldr	r3, [r7, #8]
 8028bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028bfa:	429a      	cmp	r2, r3
 8028bfc:	d101      	bne.n	8028c02 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8028bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c00:	e03f      	b.n	8028c82 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8028c02:	68bb      	ldr	r3, [r7, #8]
 8028c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8028c0a:	2b00      	cmp	r3, #0
 8028c0c:	d12b      	bne.n	8028c66 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8028c0e:	68bb      	ldr	r3, [r7, #8]
 8028c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028c12:	61bb      	str	r3, [r7, #24]
 8028c14:	f107 0318 	add.w	r3, r7, #24
 8028c18:	4619      	mov	r1, r3
 8028c1a:	68f8      	ldr	r0, [r7, #12]
 8028c1c:	f7fe fe86 	bl	802792c <lfs_ctz_index>
 8028c20:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8028c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c24:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8028c26:	f107 0314 	add.w	r3, r7, #20
 8028c2a:	4619      	mov	r1, r3
 8028c2c:	68f8      	ldr	r0, [r7, #12]
 8028c2e:	f7fe fe7d 	bl	802792c <lfs_ctz_index>
 8028c32:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8028c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028c36:	6a3b      	ldr	r3, [r7, #32]
 8028c38:	429a      	cmp	r2, r3
 8028c3a:	d114      	bne.n	8028c66 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8028c3c:	68bb      	ldr	r3, [r7, #8]
 8028c3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028c40:	697b      	ldr	r3, [r7, #20]
 8028c42:	429a      	cmp	r2, r3
 8028c44:	d80f      	bhi.n	8028c66 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8028c46:	68bb      	ldr	r3, [r7, #8]
 8028c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028c4a:	68bb      	ldr	r3, [r7, #8]
 8028c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028c4e:	441a      	add	r2, r3
 8028c50:	697b      	ldr	r3, [r7, #20]
 8028c52:	429a      	cmp	r2, r3
 8028c54:	d907      	bls.n	8028c66 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8028c56:	68bb      	ldr	r3, [r7, #8]
 8028c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028c5a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 8028c5c:	697a      	ldr	r2, [r7, #20]
 8028c5e:	68bb      	ldr	r3, [r7, #8]
 8028c60:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8028c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028c64:	e00d      	b.n	8028c82 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8028c66:	68b9      	ldr	r1, [r7, #8]
 8028c68:	68f8      	ldr	r0, [r7, #12]
 8028c6a:	f7ff fb71 	bl	8028350 <lfs_file_flush>
 8028c6e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8028c70:	69fb      	ldr	r3, [r7, #28]
 8028c72:	2b00      	cmp	r3, #0
 8028c74:	d001      	beq.n	8028c7a <lfs_file_rawseek+0x102>
        return err;
 8028c76:	69fb      	ldr	r3, [r7, #28]
 8028c78:	e003      	b.n	8028c82 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 8028c7a:	68bb      	ldr	r3, [r7, #8]
 8028c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028c7e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8028c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8028c82:	4618      	mov	r0, r3
 8028c84:	3730      	adds	r7, #48	; 0x30
 8028c86:	46bd      	mov	sp, r7
 8028c88:	bd80      	pop	{r7, pc}

08028c8a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 8028c8a:	b580      	push	{r7, lr}
 8028c8c:	b082      	sub	sp, #8
 8028c8e:	af00      	add	r7, sp, #0
 8028c90:	6078      	str	r0, [r7, #4]
 8028c92:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028c94:	683b      	ldr	r3, [r7, #0]
 8028c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028c9c:	2b00      	cmp	r3, #0
 8028c9e:	d009      	beq.n	8028cb4 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8028ca0:	683b      	ldr	r3, [r7, #0]
 8028ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028ca4:	683b      	ldr	r3, [r7, #0]
 8028ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028ca8:	4619      	mov	r1, r3
 8028caa:	4610      	mov	r0, r2
 8028cac:	f7fa fc02 	bl	80234b4 <lfs_max>
 8028cb0:	4603      	mov	r3, r0
 8028cb2:	e001      	b.n	8028cb8 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8028cb4:	683b      	ldr	r3, [r7, #0]
 8028cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8028cb8:	4618      	mov	r0, r3
 8028cba:	3708      	adds	r7, #8
 8028cbc:	46bd      	mov	sp, r7
 8028cbe:	bd80      	pop	{r7, pc}

08028cc0 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8028cc0:	b580      	push	{r7, lr}
 8028cc2:	b08e      	sub	sp, #56	; 0x38
 8028cc4:	af00      	add	r7, sp, #0
 8028cc6:	60f8      	str	r0, [r7, #12]
 8028cc8:	60b9      	str	r1, [r7, #8]
 8028cca:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028ccc:	f107 0208 	add.w	r2, r7, #8
 8028cd0:	f107 0114 	add.w	r1, r7, #20
 8028cd4:	2300      	movs	r3, #0
 8028cd6:	68f8      	ldr	r0, [r7, #12]
 8028cd8:	f7fc feae 	bl	8025a38 <lfs_dir_find>
 8028cdc:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 8028cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028ce0:	2b00      	cmp	r3, #0
 8028ce2:	da01      	bge.n	8028ce8 <lfs_rawstat+0x28>
        return (int)tag;
 8028ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028ce6:	e00c      	b.n	8028d02 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8028ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028cea:	4618      	mov	r0, r3
 8028cec:	f7fb f908 	bl	8023f00 <lfs_tag_id>
 8028cf0:	4603      	mov	r3, r0
 8028cf2:	461a      	mov	r2, r3
 8028cf4:	f107 0114 	add.w	r1, r7, #20
 8028cf8:	687b      	ldr	r3, [r7, #4]
 8028cfa:	68f8      	ldr	r0, [r7, #12]
 8028cfc:	f7fc fdd8 	bl	80258b0 <lfs_dir_getinfo>
 8028d00:	4603      	mov	r3, r0
}
 8028d02:	4618      	mov	r0, r3
 8028d04:	3738      	adds	r7, #56	; 0x38
 8028d06:	46bd      	mov	sp, r7
 8028d08:	bd80      	pop	{r7, pc}
	...

08028d0c <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 8028d0c:	b580      	push	{r7, lr}
 8028d0e:	b0a0      	sub	sp, #128	; 0x80
 8028d10:	af02      	add	r7, sp, #8
 8028d12:	6078      	str	r0, [r7, #4]
 8028d14:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028d16:	6878      	ldr	r0, [r7, #4]
 8028d18:	f001 fba2 	bl	802a460 <lfs_fs_forceconsistency>
 8028d1c:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 8028d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028d20:	2b00      	cmp	r3, #0
 8028d22:	d001      	beq.n	8028d28 <lfs_rawremove+0x1c>
        return err;
 8028d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028d26:	e0c4      	b.n	8028eb2 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 8028d28:	463a      	mov	r2, r7
 8028d2a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028d2e:	2300      	movs	r3, #0
 8028d30:	6878      	ldr	r0, [r7, #4]
 8028d32:	f7fc fe81 	bl	8025a38 <lfs_dir_find>
 8028d36:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 8028d38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d3a:	2b00      	cmp	r3, #0
 8028d3c:	db09      	blt.n	8028d52 <lfs_rawremove+0x46>
 8028d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d40:	4618      	mov	r0, r3
 8028d42:	f7fb f8dd 	bl	8023f00 <lfs_tag_id>
 8028d46:	4603      	mov	r3, r0
 8028d48:	461a      	mov	r2, r3
 8028d4a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028d4e:	429a      	cmp	r2, r3
 8028d50:	d107      	bne.n	8028d62 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8028d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d54:	2b00      	cmp	r3, #0
 8028d56:	da01      	bge.n	8028d5c <lfs_rawremove+0x50>
 8028d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d5a:	e0aa      	b.n	8028eb2 <lfs_rawremove+0x1a6>
 8028d5c:	f06f 0315 	mvn.w	r3, #21
 8028d60:	e0a7      	b.n	8028eb2 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8028d62:	687b      	ldr	r3, [r7, #4]
 8028d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028d66:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d6a:	4618      	mov	r0, r3
 8028d6c:	f7fb f89e 	bl	8023eac <lfs_tag_type3>
 8028d70:	4603      	mov	r3, r0
 8028d72:	2b02      	cmp	r3, #2
 8028d74:	d14a      	bne.n	8028e0c <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8028d76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028d78:	4618      	mov	r0, r3
 8028d7a:	f7fb f8c1 	bl	8023f00 <lfs_tag_id>
 8028d7e:	4603      	mov	r3, r0
 8028d80:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8028d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028d86:	f043 0308 	orr.w	r3, r3, #8
 8028d8a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028d8e:	f107 020c 	add.w	r2, r7, #12
 8028d92:	9200      	str	r2, [sp, #0]
 8028d94:	4a49      	ldr	r2, [pc, #292]	; (8028ebc <lfs_rawremove+0x1b0>)
 8028d96:	6878      	ldr	r0, [r7, #4]
 8028d98:	f7fb fc9c 	bl	80246d4 <lfs_dir_get>
 8028d9c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 8028d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028da0:	2b00      	cmp	r3, #0
 8028da2:	da01      	bge.n	8028da8 <lfs_rawremove+0x9c>
            return (int)res;
 8028da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8028da6:	e084      	b.n	8028eb2 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8028da8:	f107 030c 	add.w	r3, r7, #12
 8028dac:	4618      	mov	r0, r3
 8028dae:	f7fb f818 	bl	8023de2 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8028db2:	f107 020c 	add.w	r2, r7, #12
 8028db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028dba:	3308      	adds	r3, #8
 8028dbc:	4619      	mov	r1, r3
 8028dbe:	6878      	ldr	r0, [r7, #4]
 8028dc0:	f7fc fd28 	bl	8025814 <lfs_dir_fetch>
 8028dc4:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028dc8:	2b00      	cmp	r3, #0
 8028dca:	d001      	beq.n	8028dd0 <lfs_rawremove+0xc4>
            return err;
 8028dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028dce:	e070      	b.n	8028eb2 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8028dd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8028dd4:	2b00      	cmp	r3, #0
 8028dd6:	d103      	bne.n	8028de0 <lfs_rawremove+0xd4>
 8028dd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8028ddc:	2b00      	cmp	r3, #0
 8028dde:	d002      	beq.n	8028de6 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8028de0:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8028de4:	e065      	b.n	8028eb2 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8028de6:	2101      	movs	r1, #1
 8028de8:	6878      	ldr	r0, [r7, #4]
 8028dea:	f001 f8bb 	bl	8029f64 <lfs_fs_preporphans>
 8028dee:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028df0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028df2:	2b00      	cmp	r3, #0
 8028df4:	d001      	beq.n	8028dfa <lfs_rawremove+0xee>
            return err;
 8028df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028df8:	e05b      	b.n	8028eb2 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 8028dfa:	2300      	movs	r3, #0
 8028dfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 8028e00:	2300      	movs	r3, #0
 8028e02:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 8028e04:	687b      	ldr	r3, [r7, #4]
 8028e06:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8028e0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 8028e0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028e0e:	4618      	mov	r0, r3
 8028e10:	f7fb f876 	bl	8023f00 <lfs_tag_id>
 8028e14:	4603      	mov	r3, r0
 8028e16:	029b      	lsls	r3, r3, #10
 8028e18:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8028e1c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8028e20:	61fb      	str	r3, [r7, #28]
 8028e22:	2300      	movs	r3, #0
 8028e24:	623b      	str	r3, [r7, #32]
 8028e26:	f107 021c 	add.w	r2, r7, #28
 8028e2a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8028e2e:	2301      	movs	r3, #1
 8028e30:	6878      	ldr	r0, [r7, #4]
 8028e32:	f7fe fb09 	bl	8027448 <lfs_dir_commit>
 8028e36:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 8028e38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e3a:	2b00      	cmp	r3, #0
 8028e3c:	d004      	beq.n	8028e48 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 8028e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e40:	687b      	ldr	r3, [r7, #4]
 8028e42:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8028e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e46:	e034      	b.n	8028eb2 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 8028e48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028e4a:	687b      	ldr	r3, [r7, #4]
 8028e4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8028e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8028e50:	4618      	mov	r0, r3
 8028e52:	f7fb f82b 	bl	8023eac <lfs_tag_type3>
 8028e56:	4603      	mov	r3, r0
 8028e58:	2b02      	cmp	r3, #2
 8028e5a:	d129      	bne.n	8028eb0 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 8028e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8028e60:	6878      	ldr	r0, [r7, #4]
 8028e62:	f001 f87f 	bl	8029f64 <lfs_fs_preporphans>
 8028e66:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e6a:	2b00      	cmp	r3, #0
 8028e6c:	d001      	beq.n	8028e72 <lfs_rawremove+0x166>
            return err;
 8028e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e70:	e01f      	b.n	8028eb2 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8028e72:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8028e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028e7a:	3308      	adds	r3, #8
 8028e7c:	4619      	mov	r1, r3
 8028e7e:	6878      	ldr	r0, [r7, #4]
 8028e80:	f000 ff90 	bl	8029da4 <lfs_fs_pred>
 8028e84:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e88:	2b00      	cmp	r3, #0
 8028e8a:	d001      	beq.n	8028e90 <lfs_rawremove+0x184>
            return err;
 8028e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028e8e:	e010      	b.n	8028eb2 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8028e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8028e94:	f103 0208 	add.w	r2, r3, #8
 8028e98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8028e9c:	4619      	mov	r1, r3
 8028e9e:	6878      	ldr	r0, [r7, #4]
 8028ea0:	f7fd f930 	bl	8026104 <lfs_dir_drop>
 8028ea4:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8028ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028ea8:	2b00      	cmp	r3, #0
 8028eaa:	d001      	beq.n	8028eb0 <lfs_rawremove+0x1a4>
            return err;
 8028eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8028eae:	e000      	b.n	8028eb2 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8028eb0:	2300      	movs	r3, #0
}
 8028eb2:	4618      	mov	r0, r3
 8028eb4:	3778      	adds	r7, #120	; 0x78
 8028eb6:	46bd      	mov	sp, r7
 8028eb8:	bd80      	pop	{r7, pc}
 8028eba:	bf00      	nop
 8028ebc:	700ffc00 	.word	0x700ffc00

08028ec0 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8028ec0:	b590      	push	{r4, r7, lr}
 8028ec2:	b0c3      	sub	sp, #268	; 0x10c
 8028ec4:	af02      	add	r7, sp, #8
 8028ec6:	60f8      	str	r0, [r7, #12]
 8028ec8:	60b9      	str	r1, [r7, #8]
 8028eca:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8028ecc:	68f8      	ldr	r0, [r7, #12]
 8028ece:	f001 fac7 	bl	802a460 <lfs_fs_forceconsistency>
 8028ed2:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (err) {
 8028ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028eda:	2b00      	cmp	r3, #0
 8028edc:	d002      	beq.n	8028ee4 <lfs_rawrename+0x24>
        return err;
 8028ede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8028ee2:	e1f7      	b.n	80292d4 <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8028ee4:	f107 0208 	add.w	r2, r7, #8
 8028ee8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 8028eec:	2300      	movs	r3, #0
 8028eee:	68f8      	ldr	r0, [r7, #12]
 8028ef0:	f7fc fda2 	bl	8025a38 <lfs_dir_find>
 8028ef4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 8028ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028efc:	2b00      	cmp	r3, #0
 8028efe:	db0a      	blt.n	8028f16 <lfs_rawrename+0x56>
 8028f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028f04:	4618      	mov	r0, r3
 8028f06:	f7fa fffb 	bl	8023f00 <lfs_tag_id>
 8028f0a:	4603      	mov	r3, r0
 8028f0c:	461a      	mov	r2, r3
 8028f0e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028f12:	429a      	cmp	r2, r3
 8028f14:	d109      	bne.n	8028f2a <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 8028f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028f1a:	2b00      	cmp	r3, #0
 8028f1c:	da02      	bge.n	8028f24 <lfs_rawrename+0x64>
 8028f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028f22:	e1d7      	b.n	80292d4 <lfs_rawrename+0x414>
 8028f24:	f06f 0315 	mvn.w	r3, #21
 8028f28:	e1d4      	b.n	80292d4 <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 8028f2a:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 8028f2e:	1d3a      	adds	r2, r7, #4
 8028f30:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8028f34:	68f8      	ldr	r0, [r7, #12]
 8028f36:	f7fc fd7f 	bl	8025a38 <lfs_dir_find>
 8028f3a:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 8028f3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f42:	2b00      	cmp	r3, #0
 8028f44:	db0a      	blt.n	8028f5c <lfs_rawrename+0x9c>
 8028f46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f4a:	4618      	mov	r0, r3
 8028f4c:	f7fa ffd8 	bl	8023f00 <lfs_tag_id>
 8028f50:	4603      	mov	r3, r0
 8028f52:	461a      	mov	r2, r3
 8028f54:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8028f58:	429a      	cmp	r2, r3
 8028f5a:	d114      	bne.n	8028f86 <lfs_rawrename+0xc6>
 8028f5c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f60:	f113 0f02 	cmn.w	r3, #2
 8028f64:	d105      	bne.n	8028f72 <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8028f66:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028f6a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8028f6e:	4293      	cmp	r3, r2
 8028f70:	d109      	bne.n	8028f86 <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8028f72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f76:	2b00      	cmp	r3, #0
 8028f78:	da02      	bge.n	8028f80 <lfs_rawrename+0xc0>
 8028f7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028f7e:	e1a9      	b.n	80292d4 <lfs_rawrename+0x414>
 8028f80:	f06f 0315 	mvn.w	r3, #21
 8028f84:	e1a6      	b.n	80292d4 <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8028f86:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8028f8a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8028f8e:	4611      	mov	r1, r2
 8028f90:	4618      	mov	r0, r3
 8028f92:	f7fa fecf 	bl	8023d34 <lfs_pair_cmp>
 8028f96:	4603      	mov	r3, r0
 8028f98:	2b00      	cmp	r3, #0
 8028f9a:	bf0c      	ite	eq
 8028f9c:	2301      	moveq	r3, #1
 8028f9e:	2300      	movne	r3, #0
 8028fa0:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8028fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8028fa8:	4618      	mov	r0, r3
 8028faa:	f7fa ffa9 	bl	8023f00 <lfs_tag_id>
 8028fae:	4603      	mov	r3, r0
 8028fb0:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8028fb4:	68fb      	ldr	r3, [r7, #12]
 8028fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8028fb8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (prevtag == LFS_ERR_NOENT) {
 8028fba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8028fbe:	f113 0f02 	cmn.w	r3, #2
 8028fc2:	d11f      	bne.n	8029004 <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8028fc4:	687b      	ldr	r3, [r7, #4]
 8028fc6:	4618      	mov	r0, r3
 8028fc8:	f7e7 f96a 	bl	80102a0 <strlen>
 8028fcc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        if (nlen > lfs->name_max) {
 8028fd0:	68fb      	ldr	r3, [r7, #12]
 8028fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8028fd4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8028fd8:	429a      	cmp	r2, r3
 8028fda:	d902      	bls.n	8028fe2 <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 8028fdc:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8028fe0:	e178      	b.n	80292d4 <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8028fe2:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8028fe6:	2b00      	cmp	r3, #0
 8028fe8:	f000 8084 	beq.w	80290f4 <lfs_rawrename+0x234>
 8028fec:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8028ff0:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8028ff4:	429a      	cmp	r2, r3
 8028ff6:	d37d      	bcc.n	80290f4 <lfs_rawrename+0x234>
            newoldid += 1;
 8028ff8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8028ffc:	3301      	adds	r3, #1
 8028ffe:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8029002:	e077      	b.n	80290f4 <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 8029004:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029008:	4618      	mov	r0, r3
 802900a:	f7fa ff4f 	bl	8023eac <lfs_tag_type3>
 802900e:	4603      	mov	r3, r0
 8029010:	461c      	mov	r4, r3
 8029012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029016:	4618      	mov	r0, r3
 8029018:	f7fa ff48 	bl	8023eac <lfs_tag_type3>
 802901c:	4603      	mov	r3, r0
 802901e:	429c      	cmp	r4, r3
 8029020:	d002      	beq.n	8029028 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 8029022:	f06f 0314 	mvn.w	r3, #20
 8029026:	e155      	b.n	80292d4 <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 8029028:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802902c:	2b00      	cmp	r3, #0
 802902e:	d007      	beq.n	8029040 <lfs_rawrename+0x180>
 8029030:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029034:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8029038:	429a      	cmp	r2, r3
 802903a:	d101      	bne.n	8029040 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 802903c:	2300      	movs	r3, #0
 802903e:	e149      	b.n	80292d4 <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 8029040:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029044:	4618      	mov	r0, r3
 8029046:	f7fa ff31 	bl	8023eac <lfs_tag_type3>
 802904a:	4603      	mov	r3, r0
 802904c:	2b02      	cmp	r3, #2
 802904e:	d151      	bne.n	80290f4 <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8029050:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029054:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8029056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802905a:	f043 0308 	orr.w	r3, r3, #8
 802905e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029062:	f107 0220 	add.w	r2, r7, #32
 8029066:	9200      	str	r2, [sp, #0]
 8029068:	4a9d      	ldr	r2, [pc, #628]	; (80292e0 <lfs_rawrename+0x420>)
 802906a:	68f8      	ldr	r0, [r7, #12]
 802906c:	f7fb fb32 	bl	80246d4 <lfs_dir_get>
 8029070:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (res < 0) {
 8029074:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029078:	2b00      	cmp	r3, #0
 802907a:	da02      	bge.n	8029082 <lfs_rawrename+0x1c2>
            return (int)res;
 802907c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029080:	e128      	b.n	80292d4 <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 8029082:	f107 0320 	add.w	r3, r7, #32
 8029086:	4618      	mov	r0, r3
 8029088:	f7fa feab 	bl	8023de2 <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 802908c:	f107 0220 	add.w	r2, r7, #32
 8029090:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029094:	3308      	adds	r3, #8
 8029096:	4619      	mov	r1, r3
 8029098:	68f8      	ldr	r0, [r7, #12]
 802909a:	f7fc fbbb 	bl	8025814 <lfs_dir_fetch>
 802909e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80290a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80290a6:	2b00      	cmp	r3, #0
 80290a8:	d002      	beq.n	80290b0 <lfs_rawrename+0x1f0>
            return err;
 80290aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80290ae:	e111      	b.n	80292d4 <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 80290b0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80290b4:	2b00      	cmp	r3, #0
 80290b6:	d103      	bne.n	80290c0 <lfs_rawrename+0x200>
 80290b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80290bc:	2b00      	cmp	r3, #0
 80290be:	d002      	beq.n	80290c6 <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 80290c0:	f06f 0326 	mvn.w	r3, #38	; 0x26
 80290c4:	e106      	b.n	80292d4 <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 80290c6:	2101      	movs	r1, #1
 80290c8:	68f8      	ldr	r0, [r7, #12]
 80290ca:	f000 ff4b 	bl	8029f64 <lfs_fs_preporphans>
 80290ce:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80290d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80290d6:	2b00      	cmp	r3, #0
 80290d8:	d002      	beq.n	80290e0 <lfs_rawrename+0x220>
            return err;
 80290da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80290de:	e0f9      	b.n	80292d4 <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 80290e0:	2300      	movs	r3, #0
 80290e2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        prevdir.id = 0;
 80290e6:	2300      	movs	r3, #0
 80290e8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        lfs->mlist = &prevdir;
 80290ec:	68fb      	ldr	r3, [r7, #12]
 80290ee:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80290f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (!samepair) {
 80290f4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80290f8:	f083 0301 	eor.w	r3, r3, #1
 80290fc:	b2db      	uxtb	r3, r3
 80290fe:	2b00      	cmp	r3, #0
 8029100:	d007      	beq.n	8029112 <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 8029102:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8029106:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 802910a:	4619      	mov	r1, r3
 802910c:	68f8      	ldr	r0, [r7, #12]
 802910e:	f000 ff63 	bl	8029fd8 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 8029112:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029116:	f113 0f02 	cmn.w	r3, #2
 802911a:	d007      	beq.n	802912c <lfs_rawrename+0x26c>
 802911c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029120:	029b      	lsls	r3, r3, #10
 8029122:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029126:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802912a:	e000      	b.n	802912e <lfs_rawrename+0x26e>
 802912c:	2300      	movs	r3, #0
 802912e:	653b      	str	r3, [r7, #80]	; 0x50
 8029130:	2300      	movs	r3, #0
 8029132:	657b      	str	r3, [r7, #84]	; 0x54
 8029134:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029138:	029b      	lsls	r3, r3, #10
 802913a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 802913e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8029142:	65bb      	str	r3, [r7, #88]	; 0x58
 8029144:	2300      	movs	r3, #0
 8029146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802914c:	4618      	mov	r0, r3
 802914e:	f7fa fead 	bl	8023eac <lfs_tag_type3>
 8029152:	4603      	mov	r3, r0
 8029154:	051a      	lsls	r2, r3, #20
 8029156:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802915a:	029b      	lsls	r3, r3, #10
 802915c:	ea42 0403 	orr.w	r4, r2, r3
 8029160:	687b      	ldr	r3, [r7, #4]
 8029162:	4618      	mov	r0, r3
 8029164:	f7e7 f89c 	bl	80102a0 <strlen>
 8029168:	4603      	mov	r3, r0
 802916a:	4323      	orrs	r3, r4
 802916c:	663b      	str	r3, [r7, #96]	; 0x60
 802916e:	687b      	ldr	r3, [r7, #4]
 8029170:	667b      	str	r3, [r7, #100]	; 0x64
 8029172:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029176:	029c      	lsls	r4, r3, #10
 8029178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802917c:	4618      	mov	r0, r3
 802917e:	f7fa febf 	bl	8023f00 <lfs_tag_id>
 8029182:	4603      	mov	r3, r0
 8029184:	4323      	orrs	r3, r4
 8029186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802918a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802918e:	66bb      	str	r3, [r7, #104]	; 0x68
 8029190:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8029194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029196:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802919a:	2b00      	cmp	r3, #0
 802919c:	d007      	beq.n	80291ae <lfs_rawrename+0x2ee>
 802919e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80291a2:	029b      	lsls	r3, r3, #10
 80291a4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80291a8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80291ac:	e000      	b.n	80291b0 <lfs_rawrename+0x2f0>
 80291ae:	2300      	movs	r3, #0
 80291b0:	673b      	str	r3, [r7, #112]	; 0x70
 80291b2:	2300      	movs	r3, #0
 80291b4:	677b      	str	r3, [r7, #116]	; 0x74
 80291b6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80291ba:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80291be:	2305      	movs	r3, #5
 80291c0:	68f8      	ldr	r0, [r7, #12]
 80291c2:	f7fe f941 	bl	8027448 <lfs_dir_commit>
 80291c6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 80291ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80291ce:	2b00      	cmp	r3, #0
 80291d0:	d005      	beq.n	80291de <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 80291d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80291d4:	68fb      	ldr	r3, [r7, #12]
 80291d6:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 80291d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80291dc:	e07a      	b.n	80292d4 <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 80291de:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80291e2:	f083 0301 	eor.w	r3, r3, #1
 80291e6:	b2db      	uxtb	r3, r3
 80291e8:	2b00      	cmp	r3, #0
 80291ea:	d02f      	beq.n	802924c <lfs_rawrename+0x38c>
 80291ec:	68fb      	ldr	r3, [r7, #12]
 80291ee:	3330      	adds	r3, #48	; 0x30
 80291f0:	4618      	mov	r0, r3
 80291f2:	f7fa ff1a 	bl	802402a <lfs_gstate_hasmove>
 80291f6:	4603      	mov	r3, r0
 80291f8:	2b00      	cmp	r3, #0
 80291fa:	d027      	beq.n	802924c <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80291fc:	2200      	movs	r2, #0
 80291fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8029202:	68f8      	ldr	r0, [r7, #12]
 8029204:	f000 fee8 	bl	8029fd8 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 8029208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802920c:	4618      	mov	r0, r3
 802920e:	f7fa fe77 	bl	8023f00 <lfs_tag_id>
 8029212:	4603      	mov	r3, r0
 8029214:	029b      	lsls	r3, r3, #10
 8029216:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802921a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802921e:	61bb      	str	r3, [r7, #24]
 8029220:	2300      	movs	r3, #0
 8029222:	61fb      	str	r3, [r7, #28]
 8029224:	f107 0218 	add.w	r2, r7, #24
 8029228:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 802922c:	2301      	movs	r3, #1
 802922e:	68f8      	ldr	r0, [r7, #12]
 8029230:	f7fe f90a 	bl	8027448 <lfs_dir_commit>
 8029234:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 8029238:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802923c:	2b00      	cmp	r3, #0
 802923e:	d005      	beq.n	802924c <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 8029240:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029242:	68fb      	ldr	r3, [r7, #12]
 8029244:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8029246:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802924a:	e043      	b.n	80292d4 <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 802924c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 802924e:	68fb      	ldr	r3, [r7, #12]
 8029250:	629a      	str	r2, [r3, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
 8029252:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029256:	f113 0f02 	cmn.w	r3, #2
 802925a:	d03a      	beq.n	80292d2 <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 802925c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029260:	4618      	mov	r0, r3
 8029262:	f7fa fe23 	bl	8023eac <lfs_tag_type3>
 8029266:	4603      	mov	r3, r0
 8029268:	2b02      	cmp	r3, #2
 802926a:	d132      	bne.n	80292d2 <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802926c:	f04f 31ff 	mov.w	r1, #4294967295
 8029270:	68f8      	ldr	r0, [r7, #12]
 8029272:	f000 fe77 	bl	8029f64 <lfs_fs_preporphans>
 8029276:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802927a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802927e:	2b00      	cmp	r3, #0
 8029280:	d002      	beq.n	8029288 <lfs_rawrename+0x3c8>
            return err;
 8029282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029286:	e025      	b.n	80292d4 <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8029288:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802928c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029290:	3308      	adds	r3, #8
 8029292:	4619      	mov	r1, r3
 8029294:	68f8      	ldr	r0, [r7, #12]
 8029296:	f000 fd85 	bl	8029da4 <lfs_fs_pred>
 802929a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802929e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292a2:	2b00      	cmp	r3, #0
 80292a4:	d002      	beq.n	80292ac <lfs_rawrename+0x3ec>
            return err;
 80292a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292aa:	e013      	b.n	80292d4 <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 80292ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80292b0:	f103 0208 	add.w	r2, r3, #8
 80292b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80292b8:	4619      	mov	r1, r3
 80292ba:	68f8      	ldr	r0, [r7, #12]
 80292bc:	f7fc ff22 	bl	8026104 <lfs_dir_drop>
 80292c0:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 80292c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292c8:	2b00      	cmp	r3, #0
 80292ca:	d002      	beq.n	80292d2 <lfs_rawrename+0x412>
            return err;
 80292cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80292d0:	e000      	b.n	80292d4 <lfs_rawrename+0x414>
        }
    }

    return 0;
 80292d2:	2300      	movs	r3, #0
}
 80292d4:	4618      	mov	r0, r3
 80292d6:	f507 7782 	add.w	r7, r7, #260	; 0x104
 80292da:	46bd      	mov	sp, r7
 80292dc:	bd90      	pop	{r4, r7, pc}
 80292de:	bf00      	nop
 80292e0:	700ffc00 	.word	0x700ffc00

080292e4 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80292e4:	b580      	push	{r7, lr}
 80292e6:	b08c      	sub	sp, #48	; 0x30
 80292e8:	af00      	add	r7, sp, #0
 80292ea:	6078      	str	r0, [r7, #4]
 80292ec:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80292ee:	687b      	ldr	r3, [r7, #4]
 80292f0:	683a      	ldr	r2, [r7, #0]
 80292f2:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80292f4:	2300      	movs	r3, #0
 80292f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80292f8:	687b      	ldr	r3, [r7, #4]
 80292fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80292fc:	695b      	ldr	r3, [r3, #20]
 80292fe:	2b00      	cmp	r3, #0
 8029300:	d106      	bne.n	8029310 <lfs_init+0x2c>
 8029302:	4b92      	ldr	r3, [pc, #584]	; (802954c <lfs_init+0x268>)
 8029304:	4a92      	ldr	r2, [pc, #584]	; (8029550 <lfs_init+0x26c>)
 8029306:	f640 7146 	movw	r1, #3910	; 0xf46
 802930a:	4892      	ldr	r0, [pc, #584]	; (8029554 <lfs_init+0x270>)
 802930c:	f003 f826 	bl	802c35c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8029310:	687b      	ldr	r3, [r7, #4]
 8029312:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029314:	699b      	ldr	r3, [r3, #24]
 8029316:	2b00      	cmp	r3, #0
 8029318:	d106      	bne.n	8029328 <lfs_init+0x44>
 802931a:	4b8f      	ldr	r3, [pc, #572]	; (8029558 <lfs_init+0x274>)
 802931c:	4a8c      	ldr	r2, [pc, #560]	; (8029550 <lfs_init+0x26c>)
 802931e:	f640 7147 	movw	r1, #3911	; 0xf47
 8029322:	488c      	ldr	r0, [pc, #560]	; (8029554 <lfs_init+0x270>)
 8029324:	f003 f81a 	bl	802c35c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8029328:	687b      	ldr	r3, [r7, #4]
 802932a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802932c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802932e:	2b00      	cmp	r3, #0
 8029330:	d106      	bne.n	8029340 <lfs_init+0x5c>
 8029332:	4b8a      	ldr	r3, [pc, #552]	; (802955c <lfs_init+0x278>)
 8029334:	4a86      	ldr	r2, [pc, #536]	; (8029550 <lfs_init+0x26c>)
 8029336:	f640 7148 	movw	r1, #3912	; 0xf48
 802933a:	4886      	ldr	r0, [pc, #536]	; (8029554 <lfs_init+0x270>)
 802933c:	f003 f80e 	bl	802c35c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8029340:	687b      	ldr	r3, [r7, #4]
 8029342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029346:	687a      	ldr	r2, [r7, #4]
 8029348:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802934a:	6952      	ldr	r2, [r2, #20]
 802934c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029350:	fb01 f202 	mul.w	r2, r1, r2
 8029354:	1a9b      	subs	r3, r3, r2
 8029356:	2b00      	cmp	r3, #0
 8029358:	d006      	beq.n	8029368 <lfs_init+0x84>
 802935a:	4b81      	ldr	r3, [pc, #516]	; (8029560 <lfs_init+0x27c>)
 802935c:	4a7c      	ldr	r2, [pc, #496]	; (8029550 <lfs_init+0x26c>)
 802935e:	f640 714c 	movw	r1, #3916	; 0xf4c
 8029362:	487c      	ldr	r0, [pc, #496]	; (8029554 <lfs_init+0x270>)
 8029364:	f002 fffa 	bl	802c35c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029368:	687b      	ldr	r3, [r7, #4]
 802936a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802936c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802936e:	687a      	ldr	r2, [r7, #4]
 8029370:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029372:	6992      	ldr	r2, [r2, #24]
 8029374:	fbb3 f1f2 	udiv	r1, r3, r2
 8029378:	fb01 f202 	mul.w	r2, r1, r2
 802937c:	1a9b      	subs	r3, r3, r2
 802937e:	2b00      	cmp	r3, #0
 8029380:	d006      	beq.n	8029390 <lfs_init+0xac>
 8029382:	4b78      	ldr	r3, [pc, #480]	; (8029564 <lfs_init+0x280>)
 8029384:	4a72      	ldr	r2, [pc, #456]	; (8029550 <lfs_init+0x26c>)
 8029386:	f640 714d 	movw	r1, #3917	; 0xf4d
 802938a:	4872      	ldr	r0, [pc, #456]	; (8029554 <lfs_init+0x270>)
 802938c:	f002 ffe6 	bl	802c35c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8029390:	687b      	ldr	r3, [r7, #4]
 8029392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029394:	69db      	ldr	r3, [r3, #28]
 8029396:	687a      	ldr	r2, [r7, #4]
 8029398:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802939a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 802939c:	fbb3 f1f2 	udiv	r1, r3, r2
 80293a0:	fb01 f202 	mul.w	r2, r1, r2
 80293a4:	1a9b      	subs	r3, r3, r2
 80293a6:	2b00      	cmp	r3, #0
 80293a8:	d006      	beq.n	80293b8 <lfs_init+0xd4>
 80293aa:	4b6f      	ldr	r3, [pc, #444]	; (8029568 <lfs_init+0x284>)
 80293ac:	4a68      	ldr	r2, [pc, #416]	; (8029550 <lfs_init+0x26c>)
 80293ae:	f640 714e 	movw	r1, #3918	; 0xf4e
 80293b2:	4868      	ldr	r0, [pc, #416]	; (8029554 <lfs_init+0x270>)
 80293b4:	f002 ffd2 	bl	802c35c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 80293b8:	687b      	ldr	r3, [r7, #4]
 80293ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293bc:	69db      	ldr	r3, [r3, #28]
 80293be:	3b08      	subs	r3, #8
 80293c0:	f04f 32ff 	mov.w	r2, #4294967295
 80293c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80293c8:	4618      	mov	r0, r3
 80293ca:	f7fa f8ba 	bl	8023542 <lfs_npw2>
 80293ce:	4603      	mov	r3, r0
 80293d0:	009a      	lsls	r2, r3, #2
 80293d2:	687b      	ldr	r3, [r7, #4]
 80293d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293d6:	69db      	ldr	r3, [r3, #28]
 80293d8:	429a      	cmp	r2, r3
 80293da:	d906      	bls.n	80293ea <lfs_init+0x106>
 80293dc:	4b63      	ldr	r3, [pc, #396]	; (802956c <lfs_init+0x288>)
 80293de:	4a5c      	ldr	r2, [pc, #368]	; (8029550 <lfs_init+0x26c>)
 80293e0:	f640 7151 	movw	r1, #3921	; 0xf51
 80293e4:	485b      	ldr	r0, [pc, #364]	; (8029554 <lfs_init+0x270>)
 80293e6:	f002 ffb9 	bl	802c35c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80293ea:	687b      	ldr	r3, [r7, #4]
 80293ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80293ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80293f0:	2b00      	cmp	r3, #0
 80293f2:	d106      	bne.n	8029402 <lfs_init+0x11e>
 80293f4:	4b5e      	ldr	r3, [pc, #376]	; (8029570 <lfs_init+0x28c>)
 80293f6:	4a56      	ldr	r2, [pc, #344]	; (8029550 <lfs_init+0x26c>)
 80293f8:	f640 715a 	movw	r1, #3930	; 0xf5a
 80293fc:	4855      	ldr	r0, [pc, #340]	; (8029554 <lfs_init+0x270>)
 80293fe:	f002 ffad 	bl	802c35c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8029402:	687b      	ldr	r3, [r7, #4]
 8029404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029408:	2b00      	cmp	r3, #0
 802940a:	d005      	beq.n	8029418 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 802940c:	687b      	ldr	r3, [r7, #4]
 802940e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029412:	687b      	ldr	r3, [r7, #4]
 8029414:	60da      	str	r2, [r3, #12]
 8029416:	e010      	b.n	802943a <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029418:	687b      	ldr	r3, [r7, #4]
 802941a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802941c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802941e:	4618      	mov	r0, r3
 8029420:	f7fa f8f7 	bl	8023612 <lfs_malloc>
 8029424:	4602      	mov	r2, r0
 8029426:	687b      	ldr	r3, [r7, #4]
 8029428:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 802942a:	687b      	ldr	r3, [r7, #4]
 802942c:	68db      	ldr	r3, [r3, #12]
 802942e:	2b00      	cmp	r3, #0
 8029430:	d103      	bne.n	802943a <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8029432:	f06f 030b 	mvn.w	r3, #11
 8029436:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029438:	e0fd      	b.n	8029636 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 802943a:	687b      	ldr	r3, [r7, #4]
 802943c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802943e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029440:	2b00      	cmp	r3, #0
 8029442:	d005      	beq.n	8029450 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8029444:	687b      	ldr	r3, [r7, #4]
 8029446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029448:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802944a:	687b      	ldr	r3, [r7, #4]
 802944c:	61da      	str	r2, [r3, #28]
 802944e:	e010      	b.n	8029472 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029450:	687b      	ldr	r3, [r7, #4]
 8029452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029456:	4618      	mov	r0, r3
 8029458:	f7fa f8db 	bl	8023612 <lfs_malloc>
 802945c:	4602      	mov	r2, r0
 802945e:	687b      	ldr	r3, [r7, #4]
 8029460:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8029462:	687b      	ldr	r3, [r7, #4]
 8029464:	69db      	ldr	r3, [r3, #28]
 8029466:	2b00      	cmp	r3, #0
 8029468:	d103      	bne.n	8029472 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 802946a:	f06f 030b 	mvn.w	r3, #11
 802946e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029470:	e0e1      	b.n	8029636 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8029472:	687b      	ldr	r3, [r7, #4]
 8029474:	4619      	mov	r1, r3
 8029476:	6878      	ldr	r0, [r7, #4]
 8029478:	f7fa f8f1 	bl	802365e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 802947c:	687b      	ldr	r3, [r7, #4]
 802947e:	3310      	adds	r3, #16
 8029480:	4619      	mov	r1, r3
 8029482:	6878      	ldr	r0, [r7, #4]
 8029484:	f7fa f8eb 	bl	802365e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8029488:	687b      	ldr	r3, [r7, #4]
 802948a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802948e:	2b00      	cmp	r3, #0
 8029490:	d106      	bne.n	80294a0 <lfs_init+0x1bc>
 8029492:	4b38      	ldr	r3, [pc, #224]	; (8029574 <lfs_init+0x290>)
 8029494:	4a2e      	ldr	r2, [pc, #184]	; (8029550 <lfs_init+0x26c>)
 8029496:	f640 7178 	movw	r1, #3960	; 0xf78
 802949a:	482e      	ldr	r0, [pc, #184]	; (8029554 <lfs_init+0x270>)
 802949c:	f002 ff5e 	bl	802c35c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 80294a0:	687b      	ldr	r3, [r7, #4]
 80294a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80294a6:	f003 0307 	and.w	r3, r3, #7
 80294aa:	2b00      	cmp	r3, #0
 80294ac:	d106      	bne.n	80294bc <lfs_init+0x1d8>
 80294ae:	687b      	ldr	r3, [r7, #4]
 80294b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80294b4:	f003 0303 	and.w	r3, r3, #3
 80294b8:	2b00      	cmp	r3, #0
 80294ba:	d006      	beq.n	80294ca <lfs_init+0x1e6>
 80294bc:	4b2e      	ldr	r3, [pc, #184]	; (8029578 <lfs_init+0x294>)
 80294be:	4a24      	ldr	r2, [pc, #144]	; (8029550 <lfs_init+0x26c>)
 80294c0:	f640 7179 	movw	r1, #3961	; 0xf79
 80294c4:	4823      	ldr	r0, [pc, #140]	; (8029554 <lfs_init+0x270>)
 80294c6:	f002 ff49 	bl	802c35c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80294ca:	687b      	ldr	r3, [r7, #4]
 80294cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80294d0:	2b00      	cmp	r3, #0
 80294d2:	d005      	beq.n	80294e0 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80294d4:	687b      	ldr	r3, [r7, #4]
 80294d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80294da:	687b      	ldr	r3, [r7, #4]
 80294dc:	665a      	str	r2, [r3, #100]	; 0x64
 80294de:	e010      	b.n	8029502 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80294e0:	687b      	ldr	r3, [r7, #4]
 80294e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80294e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80294e6:	4618      	mov	r0, r3
 80294e8:	f7fa f893 	bl	8023612 <lfs_malloc>
 80294ec:	4602      	mov	r2, r0
 80294ee:	687b      	ldr	r3, [r7, #4]
 80294f0:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80294f2:	687b      	ldr	r3, [r7, #4]
 80294f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80294f6:	2b00      	cmp	r3, #0
 80294f8:	d103      	bne.n	8029502 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80294fa:	f06f 030b 	mvn.w	r3, #11
 80294fe:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029500:	e099      	b.n	8029636 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 8029502:	687b      	ldr	r3, [r7, #4]
 8029504:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8029508:	2bff      	cmp	r3, #255	; 0xff
 802950a:	d906      	bls.n	802951a <lfs_init+0x236>
 802950c:	4b1b      	ldr	r3, [pc, #108]	; (802957c <lfs_init+0x298>)
 802950e:	4a10      	ldr	r2, [pc, #64]	; (8029550 <lfs_init+0x26c>)
 8029510:	f640 7186 	movw	r1, #3974	; 0xf86
 8029514:	480f      	ldr	r0, [pc, #60]	; (8029554 <lfs_init+0x270>)
 8029516:	f002 ff21 	bl	802c35c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 802951a:	687b      	ldr	r3, [r7, #4]
 802951c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802951e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8029520:	687b      	ldr	r3, [r7, #4]
 8029522:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 8029524:	687b      	ldr	r3, [r7, #4]
 8029526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029528:	2b00      	cmp	r3, #0
 802952a:	d102      	bne.n	8029532 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 802952c:	687b      	ldr	r3, [r7, #4]
 802952e:	22ff      	movs	r2, #255	; 0xff
 8029530:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 8029532:	687b      	ldr	r3, [r7, #4]
 8029534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8029538:	2b00      	cmp	r3, #0
 802953a:	da23      	bge.n	8029584 <lfs_init+0x2a0>
 802953c:	4b10      	ldr	r3, [pc, #64]	; (8029580 <lfs_init+0x29c>)
 802953e:	4a04      	ldr	r2, [pc, #16]	; (8029550 <lfs_init+0x26c>)
 8029540:	f640 718c 	movw	r1, #3980	; 0xf8c
 8029544:	4803      	ldr	r0, [pc, #12]	; (8029554 <lfs_init+0x270>)
 8029546:	f002 ff09 	bl	802c35c <__assert_func>
 802954a:	bf00      	nop
 802954c:	080336f4 	.word	0x080336f4
 8029550:	080346d0 	.word	0x080346d0
 8029554:	08033358 	.word	0x08033358
 8029558:	08033710 	.word	0x08033710
 802955c:	0803372c 	.word	0x0803372c
 8029560:	08033748 	.word	0x08033748
 8029564:	08033778 	.word	0x08033778
 8029568:	080337a8 	.word	0x080337a8
 802956c:	080337dc 	.word	0x080337dc
 8029570:	08033828 	.word	0x08033828
 8029574:	08033844 	.word	0x08033844
 8029578:	08033864 	.word	0x08033864
 802957c:	080338b8 	.word	0x080338b8
 8029580:	080338d4 	.word	0x080338d4
    lfs->file_max = lfs->cfg->file_max;
 8029584:	687b      	ldr	r3, [r7, #4]
 8029586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802958a:	687b      	ldr	r3, [r7, #4]
 802958c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 802958e:	687b      	ldr	r3, [r7, #4]
 8029590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029592:	2b00      	cmp	r3, #0
 8029594:	d103      	bne.n	802959e <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8029596:	687b      	ldr	r3, [r7, #4]
 8029598:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802959c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802959e:	687b      	ldr	r3, [r7, #4]
 80295a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80295a4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80295a8:	4293      	cmp	r3, r2
 80295aa:	d906      	bls.n	80295ba <lfs_init+0x2d6>
 80295ac:	4b26      	ldr	r3, [pc, #152]	; (8029648 <lfs_init+0x364>)
 80295ae:	4a27      	ldr	r2, [pc, #156]	; (802964c <lfs_init+0x368>)
 80295b0:	f640 7192 	movw	r1, #3986	; 0xf92
 80295b4:	4826      	ldr	r0, [pc, #152]	; (8029650 <lfs_init+0x36c>)
 80295b6:	f002 fed1 	bl	802c35c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 80295ba:	687b      	ldr	r3, [r7, #4]
 80295bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80295c0:	687b      	ldr	r3, [r7, #4]
 80295c2:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 80295c4:	687b      	ldr	r3, [r7, #4]
 80295c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80295c8:	2b00      	cmp	r3, #0
 80295ca:	d103      	bne.n	80295d4 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80295cc:	687b      	ldr	r3, [r7, #4]
 80295ce:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80295d2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80295d4:	687b      	ldr	r3, [r7, #4]
 80295d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80295da:	687b      	ldr	r3, [r7, #4]
 80295dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80295de:	69db      	ldr	r3, [r3, #28]
 80295e0:	429a      	cmp	r2, r3
 80295e2:	d906      	bls.n	80295f2 <lfs_init+0x30e>
 80295e4:	4b1b      	ldr	r3, [pc, #108]	; (8029654 <lfs_init+0x370>)
 80295e6:	4a19      	ldr	r2, [pc, #100]	; (802964c <lfs_init+0x368>)
 80295e8:	f640 7198 	movw	r1, #3992	; 0xf98
 80295ec:	4818      	ldr	r0, [pc, #96]	; (8029650 <lfs_init+0x36c>)
 80295ee:	f002 feb5 	bl	802c35c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80295f2:	687b      	ldr	r3, [r7, #4]
 80295f4:	f04f 32ff 	mov.w	r2, #4294967295
 80295f8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80295fa:	687b      	ldr	r3, [r7, #4]
 80295fc:	f04f 32ff 	mov.w	r2, #4294967295
 8029600:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8029602:	687b      	ldr	r3, [r7, #4]
 8029604:	2200      	movs	r2, #0
 8029606:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 8029608:	687b      	ldr	r3, [r7, #4]
 802960a:	2200      	movs	r2, #0
 802960c:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 802960e:	687b      	ldr	r3, [r7, #4]
 8029610:	333c      	adds	r3, #60	; 0x3c
 8029612:	2200      	movs	r2, #0
 8029614:	601a      	str	r2, [r3, #0]
 8029616:	605a      	str	r2, [r3, #4]
 8029618:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 802961a:	687b      	ldr	r3, [r7, #4]
 802961c:	3330      	adds	r3, #48	; 0x30
 802961e:	2200      	movs	r2, #0
 8029620:	601a      	str	r2, [r3, #0]
 8029622:	605a      	str	r2, [r3, #4]
 8029624:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 8029626:	687b      	ldr	r3, [r7, #4]
 8029628:	3348      	adds	r3, #72	; 0x48
 802962a:	2200      	movs	r2, #0
 802962c:	601a      	str	r2, [r3, #0]
 802962e:	605a      	str	r2, [r3, #4]
 8029630:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 8029632:	2300      	movs	r3, #0
 8029634:	e003      	b.n	802963e <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 8029636:	6878      	ldr	r0, [r7, #4]
 8029638:	f000 f80e 	bl	8029658 <lfs_deinit>
    return err;
 802963c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 802963e:	4618      	mov	r0, r3
 8029640:	3730      	adds	r7, #48	; 0x30
 8029642:	46bd      	mov	sp, r7
 8029644:	bd80      	pop	{r7, pc}
 8029646:	bf00      	nop
 8029648:	080338f8 	.word	0x080338f8
 802964c:	080346d0 	.word	0x080346d0
 8029650:	08033358 	.word	0x08033358
 8029654:	08033914 	.word	0x08033914

08029658 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8029658:	b580      	push	{r7, lr}
 802965a:	b082      	sub	sp, #8
 802965c:	af00      	add	r7, sp, #0
 802965e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029660:	687b      	ldr	r3, [r7, #4]
 8029662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029666:	2b00      	cmp	r3, #0
 8029668:	d104      	bne.n	8029674 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 802966a:	687b      	ldr	r3, [r7, #4]
 802966c:	68db      	ldr	r3, [r3, #12]
 802966e:	4618      	mov	r0, r3
 8029670:	f7f9 ffdb 	bl	802362a <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8029674:	687b      	ldr	r3, [r7, #4]
 8029676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802967a:	2b00      	cmp	r3, #0
 802967c:	d104      	bne.n	8029688 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 802967e:	687b      	ldr	r3, [r7, #4]
 8029680:	69db      	ldr	r3, [r3, #28]
 8029682:	4618      	mov	r0, r3
 8029684:	f7f9 ffd1 	bl	802362a <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8029688:	687b      	ldr	r3, [r7, #4]
 802968a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802968c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802968e:	2b00      	cmp	r3, #0
 8029690:	d104      	bne.n	802969c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8029692:	687b      	ldr	r3, [r7, #4]
 8029694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029696:	4618      	mov	r0, r3
 8029698:	f7f9 ffc7 	bl	802362a <lfs_free>
    }

    return 0;
 802969c:	2300      	movs	r3, #0
}
 802969e:	4618      	mov	r0, r3
 80296a0:	3708      	adds	r7, #8
 80296a2:	46bd      	mov	sp, r7
 80296a4:	bd80      	pop	{r7, pc}
	...

080296a8 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 80296a8:	b580      	push	{r7, lr}
 80296aa:	b0a0      	sub	sp, #128	; 0x80
 80296ac:	af00      	add	r7, sp, #0
 80296ae:	6078      	str	r0, [r7, #4]
 80296b0:	6039      	str	r1, [r7, #0]
    int err = 0;
 80296b2:	2300      	movs	r3, #0
 80296b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80296b6:	6839      	ldr	r1, [r7, #0]
 80296b8:	6878      	ldr	r0, [r7, #4]
 80296ba:	f7ff fe13 	bl	80292e4 <lfs_init>
 80296be:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80296c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80296c2:	2b00      	cmp	r3, #0
 80296c4:	d001      	beq.n	80296ca <lfs_rawformat+0x22>
            return err;
 80296c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80296c8:	e082      	b.n	80297d0 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80296ca:	687b      	ldr	r3, [r7, #4]
 80296cc:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80296ce:	687b      	ldr	r3, [r7, #4]
 80296d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296d4:	461a      	mov	r2, r3
 80296d6:	2100      	movs	r1, #0
 80296d8:	f004 f810 	bl	802d6fc <memset>
        lfs->free.off = 0;
 80296dc:	687b      	ldr	r3, [r7, #4]
 80296de:	2200      	movs	r2, #0
 80296e0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80296e2:	687b      	ldr	r3, [r7, #4]
 80296e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80296e8:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 80296ea:	687b      	ldr	r3, [r7, #4]
 80296ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296ee:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80296f0:	4619      	mov	r1, r3
 80296f2:	4610      	mov	r0, r2
 80296f4:	f7f9 feee 	bl	80234d4 <lfs_min>
 80296f8:	4602      	mov	r2, r0
 80296fa:	687b      	ldr	r3, [r7, #4]
 80296fc:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80296fe:	687b      	ldr	r3, [r7, #4]
 8029700:	2200      	movs	r2, #0
 8029702:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8029704:	6878      	ldr	r0, [r7, #4]
 8029706:	f7fa fe2b 	bl	8024360 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 802970a:	f107 030c 	add.w	r3, r7, #12
 802970e:	4619      	mov	r1, r3
 8029710:	6878      	ldr	r0, [r7, #4]
 8029712:	f7fc fc7d 	bl	8026010 <lfs_dir_alloc>
 8029716:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029718:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802971a:	2b00      	cmp	r3, #0
 802971c:	d14f      	bne.n	80297be <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 802971e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8029722:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8029724:	687b      	ldr	r3, [r7, #4]
 8029726:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029728:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 802972a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 802972c:	687b      	ldr	r3, [r7, #4]
 802972e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029730:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8029732:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8029734:	687b      	ldr	r3, [r7, #4]
 8029736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8029738:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 802973a:	687b      	ldr	r3, [r7, #4]
 802973c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 802973e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8029740:	687b      	ldr	r3, [r7, #4]
 8029742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8029744:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8029746:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802974a:	4618      	mov	r0, r3
 802974c:	f7fa fd48 	bl	80241e0 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8029750:	4b21      	ldr	r3, [pc, #132]	; (80297d8 <lfs_rawformat+0x130>)
 8029752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029754:	2300      	movs	r3, #0
 8029756:	653b      	str	r3, [r7, #80]	; 0x50
 8029758:	4b20      	ldr	r3, [pc, #128]	; (80297dc <lfs_rawformat+0x134>)
 802975a:	657b      	str	r3, [r7, #84]	; 0x54
 802975c:	4b20      	ldr	r3, [pc, #128]	; (80297e0 <lfs_rawformat+0x138>)
 802975e:	65bb      	str	r3, [r7, #88]	; 0x58
 8029760:	4b20      	ldr	r3, [pc, #128]	; (80297e4 <lfs_rawformat+0x13c>)
 8029762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029764:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029768:	663b      	str	r3, [r7, #96]	; 0x60
 802976a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802976e:	f107 010c 	add.w	r1, r7, #12
 8029772:	2303      	movs	r3, #3
 8029774:	6878      	ldr	r0, [r7, #4]
 8029776:	f7fd fe67 	bl	8027448 <lfs_dir_commit>
 802977a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 802977c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802977e:	2b00      	cmp	r3, #0
 8029780:	d11f      	bne.n	80297c2 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8029782:	2300      	movs	r3, #0
 8029784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8029788:	f107 010c 	add.w	r1, r7, #12
 802978c:	2300      	movs	r3, #0
 802978e:	2200      	movs	r2, #0
 8029790:	6878      	ldr	r0, [r7, #4]
 8029792:	f7fd fe59 	bl	8027448 <lfs_dir_commit>
 8029796:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 802979a:	2b00      	cmp	r3, #0
 802979c:	d113      	bne.n	80297c6 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 802979e:	2300      	movs	r3, #0
 80297a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80297a2:	2301      	movs	r3, #1
 80297a4:	633b      	str	r3, [r7, #48]	; 0x30
 80297a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80297aa:	f107 030c 	add.w	r3, r7, #12
 80297ae:	4619      	mov	r1, r3
 80297b0:	6878      	ldr	r0, [r7, #4]
 80297b2:	f7fc f82f 	bl	8025814 <lfs_dir_fetch>
 80297b6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80297b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80297ba:	2b00      	cmp	r3, #0
 80297bc:	e004      	b.n	80297c8 <lfs_rawformat+0x120>
            goto cleanup;
 80297be:	bf00      	nop
 80297c0:	e002      	b.n	80297c8 <lfs_rawformat+0x120>
            goto cleanup;
 80297c2:	bf00      	nop
 80297c4:	e000      	b.n	80297c8 <lfs_rawformat+0x120>
            goto cleanup;
 80297c6:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 80297c8:	6878      	ldr	r0, [r7, #4]
 80297ca:	f7ff ff45 	bl	8029658 <lfs_deinit>
    return err;
 80297ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 80297d0:	4618      	mov	r0, r3
 80297d2:	3780      	adds	r7, #128	; 0x80
 80297d4:	46bd      	mov	sp, r7
 80297d6:	bd80      	pop	{r7, pc}
 80297d8:	40100000 	.word	0x40100000
 80297dc:	0ff00008 	.word	0x0ff00008
 80297e0:	08033944 	.word	0x08033944
 80297e4:	20100018 	.word	0x20100018

080297e8 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 80297e8:	b580      	push	{r7, lr}
 80297ea:	b09c      	sub	sp, #112	; 0x70
 80297ec:	af04      	add	r7, sp, #16
 80297ee:	6078      	str	r0, [r7, #4]
 80297f0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 80297f2:	6839      	ldr	r1, [r7, #0]
 80297f4:	6878      	ldr	r0, [r7, #4]
 80297f6:	f7ff fd75 	bl	80292e4 <lfs_init>
 80297fa:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 80297fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80297fe:	2b00      	cmp	r3, #0
 8029800:	d001      	beq.n	8029806 <lfs_rawmount+0x1e>
        return err;
 8029802:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029804:	e192      	b.n	8029b2c <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802980a:	2220      	movs	r2, #32
 802980c:	2100      	movs	r1, #0
 802980e:	4618      	mov	r0, r3
 8029810:	f003 ff74 	bl	802d6fc <memset>
 8029814:	2301      	movs	r3, #1
 8029816:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8029818:	2300      	movs	r3, #0
 802981a:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 802981c:	e10b      	b.n	8029a36 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 802981e:	687b      	ldr	r3, [r7, #4]
 8029820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029822:	6a1b      	ldr	r3, [r3, #32]
 8029824:	085b      	lsrs	r3, r3, #1
 8029826:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029828:	429a      	cmp	r2, r3
 802982a:	d303      	bcc.n	8029834 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 802982c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029830:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029832:	e177      	b.n	8029b24 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8029834:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029836:	3301      	adds	r3, #1
 8029838:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 802983a:	687b      	ldr	r3, [r7, #4]
 802983c:	627b      	str	r3, [r7, #36]	; 0x24
 802983e:	4b8a      	ldr	r3, [pc, #552]	; (8029a68 <lfs_rawmount+0x280>)
 8029840:	62bb      	str	r3, [r7, #40]	; 0x28
 8029842:	2308      	movs	r3, #8
 8029844:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8029846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 802984a:	f103 0218 	add.w	r2, r3, #24
 802984e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029856:	9303      	str	r3, [sp, #12]
 8029858:	4b84      	ldr	r3, [pc, #528]	; (8029a6c <lfs_rawmount+0x284>)
 802985a:	9302      	str	r3, [sp, #8]
 802985c:	2300      	movs	r3, #0
 802985e:	9301      	str	r3, [sp, #4]
 8029860:	4b83      	ldr	r3, [pc, #524]	; (8029a70 <lfs_rawmount+0x288>)
 8029862:	9300      	str	r3, [sp, #0]
 8029864:	4b83      	ldr	r3, [pc, #524]	; (8029a74 <lfs_rawmount+0x28c>)
 8029866:	6878      	ldr	r0, [r7, #4]
 8029868:	f7fb fc66 	bl	8025138 <lfs_dir_fetchmatch>
 802986c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 802986e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029870:	2b00      	cmp	r3, #0
 8029872:	da02      	bge.n	802987a <lfs_rawmount+0x92>
            err = tag;
 8029874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029876:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029878:	e154      	b.n	8029b24 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 802987a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802987c:	2b00      	cmp	r3, #0
 802987e:	f000 80cd 	beq.w	8029a1c <lfs_rawmount+0x234>
 8029882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029884:	4618      	mov	r0, r3
 8029886:	f7fa faee 	bl	8023e66 <lfs_tag_isdelete>
 802988a:	4603      	mov	r3, r0
 802988c:	f083 0301 	eor.w	r3, r3, #1
 8029890:	b2db      	uxtb	r3, r3
 8029892:	2b00      	cmp	r3, #0
 8029894:	f000 80c2 	beq.w	8029a1c <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802989a:	687b      	ldr	r3, [r7, #4]
 802989c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 802989e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80298a0:	687b      	ldr	r3, [r7, #4]
 80298a2:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80298a4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80298a8:	f107 030c 	add.w	r3, r7, #12
 80298ac:	9300      	str	r3, [sp, #0]
 80298ae:	4b72      	ldr	r3, [pc, #456]	; (8029a78 <lfs_rawmount+0x290>)
 80298b0:	4a70      	ldr	r2, [pc, #448]	; (8029a74 <lfs_rawmount+0x28c>)
 80298b2:	6878      	ldr	r0, [r7, #4]
 80298b4:	f7fa ff0e 	bl	80246d4 <lfs_dir_get>
 80298b8:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 80298ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80298bc:	2b00      	cmp	r3, #0
 80298be:	da02      	bge.n	80298c6 <lfs_rawmount+0xde>
                err = tag;
 80298c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80298c2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80298c4:	e12e      	b.n	8029b24 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 80298c6:	f107 030c 	add.w	r3, r7, #12
 80298ca:	4618      	mov	r0, r3
 80298cc:	f7fa fc50 	bl	8024170 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 80298d0:	68fb      	ldr	r3, [r7, #12]
 80298d2:	0c1b      	lsrs	r3, r3, #16
 80298d4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 80298d8:	68fb      	ldr	r3, [r7, #12]
 80298da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 80298de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80298e2:	2b02      	cmp	r3, #2
 80298e4:	d103      	bne.n	80298ee <lfs_rawmount+0x106>
 80298e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80298ea:	2b00      	cmp	r3, #0
 80298ec:	d011      	beq.n	8029912 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 80298ee:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 80298f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80298f6:	4961      	ldr	r1, [pc, #388]	; (8029a7c <lfs_rawmount+0x294>)
 80298f8:	9101      	str	r1, [sp, #4]
 80298fa:	9300      	str	r3, [sp, #0]
 80298fc:	4613      	mov	r3, r2
 80298fe:	f241 0233 	movw	r2, #4147	; 0x1033
 8029902:	495f      	ldr	r1, [pc, #380]	; (8029a80 <lfs_rawmount+0x298>)
 8029904:	485f      	ldr	r0, [pc, #380]	; (8029a84 <lfs_rawmount+0x29c>)
 8029906:	f003 fd63 	bl	802d3d0 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 802990a:	f06f 0315 	mvn.w	r3, #21
 802990e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029910:	e083      	b.n	8029a1a <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8029912:	69bb      	ldr	r3, [r7, #24]
 8029914:	2b00      	cmp	r3, #0
 8029916:	d018      	beq.n	802994a <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8029918:	69ba      	ldr	r2, [r7, #24]
 802991a:	687b      	ldr	r3, [r7, #4]
 802991c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 802991e:	429a      	cmp	r2, r3
 8029920:	d910      	bls.n	8029944 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8029922:	69ba      	ldr	r2, [r7, #24]
 8029924:	687b      	ldr	r3, [r7, #4]
 8029926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029928:	4954      	ldr	r1, [pc, #336]	; (8029a7c <lfs_rawmount+0x294>)
 802992a:	9101      	str	r1, [sp, #4]
 802992c:	9300      	str	r3, [sp, #0]
 802992e:	4613      	mov	r3, r2
 8029930:	f241 023c 	movw	r2, #4156	; 0x103c
 8029934:	4952      	ldr	r1, [pc, #328]	; (8029a80 <lfs_rawmount+0x298>)
 8029936:	4854      	ldr	r0, [pc, #336]	; (8029a88 <lfs_rawmount+0x2a0>)
 8029938:	f003 fd4a 	bl	802d3d0 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 802993c:	f06f 0315 	mvn.w	r3, #21
 8029940:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029942:	e06a      	b.n	8029a1a <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8029944:	69ba      	ldr	r2, [r7, #24]
 8029946:	687b      	ldr	r3, [r7, #4]
 8029948:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 802994a:	69fb      	ldr	r3, [r7, #28]
 802994c:	2b00      	cmp	r3, #0
 802994e:	d018      	beq.n	8029982 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8029950:	69fa      	ldr	r2, [r7, #28]
 8029952:	687b      	ldr	r3, [r7, #4]
 8029954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029956:	429a      	cmp	r2, r3
 8029958:	d910      	bls.n	802997c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 802995a:	69fa      	ldr	r2, [r7, #28]
 802995c:	687b      	ldr	r3, [r7, #4]
 802995e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029960:	4946      	ldr	r1, [pc, #280]	; (8029a7c <lfs_rawmount+0x294>)
 8029962:	9101      	str	r1, [sp, #4]
 8029964:	9300      	str	r3, [sp, #0]
 8029966:	4613      	mov	r3, r2
 8029968:	f241 0247 	movw	r2, #4167	; 0x1047
 802996c:	4944      	ldr	r1, [pc, #272]	; (8029a80 <lfs_rawmount+0x298>)
 802996e:	4847      	ldr	r0, [pc, #284]	; (8029a8c <lfs_rawmount+0x2a4>)
 8029970:	f003 fd2e 	bl	802d3d0 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029974:	f06f 0315 	mvn.w	r3, #21
 8029978:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 802997a:	e04e      	b.n	8029a1a <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 802997c:	69fa      	ldr	r2, [r7, #28]
 802997e:	687b      	ldr	r3, [r7, #4]
 8029980:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8029982:	6a3b      	ldr	r3, [r7, #32]
 8029984:	2b00      	cmp	r3, #0
 8029986:	d018      	beq.n	80299ba <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029988:	6a3a      	ldr	r2, [r7, #32]
 802998a:	687b      	ldr	r3, [r7, #4]
 802998c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 802998e:	429a      	cmp	r2, r3
 8029990:	d910      	bls.n	80299b4 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029992:	6a3a      	ldr	r2, [r7, #32]
 8029994:	687b      	ldr	r3, [r7, #4]
 8029996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029998:	4938      	ldr	r1, [pc, #224]	; (8029a7c <lfs_rawmount+0x294>)
 802999a:	9101      	str	r1, [sp, #4]
 802999c:	9300      	str	r3, [sp, #0]
 802999e:	4613      	mov	r3, r2
 80299a0:	f241 0252 	movw	r2, #4178	; 0x1052
 80299a4:	4936      	ldr	r1, [pc, #216]	; (8029a80 <lfs_rawmount+0x298>)
 80299a6:	483a      	ldr	r0, [pc, #232]	; (8029a90 <lfs_rawmount+0x2a8>)
 80299a8:	f003 fd12 	bl	802d3d0 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80299ac:	f06f 0315 	mvn.w	r3, #21
 80299b0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 80299b2:	e032      	b.n	8029a1a <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 80299b4:	6a3a      	ldr	r2, [r7, #32]
 80299b6:	687b      	ldr	r3, [r7, #4]
 80299b8:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 80299ba:	697a      	ldr	r2, [r7, #20]
 80299bc:	687b      	ldr	r3, [r7, #4]
 80299be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299c0:	6a1b      	ldr	r3, [r3, #32]
 80299c2:	429a      	cmp	r2, r3
 80299c4:	d011      	beq.n	80299ea <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 80299c6:	697a      	ldr	r2, [r7, #20]
 80299c8:	687b      	ldr	r3, [r7, #4]
 80299ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299cc:	6a1b      	ldr	r3, [r3, #32]
 80299ce:	492b      	ldr	r1, [pc, #172]	; (8029a7c <lfs_rawmount+0x294>)
 80299d0:	9101      	str	r1, [sp, #4]
 80299d2:	9300      	str	r3, [sp, #0]
 80299d4:	4613      	mov	r3, r2
 80299d6:	f241 025c 	movw	r2, #4188	; 0x105c
 80299da:	4929      	ldr	r1, [pc, #164]	; (8029a80 <lfs_rawmount+0x298>)
 80299dc:	482d      	ldr	r0, [pc, #180]	; (8029a94 <lfs_rawmount+0x2ac>)
 80299de:	f003 fcf7 	bl	802d3d0 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 80299e2:	f06f 0315 	mvn.w	r3, #21
 80299e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80299e8:	e017      	b.n	8029a1a <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 80299ea:	693a      	ldr	r2, [r7, #16]
 80299ec:	687b      	ldr	r3, [r7, #4]
 80299ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299f0:	69db      	ldr	r3, [r3, #28]
 80299f2:	429a      	cmp	r2, r3
 80299f4:	d012      	beq.n	8029a1c <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 80299f6:	693a      	ldr	r2, [r7, #16]
 80299f8:	687b      	ldr	r3, [r7, #4]
 80299fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80299fc:	69db      	ldr	r3, [r3, #28]
 80299fe:	491f      	ldr	r1, [pc, #124]	; (8029a7c <lfs_rawmount+0x294>)
 8029a00:	9101      	str	r1, [sp, #4]
 8029a02:	9300      	str	r3, [sp, #0]
 8029a04:	4613      	mov	r3, r2
 8029a06:	f241 0263 	movw	r2, #4195	; 0x1063
 8029a0a:	491d      	ldr	r1, [pc, #116]	; (8029a80 <lfs_rawmount+0x298>)
 8029a0c:	4822      	ldr	r0, [pc, #136]	; (8029a98 <lfs_rawmount+0x2b0>)
 8029a0e:	f003 fcdf 	bl	802d3d0 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8029a12:	f06f 0315 	mvn.w	r3, #21
 8029a16:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029a18:	bf00      	nop
            goto cleanup;
 8029a1a:	e083      	b.n	8029b24 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8029a1c:	687b      	ldr	r3, [r7, #4]
 8029a1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8029a22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a26:	4619      	mov	r1, r3
 8029a28:	6878      	ldr	r0, [r7, #4]
 8029a2a:	f7fb ff0f 	bl	802584c <lfs_dir_getgstate>
 8029a2e:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8029a30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029a32:	2b00      	cmp	r3, #0
 8029a34:	d175      	bne.n	8029b22 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8029a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029a3a:	3318      	adds	r3, #24
 8029a3c:	4618      	mov	r0, r3
 8029a3e:	f7fa f95e 	bl	8023cfe <lfs_pair_isnull>
 8029a42:	4603      	mov	r3, r0
 8029a44:	f083 0301 	eor.w	r3, r3, #1
 8029a48:	b2db      	uxtb	r3, r3
 8029a4a:	2b00      	cmp	r3, #0
 8029a4c:	f47f aee7 	bne.w	802981e <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029a50:	687b      	ldr	r3, [r7, #4]
 8029a52:	3320      	adds	r3, #32
 8029a54:	4618      	mov	r0, r3
 8029a56:	f7fa f952 	bl	8023cfe <lfs_pair_isnull>
 8029a5a:	4603      	mov	r3, r0
 8029a5c:	2b00      	cmp	r3, #0
 8029a5e:	d01d      	beq.n	8029a9c <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029a60:	f06f 0315 	mvn.w	r3, #21
 8029a64:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8029a66:	e05d      	b.n	8029b24 <lfs_rawmount+0x33c>
 8029a68:	08033944 	.word	0x08033944
 8029a6c:	080259a5 	.word	0x080259a5
 8029a70:	0ff00008 	.word	0x0ff00008
 8029a74:	7ffffc00 	.word	0x7ffffc00
 8029a78:	20100018 	.word	0x20100018
 8029a7c:	0803346c 	.word	0x0803346c
 8029a80:	08033358 	.word	0x08033358
 8029a84:	08033950 	.word	0x08033950
 8029a88:	0803397c 	.word	0x0803397c
 8029a8c:	080339b0 	.word	0x080339b0
 8029a90:	080339e4 	.word	0x080339e4
 8029a94:	08033a18 	.word	0x08033a18
 8029a98:	08033a4c 	.word	0x08033a4c
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8029a9c:	687b      	ldr	r3, [r7, #4]
 8029a9e:	3330      	adds	r3, #48	; 0x30
 8029aa0:	4618      	mov	r0, r3
 8029aa2:	f7fa fa83 	bl	8023fac <lfs_gstate_iszero>
 8029aa6:	4603      	mov	r3, r0
 8029aa8:	f083 0301 	eor.w	r3, r3, #1
 8029aac:	b2db      	uxtb	r3, r3
 8029aae:	2b00      	cmp	r3, #0
 8029ab0:	d010      	beq.n	8029ad4 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029ab2:	687b      	ldr	r3, [r7, #4]
 8029ab4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029ab6:	687b      	ldr	r3, [r7, #4]
 8029ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029aba:	687a      	ldr	r2, [r7, #4]
 8029abc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029abe:	481d      	ldr	r0, [pc, #116]	; (8029b34 <lfs_rawmount+0x34c>)
 8029ac0:	9002      	str	r0, [sp, #8]
 8029ac2:	9201      	str	r2, [sp, #4]
 8029ac4:	9300      	str	r3, [sp, #0]
 8029ac6:	460b      	mov	r3, r1
 8029ac8:	f241 0279 	movw	r2, #4217	; 0x1079
 8029acc:	491a      	ldr	r1, [pc, #104]	; (8029b38 <lfs_rawmount+0x350>)
 8029ace:	481b      	ldr	r0, [pc, #108]	; (8029b3c <lfs_rawmount+0x354>)
 8029ad0:	f003 fc7e 	bl	802d3d0 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029ad4:	687b      	ldr	r3, [r7, #4]
 8029ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029ad8:	4618      	mov	r0, r3
 8029ada:	f7fa f9b6 	bl	8023e4a <lfs_tag_isvalid>
 8029ade:	4603      	mov	r3, r0
 8029ae0:	f083 0301 	eor.w	r3, r3, #1
 8029ae4:	b2db      	uxtb	r3, r3
 8029ae6:	461a      	mov	r2, r3
 8029ae8:	687b      	ldr	r3, [r7, #4]
 8029aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029aec:	441a      	add	r2, r3
 8029aee:	687b      	ldr	r3, [r7, #4]
 8029af0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8029af2:	687b      	ldr	r3, [r7, #4]
 8029af4:	687a      	ldr	r2, [r7, #4]
 8029af6:	333c      	adds	r3, #60	; 0x3c
 8029af8:	3230      	adds	r2, #48	; 0x30
 8029afa:	ca07      	ldmia	r2, {r0, r1, r2}
 8029afc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8029b00:	687b      	ldr	r3, [r7, #4]
 8029b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029b04:	687a      	ldr	r2, [r7, #4]
 8029b06:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029b08:	6a12      	ldr	r2, [r2, #32]
 8029b0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8029b0e:	fb01 f202 	mul.w	r2, r1, r2
 8029b12:	1a9a      	subs	r2, r3, r2
 8029b14:	687b      	ldr	r3, [r7, #4]
 8029b16:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8029b18:	6878      	ldr	r0, [r7, #4]
 8029b1a:	f7fa fc30 	bl	802437e <lfs_alloc_drop>

    return 0;
 8029b1e:	2300      	movs	r3, #0
 8029b20:	e004      	b.n	8029b2c <lfs_rawmount+0x344>
            goto cleanup;
 8029b22:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8029b24:	6878      	ldr	r0, [r7, #4]
 8029b26:	f000 f80b 	bl	8029b40 <lfs_rawunmount>
    return err;
 8029b2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8029b2c:	4618      	mov	r0, r3
 8029b2e:	3760      	adds	r7, #96	; 0x60
 8029b30:	46bd      	mov	sp, r7
 8029b32:	bd80      	pop	{r7, pc}
 8029b34:	0803346c 	.word	0x0803346c
 8029b38:	08033358 	.word	0x08033358
 8029b3c:	08033a7c 	.word	0x08033a7c

08029b40 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8029b40:	b580      	push	{r7, lr}
 8029b42:	b082      	sub	sp, #8
 8029b44:	af00      	add	r7, sp, #0
 8029b46:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8029b48:	6878      	ldr	r0, [r7, #4]
 8029b4a:	f7ff fd85 	bl	8029658 <lfs_deinit>
 8029b4e:	4603      	mov	r3, r0
}
 8029b50:	4618      	mov	r0, r3
 8029b52:	3708      	adds	r7, #8
 8029b54:	46bd      	mov	sp, r7
 8029b56:	bd80      	pop	{r7, pc}

08029b58 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8029b58:	b590      	push	{r4, r7, lr}
 8029b5a:	b09d      	sub	sp, #116	; 0x74
 8029b5c:	af04      	add	r7, sp, #16
 8029b5e:	60f8      	str	r0, [r7, #12]
 8029b60:	60b9      	str	r1, [r7, #8]
 8029b62:	607a      	str	r2, [r7, #4]
 8029b64:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029b66:	f107 0318 	add.w	r3, r7, #24
 8029b6a:	2220      	movs	r2, #32
 8029b6c:	2100      	movs	r1, #0
 8029b6e:	4618      	mov	r0, r3
 8029b70:	f003 fdc4 	bl	802d6fc <memset>
 8029b74:	2301      	movs	r3, #1
 8029b76:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8029b78:	2300      	movs	r3, #0
 8029b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8029b7c:	e0a7      	b.n	8029cce <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8029b7e:	68fb      	ldr	r3, [r7, #12]
 8029b80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029b82:	6a1b      	ldr	r3, [r3, #32]
 8029b84:	085b      	lsrs	r3, r3, #1
 8029b86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029b88:	429a      	cmp	r2, r3
 8029b8a:	d302      	bcc.n	8029b92 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029b8c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029b90:	e102      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8029b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029b94:	3301      	adds	r3, #1
 8029b96:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8029b98:	2300      	movs	r3, #0
 8029b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8029b9c:	e013      	b.n	8029bc6 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8029b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029ba0:	3306      	adds	r3, #6
 8029ba2:	009b      	lsls	r3, r3, #2
 8029ba4:	3360      	adds	r3, #96	; 0x60
 8029ba6:	443b      	add	r3, r7
 8029ba8:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8029bac:	68bb      	ldr	r3, [r7, #8]
 8029bae:	4611      	mov	r1, r2
 8029bb0:	6878      	ldr	r0, [r7, #4]
 8029bb2:	4798      	blx	r3
 8029bb4:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8029bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029bb8:	2b00      	cmp	r3, #0
 8029bba:	d001      	beq.n	8029bc0 <lfs_fs_rawtraverse+0x68>
                return err;
 8029bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029bbe:	e0eb      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8029bc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029bc2:	3301      	adds	r3, #1
 8029bc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8029bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029bc8:	2b01      	cmp	r3, #1
 8029bca:	dde8      	ble.n	8029b9e <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8029bcc:	f107 0318 	add.w	r3, r7, #24
 8029bd0:	f103 0218 	add.w	r2, r3, #24
 8029bd4:	f107 0318 	add.w	r3, r7, #24
 8029bd8:	4619      	mov	r1, r3
 8029bda:	68f8      	ldr	r0, [r7, #12]
 8029bdc:	f7fb fe1a 	bl	8025814 <lfs_dir_fetch>
 8029be0:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8029be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029be4:	2b00      	cmp	r3, #0
 8029be6:	d001      	beq.n	8029bec <lfs_fs_rawtraverse+0x94>
            return err;
 8029be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029bea:	e0d5      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8029bec:	2300      	movs	r3, #0
 8029bee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029bf2:	e067      	b.n	8029cc4 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8029bf4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029bf8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8029bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029bfe:	f043 0308 	orr.w	r3, r3, #8
 8029c02:	f107 0118 	add.w	r1, r7, #24
 8029c06:	f107 0210 	add.w	r2, r7, #16
 8029c0a:	9200      	str	r2, [sp, #0]
 8029c0c:	4a64      	ldr	r2, [pc, #400]	; (8029da0 <lfs_fs_rawtraverse+0x248>)
 8029c0e:	68f8      	ldr	r0, [r7, #12]
 8029c10:	f7fa fd60 	bl	80246d4 <lfs_dir_get>
 8029c14:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8029c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c18:	2b00      	cmp	r3, #0
 8029c1a:	da05      	bge.n	8029c28 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8029c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c1e:	f113 0f02 	cmn.w	r3, #2
 8029c22:	d049      	beq.n	8029cb8 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8029c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c26:	e0b7      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8029c28:	f107 0310 	add.w	r3, r7, #16
 8029c2c:	4618      	mov	r0, r3
 8029c2e:	f7fa fa6f 	bl	8024110 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8029c32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c34:	4618      	mov	r0, r3
 8029c36:	f7fa f939 	bl	8023eac <lfs_tag_type3>
 8029c3a:	4603      	mov	r3, r0
 8029c3c:	461a      	mov	r2, r3
 8029c3e:	f240 2302 	movw	r3, #514	; 0x202
 8029c42:	429a      	cmp	r2, r3
 8029c44:	d113      	bne.n	8029c6e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8029c46:	68f9      	ldr	r1, [r7, #12]
 8029c48:	6938      	ldr	r0, [r7, #16]
 8029c4a:	697b      	ldr	r3, [r7, #20]
 8029c4c:	687a      	ldr	r2, [r7, #4]
 8029c4e:	9202      	str	r2, [sp, #8]
 8029c50:	68ba      	ldr	r2, [r7, #8]
 8029c52:	9201      	str	r2, [sp, #4]
 8029c54:	9300      	str	r3, [sp, #0]
 8029c56:	4603      	mov	r3, r0
 8029c58:	460a      	mov	r2, r1
 8029c5a:	2100      	movs	r1, #0
 8029c5c:	68f8      	ldr	r0, [r7, #12]
 8029c5e:	f7fe f811 	bl	8027c84 <lfs_ctz_traverse>
 8029c62:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8029c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c66:	2b00      	cmp	r3, #0
 8029c68:	d027      	beq.n	8029cba <lfs_fs_rawtraverse+0x162>
                    return err;
 8029c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029c6c:	e094      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8029c6e:	78fb      	ldrb	r3, [r7, #3]
 8029c70:	2b00      	cmp	r3, #0
 8029c72:	d022      	beq.n	8029cba <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8029c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029c76:	4618      	mov	r0, r3
 8029c78:	f7fa f918 	bl	8023eac <lfs_tag_type3>
 8029c7c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8029c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029c82:	d11a      	bne.n	8029cba <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8029c84:	2300      	movs	r3, #0
 8029c86:	653b      	str	r3, [r7, #80]	; 0x50
 8029c88:	e012      	b.n	8029cb0 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8029c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029c8c:	009b      	lsls	r3, r3, #2
 8029c8e:	f107 0210 	add.w	r2, r7, #16
 8029c92:	4413      	add	r3, r2
 8029c94:	681a      	ldr	r2, [r3, #0]
 8029c96:	68bb      	ldr	r3, [r7, #8]
 8029c98:	4611      	mov	r1, r2
 8029c9a:	6878      	ldr	r0, [r7, #4]
 8029c9c:	4798      	blx	r3
 8029c9e:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8029ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029ca2:	2b00      	cmp	r3, #0
 8029ca4:	d001      	beq.n	8029caa <lfs_fs_rawtraverse+0x152>
                        return err;
 8029ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029ca8:	e076      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8029caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029cac:	3301      	adds	r3, #1
 8029cae:	653b      	str	r3, [r7, #80]	; 0x50
 8029cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8029cb2:	2b01      	cmp	r3, #1
 8029cb4:	dde9      	ble.n	8029c8a <lfs_fs_rawtraverse+0x132>
 8029cb6:	e000      	b.n	8029cba <lfs_fs_rawtraverse+0x162>
                    continue;
 8029cb8:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8029cba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029cbe:	3301      	adds	r3, #1
 8029cc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029cc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8029cc6:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8029cca:	429a      	cmp	r2, r3
 8029ccc:	d392      	bcc.n	8029bf4 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8029cce:	f107 0318 	add.w	r3, r7, #24
 8029cd2:	3318      	adds	r3, #24
 8029cd4:	4618      	mov	r0, r3
 8029cd6:	f7fa f812 	bl	8023cfe <lfs_pair_isnull>
 8029cda:	4603      	mov	r3, r0
 8029cdc:	f083 0301 	eor.w	r3, r3, #1
 8029ce0:	b2db      	uxtb	r3, r3
 8029ce2:	2b00      	cmp	r3, #0
 8029ce4:	f47f af4b 	bne.w	8029b7e <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029ce8:	68fb      	ldr	r3, [r7, #12]
 8029cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029cee:	e04f      	b.n	8029d90 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8029cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cf2:	799b      	ldrb	r3, [r3, #6]
 8029cf4:	2b01      	cmp	r3, #1
 8029cf6:	d147      	bne.n	8029d88 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8029cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8029d00:	2b00      	cmp	r3, #0
 8029d02:	d01d      	beq.n	8029d40 <lfs_fs_rawtraverse+0x1e8>
 8029d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029d0c:	2b00      	cmp	r3, #0
 8029d0e:	d117      	bne.n	8029d40 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d12:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029d16:	68f8      	ldr	r0, [r7, #12]
 8029d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d1a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8029d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029d20:	687a      	ldr	r2, [r7, #4]
 8029d22:	9202      	str	r2, [sp, #8]
 8029d24:	68ba      	ldr	r2, [r7, #8]
 8029d26:	9201      	str	r2, [sp, #4]
 8029d28:	9300      	str	r3, [sp, #0]
 8029d2a:	4623      	mov	r3, r4
 8029d2c:	4602      	mov	r2, r0
 8029d2e:	68f8      	ldr	r0, [r7, #12]
 8029d30:	f7fd ffa8 	bl	8027c84 <lfs_ctz_traverse>
 8029d34:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8029d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d38:	2b00      	cmp	r3, #0
 8029d3a:	d001      	beq.n	8029d40 <lfs_fs_rawtraverse+0x1e8>
                return err;
 8029d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8029d3e:	e02b      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8029d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8029d48:	2b00      	cmp	r3, #0
 8029d4a:	d01e      	beq.n	8029d8a <lfs_fs_rawtraverse+0x232>
 8029d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8029d54:	2b00      	cmp	r3, #0
 8029d56:	d118      	bne.n	8029d8a <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8029d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d5a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8029d5e:	68f8      	ldr	r0, [r7, #12]
 8029d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d62:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8029d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029d68:	687a      	ldr	r2, [r7, #4]
 8029d6a:	9202      	str	r2, [sp, #8]
 8029d6c:	68ba      	ldr	r2, [r7, #8]
 8029d6e:	9201      	str	r2, [sp, #4]
 8029d70:	9300      	str	r3, [sp, #0]
 8029d72:	4623      	mov	r3, r4
 8029d74:	4602      	mov	r2, r0
 8029d76:	68f8      	ldr	r0, [r7, #12]
 8029d78:	f7fd ff84 	bl	8027c84 <lfs_ctz_traverse>
 8029d7c:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8029d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d80:	2b00      	cmp	r3, #0
 8029d82:	d002      	beq.n	8029d8a <lfs_fs_rawtraverse+0x232>
                return err;
 8029d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8029d86:	e007      	b.n	8029d98 <lfs_fs_rawtraverse+0x240>
            continue;
 8029d88:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8029d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d8c:	681b      	ldr	r3, [r3, #0]
 8029d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8029d92:	2b00      	cmp	r3, #0
 8029d94:	d1ac      	bne.n	8029cf0 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8029d96:	2300      	movs	r3, #0
}
 8029d98:	4618      	mov	r0, r3
 8029d9a:	3764      	adds	r7, #100	; 0x64
 8029d9c:	46bd      	mov	sp, r7
 8029d9e:	bd90      	pop	{r4, r7, pc}
 8029da0:	700ffc00 	.word	0x700ffc00

08029da4 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8029da4:	b580      	push	{r7, lr}
 8029da6:	b086      	sub	sp, #24
 8029da8:	af00      	add	r7, sp, #0
 8029daa:	60f8      	str	r0, [r7, #12]
 8029dac:	60b9      	str	r1, [r7, #8]
 8029dae:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 8029db0:	687b      	ldr	r3, [r7, #4]
 8029db2:	2200      	movs	r2, #0
 8029db4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8029db6:	687b      	ldr	r3, [r7, #4]
 8029db8:	2201      	movs	r2, #1
 8029dba:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029dbc:	2300      	movs	r3, #0
 8029dbe:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 8029dc0:	e024      	b.n	8029e0c <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 8029dc2:	68fb      	ldr	r3, [r7, #12]
 8029dc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029dc6:	6a1b      	ldr	r3, [r3, #32]
 8029dc8:	085b      	lsrs	r3, r3, #1
 8029dca:	697a      	ldr	r2, [r7, #20]
 8029dcc:	429a      	cmp	r2, r3
 8029dce:	d302      	bcc.n	8029dd6 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029dd0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029dd4:	e027      	b.n	8029e26 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8029dd6:	697b      	ldr	r3, [r7, #20]
 8029dd8:	3301      	adds	r3, #1
 8029dda:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8029ddc:	687b      	ldr	r3, [r7, #4]
 8029dde:	3318      	adds	r3, #24
 8029de0:	68b9      	ldr	r1, [r7, #8]
 8029de2:	4618      	mov	r0, r3
 8029de4:	f7f9 ffa6 	bl	8023d34 <lfs_pair_cmp>
 8029de8:	4603      	mov	r3, r0
 8029dea:	2b00      	cmp	r3, #0
 8029dec:	d101      	bne.n	8029df2 <lfs_fs_pred+0x4e>
            return 0;
 8029dee:	2300      	movs	r3, #0
 8029df0:	e019      	b.n	8029e26 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 8029df2:	687b      	ldr	r3, [r7, #4]
 8029df4:	3318      	adds	r3, #24
 8029df6:	461a      	mov	r2, r3
 8029df8:	6879      	ldr	r1, [r7, #4]
 8029dfa:	68f8      	ldr	r0, [r7, #12]
 8029dfc:	f7fb fd0a 	bl	8025814 <lfs_dir_fetch>
 8029e00:	6138      	str	r0, [r7, #16]
        if (err) {
 8029e02:	693b      	ldr	r3, [r7, #16]
 8029e04:	2b00      	cmp	r3, #0
 8029e06:	d001      	beq.n	8029e0c <lfs_fs_pred+0x68>
            return err;
 8029e08:	693b      	ldr	r3, [r7, #16]
 8029e0a:	e00c      	b.n	8029e26 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8029e0c:	687b      	ldr	r3, [r7, #4]
 8029e0e:	3318      	adds	r3, #24
 8029e10:	4618      	mov	r0, r3
 8029e12:	f7f9 ff74 	bl	8023cfe <lfs_pair_isnull>
 8029e16:	4603      	mov	r3, r0
 8029e18:	f083 0301 	eor.w	r3, r3, #1
 8029e1c:	b2db      	uxtb	r3, r3
 8029e1e:	2b00      	cmp	r3, #0
 8029e20:	d1cf      	bne.n	8029dc2 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029e22:	f06f 0301 	mvn.w	r3, #1
}
 8029e26:	4618      	mov	r0, r3
 8029e28:	3718      	adds	r7, #24
 8029e2a:	46bd      	mov	sp, r7
 8029e2c:	bd80      	pop	{r7, pc}

08029e2e <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8029e2e:	b5b0      	push	{r4, r5, r7, lr}
 8029e30:	b08e      	sub	sp, #56	; 0x38
 8029e32:	af04      	add	r7, sp, #16
 8029e34:	60f8      	str	r0, [r7, #12]
 8029e36:	60b9      	str	r1, [r7, #8]
 8029e38:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8029e3a:	68fb      	ldr	r3, [r7, #12]
 8029e3c:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8029e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e40:	681b      	ldr	r3, [r3, #0]
 8029e42:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8029e44:	687b      	ldr	r3, [r7, #4]
 8029e46:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029e48:	6a3b      	ldr	r3, [r7, #32]
 8029e4a:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8029e4e:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8029e50:	6a3b      	ldr	r3, [r7, #32]
 8029e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029e54:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 8029e56:	69fb      	ldr	r3, [r7, #28]
 8029e58:	681b      	ldr	r3, [r3, #0]
 8029e5a:	69fa      	ldr	r2, [r7, #28]
 8029e5c:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 8029e5e:	2108      	movs	r1, #8
 8029e60:	9103      	str	r1, [sp, #12]
 8029e62:	f107 0110 	add.w	r1, r7, #16
 8029e66:	9102      	str	r1, [sp, #8]
 8029e68:	9201      	str	r2, [sp, #4]
 8029e6a:	9300      	str	r3, [sp, #0]
 8029e6c:	462b      	mov	r3, r5
 8029e6e:	4622      	mov	r2, r4
 8029e70:	4601      	mov	r1, r0
 8029e72:	6a38      	ldr	r0, [r7, #32]
 8029e74:	f7f9 fc0a 	bl	802368c <lfs_bd_read>
 8029e78:	61b8      	str	r0, [r7, #24]
    if (err) {
 8029e7a:	69bb      	ldr	r3, [r7, #24]
 8029e7c:	2b00      	cmp	r3, #0
 8029e7e:	d001      	beq.n	8029e84 <lfs_fs_parent_match+0x56>
        return err;
 8029e80:	69bb      	ldr	r3, [r7, #24]
 8029e82:	e012      	b.n	8029eaa <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8029e84:	f107 0310 	add.w	r3, r7, #16
 8029e88:	4618      	mov	r0, r3
 8029e8a:	f7f9 ffaa 	bl	8023de2 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8029e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029e90:	1d1a      	adds	r2, r3, #4
 8029e92:	f107 0310 	add.w	r3, r7, #16
 8029e96:	4611      	mov	r1, r2
 8029e98:	4618      	mov	r0, r3
 8029e9a:	f7f9 ff4b 	bl	8023d34 <lfs_pair_cmp>
 8029e9e:	4603      	mov	r3, r0
 8029ea0:	2b00      	cmp	r3, #0
 8029ea2:	bf14      	ite	ne
 8029ea4:	2301      	movne	r3, #1
 8029ea6:	2300      	moveq	r3, #0
 8029ea8:	b2db      	uxtb	r3, r3
}
 8029eaa:	4618      	mov	r0, r3
 8029eac:	3728      	adds	r7, #40	; 0x28
 8029eae:	46bd      	mov	sp, r7
 8029eb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08029eb4 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8029eb4:	b580      	push	{r7, lr}
 8029eb6:	b08e      	sub	sp, #56	; 0x38
 8029eb8:	af04      	add	r7, sp, #16
 8029eba:	60f8      	str	r0, [r7, #12]
 8029ebc:	60b9      	str	r1, [r7, #8]
 8029ebe:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8029ec0:	687b      	ldr	r3, [r7, #4]
 8029ec2:	2200      	movs	r2, #0
 8029ec4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8029ec6:	687b      	ldr	r3, [r7, #4]
 8029ec8:	2201      	movs	r2, #1
 8029eca:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8029ecc:	2300      	movs	r3, #0
 8029ece:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 8029ed0:	e030      	b.n	8029f34 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 8029ed2:	68fb      	ldr	r3, [r7, #12]
 8029ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ed6:	6a1b      	ldr	r3, [r3, #32]
 8029ed8:	085b      	lsrs	r3, r3, #1
 8029eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8029edc:	429a      	cmp	r2, r3
 8029ede:	d302      	bcc.n	8029ee6 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029ee0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029ee4:	e033      	b.n	8029f4e <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8029ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8029ee8:	3301      	adds	r3, #1
 8029eea:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029eec:	687b      	ldr	r3, [r7, #4]
 8029eee:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029ef2:	68fb      	ldr	r3, [r7, #12]
 8029ef4:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8029ef6:	68bb      	ldr	r3, [r7, #8]
 8029ef8:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029efa:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8029efc:	68bb      	ldr	r3, [r7, #8]
 8029efe:	3304      	adds	r3, #4
 8029f00:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8029f02:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8029f04:	f107 0314 	add.w	r3, r7, #20
 8029f08:	9303      	str	r3, [sp, #12]
 8029f0a:	4b13      	ldr	r3, [pc, #76]	; (8029f58 <lfs_fs_parent+0xa4>)
 8029f0c:	9302      	str	r3, [sp, #8]
 8029f0e:	2300      	movs	r3, #0
 8029f10:	9301      	str	r3, [sp, #4]
 8029f12:	4b12      	ldr	r3, [pc, #72]	; (8029f5c <lfs_fs_parent+0xa8>)
 8029f14:	9300      	str	r3, [sp, #0]
 8029f16:	4b12      	ldr	r3, [pc, #72]	; (8029f60 <lfs_fs_parent+0xac>)
 8029f18:	6879      	ldr	r1, [r7, #4]
 8029f1a:	68f8      	ldr	r0, [r7, #12]
 8029f1c:	f7fb f90c 	bl	8025138 <lfs_dir_fetchmatch>
 8029f20:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 8029f22:	6a3b      	ldr	r3, [r7, #32]
 8029f24:	2b00      	cmp	r3, #0
 8029f26:	d005      	beq.n	8029f34 <lfs_fs_parent+0x80>
 8029f28:	6a3b      	ldr	r3, [r7, #32]
 8029f2a:	f113 0f02 	cmn.w	r3, #2
 8029f2e:	d001      	beq.n	8029f34 <lfs_fs_parent+0x80>
            return tag;
 8029f30:	6a3b      	ldr	r3, [r7, #32]
 8029f32:	e00c      	b.n	8029f4e <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 8029f34:	687b      	ldr	r3, [r7, #4]
 8029f36:	3318      	adds	r3, #24
 8029f38:	4618      	mov	r0, r3
 8029f3a:	f7f9 fee0 	bl	8023cfe <lfs_pair_isnull>
 8029f3e:	4603      	mov	r3, r0
 8029f40:	f083 0301 	eor.w	r3, r3, #1
 8029f44:	b2db      	uxtb	r3, r3
 8029f46:	2b00      	cmp	r3, #0
 8029f48:	d1c3      	bne.n	8029ed2 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 8029f4a:	f06f 0301 	mvn.w	r3, #1
}
 8029f4e:	4618      	mov	r0, r3
 8029f50:	3728      	adds	r7, #40	; 0x28
 8029f52:	46bd      	mov	sp, r7
 8029f54:	bd80      	pop	{r7, pc}
 8029f56:	bf00      	nop
 8029f58:	08029e2f 	.word	0x08029e2f
 8029f5c:	20000008 	.word	0x20000008
 8029f60:	7ff003ff 	.word	0x7ff003ff

08029f64 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8029f64:	b590      	push	{r4, r7, lr}
 8029f66:	b083      	sub	sp, #12
 8029f68:	af00      	add	r7, sp, #0
 8029f6a:	6078      	str	r0, [r7, #4]
 8029f6c:	460b      	mov	r3, r1
 8029f6e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 8029f70:	687b      	ldr	r3, [r7, #4]
 8029f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029f74:	4618      	mov	r0, r3
 8029f76:	f7f9 ffd3 	bl	8023f20 <lfs_tag_size>
 8029f7a:	4603      	mov	r3, r0
 8029f7c:	2b00      	cmp	r3, #0
 8029f7e:	d10a      	bne.n	8029f96 <lfs_fs_preporphans+0x32>
 8029f80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029f84:	2b00      	cmp	r3, #0
 8029f86:	da06      	bge.n	8029f96 <lfs_fs_preporphans+0x32>
 8029f88:	4b10      	ldr	r3, [pc, #64]	; (8029fcc <lfs_fs_preporphans+0x68>)
 8029f8a:	4a11      	ldr	r2, [pc, #68]	; (8029fd0 <lfs_fs_preporphans+0x6c>)
 8029f8c:	f241 114c 	movw	r1, #4428	; 0x114c
 8029f90:	4810      	ldr	r0, [pc, #64]	; (8029fd4 <lfs_fs_preporphans+0x70>)
 8029f92:	f002 f9e3 	bl	802c35c <__assert_func>
    lfs->gstate.tag += orphans;
 8029f96:	687b      	ldr	r3, [r7, #4]
 8029f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8029f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8029f9e:	441a      	add	r2, r3
 8029fa0:	687b      	ldr	r3, [r7, #4]
 8029fa2:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8029fa4:	687b      	ldr	r3, [r7, #4]
 8029fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029fa8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 8029fac:	687b      	ldr	r3, [r7, #4]
 8029fae:	3330      	adds	r3, #48	; 0x30
 8029fb0:	4618      	mov	r0, r3
 8029fb2:	f7fa f818 	bl	8023fe6 <lfs_gstate_hasorphans>
 8029fb6:	4603      	mov	r3, r0
 8029fb8:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 8029fba:	ea44 0203 	orr.w	r2, r4, r3
 8029fbe:	687b      	ldr	r3, [r7, #4]
 8029fc0:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 8029fc2:	2300      	movs	r3, #0
}
 8029fc4:	4618      	mov	r0, r3
 8029fc6:	370c      	adds	r7, #12
 8029fc8:	46bd      	mov	sp, r7
 8029fca:	bd90      	pop	{r4, r7, pc}
 8029fcc:	08033ab4 	.word	0x08033ab4
 8029fd0:	080346dc 	.word	0x080346dc
 8029fd4:	08033358 	.word	0x08033358

08029fd8 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8029fd8:	b480      	push	{r7}
 8029fda:	b085      	sub	sp, #20
 8029fdc:	af00      	add	r7, sp, #0
 8029fde:	60f8      	str	r0, [r7, #12]
 8029fe0:	460b      	mov	r3, r1
 8029fe2:	607a      	str	r2, [r7, #4]
 8029fe4:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8029fe6:	68fb      	ldr	r3, [r7, #12]
 8029fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029fea:	4a17      	ldr	r2, [pc, #92]	; (802a048 <lfs_fs_prepmove+0x70>)
 8029fec:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8029fee:	897b      	ldrh	r3, [r7, #10]
 8029ff0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8029ff4:	428b      	cmp	r3, r1
 8029ff6:	d006      	beq.n	802a006 <lfs_fs_prepmove+0x2e>
 8029ff8:	897b      	ldrh	r3, [r7, #10]
 8029ffa:	029b      	lsls	r3, r3, #10
 8029ffc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a000:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a004:	e000      	b.n	802a008 <lfs_fs_prepmove+0x30>
 802a006:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a008:	431a      	orrs	r2, r3
 802a00a:	68fb      	ldr	r3, [r7, #12]
 802a00c:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 802a00e:	897b      	ldrh	r3, [r7, #10]
 802a010:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a014:	4293      	cmp	r3, r2
 802a016:	d002      	beq.n	802a01e <lfs_fs_prepmove+0x46>
 802a018:	687b      	ldr	r3, [r7, #4]
 802a01a:	681b      	ldr	r3, [r3, #0]
 802a01c:	e000      	b.n	802a020 <lfs_fs_prepmove+0x48>
 802a01e:	2300      	movs	r3, #0
 802a020:	68fa      	ldr	r2, [r7, #12]
 802a022:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 802a024:	897b      	ldrh	r3, [r7, #10]
 802a026:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a02a:	4293      	cmp	r3, r2
 802a02c:	d003      	beq.n	802a036 <lfs_fs_prepmove+0x5e>
 802a02e:	687b      	ldr	r3, [r7, #4]
 802a030:	3304      	adds	r3, #4
 802a032:	681b      	ldr	r3, [r3, #0]
 802a034:	e000      	b.n	802a038 <lfs_fs_prepmove+0x60>
 802a036:	2300      	movs	r3, #0
 802a038:	68fa      	ldr	r2, [r7, #12]
 802a03a:	6393      	str	r3, [r2, #56]	; 0x38
}
 802a03c:	bf00      	nop
 802a03e:	3714      	adds	r7, #20
 802a040:	46bd      	mov	sp, r7
 802a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a046:	4770      	bx	lr
 802a048:	800003ff 	.word	0x800003ff

0802a04c <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 802a04c:	b5b0      	push	{r4, r5, r7, lr}
 802a04e:	b094      	sub	sp, #80	; 0x50
 802a050:	af04      	add	r7, sp, #16
 802a052:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 802a054:	687b      	ldr	r3, [r7, #4]
 802a056:	333c      	adds	r3, #60	; 0x3c
 802a058:	4618      	mov	r0, r3
 802a05a:	f7f9 ffe6 	bl	802402a <lfs_gstate_hasmove>
 802a05e:	4603      	mov	r3, r0
 802a060:	f083 0301 	eor.w	r3, r3, #1
 802a064:	b2db      	uxtb	r3, r3
 802a066:	2b00      	cmp	r3, #0
 802a068:	d001      	beq.n	802a06e <lfs_fs_demove+0x22>
        return 0;
 802a06a:	2300      	movs	r3, #0
 802a06c:	e049      	b.n	802a102 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802a06e:	687b      	ldr	r3, [r7, #4]
 802a070:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 802a072:	687b      	ldr	r3, [r7, #4]
 802a074:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 802a076:	687b      	ldr	r3, [r7, #4]
 802a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a07a:	4618      	mov	r0, r3
 802a07c:	f7f9 ff40 	bl	8023f00 <lfs_tag_id>
 802a080:	4603      	mov	r3, r0
 802a082:	461a      	mov	r2, r3
 802a084:	4b21      	ldr	r3, [pc, #132]	; (802a10c <lfs_fs_demove+0xc0>)
 802a086:	9302      	str	r3, [sp, #8]
 802a088:	9201      	str	r2, [sp, #4]
 802a08a:	9400      	str	r4, [sp, #0]
 802a08c:	462b      	mov	r3, r5
 802a08e:	f241 1266 	movw	r2, #4454	; 0x1166
 802a092:	491f      	ldr	r1, [pc, #124]	; (802a110 <lfs_fs_demove+0xc4>)
 802a094:	481f      	ldr	r0, [pc, #124]	; (802a114 <lfs_fs_demove+0xc8>)
 802a096:	f003 f99b 	bl	802d3d0 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802a09a:	687b      	ldr	r3, [r7, #4]
 802a09c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 802a0a0:	f107 0318 	add.w	r3, r7, #24
 802a0a4:	4619      	mov	r1, r3
 802a0a6:	6878      	ldr	r0, [r7, #4]
 802a0a8:	f7fb fbb4 	bl	8025814 <lfs_dir_fetch>
 802a0ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 802a0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a0b0:	2b00      	cmp	r3, #0
 802a0b2:	d001      	beq.n	802a0b8 <lfs_fs_demove+0x6c>
        return err;
 802a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a0b6:	e024      	b.n	802a102 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 802a0b8:	687b      	ldr	r3, [r7, #4]
 802a0ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a0bc:	4618      	mov	r0, r3
 802a0be:	f7f9 ff1f 	bl	8023f00 <lfs_tag_id>
 802a0c2:	4603      	mov	r3, r0
 802a0c4:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a0c6:	2200      	movs	r2, #0
 802a0c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a0cc:	6878      	ldr	r0, [r7, #4]
 802a0ce:	f7ff ff83 	bl	8029fd8 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 802a0d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802a0d4:	029b      	lsls	r3, r3, #10
 802a0d6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a0da:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a0de:	613b      	str	r3, [r7, #16]
 802a0e0:	2300      	movs	r3, #0
 802a0e2:	617b      	str	r3, [r7, #20]
 802a0e4:	f107 0210 	add.w	r2, r7, #16
 802a0e8:	f107 0118 	add.w	r1, r7, #24
 802a0ec:	2301      	movs	r3, #1
 802a0ee:	6878      	ldr	r0, [r7, #4]
 802a0f0:	f7fd f9aa 	bl	8027448 <lfs_dir_commit>
 802a0f4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 802a0f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a0f8:	2b00      	cmp	r3, #0
 802a0fa:	d001      	beq.n	802a100 <lfs_fs_demove+0xb4>
        return err;
 802a0fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a0fe:	e000      	b.n	802a102 <lfs_fs_demove+0xb6>
    }

    return 0;
 802a100:	2300      	movs	r3, #0
}
 802a102:	4618      	mov	r0, r3
 802a104:	3740      	adds	r7, #64	; 0x40
 802a106:	46bd      	mov	sp, r7
 802a108:	bdb0      	pop	{r4, r5, r7, pc}
 802a10a:	bf00      	nop
 802a10c:	0803346c 	.word	0x0803346c
 802a110:	08033358 	.word	0x08033358
 802a114:	08033ae8 	.word	0x08033ae8

0802a118 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 802a118:	b5b0      	push	{r4, r5, r7, lr}
 802a11a:	b0b2      	sub	sp, #200	; 0xc8
 802a11c:	af04      	add	r7, sp, #16
 802a11e:	6078      	str	r0, [r7, #4]
 802a120:	460b      	mov	r3, r1
 802a122:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802a124:	687b      	ldr	r3, [r7, #4]
 802a126:	3330      	adds	r3, #48	; 0x30
 802a128:	4618      	mov	r0, r3
 802a12a:	f7f9 ff5c 	bl	8023fe6 <lfs_gstate_hasorphans>
 802a12e:	4603      	mov	r3, r0
 802a130:	f083 0301 	eor.w	r3, r3, #1
 802a134:	b2db      	uxtb	r3, r3
 802a136:	2b00      	cmp	r3, #0
 802a138:	d001      	beq.n	802a13e <lfs_fs_deorphan+0x26>
        return 0;
 802a13a:	2300      	movs	r3, #0
 802a13c:	e17c      	b.n	802a438 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 802a13e:	2300      	movs	r3, #0
 802a140:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802a144:	f107 030c 	add.w	r3, r7, #12
 802a148:	2220      	movs	r2, #32
 802a14a:	2100      	movs	r1, #0
 802a14c:	4618      	mov	r0, r3
 802a14e:	f003 fad5 	bl	802d6fc <memset>
 802a152:	2301      	movs	r3, #1
 802a154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802a158:	2301      	movs	r3, #1
 802a15a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802a15c:	e148      	b.n	802a3f0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802a15e:	f107 030c 	add.w	r3, r7, #12
 802a162:	f103 0218 	add.w	r2, r3, #24
 802a166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a16a:	4619      	mov	r1, r3
 802a16c:	6878      	ldr	r0, [r7, #4]
 802a16e:	f7fb fb51 	bl	8025814 <lfs_dir_fetch>
 802a172:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 802a176:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a17a:	2b00      	cmp	r3, #0
 802a17c:	d002      	beq.n	802a184 <lfs_fs_deorphan+0x6c>
                return err;
 802a17e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a182:	e159      	b.n	802a438 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 802a184:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802a188:	f083 0301 	eor.w	r3, r3, #1
 802a18c:	b2db      	uxtb	r3, r3
 802a18e:	2b00      	cmp	r3, #0
 802a190:	f000 8124 	beq.w	802a3dc <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 802a194:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802a198:	f107 030c 	add.w	r3, r7, #12
 802a19c:	3318      	adds	r3, #24
 802a19e:	4619      	mov	r1, r3
 802a1a0:	6878      	ldr	r0, [r7, #4]
 802a1a2:	f7ff fe87 	bl	8029eb4 <lfs_fs_parent>
 802a1a6:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 802a1aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a1ae:	2b00      	cmp	r3, #0
 802a1b0:	da07      	bge.n	802a1c2 <lfs_fs_deorphan+0xaa>
 802a1b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a1b6:	f113 0f02 	cmn.w	r3, #2
 802a1ba:	d002      	beq.n	802a1c2 <lfs_fs_deorphan+0xaa>
                    return tag;
 802a1bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a1c0:	e13a      	b.n	802a438 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 802a1c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a1c6:	f113 0f02 	cmn.w	r3, #2
 802a1ca:	d157      	bne.n	802a27c <lfs_fs_deorphan+0x164>
 802a1cc:	78fb      	ldrb	r3, [r7, #3]
 802a1ce:	2b00      	cmp	r3, #0
 802a1d0:	d054      	beq.n	802a27c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 802a1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a1d6:	499a      	ldr	r1, [pc, #616]	; (802a440 <lfs_fs_deorphan+0x328>)
 802a1d8:	9101      	str	r1, [sp, #4]
 802a1da:	9300      	str	r3, [sp, #0]
 802a1dc:	4613      	mov	r3, r2
 802a1de:	f241 12a1 	movw	r2, #4513	; 0x11a1
 802a1e2:	4998      	ldr	r1, [pc, #608]	; (802a444 <lfs_fs_deorphan+0x32c>)
 802a1e4:	4898      	ldr	r0, [pc, #608]	; (802a448 <lfs_fs_deorphan+0x330>)
 802a1e6:	f003 f8f3 	bl	802d3d0 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 802a1ea:	687b      	ldr	r3, [r7, #4]
 802a1ec:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802a1f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a1f4:	4619      	mov	r1, r3
 802a1f6:	6878      	ldr	r0, [r7, #4]
 802a1f8:	f7fb fb28 	bl	802584c <lfs_dir_getgstate>
 802a1fc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 802a200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a204:	2b00      	cmp	r3, #0
 802a206:	d002      	beq.n	802a20e <lfs_fs_deorphan+0xf6>
                        return err;
 802a208:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a20c:	e114      	b.n	802a438 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 802a20e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a212:	3318      	adds	r3, #24
 802a214:	4618      	mov	r0, r3
 802a216:	f7f9 fdfe 	bl	8023e16 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a21a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a21e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802a222:	051a      	lsls	r2, r3, #20
 802a224:	4b89      	ldr	r3, [pc, #548]	; (802a44c <lfs_fs_deorphan+0x334>)
 802a226:	4313      	orrs	r3, r2
 802a228:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a22c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a230:	3318      	adds	r3, #24
 802a232:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a236:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 802a23a:	f107 010c 	add.w	r1, r7, #12
 802a23e:	2301      	movs	r3, #1
 802a240:	6878      	ldr	r0, [r7, #4]
 802a242:	f7fc fe07 	bl	8026e54 <lfs_dir_orphaningcommit>
 802a246:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 802a24a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a24e:	3318      	adds	r3, #24
 802a250:	4618      	mov	r0, r3
 802a252:	f7f9 fdc6 	bl	8023de2 <lfs_pair_fromle32>
                    if (state < 0) {
 802a256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a25a:	2b00      	cmp	r3, #0
 802a25c:	da02      	bge.n	802a264 <lfs_fs_deorphan+0x14c>
                        return state;
 802a25e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 802a262:	e0e9      	b.n	802a438 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 802a264:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a268:	3301      	adds	r3, #1
 802a26a:	b2db      	uxtb	r3, r3
 802a26c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 802a270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a274:	2b03      	cmp	r3, #3
 802a276:	f040 80af 	bne.w	802a3d8 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 802a27a:	e763      	b.n	802a144 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 802a27c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a280:	f113 0f02 	cmn.w	r3, #2
 802a284:	f000 80aa 	beq.w	802a3dc <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802a288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802a28c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802a290:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a294:	9300      	str	r3, [sp, #0]
 802a296:	4613      	mov	r3, r2
 802a298:	4a6d      	ldr	r2, [pc, #436]	; (802a450 <lfs_fs_deorphan+0x338>)
 802a29a:	6878      	ldr	r0, [r7, #4]
 802a29c:	f7fa fa1a 	bl	80246d4 <lfs_dir_get>
 802a2a0:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 802a2a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a2a8:	2b00      	cmp	r3, #0
 802a2aa:	da02      	bge.n	802a2b2 <lfs_fs_deorphan+0x19a>
                        return state;
 802a2ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a2b0:	e0c2      	b.n	802a438 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 802a2b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a2b6:	4618      	mov	r0, r3
 802a2b8:	f7f9 fd93 	bl	8023de2 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 802a2bc:	f107 030c 	add.w	r3, r7, #12
 802a2c0:	f103 0218 	add.w	r2, r3, #24
 802a2c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a2c8:	4611      	mov	r1, r2
 802a2ca:	4618      	mov	r0, r3
 802a2cc:	f7f9 fd5c 	bl	8023d88 <lfs_pair_sync>
 802a2d0:	4603      	mov	r3, r0
 802a2d2:	f083 0301 	eor.w	r3, r3, #1
 802a2d6:	b2db      	uxtb	r3, r3
 802a2d8:	2b00      	cmp	r3, #0
 802a2da:	d07f      	beq.n	802a3dc <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 802a2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a2e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802a2e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802a2e8:	4c55      	ldr	r4, [pc, #340]	; (802a440 <lfs_fs_deorphan+0x328>)
 802a2ea:	9403      	str	r4, [sp, #12]
 802a2ec:	9102      	str	r1, [sp, #8]
 802a2ee:	9201      	str	r2, [sp, #4]
 802a2f0:	9300      	str	r3, [sp, #0]
 802a2f2:	4603      	mov	r3, r0
 802a2f4:	f241 12ca 	movw	r2, #4554	; 0x11ca
 802a2f8:	4952      	ldr	r1, [pc, #328]	; (802a444 <lfs_fs_deorphan+0x32c>)
 802a2fa:	4856      	ldr	r0, [pc, #344]	; (802a454 <lfs_fs_deorphan+0x33c>)
 802a2fc:	f003 f868 	bl	802d3d0 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802a300:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802a304:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802a308:	687b      	ldr	r3, [r7, #4]
 802a30a:	3330      	adds	r3, #48	; 0x30
 802a30c:	f107 020c 	add.w	r2, r7, #12
 802a310:	4611      	mov	r1, r2
 802a312:	4618      	mov	r0, r3
 802a314:	f7f9 fe9c 	bl	8024050 <lfs_gstate_hasmovehere>
 802a318:	4603      	mov	r3, r0
 802a31a:	2b00      	cmp	r3, #0
 802a31c:	d01c      	beq.n	802a358 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802a31e:	687b      	ldr	r3, [r7, #4]
 802a320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a322:	4618      	mov	r0, r3
 802a324:	f7f9 fdec 	bl	8023f00 <lfs_tag_id>
 802a328:	4603      	mov	r3, r0
 802a32a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 802a32e:	68f9      	ldr	r1, [r7, #12]
 802a330:	693b      	ldr	r3, [r7, #16]
 802a332:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802a336:	4842      	ldr	r0, [pc, #264]	; (802a440 <lfs_fs_deorphan+0x328>)
 802a338:	9002      	str	r0, [sp, #8]
 802a33a:	9201      	str	r2, [sp, #4]
 802a33c:	9300      	str	r3, [sp, #0]
 802a33e:	460b      	mov	r3, r1
 802a340:	f241 12d5 	movw	r2, #4565	; 0x11d5
 802a344:	493f      	ldr	r1, [pc, #252]	; (802a444 <lfs_fs_deorphan+0x32c>)
 802a346:	4844      	ldr	r0, [pc, #272]	; (802a458 <lfs_fs_deorphan+0x340>)
 802a348:	f003 f842 	bl	802d3d0 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a34c:	2200      	movs	r2, #0
 802a34e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a352:	6878      	ldr	r0, [r7, #4]
 802a354:	f7ff fe40 	bl	8029fd8 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a358:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a35c:	4618      	mov	r0, r3
 802a35e:	f7f9 fd5a 	bl	8023e16 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a362:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a366:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a36a:	4293      	cmp	r3, r2
 802a36c:	d007      	beq.n	802a37e <lfs_fs_deorphan+0x266>
 802a36e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a372:	029b      	lsls	r3, r3, #10
 802a374:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a378:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a37c:	e000      	b.n	802a380 <lfs_fs_deorphan+0x268>
 802a37e:	2300      	movs	r3, #0
 802a380:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a382:	2300      	movs	r3, #0
 802a384:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a388:	4b34      	ldr	r3, [pc, #208]	; (802a45c <lfs_fs_deorphan+0x344>)
 802a38a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a38e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a392:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a396:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a39a:	f107 010c 	add.w	r1, r7, #12
 802a39e:	2302      	movs	r3, #2
 802a3a0:	6878      	ldr	r0, [r7, #4]
 802a3a2:	f7fc fd57 	bl	8026e54 <lfs_dir_orphaningcommit>
 802a3a6:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a3aa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a3ae:	4618      	mov	r0, r3
 802a3b0:	f7f9 fd17 	bl	8023de2 <lfs_pair_fromle32>
                        if (state < 0) {
 802a3b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a3b8:	2b00      	cmp	r3, #0
 802a3ba:	da02      	bge.n	802a3c2 <lfs_fs_deorphan+0x2aa>
                            return state;
 802a3bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 802a3c0:	e03a      	b.n	802a438 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a3c2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a3c6:	3301      	adds	r3, #1
 802a3c8:	b2db      	uxtb	r3, r3
 802a3ca:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a3ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a3d2:	2b03      	cmp	r3, #3
 802a3d4:	d10c      	bne.n	802a3f0 <lfs_fs_deorphan+0x2d8>
 802a3d6:	e6b5      	b.n	802a144 <lfs_fs_deorphan+0x2c>
                    continue;
 802a3d8:	bf00      	nop
 802a3da:	e009      	b.n	802a3f0 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a3dc:	f107 040c 	add.w	r4, r7, #12
 802a3e0:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 802a3e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a3e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a3e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a3ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 802a3f0:	f107 030c 	add.w	r3, r7, #12
 802a3f4:	3318      	adds	r3, #24
 802a3f6:	4618      	mov	r0, r3
 802a3f8:	f7f9 fc81 	bl	8023cfe <lfs_pair_isnull>
 802a3fc:	4603      	mov	r3, r0
 802a3fe:	f083 0301 	eor.w	r3, r3, #1
 802a402:	b2db      	uxtb	r3, r3
 802a404:	2b00      	cmp	r3, #0
 802a406:	f47f aeaa 	bne.w	802a15e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a40a:	687b      	ldr	r3, [r7, #4]
 802a40c:	3330      	adds	r3, #48	; 0x30
 802a40e:	4618      	mov	r0, r3
 802a410:	f7f9 fdfc 	bl	802400c <lfs_gstate_getorphans>
 802a414:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a416:	461a      	mov	r2, r3
 802a418:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 802a41c:	4619      	mov	r1, r3
 802a41e:	4610      	mov	r0, r2
 802a420:	f7f9 f858 	bl	80234d4 <lfs_min>
 802a424:	4603      	mov	r3, r0
 802a426:	b2db      	uxtb	r3, r3
 802a428:	425b      	negs	r3, r3
 802a42a:	b2db      	uxtb	r3, r3
 802a42c:	b25b      	sxtb	r3, r3
 802a42e:	4619      	mov	r1, r3
 802a430:	6878      	ldr	r0, [r7, #4]
 802a432:	f7ff fd97 	bl	8029f64 <lfs_fs_preporphans>
 802a436:	4603      	mov	r3, r0
            found));
}
 802a438:	4618      	mov	r0, r3
 802a43a:	37b8      	adds	r7, #184	; 0xb8
 802a43c:	46bd      	mov	sp, r7
 802a43e:	bdb0      	pop	{r4, r5, r7, pc}
 802a440:	0803346c 	.word	0x0803346c
 802a444:	08033358 	.word	0x08033358
 802a448:	08033b1c 	.word	0x08033b1c
 802a44c:	000ffc08 	.word	0x000ffc08
 802a450:	7ffffc00 	.word	0x7ffffc00
 802a454:	08033b4c 	.word	0x08033b4c
 802a458:	08033b90 	.word	0x08033b90
 802a45c:	600ffc08 	.word	0x600ffc08

0802a460 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a460:	b580      	push	{r7, lr}
 802a462:	b084      	sub	sp, #16
 802a464:	af00      	add	r7, sp, #0
 802a466:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a468:	6878      	ldr	r0, [r7, #4]
 802a46a:	f7ff fdef 	bl	802a04c <lfs_fs_demove>
 802a46e:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a470:	68fb      	ldr	r3, [r7, #12]
 802a472:	2b00      	cmp	r3, #0
 802a474:	d001      	beq.n	802a47a <lfs_fs_forceconsistency+0x1a>
        return err;
 802a476:	68fb      	ldr	r3, [r7, #12]
 802a478:	e00a      	b.n	802a490 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a47a:	2101      	movs	r1, #1
 802a47c:	6878      	ldr	r0, [r7, #4]
 802a47e:	f7ff fe4b 	bl	802a118 <lfs_fs_deorphan>
 802a482:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a484:	68fb      	ldr	r3, [r7, #12]
 802a486:	2b00      	cmp	r3, #0
 802a488:	d001      	beq.n	802a48e <lfs_fs_forceconsistency+0x2e>
        return err;
 802a48a:	68fb      	ldr	r3, [r7, #12]
 802a48c:	e000      	b.n	802a490 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a48e:	2300      	movs	r3, #0
}
 802a490:	4618      	mov	r0, r3
 802a492:	3710      	adds	r7, #16
 802a494:	46bd      	mov	sp, r7
 802a496:	bd80      	pop	{r7, pc}

0802a498 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a498:	b480      	push	{r7}
 802a49a:	b085      	sub	sp, #20
 802a49c:	af00      	add	r7, sp, #0
 802a49e:	6078      	str	r0, [r7, #4]
 802a4a0:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a4a2:	687b      	ldr	r3, [r7, #4]
 802a4a4:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a4a6:	68fb      	ldr	r3, [r7, #12]
 802a4a8:	681b      	ldr	r3, [r3, #0]
 802a4aa:	1c5a      	adds	r2, r3, #1
 802a4ac:	68fb      	ldr	r3, [r7, #12]
 802a4ae:	601a      	str	r2, [r3, #0]
    return 0;
 802a4b0:	2300      	movs	r3, #0
}
 802a4b2:	4618      	mov	r0, r3
 802a4b4:	3714      	adds	r7, #20
 802a4b6:	46bd      	mov	sp, r7
 802a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a4bc:	4770      	bx	lr
	...

0802a4c0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a4c0:	b580      	push	{r7, lr}
 802a4c2:	b084      	sub	sp, #16
 802a4c4:	af00      	add	r7, sp, #0
 802a4c6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a4c8:	2300      	movs	r3, #0
 802a4ca:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a4cc:	f107 0208 	add.w	r2, r7, #8
 802a4d0:	2300      	movs	r3, #0
 802a4d2:	4907      	ldr	r1, [pc, #28]	; (802a4f0 <lfs_fs_rawsize+0x30>)
 802a4d4:	6878      	ldr	r0, [r7, #4]
 802a4d6:	f7ff fb3f 	bl	8029b58 <lfs_fs_rawtraverse>
 802a4da:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a4dc:	68fb      	ldr	r3, [r7, #12]
 802a4de:	2b00      	cmp	r3, #0
 802a4e0:	d001      	beq.n	802a4e6 <lfs_fs_rawsize+0x26>
        return err;
 802a4e2:	68fb      	ldr	r3, [r7, #12]
 802a4e4:	e000      	b.n	802a4e8 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a4e6:	68bb      	ldr	r3, [r7, #8]
}
 802a4e8:	4618      	mov	r0, r3
 802a4ea:	3710      	adds	r7, #16
 802a4ec:	46bd      	mov	sp, r7
 802a4ee:	bd80      	pop	{r7, pc}
 802a4f0:	0802a499 	.word	0x0802a499

0802a4f4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a4f4:	b580      	push	{r7, lr}
 802a4f6:	b084      	sub	sp, #16
 802a4f8:	af00      	add	r7, sp, #0
 802a4fa:	6078      	str	r0, [r7, #4]
 802a4fc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a4fe:	2300      	movs	r3, #0
 802a500:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a502:	68fb      	ldr	r3, [r7, #12]
 802a504:	2b00      	cmp	r3, #0
 802a506:	d001      	beq.n	802a50c <lfs_format+0x18>
        return err;
 802a508:	68fb      	ldr	r3, [r7, #12]
 802a50a:	e005      	b.n	802a518 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a50c:	6839      	ldr	r1, [r7, #0]
 802a50e:	6878      	ldr	r0, [r7, #4]
 802a510:	f7ff f8ca 	bl	80296a8 <lfs_rawformat>
 802a514:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a516:	68fb      	ldr	r3, [r7, #12]
}
 802a518:	4618      	mov	r0, r3
 802a51a:	3710      	adds	r7, #16
 802a51c:	46bd      	mov	sp, r7
 802a51e:	bd80      	pop	{r7, pc}

0802a520 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a520:	b580      	push	{r7, lr}
 802a522:	b084      	sub	sp, #16
 802a524:	af00      	add	r7, sp, #0
 802a526:	6078      	str	r0, [r7, #4]
 802a528:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a52a:	2300      	movs	r3, #0
 802a52c:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a52e:	68fb      	ldr	r3, [r7, #12]
 802a530:	2b00      	cmp	r3, #0
 802a532:	d001      	beq.n	802a538 <lfs_mount+0x18>
        return err;
 802a534:	68fb      	ldr	r3, [r7, #12]
 802a536:	e005      	b.n	802a544 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802a538:	6839      	ldr	r1, [r7, #0]
 802a53a:	6878      	ldr	r0, [r7, #4]
 802a53c:	f7ff f954 	bl	80297e8 <lfs_rawmount>
 802a540:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a542:	68fb      	ldr	r3, [r7, #12]
}
 802a544:	4618      	mov	r0, r3
 802a546:	3710      	adds	r7, #16
 802a548:	46bd      	mov	sp, r7
 802a54a:	bd80      	pop	{r7, pc}

0802a54c <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802a54c:	b580      	push	{r7, lr}
 802a54e:	b084      	sub	sp, #16
 802a550:	af00      	add	r7, sp, #0
 802a552:	6078      	str	r0, [r7, #4]
 802a554:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a556:	2300      	movs	r3, #0
 802a558:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a55a:	68fb      	ldr	r3, [r7, #12]
 802a55c:	2b00      	cmp	r3, #0
 802a55e:	d001      	beq.n	802a564 <lfs_remove+0x18>
        return err;
 802a560:	68fb      	ldr	r3, [r7, #12]
 802a562:	e005      	b.n	802a570 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802a564:	6839      	ldr	r1, [r7, #0]
 802a566:	6878      	ldr	r0, [r7, #4]
 802a568:	f7fe fbd0 	bl	8028d0c <lfs_rawremove>
 802a56c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a56e:	68fb      	ldr	r3, [r7, #12]
}
 802a570:	4618      	mov	r0, r3
 802a572:	3710      	adds	r7, #16
 802a574:	46bd      	mov	sp, r7
 802a576:	bd80      	pop	{r7, pc}

0802a578 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802a578:	b580      	push	{r7, lr}
 802a57a:	b086      	sub	sp, #24
 802a57c:	af00      	add	r7, sp, #0
 802a57e:	60f8      	str	r0, [r7, #12]
 802a580:	60b9      	str	r1, [r7, #8]
 802a582:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a584:	2300      	movs	r3, #0
 802a586:	617b      	str	r3, [r7, #20]
    if (err) {
 802a588:	697b      	ldr	r3, [r7, #20]
 802a58a:	2b00      	cmp	r3, #0
 802a58c:	d001      	beq.n	802a592 <lfs_rename+0x1a>
        return err;
 802a58e:	697b      	ldr	r3, [r7, #20]
 802a590:	e006      	b.n	802a5a0 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802a592:	687a      	ldr	r2, [r7, #4]
 802a594:	68b9      	ldr	r1, [r7, #8]
 802a596:	68f8      	ldr	r0, [r7, #12]
 802a598:	f7fe fc92 	bl	8028ec0 <lfs_rawrename>
 802a59c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a59e:	697b      	ldr	r3, [r7, #20]
}
 802a5a0:	4618      	mov	r0, r3
 802a5a2:	3718      	adds	r7, #24
 802a5a4:	46bd      	mov	sp, r7
 802a5a6:	bd80      	pop	{r7, pc}

0802a5a8 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802a5a8:	b580      	push	{r7, lr}
 802a5aa:	b086      	sub	sp, #24
 802a5ac:	af00      	add	r7, sp, #0
 802a5ae:	60f8      	str	r0, [r7, #12]
 802a5b0:	60b9      	str	r1, [r7, #8]
 802a5b2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a5b4:	2300      	movs	r3, #0
 802a5b6:	617b      	str	r3, [r7, #20]
    if (err) {
 802a5b8:	697b      	ldr	r3, [r7, #20]
 802a5ba:	2b00      	cmp	r3, #0
 802a5bc:	d001      	beq.n	802a5c2 <lfs_stat+0x1a>
        return err;
 802a5be:	697b      	ldr	r3, [r7, #20]
 802a5c0:	e006      	b.n	802a5d0 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802a5c2:	687a      	ldr	r2, [r7, #4]
 802a5c4:	68b9      	ldr	r1, [r7, #8]
 802a5c6:	68f8      	ldr	r0, [r7, #12]
 802a5c8:	f7fe fb7a 	bl	8028cc0 <lfs_rawstat>
 802a5cc:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a5ce:	697b      	ldr	r3, [r7, #20]
}
 802a5d0:	4618      	mov	r0, r3
 802a5d2:	3718      	adds	r7, #24
 802a5d4:	46bd      	mov	sp, r7
 802a5d6:	bd80      	pop	{r7, pc}

0802a5d8 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802a5d8:	b580      	push	{r7, lr}
 802a5da:	b088      	sub	sp, #32
 802a5dc:	af02      	add	r7, sp, #8
 802a5de:	60f8      	str	r0, [r7, #12]
 802a5e0:	60b9      	str	r1, [r7, #8]
 802a5e2:	607a      	str	r2, [r7, #4]
 802a5e4:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a5e6:	2300      	movs	r3, #0
 802a5e8:	617b      	str	r3, [r7, #20]
    if (err) {
 802a5ea:	697b      	ldr	r3, [r7, #20]
 802a5ec:	2b00      	cmp	r3, #0
 802a5ee:	d001      	beq.n	802a5f4 <lfs_file_opencfg+0x1c>
        return err;
 802a5f0:	697b      	ldr	r3, [r7, #20]
 802a5f2:	e01c      	b.n	802a62e <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a5f4:	68fb      	ldr	r3, [r7, #12]
 802a5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a5f8:	68b9      	ldr	r1, [r7, #8]
 802a5fa:	4618      	mov	r0, r3
 802a5fc:	f7f9 fe28 	bl	8024250 <lfs_mlist_isopen>
 802a600:	4603      	mov	r3, r0
 802a602:	f083 0301 	eor.w	r3, r3, #1
 802a606:	b2db      	uxtb	r3, r3
 802a608:	2b00      	cmp	r3, #0
 802a60a:	d106      	bne.n	802a61a <lfs_file_opencfg+0x42>
 802a60c:	4b0a      	ldr	r3, [pc, #40]	; (802a638 <lfs_file_opencfg+0x60>)
 802a60e:	4a0b      	ldr	r2, [pc, #44]	; (802a63c <lfs_file_opencfg+0x64>)
 802a610:	f241 517b 	movw	r1, #5499	; 0x157b
 802a614:	480a      	ldr	r0, [pc, #40]	; (802a640 <lfs_file_opencfg+0x68>)
 802a616:	f001 fea1 	bl	802c35c <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802a61a:	6a3b      	ldr	r3, [r7, #32]
 802a61c:	9300      	str	r3, [sp, #0]
 802a61e:	683b      	ldr	r3, [r7, #0]
 802a620:	687a      	ldr	r2, [r7, #4]
 802a622:	68b9      	ldr	r1, [r7, #8]
 802a624:	68f8      	ldr	r0, [r7, #12]
 802a626:	f7fd fba9 	bl	8027d7c <lfs_file_rawopencfg>
 802a62a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a62c:	697b      	ldr	r3, [r7, #20]
}
 802a62e:	4618      	mov	r0, r3
 802a630:	3718      	adds	r7, #24
 802a632:	46bd      	mov	sp, r7
 802a634:	bd80      	pop	{r7, pc}
 802a636:	bf00      	nop
 802a638:	08033bd8 	.word	0x08033bd8
 802a63c:	080346f0 	.word	0x080346f0
 802a640:	08033358 	.word	0x08033358

0802a644 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802a644:	b580      	push	{r7, lr}
 802a646:	b084      	sub	sp, #16
 802a648:	af00      	add	r7, sp, #0
 802a64a:	6078      	str	r0, [r7, #4]
 802a64c:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a64e:	2300      	movs	r3, #0
 802a650:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a652:	68fb      	ldr	r3, [r7, #12]
 802a654:	2b00      	cmp	r3, #0
 802a656:	d001      	beq.n	802a65c <lfs_file_close+0x18>
        return err;
 802a658:	68fb      	ldr	r3, [r7, #12]
 802a65a:	e015      	b.n	802a688 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a65c:	687b      	ldr	r3, [r7, #4]
 802a65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a660:	6839      	ldr	r1, [r7, #0]
 802a662:	4618      	mov	r0, r3
 802a664:	f7f9 fdf4 	bl	8024250 <lfs_mlist_isopen>
 802a668:	4603      	mov	r3, r0
 802a66a:	2b00      	cmp	r3, #0
 802a66c:	d106      	bne.n	802a67c <lfs_file_close+0x38>
 802a66e:	4b08      	ldr	r3, [pc, #32]	; (802a690 <lfs_file_close+0x4c>)
 802a670:	4a08      	ldr	r2, [pc, #32]	; (802a694 <lfs_file_close+0x50>)
 802a672:	f241 518a 	movw	r1, #5514	; 0x158a
 802a676:	4808      	ldr	r0, [pc, #32]	; (802a698 <lfs_file_close+0x54>)
 802a678:	f001 fe70 	bl	802c35c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802a67c:	6839      	ldr	r1, [r7, #0]
 802a67e:	6878      	ldr	r0, [r7, #4]
 802a680:	f7fd fd4c 	bl	802811c <lfs_file_rawclose>
 802a684:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a686:	68fb      	ldr	r3, [r7, #12]
}
 802a688:	4618      	mov	r0, r3
 802a68a:	3710      	adds	r7, #16
 802a68c:	46bd      	mov	sp, r7
 802a68e:	bd80      	pop	{r7, pc}
 802a690:	08033c10 	.word	0x08033c10
 802a694:	08034704 	.word	0x08034704
 802a698:	08033358 	.word	0x08033358

0802a69c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802a69c:	b580      	push	{r7, lr}
 802a69e:	b086      	sub	sp, #24
 802a6a0:	af00      	add	r7, sp, #0
 802a6a2:	60f8      	str	r0, [r7, #12]
 802a6a4:	60b9      	str	r1, [r7, #8]
 802a6a6:	607a      	str	r2, [r7, #4]
 802a6a8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a6aa:	2300      	movs	r3, #0
 802a6ac:	617b      	str	r3, [r7, #20]
    if (err) {
 802a6ae:	697b      	ldr	r3, [r7, #20]
 802a6b0:	2b00      	cmp	r3, #0
 802a6b2:	d001      	beq.n	802a6b8 <lfs_file_read+0x1c>
        return err;
 802a6b4:	697b      	ldr	r3, [r7, #20]
 802a6b6:	e017      	b.n	802a6e8 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a6b8:	68fb      	ldr	r3, [r7, #12]
 802a6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a6bc:	68b9      	ldr	r1, [r7, #8]
 802a6be:	4618      	mov	r0, r3
 802a6c0:	f7f9 fdc6 	bl	8024250 <lfs_mlist_isopen>
 802a6c4:	4603      	mov	r3, r0
 802a6c6:	2b00      	cmp	r3, #0
 802a6c8:	d106      	bne.n	802a6d8 <lfs_file_read+0x3c>
 802a6ca:	4b09      	ldr	r3, [pc, #36]	; (802a6f0 <lfs_file_read+0x54>)
 802a6cc:	4a09      	ldr	r2, [pc, #36]	; (802a6f4 <lfs_file_read+0x58>)
 802a6ce:	f241 51ac 	movw	r1, #5548	; 0x15ac
 802a6d2:	4809      	ldr	r0, [pc, #36]	; (802a6f8 <lfs_file_read+0x5c>)
 802a6d4:	f001 fe42 	bl	802c35c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802a6d8:	683b      	ldr	r3, [r7, #0]
 802a6da:	687a      	ldr	r2, [r7, #4]
 802a6dc:	68b9      	ldr	r1, [r7, #8]
 802a6de:	68f8      	ldr	r0, [r7, #12]
 802a6e0:	f7fe f868 	bl	80287b4 <lfs_file_rawread>
 802a6e4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a6e6:	693b      	ldr	r3, [r7, #16]
}
 802a6e8:	4618      	mov	r0, r3
 802a6ea:	3718      	adds	r7, #24
 802a6ec:	46bd      	mov	sp, r7
 802a6ee:	bd80      	pop	{r7, pc}
 802a6f0:	08033c10 	.word	0x08033c10
 802a6f4:	08034714 	.word	0x08034714
 802a6f8:	08033358 	.word	0x08033358

0802a6fc <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802a6fc:	b580      	push	{r7, lr}
 802a6fe:	b086      	sub	sp, #24
 802a700:	af00      	add	r7, sp, #0
 802a702:	60f8      	str	r0, [r7, #12]
 802a704:	60b9      	str	r1, [r7, #8]
 802a706:	607a      	str	r2, [r7, #4]
 802a708:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a70a:	2300      	movs	r3, #0
 802a70c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a70e:	697b      	ldr	r3, [r7, #20]
 802a710:	2b00      	cmp	r3, #0
 802a712:	d001      	beq.n	802a718 <lfs_file_write+0x1c>
        return err;
 802a714:	697b      	ldr	r3, [r7, #20]
 802a716:	e017      	b.n	802a748 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a718:	68fb      	ldr	r3, [r7, #12]
 802a71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a71c:	68b9      	ldr	r1, [r7, #8]
 802a71e:	4618      	mov	r0, r3
 802a720:	f7f9 fd96 	bl	8024250 <lfs_mlist_isopen>
 802a724:	4603      	mov	r3, r0
 802a726:	2b00      	cmp	r3, #0
 802a728:	d106      	bne.n	802a738 <lfs_file_write+0x3c>
 802a72a:	4b09      	ldr	r3, [pc, #36]	; (802a750 <lfs_file_write+0x54>)
 802a72c:	4a09      	ldr	r2, [pc, #36]	; (802a754 <lfs_file_write+0x58>)
 802a72e:	f241 51be 	movw	r1, #5566	; 0x15be
 802a732:	4809      	ldr	r0, [pc, #36]	; (802a758 <lfs_file_write+0x5c>)
 802a734:	f001 fe12 	bl	802c35c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802a738:	683b      	ldr	r3, [r7, #0]
 802a73a:	687a      	ldr	r2, [r7, #4]
 802a73c:	68b9      	ldr	r1, [r7, #8]
 802a73e:	68f8      	ldr	r0, [r7, #12]
 802a740:	f7fe f996 	bl	8028a70 <lfs_file_rawwrite>
 802a744:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a746:	693b      	ldr	r3, [r7, #16]
}
 802a748:	4618      	mov	r0, r3
 802a74a:	3718      	adds	r7, #24
 802a74c:	46bd      	mov	sp, r7
 802a74e:	bd80      	pop	{r7, pc}
 802a750:	08033c10 	.word	0x08033c10
 802a754:	08034724 	.word	0x08034724
 802a758:	08033358 	.word	0x08033358

0802a75c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802a75c:	b580      	push	{r7, lr}
 802a75e:	b086      	sub	sp, #24
 802a760:	af00      	add	r7, sp, #0
 802a762:	60f8      	str	r0, [r7, #12]
 802a764:	60b9      	str	r1, [r7, #8]
 802a766:	607a      	str	r2, [r7, #4]
 802a768:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a76a:	2300      	movs	r3, #0
 802a76c:	617b      	str	r3, [r7, #20]
    if (err) {
 802a76e:	697b      	ldr	r3, [r7, #20]
 802a770:	2b00      	cmp	r3, #0
 802a772:	d001      	beq.n	802a778 <lfs_file_seek+0x1c>
        return err;
 802a774:	697b      	ldr	r3, [r7, #20]
 802a776:	e017      	b.n	802a7a8 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a778:	68fb      	ldr	r3, [r7, #12]
 802a77a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a77c:	68b9      	ldr	r1, [r7, #8]
 802a77e:	4618      	mov	r0, r3
 802a780:	f7f9 fd66 	bl	8024250 <lfs_mlist_isopen>
 802a784:	4603      	mov	r3, r0
 802a786:	2b00      	cmp	r3, #0
 802a788:	d106      	bne.n	802a798 <lfs_file_seek+0x3c>
 802a78a:	4b09      	ldr	r3, [pc, #36]	; (802a7b0 <lfs_file_seek+0x54>)
 802a78c:	4a09      	ldr	r2, [pc, #36]	; (802a7b4 <lfs_file_seek+0x58>)
 802a78e:	f241 51d0 	movw	r1, #5584	; 0x15d0
 802a792:	4809      	ldr	r0, [pc, #36]	; (802a7b8 <lfs_file_seek+0x5c>)
 802a794:	f001 fde2 	bl	802c35c <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802a798:	683b      	ldr	r3, [r7, #0]
 802a79a:	687a      	ldr	r2, [r7, #4]
 802a79c:	68b9      	ldr	r1, [r7, #8]
 802a79e:	68f8      	ldr	r0, [r7, #12]
 802a7a0:	f7fe f9ea 	bl	8028b78 <lfs_file_rawseek>
 802a7a4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802a7a6:	693b      	ldr	r3, [r7, #16]
}
 802a7a8:	4618      	mov	r0, r3
 802a7aa:	3718      	adds	r7, #24
 802a7ac:	46bd      	mov	sp, r7
 802a7ae:	bd80      	pop	{r7, pc}
 802a7b0:	08033c10 	.word	0x08033c10
 802a7b4:	08034734 	.word	0x08034734
 802a7b8:	08033358 	.word	0x08033358

0802a7bc <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802a7bc:	b580      	push	{r7, lr}
 802a7be:	b084      	sub	sp, #16
 802a7c0:	af00      	add	r7, sp, #0
 802a7c2:	6078      	str	r0, [r7, #4]
 802a7c4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a7c6:	2300      	movs	r3, #0
 802a7c8:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a7ca:	68fb      	ldr	r3, [r7, #12]
 802a7cc:	2b00      	cmp	r3, #0
 802a7ce:	d001      	beq.n	802a7d4 <lfs_mkdir+0x18>
        return err;
 802a7d0:	68fb      	ldr	r3, [r7, #12]
 802a7d2:	e005      	b.n	802a7e0 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802a7d4:	6839      	ldr	r1, [r7, #0]
 802a7d6:	6878      	ldr	r0, [r7, #4]
 802a7d8:	f7fc fe5c 	bl	8027494 <lfs_rawmkdir>
 802a7dc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a7de:	68fb      	ldr	r3, [r7, #12]
}
 802a7e0:	4618      	mov	r0, r3
 802a7e2:	3710      	adds	r7, #16
 802a7e4:	46bd      	mov	sp, r7
 802a7e6:	bd80      	pop	{r7, pc}

0802a7e8 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802a7e8:	b580      	push	{r7, lr}
 802a7ea:	b086      	sub	sp, #24
 802a7ec:	af00      	add	r7, sp, #0
 802a7ee:	60f8      	str	r0, [r7, #12]
 802a7f0:	60b9      	str	r1, [r7, #8]
 802a7f2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a7f4:	2300      	movs	r3, #0
 802a7f6:	617b      	str	r3, [r7, #20]
    if (err) {
 802a7f8:	697b      	ldr	r3, [r7, #20]
 802a7fa:	2b00      	cmp	r3, #0
 802a7fc:	d001      	beq.n	802a802 <lfs_dir_open+0x1a>
        return err;
 802a7fe:	697b      	ldr	r3, [r7, #20]
 802a800:	e019      	b.n	802a836 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802a802:	68fb      	ldr	r3, [r7, #12]
 802a804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a806:	68b9      	ldr	r1, [r7, #8]
 802a808:	4618      	mov	r0, r3
 802a80a:	f7f9 fd21 	bl	8024250 <lfs_mlist_isopen>
 802a80e:	4603      	mov	r3, r0
 802a810:	f083 0301 	eor.w	r3, r3, #1
 802a814:	b2db      	uxtb	r3, r3
 802a816:	2b00      	cmp	r3, #0
 802a818:	d106      	bne.n	802a828 <lfs_dir_open+0x40>
 802a81a:	4b09      	ldr	r3, [pc, #36]	; (802a840 <lfs_dir_open+0x58>)
 802a81c:	4a09      	ldr	r2, [pc, #36]	; (802a844 <lfs_dir_open+0x5c>)
 802a81e:	f241 612d 	movw	r1, #5677	; 0x162d
 802a822:	4809      	ldr	r0, [pc, #36]	; (802a848 <lfs_dir_open+0x60>)
 802a824:	f001 fd9a 	bl	802c35c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802a828:	687a      	ldr	r2, [r7, #4]
 802a82a:	68b9      	ldr	r1, [r7, #8]
 802a82c:	68f8      	ldr	r0, [r7, #12]
 802a82e:	f7fc ff71 	bl	8027714 <lfs_dir_rawopen>
 802a832:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a834:	697b      	ldr	r3, [r7, #20]
}
 802a836:	4618      	mov	r0, r3
 802a838:	3718      	adds	r7, #24
 802a83a:	46bd      	mov	sp, r7
 802a83c:	bd80      	pop	{r7, pc}
 802a83e:	bf00      	nop
 802a840:	08033c48 	.word	0x08033c48
 802a844:	08034744 	.word	0x08034744
 802a848:	08033358 	.word	0x08033358

0802a84c <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802a84c:	b580      	push	{r7, lr}
 802a84e:	b084      	sub	sp, #16
 802a850:	af00      	add	r7, sp, #0
 802a852:	6078      	str	r0, [r7, #4]
 802a854:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a856:	2300      	movs	r3, #0
 802a858:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a85a:	68fb      	ldr	r3, [r7, #12]
 802a85c:	2b00      	cmp	r3, #0
 802a85e:	d001      	beq.n	802a864 <lfs_dir_close+0x18>
        return err;
 802a860:	68fb      	ldr	r3, [r7, #12]
 802a862:	e005      	b.n	802a870 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802a864:	6839      	ldr	r1, [r7, #0]
 802a866:	6878      	ldr	r0, [r7, #4]
 802a868:	f7fc ffce 	bl	8027808 <lfs_dir_rawclose>
 802a86c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a86e:	68fb      	ldr	r3, [r7, #12]
}
 802a870:	4618      	mov	r0, r3
 802a872:	3710      	adds	r7, #16
 802a874:	46bd      	mov	sp, r7
 802a876:	bd80      	pop	{r7, pc}

0802a878 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802a878:	b580      	push	{r7, lr}
 802a87a:	b086      	sub	sp, #24
 802a87c:	af00      	add	r7, sp, #0
 802a87e:	60f8      	str	r0, [r7, #12]
 802a880:	60b9      	str	r1, [r7, #8]
 802a882:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a884:	2300      	movs	r3, #0
 802a886:	617b      	str	r3, [r7, #20]
    if (err) {
 802a888:	697b      	ldr	r3, [r7, #20]
 802a88a:	2b00      	cmp	r3, #0
 802a88c:	d001      	beq.n	802a892 <lfs_dir_read+0x1a>
        return err;
 802a88e:	697b      	ldr	r3, [r7, #20]
 802a890:	e006      	b.n	802a8a0 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802a892:	687a      	ldr	r2, [r7, #4]
 802a894:	68b9      	ldr	r1, [r7, #8]
 802a896:	68f8      	ldr	r0, [r7, #12]
 802a898:	f7fc ffc4 	bl	8027824 <lfs_dir_rawread>
 802a89c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a89e:	697b      	ldr	r3, [r7, #20]
}
 802a8a0:	4618      	mov	r0, r3
 802a8a2:	3718      	adds	r7, #24
 802a8a4:	46bd      	mov	sp, r7
 802a8a6:	bd80      	pop	{r7, pc}

0802a8a8 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802a8a8:	b580      	push	{r7, lr}
 802a8aa:	b088      	sub	sp, #32
 802a8ac:	af00      	add	r7, sp, #0
 802a8ae:	60f8      	str	r0, [r7, #12]
 802a8b0:	60b9      	str	r1, [r7, #8]
 802a8b2:	607a      	str	r2, [r7, #4]
 802a8b4:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802a8b6:	f107 0310 	add.w	r3, r7, #16
 802a8ba:	4618      	mov	r0, r3
 802a8bc:	f7ea fb3c 	bl	8014f38 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802a8c0:	8abb      	ldrh	r3, [r7, #20]
 802a8c2:	461a      	mov	r2, r3
 802a8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8c6:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802a8c8:	8afb      	ldrh	r3, [r7, #22]
 802a8ca:	461a      	mov	r2, r3
 802a8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ce:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802a8d0:	8b3b      	ldrh	r3, [r7, #24]
 802a8d2:	461a      	mov	r2, r3
 802a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8d6:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802a8d8:	8bbb      	ldrh	r3, [r7, #28]
 802a8da:	461a      	mov	r2, r3
 802a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8de:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802a8e0:	887a      	ldrh	r2, [r7, #2]
 802a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8e4:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 802a8e6:	887a      	ldrh	r2, [r7, #2]
 802a8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ea:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 802a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8ee:	68fa      	ldr	r2, [r7, #12]
 802a8f0:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8f4:	68ba      	ldr	r2, [r7, #8]
 802a8f6:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a8fa:	687a      	ldr	r2, [r7, #4]
 802a8fc:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 802a8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a900:	4a11      	ldr	r2, [pc, #68]	; (802a948 <io_fs_init+0xa0>)
 802a902:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802a904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a906:	4a11      	ldr	r2, [pc, #68]	; (802a94c <io_fs_init+0xa4>)
 802a908:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a90c:	4a10      	ldr	r2, [pc, #64]	; (802a950 <io_fs_init+0xa8>)
 802a90e:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a912:	4a10      	ldr	r2, [pc, #64]	; (802a954 <io_fs_init+0xac>)
 802a914:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802a916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a918:	f242 7210 	movw	r2, #10000	; 0x2710
 802a91c:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 802a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a920:	22ff      	movs	r2, #255	; 0xff
 802a922:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 802a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a926:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802a92a:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 802a92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a92e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802a932:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 802a934:	8b3b      	ldrh	r3, [r7, #24]
 802a936:	461a      	mov	r2, r3
 802a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a93a:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 802a93c:	2300      	movs	r3, #0
}
 802a93e:	4618      	mov	r0, r3
 802a940:	3720      	adds	r7, #32
 802a942:	46bd      	mov	sp, r7
 802a944:	bd80      	pop	{r7, pc}
 802a946:	bf00      	nop
 802a948:	0802a959 	.word	0x0802a959
 802a94c:	0802a9f5 	.word	0x0802a9f5
 802a950:	0802a9ad 	.word	0x0802a9ad
 802a954:	0802aa49 	.word	0x0802aa49

0802a958 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802a958:	b580      	push	{r7, lr}
 802a95a:	b084      	sub	sp, #16
 802a95c:	af00      	add	r7, sp, #0
 802a95e:	60f8      	str	r0, [r7, #12]
 802a960:	60b9      	str	r1, [r7, #8]
 802a962:	607a      	str	r2, [r7, #4]
 802a964:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a966:	68fb      	ldr	r3, [r7, #12]
 802a968:	6a1b      	ldr	r3, [r3, #32]
 802a96a:	68ba      	ldr	r2, [r7, #8]
 802a96c:	429a      	cmp	r2, r3
 802a96e:	d305      	bcc.n	802a97c <block_device_read+0x24>
 802a970:	4b0b      	ldr	r3, [pc, #44]	; (802a9a0 <block_device_read+0x48>)
 802a972:	4a0c      	ldr	r2, [pc, #48]	; (802a9a4 <block_device_read+0x4c>)
 802a974:	2148      	movs	r1, #72	; 0x48
 802a976:	480c      	ldr	r0, [pc, #48]	; (802a9a8 <block_device_read+0x50>)
 802a978:	f001 fcf0 	bl	802c35c <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802a97c:	68fb      	ldr	r3, [r7, #12]
 802a97e:	69db      	ldr	r3, [r3, #28]
 802a980:	68ba      	ldr	r2, [r7, #8]
 802a982:	fb03 f202 	mul.w	r2, r3, r2
 802a986:	687b      	ldr	r3, [r7, #4]
 802a988:	4413      	add	r3, r2
 802a98a:	69ba      	ldr	r2, [r7, #24]
 802a98c:	b292      	uxth	r2, r2
 802a98e:	4619      	mov	r1, r3
 802a990:	6838      	ldr	r0, [r7, #0]
 802a992:	f7ea fc79 	bl	8015288 <sFLASH_ReadBuffer>
	return 0;
 802a996:	2300      	movs	r3, #0
}
 802a998:	4618      	mov	r0, r3
 802a99a:	3710      	adds	r7, #16
 802a99c:	46bd      	mov	sp, r7
 802a99e:	bd80      	pop	{r7, pc}
 802a9a0:	08033c80 	.word	0x08033c80
 802a9a4:	08034754 	.word	0x08034754
 802a9a8:	08033c98 	.word	0x08033c98

0802a9ac <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802a9ac:	b580      	push	{r7, lr}
 802a9ae:	b082      	sub	sp, #8
 802a9b0:	af00      	add	r7, sp, #0
 802a9b2:	6078      	str	r0, [r7, #4]
 802a9b4:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802a9b6:	687b      	ldr	r3, [r7, #4]
 802a9b8:	6a1b      	ldr	r3, [r3, #32]
 802a9ba:	683a      	ldr	r2, [r7, #0]
 802a9bc:	429a      	cmp	r2, r3
 802a9be:	d305      	bcc.n	802a9cc <block_device_erase+0x20>
 802a9c0:	4b09      	ldr	r3, [pc, #36]	; (802a9e8 <block_device_erase+0x3c>)
 802a9c2:	4a0a      	ldr	r2, [pc, #40]	; (802a9ec <block_device_erase+0x40>)
 802a9c4:	2150      	movs	r1, #80	; 0x50
 802a9c6:	480a      	ldr	r0, [pc, #40]	; (802a9f0 <block_device_erase+0x44>)
 802a9c8:	f001 fcc8 	bl	802c35c <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802a9cc:	687b      	ldr	r3, [r7, #4]
 802a9ce:	69db      	ldr	r3, [r3, #28]
 802a9d0:	683a      	ldr	r2, [r7, #0]
 802a9d2:	fb02 f303 	mul.w	r3, r2, r3
 802a9d6:	4618      	mov	r0, r3
 802a9d8:	f7ea fb54 	bl	8015084 <sFLASH_EraseSector>
	return 0;
 802a9dc:	2300      	movs	r3, #0
}
 802a9de:	4618      	mov	r0, r3
 802a9e0:	3708      	adds	r7, #8
 802a9e2:	46bd      	mov	sp, r7
 802a9e4:	bd80      	pop	{r7, pc}
 802a9e6:	bf00      	nop
 802a9e8:	08033c80 	.word	0x08033c80
 802a9ec:	08034768 	.word	0x08034768
 802a9f0:	08033c98 	.word	0x08033c98

0802a9f4 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802a9f4:	b580      	push	{r7, lr}
 802a9f6:	b084      	sub	sp, #16
 802a9f8:	af00      	add	r7, sp, #0
 802a9fa:	60f8      	str	r0, [r7, #12]
 802a9fc:	60b9      	str	r1, [r7, #8]
 802a9fe:	607a      	str	r2, [r7, #4]
 802aa00:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802aa02:	68fb      	ldr	r3, [r7, #12]
 802aa04:	6a1b      	ldr	r3, [r3, #32]
 802aa06:	68ba      	ldr	r2, [r7, #8]
 802aa08:	429a      	cmp	r2, r3
 802aa0a:	d305      	bcc.n	802aa18 <block_device_prog+0x24>
 802aa0c:	4b0b      	ldr	r3, [pc, #44]	; (802aa3c <block_device_prog+0x48>)
 802aa0e:	4a0c      	ldr	r2, [pc, #48]	; (802aa40 <block_device_prog+0x4c>)
 802aa10:	2158      	movs	r1, #88	; 0x58
 802aa12:	480c      	ldr	r0, [pc, #48]	; (802aa44 <block_device_prog+0x50>)
 802aa14:	f001 fca2 	bl	802c35c <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802aa18:	68fb      	ldr	r3, [r7, #12]
 802aa1a:	69db      	ldr	r3, [r3, #28]
 802aa1c:	68ba      	ldr	r2, [r7, #8]
 802aa1e:	fb03 f202 	mul.w	r2, r3, r2
 802aa22:	687b      	ldr	r3, [r7, #4]
 802aa24:	4413      	add	r3, r2
 802aa26:	69ba      	ldr	r2, [r7, #24]
 802aa28:	b292      	uxth	r2, r2
 802aa2a:	4619      	mov	r1, r3
 802aa2c:	6838      	ldr	r0, [r7, #0]
 802aa2e:	f7ea fb82 	bl	8015136 <sFLASH_WriteBuffer>
	return 0;
 802aa32:	2300      	movs	r3, #0
}
 802aa34:	4618      	mov	r0, r3
 802aa36:	3710      	adds	r7, #16
 802aa38:	46bd      	mov	sp, r7
 802aa3a:	bd80      	pop	{r7, pc}
 802aa3c:	08033c80 	.word	0x08033c80
 802aa40:	0803477c 	.word	0x0803477c
 802aa44:	08033c98 	.word	0x08033c98

0802aa48 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802aa48:	b480      	push	{r7}
 802aa4a:	b083      	sub	sp, #12
 802aa4c:	af00      	add	r7, sp, #0
 802aa4e:	6078      	str	r0, [r7, #4]
	return 0;
 802aa50:	2300      	movs	r3, #0
}
 802aa52:	4618      	mov	r0, r3
 802aa54:	370c      	adds	r7, #12
 802aa56:	46bd      	mov	sp, r7
 802aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aa5c:	4770      	bx	lr
	...

0802aa60 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802aa60:	b480      	push	{r7}
 802aa62:	b087      	sub	sp, #28
 802aa64:	af00      	add	r7, sp, #0
 802aa66:	60f8      	str	r0, [r7, #12]
 802aa68:	60b9      	str	r1, [r7, #8]
 802aa6a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802aa6c:	68bb      	ldr	r3, [r7, #8]
 802aa6e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802aa70:	2300      	movs	r3, #0
 802aa72:	617b      	str	r3, [r7, #20]
 802aa74:	e024      	b.n	802aac0 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802aa76:	68fb      	ldr	r3, [r7, #12]
 802aa78:	091a      	lsrs	r2, r3, #4
 802aa7a:	6939      	ldr	r1, [r7, #16]
 802aa7c:	697b      	ldr	r3, [r7, #20]
 802aa7e:	440b      	add	r3, r1
 802aa80:	781b      	ldrb	r3, [r3, #0]
 802aa82:	4619      	mov	r1, r3
 802aa84:	68fb      	ldr	r3, [r7, #12]
 802aa86:	404b      	eors	r3, r1
 802aa88:	f003 030f 	and.w	r3, r3, #15
 802aa8c:	4912      	ldr	r1, [pc, #72]	; (802aad8 <lfs_crc+0x78>)
 802aa8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802aa92:	4053      	eors	r3, r2
 802aa94:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802aa96:	68fb      	ldr	r3, [r7, #12]
 802aa98:	091a      	lsrs	r2, r3, #4
 802aa9a:	6939      	ldr	r1, [r7, #16]
 802aa9c:	697b      	ldr	r3, [r7, #20]
 802aa9e:	440b      	add	r3, r1
 802aaa0:	781b      	ldrb	r3, [r3, #0]
 802aaa2:	091b      	lsrs	r3, r3, #4
 802aaa4:	b2db      	uxtb	r3, r3
 802aaa6:	4619      	mov	r1, r3
 802aaa8:	68fb      	ldr	r3, [r7, #12]
 802aaaa:	404b      	eors	r3, r1
 802aaac:	f003 030f 	and.w	r3, r3, #15
 802aab0:	4909      	ldr	r1, [pc, #36]	; (802aad8 <lfs_crc+0x78>)
 802aab2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802aab6:	4053      	eors	r3, r2
 802aab8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802aaba:	697b      	ldr	r3, [r7, #20]
 802aabc:	3301      	adds	r3, #1
 802aabe:	617b      	str	r3, [r7, #20]
 802aac0:	697a      	ldr	r2, [r7, #20]
 802aac2:	687b      	ldr	r3, [r7, #4]
 802aac4:	429a      	cmp	r2, r3
 802aac6:	d3d6      	bcc.n	802aa76 <lfs_crc+0x16>
    }

    return crc;
 802aac8:	68fb      	ldr	r3, [r7, #12]
}
 802aaca:	4618      	mov	r0, r3
 802aacc:	371c      	adds	r7, #28
 802aace:	46bd      	mov	sp, r7
 802aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aad4:	4770      	bx	lr
 802aad6:	bf00      	nop
 802aad8:	08034790 	.word	0x08034790

0802aadc <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802aadc:	b480      	push	{r7}
 802aade:	b083      	sub	sp, #12
 802aae0:	af00      	add	r7, sp, #0
 802aae2:	6078      	str	r0, [r7, #4]
 802aae4:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802aae6:	687b      	ldr	r3, [r7, #4]
 802aae8:	2b00      	cmp	r3, #0
 802aaea:	d002      	beq.n	802aaf2 <spi_fs_init_mutex+0x16>
 802aaec:	4a07      	ldr	r2, [pc, #28]	; (802ab0c <spi_fs_init_mutex+0x30>)
 802aaee:	687b      	ldr	r3, [r7, #4]
 802aaf0:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802aaf2:	683b      	ldr	r3, [r7, #0]
 802aaf4:	2b00      	cmp	r3, #0
 802aaf6:	d002      	beq.n	802aafe <spi_fs_init_mutex+0x22>
 802aaf8:	4a05      	ldr	r2, [pc, #20]	; (802ab10 <spi_fs_init_mutex+0x34>)
 802aafa:	683b      	ldr	r3, [r7, #0]
 802aafc:	6013      	str	r3, [r2, #0]

};
 802aafe:	bf00      	nop
 802ab00:	370c      	adds	r7, #12
 802ab02:	46bd      	mov	sp, r7
 802ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ab08:	4770      	bx	lr
 802ab0a:	bf00      	nop
 802ab0c:	2000d9a0 	.word	0x2000d9a0
 802ab10:	2000d9a4 	.word	0x2000d9a4

0802ab14 <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802ab14:	b590      	push	{r4, r7, lr}
 802ab16:	b08b      	sub	sp, #44	; 0x2c
 802ab18:	af02      	add	r7, sp, #8
 802ab1a:	61f8      	str	r0, [r7, #28]
 802ab1c:	61b9      	str	r1, [r7, #24]
 802ab1e:	617a      	str	r2, [r7, #20]
 802ab20:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802ab22:	4c14      	ldr	r4, [pc, #80]	; (802ab74 <spi_fs_init+0x60>)
 802ab24:	463b      	mov	r3, r7
 802ab26:	4618      	mov	r0, r3
 802ab28:	f7ea fa06 	bl	8014f38 <sFLASH_GetInfo>
 802ab2c:	463b      	mov	r3, r7
 802ab2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ab30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802ab34:	4b0f      	ldr	r3, [pc, #60]	; (802ab74 <spi_fs_init+0x60>)
 802ab36:	681b      	ldr	r3, [r3, #0]
 802ab38:	2b00      	cmp	r3, #0
 802ab3a:	d102      	bne.n	802ab42 <spi_fs_init+0x2e>
 802ab3c:	f04f 33ff 	mov.w	r3, #4294967295
 802ab40:	e013      	b.n	802ab6a <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802ab42:	8a7b      	ldrh	r3, [r7, #18]
 802ab44:	4a0c      	ldr	r2, [pc, #48]	; (802ab78 <spi_fs_init+0x64>)
 802ab46:	9200      	str	r2, [sp, #0]
 802ab48:	697a      	ldr	r2, [r7, #20]
 802ab4a:	69b9      	ldr	r1, [r7, #24]
 802ab4c:	69f8      	ldr	r0, [r7, #28]
 802ab4e:	f7ff feab 	bl	802a8a8 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802ab52:	220c      	movs	r2, #12
 802ab54:	2100      	movs	r1, #0
 802ab56:	4809      	ldr	r0, [pc, #36]	; (802ab7c <spi_fs_init+0x68>)
 802ab58:	f002 fdd0 	bl	802d6fc <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802ab5c:	4b07      	ldr	r3, [pc, #28]	; (802ab7c <spi_fs_init+0x68>)
 802ab5e:	4a08      	ldr	r2, [pc, #32]	; (802ab80 <spi_fs_init+0x6c>)
 802ab60:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802ab62:	4b06      	ldr	r3, [pc, #24]	; (802ab7c <spi_fs_init+0x68>)
 802ab64:	2200      	movs	r2, #0
 802ab66:	609a      	str	r2, [r3, #8]

	return 0;
 802ab68:	2300      	movs	r3, #0
}
 802ab6a:	4618      	mov	r0, r3
 802ab6c:	3724      	adds	r7, #36	; 0x24
 802ab6e:	46bd      	mov	sp, r7
 802ab70:	bd90      	pop	{r4, r7, pc}
 802ab72:	bf00      	nop
 802ab74:	2000d904 	.word	0x2000d904
 802ab78:	2000d8b8 	.word	0x2000d8b8
 802ab7c:	2000d914 	.word	0x2000d914
 802ab80:	2000d4ac 	.word	0x2000d4ac

0802ab84 <spi_fs_mount>:

int spi_fs_mount(void){
 802ab84:	b580      	push	{r7, lr}
 802ab86:	b082      	sub	sp, #8
 802ab88:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ab8a:	4b0d      	ldr	r3, [pc, #52]	; (802abc0 <spi_fs_mount+0x3c>)
 802ab8c:	681b      	ldr	r3, [r3, #0]
 802ab8e:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802ab90:	490c      	ldr	r1, [pc, #48]	; (802abc4 <spi_fs_mount+0x40>)
 802ab92:	480d      	ldr	r0, [pc, #52]	; (802abc8 <spi_fs_mount+0x44>)
 802ab94:	f7ff fcc4 	bl	802a520 <lfs_mount>
 802ab98:	6078      	str	r0, [r7, #4]
	if (err) {
 802ab9a:	687b      	ldr	r3, [r7, #4]
 802ab9c:	2b00      	cmp	r3, #0
 802ab9e:	d003      	beq.n	802aba8 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802aba0:	4b0a      	ldr	r3, [pc, #40]	; (802abcc <spi_fs_mount+0x48>)
 802aba2:	2200      	movs	r2, #0
 802aba4:	701a      	strb	r2, [r3, #0]
 802aba6:	e002      	b.n	802abae <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802aba8:	4b08      	ldr	r3, [pc, #32]	; (802abcc <spi_fs_mount+0x48>)
 802abaa:	2201      	movs	r2, #1
 802abac:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802abae:	4b08      	ldr	r3, [pc, #32]	; (802abd0 <spi_fs_mount+0x4c>)
 802abb0:	681b      	ldr	r3, [r3, #0]
 802abb2:	4798      	blx	r3
#endif

	return err;
 802abb4:	687b      	ldr	r3, [r7, #4]
}
 802abb6:	4618      	mov	r0, r3
 802abb8:	3708      	adds	r7, #8
 802abba:	46bd      	mov	sp, r7
 802abbc:	bd80      	pop	{r7, pc}
 802abbe:	bf00      	nop
 802abc0:	2000d9a0 	.word	0x2000d9a0
 802abc4:	2000d8b8 	.word	0x2000d8b8
 802abc8:	2000d6b0 	.word	0x2000d6b0
 802abcc:	2000d6ac 	.word	0x2000d6ac
 802abd0:	2000d9a4 	.word	0x2000d9a4

0802abd4 <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802abd4:	b580      	push	{r7, lr}
 802abd6:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802abd8:	4902      	ldr	r1, [pc, #8]	; (802abe4 <spi_fs_format+0x10>)
 802abda:	4803      	ldr	r0, [pc, #12]	; (802abe8 <spi_fs_format+0x14>)
 802abdc:	f7ff fc8a 	bl	802a4f4 <lfs_format>
}
 802abe0:	bf00      	nop
 802abe2:	bd80      	pop	{r7, pc}
 802abe4:	2000d8b8 	.word	0x2000d8b8
 802abe8:	2000d6b0 	.word	0x2000d6b0

0802abec <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802abec:	b580      	push	{r7, lr}
 802abee:	b088      	sub	sp, #32
 802abf0:	af02      	add	r7, sp, #8
 802abf2:	60f8      	str	r0, [r7, #12]
 802abf4:	60b9      	str	r1, [r7, #8]
 802abf6:	607a      	str	r2, [r7, #4]
 802abf8:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802abfa:	4b19      	ldr	r3, [pc, #100]	; (802ac60 <spi_fs_read_file_offset+0x74>)
 802abfc:	681b      	ldr	r3, [r3, #0]
 802abfe:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802ac00:	4b18      	ldr	r3, [pc, #96]	; (802ac64 <spi_fs_read_file_offset+0x78>)
 802ac02:	9300      	str	r3, [sp, #0]
 802ac04:	f240 1301 	movw	r3, #257	; 0x101
 802ac08:	68fa      	ldr	r2, [r7, #12]
 802ac0a:	4917      	ldr	r1, [pc, #92]	; (802ac68 <spi_fs_read_file_offset+0x7c>)
 802ac0c:	4817      	ldr	r0, [pc, #92]	; (802ac6c <spi_fs_read_file_offset+0x80>)
 802ac0e:	f7ff fce3 	bl	802a5d8 <lfs_file_opencfg>
 802ac12:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ac14:	697b      	ldr	r3, [r7, #20]
 802ac16:	2b00      	cmp	r3, #0
 802ac18:	db13      	blt.n	802ac42 <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802ac1a:	687a      	ldr	r2, [r7, #4]
 802ac1c:	2300      	movs	r3, #0
 802ac1e:	4912      	ldr	r1, [pc, #72]	; (802ac68 <spi_fs_read_file_offset+0x7c>)
 802ac20:	4812      	ldr	r0, [pc, #72]	; (802ac6c <spi_fs_read_file_offset+0x80>)
 802ac22:	f7ff fd9b 	bl	802a75c <lfs_file_seek>
 802ac26:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ac28:	697b      	ldr	r3, [r7, #20]
 802ac2a:	2b00      	cmp	r3, #0
 802ac2c:	db0b      	blt.n	802ac46 <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802ac2e:	683b      	ldr	r3, [r7, #0]
 802ac30:	68ba      	ldr	r2, [r7, #8]
 802ac32:	490d      	ldr	r1, [pc, #52]	; (802ac68 <spi_fs_read_file_offset+0x7c>)
 802ac34:	480d      	ldr	r0, [pc, #52]	; (802ac6c <spi_fs_read_file_offset+0x80>)
 802ac36:	f7ff fd31 	bl	802a69c <lfs_file_read>
 802ac3a:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ac3c:	697b      	ldr	r3, [r7, #20]
 802ac3e:	2b00      	cmp	r3, #0

	func_end:
 802ac40:	e002      	b.n	802ac48 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ac42:	bf00      	nop
 802ac44:	e000      	b.n	802ac48 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802ac46:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802ac48:	4907      	ldr	r1, [pc, #28]	; (802ac68 <spi_fs_read_file_offset+0x7c>)
 802ac4a:	4808      	ldr	r0, [pc, #32]	; (802ac6c <spi_fs_read_file_offset+0x80>)
 802ac4c:	f7ff fcfa 	bl	802a644 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ac50:	4b07      	ldr	r3, [pc, #28]	; (802ac70 <spi_fs_read_file_offset+0x84>)
 802ac52:	681b      	ldr	r3, [r3, #0]
 802ac54:	4798      	blx	r3
#endif
	return err;
 802ac56:	697b      	ldr	r3, [r7, #20]

}
 802ac58:	4618      	mov	r0, r3
 802ac5a:	3718      	adds	r7, #24
 802ac5c:	46bd      	mov	sp, r7
 802ac5e:	bd80      	pop	{r7, pc}
 802ac60:	2000d9a0 	.word	0x2000d9a0
 802ac64:	2000d914 	.word	0x2000d914
 802ac68:	2000d728 	.word	0x2000d728
 802ac6c:	2000d6b0 	.word	0x2000d6b0
 802ac70:	2000d9a4 	.word	0x2000d9a4

0802ac74 <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802ac74:	b580      	push	{r7, lr}
 802ac76:	b088      	sub	sp, #32
 802ac78:	af02      	add	r7, sp, #8
 802ac7a:	60f8      	str	r0, [r7, #12]
 802ac7c:	60b9      	str	r1, [r7, #8]
 802ac7e:	607a      	str	r2, [r7, #4]
	int err = 0;
 802ac80:	2300      	movs	r3, #0
 802ac82:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ac84:	4b12      	ldr	r3, [pc, #72]	; (802acd0 <spi_fs_over_write_file+0x5c>)
 802ac86:	681b      	ldr	r3, [r3, #0]
 802ac88:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802ac8a:	4b12      	ldr	r3, [pc, #72]	; (802acd4 <spi_fs_over_write_file+0x60>)
 802ac8c:	9300      	str	r3, [sp, #0]
 802ac8e:	f240 5303 	movw	r3, #1283	; 0x503
 802ac92:	68fa      	ldr	r2, [r7, #12]
 802ac94:	4910      	ldr	r1, [pc, #64]	; (802acd8 <spi_fs_over_write_file+0x64>)
 802ac96:	4811      	ldr	r0, [pc, #68]	; (802acdc <spi_fs_over_write_file+0x68>)
 802ac98:	f7ff fc9e 	bl	802a5d8 <lfs_file_opencfg>
 802ac9c:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ac9e:	697b      	ldr	r3, [r7, #20]
 802aca0:	2b00      	cmp	r3, #0
 802aca2:	db0b      	blt.n	802acbc <spi_fs_over_write_file+0x48>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802aca4:	687b      	ldr	r3, [r7, #4]
 802aca6:	68ba      	ldr	r2, [r7, #8]
 802aca8:	490b      	ldr	r1, [pc, #44]	; (802acd8 <spi_fs_over_write_file+0x64>)
 802acaa:	480c      	ldr	r0, [pc, #48]	; (802acdc <spi_fs_over_write_file+0x68>)
 802acac:	f7ff fd26 	bl	802a6fc <lfs_file_write>
 802acb0:	6178      	str	r0, [r7, #20]

	lfs_file_close(&lfs, &file);
 802acb2:	4909      	ldr	r1, [pc, #36]	; (802acd8 <spi_fs_over_write_file+0x64>)
 802acb4:	4809      	ldr	r0, [pc, #36]	; (802acdc <spi_fs_over_write_file+0x68>)
 802acb6:	f7ff fcc5 	bl	802a644 <lfs_file_close>
 802acba:	e000      	b.n	802acbe <spi_fs_over_write_file+0x4a>
	if (err < 0) goto func_end;
 802acbc:	bf00      	nop
	func_end:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802acbe:	4b08      	ldr	r3, [pc, #32]	; (802ace0 <spi_fs_over_write_file+0x6c>)
 802acc0:	681b      	ldr	r3, [r3, #0]
 802acc2:	4798      	blx	r3
#endif
	return err;
 802acc4:	697b      	ldr	r3, [r7, #20]
}
 802acc6:	4618      	mov	r0, r3
 802acc8:	3718      	adds	r7, #24
 802acca:	46bd      	mov	sp, r7
 802accc:	bd80      	pop	{r7, pc}
 802acce:	bf00      	nop
 802acd0:	2000d9a0 	.word	0x2000d9a0
 802acd4:	2000d914 	.word	0x2000d914
 802acd8:	2000d728 	.word	0x2000d728
 802acdc:	2000d6b0 	.word	0x2000d6b0
 802ace0:	2000d9a4 	.word	0x2000d9a4

0802ace4 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802ace4:	b580      	push	{r7, lr}
 802ace6:	b084      	sub	sp, #16
 802ace8:	af00      	add	r7, sp, #0
 802acea:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802acec:	4b0b      	ldr	r3, [pc, #44]	; (802ad1c <spi_fs_file_size+0x38>)
 802acee:	681b      	ldr	r3, [r3, #0]
 802acf0:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802acf2:	4a0b      	ldr	r2, [pc, #44]	; (802ad20 <spi_fs_file_size+0x3c>)
 802acf4:	6879      	ldr	r1, [r7, #4]
 802acf6:	480b      	ldr	r0, [pc, #44]	; (802ad24 <spi_fs_file_size+0x40>)
 802acf8:	f7ff fc56 	bl	802a5a8 <lfs_stat>
 802acfc:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802acfe:	68fb      	ldr	r3, [r7, #12]
 802ad00:	2b00      	cmp	r3, #0
 802ad02:	d102      	bne.n	802ad0a <spi_fs_file_size+0x26>
		err = file_info.size;
 802ad04:	4b06      	ldr	r3, [pc, #24]	; (802ad20 <spi_fs_file_size+0x3c>)
 802ad06:	685b      	ldr	r3, [r3, #4]
 802ad08:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ad0a:	4b07      	ldr	r3, [pc, #28]	; (802ad28 <spi_fs_file_size+0x44>)
 802ad0c:	681b      	ldr	r3, [r3, #0]
 802ad0e:	4798      	blx	r3
#endif
	return err;
 802ad10:	68fb      	ldr	r3, [r7, #12]
}
 802ad12:	4618      	mov	r0, r3
 802ad14:	3710      	adds	r7, #16
 802ad16:	46bd      	mov	sp, r7
 802ad18:	bd80      	pop	{r7, pc}
 802ad1a:	bf00      	nop
 802ad1c:	2000d9a0 	.word	0x2000d9a0
 802ad20:	2000d7b0 	.word	0x2000d7b0
 802ad24:	2000d6b0 	.word	0x2000d6b0
 802ad28:	2000d9a4 	.word	0x2000d9a4

0802ad2c <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802ad2c:	b580      	push	{r7, lr}
 802ad2e:	b088      	sub	sp, #32
 802ad30:	af02      	add	r7, sp, #8
 802ad32:	60f8      	str	r0, [r7, #12]
 802ad34:	60b9      	str	r1, [r7, #8]
 802ad36:	607a      	str	r2, [r7, #4]
	int err = 0;
 802ad38:	2300      	movs	r3, #0
 802ad3a:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ad3c:	4b13      	ldr	r3, [pc, #76]	; (802ad8c <spi_fs_write_file_to_end+0x60>)
 802ad3e:	681b      	ldr	r3, [r3, #0]
 802ad40:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802ad42:	4b13      	ldr	r3, [pc, #76]	; (802ad90 <spi_fs_write_file_to_end+0x64>)
 802ad44:	9300      	str	r3, [sp, #0]
 802ad46:	f640 1303 	movw	r3, #2307	; 0x903
 802ad4a:	68fa      	ldr	r2, [r7, #12]
 802ad4c:	4911      	ldr	r1, [pc, #68]	; (802ad94 <spi_fs_write_file_to_end+0x68>)
 802ad4e:	4812      	ldr	r0, [pc, #72]	; (802ad98 <spi_fs_write_file_to_end+0x6c>)
 802ad50:	f7ff fc42 	bl	802a5d8 <lfs_file_opencfg>
 802ad54:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ad56:	697b      	ldr	r3, [r7, #20]
 802ad58:	2b00      	cmp	r3, #0
 802ad5a:	db09      	blt.n	802ad70 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802ad5c:	687b      	ldr	r3, [r7, #4]
 802ad5e:	68ba      	ldr	r2, [r7, #8]
 802ad60:	490c      	ldr	r1, [pc, #48]	; (802ad94 <spi_fs_write_file_to_end+0x68>)
 802ad62:	480d      	ldr	r0, [pc, #52]	; (802ad98 <spi_fs_write_file_to_end+0x6c>)
 802ad64:	f7ff fcca 	bl	802a6fc <lfs_file_write>
 802ad68:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802ad6a:	697b      	ldr	r3, [r7, #20]
 802ad6c:	2b00      	cmp	r3, #0

	func_end:
 802ad6e:	e000      	b.n	802ad72 <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802ad70:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802ad72:	4908      	ldr	r1, [pc, #32]	; (802ad94 <spi_fs_write_file_to_end+0x68>)
 802ad74:	4808      	ldr	r0, [pc, #32]	; (802ad98 <spi_fs_write_file_to_end+0x6c>)
 802ad76:	f7ff fc65 	bl	802a644 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ad7a:	4b08      	ldr	r3, [pc, #32]	; (802ad9c <spi_fs_write_file_to_end+0x70>)
 802ad7c:	681b      	ldr	r3, [r3, #0]
 802ad7e:	4798      	blx	r3
#endif
	return err;
 802ad80:	697b      	ldr	r3, [r7, #20]
}
 802ad82:	4618      	mov	r0, r3
 802ad84:	3718      	adds	r7, #24
 802ad86:	46bd      	mov	sp, r7
 802ad88:	bd80      	pop	{r7, pc}
 802ad8a:	bf00      	nop
 802ad8c:	2000d9a0 	.word	0x2000d9a0
 802ad90:	2000d914 	.word	0x2000d914
 802ad94:	2000d728 	.word	0x2000d728
 802ad98:	2000d6b0 	.word	0x2000d6b0
 802ad9c:	2000d9a4 	.word	0x2000d9a4

0802ada0 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802ada0:	b580      	push	{r7, lr}
 802ada2:	b084      	sub	sp, #16
 802ada4:	af00      	add	r7, sp, #0
 802ada6:	6078      	str	r0, [r7, #4]
 802ada8:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802adaa:	2280      	movs	r2, #128	; 0x80
 802adac:	2100      	movs	r1, #0
 802adae:	480a      	ldr	r0, [pc, #40]	; (802add8 <spi_fs_serch_file_in_dir+0x38>)
 802adb0:	f002 fca4 	bl	802d6fc <memset>
	strcpy((char *)temp_buf, dir_path);
 802adb4:	6879      	ldr	r1, [r7, #4]
 802adb6:	4808      	ldr	r0, [pc, #32]	; (802add8 <spi_fs_serch_file_in_dir+0x38>)
 802adb8:	f002 fe6d 	bl	802da96 <strcpy>
	strcat((char *)temp_buf, filename);
 802adbc:	6839      	ldr	r1, [r7, #0]
 802adbe:	4806      	ldr	r0, [pc, #24]	; (802add8 <spi_fs_serch_file_in_dir+0x38>)
 802adc0:	f002 fca4 	bl	802d70c <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802adc4:	4804      	ldr	r0, [pc, #16]	; (802add8 <spi_fs_serch_file_in_dir+0x38>)
 802adc6:	f7ff ff8d 	bl	802ace4 <spi_fs_file_size>
 802adca:	60f8      	str	r0, [r7, #12]
	return err;
 802adcc:	68fb      	ldr	r3, [r7, #12]

}
 802adce:	4618      	mov	r0, r3
 802add0:	3710      	adds	r7, #16
 802add2:	46bd      	mov	sp, r7
 802add4:	bd80      	pop	{r7, pc}
 802add6:	bf00      	nop
 802add8:	2000d920 	.word	0x2000d920

0802addc <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802addc:	b580      	push	{r7, lr}
 802adde:	b084      	sub	sp, #16
 802ade0:	af00      	add	r7, sp, #0
 802ade2:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ade4:	4b07      	ldr	r3, [pc, #28]	; (802ae04 <spi_fs_mkdir+0x28>)
 802ade6:	681b      	ldr	r3, [r3, #0]
 802ade8:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802adea:	6879      	ldr	r1, [r7, #4]
 802adec:	4806      	ldr	r0, [pc, #24]	; (802ae08 <spi_fs_mkdir+0x2c>)
 802adee:	f7ff fce5 	bl	802a7bc <lfs_mkdir>
 802adf2:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802adf4:	4b05      	ldr	r3, [pc, #20]	; (802ae0c <spi_fs_mkdir+0x30>)
 802adf6:	681b      	ldr	r3, [r3, #0]
 802adf8:	4798      	blx	r3
#endif

	return err;
 802adfa:	68fb      	ldr	r3, [r7, #12]
}
 802adfc:	4618      	mov	r0, r3
 802adfe:	3710      	adds	r7, #16
 802ae00:	46bd      	mov	sp, r7
 802ae02:	bd80      	pop	{r7, pc}
 802ae04:	2000d9a0 	.word	0x2000d9a0
 802ae08:	2000d6b0 	.word	0x2000d6b0
 802ae0c:	2000d9a4 	.word	0x2000d9a4

0802ae10 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802ae10:	b580      	push	{r7, lr}
 802ae12:	b084      	sub	sp, #16
 802ae14:	af00      	add	r7, sp, #0
 802ae16:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802ae18:	4b07      	ldr	r3, [pc, #28]	; (802ae38 <spi_fs_remove+0x28>)
 802ae1a:	681b      	ldr	r3, [r3, #0]
 802ae1c:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802ae1e:	6879      	ldr	r1, [r7, #4]
 802ae20:	4806      	ldr	r0, [pc, #24]	; (802ae3c <spi_fs_remove+0x2c>)
 802ae22:	f7ff fb93 	bl	802a54c <lfs_remove>
 802ae26:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802ae28:	4b05      	ldr	r3, [pc, #20]	; (802ae40 <spi_fs_remove+0x30>)
 802ae2a:	681b      	ldr	r3, [r3, #0]
 802ae2c:	4798      	blx	r3
#endif
	return err;
 802ae2e:	68fb      	ldr	r3, [r7, #12]
}
 802ae30:	4618      	mov	r0, r3
 802ae32:	3710      	adds	r7, #16
 802ae34:	46bd      	mov	sp, r7
 802ae36:	bd80      	pop	{r7, pc}
 802ae38:	2000d9a0 	.word	0x2000d9a0
 802ae3c:	2000d6b0 	.word	0x2000d6b0
 802ae40:	2000d9a4 	.word	0x2000d9a4

0802ae44 <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path, uint8_t deep) {
 802ae44:	b580      	push	{r7, lr}
 802ae46:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802ae4a:	af02      	add	r7, sp, #8
 802ae4c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae50:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ae54:	6018      	str	r0, [r3, #0]
 802ae56:	460a      	mov	r2, r1
 802ae58:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae5c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802ae60:	701a      	strb	r2, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802ae62:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae66:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802ae6a:	681a      	ldr	r2, [r3, #0]
 802ae6c:	4945      	ldr	r1, [pc, #276]	; (802af84 <remove_recursively_files_and_directories+0x140>)
 802ae6e:	4846      	ldr	r0, [pc, #280]	; (802af88 <remove_recursively_files_and_directories+0x144>)
 802ae70:	f7ff fcba 	bl	802a7e8 <lfs_dir_open>
 802ae74:	4603      	mov	r3, r0
 802ae76:	2b00      	cmp	r3, #0
 802ae78:	d17f      	bne.n	802af7a <remove_recursively_files_and_directories+0x136>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802ae7a:	e061      	b.n	802af40 <remove_recursively_files_and_directories+0xfc>
            if (info.type == LFS_TYPE_DIR) {
 802ae7c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802ae80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802ae84:	781b      	ldrb	r3, [r3, #0]
 802ae86:	2b02      	cmp	r3, #2
 802ae88:	d13d      	bne.n	802af06 <remove_recursively_files_and_directories+0xc2>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802ae8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802ae8e:	3308      	adds	r3, #8
 802ae90:	493e      	ldr	r1, [pc, #248]	; (802af8c <remove_recursively_files_and_directories+0x148>)
 802ae92:	4618      	mov	r0, r3
 802ae94:	f7e5 f9a4 	bl	80101e0 <strcmp>
 802ae98:	4603      	mov	r3, r0
 802ae9a:	2b00      	cmp	r3, #0
 802ae9c:	d050      	beq.n	802af40 <remove_recursively_files_and_directories+0xfc>
 802ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802aea2:	3308      	adds	r3, #8
 802aea4:	493a      	ldr	r1, [pc, #232]	; (802af90 <remove_recursively_files_and_directories+0x14c>)
 802aea6:	4618      	mov	r0, r3
 802aea8:	f7e5 f99a 	bl	80101e0 <strcmp>
 802aeac:	4603      	mov	r3, r0
 802aeae:	2b00      	cmp	r3, #0
 802aeb0:	d100      	bne.n	802aeb4 <remove_recursively_files_and_directories+0x70>
 802aeb2:	e045      	b.n	802af40 <remove_recursively_files_and_directories+0xfc>
                printf("Directory: %s\n", info.name);
 802aeb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802aeb8:	3308      	adds	r3, #8
 802aeba:	4619      	mov	r1, r3
 802aebc:	4835      	ldr	r0, [pc, #212]	; (802af94 <remove_recursively_files_and_directories+0x150>)
 802aebe:	f002 fa87 	bl	802d3d0 <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802aec2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802aec6:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802aeca:	f107 0008 	add.w	r0, r7, #8
 802aece:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802aed2:	3208      	adds	r2, #8
 802aed4:	9200      	str	r2, [sp, #0]
 802aed6:	681b      	ldr	r3, [r3, #0]
 802aed8:	4a2f      	ldr	r2, [pc, #188]	; (802af98 <remove_recursively_files_and_directories+0x154>)
 802aeda:	f44f 7180 	mov.w	r1, #256	; 0x100
 802aede:	f002 fa89 	bl	802d3f4 <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802aee2:	4928      	ldr	r1, [pc, #160]	; (802af84 <remove_recursively_files_and_directories+0x140>)
 802aee4:	4828      	ldr	r0, [pc, #160]	; (802af88 <remove_recursively_files_and_directories+0x144>)
 802aee6:	f7ff fcb1 	bl	802a84c <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path, deep + 1);  // Recursive call for subdirectories
 802aeea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802aeee:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802aef2:	781b      	ldrb	r3, [r3, #0]
 802aef4:	3301      	adds	r3, #1
 802aef6:	b2da      	uxtb	r2, r3
 802aef8:	f107 0308 	add.w	r3, r7, #8
 802aefc:	4611      	mov	r1, r2
 802aefe:	4618      	mov	r0, r3
 802af00:	f7ff ffa0 	bl	802ae44 <remove_recursively_files_and_directories>
 802af04:	e01c      	b.n	802af40 <remove_recursively_files_and_directories+0xfc>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802af06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802af0a:	3308      	adds	r3, #8
 802af0c:	4619      	mov	r1, r3
 802af0e:	4823      	ldr	r0, [pc, #140]	; (802af9c <remove_recursively_files_and_directories+0x158>)
 802af10:	f002 fa5e 	bl	802d3d0 <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802af14:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af18:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802af1c:	f107 0008 	add.w	r0, r7, #8
 802af20:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802af24:	3208      	adds	r2, #8
 802af26:	9200      	str	r2, [sp, #0]
 802af28:	681b      	ldr	r3, [r3, #0]
 802af2a:	4a1b      	ldr	r2, [pc, #108]	; (802af98 <remove_recursively_files_and_directories+0x154>)
 802af2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 802af30:	f002 fa60 	bl	802d3f4 <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802af34:	f107 0308 	add.w	r3, r7, #8
 802af38:	4619      	mov	r1, r3
 802af3a:	4813      	ldr	r0, [pc, #76]	; (802af88 <remove_recursively_files_and_directories+0x144>)
 802af3c:	f7ff fb06 	bl	802a54c <lfs_remove>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802af40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802af44:	461a      	mov	r2, r3
 802af46:	490f      	ldr	r1, [pc, #60]	; (802af84 <remove_recursively_files_and_directories+0x140>)
 802af48:	480f      	ldr	r0, [pc, #60]	; (802af88 <remove_recursively_files_and_directories+0x144>)
 802af4a:	f7ff fc95 	bl	802a878 <lfs_dir_read>
 802af4e:	4603      	mov	r3, r0
 802af50:	2b00      	cmp	r3, #0
 802af52:	dc93      	bgt.n	802ae7c <remove_recursively_files_and_directories+0x38>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802af54:	490b      	ldr	r1, [pc, #44]	; (802af84 <remove_recursively_files_and_directories+0x140>)
 802af56:	480c      	ldr	r0, [pc, #48]	; (802af88 <remove_recursively_files_and_directories+0x144>)
 802af58:	f7ff fc78 	bl	802a84c <lfs_dir_close>
        if (deep >= 1){
 802af5c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af60:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802af64:	781b      	ldrb	r3, [r3, #0]
 802af66:	2b00      	cmp	r3, #0
 802af68:	d007      	beq.n	802af7a <remove_recursively_files_and_directories+0x136>
        	lfs_remove(&lfs, path);
 802af6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802af6e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802af72:	6819      	ldr	r1, [r3, #0]
 802af74:	4804      	ldr	r0, [pc, #16]	; (802af88 <remove_recursively_files_and_directories+0x144>)
 802af76:	f7ff fae9 	bl	802a54c <lfs_remove>
        }

    }
}
 802af7a:	bf00      	nop
 802af7c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802af80:	46bd      	mov	sp, r7
 802af82:	bd80      	pop	{r7, pc}
 802af84:	2000d77c 	.word	0x2000d77c
 802af88:	2000d6b0 	.word	0x2000d6b0
 802af8c:	08033cd0 	.word	0x08033cd0
 802af90:	08033cd4 	.word	0x08033cd4
 802af94:	08033cd8 	.word	0x08033cd8
 802af98:	08033ce8 	.word	0x08033ce8
 802af9c:	08033cf0 	.word	0x08033cf0

0802afa0 <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802afa0:	b580      	push	{r7, lr}
 802afa2:	b084      	sub	sp, #16
 802afa4:	af00      	add	r7, sp, #0
 802afa6:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802afa8:	4b0b      	ldr	r3, [pc, #44]	; (802afd8 <spi_fs_remove_recurcuve_in+0x38>)
 802afaa:	681b      	ldr	r3, [r3, #0]
 802afac:	4798      	blx	r3
#endif
	uint8_t deep = 0;
 802afae:	2300      	movs	r3, #0
 802afb0:	73fb      	strb	r3, [r7, #15]

	remove_recursively_files_and_directories(path, deep);
 802afb2:	7bfb      	ldrb	r3, [r7, #15]
 802afb4:	4619      	mov	r1, r3
 802afb6:	6878      	ldr	r0, [r7, #4]
 802afb8:	f7ff ff44 	bl	802ae44 <remove_recursively_files_and_directories>
	deep = 0;
 802afbc:	2300      	movs	r3, #0
 802afbe:	73fb      	strb	r3, [r7, #15]
	remove_recursively_files_and_directories(path, deep);
 802afc0:	7bfb      	ldrb	r3, [r7, #15]
 802afc2:	4619      	mov	r1, r3
 802afc4:	6878      	ldr	r0, [r7, #4]
 802afc6:	f7ff ff3d 	bl	802ae44 <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802afca:	4b04      	ldr	r3, [pc, #16]	; (802afdc <spi_fs_remove_recurcuve_in+0x3c>)
 802afcc:	681b      	ldr	r3, [r3, #0]
 802afce:	4798      	blx	r3
#endif
}
 802afd0:	bf00      	nop
 802afd2:	3710      	adds	r7, #16
 802afd4:	46bd      	mov	sp, r7
 802afd6:	bd80      	pop	{r7, pc}
 802afd8:	2000d9a0 	.word	0x2000d9a0
 802afdc:	2000d9a4 	.word	0x2000d9a4

0802afe0 <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802afe0:	b580      	push	{r7, lr}
 802afe2:	b084      	sub	sp, #16
 802afe4:	af00      	add	r7, sp, #0
 802afe6:	6078      	str	r0, [r7, #4]
 802afe8:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802afea:	4b08      	ldr	r3, [pc, #32]	; (802b00c <spi_fs_mv+0x2c>)
 802afec:	681b      	ldr	r3, [r3, #0]
 802afee:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802aff0:	683a      	ldr	r2, [r7, #0]
 802aff2:	6879      	ldr	r1, [r7, #4]
 802aff4:	4806      	ldr	r0, [pc, #24]	; (802b010 <spi_fs_mv+0x30>)
 802aff6:	f7ff fabf 	bl	802a578 <lfs_rename>
 802affa:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802affc:	4b05      	ldr	r3, [pc, #20]	; (802b014 <spi_fs_mv+0x34>)
 802affe:	681b      	ldr	r3, [r3, #0]
 802b000:	4798      	blx	r3
#endif
	return err;
 802b002:	68fb      	ldr	r3, [r7, #12]
}
 802b004:	4618      	mov	r0, r3
 802b006:	3710      	adds	r7, #16
 802b008:	46bd      	mov	sp, r7
 802b00a:	bd80      	pop	{r7, pc}
 802b00c:	2000d9a0 	.word	0x2000d9a0
 802b010:	2000d6b0 	.word	0x2000d6b0
 802b014:	2000d9a4 	.word	0x2000d9a4

0802b018 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802b018:	b480      	push	{r7}
 802b01a:	b08b      	sub	sp, #44	; 0x2c
 802b01c:	af00      	add	r7, sp, #0
 802b01e:	60f8      	str	r0, [r7, #12]
 802b020:	60b9      	str	r1, [r7, #8]
 802b022:	607a      	str	r2, [r7, #4]
 802b024:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802b026:	2300      	movs	r3, #0
 802b028:	61fb      	str	r3, [r7, #28]
 802b02a:	2300      	movs	r3, #0
 802b02c:	623b      	str	r3, [r7, #32]
 802b02e:	6a3b      	ldr	r3, [r7, #32]
 802b030:	627b      	str	r3, [r7, #36]	; 0x24
 802b032:	e06f      	b.n	802b114 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802b034:	2300      	movs	r3, #0
 802b036:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b038:	e005      	b.n	802b046 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b03c:	3301      	adds	r3, #1
 802b03e:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 802b040:	69bb      	ldr	r3, [r7, #24]
 802b042:	3301      	adds	r3, #1
 802b044:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b04a:	429a      	cmp	r2, r3
 802b04c:	d205      	bcs.n	802b05a <mbedtls_base64_decode+0x42>
 802b04e:	683a      	ldr	r2, [r7, #0]
 802b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b052:	4413      	add	r3, r2
 802b054:	781b      	ldrb	r3, [r3, #0]
 802b056:	2b20      	cmp	r3, #32
 802b058:	d0ef      	beq.n	802b03a <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802b05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b05e:	429a      	cmp	r2, r3
 802b060:	d05d      	beq.n	802b11e <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802b062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b066:	1ad3      	subs	r3, r2, r3
 802b068:	2b01      	cmp	r3, #1
 802b06a:	d90c      	bls.n	802b086 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b06c:	683a      	ldr	r2, [r7, #0]
 802b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b070:	4413      	add	r3, r2
 802b072:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802b074:	2b0d      	cmp	r3, #13
 802b076:	d106      	bne.n	802b086 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b07a:	3301      	adds	r3, #1
 802b07c:	683a      	ldr	r2, [r7, #0]
 802b07e:	4413      	add	r3, r2
 802b080:	781b      	ldrb	r3, [r3, #0]
 802b082:	2b0a      	cmp	r3, #10
 802b084:	d040      	beq.n	802b108 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802b086:	683a      	ldr	r2, [r7, #0]
 802b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b08a:	4413      	add	r3, r2
 802b08c:	781b      	ldrb	r3, [r3, #0]
 802b08e:	2b0a      	cmp	r3, #10
 802b090:	d03c      	beq.n	802b10c <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802b092:	69bb      	ldr	r3, [r7, #24]
 802b094:	2b00      	cmp	r3, #0
 802b096:	d002      	beq.n	802b09e <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b098:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b09c:	e0d0      	b.n	802b240 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802b09e:	683a      	ldr	r2, [r7, #0]
 802b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0a2:	4413      	add	r3, r2
 802b0a4:	781b      	ldrb	r3, [r3, #0]
 802b0a6:	2b3d      	cmp	r3, #61	; 0x3d
 802b0a8:	d108      	bne.n	802b0bc <mbedtls_base64_decode+0xa4>
 802b0aa:	69fb      	ldr	r3, [r7, #28]
 802b0ac:	3301      	adds	r3, #1
 802b0ae:	61fb      	str	r3, [r7, #28]
 802b0b0:	69fb      	ldr	r3, [r7, #28]
 802b0b2:	2b02      	cmp	r3, #2
 802b0b4:	d902      	bls.n	802b0bc <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b0b6:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b0ba:	e0c1      	b.n	802b240 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802b0bc:	683a      	ldr	r2, [r7, #0]
 802b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0c0:	4413      	add	r3, r2
 802b0c2:	781b      	ldrb	r3, [r3, #0]
 802b0c4:	b25b      	sxtb	r3, r3
 802b0c6:	2b00      	cmp	r3, #0
 802b0c8:	db08      	blt.n	802b0dc <mbedtls_base64_decode+0xc4>
 802b0ca:	683a      	ldr	r2, [r7, #0]
 802b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0ce:	4413      	add	r3, r2
 802b0d0:	781b      	ldrb	r3, [r3, #0]
 802b0d2:	461a      	mov	r2, r3
 802b0d4:	4b5d      	ldr	r3, [pc, #372]	; (802b24c <mbedtls_base64_decode+0x234>)
 802b0d6:	5c9b      	ldrb	r3, [r3, r2]
 802b0d8:	2b7f      	cmp	r3, #127	; 0x7f
 802b0da:	d102      	bne.n	802b0e2 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b0dc:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b0e0:	e0ae      	b.n	802b240 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802b0e2:	683a      	ldr	r2, [r7, #0]
 802b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b0e6:	4413      	add	r3, r2
 802b0e8:	781b      	ldrb	r3, [r3, #0]
 802b0ea:	461a      	mov	r2, r3
 802b0ec:	4b57      	ldr	r3, [pc, #348]	; (802b24c <mbedtls_base64_decode+0x234>)
 802b0ee:	5c9b      	ldrb	r3, [r3, r2]
 802b0f0:	2b3f      	cmp	r3, #63	; 0x3f
 802b0f2:	d805      	bhi.n	802b100 <mbedtls_base64_decode+0xe8>
 802b0f4:	69fb      	ldr	r3, [r7, #28]
 802b0f6:	2b00      	cmp	r3, #0
 802b0f8:	d002      	beq.n	802b100 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b0fa:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b0fe:	e09f      	b.n	802b240 <mbedtls_base64_decode+0x228>

        n++;
 802b100:	6a3b      	ldr	r3, [r7, #32]
 802b102:	3301      	adds	r3, #1
 802b104:	623b      	str	r3, [r7, #32]
 802b106:	e002      	b.n	802b10e <mbedtls_base64_decode+0xf6>
            continue;
 802b108:	bf00      	nop
 802b10a:	e000      	b.n	802b10e <mbedtls_base64_decode+0xf6>
            continue;
 802b10c:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b110:	3301      	adds	r3, #1
 802b112:	627b      	str	r3, [r7, #36]	; 0x24
 802b114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b118:	429a      	cmp	r2, r3
 802b11a:	d38b      	bcc.n	802b034 <mbedtls_base64_decode+0x1c>
 802b11c:	e000      	b.n	802b120 <mbedtls_base64_decode+0x108>
            break;
 802b11e:	bf00      	nop
    }

    if( n == 0 )
 802b120:	6a3b      	ldr	r3, [r7, #32]
 802b122:	2b00      	cmp	r3, #0
 802b124:	d104      	bne.n	802b130 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802b126:	687b      	ldr	r3, [r7, #4]
 802b128:	2200      	movs	r2, #0
 802b12a:	601a      	str	r2, [r3, #0]
        return( 0 );
 802b12c:	2300      	movs	r3, #0
 802b12e:	e087      	b.n	802b240 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802b130:	6a3b      	ldr	r3, [r7, #32]
 802b132:	08da      	lsrs	r2, r3, #3
 802b134:	4613      	mov	r3, r2
 802b136:	005b      	lsls	r3, r3, #1
 802b138:	4413      	add	r3, r2
 802b13a:	005b      	lsls	r3, r3, #1
 802b13c:	4619      	mov	r1, r3
 802b13e:	6a3b      	ldr	r3, [r7, #32]
 802b140:	f003 0207 	and.w	r2, r3, #7
 802b144:	4613      	mov	r3, r2
 802b146:	005b      	lsls	r3, r3, #1
 802b148:	4413      	add	r3, r2
 802b14a:	005b      	lsls	r3, r3, #1
 802b14c:	3307      	adds	r3, #7
 802b14e:	08db      	lsrs	r3, r3, #3
 802b150:	440b      	add	r3, r1
 802b152:	623b      	str	r3, [r7, #32]
    n -= j;
 802b154:	6a3a      	ldr	r2, [r7, #32]
 802b156:	69fb      	ldr	r3, [r7, #28]
 802b158:	1ad3      	subs	r3, r2, r3
 802b15a:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802b15c:	68fb      	ldr	r3, [r7, #12]
 802b15e:	2b00      	cmp	r3, #0
 802b160:	d003      	beq.n	802b16a <mbedtls_base64_decode+0x152>
 802b162:	68ba      	ldr	r2, [r7, #8]
 802b164:	6a3b      	ldr	r3, [r7, #32]
 802b166:	429a      	cmp	r2, r3
 802b168:	d205      	bcs.n	802b176 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802b16a:	687b      	ldr	r3, [r7, #4]
 802b16c:	6a3a      	ldr	r2, [r7, #32]
 802b16e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802b170:	f06f 0329 	mvn.w	r3, #41	; 0x29
 802b174:	e064      	b.n	802b240 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b176:	2303      	movs	r3, #3
 802b178:	61fb      	str	r3, [r7, #28]
 802b17a:	2300      	movs	r3, #0
 802b17c:	61bb      	str	r3, [r7, #24]
 802b17e:	2300      	movs	r3, #0
 802b180:	623b      	str	r3, [r7, #32]
 802b182:	68fb      	ldr	r3, [r7, #12]
 802b184:	617b      	str	r3, [r7, #20]
 802b186:	e051      	b.n	802b22c <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802b188:	683b      	ldr	r3, [r7, #0]
 802b18a:	781b      	ldrb	r3, [r3, #0]
 802b18c:	2b0d      	cmp	r3, #13
 802b18e:	d046      	beq.n	802b21e <mbedtls_base64_decode+0x206>
 802b190:	683b      	ldr	r3, [r7, #0]
 802b192:	781b      	ldrb	r3, [r3, #0]
 802b194:	2b0a      	cmp	r3, #10
 802b196:	d042      	beq.n	802b21e <mbedtls_base64_decode+0x206>
 802b198:	683b      	ldr	r3, [r7, #0]
 802b19a:	781b      	ldrb	r3, [r3, #0]
 802b19c:	2b20      	cmp	r3, #32
 802b19e:	d03e      	beq.n	802b21e <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802b1a0:	683b      	ldr	r3, [r7, #0]
 802b1a2:	781b      	ldrb	r3, [r3, #0]
 802b1a4:	461a      	mov	r2, r3
 802b1a6:	4b29      	ldr	r3, [pc, #164]	; (802b24c <mbedtls_base64_decode+0x234>)
 802b1a8:	5c9b      	ldrb	r3, [r3, r2]
 802b1aa:	2b40      	cmp	r3, #64	; 0x40
 802b1ac:	bf0c      	ite	eq
 802b1ae:	2301      	moveq	r3, #1
 802b1b0:	2300      	movne	r3, #0
 802b1b2:	b2db      	uxtb	r3, r3
 802b1b4:	461a      	mov	r2, r3
 802b1b6:	69fb      	ldr	r3, [r7, #28]
 802b1b8:	1a9b      	subs	r3, r3, r2
 802b1ba:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802b1bc:	69bb      	ldr	r3, [r7, #24]
 802b1be:	019a      	lsls	r2, r3, #6
 802b1c0:	683b      	ldr	r3, [r7, #0]
 802b1c2:	781b      	ldrb	r3, [r3, #0]
 802b1c4:	4619      	mov	r1, r3
 802b1c6:	4b21      	ldr	r3, [pc, #132]	; (802b24c <mbedtls_base64_decode+0x234>)
 802b1c8:	5c5b      	ldrb	r3, [r3, r1]
 802b1ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b1ce:	4313      	orrs	r3, r2
 802b1d0:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802b1d2:	6a3b      	ldr	r3, [r7, #32]
 802b1d4:	3301      	adds	r3, #1
 802b1d6:	623b      	str	r3, [r7, #32]
 802b1d8:	6a3b      	ldr	r3, [r7, #32]
 802b1da:	2b04      	cmp	r3, #4
 802b1dc:	d120      	bne.n	802b220 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802b1de:	2300      	movs	r3, #0
 802b1e0:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802b1e2:	69fb      	ldr	r3, [r7, #28]
 802b1e4:	2b00      	cmp	r3, #0
 802b1e6:	d006      	beq.n	802b1f6 <mbedtls_base64_decode+0x1de>
 802b1e8:	69bb      	ldr	r3, [r7, #24]
 802b1ea:	0c19      	lsrs	r1, r3, #16
 802b1ec:	697b      	ldr	r3, [r7, #20]
 802b1ee:	1c5a      	adds	r2, r3, #1
 802b1f0:	617a      	str	r2, [r7, #20]
 802b1f2:	b2ca      	uxtb	r2, r1
 802b1f4:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802b1f6:	69fb      	ldr	r3, [r7, #28]
 802b1f8:	2b01      	cmp	r3, #1
 802b1fa:	d906      	bls.n	802b20a <mbedtls_base64_decode+0x1f2>
 802b1fc:	69bb      	ldr	r3, [r7, #24]
 802b1fe:	0a19      	lsrs	r1, r3, #8
 802b200:	697b      	ldr	r3, [r7, #20]
 802b202:	1c5a      	adds	r2, r3, #1
 802b204:	617a      	str	r2, [r7, #20]
 802b206:	b2ca      	uxtb	r2, r1
 802b208:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802b20a:	69fb      	ldr	r3, [r7, #28]
 802b20c:	2b02      	cmp	r3, #2
 802b20e:	d907      	bls.n	802b220 <mbedtls_base64_decode+0x208>
 802b210:	697b      	ldr	r3, [r7, #20]
 802b212:	1c5a      	adds	r2, r3, #1
 802b214:	617a      	str	r2, [r7, #20]
 802b216:	69ba      	ldr	r2, [r7, #24]
 802b218:	b2d2      	uxtb	r2, r2
 802b21a:	701a      	strb	r2, [r3, #0]
 802b21c:	e000      	b.n	802b220 <mbedtls_base64_decode+0x208>
            continue;
 802b21e:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b222:	3b01      	subs	r3, #1
 802b224:	627b      	str	r3, [r7, #36]	; 0x24
 802b226:	683b      	ldr	r3, [r7, #0]
 802b228:	3301      	adds	r3, #1
 802b22a:	603b      	str	r3, [r7, #0]
 802b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b22e:	2b00      	cmp	r3, #0
 802b230:	d1aa      	bne.n	802b188 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802b232:	697a      	ldr	r2, [r7, #20]
 802b234:	68fb      	ldr	r3, [r7, #12]
 802b236:	1ad3      	subs	r3, r2, r3
 802b238:	461a      	mov	r2, r3
 802b23a:	687b      	ldr	r3, [r7, #4]
 802b23c:	601a      	str	r2, [r3, #0]

    return( 0 );
 802b23e:	2300      	movs	r3, #0
}
 802b240:	4618      	mov	r0, r3
 802b242:	372c      	adds	r7, #44	; 0x2c
 802b244:	46bd      	mov	sp, r7
 802b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b24a:	4770      	bx	lr
 802b24c:	080347d0 	.word	0x080347d0

0802b250 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802b250:	b580      	push	{r7, lr}
 802b252:	b082      	sub	sp, #8
 802b254:	af00      	add	r7, sp, #0
 802b256:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802b258:	2258      	movs	r2, #88	; 0x58
 802b25a:	2100      	movs	r1, #0
 802b25c:	6878      	ldr	r0, [r7, #4]
 802b25e:	f002 fa4d 	bl	802d6fc <memset>
}
 802b262:	bf00      	nop
 802b264:	3708      	adds	r7, #8
 802b266:	46bd      	mov	sp, r7
 802b268:	bd80      	pop	{r7, pc}

0802b26a <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802b26a:	b580      	push	{r7, lr}
 802b26c:	b082      	sub	sp, #8
 802b26e:	af00      	add	r7, sp, #0
 802b270:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802b272:	687b      	ldr	r3, [r7, #4]
 802b274:	2b00      	cmp	r3, #0
 802b276:	d004      	beq.n	802b282 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802b278:	2158      	movs	r1, #88	; 0x58
 802b27a:	6878      	ldr	r0, [r7, #4]
 802b27c:	f001 f85c 	bl	802c338 <mbedtls_platform_zeroize>
 802b280:	e000      	b.n	802b284 <mbedtls_md5_free+0x1a>
        return;
 802b282:	bf00      	nop
}
 802b284:	3708      	adds	r7, #8
 802b286:	46bd      	mov	sp, r7
 802b288:	bd80      	pop	{r7, pc}
	...

0802b28c <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802b28c:	b480      	push	{r7}
 802b28e:	b083      	sub	sp, #12
 802b290:	af00      	add	r7, sp, #0
 802b292:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802b294:	687b      	ldr	r3, [r7, #4]
 802b296:	2200      	movs	r2, #0
 802b298:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802b29a:	687b      	ldr	r3, [r7, #4]
 802b29c:	2200      	movs	r2, #0
 802b29e:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802b2a0:	687b      	ldr	r3, [r7, #4]
 802b2a2:	4a09      	ldr	r2, [pc, #36]	; (802b2c8 <mbedtls_md5_starts_ret+0x3c>)
 802b2a4:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802b2a6:	687b      	ldr	r3, [r7, #4]
 802b2a8:	4a08      	ldr	r2, [pc, #32]	; (802b2cc <mbedtls_md5_starts_ret+0x40>)
 802b2aa:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802b2ac:	687b      	ldr	r3, [r7, #4]
 802b2ae:	4a08      	ldr	r2, [pc, #32]	; (802b2d0 <mbedtls_md5_starts_ret+0x44>)
 802b2b0:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802b2b2:	687b      	ldr	r3, [r7, #4]
 802b2b4:	4a07      	ldr	r2, [pc, #28]	; (802b2d4 <mbedtls_md5_starts_ret+0x48>)
 802b2b6:	615a      	str	r2, [r3, #20]

    return( 0 );
 802b2b8:	2300      	movs	r3, #0
}
 802b2ba:	4618      	mov	r0, r3
 802b2bc:	370c      	adds	r7, #12
 802b2be:	46bd      	mov	sp, r7
 802b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b2c4:	4770      	bx	lr
 802b2c6:	bf00      	nop
 802b2c8:	67452301 	.word	0x67452301
 802b2cc:	efcdab89 	.word	0xefcdab89
 802b2d0:	98badcfe 	.word	0x98badcfe
 802b2d4:	10325476 	.word	0x10325476

0802b2d8 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802b2d8:	b480      	push	{r7}
 802b2da:	b097      	sub	sp, #92	; 0x5c
 802b2dc:	af00      	add	r7, sp, #0
 802b2de:	6078      	str	r0, [r7, #4]
 802b2e0:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802b2e2:	683b      	ldr	r3, [r7, #0]
 802b2e4:	781b      	ldrb	r3, [r3, #0]
 802b2e6:	461a      	mov	r2, r3
 802b2e8:	683b      	ldr	r3, [r7, #0]
 802b2ea:	3301      	adds	r3, #1
 802b2ec:	781b      	ldrb	r3, [r3, #0]
 802b2ee:	021b      	lsls	r3, r3, #8
 802b2f0:	431a      	orrs	r2, r3
 802b2f2:	683b      	ldr	r3, [r7, #0]
 802b2f4:	3302      	adds	r3, #2
 802b2f6:	781b      	ldrb	r3, [r3, #0]
 802b2f8:	041b      	lsls	r3, r3, #16
 802b2fa:	431a      	orrs	r2, r3
 802b2fc:	683b      	ldr	r3, [r7, #0]
 802b2fe:	3303      	adds	r3, #3
 802b300:	781b      	ldrb	r3, [r3, #0]
 802b302:	061b      	lsls	r3, r3, #24
 802b304:	4313      	orrs	r3, r2
 802b306:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802b308:	683b      	ldr	r3, [r7, #0]
 802b30a:	3304      	adds	r3, #4
 802b30c:	781b      	ldrb	r3, [r3, #0]
 802b30e:	461a      	mov	r2, r3
 802b310:	683b      	ldr	r3, [r7, #0]
 802b312:	3305      	adds	r3, #5
 802b314:	781b      	ldrb	r3, [r3, #0]
 802b316:	021b      	lsls	r3, r3, #8
 802b318:	431a      	orrs	r2, r3
 802b31a:	683b      	ldr	r3, [r7, #0]
 802b31c:	3306      	adds	r3, #6
 802b31e:	781b      	ldrb	r3, [r3, #0]
 802b320:	041b      	lsls	r3, r3, #16
 802b322:	431a      	orrs	r2, r3
 802b324:	683b      	ldr	r3, [r7, #0]
 802b326:	3307      	adds	r3, #7
 802b328:	781b      	ldrb	r3, [r3, #0]
 802b32a:	061b      	lsls	r3, r3, #24
 802b32c:	4313      	orrs	r3, r2
 802b32e:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802b330:	683b      	ldr	r3, [r7, #0]
 802b332:	3308      	adds	r3, #8
 802b334:	781b      	ldrb	r3, [r3, #0]
 802b336:	461a      	mov	r2, r3
 802b338:	683b      	ldr	r3, [r7, #0]
 802b33a:	3309      	adds	r3, #9
 802b33c:	781b      	ldrb	r3, [r3, #0]
 802b33e:	021b      	lsls	r3, r3, #8
 802b340:	431a      	orrs	r2, r3
 802b342:	683b      	ldr	r3, [r7, #0]
 802b344:	330a      	adds	r3, #10
 802b346:	781b      	ldrb	r3, [r3, #0]
 802b348:	041b      	lsls	r3, r3, #16
 802b34a:	431a      	orrs	r2, r3
 802b34c:	683b      	ldr	r3, [r7, #0]
 802b34e:	330b      	adds	r3, #11
 802b350:	781b      	ldrb	r3, [r3, #0]
 802b352:	061b      	lsls	r3, r3, #24
 802b354:	4313      	orrs	r3, r2
 802b356:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802b358:	683b      	ldr	r3, [r7, #0]
 802b35a:	330c      	adds	r3, #12
 802b35c:	781b      	ldrb	r3, [r3, #0]
 802b35e:	461a      	mov	r2, r3
 802b360:	683b      	ldr	r3, [r7, #0]
 802b362:	330d      	adds	r3, #13
 802b364:	781b      	ldrb	r3, [r3, #0]
 802b366:	021b      	lsls	r3, r3, #8
 802b368:	431a      	orrs	r2, r3
 802b36a:	683b      	ldr	r3, [r7, #0]
 802b36c:	330e      	adds	r3, #14
 802b36e:	781b      	ldrb	r3, [r3, #0]
 802b370:	041b      	lsls	r3, r3, #16
 802b372:	431a      	orrs	r2, r3
 802b374:	683b      	ldr	r3, [r7, #0]
 802b376:	330f      	adds	r3, #15
 802b378:	781b      	ldrb	r3, [r3, #0]
 802b37a:	061b      	lsls	r3, r3, #24
 802b37c:	4313      	orrs	r3, r2
 802b37e:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802b380:	683b      	ldr	r3, [r7, #0]
 802b382:	3310      	adds	r3, #16
 802b384:	781b      	ldrb	r3, [r3, #0]
 802b386:	461a      	mov	r2, r3
 802b388:	683b      	ldr	r3, [r7, #0]
 802b38a:	3311      	adds	r3, #17
 802b38c:	781b      	ldrb	r3, [r3, #0]
 802b38e:	021b      	lsls	r3, r3, #8
 802b390:	431a      	orrs	r2, r3
 802b392:	683b      	ldr	r3, [r7, #0]
 802b394:	3312      	adds	r3, #18
 802b396:	781b      	ldrb	r3, [r3, #0]
 802b398:	041b      	lsls	r3, r3, #16
 802b39a:	431a      	orrs	r2, r3
 802b39c:	683b      	ldr	r3, [r7, #0]
 802b39e:	3313      	adds	r3, #19
 802b3a0:	781b      	ldrb	r3, [r3, #0]
 802b3a2:	061b      	lsls	r3, r3, #24
 802b3a4:	4313      	orrs	r3, r2
 802b3a6:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b3a8:	683b      	ldr	r3, [r7, #0]
 802b3aa:	3314      	adds	r3, #20
 802b3ac:	781b      	ldrb	r3, [r3, #0]
 802b3ae:	461a      	mov	r2, r3
 802b3b0:	683b      	ldr	r3, [r7, #0]
 802b3b2:	3315      	adds	r3, #21
 802b3b4:	781b      	ldrb	r3, [r3, #0]
 802b3b6:	021b      	lsls	r3, r3, #8
 802b3b8:	431a      	orrs	r2, r3
 802b3ba:	683b      	ldr	r3, [r7, #0]
 802b3bc:	3316      	adds	r3, #22
 802b3be:	781b      	ldrb	r3, [r3, #0]
 802b3c0:	041b      	lsls	r3, r3, #16
 802b3c2:	431a      	orrs	r2, r3
 802b3c4:	683b      	ldr	r3, [r7, #0]
 802b3c6:	3317      	adds	r3, #23
 802b3c8:	781b      	ldrb	r3, [r3, #0]
 802b3ca:	061b      	lsls	r3, r3, #24
 802b3cc:	4313      	orrs	r3, r2
 802b3ce:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b3d0:	683b      	ldr	r3, [r7, #0]
 802b3d2:	3318      	adds	r3, #24
 802b3d4:	781b      	ldrb	r3, [r3, #0]
 802b3d6:	461a      	mov	r2, r3
 802b3d8:	683b      	ldr	r3, [r7, #0]
 802b3da:	3319      	adds	r3, #25
 802b3dc:	781b      	ldrb	r3, [r3, #0]
 802b3de:	021b      	lsls	r3, r3, #8
 802b3e0:	431a      	orrs	r2, r3
 802b3e2:	683b      	ldr	r3, [r7, #0]
 802b3e4:	331a      	adds	r3, #26
 802b3e6:	781b      	ldrb	r3, [r3, #0]
 802b3e8:	041b      	lsls	r3, r3, #16
 802b3ea:	431a      	orrs	r2, r3
 802b3ec:	683b      	ldr	r3, [r7, #0]
 802b3ee:	331b      	adds	r3, #27
 802b3f0:	781b      	ldrb	r3, [r3, #0]
 802b3f2:	061b      	lsls	r3, r3, #24
 802b3f4:	4313      	orrs	r3, r2
 802b3f6:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b3f8:	683b      	ldr	r3, [r7, #0]
 802b3fa:	331c      	adds	r3, #28
 802b3fc:	781b      	ldrb	r3, [r3, #0]
 802b3fe:	461a      	mov	r2, r3
 802b400:	683b      	ldr	r3, [r7, #0]
 802b402:	331d      	adds	r3, #29
 802b404:	781b      	ldrb	r3, [r3, #0]
 802b406:	021b      	lsls	r3, r3, #8
 802b408:	431a      	orrs	r2, r3
 802b40a:	683b      	ldr	r3, [r7, #0]
 802b40c:	331e      	adds	r3, #30
 802b40e:	781b      	ldrb	r3, [r3, #0]
 802b410:	041b      	lsls	r3, r3, #16
 802b412:	431a      	orrs	r2, r3
 802b414:	683b      	ldr	r3, [r7, #0]
 802b416:	331f      	adds	r3, #31
 802b418:	781b      	ldrb	r3, [r3, #0]
 802b41a:	061b      	lsls	r3, r3, #24
 802b41c:	4313      	orrs	r3, r2
 802b41e:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b420:	683b      	ldr	r3, [r7, #0]
 802b422:	3320      	adds	r3, #32
 802b424:	781b      	ldrb	r3, [r3, #0]
 802b426:	461a      	mov	r2, r3
 802b428:	683b      	ldr	r3, [r7, #0]
 802b42a:	3321      	adds	r3, #33	; 0x21
 802b42c:	781b      	ldrb	r3, [r3, #0]
 802b42e:	021b      	lsls	r3, r3, #8
 802b430:	431a      	orrs	r2, r3
 802b432:	683b      	ldr	r3, [r7, #0]
 802b434:	3322      	adds	r3, #34	; 0x22
 802b436:	781b      	ldrb	r3, [r3, #0]
 802b438:	041b      	lsls	r3, r3, #16
 802b43a:	431a      	orrs	r2, r3
 802b43c:	683b      	ldr	r3, [r7, #0]
 802b43e:	3323      	adds	r3, #35	; 0x23
 802b440:	781b      	ldrb	r3, [r3, #0]
 802b442:	061b      	lsls	r3, r3, #24
 802b444:	4313      	orrs	r3, r2
 802b446:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b448:	683b      	ldr	r3, [r7, #0]
 802b44a:	3324      	adds	r3, #36	; 0x24
 802b44c:	781b      	ldrb	r3, [r3, #0]
 802b44e:	461a      	mov	r2, r3
 802b450:	683b      	ldr	r3, [r7, #0]
 802b452:	3325      	adds	r3, #37	; 0x25
 802b454:	781b      	ldrb	r3, [r3, #0]
 802b456:	021b      	lsls	r3, r3, #8
 802b458:	431a      	orrs	r2, r3
 802b45a:	683b      	ldr	r3, [r7, #0]
 802b45c:	3326      	adds	r3, #38	; 0x26
 802b45e:	781b      	ldrb	r3, [r3, #0]
 802b460:	041b      	lsls	r3, r3, #16
 802b462:	431a      	orrs	r2, r3
 802b464:	683b      	ldr	r3, [r7, #0]
 802b466:	3327      	adds	r3, #39	; 0x27
 802b468:	781b      	ldrb	r3, [r3, #0]
 802b46a:	061b      	lsls	r3, r3, #24
 802b46c:	4313      	orrs	r3, r2
 802b46e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b470:	683b      	ldr	r3, [r7, #0]
 802b472:	3328      	adds	r3, #40	; 0x28
 802b474:	781b      	ldrb	r3, [r3, #0]
 802b476:	461a      	mov	r2, r3
 802b478:	683b      	ldr	r3, [r7, #0]
 802b47a:	3329      	adds	r3, #41	; 0x29
 802b47c:	781b      	ldrb	r3, [r3, #0]
 802b47e:	021b      	lsls	r3, r3, #8
 802b480:	431a      	orrs	r2, r3
 802b482:	683b      	ldr	r3, [r7, #0]
 802b484:	332a      	adds	r3, #42	; 0x2a
 802b486:	781b      	ldrb	r3, [r3, #0]
 802b488:	041b      	lsls	r3, r3, #16
 802b48a:	431a      	orrs	r2, r3
 802b48c:	683b      	ldr	r3, [r7, #0]
 802b48e:	332b      	adds	r3, #43	; 0x2b
 802b490:	781b      	ldrb	r3, [r3, #0]
 802b492:	061b      	lsls	r3, r3, #24
 802b494:	4313      	orrs	r3, r2
 802b496:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b498:	683b      	ldr	r3, [r7, #0]
 802b49a:	332c      	adds	r3, #44	; 0x2c
 802b49c:	781b      	ldrb	r3, [r3, #0]
 802b49e:	461a      	mov	r2, r3
 802b4a0:	683b      	ldr	r3, [r7, #0]
 802b4a2:	332d      	adds	r3, #45	; 0x2d
 802b4a4:	781b      	ldrb	r3, [r3, #0]
 802b4a6:	021b      	lsls	r3, r3, #8
 802b4a8:	431a      	orrs	r2, r3
 802b4aa:	683b      	ldr	r3, [r7, #0]
 802b4ac:	332e      	adds	r3, #46	; 0x2e
 802b4ae:	781b      	ldrb	r3, [r3, #0]
 802b4b0:	041b      	lsls	r3, r3, #16
 802b4b2:	431a      	orrs	r2, r3
 802b4b4:	683b      	ldr	r3, [r7, #0]
 802b4b6:	332f      	adds	r3, #47	; 0x2f
 802b4b8:	781b      	ldrb	r3, [r3, #0]
 802b4ba:	061b      	lsls	r3, r3, #24
 802b4bc:	4313      	orrs	r3, r2
 802b4be:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b4c0:	683b      	ldr	r3, [r7, #0]
 802b4c2:	3330      	adds	r3, #48	; 0x30
 802b4c4:	781b      	ldrb	r3, [r3, #0]
 802b4c6:	461a      	mov	r2, r3
 802b4c8:	683b      	ldr	r3, [r7, #0]
 802b4ca:	3331      	adds	r3, #49	; 0x31
 802b4cc:	781b      	ldrb	r3, [r3, #0]
 802b4ce:	021b      	lsls	r3, r3, #8
 802b4d0:	431a      	orrs	r2, r3
 802b4d2:	683b      	ldr	r3, [r7, #0]
 802b4d4:	3332      	adds	r3, #50	; 0x32
 802b4d6:	781b      	ldrb	r3, [r3, #0]
 802b4d8:	041b      	lsls	r3, r3, #16
 802b4da:	431a      	orrs	r2, r3
 802b4dc:	683b      	ldr	r3, [r7, #0]
 802b4de:	3333      	adds	r3, #51	; 0x33
 802b4e0:	781b      	ldrb	r3, [r3, #0]
 802b4e2:	061b      	lsls	r3, r3, #24
 802b4e4:	4313      	orrs	r3, r2
 802b4e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b4e8:	683b      	ldr	r3, [r7, #0]
 802b4ea:	3334      	adds	r3, #52	; 0x34
 802b4ec:	781b      	ldrb	r3, [r3, #0]
 802b4ee:	461a      	mov	r2, r3
 802b4f0:	683b      	ldr	r3, [r7, #0]
 802b4f2:	3335      	adds	r3, #53	; 0x35
 802b4f4:	781b      	ldrb	r3, [r3, #0]
 802b4f6:	021b      	lsls	r3, r3, #8
 802b4f8:	431a      	orrs	r2, r3
 802b4fa:	683b      	ldr	r3, [r7, #0]
 802b4fc:	3336      	adds	r3, #54	; 0x36
 802b4fe:	781b      	ldrb	r3, [r3, #0]
 802b500:	041b      	lsls	r3, r3, #16
 802b502:	431a      	orrs	r2, r3
 802b504:	683b      	ldr	r3, [r7, #0]
 802b506:	3337      	adds	r3, #55	; 0x37
 802b508:	781b      	ldrb	r3, [r3, #0]
 802b50a:	061b      	lsls	r3, r3, #24
 802b50c:	4313      	orrs	r3, r2
 802b50e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b510:	683b      	ldr	r3, [r7, #0]
 802b512:	3338      	adds	r3, #56	; 0x38
 802b514:	781b      	ldrb	r3, [r3, #0]
 802b516:	461a      	mov	r2, r3
 802b518:	683b      	ldr	r3, [r7, #0]
 802b51a:	3339      	adds	r3, #57	; 0x39
 802b51c:	781b      	ldrb	r3, [r3, #0]
 802b51e:	021b      	lsls	r3, r3, #8
 802b520:	431a      	orrs	r2, r3
 802b522:	683b      	ldr	r3, [r7, #0]
 802b524:	333a      	adds	r3, #58	; 0x3a
 802b526:	781b      	ldrb	r3, [r3, #0]
 802b528:	041b      	lsls	r3, r3, #16
 802b52a:	431a      	orrs	r2, r3
 802b52c:	683b      	ldr	r3, [r7, #0]
 802b52e:	333b      	adds	r3, #59	; 0x3b
 802b530:	781b      	ldrb	r3, [r3, #0]
 802b532:	061b      	lsls	r3, r3, #24
 802b534:	4313      	orrs	r3, r2
 802b536:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b538:	683b      	ldr	r3, [r7, #0]
 802b53a:	333c      	adds	r3, #60	; 0x3c
 802b53c:	781b      	ldrb	r3, [r3, #0]
 802b53e:	461a      	mov	r2, r3
 802b540:	683b      	ldr	r3, [r7, #0]
 802b542:	333d      	adds	r3, #61	; 0x3d
 802b544:	781b      	ldrb	r3, [r3, #0]
 802b546:	021b      	lsls	r3, r3, #8
 802b548:	431a      	orrs	r2, r3
 802b54a:	683b      	ldr	r3, [r7, #0]
 802b54c:	333e      	adds	r3, #62	; 0x3e
 802b54e:	781b      	ldrb	r3, [r3, #0]
 802b550:	041b      	lsls	r3, r3, #16
 802b552:	431a      	orrs	r2, r3
 802b554:	683b      	ldr	r3, [r7, #0]
 802b556:	333f      	adds	r3, #63	; 0x3f
 802b558:	781b      	ldrb	r3, [r3, #0]
 802b55a:	061b      	lsls	r3, r3, #24
 802b55c:	4313      	orrs	r3, r2
 802b55e:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802b560:	687b      	ldr	r3, [r7, #4]
 802b562:	689b      	ldr	r3, [r3, #8]
 802b564:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 802b566:	687b      	ldr	r3, [r7, #4]
 802b568:	68db      	ldr	r3, [r3, #12]
 802b56a:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 802b56c:	687b      	ldr	r3, [r7, #4]
 802b56e:	691b      	ldr	r3, [r3, #16]
 802b570:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 802b572:	687b      	ldr	r3, [r7, #4]
 802b574:	695b      	ldr	r3, [r3, #20]
 802b576:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802b578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b57c:	405a      	eors	r2, r3
 802b57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b580:	401a      	ands	r2, r3
 802b582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b584:	405a      	eors	r2, r3
 802b586:	68bb      	ldr	r3, [r7, #8]
 802b588:	441a      	add	r2, r3
 802b58a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b58c:	441a      	add	r2, r3
 802b58e:	4ba5      	ldr	r3, [pc, #660]	; (802b824 <mbedtls_internal_md5_process+0x54c>)
 802b590:	4413      	add	r3, r2
 802b592:	657b      	str	r3, [r7, #84]	; 0x54
 802b594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b596:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b59a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b59c:	4413      	add	r3, r2
 802b59e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802b5a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5a4:	405a      	eors	r2, r3
 802b5a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5a8:	401a      	ands	r2, r3
 802b5aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5ac:	405a      	eors	r2, r3
 802b5ae:	68fb      	ldr	r3, [r7, #12]
 802b5b0:	441a      	add	r2, r3
 802b5b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5b4:	441a      	add	r2, r3
 802b5b6:	4b9c      	ldr	r3, [pc, #624]	; (802b828 <mbedtls_internal_md5_process+0x550>)
 802b5b8:	4413      	add	r3, r2
 802b5ba:	64bb      	str	r3, [r7, #72]	; 0x48
 802b5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5be:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b5c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b5c4:	4413      	add	r3, r2
 802b5c6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802b5c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5cc:	405a      	eors	r2, r3
 802b5ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b5d0:	401a      	ands	r2, r3
 802b5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b5d4:	405a      	eors	r2, r3
 802b5d6:	693b      	ldr	r3, [r7, #16]
 802b5d8:	441a      	add	r2, r3
 802b5da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5dc:	441a      	add	r2, r3
 802b5de:	4b93      	ldr	r3, [pc, #588]	; (802b82c <mbedtls_internal_md5_process+0x554>)
 802b5e0:	4413      	add	r3, r2
 802b5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b5e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5e6:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b5ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b5ec:	4413      	add	r3, r2
 802b5ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802b5f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b5f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5f4:	405a      	eors	r2, r3
 802b5f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b5f8:	401a      	ands	r2, r3
 802b5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b5fc:	405a      	eors	r2, r3
 802b5fe:	697b      	ldr	r3, [r7, #20]
 802b600:	441a      	add	r2, r3
 802b602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b604:	441a      	add	r2, r3
 802b606:	4b8a      	ldr	r3, [pc, #552]	; (802b830 <mbedtls_internal_md5_process+0x558>)
 802b608:	4413      	add	r3, r2
 802b60a:	653b      	str	r3, [r7, #80]	; 0x50
 802b60c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b60e:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b614:	4413      	add	r3, r2
 802b616:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802b618:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b61a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b61c:	405a      	eors	r2, r3
 802b61e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b620:	401a      	ands	r2, r3
 802b622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b624:	405a      	eors	r2, r3
 802b626:	69bb      	ldr	r3, [r7, #24]
 802b628:	441a      	add	r2, r3
 802b62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b62c:	441a      	add	r2, r3
 802b62e:	4b81      	ldr	r3, [pc, #516]	; (802b834 <mbedtls_internal_md5_process+0x55c>)
 802b630:	4413      	add	r3, r2
 802b632:	657b      	str	r3, [r7, #84]	; 0x54
 802b634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b636:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b63a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b63c:	4413      	add	r3, r2
 802b63e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802b640:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b644:	405a      	eors	r2, r3
 802b646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b648:	401a      	ands	r2, r3
 802b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b64c:	405a      	eors	r2, r3
 802b64e:	69fb      	ldr	r3, [r7, #28]
 802b650:	441a      	add	r2, r3
 802b652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b654:	441a      	add	r2, r3
 802b656:	4b78      	ldr	r3, [pc, #480]	; (802b838 <mbedtls_internal_md5_process+0x560>)
 802b658:	4413      	add	r3, r2
 802b65a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b65c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b65e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b662:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b664:	4413      	add	r3, r2
 802b666:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802b668:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b66a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b66c:	405a      	eors	r2, r3
 802b66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b670:	401a      	ands	r2, r3
 802b672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b674:	405a      	eors	r2, r3
 802b676:	6a3b      	ldr	r3, [r7, #32]
 802b678:	441a      	add	r2, r3
 802b67a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b67c:	441a      	add	r2, r3
 802b67e:	4b6f      	ldr	r3, [pc, #444]	; (802b83c <mbedtls_internal_md5_process+0x564>)
 802b680:	4413      	add	r3, r2
 802b682:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b686:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b68a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b68c:	4413      	add	r3, r2
 802b68e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802b690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b694:	405a      	eors	r2, r3
 802b696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b698:	401a      	ands	r2, r3
 802b69a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b69c:	405a      	eors	r2, r3
 802b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b6a0:	441a      	add	r2, r3
 802b6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6a4:	441a      	add	r2, r3
 802b6a6:	4b66      	ldr	r3, [pc, #408]	; (802b840 <mbedtls_internal_md5_process+0x568>)
 802b6a8:	4413      	add	r3, r2
 802b6aa:	653b      	str	r3, [r7, #80]	; 0x50
 802b6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6ae:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b6b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b6b4:	4413      	add	r3, r2
 802b6b6:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802b6b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6bc:	405a      	eors	r2, r3
 802b6be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b6c0:	401a      	ands	r2, r3
 802b6c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6c4:	405a      	eors	r2, r3
 802b6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802b6c8:	441a      	add	r2, r3
 802b6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6cc:	441a      	add	r2, r3
 802b6ce:	4b5d      	ldr	r3, [pc, #372]	; (802b844 <mbedtls_internal_md5_process+0x56c>)
 802b6d0:	4413      	add	r3, r2
 802b6d2:	657b      	str	r3, [r7, #84]	; 0x54
 802b6d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6d6:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b6da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b6dc:	4413      	add	r3, r2
 802b6de:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802b6e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b6e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6e4:	405a      	eors	r2, r3
 802b6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b6e8:	401a      	ands	r2, r3
 802b6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b6ec:	405a      	eors	r2, r3
 802b6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b6f0:	441a      	add	r2, r3
 802b6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6f4:	441a      	add	r2, r3
 802b6f6:	4b54      	ldr	r3, [pc, #336]	; (802b848 <mbedtls_internal_md5_process+0x570>)
 802b6f8:	4413      	add	r3, r2
 802b6fa:	64bb      	str	r3, [r7, #72]	; 0x48
 802b6fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b6fe:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b704:	4413      	add	r3, r2
 802b706:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802b708:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b70c:	405a      	eors	r2, r3
 802b70e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b710:	401a      	ands	r2, r3
 802b712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b714:	405a      	eors	r2, r3
 802b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b718:	441a      	add	r2, r3
 802b71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b71c:	4413      	add	r3, r2
 802b71e:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 802b722:	3b4f      	subs	r3, #79	; 0x4f
 802b724:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b728:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b72c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b72e:	4413      	add	r3, r2
 802b730:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802b732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b736:	405a      	eors	r2, r3
 802b738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b73a:	401a      	ands	r2, r3
 802b73c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b73e:	405a      	eors	r2, r3
 802b740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b742:	441a      	add	r2, r3
 802b744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b746:	441a      	add	r2, r3
 802b748:	4b40      	ldr	r3, [pc, #256]	; (802b84c <mbedtls_internal_md5_process+0x574>)
 802b74a:	4413      	add	r3, r2
 802b74c:	653b      	str	r3, [r7, #80]	; 0x50
 802b74e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b750:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b756:	4413      	add	r3, r2
 802b758:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802b75a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b75c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b75e:	405a      	eors	r2, r3
 802b760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b762:	401a      	ands	r2, r3
 802b764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b766:	405a      	eors	r2, r3
 802b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802b76a:	441a      	add	r2, r3
 802b76c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b76e:	441a      	add	r2, r3
 802b770:	4b37      	ldr	r3, [pc, #220]	; (802b850 <mbedtls_internal_md5_process+0x578>)
 802b772:	4413      	add	r3, r2
 802b774:	657b      	str	r3, [r7, #84]	; 0x54
 802b776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b778:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b77c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b77e:	4413      	add	r3, r2
 802b780:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802b782:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b786:	405a      	eors	r2, r3
 802b788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b78a:	401a      	ands	r2, r3
 802b78c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b78e:	405a      	eors	r2, r3
 802b790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802b792:	441a      	add	r2, r3
 802b794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b796:	441a      	add	r2, r3
 802b798:	4b2e      	ldr	r3, [pc, #184]	; (802b854 <mbedtls_internal_md5_process+0x57c>)
 802b79a:	4413      	add	r3, r2
 802b79c:	64bb      	str	r3, [r7, #72]	; 0x48
 802b79e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7a0:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b7a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b7a6:	4413      	add	r3, r2
 802b7a8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802b7aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b7ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7ae:	405a      	eors	r2, r3
 802b7b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b7b2:	401a      	ands	r2, r3
 802b7b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7b6:	405a      	eors	r2, r3
 802b7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b7ba:	441a      	add	r2, r3
 802b7bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7be:	441a      	add	r2, r3
 802b7c0:	4b25      	ldr	r3, [pc, #148]	; (802b858 <mbedtls_internal_md5_process+0x580>)
 802b7c2:	4413      	add	r3, r2
 802b7c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7c8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b7cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b7ce:	4413      	add	r3, r2
 802b7d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802b7d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7d6:	405a      	eors	r2, r3
 802b7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7da:	401a      	ands	r2, r3
 802b7dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b7de:	405a      	eors	r2, r3
 802b7e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b7e2:	441a      	add	r2, r3
 802b7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7e6:	441a      	add	r2, r3
 802b7e8:	4b1c      	ldr	r3, [pc, #112]	; (802b85c <mbedtls_internal_md5_process+0x584>)
 802b7ea:	4413      	add	r3, r2
 802b7ec:	653b      	str	r3, [r7, #80]	; 0x50
 802b7ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b7f0:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b7f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b7f6:	4413      	add	r3, r2
 802b7f8:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802b7fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b7fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b7fe:	405a      	eors	r2, r3
 802b800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b802:	401a      	ands	r2, r3
 802b804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b806:	405a      	eors	r2, r3
 802b808:	68fb      	ldr	r3, [r7, #12]
 802b80a:	441a      	add	r2, r3
 802b80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b80e:	441a      	add	r2, r3
 802b810:	4b13      	ldr	r3, [pc, #76]	; (802b860 <mbedtls_internal_md5_process+0x588>)
 802b812:	4413      	add	r3, r2
 802b814:	657b      	str	r3, [r7, #84]	; 0x54
 802b816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b818:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b81c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b81e:	4413      	add	r3, r2
 802b820:	e020      	b.n	802b864 <mbedtls_internal_md5_process+0x58c>
 802b822:	bf00      	nop
 802b824:	d76aa478 	.word	0xd76aa478
 802b828:	e8c7b756 	.word	0xe8c7b756
 802b82c:	242070db 	.word	0x242070db
 802b830:	c1bdceee 	.word	0xc1bdceee
 802b834:	f57c0faf 	.word	0xf57c0faf
 802b838:	4787c62a 	.word	0x4787c62a
 802b83c:	a8304613 	.word	0xa8304613
 802b840:	fd469501 	.word	0xfd469501
 802b844:	698098d8 	.word	0x698098d8
 802b848:	8b44f7af 	.word	0x8b44f7af
 802b84c:	895cd7be 	.word	0x895cd7be
 802b850:	6b901122 	.word	0x6b901122
 802b854:	fd987193 	.word	0xfd987193
 802b858:	a679438e 	.word	0xa679438e
 802b85c:	49b40821 	.word	0x49b40821
 802b860:	f61e2562 	.word	0xf61e2562
 802b864:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802b866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b86a:	405a      	eors	r2, r3
 802b86c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b86e:	401a      	ands	r2, r3
 802b870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b872:	405a      	eors	r2, r3
 802b874:	6a3b      	ldr	r3, [r7, #32]
 802b876:	441a      	add	r2, r3
 802b878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b87a:	441a      	add	r2, r3
 802b87c:	4ba4      	ldr	r3, [pc, #656]	; (802bb10 <mbedtls_internal_md5_process+0x838>)
 802b87e:	4413      	add	r3, r2
 802b880:	64bb      	str	r3, [r7, #72]	; 0x48
 802b882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b884:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b88a:	4413      	add	r3, r2
 802b88c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802b88e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b892:	405a      	eors	r2, r3
 802b894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b896:	401a      	ands	r2, r3
 802b898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b89a:	405a      	eors	r2, r3
 802b89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802b89e:	441a      	add	r2, r3
 802b8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8a2:	441a      	add	r2, r3
 802b8a4:	4b9b      	ldr	r3, [pc, #620]	; (802bb14 <mbedtls_internal_md5_process+0x83c>)
 802b8a6:	4413      	add	r3, r2
 802b8a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8ac:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b8b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b8b2:	4413      	add	r3, r2
 802b8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802b8b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b8b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8ba:	405a      	eors	r2, r3
 802b8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8be:	401a      	ands	r2, r3
 802b8c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8c2:	405a      	eors	r2, r3
 802b8c4:	68bb      	ldr	r3, [r7, #8]
 802b8c6:	441a      	add	r2, r3
 802b8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8ca:	441a      	add	r2, r3
 802b8cc:	4b92      	ldr	r3, [pc, #584]	; (802bb18 <mbedtls_internal_md5_process+0x840>)
 802b8ce:	4413      	add	r3, r2
 802b8d0:	653b      	str	r3, [r7, #80]	; 0x50
 802b8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b8d4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b8d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b8da:	4413      	add	r3, r2
 802b8dc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802b8de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8e2:	405a      	eors	r2, r3
 802b8e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b8e6:	401a      	ands	r2, r3
 802b8e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b8ea:	405a      	eors	r2, r3
 802b8ec:	69fb      	ldr	r3, [r7, #28]
 802b8ee:	441a      	add	r2, r3
 802b8f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8f2:	441a      	add	r2, r3
 802b8f4:	4b89      	ldr	r3, [pc, #548]	; (802bb1c <mbedtls_internal_md5_process+0x844>)
 802b8f6:	4413      	add	r3, r2
 802b8f8:	657b      	str	r3, [r7, #84]	; 0x54
 802b8fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b8fc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b900:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b902:	4413      	add	r3, r2
 802b904:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802b906:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b90a:	405a      	eors	r2, r3
 802b90c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b90e:	401a      	ands	r2, r3
 802b910:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b912:	405a      	eors	r2, r3
 802b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b916:	441a      	add	r2, r3
 802b918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b91a:	441a      	add	r2, r3
 802b91c:	4b80      	ldr	r3, [pc, #512]	; (802bb20 <mbedtls_internal_md5_process+0x848>)
 802b91e:	4413      	add	r3, r2
 802b920:	64bb      	str	r3, [r7, #72]	; 0x48
 802b922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b924:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b928:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b92a:	4413      	add	r3, r2
 802b92c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802b92e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b932:	405a      	eors	r2, r3
 802b934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b936:	401a      	ands	r2, r3
 802b938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b93a:	405a      	eors	r2, r3
 802b93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802b93e:	441a      	add	r2, r3
 802b940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b942:	441a      	add	r2, r3
 802b944:	4b77      	ldr	r3, [pc, #476]	; (802bb24 <mbedtls_internal_md5_process+0x84c>)
 802b946:	4413      	add	r3, r2
 802b948:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b94c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b952:	4413      	add	r3, r2
 802b954:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802b956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b95a:	405a      	eors	r2, r3
 802b95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b95e:	401a      	ands	r2, r3
 802b960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b962:	405a      	eors	r2, r3
 802b964:	69bb      	ldr	r3, [r7, #24]
 802b966:	441a      	add	r2, r3
 802b968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b96a:	441a      	add	r2, r3
 802b96c:	4b6e      	ldr	r3, [pc, #440]	; (802bb28 <mbedtls_internal_md5_process+0x850>)
 802b96e:	4413      	add	r3, r2
 802b970:	653b      	str	r3, [r7, #80]	; 0x50
 802b972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b974:	ea4f 3333 	mov.w	r3, r3, ror #12
 802b978:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b97a:	4413      	add	r3, r2
 802b97c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802b97e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b982:	405a      	eors	r2, r3
 802b984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b986:	401a      	ands	r2, r3
 802b988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b98a:	405a      	eors	r2, r3
 802b98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802b98e:	441a      	add	r2, r3
 802b990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b992:	441a      	add	r2, r3
 802b994:	4b65      	ldr	r3, [pc, #404]	; (802bb2c <mbedtls_internal_md5_process+0x854>)
 802b996:	4413      	add	r3, r2
 802b998:	657b      	str	r3, [r7, #84]	; 0x54
 802b99a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b99c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802b9a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9a2:	4413      	add	r3, r2
 802b9a4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802b9a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9aa:	405a      	eors	r2, r3
 802b9ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9ae:	401a      	ands	r2, r3
 802b9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9b2:	405a      	eors	r2, r3
 802b9b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802b9b6:	441a      	add	r2, r3
 802b9b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9ba:	441a      	add	r2, r3
 802b9bc:	4b5c      	ldr	r3, [pc, #368]	; (802bb30 <mbedtls_internal_md5_process+0x858>)
 802b9be:	4413      	add	r3, r2
 802b9c0:	64bb      	str	r3, [r7, #72]	; 0x48
 802b9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9c4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802b9c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b9ca:	4413      	add	r3, r2
 802b9cc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802b9ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9d2:	405a      	eors	r2, r3
 802b9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9d6:	401a      	ands	r2, r3
 802b9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9da:	405a      	eors	r2, r3
 802b9dc:	697b      	ldr	r3, [r7, #20]
 802b9de:	441a      	add	r2, r3
 802b9e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9e2:	441a      	add	r2, r3
 802b9e4:	4b53      	ldr	r3, [pc, #332]	; (802bb34 <mbedtls_internal_md5_process+0x85c>)
 802b9e6:	4413      	add	r3, r2
 802b9e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9ec:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802b9f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9f2:	4413      	add	r3, r2
 802b9f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802b9f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9fa:	405a      	eors	r2, r3
 802b9fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9fe:	401a      	ands	r2, r3
 802ba00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba02:	405a      	eors	r2, r3
 802ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba06:	441a      	add	r2, r3
 802ba08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba0a:	441a      	add	r2, r3
 802ba0c:	4b4a      	ldr	r3, [pc, #296]	; (802bb38 <mbedtls_internal_md5_process+0x860>)
 802ba0e:	4413      	add	r3, r2
 802ba10:	653b      	str	r3, [r7, #80]	; 0x50
 802ba12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba14:	ea4f 3333 	mov.w	r3, r3, ror #12
 802ba18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba1a:	4413      	add	r3, r2
 802ba1c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802ba1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba22:	405a      	eors	r2, r3
 802ba24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba26:	401a      	ands	r2, r3
 802ba28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba2a:	405a      	eors	r2, r3
 802ba2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802ba2e:	441a      	add	r2, r3
 802ba30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba32:	441a      	add	r2, r3
 802ba34:	4b41      	ldr	r3, [pc, #260]	; (802bb3c <mbedtls_internal_md5_process+0x864>)
 802ba36:	4413      	add	r3, r2
 802ba38:	657b      	str	r3, [r7, #84]	; 0x54
 802ba3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba3c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802ba40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba42:	4413      	add	r3, r2
 802ba44:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802ba46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba4a:	405a      	eors	r2, r3
 802ba4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba4e:	401a      	ands	r2, r3
 802ba50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba52:	405a      	eors	r2, r3
 802ba54:	693b      	ldr	r3, [r7, #16]
 802ba56:	441a      	add	r2, r3
 802ba58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba5a:	441a      	add	r2, r3
 802ba5c:	4b38      	ldr	r3, [pc, #224]	; (802bb40 <mbedtls_internal_md5_process+0x868>)
 802ba5e:	4413      	add	r3, r2
 802ba60:	64bb      	str	r3, [r7, #72]	; 0x48
 802ba62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba64:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802ba68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba6a:	4413      	add	r3, r2
 802ba6c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802ba6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba72:	405a      	eors	r2, r3
 802ba74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba76:	401a      	ands	r2, r3
 802ba78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba7a:	405a      	eors	r2, r3
 802ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba7e:	441a      	add	r2, r3
 802ba80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba82:	441a      	add	r2, r3
 802ba84:	4b2f      	ldr	r3, [pc, #188]	; (802bb44 <mbedtls_internal_md5_process+0x86c>)
 802ba86:	4413      	add	r3, r2
 802ba88:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ba8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba8c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802ba90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba92:	4413      	add	r3, r2
 802ba94:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802ba96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba9a:	405a      	eors	r2, r3
 802ba9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba9e:	401a      	ands	r2, r3
 802baa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baa2:	405a      	eors	r2, r3
 802baa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802baa6:	441a      	add	r2, r3
 802baa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baaa:	441a      	add	r2, r3
 802baac:	4b26      	ldr	r3, [pc, #152]	; (802bb48 <mbedtls_internal_md5_process+0x870>)
 802baae:	4413      	add	r3, r2
 802bab0:	653b      	str	r3, [r7, #80]	; 0x50
 802bab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bab4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bab8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802baba:	4413      	add	r3, r2
 802babc:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802babe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bac2:	405a      	eors	r2, r3
 802bac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bac6:	405a      	eors	r2, r3
 802bac8:	69fb      	ldr	r3, [r7, #28]
 802baca:	441a      	add	r2, r3
 802bacc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bace:	4413      	add	r3, r2
 802bad0:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 802bad4:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 802bad8:	657b      	str	r3, [r7, #84]	; 0x54
 802bada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802badc:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bae0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bae2:	4413      	add	r3, r2
 802bae4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802bae6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bae8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baea:	405a      	eors	r2, r3
 802baec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802baee:	405a      	eors	r2, r3
 802baf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802baf2:	441a      	add	r2, r3
 802baf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baf6:	441a      	add	r2, r3
 802baf8:	4b14      	ldr	r3, [pc, #80]	; (802bb4c <mbedtls_internal_md5_process+0x874>)
 802bafa:	4413      	add	r3, r2
 802bafc:	64bb      	str	r3, [r7, #72]	; 0x48
 802bafe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb00:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bb04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb06:	4413      	add	r3, r2
 802bb08:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802bb0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb0c:	e020      	b.n	802bb50 <mbedtls_internal_md5_process+0x878>
 802bb0e:	bf00      	nop
 802bb10:	c040b340 	.word	0xc040b340
 802bb14:	265e5a51 	.word	0x265e5a51
 802bb18:	e9b6c7aa 	.word	0xe9b6c7aa
 802bb1c:	d62f105d 	.word	0xd62f105d
 802bb20:	02441453 	.word	0x02441453
 802bb24:	d8a1e681 	.word	0xd8a1e681
 802bb28:	e7d3fbc8 	.word	0xe7d3fbc8
 802bb2c:	21e1cde6 	.word	0x21e1cde6
 802bb30:	c33707d6 	.word	0xc33707d6
 802bb34:	f4d50d87 	.word	0xf4d50d87
 802bb38:	455a14ed 	.word	0x455a14ed
 802bb3c:	a9e3e905 	.word	0xa9e3e905
 802bb40:	fcefa3f8 	.word	0xfcefa3f8
 802bb44:	676f02d9 	.word	0x676f02d9
 802bb48:	8d2a4c8a 	.word	0x8d2a4c8a
 802bb4c:	8771f681 	.word	0x8771f681
 802bb50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb52:	405a      	eors	r2, r3
 802bb54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb56:	405a      	eors	r2, r3
 802bb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bb5a:	441a      	add	r2, r3
 802bb5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb5e:	441a      	add	r2, r3
 802bb60:	4ba4      	ldr	r3, [pc, #656]	; (802bdf4 <mbedtls_internal_md5_process+0xb1c>)
 802bb62:	4413      	add	r3, r2
 802bb64:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb68:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bb6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb6e:	4413      	add	r3, r2
 802bb70:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802bb72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb76:	405a      	eors	r2, r3
 802bb78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb7a:	405a      	eors	r2, r3
 802bb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bb7e:	441a      	add	r2, r3
 802bb80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb82:	441a      	add	r2, r3
 802bb84:	4b9c      	ldr	r3, [pc, #624]	; (802bdf8 <mbedtls_internal_md5_process+0xb20>)
 802bb86:	4413      	add	r3, r2
 802bb88:	653b      	str	r3, [r7, #80]	; 0x50
 802bb8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb8c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bb90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb92:	4413      	add	r3, r2
 802bb94:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802bb96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb9a:	405a      	eors	r2, r3
 802bb9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb9e:	405a      	eors	r2, r3
 802bba0:	68fb      	ldr	r3, [r7, #12]
 802bba2:	441a      	add	r2, r3
 802bba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bba6:	441a      	add	r2, r3
 802bba8:	4b94      	ldr	r3, [pc, #592]	; (802bdfc <mbedtls_internal_md5_process+0xb24>)
 802bbaa:	4413      	add	r3, r2
 802bbac:	657b      	str	r3, [r7, #84]	; 0x54
 802bbae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbb0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bbb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbb6:	4413      	add	r3, r2
 802bbb8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802bbba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbbe:	405a      	eors	r2, r3
 802bbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbc2:	405a      	eors	r2, r3
 802bbc4:	69bb      	ldr	r3, [r7, #24]
 802bbc6:	441a      	add	r2, r3
 802bbc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbca:	441a      	add	r2, r3
 802bbcc:	4b8c      	ldr	r3, [pc, #560]	; (802be00 <mbedtls_internal_md5_process+0xb28>)
 802bbce:	4413      	add	r3, r2
 802bbd0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bbd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbd4:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bbd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bbda:	4413      	add	r3, r2
 802bbdc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802bbde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbe2:	405a      	eors	r2, r3
 802bbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bbe6:	405a      	eors	r2, r3
 802bbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bbea:	441a      	add	r2, r3
 802bbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbee:	441a      	add	r2, r3
 802bbf0:	4b84      	ldr	r3, [pc, #528]	; (802be04 <mbedtls_internal_md5_process+0xb2c>)
 802bbf2:	4413      	add	r3, r2
 802bbf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bbf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbf8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bbfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bbfe:	4413      	add	r3, r2
 802bc00:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802bc02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc06:	405a      	eors	r2, r3
 802bc08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc0a:	405a      	eors	r2, r3
 802bc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bc0e:	441a      	add	r2, r3
 802bc10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc12:	441a      	add	r2, r3
 802bc14:	4b7c      	ldr	r3, [pc, #496]	; (802be08 <mbedtls_internal_md5_process+0xb30>)
 802bc16:	4413      	add	r3, r2
 802bc18:	653b      	str	r3, [r7, #80]	; 0x50
 802bc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc1c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bc20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc22:	4413      	add	r3, r2
 802bc24:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802bc26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc2a:	405a      	eors	r2, r3
 802bc2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc2e:	405a      	eors	r2, r3
 802bc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bc32:	441a      	add	r2, r3
 802bc34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc36:	441a      	add	r2, r3
 802bc38:	4b74      	ldr	r3, [pc, #464]	; (802be0c <mbedtls_internal_md5_process+0xb34>)
 802bc3a:	4413      	add	r3, r2
 802bc3c:	657b      	str	r3, [r7, #84]	; 0x54
 802bc3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc40:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bc44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc46:	4413      	add	r3, r2
 802bc48:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802bc4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc4e:	405a      	eors	r2, r3
 802bc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc52:	405a      	eors	r2, r3
 802bc54:	68bb      	ldr	r3, [r7, #8]
 802bc56:	441a      	add	r2, r3
 802bc58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc5a:	441a      	add	r2, r3
 802bc5c:	4b6c      	ldr	r3, [pc, #432]	; (802be10 <mbedtls_internal_md5_process+0xb38>)
 802bc5e:	4413      	add	r3, r2
 802bc60:	64bb      	str	r3, [r7, #72]	; 0x48
 802bc62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc64:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bc68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc6a:	4413      	add	r3, r2
 802bc6c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802bc6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc72:	405a      	eors	r2, r3
 802bc74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc76:	405a      	eors	r2, r3
 802bc78:	697b      	ldr	r3, [r7, #20]
 802bc7a:	441a      	add	r2, r3
 802bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc7e:	441a      	add	r2, r3
 802bc80:	4b64      	ldr	r3, [pc, #400]	; (802be14 <mbedtls_internal_md5_process+0xb3c>)
 802bc82:	4413      	add	r3, r2
 802bc84:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc88:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bc8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc8e:	4413      	add	r3, r2
 802bc90:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802bc92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc96:	405a      	eors	r2, r3
 802bc98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc9a:	405a      	eors	r2, r3
 802bc9c:	6a3b      	ldr	r3, [r7, #32]
 802bc9e:	441a      	add	r2, r3
 802bca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bca2:	441a      	add	r2, r3
 802bca4:	4b5c      	ldr	r3, [pc, #368]	; (802be18 <mbedtls_internal_md5_process+0xb40>)
 802bca6:	4413      	add	r3, r2
 802bca8:	653b      	str	r3, [r7, #80]	; 0x50
 802bcaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcac:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bcb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bcb2:	4413      	add	r3, r2
 802bcb4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802bcb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bcb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcba:	405a      	eors	r2, r3
 802bcbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcbe:	405a      	eors	r2, r3
 802bcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bcc2:	441a      	add	r2, r3
 802bcc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcc6:	441a      	add	r2, r3
 802bcc8:	4b54      	ldr	r3, [pc, #336]	; (802be1c <mbedtls_internal_md5_process+0xb44>)
 802bcca:	4413      	add	r3, r2
 802bccc:	657b      	str	r3, [r7, #84]	; 0x54
 802bcce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcd0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bcd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bcd6:	4413      	add	r3, r2
 802bcd8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802bcda:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcde:	405a      	eors	r2, r3
 802bce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bce2:	405a      	eors	r2, r3
 802bce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bce6:	441a      	add	r2, r3
 802bce8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcea:	441a      	add	r2, r3
 802bcec:	4b4c      	ldr	r3, [pc, #304]	; (802be20 <mbedtls_internal_md5_process+0xb48>)
 802bcee:	4413      	add	r3, r2
 802bcf0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bcf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcf4:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bcf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcfa:	4413      	add	r3, r2
 802bcfc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802bcfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd02:	405a      	eors	r2, r3
 802bd04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd06:	405a      	eors	r2, r3
 802bd08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bd0a:	441a      	add	r2, r3
 802bd0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd0e:	441a      	add	r2, r3
 802bd10:	4b44      	ldr	r3, [pc, #272]	; (802be24 <mbedtls_internal_md5_process+0xb4c>)
 802bd12:	4413      	add	r3, r2
 802bd14:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bd16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd18:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bd1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd1e:	4413      	add	r3, r2
 802bd20:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802bd22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd26:	405a      	eors	r2, r3
 802bd28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd2a:	405a      	eors	r2, r3
 802bd2c:	693b      	ldr	r3, [r7, #16]
 802bd2e:	441a      	add	r2, r3
 802bd30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd32:	441a      	add	r2, r3
 802bd34:	4b3c      	ldr	r3, [pc, #240]	; (802be28 <mbedtls_internal_md5_process+0xb50>)
 802bd36:	4413      	add	r3, r2
 802bd38:	653b      	str	r3, [r7, #80]	; 0x50
 802bd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd3c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bd40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd42:	4413      	add	r3, r2
 802bd44:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802bd46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd48:	43da      	mvns	r2, r3
 802bd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd4c:	431a      	orrs	r2, r3
 802bd4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd50:	405a      	eors	r2, r3
 802bd52:	68bb      	ldr	r3, [r7, #8]
 802bd54:	441a      	add	r2, r3
 802bd56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd58:	441a      	add	r2, r3
 802bd5a:	4b34      	ldr	r3, [pc, #208]	; (802be2c <mbedtls_internal_md5_process+0xb54>)
 802bd5c:	4413      	add	r3, r2
 802bd5e:	657b      	str	r3, [r7, #84]	; 0x54
 802bd60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd62:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bd66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd68:	4413      	add	r3, r2
 802bd6a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802bd6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd6e:	43da      	mvns	r2, r3
 802bd70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd72:	431a      	orrs	r2, r3
 802bd74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd76:	405a      	eors	r2, r3
 802bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bd7a:	441a      	add	r2, r3
 802bd7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd7e:	441a      	add	r2, r3
 802bd80:	4b2b      	ldr	r3, [pc, #172]	; (802be30 <mbedtls_internal_md5_process+0xb58>)
 802bd82:	4413      	add	r3, r2
 802bd84:	64bb      	str	r3, [r7, #72]	; 0x48
 802bd86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd88:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bd8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd8e:	4413      	add	r3, r2
 802bd90:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802bd92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd94:	43da      	mvns	r2, r3
 802bd96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd98:	431a      	orrs	r2, r3
 802bd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd9c:	405a      	eors	r2, r3
 802bd9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bda0:	441a      	add	r2, r3
 802bda2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bda4:	441a      	add	r2, r3
 802bda6:	4b23      	ldr	r3, [pc, #140]	; (802be34 <mbedtls_internal_md5_process+0xb5c>)
 802bda8:	4413      	add	r3, r2
 802bdaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bdac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdae:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bdb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bdb4:	4413      	add	r3, r2
 802bdb6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802bdb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdba:	43da      	mvns	r2, r3
 802bdbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdbe:	431a      	orrs	r2, r3
 802bdc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdc2:	405a      	eors	r2, r3
 802bdc4:	69fb      	ldr	r3, [r7, #28]
 802bdc6:	441a      	add	r2, r3
 802bdc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdca:	441a      	add	r2, r3
 802bdcc:	4b1a      	ldr	r3, [pc, #104]	; (802be38 <mbedtls_internal_md5_process+0xb60>)
 802bdce:	4413      	add	r3, r2
 802bdd0:	653b      	str	r3, [r7, #80]	; 0x50
 802bdd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdd4:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bdd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bdda:	4413      	add	r3, r2
 802bddc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802bdde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bde0:	43da      	mvns	r2, r3
 802bde2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bde4:	431a      	orrs	r2, r3
 802bde6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bde8:	405a      	eors	r2, r3
 802bdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bdec:	441a      	add	r2, r3
 802bdee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdf0:	e024      	b.n	802be3c <mbedtls_internal_md5_process+0xb64>
 802bdf2:	bf00      	nop
 802bdf4:	6d9d6122 	.word	0x6d9d6122
 802bdf8:	fde5380c 	.word	0xfde5380c
 802bdfc:	a4beea44 	.word	0xa4beea44
 802be00:	4bdecfa9 	.word	0x4bdecfa9
 802be04:	f6bb4b60 	.word	0xf6bb4b60
 802be08:	bebfbc70 	.word	0xbebfbc70
 802be0c:	289b7ec6 	.word	0x289b7ec6
 802be10:	eaa127fa 	.word	0xeaa127fa
 802be14:	d4ef3085 	.word	0xd4ef3085
 802be18:	04881d05 	.word	0x04881d05
 802be1c:	d9d4d039 	.word	0xd9d4d039
 802be20:	e6db99e5 	.word	0xe6db99e5
 802be24:	1fa27cf8 	.word	0x1fa27cf8
 802be28:	c4ac5665 	.word	0xc4ac5665
 802be2c:	f4292244 	.word	0xf4292244
 802be30:	432aff97 	.word	0x432aff97
 802be34:	ab9423a7 	.word	0xab9423a7
 802be38:	fc93a039 	.word	0xfc93a039
 802be3c:	441a      	add	r2, r3
 802be3e:	4b7d      	ldr	r3, [pc, #500]	; (802c034 <mbedtls_internal_md5_process+0xd5c>)
 802be40:	4413      	add	r3, r2
 802be42:	657b      	str	r3, [r7, #84]	; 0x54
 802be44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be46:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802be4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be4c:	4413      	add	r3, r2
 802be4e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802be50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be52:	43da      	mvns	r2, r3
 802be54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be56:	431a      	orrs	r2, r3
 802be58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be5a:	405a      	eors	r2, r3
 802be5c:	697b      	ldr	r3, [r7, #20]
 802be5e:	441a      	add	r2, r3
 802be60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be62:	441a      	add	r2, r3
 802be64:	4b74      	ldr	r3, [pc, #464]	; (802c038 <mbedtls_internal_md5_process+0xd60>)
 802be66:	4413      	add	r3, r2
 802be68:	64bb      	str	r3, [r7, #72]	; 0x48
 802be6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be6c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802be70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be72:	4413      	add	r3, r2
 802be74:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802be76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be78:	43da      	mvns	r2, r3
 802be7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be7c:	431a      	orrs	r2, r3
 802be7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be80:	405a      	eors	r2, r3
 802be82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802be84:	441a      	add	r2, r3
 802be86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be88:	4413      	add	r3, r2
 802be8a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802be8e:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 802be92:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be96:	ea4f 4373 	mov.w	r3, r3, ror #17
 802be9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be9c:	4413      	add	r3, r2
 802be9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802bea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bea2:	43da      	mvns	r2, r3
 802bea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bea6:	431a      	orrs	r2, r3
 802bea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802beaa:	405a      	eors	r2, r3
 802beac:	68fb      	ldr	r3, [r7, #12]
 802beae:	441a      	add	r2, r3
 802beb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802beb2:	441a      	add	r2, r3
 802beb4:	4b61      	ldr	r3, [pc, #388]	; (802c03c <mbedtls_internal_md5_process+0xd64>)
 802beb6:	4413      	add	r3, r2
 802beb8:	653b      	str	r3, [r7, #80]	; 0x50
 802beba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bebc:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bec2:	4413      	add	r3, r2
 802bec4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802bec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bec8:	43da      	mvns	r2, r3
 802beca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802becc:	431a      	orrs	r2, r3
 802bece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bed0:	405a      	eors	r2, r3
 802bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bed4:	441a      	add	r2, r3
 802bed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bed8:	441a      	add	r2, r3
 802beda:	4b59      	ldr	r3, [pc, #356]	; (802c040 <mbedtls_internal_md5_process+0xd68>)
 802bedc:	4413      	add	r3, r2
 802bede:	657b      	str	r3, [r7, #84]	; 0x54
 802bee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bee2:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bee6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bee8:	4413      	add	r3, r2
 802beea:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802beec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802beee:	43da      	mvns	r2, r3
 802bef0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bef2:	431a      	orrs	r2, r3
 802bef4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bef6:	405a      	eors	r2, r3
 802bef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802befa:	441a      	add	r2, r3
 802befc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802befe:	441a      	add	r2, r3
 802bf00:	4b50      	ldr	r3, [pc, #320]	; (802c044 <mbedtls_internal_md5_process+0xd6c>)
 802bf02:	4413      	add	r3, r2
 802bf04:	64bb      	str	r3, [r7, #72]	; 0x48
 802bf06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf08:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bf0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bf0e:	4413      	add	r3, r2
 802bf10:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802bf12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf14:	43da      	mvns	r2, r3
 802bf16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf18:	431a      	orrs	r2, r3
 802bf1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf1c:	405a      	eors	r2, r3
 802bf1e:	6a3b      	ldr	r3, [r7, #32]
 802bf20:	441a      	add	r2, r3
 802bf22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf24:	441a      	add	r2, r3
 802bf26:	4b48      	ldr	r3, [pc, #288]	; (802c048 <mbedtls_internal_md5_process+0xd70>)
 802bf28:	4413      	add	r3, r2
 802bf2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bf2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf2e:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bf32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf34:	4413      	add	r3, r2
 802bf36:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802bf38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf3a:	43da      	mvns	r2, r3
 802bf3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf3e:	431a      	orrs	r2, r3
 802bf40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf42:	405a      	eors	r2, r3
 802bf44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bf46:	441a      	add	r2, r3
 802bf48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf4a:	441a      	add	r2, r3
 802bf4c:	4b3f      	ldr	r3, [pc, #252]	; (802c04c <mbedtls_internal_md5_process+0xd74>)
 802bf4e:	4413      	add	r3, r2
 802bf50:	653b      	str	r3, [r7, #80]	; 0x50
 802bf52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf54:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bf58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf5a:	4413      	add	r3, r2
 802bf5c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802bf5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf60:	43da      	mvns	r2, r3
 802bf62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf64:	431a      	orrs	r2, r3
 802bf66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf68:	405a      	eors	r2, r3
 802bf6a:	69bb      	ldr	r3, [r7, #24]
 802bf6c:	441a      	add	r2, r3
 802bf6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf70:	441a      	add	r2, r3
 802bf72:	4b37      	ldr	r3, [pc, #220]	; (802c050 <mbedtls_internal_md5_process+0xd78>)
 802bf74:	4413      	add	r3, r2
 802bf76:	657b      	str	r3, [r7, #84]	; 0x54
 802bf78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf7a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802bf7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf80:	4413      	add	r3, r2
 802bf82:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802bf84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf86:	43da      	mvns	r2, r3
 802bf88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf8a:	431a      	orrs	r2, r3
 802bf8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf8e:	405a      	eors	r2, r3
 802bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bf92:	441a      	add	r2, r3
 802bf94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf96:	441a      	add	r2, r3
 802bf98:	4b2e      	ldr	r3, [pc, #184]	; (802c054 <mbedtls_internal_md5_process+0xd7c>)
 802bf9a:	4413      	add	r3, r2
 802bf9c:	64bb      	str	r3, [r7, #72]	; 0x48
 802bf9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfa0:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802bfa4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bfa6:	4413      	add	r3, r2
 802bfa8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802bfaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfac:	43da      	mvns	r2, r3
 802bfae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfb0:	431a      	orrs	r2, r3
 802bfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfb4:	405a      	eors	r2, r3
 802bfb6:	693b      	ldr	r3, [r7, #16]
 802bfb8:	441a      	add	r2, r3
 802bfba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfbc:	441a      	add	r2, r3
 802bfbe:	4b26      	ldr	r3, [pc, #152]	; (802c058 <mbedtls_internal_md5_process+0xd80>)
 802bfc0:	4413      	add	r3, r2
 802bfc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bfc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfc6:	ea4f 4373 	mov.w	r3, r3, ror #17
 802bfca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bfcc:	4413      	add	r3, r2
 802bfce:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802bfd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfd2:	43da      	mvns	r2, r3
 802bfd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfd6:	431a      	orrs	r2, r3
 802bfd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfda:	405a      	eors	r2, r3
 802bfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bfde:	441a      	add	r2, r3
 802bfe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfe2:	441a      	add	r2, r3
 802bfe4:	4b1d      	ldr	r3, [pc, #116]	; (802c05c <mbedtls_internal_md5_process+0xd84>)
 802bfe6:	4413      	add	r3, r2
 802bfe8:	653b      	str	r3, [r7, #80]	; 0x50
 802bfea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfec:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802bff0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bff2:	4413      	add	r3, r2
 802bff4:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 802bff6:	687b      	ldr	r3, [r7, #4]
 802bff8:	689a      	ldr	r2, [r3, #8]
 802bffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bffc:	441a      	add	r2, r3
 802bffe:	687b      	ldr	r3, [r7, #4]
 802c000:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802c002:	687b      	ldr	r3, [r7, #4]
 802c004:	68da      	ldr	r2, [r3, #12]
 802c006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c008:	441a      	add	r2, r3
 802c00a:	687b      	ldr	r3, [r7, #4]
 802c00c:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802c00e:	687b      	ldr	r3, [r7, #4]
 802c010:	691a      	ldr	r2, [r3, #16]
 802c012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c014:	441a      	add	r2, r3
 802c016:	687b      	ldr	r3, [r7, #4]
 802c018:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802c01a:	687b      	ldr	r3, [r7, #4]
 802c01c:	695a      	ldr	r2, [r3, #20]
 802c01e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c020:	441a      	add	r2, r3
 802c022:	687b      	ldr	r3, [r7, #4]
 802c024:	615a      	str	r2, [r3, #20]

    return( 0 );
 802c026:	2300      	movs	r3, #0
}
 802c028:	4618      	mov	r0, r3
 802c02a:	375c      	adds	r7, #92	; 0x5c
 802c02c:	46bd      	mov	sp, r7
 802c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c032:	4770      	bx	lr
 802c034:	655b59c3 	.word	0x655b59c3
 802c038:	8f0ccc92 	.word	0x8f0ccc92
 802c03c:	85845dd1 	.word	0x85845dd1
 802c040:	6fa87e4f 	.word	0x6fa87e4f
 802c044:	fe2ce6e0 	.word	0xfe2ce6e0
 802c048:	a3014314 	.word	0xa3014314
 802c04c:	4e0811a1 	.word	0x4e0811a1
 802c050:	f7537e82 	.word	0xf7537e82
 802c054:	bd3af235 	.word	0xbd3af235
 802c058:	2ad7d2bb 	.word	0x2ad7d2bb
 802c05c:	eb86d391 	.word	0xeb86d391

0802c060 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802c060:	b580      	push	{r7, lr}
 802c062:	b088      	sub	sp, #32
 802c064:	af00      	add	r7, sp, #0
 802c066:	60f8      	str	r0, [r7, #12]
 802c068:	60b9      	str	r1, [r7, #8]
 802c06a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802c06c:	687b      	ldr	r3, [r7, #4]
 802c06e:	2b00      	cmp	r3, #0
 802c070:	d101      	bne.n	802c076 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802c072:	2300      	movs	r3, #0
 802c074:	e065      	b.n	802c142 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802c076:	68fb      	ldr	r3, [r7, #12]
 802c078:	681b      	ldr	r3, [r3, #0]
 802c07a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c07e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802c080:	69fb      	ldr	r3, [r7, #28]
 802c082:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c086:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802c088:	68fb      	ldr	r3, [r7, #12]
 802c08a:	681a      	ldr	r2, [r3, #0]
 802c08c:	687b      	ldr	r3, [r7, #4]
 802c08e:	441a      	add	r2, r3
 802c090:	68fb      	ldr	r3, [r7, #12]
 802c092:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802c094:	68fb      	ldr	r3, [r7, #12]
 802c096:	681a      	ldr	r2, [r3, #0]
 802c098:	68fb      	ldr	r3, [r7, #12]
 802c09a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802c09c:	68fb      	ldr	r3, [r7, #12]
 802c09e:	681b      	ldr	r3, [r3, #0]
 802c0a0:	687a      	ldr	r2, [r7, #4]
 802c0a2:	429a      	cmp	r2, r3
 802c0a4:	d904      	bls.n	802c0b0 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802c0a6:	68fb      	ldr	r3, [r7, #12]
 802c0a8:	685b      	ldr	r3, [r3, #4]
 802c0aa:	1c5a      	adds	r2, r3, #1
 802c0ac:	68fb      	ldr	r3, [r7, #12]
 802c0ae:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802c0b0:	69fb      	ldr	r3, [r7, #28]
 802c0b2:	2b00      	cmp	r3, #0
 802c0b4:	d034      	beq.n	802c120 <mbedtls_md5_update_ret+0xc0>
 802c0b6:	687a      	ldr	r2, [r7, #4]
 802c0b8:	69bb      	ldr	r3, [r7, #24]
 802c0ba:	429a      	cmp	r2, r3
 802c0bc:	d330      	bcc.n	802c120 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802c0be:	68fb      	ldr	r3, [r7, #12]
 802c0c0:	f103 0218 	add.w	r2, r3, #24
 802c0c4:	69fb      	ldr	r3, [r7, #28]
 802c0c6:	4413      	add	r3, r2
 802c0c8:	69ba      	ldr	r2, [r7, #24]
 802c0ca:	68b9      	ldr	r1, [r7, #8]
 802c0cc:	4618      	mov	r0, r3
 802c0ce:	f001 fcea 	bl	802daa6 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c0d2:	68fb      	ldr	r3, [r7, #12]
 802c0d4:	3318      	adds	r3, #24
 802c0d6:	4619      	mov	r1, r3
 802c0d8:	68f8      	ldr	r0, [r7, #12]
 802c0da:	f7ff f8fd 	bl	802b2d8 <mbedtls_internal_md5_process>
 802c0de:	6178      	str	r0, [r7, #20]
 802c0e0:	697b      	ldr	r3, [r7, #20]
 802c0e2:	2b00      	cmp	r3, #0
 802c0e4:	d001      	beq.n	802c0ea <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802c0e6:	697b      	ldr	r3, [r7, #20]
 802c0e8:	e02b      	b.n	802c142 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802c0ea:	68ba      	ldr	r2, [r7, #8]
 802c0ec:	69bb      	ldr	r3, [r7, #24]
 802c0ee:	4413      	add	r3, r2
 802c0f0:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802c0f2:	687a      	ldr	r2, [r7, #4]
 802c0f4:	69bb      	ldr	r3, [r7, #24]
 802c0f6:	1ad3      	subs	r3, r2, r3
 802c0f8:	607b      	str	r3, [r7, #4]
        left = 0;
 802c0fa:	2300      	movs	r3, #0
 802c0fc:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802c0fe:	e00f      	b.n	802c120 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802c100:	68b9      	ldr	r1, [r7, #8]
 802c102:	68f8      	ldr	r0, [r7, #12]
 802c104:	f7ff f8e8 	bl	802b2d8 <mbedtls_internal_md5_process>
 802c108:	6178      	str	r0, [r7, #20]
 802c10a:	697b      	ldr	r3, [r7, #20]
 802c10c:	2b00      	cmp	r3, #0
 802c10e:	d001      	beq.n	802c114 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802c110:	697b      	ldr	r3, [r7, #20]
 802c112:	e016      	b.n	802c142 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802c114:	68bb      	ldr	r3, [r7, #8]
 802c116:	3340      	adds	r3, #64	; 0x40
 802c118:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802c11a:	687b      	ldr	r3, [r7, #4]
 802c11c:	3b40      	subs	r3, #64	; 0x40
 802c11e:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802c120:	687b      	ldr	r3, [r7, #4]
 802c122:	2b3f      	cmp	r3, #63	; 0x3f
 802c124:	d8ec      	bhi.n	802c100 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802c126:	687b      	ldr	r3, [r7, #4]
 802c128:	2b00      	cmp	r3, #0
 802c12a:	d009      	beq.n	802c140 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802c12c:	68fb      	ldr	r3, [r7, #12]
 802c12e:	f103 0218 	add.w	r2, r3, #24
 802c132:	69fb      	ldr	r3, [r7, #28]
 802c134:	4413      	add	r3, r2
 802c136:	687a      	ldr	r2, [r7, #4]
 802c138:	68b9      	ldr	r1, [r7, #8]
 802c13a:	4618      	mov	r0, r3
 802c13c:	f001 fcb3 	bl	802daa6 <memcpy>
    }

    return( 0 );
 802c140:	2300      	movs	r3, #0
}
 802c142:	4618      	mov	r0, r3
 802c144:	3720      	adds	r7, #32
 802c146:	46bd      	mov	sp, r7
 802c148:	bd80      	pop	{r7, pc}

0802c14a <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802c14a:	b580      	push	{r7, lr}
 802c14c:	b086      	sub	sp, #24
 802c14e:	af00      	add	r7, sp, #0
 802c150:	6078      	str	r0, [r7, #4]
 802c152:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802c154:	687b      	ldr	r3, [r7, #4]
 802c156:	681b      	ldr	r3, [r3, #0]
 802c158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c15c:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802c15e:	697b      	ldr	r3, [r7, #20]
 802c160:	1c5a      	adds	r2, r3, #1
 802c162:	617a      	str	r2, [r7, #20]
 802c164:	687a      	ldr	r2, [r7, #4]
 802c166:	4413      	add	r3, r2
 802c168:	2280      	movs	r2, #128	; 0x80
 802c16a:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802c16c:	697b      	ldr	r3, [r7, #20]
 802c16e:	2b38      	cmp	r3, #56	; 0x38
 802c170:	d80c      	bhi.n	802c18c <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802c172:	687b      	ldr	r3, [r7, #4]
 802c174:	f103 0218 	add.w	r2, r3, #24
 802c178:	697b      	ldr	r3, [r7, #20]
 802c17a:	18d0      	adds	r0, r2, r3
 802c17c:	697b      	ldr	r3, [r7, #20]
 802c17e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802c182:	461a      	mov	r2, r3
 802c184:	2100      	movs	r1, #0
 802c186:	f001 fab9 	bl	802d6fc <memset>
 802c18a:	e01e      	b.n	802c1ca <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802c18c:	687b      	ldr	r3, [r7, #4]
 802c18e:	f103 0218 	add.w	r2, r3, #24
 802c192:	697b      	ldr	r3, [r7, #20]
 802c194:	18d0      	adds	r0, r2, r3
 802c196:	697b      	ldr	r3, [r7, #20]
 802c198:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c19c:	461a      	mov	r2, r3
 802c19e:	2100      	movs	r1, #0
 802c1a0:	f001 faac 	bl	802d6fc <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c1a4:	687b      	ldr	r3, [r7, #4]
 802c1a6:	3318      	adds	r3, #24
 802c1a8:	4619      	mov	r1, r3
 802c1aa:	6878      	ldr	r0, [r7, #4]
 802c1ac:	f7ff f894 	bl	802b2d8 <mbedtls_internal_md5_process>
 802c1b0:	6138      	str	r0, [r7, #16]
 802c1b2:	693b      	ldr	r3, [r7, #16]
 802c1b4:	2b00      	cmp	r3, #0
 802c1b6:	d001      	beq.n	802c1bc <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802c1b8:	693b      	ldr	r3, [r7, #16]
 802c1ba:	e0b8      	b.n	802c32e <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802c1bc:	687b      	ldr	r3, [r7, #4]
 802c1be:	3318      	adds	r3, #24
 802c1c0:	2238      	movs	r2, #56	; 0x38
 802c1c2:	2100      	movs	r1, #0
 802c1c4:	4618      	mov	r0, r3
 802c1c6:	f001 fa99 	bl	802d6fc <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802c1ca:	687b      	ldr	r3, [r7, #4]
 802c1cc:	681b      	ldr	r3, [r3, #0]
 802c1ce:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802c1d0:	687b      	ldr	r3, [r7, #4]
 802c1d2:	685b      	ldr	r3, [r3, #4]
 802c1d4:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802c1d6:	4313      	orrs	r3, r2
 802c1d8:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802c1da:	687b      	ldr	r3, [r7, #4]
 802c1dc:	681b      	ldr	r3, [r3, #0]
 802c1de:	00db      	lsls	r3, r3, #3
 802c1e0:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802c1e2:	68bb      	ldr	r3, [r7, #8]
 802c1e4:	b2da      	uxtb	r2, r3
 802c1e6:	687b      	ldr	r3, [r7, #4]
 802c1e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802c1ec:	68bb      	ldr	r3, [r7, #8]
 802c1ee:	0a1b      	lsrs	r3, r3, #8
 802c1f0:	b2da      	uxtb	r2, r3
 802c1f2:	687b      	ldr	r3, [r7, #4]
 802c1f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 802c1f8:	68bb      	ldr	r3, [r7, #8]
 802c1fa:	0c1b      	lsrs	r3, r3, #16
 802c1fc:	b2da      	uxtb	r2, r3
 802c1fe:	687b      	ldr	r3, [r7, #4]
 802c200:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 802c204:	68bb      	ldr	r3, [r7, #8]
 802c206:	0e1b      	lsrs	r3, r3, #24
 802c208:	b2da      	uxtb	r2, r3
 802c20a:	687b      	ldr	r3, [r7, #4]
 802c20c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802c210:	68fb      	ldr	r3, [r7, #12]
 802c212:	b2da      	uxtb	r2, r3
 802c214:	687b      	ldr	r3, [r7, #4]
 802c216:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 802c21a:	68fb      	ldr	r3, [r7, #12]
 802c21c:	0a1b      	lsrs	r3, r3, #8
 802c21e:	b2da      	uxtb	r2, r3
 802c220:	687b      	ldr	r3, [r7, #4]
 802c222:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 802c226:	68fb      	ldr	r3, [r7, #12]
 802c228:	0c1b      	lsrs	r3, r3, #16
 802c22a:	b2da      	uxtb	r2, r3
 802c22c:	687b      	ldr	r3, [r7, #4]
 802c22e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 802c232:	68fb      	ldr	r3, [r7, #12]
 802c234:	0e1b      	lsrs	r3, r3, #24
 802c236:	b2da      	uxtb	r2, r3
 802c238:	687b      	ldr	r3, [r7, #4]
 802c23a:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c23e:	687b      	ldr	r3, [r7, #4]
 802c240:	3318      	adds	r3, #24
 802c242:	4619      	mov	r1, r3
 802c244:	6878      	ldr	r0, [r7, #4]
 802c246:	f7ff f847 	bl	802b2d8 <mbedtls_internal_md5_process>
 802c24a:	6138      	str	r0, [r7, #16]
 802c24c:	693b      	ldr	r3, [r7, #16]
 802c24e:	2b00      	cmp	r3, #0
 802c250:	d001      	beq.n	802c256 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802c252:	693b      	ldr	r3, [r7, #16]
 802c254:	e06b      	b.n	802c32e <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802c256:	687b      	ldr	r3, [r7, #4]
 802c258:	689b      	ldr	r3, [r3, #8]
 802c25a:	b2da      	uxtb	r2, r3
 802c25c:	683b      	ldr	r3, [r7, #0]
 802c25e:	701a      	strb	r2, [r3, #0]
 802c260:	687b      	ldr	r3, [r7, #4]
 802c262:	689b      	ldr	r3, [r3, #8]
 802c264:	0a1a      	lsrs	r2, r3, #8
 802c266:	683b      	ldr	r3, [r7, #0]
 802c268:	3301      	adds	r3, #1
 802c26a:	b2d2      	uxtb	r2, r2
 802c26c:	701a      	strb	r2, [r3, #0]
 802c26e:	687b      	ldr	r3, [r7, #4]
 802c270:	689b      	ldr	r3, [r3, #8]
 802c272:	0c1a      	lsrs	r2, r3, #16
 802c274:	683b      	ldr	r3, [r7, #0]
 802c276:	3302      	adds	r3, #2
 802c278:	b2d2      	uxtb	r2, r2
 802c27a:	701a      	strb	r2, [r3, #0]
 802c27c:	687b      	ldr	r3, [r7, #4]
 802c27e:	689b      	ldr	r3, [r3, #8]
 802c280:	0e1a      	lsrs	r2, r3, #24
 802c282:	683b      	ldr	r3, [r7, #0]
 802c284:	3303      	adds	r3, #3
 802c286:	b2d2      	uxtb	r2, r2
 802c288:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802c28a:	687b      	ldr	r3, [r7, #4]
 802c28c:	68da      	ldr	r2, [r3, #12]
 802c28e:	683b      	ldr	r3, [r7, #0]
 802c290:	3304      	adds	r3, #4
 802c292:	b2d2      	uxtb	r2, r2
 802c294:	701a      	strb	r2, [r3, #0]
 802c296:	687b      	ldr	r3, [r7, #4]
 802c298:	68db      	ldr	r3, [r3, #12]
 802c29a:	0a1a      	lsrs	r2, r3, #8
 802c29c:	683b      	ldr	r3, [r7, #0]
 802c29e:	3305      	adds	r3, #5
 802c2a0:	b2d2      	uxtb	r2, r2
 802c2a2:	701a      	strb	r2, [r3, #0]
 802c2a4:	687b      	ldr	r3, [r7, #4]
 802c2a6:	68db      	ldr	r3, [r3, #12]
 802c2a8:	0c1a      	lsrs	r2, r3, #16
 802c2aa:	683b      	ldr	r3, [r7, #0]
 802c2ac:	3306      	adds	r3, #6
 802c2ae:	b2d2      	uxtb	r2, r2
 802c2b0:	701a      	strb	r2, [r3, #0]
 802c2b2:	687b      	ldr	r3, [r7, #4]
 802c2b4:	68db      	ldr	r3, [r3, #12]
 802c2b6:	0e1a      	lsrs	r2, r3, #24
 802c2b8:	683b      	ldr	r3, [r7, #0]
 802c2ba:	3307      	adds	r3, #7
 802c2bc:	b2d2      	uxtb	r2, r2
 802c2be:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802c2c0:	687b      	ldr	r3, [r7, #4]
 802c2c2:	691a      	ldr	r2, [r3, #16]
 802c2c4:	683b      	ldr	r3, [r7, #0]
 802c2c6:	3308      	adds	r3, #8
 802c2c8:	b2d2      	uxtb	r2, r2
 802c2ca:	701a      	strb	r2, [r3, #0]
 802c2cc:	687b      	ldr	r3, [r7, #4]
 802c2ce:	691b      	ldr	r3, [r3, #16]
 802c2d0:	0a1a      	lsrs	r2, r3, #8
 802c2d2:	683b      	ldr	r3, [r7, #0]
 802c2d4:	3309      	adds	r3, #9
 802c2d6:	b2d2      	uxtb	r2, r2
 802c2d8:	701a      	strb	r2, [r3, #0]
 802c2da:	687b      	ldr	r3, [r7, #4]
 802c2dc:	691b      	ldr	r3, [r3, #16]
 802c2de:	0c1a      	lsrs	r2, r3, #16
 802c2e0:	683b      	ldr	r3, [r7, #0]
 802c2e2:	330a      	adds	r3, #10
 802c2e4:	b2d2      	uxtb	r2, r2
 802c2e6:	701a      	strb	r2, [r3, #0]
 802c2e8:	687b      	ldr	r3, [r7, #4]
 802c2ea:	691b      	ldr	r3, [r3, #16]
 802c2ec:	0e1a      	lsrs	r2, r3, #24
 802c2ee:	683b      	ldr	r3, [r7, #0]
 802c2f0:	330b      	adds	r3, #11
 802c2f2:	b2d2      	uxtb	r2, r2
 802c2f4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802c2f6:	687b      	ldr	r3, [r7, #4]
 802c2f8:	695a      	ldr	r2, [r3, #20]
 802c2fa:	683b      	ldr	r3, [r7, #0]
 802c2fc:	330c      	adds	r3, #12
 802c2fe:	b2d2      	uxtb	r2, r2
 802c300:	701a      	strb	r2, [r3, #0]
 802c302:	687b      	ldr	r3, [r7, #4]
 802c304:	695b      	ldr	r3, [r3, #20]
 802c306:	0a1a      	lsrs	r2, r3, #8
 802c308:	683b      	ldr	r3, [r7, #0]
 802c30a:	330d      	adds	r3, #13
 802c30c:	b2d2      	uxtb	r2, r2
 802c30e:	701a      	strb	r2, [r3, #0]
 802c310:	687b      	ldr	r3, [r7, #4]
 802c312:	695b      	ldr	r3, [r3, #20]
 802c314:	0c1a      	lsrs	r2, r3, #16
 802c316:	683b      	ldr	r3, [r7, #0]
 802c318:	330e      	adds	r3, #14
 802c31a:	b2d2      	uxtb	r2, r2
 802c31c:	701a      	strb	r2, [r3, #0]
 802c31e:	687b      	ldr	r3, [r7, #4]
 802c320:	695b      	ldr	r3, [r3, #20]
 802c322:	0e1a      	lsrs	r2, r3, #24
 802c324:	683b      	ldr	r3, [r7, #0]
 802c326:	330f      	adds	r3, #15
 802c328:	b2d2      	uxtb	r2, r2
 802c32a:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802c32c:	2300      	movs	r3, #0
}
 802c32e:	4618      	mov	r0, r3
 802c330:	3718      	adds	r7, #24
 802c332:	46bd      	mov	sp, r7
 802c334:	bd80      	pop	{r7, pc}
	...

0802c338 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802c338:	b580      	push	{r7, lr}
 802c33a:	b082      	sub	sp, #8
 802c33c:	af00      	add	r7, sp, #0
 802c33e:	6078      	str	r0, [r7, #4]
 802c340:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802c342:	4b05      	ldr	r3, [pc, #20]	; (802c358 <mbedtls_platform_zeroize+0x20>)
 802c344:	681b      	ldr	r3, [r3, #0]
 802c346:	683a      	ldr	r2, [r7, #0]
 802c348:	2100      	movs	r1, #0
 802c34a:	6878      	ldr	r0, [r7, #4]
 802c34c:	4798      	blx	r3
}
 802c34e:	bf00      	nop
 802c350:	3708      	adds	r7, #8
 802c352:	46bd      	mov	sp, r7
 802c354:	bd80      	pop	{r7, pc}
 802c356:	bf00      	nop
 802c358:	2000012c 	.word	0x2000012c

0802c35c <__assert_func>:
 802c35c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c35e:	4614      	mov	r4, r2
 802c360:	461a      	mov	r2, r3
 802c362:	4b09      	ldr	r3, [pc, #36]	; (802c388 <__assert_func+0x2c>)
 802c364:	681b      	ldr	r3, [r3, #0]
 802c366:	4605      	mov	r5, r0
 802c368:	68d8      	ldr	r0, [r3, #12]
 802c36a:	b14c      	cbz	r4, 802c380 <__assert_func+0x24>
 802c36c:	4b07      	ldr	r3, [pc, #28]	; (802c38c <__assert_func+0x30>)
 802c36e:	9100      	str	r1, [sp, #0]
 802c370:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c374:	4906      	ldr	r1, [pc, #24]	; (802c390 <__assert_func+0x34>)
 802c376:	462b      	mov	r3, r5
 802c378:	f000 fffa 	bl	802d370 <fiprintf>
 802c37c:	f001 fba8 	bl	802dad0 <abort>
 802c380:	4b04      	ldr	r3, [pc, #16]	; (802c394 <__assert_func+0x38>)
 802c382:	461c      	mov	r4, r3
 802c384:	e7f3      	b.n	802c36e <__assert_func+0x12>
 802c386:	bf00      	nop
 802c388:	20000188 	.word	0x20000188
 802c38c:	08034850 	.word	0x08034850
 802c390:	0803485d 	.word	0x0803485d
 802c394:	0803488b 	.word	0x0803488b

0802c398 <_calloc_r>:
 802c398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c39a:	fba1 2402 	umull	r2, r4, r1, r2
 802c39e:	b94c      	cbnz	r4, 802c3b4 <_calloc_r+0x1c>
 802c3a0:	4611      	mov	r1, r2
 802c3a2:	9201      	str	r2, [sp, #4]
 802c3a4:	f000 f83e 	bl	802c424 <_malloc_r>
 802c3a8:	9a01      	ldr	r2, [sp, #4]
 802c3aa:	4605      	mov	r5, r0
 802c3ac:	b930      	cbnz	r0, 802c3bc <_calloc_r+0x24>
 802c3ae:	4628      	mov	r0, r5
 802c3b0:	b003      	add	sp, #12
 802c3b2:	bd30      	pop	{r4, r5, pc}
 802c3b4:	220c      	movs	r2, #12
 802c3b6:	6002      	str	r2, [r0, #0]
 802c3b8:	2500      	movs	r5, #0
 802c3ba:	e7f8      	b.n	802c3ae <_calloc_r+0x16>
 802c3bc:	4621      	mov	r1, r4
 802c3be:	f001 f99d 	bl	802d6fc <memset>
 802c3c2:	e7f4      	b.n	802c3ae <_calloc_r+0x16>

0802c3c4 <malloc>:
 802c3c4:	4b02      	ldr	r3, [pc, #8]	; (802c3d0 <malloc+0xc>)
 802c3c6:	4601      	mov	r1, r0
 802c3c8:	6818      	ldr	r0, [r3, #0]
 802c3ca:	f000 b82b 	b.w	802c424 <_malloc_r>
 802c3ce:	bf00      	nop
 802c3d0:	20000188 	.word	0x20000188

0802c3d4 <free>:
 802c3d4:	4b02      	ldr	r3, [pc, #8]	; (802c3e0 <free+0xc>)
 802c3d6:	4601      	mov	r1, r0
 802c3d8:	6818      	ldr	r0, [r3, #0]
 802c3da:	f002 b9fb 	b.w	802e7d4 <_free_r>
 802c3de:	bf00      	nop
 802c3e0:	20000188 	.word	0x20000188

0802c3e4 <sbrk_aligned>:
 802c3e4:	b570      	push	{r4, r5, r6, lr}
 802c3e6:	4e0e      	ldr	r6, [pc, #56]	; (802c420 <sbrk_aligned+0x3c>)
 802c3e8:	460c      	mov	r4, r1
 802c3ea:	6831      	ldr	r1, [r6, #0]
 802c3ec:	4605      	mov	r5, r0
 802c3ee:	b911      	cbnz	r1, 802c3f6 <sbrk_aligned+0x12>
 802c3f0:	f001 fb02 	bl	802d9f8 <_sbrk_r>
 802c3f4:	6030      	str	r0, [r6, #0]
 802c3f6:	4621      	mov	r1, r4
 802c3f8:	4628      	mov	r0, r5
 802c3fa:	f001 fafd 	bl	802d9f8 <_sbrk_r>
 802c3fe:	1c43      	adds	r3, r0, #1
 802c400:	d00a      	beq.n	802c418 <sbrk_aligned+0x34>
 802c402:	1cc4      	adds	r4, r0, #3
 802c404:	f024 0403 	bic.w	r4, r4, #3
 802c408:	42a0      	cmp	r0, r4
 802c40a:	d007      	beq.n	802c41c <sbrk_aligned+0x38>
 802c40c:	1a21      	subs	r1, r4, r0
 802c40e:	4628      	mov	r0, r5
 802c410:	f001 faf2 	bl	802d9f8 <_sbrk_r>
 802c414:	3001      	adds	r0, #1
 802c416:	d101      	bne.n	802c41c <sbrk_aligned+0x38>
 802c418:	f04f 34ff 	mov.w	r4, #4294967295
 802c41c:	4620      	mov	r0, r4
 802c41e:	bd70      	pop	{r4, r5, r6, pc}
 802c420:	2000d9ac 	.word	0x2000d9ac

0802c424 <_malloc_r>:
 802c424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c428:	1ccd      	adds	r5, r1, #3
 802c42a:	f025 0503 	bic.w	r5, r5, #3
 802c42e:	3508      	adds	r5, #8
 802c430:	2d0c      	cmp	r5, #12
 802c432:	bf38      	it	cc
 802c434:	250c      	movcc	r5, #12
 802c436:	2d00      	cmp	r5, #0
 802c438:	4607      	mov	r7, r0
 802c43a:	db01      	blt.n	802c440 <_malloc_r+0x1c>
 802c43c:	42a9      	cmp	r1, r5
 802c43e:	d905      	bls.n	802c44c <_malloc_r+0x28>
 802c440:	230c      	movs	r3, #12
 802c442:	603b      	str	r3, [r7, #0]
 802c444:	2600      	movs	r6, #0
 802c446:	4630      	mov	r0, r6
 802c448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c44c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c520 <_malloc_r+0xfc>
 802c450:	f000 f868 	bl	802c524 <__malloc_lock>
 802c454:	f8d8 3000 	ldr.w	r3, [r8]
 802c458:	461c      	mov	r4, r3
 802c45a:	bb5c      	cbnz	r4, 802c4b4 <_malloc_r+0x90>
 802c45c:	4629      	mov	r1, r5
 802c45e:	4638      	mov	r0, r7
 802c460:	f7ff ffc0 	bl	802c3e4 <sbrk_aligned>
 802c464:	1c43      	adds	r3, r0, #1
 802c466:	4604      	mov	r4, r0
 802c468:	d155      	bne.n	802c516 <_malloc_r+0xf2>
 802c46a:	f8d8 4000 	ldr.w	r4, [r8]
 802c46e:	4626      	mov	r6, r4
 802c470:	2e00      	cmp	r6, #0
 802c472:	d145      	bne.n	802c500 <_malloc_r+0xdc>
 802c474:	2c00      	cmp	r4, #0
 802c476:	d048      	beq.n	802c50a <_malloc_r+0xe6>
 802c478:	6823      	ldr	r3, [r4, #0]
 802c47a:	4631      	mov	r1, r6
 802c47c:	4638      	mov	r0, r7
 802c47e:	eb04 0903 	add.w	r9, r4, r3
 802c482:	f001 fab9 	bl	802d9f8 <_sbrk_r>
 802c486:	4581      	cmp	r9, r0
 802c488:	d13f      	bne.n	802c50a <_malloc_r+0xe6>
 802c48a:	6821      	ldr	r1, [r4, #0]
 802c48c:	1a6d      	subs	r5, r5, r1
 802c48e:	4629      	mov	r1, r5
 802c490:	4638      	mov	r0, r7
 802c492:	f7ff ffa7 	bl	802c3e4 <sbrk_aligned>
 802c496:	3001      	adds	r0, #1
 802c498:	d037      	beq.n	802c50a <_malloc_r+0xe6>
 802c49a:	6823      	ldr	r3, [r4, #0]
 802c49c:	442b      	add	r3, r5
 802c49e:	6023      	str	r3, [r4, #0]
 802c4a0:	f8d8 3000 	ldr.w	r3, [r8]
 802c4a4:	2b00      	cmp	r3, #0
 802c4a6:	d038      	beq.n	802c51a <_malloc_r+0xf6>
 802c4a8:	685a      	ldr	r2, [r3, #4]
 802c4aa:	42a2      	cmp	r2, r4
 802c4ac:	d12b      	bne.n	802c506 <_malloc_r+0xe2>
 802c4ae:	2200      	movs	r2, #0
 802c4b0:	605a      	str	r2, [r3, #4]
 802c4b2:	e00f      	b.n	802c4d4 <_malloc_r+0xb0>
 802c4b4:	6822      	ldr	r2, [r4, #0]
 802c4b6:	1b52      	subs	r2, r2, r5
 802c4b8:	d41f      	bmi.n	802c4fa <_malloc_r+0xd6>
 802c4ba:	2a0b      	cmp	r2, #11
 802c4bc:	d917      	bls.n	802c4ee <_malloc_r+0xca>
 802c4be:	1961      	adds	r1, r4, r5
 802c4c0:	42a3      	cmp	r3, r4
 802c4c2:	6025      	str	r5, [r4, #0]
 802c4c4:	bf18      	it	ne
 802c4c6:	6059      	strne	r1, [r3, #4]
 802c4c8:	6863      	ldr	r3, [r4, #4]
 802c4ca:	bf08      	it	eq
 802c4cc:	f8c8 1000 	streq.w	r1, [r8]
 802c4d0:	5162      	str	r2, [r4, r5]
 802c4d2:	604b      	str	r3, [r1, #4]
 802c4d4:	4638      	mov	r0, r7
 802c4d6:	f104 060b 	add.w	r6, r4, #11
 802c4da:	f000 f829 	bl	802c530 <__malloc_unlock>
 802c4de:	f026 0607 	bic.w	r6, r6, #7
 802c4e2:	1d23      	adds	r3, r4, #4
 802c4e4:	1af2      	subs	r2, r6, r3
 802c4e6:	d0ae      	beq.n	802c446 <_malloc_r+0x22>
 802c4e8:	1b9b      	subs	r3, r3, r6
 802c4ea:	50a3      	str	r3, [r4, r2]
 802c4ec:	e7ab      	b.n	802c446 <_malloc_r+0x22>
 802c4ee:	42a3      	cmp	r3, r4
 802c4f0:	6862      	ldr	r2, [r4, #4]
 802c4f2:	d1dd      	bne.n	802c4b0 <_malloc_r+0x8c>
 802c4f4:	f8c8 2000 	str.w	r2, [r8]
 802c4f8:	e7ec      	b.n	802c4d4 <_malloc_r+0xb0>
 802c4fa:	4623      	mov	r3, r4
 802c4fc:	6864      	ldr	r4, [r4, #4]
 802c4fe:	e7ac      	b.n	802c45a <_malloc_r+0x36>
 802c500:	4634      	mov	r4, r6
 802c502:	6876      	ldr	r6, [r6, #4]
 802c504:	e7b4      	b.n	802c470 <_malloc_r+0x4c>
 802c506:	4613      	mov	r3, r2
 802c508:	e7cc      	b.n	802c4a4 <_malloc_r+0x80>
 802c50a:	230c      	movs	r3, #12
 802c50c:	603b      	str	r3, [r7, #0]
 802c50e:	4638      	mov	r0, r7
 802c510:	f000 f80e 	bl	802c530 <__malloc_unlock>
 802c514:	e797      	b.n	802c446 <_malloc_r+0x22>
 802c516:	6025      	str	r5, [r4, #0]
 802c518:	e7dc      	b.n	802c4d4 <_malloc_r+0xb0>
 802c51a:	605b      	str	r3, [r3, #4]
 802c51c:	deff      	udf	#255	; 0xff
 802c51e:	bf00      	nop
 802c520:	2000d9a8 	.word	0x2000d9a8

0802c524 <__malloc_lock>:
 802c524:	4801      	ldr	r0, [pc, #4]	; (802c52c <__malloc_lock+0x8>)
 802c526:	f001 bab4 	b.w	802da92 <__retarget_lock_acquire_recursive>
 802c52a:	bf00      	nop
 802c52c:	2000daf0 	.word	0x2000daf0

0802c530 <__malloc_unlock>:
 802c530:	4801      	ldr	r0, [pc, #4]	; (802c538 <__malloc_unlock+0x8>)
 802c532:	f001 baaf 	b.w	802da94 <__retarget_lock_release_recursive>
 802c536:	bf00      	nop
 802c538:	2000daf0 	.word	0x2000daf0

0802c53c <__cvt>:
 802c53c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c540:	ec55 4b10 	vmov	r4, r5, d0
 802c544:	2d00      	cmp	r5, #0
 802c546:	460e      	mov	r6, r1
 802c548:	4619      	mov	r1, r3
 802c54a:	462b      	mov	r3, r5
 802c54c:	bfbb      	ittet	lt
 802c54e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802c552:	461d      	movlt	r5, r3
 802c554:	2300      	movge	r3, #0
 802c556:	232d      	movlt	r3, #45	; 0x2d
 802c558:	700b      	strb	r3, [r1, #0]
 802c55a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c55c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802c560:	4691      	mov	r9, r2
 802c562:	f023 0820 	bic.w	r8, r3, #32
 802c566:	bfbc      	itt	lt
 802c568:	4622      	movlt	r2, r4
 802c56a:	4614      	movlt	r4, r2
 802c56c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c570:	d005      	beq.n	802c57e <__cvt+0x42>
 802c572:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802c576:	d100      	bne.n	802c57a <__cvt+0x3e>
 802c578:	3601      	adds	r6, #1
 802c57a:	2102      	movs	r1, #2
 802c57c:	e000      	b.n	802c580 <__cvt+0x44>
 802c57e:	2103      	movs	r1, #3
 802c580:	ab03      	add	r3, sp, #12
 802c582:	9301      	str	r3, [sp, #4]
 802c584:	ab02      	add	r3, sp, #8
 802c586:	9300      	str	r3, [sp, #0]
 802c588:	ec45 4b10 	vmov	d0, r4, r5
 802c58c:	4653      	mov	r3, sl
 802c58e:	4632      	mov	r2, r6
 802c590:	f001 fb2e 	bl	802dbf0 <_dtoa_r>
 802c594:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802c598:	4607      	mov	r7, r0
 802c59a:	d102      	bne.n	802c5a2 <__cvt+0x66>
 802c59c:	f019 0f01 	tst.w	r9, #1
 802c5a0:	d022      	beq.n	802c5e8 <__cvt+0xac>
 802c5a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c5a6:	eb07 0906 	add.w	r9, r7, r6
 802c5aa:	d110      	bne.n	802c5ce <__cvt+0x92>
 802c5ac:	783b      	ldrb	r3, [r7, #0]
 802c5ae:	2b30      	cmp	r3, #48	; 0x30
 802c5b0:	d10a      	bne.n	802c5c8 <__cvt+0x8c>
 802c5b2:	2200      	movs	r2, #0
 802c5b4:	2300      	movs	r3, #0
 802c5b6:	4620      	mov	r0, r4
 802c5b8:	4629      	mov	r1, r5
 802c5ba:	f7e4 fa9d 	bl	8010af8 <__aeabi_dcmpeq>
 802c5be:	b918      	cbnz	r0, 802c5c8 <__cvt+0x8c>
 802c5c0:	f1c6 0601 	rsb	r6, r6, #1
 802c5c4:	f8ca 6000 	str.w	r6, [sl]
 802c5c8:	f8da 3000 	ldr.w	r3, [sl]
 802c5cc:	4499      	add	r9, r3
 802c5ce:	2200      	movs	r2, #0
 802c5d0:	2300      	movs	r3, #0
 802c5d2:	4620      	mov	r0, r4
 802c5d4:	4629      	mov	r1, r5
 802c5d6:	f7e4 fa8f 	bl	8010af8 <__aeabi_dcmpeq>
 802c5da:	b108      	cbz	r0, 802c5e0 <__cvt+0xa4>
 802c5dc:	f8cd 900c 	str.w	r9, [sp, #12]
 802c5e0:	2230      	movs	r2, #48	; 0x30
 802c5e2:	9b03      	ldr	r3, [sp, #12]
 802c5e4:	454b      	cmp	r3, r9
 802c5e6:	d307      	bcc.n	802c5f8 <__cvt+0xbc>
 802c5e8:	9b03      	ldr	r3, [sp, #12]
 802c5ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c5ec:	1bdb      	subs	r3, r3, r7
 802c5ee:	4638      	mov	r0, r7
 802c5f0:	6013      	str	r3, [r2, #0]
 802c5f2:	b004      	add	sp, #16
 802c5f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c5f8:	1c59      	adds	r1, r3, #1
 802c5fa:	9103      	str	r1, [sp, #12]
 802c5fc:	701a      	strb	r2, [r3, #0]
 802c5fe:	e7f0      	b.n	802c5e2 <__cvt+0xa6>

0802c600 <__exponent>:
 802c600:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c602:	4603      	mov	r3, r0
 802c604:	2900      	cmp	r1, #0
 802c606:	bfb8      	it	lt
 802c608:	4249      	neglt	r1, r1
 802c60a:	f803 2b02 	strb.w	r2, [r3], #2
 802c60e:	bfb4      	ite	lt
 802c610:	222d      	movlt	r2, #45	; 0x2d
 802c612:	222b      	movge	r2, #43	; 0x2b
 802c614:	2909      	cmp	r1, #9
 802c616:	7042      	strb	r2, [r0, #1]
 802c618:	dd2a      	ble.n	802c670 <__exponent+0x70>
 802c61a:	f10d 0207 	add.w	r2, sp, #7
 802c61e:	4617      	mov	r7, r2
 802c620:	260a      	movs	r6, #10
 802c622:	4694      	mov	ip, r2
 802c624:	fb91 f5f6 	sdiv	r5, r1, r6
 802c628:	fb06 1415 	mls	r4, r6, r5, r1
 802c62c:	3430      	adds	r4, #48	; 0x30
 802c62e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802c632:	460c      	mov	r4, r1
 802c634:	2c63      	cmp	r4, #99	; 0x63
 802c636:	f102 32ff 	add.w	r2, r2, #4294967295
 802c63a:	4629      	mov	r1, r5
 802c63c:	dcf1      	bgt.n	802c622 <__exponent+0x22>
 802c63e:	3130      	adds	r1, #48	; 0x30
 802c640:	f1ac 0402 	sub.w	r4, ip, #2
 802c644:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c648:	1c41      	adds	r1, r0, #1
 802c64a:	4622      	mov	r2, r4
 802c64c:	42ba      	cmp	r2, r7
 802c64e:	d30a      	bcc.n	802c666 <__exponent+0x66>
 802c650:	f10d 0209 	add.w	r2, sp, #9
 802c654:	eba2 020c 	sub.w	r2, r2, ip
 802c658:	42bc      	cmp	r4, r7
 802c65a:	bf88      	it	hi
 802c65c:	2200      	movhi	r2, #0
 802c65e:	4413      	add	r3, r2
 802c660:	1a18      	subs	r0, r3, r0
 802c662:	b003      	add	sp, #12
 802c664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802c666:	f812 5b01 	ldrb.w	r5, [r2], #1
 802c66a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802c66e:	e7ed      	b.n	802c64c <__exponent+0x4c>
 802c670:	2330      	movs	r3, #48	; 0x30
 802c672:	3130      	adds	r1, #48	; 0x30
 802c674:	7083      	strb	r3, [r0, #2]
 802c676:	70c1      	strb	r1, [r0, #3]
 802c678:	1d03      	adds	r3, r0, #4
 802c67a:	e7f1      	b.n	802c660 <__exponent+0x60>

0802c67c <_printf_float>:
 802c67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c680:	ed2d 8b02 	vpush	{d8}
 802c684:	b08d      	sub	sp, #52	; 0x34
 802c686:	460c      	mov	r4, r1
 802c688:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802c68c:	4616      	mov	r6, r2
 802c68e:	461f      	mov	r7, r3
 802c690:	4605      	mov	r5, r0
 802c692:	f001 f923 	bl	802d8dc <_localeconv_r>
 802c696:	f8d0 a000 	ldr.w	sl, [r0]
 802c69a:	4650      	mov	r0, sl
 802c69c:	f7e3 fe00 	bl	80102a0 <strlen>
 802c6a0:	2300      	movs	r3, #0
 802c6a2:	930a      	str	r3, [sp, #40]	; 0x28
 802c6a4:	6823      	ldr	r3, [r4, #0]
 802c6a6:	9305      	str	r3, [sp, #20]
 802c6a8:	f8d8 3000 	ldr.w	r3, [r8]
 802c6ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 802c6b0:	3307      	adds	r3, #7
 802c6b2:	f023 0307 	bic.w	r3, r3, #7
 802c6b6:	f103 0208 	add.w	r2, r3, #8
 802c6ba:	f8c8 2000 	str.w	r2, [r8]
 802c6be:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c6c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802c6c6:	9307      	str	r3, [sp, #28]
 802c6c8:	f8cd 8018 	str.w	r8, [sp, #24]
 802c6cc:	ee08 0a10 	vmov	s16, r0
 802c6d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802c6d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c6d8:	4b9e      	ldr	r3, [pc, #632]	; (802c954 <_printf_float+0x2d8>)
 802c6da:	f04f 32ff 	mov.w	r2, #4294967295
 802c6de:	f7e4 fa3d 	bl	8010b5c <__aeabi_dcmpun>
 802c6e2:	bb88      	cbnz	r0, 802c748 <_printf_float+0xcc>
 802c6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802c6e8:	4b9a      	ldr	r3, [pc, #616]	; (802c954 <_printf_float+0x2d8>)
 802c6ea:	f04f 32ff 	mov.w	r2, #4294967295
 802c6ee:	f7e4 fa17 	bl	8010b20 <__aeabi_dcmple>
 802c6f2:	bb48      	cbnz	r0, 802c748 <_printf_float+0xcc>
 802c6f4:	2200      	movs	r2, #0
 802c6f6:	2300      	movs	r3, #0
 802c6f8:	4640      	mov	r0, r8
 802c6fa:	4649      	mov	r1, r9
 802c6fc:	f7e4 fa06 	bl	8010b0c <__aeabi_dcmplt>
 802c700:	b110      	cbz	r0, 802c708 <_printf_float+0x8c>
 802c702:	232d      	movs	r3, #45	; 0x2d
 802c704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c708:	4a93      	ldr	r2, [pc, #588]	; (802c958 <_printf_float+0x2dc>)
 802c70a:	4b94      	ldr	r3, [pc, #592]	; (802c95c <_printf_float+0x2e0>)
 802c70c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802c710:	bf94      	ite	ls
 802c712:	4690      	movls	r8, r2
 802c714:	4698      	movhi	r8, r3
 802c716:	2303      	movs	r3, #3
 802c718:	6123      	str	r3, [r4, #16]
 802c71a:	9b05      	ldr	r3, [sp, #20]
 802c71c:	f023 0304 	bic.w	r3, r3, #4
 802c720:	6023      	str	r3, [r4, #0]
 802c722:	f04f 0900 	mov.w	r9, #0
 802c726:	9700      	str	r7, [sp, #0]
 802c728:	4633      	mov	r3, r6
 802c72a:	aa0b      	add	r2, sp, #44	; 0x2c
 802c72c:	4621      	mov	r1, r4
 802c72e:	4628      	mov	r0, r5
 802c730:	f000 f9da 	bl	802cae8 <_printf_common>
 802c734:	3001      	adds	r0, #1
 802c736:	f040 8090 	bne.w	802c85a <_printf_float+0x1de>
 802c73a:	f04f 30ff 	mov.w	r0, #4294967295
 802c73e:	b00d      	add	sp, #52	; 0x34
 802c740:	ecbd 8b02 	vpop	{d8}
 802c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c748:	4642      	mov	r2, r8
 802c74a:	464b      	mov	r3, r9
 802c74c:	4640      	mov	r0, r8
 802c74e:	4649      	mov	r1, r9
 802c750:	f7e4 fa04 	bl	8010b5c <__aeabi_dcmpun>
 802c754:	b140      	cbz	r0, 802c768 <_printf_float+0xec>
 802c756:	464b      	mov	r3, r9
 802c758:	2b00      	cmp	r3, #0
 802c75a:	bfbc      	itt	lt
 802c75c:	232d      	movlt	r3, #45	; 0x2d
 802c75e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802c762:	4a7f      	ldr	r2, [pc, #508]	; (802c960 <_printf_float+0x2e4>)
 802c764:	4b7f      	ldr	r3, [pc, #508]	; (802c964 <_printf_float+0x2e8>)
 802c766:	e7d1      	b.n	802c70c <_printf_float+0x90>
 802c768:	6863      	ldr	r3, [r4, #4]
 802c76a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802c76e:	9206      	str	r2, [sp, #24]
 802c770:	1c5a      	adds	r2, r3, #1
 802c772:	d13f      	bne.n	802c7f4 <_printf_float+0x178>
 802c774:	2306      	movs	r3, #6
 802c776:	6063      	str	r3, [r4, #4]
 802c778:	9b05      	ldr	r3, [sp, #20]
 802c77a:	6861      	ldr	r1, [r4, #4]
 802c77c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802c780:	2300      	movs	r3, #0
 802c782:	9303      	str	r3, [sp, #12]
 802c784:	ab0a      	add	r3, sp, #40	; 0x28
 802c786:	e9cd b301 	strd	fp, r3, [sp, #4]
 802c78a:	ab09      	add	r3, sp, #36	; 0x24
 802c78c:	ec49 8b10 	vmov	d0, r8, r9
 802c790:	9300      	str	r3, [sp, #0]
 802c792:	6022      	str	r2, [r4, #0]
 802c794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802c798:	4628      	mov	r0, r5
 802c79a:	f7ff fecf 	bl	802c53c <__cvt>
 802c79e:	9b06      	ldr	r3, [sp, #24]
 802c7a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 802c7a2:	2b47      	cmp	r3, #71	; 0x47
 802c7a4:	4680      	mov	r8, r0
 802c7a6:	d108      	bne.n	802c7ba <_printf_float+0x13e>
 802c7a8:	1cc8      	adds	r0, r1, #3
 802c7aa:	db02      	blt.n	802c7b2 <_printf_float+0x136>
 802c7ac:	6863      	ldr	r3, [r4, #4]
 802c7ae:	4299      	cmp	r1, r3
 802c7b0:	dd41      	ble.n	802c836 <_printf_float+0x1ba>
 802c7b2:	f1ab 0302 	sub.w	r3, fp, #2
 802c7b6:	fa5f fb83 	uxtb.w	fp, r3
 802c7ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c7be:	d820      	bhi.n	802c802 <_printf_float+0x186>
 802c7c0:	3901      	subs	r1, #1
 802c7c2:	465a      	mov	r2, fp
 802c7c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802c7c8:	9109      	str	r1, [sp, #36]	; 0x24
 802c7ca:	f7ff ff19 	bl	802c600 <__exponent>
 802c7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c7d0:	1813      	adds	r3, r2, r0
 802c7d2:	2a01      	cmp	r2, #1
 802c7d4:	4681      	mov	r9, r0
 802c7d6:	6123      	str	r3, [r4, #16]
 802c7d8:	dc02      	bgt.n	802c7e0 <_printf_float+0x164>
 802c7da:	6822      	ldr	r2, [r4, #0]
 802c7dc:	07d2      	lsls	r2, r2, #31
 802c7de:	d501      	bpl.n	802c7e4 <_printf_float+0x168>
 802c7e0:	3301      	adds	r3, #1
 802c7e2:	6123      	str	r3, [r4, #16]
 802c7e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802c7e8:	2b00      	cmp	r3, #0
 802c7ea:	d09c      	beq.n	802c726 <_printf_float+0xaa>
 802c7ec:	232d      	movs	r3, #45	; 0x2d
 802c7ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802c7f2:	e798      	b.n	802c726 <_printf_float+0xaa>
 802c7f4:	9a06      	ldr	r2, [sp, #24]
 802c7f6:	2a47      	cmp	r2, #71	; 0x47
 802c7f8:	d1be      	bne.n	802c778 <_printf_float+0xfc>
 802c7fa:	2b00      	cmp	r3, #0
 802c7fc:	d1bc      	bne.n	802c778 <_printf_float+0xfc>
 802c7fe:	2301      	movs	r3, #1
 802c800:	e7b9      	b.n	802c776 <_printf_float+0xfa>
 802c802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802c806:	d118      	bne.n	802c83a <_printf_float+0x1be>
 802c808:	2900      	cmp	r1, #0
 802c80a:	6863      	ldr	r3, [r4, #4]
 802c80c:	dd0b      	ble.n	802c826 <_printf_float+0x1aa>
 802c80e:	6121      	str	r1, [r4, #16]
 802c810:	b913      	cbnz	r3, 802c818 <_printf_float+0x19c>
 802c812:	6822      	ldr	r2, [r4, #0]
 802c814:	07d0      	lsls	r0, r2, #31
 802c816:	d502      	bpl.n	802c81e <_printf_float+0x1a2>
 802c818:	3301      	adds	r3, #1
 802c81a:	440b      	add	r3, r1
 802c81c:	6123      	str	r3, [r4, #16]
 802c81e:	65a1      	str	r1, [r4, #88]	; 0x58
 802c820:	f04f 0900 	mov.w	r9, #0
 802c824:	e7de      	b.n	802c7e4 <_printf_float+0x168>
 802c826:	b913      	cbnz	r3, 802c82e <_printf_float+0x1b2>
 802c828:	6822      	ldr	r2, [r4, #0]
 802c82a:	07d2      	lsls	r2, r2, #31
 802c82c:	d501      	bpl.n	802c832 <_printf_float+0x1b6>
 802c82e:	3302      	adds	r3, #2
 802c830:	e7f4      	b.n	802c81c <_printf_float+0x1a0>
 802c832:	2301      	movs	r3, #1
 802c834:	e7f2      	b.n	802c81c <_printf_float+0x1a0>
 802c836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802c83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c83c:	4299      	cmp	r1, r3
 802c83e:	db05      	blt.n	802c84c <_printf_float+0x1d0>
 802c840:	6823      	ldr	r3, [r4, #0]
 802c842:	6121      	str	r1, [r4, #16]
 802c844:	07d8      	lsls	r0, r3, #31
 802c846:	d5ea      	bpl.n	802c81e <_printf_float+0x1a2>
 802c848:	1c4b      	adds	r3, r1, #1
 802c84a:	e7e7      	b.n	802c81c <_printf_float+0x1a0>
 802c84c:	2900      	cmp	r1, #0
 802c84e:	bfd4      	ite	le
 802c850:	f1c1 0202 	rsble	r2, r1, #2
 802c854:	2201      	movgt	r2, #1
 802c856:	4413      	add	r3, r2
 802c858:	e7e0      	b.n	802c81c <_printf_float+0x1a0>
 802c85a:	6823      	ldr	r3, [r4, #0]
 802c85c:	055a      	lsls	r2, r3, #21
 802c85e:	d407      	bmi.n	802c870 <_printf_float+0x1f4>
 802c860:	6923      	ldr	r3, [r4, #16]
 802c862:	4642      	mov	r2, r8
 802c864:	4631      	mov	r1, r6
 802c866:	4628      	mov	r0, r5
 802c868:	47b8      	blx	r7
 802c86a:	3001      	adds	r0, #1
 802c86c:	d12c      	bne.n	802c8c8 <_printf_float+0x24c>
 802c86e:	e764      	b.n	802c73a <_printf_float+0xbe>
 802c870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802c874:	f240 80e0 	bls.w	802ca38 <_printf_float+0x3bc>
 802c878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802c87c:	2200      	movs	r2, #0
 802c87e:	2300      	movs	r3, #0
 802c880:	f7e4 f93a 	bl	8010af8 <__aeabi_dcmpeq>
 802c884:	2800      	cmp	r0, #0
 802c886:	d034      	beq.n	802c8f2 <_printf_float+0x276>
 802c888:	4a37      	ldr	r2, [pc, #220]	; (802c968 <_printf_float+0x2ec>)
 802c88a:	2301      	movs	r3, #1
 802c88c:	4631      	mov	r1, r6
 802c88e:	4628      	mov	r0, r5
 802c890:	47b8      	blx	r7
 802c892:	3001      	adds	r0, #1
 802c894:	f43f af51 	beq.w	802c73a <_printf_float+0xbe>
 802c898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c89c:	429a      	cmp	r2, r3
 802c89e:	db02      	blt.n	802c8a6 <_printf_float+0x22a>
 802c8a0:	6823      	ldr	r3, [r4, #0]
 802c8a2:	07d8      	lsls	r0, r3, #31
 802c8a4:	d510      	bpl.n	802c8c8 <_printf_float+0x24c>
 802c8a6:	ee18 3a10 	vmov	r3, s16
 802c8aa:	4652      	mov	r2, sl
 802c8ac:	4631      	mov	r1, r6
 802c8ae:	4628      	mov	r0, r5
 802c8b0:	47b8      	blx	r7
 802c8b2:	3001      	adds	r0, #1
 802c8b4:	f43f af41 	beq.w	802c73a <_printf_float+0xbe>
 802c8b8:	f04f 0800 	mov.w	r8, #0
 802c8bc:	f104 091a 	add.w	r9, r4, #26
 802c8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c8c2:	3b01      	subs	r3, #1
 802c8c4:	4543      	cmp	r3, r8
 802c8c6:	dc09      	bgt.n	802c8dc <_printf_float+0x260>
 802c8c8:	6823      	ldr	r3, [r4, #0]
 802c8ca:	079b      	lsls	r3, r3, #30
 802c8cc:	f100 8107 	bmi.w	802cade <_printf_float+0x462>
 802c8d0:	68e0      	ldr	r0, [r4, #12]
 802c8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c8d4:	4298      	cmp	r0, r3
 802c8d6:	bfb8      	it	lt
 802c8d8:	4618      	movlt	r0, r3
 802c8da:	e730      	b.n	802c73e <_printf_float+0xc2>
 802c8dc:	2301      	movs	r3, #1
 802c8de:	464a      	mov	r2, r9
 802c8e0:	4631      	mov	r1, r6
 802c8e2:	4628      	mov	r0, r5
 802c8e4:	47b8      	blx	r7
 802c8e6:	3001      	adds	r0, #1
 802c8e8:	f43f af27 	beq.w	802c73a <_printf_float+0xbe>
 802c8ec:	f108 0801 	add.w	r8, r8, #1
 802c8f0:	e7e6      	b.n	802c8c0 <_printf_float+0x244>
 802c8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c8f4:	2b00      	cmp	r3, #0
 802c8f6:	dc39      	bgt.n	802c96c <_printf_float+0x2f0>
 802c8f8:	4a1b      	ldr	r2, [pc, #108]	; (802c968 <_printf_float+0x2ec>)
 802c8fa:	2301      	movs	r3, #1
 802c8fc:	4631      	mov	r1, r6
 802c8fe:	4628      	mov	r0, r5
 802c900:	47b8      	blx	r7
 802c902:	3001      	adds	r0, #1
 802c904:	f43f af19 	beq.w	802c73a <_printf_float+0xbe>
 802c908:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802c90c:	4313      	orrs	r3, r2
 802c90e:	d102      	bne.n	802c916 <_printf_float+0x29a>
 802c910:	6823      	ldr	r3, [r4, #0]
 802c912:	07d9      	lsls	r1, r3, #31
 802c914:	d5d8      	bpl.n	802c8c8 <_printf_float+0x24c>
 802c916:	ee18 3a10 	vmov	r3, s16
 802c91a:	4652      	mov	r2, sl
 802c91c:	4631      	mov	r1, r6
 802c91e:	4628      	mov	r0, r5
 802c920:	47b8      	blx	r7
 802c922:	3001      	adds	r0, #1
 802c924:	f43f af09 	beq.w	802c73a <_printf_float+0xbe>
 802c928:	f04f 0900 	mov.w	r9, #0
 802c92c:	f104 0a1a 	add.w	sl, r4, #26
 802c930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c932:	425b      	negs	r3, r3
 802c934:	454b      	cmp	r3, r9
 802c936:	dc01      	bgt.n	802c93c <_printf_float+0x2c0>
 802c938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c93a:	e792      	b.n	802c862 <_printf_float+0x1e6>
 802c93c:	2301      	movs	r3, #1
 802c93e:	4652      	mov	r2, sl
 802c940:	4631      	mov	r1, r6
 802c942:	4628      	mov	r0, r5
 802c944:	47b8      	blx	r7
 802c946:	3001      	adds	r0, #1
 802c948:	f43f aef7 	beq.w	802c73a <_printf_float+0xbe>
 802c94c:	f109 0901 	add.w	r9, r9, #1
 802c950:	e7ee      	b.n	802c930 <_printf_float+0x2b4>
 802c952:	bf00      	nop
 802c954:	7fefffff 	.word	0x7fefffff
 802c958:	0803488c 	.word	0x0803488c
 802c95c:	08034890 	.word	0x08034890
 802c960:	08034894 	.word	0x08034894
 802c964:	08034898 	.word	0x08034898
 802c968:	08034c80 	.word	0x08034c80
 802c96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802c96e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c970:	429a      	cmp	r2, r3
 802c972:	bfa8      	it	ge
 802c974:	461a      	movge	r2, r3
 802c976:	2a00      	cmp	r2, #0
 802c978:	4691      	mov	r9, r2
 802c97a:	dc37      	bgt.n	802c9ec <_printf_float+0x370>
 802c97c:	f04f 0b00 	mov.w	fp, #0
 802c980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802c984:	f104 021a 	add.w	r2, r4, #26
 802c988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802c98a:	9305      	str	r3, [sp, #20]
 802c98c:	eba3 0309 	sub.w	r3, r3, r9
 802c990:	455b      	cmp	r3, fp
 802c992:	dc33      	bgt.n	802c9fc <_printf_float+0x380>
 802c994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c998:	429a      	cmp	r2, r3
 802c99a:	db3b      	blt.n	802ca14 <_printf_float+0x398>
 802c99c:	6823      	ldr	r3, [r4, #0]
 802c99e:	07da      	lsls	r2, r3, #31
 802c9a0:	d438      	bmi.n	802ca14 <_printf_float+0x398>
 802c9a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802c9a6:	eba2 0903 	sub.w	r9, r2, r3
 802c9aa:	9b05      	ldr	r3, [sp, #20]
 802c9ac:	1ad2      	subs	r2, r2, r3
 802c9ae:	4591      	cmp	r9, r2
 802c9b0:	bfa8      	it	ge
 802c9b2:	4691      	movge	r9, r2
 802c9b4:	f1b9 0f00 	cmp.w	r9, #0
 802c9b8:	dc35      	bgt.n	802ca26 <_printf_float+0x3aa>
 802c9ba:	f04f 0800 	mov.w	r8, #0
 802c9be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802c9c2:	f104 0a1a 	add.w	sl, r4, #26
 802c9c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802c9ca:	1a9b      	subs	r3, r3, r2
 802c9cc:	eba3 0309 	sub.w	r3, r3, r9
 802c9d0:	4543      	cmp	r3, r8
 802c9d2:	f77f af79 	ble.w	802c8c8 <_printf_float+0x24c>
 802c9d6:	2301      	movs	r3, #1
 802c9d8:	4652      	mov	r2, sl
 802c9da:	4631      	mov	r1, r6
 802c9dc:	4628      	mov	r0, r5
 802c9de:	47b8      	blx	r7
 802c9e0:	3001      	adds	r0, #1
 802c9e2:	f43f aeaa 	beq.w	802c73a <_printf_float+0xbe>
 802c9e6:	f108 0801 	add.w	r8, r8, #1
 802c9ea:	e7ec      	b.n	802c9c6 <_printf_float+0x34a>
 802c9ec:	4613      	mov	r3, r2
 802c9ee:	4631      	mov	r1, r6
 802c9f0:	4642      	mov	r2, r8
 802c9f2:	4628      	mov	r0, r5
 802c9f4:	47b8      	blx	r7
 802c9f6:	3001      	adds	r0, #1
 802c9f8:	d1c0      	bne.n	802c97c <_printf_float+0x300>
 802c9fa:	e69e      	b.n	802c73a <_printf_float+0xbe>
 802c9fc:	2301      	movs	r3, #1
 802c9fe:	4631      	mov	r1, r6
 802ca00:	4628      	mov	r0, r5
 802ca02:	9205      	str	r2, [sp, #20]
 802ca04:	47b8      	blx	r7
 802ca06:	3001      	adds	r0, #1
 802ca08:	f43f ae97 	beq.w	802c73a <_printf_float+0xbe>
 802ca0c:	9a05      	ldr	r2, [sp, #20]
 802ca0e:	f10b 0b01 	add.w	fp, fp, #1
 802ca12:	e7b9      	b.n	802c988 <_printf_float+0x30c>
 802ca14:	ee18 3a10 	vmov	r3, s16
 802ca18:	4652      	mov	r2, sl
 802ca1a:	4631      	mov	r1, r6
 802ca1c:	4628      	mov	r0, r5
 802ca1e:	47b8      	blx	r7
 802ca20:	3001      	adds	r0, #1
 802ca22:	d1be      	bne.n	802c9a2 <_printf_float+0x326>
 802ca24:	e689      	b.n	802c73a <_printf_float+0xbe>
 802ca26:	9a05      	ldr	r2, [sp, #20]
 802ca28:	464b      	mov	r3, r9
 802ca2a:	4442      	add	r2, r8
 802ca2c:	4631      	mov	r1, r6
 802ca2e:	4628      	mov	r0, r5
 802ca30:	47b8      	blx	r7
 802ca32:	3001      	adds	r0, #1
 802ca34:	d1c1      	bne.n	802c9ba <_printf_float+0x33e>
 802ca36:	e680      	b.n	802c73a <_printf_float+0xbe>
 802ca38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802ca3a:	2a01      	cmp	r2, #1
 802ca3c:	dc01      	bgt.n	802ca42 <_printf_float+0x3c6>
 802ca3e:	07db      	lsls	r3, r3, #31
 802ca40:	d53a      	bpl.n	802cab8 <_printf_float+0x43c>
 802ca42:	2301      	movs	r3, #1
 802ca44:	4642      	mov	r2, r8
 802ca46:	4631      	mov	r1, r6
 802ca48:	4628      	mov	r0, r5
 802ca4a:	47b8      	blx	r7
 802ca4c:	3001      	adds	r0, #1
 802ca4e:	f43f ae74 	beq.w	802c73a <_printf_float+0xbe>
 802ca52:	ee18 3a10 	vmov	r3, s16
 802ca56:	4652      	mov	r2, sl
 802ca58:	4631      	mov	r1, r6
 802ca5a:	4628      	mov	r0, r5
 802ca5c:	47b8      	blx	r7
 802ca5e:	3001      	adds	r0, #1
 802ca60:	f43f ae6b 	beq.w	802c73a <_printf_float+0xbe>
 802ca64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802ca68:	2200      	movs	r2, #0
 802ca6a:	2300      	movs	r3, #0
 802ca6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802ca70:	f7e4 f842 	bl	8010af8 <__aeabi_dcmpeq>
 802ca74:	b9d8      	cbnz	r0, 802caae <_printf_float+0x432>
 802ca76:	f10a 33ff 	add.w	r3, sl, #4294967295
 802ca7a:	f108 0201 	add.w	r2, r8, #1
 802ca7e:	4631      	mov	r1, r6
 802ca80:	4628      	mov	r0, r5
 802ca82:	47b8      	blx	r7
 802ca84:	3001      	adds	r0, #1
 802ca86:	d10e      	bne.n	802caa6 <_printf_float+0x42a>
 802ca88:	e657      	b.n	802c73a <_printf_float+0xbe>
 802ca8a:	2301      	movs	r3, #1
 802ca8c:	4652      	mov	r2, sl
 802ca8e:	4631      	mov	r1, r6
 802ca90:	4628      	mov	r0, r5
 802ca92:	47b8      	blx	r7
 802ca94:	3001      	adds	r0, #1
 802ca96:	f43f ae50 	beq.w	802c73a <_printf_float+0xbe>
 802ca9a:	f108 0801 	add.w	r8, r8, #1
 802ca9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802caa0:	3b01      	subs	r3, #1
 802caa2:	4543      	cmp	r3, r8
 802caa4:	dcf1      	bgt.n	802ca8a <_printf_float+0x40e>
 802caa6:	464b      	mov	r3, r9
 802caa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802caac:	e6da      	b.n	802c864 <_printf_float+0x1e8>
 802caae:	f04f 0800 	mov.w	r8, #0
 802cab2:	f104 0a1a 	add.w	sl, r4, #26
 802cab6:	e7f2      	b.n	802ca9e <_printf_float+0x422>
 802cab8:	2301      	movs	r3, #1
 802caba:	4642      	mov	r2, r8
 802cabc:	e7df      	b.n	802ca7e <_printf_float+0x402>
 802cabe:	2301      	movs	r3, #1
 802cac0:	464a      	mov	r2, r9
 802cac2:	4631      	mov	r1, r6
 802cac4:	4628      	mov	r0, r5
 802cac6:	47b8      	blx	r7
 802cac8:	3001      	adds	r0, #1
 802caca:	f43f ae36 	beq.w	802c73a <_printf_float+0xbe>
 802cace:	f108 0801 	add.w	r8, r8, #1
 802cad2:	68e3      	ldr	r3, [r4, #12]
 802cad4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802cad6:	1a5b      	subs	r3, r3, r1
 802cad8:	4543      	cmp	r3, r8
 802cada:	dcf0      	bgt.n	802cabe <_printf_float+0x442>
 802cadc:	e6f8      	b.n	802c8d0 <_printf_float+0x254>
 802cade:	f04f 0800 	mov.w	r8, #0
 802cae2:	f104 0919 	add.w	r9, r4, #25
 802cae6:	e7f4      	b.n	802cad2 <_printf_float+0x456>

0802cae8 <_printf_common>:
 802cae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802caec:	4616      	mov	r6, r2
 802caee:	4699      	mov	r9, r3
 802caf0:	688a      	ldr	r2, [r1, #8]
 802caf2:	690b      	ldr	r3, [r1, #16]
 802caf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802caf8:	4293      	cmp	r3, r2
 802cafa:	bfb8      	it	lt
 802cafc:	4613      	movlt	r3, r2
 802cafe:	6033      	str	r3, [r6, #0]
 802cb00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802cb04:	4607      	mov	r7, r0
 802cb06:	460c      	mov	r4, r1
 802cb08:	b10a      	cbz	r2, 802cb0e <_printf_common+0x26>
 802cb0a:	3301      	adds	r3, #1
 802cb0c:	6033      	str	r3, [r6, #0]
 802cb0e:	6823      	ldr	r3, [r4, #0]
 802cb10:	0699      	lsls	r1, r3, #26
 802cb12:	bf42      	ittt	mi
 802cb14:	6833      	ldrmi	r3, [r6, #0]
 802cb16:	3302      	addmi	r3, #2
 802cb18:	6033      	strmi	r3, [r6, #0]
 802cb1a:	6825      	ldr	r5, [r4, #0]
 802cb1c:	f015 0506 	ands.w	r5, r5, #6
 802cb20:	d106      	bne.n	802cb30 <_printf_common+0x48>
 802cb22:	f104 0a19 	add.w	sl, r4, #25
 802cb26:	68e3      	ldr	r3, [r4, #12]
 802cb28:	6832      	ldr	r2, [r6, #0]
 802cb2a:	1a9b      	subs	r3, r3, r2
 802cb2c:	42ab      	cmp	r3, r5
 802cb2e:	dc26      	bgt.n	802cb7e <_printf_common+0x96>
 802cb30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cb34:	1e13      	subs	r3, r2, #0
 802cb36:	6822      	ldr	r2, [r4, #0]
 802cb38:	bf18      	it	ne
 802cb3a:	2301      	movne	r3, #1
 802cb3c:	0692      	lsls	r2, r2, #26
 802cb3e:	d42b      	bmi.n	802cb98 <_printf_common+0xb0>
 802cb40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cb44:	4649      	mov	r1, r9
 802cb46:	4638      	mov	r0, r7
 802cb48:	47c0      	blx	r8
 802cb4a:	3001      	adds	r0, #1
 802cb4c:	d01e      	beq.n	802cb8c <_printf_common+0xa4>
 802cb4e:	6823      	ldr	r3, [r4, #0]
 802cb50:	6922      	ldr	r2, [r4, #16]
 802cb52:	f003 0306 	and.w	r3, r3, #6
 802cb56:	2b04      	cmp	r3, #4
 802cb58:	bf02      	ittt	eq
 802cb5a:	68e5      	ldreq	r5, [r4, #12]
 802cb5c:	6833      	ldreq	r3, [r6, #0]
 802cb5e:	1aed      	subeq	r5, r5, r3
 802cb60:	68a3      	ldr	r3, [r4, #8]
 802cb62:	bf0c      	ite	eq
 802cb64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cb68:	2500      	movne	r5, #0
 802cb6a:	4293      	cmp	r3, r2
 802cb6c:	bfc4      	itt	gt
 802cb6e:	1a9b      	subgt	r3, r3, r2
 802cb70:	18ed      	addgt	r5, r5, r3
 802cb72:	2600      	movs	r6, #0
 802cb74:	341a      	adds	r4, #26
 802cb76:	42b5      	cmp	r5, r6
 802cb78:	d11a      	bne.n	802cbb0 <_printf_common+0xc8>
 802cb7a:	2000      	movs	r0, #0
 802cb7c:	e008      	b.n	802cb90 <_printf_common+0xa8>
 802cb7e:	2301      	movs	r3, #1
 802cb80:	4652      	mov	r2, sl
 802cb82:	4649      	mov	r1, r9
 802cb84:	4638      	mov	r0, r7
 802cb86:	47c0      	blx	r8
 802cb88:	3001      	adds	r0, #1
 802cb8a:	d103      	bne.n	802cb94 <_printf_common+0xac>
 802cb8c:	f04f 30ff 	mov.w	r0, #4294967295
 802cb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cb94:	3501      	adds	r5, #1
 802cb96:	e7c6      	b.n	802cb26 <_printf_common+0x3e>
 802cb98:	18e1      	adds	r1, r4, r3
 802cb9a:	1c5a      	adds	r2, r3, #1
 802cb9c:	2030      	movs	r0, #48	; 0x30
 802cb9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cba2:	4422      	add	r2, r4
 802cba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cbac:	3302      	adds	r3, #2
 802cbae:	e7c7      	b.n	802cb40 <_printf_common+0x58>
 802cbb0:	2301      	movs	r3, #1
 802cbb2:	4622      	mov	r2, r4
 802cbb4:	4649      	mov	r1, r9
 802cbb6:	4638      	mov	r0, r7
 802cbb8:	47c0      	blx	r8
 802cbba:	3001      	adds	r0, #1
 802cbbc:	d0e6      	beq.n	802cb8c <_printf_common+0xa4>
 802cbbe:	3601      	adds	r6, #1
 802cbc0:	e7d9      	b.n	802cb76 <_printf_common+0x8e>
	...

0802cbc4 <_printf_i>:
 802cbc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cbc8:	7e0f      	ldrb	r7, [r1, #24]
 802cbca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802cbcc:	2f78      	cmp	r7, #120	; 0x78
 802cbce:	4691      	mov	r9, r2
 802cbd0:	4680      	mov	r8, r0
 802cbd2:	460c      	mov	r4, r1
 802cbd4:	469a      	mov	sl, r3
 802cbd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802cbda:	d807      	bhi.n	802cbec <_printf_i+0x28>
 802cbdc:	2f62      	cmp	r7, #98	; 0x62
 802cbde:	d80a      	bhi.n	802cbf6 <_printf_i+0x32>
 802cbe0:	2f00      	cmp	r7, #0
 802cbe2:	f000 80d4 	beq.w	802cd8e <_printf_i+0x1ca>
 802cbe6:	2f58      	cmp	r7, #88	; 0x58
 802cbe8:	f000 80c0 	beq.w	802cd6c <_printf_i+0x1a8>
 802cbec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cbf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802cbf4:	e03a      	b.n	802cc6c <_printf_i+0xa8>
 802cbf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802cbfa:	2b15      	cmp	r3, #21
 802cbfc:	d8f6      	bhi.n	802cbec <_printf_i+0x28>
 802cbfe:	a101      	add	r1, pc, #4	; (adr r1, 802cc04 <_printf_i+0x40>)
 802cc00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802cc04:	0802cc5d 	.word	0x0802cc5d
 802cc08:	0802cc71 	.word	0x0802cc71
 802cc0c:	0802cbed 	.word	0x0802cbed
 802cc10:	0802cbed 	.word	0x0802cbed
 802cc14:	0802cbed 	.word	0x0802cbed
 802cc18:	0802cbed 	.word	0x0802cbed
 802cc1c:	0802cc71 	.word	0x0802cc71
 802cc20:	0802cbed 	.word	0x0802cbed
 802cc24:	0802cbed 	.word	0x0802cbed
 802cc28:	0802cbed 	.word	0x0802cbed
 802cc2c:	0802cbed 	.word	0x0802cbed
 802cc30:	0802cd75 	.word	0x0802cd75
 802cc34:	0802cc9d 	.word	0x0802cc9d
 802cc38:	0802cd2f 	.word	0x0802cd2f
 802cc3c:	0802cbed 	.word	0x0802cbed
 802cc40:	0802cbed 	.word	0x0802cbed
 802cc44:	0802cd97 	.word	0x0802cd97
 802cc48:	0802cbed 	.word	0x0802cbed
 802cc4c:	0802cc9d 	.word	0x0802cc9d
 802cc50:	0802cbed 	.word	0x0802cbed
 802cc54:	0802cbed 	.word	0x0802cbed
 802cc58:	0802cd37 	.word	0x0802cd37
 802cc5c:	682b      	ldr	r3, [r5, #0]
 802cc5e:	1d1a      	adds	r2, r3, #4
 802cc60:	681b      	ldr	r3, [r3, #0]
 802cc62:	602a      	str	r2, [r5, #0]
 802cc64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cc68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802cc6c:	2301      	movs	r3, #1
 802cc6e:	e09f      	b.n	802cdb0 <_printf_i+0x1ec>
 802cc70:	6820      	ldr	r0, [r4, #0]
 802cc72:	682b      	ldr	r3, [r5, #0]
 802cc74:	0607      	lsls	r7, r0, #24
 802cc76:	f103 0104 	add.w	r1, r3, #4
 802cc7a:	6029      	str	r1, [r5, #0]
 802cc7c:	d501      	bpl.n	802cc82 <_printf_i+0xbe>
 802cc7e:	681e      	ldr	r6, [r3, #0]
 802cc80:	e003      	b.n	802cc8a <_printf_i+0xc6>
 802cc82:	0646      	lsls	r6, r0, #25
 802cc84:	d5fb      	bpl.n	802cc7e <_printf_i+0xba>
 802cc86:	f9b3 6000 	ldrsh.w	r6, [r3]
 802cc8a:	2e00      	cmp	r6, #0
 802cc8c:	da03      	bge.n	802cc96 <_printf_i+0xd2>
 802cc8e:	232d      	movs	r3, #45	; 0x2d
 802cc90:	4276      	negs	r6, r6
 802cc92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cc96:	485a      	ldr	r0, [pc, #360]	; (802ce00 <_printf_i+0x23c>)
 802cc98:	230a      	movs	r3, #10
 802cc9a:	e012      	b.n	802ccc2 <_printf_i+0xfe>
 802cc9c:	682b      	ldr	r3, [r5, #0]
 802cc9e:	6820      	ldr	r0, [r4, #0]
 802cca0:	1d19      	adds	r1, r3, #4
 802cca2:	6029      	str	r1, [r5, #0]
 802cca4:	0605      	lsls	r5, r0, #24
 802cca6:	d501      	bpl.n	802ccac <_printf_i+0xe8>
 802cca8:	681e      	ldr	r6, [r3, #0]
 802ccaa:	e002      	b.n	802ccb2 <_printf_i+0xee>
 802ccac:	0641      	lsls	r1, r0, #25
 802ccae:	d5fb      	bpl.n	802cca8 <_printf_i+0xe4>
 802ccb0:	881e      	ldrh	r6, [r3, #0]
 802ccb2:	4853      	ldr	r0, [pc, #332]	; (802ce00 <_printf_i+0x23c>)
 802ccb4:	2f6f      	cmp	r7, #111	; 0x6f
 802ccb6:	bf0c      	ite	eq
 802ccb8:	2308      	moveq	r3, #8
 802ccba:	230a      	movne	r3, #10
 802ccbc:	2100      	movs	r1, #0
 802ccbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802ccc2:	6865      	ldr	r5, [r4, #4]
 802ccc4:	60a5      	str	r5, [r4, #8]
 802ccc6:	2d00      	cmp	r5, #0
 802ccc8:	bfa2      	ittt	ge
 802ccca:	6821      	ldrge	r1, [r4, #0]
 802cccc:	f021 0104 	bicge.w	r1, r1, #4
 802ccd0:	6021      	strge	r1, [r4, #0]
 802ccd2:	b90e      	cbnz	r6, 802ccd8 <_printf_i+0x114>
 802ccd4:	2d00      	cmp	r5, #0
 802ccd6:	d04b      	beq.n	802cd70 <_printf_i+0x1ac>
 802ccd8:	4615      	mov	r5, r2
 802ccda:	fbb6 f1f3 	udiv	r1, r6, r3
 802ccde:	fb03 6711 	mls	r7, r3, r1, r6
 802cce2:	5dc7      	ldrb	r7, [r0, r7]
 802cce4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802cce8:	4637      	mov	r7, r6
 802ccea:	42bb      	cmp	r3, r7
 802ccec:	460e      	mov	r6, r1
 802ccee:	d9f4      	bls.n	802ccda <_printf_i+0x116>
 802ccf0:	2b08      	cmp	r3, #8
 802ccf2:	d10b      	bne.n	802cd0c <_printf_i+0x148>
 802ccf4:	6823      	ldr	r3, [r4, #0]
 802ccf6:	07de      	lsls	r6, r3, #31
 802ccf8:	d508      	bpl.n	802cd0c <_printf_i+0x148>
 802ccfa:	6923      	ldr	r3, [r4, #16]
 802ccfc:	6861      	ldr	r1, [r4, #4]
 802ccfe:	4299      	cmp	r1, r3
 802cd00:	bfde      	ittt	le
 802cd02:	2330      	movle	r3, #48	; 0x30
 802cd04:	f805 3c01 	strble.w	r3, [r5, #-1]
 802cd08:	f105 35ff 	addle.w	r5, r5, #4294967295
 802cd0c:	1b52      	subs	r2, r2, r5
 802cd0e:	6122      	str	r2, [r4, #16]
 802cd10:	f8cd a000 	str.w	sl, [sp]
 802cd14:	464b      	mov	r3, r9
 802cd16:	aa03      	add	r2, sp, #12
 802cd18:	4621      	mov	r1, r4
 802cd1a:	4640      	mov	r0, r8
 802cd1c:	f7ff fee4 	bl	802cae8 <_printf_common>
 802cd20:	3001      	adds	r0, #1
 802cd22:	d14a      	bne.n	802cdba <_printf_i+0x1f6>
 802cd24:	f04f 30ff 	mov.w	r0, #4294967295
 802cd28:	b004      	add	sp, #16
 802cd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cd2e:	6823      	ldr	r3, [r4, #0]
 802cd30:	f043 0320 	orr.w	r3, r3, #32
 802cd34:	6023      	str	r3, [r4, #0]
 802cd36:	4833      	ldr	r0, [pc, #204]	; (802ce04 <_printf_i+0x240>)
 802cd38:	2778      	movs	r7, #120	; 0x78
 802cd3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802cd3e:	6823      	ldr	r3, [r4, #0]
 802cd40:	6829      	ldr	r1, [r5, #0]
 802cd42:	061f      	lsls	r7, r3, #24
 802cd44:	f851 6b04 	ldr.w	r6, [r1], #4
 802cd48:	d402      	bmi.n	802cd50 <_printf_i+0x18c>
 802cd4a:	065f      	lsls	r7, r3, #25
 802cd4c:	bf48      	it	mi
 802cd4e:	b2b6      	uxthmi	r6, r6
 802cd50:	07df      	lsls	r7, r3, #31
 802cd52:	bf48      	it	mi
 802cd54:	f043 0320 	orrmi.w	r3, r3, #32
 802cd58:	6029      	str	r1, [r5, #0]
 802cd5a:	bf48      	it	mi
 802cd5c:	6023      	strmi	r3, [r4, #0]
 802cd5e:	b91e      	cbnz	r6, 802cd68 <_printf_i+0x1a4>
 802cd60:	6823      	ldr	r3, [r4, #0]
 802cd62:	f023 0320 	bic.w	r3, r3, #32
 802cd66:	6023      	str	r3, [r4, #0]
 802cd68:	2310      	movs	r3, #16
 802cd6a:	e7a7      	b.n	802ccbc <_printf_i+0xf8>
 802cd6c:	4824      	ldr	r0, [pc, #144]	; (802ce00 <_printf_i+0x23c>)
 802cd6e:	e7e4      	b.n	802cd3a <_printf_i+0x176>
 802cd70:	4615      	mov	r5, r2
 802cd72:	e7bd      	b.n	802ccf0 <_printf_i+0x12c>
 802cd74:	682b      	ldr	r3, [r5, #0]
 802cd76:	6826      	ldr	r6, [r4, #0]
 802cd78:	6961      	ldr	r1, [r4, #20]
 802cd7a:	1d18      	adds	r0, r3, #4
 802cd7c:	6028      	str	r0, [r5, #0]
 802cd7e:	0635      	lsls	r5, r6, #24
 802cd80:	681b      	ldr	r3, [r3, #0]
 802cd82:	d501      	bpl.n	802cd88 <_printf_i+0x1c4>
 802cd84:	6019      	str	r1, [r3, #0]
 802cd86:	e002      	b.n	802cd8e <_printf_i+0x1ca>
 802cd88:	0670      	lsls	r0, r6, #25
 802cd8a:	d5fb      	bpl.n	802cd84 <_printf_i+0x1c0>
 802cd8c:	8019      	strh	r1, [r3, #0]
 802cd8e:	2300      	movs	r3, #0
 802cd90:	6123      	str	r3, [r4, #16]
 802cd92:	4615      	mov	r5, r2
 802cd94:	e7bc      	b.n	802cd10 <_printf_i+0x14c>
 802cd96:	682b      	ldr	r3, [r5, #0]
 802cd98:	1d1a      	adds	r2, r3, #4
 802cd9a:	602a      	str	r2, [r5, #0]
 802cd9c:	681d      	ldr	r5, [r3, #0]
 802cd9e:	6862      	ldr	r2, [r4, #4]
 802cda0:	2100      	movs	r1, #0
 802cda2:	4628      	mov	r0, r5
 802cda4:	f7e3 fa2c 	bl	8010200 <memchr>
 802cda8:	b108      	cbz	r0, 802cdae <_printf_i+0x1ea>
 802cdaa:	1b40      	subs	r0, r0, r5
 802cdac:	6060      	str	r0, [r4, #4]
 802cdae:	6863      	ldr	r3, [r4, #4]
 802cdb0:	6123      	str	r3, [r4, #16]
 802cdb2:	2300      	movs	r3, #0
 802cdb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cdb8:	e7aa      	b.n	802cd10 <_printf_i+0x14c>
 802cdba:	6923      	ldr	r3, [r4, #16]
 802cdbc:	462a      	mov	r2, r5
 802cdbe:	4649      	mov	r1, r9
 802cdc0:	4640      	mov	r0, r8
 802cdc2:	47d0      	blx	sl
 802cdc4:	3001      	adds	r0, #1
 802cdc6:	d0ad      	beq.n	802cd24 <_printf_i+0x160>
 802cdc8:	6823      	ldr	r3, [r4, #0]
 802cdca:	079b      	lsls	r3, r3, #30
 802cdcc:	d413      	bmi.n	802cdf6 <_printf_i+0x232>
 802cdce:	68e0      	ldr	r0, [r4, #12]
 802cdd0:	9b03      	ldr	r3, [sp, #12]
 802cdd2:	4298      	cmp	r0, r3
 802cdd4:	bfb8      	it	lt
 802cdd6:	4618      	movlt	r0, r3
 802cdd8:	e7a6      	b.n	802cd28 <_printf_i+0x164>
 802cdda:	2301      	movs	r3, #1
 802cddc:	4632      	mov	r2, r6
 802cdde:	4649      	mov	r1, r9
 802cde0:	4640      	mov	r0, r8
 802cde2:	47d0      	blx	sl
 802cde4:	3001      	adds	r0, #1
 802cde6:	d09d      	beq.n	802cd24 <_printf_i+0x160>
 802cde8:	3501      	adds	r5, #1
 802cdea:	68e3      	ldr	r3, [r4, #12]
 802cdec:	9903      	ldr	r1, [sp, #12]
 802cdee:	1a5b      	subs	r3, r3, r1
 802cdf0:	42ab      	cmp	r3, r5
 802cdf2:	dcf2      	bgt.n	802cdda <_printf_i+0x216>
 802cdf4:	e7eb      	b.n	802cdce <_printf_i+0x20a>
 802cdf6:	2500      	movs	r5, #0
 802cdf8:	f104 0619 	add.w	r6, r4, #25
 802cdfc:	e7f5      	b.n	802cdea <_printf_i+0x226>
 802cdfe:	bf00      	nop
 802ce00:	0803489c 	.word	0x0803489c
 802ce04:	080348ad 	.word	0x080348ad

0802ce08 <_scanf_float>:
 802ce08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ce0c:	b087      	sub	sp, #28
 802ce0e:	4617      	mov	r7, r2
 802ce10:	9303      	str	r3, [sp, #12]
 802ce12:	688b      	ldr	r3, [r1, #8]
 802ce14:	1e5a      	subs	r2, r3, #1
 802ce16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802ce1a:	bf83      	ittte	hi
 802ce1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802ce20:	195b      	addhi	r3, r3, r5
 802ce22:	9302      	strhi	r3, [sp, #8]
 802ce24:	2300      	movls	r3, #0
 802ce26:	bf86      	itte	hi
 802ce28:	f240 135d 	movwhi	r3, #349	; 0x15d
 802ce2c:	608b      	strhi	r3, [r1, #8]
 802ce2e:	9302      	strls	r3, [sp, #8]
 802ce30:	680b      	ldr	r3, [r1, #0]
 802ce32:	468b      	mov	fp, r1
 802ce34:	2500      	movs	r5, #0
 802ce36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802ce3a:	f84b 3b1c 	str.w	r3, [fp], #28
 802ce3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802ce42:	4680      	mov	r8, r0
 802ce44:	460c      	mov	r4, r1
 802ce46:	465e      	mov	r6, fp
 802ce48:	46aa      	mov	sl, r5
 802ce4a:	46a9      	mov	r9, r5
 802ce4c:	9501      	str	r5, [sp, #4]
 802ce4e:	68a2      	ldr	r2, [r4, #8]
 802ce50:	b152      	cbz	r2, 802ce68 <_scanf_float+0x60>
 802ce52:	683b      	ldr	r3, [r7, #0]
 802ce54:	781b      	ldrb	r3, [r3, #0]
 802ce56:	2b4e      	cmp	r3, #78	; 0x4e
 802ce58:	d864      	bhi.n	802cf24 <_scanf_float+0x11c>
 802ce5a:	2b40      	cmp	r3, #64	; 0x40
 802ce5c:	d83c      	bhi.n	802ced8 <_scanf_float+0xd0>
 802ce5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802ce62:	b2c8      	uxtb	r0, r1
 802ce64:	280e      	cmp	r0, #14
 802ce66:	d93a      	bls.n	802cede <_scanf_float+0xd6>
 802ce68:	f1b9 0f00 	cmp.w	r9, #0
 802ce6c:	d003      	beq.n	802ce76 <_scanf_float+0x6e>
 802ce6e:	6823      	ldr	r3, [r4, #0]
 802ce70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802ce74:	6023      	str	r3, [r4, #0]
 802ce76:	f10a 3aff 	add.w	sl, sl, #4294967295
 802ce7a:	f1ba 0f01 	cmp.w	sl, #1
 802ce7e:	f200 8113 	bhi.w	802d0a8 <_scanf_float+0x2a0>
 802ce82:	455e      	cmp	r6, fp
 802ce84:	f200 8105 	bhi.w	802d092 <_scanf_float+0x28a>
 802ce88:	2501      	movs	r5, #1
 802ce8a:	4628      	mov	r0, r5
 802ce8c:	b007      	add	sp, #28
 802ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ce92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802ce96:	2a0d      	cmp	r2, #13
 802ce98:	d8e6      	bhi.n	802ce68 <_scanf_float+0x60>
 802ce9a:	a101      	add	r1, pc, #4	; (adr r1, 802cea0 <_scanf_float+0x98>)
 802ce9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802cea0:	0802cfdf 	.word	0x0802cfdf
 802cea4:	0802ce69 	.word	0x0802ce69
 802cea8:	0802ce69 	.word	0x0802ce69
 802ceac:	0802ce69 	.word	0x0802ce69
 802ceb0:	0802d03f 	.word	0x0802d03f
 802ceb4:	0802d017 	.word	0x0802d017
 802ceb8:	0802ce69 	.word	0x0802ce69
 802cebc:	0802ce69 	.word	0x0802ce69
 802cec0:	0802cfed 	.word	0x0802cfed
 802cec4:	0802ce69 	.word	0x0802ce69
 802cec8:	0802ce69 	.word	0x0802ce69
 802cecc:	0802ce69 	.word	0x0802ce69
 802ced0:	0802ce69 	.word	0x0802ce69
 802ced4:	0802cfa5 	.word	0x0802cfa5
 802ced8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802cedc:	e7db      	b.n	802ce96 <_scanf_float+0x8e>
 802cede:	290e      	cmp	r1, #14
 802cee0:	d8c2      	bhi.n	802ce68 <_scanf_float+0x60>
 802cee2:	a001      	add	r0, pc, #4	; (adr r0, 802cee8 <_scanf_float+0xe0>)
 802cee4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802cee8:	0802cf97 	.word	0x0802cf97
 802ceec:	0802ce69 	.word	0x0802ce69
 802cef0:	0802cf97 	.word	0x0802cf97
 802cef4:	0802d02b 	.word	0x0802d02b
 802cef8:	0802ce69 	.word	0x0802ce69
 802cefc:	0802cf45 	.word	0x0802cf45
 802cf00:	0802cf81 	.word	0x0802cf81
 802cf04:	0802cf81 	.word	0x0802cf81
 802cf08:	0802cf81 	.word	0x0802cf81
 802cf0c:	0802cf81 	.word	0x0802cf81
 802cf10:	0802cf81 	.word	0x0802cf81
 802cf14:	0802cf81 	.word	0x0802cf81
 802cf18:	0802cf81 	.word	0x0802cf81
 802cf1c:	0802cf81 	.word	0x0802cf81
 802cf20:	0802cf81 	.word	0x0802cf81
 802cf24:	2b6e      	cmp	r3, #110	; 0x6e
 802cf26:	d809      	bhi.n	802cf3c <_scanf_float+0x134>
 802cf28:	2b60      	cmp	r3, #96	; 0x60
 802cf2a:	d8b2      	bhi.n	802ce92 <_scanf_float+0x8a>
 802cf2c:	2b54      	cmp	r3, #84	; 0x54
 802cf2e:	d077      	beq.n	802d020 <_scanf_float+0x218>
 802cf30:	2b59      	cmp	r3, #89	; 0x59
 802cf32:	d199      	bne.n	802ce68 <_scanf_float+0x60>
 802cf34:	2d07      	cmp	r5, #7
 802cf36:	d197      	bne.n	802ce68 <_scanf_float+0x60>
 802cf38:	2508      	movs	r5, #8
 802cf3a:	e029      	b.n	802cf90 <_scanf_float+0x188>
 802cf3c:	2b74      	cmp	r3, #116	; 0x74
 802cf3e:	d06f      	beq.n	802d020 <_scanf_float+0x218>
 802cf40:	2b79      	cmp	r3, #121	; 0x79
 802cf42:	e7f6      	b.n	802cf32 <_scanf_float+0x12a>
 802cf44:	6821      	ldr	r1, [r4, #0]
 802cf46:	05c8      	lsls	r0, r1, #23
 802cf48:	d51a      	bpl.n	802cf80 <_scanf_float+0x178>
 802cf4a:	9b02      	ldr	r3, [sp, #8]
 802cf4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802cf50:	6021      	str	r1, [r4, #0]
 802cf52:	f109 0901 	add.w	r9, r9, #1
 802cf56:	b11b      	cbz	r3, 802cf60 <_scanf_float+0x158>
 802cf58:	3b01      	subs	r3, #1
 802cf5a:	3201      	adds	r2, #1
 802cf5c:	9302      	str	r3, [sp, #8]
 802cf5e:	60a2      	str	r2, [r4, #8]
 802cf60:	68a3      	ldr	r3, [r4, #8]
 802cf62:	3b01      	subs	r3, #1
 802cf64:	60a3      	str	r3, [r4, #8]
 802cf66:	6923      	ldr	r3, [r4, #16]
 802cf68:	3301      	adds	r3, #1
 802cf6a:	6123      	str	r3, [r4, #16]
 802cf6c:	687b      	ldr	r3, [r7, #4]
 802cf6e:	3b01      	subs	r3, #1
 802cf70:	2b00      	cmp	r3, #0
 802cf72:	607b      	str	r3, [r7, #4]
 802cf74:	f340 8084 	ble.w	802d080 <_scanf_float+0x278>
 802cf78:	683b      	ldr	r3, [r7, #0]
 802cf7a:	3301      	adds	r3, #1
 802cf7c:	603b      	str	r3, [r7, #0]
 802cf7e:	e766      	b.n	802ce4e <_scanf_float+0x46>
 802cf80:	eb1a 0f05 	cmn.w	sl, r5
 802cf84:	f47f af70 	bne.w	802ce68 <_scanf_float+0x60>
 802cf88:	6822      	ldr	r2, [r4, #0]
 802cf8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802cf8e:	6022      	str	r2, [r4, #0]
 802cf90:	f806 3b01 	strb.w	r3, [r6], #1
 802cf94:	e7e4      	b.n	802cf60 <_scanf_float+0x158>
 802cf96:	6822      	ldr	r2, [r4, #0]
 802cf98:	0610      	lsls	r0, r2, #24
 802cf9a:	f57f af65 	bpl.w	802ce68 <_scanf_float+0x60>
 802cf9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802cfa2:	e7f4      	b.n	802cf8e <_scanf_float+0x186>
 802cfa4:	f1ba 0f00 	cmp.w	sl, #0
 802cfa8:	d10e      	bne.n	802cfc8 <_scanf_float+0x1c0>
 802cfaa:	f1b9 0f00 	cmp.w	r9, #0
 802cfae:	d10e      	bne.n	802cfce <_scanf_float+0x1c6>
 802cfb0:	6822      	ldr	r2, [r4, #0]
 802cfb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802cfb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802cfba:	d108      	bne.n	802cfce <_scanf_float+0x1c6>
 802cfbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802cfc0:	6022      	str	r2, [r4, #0]
 802cfc2:	f04f 0a01 	mov.w	sl, #1
 802cfc6:	e7e3      	b.n	802cf90 <_scanf_float+0x188>
 802cfc8:	f1ba 0f02 	cmp.w	sl, #2
 802cfcc:	d055      	beq.n	802d07a <_scanf_float+0x272>
 802cfce:	2d01      	cmp	r5, #1
 802cfd0:	d002      	beq.n	802cfd8 <_scanf_float+0x1d0>
 802cfd2:	2d04      	cmp	r5, #4
 802cfd4:	f47f af48 	bne.w	802ce68 <_scanf_float+0x60>
 802cfd8:	3501      	adds	r5, #1
 802cfda:	b2ed      	uxtb	r5, r5
 802cfdc:	e7d8      	b.n	802cf90 <_scanf_float+0x188>
 802cfde:	f1ba 0f01 	cmp.w	sl, #1
 802cfe2:	f47f af41 	bne.w	802ce68 <_scanf_float+0x60>
 802cfe6:	f04f 0a02 	mov.w	sl, #2
 802cfea:	e7d1      	b.n	802cf90 <_scanf_float+0x188>
 802cfec:	b97d      	cbnz	r5, 802d00e <_scanf_float+0x206>
 802cfee:	f1b9 0f00 	cmp.w	r9, #0
 802cff2:	f47f af3c 	bne.w	802ce6e <_scanf_float+0x66>
 802cff6:	6822      	ldr	r2, [r4, #0]
 802cff8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802cffc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d000:	f47f af39 	bne.w	802ce76 <_scanf_float+0x6e>
 802d004:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d008:	6022      	str	r2, [r4, #0]
 802d00a:	2501      	movs	r5, #1
 802d00c:	e7c0      	b.n	802cf90 <_scanf_float+0x188>
 802d00e:	2d03      	cmp	r5, #3
 802d010:	d0e2      	beq.n	802cfd8 <_scanf_float+0x1d0>
 802d012:	2d05      	cmp	r5, #5
 802d014:	e7de      	b.n	802cfd4 <_scanf_float+0x1cc>
 802d016:	2d02      	cmp	r5, #2
 802d018:	f47f af26 	bne.w	802ce68 <_scanf_float+0x60>
 802d01c:	2503      	movs	r5, #3
 802d01e:	e7b7      	b.n	802cf90 <_scanf_float+0x188>
 802d020:	2d06      	cmp	r5, #6
 802d022:	f47f af21 	bne.w	802ce68 <_scanf_float+0x60>
 802d026:	2507      	movs	r5, #7
 802d028:	e7b2      	b.n	802cf90 <_scanf_float+0x188>
 802d02a:	6822      	ldr	r2, [r4, #0]
 802d02c:	0591      	lsls	r1, r2, #22
 802d02e:	f57f af1b 	bpl.w	802ce68 <_scanf_float+0x60>
 802d032:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802d036:	6022      	str	r2, [r4, #0]
 802d038:	f8cd 9004 	str.w	r9, [sp, #4]
 802d03c:	e7a8      	b.n	802cf90 <_scanf_float+0x188>
 802d03e:	6822      	ldr	r2, [r4, #0]
 802d040:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802d044:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802d048:	d006      	beq.n	802d058 <_scanf_float+0x250>
 802d04a:	0550      	lsls	r0, r2, #21
 802d04c:	f57f af0c 	bpl.w	802ce68 <_scanf_float+0x60>
 802d050:	f1b9 0f00 	cmp.w	r9, #0
 802d054:	f43f af0f 	beq.w	802ce76 <_scanf_float+0x6e>
 802d058:	0591      	lsls	r1, r2, #22
 802d05a:	bf58      	it	pl
 802d05c:	9901      	ldrpl	r1, [sp, #4]
 802d05e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d062:	bf58      	it	pl
 802d064:	eba9 0101 	subpl.w	r1, r9, r1
 802d068:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802d06c:	bf58      	it	pl
 802d06e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802d072:	6022      	str	r2, [r4, #0]
 802d074:	f04f 0900 	mov.w	r9, #0
 802d078:	e78a      	b.n	802cf90 <_scanf_float+0x188>
 802d07a:	f04f 0a03 	mov.w	sl, #3
 802d07e:	e787      	b.n	802cf90 <_scanf_float+0x188>
 802d080:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d084:	4639      	mov	r1, r7
 802d086:	4640      	mov	r0, r8
 802d088:	4798      	blx	r3
 802d08a:	2800      	cmp	r0, #0
 802d08c:	f43f aedf 	beq.w	802ce4e <_scanf_float+0x46>
 802d090:	e6ea      	b.n	802ce68 <_scanf_float+0x60>
 802d092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d096:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d09a:	463a      	mov	r2, r7
 802d09c:	4640      	mov	r0, r8
 802d09e:	4798      	blx	r3
 802d0a0:	6923      	ldr	r3, [r4, #16]
 802d0a2:	3b01      	subs	r3, #1
 802d0a4:	6123      	str	r3, [r4, #16]
 802d0a6:	e6ec      	b.n	802ce82 <_scanf_float+0x7a>
 802d0a8:	1e6b      	subs	r3, r5, #1
 802d0aa:	2b06      	cmp	r3, #6
 802d0ac:	d825      	bhi.n	802d0fa <_scanf_float+0x2f2>
 802d0ae:	2d02      	cmp	r5, #2
 802d0b0:	d836      	bhi.n	802d120 <_scanf_float+0x318>
 802d0b2:	455e      	cmp	r6, fp
 802d0b4:	f67f aee8 	bls.w	802ce88 <_scanf_float+0x80>
 802d0b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d0bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d0c0:	463a      	mov	r2, r7
 802d0c2:	4640      	mov	r0, r8
 802d0c4:	4798      	blx	r3
 802d0c6:	6923      	ldr	r3, [r4, #16]
 802d0c8:	3b01      	subs	r3, #1
 802d0ca:	6123      	str	r3, [r4, #16]
 802d0cc:	e7f1      	b.n	802d0b2 <_scanf_float+0x2aa>
 802d0ce:	9802      	ldr	r0, [sp, #8]
 802d0d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d0d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802d0d8:	9002      	str	r0, [sp, #8]
 802d0da:	463a      	mov	r2, r7
 802d0dc:	4640      	mov	r0, r8
 802d0de:	4798      	blx	r3
 802d0e0:	6923      	ldr	r3, [r4, #16]
 802d0e2:	3b01      	subs	r3, #1
 802d0e4:	6123      	str	r3, [r4, #16]
 802d0e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d0ea:	fa5f fa8a 	uxtb.w	sl, sl
 802d0ee:	f1ba 0f02 	cmp.w	sl, #2
 802d0f2:	d1ec      	bne.n	802d0ce <_scanf_float+0x2c6>
 802d0f4:	3d03      	subs	r5, #3
 802d0f6:	b2ed      	uxtb	r5, r5
 802d0f8:	1b76      	subs	r6, r6, r5
 802d0fa:	6823      	ldr	r3, [r4, #0]
 802d0fc:	05da      	lsls	r2, r3, #23
 802d0fe:	d52f      	bpl.n	802d160 <_scanf_float+0x358>
 802d100:	055b      	lsls	r3, r3, #21
 802d102:	d510      	bpl.n	802d126 <_scanf_float+0x31e>
 802d104:	455e      	cmp	r6, fp
 802d106:	f67f aebf 	bls.w	802ce88 <_scanf_float+0x80>
 802d10a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d10e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d112:	463a      	mov	r2, r7
 802d114:	4640      	mov	r0, r8
 802d116:	4798      	blx	r3
 802d118:	6923      	ldr	r3, [r4, #16]
 802d11a:	3b01      	subs	r3, #1
 802d11c:	6123      	str	r3, [r4, #16]
 802d11e:	e7f1      	b.n	802d104 <_scanf_float+0x2fc>
 802d120:	46aa      	mov	sl, r5
 802d122:	9602      	str	r6, [sp, #8]
 802d124:	e7df      	b.n	802d0e6 <_scanf_float+0x2de>
 802d126:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802d12a:	6923      	ldr	r3, [r4, #16]
 802d12c:	2965      	cmp	r1, #101	; 0x65
 802d12e:	f103 33ff 	add.w	r3, r3, #4294967295
 802d132:	f106 35ff 	add.w	r5, r6, #4294967295
 802d136:	6123      	str	r3, [r4, #16]
 802d138:	d00c      	beq.n	802d154 <_scanf_float+0x34c>
 802d13a:	2945      	cmp	r1, #69	; 0x45
 802d13c:	d00a      	beq.n	802d154 <_scanf_float+0x34c>
 802d13e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d142:	463a      	mov	r2, r7
 802d144:	4640      	mov	r0, r8
 802d146:	4798      	blx	r3
 802d148:	6923      	ldr	r3, [r4, #16]
 802d14a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802d14e:	3b01      	subs	r3, #1
 802d150:	1eb5      	subs	r5, r6, #2
 802d152:	6123      	str	r3, [r4, #16]
 802d154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d158:	463a      	mov	r2, r7
 802d15a:	4640      	mov	r0, r8
 802d15c:	4798      	blx	r3
 802d15e:	462e      	mov	r6, r5
 802d160:	6825      	ldr	r5, [r4, #0]
 802d162:	f015 0510 	ands.w	r5, r5, #16
 802d166:	d158      	bne.n	802d21a <_scanf_float+0x412>
 802d168:	7035      	strb	r5, [r6, #0]
 802d16a:	6823      	ldr	r3, [r4, #0]
 802d16c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d174:	d11c      	bne.n	802d1b0 <_scanf_float+0x3a8>
 802d176:	9b01      	ldr	r3, [sp, #4]
 802d178:	454b      	cmp	r3, r9
 802d17a:	eba3 0209 	sub.w	r2, r3, r9
 802d17e:	d124      	bne.n	802d1ca <_scanf_float+0x3c2>
 802d180:	2200      	movs	r2, #0
 802d182:	4659      	mov	r1, fp
 802d184:	4640      	mov	r0, r8
 802d186:	f002 fe2b 	bl	802fde0 <_strtod_r>
 802d18a:	9b03      	ldr	r3, [sp, #12]
 802d18c:	6821      	ldr	r1, [r4, #0]
 802d18e:	681b      	ldr	r3, [r3, #0]
 802d190:	f011 0f02 	tst.w	r1, #2
 802d194:	ec57 6b10 	vmov	r6, r7, d0
 802d198:	f103 0204 	add.w	r2, r3, #4
 802d19c:	d020      	beq.n	802d1e0 <_scanf_float+0x3d8>
 802d19e:	9903      	ldr	r1, [sp, #12]
 802d1a0:	600a      	str	r2, [r1, #0]
 802d1a2:	681b      	ldr	r3, [r3, #0]
 802d1a4:	e9c3 6700 	strd	r6, r7, [r3]
 802d1a8:	68e3      	ldr	r3, [r4, #12]
 802d1aa:	3301      	adds	r3, #1
 802d1ac:	60e3      	str	r3, [r4, #12]
 802d1ae:	e66c      	b.n	802ce8a <_scanf_float+0x82>
 802d1b0:	9b04      	ldr	r3, [sp, #16]
 802d1b2:	2b00      	cmp	r3, #0
 802d1b4:	d0e4      	beq.n	802d180 <_scanf_float+0x378>
 802d1b6:	9905      	ldr	r1, [sp, #20]
 802d1b8:	230a      	movs	r3, #10
 802d1ba:	462a      	mov	r2, r5
 802d1bc:	3101      	adds	r1, #1
 802d1be:	4640      	mov	r0, r8
 802d1c0:	f002 fe96 	bl	802fef0 <_strtol_r>
 802d1c4:	9b04      	ldr	r3, [sp, #16]
 802d1c6:	9e05      	ldr	r6, [sp, #20]
 802d1c8:	1ac2      	subs	r2, r0, r3
 802d1ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802d1ce:	429e      	cmp	r6, r3
 802d1d0:	bf28      	it	cs
 802d1d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802d1d6:	4912      	ldr	r1, [pc, #72]	; (802d220 <_scanf_float+0x418>)
 802d1d8:	4630      	mov	r0, r6
 802d1da:	f000 f93f 	bl	802d45c <siprintf>
 802d1de:	e7cf      	b.n	802d180 <_scanf_float+0x378>
 802d1e0:	f011 0f04 	tst.w	r1, #4
 802d1e4:	9903      	ldr	r1, [sp, #12]
 802d1e6:	600a      	str	r2, [r1, #0]
 802d1e8:	d1db      	bne.n	802d1a2 <_scanf_float+0x39a>
 802d1ea:	f8d3 8000 	ldr.w	r8, [r3]
 802d1ee:	ee10 2a10 	vmov	r2, s0
 802d1f2:	ee10 0a10 	vmov	r0, s0
 802d1f6:	463b      	mov	r3, r7
 802d1f8:	4639      	mov	r1, r7
 802d1fa:	f7e3 fcaf 	bl	8010b5c <__aeabi_dcmpun>
 802d1fe:	b128      	cbz	r0, 802d20c <_scanf_float+0x404>
 802d200:	4808      	ldr	r0, [pc, #32]	; (802d224 <_scanf_float+0x41c>)
 802d202:	f000 fc5f 	bl	802dac4 <nanf>
 802d206:	ed88 0a00 	vstr	s0, [r8]
 802d20a:	e7cd      	b.n	802d1a8 <_scanf_float+0x3a0>
 802d20c:	4630      	mov	r0, r6
 802d20e:	4639      	mov	r1, r7
 802d210:	f7e3 fd02 	bl	8010c18 <__aeabi_d2f>
 802d214:	f8c8 0000 	str.w	r0, [r8]
 802d218:	e7c6      	b.n	802d1a8 <_scanf_float+0x3a0>
 802d21a:	2500      	movs	r5, #0
 802d21c:	e635      	b.n	802ce8a <_scanf_float+0x82>
 802d21e:	bf00      	nop
 802d220:	080348be 	.word	0x080348be
 802d224:	0803488b 	.word	0x0803488b

0802d228 <std>:
 802d228:	2300      	movs	r3, #0
 802d22a:	b510      	push	{r4, lr}
 802d22c:	4604      	mov	r4, r0
 802d22e:	e9c0 3300 	strd	r3, r3, [r0]
 802d232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d236:	6083      	str	r3, [r0, #8]
 802d238:	8181      	strh	r1, [r0, #12]
 802d23a:	6643      	str	r3, [r0, #100]	; 0x64
 802d23c:	81c2      	strh	r2, [r0, #14]
 802d23e:	6183      	str	r3, [r0, #24]
 802d240:	4619      	mov	r1, r3
 802d242:	2208      	movs	r2, #8
 802d244:	305c      	adds	r0, #92	; 0x5c
 802d246:	f000 fa59 	bl	802d6fc <memset>
 802d24a:	4b0d      	ldr	r3, [pc, #52]	; (802d280 <std+0x58>)
 802d24c:	6263      	str	r3, [r4, #36]	; 0x24
 802d24e:	4b0d      	ldr	r3, [pc, #52]	; (802d284 <std+0x5c>)
 802d250:	62a3      	str	r3, [r4, #40]	; 0x28
 802d252:	4b0d      	ldr	r3, [pc, #52]	; (802d288 <std+0x60>)
 802d254:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d256:	4b0d      	ldr	r3, [pc, #52]	; (802d28c <std+0x64>)
 802d258:	6323      	str	r3, [r4, #48]	; 0x30
 802d25a:	4b0d      	ldr	r3, [pc, #52]	; (802d290 <std+0x68>)
 802d25c:	6224      	str	r4, [r4, #32]
 802d25e:	429c      	cmp	r4, r3
 802d260:	d006      	beq.n	802d270 <std+0x48>
 802d262:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802d266:	4294      	cmp	r4, r2
 802d268:	d002      	beq.n	802d270 <std+0x48>
 802d26a:	33d0      	adds	r3, #208	; 0xd0
 802d26c:	429c      	cmp	r4, r3
 802d26e:	d105      	bne.n	802d27c <std+0x54>
 802d270:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d278:	f000 bc0a 	b.w	802da90 <__retarget_lock_init_recursive>
 802d27c:	bd10      	pop	{r4, pc}
 802d27e:	bf00      	nop
 802d280:	0802d4f5 	.word	0x0802d4f5
 802d284:	0802d51b 	.word	0x0802d51b
 802d288:	0802d553 	.word	0x0802d553
 802d28c:	0802d577 	.word	0x0802d577
 802d290:	2000d9b0 	.word	0x2000d9b0

0802d294 <stdio_exit_handler>:
 802d294:	4a02      	ldr	r2, [pc, #8]	; (802d2a0 <stdio_exit_handler+0xc>)
 802d296:	4903      	ldr	r1, [pc, #12]	; (802d2a4 <stdio_exit_handler+0x10>)
 802d298:	4803      	ldr	r0, [pc, #12]	; (802d2a8 <stdio_exit_handler+0x14>)
 802d29a:	f000 b87b 	b.w	802d394 <_fwalk_sglue>
 802d29e:	bf00      	nop
 802d2a0:	20000130 	.word	0x20000130
 802d2a4:	08030b79 	.word	0x08030b79
 802d2a8:	2000013c 	.word	0x2000013c

0802d2ac <cleanup_stdio>:
 802d2ac:	6841      	ldr	r1, [r0, #4]
 802d2ae:	4b0c      	ldr	r3, [pc, #48]	; (802d2e0 <cleanup_stdio+0x34>)
 802d2b0:	4299      	cmp	r1, r3
 802d2b2:	b510      	push	{r4, lr}
 802d2b4:	4604      	mov	r4, r0
 802d2b6:	d001      	beq.n	802d2bc <cleanup_stdio+0x10>
 802d2b8:	f003 fc5e 	bl	8030b78 <_fflush_r>
 802d2bc:	68a1      	ldr	r1, [r4, #8]
 802d2be:	4b09      	ldr	r3, [pc, #36]	; (802d2e4 <cleanup_stdio+0x38>)
 802d2c0:	4299      	cmp	r1, r3
 802d2c2:	d002      	beq.n	802d2ca <cleanup_stdio+0x1e>
 802d2c4:	4620      	mov	r0, r4
 802d2c6:	f003 fc57 	bl	8030b78 <_fflush_r>
 802d2ca:	68e1      	ldr	r1, [r4, #12]
 802d2cc:	4b06      	ldr	r3, [pc, #24]	; (802d2e8 <cleanup_stdio+0x3c>)
 802d2ce:	4299      	cmp	r1, r3
 802d2d0:	d004      	beq.n	802d2dc <cleanup_stdio+0x30>
 802d2d2:	4620      	mov	r0, r4
 802d2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d2d8:	f003 bc4e 	b.w	8030b78 <_fflush_r>
 802d2dc:	bd10      	pop	{r4, pc}
 802d2de:	bf00      	nop
 802d2e0:	2000d9b0 	.word	0x2000d9b0
 802d2e4:	2000da18 	.word	0x2000da18
 802d2e8:	2000da80 	.word	0x2000da80

0802d2ec <global_stdio_init.part.0>:
 802d2ec:	b510      	push	{r4, lr}
 802d2ee:	4b0b      	ldr	r3, [pc, #44]	; (802d31c <global_stdio_init.part.0+0x30>)
 802d2f0:	4c0b      	ldr	r4, [pc, #44]	; (802d320 <global_stdio_init.part.0+0x34>)
 802d2f2:	4a0c      	ldr	r2, [pc, #48]	; (802d324 <global_stdio_init.part.0+0x38>)
 802d2f4:	601a      	str	r2, [r3, #0]
 802d2f6:	4620      	mov	r0, r4
 802d2f8:	2200      	movs	r2, #0
 802d2fa:	2104      	movs	r1, #4
 802d2fc:	f7ff ff94 	bl	802d228 <std>
 802d300:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802d304:	2201      	movs	r2, #1
 802d306:	2109      	movs	r1, #9
 802d308:	f7ff ff8e 	bl	802d228 <std>
 802d30c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802d310:	2202      	movs	r2, #2
 802d312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d316:	2112      	movs	r1, #18
 802d318:	f7ff bf86 	b.w	802d228 <std>
 802d31c:	2000dae8 	.word	0x2000dae8
 802d320:	2000d9b0 	.word	0x2000d9b0
 802d324:	0802d295 	.word	0x0802d295

0802d328 <__sfp_lock_acquire>:
 802d328:	4801      	ldr	r0, [pc, #4]	; (802d330 <__sfp_lock_acquire+0x8>)
 802d32a:	f000 bbb2 	b.w	802da92 <__retarget_lock_acquire_recursive>
 802d32e:	bf00      	nop
 802d330:	2000daf1 	.word	0x2000daf1

0802d334 <__sfp_lock_release>:
 802d334:	4801      	ldr	r0, [pc, #4]	; (802d33c <__sfp_lock_release+0x8>)
 802d336:	f000 bbad 	b.w	802da94 <__retarget_lock_release_recursive>
 802d33a:	bf00      	nop
 802d33c:	2000daf1 	.word	0x2000daf1

0802d340 <__sinit>:
 802d340:	b510      	push	{r4, lr}
 802d342:	4604      	mov	r4, r0
 802d344:	f7ff fff0 	bl	802d328 <__sfp_lock_acquire>
 802d348:	6a23      	ldr	r3, [r4, #32]
 802d34a:	b11b      	cbz	r3, 802d354 <__sinit+0x14>
 802d34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d350:	f7ff bff0 	b.w	802d334 <__sfp_lock_release>
 802d354:	4b04      	ldr	r3, [pc, #16]	; (802d368 <__sinit+0x28>)
 802d356:	6223      	str	r3, [r4, #32]
 802d358:	4b04      	ldr	r3, [pc, #16]	; (802d36c <__sinit+0x2c>)
 802d35a:	681b      	ldr	r3, [r3, #0]
 802d35c:	2b00      	cmp	r3, #0
 802d35e:	d1f5      	bne.n	802d34c <__sinit+0xc>
 802d360:	f7ff ffc4 	bl	802d2ec <global_stdio_init.part.0>
 802d364:	e7f2      	b.n	802d34c <__sinit+0xc>
 802d366:	bf00      	nop
 802d368:	0802d2ad 	.word	0x0802d2ad
 802d36c:	2000dae8 	.word	0x2000dae8

0802d370 <fiprintf>:
 802d370:	b40e      	push	{r1, r2, r3}
 802d372:	b503      	push	{r0, r1, lr}
 802d374:	4601      	mov	r1, r0
 802d376:	ab03      	add	r3, sp, #12
 802d378:	4805      	ldr	r0, [pc, #20]	; (802d390 <fiprintf+0x20>)
 802d37a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d37e:	6800      	ldr	r0, [r0, #0]
 802d380:	9301      	str	r3, [sp, #4]
 802d382:	f003 f90b 	bl	803059c <_vfiprintf_r>
 802d386:	b002      	add	sp, #8
 802d388:	f85d eb04 	ldr.w	lr, [sp], #4
 802d38c:	b003      	add	sp, #12
 802d38e:	4770      	bx	lr
 802d390:	20000188 	.word	0x20000188

0802d394 <_fwalk_sglue>:
 802d394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d398:	4607      	mov	r7, r0
 802d39a:	4688      	mov	r8, r1
 802d39c:	4614      	mov	r4, r2
 802d39e:	2600      	movs	r6, #0
 802d3a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d3a4:	f1b9 0901 	subs.w	r9, r9, #1
 802d3a8:	d505      	bpl.n	802d3b6 <_fwalk_sglue+0x22>
 802d3aa:	6824      	ldr	r4, [r4, #0]
 802d3ac:	2c00      	cmp	r4, #0
 802d3ae:	d1f7      	bne.n	802d3a0 <_fwalk_sglue+0xc>
 802d3b0:	4630      	mov	r0, r6
 802d3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d3b6:	89ab      	ldrh	r3, [r5, #12]
 802d3b8:	2b01      	cmp	r3, #1
 802d3ba:	d907      	bls.n	802d3cc <_fwalk_sglue+0x38>
 802d3bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d3c0:	3301      	adds	r3, #1
 802d3c2:	d003      	beq.n	802d3cc <_fwalk_sglue+0x38>
 802d3c4:	4629      	mov	r1, r5
 802d3c6:	4638      	mov	r0, r7
 802d3c8:	47c0      	blx	r8
 802d3ca:	4306      	orrs	r6, r0
 802d3cc:	3568      	adds	r5, #104	; 0x68
 802d3ce:	e7e9      	b.n	802d3a4 <_fwalk_sglue+0x10>

0802d3d0 <iprintf>:
 802d3d0:	b40f      	push	{r0, r1, r2, r3}
 802d3d2:	b507      	push	{r0, r1, r2, lr}
 802d3d4:	4906      	ldr	r1, [pc, #24]	; (802d3f0 <iprintf+0x20>)
 802d3d6:	ab04      	add	r3, sp, #16
 802d3d8:	6808      	ldr	r0, [r1, #0]
 802d3da:	f853 2b04 	ldr.w	r2, [r3], #4
 802d3de:	6881      	ldr	r1, [r0, #8]
 802d3e0:	9301      	str	r3, [sp, #4]
 802d3e2:	f003 f8db 	bl	803059c <_vfiprintf_r>
 802d3e6:	b003      	add	sp, #12
 802d3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 802d3ec:	b004      	add	sp, #16
 802d3ee:	4770      	bx	lr
 802d3f0:	20000188 	.word	0x20000188

0802d3f4 <sniprintf>:
 802d3f4:	b40c      	push	{r2, r3}
 802d3f6:	b530      	push	{r4, r5, lr}
 802d3f8:	4b17      	ldr	r3, [pc, #92]	; (802d458 <sniprintf+0x64>)
 802d3fa:	1e0c      	subs	r4, r1, #0
 802d3fc:	681d      	ldr	r5, [r3, #0]
 802d3fe:	b09d      	sub	sp, #116	; 0x74
 802d400:	da08      	bge.n	802d414 <sniprintf+0x20>
 802d402:	238b      	movs	r3, #139	; 0x8b
 802d404:	602b      	str	r3, [r5, #0]
 802d406:	f04f 30ff 	mov.w	r0, #4294967295
 802d40a:	b01d      	add	sp, #116	; 0x74
 802d40c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d410:	b002      	add	sp, #8
 802d412:	4770      	bx	lr
 802d414:	f44f 7302 	mov.w	r3, #520	; 0x208
 802d418:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d41c:	bf14      	ite	ne
 802d41e:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d422:	4623      	moveq	r3, r4
 802d424:	9304      	str	r3, [sp, #16]
 802d426:	9307      	str	r3, [sp, #28]
 802d428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d42c:	9002      	str	r0, [sp, #8]
 802d42e:	9006      	str	r0, [sp, #24]
 802d430:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d434:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802d436:	ab21      	add	r3, sp, #132	; 0x84
 802d438:	a902      	add	r1, sp, #8
 802d43a:	4628      	mov	r0, r5
 802d43c:	9301      	str	r3, [sp, #4]
 802d43e:	f002 fdb3 	bl	802ffa8 <_svfiprintf_r>
 802d442:	1c43      	adds	r3, r0, #1
 802d444:	bfbc      	itt	lt
 802d446:	238b      	movlt	r3, #139	; 0x8b
 802d448:	602b      	strlt	r3, [r5, #0]
 802d44a:	2c00      	cmp	r4, #0
 802d44c:	d0dd      	beq.n	802d40a <sniprintf+0x16>
 802d44e:	9b02      	ldr	r3, [sp, #8]
 802d450:	2200      	movs	r2, #0
 802d452:	701a      	strb	r2, [r3, #0]
 802d454:	e7d9      	b.n	802d40a <sniprintf+0x16>
 802d456:	bf00      	nop
 802d458:	20000188 	.word	0x20000188

0802d45c <siprintf>:
 802d45c:	b40e      	push	{r1, r2, r3}
 802d45e:	b500      	push	{lr}
 802d460:	b09c      	sub	sp, #112	; 0x70
 802d462:	ab1d      	add	r3, sp, #116	; 0x74
 802d464:	9002      	str	r0, [sp, #8]
 802d466:	9006      	str	r0, [sp, #24]
 802d468:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d46c:	4809      	ldr	r0, [pc, #36]	; (802d494 <siprintf+0x38>)
 802d46e:	9107      	str	r1, [sp, #28]
 802d470:	9104      	str	r1, [sp, #16]
 802d472:	4909      	ldr	r1, [pc, #36]	; (802d498 <siprintf+0x3c>)
 802d474:	f853 2b04 	ldr.w	r2, [r3], #4
 802d478:	9105      	str	r1, [sp, #20]
 802d47a:	6800      	ldr	r0, [r0, #0]
 802d47c:	9301      	str	r3, [sp, #4]
 802d47e:	a902      	add	r1, sp, #8
 802d480:	f002 fd92 	bl	802ffa8 <_svfiprintf_r>
 802d484:	9b02      	ldr	r3, [sp, #8]
 802d486:	2200      	movs	r2, #0
 802d488:	701a      	strb	r2, [r3, #0]
 802d48a:	b01c      	add	sp, #112	; 0x70
 802d48c:	f85d eb04 	ldr.w	lr, [sp], #4
 802d490:	b003      	add	sp, #12
 802d492:	4770      	bx	lr
 802d494:	20000188 	.word	0x20000188
 802d498:	ffff0208 	.word	0xffff0208

0802d49c <siscanf>:
 802d49c:	b40e      	push	{r1, r2, r3}
 802d49e:	b510      	push	{r4, lr}
 802d4a0:	b09f      	sub	sp, #124	; 0x7c
 802d4a2:	ac21      	add	r4, sp, #132	; 0x84
 802d4a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 802d4a8:	f854 2b04 	ldr.w	r2, [r4], #4
 802d4ac:	9201      	str	r2, [sp, #4]
 802d4ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 802d4b2:	9004      	str	r0, [sp, #16]
 802d4b4:	9008      	str	r0, [sp, #32]
 802d4b6:	f7e2 fef3 	bl	80102a0 <strlen>
 802d4ba:	4b0c      	ldr	r3, [pc, #48]	; (802d4ec <siscanf+0x50>)
 802d4bc:	9005      	str	r0, [sp, #20]
 802d4be:	9009      	str	r0, [sp, #36]	; 0x24
 802d4c0:	930d      	str	r3, [sp, #52]	; 0x34
 802d4c2:	480b      	ldr	r0, [pc, #44]	; (802d4f0 <siscanf+0x54>)
 802d4c4:	9a01      	ldr	r2, [sp, #4]
 802d4c6:	6800      	ldr	r0, [r0, #0]
 802d4c8:	9403      	str	r4, [sp, #12]
 802d4ca:	2300      	movs	r3, #0
 802d4cc:	9311      	str	r3, [sp, #68]	; 0x44
 802d4ce:	9316      	str	r3, [sp, #88]	; 0x58
 802d4d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d4d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d4d8:	a904      	add	r1, sp, #16
 802d4da:	4623      	mov	r3, r4
 802d4dc:	f002 febc 	bl	8030258 <__ssvfiscanf_r>
 802d4e0:	b01f      	add	sp, #124	; 0x7c
 802d4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d4e6:	b003      	add	sp, #12
 802d4e8:	4770      	bx	lr
 802d4ea:	bf00      	nop
 802d4ec:	0802d517 	.word	0x0802d517
 802d4f0:	20000188 	.word	0x20000188

0802d4f4 <__sread>:
 802d4f4:	b510      	push	{r4, lr}
 802d4f6:	460c      	mov	r4, r1
 802d4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d4fc:	f000 fa6a 	bl	802d9d4 <_read_r>
 802d500:	2800      	cmp	r0, #0
 802d502:	bfab      	itete	ge
 802d504:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d506:	89a3      	ldrhlt	r3, [r4, #12]
 802d508:	181b      	addge	r3, r3, r0
 802d50a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d50e:	bfac      	ite	ge
 802d510:	6563      	strge	r3, [r4, #84]	; 0x54
 802d512:	81a3      	strhlt	r3, [r4, #12]
 802d514:	bd10      	pop	{r4, pc}

0802d516 <__seofread>:
 802d516:	2000      	movs	r0, #0
 802d518:	4770      	bx	lr

0802d51a <__swrite>:
 802d51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d51e:	461f      	mov	r7, r3
 802d520:	898b      	ldrh	r3, [r1, #12]
 802d522:	05db      	lsls	r3, r3, #23
 802d524:	4605      	mov	r5, r0
 802d526:	460c      	mov	r4, r1
 802d528:	4616      	mov	r6, r2
 802d52a:	d505      	bpl.n	802d538 <__swrite+0x1e>
 802d52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d530:	2302      	movs	r3, #2
 802d532:	2200      	movs	r2, #0
 802d534:	f000 fa3c 	bl	802d9b0 <_lseek_r>
 802d538:	89a3      	ldrh	r3, [r4, #12]
 802d53a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d53e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d542:	81a3      	strh	r3, [r4, #12]
 802d544:	4632      	mov	r2, r6
 802d546:	463b      	mov	r3, r7
 802d548:	4628      	mov	r0, r5
 802d54a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d54e:	f000 ba63 	b.w	802da18 <_write_r>

0802d552 <__sseek>:
 802d552:	b510      	push	{r4, lr}
 802d554:	460c      	mov	r4, r1
 802d556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d55a:	f000 fa29 	bl	802d9b0 <_lseek_r>
 802d55e:	1c43      	adds	r3, r0, #1
 802d560:	89a3      	ldrh	r3, [r4, #12]
 802d562:	bf15      	itete	ne
 802d564:	6560      	strne	r0, [r4, #84]	; 0x54
 802d566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d56a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d56e:	81a3      	strheq	r3, [r4, #12]
 802d570:	bf18      	it	ne
 802d572:	81a3      	strhne	r3, [r4, #12]
 802d574:	bd10      	pop	{r4, pc}

0802d576 <__sclose>:
 802d576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d57a:	f000 b9b3 	b.w	802d8e4 <_close_r>

0802d57e <__swbuf_r>:
 802d57e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d580:	460e      	mov	r6, r1
 802d582:	4614      	mov	r4, r2
 802d584:	4605      	mov	r5, r0
 802d586:	b118      	cbz	r0, 802d590 <__swbuf_r+0x12>
 802d588:	6a03      	ldr	r3, [r0, #32]
 802d58a:	b90b      	cbnz	r3, 802d590 <__swbuf_r+0x12>
 802d58c:	f7ff fed8 	bl	802d340 <__sinit>
 802d590:	69a3      	ldr	r3, [r4, #24]
 802d592:	60a3      	str	r3, [r4, #8]
 802d594:	89a3      	ldrh	r3, [r4, #12]
 802d596:	071a      	lsls	r2, r3, #28
 802d598:	d525      	bpl.n	802d5e6 <__swbuf_r+0x68>
 802d59a:	6923      	ldr	r3, [r4, #16]
 802d59c:	b31b      	cbz	r3, 802d5e6 <__swbuf_r+0x68>
 802d59e:	6823      	ldr	r3, [r4, #0]
 802d5a0:	6922      	ldr	r2, [r4, #16]
 802d5a2:	1a98      	subs	r0, r3, r2
 802d5a4:	6963      	ldr	r3, [r4, #20]
 802d5a6:	b2f6      	uxtb	r6, r6
 802d5a8:	4283      	cmp	r3, r0
 802d5aa:	4637      	mov	r7, r6
 802d5ac:	dc04      	bgt.n	802d5b8 <__swbuf_r+0x3a>
 802d5ae:	4621      	mov	r1, r4
 802d5b0:	4628      	mov	r0, r5
 802d5b2:	f003 fae1 	bl	8030b78 <_fflush_r>
 802d5b6:	b9e0      	cbnz	r0, 802d5f2 <__swbuf_r+0x74>
 802d5b8:	68a3      	ldr	r3, [r4, #8]
 802d5ba:	3b01      	subs	r3, #1
 802d5bc:	60a3      	str	r3, [r4, #8]
 802d5be:	6823      	ldr	r3, [r4, #0]
 802d5c0:	1c5a      	adds	r2, r3, #1
 802d5c2:	6022      	str	r2, [r4, #0]
 802d5c4:	701e      	strb	r6, [r3, #0]
 802d5c6:	6962      	ldr	r2, [r4, #20]
 802d5c8:	1c43      	adds	r3, r0, #1
 802d5ca:	429a      	cmp	r2, r3
 802d5cc:	d004      	beq.n	802d5d8 <__swbuf_r+0x5a>
 802d5ce:	89a3      	ldrh	r3, [r4, #12]
 802d5d0:	07db      	lsls	r3, r3, #31
 802d5d2:	d506      	bpl.n	802d5e2 <__swbuf_r+0x64>
 802d5d4:	2e0a      	cmp	r6, #10
 802d5d6:	d104      	bne.n	802d5e2 <__swbuf_r+0x64>
 802d5d8:	4621      	mov	r1, r4
 802d5da:	4628      	mov	r0, r5
 802d5dc:	f003 facc 	bl	8030b78 <_fflush_r>
 802d5e0:	b938      	cbnz	r0, 802d5f2 <__swbuf_r+0x74>
 802d5e2:	4638      	mov	r0, r7
 802d5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d5e6:	4621      	mov	r1, r4
 802d5e8:	4628      	mov	r0, r5
 802d5ea:	f000 f805 	bl	802d5f8 <__swsetup_r>
 802d5ee:	2800      	cmp	r0, #0
 802d5f0:	d0d5      	beq.n	802d59e <__swbuf_r+0x20>
 802d5f2:	f04f 37ff 	mov.w	r7, #4294967295
 802d5f6:	e7f4      	b.n	802d5e2 <__swbuf_r+0x64>

0802d5f8 <__swsetup_r>:
 802d5f8:	b538      	push	{r3, r4, r5, lr}
 802d5fa:	4b2a      	ldr	r3, [pc, #168]	; (802d6a4 <__swsetup_r+0xac>)
 802d5fc:	4605      	mov	r5, r0
 802d5fe:	6818      	ldr	r0, [r3, #0]
 802d600:	460c      	mov	r4, r1
 802d602:	b118      	cbz	r0, 802d60c <__swsetup_r+0x14>
 802d604:	6a03      	ldr	r3, [r0, #32]
 802d606:	b90b      	cbnz	r3, 802d60c <__swsetup_r+0x14>
 802d608:	f7ff fe9a 	bl	802d340 <__sinit>
 802d60c:	89a3      	ldrh	r3, [r4, #12]
 802d60e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d612:	0718      	lsls	r0, r3, #28
 802d614:	d422      	bmi.n	802d65c <__swsetup_r+0x64>
 802d616:	06d9      	lsls	r1, r3, #27
 802d618:	d407      	bmi.n	802d62a <__swsetup_r+0x32>
 802d61a:	2309      	movs	r3, #9
 802d61c:	602b      	str	r3, [r5, #0]
 802d61e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d622:	81a3      	strh	r3, [r4, #12]
 802d624:	f04f 30ff 	mov.w	r0, #4294967295
 802d628:	e034      	b.n	802d694 <__swsetup_r+0x9c>
 802d62a:	0758      	lsls	r0, r3, #29
 802d62c:	d512      	bpl.n	802d654 <__swsetup_r+0x5c>
 802d62e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d630:	b141      	cbz	r1, 802d644 <__swsetup_r+0x4c>
 802d632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d636:	4299      	cmp	r1, r3
 802d638:	d002      	beq.n	802d640 <__swsetup_r+0x48>
 802d63a:	4628      	mov	r0, r5
 802d63c:	f001 f8ca 	bl	802e7d4 <_free_r>
 802d640:	2300      	movs	r3, #0
 802d642:	6363      	str	r3, [r4, #52]	; 0x34
 802d644:	89a3      	ldrh	r3, [r4, #12]
 802d646:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d64a:	81a3      	strh	r3, [r4, #12]
 802d64c:	2300      	movs	r3, #0
 802d64e:	6063      	str	r3, [r4, #4]
 802d650:	6923      	ldr	r3, [r4, #16]
 802d652:	6023      	str	r3, [r4, #0]
 802d654:	89a3      	ldrh	r3, [r4, #12]
 802d656:	f043 0308 	orr.w	r3, r3, #8
 802d65a:	81a3      	strh	r3, [r4, #12]
 802d65c:	6923      	ldr	r3, [r4, #16]
 802d65e:	b94b      	cbnz	r3, 802d674 <__swsetup_r+0x7c>
 802d660:	89a3      	ldrh	r3, [r4, #12]
 802d662:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802d666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802d66a:	d003      	beq.n	802d674 <__swsetup_r+0x7c>
 802d66c:	4621      	mov	r1, r4
 802d66e:	4628      	mov	r0, r5
 802d670:	f003 fad0 	bl	8030c14 <__smakebuf_r>
 802d674:	89a0      	ldrh	r0, [r4, #12]
 802d676:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d67a:	f010 0301 	ands.w	r3, r0, #1
 802d67e:	d00a      	beq.n	802d696 <__swsetup_r+0x9e>
 802d680:	2300      	movs	r3, #0
 802d682:	60a3      	str	r3, [r4, #8]
 802d684:	6963      	ldr	r3, [r4, #20]
 802d686:	425b      	negs	r3, r3
 802d688:	61a3      	str	r3, [r4, #24]
 802d68a:	6923      	ldr	r3, [r4, #16]
 802d68c:	b943      	cbnz	r3, 802d6a0 <__swsetup_r+0xa8>
 802d68e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802d692:	d1c4      	bne.n	802d61e <__swsetup_r+0x26>
 802d694:	bd38      	pop	{r3, r4, r5, pc}
 802d696:	0781      	lsls	r1, r0, #30
 802d698:	bf58      	it	pl
 802d69a:	6963      	ldrpl	r3, [r4, #20]
 802d69c:	60a3      	str	r3, [r4, #8]
 802d69e:	e7f4      	b.n	802d68a <__swsetup_r+0x92>
 802d6a0:	2000      	movs	r0, #0
 802d6a2:	e7f7      	b.n	802d694 <__swsetup_r+0x9c>
 802d6a4:	20000188 	.word	0x20000188

0802d6a8 <memcmp>:
 802d6a8:	b510      	push	{r4, lr}
 802d6aa:	3901      	subs	r1, #1
 802d6ac:	4402      	add	r2, r0
 802d6ae:	4290      	cmp	r0, r2
 802d6b0:	d101      	bne.n	802d6b6 <memcmp+0xe>
 802d6b2:	2000      	movs	r0, #0
 802d6b4:	e005      	b.n	802d6c2 <memcmp+0x1a>
 802d6b6:	7803      	ldrb	r3, [r0, #0]
 802d6b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d6bc:	42a3      	cmp	r3, r4
 802d6be:	d001      	beq.n	802d6c4 <memcmp+0x1c>
 802d6c0:	1b18      	subs	r0, r3, r4
 802d6c2:	bd10      	pop	{r4, pc}
 802d6c4:	3001      	adds	r0, #1
 802d6c6:	e7f2      	b.n	802d6ae <memcmp+0x6>

0802d6c8 <memmove>:
 802d6c8:	4288      	cmp	r0, r1
 802d6ca:	b510      	push	{r4, lr}
 802d6cc:	eb01 0402 	add.w	r4, r1, r2
 802d6d0:	d902      	bls.n	802d6d8 <memmove+0x10>
 802d6d2:	4284      	cmp	r4, r0
 802d6d4:	4623      	mov	r3, r4
 802d6d6:	d807      	bhi.n	802d6e8 <memmove+0x20>
 802d6d8:	1e43      	subs	r3, r0, #1
 802d6da:	42a1      	cmp	r1, r4
 802d6dc:	d008      	beq.n	802d6f0 <memmove+0x28>
 802d6de:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d6e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d6e6:	e7f8      	b.n	802d6da <memmove+0x12>
 802d6e8:	4402      	add	r2, r0
 802d6ea:	4601      	mov	r1, r0
 802d6ec:	428a      	cmp	r2, r1
 802d6ee:	d100      	bne.n	802d6f2 <memmove+0x2a>
 802d6f0:	bd10      	pop	{r4, pc}
 802d6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802d6f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802d6fa:	e7f7      	b.n	802d6ec <memmove+0x24>

0802d6fc <memset>:
 802d6fc:	4402      	add	r2, r0
 802d6fe:	4603      	mov	r3, r0
 802d700:	4293      	cmp	r3, r2
 802d702:	d100      	bne.n	802d706 <memset+0xa>
 802d704:	4770      	bx	lr
 802d706:	f803 1b01 	strb.w	r1, [r3], #1
 802d70a:	e7f9      	b.n	802d700 <memset+0x4>

0802d70c <strcat>:
 802d70c:	b510      	push	{r4, lr}
 802d70e:	4602      	mov	r2, r0
 802d710:	7814      	ldrb	r4, [r2, #0]
 802d712:	4613      	mov	r3, r2
 802d714:	3201      	adds	r2, #1
 802d716:	2c00      	cmp	r4, #0
 802d718:	d1fa      	bne.n	802d710 <strcat+0x4>
 802d71a:	3b01      	subs	r3, #1
 802d71c:	f811 2b01 	ldrb.w	r2, [r1], #1
 802d720:	f803 2f01 	strb.w	r2, [r3, #1]!
 802d724:	2a00      	cmp	r2, #0
 802d726:	d1f9      	bne.n	802d71c <strcat+0x10>
 802d728:	bd10      	pop	{r4, pc}

0802d72a <strchr>:
 802d72a:	b2c9      	uxtb	r1, r1
 802d72c:	4603      	mov	r3, r0
 802d72e:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d732:	b11a      	cbz	r2, 802d73c <strchr+0x12>
 802d734:	428a      	cmp	r2, r1
 802d736:	d1f9      	bne.n	802d72c <strchr+0x2>
 802d738:	4618      	mov	r0, r3
 802d73a:	4770      	bx	lr
 802d73c:	2900      	cmp	r1, #0
 802d73e:	bf18      	it	ne
 802d740:	2300      	movne	r3, #0
 802d742:	e7f9      	b.n	802d738 <strchr+0xe>

0802d744 <strcspn>:
 802d744:	b570      	push	{r4, r5, r6, lr}
 802d746:	4603      	mov	r3, r0
 802d748:	461e      	mov	r6, r3
 802d74a:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d74e:	b144      	cbz	r4, 802d762 <strcspn+0x1e>
 802d750:	1e4a      	subs	r2, r1, #1
 802d752:	e001      	b.n	802d758 <strcspn+0x14>
 802d754:	42a5      	cmp	r5, r4
 802d756:	d004      	beq.n	802d762 <strcspn+0x1e>
 802d758:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d75c:	2d00      	cmp	r5, #0
 802d75e:	d1f9      	bne.n	802d754 <strcspn+0x10>
 802d760:	e7f2      	b.n	802d748 <strcspn+0x4>
 802d762:	1a30      	subs	r0, r6, r0
 802d764:	bd70      	pop	{r4, r5, r6, pc}

0802d766 <strncat>:
 802d766:	b530      	push	{r4, r5, lr}
 802d768:	4604      	mov	r4, r0
 802d76a:	7825      	ldrb	r5, [r4, #0]
 802d76c:	4623      	mov	r3, r4
 802d76e:	3401      	adds	r4, #1
 802d770:	2d00      	cmp	r5, #0
 802d772:	d1fa      	bne.n	802d76a <strncat+0x4>
 802d774:	3a01      	subs	r2, #1
 802d776:	d304      	bcc.n	802d782 <strncat+0x1c>
 802d778:	f811 4b01 	ldrb.w	r4, [r1], #1
 802d77c:	f803 4b01 	strb.w	r4, [r3], #1
 802d780:	b904      	cbnz	r4, 802d784 <strncat+0x1e>
 802d782:	bd30      	pop	{r4, r5, pc}
 802d784:	2a00      	cmp	r2, #0
 802d786:	d1f5      	bne.n	802d774 <strncat+0xe>
 802d788:	701a      	strb	r2, [r3, #0]
 802d78a:	e7f3      	b.n	802d774 <strncat+0xe>

0802d78c <strncmp>:
 802d78c:	b510      	push	{r4, lr}
 802d78e:	b16a      	cbz	r2, 802d7ac <strncmp+0x20>
 802d790:	3901      	subs	r1, #1
 802d792:	1884      	adds	r4, r0, r2
 802d794:	f810 2b01 	ldrb.w	r2, [r0], #1
 802d798:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802d79c:	429a      	cmp	r2, r3
 802d79e:	d103      	bne.n	802d7a8 <strncmp+0x1c>
 802d7a0:	42a0      	cmp	r0, r4
 802d7a2:	d001      	beq.n	802d7a8 <strncmp+0x1c>
 802d7a4:	2a00      	cmp	r2, #0
 802d7a6:	d1f5      	bne.n	802d794 <strncmp+0x8>
 802d7a8:	1ad0      	subs	r0, r2, r3
 802d7aa:	bd10      	pop	{r4, pc}
 802d7ac:	4610      	mov	r0, r2
 802d7ae:	e7fc      	b.n	802d7aa <strncmp+0x1e>

0802d7b0 <strncpy>:
 802d7b0:	b510      	push	{r4, lr}
 802d7b2:	3901      	subs	r1, #1
 802d7b4:	4603      	mov	r3, r0
 802d7b6:	b132      	cbz	r2, 802d7c6 <strncpy+0x16>
 802d7b8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802d7bc:	f803 4b01 	strb.w	r4, [r3], #1
 802d7c0:	3a01      	subs	r2, #1
 802d7c2:	2c00      	cmp	r4, #0
 802d7c4:	d1f7      	bne.n	802d7b6 <strncpy+0x6>
 802d7c6:	441a      	add	r2, r3
 802d7c8:	2100      	movs	r1, #0
 802d7ca:	4293      	cmp	r3, r2
 802d7cc:	d100      	bne.n	802d7d0 <strncpy+0x20>
 802d7ce:	bd10      	pop	{r4, pc}
 802d7d0:	f803 1b01 	strb.w	r1, [r3], #1
 802d7d4:	e7f9      	b.n	802d7ca <strncpy+0x1a>

0802d7d6 <strspn>:
 802d7d6:	b570      	push	{r4, r5, r6, lr}
 802d7d8:	4603      	mov	r3, r0
 802d7da:	461e      	mov	r6, r3
 802d7dc:	f813 4b01 	ldrb.w	r4, [r3], #1
 802d7e0:	b13c      	cbz	r4, 802d7f2 <strspn+0x1c>
 802d7e2:	1e4a      	subs	r2, r1, #1
 802d7e4:	e001      	b.n	802d7ea <strspn+0x14>
 802d7e6:	42a5      	cmp	r5, r4
 802d7e8:	d0f7      	beq.n	802d7da <strspn+0x4>
 802d7ea:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802d7ee:	2d00      	cmp	r5, #0
 802d7f0:	d1f9      	bne.n	802d7e6 <strspn+0x10>
 802d7f2:	1a30      	subs	r0, r6, r0
 802d7f4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802d7f8 <strtok>:
 802d7f8:	4b16      	ldr	r3, [pc, #88]	; (802d854 <strtok+0x5c>)
 802d7fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802d7fc:	681e      	ldr	r6, [r3, #0]
 802d7fe:	6c74      	ldr	r4, [r6, #68]	; 0x44
 802d800:	4605      	mov	r5, r0
 802d802:	b9fc      	cbnz	r4, 802d844 <strtok+0x4c>
 802d804:	2050      	movs	r0, #80	; 0x50
 802d806:	9101      	str	r1, [sp, #4]
 802d808:	f7fe fddc 	bl	802c3c4 <malloc>
 802d80c:	9901      	ldr	r1, [sp, #4]
 802d80e:	6470      	str	r0, [r6, #68]	; 0x44
 802d810:	4602      	mov	r2, r0
 802d812:	b920      	cbnz	r0, 802d81e <strtok+0x26>
 802d814:	4b10      	ldr	r3, [pc, #64]	; (802d858 <strtok+0x60>)
 802d816:	4811      	ldr	r0, [pc, #68]	; (802d85c <strtok+0x64>)
 802d818:	215b      	movs	r1, #91	; 0x5b
 802d81a:	f7fe fd9f 	bl	802c35c <__assert_func>
 802d81e:	e9c0 4400 	strd	r4, r4, [r0]
 802d822:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802d826:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802d82a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802d82e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802d832:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802d836:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802d83a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802d83e:	6184      	str	r4, [r0, #24]
 802d840:	7704      	strb	r4, [r0, #28]
 802d842:	6244      	str	r4, [r0, #36]	; 0x24
 802d844:	6c72      	ldr	r2, [r6, #68]	; 0x44
 802d846:	2301      	movs	r3, #1
 802d848:	4628      	mov	r0, r5
 802d84a:	b002      	add	sp, #8
 802d84c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d850:	f000 b806 	b.w	802d860 <__strtok_r>
 802d854:	20000188 	.word	0x20000188
 802d858:	080348c3 	.word	0x080348c3
 802d85c:	080348da 	.word	0x080348da

0802d860 <__strtok_r>:
 802d860:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d862:	b908      	cbnz	r0, 802d868 <__strtok_r+0x8>
 802d864:	6810      	ldr	r0, [r2, #0]
 802d866:	b188      	cbz	r0, 802d88c <__strtok_r+0x2c>
 802d868:	4604      	mov	r4, r0
 802d86a:	4620      	mov	r0, r4
 802d86c:	f814 5b01 	ldrb.w	r5, [r4], #1
 802d870:	460f      	mov	r7, r1
 802d872:	f817 6b01 	ldrb.w	r6, [r7], #1
 802d876:	b91e      	cbnz	r6, 802d880 <__strtok_r+0x20>
 802d878:	b965      	cbnz	r5, 802d894 <__strtok_r+0x34>
 802d87a:	6015      	str	r5, [r2, #0]
 802d87c:	4628      	mov	r0, r5
 802d87e:	e005      	b.n	802d88c <__strtok_r+0x2c>
 802d880:	42b5      	cmp	r5, r6
 802d882:	d1f6      	bne.n	802d872 <__strtok_r+0x12>
 802d884:	2b00      	cmp	r3, #0
 802d886:	d1f0      	bne.n	802d86a <__strtok_r+0xa>
 802d888:	6014      	str	r4, [r2, #0]
 802d88a:	7003      	strb	r3, [r0, #0]
 802d88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d88e:	461c      	mov	r4, r3
 802d890:	e00c      	b.n	802d8ac <__strtok_r+0x4c>
 802d892:	b915      	cbnz	r5, 802d89a <__strtok_r+0x3a>
 802d894:	f814 3b01 	ldrb.w	r3, [r4], #1
 802d898:	460e      	mov	r6, r1
 802d89a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802d89e:	42ab      	cmp	r3, r5
 802d8a0:	d1f7      	bne.n	802d892 <__strtok_r+0x32>
 802d8a2:	2b00      	cmp	r3, #0
 802d8a4:	d0f3      	beq.n	802d88e <__strtok_r+0x2e>
 802d8a6:	2300      	movs	r3, #0
 802d8a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 802d8ac:	6014      	str	r4, [r2, #0]
 802d8ae:	e7ed      	b.n	802d88c <__strtok_r+0x2c>

0802d8b0 <strstr>:
 802d8b0:	780a      	ldrb	r2, [r1, #0]
 802d8b2:	b570      	push	{r4, r5, r6, lr}
 802d8b4:	b96a      	cbnz	r2, 802d8d2 <strstr+0x22>
 802d8b6:	bd70      	pop	{r4, r5, r6, pc}
 802d8b8:	429a      	cmp	r2, r3
 802d8ba:	d109      	bne.n	802d8d0 <strstr+0x20>
 802d8bc:	460c      	mov	r4, r1
 802d8be:	4605      	mov	r5, r0
 802d8c0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802d8c4:	2b00      	cmp	r3, #0
 802d8c6:	d0f6      	beq.n	802d8b6 <strstr+0x6>
 802d8c8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802d8cc:	429e      	cmp	r6, r3
 802d8ce:	d0f7      	beq.n	802d8c0 <strstr+0x10>
 802d8d0:	3001      	adds	r0, #1
 802d8d2:	7803      	ldrb	r3, [r0, #0]
 802d8d4:	2b00      	cmp	r3, #0
 802d8d6:	d1ef      	bne.n	802d8b8 <strstr+0x8>
 802d8d8:	4618      	mov	r0, r3
 802d8da:	e7ec      	b.n	802d8b6 <strstr+0x6>

0802d8dc <_localeconv_r>:
 802d8dc:	4800      	ldr	r0, [pc, #0]	; (802d8e0 <_localeconv_r+0x4>)
 802d8de:	4770      	bx	lr
 802d8e0:	2000027c 	.word	0x2000027c

0802d8e4 <_close_r>:
 802d8e4:	b538      	push	{r3, r4, r5, lr}
 802d8e6:	4d06      	ldr	r5, [pc, #24]	; (802d900 <_close_r+0x1c>)
 802d8e8:	2300      	movs	r3, #0
 802d8ea:	4604      	mov	r4, r0
 802d8ec:	4608      	mov	r0, r1
 802d8ee:	602b      	str	r3, [r5, #0]
 802d8f0:	f7e5 f947 	bl	8012b82 <_close>
 802d8f4:	1c43      	adds	r3, r0, #1
 802d8f6:	d102      	bne.n	802d8fe <_close_r+0x1a>
 802d8f8:	682b      	ldr	r3, [r5, #0]
 802d8fa:	b103      	cbz	r3, 802d8fe <_close_r+0x1a>
 802d8fc:	6023      	str	r3, [r4, #0]
 802d8fe:	bd38      	pop	{r3, r4, r5, pc}
 802d900:	2000daec 	.word	0x2000daec

0802d904 <_reclaim_reent>:
 802d904:	4b29      	ldr	r3, [pc, #164]	; (802d9ac <_reclaim_reent+0xa8>)
 802d906:	681b      	ldr	r3, [r3, #0]
 802d908:	4283      	cmp	r3, r0
 802d90a:	b570      	push	{r4, r5, r6, lr}
 802d90c:	4604      	mov	r4, r0
 802d90e:	d04b      	beq.n	802d9a8 <_reclaim_reent+0xa4>
 802d910:	69c3      	ldr	r3, [r0, #28]
 802d912:	b143      	cbz	r3, 802d926 <_reclaim_reent+0x22>
 802d914:	68db      	ldr	r3, [r3, #12]
 802d916:	2b00      	cmp	r3, #0
 802d918:	d144      	bne.n	802d9a4 <_reclaim_reent+0xa0>
 802d91a:	69e3      	ldr	r3, [r4, #28]
 802d91c:	6819      	ldr	r1, [r3, #0]
 802d91e:	b111      	cbz	r1, 802d926 <_reclaim_reent+0x22>
 802d920:	4620      	mov	r0, r4
 802d922:	f000 ff57 	bl	802e7d4 <_free_r>
 802d926:	6961      	ldr	r1, [r4, #20]
 802d928:	b111      	cbz	r1, 802d930 <_reclaim_reent+0x2c>
 802d92a:	4620      	mov	r0, r4
 802d92c:	f000 ff52 	bl	802e7d4 <_free_r>
 802d930:	69e1      	ldr	r1, [r4, #28]
 802d932:	b111      	cbz	r1, 802d93a <_reclaim_reent+0x36>
 802d934:	4620      	mov	r0, r4
 802d936:	f000 ff4d 	bl	802e7d4 <_free_r>
 802d93a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802d93c:	b111      	cbz	r1, 802d944 <_reclaim_reent+0x40>
 802d93e:	4620      	mov	r0, r4
 802d940:	f000 ff48 	bl	802e7d4 <_free_r>
 802d944:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d946:	b111      	cbz	r1, 802d94e <_reclaim_reent+0x4a>
 802d948:	4620      	mov	r0, r4
 802d94a:	f000 ff43 	bl	802e7d4 <_free_r>
 802d94e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802d950:	b111      	cbz	r1, 802d958 <_reclaim_reent+0x54>
 802d952:	4620      	mov	r0, r4
 802d954:	f000 ff3e 	bl	802e7d4 <_free_r>
 802d958:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802d95a:	b111      	cbz	r1, 802d962 <_reclaim_reent+0x5e>
 802d95c:	4620      	mov	r0, r4
 802d95e:	f000 ff39 	bl	802e7d4 <_free_r>
 802d962:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802d964:	b111      	cbz	r1, 802d96c <_reclaim_reent+0x68>
 802d966:	4620      	mov	r0, r4
 802d968:	f000 ff34 	bl	802e7d4 <_free_r>
 802d96c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802d96e:	b111      	cbz	r1, 802d976 <_reclaim_reent+0x72>
 802d970:	4620      	mov	r0, r4
 802d972:	f000 ff2f 	bl	802e7d4 <_free_r>
 802d976:	6a23      	ldr	r3, [r4, #32]
 802d978:	b1b3      	cbz	r3, 802d9a8 <_reclaim_reent+0xa4>
 802d97a:	4620      	mov	r0, r4
 802d97c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802d980:	4718      	bx	r3
 802d982:	5949      	ldr	r1, [r1, r5]
 802d984:	b941      	cbnz	r1, 802d998 <_reclaim_reent+0x94>
 802d986:	3504      	adds	r5, #4
 802d988:	69e3      	ldr	r3, [r4, #28]
 802d98a:	2d80      	cmp	r5, #128	; 0x80
 802d98c:	68d9      	ldr	r1, [r3, #12]
 802d98e:	d1f8      	bne.n	802d982 <_reclaim_reent+0x7e>
 802d990:	4620      	mov	r0, r4
 802d992:	f000 ff1f 	bl	802e7d4 <_free_r>
 802d996:	e7c0      	b.n	802d91a <_reclaim_reent+0x16>
 802d998:	680e      	ldr	r6, [r1, #0]
 802d99a:	4620      	mov	r0, r4
 802d99c:	f000 ff1a 	bl	802e7d4 <_free_r>
 802d9a0:	4631      	mov	r1, r6
 802d9a2:	e7ef      	b.n	802d984 <_reclaim_reent+0x80>
 802d9a4:	2500      	movs	r5, #0
 802d9a6:	e7ef      	b.n	802d988 <_reclaim_reent+0x84>
 802d9a8:	bd70      	pop	{r4, r5, r6, pc}
 802d9aa:	bf00      	nop
 802d9ac:	20000188 	.word	0x20000188

0802d9b0 <_lseek_r>:
 802d9b0:	b538      	push	{r3, r4, r5, lr}
 802d9b2:	4d07      	ldr	r5, [pc, #28]	; (802d9d0 <_lseek_r+0x20>)
 802d9b4:	4604      	mov	r4, r0
 802d9b6:	4608      	mov	r0, r1
 802d9b8:	4611      	mov	r1, r2
 802d9ba:	2200      	movs	r2, #0
 802d9bc:	602a      	str	r2, [r5, #0]
 802d9be:	461a      	mov	r2, r3
 802d9c0:	f7e5 f906 	bl	8012bd0 <_lseek>
 802d9c4:	1c43      	adds	r3, r0, #1
 802d9c6:	d102      	bne.n	802d9ce <_lseek_r+0x1e>
 802d9c8:	682b      	ldr	r3, [r5, #0]
 802d9ca:	b103      	cbz	r3, 802d9ce <_lseek_r+0x1e>
 802d9cc:	6023      	str	r3, [r4, #0]
 802d9ce:	bd38      	pop	{r3, r4, r5, pc}
 802d9d0:	2000daec 	.word	0x2000daec

0802d9d4 <_read_r>:
 802d9d4:	b538      	push	{r3, r4, r5, lr}
 802d9d6:	4d07      	ldr	r5, [pc, #28]	; (802d9f4 <_read_r+0x20>)
 802d9d8:	4604      	mov	r4, r0
 802d9da:	4608      	mov	r0, r1
 802d9dc:	4611      	mov	r1, r2
 802d9de:	2200      	movs	r2, #0
 802d9e0:	602a      	str	r2, [r5, #0]
 802d9e2:	461a      	mov	r2, r3
 802d9e4:	f7e5 f894 	bl	8012b10 <_read>
 802d9e8:	1c43      	adds	r3, r0, #1
 802d9ea:	d102      	bne.n	802d9f2 <_read_r+0x1e>
 802d9ec:	682b      	ldr	r3, [r5, #0]
 802d9ee:	b103      	cbz	r3, 802d9f2 <_read_r+0x1e>
 802d9f0:	6023      	str	r3, [r4, #0]
 802d9f2:	bd38      	pop	{r3, r4, r5, pc}
 802d9f4:	2000daec 	.word	0x2000daec

0802d9f8 <_sbrk_r>:
 802d9f8:	b538      	push	{r3, r4, r5, lr}
 802d9fa:	4d06      	ldr	r5, [pc, #24]	; (802da14 <_sbrk_r+0x1c>)
 802d9fc:	2300      	movs	r3, #0
 802d9fe:	4604      	mov	r4, r0
 802da00:	4608      	mov	r0, r1
 802da02:	602b      	str	r3, [r5, #0]
 802da04:	f7e5 f8f2 	bl	8012bec <_sbrk>
 802da08:	1c43      	adds	r3, r0, #1
 802da0a:	d102      	bne.n	802da12 <_sbrk_r+0x1a>
 802da0c:	682b      	ldr	r3, [r5, #0]
 802da0e:	b103      	cbz	r3, 802da12 <_sbrk_r+0x1a>
 802da10:	6023      	str	r3, [r4, #0]
 802da12:	bd38      	pop	{r3, r4, r5, pc}
 802da14:	2000daec 	.word	0x2000daec

0802da18 <_write_r>:
 802da18:	b538      	push	{r3, r4, r5, lr}
 802da1a:	4d07      	ldr	r5, [pc, #28]	; (802da38 <_write_r+0x20>)
 802da1c:	4604      	mov	r4, r0
 802da1e:	4608      	mov	r0, r1
 802da20:	4611      	mov	r1, r2
 802da22:	2200      	movs	r2, #0
 802da24:	602a      	str	r2, [r5, #0]
 802da26:	461a      	mov	r2, r3
 802da28:	f7e5 f88f 	bl	8012b4a <_write>
 802da2c:	1c43      	adds	r3, r0, #1
 802da2e:	d102      	bne.n	802da36 <_write_r+0x1e>
 802da30:	682b      	ldr	r3, [r5, #0]
 802da32:	b103      	cbz	r3, 802da36 <_write_r+0x1e>
 802da34:	6023      	str	r3, [r4, #0]
 802da36:	bd38      	pop	{r3, r4, r5, pc}
 802da38:	2000daec 	.word	0x2000daec

0802da3c <__errno>:
 802da3c:	4b01      	ldr	r3, [pc, #4]	; (802da44 <__errno+0x8>)
 802da3e:	6818      	ldr	r0, [r3, #0]
 802da40:	4770      	bx	lr
 802da42:	bf00      	nop
 802da44:	20000188 	.word	0x20000188

0802da48 <__libc_init_array>:
 802da48:	b570      	push	{r4, r5, r6, lr}
 802da4a:	4d0d      	ldr	r5, [pc, #52]	; (802da80 <__libc_init_array+0x38>)
 802da4c:	4c0d      	ldr	r4, [pc, #52]	; (802da84 <__libc_init_array+0x3c>)
 802da4e:	1b64      	subs	r4, r4, r5
 802da50:	10a4      	asrs	r4, r4, #2
 802da52:	2600      	movs	r6, #0
 802da54:	42a6      	cmp	r6, r4
 802da56:	d109      	bne.n	802da6c <__libc_init_array+0x24>
 802da58:	4d0b      	ldr	r5, [pc, #44]	; (802da88 <__libc_init_array+0x40>)
 802da5a:	4c0c      	ldr	r4, [pc, #48]	; (802da8c <__libc_init_array+0x44>)
 802da5c:	f003 fe1a 	bl	8031694 <_init>
 802da60:	1b64      	subs	r4, r4, r5
 802da62:	10a4      	asrs	r4, r4, #2
 802da64:	2600      	movs	r6, #0
 802da66:	42a6      	cmp	r6, r4
 802da68:	d105      	bne.n	802da76 <__libc_init_array+0x2e>
 802da6a:	bd70      	pop	{r4, r5, r6, pc}
 802da6c:	f855 3b04 	ldr.w	r3, [r5], #4
 802da70:	4798      	blx	r3
 802da72:	3601      	adds	r6, #1
 802da74:	e7ee      	b.n	802da54 <__libc_init_array+0xc>
 802da76:	f855 3b04 	ldr.w	r3, [r5], #4
 802da7a:	4798      	blx	r3
 802da7c:	3601      	adds	r6, #1
 802da7e:	e7f2      	b.n	802da66 <__libc_init_array+0x1e>
 802da80:	08034cf8 	.word	0x08034cf8
 802da84:	08034cf8 	.word	0x08034cf8
 802da88:	08034cf8 	.word	0x08034cf8
 802da8c:	08034cfc 	.word	0x08034cfc

0802da90 <__retarget_lock_init_recursive>:
 802da90:	4770      	bx	lr

0802da92 <__retarget_lock_acquire_recursive>:
 802da92:	4770      	bx	lr

0802da94 <__retarget_lock_release_recursive>:
 802da94:	4770      	bx	lr

0802da96 <strcpy>:
 802da96:	4603      	mov	r3, r0
 802da98:	f811 2b01 	ldrb.w	r2, [r1], #1
 802da9c:	f803 2b01 	strb.w	r2, [r3], #1
 802daa0:	2a00      	cmp	r2, #0
 802daa2:	d1f9      	bne.n	802da98 <strcpy+0x2>
 802daa4:	4770      	bx	lr

0802daa6 <memcpy>:
 802daa6:	440a      	add	r2, r1
 802daa8:	4291      	cmp	r1, r2
 802daaa:	f100 33ff 	add.w	r3, r0, #4294967295
 802daae:	d100      	bne.n	802dab2 <memcpy+0xc>
 802dab0:	4770      	bx	lr
 802dab2:	b510      	push	{r4, lr}
 802dab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802dab8:	f803 4f01 	strb.w	r4, [r3, #1]!
 802dabc:	4291      	cmp	r1, r2
 802dabe:	d1f9      	bne.n	802dab4 <memcpy+0xe>
 802dac0:	bd10      	pop	{r4, pc}
	...

0802dac4 <nanf>:
 802dac4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802dacc <nanf+0x8>
 802dac8:	4770      	bx	lr
 802daca:	bf00      	nop
 802dacc:	7fc00000 	.word	0x7fc00000

0802dad0 <abort>:
 802dad0:	b508      	push	{r3, lr}
 802dad2:	2006      	movs	r0, #6
 802dad4:	f003 f976 	bl	8030dc4 <raise>
 802dad8:	2001      	movs	r0, #1
 802dada:	f7e5 f80f 	bl	8012afc <_exit>

0802dade <quorem>:
 802dade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dae2:	6903      	ldr	r3, [r0, #16]
 802dae4:	690c      	ldr	r4, [r1, #16]
 802dae6:	42a3      	cmp	r3, r4
 802dae8:	4607      	mov	r7, r0
 802daea:	db7e      	blt.n	802dbea <quorem+0x10c>
 802daec:	3c01      	subs	r4, #1
 802daee:	f101 0814 	add.w	r8, r1, #20
 802daf2:	f100 0514 	add.w	r5, r0, #20
 802daf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802dafa:	9301      	str	r3, [sp, #4]
 802dafc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802db00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802db04:	3301      	adds	r3, #1
 802db06:	429a      	cmp	r2, r3
 802db08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802db0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802db10:	fbb2 f6f3 	udiv	r6, r2, r3
 802db14:	d331      	bcc.n	802db7a <quorem+0x9c>
 802db16:	f04f 0e00 	mov.w	lr, #0
 802db1a:	4640      	mov	r0, r8
 802db1c:	46ac      	mov	ip, r5
 802db1e:	46f2      	mov	sl, lr
 802db20:	f850 2b04 	ldr.w	r2, [r0], #4
 802db24:	b293      	uxth	r3, r2
 802db26:	fb06 e303 	mla	r3, r6, r3, lr
 802db2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802db2e:	0c1a      	lsrs	r2, r3, #16
 802db30:	b29b      	uxth	r3, r3
 802db32:	ebaa 0303 	sub.w	r3, sl, r3
 802db36:	f8dc a000 	ldr.w	sl, [ip]
 802db3a:	fa13 f38a 	uxtah	r3, r3, sl
 802db3e:	fb06 220e 	mla	r2, r6, lr, r2
 802db42:	9300      	str	r3, [sp, #0]
 802db44:	9b00      	ldr	r3, [sp, #0]
 802db46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802db4a:	b292      	uxth	r2, r2
 802db4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802db50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802db54:	f8bd 3000 	ldrh.w	r3, [sp]
 802db58:	4581      	cmp	r9, r0
 802db5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802db5e:	f84c 3b04 	str.w	r3, [ip], #4
 802db62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802db66:	d2db      	bcs.n	802db20 <quorem+0x42>
 802db68:	f855 300b 	ldr.w	r3, [r5, fp]
 802db6c:	b92b      	cbnz	r3, 802db7a <quorem+0x9c>
 802db6e:	9b01      	ldr	r3, [sp, #4]
 802db70:	3b04      	subs	r3, #4
 802db72:	429d      	cmp	r5, r3
 802db74:	461a      	mov	r2, r3
 802db76:	d32c      	bcc.n	802dbd2 <quorem+0xf4>
 802db78:	613c      	str	r4, [r7, #16]
 802db7a:	4638      	mov	r0, r7
 802db7c:	f001 f93c 	bl	802edf8 <__mcmp>
 802db80:	2800      	cmp	r0, #0
 802db82:	db22      	blt.n	802dbca <quorem+0xec>
 802db84:	3601      	adds	r6, #1
 802db86:	4629      	mov	r1, r5
 802db88:	2000      	movs	r0, #0
 802db8a:	f858 2b04 	ldr.w	r2, [r8], #4
 802db8e:	f8d1 c000 	ldr.w	ip, [r1]
 802db92:	b293      	uxth	r3, r2
 802db94:	1ac3      	subs	r3, r0, r3
 802db96:	0c12      	lsrs	r2, r2, #16
 802db98:	fa13 f38c 	uxtah	r3, r3, ip
 802db9c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802dba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802dba4:	b29b      	uxth	r3, r3
 802dba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802dbaa:	45c1      	cmp	r9, r8
 802dbac:	f841 3b04 	str.w	r3, [r1], #4
 802dbb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 802dbb4:	d2e9      	bcs.n	802db8a <quorem+0xac>
 802dbb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802dbba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802dbbe:	b922      	cbnz	r2, 802dbca <quorem+0xec>
 802dbc0:	3b04      	subs	r3, #4
 802dbc2:	429d      	cmp	r5, r3
 802dbc4:	461a      	mov	r2, r3
 802dbc6:	d30a      	bcc.n	802dbde <quorem+0x100>
 802dbc8:	613c      	str	r4, [r7, #16]
 802dbca:	4630      	mov	r0, r6
 802dbcc:	b003      	add	sp, #12
 802dbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dbd2:	6812      	ldr	r2, [r2, #0]
 802dbd4:	3b04      	subs	r3, #4
 802dbd6:	2a00      	cmp	r2, #0
 802dbd8:	d1ce      	bne.n	802db78 <quorem+0x9a>
 802dbda:	3c01      	subs	r4, #1
 802dbdc:	e7c9      	b.n	802db72 <quorem+0x94>
 802dbde:	6812      	ldr	r2, [r2, #0]
 802dbe0:	3b04      	subs	r3, #4
 802dbe2:	2a00      	cmp	r2, #0
 802dbe4:	d1f0      	bne.n	802dbc8 <quorem+0xea>
 802dbe6:	3c01      	subs	r4, #1
 802dbe8:	e7eb      	b.n	802dbc2 <quorem+0xe4>
 802dbea:	2000      	movs	r0, #0
 802dbec:	e7ee      	b.n	802dbcc <quorem+0xee>
	...

0802dbf0 <_dtoa_r>:
 802dbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dbf4:	ed2d 8b04 	vpush	{d8-d9}
 802dbf8:	69c5      	ldr	r5, [r0, #28]
 802dbfa:	b093      	sub	sp, #76	; 0x4c
 802dbfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 802dc00:	ec57 6b10 	vmov	r6, r7, d0
 802dc04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802dc08:	9107      	str	r1, [sp, #28]
 802dc0a:	4604      	mov	r4, r0
 802dc0c:	920a      	str	r2, [sp, #40]	; 0x28
 802dc0e:	930d      	str	r3, [sp, #52]	; 0x34
 802dc10:	b975      	cbnz	r5, 802dc30 <_dtoa_r+0x40>
 802dc12:	2010      	movs	r0, #16
 802dc14:	f7fe fbd6 	bl	802c3c4 <malloc>
 802dc18:	4602      	mov	r2, r0
 802dc1a:	61e0      	str	r0, [r4, #28]
 802dc1c:	b920      	cbnz	r0, 802dc28 <_dtoa_r+0x38>
 802dc1e:	4bae      	ldr	r3, [pc, #696]	; (802ded8 <_dtoa_r+0x2e8>)
 802dc20:	21ef      	movs	r1, #239	; 0xef
 802dc22:	48ae      	ldr	r0, [pc, #696]	; (802dedc <_dtoa_r+0x2ec>)
 802dc24:	f7fe fb9a 	bl	802c35c <__assert_func>
 802dc28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802dc2c:	6005      	str	r5, [r0, #0]
 802dc2e:	60c5      	str	r5, [r0, #12]
 802dc30:	69e3      	ldr	r3, [r4, #28]
 802dc32:	6819      	ldr	r1, [r3, #0]
 802dc34:	b151      	cbz	r1, 802dc4c <_dtoa_r+0x5c>
 802dc36:	685a      	ldr	r2, [r3, #4]
 802dc38:	604a      	str	r2, [r1, #4]
 802dc3a:	2301      	movs	r3, #1
 802dc3c:	4093      	lsls	r3, r2
 802dc3e:	608b      	str	r3, [r1, #8]
 802dc40:	4620      	mov	r0, r4
 802dc42:	f000 fe53 	bl	802e8ec <_Bfree>
 802dc46:	69e3      	ldr	r3, [r4, #28]
 802dc48:	2200      	movs	r2, #0
 802dc4a:	601a      	str	r2, [r3, #0]
 802dc4c:	1e3b      	subs	r3, r7, #0
 802dc4e:	bfbb      	ittet	lt
 802dc50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802dc54:	9303      	strlt	r3, [sp, #12]
 802dc56:	2300      	movge	r3, #0
 802dc58:	2201      	movlt	r2, #1
 802dc5a:	bfac      	ite	ge
 802dc5c:	f8c8 3000 	strge.w	r3, [r8]
 802dc60:	f8c8 2000 	strlt.w	r2, [r8]
 802dc64:	4b9e      	ldr	r3, [pc, #632]	; (802dee0 <_dtoa_r+0x2f0>)
 802dc66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802dc6a:	ea33 0308 	bics.w	r3, r3, r8
 802dc6e:	d11b      	bne.n	802dca8 <_dtoa_r+0xb8>
 802dc70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802dc72:	f242 730f 	movw	r3, #9999	; 0x270f
 802dc76:	6013      	str	r3, [r2, #0]
 802dc78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802dc7c:	4333      	orrs	r3, r6
 802dc7e:	f000 8593 	beq.w	802e7a8 <_dtoa_r+0xbb8>
 802dc82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802dc84:	b963      	cbnz	r3, 802dca0 <_dtoa_r+0xb0>
 802dc86:	4b97      	ldr	r3, [pc, #604]	; (802dee4 <_dtoa_r+0x2f4>)
 802dc88:	e027      	b.n	802dcda <_dtoa_r+0xea>
 802dc8a:	4b97      	ldr	r3, [pc, #604]	; (802dee8 <_dtoa_r+0x2f8>)
 802dc8c:	9300      	str	r3, [sp, #0]
 802dc8e:	3308      	adds	r3, #8
 802dc90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802dc92:	6013      	str	r3, [r2, #0]
 802dc94:	9800      	ldr	r0, [sp, #0]
 802dc96:	b013      	add	sp, #76	; 0x4c
 802dc98:	ecbd 8b04 	vpop	{d8-d9}
 802dc9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802dca0:	4b90      	ldr	r3, [pc, #576]	; (802dee4 <_dtoa_r+0x2f4>)
 802dca2:	9300      	str	r3, [sp, #0]
 802dca4:	3303      	adds	r3, #3
 802dca6:	e7f3      	b.n	802dc90 <_dtoa_r+0xa0>
 802dca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 802dcac:	2200      	movs	r2, #0
 802dcae:	ec51 0b17 	vmov	r0, r1, d7
 802dcb2:	eeb0 8a47 	vmov.f32	s16, s14
 802dcb6:	eef0 8a67 	vmov.f32	s17, s15
 802dcba:	2300      	movs	r3, #0
 802dcbc:	f7e2 ff1c 	bl	8010af8 <__aeabi_dcmpeq>
 802dcc0:	4681      	mov	r9, r0
 802dcc2:	b160      	cbz	r0, 802dcde <_dtoa_r+0xee>
 802dcc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802dcc6:	2301      	movs	r3, #1
 802dcc8:	6013      	str	r3, [r2, #0]
 802dcca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802dccc:	2b00      	cmp	r3, #0
 802dcce:	f000 8568 	beq.w	802e7a2 <_dtoa_r+0xbb2>
 802dcd2:	4b86      	ldr	r3, [pc, #536]	; (802deec <_dtoa_r+0x2fc>)
 802dcd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802dcd6:	6013      	str	r3, [r2, #0]
 802dcd8:	3b01      	subs	r3, #1
 802dcda:	9300      	str	r3, [sp, #0]
 802dcdc:	e7da      	b.n	802dc94 <_dtoa_r+0xa4>
 802dcde:	aa10      	add	r2, sp, #64	; 0x40
 802dce0:	a911      	add	r1, sp, #68	; 0x44
 802dce2:	4620      	mov	r0, r4
 802dce4:	eeb0 0a48 	vmov.f32	s0, s16
 802dce8:	eef0 0a68 	vmov.f32	s1, s17
 802dcec:	f001 f99a 	bl	802f024 <__d2b>
 802dcf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802dcf4:	4682      	mov	sl, r0
 802dcf6:	2d00      	cmp	r5, #0
 802dcf8:	d07f      	beq.n	802ddfa <_dtoa_r+0x20a>
 802dcfa:	ee18 3a90 	vmov	r3, s17
 802dcfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802dd02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802dd06:	ec51 0b18 	vmov	r0, r1, d8
 802dd0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802dd0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802dd12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802dd16:	4619      	mov	r1, r3
 802dd18:	2200      	movs	r2, #0
 802dd1a:	4b75      	ldr	r3, [pc, #468]	; (802def0 <_dtoa_r+0x300>)
 802dd1c:	f7e2 facc 	bl	80102b8 <__aeabi_dsub>
 802dd20:	a367      	add	r3, pc, #412	; (adr r3, 802dec0 <_dtoa_r+0x2d0>)
 802dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd26:	f7e2 fc7f 	bl	8010628 <__aeabi_dmul>
 802dd2a:	a367      	add	r3, pc, #412	; (adr r3, 802dec8 <_dtoa_r+0x2d8>)
 802dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd30:	f7e2 fac4 	bl	80102bc <__adddf3>
 802dd34:	4606      	mov	r6, r0
 802dd36:	4628      	mov	r0, r5
 802dd38:	460f      	mov	r7, r1
 802dd3a:	f7e2 fc0b 	bl	8010554 <__aeabi_i2d>
 802dd3e:	a364      	add	r3, pc, #400	; (adr r3, 802ded0 <_dtoa_r+0x2e0>)
 802dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd44:	f7e2 fc70 	bl	8010628 <__aeabi_dmul>
 802dd48:	4602      	mov	r2, r0
 802dd4a:	460b      	mov	r3, r1
 802dd4c:	4630      	mov	r0, r6
 802dd4e:	4639      	mov	r1, r7
 802dd50:	f7e2 fab4 	bl	80102bc <__adddf3>
 802dd54:	4606      	mov	r6, r0
 802dd56:	460f      	mov	r7, r1
 802dd58:	f7e2 ff16 	bl	8010b88 <__aeabi_d2iz>
 802dd5c:	2200      	movs	r2, #0
 802dd5e:	4683      	mov	fp, r0
 802dd60:	2300      	movs	r3, #0
 802dd62:	4630      	mov	r0, r6
 802dd64:	4639      	mov	r1, r7
 802dd66:	f7e2 fed1 	bl	8010b0c <__aeabi_dcmplt>
 802dd6a:	b148      	cbz	r0, 802dd80 <_dtoa_r+0x190>
 802dd6c:	4658      	mov	r0, fp
 802dd6e:	f7e2 fbf1 	bl	8010554 <__aeabi_i2d>
 802dd72:	4632      	mov	r2, r6
 802dd74:	463b      	mov	r3, r7
 802dd76:	f7e2 febf 	bl	8010af8 <__aeabi_dcmpeq>
 802dd7a:	b908      	cbnz	r0, 802dd80 <_dtoa_r+0x190>
 802dd7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802dd80:	f1bb 0f16 	cmp.w	fp, #22
 802dd84:	d857      	bhi.n	802de36 <_dtoa_r+0x246>
 802dd86:	4b5b      	ldr	r3, [pc, #364]	; (802def4 <_dtoa_r+0x304>)
 802dd88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dd90:	ec51 0b18 	vmov	r0, r1, d8
 802dd94:	f7e2 feba 	bl	8010b0c <__aeabi_dcmplt>
 802dd98:	2800      	cmp	r0, #0
 802dd9a:	d04e      	beq.n	802de3a <_dtoa_r+0x24a>
 802dd9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802dda0:	2300      	movs	r3, #0
 802dda2:	930c      	str	r3, [sp, #48]	; 0x30
 802dda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802dda6:	1b5b      	subs	r3, r3, r5
 802dda8:	1e5a      	subs	r2, r3, #1
 802ddaa:	bf45      	ittet	mi
 802ddac:	f1c3 0301 	rsbmi	r3, r3, #1
 802ddb0:	9305      	strmi	r3, [sp, #20]
 802ddb2:	2300      	movpl	r3, #0
 802ddb4:	2300      	movmi	r3, #0
 802ddb6:	9206      	str	r2, [sp, #24]
 802ddb8:	bf54      	ite	pl
 802ddba:	9305      	strpl	r3, [sp, #20]
 802ddbc:	9306      	strmi	r3, [sp, #24]
 802ddbe:	f1bb 0f00 	cmp.w	fp, #0
 802ddc2:	db3c      	blt.n	802de3e <_dtoa_r+0x24e>
 802ddc4:	9b06      	ldr	r3, [sp, #24]
 802ddc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802ddca:	445b      	add	r3, fp
 802ddcc:	9306      	str	r3, [sp, #24]
 802ddce:	2300      	movs	r3, #0
 802ddd0:	9308      	str	r3, [sp, #32]
 802ddd2:	9b07      	ldr	r3, [sp, #28]
 802ddd4:	2b09      	cmp	r3, #9
 802ddd6:	d868      	bhi.n	802deaa <_dtoa_r+0x2ba>
 802ddd8:	2b05      	cmp	r3, #5
 802ddda:	bfc4      	itt	gt
 802dddc:	3b04      	subgt	r3, #4
 802ddde:	9307      	strgt	r3, [sp, #28]
 802dde0:	9b07      	ldr	r3, [sp, #28]
 802dde2:	f1a3 0302 	sub.w	r3, r3, #2
 802dde6:	bfcc      	ite	gt
 802dde8:	2500      	movgt	r5, #0
 802ddea:	2501      	movle	r5, #1
 802ddec:	2b03      	cmp	r3, #3
 802ddee:	f200 8085 	bhi.w	802defc <_dtoa_r+0x30c>
 802ddf2:	e8df f003 	tbb	[pc, r3]
 802ddf6:	3b2e      	.short	0x3b2e
 802ddf8:	5839      	.short	0x5839
 802ddfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802ddfe:	441d      	add	r5, r3
 802de00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802de04:	2b20      	cmp	r3, #32
 802de06:	bfc1      	itttt	gt
 802de08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802de0c:	fa08 f803 	lslgt.w	r8, r8, r3
 802de10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802de14:	fa26 f303 	lsrgt.w	r3, r6, r3
 802de18:	bfd6      	itet	le
 802de1a:	f1c3 0320 	rsble	r3, r3, #32
 802de1e:	ea48 0003 	orrgt.w	r0, r8, r3
 802de22:	fa06 f003 	lslle.w	r0, r6, r3
 802de26:	f7e2 fb85 	bl	8010534 <__aeabi_ui2d>
 802de2a:	2201      	movs	r2, #1
 802de2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802de30:	3d01      	subs	r5, #1
 802de32:	920e      	str	r2, [sp, #56]	; 0x38
 802de34:	e76f      	b.n	802dd16 <_dtoa_r+0x126>
 802de36:	2301      	movs	r3, #1
 802de38:	e7b3      	b.n	802dda2 <_dtoa_r+0x1b2>
 802de3a:	900c      	str	r0, [sp, #48]	; 0x30
 802de3c:	e7b2      	b.n	802dda4 <_dtoa_r+0x1b4>
 802de3e:	9b05      	ldr	r3, [sp, #20]
 802de40:	eba3 030b 	sub.w	r3, r3, fp
 802de44:	9305      	str	r3, [sp, #20]
 802de46:	f1cb 0300 	rsb	r3, fp, #0
 802de4a:	9308      	str	r3, [sp, #32]
 802de4c:	2300      	movs	r3, #0
 802de4e:	930b      	str	r3, [sp, #44]	; 0x2c
 802de50:	e7bf      	b.n	802ddd2 <_dtoa_r+0x1e2>
 802de52:	2300      	movs	r3, #0
 802de54:	9309      	str	r3, [sp, #36]	; 0x24
 802de56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802de58:	2b00      	cmp	r3, #0
 802de5a:	dc52      	bgt.n	802df02 <_dtoa_r+0x312>
 802de5c:	2301      	movs	r3, #1
 802de5e:	9301      	str	r3, [sp, #4]
 802de60:	9304      	str	r3, [sp, #16]
 802de62:	461a      	mov	r2, r3
 802de64:	920a      	str	r2, [sp, #40]	; 0x28
 802de66:	e00b      	b.n	802de80 <_dtoa_r+0x290>
 802de68:	2301      	movs	r3, #1
 802de6a:	e7f3      	b.n	802de54 <_dtoa_r+0x264>
 802de6c:	2300      	movs	r3, #0
 802de6e:	9309      	str	r3, [sp, #36]	; 0x24
 802de70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802de72:	445b      	add	r3, fp
 802de74:	9301      	str	r3, [sp, #4]
 802de76:	3301      	adds	r3, #1
 802de78:	2b01      	cmp	r3, #1
 802de7a:	9304      	str	r3, [sp, #16]
 802de7c:	bfb8      	it	lt
 802de7e:	2301      	movlt	r3, #1
 802de80:	69e0      	ldr	r0, [r4, #28]
 802de82:	2100      	movs	r1, #0
 802de84:	2204      	movs	r2, #4
 802de86:	f102 0614 	add.w	r6, r2, #20
 802de8a:	429e      	cmp	r6, r3
 802de8c:	d93d      	bls.n	802df0a <_dtoa_r+0x31a>
 802de8e:	6041      	str	r1, [r0, #4]
 802de90:	4620      	mov	r0, r4
 802de92:	f000 fceb 	bl	802e86c <_Balloc>
 802de96:	9000      	str	r0, [sp, #0]
 802de98:	2800      	cmp	r0, #0
 802de9a:	d139      	bne.n	802df10 <_dtoa_r+0x320>
 802de9c:	4b16      	ldr	r3, [pc, #88]	; (802def8 <_dtoa_r+0x308>)
 802de9e:	4602      	mov	r2, r0
 802dea0:	f240 11af 	movw	r1, #431	; 0x1af
 802dea4:	e6bd      	b.n	802dc22 <_dtoa_r+0x32>
 802dea6:	2301      	movs	r3, #1
 802dea8:	e7e1      	b.n	802de6e <_dtoa_r+0x27e>
 802deaa:	2501      	movs	r5, #1
 802deac:	2300      	movs	r3, #0
 802deae:	9307      	str	r3, [sp, #28]
 802deb0:	9509      	str	r5, [sp, #36]	; 0x24
 802deb2:	f04f 33ff 	mov.w	r3, #4294967295
 802deb6:	9301      	str	r3, [sp, #4]
 802deb8:	9304      	str	r3, [sp, #16]
 802deba:	2200      	movs	r2, #0
 802debc:	2312      	movs	r3, #18
 802debe:	e7d1      	b.n	802de64 <_dtoa_r+0x274>
 802dec0:	636f4361 	.word	0x636f4361
 802dec4:	3fd287a7 	.word	0x3fd287a7
 802dec8:	8b60c8b3 	.word	0x8b60c8b3
 802decc:	3fc68a28 	.word	0x3fc68a28
 802ded0:	509f79fb 	.word	0x509f79fb
 802ded4:	3fd34413 	.word	0x3fd34413
 802ded8:	080348c3 	.word	0x080348c3
 802dedc:	08034941 	.word	0x08034941
 802dee0:	7ff00000 	.word	0x7ff00000
 802dee4:	0803493d 	.word	0x0803493d
 802dee8:	08034934 	.word	0x08034934
 802deec:	08034c81 	.word	0x08034c81
 802def0:	3ff80000 	.word	0x3ff80000
 802def4:	08034a30 	.word	0x08034a30
 802def8:	08034999 	.word	0x08034999
 802defc:	2301      	movs	r3, #1
 802defe:	9309      	str	r3, [sp, #36]	; 0x24
 802df00:	e7d7      	b.n	802deb2 <_dtoa_r+0x2c2>
 802df02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802df04:	9301      	str	r3, [sp, #4]
 802df06:	9304      	str	r3, [sp, #16]
 802df08:	e7ba      	b.n	802de80 <_dtoa_r+0x290>
 802df0a:	3101      	adds	r1, #1
 802df0c:	0052      	lsls	r2, r2, #1
 802df0e:	e7ba      	b.n	802de86 <_dtoa_r+0x296>
 802df10:	69e3      	ldr	r3, [r4, #28]
 802df12:	9a00      	ldr	r2, [sp, #0]
 802df14:	601a      	str	r2, [r3, #0]
 802df16:	9b04      	ldr	r3, [sp, #16]
 802df18:	2b0e      	cmp	r3, #14
 802df1a:	f200 80a8 	bhi.w	802e06e <_dtoa_r+0x47e>
 802df1e:	2d00      	cmp	r5, #0
 802df20:	f000 80a5 	beq.w	802e06e <_dtoa_r+0x47e>
 802df24:	f1bb 0f00 	cmp.w	fp, #0
 802df28:	dd38      	ble.n	802df9c <_dtoa_r+0x3ac>
 802df2a:	4bc0      	ldr	r3, [pc, #768]	; (802e22c <_dtoa_r+0x63c>)
 802df2c:	f00b 020f 	and.w	r2, fp, #15
 802df30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802df34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802df38:	e9d3 6700 	ldrd	r6, r7, [r3]
 802df3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 802df40:	d019      	beq.n	802df76 <_dtoa_r+0x386>
 802df42:	4bbb      	ldr	r3, [pc, #748]	; (802e230 <_dtoa_r+0x640>)
 802df44:	ec51 0b18 	vmov	r0, r1, d8
 802df48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802df4c:	f7e2 fc96 	bl	801087c <__aeabi_ddiv>
 802df50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802df54:	f008 080f 	and.w	r8, r8, #15
 802df58:	2503      	movs	r5, #3
 802df5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802e230 <_dtoa_r+0x640>
 802df5e:	f1b8 0f00 	cmp.w	r8, #0
 802df62:	d10a      	bne.n	802df7a <_dtoa_r+0x38a>
 802df64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802df68:	4632      	mov	r2, r6
 802df6a:	463b      	mov	r3, r7
 802df6c:	f7e2 fc86 	bl	801087c <__aeabi_ddiv>
 802df70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802df74:	e02b      	b.n	802dfce <_dtoa_r+0x3de>
 802df76:	2502      	movs	r5, #2
 802df78:	e7ef      	b.n	802df5a <_dtoa_r+0x36a>
 802df7a:	f018 0f01 	tst.w	r8, #1
 802df7e:	d008      	beq.n	802df92 <_dtoa_r+0x3a2>
 802df80:	4630      	mov	r0, r6
 802df82:	4639      	mov	r1, r7
 802df84:	e9d9 2300 	ldrd	r2, r3, [r9]
 802df88:	f7e2 fb4e 	bl	8010628 <__aeabi_dmul>
 802df8c:	3501      	adds	r5, #1
 802df8e:	4606      	mov	r6, r0
 802df90:	460f      	mov	r7, r1
 802df92:	ea4f 0868 	mov.w	r8, r8, asr #1
 802df96:	f109 0908 	add.w	r9, r9, #8
 802df9a:	e7e0      	b.n	802df5e <_dtoa_r+0x36e>
 802df9c:	f000 809f 	beq.w	802e0de <_dtoa_r+0x4ee>
 802dfa0:	f1cb 0600 	rsb	r6, fp, #0
 802dfa4:	4ba1      	ldr	r3, [pc, #644]	; (802e22c <_dtoa_r+0x63c>)
 802dfa6:	4fa2      	ldr	r7, [pc, #648]	; (802e230 <_dtoa_r+0x640>)
 802dfa8:	f006 020f 	and.w	r2, r6, #15
 802dfac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802dfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802dfb4:	ec51 0b18 	vmov	r0, r1, d8
 802dfb8:	f7e2 fb36 	bl	8010628 <__aeabi_dmul>
 802dfbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802dfc0:	1136      	asrs	r6, r6, #4
 802dfc2:	2300      	movs	r3, #0
 802dfc4:	2502      	movs	r5, #2
 802dfc6:	2e00      	cmp	r6, #0
 802dfc8:	d17e      	bne.n	802e0c8 <_dtoa_r+0x4d8>
 802dfca:	2b00      	cmp	r3, #0
 802dfcc:	d1d0      	bne.n	802df70 <_dtoa_r+0x380>
 802dfce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802dfd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802dfd4:	2b00      	cmp	r3, #0
 802dfd6:	f000 8084 	beq.w	802e0e2 <_dtoa_r+0x4f2>
 802dfda:	4b96      	ldr	r3, [pc, #600]	; (802e234 <_dtoa_r+0x644>)
 802dfdc:	2200      	movs	r2, #0
 802dfde:	4640      	mov	r0, r8
 802dfe0:	4649      	mov	r1, r9
 802dfe2:	f7e2 fd93 	bl	8010b0c <__aeabi_dcmplt>
 802dfe6:	2800      	cmp	r0, #0
 802dfe8:	d07b      	beq.n	802e0e2 <_dtoa_r+0x4f2>
 802dfea:	9b04      	ldr	r3, [sp, #16]
 802dfec:	2b00      	cmp	r3, #0
 802dfee:	d078      	beq.n	802e0e2 <_dtoa_r+0x4f2>
 802dff0:	9b01      	ldr	r3, [sp, #4]
 802dff2:	2b00      	cmp	r3, #0
 802dff4:	dd39      	ble.n	802e06a <_dtoa_r+0x47a>
 802dff6:	4b90      	ldr	r3, [pc, #576]	; (802e238 <_dtoa_r+0x648>)
 802dff8:	2200      	movs	r2, #0
 802dffa:	4640      	mov	r0, r8
 802dffc:	4649      	mov	r1, r9
 802dffe:	f7e2 fb13 	bl	8010628 <__aeabi_dmul>
 802e002:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e006:	9e01      	ldr	r6, [sp, #4]
 802e008:	f10b 37ff 	add.w	r7, fp, #4294967295
 802e00c:	3501      	adds	r5, #1
 802e00e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e012:	4628      	mov	r0, r5
 802e014:	f7e2 fa9e 	bl	8010554 <__aeabi_i2d>
 802e018:	4642      	mov	r2, r8
 802e01a:	464b      	mov	r3, r9
 802e01c:	f7e2 fb04 	bl	8010628 <__aeabi_dmul>
 802e020:	4b86      	ldr	r3, [pc, #536]	; (802e23c <_dtoa_r+0x64c>)
 802e022:	2200      	movs	r2, #0
 802e024:	f7e2 f94a 	bl	80102bc <__adddf3>
 802e028:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802e02c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e030:	9303      	str	r3, [sp, #12]
 802e032:	2e00      	cmp	r6, #0
 802e034:	d158      	bne.n	802e0e8 <_dtoa_r+0x4f8>
 802e036:	4b82      	ldr	r3, [pc, #520]	; (802e240 <_dtoa_r+0x650>)
 802e038:	2200      	movs	r2, #0
 802e03a:	4640      	mov	r0, r8
 802e03c:	4649      	mov	r1, r9
 802e03e:	f7e2 f93b 	bl	80102b8 <__aeabi_dsub>
 802e042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e046:	4680      	mov	r8, r0
 802e048:	4689      	mov	r9, r1
 802e04a:	f7e2 fd7d 	bl	8010b48 <__aeabi_dcmpgt>
 802e04e:	2800      	cmp	r0, #0
 802e050:	f040 8296 	bne.w	802e580 <_dtoa_r+0x990>
 802e054:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802e058:	4640      	mov	r0, r8
 802e05a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802e05e:	4649      	mov	r1, r9
 802e060:	f7e2 fd54 	bl	8010b0c <__aeabi_dcmplt>
 802e064:	2800      	cmp	r0, #0
 802e066:	f040 8289 	bne.w	802e57c <_dtoa_r+0x98c>
 802e06a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802e06e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802e070:	2b00      	cmp	r3, #0
 802e072:	f2c0 814e 	blt.w	802e312 <_dtoa_r+0x722>
 802e076:	f1bb 0f0e 	cmp.w	fp, #14
 802e07a:	f300 814a 	bgt.w	802e312 <_dtoa_r+0x722>
 802e07e:	4b6b      	ldr	r3, [pc, #428]	; (802e22c <_dtoa_r+0x63c>)
 802e080:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e084:	e9d3 8900 	ldrd	r8, r9, [r3]
 802e088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e08a:	2b00      	cmp	r3, #0
 802e08c:	f280 80dc 	bge.w	802e248 <_dtoa_r+0x658>
 802e090:	9b04      	ldr	r3, [sp, #16]
 802e092:	2b00      	cmp	r3, #0
 802e094:	f300 80d8 	bgt.w	802e248 <_dtoa_r+0x658>
 802e098:	f040 826f 	bne.w	802e57a <_dtoa_r+0x98a>
 802e09c:	4b68      	ldr	r3, [pc, #416]	; (802e240 <_dtoa_r+0x650>)
 802e09e:	2200      	movs	r2, #0
 802e0a0:	4640      	mov	r0, r8
 802e0a2:	4649      	mov	r1, r9
 802e0a4:	f7e2 fac0 	bl	8010628 <__aeabi_dmul>
 802e0a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e0ac:	f7e2 fd42 	bl	8010b34 <__aeabi_dcmpge>
 802e0b0:	9e04      	ldr	r6, [sp, #16]
 802e0b2:	4637      	mov	r7, r6
 802e0b4:	2800      	cmp	r0, #0
 802e0b6:	f040 8245 	bne.w	802e544 <_dtoa_r+0x954>
 802e0ba:	9d00      	ldr	r5, [sp, #0]
 802e0bc:	2331      	movs	r3, #49	; 0x31
 802e0be:	f805 3b01 	strb.w	r3, [r5], #1
 802e0c2:	f10b 0b01 	add.w	fp, fp, #1
 802e0c6:	e241      	b.n	802e54c <_dtoa_r+0x95c>
 802e0c8:	07f2      	lsls	r2, r6, #31
 802e0ca:	d505      	bpl.n	802e0d8 <_dtoa_r+0x4e8>
 802e0cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 802e0d0:	f7e2 faaa 	bl	8010628 <__aeabi_dmul>
 802e0d4:	3501      	adds	r5, #1
 802e0d6:	2301      	movs	r3, #1
 802e0d8:	1076      	asrs	r6, r6, #1
 802e0da:	3708      	adds	r7, #8
 802e0dc:	e773      	b.n	802dfc6 <_dtoa_r+0x3d6>
 802e0de:	2502      	movs	r5, #2
 802e0e0:	e775      	b.n	802dfce <_dtoa_r+0x3de>
 802e0e2:	9e04      	ldr	r6, [sp, #16]
 802e0e4:	465f      	mov	r7, fp
 802e0e6:	e792      	b.n	802e00e <_dtoa_r+0x41e>
 802e0e8:	9900      	ldr	r1, [sp, #0]
 802e0ea:	4b50      	ldr	r3, [pc, #320]	; (802e22c <_dtoa_r+0x63c>)
 802e0ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e0f0:	4431      	add	r1, r6
 802e0f2:	9102      	str	r1, [sp, #8]
 802e0f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802e0f6:	eeb0 9a47 	vmov.f32	s18, s14
 802e0fa:	eef0 9a67 	vmov.f32	s19, s15
 802e0fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802e102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e106:	2900      	cmp	r1, #0
 802e108:	d044      	beq.n	802e194 <_dtoa_r+0x5a4>
 802e10a:	494e      	ldr	r1, [pc, #312]	; (802e244 <_dtoa_r+0x654>)
 802e10c:	2000      	movs	r0, #0
 802e10e:	f7e2 fbb5 	bl	801087c <__aeabi_ddiv>
 802e112:	ec53 2b19 	vmov	r2, r3, d9
 802e116:	f7e2 f8cf 	bl	80102b8 <__aeabi_dsub>
 802e11a:	9d00      	ldr	r5, [sp, #0]
 802e11c:	ec41 0b19 	vmov	d9, r0, r1
 802e120:	4649      	mov	r1, r9
 802e122:	4640      	mov	r0, r8
 802e124:	f7e2 fd30 	bl	8010b88 <__aeabi_d2iz>
 802e128:	4606      	mov	r6, r0
 802e12a:	f7e2 fa13 	bl	8010554 <__aeabi_i2d>
 802e12e:	4602      	mov	r2, r0
 802e130:	460b      	mov	r3, r1
 802e132:	4640      	mov	r0, r8
 802e134:	4649      	mov	r1, r9
 802e136:	f7e2 f8bf 	bl	80102b8 <__aeabi_dsub>
 802e13a:	3630      	adds	r6, #48	; 0x30
 802e13c:	f805 6b01 	strb.w	r6, [r5], #1
 802e140:	ec53 2b19 	vmov	r2, r3, d9
 802e144:	4680      	mov	r8, r0
 802e146:	4689      	mov	r9, r1
 802e148:	f7e2 fce0 	bl	8010b0c <__aeabi_dcmplt>
 802e14c:	2800      	cmp	r0, #0
 802e14e:	d164      	bne.n	802e21a <_dtoa_r+0x62a>
 802e150:	4642      	mov	r2, r8
 802e152:	464b      	mov	r3, r9
 802e154:	4937      	ldr	r1, [pc, #220]	; (802e234 <_dtoa_r+0x644>)
 802e156:	2000      	movs	r0, #0
 802e158:	f7e2 f8ae 	bl	80102b8 <__aeabi_dsub>
 802e15c:	ec53 2b19 	vmov	r2, r3, d9
 802e160:	f7e2 fcd4 	bl	8010b0c <__aeabi_dcmplt>
 802e164:	2800      	cmp	r0, #0
 802e166:	f040 80b6 	bne.w	802e2d6 <_dtoa_r+0x6e6>
 802e16a:	9b02      	ldr	r3, [sp, #8]
 802e16c:	429d      	cmp	r5, r3
 802e16e:	f43f af7c 	beq.w	802e06a <_dtoa_r+0x47a>
 802e172:	4b31      	ldr	r3, [pc, #196]	; (802e238 <_dtoa_r+0x648>)
 802e174:	ec51 0b19 	vmov	r0, r1, d9
 802e178:	2200      	movs	r2, #0
 802e17a:	f7e2 fa55 	bl	8010628 <__aeabi_dmul>
 802e17e:	4b2e      	ldr	r3, [pc, #184]	; (802e238 <_dtoa_r+0x648>)
 802e180:	ec41 0b19 	vmov	d9, r0, r1
 802e184:	2200      	movs	r2, #0
 802e186:	4640      	mov	r0, r8
 802e188:	4649      	mov	r1, r9
 802e18a:	f7e2 fa4d 	bl	8010628 <__aeabi_dmul>
 802e18e:	4680      	mov	r8, r0
 802e190:	4689      	mov	r9, r1
 802e192:	e7c5      	b.n	802e120 <_dtoa_r+0x530>
 802e194:	ec51 0b17 	vmov	r0, r1, d7
 802e198:	f7e2 fa46 	bl	8010628 <__aeabi_dmul>
 802e19c:	9b02      	ldr	r3, [sp, #8]
 802e19e:	9d00      	ldr	r5, [sp, #0]
 802e1a0:	930f      	str	r3, [sp, #60]	; 0x3c
 802e1a2:	ec41 0b19 	vmov	d9, r0, r1
 802e1a6:	4649      	mov	r1, r9
 802e1a8:	4640      	mov	r0, r8
 802e1aa:	f7e2 fced 	bl	8010b88 <__aeabi_d2iz>
 802e1ae:	4606      	mov	r6, r0
 802e1b0:	f7e2 f9d0 	bl	8010554 <__aeabi_i2d>
 802e1b4:	3630      	adds	r6, #48	; 0x30
 802e1b6:	4602      	mov	r2, r0
 802e1b8:	460b      	mov	r3, r1
 802e1ba:	4640      	mov	r0, r8
 802e1bc:	4649      	mov	r1, r9
 802e1be:	f7e2 f87b 	bl	80102b8 <__aeabi_dsub>
 802e1c2:	f805 6b01 	strb.w	r6, [r5], #1
 802e1c6:	9b02      	ldr	r3, [sp, #8]
 802e1c8:	429d      	cmp	r5, r3
 802e1ca:	4680      	mov	r8, r0
 802e1cc:	4689      	mov	r9, r1
 802e1ce:	f04f 0200 	mov.w	r2, #0
 802e1d2:	d124      	bne.n	802e21e <_dtoa_r+0x62e>
 802e1d4:	4b1b      	ldr	r3, [pc, #108]	; (802e244 <_dtoa_r+0x654>)
 802e1d6:	ec51 0b19 	vmov	r0, r1, d9
 802e1da:	f7e2 f86f 	bl	80102bc <__adddf3>
 802e1de:	4602      	mov	r2, r0
 802e1e0:	460b      	mov	r3, r1
 802e1e2:	4640      	mov	r0, r8
 802e1e4:	4649      	mov	r1, r9
 802e1e6:	f7e2 fcaf 	bl	8010b48 <__aeabi_dcmpgt>
 802e1ea:	2800      	cmp	r0, #0
 802e1ec:	d173      	bne.n	802e2d6 <_dtoa_r+0x6e6>
 802e1ee:	ec53 2b19 	vmov	r2, r3, d9
 802e1f2:	4914      	ldr	r1, [pc, #80]	; (802e244 <_dtoa_r+0x654>)
 802e1f4:	2000      	movs	r0, #0
 802e1f6:	f7e2 f85f 	bl	80102b8 <__aeabi_dsub>
 802e1fa:	4602      	mov	r2, r0
 802e1fc:	460b      	mov	r3, r1
 802e1fe:	4640      	mov	r0, r8
 802e200:	4649      	mov	r1, r9
 802e202:	f7e2 fc83 	bl	8010b0c <__aeabi_dcmplt>
 802e206:	2800      	cmp	r0, #0
 802e208:	f43f af2f 	beq.w	802e06a <_dtoa_r+0x47a>
 802e20c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802e20e:	1e6b      	subs	r3, r5, #1
 802e210:	930f      	str	r3, [sp, #60]	; 0x3c
 802e212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802e216:	2b30      	cmp	r3, #48	; 0x30
 802e218:	d0f8      	beq.n	802e20c <_dtoa_r+0x61c>
 802e21a:	46bb      	mov	fp, r7
 802e21c:	e04a      	b.n	802e2b4 <_dtoa_r+0x6c4>
 802e21e:	4b06      	ldr	r3, [pc, #24]	; (802e238 <_dtoa_r+0x648>)
 802e220:	f7e2 fa02 	bl	8010628 <__aeabi_dmul>
 802e224:	4680      	mov	r8, r0
 802e226:	4689      	mov	r9, r1
 802e228:	e7bd      	b.n	802e1a6 <_dtoa_r+0x5b6>
 802e22a:	bf00      	nop
 802e22c:	08034a30 	.word	0x08034a30
 802e230:	08034a08 	.word	0x08034a08
 802e234:	3ff00000 	.word	0x3ff00000
 802e238:	40240000 	.word	0x40240000
 802e23c:	401c0000 	.word	0x401c0000
 802e240:	40140000 	.word	0x40140000
 802e244:	3fe00000 	.word	0x3fe00000
 802e248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802e24c:	9d00      	ldr	r5, [sp, #0]
 802e24e:	4642      	mov	r2, r8
 802e250:	464b      	mov	r3, r9
 802e252:	4630      	mov	r0, r6
 802e254:	4639      	mov	r1, r7
 802e256:	f7e2 fb11 	bl	801087c <__aeabi_ddiv>
 802e25a:	f7e2 fc95 	bl	8010b88 <__aeabi_d2iz>
 802e25e:	9001      	str	r0, [sp, #4]
 802e260:	f7e2 f978 	bl	8010554 <__aeabi_i2d>
 802e264:	4642      	mov	r2, r8
 802e266:	464b      	mov	r3, r9
 802e268:	f7e2 f9de 	bl	8010628 <__aeabi_dmul>
 802e26c:	4602      	mov	r2, r0
 802e26e:	460b      	mov	r3, r1
 802e270:	4630      	mov	r0, r6
 802e272:	4639      	mov	r1, r7
 802e274:	f7e2 f820 	bl	80102b8 <__aeabi_dsub>
 802e278:	9e01      	ldr	r6, [sp, #4]
 802e27a:	9f04      	ldr	r7, [sp, #16]
 802e27c:	3630      	adds	r6, #48	; 0x30
 802e27e:	f805 6b01 	strb.w	r6, [r5], #1
 802e282:	9e00      	ldr	r6, [sp, #0]
 802e284:	1bae      	subs	r6, r5, r6
 802e286:	42b7      	cmp	r7, r6
 802e288:	4602      	mov	r2, r0
 802e28a:	460b      	mov	r3, r1
 802e28c:	d134      	bne.n	802e2f8 <_dtoa_r+0x708>
 802e28e:	f7e2 f815 	bl	80102bc <__adddf3>
 802e292:	4642      	mov	r2, r8
 802e294:	464b      	mov	r3, r9
 802e296:	4606      	mov	r6, r0
 802e298:	460f      	mov	r7, r1
 802e29a:	f7e2 fc55 	bl	8010b48 <__aeabi_dcmpgt>
 802e29e:	b9c8      	cbnz	r0, 802e2d4 <_dtoa_r+0x6e4>
 802e2a0:	4642      	mov	r2, r8
 802e2a2:	464b      	mov	r3, r9
 802e2a4:	4630      	mov	r0, r6
 802e2a6:	4639      	mov	r1, r7
 802e2a8:	f7e2 fc26 	bl	8010af8 <__aeabi_dcmpeq>
 802e2ac:	b110      	cbz	r0, 802e2b4 <_dtoa_r+0x6c4>
 802e2ae:	9b01      	ldr	r3, [sp, #4]
 802e2b0:	07db      	lsls	r3, r3, #31
 802e2b2:	d40f      	bmi.n	802e2d4 <_dtoa_r+0x6e4>
 802e2b4:	4651      	mov	r1, sl
 802e2b6:	4620      	mov	r0, r4
 802e2b8:	f000 fb18 	bl	802e8ec <_Bfree>
 802e2bc:	2300      	movs	r3, #0
 802e2be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e2c0:	702b      	strb	r3, [r5, #0]
 802e2c2:	f10b 0301 	add.w	r3, fp, #1
 802e2c6:	6013      	str	r3, [r2, #0]
 802e2c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e2ca:	2b00      	cmp	r3, #0
 802e2cc:	f43f ace2 	beq.w	802dc94 <_dtoa_r+0xa4>
 802e2d0:	601d      	str	r5, [r3, #0]
 802e2d2:	e4df      	b.n	802dc94 <_dtoa_r+0xa4>
 802e2d4:	465f      	mov	r7, fp
 802e2d6:	462b      	mov	r3, r5
 802e2d8:	461d      	mov	r5, r3
 802e2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e2de:	2a39      	cmp	r2, #57	; 0x39
 802e2e0:	d106      	bne.n	802e2f0 <_dtoa_r+0x700>
 802e2e2:	9a00      	ldr	r2, [sp, #0]
 802e2e4:	429a      	cmp	r2, r3
 802e2e6:	d1f7      	bne.n	802e2d8 <_dtoa_r+0x6e8>
 802e2e8:	9900      	ldr	r1, [sp, #0]
 802e2ea:	2230      	movs	r2, #48	; 0x30
 802e2ec:	3701      	adds	r7, #1
 802e2ee:	700a      	strb	r2, [r1, #0]
 802e2f0:	781a      	ldrb	r2, [r3, #0]
 802e2f2:	3201      	adds	r2, #1
 802e2f4:	701a      	strb	r2, [r3, #0]
 802e2f6:	e790      	b.n	802e21a <_dtoa_r+0x62a>
 802e2f8:	4ba3      	ldr	r3, [pc, #652]	; (802e588 <_dtoa_r+0x998>)
 802e2fa:	2200      	movs	r2, #0
 802e2fc:	f7e2 f994 	bl	8010628 <__aeabi_dmul>
 802e300:	2200      	movs	r2, #0
 802e302:	2300      	movs	r3, #0
 802e304:	4606      	mov	r6, r0
 802e306:	460f      	mov	r7, r1
 802e308:	f7e2 fbf6 	bl	8010af8 <__aeabi_dcmpeq>
 802e30c:	2800      	cmp	r0, #0
 802e30e:	d09e      	beq.n	802e24e <_dtoa_r+0x65e>
 802e310:	e7d0      	b.n	802e2b4 <_dtoa_r+0x6c4>
 802e312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e314:	2a00      	cmp	r2, #0
 802e316:	f000 80ca 	beq.w	802e4ae <_dtoa_r+0x8be>
 802e31a:	9a07      	ldr	r2, [sp, #28]
 802e31c:	2a01      	cmp	r2, #1
 802e31e:	f300 80ad 	bgt.w	802e47c <_dtoa_r+0x88c>
 802e322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802e324:	2a00      	cmp	r2, #0
 802e326:	f000 80a5 	beq.w	802e474 <_dtoa_r+0x884>
 802e32a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802e32e:	9e08      	ldr	r6, [sp, #32]
 802e330:	9d05      	ldr	r5, [sp, #20]
 802e332:	9a05      	ldr	r2, [sp, #20]
 802e334:	441a      	add	r2, r3
 802e336:	9205      	str	r2, [sp, #20]
 802e338:	9a06      	ldr	r2, [sp, #24]
 802e33a:	2101      	movs	r1, #1
 802e33c:	441a      	add	r2, r3
 802e33e:	4620      	mov	r0, r4
 802e340:	9206      	str	r2, [sp, #24]
 802e342:	f000 fbd3 	bl	802eaec <__i2b>
 802e346:	4607      	mov	r7, r0
 802e348:	b165      	cbz	r5, 802e364 <_dtoa_r+0x774>
 802e34a:	9b06      	ldr	r3, [sp, #24]
 802e34c:	2b00      	cmp	r3, #0
 802e34e:	dd09      	ble.n	802e364 <_dtoa_r+0x774>
 802e350:	42ab      	cmp	r3, r5
 802e352:	9a05      	ldr	r2, [sp, #20]
 802e354:	bfa8      	it	ge
 802e356:	462b      	movge	r3, r5
 802e358:	1ad2      	subs	r2, r2, r3
 802e35a:	9205      	str	r2, [sp, #20]
 802e35c:	9a06      	ldr	r2, [sp, #24]
 802e35e:	1aed      	subs	r5, r5, r3
 802e360:	1ad3      	subs	r3, r2, r3
 802e362:	9306      	str	r3, [sp, #24]
 802e364:	9b08      	ldr	r3, [sp, #32]
 802e366:	b1f3      	cbz	r3, 802e3a6 <_dtoa_r+0x7b6>
 802e368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e36a:	2b00      	cmp	r3, #0
 802e36c:	f000 80a3 	beq.w	802e4b6 <_dtoa_r+0x8c6>
 802e370:	2e00      	cmp	r6, #0
 802e372:	dd10      	ble.n	802e396 <_dtoa_r+0x7a6>
 802e374:	4639      	mov	r1, r7
 802e376:	4632      	mov	r2, r6
 802e378:	4620      	mov	r0, r4
 802e37a:	f000 fc77 	bl	802ec6c <__pow5mult>
 802e37e:	4652      	mov	r2, sl
 802e380:	4601      	mov	r1, r0
 802e382:	4607      	mov	r7, r0
 802e384:	4620      	mov	r0, r4
 802e386:	f000 fbc7 	bl	802eb18 <__multiply>
 802e38a:	4651      	mov	r1, sl
 802e38c:	4680      	mov	r8, r0
 802e38e:	4620      	mov	r0, r4
 802e390:	f000 faac 	bl	802e8ec <_Bfree>
 802e394:	46c2      	mov	sl, r8
 802e396:	9b08      	ldr	r3, [sp, #32]
 802e398:	1b9a      	subs	r2, r3, r6
 802e39a:	d004      	beq.n	802e3a6 <_dtoa_r+0x7b6>
 802e39c:	4651      	mov	r1, sl
 802e39e:	4620      	mov	r0, r4
 802e3a0:	f000 fc64 	bl	802ec6c <__pow5mult>
 802e3a4:	4682      	mov	sl, r0
 802e3a6:	2101      	movs	r1, #1
 802e3a8:	4620      	mov	r0, r4
 802e3aa:	f000 fb9f 	bl	802eaec <__i2b>
 802e3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e3b0:	2b00      	cmp	r3, #0
 802e3b2:	4606      	mov	r6, r0
 802e3b4:	f340 8081 	ble.w	802e4ba <_dtoa_r+0x8ca>
 802e3b8:	461a      	mov	r2, r3
 802e3ba:	4601      	mov	r1, r0
 802e3bc:	4620      	mov	r0, r4
 802e3be:	f000 fc55 	bl	802ec6c <__pow5mult>
 802e3c2:	9b07      	ldr	r3, [sp, #28]
 802e3c4:	2b01      	cmp	r3, #1
 802e3c6:	4606      	mov	r6, r0
 802e3c8:	dd7a      	ble.n	802e4c0 <_dtoa_r+0x8d0>
 802e3ca:	f04f 0800 	mov.w	r8, #0
 802e3ce:	6933      	ldr	r3, [r6, #16]
 802e3d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802e3d4:	6918      	ldr	r0, [r3, #16]
 802e3d6:	f000 fb3b 	bl	802ea50 <__hi0bits>
 802e3da:	f1c0 0020 	rsb	r0, r0, #32
 802e3de:	9b06      	ldr	r3, [sp, #24]
 802e3e0:	4418      	add	r0, r3
 802e3e2:	f010 001f 	ands.w	r0, r0, #31
 802e3e6:	f000 8094 	beq.w	802e512 <_dtoa_r+0x922>
 802e3ea:	f1c0 0320 	rsb	r3, r0, #32
 802e3ee:	2b04      	cmp	r3, #4
 802e3f0:	f340 8085 	ble.w	802e4fe <_dtoa_r+0x90e>
 802e3f4:	9b05      	ldr	r3, [sp, #20]
 802e3f6:	f1c0 001c 	rsb	r0, r0, #28
 802e3fa:	4403      	add	r3, r0
 802e3fc:	9305      	str	r3, [sp, #20]
 802e3fe:	9b06      	ldr	r3, [sp, #24]
 802e400:	4403      	add	r3, r0
 802e402:	4405      	add	r5, r0
 802e404:	9306      	str	r3, [sp, #24]
 802e406:	9b05      	ldr	r3, [sp, #20]
 802e408:	2b00      	cmp	r3, #0
 802e40a:	dd05      	ble.n	802e418 <_dtoa_r+0x828>
 802e40c:	4651      	mov	r1, sl
 802e40e:	461a      	mov	r2, r3
 802e410:	4620      	mov	r0, r4
 802e412:	f000 fc85 	bl	802ed20 <__lshift>
 802e416:	4682      	mov	sl, r0
 802e418:	9b06      	ldr	r3, [sp, #24]
 802e41a:	2b00      	cmp	r3, #0
 802e41c:	dd05      	ble.n	802e42a <_dtoa_r+0x83a>
 802e41e:	4631      	mov	r1, r6
 802e420:	461a      	mov	r2, r3
 802e422:	4620      	mov	r0, r4
 802e424:	f000 fc7c 	bl	802ed20 <__lshift>
 802e428:	4606      	mov	r6, r0
 802e42a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e42c:	2b00      	cmp	r3, #0
 802e42e:	d072      	beq.n	802e516 <_dtoa_r+0x926>
 802e430:	4631      	mov	r1, r6
 802e432:	4650      	mov	r0, sl
 802e434:	f000 fce0 	bl	802edf8 <__mcmp>
 802e438:	2800      	cmp	r0, #0
 802e43a:	da6c      	bge.n	802e516 <_dtoa_r+0x926>
 802e43c:	2300      	movs	r3, #0
 802e43e:	4651      	mov	r1, sl
 802e440:	220a      	movs	r2, #10
 802e442:	4620      	mov	r0, r4
 802e444:	f000 fa74 	bl	802e930 <__multadd>
 802e448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e44a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e44e:	4682      	mov	sl, r0
 802e450:	2b00      	cmp	r3, #0
 802e452:	f000 81b0 	beq.w	802e7b6 <_dtoa_r+0xbc6>
 802e456:	2300      	movs	r3, #0
 802e458:	4639      	mov	r1, r7
 802e45a:	220a      	movs	r2, #10
 802e45c:	4620      	mov	r0, r4
 802e45e:	f000 fa67 	bl	802e930 <__multadd>
 802e462:	9b01      	ldr	r3, [sp, #4]
 802e464:	2b00      	cmp	r3, #0
 802e466:	4607      	mov	r7, r0
 802e468:	f300 8096 	bgt.w	802e598 <_dtoa_r+0x9a8>
 802e46c:	9b07      	ldr	r3, [sp, #28]
 802e46e:	2b02      	cmp	r3, #2
 802e470:	dc59      	bgt.n	802e526 <_dtoa_r+0x936>
 802e472:	e091      	b.n	802e598 <_dtoa_r+0x9a8>
 802e474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e476:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802e47a:	e758      	b.n	802e32e <_dtoa_r+0x73e>
 802e47c:	9b04      	ldr	r3, [sp, #16]
 802e47e:	1e5e      	subs	r6, r3, #1
 802e480:	9b08      	ldr	r3, [sp, #32]
 802e482:	42b3      	cmp	r3, r6
 802e484:	bfbf      	itttt	lt
 802e486:	9b08      	ldrlt	r3, [sp, #32]
 802e488:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802e48a:	9608      	strlt	r6, [sp, #32]
 802e48c:	1af3      	sublt	r3, r6, r3
 802e48e:	bfb4      	ite	lt
 802e490:	18d2      	addlt	r2, r2, r3
 802e492:	1b9e      	subge	r6, r3, r6
 802e494:	9b04      	ldr	r3, [sp, #16]
 802e496:	bfbc      	itt	lt
 802e498:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802e49a:	2600      	movlt	r6, #0
 802e49c:	2b00      	cmp	r3, #0
 802e49e:	bfb7      	itett	lt
 802e4a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802e4a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802e4a8:	1a9d      	sublt	r5, r3, r2
 802e4aa:	2300      	movlt	r3, #0
 802e4ac:	e741      	b.n	802e332 <_dtoa_r+0x742>
 802e4ae:	9e08      	ldr	r6, [sp, #32]
 802e4b0:	9d05      	ldr	r5, [sp, #20]
 802e4b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802e4b4:	e748      	b.n	802e348 <_dtoa_r+0x758>
 802e4b6:	9a08      	ldr	r2, [sp, #32]
 802e4b8:	e770      	b.n	802e39c <_dtoa_r+0x7ac>
 802e4ba:	9b07      	ldr	r3, [sp, #28]
 802e4bc:	2b01      	cmp	r3, #1
 802e4be:	dc19      	bgt.n	802e4f4 <_dtoa_r+0x904>
 802e4c0:	9b02      	ldr	r3, [sp, #8]
 802e4c2:	b9bb      	cbnz	r3, 802e4f4 <_dtoa_r+0x904>
 802e4c4:	9b03      	ldr	r3, [sp, #12]
 802e4c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e4ca:	b99b      	cbnz	r3, 802e4f4 <_dtoa_r+0x904>
 802e4cc:	9b03      	ldr	r3, [sp, #12]
 802e4ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e4d2:	0d1b      	lsrs	r3, r3, #20
 802e4d4:	051b      	lsls	r3, r3, #20
 802e4d6:	b183      	cbz	r3, 802e4fa <_dtoa_r+0x90a>
 802e4d8:	9b05      	ldr	r3, [sp, #20]
 802e4da:	3301      	adds	r3, #1
 802e4dc:	9305      	str	r3, [sp, #20]
 802e4de:	9b06      	ldr	r3, [sp, #24]
 802e4e0:	3301      	adds	r3, #1
 802e4e2:	9306      	str	r3, [sp, #24]
 802e4e4:	f04f 0801 	mov.w	r8, #1
 802e4e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e4ea:	2b00      	cmp	r3, #0
 802e4ec:	f47f af6f 	bne.w	802e3ce <_dtoa_r+0x7de>
 802e4f0:	2001      	movs	r0, #1
 802e4f2:	e774      	b.n	802e3de <_dtoa_r+0x7ee>
 802e4f4:	f04f 0800 	mov.w	r8, #0
 802e4f8:	e7f6      	b.n	802e4e8 <_dtoa_r+0x8f8>
 802e4fa:	4698      	mov	r8, r3
 802e4fc:	e7f4      	b.n	802e4e8 <_dtoa_r+0x8f8>
 802e4fe:	d082      	beq.n	802e406 <_dtoa_r+0x816>
 802e500:	9a05      	ldr	r2, [sp, #20]
 802e502:	331c      	adds	r3, #28
 802e504:	441a      	add	r2, r3
 802e506:	9205      	str	r2, [sp, #20]
 802e508:	9a06      	ldr	r2, [sp, #24]
 802e50a:	441a      	add	r2, r3
 802e50c:	441d      	add	r5, r3
 802e50e:	9206      	str	r2, [sp, #24]
 802e510:	e779      	b.n	802e406 <_dtoa_r+0x816>
 802e512:	4603      	mov	r3, r0
 802e514:	e7f4      	b.n	802e500 <_dtoa_r+0x910>
 802e516:	9b04      	ldr	r3, [sp, #16]
 802e518:	2b00      	cmp	r3, #0
 802e51a:	dc37      	bgt.n	802e58c <_dtoa_r+0x99c>
 802e51c:	9b07      	ldr	r3, [sp, #28]
 802e51e:	2b02      	cmp	r3, #2
 802e520:	dd34      	ble.n	802e58c <_dtoa_r+0x99c>
 802e522:	9b04      	ldr	r3, [sp, #16]
 802e524:	9301      	str	r3, [sp, #4]
 802e526:	9b01      	ldr	r3, [sp, #4]
 802e528:	b963      	cbnz	r3, 802e544 <_dtoa_r+0x954>
 802e52a:	4631      	mov	r1, r6
 802e52c:	2205      	movs	r2, #5
 802e52e:	4620      	mov	r0, r4
 802e530:	f000 f9fe 	bl	802e930 <__multadd>
 802e534:	4601      	mov	r1, r0
 802e536:	4606      	mov	r6, r0
 802e538:	4650      	mov	r0, sl
 802e53a:	f000 fc5d 	bl	802edf8 <__mcmp>
 802e53e:	2800      	cmp	r0, #0
 802e540:	f73f adbb 	bgt.w	802e0ba <_dtoa_r+0x4ca>
 802e544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e546:	9d00      	ldr	r5, [sp, #0]
 802e548:	ea6f 0b03 	mvn.w	fp, r3
 802e54c:	f04f 0800 	mov.w	r8, #0
 802e550:	4631      	mov	r1, r6
 802e552:	4620      	mov	r0, r4
 802e554:	f000 f9ca 	bl	802e8ec <_Bfree>
 802e558:	2f00      	cmp	r7, #0
 802e55a:	f43f aeab 	beq.w	802e2b4 <_dtoa_r+0x6c4>
 802e55e:	f1b8 0f00 	cmp.w	r8, #0
 802e562:	d005      	beq.n	802e570 <_dtoa_r+0x980>
 802e564:	45b8      	cmp	r8, r7
 802e566:	d003      	beq.n	802e570 <_dtoa_r+0x980>
 802e568:	4641      	mov	r1, r8
 802e56a:	4620      	mov	r0, r4
 802e56c:	f000 f9be 	bl	802e8ec <_Bfree>
 802e570:	4639      	mov	r1, r7
 802e572:	4620      	mov	r0, r4
 802e574:	f000 f9ba 	bl	802e8ec <_Bfree>
 802e578:	e69c      	b.n	802e2b4 <_dtoa_r+0x6c4>
 802e57a:	2600      	movs	r6, #0
 802e57c:	4637      	mov	r7, r6
 802e57e:	e7e1      	b.n	802e544 <_dtoa_r+0x954>
 802e580:	46bb      	mov	fp, r7
 802e582:	4637      	mov	r7, r6
 802e584:	e599      	b.n	802e0ba <_dtoa_r+0x4ca>
 802e586:	bf00      	nop
 802e588:	40240000 	.word	0x40240000
 802e58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e58e:	2b00      	cmp	r3, #0
 802e590:	f000 80c8 	beq.w	802e724 <_dtoa_r+0xb34>
 802e594:	9b04      	ldr	r3, [sp, #16]
 802e596:	9301      	str	r3, [sp, #4]
 802e598:	2d00      	cmp	r5, #0
 802e59a:	dd05      	ble.n	802e5a8 <_dtoa_r+0x9b8>
 802e59c:	4639      	mov	r1, r7
 802e59e:	462a      	mov	r2, r5
 802e5a0:	4620      	mov	r0, r4
 802e5a2:	f000 fbbd 	bl	802ed20 <__lshift>
 802e5a6:	4607      	mov	r7, r0
 802e5a8:	f1b8 0f00 	cmp.w	r8, #0
 802e5ac:	d05b      	beq.n	802e666 <_dtoa_r+0xa76>
 802e5ae:	6879      	ldr	r1, [r7, #4]
 802e5b0:	4620      	mov	r0, r4
 802e5b2:	f000 f95b 	bl	802e86c <_Balloc>
 802e5b6:	4605      	mov	r5, r0
 802e5b8:	b928      	cbnz	r0, 802e5c6 <_dtoa_r+0x9d6>
 802e5ba:	4b83      	ldr	r3, [pc, #524]	; (802e7c8 <_dtoa_r+0xbd8>)
 802e5bc:	4602      	mov	r2, r0
 802e5be:	f240 21ef 	movw	r1, #751	; 0x2ef
 802e5c2:	f7ff bb2e 	b.w	802dc22 <_dtoa_r+0x32>
 802e5c6:	693a      	ldr	r2, [r7, #16]
 802e5c8:	3202      	adds	r2, #2
 802e5ca:	0092      	lsls	r2, r2, #2
 802e5cc:	f107 010c 	add.w	r1, r7, #12
 802e5d0:	300c      	adds	r0, #12
 802e5d2:	f7ff fa68 	bl	802daa6 <memcpy>
 802e5d6:	2201      	movs	r2, #1
 802e5d8:	4629      	mov	r1, r5
 802e5da:	4620      	mov	r0, r4
 802e5dc:	f000 fba0 	bl	802ed20 <__lshift>
 802e5e0:	9b00      	ldr	r3, [sp, #0]
 802e5e2:	3301      	adds	r3, #1
 802e5e4:	9304      	str	r3, [sp, #16]
 802e5e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e5ea:	4413      	add	r3, r2
 802e5ec:	9308      	str	r3, [sp, #32]
 802e5ee:	9b02      	ldr	r3, [sp, #8]
 802e5f0:	f003 0301 	and.w	r3, r3, #1
 802e5f4:	46b8      	mov	r8, r7
 802e5f6:	9306      	str	r3, [sp, #24]
 802e5f8:	4607      	mov	r7, r0
 802e5fa:	9b04      	ldr	r3, [sp, #16]
 802e5fc:	4631      	mov	r1, r6
 802e5fe:	3b01      	subs	r3, #1
 802e600:	4650      	mov	r0, sl
 802e602:	9301      	str	r3, [sp, #4]
 802e604:	f7ff fa6b 	bl	802dade <quorem>
 802e608:	4641      	mov	r1, r8
 802e60a:	9002      	str	r0, [sp, #8]
 802e60c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e610:	4650      	mov	r0, sl
 802e612:	f000 fbf1 	bl	802edf8 <__mcmp>
 802e616:	463a      	mov	r2, r7
 802e618:	9005      	str	r0, [sp, #20]
 802e61a:	4631      	mov	r1, r6
 802e61c:	4620      	mov	r0, r4
 802e61e:	f000 fc07 	bl	802ee30 <__mdiff>
 802e622:	68c2      	ldr	r2, [r0, #12]
 802e624:	4605      	mov	r5, r0
 802e626:	bb02      	cbnz	r2, 802e66a <_dtoa_r+0xa7a>
 802e628:	4601      	mov	r1, r0
 802e62a:	4650      	mov	r0, sl
 802e62c:	f000 fbe4 	bl	802edf8 <__mcmp>
 802e630:	4602      	mov	r2, r0
 802e632:	4629      	mov	r1, r5
 802e634:	4620      	mov	r0, r4
 802e636:	9209      	str	r2, [sp, #36]	; 0x24
 802e638:	f000 f958 	bl	802e8ec <_Bfree>
 802e63c:	9b07      	ldr	r3, [sp, #28]
 802e63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e640:	9d04      	ldr	r5, [sp, #16]
 802e642:	ea43 0102 	orr.w	r1, r3, r2
 802e646:	9b06      	ldr	r3, [sp, #24]
 802e648:	4319      	orrs	r1, r3
 802e64a:	d110      	bne.n	802e66e <_dtoa_r+0xa7e>
 802e64c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e650:	d029      	beq.n	802e6a6 <_dtoa_r+0xab6>
 802e652:	9b05      	ldr	r3, [sp, #20]
 802e654:	2b00      	cmp	r3, #0
 802e656:	dd02      	ble.n	802e65e <_dtoa_r+0xa6e>
 802e658:	9b02      	ldr	r3, [sp, #8]
 802e65a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802e65e:	9b01      	ldr	r3, [sp, #4]
 802e660:	f883 9000 	strb.w	r9, [r3]
 802e664:	e774      	b.n	802e550 <_dtoa_r+0x960>
 802e666:	4638      	mov	r0, r7
 802e668:	e7ba      	b.n	802e5e0 <_dtoa_r+0x9f0>
 802e66a:	2201      	movs	r2, #1
 802e66c:	e7e1      	b.n	802e632 <_dtoa_r+0xa42>
 802e66e:	9b05      	ldr	r3, [sp, #20]
 802e670:	2b00      	cmp	r3, #0
 802e672:	db04      	blt.n	802e67e <_dtoa_r+0xa8e>
 802e674:	9907      	ldr	r1, [sp, #28]
 802e676:	430b      	orrs	r3, r1
 802e678:	9906      	ldr	r1, [sp, #24]
 802e67a:	430b      	orrs	r3, r1
 802e67c:	d120      	bne.n	802e6c0 <_dtoa_r+0xad0>
 802e67e:	2a00      	cmp	r2, #0
 802e680:	dded      	ble.n	802e65e <_dtoa_r+0xa6e>
 802e682:	4651      	mov	r1, sl
 802e684:	2201      	movs	r2, #1
 802e686:	4620      	mov	r0, r4
 802e688:	f000 fb4a 	bl	802ed20 <__lshift>
 802e68c:	4631      	mov	r1, r6
 802e68e:	4682      	mov	sl, r0
 802e690:	f000 fbb2 	bl	802edf8 <__mcmp>
 802e694:	2800      	cmp	r0, #0
 802e696:	dc03      	bgt.n	802e6a0 <_dtoa_r+0xab0>
 802e698:	d1e1      	bne.n	802e65e <_dtoa_r+0xa6e>
 802e69a:	f019 0f01 	tst.w	r9, #1
 802e69e:	d0de      	beq.n	802e65e <_dtoa_r+0xa6e>
 802e6a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e6a4:	d1d8      	bne.n	802e658 <_dtoa_r+0xa68>
 802e6a6:	9a01      	ldr	r2, [sp, #4]
 802e6a8:	2339      	movs	r3, #57	; 0x39
 802e6aa:	7013      	strb	r3, [r2, #0]
 802e6ac:	462b      	mov	r3, r5
 802e6ae:	461d      	mov	r5, r3
 802e6b0:	3b01      	subs	r3, #1
 802e6b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802e6b6:	2a39      	cmp	r2, #57	; 0x39
 802e6b8:	d06c      	beq.n	802e794 <_dtoa_r+0xba4>
 802e6ba:	3201      	adds	r2, #1
 802e6bc:	701a      	strb	r2, [r3, #0]
 802e6be:	e747      	b.n	802e550 <_dtoa_r+0x960>
 802e6c0:	2a00      	cmp	r2, #0
 802e6c2:	dd07      	ble.n	802e6d4 <_dtoa_r+0xae4>
 802e6c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802e6c8:	d0ed      	beq.n	802e6a6 <_dtoa_r+0xab6>
 802e6ca:	9a01      	ldr	r2, [sp, #4]
 802e6cc:	f109 0301 	add.w	r3, r9, #1
 802e6d0:	7013      	strb	r3, [r2, #0]
 802e6d2:	e73d      	b.n	802e550 <_dtoa_r+0x960>
 802e6d4:	9b04      	ldr	r3, [sp, #16]
 802e6d6:	9a08      	ldr	r2, [sp, #32]
 802e6d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 802e6dc:	4293      	cmp	r3, r2
 802e6de:	d043      	beq.n	802e768 <_dtoa_r+0xb78>
 802e6e0:	4651      	mov	r1, sl
 802e6e2:	2300      	movs	r3, #0
 802e6e4:	220a      	movs	r2, #10
 802e6e6:	4620      	mov	r0, r4
 802e6e8:	f000 f922 	bl	802e930 <__multadd>
 802e6ec:	45b8      	cmp	r8, r7
 802e6ee:	4682      	mov	sl, r0
 802e6f0:	f04f 0300 	mov.w	r3, #0
 802e6f4:	f04f 020a 	mov.w	r2, #10
 802e6f8:	4641      	mov	r1, r8
 802e6fa:	4620      	mov	r0, r4
 802e6fc:	d107      	bne.n	802e70e <_dtoa_r+0xb1e>
 802e6fe:	f000 f917 	bl	802e930 <__multadd>
 802e702:	4680      	mov	r8, r0
 802e704:	4607      	mov	r7, r0
 802e706:	9b04      	ldr	r3, [sp, #16]
 802e708:	3301      	adds	r3, #1
 802e70a:	9304      	str	r3, [sp, #16]
 802e70c:	e775      	b.n	802e5fa <_dtoa_r+0xa0a>
 802e70e:	f000 f90f 	bl	802e930 <__multadd>
 802e712:	4639      	mov	r1, r7
 802e714:	4680      	mov	r8, r0
 802e716:	2300      	movs	r3, #0
 802e718:	220a      	movs	r2, #10
 802e71a:	4620      	mov	r0, r4
 802e71c:	f000 f908 	bl	802e930 <__multadd>
 802e720:	4607      	mov	r7, r0
 802e722:	e7f0      	b.n	802e706 <_dtoa_r+0xb16>
 802e724:	9b04      	ldr	r3, [sp, #16]
 802e726:	9301      	str	r3, [sp, #4]
 802e728:	9d00      	ldr	r5, [sp, #0]
 802e72a:	4631      	mov	r1, r6
 802e72c:	4650      	mov	r0, sl
 802e72e:	f7ff f9d6 	bl	802dade <quorem>
 802e732:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e736:	9b00      	ldr	r3, [sp, #0]
 802e738:	f805 9b01 	strb.w	r9, [r5], #1
 802e73c:	1aea      	subs	r2, r5, r3
 802e73e:	9b01      	ldr	r3, [sp, #4]
 802e740:	4293      	cmp	r3, r2
 802e742:	dd07      	ble.n	802e754 <_dtoa_r+0xb64>
 802e744:	4651      	mov	r1, sl
 802e746:	2300      	movs	r3, #0
 802e748:	220a      	movs	r2, #10
 802e74a:	4620      	mov	r0, r4
 802e74c:	f000 f8f0 	bl	802e930 <__multadd>
 802e750:	4682      	mov	sl, r0
 802e752:	e7ea      	b.n	802e72a <_dtoa_r+0xb3a>
 802e754:	9b01      	ldr	r3, [sp, #4]
 802e756:	2b00      	cmp	r3, #0
 802e758:	bfc8      	it	gt
 802e75a:	461d      	movgt	r5, r3
 802e75c:	9b00      	ldr	r3, [sp, #0]
 802e75e:	bfd8      	it	le
 802e760:	2501      	movle	r5, #1
 802e762:	441d      	add	r5, r3
 802e764:	f04f 0800 	mov.w	r8, #0
 802e768:	4651      	mov	r1, sl
 802e76a:	2201      	movs	r2, #1
 802e76c:	4620      	mov	r0, r4
 802e76e:	f000 fad7 	bl	802ed20 <__lshift>
 802e772:	4631      	mov	r1, r6
 802e774:	4682      	mov	sl, r0
 802e776:	f000 fb3f 	bl	802edf8 <__mcmp>
 802e77a:	2800      	cmp	r0, #0
 802e77c:	dc96      	bgt.n	802e6ac <_dtoa_r+0xabc>
 802e77e:	d102      	bne.n	802e786 <_dtoa_r+0xb96>
 802e780:	f019 0f01 	tst.w	r9, #1
 802e784:	d192      	bne.n	802e6ac <_dtoa_r+0xabc>
 802e786:	462b      	mov	r3, r5
 802e788:	461d      	mov	r5, r3
 802e78a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e78e:	2a30      	cmp	r2, #48	; 0x30
 802e790:	d0fa      	beq.n	802e788 <_dtoa_r+0xb98>
 802e792:	e6dd      	b.n	802e550 <_dtoa_r+0x960>
 802e794:	9a00      	ldr	r2, [sp, #0]
 802e796:	429a      	cmp	r2, r3
 802e798:	d189      	bne.n	802e6ae <_dtoa_r+0xabe>
 802e79a:	f10b 0b01 	add.w	fp, fp, #1
 802e79e:	2331      	movs	r3, #49	; 0x31
 802e7a0:	e796      	b.n	802e6d0 <_dtoa_r+0xae0>
 802e7a2:	4b0a      	ldr	r3, [pc, #40]	; (802e7cc <_dtoa_r+0xbdc>)
 802e7a4:	f7ff ba99 	b.w	802dcda <_dtoa_r+0xea>
 802e7a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e7aa:	2b00      	cmp	r3, #0
 802e7ac:	f47f aa6d 	bne.w	802dc8a <_dtoa_r+0x9a>
 802e7b0:	4b07      	ldr	r3, [pc, #28]	; (802e7d0 <_dtoa_r+0xbe0>)
 802e7b2:	f7ff ba92 	b.w	802dcda <_dtoa_r+0xea>
 802e7b6:	9b01      	ldr	r3, [sp, #4]
 802e7b8:	2b00      	cmp	r3, #0
 802e7ba:	dcb5      	bgt.n	802e728 <_dtoa_r+0xb38>
 802e7bc:	9b07      	ldr	r3, [sp, #28]
 802e7be:	2b02      	cmp	r3, #2
 802e7c0:	f73f aeb1 	bgt.w	802e526 <_dtoa_r+0x936>
 802e7c4:	e7b0      	b.n	802e728 <_dtoa_r+0xb38>
 802e7c6:	bf00      	nop
 802e7c8:	08034999 	.word	0x08034999
 802e7cc:	08034c80 	.word	0x08034c80
 802e7d0:	08034934 	.word	0x08034934

0802e7d4 <_free_r>:
 802e7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802e7d6:	2900      	cmp	r1, #0
 802e7d8:	d044      	beq.n	802e864 <_free_r+0x90>
 802e7da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802e7de:	9001      	str	r0, [sp, #4]
 802e7e0:	2b00      	cmp	r3, #0
 802e7e2:	f1a1 0404 	sub.w	r4, r1, #4
 802e7e6:	bfb8      	it	lt
 802e7e8:	18e4      	addlt	r4, r4, r3
 802e7ea:	f7fd fe9b 	bl	802c524 <__malloc_lock>
 802e7ee:	4a1e      	ldr	r2, [pc, #120]	; (802e868 <_free_r+0x94>)
 802e7f0:	9801      	ldr	r0, [sp, #4]
 802e7f2:	6813      	ldr	r3, [r2, #0]
 802e7f4:	b933      	cbnz	r3, 802e804 <_free_r+0x30>
 802e7f6:	6063      	str	r3, [r4, #4]
 802e7f8:	6014      	str	r4, [r2, #0]
 802e7fa:	b003      	add	sp, #12
 802e7fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802e800:	f7fd be96 	b.w	802c530 <__malloc_unlock>
 802e804:	42a3      	cmp	r3, r4
 802e806:	d908      	bls.n	802e81a <_free_r+0x46>
 802e808:	6825      	ldr	r5, [r4, #0]
 802e80a:	1961      	adds	r1, r4, r5
 802e80c:	428b      	cmp	r3, r1
 802e80e:	bf01      	itttt	eq
 802e810:	6819      	ldreq	r1, [r3, #0]
 802e812:	685b      	ldreq	r3, [r3, #4]
 802e814:	1949      	addeq	r1, r1, r5
 802e816:	6021      	streq	r1, [r4, #0]
 802e818:	e7ed      	b.n	802e7f6 <_free_r+0x22>
 802e81a:	461a      	mov	r2, r3
 802e81c:	685b      	ldr	r3, [r3, #4]
 802e81e:	b10b      	cbz	r3, 802e824 <_free_r+0x50>
 802e820:	42a3      	cmp	r3, r4
 802e822:	d9fa      	bls.n	802e81a <_free_r+0x46>
 802e824:	6811      	ldr	r1, [r2, #0]
 802e826:	1855      	adds	r5, r2, r1
 802e828:	42a5      	cmp	r5, r4
 802e82a:	d10b      	bne.n	802e844 <_free_r+0x70>
 802e82c:	6824      	ldr	r4, [r4, #0]
 802e82e:	4421      	add	r1, r4
 802e830:	1854      	adds	r4, r2, r1
 802e832:	42a3      	cmp	r3, r4
 802e834:	6011      	str	r1, [r2, #0]
 802e836:	d1e0      	bne.n	802e7fa <_free_r+0x26>
 802e838:	681c      	ldr	r4, [r3, #0]
 802e83a:	685b      	ldr	r3, [r3, #4]
 802e83c:	6053      	str	r3, [r2, #4]
 802e83e:	440c      	add	r4, r1
 802e840:	6014      	str	r4, [r2, #0]
 802e842:	e7da      	b.n	802e7fa <_free_r+0x26>
 802e844:	d902      	bls.n	802e84c <_free_r+0x78>
 802e846:	230c      	movs	r3, #12
 802e848:	6003      	str	r3, [r0, #0]
 802e84a:	e7d6      	b.n	802e7fa <_free_r+0x26>
 802e84c:	6825      	ldr	r5, [r4, #0]
 802e84e:	1961      	adds	r1, r4, r5
 802e850:	428b      	cmp	r3, r1
 802e852:	bf04      	itt	eq
 802e854:	6819      	ldreq	r1, [r3, #0]
 802e856:	685b      	ldreq	r3, [r3, #4]
 802e858:	6063      	str	r3, [r4, #4]
 802e85a:	bf04      	itt	eq
 802e85c:	1949      	addeq	r1, r1, r5
 802e85e:	6021      	streq	r1, [r4, #0]
 802e860:	6054      	str	r4, [r2, #4]
 802e862:	e7ca      	b.n	802e7fa <_free_r+0x26>
 802e864:	b003      	add	sp, #12
 802e866:	bd30      	pop	{r4, r5, pc}
 802e868:	2000d9a8 	.word	0x2000d9a8

0802e86c <_Balloc>:
 802e86c:	b570      	push	{r4, r5, r6, lr}
 802e86e:	69c6      	ldr	r6, [r0, #28]
 802e870:	4604      	mov	r4, r0
 802e872:	460d      	mov	r5, r1
 802e874:	b976      	cbnz	r6, 802e894 <_Balloc+0x28>
 802e876:	2010      	movs	r0, #16
 802e878:	f7fd fda4 	bl	802c3c4 <malloc>
 802e87c:	4602      	mov	r2, r0
 802e87e:	61e0      	str	r0, [r4, #28]
 802e880:	b920      	cbnz	r0, 802e88c <_Balloc+0x20>
 802e882:	4b18      	ldr	r3, [pc, #96]	; (802e8e4 <_Balloc+0x78>)
 802e884:	4818      	ldr	r0, [pc, #96]	; (802e8e8 <_Balloc+0x7c>)
 802e886:	216b      	movs	r1, #107	; 0x6b
 802e888:	f7fd fd68 	bl	802c35c <__assert_func>
 802e88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e890:	6006      	str	r6, [r0, #0]
 802e892:	60c6      	str	r6, [r0, #12]
 802e894:	69e6      	ldr	r6, [r4, #28]
 802e896:	68f3      	ldr	r3, [r6, #12]
 802e898:	b183      	cbz	r3, 802e8bc <_Balloc+0x50>
 802e89a:	69e3      	ldr	r3, [r4, #28]
 802e89c:	68db      	ldr	r3, [r3, #12]
 802e89e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802e8a2:	b9b8      	cbnz	r0, 802e8d4 <_Balloc+0x68>
 802e8a4:	2101      	movs	r1, #1
 802e8a6:	fa01 f605 	lsl.w	r6, r1, r5
 802e8aa:	1d72      	adds	r2, r6, #5
 802e8ac:	0092      	lsls	r2, r2, #2
 802e8ae:	4620      	mov	r0, r4
 802e8b0:	f7fd fd72 	bl	802c398 <_calloc_r>
 802e8b4:	b160      	cbz	r0, 802e8d0 <_Balloc+0x64>
 802e8b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802e8ba:	e00e      	b.n	802e8da <_Balloc+0x6e>
 802e8bc:	2221      	movs	r2, #33	; 0x21
 802e8be:	2104      	movs	r1, #4
 802e8c0:	4620      	mov	r0, r4
 802e8c2:	f7fd fd69 	bl	802c398 <_calloc_r>
 802e8c6:	69e3      	ldr	r3, [r4, #28]
 802e8c8:	60f0      	str	r0, [r6, #12]
 802e8ca:	68db      	ldr	r3, [r3, #12]
 802e8cc:	2b00      	cmp	r3, #0
 802e8ce:	d1e4      	bne.n	802e89a <_Balloc+0x2e>
 802e8d0:	2000      	movs	r0, #0
 802e8d2:	bd70      	pop	{r4, r5, r6, pc}
 802e8d4:	6802      	ldr	r2, [r0, #0]
 802e8d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802e8da:	2300      	movs	r3, #0
 802e8dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802e8e0:	e7f7      	b.n	802e8d2 <_Balloc+0x66>
 802e8e2:	bf00      	nop
 802e8e4:	080348c3 	.word	0x080348c3
 802e8e8:	080349aa 	.word	0x080349aa

0802e8ec <_Bfree>:
 802e8ec:	b570      	push	{r4, r5, r6, lr}
 802e8ee:	69c6      	ldr	r6, [r0, #28]
 802e8f0:	4605      	mov	r5, r0
 802e8f2:	460c      	mov	r4, r1
 802e8f4:	b976      	cbnz	r6, 802e914 <_Bfree+0x28>
 802e8f6:	2010      	movs	r0, #16
 802e8f8:	f7fd fd64 	bl	802c3c4 <malloc>
 802e8fc:	4602      	mov	r2, r0
 802e8fe:	61e8      	str	r0, [r5, #28]
 802e900:	b920      	cbnz	r0, 802e90c <_Bfree+0x20>
 802e902:	4b09      	ldr	r3, [pc, #36]	; (802e928 <_Bfree+0x3c>)
 802e904:	4809      	ldr	r0, [pc, #36]	; (802e92c <_Bfree+0x40>)
 802e906:	218f      	movs	r1, #143	; 0x8f
 802e908:	f7fd fd28 	bl	802c35c <__assert_func>
 802e90c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802e910:	6006      	str	r6, [r0, #0]
 802e912:	60c6      	str	r6, [r0, #12]
 802e914:	b13c      	cbz	r4, 802e926 <_Bfree+0x3a>
 802e916:	69eb      	ldr	r3, [r5, #28]
 802e918:	6862      	ldr	r2, [r4, #4]
 802e91a:	68db      	ldr	r3, [r3, #12]
 802e91c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802e920:	6021      	str	r1, [r4, #0]
 802e922:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802e926:	bd70      	pop	{r4, r5, r6, pc}
 802e928:	080348c3 	.word	0x080348c3
 802e92c:	080349aa 	.word	0x080349aa

0802e930 <__multadd>:
 802e930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802e934:	690d      	ldr	r5, [r1, #16]
 802e936:	4607      	mov	r7, r0
 802e938:	460c      	mov	r4, r1
 802e93a:	461e      	mov	r6, r3
 802e93c:	f101 0c14 	add.w	ip, r1, #20
 802e940:	2000      	movs	r0, #0
 802e942:	f8dc 3000 	ldr.w	r3, [ip]
 802e946:	b299      	uxth	r1, r3
 802e948:	fb02 6101 	mla	r1, r2, r1, r6
 802e94c:	0c1e      	lsrs	r6, r3, #16
 802e94e:	0c0b      	lsrs	r3, r1, #16
 802e950:	fb02 3306 	mla	r3, r2, r6, r3
 802e954:	b289      	uxth	r1, r1
 802e956:	3001      	adds	r0, #1
 802e958:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802e95c:	4285      	cmp	r5, r0
 802e95e:	f84c 1b04 	str.w	r1, [ip], #4
 802e962:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802e966:	dcec      	bgt.n	802e942 <__multadd+0x12>
 802e968:	b30e      	cbz	r6, 802e9ae <__multadd+0x7e>
 802e96a:	68a3      	ldr	r3, [r4, #8]
 802e96c:	42ab      	cmp	r3, r5
 802e96e:	dc19      	bgt.n	802e9a4 <__multadd+0x74>
 802e970:	6861      	ldr	r1, [r4, #4]
 802e972:	4638      	mov	r0, r7
 802e974:	3101      	adds	r1, #1
 802e976:	f7ff ff79 	bl	802e86c <_Balloc>
 802e97a:	4680      	mov	r8, r0
 802e97c:	b928      	cbnz	r0, 802e98a <__multadd+0x5a>
 802e97e:	4602      	mov	r2, r0
 802e980:	4b0c      	ldr	r3, [pc, #48]	; (802e9b4 <__multadd+0x84>)
 802e982:	480d      	ldr	r0, [pc, #52]	; (802e9b8 <__multadd+0x88>)
 802e984:	21ba      	movs	r1, #186	; 0xba
 802e986:	f7fd fce9 	bl	802c35c <__assert_func>
 802e98a:	6922      	ldr	r2, [r4, #16]
 802e98c:	3202      	adds	r2, #2
 802e98e:	f104 010c 	add.w	r1, r4, #12
 802e992:	0092      	lsls	r2, r2, #2
 802e994:	300c      	adds	r0, #12
 802e996:	f7ff f886 	bl	802daa6 <memcpy>
 802e99a:	4621      	mov	r1, r4
 802e99c:	4638      	mov	r0, r7
 802e99e:	f7ff ffa5 	bl	802e8ec <_Bfree>
 802e9a2:	4644      	mov	r4, r8
 802e9a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802e9a8:	3501      	adds	r5, #1
 802e9aa:	615e      	str	r6, [r3, #20]
 802e9ac:	6125      	str	r5, [r4, #16]
 802e9ae:	4620      	mov	r0, r4
 802e9b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802e9b4:	08034999 	.word	0x08034999
 802e9b8:	080349aa 	.word	0x080349aa

0802e9bc <__s2b>:
 802e9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802e9c0:	460c      	mov	r4, r1
 802e9c2:	4615      	mov	r5, r2
 802e9c4:	461f      	mov	r7, r3
 802e9c6:	2209      	movs	r2, #9
 802e9c8:	3308      	adds	r3, #8
 802e9ca:	4606      	mov	r6, r0
 802e9cc:	fb93 f3f2 	sdiv	r3, r3, r2
 802e9d0:	2100      	movs	r1, #0
 802e9d2:	2201      	movs	r2, #1
 802e9d4:	429a      	cmp	r2, r3
 802e9d6:	db09      	blt.n	802e9ec <__s2b+0x30>
 802e9d8:	4630      	mov	r0, r6
 802e9da:	f7ff ff47 	bl	802e86c <_Balloc>
 802e9de:	b940      	cbnz	r0, 802e9f2 <__s2b+0x36>
 802e9e0:	4602      	mov	r2, r0
 802e9e2:	4b19      	ldr	r3, [pc, #100]	; (802ea48 <__s2b+0x8c>)
 802e9e4:	4819      	ldr	r0, [pc, #100]	; (802ea4c <__s2b+0x90>)
 802e9e6:	21d3      	movs	r1, #211	; 0xd3
 802e9e8:	f7fd fcb8 	bl	802c35c <__assert_func>
 802e9ec:	0052      	lsls	r2, r2, #1
 802e9ee:	3101      	adds	r1, #1
 802e9f0:	e7f0      	b.n	802e9d4 <__s2b+0x18>
 802e9f2:	9b08      	ldr	r3, [sp, #32]
 802e9f4:	6143      	str	r3, [r0, #20]
 802e9f6:	2d09      	cmp	r5, #9
 802e9f8:	f04f 0301 	mov.w	r3, #1
 802e9fc:	6103      	str	r3, [r0, #16]
 802e9fe:	dd16      	ble.n	802ea2e <__s2b+0x72>
 802ea00:	f104 0909 	add.w	r9, r4, #9
 802ea04:	46c8      	mov	r8, r9
 802ea06:	442c      	add	r4, r5
 802ea08:	f818 3b01 	ldrb.w	r3, [r8], #1
 802ea0c:	4601      	mov	r1, r0
 802ea0e:	3b30      	subs	r3, #48	; 0x30
 802ea10:	220a      	movs	r2, #10
 802ea12:	4630      	mov	r0, r6
 802ea14:	f7ff ff8c 	bl	802e930 <__multadd>
 802ea18:	45a0      	cmp	r8, r4
 802ea1a:	d1f5      	bne.n	802ea08 <__s2b+0x4c>
 802ea1c:	f1a5 0408 	sub.w	r4, r5, #8
 802ea20:	444c      	add	r4, r9
 802ea22:	1b2d      	subs	r5, r5, r4
 802ea24:	1963      	adds	r3, r4, r5
 802ea26:	42bb      	cmp	r3, r7
 802ea28:	db04      	blt.n	802ea34 <__s2b+0x78>
 802ea2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ea2e:	340a      	adds	r4, #10
 802ea30:	2509      	movs	r5, #9
 802ea32:	e7f6      	b.n	802ea22 <__s2b+0x66>
 802ea34:	f814 3b01 	ldrb.w	r3, [r4], #1
 802ea38:	4601      	mov	r1, r0
 802ea3a:	3b30      	subs	r3, #48	; 0x30
 802ea3c:	220a      	movs	r2, #10
 802ea3e:	4630      	mov	r0, r6
 802ea40:	f7ff ff76 	bl	802e930 <__multadd>
 802ea44:	e7ee      	b.n	802ea24 <__s2b+0x68>
 802ea46:	bf00      	nop
 802ea48:	08034999 	.word	0x08034999
 802ea4c:	080349aa 	.word	0x080349aa

0802ea50 <__hi0bits>:
 802ea50:	0c03      	lsrs	r3, r0, #16
 802ea52:	041b      	lsls	r3, r3, #16
 802ea54:	b9d3      	cbnz	r3, 802ea8c <__hi0bits+0x3c>
 802ea56:	0400      	lsls	r0, r0, #16
 802ea58:	2310      	movs	r3, #16
 802ea5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802ea5e:	bf04      	itt	eq
 802ea60:	0200      	lsleq	r0, r0, #8
 802ea62:	3308      	addeq	r3, #8
 802ea64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802ea68:	bf04      	itt	eq
 802ea6a:	0100      	lsleq	r0, r0, #4
 802ea6c:	3304      	addeq	r3, #4
 802ea6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802ea72:	bf04      	itt	eq
 802ea74:	0080      	lsleq	r0, r0, #2
 802ea76:	3302      	addeq	r3, #2
 802ea78:	2800      	cmp	r0, #0
 802ea7a:	db05      	blt.n	802ea88 <__hi0bits+0x38>
 802ea7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802ea80:	f103 0301 	add.w	r3, r3, #1
 802ea84:	bf08      	it	eq
 802ea86:	2320      	moveq	r3, #32
 802ea88:	4618      	mov	r0, r3
 802ea8a:	4770      	bx	lr
 802ea8c:	2300      	movs	r3, #0
 802ea8e:	e7e4      	b.n	802ea5a <__hi0bits+0xa>

0802ea90 <__lo0bits>:
 802ea90:	6803      	ldr	r3, [r0, #0]
 802ea92:	f013 0207 	ands.w	r2, r3, #7
 802ea96:	d00c      	beq.n	802eab2 <__lo0bits+0x22>
 802ea98:	07d9      	lsls	r1, r3, #31
 802ea9a:	d422      	bmi.n	802eae2 <__lo0bits+0x52>
 802ea9c:	079a      	lsls	r2, r3, #30
 802ea9e:	bf49      	itett	mi
 802eaa0:	085b      	lsrmi	r3, r3, #1
 802eaa2:	089b      	lsrpl	r3, r3, #2
 802eaa4:	6003      	strmi	r3, [r0, #0]
 802eaa6:	2201      	movmi	r2, #1
 802eaa8:	bf5c      	itt	pl
 802eaaa:	6003      	strpl	r3, [r0, #0]
 802eaac:	2202      	movpl	r2, #2
 802eaae:	4610      	mov	r0, r2
 802eab0:	4770      	bx	lr
 802eab2:	b299      	uxth	r1, r3
 802eab4:	b909      	cbnz	r1, 802eaba <__lo0bits+0x2a>
 802eab6:	0c1b      	lsrs	r3, r3, #16
 802eab8:	2210      	movs	r2, #16
 802eaba:	b2d9      	uxtb	r1, r3
 802eabc:	b909      	cbnz	r1, 802eac2 <__lo0bits+0x32>
 802eabe:	3208      	adds	r2, #8
 802eac0:	0a1b      	lsrs	r3, r3, #8
 802eac2:	0719      	lsls	r1, r3, #28
 802eac4:	bf04      	itt	eq
 802eac6:	091b      	lsreq	r3, r3, #4
 802eac8:	3204      	addeq	r2, #4
 802eaca:	0799      	lsls	r1, r3, #30
 802eacc:	bf04      	itt	eq
 802eace:	089b      	lsreq	r3, r3, #2
 802ead0:	3202      	addeq	r2, #2
 802ead2:	07d9      	lsls	r1, r3, #31
 802ead4:	d403      	bmi.n	802eade <__lo0bits+0x4e>
 802ead6:	085b      	lsrs	r3, r3, #1
 802ead8:	f102 0201 	add.w	r2, r2, #1
 802eadc:	d003      	beq.n	802eae6 <__lo0bits+0x56>
 802eade:	6003      	str	r3, [r0, #0]
 802eae0:	e7e5      	b.n	802eaae <__lo0bits+0x1e>
 802eae2:	2200      	movs	r2, #0
 802eae4:	e7e3      	b.n	802eaae <__lo0bits+0x1e>
 802eae6:	2220      	movs	r2, #32
 802eae8:	e7e1      	b.n	802eaae <__lo0bits+0x1e>
	...

0802eaec <__i2b>:
 802eaec:	b510      	push	{r4, lr}
 802eaee:	460c      	mov	r4, r1
 802eaf0:	2101      	movs	r1, #1
 802eaf2:	f7ff febb 	bl	802e86c <_Balloc>
 802eaf6:	4602      	mov	r2, r0
 802eaf8:	b928      	cbnz	r0, 802eb06 <__i2b+0x1a>
 802eafa:	4b05      	ldr	r3, [pc, #20]	; (802eb10 <__i2b+0x24>)
 802eafc:	4805      	ldr	r0, [pc, #20]	; (802eb14 <__i2b+0x28>)
 802eafe:	f240 1145 	movw	r1, #325	; 0x145
 802eb02:	f7fd fc2b 	bl	802c35c <__assert_func>
 802eb06:	2301      	movs	r3, #1
 802eb08:	6144      	str	r4, [r0, #20]
 802eb0a:	6103      	str	r3, [r0, #16]
 802eb0c:	bd10      	pop	{r4, pc}
 802eb0e:	bf00      	nop
 802eb10:	08034999 	.word	0x08034999
 802eb14:	080349aa 	.word	0x080349aa

0802eb18 <__multiply>:
 802eb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eb1c:	4691      	mov	r9, r2
 802eb1e:	690a      	ldr	r2, [r1, #16]
 802eb20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802eb24:	429a      	cmp	r2, r3
 802eb26:	bfb8      	it	lt
 802eb28:	460b      	movlt	r3, r1
 802eb2a:	460c      	mov	r4, r1
 802eb2c:	bfbc      	itt	lt
 802eb2e:	464c      	movlt	r4, r9
 802eb30:	4699      	movlt	r9, r3
 802eb32:	6927      	ldr	r7, [r4, #16]
 802eb34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802eb38:	68a3      	ldr	r3, [r4, #8]
 802eb3a:	6861      	ldr	r1, [r4, #4]
 802eb3c:	eb07 060a 	add.w	r6, r7, sl
 802eb40:	42b3      	cmp	r3, r6
 802eb42:	b085      	sub	sp, #20
 802eb44:	bfb8      	it	lt
 802eb46:	3101      	addlt	r1, #1
 802eb48:	f7ff fe90 	bl	802e86c <_Balloc>
 802eb4c:	b930      	cbnz	r0, 802eb5c <__multiply+0x44>
 802eb4e:	4602      	mov	r2, r0
 802eb50:	4b44      	ldr	r3, [pc, #272]	; (802ec64 <__multiply+0x14c>)
 802eb52:	4845      	ldr	r0, [pc, #276]	; (802ec68 <__multiply+0x150>)
 802eb54:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802eb58:	f7fd fc00 	bl	802c35c <__assert_func>
 802eb5c:	f100 0514 	add.w	r5, r0, #20
 802eb60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802eb64:	462b      	mov	r3, r5
 802eb66:	2200      	movs	r2, #0
 802eb68:	4543      	cmp	r3, r8
 802eb6a:	d321      	bcc.n	802ebb0 <__multiply+0x98>
 802eb6c:	f104 0314 	add.w	r3, r4, #20
 802eb70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802eb74:	f109 0314 	add.w	r3, r9, #20
 802eb78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802eb7c:	9202      	str	r2, [sp, #8]
 802eb7e:	1b3a      	subs	r2, r7, r4
 802eb80:	3a15      	subs	r2, #21
 802eb82:	f022 0203 	bic.w	r2, r2, #3
 802eb86:	3204      	adds	r2, #4
 802eb88:	f104 0115 	add.w	r1, r4, #21
 802eb8c:	428f      	cmp	r7, r1
 802eb8e:	bf38      	it	cc
 802eb90:	2204      	movcc	r2, #4
 802eb92:	9201      	str	r2, [sp, #4]
 802eb94:	9a02      	ldr	r2, [sp, #8]
 802eb96:	9303      	str	r3, [sp, #12]
 802eb98:	429a      	cmp	r2, r3
 802eb9a:	d80c      	bhi.n	802ebb6 <__multiply+0x9e>
 802eb9c:	2e00      	cmp	r6, #0
 802eb9e:	dd03      	ble.n	802eba8 <__multiply+0x90>
 802eba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802eba4:	2b00      	cmp	r3, #0
 802eba6:	d05b      	beq.n	802ec60 <__multiply+0x148>
 802eba8:	6106      	str	r6, [r0, #16]
 802ebaa:	b005      	add	sp, #20
 802ebac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ebb0:	f843 2b04 	str.w	r2, [r3], #4
 802ebb4:	e7d8      	b.n	802eb68 <__multiply+0x50>
 802ebb6:	f8b3 a000 	ldrh.w	sl, [r3]
 802ebba:	f1ba 0f00 	cmp.w	sl, #0
 802ebbe:	d024      	beq.n	802ec0a <__multiply+0xf2>
 802ebc0:	f104 0e14 	add.w	lr, r4, #20
 802ebc4:	46a9      	mov	r9, r5
 802ebc6:	f04f 0c00 	mov.w	ip, #0
 802ebca:	f85e 2b04 	ldr.w	r2, [lr], #4
 802ebce:	f8d9 1000 	ldr.w	r1, [r9]
 802ebd2:	fa1f fb82 	uxth.w	fp, r2
 802ebd6:	b289      	uxth	r1, r1
 802ebd8:	fb0a 110b 	mla	r1, sl, fp, r1
 802ebdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802ebe0:	f8d9 2000 	ldr.w	r2, [r9]
 802ebe4:	4461      	add	r1, ip
 802ebe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ebea:	fb0a c20b 	mla	r2, sl, fp, ip
 802ebee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802ebf2:	b289      	uxth	r1, r1
 802ebf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ebf8:	4577      	cmp	r7, lr
 802ebfa:	f849 1b04 	str.w	r1, [r9], #4
 802ebfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ec02:	d8e2      	bhi.n	802ebca <__multiply+0xb2>
 802ec04:	9a01      	ldr	r2, [sp, #4]
 802ec06:	f845 c002 	str.w	ip, [r5, r2]
 802ec0a:	9a03      	ldr	r2, [sp, #12]
 802ec0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802ec10:	3304      	adds	r3, #4
 802ec12:	f1b9 0f00 	cmp.w	r9, #0
 802ec16:	d021      	beq.n	802ec5c <__multiply+0x144>
 802ec18:	6829      	ldr	r1, [r5, #0]
 802ec1a:	f104 0c14 	add.w	ip, r4, #20
 802ec1e:	46ae      	mov	lr, r5
 802ec20:	f04f 0a00 	mov.w	sl, #0
 802ec24:	f8bc b000 	ldrh.w	fp, [ip]
 802ec28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802ec2c:	fb09 220b 	mla	r2, r9, fp, r2
 802ec30:	4452      	add	r2, sl
 802ec32:	b289      	uxth	r1, r1
 802ec34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ec38:	f84e 1b04 	str.w	r1, [lr], #4
 802ec3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 802ec40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ec44:	f8be 1000 	ldrh.w	r1, [lr]
 802ec48:	fb09 110a 	mla	r1, r9, sl, r1
 802ec4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802ec50:	4567      	cmp	r7, ip
 802ec52:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ec56:	d8e5      	bhi.n	802ec24 <__multiply+0x10c>
 802ec58:	9a01      	ldr	r2, [sp, #4]
 802ec5a:	50a9      	str	r1, [r5, r2]
 802ec5c:	3504      	adds	r5, #4
 802ec5e:	e799      	b.n	802eb94 <__multiply+0x7c>
 802ec60:	3e01      	subs	r6, #1
 802ec62:	e79b      	b.n	802eb9c <__multiply+0x84>
 802ec64:	08034999 	.word	0x08034999
 802ec68:	080349aa 	.word	0x080349aa

0802ec6c <__pow5mult>:
 802ec6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ec70:	4615      	mov	r5, r2
 802ec72:	f012 0203 	ands.w	r2, r2, #3
 802ec76:	4606      	mov	r6, r0
 802ec78:	460f      	mov	r7, r1
 802ec7a:	d007      	beq.n	802ec8c <__pow5mult+0x20>
 802ec7c:	4c25      	ldr	r4, [pc, #148]	; (802ed14 <__pow5mult+0xa8>)
 802ec7e:	3a01      	subs	r2, #1
 802ec80:	2300      	movs	r3, #0
 802ec82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802ec86:	f7ff fe53 	bl	802e930 <__multadd>
 802ec8a:	4607      	mov	r7, r0
 802ec8c:	10ad      	asrs	r5, r5, #2
 802ec8e:	d03d      	beq.n	802ed0c <__pow5mult+0xa0>
 802ec90:	69f4      	ldr	r4, [r6, #28]
 802ec92:	b97c      	cbnz	r4, 802ecb4 <__pow5mult+0x48>
 802ec94:	2010      	movs	r0, #16
 802ec96:	f7fd fb95 	bl	802c3c4 <malloc>
 802ec9a:	4602      	mov	r2, r0
 802ec9c:	61f0      	str	r0, [r6, #28]
 802ec9e:	b928      	cbnz	r0, 802ecac <__pow5mult+0x40>
 802eca0:	4b1d      	ldr	r3, [pc, #116]	; (802ed18 <__pow5mult+0xac>)
 802eca2:	481e      	ldr	r0, [pc, #120]	; (802ed1c <__pow5mult+0xb0>)
 802eca4:	f240 11b3 	movw	r1, #435	; 0x1b3
 802eca8:	f7fd fb58 	bl	802c35c <__assert_func>
 802ecac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802ecb0:	6004      	str	r4, [r0, #0]
 802ecb2:	60c4      	str	r4, [r0, #12]
 802ecb4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802ecb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802ecbc:	b94c      	cbnz	r4, 802ecd2 <__pow5mult+0x66>
 802ecbe:	f240 2171 	movw	r1, #625	; 0x271
 802ecc2:	4630      	mov	r0, r6
 802ecc4:	f7ff ff12 	bl	802eaec <__i2b>
 802ecc8:	2300      	movs	r3, #0
 802ecca:	f8c8 0008 	str.w	r0, [r8, #8]
 802ecce:	4604      	mov	r4, r0
 802ecd0:	6003      	str	r3, [r0, #0]
 802ecd2:	f04f 0900 	mov.w	r9, #0
 802ecd6:	07eb      	lsls	r3, r5, #31
 802ecd8:	d50a      	bpl.n	802ecf0 <__pow5mult+0x84>
 802ecda:	4639      	mov	r1, r7
 802ecdc:	4622      	mov	r2, r4
 802ecde:	4630      	mov	r0, r6
 802ece0:	f7ff ff1a 	bl	802eb18 <__multiply>
 802ece4:	4639      	mov	r1, r7
 802ece6:	4680      	mov	r8, r0
 802ece8:	4630      	mov	r0, r6
 802ecea:	f7ff fdff 	bl	802e8ec <_Bfree>
 802ecee:	4647      	mov	r7, r8
 802ecf0:	106d      	asrs	r5, r5, #1
 802ecf2:	d00b      	beq.n	802ed0c <__pow5mult+0xa0>
 802ecf4:	6820      	ldr	r0, [r4, #0]
 802ecf6:	b938      	cbnz	r0, 802ed08 <__pow5mult+0x9c>
 802ecf8:	4622      	mov	r2, r4
 802ecfa:	4621      	mov	r1, r4
 802ecfc:	4630      	mov	r0, r6
 802ecfe:	f7ff ff0b 	bl	802eb18 <__multiply>
 802ed02:	6020      	str	r0, [r4, #0]
 802ed04:	f8c0 9000 	str.w	r9, [r0]
 802ed08:	4604      	mov	r4, r0
 802ed0a:	e7e4      	b.n	802ecd6 <__pow5mult+0x6a>
 802ed0c:	4638      	mov	r0, r7
 802ed0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ed12:	bf00      	nop
 802ed14:	08034af8 	.word	0x08034af8
 802ed18:	080348c3 	.word	0x080348c3
 802ed1c:	080349aa 	.word	0x080349aa

0802ed20 <__lshift>:
 802ed20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ed24:	460c      	mov	r4, r1
 802ed26:	6849      	ldr	r1, [r1, #4]
 802ed28:	6923      	ldr	r3, [r4, #16]
 802ed2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802ed2e:	68a3      	ldr	r3, [r4, #8]
 802ed30:	4607      	mov	r7, r0
 802ed32:	4691      	mov	r9, r2
 802ed34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802ed38:	f108 0601 	add.w	r6, r8, #1
 802ed3c:	42b3      	cmp	r3, r6
 802ed3e:	db0b      	blt.n	802ed58 <__lshift+0x38>
 802ed40:	4638      	mov	r0, r7
 802ed42:	f7ff fd93 	bl	802e86c <_Balloc>
 802ed46:	4605      	mov	r5, r0
 802ed48:	b948      	cbnz	r0, 802ed5e <__lshift+0x3e>
 802ed4a:	4602      	mov	r2, r0
 802ed4c:	4b28      	ldr	r3, [pc, #160]	; (802edf0 <__lshift+0xd0>)
 802ed4e:	4829      	ldr	r0, [pc, #164]	; (802edf4 <__lshift+0xd4>)
 802ed50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802ed54:	f7fd fb02 	bl	802c35c <__assert_func>
 802ed58:	3101      	adds	r1, #1
 802ed5a:	005b      	lsls	r3, r3, #1
 802ed5c:	e7ee      	b.n	802ed3c <__lshift+0x1c>
 802ed5e:	2300      	movs	r3, #0
 802ed60:	f100 0114 	add.w	r1, r0, #20
 802ed64:	f100 0210 	add.w	r2, r0, #16
 802ed68:	4618      	mov	r0, r3
 802ed6a:	4553      	cmp	r3, sl
 802ed6c:	db33      	blt.n	802edd6 <__lshift+0xb6>
 802ed6e:	6920      	ldr	r0, [r4, #16]
 802ed70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802ed74:	f104 0314 	add.w	r3, r4, #20
 802ed78:	f019 091f 	ands.w	r9, r9, #31
 802ed7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802ed80:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802ed84:	d02b      	beq.n	802edde <__lshift+0xbe>
 802ed86:	f1c9 0e20 	rsb	lr, r9, #32
 802ed8a:	468a      	mov	sl, r1
 802ed8c:	2200      	movs	r2, #0
 802ed8e:	6818      	ldr	r0, [r3, #0]
 802ed90:	fa00 f009 	lsl.w	r0, r0, r9
 802ed94:	4310      	orrs	r0, r2
 802ed96:	f84a 0b04 	str.w	r0, [sl], #4
 802ed9a:	f853 2b04 	ldr.w	r2, [r3], #4
 802ed9e:	459c      	cmp	ip, r3
 802eda0:	fa22 f20e 	lsr.w	r2, r2, lr
 802eda4:	d8f3      	bhi.n	802ed8e <__lshift+0x6e>
 802eda6:	ebac 0304 	sub.w	r3, ip, r4
 802edaa:	3b15      	subs	r3, #21
 802edac:	f023 0303 	bic.w	r3, r3, #3
 802edb0:	3304      	adds	r3, #4
 802edb2:	f104 0015 	add.w	r0, r4, #21
 802edb6:	4584      	cmp	ip, r0
 802edb8:	bf38      	it	cc
 802edba:	2304      	movcc	r3, #4
 802edbc:	50ca      	str	r2, [r1, r3]
 802edbe:	b10a      	cbz	r2, 802edc4 <__lshift+0xa4>
 802edc0:	f108 0602 	add.w	r6, r8, #2
 802edc4:	3e01      	subs	r6, #1
 802edc6:	4638      	mov	r0, r7
 802edc8:	612e      	str	r6, [r5, #16]
 802edca:	4621      	mov	r1, r4
 802edcc:	f7ff fd8e 	bl	802e8ec <_Bfree>
 802edd0:	4628      	mov	r0, r5
 802edd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802edd6:	f842 0f04 	str.w	r0, [r2, #4]!
 802edda:	3301      	adds	r3, #1
 802eddc:	e7c5      	b.n	802ed6a <__lshift+0x4a>
 802edde:	3904      	subs	r1, #4
 802ede0:	f853 2b04 	ldr.w	r2, [r3], #4
 802ede4:	f841 2f04 	str.w	r2, [r1, #4]!
 802ede8:	459c      	cmp	ip, r3
 802edea:	d8f9      	bhi.n	802ede0 <__lshift+0xc0>
 802edec:	e7ea      	b.n	802edc4 <__lshift+0xa4>
 802edee:	bf00      	nop
 802edf0:	08034999 	.word	0x08034999
 802edf4:	080349aa 	.word	0x080349aa

0802edf8 <__mcmp>:
 802edf8:	b530      	push	{r4, r5, lr}
 802edfa:	6902      	ldr	r2, [r0, #16]
 802edfc:	690c      	ldr	r4, [r1, #16]
 802edfe:	1b12      	subs	r2, r2, r4
 802ee00:	d10e      	bne.n	802ee20 <__mcmp+0x28>
 802ee02:	f100 0314 	add.w	r3, r0, #20
 802ee06:	3114      	adds	r1, #20
 802ee08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802ee0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802ee10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802ee14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802ee18:	42a5      	cmp	r5, r4
 802ee1a:	d003      	beq.n	802ee24 <__mcmp+0x2c>
 802ee1c:	d305      	bcc.n	802ee2a <__mcmp+0x32>
 802ee1e:	2201      	movs	r2, #1
 802ee20:	4610      	mov	r0, r2
 802ee22:	bd30      	pop	{r4, r5, pc}
 802ee24:	4283      	cmp	r3, r0
 802ee26:	d3f3      	bcc.n	802ee10 <__mcmp+0x18>
 802ee28:	e7fa      	b.n	802ee20 <__mcmp+0x28>
 802ee2a:	f04f 32ff 	mov.w	r2, #4294967295
 802ee2e:	e7f7      	b.n	802ee20 <__mcmp+0x28>

0802ee30 <__mdiff>:
 802ee30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ee34:	460c      	mov	r4, r1
 802ee36:	4606      	mov	r6, r0
 802ee38:	4611      	mov	r1, r2
 802ee3a:	4620      	mov	r0, r4
 802ee3c:	4690      	mov	r8, r2
 802ee3e:	f7ff ffdb 	bl	802edf8 <__mcmp>
 802ee42:	1e05      	subs	r5, r0, #0
 802ee44:	d110      	bne.n	802ee68 <__mdiff+0x38>
 802ee46:	4629      	mov	r1, r5
 802ee48:	4630      	mov	r0, r6
 802ee4a:	f7ff fd0f 	bl	802e86c <_Balloc>
 802ee4e:	b930      	cbnz	r0, 802ee5e <__mdiff+0x2e>
 802ee50:	4b3a      	ldr	r3, [pc, #232]	; (802ef3c <__mdiff+0x10c>)
 802ee52:	4602      	mov	r2, r0
 802ee54:	f240 2137 	movw	r1, #567	; 0x237
 802ee58:	4839      	ldr	r0, [pc, #228]	; (802ef40 <__mdiff+0x110>)
 802ee5a:	f7fd fa7f 	bl	802c35c <__assert_func>
 802ee5e:	2301      	movs	r3, #1
 802ee60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802ee64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ee68:	bfa4      	itt	ge
 802ee6a:	4643      	movge	r3, r8
 802ee6c:	46a0      	movge	r8, r4
 802ee6e:	4630      	mov	r0, r6
 802ee70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802ee74:	bfa6      	itte	ge
 802ee76:	461c      	movge	r4, r3
 802ee78:	2500      	movge	r5, #0
 802ee7a:	2501      	movlt	r5, #1
 802ee7c:	f7ff fcf6 	bl	802e86c <_Balloc>
 802ee80:	b920      	cbnz	r0, 802ee8c <__mdiff+0x5c>
 802ee82:	4b2e      	ldr	r3, [pc, #184]	; (802ef3c <__mdiff+0x10c>)
 802ee84:	4602      	mov	r2, r0
 802ee86:	f240 2145 	movw	r1, #581	; 0x245
 802ee8a:	e7e5      	b.n	802ee58 <__mdiff+0x28>
 802ee8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802ee90:	6926      	ldr	r6, [r4, #16]
 802ee92:	60c5      	str	r5, [r0, #12]
 802ee94:	f104 0914 	add.w	r9, r4, #20
 802ee98:	f108 0514 	add.w	r5, r8, #20
 802ee9c:	f100 0e14 	add.w	lr, r0, #20
 802eea0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802eea4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802eea8:	f108 0210 	add.w	r2, r8, #16
 802eeac:	46f2      	mov	sl, lr
 802eeae:	2100      	movs	r1, #0
 802eeb0:	f859 3b04 	ldr.w	r3, [r9], #4
 802eeb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802eeb8:	fa11 f88b 	uxtah	r8, r1, fp
 802eebc:	b299      	uxth	r1, r3
 802eebe:	0c1b      	lsrs	r3, r3, #16
 802eec0:	eba8 0801 	sub.w	r8, r8, r1
 802eec4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802eec8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802eecc:	fa1f f888 	uxth.w	r8, r8
 802eed0:	1419      	asrs	r1, r3, #16
 802eed2:	454e      	cmp	r6, r9
 802eed4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802eed8:	f84a 3b04 	str.w	r3, [sl], #4
 802eedc:	d8e8      	bhi.n	802eeb0 <__mdiff+0x80>
 802eede:	1b33      	subs	r3, r6, r4
 802eee0:	3b15      	subs	r3, #21
 802eee2:	f023 0303 	bic.w	r3, r3, #3
 802eee6:	3304      	adds	r3, #4
 802eee8:	3415      	adds	r4, #21
 802eeea:	42a6      	cmp	r6, r4
 802eeec:	bf38      	it	cc
 802eeee:	2304      	movcc	r3, #4
 802eef0:	441d      	add	r5, r3
 802eef2:	4473      	add	r3, lr
 802eef4:	469e      	mov	lr, r3
 802eef6:	462e      	mov	r6, r5
 802eef8:	4566      	cmp	r6, ip
 802eefa:	d30e      	bcc.n	802ef1a <__mdiff+0xea>
 802eefc:	f10c 0203 	add.w	r2, ip, #3
 802ef00:	1b52      	subs	r2, r2, r5
 802ef02:	f022 0203 	bic.w	r2, r2, #3
 802ef06:	3d03      	subs	r5, #3
 802ef08:	45ac      	cmp	ip, r5
 802ef0a:	bf38      	it	cc
 802ef0c:	2200      	movcc	r2, #0
 802ef0e:	4413      	add	r3, r2
 802ef10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802ef14:	b17a      	cbz	r2, 802ef36 <__mdiff+0x106>
 802ef16:	6107      	str	r7, [r0, #16]
 802ef18:	e7a4      	b.n	802ee64 <__mdiff+0x34>
 802ef1a:	f856 8b04 	ldr.w	r8, [r6], #4
 802ef1e:	fa11 f288 	uxtah	r2, r1, r8
 802ef22:	1414      	asrs	r4, r2, #16
 802ef24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802ef28:	b292      	uxth	r2, r2
 802ef2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802ef2e:	f84e 2b04 	str.w	r2, [lr], #4
 802ef32:	1421      	asrs	r1, r4, #16
 802ef34:	e7e0      	b.n	802eef8 <__mdiff+0xc8>
 802ef36:	3f01      	subs	r7, #1
 802ef38:	e7ea      	b.n	802ef10 <__mdiff+0xe0>
 802ef3a:	bf00      	nop
 802ef3c:	08034999 	.word	0x08034999
 802ef40:	080349aa 	.word	0x080349aa

0802ef44 <__ulp>:
 802ef44:	b082      	sub	sp, #8
 802ef46:	ed8d 0b00 	vstr	d0, [sp]
 802ef4a:	9a01      	ldr	r2, [sp, #4]
 802ef4c:	4b0f      	ldr	r3, [pc, #60]	; (802ef8c <__ulp+0x48>)
 802ef4e:	4013      	ands	r3, r2
 802ef50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802ef54:	2b00      	cmp	r3, #0
 802ef56:	dc08      	bgt.n	802ef6a <__ulp+0x26>
 802ef58:	425b      	negs	r3, r3
 802ef5a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802ef5e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802ef62:	da04      	bge.n	802ef6e <__ulp+0x2a>
 802ef64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802ef68:	4113      	asrs	r3, r2
 802ef6a:	2200      	movs	r2, #0
 802ef6c:	e008      	b.n	802ef80 <__ulp+0x3c>
 802ef6e:	f1a2 0314 	sub.w	r3, r2, #20
 802ef72:	2b1e      	cmp	r3, #30
 802ef74:	bfda      	itte	le
 802ef76:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802ef7a:	40da      	lsrle	r2, r3
 802ef7c:	2201      	movgt	r2, #1
 802ef7e:	2300      	movs	r3, #0
 802ef80:	4619      	mov	r1, r3
 802ef82:	4610      	mov	r0, r2
 802ef84:	ec41 0b10 	vmov	d0, r0, r1
 802ef88:	b002      	add	sp, #8
 802ef8a:	4770      	bx	lr
 802ef8c:	7ff00000 	.word	0x7ff00000

0802ef90 <__b2d>:
 802ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ef94:	6906      	ldr	r6, [r0, #16]
 802ef96:	f100 0814 	add.w	r8, r0, #20
 802ef9a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802ef9e:	1f37      	subs	r7, r6, #4
 802efa0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802efa4:	4610      	mov	r0, r2
 802efa6:	f7ff fd53 	bl	802ea50 <__hi0bits>
 802efaa:	f1c0 0320 	rsb	r3, r0, #32
 802efae:	280a      	cmp	r0, #10
 802efb0:	600b      	str	r3, [r1, #0]
 802efb2:	491b      	ldr	r1, [pc, #108]	; (802f020 <__b2d+0x90>)
 802efb4:	dc15      	bgt.n	802efe2 <__b2d+0x52>
 802efb6:	f1c0 0c0b 	rsb	ip, r0, #11
 802efba:	fa22 f30c 	lsr.w	r3, r2, ip
 802efbe:	45b8      	cmp	r8, r7
 802efc0:	ea43 0501 	orr.w	r5, r3, r1
 802efc4:	bf34      	ite	cc
 802efc6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802efca:	2300      	movcs	r3, #0
 802efcc:	3015      	adds	r0, #21
 802efce:	fa02 f000 	lsl.w	r0, r2, r0
 802efd2:	fa23 f30c 	lsr.w	r3, r3, ip
 802efd6:	4303      	orrs	r3, r0
 802efd8:	461c      	mov	r4, r3
 802efda:	ec45 4b10 	vmov	d0, r4, r5
 802efde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802efe2:	45b8      	cmp	r8, r7
 802efe4:	bf3a      	itte	cc
 802efe6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802efea:	f1a6 0708 	subcc.w	r7, r6, #8
 802efee:	2300      	movcs	r3, #0
 802eff0:	380b      	subs	r0, #11
 802eff2:	d012      	beq.n	802f01a <__b2d+0x8a>
 802eff4:	f1c0 0120 	rsb	r1, r0, #32
 802eff8:	fa23 f401 	lsr.w	r4, r3, r1
 802effc:	4082      	lsls	r2, r0
 802effe:	4322      	orrs	r2, r4
 802f000:	4547      	cmp	r7, r8
 802f002:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802f006:	bf8c      	ite	hi
 802f008:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802f00c:	2200      	movls	r2, #0
 802f00e:	4083      	lsls	r3, r0
 802f010:	40ca      	lsrs	r2, r1
 802f012:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802f016:	4313      	orrs	r3, r2
 802f018:	e7de      	b.n	802efd8 <__b2d+0x48>
 802f01a:	ea42 0501 	orr.w	r5, r2, r1
 802f01e:	e7db      	b.n	802efd8 <__b2d+0x48>
 802f020:	3ff00000 	.word	0x3ff00000

0802f024 <__d2b>:
 802f024:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f028:	460f      	mov	r7, r1
 802f02a:	2101      	movs	r1, #1
 802f02c:	ec59 8b10 	vmov	r8, r9, d0
 802f030:	4616      	mov	r6, r2
 802f032:	f7ff fc1b 	bl	802e86c <_Balloc>
 802f036:	4604      	mov	r4, r0
 802f038:	b930      	cbnz	r0, 802f048 <__d2b+0x24>
 802f03a:	4602      	mov	r2, r0
 802f03c:	4b24      	ldr	r3, [pc, #144]	; (802f0d0 <__d2b+0xac>)
 802f03e:	4825      	ldr	r0, [pc, #148]	; (802f0d4 <__d2b+0xb0>)
 802f040:	f240 310f 	movw	r1, #783	; 0x30f
 802f044:	f7fd f98a 	bl	802c35c <__assert_func>
 802f048:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802f04c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f050:	bb2d      	cbnz	r5, 802f09e <__d2b+0x7a>
 802f052:	9301      	str	r3, [sp, #4]
 802f054:	f1b8 0300 	subs.w	r3, r8, #0
 802f058:	d026      	beq.n	802f0a8 <__d2b+0x84>
 802f05a:	4668      	mov	r0, sp
 802f05c:	9300      	str	r3, [sp, #0]
 802f05e:	f7ff fd17 	bl	802ea90 <__lo0bits>
 802f062:	e9dd 1200 	ldrd	r1, r2, [sp]
 802f066:	b1e8      	cbz	r0, 802f0a4 <__d2b+0x80>
 802f068:	f1c0 0320 	rsb	r3, r0, #32
 802f06c:	fa02 f303 	lsl.w	r3, r2, r3
 802f070:	430b      	orrs	r3, r1
 802f072:	40c2      	lsrs	r2, r0
 802f074:	6163      	str	r3, [r4, #20]
 802f076:	9201      	str	r2, [sp, #4]
 802f078:	9b01      	ldr	r3, [sp, #4]
 802f07a:	61a3      	str	r3, [r4, #24]
 802f07c:	2b00      	cmp	r3, #0
 802f07e:	bf14      	ite	ne
 802f080:	2202      	movne	r2, #2
 802f082:	2201      	moveq	r2, #1
 802f084:	6122      	str	r2, [r4, #16]
 802f086:	b1bd      	cbz	r5, 802f0b8 <__d2b+0x94>
 802f088:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802f08c:	4405      	add	r5, r0
 802f08e:	603d      	str	r5, [r7, #0]
 802f090:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802f094:	6030      	str	r0, [r6, #0]
 802f096:	4620      	mov	r0, r4
 802f098:	b003      	add	sp, #12
 802f09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802f09e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802f0a2:	e7d6      	b.n	802f052 <__d2b+0x2e>
 802f0a4:	6161      	str	r1, [r4, #20]
 802f0a6:	e7e7      	b.n	802f078 <__d2b+0x54>
 802f0a8:	a801      	add	r0, sp, #4
 802f0aa:	f7ff fcf1 	bl	802ea90 <__lo0bits>
 802f0ae:	9b01      	ldr	r3, [sp, #4]
 802f0b0:	6163      	str	r3, [r4, #20]
 802f0b2:	3020      	adds	r0, #32
 802f0b4:	2201      	movs	r2, #1
 802f0b6:	e7e5      	b.n	802f084 <__d2b+0x60>
 802f0b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802f0bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802f0c0:	6038      	str	r0, [r7, #0]
 802f0c2:	6918      	ldr	r0, [r3, #16]
 802f0c4:	f7ff fcc4 	bl	802ea50 <__hi0bits>
 802f0c8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802f0cc:	e7e2      	b.n	802f094 <__d2b+0x70>
 802f0ce:	bf00      	nop
 802f0d0:	08034999 	.word	0x08034999
 802f0d4:	080349aa 	.word	0x080349aa

0802f0d8 <__ratio>:
 802f0d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f0dc:	4688      	mov	r8, r1
 802f0de:	4669      	mov	r1, sp
 802f0e0:	4681      	mov	r9, r0
 802f0e2:	f7ff ff55 	bl	802ef90 <__b2d>
 802f0e6:	a901      	add	r1, sp, #4
 802f0e8:	4640      	mov	r0, r8
 802f0ea:	ec55 4b10 	vmov	r4, r5, d0
 802f0ee:	f7ff ff4f 	bl	802ef90 <__b2d>
 802f0f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f0f6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802f0fa:	eba3 0c02 	sub.w	ip, r3, r2
 802f0fe:	e9dd 3200 	ldrd	r3, r2, [sp]
 802f102:	1a9b      	subs	r3, r3, r2
 802f104:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802f108:	ec51 0b10 	vmov	r0, r1, d0
 802f10c:	2b00      	cmp	r3, #0
 802f10e:	bfd6      	itet	le
 802f110:	460a      	movle	r2, r1
 802f112:	462a      	movgt	r2, r5
 802f114:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802f118:	468b      	mov	fp, r1
 802f11a:	462f      	mov	r7, r5
 802f11c:	bfd4      	ite	le
 802f11e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802f122:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802f126:	4620      	mov	r0, r4
 802f128:	ee10 2a10 	vmov	r2, s0
 802f12c:	465b      	mov	r3, fp
 802f12e:	4639      	mov	r1, r7
 802f130:	f7e1 fba4 	bl	801087c <__aeabi_ddiv>
 802f134:	ec41 0b10 	vmov	d0, r0, r1
 802f138:	b003      	add	sp, #12
 802f13a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802f13e <__copybits>:
 802f13e:	3901      	subs	r1, #1
 802f140:	b570      	push	{r4, r5, r6, lr}
 802f142:	1149      	asrs	r1, r1, #5
 802f144:	6914      	ldr	r4, [r2, #16]
 802f146:	3101      	adds	r1, #1
 802f148:	f102 0314 	add.w	r3, r2, #20
 802f14c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802f150:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802f154:	1f05      	subs	r5, r0, #4
 802f156:	42a3      	cmp	r3, r4
 802f158:	d30c      	bcc.n	802f174 <__copybits+0x36>
 802f15a:	1aa3      	subs	r3, r4, r2
 802f15c:	3b11      	subs	r3, #17
 802f15e:	f023 0303 	bic.w	r3, r3, #3
 802f162:	3211      	adds	r2, #17
 802f164:	42a2      	cmp	r2, r4
 802f166:	bf88      	it	hi
 802f168:	2300      	movhi	r3, #0
 802f16a:	4418      	add	r0, r3
 802f16c:	2300      	movs	r3, #0
 802f16e:	4288      	cmp	r0, r1
 802f170:	d305      	bcc.n	802f17e <__copybits+0x40>
 802f172:	bd70      	pop	{r4, r5, r6, pc}
 802f174:	f853 6b04 	ldr.w	r6, [r3], #4
 802f178:	f845 6f04 	str.w	r6, [r5, #4]!
 802f17c:	e7eb      	b.n	802f156 <__copybits+0x18>
 802f17e:	f840 3b04 	str.w	r3, [r0], #4
 802f182:	e7f4      	b.n	802f16e <__copybits+0x30>

0802f184 <__any_on>:
 802f184:	f100 0214 	add.w	r2, r0, #20
 802f188:	6900      	ldr	r0, [r0, #16]
 802f18a:	114b      	asrs	r3, r1, #5
 802f18c:	4298      	cmp	r0, r3
 802f18e:	b510      	push	{r4, lr}
 802f190:	db11      	blt.n	802f1b6 <__any_on+0x32>
 802f192:	dd0a      	ble.n	802f1aa <__any_on+0x26>
 802f194:	f011 011f 	ands.w	r1, r1, #31
 802f198:	d007      	beq.n	802f1aa <__any_on+0x26>
 802f19a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f19e:	fa24 f001 	lsr.w	r0, r4, r1
 802f1a2:	fa00 f101 	lsl.w	r1, r0, r1
 802f1a6:	428c      	cmp	r4, r1
 802f1a8:	d10b      	bne.n	802f1c2 <__any_on+0x3e>
 802f1aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f1ae:	4293      	cmp	r3, r2
 802f1b0:	d803      	bhi.n	802f1ba <__any_on+0x36>
 802f1b2:	2000      	movs	r0, #0
 802f1b4:	bd10      	pop	{r4, pc}
 802f1b6:	4603      	mov	r3, r0
 802f1b8:	e7f7      	b.n	802f1aa <__any_on+0x26>
 802f1ba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f1be:	2900      	cmp	r1, #0
 802f1c0:	d0f5      	beq.n	802f1ae <__any_on+0x2a>
 802f1c2:	2001      	movs	r0, #1
 802f1c4:	e7f6      	b.n	802f1b4 <__any_on+0x30>

0802f1c6 <sulp>:
 802f1c6:	b570      	push	{r4, r5, r6, lr}
 802f1c8:	4604      	mov	r4, r0
 802f1ca:	460d      	mov	r5, r1
 802f1cc:	ec45 4b10 	vmov	d0, r4, r5
 802f1d0:	4616      	mov	r6, r2
 802f1d2:	f7ff feb7 	bl	802ef44 <__ulp>
 802f1d6:	ec51 0b10 	vmov	r0, r1, d0
 802f1da:	b17e      	cbz	r6, 802f1fc <sulp+0x36>
 802f1dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802f1e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802f1e4:	2b00      	cmp	r3, #0
 802f1e6:	dd09      	ble.n	802f1fc <sulp+0x36>
 802f1e8:	051b      	lsls	r3, r3, #20
 802f1ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802f1ee:	2400      	movs	r4, #0
 802f1f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802f1f4:	4622      	mov	r2, r4
 802f1f6:	462b      	mov	r3, r5
 802f1f8:	f7e1 fa16 	bl	8010628 <__aeabi_dmul>
 802f1fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0802f200 <_strtod_l>:
 802f200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f204:	ed2d 8b02 	vpush	{d8}
 802f208:	b09b      	sub	sp, #108	; 0x6c
 802f20a:	4604      	mov	r4, r0
 802f20c:	9213      	str	r2, [sp, #76]	; 0x4c
 802f20e:	2200      	movs	r2, #0
 802f210:	9216      	str	r2, [sp, #88]	; 0x58
 802f212:	460d      	mov	r5, r1
 802f214:	f04f 0800 	mov.w	r8, #0
 802f218:	f04f 0900 	mov.w	r9, #0
 802f21c:	460a      	mov	r2, r1
 802f21e:	9215      	str	r2, [sp, #84]	; 0x54
 802f220:	7811      	ldrb	r1, [r2, #0]
 802f222:	292b      	cmp	r1, #43	; 0x2b
 802f224:	d04c      	beq.n	802f2c0 <_strtod_l+0xc0>
 802f226:	d83a      	bhi.n	802f29e <_strtod_l+0x9e>
 802f228:	290d      	cmp	r1, #13
 802f22a:	d834      	bhi.n	802f296 <_strtod_l+0x96>
 802f22c:	2908      	cmp	r1, #8
 802f22e:	d834      	bhi.n	802f29a <_strtod_l+0x9a>
 802f230:	2900      	cmp	r1, #0
 802f232:	d03d      	beq.n	802f2b0 <_strtod_l+0xb0>
 802f234:	2200      	movs	r2, #0
 802f236:	920a      	str	r2, [sp, #40]	; 0x28
 802f238:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802f23a:	7832      	ldrb	r2, [r6, #0]
 802f23c:	2a30      	cmp	r2, #48	; 0x30
 802f23e:	f040 80b4 	bne.w	802f3aa <_strtod_l+0x1aa>
 802f242:	7872      	ldrb	r2, [r6, #1]
 802f244:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 802f248:	2a58      	cmp	r2, #88	; 0x58
 802f24a:	d170      	bne.n	802f32e <_strtod_l+0x12e>
 802f24c:	9302      	str	r3, [sp, #8]
 802f24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f250:	9301      	str	r3, [sp, #4]
 802f252:	ab16      	add	r3, sp, #88	; 0x58
 802f254:	9300      	str	r3, [sp, #0]
 802f256:	4a8e      	ldr	r2, [pc, #568]	; (802f490 <_strtod_l+0x290>)
 802f258:	ab17      	add	r3, sp, #92	; 0x5c
 802f25a:	a915      	add	r1, sp, #84	; 0x54
 802f25c:	4620      	mov	r0, r4
 802f25e:	f001 fe5f 	bl	8030f20 <__gethex>
 802f262:	f010 070f 	ands.w	r7, r0, #15
 802f266:	4605      	mov	r5, r0
 802f268:	d005      	beq.n	802f276 <_strtod_l+0x76>
 802f26a:	2f06      	cmp	r7, #6
 802f26c:	d12a      	bne.n	802f2c4 <_strtod_l+0xc4>
 802f26e:	3601      	adds	r6, #1
 802f270:	2300      	movs	r3, #0
 802f272:	9615      	str	r6, [sp, #84]	; 0x54
 802f274:	930a      	str	r3, [sp, #40]	; 0x28
 802f276:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f278:	2b00      	cmp	r3, #0
 802f27a:	f040 857f 	bne.w	802fd7c <_strtod_l+0xb7c>
 802f27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f280:	b1db      	cbz	r3, 802f2ba <_strtod_l+0xba>
 802f282:	4642      	mov	r2, r8
 802f284:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802f288:	ec43 2b10 	vmov	d0, r2, r3
 802f28c:	b01b      	add	sp, #108	; 0x6c
 802f28e:	ecbd 8b02 	vpop	{d8}
 802f292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f296:	2920      	cmp	r1, #32
 802f298:	d1cc      	bne.n	802f234 <_strtod_l+0x34>
 802f29a:	3201      	adds	r2, #1
 802f29c:	e7bf      	b.n	802f21e <_strtod_l+0x1e>
 802f29e:	292d      	cmp	r1, #45	; 0x2d
 802f2a0:	d1c8      	bne.n	802f234 <_strtod_l+0x34>
 802f2a2:	2101      	movs	r1, #1
 802f2a4:	910a      	str	r1, [sp, #40]	; 0x28
 802f2a6:	1c51      	adds	r1, r2, #1
 802f2a8:	9115      	str	r1, [sp, #84]	; 0x54
 802f2aa:	7852      	ldrb	r2, [r2, #1]
 802f2ac:	2a00      	cmp	r2, #0
 802f2ae:	d1c3      	bne.n	802f238 <_strtod_l+0x38>
 802f2b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f2b2:	9515      	str	r5, [sp, #84]	; 0x54
 802f2b4:	2b00      	cmp	r3, #0
 802f2b6:	f040 855f 	bne.w	802fd78 <_strtod_l+0xb78>
 802f2ba:	4642      	mov	r2, r8
 802f2bc:	464b      	mov	r3, r9
 802f2be:	e7e3      	b.n	802f288 <_strtod_l+0x88>
 802f2c0:	2100      	movs	r1, #0
 802f2c2:	e7ef      	b.n	802f2a4 <_strtod_l+0xa4>
 802f2c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f2c6:	b13a      	cbz	r2, 802f2d8 <_strtod_l+0xd8>
 802f2c8:	2135      	movs	r1, #53	; 0x35
 802f2ca:	a818      	add	r0, sp, #96	; 0x60
 802f2cc:	f7ff ff37 	bl	802f13e <__copybits>
 802f2d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f2d2:	4620      	mov	r0, r4
 802f2d4:	f7ff fb0a 	bl	802e8ec <_Bfree>
 802f2d8:	3f01      	subs	r7, #1
 802f2da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802f2dc:	2f04      	cmp	r7, #4
 802f2de:	d806      	bhi.n	802f2ee <_strtod_l+0xee>
 802f2e0:	e8df f007 	tbb	[pc, r7]
 802f2e4:	201d0314 	.word	0x201d0314
 802f2e8:	14          	.byte	0x14
 802f2e9:	00          	.byte	0x00
 802f2ea:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 802f2ee:	05e9      	lsls	r1, r5, #23
 802f2f0:	bf48      	it	mi
 802f2f2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802f2f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f2fa:	0d1b      	lsrs	r3, r3, #20
 802f2fc:	051b      	lsls	r3, r3, #20
 802f2fe:	2b00      	cmp	r3, #0
 802f300:	d1b9      	bne.n	802f276 <_strtod_l+0x76>
 802f302:	f7fe fb9b 	bl	802da3c <__errno>
 802f306:	2322      	movs	r3, #34	; 0x22
 802f308:	6003      	str	r3, [r0, #0]
 802f30a:	e7b4      	b.n	802f276 <_strtod_l+0x76>
 802f30c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 802f310:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802f314:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802f318:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802f31c:	e7e7      	b.n	802f2ee <_strtod_l+0xee>
 802f31e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802f498 <_strtod_l+0x298>
 802f322:	e7e4      	b.n	802f2ee <_strtod_l+0xee>
 802f324:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802f328:	f04f 38ff 	mov.w	r8, #4294967295
 802f32c:	e7df      	b.n	802f2ee <_strtod_l+0xee>
 802f32e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f330:	1c5a      	adds	r2, r3, #1
 802f332:	9215      	str	r2, [sp, #84]	; 0x54
 802f334:	785b      	ldrb	r3, [r3, #1]
 802f336:	2b30      	cmp	r3, #48	; 0x30
 802f338:	d0f9      	beq.n	802f32e <_strtod_l+0x12e>
 802f33a:	2b00      	cmp	r3, #0
 802f33c:	d09b      	beq.n	802f276 <_strtod_l+0x76>
 802f33e:	2301      	movs	r3, #1
 802f340:	f04f 0a00 	mov.w	sl, #0
 802f344:	9304      	str	r3, [sp, #16]
 802f346:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f348:	930b      	str	r3, [sp, #44]	; 0x2c
 802f34a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802f34e:	46d3      	mov	fp, sl
 802f350:	220a      	movs	r2, #10
 802f352:	9815      	ldr	r0, [sp, #84]	; 0x54
 802f354:	7806      	ldrb	r6, [r0, #0]
 802f356:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802f35a:	b2d9      	uxtb	r1, r3
 802f35c:	2909      	cmp	r1, #9
 802f35e:	d926      	bls.n	802f3ae <_strtod_l+0x1ae>
 802f360:	494c      	ldr	r1, [pc, #304]	; (802f494 <_strtod_l+0x294>)
 802f362:	2201      	movs	r2, #1
 802f364:	f7fe fa12 	bl	802d78c <strncmp>
 802f368:	2800      	cmp	r0, #0
 802f36a:	d030      	beq.n	802f3ce <_strtod_l+0x1ce>
 802f36c:	2000      	movs	r0, #0
 802f36e:	4632      	mov	r2, r6
 802f370:	9005      	str	r0, [sp, #20]
 802f372:	465e      	mov	r6, fp
 802f374:	4603      	mov	r3, r0
 802f376:	2a65      	cmp	r2, #101	; 0x65
 802f378:	d001      	beq.n	802f37e <_strtod_l+0x17e>
 802f37a:	2a45      	cmp	r2, #69	; 0x45
 802f37c:	d113      	bne.n	802f3a6 <_strtod_l+0x1a6>
 802f37e:	b91e      	cbnz	r6, 802f388 <_strtod_l+0x188>
 802f380:	9a04      	ldr	r2, [sp, #16]
 802f382:	4302      	orrs	r2, r0
 802f384:	d094      	beq.n	802f2b0 <_strtod_l+0xb0>
 802f386:	2600      	movs	r6, #0
 802f388:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802f38a:	1c6a      	adds	r2, r5, #1
 802f38c:	9215      	str	r2, [sp, #84]	; 0x54
 802f38e:	786a      	ldrb	r2, [r5, #1]
 802f390:	2a2b      	cmp	r2, #43	; 0x2b
 802f392:	d074      	beq.n	802f47e <_strtod_l+0x27e>
 802f394:	2a2d      	cmp	r2, #45	; 0x2d
 802f396:	d078      	beq.n	802f48a <_strtod_l+0x28a>
 802f398:	f04f 0c00 	mov.w	ip, #0
 802f39c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802f3a0:	2909      	cmp	r1, #9
 802f3a2:	d97f      	bls.n	802f4a4 <_strtod_l+0x2a4>
 802f3a4:	9515      	str	r5, [sp, #84]	; 0x54
 802f3a6:	2700      	movs	r7, #0
 802f3a8:	e09e      	b.n	802f4e8 <_strtod_l+0x2e8>
 802f3aa:	2300      	movs	r3, #0
 802f3ac:	e7c8      	b.n	802f340 <_strtod_l+0x140>
 802f3ae:	f1bb 0f08 	cmp.w	fp, #8
 802f3b2:	bfd8      	it	le
 802f3b4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802f3b6:	f100 0001 	add.w	r0, r0, #1
 802f3ba:	bfda      	itte	le
 802f3bc:	fb02 3301 	mlale	r3, r2, r1, r3
 802f3c0:	9309      	strle	r3, [sp, #36]	; 0x24
 802f3c2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 802f3c6:	f10b 0b01 	add.w	fp, fp, #1
 802f3ca:	9015      	str	r0, [sp, #84]	; 0x54
 802f3cc:	e7c1      	b.n	802f352 <_strtod_l+0x152>
 802f3ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f3d0:	1c5a      	adds	r2, r3, #1
 802f3d2:	9215      	str	r2, [sp, #84]	; 0x54
 802f3d4:	785a      	ldrb	r2, [r3, #1]
 802f3d6:	f1bb 0f00 	cmp.w	fp, #0
 802f3da:	d037      	beq.n	802f44c <_strtod_l+0x24c>
 802f3dc:	9005      	str	r0, [sp, #20]
 802f3de:	465e      	mov	r6, fp
 802f3e0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 802f3e4:	2b09      	cmp	r3, #9
 802f3e6:	d912      	bls.n	802f40e <_strtod_l+0x20e>
 802f3e8:	2301      	movs	r3, #1
 802f3ea:	e7c4      	b.n	802f376 <_strtod_l+0x176>
 802f3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f3ee:	1c5a      	adds	r2, r3, #1
 802f3f0:	9215      	str	r2, [sp, #84]	; 0x54
 802f3f2:	785a      	ldrb	r2, [r3, #1]
 802f3f4:	3001      	adds	r0, #1
 802f3f6:	2a30      	cmp	r2, #48	; 0x30
 802f3f8:	d0f8      	beq.n	802f3ec <_strtod_l+0x1ec>
 802f3fa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802f3fe:	2b08      	cmp	r3, #8
 802f400:	f200 84c1 	bhi.w	802fd86 <_strtod_l+0xb86>
 802f404:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f406:	9005      	str	r0, [sp, #20]
 802f408:	2000      	movs	r0, #0
 802f40a:	930b      	str	r3, [sp, #44]	; 0x2c
 802f40c:	4606      	mov	r6, r0
 802f40e:	3a30      	subs	r2, #48	; 0x30
 802f410:	f100 0301 	add.w	r3, r0, #1
 802f414:	d014      	beq.n	802f440 <_strtod_l+0x240>
 802f416:	9905      	ldr	r1, [sp, #20]
 802f418:	4419      	add	r1, r3
 802f41a:	9105      	str	r1, [sp, #20]
 802f41c:	4633      	mov	r3, r6
 802f41e:	eb00 0c06 	add.w	ip, r0, r6
 802f422:	210a      	movs	r1, #10
 802f424:	4563      	cmp	r3, ip
 802f426:	d113      	bne.n	802f450 <_strtod_l+0x250>
 802f428:	1833      	adds	r3, r6, r0
 802f42a:	2b08      	cmp	r3, #8
 802f42c:	f106 0601 	add.w	r6, r6, #1
 802f430:	4406      	add	r6, r0
 802f432:	dc1a      	bgt.n	802f46a <_strtod_l+0x26a>
 802f434:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f436:	230a      	movs	r3, #10
 802f438:	fb03 2301 	mla	r3, r3, r1, r2
 802f43c:	9309      	str	r3, [sp, #36]	; 0x24
 802f43e:	2300      	movs	r3, #0
 802f440:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f442:	1c51      	adds	r1, r2, #1
 802f444:	9115      	str	r1, [sp, #84]	; 0x54
 802f446:	7852      	ldrb	r2, [r2, #1]
 802f448:	4618      	mov	r0, r3
 802f44a:	e7c9      	b.n	802f3e0 <_strtod_l+0x1e0>
 802f44c:	4658      	mov	r0, fp
 802f44e:	e7d2      	b.n	802f3f6 <_strtod_l+0x1f6>
 802f450:	2b08      	cmp	r3, #8
 802f452:	f103 0301 	add.w	r3, r3, #1
 802f456:	dc03      	bgt.n	802f460 <_strtod_l+0x260>
 802f458:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f45a:	434f      	muls	r7, r1
 802f45c:	9709      	str	r7, [sp, #36]	; 0x24
 802f45e:	e7e1      	b.n	802f424 <_strtod_l+0x224>
 802f460:	2b10      	cmp	r3, #16
 802f462:	bfd8      	it	le
 802f464:	fb01 fa0a 	mulle.w	sl, r1, sl
 802f468:	e7dc      	b.n	802f424 <_strtod_l+0x224>
 802f46a:	2e10      	cmp	r6, #16
 802f46c:	bfdc      	itt	le
 802f46e:	230a      	movle	r3, #10
 802f470:	fb03 2a0a 	mlale	sl, r3, sl, r2
 802f474:	e7e3      	b.n	802f43e <_strtod_l+0x23e>
 802f476:	2300      	movs	r3, #0
 802f478:	9305      	str	r3, [sp, #20]
 802f47a:	2301      	movs	r3, #1
 802f47c:	e780      	b.n	802f380 <_strtod_l+0x180>
 802f47e:	f04f 0c00 	mov.w	ip, #0
 802f482:	1caa      	adds	r2, r5, #2
 802f484:	9215      	str	r2, [sp, #84]	; 0x54
 802f486:	78aa      	ldrb	r2, [r5, #2]
 802f488:	e788      	b.n	802f39c <_strtod_l+0x19c>
 802f48a:	f04f 0c01 	mov.w	ip, #1
 802f48e:	e7f8      	b.n	802f482 <_strtod_l+0x282>
 802f490:	08034b08 	.word	0x08034b08
 802f494:	08034b04 	.word	0x08034b04
 802f498:	7ff00000 	.word	0x7ff00000
 802f49c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f49e:	1c51      	adds	r1, r2, #1
 802f4a0:	9115      	str	r1, [sp, #84]	; 0x54
 802f4a2:	7852      	ldrb	r2, [r2, #1]
 802f4a4:	2a30      	cmp	r2, #48	; 0x30
 802f4a6:	d0f9      	beq.n	802f49c <_strtod_l+0x29c>
 802f4a8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 802f4ac:	2908      	cmp	r1, #8
 802f4ae:	f63f af7a 	bhi.w	802f3a6 <_strtod_l+0x1a6>
 802f4b2:	3a30      	subs	r2, #48	; 0x30
 802f4b4:	9208      	str	r2, [sp, #32]
 802f4b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f4b8:	920c      	str	r2, [sp, #48]	; 0x30
 802f4ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f4bc:	1c57      	adds	r7, r2, #1
 802f4be:	9715      	str	r7, [sp, #84]	; 0x54
 802f4c0:	7852      	ldrb	r2, [r2, #1]
 802f4c2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 802f4c6:	f1be 0f09 	cmp.w	lr, #9
 802f4ca:	d938      	bls.n	802f53e <_strtod_l+0x33e>
 802f4cc:	990c      	ldr	r1, [sp, #48]	; 0x30
 802f4ce:	1a7f      	subs	r7, r7, r1
 802f4d0:	2f08      	cmp	r7, #8
 802f4d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802f4d6:	dc03      	bgt.n	802f4e0 <_strtod_l+0x2e0>
 802f4d8:	9908      	ldr	r1, [sp, #32]
 802f4da:	428f      	cmp	r7, r1
 802f4dc:	bfa8      	it	ge
 802f4de:	460f      	movge	r7, r1
 802f4e0:	f1bc 0f00 	cmp.w	ip, #0
 802f4e4:	d000      	beq.n	802f4e8 <_strtod_l+0x2e8>
 802f4e6:	427f      	negs	r7, r7
 802f4e8:	2e00      	cmp	r6, #0
 802f4ea:	d14f      	bne.n	802f58c <_strtod_l+0x38c>
 802f4ec:	9904      	ldr	r1, [sp, #16]
 802f4ee:	4301      	orrs	r1, r0
 802f4f0:	f47f aec1 	bne.w	802f276 <_strtod_l+0x76>
 802f4f4:	2b00      	cmp	r3, #0
 802f4f6:	f47f aedb 	bne.w	802f2b0 <_strtod_l+0xb0>
 802f4fa:	2a69      	cmp	r2, #105	; 0x69
 802f4fc:	d029      	beq.n	802f552 <_strtod_l+0x352>
 802f4fe:	dc26      	bgt.n	802f54e <_strtod_l+0x34e>
 802f500:	2a49      	cmp	r2, #73	; 0x49
 802f502:	d026      	beq.n	802f552 <_strtod_l+0x352>
 802f504:	2a4e      	cmp	r2, #78	; 0x4e
 802f506:	f47f aed3 	bne.w	802f2b0 <_strtod_l+0xb0>
 802f50a:	499b      	ldr	r1, [pc, #620]	; (802f778 <_strtod_l+0x578>)
 802f50c:	a815      	add	r0, sp, #84	; 0x54
 802f50e:	f001 ff47 	bl	80313a0 <__match>
 802f512:	2800      	cmp	r0, #0
 802f514:	f43f aecc 	beq.w	802f2b0 <_strtod_l+0xb0>
 802f518:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f51a:	781b      	ldrb	r3, [r3, #0]
 802f51c:	2b28      	cmp	r3, #40	; 0x28
 802f51e:	d12f      	bne.n	802f580 <_strtod_l+0x380>
 802f520:	4996      	ldr	r1, [pc, #600]	; (802f77c <_strtod_l+0x57c>)
 802f522:	aa18      	add	r2, sp, #96	; 0x60
 802f524:	a815      	add	r0, sp, #84	; 0x54
 802f526:	f001 ff4f 	bl	80313c8 <__hexnan>
 802f52a:	2805      	cmp	r0, #5
 802f52c:	d128      	bne.n	802f580 <_strtod_l+0x380>
 802f52e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802f530:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802f534:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 802f538:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802f53c:	e69b      	b.n	802f276 <_strtod_l+0x76>
 802f53e:	9f08      	ldr	r7, [sp, #32]
 802f540:	210a      	movs	r1, #10
 802f542:	fb01 2107 	mla	r1, r1, r7, r2
 802f546:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802f54a:	9208      	str	r2, [sp, #32]
 802f54c:	e7b5      	b.n	802f4ba <_strtod_l+0x2ba>
 802f54e:	2a6e      	cmp	r2, #110	; 0x6e
 802f550:	e7d9      	b.n	802f506 <_strtod_l+0x306>
 802f552:	498b      	ldr	r1, [pc, #556]	; (802f780 <_strtod_l+0x580>)
 802f554:	a815      	add	r0, sp, #84	; 0x54
 802f556:	f001 ff23 	bl	80313a0 <__match>
 802f55a:	2800      	cmp	r0, #0
 802f55c:	f43f aea8 	beq.w	802f2b0 <_strtod_l+0xb0>
 802f560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f562:	4988      	ldr	r1, [pc, #544]	; (802f784 <_strtod_l+0x584>)
 802f564:	3b01      	subs	r3, #1
 802f566:	a815      	add	r0, sp, #84	; 0x54
 802f568:	9315      	str	r3, [sp, #84]	; 0x54
 802f56a:	f001 ff19 	bl	80313a0 <__match>
 802f56e:	b910      	cbnz	r0, 802f576 <_strtod_l+0x376>
 802f570:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f572:	3301      	adds	r3, #1
 802f574:	9315      	str	r3, [sp, #84]	; 0x54
 802f576:	f8df 921c 	ldr.w	r9, [pc, #540]	; 802f794 <_strtod_l+0x594>
 802f57a:	f04f 0800 	mov.w	r8, #0
 802f57e:	e67a      	b.n	802f276 <_strtod_l+0x76>
 802f580:	4881      	ldr	r0, [pc, #516]	; (802f788 <_strtod_l+0x588>)
 802f582:	f001 fc5d 	bl	8030e40 <nan>
 802f586:	ec59 8b10 	vmov	r8, r9, d0
 802f58a:	e674      	b.n	802f276 <_strtod_l+0x76>
 802f58c:	9b05      	ldr	r3, [sp, #20]
 802f58e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f590:	1afb      	subs	r3, r7, r3
 802f592:	f1bb 0f00 	cmp.w	fp, #0
 802f596:	bf08      	it	eq
 802f598:	46b3      	moveq	fp, r6
 802f59a:	2e10      	cmp	r6, #16
 802f59c:	9308      	str	r3, [sp, #32]
 802f59e:	4635      	mov	r5, r6
 802f5a0:	bfa8      	it	ge
 802f5a2:	2510      	movge	r5, #16
 802f5a4:	f7e0 ffc6 	bl	8010534 <__aeabi_ui2d>
 802f5a8:	2e09      	cmp	r6, #9
 802f5aa:	4680      	mov	r8, r0
 802f5ac:	4689      	mov	r9, r1
 802f5ae:	dd13      	ble.n	802f5d8 <_strtod_l+0x3d8>
 802f5b0:	4b76      	ldr	r3, [pc, #472]	; (802f78c <_strtod_l+0x58c>)
 802f5b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f5b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802f5ba:	f7e1 f835 	bl	8010628 <__aeabi_dmul>
 802f5be:	4680      	mov	r8, r0
 802f5c0:	4650      	mov	r0, sl
 802f5c2:	4689      	mov	r9, r1
 802f5c4:	f7e0 ffb6 	bl	8010534 <__aeabi_ui2d>
 802f5c8:	4602      	mov	r2, r0
 802f5ca:	460b      	mov	r3, r1
 802f5cc:	4640      	mov	r0, r8
 802f5ce:	4649      	mov	r1, r9
 802f5d0:	f7e0 fe74 	bl	80102bc <__adddf3>
 802f5d4:	4680      	mov	r8, r0
 802f5d6:	4689      	mov	r9, r1
 802f5d8:	2e0f      	cmp	r6, #15
 802f5da:	dc38      	bgt.n	802f64e <_strtod_l+0x44e>
 802f5dc:	9b08      	ldr	r3, [sp, #32]
 802f5de:	2b00      	cmp	r3, #0
 802f5e0:	f43f ae49 	beq.w	802f276 <_strtod_l+0x76>
 802f5e4:	dd24      	ble.n	802f630 <_strtod_l+0x430>
 802f5e6:	2b16      	cmp	r3, #22
 802f5e8:	dc0b      	bgt.n	802f602 <_strtod_l+0x402>
 802f5ea:	4968      	ldr	r1, [pc, #416]	; (802f78c <_strtod_l+0x58c>)
 802f5ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f5f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f5f4:	4642      	mov	r2, r8
 802f5f6:	464b      	mov	r3, r9
 802f5f8:	f7e1 f816 	bl	8010628 <__aeabi_dmul>
 802f5fc:	4680      	mov	r8, r0
 802f5fe:	4689      	mov	r9, r1
 802f600:	e639      	b.n	802f276 <_strtod_l+0x76>
 802f602:	9a08      	ldr	r2, [sp, #32]
 802f604:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 802f608:	4293      	cmp	r3, r2
 802f60a:	db20      	blt.n	802f64e <_strtod_l+0x44e>
 802f60c:	4c5f      	ldr	r4, [pc, #380]	; (802f78c <_strtod_l+0x58c>)
 802f60e:	f1c6 060f 	rsb	r6, r6, #15
 802f612:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 802f616:	4642      	mov	r2, r8
 802f618:	464b      	mov	r3, r9
 802f61a:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f61e:	f7e1 f803 	bl	8010628 <__aeabi_dmul>
 802f622:	9b08      	ldr	r3, [sp, #32]
 802f624:	1b9e      	subs	r6, r3, r6
 802f626:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 802f62a:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f62e:	e7e3      	b.n	802f5f8 <_strtod_l+0x3f8>
 802f630:	9b08      	ldr	r3, [sp, #32]
 802f632:	3316      	adds	r3, #22
 802f634:	db0b      	blt.n	802f64e <_strtod_l+0x44e>
 802f636:	9b05      	ldr	r3, [sp, #20]
 802f638:	1bdf      	subs	r7, r3, r7
 802f63a:	4b54      	ldr	r3, [pc, #336]	; (802f78c <_strtod_l+0x58c>)
 802f63c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802f640:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f644:	4640      	mov	r0, r8
 802f646:	4649      	mov	r1, r9
 802f648:	f7e1 f918 	bl	801087c <__aeabi_ddiv>
 802f64c:	e7d6      	b.n	802f5fc <_strtod_l+0x3fc>
 802f64e:	9b08      	ldr	r3, [sp, #32]
 802f650:	1b75      	subs	r5, r6, r5
 802f652:	441d      	add	r5, r3
 802f654:	2d00      	cmp	r5, #0
 802f656:	dd70      	ble.n	802f73a <_strtod_l+0x53a>
 802f658:	f015 030f 	ands.w	r3, r5, #15
 802f65c:	d00a      	beq.n	802f674 <_strtod_l+0x474>
 802f65e:	494b      	ldr	r1, [pc, #300]	; (802f78c <_strtod_l+0x58c>)
 802f660:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f664:	4642      	mov	r2, r8
 802f666:	464b      	mov	r3, r9
 802f668:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f66c:	f7e0 ffdc 	bl	8010628 <__aeabi_dmul>
 802f670:	4680      	mov	r8, r0
 802f672:	4689      	mov	r9, r1
 802f674:	f035 050f 	bics.w	r5, r5, #15
 802f678:	d04d      	beq.n	802f716 <_strtod_l+0x516>
 802f67a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 802f67e:	dd22      	ble.n	802f6c6 <_strtod_l+0x4c6>
 802f680:	2500      	movs	r5, #0
 802f682:	46ab      	mov	fp, r5
 802f684:	9509      	str	r5, [sp, #36]	; 0x24
 802f686:	9505      	str	r5, [sp, #20]
 802f688:	2322      	movs	r3, #34	; 0x22
 802f68a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802f794 <_strtod_l+0x594>
 802f68e:	6023      	str	r3, [r4, #0]
 802f690:	f04f 0800 	mov.w	r8, #0
 802f694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f696:	2b00      	cmp	r3, #0
 802f698:	f43f aded 	beq.w	802f276 <_strtod_l+0x76>
 802f69c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f69e:	4620      	mov	r0, r4
 802f6a0:	f7ff f924 	bl	802e8ec <_Bfree>
 802f6a4:	9905      	ldr	r1, [sp, #20]
 802f6a6:	4620      	mov	r0, r4
 802f6a8:	f7ff f920 	bl	802e8ec <_Bfree>
 802f6ac:	4659      	mov	r1, fp
 802f6ae:	4620      	mov	r0, r4
 802f6b0:	f7ff f91c 	bl	802e8ec <_Bfree>
 802f6b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f6b6:	4620      	mov	r0, r4
 802f6b8:	f7ff f918 	bl	802e8ec <_Bfree>
 802f6bc:	4629      	mov	r1, r5
 802f6be:	4620      	mov	r0, r4
 802f6c0:	f7ff f914 	bl	802e8ec <_Bfree>
 802f6c4:	e5d7      	b.n	802f276 <_strtod_l+0x76>
 802f6c6:	4b32      	ldr	r3, [pc, #200]	; (802f790 <_strtod_l+0x590>)
 802f6c8:	9304      	str	r3, [sp, #16]
 802f6ca:	2300      	movs	r3, #0
 802f6cc:	112d      	asrs	r5, r5, #4
 802f6ce:	4640      	mov	r0, r8
 802f6d0:	4649      	mov	r1, r9
 802f6d2:	469a      	mov	sl, r3
 802f6d4:	2d01      	cmp	r5, #1
 802f6d6:	dc21      	bgt.n	802f71c <_strtod_l+0x51c>
 802f6d8:	b10b      	cbz	r3, 802f6de <_strtod_l+0x4de>
 802f6da:	4680      	mov	r8, r0
 802f6dc:	4689      	mov	r9, r1
 802f6de:	492c      	ldr	r1, [pc, #176]	; (802f790 <_strtod_l+0x590>)
 802f6e0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802f6e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802f6e8:	4642      	mov	r2, r8
 802f6ea:	464b      	mov	r3, r9
 802f6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f6f0:	f7e0 ff9a 	bl	8010628 <__aeabi_dmul>
 802f6f4:	4b27      	ldr	r3, [pc, #156]	; (802f794 <_strtod_l+0x594>)
 802f6f6:	460a      	mov	r2, r1
 802f6f8:	400b      	ands	r3, r1
 802f6fa:	4927      	ldr	r1, [pc, #156]	; (802f798 <_strtod_l+0x598>)
 802f6fc:	428b      	cmp	r3, r1
 802f6fe:	4680      	mov	r8, r0
 802f700:	d8be      	bhi.n	802f680 <_strtod_l+0x480>
 802f702:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802f706:	428b      	cmp	r3, r1
 802f708:	bf86      	itte	hi
 802f70a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 802f79c <_strtod_l+0x59c>
 802f70e:	f04f 38ff 	movhi.w	r8, #4294967295
 802f712:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 802f716:	2300      	movs	r3, #0
 802f718:	9304      	str	r3, [sp, #16]
 802f71a:	e07b      	b.n	802f814 <_strtod_l+0x614>
 802f71c:	07ea      	lsls	r2, r5, #31
 802f71e:	d505      	bpl.n	802f72c <_strtod_l+0x52c>
 802f720:	9b04      	ldr	r3, [sp, #16]
 802f722:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f726:	f7e0 ff7f 	bl	8010628 <__aeabi_dmul>
 802f72a:	2301      	movs	r3, #1
 802f72c:	9a04      	ldr	r2, [sp, #16]
 802f72e:	3208      	adds	r2, #8
 802f730:	f10a 0a01 	add.w	sl, sl, #1
 802f734:	106d      	asrs	r5, r5, #1
 802f736:	9204      	str	r2, [sp, #16]
 802f738:	e7cc      	b.n	802f6d4 <_strtod_l+0x4d4>
 802f73a:	d0ec      	beq.n	802f716 <_strtod_l+0x516>
 802f73c:	426d      	negs	r5, r5
 802f73e:	f015 020f 	ands.w	r2, r5, #15
 802f742:	d00a      	beq.n	802f75a <_strtod_l+0x55a>
 802f744:	4b11      	ldr	r3, [pc, #68]	; (802f78c <_strtod_l+0x58c>)
 802f746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802f74a:	4640      	mov	r0, r8
 802f74c:	4649      	mov	r1, r9
 802f74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802f752:	f7e1 f893 	bl	801087c <__aeabi_ddiv>
 802f756:	4680      	mov	r8, r0
 802f758:	4689      	mov	r9, r1
 802f75a:	112d      	asrs	r5, r5, #4
 802f75c:	d0db      	beq.n	802f716 <_strtod_l+0x516>
 802f75e:	2d1f      	cmp	r5, #31
 802f760:	dd1e      	ble.n	802f7a0 <_strtod_l+0x5a0>
 802f762:	2500      	movs	r5, #0
 802f764:	46ab      	mov	fp, r5
 802f766:	9509      	str	r5, [sp, #36]	; 0x24
 802f768:	9505      	str	r5, [sp, #20]
 802f76a:	2322      	movs	r3, #34	; 0x22
 802f76c:	f04f 0800 	mov.w	r8, #0
 802f770:	f04f 0900 	mov.w	r9, #0
 802f774:	6023      	str	r3, [r4, #0]
 802f776:	e78d      	b.n	802f694 <_strtod_l+0x494>
 802f778:	08034899 	.word	0x08034899
 802f77c:	08034b1c 	.word	0x08034b1c
 802f780:	08034891 	.word	0x08034891
 802f784:	08034937 	.word	0x08034937
 802f788:	0803488b 	.word	0x0803488b
 802f78c:	08034a30 	.word	0x08034a30
 802f790:	08034a08 	.word	0x08034a08
 802f794:	7ff00000 	.word	0x7ff00000
 802f798:	7ca00000 	.word	0x7ca00000
 802f79c:	7fefffff 	.word	0x7fefffff
 802f7a0:	f015 0310 	ands.w	r3, r5, #16
 802f7a4:	bf18      	it	ne
 802f7a6:	236a      	movne	r3, #106	; 0x6a
 802f7a8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802fb4c <_strtod_l+0x94c>
 802f7ac:	9304      	str	r3, [sp, #16]
 802f7ae:	4640      	mov	r0, r8
 802f7b0:	4649      	mov	r1, r9
 802f7b2:	2300      	movs	r3, #0
 802f7b4:	07ea      	lsls	r2, r5, #31
 802f7b6:	d504      	bpl.n	802f7c2 <_strtod_l+0x5c2>
 802f7b8:	e9da 2300 	ldrd	r2, r3, [sl]
 802f7bc:	f7e0 ff34 	bl	8010628 <__aeabi_dmul>
 802f7c0:	2301      	movs	r3, #1
 802f7c2:	106d      	asrs	r5, r5, #1
 802f7c4:	f10a 0a08 	add.w	sl, sl, #8
 802f7c8:	d1f4      	bne.n	802f7b4 <_strtod_l+0x5b4>
 802f7ca:	b10b      	cbz	r3, 802f7d0 <_strtod_l+0x5d0>
 802f7cc:	4680      	mov	r8, r0
 802f7ce:	4689      	mov	r9, r1
 802f7d0:	9b04      	ldr	r3, [sp, #16]
 802f7d2:	b1bb      	cbz	r3, 802f804 <_strtod_l+0x604>
 802f7d4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802f7d8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802f7dc:	2b00      	cmp	r3, #0
 802f7de:	4649      	mov	r1, r9
 802f7e0:	dd10      	ble.n	802f804 <_strtod_l+0x604>
 802f7e2:	2b1f      	cmp	r3, #31
 802f7e4:	f340 811e 	ble.w	802fa24 <_strtod_l+0x824>
 802f7e8:	2b34      	cmp	r3, #52	; 0x34
 802f7ea:	bfde      	ittt	le
 802f7ec:	f04f 33ff 	movle.w	r3, #4294967295
 802f7f0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802f7f4:	4093      	lslle	r3, r2
 802f7f6:	f04f 0800 	mov.w	r8, #0
 802f7fa:	bfcc      	ite	gt
 802f7fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802f800:	ea03 0901 	andle.w	r9, r3, r1
 802f804:	2200      	movs	r2, #0
 802f806:	2300      	movs	r3, #0
 802f808:	4640      	mov	r0, r8
 802f80a:	4649      	mov	r1, r9
 802f80c:	f7e1 f974 	bl	8010af8 <__aeabi_dcmpeq>
 802f810:	2800      	cmp	r0, #0
 802f812:	d1a6      	bne.n	802f762 <_strtod_l+0x562>
 802f814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f816:	9300      	str	r3, [sp, #0]
 802f818:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802f81a:	4633      	mov	r3, r6
 802f81c:	465a      	mov	r2, fp
 802f81e:	4620      	mov	r0, r4
 802f820:	f7ff f8cc 	bl	802e9bc <__s2b>
 802f824:	9009      	str	r0, [sp, #36]	; 0x24
 802f826:	2800      	cmp	r0, #0
 802f828:	f43f af2a 	beq.w	802f680 <_strtod_l+0x480>
 802f82c:	9a08      	ldr	r2, [sp, #32]
 802f82e:	9b05      	ldr	r3, [sp, #20]
 802f830:	2a00      	cmp	r2, #0
 802f832:	eba3 0307 	sub.w	r3, r3, r7
 802f836:	bfa8      	it	ge
 802f838:	2300      	movge	r3, #0
 802f83a:	930c      	str	r3, [sp, #48]	; 0x30
 802f83c:	2500      	movs	r5, #0
 802f83e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802f842:	9312      	str	r3, [sp, #72]	; 0x48
 802f844:	46ab      	mov	fp, r5
 802f846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f848:	4620      	mov	r0, r4
 802f84a:	6859      	ldr	r1, [r3, #4]
 802f84c:	f7ff f80e 	bl	802e86c <_Balloc>
 802f850:	9005      	str	r0, [sp, #20]
 802f852:	2800      	cmp	r0, #0
 802f854:	f43f af18 	beq.w	802f688 <_strtod_l+0x488>
 802f858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802f85a:	691a      	ldr	r2, [r3, #16]
 802f85c:	3202      	adds	r2, #2
 802f85e:	f103 010c 	add.w	r1, r3, #12
 802f862:	0092      	lsls	r2, r2, #2
 802f864:	300c      	adds	r0, #12
 802f866:	f7fe f91e 	bl	802daa6 <memcpy>
 802f86a:	ec49 8b10 	vmov	d0, r8, r9
 802f86e:	aa18      	add	r2, sp, #96	; 0x60
 802f870:	a917      	add	r1, sp, #92	; 0x5c
 802f872:	4620      	mov	r0, r4
 802f874:	f7ff fbd6 	bl	802f024 <__d2b>
 802f878:	ec49 8b18 	vmov	d8, r8, r9
 802f87c:	9016      	str	r0, [sp, #88]	; 0x58
 802f87e:	2800      	cmp	r0, #0
 802f880:	f43f af02 	beq.w	802f688 <_strtod_l+0x488>
 802f884:	2101      	movs	r1, #1
 802f886:	4620      	mov	r0, r4
 802f888:	f7ff f930 	bl	802eaec <__i2b>
 802f88c:	4683      	mov	fp, r0
 802f88e:	2800      	cmp	r0, #0
 802f890:	f43f aefa 	beq.w	802f688 <_strtod_l+0x488>
 802f894:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802f896:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802f898:	2e00      	cmp	r6, #0
 802f89a:	bfab      	itete	ge
 802f89c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 802f89e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 802f8a0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802f8a2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 802f8a6:	bfac      	ite	ge
 802f8a8:	eb06 0a03 	addge.w	sl, r6, r3
 802f8ac:	1b9f      	sublt	r7, r3, r6
 802f8ae:	9b04      	ldr	r3, [sp, #16]
 802f8b0:	1af6      	subs	r6, r6, r3
 802f8b2:	4416      	add	r6, r2
 802f8b4:	4ba0      	ldr	r3, [pc, #640]	; (802fb38 <_strtod_l+0x938>)
 802f8b6:	3e01      	subs	r6, #1
 802f8b8:	429e      	cmp	r6, r3
 802f8ba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802f8be:	f280 80c4 	bge.w	802fa4a <_strtod_l+0x84a>
 802f8c2:	1b9b      	subs	r3, r3, r6
 802f8c4:	2b1f      	cmp	r3, #31
 802f8c6:	eba2 0203 	sub.w	r2, r2, r3
 802f8ca:	f04f 0101 	mov.w	r1, #1
 802f8ce:	f300 80b0 	bgt.w	802fa32 <_strtod_l+0x832>
 802f8d2:	fa01 f303 	lsl.w	r3, r1, r3
 802f8d6:	930e      	str	r3, [sp, #56]	; 0x38
 802f8d8:	2300      	movs	r3, #0
 802f8da:	930d      	str	r3, [sp, #52]	; 0x34
 802f8dc:	eb0a 0602 	add.w	r6, sl, r2
 802f8e0:	9b04      	ldr	r3, [sp, #16]
 802f8e2:	45b2      	cmp	sl, r6
 802f8e4:	4417      	add	r7, r2
 802f8e6:	441f      	add	r7, r3
 802f8e8:	4653      	mov	r3, sl
 802f8ea:	bfa8      	it	ge
 802f8ec:	4633      	movge	r3, r6
 802f8ee:	42bb      	cmp	r3, r7
 802f8f0:	bfa8      	it	ge
 802f8f2:	463b      	movge	r3, r7
 802f8f4:	2b00      	cmp	r3, #0
 802f8f6:	bfc2      	ittt	gt
 802f8f8:	1af6      	subgt	r6, r6, r3
 802f8fa:	1aff      	subgt	r7, r7, r3
 802f8fc:	ebaa 0a03 	subgt.w	sl, sl, r3
 802f900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802f902:	2b00      	cmp	r3, #0
 802f904:	dd17      	ble.n	802f936 <_strtod_l+0x736>
 802f906:	4659      	mov	r1, fp
 802f908:	461a      	mov	r2, r3
 802f90a:	4620      	mov	r0, r4
 802f90c:	f7ff f9ae 	bl	802ec6c <__pow5mult>
 802f910:	4683      	mov	fp, r0
 802f912:	2800      	cmp	r0, #0
 802f914:	f43f aeb8 	beq.w	802f688 <_strtod_l+0x488>
 802f918:	4601      	mov	r1, r0
 802f91a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f91c:	4620      	mov	r0, r4
 802f91e:	f7ff f8fb 	bl	802eb18 <__multiply>
 802f922:	900b      	str	r0, [sp, #44]	; 0x2c
 802f924:	2800      	cmp	r0, #0
 802f926:	f43f aeaf 	beq.w	802f688 <_strtod_l+0x488>
 802f92a:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f92c:	4620      	mov	r0, r4
 802f92e:	f7fe ffdd 	bl	802e8ec <_Bfree>
 802f932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f934:	9316      	str	r3, [sp, #88]	; 0x58
 802f936:	2e00      	cmp	r6, #0
 802f938:	f300 808c 	bgt.w	802fa54 <_strtod_l+0x854>
 802f93c:	9b08      	ldr	r3, [sp, #32]
 802f93e:	2b00      	cmp	r3, #0
 802f940:	dd08      	ble.n	802f954 <_strtod_l+0x754>
 802f942:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802f944:	9905      	ldr	r1, [sp, #20]
 802f946:	4620      	mov	r0, r4
 802f948:	f7ff f990 	bl	802ec6c <__pow5mult>
 802f94c:	9005      	str	r0, [sp, #20]
 802f94e:	2800      	cmp	r0, #0
 802f950:	f43f ae9a 	beq.w	802f688 <_strtod_l+0x488>
 802f954:	2f00      	cmp	r7, #0
 802f956:	dd08      	ble.n	802f96a <_strtod_l+0x76a>
 802f958:	9905      	ldr	r1, [sp, #20]
 802f95a:	463a      	mov	r2, r7
 802f95c:	4620      	mov	r0, r4
 802f95e:	f7ff f9df 	bl	802ed20 <__lshift>
 802f962:	9005      	str	r0, [sp, #20]
 802f964:	2800      	cmp	r0, #0
 802f966:	f43f ae8f 	beq.w	802f688 <_strtod_l+0x488>
 802f96a:	f1ba 0f00 	cmp.w	sl, #0
 802f96e:	dd08      	ble.n	802f982 <_strtod_l+0x782>
 802f970:	4659      	mov	r1, fp
 802f972:	4652      	mov	r2, sl
 802f974:	4620      	mov	r0, r4
 802f976:	f7ff f9d3 	bl	802ed20 <__lshift>
 802f97a:	4683      	mov	fp, r0
 802f97c:	2800      	cmp	r0, #0
 802f97e:	f43f ae83 	beq.w	802f688 <_strtod_l+0x488>
 802f982:	9a05      	ldr	r2, [sp, #20]
 802f984:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f986:	4620      	mov	r0, r4
 802f988:	f7ff fa52 	bl	802ee30 <__mdiff>
 802f98c:	4605      	mov	r5, r0
 802f98e:	2800      	cmp	r0, #0
 802f990:	f43f ae7a 	beq.w	802f688 <_strtod_l+0x488>
 802f994:	68c3      	ldr	r3, [r0, #12]
 802f996:	930b      	str	r3, [sp, #44]	; 0x2c
 802f998:	2300      	movs	r3, #0
 802f99a:	60c3      	str	r3, [r0, #12]
 802f99c:	4659      	mov	r1, fp
 802f99e:	f7ff fa2b 	bl	802edf8 <__mcmp>
 802f9a2:	2800      	cmp	r0, #0
 802f9a4:	da60      	bge.n	802fa68 <_strtod_l+0x868>
 802f9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802f9a8:	ea53 0308 	orrs.w	r3, r3, r8
 802f9ac:	f040 8084 	bne.w	802fab8 <_strtod_l+0x8b8>
 802f9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f9b4:	2b00      	cmp	r3, #0
 802f9b6:	d17f      	bne.n	802fab8 <_strtod_l+0x8b8>
 802f9b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f9bc:	0d1b      	lsrs	r3, r3, #20
 802f9be:	051b      	lsls	r3, r3, #20
 802f9c0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802f9c4:	d978      	bls.n	802fab8 <_strtod_l+0x8b8>
 802f9c6:	696b      	ldr	r3, [r5, #20]
 802f9c8:	b913      	cbnz	r3, 802f9d0 <_strtod_l+0x7d0>
 802f9ca:	692b      	ldr	r3, [r5, #16]
 802f9cc:	2b01      	cmp	r3, #1
 802f9ce:	dd73      	ble.n	802fab8 <_strtod_l+0x8b8>
 802f9d0:	4629      	mov	r1, r5
 802f9d2:	2201      	movs	r2, #1
 802f9d4:	4620      	mov	r0, r4
 802f9d6:	f7ff f9a3 	bl	802ed20 <__lshift>
 802f9da:	4659      	mov	r1, fp
 802f9dc:	4605      	mov	r5, r0
 802f9de:	f7ff fa0b 	bl	802edf8 <__mcmp>
 802f9e2:	2800      	cmp	r0, #0
 802f9e4:	dd68      	ble.n	802fab8 <_strtod_l+0x8b8>
 802f9e6:	9904      	ldr	r1, [sp, #16]
 802f9e8:	4a54      	ldr	r2, [pc, #336]	; (802fb3c <_strtod_l+0x93c>)
 802f9ea:	464b      	mov	r3, r9
 802f9ec:	2900      	cmp	r1, #0
 802f9ee:	f000 8084 	beq.w	802fafa <_strtod_l+0x8fa>
 802f9f2:	ea02 0109 	and.w	r1, r2, r9
 802f9f6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802f9fa:	dc7e      	bgt.n	802fafa <_strtod_l+0x8fa>
 802f9fc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802fa00:	f77f aeb3 	ble.w	802f76a <_strtod_l+0x56a>
 802fa04:	4b4e      	ldr	r3, [pc, #312]	; (802fb40 <_strtod_l+0x940>)
 802fa06:	4640      	mov	r0, r8
 802fa08:	4649      	mov	r1, r9
 802fa0a:	2200      	movs	r2, #0
 802fa0c:	f7e0 fe0c 	bl	8010628 <__aeabi_dmul>
 802fa10:	4b4a      	ldr	r3, [pc, #296]	; (802fb3c <_strtod_l+0x93c>)
 802fa12:	400b      	ands	r3, r1
 802fa14:	4680      	mov	r8, r0
 802fa16:	4689      	mov	r9, r1
 802fa18:	2b00      	cmp	r3, #0
 802fa1a:	f47f ae3f 	bne.w	802f69c <_strtod_l+0x49c>
 802fa1e:	2322      	movs	r3, #34	; 0x22
 802fa20:	6023      	str	r3, [r4, #0]
 802fa22:	e63b      	b.n	802f69c <_strtod_l+0x49c>
 802fa24:	f04f 32ff 	mov.w	r2, #4294967295
 802fa28:	fa02 f303 	lsl.w	r3, r2, r3
 802fa2c:	ea03 0808 	and.w	r8, r3, r8
 802fa30:	e6e8      	b.n	802f804 <_strtod_l+0x604>
 802fa32:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802fa36:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802fa3a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802fa3e:	36e2      	adds	r6, #226	; 0xe2
 802fa40:	fa01 f306 	lsl.w	r3, r1, r6
 802fa44:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802fa48:	e748      	b.n	802f8dc <_strtod_l+0x6dc>
 802fa4a:	2100      	movs	r1, #0
 802fa4c:	2301      	movs	r3, #1
 802fa4e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 802fa52:	e743      	b.n	802f8dc <_strtod_l+0x6dc>
 802fa54:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fa56:	4632      	mov	r2, r6
 802fa58:	4620      	mov	r0, r4
 802fa5a:	f7ff f961 	bl	802ed20 <__lshift>
 802fa5e:	9016      	str	r0, [sp, #88]	; 0x58
 802fa60:	2800      	cmp	r0, #0
 802fa62:	f47f af6b 	bne.w	802f93c <_strtod_l+0x73c>
 802fa66:	e60f      	b.n	802f688 <_strtod_l+0x488>
 802fa68:	46ca      	mov	sl, r9
 802fa6a:	d171      	bne.n	802fb50 <_strtod_l+0x950>
 802fa6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fa6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fa72:	b352      	cbz	r2, 802faca <_strtod_l+0x8ca>
 802fa74:	4a33      	ldr	r2, [pc, #204]	; (802fb44 <_strtod_l+0x944>)
 802fa76:	4293      	cmp	r3, r2
 802fa78:	d12a      	bne.n	802fad0 <_strtod_l+0x8d0>
 802fa7a:	9b04      	ldr	r3, [sp, #16]
 802fa7c:	4641      	mov	r1, r8
 802fa7e:	b1fb      	cbz	r3, 802fac0 <_strtod_l+0x8c0>
 802fa80:	4b2e      	ldr	r3, [pc, #184]	; (802fb3c <_strtod_l+0x93c>)
 802fa82:	ea09 0303 	and.w	r3, r9, r3
 802fa86:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fa8a:	f04f 32ff 	mov.w	r2, #4294967295
 802fa8e:	d81a      	bhi.n	802fac6 <_strtod_l+0x8c6>
 802fa90:	0d1b      	lsrs	r3, r3, #20
 802fa92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802fa96:	fa02 f303 	lsl.w	r3, r2, r3
 802fa9a:	4299      	cmp	r1, r3
 802fa9c:	d118      	bne.n	802fad0 <_strtod_l+0x8d0>
 802fa9e:	4b2a      	ldr	r3, [pc, #168]	; (802fb48 <_strtod_l+0x948>)
 802faa0:	459a      	cmp	sl, r3
 802faa2:	d102      	bne.n	802faaa <_strtod_l+0x8aa>
 802faa4:	3101      	adds	r1, #1
 802faa6:	f43f adef 	beq.w	802f688 <_strtod_l+0x488>
 802faaa:	4b24      	ldr	r3, [pc, #144]	; (802fb3c <_strtod_l+0x93c>)
 802faac:	ea0a 0303 	and.w	r3, sl, r3
 802fab0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802fab4:	f04f 0800 	mov.w	r8, #0
 802fab8:	9b04      	ldr	r3, [sp, #16]
 802faba:	2b00      	cmp	r3, #0
 802fabc:	d1a2      	bne.n	802fa04 <_strtod_l+0x804>
 802fabe:	e5ed      	b.n	802f69c <_strtod_l+0x49c>
 802fac0:	f04f 33ff 	mov.w	r3, #4294967295
 802fac4:	e7e9      	b.n	802fa9a <_strtod_l+0x89a>
 802fac6:	4613      	mov	r3, r2
 802fac8:	e7e7      	b.n	802fa9a <_strtod_l+0x89a>
 802faca:	ea53 0308 	orrs.w	r3, r3, r8
 802face:	d08a      	beq.n	802f9e6 <_strtod_l+0x7e6>
 802fad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fad2:	b1e3      	cbz	r3, 802fb0e <_strtod_l+0x90e>
 802fad4:	ea13 0f0a 	tst.w	r3, sl
 802fad8:	d0ee      	beq.n	802fab8 <_strtod_l+0x8b8>
 802fada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fadc:	9a04      	ldr	r2, [sp, #16]
 802fade:	4640      	mov	r0, r8
 802fae0:	4649      	mov	r1, r9
 802fae2:	b1c3      	cbz	r3, 802fb16 <_strtod_l+0x916>
 802fae4:	f7ff fb6f 	bl	802f1c6 <sulp>
 802fae8:	4602      	mov	r2, r0
 802faea:	460b      	mov	r3, r1
 802faec:	ec51 0b18 	vmov	r0, r1, d8
 802faf0:	f7e0 fbe4 	bl	80102bc <__adddf3>
 802faf4:	4680      	mov	r8, r0
 802faf6:	4689      	mov	r9, r1
 802faf8:	e7de      	b.n	802fab8 <_strtod_l+0x8b8>
 802fafa:	4013      	ands	r3, r2
 802fafc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802fb00:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802fb04:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802fb08:	f04f 38ff 	mov.w	r8, #4294967295
 802fb0c:	e7d4      	b.n	802fab8 <_strtod_l+0x8b8>
 802fb0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802fb10:	ea13 0f08 	tst.w	r3, r8
 802fb14:	e7e0      	b.n	802fad8 <_strtod_l+0x8d8>
 802fb16:	f7ff fb56 	bl	802f1c6 <sulp>
 802fb1a:	4602      	mov	r2, r0
 802fb1c:	460b      	mov	r3, r1
 802fb1e:	ec51 0b18 	vmov	r0, r1, d8
 802fb22:	f7e0 fbc9 	bl	80102b8 <__aeabi_dsub>
 802fb26:	2200      	movs	r2, #0
 802fb28:	2300      	movs	r3, #0
 802fb2a:	4680      	mov	r8, r0
 802fb2c:	4689      	mov	r9, r1
 802fb2e:	f7e0 ffe3 	bl	8010af8 <__aeabi_dcmpeq>
 802fb32:	2800      	cmp	r0, #0
 802fb34:	d0c0      	beq.n	802fab8 <_strtod_l+0x8b8>
 802fb36:	e618      	b.n	802f76a <_strtod_l+0x56a>
 802fb38:	fffffc02 	.word	0xfffffc02
 802fb3c:	7ff00000 	.word	0x7ff00000
 802fb40:	39500000 	.word	0x39500000
 802fb44:	000fffff 	.word	0x000fffff
 802fb48:	7fefffff 	.word	0x7fefffff
 802fb4c:	08034b30 	.word	0x08034b30
 802fb50:	4659      	mov	r1, fp
 802fb52:	4628      	mov	r0, r5
 802fb54:	f7ff fac0 	bl	802f0d8 <__ratio>
 802fb58:	ec57 6b10 	vmov	r6, r7, d0
 802fb5c:	ee10 0a10 	vmov	r0, s0
 802fb60:	2200      	movs	r2, #0
 802fb62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802fb66:	4639      	mov	r1, r7
 802fb68:	f7e0 ffda 	bl	8010b20 <__aeabi_dcmple>
 802fb6c:	2800      	cmp	r0, #0
 802fb6e:	d071      	beq.n	802fc54 <_strtod_l+0xa54>
 802fb70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fb72:	2b00      	cmp	r3, #0
 802fb74:	d17c      	bne.n	802fc70 <_strtod_l+0xa70>
 802fb76:	f1b8 0f00 	cmp.w	r8, #0
 802fb7a:	d15a      	bne.n	802fc32 <_strtod_l+0xa32>
 802fb7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fb80:	2b00      	cmp	r3, #0
 802fb82:	d15d      	bne.n	802fc40 <_strtod_l+0xa40>
 802fb84:	4b90      	ldr	r3, [pc, #576]	; (802fdc8 <_strtod_l+0xbc8>)
 802fb86:	2200      	movs	r2, #0
 802fb88:	4630      	mov	r0, r6
 802fb8a:	4639      	mov	r1, r7
 802fb8c:	f7e0 ffbe 	bl	8010b0c <__aeabi_dcmplt>
 802fb90:	2800      	cmp	r0, #0
 802fb92:	d15c      	bne.n	802fc4e <_strtod_l+0xa4e>
 802fb94:	4630      	mov	r0, r6
 802fb96:	4639      	mov	r1, r7
 802fb98:	4b8c      	ldr	r3, [pc, #560]	; (802fdcc <_strtod_l+0xbcc>)
 802fb9a:	2200      	movs	r2, #0
 802fb9c:	f7e0 fd44 	bl	8010628 <__aeabi_dmul>
 802fba0:	4606      	mov	r6, r0
 802fba2:	460f      	mov	r7, r1
 802fba4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802fba8:	9606      	str	r6, [sp, #24]
 802fbaa:	9307      	str	r3, [sp, #28]
 802fbac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fbb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802fbb4:	4b86      	ldr	r3, [pc, #536]	; (802fdd0 <_strtod_l+0xbd0>)
 802fbb6:	ea0a 0303 	and.w	r3, sl, r3
 802fbba:	930d      	str	r3, [sp, #52]	; 0x34
 802fbbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fbbe:	4b85      	ldr	r3, [pc, #532]	; (802fdd4 <_strtod_l+0xbd4>)
 802fbc0:	429a      	cmp	r2, r3
 802fbc2:	f040 8090 	bne.w	802fce6 <_strtod_l+0xae6>
 802fbc6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 802fbca:	ec49 8b10 	vmov	d0, r8, r9
 802fbce:	f7ff f9b9 	bl	802ef44 <__ulp>
 802fbd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802fbd6:	ec51 0b10 	vmov	r0, r1, d0
 802fbda:	f7e0 fd25 	bl	8010628 <__aeabi_dmul>
 802fbde:	4642      	mov	r2, r8
 802fbe0:	464b      	mov	r3, r9
 802fbe2:	f7e0 fb6b 	bl	80102bc <__adddf3>
 802fbe6:	460b      	mov	r3, r1
 802fbe8:	4979      	ldr	r1, [pc, #484]	; (802fdd0 <_strtod_l+0xbd0>)
 802fbea:	4a7b      	ldr	r2, [pc, #492]	; (802fdd8 <_strtod_l+0xbd8>)
 802fbec:	4019      	ands	r1, r3
 802fbee:	4291      	cmp	r1, r2
 802fbf0:	4680      	mov	r8, r0
 802fbf2:	d944      	bls.n	802fc7e <_strtod_l+0xa7e>
 802fbf4:	ee18 2a90 	vmov	r2, s17
 802fbf8:	4b78      	ldr	r3, [pc, #480]	; (802fddc <_strtod_l+0xbdc>)
 802fbfa:	429a      	cmp	r2, r3
 802fbfc:	d104      	bne.n	802fc08 <_strtod_l+0xa08>
 802fbfe:	ee18 3a10 	vmov	r3, s16
 802fc02:	3301      	adds	r3, #1
 802fc04:	f43f ad40 	beq.w	802f688 <_strtod_l+0x488>
 802fc08:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 802fddc <_strtod_l+0xbdc>
 802fc0c:	f04f 38ff 	mov.w	r8, #4294967295
 802fc10:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fc12:	4620      	mov	r0, r4
 802fc14:	f7fe fe6a 	bl	802e8ec <_Bfree>
 802fc18:	9905      	ldr	r1, [sp, #20]
 802fc1a:	4620      	mov	r0, r4
 802fc1c:	f7fe fe66 	bl	802e8ec <_Bfree>
 802fc20:	4659      	mov	r1, fp
 802fc22:	4620      	mov	r0, r4
 802fc24:	f7fe fe62 	bl	802e8ec <_Bfree>
 802fc28:	4629      	mov	r1, r5
 802fc2a:	4620      	mov	r0, r4
 802fc2c:	f7fe fe5e 	bl	802e8ec <_Bfree>
 802fc30:	e609      	b.n	802f846 <_strtod_l+0x646>
 802fc32:	f1b8 0f01 	cmp.w	r8, #1
 802fc36:	d103      	bne.n	802fc40 <_strtod_l+0xa40>
 802fc38:	f1b9 0f00 	cmp.w	r9, #0
 802fc3c:	f43f ad95 	beq.w	802f76a <_strtod_l+0x56a>
 802fc40:	ed9f 7b55 	vldr	d7, [pc, #340]	; 802fd98 <_strtod_l+0xb98>
 802fc44:	4f60      	ldr	r7, [pc, #384]	; (802fdc8 <_strtod_l+0xbc8>)
 802fc46:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fc4a:	2600      	movs	r6, #0
 802fc4c:	e7ae      	b.n	802fbac <_strtod_l+0x9ac>
 802fc4e:	4f5f      	ldr	r7, [pc, #380]	; (802fdcc <_strtod_l+0xbcc>)
 802fc50:	2600      	movs	r6, #0
 802fc52:	e7a7      	b.n	802fba4 <_strtod_l+0x9a4>
 802fc54:	4b5d      	ldr	r3, [pc, #372]	; (802fdcc <_strtod_l+0xbcc>)
 802fc56:	4630      	mov	r0, r6
 802fc58:	4639      	mov	r1, r7
 802fc5a:	2200      	movs	r2, #0
 802fc5c:	f7e0 fce4 	bl	8010628 <__aeabi_dmul>
 802fc60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fc62:	4606      	mov	r6, r0
 802fc64:	460f      	mov	r7, r1
 802fc66:	2b00      	cmp	r3, #0
 802fc68:	d09c      	beq.n	802fba4 <_strtod_l+0x9a4>
 802fc6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802fc6e:	e79d      	b.n	802fbac <_strtod_l+0x9ac>
 802fc70:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 802fda0 <_strtod_l+0xba0>
 802fc74:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fc78:	ec57 6b17 	vmov	r6, r7, d7
 802fc7c:	e796      	b.n	802fbac <_strtod_l+0x9ac>
 802fc7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 802fc82:	9b04      	ldr	r3, [sp, #16]
 802fc84:	46ca      	mov	sl, r9
 802fc86:	2b00      	cmp	r3, #0
 802fc88:	d1c2      	bne.n	802fc10 <_strtod_l+0xa10>
 802fc8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802fc8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fc90:	0d1b      	lsrs	r3, r3, #20
 802fc92:	051b      	lsls	r3, r3, #20
 802fc94:	429a      	cmp	r2, r3
 802fc96:	d1bb      	bne.n	802fc10 <_strtod_l+0xa10>
 802fc98:	4630      	mov	r0, r6
 802fc9a:	4639      	mov	r1, r7
 802fc9c:	f7e1 f838 	bl	8010d10 <__aeabi_d2lz>
 802fca0:	f7e0 fc94 	bl	80105cc <__aeabi_l2d>
 802fca4:	4602      	mov	r2, r0
 802fca6:	460b      	mov	r3, r1
 802fca8:	4630      	mov	r0, r6
 802fcaa:	4639      	mov	r1, r7
 802fcac:	f7e0 fb04 	bl	80102b8 <__aeabi_dsub>
 802fcb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fcb2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fcb6:	ea43 0308 	orr.w	r3, r3, r8
 802fcba:	4313      	orrs	r3, r2
 802fcbc:	4606      	mov	r6, r0
 802fcbe:	460f      	mov	r7, r1
 802fcc0:	d054      	beq.n	802fd6c <_strtod_l+0xb6c>
 802fcc2:	a339      	add	r3, pc, #228	; (adr r3, 802fda8 <_strtod_l+0xba8>)
 802fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fcc8:	f7e0 ff20 	bl	8010b0c <__aeabi_dcmplt>
 802fccc:	2800      	cmp	r0, #0
 802fcce:	f47f ace5 	bne.w	802f69c <_strtod_l+0x49c>
 802fcd2:	a337      	add	r3, pc, #220	; (adr r3, 802fdb0 <_strtod_l+0xbb0>)
 802fcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fcd8:	4630      	mov	r0, r6
 802fcda:	4639      	mov	r1, r7
 802fcdc:	f7e0 ff34 	bl	8010b48 <__aeabi_dcmpgt>
 802fce0:	2800      	cmp	r0, #0
 802fce2:	d095      	beq.n	802fc10 <_strtod_l+0xa10>
 802fce4:	e4da      	b.n	802f69c <_strtod_l+0x49c>
 802fce6:	9b04      	ldr	r3, [sp, #16]
 802fce8:	b333      	cbz	r3, 802fd38 <_strtod_l+0xb38>
 802fcea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fcec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fcf0:	d822      	bhi.n	802fd38 <_strtod_l+0xb38>
 802fcf2:	a331      	add	r3, pc, #196	; (adr r3, 802fdb8 <_strtod_l+0xbb8>)
 802fcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fcf8:	4630      	mov	r0, r6
 802fcfa:	4639      	mov	r1, r7
 802fcfc:	f7e0 ff10 	bl	8010b20 <__aeabi_dcmple>
 802fd00:	b1a0      	cbz	r0, 802fd2c <_strtod_l+0xb2c>
 802fd02:	4639      	mov	r1, r7
 802fd04:	4630      	mov	r0, r6
 802fd06:	f7e0 ff67 	bl	8010bd8 <__aeabi_d2uiz>
 802fd0a:	2801      	cmp	r0, #1
 802fd0c:	bf38      	it	cc
 802fd0e:	2001      	movcc	r0, #1
 802fd10:	f7e0 fc10 	bl	8010534 <__aeabi_ui2d>
 802fd14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fd16:	4606      	mov	r6, r0
 802fd18:	460f      	mov	r7, r1
 802fd1a:	bb23      	cbnz	r3, 802fd66 <_strtod_l+0xb66>
 802fd1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802fd20:	9010      	str	r0, [sp, #64]	; 0x40
 802fd22:	9311      	str	r3, [sp, #68]	; 0x44
 802fd24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802fd28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802fd2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802fd2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802fd30:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 802fd34:	1a9b      	subs	r3, r3, r2
 802fd36:	930f      	str	r3, [sp, #60]	; 0x3c
 802fd38:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802fd3c:	eeb0 0a48 	vmov.f32	s0, s16
 802fd40:	eef0 0a68 	vmov.f32	s1, s17
 802fd44:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802fd48:	f7ff f8fc 	bl	802ef44 <__ulp>
 802fd4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802fd50:	ec53 2b10 	vmov	r2, r3, d0
 802fd54:	f7e0 fc68 	bl	8010628 <__aeabi_dmul>
 802fd58:	ec53 2b18 	vmov	r2, r3, d8
 802fd5c:	f7e0 faae 	bl	80102bc <__adddf3>
 802fd60:	4680      	mov	r8, r0
 802fd62:	4689      	mov	r9, r1
 802fd64:	e78d      	b.n	802fc82 <_strtod_l+0xa82>
 802fd66:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 802fd6a:	e7db      	b.n	802fd24 <_strtod_l+0xb24>
 802fd6c:	a314      	add	r3, pc, #80	; (adr r3, 802fdc0 <_strtod_l+0xbc0>)
 802fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fd72:	f7e0 fecb 	bl	8010b0c <__aeabi_dcmplt>
 802fd76:	e7b3      	b.n	802fce0 <_strtod_l+0xae0>
 802fd78:	2300      	movs	r3, #0
 802fd7a:	930a      	str	r3, [sp, #40]	; 0x28
 802fd7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802fd7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802fd80:	6013      	str	r3, [r2, #0]
 802fd82:	f7ff ba7c 	b.w	802f27e <_strtod_l+0x7e>
 802fd86:	2a65      	cmp	r2, #101	; 0x65
 802fd88:	f43f ab75 	beq.w	802f476 <_strtod_l+0x276>
 802fd8c:	2a45      	cmp	r2, #69	; 0x45
 802fd8e:	f43f ab72 	beq.w	802f476 <_strtod_l+0x276>
 802fd92:	2301      	movs	r3, #1
 802fd94:	f7ff bbaa 	b.w	802f4ec <_strtod_l+0x2ec>
 802fd98:	00000000 	.word	0x00000000
 802fd9c:	bff00000 	.word	0xbff00000
 802fda0:	00000000 	.word	0x00000000
 802fda4:	3ff00000 	.word	0x3ff00000
 802fda8:	94a03595 	.word	0x94a03595
 802fdac:	3fdfffff 	.word	0x3fdfffff
 802fdb0:	35afe535 	.word	0x35afe535
 802fdb4:	3fe00000 	.word	0x3fe00000
 802fdb8:	ffc00000 	.word	0xffc00000
 802fdbc:	41dfffff 	.word	0x41dfffff
 802fdc0:	94a03595 	.word	0x94a03595
 802fdc4:	3fcfffff 	.word	0x3fcfffff
 802fdc8:	3ff00000 	.word	0x3ff00000
 802fdcc:	3fe00000 	.word	0x3fe00000
 802fdd0:	7ff00000 	.word	0x7ff00000
 802fdd4:	7fe00000 	.word	0x7fe00000
 802fdd8:	7c9fffff 	.word	0x7c9fffff
 802fddc:	7fefffff 	.word	0x7fefffff

0802fde0 <_strtod_r>:
 802fde0:	4b01      	ldr	r3, [pc, #4]	; (802fde8 <_strtod_r+0x8>)
 802fde2:	f7ff ba0d 	b.w	802f200 <_strtod_l>
 802fde6:	bf00      	nop
 802fde8:	2000018c 	.word	0x2000018c

0802fdec <_strtol_l.constprop.0>:
 802fdec:	2b01      	cmp	r3, #1
 802fdee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fdf2:	d001      	beq.n	802fdf8 <_strtol_l.constprop.0+0xc>
 802fdf4:	2b24      	cmp	r3, #36	; 0x24
 802fdf6:	d906      	bls.n	802fe06 <_strtol_l.constprop.0+0x1a>
 802fdf8:	f7fd fe20 	bl	802da3c <__errno>
 802fdfc:	2316      	movs	r3, #22
 802fdfe:	6003      	str	r3, [r0, #0]
 802fe00:	2000      	movs	r0, #0
 802fe02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802fe06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802feec <_strtol_l.constprop.0+0x100>
 802fe0a:	460d      	mov	r5, r1
 802fe0c:	462e      	mov	r6, r5
 802fe0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802fe12:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802fe16:	f017 0708 	ands.w	r7, r7, #8
 802fe1a:	d1f7      	bne.n	802fe0c <_strtol_l.constprop.0+0x20>
 802fe1c:	2c2d      	cmp	r4, #45	; 0x2d
 802fe1e:	d132      	bne.n	802fe86 <_strtol_l.constprop.0+0x9a>
 802fe20:	782c      	ldrb	r4, [r5, #0]
 802fe22:	2701      	movs	r7, #1
 802fe24:	1cb5      	adds	r5, r6, #2
 802fe26:	2b00      	cmp	r3, #0
 802fe28:	d05b      	beq.n	802fee2 <_strtol_l.constprop.0+0xf6>
 802fe2a:	2b10      	cmp	r3, #16
 802fe2c:	d109      	bne.n	802fe42 <_strtol_l.constprop.0+0x56>
 802fe2e:	2c30      	cmp	r4, #48	; 0x30
 802fe30:	d107      	bne.n	802fe42 <_strtol_l.constprop.0+0x56>
 802fe32:	782c      	ldrb	r4, [r5, #0]
 802fe34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802fe38:	2c58      	cmp	r4, #88	; 0x58
 802fe3a:	d14d      	bne.n	802fed8 <_strtol_l.constprop.0+0xec>
 802fe3c:	786c      	ldrb	r4, [r5, #1]
 802fe3e:	2310      	movs	r3, #16
 802fe40:	3502      	adds	r5, #2
 802fe42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802fe46:	f108 38ff 	add.w	r8, r8, #4294967295
 802fe4a:	f04f 0e00 	mov.w	lr, #0
 802fe4e:	fbb8 f9f3 	udiv	r9, r8, r3
 802fe52:	4676      	mov	r6, lr
 802fe54:	fb03 8a19 	mls	sl, r3, r9, r8
 802fe58:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802fe5c:	f1bc 0f09 	cmp.w	ip, #9
 802fe60:	d816      	bhi.n	802fe90 <_strtol_l.constprop.0+0xa4>
 802fe62:	4664      	mov	r4, ip
 802fe64:	42a3      	cmp	r3, r4
 802fe66:	dd24      	ble.n	802feb2 <_strtol_l.constprop.0+0xc6>
 802fe68:	f1be 3fff 	cmp.w	lr, #4294967295
 802fe6c:	d008      	beq.n	802fe80 <_strtol_l.constprop.0+0x94>
 802fe6e:	45b1      	cmp	r9, r6
 802fe70:	d31c      	bcc.n	802feac <_strtol_l.constprop.0+0xc0>
 802fe72:	d101      	bne.n	802fe78 <_strtol_l.constprop.0+0x8c>
 802fe74:	45a2      	cmp	sl, r4
 802fe76:	db19      	blt.n	802feac <_strtol_l.constprop.0+0xc0>
 802fe78:	fb06 4603 	mla	r6, r6, r3, r4
 802fe7c:	f04f 0e01 	mov.w	lr, #1
 802fe80:	f815 4b01 	ldrb.w	r4, [r5], #1
 802fe84:	e7e8      	b.n	802fe58 <_strtol_l.constprop.0+0x6c>
 802fe86:	2c2b      	cmp	r4, #43	; 0x2b
 802fe88:	bf04      	itt	eq
 802fe8a:	782c      	ldrbeq	r4, [r5, #0]
 802fe8c:	1cb5      	addeq	r5, r6, #2
 802fe8e:	e7ca      	b.n	802fe26 <_strtol_l.constprop.0+0x3a>
 802fe90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802fe94:	f1bc 0f19 	cmp.w	ip, #25
 802fe98:	d801      	bhi.n	802fe9e <_strtol_l.constprop.0+0xb2>
 802fe9a:	3c37      	subs	r4, #55	; 0x37
 802fe9c:	e7e2      	b.n	802fe64 <_strtol_l.constprop.0+0x78>
 802fe9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802fea2:	f1bc 0f19 	cmp.w	ip, #25
 802fea6:	d804      	bhi.n	802feb2 <_strtol_l.constprop.0+0xc6>
 802fea8:	3c57      	subs	r4, #87	; 0x57
 802feaa:	e7db      	b.n	802fe64 <_strtol_l.constprop.0+0x78>
 802feac:	f04f 3eff 	mov.w	lr, #4294967295
 802feb0:	e7e6      	b.n	802fe80 <_strtol_l.constprop.0+0x94>
 802feb2:	f1be 3fff 	cmp.w	lr, #4294967295
 802feb6:	d105      	bne.n	802fec4 <_strtol_l.constprop.0+0xd8>
 802feb8:	2322      	movs	r3, #34	; 0x22
 802feba:	6003      	str	r3, [r0, #0]
 802febc:	4646      	mov	r6, r8
 802febe:	b942      	cbnz	r2, 802fed2 <_strtol_l.constprop.0+0xe6>
 802fec0:	4630      	mov	r0, r6
 802fec2:	e79e      	b.n	802fe02 <_strtol_l.constprop.0+0x16>
 802fec4:	b107      	cbz	r7, 802fec8 <_strtol_l.constprop.0+0xdc>
 802fec6:	4276      	negs	r6, r6
 802fec8:	2a00      	cmp	r2, #0
 802feca:	d0f9      	beq.n	802fec0 <_strtol_l.constprop.0+0xd4>
 802fecc:	f1be 0f00 	cmp.w	lr, #0
 802fed0:	d000      	beq.n	802fed4 <_strtol_l.constprop.0+0xe8>
 802fed2:	1e69      	subs	r1, r5, #1
 802fed4:	6011      	str	r1, [r2, #0]
 802fed6:	e7f3      	b.n	802fec0 <_strtol_l.constprop.0+0xd4>
 802fed8:	2430      	movs	r4, #48	; 0x30
 802feda:	2b00      	cmp	r3, #0
 802fedc:	d1b1      	bne.n	802fe42 <_strtol_l.constprop.0+0x56>
 802fede:	2308      	movs	r3, #8
 802fee0:	e7af      	b.n	802fe42 <_strtol_l.constprop.0+0x56>
 802fee2:	2c30      	cmp	r4, #48	; 0x30
 802fee4:	d0a5      	beq.n	802fe32 <_strtol_l.constprop.0+0x46>
 802fee6:	230a      	movs	r3, #10
 802fee8:	e7ab      	b.n	802fe42 <_strtol_l.constprop.0+0x56>
 802feea:	bf00      	nop
 802feec:	08034b59 	.word	0x08034b59

0802fef0 <_strtol_r>:
 802fef0:	f7ff bf7c 	b.w	802fdec <_strtol_l.constprop.0>

0802fef4 <__ssputs_r>:
 802fef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802fef8:	688e      	ldr	r6, [r1, #8]
 802fefa:	461f      	mov	r7, r3
 802fefc:	42be      	cmp	r6, r7
 802fefe:	680b      	ldr	r3, [r1, #0]
 802ff00:	4682      	mov	sl, r0
 802ff02:	460c      	mov	r4, r1
 802ff04:	4690      	mov	r8, r2
 802ff06:	d82c      	bhi.n	802ff62 <__ssputs_r+0x6e>
 802ff08:	898a      	ldrh	r2, [r1, #12]
 802ff0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802ff0e:	d026      	beq.n	802ff5e <__ssputs_r+0x6a>
 802ff10:	6965      	ldr	r5, [r4, #20]
 802ff12:	6909      	ldr	r1, [r1, #16]
 802ff14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802ff18:	eba3 0901 	sub.w	r9, r3, r1
 802ff1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802ff20:	1c7b      	adds	r3, r7, #1
 802ff22:	444b      	add	r3, r9
 802ff24:	106d      	asrs	r5, r5, #1
 802ff26:	429d      	cmp	r5, r3
 802ff28:	bf38      	it	cc
 802ff2a:	461d      	movcc	r5, r3
 802ff2c:	0553      	lsls	r3, r2, #21
 802ff2e:	d527      	bpl.n	802ff80 <__ssputs_r+0x8c>
 802ff30:	4629      	mov	r1, r5
 802ff32:	f7fc fa77 	bl	802c424 <_malloc_r>
 802ff36:	4606      	mov	r6, r0
 802ff38:	b360      	cbz	r0, 802ff94 <__ssputs_r+0xa0>
 802ff3a:	6921      	ldr	r1, [r4, #16]
 802ff3c:	464a      	mov	r2, r9
 802ff3e:	f7fd fdb2 	bl	802daa6 <memcpy>
 802ff42:	89a3      	ldrh	r3, [r4, #12]
 802ff44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802ff48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802ff4c:	81a3      	strh	r3, [r4, #12]
 802ff4e:	6126      	str	r6, [r4, #16]
 802ff50:	6165      	str	r5, [r4, #20]
 802ff52:	444e      	add	r6, r9
 802ff54:	eba5 0509 	sub.w	r5, r5, r9
 802ff58:	6026      	str	r6, [r4, #0]
 802ff5a:	60a5      	str	r5, [r4, #8]
 802ff5c:	463e      	mov	r6, r7
 802ff5e:	42be      	cmp	r6, r7
 802ff60:	d900      	bls.n	802ff64 <__ssputs_r+0x70>
 802ff62:	463e      	mov	r6, r7
 802ff64:	6820      	ldr	r0, [r4, #0]
 802ff66:	4632      	mov	r2, r6
 802ff68:	4641      	mov	r1, r8
 802ff6a:	f7fd fbad 	bl	802d6c8 <memmove>
 802ff6e:	68a3      	ldr	r3, [r4, #8]
 802ff70:	1b9b      	subs	r3, r3, r6
 802ff72:	60a3      	str	r3, [r4, #8]
 802ff74:	6823      	ldr	r3, [r4, #0]
 802ff76:	4433      	add	r3, r6
 802ff78:	6023      	str	r3, [r4, #0]
 802ff7a:	2000      	movs	r0, #0
 802ff7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ff80:	462a      	mov	r2, r5
 802ff82:	f001 face 	bl	8031522 <_realloc_r>
 802ff86:	4606      	mov	r6, r0
 802ff88:	2800      	cmp	r0, #0
 802ff8a:	d1e0      	bne.n	802ff4e <__ssputs_r+0x5a>
 802ff8c:	6921      	ldr	r1, [r4, #16]
 802ff8e:	4650      	mov	r0, sl
 802ff90:	f7fe fc20 	bl	802e7d4 <_free_r>
 802ff94:	230c      	movs	r3, #12
 802ff96:	f8ca 3000 	str.w	r3, [sl]
 802ff9a:	89a3      	ldrh	r3, [r4, #12]
 802ff9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ffa0:	81a3      	strh	r3, [r4, #12]
 802ffa2:	f04f 30ff 	mov.w	r0, #4294967295
 802ffa6:	e7e9      	b.n	802ff7c <__ssputs_r+0x88>

0802ffa8 <_svfiprintf_r>:
 802ffa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ffac:	4698      	mov	r8, r3
 802ffae:	898b      	ldrh	r3, [r1, #12]
 802ffb0:	061b      	lsls	r3, r3, #24
 802ffb2:	b09d      	sub	sp, #116	; 0x74
 802ffb4:	4607      	mov	r7, r0
 802ffb6:	460d      	mov	r5, r1
 802ffb8:	4614      	mov	r4, r2
 802ffba:	d50e      	bpl.n	802ffda <_svfiprintf_r+0x32>
 802ffbc:	690b      	ldr	r3, [r1, #16]
 802ffbe:	b963      	cbnz	r3, 802ffda <_svfiprintf_r+0x32>
 802ffc0:	2140      	movs	r1, #64	; 0x40
 802ffc2:	f7fc fa2f 	bl	802c424 <_malloc_r>
 802ffc6:	6028      	str	r0, [r5, #0]
 802ffc8:	6128      	str	r0, [r5, #16]
 802ffca:	b920      	cbnz	r0, 802ffd6 <_svfiprintf_r+0x2e>
 802ffcc:	230c      	movs	r3, #12
 802ffce:	603b      	str	r3, [r7, #0]
 802ffd0:	f04f 30ff 	mov.w	r0, #4294967295
 802ffd4:	e0d0      	b.n	8030178 <_svfiprintf_r+0x1d0>
 802ffd6:	2340      	movs	r3, #64	; 0x40
 802ffd8:	616b      	str	r3, [r5, #20]
 802ffda:	2300      	movs	r3, #0
 802ffdc:	9309      	str	r3, [sp, #36]	; 0x24
 802ffde:	2320      	movs	r3, #32
 802ffe0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802ffe4:	f8cd 800c 	str.w	r8, [sp, #12]
 802ffe8:	2330      	movs	r3, #48	; 0x30
 802ffea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8030190 <_svfiprintf_r+0x1e8>
 802ffee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802fff2:	f04f 0901 	mov.w	r9, #1
 802fff6:	4623      	mov	r3, r4
 802fff8:	469a      	mov	sl, r3
 802fffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 802fffe:	b10a      	cbz	r2, 8030004 <_svfiprintf_r+0x5c>
 8030000:	2a25      	cmp	r2, #37	; 0x25
 8030002:	d1f9      	bne.n	802fff8 <_svfiprintf_r+0x50>
 8030004:	ebba 0b04 	subs.w	fp, sl, r4
 8030008:	d00b      	beq.n	8030022 <_svfiprintf_r+0x7a>
 803000a:	465b      	mov	r3, fp
 803000c:	4622      	mov	r2, r4
 803000e:	4629      	mov	r1, r5
 8030010:	4638      	mov	r0, r7
 8030012:	f7ff ff6f 	bl	802fef4 <__ssputs_r>
 8030016:	3001      	adds	r0, #1
 8030018:	f000 80a9 	beq.w	803016e <_svfiprintf_r+0x1c6>
 803001c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803001e:	445a      	add	r2, fp
 8030020:	9209      	str	r2, [sp, #36]	; 0x24
 8030022:	f89a 3000 	ldrb.w	r3, [sl]
 8030026:	2b00      	cmp	r3, #0
 8030028:	f000 80a1 	beq.w	803016e <_svfiprintf_r+0x1c6>
 803002c:	2300      	movs	r3, #0
 803002e:	f04f 32ff 	mov.w	r2, #4294967295
 8030032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030036:	f10a 0a01 	add.w	sl, sl, #1
 803003a:	9304      	str	r3, [sp, #16]
 803003c:	9307      	str	r3, [sp, #28]
 803003e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030042:	931a      	str	r3, [sp, #104]	; 0x68
 8030044:	4654      	mov	r4, sl
 8030046:	2205      	movs	r2, #5
 8030048:	f814 1b01 	ldrb.w	r1, [r4], #1
 803004c:	4850      	ldr	r0, [pc, #320]	; (8030190 <_svfiprintf_r+0x1e8>)
 803004e:	f7e0 f8d7 	bl	8010200 <memchr>
 8030052:	9a04      	ldr	r2, [sp, #16]
 8030054:	b9d8      	cbnz	r0, 803008e <_svfiprintf_r+0xe6>
 8030056:	06d0      	lsls	r0, r2, #27
 8030058:	bf44      	itt	mi
 803005a:	2320      	movmi	r3, #32
 803005c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030060:	0711      	lsls	r1, r2, #28
 8030062:	bf44      	itt	mi
 8030064:	232b      	movmi	r3, #43	; 0x2b
 8030066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803006a:	f89a 3000 	ldrb.w	r3, [sl]
 803006e:	2b2a      	cmp	r3, #42	; 0x2a
 8030070:	d015      	beq.n	803009e <_svfiprintf_r+0xf6>
 8030072:	9a07      	ldr	r2, [sp, #28]
 8030074:	4654      	mov	r4, sl
 8030076:	2000      	movs	r0, #0
 8030078:	f04f 0c0a 	mov.w	ip, #10
 803007c:	4621      	mov	r1, r4
 803007e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030082:	3b30      	subs	r3, #48	; 0x30
 8030084:	2b09      	cmp	r3, #9
 8030086:	d94d      	bls.n	8030124 <_svfiprintf_r+0x17c>
 8030088:	b1b0      	cbz	r0, 80300b8 <_svfiprintf_r+0x110>
 803008a:	9207      	str	r2, [sp, #28]
 803008c:	e014      	b.n	80300b8 <_svfiprintf_r+0x110>
 803008e:	eba0 0308 	sub.w	r3, r0, r8
 8030092:	fa09 f303 	lsl.w	r3, r9, r3
 8030096:	4313      	orrs	r3, r2
 8030098:	9304      	str	r3, [sp, #16]
 803009a:	46a2      	mov	sl, r4
 803009c:	e7d2      	b.n	8030044 <_svfiprintf_r+0x9c>
 803009e:	9b03      	ldr	r3, [sp, #12]
 80300a0:	1d19      	adds	r1, r3, #4
 80300a2:	681b      	ldr	r3, [r3, #0]
 80300a4:	9103      	str	r1, [sp, #12]
 80300a6:	2b00      	cmp	r3, #0
 80300a8:	bfbb      	ittet	lt
 80300aa:	425b      	neglt	r3, r3
 80300ac:	f042 0202 	orrlt.w	r2, r2, #2
 80300b0:	9307      	strge	r3, [sp, #28]
 80300b2:	9307      	strlt	r3, [sp, #28]
 80300b4:	bfb8      	it	lt
 80300b6:	9204      	strlt	r2, [sp, #16]
 80300b8:	7823      	ldrb	r3, [r4, #0]
 80300ba:	2b2e      	cmp	r3, #46	; 0x2e
 80300bc:	d10c      	bne.n	80300d8 <_svfiprintf_r+0x130>
 80300be:	7863      	ldrb	r3, [r4, #1]
 80300c0:	2b2a      	cmp	r3, #42	; 0x2a
 80300c2:	d134      	bne.n	803012e <_svfiprintf_r+0x186>
 80300c4:	9b03      	ldr	r3, [sp, #12]
 80300c6:	1d1a      	adds	r2, r3, #4
 80300c8:	681b      	ldr	r3, [r3, #0]
 80300ca:	9203      	str	r2, [sp, #12]
 80300cc:	2b00      	cmp	r3, #0
 80300ce:	bfb8      	it	lt
 80300d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80300d4:	3402      	adds	r4, #2
 80300d6:	9305      	str	r3, [sp, #20]
 80300d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80301a0 <_svfiprintf_r+0x1f8>
 80300dc:	7821      	ldrb	r1, [r4, #0]
 80300de:	2203      	movs	r2, #3
 80300e0:	4650      	mov	r0, sl
 80300e2:	f7e0 f88d 	bl	8010200 <memchr>
 80300e6:	b138      	cbz	r0, 80300f8 <_svfiprintf_r+0x150>
 80300e8:	9b04      	ldr	r3, [sp, #16]
 80300ea:	eba0 000a 	sub.w	r0, r0, sl
 80300ee:	2240      	movs	r2, #64	; 0x40
 80300f0:	4082      	lsls	r2, r0
 80300f2:	4313      	orrs	r3, r2
 80300f4:	3401      	adds	r4, #1
 80300f6:	9304      	str	r3, [sp, #16]
 80300f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80300fc:	4825      	ldr	r0, [pc, #148]	; (8030194 <_svfiprintf_r+0x1ec>)
 80300fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030102:	2206      	movs	r2, #6
 8030104:	f7e0 f87c 	bl	8010200 <memchr>
 8030108:	2800      	cmp	r0, #0
 803010a:	d038      	beq.n	803017e <_svfiprintf_r+0x1d6>
 803010c:	4b22      	ldr	r3, [pc, #136]	; (8030198 <_svfiprintf_r+0x1f0>)
 803010e:	bb1b      	cbnz	r3, 8030158 <_svfiprintf_r+0x1b0>
 8030110:	9b03      	ldr	r3, [sp, #12]
 8030112:	3307      	adds	r3, #7
 8030114:	f023 0307 	bic.w	r3, r3, #7
 8030118:	3308      	adds	r3, #8
 803011a:	9303      	str	r3, [sp, #12]
 803011c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803011e:	4433      	add	r3, r6
 8030120:	9309      	str	r3, [sp, #36]	; 0x24
 8030122:	e768      	b.n	802fff6 <_svfiprintf_r+0x4e>
 8030124:	fb0c 3202 	mla	r2, ip, r2, r3
 8030128:	460c      	mov	r4, r1
 803012a:	2001      	movs	r0, #1
 803012c:	e7a6      	b.n	803007c <_svfiprintf_r+0xd4>
 803012e:	2300      	movs	r3, #0
 8030130:	3401      	adds	r4, #1
 8030132:	9305      	str	r3, [sp, #20]
 8030134:	4619      	mov	r1, r3
 8030136:	f04f 0c0a 	mov.w	ip, #10
 803013a:	4620      	mov	r0, r4
 803013c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030140:	3a30      	subs	r2, #48	; 0x30
 8030142:	2a09      	cmp	r2, #9
 8030144:	d903      	bls.n	803014e <_svfiprintf_r+0x1a6>
 8030146:	2b00      	cmp	r3, #0
 8030148:	d0c6      	beq.n	80300d8 <_svfiprintf_r+0x130>
 803014a:	9105      	str	r1, [sp, #20]
 803014c:	e7c4      	b.n	80300d8 <_svfiprintf_r+0x130>
 803014e:	fb0c 2101 	mla	r1, ip, r1, r2
 8030152:	4604      	mov	r4, r0
 8030154:	2301      	movs	r3, #1
 8030156:	e7f0      	b.n	803013a <_svfiprintf_r+0x192>
 8030158:	ab03      	add	r3, sp, #12
 803015a:	9300      	str	r3, [sp, #0]
 803015c:	462a      	mov	r2, r5
 803015e:	4b0f      	ldr	r3, [pc, #60]	; (803019c <_svfiprintf_r+0x1f4>)
 8030160:	a904      	add	r1, sp, #16
 8030162:	4638      	mov	r0, r7
 8030164:	f7fc fa8a 	bl	802c67c <_printf_float>
 8030168:	1c42      	adds	r2, r0, #1
 803016a:	4606      	mov	r6, r0
 803016c:	d1d6      	bne.n	803011c <_svfiprintf_r+0x174>
 803016e:	89ab      	ldrh	r3, [r5, #12]
 8030170:	065b      	lsls	r3, r3, #25
 8030172:	f53f af2d 	bmi.w	802ffd0 <_svfiprintf_r+0x28>
 8030176:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030178:	b01d      	add	sp, #116	; 0x74
 803017a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803017e:	ab03      	add	r3, sp, #12
 8030180:	9300      	str	r3, [sp, #0]
 8030182:	462a      	mov	r2, r5
 8030184:	4b05      	ldr	r3, [pc, #20]	; (803019c <_svfiprintf_r+0x1f4>)
 8030186:	a904      	add	r1, sp, #16
 8030188:	4638      	mov	r0, r7
 803018a:	f7fc fd1b 	bl	802cbc4 <_printf_i>
 803018e:	e7eb      	b.n	8030168 <_svfiprintf_r+0x1c0>
 8030190:	08034c59 	.word	0x08034c59
 8030194:	08034c63 	.word	0x08034c63
 8030198:	0802c67d 	.word	0x0802c67d
 803019c:	0802fef5 	.word	0x0802fef5
 80301a0:	08034c5f 	.word	0x08034c5f

080301a4 <_sungetc_r>:
 80301a4:	b538      	push	{r3, r4, r5, lr}
 80301a6:	1c4b      	adds	r3, r1, #1
 80301a8:	4614      	mov	r4, r2
 80301aa:	d103      	bne.n	80301b4 <_sungetc_r+0x10>
 80301ac:	f04f 35ff 	mov.w	r5, #4294967295
 80301b0:	4628      	mov	r0, r5
 80301b2:	bd38      	pop	{r3, r4, r5, pc}
 80301b4:	8993      	ldrh	r3, [r2, #12]
 80301b6:	f023 0320 	bic.w	r3, r3, #32
 80301ba:	8193      	strh	r3, [r2, #12]
 80301bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80301be:	6852      	ldr	r2, [r2, #4]
 80301c0:	b2cd      	uxtb	r5, r1
 80301c2:	b18b      	cbz	r3, 80301e8 <_sungetc_r+0x44>
 80301c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80301c6:	4293      	cmp	r3, r2
 80301c8:	dd08      	ble.n	80301dc <_sungetc_r+0x38>
 80301ca:	6823      	ldr	r3, [r4, #0]
 80301cc:	1e5a      	subs	r2, r3, #1
 80301ce:	6022      	str	r2, [r4, #0]
 80301d0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80301d4:	6863      	ldr	r3, [r4, #4]
 80301d6:	3301      	adds	r3, #1
 80301d8:	6063      	str	r3, [r4, #4]
 80301da:	e7e9      	b.n	80301b0 <_sungetc_r+0xc>
 80301dc:	4621      	mov	r1, r4
 80301de:	f000 fd8e 	bl	8030cfe <__submore>
 80301e2:	2800      	cmp	r0, #0
 80301e4:	d0f1      	beq.n	80301ca <_sungetc_r+0x26>
 80301e6:	e7e1      	b.n	80301ac <_sungetc_r+0x8>
 80301e8:	6921      	ldr	r1, [r4, #16]
 80301ea:	6823      	ldr	r3, [r4, #0]
 80301ec:	b151      	cbz	r1, 8030204 <_sungetc_r+0x60>
 80301ee:	4299      	cmp	r1, r3
 80301f0:	d208      	bcs.n	8030204 <_sungetc_r+0x60>
 80301f2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80301f6:	42a9      	cmp	r1, r5
 80301f8:	d104      	bne.n	8030204 <_sungetc_r+0x60>
 80301fa:	3b01      	subs	r3, #1
 80301fc:	3201      	adds	r2, #1
 80301fe:	6023      	str	r3, [r4, #0]
 8030200:	6062      	str	r2, [r4, #4]
 8030202:	e7d5      	b.n	80301b0 <_sungetc_r+0xc>
 8030204:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8030208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803020c:	6363      	str	r3, [r4, #52]	; 0x34
 803020e:	2303      	movs	r3, #3
 8030210:	63a3      	str	r3, [r4, #56]	; 0x38
 8030212:	4623      	mov	r3, r4
 8030214:	f803 5f46 	strb.w	r5, [r3, #70]!
 8030218:	6023      	str	r3, [r4, #0]
 803021a:	2301      	movs	r3, #1
 803021c:	e7dc      	b.n	80301d8 <_sungetc_r+0x34>

0803021e <__ssrefill_r>:
 803021e:	b510      	push	{r4, lr}
 8030220:	460c      	mov	r4, r1
 8030222:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030224:	b169      	cbz	r1, 8030242 <__ssrefill_r+0x24>
 8030226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 803022a:	4299      	cmp	r1, r3
 803022c:	d001      	beq.n	8030232 <__ssrefill_r+0x14>
 803022e:	f7fe fad1 	bl	802e7d4 <_free_r>
 8030232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030234:	6063      	str	r3, [r4, #4]
 8030236:	2000      	movs	r0, #0
 8030238:	6360      	str	r0, [r4, #52]	; 0x34
 803023a:	b113      	cbz	r3, 8030242 <__ssrefill_r+0x24>
 803023c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 803023e:	6023      	str	r3, [r4, #0]
 8030240:	bd10      	pop	{r4, pc}
 8030242:	6923      	ldr	r3, [r4, #16]
 8030244:	6023      	str	r3, [r4, #0]
 8030246:	2300      	movs	r3, #0
 8030248:	6063      	str	r3, [r4, #4]
 803024a:	89a3      	ldrh	r3, [r4, #12]
 803024c:	f043 0320 	orr.w	r3, r3, #32
 8030250:	81a3      	strh	r3, [r4, #12]
 8030252:	f04f 30ff 	mov.w	r0, #4294967295
 8030256:	e7f3      	b.n	8030240 <__ssrefill_r+0x22>

08030258 <__ssvfiscanf_r>:
 8030258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803025c:	460c      	mov	r4, r1
 803025e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8030262:	2100      	movs	r1, #0
 8030264:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8030268:	49a6      	ldr	r1, [pc, #664]	; (8030504 <__ssvfiscanf_r+0x2ac>)
 803026a:	91a0      	str	r1, [sp, #640]	; 0x280
 803026c:	f10d 0804 	add.w	r8, sp, #4
 8030270:	49a5      	ldr	r1, [pc, #660]	; (8030508 <__ssvfiscanf_r+0x2b0>)
 8030272:	4fa6      	ldr	r7, [pc, #664]	; (803050c <__ssvfiscanf_r+0x2b4>)
 8030274:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8030510 <__ssvfiscanf_r+0x2b8>
 8030278:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 803027c:	4606      	mov	r6, r0
 803027e:	91a1      	str	r1, [sp, #644]	; 0x284
 8030280:	9300      	str	r3, [sp, #0]
 8030282:	7813      	ldrb	r3, [r2, #0]
 8030284:	2b00      	cmp	r3, #0
 8030286:	f000 815a 	beq.w	803053e <__ssvfiscanf_r+0x2e6>
 803028a:	5cf9      	ldrb	r1, [r7, r3]
 803028c:	f011 0108 	ands.w	r1, r1, #8
 8030290:	f102 0501 	add.w	r5, r2, #1
 8030294:	d019      	beq.n	80302ca <__ssvfiscanf_r+0x72>
 8030296:	6863      	ldr	r3, [r4, #4]
 8030298:	2b00      	cmp	r3, #0
 803029a:	dd0f      	ble.n	80302bc <__ssvfiscanf_r+0x64>
 803029c:	6823      	ldr	r3, [r4, #0]
 803029e:	781a      	ldrb	r2, [r3, #0]
 80302a0:	5cba      	ldrb	r2, [r7, r2]
 80302a2:	0712      	lsls	r2, r2, #28
 80302a4:	d401      	bmi.n	80302aa <__ssvfiscanf_r+0x52>
 80302a6:	462a      	mov	r2, r5
 80302a8:	e7eb      	b.n	8030282 <__ssvfiscanf_r+0x2a>
 80302aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80302ac:	3201      	adds	r2, #1
 80302ae:	9245      	str	r2, [sp, #276]	; 0x114
 80302b0:	6862      	ldr	r2, [r4, #4]
 80302b2:	3301      	adds	r3, #1
 80302b4:	3a01      	subs	r2, #1
 80302b6:	6062      	str	r2, [r4, #4]
 80302b8:	6023      	str	r3, [r4, #0]
 80302ba:	e7ec      	b.n	8030296 <__ssvfiscanf_r+0x3e>
 80302bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80302be:	4621      	mov	r1, r4
 80302c0:	4630      	mov	r0, r6
 80302c2:	4798      	blx	r3
 80302c4:	2800      	cmp	r0, #0
 80302c6:	d0e9      	beq.n	803029c <__ssvfiscanf_r+0x44>
 80302c8:	e7ed      	b.n	80302a6 <__ssvfiscanf_r+0x4e>
 80302ca:	2b25      	cmp	r3, #37	; 0x25
 80302cc:	d012      	beq.n	80302f4 <__ssvfiscanf_r+0x9c>
 80302ce:	469a      	mov	sl, r3
 80302d0:	6863      	ldr	r3, [r4, #4]
 80302d2:	2b00      	cmp	r3, #0
 80302d4:	f340 8091 	ble.w	80303fa <__ssvfiscanf_r+0x1a2>
 80302d8:	6822      	ldr	r2, [r4, #0]
 80302da:	7813      	ldrb	r3, [r2, #0]
 80302dc:	4553      	cmp	r3, sl
 80302de:	f040 812e 	bne.w	803053e <__ssvfiscanf_r+0x2e6>
 80302e2:	6863      	ldr	r3, [r4, #4]
 80302e4:	3b01      	subs	r3, #1
 80302e6:	6063      	str	r3, [r4, #4]
 80302e8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80302ea:	3201      	adds	r2, #1
 80302ec:	3301      	adds	r3, #1
 80302ee:	6022      	str	r2, [r4, #0]
 80302f0:	9345      	str	r3, [sp, #276]	; 0x114
 80302f2:	e7d8      	b.n	80302a6 <__ssvfiscanf_r+0x4e>
 80302f4:	9141      	str	r1, [sp, #260]	; 0x104
 80302f6:	9143      	str	r1, [sp, #268]	; 0x10c
 80302f8:	7853      	ldrb	r3, [r2, #1]
 80302fa:	2b2a      	cmp	r3, #42	; 0x2a
 80302fc:	bf02      	ittt	eq
 80302fe:	2310      	moveq	r3, #16
 8030300:	1c95      	addeq	r5, r2, #2
 8030302:	9341      	streq	r3, [sp, #260]	; 0x104
 8030304:	220a      	movs	r2, #10
 8030306:	46aa      	mov	sl, r5
 8030308:	f81a 1b01 	ldrb.w	r1, [sl], #1
 803030c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8030310:	2b09      	cmp	r3, #9
 8030312:	d91c      	bls.n	803034e <__ssvfiscanf_r+0xf6>
 8030314:	487e      	ldr	r0, [pc, #504]	; (8030510 <__ssvfiscanf_r+0x2b8>)
 8030316:	2203      	movs	r2, #3
 8030318:	f7df ff72 	bl	8010200 <memchr>
 803031c:	b138      	cbz	r0, 803032e <__ssvfiscanf_r+0xd6>
 803031e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030320:	eba0 0009 	sub.w	r0, r0, r9
 8030324:	2301      	movs	r3, #1
 8030326:	4083      	lsls	r3, r0
 8030328:	4313      	orrs	r3, r2
 803032a:	9341      	str	r3, [sp, #260]	; 0x104
 803032c:	4655      	mov	r5, sl
 803032e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8030332:	2b78      	cmp	r3, #120	; 0x78
 8030334:	d806      	bhi.n	8030344 <__ssvfiscanf_r+0xec>
 8030336:	2b57      	cmp	r3, #87	; 0x57
 8030338:	d810      	bhi.n	803035c <__ssvfiscanf_r+0x104>
 803033a:	2b25      	cmp	r3, #37	; 0x25
 803033c:	d0c7      	beq.n	80302ce <__ssvfiscanf_r+0x76>
 803033e:	d857      	bhi.n	80303f0 <__ssvfiscanf_r+0x198>
 8030340:	2b00      	cmp	r3, #0
 8030342:	d065      	beq.n	8030410 <__ssvfiscanf_r+0x1b8>
 8030344:	2303      	movs	r3, #3
 8030346:	9347      	str	r3, [sp, #284]	; 0x11c
 8030348:	230a      	movs	r3, #10
 803034a:	9342      	str	r3, [sp, #264]	; 0x108
 803034c:	e076      	b.n	803043c <__ssvfiscanf_r+0x1e4>
 803034e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8030350:	fb02 1103 	mla	r1, r2, r3, r1
 8030354:	3930      	subs	r1, #48	; 0x30
 8030356:	9143      	str	r1, [sp, #268]	; 0x10c
 8030358:	4655      	mov	r5, sl
 803035a:	e7d4      	b.n	8030306 <__ssvfiscanf_r+0xae>
 803035c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8030360:	2a20      	cmp	r2, #32
 8030362:	d8ef      	bhi.n	8030344 <__ssvfiscanf_r+0xec>
 8030364:	a101      	add	r1, pc, #4	; (adr r1, 803036c <__ssvfiscanf_r+0x114>)
 8030366:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803036a:	bf00      	nop
 803036c:	0803041f 	.word	0x0803041f
 8030370:	08030345 	.word	0x08030345
 8030374:	08030345 	.word	0x08030345
 8030378:	0803047d 	.word	0x0803047d
 803037c:	08030345 	.word	0x08030345
 8030380:	08030345 	.word	0x08030345
 8030384:	08030345 	.word	0x08030345
 8030388:	08030345 	.word	0x08030345
 803038c:	08030345 	.word	0x08030345
 8030390:	08030345 	.word	0x08030345
 8030394:	08030345 	.word	0x08030345
 8030398:	08030493 	.word	0x08030493
 803039c:	08030479 	.word	0x08030479
 80303a0:	080303f7 	.word	0x080303f7
 80303a4:	080303f7 	.word	0x080303f7
 80303a8:	080303f7 	.word	0x080303f7
 80303ac:	08030345 	.word	0x08030345
 80303b0:	08030435 	.word	0x08030435
 80303b4:	08030345 	.word	0x08030345
 80303b8:	08030345 	.word	0x08030345
 80303bc:	08030345 	.word	0x08030345
 80303c0:	08030345 	.word	0x08030345
 80303c4:	080304a3 	.word	0x080304a3
 80303c8:	08030471 	.word	0x08030471
 80303cc:	08030417 	.word	0x08030417
 80303d0:	08030345 	.word	0x08030345
 80303d4:	08030345 	.word	0x08030345
 80303d8:	0803049f 	.word	0x0803049f
 80303dc:	08030345 	.word	0x08030345
 80303e0:	08030479 	.word	0x08030479
 80303e4:	08030345 	.word	0x08030345
 80303e8:	08030345 	.word	0x08030345
 80303ec:	0803041f 	.word	0x0803041f
 80303f0:	3b45      	subs	r3, #69	; 0x45
 80303f2:	2b02      	cmp	r3, #2
 80303f4:	d8a6      	bhi.n	8030344 <__ssvfiscanf_r+0xec>
 80303f6:	2305      	movs	r3, #5
 80303f8:	e01f      	b.n	803043a <__ssvfiscanf_r+0x1e2>
 80303fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80303fc:	4621      	mov	r1, r4
 80303fe:	4630      	mov	r0, r6
 8030400:	4798      	blx	r3
 8030402:	2800      	cmp	r0, #0
 8030404:	f43f af68 	beq.w	80302d8 <__ssvfiscanf_r+0x80>
 8030408:	9844      	ldr	r0, [sp, #272]	; 0x110
 803040a:	2800      	cmp	r0, #0
 803040c:	f040 808d 	bne.w	803052a <__ssvfiscanf_r+0x2d2>
 8030410:	f04f 30ff 	mov.w	r0, #4294967295
 8030414:	e08f      	b.n	8030536 <__ssvfiscanf_r+0x2de>
 8030416:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030418:	f042 0220 	orr.w	r2, r2, #32
 803041c:	9241      	str	r2, [sp, #260]	; 0x104
 803041e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8030420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030424:	9241      	str	r2, [sp, #260]	; 0x104
 8030426:	2210      	movs	r2, #16
 8030428:	2b6f      	cmp	r3, #111	; 0x6f
 803042a:	9242      	str	r2, [sp, #264]	; 0x108
 803042c:	bf34      	ite	cc
 803042e:	2303      	movcc	r3, #3
 8030430:	2304      	movcs	r3, #4
 8030432:	e002      	b.n	803043a <__ssvfiscanf_r+0x1e2>
 8030434:	2300      	movs	r3, #0
 8030436:	9342      	str	r3, [sp, #264]	; 0x108
 8030438:	2303      	movs	r3, #3
 803043a:	9347      	str	r3, [sp, #284]	; 0x11c
 803043c:	6863      	ldr	r3, [r4, #4]
 803043e:	2b00      	cmp	r3, #0
 8030440:	dd3d      	ble.n	80304be <__ssvfiscanf_r+0x266>
 8030442:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030444:	0659      	lsls	r1, r3, #25
 8030446:	d404      	bmi.n	8030452 <__ssvfiscanf_r+0x1fa>
 8030448:	6823      	ldr	r3, [r4, #0]
 803044a:	781a      	ldrb	r2, [r3, #0]
 803044c:	5cba      	ldrb	r2, [r7, r2]
 803044e:	0712      	lsls	r2, r2, #28
 8030450:	d43c      	bmi.n	80304cc <__ssvfiscanf_r+0x274>
 8030452:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8030454:	2b02      	cmp	r3, #2
 8030456:	dc4b      	bgt.n	80304f0 <__ssvfiscanf_r+0x298>
 8030458:	466b      	mov	r3, sp
 803045a:	4622      	mov	r2, r4
 803045c:	a941      	add	r1, sp, #260	; 0x104
 803045e:	4630      	mov	r0, r6
 8030460:	f000 f9b6 	bl	80307d0 <_scanf_chars>
 8030464:	2801      	cmp	r0, #1
 8030466:	d06a      	beq.n	803053e <__ssvfiscanf_r+0x2e6>
 8030468:	2802      	cmp	r0, #2
 803046a:	f47f af1c 	bne.w	80302a6 <__ssvfiscanf_r+0x4e>
 803046e:	e7cb      	b.n	8030408 <__ssvfiscanf_r+0x1b0>
 8030470:	2308      	movs	r3, #8
 8030472:	9342      	str	r3, [sp, #264]	; 0x108
 8030474:	2304      	movs	r3, #4
 8030476:	e7e0      	b.n	803043a <__ssvfiscanf_r+0x1e2>
 8030478:	220a      	movs	r2, #10
 803047a:	e7d5      	b.n	8030428 <__ssvfiscanf_r+0x1d0>
 803047c:	4629      	mov	r1, r5
 803047e:	4640      	mov	r0, r8
 8030480:	f000 fc04 	bl	8030c8c <__sccl>
 8030484:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803048a:	9341      	str	r3, [sp, #260]	; 0x104
 803048c:	4605      	mov	r5, r0
 803048e:	2301      	movs	r3, #1
 8030490:	e7d3      	b.n	803043a <__ssvfiscanf_r+0x1e2>
 8030492:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030498:	9341      	str	r3, [sp, #260]	; 0x104
 803049a:	2300      	movs	r3, #0
 803049c:	e7cd      	b.n	803043a <__ssvfiscanf_r+0x1e2>
 803049e:	2302      	movs	r3, #2
 80304a0:	e7cb      	b.n	803043a <__ssvfiscanf_r+0x1e2>
 80304a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80304a4:	06c3      	lsls	r3, r0, #27
 80304a6:	f53f aefe 	bmi.w	80302a6 <__ssvfiscanf_r+0x4e>
 80304aa:	9b00      	ldr	r3, [sp, #0]
 80304ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80304ae:	1d19      	adds	r1, r3, #4
 80304b0:	9100      	str	r1, [sp, #0]
 80304b2:	681b      	ldr	r3, [r3, #0]
 80304b4:	07c0      	lsls	r0, r0, #31
 80304b6:	bf4c      	ite	mi
 80304b8:	801a      	strhmi	r2, [r3, #0]
 80304ba:	601a      	strpl	r2, [r3, #0]
 80304bc:	e6f3      	b.n	80302a6 <__ssvfiscanf_r+0x4e>
 80304be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80304c0:	4621      	mov	r1, r4
 80304c2:	4630      	mov	r0, r6
 80304c4:	4798      	blx	r3
 80304c6:	2800      	cmp	r0, #0
 80304c8:	d0bb      	beq.n	8030442 <__ssvfiscanf_r+0x1ea>
 80304ca:	e79d      	b.n	8030408 <__ssvfiscanf_r+0x1b0>
 80304cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80304ce:	3201      	adds	r2, #1
 80304d0:	9245      	str	r2, [sp, #276]	; 0x114
 80304d2:	6862      	ldr	r2, [r4, #4]
 80304d4:	3a01      	subs	r2, #1
 80304d6:	2a00      	cmp	r2, #0
 80304d8:	6062      	str	r2, [r4, #4]
 80304da:	dd02      	ble.n	80304e2 <__ssvfiscanf_r+0x28a>
 80304dc:	3301      	adds	r3, #1
 80304de:	6023      	str	r3, [r4, #0]
 80304e0:	e7b2      	b.n	8030448 <__ssvfiscanf_r+0x1f0>
 80304e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80304e4:	4621      	mov	r1, r4
 80304e6:	4630      	mov	r0, r6
 80304e8:	4798      	blx	r3
 80304ea:	2800      	cmp	r0, #0
 80304ec:	d0ac      	beq.n	8030448 <__ssvfiscanf_r+0x1f0>
 80304ee:	e78b      	b.n	8030408 <__ssvfiscanf_r+0x1b0>
 80304f0:	2b04      	cmp	r3, #4
 80304f2:	dc0f      	bgt.n	8030514 <__ssvfiscanf_r+0x2bc>
 80304f4:	466b      	mov	r3, sp
 80304f6:	4622      	mov	r2, r4
 80304f8:	a941      	add	r1, sp, #260	; 0x104
 80304fa:	4630      	mov	r0, r6
 80304fc:	f000 f9c2 	bl	8030884 <_scanf_i>
 8030500:	e7b0      	b.n	8030464 <__ssvfiscanf_r+0x20c>
 8030502:	bf00      	nop
 8030504:	080301a5 	.word	0x080301a5
 8030508:	0803021f 	.word	0x0803021f
 803050c:	08034b59 	.word	0x08034b59
 8030510:	08034c5f 	.word	0x08034c5f
 8030514:	4b0b      	ldr	r3, [pc, #44]	; (8030544 <__ssvfiscanf_r+0x2ec>)
 8030516:	2b00      	cmp	r3, #0
 8030518:	f43f aec5 	beq.w	80302a6 <__ssvfiscanf_r+0x4e>
 803051c:	466b      	mov	r3, sp
 803051e:	4622      	mov	r2, r4
 8030520:	a941      	add	r1, sp, #260	; 0x104
 8030522:	4630      	mov	r0, r6
 8030524:	f7fc fc70 	bl	802ce08 <_scanf_float>
 8030528:	e79c      	b.n	8030464 <__ssvfiscanf_r+0x20c>
 803052a:	89a3      	ldrh	r3, [r4, #12]
 803052c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8030530:	bf18      	it	ne
 8030532:	f04f 30ff 	movne.w	r0, #4294967295
 8030536:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 803053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803053e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8030540:	e7f9      	b.n	8030536 <__ssvfiscanf_r+0x2de>
 8030542:	bf00      	nop
 8030544:	0802ce09 	.word	0x0802ce09

08030548 <__sfputc_r>:
 8030548:	6893      	ldr	r3, [r2, #8]
 803054a:	3b01      	subs	r3, #1
 803054c:	2b00      	cmp	r3, #0
 803054e:	b410      	push	{r4}
 8030550:	6093      	str	r3, [r2, #8]
 8030552:	da08      	bge.n	8030566 <__sfputc_r+0x1e>
 8030554:	6994      	ldr	r4, [r2, #24]
 8030556:	42a3      	cmp	r3, r4
 8030558:	db01      	blt.n	803055e <__sfputc_r+0x16>
 803055a:	290a      	cmp	r1, #10
 803055c:	d103      	bne.n	8030566 <__sfputc_r+0x1e>
 803055e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030562:	f7fd b80c 	b.w	802d57e <__swbuf_r>
 8030566:	6813      	ldr	r3, [r2, #0]
 8030568:	1c58      	adds	r0, r3, #1
 803056a:	6010      	str	r0, [r2, #0]
 803056c:	7019      	strb	r1, [r3, #0]
 803056e:	4608      	mov	r0, r1
 8030570:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030574:	4770      	bx	lr

08030576 <__sfputs_r>:
 8030576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030578:	4606      	mov	r6, r0
 803057a:	460f      	mov	r7, r1
 803057c:	4614      	mov	r4, r2
 803057e:	18d5      	adds	r5, r2, r3
 8030580:	42ac      	cmp	r4, r5
 8030582:	d101      	bne.n	8030588 <__sfputs_r+0x12>
 8030584:	2000      	movs	r0, #0
 8030586:	e007      	b.n	8030598 <__sfputs_r+0x22>
 8030588:	f814 1b01 	ldrb.w	r1, [r4], #1
 803058c:	463a      	mov	r2, r7
 803058e:	4630      	mov	r0, r6
 8030590:	f7ff ffda 	bl	8030548 <__sfputc_r>
 8030594:	1c43      	adds	r3, r0, #1
 8030596:	d1f3      	bne.n	8030580 <__sfputs_r+0xa>
 8030598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803059c <_vfiprintf_r>:
 803059c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80305a0:	460d      	mov	r5, r1
 80305a2:	b09d      	sub	sp, #116	; 0x74
 80305a4:	4614      	mov	r4, r2
 80305a6:	4698      	mov	r8, r3
 80305a8:	4606      	mov	r6, r0
 80305aa:	b118      	cbz	r0, 80305b4 <_vfiprintf_r+0x18>
 80305ac:	6a03      	ldr	r3, [r0, #32]
 80305ae:	b90b      	cbnz	r3, 80305b4 <_vfiprintf_r+0x18>
 80305b0:	f7fc fec6 	bl	802d340 <__sinit>
 80305b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80305b6:	07d9      	lsls	r1, r3, #31
 80305b8:	d405      	bmi.n	80305c6 <_vfiprintf_r+0x2a>
 80305ba:	89ab      	ldrh	r3, [r5, #12]
 80305bc:	059a      	lsls	r2, r3, #22
 80305be:	d402      	bmi.n	80305c6 <_vfiprintf_r+0x2a>
 80305c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80305c2:	f7fd fa66 	bl	802da92 <__retarget_lock_acquire_recursive>
 80305c6:	89ab      	ldrh	r3, [r5, #12]
 80305c8:	071b      	lsls	r3, r3, #28
 80305ca:	d501      	bpl.n	80305d0 <_vfiprintf_r+0x34>
 80305cc:	692b      	ldr	r3, [r5, #16]
 80305ce:	b99b      	cbnz	r3, 80305f8 <_vfiprintf_r+0x5c>
 80305d0:	4629      	mov	r1, r5
 80305d2:	4630      	mov	r0, r6
 80305d4:	f7fd f810 	bl	802d5f8 <__swsetup_r>
 80305d8:	b170      	cbz	r0, 80305f8 <_vfiprintf_r+0x5c>
 80305da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80305dc:	07dc      	lsls	r4, r3, #31
 80305de:	d504      	bpl.n	80305ea <_vfiprintf_r+0x4e>
 80305e0:	f04f 30ff 	mov.w	r0, #4294967295
 80305e4:	b01d      	add	sp, #116	; 0x74
 80305e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80305ea:	89ab      	ldrh	r3, [r5, #12]
 80305ec:	0598      	lsls	r0, r3, #22
 80305ee:	d4f7      	bmi.n	80305e0 <_vfiprintf_r+0x44>
 80305f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80305f2:	f7fd fa4f 	bl	802da94 <__retarget_lock_release_recursive>
 80305f6:	e7f3      	b.n	80305e0 <_vfiprintf_r+0x44>
 80305f8:	2300      	movs	r3, #0
 80305fa:	9309      	str	r3, [sp, #36]	; 0x24
 80305fc:	2320      	movs	r3, #32
 80305fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030602:	f8cd 800c 	str.w	r8, [sp, #12]
 8030606:	2330      	movs	r3, #48	; 0x30
 8030608:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80307bc <_vfiprintf_r+0x220>
 803060c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8030610:	f04f 0901 	mov.w	r9, #1
 8030614:	4623      	mov	r3, r4
 8030616:	469a      	mov	sl, r3
 8030618:	f813 2b01 	ldrb.w	r2, [r3], #1
 803061c:	b10a      	cbz	r2, 8030622 <_vfiprintf_r+0x86>
 803061e:	2a25      	cmp	r2, #37	; 0x25
 8030620:	d1f9      	bne.n	8030616 <_vfiprintf_r+0x7a>
 8030622:	ebba 0b04 	subs.w	fp, sl, r4
 8030626:	d00b      	beq.n	8030640 <_vfiprintf_r+0xa4>
 8030628:	465b      	mov	r3, fp
 803062a:	4622      	mov	r2, r4
 803062c:	4629      	mov	r1, r5
 803062e:	4630      	mov	r0, r6
 8030630:	f7ff ffa1 	bl	8030576 <__sfputs_r>
 8030634:	3001      	adds	r0, #1
 8030636:	f000 80a9 	beq.w	803078c <_vfiprintf_r+0x1f0>
 803063a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 803063c:	445a      	add	r2, fp
 803063e:	9209      	str	r2, [sp, #36]	; 0x24
 8030640:	f89a 3000 	ldrb.w	r3, [sl]
 8030644:	2b00      	cmp	r3, #0
 8030646:	f000 80a1 	beq.w	803078c <_vfiprintf_r+0x1f0>
 803064a:	2300      	movs	r3, #0
 803064c:	f04f 32ff 	mov.w	r2, #4294967295
 8030650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030654:	f10a 0a01 	add.w	sl, sl, #1
 8030658:	9304      	str	r3, [sp, #16]
 803065a:	9307      	str	r3, [sp, #28]
 803065c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030660:	931a      	str	r3, [sp, #104]	; 0x68
 8030662:	4654      	mov	r4, sl
 8030664:	2205      	movs	r2, #5
 8030666:	f814 1b01 	ldrb.w	r1, [r4], #1
 803066a:	4854      	ldr	r0, [pc, #336]	; (80307bc <_vfiprintf_r+0x220>)
 803066c:	f7df fdc8 	bl	8010200 <memchr>
 8030670:	9a04      	ldr	r2, [sp, #16]
 8030672:	b9d8      	cbnz	r0, 80306ac <_vfiprintf_r+0x110>
 8030674:	06d1      	lsls	r1, r2, #27
 8030676:	bf44      	itt	mi
 8030678:	2320      	movmi	r3, #32
 803067a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803067e:	0713      	lsls	r3, r2, #28
 8030680:	bf44      	itt	mi
 8030682:	232b      	movmi	r3, #43	; 0x2b
 8030684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030688:	f89a 3000 	ldrb.w	r3, [sl]
 803068c:	2b2a      	cmp	r3, #42	; 0x2a
 803068e:	d015      	beq.n	80306bc <_vfiprintf_r+0x120>
 8030690:	9a07      	ldr	r2, [sp, #28]
 8030692:	4654      	mov	r4, sl
 8030694:	2000      	movs	r0, #0
 8030696:	f04f 0c0a 	mov.w	ip, #10
 803069a:	4621      	mov	r1, r4
 803069c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80306a0:	3b30      	subs	r3, #48	; 0x30
 80306a2:	2b09      	cmp	r3, #9
 80306a4:	d94d      	bls.n	8030742 <_vfiprintf_r+0x1a6>
 80306a6:	b1b0      	cbz	r0, 80306d6 <_vfiprintf_r+0x13a>
 80306a8:	9207      	str	r2, [sp, #28]
 80306aa:	e014      	b.n	80306d6 <_vfiprintf_r+0x13a>
 80306ac:	eba0 0308 	sub.w	r3, r0, r8
 80306b0:	fa09 f303 	lsl.w	r3, r9, r3
 80306b4:	4313      	orrs	r3, r2
 80306b6:	9304      	str	r3, [sp, #16]
 80306b8:	46a2      	mov	sl, r4
 80306ba:	e7d2      	b.n	8030662 <_vfiprintf_r+0xc6>
 80306bc:	9b03      	ldr	r3, [sp, #12]
 80306be:	1d19      	adds	r1, r3, #4
 80306c0:	681b      	ldr	r3, [r3, #0]
 80306c2:	9103      	str	r1, [sp, #12]
 80306c4:	2b00      	cmp	r3, #0
 80306c6:	bfbb      	ittet	lt
 80306c8:	425b      	neglt	r3, r3
 80306ca:	f042 0202 	orrlt.w	r2, r2, #2
 80306ce:	9307      	strge	r3, [sp, #28]
 80306d0:	9307      	strlt	r3, [sp, #28]
 80306d2:	bfb8      	it	lt
 80306d4:	9204      	strlt	r2, [sp, #16]
 80306d6:	7823      	ldrb	r3, [r4, #0]
 80306d8:	2b2e      	cmp	r3, #46	; 0x2e
 80306da:	d10c      	bne.n	80306f6 <_vfiprintf_r+0x15a>
 80306dc:	7863      	ldrb	r3, [r4, #1]
 80306de:	2b2a      	cmp	r3, #42	; 0x2a
 80306e0:	d134      	bne.n	803074c <_vfiprintf_r+0x1b0>
 80306e2:	9b03      	ldr	r3, [sp, #12]
 80306e4:	1d1a      	adds	r2, r3, #4
 80306e6:	681b      	ldr	r3, [r3, #0]
 80306e8:	9203      	str	r2, [sp, #12]
 80306ea:	2b00      	cmp	r3, #0
 80306ec:	bfb8      	it	lt
 80306ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80306f2:	3402      	adds	r4, #2
 80306f4:	9305      	str	r3, [sp, #20]
 80306f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80307cc <_vfiprintf_r+0x230>
 80306fa:	7821      	ldrb	r1, [r4, #0]
 80306fc:	2203      	movs	r2, #3
 80306fe:	4650      	mov	r0, sl
 8030700:	f7df fd7e 	bl	8010200 <memchr>
 8030704:	b138      	cbz	r0, 8030716 <_vfiprintf_r+0x17a>
 8030706:	9b04      	ldr	r3, [sp, #16]
 8030708:	eba0 000a 	sub.w	r0, r0, sl
 803070c:	2240      	movs	r2, #64	; 0x40
 803070e:	4082      	lsls	r2, r0
 8030710:	4313      	orrs	r3, r2
 8030712:	3401      	adds	r4, #1
 8030714:	9304      	str	r3, [sp, #16]
 8030716:	f814 1b01 	ldrb.w	r1, [r4], #1
 803071a:	4829      	ldr	r0, [pc, #164]	; (80307c0 <_vfiprintf_r+0x224>)
 803071c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030720:	2206      	movs	r2, #6
 8030722:	f7df fd6d 	bl	8010200 <memchr>
 8030726:	2800      	cmp	r0, #0
 8030728:	d03f      	beq.n	80307aa <_vfiprintf_r+0x20e>
 803072a:	4b26      	ldr	r3, [pc, #152]	; (80307c4 <_vfiprintf_r+0x228>)
 803072c:	bb1b      	cbnz	r3, 8030776 <_vfiprintf_r+0x1da>
 803072e:	9b03      	ldr	r3, [sp, #12]
 8030730:	3307      	adds	r3, #7
 8030732:	f023 0307 	bic.w	r3, r3, #7
 8030736:	3308      	adds	r3, #8
 8030738:	9303      	str	r3, [sp, #12]
 803073a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 803073c:	443b      	add	r3, r7
 803073e:	9309      	str	r3, [sp, #36]	; 0x24
 8030740:	e768      	b.n	8030614 <_vfiprintf_r+0x78>
 8030742:	fb0c 3202 	mla	r2, ip, r2, r3
 8030746:	460c      	mov	r4, r1
 8030748:	2001      	movs	r0, #1
 803074a:	e7a6      	b.n	803069a <_vfiprintf_r+0xfe>
 803074c:	2300      	movs	r3, #0
 803074e:	3401      	adds	r4, #1
 8030750:	9305      	str	r3, [sp, #20]
 8030752:	4619      	mov	r1, r3
 8030754:	f04f 0c0a 	mov.w	ip, #10
 8030758:	4620      	mov	r0, r4
 803075a:	f810 2b01 	ldrb.w	r2, [r0], #1
 803075e:	3a30      	subs	r2, #48	; 0x30
 8030760:	2a09      	cmp	r2, #9
 8030762:	d903      	bls.n	803076c <_vfiprintf_r+0x1d0>
 8030764:	2b00      	cmp	r3, #0
 8030766:	d0c6      	beq.n	80306f6 <_vfiprintf_r+0x15a>
 8030768:	9105      	str	r1, [sp, #20]
 803076a:	e7c4      	b.n	80306f6 <_vfiprintf_r+0x15a>
 803076c:	fb0c 2101 	mla	r1, ip, r1, r2
 8030770:	4604      	mov	r4, r0
 8030772:	2301      	movs	r3, #1
 8030774:	e7f0      	b.n	8030758 <_vfiprintf_r+0x1bc>
 8030776:	ab03      	add	r3, sp, #12
 8030778:	9300      	str	r3, [sp, #0]
 803077a:	462a      	mov	r2, r5
 803077c:	4b12      	ldr	r3, [pc, #72]	; (80307c8 <_vfiprintf_r+0x22c>)
 803077e:	a904      	add	r1, sp, #16
 8030780:	4630      	mov	r0, r6
 8030782:	f7fb ff7b 	bl	802c67c <_printf_float>
 8030786:	4607      	mov	r7, r0
 8030788:	1c78      	adds	r0, r7, #1
 803078a:	d1d6      	bne.n	803073a <_vfiprintf_r+0x19e>
 803078c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803078e:	07d9      	lsls	r1, r3, #31
 8030790:	d405      	bmi.n	803079e <_vfiprintf_r+0x202>
 8030792:	89ab      	ldrh	r3, [r5, #12]
 8030794:	059a      	lsls	r2, r3, #22
 8030796:	d402      	bmi.n	803079e <_vfiprintf_r+0x202>
 8030798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 803079a:	f7fd f97b 	bl	802da94 <__retarget_lock_release_recursive>
 803079e:	89ab      	ldrh	r3, [r5, #12]
 80307a0:	065b      	lsls	r3, r3, #25
 80307a2:	f53f af1d 	bmi.w	80305e0 <_vfiprintf_r+0x44>
 80307a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80307a8:	e71c      	b.n	80305e4 <_vfiprintf_r+0x48>
 80307aa:	ab03      	add	r3, sp, #12
 80307ac:	9300      	str	r3, [sp, #0]
 80307ae:	462a      	mov	r2, r5
 80307b0:	4b05      	ldr	r3, [pc, #20]	; (80307c8 <_vfiprintf_r+0x22c>)
 80307b2:	a904      	add	r1, sp, #16
 80307b4:	4630      	mov	r0, r6
 80307b6:	f7fc fa05 	bl	802cbc4 <_printf_i>
 80307ba:	e7e4      	b.n	8030786 <_vfiprintf_r+0x1ea>
 80307bc:	08034c59 	.word	0x08034c59
 80307c0:	08034c63 	.word	0x08034c63
 80307c4:	0802c67d 	.word	0x0802c67d
 80307c8:	08030577 	.word	0x08030577
 80307cc:	08034c5f 	.word	0x08034c5f

080307d0 <_scanf_chars>:
 80307d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80307d4:	4615      	mov	r5, r2
 80307d6:	688a      	ldr	r2, [r1, #8]
 80307d8:	4680      	mov	r8, r0
 80307da:	460c      	mov	r4, r1
 80307dc:	b932      	cbnz	r2, 80307ec <_scanf_chars+0x1c>
 80307de:	698a      	ldr	r2, [r1, #24]
 80307e0:	2a00      	cmp	r2, #0
 80307e2:	bf0c      	ite	eq
 80307e4:	2201      	moveq	r2, #1
 80307e6:	f04f 32ff 	movne.w	r2, #4294967295
 80307ea:	608a      	str	r2, [r1, #8]
 80307ec:	6822      	ldr	r2, [r4, #0]
 80307ee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8030880 <_scanf_chars+0xb0>
 80307f2:	06d1      	lsls	r1, r2, #27
 80307f4:	bf5f      	itttt	pl
 80307f6:	681a      	ldrpl	r2, [r3, #0]
 80307f8:	1d11      	addpl	r1, r2, #4
 80307fa:	6019      	strpl	r1, [r3, #0]
 80307fc:	6816      	ldrpl	r6, [r2, #0]
 80307fe:	2700      	movs	r7, #0
 8030800:	69a0      	ldr	r0, [r4, #24]
 8030802:	b188      	cbz	r0, 8030828 <_scanf_chars+0x58>
 8030804:	2801      	cmp	r0, #1
 8030806:	d107      	bne.n	8030818 <_scanf_chars+0x48>
 8030808:	682a      	ldr	r2, [r5, #0]
 803080a:	7811      	ldrb	r1, [r2, #0]
 803080c:	6962      	ldr	r2, [r4, #20]
 803080e:	5c52      	ldrb	r2, [r2, r1]
 8030810:	b952      	cbnz	r2, 8030828 <_scanf_chars+0x58>
 8030812:	2f00      	cmp	r7, #0
 8030814:	d031      	beq.n	803087a <_scanf_chars+0xaa>
 8030816:	e022      	b.n	803085e <_scanf_chars+0x8e>
 8030818:	2802      	cmp	r0, #2
 803081a:	d120      	bne.n	803085e <_scanf_chars+0x8e>
 803081c:	682b      	ldr	r3, [r5, #0]
 803081e:	781b      	ldrb	r3, [r3, #0]
 8030820:	f819 3003 	ldrb.w	r3, [r9, r3]
 8030824:	071b      	lsls	r3, r3, #28
 8030826:	d41a      	bmi.n	803085e <_scanf_chars+0x8e>
 8030828:	6823      	ldr	r3, [r4, #0]
 803082a:	06da      	lsls	r2, r3, #27
 803082c:	bf5e      	ittt	pl
 803082e:	682b      	ldrpl	r3, [r5, #0]
 8030830:	781b      	ldrbpl	r3, [r3, #0]
 8030832:	f806 3b01 	strbpl.w	r3, [r6], #1
 8030836:	682a      	ldr	r2, [r5, #0]
 8030838:	686b      	ldr	r3, [r5, #4]
 803083a:	3201      	adds	r2, #1
 803083c:	602a      	str	r2, [r5, #0]
 803083e:	68a2      	ldr	r2, [r4, #8]
 8030840:	3b01      	subs	r3, #1
 8030842:	3a01      	subs	r2, #1
 8030844:	606b      	str	r3, [r5, #4]
 8030846:	3701      	adds	r7, #1
 8030848:	60a2      	str	r2, [r4, #8]
 803084a:	b142      	cbz	r2, 803085e <_scanf_chars+0x8e>
 803084c:	2b00      	cmp	r3, #0
 803084e:	dcd7      	bgt.n	8030800 <_scanf_chars+0x30>
 8030850:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030854:	4629      	mov	r1, r5
 8030856:	4640      	mov	r0, r8
 8030858:	4798      	blx	r3
 803085a:	2800      	cmp	r0, #0
 803085c:	d0d0      	beq.n	8030800 <_scanf_chars+0x30>
 803085e:	6823      	ldr	r3, [r4, #0]
 8030860:	f013 0310 	ands.w	r3, r3, #16
 8030864:	d105      	bne.n	8030872 <_scanf_chars+0xa2>
 8030866:	68e2      	ldr	r2, [r4, #12]
 8030868:	3201      	adds	r2, #1
 803086a:	60e2      	str	r2, [r4, #12]
 803086c:	69a2      	ldr	r2, [r4, #24]
 803086e:	b102      	cbz	r2, 8030872 <_scanf_chars+0xa2>
 8030870:	7033      	strb	r3, [r6, #0]
 8030872:	6923      	ldr	r3, [r4, #16]
 8030874:	443b      	add	r3, r7
 8030876:	6123      	str	r3, [r4, #16]
 8030878:	2000      	movs	r0, #0
 803087a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 803087e:	bf00      	nop
 8030880:	08034b59 	.word	0x08034b59

08030884 <_scanf_i>:
 8030884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030888:	4698      	mov	r8, r3
 803088a:	4b74      	ldr	r3, [pc, #464]	; (8030a5c <_scanf_i+0x1d8>)
 803088c:	460c      	mov	r4, r1
 803088e:	4682      	mov	sl, r0
 8030890:	4616      	mov	r6, r2
 8030892:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030896:	b087      	sub	sp, #28
 8030898:	ab03      	add	r3, sp, #12
 803089a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 803089e:	4b70      	ldr	r3, [pc, #448]	; (8030a60 <_scanf_i+0x1dc>)
 80308a0:	69a1      	ldr	r1, [r4, #24]
 80308a2:	4a70      	ldr	r2, [pc, #448]	; (8030a64 <_scanf_i+0x1e0>)
 80308a4:	2903      	cmp	r1, #3
 80308a6:	bf18      	it	ne
 80308a8:	461a      	movne	r2, r3
 80308aa:	68a3      	ldr	r3, [r4, #8]
 80308ac:	9201      	str	r2, [sp, #4]
 80308ae:	1e5a      	subs	r2, r3, #1
 80308b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80308b4:	bf88      	it	hi
 80308b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80308ba:	4627      	mov	r7, r4
 80308bc:	bf82      	ittt	hi
 80308be:	eb03 0905 	addhi.w	r9, r3, r5
 80308c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80308c6:	60a3      	strhi	r3, [r4, #8]
 80308c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80308cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80308d0:	bf98      	it	ls
 80308d2:	f04f 0900 	movls.w	r9, #0
 80308d6:	6023      	str	r3, [r4, #0]
 80308d8:	463d      	mov	r5, r7
 80308da:	f04f 0b00 	mov.w	fp, #0
 80308de:	6831      	ldr	r1, [r6, #0]
 80308e0:	ab03      	add	r3, sp, #12
 80308e2:	7809      	ldrb	r1, [r1, #0]
 80308e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80308e8:	2202      	movs	r2, #2
 80308ea:	f7df fc89 	bl	8010200 <memchr>
 80308ee:	b328      	cbz	r0, 803093c <_scanf_i+0xb8>
 80308f0:	f1bb 0f01 	cmp.w	fp, #1
 80308f4:	d159      	bne.n	80309aa <_scanf_i+0x126>
 80308f6:	6862      	ldr	r2, [r4, #4]
 80308f8:	b92a      	cbnz	r2, 8030906 <_scanf_i+0x82>
 80308fa:	6822      	ldr	r2, [r4, #0]
 80308fc:	2308      	movs	r3, #8
 80308fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030902:	6063      	str	r3, [r4, #4]
 8030904:	6022      	str	r2, [r4, #0]
 8030906:	6822      	ldr	r2, [r4, #0]
 8030908:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 803090c:	6022      	str	r2, [r4, #0]
 803090e:	68a2      	ldr	r2, [r4, #8]
 8030910:	1e51      	subs	r1, r2, #1
 8030912:	60a1      	str	r1, [r4, #8]
 8030914:	b192      	cbz	r2, 803093c <_scanf_i+0xb8>
 8030916:	6832      	ldr	r2, [r6, #0]
 8030918:	1c51      	adds	r1, r2, #1
 803091a:	6031      	str	r1, [r6, #0]
 803091c:	7812      	ldrb	r2, [r2, #0]
 803091e:	f805 2b01 	strb.w	r2, [r5], #1
 8030922:	6872      	ldr	r2, [r6, #4]
 8030924:	3a01      	subs	r2, #1
 8030926:	2a00      	cmp	r2, #0
 8030928:	6072      	str	r2, [r6, #4]
 803092a:	dc07      	bgt.n	803093c <_scanf_i+0xb8>
 803092c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8030930:	4631      	mov	r1, r6
 8030932:	4650      	mov	r0, sl
 8030934:	4790      	blx	r2
 8030936:	2800      	cmp	r0, #0
 8030938:	f040 8085 	bne.w	8030a46 <_scanf_i+0x1c2>
 803093c:	f10b 0b01 	add.w	fp, fp, #1
 8030940:	f1bb 0f03 	cmp.w	fp, #3
 8030944:	d1cb      	bne.n	80308de <_scanf_i+0x5a>
 8030946:	6863      	ldr	r3, [r4, #4]
 8030948:	b90b      	cbnz	r3, 803094e <_scanf_i+0xca>
 803094a:	230a      	movs	r3, #10
 803094c:	6063      	str	r3, [r4, #4]
 803094e:	6863      	ldr	r3, [r4, #4]
 8030950:	4945      	ldr	r1, [pc, #276]	; (8030a68 <_scanf_i+0x1e4>)
 8030952:	6960      	ldr	r0, [r4, #20]
 8030954:	1ac9      	subs	r1, r1, r3
 8030956:	f000 f999 	bl	8030c8c <__sccl>
 803095a:	f04f 0b00 	mov.w	fp, #0
 803095e:	68a3      	ldr	r3, [r4, #8]
 8030960:	6822      	ldr	r2, [r4, #0]
 8030962:	2b00      	cmp	r3, #0
 8030964:	d03d      	beq.n	80309e2 <_scanf_i+0x15e>
 8030966:	6831      	ldr	r1, [r6, #0]
 8030968:	6960      	ldr	r0, [r4, #20]
 803096a:	f891 c000 	ldrb.w	ip, [r1]
 803096e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8030972:	2800      	cmp	r0, #0
 8030974:	d035      	beq.n	80309e2 <_scanf_i+0x15e>
 8030976:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 803097a:	d124      	bne.n	80309c6 <_scanf_i+0x142>
 803097c:	0510      	lsls	r0, r2, #20
 803097e:	d522      	bpl.n	80309c6 <_scanf_i+0x142>
 8030980:	f10b 0b01 	add.w	fp, fp, #1
 8030984:	f1b9 0f00 	cmp.w	r9, #0
 8030988:	d003      	beq.n	8030992 <_scanf_i+0x10e>
 803098a:	3301      	adds	r3, #1
 803098c:	f109 39ff 	add.w	r9, r9, #4294967295
 8030990:	60a3      	str	r3, [r4, #8]
 8030992:	6873      	ldr	r3, [r6, #4]
 8030994:	3b01      	subs	r3, #1
 8030996:	2b00      	cmp	r3, #0
 8030998:	6073      	str	r3, [r6, #4]
 803099a:	dd1b      	ble.n	80309d4 <_scanf_i+0x150>
 803099c:	6833      	ldr	r3, [r6, #0]
 803099e:	3301      	adds	r3, #1
 80309a0:	6033      	str	r3, [r6, #0]
 80309a2:	68a3      	ldr	r3, [r4, #8]
 80309a4:	3b01      	subs	r3, #1
 80309a6:	60a3      	str	r3, [r4, #8]
 80309a8:	e7d9      	b.n	803095e <_scanf_i+0xda>
 80309aa:	f1bb 0f02 	cmp.w	fp, #2
 80309ae:	d1ae      	bne.n	803090e <_scanf_i+0x8a>
 80309b0:	6822      	ldr	r2, [r4, #0]
 80309b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80309b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80309ba:	d1bf      	bne.n	803093c <_scanf_i+0xb8>
 80309bc:	2310      	movs	r3, #16
 80309be:	6063      	str	r3, [r4, #4]
 80309c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80309c4:	e7a2      	b.n	803090c <_scanf_i+0x88>
 80309c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80309ca:	6022      	str	r2, [r4, #0]
 80309cc:	780b      	ldrb	r3, [r1, #0]
 80309ce:	f805 3b01 	strb.w	r3, [r5], #1
 80309d2:	e7de      	b.n	8030992 <_scanf_i+0x10e>
 80309d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80309d8:	4631      	mov	r1, r6
 80309da:	4650      	mov	r0, sl
 80309dc:	4798      	blx	r3
 80309de:	2800      	cmp	r0, #0
 80309e0:	d0df      	beq.n	80309a2 <_scanf_i+0x11e>
 80309e2:	6823      	ldr	r3, [r4, #0]
 80309e4:	05d9      	lsls	r1, r3, #23
 80309e6:	d50d      	bpl.n	8030a04 <_scanf_i+0x180>
 80309e8:	42bd      	cmp	r5, r7
 80309ea:	d909      	bls.n	8030a00 <_scanf_i+0x17c>
 80309ec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80309f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80309f4:	4632      	mov	r2, r6
 80309f6:	4650      	mov	r0, sl
 80309f8:	4798      	blx	r3
 80309fa:	f105 39ff 	add.w	r9, r5, #4294967295
 80309fe:	464d      	mov	r5, r9
 8030a00:	42bd      	cmp	r5, r7
 8030a02:	d028      	beq.n	8030a56 <_scanf_i+0x1d2>
 8030a04:	6822      	ldr	r2, [r4, #0]
 8030a06:	f012 0210 	ands.w	r2, r2, #16
 8030a0a:	d113      	bne.n	8030a34 <_scanf_i+0x1b0>
 8030a0c:	702a      	strb	r2, [r5, #0]
 8030a0e:	6863      	ldr	r3, [r4, #4]
 8030a10:	9e01      	ldr	r6, [sp, #4]
 8030a12:	4639      	mov	r1, r7
 8030a14:	4650      	mov	r0, sl
 8030a16:	47b0      	blx	r6
 8030a18:	f8d8 3000 	ldr.w	r3, [r8]
 8030a1c:	6821      	ldr	r1, [r4, #0]
 8030a1e:	1d1a      	adds	r2, r3, #4
 8030a20:	f8c8 2000 	str.w	r2, [r8]
 8030a24:	f011 0f20 	tst.w	r1, #32
 8030a28:	681b      	ldr	r3, [r3, #0]
 8030a2a:	d00f      	beq.n	8030a4c <_scanf_i+0x1c8>
 8030a2c:	6018      	str	r0, [r3, #0]
 8030a2e:	68e3      	ldr	r3, [r4, #12]
 8030a30:	3301      	adds	r3, #1
 8030a32:	60e3      	str	r3, [r4, #12]
 8030a34:	6923      	ldr	r3, [r4, #16]
 8030a36:	1bed      	subs	r5, r5, r7
 8030a38:	445d      	add	r5, fp
 8030a3a:	442b      	add	r3, r5
 8030a3c:	6123      	str	r3, [r4, #16]
 8030a3e:	2000      	movs	r0, #0
 8030a40:	b007      	add	sp, #28
 8030a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030a46:	f04f 0b00 	mov.w	fp, #0
 8030a4a:	e7ca      	b.n	80309e2 <_scanf_i+0x15e>
 8030a4c:	07ca      	lsls	r2, r1, #31
 8030a4e:	bf4c      	ite	mi
 8030a50:	8018      	strhmi	r0, [r3, #0]
 8030a52:	6018      	strpl	r0, [r3, #0]
 8030a54:	e7eb      	b.n	8030a2e <_scanf_i+0x1aa>
 8030a56:	2001      	movs	r0, #1
 8030a58:	e7f2      	b.n	8030a40 <_scanf_i+0x1bc>
 8030a5a:	bf00      	nop
 8030a5c:	08033cfc 	.word	0x08033cfc
 8030a60:	08031665 	.word	0x08031665
 8030a64:	0802fef1 	.word	0x0802fef1
 8030a68:	08034c7a 	.word	0x08034c7a

08030a6c <__sflush_r>:
 8030a6c:	898a      	ldrh	r2, [r1, #12]
 8030a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030a72:	4605      	mov	r5, r0
 8030a74:	0710      	lsls	r0, r2, #28
 8030a76:	460c      	mov	r4, r1
 8030a78:	d458      	bmi.n	8030b2c <__sflush_r+0xc0>
 8030a7a:	684b      	ldr	r3, [r1, #4]
 8030a7c:	2b00      	cmp	r3, #0
 8030a7e:	dc05      	bgt.n	8030a8c <__sflush_r+0x20>
 8030a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030a82:	2b00      	cmp	r3, #0
 8030a84:	dc02      	bgt.n	8030a8c <__sflush_r+0x20>
 8030a86:	2000      	movs	r0, #0
 8030a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030a8e:	2e00      	cmp	r6, #0
 8030a90:	d0f9      	beq.n	8030a86 <__sflush_r+0x1a>
 8030a92:	2300      	movs	r3, #0
 8030a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030a98:	682f      	ldr	r7, [r5, #0]
 8030a9a:	6a21      	ldr	r1, [r4, #32]
 8030a9c:	602b      	str	r3, [r5, #0]
 8030a9e:	d032      	beq.n	8030b06 <__sflush_r+0x9a>
 8030aa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030aa2:	89a3      	ldrh	r3, [r4, #12]
 8030aa4:	075a      	lsls	r2, r3, #29
 8030aa6:	d505      	bpl.n	8030ab4 <__sflush_r+0x48>
 8030aa8:	6863      	ldr	r3, [r4, #4]
 8030aaa:	1ac0      	subs	r0, r0, r3
 8030aac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030aae:	b10b      	cbz	r3, 8030ab4 <__sflush_r+0x48>
 8030ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030ab2:	1ac0      	subs	r0, r0, r3
 8030ab4:	2300      	movs	r3, #0
 8030ab6:	4602      	mov	r2, r0
 8030ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030aba:	6a21      	ldr	r1, [r4, #32]
 8030abc:	4628      	mov	r0, r5
 8030abe:	47b0      	blx	r6
 8030ac0:	1c43      	adds	r3, r0, #1
 8030ac2:	89a3      	ldrh	r3, [r4, #12]
 8030ac4:	d106      	bne.n	8030ad4 <__sflush_r+0x68>
 8030ac6:	6829      	ldr	r1, [r5, #0]
 8030ac8:	291d      	cmp	r1, #29
 8030aca:	d82b      	bhi.n	8030b24 <__sflush_r+0xb8>
 8030acc:	4a29      	ldr	r2, [pc, #164]	; (8030b74 <__sflush_r+0x108>)
 8030ace:	410a      	asrs	r2, r1
 8030ad0:	07d6      	lsls	r6, r2, #31
 8030ad2:	d427      	bmi.n	8030b24 <__sflush_r+0xb8>
 8030ad4:	2200      	movs	r2, #0
 8030ad6:	6062      	str	r2, [r4, #4]
 8030ad8:	04d9      	lsls	r1, r3, #19
 8030ada:	6922      	ldr	r2, [r4, #16]
 8030adc:	6022      	str	r2, [r4, #0]
 8030ade:	d504      	bpl.n	8030aea <__sflush_r+0x7e>
 8030ae0:	1c42      	adds	r2, r0, #1
 8030ae2:	d101      	bne.n	8030ae8 <__sflush_r+0x7c>
 8030ae4:	682b      	ldr	r3, [r5, #0]
 8030ae6:	b903      	cbnz	r3, 8030aea <__sflush_r+0x7e>
 8030ae8:	6560      	str	r0, [r4, #84]	; 0x54
 8030aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030aec:	602f      	str	r7, [r5, #0]
 8030aee:	2900      	cmp	r1, #0
 8030af0:	d0c9      	beq.n	8030a86 <__sflush_r+0x1a>
 8030af2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030af6:	4299      	cmp	r1, r3
 8030af8:	d002      	beq.n	8030b00 <__sflush_r+0x94>
 8030afa:	4628      	mov	r0, r5
 8030afc:	f7fd fe6a 	bl	802e7d4 <_free_r>
 8030b00:	2000      	movs	r0, #0
 8030b02:	6360      	str	r0, [r4, #52]	; 0x34
 8030b04:	e7c0      	b.n	8030a88 <__sflush_r+0x1c>
 8030b06:	2301      	movs	r3, #1
 8030b08:	4628      	mov	r0, r5
 8030b0a:	47b0      	blx	r6
 8030b0c:	1c41      	adds	r1, r0, #1
 8030b0e:	d1c8      	bne.n	8030aa2 <__sflush_r+0x36>
 8030b10:	682b      	ldr	r3, [r5, #0]
 8030b12:	2b00      	cmp	r3, #0
 8030b14:	d0c5      	beq.n	8030aa2 <__sflush_r+0x36>
 8030b16:	2b1d      	cmp	r3, #29
 8030b18:	d001      	beq.n	8030b1e <__sflush_r+0xb2>
 8030b1a:	2b16      	cmp	r3, #22
 8030b1c:	d101      	bne.n	8030b22 <__sflush_r+0xb6>
 8030b1e:	602f      	str	r7, [r5, #0]
 8030b20:	e7b1      	b.n	8030a86 <__sflush_r+0x1a>
 8030b22:	89a3      	ldrh	r3, [r4, #12]
 8030b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030b28:	81a3      	strh	r3, [r4, #12]
 8030b2a:	e7ad      	b.n	8030a88 <__sflush_r+0x1c>
 8030b2c:	690f      	ldr	r7, [r1, #16]
 8030b2e:	2f00      	cmp	r7, #0
 8030b30:	d0a9      	beq.n	8030a86 <__sflush_r+0x1a>
 8030b32:	0793      	lsls	r3, r2, #30
 8030b34:	680e      	ldr	r6, [r1, #0]
 8030b36:	bf08      	it	eq
 8030b38:	694b      	ldreq	r3, [r1, #20]
 8030b3a:	600f      	str	r7, [r1, #0]
 8030b3c:	bf18      	it	ne
 8030b3e:	2300      	movne	r3, #0
 8030b40:	eba6 0807 	sub.w	r8, r6, r7
 8030b44:	608b      	str	r3, [r1, #8]
 8030b46:	f1b8 0f00 	cmp.w	r8, #0
 8030b4a:	dd9c      	ble.n	8030a86 <__sflush_r+0x1a>
 8030b4c:	6a21      	ldr	r1, [r4, #32]
 8030b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030b50:	4643      	mov	r3, r8
 8030b52:	463a      	mov	r2, r7
 8030b54:	4628      	mov	r0, r5
 8030b56:	47b0      	blx	r6
 8030b58:	2800      	cmp	r0, #0
 8030b5a:	dc06      	bgt.n	8030b6a <__sflush_r+0xfe>
 8030b5c:	89a3      	ldrh	r3, [r4, #12]
 8030b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030b62:	81a3      	strh	r3, [r4, #12]
 8030b64:	f04f 30ff 	mov.w	r0, #4294967295
 8030b68:	e78e      	b.n	8030a88 <__sflush_r+0x1c>
 8030b6a:	4407      	add	r7, r0
 8030b6c:	eba8 0800 	sub.w	r8, r8, r0
 8030b70:	e7e9      	b.n	8030b46 <__sflush_r+0xda>
 8030b72:	bf00      	nop
 8030b74:	dfbffffe 	.word	0xdfbffffe

08030b78 <_fflush_r>:
 8030b78:	b538      	push	{r3, r4, r5, lr}
 8030b7a:	690b      	ldr	r3, [r1, #16]
 8030b7c:	4605      	mov	r5, r0
 8030b7e:	460c      	mov	r4, r1
 8030b80:	b913      	cbnz	r3, 8030b88 <_fflush_r+0x10>
 8030b82:	2500      	movs	r5, #0
 8030b84:	4628      	mov	r0, r5
 8030b86:	bd38      	pop	{r3, r4, r5, pc}
 8030b88:	b118      	cbz	r0, 8030b92 <_fflush_r+0x1a>
 8030b8a:	6a03      	ldr	r3, [r0, #32]
 8030b8c:	b90b      	cbnz	r3, 8030b92 <_fflush_r+0x1a>
 8030b8e:	f7fc fbd7 	bl	802d340 <__sinit>
 8030b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030b96:	2b00      	cmp	r3, #0
 8030b98:	d0f3      	beq.n	8030b82 <_fflush_r+0xa>
 8030b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030b9c:	07d0      	lsls	r0, r2, #31
 8030b9e:	d404      	bmi.n	8030baa <_fflush_r+0x32>
 8030ba0:	0599      	lsls	r1, r3, #22
 8030ba2:	d402      	bmi.n	8030baa <_fflush_r+0x32>
 8030ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030ba6:	f7fc ff74 	bl	802da92 <__retarget_lock_acquire_recursive>
 8030baa:	4628      	mov	r0, r5
 8030bac:	4621      	mov	r1, r4
 8030bae:	f7ff ff5d 	bl	8030a6c <__sflush_r>
 8030bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030bb4:	07da      	lsls	r2, r3, #31
 8030bb6:	4605      	mov	r5, r0
 8030bb8:	d4e4      	bmi.n	8030b84 <_fflush_r+0xc>
 8030bba:	89a3      	ldrh	r3, [r4, #12]
 8030bbc:	059b      	lsls	r3, r3, #22
 8030bbe:	d4e1      	bmi.n	8030b84 <_fflush_r+0xc>
 8030bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030bc2:	f7fc ff67 	bl	802da94 <__retarget_lock_release_recursive>
 8030bc6:	e7dd      	b.n	8030b84 <_fflush_r+0xc>

08030bc8 <__swhatbuf_r>:
 8030bc8:	b570      	push	{r4, r5, r6, lr}
 8030bca:	460c      	mov	r4, r1
 8030bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030bd0:	2900      	cmp	r1, #0
 8030bd2:	b096      	sub	sp, #88	; 0x58
 8030bd4:	4615      	mov	r5, r2
 8030bd6:	461e      	mov	r6, r3
 8030bd8:	da0d      	bge.n	8030bf6 <__swhatbuf_r+0x2e>
 8030bda:	89a3      	ldrh	r3, [r4, #12]
 8030bdc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030be0:	f04f 0100 	mov.w	r1, #0
 8030be4:	bf0c      	ite	eq
 8030be6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8030bea:	2340      	movne	r3, #64	; 0x40
 8030bec:	2000      	movs	r0, #0
 8030bee:	6031      	str	r1, [r6, #0]
 8030bf0:	602b      	str	r3, [r5, #0]
 8030bf2:	b016      	add	sp, #88	; 0x58
 8030bf4:	bd70      	pop	{r4, r5, r6, pc}
 8030bf6:	466a      	mov	r2, sp
 8030bf8:	f000 f8ec 	bl	8030dd4 <_fstat_r>
 8030bfc:	2800      	cmp	r0, #0
 8030bfe:	dbec      	blt.n	8030bda <__swhatbuf_r+0x12>
 8030c00:	9901      	ldr	r1, [sp, #4]
 8030c02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8030c06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8030c0a:	4259      	negs	r1, r3
 8030c0c:	4159      	adcs	r1, r3
 8030c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030c12:	e7eb      	b.n	8030bec <__swhatbuf_r+0x24>

08030c14 <__smakebuf_r>:
 8030c14:	898b      	ldrh	r3, [r1, #12]
 8030c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030c18:	079d      	lsls	r5, r3, #30
 8030c1a:	4606      	mov	r6, r0
 8030c1c:	460c      	mov	r4, r1
 8030c1e:	d507      	bpl.n	8030c30 <__smakebuf_r+0x1c>
 8030c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8030c24:	6023      	str	r3, [r4, #0]
 8030c26:	6123      	str	r3, [r4, #16]
 8030c28:	2301      	movs	r3, #1
 8030c2a:	6163      	str	r3, [r4, #20]
 8030c2c:	b002      	add	sp, #8
 8030c2e:	bd70      	pop	{r4, r5, r6, pc}
 8030c30:	ab01      	add	r3, sp, #4
 8030c32:	466a      	mov	r2, sp
 8030c34:	f7ff ffc8 	bl	8030bc8 <__swhatbuf_r>
 8030c38:	9900      	ldr	r1, [sp, #0]
 8030c3a:	4605      	mov	r5, r0
 8030c3c:	4630      	mov	r0, r6
 8030c3e:	f7fb fbf1 	bl	802c424 <_malloc_r>
 8030c42:	b948      	cbnz	r0, 8030c58 <__smakebuf_r+0x44>
 8030c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030c48:	059a      	lsls	r2, r3, #22
 8030c4a:	d4ef      	bmi.n	8030c2c <__smakebuf_r+0x18>
 8030c4c:	f023 0303 	bic.w	r3, r3, #3
 8030c50:	f043 0302 	orr.w	r3, r3, #2
 8030c54:	81a3      	strh	r3, [r4, #12]
 8030c56:	e7e3      	b.n	8030c20 <__smakebuf_r+0xc>
 8030c58:	89a3      	ldrh	r3, [r4, #12]
 8030c5a:	6020      	str	r0, [r4, #0]
 8030c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8030c60:	81a3      	strh	r3, [r4, #12]
 8030c62:	9b00      	ldr	r3, [sp, #0]
 8030c64:	6163      	str	r3, [r4, #20]
 8030c66:	9b01      	ldr	r3, [sp, #4]
 8030c68:	6120      	str	r0, [r4, #16]
 8030c6a:	b15b      	cbz	r3, 8030c84 <__smakebuf_r+0x70>
 8030c6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8030c70:	4630      	mov	r0, r6
 8030c72:	f000 f8c1 	bl	8030df8 <_isatty_r>
 8030c76:	b128      	cbz	r0, 8030c84 <__smakebuf_r+0x70>
 8030c78:	89a3      	ldrh	r3, [r4, #12]
 8030c7a:	f023 0303 	bic.w	r3, r3, #3
 8030c7e:	f043 0301 	orr.w	r3, r3, #1
 8030c82:	81a3      	strh	r3, [r4, #12]
 8030c84:	89a3      	ldrh	r3, [r4, #12]
 8030c86:	431d      	orrs	r5, r3
 8030c88:	81a5      	strh	r5, [r4, #12]
 8030c8a:	e7cf      	b.n	8030c2c <__smakebuf_r+0x18>

08030c8c <__sccl>:
 8030c8c:	b570      	push	{r4, r5, r6, lr}
 8030c8e:	780b      	ldrb	r3, [r1, #0]
 8030c90:	4604      	mov	r4, r0
 8030c92:	2b5e      	cmp	r3, #94	; 0x5e
 8030c94:	bf0b      	itete	eq
 8030c96:	784b      	ldrbeq	r3, [r1, #1]
 8030c98:	1c4a      	addne	r2, r1, #1
 8030c9a:	1c8a      	addeq	r2, r1, #2
 8030c9c:	2100      	movne	r1, #0
 8030c9e:	bf08      	it	eq
 8030ca0:	2101      	moveq	r1, #1
 8030ca2:	3801      	subs	r0, #1
 8030ca4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8030ca8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8030cac:	42a8      	cmp	r0, r5
 8030cae:	d1fb      	bne.n	8030ca8 <__sccl+0x1c>
 8030cb0:	b90b      	cbnz	r3, 8030cb6 <__sccl+0x2a>
 8030cb2:	1e50      	subs	r0, r2, #1
 8030cb4:	bd70      	pop	{r4, r5, r6, pc}
 8030cb6:	f081 0101 	eor.w	r1, r1, #1
 8030cba:	54e1      	strb	r1, [r4, r3]
 8030cbc:	4610      	mov	r0, r2
 8030cbe:	4602      	mov	r2, r0
 8030cc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8030cc4:	2d2d      	cmp	r5, #45	; 0x2d
 8030cc6:	d005      	beq.n	8030cd4 <__sccl+0x48>
 8030cc8:	2d5d      	cmp	r5, #93	; 0x5d
 8030cca:	d016      	beq.n	8030cfa <__sccl+0x6e>
 8030ccc:	2d00      	cmp	r5, #0
 8030cce:	d0f1      	beq.n	8030cb4 <__sccl+0x28>
 8030cd0:	462b      	mov	r3, r5
 8030cd2:	e7f2      	b.n	8030cba <__sccl+0x2e>
 8030cd4:	7846      	ldrb	r6, [r0, #1]
 8030cd6:	2e5d      	cmp	r6, #93	; 0x5d
 8030cd8:	d0fa      	beq.n	8030cd0 <__sccl+0x44>
 8030cda:	42b3      	cmp	r3, r6
 8030cdc:	dcf8      	bgt.n	8030cd0 <__sccl+0x44>
 8030cde:	3002      	adds	r0, #2
 8030ce0:	461a      	mov	r2, r3
 8030ce2:	3201      	adds	r2, #1
 8030ce4:	4296      	cmp	r6, r2
 8030ce6:	54a1      	strb	r1, [r4, r2]
 8030ce8:	dcfb      	bgt.n	8030ce2 <__sccl+0x56>
 8030cea:	1af2      	subs	r2, r6, r3
 8030cec:	3a01      	subs	r2, #1
 8030cee:	1c5d      	adds	r5, r3, #1
 8030cf0:	42b3      	cmp	r3, r6
 8030cf2:	bfa8      	it	ge
 8030cf4:	2200      	movge	r2, #0
 8030cf6:	18ab      	adds	r3, r5, r2
 8030cf8:	e7e1      	b.n	8030cbe <__sccl+0x32>
 8030cfa:	4610      	mov	r0, r2
 8030cfc:	e7da      	b.n	8030cb4 <__sccl+0x28>

08030cfe <__submore>:
 8030cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030d02:	460c      	mov	r4, r1
 8030d04:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8030d06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030d0a:	4299      	cmp	r1, r3
 8030d0c:	d11d      	bne.n	8030d4a <__submore+0x4c>
 8030d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8030d12:	f7fb fb87 	bl	802c424 <_malloc_r>
 8030d16:	b918      	cbnz	r0, 8030d20 <__submore+0x22>
 8030d18:	f04f 30ff 	mov.w	r0, #4294967295
 8030d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030d24:	63a3      	str	r3, [r4, #56]	; 0x38
 8030d26:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8030d2a:	6360      	str	r0, [r4, #52]	; 0x34
 8030d2c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8030d30:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8030d34:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8030d38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8030d3c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8030d40:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8030d44:	6020      	str	r0, [r4, #0]
 8030d46:	2000      	movs	r0, #0
 8030d48:	e7e8      	b.n	8030d1c <__submore+0x1e>
 8030d4a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8030d4c:	0077      	lsls	r7, r6, #1
 8030d4e:	463a      	mov	r2, r7
 8030d50:	f000 fbe7 	bl	8031522 <_realloc_r>
 8030d54:	4605      	mov	r5, r0
 8030d56:	2800      	cmp	r0, #0
 8030d58:	d0de      	beq.n	8030d18 <__submore+0x1a>
 8030d5a:	eb00 0806 	add.w	r8, r0, r6
 8030d5e:	4601      	mov	r1, r0
 8030d60:	4632      	mov	r2, r6
 8030d62:	4640      	mov	r0, r8
 8030d64:	f7fc fe9f 	bl	802daa6 <memcpy>
 8030d68:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8030d6c:	f8c4 8000 	str.w	r8, [r4]
 8030d70:	e7e9      	b.n	8030d46 <__submore+0x48>

08030d72 <_raise_r>:
 8030d72:	291f      	cmp	r1, #31
 8030d74:	b538      	push	{r3, r4, r5, lr}
 8030d76:	4604      	mov	r4, r0
 8030d78:	460d      	mov	r5, r1
 8030d7a:	d904      	bls.n	8030d86 <_raise_r+0x14>
 8030d7c:	2316      	movs	r3, #22
 8030d7e:	6003      	str	r3, [r0, #0]
 8030d80:	f04f 30ff 	mov.w	r0, #4294967295
 8030d84:	bd38      	pop	{r3, r4, r5, pc}
 8030d86:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8030d88:	b112      	cbz	r2, 8030d90 <_raise_r+0x1e>
 8030d8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8030d8e:	b94b      	cbnz	r3, 8030da4 <_raise_r+0x32>
 8030d90:	4620      	mov	r0, r4
 8030d92:	f000 f853 	bl	8030e3c <_getpid_r>
 8030d96:	462a      	mov	r2, r5
 8030d98:	4601      	mov	r1, r0
 8030d9a:	4620      	mov	r0, r4
 8030d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8030da0:	f000 b83a 	b.w	8030e18 <_kill_r>
 8030da4:	2b01      	cmp	r3, #1
 8030da6:	d00a      	beq.n	8030dbe <_raise_r+0x4c>
 8030da8:	1c59      	adds	r1, r3, #1
 8030daa:	d103      	bne.n	8030db4 <_raise_r+0x42>
 8030dac:	2316      	movs	r3, #22
 8030dae:	6003      	str	r3, [r0, #0]
 8030db0:	2001      	movs	r0, #1
 8030db2:	e7e7      	b.n	8030d84 <_raise_r+0x12>
 8030db4:	2400      	movs	r4, #0
 8030db6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8030dba:	4628      	mov	r0, r5
 8030dbc:	4798      	blx	r3
 8030dbe:	2000      	movs	r0, #0
 8030dc0:	e7e0      	b.n	8030d84 <_raise_r+0x12>
	...

08030dc4 <raise>:
 8030dc4:	4b02      	ldr	r3, [pc, #8]	; (8030dd0 <raise+0xc>)
 8030dc6:	4601      	mov	r1, r0
 8030dc8:	6818      	ldr	r0, [r3, #0]
 8030dca:	f7ff bfd2 	b.w	8030d72 <_raise_r>
 8030dce:	bf00      	nop
 8030dd0:	20000188 	.word	0x20000188

08030dd4 <_fstat_r>:
 8030dd4:	b538      	push	{r3, r4, r5, lr}
 8030dd6:	4d07      	ldr	r5, [pc, #28]	; (8030df4 <_fstat_r+0x20>)
 8030dd8:	2300      	movs	r3, #0
 8030dda:	4604      	mov	r4, r0
 8030ddc:	4608      	mov	r0, r1
 8030dde:	4611      	mov	r1, r2
 8030de0:	602b      	str	r3, [r5, #0]
 8030de2:	f7e1 feda 	bl	8012b9a <_fstat>
 8030de6:	1c43      	adds	r3, r0, #1
 8030de8:	d102      	bne.n	8030df0 <_fstat_r+0x1c>
 8030dea:	682b      	ldr	r3, [r5, #0]
 8030dec:	b103      	cbz	r3, 8030df0 <_fstat_r+0x1c>
 8030dee:	6023      	str	r3, [r4, #0]
 8030df0:	bd38      	pop	{r3, r4, r5, pc}
 8030df2:	bf00      	nop
 8030df4:	2000daec 	.word	0x2000daec

08030df8 <_isatty_r>:
 8030df8:	b538      	push	{r3, r4, r5, lr}
 8030dfa:	4d06      	ldr	r5, [pc, #24]	; (8030e14 <_isatty_r+0x1c>)
 8030dfc:	2300      	movs	r3, #0
 8030dfe:	4604      	mov	r4, r0
 8030e00:	4608      	mov	r0, r1
 8030e02:	602b      	str	r3, [r5, #0]
 8030e04:	f7e1 fed9 	bl	8012bba <_isatty>
 8030e08:	1c43      	adds	r3, r0, #1
 8030e0a:	d102      	bne.n	8030e12 <_isatty_r+0x1a>
 8030e0c:	682b      	ldr	r3, [r5, #0]
 8030e0e:	b103      	cbz	r3, 8030e12 <_isatty_r+0x1a>
 8030e10:	6023      	str	r3, [r4, #0]
 8030e12:	bd38      	pop	{r3, r4, r5, pc}
 8030e14:	2000daec 	.word	0x2000daec

08030e18 <_kill_r>:
 8030e18:	b538      	push	{r3, r4, r5, lr}
 8030e1a:	4d07      	ldr	r5, [pc, #28]	; (8030e38 <_kill_r+0x20>)
 8030e1c:	2300      	movs	r3, #0
 8030e1e:	4604      	mov	r4, r0
 8030e20:	4608      	mov	r0, r1
 8030e22:	4611      	mov	r1, r2
 8030e24:	602b      	str	r3, [r5, #0]
 8030e26:	f7e1 fe59 	bl	8012adc <_kill>
 8030e2a:	1c43      	adds	r3, r0, #1
 8030e2c:	d102      	bne.n	8030e34 <_kill_r+0x1c>
 8030e2e:	682b      	ldr	r3, [r5, #0]
 8030e30:	b103      	cbz	r3, 8030e34 <_kill_r+0x1c>
 8030e32:	6023      	str	r3, [r4, #0]
 8030e34:	bd38      	pop	{r3, r4, r5, pc}
 8030e36:	bf00      	nop
 8030e38:	2000daec 	.word	0x2000daec

08030e3c <_getpid_r>:
 8030e3c:	f7e1 be46 	b.w	8012acc <_getpid>

08030e40 <nan>:
 8030e40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8030e48 <nan+0x8>
 8030e44:	4770      	bx	lr
 8030e46:	bf00      	nop
 8030e48:	00000000 	.word	0x00000000
 8030e4c:	7ff80000 	.word	0x7ff80000

08030e50 <rshift>:
 8030e50:	6903      	ldr	r3, [r0, #16]
 8030e52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8030e56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8030e5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8030e5e:	f100 0414 	add.w	r4, r0, #20
 8030e62:	dd45      	ble.n	8030ef0 <rshift+0xa0>
 8030e64:	f011 011f 	ands.w	r1, r1, #31
 8030e68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8030e6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8030e70:	d10c      	bne.n	8030e8c <rshift+0x3c>
 8030e72:	f100 0710 	add.w	r7, r0, #16
 8030e76:	4629      	mov	r1, r5
 8030e78:	42b1      	cmp	r1, r6
 8030e7a:	d334      	bcc.n	8030ee6 <rshift+0x96>
 8030e7c:	1a9b      	subs	r3, r3, r2
 8030e7e:	009b      	lsls	r3, r3, #2
 8030e80:	1eea      	subs	r2, r5, #3
 8030e82:	4296      	cmp	r6, r2
 8030e84:	bf38      	it	cc
 8030e86:	2300      	movcc	r3, #0
 8030e88:	4423      	add	r3, r4
 8030e8a:	e015      	b.n	8030eb8 <rshift+0x68>
 8030e8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8030e90:	f1c1 0820 	rsb	r8, r1, #32
 8030e94:	40cf      	lsrs	r7, r1
 8030e96:	f105 0e04 	add.w	lr, r5, #4
 8030e9a:	46a1      	mov	r9, r4
 8030e9c:	4576      	cmp	r6, lr
 8030e9e:	46f4      	mov	ip, lr
 8030ea0:	d815      	bhi.n	8030ece <rshift+0x7e>
 8030ea2:	1a9a      	subs	r2, r3, r2
 8030ea4:	0092      	lsls	r2, r2, #2
 8030ea6:	3a04      	subs	r2, #4
 8030ea8:	3501      	adds	r5, #1
 8030eaa:	42ae      	cmp	r6, r5
 8030eac:	bf38      	it	cc
 8030eae:	2200      	movcc	r2, #0
 8030eb0:	18a3      	adds	r3, r4, r2
 8030eb2:	50a7      	str	r7, [r4, r2]
 8030eb4:	b107      	cbz	r7, 8030eb8 <rshift+0x68>
 8030eb6:	3304      	adds	r3, #4
 8030eb8:	1b1a      	subs	r2, r3, r4
 8030eba:	42a3      	cmp	r3, r4
 8030ebc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8030ec0:	bf08      	it	eq
 8030ec2:	2300      	moveq	r3, #0
 8030ec4:	6102      	str	r2, [r0, #16]
 8030ec6:	bf08      	it	eq
 8030ec8:	6143      	streq	r3, [r0, #20]
 8030eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8030ece:	f8dc c000 	ldr.w	ip, [ip]
 8030ed2:	fa0c fc08 	lsl.w	ip, ip, r8
 8030ed6:	ea4c 0707 	orr.w	r7, ip, r7
 8030eda:	f849 7b04 	str.w	r7, [r9], #4
 8030ede:	f85e 7b04 	ldr.w	r7, [lr], #4
 8030ee2:	40cf      	lsrs	r7, r1
 8030ee4:	e7da      	b.n	8030e9c <rshift+0x4c>
 8030ee6:	f851 cb04 	ldr.w	ip, [r1], #4
 8030eea:	f847 cf04 	str.w	ip, [r7, #4]!
 8030eee:	e7c3      	b.n	8030e78 <rshift+0x28>
 8030ef0:	4623      	mov	r3, r4
 8030ef2:	e7e1      	b.n	8030eb8 <rshift+0x68>

08030ef4 <__hexdig_fun>:
 8030ef4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8030ef8:	2b09      	cmp	r3, #9
 8030efa:	d802      	bhi.n	8030f02 <__hexdig_fun+0xe>
 8030efc:	3820      	subs	r0, #32
 8030efe:	b2c0      	uxtb	r0, r0
 8030f00:	4770      	bx	lr
 8030f02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8030f06:	2b05      	cmp	r3, #5
 8030f08:	d801      	bhi.n	8030f0e <__hexdig_fun+0x1a>
 8030f0a:	3847      	subs	r0, #71	; 0x47
 8030f0c:	e7f7      	b.n	8030efe <__hexdig_fun+0xa>
 8030f0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8030f12:	2b05      	cmp	r3, #5
 8030f14:	d801      	bhi.n	8030f1a <__hexdig_fun+0x26>
 8030f16:	3827      	subs	r0, #39	; 0x27
 8030f18:	e7f1      	b.n	8030efe <__hexdig_fun+0xa>
 8030f1a:	2000      	movs	r0, #0
 8030f1c:	4770      	bx	lr
	...

08030f20 <__gethex>:
 8030f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030f24:	4617      	mov	r7, r2
 8030f26:	680a      	ldr	r2, [r1, #0]
 8030f28:	b085      	sub	sp, #20
 8030f2a:	f102 0b02 	add.w	fp, r2, #2
 8030f2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8030f32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8030f36:	4681      	mov	r9, r0
 8030f38:	468a      	mov	sl, r1
 8030f3a:	9302      	str	r3, [sp, #8]
 8030f3c:	32fe      	adds	r2, #254	; 0xfe
 8030f3e:	eb02 030b 	add.w	r3, r2, fp
 8030f42:	46d8      	mov	r8, fp
 8030f44:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8030f48:	9301      	str	r3, [sp, #4]
 8030f4a:	2830      	cmp	r0, #48	; 0x30
 8030f4c:	d0f7      	beq.n	8030f3e <__gethex+0x1e>
 8030f4e:	f7ff ffd1 	bl	8030ef4 <__hexdig_fun>
 8030f52:	4604      	mov	r4, r0
 8030f54:	2800      	cmp	r0, #0
 8030f56:	d138      	bne.n	8030fca <__gethex+0xaa>
 8030f58:	49a7      	ldr	r1, [pc, #668]	; (80311f8 <__gethex+0x2d8>)
 8030f5a:	2201      	movs	r2, #1
 8030f5c:	4640      	mov	r0, r8
 8030f5e:	f7fc fc15 	bl	802d78c <strncmp>
 8030f62:	4606      	mov	r6, r0
 8030f64:	2800      	cmp	r0, #0
 8030f66:	d169      	bne.n	803103c <__gethex+0x11c>
 8030f68:	f898 0001 	ldrb.w	r0, [r8, #1]
 8030f6c:	465d      	mov	r5, fp
 8030f6e:	f7ff ffc1 	bl	8030ef4 <__hexdig_fun>
 8030f72:	2800      	cmp	r0, #0
 8030f74:	d064      	beq.n	8031040 <__gethex+0x120>
 8030f76:	465a      	mov	r2, fp
 8030f78:	7810      	ldrb	r0, [r2, #0]
 8030f7a:	2830      	cmp	r0, #48	; 0x30
 8030f7c:	4690      	mov	r8, r2
 8030f7e:	f102 0201 	add.w	r2, r2, #1
 8030f82:	d0f9      	beq.n	8030f78 <__gethex+0x58>
 8030f84:	f7ff ffb6 	bl	8030ef4 <__hexdig_fun>
 8030f88:	2301      	movs	r3, #1
 8030f8a:	fab0 f480 	clz	r4, r0
 8030f8e:	0964      	lsrs	r4, r4, #5
 8030f90:	465e      	mov	r6, fp
 8030f92:	9301      	str	r3, [sp, #4]
 8030f94:	4642      	mov	r2, r8
 8030f96:	4615      	mov	r5, r2
 8030f98:	3201      	adds	r2, #1
 8030f9a:	7828      	ldrb	r0, [r5, #0]
 8030f9c:	f7ff ffaa 	bl	8030ef4 <__hexdig_fun>
 8030fa0:	2800      	cmp	r0, #0
 8030fa2:	d1f8      	bne.n	8030f96 <__gethex+0x76>
 8030fa4:	4994      	ldr	r1, [pc, #592]	; (80311f8 <__gethex+0x2d8>)
 8030fa6:	2201      	movs	r2, #1
 8030fa8:	4628      	mov	r0, r5
 8030faa:	f7fc fbef 	bl	802d78c <strncmp>
 8030fae:	b978      	cbnz	r0, 8030fd0 <__gethex+0xb0>
 8030fb0:	b946      	cbnz	r6, 8030fc4 <__gethex+0xa4>
 8030fb2:	1c6e      	adds	r6, r5, #1
 8030fb4:	4632      	mov	r2, r6
 8030fb6:	4615      	mov	r5, r2
 8030fb8:	3201      	adds	r2, #1
 8030fba:	7828      	ldrb	r0, [r5, #0]
 8030fbc:	f7ff ff9a 	bl	8030ef4 <__hexdig_fun>
 8030fc0:	2800      	cmp	r0, #0
 8030fc2:	d1f8      	bne.n	8030fb6 <__gethex+0x96>
 8030fc4:	1b73      	subs	r3, r6, r5
 8030fc6:	009e      	lsls	r6, r3, #2
 8030fc8:	e004      	b.n	8030fd4 <__gethex+0xb4>
 8030fca:	2400      	movs	r4, #0
 8030fcc:	4626      	mov	r6, r4
 8030fce:	e7e1      	b.n	8030f94 <__gethex+0x74>
 8030fd0:	2e00      	cmp	r6, #0
 8030fd2:	d1f7      	bne.n	8030fc4 <__gethex+0xa4>
 8030fd4:	782b      	ldrb	r3, [r5, #0]
 8030fd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8030fda:	2b50      	cmp	r3, #80	; 0x50
 8030fdc:	d13d      	bne.n	803105a <__gethex+0x13a>
 8030fde:	786b      	ldrb	r3, [r5, #1]
 8030fe0:	2b2b      	cmp	r3, #43	; 0x2b
 8030fe2:	d02f      	beq.n	8031044 <__gethex+0x124>
 8030fe4:	2b2d      	cmp	r3, #45	; 0x2d
 8030fe6:	d031      	beq.n	803104c <__gethex+0x12c>
 8030fe8:	1c69      	adds	r1, r5, #1
 8030fea:	f04f 0b00 	mov.w	fp, #0
 8030fee:	7808      	ldrb	r0, [r1, #0]
 8030ff0:	f7ff ff80 	bl	8030ef4 <__hexdig_fun>
 8030ff4:	1e42      	subs	r2, r0, #1
 8030ff6:	b2d2      	uxtb	r2, r2
 8030ff8:	2a18      	cmp	r2, #24
 8030ffa:	d82e      	bhi.n	803105a <__gethex+0x13a>
 8030ffc:	f1a0 0210 	sub.w	r2, r0, #16
 8031000:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8031004:	f7ff ff76 	bl	8030ef4 <__hexdig_fun>
 8031008:	f100 3cff 	add.w	ip, r0, #4294967295
 803100c:	fa5f fc8c 	uxtb.w	ip, ip
 8031010:	f1bc 0f18 	cmp.w	ip, #24
 8031014:	d91d      	bls.n	8031052 <__gethex+0x132>
 8031016:	f1bb 0f00 	cmp.w	fp, #0
 803101a:	d000      	beq.n	803101e <__gethex+0xfe>
 803101c:	4252      	negs	r2, r2
 803101e:	4416      	add	r6, r2
 8031020:	f8ca 1000 	str.w	r1, [sl]
 8031024:	b1dc      	cbz	r4, 803105e <__gethex+0x13e>
 8031026:	9b01      	ldr	r3, [sp, #4]
 8031028:	2b00      	cmp	r3, #0
 803102a:	bf14      	ite	ne
 803102c:	f04f 0800 	movne.w	r8, #0
 8031030:	f04f 0806 	moveq.w	r8, #6
 8031034:	4640      	mov	r0, r8
 8031036:	b005      	add	sp, #20
 8031038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803103c:	4645      	mov	r5, r8
 803103e:	4626      	mov	r6, r4
 8031040:	2401      	movs	r4, #1
 8031042:	e7c7      	b.n	8030fd4 <__gethex+0xb4>
 8031044:	f04f 0b00 	mov.w	fp, #0
 8031048:	1ca9      	adds	r1, r5, #2
 803104a:	e7d0      	b.n	8030fee <__gethex+0xce>
 803104c:	f04f 0b01 	mov.w	fp, #1
 8031050:	e7fa      	b.n	8031048 <__gethex+0x128>
 8031052:	230a      	movs	r3, #10
 8031054:	fb03 0002 	mla	r0, r3, r2, r0
 8031058:	e7d0      	b.n	8030ffc <__gethex+0xdc>
 803105a:	4629      	mov	r1, r5
 803105c:	e7e0      	b.n	8031020 <__gethex+0x100>
 803105e:	eba5 0308 	sub.w	r3, r5, r8
 8031062:	3b01      	subs	r3, #1
 8031064:	4621      	mov	r1, r4
 8031066:	2b07      	cmp	r3, #7
 8031068:	dc0a      	bgt.n	8031080 <__gethex+0x160>
 803106a:	4648      	mov	r0, r9
 803106c:	f7fd fbfe 	bl	802e86c <_Balloc>
 8031070:	4604      	mov	r4, r0
 8031072:	b940      	cbnz	r0, 8031086 <__gethex+0x166>
 8031074:	4b61      	ldr	r3, [pc, #388]	; (80311fc <__gethex+0x2dc>)
 8031076:	4602      	mov	r2, r0
 8031078:	21e4      	movs	r1, #228	; 0xe4
 803107a:	4861      	ldr	r0, [pc, #388]	; (8031200 <__gethex+0x2e0>)
 803107c:	f7fb f96e 	bl	802c35c <__assert_func>
 8031080:	3101      	adds	r1, #1
 8031082:	105b      	asrs	r3, r3, #1
 8031084:	e7ef      	b.n	8031066 <__gethex+0x146>
 8031086:	f100 0a14 	add.w	sl, r0, #20
 803108a:	2300      	movs	r3, #0
 803108c:	495a      	ldr	r1, [pc, #360]	; (80311f8 <__gethex+0x2d8>)
 803108e:	f8cd a004 	str.w	sl, [sp, #4]
 8031092:	469b      	mov	fp, r3
 8031094:	45a8      	cmp	r8, r5
 8031096:	d342      	bcc.n	803111e <__gethex+0x1fe>
 8031098:	9801      	ldr	r0, [sp, #4]
 803109a:	f840 bb04 	str.w	fp, [r0], #4
 803109e:	eba0 000a 	sub.w	r0, r0, sl
 80310a2:	1080      	asrs	r0, r0, #2
 80310a4:	6120      	str	r0, [r4, #16]
 80310a6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80310aa:	4658      	mov	r0, fp
 80310ac:	f7fd fcd0 	bl	802ea50 <__hi0bits>
 80310b0:	683d      	ldr	r5, [r7, #0]
 80310b2:	eba8 0000 	sub.w	r0, r8, r0
 80310b6:	42a8      	cmp	r0, r5
 80310b8:	dd59      	ble.n	803116e <__gethex+0x24e>
 80310ba:	eba0 0805 	sub.w	r8, r0, r5
 80310be:	4641      	mov	r1, r8
 80310c0:	4620      	mov	r0, r4
 80310c2:	f7fe f85f 	bl	802f184 <__any_on>
 80310c6:	4683      	mov	fp, r0
 80310c8:	b1b8      	cbz	r0, 80310fa <__gethex+0x1da>
 80310ca:	f108 33ff 	add.w	r3, r8, #4294967295
 80310ce:	1159      	asrs	r1, r3, #5
 80310d0:	f003 021f 	and.w	r2, r3, #31
 80310d4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80310d8:	f04f 0b01 	mov.w	fp, #1
 80310dc:	fa0b f202 	lsl.w	r2, fp, r2
 80310e0:	420a      	tst	r2, r1
 80310e2:	d00a      	beq.n	80310fa <__gethex+0x1da>
 80310e4:	455b      	cmp	r3, fp
 80310e6:	dd06      	ble.n	80310f6 <__gethex+0x1d6>
 80310e8:	f1a8 0102 	sub.w	r1, r8, #2
 80310ec:	4620      	mov	r0, r4
 80310ee:	f7fe f849 	bl	802f184 <__any_on>
 80310f2:	2800      	cmp	r0, #0
 80310f4:	d138      	bne.n	8031168 <__gethex+0x248>
 80310f6:	f04f 0b02 	mov.w	fp, #2
 80310fa:	4641      	mov	r1, r8
 80310fc:	4620      	mov	r0, r4
 80310fe:	f7ff fea7 	bl	8030e50 <rshift>
 8031102:	4446      	add	r6, r8
 8031104:	68bb      	ldr	r3, [r7, #8]
 8031106:	42b3      	cmp	r3, r6
 8031108:	da41      	bge.n	803118e <__gethex+0x26e>
 803110a:	4621      	mov	r1, r4
 803110c:	4648      	mov	r0, r9
 803110e:	f7fd fbed 	bl	802e8ec <_Bfree>
 8031112:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8031114:	2300      	movs	r3, #0
 8031116:	6013      	str	r3, [r2, #0]
 8031118:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 803111c:	e78a      	b.n	8031034 <__gethex+0x114>
 803111e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8031122:	2a2e      	cmp	r2, #46	; 0x2e
 8031124:	d014      	beq.n	8031150 <__gethex+0x230>
 8031126:	2b20      	cmp	r3, #32
 8031128:	d106      	bne.n	8031138 <__gethex+0x218>
 803112a:	9b01      	ldr	r3, [sp, #4]
 803112c:	f843 bb04 	str.w	fp, [r3], #4
 8031130:	f04f 0b00 	mov.w	fp, #0
 8031134:	9301      	str	r3, [sp, #4]
 8031136:	465b      	mov	r3, fp
 8031138:	7828      	ldrb	r0, [r5, #0]
 803113a:	9303      	str	r3, [sp, #12]
 803113c:	f7ff feda 	bl	8030ef4 <__hexdig_fun>
 8031140:	9b03      	ldr	r3, [sp, #12]
 8031142:	f000 000f 	and.w	r0, r0, #15
 8031146:	4098      	lsls	r0, r3
 8031148:	ea4b 0b00 	orr.w	fp, fp, r0
 803114c:	3304      	adds	r3, #4
 803114e:	e7a1      	b.n	8031094 <__gethex+0x174>
 8031150:	45a8      	cmp	r8, r5
 8031152:	d8e8      	bhi.n	8031126 <__gethex+0x206>
 8031154:	2201      	movs	r2, #1
 8031156:	4628      	mov	r0, r5
 8031158:	9303      	str	r3, [sp, #12]
 803115a:	f7fc fb17 	bl	802d78c <strncmp>
 803115e:	4926      	ldr	r1, [pc, #152]	; (80311f8 <__gethex+0x2d8>)
 8031160:	9b03      	ldr	r3, [sp, #12]
 8031162:	2800      	cmp	r0, #0
 8031164:	d1df      	bne.n	8031126 <__gethex+0x206>
 8031166:	e795      	b.n	8031094 <__gethex+0x174>
 8031168:	f04f 0b03 	mov.w	fp, #3
 803116c:	e7c5      	b.n	80310fa <__gethex+0x1da>
 803116e:	da0b      	bge.n	8031188 <__gethex+0x268>
 8031170:	eba5 0800 	sub.w	r8, r5, r0
 8031174:	4621      	mov	r1, r4
 8031176:	4642      	mov	r2, r8
 8031178:	4648      	mov	r0, r9
 803117a:	f7fd fdd1 	bl	802ed20 <__lshift>
 803117e:	eba6 0608 	sub.w	r6, r6, r8
 8031182:	4604      	mov	r4, r0
 8031184:	f100 0a14 	add.w	sl, r0, #20
 8031188:	f04f 0b00 	mov.w	fp, #0
 803118c:	e7ba      	b.n	8031104 <__gethex+0x1e4>
 803118e:	687b      	ldr	r3, [r7, #4]
 8031190:	42b3      	cmp	r3, r6
 8031192:	dd73      	ble.n	803127c <__gethex+0x35c>
 8031194:	1b9e      	subs	r6, r3, r6
 8031196:	42b5      	cmp	r5, r6
 8031198:	dc34      	bgt.n	8031204 <__gethex+0x2e4>
 803119a:	68fb      	ldr	r3, [r7, #12]
 803119c:	2b02      	cmp	r3, #2
 803119e:	d023      	beq.n	80311e8 <__gethex+0x2c8>
 80311a0:	2b03      	cmp	r3, #3
 80311a2:	d025      	beq.n	80311f0 <__gethex+0x2d0>
 80311a4:	2b01      	cmp	r3, #1
 80311a6:	d115      	bne.n	80311d4 <__gethex+0x2b4>
 80311a8:	42b5      	cmp	r5, r6
 80311aa:	d113      	bne.n	80311d4 <__gethex+0x2b4>
 80311ac:	2d01      	cmp	r5, #1
 80311ae:	d10b      	bne.n	80311c8 <__gethex+0x2a8>
 80311b0:	9a02      	ldr	r2, [sp, #8]
 80311b2:	687b      	ldr	r3, [r7, #4]
 80311b4:	6013      	str	r3, [r2, #0]
 80311b6:	2301      	movs	r3, #1
 80311b8:	6123      	str	r3, [r4, #16]
 80311ba:	f8ca 3000 	str.w	r3, [sl]
 80311be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80311c0:	f04f 0862 	mov.w	r8, #98	; 0x62
 80311c4:	601c      	str	r4, [r3, #0]
 80311c6:	e735      	b.n	8031034 <__gethex+0x114>
 80311c8:	1e69      	subs	r1, r5, #1
 80311ca:	4620      	mov	r0, r4
 80311cc:	f7fd ffda 	bl	802f184 <__any_on>
 80311d0:	2800      	cmp	r0, #0
 80311d2:	d1ed      	bne.n	80311b0 <__gethex+0x290>
 80311d4:	4621      	mov	r1, r4
 80311d6:	4648      	mov	r0, r9
 80311d8:	f7fd fb88 	bl	802e8ec <_Bfree>
 80311dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80311de:	2300      	movs	r3, #0
 80311e0:	6013      	str	r3, [r2, #0]
 80311e2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80311e6:	e725      	b.n	8031034 <__gethex+0x114>
 80311e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80311ea:	2b00      	cmp	r3, #0
 80311ec:	d1f2      	bne.n	80311d4 <__gethex+0x2b4>
 80311ee:	e7df      	b.n	80311b0 <__gethex+0x290>
 80311f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80311f2:	2b00      	cmp	r3, #0
 80311f4:	d1dc      	bne.n	80311b0 <__gethex+0x290>
 80311f6:	e7ed      	b.n	80311d4 <__gethex+0x2b4>
 80311f8:	08034b04 	.word	0x08034b04
 80311fc:	08034999 	.word	0x08034999
 8031200:	08034c8d 	.word	0x08034c8d
 8031204:	f106 38ff 	add.w	r8, r6, #4294967295
 8031208:	f1bb 0f00 	cmp.w	fp, #0
 803120c:	d133      	bne.n	8031276 <__gethex+0x356>
 803120e:	f1b8 0f00 	cmp.w	r8, #0
 8031212:	d004      	beq.n	803121e <__gethex+0x2fe>
 8031214:	4641      	mov	r1, r8
 8031216:	4620      	mov	r0, r4
 8031218:	f7fd ffb4 	bl	802f184 <__any_on>
 803121c:	4683      	mov	fp, r0
 803121e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8031222:	2301      	movs	r3, #1
 8031224:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8031228:	f008 081f 	and.w	r8, r8, #31
 803122c:	fa03 f308 	lsl.w	r3, r3, r8
 8031230:	4213      	tst	r3, r2
 8031232:	4631      	mov	r1, r6
 8031234:	4620      	mov	r0, r4
 8031236:	bf18      	it	ne
 8031238:	f04b 0b02 	orrne.w	fp, fp, #2
 803123c:	1bad      	subs	r5, r5, r6
 803123e:	f7ff fe07 	bl	8030e50 <rshift>
 8031242:	687e      	ldr	r6, [r7, #4]
 8031244:	f04f 0802 	mov.w	r8, #2
 8031248:	f1bb 0f00 	cmp.w	fp, #0
 803124c:	d04a      	beq.n	80312e4 <__gethex+0x3c4>
 803124e:	68fb      	ldr	r3, [r7, #12]
 8031250:	2b02      	cmp	r3, #2
 8031252:	d016      	beq.n	8031282 <__gethex+0x362>
 8031254:	2b03      	cmp	r3, #3
 8031256:	d018      	beq.n	803128a <__gethex+0x36a>
 8031258:	2b01      	cmp	r3, #1
 803125a:	d109      	bne.n	8031270 <__gethex+0x350>
 803125c:	f01b 0f02 	tst.w	fp, #2
 8031260:	d006      	beq.n	8031270 <__gethex+0x350>
 8031262:	f8da 3000 	ldr.w	r3, [sl]
 8031266:	ea4b 0b03 	orr.w	fp, fp, r3
 803126a:	f01b 0f01 	tst.w	fp, #1
 803126e:	d10f      	bne.n	8031290 <__gethex+0x370>
 8031270:	f048 0810 	orr.w	r8, r8, #16
 8031274:	e036      	b.n	80312e4 <__gethex+0x3c4>
 8031276:	f04f 0b01 	mov.w	fp, #1
 803127a:	e7d0      	b.n	803121e <__gethex+0x2fe>
 803127c:	f04f 0801 	mov.w	r8, #1
 8031280:	e7e2      	b.n	8031248 <__gethex+0x328>
 8031282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8031284:	f1c3 0301 	rsb	r3, r3, #1
 8031288:	930f      	str	r3, [sp, #60]	; 0x3c
 803128a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803128c:	2b00      	cmp	r3, #0
 803128e:	d0ef      	beq.n	8031270 <__gethex+0x350>
 8031290:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8031294:	f104 0214 	add.w	r2, r4, #20
 8031298:	ea4f 038b 	mov.w	r3, fp, lsl #2
 803129c:	9301      	str	r3, [sp, #4]
 803129e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80312a2:	2300      	movs	r3, #0
 80312a4:	4694      	mov	ip, r2
 80312a6:	f852 1b04 	ldr.w	r1, [r2], #4
 80312aa:	f1b1 3fff 	cmp.w	r1, #4294967295
 80312ae:	d01e      	beq.n	80312ee <__gethex+0x3ce>
 80312b0:	3101      	adds	r1, #1
 80312b2:	f8cc 1000 	str.w	r1, [ip]
 80312b6:	f1b8 0f02 	cmp.w	r8, #2
 80312ba:	f104 0214 	add.w	r2, r4, #20
 80312be:	d13d      	bne.n	803133c <__gethex+0x41c>
 80312c0:	683b      	ldr	r3, [r7, #0]
 80312c2:	3b01      	subs	r3, #1
 80312c4:	42ab      	cmp	r3, r5
 80312c6:	d10b      	bne.n	80312e0 <__gethex+0x3c0>
 80312c8:	1169      	asrs	r1, r5, #5
 80312ca:	2301      	movs	r3, #1
 80312cc:	f005 051f 	and.w	r5, r5, #31
 80312d0:	fa03 f505 	lsl.w	r5, r3, r5
 80312d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80312d8:	421d      	tst	r5, r3
 80312da:	bf18      	it	ne
 80312dc:	f04f 0801 	movne.w	r8, #1
 80312e0:	f048 0820 	orr.w	r8, r8, #32
 80312e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80312e6:	601c      	str	r4, [r3, #0]
 80312e8:	9b02      	ldr	r3, [sp, #8]
 80312ea:	601e      	str	r6, [r3, #0]
 80312ec:	e6a2      	b.n	8031034 <__gethex+0x114>
 80312ee:	4290      	cmp	r0, r2
 80312f0:	f842 3c04 	str.w	r3, [r2, #-4]
 80312f4:	d8d6      	bhi.n	80312a4 <__gethex+0x384>
 80312f6:	68a2      	ldr	r2, [r4, #8]
 80312f8:	4593      	cmp	fp, r2
 80312fa:	db17      	blt.n	803132c <__gethex+0x40c>
 80312fc:	6861      	ldr	r1, [r4, #4]
 80312fe:	4648      	mov	r0, r9
 8031300:	3101      	adds	r1, #1
 8031302:	f7fd fab3 	bl	802e86c <_Balloc>
 8031306:	4682      	mov	sl, r0
 8031308:	b918      	cbnz	r0, 8031312 <__gethex+0x3f2>
 803130a:	4b1b      	ldr	r3, [pc, #108]	; (8031378 <__gethex+0x458>)
 803130c:	4602      	mov	r2, r0
 803130e:	2184      	movs	r1, #132	; 0x84
 8031310:	e6b3      	b.n	803107a <__gethex+0x15a>
 8031312:	6922      	ldr	r2, [r4, #16]
 8031314:	3202      	adds	r2, #2
 8031316:	f104 010c 	add.w	r1, r4, #12
 803131a:	0092      	lsls	r2, r2, #2
 803131c:	300c      	adds	r0, #12
 803131e:	f7fc fbc2 	bl	802daa6 <memcpy>
 8031322:	4621      	mov	r1, r4
 8031324:	4648      	mov	r0, r9
 8031326:	f7fd fae1 	bl	802e8ec <_Bfree>
 803132a:	4654      	mov	r4, sl
 803132c:	6922      	ldr	r2, [r4, #16]
 803132e:	1c51      	adds	r1, r2, #1
 8031330:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8031334:	6121      	str	r1, [r4, #16]
 8031336:	2101      	movs	r1, #1
 8031338:	6151      	str	r1, [r2, #20]
 803133a:	e7bc      	b.n	80312b6 <__gethex+0x396>
 803133c:	6921      	ldr	r1, [r4, #16]
 803133e:	4559      	cmp	r1, fp
 8031340:	dd0b      	ble.n	803135a <__gethex+0x43a>
 8031342:	2101      	movs	r1, #1
 8031344:	4620      	mov	r0, r4
 8031346:	f7ff fd83 	bl	8030e50 <rshift>
 803134a:	68bb      	ldr	r3, [r7, #8]
 803134c:	3601      	adds	r6, #1
 803134e:	42b3      	cmp	r3, r6
 8031350:	f6ff aedb 	blt.w	803110a <__gethex+0x1ea>
 8031354:	f04f 0801 	mov.w	r8, #1
 8031358:	e7c2      	b.n	80312e0 <__gethex+0x3c0>
 803135a:	f015 051f 	ands.w	r5, r5, #31
 803135e:	d0f9      	beq.n	8031354 <__gethex+0x434>
 8031360:	9b01      	ldr	r3, [sp, #4]
 8031362:	441a      	add	r2, r3
 8031364:	f1c5 0520 	rsb	r5, r5, #32
 8031368:	f852 0c04 	ldr.w	r0, [r2, #-4]
 803136c:	f7fd fb70 	bl	802ea50 <__hi0bits>
 8031370:	42a8      	cmp	r0, r5
 8031372:	dbe6      	blt.n	8031342 <__gethex+0x422>
 8031374:	e7ee      	b.n	8031354 <__gethex+0x434>
 8031376:	bf00      	nop
 8031378:	08034999 	.word	0x08034999

0803137c <L_shift>:
 803137c:	f1c2 0208 	rsb	r2, r2, #8
 8031380:	0092      	lsls	r2, r2, #2
 8031382:	b570      	push	{r4, r5, r6, lr}
 8031384:	f1c2 0620 	rsb	r6, r2, #32
 8031388:	6843      	ldr	r3, [r0, #4]
 803138a:	6804      	ldr	r4, [r0, #0]
 803138c:	fa03 f506 	lsl.w	r5, r3, r6
 8031390:	432c      	orrs	r4, r5
 8031392:	40d3      	lsrs	r3, r2
 8031394:	6004      	str	r4, [r0, #0]
 8031396:	f840 3f04 	str.w	r3, [r0, #4]!
 803139a:	4288      	cmp	r0, r1
 803139c:	d3f4      	bcc.n	8031388 <L_shift+0xc>
 803139e:	bd70      	pop	{r4, r5, r6, pc}

080313a0 <__match>:
 80313a0:	b530      	push	{r4, r5, lr}
 80313a2:	6803      	ldr	r3, [r0, #0]
 80313a4:	3301      	adds	r3, #1
 80313a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80313aa:	b914      	cbnz	r4, 80313b2 <__match+0x12>
 80313ac:	6003      	str	r3, [r0, #0]
 80313ae:	2001      	movs	r0, #1
 80313b0:	bd30      	pop	{r4, r5, pc}
 80313b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80313b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80313ba:	2d19      	cmp	r5, #25
 80313bc:	bf98      	it	ls
 80313be:	3220      	addls	r2, #32
 80313c0:	42a2      	cmp	r2, r4
 80313c2:	d0f0      	beq.n	80313a6 <__match+0x6>
 80313c4:	2000      	movs	r0, #0
 80313c6:	e7f3      	b.n	80313b0 <__match+0x10>

080313c8 <__hexnan>:
 80313c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80313cc:	680b      	ldr	r3, [r1, #0]
 80313ce:	6801      	ldr	r1, [r0, #0]
 80313d0:	115e      	asrs	r6, r3, #5
 80313d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80313d6:	f013 031f 	ands.w	r3, r3, #31
 80313da:	b087      	sub	sp, #28
 80313dc:	bf18      	it	ne
 80313de:	3604      	addne	r6, #4
 80313e0:	2500      	movs	r5, #0
 80313e2:	1f37      	subs	r7, r6, #4
 80313e4:	4682      	mov	sl, r0
 80313e6:	4690      	mov	r8, r2
 80313e8:	9301      	str	r3, [sp, #4]
 80313ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80313ee:	46b9      	mov	r9, r7
 80313f0:	463c      	mov	r4, r7
 80313f2:	9502      	str	r5, [sp, #8]
 80313f4:	46ab      	mov	fp, r5
 80313f6:	784a      	ldrb	r2, [r1, #1]
 80313f8:	1c4b      	adds	r3, r1, #1
 80313fa:	9303      	str	r3, [sp, #12]
 80313fc:	b342      	cbz	r2, 8031450 <__hexnan+0x88>
 80313fe:	4610      	mov	r0, r2
 8031400:	9105      	str	r1, [sp, #20]
 8031402:	9204      	str	r2, [sp, #16]
 8031404:	f7ff fd76 	bl	8030ef4 <__hexdig_fun>
 8031408:	2800      	cmp	r0, #0
 803140a:	d14f      	bne.n	80314ac <__hexnan+0xe4>
 803140c:	9a04      	ldr	r2, [sp, #16]
 803140e:	9905      	ldr	r1, [sp, #20]
 8031410:	2a20      	cmp	r2, #32
 8031412:	d818      	bhi.n	8031446 <__hexnan+0x7e>
 8031414:	9b02      	ldr	r3, [sp, #8]
 8031416:	459b      	cmp	fp, r3
 8031418:	dd13      	ble.n	8031442 <__hexnan+0x7a>
 803141a:	454c      	cmp	r4, r9
 803141c:	d206      	bcs.n	803142c <__hexnan+0x64>
 803141e:	2d07      	cmp	r5, #7
 8031420:	dc04      	bgt.n	803142c <__hexnan+0x64>
 8031422:	462a      	mov	r2, r5
 8031424:	4649      	mov	r1, r9
 8031426:	4620      	mov	r0, r4
 8031428:	f7ff ffa8 	bl	803137c <L_shift>
 803142c:	4544      	cmp	r4, r8
 803142e:	d950      	bls.n	80314d2 <__hexnan+0x10a>
 8031430:	2300      	movs	r3, #0
 8031432:	f1a4 0904 	sub.w	r9, r4, #4
 8031436:	f844 3c04 	str.w	r3, [r4, #-4]
 803143a:	f8cd b008 	str.w	fp, [sp, #8]
 803143e:	464c      	mov	r4, r9
 8031440:	461d      	mov	r5, r3
 8031442:	9903      	ldr	r1, [sp, #12]
 8031444:	e7d7      	b.n	80313f6 <__hexnan+0x2e>
 8031446:	2a29      	cmp	r2, #41	; 0x29
 8031448:	d155      	bne.n	80314f6 <__hexnan+0x12e>
 803144a:	3102      	adds	r1, #2
 803144c:	f8ca 1000 	str.w	r1, [sl]
 8031450:	f1bb 0f00 	cmp.w	fp, #0
 8031454:	d04f      	beq.n	80314f6 <__hexnan+0x12e>
 8031456:	454c      	cmp	r4, r9
 8031458:	d206      	bcs.n	8031468 <__hexnan+0xa0>
 803145a:	2d07      	cmp	r5, #7
 803145c:	dc04      	bgt.n	8031468 <__hexnan+0xa0>
 803145e:	462a      	mov	r2, r5
 8031460:	4649      	mov	r1, r9
 8031462:	4620      	mov	r0, r4
 8031464:	f7ff ff8a 	bl	803137c <L_shift>
 8031468:	4544      	cmp	r4, r8
 803146a:	d934      	bls.n	80314d6 <__hexnan+0x10e>
 803146c:	f1a8 0204 	sub.w	r2, r8, #4
 8031470:	4623      	mov	r3, r4
 8031472:	f853 1b04 	ldr.w	r1, [r3], #4
 8031476:	f842 1f04 	str.w	r1, [r2, #4]!
 803147a:	429f      	cmp	r7, r3
 803147c:	d2f9      	bcs.n	8031472 <__hexnan+0xaa>
 803147e:	1b3b      	subs	r3, r7, r4
 8031480:	f023 0303 	bic.w	r3, r3, #3
 8031484:	3304      	adds	r3, #4
 8031486:	3e03      	subs	r6, #3
 8031488:	3401      	adds	r4, #1
 803148a:	42a6      	cmp	r6, r4
 803148c:	bf38      	it	cc
 803148e:	2304      	movcc	r3, #4
 8031490:	4443      	add	r3, r8
 8031492:	2200      	movs	r2, #0
 8031494:	f843 2b04 	str.w	r2, [r3], #4
 8031498:	429f      	cmp	r7, r3
 803149a:	d2fb      	bcs.n	8031494 <__hexnan+0xcc>
 803149c:	683b      	ldr	r3, [r7, #0]
 803149e:	b91b      	cbnz	r3, 80314a8 <__hexnan+0xe0>
 80314a0:	4547      	cmp	r7, r8
 80314a2:	d126      	bne.n	80314f2 <__hexnan+0x12a>
 80314a4:	2301      	movs	r3, #1
 80314a6:	603b      	str	r3, [r7, #0]
 80314a8:	2005      	movs	r0, #5
 80314aa:	e025      	b.n	80314f8 <__hexnan+0x130>
 80314ac:	3501      	adds	r5, #1
 80314ae:	2d08      	cmp	r5, #8
 80314b0:	f10b 0b01 	add.w	fp, fp, #1
 80314b4:	dd06      	ble.n	80314c4 <__hexnan+0xfc>
 80314b6:	4544      	cmp	r4, r8
 80314b8:	d9c3      	bls.n	8031442 <__hexnan+0x7a>
 80314ba:	2300      	movs	r3, #0
 80314bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80314c0:	2501      	movs	r5, #1
 80314c2:	3c04      	subs	r4, #4
 80314c4:	6822      	ldr	r2, [r4, #0]
 80314c6:	f000 000f 	and.w	r0, r0, #15
 80314ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80314ce:	6020      	str	r0, [r4, #0]
 80314d0:	e7b7      	b.n	8031442 <__hexnan+0x7a>
 80314d2:	2508      	movs	r5, #8
 80314d4:	e7b5      	b.n	8031442 <__hexnan+0x7a>
 80314d6:	9b01      	ldr	r3, [sp, #4]
 80314d8:	2b00      	cmp	r3, #0
 80314da:	d0df      	beq.n	803149c <__hexnan+0xd4>
 80314dc:	f1c3 0320 	rsb	r3, r3, #32
 80314e0:	f04f 32ff 	mov.w	r2, #4294967295
 80314e4:	40da      	lsrs	r2, r3
 80314e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80314ea:	4013      	ands	r3, r2
 80314ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80314f0:	e7d4      	b.n	803149c <__hexnan+0xd4>
 80314f2:	3f04      	subs	r7, #4
 80314f4:	e7d2      	b.n	803149c <__hexnan+0xd4>
 80314f6:	2004      	movs	r0, #4
 80314f8:	b007      	add	sp, #28
 80314fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080314fe <__ascii_mbtowc>:
 80314fe:	b082      	sub	sp, #8
 8031500:	b901      	cbnz	r1, 8031504 <__ascii_mbtowc+0x6>
 8031502:	a901      	add	r1, sp, #4
 8031504:	b142      	cbz	r2, 8031518 <__ascii_mbtowc+0x1a>
 8031506:	b14b      	cbz	r3, 803151c <__ascii_mbtowc+0x1e>
 8031508:	7813      	ldrb	r3, [r2, #0]
 803150a:	600b      	str	r3, [r1, #0]
 803150c:	7812      	ldrb	r2, [r2, #0]
 803150e:	1e10      	subs	r0, r2, #0
 8031510:	bf18      	it	ne
 8031512:	2001      	movne	r0, #1
 8031514:	b002      	add	sp, #8
 8031516:	4770      	bx	lr
 8031518:	4610      	mov	r0, r2
 803151a:	e7fb      	b.n	8031514 <__ascii_mbtowc+0x16>
 803151c:	f06f 0001 	mvn.w	r0, #1
 8031520:	e7f8      	b.n	8031514 <__ascii_mbtowc+0x16>

08031522 <_realloc_r>:
 8031522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8031526:	4680      	mov	r8, r0
 8031528:	4614      	mov	r4, r2
 803152a:	460e      	mov	r6, r1
 803152c:	b921      	cbnz	r1, 8031538 <_realloc_r+0x16>
 803152e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8031532:	4611      	mov	r1, r2
 8031534:	f7fa bf76 	b.w	802c424 <_malloc_r>
 8031538:	b92a      	cbnz	r2, 8031546 <_realloc_r+0x24>
 803153a:	f7fd f94b 	bl	802e7d4 <_free_r>
 803153e:	4625      	mov	r5, r4
 8031540:	4628      	mov	r0, r5
 8031542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8031546:	f000 f89c 	bl	8031682 <_malloc_usable_size_r>
 803154a:	4284      	cmp	r4, r0
 803154c:	4607      	mov	r7, r0
 803154e:	d802      	bhi.n	8031556 <_realloc_r+0x34>
 8031550:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8031554:	d812      	bhi.n	803157c <_realloc_r+0x5a>
 8031556:	4621      	mov	r1, r4
 8031558:	4640      	mov	r0, r8
 803155a:	f7fa ff63 	bl	802c424 <_malloc_r>
 803155e:	4605      	mov	r5, r0
 8031560:	2800      	cmp	r0, #0
 8031562:	d0ed      	beq.n	8031540 <_realloc_r+0x1e>
 8031564:	42bc      	cmp	r4, r7
 8031566:	4622      	mov	r2, r4
 8031568:	4631      	mov	r1, r6
 803156a:	bf28      	it	cs
 803156c:	463a      	movcs	r2, r7
 803156e:	f7fc fa9a 	bl	802daa6 <memcpy>
 8031572:	4631      	mov	r1, r6
 8031574:	4640      	mov	r0, r8
 8031576:	f7fd f92d 	bl	802e7d4 <_free_r>
 803157a:	e7e1      	b.n	8031540 <_realloc_r+0x1e>
 803157c:	4635      	mov	r5, r6
 803157e:	e7df      	b.n	8031540 <_realloc_r+0x1e>

08031580 <_strtoul_l.constprop.0>:
 8031580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031584:	4f36      	ldr	r7, [pc, #216]	; (8031660 <_strtoul_l.constprop.0+0xe0>)
 8031586:	4686      	mov	lr, r0
 8031588:	460d      	mov	r5, r1
 803158a:	4628      	mov	r0, r5
 803158c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031590:	5d3e      	ldrb	r6, [r7, r4]
 8031592:	f016 0608 	ands.w	r6, r6, #8
 8031596:	d1f8      	bne.n	803158a <_strtoul_l.constprop.0+0xa>
 8031598:	2c2d      	cmp	r4, #45	; 0x2d
 803159a:	d130      	bne.n	80315fe <_strtoul_l.constprop.0+0x7e>
 803159c:	782c      	ldrb	r4, [r5, #0]
 803159e:	2601      	movs	r6, #1
 80315a0:	1c85      	adds	r5, r0, #2
 80315a2:	2b00      	cmp	r3, #0
 80315a4:	d057      	beq.n	8031656 <_strtoul_l.constprop.0+0xd6>
 80315a6:	2b10      	cmp	r3, #16
 80315a8:	d109      	bne.n	80315be <_strtoul_l.constprop.0+0x3e>
 80315aa:	2c30      	cmp	r4, #48	; 0x30
 80315ac:	d107      	bne.n	80315be <_strtoul_l.constprop.0+0x3e>
 80315ae:	7828      	ldrb	r0, [r5, #0]
 80315b0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80315b4:	2858      	cmp	r0, #88	; 0x58
 80315b6:	d149      	bne.n	803164c <_strtoul_l.constprop.0+0xcc>
 80315b8:	786c      	ldrb	r4, [r5, #1]
 80315ba:	2310      	movs	r3, #16
 80315bc:	3502      	adds	r5, #2
 80315be:	f04f 38ff 	mov.w	r8, #4294967295
 80315c2:	2700      	movs	r7, #0
 80315c4:	fbb8 f8f3 	udiv	r8, r8, r3
 80315c8:	fb03 f908 	mul.w	r9, r3, r8
 80315cc:	ea6f 0909 	mvn.w	r9, r9
 80315d0:	4638      	mov	r0, r7
 80315d2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80315d6:	f1bc 0f09 	cmp.w	ip, #9
 80315da:	d815      	bhi.n	8031608 <_strtoul_l.constprop.0+0x88>
 80315dc:	4664      	mov	r4, ip
 80315de:	42a3      	cmp	r3, r4
 80315e0:	dd23      	ble.n	803162a <_strtoul_l.constprop.0+0xaa>
 80315e2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80315e6:	d007      	beq.n	80315f8 <_strtoul_l.constprop.0+0x78>
 80315e8:	4580      	cmp	r8, r0
 80315ea:	d31b      	bcc.n	8031624 <_strtoul_l.constprop.0+0xa4>
 80315ec:	d101      	bne.n	80315f2 <_strtoul_l.constprop.0+0x72>
 80315ee:	45a1      	cmp	r9, r4
 80315f0:	db18      	blt.n	8031624 <_strtoul_l.constprop.0+0xa4>
 80315f2:	fb00 4003 	mla	r0, r0, r3, r4
 80315f6:	2701      	movs	r7, #1
 80315f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80315fc:	e7e9      	b.n	80315d2 <_strtoul_l.constprop.0+0x52>
 80315fe:	2c2b      	cmp	r4, #43	; 0x2b
 8031600:	bf04      	itt	eq
 8031602:	782c      	ldrbeq	r4, [r5, #0]
 8031604:	1c85      	addeq	r5, r0, #2
 8031606:	e7cc      	b.n	80315a2 <_strtoul_l.constprop.0+0x22>
 8031608:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 803160c:	f1bc 0f19 	cmp.w	ip, #25
 8031610:	d801      	bhi.n	8031616 <_strtoul_l.constprop.0+0x96>
 8031612:	3c37      	subs	r4, #55	; 0x37
 8031614:	e7e3      	b.n	80315de <_strtoul_l.constprop.0+0x5e>
 8031616:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 803161a:	f1bc 0f19 	cmp.w	ip, #25
 803161e:	d804      	bhi.n	803162a <_strtoul_l.constprop.0+0xaa>
 8031620:	3c57      	subs	r4, #87	; 0x57
 8031622:	e7dc      	b.n	80315de <_strtoul_l.constprop.0+0x5e>
 8031624:	f04f 37ff 	mov.w	r7, #4294967295
 8031628:	e7e6      	b.n	80315f8 <_strtoul_l.constprop.0+0x78>
 803162a:	1c7b      	adds	r3, r7, #1
 803162c:	d106      	bne.n	803163c <_strtoul_l.constprop.0+0xbc>
 803162e:	2322      	movs	r3, #34	; 0x22
 8031630:	f8ce 3000 	str.w	r3, [lr]
 8031634:	4638      	mov	r0, r7
 8031636:	b932      	cbnz	r2, 8031646 <_strtoul_l.constprop.0+0xc6>
 8031638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803163c:	b106      	cbz	r6, 8031640 <_strtoul_l.constprop.0+0xc0>
 803163e:	4240      	negs	r0, r0
 8031640:	2a00      	cmp	r2, #0
 8031642:	d0f9      	beq.n	8031638 <_strtoul_l.constprop.0+0xb8>
 8031644:	b107      	cbz	r7, 8031648 <_strtoul_l.constprop.0+0xc8>
 8031646:	1e69      	subs	r1, r5, #1
 8031648:	6011      	str	r1, [r2, #0]
 803164a:	e7f5      	b.n	8031638 <_strtoul_l.constprop.0+0xb8>
 803164c:	2430      	movs	r4, #48	; 0x30
 803164e:	2b00      	cmp	r3, #0
 8031650:	d1b5      	bne.n	80315be <_strtoul_l.constprop.0+0x3e>
 8031652:	2308      	movs	r3, #8
 8031654:	e7b3      	b.n	80315be <_strtoul_l.constprop.0+0x3e>
 8031656:	2c30      	cmp	r4, #48	; 0x30
 8031658:	d0a9      	beq.n	80315ae <_strtoul_l.constprop.0+0x2e>
 803165a:	230a      	movs	r3, #10
 803165c:	e7af      	b.n	80315be <_strtoul_l.constprop.0+0x3e>
 803165e:	bf00      	nop
 8031660:	08034b59 	.word	0x08034b59

08031664 <_strtoul_r>:
 8031664:	f7ff bf8c 	b.w	8031580 <_strtoul_l.constprop.0>

08031668 <__ascii_wctomb>:
 8031668:	b149      	cbz	r1, 803167e <__ascii_wctomb+0x16>
 803166a:	2aff      	cmp	r2, #255	; 0xff
 803166c:	bf85      	ittet	hi
 803166e:	238a      	movhi	r3, #138	; 0x8a
 8031670:	6003      	strhi	r3, [r0, #0]
 8031672:	700a      	strbls	r2, [r1, #0]
 8031674:	f04f 30ff 	movhi.w	r0, #4294967295
 8031678:	bf98      	it	ls
 803167a:	2001      	movls	r0, #1
 803167c:	4770      	bx	lr
 803167e:	4608      	mov	r0, r1
 8031680:	4770      	bx	lr

08031682 <_malloc_usable_size_r>:
 8031682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031686:	1f18      	subs	r0, r3, #4
 8031688:	2b00      	cmp	r3, #0
 803168a:	bfbc      	itt	lt
 803168c:	580b      	ldrlt	r3, [r1, r0]
 803168e:	18c0      	addlt	r0, r0, r3
 8031690:	4770      	bx	lr
	...

08031694 <_init>:
 8031694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031696:	bf00      	nop
 8031698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 803169a:	bc08      	pop	{r3}
 803169c:	469e      	mov	lr, r3
 803169e:	4770      	bx	lr

080316a0 <_fini>:
 80316a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80316a2:	bf00      	nop
 80316a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80316a6:	bc08      	pop	{r3}
 80316a8:	469e      	mov	lr, r3
 80316aa:	4770      	bx	lr
