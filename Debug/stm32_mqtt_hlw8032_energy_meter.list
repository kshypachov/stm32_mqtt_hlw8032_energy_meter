
stm32_mqtt_hlw8032_energy_meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000218bc  080101a0  080101a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003738  08031a60  08031a60  00031a60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08035198  08035198  000402f8  2**0
                  CONTENTS
  4 .ARM          00000008  08035198  08035198  00035198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080351a0  080351a0  000402f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080351a0  080351a0  000351a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080351a4  080351a4  000351a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  080351a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d81c  200002f8  080354a0  000402f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000db14  080354a0  0004db14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000402f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00040328  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f3bc  00000000  00000000  0004036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007cb4  00000000  00000000  0006f727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002af0  00000000  00000000  000773e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002296  00000000  00000000  00079ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fdd5  00000000  00000000  0007c166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033f43  00000000  00000000  0009bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa438  00000000  00000000  000cfe7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000cb34  00000000  00000000  0017a2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00186dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080101a0 <__do_global_dtors_aux>:
 80101a0:	b510      	push	{r4, lr}
 80101a2:	4c05      	ldr	r4, [pc, #20]	; (80101b8 <__do_global_dtors_aux+0x18>)
 80101a4:	7823      	ldrb	r3, [r4, #0]
 80101a6:	b933      	cbnz	r3, 80101b6 <__do_global_dtors_aux+0x16>
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <__do_global_dtors_aux+0x1c>)
 80101aa:	b113      	cbz	r3, 80101b2 <__do_global_dtors_aux+0x12>
 80101ac:	4804      	ldr	r0, [pc, #16]	; (80101c0 <__do_global_dtors_aux+0x20>)
 80101ae:	f3af 8000 	nop.w
 80101b2:	2301      	movs	r3, #1
 80101b4:	7023      	strb	r3, [r4, #0]
 80101b6:	bd10      	pop	{r4, pc}
 80101b8:	200002f8 	.word	0x200002f8
 80101bc:	00000000 	.word	0x00000000
 80101c0:	08031a44 	.word	0x08031a44

080101c4 <frame_dummy>:
 80101c4:	b508      	push	{r3, lr}
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <frame_dummy+0x10>)
 80101c8:	b11b      	cbz	r3, 80101d2 <frame_dummy+0xe>
 80101ca:	4903      	ldr	r1, [pc, #12]	; (80101d8 <frame_dummy+0x14>)
 80101cc:	4803      	ldr	r0, [pc, #12]	; (80101dc <frame_dummy+0x18>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	bd08      	pop	{r3, pc}
 80101d4:	00000000 	.word	0x00000000
 80101d8:	200002fc 	.word	0x200002fc
 80101dc:	08031a44 	.word	0x08031a44

080101e0 <strcmp>:
 80101e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e8:	2a01      	cmp	r2, #1
 80101ea:	bf28      	it	cs
 80101ec:	429a      	cmpcs	r2, r3
 80101ee:	d0f7      	beq.n	80101e0 <strcmp>
 80101f0:	1ad0      	subs	r0, r2, r3
 80101f2:	4770      	bx	lr
	...

08010200 <memchr>:
 8010200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8010204:	2a10      	cmp	r2, #16
 8010206:	db2b      	blt.n	8010260 <memchr+0x60>
 8010208:	f010 0f07 	tst.w	r0, #7
 801020c:	d008      	beq.n	8010220 <memchr+0x20>
 801020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010212:	3a01      	subs	r2, #1
 8010214:	428b      	cmp	r3, r1
 8010216:	d02d      	beq.n	8010274 <memchr+0x74>
 8010218:	f010 0f07 	tst.w	r0, #7
 801021c:	b342      	cbz	r2, 8010270 <memchr+0x70>
 801021e:	d1f6      	bne.n	801020e <memchr+0xe>
 8010220:	b4f0      	push	{r4, r5, r6, r7}
 8010222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8010226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801022a:	f022 0407 	bic.w	r4, r2, #7
 801022e:	f07f 0700 	mvns.w	r7, #0
 8010232:	2300      	movs	r3, #0
 8010234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8010238:	3c08      	subs	r4, #8
 801023a:	ea85 0501 	eor.w	r5, r5, r1
 801023e:	ea86 0601 	eor.w	r6, r6, r1
 8010242:	fa85 f547 	uadd8	r5, r5, r7
 8010246:	faa3 f587 	sel	r5, r3, r7
 801024a:	fa86 f647 	uadd8	r6, r6, r7
 801024e:	faa5 f687 	sel	r6, r5, r7
 8010252:	b98e      	cbnz	r6, 8010278 <memchr+0x78>
 8010254:	d1ee      	bne.n	8010234 <memchr+0x34>
 8010256:	bcf0      	pop	{r4, r5, r6, r7}
 8010258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801025c:	f002 0207 	and.w	r2, r2, #7
 8010260:	b132      	cbz	r2, 8010270 <memchr+0x70>
 8010262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010266:	3a01      	subs	r2, #1
 8010268:	ea83 0301 	eor.w	r3, r3, r1
 801026c:	b113      	cbz	r3, 8010274 <memchr+0x74>
 801026e:	d1f8      	bne.n	8010262 <memchr+0x62>
 8010270:	2000      	movs	r0, #0
 8010272:	4770      	bx	lr
 8010274:	3801      	subs	r0, #1
 8010276:	4770      	bx	lr
 8010278:	2d00      	cmp	r5, #0
 801027a:	bf06      	itte	eq
 801027c:	4635      	moveq	r5, r6
 801027e:	3803      	subeq	r0, #3
 8010280:	3807      	subne	r0, #7
 8010282:	f015 0f01 	tst.w	r5, #1
 8010286:	d107      	bne.n	8010298 <memchr+0x98>
 8010288:	3001      	adds	r0, #1
 801028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801028e:	bf02      	ittt	eq
 8010290:	3001      	addeq	r0, #1
 8010292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8010296:	3001      	addeq	r0, #1
 8010298:	bcf0      	pop	{r4, r5, r6, r7}
 801029a:	3801      	subs	r0, #1
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <strlen>:
 80102a0:	4603      	mov	r3, r0
 80102a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80102a6:	2a00      	cmp	r2, #0
 80102a8:	d1fb      	bne.n	80102a2 <strlen+0x2>
 80102aa:	1a18      	subs	r0, r3, r0
 80102ac:	3801      	subs	r0, #1
 80102ae:	4770      	bx	lr

080102b0 <__aeabi_drsub>:
 80102b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80102b4:	e002      	b.n	80102bc <__adddf3>
 80102b6:	bf00      	nop

080102b8 <__aeabi_dsub>:
 80102b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080102bc <__adddf3>:
 80102bc:	b530      	push	{r4, r5, lr}
 80102be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80102c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80102c6:	ea94 0f05 	teq	r4, r5
 80102ca:	bf08      	it	eq
 80102cc:	ea90 0f02 	teqeq	r0, r2
 80102d0:	bf1f      	itttt	ne
 80102d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80102d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80102da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80102de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80102e2:	f000 80e2 	beq.w	80104aa <__adddf3+0x1ee>
 80102e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80102ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80102ee:	bfb8      	it	lt
 80102f0:	426d      	neglt	r5, r5
 80102f2:	dd0c      	ble.n	801030e <__adddf3+0x52>
 80102f4:	442c      	add	r4, r5
 80102f6:	ea80 0202 	eor.w	r2, r0, r2
 80102fa:	ea81 0303 	eor.w	r3, r1, r3
 80102fe:	ea82 0000 	eor.w	r0, r2, r0
 8010302:	ea83 0101 	eor.w	r1, r3, r1
 8010306:	ea80 0202 	eor.w	r2, r0, r2
 801030a:	ea81 0303 	eor.w	r3, r1, r3
 801030e:	2d36      	cmp	r5, #54	; 0x36
 8010310:	bf88      	it	hi
 8010312:	bd30      	pophi	{r4, r5, pc}
 8010314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010324:	d002      	beq.n	801032c <__adddf3+0x70>
 8010326:	4240      	negs	r0, r0
 8010328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010338:	d002      	beq.n	8010340 <__adddf3+0x84>
 801033a:	4252      	negs	r2, r2
 801033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010340:	ea94 0f05 	teq	r4, r5
 8010344:	f000 80a7 	beq.w	8010496 <__adddf3+0x1da>
 8010348:	f1a4 0401 	sub.w	r4, r4, #1
 801034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010350:	db0d      	blt.n	801036e <__adddf3+0xb2>
 8010352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010356:	fa22 f205 	lsr.w	r2, r2, r5
 801035a:	1880      	adds	r0, r0, r2
 801035c:	f141 0100 	adc.w	r1, r1, #0
 8010360:	fa03 f20e 	lsl.w	r2, r3, lr
 8010364:	1880      	adds	r0, r0, r2
 8010366:	fa43 f305 	asr.w	r3, r3, r5
 801036a:	4159      	adcs	r1, r3
 801036c:	e00e      	b.n	801038c <__adddf3+0xd0>
 801036e:	f1a5 0520 	sub.w	r5, r5, #32
 8010372:	f10e 0e20 	add.w	lr, lr, #32
 8010376:	2a01      	cmp	r2, #1
 8010378:	fa03 fc0e 	lsl.w	ip, r3, lr
 801037c:	bf28      	it	cs
 801037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010382:	fa43 f305 	asr.w	r3, r3, r5
 8010386:	18c0      	adds	r0, r0, r3
 8010388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010390:	d507      	bpl.n	80103a2 <__adddf3+0xe6>
 8010392:	f04f 0e00 	mov.w	lr, #0
 8010396:	f1dc 0c00 	rsbs	ip, ip, #0
 801039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80103a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80103a6:	d31b      	bcc.n	80103e0 <__adddf3+0x124>
 80103a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80103ac:	d30c      	bcc.n	80103c8 <__adddf3+0x10c>
 80103ae:	0849      	lsrs	r1, r1, #1
 80103b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80103b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80103b8:	f104 0401 	add.w	r4, r4, #1
 80103bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80103c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80103c4:	f080 809a 	bcs.w	80104fc <__adddf3+0x240>
 80103c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80103cc:	bf08      	it	eq
 80103ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80103d2:	f150 0000 	adcs.w	r0, r0, #0
 80103d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80103da:	ea41 0105 	orr.w	r1, r1, r5
 80103de:	bd30      	pop	{r4, r5, pc}
 80103e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80103e4:	4140      	adcs	r0, r0
 80103e6:	eb41 0101 	adc.w	r1, r1, r1
 80103ea:	3c01      	subs	r4, #1
 80103ec:	bf28      	it	cs
 80103ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80103f2:	d2e9      	bcs.n	80103c8 <__adddf3+0x10c>
 80103f4:	f091 0f00 	teq	r1, #0
 80103f8:	bf04      	itt	eq
 80103fa:	4601      	moveq	r1, r0
 80103fc:	2000      	moveq	r0, #0
 80103fe:	fab1 f381 	clz	r3, r1
 8010402:	bf08      	it	eq
 8010404:	3320      	addeq	r3, #32
 8010406:	f1a3 030b 	sub.w	r3, r3, #11
 801040a:	f1b3 0220 	subs.w	r2, r3, #32
 801040e:	da0c      	bge.n	801042a <__adddf3+0x16e>
 8010410:	320c      	adds	r2, #12
 8010412:	dd08      	ble.n	8010426 <__adddf3+0x16a>
 8010414:	f102 0c14 	add.w	ip, r2, #20
 8010418:	f1c2 020c 	rsb	r2, r2, #12
 801041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010420:	fa21 f102 	lsr.w	r1, r1, r2
 8010424:	e00c      	b.n	8010440 <__adddf3+0x184>
 8010426:	f102 0214 	add.w	r2, r2, #20
 801042a:	bfd8      	it	le
 801042c:	f1c2 0c20 	rsble	ip, r2, #32
 8010430:	fa01 f102 	lsl.w	r1, r1, r2
 8010434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010438:	bfdc      	itt	le
 801043a:	ea41 010c 	orrle.w	r1, r1, ip
 801043e:	4090      	lslle	r0, r2
 8010440:	1ae4      	subs	r4, r4, r3
 8010442:	bfa2      	ittt	ge
 8010444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010448:	4329      	orrge	r1, r5
 801044a:	bd30      	popge	{r4, r5, pc}
 801044c:	ea6f 0404 	mvn.w	r4, r4
 8010450:	3c1f      	subs	r4, #31
 8010452:	da1c      	bge.n	801048e <__adddf3+0x1d2>
 8010454:	340c      	adds	r4, #12
 8010456:	dc0e      	bgt.n	8010476 <__adddf3+0x1ba>
 8010458:	f104 0414 	add.w	r4, r4, #20
 801045c:	f1c4 0220 	rsb	r2, r4, #32
 8010460:	fa20 f004 	lsr.w	r0, r0, r4
 8010464:	fa01 f302 	lsl.w	r3, r1, r2
 8010468:	ea40 0003 	orr.w	r0, r0, r3
 801046c:	fa21 f304 	lsr.w	r3, r1, r4
 8010470:	ea45 0103 	orr.w	r1, r5, r3
 8010474:	bd30      	pop	{r4, r5, pc}
 8010476:	f1c4 040c 	rsb	r4, r4, #12
 801047a:	f1c4 0220 	rsb	r2, r4, #32
 801047e:	fa20 f002 	lsr.w	r0, r0, r2
 8010482:	fa01 f304 	lsl.w	r3, r1, r4
 8010486:	ea40 0003 	orr.w	r0, r0, r3
 801048a:	4629      	mov	r1, r5
 801048c:	bd30      	pop	{r4, r5, pc}
 801048e:	fa21 f004 	lsr.w	r0, r1, r4
 8010492:	4629      	mov	r1, r5
 8010494:	bd30      	pop	{r4, r5, pc}
 8010496:	f094 0f00 	teq	r4, #0
 801049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801049e:	bf06      	itte	eq
 80104a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80104a4:	3401      	addeq	r4, #1
 80104a6:	3d01      	subne	r5, #1
 80104a8:	e74e      	b.n	8010348 <__adddf3+0x8c>
 80104aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80104ae:	bf18      	it	ne
 80104b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80104b4:	d029      	beq.n	801050a <__adddf3+0x24e>
 80104b6:	ea94 0f05 	teq	r4, r5
 80104ba:	bf08      	it	eq
 80104bc:	ea90 0f02 	teqeq	r0, r2
 80104c0:	d005      	beq.n	80104ce <__adddf3+0x212>
 80104c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80104c6:	bf04      	itt	eq
 80104c8:	4619      	moveq	r1, r3
 80104ca:	4610      	moveq	r0, r2
 80104cc:	bd30      	pop	{r4, r5, pc}
 80104ce:	ea91 0f03 	teq	r1, r3
 80104d2:	bf1e      	ittt	ne
 80104d4:	2100      	movne	r1, #0
 80104d6:	2000      	movne	r0, #0
 80104d8:	bd30      	popne	{r4, r5, pc}
 80104da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80104de:	d105      	bne.n	80104ec <__adddf3+0x230>
 80104e0:	0040      	lsls	r0, r0, #1
 80104e2:	4149      	adcs	r1, r1
 80104e4:	bf28      	it	cs
 80104e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80104ea:	bd30      	pop	{r4, r5, pc}
 80104ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80104f0:	bf3c      	itt	cc
 80104f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80104f6:	bd30      	popcc	{r4, r5, pc}
 80104f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80104fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010504:	f04f 0000 	mov.w	r0, #0
 8010508:	bd30      	pop	{r4, r5, pc}
 801050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801050e:	bf1a      	itte	ne
 8010510:	4619      	movne	r1, r3
 8010512:	4610      	movne	r0, r2
 8010514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010518:	bf1c      	itt	ne
 801051a:	460b      	movne	r3, r1
 801051c:	4602      	movne	r2, r0
 801051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010522:	bf06      	itte	eq
 8010524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010528:	ea91 0f03 	teqeq	r1, r3
 801052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010530:	bd30      	pop	{r4, r5, pc}
 8010532:	bf00      	nop

08010534 <__aeabi_ui2d>:
 8010534:	f090 0f00 	teq	r0, #0
 8010538:	bf04      	itt	eq
 801053a:	2100      	moveq	r1, #0
 801053c:	4770      	bxeq	lr
 801053e:	b530      	push	{r4, r5, lr}
 8010540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010548:	f04f 0500 	mov.w	r5, #0
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	e750      	b.n	80103f4 <__adddf3+0x138>
 8010552:	bf00      	nop

08010554 <__aeabi_i2d>:
 8010554:	f090 0f00 	teq	r0, #0
 8010558:	bf04      	itt	eq
 801055a:	2100      	moveq	r1, #0
 801055c:	4770      	bxeq	lr
 801055e:	b530      	push	{r4, r5, lr}
 8010560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801056c:	bf48      	it	mi
 801056e:	4240      	negmi	r0, r0
 8010570:	f04f 0100 	mov.w	r1, #0
 8010574:	e73e      	b.n	80103f4 <__adddf3+0x138>
 8010576:	bf00      	nop

08010578 <__aeabi_f2d>:
 8010578:	0042      	lsls	r2, r0, #1
 801057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010586:	bf1f      	itttt	ne
 8010588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010594:	4770      	bxne	lr
 8010596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801059a:	bf08      	it	eq
 801059c:	4770      	bxeq	lr
 801059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80105a2:	bf04      	itt	eq
 80105a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80105a8:	4770      	bxeq	lr
 80105aa:	b530      	push	{r4, r5, lr}
 80105ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80105b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80105b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80105b8:	e71c      	b.n	80103f4 <__adddf3+0x138>
 80105ba:	bf00      	nop

080105bc <__aeabi_ul2d>:
 80105bc:	ea50 0201 	orrs.w	r2, r0, r1
 80105c0:	bf08      	it	eq
 80105c2:	4770      	bxeq	lr
 80105c4:	b530      	push	{r4, r5, lr}
 80105c6:	f04f 0500 	mov.w	r5, #0
 80105ca:	e00a      	b.n	80105e2 <__aeabi_l2d+0x16>

080105cc <__aeabi_l2d>:
 80105cc:	ea50 0201 	orrs.w	r2, r0, r1
 80105d0:	bf08      	it	eq
 80105d2:	4770      	bxeq	lr
 80105d4:	b530      	push	{r4, r5, lr}
 80105d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80105da:	d502      	bpl.n	80105e2 <__aeabi_l2d+0x16>
 80105dc:	4240      	negs	r0, r0
 80105de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80105e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80105e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80105ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80105ee:	f43f aed8 	beq.w	80103a2 <__adddf3+0xe6>
 80105f2:	f04f 0203 	mov.w	r2, #3
 80105f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80105fa:	bf18      	it	ne
 80105fc:	3203      	addne	r2, #3
 80105fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010602:	bf18      	it	ne
 8010604:	3203      	addne	r2, #3
 8010606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801060a:	f1c2 0320 	rsb	r3, r2, #32
 801060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010612:	fa20 f002 	lsr.w	r0, r0, r2
 8010616:	fa01 fe03 	lsl.w	lr, r1, r3
 801061a:	ea40 000e 	orr.w	r0, r0, lr
 801061e:	fa21 f102 	lsr.w	r1, r1, r2
 8010622:	4414      	add	r4, r2
 8010624:	e6bd      	b.n	80103a2 <__adddf3+0xe6>
 8010626:	bf00      	nop

08010628 <__aeabi_dmul>:
 8010628:	b570      	push	{r4, r5, r6, lr}
 801062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010636:	bf1d      	ittte	ne
 8010638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801063c:	ea94 0f0c 	teqne	r4, ip
 8010640:	ea95 0f0c 	teqne	r5, ip
 8010644:	f000 f8de 	bleq	8010804 <__aeabi_dmul+0x1dc>
 8010648:	442c      	add	r4, r5
 801064a:	ea81 0603 	eor.w	r6, r1, r3
 801064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801065a:	bf18      	it	ne
 801065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010668:	d038      	beq.n	80106dc <__aeabi_dmul+0xb4>
 801066a:	fba0 ce02 	umull	ip, lr, r0, r2
 801066e:	f04f 0500 	mov.w	r5, #0
 8010672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801067e:	f04f 0600 	mov.w	r6, #0
 8010682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010686:	f09c 0f00 	teq	ip, #0
 801068a:	bf18      	it	ne
 801068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801069c:	d204      	bcs.n	80106a8 <__aeabi_dmul+0x80>
 801069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80106a2:	416d      	adcs	r5, r5
 80106a4:	eb46 0606 	adc.w	r6, r6, r6
 80106a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80106ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80106b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80106b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80106b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80106bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80106c0:	bf88      	it	hi
 80106c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80106c6:	d81e      	bhi.n	8010706 <__aeabi_dmul+0xde>
 80106c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80106cc:	bf08      	it	eq
 80106ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80106d2:	f150 0000 	adcs.w	r0, r0, #0
 80106d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80106e0:	ea46 0101 	orr.w	r1, r6, r1
 80106e4:	ea40 0002 	orr.w	r0, r0, r2
 80106e8:	ea81 0103 	eor.w	r1, r1, r3
 80106ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80106f0:	bfc2      	ittt	gt
 80106f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80106f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80106fa:	bd70      	popgt	{r4, r5, r6, pc}
 80106fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010700:	f04f 0e00 	mov.w	lr, #0
 8010704:	3c01      	subs	r4, #1
 8010706:	f300 80ab 	bgt.w	8010860 <__aeabi_dmul+0x238>
 801070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801070e:	bfde      	ittt	le
 8010710:	2000      	movle	r0, #0
 8010712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010716:	bd70      	pople	{r4, r5, r6, pc}
 8010718:	f1c4 0400 	rsb	r4, r4, #0
 801071c:	3c20      	subs	r4, #32
 801071e:	da35      	bge.n	801078c <__aeabi_dmul+0x164>
 8010720:	340c      	adds	r4, #12
 8010722:	dc1b      	bgt.n	801075c <__aeabi_dmul+0x134>
 8010724:	f104 0414 	add.w	r4, r4, #20
 8010728:	f1c4 0520 	rsb	r5, r4, #32
 801072c:	fa00 f305 	lsl.w	r3, r0, r5
 8010730:	fa20 f004 	lsr.w	r0, r0, r4
 8010734:	fa01 f205 	lsl.w	r2, r1, r5
 8010738:	ea40 0002 	orr.w	r0, r0, r2
 801073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010748:	fa21 f604 	lsr.w	r6, r1, r4
 801074c:	eb42 0106 	adc.w	r1, r2, r6
 8010750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010754:	bf08      	it	eq
 8010756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801075a:	bd70      	pop	{r4, r5, r6, pc}
 801075c:	f1c4 040c 	rsb	r4, r4, #12
 8010760:	f1c4 0520 	rsb	r5, r4, #32
 8010764:	fa00 f304 	lsl.w	r3, r0, r4
 8010768:	fa20 f005 	lsr.w	r0, r0, r5
 801076c:	fa01 f204 	lsl.w	r2, r1, r4
 8010770:	ea40 0002 	orr.w	r0, r0, r2
 8010774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801077c:	f141 0100 	adc.w	r1, r1, #0
 8010780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010784:	bf08      	it	eq
 8010786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801078a:	bd70      	pop	{r4, r5, r6, pc}
 801078c:	f1c4 0520 	rsb	r5, r4, #32
 8010790:	fa00 f205 	lsl.w	r2, r0, r5
 8010794:	ea4e 0e02 	orr.w	lr, lr, r2
 8010798:	fa20 f304 	lsr.w	r3, r0, r4
 801079c:	fa01 f205 	lsl.w	r2, r1, r5
 80107a0:	ea43 0302 	orr.w	r3, r3, r2
 80107a4:	fa21 f004 	lsr.w	r0, r1, r4
 80107a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107ac:	fa21 f204 	lsr.w	r2, r1, r4
 80107b0:	ea20 0002 	bic.w	r0, r0, r2
 80107b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80107b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80107bc:	bf08      	it	eq
 80107be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80107c2:	bd70      	pop	{r4, r5, r6, pc}
 80107c4:	f094 0f00 	teq	r4, #0
 80107c8:	d10f      	bne.n	80107ea <__aeabi_dmul+0x1c2>
 80107ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80107ce:	0040      	lsls	r0, r0, #1
 80107d0:	eb41 0101 	adc.w	r1, r1, r1
 80107d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107d8:	bf08      	it	eq
 80107da:	3c01      	subeq	r4, #1
 80107dc:	d0f7      	beq.n	80107ce <__aeabi_dmul+0x1a6>
 80107de:	ea41 0106 	orr.w	r1, r1, r6
 80107e2:	f095 0f00 	teq	r5, #0
 80107e6:	bf18      	it	ne
 80107e8:	4770      	bxne	lr
 80107ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80107ee:	0052      	lsls	r2, r2, #1
 80107f0:	eb43 0303 	adc.w	r3, r3, r3
 80107f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80107f8:	bf08      	it	eq
 80107fa:	3d01      	subeq	r5, #1
 80107fc:	d0f7      	beq.n	80107ee <__aeabi_dmul+0x1c6>
 80107fe:	ea43 0306 	orr.w	r3, r3, r6
 8010802:	4770      	bx	lr
 8010804:	ea94 0f0c 	teq	r4, ip
 8010808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801080c:	bf18      	it	ne
 801080e:	ea95 0f0c 	teqne	r5, ip
 8010812:	d00c      	beq.n	801082e <__aeabi_dmul+0x206>
 8010814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010818:	bf18      	it	ne
 801081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801081e:	d1d1      	bne.n	80107c4 <__aeabi_dmul+0x19c>
 8010820:	ea81 0103 	eor.w	r1, r1, r3
 8010824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010828:	f04f 0000 	mov.w	r0, #0
 801082c:	bd70      	pop	{r4, r5, r6, pc}
 801082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010832:	bf06      	itte	eq
 8010834:	4610      	moveq	r0, r2
 8010836:	4619      	moveq	r1, r3
 8010838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801083c:	d019      	beq.n	8010872 <__aeabi_dmul+0x24a>
 801083e:	ea94 0f0c 	teq	r4, ip
 8010842:	d102      	bne.n	801084a <__aeabi_dmul+0x222>
 8010844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010848:	d113      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801084a:	ea95 0f0c 	teq	r5, ip
 801084e:	d105      	bne.n	801085c <__aeabi_dmul+0x234>
 8010850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010854:	bf1c      	itt	ne
 8010856:	4610      	movne	r0, r2
 8010858:	4619      	movne	r1, r3
 801085a:	d10a      	bne.n	8010872 <__aeabi_dmul+0x24a>
 801085c:	ea81 0103 	eor.w	r1, r1, r3
 8010860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801086c:	f04f 0000 	mov.w	r0, #0
 8010870:	bd70      	pop	{r4, r5, r6, pc}
 8010872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801087a:	bd70      	pop	{r4, r5, r6, pc}

0801087c <__aeabi_ddiv>:
 801087c:	b570      	push	{r4, r5, r6, lr}
 801087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801088a:	bf1d      	ittte	ne
 801088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010890:	ea94 0f0c 	teqne	r4, ip
 8010894:	ea95 0f0c 	teqne	r5, ip
 8010898:	f000 f8a7 	bleq	80109ea <__aeabi_ddiv+0x16e>
 801089c:	eba4 0405 	sub.w	r4, r4, r5
 80108a0:	ea81 0e03 	eor.w	lr, r1, r3
 80108a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80108a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80108ac:	f000 8088 	beq.w	80109c0 <__aeabi_ddiv+0x144>
 80108b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80108b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80108b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80108bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80108c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80108c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80108cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80108d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80108d4:	429d      	cmp	r5, r3
 80108d6:	bf08      	it	eq
 80108d8:	4296      	cmpeq	r6, r2
 80108da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80108de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80108e2:	d202      	bcs.n	80108ea <__aeabi_ddiv+0x6e>
 80108e4:	085b      	lsrs	r3, r3, #1
 80108e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80108ea:	1ab6      	subs	r6, r6, r2
 80108ec:	eb65 0503 	sbc.w	r5, r5, r3
 80108f0:	085b      	lsrs	r3, r3, #1
 80108f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80108fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80108fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010906:	bf22      	ittt	cs
 8010908:	1ab6      	subcs	r6, r6, r2
 801090a:	4675      	movcs	r5, lr
 801090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010910:	085b      	lsrs	r3, r3, #1
 8010912:	ea4f 0232 	mov.w	r2, r2, rrx
 8010916:	ebb6 0e02 	subs.w	lr, r6, r2
 801091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801091e:	bf22      	ittt	cs
 8010920:	1ab6      	subcs	r6, r6, r2
 8010922:	4675      	movcs	r5, lr
 8010924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010928:	085b      	lsrs	r3, r3, #1
 801092a:	ea4f 0232 	mov.w	r2, r2, rrx
 801092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010936:	bf22      	ittt	cs
 8010938:	1ab6      	subcs	r6, r6, r2
 801093a:	4675      	movcs	r5, lr
 801093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010940:	085b      	lsrs	r3, r3, #1
 8010942:	ea4f 0232 	mov.w	r2, r2, rrx
 8010946:	ebb6 0e02 	subs.w	lr, r6, r2
 801094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801094e:	bf22      	ittt	cs
 8010950:	1ab6      	subcs	r6, r6, r2
 8010952:	4675      	movcs	r5, lr
 8010954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010958:	ea55 0e06 	orrs.w	lr, r5, r6
 801095c:	d018      	beq.n	8010990 <__aeabi_ddiv+0x114>
 801095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801097a:	d1c0      	bne.n	80108fe <__aeabi_ddiv+0x82>
 801097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010980:	d10b      	bne.n	801099a <__aeabi_ddiv+0x11e>
 8010982:	ea41 0100 	orr.w	r1, r1, r0
 8010986:	f04f 0000 	mov.w	r0, #0
 801098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801098e:	e7b6      	b.n	80108fe <__aeabi_ddiv+0x82>
 8010990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010994:	bf04      	itt	eq
 8010996:	4301      	orreq	r1, r0
 8010998:	2000      	moveq	r0, #0
 801099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801099e:	bf88      	it	hi
 80109a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80109a4:	f63f aeaf 	bhi.w	8010706 <__aeabi_dmul+0xde>
 80109a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80109ac:	bf04      	itt	eq
 80109ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80109b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80109b6:	f150 0000 	adcs.w	r0, r0, #0
 80109ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80109c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80109c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80109cc:	bfc2      	ittt	gt
 80109ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80109d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80109d6:	bd70      	popgt	{r4, r5, r6, pc}
 80109d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80109dc:	f04f 0e00 	mov.w	lr, #0
 80109e0:	3c01      	subs	r4, #1
 80109e2:	e690      	b.n	8010706 <__aeabi_dmul+0xde>
 80109e4:	ea45 0e06 	orr.w	lr, r5, r6
 80109e8:	e68d      	b.n	8010706 <__aeabi_dmul+0xde>
 80109ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80109ee:	ea94 0f0c 	teq	r4, ip
 80109f2:	bf08      	it	eq
 80109f4:	ea95 0f0c 	teqeq	r5, ip
 80109f8:	f43f af3b 	beq.w	8010872 <__aeabi_dmul+0x24a>
 80109fc:	ea94 0f0c 	teq	r4, ip
 8010a00:	d10a      	bne.n	8010a18 <__aeabi_ddiv+0x19c>
 8010a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010a06:	f47f af34 	bne.w	8010872 <__aeabi_dmul+0x24a>
 8010a0a:	ea95 0f0c 	teq	r5, ip
 8010a0e:	f47f af25 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a12:	4610      	mov	r0, r2
 8010a14:	4619      	mov	r1, r3
 8010a16:	e72c      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a18:	ea95 0f0c 	teq	r5, ip
 8010a1c:	d106      	bne.n	8010a2c <__aeabi_ddiv+0x1b0>
 8010a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010a22:	f43f aefd 	beq.w	8010820 <__aeabi_dmul+0x1f8>
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	e722      	b.n	8010872 <__aeabi_dmul+0x24a>
 8010a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010a30:	bf18      	it	ne
 8010a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010a36:	f47f aec5 	bne.w	80107c4 <__aeabi_dmul+0x19c>
 8010a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010a3e:	f47f af0d 	bne.w	801085c <__aeabi_dmul+0x234>
 8010a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010a46:	f47f aeeb 	bne.w	8010820 <__aeabi_dmul+0x1f8>
 8010a4a:	e712      	b.n	8010872 <__aeabi_dmul+0x24a>

08010a4c <__gedf2>:
 8010a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8010a50:	e006      	b.n	8010a60 <__cmpdf2+0x4>
 8010a52:	bf00      	nop

08010a54 <__ledf2>:
 8010a54:	f04f 0c01 	mov.w	ip, #1
 8010a58:	e002      	b.n	8010a60 <__cmpdf2+0x4>
 8010a5a:	bf00      	nop

08010a5c <__cmpdf2>:
 8010a5c:	f04f 0c01 	mov.w	ip, #1
 8010a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a70:	bf18      	it	ne
 8010a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010a76:	d01b      	beq.n	8010ab0 <__cmpdf2+0x54>
 8010a78:	b001      	add	sp, #4
 8010a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010a7e:	bf0c      	ite	eq
 8010a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010a84:	ea91 0f03 	teqne	r1, r3
 8010a88:	bf02      	ittt	eq
 8010a8a:	ea90 0f02 	teqeq	r0, r2
 8010a8e:	2000      	moveq	r0, #0
 8010a90:	4770      	bxeq	lr
 8010a92:	f110 0f00 	cmn.w	r0, #0
 8010a96:	ea91 0f03 	teq	r1, r3
 8010a9a:	bf58      	it	pl
 8010a9c:	4299      	cmppl	r1, r3
 8010a9e:	bf08      	it	eq
 8010aa0:	4290      	cmpeq	r0, r2
 8010aa2:	bf2c      	ite	cs
 8010aa4:	17d8      	asrcs	r0, r3, #31
 8010aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010aaa:	f040 0001 	orr.w	r0, r0, #1
 8010aae:	4770      	bx	lr
 8010ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ab8:	d102      	bne.n	8010ac0 <__cmpdf2+0x64>
 8010aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010abe:	d107      	bne.n	8010ad0 <__cmpdf2+0x74>
 8010ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010ac8:	d1d6      	bne.n	8010a78 <__cmpdf2+0x1c>
 8010aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010ace:	d0d3      	beq.n	8010a78 <__cmpdf2+0x1c>
 8010ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop

08010ad8 <__aeabi_cdrcmple>:
 8010ad8:	4684      	mov	ip, r0
 8010ada:	4610      	mov	r0, r2
 8010adc:	4662      	mov	r2, ip
 8010ade:	468c      	mov	ip, r1
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	4663      	mov	r3, ip
 8010ae4:	e000      	b.n	8010ae8 <__aeabi_cdcmpeq>
 8010ae6:	bf00      	nop

08010ae8 <__aeabi_cdcmpeq>:
 8010ae8:	b501      	push	{r0, lr}
 8010aea:	f7ff ffb7 	bl	8010a5c <__cmpdf2>
 8010aee:	2800      	cmp	r0, #0
 8010af0:	bf48      	it	mi
 8010af2:	f110 0f00 	cmnmi.w	r0, #0
 8010af6:	bd01      	pop	{r0, pc}

08010af8 <__aeabi_dcmpeq>:
 8010af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010afc:	f7ff fff4 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b00:	bf0c      	ite	eq
 8010b02:	2001      	moveq	r0, #1
 8010b04:	2000      	movne	r0, #0
 8010b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b0a:	bf00      	nop

08010b0c <__aeabi_dcmplt>:
 8010b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b10:	f7ff ffea 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b14:	bf34      	ite	cc
 8010b16:	2001      	movcc	r0, #1
 8010b18:	2000      	movcs	r0, #0
 8010b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b1e:	bf00      	nop

08010b20 <__aeabi_dcmple>:
 8010b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b24:	f7ff ffe0 	bl	8010ae8 <__aeabi_cdcmpeq>
 8010b28:	bf94      	ite	ls
 8010b2a:	2001      	movls	r0, #1
 8010b2c:	2000      	movhi	r0, #0
 8010b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b32:	bf00      	nop

08010b34 <__aeabi_dcmpge>:
 8010b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b38:	f7ff ffce 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b3c:	bf94      	ite	ls
 8010b3e:	2001      	movls	r0, #1
 8010b40:	2000      	movhi	r0, #0
 8010b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b46:	bf00      	nop

08010b48 <__aeabi_dcmpgt>:
 8010b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010b4c:	f7ff ffc4 	bl	8010ad8 <__aeabi_cdrcmple>
 8010b50:	bf34      	ite	cc
 8010b52:	2001      	movcc	r0, #1
 8010b54:	2000      	movcs	r0, #0
 8010b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8010b5a:	bf00      	nop

08010b5c <__aeabi_dcmpun>:
 8010b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b64:	d102      	bne.n	8010b6c <__aeabi_dcmpun+0x10>
 8010b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010b6a:	d10a      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010b74:	d102      	bne.n	8010b7c <__aeabi_dcmpun+0x20>
 8010b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010b7a:	d102      	bne.n	8010b82 <__aeabi_dcmpun+0x26>
 8010b7c:	f04f 0000 	mov.w	r0, #0
 8010b80:	4770      	bx	lr
 8010b82:	f04f 0001 	mov.w	r0, #1
 8010b86:	4770      	bx	lr

08010b88 <__aeabi_d2iz>:
 8010b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010b90:	d215      	bcs.n	8010bbe <__aeabi_d2iz+0x36>
 8010b92:	d511      	bpl.n	8010bb8 <__aeabi_d2iz+0x30>
 8010b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010b9c:	d912      	bls.n	8010bc4 <__aeabi_d2iz+0x3c>
 8010b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010bae:	fa23 f002 	lsr.w	r0, r3, r2
 8010bb2:	bf18      	it	ne
 8010bb4:	4240      	negne	r0, r0
 8010bb6:	4770      	bx	lr
 8010bb8:	f04f 0000 	mov.w	r0, #0
 8010bbc:	4770      	bx	lr
 8010bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010bc2:	d105      	bne.n	8010bd0 <__aeabi_d2iz+0x48>
 8010bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010bc8:	bf08      	it	eq
 8010bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010bce:	4770      	bx	lr
 8010bd0:	f04f 0000 	mov.w	r0, #0
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop

08010bd8 <__aeabi_d2uiz>:
 8010bd8:	004a      	lsls	r2, r1, #1
 8010bda:	d211      	bcs.n	8010c00 <__aeabi_d2uiz+0x28>
 8010bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010be0:	d211      	bcs.n	8010c06 <__aeabi_d2uiz+0x2e>
 8010be2:	d50d      	bpl.n	8010c00 <__aeabi_d2uiz+0x28>
 8010be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010bec:	d40e      	bmi.n	8010c0c <__aeabi_d2uiz+0x34>
 8010bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8010bfe:	4770      	bx	lr
 8010c00:	f04f 0000 	mov.w	r0, #0
 8010c04:	4770      	bx	lr
 8010c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010c0a:	d102      	bne.n	8010c12 <__aeabi_d2uiz+0x3a>
 8010c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c10:	4770      	bx	lr
 8010c12:	f04f 0000 	mov.w	r0, #0
 8010c16:	4770      	bx	lr

08010c18 <__aeabi_d2f>:
 8010c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010c20:	bf24      	itt	cs
 8010c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010c2a:	d90d      	bls.n	8010c48 <__aeabi_d2f+0x30>
 8010c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010c40:	bf08      	it	eq
 8010c42:	f020 0001 	biceq.w	r0, r0, #1
 8010c46:	4770      	bx	lr
 8010c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010c4c:	d121      	bne.n	8010c92 <__aeabi_d2f+0x7a>
 8010c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010c52:	bfbc      	itt	lt
 8010c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010c58:	4770      	bxlt	lr
 8010c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010c62:	f1c2 0218 	rsb	r2, r2, #24
 8010c66:	f1c2 0c20 	rsb	ip, r2, #32
 8010c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8010c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8010c72:	bf18      	it	ne
 8010c74:	f040 0001 	orrne.w	r0, r0, #1
 8010c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010c84:	ea40 000c 	orr.w	r0, r0, ip
 8010c88:	fa23 f302 	lsr.w	r3, r3, r2
 8010c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010c90:	e7cc      	b.n	8010c2c <__aeabi_d2f+0x14>
 8010c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010c96:	d107      	bne.n	8010ca8 <__aeabi_d2f+0x90>
 8010c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010c9c:	bf1e      	ittt	ne
 8010c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010ca6:	4770      	bxne	lr
 8010ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010cb4:	4770      	bx	lr
 8010cb6:	bf00      	nop

08010cb8 <__aeabi_uldivmod>:
 8010cb8:	b953      	cbnz	r3, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cba:	b94a      	cbnz	r2, 8010cd0 <__aeabi_uldivmod+0x18>
 8010cbc:	2900      	cmp	r1, #0
 8010cbe:	bf08      	it	eq
 8010cc0:	2800      	cmpeq	r0, #0
 8010cc2:	bf1c      	itt	ne
 8010cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8010cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8010ccc:	f000 b9ba 	b.w	8011044 <__aeabi_idiv0>
 8010cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8010cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010cd8:	f000 f850 	bl	8010d7c <__udivmoddi4>
 8010cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010ce4:	b004      	add	sp, #16
 8010ce6:	4770      	bx	lr

08010ce8 <__popcountsi2>:
 8010ce8:	0843      	lsrs	r3, r0, #1
 8010cea:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8010cee:	1ac0      	subs	r0, r0, r3
 8010cf0:	0883      	lsrs	r3, r0, #2
 8010cf2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8010cf6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8010cfa:	4418      	add	r0, r3
 8010cfc:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8010d00:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8010d04:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8010d08:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8010d0c:	0e00      	lsrs	r0, r0, #24
 8010d0e:	4770      	bx	lr

08010d10 <__aeabi_d2lz>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	2200      	movs	r2, #0
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	460d      	mov	r5, r1
 8010d1a:	f7ff fef7 	bl	8010b0c <__aeabi_dcmplt>
 8010d1e:	b928      	cbnz	r0, 8010d2c <__aeabi_d2lz+0x1c>
 8010d20:	4620      	mov	r0, r4
 8010d22:	4629      	mov	r1, r5
 8010d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d28:	f000 b80a 	b.w	8010d40 <__aeabi_d2ulz>
 8010d2c:	4620      	mov	r0, r4
 8010d2e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8010d32:	f000 f805 	bl	8010d40 <__aeabi_d2ulz>
 8010d36:	4240      	negs	r0, r0
 8010d38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d3c:	bd38      	pop	{r3, r4, r5, pc}
 8010d3e:	bf00      	nop

08010d40 <__aeabi_d2ulz>:
 8010d40:	b5d0      	push	{r4, r6, r7, lr}
 8010d42:	4b0c      	ldr	r3, [pc, #48]	; (8010d74 <__aeabi_d2ulz+0x34>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	f7ff fc6d 	bl	8010628 <__aeabi_dmul>
 8010d4e:	f7ff ff43 	bl	8010bd8 <__aeabi_d2uiz>
 8010d52:	4604      	mov	r4, r0
 8010d54:	f7ff fbee 	bl	8010534 <__aeabi_ui2d>
 8010d58:	4b07      	ldr	r3, [pc, #28]	; (8010d78 <__aeabi_d2ulz+0x38>)
 8010d5a:	2200      	movs	r2, #0
 8010d5c:	f7ff fc64 	bl	8010628 <__aeabi_dmul>
 8010d60:	4602      	mov	r2, r0
 8010d62:	460b      	mov	r3, r1
 8010d64:	4630      	mov	r0, r6
 8010d66:	4639      	mov	r1, r7
 8010d68:	f7ff faa6 	bl	80102b8 <__aeabi_dsub>
 8010d6c:	f7ff ff34 	bl	8010bd8 <__aeabi_d2uiz>
 8010d70:	4621      	mov	r1, r4
 8010d72:	bdd0      	pop	{r4, r6, r7, pc}
 8010d74:	3df00000 	.word	0x3df00000
 8010d78:	41f00000 	.word	0x41f00000

08010d7c <__udivmoddi4>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	9e08      	ldr	r6, [sp, #32]
 8010d82:	460d      	mov	r5, r1
 8010d84:	4604      	mov	r4, r0
 8010d86:	460f      	mov	r7, r1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d14a      	bne.n	8010e22 <__udivmoddi4+0xa6>
 8010d8c:	428a      	cmp	r2, r1
 8010d8e:	4694      	mov	ip, r2
 8010d90:	d965      	bls.n	8010e5e <__udivmoddi4+0xe2>
 8010d92:	fab2 f382 	clz	r3, r2
 8010d96:	b143      	cbz	r3, 8010daa <__udivmoddi4+0x2e>
 8010d98:	fa02 fc03 	lsl.w	ip, r2, r3
 8010d9c:	f1c3 0220 	rsb	r2, r3, #32
 8010da0:	409f      	lsls	r7, r3
 8010da2:	fa20 f202 	lsr.w	r2, r0, r2
 8010da6:	4317      	orrs	r7, r2
 8010da8:	409c      	lsls	r4, r3
 8010daa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8010dae:	fa1f f58c 	uxth.w	r5, ip
 8010db2:	fbb7 f1fe 	udiv	r1, r7, lr
 8010db6:	0c22      	lsrs	r2, r4, #16
 8010db8:	fb0e 7711 	mls	r7, lr, r1, r7
 8010dbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8010dc0:	fb01 f005 	mul.w	r0, r1, r5
 8010dc4:	4290      	cmp	r0, r2
 8010dc6:	d90a      	bls.n	8010dde <__udivmoddi4+0x62>
 8010dc8:	eb1c 0202 	adds.w	r2, ip, r2
 8010dcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8010dd0:	f080 811c 	bcs.w	801100c <__udivmoddi4+0x290>
 8010dd4:	4290      	cmp	r0, r2
 8010dd6:	f240 8119 	bls.w	801100c <__udivmoddi4+0x290>
 8010dda:	3902      	subs	r1, #2
 8010ddc:	4462      	add	r2, ip
 8010dde:	1a12      	subs	r2, r2, r0
 8010de0:	b2a4      	uxth	r4, r4
 8010de2:	fbb2 f0fe 	udiv	r0, r2, lr
 8010de6:	fb0e 2210 	mls	r2, lr, r0, r2
 8010dea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010dee:	fb00 f505 	mul.w	r5, r0, r5
 8010df2:	42a5      	cmp	r5, r4
 8010df4:	d90a      	bls.n	8010e0c <__udivmoddi4+0x90>
 8010df6:	eb1c 0404 	adds.w	r4, ip, r4
 8010dfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8010dfe:	f080 8107 	bcs.w	8011010 <__udivmoddi4+0x294>
 8010e02:	42a5      	cmp	r5, r4
 8010e04:	f240 8104 	bls.w	8011010 <__udivmoddi4+0x294>
 8010e08:	4464      	add	r4, ip
 8010e0a:	3802      	subs	r0, #2
 8010e0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8010e10:	1b64      	subs	r4, r4, r5
 8010e12:	2100      	movs	r1, #0
 8010e14:	b11e      	cbz	r6, 8010e1e <__udivmoddi4+0xa2>
 8010e16:	40dc      	lsrs	r4, r3
 8010e18:	2300      	movs	r3, #0
 8010e1a:	e9c6 4300 	strd	r4, r3, [r6]
 8010e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e22:	428b      	cmp	r3, r1
 8010e24:	d908      	bls.n	8010e38 <__udivmoddi4+0xbc>
 8010e26:	2e00      	cmp	r6, #0
 8010e28:	f000 80ed 	beq.w	8011006 <__udivmoddi4+0x28a>
 8010e2c:	2100      	movs	r1, #0
 8010e2e:	e9c6 0500 	strd	r0, r5, [r6]
 8010e32:	4608      	mov	r0, r1
 8010e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e38:	fab3 f183 	clz	r1, r3
 8010e3c:	2900      	cmp	r1, #0
 8010e3e:	d149      	bne.n	8010ed4 <__udivmoddi4+0x158>
 8010e40:	42ab      	cmp	r3, r5
 8010e42:	d302      	bcc.n	8010e4a <__udivmoddi4+0xce>
 8010e44:	4282      	cmp	r2, r0
 8010e46:	f200 80f8 	bhi.w	801103a <__udivmoddi4+0x2be>
 8010e4a:	1a84      	subs	r4, r0, r2
 8010e4c:	eb65 0203 	sbc.w	r2, r5, r3
 8010e50:	2001      	movs	r0, #1
 8010e52:	4617      	mov	r7, r2
 8010e54:	2e00      	cmp	r6, #0
 8010e56:	d0e2      	beq.n	8010e1e <__udivmoddi4+0xa2>
 8010e58:	e9c6 4700 	strd	r4, r7, [r6]
 8010e5c:	e7df      	b.n	8010e1e <__udivmoddi4+0xa2>
 8010e5e:	b902      	cbnz	r2, 8010e62 <__udivmoddi4+0xe6>
 8010e60:	deff      	udf	#255	; 0xff
 8010e62:	fab2 f382 	clz	r3, r2
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f040 8090 	bne.w	8010f8c <__udivmoddi4+0x210>
 8010e6c:	1a8a      	subs	r2, r1, r2
 8010e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010e72:	fa1f fe8c 	uxth.w	lr, ip
 8010e76:	2101      	movs	r1, #1
 8010e78:	fbb2 f5f7 	udiv	r5, r2, r7
 8010e7c:	fb07 2015 	mls	r0, r7, r5, r2
 8010e80:	0c22      	lsrs	r2, r4, #16
 8010e82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8010e86:	fb0e f005 	mul.w	r0, lr, r5
 8010e8a:	4290      	cmp	r0, r2
 8010e8c:	d908      	bls.n	8010ea0 <__udivmoddi4+0x124>
 8010e8e:	eb1c 0202 	adds.w	r2, ip, r2
 8010e92:	f105 38ff 	add.w	r8, r5, #4294967295
 8010e96:	d202      	bcs.n	8010e9e <__udivmoddi4+0x122>
 8010e98:	4290      	cmp	r0, r2
 8010e9a:	f200 80cb 	bhi.w	8011034 <__udivmoddi4+0x2b8>
 8010e9e:	4645      	mov	r5, r8
 8010ea0:	1a12      	subs	r2, r2, r0
 8010ea2:	b2a4      	uxth	r4, r4
 8010ea4:	fbb2 f0f7 	udiv	r0, r2, r7
 8010ea8:	fb07 2210 	mls	r2, r7, r0, r2
 8010eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8010eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8010eb4:	45a6      	cmp	lr, r4
 8010eb6:	d908      	bls.n	8010eca <__udivmoddi4+0x14e>
 8010eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8010ebc:	f100 32ff 	add.w	r2, r0, #4294967295
 8010ec0:	d202      	bcs.n	8010ec8 <__udivmoddi4+0x14c>
 8010ec2:	45a6      	cmp	lr, r4
 8010ec4:	f200 80bb 	bhi.w	801103e <__udivmoddi4+0x2c2>
 8010ec8:	4610      	mov	r0, r2
 8010eca:	eba4 040e 	sub.w	r4, r4, lr
 8010ece:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8010ed2:	e79f      	b.n	8010e14 <__udivmoddi4+0x98>
 8010ed4:	f1c1 0720 	rsb	r7, r1, #32
 8010ed8:	408b      	lsls	r3, r1
 8010eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8010ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8010ee2:	fa05 f401 	lsl.w	r4, r5, r1
 8010ee6:	fa20 f307 	lsr.w	r3, r0, r7
 8010eea:	40fd      	lsrs	r5, r7
 8010eec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8010ef0:	4323      	orrs	r3, r4
 8010ef2:	fbb5 f8f9 	udiv	r8, r5, r9
 8010ef6:	fa1f fe8c 	uxth.w	lr, ip
 8010efa:	fb09 5518 	mls	r5, r9, r8, r5
 8010efe:	0c1c      	lsrs	r4, r3, #16
 8010f00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8010f04:	fb08 f50e 	mul.w	r5, r8, lr
 8010f08:	42a5      	cmp	r5, r4
 8010f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8010f0e:	fa00 f001 	lsl.w	r0, r0, r1
 8010f12:	d90b      	bls.n	8010f2c <__udivmoddi4+0x1b0>
 8010f14:	eb1c 0404 	adds.w	r4, ip, r4
 8010f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8010f1c:	f080 8088 	bcs.w	8011030 <__udivmoddi4+0x2b4>
 8010f20:	42a5      	cmp	r5, r4
 8010f22:	f240 8085 	bls.w	8011030 <__udivmoddi4+0x2b4>
 8010f26:	f1a8 0802 	sub.w	r8, r8, #2
 8010f2a:	4464      	add	r4, ip
 8010f2c:	1b64      	subs	r4, r4, r5
 8010f2e:	b29d      	uxth	r5, r3
 8010f30:	fbb4 f3f9 	udiv	r3, r4, r9
 8010f34:	fb09 4413 	mls	r4, r9, r3, r4
 8010f38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8010f3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8010f40:	45a6      	cmp	lr, r4
 8010f42:	d908      	bls.n	8010f56 <__udivmoddi4+0x1da>
 8010f44:	eb1c 0404 	adds.w	r4, ip, r4
 8010f48:	f103 35ff 	add.w	r5, r3, #4294967295
 8010f4c:	d26c      	bcs.n	8011028 <__udivmoddi4+0x2ac>
 8010f4e:	45a6      	cmp	lr, r4
 8010f50:	d96a      	bls.n	8011028 <__udivmoddi4+0x2ac>
 8010f52:	3b02      	subs	r3, #2
 8010f54:	4464      	add	r4, ip
 8010f56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010f5a:	fba3 9502 	umull	r9, r5, r3, r2
 8010f5e:	eba4 040e 	sub.w	r4, r4, lr
 8010f62:	42ac      	cmp	r4, r5
 8010f64:	46c8      	mov	r8, r9
 8010f66:	46ae      	mov	lr, r5
 8010f68:	d356      	bcc.n	8011018 <__udivmoddi4+0x29c>
 8010f6a:	d053      	beq.n	8011014 <__udivmoddi4+0x298>
 8010f6c:	b156      	cbz	r6, 8010f84 <__udivmoddi4+0x208>
 8010f6e:	ebb0 0208 	subs.w	r2, r0, r8
 8010f72:	eb64 040e 	sbc.w	r4, r4, lr
 8010f76:	fa04 f707 	lsl.w	r7, r4, r7
 8010f7a:	40ca      	lsrs	r2, r1
 8010f7c:	40cc      	lsrs	r4, r1
 8010f7e:	4317      	orrs	r7, r2
 8010f80:	e9c6 7400 	strd	r7, r4, [r6]
 8010f84:	4618      	mov	r0, r3
 8010f86:	2100      	movs	r1, #0
 8010f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f8c:	f1c3 0120 	rsb	r1, r3, #32
 8010f90:	fa02 fc03 	lsl.w	ip, r2, r3
 8010f94:	fa20 f201 	lsr.w	r2, r0, r1
 8010f98:	fa25 f101 	lsr.w	r1, r5, r1
 8010f9c:	409d      	lsls	r5, r3
 8010f9e:	432a      	orrs	r2, r5
 8010fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8010fa4:	fa1f fe8c 	uxth.w	lr, ip
 8010fa8:	fbb1 f0f7 	udiv	r0, r1, r7
 8010fac:	fb07 1510 	mls	r5, r7, r0, r1
 8010fb0:	0c11      	lsrs	r1, r2, #16
 8010fb2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8010fb6:	fb00 f50e 	mul.w	r5, r0, lr
 8010fba:	428d      	cmp	r5, r1
 8010fbc:	fa04 f403 	lsl.w	r4, r4, r3
 8010fc0:	d908      	bls.n	8010fd4 <__udivmoddi4+0x258>
 8010fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8010fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8010fca:	d22f      	bcs.n	801102c <__udivmoddi4+0x2b0>
 8010fcc:	428d      	cmp	r5, r1
 8010fce:	d92d      	bls.n	801102c <__udivmoddi4+0x2b0>
 8010fd0:	3802      	subs	r0, #2
 8010fd2:	4461      	add	r1, ip
 8010fd4:	1b49      	subs	r1, r1, r5
 8010fd6:	b292      	uxth	r2, r2
 8010fd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8010fdc:	fb07 1115 	mls	r1, r7, r5, r1
 8010fe0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8010fe4:	fb05 f10e 	mul.w	r1, r5, lr
 8010fe8:	4291      	cmp	r1, r2
 8010fea:	d908      	bls.n	8010ffe <__udivmoddi4+0x282>
 8010fec:	eb1c 0202 	adds.w	r2, ip, r2
 8010ff0:	f105 38ff 	add.w	r8, r5, #4294967295
 8010ff4:	d216      	bcs.n	8011024 <__udivmoddi4+0x2a8>
 8010ff6:	4291      	cmp	r1, r2
 8010ff8:	d914      	bls.n	8011024 <__udivmoddi4+0x2a8>
 8010ffa:	3d02      	subs	r5, #2
 8010ffc:	4462      	add	r2, ip
 8010ffe:	1a52      	subs	r2, r2, r1
 8011000:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8011004:	e738      	b.n	8010e78 <__udivmoddi4+0xfc>
 8011006:	4631      	mov	r1, r6
 8011008:	4630      	mov	r0, r6
 801100a:	e708      	b.n	8010e1e <__udivmoddi4+0xa2>
 801100c:	4639      	mov	r1, r7
 801100e:	e6e6      	b.n	8010dde <__udivmoddi4+0x62>
 8011010:	4610      	mov	r0, r2
 8011012:	e6fb      	b.n	8010e0c <__udivmoddi4+0x90>
 8011014:	4548      	cmp	r0, r9
 8011016:	d2a9      	bcs.n	8010f6c <__udivmoddi4+0x1f0>
 8011018:	ebb9 0802 	subs.w	r8, r9, r2
 801101c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8011020:	3b01      	subs	r3, #1
 8011022:	e7a3      	b.n	8010f6c <__udivmoddi4+0x1f0>
 8011024:	4645      	mov	r5, r8
 8011026:	e7ea      	b.n	8010ffe <__udivmoddi4+0x282>
 8011028:	462b      	mov	r3, r5
 801102a:	e794      	b.n	8010f56 <__udivmoddi4+0x1da>
 801102c:	4640      	mov	r0, r8
 801102e:	e7d1      	b.n	8010fd4 <__udivmoddi4+0x258>
 8011030:	46d0      	mov	r8, sl
 8011032:	e77b      	b.n	8010f2c <__udivmoddi4+0x1b0>
 8011034:	3d02      	subs	r5, #2
 8011036:	4462      	add	r2, ip
 8011038:	e732      	b.n	8010ea0 <__udivmoddi4+0x124>
 801103a:	4608      	mov	r0, r1
 801103c:	e70a      	b.n	8010e54 <__udivmoddi4+0xd8>
 801103e:	4464      	add	r4, ip
 8011040:	3802      	subs	r0, #2
 8011042:	e742      	b.n	8010eca <__udivmoddi4+0x14e>

08011044 <__aeabi_idiv0>:
 8011044:	4770      	bx	lr
 8011046:	bf00      	nop

08011048 <configureTimerForRunTimeStats>:
void vApplicationTickHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0

}
 801104c:	bf00      	nop
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8011056:	b480      	push	{r7}
 8011058:	af00      	add	r7, sp, #0
return 0;
 801105a:	2300      	movs	r3, #0
}
 801105c:	4618      	mov	r0, r3
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr

08011066 <vApplicationTickHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 8011066:	b580      	push	{r7, lr}
 8011068:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	mqtt_1ms_tik();
 801106a:	f003 fa85 	bl	8014578 <mqtt_1ms_tik>
}
 801106e:	bf00      	nop
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <HAL_UARTEx_RxEventCallback>:
void EthMutexRelease (void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	460b      	mov	r3, r1
 801107e:	807b      	strh	r3, [r7, #2]

	if (huart->Instance == USART2){
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	4a0e      	ldr	r2, [pc, #56]	; (80110c0 <HAL_UARTEx_RxEventCallback+0x4c>)
 8011086:	4293      	cmp	r3, r2
 8011088:	d116      	bne.n	80110b8 <HAL_UARTEx_RxEventCallback+0x44>
		if (Size == 24){
 801108a:	887b      	ldrh	r3, [r7, #2]
 801108c:	2b18      	cmp	r3, #24
 801108e:	d113      	bne.n	80110b8 <HAL_UARTEx_RxEventCallback+0x44>
			if (!osMessageQueueGetCount(rowPowerSensorQHandle)){
 8011090:	4b0c      	ldr	r3, [pc, #48]	; (80110c4 <HAL_UARTEx_RxEventCallback+0x50>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4618      	mov	r0, r3
 8011096:	f00f fbab 	bl	80207f0 <osMessageQueueGetCount>
 801109a:	4603      	mov	r3, r0
 801109c:	2b00      	cmp	r3, #0
 801109e:	d106      	bne.n	80110ae <HAL_UARTEx_RxEventCallback+0x3a>
				osMessageQueuePut(rowPowerSensorQHandle, &data_bufer, 0, 0);
 80110a0:	4b08      	ldr	r3, [pc, #32]	; (80110c4 <HAL_UARTEx_RxEventCallback+0x50>)
 80110a2:	6818      	ldr	r0, [r3, #0]
 80110a4:	2300      	movs	r3, #0
 80110a6:	2200      	movs	r2, #0
 80110a8:	4907      	ldr	r1, [pc, #28]	; (80110c8 <HAL_UARTEx_RxEventCallback+0x54>)
 80110aa:	f00f fae3 	bl	8020674 <osMessageQueuePut>
			}
			HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80110ae:	2218      	movs	r2, #24
 80110b0:	4905      	ldr	r1, [pc, #20]	; (80110c8 <HAL_UARTEx_RxEventCallback+0x54>)
 80110b2:	4806      	ldr	r0, [pc, #24]	; (80110cc <HAL_UARTEx_RxEventCallback+0x58>)
 80110b4:	f006 fc9a 	bl	80179ec <HAL_UARTEx_ReceiveToIdle_IT>
		}
	}
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	40004400 	.word	0x40004400
 80110c4:	20000448 	.word	0x20000448
 80110c8:	20000474 	.word	0x20000474
 80110cc:	200003d8 	.word	0x200003d8

080110d0 <EthMutexTake>:

void EthMutexTake(void){
 80110d0:	b580      	push	{r7, lr}
 80110d2:	af00      	add	r7, sp, #0
	osMutexAcquire(NetworkHandle, osWaitForever);
 80110d4:	4b04      	ldr	r3, [pc, #16]	; (80110e8 <EthMutexTake+0x18>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f04f 31ff 	mov.w	r1, #4294967295
 80110dc:	4618      	mov	r0, r3
 80110de:	f00f f9ce 	bl	802047e <osMutexAcquire>
}
 80110e2:	bf00      	nop
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20000464 	.word	0x20000464

080110ec <EthMutexRelease>:

void EthMutexRelease(void){
 80110ec:	b580      	push	{r7, lr}
 80110ee:	af00      	add	r7, sp, #0
	osMutexRelease(NetworkHandle);
 80110f0:	4b03      	ldr	r3, [pc, #12]	; (8011100 <EthMutexRelease+0x14>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f00f fa0d 	bl	8020514 <osMutexRelease>
}
 80110fa:	bf00      	nop
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	20000464 	.word	0x20000464

08011104 <LfsMutexTake>:

void LfsMutexTake(void){
 8011104:	b580      	push	{r7, lr}
 8011106:	af00      	add	r7, sp, #0
	osMutexAcquire(LFSHandle, osWaitForever);
 8011108:	4b04      	ldr	r3, [pc, #16]	; (801111c <LfsMutexTake+0x18>)
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f04f 31ff 	mov.w	r1, #4294967295
 8011110:	4618      	mov	r0, r3
 8011112:	f00f f9b4 	bl	802047e <osMutexAcquire>
}
 8011116:	bf00      	nop
 8011118:	bd80      	pop	{r7, pc}
 801111a:	bf00      	nop
 801111c:	20000468 	.word	0x20000468

08011120 <LfsMutexRelease>:

void LfsMutexRelease(void){
 8011120:	b580      	push	{r7, lr}
 8011122:	af00      	add	r7, sp, #0
	osMutexRelease(LFSHandle);
 8011124:	4b03      	ldr	r3, [pc, #12]	; (8011134 <LfsMutexRelease+0x14>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	4618      	mov	r0, r3
 801112a:	f00f f9f3 	bl	8020514 <osMutexRelease>
}
 801112e:	bf00      	nop
 8011130:	bd80      	pop	{r7, pc}
 8011132:	bf00      	nop
 8011134:	20000468 	.word	0x20000468

08011138 <SocketMutexTake>:

void SocketMutexTake(void){
 8011138:	b580      	push	{r7, lr}
 801113a:	af00      	add	r7, sp, #0
	osMutexAcquire(SocketHandle, osWaitForever);
 801113c:	4b04      	ldr	r3, [pc, #16]	; (8011150 <SocketMutexTake+0x18>)
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	f04f 31ff 	mov.w	r1, #4294967295
 8011144:	4618      	mov	r0, r3
 8011146:	f00f f99a 	bl	802047e <osMutexAcquire>
}
 801114a:	bf00      	nop
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	2000046c 	.word	0x2000046c

08011154 <SocketMutexRelease>:

void SocketMutexRelease(void){
 8011154:	b580      	push	{r7, lr}
 8011156:	af00      	add	r7, sp, #0
	osMutexRelease(SocketHandle);
 8011158:	4b03      	ldr	r3, [pc, #12]	; (8011168 <SocketMutexRelease+0x14>)
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	4618      	mov	r0, r3
 801115e:	f00f f9d9 	bl	8020514 <osMutexRelease>
}
 8011162:	bf00      	nop
 8011164:	bd80      	pop	{r7, pc}
 8011166:	bf00      	nop
 8011168:	2000046c 	.word	0x2000046c

0801116c <ServiceSockMutexTake>:

void ServiceSockMutexTake(){
 801116c:	b580      	push	{r7, lr}
 801116e:	af00      	add	r7, sp, #0
	osMutexAcquire(ServiceSocketHandle, osWaitForever);
 8011170:	4b04      	ldr	r3, [pc, #16]	; (8011184 <ServiceSockMutexTake+0x18>)
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f04f 31ff 	mov.w	r1, #4294967295
 8011178:	4618      	mov	r0, r3
 801117a:	f00f f980 	bl	802047e <osMutexAcquire>
}
 801117e:	bf00      	nop
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	20000470 	.word	0x20000470

08011188 <ServiceSockMutexRelease>:

void ServiceSockMutexRelease(){
 8011188:	b580      	push	{r7, lr}
 801118a:	af00      	add	r7, sp, #0
	osMutexRelease(ServiceSocketHandle);
 801118c:	4b03      	ldr	r3, [pc, #12]	; (801119c <ServiceSockMutexRelease+0x14>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	4618      	mov	r0, r3
 8011192:	f00f f9bf 	bl	8020514 <osMutexRelease>
}
 8011196:	bf00      	nop
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	20000470 	.word	0x20000470

080111a0 <PowerON_HLW8032>:

void PowerON_HLW8032(){
 80111a0:	b580      	push	{r7, lr}
 80111a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_RESET);
 80111a4:	2200      	movs	r2, #0
 80111a6:	2102      	movs	r1, #2
 80111a8:	4802      	ldr	r0, [pc, #8]	; (80111b4 <PowerON_HLW8032+0x14>)
 80111aa:	f004 fe4f 	bl	8015e4c <HAL_GPIO_WritePin>
}
 80111ae:	bf00      	nop
 80111b0:	bd80      	pop	{r7, pc}
 80111b2:	bf00      	nop
 80111b4:	40020000 	.word	0x40020000

080111b8 <PowerOFF_HLW8032>:

void PowerOFF_HLW8032(){
 80111b8:	b580      	push	{r7, lr}
 80111ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin,GPIO_PIN_SET);
 80111bc:	2201      	movs	r2, #1
 80111be:	2102      	movs	r1, #2
 80111c0:	4802      	ldr	r0, [pc, #8]	; (80111cc <PowerOFF_HLW8032+0x14>)
 80111c2:	f004 fe43 	bl	8015e4c <HAL_GPIO_WritePin>
}
 80111c6:	bf00      	nop
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	40020000 	.word	0x40020000

080111d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80111d4:	b672      	cpsid	i
}
 80111d6:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = (uint32_t)0x08000000 | (0x08010000 & (uint32_t)0x1FFFFF80);
 80111d8:	4b60      	ldr	r3, [pc, #384]	; (801135c <main+0x18c>)
 80111da:	4a61      	ldr	r2, [pc, #388]	; (8011360 <main+0x190>)
 80111dc:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80111de:	b662      	cpsie	i
}
 80111e0:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80111e2:	f004 fadd 	bl	80157a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80111e6:	f000 f927 	bl	8011438 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  dns_service_reg_cb_net_ready(assigned_ip);
 80111ea:	485e      	ldr	r0, [pc, #376]	; (8011364 <main+0x194>)
 80111ec:	f00b fc9e 	bl	801cb2c <dns_service_reg_cb_net_ready>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80111f0:	f000 fa54 	bl	801169c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80111f4:	f000 fa26 	bl	8011644 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80111f8:	f000 f9b8 	bl	801156c <MX_SPI1_Init>
  MX_SPI3_Init();
 80111fc:	f000 f9ec 	bl	80115d8 <MX_SPI3_Init>
  MX_MBEDTLS_Init();
 8011200:	f00e ff36 	bl	8020070 <MX_MBEDTLS_Init>
  MX_CRC_Init();
 8011204:	f000 f984 	bl	8011510 <MX_CRC_Init>
  MX_IWDG_Init();
 8011208:	f000 f996 	bl	8011538 <MX_IWDG_Init>
  /* Call PreOsInit function */
  MX_MBEDTLS_Init();
 801120c:	f00e ff30 	bl	8020070 <MX_MBEDTLS_Init>
//  if (EthernetEthPool == NULL) Error_Handler();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8011210:	f00e ff7a 	bl	8020108 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Network */
  NetworkHandle = osMutexNew(&Network_attributes);
 8011214:	4854      	ldr	r0, [pc, #336]	; (8011368 <main+0x198>)
 8011216:	f00f f8ac 	bl	8020372 <osMutexNew>
 801121a:	4603      	mov	r3, r0
 801121c:	4a53      	ldr	r2, [pc, #332]	; (801136c <main+0x19c>)
 801121e:	6013      	str	r3, [r2, #0]

  /* creation of LFS */
  LFSHandle = osMutexNew(&LFS_attributes);
 8011220:	4853      	ldr	r0, [pc, #332]	; (8011370 <main+0x1a0>)
 8011222:	f00f f8a6 	bl	8020372 <osMutexNew>
 8011226:	4603      	mov	r3, r0
 8011228:	4a52      	ldr	r2, [pc, #328]	; (8011374 <main+0x1a4>)
 801122a:	6013      	str	r3, [r2, #0]

  /* creation of Socket */
  SocketHandle = osMutexNew(&Socket_attributes);
 801122c:	4852      	ldr	r0, [pc, #328]	; (8011378 <main+0x1a8>)
 801122e:	f00f f8a0 	bl	8020372 <osMutexNew>
 8011232:	4603      	mov	r3, r0
 8011234:	4a51      	ldr	r2, [pc, #324]	; (801137c <main+0x1ac>)
 8011236:	6013      	str	r3, [r2, #0]

  /* creation of ServiceSocket */
  ServiceSocketHandle = osMutexNew(&ServiceSocket_attributes);
 8011238:	4851      	ldr	r0, [pc, #324]	; (8011380 <main+0x1b0>)
 801123a:	f00f f89a 	bl	8020372 <osMutexNew>
 801123e:	4603      	mov	r3, r0
 8011240:	4a50      	ldr	r2, [pc, #320]	; (8011384 <main+0x1b4>)
 8011242:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of rowPowerSensorQ */
  rowPowerSensorQHandle = osMessageQueueNew (1, 30, &rowPowerSensorQ_attributes);
 8011244:	4a50      	ldr	r2, [pc, #320]	; (8011388 <main+0x1b8>)
 8011246:	211e      	movs	r1, #30
 8011248:	2001      	movs	r0, #1
 801124a:	f00f f9a0 	bl	802058e <osMessageQueueNew>
 801124e:	4603      	mov	r3, r0
 8011250:	4a4e      	ldr	r2, [pc, #312]	; (801138c <main+0x1bc>)
 8011252:	6013      	str	r3, [r2, #0]

  /* creation of EthernetInfoQ */
  EthernetInfoQHandle = osMessageQueueNew (1, sizeof(Ethernet_info_struct), &EthernetInfoQ_attributes);
 8011254:	4a4e      	ldr	r2, [pc, #312]	; (8011390 <main+0x1c0>)
 8011256:	2120      	movs	r1, #32
 8011258:	2001      	movs	r0, #1
 801125a:	f00f f998 	bl	802058e <osMessageQueueNew>
 801125e:	4603      	mov	r3, r0
 8011260:	4a4c      	ldr	r2, [pc, #304]	; (8011394 <main+0x1c4>)
 8011262:	6013      	str	r3, [r2, #0]

  /* creation of PowerDataQ */
  PowerDataQHandle = osMessageQueueNew (1, sizeof(PowerSensStruct), &PowerDataQ_attributes);
 8011264:	4a4c      	ldr	r2, [pc, #304]	; (8011398 <main+0x1c8>)
 8011266:	2124      	movs	r1, #36	; 0x24
 8011268:	2001      	movs	r0, #1
 801126a:	f00f f990 	bl	802058e <osMessageQueueNew>
 801126e:	4603      	mov	r3, r0
 8011270:	4a4a      	ldr	r2, [pc, #296]	; (801139c <main+0x1cc>)
 8011272:	6013      	str	r3, [r2, #0]

  /* creation of Curr_sensor_settings */
  Curr_sensor_settingsHandle = osMessageQueueNew (1, sizeof(P_sens_sett_struct), &Curr_sensor_settings_attributes);
 8011274:	4a4a      	ldr	r2, [pc, #296]	; (80113a0 <main+0x1d0>)
 8011276:	2108      	movs	r1, #8
 8011278:	2001      	movs	r0, #1
 801127a:	f00f f988 	bl	802058e <osMessageQueueNew>
 801127e:	4603      	mov	r3, r0
 8011280:	4a48      	ldr	r2, [pc, #288]	; (80113a4 <main+0x1d4>)
 8011282:	6013      	str	r3, [r2, #0]

  /* creation of mqttQ */
  mqttQHandle = osMessageQueueNew (1, sizeof(MQTT_cred_struct), &mqttQ_attributes);
 8011284:	4a48      	ldr	r2, [pc, #288]	; (80113a8 <main+0x1d8>)
 8011286:	21c6      	movs	r1, #198	; 0xc6
 8011288:	2001      	movs	r0, #1
 801128a:	f00f f980 	bl	802058e <osMessageQueueNew>
 801128e:	4603      	mov	r3, r0
 8011290:	4a46      	ldr	r2, [pc, #280]	; (80113ac <main+0x1dc>)
 8011292:	6013      	str	r3, [r2, #0]

  /* creation of mb_tcp_settingsQ */
  mb_tcp_settingsQHandle = osMessageQueueNew (1, sizeof(ModBusTCP_struct), &mb_tcp_settingsQ_attributes);
 8011294:	4a46      	ldr	r2, [pc, #280]	; (80113b0 <main+0x1e0>)
 8011296:	2102      	movs	r1, #2
 8011298:	2001      	movs	r0, #1
 801129a:	f00f f978 	bl	802058e <osMessageQueueNew>
 801129e:	4603      	mov	r3, r0
 80112a0:	4a44      	ldr	r2, [pc, #272]	; (80113b4 <main+0x1e4>)
 80112a2:	6013      	str	r3, [r2, #0]

  /* creation of uptimeQ */
  uptimeQHandle = osMessageQueueNew (1, sizeof(uint32_t), &uptimeQ_attributes);
 80112a4:	4a44      	ldr	r2, [pc, #272]	; (80113b8 <main+0x1e8>)
 80112a6:	2104      	movs	r1, #4
 80112a8:	2001      	movs	r0, #1
 80112aa:	f00f f970 	bl	802058e <osMessageQueueNew>
 80112ae:	4603      	mov	r3, r0
 80112b0:	4a42      	ldr	r2, [pc, #264]	; (80113bc <main+0x1ec>)
 80112b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80112b4:	4a42      	ldr	r2, [pc, #264]	; (80113c0 <main+0x1f0>)
 80112b6:	2100      	movs	r1, #0
 80112b8:	4842      	ldr	r0, [pc, #264]	; (80113c4 <main+0x1f4>)
 80112ba:	f00e ff6f 	bl	802019c <osThreadNew>
 80112be:	4603      	mov	r3, r0
 80112c0:	4a41      	ldr	r2, [pc, #260]	; (80113c8 <main+0x1f8>)
 80112c2:	6013      	str	r3, [r2, #0]

  /* creation of SensorsTask */
  SensorsTaskHandle = osThreadNew(vSensorsTask, NULL, &SensorsTask_attributes);
 80112c4:	4a41      	ldr	r2, [pc, #260]	; (80113cc <main+0x1fc>)
 80112c6:	2100      	movs	r1, #0
 80112c8:	4841      	ldr	r0, [pc, #260]	; (80113d0 <main+0x200>)
 80112ca:	f00e ff67 	bl	802019c <osThreadNew>
 80112ce:	4603      	mov	r3, r0
 80112d0:	4a40      	ldr	r2, [pc, #256]	; (80113d4 <main+0x204>)
 80112d2:	6013      	str	r3, [r2, #0]

  /* creation of RW_Settings_Tas */
  RW_Settings_TasHandle = osThreadNew(vRW_Settings_Tas, NULL, &RW_Settings_Tas_attributes);
 80112d4:	4a40      	ldr	r2, [pc, #256]	; (80113d8 <main+0x208>)
 80112d6:	2100      	movs	r1, #0
 80112d8:	4840      	ldr	r0, [pc, #256]	; (80113dc <main+0x20c>)
 80112da:	f00e ff5f 	bl	802019c <osThreadNew>
 80112de:	4603      	mov	r3, r0
 80112e0:	4a3f      	ldr	r2, [pc, #252]	; (80113e0 <main+0x210>)
 80112e2:	6013      	str	r3, [r2, #0]

  /* creation of oneSecondTickTa */
  oneSecondTickTaHandle = osThreadNew(vOneSecondTickTask, NULL, &oneSecondTickTa_attributes);
 80112e4:	4a3f      	ldr	r2, [pc, #252]	; (80113e4 <main+0x214>)
 80112e6:	2100      	movs	r1, #0
 80112e8:	483f      	ldr	r0, [pc, #252]	; (80113e8 <main+0x218>)
 80112ea:	f00e ff57 	bl	802019c <osThreadNew>
 80112ee:	4603      	mov	r3, r0
 80112f0:	4a3e      	ldr	r2, [pc, #248]	; (80113ec <main+0x21c>)
 80112f2:	6013      	str	r3, [r2, #0]

  /* creation of maintEthTask */
  maintEthTaskHandle = osThreadNew(vMaintEthTask, NULL, &maintEthTask_attributes);
 80112f4:	4a3e      	ldr	r2, [pc, #248]	; (80113f0 <main+0x220>)
 80112f6:	2100      	movs	r1, #0
 80112f8:	483e      	ldr	r0, [pc, #248]	; (80113f4 <main+0x224>)
 80112fa:	f00e ff4f 	bl	802019c <osThreadNew>
 80112fe:	4603      	mov	r3, r0
 8011300:	4a3d      	ldr	r2, [pc, #244]	; (80113f8 <main+0x228>)
 8011302:	6013      	str	r3, [r2, #0]

  /* creation of DebugMemUsageT */
  DebugMemUsageTHandle = osThreadNew(vDebugMemUsage, NULL, &DebugMemUsageT_attributes);
 8011304:	4a3d      	ldr	r2, [pc, #244]	; (80113fc <main+0x22c>)
 8011306:	2100      	movs	r1, #0
 8011308:	483d      	ldr	r0, [pc, #244]	; (8011400 <main+0x230>)
 801130a:	f00e ff47 	bl	802019c <osThreadNew>
 801130e:	4603      	mov	r3, r0
 8011310:	4a3c      	ldr	r2, [pc, #240]	; (8011404 <main+0x234>)
 8011312:	6013      	str	r3, [r2, #0]

  /* creation of httpServTask */
  httpServTaskHandle = osThreadNew(httpServ, NULL, &httpServTask_attributes);
 8011314:	4a3c      	ldr	r2, [pc, #240]	; (8011408 <main+0x238>)
 8011316:	2100      	movs	r1, #0
 8011318:	483c      	ldr	r0, [pc, #240]	; (801140c <main+0x23c>)
 801131a:	f00e ff3f 	bl	802019c <osThreadNew>
 801131e:	4603      	mov	r3, r0
 8011320:	4a3b      	ldr	r2, [pc, #236]	; (8011410 <main+0x240>)
 8011322:	6013      	str	r3, [r2, #0]

  /* creation of mqttClientTask */
  mqttClientTaskHandle = osThreadNew(vMQTT_Task, NULL, &mqttClientTask_attributes);
 8011324:	4a3b      	ldr	r2, [pc, #236]	; (8011414 <main+0x244>)
 8011326:	2100      	movs	r1, #0
 8011328:	483b      	ldr	r0, [pc, #236]	; (8011418 <main+0x248>)
 801132a:	f00e ff37 	bl	802019c <osThreadNew>
 801132e:	4603      	mov	r3, r0
 8011330:	4a3a      	ldr	r2, [pc, #232]	; (801141c <main+0x24c>)
 8011332:	6013      	str	r3, [r2, #0]

  /* creation of resetWatchDog */
  resetWatchDogHandle = osThreadNew(vResetWatchDog, NULL, &resetWatchDog_attributes);
 8011334:	4a3a      	ldr	r2, [pc, #232]	; (8011420 <main+0x250>)
 8011336:	2100      	movs	r1, #0
 8011338:	483a      	ldr	r0, [pc, #232]	; (8011424 <main+0x254>)
 801133a:	f00e ff2f 	bl	802019c <osThreadNew>
 801133e:	4603      	mov	r3, r0
 8011340:	4a39      	ldr	r2, [pc, #228]	; (8011428 <main+0x258>)
 8011342:	6013      	str	r3, [r2, #0]

  /* creation of SendBroadcast */
  SendBroadcastHandle = osThreadNew(vSendBroadcast, NULL, &SendBroadcast_attributes);
 8011344:	4a39      	ldr	r2, [pc, #228]	; (801142c <main+0x25c>)
 8011346:	2100      	movs	r1, #0
 8011348:	4839      	ldr	r0, [pc, #228]	; (8011430 <main+0x260>)
 801134a:	f00e ff27 	bl	802019c <osThreadNew>
 801134e:	4603      	mov	r3, r0
 8011350:	4a38      	ldr	r2, [pc, #224]	; (8011434 <main+0x264>)
 8011352:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8011354:	f00e fefc 	bl	8020150 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8011358:	e7fe      	b.n	8011358 <main+0x188>
 801135a:	bf00      	nop
 801135c:	e000ed00 	.word	0xe000ed00
 8011360:	08010000 	.word	0x08010000
 8011364:	0801fe75 	.word	0x0801fe75
 8011368:	080343c0 	.word	0x080343c0
 801136c:	20000464 	.word	0x20000464
 8011370:	080343d0 	.word	0x080343d0
 8011374:	20000468 	.word	0x20000468
 8011378:	080343e0 	.word	0x080343e0
 801137c:	2000046c 	.word	0x2000046c
 8011380:	080343f0 	.word	0x080343f0
 8011384:	20000470 	.word	0x20000470
 8011388:	08034318 	.word	0x08034318
 801138c:	20000448 	.word	0x20000448
 8011390:	08034330 	.word	0x08034330
 8011394:	2000044c 	.word	0x2000044c
 8011398:	08034348 	.word	0x08034348
 801139c:	20000450 	.word	0x20000450
 80113a0:	08034360 	.word	0x08034360
 80113a4:	20000454 	.word	0x20000454
 80113a8:	08034378 	.word	0x08034378
 80113ac:	20000458 	.word	0x20000458
 80113b0:	08034390 	.word	0x08034390
 80113b4:	2000045c 	.word	0x2000045c
 80113b8:	080343a8 	.word	0x080343a8
 80113bc:	20000460 	.word	0x20000460
 80113c0:	080341b0 	.word	0x080341b0
 80113c4:	08011791 	.word	0x08011791
 80113c8:	20000420 	.word	0x20000420
 80113cc:	080341d4 	.word	0x080341d4
 80113d0:	080117a1 	.word	0x080117a1
 80113d4:	20000424 	.word	0x20000424
 80113d8:	080341f8 	.word	0x080341f8
 80113dc:	08011935 	.word	0x08011935
 80113e0:	20000428 	.word	0x20000428
 80113e4:	0803421c 	.word	0x0803421c
 80113e8:	08011c9d 	.word	0x08011c9d
 80113ec:	2000042c 	.word	0x2000042c
 80113f0:	08034240 	.word	0x08034240
 80113f4:	08011cd9 	.word	0x08011cd9
 80113f8:	20000430 	.word	0x20000430
 80113fc:	08034264 	.word	0x08034264
 8011400:	08012255 	.word	0x08012255
 8011404:	20000434 	.word	0x20000434
 8011408:	08034288 	.word	0x08034288
 801140c:	08012301 	.word	0x08012301
 8011410:	20000438 	.word	0x20000438
 8011414:	080342ac 	.word	0x080342ac
 8011418:	08012499 	.word	0x08012499
 801141c:	2000043c 	.word	0x2000043c
 8011420:	080342d0 	.word	0x080342d0
 8011424:	08012755 	.word	0x08012755
 8011428:	20000440 	.word	0x20000440
 801142c:	080342f4 	.word	0x080342f4
 8011430:	08012771 	.word	0x08012771
 8011434:	20000444 	.word	0x20000444

08011438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b094      	sub	sp, #80	; 0x50
 801143c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801143e:	f107 0320 	add.w	r3, r7, #32
 8011442:	2230      	movs	r2, #48	; 0x30
 8011444:	2100      	movs	r1, #0
 8011446:	4618      	mov	r0, r3
 8011448:	f01c fb30 	bl	802daac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801144c:	f107 030c 	add.w	r3, r7, #12
 8011450:	2200      	movs	r2, #0
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	605a      	str	r2, [r3, #4]
 8011456:	609a      	str	r2, [r3, #8]
 8011458:	60da      	str	r2, [r3, #12]
 801145a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 801145c:	2300      	movs	r3, #0
 801145e:	60bb      	str	r3, [r7, #8]
 8011460:	4b29      	ldr	r3, [pc, #164]	; (8011508 <SystemClock_Config+0xd0>)
 8011462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011464:	4a28      	ldr	r2, [pc, #160]	; (8011508 <SystemClock_Config+0xd0>)
 8011466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801146a:	6413      	str	r3, [r2, #64]	; 0x40
 801146c:	4b26      	ldr	r3, [pc, #152]	; (8011508 <SystemClock_Config+0xd0>)
 801146e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011474:	60bb      	str	r3, [r7, #8]
 8011476:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8011478:	2300      	movs	r3, #0
 801147a:	607b      	str	r3, [r7, #4]
 801147c:	4b23      	ldr	r3, [pc, #140]	; (801150c <SystemClock_Config+0xd4>)
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8011484:	4a21      	ldr	r2, [pc, #132]	; (801150c <SystemClock_Config+0xd4>)
 8011486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801148a:	6013      	str	r3, [r2, #0]
 801148c:	4b1f      	ldr	r3, [pc, #124]	; (801150c <SystemClock_Config+0xd4>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011494:	607b      	str	r3, [r7, #4]
 8011496:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8011498:	2309      	movs	r3, #9
 801149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801149c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80114a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80114a2:	2301      	movs	r3, #1
 80114a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80114a6:	2302      	movs	r3, #2
 80114a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80114aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80114ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80114b0:	2304      	movs	r3, #4
 80114b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80114b4:	2354      	movs	r3, #84	; 0x54
 80114b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80114b8:	2302      	movs	r3, #2
 80114ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80114bc:	2304      	movs	r3, #4
 80114be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80114c0:	f107 0320 	add.w	r3, r7, #32
 80114c4:	4618      	mov	r0, r3
 80114c6:	f004 fd2d 	bl	8015f24 <HAL_RCC_OscConfig>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d001      	beq.n	80114d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80114d0:	f001 f9ec 	bl	80128ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80114d4:	230f      	movs	r3, #15
 80114d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80114d8:	2302      	movs	r3, #2
 80114da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80114dc:	2300      	movs	r3, #0
 80114de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80114e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80114e6:	2300      	movs	r3, #0
 80114e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80114ea:	f107 030c 	add.w	r3, r7, #12
 80114ee:	2102      	movs	r1, #2
 80114f0:	4618      	mov	r0, r3
 80114f2:	f004 ff8f 	bl	8016414 <HAL_RCC_ClockConfig>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80114fc:	f001 f9d6 	bl	80128ac <Error_Handler>
  }
}
 8011500:	bf00      	nop
 8011502:	3750      	adds	r7, #80	; 0x50
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}
 8011508:	40023800 	.word	0x40023800
 801150c:	40007000 	.word	0x40007000

08011510 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8011514:	4b06      	ldr	r3, [pc, #24]	; (8011530 <MX_CRC_Init+0x20>)
 8011516:	4a07      	ldr	r2, [pc, #28]	; (8011534 <MX_CRC_Init+0x24>)
 8011518:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 801151a:	4805      	ldr	r0, [pc, #20]	; (8011530 <MX_CRC_Init+0x20>)
 801151c:	f004 fa64 	bl	80159e8 <HAL_CRC_Init>
 8011520:	4603      	mov	r3, r0
 8011522:	2b00      	cmp	r3, #0
 8011524:	d001      	beq.n	801152a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8011526:	f001 f9c1 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 801152a:	bf00      	nop
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	20000314 	.word	0x20000314
 8011534:	40023000 	.word	0x40023000

08011538 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 801153c:	4b09      	ldr	r3, [pc, #36]	; (8011564 <MX_IWDG_Init+0x2c>)
 801153e:	4a0a      	ldr	r2, [pc, #40]	; (8011568 <MX_IWDG_Init+0x30>)
 8011540:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8011542:	4b08      	ldr	r3, [pc, #32]	; (8011564 <MX_IWDG_Init+0x2c>)
 8011544:	2206      	movs	r2, #6
 8011546:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8011548:	4b06      	ldr	r3, [pc, #24]	; (8011564 <MX_IWDG_Init+0x2c>)
 801154a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801154e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8011550:	4804      	ldr	r0, [pc, #16]	; (8011564 <MX_IWDG_Init+0x2c>)
 8011552:	f004 fc94 	bl	8015e7e <HAL_IWDG_Init>
 8011556:	4603      	mov	r3, r0
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 801155c:	f001 f9a6 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8011560:	bf00      	nop
 8011562:	bd80      	pop	{r7, pc}
 8011564:	2000031c 	.word	0x2000031c
 8011568:	40003000 	.word	0x40003000

0801156c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8011570:	4b17      	ldr	r3, [pc, #92]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011572:	4a18      	ldr	r2, [pc, #96]	; (80115d4 <MX_SPI1_Init+0x68>)
 8011574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8011576:	4b16      	ldr	r3, [pc, #88]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011578:	f44f 7282 	mov.w	r2, #260	; 0x104
 801157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801157e:	4b14      	ldr	r3, [pc, #80]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011580:	2200      	movs	r2, #0
 8011582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8011584:	4b12      	ldr	r3, [pc, #72]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011586:	2200      	movs	r2, #0
 8011588:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801158a:	4b11      	ldr	r3, [pc, #68]	; (80115d0 <MX_SPI1_Init+0x64>)
 801158c:	2202      	movs	r2, #2
 801158e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011590:	4b0f      	ldr	r3, [pc, #60]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011592:	2201      	movs	r2, #1
 8011594:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8011596:	4b0e      	ldr	r3, [pc, #56]	; (80115d0 <MX_SPI1_Init+0x64>)
 8011598:	f44f 7200 	mov.w	r2, #512	; 0x200
 801159c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801159e:	4b0c      	ldr	r3, [pc, #48]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115a0:	2200      	movs	r2, #0
 80115a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80115a4:	4b0a      	ldr	r3, [pc, #40]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115a6:	2200      	movs	r2, #0
 80115a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80115aa:	4b09      	ldr	r3, [pc, #36]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115ac:	2200      	movs	r2, #0
 80115ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80115b0:	4b07      	ldr	r3, [pc, #28]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115b2:	2200      	movs	r2, #0
 80115b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80115b6:	4b06      	ldr	r3, [pc, #24]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115b8:	220a      	movs	r2, #10
 80115ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80115bc:	4804      	ldr	r0, [pc, #16]	; (80115d0 <MX_SPI1_Init+0x64>)
 80115be:	f005 f97b 	bl	80168b8 <HAL_SPI_Init>
 80115c2:	4603      	mov	r3, r0
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d001      	beq.n	80115cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80115c8:	f001 f970 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80115cc:	bf00      	nop
 80115ce:	bd80      	pop	{r7, pc}
 80115d0:	20000328 	.word	0x20000328
 80115d4:	40013000 	.word	0x40013000

080115d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80115dc:	4b17      	ldr	r3, [pc, #92]	; (801163c <MX_SPI3_Init+0x64>)
 80115de:	4a18      	ldr	r2, [pc, #96]	; (8011640 <MX_SPI3_Init+0x68>)
 80115e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80115e2:	4b16      	ldr	r3, [pc, #88]	; (801163c <MX_SPI3_Init+0x64>)
 80115e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80115e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80115ea:	4b14      	ldr	r3, [pc, #80]	; (801163c <MX_SPI3_Init+0x64>)
 80115ec:	2200      	movs	r2, #0
 80115ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80115f0:	4b12      	ldr	r3, [pc, #72]	; (801163c <MX_SPI3_Init+0x64>)
 80115f2:	2200      	movs	r2, #0
 80115f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80115f6:	4b11      	ldr	r3, [pc, #68]	; (801163c <MX_SPI3_Init+0x64>)
 80115f8:	2202      	movs	r2, #2
 80115fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80115fc:	4b0f      	ldr	r3, [pc, #60]	; (801163c <MX_SPI3_Init+0x64>)
 80115fe:	2201      	movs	r2, #1
 8011600:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011602:	4b0e      	ldr	r3, [pc, #56]	; (801163c <MX_SPI3_Init+0x64>)
 8011604:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011608:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801160a:	4b0c      	ldr	r3, [pc, #48]	; (801163c <MX_SPI3_Init+0x64>)
 801160c:	2200      	movs	r2, #0
 801160e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011610:	4b0a      	ldr	r3, [pc, #40]	; (801163c <MX_SPI3_Init+0x64>)
 8011612:	2200      	movs	r2, #0
 8011614:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8011616:	4b09      	ldr	r3, [pc, #36]	; (801163c <MX_SPI3_Init+0x64>)
 8011618:	2200      	movs	r2, #0
 801161a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801161c:	4b07      	ldr	r3, [pc, #28]	; (801163c <MX_SPI3_Init+0x64>)
 801161e:	2200      	movs	r2, #0
 8011620:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011622:	4b06      	ldr	r3, [pc, #24]	; (801163c <MX_SPI3_Init+0x64>)
 8011624:	220a      	movs	r2, #10
 8011626:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8011628:	4804      	ldr	r0, [pc, #16]	; (801163c <MX_SPI3_Init+0x64>)
 801162a:	f005 f945 	bl	80168b8 <HAL_SPI_Init>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d001      	beq.n	8011638 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011634:	f001 f93a 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8011638:	bf00      	nop
 801163a:	bd80      	pop	{r7, pc}
 801163c:	20000380 	.word	0x20000380
 8011640:	40003c00 	.word	0x40003c00

08011644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8011648:	4b12      	ldr	r3, [pc, #72]	; (8011694 <MX_USART2_UART_Init+0x50>)
 801164a:	4a13      	ldr	r2, [pc, #76]	; (8011698 <MX_USART2_UART_Init+0x54>)
 801164c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 4800;
 801164e:	4b11      	ldr	r3, [pc, #68]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011650:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8011654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8011656:	4b0f      	ldr	r3, [pc, #60]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011658:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801165c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801165e:	4b0d      	ldr	r3, [pc, #52]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011660:	2200      	movs	r2, #0
 8011662:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8011664:	4b0b      	ldr	r3, [pc, #44]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 801166c:	4b09      	ldr	r3, [pc, #36]	; (8011694 <MX_USART2_UART_Init+0x50>)
 801166e:	2204      	movs	r2, #4
 8011670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011672:	4b08      	ldr	r3, [pc, #32]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011674:	2200      	movs	r2, #0
 8011676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011678:	4b06      	ldr	r3, [pc, #24]	; (8011694 <MX_USART2_UART_Init+0x50>)
 801167a:	2200      	movs	r2, #0
 801167c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801167e:	4805      	ldr	r0, [pc, #20]	; (8011694 <MX_USART2_UART_Init+0x50>)
 8011680:	f006 f964 	bl	801794c <HAL_UART_Init>
 8011684:	4603      	mov	r3, r0
 8011686:	2b00      	cmp	r3, #0
 8011688:	d001      	beq.n	801168e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 801168a:	f001 f90f 	bl	80128ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801168e:	bf00      	nop
 8011690:	bd80      	pop	{r7, pc}
 8011692:	bf00      	nop
 8011694:	200003d8 	.word	0x200003d8
 8011698:	40004400 	.word	0x40004400

0801169c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b088      	sub	sp, #32
 80116a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80116a2:	f107 030c 	add.w	r3, r7, #12
 80116a6:	2200      	movs	r2, #0
 80116a8:	601a      	str	r2, [r3, #0]
 80116aa:	605a      	str	r2, [r3, #4]
 80116ac:	609a      	str	r2, [r3, #8]
 80116ae:	60da      	str	r2, [r3, #12]
 80116b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80116b2:	2300      	movs	r3, #0
 80116b4:	60bb      	str	r3, [r7, #8]
 80116b6:	4b33      	ldr	r3, [pc, #204]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116ba:	4a32      	ldr	r2, [pc, #200]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116c0:	6313      	str	r3, [r2, #48]	; 0x30
 80116c2:	4b30      	ldr	r3, [pc, #192]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116ca:	60bb      	str	r3, [r7, #8]
 80116cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80116ce:	2300      	movs	r3, #0
 80116d0:	607b      	str	r3, [r7, #4]
 80116d2:	4b2c      	ldr	r3, [pc, #176]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d6:	4a2b      	ldr	r2, [pc, #172]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116d8:	f043 0301 	orr.w	r3, r3, #1
 80116dc:	6313      	str	r3, [r2, #48]	; 0x30
 80116de:	4b29      	ldr	r3, [pc, #164]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	607b      	str	r3, [r7, #4]
 80116e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80116ea:	2300      	movs	r3, #0
 80116ec:	603b      	str	r3, [r7, #0]
 80116ee:	4b25      	ldr	r3, [pc, #148]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116f2:	4a24      	ldr	r2, [pc, #144]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116f4:	f043 0302 	orr.w	r3, r3, #2
 80116f8:	6313      	str	r3, [r2, #48]	; 0x30
 80116fa:	4b22      	ldr	r3, [pc, #136]	; (8011784 <MX_GPIO_Init+0xe8>)
 80116fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116fe:	f003 0302 	and.w	r3, r3, #2
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enable_power_isolator_Pin|SPI_flash_cs_Pin, GPIO_PIN_SET);
 8011706:	2201      	movs	r2, #1
 8011708:	2112      	movs	r1, #18
 801170a:	481f      	ldr	r0, [pc, #124]	; (8011788 <MX_GPIO_Init+0xec>)
 801170c:	f004 fb9e 	bl	8015e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_reset_GPIO_Port, Ethernet_reset_Pin, GPIO_PIN_RESET);
 8011710:	2200      	movs	r2, #0
 8011712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011716:	481c      	ldr	r0, [pc, #112]	; (8011788 <MX_GPIO_Init+0xec>)
 8011718:	f004 fb98 	bl	8015e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ethernet_cs_GPIO_Port, Ethernet_cs_Pin, GPIO_PIN_RESET);
 801171c:	2200      	movs	r2, #0
 801171e:	2140      	movs	r1, #64	; 0x40
 8011720:	481a      	ldr	r0, [pc, #104]	; (801178c <MX_GPIO_Init+0xf0>)
 8011722:	f004 fb93 	bl	8015e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : enable_power_isolator_Pin Ethernet_reset_Pin */
  GPIO_InitStruct.Pin = enable_power_isolator_Pin|Ethernet_reset_Pin;
 8011726:	f248 0302 	movw	r3, #32770	; 0x8002
 801172a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801172c:	2301      	movs	r3, #1
 801172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011730:	2300      	movs	r3, #0
 8011732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011734:	2300      	movs	r3, #0
 8011736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011738:	f107 030c 	add.w	r3, r7, #12
 801173c:	4619      	mov	r1, r3
 801173e:	4812      	ldr	r0, [pc, #72]	; (8011788 <MX_GPIO_Init+0xec>)
 8011740:	f004 fa00 	bl	8015b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_flash_cs_Pin */
  GPIO_InitStruct.Pin = SPI_flash_cs_Pin;
 8011744:	2310      	movs	r3, #16
 8011746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011748:	2301      	movs	r3, #1
 801174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801174c:	2300      	movs	r3, #0
 801174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011750:	2303      	movs	r3, #3
 8011752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_flash_cs_GPIO_Port, &GPIO_InitStruct);
 8011754:	f107 030c 	add.w	r3, r7, #12
 8011758:	4619      	mov	r1, r3
 801175a:	480b      	ldr	r0, [pc, #44]	; (8011788 <MX_GPIO_Init+0xec>)
 801175c:	f004 f9f2 	bl	8015b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Ethernet_cs_Pin */
  GPIO_InitStruct.Pin = Ethernet_cs_Pin;
 8011760:	2340      	movs	r3, #64	; 0x40
 8011762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011764:	2301      	movs	r3, #1
 8011766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011768:	2300      	movs	r3, #0
 801176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801176c:	2300      	movs	r3, #0
 801176e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Ethernet_cs_GPIO_Port, &GPIO_InitStruct);
 8011770:	f107 030c 	add.w	r3, r7, #12
 8011774:	4619      	mov	r1, r3
 8011776:	4805      	ldr	r0, [pc, #20]	; (801178c <MX_GPIO_Init+0xf0>)
 8011778:	f004 f9e4 	bl	8015b44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 801177c:	bf00      	nop
 801177e:	3720      	adds	r7, #32
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	40023800 	.word	0x40023800
 8011788:	40020000 	.word	0x40020000
 801178c:	40020400 	.word	0x40020400

08011790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8011798:	2001      	movs	r0, #1
 801179a:	f00e fdcf 	bl	802033c <osDelay>
 801179e:	e7fb      	b.n	8011798 <StartDefaultTask+0x8>

080117a0 <vSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSensorsTask */
void vSensorsTask(void *argument)
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b098      	sub	sp, #96	; 0x60
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSensorsTask */
	uint32_t			temp;
	uint8_t				array[30];
	PowerSensStruct		PowerData;
	P_sens_sett_struct	PowerSett;
	uint32_t			count = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	65fb      	str	r3, [r7, #92]	; 0x5c
	float				old_resistance;


	PowerSett.resistance = 0.001;
 80117ac:	4b57      	ldr	r3, [pc, #348]	; (801190c <vSensorsTask+0x16c>)
 80117ae:	60fb      	str	r3, [r7, #12]
	PowerSett.save = 0;
 80117b0:	2300      	movs	r3, #0
 80117b2:	723b      	strb	r3, [r7, #8]
	//xQueueOverwrite(Curr_sensor_settingsHandle, (void *)&PowerSett);

	osDelay(delay5s);
 80117b4:	f241 3088 	movw	r0, #5000	; 0x1388
 80117b8:	f00e fdc0 	bl	802033c <osDelay>

	xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80117bc:	4b54      	ldr	r3, [pc, #336]	; (8011910 <vSensorsTask+0x170>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f107 0108 	add.w	r1, r7, #8
 80117c4:	2200      	movs	r2, #0
 80117c6:	4618      	mov	r0, r3
 80117c8:	f00f fe94 	bl	80214f4 <xQueuePeek>
	old_resistance = PowerSett.resistance;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	65bb      	str	r3, [r7, #88]	; 0x58
	PowerOFF_HLW8032();
 80117d0:	f7ff fcf2 	bl	80111b8 <PowerOFF_HLW8032>
	osDelay(delay0_5s);
 80117d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80117d8:	f00e fdb0 	bl	802033c <osDelay>
	USART2->DR; //read data from register if exist
 80117dc:	4b4d      	ldr	r3, [pc, #308]	; (8011914 <vSensorsTask+0x174>)
 80117de:	685b      	ldr	r3, [r3, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24);
 80117e0:	2218      	movs	r2, #24
 80117e2:	494d      	ldr	r1, [pc, #308]	; (8011918 <vSensorsTask+0x178>)
 80117e4:	484d      	ldr	r0, [pc, #308]	; (801191c <vSensorsTask+0x17c>)
 80117e6:	f006 f901 	bl	80179ec <HAL_UARTEx_ReceiveToIdle_IT>
	osDelay(delay1s);
 80117ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80117ee:	f00e fda5 	bl	802033c <osDelay>
	PowerON_HLW8032();
 80117f2:	f7ff fcd5 	bl	80111a0 <PowerON_HLW8032>

	sens_task_start:


	InitHLW8032(1880000, 1000, PowerSett.resistance);
 80117f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80117fa:	eeb0 0a67 	vmov.f32	s0, s15
 80117fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011802:	4847      	ldr	r0, [pc, #284]	; (8011920 <vSensorsTask+0x180>)
 8011804:	f003 f9c4 	bl	8014b90 <InitHLW8032>
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet	(rowPowerSensorQHandle,&array,NULL, 1000) != osErrorTimeout ){
 8011808:	4b46      	ldr	r3, [pc, #280]	; (8011924 <vSensorsTask+0x184>)
 801180a:	6818      	ldr	r0, [r3, #0]
 801180c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011814:	2200      	movs	r2, #0
 8011816:	f00e ff8d 	bl	8020734 <osMessageQueueGet>
 801181a:	4603      	mov	r3, r0
 801181c:	f113 0f02 	cmn.w	r3, #2
 8011820:	d04c      	beq.n	80118bc <vSensorsTask+0x11c>
		if( RecvRawString((const unsigned char *)array) == 0){ // all OK if return 0
 8011822:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011826:	4618      	mov	r0, r3
 8011828:	f003 fa24 	bl	8014c74 <RecvRawString>
 801182c:	4603      	mov	r3, r0
 801182e:	2b00      	cmp	r3, #0
 8011830:	d155      	bne.n	80118de <vSensorsTask+0x13e>
			test_kWh_from_read 				= GetKWh();
 8011832:	f003 fc51 	bl	80150d8 <GetKWh>
 8011836:	eef0 7a40 	vmov.f32	s15, s0
 801183a:	4b3b      	ldr	r3, [pc, #236]	; (8011928 <vSensorsTask+0x188>)
 801183c:	edc3 7a00 	vstr	s15, [r3]
			PowerData.KWatt_h 				= GetKWh()+ test_kWh_from_flash;
 8011840:	f003 fc4a 	bl	80150d8 <GetKWh>
 8011844:	eeb0 7a40 	vmov.f32	s14, s0
 8011848:	4b38      	ldr	r3, [pc, #224]	; (801192c <vSensorsTask+0x18c>)
 801184a:	edd3 7a00 	vldr	s15, [r3]
 801184e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011852:	edc7 7a06 	vstr	s15, [r7, #24]
			PowerData.Voltage 				= GetVoltage();
 8011856:	f003 fb05 	bl	8014e64 <GetVoltage>
 801185a:	eef0 7a40 	vmov.f32	s15, s0
 801185e:	edc7 7a04 	vstr	s15, [r7, #16]
			PowerData.ApparPower 			= GetApparentPower();
 8011862:	f003 fbaf 	bl	8014fc4 <GetApparentPower>
 8011866:	eef0 7a40 	vmov.f32	s15, s0
 801186a:	edc7 7a08 	vstr	s15, [r7, #32]
			PowerData.ActivePower 			= GetActivePower();
 801186e:	f003 fb6b 	bl	8014f48 <GetActivePower>
 8011872:	eef0 7a40 	vmov.f32	s15, s0
 8011876:	edc7 7a07 	vstr	s15, [r7, #28]
			PowerData.Current 				= GetCurrent();
 801187a:	f003 fb3f 	bl	8014efc <GetCurrent>
 801187e:	eef0 7a40 	vmov.f32	s15, s0
 8011882:	edc7 7a05 	vstr	s15, [r7, #20]
			PowerData.PowerFactor			= PowerFactor();
 8011886:	f003 fbc5 	bl	8015014 <PowerFactor>
 801188a:	eef0 7a40 	vmov.f32	s15, s0
 801188e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
			PowerData.test_pulse_counter 	= GetTestPulse();
 8011892:	f003 fbfb 	bl	801508c <GetTestPulse>
 8011896:	4603      	mov	r3, r0
 8011898:	62bb      	str	r3, [r7, #40]	; 0x28
			PowerData.readed_counter 		= GetCountedPulse();
 801189a:	f003 fc03 	bl	80150a4 <GetCountedPulse>
 801189e:	4603      	mov	r3, r0
 80118a0:	62fb      	str	r3, [r7, #44]	; 0x2c
			PowerData.PF_reg				= GetPFReg();
 80118a2:	f003 fc0b 	bl	80150bc <GetPFReg>
 80118a6:	4603      	mov	r3, r0
 80118a8:	633b      	str	r3, [r7, #48]	; 0x30
			xQueueOverwrite(PowerDataQHandle, (void *)&PowerData);
 80118aa:	4b21      	ldr	r3, [pc, #132]	; (8011930 <vSensorsTask+0x190>)
 80118ac:	6818      	ldr	r0, [r3, #0]
 80118ae:	f107 0110 	add.w	r1, r7, #16
 80118b2:	2302      	movs	r3, #2
 80118b4:	2200      	movs	r2, #0
 80118b6:	f00f fa97 	bl	8020de8 <xQueueGenericSend>
 80118ba:	e010      	b.n	80118de <vSensorsTask+0x13e>
		}
	}else{
		count++;
 80118bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118be:	3301      	adds	r3, #1
 80118c0:	65fb      	str	r3, [r7, #92]	; 0x5c
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118c2:	e004      	b.n	80118ce <vSensorsTask+0x12e>
			temp = USART2->DR;
 80118c4:	4b13      	ldr	r3, [pc, #76]	; (8011914 <vSensorsTask+0x174>)
 80118c6:	685b      	ldr	r3, [r3, #4]
 80118c8:	657b      	str	r3, [r7, #84]	; 0x54
			osThreadYield();
 80118ca:	f00e fd17 	bl	80202fc <osThreadYield>
		while (HAL_UARTEx_ReceiveToIdle_IT(&huart2, data_bufer,  24) == HAL_ERROR){
 80118ce:	2218      	movs	r2, #24
 80118d0:	4911      	ldr	r1, [pc, #68]	; (8011918 <vSensorsTask+0x178>)
 80118d2:	4812      	ldr	r0, [pc, #72]	; (801191c <vSensorsTask+0x17c>)
 80118d4:	f006 f88a 	bl	80179ec <HAL_UARTEx_ReceiveToIdle_IT>
 80118d8:	4603      	mov	r3, r0
 80118da:	2b01      	cmp	r3, #1
 80118dc:	d0f2      	beq.n	80118c4 <vSensorsTask+0x124>
		}
	}
	osThreadYield();
 80118de:	f00e fd0d 	bl	80202fc <osThreadYield>
    xQueuePeek(Curr_sensor_settingsHandle ,&PowerSett,0);
 80118e2:	4b0b      	ldr	r3, [pc, #44]	; (8011910 <vSensorsTask+0x170>)
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f107 0108 	add.w	r1, r7, #8
 80118ea:	2200      	movs	r2, #0
 80118ec:	4618      	mov	r0, r3
 80118ee:	f00f fe01 	bl	80214f4 <xQueuePeek>
    if (PowerSett.resistance != old_resistance){
 80118f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80118f6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80118fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80118fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011902:	d081      	beq.n	8011808 <vSensorsTask+0x68>
    	old_resistance = PowerSett.resistance;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	65bb      	str	r3, [r7, #88]	; 0x58
    	goto sens_task_start;
 8011908:	e775      	b.n	80117f6 <vSensorsTask+0x56>
 801190a:	bf00      	nop
 801190c:	3a83126f 	.word	0x3a83126f
 8011910:	20000454 	.word	0x20000454
 8011914:	40004400 	.word	0x40004400
 8011918:	20000474 	.word	0x20000474
 801191c:	200003d8 	.word	0x200003d8
 8011920:	001cafc0 	.word	0x001cafc0
 8011924:	20000448 	.word	0x20000448
 8011928:	20000498 	.word	0x20000498
 801192c:	20000494 	.word	0x20000494
 8011930:	20000450 	.word	0x20000450

08011934 <vRW_Settings_Tas>:
* @retval None
*/

/* USER CODE END Header_vRW_Settings_Tas */
void vRW_Settings_Tas(void *argument)
{
 8011934:	b590      	push	{r4, r7, lr}
 8011936:	f2ad 4d5c 	subw	sp, sp, #1116	; 0x45c
 801193a:	af12      	add	r7, sp, #72	; 0x48
 801193c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011940:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 8011944:	6018      	str	r0, [r3, #0]
	uint8_t 				buff_write[256];
	uint8_t 				lookheadbuf[256];
	P_sens_sett_struct		PowerSett;
	MQTT_cred_struct		MQTT_cred;
	ModBusTCP_struct		mb_tcp_sett;
	uint32_t				next_update = 20, time_counter = 0;
 8011946:	2314      	movs	r3, #20
 8011948:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 801194c:	2300      	movs	r3, #0
 801194e:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
	PowerSensStruct			PowerData;
	float					KWatt_h_old = 0;
 8011952:	f04f 0300 	mov.w	r3, #0
 8011956:	f207 4204 	addw	r2, r7, #1028	; 0x404
 801195a:	6013      	str	r3, [r2, #0]

	SPI_flash_set(hspi1);
 801195c:	4cbc      	ldr	r4, [pc, #752]	; (8011c50 <vRW_Settings_Tas+0x31c>)
 801195e:	4668      	mov	r0, sp
 8011960:	f104 0310 	add.w	r3, r4, #16
 8011964:	2248      	movs	r2, #72	; 0x48
 8011966:	4619      	mov	r1, r3
 8011968:	f01c fa75 	bl	802de56 <memcpy>
 801196c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011970:	f003 fec2 	bl	80156f8 <SPI_flash_set>
	SPI_flash_reg_cb(SPI_flash_select, SPI_flash_deselect, SPI_flash_read_byte, SPI_flash_send_byte);
 8011974:	4bb7      	ldr	r3, [pc, #732]	; (8011c54 <vRW_Settings_Tas+0x320>)
 8011976:	4ab8      	ldr	r2, [pc, #736]	; (8011c58 <vRW_Settings_Tas+0x324>)
 8011978:	49b8      	ldr	r1, [pc, #736]	; (8011c5c <vRW_Settings_Tas+0x328>)
 801197a:	48b9      	ldr	r0, [pc, #740]	; (8011c60 <vRW_Settings_Tas+0x32c>)
 801197c:	f003 fc36 	bl	80151ec <SPI_flash_reg_cb>
	spi_fs_init(buff_read, buff_write, lookheadbuf, 256 );
 8011980:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8011984:	f507 7101 	add.w	r1, r7, #516	; 0x204
 8011988:	f507 7041 	add.w	r0, r7, #772	; 0x304
 801198c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011990:	f019 fa98 	bl	802aec4 <spi_fs_init>
	spi_fs_init_mutex(LfsMutexTake, LfsMutexRelease);
 8011994:	49b3      	ldr	r1, [pc, #716]	; (8011c64 <vRW_Settings_Tas+0x330>)
 8011996:	48b4      	ldr	r0, [pc, #720]	; (8011c68 <vRW_Settings_Tas+0x334>)
 8011998:	f019 fa78 	bl	802ae8c <spi_fs_init_mutex>


	if (spi_fs_mount() < 0){
 801199c:	f019 faca 	bl	802af34 <spi_fs_mount>
 80119a0:	4603      	mov	r3, r0
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	da03      	bge.n	80119ae <vRW_Settings_Tas+0x7a>
		spi_fs_format();
 80119a6:	f019 faed 	bl	802af84 <spi_fs_format>
		spi_fs_mount();
 80119aa:	f019 fac3 	bl	802af34 <spi_fs_mount>
	}

	if (0 < spi_fs_file_size(POW_SETT_FILE)){
 80119ae:	48af      	ldr	r0, [pc, #700]	; (8011c6c <vRW_Settings_Tas+0x338>)
 80119b0:	f019 fb70 	bl	802b094 <spi_fs_file_size>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	dd0f      	ble.n	80119da <vRW_Settings_Tas+0xa6>
		spi_fs_read_file_offset(POW_SETT_FILE, &PowerSett, 0, sizeof(PowerSett));
 80119ba:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119be:	2308      	movs	r3, #8
 80119c0:	2200      	movs	r2, #0
 80119c2:	48aa      	ldr	r0, [pc, #680]	; (8011c6c <vRW_Settings_Tas+0x338>)
 80119c4:	f019 faea 	bl	802af9c <spi_fs_read_file_offset>
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119c8:	4ba9      	ldr	r3, [pc, #676]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 80119ca:	6818      	ldr	r0, [r3, #0]
 80119cc:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119d0:	2302      	movs	r3, #2
 80119d2:	2200      	movs	r2, #0
 80119d4:	f00f fa08 	bl	8020de8 <xQueueGenericSend>
 80119d8:	e013      	b.n	8011a02 <vRW_Settings_Tas+0xce>
	}else{
		PowerSett.resistance 	= DEFAULT_SHUNT_RESISTANSE;
 80119da:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119de:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119e2:	4aa4      	ldr	r2, [pc, #656]	; (8011c74 <vRW_Settings_Tas+0x340>)
 80119e4:	605a      	str	r2, [r3, #4]
		PowerSett.save 			= 1;
 80119e6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80119ea:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80119ee:	2201      	movs	r2, #1
 80119f0:	701a      	strb	r2, [r3, #0]
		xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 80119f2:	4b9f      	ldr	r3, [pc, #636]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 80119f4:	6818      	ldr	r0, [r3, #0]
 80119f6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80119fa:	2302      	movs	r3, #2
 80119fc:	2200      	movs	r2, #0
 80119fe:	f00f f9f3 	bl	8020de8 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MQTT_SETT_FILE)){
 8011a02:	489d      	ldr	r0, [pc, #628]	; (8011c78 <vRW_Settings_Tas+0x344>)
 8011a04:	f019 fb46 	bl	802b094 <spi_fs_file_size>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	dd0f      	ble.n	8011a2e <vRW_Settings_Tas+0xfa>
		spi_fs_read_file_offset(MQTT_SETT_FILE, &MQTT_cred, 0, sizeof(MQTT_cred));
 8011a0e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a12:	23c6      	movs	r3, #198	; 0xc6
 8011a14:	2200      	movs	r2, #0
 8011a16:	4898      	ldr	r0, [pc, #608]	; (8011c78 <vRW_Settings_Tas+0x344>)
 8011a18:	f019 fac0 	bl	802af9c <spi_fs_read_file_offset>
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a1c:	4b97      	ldr	r3, [pc, #604]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011a1e:	6818      	ldr	r0, [r3, #0]
 8011a20:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a24:	2302      	movs	r3, #2
 8011a26:	2200      	movs	r2, #0
 8011a28:	f00f f9de 	bl	8020de8 <xQueueGenericSend>
 8011a2c:	e027      	b.n	8011a7e <vRW_Settings_Tas+0x14a>
	}else{
		MQTT_cred.save 			= 1;
 8011a2e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a32:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a36:	2201      	movs	r2, #1
 8011a38:	701a      	strb	r2, [r3, #0]
		MQTT_cred.enable		= 0;
 8011a3a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a3e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a42:	2200      	movs	r2, #0
 8011a44:	705a      	strb	r2, [r3, #1]
		MQTT_cred.login[0]		= '\0';
 8011a46:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a4a:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a4e:	2200      	movs	r2, #0
 8011a50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
		MQTT_cred.pass[0]		= '\0';
 8011a54:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a58:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
		MQTT_cred.uri[0]		= '\0';
 8011a62:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011a66:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	709a      	strb	r2, [r3, #2]
		xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011a6e:	4b83      	ldr	r3, [pc, #524]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011a70:	6818      	ldr	r0, [r3, #0]
 8011a72:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011a76:	2302      	movs	r3, #2
 8011a78:	2200      	movs	r2, #0
 8011a7a:	f00f f9b5 	bl	8020de8 <xQueueGenericSend>
	}

	if (0 < spi_fs_file_size(MB_TCP_SETT_FILE)){
 8011a7e:	4880      	ldr	r0, [pc, #512]	; (8011c80 <vRW_Settings_Tas+0x34c>)
 8011a80:	f019 fb08 	bl	802b094 <spi_fs_file_size>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	dd0f      	ble.n	8011aaa <vRW_Settings_Tas+0x176>
		spi_fs_read_file_offset(MB_TCP_SETT_FILE, &mb_tcp_sett, 0, sizeof(mb_tcp_sett));
 8011a8a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011a8e:	2302      	movs	r3, #2
 8011a90:	2200      	movs	r2, #0
 8011a92:	487b      	ldr	r0, [pc, #492]	; (8011c80 <vRW_Settings_Tas+0x34c>)
 8011a94:	f019 fa82 	bl	802af9c <spi_fs_read_file_offset>
		xQueueOverwrite(mb_tcp_settingsQHandle ,(void *)&mb_tcp_sett);
 8011a98:	4b7a      	ldr	r3, [pc, #488]	; (8011c84 <vRW_Settings_Tas+0x350>)
 8011a9a:	6818      	ldr	r0, [r3, #0]
 8011a9c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011aa0:	2302      	movs	r3, #2
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f00f f9a0 	bl	8020de8 <xQueueGenericSend>
 8011aa8:	e00b      	b.n	8011ac2 <vRW_Settings_Tas+0x18e>
	}else{
		mb_tcp_sett.enable 		= 0;
 8011aaa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aae:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	705a      	strb	r2, [r3, #1]
		mb_tcp_sett.save		= 1;
 8011ab6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011aba:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011abe:	2201      	movs	r2, #1
 8011ac0:	701a      	strb	r2, [r3, #0]
	}

	if (0 < spi_fs_file_size(KW_COUNT_STOR_FILE)){
 8011ac2:	4871      	ldr	r0, [pc, #452]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011ac4:	f019 fae6 	bl	802b094 <spi_fs_file_size>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	dd0b      	ble.n	8011ae6 <vRW_Settings_Tas+0x1b2>
		spi_fs_read_file_offset(KW_COUNT_STOR_FILE, &test_kWh_from_flash, 0, sizeof(test_kWh_from_flash));
 8011ace:	2304      	movs	r3, #4
 8011ad0:	2200      	movs	r2, #0
 8011ad2:	496e      	ldr	r1, [pc, #440]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011ad4:	486c      	ldr	r0, [pc, #432]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011ad6:	f019 fa61 	bl	802af9c <spi_fs_read_file_offset>
		KWatt_h_old = test_kWh_from_flash;
 8011ada:	4b6c      	ldr	r3, [pc, #432]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011ae2:	6013      	str	r3, [r2, #0]
 8011ae4:	e00d      	b.n	8011b02 <vRW_Settings_Tas+0x1ce>
	}else{
		test_kWh_from_flash = 0.0;
 8011ae6:	4b69      	ldr	r3, [pc, #420]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011ae8:	f04f 0200 	mov.w	r2, #0
 8011aec:	601a      	str	r2, [r3, #0]
		KWatt_h_old 		= 0.0;
 8011aee:	f04f 0300 	mov.w	r3, #0
 8011af2:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8011af6:	6013      	str	r3, [r2, #0]
		spi_fs_over_write_file(KW_COUNT_STOR_FILE, &test_kWh_from_flash, sizeof(test_kWh_from_flash));
 8011af8:	2204      	movs	r2, #4
 8011afa:	4964      	ldr	r1, [pc, #400]	; (8011c8c <vRW_Settings_Tas+0x358>)
 8011afc:	4862      	ldr	r0, [pc, #392]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011afe:	f019 fa91 	bl	802b024 <spi_fs_over_write_file>

	}

	spi_fs_mkdir("/web");
 8011b02:	4863      	ldr	r0, [pc, #396]	; (8011c90 <vRW_Settings_Tas+0x35c>)
 8011b04:	f019 fb42 	bl	802b18c <spi_fs_mkdir>
	spi_fs_remove_recurcuve_in("/firmware");
 8011b08:	4862      	ldr	r0, [pc, #392]	; (8011c94 <vRW_Settings_Tas+0x360>)
 8011b0a:	f019 fc21 	bl	802b350 <spi_fs_remove_recurcuve_in>
	spi_fs_mkdir("/firmware");
 8011b0e:	4861      	ldr	r0, [pc, #388]	; (8011c94 <vRW_Settings_Tas+0x360>)
 8011b10:	f019 fb3c 	bl	802b18c <spi_fs_mkdir>
	/* Infinite loop */

  for(;;)
  {
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011b14:	4b56      	ldr	r3, [pc, #344]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f00f fce8 	bl	80214f4 <xQueuePeek>
	  if (PowerSett.save){
 8011b24:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b28:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b2c:	781b      	ldrb	r3, [r3, #0]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d014      	beq.n	8011b5c <vRW_Settings_Tas+0x228>
		  PowerSett.save = 0;
 8011b32:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b36:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(POW_SETT_FILE, &PowerSett, sizeof(PowerSett));
 8011b3e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8011b42:	2208      	movs	r2, #8
 8011b44:	4619      	mov	r1, r3
 8011b46:	4849      	ldr	r0, [pc, #292]	; (8011c6c <vRW_Settings_Tas+0x338>)
 8011b48:	f019 fa6c 	bl	802b024 <spi_fs_over_write_file>
		  xQueueOverwrite(Curr_sensor_settingsHandle ,(void *)&PowerSett);
 8011b4c:	4b48      	ldr	r3, [pc, #288]	; (8011c70 <vRW_Settings_Tas+0x33c>)
 8011b4e:	6818      	ldr	r0, [r3, #0]
 8011b50:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8011b54:	2302      	movs	r3, #2
 8011b56:	2200      	movs	r2, #0
 8011b58:	f00f f946 	bl	8020de8 <xQueueGenericSend>
	  }

	  xQueuePeek(mqttQHandle, (void *)&MQTT_cred, 0);
 8011b5c:	4b47      	ldr	r3, [pc, #284]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b64:	2200      	movs	r2, #0
 8011b66:	4618      	mov	r0, r3
 8011b68:	f00f fcc4 	bl	80214f4 <xQueuePeek>
	  if (MQTT_cred.save){
 8011b6c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b70:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d014      	beq.n	8011ba4 <vRW_Settings_Tas+0x270>
		  MQTT_cred.save = 0;
 8011b7a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011b7e:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 8011b82:	2200      	movs	r2, #0
 8011b84:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MQTT_SETT_FILE, &MQTT_cred, sizeof(MQTT_cred));
 8011b86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011b8a:	22c6      	movs	r2, #198	; 0xc6
 8011b8c:	4619      	mov	r1, r3
 8011b8e:	483a      	ldr	r0, [pc, #232]	; (8011c78 <vRW_Settings_Tas+0x344>)
 8011b90:	f019 fa48 	bl	802b024 <spi_fs_over_write_file>
		  xQueueOverwrite(mqttQHandle ,(void *)&MQTT_cred);
 8011b94:	4b39      	ldr	r3, [pc, #228]	; (8011c7c <vRW_Settings_Tas+0x348>)
 8011b96:	6818      	ldr	r0, [r3, #0]
 8011b98:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8011b9c:	2302      	movs	r3, #2
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f00f f922 	bl	8020de8 <xQueueGenericSend>
	  }

	  xQueuePeek(mb_tcp_settingsQHandle, (void *)&mb_tcp_sett, 0);
 8011ba4:	4b37      	ldr	r3, [pc, #220]	; (8011c84 <vRW_Settings_Tas+0x350>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8011bac:	2200      	movs	r2, #0
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f00f fca0 	bl	80214f4 <xQueuePeek>
	  if (mb_tcp_sett.save){
 8011bb4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bb8:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bbc:	781b      	ldrb	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d00c      	beq.n	8011bdc <vRW_Settings_Tas+0x2a8>
		  mb_tcp_sett.save = 0;
 8011bc2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bc6:	f5a3 7378 	sub.w	r3, r3, #992	; 0x3e0
 8011bca:	2200      	movs	r2, #0
 8011bcc:	701a      	strb	r2, [r3, #0]
		  spi_fs_over_write_file(MB_TCP_SETT_FILE, &mb_tcp_sett, sizeof(mb_tcp_sett));
 8011bce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011bd2:	2202      	movs	r2, #2
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	482a      	ldr	r0, [pc, #168]	; (8011c80 <vRW_Settings_Tas+0x34c>)
 8011bd8:	f019 fa24 	bl	802b024 <spi_fs_over_write_file>
	  }

	  xQueuePeek(PowerDataQHandle, (void *)&PowerData, 0);
 8011bdc:	4b2e      	ldr	r3, [pc, #184]	; (8011c98 <vRW_Settings_Tas+0x364>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f107 010c 	add.w	r1, r7, #12
 8011be4:	2200      	movs	r2, #0
 8011be6:	4618      	mov	r0, r3
 8011be8:	f00f fc84 	bl	80214f4 <xQueuePeek>

	  if ((next_update < time_counter) || ((PowerData.KWatt_h - KWatt_h_old)> 1.0)){
 8011bec:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8011bf0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d312      	bcc.n	8011c1e <vRW_Settings_Tas+0x2ea>
 8011bf8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8011bfc:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8011c00:	ed93 7a02 	vldr	s14, [r3, #8]
 8011c04:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8011c08:	edd3 7a00 	vldr	s15, [r3]
 8011c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1c:	dd0d      	ble.n	8011c3a <vRW_Settings_Tas+0x306>
		  spi_fs_over_write_file(KW_COUNT_STOR_FILE, &PowerData.KWatt_h, sizeof(PowerData.KWatt_h));
 8011c1e:	f107 030c 	add.w	r3, r7, #12
 8011c22:	3308      	adds	r3, #8
 8011c24:	2204      	movs	r2, #4
 8011c26:	4619      	mov	r1, r3
 8011c28:	4817      	ldr	r0, [pc, #92]	; (8011c88 <vRW_Settings_Tas+0x354>)
 8011c2a:	f019 f9fb 	bl	802b024 <spi_fs_over_write_file>
		  next_update += ENERGY_VALUE_SAVE_INTERVAL;
 8011c2e:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 8011c32:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8011c36:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	  }

	  time_counter ++;
 8011c3a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8011c3e:	3301      	adds	r3, #1
 8011c40:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    osDelay(delay1s);
 8011c44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011c48:	f00e fb78 	bl	802033c <osDelay>
	  xQueuePeek(Curr_sensor_settingsHandle, (void *)&PowerSett, 0);
 8011c4c:	e762      	b.n	8011b14 <vRW_Settings_Tas+0x1e0>
 8011c4e:	bf00      	nop
 8011c50:	20000328 	.word	0x20000328
 8011c54:	0801574d 	.word	0x0801574d
 8011c58:	08015729 	.word	0x08015729
 8011c5c:	08015789 	.word	0x08015789
 8011c60:	08015771 	.word	0x08015771
 8011c64:	08011121 	.word	0x08011121
 8011c68:	08011105 	.word	0x08011105
 8011c6c:	08031b84 	.word	0x08031b84
 8011c70:	20000454 	.word	0x20000454
 8011c74:	3a83126f 	.word	0x3a83126f
 8011c78:	08031b94 	.word	0x08031b94
 8011c7c:	20000458 	.word	0x20000458
 8011c80:	08031ba4 	.word	0x08031ba4
 8011c84:	2000045c 	.word	0x2000045c
 8011c88:	08031bb8 	.word	0x08031bb8
 8011c8c:	20000494 	.word	0x20000494
 8011c90:	08031bcc 	.word	0x08031bcc
 8011c94:	08031bd4 	.word	0x08031bd4
 8011c98:	20000450 	.word	0x20000450

08011c9c <vOneSecondTickTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vOneSecondTickTask */
void vOneSecondTickTask(void *argument)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b084      	sub	sp, #16
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vOneSecondTickTask */
	uint32_t seconds;
	seconds = 0;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	seconds++ ;
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	3301      	adds	r3, #1
 8011cac:	60fb      	str	r3, [r7, #12]
	DHCP_time_handler();
 8011cae:	f00a fa17 	bl	801c0e0 <DHCP_time_handler>
	httpServer_time_handler();
 8011cb2:	f00d fe4f 	bl	801f954 <httpServer_time_handler>
	dns_service_increment_second();
 8011cb6:	f00a ffa1 	bl	801cbfc <dns_service_increment_second>
	xQueueOverwrite(uptimeQHandle, (void *)&seconds);
 8011cba:	4b06      	ldr	r3, [pc, #24]	; (8011cd4 <vOneSecondTickTask+0x38>)
 8011cbc:	6818      	ldr	r0, [r3, #0]
 8011cbe:	f107 010c 	add.w	r1, r7, #12
 8011cc2:	2302      	movs	r3, #2
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	f00f f88f 	bl	8020de8 <xQueueGenericSend>
    osDelay(delay1s);
 8011cca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011cce:	f00e fb35 	bl	802033c <osDelay>
	seconds++ ;
 8011cd2:	e7e9      	b.n	8011ca8 <vOneSecondTickTask+0xc>
 8011cd4:	20000460 	.word	0x20000460

08011cd8 <vMaintEthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMaintEthTask */
void vMaintEthTask(void *argument)
{
 8011cd8:	b590      	push	{r4, r7, lr}
 8011cda:	f5ad 5d84 	sub.w	sp, sp, #4224	; 0x1080
 8011cde:	b083      	sub	sp, #12
 8011ce0:	af12      	add	r7, sp, #72	; 0x48
 8011ce2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ce6:	f843 0c3c 	str.w	r0, [r3, #-60]
	  Ethernet_info_struct	EthernetInfo;
	  uint8_t 				i;
	  uint8_t 				DHCP_DATABUF[SOCKET_BUFF_SIZE];
	  uint8_t				DNS_buff[SOCKET_BUFF_SIZE];

	  memset(&EthernetInfo, 0, sizeof(EthernetInfo));
 8011cea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011cee:	f103 0308 	add.w	r3, r3, #8
 8011cf2:	2220      	movs	r2, #32
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f01b fed8 	bl	802daac <memset>
	  memset(&NetInfo, 		0, sizeof(NetInfo));
 8011cfc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d00:	f103 0308 	add.w	r3, r3, #8
 8011d04:	2217      	movs	r2, #23
 8011d06:	2100      	movs	r1, #0
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f01b fecf 	bl	802daac <memset>

	  NetInfo.mac[0]	= 0x40;
 8011d0e:	2340      	movs	r3, #64	; 0x40
 8011d10:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d14:	f102 0208 	add.w	r2, r2, #8
 8011d18:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[1]	= 0x08;
 8011d1a:	2308      	movs	r3, #8
 8011d1c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d20:	f102 0209 	add.w	r2, r2, #9
 8011d24:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[2]	= *(uint8_t*)(UID_BASE);
 8011d26:	4bdc      	ldr	r3, [pc, #880]	; (8012098 <vMaintEthTask+0x3c0>)
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d2e:	f102 020a 	add.w	r2, r2, #10
 8011d32:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[3]	= *(uint8_t*)(UID_BASE + 0x01);
 8011d34:	4bd9      	ldr	r3, [pc, #868]	; (801209c <vMaintEthTask+0x3c4>)
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d3c:	f102 020b 	add.w	r2, r2, #11
 8011d40:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[4]	= *(uint8_t*)(UID_BASE + 0x02);
 8011d42:	4bd7      	ldr	r3, [pc, #860]	; (80120a0 <vMaintEthTask+0x3c8>)
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d4a:	f102 020c 	add.w	r2, r2, #12
 8011d4e:	7013      	strb	r3, [r2, #0]
	  NetInfo.mac[5]	= *(uint8_t*)(UID_BASE + 0x03);
 8011d50:	4bd4      	ldr	r3, [pc, #848]	; (80120a4 <vMaintEthTask+0x3cc>)
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d58:	f102 020d 	add.w	r2, r2, #13
 8011d5c:	7013      	strb	r3, [r2, #0]

	  memcpy(&EthernetInfo.mac, &NetInfo.mac, sizeof(NetInfo.mac));
 8011d5e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011d62:	f103 030b 	add.w	r3, r3, #11
 8011d66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d6a:	f102 0208 	add.w	r2, r2, #8
 8011d6e:	6810      	ldr	r0, [r2, #0]
 8011d70:	6018      	str	r0, [r3, #0]
 8011d72:	8892      	ldrh	r2, [r2, #4]
 8011d74:	809a      	strh	r2, [r3, #4]

		//NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
		//NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
		//NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
		//NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
		NetInfo.dhcp 	= NETINFO_DHCP;
 8011d76:	2302      	movs	r3, #2
 8011d78:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011d7c:	f102 021e 	add.w	r2, r2, #30
 8011d80:	7013      	strb	r3, [r2, #0]
 8011d82:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d86:	f103 030e 	add.w	r3, r3, #14
 8011d8a:	681b      	ldr	r3, [r3, #0]
		// TODO rewrite with memcpy function

		memcpy(&EthernetInfo.ip, &NetInfo.ip, sizeof(NetInfo.ip));
 8011d8c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011d90:	f102 0211 	add.w	r2, r2, #17
 8011d94:	6013      	str	r3, [r2, #0]
 8011d96:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011d9a:	f103 0312 	add.w	r3, r3, #18
 8011d9e:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.sn, &NetInfo.sn, sizeof(NetInfo.sn));
 8011da0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011da4:	f102 0215 	add.w	r2, r2, #21
 8011da8:	6013      	str	r3, [r2, #0]
 8011daa:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dae:	f103 0316 	add.w	r3, r3, #22
 8011db2:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.gw, &NetInfo.gw, sizeof(NetInfo.gw));
 8011db4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011db8:	f102 0219 	add.w	r2, r2, #25
 8011dbc:	6013      	str	r3, [r2, #0]
 8011dbe:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dc2:	f103 031a 	add.w	r3, r3, #26
 8011dc6:	681b      	ldr	r3, [r3, #0]
		memcpy(&EthernetInfo.dns, &NetInfo.dns, sizeof(NetInfo.dns));
 8011dc8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011dcc:	f102 021d 	add.w	r2, r2, #29
 8011dd0:	6013      	str	r3, [r2, #0]
							EthernetInfo.sn[i] 	= NetInfo.sn[i];
							EthernetInfo.gw[i] 	= NetInfo.gw[i];
							EthernetInfo.dns[i] = NetInfo.dns[i];
						}
*/
	  Reg_eth_spi(hspi3);
 8011dd2:	4cb5      	ldr	r4, [pc, #724]	; (80120a8 <vMaintEthTask+0x3d0>)
 8011dd4:	4668      	mov	r0, sp
 8011dd6:	f104 0310 	add.w	r3, r4, #16
 8011dda:	2248      	movs	r2, #72	; 0x48
 8011ddc:	4619      	mov	r1, r3
 8011dde:	f01c f83a 	bl	802de56 <memcpy>
 8011de2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8011de6:	f00e f907 	bl	801fff8 <Reg_eth_spi>
	  w5500_reset_cb(Eth_reset_on, Eth_reset_off);
 8011dea:	49b0      	ldr	r1, [pc, #704]	; (80120ac <vMaintEthTask+0x3d4>)
 8011dec:	48b0      	ldr	r0, [pc, #704]	; (80120b0 <vMaintEthTask+0x3d8>)
 8011dee:	f00e f8af 	bl	801ff50 <w5500_reset_cb>
	  w5500_delay_cb(osDelay);
 8011df2:	48b0      	ldr	r0, [pc, #704]	; (80120b4 <vMaintEthTask+0x3dc>)
 8011df4:	f00e f894 	bl	801ff20 <w5500_delay_cb>
	  w5500_lib_init(&NetInfo);
 8011df8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011dfc:	f103 0308 	add.w	r3, r3, #8
 8011e00:	4618      	mov	r0, r3
 8011e02:	f00d ff91 	bl	801fd28 <w5500_lib_init>
	  reg_wizchip_spi_cbfunc(Eth_spi_resv_byte, Eth_spi_send_byte);
 8011e06:	49ac      	ldr	r1, [pc, #688]	; (80120b8 <vMaintEthTask+0x3e0>)
 8011e08:	48ac      	ldr	r0, [pc, #688]	; (80120bc <vMaintEthTask+0x3e4>)
 8011e0a:	f008 f8d3 	bl	8019fb4 <reg_wizchip_spi_cbfunc>
	  reg_wizchip_cs_cbfunc(Eth_spi_select, Eth_spi_deselect);
 8011e0e:	49ac      	ldr	r1, [pc, #688]	; (80120c0 <vMaintEthTask+0x3e8>)
 8011e10:	48ac      	ldr	r0, [pc, #688]	; (80120c4 <vMaintEthTask+0x3ec>)
 8011e12:	f008 f8a9 	bl	8019f68 <reg_wizchip_cs_cbfunc>
	  reg_wizchip_cris_cbfunc(EthMutexTake, EthMutexRelease);
 8011e16:	49ac      	ldr	r1, [pc, #688]	; (80120c8 <vMaintEthTask+0x3f0>)
 8011e18:	48ac      	ldr	r0, [pc, #688]	; (80120cc <vMaintEthTask+0x3f4>)
 8011e1a:	f008 f87f 	bl	8019f1c <reg_wizchip_cris_cbfunc>
	  reg_dhcp_cbfunc(Callback_IPAssigned, Callback_IPAssigned, Callback_IPConflict);
 8011e1e:	4aac      	ldr	r2, [pc, #688]	; (80120d0 <vMaintEthTask+0x3f8>)
 8011e20:	49ac      	ldr	r1, [pc, #688]	; (80120d4 <vMaintEthTask+0x3fc>)
 8011e22:	48ac      	ldr	r0, [pc, #688]	; (80120d4 <vMaintEthTask+0x3fc>)
 8011e24:	f008 fe2a 	bl	801aa7c <reg_dhcp_cbfunc>
	  dns_service_init(SERVICE_SOCKET, (uint8_t *)DNS_buff, SOCKET_BUFF_SIZE);
 8011e28:	f107 0320 	add.w	r3, r7, #32
 8011e2c:	3b18      	subs	r3, #24
 8011e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e32:	4619      	mov	r1, r3
 8011e34:	2004      	movs	r0, #4
 8011e36:	f00a fe8b 	bl	801cb50 <dns_service_init>
	  dns_service_reg_cb_net_ready(assigned_ip);
 8011e3a:	48a7      	ldr	r0, [pc, #668]	; (80120d8 <vMaintEthTask+0x400>)
 8011e3c:	f00a fe76 	bl	801cb2c <dns_service_reg_cb_net_ready>
	  dns_service_reg_cb_mutex(ServiceSockMutexTake, ServiceSockMutexRelease);
 8011e40:	49a6      	ldr	r1, [pc, #664]	; (80120dc <vMaintEthTask+0x404>)
 8011e42:	48a7      	ldr	r0, [pc, #668]	; (80120e0 <vMaintEthTask+0x408>)
 8011e44:	f00a fe56 	bl	801caf4 <dns_service_reg_cb_mutex>


  /* Infinite loop */
  for(;;)
  {
		EthernetInfo.dhcp = NetInfo.dhcp;
 8011e48:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e4c:	f103 031e 	add.w	r3, r3, #30
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011e56:	f102 0201 	add.w	r2, r2, #1
 8011e5a:	7013      	strb	r3, [r2, #0]
		EthernetInfo.link = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8011e62:	f102 0208 	add.w	r2, r2, #8
 8011e66:	7013      	strb	r3, [r2, #0]

		if (w5500_init() != 0)continue; //try from begin in fail case
 8011e68:	f00e f81c 	bl	801fea4 <w5500_init>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f040 81eb 	bne.w	801224a <vMaintEthTask+0x572>
		vTaskDelay(delay0_5s);
 8011e74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011e78:	f010 f81c 	bl	8021eb4 <vTaskDelay>
		setSHAR(NetInfo.mac);			//set mac address
 8011e7c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e80:	f103 0308 	add.w	r3, r3, #8
 8011e84:	2206      	movs	r2, #6
 8011e86:	4619      	mov	r1, r3
 8011e88:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8011e8c:	f006 fe02 	bl	8018a94 <WIZCHIP_WRITE_BUF>

		if (NetInfo.dhcp == NETINFO_DHCP){
 8011e90:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011e94:	f103 031e 	add.w	r3, r3, #30
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d106      	bne.n	8011eac <vMaintEthTask+0x1d4>
			DHCP_init(DHCP_SOCKET, DHCP_DATABUF);
 8011e9e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8011ea2:	4619      	mov	r1, r3
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	f00a f871 	bl	801bf8c <DHCP_init>
 8011eaa:	e003      	b.n	8011eb4 <vMaintEthTask+0x1dc>
			//todo DNS_init();
		}else{
			network_init();
 8011eac:	f00d ff4c 	bl	801fd48 <network_init>
			set_ip_aasigned();
 8011eb0:	f00d ffec 	bl	801fe8c <set_ip_aasigned>
			if (NetInfo.dhcp == NETINFO_DHCP){

			}
//xSemaphoreTake(SocketMutex, portMAX_DELAY);
			//osMutexAcquire(NetworkHandle, osWaitForever);
			SocketMutexTake();
 8011eb4:	f7ff f940 	bl	8011138 <SocketMutexTake>
			dhcp_rutine();
 8011eb8:	f00d ff96 	bl	801fde8 <dhcp_rutine>

			if (!link_status()){
 8011ebc:	f00d ffac 	bl	801fe18 <link_status>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f040 80e0 	bne.w	8012088 <vMaintEthTask+0x3b0>
				NetInfo.ip[0]	= 0, NetInfo.ip[1] 	= 0, NetInfo.ip[2] 	= 0, NetInfo.ip[3] 	= 0;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ece:	f102 020e 	add.w	r2, r2, #14
 8011ed2:	7013      	strb	r3, [r2, #0]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011eda:	f102 020f 	add.w	r2, r2, #15
 8011ede:	7013      	strb	r3, [r2, #0]
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ee6:	f102 0210 	add.w	r2, r2, #16
 8011eea:	7013      	strb	r3, [r2, #0]
 8011eec:	2300      	movs	r3, #0
 8011eee:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011ef2:	f102 0211 	add.w	r2, r2, #17
 8011ef6:	7013      	strb	r3, [r2, #0]
				NetInfo.sn[0] 	= 0, NetInfo.sn[1] 	= 0, NetInfo.sn[2] 	= 0, NetInfo.sn[3] 	= 0;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011efe:	f102 0212 	add.w	r2, r2, #18
 8011f02:	7013      	strb	r3, [r2, #0]
 8011f04:	2300      	movs	r3, #0
 8011f06:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f0a:	f102 0213 	add.w	r2, r2, #19
 8011f0e:	7013      	strb	r3, [r2, #0]
 8011f10:	2300      	movs	r3, #0
 8011f12:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f16:	f102 0214 	add.w	r2, r2, #20
 8011f1a:	7013      	strb	r3, [r2, #0]
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f22:	f102 0215 	add.w	r2, r2, #21
 8011f26:	7013      	strb	r3, [r2, #0]
				NetInfo.gw[0] 	= 0, NetInfo.gw[1] 	= 0, NetInfo.gw[2] 	= 0, NetInfo.gw[3] 	= 0;
 8011f28:	2300      	movs	r3, #0
 8011f2a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f2e:	f102 0216 	add.w	r2, r2, #22
 8011f32:	7013      	strb	r3, [r2, #0]
 8011f34:	2300      	movs	r3, #0
 8011f36:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f3a:	f102 0217 	add.w	r2, r2, #23
 8011f3e:	7013      	strb	r3, [r2, #0]
 8011f40:	2300      	movs	r3, #0
 8011f42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f46:	f102 0218 	add.w	r2, r2, #24
 8011f4a:	7013      	strb	r3, [r2, #0]
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f52:	f102 0219 	add.w	r2, r2, #25
 8011f56:	7013      	strb	r3, [r2, #0]
				NetInfo.dns[0] 	= 0, NetInfo.dns[1] = 0, NetInfo.dns[2] = 0, NetInfo.dns[3] = 0;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f5e:	f102 021a 	add.w	r2, r2, #26
 8011f62:	7013      	strb	r3, [r2, #0]
 8011f64:	2300      	movs	r3, #0
 8011f66:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f6a:	f102 021b 	add.w	r2, r2, #27
 8011f6e:	7013      	strb	r3, [r2, #0]
 8011f70:	2300      	movs	r3, #0
 8011f72:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f76:	f102 021c 	add.w	r2, r2, #28
 8011f7a:	7013      	strb	r3, [r2, #0]
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f82:	f102 021d 	add.w	r2, r2, #29
 8011f86:	7013      	strb	r3, [r2, #0]

//xSemaphoreGive(SocketMutex);
				//osMutexRelease(NetworkHandle);
				SocketMutexRelease();
 8011f88:	f7ff f8e4 	bl	8011154 <SocketMutexRelease>

				for(i = 0; i < 4; i++){
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8011f92:	f102 021f 	add.w	r2, r2, #31
 8011f96:	7013      	strb	r3, [r2, #0]
 8011f98:	e05a      	b.n	8012050 <vMaintEthTask+0x378>
					EthernetInfo.ip[i] 	= NetInfo.ip[i];
 8011f9a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011f9e:	f103 031f 	add.w	r3, r3, #31
 8011fa2:	781a      	ldrb	r2, [r3, #0]
 8011fa4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fa8:	f103 031f 	add.w	r3, r3, #31
 8011fac:	781b      	ldrb	r3, [r3, #0]
 8011fae:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fb2:	443a      	add	r2, r7
 8011fb4:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8011fb8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fbc:	443b      	add	r3, r7
 8011fbe:	f803 2c2f 	strb.w	r2, [r3, #-47]
					EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8011fc2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fc6:	f103 031f 	add.w	r3, r3, #31
 8011fca:	781a      	ldrb	r2, [r3, #0]
 8011fcc:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fd0:	f103 031f 	add.w	r3, r3, #31
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8011fda:	443a      	add	r2, r7
 8011fdc:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 8011fe0:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8011fe4:	443b      	add	r3, r7
 8011fe6:	f803 2c2b 	strb.w	r2, [r3, #-43]
					EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8011fea:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011fee:	f103 031f 	add.w	r3, r3, #31
 8011ff2:	781a      	ldrb	r2, [r3, #0]
 8011ff4:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8011ff8:	f103 031f 	add.w	r3, r3, #31
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012002:	443a      	add	r2, r7
 8012004:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8012008:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801200c:	443b      	add	r3, r7
 801200e:	f803 2c27 	strb.w	r2, [r3, #-39]
					EthernetInfo.dns[i] = NetInfo.dns[i];
 8012012:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012016:	f103 031f 	add.w	r3, r3, #31
 801201a:	781a      	ldrb	r2, [r3, #0]
 801201c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012020:	f103 031f 	add.w	r3, r3, #31
 8012024:	781b      	ldrb	r3, [r3, #0]
 8012026:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 801202a:	443a      	add	r2, r7
 801202c:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 8012030:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012034:	443b      	add	r3, r7
 8012036:	f803 2c23 	strb.w	r2, [r3, #-35]
				for(i = 0; i < 4; i++){
 801203a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801203e:	f103 031f 	add.w	r3, r3, #31
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	3301      	adds	r3, #1
 8012046:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801204a:	f102 021f 	add.w	r2, r2, #31
 801204e:	7013      	strb	r3, [r2, #0]
 8012050:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012054:	f103 031f 	add.w	r3, r3, #31
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	2b03      	cmp	r3, #3
 801205c:	d99d      	bls.n	8011f9a <vMaintEthTask+0x2c2>
				}
				EthernetInfo.link 	= 0;
 801205e:	2300      	movs	r3, #0
 8012060:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8012064:	f102 0208 	add.w	r2, r2, #8
 8012068:	7013      	strb	r3, [r2, #0]
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 801206a:	4b1e      	ldr	r3, [pc, #120]	; (80120e4 <vMaintEthTask+0x40c>)
 801206c:	6818      	ldr	r0, [r3, #0]
 801206e:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012072:	f101 0108 	add.w	r1, r1, #8
 8012076:	2302      	movs	r3, #2
 8012078:	2200      	movs	r2, #0
 801207a:	f00e feb5 	bl	8020de8 <xQueueGenericSend>
				break;
 801207e:	bf00      	nop
			// SET DNS SERVER IP
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
			osDelay(delay1s);
		}
    osDelay(1);
 8012080:	2001      	movs	r0, #1
 8012082:	f00e f95b 	bl	802033c <osDelay>
 8012086:	e6df      	b.n	8011e48 <vMaintEthTask+0x170>
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012088:	2300      	movs	r3, #0
 801208a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801208e:	f102 021f 	add.w	r2, r2, #31
 8012092:	7013      	strb	r3, [r2, #0]
 8012094:	e083      	b.n	801219e <vMaintEthTask+0x4c6>
 8012096:	bf00      	nop
 8012098:	1fff7a10 	.word	0x1fff7a10
 801209c:	1fff7a11 	.word	0x1fff7a11
 80120a0:	1fff7a12 	.word	0x1fff7a12
 80120a4:	1fff7a13 	.word	0x1fff7a13
 80120a8:	20000380 	.word	0x20000380
 80120ac:	0801ffb1 	.word	0x0801ffb1
 80120b0:	0801ff99 	.word	0x0801ff99
 80120b4:	0802033d 	.word	0x0802033d
 80120b8:	08020029 	.word	0x08020029
 80120bc:	0802004d 	.word	0x0802004d
 80120c0:	0801ffe1 	.word	0x0801ffe1
 80120c4:	0801ffc9 	.word	0x0801ffc9
 80120c8:	080110ed 	.word	0x080110ed
 80120cc:	080110d1 	.word	0x080110d1
 80120d0:	0801fd7d 	.word	0x0801fd7d
 80120d4:	0801fd95 	.word	0x0801fd95
 80120d8:	0801fe75 	.word	0x0801fe75
 80120dc:	08011189 	.word	0x08011189
 80120e0:	0801116d 	.word	0x0801116d
 80120e4:	2000044c 	.word	0x2000044c
				EthernetInfo.ip[i] 	= NetInfo.ip[i];
 80120e8:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120ec:	f103 031f 	add.w	r3, r3, #31
 80120f0:	781a      	ldrb	r2, [r3, #0]
 80120f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80120f6:	f103 031f 	add.w	r3, r3, #31
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012100:	443a      	add	r2, r7
 8012102:	f812 2c12 	ldrb.w	r2, [r2, #-18]
 8012106:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801210a:	443b      	add	r3, r7
 801210c:	f803 2c2f 	strb.w	r2, [r3, #-47]
				EthernetInfo.sn[i] 	= NetInfo.sn[i];
 8012110:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012114:	f103 031f 	add.w	r3, r3, #31
 8012118:	781a      	ldrb	r2, [r3, #0]
 801211a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801211e:	f103 031f 	add.w	r3, r3, #31
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012128:	443a      	add	r2, r7
 801212a:	f812 2c0e 	ldrb.w	r2, [r2, #-14]
 801212e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012132:	443b      	add	r3, r7
 8012134:	f803 2c2b 	strb.w	r2, [r3, #-43]
				EthernetInfo.gw[i] 	= NetInfo.gw[i];
 8012138:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801213c:	f103 031f 	add.w	r3, r3, #31
 8012140:	781a      	ldrb	r2, [r3, #0]
 8012142:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012146:	f103 031f 	add.w	r3, r3, #31
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012150:	443a      	add	r2, r7
 8012152:	f812 2c0a 	ldrb.w	r2, [r2, #-10]
 8012156:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 801215a:	443b      	add	r3, r7
 801215c:	f803 2c27 	strb.w	r2, [r3, #-39]
				EthernetInfo.dns[i] = NetInfo.dns[i];
 8012160:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012164:	f103 031f 	add.w	r3, r3, #31
 8012168:	781a      	ldrb	r2, [r3, #0]
 801216a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801216e:	f103 031f 	add.w	r3, r3, #31
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	f502 5282 	add.w	r2, r2, #4160	; 0x1040
 8012178:	443a      	add	r2, r7
 801217a:	f812 2c06 	ldrb.w	r2, [r2, #-6]
 801217e:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8012182:	443b      	add	r3, r7
 8012184:	f803 2c23 	strb.w	r2, [r3, #-35]
			for(i = 0; i < 4; i++){//todo rewrite for get info from dhcp calbac
 8012188:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801218c:	f103 031f 	add.w	r3, r3, #31
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	3301      	adds	r3, #1
 8012194:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012198:	f102 021f 	add.w	r2, r2, #31
 801219c:	7013      	strb	r3, [r2, #0]
 801219e:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121a2:	f103 031f 	add.w	r3, r3, #31
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	2b03      	cmp	r3, #3
 80121aa:	d99d      	bls.n	80120e8 <vMaintEthTask+0x410>
			EthernetInfo.link 		= 1;
 80121ac:	2301      	movs	r3, #1
 80121ae:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121b2:	f102 0208 	add.w	r2, r2, #8
 80121b6:	7013      	strb	r3, [r2, #0]
			EthernetInfo.speed 		= link_speed();
 80121b8:	f00d fe50 	bl	801fe5c <link_speed>
 80121bc:	4603      	mov	r3, r0
 80121be:	b2db      	uxtb	r3, r3
 80121c0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121c4:	f102 020a 	add.w	r2, r2, #10
 80121c8:	7013      	strb	r3, [r2, #0]
			EthernetInfo.duplex 	= link_duplex();
 80121ca:	f00d fe3b 	bl	801fe44 <link_duplex>
 80121ce:	4603      	mov	r3, r0
 80121d0:	b2db      	uxtb	r3, r3
 80121d2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80121d6:	f102 0209 	add.w	r2, r2, #9
 80121da:	7013      	strb	r3, [r2, #0]
			EthernetInfo.lease_s	= getDHCPLeasetime();
 80121dc:	f00a f80e 	bl	801c1fc <getDHCPLeasetime>
 80121e0:	4603      	mov	r3, r0
 80121e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80121e6:	f102 0204 	add.w	r2, r2, #4
 80121ea:	6013      	str	r3, [r2, #0]
			SocketMutexRelease();
 80121ec:	f7fe ffb2 	bl	8011154 <SocketMutexRelease>
			if (NetInfo.ip[0]== 0){
 80121f0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80121f4:	f103 030e 	add.w	r3, r3, #14
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10e      	bne.n	801221c <vMaintEthTask+0x544>
				xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 80121fe:	4b14      	ldr	r3, [pc, #80]	; (8012250 <vMaintEthTask+0x578>)
 8012200:	6818      	ldr	r0, [r3, #0]
 8012202:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012206:	f101 0108 	add.w	r1, r1, #8
 801220a:	2302      	movs	r3, #2
 801220c:	2200      	movs	r2, #0
 801220e:	f00e fdeb 	bl	8020de8 <xQueueGenericSend>
				osDelay(delay1s);
 8012212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012216:	f00e f891 	bl	802033c <osDelay>
				continue;
 801221a:	e015      	b.n	8012248 <vMaintEthTask+0x570>
			dns_service_set_dns_ip((uint8_t*)&EthernetInfo.dns);
 801221c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012220:	f103 0308 	add.w	r3, r3, #8
 8012224:	3315      	adds	r3, #21
 8012226:	4618      	mov	r0, r3
 8012228:	f00a fcac 	bl	801cb84 <dns_service_set_dns_ip>
			xQueueOverwrite(EthernetInfoQHandle, (void *)&EthernetInfo);
 801222c:	4b08      	ldr	r3, [pc, #32]	; (8012250 <vMaintEthTask+0x578>)
 801222e:	6818      	ldr	r0, [r3, #0]
 8012230:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 8012234:	f101 0108 	add.w	r1, r1, #8
 8012238:	2302      	movs	r3, #2
 801223a:	2200      	movs	r2, #0
 801223c:	f00e fdd4 	bl	8020de8 <xQueueGenericSend>
			osDelay(delay1s);
 8012240:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012244:	f00e f87a 	bl	802033c <osDelay>
			if (NetInfo.dhcp == NETINFO_DHCP){
 8012248:	e634      	b.n	8011eb4 <vMaintEthTask+0x1dc>
		if (w5500_init() != 0)continue; //try from begin in fail case
 801224a:	bf00      	nop
		EthernetInfo.dhcp = NetInfo.dhcp;
 801224c:	e5fc      	b.n	8011e48 <vMaintEthTask+0x170>
 801224e:	bf00      	nop
 8012250:	2000044c 	.word	0x2000044c

08012254 <vDebugMemUsage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vDebugMemUsage */
void vDebugMemUsage(void *argument)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vDebugMemUsage */
	uint32_t	mem;
  /* Infinite loop */
  for(;;)
  {
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 801225c:	4b1f      	ldr	r3, [pc, #124]	; (80122dc <vDebugMemUsage+0x88>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4618      	mov	r0, r3
 8012262:	f00e f82d 	bl	80202c0 <osThreadGetStackSpace>
 8012266:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SensorsTaskHandle);
 8012268:	4b1d      	ldr	r3, [pc, #116]	; (80122e0 <vDebugMemUsage+0x8c>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4618      	mov	r0, r3
 801226e:	f00e f827 	bl	80202c0 <osThreadGetStackSpace>
 8012272:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(RW_Settings_TasHandle);
 8012274:	4b1b      	ldr	r3, [pc, #108]	; (80122e4 <vDebugMemUsage+0x90>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4618      	mov	r0, r3
 801227a:	f00e f821 	bl	80202c0 <osThreadGetStackSpace>
 801227e:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(oneSecondTickTaHandle);
 8012280:	4b19      	ldr	r3, [pc, #100]	; (80122e8 <vDebugMemUsage+0x94>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	4618      	mov	r0, r3
 8012286:	f00e f81b 	bl	80202c0 <osThreadGetStackSpace>
 801228a:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(maintEthTaskHandle);
 801228c:	4b17      	ldr	r3, [pc, #92]	; (80122ec <vDebugMemUsage+0x98>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f00e f815 	bl	80202c0 <osThreadGetStackSpace>
 8012296:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(DebugMemUsageTHandle);
 8012298:	4b15      	ldr	r3, [pc, #84]	; (80122f0 <vDebugMemUsage+0x9c>)
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	4618      	mov	r0, r3
 801229e:	f00e f80f 	bl	80202c0 <osThreadGetStackSpace>
 80122a2:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(httpServTaskHandle);
 80122a4:	4b13      	ldr	r3, [pc, #76]	; (80122f4 <vDebugMemUsage+0xa0>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4618      	mov	r0, r3
 80122aa:	f00e f809 	bl	80202c0 <osThreadGetStackSpace>
 80122ae:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(mqttClientTaskHandle);
 80122b0:	4b11      	ldr	r3, [pc, #68]	; (80122f8 <vDebugMemUsage+0xa4>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f00e f803 	bl	80202c0 <osThreadGetStackSpace>
 80122ba:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(SendBroadcastHandle);
 80122bc:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <vDebugMemUsage+0xa8>)
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f00d fffd 	bl	80202c0 <osThreadGetStackSpace>
 80122c6:	60f8      	str	r0, [r7, #12]
	  mem = osThreadGetStackSpace(NULL);
 80122c8:	2000      	movs	r0, #0
 80122ca:	f00d fff9 	bl	80202c0 <osThreadGetStackSpace>
 80122ce:	60f8      	str	r0, [r7, #12]
	  osDelay(delay1s);
 80122d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80122d4:	f00e f832 	bl	802033c <osDelay>
	  mem = osThreadGetStackSpace(defaultTaskHandle);
 80122d8:	e7c0      	b.n	801225c <vDebugMemUsage+0x8>
 80122da:	bf00      	nop
 80122dc:	20000420 	.word	0x20000420
 80122e0:	20000424 	.word	0x20000424
 80122e4:	20000428 	.word	0x20000428
 80122e8:	2000042c 	.word	0x2000042c
 80122ec:	20000430 	.word	0x20000430
 80122f0:	20000434 	.word	0x20000434
 80122f4:	20000438 	.word	0x20000438
 80122f8:	2000043c 	.word	0x2000043c
 80122fc:	20000444 	.word	0x20000444

08012300 <httpServ>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_httpServ */
void httpServ(void *argument)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8012306:	b084      	sub	sp, #16
 8012308:	af00      	add	r7, sp, #0
 801230a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801230e:	f843 0c2c 	str.w	r0, [r3, #-44]
  /* USER CODE BEGIN httpServ */
	Ethernet_info_struct	EthernetInfo;
	uint8_t 				socknumlist[] = {HTTP_SERVER_SOCKET, HTTP_SERVER_SOCKET1, HTTP_SERVER_SOCKET2};
 8012312:	4a51      	ldr	r2, [pc, #324]	; (8012458 <httpServ+0x158>)
 8012314:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012318:	f103 0308 	add.w	r3, r3, #8
 801231c:	6812      	ldr	r2, [r2, #0]
 801231e:	4611      	mov	r1, r2
 8012320:	8019      	strh	r1, [r3, #0]
 8012322:	3302      	adds	r3, #2
 8012324:	0c12      	lsrs	r2, r2, #16
 8012326:	701a      	strb	r2, [r3, #0]
	uint8_t 				http_buffer_rx[2048];
	uint8_t 				http_buffer_tx[2048];
	uint8_t 				http_nsockets = sizeof(socknumlist) / sizeof(socknumlist[0]);
 8012328:	2303      	movs	r3, #3
 801232a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 801232e:	f102 020e 	add.w	r2, r2, #14
 8012332:	7013      	strb	r3, [r2, #0]
	uint8_t					i;

	httpServer_init(http_buffer_tx, http_buffer_rx, http_nsockets, socknumlist);		// Tx/Rx buffers (2 kB) / The number of W5500 chip H/W sockets in use
 8012334:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012338:	f103 0308 	add.w	r3, r3, #8
 801233c:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012340:	f102 020e 	add.w	r2, r2, #14
 8012344:	7812      	ldrb	r2, [r2, #0]
 8012346:	f607 0108 	addw	r1, r7, #2056	; 0x808
 801234a:	f107 0010 	add.w	r0, r7, #16
 801234e:	3808      	subs	r0, #8
 8012350:	f00c fd28 	bl	801eda4 <httpServer_init>
	reg_external_post_cgi_processor(http_post_cgi_processor);
 8012354:	4841      	ldr	r0, [pc, #260]	; (801245c <httpServ+0x15c>)
 8012356:	f00d fc97 	bl	801fc88 <reg_external_post_cgi_processor>
	reg_external_get_cgi_processor(http_get_cgi_processor);
 801235a:	4841      	ldr	r0, [pc, #260]	; (8012460 <httpServ+0x160>)
 801235c:	f00d fcac 	bl	801fcb8 <reg_external_get_cgi_processor>

	http_parse_params_init(PowerDataQHandle,			PowrData);
 8012360:	4b40      	ldr	r3, [pc, #256]	; (8012464 <httpServ+0x164>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2103      	movs	r1, #3
 8012366:	4618      	mov	r0, r3
 8012368:	f000 fe26 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(Curr_sensor_settingsHandle,	PowrSensSett);
 801236c:	4b3e      	ldr	r3, [pc, #248]	; (8012468 <httpServ+0x168>)
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	2104      	movs	r1, #4
 8012372:	4618      	mov	r0, r3
 8012374:	f000 fe20 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(mqttQHandle,					MQTT);
 8012378:	4b3c      	ldr	r3, [pc, #240]	; (801246c <httpServ+0x16c>)
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	2100      	movs	r1, #0
 801237e:	4618      	mov	r0, r3
 8012380:	f000 fe1a 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(mb_tcp_settingsQHandle,		ModBusTCP);
 8012384:	4b3a      	ldr	r3, [pc, #232]	; (8012470 <httpServ+0x170>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	2102      	movs	r1, #2
 801238a:	4618      	mov	r0, r3
 801238c:	f000 fe14 	bl	8012fb8 <http_parse_params_init>
	http_parse_params_init(uptimeQHandle,				Uptime);
 8012390:	4b38      	ldr	r3, [pc, #224]	; (8012474 <httpServ+0x174>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2105      	movs	r1, #5
 8012396:	4618      	mov	r0, r3
 8012398:	f000 fe0e 	bl	8012fb8 <http_parse_params_init>


	reg_httpServer_webContent((uint8_t *)"index.html",			(uint8_t *)index_page);
 801239c:	4936      	ldr	r1, [pc, #216]	; (8012478 <httpServ+0x178>)
 801239e:	4837      	ldr	r0, [pc, #220]	; (801247c <httpServ+0x17c>)
 80123a0:	f00d faf4 	bl	801f98c <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"power_settings.html",	(uint8_t *)setting_resistance_sens_page);
 80123a4:	4936      	ldr	r1, [pc, #216]	; (8012480 <httpServ+0x180>)
 80123a6:	4837      	ldr	r0, [pc, #220]	; (8012484 <httpServ+0x184>)
 80123a8:	f00d faf0 	bl	801f98c <reg_httpServer_webContent>
	reg_httpServer_webContent((uint8_t *)"mqtt.html",			(uint8_t *)conf_page_mqtt);
 80123ac:	4936      	ldr	r1, [pc, #216]	; (8012488 <httpServ+0x188>)
 80123ae:	4837      	ldr	r0, [pc, #220]	; (801248c <httpServ+0x18c>)
 80123b0:	f00d faec 	bl	801f98c <reg_httpServer_webContent>


  /* Infinite loop */
  for(;;)
  {
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 80123b4:	4b36      	ldr	r3, [pc, #216]	; (8012490 <httpServ+0x190>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	f507 5180 	add.w	r1, r7, #4096	; 0x1000
 80123bc:	f101 010c 	add.w	r1, r1, #12
 80123c0:	2200      	movs	r2, #0
 80123c2:	4618      	mov	r0, r3
 80123c4:	f00f f896 	bl	80214f4 <xQueuePeek>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 80123c8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123cc:	f103 030c 	add.w	r3, r3, #12
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d037      	beq.n	8012446 <httpServ+0x146>
 80123d6:	f00d fd4d 	bl	801fe74 <assigned_ip>
 80123da:	4603      	mov	r3, r0
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d132      	bne.n	8012446 <httpServ+0x146>
		  for(i = 0 ; i < http_nsockets; i++){
 80123e0:	2300      	movs	r3, #0
 80123e2:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 80123e6:	f102 020f 	add.w	r2, r2, #15
 80123ea:	7013      	strb	r3, [r2, #0]
 80123ec:	e01e      	b.n	801242c <httpServ+0x12c>
			  SocketMutexTake();
 80123ee:	f7fe fea3 	bl	8011138 <SocketMutexTake>
			  httpServer_run(i); // HTTP Server handler
 80123f2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80123f6:	f103 030f 	add.w	r3, r3, #15
 80123fa:	781b      	ldrb	r3, [r3, #0]
 80123fc:	4618      	mov	r0, r3
 80123fe:	f00c fced 	bl	801eddc <httpServer_run>
			  SocketMutexRelease();
 8012402:	f7fe fea7 	bl	8011154 <SocketMutexRelease>
			  //osDelay(delay0_1s);
			  taskYIELD();
 8012406:	4b23      	ldr	r3, [pc, #140]	; (8012494 <httpServ+0x194>)
 8012408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	f3bf 8f4f 	dsb	sy
 8012412:	f3bf 8f6f 	isb	sy
		  for(i = 0 ; i < http_nsockets; i++){
 8012416:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801241a:	f103 030f 	add.w	r3, r3, #15
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	3301      	adds	r3, #1
 8012422:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8012426:	f102 020f 	add.w	r2, r2, #15
 801242a:	7013      	strb	r3, [r2, #0]
 801242c:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8012430:	f103 030f 	add.w	r3, r3, #15
 8012434:	781a      	ldrb	r2, [r3, #0]
 8012436:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 801243a:	f103 030e 	add.w	r3, r3, #14
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	429a      	cmp	r2, r3
 8012442:	d3d4      	bcc.n	80123ee <httpServ+0xee>
	  if ((EthernetInfo.link == ETH_LINK_UP) && (assigned_ip() == true)){
 8012444:	e003      	b.n	801244e <httpServ+0x14e>

		  }
	  }else{
		  osDelay(delay1s);
 8012446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801244a:	f00d ff77 	bl	802033c <osDelay>
	  }
	  osDelay(delay0_1s);
 801244e:	2064      	movs	r0, #100	; 0x64
 8012450:	f00d ff74 	bl	802033c <osDelay>
	  xQueuePeek(EthernetInfoQHandle, &EthernetInfo, 0);
 8012454:	e7ae      	b.n	80123b4 <httpServ+0xb4>
 8012456:	bf00      	nop
 8012458:	080327f4 	.word	0x080327f4
 801245c:	08013d11 	.word	0x08013d11
 8012460:	08013e25 	.word	0x08013e25
 8012464:	20000450 	.word	0x20000450
 8012468:	20000454 	.word	0x20000454
 801246c:	20000458 	.word	0x20000458
 8012470:	2000045c 	.word	0x2000045c
 8012474:	20000460 	.word	0x20000460
 8012478:	08031be0 	.word	0x08031be0
 801247c:	08031efc 	.word	0x08031efc
 8012480:	08031f08 	.word	0x08031f08
 8012484:	0803223c 	.word	0x0803223c
 8012488:	08032250 	.word	0x08032250
 801248c:	080327e8 	.word	0x080327e8
 8012490:	2000044c 	.word	0x2000044c
 8012494:	e000ed04 	.word	0xe000ed04

08012498 <vMQTT_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vMQTT_Task */
void vMQTT_Task(void *argument)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	f5ad 6d22 	sub.w	sp, sp, #2592	; 0xa20
 801249e:	af02      	add	r7, sp, #8
 80124a0:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80124a4:	f6a3 2314 	subw	r3, r3, #2580	; 0xa14
 80124a8:	6018      	str	r0, [r3, #0]
	char 					MQTT_READ_BUF[MQTT_BUF_LEN];
	char					topik_name[TOPIK_MAX_LEN];
	char					topik_payload[128];


	init_mqtt_call_mutex(SocketMutexTake, SocketMutexRelease);
 80124aa:	499e      	ldr	r1, [pc, #632]	; (8012724 <vMQTT_Task+0x28c>)
 80124ac:	489e      	ldr	r0, [pc, #632]	; (8012728 <vMQTT_Task+0x290>)
 80124ae:	f001 fd89 	bl	8013fc4 <init_mqtt_call_mutex>
  /* Infinite loop */
	for(;;)
	{
		osDelay(delay1s);
 80124b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124b6:	f00d ff41 	bl	802033c <osDelay>
		xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 80124ba:	4b9c      	ldr	r3, [pc, #624]	; (801272c <vMQTT_Task+0x294>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 80124c2:	2200      	movs	r2, #0
 80124c4:	4618      	mov	r0, r3
 80124c6:	f00f f815 	bl	80214f4 <xQueuePeek>
		if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 80124ca:	f897 39f8 	ldrb.w	r3, [r7, #2552]	; 0x9f8
 80124ce:	f083 0301 	eor.w	r3, r3, #1
 80124d2:	b2db      	uxtb	r3, r3
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f040 811a 	bne.w	801270e <vMQTT_Task+0x276>
 80124da:	f00d fccb 	bl	801fe74 <assigned_ip>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b01      	cmp	r3, #1
 80124e2:	f040 8114 	bne.w	801270e <vMQTT_Task+0x276>
			continue;
		}
		xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80124e6:	4b92      	ldr	r3, [pc, #584]	; (8012730 <vMQTT_Task+0x298>)
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 80124ee:	2200      	movs	r2, #0
 80124f0:	4618      	mov	r0, r3
 80124f2:	f00e ffff 	bl	80214f4 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 80124f6:	e00b      	b.n	8012510 <vMQTT_Task+0x78>
			osDelay(delay1s);
 80124f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80124fc:	f00d ff1e 	bl	802033c <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 8012500:	4b8b      	ldr	r3, [pc, #556]	; (8012730 <vMQTT_Task+0x298>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012508:	2200      	movs	r2, #0
 801250a:	4618      	mov	r0, r3
 801250c:	f00e fff2 	bl	80214f4 <xQueuePeek>
		while (MQTT_cred.enable == 0){
 8012510:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 8012514:	f083 0301 	eor.w	r3, r3, #1
 8012518:	b2db      	uxtb	r3, r3
 801251a:	2b00      	cmp	r3, #0
 801251c:	d1ec      	bne.n	80124f8 <vMQTT_Task+0x60>
		}
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 801251e:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 8012522:	f083 0301 	eor.w	r3, r3, #1
 8012526:	b2db      	uxtb	r3, r3
 8012528:	2b00      	cmp	r3, #0
 801252a:	f040 80f2 	bne.w	8012712 <vMQTT_Task+0x27a>
		if (mqtt_client_init(&EthernetInfo, &MQTT_cred, MQTT_SEND_BUF, MQTT_BUF_LEN, MQTT_READ_BUF, MQTT_BUF_LEN) != 0 ) {
 801252e:	f207 520c 	addw	r2, r7, #1292	; 0x50c
 8012532:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012536:	f607 10f8 	addw	r0, r7, #2552	; 0x9f8
 801253a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801253e:	9301      	str	r3, [sp, #4]
 8012540:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801254a:	f001 fd57 	bl	8013ffc <mqtt_client_init>
 801254e:	4603      	mov	r3, r0
 8012550:	2b00      	cmp	r3, #0
 8012552:	f040 80e0 	bne.w	8012716 <vMQTT_Task+0x27e>
			//TODO add message to log
			continue;
		}
		if (mqtt_client_connect() < 0) continue;
 8012556:	f001 fe3d 	bl	80141d4 <mqtt_client_connect>
 801255a:	4603      	mov	r3, r0
 801255c:	2b00      	cmp	r3, #0
 801255e:	f2c0 80dc 	blt.w	801271a <vMQTT_Task+0x282>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 8012562:	f001 fe87 	bl	8014274 <mqtt_client_reg_dev_on_home_assist>
 8012566:	4603      	mov	r3, r0
 8012568:	2b00      	cmp	r3, #0
 801256a:	f040 80d8 	bne.w	801271e <vMQTT_Task+0x286>

		generate_status_topik(topik_name, 0);
 801256e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012572:	2100      	movs	r1, #0
 8012574:	4618      	mov	r0, r3
 8012576:	f002 fab9 	bl	8014aec <generate_status_topik>
		while (1){
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 801257a:	4b6d      	ldr	r3, [pc, #436]	; (8012730 <vMQTT_Task+0x298>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8012582:	2200      	movs	r2, #0
 8012584:	4618      	mov	r0, r3
 8012586:	f00e ffb5 	bl	80214f4 <xQueuePeek>
			if (MQTT_cred.enable == 0){
 801258a:	f897 3931 	ldrb.w	r3, [r7, #2353]	; 0x931
 801258e:	f083 0301 	eor.w	r3, r3, #1
 8012592:	b2db      	uxtb	r3, r3
 8012594:	2b00      	cmp	r3, #0
 8012596:	d002      	beq.n	801259e <vMQTT_Task+0x106>
				mqtt_disconnect();
 8012598:	f001 fff4 	bl	8014584 <mqtt_disconnect>
				break;
 801259c:	e0b2      	b.n	8012704 <vMQTT_Task+0x26c>
			}
			xQueuePeek(PowerDataQHandle, &PowerData, 0);
 801259e:	4b65      	ldr	r3, [pc, #404]	; (8012734 <vMQTT_Task+0x29c>)
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	f607 110c 	addw	r1, r7, #2316	; 0x90c
 80125a6:	2200      	movs	r2, #0
 80125a8:	4618      	mov	r0, r3
 80125aa:	f00e ffa3 	bl	80214f4 <xQueuePeek>
			generate_key_value_JSON(topik_payload, dev_class_energy, PowerData.KWatt_h);
 80125ae:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80125ba:	f107 030c 	add.w	r3, r7, #12
 80125be:	eeb0 0a67 	vmov.f32	s0, s15
 80125c2:	495d      	ldr	r1, [pc, #372]	; (8012738 <vMQTT_Task+0x2a0>)
 80125c4:	4618      	mov	r0, r3
 80125c6:	f002 fac9 	bl	8014b5c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125ca:	f107 020c 	add.w	r2, r7, #12
 80125ce:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f001 ff9f 	bl	8014518 <send_data_to_topik>
 80125da:	4603      	mov	r3, r0
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f040 8086 	bne.w	80126ee <vMQTT_Task+0x256>

			generate_key_value_JSON(topik_payload, dev_class_voltage, PowerData.Voltage);
 80125e2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80125e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80125ea:	edd3 7a00 	vldr	s15, [r3]
 80125ee:	f107 030c 	add.w	r3, r7, #12
 80125f2:	eeb0 0a67 	vmov.f32	s0, s15
 80125f6:	4951      	ldr	r1, [pc, #324]	; (801273c <vMQTT_Task+0x2a4>)
 80125f8:	4618      	mov	r0, r3
 80125fa:	f002 faaf 	bl	8014b5c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80125fe:	f107 020c 	add.w	r2, r7, #12
 8012602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012606:	4611      	mov	r1, r2
 8012608:	4618      	mov	r0, r3
 801260a:	f001 ff85 	bl	8014518 <send_data_to_topik>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d16e      	bne.n	80126f2 <vMQTT_Task+0x25a>

			generate_key_value_JSON(topik_payload, dev_class_current, PowerData.Current);
 8012614:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012618:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801261c:	edd3 7a01 	vldr	s15, [r3, #4]
 8012620:	f107 030c 	add.w	r3, r7, #12
 8012624:	eeb0 0a67 	vmov.f32	s0, s15
 8012628:	4945      	ldr	r1, [pc, #276]	; (8012740 <vMQTT_Task+0x2a8>)
 801262a:	4618      	mov	r0, r3
 801262c:	f002 fa96 	bl	8014b5c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012630:	f107 020c 	add.w	r2, r7, #12
 8012634:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012638:	4611      	mov	r1, r2
 801263a:	4618      	mov	r0, r3
 801263c:	f001 ff6c 	bl	8014518 <send_data_to_topik>
 8012640:	4603      	mov	r3, r0
 8012642:	2b00      	cmp	r3, #0
 8012644:	d157      	bne.n	80126f6 <vMQTT_Task+0x25e>

			generate_key_value_JSON(topik_payload, dev_class_power_factor, PowerData.PowerFactor * 100);
 8012646:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 801264a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801264e:	edd3 7a05 	vldr	s15, [r3, #20]
 8012652:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8012744 <vMQTT_Task+0x2ac>
 8012656:	ee67 7a87 	vmul.f32	s15, s15, s14
 801265a:	f107 030c 	add.w	r3, r7, #12
 801265e:	eeb0 0a67 	vmov.f32	s0, s15
 8012662:	4939      	ldr	r1, [pc, #228]	; (8012748 <vMQTT_Task+0x2b0>)
 8012664:	4618      	mov	r0, r3
 8012666:	f002 fa79 	bl	8014b5c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801266a:	f107 020c 	add.w	r2, r7, #12
 801266e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012672:	4611      	mov	r1, r2
 8012674:	4618      	mov	r0, r3
 8012676:	f001 ff4f 	bl	8014518 <send_data_to_topik>
 801267a:	4603      	mov	r3, r0
 801267c:	2b00      	cmp	r3, #0
 801267e:	d13c      	bne.n	80126fa <vMQTT_Task+0x262>

			generate_key_value_JSON(topik_payload, dev_class_power, PowerData.ActivePower);
 8012680:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 8012684:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012688:	edd3 7a03 	vldr	s15, [r3, #12]
 801268c:	f107 030c 	add.w	r3, r7, #12
 8012690:	eeb0 0a67 	vmov.f32	s0, s15
 8012694:	492d      	ldr	r1, [pc, #180]	; (801274c <vMQTT_Task+0x2b4>)
 8012696:	4618      	mov	r0, r3
 8012698:	f002 fa60 	bl	8014b5c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 801269c:	f107 020c 	add.w	r2, r7, #12
 80126a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80126a4:	4611      	mov	r1, r2
 80126a6:	4618      	mov	r0, r3
 80126a8:	f001 ff36 	bl	8014518 <send_data_to_topik>
 80126ac:	4603      	mov	r3, r0
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d125      	bne.n	80126fe <vMQTT_Task+0x266>

			generate_key_value_JSON(topik_payload, dev_class_apparent_power, PowerData.ApparPower);
 80126b2:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80126b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80126ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80126be:	f107 030c 	add.w	r3, r7, #12
 80126c2:	eeb0 0a67 	vmov.f32	s0, s15
 80126c6:	4922      	ldr	r1, [pc, #136]	; (8012750 <vMQTT_Task+0x2b8>)
 80126c8:	4618      	mov	r0, r3
 80126ca:	f002 fa47 	bl	8014b5c <generate_key_value_JSON>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ce:	f107 020c 	add.w	r2, r7, #12
 80126d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80126d6:	4611      	mov	r1, r2
 80126d8:	4618      	mov	r0, r3
 80126da:	f001 ff1d 	bl	8014518 <send_data_to_topik>
 80126de:	4603      	mov	r3, r0
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d10e      	bne.n	8012702 <vMQTT_Task+0x26a>

			osDelay(delay30s);
 80126e4:	f247 5030 	movw	r0, #30000	; 0x7530
 80126e8:	f00d fe28 	bl	802033c <osDelay>
			xQueuePeek(mqttQHandle, &MQTT_cred, 0);
 80126ec:	e745      	b.n	801257a <vMQTT_Task+0xe2>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126ee:	bf00      	nop
 80126f0:	e008      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126f2:	bf00      	nop
 80126f4:	e006      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126f6:	bf00      	nop
 80126f8:	e004      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126fa:	bf00      	nop
 80126fc:	e002      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 80126fe:	bf00      	nop
 8012700:	e000      	b.n	8012704 <vMQTT_Task+0x26c>
			if (send_data_to_topik(topik_name, topik_payload) != 0 ) break;
 8012702:	bf00      	nop
		}
		osDelay(delay1s);
 8012704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012708:	f00d fe18 	bl	802033c <osDelay>
 801270c:	e6d1      	b.n	80124b2 <vMQTT_Task+0x1a>
			continue;
 801270e:	bf00      	nop
 8012710:	e6cf      	b.n	80124b2 <vMQTT_Task+0x1a>
		if (!MQTT_cred.enable) continue; //TODO mybe remove;
 8012712:	bf00      	nop
 8012714:	e6cd      	b.n	80124b2 <vMQTT_Task+0x1a>
			continue;
 8012716:	bf00      	nop
 8012718:	e6cb      	b.n	80124b2 <vMQTT_Task+0x1a>
		if (mqtt_client_connect() < 0) continue;
 801271a:	bf00      	nop
 801271c:	e6c9      	b.n	80124b2 <vMQTT_Task+0x1a>
		if (mqtt_client_reg_dev_on_home_assist() != 0) continue;
 801271e:	bf00      	nop
		osDelay(delay1s);
 8012720:	e6c7      	b.n	80124b2 <vMQTT_Task+0x1a>
 8012722:	bf00      	nop
 8012724:	08011155 	.word	0x08011155
 8012728:	08011139 	.word	0x08011139
 801272c:	2000044c 	.word	0x2000044c
 8012730:	20000458 	.word	0x20000458
 8012734:	20000450 	.word	0x20000450
 8012738:	080327f8 	.word	0x080327f8
 801273c:	08032800 	.word	0x08032800
 8012740:	08032808 	.word	0x08032808
 8012744:	42c80000 	.word	0x42c80000
 8012748:	08032810 	.word	0x08032810
 801274c:	08032820 	.word	0x08032820
 8012750:	08032828 	.word	0x08032828

08012754 <vResetWatchDog>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vResetWatchDog */
void vResetWatchDog(void *argument)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b082      	sub	sp, #8
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vResetWatchDog */
  /* Infinite loop */
  for(;;)
  {
	HAL_IWDG_Refresh(&hiwdg);
 801275c:	4803      	ldr	r0, [pc, #12]	; (801276c <vResetWatchDog+0x18>)
 801275e:	f003 fbd0 	bl	8015f02 <HAL_IWDG_Refresh>
    osDelay(delay0_5s);
 8012762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8012766:	f00d fde9 	bl	802033c <osDelay>
	HAL_IWDG_Refresh(&hiwdg);
 801276a:	e7f7      	b.n	801275c <vResetWatchDog+0x8>
 801276c:	2000031c 	.word	0x2000031c

08012770 <vSendBroadcast>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSendBroadcast */
void vSendBroadcast(void *argument)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b0ce      	sub	sp, #312	; 0x138
 8012774:	af02      	add	r7, sp, #8
 8012776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801277a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801277e:	6018      	str	r0, [r3, #0]
	int16_t					string_len;

   /* Infinite loop */
  for(;;)
  {
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8012780:	4b40      	ldr	r3, [pc, #256]	; (8012884 <vSendBroadcast+0x114>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8012788:	2200      	movs	r2, #0
 801278a:	4618      	mov	r0, r3
 801278c:	f00e feb2 	bl	80214f4 <xQueuePeek>
	if ((EthernetInfo.link != ETH_LINK_UP) || (assigned_ip() != true)){
 8012790:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8012794:	f083 0301 	eor.w	r3, r3, #1
 8012798:	b2db      	uxtb	r3, r3
 801279a:	2b00      	cmp	r3, #0
 801279c:	d104      	bne.n	80127a8 <vSendBroadcast+0x38>
 801279e:	f00d fb69 	bl	801fe74 <assigned_ip>
 80127a2:	4603      	mov	r3, r0
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d004      	beq.n	80127b2 <vSendBroadcast+0x42>
		osDelay(delay10s);
 80127a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80127ac:	f00d fdc6 	bl	802033c <osDelay>
		continue;
 80127b0:	e067      	b.n	8012882 <vSendBroadcast+0x112>
	}

	broadcastIP[0] = EthernetInfo.ip[0] | ( ~ EthernetInfo.sn[0]);
 80127b2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 80127b6:	b25a      	sxtb	r2, r3
 80127b8:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80127bc:	b25b      	sxtb	r3, r3
 80127be:	43db      	mvns	r3, r3
 80127c0:	b25b      	sxtb	r3, r3
 80127c2:	4313      	orrs	r3, r2
 80127c4:	b25b      	sxtb	r3, r3
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
	broadcastIP[1] = EthernetInfo.ip[1] | ( ~ EthernetInfo.sn[1]);
 80127cc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80127d0:	b25a      	sxtb	r2, r3
 80127d2:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80127d6:	b25b      	sxtb	r3, r3
 80127d8:	43db      	mvns	r3, r3
 80127da:	b25b      	sxtb	r3, r3
 80127dc:	4313      	orrs	r3, r2
 80127de:	b25b      	sxtb	r3, r3
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
	broadcastIP[2] = EthernetInfo.ip[2] | ( ~ EthernetInfo.sn[2]);
 80127e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80127ea:	b25a      	sxtb	r2, r3
 80127ec:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80127f0:	b25b      	sxtb	r3, r3
 80127f2:	43db      	mvns	r3, r3
 80127f4:	b25b      	sxtb	r3, r3
 80127f6:	4313      	orrs	r3, r2
 80127f8:	b25b      	sxtb	r3, r3
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
	broadcastIP[3] = EthernetInfo.ip[3] | ( ~ EthernetInfo.sn[3]);
 8012800:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8012804:	b25a      	sxtb	r2, r3
 8012806:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 801280a:	b25b      	sxtb	r3, r3
 801280c:	43db      	mvns	r3, r3
 801280e:	b25b      	sxtb	r3, r3
 8012810:	4313      	orrs	r3, r2
 8012812:	b25b      	sxtb	r3, r3
 8012814:	b2db      	uxtb	r3, r3
 8012816:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

	set_broadcast_message_eth_info(&EthernetInfo);
 801281a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 801281e:	4618      	mov	r0, r3
 8012820:	f000 fb04 	bl	8012e2c <set_broadcast_message_eth_info>
	string_len = get_broadcast_message_payload((char *)buffer, buffer_len);
 8012824:	f107 0308 	add.w	r3, r7, #8
 8012828:	f44f 7180 	mov.w	r1, #256	; 0x100
 801282c:	4618      	mov	r0, r3
 801282e:	f000 fb0d 	bl	8012e4c <get_broadcast_message_payload>
 8012832:	4603      	mov	r3, r0
 8012834:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
	if (string_len < 0) continue ;
 8012838:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 801283c:	2b00      	cmp	r3, #0
 801283e:	db1f      	blt.n	8012880 <vSendBroadcast+0x110>

	SocketMutexTake();
 8012840:	f7fe fc7a 	bl	8011138 <SocketMutexTake>
	ServiceSockMutexTake();
 8012844:	f7fe fc92 	bl	801116c <ServiceSockMutexTake>
	socket(SERVICE_SOCKET, Sn_MR_UDP, 5000, 0x00);
 8012848:	2300      	movs	r3, #0
 801284a:	f241 3288 	movw	r2, #5000	; 0x1388
 801284e:	2102      	movs	r1, #2
 8012850:	2004      	movs	r0, #4
 8012852:	f006 fb15 	bl	8018e80 <socket>
	sendto(SERVICE_SOCKET, (uint8_t *)buffer, string_len, (uint8_t *)broadcastIP, 5000);
 8012856:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 801285a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801285e:	f107 0108 	add.w	r1, r7, #8
 8012862:	f241 3088 	movw	r0, #5000	; 0x1388
 8012866:	9000      	str	r0, [sp, #0]
 8012868:	2004      	movs	r0, #4
 801286a:	f006 ffe7 	bl	801983c <sendto>

	ServiceSockMutexRelease();
 801286e:	f7fe fc8b 	bl	8011188 <ServiceSockMutexRelease>
	SocketMutexRelease();
 8012872:	f7fe fc6f 	bl	8011154 <SocketMutexRelease>
    osDelay(delay5s);
 8012876:	f241 3088 	movw	r0, #5000	; 0x1388
 801287a:	f00d fd5f 	bl	802033c <osDelay>
 801287e:	e77f      	b.n	8012780 <vSendBroadcast+0x10>
	if (string_len < 0) continue ;
 8012880:	bf00      	nop
	xQueuePeek(EthernetInfoQHandle,  &EthernetInfo, 0);
 8012882:	e77d      	b.n	8012780 <vSendBroadcast+0x10>
 8012884:	2000044c 	.word	0x2000044c

08012888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b082      	sub	sp, #8
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	4a04      	ldr	r2, [pc, #16]	; (80128a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012896:	4293      	cmp	r3, r2
 8012898:	d101      	bne.n	801289e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 801289a:	f002 ffa3 	bl	80157e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801289e:	bf00      	nop
 80128a0:	3708      	adds	r7, #8
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	40010000 	.word	0x40010000

080128ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80128ac:	b480      	push	{r7}
 80128ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80128b0:	b672      	cpsid	i
}
 80128b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80128b4:	e7fe      	b.n	80128b4 <Error_Handler+0x8>
	...

080128b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b082      	sub	sp, #8
 80128bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80128be:	2300      	movs	r3, #0
 80128c0:	607b      	str	r3, [r7, #4]
 80128c2:	4b12      	ldr	r3, [pc, #72]	; (801290c <HAL_MspInit+0x54>)
 80128c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c6:	4a11      	ldr	r2, [pc, #68]	; (801290c <HAL_MspInit+0x54>)
 80128c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80128cc:	6453      	str	r3, [r2, #68]	; 0x44
 80128ce:	4b0f      	ldr	r3, [pc, #60]	; (801290c <HAL_MspInit+0x54>)
 80128d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80128d6:	607b      	str	r3, [r7, #4]
 80128d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80128da:	2300      	movs	r3, #0
 80128dc:	603b      	str	r3, [r7, #0]
 80128de:	4b0b      	ldr	r3, [pc, #44]	; (801290c <HAL_MspInit+0x54>)
 80128e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e2:	4a0a      	ldr	r2, [pc, #40]	; (801290c <HAL_MspInit+0x54>)
 80128e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128e8:	6413      	str	r3, [r2, #64]	; 0x40
 80128ea:	4b08      	ldr	r3, [pc, #32]	; (801290c <HAL_MspInit+0x54>)
 80128ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80128f2:	603b      	str	r3, [r7, #0]
 80128f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80128f6:	2200      	movs	r2, #0
 80128f8:	210f      	movs	r1, #15
 80128fa:	f06f 0001 	mvn.w	r0, #1
 80128fe:	f003 f849 	bl	8015994 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012902:	bf00      	nop
 8012904:	3708      	adds	r7, #8
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	40023800 	.word	0x40023800

08012910 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8012910:	b480      	push	{r7}
 8012912:	b085      	sub	sp, #20
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4a0b      	ldr	r2, [pc, #44]	; (801294c <HAL_CRC_MspInit+0x3c>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d10d      	bne.n	801293e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8012922:	2300      	movs	r3, #0
 8012924:	60fb      	str	r3, [r7, #12]
 8012926:	4b0a      	ldr	r3, [pc, #40]	; (8012950 <HAL_CRC_MspInit+0x40>)
 8012928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801292a:	4a09      	ldr	r2, [pc, #36]	; (8012950 <HAL_CRC_MspInit+0x40>)
 801292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012930:	6313      	str	r3, [r2, #48]	; 0x30
 8012932:	4b07      	ldr	r3, [pc, #28]	; (8012950 <HAL_CRC_MspInit+0x40>)
 8012934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801293a:	60fb      	str	r3, [r7, #12]
 801293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801293e:	bf00      	nop
 8012940:	3714      	adds	r7, #20
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr
 801294a:	bf00      	nop
 801294c:	40023000 	.word	0x40023000
 8012950:	40023800 	.word	0x40023800

08012954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b08c      	sub	sp, #48	; 0x30
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801295c:	f107 031c 	add.w	r3, r7, #28
 8012960:	2200      	movs	r2, #0
 8012962:	601a      	str	r2, [r3, #0]
 8012964:	605a      	str	r2, [r3, #4]
 8012966:	609a      	str	r2, [r3, #8]
 8012968:	60da      	str	r2, [r3, #12]
 801296a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a32      	ldr	r2, [pc, #200]	; (8012a3c <HAL_SPI_MspInit+0xe8>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d12c      	bne.n	80129d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8012976:	2300      	movs	r3, #0
 8012978:	61bb      	str	r3, [r7, #24]
 801297a:	4b31      	ldr	r3, [pc, #196]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 801297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801297e:	4a30      	ldr	r2, [pc, #192]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012984:	6453      	str	r3, [r2, #68]	; 0x44
 8012986:	4b2e      	ldr	r3, [pc, #184]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801298a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801298e:	61bb      	str	r3, [r7, #24]
 8012990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012992:	2300      	movs	r3, #0
 8012994:	617b      	str	r3, [r7, #20]
 8012996:	4b2a      	ldr	r3, [pc, #168]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801299a:	4a29      	ldr	r2, [pc, #164]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 801299c:	f043 0301 	orr.w	r3, r3, #1
 80129a0:	6313      	str	r3, [r2, #48]	; 0x30
 80129a2:	4b27      	ldr	r3, [pc, #156]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129a6:	f003 0301 	and.w	r3, r3, #1
 80129aa:	617b      	str	r3, [r7, #20]
 80129ac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80129ae:	23e0      	movs	r3, #224	; 0xe0
 80129b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80129b2:	2302      	movs	r3, #2
 80129b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80129b6:	2300      	movs	r3, #0
 80129b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80129ba:	2303      	movs	r3, #3
 80129bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80129be:	2305      	movs	r3, #5
 80129c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129c2:	f107 031c 	add.w	r3, r7, #28
 80129c6:	4619      	mov	r1, r3
 80129c8:	481e      	ldr	r0, [pc, #120]	; (8012a44 <HAL_SPI_MspInit+0xf0>)
 80129ca:	f003 f8bb 	bl	8015b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80129ce:	e030      	b.n	8012a32 <HAL_SPI_MspInit+0xde>
  else if(hspi->Instance==SPI3)
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	4a1c      	ldr	r2, [pc, #112]	; (8012a48 <HAL_SPI_MspInit+0xf4>)
 80129d6:	4293      	cmp	r3, r2
 80129d8:	d12b      	bne.n	8012a32 <HAL_SPI_MspInit+0xde>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80129da:	2300      	movs	r3, #0
 80129dc:	613b      	str	r3, [r7, #16]
 80129de:	4b18      	ldr	r3, [pc, #96]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129e2:	4a17      	ldr	r2, [pc, #92]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80129e8:	6413      	str	r3, [r2, #64]	; 0x40
 80129ea:	4b15      	ldr	r3, [pc, #84]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80129f2:	613b      	str	r3, [r7, #16]
 80129f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80129f6:	2300      	movs	r3, #0
 80129f8:	60fb      	str	r3, [r7, #12]
 80129fa:	4b11      	ldr	r3, [pc, #68]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 80129fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80129fe:	4a10      	ldr	r2, [pc, #64]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012a00:	f043 0302 	orr.w	r3, r3, #2
 8012a04:	6313      	str	r3, [r2, #48]	; 0x30
 8012a06:	4b0e      	ldr	r3, [pc, #56]	; (8012a40 <HAL_SPI_MspInit+0xec>)
 8012a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a0a:	f003 0302 	and.w	r3, r3, #2
 8012a0e:	60fb      	str	r3, [r7, #12]
 8012a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8012a12:	2338      	movs	r3, #56	; 0x38
 8012a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a16:	2302      	movs	r3, #2
 8012a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012a1e:	2303      	movs	r3, #3
 8012a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8012a22:	2306      	movs	r3, #6
 8012a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a26:	f107 031c 	add.w	r3, r7, #28
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	4807      	ldr	r0, [pc, #28]	; (8012a4c <HAL_SPI_MspInit+0xf8>)
 8012a2e:	f003 f889 	bl	8015b44 <HAL_GPIO_Init>
}
 8012a32:	bf00      	nop
 8012a34:	3730      	adds	r7, #48	; 0x30
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	40013000 	.word	0x40013000
 8012a40:	40023800 	.word	0x40023800
 8012a44:	40020000 	.word	0x40020000
 8012a48:	40003c00 	.word	0x40003c00
 8012a4c:	40020400 	.word	0x40020400

08012a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012a50:	b580      	push	{r7, lr}
 8012a52:	b08a      	sub	sp, #40	; 0x28
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012a58:	f107 0314 	add.w	r3, r7, #20
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	601a      	str	r2, [r3, #0]
 8012a60:	605a      	str	r2, [r3, #4]
 8012a62:	609a      	str	r2, [r3, #8]
 8012a64:	60da      	str	r2, [r3, #12]
 8012a66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	4a1d      	ldr	r2, [pc, #116]	; (8012ae4 <HAL_UART_MspInit+0x94>)
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d133      	bne.n	8012ada <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8012a72:	2300      	movs	r3, #0
 8012a74:	613b      	str	r3, [r7, #16]
 8012a76:	4b1c      	ldr	r3, [pc, #112]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a7a:	4a1b      	ldr	r2, [pc, #108]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012a80:	6413      	str	r3, [r2, #64]	; 0x40
 8012a82:	4b19      	ldr	r3, [pc, #100]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a8a:	613b      	str	r3, [r7, #16]
 8012a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a8e:	2300      	movs	r3, #0
 8012a90:	60fb      	str	r3, [r7, #12]
 8012a92:	4b15      	ldr	r3, [pc, #84]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a96:	4a14      	ldr	r2, [pc, #80]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012a98:	f043 0301 	orr.w	r3, r3, #1
 8012a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8012a9e:	4b12      	ldr	r3, [pc, #72]	; (8012ae8 <HAL_UART_MspInit+0x98>)
 8012aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012aa2:	f003 0301 	and.w	r3, r3, #1
 8012aa6:	60fb      	str	r3, [r7, #12]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012aaa:	230c      	movs	r3, #12
 8012aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012aae:	2302      	movs	r3, #2
 8012ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012aba:	2307      	movs	r3, #7
 8012abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012abe:	f107 0314 	add.w	r3, r7, #20
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	4809      	ldr	r0, [pc, #36]	; (8012aec <HAL_UART_MspInit+0x9c>)
 8012ac6:	f003 f83d 	bl	8015b44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8012aca:	2200      	movs	r2, #0
 8012acc:	2105      	movs	r1, #5
 8012ace:	2026      	movs	r0, #38	; 0x26
 8012ad0:	f002 ff60 	bl	8015994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012ad4:	2026      	movs	r0, #38	; 0x26
 8012ad6:	f002 ff79 	bl	80159cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8012ada:	bf00      	nop
 8012adc:	3728      	adds	r7, #40	; 0x28
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
 8012ae2:	bf00      	nop
 8012ae4:	40004400 	.word	0x40004400
 8012ae8:	40023800 	.word	0x40023800
 8012aec:	40020000 	.word	0x40020000

08012af0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b08c      	sub	sp, #48	; 0x30
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8012af8:	2300      	movs	r3, #0
 8012afa:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8012afc:	2300      	movs	r3, #0
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012b00:	2300      	movs	r3, #0
 8012b02:	60bb      	str	r3, [r7, #8]
 8012b04:	4b2e      	ldr	r3, [pc, #184]	; (8012bc0 <HAL_InitTick+0xd0>)
 8012b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b08:	4a2d      	ldr	r2, [pc, #180]	; (8012bc0 <HAL_InitTick+0xd0>)
 8012b0a:	f043 0301 	orr.w	r3, r3, #1
 8012b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8012b10:	4b2b      	ldr	r3, [pc, #172]	; (8012bc0 <HAL_InitTick+0xd0>)
 8012b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b14:	f003 0301 	and.w	r3, r3, #1
 8012b18:	60bb      	str	r3, [r7, #8]
 8012b1a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012b1c:	f107 020c 	add.w	r2, r7, #12
 8012b20:	f107 0310 	add.w	r3, r7, #16
 8012b24:	4611      	mov	r1, r2
 8012b26:	4618      	mov	r0, r3
 8012b28:	f003 fe94 	bl	8016854 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012b2c:	f003 fe7e 	bl	801682c <HAL_RCC_GetPCLK2Freq>
 8012b30:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8012b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b34:	4a23      	ldr	r2, [pc, #140]	; (8012bc4 <HAL_InitTick+0xd4>)
 8012b36:	fba2 2303 	umull	r2, r3, r2, r3
 8012b3a:	0c9b      	lsrs	r3, r3, #18
 8012b3c:	3b01      	subs	r3, #1
 8012b3e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8012b40:	4b21      	ldr	r3, [pc, #132]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b42:	4a22      	ldr	r2, [pc, #136]	; (8012bcc <HAL_InitTick+0xdc>)
 8012b44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012b46:	4b20      	ldr	r3, [pc, #128]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8012b4e:	4a1e      	ldr	r2, [pc, #120]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012b54:	4b1c      	ldr	r3, [pc, #112]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b56:	2200      	movs	r2, #0
 8012b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012b5a:	4b1b      	ldr	r3, [pc, #108]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b5c:	2200      	movs	r2, #0
 8012b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8012b60:	4b19      	ldr	r3, [pc, #100]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b62:	2200      	movs	r2, #0
 8012b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8012b66:	4818      	ldr	r0, [pc, #96]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b68:	f004 fc7c 	bl	8017464 <HAL_TIM_Base_Init>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8012b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d11b      	bne.n	8012bb2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8012b7a:	4813      	ldr	r0, [pc, #76]	; (8012bc8 <HAL_InitTick+0xd8>)
 8012b7c:	f004 fccc 	bl	8017518 <HAL_TIM_Base_Start_IT>
 8012b80:	4603      	mov	r3, r0
 8012b82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8012b86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d111      	bne.n	8012bb2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8012b8e:	2019      	movs	r0, #25
 8012b90:	f002 ff1c 	bl	80159cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2b0f      	cmp	r3, #15
 8012b98:	d808      	bhi.n	8012bac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	2019      	movs	r0, #25
 8012ba0:	f002 fef8 	bl	8015994 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8012ba4:	4a0a      	ldr	r2, [pc, #40]	; (8012bd0 <HAL_InitTick+0xe0>)
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	6013      	str	r3, [r2, #0]
 8012baa:	e002      	b.n	8012bb2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8012bac:	2301      	movs	r3, #1
 8012bae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8012bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3730      	adds	r7, #48	; 0x30
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	40023800 	.word	0x40023800
 8012bc4:	431bde83 	.word	0x431bde83
 8012bc8:	2000049c 	.word	0x2000049c
 8012bcc:	40010000 	.word	0x40010000
 8012bd0:	200000bc 	.word	0x200000bc

08012bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012bd8:	e7fe      	b.n	8012bd8 <NMI_Handler+0x4>

08012bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012bda:	b480      	push	{r7}
 8012bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012bde:	e7fe      	b.n	8012bde <HardFault_Handler+0x4>

08012be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012be0:	b480      	push	{r7}
 8012be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012be4:	e7fe      	b.n	8012be4 <MemManage_Handler+0x4>

08012be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012be6:	b480      	push	{r7}
 8012be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012bea:	e7fe      	b.n	8012bea <BusFault_Handler+0x4>

08012bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012bec:	b480      	push	{r7}
 8012bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012bf0:	e7fe      	b.n	8012bf0 <UsageFault_Handler+0x4>

08012bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012bf2:	b480      	push	{r7}
 8012bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012bf6:	bf00      	nop
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr

08012c00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8012c04:	4802      	ldr	r0, [pc, #8]	; (8012c10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8012c06:	f004 fce9 	bl	80175dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8012c0a:	bf00      	nop
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	2000049c 	.word	0x2000049c

08012c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8012c18:	4802      	ldr	r0, [pc, #8]	; (8012c24 <USART2_IRQHandler+0x10>)
 8012c1a:	f004 ff45 	bl	8017aa8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8012c1e:	bf00      	nop
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	200003d8 	.word	0x200003d8

08012c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	af00      	add	r7, sp, #0
  return 1;
 8012c2c:	2301      	movs	r3, #1
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <_kill>:

int _kill(int pid, int sig)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8012c42:	f01b f8d3 	bl	802ddec <__errno>
 8012c46:	4603      	mov	r3, r0
 8012c48:	2216      	movs	r2, #22
 8012c4a:	601a      	str	r2, [r3, #0]
  return -1;
 8012c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3708      	adds	r7, #8
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <_exit>:

void _exit (int status)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b082      	sub	sp, #8
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8012c60:	f04f 31ff 	mov.w	r1, #4294967295
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7ff ffe7 	bl	8012c38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012c6a:	e7fe      	b.n	8012c6a <_exit+0x12>

08012c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b086      	sub	sp, #24
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	60f8      	str	r0, [r7, #12]
 8012c74:	60b9      	str	r1, [r7, #8]
 8012c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c78:	2300      	movs	r3, #0
 8012c7a:	617b      	str	r3, [r7, #20]
 8012c7c:	e00a      	b.n	8012c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8012c7e:	f3af 8000 	nop.w
 8012c82:	4601      	mov	r1, r0
 8012c84:	68bb      	ldr	r3, [r7, #8]
 8012c86:	1c5a      	adds	r2, r3, #1
 8012c88:	60ba      	str	r2, [r7, #8]
 8012c8a:	b2ca      	uxtb	r2, r1
 8012c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	3301      	adds	r3, #1
 8012c92:	617b      	str	r3, [r7, #20]
 8012c94:	697a      	ldr	r2, [r7, #20]
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	dbf0      	blt.n	8012c7e <_read+0x12>
  }

  return len;
 8012c9c:	687b      	ldr	r3, [r7, #4]
}
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3718      	adds	r7, #24
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}

08012ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8012ca6:	b580      	push	{r7, lr}
 8012ca8:	b086      	sub	sp, #24
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	60f8      	str	r0, [r7, #12]
 8012cae:	60b9      	str	r1, [r7, #8]
 8012cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	617b      	str	r3, [r7, #20]
 8012cb6:	e009      	b.n	8012ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8012cb8:	68bb      	ldr	r3, [r7, #8]
 8012cba:	1c5a      	adds	r2, r3, #1
 8012cbc:	60ba      	str	r2, [r7, #8]
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	3301      	adds	r3, #1
 8012cca:	617b      	str	r3, [r7, #20]
 8012ccc:	697a      	ldr	r2, [r7, #20]
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	dbf1      	blt.n	8012cb8 <_write+0x12>
  }
  return len;
 8012cd4:	687b      	ldr	r3, [r7, #4]
}
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3718      	adds	r7, #24
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <_close>:

int _close(int file)
{
 8012cde:	b480      	push	{r7}
 8012ce0:	b083      	sub	sp, #12
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012cea:	4618      	mov	r0, r3
 8012cec:	370c      	adds	r7, #12
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf4:	4770      	bx	lr

08012cf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012cf6:	b480      	push	{r7}
 8012cf8:	b083      	sub	sp, #12
 8012cfa:	af00      	add	r7, sp, #0
 8012cfc:	6078      	str	r0, [r7, #4]
 8012cfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012d00:	683b      	ldr	r3, [r7, #0]
 8012d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8012d06:	605a      	str	r2, [r3, #4]
  return 0;
 8012d08:	2300      	movs	r3, #0
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	370c      	adds	r7, #12
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d14:	4770      	bx	lr

08012d16 <_isatty>:

int _isatty(int file)
{
 8012d16:	b480      	push	{r7}
 8012d18:	b083      	sub	sp, #12
 8012d1a:	af00      	add	r7, sp, #0
 8012d1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012d1e:	2301      	movs	r3, #1
}
 8012d20:	4618      	mov	r0, r3
 8012d22:	370c      	adds	r7, #12
 8012d24:	46bd      	mov	sp, r7
 8012d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2a:	4770      	bx	lr

08012d2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b085      	sub	sp, #20
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8012d38:	2300      	movs	r3, #0
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3714      	adds	r7, #20
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr
	...

08012d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b086      	sub	sp, #24
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012d50:	4a14      	ldr	r2, [pc, #80]	; (8012da4 <_sbrk+0x5c>)
 8012d52:	4b15      	ldr	r3, [pc, #84]	; (8012da8 <_sbrk+0x60>)
 8012d54:	1ad3      	subs	r3, r2, r3
 8012d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012d58:	697b      	ldr	r3, [r7, #20]
 8012d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8012d5c:	4b13      	ldr	r3, [pc, #76]	; (8012dac <_sbrk+0x64>)
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d102      	bne.n	8012d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012d64:	4b11      	ldr	r3, [pc, #68]	; (8012dac <_sbrk+0x64>)
 8012d66:	4a12      	ldr	r2, [pc, #72]	; (8012db0 <_sbrk+0x68>)
 8012d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8012d6a:	4b10      	ldr	r3, [pc, #64]	; (8012dac <_sbrk+0x64>)
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4413      	add	r3, r2
 8012d72:	693a      	ldr	r2, [r7, #16]
 8012d74:	429a      	cmp	r2, r3
 8012d76:	d207      	bcs.n	8012d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012d78:	f01b f838 	bl	802ddec <__errno>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	220c      	movs	r2, #12
 8012d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8012d82:	f04f 33ff 	mov.w	r3, #4294967295
 8012d86:	e009      	b.n	8012d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8012d88:	4b08      	ldr	r3, [pc, #32]	; (8012dac <_sbrk+0x64>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8012d8e:	4b07      	ldr	r3, [pc, #28]	; (8012dac <_sbrk+0x64>)
 8012d90:	681a      	ldr	r2, [r3, #0]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4413      	add	r3, r2
 8012d96:	4a05      	ldr	r2, [pc, #20]	; (8012dac <_sbrk+0x64>)
 8012d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	3718      	adds	r7, #24
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}
 8012da4:	20010000 	.word	0x20010000
 8012da8:	00000400 	.word	0x00000400
 8012dac:	200004e4 	.word	0x200004e4
 8012db0:	2000db18 	.word	0x2000db18

08012db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8012db4:	b480      	push	{r7}
 8012db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8012db8:	4b06      	ldr	r3, [pc, #24]	; (8012dd4 <SystemInit+0x20>)
 8012dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012dbe:	4a05      	ldr	r2, [pc, #20]	; (8012dd4 <SystemInit+0x20>)
 8012dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012dc8:	bf00      	nop
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr
 8012dd2:	bf00      	nop
 8012dd4:	e000ed00 	.word	0xe000ed00

08012dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012dd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012e10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8012ddc:	f7ff ffea 	bl	8012db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8012de0:	480c      	ldr	r0, [pc, #48]	; (8012e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8012de2:	490d      	ldr	r1, [pc, #52]	; (8012e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8012de4:	4a0d      	ldr	r2, [pc, #52]	; (8012e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8012de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8012de8:	e002      	b.n	8012df0 <LoopCopyDataInit>

08012dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8012dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8012dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8012dee:	3304      	adds	r3, #4

08012df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8012df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8012df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8012df4:	d3f9      	bcc.n	8012dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8012df6:	4a0a      	ldr	r2, [pc, #40]	; (8012e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8012df8:	4c0a      	ldr	r4, [pc, #40]	; (8012e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8012dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8012dfc:	e001      	b.n	8012e02 <LoopFillZerobss>

08012dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8012dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8012e00:	3204      	adds	r2, #4

08012e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8012e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8012e04:	d3fb      	bcc.n	8012dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8012e06:	f01a fff7 	bl	802ddf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012e0a:	f7fe f9e1 	bl	80111d0 <main>
  bx  lr    
 8012e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012e10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8012e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8012e18:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8012e1c:	080351a8 	.word	0x080351a8
  ldr r2, =_sbss
 8012e20:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8012e24:	2000db14 	.word	0x2000db14

08012e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012e28:	e7fe      	b.n	8012e28 <ADC_IRQHandler>
	...

08012e2c <set_broadcast_message_eth_info>:

#define mess_template	"{\"device_name\": \"%s\", \"model_name\": \"%s\", \"mac\": \"%02X:%02X:%02X:%02X:%02X:%02X\", \"ip\": \"%u.%u.%u.%u\", \"netmask\": \"%u.%u.%u.%u\", \"gw\": \"%u.%u.%u.%u\", \"dns\": \"%u.%u.%u.%u\", \"firmware\": \"%s\"}"

Ethernet_info_struct	eth_info;

void set_broadcast_message_eth_info(Ethernet_info_struct * eth){
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]

	memcpy(&eth_info, eth, sizeof(Ethernet_info_struct));
 8012e34:	2220      	movs	r2, #32
 8012e36:	6879      	ldr	r1, [r7, #4]
 8012e38:	4803      	ldr	r0, [pc, #12]	; (8012e48 <set_broadcast_message_eth_info+0x1c>)
 8012e3a:	f01b f80c 	bl	802de56 <memcpy>

}
 8012e3e:	bf00      	nop
 8012e40:	3708      	adds	r7, #8
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	200004e8 	.word	0x200004e8

08012e4c <get_broadcast_message_payload>:

int16_t get_broadcast_message_payload(char * buffer, uint16_t buff_len){
 8012e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e4e:	b0ad      	sub	sp, #180	; 0xb4
 8012e50:	af18      	add	r7, sp, #96	; 0x60
 8012e52:	6478      	str	r0, [r7, #68]	; 0x44
 8012e54:	460b      	mov	r3, r1
 8012e56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	uint16_t len;

	strcpy(buffer, "\0"); //TODO replace sprintf to snprintf
 8012e5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	701a      	strb	r2, [r3, #0]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e60:	4b3c      	ldr	r3, [pc, #240]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e62:	78db      	ldrb	r3, [r3, #3]
 8012e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e66:	4b3b      	ldr	r3, [pc, #236]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e68:	791b      	ldrb	r3, [r3, #4]
 8012e6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012e6c:	4b39      	ldr	r3, [pc, #228]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e6e:	795b      	ldrb	r3, [r3, #5]
 8012e70:	637b      	str	r3, [r7, #52]	; 0x34
 8012e72:	4b38      	ldr	r3, [pc, #224]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e74:	799b      	ldrb	r3, [r3, #6]
 8012e76:	633b      	str	r3, [r7, #48]	; 0x30
 8012e78:	4b36      	ldr	r3, [pc, #216]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e7a:	79db      	ldrb	r3, [r3, #7]
 8012e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e7e:	4b35      	ldr	r3, [pc, #212]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e80:	7a1b      	ldrb	r3, [r3, #8]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e82:	62bb      	str	r3, [r7, #40]	; 0x28
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e84:	4b33      	ldr	r3, [pc, #204]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e86:	7a5b      	ldrb	r3, [r3, #9]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e8a:	4b32      	ldr	r3, [pc, #200]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e8c:	7a9b      	ldrb	r3, [r3, #10]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e8e:	623b      	str	r3, [r7, #32]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e90:	4b30      	ldr	r3, [pc, #192]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e92:	7adb      	ldrb	r3, [r3, #11]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e94:	61fb      	str	r3, [r7, #28]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e96:	4b2f      	ldr	r3, [pc, #188]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e98:	7b1b      	ldrb	r3, [r3, #12]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012e9a:	61bb      	str	r3, [r7, #24]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012e9c:	4b2d      	ldr	r3, [pc, #180]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012e9e:	7b5b      	ldrb	r3, [r3, #13]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ea0:	617b      	str	r3, [r7, #20]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012ea2:	4b2c      	ldr	r3, [pc, #176]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ea4:	7b9b      	ldrb	r3, [r3, #14]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ea6:	613b      	str	r3, [r7, #16]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012ea8:	4b2a      	ldr	r3, [pc, #168]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eaa:	7bdb      	ldrb	r3, [r3, #15]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eac:	60fb      	str	r3, [r7, #12]
			eth_info.mac[5], eth_info.ip[0], eth_info.ip[1], eth_info.ip[2], eth_info.ip[3], eth_info.sn[0], eth_info.sn[1], eth_info.sn[2], eth_info.sn[3], \
 8012eae:	4b29      	ldr	r3, [pc, #164]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eb0:	7c1b      	ldrb	r3, [r3, #16]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eb2:	60bb      	str	r3, [r7, #8]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012eb4:	4b27      	ldr	r3, [pc, #156]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eb6:	7c5b      	ldrb	r3, [r3, #17]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eb8:	607b      	str	r3, [r7, #4]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012eba:	4b26      	ldr	r3, [pc, #152]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ebc:	7c9b      	ldrb	r3, [r3, #18]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ebe:	603b      	str	r3, [r7, #0]
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ec0:	4b24      	ldr	r3, [pc, #144]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ec2:	7cdb      	ldrb	r3, [r3, #19]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ec4:	461e      	mov	r6, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ec6:	4b23      	ldr	r3, [pc, #140]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ec8:	7d1b      	ldrb	r3, [r3, #20]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012eca:	461d      	mov	r5, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ecc:	4b21      	ldr	r3, [pc, #132]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ece:	7d5b      	ldrb	r3, [r3, #21]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ed0:	461c      	mov	r4, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ed2:	4b20      	ldr	r3, [pc, #128]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ed4:	7d9b      	ldrb	r3, [r3, #22]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ed6:	4618      	mov	r0, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ed8:	4b1e      	ldr	r3, [pc, #120]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012eda:	7ddb      	ldrb	r3, [r3, #23]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012edc:	4619      	mov	r1, r3
			eth_info.gw[0], eth_info.gw[1], eth_info.gw[2], eth_info.gw[3], eth_info.dns[0], eth_info.dns[1], eth_info.dns[2], eth_info.dns[3], dev_sw_ver);
 8012ede:	4b1d      	ldr	r3, [pc, #116]	; (8012f54 <get_broadcast_message_payload+0x108>)
 8012ee0:	7e1b      	ldrb	r3, [r3, #24]
	len = sprintf(buffer, mess_template, dev_system, dev_model_name, eth_info.mac[0], eth_info.mac[1], eth_info.mac[2], eth_info.mac[3], eth_info.mac[4], \
 8012ee2:	461a      	mov	r2, r3
 8012ee4:	4b1c      	ldr	r3, [pc, #112]	; (8012f58 <get_broadcast_message_payload+0x10c>)
 8012ee6:	9316      	str	r3, [sp, #88]	; 0x58
 8012ee8:	9215      	str	r2, [sp, #84]	; 0x54
 8012eea:	9114      	str	r1, [sp, #80]	; 0x50
 8012eec:	9013      	str	r0, [sp, #76]	; 0x4c
 8012eee:	9412      	str	r4, [sp, #72]	; 0x48
 8012ef0:	9511      	str	r5, [sp, #68]	; 0x44
 8012ef2:	9610      	str	r6, [sp, #64]	; 0x40
 8012ef4:	683a      	ldr	r2, [r7, #0]
 8012ef6:	920f      	str	r2, [sp, #60]	; 0x3c
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	920e      	str	r2, [sp, #56]	; 0x38
 8012efc:	68ba      	ldr	r2, [r7, #8]
 8012efe:	920d      	str	r2, [sp, #52]	; 0x34
 8012f00:	68fa      	ldr	r2, [r7, #12]
 8012f02:	920c      	str	r2, [sp, #48]	; 0x30
 8012f04:	693a      	ldr	r2, [r7, #16]
 8012f06:	920b      	str	r2, [sp, #44]	; 0x2c
 8012f08:	697a      	ldr	r2, [r7, #20]
 8012f0a:	920a      	str	r2, [sp, #40]	; 0x28
 8012f0c:	69ba      	ldr	r2, [r7, #24]
 8012f0e:	9209      	str	r2, [sp, #36]	; 0x24
 8012f10:	69fa      	ldr	r2, [r7, #28]
 8012f12:	9208      	str	r2, [sp, #32]
 8012f14:	6a3a      	ldr	r2, [r7, #32]
 8012f16:	9207      	str	r2, [sp, #28]
 8012f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f1a:	9206      	str	r2, [sp, #24]
 8012f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f1e:	9205      	str	r2, [sp, #20]
 8012f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f22:	9204      	str	r2, [sp, #16]
 8012f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f26:	9203      	str	r2, [sp, #12]
 8012f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f2a:	9202      	str	r2, [sp, #8]
 8012f2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f2e:	9201      	str	r2, [sp, #4]
 8012f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f32:	9300      	str	r3, [sp, #0]
 8012f34:	4b09      	ldr	r3, [pc, #36]	; (8012f5c <get_broadcast_message_payload+0x110>)
 8012f36:	4a0a      	ldr	r2, [pc, #40]	; (8012f60 <get_broadcast_message_payload+0x114>)
 8012f38:	490a      	ldr	r1, [pc, #40]	; (8012f64 <get_broadcast_message_payload+0x118>)
 8012f3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012f3c:	f01a fc66 	bl	802d80c <siprintf>
 8012f40:	4603      	mov	r3, r0
 8012f42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	return len;
 8012f46:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3754      	adds	r7, #84	; 0x54
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f52:	bf00      	nop
 8012f54:	200004e8 	.word	0x200004e8
 8012f58:	08032910 	.word	0x08032910
 8012f5c:	08032838 	.word	0x08032838
 8012f60:	08032848 	.word	0x08032848
 8012f64:	08032850 	.word	0x08032850

08012f68 <CharToDec>:
float float_temp;

int			part = 0;
uint32_t	part_offset = 0;

int CharToDec(char c){
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	71fb      	strb	r3, [r7, #7]
    if(c>='0' && c<='9') return c-'0';
 8012f72:	79fb      	ldrb	r3, [r7, #7]
 8012f74:	2b2f      	cmp	r3, #47	; 0x2f
 8012f76:	d905      	bls.n	8012f84 <CharToDec+0x1c>
 8012f78:	79fb      	ldrb	r3, [r7, #7]
 8012f7a:	2b39      	cmp	r3, #57	; 0x39
 8012f7c:	d802      	bhi.n	8012f84 <CharToDec+0x1c>
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	3b30      	subs	r3, #48	; 0x30
 8012f82:	e012      	b.n	8012faa <CharToDec+0x42>
    if(c>='a' && c<='f') return c-'a'+10;
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	2b60      	cmp	r3, #96	; 0x60
 8012f88:	d905      	bls.n	8012f96 <CharToDec+0x2e>
 8012f8a:	79fb      	ldrb	r3, [r7, #7]
 8012f8c:	2b66      	cmp	r3, #102	; 0x66
 8012f8e:	d802      	bhi.n	8012f96 <CharToDec+0x2e>
 8012f90:	79fb      	ldrb	r3, [r7, #7]
 8012f92:	3b57      	subs	r3, #87	; 0x57
 8012f94:	e009      	b.n	8012faa <CharToDec+0x42>
    if(c>='A' && c<='F') return c-'A'+10;
 8012f96:	79fb      	ldrb	r3, [r7, #7]
 8012f98:	2b40      	cmp	r3, #64	; 0x40
 8012f9a:	d905      	bls.n	8012fa8 <CharToDec+0x40>
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	2b46      	cmp	r3, #70	; 0x46
 8012fa0:	d802      	bhi.n	8012fa8 <CharToDec+0x40>
 8012fa2:	79fb      	ldrb	r3, [r7, #7]
 8012fa4:	3b37      	subs	r3, #55	; 0x37
 8012fa6:	e000      	b.n	8012faa <CharToDec+0x42>
    return 0;
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	370c      	adds	r7, #12
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr
	...

08012fb8 <http_parse_params_init>:

void http_parse_params_init (xQueueHandle xQueue, uint8_t parameters_type){
 8012fb8:	b480      	push	{r7}
 8012fba:	b083      	sub	sp, #12
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70fb      	strb	r3, [r7, #3]

	if (parameters_type == MQTT){
 8012fc4:	78fb      	ldrb	r3, [r7, #3]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d106      	bne.n	8012fd8 <http_parse_params_init+0x20>
		if (xQueue){
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d034      	beq.n	801303a <http_parse_params_init+0x82>
			MQTT_Q = xQueue;
 8012fd0:	4a1d      	ldr	r2, [pc, #116]	; (8013048 <http_parse_params_init+0x90>)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	6013      	str	r3, [r2, #0]
	}else if (parameters_type == Uptime){
		if (xQueue){
			Uptime_Q = xQueue;
		}
	}
}
 8012fd6:	e030      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == HA){
 8012fd8:	78fb      	ldrb	r3, [r7, #3]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d106      	bne.n	8012fec <http_parse_params_init+0x34>
		if (xQueue){
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d02a      	beq.n	801303a <http_parse_params_init+0x82>
			HomeAsistant_Q = xQueue;
 8012fe4:	4a19      	ldr	r2, [pc, #100]	; (801304c <http_parse_params_init+0x94>)
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	6013      	str	r3, [r2, #0]
}
 8012fea:	e026      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == ModBusTCP){
 8012fec:	78fb      	ldrb	r3, [r7, #3]
 8012fee:	2b02      	cmp	r3, #2
 8012ff0:	d106      	bne.n	8013000 <http_parse_params_init+0x48>
		if (xQueue){
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d020      	beq.n	801303a <http_parse_params_init+0x82>
			ModbusTCP_Q = xQueue;
 8012ff8:	4a15      	ldr	r2, [pc, #84]	; (8013050 <http_parse_params_init+0x98>)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6013      	str	r3, [r2, #0]
}
 8012ffe:	e01c      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == PowrData){
 8013000:	78fb      	ldrb	r3, [r7, #3]
 8013002:	2b03      	cmp	r3, #3
 8013004:	d106      	bne.n	8013014 <http_parse_params_init+0x5c>
		if (xQueue){
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d016      	beq.n	801303a <http_parse_params_init+0x82>
			Power_Data_Q = xQueue;
 801300c:	4a11      	ldr	r2, [pc, #68]	; (8013054 <http_parse_params_init+0x9c>)
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6013      	str	r3, [r2, #0]
}
 8013012:	e012      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == PowrSensSett){
 8013014:	78fb      	ldrb	r3, [r7, #3]
 8013016:	2b04      	cmp	r3, #4
 8013018:	d106      	bne.n	8013028 <http_parse_params_init+0x70>
		if (xQueue){
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d00c      	beq.n	801303a <http_parse_params_init+0x82>
			PowerSensSettings_Q = xQueue;
 8013020:	4a0d      	ldr	r2, [pc, #52]	; (8013058 <http_parse_params_init+0xa0>)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	6013      	str	r3, [r2, #0]
}
 8013026:	e008      	b.n	801303a <http_parse_params_init+0x82>
	}else if (parameters_type == Uptime){
 8013028:	78fb      	ldrb	r3, [r7, #3]
 801302a:	2b05      	cmp	r3, #5
 801302c:	d105      	bne.n	801303a <http_parse_params_init+0x82>
		if (xQueue){
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d002      	beq.n	801303a <http_parse_params_init+0x82>
			Uptime_Q = xQueue;
 8013034:	4a09      	ldr	r2, [pc, #36]	; (801305c <http_parse_params_init+0xa4>)
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	6013      	str	r3, [r2, #0]
}
 801303a:	bf00      	nop
 801303c:	370c      	adds	r7, #12
 801303e:	46bd      	mov	sp, r7
 8013040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013044:	4770      	bx	lr
 8013046:	bf00      	nop
 8013048:	20000508 	.word	0x20000508
 801304c:	2000050c 	.word	0x2000050c
 8013050:	20000510 	.word	0x20000510
 8013054:	20000514 	.word	0x20000514
 8013058:	20000518 	.word	0x20000518
 801305c:	2000051c 	.word	0x2000051c

08013060 <param_from_http_to_Q>:

void param_from_http_to_Q(char * http_resp, const uint8_t parameters_type){
 8013060:	b580      	push	{r7, lr}
 8013062:	b0cc      	sub	sp, #304	; 0x130
 8013064:	af00      	add	r7, sp, #0
 8013066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801306a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801306e:	6018      	str	r0, [r3, #0]
 8013070:	460a      	mov	r2, r1
 8013072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013076:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 801307a:	701a      	strb	r2, [r3, #0]
	float				shunt_value;
	P_sens_sett_struct	PowShunSett;

	uint8_t * buf;

	switch (parameters_type) {
 801307c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013080:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	2b04      	cmp	r3, #4
 8013088:	f200 816a 	bhi.w	8013360 <param_from_http_to_Q+0x300>
 801308c:	a201      	add	r2, pc, #4	; (adr r2, 8013094 <param_from_http_to_Q+0x34>)
 801308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013092:	bf00      	nop
 8013094:	080130a9 	.word	0x080130a9
 8013098:	08013361 	.word	0x08013361
 801309c:	08013275 	.word	0x08013275
 80130a0:	08013361 	.word	0x08013361
 80130a4:	080132fb 	.word	0x080132fb

		case MQTT:

			memset(&MQTT_params, 0, sizeof(MQTT_params));
 80130a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80130ac:	22c6      	movs	r2, #198	; 0xc6
 80130ae:	2100      	movs	r1, #0
 80130b0:	4618      	mov	r0, r3
 80130b2:	f01a fcfb 	bl	802daac <memset>

			if (strstr(get_http_param_value( http_resp, "mqtt"), "1") || strstr(get_http_param_value( http_resp, "mqtt"), "true")){
 80130b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130be:	49ac      	ldr	r1, [pc, #688]	; (8013370 <param_from_http_to_Q+0x310>)
 80130c0:	6818      	ldr	r0, [r3, #0]
 80130c2:	f00b fcdb 	bl	801ea7c <get_http_param_value>
 80130c6:	4603      	mov	r3, r0
 80130c8:	2131      	movs	r1, #49	; 0x31
 80130ca:	4618      	mov	r0, r3
 80130cc:	f01a fd05 	bl	802dada <strchr>
 80130d0:	4603      	mov	r3, r0
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d10f      	bne.n	80130f6 <param_from_http_to_Q+0x96>
 80130d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80130da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80130de:	49a4      	ldr	r1, [pc, #656]	; (8013370 <param_from_http_to_Q+0x310>)
 80130e0:	6818      	ldr	r0, [r3, #0]
 80130e2:	f00b fccb 	bl	801ea7c <get_http_param_value>
 80130e6:	4603      	mov	r3, r0
 80130e8:	49a2      	ldr	r1, [pc, #648]	; (8013374 <param_from_http_to_Q+0x314>)
 80130ea:	4618      	mov	r0, r3
 80130ec:	f01a fdb8 	bl	802dc60 <strstr>
 80130f0:	4603      	mov	r3, r0
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d003      	beq.n	80130fe <param_from_http_to_Q+0x9e>
				MQTT_params.enable = 1;
 80130f6:	2301      	movs	r3, #1
 80130f8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 80130fc:	e022      	b.n	8013144 <param_from_http_to_Q+0xe4>
			}else if (strstr(get_http_param_value( http_resp, "mqtt"), "0") || strstr(get_http_param_value( http_resp, "mqtt"), "false")) {
 80130fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013106:	499a      	ldr	r1, [pc, #616]	; (8013370 <param_from_http_to_Q+0x310>)
 8013108:	6818      	ldr	r0, [r3, #0]
 801310a:	f00b fcb7 	bl	801ea7c <get_http_param_value>
 801310e:	4603      	mov	r3, r0
 8013110:	2130      	movs	r1, #48	; 0x30
 8013112:	4618      	mov	r0, r3
 8013114:	f01a fce1 	bl	802dada <strchr>
 8013118:	4603      	mov	r3, r0
 801311a:	2b00      	cmp	r3, #0
 801311c:	d10f      	bne.n	801313e <param_from_http_to_Q+0xde>
 801311e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013126:	4992      	ldr	r1, [pc, #584]	; (8013370 <param_from_http_to_Q+0x310>)
 8013128:	6818      	ldr	r0, [r3, #0]
 801312a:	f00b fca7 	bl	801ea7c <get_http_param_value>
 801312e:	4603      	mov	r3, r0
 8013130:	4991      	ldr	r1, [pc, #580]	; (8013378 <param_from_http_to_Q+0x318>)
 8013132:	4618      	mov	r0, r3
 8013134:	f01a fd94 	bl	802dc60 <strstr>
 8013138:	4603      	mov	r3, r0
 801313a:	2b00      	cmp	r3, #0
 801313c:	d002      	beq.n	8013144 <param_from_http_to_Q+0xe4>
				MQTT_params.enable = 0;
 801313e:	2300      	movs	r3, #0
 8013140:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "login");
 8013144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013148:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801314c:	498b      	ldr	r1, [pc, #556]	; (801337c <param_from_http_to_Q+0x31c>)
 801314e:	6818      	ldr	r0, [r3, #0]
 8013150:	f00b fc94 	bl	801ea7c <get_http_param_value>
 8013154:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.login) / sizeof(char)) ){
 8013158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801315c:	2b00      	cmp	r3, #0
 801315e:	d106      	bne.n	801316e <param_from_http_to_Q+0x10e>
 8013160:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013164:	f7fd f89c 	bl	80102a0 <strlen>
 8013168:	4603      	mov	r3, r0
 801316a:	2b20      	cmp	r3, #32
 801316c:	d807      	bhi.n	801317e <param_from_http_to_Q+0x11e>
				strcpy(MQTT_params.login, buf);
 801316e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013172:	3384      	adds	r3, #132	; 0x84
 8013174:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 8013178:	4618      	mov	r0, r3
 801317a:	f01a fe64 	bl	802de46 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "password");
 801317e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013186:	497e      	ldr	r1, [pc, #504]	; (8013380 <param_from_http_to_Q+0x320>)
 8013188:	6818      	ldr	r0, [r3, #0]
 801318a:	f00b fc77 	bl	801ea7c <get_http_param_value>
 801318e:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) < sizeof(MQTT_params.pass) / sizeof(char)) ){
 8013192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013196:	2b00      	cmp	r3, #0
 8013198:	d106      	bne.n	80131a8 <param_from_http_to_Q+0x148>
 801319a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801319e:	f7fd f87f 	bl	80102a0 <strlen>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b20      	cmp	r3, #32
 80131a6:	d807      	bhi.n	80131b8 <param_from_http_to_Q+0x158>
				strcpy(MQTT_params.pass, buf);
 80131a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80131ac:	33a5      	adds	r3, #165	; 0xa5
 80131ae:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80131b2:	4618      	mov	r0, r3
 80131b4:	f01a fe47 	bl	802de46 <strcpy>
				//TODO change to strncpy
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "uri");
 80131b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131c0:	4970      	ldr	r1, [pc, #448]	; (8013384 <param_from_http_to_Q+0x324>)
 80131c2:	6818      	ldr	r0, [r3, #0]
 80131c4:	f00b fc5a 	bl	801ea7c <get_http_param_value>
 80131c8:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= MAX_DOMAIN_NAME -1 ) ) {						 // 15 ��������, ������������ ����� IPv4
 80131cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d106      	bne.n	80131e2 <param_from_http_to_Q+0x182>
 80131d4:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80131d8:	f7fd f862 	bl	80102a0 <strlen>
 80131dc:	4603      	mov	r3, r0
 80131de:	2b7f      	cmp	r3, #127	; 0x7f
 80131e0:	d808      	bhi.n	80131f4 <param_from_http_to_Q+0x194>
				//sscanf(buf, "%d.%d.%d.%d", &ip_addr[0], &ip_addr[1], &ip_addr[2], &ip_addr[3]);
				strncpy(MQTT_params.uri, buf, MAX_DOMAIN_NAME - 1);
 80131e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80131e6:	3302      	adds	r3, #2
 80131e8:	227f      	movs	r2, #127	; 0x7f
 80131ea:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 80131ee:	4618      	mov	r0, r3
 80131f0:	f01a fcb6 	bl	802db60 <strncpy>
			}

			buf = (uint8_t *) get_http_param_value( http_resp, "port");
 80131f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80131f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80131fc:	4962      	ldr	r1, [pc, #392]	; (8013388 <param_from_http_to_Q+0x328>)
 80131fe:	6818      	ldr	r0, [r3, #0]
 8013200:	f00b fc3c 	bl	801ea7c <get_http_param_value>
 8013204:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf || (strlen(buf) <= 5) ) {						// 5 ��������, ������������ ����� ������ �����
 8013208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801320c:	2b00      	cmp	r3, #0
 801320e:	d106      	bne.n	801321e <param_from_http_to_Q+0x1be>
 8013210:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8013214:	f7fd f844 	bl	80102a0 <strlen>
 8013218:	4603      	mov	r3, r0
 801321a:	2b05      	cmp	r3, #5
 801321c:	d81e      	bhi.n	801325c <param_from_http_to_Q+0x1fc>
				sscanf(buf, "%d", &port);
 801321e:	f107 0316 	add.w	r3, r7, #22
 8013222:	461a      	mov	r2, r3
 8013224:	4959      	ldr	r1, [pc, #356]	; (801338c <param_from_http_to_Q+0x32c>)
 8013226:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801322a:	f01a fb0f 	bl	802d84c <siscanf>
				if ((port > 0) && (port < 65534)){
 801322e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013232:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8013236:	881b      	ldrh	r3, [r3, #0]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d00f      	beq.n	801325c <param_from_http_to_Q+0x1fc>
 801323c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013240:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8013244:	881b      	ldrh	r3, [r3, #0]
 8013246:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801324a:	4293      	cmp	r3, r2
 801324c:	d806      	bhi.n	801325c <param_from_http_to_Q+0x1fc>
					MQTT_params.port = port;
 801324e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013252:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 8013256:	881b      	ldrh	r3, [r3, #0]
 8013258:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
				}
			}

			MQTT_params.save = 1;
 801325c:	2301      	movs	r3, #1
 801325e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

			xQueueOverwrite(MQTT_Q, (void *)&MQTT_params);
 8013262:	4b4b      	ldr	r3, [pc, #300]	; (8013390 <param_from_http_to_Q+0x330>)
 8013264:	6818      	ldr	r0, [r3, #0]
 8013266:	f107 0164 	add.w	r1, r7, #100	; 0x64
 801326a:	2302      	movs	r3, #2
 801326c:	2200      	movs	r2, #0
 801326e:	f00d fdbb 	bl	8020de8 <xQueueGenericSend>

			break;
 8013272:	e078      	b.n	8013366 <param_from_http_to_Q+0x306>

		case ModBusTCP:
			memset(&ModBusTCP_parameters, 0, sizeof(ModBusTCP_parameters));
 8013274:	f107 031c 	add.w	r3, r7, #28
 8013278:	2202      	movs	r2, #2
 801327a:	2100      	movs	r1, #0
 801327c:	4618      	mov	r0, r3
 801327e:	f01a fc15 	bl	802daac <memset>
			if (strstr(get_http_param_value( http_resp, "mb_tcp"), "1")){
 8013282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013286:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801328a:	4942      	ldr	r1, [pc, #264]	; (8013394 <param_from_http_to_Q+0x334>)
 801328c:	6818      	ldr	r0, [r3, #0]
 801328e:	f00b fbf5 	bl	801ea7c <get_http_param_value>
 8013292:	4603      	mov	r3, r0
 8013294:	2131      	movs	r1, #49	; 0x31
 8013296:	4618      	mov	r0, r3
 8013298:	f01a fc1f 	bl	802dada <strchr>
 801329c:	4603      	mov	r3, r0
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d006      	beq.n	80132b0 <param_from_http_to_Q+0x250>
				ModBusTCP_parameters.enable = 1;
 80132a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132aa:	2201      	movs	r2, #1
 80132ac:	705a      	strb	r2, [r3, #1]
 80132ae:	e015      	b.n	80132dc <param_from_http_to_Q+0x27c>
			}else if (strstr(get_http_param_value( http_resp, "mb_tcp"), "0")) {
 80132b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80132b8:	4936      	ldr	r1, [pc, #216]	; (8013394 <param_from_http_to_Q+0x334>)
 80132ba:	6818      	ldr	r0, [r3, #0]
 80132bc:	f00b fbde 	bl	801ea7c <get_http_param_value>
 80132c0:	4603      	mov	r3, r0
 80132c2:	2130      	movs	r1, #48	; 0x30
 80132c4:	4618      	mov	r0, r3
 80132c6:	f01a fc08 	bl	802dada <strchr>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d005      	beq.n	80132dc <param_from_http_to_Q+0x27c>
				ModBusTCP_parameters.enable = 0;
 80132d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132d4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132d8:	2200      	movs	r2, #0
 80132da:	705a      	strb	r2, [r3, #1]
			}
			ModBusTCP_parameters.save = 1;
 80132dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80132e4:	2201      	movs	r2, #1
 80132e6:	701a      	strb	r2, [r3, #0]

			xQueueOverwrite(ModbusTCP_Q, (void *)&ModBusTCP_parameters);
 80132e8:	4b2b      	ldr	r3, [pc, #172]	; (8013398 <param_from_http_to_Q+0x338>)
 80132ea:	6818      	ldr	r0, [r3, #0]
 80132ec:	f107 011c 	add.w	r1, r7, #28
 80132f0:	2302      	movs	r3, #2
 80132f2:	2200      	movs	r2, #0
 80132f4:	f00d fd78 	bl	8020de8 <xQueueGenericSend>
			break;
 80132f8:	e035      	b.n	8013366 <param_from_http_to_Q+0x306>
		case HA:

			break;
//TODO hui pizda zalupa
		case PowrSensSett:
			buf = (uint8_t *) get_http_param_value( http_resp, "shunt");
 80132fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80132fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8013302:	4926      	ldr	r1, [pc, #152]	; (801339c <param_from_http_to_Q+0x33c>)
 8013304:	6818      	ldr	r0, [r3, #0]
 8013306:	f00b fbb9 	bl	801ea7c <get_http_param_value>
 801330a:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
			if (buf ) {						// 5 ��������, ������������ ����� ������ �����
 801330e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013312:	2b00      	cmp	r3, #0
 8013314:	d026      	beq.n	8013364 <param_from_http_to_Q+0x304>
				sscanf(buf, "%f", &float_temp);							//TODO add validation
 8013316:	4a22      	ldr	r2, [pc, #136]	; (80133a0 <param_from_http_to_Q+0x340>)
 8013318:	4922      	ldr	r1, [pc, #136]	; (80133a4 <param_from_http_to_Q+0x344>)
 801331a:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 801331e:	f01a fa95 	bl	802d84c <siscanf>
				if (float_temp > 0){									//validate value
 8013322:	4b1f      	ldr	r3, [pc, #124]	; (80133a0 <param_from_http_to_Q+0x340>)
 8013324:	edd3 7a00 	vldr	s15, [r3]
 8013328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013330:	dc00      	bgt.n	8013334 <param_from_http_to_Q+0x2d4>
					PowShunSett.resistance = float_temp;
					PowShunSett.save = 1;
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
				}
			}
			break;
 8013332:	e017      	b.n	8013364 <param_from_http_to_Q+0x304>
					PowShunSett.resistance = float_temp;
 8013334:	4b1a      	ldr	r3, [pc, #104]	; (80133a0 <param_from_http_to_Q+0x340>)
 8013336:	681a      	ldr	r2, [r3, #0]
 8013338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801333c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8013340:	605a      	str	r2, [r3, #4]
					PowShunSett.save = 1;
 8013342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013346:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801334a:	2201      	movs	r2, #1
 801334c:	701a      	strb	r2, [r3, #0]
					xQueueOverwrite(PowerSensSettings_Q, (void *)&PowShunSett);
 801334e:	4b16      	ldr	r3, [pc, #88]	; (80133a8 <param_from_http_to_Q+0x348>)
 8013350:	6818      	ldr	r0, [r3, #0]
 8013352:	f107 010c 	add.w	r1, r7, #12
 8013356:	2302      	movs	r3, #2
 8013358:	2200      	movs	r2, #0
 801335a:	f00d fd45 	bl	8020de8 <xQueueGenericSend>
			break;
 801335e:	e001      	b.n	8013364 <param_from_http_to_Q+0x304>
		default:
			break;
 8013360:	bf00      	nop
 8013362:	e000      	b.n	8013366 <param_from_http_to_Q+0x306>
			break;
 8013364:	bf00      	nop
	}
}
 8013366:	bf00      	nop
 8013368:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	08032918 	.word	0x08032918
 8013374:	08032920 	.word	0x08032920
 8013378:	08032928 	.word	0x08032928
 801337c:	08032930 	.word	0x08032930
 8013380:	08032938 	.word	0x08032938
 8013384:	08032944 	.word	0x08032944
 8013388:	08032948 	.word	0x08032948
 801338c:	08032950 	.word	0x08032950
 8013390:	20000508 	.word	0x20000508
 8013394:	08032954 	.word	0x08032954
 8013398:	20000510 	.word	0x20000510
 801339c:	0803295c 	.word	0x0803295c
 80133a0:	20000520 	.word	0x20000520
 80133a4:	08032964 	.word	0x08032964
 80133a8:	20000518 	.word	0x20000518

080133ac <param_from_Q_to_JSON>:

void param_from_Q_to_JSON(char * buf, const uint8_t parameters_type, uint16_t * len){
 80133ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b0:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 80133b4:	af0a      	add	r7, sp, #40	; 0x28
 80133b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133ba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80133be:	6018      	str	r0, [r3, #0]
 80133c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133c4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80133c8:	601a      	str	r2, [r3, #0]
 80133ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133ce:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 80133d2:	460a      	mov	r2, r1
 80133d4:	701a      	strb	r2, [r3, #0]

	MQTT_cred_struct	MQTT_params;
	PowerSensStruct		PowerParm;
	P_sens_sett_struct	PowShunSett;

	unsigned const char template_mqtt_data[] 	= {"{\"login\": \"%s\", \"pass\": \"********\", \"addr\": \"%s\", \"port\": \"%u\", \"enabled\": \"%u\"}"};//{"login": "admin", "pass": "1234", "addr": "10.0.2.20", "port": "1883", "enabled": 1 }
 80133d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133da:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80133de:	4a73      	ldr	r2, [pc, #460]	; (80135ac <param_from_Q_to_JSON+0x200>)
 80133e0:	4618      	mov	r0, r3
 80133e2:	4611      	mov	r1, r2
 80133e4:	2351      	movs	r3, #81	; 0x51
 80133e6:	461a      	mov	r2, r3
 80133e8:	f01a fd35 	bl	802de56 <memcpy>
	unsigned const char template_power_data[] 	= {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"W_h\": \"%.2f\"}"};//{"voltage": "233.2", "current": "0.56", "active_power_w": "33.4", "apparent_power_w": "65.2", "power_factor": "0.5", "KW/h": "0.5634"}
 80133ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80133f0:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80133f4:	4a6e      	ldr	r2, [pc, #440]	; (80135b0 <param_from_Q_to_JSON+0x204>)
 80133f6:	4618      	mov	r0, r3
 80133f8:	4611      	mov	r1, r2
 80133fa:	2384      	movs	r3, #132	; 0x84
 80133fc:	461a      	mov	r2, r3
 80133fe:	f01a fd2a 	bl	802de56 <memcpy>
	unsigned const char template_shunt_sett[]   = {"{\"shunt\": \"%.4f\"}"};
 8013402:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013406:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 801340a:	4a6a      	ldr	r2, [pc, #424]	; (80135b4 <param_from_Q_to_JSON+0x208>)
 801340c:	461c      	mov	r4, r3
 801340e:	4615      	mov	r5, r2
 8013410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013414:	682b      	ldr	r3, [r5, #0]
 8013416:	8023      	strh	r3, [r4, #0]

	switch (parameters_type) {
 8013418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801341c:	f2a3 13e5 	subw	r3, r3, #485	; 0x1e5
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b04      	cmp	r3, #4
 8013424:	f000 8093 	beq.w	801354e <param_from_Q_to_JSON+0x1a2>
 8013428:	2b04      	cmp	r3, #4
 801342a:	f300 80b8 	bgt.w	801359e <param_from_Q_to_JSON+0x1f2>
 801342e:	2b00      	cmp	r3, #0
 8013430:	d002      	beq.n	8013438 <param_from_Q_to_JSON+0x8c>
 8013432:	2b03      	cmp	r3, #3
 8013434:	d031      	beq.n	801349a <param_from_Q_to_JSON+0xee>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
			*len = strlen(buf);
			break;
		default:
			break;
 8013436:	e0b2      	b.n	801359e <param_from_Q_to_JSON+0x1f2>
			xQueuePeek(MQTT_Q ,&MQTT_params,0);
 8013438:	4b5f      	ldr	r3, [pc, #380]	; (80135b8 <param_from_Q_to_JSON+0x20c>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8013440:	2200      	movs	r2, #0
 8013442:	4618      	mov	r0, r3
 8013444:	f00e f856 	bl	80214f4 <xQueuePeek>
			sprintf(buf, (const char *)template_mqtt_data, MQTT_params.login, MQTT_params.uri, MQTT_params.port, MQTT_params.enable);
 8013448:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
 801344c:	461d      	mov	r5, r3
 801344e:	f897 3139 	ldrb.w	r3, [r7, #313]	; 0x139
 8013452:	461e      	mov	r6, r3
 8013454:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8013458:	1c9c      	adds	r4, r3, #2
 801345a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 801345e:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8013462:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8013466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801346a:	f5a3 70f2 	sub.w	r0, r3, #484	; 0x1e4
 801346e:	9601      	str	r6, [sp, #4]
 8013470:	9500      	str	r5, [sp, #0]
 8013472:	4623      	mov	r3, r4
 8013474:	6800      	ldr	r0, [r0, #0]
 8013476:	f01a f9c9 	bl	802d80c <siprintf>
			*len = strlen(buf);
 801347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 801347e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013482:	6818      	ldr	r0, [r3, #0]
 8013484:	f7fc ff0c 	bl	80102a0 <strlen>
 8013488:	4603      	mov	r3, r0
 801348a:	b29a      	uxth	r2, r3
 801348c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013490:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013494:	681b      	ldr	r3, [r3, #0]
 8013496:	801a      	strh	r2, [r3, #0]
			break;
 8013498:	e082      	b.n	80135a0 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(Power_Data_Q ,&PowerParm,0);
 801349a:	4b48      	ldr	r3, [pc, #288]	; (80135bc <param_from_Q_to_JSON+0x210>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f507 718a 	add.w	r1, r7, #276	; 0x114
 80134a2:	2200      	movs	r2, #0
 80134a4:	4618      	mov	r0, r3
 80134a6:	f00e f825 	bl	80214f4 <xQueuePeek>
			sprintf(buf, (const char *)template_power_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h);
 80134aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80134ae:	4618      	mov	r0, r3
 80134b0:	f7fd f862 	bl	8010578 <__aeabi_f2d>
 80134b4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80134b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80134bc:	4618      	mov	r0, r3
 80134be:	f7fd f85b 	bl	8010578 <__aeabi_f2d>
 80134c2:	4604      	mov	r4, r0
 80134c4:	460d      	mov	r5, r1
 80134c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7fd f854 	bl	8010578 <__aeabi_f2d>
 80134d0:	4680      	mov	r8, r0
 80134d2:	4689      	mov	r9, r1
 80134d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80134d8:	4618      	mov	r0, r3
 80134da:	f7fd f84d 	bl	8010578 <__aeabi_f2d>
 80134de:	4682      	mov	sl, r0
 80134e0:	468b      	mov	fp, r1
 80134e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7fd f846 	bl	8010578 <__aeabi_f2d>
 80134ec:	e9c7 0100 	strd	r0, r1, [r7]
 80134f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80134f4:	4618      	mov	r0, r3
 80134f6:	f7fd f83f 	bl	8010578 <__aeabi_f2d>
 80134fa:	4602      	mov	r2, r0
 80134fc:	460b      	mov	r3, r1
 80134fe:	f107 0634 	add.w	r6, r7, #52	; 0x34
 8013502:	f507 7100 	add.w	r1, r7, #512	; 0x200
 8013506:	f5a1 70f2 	sub.w	r0, r1, #484	; 0x1e4
 801350a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801350e:	ed97 7b00 	vldr	d7, [r7]
 8013512:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013516:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801351a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801351e:	e9cd 4500 	strd	r4, r5, [sp]
 8013522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013526:	4631      	mov	r1, r6
 8013528:	6800      	ldr	r0, [r0, #0]
 801352a:	f01a f96f 	bl	802d80c <siprintf>
			*len = strlen(buf);
 801352e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013532:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013536:	6818      	ldr	r0, [r3, #0]
 8013538:	f7fc feb2 	bl	80102a0 <strlen>
 801353c:	4603      	mov	r3, r0
 801353e:	b29a      	uxth	r2, r3
 8013540:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013544:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	801a      	strh	r2, [r3, #0]
			break;
 801354c:	e028      	b.n	80135a0 <param_from_Q_to_JSON+0x1f4>
			xQueuePeek(PowerSensSettings_Q ,&PowShunSett,0);
 801354e:	4b1c      	ldr	r3, [pc, #112]	; (80135c0 <param_from_Q_to_JSON+0x214>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8013556:	2200      	movs	r2, #0
 8013558:	4618      	mov	r0, r3
 801355a:	f00d ffcb 	bl	80214f4 <xQueuePeek>
			sprintf(buf, (const char *)template_shunt_sett, PowShunSett.resistance);
 801355e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013562:	4618      	mov	r0, r3
 8013564:	f7fd f808 	bl	8010578 <__aeabi_f2d>
 8013568:	4602      	mov	r2, r0
 801356a:	460b      	mov	r3, r1
 801356c:	f107 0120 	add.w	r1, r7, #32
 8013570:	f507 7000 	add.w	r0, r7, #512	; 0x200
 8013574:	f5a0 70f2 	sub.w	r0, r0, #484	; 0x1e4
 8013578:	6800      	ldr	r0, [r0, #0]
 801357a:	f01a f947 	bl	802d80c <siprintf>
			*len = strlen(buf);
 801357e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013582:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8013586:	6818      	ldr	r0, [r3, #0]
 8013588:	f7fc fe8a 	bl	80102a0 <strlen>
 801358c:	4603      	mov	r3, r0
 801358e:	b29a      	uxth	r2, r3
 8013590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8013594:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	801a      	strh	r2, [r3, #0]
			break;
 801359c:	e000      	b.n	80135a0 <param_from_Q_to_JSON+0x1f4>
			break;
 801359e:	bf00      	nop
	}
}
 80135a0:	bf00      	nop
 80135a2:	f507 7701 	add.w	r7, r7, #516	; 0x204
 80135a6:	46bd      	mov	sp, r7
 80135a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ac:	08032968 	.word	0x08032968
 80135b0:	080329bc 	.word	0x080329bc
 80135b4:	08032a40 	.word	0x08032a40
 80135b8:	20000508 	.word	0x20000508
 80135bc:	20000514 	.word	0x20000514
 80135c0:	20000518 	.word	0x20000518

080135c4 <write_to_file>:

int write_to_file(char * buf, uint16_t * len, char * response, char * base_path){
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80135ca:	af02      	add	r7, sp, #8
 80135cc:	f507 743c 	add.w	r4, r7, #752	; 0x2f0
 80135d0:	f5a4 7439 	sub.w	r4, r4, #740	; 0x2e4
 80135d4:	6020      	str	r0, [r4, #0]
 80135d6:	f507 703c 	add.w	r0, r7, #752	; 0x2f0
 80135da:	f5a0 703a 	sub.w	r0, r0, #744	; 0x2e8
 80135de:	6001      	str	r1, [r0, #0]
 80135e0:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 80135e4:	f5a1 713b 	sub.w	r1, r1, #748	; 0x2ec
 80135e8:	600a      	str	r2, [r1, #0]
 80135ea:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 80135ee:	f5a2 723c 	sub.w	r2, r2, #752	; 0x2f0
 80135f2:	6013      	str	r3, [r2, #0]
	uint32_t	number;
	unsigned char output[17];
	unsigned char recv_digest_bin[17];
	int i, t ,t2 ,r;

	p_len = &parsed_len;
 80135f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80135f8:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4

	param_value = get_http_param_value((char *)buf, "filename");
 80135fc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013600:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013604:	49ac      	ldr	r1, [pc, #688]	; (80138b8 <write_to_file+0x2f4>)
 8013606:	6818      	ldr	r0, [r3, #0]
 8013608:	f00b fa38 	bl	801ea7c <get_http_param_value>
 801360c:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0
	if (param_value){
 8013610:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8013614:	2b00      	cmp	r3, #0
 8013616:	d025      	beq.n	8013664 <write_to_file+0xa0>
		strcpy(filename, base_path);
 8013618:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801361c:	f5a3 733c 	sub.w	r3, r3, #752	; 0x2f0
 8013620:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013624:	6819      	ldr	r1, [r3, #0]
 8013626:	4610      	mov	r0, r2
 8013628:	f01a fc0d 	bl	802de46 <strcpy>
		strncat(filename, param_value, MAX_CONTENT_NAME_LEN-5);
 801362c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013630:	222d      	movs	r2, #45	; 0x2d
 8013632:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8013636:	4618      	mov	r0, r3
 8013638:	f01a fa6d 	bl	802db16 <strncat>
		return;
	}

	//step_number = get_http_param_value((char *)buf, "step");

	param_value = get_http_param_value((char *)buf, "data");
 801363c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013640:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8013644:	499d      	ldr	r1, [pc, #628]	; (80138bc <write_to_file+0x2f8>)
 8013646:	6818      	ldr	r0, [r3, #0]
 8013648:	f00b fa18 	bl	801ea7c <get_http_param_value>
 801364c:	f8c7 02e0 	str.w	r0, [r7, #736]	; 0x2e0

	if (strlen(param_value) >=  TMP_BUFF_FOR_FILE_RECV){ //check if resieved data in parameter "data" not bigger then buffer
 8013650:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013654:	f7fc fe24 	bl	80102a0 <strlen>
 8013658:	4603      	mov	r3, r0
 801365a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801365e:	f080 8113 	bcs.w	8013888 <write_to_file+0x2c4>
 8013662:	e011      	b.n	8013688 <write_to_file+0xc4>
		strncpy(response, "error", strlen("error")+1);
 8013664:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013668:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4a94      	ldr	r2, [pc, #592]	; (80138c0 <write_to_file+0x2fc>)
 8013670:	6810      	ldr	r0, [r2, #0]
 8013672:	6018      	str	r0, [r3, #0]
 8013674:	8892      	ldrh	r2, [r2, #4]
 8013676:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013678:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801367c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	2205      	movs	r2, #5
 8013684:	801a      	strh	r2, [r3, #0]
		return;
 8013686:	e111      	b.n	80138ac <write_to_file+0x2e8>

	}else if (param_value){								//check if resieved data len > 0
 8013688:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 801368c:	2b00      	cmp	r3, #0
 801368e:	f000 80e9 	beq.w	8013864 <write_to_file+0x2a0>
		recv_len = strlen(param_value);
 8013692:	f8d7 02e0 	ldr.w	r0, [r7, #736]	; 0x2e0
 8013696:	f7fc fe03 	bl	80102a0 <strlen>
 801369a:	4603      	mov	r3, r0
 801369c:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
//		replacetochar(param_value, ' ', '+');
		err = mbedtls_base64_decode((unsigned char *)tmp_data_buf, TMP_BUFF_FOR_FILE_RECV, p_len, (const unsigned char *)param_value, recv_len);
 80136a0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80136a4:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80136ae:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 80136b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80136b6:	f017 fe87 	bl	802b3c8 <mbedtls_base64_decode>
 80136ba:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec

		parsed_digest = get_http_param_value((char *)buf, "digest");
 80136be:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80136c2:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80136c6:	497f      	ldr	r1, [pc, #508]	; (80138c4 <write_to_file+0x300>)
 80136c8:	6818      	ldr	r0, [r3, #0]
 80136ca:	f00b f9d7 	bl	801ea7c <get_http_param_value>
 80136ce:	f8c7 02d8 	str.w	r0, [r7, #728]	; 0x2d8

	    for (i = 0; i< 32 ; i+=2){
 80136d2:	2300      	movs	r3, #0
 80136d4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80136d8:	e030      	b.n	801373c <write_to_file+0x178>
	        t = CharToDec(parsed_digest[i]);
 80136da:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80136de:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80136e2:	4413      	add	r3, r2
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7ff fc3e 	bl	8012f68 <CharToDec>
 80136ec:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
	        t2 = CharToDec(parsed_digest[i+1]);
 80136f0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80136f4:	3301      	adds	r3, #1
 80136f6:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 80136fa:	4413      	add	r3, r2
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	4618      	mov	r0, r3
 8013700:	f7ff fc32 	bl	8012f68 <CharToDec>
 8013704:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8
	        recv_digest_bin[i/2] = t << 4 | t2;
 8013708:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 801370c:	011b      	lsls	r3, r3, #4
 801370e:	b25a      	sxtb	r2, r3
 8013710:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8013714:	b25b      	sxtb	r3, r3
 8013716:	4313      	orrs	r3, r2
 8013718:	b259      	sxtb	r1, r3
 801371a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 801371e:	0fda      	lsrs	r2, r3, #31
 8013720:	4413      	add	r3, r2
 8013722:	105b      	asrs	r3, r3, #1
 8013724:	461a      	mov	r2, r3
 8013726:	b2c9      	uxtb	r1, r1
 8013728:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801372c:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 8013730:	5499      	strb	r1, [r3, r2]
	    for (i = 0; i< 32 ; i+=2){
 8013732:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013736:	3302      	adds	r3, #2
 8013738:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 801373c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8013740:	2b1f      	cmp	r3, #31
 8013742:	ddca      	ble.n	80136da <write_to_file+0x116>
	    }
	    recv_digest_bin[16] = '\0';
 8013744:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013748:	f5a3 7322 	sub.w	r3, r3, #648	; 0x288
 801374c:	2200      	movs	r2, #0
 801374e:	741a      	strb	r2, [r3, #16]


		mbedtls_md5_context md5_ctx;

		mbedtls_md5_init(&md5_ctx);
 8013750:	f107 0310 	add.w	r3, r7, #16
 8013754:	4618      	mov	r0, r3
 8013756:	f017 ff53 	bl	802b600 <mbedtls_md5_init>
		mbedtls_md5_starts_ret(&md5_ctx);
 801375a:	f107 0310 	add.w	r3, r7, #16
 801375e:	4618      	mov	r0, r3
 8013760:	f017 ff6c 	bl	802b63c <mbedtls_md5_starts_ret>
		mbedtls_md5_update_ret(&md5_ctx, tmp_data_buf, *p_len);
 8013764:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013768:	681a      	ldr	r2, [r3, #0]
 801376a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801376e:	f107 0310 	add.w	r3, r7, #16
 8013772:	4618      	mov	r0, r3
 8013774:	f018 fe4c 	bl	802c410 <mbedtls_md5_update_ret>
		mbedtls_md5_finish_ret(&md5_ctx, output);
 8013778:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 801377c:	f107 0310 	add.w	r3, r7, #16
 8013780:	4611      	mov	r1, r2
 8013782:	4618      	mov	r0, r3
 8013784:	f018 feb9 	bl	802c4fa <mbedtls_md5_finish_ret>
		mbedtls_md5_free(&md5_ctx);
 8013788:	f107 0310 	add.w	r3, r7, #16
 801378c:	4618      	mov	r0, r3
 801378e:	f017 ff44 	bl	802b61a <mbedtls_md5_free>
		output[16] = '\0';
 8013792:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013796:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 801379a:	2200      	movs	r2, #0
 801379c:	741a      	strb	r2, [r3, #16]



		if (strncmp(&recv_digest_bin, &output, 16)){
 801379e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 80137a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80137a6:	2210      	movs	r2, #16
 80137a8:	4618      	mov	r0, r3
 80137aa:	f01a f9c7 	bl	802db3c <strncmp>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d006      	beq.n	80137c2 <write_to_file+0x1fe>
			err = -1;
 80137b4:	f04f 33ff 	mov.w	r3, #4294967295
 80137b8:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
			return err;
 80137bc:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 80137c0:	e074      	b.n	80138ac <write_to_file+0x2e8>
		}

		step_number = get_http_param_value((char *)buf, "step");
 80137c2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80137c6:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 80137ca:	493f      	ldr	r1, [pc, #252]	; (80138c8 <write_to_file+0x304>)
 80137cc:	6818      	ldr	r0, [r3, #0]
 80137ce:	f00b f955 	bl	801ea7c <get_http_param_value>
 80137d2:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
		number = ATOI(step_number, 10);
 80137d6:	210a      	movs	r1, #10
 80137d8:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 80137dc:	f00b fa00 	bl	801ebe0 <ATOI>
 80137e0:	4603      	mov	r3, r0
 80137e2:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0

		if(number == 0){
 80137e6:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d10f      	bne.n	801380e <write_to_file+0x24a>
			part =0;
 80137ee:	4b37      	ldr	r3, [pc, #220]	; (80138cc <write_to_file+0x308>)
 80137f0:	2200      	movs	r2, #0
 80137f2:	601a      	str	r2, [r3, #0]
			err = spi_fs_over_write_file(filename, tmp_data_buf, *p_len);
 80137f4:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80137fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013802:	4618      	mov	r0, r3
 8013804:	f017 fc0e 	bl	802b024 <spi_fs_over_write_file>
 8013808:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
 801380c:	e01d      	b.n	801384a <write_to_file+0x286>
		}else{

			if(ATOI(step_number, 10)!= part){
 801380e:	210a      	movs	r1, #10
 8013810:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8013814:	f00b f9e4 	bl	801ebe0 <ATOI>
 8013818:	4603      	mov	r3, r0
 801381a:	461a      	mov	r2, r3
 801381c:	4b2b      	ldr	r3, [pc, #172]	; (80138cc <write_to_file+0x308>)
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	429a      	cmp	r2, r3
 8013822:	d006      	beq.n	8013832 <write_to_file+0x26e>
				err = -1;
 8013824:	f04f 33ff 	mov.w	r3, #4294967295
 8013828:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
				return err;
 801382c:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013830:	e03c      	b.n	80138ac <write_to_file+0x2e8>
			}

			err = spi_fs_write_file_to_end(filename, tmp_data_buf, *p_len);
 8013832:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8013836:	681a      	ldr	r2, [r3, #0]
 8013838:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 801383c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013840:	4618      	mov	r0, r3
 8013842:	f017 fc4b 	bl	802b0dc <spi_fs_write_file_to_end>
 8013846:	f8c7 02ec 	str.w	r0, [r7, #748]	; 0x2ec
		}

		part++;
 801384a:	4b20      	ldr	r3, [pc, #128]	; (80138cc <write_to_file+0x308>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	3301      	adds	r3, #1
 8013850:	4a1e      	ldr	r2, [pc, #120]	; (80138cc <write_to_file+0x308>)
 8013852:	6013      	str	r3, [r2, #0]

		if (err < 0){
 8013854:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8013858:	2b00      	cmp	r3, #0
 801385a:	da15      	bge.n	8013888 <write_to_file+0x2c4>
			err = 0;
 801385c:	2300      	movs	r3, #0
 801385e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8013862:	e011      	b.n	8013888 <write_to_file+0x2c4>
		}

		//strncpy(tmp_data_buf, param_value, TMP_BUFF_FOR_FILE_RECV-1);
	}else{
		strncpy(response, "error", strlen("error")+1);
 8013864:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8013868:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	4a14      	ldr	r2, [pc, #80]	; (80138c0 <write_to_file+0x2fc>)
 8013870:	6810      	ldr	r0, [r2, #0]
 8013872:	6018      	str	r0, [r3, #0]
 8013874:	8892      	ldrh	r2, [r2, #4]
 8013876:	809a      	strh	r2, [r3, #4]
		*len = strlen("error");
 8013878:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801387c:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	2205      	movs	r2, #5
 8013884:	801a      	strh	r2, [r3, #0]
		return;
 8013886:	e011      	b.n	80138ac <write_to_file+0x2e8>
	}
	strncpy(response, "ok", strlen("ok")+1);
 8013888:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 801388c:	f5a3 733b 	sub.w	r3, r3, #748	; 0x2ec
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	4a0f      	ldr	r2, [pc, #60]	; (80138d0 <write_to_file+0x30c>)
 8013894:	8811      	ldrh	r1, [r2, #0]
 8013896:	7892      	ldrb	r2, [r2, #2]
 8013898:	8019      	strh	r1, [r3, #0]
 801389a:	709a      	strb	r2, [r3, #2]
	*len = strlen("ok");
 801389c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80138a0:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	2202      	movs	r2, #2
 80138a8:	801a      	strh	r2, [r3, #0]
}
 80138aa:	e7ff      	b.n	80138ac <write_to_file+0x2e8>
 80138ac:	4618      	mov	r0, r3
 80138ae:	f507 773d 	add.w	r7, r7, #756	; 0x2f4
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd90      	pop	{r4, r7, pc}
 80138b6:	bf00      	nop
 80138b8:	08032a54 	.word	0x08032a54
 80138bc:	08032a68 	.word	0x08032a68
 80138c0:	08032a60 	.word	0x08032a60
 80138c4:	08032a70 	.word	0x08032a70
 80138c8:	08032a78 	.word	0x08032a78
 80138cc:	20000524 	.word	0x20000524
 80138d0:	08032a80 	.word	0x08032a80

080138d4 <web_mkdir>:

int8_t web_mkdir(char * buf, char * base_path){
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b092      	sub	sp, #72	; 0x48
 80138d8:	af02      	add	r7, sp, #8
 80138da:	6078      	str	r0, [r7, #4]
 80138dc:	6039      	str	r1, [r7, #0]

	char * dirname;
	char tmp[MAX_CONTENT_NAME_LEN];

	dirname = get_http_param_value((char *)buf, "dirname");
 80138de:	4912      	ldr	r1, [pc, #72]	; (8013928 <web_mkdir+0x54>)
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f00b f8cb 	bl	801ea7c <get_http_param_value>
 80138e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (dirname != 0 || (strlen(dirname) < MAX_CONTENT_NAME_LEN - 5)) //TODO add dirname validation
 80138e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d105      	bne.n	80138fa <web_mkdir+0x26>
 80138ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80138f0:	f7fc fcd6 	bl	80102a0 <strlen>
 80138f4:	4603      	mov	r3, r0
 80138f6:	2b2c      	cmp	r3, #44	; 0x2c
 80138f8:	d810      	bhi.n	801391c <web_mkdir+0x48>
		{
			snprintf(tmp, sizeof(tmp), "%s%s", base_path, dirname);
 80138fa:	f107 0008 	add.w	r0, r7, #8
 80138fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013900:	9300      	str	r3, [sp, #0]
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	4a09      	ldr	r2, [pc, #36]	; (801392c <web_mkdir+0x58>)
 8013906:	2132      	movs	r1, #50	; 0x32
 8013908:	f019 ff4c 	bl	802d7a4 <sniprintf>
			return (spi_fs_mkdir(tmp));
 801390c:	f107 0308 	add.w	r3, r7, #8
 8013910:	4618      	mov	r0, r3
 8013912:	f017 fc3b 	bl	802b18c <spi_fs_mkdir>
 8013916:	4603      	mov	r3, r0
 8013918:	b25b      	sxtb	r3, r3
 801391a:	e001      	b.n	8013920 <web_mkdir+0x4c>
		}
	return -1;
 801391c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013920:	4618      	mov	r0, r3
 8013922:	3740      	adds	r7, #64	; 0x40
 8013924:	46bd      	mov	sp, r7
 8013926:	bd80      	pop	{r7, pc}
 8013928:	08032a84 	.word	0x08032a84
 801392c:	08032a8c 	.word	0x08032a8c

08013930 <read_all_parameters>:

int8_t read_all_parameters(uint8_t * buf, uint16_t * len){
 8013930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013934:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8013938:	af16      	add	r7, sp, #88	; 0x58
 801393a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 801393e:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013942:	6018      	str	r0, [r3, #0]
 8013944:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013948:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 801394c:	6019      	str	r1, [r3, #0]
	P_sens_sett_struct	PowShunSett;
	MQTT_cred_struct	MQTT_params;
	ModBusTCP_struct	mb_tcp_params;
	uint32_t			uptime;

	unsigned const char template_data[] = {"{\"voltage\": \"%.2f\", \"current\": \"%.2f\", \"active_power_w\": \"%.2f\", \"apparent_power_w\": \"%.2f\", \"power_factor\": \"%.2f\", \"kWh\": \"%.2f\", \"shunt\": \"%.8f\", \"mb_tcp\": %u, \"mqtt\": %u, \"mqtt_login\": \"%s\", \"mqtt_port\": \"%u\", \"uri\": \"%s\", \"test_pulse\": \"%u\",  \"readed_pulse\": \"%u\", \"PF_reg\": \"%u\", \"uptime\": \"%u\"}"};
 801394e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013952:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8013956:	4a5d      	ldr	r2, [pc, #372]	; (8013acc <read_all_parameters+0x19c>)
 8013958:	4618      	mov	r0, r3
 801395a:	4611      	mov	r1, r2
 801395c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 8013960:	461a      	mov	r2, r3
 8013962:	f01a fa78 	bl	802de56 <memcpy>

	xQueuePeek(Power_Data_Q,			(void *)&PowerParm,0);
 8013966:	4b5a      	ldr	r3, [pc, #360]	; (8013ad0 <read_all_parameters+0x1a0>)
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f507 7113 	add.w	r1, r7, #588	; 0x24c
 801396e:	2200      	movs	r2, #0
 8013970:	4618      	mov	r0, r3
 8013972:	f00d fdbf 	bl	80214f4 <xQueuePeek>
	xQueuePeek(PowerSensSettings_Q ,	(void *)&PowShunSett,0);
 8013976:	4b57      	ldr	r3, [pc, #348]	; (8013ad4 <read_all_parameters+0x1a4>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	f507 7111 	add.w	r1, r7, #580	; 0x244
 801397e:	2200      	movs	r2, #0
 8013980:	4618      	mov	r0, r3
 8013982:	f00d fdb7 	bl	80214f4 <xQueuePeek>
	xQueuePeek(MQTT_Q ,					(void *)&MQTT_params,0);
 8013986:	4b54      	ldr	r3, [pc, #336]	; (8013ad8 <read_all_parameters+0x1a8>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 801398e:	2200      	movs	r2, #0
 8013990:	4618      	mov	r0, r3
 8013992:	f00d fdaf 	bl	80214f4 <xQueuePeek>
	xQueuePeek(ModbusTCP_Q,				(void *)&mb_tcp_params, 0);
 8013996:	4b51      	ldr	r3, [pc, #324]	; (8013adc <read_all_parameters+0x1ac>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 801399e:	2200      	movs	r2, #0
 80139a0:	4618      	mov	r0, r3
 80139a2:	f00d fda7 	bl	80214f4 <xQueuePeek>
	xQueuePeek(Uptime_Q,				(void *)&uptime, 0);
 80139a6:	4b4e      	ldr	r3, [pc, #312]	; (8013ae0 <read_all_parameters+0x1b0>)
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	f507 71ba 	add.w	r1, r7, #372	; 0x174
 80139ae:	2200      	movs	r2, #0
 80139b0:	4618      	mov	r0, r3
 80139b2:	f00d fd9f 	bl	80214f4 <xQueuePeek>


	sprintf(buf, (const char *)template_data, PowerParm.Voltage, PowerParm.Current, PowerParm.ActivePower, PowerParm.ApparPower, PowerParm.PowerFactor, PowerParm.KWatt_h, PowShunSett.resistance, mb_tcp_params.enable, MQTT_params.enable, MQTT_params.login, MQTT_params.port, MQTT_params.uri, PowerParm.test_pulse_counter, PowerParm.readed_counter, PowerParm.PF_reg, uptime);
 80139b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7fc fddc 	bl	8010578 <__aeabi_f2d>
 80139c0:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80139c4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7fc fdd5 	bl	8010578 <__aeabi_f2d>
 80139ce:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 80139d2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7fc fdce 	bl	8010578 <__aeabi_f2d>
 80139dc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80139e0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fc fdc7 	bl	8010578 <__aeabi_f2d>
 80139ea:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80139ee:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80139f2:	4618      	mov	r0, r3
 80139f4:	f7fc fdc0 	bl	8010578 <__aeabi_f2d>
 80139f8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80139fc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7fc fdb9 	bl	8010578 <__aeabi_f2d>
 8013a06:	4682      	mov	sl, r0
 8013a08:	468b      	mov	fp, r1
 8013a0a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8013a0e:	4618      	mov	r0, r3
 8013a10:	f7fc fdb2 	bl	8010578 <__aeabi_f2d>
 8013a14:	4680      	mov	r8, r0
 8013a16:	4689      	mov	r9, r1
 8013a18:	f897 3179 	ldrb.w	r3, [r7, #377]	; 0x179
 8013a1c:	60fb      	str	r3, [r7, #12]
 8013a1e:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8013a22:	60bb      	str	r3, [r7, #8]
 8013a24:	f8b7 31fe 	ldrh.w	r3, [r7, #510]	; 0x1fe
 8013a28:	607b      	str	r3, [r7, #4]
 8013a2a:	f8d7 4264 	ldr.w	r4, [r7, #612]	; 0x264
 8013a2e:	f8d7 0268 	ldr.w	r0, [r7, #616]	; 0x268
 8013a32:	f8d7 126c 	ldr.w	r1, [r7, #620]	; 0x26c
 8013a36:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8013a3a:	f107 0644 	add.w	r6, r7, #68	; 0x44
 8013a3e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013a42:	f5a3 750d 	sub.w	r5, r3, #564	; 0x234
 8013a46:	9214      	str	r2, [sp, #80]	; 0x50
 8013a48:	9113      	str	r1, [sp, #76]	; 0x4c
 8013a4a:	9012      	str	r0, [sp, #72]	; 0x48
 8013a4c:	9411      	str	r4, [sp, #68]	; 0x44
 8013a4e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013a52:	3302      	adds	r3, #2
 8013a54:	9310      	str	r3, [sp, #64]	; 0x40
 8013a56:	6879      	ldr	r1, [r7, #4]
 8013a58:	910f      	str	r1, [sp, #60]	; 0x3c
 8013a5a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8013a5e:	3384      	adds	r3, #132	; 0x84
 8013a60:	930e      	str	r3, [sp, #56]	; 0x38
 8013a62:	68b9      	ldr	r1, [r7, #8]
 8013a64:	910d      	str	r1, [sp, #52]	; 0x34
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	930c      	str	r3, [sp, #48]	; 0x30
 8013a6a:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8013a6e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013a72:	ed97 7b04 	vldr	d7, [r7, #16]
 8013a76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a7a:	ed97 7b06 	vldr	d7, [r7, #24]
 8013a7e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013a82:	ed97 7b08 	vldr	d7, [r7, #32]
 8013a86:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a8a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8013a8e:	ed8d 7b00 	vstr	d7, [sp]
 8013a92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8013a96:	4631      	mov	r1, r6
 8013a98:	6828      	ldr	r0, [r5, #0]
 8013a9a:	f019 feb7 	bl	802d80c <siprintf>
	*len = strlen(buf);
 8013a9e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013aa2:	f5a3 730d 	sub.w	r3, r3, #564	; 0x234
 8013aa6:	6818      	ldr	r0, [r3, #0]
 8013aa8:	f7fc fbfa 	bl	80102a0 <strlen>
 8013aac:	4603      	mov	r3, r0
 8013aae:	b29a      	uxth	r2, r3
 8013ab0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8013ab4:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	801a      	strh	r2, [r3, #0]

	return 0 ;
 8013abc:	2300      	movs	r3, #0
}
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f507 771d 	add.w	r7, r7, #628	; 0x274
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013aca:	bf00      	nop
 8013acc:	08032a94 	.word	0x08032a94
 8013ad0:	20000514 	.word	0x20000514
 8013ad4:	20000518 	.word	0x20000518
 8013ad8:	20000508 	.word	0x20000508
 8013adc:	20000510 	.word	0x20000510
 8013ae0:	2000051c 	.word	0x2000051c

08013ae4 <calculate_md5_file>:

int calculate_md5_file(char * base_path, char * filename, char * buffer, uint16_t * len){
 8013ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ae6:	b0db      	sub	sp, #364	; 0x16c
 8013ae8:	af0e      	add	r7, sp, #56	; 0x38
 8013aea:	6378      	str	r0, [r7, #52]	; 0x34
 8013aec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8013af0:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8013af4:	6001      	str	r1, [r0, #0]
 8013af6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8013afa:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8013afe:	600a      	str	r2, [r1, #0]
 8013b00:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8013b04:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8013b08:	6013      	str	r3, [r2, #0]
	unsigned char 			md5sum[17];
	mbedtls_md5_context 	md5_ctx;
	uint8_t 				read_buffer[TMP_BUF_FOR_MD5_CALC+1];
	uint32_t				offset = 0;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint16_t				readed_len;
	char 					path[64];

	mbedtls_md5_init(&md5_ctx);
 8013b10:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b14:	4618      	mov	r0, r3
 8013b16:	f017 fd73 	bl	802b600 <mbedtls_md5_init>
	mbedtls_md5_starts_ret(&md5_ctx);
 8013b1a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f017 fd8c 	bl	802b63c <mbedtls_md5_starts_ret>

	strcpy(path, base_path);
 8013b24:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013b28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f01a f98b 	bl	802de46 <strcpy>
	strncat(path, filename, 20);
 8013b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013b34:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8013b38:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013b3c:	2214      	movs	r2, #20
 8013b3e:	6819      	ldr	r1, [r3, #0]
 8013b40:	f019 ffe9 	bl	802db16 <strncat>

	for (;;){
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013b44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013b48:	2241      	movs	r2, #65	; 0x41
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	f019 ffad 	bl	802daac <memset>
		readed_len = spi_fs_read_file_offset(path, read_buffer, offset, TMP_BUF_FOR_MD5_CALC);
 8013b52:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013b56:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013b5a:	2340      	movs	r3, #64	; 0x40
 8013b5c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013b60:	f017 fa1c 	bl	802af9c <spi_fs_read_file_offset>
 8013b64:	4603      	mov	r3, r0
 8013b66:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
		if (readed_len < 0){
			mbedtls_md5_free(&md5_ctx);
			* len = 0;
			return -1;
		}else{
			if (readed_len == TMP_BUF_FOR_MD5_CALC){
 8013b6a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013b6e:	2b40      	cmp	r3, #64	; 0x40
 8013b70:	d110      	bne.n	8013b94 <calculate_md5_file+0xb0>
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013b72:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013b76:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013b7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f018 fc46 	bl	802c410 <mbedtls_md5_update_ret>
				offset += readed_len;
 8013b84:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8013b88:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8013b8c:	4413      	add	r3, r2
 8013b8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013b92:	e019      	b.n	8013bc8 <calculate_md5_file+0xe4>
			}else{
				mbedtls_md5_update_ret(&md5_ctx, &read_buffer, readed_len);
 8013b94:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8013b98:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8013b9c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f018 fc35 	bl	802c410 <mbedtls_md5_update_ret>
				mbedtls_md5_finish_ret(&md5_ctx, &md5sum);
 8013ba6:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8013baa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013bae:	4611      	mov	r1, r2
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f018 fca2 	bl	802c4fa <mbedtls_md5_finish_ret>
				mbedtls_md5_free(&md5_ctx);
 8013bb6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f017 fd2d 	bl	802b61a <mbedtls_md5_free>
				md5sum[16] = '\0';
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	f887 3128 	strb.w	r3, [r7, #296]	; 0x128
				break;
 8013bc6:	e002      	b.n	8013bce <calculate_md5_file+0xea>
			}
		}
		osThreadYield();
 8013bc8:	f00c fb98 	bl	80202fc <osThreadYield>
		memset(&read_buffer, 0, TMP_BUF_FOR_MD5_CALC+1);
 8013bcc:	e7ba      	b.n	8013b44 <calculate_md5_file+0x60>
	}
	sprintf((char *)buffer,"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X", md5sum[0], md5sum[1], md5sum[2], md5sum[3], md5sum[4], md5sum[5], md5sum[6], md5sum[7], md5sum[8], md5sum[9], md5sum[10], md5sum[11], md5sum[12], md5sum[13], md5sum[14], md5sum[15]);
 8013bce:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8013bd2:	469c      	mov	ip, r3
 8013bd4:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8013bd8:	469e      	mov	lr, r3
 8013bda:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8013bde:	461d      	mov	r5, r3
 8013be0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8013be4:	461e      	mov	r6, r3
 8013be6:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8013bea:	627b      	str	r3, [r7, #36]	; 0x24
 8013bec:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8013bf0:	623b      	str	r3, [r7, #32]
 8013bf2:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8013bf6:	61fb      	str	r3, [r7, #28]
 8013bf8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8013bfc:	61bb      	str	r3, [r7, #24]
 8013bfe:	f897 3120 	ldrb.w	r3, [r7, #288]	; 0x120
 8013c02:	617b      	str	r3, [r7, #20]
 8013c04:	f897 3121 	ldrb.w	r3, [r7, #289]	; 0x121
 8013c08:	613b      	str	r3, [r7, #16]
 8013c0a:	f897 3122 	ldrb.w	r3, [r7, #290]	; 0x122
 8013c0e:	60fb      	str	r3, [r7, #12]
 8013c10:	f897 3123 	ldrb.w	r3, [r7, #291]	; 0x123
 8013c14:	60bb      	str	r3, [r7, #8]
 8013c16:	f897 3124 	ldrb.w	r3, [r7, #292]	; 0x124
 8013c1a:	607b      	str	r3, [r7, #4]
 8013c1c:	f897 3125 	ldrb.w	r3, [r7, #293]	; 0x125
 8013c20:	461c      	mov	r4, r3
 8013c22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8013c26:	4619      	mov	r1, r3
 8013c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013c32:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 8013c36:	920d      	str	r2, [sp, #52]	; 0x34
 8013c38:	910c      	str	r1, [sp, #48]	; 0x30
 8013c3a:	940b      	str	r4, [sp, #44]	; 0x2c
 8013c3c:	687a      	ldr	r2, [r7, #4]
 8013c3e:	920a      	str	r2, [sp, #40]	; 0x28
 8013c40:	68ba      	ldr	r2, [r7, #8]
 8013c42:	9209      	str	r2, [sp, #36]	; 0x24
 8013c44:	68fa      	ldr	r2, [r7, #12]
 8013c46:	9208      	str	r2, [sp, #32]
 8013c48:	693a      	ldr	r2, [r7, #16]
 8013c4a:	9207      	str	r2, [sp, #28]
 8013c4c:	697a      	ldr	r2, [r7, #20]
 8013c4e:	9206      	str	r2, [sp, #24]
 8013c50:	69ba      	ldr	r2, [r7, #24]
 8013c52:	9205      	str	r2, [sp, #20]
 8013c54:	69fa      	ldr	r2, [r7, #28]
 8013c56:	9204      	str	r2, [sp, #16]
 8013c58:	6a3a      	ldr	r2, [r7, #32]
 8013c5a:	9203      	str	r2, [sp, #12]
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5e:	9302      	str	r3, [sp, #8]
 8013c60:	9601      	str	r6, [sp, #4]
 8013c62:	9500      	str	r5, [sp, #0]
 8013c64:	4673      	mov	r3, lr
 8013c66:	4662      	mov	r2, ip
 8013c68:	4908      	ldr	r1, [pc, #32]	; (8013c8c <calculate_md5_file+0x1a8>)
 8013c6a:	6800      	ldr	r0, [r0, #0]
 8013c6c:	f019 fdce 	bl	802d80c <siprintf>
	//strncpy(buffer, md5sum, 17);
	* len = 32;
 8013c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8013c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	2220      	movs	r2, #32
 8013c7c:	801a      	strh	r2, [r3, #0]
	return 0;
 8013c7e:	2300      	movs	r3, #0
}
 8013c80:	4618      	mov	r0, r3
 8013c82:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	08032bc4 	.word	0x08032bc4

08013c90 <activate_firmware>:

int activate_firmware(char * buf, uint16_t * len){
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b092      	sub	sp, #72	; 0x48
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
 8013c98:	6039      	str	r1, [r7, #0]

	char old_path[60];
	int err;

	strcpy(old_path, FIRMWARE_FS_DIR);
 8013c9a:	f107 0308 	add.w	r3, r7, #8
 8013c9e:	4a18      	ldr	r2, [pc, #96]	; (8013d00 <activate_firmware+0x70>)
 8013ca0:	ca07      	ldmia	r2, {r0, r1, r2}
 8013ca2:	c303      	stmia	r3!, {r0, r1}
 8013ca4:	801a      	strh	r2, [r3, #0]
	strncat(old_path, "file.bin" , 20);
 8013ca6:	f107 0308 	add.w	r3, r7, #8
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7fc faf8 	bl	80102a0 <strlen>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	461a      	mov	r2, r3
 8013cb4:	f107 0308 	add.w	r3, r7, #8
 8013cb8:	4413      	add	r3, r2
 8013cba:	4912      	ldr	r1, [pc, #72]	; (8013d04 <activate_firmware+0x74>)
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	460b      	mov	r3, r1
 8013cc0:	cb03      	ldmia	r3!, {r0, r1}
 8013cc2:	6010      	str	r0, [r2, #0]
 8013cc4:	6051      	str	r1, [r2, #4]
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	7213      	strb	r3, [r2, #8]

	err = spi_fs_mv((const char *)old_path, FIRMWARE_FILE);
 8013cca:	f107 0308 	add.w	r3, r7, #8
 8013cce:	490e      	ldr	r1, [pc, #56]	; (8013d08 <activate_firmware+0x78>)
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f017 fb5d 	bl	802b390 <spi_fs_mv>
 8013cd6:	6478      	str	r0, [r7, #68]	; 0x44

	if(err >= 0){
 8013cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	db0a      	blt.n	8013cf4 <activate_firmware+0x64>
		strcpy(buf, "OK");
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	4a0a      	ldr	r2, [pc, #40]	; (8013d0c <activate_firmware+0x7c>)
 8013ce2:	8811      	ldrh	r1, [r2, #0]
 8013ce4:	7892      	ldrb	r2, [r2, #2]
 8013ce6:	8019      	strh	r1, [r3, #0]
 8013ce8:	709a      	strb	r2, [r3, #2]
		* len = 2;
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	2202      	movs	r2, #2
 8013cee:	801a      	strh	r2, [r3, #0]
		return 1;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	e000      	b.n	8013cf6 <activate_firmware+0x66>
	}

 	return 0;
 8013cf4:	2300      	movs	r3, #0
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3748      	adds	r7, #72	; 0x48
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
 8013cfe:	bf00      	nop
 8013d00:	08032c08 	.word	0x08032c08
 8013d04:	08032c14 	.word	0x08032c14
 8013d08:	08032c20 	.word	0x08032c20
 8013d0c:	08032c30 	.word	0x08032c30

08013d10 <http_post_cgi_processor>:

uint8_t http_post_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len){
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b086      	sub	sp, #24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]

	uint8_t ret = HTTP_FAILED;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	75fb      	strb	r3, [r7, #23]
	len = 0;
 8013d22:	2300      	movs	r3, #0
 8013d24:	603b      	str	r3, [r7, #0]

	if(strcmp((const char *)uri_name, "settings_mqtt.cgi") == 0){
 8013d26:	4937      	ldr	r1, [pc, #220]	; (8013e04 <http_post_cgi_processor+0xf4>)
 8013d28:	68f8      	ldr	r0, [r7, #12]
 8013d2a:	f7fc fa59 	bl	80101e0 <strcmp>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d106      	bne.n	8013d42 <http_post_cgi_processor+0x32>
		param_from_http_to_Q((char *)uri, MQTT);
 8013d34:	2100      	movs	r1, #0
 8013d36:	68b8      	ldr	r0, [r7, #8]
 8013d38:	f7ff f992 	bl	8013060 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	75fb      	strb	r3, [r7, #23]
 8013d40:	e05a      	b.n	8013df8 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "mb_tcp_settings.cgi") == 0){
 8013d42:	4931      	ldr	r1, [pc, #196]	; (8013e08 <http_post_cgi_processor+0xf8>)
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	f7fc fa4b 	bl	80101e0 <strcmp>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d106      	bne.n	8013d5e <http_post_cgi_processor+0x4e>
		param_from_http_to_Q((char *)uri, ModBusTCP);
 8013d50:	2102      	movs	r1, #2
 8013d52:	68b8      	ldr	r0, [r7, #8]
 8013d54:	f7ff f984 	bl	8013060 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013d58:	2301      	movs	r3, #1
 8013d5a:	75fb      	strb	r3, [r7, #23]
 8013d5c:	e04c      	b.n	8013df8 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "file_upload.cgi") == 0){
 8013d5e:	492b      	ldr	r1, [pc, #172]	; (8013e0c <http_post_cgi_processor+0xfc>)
 8013d60:	68f8      	ldr	r0, [r7, #12]
 8013d62:	f7fc fa3d 	bl	80101e0 <strcmp>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d10e      	bne.n	8013d8a <http_post_cgi_processor+0x7a>
		if (write_to_file((char *)uri, len, (char *) buf, HTTP_FS_DIR) < 0 ){
 8013d6c:	4b28      	ldr	r3, [pc, #160]	; (8013e10 <http_post_cgi_processor+0x100>)
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	6839      	ldr	r1, [r7, #0]
 8013d72:	68b8      	ldr	r0, [r7, #8]
 8013d74:	f7ff fc26 	bl	80135c4 <write_to_file>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	da02      	bge.n	8013d84 <http_post_cgi_processor+0x74>
			ret = HTTP_FAILED;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	75fb      	strb	r3, [r7, #23]
 8013d82:	e039      	b.n	8013df8 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013d84:	2301      	movs	r3, #1
 8013d86:	75fb      	strb	r3, [r7, #23]
 8013d88:	e036      	b.n	8013df8 <http_post_cgi_processor+0xe8>
		}
	}else if (strcmp((const char *)uri_name, "web_mkdir.cgi") == 0){
 8013d8a:	4922      	ldr	r1, [pc, #136]	; (8013e14 <http_post_cgi_processor+0x104>)
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7fc fa27 	bl	80101e0 <strcmp>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d10c      	bne.n	8013db2 <http_post_cgi_processor+0xa2>
		if( web_mkdir((char *)uri, HTTP_FS_DIR) >= 0){
 8013d98:	491d      	ldr	r1, [pc, #116]	; (8013e10 <http_post_cgi_processor+0x100>)
 8013d9a:	68b8      	ldr	r0, [r7, #8]
 8013d9c:	f7ff fd9a 	bl	80138d4 <web_mkdir>
 8013da0:	4603      	mov	r3, r0
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	db02      	blt.n	8013dac <http_post_cgi_processor+0x9c>
			ret = HTTP_OK;
 8013da6:	2301      	movs	r3, #1
 8013da8:	75fb      	strb	r3, [r7, #23]
 8013daa:	e025      	b.n	8013df8 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_RESET;
 8013dac:	2302      	movs	r3, #2
 8013dae:	75fb      	strb	r3, [r7, #23]
 8013db0:	e022      	b.n	8013df8 <http_post_cgi_processor+0xe8>
		}

	}else if (strcmp((const char *)uri_name, "settings_resistance.cgi") == 0){
 8013db2:	4919      	ldr	r1, [pc, #100]	; (8013e18 <http_post_cgi_processor+0x108>)
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	f7fc fa13 	bl	80101e0 <strcmp>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d106      	bne.n	8013dce <http_post_cgi_processor+0xbe>
		param_from_http_to_Q((char *)uri, PowrSensSett);
 8013dc0:	2104      	movs	r1, #4
 8013dc2:	68b8      	ldr	r0, [r7, #8]
 8013dc4:	f7ff f94c 	bl	8013060 <param_from_http_to_Q>
		ret = HTTP_OK;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	75fb      	strb	r3, [r7, #23]
 8013dcc:	e014      	b.n	8013df8 <http_post_cgi_processor+0xe8>
	}else if (strcmp((const char *)uri_name, "firmware_upload.cgi") == 0){
 8013dce:	4913      	ldr	r1, [pc, #76]	; (8013e1c <http_post_cgi_processor+0x10c>)
 8013dd0:	68f8      	ldr	r0, [r7, #12]
 8013dd2:	f7fc fa05 	bl	80101e0 <strcmp>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d10d      	bne.n	8013df8 <http_post_cgi_processor+0xe8>
		if (write_to_file((char *)uri, len, (char *) buf, FIRMWARE_FS_DIR) < 0 ){
 8013ddc:	4b10      	ldr	r3, [pc, #64]	; (8013e20 <http_post_cgi_processor+0x110>)
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	6839      	ldr	r1, [r7, #0]
 8013de2:	68b8      	ldr	r0, [r7, #8]
 8013de4:	f7ff fbee 	bl	80135c4 <write_to_file>
 8013de8:	4603      	mov	r3, r0
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	da02      	bge.n	8013df4 <http_post_cgi_processor+0xe4>
			ret = HTTP_FAILED;
 8013dee:	2300      	movs	r3, #0
 8013df0:	75fb      	strb	r3, [r7, #23]
 8013df2:	e001      	b.n	8013df8 <http_post_cgi_processor+0xe8>
		}else{
			ret = HTTP_OK;
 8013df4:	2301      	movs	r3, #1
 8013df6:	75fb      	strb	r3, [r7, #23]
		}
	}

	return ret;
 8013df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	3718      	adds	r7, #24
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	08032c34 	.word	0x08032c34
 8013e08:	08032c48 	.word	0x08032c48
 8013e0c:	08032c5c 	.word	0x08032c5c
 8013e10:	08032c6c 	.word	0x08032c6c
 8013e14:	08032c74 	.word	0x08032c74
 8013e18:	08032c84 	.word	0x08032c84
 8013e1c:	08032c9c 	.word	0x08032c9c
 8013e20:	08032c08 	.word	0x08032c08

08013e24 <http_get_cgi_processor>:

uint8_t http_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len){
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b086      	sub	sp, #24
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	60f8      	str	r0, [r7, #12]
 8013e2c:	60b9      	str	r1, [r7, #8]
 8013e2e:	607a      	str	r2, [r7, #4]

	uint8_t ret = HTTP_FAILED;
 8013e30:	2300      	movs	r3, #0
 8013e32:	75fb      	strb	r3, [r7, #23]

	if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0){
 8013e34:	494f      	ldr	r1, [pc, #316]	; (8013f74 <http_get_cgi_processor+0x150>)
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	f7fc f9d2 	bl	80101e0 <strcmp>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d107      	bne.n	8013e52 <http_get_cgi_processor+0x2e>
		param_from_Q_to_JSON((char *)buf, MQTT, len);
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	2100      	movs	r1, #0
 8013e46:	68b8      	ldr	r0, [r7, #8]
 8013e48:	f7ff fab0 	bl	80133ac <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	75fb      	strb	r3, [r7, #23]
 8013e50:	e08b      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "test.cgi") == 0){
 8013e52:	4949      	ldr	r1, [pc, #292]	; (8013f78 <http_get_cgi_processor+0x154>)
 8013e54:	68f8      	ldr	r0, [r7, #12]
 8013e56:	f7fc f9c3 	bl	80101e0 <strcmp>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d10b      	bne.n	8013e78 <http_get_cgi_processor+0x54>
		strncpy((const char *)buf, "oK", strlen("oK"));
 8013e60:	68bb      	ldr	r3, [r7, #8]
 8013e62:	4946      	ldr	r1, [pc, #280]	; (8013f7c <http_get_cgi_processor+0x158>)
 8013e64:	461a      	mov	r2, r3
 8013e66:	460b      	mov	r3, r1
 8013e68:	881b      	ldrh	r3, [r3, #0]
 8013e6a:	8013      	strh	r3, [r2, #0]
		ret = HTTP_OK;
 8013e6c:	2301      	movs	r3, #1
 8013e6e:	75fb      	strb	r3, [r7, #23]
		*len = strlen("oK");
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2202      	movs	r2, #2
 8013e74:	801a      	strh	r2, [r3, #0]
 8013e76:	e078      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "power.cgi") == 0){
 8013e78:	4941      	ldr	r1, [pc, #260]	; (8013f80 <http_get_cgi_processor+0x15c>)
 8013e7a:	68f8      	ldr	r0, [r7, #12]
 8013e7c:	f7fc f9b0 	bl	80101e0 <strcmp>
 8013e80:	4603      	mov	r3, r0
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d107      	bne.n	8013e96 <http_get_cgi_processor+0x72>
		param_from_Q_to_JSON((char *)buf, PowrData, len);
 8013e86:	687a      	ldr	r2, [r7, #4]
 8013e88:	2103      	movs	r1, #3
 8013e8a:	68b8      	ldr	r0, [r7, #8]
 8013e8c:	f7ff fa8e 	bl	80133ac <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013e90:	2301      	movs	r3, #1
 8013e92:	75fb      	strb	r3, [r7, #23]
 8013e94:	e069      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_shunt_sett.cgi") == 0){
 8013e96:	493b      	ldr	r1, [pc, #236]	; (8013f84 <http_get_cgi_processor+0x160>)
 8013e98:	68f8      	ldr	r0, [r7, #12]
 8013e9a:	f7fc f9a1 	bl	80101e0 <strcmp>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d107      	bne.n	8013eb4 <http_get_cgi_processor+0x90>
		param_from_Q_to_JSON((char *)buf, PowrSensSett, len);
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	2104      	movs	r1, #4
 8013ea8:	68b8      	ldr	r0, [r7, #8]
 8013eaa:	f7ff fa7f 	bl	80133ac <param_from_Q_to_JSON>
		ret = HTTP_OK;
 8013eae:	2301      	movs	r3, #1
 8013eb0:	75fb      	strb	r3, [r7, #23]
 8013eb2:	e05a      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_all.cgi") == 0){
 8013eb4:	4934      	ldr	r1, [pc, #208]	; (8013f88 <http_get_cgi_processor+0x164>)
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f7fc f992 	bl	80101e0 <strcmp>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d106      	bne.n	8013ed0 <http_get_cgi_processor+0xac>
		read_all_parameters((char *)buf, len);
 8013ec2:	6879      	ldr	r1, [r7, #4]
 8013ec4:	68b8      	ldr	r0, [r7, #8]
 8013ec6:	f7ff fd33 	bl	8013930 <read_all_parameters>
		ret = HTTP_OK;
 8013eca:	2301      	movs	r3, #1
 8013ecc:	75fb      	strb	r3, [r7, #23]
 8013ece:	e04c      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "get_firmware_md5.cgi") == 0){
 8013ed0:	492e      	ldr	r1, [pc, #184]	; (8013f8c <http_get_cgi_processor+0x168>)
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f7fc f984 	bl	80101e0 <strcmp>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d111      	bne.n	8013f02 <http_get_cgi_processor+0xde>
		if (calculate_md5_file(FIRMWARE_FS_DIR, "file.bin", buf, len) == 0){
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	68ba      	ldr	r2, [r7, #8]
 8013ee2:	492b      	ldr	r1, [pc, #172]	; (8013f90 <http_get_cgi_processor+0x16c>)
 8013ee4:	482b      	ldr	r0, [pc, #172]	; (8013f94 <http_get_cgi_processor+0x170>)
 8013ee6:	f7ff fdfd 	bl	8013ae4 <calculate_md5_file>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d102      	bne.n	8013ef6 <http_get_cgi_processor+0xd2>
			ret = HTTP_OK;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	75fb      	strb	r3, [r7, #23]
 8013ef4:	e039      	b.n	8013f6a <http_get_cgi_processor+0x146>
		}else{
			* len = 0;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2200      	movs	r2, #0
 8013efa:	801a      	strh	r2, [r3, #0]
			ret = HTTP_FAILED;
 8013efc:	2300      	movs	r3, #0
 8013efe:	75fb      	strb	r3, [r7, #23]
 8013f00:	e033      	b.n	8013f6a <http_get_cgi_processor+0x146>
		}
	}else if(strcmp((const char *)uri_name, "activate_firmware.cgi") == 0){
 8013f02:	4925      	ldr	r1, [pc, #148]	; (8013f98 <http_get_cgi_processor+0x174>)
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f7fc f96b 	bl	80101e0 <strcmp>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d106      	bne.n	8013f1e <http_get_cgi_processor+0xfa>
		ret = activate_firmware((char *)buf, len);
 8013f10:	6879      	ldr	r1, [r7, #4]
 8013f12:	68b8      	ldr	r0, [r7, #8]
 8013f14:	f7ff febc 	bl	8013c90 <activate_firmware>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	75fb      	strb	r3, [r7, #23]
 8013f1c:	e025      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "erace_web_interface.cgi") == 0){
 8013f1e:	491f      	ldr	r1, [pc, #124]	; (8013f9c <http_get_cgi_processor+0x178>)
 8013f20:	68f8      	ldr	r0, [r7, #12]
 8013f22:	f7fc f95d 	bl	80101e0 <strcmp>
 8013f26:	4603      	mov	r3, r0
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d105      	bne.n	8013f38 <http_get_cgi_processor+0x114>
		spi_fs_remove_recurcuve_in("/web");
 8013f2c:	481c      	ldr	r0, [pc, #112]	; (8013fa0 <http_get_cgi_processor+0x17c>)
 8013f2e:	f017 fa0f 	bl	802b350 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013f32:	2301      	movs	r3, #1
 8013f34:	75fb      	strb	r3, [r7, #23]
 8013f36:	e018      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "reset_energy.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013f38:	491a      	ldr	r1, [pc, #104]	; (8013fa4 <http_get_cgi_processor+0x180>)
 8013f3a:	68f8      	ldr	r0, [r7, #12]
 8013f3c:	f7fc f950 	bl	80101e0 <strcmp>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d105      	bne.n	8013f52 <http_get_cgi_processor+0x12e>
		spi_fs_remove(KW_COUNT_STOR_FILE);
 8013f46:	4818      	ldr	r0, [pc, #96]	; (8013fa8 <http_get_cgi_processor+0x184>)
 8013f48:	f017 f93a 	bl	802b1c0 <spi_fs_remove>
		ret = HTTP_OK;
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	75fb      	strb	r3, [r7, #23]
 8013f50:	e00b      	b.n	8013f6a <http_get_cgi_processor+0x146>
	}else if(strcmp((const char *)uri_name, "format_flash.cgi") == 0){ ///---------------------------------------FOR DEBUG-------------------------------------
 8013f52:	4916      	ldr	r1, [pc, #88]	; (8013fac <http_get_cgi_processor+0x188>)
 8013f54:	68f8      	ldr	r0, [r7, #12]
 8013f56:	f7fc f943 	bl	80101e0 <strcmp>
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d104      	bne.n	8013f6a <http_get_cgi_processor+0x146>
		spi_fs_remove_recurcuve_in("/");
 8013f60:	4813      	ldr	r0, [pc, #76]	; (8013fb0 <http_get_cgi_processor+0x18c>)
 8013f62:	f017 f9f5 	bl	802b350 <spi_fs_remove_recurcuve_in>
		ret = HTTP_OK;
 8013f66:	2301      	movs	r3, #1
 8013f68:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8013f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3718      	adds	r7, #24
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	08032cb0 	.word	0x08032cb0
 8013f78:	08032cc4 	.word	0x08032cc4
 8013f7c:	08032cd0 	.word	0x08032cd0
 8013f80:	08032cd4 	.word	0x08032cd4
 8013f84:	08032ce0 	.word	0x08032ce0
 8013f88:	08032cf4 	.word	0x08032cf4
 8013f8c:	08032d00 	.word	0x08032d00
 8013f90:	08032c14 	.word	0x08032c14
 8013f94:	08032c08 	.word	0x08032c08
 8013f98:	08032d18 	.word	0x08032d18
 8013f9c:	08032d30 	.word	0x08032d30
 8013fa0:	08032d48 	.word	0x08032d48
 8013fa4:	08032d50 	.word	0x08032d50
 8013fa8:	08032d64 	.word	0x08032d64
 8013fac:	08032d78 	.word	0x08032d78
 8013fb0:	08032d8c 	.word	0x08032d8c

08013fb4 <func_prototype>:

//need optimaze
char		 			sub_topik_template[] = "biver_%s/+/set";
char					sub_topik[SUBSCR_TOPIK_BUF_LEN];

void func_prototype(void){};
 8013fb4:	b480      	push	{r7}
 8013fb6:	af00      	add	r7, sp, #0
 8013fb8:	bf00      	nop
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
	...

08013fc4 <init_mqtt_call_mutex>:
void (* set_mutex)(void) 		= &func_prototype;
void (* release_mutex)(void) 	= &func_prototype;
uint8_t (* read_coils)(void)	= &func_prototype;
void (* write_coils)(uint8_t)	= &func_prototype;

void init_mqtt_call_mutex(void (* set_mut), void (* rel_mut)){
 8013fc4:	b480      	push	{r7}
 8013fc6:	b083      	sub	sp, #12
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6039      	str	r1, [r7, #0]

	if(set_mut) set_mutex 		= set_mut;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d002      	beq.n	8013fda <init_mqtt_call_mutex+0x16>
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	4a07      	ldr	r2, [pc, #28]	; (8013ff4 <init_mqtt_call_mutex+0x30>)
 8013fd8:	6013      	str	r3, [r2, #0]
	if(rel_mut) release_mutex 	= rel_mut;
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d002      	beq.n	8013fe6 <init_mqtt_call_mutex+0x22>
 8013fe0:	683b      	ldr	r3, [r7, #0]
 8013fe2:	4a05      	ldr	r2, [pc, #20]	; (8013ff8 <init_mqtt_call_mutex+0x34>)
 8013fe4:	6013      	str	r3, [r2, #0]
}
 8013fe6:	bf00      	nop
 8013fe8:	370c      	adds	r7, #12
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	2000005c 	.word	0x2000005c
 8013ff8:	20000060 	.word	0x20000060

08013ffc <mqtt_client_init>:
}



int mqtt_client_init(Ethernet_info_struct* eth_data, MQTT_cred_struct * mqtt_data, char * send_buf, \
		uint16_t send_buf_suze, char * receive_buf, uint16_t receive_buf_len){
 8013ffc:	b5b0      	push	{r4, r5, r7, lr}
 8013ffe:	b088      	sub	sp, #32
 8014000:	af04      	add	r7, sp, #16
 8014002:	60f8      	str	r0, [r7, #12]
 8014004:	60b9      	str	r1, [r7, #8]
 8014006:	607a      	str	r2, [r7, #4]
 8014008:	807b      	strh	r3, [r7, #2]

	EthernetInfo 		= eth_data;
 801400a:	4a5e      	ldr	r2, [pc, #376]	; (8014184 <mqtt_client_init+0x188>)
 801400c:	68fb      	ldr	r3, [r7, #12]
 801400e:	6013      	str	r3, [r2, #0]
	MQTT_credentials	= mqtt_data;
 8014010:	4a5d      	ldr	r2, [pc, #372]	; (8014188 <mqtt_client_init+0x18c>)
 8014012:	68bb      	ldr	r3, [r7, #8]
 8014014:	6013      	str	r3, [r2, #0]
	mqtt_send_buf		= send_buf;
 8014016:	4a5d      	ldr	r2, [pc, #372]	; (801418c <mqtt_client_init+0x190>)
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6013      	str	r3, [r2, #0]
	mqtt_recv_buf		= receive_buf;
 801401c:	4a5c      	ldr	r2, [pc, #368]	; (8014190 <mqtt_client_init+0x194>)
 801401e:	6a3b      	ldr	r3, [r7, #32]
 8014020:	6013      	str	r3, [r2, #0]
	mqtt_send_buf_len	= send_buf_suze;
 8014022:	4a5c      	ldr	r2, [pc, #368]	; (8014194 <mqtt_client_init+0x198>)
 8014024:	887b      	ldrh	r3, [r7, #2]
 8014026:	8013      	strh	r3, [r2, #0]
	mqtt_recv_buf_len	= receive_buf_len;
 8014028:	4a5b      	ldr	r2, [pc, #364]	; (8014198 <mqtt_client_init+0x19c>)
 801402a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801402c:	8013      	strh	r3, [r2, #0]

	sprintf(MAC_ADDR_CHR,"%02X%02X%02X%02X%02X%02X", EthernetInfo->mac[0],EthernetInfo->mac[1],EthernetInfo->mac[2],EthernetInfo->mac[3],EthernetInfo->mac[4],EthernetInfo->mac[5]);
 801402e:	4b55      	ldr	r3, [pc, #340]	; (8014184 <mqtt_client_init+0x188>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	78db      	ldrb	r3, [r3, #3]
 8014034:	461c      	mov	r4, r3
 8014036:	4b53      	ldr	r3, [pc, #332]	; (8014184 <mqtt_client_init+0x188>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	791b      	ldrb	r3, [r3, #4]
 801403c:	461d      	mov	r5, r3
 801403e:	4b51      	ldr	r3, [pc, #324]	; (8014184 <mqtt_client_init+0x188>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	795b      	ldrb	r3, [r3, #5]
 8014044:	461a      	mov	r2, r3
 8014046:	4b4f      	ldr	r3, [pc, #316]	; (8014184 <mqtt_client_init+0x188>)
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	799b      	ldrb	r3, [r3, #6]
 801404c:	4619      	mov	r1, r3
 801404e:	4b4d      	ldr	r3, [pc, #308]	; (8014184 <mqtt_client_init+0x188>)
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	79db      	ldrb	r3, [r3, #7]
 8014054:	4618      	mov	r0, r3
 8014056:	4b4b      	ldr	r3, [pc, #300]	; (8014184 <mqtt_client_init+0x188>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	7a1b      	ldrb	r3, [r3, #8]
 801405c:	9303      	str	r3, [sp, #12]
 801405e:	9002      	str	r0, [sp, #8]
 8014060:	9101      	str	r1, [sp, #4]
 8014062:	9200      	str	r2, [sp, #0]
 8014064:	462b      	mov	r3, r5
 8014066:	4622      	mov	r2, r4
 8014068:	494c      	ldr	r1, [pc, #304]	; (801419c <mqtt_client_init+0x1a0>)
 801406a:	484d      	ldr	r0, [pc, #308]	; (80141a0 <mqtt_client_init+0x1a4>)
 801406c:	f019 fbce 	bl	802d80c <siprintf>
	set_device_id(&MAC_ADDR_CHR);
 8014070:	484b      	ldr	r0, [pc, #300]	; (80141a0 <mqtt_client_init+0x1a4>)
 8014072:	f000 fa91 	bl	8014598 <set_device_id>
	sprintf(IP_ADDR_CHR, "%u.%u.%u.%u", EthernetInfo->ip[0], EthernetInfo->ip[1], EthernetInfo->ip[2], EthernetInfo->ip[3]);
 8014076:	4b43      	ldr	r3, [pc, #268]	; (8014184 <mqtt_client_init+0x188>)
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	7a5b      	ldrb	r3, [r3, #9]
 801407c:	4619      	mov	r1, r3
 801407e:	4b41      	ldr	r3, [pc, #260]	; (8014184 <mqtt_client_init+0x188>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	7a9b      	ldrb	r3, [r3, #10]
 8014084:	4618      	mov	r0, r3
 8014086:	4b3f      	ldr	r3, [pc, #252]	; (8014184 <mqtt_client_init+0x188>)
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	7adb      	ldrb	r3, [r3, #11]
 801408c:	461a      	mov	r2, r3
 801408e:	4b3d      	ldr	r3, [pc, #244]	; (8014184 <mqtt_client_init+0x188>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	7b1b      	ldrb	r3, [r3, #12]
 8014094:	9301      	str	r3, [sp, #4]
 8014096:	9200      	str	r2, [sp, #0]
 8014098:	4603      	mov	r3, r0
 801409a:	460a      	mov	r2, r1
 801409c:	4941      	ldr	r1, [pc, #260]	; (80141a4 <mqtt_client_init+0x1a8>)
 801409e:	4842      	ldr	r0, [pc, #264]	; (80141a8 <mqtt_client_init+0x1ac>)
 80140a0:	f019 fbb4 	bl	802d80c <siprintf>
	set_device_conf_ip(&IP_ADDR_CHR);
 80140a4:	4840      	ldr	r0, [pc, #256]	; (80141a8 <mqtt_client_init+0x1ac>)
 80140a6:	f000 fa99 	bl	80145dc <set_device_conf_ip>

	//strncpy(mqtt_send_buf, MQTT_credentials->uri, MAX_DOMAIN_NAME);
	if ( isValidIPv4(MQTT_credentials->uri)){
 80140aa:	4b37      	ldr	r3, [pc, #220]	; (8014188 <mqtt_client_init+0x18c>)
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	3302      	adds	r3, #2
 80140b0:	4618      	mov	r0, r3
 80140b2:	f008 fda9 	bl	801cc08 <isValidIPv4>
 80140b6:	4603      	mov	r3, r0
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d00c      	beq.n	80140d6 <mqtt_client_init+0xda>
		sscanf(MQTT_credentials->uri, "%d.%d.%d.%d", &mqtt_server_ip[0], &mqtt_server_ip[1], &mqtt_server_ip[2], &mqtt_server_ip[3]);
 80140bc:	4b32      	ldr	r3, [pc, #200]	; (8014188 <mqtt_client_init+0x18c>)
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	1c98      	adds	r0, r3, #2
 80140c2:	4b3a      	ldr	r3, [pc, #232]	; (80141ac <mqtt_client_init+0x1b0>)
 80140c4:	9301      	str	r3, [sp, #4]
 80140c6:	4b3a      	ldr	r3, [pc, #232]	; (80141b0 <mqtt_client_init+0x1b4>)
 80140c8:	9300      	str	r3, [sp, #0]
 80140ca:	4b3a      	ldr	r3, [pc, #232]	; (80141b4 <mqtt_client_init+0x1b8>)
 80140cc:	4a3a      	ldr	r2, [pc, #232]	; (80141b8 <mqtt_client_init+0x1bc>)
 80140ce:	493b      	ldr	r1, [pc, #236]	; (80141bc <mqtt_client_init+0x1c0>)
 80140d0:	f019 fbbc 	bl	802d84c <siscanf>
 80140d4:	e00d      	b.n	80140f2 <mqtt_client_init+0xf6>
	}else if(dns_service_resolve_name(MQTT_credentials->uri, &mqtt_server_ip)== -1){
 80140d6:	4b2c      	ldr	r3, [pc, #176]	; (8014188 <mqtt_client_init+0x18c>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	3302      	adds	r3, #2
 80140dc:	4936      	ldr	r1, [pc, #216]	; (80141b8 <mqtt_client_init+0x1bc>)
 80140de:	4618      	mov	r0, r3
 80140e0:	f008 fd62 	bl	801cba8 <dns_service_resolve_name>
 80140e4:	4603      	mov	r3, r0
 80140e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ea:	d102      	bne.n	80140f2 <mqtt_client_init+0xf6>
		return -1; // DNS resolve error;
 80140ec:	f04f 33ff 	mov.w	r3, #4294967295
 80140f0:	e043      	b.n	801417a <mqtt_client_init+0x17e>
	}

	mqtt_packet_data.willFlag			= 0;
 80140f2:	4b33      	ldr	r3, [pc, #204]	; (80141c0 <mqtt_client_init+0x1c4>)
 80140f4:	2200      	movs	r2, #0
 80140f6:	76da      	strb	r2, [r3, #27]
	mqtt_packet_data.MQTTVersion		= 3;
 80140f8:	4b31      	ldr	r3, [pc, #196]	; (80141c0 <mqtt_client_init+0x1c4>)
 80140fa:	2203      	movs	r2, #3
 80140fc:	721a      	strb	r2, [r3, #8]
	mqtt_packet_data.clientID.cstring	= &MAC_ADDR_CHR;
 80140fe:	4b30      	ldr	r3, [pc, #192]	; (80141c0 <mqtt_client_init+0x1c4>)
 8014100:	4a27      	ldr	r2, [pc, #156]	; (80141a0 <mqtt_client_init+0x1a4>)
 8014102:	60da      	str	r2, [r3, #12]
	mqtt_packet_data.keepAliveInterval	= 5000;
 8014104:	4b2e      	ldr	r3, [pc, #184]	; (80141c0 <mqtt_client_init+0x1c4>)
 8014106:	f241 3288 	movw	r2, #5000	; 0x1388
 801410a:	831a      	strh	r2, [r3, #24]
	mqtt_packet_data.cleansession		= 1;
 801410c:	4b2c      	ldr	r3, [pc, #176]	; (80141c0 <mqtt_client_init+0x1c4>)
 801410e:	2201      	movs	r2, #1
 8014110:	769a      	strb	r2, [r3, #26]
	mqtt_packet_data.username.cstring 	= &MQTT_credentials->login;
 8014112:	4b1d      	ldr	r3, [pc, #116]	; (8014188 <mqtt_client_init+0x18c>)
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	3384      	adds	r3, #132	; 0x84
 8014118:	4a29      	ldr	r2, [pc, #164]	; (80141c0 <mqtt_client_init+0x1c4>)
 801411a:	6413      	str	r3, [r2, #64]	; 0x40
	mqtt_packet_data.password.cstring 	= &MQTT_credentials->pass;
 801411c:	4b1a      	ldr	r3, [pc, #104]	; (8014188 <mqtt_client_init+0x18c>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	33a5      	adds	r3, #165	; 0xa5
 8014122:	4a27      	ldr	r2, [pc, #156]	; (80141c0 <mqtt_client_init+0x1c4>)
 8014124:	64d3      	str	r3, [r2, #76]	; 0x4c
//	mqtt_server_ip						= MQTT_credentials->ip;
	mqtt_server_port					= (uint16_t) MQTT_credentials->port;
 8014126:	4b18      	ldr	r3, [pc, #96]	; (8014188 <mqtt_client_init+0x18c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	f8b3 2082 	ldrh.w	r2, [r3, #130]	; 0x82
 801412e:	4b25      	ldr	r3, [pc, #148]	; (80141c4 <mqtt_client_init+0x1c8>)
 8014130:	801a      	strh	r2, [r3, #0]

	mqtt_message.id						= 0;
 8014132:	4b25      	ldr	r3, [pc, #148]	; (80141c8 <mqtt_client_init+0x1cc>)
 8014134:	2200      	movs	r2, #0
 8014136:	809a      	strh	r2, [r3, #4]
	mqtt_message.qos					= QOS0;
 8014138:	4b23      	ldr	r3, [pc, #140]	; (80141c8 <mqtt_client_init+0x1cc>)
 801413a:	2200      	movs	r2, #0
 801413c:	701a      	strb	r2, [r3, #0]
	mqtt_message.dup					= 0;
 801413e:	4b22      	ldr	r3, [pc, #136]	; (80141c8 <mqtt_client_init+0x1cc>)
 8014140:	2200      	movs	r2, #0
 8014142:	709a      	strb	r2, [r3, #2]
	mqtt_message.retained				= 0;
 8014144:	4b20      	ldr	r3, [pc, #128]	; (80141c8 <mqtt_client_init+0x1cc>)
 8014146:	2200      	movs	r2, #0
 8014148:	705a      	strb	r2, [r3, #1]

	NewNetwork(&MQTT_network, MQTT_CLIENT_SOCKET);
 801414a:	2105      	movs	r1, #5
 801414c:	481f      	ldr	r0, [pc, #124]	; (80141cc <mqtt_client_init+0x1d0>)
 801414e:	f009 fb41 	bl	801d7d4 <NewNetwork>
	MQTTClientInit(&MQTT_Client, &MQTT_network, COMMAND_TIMEOUT_MS, mqtt_send_buf, mqtt_send_buf_len, mqtt_recv_buf, mqtt_recv_buf_len);
 8014152:	4b0e      	ldr	r3, [pc, #56]	; (801418c <mqtt_client_init+0x190>)
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	4b0f      	ldr	r3, [pc, #60]	; (8014194 <mqtt_client_init+0x198>)
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	4618      	mov	r0, r3
 801415c:	4b0c      	ldr	r3, [pc, #48]	; (8014190 <mqtt_client_init+0x194>)
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	490d      	ldr	r1, [pc, #52]	; (8014198 <mqtt_client_init+0x19c>)
 8014162:	8809      	ldrh	r1, [r1, #0]
 8014164:	9102      	str	r1, [sp, #8]
 8014166:	9301      	str	r3, [sp, #4]
 8014168:	9000      	str	r0, [sp, #0]
 801416a:	4613      	mov	r3, r2
 801416c:	f242 7210 	movw	r2, #10000	; 0x2710
 8014170:	4916      	ldr	r1, [pc, #88]	; (80141cc <mqtt_client_init+0x1d0>)
 8014172:	4817      	ldr	r0, [pc, #92]	; (80141d0 <mqtt_client_init+0x1d4>)
 8014174:	f008 fe32 	bl	801cddc <MQTTClientInit>

	return 0;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bdb0      	pop	{r4, r5, r7, pc}
 8014182:	bf00      	nop
 8014184:	2000052c 	.word	0x2000052c
 8014188:	20000528 	.word	0x20000528
 801418c:	20000558 	.word	0x20000558
 8014190:	20000554 	.word	0x20000554
 8014194:	20000836 	.word	0x20000836
 8014198:	20000834 	.word	0x20000834
 801419c:	08032d90 	.word	0x08032d90
 80141a0:	20000530 	.word	0x20000530
 80141a4:	08032dac 	.word	0x08032dac
 80141a8:	20000540 	.word	0x20000540
 80141ac:	2000083b 	.word	0x2000083b
 80141b0:	2000083a 	.word	0x2000083a
 80141b4:	20000839 	.word	0x20000839
 80141b8:	20000838 	.word	0x20000838
 80141bc:	08032db8 	.word	0x08032db8
 80141c0:	20000004 	.word	0x20000004
 80141c4:	2000083c 	.word	0x2000083c
 80141c8:	200008ac 	.word	0x200008ac
 80141cc:	20000840 	.word	0x20000840
 80141d0:	20000850 	.word	0x20000850

080141d4 <mqtt_client_connect>:


int16_t mqtt_client_connect(void){
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0

	int16_t result;

	set_mutex();
 80141da:	4b1f      	ldr	r3, [pc, #124]	; (8014258 <mqtt_client_connect+0x84>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	4798      	blx	r3
	result = ConnectNetwork(&MQTT_network, mqtt_server_ip, mqtt_server_port);
 80141e0:	4b1e      	ldr	r3, [pc, #120]	; (801425c <mqtt_client_connect+0x88>)
 80141e2:	881b      	ldrh	r3, [r3, #0]
 80141e4:	461a      	mov	r2, r3
 80141e6:	491e      	ldr	r1, [pc, #120]	; (8014260 <mqtt_client_connect+0x8c>)
 80141e8:	481e      	ldr	r0, [pc, #120]	; (8014264 <mqtt_client_connect+0x90>)
 80141ea:	f009 fb70 	bl	801d8ce <ConnectNetwork>
 80141ee:	4603      	mov	r3, r0
 80141f0:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 80141f2:	4b1d      	ldr	r3, [pc, #116]	; (8014268 <mqtt_client_connect+0x94>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	4798      	blx	r3
	if (result != 1) {
 80141f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80141fc:	2b01      	cmp	r3, #1
 80141fe:	d010      	beq.n	8014222 <mqtt_client_connect+0x4e>
		set_mutex();
 8014200:	4b15      	ldr	r3, [pc, #84]	; (8014258 <mqtt_client_connect+0x84>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	4798      	blx	r3
		//disconnect(MQTT_network.my_socket);
		close(MQTT_network.my_socket);
 8014206:	4b17      	ldr	r3, [pc, #92]	; (8014264 <mqtt_client_connect+0x90>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	b2db      	uxtb	r3, r3
 801420c:	4618      	mov	r0, r3
 801420e:	f004 ff4b 	bl	80190a8 <close>
		release_mutex();
 8014212:	4b15      	ldr	r3, [pc, #84]	; (8014268 <mqtt_client_connect+0x94>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	4798      	blx	r3
		return result - 10;    // 1 means SOCK_OK;
 8014218:	88fb      	ldrh	r3, [r7, #6]
 801421a:	3b0a      	subs	r3, #10
 801421c:	b29b      	uxth	r3, r3
 801421e:	b21b      	sxth	r3, r3
 8014220:	e016      	b.n	8014250 <mqtt_client_connect+0x7c>
	}
	set_mutex();
 8014222:	4b0d      	ldr	r3, [pc, #52]	; (8014258 <mqtt_client_connect+0x84>)
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	4798      	blx	r3
	result = MQTTConnect(&MQTT_Client, &mqtt_packet_data);
 8014228:	4910      	ldr	r1, [pc, #64]	; (801426c <mqtt_client_connect+0x98>)
 801422a:	4811      	ldr	r0, [pc, #68]	; (8014270 <mqtt_client_connect+0x9c>)
 801422c:	f009 f8e6 	bl	801d3fc <MQTTConnect>
 8014230:	4603      	mov	r3, r0
 8014232:	80fb      	strh	r3, [r7, #6]
	release_mutex();
 8014234:	4b0c      	ldr	r3, [pc, #48]	; (8014268 <mqtt_client_connect+0x94>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	4798      	blx	r3
	if (result != SUCCESSS) return result - 20;
 801423a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d004      	beq.n	801424c <mqtt_client_connect+0x78>
 8014242:	88fb      	ldrh	r3, [r7, #6]
 8014244:	3b14      	subs	r3, #20
 8014246:	b29b      	uxth	r3, r3
 8014248:	b21b      	sxth	r3, r3
 801424a:	e001      	b.n	8014250 <mqtt_client_connect+0x7c>
	return result; // if returned value < 0 then means error
 801424c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8014250:	4618      	mov	r0, r3
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}
 8014258:	2000005c 	.word	0x2000005c
 801425c:	2000083c 	.word	0x2000083c
 8014260:	20000838 	.word	0x20000838
 8014264:	20000840 	.word	0x20000840
 8014268:	20000060 	.word	0x20000060
 801426c:	20000004 	.word	0x20000004
 8014270:	20000850 	.word	0x20000850

08014274 <mqtt_client_reg_dev_on_home_assist>:

int8_t mqtt_client_reg_dev_on_home_assist(void){
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0

	uint8_t i;
	int8_t result;
//------------------------------REG ENERGY SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801427a:	2280      	movs	r2, #128	; 0x80
 801427c:	2100      	movs	r1, #0
 801427e:	48a0      	ldr	r0, [pc, #640]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014280:	f019 fc14 	bl	802daac <memset>
		get_config_topik_string(buf_topik, ENERGY_SENSOR_TOPIK, 0);
 8014284:	2200      	movs	r2, #0
 8014286:	2103      	movs	r1, #3
 8014288:	489d      	ldr	r0, [pc, #628]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801428a:	f000 f9c7 	bl	801461c <get_config_topik_string>
		get_config_payload_string(buf_payload, ENERGY_SENSOR_PAYLOAD, 0);
 801428e:	2200      	movs	r2, #0
 8014290:	2103      	movs	r1, #3
 8014292:	489c      	ldr	r0, [pc, #624]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014294:	f000 fa74 	bl	8014780 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014298:	489a      	ldr	r0, [pc, #616]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801429a:	f7fc f801 	bl	80102a0 <strlen>
 801429e:	4603      	mov	r3, r0
 80142a0:	4a99      	ldr	r2, [pc, #612]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142a2:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80142a4:	4b98      	ldr	r3, [pc, #608]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142a6:	4a97      	ldr	r2, [pc, #604]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142a8:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80142aa:	4b97      	ldr	r3, [pc, #604]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142ac:	2201      	movs	r2, #1
 80142ae:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80142b0:	4b96      	ldr	r3, [pc, #600]	; (801450c <mqtt_client_reg_dev_on_home_assist+0x298>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80142b6:	4a94      	ldr	r2, [pc, #592]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142b8:	4991      	ldr	r1, [pc, #580]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142ba:	4895      	ldr	r0, [pc, #596]	; (8014510 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80142bc:	f009 f924 	bl	801d508 <MQTTPublish>
 80142c0:	4603      	mov	r3, r0
 80142c2:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80142c4:	4b93      	ldr	r3, [pc, #588]	; (8014514 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80142ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d002      	beq.n	80142d8 <mqtt_client_reg_dev_on_home_assist+0x64>
 80142d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80142d6:	e10f      	b.n	80144f8 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80142d8:	4b8b      	ldr	r3, [pc, #556]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142da:	889b      	ldrh	r3, [r3, #4]
 80142dc:	3301      	adds	r3, #1
 80142de:	b29a      	uxth	r2, r3
 80142e0:	4b89      	ldr	r3, [pc, #548]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80142e2:	809a      	strh	r2, [r3, #4]
//------------------------------REG ENERGY SENSOR-------------------------------
//------------------------------REG VOLTAGE SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80142e4:	2280      	movs	r2, #128	; 0x80
 80142e6:	2100      	movs	r1, #0
 80142e8:	4885      	ldr	r0, [pc, #532]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142ea:	f019 fbdf 	bl	802daac <memset>
		get_config_topik_string(buf_topik, VOLTAGE_SENSOR_TOPIK, 0);
 80142ee:	2200      	movs	r2, #0
 80142f0:	2105      	movs	r1, #5
 80142f2:	4883      	ldr	r0, [pc, #524]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80142f4:	f000 f992 	bl	801461c <get_config_topik_string>
		get_config_payload_string(buf_payload, VOLTAGE_SENSOR_PAYLOAD, 0);
 80142f8:	2200      	movs	r2, #0
 80142fa:	2105      	movs	r1, #5
 80142fc:	4881      	ldr	r0, [pc, #516]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80142fe:	f000 fa3f 	bl	8014780 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014302:	4880      	ldr	r0, [pc, #512]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014304:	f7fb ffcc 	bl	80102a0 <strlen>
 8014308:	4603      	mov	r3, r0
 801430a:	4a7f      	ldr	r2, [pc, #508]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801430c:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 801430e:	4b7e      	ldr	r3, [pc, #504]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014310:	4a7c      	ldr	r2, [pc, #496]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014312:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014314:	4b7c      	ldr	r3, [pc, #496]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014316:	2201      	movs	r2, #1
 8014318:	705a      	strb	r2, [r3, #1]
		set_mutex();
 801431a:	4b7c      	ldr	r3, [pc, #496]	; (801450c <mqtt_client_reg_dev_on_home_assist+0x298>)
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 8014320:	4a79      	ldr	r2, [pc, #484]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014322:	4977      	ldr	r1, [pc, #476]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014324:	487a      	ldr	r0, [pc, #488]	; (8014510 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014326:	f009 f8ef 	bl	801d508 <MQTTPublish>
 801432a:	4603      	mov	r3, r0
 801432c:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801432e:	4b79      	ldr	r3, [pc, #484]	; (8014514 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d002      	beq.n	8014342 <mqtt_client_reg_dev_on_home_assist+0xce>
 801433c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014340:	e0da      	b.n	80144f8 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014342:	4b71      	ldr	r3, [pc, #452]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014344:	889b      	ldrh	r3, [r3, #4]
 8014346:	3301      	adds	r3, #1
 8014348:	b29a      	uxth	r2, r3
 801434a:	4b6f      	ldr	r3, [pc, #444]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801434c:	809a      	strh	r2, [r3, #4]
//------------------------------REG VOLTAGE SENSOR-------------------------------
//------------------------------REG POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801434e:	2280      	movs	r2, #128	; 0x80
 8014350:	2100      	movs	r1, #0
 8014352:	486b      	ldr	r0, [pc, #428]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014354:	f019 fbaa 	bl	802daac <memset>
		get_config_topik_string(buf_topik, POWER_SENSOR_TOPIK, 0);
 8014358:	2200      	movs	r2, #0
 801435a:	2104      	movs	r1, #4
 801435c:	4868      	ldr	r0, [pc, #416]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801435e:	f000 f95d 	bl	801461c <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_SENSOR_PAYLOAD, 0);
 8014362:	2200      	movs	r2, #0
 8014364:	2104      	movs	r1, #4
 8014366:	4867      	ldr	r0, [pc, #412]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014368:	f000 fa0a 	bl	8014780 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 801436c:	4865      	ldr	r0, [pc, #404]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801436e:	f7fb ff97 	bl	80102a0 <strlen>
 8014372:	4603      	mov	r3, r0
 8014374:	4a64      	ldr	r2, [pc, #400]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014376:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 8014378:	4b63      	ldr	r3, [pc, #396]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801437a:	4a62      	ldr	r2, [pc, #392]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801437c:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 801437e:	4b62      	ldr	r3, [pc, #392]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014380:	2201      	movs	r2, #1
 8014382:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014384:	4b61      	ldr	r3, [pc, #388]	; (801450c <mqtt_client_reg_dev_on_home_assist+0x298>)
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801438a:	4a5f      	ldr	r2, [pc, #380]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801438c:	495c      	ldr	r1, [pc, #368]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801438e:	4860      	ldr	r0, [pc, #384]	; (8014510 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014390:	f009 f8ba 	bl	801d508 <MQTTPublish>
 8014394:	4603      	mov	r3, r0
 8014396:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014398:	4b5e      	ldr	r3, [pc, #376]	; (8014514 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 801439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d002      	beq.n	80143ac <mqtt_client_reg_dev_on_home_assist+0x138>
 80143a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80143aa:	e0a5      	b.n	80144f8 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80143ac:	4b56      	ldr	r3, [pc, #344]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143ae:	889b      	ldrh	r3, [r3, #4]
 80143b0:	3301      	adds	r3, #1
 80143b2:	b29a      	uxth	r2, r3
 80143b4:	4b54      	ldr	r3, [pc, #336]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143b6:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER SENSOR-------------------------------
//------------------------------REG APPARENT POWER SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 80143b8:	2280      	movs	r2, #128	; 0x80
 80143ba:	2100      	movs	r1, #0
 80143bc:	4850      	ldr	r0, [pc, #320]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143be:	f019 fb75 	bl	802daac <memset>
		get_config_topik_string(buf_topik, APPARENT_POWER_SENSOR_TOPIK, 0);
 80143c2:	2200      	movs	r2, #0
 80143c4:	2108      	movs	r1, #8
 80143c6:	484e      	ldr	r0, [pc, #312]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143c8:	f000 f928 	bl	801461c <get_config_topik_string>
		get_config_payload_string(buf_payload, APPARENT_POWER_SENSOR_PAYLOAD, 0);
 80143cc:	2200      	movs	r2, #0
 80143ce:	2108      	movs	r1, #8
 80143d0:	484c      	ldr	r0, [pc, #304]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143d2:	f000 f9d5 	bl	8014780 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80143d6:	484b      	ldr	r0, [pc, #300]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143d8:	f7fb ff62 	bl	80102a0 <strlen>
 80143dc:	4603      	mov	r3, r0
 80143de:	4a4a      	ldr	r2, [pc, #296]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143e0:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80143e2:	4b49      	ldr	r3, [pc, #292]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143e4:	4a47      	ldr	r2, [pc, #284]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80143e6:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80143e8:	4b47      	ldr	r3, [pc, #284]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143ea:	2201      	movs	r2, #1
 80143ec:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80143ee:	4b47      	ldr	r3, [pc, #284]	; (801450c <mqtt_client_reg_dev_on_home_assist+0x298>)
 80143f0:	681b      	ldr	r3, [r3, #0]
 80143f2:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80143f4:	4a44      	ldr	r2, [pc, #272]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80143f6:	4942      	ldr	r1, [pc, #264]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80143f8:	4845      	ldr	r0, [pc, #276]	; (8014510 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80143fa:	f009 f885 	bl	801d508 <MQTTPublish>
 80143fe:	4603      	mov	r3, r0
 8014400:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 8014402:	4b44      	ldr	r3, [pc, #272]	; (8014514 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d002      	beq.n	8014416 <mqtt_client_reg_dev_on_home_assist+0x1a2>
 8014410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014414:	e070      	b.n	80144f8 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014416:	4b3c      	ldr	r3, [pc, #240]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014418:	889b      	ldrh	r3, [r3, #4]
 801441a:	3301      	adds	r3, #1
 801441c:	b29a      	uxth	r2, r3
 801441e:	4b3a      	ldr	r3, [pc, #232]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014420:	809a      	strh	r2, [r3, #4]


//------------------------------REG APPARENT POWER SENSOR-------------------------------
//------------------------------REG POWER FACTOR SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 8014422:	2280      	movs	r2, #128	; 0x80
 8014424:	2100      	movs	r1, #0
 8014426:	4836      	ldr	r0, [pc, #216]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014428:	f019 fb40 	bl	802daac <memset>
		get_config_topik_string(buf_topik, POWER_FACTOR_SENSOR_TOPIK, 0);
 801442c:	2200      	movs	r2, #0
 801442e:	2106      	movs	r1, #6
 8014430:	4833      	ldr	r0, [pc, #204]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014432:	f000 f8f3 	bl	801461c <get_config_topik_string>
		get_config_payload_string(buf_payload, POWER_FACTOR_SENSOR_PAYLOAD, 0);
 8014436:	2200      	movs	r2, #0
 8014438:	2106      	movs	r1, #6
 801443a:	4832      	ldr	r0, [pc, #200]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 801443c:	f000 f9a0 	bl	8014780 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 8014440:	4830      	ldr	r0, [pc, #192]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014442:	f7fb ff2d 	bl	80102a0 <strlen>
 8014446:	4603      	mov	r3, r0
 8014448:	4a2f      	ldr	r2, [pc, #188]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801444a:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 801444c:	4b2e      	ldr	r3, [pc, #184]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801444e:	4a2d      	ldr	r2, [pc, #180]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 8014450:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 8014452:	4b2d      	ldr	r3, [pc, #180]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014454:	2201      	movs	r2, #1
 8014456:	705a      	strb	r2, [r3, #1]
		set_mutex();
 8014458:	4b2c      	ldr	r3, [pc, #176]	; (801450c <mqtt_client_reg_dev_on_home_assist+0x298>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 801445e:	4a2a      	ldr	r2, [pc, #168]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014460:	4927      	ldr	r1, [pc, #156]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014462:	482b      	ldr	r0, [pc, #172]	; (8014510 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 8014464:	f009 f850 	bl	801d508 <MQTTPublish>
 8014468:	4603      	mov	r3, r0
 801446a:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 801446c:	4b29      	ldr	r3, [pc, #164]	; (8014514 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 8014472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d002      	beq.n	8014480 <mqtt_client_reg_dev_on_home_assist+0x20c>
 801447a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801447e:	e03b      	b.n	80144f8 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 8014480:	4b21      	ldr	r3, [pc, #132]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 8014482:	889b      	ldrh	r3, [r3, #4]
 8014484:	3301      	adds	r3, #1
 8014486:	b29a      	uxth	r2, r3
 8014488:	4b1f      	ldr	r3, [pc, #124]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 801448a:	809a      	strh	r2, [r3, #4]

//------------------------------REG POWER FACTOR SENSOR-------------------------------
//------------------------------REG CURRENT SENSOR-------------------------------
		memset(buf_topik, 0, TOPIK_MAX_LEN);
 801448c:	2280      	movs	r2, #128	; 0x80
 801448e:	2100      	movs	r1, #0
 8014490:	481b      	ldr	r0, [pc, #108]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 8014492:	f019 fb0b 	bl	802daac <memset>
		get_config_topik_string(buf_topik, CURRENT_SENSOR_TOPIK, 0);
 8014496:	2200      	movs	r2, #0
 8014498:	2107      	movs	r1, #7
 801449a:	4819      	ldr	r0, [pc, #100]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 801449c:	f000 f8be 	bl	801461c <get_config_topik_string>
		get_config_payload_string(buf_payload, CURRENT_SENSOR_PAYLOAD, 0);
 80144a0:	2200      	movs	r2, #0
 80144a2:	2107      	movs	r1, #7
 80144a4:	4817      	ldr	r0, [pc, #92]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144a6:	f000 f96b 	bl	8014780 <get_config_payload_string>
		mqtt_message.payloadlen	= strlen(buf_payload);
 80144aa:	4816      	ldr	r0, [pc, #88]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144ac:	f7fb fef8 	bl	80102a0 <strlen>
 80144b0:	4603      	mov	r3, r0
 80144b2:	4a15      	ldr	r2, [pc, #84]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144b4:	60d3      	str	r3, [r2, #12]
		mqtt_message.payload	= buf_payload;
 80144b6:	4b14      	ldr	r3, [pc, #80]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144b8:	4a12      	ldr	r2, [pc, #72]	; (8014504 <mqtt_client_reg_dev_on_home_assist+0x290>)
 80144ba:	609a      	str	r2, [r3, #8]
		mqtt_message.retained	= 1;
 80144bc:	4b12      	ldr	r3, [pc, #72]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144be:	2201      	movs	r2, #1
 80144c0:	705a      	strb	r2, [r3, #1]
		set_mutex();
 80144c2:	4b12      	ldr	r3, [pc, #72]	; (801450c <mqtt_client_reg_dev_on_home_assist+0x298>)
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	4798      	blx	r3
		result = MQTTPublish(&MQTT_Client, &buf_topik , &mqtt_message);
 80144c8:	4a0f      	ldr	r2, [pc, #60]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144ca:	490d      	ldr	r1, [pc, #52]	; (8014500 <mqtt_client_reg_dev_on_home_assist+0x28c>)
 80144cc:	4810      	ldr	r0, [pc, #64]	; (8014510 <mqtt_client_reg_dev_on_home_assist+0x29c>)
 80144ce:	f009 f81b 	bl	801d508 <MQTTPublish>
 80144d2:	4603      	mov	r3, r0
 80144d4:	71fb      	strb	r3, [r7, #7]
		release_mutex();
 80144d6:	4b0f      	ldr	r3, [pc, #60]	; (8014514 <mqtt_client_reg_dev_on_home_assist+0x2a0>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	4798      	blx	r3
		if (result != SUCCESSS) return result;
 80144dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d002      	beq.n	80144ea <mqtt_client_reg_dev_on_home_assist+0x276>
 80144e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80144e8:	e006      	b.n	80144f8 <mqtt_client_reg_dev_on_home_assist+0x284>
		mqtt_message.id++;
 80144ea:	4b07      	ldr	r3, [pc, #28]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144ec:	889b      	ldrh	r3, [r3, #4]
 80144ee:	3301      	adds	r3, #1
 80144f0:	b29a      	uxth	r2, r3
 80144f2:	4b05      	ldr	r3, [pc, #20]	; (8014508 <mqtt_client_reg_dev_on_home_assist+0x294>)
 80144f4:	809a      	strh	r2, [r3, #4]

//------------------------------REG CURRENT SENSOR-------------------------------
		return 0;
 80144f6:	2300      	movs	r3, #0
		if (result != SUCCESSS) return result;
		mqtt_message.id++;
	}
	return result;// if all Ok, return SUCCESSS. SUCCESSS = 0;
	*/
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	2000055c 	.word	0x2000055c
 8014504:	200005dc 	.word	0x200005dc
 8014508:	200008ac 	.word	0x200008ac
 801450c:	2000005c 	.word	0x2000005c
 8014510:	20000850 	.word	0x20000850
 8014514:	20000060 	.word	0x20000060

08014518 <send_data_to_topik>:
	result = MQTTSubscribe(&MQTT_Client, sub_topik, QOS1, mqtt_message_resieve);
	release_mutex();
	return result;  // if all Ok, return SUCCESSS. SUCCESSS = 0;
}

int8_t send_data_to_topik(const char* topik, char* payload){
 8014518:	b580      	push	{r7, lr}
 801451a:	b084      	sub	sp, #16
 801451c:	af00      	add	r7, sp, #0
 801451e:	6078      	str	r0, [r7, #4]
 8014520:	6039      	str	r1, [r7, #0]
	int8_t result;

	mqtt_message.payloadlen = strlen(payload);
 8014522:	6838      	ldr	r0, [r7, #0]
 8014524:	f7fb febc 	bl	80102a0 <strlen>
 8014528:	4603      	mov	r3, r0
 801452a:	4a0f      	ldr	r2, [pc, #60]	; (8014568 <send_data_to_topik+0x50>)
 801452c:	60d3      	str	r3, [r2, #12]
	mqtt_message.payload	= payload;
 801452e:	4a0e      	ldr	r2, [pc, #56]	; (8014568 <send_data_to_topik+0x50>)
 8014530:	683b      	ldr	r3, [r7, #0]
 8014532:	6093      	str	r3, [r2, #8]
	mqtt_message.id++;
 8014534:	4b0c      	ldr	r3, [pc, #48]	; (8014568 <send_data_to_topik+0x50>)
 8014536:	889b      	ldrh	r3, [r3, #4]
 8014538:	3301      	adds	r3, #1
 801453a:	b29a      	uxth	r2, r3
 801453c:	4b0a      	ldr	r3, [pc, #40]	; (8014568 <send_data_to_topik+0x50>)
 801453e:	809a      	strh	r2, [r3, #4]
	set_mutex();
 8014540:	4b0a      	ldr	r3, [pc, #40]	; (801456c <send_data_to_topik+0x54>)
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4798      	blx	r3
	result = MQTTPublish(&MQTT_Client, topik , &mqtt_message);
 8014546:	4a08      	ldr	r2, [pc, #32]	; (8014568 <send_data_to_topik+0x50>)
 8014548:	6879      	ldr	r1, [r7, #4]
 801454a:	4809      	ldr	r0, [pc, #36]	; (8014570 <send_data_to_topik+0x58>)
 801454c:	f008 ffdc 	bl	801d508 <MQTTPublish>
 8014550:	4603      	mov	r3, r0
 8014552:	73fb      	strb	r3, [r7, #15]
	release_mutex();
 8014554:	4b07      	ldr	r3, [pc, #28]	; (8014574 <send_data_to_topik+0x5c>)
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4798      	blx	r3
	return result; // if all Ok, return SUCCESSS. SUCCESSS = 0;
 801455a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801455e:	4618      	mov	r0, r3
 8014560:	3710      	adds	r7, #16
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}
 8014566:	bf00      	nop
 8014568:	200008ac 	.word	0x200008ac
 801456c:	2000005c 	.word	0x2000005c
 8014570:	20000850 	.word	0x20000850
 8014574:	20000060 	.word	0x20000060

08014578 <mqtt_1ms_tik>:
	release_mutex();

	return result;
}

void mqtt_1ms_tik(void){
 8014578:	b580      	push	{r7, lr}
 801457a:	af00      	add	r7, sp, #0
	MilliTimer_Handler();
 801457c:	f009 f8b6 	bl	801d6ec <MilliTimer_Handler>
}
 8014580:	bf00      	nop
 8014582:	bd80      	pop	{r7, pc}

08014584 <mqtt_disconnect>:
		//xQueueOverwrite(coil_q_write, (void *)&CoilStatus_new);
		write_coils(CoilStatus_new);
	}
}

void mqtt_disconnect(void){
 8014584:	b580      	push	{r7, lr}
 8014586:	af00      	add	r7, sp, #0

	MQTTDisconnect(&MQTT_Client);
 8014588:	4802      	ldr	r0, [pc, #8]	; (8014594 <mqtt_disconnect+0x10>)
 801458a:	f009 f87c 	bl	801d686 <MQTTDisconnect>

}
 801458e:	bf00      	nop
 8014590:	bd80      	pop	{r7, pc}
 8014592:	bf00      	nop
 8014594:	20000850 	.word	0x20000850

08014598 <set_device_id>:
char switch_status_topik_temp[] = {"%s_%s/switches"	};

unsigned char unical_id[DEV_UID_LEN] = {'\0'};
unsigned char dev_conf_ip[IP_v4_LEN] = {'\0'};

int set_device_id(unsigned char * dev_id){
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
	uint8_t cpy_len = 0;
 80145a0:	2300      	movs	r3, #0
 80145a2:	73fb      	strb	r3, [r7, #15]
	if (strlen(dev_id) >= DEV_UID_LEN ){
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f7fb fe7b 	bl	80102a0 <strlen>
 80145aa:	4603      	mov	r3, r0
 80145ac:	2b0d      	cmp	r3, #13
 80145ae:	d902      	bls.n	80145b6 <set_device_id+0x1e>
		cpy_len = DEV_UID_LEN;
 80145b0:	230e      	movs	r3, #14
 80145b2:	73fb      	strb	r3, [r7, #15]
 80145b4:	e004      	b.n	80145c0 <set_device_id+0x28>
	}else{
		cpy_len = strlen(dev_id);
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f7fb fe72 	bl	80102a0 <strlen>
 80145bc:	4603      	mov	r3, r0
 80145be:	73fb      	strb	r3, [r7, #15]
	}
	strncpy(unical_id, dev_id, cpy_len);
 80145c0:	7bfb      	ldrb	r3, [r7, #15]
 80145c2:	461a      	mov	r2, r3
 80145c4:	6879      	ldr	r1, [r7, #4]
 80145c6:	4804      	ldr	r0, [pc, #16]	; (80145d8 <set_device_id+0x40>)
 80145c8:	f019 faca 	bl	802db60 <strncpy>
	return 0;
 80145cc:	2300      	movs	r3, #0
}
 80145ce:	4618      	mov	r0, r3
 80145d0:	3710      	adds	r7, #16
 80145d2:	46bd      	mov	sp, r7
 80145d4:	bd80      	pop	{r7, pc}
 80145d6:	bf00      	nop
 80145d8:	200008bc 	.word	0x200008bc

080145dc <set_device_conf_ip>:

int set_device_conf_ip(unsigned char * chr_ip){
 80145dc:	b580      	push	{r7, lr}
 80145de:	b082      	sub	sp, #8
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]

	strcpy(dev_conf_ip, "\0");
 80145e4:	4b0c      	ldr	r3, [pc, #48]	; (8014618 <set_device_conf_ip+0x3c>)
 80145e6:	2200      	movs	r2, #0
 80145e8:	701a      	strb	r2, [r3, #0]
	if(strlen(chr_ip) <= IP_v4_LEN){
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f7fb fe58 	bl	80102a0 <strlen>
 80145f0:	4603      	mov	r3, r0
 80145f2:	2b12      	cmp	r3, #18
 80145f4:	d80a      	bhi.n	801460c <set_device_conf_ip+0x30>
		strncpy(dev_conf_ip, chr_ip, strlen(chr_ip));
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f7fb fe52 	bl	80102a0 <strlen>
 80145fc:	4603      	mov	r3, r0
 80145fe:	461a      	mov	r2, r3
 8014600:	6879      	ldr	r1, [r7, #4]
 8014602:	4805      	ldr	r0, [pc, #20]	; (8014618 <set_device_conf_ip+0x3c>)
 8014604:	f019 faac 	bl	802db60 <strncpy>
		return 0;
 8014608:	2300      	movs	r3, #0
 801460a:	e001      	b.n	8014610 <set_device_conf_ip+0x34>
	}
	return -1;
 801460c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014610:	4618      	mov	r0, r3
 8014612:	3708      	adds	r7, #8
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	200008cc 	.word	0x200008cc

0801461c <get_config_topik_string>:
 	strncpy(home_assistant_prefix, prefix_string, prefix_len);

	return 0;
}

int get_config_topik_string (char * buff, uint8_t topik_type, uint8_t obj_number){
 801461c:	b580      	push	{r7, lr}
 801461e:	b086      	sub	sp, #24
 8014620:	af04      	add	r7, sp, #16
 8014622:	6078      	str	r0, [r7, #4]
 8014624:	460b      	mov	r3, r1
 8014626:	70fb      	strb	r3, [r7, #3]
 8014628:	4613      	mov	r3, r2
 801462a:	70bb      	strb	r3, [r7, #2]

	strcpy(buff, '\0');
 801462c:	2100      	movs	r1, #0
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f019 fc09 	bl	802de46 <strcpy>
	switch (topik_type) {
 8014634:	78fb      	ldrb	r3, [r7, #3]
 8014636:	3b01      	subs	r3, #1
 8014638:	2b07      	cmp	r3, #7
 801463a:	d87b      	bhi.n	8014734 <get_config_topik_string+0x118>
 801463c:	a201      	add	r2, pc, #4	; (adr r2, 8014644 <get_config_topik_string+0x28>)
 801463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014642:	bf00      	nop
 8014644:	08014665 	.word	0x08014665
 8014648:	0801467f 	.word	0x0801467f
 801464c:	08014699 	.word	0x08014699
 8014650:	080146cd 	.word	0x080146cd
 8014654:	080146b3 	.word	0x080146b3
 8014658:	08014701 	.word	0x08014701
 801465c:	0801471b 	.word	0x0801471b
 8014660:	080146e7 	.word	0x080146e7
		case INPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, bin_sens, unical_id, input, obj_number);
 8014664:	78bb      	ldrb	r3, [r7, #2]
 8014666:	9302      	str	r3, [sp, #8]
 8014668:	4b36      	ldr	r3, [pc, #216]	; (8014744 <get_config_topik_string+0x128>)
 801466a:	9301      	str	r3, [sp, #4]
 801466c:	4b36      	ldr	r3, [pc, #216]	; (8014748 <get_config_topik_string+0x12c>)
 801466e:	9300      	str	r3, [sp, #0]
 8014670:	4b36      	ldr	r3, [pc, #216]	; (801474c <get_config_topik_string+0x130>)
 8014672:	4a37      	ldr	r2, [pc, #220]	; (8014750 <get_config_topik_string+0x134>)
 8014674:	4937      	ldr	r1, [pc, #220]	; (8014754 <get_config_topik_string+0x138>)
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f019 f8c8 	bl	802d80c <siprintf>
			break;
 801467c:	e05d      	b.n	801473a <get_config_topik_string+0x11e>

		case OUTPUT_TOPIK:
			sprintf(buff, config_topik_temlate, home_assistant_prefix, switch_sens, unical_id, switch_sens, obj_number);
 801467e:	78bb      	ldrb	r3, [r7, #2]
 8014680:	9302      	str	r3, [sp, #8]
 8014682:	4b35      	ldr	r3, [pc, #212]	; (8014758 <get_config_topik_string+0x13c>)
 8014684:	9301      	str	r3, [sp, #4]
 8014686:	4b30      	ldr	r3, [pc, #192]	; (8014748 <get_config_topik_string+0x12c>)
 8014688:	9300      	str	r3, [sp, #0]
 801468a:	4b33      	ldr	r3, [pc, #204]	; (8014758 <get_config_topik_string+0x13c>)
 801468c:	4a30      	ldr	r2, [pc, #192]	; (8014750 <get_config_topik_string+0x134>)
 801468e:	4931      	ldr	r1, [pc, #196]	; (8014754 <get_config_topik_string+0x138>)
 8014690:	6878      	ldr	r0, [r7, #4]
 8014692:	f019 f8bb 	bl	802d80c <siprintf>
			break;
 8014696:	e050      	b.n	801473a <get_config_topik_string+0x11e>

		case ENERGY_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_energy);
 8014698:	4b30      	ldr	r3, [pc, #192]	; (801475c <get_config_topik_string+0x140>)
 801469a:	9302      	str	r3, [sp, #8]
 801469c:	4b2a      	ldr	r3, [pc, #168]	; (8014748 <get_config_topik_string+0x12c>)
 801469e:	9301      	str	r3, [sp, #4]
 80146a0:	4b2f      	ldr	r3, [pc, #188]	; (8014760 <get_config_topik_string+0x144>)
 80146a2:	9300      	str	r3, [sp, #0]
 80146a4:	4b2f      	ldr	r3, [pc, #188]	; (8014764 <get_config_topik_string+0x148>)
 80146a6:	4a2a      	ldr	r2, [pc, #168]	; (8014750 <get_config_topik_string+0x134>)
 80146a8:	492f      	ldr	r1, [pc, #188]	; (8014768 <get_config_topik_string+0x14c>)
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f019 f8ae 	bl	802d80c <siprintf>
			break;
 80146b0:	e043      	b.n	801473a <get_config_topik_string+0x11e>
		case VOLTAGE_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_voltage);
 80146b2:	4b2e      	ldr	r3, [pc, #184]	; (801476c <get_config_topik_string+0x150>)
 80146b4:	9302      	str	r3, [sp, #8]
 80146b6:	4b24      	ldr	r3, [pc, #144]	; (8014748 <get_config_topik_string+0x12c>)
 80146b8:	9301      	str	r3, [sp, #4]
 80146ba:	4b29      	ldr	r3, [pc, #164]	; (8014760 <get_config_topik_string+0x144>)
 80146bc:	9300      	str	r3, [sp, #0]
 80146be:	4b29      	ldr	r3, [pc, #164]	; (8014764 <get_config_topik_string+0x148>)
 80146c0:	4a23      	ldr	r2, [pc, #140]	; (8014750 <get_config_topik_string+0x134>)
 80146c2:	4929      	ldr	r1, [pc, #164]	; (8014768 <get_config_topik_string+0x14c>)
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f019 f8a1 	bl	802d80c <siprintf>
			break;
 80146ca:	e036      	b.n	801473a <get_config_topik_string+0x11e>
		case POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power);
 80146cc:	4b28      	ldr	r3, [pc, #160]	; (8014770 <get_config_topik_string+0x154>)
 80146ce:	9302      	str	r3, [sp, #8]
 80146d0:	4b1d      	ldr	r3, [pc, #116]	; (8014748 <get_config_topik_string+0x12c>)
 80146d2:	9301      	str	r3, [sp, #4]
 80146d4:	4b22      	ldr	r3, [pc, #136]	; (8014760 <get_config_topik_string+0x144>)
 80146d6:	9300      	str	r3, [sp, #0]
 80146d8:	4b22      	ldr	r3, [pc, #136]	; (8014764 <get_config_topik_string+0x148>)
 80146da:	4a1d      	ldr	r2, [pc, #116]	; (8014750 <get_config_topik_string+0x134>)
 80146dc:	4922      	ldr	r1, [pc, #136]	; (8014768 <get_config_topik_string+0x14c>)
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f019 f894 	bl	802d80c <siprintf>
			break;
 80146e4:	e029      	b.n	801473a <get_config_topik_string+0x11e>
		case APPARENT_POWER_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_apparent_power);
 80146e6:	4b23      	ldr	r3, [pc, #140]	; (8014774 <get_config_topik_string+0x158>)
 80146e8:	9302      	str	r3, [sp, #8]
 80146ea:	4b17      	ldr	r3, [pc, #92]	; (8014748 <get_config_topik_string+0x12c>)
 80146ec:	9301      	str	r3, [sp, #4]
 80146ee:	4b1c      	ldr	r3, [pc, #112]	; (8014760 <get_config_topik_string+0x144>)
 80146f0:	9300      	str	r3, [sp, #0]
 80146f2:	4b1c      	ldr	r3, [pc, #112]	; (8014764 <get_config_topik_string+0x148>)
 80146f4:	4a16      	ldr	r2, [pc, #88]	; (8014750 <get_config_topik_string+0x134>)
 80146f6:	491c      	ldr	r1, [pc, #112]	; (8014768 <get_config_topik_string+0x14c>)
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f019 f887 	bl	802d80c <siprintf>
			break;
 80146fe:	e01c      	b.n	801473a <get_config_topik_string+0x11e>
		case POWER_FACTOR_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_power_factor);
 8014700:	4b1d      	ldr	r3, [pc, #116]	; (8014778 <get_config_topik_string+0x15c>)
 8014702:	9302      	str	r3, [sp, #8]
 8014704:	4b10      	ldr	r3, [pc, #64]	; (8014748 <get_config_topik_string+0x12c>)
 8014706:	9301      	str	r3, [sp, #4]
 8014708:	4b15      	ldr	r3, [pc, #84]	; (8014760 <get_config_topik_string+0x144>)
 801470a:	9300      	str	r3, [sp, #0]
 801470c:	4b15      	ldr	r3, [pc, #84]	; (8014764 <get_config_topik_string+0x148>)
 801470e:	4a10      	ldr	r2, [pc, #64]	; (8014750 <get_config_topik_string+0x134>)
 8014710:	4915      	ldr	r1, [pc, #84]	; (8014768 <get_config_topik_string+0x14c>)
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f019 f87a 	bl	802d80c <siprintf>
			break;
 8014718:	e00f      	b.n	801473a <get_config_topik_string+0x11e>
		case CURRENT_SENSOR_TOPIK:
			sprintf(buff, universal_config_topik_template, home_assistant_prefix, component_sensor, dev_system, unical_id, dev_class_current);
 801471a:	4b18      	ldr	r3, [pc, #96]	; (801477c <get_config_topik_string+0x160>)
 801471c:	9302      	str	r3, [sp, #8]
 801471e:	4b0a      	ldr	r3, [pc, #40]	; (8014748 <get_config_topik_string+0x12c>)
 8014720:	9301      	str	r3, [sp, #4]
 8014722:	4b0f      	ldr	r3, [pc, #60]	; (8014760 <get_config_topik_string+0x144>)
 8014724:	9300      	str	r3, [sp, #0]
 8014726:	4b0f      	ldr	r3, [pc, #60]	; (8014764 <get_config_topik_string+0x148>)
 8014728:	4a09      	ldr	r2, [pc, #36]	; (8014750 <get_config_topik_string+0x134>)
 801472a:	490f      	ldr	r1, [pc, #60]	; (8014768 <get_config_topik_string+0x14c>)
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f019 f86d 	bl	802d80c <siprintf>
			break;
 8014732:	e002      	b.n	801473a <get_config_topik_string+0x11e>
		default:
			return -1;
 8014734:	f04f 33ff 	mov.w	r3, #4294967295
 8014738:	e000      	b.n	801473c <get_config_topik_string+0x120>
			break;
	}


	return 0;
 801473a:	2300      	movs	r3, #0
}
 801473c:	4618      	mov	r0, r3
 801473e:	3708      	adds	r7, #8
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	2000008c 	.word	0x2000008c
 8014748:	200008bc 	.word	0x200008bc
 801474c:	20000074 	.word	0x20000074
 8014750:	20000064 	.word	0x20000064
 8014754:	08034418 	.word	0x08034418
 8014758:	20000084 	.word	0x20000084
 801475c:	08032df4 	.word	0x08032df4
 8014760:	08032dfc 	.word	0x08032dfc
 8014764:	08032dd4 	.word	0x08032dd4
 8014768:	08032ddc 	.word	0x08032ddc
 801476c:	08032e04 	.word	0x08032e04
 8014770:	08032e0c 	.word	0x08032e0c
 8014774:	08032e14 	.word	0x08032e14
 8014778:	08032e24 	.word	0x08032e24
 801477c:	08032e34 	.word	0x08032e34

08014780 <get_config_payload_string>:

int get_config_payload_string( char * payload, uint8_t payload_type, uint8_t obj_number){
 8014780:	b590      	push	{r4, r7, lr}
 8014782:	b097      	sub	sp, #92	; 0x5c
 8014784:	af12      	add	r7, sp, #72	; 0x48
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	460b      	mov	r3, r1
 801478a:	70fb      	strb	r3, [r7, #3]
 801478c:	4613      	mov	r3, r2
 801478e:	70bb      	strb	r3, [r7, #2]

	uint8_t len = 0;
 8014790:	2300      	movs	r3, #0
 8014792:	73fb      	strb	r3, [r7, #15]
	strcpy(payload, "\0");
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2200      	movs	r2, #0
 8014798:	701a      	strb	r2, [r3, #0]

	switch (payload_type) {
 801479a:	78fb      	ldrb	r3, [r7, #3]
 801479c:	3b01      	subs	r3, #1
 801479e:	2b07      	cmp	r3, #7
 80147a0:	f200 8181 	bhi.w	8014aa6 <get_config_payload_string+0x326>
 80147a4:	a201      	add	r2, pc, #4	; (adr r2, 80147ac <get_config_payload_string+0x2c>)
 80147a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147aa:	bf00      	nop
 80147ac:	08014801 	.word	0x08014801
 80147b0:	080147cd 	.word	0x080147cd
 80147b4:	0801482f 	.word	0x0801482f
 80147b8:	080148db 	.word	0x080148db
 80147bc:	08014885 	.word	0x08014885
 80147c0:	08014987 	.word	0x08014987
 80147c4:	08014a51 	.word	0x08014a51
 80147c8:	08014931 	.word	0x08014931
		case OUT_CONF_PAYLOAD:
			len = sprintf(payload, switch_conf_payload_templ, unical_id, unical_id, obj_number, obj_number, obj_number, unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 80147cc:	78bb      	ldrb	r3, [r7, #2]
 80147ce:	78ba      	ldrb	r2, [r7, #2]
 80147d0:	78b9      	ldrb	r1, [r7, #2]
 80147d2:	78b8      	ldrb	r0, [r7, #2]
 80147d4:	4c81      	ldr	r4, [pc, #516]	; (80149dc <get_config_payload_string+0x25c>)
 80147d6:	9407      	str	r4, [sp, #28]
 80147d8:	4c81      	ldr	r4, [pc, #516]	; (80149e0 <get_config_payload_string+0x260>)
 80147da:	9406      	str	r4, [sp, #24]
 80147dc:	4c80      	ldr	r4, [pc, #512]	; (80149e0 <get_config_payload_string+0x260>)
 80147de:	9405      	str	r4, [sp, #20]
 80147e0:	9004      	str	r0, [sp, #16]
 80147e2:	487f      	ldr	r0, [pc, #508]	; (80149e0 <get_config_payload_string+0x260>)
 80147e4:	9003      	str	r0, [sp, #12]
 80147e6:	9102      	str	r1, [sp, #8]
 80147e8:	9201      	str	r2, [sp, #4]
 80147ea:	9300      	str	r3, [sp, #0]
 80147ec:	4b7c      	ldr	r3, [pc, #496]	; (80149e0 <get_config_payload_string+0x260>)
 80147ee:	4a7c      	ldr	r2, [pc, #496]	; (80149e0 <get_config_payload_string+0x260>)
 80147f0:	497c      	ldr	r1, [pc, #496]	; (80149e4 <get_config_payload_string+0x264>)
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f019 f80a 	bl	802d80c <siprintf>
 80147f8:	4603      	mov	r3, r0
 80147fa:	73fb      	strb	r3, [r7, #15]
			return len;
 80147fc:	7bfb      	ldrb	r3, [r7, #15]
 80147fe:	e155      	b.n	8014aac <get_config_payload_string+0x32c>
			break;

		case INP_CONF_PAYLOAD:
			len = sprintf(payload, input_conf_payload_templ, unical_id, obj_number, obj_number,  unical_id, obj_number, unical_id, unical_id, dev_conf_ip);
 8014800:	78b9      	ldrb	r1, [r7, #2]
 8014802:	78bb      	ldrb	r3, [r7, #2]
 8014804:	78ba      	ldrb	r2, [r7, #2]
 8014806:	4875      	ldr	r0, [pc, #468]	; (80149dc <get_config_payload_string+0x25c>)
 8014808:	9005      	str	r0, [sp, #20]
 801480a:	4875      	ldr	r0, [pc, #468]	; (80149e0 <get_config_payload_string+0x260>)
 801480c:	9004      	str	r0, [sp, #16]
 801480e:	4874      	ldr	r0, [pc, #464]	; (80149e0 <get_config_payload_string+0x260>)
 8014810:	9003      	str	r0, [sp, #12]
 8014812:	9202      	str	r2, [sp, #8]
 8014814:	4a72      	ldr	r2, [pc, #456]	; (80149e0 <get_config_payload_string+0x260>)
 8014816:	9201      	str	r2, [sp, #4]
 8014818:	9300      	str	r3, [sp, #0]
 801481a:	460b      	mov	r3, r1
 801481c:	4a70      	ldr	r2, [pc, #448]	; (80149e0 <get_config_payload_string+0x260>)
 801481e:	4972      	ldr	r1, [pc, #456]	; (80149e8 <get_config_payload_string+0x268>)
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f018 fff3 	bl	802d80c <siprintf>
 8014826:	4603      	mov	r3, r0
 8014828:	73fb      	strb	r3, [r7, #15]
			return len;
 801482a:	7bfb      	ldrb	r3, [r7, #15]
 801482c:	e13e      	b.n	8014aac <get_config_payload_string+0x32c>
			break;
		case ENERGY_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_energy, dev_system, \
 801482e:	4b6b      	ldr	r3, [pc, #428]	; (80149dc <get_config_payload_string+0x25c>)
 8014830:	9310      	str	r3, [sp, #64]	; 0x40
 8014832:	4b6e      	ldr	r3, [pc, #440]	; (80149ec <get_config_payload_string+0x26c>)
 8014834:	930f      	str	r3, [sp, #60]	; 0x3c
 8014836:	4b6e      	ldr	r3, [pc, #440]	; (80149f0 <get_config_payload_string+0x270>)
 8014838:	930e      	str	r3, [sp, #56]	; 0x38
 801483a:	4b6e      	ldr	r3, [pc, #440]	; (80149f4 <get_config_payload_string+0x274>)
 801483c:	930d      	str	r3, [sp, #52]	; 0x34
 801483e:	4b6e      	ldr	r3, [pc, #440]	; (80149f8 <get_config_payload_string+0x278>)
 8014840:	930c      	str	r3, [sp, #48]	; 0x30
 8014842:	4b6e      	ldr	r3, [pc, #440]	; (80149fc <get_config_payload_string+0x27c>)
 8014844:	930b      	str	r3, [sp, #44]	; 0x2c
 8014846:	4b66      	ldr	r3, [pc, #408]	; (80149e0 <get_config_payload_string+0x260>)
 8014848:	930a      	str	r3, [sp, #40]	; 0x28
 801484a:	4b6d      	ldr	r3, [pc, #436]	; (8014a00 <get_config_payload_string+0x280>)
 801484c:	9309      	str	r3, [sp, #36]	; 0x24
 801484e:	4b6d      	ldr	r3, [pc, #436]	; (8014a04 <get_config_payload_string+0x284>)
 8014850:	9308      	str	r3, [sp, #32]
 8014852:	4b6d      	ldr	r3, [pc, #436]	; (8014a08 <get_config_payload_string+0x288>)
 8014854:	9307      	str	r3, [sp, #28]
 8014856:	4b62      	ldr	r3, [pc, #392]	; (80149e0 <get_config_payload_string+0x260>)
 8014858:	9306      	str	r3, [sp, #24]
 801485a:	4b69      	ldr	r3, [pc, #420]	; (8014a00 <get_config_payload_string+0x280>)
 801485c:	9305      	str	r3, [sp, #20]
 801485e:	4b6b      	ldr	r3, [pc, #428]	; (8014a0c <get_config_payload_string+0x28c>)
 8014860:	9304      	str	r3, [sp, #16]
 8014862:	4b6b      	ldr	r3, [pc, #428]	; (8014a10 <get_config_payload_string+0x290>)
 8014864:	9303      	str	r3, [sp, #12]
 8014866:	4b68      	ldr	r3, [pc, #416]	; (8014a08 <get_config_payload_string+0x288>)
 8014868:	9302      	str	r3, [sp, #8]
 801486a:	4b6a      	ldr	r3, [pc, #424]	; (8014a14 <get_config_payload_string+0x294>)
 801486c:	9301      	str	r3, [sp, #4]
 801486e:	4b5c      	ldr	r3, [pc, #368]	; (80149e0 <get_config_payload_string+0x260>)
 8014870:	9300      	str	r3, [sp, #0]
 8014872:	4b63      	ldr	r3, [pc, #396]	; (8014a00 <get_config_payload_string+0x280>)
 8014874:	4a64      	ldr	r2, [pc, #400]	; (8014a08 <get_config_payload_string+0x288>)
 8014876:	4968      	ldr	r1, [pc, #416]	; (8014a18 <get_config_payload_string+0x298>)
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f018 ffc7 	bl	802d80c <siprintf>
 801487e:	4603      	mov	r3, r0
 8014880:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_energy, dev_class_energy_state, dev_class_energy_human, dev_system, unical_id, \
					dev_class_energy, dev_class_energy_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014882:	e113      	b.n	8014aac <get_config_payload_string+0x32c>
		case VOLTAGE_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_voltage, dev_system, \
 8014884:	4b55      	ldr	r3, [pc, #340]	; (80149dc <get_config_payload_string+0x25c>)
 8014886:	9310      	str	r3, [sp, #64]	; 0x40
 8014888:	4b58      	ldr	r3, [pc, #352]	; (80149ec <get_config_payload_string+0x26c>)
 801488a:	930f      	str	r3, [sp, #60]	; 0x3c
 801488c:	4b58      	ldr	r3, [pc, #352]	; (80149f0 <get_config_payload_string+0x270>)
 801488e:	930e      	str	r3, [sp, #56]	; 0x38
 8014890:	4b58      	ldr	r3, [pc, #352]	; (80149f4 <get_config_payload_string+0x274>)
 8014892:	930d      	str	r3, [sp, #52]	; 0x34
 8014894:	4b58      	ldr	r3, [pc, #352]	; (80149f8 <get_config_payload_string+0x278>)
 8014896:	930c      	str	r3, [sp, #48]	; 0x30
 8014898:	4b58      	ldr	r3, [pc, #352]	; (80149fc <get_config_payload_string+0x27c>)
 801489a:	930b      	str	r3, [sp, #44]	; 0x2c
 801489c:	4b50      	ldr	r3, [pc, #320]	; (80149e0 <get_config_payload_string+0x260>)
 801489e:	930a      	str	r3, [sp, #40]	; 0x28
 80148a0:	4b57      	ldr	r3, [pc, #348]	; (8014a00 <get_config_payload_string+0x280>)
 80148a2:	9309      	str	r3, [sp, #36]	; 0x24
 80148a4:	4b5d      	ldr	r3, [pc, #372]	; (8014a1c <get_config_payload_string+0x29c>)
 80148a6:	9308      	str	r3, [sp, #32]
 80148a8:	4b5d      	ldr	r3, [pc, #372]	; (8014a20 <get_config_payload_string+0x2a0>)
 80148aa:	9307      	str	r3, [sp, #28]
 80148ac:	4b4c      	ldr	r3, [pc, #304]	; (80149e0 <get_config_payload_string+0x260>)
 80148ae:	9306      	str	r3, [sp, #24]
 80148b0:	4b53      	ldr	r3, [pc, #332]	; (8014a00 <get_config_payload_string+0x280>)
 80148b2:	9305      	str	r3, [sp, #20]
 80148b4:	4b5b      	ldr	r3, [pc, #364]	; (8014a24 <get_config_payload_string+0x2a4>)
 80148b6:	9304      	str	r3, [sp, #16]
 80148b8:	4b5b      	ldr	r3, [pc, #364]	; (8014a28 <get_config_payload_string+0x2a8>)
 80148ba:	9303      	str	r3, [sp, #12]
 80148bc:	4b58      	ldr	r3, [pc, #352]	; (8014a20 <get_config_payload_string+0x2a0>)
 80148be:	9302      	str	r3, [sp, #8]
 80148c0:	4b54      	ldr	r3, [pc, #336]	; (8014a14 <get_config_payload_string+0x294>)
 80148c2:	9301      	str	r3, [sp, #4]
 80148c4:	4b46      	ldr	r3, [pc, #280]	; (80149e0 <get_config_payload_string+0x260>)
 80148c6:	9300      	str	r3, [sp, #0]
 80148c8:	4b4d      	ldr	r3, [pc, #308]	; (8014a00 <get_config_payload_string+0x280>)
 80148ca:	4a55      	ldr	r2, [pc, #340]	; (8014a20 <get_config_payload_string+0x2a0>)
 80148cc:	4952      	ldr	r1, [pc, #328]	; (8014a18 <get_config_payload_string+0x298>)
 80148ce:	6878      	ldr	r0, [r7, #4]
 80148d0:	f018 ff9c 	bl	802d80c <siprintf>
 80148d4:	4603      	mov	r3, r0
 80148d6:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_voltage, "\n", dev_class_voltage_human, dev_system, unical_id, \
					dev_class_voltage, dev_class_voltage_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80148d8:	e0e8      	b.n	8014aac <get_config_payload_string+0x32c>
		case POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power, dev_system, \
 80148da:	4b40      	ldr	r3, [pc, #256]	; (80149dc <get_config_payload_string+0x25c>)
 80148dc:	9310      	str	r3, [sp, #64]	; 0x40
 80148de:	4b43      	ldr	r3, [pc, #268]	; (80149ec <get_config_payload_string+0x26c>)
 80148e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80148e2:	4b43      	ldr	r3, [pc, #268]	; (80149f0 <get_config_payload_string+0x270>)
 80148e4:	930e      	str	r3, [sp, #56]	; 0x38
 80148e6:	4b43      	ldr	r3, [pc, #268]	; (80149f4 <get_config_payload_string+0x274>)
 80148e8:	930d      	str	r3, [sp, #52]	; 0x34
 80148ea:	4b43      	ldr	r3, [pc, #268]	; (80149f8 <get_config_payload_string+0x278>)
 80148ec:	930c      	str	r3, [sp, #48]	; 0x30
 80148ee:	4b43      	ldr	r3, [pc, #268]	; (80149fc <get_config_payload_string+0x27c>)
 80148f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80148f2:	4b3b      	ldr	r3, [pc, #236]	; (80149e0 <get_config_payload_string+0x260>)
 80148f4:	930a      	str	r3, [sp, #40]	; 0x28
 80148f6:	4b42      	ldr	r3, [pc, #264]	; (8014a00 <get_config_payload_string+0x280>)
 80148f8:	9309      	str	r3, [sp, #36]	; 0x24
 80148fa:	4b4c      	ldr	r3, [pc, #304]	; (8014a2c <get_config_payload_string+0x2ac>)
 80148fc:	9308      	str	r3, [sp, #32]
 80148fe:	4b4c      	ldr	r3, [pc, #304]	; (8014a30 <get_config_payload_string+0x2b0>)
 8014900:	9307      	str	r3, [sp, #28]
 8014902:	4b37      	ldr	r3, [pc, #220]	; (80149e0 <get_config_payload_string+0x260>)
 8014904:	9306      	str	r3, [sp, #24]
 8014906:	4b3e      	ldr	r3, [pc, #248]	; (8014a00 <get_config_payload_string+0x280>)
 8014908:	9305      	str	r3, [sp, #20]
 801490a:	4b4a      	ldr	r3, [pc, #296]	; (8014a34 <get_config_payload_string+0x2b4>)
 801490c:	9304      	str	r3, [sp, #16]
 801490e:	4b46      	ldr	r3, [pc, #280]	; (8014a28 <get_config_payload_string+0x2a8>)
 8014910:	9303      	str	r3, [sp, #12]
 8014912:	4b47      	ldr	r3, [pc, #284]	; (8014a30 <get_config_payload_string+0x2b0>)
 8014914:	9302      	str	r3, [sp, #8]
 8014916:	4b3f      	ldr	r3, [pc, #252]	; (8014a14 <get_config_payload_string+0x294>)
 8014918:	9301      	str	r3, [sp, #4]
 801491a:	4b31      	ldr	r3, [pc, #196]	; (80149e0 <get_config_payload_string+0x260>)
 801491c:	9300      	str	r3, [sp, #0]
 801491e:	4b38      	ldr	r3, [pc, #224]	; (8014a00 <get_config_payload_string+0x280>)
 8014920:	4a43      	ldr	r2, [pc, #268]	; (8014a30 <get_config_payload_string+0x2b0>)
 8014922:	493d      	ldr	r1, [pc, #244]	; (8014a18 <get_config_payload_string+0x298>)
 8014924:	6878      	ldr	r0, [r7, #4]
 8014926:	f018 ff71 	bl	802d80c <siprintf>
 801492a:	4603      	mov	r3, r0
 801492c:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power, "\n", dev_class_power_human, dev_system, unical_id, \
					dev_class_power, dev_class_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 801492e:	e0bd      	b.n	8014aac <get_config_payload_string+0x32c>
		case APPARENT_POWER_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_apparent_power, dev_system, \
 8014930:	4b2a      	ldr	r3, [pc, #168]	; (80149dc <get_config_payload_string+0x25c>)
 8014932:	9310      	str	r3, [sp, #64]	; 0x40
 8014934:	4b2d      	ldr	r3, [pc, #180]	; (80149ec <get_config_payload_string+0x26c>)
 8014936:	930f      	str	r3, [sp, #60]	; 0x3c
 8014938:	4b2d      	ldr	r3, [pc, #180]	; (80149f0 <get_config_payload_string+0x270>)
 801493a:	930e      	str	r3, [sp, #56]	; 0x38
 801493c:	4b2d      	ldr	r3, [pc, #180]	; (80149f4 <get_config_payload_string+0x274>)
 801493e:	930d      	str	r3, [sp, #52]	; 0x34
 8014940:	4b2d      	ldr	r3, [pc, #180]	; (80149f8 <get_config_payload_string+0x278>)
 8014942:	930c      	str	r3, [sp, #48]	; 0x30
 8014944:	4b2d      	ldr	r3, [pc, #180]	; (80149fc <get_config_payload_string+0x27c>)
 8014946:	930b      	str	r3, [sp, #44]	; 0x2c
 8014948:	4b25      	ldr	r3, [pc, #148]	; (80149e0 <get_config_payload_string+0x260>)
 801494a:	930a      	str	r3, [sp, #40]	; 0x28
 801494c:	4b2c      	ldr	r3, [pc, #176]	; (8014a00 <get_config_payload_string+0x280>)
 801494e:	9309      	str	r3, [sp, #36]	; 0x24
 8014950:	4b39      	ldr	r3, [pc, #228]	; (8014a38 <get_config_payload_string+0x2b8>)
 8014952:	9308      	str	r3, [sp, #32]
 8014954:	4b39      	ldr	r3, [pc, #228]	; (8014a3c <get_config_payload_string+0x2bc>)
 8014956:	9307      	str	r3, [sp, #28]
 8014958:	4b21      	ldr	r3, [pc, #132]	; (80149e0 <get_config_payload_string+0x260>)
 801495a:	9306      	str	r3, [sp, #24]
 801495c:	4b28      	ldr	r3, [pc, #160]	; (8014a00 <get_config_payload_string+0x280>)
 801495e:	9305      	str	r3, [sp, #20]
 8014960:	4b37      	ldr	r3, [pc, #220]	; (8014a40 <get_config_payload_string+0x2c0>)
 8014962:	9304      	str	r3, [sp, #16]
 8014964:	4b30      	ldr	r3, [pc, #192]	; (8014a28 <get_config_payload_string+0x2a8>)
 8014966:	9303      	str	r3, [sp, #12]
 8014968:	4b34      	ldr	r3, [pc, #208]	; (8014a3c <get_config_payload_string+0x2bc>)
 801496a:	9302      	str	r3, [sp, #8]
 801496c:	4b29      	ldr	r3, [pc, #164]	; (8014a14 <get_config_payload_string+0x294>)
 801496e:	9301      	str	r3, [sp, #4]
 8014970:	4b1b      	ldr	r3, [pc, #108]	; (80149e0 <get_config_payload_string+0x260>)
 8014972:	9300      	str	r3, [sp, #0]
 8014974:	4b22      	ldr	r3, [pc, #136]	; (8014a00 <get_config_payload_string+0x280>)
 8014976:	4a31      	ldr	r2, [pc, #196]	; (8014a3c <get_config_payload_string+0x2bc>)
 8014978:	4927      	ldr	r1, [pc, #156]	; (8014a18 <get_config_payload_string+0x298>)
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f018 ff46 	bl	802d80c <siprintf>
 8014980:	4603      	mov	r3, r0
 8014982:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_apparent_power, "\n", dev_class_apparent_power_human, dev_system, unical_id, \
					dev_class_apparent_power, dev_class_apparent_power_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014984:	e092      	b.n	8014aac <get_config_payload_string+0x32c>

		case POWER_FACTOR_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_power_factor, dev_system, \
 8014986:	4b15      	ldr	r3, [pc, #84]	; (80149dc <get_config_payload_string+0x25c>)
 8014988:	9310      	str	r3, [sp, #64]	; 0x40
 801498a:	4b18      	ldr	r3, [pc, #96]	; (80149ec <get_config_payload_string+0x26c>)
 801498c:	930f      	str	r3, [sp, #60]	; 0x3c
 801498e:	4b18      	ldr	r3, [pc, #96]	; (80149f0 <get_config_payload_string+0x270>)
 8014990:	930e      	str	r3, [sp, #56]	; 0x38
 8014992:	4b18      	ldr	r3, [pc, #96]	; (80149f4 <get_config_payload_string+0x274>)
 8014994:	930d      	str	r3, [sp, #52]	; 0x34
 8014996:	4b18      	ldr	r3, [pc, #96]	; (80149f8 <get_config_payload_string+0x278>)
 8014998:	930c      	str	r3, [sp, #48]	; 0x30
 801499a:	4b18      	ldr	r3, [pc, #96]	; (80149fc <get_config_payload_string+0x27c>)
 801499c:	930b      	str	r3, [sp, #44]	; 0x2c
 801499e:	4b10      	ldr	r3, [pc, #64]	; (80149e0 <get_config_payload_string+0x260>)
 80149a0:	930a      	str	r3, [sp, #40]	; 0x28
 80149a2:	4b17      	ldr	r3, [pc, #92]	; (8014a00 <get_config_payload_string+0x280>)
 80149a4:	9309      	str	r3, [sp, #36]	; 0x24
 80149a6:	4b27      	ldr	r3, [pc, #156]	; (8014a44 <get_config_payload_string+0x2c4>)
 80149a8:	9308      	str	r3, [sp, #32]
 80149aa:	4b27      	ldr	r3, [pc, #156]	; (8014a48 <get_config_payload_string+0x2c8>)
 80149ac:	9307      	str	r3, [sp, #28]
 80149ae:	4b0c      	ldr	r3, [pc, #48]	; (80149e0 <get_config_payload_string+0x260>)
 80149b0:	9306      	str	r3, [sp, #24]
 80149b2:	4b13      	ldr	r3, [pc, #76]	; (8014a00 <get_config_payload_string+0x280>)
 80149b4:	9305      	str	r3, [sp, #20]
 80149b6:	4b25      	ldr	r3, [pc, #148]	; (8014a4c <get_config_payload_string+0x2cc>)
 80149b8:	9304      	str	r3, [sp, #16]
 80149ba:	4b1b      	ldr	r3, [pc, #108]	; (8014a28 <get_config_payload_string+0x2a8>)
 80149bc:	9303      	str	r3, [sp, #12]
 80149be:	4b22      	ldr	r3, [pc, #136]	; (8014a48 <get_config_payload_string+0x2c8>)
 80149c0:	9302      	str	r3, [sp, #8]
 80149c2:	4b14      	ldr	r3, [pc, #80]	; (8014a14 <get_config_payload_string+0x294>)
 80149c4:	9301      	str	r3, [sp, #4]
 80149c6:	4b06      	ldr	r3, [pc, #24]	; (80149e0 <get_config_payload_string+0x260>)
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	4b0d      	ldr	r3, [pc, #52]	; (8014a00 <get_config_payload_string+0x280>)
 80149cc:	4a1e      	ldr	r2, [pc, #120]	; (8014a48 <get_config_payload_string+0x2c8>)
 80149ce:	4912      	ldr	r1, [pc, #72]	; (8014a18 <get_config_payload_string+0x298>)
 80149d0:	6878      	ldr	r0, [r7, #4]
 80149d2:	f018 ff1b 	bl	802d80c <siprintf>
 80149d6:	4603      	mov	r3, r0
 80149d8:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_power_factor, "\n", dev_class_power_factor_human, dev_system, unical_id, \
					dev_class_power_factor, dev_class_power_factor_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 80149da:	e067      	b.n	8014aac <get_config_payload_string+0x32c>
 80149dc:	200008cc 	.word	0x200008cc
 80149e0:	200008bc 	.word	0x200008bc
 80149e4:	08034434 	.word	0x08034434
 80149e8:	080345f4 	.word	0x080345f4
 80149ec:	08032e3c 	.word	0x08032e3c
 80149f0:	08032e44 	.word	0x08032e44
 80149f4:	08032e48 	.word	0x08032e48
 80149f8:	08032e58 	.word	0x08032e58
 80149fc:	08032e68 	.word	0x08032e68
 8014a00:	08032dfc 	.word	0x08032dfc
 8014a04:	08032e78 	.word	0x08032e78
 8014a08:	08032df4 	.word	0x08032df4
 8014a0c:	08032e7c 	.word	0x08032e7c
 8014a10:	08032e8c 	.word	0x08032e8c
 8014a14:	08032eb0 	.word	0x08032eb0
 8014a18:	0803478c 	.word	0x0803478c
 8014a1c:	08032eb8 	.word	0x08032eb8
 8014a20:	08032e04 	.word	0x08032e04
 8014a24:	08032ebc 	.word	0x08032ebc
 8014a28:	08032ecc 	.word	0x08032ecc
 8014a2c:	08032ed0 	.word	0x08032ed0
 8014a30:	08032e0c 	.word	0x08032e0c
 8014a34:	08032ed4 	.word	0x08032ed4
 8014a38:	08032ef8 	.word	0x08032ef8
 8014a3c:	08032e14 	.word	0x08032e14
 8014a40:	08032efc 	.word	0x08032efc
 8014a44:	08032f1c 	.word	0x08032f1c
 8014a48:	08032e24 	.word	0x08032e24
 8014a4c:	08032f20 	.word	0x08032f20
		case CURRENT_SENSOR_PAYLOAD:
			len = sprintf(payload, universal_conf_template, dev_class_current, dev_system, \
 8014a50:	4b18      	ldr	r3, [pc, #96]	; (8014ab4 <get_config_payload_string+0x334>)
 8014a52:	9310      	str	r3, [sp, #64]	; 0x40
 8014a54:	4b18      	ldr	r3, [pc, #96]	; (8014ab8 <get_config_payload_string+0x338>)
 8014a56:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a58:	4b18      	ldr	r3, [pc, #96]	; (8014abc <get_config_payload_string+0x33c>)
 8014a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8014a5c:	4b18      	ldr	r3, [pc, #96]	; (8014ac0 <get_config_payload_string+0x340>)
 8014a5e:	930d      	str	r3, [sp, #52]	; 0x34
 8014a60:	4b18      	ldr	r3, [pc, #96]	; (8014ac4 <get_config_payload_string+0x344>)
 8014a62:	930c      	str	r3, [sp, #48]	; 0x30
 8014a64:	4b18      	ldr	r3, [pc, #96]	; (8014ac8 <get_config_payload_string+0x348>)
 8014a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8014a68:	4b18      	ldr	r3, [pc, #96]	; (8014acc <get_config_payload_string+0x34c>)
 8014a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8014a6c:	4b18      	ldr	r3, [pc, #96]	; (8014ad0 <get_config_payload_string+0x350>)
 8014a6e:	9309      	str	r3, [sp, #36]	; 0x24
 8014a70:	4b18      	ldr	r3, [pc, #96]	; (8014ad4 <get_config_payload_string+0x354>)
 8014a72:	9308      	str	r3, [sp, #32]
 8014a74:	4b18      	ldr	r3, [pc, #96]	; (8014ad8 <get_config_payload_string+0x358>)
 8014a76:	9307      	str	r3, [sp, #28]
 8014a78:	4b14      	ldr	r3, [pc, #80]	; (8014acc <get_config_payload_string+0x34c>)
 8014a7a:	9306      	str	r3, [sp, #24]
 8014a7c:	4b14      	ldr	r3, [pc, #80]	; (8014ad0 <get_config_payload_string+0x350>)
 8014a7e:	9305      	str	r3, [sp, #20]
 8014a80:	4b16      	ldr	r3, [pc, #88]	; (8014adc <get_config_payload_string+0x35c>)
 8014a82:	9304      	str	r3, [sp, #16]
 8014a84:	4b16      	ldr	r3, [pc, #88]	; (8014ae0 <get_config_payload_string+0x360>)
 8014a86:	9303      	str	r3, [sp, #12]
 8014a88:	4b13      	ldr	r3, [pc, #76]	; (8014ad8 <get_config_payload_string+0x358>)
 8014a8a:	9302      	str	r3, [sp, #8]
 8014a8c:	4b15      	ldr	r3, [pc, #84]	; (8014ae4 <get_config_payload_string+0x364>)
 8014a8e:	9301      	str	r3, [sp, #4]
 8014a90:	4b0e      	ldr	r3, [pc, #56]	; (8014acc <get_config_payload_string+0x34c>)
 8014a92:	9300      	str	r3, [sp, #0]
 8014a94:	4b0e      	ldr	r3, [pc, #56]	; (8014ad0 <get_config_payload_string+0x350>)
 8014a96:	4a10      	ldr	r2, [pc, #64]	; (8014ad8 <get_config_payload_string+0x358>)
 8014a98:	4913      	ldr	r1, [pc, #76]	; (8014ae8 <get_config_payload_string+0x368>)
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f018 feb6 	bl	802d80c <siprintf>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	73fb      	strb	r3, [r7, #15]
					unical_id, state_topik, dev_class_current, "\n", dev_class_current_human, dev_system, unical_id, \
					dev_class_current, dev_class_current_unit_of_measurement, dev_system, unical_id, dev_common_name, dev_model_name,\
					dev_manufacturer_name, dev_hw_ver, dev_sw_ver, dev_conf_ip);
			break;
 8014aa4:	e002      	b.n	8014aac <get_config_payload_string+0x32c>

		default:
			return -1;
 8014aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8014aaa:	e7ff      	b.n	8014aac <get_config_payload_string+0x32c>
			break;
	}
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3714      	adds	r7, #20
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd90      	pop	{r4, r7, pc}
 8014ab4:	200008cc 	.word	0x200008cc
 8014ab8:	08032e3c 	.word	0x08032e3c
 8014abc:	08032e44 	.word	0x08032e44
 8014ac0:	08032e48 	.word	0x08032e48
 8014ac4:	08032e58 	.word	0x08032e58
 8014ac8:	08032e68 	.word	0x08032e68
 8014acc:	200008bc 	.word	0x200008bc
 8014ad0:	08032dfc 	.word	0x08032dfc
 8014ad4:	08032f4c 	.word	0x08032f4c
 8014ad8:	08032e34 	.word	0x08032e34
 8014adc:	08032f50 	.word	0x08032f50
 8014ae0:	08032ecc 	.word	0x08032ecc
 8014ae4:	08032eb0 	.word	0x08032eb0
 8014ae8:	0803478c 	.word	0x0803478c

08014aec <generate_status_topik>:
	strcpy(buff, "\0");
	sprintf(buff, subscr_topik_template, unical_id, obj_number);
	return 0;
}

int generate_status_topik(char * buff, mqtt_topik_string_type topik_type){
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b084      	sub	sp, #16
 8014af0:	af02      	add	r7, sp, #8
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	460b      	mov	r3, r1
 8014af6:	70fb      	strb	r3, [r7, #3]

	strcpy(buff, "\0");
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	2200      	movs	r2, #0
 8014afc:	701a      	strb	r2, [r3, #0]

	sprintf(buff, universal_status_topik_template, dev_system, unical_id, state_topik);
 8014afe:	4b11      	ldr	r3, [pc, #68]	; (8014b44 <generate_status_topik+0x58>)
 8014b00:	9300      	str	r3, [sp, #0]
 8014b02:	4b11      	ldr	r3, [pc, #68]	; (8014b48 <generate_status_topik+0x5c>)
 8014b04:	4a11      	ldr	r2, [pc, #68]	; (8014b4c <generate_status_topik+0x60>)
 8014b06:	4912      	ldr	r1, [pc, #72]	; (8014b50 <generate_status_topik+0x64>)
 8014b08:	6878      	ldr	r0, [r7, #4]
 8014b0a:	f018 fe7f 	bl	802d80c <siprintf>

	switch (topik_type) {
 8014b0e:	78fb      	ldrb	r3, [r7, #3]
 8014b10:	2b01      	cmp	r3, #1
 8014b12:	d002      	beq.n	8014b1a <generate_status_topik+0x2e>
 8014b14:	2b02      	cmp	r3, #2
 8014b16:	d006      	beq.n	8014b26 <generate_status_topik+0x3a>
 8014b18:	e00b      	b.n	8014b32 <generate_status_topik+0x46>
		case INPUT_TOPIK:
			sprintf(buff, input_status_topik_temp, unical_id);
 8014b1a:	4a0b      	ldr	r2, [pc, #44]	; (8014b48 <generate_status_topik+0x5c>)
 8014b1c:	490d      	ldr	r1, [pc, #52]	; (8014b54 <generate_status_topik+0x68>)
 8014b1e:	6878      	ldr	r0, [r7, #4]
 8014b20:	f018 fe74 	bl	802d80c <siprintf>
			break;
 8014b24:	e008      	b.n	8014b38 <generate_status_topik+0x4c>

		case OUTPUT_TOPIK:
			sprintf(buff, switch_status_topik_temp, unical_id);
 8014b26:	4a08      	ldr	r2, [pc, #32]	; (8014b48 <generate_status_topik+0x5c>)
 8014b28:	490b      	ldr	r1, [pc, #44]	; (8014b58 <generate_status_topik+0x6c>)
 8014b2a:	6878      	ldr	r0, [r7, #4]
 8014b2c:	f018 fe6e 	bl	802d80c <siprintf>
			break;
 8014b30:	e002      	b.n	8014b38 <generate_status_topik+0x4c>

		default:
			return -1;
 8014b32:	f04f 33ff 	mov.w	r3, #4294967295
 8014b36:	e000      	b.n	8014b3a <generate_status_topik+0x4e>
			break;
	}

	return 0;
 8014b38:	2300      	movs	r3, #0
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3708      	adds	r7, #8
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	08032eb0 	.word	0x08032eb0
 8014b48:	200008bc 	.word	0x200008bc
 8014b4c:	08032dfc 	.word	0x08032dfc
 8014b50:	08032f78 	.word	0x08032f78
 8014b54:	20000094 	.word	0x20000094
 8014b58:	200000a4 	.word	0x200000a4

08014b5c <generate_key_value_JSON>:

void generate_key_value_JSON(char * buf, char * key, float value){
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b086      	sub	sp, #24
 8014b60:	af02      	add	r7, sp, #8
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	ed87 0a01 	vstr	s0, [r7, #4]

	sprintf(buf, key_value_float_JSON_template, key, value);
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f7fb fd04 	bl	8010578 <__aeabi_f2d>
 8014b70:	4602      	mov	r2, r0
 8014b72:	460b      	mov	r3, r1
 8014b74:	e9cd 2300 	strd	r2, r3, [sp]
 8014b78:	68ba      	ldr	r2, [r7, #8]
 8014b7a:	4904      	ldr	r1, [pc, #16]	; (8014b8c <generate_key_value_JSON+0x30>)
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f018 fe45 	bl	802d80c <siprintf>
}
 8014b82:	bf00      	nop
 8014b84:	3710      	adds	r7, #16
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	08032f84 	.word	0x08032f84

08014b90 <InitHLW8032>:
uint32_t	PFData = 0;
uint32_t	PulsCountFor1kWh;
uint16_t 	PF_reg, PF_reg_old;
uint32_t	test_flag = 0;

void InitHLW8032(uint32_t VolR1, uint32_t VolR2, float CurrentShuntR){
 8014b90:	b5b0      	push	{r4, r5, r7, lr}
 8014b92:	b084      	sub	sp, #16
 8014b94:	af00      	add	r7, sp, #0
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	ed87 0a01 	vstr	s0, [r7, #4]

	//VolR1 - Resistanse on OM for first resistor
	//VolR2 - Resistanse on OM for second resistor
	//ShuntR - Resistanse in OM for current shunt resistor

	VF = VolR1 / (VolR2 * 1000.0);
 8014b9e:	68f8      	ldr	r0, [r7, #12]
 8014ba0:	f7fb fcc8 	bl	8010534 <__aeabi_ui2d>
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	460d      	mov	r5, r1
 8014ba8:	68b8      	ldr	r0, [r7, #8]
 8014baa:	f7fb fcc3 	bl	8010534 <__aeabi_ui2d>
 8014bae:	f04f 0200 	mov.w	r2, #0
 8014bb2:	4b17      	ldr	r3, [pc, #92]	; (8014c10 <InitHLW8032+0x80>)
 8014bb4:	f7fb fd38 	bl	8010628 <__aeabi_dmul>
 8014bb8:	4602      	mov	r2, r0
 8014bba:	460b      	mov	r3, r1
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	4629      	mov	r1, r5
 8014bc0:	f7fb fe5c 	bl	801087c <__aeabi_ddiv>
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	460b      	mov	r3, r1
 8014bc8:	4610      	mov	r0, r2
 8014bca:	4619      	mov	r1, r3
 8014bcc:	f7fc f824 	bl	8010c18 <__aeabi_d2f>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	4a10      	ldr	r2, [pc, #64]	; (8014c14 <InitHLW8032+0x84>)
 8014bd4:	6013      	str	r3, [r2, #0]
	CF = 1.0 / (CurrentShuntR * 1000.0);
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f7fb fcce 	bl	8010578 <__aeabi_f2d>
 8014bdc:	f04f 0200 	mov.w	r2, #0
 8014be0:	4b0b      	ldr	r3, [pc, #44]	; (8014c10 <InitHLW8032+0x80>)
 8014be2:	f7fb fd21 	bl	8010628 <__aeabi_dmul>
 8014be6:	4602      	mov	r2, r0
 8014be8:	460b      	mov	r3, r1
 8014bea:	f04f 0000 	mov.w	r0, #0
 8014bee:	490a      	ldr	r1, [pc, #40]	; (8014c18 <InitHLW8032+0x88>)
 8014bf0:	f7fb fe44 	bl	801087c <__aeabi_ddiv>
 8014bf4:	4602      	mov	r2, r0
 8014bf6:	460b      	mov	r3, r1
 8014bf8:	4610      	mov	r0, r2
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	f7fc f80c 	bl	8010c18 <__aeabi_d2f>
 8014c00:	4603      	mov	r3, r0
 8014c02:	4a06      	ldr	r2, [pc, #24]	; (8014c1c <InitHLW8032+0x8c>)
 8014c04:	6013      	str	r3, [r2, #0]
}
 8014c06:	bf00      	nop
 8014c08:	3710      	adds	r7, #16
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8014c0e:	bf00      	nop
 8014c10:	408f4000 	.word	0x408f4000
 8014c14:	200000b4 	.word	0x200000b4
 8014c18:	3ff00000 	.word	0x3ff00000
 8014c1c:	200000b8 	.word	0x200000b8

08014c20 <Checksum>:

	VF = Data;

}

uint8_t Checksum(char * string){
 8014c20:	b480      	push	{r7}
 8014c22:	b085      	sub	sp, #20
 8014c24:	af00      	add	r7, sp, #0
 8014c26:	6078      	str	r0, [r7, #4]
	uint8_t i, tmp;
	char byte;

	byte = 0;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014c2c:	2302      	movs	r3, #2
 8014c2e:	73fb      	strb	r3, [r7, #15]
 8014c30:	e00e      	b.n	8014c50 <Checksum+0x30>
		tmp = string[i];
 8014c32:	7bfb      	ldrb	r3, [r7, #15]
 8014c34:	687a      	ldr	r2, [r7, #4]
 8014c36:	4413      	add	r3, r2
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	737b      	strb	r3, [r7, #13]
		byte = byte + string[i];
 8014c3c:	7bfb      	ldrb	r3, [r7, #15]
 8014c3e:	687a      	ldr	r2, [r7, #4]
 8014c40:	4413      	add	r3, r2
 8014c42:	781a      	ldrb	r2, [r3, #0]
 8014c44:	7bbb      	ldrb	r3, [r7, #14]
 8014c46:	4413      	add	r3, r2
 8014c48:	73bb      	strb	r3, [r7, #14]
	for ( i = 2; i <= 22; i++){
 8014c4a:	7bfb      	ldrb	r3, [r7, #15]
 8014c4c:	3301      	adds	r3, #1
 8014c4e:	73fb      	strb	r3, [r7, #15]
 8014c50:	7bfb      	ldrb	r3, [r7, #15]
 8014c52:	2b16      	cmp	r3, #22
 8014c54:	d9ed      	bls.n	8014c32 <Checksum+0x12>
	}
	if (byte == string[23])
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	3317      	adds	r3, #23
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	7bba      	ldrb	r2, [r7, #14]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d101      	bne.n	8014c66 <Checksum+0x46>
	{
		return 1;
 8014c62:	2301      	movs	r3, #1
 8014c64:	e000      	b.n	8014c68 <Checksum+0x48>
	}
	return 0;
 8014c66:	2300      	movs	r3, #0
}
 8014c68:	4618      	mov	r0, r3
 8014c6a:	3714      	adds	r7, #20
 8014c6c:	46bd      	mov	sp, r7
 8014c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c72:	4770      	bx	lr

08014c74 <RecvRawString>:
//byte 21(1 byte) string[20] - Indication of power, voltage, current state
//byte 22		  string[21]
//byte 23(2 byte) string[22] - PF pulse numbers, used in conjunction with state register, not saved after power-fail
//byte 24(1 byte) string[23] - Data check sum, used to verify whether data package is complete in communication

int RecvRawString(const unsigned char * string){
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b082      	sub	sp, #8
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]

	if (!strcmp(string + 1, 0x5A)){
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	3301      	adds	r3, #1
 8014c80:	215a      	movs	r1, #90	; 0x5a
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7fb faac 	bl	80101e0 <strcmp>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d102      	bne.n	8014c94 <RecvRawString+0x20>
		return -1; //error code
 8014c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c92:	e0a9      	b.n	8014de8 <RecvRawString+0x174>
	}
//	if(string[1] =! 0x5A){
//		return -1; //error code
//	}

	if (Checksum(string) == 0){
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f7ff ffc3 	bl	8014c20 <Checksum>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d102      	bne.n	8014ca6 <RecvRawString+0x32>
		return -2; //Checksum Error
 8014ca0:	f06f 0301 	mvn.w	r3, #1
 8014ca4:	e0a0      	b.n	8014de8 <RecvRawString+0x174>
	}

	VolPar = ((uint32_t)string[2] << 16) + ((uint32_t)string[3] << 8) + string[4];
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	3302      	adds	r3, #2
 8014caa:	781b      	ldrb	r3, [r3, #0]
 8014cac:	041a      	lsls	r2, r3, #16
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	3303      	adds	r3, #3
 8014cb2:	781b      	ldrb	r3, [r3, #0]
 8014cb4:	021b      	lsls	r3, r3, #8
 8014cb6:	4413      	add	r3, r2
 8014cb8:	687a      	ldr	r2, [r7, #4]
 8014cba:	3204      	adds	r2, #4
 8014cbc:	7812      	ldrb	r2, [r2, #0]
 8014cbe:	4413      	add	r3, r2
 8014cc0:	4a4b      	ldr	r2, [pc, #300]	; (8014df0 <RecvRawString+0x17c>)
 8014cc2:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20],6) == 1){
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3314      	adds	r3, #20
 8014cc8:	781b      	ldrb	r3, [r3, #0]
 8014cca:	099b      	lsrs	r3, r3, #6
 8014ccc:	b2db      	uxtb	r3, r3
 8014cce:	f003 0301 	and.w	r3, r3, #1
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d00e      	beq.n	8014cf4 <RecvRawString+0x80>

		VolData = ((uint32_t)string[5] << 16) + ((uint32_t)string[6] << 8) + string[7];
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	3305      	adds	r3, #5
 8014cda:	781b      	ldrb	r3, [r3, #0]
 8014cdc:	041a      	lsls	r2, r3, #16
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	3306      	adds	r3, #6
 8014ce2:	781b      	ldrb	r3, [r3, #0]
 8014ce4:	021b      	lsls	r3, r3, #8
 8014ce6:	4413      	add	r3, r2
 8014ce8:	687a      	ldr	r2, [r7, #4]
 8014cea:	3207      	adds	r2, #7
 8014cec:	7812      	ldrb	r2, [r2, #0]
 8014cee:	4413      	add	r3, r2
 8014cf0:	4a40      	ldr	r2, [pc, #256]	; (8014df4 <RecvRawString+0x180>)
 8014cf2:	6013      	str	r3, [r2, #0]

	}

	CurrentPar = ((uint32_t)string[8] << 16) + ((uint32_t)string[9] << 8) + string[10];
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	3308      	adds	r3, #8
 8014cf8:	781b      	ldrb	r3, [r3, #0]
 8014cfa:	041a      	lsls	r2, r3, #16
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	3309      	adds	r3, #9
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	021b      	lsls	r3, r3, #8
 8014d04:	4413      	add	r3, r2
 8014d06:	687a      	ldr	r2, [r7, #4]
 8014d08:	320a      	adds	r2, #10
 8014d0a:	7812      	ldrb	r2, [r2, #0]
 8014d0c:	4413      	add	r3, r2
 8014d0e:	4a3a      	ldr	r2, [pc, #232]	; (8014df8 <RecvRawString+0x184>)
 8014d10:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 5) == 1)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	3314      	adds	r3, #20
 8014d16:	781b      	ldrb	r3, [r3, #0]
 8014d18:	095b      	lsrs	r3, r3, #5
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	f003 0301 	and.w	r3, r3, #1
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d00e      	beq.n	8014d42 <RecvRawString+0xce>
	{
		CurrentData = ((uint32_t)string[11] << 16) + ((uint32_t)string[12] << 8) + string[13];
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	330b      	adds	r3, #11
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	041a      	lsls	r2, r3, #16
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	330c      	adds	r3, #12
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	021b      	lsls	r3, r3, #8
 8014d34:	4413      	add	r3, r2
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	320d      	adds	r2, #13
 8014d3a:	7812      	ldrb	r2, [r2, #0]
 8014d3c:	4413      	add	r3, r2
 8014d3e:	4a2f      	ldr	r2, [pc, #188]	; (8014dfc <RecvRawString+0x188>)
 8014d40:	6013      	str	r3, [r2, #0]

	}

	PowerPar = ((uint32_t)string[14]  << 16) + ((uint32_t)string[15] << 8) + string[16];
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	330e      	adds	r3, #14
 8014d46:	781b      	ldrb	r3, [r3, #0]
 8014d48:	041a      	lsls	r2, r3, #16
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	330f      	adds	r3, #15
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	021b      	lsls	r3, r3, #8
 8014d52:	4413      	add	r3, r2
 8014d54:	687a      	ldr	r2, [r7, #4]
 8014d56:	3210      	adds	r2, #16
 8014d58:	7812      	ldrb	r2, [r2, #0]
 8014d5a:	4413      	add	r3, r2
 8014d5c:	4a28      	ldr	r2, [pc, #160]	; (8014e00 <RecvRawString+0x18c>)
 8014d5e:	6013      	str	r3, [r2, #0]

	if(bitRead(string[20], 4) == 1)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	3314      	adds	r3, #20
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	091b      	lsrs	r3, r3, #4
 8014d68:	b2db      	uxtb	r3, r3
 8014d6a:	f003 0301 	and.w	r3, r3, #1
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d00e      	beq.n	8014d90 <RecvRawString+0x11c>
	{
		PowerData = ((uint32_t)string[17]  << 16) + ((uint32_t)string[18] << 8) + string[19];
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	3311      	adds	r3, #17
 8014d76:	781b      	ldrb	r3, [r3, #0]
 8014d78:	041a      	lsls	r2, r3, #16
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	3312      	adds	r3, #18
 8014d7e:	781b      	ldrb	r3, [r3, #0]
 8014d80:	021b      	lsls	r3, r3, #8
 8014d82:	4413      	add	r3, r2
 8014d84:	687a      	ldr	r2, [r7, #4]
 8014d86:	3213      	adds	r2, #19
 8014d88:	7812      	ldrb	r2, [r2, #0]
 8014d8a:	4413      	add	r3, r2
 8014d8c:	4a1d      	ldr	r2, [pc, #116]	; (8014e04 <RecvRawString+0x190>)
 8014d8e:	6013      	str	r3, [r2, #0]

	}

	PF_reg = ((uint32_t)string[21] <<8) + string[22];
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	3315      	adds	r3, #21
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	021b      	lsls	r3, r3, #8
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3316      	adds	r3, #22
 8014da0:	781b      	ldrb	r3, [r3, #0]
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	4413      	add	r3, r2
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	4b17      	ldr	r3, [pc, #92]	; (8014e08 <RecvRawString+0x194>)
 8014daa:	801a      	strh	r2, [r3, #0]

	if(bitRead(string[20], 7) == 1)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	3314      	adds	r3, #20
 8014db0:	781b      	ldrb	r3, [r3, #0]
 8014db2:	09db      	lsrs	r3, r3, #7
 8014db4:	b2db      	uxtb	r3, r3
 8014db6:	f003 0301 	and.w	r3, r3, #1
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d004      	beq.n	8014dc8 <RecvRawString+0x154>
	{
		PFData++;
 8014dbe:	4b13      	ldr	r3, [pc, #76]	; (8014e0c <RecvRawString+0x198>)
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	3301      	adds	r3, #1
 8014dc4:	4a11      	ldr	r2, [pc, #68]	; (8014e0c <RecvRawString+0x198>)
 8014dc6:	6013      	str	r3, [r2, #0]
	}

	//TODO Когда переполняется регистр, выставляется флаг и обнудяется регистр, проверить, можем ли мы ловить этот флаг еще и не совпадением старого и нового значения регистров.
	if(PF_reg_old > PF_reg){
 8014dc8:	4b11      	ldr	r3, [pc, #68]	; (8014e10 <RecvRawString+0x19c>)
 8014dca:	881a      	ldrh	r2, [r3, #0]
 8014dcc:	4b0e      	ldr	r3, [pc, #56]	; (8014e08 <RecvRawString+0x194>)
 8014dce:	881b      	ldrh	r3, [r3, #0]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d904      	bls.n	8014dde <RecvRawString+0x16a>
		test_flag++;
 8014dd4:	4b0f      	ldr	r3, [pc, #60]	; (8014e14 <RecvRawString+0x1a0>)
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	4a0e      	ldr	r2, [pc, #56]	; (8014e14 <RecvRawString+0x1a0>)
 8014ddc:	6013      	str	r3, [r2, #0]
	}

	PF_reg_old = PF_reg;
 8014dde:	4b0a      	ldr	r3, [pc, #40]	; (8014e08 <RecvRawString+0x194>)
 8014de0:	881a      	ldrh	r2, [r3, #0]
 8014de2:	4b0b      	ldr	r3, [pc, #44]	; (8014e10 <RecvRawString+0x19c>)
 8014de4:	801a      	strh	r2, [r3, #0]

	return 0;
 8014de6:	2300      	movs	r3, #0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3708      	adds	r7, #8
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}
 8014df0:	200008e0 	.word	0x200008e0
 8014df4:	200008e4 	.word	0x200008e4
 8014df8:	200008f0 	.word	0x200008f0
 8014dfc:	200008f4 	.word	0x200008f4
 8014e00:	200008e8 	.word	0x200008e8
 8014e04:	200008ec 	.word	0x200008ec
 8014e08:	200008fc 	.word	0x200008fc
 8014e0c:	200008f8 	.word	0x200008f8
 8014e10:	200008fe 	.word	0x200008fe
 8014e14:	20000900 	.word	0x20000900

08014e18 <GetVolRaw>:

float GetVolRaw(void){
 8014e18:	b480      	push	{r7}
 8014e1a:	af00      	add	r7, sp, #0

	if ( VolData == 0){
 8014e1c:	4b0e      	ldr	r3, [pc, #56]	; (8014e58 <GetVolRaw+0x40>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d102      	bne.n	8014e2a <GetVolRaw+0x12>
		return 0;
 8014e24:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014e5c <GetVolRaw+0x44>
 8014e28:	e00d      	b.n	8014e46 <GetVolRaw+0x2e>
	}

	return VolPar / (float)VolData;
 8014e2a:	4b0d      	ldr	r3, [pc, #52]	; (8014e60 <GetVolRaw+0x48>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	ee07 3a90 	vmov	s15, r3
 8014e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014e36:	4b08      	ldr	r3, [pc, #32]	; (8014e58 <GetVolRaw+0x40>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	ee07 3a90 	vmov	s15, r3
 8014e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014e42:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014e46:	eef0 7a66 	vmov.f32	s15, s13
 8014e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8014e4e:	46bd      	mov	sp, r7
 8014e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e54:	4770      	bx	lr
 8014e56:	bf00      	nop
 8014e58:	200008e4 	.word	0x200008e4
 8014e5c:	00000000 	.word	0x00000000
 8014e60:	200008e0 	.word	0x200008e0

08014e64 <GetVoltage>:

float GetVoltage(void){
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b082      	sub	sp, #8
 8014e68:	af00      	add	r7, sp, #0

	float tmp;
	float RealVolt;

	tmp = GetVolRaw();
 8014e6a:	f7ff ffd5 	bl	8014e18 <GetVolRaw>
 8014e6e:	ed87 0a00 	vstr	s0, [r7]
	RealVolt = tmp * VF;
 8014e72:	4b0d      	ldr	r3, [pc, #52]	; (8014ea8 <GetVoltage+0x44>)
 8014e74:	edd3 7a00 	vldr	s15, [r3]
 8014e78:	ed97 7a00 	vldr	s14, [r7]
 8014e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e80:	edc7 7a01 	vstr	s15, [r7, #4]
	if (RealVolt < 0) RealVolt = 0.000000001;
 8014e84:	edd7 7a01 	vldr	s15, [r7, #4]
 8014e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e90:	d501      	bpl.n	8014e96 <GetVoltage+0x32>
 8014e92:	4b06      	ldr	r3, [pc, #24]	; (8014eac <GetVoltage+0x48>)
 8014e94:	607b      	str	r3, [r7, #4]
	return RealVolt;
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	ee07 3a90 	vmov	s15, r3
}
 8014e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}
 8014ea6:	bf00      	nop
 8014ea8:	200000b4 	.word	0x200000b4
 8014eac:	3089705f 	.word	0x3089705f

08014eb0 <GetCurrentRaw>:

float GetCurrentRaw(void){
 8014eb0:	b480      	push	{r7}
 8014eb2:	af00      	add	r7, sp, #0

	if ( CurrentData == 0){
 8014eb4:	4b0e      	ldr	r3, [pc, #56]	; (8014ef0 <GetCurrentRaw+0x40>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d102      	bne.n	8014ec2 <GetCurrentRaw+0x12>
		return 0;
 8014ebc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8014ef4 <GetCurrentRaw+0x44>
 8014ec0:	e00d      	b.n	8014ede <GetCurrentRaw+0x2e>
	}

	return CurrentPar / (float)CurrentData;
 8014ec2:	4b0d      	ldr	r3, [pc, #52]	; (8014ef8 <GetCurrentRaw+0x48>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	ee07 3a90 	vmov	s15, r3
 8014eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014ece:	4b08      	ldr	r3, [pc, #32]	; (8014ef0 <GetCurrentRaw+0x40>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	ee07 3a90 	vmov	s15, r3
 8014ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014eda:	eec7 6a27 	vdiv.f32	s13, s14, s15
}
 8014ede:	eef0 7a66 	vmov.f32	s15, s13
 8014ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8014ee6:	46bd      	mov	sp, r7
 8014ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eec:	4770      	bx	lr
 8014eee:	bf00      	nop
 8014ef0:	200008f4 	.word	0x200008f4
 8014ef4:	00000000 	.word	0x00000000
 8014ef8:	200008f0 	.word	0x200008f0

08014efc <GetCurrent>:

float GetCurrent(void){
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0

	float tmp;
	float RaelCurrent;

	tmp = GetCurrentRaw();
 8014f02:	f7ff ffd5 	bl	8014eb0 <GetCurrentRaw>
 8014f06:	ed87 0a00 	vstr	s0, [r7]
	RaelCurrent = tmp * CF;
 8014f0a:	4b0d      	ldr	r3, [pc, #52]	; (8014f40 <GetCurrent+0x44>)
 8014f0c:	edd3 7a00 	vldr	s15, [r3]
 8014f10:	ed97 7a00 	vldr	s14, [r7]
 8014f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f18:	edc7 7a01 	vstr	s15, [r7, #4]

	if(RaelCurrent < 0)RaelCurrent = 0.000000001;
 8014f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014f20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f28:	d501      	bpl.n	8014f2e <GetCurrent+0x32>
 8014f2a:	4b06      	ldr	r3, [pc, #24]	; (8014f44 <GetCurrent+0x48>)
 8014f2c:	607b      	str	r3, [r7, #4]

	return RaelCurrent;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	ee07 3a90 	vmov	s15, r3
}
 8014f34:	eeb0 0a67 	vmov.f32	s0, s15
 8014f38:	3708      	adds	r7, #8
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	200000b8 	.word	0x200000b8
 8014f44:	3089705f 	.word	0x3089705f

08014f48 <GetActivePower>:

float GetActivePower(void){
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
	float tmp;

	if (PowerData == 0){
 8014f4e:	4b18      	ldr	r3, [pc, #96]	; (8014fb0 <GetActivePower+0x68>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d102      	bne.n	8014f5c <GetActivePower+0x14>
		return 0;
 8014f56:	f04f 0300 	mov.w	r3, #0
 8014f5a:	e01f      	b.n	8014f9c <GetActivePower+0x54>
	}
	tmp = (float)(PowerPar / PowerData) * VF * CF;
 8014f5c:	4b15      	ldr	r3, [pc, #84]	; (8014fb4 <GetActivePower+0x6c>)
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	4b13      	ldr	r3, [pc, #76]	; (8014fb0 <GetActivePower+0x68>)
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8014f68:	ee07 3a90 	vmov	s15, r3
 8014f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014f70:	4b11      	ldr	r3, [pc, #68]	; (8014fb8 <GetActivePower+0x70>)
 8014f72:	edd3 7a00 	vldr	s15, [r3]
 8014f76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014f7a:	4b10      	ldr	r3, [pc, #64]	; (8014fbc <GetActivePower+0x74>)
 8014f7c:	edd3 7a00 	vldr	s15, [r3]
 8014f80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f84:	edc7 7a01 	vstr	s15, [r7, #4]

	if (tmp < 0) tmp = 0.000000001;
 8014f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8014f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f94:	d501      	bpl.n	8014f9a <GetActivePower+0x52>
 8014f96:	4b0a      	ldr	r3, [pc, #40]	; (8014fc0 <GetActivePower+0x78>)
 8014f98:	607b      	str	r3, [r7, #4]

	return tmp;
 8014f9a:	687b      	ldr	r3, [r7, #4]
}
 8014f9c:	ee07 3a90 	vmov	s15, r3
 8014fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8014fa4:	370c      	adds	r7, #12
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fac:	4770      	bx	lr
 8014fae:	bf00      	nop
 8014fb0:	200008ec 	.word	0x200008ec
 8014fb4:	200008e8 	.word	0x200008e8
 8014fb8:	200000b4 	.word	0x200000b4
 8014fbc:	200000b8 	.word	0x200000b8
 8014fc0:	3089705f 	.word	0x3089705f

08014fc4 <GetApparentPower>:

float GetApparentPower(void){
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b084      	sub	sp, #16
 8014fc8:	af00      	add	r7, sp, #0

	float voltage;
	float current;
	float ApparentPower;

	voltage = GetVoltage();
 8014fca:	f7ff ff4b 	bl	8014e64 <GetVoltage>
 8014fce:	ed87 0a02 	vstr	s0, [r7, #8]
	current = GetCurrent();
 8014fd2:	f7ff ff93 	bl	8014efc <GetCurrent>
 8014fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	ApparentPower = voltage * current;
 8014fda:	ed97 7a02 	vldr	s14, [r7, #8]
 8014fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8014fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014fe6:	edc7 7a03 	vstr	s15, [r7, #12]

	if (ApparentPower < DETECT_POWER_TRASHOLD_W )ApparentPower = 0.000000001;
 8014fea:	edd7 7a03 	vldr	s15, [r7, #12]
 8014fee:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8014ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ffa:	d501      	bpl.n	8015000 <GetApparentPower+0x3c>
 8014ffc:	4b04      	ldr	r3, [pc, #16]	; (8015010 <GetApparentPower+0x4c>)
 8014ffe:	60fb      	str	r3, [r7, #12]

	return ApparentPower;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	ee07 3a90 	vmov	s15, r3
}
 8015006:	eeb0 0a67 	vmov.f32	s0, s15
 801500a:	3710      	adds	r7, #16
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}
 8015010:	3089705f 	.word	0x3089705f

08015014 <PowerFactor>:

float PowerFactor(void){
 8015014:	b580      	push	{r7, lr}
 8015016:	b084      	sub	sp, #16
 8015018:	af00      	add	r7, sp, #0

	float ActivePower;
	float ApparentPower;
	float PowerFactor;

	ActivePower 	= GetActivePower();
 801501a:	f7ff ff95 	bl	8014f48 <GetActivePower>
 801501e:	ed87 0a03 	vstr	s0, [r7, #12]
	ApparentPower	= GetApparentPower();
 8015022:	f7ff ffcf 	bl	8014fc4 <GetApparentPower>
 8015026:	ed87 0a02 	vstr	s0, [r7, #8]
	if (ApparentPower 	== 0) return 0;
 801502a:	edd7 7a02 	vldr	s15, [r7, #8]
 801502e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015036:	d102      	bne.n	801503e <PowerFactor+0x2a>
 8015038:	f04f 0300 	mov.w	r3, #0
 801503c:	e01e      	b.n	801507c <PowerFactor+0x68>
	if (ActivePower 	== 0) return 0;
 801503e:	edd7 7a03 	vldr	s15, [r7, #12]
 8015042:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801504a:	d102      	bne.n	8015052 <PowerFactor+0x3e>
 801504c:	f04f 0300 	mov.w	r3, #0
 8015050:	e014      	b.n	801507c <PowerFactor+0x68>
	if (ActivePower > ApparentPower) return 1.000000000000;
 8015052:	ed97 7a03 	vldr	s14, [r7, #12]
 8015056:	edd7 7a02 	vldr	s15, [r7, #8]
 801505a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015062:	dd02      	ble.n	801506a <PowerFactor+0x56>
 8015064:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015068:	e008      	b.n	801507c <PowerFactor+0x68>
	PowerFactor		= ActivePower / ApparentPower;
 801506a:	edd7 6a03 	vldr	s13, [r7, #12]
 801506e:	ed97 7a02 	vldr	s14, [r7, #8]
 8015072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015076:	edc7 7a01 	vstr	s15, [r7, #4]

	return PowerFactor;
 801507a:	687b      	ldr	r3, [r7, #4]
}
 801507c:	ee07 3a90 	vmov	s15, r3
 8015080:	eeb0 0a67 	vmov.f32	s0, s15
 8015084:	3710      	adds	r7, #16
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
	...

0801508c <GetTestPulse>:

uint32_t GetPulsCnF1kWh(){
}

uint32_t GetTestPulse(){
 801508c:	b480      	push	{r7}
 801508e:	af00      	add	r7, sp, #0
	return test_flag;
 8015090:	4b03      	ldr	r3, [pc, #12]	; (80150a0 <GetTestPulse+0x14>)
 8015092:	681b      	ldr	r3, [r3, #0]
}
 8015094:	4618      	mov	r0, r3
 8015096:	46bd      	mov	sp, r7
 8015098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509c:	4770      	bx	lr
 801509e:	bf00      	nop
 80150a0:	20000900 	.word	0x20000900

080150a4 <GetCountedPulse>:

uint32_t GetCountedPulse(){
 80150a4:	b480      	push	{r7}
 80150a6:	af00      	add	r7, sp, #0
	return PFData;
 80150a8:	4b03      	ldr	r3, [pc, #12]	; (80150b8 <GetCountedPulse+0x14>)
 80150aa:	681b      	ldr	r3, [r3, #0]
}
 80150ac:	4618      	mov	r0, r3
 80150ae:	46bd      	mov	sp, r7
 80150b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	200008f8 	.word	0x200008f8

080150bc <GetPFReg>:

uint32_t GetPFReg(){
 80150bc:	b480      	push	{r7}
 80150be:	af00      	add	r7, sp, #0
	return PF_reg;
 80150c0:	4b03      	ldr	r3, [pc, #12]	; (80150d0 <GetPFReg+0x14>)
 80150c2:	881b      	ldrh	r3, [r3, #0]
}
 80150c4:	4618      	mov	r0, r3
 80150c6:	46bd      	mov	sp, r7
 80150c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150cc:	4770      	bx	lr
 80150ce:	bf00      	nop
 80150d0:	200008fc 	.word	0x200008fc
 80150d4:	00000000 	.word	0x00000000

080150d8 <GetKWh>:

float GetKWh(void){
 80150d8:	b5b0      	push	{r4, r5, r7, lr}
 80150da:	b084      	sub	sp, #16
 80150dc:	af00      	add	r7, sp, #0
	float pulseCountFor1kWh;
	float kWh;
	int PFcount;


	apparentPower		= GetApparentPower();
 80150de:	f7ff ff71 	bl	8014fc4 <GetApparentPower>
 80150e2:	ed87 0a02 	vstr	s0, [r7, #8]
	pulseCountFor1kWh	= (1.0/PowerPar) * (1.0/(VF * CF)) * 1000000000.0 * 3600.0;
 80150e6:	4b38      	ldr	r3, [pc, #224]	; (80151c8 <GetKWh+0xf0>)
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	4618      	mov	r0, r3
 80150ec:	f7fb fa22 	bl	8010534 <__aeabi_ui2d>
 80150f0:	4602      	mov	r2, r0
 80150f2:	460b      	mov	r3, r1
 80150f4:	f04f 0000 	mov.w	r0, #0
 80150f8:	4934      	ldr	r1, [pc, #208]	; (80151cc <GetKWh+0xf4>)
 80150fa:	f7fb fbbf 	bl	801087c <__aeabi_ddiv>
 80150fe:	4602      	mov	r2, r0
 8015100:	460b      	mov	r3, r1
 8015102:	4614      	mov	r4, r2
 8015104:	461d      	mov	r5, r3
 8015106:	4b32      	ldr	r3, [pc, #200]	; (80151d0 <GetKWh+0xf8>)
 8015108:	ed93 7a00 	vldr	s14, [r3]
 801510c:	4b31      	ldr	r3, [pc, #196]	; (80151d4 <GetKWh+0xfc>)
 801510e:	edd3 7a00 	vldr	s15, [r3]
 8015112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015116:	ee17 0a90 	vmov	r0, s15
 801511a:	f7fb fa2d 	bl	8010578 <__aeabi_f2d>
 801511e:	4602      	mov	r2, r0
 8015120:	460b      	mov	r3, r1
 8015122:	f04f 0000 	mov.w	r0, #0
 8015126:	4929      	ldr	r1, [pc, #164]	; (80151cc <GetKWh+0xf4>)
 8015128:	f7fb fba8 	bl	801087c <__aeabi_ddiv>
 801512c:	4602      	mov	r2, r0
 801512e:	460b      	mov	r3, r1
 8015130:	4620      	mov	r0, r4
 8015132:	4629      	mov	r1, r5
 8015134:	f7fb fa78 	bl	8010628 <__aeabi_dmul>
 8015138:	4602      	mov	r2, r0
 801513a:	460b      	mov	r3, r1
 801513c:	4610      	mov	r0, r2
 801513e:	4619      	mov	r1, r3
 8015140:	a31d      	add	r3, pc, #116	; (adr r3, 80151b8 <GetKWh+0xe0>)
 8015142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015146:	f7fb fa6f 	bl	8010628 <__aeabi_dmul>
 801514a:	4602      	mov	r2, r0
 801514c:	460b      	mov	r3, r1
 801514e:	4610      	mov	r0, r2
 8015150:	4619      	mov	r1, r3
 8015152:	a31b      	add	r3, pc, #108	; (adr r3, 80151c0 <GetKWh+0xe8>)
 8015154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015158:	f7fb fa66 	bl	8010628 <__aeabi_dmul>
 801515c:	4602      	mov	r2, r0
 801515e:	460b      	mov	r3, r1
 8015160:	4610      	mov	r0, r2
 8015162:	4619      	mov	r1, r3
 8015164:	f7fb fd58 	bl	8010c18 <__aeabi_d2f>
 8015168:	4603      	mov	r3, r0
 801516a:	607b      	str	r3, [r7, #4]
	PFcount				= GetTestPulse() * 65536 + GetPFReg();
 801516c:	f7ff ff8e 	bl	801508c <GetTestPulse>
 8015170:	4603      	mov	r3, r0
 8015172:	041c      	lsls	r4, r3, #16
 8015174:	f7ff ffa2 	bl	80150bc <GetPFReg>
 8015178:	4603      	mov	r3, r0
 801517a:	4423      	add	r3, r4
 801517c:	603b      	str	r3, [r7, #0]
	//kWh					= (PFData * PF_reg) / (float)pulseCountFor1kWh;
	kWh					= PFcount / (float)pulseCountFor1kWh;
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	ee07 3a90 	vmov	s15, r3
 8015184:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015188:	ed97 7a01 	vldr	s14, [r7, #4]
 801518c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015190:	edc7 7a03 	vstr	s15, [r7, #12]
	//     // energy = total_cf_pulses/((1/power_reg)*(1/(VF*CF))*1000000000*3600);
    //energy = total_cf_pulses/((1/(float)power_coefficient)*(1/1.88)*3600000000000);

	if (kWh < 0) kWh = 0.000000001;
 8015194:	edd7 7a03 	vldr	s15, [r7, #12]
 8015198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801519c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151a0:	d501      	bpl.n	80151a6 <GetKWh+0xce>
 80151a2:	4b0d      	ldr	r3, [pc, #52]	; (80151d8 <GetKWh+0x100>)
 80151a4:	60fb      	str	r3, [r7, #12]

	return kWh;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	ee07 3a90 	vmov	s15, r3
}
 80151ac:	eeb0 0a67 	vmov.f32	s0, s15
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bdb0      	pop	{r4, r5, r7, pc}
 80151b6:	bf00      	nop
 80151b8:	00000000 	.word	0x00000000
 80151bc:	41cdcd65 	.word	0x41cdcd65
 80151c0:	00000000 	.word	0x00000000
 80151c4:	40ac2000 	.word	0x40ac2000
 80151c8:	200008e8 	.word	0x200008e8
 80151cc:	3ff00000 	.word	0x3ff00000
 80151d0:	200000b4 	.word	0x200000b4
 80151d4:	200000b8 	.word	0x200000b8
 80151d8:	3089705f 	.word	0x3089705f

080151dc <function_prototype>:
uint8_t sFLASH_ReadByte(void);
void sFLASH_SendByte(uint8_t byte);
void sFLASH_CS_LOW(void);
void sFLASH_CS_HIGH(void);

void function_prototype(void){};
 80151dc:	b480      	push	{r7}
 80151de:	af00      	add	r7, sp, #0
 80151e0:	bf00      	nop
 80151e2:	46bd      	mov	sp, r7
 80151e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e8:	4770      	bx	lr
	...

080151ec <SPI_flash_reg_cb>:

//void (*flash_conf.select_chip)() = &function_prototype;

/* Private functions ---------------------------------------------------------*/
void SPI_flash_reg_cb(void (*chip_select)(void), void (*chip_deselect)(void), uint8_t (*receive_byte)(void), void (*send_byte)(uint8_t)){
 80151ec:	b480      	push	{r7}
 80151ee:	b085      	sub	sp, #20
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	607a      	str	r2, [r7, #4]
 80151f8:	603b      	str	r3, [r7, #0]

	if (chip_select){
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d003      	beq.n	8015208 <SPI_flash_reg_cb+0x1c>
		flash_conf.select_chip		= chip_select;
 8015200:	4a0e      	ldr	r2, [pc, #56]	; (801523c <SPI_flash_reg_cb+0x50>)
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	60d3      	str	r3, [r2, #12]
 8015206:	e002      	b.n	801520e <SPI_flash_reg_cb+0x22>
	}else{
		flash_conf.select_chip		= function_prototype;
 8015208:	4b0c      	ldr	r3, [pc, #48]	; (801523c <SPI_flash_reg_cb+0x50>)
 801520a:	4a0d      	ldr	r2, [pc, #52]	; (8015240 <SPI_flash_reg_cb+0x54>)
 801520c:	60da      	str	r2, [r3, #12]
	}
	if (chip_deselect){
 801520e:	68bb      	ldr	r3, [r7, #8]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d003      	beq.n	801521c <SPI_flash_reg_cb+0x30>
		flash_conf.deselect_chip	= chip_deselect;
 8015214:	4a09      	ldr	r2, [pc, #36]	; (801523c <SPI_flash_reg_cb+0x50>)
 8015216:	68bb      	ldr	r3, [r7, #8]
 8015218:	6113      	str	r3, [r2, #16]
 801521a:	e002      	b.n	8015222 <SPI_flash_reg_cb+0x36>
	}else{
		flash_conf.deselect_chip	= function_prototype;
 801521c:	4b07      	ldr	r3, [pc, #28]	; (801523c <SPI_flash_reg_cb+0x50>)
 801521e:	4a08      	ldr	r2, [pc, #32]	; (8015240 <SPI_flash_reg_cb+0x54>)
 8015220:	611a      	str	r2, [r3, #16]
	}

	flash_conf.receive_byte		= receive_byte;
 8015222:	4a06      	ldr	r2, [pc, #24]	; (801523c <SPI_flash_reg_cb+0x50>)
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6053      	str	r3, [r2, #4]
	flash_conf.send_byte		= send_byte;
 8015228:	4a04      	ldr	r2, [pc, #16]	; (801523c <SPI_flash_reg_cb+0x50>)
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	6093      	str	r3, [r2, #8]

}
 801522e:	bf00      	nop
 8015230:	3714      	adds	r7, #20
 8015232:	46bd      	mov	sp, r7
 8015234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015238:	4770      	bx	lr
 801523a:	bf00      	nop
 801523c:	20000904 	.word	0x20000904
 8015240:	080151dd 	.word	0x080151dd

08015244 <sFLASH_Reset>:
//	flash_conf.deselect_chip = FlashChipDeselect;
//	flash_conf.receive_byte = SPI_ReceiveByte;
//	flash_conf.send_byte = SPI_SendByte;
}

void sFLASH_Reset(void){
 8015244:	b580      	push	{r7, lr}
 8015246:	af00      	add	r7, sp, #0
//    cs_set();
//    tx_buf[0] = W25_ENABLE_RESET;
//    tx_buf[1] = W25_RESET;
//    SPI1_Send(tx_buf, 2);
//    cs_reset();
    sFLASH_CS_LOW();
 8015248:	f000 f89c 	bl	8015384 <sFLASH_CS_LOW>
    sFLASH_SendByte(sFLASH_CMD_ENABLE_RESET);
 801524c:	2066      	movs	r0, #102	; 0x66
 801524e:	f000 fa1f 	bl	8015690 <sFLASH_SendByte>
    sFLASH_SendByte(sFLASH_CMD_RESET);
 8015252:	2099      	movs	r0, #153	; 0x99
 8015254:	f000 fa1c 	bl	8015690 <sFLASH_SendByte>
    sFLASH_CS_HIGH();
 8015258:	f000 f89e 	bl	8015398 <sFLASH_CS_HIGH>
}
 801525c:	bf00      	nop
 801525e:	bd80      	pop	{r7, pc}

08015260 <sFLASH_GetInfo>:
    HAL_Delay(100);
    unsigned int id = W25_Read_ID();

}

struct SPI_flash_info sFLASH_GetInfo(void){
 8015260:	b590      	push	{r4, r7, lr}
 8015262:	b085      	sub	sp, #20
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
	uint32_t flash_id;

//	HAL_Delay(100);
	sFLASH_Reset();
 8015268:	f7ff ffec 	bl	8015244 <sFLASH_Reset>
//	HAL_Delay(100);
//	HAL_Delay(100);

	flash_id = sFLASH_ReadID();
 801526c:	f000 f9d2 	bl	8015614 <sFLASH_ReadID>
 8015270:	60f8      	str	r0, [r7, #12]

	switch (flash_id) {
 8015272:	68fb      	ldr	r3, [r7, #12]
 8015274:	4a3e      	ldr	r2, [pc, #248]	; (8015370 <sFLASH_GetInfo+0x110>)
 8015276:	4293      	cmp	r3, r2
 8015278:	d03f      	beq.n	80152fa <sFLASH_GetInfo+0x9a>
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	4a3c      	ldr	r2, [pc, #240]	; (8015370 <sFLASH_GetInfo+0x110>)
 801527e:	4293      	cmp	r3, r2
 8015280:	d867      	bhi.n	8015352 <sFLASH_GetInfo+0xf2>
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	4a3b      	ldr	r2, [pc, #236]	; (8015374 <sFLASH_GetInfo+0x114>)
 8015286:	4293      	cmp	r3, r2
 8015288:	d021      	beq.n	80152ce <sFLASH_GetInfo+0x6e>
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	4a39      	ldr	r2, [pc, #228]	; (8015374 <sFLASH_GetInfo+0x114>)
 801528e:	4293      	cmp	r3, r2
 8015290:	d85f      	bhi.n	8015352 <sFLASH_GetInfo+0xf2>
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	4a38      	ldr	r2, [pc, #224]	; (8015378 <sFLASH_GetInfo+0x118>)
 8015296:	4293      	cmp	r3, r2
 8015298:	d045      	beq.n	8015326 <sFLASH_GetInfo+0xc6>
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	4a37      	ldr	r2, [pc, #220]	; (801537c <sFLASH_GetInfo+0x11c>)
 801529e:	4293      	cmp	r3, r2
 80152a0:	d157      	bne.n	8015352 <sFLASH_GetInfo+0xf2>
		case sFLASH_W25Q16BV_ID:
			flash_info.flash_id = sFLASH_W25Q16BV_ID;
 80152a2:	4b37      	ldr	r3, [pc, #220]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152a4:	4a35      	ldr	r2, [pc, #212]	; (801537c <sFLASH_GetInfo+0x11c>)
 80152a6:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80152a8:	4b35      	ldr	r3, [pc, #212]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152aa:	2201      	movs	r2, #1
 80152ac:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80152ae:	4b34      	ldr	r3, [pc, #208]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152b0:	2201      	movs	r2, #1
 80152b2:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80152b4:	4b32      	ldr	r3, [pc, #200]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80152ba:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80152bc:	4b30      	ldr	r3, [pc, #192]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80152c2:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 512;
 80152c4:	4b2e      	ldr	r3, [pc, #184]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80152ca:	819a      	strh	r2, [r3, #12]
			break;
 80152cc:	e045      	b.n	801535a <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q32BV_ID:
			flash_info.flash_id = sFLASH_W25Q32BV_ID;
 80152ce:	4b2c      	ldr	r3, [pc, #176]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152d0:	4a28      	ldr	r2, [pc, #160]	; (8015374 <sFLASH_GetInfo+0x114>)
 80152d2:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 80152d4:	4b2a      	ldr	r3, [pc, #168]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152d6:	2201      	movs	r2, #1
 80152d8:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 80152da:	4b29      	ldr	r3, [pc, #164]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152dc:	2201      	movs	r2, #1
 80152de:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 80152e0:	4b27      	ldr	r3, [pc, #156]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80152e6:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 80152e8:	4b25      	ldr	r3, [pc, #148]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80152ee:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 80152f0:	4b23      	ldr	r3, [pc, #140]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80152f6:	819a      	strh	r2, [r3, #12]
			break;
 80152f8:	e02f      	b.n	801535a <sFLASH_GetInfo+0xfa>
		case sFLASH_W25Q64BV_ID:
			flash_info.flash_id = sFLASH_W25Q64BV_ID;
 80152fa:	4b21      	ldr	r3, [pc, #132]	; (8015380 <sFLASH_GetInfo+0x120>)
 80152fc:	4a1c      	ldr	r2, [pc, #112]	; (8015370 <sFLASH_GetInfo+0x110>)
 80152fe:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 8015300:	4b1f      	ldr	r3, [pc, #124]	; (8015380 <sFLASH_GetInfo+0x120>)
 8015302:	2201      	movs	r2, #1
 8015304:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015306:	4b1e      	ldr	r3, [pc, #120]	; (8015380 <sFLASH_GetInfo+0x120>)
 8015308:	2201      	movs	r2, #1
 801530a:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 801530c:	4b1c      	ldr	r3, [pc, #112]	; (8015380 <sFLASH_GetInfo+0x120>)
 801530e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015312:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015314:	4b1a      	ldr	r3, [pc, #104]	; (8015380 <sFLASH_GetInfo+0x120>)
 8015316:	f44f 7280 	mov.w	r2, #256	; 0x100
 801531a:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 2048;
 801531c:	4b18      	ldr	r3, [pc, #96]	; (8015380 <sFLASH_GetInfo+0x120>)
 801531e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015322:	819a      	strh	r2, [r3, #12]
			break;
 8015324:	e019      	b.n	801535a <sFLASH_GetInfo+0xfa>
		case sFLASH_MX25L32xxx_ID:
			flash_info.flash_id = sFLASH_MX25L32xxx_ID;
 8015326:	4b16      	ldr	r3, [pc, #88]	; (8015380 <sFLASH_GetInfo+0x120>)
 8015328:	4a13      	ldr	r2, [pc, #76]	; (8015378 <sFLASH_GetInfo+0x118>)
 801532a:	601a      	str	r2, [r3, #0]
			flash_info.read_size = 1;
 801532c:	4b14      	ldr	r3, [pc, #80]	; (8015380 <sFLASH_GetInfo+0x120>)
 801532e:	2201      	movs	r2, #1
 8015330:	809a      	strh	r2, [r3, #4]
			flash_info.write_size = 1;
 8015332:	4b13      	ldr	r3, [pc, #76]	; (8015380 <sFLASH_GetInfo+0x120>)
 8015334:	2201      	movs	r2, #1
 8015336:	80da      	strh	r2, [r3, #6]
			flash_info.erase_size = 4096;
 8015338:	4b11      	ldr	r3, [pc, #68]	; (8015380 <sFLASH_GetInfo+0x120>)
 801533a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801533e:	811a      	strh	r2, [r3, #8]
			flash_info.page_size = 256;
 8015340:	4b0f      	ldr	r3, [pc, #60]	; (8015380 <sFLASH_GetInfo+0x120>)
 8015342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015346:	815a      	strh	r2, [r3, #10]
			flash_info.block_count = 1024;
 8015348:	4b0d      	ldr	r3, [pc, #52]	; (8015380 <sFLASH_GetInfo+0x120>)
 801534a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801534e:	819a      	strh	r2, [r3, #12]
			break;
 8015350:	e003      	b.n	801535a <sFLASH_GetInfo+0xfa>

		default:
			flash_info.flash_id = sFLASH_UNNOUN_ID;
 8015352:	4b0b      	ldr	r3, [pc, #44]	; (8015380 <sFLASH_GetInfo+0x120>)
 8015354:	2200      	movs	r2, #0
 8015356:	601a      	str	r2, [r3, #0]
			break;
 8015358:	bf00      	nop
	}

	return flash_info;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	4a08      	ldr	r2, [pc, #32]	; (8015380 <sFLASH_GetInfo+0x120>)
 801535e:	461c      	mov	r4, r3
 8015360:	4613      	mov	r3, r2
 8015362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

}
 8015368:	6878      	ldr	r0, [r7, #4]
 801536a:	3714      	adds	r7, #20
 801536c:	46bd      	mov	sp, r7
 801536e:	bd90      	pop	{r4, r7, pc}
 8015370:	00ef4017 	.word	0x00ef4017
 8015374:	00ef4016 	.word	0x00ef4016
 8015378:	00c22016 	.word	0x00c22016
 801537c:	00ef4015 	.word	0x00ef4015
 8015380:	20000918 	.word	0x20000918

08015384 <sFLASH_CS_LOW>:

void sFLASH_CS_LOW(void){ //select chip
 8015384:	b580      	push	{r7, lr}
 8015386:	af00      	add	r7, sp, #0

	flash_conf.select_chip();
 8015388:	4b02      	ldr	r3, [pc, #8]	; (8015394 <sFLASH_CS_LOW+0x10>)
 801538a:	68db      	ldr	r3, [r3, #12]
 801538c:	4798      	blx	r3

}
 801538e:	bf00      	nop
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	20000904 	.word	0x20000904

08015398 <sFLASH_CS_HIGH>:

void sFLASH_CS_HIGH(void){ //deselect chip
 8015398:	b580      	push	{r7, lr}
 801539a:	af00      	add	r7, sp, #0

	flash_conf.deselect_chip();
 801539c:	4b02      	ldr	r3, [pc, #8]	; (80153a8 <sFLASH_CS_HIGH+0x10>)
 801539e:	691b      	ldr	r3, [r3, #16]
 80153a0:	4798      	blx	r3
}
 80153a2:	bf00      	nop
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	20000904 	.word	0x20000904

080153ac <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b082      	sub	sp, #8
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 80153b4:	f000 f97c 	bl	80156b0 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80153b8:	f7ff ffe4 	bl	8015384 <sFLASH_CS_LOW>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 80153bc:	2020      	movs	r0, #32
 80153be:	f000 f967 	bl	8015690 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	0c1b      	lsrs	r3, r3, #16
 80153c6:	b2db      	uxtb	r3, r3
 80153c8:	4618      	mov	r0, r3
 80153ca:	f000 f961 	bl	8015690 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	0a1b      	lsrs	r3, r3, #8
 80153d2:	b2db      	uxtb	r3, r3
 80153d4:	4618      	mov	r0, r3
 80153d6:	f000 f95b 	bl	8015690 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	b2db      	uxtb	r3, r3
 80153de:	4618      	mov	r0, r3
 80153e0:	f000 f956 	bl	8015690 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80153e4:	f7ff ffd8 	bl	8015398 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 80153e8:	f000 f96d 	bl	80156c6 <sFLASH_WaitForWriteEnd>
}
 80153ec:	bf00      	nop
 80153ee:	3708      	adds	r7, #8
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}

080153f4 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	4613      	mov	r3, r2
 8015400:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 8015402:	f000 f955 	bl	80156b0 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 8015406:	f7ff ffbd 	bl	8015384 <sFLASH_CS_LOW>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 801540a:	2002      	movs	r0, #2
 801540c:	f000 f940 	bl	8015690 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 8015410:	68bb      	ldr	r3, [r7, #8]
 8015412:	0c1b      	lsrs	r3, r3, #16
 8015414:	b2db      	uxtb	r3, r3
 8015416:	4618      	mov	r0, r3
 8015418:	f000 f93a 	bl	8015690 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	0a1b      	lsrs	r3, r3, #8
 8015420:	b2db      	uxtb	r3, r3
 8015422:	4618      	mov	r0, r3
 8015424:	f000 f934 	bl	8015690 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 8015428:	68bb      	ldr	r3, [r7, #8]
 801542a:	b2db      	uxtb	r3, r3
 801542c:	4618      	mov	r0, r3
 801542e:	f000 f92f 	bl	8015690 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 8015432:	e007      	b.n	8015444 <sFLASH_WritePage+0x50>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	781b      	ldrb	r3, [r3, #0]
 8015438:	4618      	mov	r0, r3
 801543a:	f000 f929 	bl	8015690 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	3301      	adds	r3, #1
 8015442:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 8015444:	88fb      	ldrh	r3, [r7, #6]
 8015446:	1e5a      	subs	r2, r3, #1
 8015448:	80fa      	strh	r2, [r7, #6]
 801544a:	2b00      	cmp	r3, #0
 801544c:	d1f2      	bne.n	8015434 <sFLASH_WritePage+0x40>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801544e:	f7ff ffa3 	bl	8015398 <sFLASH_CS_HIGH>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 8015452:	f000 f938 	bl	80156c6 <sFLASH_WaitForWriteEnd>
}
 8015456:	bf00      	nop
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}

0801545e <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 801545e:	b580      	push	{r7, lr}
 8015460:	b086      	sub	sp, #24
 8015462:	af00      	add	r7, sp, #0
 8015464:	60f8      	str	r0, [r7, #12]
 8015466:	60b9      	str	r1, [r7, #8]
 8015468:	4613      	mov	r3, r2
 801546a:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 801546c:	2300      	movs	r3, #0
 801546e:	75fb      	strb	r3, [r7, #23]
 8015470:	2300      	movs	r3, #0
 8015472:	75bb      	strb	r3, [r7, #22]
 8015474:	2300      	movs	r3, #0
 8015476:	757b      	strb	r3, [r7, #21]
 8015478:	2300      	movs	r3, #0
 801547a:	753b      	strb	r3, [r7, #20]
 801547c:	2300      	movs	r3, #0
 801547e:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 8015484:	7d7b      	ldrb	r3, [r7, #21]
 8015486:	425b      	negs	r3, r3
 8015488:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 801548a:	88fb      	ldrh	r3, [r7, #6]
 801548c:	0a1b      	lsrs	r3, r3, #8
 801548e:	b29b      	uxth	r3, r3
 8015490:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 8015492:	88fb      	ldrh	r3, [r7, #6]
 8015494:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 8015496:	7d7b      	ldrb	r3, [r7, #21]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d124      	bne.n	80154e6 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 801549c:	7dfb      	ldrb	r3, [r7, #23]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d114      	bne.n	80154cc <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 80154a2:	88fb      	ldrh	r3, [r7, #6]
 80154a4:	461a      	mov	r2, r3
 80154a6:	68b9      	ldr	r1, [r7, #8]
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f7ff ffa3 	bl	80153f4 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 80154ae:	e07b      	b.n	80155a8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 80154b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80154b4:	68b9      	ldr	r1, [r7, #8]
 80154b6:	68f8      	ldr	r0, [r7, #12]
 80154b8:	f7ff ff9c 	bl	80153f4 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 80154bc:	68bb      	ldr	r3, [r7, #8]
 80154be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80154c2:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80154ca:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 80154cc:	7dfb      	ldrb	r3, [r7, #23]
 80154ce:	1e5a      	subs	r2, r3, #1
 80154d0:	75fa      	strb	r2, [r7, #23]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d1ec      	bne.n	80154b0 <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 80154d6:	7dbb      	ldrb	r3, [r7, #22]
 80154d8:	b29b      	uxth	r3, r3
 80154da:	461a      	mov	r2, r3
 80154dc:	68b9      	ldr	r1, [r7, #8]
 80154de:	68f8      	ldr	r0, [r7, #12]
 80154e0:	f7ff ff88 	bl	80153f4 <sFLASH_WritePage>
}
 80154e4:	e060      	b.n	80155a8 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 80154e6:	7dfb      	ldrb	r3, [r7, #23]
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d125      	bne.n	8015538 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 80154ec:	7dba      	ldrb	r2, [r7, #22]
 80154ee:	7d3b      	ldrb	r3, [r7, #20]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d91a      	bls.n	801552a <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 80154f4:	7dba      	ldrb	r2, [r7, #22]
 80154f6:	7d3b      	ldrb	r3, [r7, #20]
 80154f8:	1ad3      	subs	r3, r2, r3
 80154fa:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 80154fc:	7d3b      	ldrb	r3, [r7, #20]
 80154fe:	b29b      	uxth	r3, r3
 8015500:	461a      	mov	r2, r3
 8015502:	68b9      	ldr	r1, [r7, #8]
 8015504:	68f8      	ldr	r0, [r7, #12]
 8015506:	f7ff ff75 	bl	80153f4 <sFLASH_WritePage>
        WriteAddr +=  count;
 801550a:	7d3b      	ldrb	r3, [r7, #20]
 801550c:	68ba      	ldr	r2, [r7, #8]
 801550e:	4413      	add	r3, r2
 8015510:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 8015512:	7d3b      	ldrb	r3, [r7, #20]
 8015514:	68fa      	ldr	r2, [r7, #12]
 8015516:	4413      	add	r3, r2
 8015518:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 801551a:	7cfb      	ldrb	r3, [r7, #19]
 801551c:	b29b      	uxth	r3, r3
 801551e:	461a      	mov	r2, r3
 8015520:	68b9      	ldr	r1, [r7, #8]
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f7ff ff66 	bl	80153f4 <sFLASH_WritePage>
}
 8015528:	e03e      	b.n	80155a8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 801552a:	88fb      	ldrh	r3, [r7, #6]
 801552c:	461a      	mov	r2, r3
 801552e:	68b9      	ldr	r1, [r7, #8]
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	f7ff ff5f 	bl	80153f4 <sFLASH_WritePage>
}
 8015536:	e037      	b.n	80155a8 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 8015538:	7d3b      	ldrb	r3, [r7, #20]
 801553a:	b29b      	uxth	r3, r3
 801553c:	88fa      	ldrh	r2, [r7, #6]
 801553e:	1ad3      	subs	r3, r2, r3
 8015540:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 8015542:	88fb      	ldrh	r3, [r7, #6]
 8015544:	0a1b      	lsrs	r3, r3, #8
 8015546:	b29b      	uxth	r3, r3
 8015548:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 801554a:	88fb      	ldrh	r3, [r7, #6]
 801554c:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 801554e:	7d3b      	ldrb	r3, [r7, #20]
 8015550:	b29b      	uxth	r3, r3
 8015552:	461a      	mov	r2, r3
 8015554:	68b9      	ldr	r1, [r7, #8]
 8015556:	68f8      	ldr	r0, [r7, #12]
 8015558:	f7ff ff4c 	bl	80153f4 <sFLASH_WritePage>
      WriteAddr +=  count;
 801555c:	7d3b      	ldrb	r3, [r7, #20]
 801555e:	68ba      	ldr	r2, [r7, #8]
 8015560:	4413      	add	r3, r2
 8015562:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 8015564:	7d3b      	ldrb	r3, [r7, #20]
 8015566:	68fa      	ldr	r2, [r7, #12]
 8015568:	4413      	add	r3, r2
 801556a:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 801556c:	e00d      	b.n	801558a <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 801556e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015572:	68b9      	ldr	r1, [r7, #8]
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	f7ff ff3d 	bl	80153f4 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015580:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015588:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 801558a:	7dfb      	ldrb	r3, [r7, #23]
 801558c:	1e5a      	subs	r2, r3, #1
 801558e:	75fa      	strb	r2, [r7, #23]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d1ec      	bne.n	801556e <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 8015594:	7dbb      	ldrb	r3, [r7, #22]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d006      	beq.n	80155a8 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 801559a:	7dbb      	ldrb	r3, [r7, #22]
 801559c:	b29b      	uxth	r3, r3
 801559e:	461a      	mov	r2, r3
 80155a0:	68b9      	ldr	r1, [r7, #8]
 80155a2:	68f8      	ldr	r0, [r7, #12]
 80155a4:	f7ff ff26 	bl	80153f4 <sFLASH_WritePage>
}
 80155a8:	bf00      	nop
 80155aa:	3718      	adds	r7, #24
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}

080155b0 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b084      	sub	sp, #16
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	4613      	mov	r3, r2
 80155bc:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80155be:	f7ff fee1 	bl	8015384 <sFLASH_CS_LOW>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 80155c2:	2003      	movs	r0, #3
 80155c4:	f000 f864 	bl	8015690 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	0c1b      	lsrs	r3, r3, #16
 80155cc:	b2db      	uxtb	r3, r3
 80155ce:	4618      	mov	r0, r3
 80155d0:	f000 f85e 	bl	8015690 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	0a1b      	lsrs	r3, r3, #8
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	4618      	mov	r0, r3
 80155dc:	f000 f858 	bl	8015690 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	b2db      	uxtb	r3, r3
 80155e4:	4618      	mov	r0, r3
 80155e6:	f000 f853 	bl	8015690 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 80155ea:	e008      	b.n	80155fe <sFLASH_ReadBuffer+0x4e>
  {
    /*!< Read a byte from the FLASH */
    //*pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  *pBuffer = sFLASH_ReadByte();
 80155ec:	f000 f846 	bl	801567c <sFLASH_ReadByte>
 80155f0:	4603      	mov	r3, r0
 80155f2:	461a      	mov	r2, r3
 80155f4:	68fb      	ldr	r3, [r7, #12]
 80155f6:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	3301      	adds	r3, #1
 80155fc:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 80155fe:	88fb      	ldrh	r3, [r7, #6]
 8015600:	1e5a      	subs	r2, r3, #1
 8015602:	80fa      	strh	r2, [r7, #6]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d1f1      	bne.n	80155ec <sFLASH_ReadBuffer+0x3c>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 8015608:	f7ff fec6 	bl	8015398 <sFLASH_CS_HIGH>
}
 801560c:	bf00      	nop
 801560e:	3710      	adds	r7, #16
 8015610:	46bd      	mov	sp, r7
 8015612:	bd80      	pop	{r7, pc}

08015614 <sFLASH_ReadID>:
  * @brief  Reads FLASH identification.
  * @param  None
  * @retval FLASH identification
  */
uint32_t sFLASH_ReadID(void)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b084      	sub	sp, #16
 8015618:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 801561a:	2300      	movs	r3, #0
 801561c:	60fb      	str	r3, [r7, #12]
 801561e:	2300      	movs	r3, #0
 8015620:	60bb      	str	r3, [r7, #8]
 8015622:	2300      	movs	r3, #0
 8015624:	607b      	str	r3, [r7, #4]
 8015626:	2300      	movs	r3, #0
 8015628:	603b      	str	r3, [r7, #0]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 801562a:	f7ff feab 	bl	8015384 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 801562e:	f7ff feb3 	bl	8015398 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 8015632:	f7ff fea7 	bl	8015384 <sFLASH_CS_LOW>
  sFLASH_CS_HIGH();
 8015636:	f7ff feaf 	bl	8015398 <sFLASH_CS_HIGH>
  sFLASH_CS_LOW();
 801563a:	f7ff fea3 	bl	8015384 <sFLASH_CS_LOW>


  /*!< Send "RDID " instruction */
  sFLASH_SendByte(sFLASH_CMD_RDID);
 801563e:	209f      	movs	r0, #159	; 0x9f
 8015640:	f000 f826 	bl	8015690 <sFLASH_SendByte>

  /*!< Read a byte from the FLASH */
  Temp0 = sFLASH_ReadByte();
 8015644:	f000 f81a 	bl	801567c <sFLASH_ReadByte>
 8015648:	4603      	mov	r3, r0
 801564a:	60bb      	str	r3, [r7, #8]

  /*!< Read a byte from the FLASH */
  Temp1 = sFLASH_ReadByte();
 801564c:	f000 f816 	bl	801567c <sFLASH_ReadByte>
 8015650:	4603      	mov	r3, r0
 8015652:	607b      	str	r3, [r7, #4]

  /*!< Read a byte from the FLASH */
  Temp2 = sFLASH_ReadByte();
 8015654:	f000 f812 	bl	801567c <sFLASH_ReadByte>
 8015658:	4603      	mov	r3, r0
 801565a:	603b      	str	r3, [r7, #0]

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 801565c:	f7ff fe9c 	bl	8015398 <sFLASH_CS_HIGH>

  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	041a      	lsls	r2, r3, #16
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	021b      	lsls	r3, r3, #8
 8015668:	4313      	orrs	r3, r2
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	4313      	orrs	r3, r2
 801566e:	60fb      	str	r3, [r7, #12]

  return Temp;
 8015670:	68fb      	ldr	r3, [r7, #12]
}
 8015672:	4618      	mov	r0, r3
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}
	...

0801567c <sFLASH_ReadByte>:
  *         has been previously called.
  * @param  None
  * @retval Byte Read from the SPI Flash.
  */
uint8_t sFLASH_ReadByte(void)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	af00      	add	r7, sp, #0
	return flash_conf.receive_byte();
 8015680:	4b02      	ldr	r3, [pc, #8]	; (801568c <sFLASH_ReadByte+0x10>)
 8015682:	685b      	ldr	r3, [r3, #4]
 8015684:	4798      	blx	r3
 8015686:	4603      	mov	r3, r0
}
 8015688:	4618      	mov	r0, r3
 801568a:	bd80      	pop	{r7, pc}
 801568c:	20000904 	.word	0x20000904

08015690 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
void sFLASH_SendByte(uint8_t byte)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	4603      	mov	r3, r0
 8015698:	71fb      	strb	r3, [r7, #7]
	flash_conf.send_byte(byte);
 801569a:	4b04      	ldr	r3, [pc, #16]	; (80156ac <sFLASH_SendByte+0x1c>)
 801569c:	689b      	ldr	r3, [r3, #8]
 801569e:	79fa      	ldrb	r2, [r7, #7]
 80156a0:	4610      	mov	r0, r2
 80156a2:	4798      	blx	r3
}
 80156a4:	bf00      	nop
 80156a6:	3708      	adds	r7, #8
 80156a8:	46bd      	mov	sp, r7
 80156aa:	bd80      	pop	{r7, pc}
 80156ac:	20000904 	.word	0x20000904

080156b0 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 80156b0:	b580      	push	{r7, lr}
 80156b2:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80156b4:	f7ff fe66 	bl	8015384 <sFLASH_CS_LOW>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 80156b8:	2006      	movs	r0, #6
 80156ba:	f7ff ffe9 	bl	8015690 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80156be:	f7ff fe6b 	bl	8015398 <sFLASH_CS_HIGH>
}
 80156c2:	bf00      	nop
 80156c4:	bd80      	pop	{r7, pc}

080156c6 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 80156c6:	b580      	push	{r7, lr}
 80156c8:	b082      	sub	sp, #8
 80156ca:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 80156cc:	2300      	movs	r3, #0
 80156ce:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 80156d0:	f7ff fe58 	bl	8015384 <sFLASH_CS_LOW>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 80156d4:	2005      	movs	r0, #5
 80156d6:	f7ff ffdb 	bl	8015690 <sFLASH_SendByte>
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    //flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
	  flashstatus = sFLASH_ReadByte();
 80156da:	f7ff ffcf 	bl	801567c <sFLASH_ReadByte>
 80156de:	4603      	mov	r3, r0
 80156e0:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 80156e2:	79fb      	ldrb	r3, [r7, #7]
 80156e4:	f003 0301 	and.w	r3, r3, #1
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1f6      	bne.n	80156da <sFLASH_WaitForWriteEnd+0x14>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 80156ec:	f7ff fe54 	bl	8015398 <sFLASH_CS_HIGH>
}
 80156f0:	bf00      	nop
 80156f2:	3708      	adds	r7, #8
 80156f4:	46bd      	mov	sp, r7
 80156f6:	bd80      	pop	{r7, pc}

080156f8 <SPI_flash_set>:
#include "SPI_flash_io.h"


SPI_HandleTypeDef spi_interface;

void SPI_flash_set(SPI_HandleTypeDef hspi){
 80156f8:	b084      	sub	sp, #16
 80156fa:	b580      	push	{r7, lr}
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	f107 0c08 	add.w	ip, r7, #8
 8015702:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_interface = hspi;
 8015706:	4b07      	ldr	r3, [pc, #28]	; (8015724 <SPI_flash_set+0x2c>)
 8015708:	4618      	mov	r0, r3
 801570a:	f107 0308 	add.w	r3, r7, #8
 801570e:	2258      	movs	r2, #88	; 0x58
 8015710:	4619      	mov	r1, r3
 8015712:	f018 fba0 	bl	802de56 <memcpy>
}
 8015716:	bf00      	nop
 8015718:	46bd      	mov	sp, r7
 801571a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801571e:	b004      	add	sp, #16
 8015720:	4770      	bx	lr
 8015722:	bf00      	nop
 8015724:	20000928 	.word	0x20000928

08015728 <SPI_flash_read_byte>:

uint8_t SPI_flash_read_byte(void){
 8015728:	b580      	push	{r7, lr}
 801572a:	b082      	sub	sp, #8
 801572c:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_interface, &byte, 1, 5000);
 801572e:	1df9      	adds	r1, r7, #7
 8015730:	f241 3388 	movw	r3, #5000	; 0x1388
 8015734:	2201      	movs	r2, #1
 8015736:	4804      	ldr	r0, [pc, #16]	; (8015748 <SPI_flash_read_byte+0x20>)
 8015738:	f001 fa8a 	bl	8016c50 <HAL_SPI_Receive>
	return byte;
 801573c:	79fb      	ldrb	r3, [r7, #7]
}
 801573e:	4618      	mov	r0, r3
 8015740:	3708      	adds	r7, #8
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	20000928 	.word	0x20000928

0801574c <SPI_flash_send_byte>:


void SPI_flash_send_byte(uint8_t byte){
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	4603      	mov	r3, r0
 8015754:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&spi_interface, &byte, 1, 5000);
 8015756:	1df9      	adds	r1, r7, #7
 8015758:	f241 3388 	movw	r3, #5000	; 0x1388
 801575c:	2201      	movs	r2, #1
 801575e:	4803      	ldr	r0, [pc, #12]	; (801576c <SPI_flash_send_byte+0x20>)
 8015760:	f001 f933 	bl	80169ca <HAL_SPI_Transmit>

}
 8015764:	bf00      	nop
 8015766:	3708      	adds	r7, #8
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}
 801576c:	20000928 	.word	0x20000928

08015770 <SPI_flash_select>:

void SPI_flash_select(void){
 8015770:	b580      	push	{r7, lr}
 8015772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8015774:	2200      	movs	r2, #0
 8015776:	2110      	movs	r1, #16
 8015778:	4802      	ldr	r0, [pc, #8]	; (8015784 <SPI_flash_select+0x14>)
 801577a:	f000 fb67 	bl	8015e4c <HAL_GPIO_WritePin>
}
 801577e:	bf00      	nop
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	40020000 	.word	0x40020000

08015788 <SPI_flash_deselect>:

void SPI_flash_deselect(void){
 8015788:	b580      	push	{r7, lr}
 801578a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 801578c:	2201      	movs	r2, #1
 801578e:	2110      	movs	r1, #16
 8015790:	4802      	ldr	r0, [pc, #8]	; (801579c <SPI_flash_deselect+0x14>)
 8015792:	f000 fb5b 	bl	8015e4c <HAL_GPIO_WritePin>
}
 8015796:	bf00      	nop
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	40020000 	.word	0x40020000

080157a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80157a4:	4b0e      	ldr	r3, [pc, #56]	; (80157e0 <HAL_Init+0x40>)
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	4a0d      	ldr	r2, [pc, #52]	; (80157e0 <HAL_Init+0x40>)
 80157aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80157ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80157b0:	4b0b      	ldr	r3, [pc, #44]	; (80157e0 <HAL_Init+0x40>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	4a0a      	ldr	r2, [pc, #40]	; (80157e0 <HAL_Init+0x40>)
 80157b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80157ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80157bc:	4b08      	ldr	r3, [pc, #32]	; (80157e0 <HAL_Init+0x40>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	4a07      	ldr	r2, [pc, #28]	; (80157e0 <HAL_Init+0x40>)
 80157c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80157c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80157c8:	2003      	movs	r0, #3
 80157ca:	f000 f8d8 	bl	801597e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80157ce:	200f      	movs	r0, #15
 80157d0:	f7fd f98e 	bl	8012af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80157d4:	f7fd f870 	bl	80128b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80157d8:	2300      	movs	r3, #0
}
 80157da:	4618      	mov	r0, r3
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	40023c00 	.word	0x40023c00

080157e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80157e4:	b480      	push	{r7}
 80157e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80157e8:	4b06      	ldr	r3, [pc, #24]	; (8015804 <HAL_IncTick+0x20>)
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	461a      	mov	r2, r3
 80157ee:	4b06      	ldr	r3, [pc, #24]	; (8015808 <HAL_IncTick+0x24>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	4413      	add	r3, r2
 80157f4:	4a04      	ldr	r2, [pc, #16]	; (8015808 <HAL_IncTick+0x24>)
 80157f6:	6013      	str	r3, [r2, #0]
}
 80157f8:	bf00      	nop
 80157fa:	46bd      	mov	sp, r7
 80157fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015800:	4770      	bx	lr
 8015802:	bf00      	nop
 8015804:	200000c0 	.word	0x200000c0
 8015808:	20000980 	.word	0x20000980

0801580c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801580c:	b480      	push	{r7}
 801580e:	af00      	add	r7, sp, #0
  return uwTick;
 8015810:	4b03      	ldr	r3, [pc, #12]	; (8015820 <HAL_GetTick+0x14>)
 8015812:	681b      	ldr	r3, [r3, #0]
}
 8015814:	4618      	mov	r0, r3
 8015816:	46bd      	mov	sp, r7
 8015818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581c:	4770      	bx	lr
 801581e:	bf00      	nop
 8015820:	20000980 	.word	0x20000980

08015824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8015824:	b480      	push	{r7}
 8015826:	b085      	sub	sp, #20
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	f003 0307 	and.w	r3, r3, #7
 8015832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8015834:	4b0c      	ldr	r3, [pc, #48]	; (8015868 <__NVIC_SetPriorityGrouping+0x44>)
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801583a:	68ba      	ldr	r2, [r7, #8]
 801583c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8015840:	4013      	ands	r3, r2
 8015842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801584c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8015850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8015856:	4a04      	ldr	r2, [pc, #16]	; (8015868 <__NVIC_SetPriorityGrouping+0x44>)
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	60d3      	str	r3, [r2, #12]
}
 801585c:	bf00      	nop
 801585e:	3714      	adds	r7, #20
 8015860:	46bd      	mov	sp, r7
 8015862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015866:	4770      	bx	lr
 8015868:	e000ed00 	.word	0xe000ed00

0801586c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801586c:	b480      	push	{r7}
 801586e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8015870:	4b04      	ldr	r3, [pc, #16]	; (8015884 <__NVIC_GetPriorityGrouping+0x18>)
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	0a1b      	lsrs	r3, r3, #8
 8015876:	f003 0307 	and.w	r3, r3, #7
}
 801587a:	4618      	mov	r0, r3
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr
 8015884:	e000ed00 	.word	0xe000ed00

08015888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8015888:	b480      	push	{r7}
 801588a:	b083      	sub	sp, #12
 801588c:	af00      	add	r7, sp, #0
 801588e:	4603      	mov	r3, r0
 8015890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015896:	2b00      	cmp	r3, #0
 8015898:	db0b      	blt.n	80158b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801589a:	79fb      	ldrb	r3, [r7, #7]
 801589c:	f003 021f 	and.w	r2, r3, #31
 80158a0:	4907      	ldr	r1, [pc, #28]	; (80158c0 <__NVIC_EnableIRQ+0x38>)
 80158a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158a6:	095b      	lsrs	r3, r3, #5
 80158a8:	2001      	movs	r0, #1
 80158aa:	fa00 f202 	lsl.w	r2, r0, r2
 80158ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80158b2:	bf00      	nop
 80158b4:	370c      	adds	r7, #12
 80158b6:	46bd      	mov	sp, r7
 80158b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158bc:	4770      	bx	lr
 80158be:	bf00      	nop
 80158c0:	e000e100 	.word	0xe000e100

080158c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80158c4:	b480      	push	{r7}
 80158c6:	b083      	sub	sp, #12
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	4603      	mov	r3, r0
 80158cc:	6039      	str	r1, [r7, #0]
 80158ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80158d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	db0a      	blt.n	80158ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80158d8:	683b      	ldr	r3, [r7, #0]
 80158da:	b2da      	uxtb	r2, r3
 80158dc:	490c      	ldr	r1, [pc, #48]	; (8015910 <__NVIC_SetPriority+0x4c>)
 80158de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158e2:	0112      	lsls	r2, r2, #4
 80158e4:	b2d2      	uxtb	r2, r2
 80158e6:	440b      	add	r3, r1
 80158e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80158ec:	e00a      	b.n	8015904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	b2da      	uxtb	r2, r3
 80158f2:	4908      	ldr	r1, [pc, #32]	; (8015914 <__NVIC_SetPriority+0x50>)
 80158f4:	79fb      	ldrb	r3, [r7, #7]
 80158f6:	f003 030f 	and.w	r3, r3, #15
 80158fa:	3b04      	subs	r3, #4
 80158fc:	0112      	lsls	r2, r2, #4
 80158fe:	b2d2      	uxtb	r2, r2
 8015900:	440b      	add	r3, r1
 8015902:	761a      	strb	r2, [r3, #24]
}
 8015904:	bf00      	nop
 8015906:	370c      	adds	r7, #12
 8015908:	46bd      	mov	sp, r7
 801590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801590e:	4770      	bx	lr
 8015910:	e000e100 	.word	0xe000e100
 8015914:	e000ed00 	.word	0xe000ed00

08015918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8015918:	b480      	push	{r7}
 801591a:	b089      	sub	sp, #36	; 0x24
 801591c:	af00      	add	r7, sp, #0
 801591e:	60f8      	str	r0, [r7, #12]
 8015920:	60b9      	str	r1, [r7, #8]
 8015922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	f003 0307 	and.w	r3, r3, #7
 801592a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	f1c3 0307 	rsb	r3, r3, #7
 8015932:	2b04      	cmp	r3, #4
 8015934:	bf28      	it	cs
 8015936:	2304      	movcs	r3, #4
 8015938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	3304      	adds	r3, #4
 801593e:	2b06      	cmp	r3, #6
 8015940:	d902      	bls.n	8015948 <NVIC_EncodePriority+0x30>
 8015942:	69fb      	ldr	r3, [r7, #28]
 8015944:	3b03      	subs	r3, #3
 8015946:	e000      	b.n	801594a <NVIC_EncodePriority+0x32>
 8015948:	2300      	movs	r3, #0
 801594a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801594c:	f04f 32ff 	mov.w	r2, #4294967295
 8015950:	69bb      	ldr	r3, [r7, #24]
 8015952:	fa02 f303 	lsl.w	r3, r2, r3
 8015956:	43da      	mvns	r2, r3
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	401a      	ands	r2, r3
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8015960:	f04f 31ff 	mov.w	r1, #4294967295
 8015964:	697b      	ldr	r3, [r7, #20]
 8015966:	fa01 f303 	lsl.w	r3, r1, r3
 801596a:	43d9      	mvns	r1, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8015970:	4313      	orrs	r3, r2
         );
}
 8015972:	4618      	mov	r0, r3
 8015974:	3724      	adds	r7, #36	; 0x24
 8015976:	46bd      	mov	sp, r7
 8015978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597c:	4770      	bx	lr

0801597e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801597e:	b580      	push	{r7, lr}
 8015980:	b082      	sub	sp, #8
 8015982:	af00      	add	r7, sp, #0
 8015984:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8015986:	6878      	ldr	r0, [r7, #4]
 8015988:	f7ff ff4c 	bl	8015824 <__NVIC_SetPriorityGrouping>
}
 801598c:	bf00      	nop
 801598e:	3708      	adds	r7, #8
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}

08015994 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8015994:	b580      	push	{r7, lr}
 8015996:	b086      	sub	sp, #24
 8015998:	af00      	add	r7, sp, #0
 801599a:	4603      	mov	r3, r0
 801599c:	60b9      	str	r1, [r7, #8]
 801599e:	607a      	str	r2, [r7, #4]
 80159a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80159a2:	2300      	movs	r3, #0
 80159a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80159a6:	f7ff ff61 	bl	801586c <__NVIC_GetPriorityGrouping>
 80159aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80159ac:	687a      	ldr	r2, [r7, #4]
 80159ae:	68b9      	ldr	r1, [r7, #8]
 80159b0:	6978      	ldr	r0, [r7, #20]
 80159b2:	f7ff ffb1 	bl	8015918 <NVIC_EncodePriority>
 80159b6:	4602      	mov	r2, r0
 80159b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80159bc:	4611      	mov	r1, r2
 80159be:	4618      	mov	r0, r3
 80159c0:	f7ff ff80 	bl	80158c4 <__NVIC_SetPriority>
}
 80159c4:	bf00      	nop
 80159c6:	3718      	adds	r7, #24
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	4603      	mov	r3, r0
 80159d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80159d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80159da:	4618      	mov	r0, r3
 80159dc:	f7ff ff54 	bl	8015888 <__NVIC_EnableIRQ>
}
 80159e0:	bf00      	nop
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}

080159e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b082      	sub	sp, #8
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d101      	bne.n	80159fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80159f6:	2301      	movs	r3, #1
 80159f8:	e00e      	b.n	8015a18 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	795b      	ldrb	r3, [r3, #5]
 80159fe:	b2db      	uxtb	r3, r3
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d105      	bne.n	8015a10 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2200      	movs	r2, #0
 8015a08:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8015a0a:	6878      	ldr	r0, [r7, #4]
 8015a0c:	f7fc ff80 	bl	8012910 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2201      	movs	r2, #1
 8015a14:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8015a16:	2300      	movs	r3, #0
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3708      	adds	r7, #8
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}

08015a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a2c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8015a2e:	f7ff feed 	bl	801580c <HAL_GetTick>
 8015a32:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015a3a:	b2db      	uxtb	r3, r3
 8015a3c:	2b02      	cmp	r3, #2
 8015a3e:	d008      	beq.n	8015a52 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	2280      	movs	r2, #128	; 0x80
 8015a44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8015a4e:	2301      	movs	r3, #1
 8015a50:	e052      	b.n	8015af8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	681a      	ldr	r2, [r3, #0]
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f022 0216 	bic.w	r2, r2, #22
 8015a60:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	695a      	ldr	r2, [r3, #20]
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015a70:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d103      	bne.n	8015a82 <HAL_DMA_Abort+0x62>
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d007      	beq.n	8015a92 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	f022 0208 	bic.w	r2, r2, #8
 8015a90:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	681a      	ldr	r2, [r3, #0]
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	f022 0201 	bic.w	r2, r2, #1
 8015aa0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015aa2:	e013      	b.n	8015acc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8015aa4:	f7ff feb2 	bl	801580c <HAL_GetTick>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	1ad3      	subs	r3, r2, r3
 8015aae:	2b05      	cmp	r3, #5
 8015ab0:	d90c      	bls.n	8015acc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2220      	movs	r2, #32
 8015ab6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2203      	movs	r2, #3
 8015abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8015ac8:	2303      	movs	r3, #3
 8015aca:	e015      	b.n	8015af8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	f003 0301 	and.w	r3, r3, #1
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d1e4      	bne.n	8015aa4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015ade:	223f      	movs	r2, #63	; 0x3f
 8015ae0:	409a      	lsls	r2, r3
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2201      	movs	r2, #1
 8015aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	2200      	movs	r2, #0
 8015af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8015af6:	2300      	movs	r3, #0
}
 8015af8:	4618      	mov	r0, r3
 8015afa:	3710      	adds	r7, #16
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}

08015b00 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015b00:	b480      	push	{r7}
 8015b02:	b083      	sub	sp, #12
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015b0e:	b2db      	uxtb	r3, r3
 8015b10:	2b02      	cmp	r3, #2
 8015b12:	d004      	beq.n	8015b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	2280      	movs	r2, #128	; 0x80
 8015b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8015b1a:	2301      	movs	r3, #1
 8015b1c:	e00c      	b.n	8015b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	2205      	movs	r2, #5
 8015b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	681b      	ldr	r3, [r3, #0]
 8015b30:	f022 0201 	bic.w	r2, r2, #1
 8015b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8015b36:	2300      	movs	r3, #0
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	370c      	adds	r7, #12
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b42:	4770      	bx	lr

08015b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015b44:	b480      	push	{r7}
 8015b46:	b089      	sub	sp, #36	; 0x24
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
 8015b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8015b4e:	2300      	movs	r3, #0
 8015b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8015b52:	2300      	movs	r3, #0
 8015b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8015b56:	2300      	movs	r3, #0
 8015b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	61fb      	str	r3, [r7, #28]
 8015b5e:	e159      	b.n	8015e14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8015b60:	2201      	movs	r2, #1
 8015b62:	69fb      	ldr	r3, [r7, #28]
 8015b64:	fa02 f303 	lsl.w	r3, r2, r3
 8015b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	697a      	ldr	r2, [r7, #20]
 8015b70:	4013      	ands	r3, r2
 8015b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8015b74:	693a      	ldr	r2, [r7, #16]
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	429a      	cmp	r2, r3
 8015b7a:	f040 8148 	bne.w	8015e0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	f003 0303 	and.w	r3, r3, #3
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d005      	beq.n	8015b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	685b      	ldr	r3, [r3, #4]
 8015b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8015b92:	2b02      	cmp	r3, #2
 8015b94:	d130      	bne.n	8015bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	689b      	ldr	r3, [r3, #8]
 8015b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8015b9c:	69fb      	ldr	r3, [r7, #28]
 8015b9e:	005b      	lsls	r3, r3, #1
 8015ba0:	2203      	movs	r2, #3
 8015ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8015ba6:	43db      	mvns	r3, r3
 8015ba8:	69ba      	ldr	r2, [r7, #24]
 8015baa:	4013      	ands	r3, r2
 8015bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	68da      	ldr	r2, [r3, #12]
 8015bb2:	69fb      	ldr	r3, [r7, #28]
 8015bb4:	005b      	lsls	r3, r3, #1
 8015bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8015bba:	69ba      	ldr	r2, [r7, #24]
 8015bbc:	4313      	orrs	r3, r2
 8015bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	69ba      	ldr	r2, [r7, #24]
 8015bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	685b      	ldr	r3, [r3, #4]
 8015bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8015bcc:	2201      	movs	r2, #1
 8015bce:	69fb      	ldr	r3, [r7, #28]
 8015bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8015bd4:	43db      	mvns	r3, r3
 8015bd6:	69ba      	ldr	r2, [r7, #24]
 8015bd8:	4013      	ands	r3, r2
 8015bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	091b      	lsrs	r3, r3, #4
 8015be2:	f003 0201 	and.w	r2, r3, #1
 8015be6:	69fb      	ldr	r3, [r7, #28]
 8015be8:	fa02 f303 	lsl.w	r3, r2, r3
 8015bec:	69ba      	ldr	r2, [r7, #24]
 8015bee:	4313      	orrs	r3, r2
 8015bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	69ba      	ldr	r2, [r7, #24]
 8015bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	685b      	ldr	r3, [r3, #4]
 8015bfc:	f003 0303 	and.w	r3, r3, #3
 8015c00:	2b03      	cmp	r3, #3
 8015c02:	d017      	beq.n	8015c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	68db      	ldr	r3, [r3, #12]
 8015c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	005b      	lsls	r3, r3, #1
 8015c0e:	2203      	movs	r2, #3
 8015c10:	fa02 f303 	lsl.w	r3, r2, r3
 8015c14:	43db      	mvns	r3, r3
 8015c16:	69ba      	ldr	r2, [r7, #24]
 8015c18:	4013      	ands	r3, r2
 8015c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	689a      	ldr	r2, [r3, #8]
 8015c20:	69fb      	ldr	r3, [r7, #28]
 8015c22:	005b      	lsls	r3, r3, #1
 8015c24:	fa02 f303 	lsl.w	r3, r2, r3
 8015c28:	69ba      	ldr	r2, [r7, #24]
 8015c2a:	4313      	orrs	r3, r2
 8015c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	69ba      	ldr	r2, [r7, #24]
 8015c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8015c34:	683b      	ldr	r3, [r7, #0]
 8015c36:	685b      	ldr	r3, [r3, #4]
 8015c38:	f003 0303 	and.w	r3, r3, #3
 8015c3c:	2b02      	cmp	r3, #2
 8015c3e:	d123      	bne.n	8015c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8015c40:	69fb      	ldr	r3, [r7, #28]
 8015c42:	08da      	lsrs	r2, r3, #3
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	3208      	adds	r2, #8
 8015c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8015c4e:	69fb      	ldr	r3, [r7, #28]
 8015c50:	f003 0307 	and.w	r3, r3, #7
 8015c54:	009b      	lsls	r3, r3, #2
 8015c56:	220f      	movs	r2, #15
 8015c58:	fa02 f303 	lsl.w	r3, r2, r3
 8015c5c:	43db      	mvns	r3, r3
 8015c5e:	69ba      	ldr	r2, [r7, #24]
 8015c60:	4013      	ands	r3, r2
 8015c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	691a      	ldr	r2, [r3, #16]
 8015c68:	69fb      	ldr	r3, [r7, #28]
 8015c6a:	f003 0307 	and.w	r3, r3, #7
 8015c6e:	009b      	lsls	r3, r3, #2
 8015c70:	fa02 f303 	lsl.w	r3, r2, r3
 8015c74:	69ba      	ldr	r2, [r7, #24]
 8015c76:	4313      	orrs	r3, r2
 8015c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8015c7a:	69fb      	ldr	r3, [r7, #28]
 8015c7c:	08da      	lsrs	r2, r3, #3
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	3208      	adds	r2, #8
 8015c82:	69b9      	ldr	r1, [r7, #24]
 8015c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	005b      	lsls	r3, r3, #1
 8015c92:	2203      	movs	r2, #3
 8015c94:	fa02 f303 	lsl.w	r3, r2, r3
 8015c98:	43db      	mvns	r3, r3
 8015c9a:	69ba      	ldr	r2, [r7, #24]
 8015c9c:	4013      	ands	r3, r2
 8015c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8015ca0:	683b      	ldr	r3, [r7, #0]
 8015ca2:	685b      	ldr	r3, [r3, #4]
 8015ca4:	f003 0203 	and.w	r2, r3, #3
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	005b      	lsls	r3, r3, #1
 8015cac:	fa02 f303 	lsl.w	r3, r2, r3
 8015cb0:	69ba      	ldr	r2, [r7, #24]
 8015cb2:	4313      	orrs	r3, r2
 8015cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	69ba      	ldr	r2, [r7, #24]
 8015cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	685b      	ldr	r3, [r3, #4]
 8015cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	f000 80a2 	beq.w	8015e0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8015cca:	2300      	movs	r3, #0
 8015ccc:	60fb      	str	r3, [r7, #12]
 8015cce:	4b57      	ldr	r3, [pc, #348]	; (8015e2c <HAL_GPIO_Init+0x2e8>)
 8015cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cd2:	4a56      	ldr	r2, [pc, #344]	; (8015e2c <HAL_GPIO_Init+0x2e8>)
 8015cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8015cda:	4b54      	ldr	r3, [pc, #336]	; (8015e2c <HAL_GPIO_Init+0x2e8>)
 8015cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015ce2:	60fb      	str	r3, [r7, #12]
 8015ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8015ce6:	4a52      	ldr	r2, [pc, #328]	; (8015e30 <HAL_GPIO_Init+0x2ec>)
 8015ce8:	69fb      	ldr	r3, [r7, #28]
 8015cea:	089b      	lsrs	r3, r3, #2
 8015cec:	3302      	adds	r3, #2
 8015cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8015cf4:	69fb      	ldr	r3, [r7, #28]
 8015cf6:	f003 0303 	and.w	r3, r3, #3
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	220f      	movs	r2, #15
 8015cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8015d02:	43db      	mvns	r3, r3
 8015d04:	69ba      	ldr	r2, [r7, #24]
 8015d06:	4013      	ands	r3, r2
 8015d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	4a49      	ldr	r2, [pc, #292]	; (8015e34 <HAL_GPIO_Init+0x2f0>)
 8015d0e:	4293      	cmp	r3, r2
 8015d10:	d019      	beq.n	8015d46 <HAL_GPIO_Init+0x202>
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	4a48      	ldr	r2, [pc, #288]	; (8015e38 <HAL_GPIO_Init+0x2f4>)
 8015d16:	4293      	cmp	r3, r2
 8015d18:	d013      	beq.n	8015d42 <HAL_GPIO_Init+0x1fe>
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	4a47      	ldr	r2, [pc, #284]	; (8015e3c <HAL_GPIO_Init+0x2f8>)
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	d00d      	beq.n	8015d3e <HAL_GPIO_Init+0x1fa>
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	4a46      	ldr	r2, [pc, #280]	; (8015e40 <HAL_GPIO_Init+0x2fc>)
 8015d26:	4293      	cmp	r3, r2
 8015d28:	d007      	beq.n	8015d3a <HAL_GPIO_Init+0x1f6>
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	4a45      	ldr	r2, [pc, #276]	; (8015e44 <HAL_GPIO_Init+0x300>)
 8015d2e:	4293      	cmp	r3, r2
 8015d30:	d101      	bne.n	8015d36 <HAL_GPIO_Init+0x1f2>
 8015d32:	2304      	movs	r3, #4
 8015d34:	e008      	b.n	8015d48 <HAL_GPIO_Init+0x204>
 8015d36:	2307      	movs	r3, #7
 8015d38:	e006      	b.n	8015d48 <HAL_GPIO_Init+0x204>
 8015d3a:	2303      	movs	r3, #3
 8015d3c:	e004      	b.n	8015d48 <HAL_GPIO_Init+0x204>
 8015d3e:	2302      	movs	r3, #2
 8015d40:	e002      	b.n	8015d48 <HAL_GPIO_Init+0x204>
 8015d42:	2301      	movs	r3, #1
 8015d44:	e000      	b.n	8015d48 <HAL_GPIO_Init+0x204>
 8015d46:	2300      	movs	r3, #0
 8015d48:	69fa      	ldr	r2, [r7, #28]
 8015d4a:	f002 0203 	and.w	r2, r2, #3
 8015d4e:	0092      	lsls	r2, r2, #2
 8015d50:	4093      	lsls	r3, r2
 8015d52:	69ba      	ldr	r2, [r7, #24]
 8015d54:	4313      	orrs	r3, r2
 8015d56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8015d58:	4935      	ldr	r1, [pc, #212]	; (8015e30 <HAL_GPIO_Init+0x2ec>)
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	089b      	lsrs	r3, r3, #2
 8015d5e:	3302      	adds	r3, #2
 8015d60:	69ba      	ldr	r2, [r7, #24]
 8015d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8015d66:	4b38      	ldr	r3, [pc, #224]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015d68:	689b      	ldr	r3, [r3, #8]
 8015d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015d6c:	693b      	ldr	r3, [r7, #16]
 8015d6e:	43db      	mvns	r3, r3
 8015d70:	69ba      	ldr	r2, [r7, #24]
 8015d72:	4013      	ands	r3, r2
 8015d74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d003      	beq.n	8015d8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8015d82:	69ba      	ldr	r2, [r7, #24]
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	4313      	orrs	r3, r2
 8015d88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8015d8a:	4a2f      	ldr	r2, [pc, #188]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015d8c:	69bb      	ldr	r3, [r7, #24]
 8015d8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8015d90:	4b2d      	ldr	r3, [pc, #180]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	43db      	mvns	r3, r3
 8015d9a:	69ba      	ldr	r2, [r7, #24]
 8015d9c:	4013      	ands	r3, r2
 8015d9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8015da0:	683b      	ldr	r3, [r7, #0]
 8015da2:	685b      	ldr	r3, [r3, #4]
 8015da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d003      	beq.n	8015db4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8015dac:	69ba      	ldr	r2, [r7, #24]
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	4313      	orrs	r3, r2
 8015db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8015db4:	4a24      	ldr	r2, [pc, #144]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015db6:	69bb      	ldr	r3, [r7, #24]
 8015db8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8015dba:	4b23      	ldr	r3, [pc, #140]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	43db      	mvns	r3, r3
 8015dc4:	69ba      	ldr	r2, [r7, #24]
 8015dc6:	4013      	ands	r3, r2
 8015dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8015dca:	683b      	ldr	r3, [r7, #0]
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d003      	beq.n	8015dde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8015dd6:	69ba      	ldr	r2, [r7, #24]
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	4313      	orrs	r3, r2
 8015ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8015dde:	4a1a      	ldr	r2, [pc, #104]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015de0:	69bb      	ldr	r3, [r7, #24]
 8015de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8015de4:	4b18      	ldr	r3, [pc, #96]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8015dea:	693b      	ldr	r3, [r7, #16]
 8015dec:	43db      	mvns	r3, r3
 8015dee:	69ba      	ldr	r2, [r7, #24]
 8015df0:	4013      	ands	r3, r2
 8015df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d003      	beq.n	8015e08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8015e00:	69ba      	ldr	r2, [r7, #24]
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	4313      	orrs	r3, r2
 8015e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8015e08:	4a0f      	ldr	r2, [pc, #60]	; (8015e48 <HAL_GPIO_Init+0x304>)
 8015e0a:	69bb      	ldr	r3, [r7, #24]
 8015e0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8015e0e:	69fb      	ldr	r3, [r7, #28]
 8015e10:	3301      	adds	r3, #1
 8015e12:	61fb      	str	r3, [r7, #28]
 8015e14:	69fb      	ldr	r3, [r7, #28]
 8015e16:	2b0f      	cmp	r3, #15
 8015e18:	f67f aea2 	bls.w	8015b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8015e1c:	bf00      	nop
 8015e1e:	bf00      	nop
 8015e20:	3724      	adds	r7, #36	; 0x24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e28:	4770      	bx	lr
 8015e2a:	bf00      	nop
 8015e2c:	40023800 	.word	0x40023800
 8015e30:	40013800 	.word	0x40013800
 8015e34:	40020000 	.word	0x40020000
 8015e38:	40020400 	.word	0x40020400
 8015e3c:	40020800 	.word	0x40020800
 8015e40:	40020c00 	.word	0x40020c00
 8015e44:	40021000 	.word	0x40021000
 8015e48:	40013c00 	.word	0x40013c00

08015e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b083      	sub	sp, #12
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	460b      	mov	r3, r1
 8015e56:	807b      	strh	r3, [r7, #2]
 8015e58:	4613      	mov	r3, r2
 8015e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8015e5c:	787b      	ldrb	r3, [r7, #1]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d003      	beq.n	8015e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8015e62:	887a      	ldrh	r2, [r7, #2]
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8015e68:	e003      	b.n	8015e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8015e6a:	887b      	ldrh	r3, [r7, #2]
 8015e6c:	041a      	lsls	r2, r3, #16
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	619a      	str	r2, [r3, #24]
}
 8015e72:	bf00      	nop
 8015e74:	370c      	adds	r7, #12
 8015e76:	46bd      	mov	sp, r7
 8015e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7c:	4770      	bx	lr

08015e7e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8015e7e:	b580      	push	{r7, lr}
 8015e80:	b084      	sub	sp, #16
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d101      	bne.n	8015e90 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8015e8c:	2301      	movs	r3, #1
 8015e8e:	e034      	b.n	8015efa <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8015e98:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	f245 5255 	movw	r2, #21845	; 0x5555
 8015ea2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	6852      	ldr	r2, [r2, #4]
 8015eac:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	6892      	ldr	r2, [r2, #8]
 8015eb6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8015eb8:	f7ff fca8 	bl	801580c <HAL_GetTick>
 8015ebc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015ebe:	e00f      	b.n	8015ee0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8015ec0:	f7ff fca4 	bl	801580c <HAL_GetTick>
 8015ec4:	4602      	mov	r2, r0
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	1ad3      	subs	r3, r2, r3
 8015eca:	2b31      	cmp	r3, #49	; 0x31
 8015ecc:	d908      	bls.n	8015ee0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	68db      	ldr	r3, [r3, #12]
 8015ed4:	f003 0303 	and.w	r3, r3, #3
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d001      	beq.n	8015ee0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8015edc:	2303      	movs	r3, #3
 8015ede:	e00c      	b.n	8015efa <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	68db      	ldr	r3, [r3, #12]
 8015ee6:	f003 0303 	and.w	r3, r3, #3
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d1e8      	bne.n	8015ec0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015ef6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015ef8:	2300      	movs	r3, #0
}
 8015efa:	4618      	mov	r0, r3
 8015efc:	3710      	adds	r7, #16
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}

08015f02 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8015f02:	b480      	push	{r7}
 8015f04:	b083      	sub	sp, #12
 8015f06:	af00      	add	r7, sp, #0
 8015f08:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8015f12:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8015f14:	2300      	movs	r3, #0
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	370c      	adds	r7, #12
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f20:	4770      	bx	lr
	...

08015f24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015f24:	b580      	push	{r7, lr}
 8015f26:	b086      	sub	sp, #24
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d101      	bne.n	8015f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8015f32:	2301      	movs	r3, #1
 8015f34:	e267      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	f003 0301 	and.w	r3, r3, #1
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d075      	beq.n	801602e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015f42:	4b88      	ldr	r3, [pc, #544]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015f44:	689b      	ldr	r3, [r3, #8]
 8015f46:	f003 030c 	and.w	r3, r3, #12
 8015f4a:	2b04      	cmp	r3, #4
 8015f4c:	d00c      	beq.n	8015f68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015f4e:	4b85      	ldr	r3, [pc, #532]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015f50:	689b      	ldr	r3, [r3, #8]
 8015f52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8015f56:	2b08      	cmp	r3, #8
 8015f58:	d112      	bne.n	8015f80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015f5a:	4b82      	ldr	r3, [pc, #520]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015f5c:	685b      	ldr	r3, [r3, #4]
 8015f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015f62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015f66:	d10b      	bne.n	8015f80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015f68:	4b7e      	ldr	r3, [pc, #504]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d05b      	beq.n	801602c <HAL_RCC_OscConfig+0x108>
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d157      	bne.n	801602c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	e242      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015f88:	d106      	bne.n	8015f98 <HAL_RCC_OscConfig+0x74>
 8015f8a:	4b76      	ldr	r3, [pc, #472]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015f8c:	681b      	ldr	r3, [r3, #0]
 8015f8e:	4a75      	ldr	r2, [pc, #468]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015f94:	6013      	str	r3, [r2, #0]
 8015f96:	e01d      	b.n	8015fd4 <HAL_RCC_OscConfig+0xb0>
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	685b      	ldr	r3, [r3, #4]
 8015f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015fa0:	d10c      	bne.n	8015fbc <HAL_RCC_OscConfig+0x98>
 8015fa2:	4b70      	ldr	r3, [pc, #448]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	4a6f      	ldr	r2, [pc, #444]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015fac:	6013      	str	r3, [r2, #0]
 8015fae:	4b6d      	ldr	r3, [pc, #436]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	4a6c      	ldr	r2, [pc, #432]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015fb8:	6013      	str	r3, [r2, #0]
 8015fba:	e00b      	b.n	8015fd4 <HAL_RCC_OscConfig+0xb0>
 8015fbc:	4b69      	ldr	r3, [pc, #420]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	4a68      	ldr	r2, [pc, #416]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015fc6:	6013      	str	r3, [r2, #0]
 8015fc8:	4b66      	ldr	r3, [pc, #408]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	4a65      	ldr	r2, [pc, #404]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015fce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8015fd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	685b      	ldr	r3, [r3, #4]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d013      	beq.n	8016004 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8015fdc:	f7ff fc16 	bl	801580c <HAL_GetTick>
 8015fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015fe2:	e008      	b.n	8015ff6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015fe4:	f7ff fc12 	bl	801580c <HAL_GetTick>
 8015fe8:	4602      	mov	r2, r0
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	1ad3      	subs	r3, r2, r3
 8015fee:	2b64      	cmp	r3, #100	; 0x64
 8015ff0:	d901      	bls.n	8015ff6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8015ff2:	2303      	movs	r3, #3
 8015ff4:	e207      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015ff6:	4b5b      	ldr	r3, [pc, #364]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d0f0      	beq.n	8015fe4 <HAL_RCC_OscConfig+0xc0>
 8016002:	e014      	b.n	801602e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016004:	f7ff fc02 	bl	801580c <HAL_GetTick>
 8016008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801600a:	e008      	b.n	801601e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801600c:	f7ff fbfe 	bl	801580c <HAL_GetTick>
 8016010:	4602      	mov	r2, r0
 8016012:	693b      	ldr	r3, [r7, #16]
 8016014:	1ad3      	subs	r3, r2, r3
 8016016:	2b64      	cmp	r3, #100	; 0x64
 8016018:	d901      	bls.n	801601e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801601a:	2303      	movs	r3, #3
 801601c:	e1f3      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801601e:	4b51      	ldr	r3, [pc, #324]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016026:	2b00      	cmp	r3, #0
 8016028:	d1f0      	bne.n	801600c <HAL_RCC_OscConfig+0xe8>
 801602a:	e000      	b.n	801602e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801602c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	f003 0302 	and.w	r3, r3, #2
 8016036:	2b00      	cmp	r3, #0
 8016038:	d063      	beq.n	8016102 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801603a:	4b4a      	ldr	r3, [pc, #296]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 801603c:	689b      	ldr	r3, [r3, #8]
 801603e:	f003 030c 	and.w	r3, r3, #12
 8016042:	2b00      	cmp	r3, #0
 8016044:	d00b      	beq.n	801605e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016046:	4b47      	ldr	r3, [pc, #284]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8016048:	689b      	ldr	r3, [r3, #8]
 801604a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801604e:	2b08      	cmp	r3, #8
 8016050:	d11c      	bne.n	801608c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8016052:	4b44      	ldr	r3, [pc, #272]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8016054:	685b      	ldr	r3, [r3, #4]
 8016056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801605a:	2b00      	cmp	r3, #0
 801605c:	d116      	bne.n	801608c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801605e:	4b41      	ldr	r3, [pc, #260]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	f003 0302 	and.w	r3, r3, #2
 8016066:	2b00      	cmp	r3, #0
 8016068:	d005      	beq.n	8016076 <HAL_RCC_OscConfig+0x152>
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	68db      	ldr	r3, [r3, #12]
 801606e:	2b01      	cmp	r3, #1
 8016070:	d001      	beq.n	8016076 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8016072:	2301      	movs	r3, #1
 8016074:	e1c7      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016076:	4b3b      	ldr	r3, [pc, #236]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	691b      	ldr	r3, [r3, #16]
 8016082:	00db      	lsls	r3, r3, #3
 8016084:	4937      	ldr	r1, [pc, #220]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8016086:	4313      	orrs	r3, r2
 8016088:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801608a:	e03a      	b.n	8016102 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	68db      	ldr	r3, [r3, #12]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d020      	beq.n	80160d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016094:	4b34      	ldr	r3, [pc, #208]	; (8016168 <HAL_RCC_OscConfig+0x244>)
 8016096:	2201      	movs	r2, #1
 8016098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801609a:	f7ff fbb7 	bl	801580c <HAL_GetTick>
 801609e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80160a0:	e008      	b.n	80160b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80160a2:	f7ff fbb3 	bl	801580c <HAL_GetTick>
 80160a6:	4602      	mov	r2, r0
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	1ad3      	subs	r3, r2, r3
 80160ac:	2b02      	cmp	r3, #2
 80160ae:	d901      	bls.n	80160b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80160b0:	2303      	movs	r3, #3
 80160b2:	e1a8      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80160b4:	4b2b      	ldr	r3, [pc, #172]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	f003 0302 	and.w	r3, r3, #2
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d0f0      	beq.n	80160a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80160c0:	4b28      	ldr	r3, [pc, #160]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	691b      	ldr	r3, [r3, #16]
 80160cc:	00db      	lsls	r3, r3, #3
 80160ce:	4925      	ldr	r1, [pc, #148]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 80160d0:	4313      	orrs	r3, r2
 80160d2:	600b      	str	r3, [r1, #0]
 80160d4:	e015      	b.n	8016102 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80160d6:	4b24      	ldr	r3, [pc, #144]	; (8016168 <HAL_RCC_OscConfig+0x244>)
 80160d8:	2200      	movs	r2, #0
 80160da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80160dc:	f7ff fb96 	bl	801580c <HAL_GetTick>
 80160e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80160e2:	e008      	b.n	80160f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80160e4:	f7ff fb92 	bl	801580c <HAL_GetTick>
 80160e8:	4602      	mov	r2, r0
 80160ea:	693b      	ldr	r3, [r7, #16]
 80160ec:	1ad3      	subs	r3, r2, r3
 80160ee:	2b02      	cmp	r3, #2
 80160f0:	d901      	bls.n	80160f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80160f2:	2303      	movs	r3, #3
 80160f4:	e187      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80160f6:	4b1b      	ldr	r3, [pc, #108]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 80160f8:	681b      	ldr	r3, [r3, #0]
 80160fa:	f003 0302 	and.w	r3, r3, #2
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d1f0      	bne.n	80160e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	681b      	ldr	r3, [r3, #0]
 8016106:	f003 0308 	and.w	r3, r3, #8
 801610a:	2b00      	cmp	r3, #0
 801610c:	d036      	beq.n	801617c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	695b      	ldr	r3, [r3, #20]
 8016112:	2b00      	cmp	r3, #0
 8016114:	d016      	beq.n	8016144 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016116:	4b15      	ldr	r3, [pc, #84]	; (801616c <HAL_RCC_OscConfig+0x248>)
 8016118:	2201      	movs	r2, #1
 801611a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801611c:	f7ff fb76 	bl	801580c <HAL_GetTick>
 8016120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016122:	e008      	b.n	8016136 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016124:	f7ff fb72 	bl	801580c <HAL_GetTick>
 8016128:	4602      	mov	r2, r0
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	1ad3      	subs	r3, r2, r3
 801612e:	2b02      	cmp	r3, #2
 8016130:	d901      	bls.n	8016136 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8016132:	2303      	movs	r3, #3
 8016134:	e167      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8016136:	4b0b      	ldr	r3, [pc, #44]	; (8016164 <HAL_RCC_OscConfig+0x240>)
 8016138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801613a:	f003 0302 	and.w	r3, r3, #2
 801613e:	2b00      	cmp	r3, #0
 8016140:	d0f0      	beq.n	8016124 <HAL_RCC_OscConfig+0x200>
 8016142:	e01b      	b.n	801617c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016144:	4b09      	ldr	r3, [pc, #36]	; (801616c <HAL_RCC_OscConfig+0x248>)
 8016146:	2200      	movs	r2, #0
 8016148:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801614a:	f7ff fb5f 	bl	801580c <HAL_GetTick>
 801614e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016150:	e00e      	b.n	8016170 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8016152:	f7ff fb5b 	bl	801580c <HAL_GetTick>
 8016156:	4602      	mov	r2, r0
 8016158:	693b      	ldr	r3, [r7, #16]
 801615a:	1ad3      	subs	r3, r2, r3
 801615c:	2b02      	cmp	r3, #2
 801615e:	d907      	bls.n	8016170 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8016160:	2303      	movs	r3, #3
 8016162:	e150      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
 8016164:	40023800 	.word	0x40023800
 8016168:	42470000 	.word	0x42470000
 801616c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8016170:	4b88      	ldr	r3, [pc, #544]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016174:	f003 0302 	and.w	r3, r3, #2
 8016178:	2b00      	cmp	r3, #0
 801617a:	d1ea      	bne.n	8016152 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	f003 0304 	and.w	r3, r3, #4
 8016184:	2b00      	cmp	r3, #0
 8016186:	f000 8097 	beq.w	80162b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801618a:	2300      	movs	r3, #0
 801618c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801618e:	4b81      	ldr	r3, [pc, #516]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016196:	2b00      	cmp	r3, #0
 8016198:	d10f      	bne.n	80161ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801619a:	2300      	movs	r3, #0
 801619c:	60bb      	str	r3, [r7, #8]
 801619e:	4b7d      	ldr	r3, [pc, #500]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 80161a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161a2:	4a7c      	ldr	r2, [pc, #496]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 80161a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80161a8:	6413      	str	r3, [r2, #64]	; 0x40
 80161aa:	4b7a      	ldr	r3, [pc, #488]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 80161ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80161b2:	60bb      	str	r3, [r7, #8]
 80161b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80161b6:	2301      	movs	r3, #1
 80161b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80161ba:	4b77      	ldr	r3, [pc, #476]	; (8016398 <HAL_RCC_OscConfig+0x474>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d118      	bne.n	80161f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80161c6:	4b74      	ldr	r3, [pc, #464]	; (8016398 <HAL_RCC_OscConfig+0x474>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4a73      	ldr	r2, [pc, #460]	; (8016398 <HAL_RCC_OscConfig+0x474>)
 80161cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80161d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80161d2:	f7ff fb1b 	bl	801580c <HAL_GetTick>
 80161d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80161d8:	e008      	b.n	80161ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80161da:	f7ff fb17 	bl	801580c <HAL_GetTick>
 80161de:	4602      	mov	r2, r0
 80161e0:	693b      	ldr	r3, [r7, #16]
 80161e2:	1ad3      	subs	r3, r2, r3
 80161e4:	2b02      	cmp	r3, #2
 80161e6:	d901      	bls.n	80161ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80161e8:	2303      	movs	r3, #3
 80161ea:	e10c      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80161ec:	4b6a      	ldr	r3, [pc, #424]	; (8016398 <HAL_RCC_OscConfig+0x474>)
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d0f0      	beq.n	80161da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	689b      	ldr	r3, [r3, #8]
 80161fc:	2b01      	cmp	r3, #1
 80161fe:	d106      	bne.n	801620e <HAL_RCC_OscConfig+0x2ea>
 8016200:	4b64      	ldr	r3, [pc, #400]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016204:	4a63      	ldr	r2, [pc, #396]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016206:	f043 0301 	orr.w	r3, r3, #1
 801620a:	6713      	str	r3, [r2, #112]	; 0x70
 801620c:	e01c      	b.n	8016248 <HAL_RCC_OscConfig+0x324>
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	689b      	ldr	r3, [r3, #8]
 8016212:	2b05      	cmp	r3, #5
 8016214:	d10c      	bne.n	8016230 <HAL_RCC_OscConfig+0x30c>
 8016216:	4b5f      	ldr	r3, [pc, #380]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801621a:	4a5e      	ldr	r2, [pc, #376]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 801621c:	f043 0304 	orr.w	r3, r3, #4
 8016220:	6713      	str	r3, [r2, #112]	; 0x70
 8016222:	4b5c      	ldr	r3, [pc, #368]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016226:	4a5b      	ldr	r2, [pc, #364]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016228:	f043 0301 	orr.w	r3, r3, #1
 801622c:	6713      	str	r3, [r2, #112]	; 0x70
 801622e:	e00b      	b.n	8016248 <HAL_RCC_OscConfig+0x324>
 8016230:	4b58      	ldr	r3, [pc, #352]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016234:	4a57      	ldr	r2, [pc, #348]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016236:	f023 0301 	bic.w	r3, r3, #1
 801623a:	6713      	str	r3, [r2, #112]	; 0x70
 801623c:	4b55      	ldr	r3, [pc, #340]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 801623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016240:	4a54      	ldr	r2, [pc, #336]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016242:	f023 0304 	bic.w	r3, r3, #4
 8016246:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	689b      	ldr	r3, [r3, #8]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d015      	beq.n	801627c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016250:	f7ff fadc 	bl	801580c <HAL_GetTick>
 8016254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8016256:	e00a      	b.n	801626e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8016258:	f7ff fad8 	bl	801580c <HAL_GetTick>
 801625c:	4602      	mov	r2, r0
 801625e:	693b      	ldr	r3, [r7, #16]
 8016260:	1ad3      	subs	r3, r2, r3
 8016262:	f241 3288 	movw	r2, #5000	; 0x1388
 8016266:	4293      	cmp	r3, r2
 8016268:	d901      	bls.n	801626e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 801626a:	2303      	movs	r3, #3
 801626c:	e0cb      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801626e:	4b49      	ldr	r3, [pc, #292]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016272:	f003 0302 	and.w	r3, r3, #2
 8016276:	2b00      	cmp	r3, #0
 8016278:	d0ee      	beq.n	8016258 <HAL_RCC_OscConfig+0x334>
 801627a:	e014      	b.n	80162a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801627c:	f7ff fac6 	bl	801580c <HAL_GetTick>
 8016280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8016282:	e00a      	b.n	801629a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8016284:	f7ff fac2 	bl	801580c <HAL_GetTick>
 8016288:	4602      	mov	r2, r0
 801628a:	693b      	ldr	r3, [r7, #16]
 801628c:	1ad3      	subs	r3, r2, r3
 801628e:	f241 3288 	movw	r2, #5000	; 0x1388
 8016292:	4293      	cmp	r3, r2
 8016294:	d901      	bls.n	801629a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8016296:	2303      	movs	r3, #3
 8016298:	e0b5      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801629a:	4b3e      	ldr	r3, [pc, #248]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 801629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801629e:	f003 0302 	and.w	r3, r3, #2
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d1ee      	bne.n	8016284 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80162a6:	7dfb      	ldrb	r3, [r7, #23]
 80162a8:	2b01      	cmp	r3, #1
 80162aa:	d105      	bne.n	80162b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80162ac:	4b39      	ldr	r3, [pc, #228]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 80162ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162b0:	4a38      	ldr	r2, [pc, #224]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 80162b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80162b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	699b      	ldr	r3, [r3, #24]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	f000 80a1 	beq.w	8016404 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80162c2:	4b34      	ldr	r3, [pc, #208]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 80162c4:	689b      	ldr	r3, [r3, #8]
 80162c6:	f003 030c 	and.w	r3, r3, #12
 80162ca:	2b08      	cmp	r3, #8
 80162cc:	d05c      	beq.n	8016388 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	699b      	ldr	r3, [r3, #24]
 80162d2:	2b02      	cmp	r3, #2
 80162d4:	d141      	bne.n	801635a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80162d6:	4b31      	ldr	r3, [pc, #196]	; (801639c <HAL_RCC_OscConfig+0x478>)
 80162d8:	2200      	movs	r2, #0
 80162da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80162dc:	f7ff fa96 	bl	801580c <HAL_GetTick>
 80162e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80162e2:	e008      	b.n	80162f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80162e4:	f7ff fa92 	bl	801580c <HAL_GetTick>
 80162e8:	4602      	mov	r2, r0
 80162ea:	693b      	ldr	r3, [r7, #16]
 80162ec:	1ad3      	subs	r3, r2, r3
 80162ee:	2b02      	cmp	r3, #2
 80162f0:	d901      	bls.n	80162f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80162f2:	2303      	movs	r3, #3
 80162f4:	e087      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80162f6:	4b27      	ldr	r3, [pc, #156]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d1f0      	bne.n	80162e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	69da      	ldr	r2, [r3, #28]
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6a1b      	ldr	r3, [r3, #32]
 801630a:	431a      	orrs	r2, r3
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016310:	019b      	lsls	r3, r3, #6
 8016312:	431a      	orrs	r2, r3
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016318:	085b      	lsrs	r3, r3, #1
 801631a:	3b01      	subs	r3, #1
 801631c:	041b      	lsls	r3, r3, #16
 801631e:	431a      	orrs	r2, r3
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016324:	061b      	lsls	r3, r3, #24
 8016326:	491b      	ldr	r1, [pc, #108]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 8016328:	4313      	orrs	r3, r2
 801632a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801632c:	4b1b      	ldr	r3, [pc, #108]	; (801639c <HAL_RCC_OscConfig+0x478>)
 801632e:	2201      	movs	r2, #1
 8016330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016332:	f7ff fa6b 	bl	801580c <HAL_GetTick>
 8016336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8016338:	e008      	b.n	801634c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801633a:	f7ff fa67 	bl	801580c <HAL_GetTick>
 801633e:	4602      	mov	r2, r0
 8016340:	693b      	ldr	r3, [r7, #16]
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	2b02      	cmp	r3, #2
 8016346:	d901      	bls.n	801634c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8016348:	2303      	movs	r3, #3
 801634a:	e05c      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801634c:	4b11      	ldr	r3, [pc, #68]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016354:	2b00      	cmp	r3, #0
 8016356:	d0f0      	beq.n	801633a <HAL_RCC_OscConfig+0x416>
 8016358:	e054      	b.n	8016404 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801635a:	4b10      	ldr	r3, [pc, #64]	; (801639c <HAL_RCC_OscConfig+0x478>)
 801635c:	2200      	movs	r2, #0
 801635e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8016360:	f7ff fa54 	bl	801580c <HAL_GetTick>
 8016364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8016366:	e008      	b.n	801637a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8016368:	f7ff fa50 	bl	801580c <HAL_GetTick>
 801636c:	4602      	mov	r2, r0
 801636e:	693b      	ldr	r3, [r7, #16]
 8016370:	1ad3      	subs	r3, r2, r3
 8016372:	2b02      	cmp	r3, #2
 8016374:	d901      	bls.n	801637a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8016376:	2303      	movs	r3, #3
 8016378:	e045      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801637a:	4b06      	ldr	r3, [pc, #24]	; (8016394 <HAL_RCC_OscConfig+0x470>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1f0      	bne.n	8016368 <HAL_RCC_OscConfig+0x444>
 8016386:	e03d      	b.n	8016404 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	699b      	ldr	r3, [r3, #24]
 801638c:	2b01      	cmp	r3, #1
 801638e:	d107      	bne.n	80163a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8016390:	2301      	movs	r3, #1
 8016392:	e038      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
 8016394:	40023800 	.word	0x40023800
 8016398:	40007000 	.word	0x40007000
 801639c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80163a0:	4b1b      	ldr	r3, [pc, #108]	; (8016410 <HAL_RCC_OscConfig+0x4ec>)
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	699b      	ldr	r3, [r3, #24]
 80163aa:	2b01      	cmp	r3, #1
 80163ac:	d028      	beq.n	8016400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80163b8:	429a      	cmp	r2, r3
 80163ba:	d121      	bne.n	8016400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80163c6:	429a      	cmp	r2, r3
 80163c8:	d11a      	bne.n	8016400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80163ca:	68fa      	ldr	r2, [r7, #12]
 80163cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80163d0:	4013      	ands	r3, r2
 80163d2:	687a      	ldr	r2, [r7, #4]
 80163d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80163d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80163d8:	4293      	cmp	r3, r2
 80163da:	d111      	bne.n	8016400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163e6:	085b      	lsrs	r3, r3, #1
 80163e8:	3b01      	subs	r3, #1
 80163ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d107      	bne.n	8016400 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d001      	beq.n	8016404 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8016400:	2301      	movs	r3, #1
 8016402:	e000      	b.n	8016406 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8016404:	2300      	movs	r3, #0
}
 8016406:	4618      	mov	r0, r3
 8016408:	3718      	adds	r7, #24
 801640a:	46bd      	mov	sp, r7
 801640c:	bd80      	pop	{r7, pc}
 801640e:	bf00      	nop
 8016410:	40023800 	.word	0x40023800

08016414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b084      	sub	sp, #16
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d101      	bne.n	8016428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8016424:	2301      	movs	r3, #1
 8016426:	e0cc      	b.n	80165c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8016428:	4b68      	ldr	r3, [pc, #416]	; (80165cc <HAL_RCC_ClockConfig+0x1b8>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	f003 0307 	and.w	r3, r3, #7
 8016430:	683a      	ldr	r2, [r7, #0]
 8016432:	429a      	cmp	r2, r3
 8016434:	d90c      	bls.n	8016450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016436:	4b65      	ldr	r3, [pc, #404]	; (80165cc <HAL_RCC_ClockConfig+0x1b8>)
 8016438:	683a      	ldr	r2, [r7, #0]
 801643a:	b2d2      	uxtb	r2, r2
 801643c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801643e:	4b63      	ldr	r3, [pc, #396]	; (80165cc <HAL_RCC_ClockConfig+0x1b8>)
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	f003 0307 	and.w	r3, r3, #7
 8016446:	683a      	ldr	r2, [r7, #0]
 8016448:	429a      	cmp	r2, r3
 801644a:	d001      	beq.n	8016450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801644c:	2301      	movs	r3, #1
 801644e:	e0b8      	b.n	80165c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	f003 0302 	and.w	r3, r3, #2
 8016458:	2b00      	cmp	r3, #0
 801645a:	d020      	beq.n	801649e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	f003 0304 	and.w	r3, r3, #4
 8016464:	2b00      	cmp	r3, #0
 8016466:	d005      	beq.n	8016474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8016468:	4b59      	ldr	r3, [pc, #356]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 801646a:	689b      	ldr	r3, [r3, #8]
 801646c:	4a58      	ldr	r2, [pc, #352]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 801646e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8016472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	f003 0308 	and.w	r3, r3, #8
 801647c:	2b00      	cmp	r3, #0
 801647e:	d005      	beq.n	801648c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8016480:	4b53      	ldr	r3, [pc, #332]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 8016482:	689b      	ldr	r3, [r3, #8]
 8016484:	4a52      	ldr	r2, [pc, #328]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 8016486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801648a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801648c:	4b50      	ldr	r3, [pc, #320]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 801648e:	689b      	ldr	r3, [r3, #8]
 8016490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	689b      	ldr	r3, [r3, #8]
 8016498:	494d      	ldr	r1, [pc, #308]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 801649a:	4313      	orrs	r3, r2
 801649c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	f003 0301 	and.w	r3, r3, #1
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d044      	beq.n	8016534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	2b01      	cmp	r3, #1
 80164b0:	d107      	bne.n	80164c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80164b2:	4b47      	ldr	r3, [pc, #284]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d119      	bne.n	80164f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80164be:	2301      	movs	r3, #1
 80164c0:	e07f      	b.n	80165c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	2b02      	cmp	r3, #2
 80164c8:	d003      	beq.n	80164d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80164ce:	2b03      	cmp	r3, #3
 80164d0:	d107      	bne.n	80164e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80164d2:	4b3f      	ldr	r3, [pc, #252]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d109      	bne.n	80164f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80164de:	2301      	movs	r3, #1
 80164e0:	e06f      	b.n	80165c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80164e2:	4b3b      	ldr	r3, [pc, #236]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	f003 0302 	and.w	r3, r3, #2
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d101      	bne.n	80164f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80164ee:	2301      	movs	r3, #1
 80164f0:	e067      	b.n	80165c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80164f2:	4b37      	ldr	r3, [pc, #220]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 80164f4:	689b      	ldr	r3, [r3, #8]
 80164f6:	f023 0203 	bic.w	r2, r3, #3
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	685b      	ldr	r3, [r3, #4]
 80164fe:	4934      	ldr	r1, [pc, #208]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 8016500:	4313      	orrs	r3, r2
 8016502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8016504:	f7ff f982 	bl	801580c <HAL_GetTick>
 8016508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801650a:	e00a      	b.n	8016522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801650c:	f7ff f97e 	bl	801580c <HAL_GetTick>
 8016510:	4602      	mov	r2, r0
 8016512:	68fb      	ldr	r3, [r7, #12]
 8016514:	1ad3      	subs	r3, r2, r3
 8016516:	f241 3288 	movw	r2, #5000	; 0x1388
 801651a:	4293      	cmp	r3, r2
 801651c:	d901      	bls.n	8016522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801651e:	2303      	movs	r3, #3
 8016520:	e04f      	b.n	80165c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8016522:	4b2b      	ldr	r3, [pc, #172]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 8016524:	689b      	ldr	r3, [r3, #8]
 8016526:	f003 020c 	and.w	r2, r3, #12
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	009b      	lsls	r3, r3, #2
 8016530:	429a      	cmp	r2, r3
 8016532:	d1eb      	bne.n	801650c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8016534:	4b25      	ldr	r3, [pc, #148]	; (80165cc <HAL_RCC_ClockConfig+0x1b8>)
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	f003 0307 	and.w	r3, r3, #7
 801653c:	683a      	ldr	r2, [r7, #0]
 801653e:	429a      	cmp	r2, r3
 8016540:	d20c      	bcs.n	801655c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8016542:	4b22      	ldr	r3, [pc, #136]	; (80165cc <HAL_RCC_ClockConfig+0x1b8>)
 8016544:	683a      	ldr	r2, [r7, #0]
 8016546:	b2d2      	uxtb	r2, r2
 8016548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801654a:	4b20      	ldr	r3, [pc, #128]	; (80165cc <HAL_RCC_ClockConfig+0x1b8>)
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	f003 0307 	and.w	r3, r3, #7
 8016552:	683a      	ldr	r2, [r7, #0]
 8016554:	429a      	cmp	r2, r3
 8016556:	d001      	beq.n	801655c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8016558:	2301      	movs	r3, #1
 801655a:	e032      	b.n	80165c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	f003 0304 	and.w	r3, r3, #4
 8016564:	2b00      	cmp	r3, #0
 8016566:	d008      	beq.n	801657a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8016568:	4b19      	ldr	r3, [pc, #100]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 801656a:	689b      	ldr	r3, [r3, #8]
 801656c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	68db      	ldr	r3, [r3, #12]
 8016574:	4916      	ldr	r1, [pc, #88]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 8016576:	4313      	orrs	r3, r2
 8016578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	f003 0308 	and.w	r3, r3, #8
 8016582:	2b00      	cmp	r3, #0
 8016584:	d009      	beq.n	801659a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8016586:	4b12      	ldr	r3, [pc, #72]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 8016588:	689b      	ldr	r3, [r3, #8]
 801658a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	691b      	ldr	r3, [r3, #16]
 8016592:	00db      	lsls	r3, r3, #3
 8016594:	490e      	ldr	r1, [pc, #56]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 8016596:	4313      	orrs	r3, r2
 8016598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 801659a:	f000 f821 	bl	80165e0 <HAL_RCC_GetSysClockFreq>
 801659e:	4602      	mov	r2, r0
 80165a0:	4b0b      	ldr	r3, [pc, #44]	; (80165d0 <HAL_RCC_ClockConfig+0x1bc>)
 80165a2:	689b      	ldr	r3, [r3, #8]
 80165a4:	091b      	lsrs	r3, r3, #4
 80165a6:	f003 030f 	and.w	r3, r3, #15
 80165aa:	490a      	ldr	r1, [pc, #40]	; (80165d4 <HAL_RCC_ClockConfig+0x1c0>)
 80165ac:	5ccb      	ldrb	r3, [r1, r3]
 80165ae:	fa22 f303 	lsr.w	r3, r2, r3
 80165b2:	4a09      	ldr	r2, [pc, #36]	; (80165d8 <HAL_RCC_ClockConfig+0x1c4>)
 80165b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80165b6:	4b09      	ldr	r3, [pc, #36]	; (80165dc <HAL_RCC_ClockConfig+0x1c8>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	4618      	mov	r0, r3
 80165bc:	f7fc fa98 	bl	8012af0 <HAL_InitTick>

  return HAL_OK;
 80165c0:	2300      	movs	r3, #0
}
 80165c2:	4618      	mov	r0, r3
 80165c4:	3710      	adds	r7, #16
 80165c6:	46bd      	mov	sp, r7
 80165c8:	bd80      	pop	{r7, pc}
 80165ca:	bf00      	nop
 80165cc:	40023c00 	.word	0x40023c00
 80165d0:	40023800 	.word	0x40023800
 80165d4:	08034400 	.word	0x08034400
 80165d8:	20000000 	.word	0x20000000
 80165dc:	200000bc 	.word	0x200000bc

080165e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80165e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80165e4:	b094      	sub	sp, #80	; 0x50
 80165e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80165e8:	2300      	movs	r3, #0
 80165ea:	647b      	str	r3, [r7, #68]	; 0x44
 80165ec:	2300      	movs	r3, #0
 80165ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80165f0:	2300      	movs	r3, #0
 80165f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80165f4:	2300      	movs	r3, #0
 80165f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80165f8:	4b79      	ldr	r3, [pc, #484]	; (80167e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80165fa:	689b      	ldr	r3, [r3, #8]
 80165fc:	f003 030c 	and.w	r3, r3, #12
 8016600:	2b08      	cmp	r3, #8
 8016602:	d00d      	beq.n	8016620 <HAL_RCC_GetSysClockFreq+0x40>
 8016604:	2b08      	cmp	r3, #8
 8016606:	f200 80e1 	bhi.w	80167cc <HAL_RCC_GetSysClockFreq+0x1ec>
 801660a:	2b00      	cmp	r3, #0
 801660c:	d002      	beq.n	8016614 <HAL_RCC_GetSysClockFreq+0x34>
 801660e:	2b04      	cmp	r3, #4
 8016610:	d003      	beq.n	801661a <HAL_RCC_GetSysClockFreq+0x3a>
 8016612:	e0db      	b.n	80167cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8016614:	4b73      	ldr	r3, [pc, #460]	; (80167e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8016616:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8016618:	e0db      	b.n	80167d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801661a:	4b73      	ldr	r3, [pc, #460]	; (80167e8 <HAL_RCC_GetSysClockFreq+0x208>)
 801661c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801661e:	e0d8      	b.n	80167d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8016620:	4b6f      	ldr	r3, [pc, #444]	; (80167e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8016622:	685b      	ldr	r3, [r3, #4]
 8016624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016628:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801662a:	4b6d      	ldr	r3, [pc, #436]	; (80167e0 <HAL_RCC_GetSysClockFreq+0x200>)
 801662c:	685b      	ldr	r3, [r3, #4]
 801662e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016632:	2b00      	cmp	r3, #0
 8016634:	d063      	beq.n	80166fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8016636:	4b6a      	ldr	r3, [pc, #424]	; (80167e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	099b      	lsrs	r3, r3, #6
 801663c:	2200      	movs	r2, #0
 801663e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016640:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016648:	633b      	str	r3, [r7, #48]	; 0x30
 801664a:	2300      	movs	r3, #0
 801664c:	637b      	str	r3, [r7, #52]	; 0x34
 801664e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8016652:	4622      	mov	r2, r4
 8016654:	462b      	mov	r3, r5
 8016656:	f04f 0000 	mov.w	r0, #0
 801665a:	f04f 0100 	mov.w	r1, #0
 801665e:	0159      	lsls	r1, r3, #5
 8016660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8016664:	0150      	lsls	r0, r2, #5
 8016666:	4602      	mov	r2, r0
 8016668:	460b      	mov	r3, r1
 801666a:	4621      	mov	r1, r4
 801666c:	1a51      	subs	r1, r2, r1
 801666e:	6139      	str	r1, [r7, #16]
 8016670:	4629      	mov	r1, r5
 8016672:	eb63 0301 	sbc.w	r3, r3, r1
 8016676:	617b      	str	r3, [r7, #20]
 8016678:	f04f 0200 	mov.w	r2, #0
 801667c:	f04f 0300 	mov.w	r3, #0
 8016680:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8016684:	4659      	mov	r1, fp
 8016686:	018b      	lsls	r3, r1, #6
 8016688:	4651      	mov	r1, sl
 801668a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801668e:	4651      	mov	r1, sl
 8016690:	018a      	lsls	r2, r1, #6
 8016692:	4651      	mov	r1, sl
 8016694:	ebb2 0801 	subs.w	r8, r2, r1
 8016698:	4659      	mov	r1, fp
 801669a:	eb63 0901 	sbc.w	r9, r3, r1
 801669e:	f04f 0200 	mov.w	r2, #0
 80166a2:	f04f 0300 	mov.w	r3, #0
 80166a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80166aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80166ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80166b2:	4690      	mov	r8, r2
 80166b4:	4699      	mov	r9, r3
 80166b6:	4623      	mov	r3, r4
 80166b8:	eb18 0303 	adds.w	r3, r8, r3
 80166bc:	60bb      	str	r3, [r7, #8]
 80166be:	462b      	mov	r3, r5
 80166c0:	eb49 0303 	adc.w	r3, r9, r3
 80166c4:	60fb      	str	r3, [r7, #12]
 80166c6:	f04f 0200 	mov.w	r2, #0
 80166ca:	f04f 0300 	mov.w	r3, #0
 80166ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80166d2:	4629      	mov	r1, r5
 80166d4:	024b      	lsls	r3, r1, #9
 80166d6:	4621      	mov	r1, r4
 80166d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80166dc:	4621      	mov	r1, r4
 80166de:	024a      	lsls	r2, r1, #9
 80166e0:	4610      	mov	r0, r2
 80166e2:	4619      	mov	r1, r3
 80166e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166e6:	2200      	movs	r2, #0
 80166e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80166ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80166ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80166f0:	f7fa fae2 	bl	8010cb8 <__aeabi_uldivmod>
 80166f4:	4602      	mov	r2, r0
 80166f6:	460b      	mov	r3, r1
 80166f8:	4613      	mov	r3, r2
 80166fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80166fc:	e058      	b.n	80167b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80166fe:	4b38      	ldr	r3, [pc, #224]	; (80167e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	099b      	lsrs	r3, r3, #6
 8016704:	2200      	movs	r2, #0
 8016706:	4618      	mov	r0, r3
 8016708:	4611      	mov	r1, r2
 801670a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801670e:	623b      	str	r3, [r7, #32]
 8016710:	2300      	movs	r3, #0
 8016712:	627b      	str	r3, [r7, #36]	; 0x24
 8016714:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8016718:	4642      	mov	r2, r8
 801671a:	464b      	mov	r3, r9
 801671c:	f04f 0000 	mov.w	r0, #0
 8016720:	f04f 0100 	mov.w	r1, #0
 8016724:	0159      	lsls	r1, r3, #5
 8016726:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801672a:	0150      	lsls	r0, r2, #5
 801672c:	4602      	mov	r2, r0
 801672e:	460b      	mov	r3, r1
 8016730:	4641      	mov	r1, r8
 8016732:	ebb2 0a01 	subs.w	sl, r2, r1
 8016736:	4649      	mov	r1, r9
 8016738:	eb63 0b01 	sbc.w	fp, r3, r1
 801673c:	f04f 0200 	mov.w	r2, #0
 8016740:	f04f 0300 	mov.w	r3, #0
 8016744:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8016748:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801674c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8016750:	ebb2 040a 	subs.w	r4, r2, sl
 8016754:	eb63 050b 	sbc.w	r5, r3, fp
 8016758:	f04f 0200 	mov.w	r2, #0
 801675c:	f04f 0300 	mov.w	r3, #0
 8016760:	00eb      	lsls	r3, r5, #3
 8016762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8016766:	00e2      	lsls	r2, r4, #3
 8016768:	4614      	mov	r4, r2
 801676a:	461d      	mov	r5, r3
 801676c:	4643      	mov	r3, r8
 801676e:	18e3      	adds	r3, r4, r3
 8016770:	603b      	str	r3, [r7, #0]
 8016772:	464b      	mov	r3, r9
 8016774:	eb45 0303 	adc.w	r3, r5, r3
 8016778:	607b      	str	r3, [r7, #4]
 801677a:	f04f 0200 	mov.w	r2, #0
 801677e:	f04f 0300 	mov.w	r3, #0
 8016782:	e9d7 4500 	ldrd	r4, r5, [r7]
 8016786:	4629      	mov	r1, r5
 8016788:	028b      	lsls	r3, r1, #10
 801678a:	4621      	mov	r1, r4
 801678c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8016790:	4621      	mov	r1, r4
 8016792:	028a      	lsls	r2, r1, #10
 8016794:	4610      	mov	r0, r2
 8016796:	4619      	mov	r1, r3
 8016798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801679a:	2200      	movs	r2, #0
 801679c:	61bb      	str	r3, [r7, #24]
 801679e:	61fa      	str	r2, [r7, #28]
 80167a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80167a4:	f7fa fa88 	bl	8010cb8 <__aeabi_uldivmod>
 80167a8:	4602      	mov	r2, r0
 80167aa:	460b      	mov	r3, r1
 80167ac:	4613      	mov	r3, r2
 80167ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80167b0:	4b0b      	ldr	r3, [pc, #44]	; (80167e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	0c1b      	lsrs	r3, r3, #16
 80167b6:	f003 0303 	and.w	r3, r3, #3
 80167ba:	3301      	adds	r3, #1
 80167bc:	005b      	lsls	r3, r3, #1
 80167be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80167c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80167c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80167c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80167c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80167ca:	e002      	b.n	80167d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80167cc:	4b05      	ldr	r3, [pc, #20]	; (80167e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80167ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80167d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80167d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3750      	adds	r7, #80	; 0x50
 80167d8:	46bd      	mov	sp, r7
 80167da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80167de:	bf00      	nop
 80167e0:	40023800 	.word	0x40023800
 80167e4:	00f42400 	.word	0x00f42400
 80167e8:	007a1200 	.word	0x007a1200

080167ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80167ec:	b480      	push	{r7}
 80167ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80167f0:	4b03      	ldr	r3, [pc, #12]	; (8016800 <HAL_RCC_GetHCLKFreq+0x14>)
 80167f2:	681b      	ldr	r3, [r3, #0]
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	46bd      	mov	sp, r7
 80167f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167fc:	4770      	bx	lr
 80167fe:	bf00      	nop
 8016800:	20000000 	.word	0x20000000

08016804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8016808:	f7ff fff0 	bl	80167ec <HAL_RCC_GetHCLKFreq>
 801680c:	4602      	mov	r2, r0
 801680e:	4b05      	ldr	r3, [pc, #20]	; (8016824 <HAL_RCC_GetPCLK1Freq+0x20>)
 8016810:	689b      	ldr	r3, [r3, #8]
 8016812:	0a9b      	lsrs	r3, r3, #10
 8016814:	f003 0307 	and.w	r3, r3, #7
 8016818:	4903      	ldr	r1, [pc, #12]	; (8016828 <HAL_RCC_GetPCLK1Freq+0x24>)
 801681a:	5ccb      	ldrb	r3, [r1, r3]
 801681c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016820:	4618      	mov	r0, r3
 8016822:	bd80      	pop	{r7, pc}
 8016824:	40023800 	.word	0x40023800
 8016828:	08034410 	.word	0x08034410

0801682c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8016830:	f7ff ffdc 	bl	80167ec <HAL_RCC_GetHCLKFreq>
 8016834:	4602      	mov	r2, r0
 8016836:	4b05      	ldr	r3, [pc, #20]	; (801684c <HAL_RCC_GetPCLK2Freq+0x20>)
 8016838:	689b      	ldr	r3, [r3, #8]
 801683a:	0b5b      	lsrs	r3, r3, #13
 801683c:	f003 0307 	and.w	r3, r3, #7
 8016840:	4903      	ldr	r1, [pc, #12]	; (8016850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8016842:	5ccb      	ldrb	r3, [r1, r3]
 8016844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8016848:	4618      	mov	r0, r3
 801684a:	bd80      	pop	{r7, pc}
 801684c:	40023800 	.word	0x40023800
 8016850:	08034410 	.word	0x08034410

08016854 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8016854:	b480      	push	{r7}
 8016856:	b083      	sub	sp, #12
 8016858:	af00      	add	r7, sp, #0
 801685a:	6078      	str	r0, [r7, #4]
 801685c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	220f      	movs	r2, #15
 8016862:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8016864:	4b12      	ldr	r3, [pc, #72]	; (80168b0 <HAL_RCC_GetClockConfig+0x5c>)
 8016866:	689b      	ldr	r3, [r3, #8]
 8016868:	f003 0203 	and.w	r2, r3, #3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8016870:	4b0f      	ldr	r3, [pc, #60]	; (80168b0 <HAL_RCC_GetClockConfig+0x5c>)
 8016872:	689b      	ldr	r3, [r3, #8]
 8016874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 801687c:	4b0c      	ldr	r3, [pc, #48]	; (80168b0 <HAL_RCC_GetClockConfig+0x5c>)
 801687e:	689b      	ldr	r3, [r3, #8]
 8016880:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8016888:	4b09      	ldr	r3, [pc, #36]	; (80168b0 <HAL_RCC_GetClockConfig+0x5c>)
 801688a:	689b      	ldr	r3, [r3, #8]
 801688c:	08db      	lsrs	r3, r3, #3
 801688e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8016896:	4b07      	ldr	r3, [pc, #28]	; (80168b4 <HAL_RCC_GetClockConfig+0x60>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	f003 0207 	and.w	r2, r3, #7
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	601a      	str	r2, [r3, #0]
}
 80168a2:	bf00      	nop
 80168a4:	370c      	adds	r7, #12
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr
 80168ae:	bf00      	nop
 80168b0:	40023800 	.word	0x40023800
 80168b4:	40023c00 	.word	0x40023c00

080168b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b082      	sub	sp, #8
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d101      	bne.n	80168ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80168c6:	2301      	movs	r3, #1
 80168c8:	e07b      	b.n	80169c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d108      	bne.n	80168e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	685b      	ldr	r3, [r3, #4]
 80168d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80168da:	d009      	beq.n	80168f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2200      	movs	r2, #0
 80168e0:	61da      	str	r2, [r3, #28]
 80168e2:	e005      	b.n	80168f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2200      	movs	r2, #0
 80168e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	2200      	movs	r2, #0
 80168ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2200      	movs	r2, #0
 80168f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80168fc:	b2db      	uxtb	r3, r3
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d106      	bne.n	8016910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	2200      	movs	r2, #0
 8016906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f7fc f822 	bl	8012954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	2202      	movs	r2, #2
 8016914:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	681a      	ldr	r2, [r3, #0]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016926:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	689b      	ldr	r3, [r3, #8]
 8016934:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8016938:	431a      	orrs	r2, r3
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016942:	431a      	orrs	r2, r3
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	691b      	ldr	r3, [r3, #16]
 8016948:	f003 0302 	and.w	r3, r3, #2
 801694c:	431a      	orrs	r2, r3
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	695b      	ldr	r3, [r3, #20]
 8016952:	f003 0301 	and.w	r3, r3, #1
 8016956:	431a      	orrs	r2, r3
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	699b      	ldr	r3, [r3, #24]
 801695c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016960:	431a      	orrs	r2, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	69db      	ldr	r3, [r3, #28]
 8016966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801696a:	431a      	orrs	r2, r3
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6a1b      	ldr	r3, [r3, #32]
 8016970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016974:	ea42 0103 	orr.w	r1, r2, r3
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801697c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	430a      	orrs	r2, r1
 8016986:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	699b      	ldr	r3, [r3, #24]
 801698c:	0c1b      	lsrs	r3, r3, #16
 801698e:	f003 0104 	and.w	r1, r3, #4
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016996:	f003 0210 	and.w	r2, r3, #16
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	430a      	orrs	r2, r1
 80169a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	69da      	ldr	r2, [r3, #28]
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80169b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2200      	movs	r2, #0
 80169b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	2201      	movs	r2, #1
 80169bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80169c0:	2300      	movs	r3, #0
}
 80169c2:	4618      	mov	r0, r3
 80169c4:	3708      	adds	r7, #8
 80169c6:	46bd      	mov	sp, r7
 80169c8:	bd80      	pop	{r7, pc}

080169ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80169ca:	b580      	push	{r7, lr}
 80169cc:	b088      	sub	sp, #32
 80169ce:	af00      	add	r7, sp, #0
 80169d0:	60f8      	str	r0, [r7, #12]
 80169d2:	60b9      	str	r1, [r7, #8]
 80169d4:	603b      	str	r3, [r7, #0]
 80169d6:	4613      	mov	r3, r2
 80169d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80169da:	2300      	movs	r3, #0
 80169dc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80169e4:	2b01      	cmp	r3, #1
 80169e6:	d101      	bne.n	80169ec <HAL_SPI_Transmit+0x22>
 80169e8:	2302      	movs	r3, #2
 80169ea:	e12d      	b.n	8016c48 <HAL_SPI_Transmit+0x27e>
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	2201      	movs	r2, #1
 80169f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80169f4:	f7fe ff0a 	bl	801580c <HAL_GetTick>
 80169f8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80169fa:	88fb      	ldrh	r3, [r7, #6]
 80169fc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016a04:	b2db      	uxtb	r3, r3
 8016a06:	2b01      	cmp	r3, #1
 8016a08:	d002      	beq.n	8016a10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8016a0a:	2302      	movs	r3, #2
 8016a0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016a0e:	e116      	b.n	8016c3e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8016a10:	68bb      	ldr	r3, [r7, #8]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d002      	beq.n	8016a1c <HAL_SPI_Transmit+0x52>
 8016a16:	88fb      	ldrh	r3, [r7, #6]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d102      	bne.n	8016a22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8016a1c:	2301      	movs	r3, #1
 8016a1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8016a20:	e10d      	b.n	8016c3e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	2203      	movs	r2, #3
 8016a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8016a30:	68fb      	ldr	r3, [r7, #12]
 8016a32:	68ba      	ldr	r2, [r7, #8]
 8016a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	88fa      	ldrh	r2, [r7, #6]
 8016a3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	88fa      	ldrh	r2, [r7, #6]
 8016a40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	2200      	movs	r2, #0
 8016a46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	2200      	movs	r2, #0
 8016a4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	2200      	movs	r2, #0
 8016a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	2200      	movs	r2, #0
 8016a58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	689b      	ldr	r3, [r3, #8]
 8016a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016a68:	d10f      	bne.n	8016a8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016a6a:	68fb      	ldr	r3, [r7, #12]
 8016a6c:	681b      	ldr	r3, [r3, #0]
 8016a6e:	681a      	ldr	r2, [r3, #0]
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016a78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	681a      	ldr	r2, [r3, #0]
 8016a80:	68fb      	ldr	r3, [r7, #12]
 8016a82:	681b      	ldr	r3, [r3, #0]
 8016a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8016a88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016a8a:	68fb      	ldr	r3, [r7, #12]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016a94:	2b40      	cmp	r3, #64	; 0x40
 8016a96:	d007      	beq.n	8016aa8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	681a      	ldr	r2, [r3, #0]
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016aa6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016ab0:	d14f      	bne.n	8016b52 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016ab2:	68fb      	ldr	r3, [r7, #12]
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d002      	beq.n	8016ac0 <HAL_SPI_Transmit+0xf6>
 8016aba:	8afb      	ldrh	r3, [r7, #22]
 8016abc:	2b01      	cmp	r3, #1
 8016abe:	d142      	bne.n	8016b46 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ac4:	881a      	ldrh	r2, [r3, #0]
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ad0:	1c9a      	adds	r2, r3, #2
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	3b01      	subs	r3, #1
 8016ade:	b29a      	uxth	r2, r3
 8016ae0:	68fb      	ldr	r3, [r7, #12]
 8016ae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8016ae4:	e02f      	b.n	8016b46 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	689b      	ldr	r3, [r3, #8]
 8016aec:	f003 0302 	and.w	r3, r3, #2
 8016af0:	2b02      	cmp	r3, #2
 8016af2:	d112      	bne.n	8016b1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016af8:	881a      	ldrh	r2, [r3, #0]
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b04:	1c9a      	adds	r2, r3, #2
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b0e:	b29b      	uxth	r3, r3
 8016b10:	3b01      	subs	r3, #1
 8016b12:	b29a      	uxth	r2, r3
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	86da      	strh	r2, [r3, #54]	; 0x36
 8016b18:	e015      	b.n	8016b46 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016b1a:	f7fe fe77 	bl	801580c <HAL_GetTick>
 8016b1e:	4602      	mov	r2, r0
 8016b20:	69bb      	ldr	r3, [r7, #24]
 8016b22:	1ad3      	subs	r3, r2, r3
 8016b24:	683a      	ldr	r2, [r7, #0]
 8016b26:	429a      	cmp	r2, r3
 8016b28:	d803      	bhi.n	8016b32 <HAL_SPI_Transmit+0x168>
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b30:	d102      	bne.n	8016b38 <HAL_SPI_Transmit+0x16e>
 8016b32:	683b      	ldr	r3, [r7, #0]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d106      	bne.n	8016b46 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8016b38:	2303      	movs	r3, #3
 8016b3a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016b3c:	68fb      	ldr	r3, [r7, #12]
 8016b3e:	2201      	movs	r2, #1
 8016b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016b44:	e07b      	b.n	8016c3e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b4a:	b29b      	uxth	r3, r3
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d1ca      	bne.n	8016ae6 <HAL_SPI_Transmit+0x11c>
 8016b50:	e050      	b.n	8016bf4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d002      	beq.n	8016b60 <HAL_SPI_Transmit+0x196>
 8016b5a:	8afb      	ldrh	r3, [r7, #22]
 8016b5c:	2b01      	cmp	r3, #1
 8016b5e:	d144      	bne.n	8016bea <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016b60:	68fb      	ldr	r3, [r7, #12]
 8016b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	330c      	adds	r3, #12
 8016b6a:	7812      	ldrb	r2, [r2, #0]
 8016b6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b72:	1c5a      	adds	r2, r3, #1
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016b7c:	b29b      	uxth	r3, r3
 8016b7e:	3b01      	subs	r3, #1
 8016b80:	b29a      	uxth	r2, r3
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8016b86:	e030      	b.n	8016bea <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	689b      	ldr	r3, [r3, #8]
 8016b8e:	f003 0302 	and.w	r3, r3, #2
 8016b92:	2b02      	cmp	r3, #2
 8016b94:	d113      	bne.n	8016bbe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	330c      	adds	r3, #12
 8016ba0:	7812      	ldrb	r2, [r2, #0]
 8016ba2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ba8:	1c5a      	adds	r2, r3, #1
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016bb2:	b29b      	uxth	r3, r3
 8016bb4:	3b01      	subs	r3, #1
 8016bb6:	b29a      	uxth	r2, r3
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	86da      	strh	r2, [r3, #54]	; 0x36
 8016bbc:	e015      	b.n	8016bea <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016bbe:	f7fe fe25 	bl	801580c <HAL_GetTick>
 8016bc2:	4602      	mov	r2, r0
 8016bc4:	69bb      	ldr	r3, [r7, #24]
 8016bc6:	1ad3      	subs	r3, r2, r3
 8016bc8:	683a      	ldr	r2, [r7, #0]
 8016bca:	429a      	cmp	r2, r3
 8016bcc:	d803      	bhi.n	8016bd6 <HAL_SPI_Transmit+0x20c>
 8016bce:	683b      	ldr	r3, [r7, #0]
 8016bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bd4:	d102      	bne.n	8016bdc <HAL_SPI_Transmit+0x212>
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d106      	bne.n	8016bea <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8016bdc:	2303      	movs	r3, #3
 8016bde:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	2201      	movs	r2, #1
 8016be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016be8:	e029      	b.n	8016c3e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016bee:	b29b      	uxth	r3, r3
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d1c9      	bne.n	8016b88 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016bf4:	69ba      	ldr	r2, [r7, #24]
 8016bf6:	6839      	ldr	r1, [r7, #0]
 8016bf8:	68f8      	ldr	r0, [r7, #12]
 8016bfa:	f000 fbdf 	bl	80173bc <SPI_EndRxTxTransaction>
 8016bfe:	4603      	mov	r3, r0
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d002      	beq.n	8016c0a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	2220      	movs	r2, #32
 8016c08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	689b      	ldr	r3, [r3, #8]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d10a      	bne.n	8016c28 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8016c12:	2300      	movs	r3, #0
 8016c14:	613b      	str	r3, [r7, #16]
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	68db      	ldr	r3, [r3, #12]
 8016c1c:	613b      	str	r3, [r7, #16]
 8016c1e:	68fb      	ldr	r3, [r7, #12]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	689b      	ldr	r3, [r3, #8]
 8016c24:	613b      	str	r3, [r7, #16]
 8016c26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d002      	beq.n	8016c36 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8016c30:	2301      	movs	r3, #1
 8016c32:	77fb      	strb	r3, [r7, #31]
 8016c34:	e003      	b.n	8016c3e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	2201      	movs	r2, #1
 8016c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	2200      	movs	r2, #0
 8016c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3720      	adds	r7, #32
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b088      	sub	sp, #32
 8016c54:	af02      	add	r7, sp, #8
 8016c56:	60f8      	str	r0, [r7, #12]
 8016c58:	60b9      	str	r1, [r7, #8]
 8016c5a:	603b      	str	r3, [r7, #0]
 8016c5c:	4613      	mov	r3, r2
 8016c5e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8016c60:	2300      	movs	r3, #0
 8016c62:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	2b01      	cmp	r3, #1
 8016c6e:	d002      	beq.n	8016c76 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8016c70:	2302      	movs	r3, #2
 8016c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016c74:	e0fb      	b.n	8016e6e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016c7e:	d112      	bne.n	8016ca6 <HAL_SPI_Receive+0x56>
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	689b      	ldr	r3, [r3, #8]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d10e      	bne.n	8016ca6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8016c88:	68fb      	ldr	r3, [r7, #12]
 8016c8a:	2204      	movs	r2, #4
 8016c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8016c90:	88fa      	ldrh	r2, [r7, #6]
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	9300      	str	r3, [sp, #0]
 8016c96:	4613      	mov	r3, r2
 8016c98:	68ba      	ldr	r2, [r7, #8]
 8016c9a:	68b9      	ldr	r1, [r7, #8]
 8016c9c:	68f8      	ldr	r0, [r7, #12]
 8016c9e:	f000 f8ef 	bl	8016e80 <HAL_SPI_TransmitReceive>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	e0e8      	b.n	8016e78 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016cac:	2b01      	cmp	r3, #1
 8016cae:	d101      	bne.n	8016cb4 <HAL_SPI_Receive+0x64>
 8016cb0:	2302      	movs	r3, #2
 8016cb2:	e0e1      	b.n	8016e78 <HAL_SPI_Receive+0x228>
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	2201      	movs	r2, #1
 8016cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016cbc:	f7fe fda6 	bl	801580c <HAL_GetTick>
 8016cc0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8016cc2:	68bb      	ldr	r3, [r7, #8]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d002      	beq.n	8016cce <HAL_SPI_Receive+0x7e>
 8016cc8:	88fb      	ldrh	r3, [r7, #6]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d102      	bne.n	8016cd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8016cce:	2301      	movs	r3, #1
 8016cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8016cd2:	e0cc      	b.n	8016e6e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	2204      	movs	r2, #4
 8016cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	68ba      	ldr	r2, [r7, #8]
 8016ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8016ce8:	68fb      	ldr	r3, [r7, #12]
 8016cea:	88fa      	ldrh	r2, [r7, #6]
 8016cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	88fa      	ldrh	r2, [r7, #6]
 8016cf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	2200      	movs	r2, #0
 8016d04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	2200      	movs	r2, #0
 8016d0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016d0c:	68fb      	ldr	r3, [r7, #12]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	689b      	ldr	r3, [r3, #8]
 8016d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016d1a:	d10f      	bne.n	8016d3c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	681a      	ldr	r2, [r3, #0]
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8016d2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	681b      	ldr	r3, [r3, #0]
 8016d30:	681a      	ldr	r2, [r3, #0]
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8016d3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d46:	2b40      	cmp	r3, #64	; 0x40
 8016d48:	d007      	beq.n	8016d5a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	681a      	ldr	r2, [r3, #0]
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016d58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	68db      	ldr	r3, [r3, #12]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d16a      	bne.n	8016e38 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8016d62:	e032      	b.n	8016dca <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	689b      	ldr	r3, [r3, #8]
 8016d6a:	f003 0301 	and.w	r3, r3, #1
 8016d6e:	2b01      	cmp	r3, #1
 8016d70:	d115      	bne.n	8016d9e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	f103 020c 	add.w	r2, r3, #12
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d7e:	7812      	ldrb	r2, [r2, #0]
 8016d80:	b2d2      	uxtb	r2, r2
 8016d82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d88:	1c5a      	adds	r2, r3, #1
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016d92:	b29b      	uxth	r3, r3
 8016d94:	3b01      	subs	r3, #1
 8016d96:	b29a      	uxth	r2, r3
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016d9c:	e015      	b.n	8016dca <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016d9e:	f7fe fd35 	bl	801580c <HAL_GetTick>
 8016da2:	4602      	mov	r2, r0
 8016da4:	693b      	ldr	r3, [r7, #16]
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	683a      	ldr	r2, [r7, #0]
 8016daa:	429a      	cmp	r2, r3
 8016dac:	d803      	bhi.n	8016db6 <HAL_SPI_Receive+0x166>
 8016dae:	683b      	ldr	r3, [r7, #0]
 8016db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016db4:	d102      	bne.n	8016dbc <HAL_SPI_Receive+0x16c>
 8016db6:	683b      	ldr	r3, [r7, #0]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d106      	bne.n	8016dca <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8016dbc:	2303      	movs	r3, #3
 8016dbe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	2201      	movs	r2, #1
 8016dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016dc8:	e051      	b.n	8016e6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016dce:	b29b      	uxth	r3, r3
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d1c7      	bne.n	8016d64 <HAL_SPI_Receive+0x114>
 8016dd4:	e035      	b.n	8016e42 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	689b      	ldr	r3, [r3, #8]
 8016ddc:	f003 0301 	and.w	r3, r3, #1
 8016de0:	2b01      	cmp	r3, #1
 8016de2:	d113      	bne.n	8016e0c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	68da      	ldr	r2, [r3, #12]
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016dee:	b292      	uxth	r2, r2
 8016df0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016df6:	1c9a      	adds	r2, r3, #2
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	3b01      	subs	r3, #1
 8016e04:	b29a      	uxth	r2, r3
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016e0a:	e015      	b.n	8016e38 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8016e0c:	f7fe fcfe 	bl	801580c <HAL_GetTick>
 8016e10:	4602      	mov	r2, r0
 8016e12:	693b      	ldr	r3, [r7, #16]
 8016e14:	1ad3      	subs	r3, r2, r3
 8016e16:	683a      	ldr	r2, [r7, #0]
 8016e18:	429a      	cmp	r2, r3
 8016e1a:	d803      	bhi.n	8016e24 <HAL_SPI_Receive+0x1d4>
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e22:	d102      	bne.n	8016e2a <HAL_SPI_Receive+0x1da>
 8016e24:	683b      	ldr	r3, [r7, #0]
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d106      	bne.n	8016e38 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8016e2a:	2303      	movs	r3, #3
 8016e2c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	2201      	movs	r2, #1
 8016e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8016e36:	e01a      	b.n	8016e6e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8016e38:	68fb      	ldr	r3, [r7, #12]
 8016e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8016e3c:	b29b      	uxth	r3, r3
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d1c9      	bne.n	8016dd6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8016e42:	693a      	ldr	r2, [r7, #16]
 8016e44:	6839      	ldr	r1, [r7, #0]
 8016e46:	68f8      	ldr	r0, [r7, #12]
 8016e48:	f000 fa52 	bl	80172f0 <SPI_EndRxTransaction>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d002      	beq.n	8016e58 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8016e52:	68fb      	ldr	r3, [r7, #12]
 8016e54:	2220      	movs	r2, #32
 8016e56:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d002      	beq.n	8016e66 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8016e60:	2301      	movs	r3, #1
 8016e62:	75fb      	strb	r3, [r7, #23]
 8016e64:	e003      	b.n	8016e6e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8016e66:	68fb      	ldr	r3, [r7, #12]
 8016e68:	2201      	movs	r2, #1
 8016e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	2200      	movs	r2, #0
 8016e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8016e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8016e78:	4618      	mov	r0, r3
 8016e7a:	3718      	adds	r7, #24
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	bd80      	pop	{r7, pc}

08016e80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b08c      	sub	sp, #48	; 0x30
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	607a      	str	r2, [r7, #4]
 8016e8c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8016e8e:	2301      	movs	r3, #1
 8016e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8016e92:	2300      	movs	r3, #0
 8016e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d101      	bne.n	8016ea6 <HAL_SPI_TransmitReceive+0x26>
 8016ea2:	2302      	movs	r3, #2
 8016ea4:	e198      	b.n	80171d8 <HAL_SPI_TransmitReceive+0x358>
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8016eae:	f7fe fcad 	bl	801580c <HAL_GetTick>
 8016eb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8016eb4:	68fb      	ldr	r3, [r7, #12]
 8016eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8016ec4:	887b      	ldrh	r3, [r7, #2]
 8016ec6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8016ec8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ecc:	2b01      	cmp	r3, #1
 8016ece:	d00f      	beq.n	8016ef0 <HAL_SPI_TransmitReceive+0x70>
 8016ed0:	69fb      	ldr	r3, [r7, #28]
 8016ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8016ed6:	d107      	bne.n	8016ee8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	689b      	ldr	r3, [r3, #8]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d103      	bne.n	8016ee8 <HAL_SPI_TransmitReceive+0x68>
 8016ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ee4:	2b04      	cmp	r3, #4
 8016ee6:	d003      	beq.n	8016ef0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8016ee8:	2302      	movs	r3, #2
 8016eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016eee:	e16d      	b.n	80171cc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d005      	beq.n	8016f02 <HAL_SPI_TransmitReceive+0x82>
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d002      	beq.n	8016f02 <HAL_SPI_TransmitReceive+0x82>
 8016efc:	887b      	ldrh	r3, [r7, #2]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d103      	bne.n	8016f0a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8016f02:	2301      	movs	r3, #1
 8016f04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8016f08:	e160      	b.n	80171cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8016f10:	b2db      	uxtb	r3, r3
 8016f12:	2b04      	cmp	r3, #4
 8016f14:	d003      	beq.n	8016f1e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	2205      	movs	r2, #5
 8016f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	2200      	movs	r2, #0
 8016f22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	887a      	ldrh	r2, [r7, #2]
 8016f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	887a      	ldrh	r2, [r7, #2]
 8016f34:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	68ba      	ldr	r2, [r7, #8]
 8016f3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	887a      	ldrh	r2, [r7, #2]
 8016f40:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	887a      	ldrh	r2, [r7, #2]
 8016f46:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	2200      	movs	r2, #0
 8016f52:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f5e:	2b40      	cmp	r3, #64	; 0x40
 8016f60:	d007      	beq.n	8016f72 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	681a      	ldr	r2, [r3, #0]
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8016f70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	68db      	ldr	r3, [r3, #12]
 8016f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016f7a:	d17c      	bne.n	8017076 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	685b      	ldr	r3, [r3, #4]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d002      	beq.n	8016f8a <HAL_SPI_TransmitReceive+0x10a>
 8016f84:	8b7b      	ldrh	r3, [r7, #26]
 8016f86:	2b01      	cmp	r3, #1
 8016f88:	d16a      	bne.n	8017060 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f8e:	881a      	ldrh	r2, [r3, #0]
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f9a:	1c9a      	adds	r2, r3, #2
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	3b01      	subs	r3, #1
 8016fa8:	b29a      	uxth	r2, r3
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8016fae:	e057      	b.n	8017060 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	689b      	ldr	r3, [r3, #8]
 8016fb6:	f003 0302 	and.w	r3, r3, #2
 8016fba:	2b02      	cmp	r3, #2
 8016fbc:	d11b      	bne.n	8016ff6 <HAL_SPI_TransmitReceive+0x176>
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d016      	beq.n	8016ff6 <HAL_SPI_TransmitReceive+0x176>
 8016fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fca:	2b01      	cmp	r3, #1
 8016fcc:	d113      	bne.n	8016ff6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fd2:	881a      	ldrh	r2, [r3, #0]
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	681b      	ldr	r3, [r3, #0]
 8016fd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fde:	1c9a      	adds	r2, r3, #2
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8016fe8:	b29b      	uxth	r3, r3
 8016fea:	3b01      	subs	r3, #1
 8016fec:	b29a      	uxth	r2, r3
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	689b      	ldr	r3, [r3, #8]
 8016ffc:	f003 0301 	and.w	r3, r3, #1
 8017000:	2b01      	cmp	r3, #1
 8017002:	d119      	bne.n	8017038 <HAL_SPI_TransmitReceive+0x1b8>
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017008:	b29b      	uxth	r3, r3
 801700a:	2b00      	cmp	r3, #0
 801700c:	d014      	beq.n	8017038 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	68da      	ldr	r2, [r3, #12]
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017018:	b292      	uxth	r2, r2
 801701a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017020:	1c9a      	adds	r2, r3, #2
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801702a:	b29b      	uxth	r3, r3
 801702c:	3b01      	subs	r3, #1
 801702e:	b29a      	uxth	r2, r3
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017034:	2301      	movs	r3, #1
 8017036:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8017038:	f7fe fbe8 	bl	801580c <HAL_GetTick>
 801703c:	4602      	mov	r2, r0
 801703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017040:	1ad3      	subs	r3, r2, r3
 8017042:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017044:	429a      	cmp	r2, r3
 8017046:	d80b      	bhi.n	8017060 <HAL_SPI_TransmitReceive+0x1e0>
 8017048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801704a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801704e:	d007      	beq.n	8017060 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8017050:	2303      	movs	r3, #3
 8017052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	2201      	movs	r2, #1
 801705a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 801705e:	e0b5      	b.n	80171cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017060:	68fb      	ldr	r3, [r7, #12]
 8017062:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017064:	b29b      	uxth	r3, r3
 8017066:	2b00      	cmp	r3, #0
 8017068:	d1a2      	bne.n	8016fb0 <HAL_SPI_TransmitReceive+0x130>
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801706e:	b29b      	uxth	r3, r3
 8017070:	2b00      	cmp	r3, #0
 8017072:	d19d      	bne.n	8016fb0 <HAL_SPI_TransmitReceive+0x130>
 8017074:	e080      	b.n	8017178 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	685b      	ldr	r3, [r3, #4]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d002      	beq.n	8017084 <HAL_SPI_TransmitReceive+0x204>
 801707e:	8b7b      	ldrh	r3, [r7, #26]
 8017080:	2b01      	cmp	r3, #1
 8017082:	d16f      	bne.n	8017164 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	681b      	ldr	r3, [r3, #0]
 801708c:	330c      	adds	r3, #12
 801708e:	7812      	ldrb	r2, [r2, #0]
 8017090:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017096:	1c5a      	adds	r2, r3, #1
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170a0:	b29b      	uxth	r3, r3
 80170a2:	3b01      	subs	r3, #1
 80170a4:	b29a      	uxth	r2, r3
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80170aa:	e05b      	b.n	8017164 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	689b      	ldr	r3, [r3, #8]
 80170b2:	f003 0302 	and.w	r3, r3, #2
 80170b6:	2b02      	cmp	r3, #2
 80170b8:	d11c      	bne.n	80170f4 <HAL_SPI_TransmitReceive+0x274>
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170be:	b29b      	uxth	r3, r3
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d017      	beq.n	80170f4 <HAL_SPI_TransmitReceive+0x274>
 80170c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d114      	bne.n	80170f4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	330c      	adds	r3, #12
 80170d4:	7812      	ldrb	r2, [r2, #0]
 80170d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170dc:	1c5a      	adds	r2, r3, #1
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	3b01      	subs	r3, #1
 80170ea:	b29a      	uxth	r2, r3
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80170f0:	2300      	movs	r3, #0
 80170f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	689b      	ldr	r3, [r3, #8]
 80170fa:	f003 0301 	and.w	r3, r3, #1
 80170fe:	2b01      	cmp	r3, #1
 8017100:	d119      	bne.n	8017136 <HAL_SPI_TransmitReceive+0x2b6>
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017106:	b29b      	uxth	r3, r3
 8017108:	2b00      	cmp	r3, #0
 801710a:	d014      	beq.n	8017136 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	68da      	ldr	r2, [r3, #12]
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017116:	b2d2      	uxtb	r2, r2
 8017118:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801711e:	1c5a      	adds	r2, r3, #1
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8017124:	68fb      	ldr	r3, [r7, #12]
 8017126:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017128:	b29b      	uxth	r3, r3
 801712a:	3b01      	subs	r3, #1
 801712c:	b29a      	uxth	r2, r3
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8017132:	2301      	movs	r3, #1
 8017134:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8017136:	f7fe fb69 	bl	801580c <HAL_GetTick>
 801713a:	4602      	mov	r2, r0
 801713c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801713e:	1ad3      	subs	r3, r2, r3
 8017140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017142:	429a      	cmp	r2, r3
 8017144:	d803      	bhi.n	801714e <HAL_SPI_TransmitReceive+0x2ce>
 8017146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017148:	f1b3 3fff 	cmp.w	r3, #4294967295
 801714c:	d102      	bne.n	8017154 <HAL_SPI_TransmitReceive+0x2d4>
 801714e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017150:	2b00      	cmp	r3, #0
 8017152:	d107      	bne.n	8017164 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8017154:	2303      	movs	r3, #3
 8017156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	2201      	movs	r2, #1
 801715e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8017162:	e033      	b.n	80171cc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8017168:	b29b      	uxth	r3, r3
 801716a:	2b00      	cmp	r3, #0
 801716c:	d19e      	bne.n	80170ac <HAL_SPI_TransmitReceive+0x22c>
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8017172:	b29b      	uxth	r3, r3
 8017174:	2b00      	cmp	r3, #0
 8017176:	d199      	bne.n	80170ac <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8017178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801717a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801717c:	68f8      	ldr	r0, [r7, #12]
 801717e:	f000 f91d 	bl	80173bc <SPI_EndRxTxTransaction>
 8017182:	4603      	mov	r3, r0
 8017184:	2b00      	cmp	r3, #0
 8017186:	d006      	beq.n	8017196 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8017188:	2301      	movs	r3, #1
 801718a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	2220      	movs	r2, #32
 8017192:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8017194:	e01a      	b.n	80171cc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	689b      	ldr	r3, [r3, #8]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d10a      	bne.n	80171b4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801719e:	2300      	movs	r3, #0
 80171a0:	617b      	str	r3, [r7, #20]
 80171a2:	68fb      	ldr	r3, [r7, #12]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	68db      	ldr	r3, [r3, #12]
 80171a8:	617b      	str	r3, [r7, #20]
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	689b      	ldr	r3, [r3, #8]
 80171b0:	617b      	str	r3, [r7, #20]
 80171b2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d003      	beq.n	80171c4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80171bc:	2301      	movs	r3, #1
 80171be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80171c2:	e003      	b.n	80171cc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	2201      	movs	r2, #1
 80171c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	2200      	movs	r2, #0
 80171d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80171d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80171d8:	4618      	mov	r0, r3
 80171da:	3730      	adds	r7, #48	; 0x30
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}

080171e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b088      	sub	sp, #32
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	60b9      	str	r1, [r7, #8]
 80171ea:	603b      	str	r3, [r7, #0]
 80171ec:	4613      	mov	r3, r2
 80171ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80171f0:	f7fe fb0c 	bl	801580c <HAL_GetTick>
 80171f4:	4602      	mov	r2, r0
 80171f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171f8:	1a9b      	subs	r3, r3, r2
 80171fa:	683a      	ldr	r2, [r7, #0]
 80171fc:	4413      	add	r3, r2
 80171fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8017200:	f7fe fb04 	bl	801580c <HAL_GetTick>
 8017204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8017206:	4b39      	ldr	r3, [pc, #228]	; (80172ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	015b      	lsls	r3, r3, #5
 801720c:	0d1b      	lsrs	r3, r3, #20
 801720e:	69fa      	ldr	r2, [r7, #28]
 8017210:	fb02 f303 	mul.w	r3, r2, r3
 8017214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8017216:	e054      	b.n	80172c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801721e:	d050      	beq.n	80172c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8017220:	f7fe faf4 	bl	801580c <HAL_GetTick>
 8017224:	4602      	mov	r2, r0
 8017226:	69bb      	ldr	r3, [r7, #24]
 8017228:	1ad3      	subs	r3, r2, r3
 801722a:	69fa      	ldr	r2, [r7, #28]
 801722c:	429a      	cmp	r2, r3
 801722e:	d902      	bls.n	8017236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8017230:	69fb      	ldr	r3, [r7, #28]
 8017232:	2b00      	cmp	r3, #0
 8017234:	d13d      	bne.n	80172b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8017236:	68fb      	ldr	r3, [r7, #12]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	685a      	ldr	r2, [r3, #4]
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8017244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801724e:	d111      	bne.n	8017274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	689b      	ldr	r3, [r3, #8]
 8017254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017258:	d004      	beq.n	8017264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801725a:	68fb      	ldr	r3, [r7, #12]
 801725c:	689b      	ldr	r3, [r3, #8]
 801725e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017262:	d107      	bne.n	8017274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8017264:	68fb      	ldr	r3, [r7, #12]
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	681a      	ldr	r2, [r3, #0]
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8017274:	68fb      	ldr	r3, [r7, #12]
 8017276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801727c:	d10f      	bne.n	801729e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	681a      	ldr	r2, [r3, #0]
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801728c:	601a      	str	r2, [r3, #0]
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	681a      	ldr	r2, [r3, #0]
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801729c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801729e:	68fb      	ldr	r3, [r7, #12]
 80172a0:	2201      	movs	r2, #1
 80172a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	2200      	movs	r2, #0
 80172aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80172ae:	2303      	movs	r3, #3
 80172b0:	e017      	b.n	80172e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80172b2:	697b      	ldr	r3, [r7, #20]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d101      	bne.n	80172bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80172b8:	2300      	movs	r3, #0
 80172ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	3b01      	subs	r3, #1
 80172c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	689a      	ldr	r2, [r3, #8]
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	4013      	ands	r3, r2
 80172cc:	68ba      	ldr	r2, [r7, #8]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	bf0c      	ite	eq
 80172d2:	2301      	moveq	r3, #1
 80172d4:	2300      	movne	r3, #0
 80172d6:	b2db      	uxtb	r3, r3
 80172d8:	461a      	mov	r2, r3
 80172da:	79fb      	ldrb	r3, [r7, #7]
 80172dc:	429a      	cmp	r2, r3
 80172de:	d19b      	bne.n	8017218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80172e0:	2300      	movs	r3, #0
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	3720      	adds	r7, #32
 80172e6:	46bd      	mov	sp, r7
 80172e8:	bd80      	pop	{r7, pc}
 80172ea:	bf00      	nop
 80172ec:	20000000 	.word	0x20000000

080172f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b086      	sub	sp, #24
 80172f4:	af02      	add	r7, sp, #8
 80172f6:	60f8      	str	r0, [r7, #12]
 80172f8:	60b9      	str	r1, [r7, #8]
 80172fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017304:	d111      	bne.n	801732a <SPI_EndRxTransaction+0x3a>
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	689b      	ldr	r3, [r3, #8]
 801730a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801730e:	d004      	beq.n	801731a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	689b      	ldr	r3, [r3, #8]
 8017314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017318:	d107      	bne.n	801732a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	681a      	ldr	r2, [r3, #0]
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017328:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	685b      	ldr	r3, [r3, #4]
 801732e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8017332:	d12a      	bne.n	801738a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	689b      	ldr	r3, [r3, #8]
 8017338:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801733c:	d012      	beq.n	8017364 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	9300      	str	r3, [sp, #0]
 8017342:	68bb      	ldr	r3, [r7, #8]
 8017344:	2200      	movs	r2, #0
 8017346:	2180      	movs	r1, #128	; 0x80
 8017348:	68f8      	ldr	r0, [r7, #12]
 801734a:	f7ff ff49 	bl	80171e0 <SPI_WaitFlagStateUntilTimeout>
 801734e:	4603      	mov	r3, r0
 8017350:	2b00      	cmp	r3, #0
 8017352:	d02d      	beq.n	80173b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017358:	f043 0220 	orr.w	r2, r3, #32
 801735c:	68fb      	ldr	r3, [r7, #12]
 801735e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8017360:	2303      	movs	r3, #3
 8017362:	e026      	b.n	80173b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	9300      	str	r3, [sp, #0]
 8017368:	68bb      	ldr	r3, [r7, #8]
 801736a:	2200      	movs	r2, #0
 801736c:	2101      	movs	r1, #1
 801736e:	68f8      	ldr	r0, [r7, #12]
 8017370:	f7ff ff36 	bl	80171e0 <SPI_WaitFlagStateUntilTimeout>
 8017374:	4603      	mov	r3, r0
 8017376:	2b00      	cmp	r3, #0
 8017378:	d01a      	beq.n	80173b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801737e:	f043 0220 	orr.w	r2, r3, #32
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8017386:	2303      	movs	r3, #3
 8017388:	e013      	b.n	80173b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	9300      	str	r3, [sp, #0]
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	2200      	movs	r2, #0
 8017392:	2101      	movs	r1, #1
 8017394:	68f8      	ldr	r0, [r7, #12]
 8017396:	f7ff ff23 	bl	80171e0 <SPI_WaitFlagStateUntilTimeout>
 801739a:	4603      	mov	r3, r0
 801739c:	2b00      	cmp	r3, #0
 801739e:	d007      	beq.n	80173b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173a4:	f043 0220 	orr.w	r2, r3, #32
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80173ac:	2303      	movs	r3, #3
 80173ae:	e000      	b.n	80173b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80173b0:	2300      	movs	r3, #0
}
 80173b2:	4618      	mov	r0, r3
 80173b4:	3710      	adds	r7, #16
 80173b6:	46bd      	mov	sp, r7
 80173b8:	bd80      	pop	{r7, pc}
	...

080173bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b088      	sub	sp, #32
 80173c0:	af02      	add	r7, sp, #8
 80173c2:	60f8      	str	r0, [r7, #12]
 80173c4:	60b9      	str	r1, [r7, #8]
 80173c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	9300      	str	r3, [sp, #0]
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	2201      	movs	r2, #1
 80173d0:	2102      	movs	r1, #2
 80173d2:	68f8      	ldr	r0, [r7, #12]
 80173d4:	f7ff ff04 	bl	80171e0 <SPI_WaitFlagStateUntilTimeout>
 80173d8:	4603      	mov	r3, r0
 80173da:	2b00      	cmp	r3, #0
 80173dc:	d007      	beq.n	80173ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80173e2:	f043 0220 	orr.w	r2, r3, #32
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80173ea:	2303      	movs	r3, #3
 80173ec:	e032      	b.n	8017454 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80173ee:	4b1b      	ldr	r3, [pc, #108]	; (801745c <SPI_EndRxTxTransaction+0xa0>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	4a1b      	ldr	r2, [pc, #108]	; (8017460 <SPI_EndRxTxTransaction+0xa4>)
 80173f4:	fba2 2303 	umull	r2, r3, r2, r3
 80173f8:	0d5b      	lsrs	r3, r3, #21
 80173fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80173fe:	fb02 f303 	mul.w	r3, r2, r3
 8017402:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8017404:	68fb      	ldr	r3, [r7, #12]
 8017406:	685b      	ldr	r3, [r3, #4]
 8017408:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801740c:	d112      	bne.n	8017434 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	9300      	str	r3, [sp, #0]
 8017412:	68bb      	ldr	r3, [r7, #8]
 8017414:	2200      	movs	r2, #0
 8017416:	2180      	movs	r1, #128	; 0x80
 8017418:	68f8      	ldr	r0, [r7, #12]
 801741a:	f7ff fee1 	bl	80171e0 <SPI_WaitFlagStateUntilTimeout>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d016      	beq.n	8017452 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017428:	f043 0220 	orr.w	r2, r3, #32
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8017430:	2303      	movs	r3, #3
 8017432:	e00f      	b.n	8017454 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8017434:	697b      	ldr	r3, [r7, #20]
 8017436:	2b00      	cmp	r3, #0
 8017438:	d00a      	beq.n	8017450 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 801743a:	697b      	ldr	r3, [r7, #20]
 801743c:	3b01      	subs	r3, #1
 801743e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	689b      	ldr	r3, [r3, #8]
 8017446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801744a:	2b80      	cmp	r3, #128	; 0x80
 801744c:	d0f2      	beq.n	8017434 <SPI_EndRxTxTransaction+0x78>
 801744e:	e000      	b.n	8017452 <SPI_EndRxTxTransaction+0x96>
        break;
 8017450:	bf00      	nop
  }

  return HAL_OK;
 8017452:	2300      	movs	r3, #0
}
 8017454:	4618      	mov	r0, r3
 8017456:	3718      	adds	r7, #24
 8017458:	46bd      	mov	sp, r7
 801745a:	bd80      	pop	{r7, pc}
 801745c:	20000000 	.word	0x20000000
 8017460:	165e9f81 	.word	0x165e9f81

08017464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017464:	b580      	push	{r7, lr}
 8017466:	b082      	sub	sp, #8
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d101      	bne.n	8017476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017472:	2301      	movs	r3, #1
 8017474:	e041      	b.n	80174fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801747c:	b2db      	uxtb	r3, r3
 801747e:	2b00      	cmp	r3, #0
 8017480:	d106      	bne.n	8017490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2200      	movs	r2, #0
 8017486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801748a:	6878      	ldr	r0, [r7, #4]
 801748c:	f000 f839 	bl	8017502 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2202      	movs	r2, #2
 8017494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681a      	ldr	r2, [r3, #0]
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	3304      	adds	r3, #4
 80174a0:	4619      	mov	r1, r3
 80174a2:	4610      	mov	r0, r2
 80174a4:	f000 f9b2 	bl	801780c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	2201      	movs	r2, #1
 80174ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	2201      	movs	r2, #1
 80174b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	2201      	movs	r2, #1
 80174bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	2201      	movs	r2, #1
 80174c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	2201      	movs	r2, #1
 80174cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	2201      	movs	r2, #1
 80174d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2201      	movs	r2, #1
 80174dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	2201      	movs	r2, #1
 80174e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	2201      	movs	r2, #1
 80174ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	2201      	movs	r2, #1
 80174f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80174f8:	2300      	movs	r3, #0
}
 80174fa:	4618      	mov	r0, r3
 80174fc:	3708      	adds	r7, #8
 80174fe:	46bd      	mov	sp, r7
 8017500:	bd80      	pop	{r7, pc}

08017502 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8017502:	b480      	push	{r7}
 8017504:	b083      	sub	sp, #12
 8017506:	af00      	add	r7, sp, #0
 8017508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801750a:	bf00      	nop
 801750c:	370c      	adds	r7, #12
 801750e:	46bd      	mov	sp, r7
 8017510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017514:	4770      	bx	lr
	...

08017518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8017518:	b480      	push	{r7}
 801751a:	b085      	sub	sp, #20
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017526:	b2db      	uxtb	r3, r3
 8017528:	2b01      	cmp	r3, #1
 801752a:	d001      	beq.n	8017530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801752c:	2301      	movs	r3, #1
 801752e:	e044      	b.n	80175ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	2202      	movs	r2, #2
 8017534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	681b      	ldr	r3, [r3, #0]
 801753c:	68da      	ldr	r2, [r3, #12]
 801753e:	687b      	ldr	r3, [r7, #4]
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	f042 0201 	orr.w	r2, r2, #1
 8017546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	4a1e      	ldr	r2, [pc, #120]	; (80175c8 <HAL_TIM_Base_Start_IT+0xb0>)
 801754e:	4293      	cmp	r3, r2
 8017550:	d018      	beq.n	8017584 <HAL_TIM_Base_Start_IT+0x6c>
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801755a:	d013      	beq.n	8017584 <HAL_TIM_Base_Start_IT+0x6c>
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	4a1a      	ldr	r2, [pc, #104]	; (80175cc <HAL_TIM_Base_Start_IT+0xb4>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d00e      	beq.n	8017584 <HAL_TIM_Base_Start_IT+0x6c>
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	4a19      	ldr	r2, [pc, #100]	; (80175d0 <HAL_TIM_Base_Start_IT+0xb8>)
 801756c:	4293      	cmp	r3, r2
 801756e:	d009      	beq.n	8017584 <HAL_TIM_Base_Start_IT+0x6c>
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	4a17      	ldr	r2, [pc, #92]	; (80175d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8017576:	4293      	cmp	r3, r2
 8017578:	d004      	beq.n	8017584 <HAL_TIM_Base_Start_IT+0x6c>
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	4a16      	ldr	r2, [pc, #88]	; (80175d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8017580:	4293      	cmp	r3, r2
 8017582:	d111      	bne.n	80175a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	689b      	ldr	r3, [r3, #8]
 801758a:	f003 0307 	and.w	r3, r3, #7
 801758e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017590:	68fb      	ldr	r3, [r7, #12]
 8017592:	2b06      	cmp	r3, #6
 8017594:	d010      	beq.n	80175b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681b      	ldr	r3, [r3, #0]
 801759a:	681a      	ldr	r2, [r3, #0]
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	f042 0201 	orr.w	r2, r2, #1
 80175a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80175a6:	e007      	b.n	80175b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	681b      	ldr	r3, [r3, #0]
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	f042 0201 	orr.w	r2, r2, #1
 80175b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80175b8:	2300      	movs	r3, #0
}
 80175ba:	4618      	mov	r0, r3
 80175bc:	3714      	adds	r7, #20
 80175be:	46bd      	mov	sp, r7
 80175c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c4:	4770      	bx	lr
 80175c6:	bf00      	nop
 80175c8:	40010000 	.word	0x40010000
 80175cc:	40000400 	.word	0x40000400
 80175d0:	40000800 	.word	0x40000800
 80175d4:	40000c00 	.word	0x40000c00
 80175d8:	40014000 	.word	0x40014000

080175dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b084      	sub	sp, #16
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	68db      	ldr	r3, [r3, #12]
 80175ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	691b      	ldr	r3, [r3, #16]
 80175f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	f003 0302 	and.w	r3, r3, #2
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d020      	beq.n	8017640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80175fe:	68fb      	ldr	r3, [r7, #12]
 8017600:	f003 0302 	and.w	r3, r3, #2
 8017604:	2b00      	cmp	r3, #0
 8017606:	d01b      	beq.n	8017640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	681b      	ldr	r3, [r3, #0]
 801760c:	f06f 0202 	mvn.w	r2, #2
 8017610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	2201      	movs	r2, #1
 8017616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	699b      	ldr	r3, [r3, #24]
 801761e:	f003 0303 	and.w	r3, r3, #3
 8017622:	2b00      	cmp	r3, #0
 8017624:	d003      	beq.n	801762e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8017626:	6878      	ldr	r0, [r7, #4]
 8017628:	f000 f8d2 	bl	80177d0 <HAL_TIM_IC_CaptureCallback>
 801762c:	e005      	b.n	801763a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801762e:	6878      	ldr	r0, [r7, #4]
 8017630:	f000 f8c4 	bl	80177bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f000 f8d5 	bl	80177e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	2200      	movs	r2, #0
 801763e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8017640:	68bb      	ldr	r3, [r7, #8]
 8017642:	f003 0304 	and.w	r3, r3, #4
 8017646:	2b00      	cmp	r3, #0
 8017648:	d020      	beq.n	801768c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	f003 0304 	and.w	r3, r3, #4
 8017650:	2b00      	cmp	r3, #0
 8017652:	d01b      	beq.n	801768c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f06f 0204 	mvn.w	r2, #4
 801765c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	2202      	movs	r2, #2
 8017662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	699b      	ldr	r3, [r3, #24]
 801766a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801766e:	2b00      	cmp	r3, #0
 8017670:	d003      	beq.n	801767a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	f000 f8ac 	bl	80177d0 <HAL_TIM_IC_CaptureCallback>
 8017678:	e005      	b.n	8017686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f000 f89e 	bl	80177bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f000 f8af 	bl	80177e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	2200      	movs	r2, #0
 801768a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	f003 0308 	and.w	r3, r3, #8
 8017692:	2b00      	cmp	r3, #0
 8017694:	d020      	beq.n	80176d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	f003 0308 	and.w	r3, r3, #8
 801769c:	2b00      	cmp	r3, #0
 801769e:	d01b      	beq.n	80176d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	f06f 0208 	mvn.w	r2, #8
 80176a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	2204      	movs	r2, #4
 80176ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	69db      	ldr	r3, [r3, #28]
 80176b6:	f003 0303 	and.w	r3, r3, #3
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d003      	beq.n	80176c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80176be:	6878      	ldr	r0, [r7, #4]
 80176c0:	f000 f886 	bl	80177d0 <HAL_TIM_IC_CaptureCallback>
 80176c4:	e005      	b.n	80176d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80176c6:	6878      	ldr	r0, [r7, #4]
 80176c8:	f000 f878 	bl	80177bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f000 f889 	bl	80177e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	2200      	movs	r2, #0
 80176d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	f003 0310 	and.w	r3, r3, #16
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d020      	beq.n	8017724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	f003 0310 	and.w	r3, r3, #16
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d01b      	beq.n	8017724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f06f 0210 	mvn.w	r2, #16
 80176f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	2208      	movs	r2, #8
 80176fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	69db      	ldr	r3, [r3, #28]
 8017702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017706:	2b00      	cmp	r3, #0
 8017708:	d003      	beq.n	8017712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801770a:	6878      	ldr	r0, [r7, #4]
 801770c:	f000 f860 	bl	80177d0 <HAL_TIM_IC_CaptureCallback>
 8017710:	e005      	b.n	801771e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017712:	6878      	ldr	r0, [r7, #4]
 8017714:	f000 f852 	bl	80177bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017718:	6878      	ldr	r0, [r7, #4]
 801771a:	f000 f863 	bl	80177e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2200      	movs	r2, #0
 8017722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	f003 0301 	and.w	r3, r3, #1
 801772a:	2b00      	cmp	r3, #0
 801772c:	d00c      	beq.n	8017748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	f003 0301 	and.w	r3, r3, #1
 8017734:	2b00      	cmp	r3, #0
 8017736:	d007      	beq.n	8017748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	f06f 0201 	mvn.w	r2, #1
 8017740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f7fb f8a0 	bl	8012888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8017748:	68bb      	ldr	r3, [r7, #8]
 801774a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00c      	beq.n	801776c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017758:	2b00      	cmp	r3, #0
 801775a:	d007      	beq.n	801776c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8017764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017766:	6878      	ldr	r0, [r7, #4]
 8017768:	f000 f8e6 	bl	8017938 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801776c:	68bb      	ldr	r3, [r7, #8]
 801776e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017772:	2b00      	cmp	r3, #0
 8017774:	d00c      	beq.n	8017790 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801777c:	2b00      	cmp	r3, #0
 801777e:	d007      	beq.n	8017790 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8017788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f000 f834 	bl	80177f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8017790:	68bb      	ldr	r3, [r7, #8]
 8017792:	f003 0320 	and.w	r3, r3, #32
 8017796:	2b00      	cmp	r3, #0
 8017798:	d00c      	beq.n	80177b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	f003 0320 	and.w	r3, r3, #32
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d007      	beq.n	80177b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	f06f 0220 	mvn.w	r2, #32
 80177ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f000 f8b8 	bl	8017924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80177b4:	bf00      	nop
 80177b6:	3710      	adds	r7, #16
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}

080177bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80177bc:	b480      	push	{r7}
 80177be:	b083      	sub	sp, #12
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80177c4:	bf00      	nop
 80177c6:	370c      	adds	r7, #12
 80177c8:	46bd      	mov	sp, r7
 80177ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ce:	4770      	bx	lr

080177d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80177d0:	b480      	push	{r7}
 80177d2:	b083      	sub	sp, #12
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80177d8:	bf00      	nop
 80177da:	370c      	adds	r7, #12
 80177dc:	46bd      	mov	sp, r7
 80177de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e2:	4770      	bx	lr

080177e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80177e4:	b480      	push	{r7}
 80177e6:	b083      	sub	sp, #12
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80177ec:	bf00      	nop
 80177ee:	370c      	adds	r7, #12
 80177f0:	46bd      	mov	sp, r7
 80177f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f6:	4770      	bx	lr

080177f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80177f8:	b480      	push	{r7}
 80177fa:	b083      	sub	sp, #12
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017800:	bf00      	nop
 8017802:	370c      	adds	r7, #12
 8017804:	46bd      	mov	sp, r7
 8017806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780a:	4770      	bx	lr

0801780c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801780c:	b480      	push	{r7}
 801780e:	b085      	sub	sp, #20
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
 8017814:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	4a3a      	ldr	r2, [pc, #232]	; (8017908 <TIM_Base_SetConfig+0xfc>)
 8017820:	4293      	cmp	r3, r2
 8017822:	d00f      	beq.n	8017844 <TIM_Base_SetConfig+0x38>
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801782a:	d00b      	beq.n	8017844 <TIM_Base_SetConfig+0x38>
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	4a37      	ldr	r2, [pc, #220]	; (801790c <TIM_Base_SetConfig+0x100>)
 8017830:	4293      	cmp	r3, r2
 8017832:	d007      	beq.n	8017844 <TIM_Base_SetConfig+0x38>
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	4a36      	ldr	r2, [pc, #216]	; (8017910 <TIM_Base_SetConfig+0x104>)
 8017838:	4293      	cmp	r3, r2
 801783a:	d003      	beq.n	8017844 <TIM_Base_SetConfig+0x38>
 801783c:	687b      	ldr	r3, [r7, #4]
 801783e:	4a35      	ldr	r2, [pc, #212]	; (8017914 <TIM_Base_SetConfig+0x108>)
 8017840:	4293      	cmp	r3, r2
 8017842:	d108      	bne.n	8017856 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801784a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	685b      	ldr	r3, [r3, #4]
 8017850:	68fa      	ldr	r2, [r7, #12]
 8017852:	4313      	orrs	r3, r2
 8017854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	4a2b      	ldr	r2, [pc, #172]	; (8017908 <TIM_Base_SetConfig+0xfc>)
 801785a:	4293      	cmp	r3, r2
 801785c:	d01b      	beq.n	8017896 <TIM_Base_SetConfig+0x8a>
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017864:	d017      	beq.n	8017896 <TIM_Base_SetConfig+0x8a>
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	4a28      	ldr	r2, [pc, #160]	; (801790c <TIM_Base_SetConfig+0x100>)
 801786a:	4293      	cmp	r3, r2
 801786c:	d013      	beq.n	8017896 <TIM_Base_SetConfig+0x8a>
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	4a27      	ldr	r2, [pc, #156]	; (8017910 <TIM_Base_SetConfig+0x104>)
 8017872:	4293      	cmp	r3, r2
 8017874:	d00f      	beq.n	8017896 <TIM_Base_SetConfig+0x8a>
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	4a26      	ldr	r2, [pc, #152]	; (8017914 <TIM_Base_SetConfig+0x108>)
 801787a:	4293      	cmp	r3, r2
 801787c:	d00b      	beq.n	8017896 <TIM_Base_SetConfig+0x8a>
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	4a25      	ldr	r2, [pc, #148]	; (8017918 <TIM_Base_SetConfig+0x10c>)
 8017882:	4293      	cmp	r3, r2
 8017884:	d007      	beq.n	8017896 <TIM_Base_SetConfig+0x8a>
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	4a24      	ldr	r2, [pc, #144]	; (801791c <TIM_Base_SetConfig+0x110>)
 801788a:	4293      	cmp	r3, r2
 801788c:	d003      	beq.n	8017896 <TIM_Base_SetConfig+0x8a>
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	4a23      	ldr	r2, [pc, #140]	; (8017920 <TIM_Base_SetConfig+0x114>)
 8017892:	4293      	cmp	r3, r2
 8017894:	d108      	bne.n	80178a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801789c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801789e:	683b      	ldr	r3, [r7, #0]
 80178a0:	68db      	ldr	r3, [r3, #12]
 80178a2:	68fa      	ldr	r2, [r7, #12]
 80178a4:	4313      	orrs	r3, r2
 80178a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80178ae:	683b      	ldr	r3, [r7, #0]
 80178b0:	695b      	ldr	r3, [r3, #20]
 80178b2:	4313      	orrs	r3, r2
 80178b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	68fa      	ldr	r2, [r7, #12]
 80178ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	689a      	ldr	r2, [r3, #8]
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80178c4:	683b      	ldr	r3, [r7, #0]
 80178c6:	681a      	ldr	r2, [r3, #0]
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	4a0e      	ldr	r2, [pc, #56]	; (8017908 <TIM_Base_SetConfig+0xfc>)
 80178d0:	4293      	cmp	r3, r2
 80178d2:	d103      	bne.n	80178dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80178d4:	683b      	ldr	r3, [r7, #0]
 80178d6:	691a      	ldr	r2, [r3, #16]
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	2201      	movs	r2, #1
 80178e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	691b      	ldr	r3, [r3, #16]
 80178e6:	f003 0301 	and.w	r3, r3, #1
 80178ea:	2b01      	cmp	r3, #1
 80178ec:	d105      	bne.n	80178fa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	691b      	ldr	r3, [r3, #16]
 80178f2:	f023 0201 	bic.w	r2, r3, #1
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	611a      	str	r2, [r3, #16]
  }
}
 80178fa:	bf00      	nop
 80178fc:	3714      	adds	r7, #20
 80178fe:	46bd      	mov	sp, r7
 8017900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017904:	4770      	bx	lr
 8017906:	bf00      	nop
 8017908:	40010000 	.word	0x40010000
 801790c:	40000400 	.word	0x40000400
 8017910:	40000800 	.word	0x40000800
 8017914:	40000c00 	.word	0x40000c00
 8017918:	40014000 	.word	0x40014000
 801791c:	40014400 	.word	0x40014400
 8017920:	40014800 	.word	0x40014800

08017924 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017924:	b480      	push	{r7}
 8017926:	b083      	sub	sp, #12
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801792c:	bf00      	nop
 801792e:	370c      	adds	r7, #12
 8017930:	46bd      	mov	sp, r7
 8017932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017936:	4770      	bx	lr

08017938 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017938:	b480      	push	{r7}
 801793a:	b083      	sub	sp, #12
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017940:	bf00      	nop
 8017942:	370c      	adds	r7, #12
 8017944:	46bd      	mov	sp, r7
 8017946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794a:	4770      	bx	lr

0801794c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	2b00      	cmp	r3, #0
 8017958:	d101      	bne.n	801795e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801795a:	2301      	movs	r3, #1
 801795c:	e042      	b.n	80179e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017964:	b2db      	uxtb	r3, r3
 8017966:	2b00      	cmp	r3, #0
 8017968:	d106      	bne.n	8017978 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	2200      	movs	r2, #0
 801796e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	f7fb f86c 	bl	8012a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2224      	movs	r2, #36	; 0x24
 801797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	68da      	ldr	r2, [r3, #12]
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801798e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f000 fd11 	bl	80183b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	691a      	ldr	r2, [r3, #16]
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	681b      	ldr	r3, [r3, #0]
 80179a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80179a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	695a      	ldr	r2, [r3, #20]
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80179b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	68da      	ldr	r2, [r3, #12]
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80179c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	2200      	movs	r2, #0
 80179ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	2220      	movs	r2, #32
 80179d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2220      	movs	r2, #32
 80179d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	2200      	movs	r2, #0
 80179e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80179e2:	2300      	movs	r3, #0
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	3708      	adds	r7, #8
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bd80      	pop	{r7, pc}

080179ec <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b08c      	sub	sp, #48	; 0x30
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	60f8      	str	r0, [r7, #12]
 80179f4:	60b9      	str	r1, [r7, #8]
 80179f6:	4613      	mov	r3, r2
 80179f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017a00:	b2db      	uxtb	r3, r3
 8017a02:	2b20      	cmp	r3, #32
 8017a04:	d14a      	bne.n	8017a9c <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8017a06:	68bb      	ldr	r3, [r7, #8]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d002      	beq.n	8017a12 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8017a0c:	88fb      	ldrh	r3, [r7, #6]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d101      	bne.n	8017a16 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8017a12:	2301      	movs	r3, #1
 8017a14:	e043      	b.n	8017a9e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	2201      	movs	r2, #1
 8017a1a:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017a1c:	68fb      	ldr	r3, [r7, #12]
 8017a1e:	2200      	movs	r2, #0
 8017a20:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8017a22:	88fb      	ldrh	r3, [r7, #6]
 8017a24:	461a      	mov	r2, r3
 8017a26:	68b9      	ldr	r1, [r7, #8]
 8017a28:	68f8      	ldr	r0, [r7, #12]
 8017a2a:	f000 faed 	bl	8018008 <UART_Start_Receive_IT>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8017a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d12c      	bne.n	8017a96 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a40:	2b01      	cmp	r3, #1
 8017a42:	d125      	bne.n	8017a90 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017a44:	2300      	movs	r3, #0
 8017a46:	613b      	str	r3, [r7, #16]
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	613b      	str	r3, [r7, #16]
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	685b      	ldr	r3, [r3, #4]
 8017a56:	613b      	str	r3, [r7, #16]
 8017a58:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a5a:	68fb      	ldr	r3, [r7, #12]
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	330c      	adds	r3, #12
 8017a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a62:	69bb      	ldr	r3, [r7, #24]
 8017a64:	e853 3f00 	ldrex	r3, [r3]
 8017a68:	617b      	str	r3, [r7, #20]
   return(result);
 8017a6a:	697b      	ldr	r3, [r7, #20]
 8017a6c:	f043 0310 	orr.w	r3, r3, #16
 8017a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8017a72:	68fb      	ldr	r3, [r7, #12]
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	330c      	adds	r3, #12
 8017a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017a7a:	627a      	str	r2, [r7, #36]	; 0x24
 8017a7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a7e:	6a39      	ldr	r1, [r7, #32]
 8017a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017a82:	e841 2300 	strex	r3, r2, [r1]
 8017a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8017a88:	69fb      	ldr	r3, [r7, #28]
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d1e5      	bne.n	8017a5a <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8017a8e:	e002      	b.n	8017a96 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8017a90:	2301      	movs	r3, #1
 8017a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8017a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017a9a:	e000      	b.n	8017a9e <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8017a9c:	2302      	movs	r3, #2
  }
}
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	3730      	adds	r7, #48	; 0x30
 8017aa2:	46bd      	mov	sp, r7
 8017aa4:	bd80      	pop	{r7, pc}
	...

08017aa8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b0ba      	sub	sp, #232	; 0xe8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	68db      	ldr	r3, [r3, #12]
 8017ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	681b      	ldr	r3, [r3, #0]
 8017ac8:	695b      	ldr	r3, [r3, #20]
 8017aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8017ace:	2300      	movs	r3, #0
 8017ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8017ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017ade:	f003 030f 	and.w	r3, r3, #15
 8017ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8017ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d10f      	bne.n	8017b0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017af2:	f003 0320 	and.w	r3, r3, #32
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d009      	beq.n	8017b0e <HAL_UART_IRQHandler+0x66>
 8017afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017afe:	f003 0320 	and.w	r3, r3, #32
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d003      	beq.n	8017b0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f000 fb97 	bl	801823a <UART_Receive_IT>
      return;
 8017b0c:	e25b      	b.n	8017fc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8017b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	f000 80de 	beq.w	8017cd4 <HAL_UART_IRQHandler+0x22c>
 8017b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017b1c:	f003 0301 	and.w	r3, r3, #1
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d106      	bne.n	8017b32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8017b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	f000 80d1 	beq.w	8017cd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8017b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b36:	f003 0301 	and.w	r3, r3, #1
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d00b      	beq.n	8017b56 <HAL_UART_IRQHandler+0xae>
 8017b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d005      	beq.n	8017b56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b4e:	f043 0201 	orr.w	r2, r3, #1
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b5a:	f003 0304 	and.w	r3, r3, #4
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d00b      	beq.n	8017b7a <HAL_UART_IRQHandler+0xd2>
 8017b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017b66:	f003 0301 	and.w	r3, r3, #1
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d005      	beq.n	8017b7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b72:	f043 0202 	orr.w	r2, r3, #2
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017b7e:	f003 0302 	and.w	r3, r3, #2
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d00b      	beq.n	8017b9e <HAL_UART_IRQHandler+0xf6>
 8017b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017b8a:	f003 0301 	and.w	r3, r3, #1
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d005      	beq.n	8017b9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b96:	f043 0204 	orr.w	r2, r3, #4
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8017b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017ba2:	f003 0308 	and.w	r3, r3, #8
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d011      	beq.n	8017bce <HAL_UART_IRQHandler+0x126>
 8017baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017bae:	f003 0320 	and.w	r3, r3, #32
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d105      	bne.n	8017bc2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8017bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017bba:	f003 0301 	and.w	r3, r3, #1
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d005      	beq.n	8017bce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bc6:	f043 0208 	orr.w	r2, r3, #8
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	f000 81f2 	beq.w	8017fbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8017bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017bdc:	f003 0320 	and.w	r3, r3, #32
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d008      	beq.n	8017bf6 <HAL_UART_IRQHandler+0x14e>
 8017be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017be8:	f003 0320 	and.w	r3, r3, #32
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d002      	beq.n	8017bf6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f000 fb22 	bl	801823a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	695b      	ldr	r3, [r3, #20]
 8017bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c00:	2b40      	cmp	r3, #64	; 0x40
 8017c02:	bf0c      	ite	eq
 8017c04:	2301      	moveq	r3, #1
 8017c06:	2300      	movne	r3, #0
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c12:	f003 0308 	and.w	r3, r3, #8
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d103      	bne.n	8017c22 <HAL_UART_IRQHandler+0x17a>
 8017c1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d04f      	beq.n	8017cc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017c22:	6878      	ldr	r0, [r7, #4]
 8017c24:	f000 fa2a 	bl	801807c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	695b      	ldr	r3, [r3, #20]
 8017c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017c32:	2b40      	cmp	r3, #64	; 0x40
 8017c34:	d141      	bne.n	8017cba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	3314      	adds	r3, #20
 8017c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017c44:	e853 3f00 	ldrex	r3, [r3]
 8017c48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8017c4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017c54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	681b      	ldr	r3, [r3, #0]
 8017c5c:	3314      	adds	r3, #20
 8017c5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8017c62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8017c66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017c6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8017c72:	e841 2300 	strex	r3, r2, [r1]
 8017c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d1d9      	bne.n	8017c36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d013      	beq.n	8017cb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c8e:	4a7e      	ldr	r2, [pc, #504]	; (8017e88 <HAL_UART_IRQHandler+0x3e0>)
 8017c90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017c96:	4618      	mov	r0, r3
 8017c98:	f7fd ff32 	bl	8015b00 <HAL_DMA_Abort_IT>
 8017c9c:	4603      	mov	r3, r0
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d016      	beq.n	8017cd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ca8:	687a      	ldr	r2, [r7, #4]
 8017caa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8017cac:	4610      	mov	r0, r2
 8017cae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cb0:	e00e      	b.n	8017cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017cb2:	6878      	ldr	r0, [r7, #4]
 8017cb4:	f000 f99e 	bl	8017ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cb8:	e00a      	b.n	8017cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f000 f99a 	bl	8017ff4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cc0:	e006      	b.n	8017cd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f000 f996 	bl	8017ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	2200      	movs	r2, #0
 8017ccc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8017cce:	e175      	b.n	8017fbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017cd0:	bf00      	nop
    return;
 8017cd2:	e173      	b.n	8017fbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	f040 814f 	bne.w	8017f7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8017cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017ce2:	f003 0310 	and.w	r3, r3, #16
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	f000 8148 	beq.w	8017f7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8017cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017cf0:	f003 0310 	and.w	r3, r3, #16
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	f000 8141 	beq.w	8017f7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	60bb      	str	r3, [r7, #8]
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	60bb      	str	r3, [r7, #8]
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	685b      	ldr	r3, [r3, #4]
 8017d0c:	60bb      	str	r3, [r7, #8]
 8017d0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	681b      	ldr	r3, [r3, #0]
 8017d14:	695b      	ldr	r3, [r3, #20]
 8017d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d1a:	2b40      	cmp	r3, #64	; 0x40
 8017d1c:	f040 80b6 	bne.w	8017e8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	685b      	ldr	r3, [r3, #4]
 8017d28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017d2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	f000 8145 	beq.w	8017fc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017d3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	f080 813e 	bcs.w	8017fc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017d4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017d50:	69db      	ldr	r3, [r3, #28]
 8017d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017d56:	f000 8088 	beq.w	8017e6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	330c      	adds	r3, #12
 8017d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017d68:	e853 3f00 	ldrex	r3, [r3]
 8017d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8017d70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017d78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	330c      	adds	r3, #12
 8017d82:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017d86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8017d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017d96:	e841 2300 	strex	r3, r2, [r1]
 8017d9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8017d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d1d9      	bne.n	8017d5a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	3314      	adds	r3, #20
 8017dac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017db0:	e853 3f00 	ldrex	r3, [r3]
 8017db4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017db6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017db8:	f023 0301 	bic.w	r3, r3, #1
 8017dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	3314      	adds	r3, #20
 8017dc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8017dca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8017dce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dd0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017dd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017dd6:	e841 2300 	strex	r3, r2, [r1]
 8017dda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017ddc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d1e1      	bne.n	8017da6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	3314      	adds	r3, #20
 8017de8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017dea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017dec:	e853 3f00 	ldrex	r3, [r3]
 8017df0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017df8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	3314      	adds	r3, #20
 8017e02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017e06:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017e08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017e0e:	e841 2300 	strex	r3, r2, [r1]
 8017e12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d1e3      	bne.n	8017de2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	2220      	movs	r2, #32
 8017e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	2200      	movs	r2, #0
 8017e26:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	330c      	adds	r3, #12
 8017e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e32:	e853 3f00 	ldrex	r3, [r3]
 8017e36:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017e38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e3a:	f023 0310 	bic.w	r3, r3, #16
 8017e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	330c      	adds	r3, #12
 8017e48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017e4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8017e4e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017e52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017e54:	e841 2300 	strex	r3, r2, [r1]
 8017e58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d1e3      	bne.n	8017e28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017e64:	4618      	mov	r0, r3
 8017e66:	f7fd fddb 	bl	8015a20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2202      	movs	r2, #2
 8017e6e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017e78:	b29b      	uxth	r3, r3
 8017e7a:	1ad3      	subs	r3, r2, r3
 8017e7c:	b29b      	uxth	r3, r3
 8017e7e:	4619      	mov	r1, r3
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f7f9 f8f7 	bl	8011074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017e86:	e09b      	b.n	8017fc0 <HAL_UART_IRQHandler+0x518>
 8017e88:	08018143 	.word	0x08018143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017e94:	b29b      	uxth	r3, r3
 8017e96:	1ad3      	subs	r3, r2, r3
 8017e98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017ea0:	b29b      	uxth	r3, r3
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f000 808e 	beq.w	8017fc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8017ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	f000 8089 	beq.w	8017fc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	330c      	adds	r3, #12
 8017eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ebc:	e853 3f00 	ldrex	r3, [r3]
 8017ec0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ec4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017ec8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	330c      	adds	r3, #12
 8017ed2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8017ed6:	647a      	str	r2, [r7, #68]	; 0x44
 8017ed8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017eda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017edc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ede:	e841 2300 	strex	r3, r2, [r1]
 8017ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d1e3      	bne.n	8017eb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	3314      	adds	r3, #20
 8017ef0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef4:	e853 3f00 	ldrex	r3, [r3]
 8017ef8:	623b      	str	r3, [r7, #32]
   return(result);
 8017efa:	6a3b      	ldr	r3, [r7, #32]
 8017efc:	f023 0301 	bic.w	r3, r3, #1
 8017f00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	3314      	adds	r3, #20
 8017f0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017f0e:	633a      	str	r2, [r7, #48]	; 0x30
 8017f10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017f16:	e841 2300 	strex	r3, r2, [r1]
 8017f1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d1e3      	bne.n	8017eea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2220      	movs	r2, #32
 8017f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	330c      	adds	r3, #12
 8017f36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f38:	693b      	ldr	r3, [r7, #16]
 8017f3a:	e853 3f00 	ldrex	r3, [r3]
 8017f3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	f023 0310 	bic.w	r3, r3, #16
 8017f46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	681b      	ldr	r3, [r3, #0]
 8017f4e:	330c      	adds	r3, #12
 8017f50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8017f54:	61fa      	str	r2, [r7, #28]
 8017f56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f58:	69b9      	ldr	r1, [r7, #24]
 8017f5a:	69fa      	ldr	r2, [r7, #28]
 8017f5c:	e841 2300 	strex	r3, r2, [r1]
 8017f60:	617b      	str	r3, [r7, #20]
   return(result);
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d1e3      	bne.n	8017f30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	2202      	movs	r2, #2
 8017f6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017f6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017f72:	4619      	mov	r1, r3
 8017f74:	6878      	ldr	r0, [r7, #4]
 8017f76:	f7f9 f87d 	bl	8011074 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8017f7a:	e023      	b.n	8017fc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8017f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d009      	beq.n	8017f9c <HAL_UART_IRQHandler+0x4f4>
 8017f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d003      	beq.n	8017f9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8017f94:	6878      	ldr	r0, [r7, #4]
 8017f96:	f000 f8e8 	bl	801816a <UART_Transmit_IT>
    return;
 8017f9a:	e014      	b.n	8017fc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8017f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d00e      	beq.n	8017fc6 <HAL_UART_IRQHandler+0x51e>
 8017fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d008      	beq.n	8017fc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8017fb4:	6878      	ldr	r0, [r7, #4]
 8017fb6:	f000 f928 	bl	801820a <UART_EndTransmit_IT>
    return;
 8017fba:	e004      	b.n	8017fc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8017fbc:	bf00      	nop
 8017fbe:	e002      	b.n	8017fc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8017fc0:	bf00      	nop
 8017fc2:	e000      	b.n	8017fc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8017fc4:	bf00      	nop
  }
}
 8017fc6:	37e8      	adds	r7, #232	; 0xe8
 8017fc8:	46bd      	mov	sp, r7
 8017fca:	bd80      	pop	{r7, pc}

08017fcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b083      	sub	sp, #12
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8017fd4:	bf00      	nop
 8017fd6:	370c      	adds	r7, #12
 8017fd8:	46bd      	mov	sp, r7
 8017fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fde:	4770      	bx	lr

08017fe0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8017fe0:	b480      	push	{r7}
 8017fe2:	b083      	sub	sp, #12
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8017fe8:	bf00      	nop
 8017fea:	370c      	adds	r7, #12
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr

08017ff4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017ff4:	b480      	push	{r7}
 8017ff6:	b083      	sub	sp, #12
 8017ff8:	af00      	add	r7, sp, #0
 8017ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017ffc:	bf00      	nop
 8017ffe:	370c      	adds	r7, #12
 8018000:	46bd      	mov	sp, r7
 8018002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018006:	4770      	bx	lr

08018008 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018008:	b480      	push	{r7}
 801800a:	b085      	sub	sp, #20
 801800c:	af00      	add	r7, sp, #0
 801800e:	60f8      	str	r0, [r7, #12]
 8018010:	60b9      	str	r1, [r7, #8]
 8018012:	4613      	mov	r3, r2
 8018014:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	68ba      	ldr	r2, [r7, #8]
 801801a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	88fa      	ldrh	r2, [r7, #6]
 8018020:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	88fa      	ldrh	r2, [r7, #6]
 8018026:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	2200      	movs	r2, #0
 801802c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	2222      	movs	r2, #34	; 0x22
 8018032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	691b      	ldr	r3, [r3, #16]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d007      	beq.n	801804e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801803e:	68fb      	ldr	r3, [r7, #12]
 8018040:	681b      	ldr	r3, [r3, #0]
 8018042:	68da      	ldr	r2, [r3, #12]
 8018044:	68fb      	ldr	r3, [r7, #12]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801804c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801804e:	68fb      	ldr	r3, [r7, #12]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	695a      	ldr	r2, [r3, #20]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	f042 0201 	orr.w	r2, r2, #1
 801805c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	68da      	ldr	r2, [r3, #12]
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	f042 0220 	orr.w	r2, r2, #32
 801806c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801806e:	2300      	movs	r3, #0
}
 8018070:	4618      	mov	r0, r3
 8018072:	3714      	adds	r7, #20
 8018074:	46bd      	mov	sp, r7
 8018076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801807a:	4770      	bx	lr

0801807c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801807c:	b480      	push	{r7}
 801807e:	b095      	sub	sp, #84	; 0x54
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	330c      	adds	r3, #12
 801808a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801808c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801808e:	e853 3f00 	ldrex	r3, [r3]
 8018092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801809a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	330c      	adds	r3, #12
 80180a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80180a4:	643a      	str	r2, [r7, #64]	; 0x40
 80180a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80180aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80180ac:	e841 2300 	strex	r3, r2, [r1]
 80180b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80180b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	d1e5      	bne.n	8018084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	3314      	adds	r3, #20
 80180be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180c0:	6a3b      	ldr	r3, [r7, #32]
 80180c2:	e853 3f00 	ldrex	r3, [r3]
 80180c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80180c8:	69fb      	ldr	r3, [r7, #28]
 80180ca:	f023 0301 	bic.w	r3, r3, #1
 80180ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	3314      	adds	r3, #20
 80180d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80180d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80180da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80180de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180e0:	e841 2300 	strex	r3, r2, [r1]
 80180e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80180e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d1e5      	bne.n	80180b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180f0:	2b01      	cmp	r3, #1
 80180f2:	d119      	bne.n	8018128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	330c      	adds	r3, #12
 80180fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	e853 3f00 	ldrex	r3, [r3]
 8018102:	60bb      	str	r3, [r7, #8]
   return(result);
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	f023 0310 	bic.w	r3, r3, #16
 801810a:	647b      	str	r3, [r7, #68]	; 0x44
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	330c      	adds	r3, #12
 8018112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018114:	61ba      	str	r2, [r7, #24]
 8018116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018118:	6979      	ldr	r1, [r7, #20]
 801811a:	69ba      	ldr	r2, [r7, #24]
 801811c:	e841 2300 	strex	r3, r2, [r1]
 8018120:	613b      	str	r3, [r7, #16]
   return(result);
 8018122:	693b      	ldr	r3, [r7, #16]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d1e5      	bne.n	80180f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	2220      	movs	r2, #32
 801812c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2200      	movs	r2, #0
 8018134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8018136:	bf00      	nop
 8018138:	3754      	adds	r7, #84	; 0x54
 801813a:	46bd      	mov	sp, r7
 801813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018140:	4770      	bx	lr

08018142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8018142:	b580      	push	{r7, lr}
 8018144:	b084      	sub	sp, #16
 8018146:	af00      	add	r7, sp, #0
 8018148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801814e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	2200      	movs	r2, #0
 8018154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8018156:	68fb      	ldr	r3, [r7, #12]
 8018158:	2200      	movs	r2, #0
 801815a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801815c:	68f8      	ldr	r0, [r7, #12]
 801815e:	f7ff ff49 	bl	8017ff4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018162:	bf00      	nop
 8018164:	3710      	adds	r7, #16
 8018166:	46bd      	mov	sp, r7
 8018168:	bd80      	pop	{r7, pc}

0801816a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801816a:	b480      	push	{r7}
 801816c:	b085      	sub	sp, #20
 801816e:	af00      	add	r7, sp, #0
 8018170:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018178:	b2db      	uxtb	r3, r3
 801817a:	2b21      	cmp	r3, #33	; 0x21
 801817c:	d13e      	bne.n	80181fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	689b      	ldr	r3, [r3, #8]
 8018182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018186:	d114      	bne.n	80181b2 <UART_Transmit_IT+0x48>
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	691b      	ldr	r3, [r3, #16]
 801818c:	2b00      	cmp	r3, #0
 801818e:	d110      	bne.n	80181b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	6a1b      	ldr	r3, [r3, #32]
 8018194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	881b      	ldrh	r3, [r3, #0]
 801819a:	461a      	mov	r2, r3
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80181a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6a1b      	ldr	r3, [r3, #32]
 80181aa:	1c9a      	adds	r2, r3, #2
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	621a      	str	r2, [r3, #32]
 80181b0:	e008      	b.n	80181c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	6a1b      	ldr	r3, [r3, #32]
 80181b6:	1c59      	adds	r1, r3, #1
 80181b8:	687a      	ldr	r2, [r7, #4]
 80181ba:	6211      	str	r1, [r2, #32]
 80181bc:	781a      	ldrb	r2, [r3, #0]
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80181c8:	b29b      	uxth	r3, r3
 80181ca:	3b01      	subs	r3, #1
 80181cc:	b29b      	uxth	r3, r3
 80181ce:	687a      	ldr	r2, [r7, #4]
 80181d0:	4619      	mov	r1, r3
 80181d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d10f      	bne.n	80181f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	68da      	ldr	r2, [r3, #12]
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80181e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	68da      	ldr	r2, [r3, #12]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80181f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80181f8:	2300      	movs	r3, #0
 80181fa:	e000      	b.n	80181fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80181fc:	2302      	movs	r3, #2
  }
}
 80181fe:	4618      	mov	r0, r3
 8018200:	3714      	adds	r7, #20
 8018202:	46bd      	mov	sp, r7
 8018204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018208:	4770      	bx	lr

0801820a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801820a:	b580      	push	{r7, lr}
 801820c:	b082      	sub	sp, #8
 801820e:	af00      	add	r7, sp, #0
 8018210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	681b      	ldr	r3, [r3, #0]
 8018216:	68da      	ldr	r2, [r3, #12]
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	2220      	movs	r2, #32
 8018226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801822a:	6878      	ldr	r0, [r7, #4]
 801822c:	f7ff fece 	bl	8017fcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8018230:	2300      	movs	r3, #0
}
 8018232:	4618      	mov	r0, r3
 8018234:	3708      	adds	r7, #8
 8018236:	46bd      	mov	sp, r7
 8018238:	bd80      	pop	{r7, pc}

0801823a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801823a:	b580      	push	{r7, lr}
 801823c:	b08c      	sub	sp, #48	; 0x30
 801823e:	af00      	add	r7, sp, #0
 8018240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018248:	b2db      	uxtb	r3, r3
 801824a:	2b22      	cmp	r3, #34	; 0x22
 801824c:	f040 80ae 	bne.w	80183ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	689b      	ldr	r3, [r3, #8]
 8018254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018258:	d117      	bne.n	801828a <UART_Receive_IT+0x50>
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	691b      	ldr	r3, [r3, #16]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d113      	bne.n	801828a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8018262:	2300      	movs	r3, #0
 8018264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801826a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	b29b      	uxth	r3, r3
 8018274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018278:	b29a      	uxth	r2, r3
 801827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801827c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018282:	1c9a      	adds	r2, r3, #2
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	629a      	str	r2, [r3, #40]	; 0x28
 8018288:	e026      	b.n	80182d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801828e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8018290:	2300      	movs	r3, #0
 8018292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	689b      	ldr	r3, [r3, #8]
 8018298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801829c:	d007      	beq.n	80182ae <UART_Receive_IT+0x74>
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	689b      	ldr	r3, [r3, #8]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d10a      	bne.n	80182bc <UART_Receive_IT+0x82>
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	691b      	ldr	r3, [r3, #16]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d106      	bne.n	80182bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	685b      	ldr	r3, [r3, #4]
 80182b4:	b2da      	uxtb	r2, r3
 80182b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182b8:	701a      	strb	r2, [r3, #0]
 80182ba:	e008      	b.n	80182ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	685b      	ldr	r3, [r3, #4]
 80182c2:	b2db      	uxtb	r3, r3
 80182c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80182c8:	b2da      	uxtb	r2, r3
 80182ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182d2:	1c5a      	adds	r2, r3, #1
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80182dc:	b29b      	uxth	r3, r3
 80182de:	3b01      	subs	r3, #1
 80182e0:	b29b      	uxth	r3, r3
 80182e2:	687a      	ldr	r2, [r7, #4]
 80182e4:	4619      	mov	r1, r3
 80182e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d15d      	bne.n	80183a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	68da      	ldr	r2, [r3, #12]
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	f022 0220 	bic.w	r2, r2, #32
 80182fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	68da      	ldr	r2, [r3, #12]
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801830a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	695a      	ldr	r2, [r3, #20]
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	f022 0201 	bic.w	r2, r2, #1
 801831a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2220      	movs	r2, #32
 8018320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	2200      	movs	r2, #0
 8018328:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801832e:	2b01      	cmp	r3, #1
 8018330:	d135      	bne.n	801839e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	2200      	movs	r2, #0
 8018336:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	330c      	adds	r3, #12
 801833e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018340:	697b      	ldr	r3, [r7, #20]
 8018342:	e853 3f00 	ldrex	r3, [r3]
 8018346:	613b      	str	r3, [r7, #16]
   return(result);
 8018348:	693b      	ldr	r3, [r7, #16]
 801834a:	f023 0310 	bic.w	r3, r3, #16
 801834e:	627b      	str	r3, [r7, #36]	; 0x24
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	330c      	adds	r3, #12
 8018356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018358:	623a      	str	r2, [r7, #32]
 801835a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801835c:	69f9      	ldr	r1, [r7, #28]
 801835e:	6a3a      	ldr	r2, [r7, #32]
 8018360:	e841 2300 	strex	r3, r2, [r1]
 8018364:	61bb      	str	r3, [r7, #24]
   return(result);
 8018366:	69bb      	ldr	r3, [r7, #24]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d1e5      	bne.n	8018338 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	f003 0310 	and.w	r3, r3, #16
 8018376:	2b10      	cmp	r3, #16
 8018378:	d10a      	bne.n	8018390 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801837a:	2300      	movs	r3, #0
 801837c:	60fb      	str	r3, [r7, #12]
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	681b      	ldr	r3, [r3, #0]
 8018384:	60fb      	str	r3, [r7, #12]
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	685b      	ldr	r3, [r3, #4]
 801838c:	60fb      	str	r3, [r7, #12]
 801838e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018394:	4619      	mov	r1, r3
 8018396:	6878      	ldr	r0, [r7, #4]
 8018398:	f7f8 fe6c 	bl	8011074 <HAL_UARTEx_RxEventCallback>
 801839c:	e002      	b.n	80183a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801839e:	6878      	ldr	r0, [r7, #4]
 80183a0:	f7ff fe1e 	bl	8017fe0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80183a4:	2300      	movs	r3, #0
 80183a6:	e002      	b.n	80183ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80183a8:	2300      	movs	r3, #0
 80183aa:	e000      	b.n	80183ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80183ac:	2302      	movs	r3, #2
  }
}
 80183ae:	4618      	mov	r0, r3
 80183b0:	3730      	adds	r7, #48	; 0x30
 80183b2:	46bd      	mov	sp, r7
 80183b4:	bd80      	pop	{r7, pc}
	...

080183b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80183b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80183bc:	b0c0      	sub	sp, #256	; 0x100
 80183be:	af00      	add	r7, sp, #0
 80183c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80183c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	691b      	ldr	r3, [r3, #16]
 80183cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80183d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183d4:	68d9      	ldr	r1, [r3, #12]
 80183d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183da:	681a      	ldr	r2, [r3, #0]
 80183dc:	ea40 0301 	orr.w	r3, r0, r1
 80183e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80183e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183e6:	689a      	ldr	r2, [r3, #8]
 80183e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183ec:	691b      	ldr	r3, [r3, #16]
 80183ee:	431a      	orrs	r2, r3
 80183f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183f4:	695b      	ldr	r3, [r3, #20]
 80183f6:	431a      	orrs	r2, r3
 80183f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80183fc:	69db      	ldr	r3, [r3, #28]
 80183fe:	4313      	orrs	r3, r2
 8018400:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8018404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	68db      	ldr	r3, [r3, #12]
 801840c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8018410:	f021 010c 	bic.w	r1, r1, #12
 8018414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018418:	681a      	ldr	r2, [r3, #0]
 801841a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801841e:	430b      	orrs	r3, r1
 8018420:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	695b      	ldr	r3, [r3, #20]
 801842a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801842e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018432:	6999      	ldr	r1, [r3, #24]
 8018434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018438:	681a      	ldr	r2, [r3, #0]
 801843a:	ea40 0301 	orr.w	r3, r0, r1
 801843e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8018440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018444:	681a      	ldr	r2, [r3, #0]
 8018446:	4b8f      	ldr	r3, [pc, #572]	; (8018684 <UART_SetConfig+0x2cc>)
 8018448:	429a      	cmp	r2, r3
 801844a:	d005      	beq.n	8018458 <UART_SetConfig+0xa0>
 801844c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018450:	681a      	ldr	r2, [r3, #0]
 8018452:	4b8d      	ldr	r3, [pc, #564]	; (8018688 <UART_SetConfig+0x2d0>)
 8018454:	429a      	cmp	r2, r3
 8018456:	d104      	bne.n	8018462 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018458:	f7fe f9e8 	bl	801682c <HAL_RCC_GetPCLK2Freq>
 801845c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8018460:	e003      	b.n	801846a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8018462:	f7fe f9cf 	bl	8016804 <HAL_RCC_GetPCLK1Freq>
 8018466:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801846a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801846e:	69db      	ldr	r3, [r3, #28]
 8018470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018474:	f040 810c 	bne.w	8018690 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801847c:	2200      	movs	r2, #0
 801847e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8018482:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8018486:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 801848a:	4622      	mov	r2, r4
 801848c:	462b      	mov	r3, r5
 801848e:	1891      	adds	r1, r2, r2
 8018490:	65b9      	str	r1, [r7, #88]	; 0x58
 8018492:	415b      	adcs	r3, r3
 8018494:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018496:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 801849a:	4621      	mov	r1, r4
 801849c:	eb12 0801 	adds.w	r8, r2, r1
 80184a0:	4629      	mov	r1, r5
 80184a2:	eb43 0901 	adc.w	r9, r3, r1
 80184a6:	f04f 0200 	mov.w	r2, #0
 80184aa:	f04f 0300 	mov.w	r3, #0
 80184ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80184b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80184b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80184ba:	4690      	mov	r8, r2
 80184bc:	4699      	mov	r9, r3
 80184be:	4623      	mov	r3, r4
 80184c0:	eb18 0303 	adds.w	r3, r8, r3
 80184c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80184c8:	462b      	mov	r3, r5
 80184ca:	eb49 0303 	adc.w	r3, r9, r3
 80184ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80184d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80184d6:	685b      	ldr	r3, [r3, #4]
 80184d8:	2200      	movs	r2, #0
 80184da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80184de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80184e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80184e6:	460b      	mov	r3, r1
 80184e8:	18db      	adds	r3, r3, r3
 80184ea:	653b      	str	r3, [r7, #80]	; 0x50
 80184ec:	4613      	mov	r3, r2
 80184ee:	eb42 0303 	adc.w	r3, r2, r3
 80184f2:	657b      	str	r3, [r7, #84]	; 0x54
 80184f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80184f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80184fc:	f7f8 fbdc 	bl	8010cb8 <__aeabi_uldivmod>
 8018500:	4602      	mov	r2, r0
 8018502:	460b      	mov	r3, r1
 8018504:	4b61      	ldr	r3, [pc, #388]	; (801868c <UART_SetConfig+0x2d4>)
 8018506:	fba3 2302 	umull	r2, r3, r3, r2
 801850a:	095b      	lsrs	r3, r3, #5
 801850c:	011c      	lsls	r4, r3, #4
 801850e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018512:	2200      	movs	r2, #0
 8018514:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018518:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801851c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8018520:	4642      	mov	r2, r8
 8018522:	464b      	mov	r3, r9
 8018524:	1891      	adds	r1, r2, r2
 8018526:	64b9      	str	r1, [r7, #72]	; 0x48
 8018528:	415b      	adcs	r3, r3
 801852a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801852c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8018530:	4641      	mov	r1, r8
 8018532:	eb12 0a01 	adds.w	sl, r2, r1
 8018536:	4649      	mov	r1, r9
 8018538:	eb43 0b01 	adc.w	fp, r3, r1
 801853c:	f04f 0200 	mov.w	r2, #0
 8018540:	f04f 0300 	mov.w	r3, #0
 8018544:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018548:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801854c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8018550:	4692      	mov	sl, r2
 8018552:	469b      	mov	fp, r3
 8018554:	4643      	mov	r3, r8
 8018556:	eb1a 0303 	adds.w	r3, sl, r3
 801855a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801855e:	464b      	mov	r3, r9
 8018560:	eb4b 0303 	adc.w	r3, fp, r3
 8018564:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801856c:	685b      	ldr	r3, [r3, #4]
 801856e:	2200      	movs	r2, #0
 8018570:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018574:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018578:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801857c:	460b      	mov	r3, r1
 801857e:	18db      	adds	r3, r3, r3
 8018580:	643b      	str	r3, [r7, #64]	; 0x40
 8018582:	4613      	mov	r3, r2
 8018584:	eb42 0303 	adc.w	r3, r2, r3
 8018588:	647b      	str	r3, [r7, #68]	; 0x44
 801858a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801858e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018592:	f7f8 fb91 	bl	8010cb8 <__aeabi_uldivmod>
 8018596:	4602      	mov	r2, r0
 8018598:	460b      	mov	r3, r1
 801859a:	4611      	mov	r1, r2
 801859c:	4b3b      	ldr	r3, [pc, #236]	; (801868c <UART_SetConfig+0x2d4>)
 801859e:	fba3 2301 	umull	r2, r3, r3, r1
 80185a2:	095b      	lsrs	r3, r3, #5
 80185a4:	2264      	movs	r2, #100	; 0x64
 80185a6:	fb02 f303 	mul.w	r3, r2, r3
 80185aa:	1acb      	subs	r3, r1, r3
 80185ac:	00db      	lsls	r3, r3, #3
 80185ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80185b2:	4b36      	ldr	r3, [pc, #216]	; (801868c <UART_SetConfig+0x2d4>)
 80185b4:	fba3 2302 	umull	r2, r3, r3, r2
 80185b8:	095b      	lsrs	r3, r3, #5
 80185ba:	005b      	lsls	r3, r3, #1
 80185bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80185c0:	441c      	add	r4, r3
 80185c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80185c6:	2200      	movs	r2, #0
 80185c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80185cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80185d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80185d4:	4642      	mov	r2, r8
 80185d6:	464b      	mov	r3, r9
 80185d8:	1891      	adds	r1, r2, r2
 80185da:	63b9      	str	r1, [r7, #56]	; 0x38
 80185dc:	415b      	adcs	r3, r3
 80185de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80185e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80185e4:	4641      	mov	r1, r8
 80185e6:	1851      	adds	r1, r2, r1
 80185e8:	6339      	str	r1, [r7, #48]	; 0x30
 80185ea:	4649      	mov	r1, r9
 80185ec:	414b      	adcs	r3, r1
 80185ee:	637b      	str	r3, [r7, #52]	; 0x34
 80185f0:	f04f 0200 	mov.w	r2, #0
 80185f4:	f04f 0300 	mov.w	r3, #0
 80185f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80185fc:	4659      	mov	r1, fp
 80185fe:	00cb      	lsls	r3, r1, #3
 8018600:	4651      	mov	r1, sl
 8018602:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018606:	4651      	mov	r1, sl
 8018608:	00ca      	lsls	r2, r1, #3
 801860a:	4610      	mov	r0, r2
 801860c:	4619      	mov	r1, r3
 801860e:	4603      	mov	r3, r0
 8018610:	4642      	mov	r2, r8
 8018612:	189b      	adds	r3, r3, r2
 8018614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018618:	464b      	mov	r3, r9
 801861a:	460a      	mov	r2, r1
 801861c:	eb42 0303 	adc.w	r3, r2, r3
 8018620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018628:	685b      	ldr	r3, [r3, #4]
 801862a:	2200      	movs	r2, #0
 801862c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8018630:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8018634:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8018638:	460b      	mov	r3, r1
 801863a:	18db      	adds	r3, r3, r3
 801863c:	62bb      	str	r3, [r7, #40]	; 0x28
 801863e:	4613      	mov	r3, r2
 8018640:	eb42 0303 	adc.w	r3, r2, r3
 8018644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018646:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801864a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801864e:	f7f8 fb33 	bl	8010cb8 <__aeabi_uldivmod>
 8018652:	4602      	mov	r2, r0
 8018654:	460b      	mov	r3, r1
 8018656:	4b0d      	ldr	r3, [pc, #52]	; (801868c <UART_SetConfig+0x2d4>)
 8018658:	fba3 1302 	umull	r1, r3, r3, r2
 801865c:	095b      	lsrs	r3, r3, #5
 801865e:	2164      	movs	r1, #100	; 0x64
 8018660:	fb01 f303 	mul.w	r3, r1, r3
 8018664:	1ad3      	subs	r3, r2, r3
 8018666:	00db      	lsls	r3, r3, #3
 8018668:	3332      	adds	r3, #50	; 0x32
 801866a:	4a08      	ldr	r2, [pc, #32]	; (801868c <UART_SetConfig+0x2d4>)
 801866c:	fba2 2303 	umull	r2, r3, r2, r3
 8018670:	095b      	lsrs	r3, r3, #5
 8018672:	f003 0207 	and.w	r2, r3, #7
 8018676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4422      	add	r2, r4
 801867e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8018680:	e106      	b.n	8018890 <UART_SetConfig+0x4d8>
 8018682:	bf00      	nop
 8018684:	40011000 	.word	0x40011000
 8018688:	40011400 	.word	0x40011400
 801868c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8018690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018694:	2200      	movs	r2, #0
 8018696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801869a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801869e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80186a2:	4642      	mov	r2, r8
 80186a4:	464b      	mov	r3, r9
 80186a6:	1891      	adds	r1, r2, r2
 80186a8:	6239      	str	r1, [r7, #32]
 80186aa:	415b      	adcs	r3, r3
 80186ac:	627b      	str	r3, [r7, #36]	; 0x24
 80186ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80186b2:	4641      	mov	r1, r8
 80186b4:	1854      	adds	r4, r2, r1
 80186b6:	4649      	mov	r1, r9
 80186b8:	eb43 0501 	adc.w	r5, r3, r1
 80186bc:	f04f 0200 	mov.w	r2, #0
 80186c0:	f04f 0300 	mov.w	r3, #0
 80186c4:	00eb      	lsls	r3, r5, #3
 80186c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80186ca:	00e2      	lsls	r2, r4, #3
 80186cc:	4614      	mov	r4, r2
 80186ce:	461d      	mov	r5, r3
 80186d0:	4643      	mov	r3, r8
 80186d2:	18e3      	adds	r3, r4, r3
 80186d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80186d8:	464b      	mov	r3, r9
 80186da:	eb45 0303 	adc.w	r3, r5, r3
 80186de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80186e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186e6:	685b      	ldr	r3, [r3, #4]
 80186e8:	2200      	movs	r2, #0
 80186ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80186ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80186f2:	f04f 0200 	mov.w	r2, #0
 80186f6:	f04f 0300 	mov.w	r3, #0
 80186fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80186fe:	4629      	mov	r1, r5
 8018700:	008b      	lsls	r3, r1, #2
 8018702:	4621      	mov	r1, r4
 8018704:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018708:	4621      	mov	r1, r4
 801870a:	008a      	lsls	r2, r1, #2
 801870c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8018710:	f7f8 fad2 	bl	8010cb8 <__aeabi_uldivmod>
 8018714:	4602      	mov	r2, r0
 8018716:	460b      	mov	r3, r1
 8018718:	4b60      	ldr	r3, [pc, #384]	; (801889c <UART_SetConfig+0x4e4>)
 801871a:	fba3 2302 	umull	r2, r3, r3, r2
 801871e:	095b      	lsrs	r3, r3, #5
 8018720:	011c      	lsls	r4, r3, #4
 8018722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018726:	2200      	movs	r2, #0
 8018728:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801872c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8018730:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8018734:	4642      	mov	r2, r8
 8018736:	464b      	mov	r3, r9
 8018738:	1891      	adds	r1, r2, r2
 801873a:	61b9      	str	r1, [r7, #24]
 801873c:	415b      	adcs	r3, r3
 801873e:	61fb      	str	r3, [r7, #28]
 8018740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018744:	4641      	mov	r1, r8
 8018746:	1851      	adds	r1, r2, r1
 8018748:	6139      	str	r1, [r7, #16]
 801874a:	4649      	mov	r1, r9
 801874c:	414b      	adcs	r3, r1
 801874e:	617b      	str	r3, [r7, #20]
 8018750:	f04f 0200 	mov.w	r2, #0
 8018754:	f04f 0300 	mov.w	r3, #0
 8018758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801875c:	4659      	mov	r1, fp
 801875e:	00cb      	lsls	r3, r1, #3
 8018760:	4651      	mov	r1, sl
 8018762:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018766:	4651      	mov	r1, sl
 8018768:	00ca      	lsls	r2, r1, #3
 801876a:	4610      	mov	r0, r2
 801876c:	4619      	mov	r1, r3
 801876e:	4603      	mov	r3, r0
 8018770:	4642      	mov	r2, r8
 8018772:	189b      	adds	r3, r3, r2
 8018774:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018778:	464b      	mov	r3, r9
 801877a:	460a      	mov	r2, r1
 801877c:	eb42 0303 	adc.w	r3, r2, r3
 8018780:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018788:	685b      	ldr	r3, [r3, #4]
 801878a:	2200      	movs	r2, #0
 801878c:	67bb      	str	r3, [r7, #120]	; 0x78
 801878e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8018790:	f04f 0200 	mov.w	r2, #0
 8018794:	f04f 0300 	mov.w	r3, #0
 8018798:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 801879c:	4649      	mov	r1, r9
 801879e:	008b      	lsls	r3, r1, #2
 80187a0:	4641      	mov	r1, r8
 80187a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80187a6:	4641      	mov	r1, r8
 80187a8:	008a      	lsls	r2, r1, #2
 80187aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80187ae:	f7f8 fa83 	bl	8010cb8 <__aeabi_uldivmod>
 80187b2:	4602      	mov	r2, r0
 80187b4:	460b      	mov	r3, r1
 80187b6:	4611      	mov	r1, r2
 80187b8:	4b38      	ldr	r3, [pc, #224]	; (801889c <UART_SetConfig+0x4e4>)
 80187ba:	fba3 2301 	umull	r2, r3, r3, r1
 80187be:	095b      	lsrs	r3, r3, #5
 80187c0:	2264      	movs	r2, #100	; 0x64
 80187c2:	fb02 f303 	mul.w	r3, r2, r3
 80187c6:	1acb      	subs	r3, r1, r3
 80187c8:	011b      	lsls	r3, r3, #4
 80187ca:	3332      	adds	r3, #50	; 0x32
 80187cc:	4a33      	ldr	r2, [pc, #204]	; (801889c <UART_SetConfig+0x4e4>)
 80187ce:	fba2 2303 	umull	r2, r3, r2, r3
 80187d2:	095b      	lsrs	r3, r3, #5
 80187d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80187d8:	441c      	add	r4, r3
 80187da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80187de:	2200      	movs	r2, #0
 80187e0:	673b      	str	r3, [r7, #112]	; 0x70
 80187e2:	677a      	str	r2, [r7, #116]	; 0x74
 80187e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80187e8:	4642      	mov	r2, r8
 80187ea:	464b      	mov	r3, r9
 80187ec:	1891      	adds	r1, r2, r2
 80187ee:	60b9      	str	r1, [r7, #8]
 80187f0:	415b      	adcs	r3, r3
 80187f2:	60fb      	str	r3, [r7, #12]
 80187f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80187f8:	4641      	mov	r1, r8
 80187fa:	1851      	adds	r1, r2, r1
 80187fc:	6039      	str	r1, [r7, #0]
 80187fe:	4649      	mov	r1, r9
 8018800:	414b      	adcs	r3, r1
 8018802:	607b      	str	r3, [r7, #4]
 8018804:	f04f 0200 	mov.w	r2, #0
 8018808:	f04f 0300 	mov.w	r3, #0
 801880c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018810:	4659      	mov	r1, fp
 8018812:	00cb      	lsls	r3, r1, #3
 8018814:	4651      	mov	r1, sl
 8018816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801881a:	4651      	mov	r1, sl
 801881c:	00ca      	lsls	r2, r1, #3
 801881e:	4610      	mov	r0, r2
 8018820:	4619      	mov	r1, r3
 8018822:	4603      	mov	r3, r0
 8018824:	4642      	mov	r2, r8
 8018826:	189b      	adds	r3, r3, r2
 8018828:	66bb      	str	r3, [r7, #104]	; 0x68
 801882a:	464b      	mov	r3, r9
 801882c:	460a      	mov	r2, r1
 801882e:	eb42 0303 	adc.w	r3, r2, r3
 8018832:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018838:	685b      	ldr	r3, [r3, #4]
 801883a:	2200      	movs	r2, #0
 801883c:	663b      	str	r3, [r7, #96]	; 0x60
 801883e:	667a      	str	r2, [r7, #100]	; 0x64
 8018840:	f04f 0200 	mov.w	r2, #0
 8018844:	f04f 0300 	mov.w	r3, #0
 8018848:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801884c:	4649      	mov	r1, r9
 801884e:	008b      	lsls	r3, r1, #2
 8018850:	4641      	mov	r1, r8
 8018852:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018856:	4641      	mov	r1, r8
 8018858:	008a      	lsls	r2, r1, #2
 801885a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 801885e:	f7f8 fa2b 	bl	8010cb8 <__aeabi_uldivmod>
 8018862:	4602      	mov	r2, r0
 8018864:	460b      	mov	r3, r1
 8018866:	4b0d      	ldr	r3, [pc, #52]	; (801889c <UART_SetConfig+0x4e4>)
 8018868:	fba3 1302 	umull	r1, r3, r3, r2
 801886c:	095b      	lsrs	r3, r3, #5
 801886e:	2164      	movs	r1, #100	; 0x64
 8018870:	fb01 f303 	mul.w	r3, r1, r3
 8018874:	1ad3      	subs	r3, r2, r3
 8018876:	011b      	lsls	r3, r3, #4
 8018878:	3332      	adds	r3, #50	; 0x32
 801887a:	4a08      	ldr	r2, [pc, #32]	; (801889c <UART_SetConfig+0x4e4>)
 801887c:	fba2 2303 	umull	r2, r3, r2, r3
 8018880:	095b      	lsrs	r3, r3, #5
 8018882:	f003 020f 	and.w	r2, r3, #15
 8018886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	4422      	add	r2, r4
 801888e:	609a      	str	r2, [r3, #8]
}
 8018890:	bf00      	nop
 8018892:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018896:	46bd      	mov	sp, r7
 8018898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801889c:	51eb851f 	.word	0x51eb851f

080188a0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b084      	sub	sp, #16
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80188a8:	4b22      	ldr	r3, [pc, #136]	; (8018934 <WIZCHIP_READ+0x94>)
 80188aa:	68db      	ldr	r3, [r3, #12]
 80188ac:	4798      	blx	r3
   WIZCHIP.CS._select();
 80188ae:	4b21      	ldr	r3, [pc, #132]	; (8018934 <WIZCHIP_READ+0x94>)
 80188b0:	695b      	ldr	r3, [r3, #20]
 80188b2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80188b4:	4b1f      	ldr	r3, [pc, #124]	; (8018934 <WIZCHIP_READ+0x94>)
 80188b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d003      	beq.n	80188c4 <WIZCHIP_READ+0x24>
 80188bc:	4b1d      	ldr	r3, [pc, #116]	; (8018934 <WIZCHIP_READ+0x94>)
 80188be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d114      	bne.n	80188ee <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80188c4:	4b1b      	ldr	r3, [pc, #108]	; (8018934 <WIZCHIP_READ+0x94>)
 80188c6:	6a1b      	ldr	r3, [r3, #32]
 80188c8:	687a      	ldr	r2, [r7, #4]
 80188ca:	0c12      	lsrs	r2, r2, #16
 80188cc:	b2d2      	uxtb	r2, r2
 80188ce:	4610      	mov	r0, r2
 80188d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80188d2:	4b18      	ldr	r3, [pc, #96]	; (8018934 <WIZCHIP_READ+0x94>)
 80188d4:	6a1b      	ldr	r3, [r3, #32]
 80188d6:	687a      	ldr	r2, [r7, #4]
 80188d8:	0a12      	lsrs	r2, r2, #8
 80188da:	b2d2      	uxtb	r2, r2
 80188dc:	4610      	mov	r0, r2
 80188de:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80188e0:	4b14      	ldr	r3, [pc, #80]	; (8018934 <WIZCHIP_READ+0x94>)
 80188e2:	6a1b      	ldr	r3, [r3, #32]
 80188e4:	687a      	ldr	r2, [r7, #4]
 80188e6:	b2d2      	uxtb	r2, r2
 80188e8:	4610      	mov	r0, r2
 80188ea:	4798      	blx	r3
 80188ec:	e011      	b.n	8018912 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	0c1b      	lsrs	r3, r3, #16
 80188f2:	b2db      	uxtb	r3, r3
 80188f4:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	0a1b      	lsrs	r3, r3, #8
 80188fa:	b2db      	uxtb	r3, r3
 80188fc:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	b2db      	uxtb	r3, r3
 8018902:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018904:	4b0b      	ldr	r3, [pc, #44]	; (8018934 <WIZCHIP_READ+0x94>)
 8018906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018908:	f107 020c 	add.w	r2, r7, #12
 801890c:	2103      	movs	r1, #3
 801890e:	4610      	mov	r0, r2
 8018910:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8018912:	4b08      	ldr	r3, [pc, #32]	; (8018934 <WIZCHIP_READ+0x94>)
 8018914:	69db      	ldr	r3, [r3, #28]
 8018916:	4798      	blx	r3
 8018918:	4603      	mov	r3, r0
 801891a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 801891c:	4b05      	ldr	r3, [pc, #20]	; (8018934 <WIZCHIP_READ+0x94>)
 801891e:	699b      	ldr	r3, [r3, #24]
 8018920:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018922:	4b04      	ldr	r3, [pc, #16]	; (8018934 <WIZCHIP_READ+0x94>)
 8018924:	691b      	ldr	r3, [r3, #16]
 8018926:	4798      	blx	r3
   return ret;
 8018928:	7bfb      	ldrb	r3, [r7, #15]
}
 801892a:	4618      	mov	r0, r3
 801892c:	3710      	adds	r7, #16
 801892e:	46bd      	mov	sp, r7
 8018930:	bd80      	pop	{r7, pc}
 8018932:	bf00      	nop
 8018934:	200000c4 	.word	0x200000c4

08018938 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b084      	sub	sp, #16
 801893c:	af00      	add	r7, sp, #0
 801893e:	6078      	str	r0, [r7, #4]
 8018940:	460b      	mov	r3, r1
 8018942:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8018944:	4b22      	ldr	r3, [pc, #136]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 8018946:	68db      	ldr	r3, [r3, #12]
 8018948:	4798      	blx	r3
   WIZCHIP.CS._select();
 801894a:	4b21      	ldr	r3, [pc, #132]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 801894c:	695b      	ldr	r3, [r3, #20]
 801894e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f043 0304 	orr.w	r3, r3, #4
 8018956:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018958:	4b1d      	ldr	r3, [pc, #116]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 801895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801895c:	2b00      	cmp	r3, #0
 801895e:	d119      	bne.n	8018994 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018960:	4b1b      	ldr	r3, [pc, #108]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 8018962:	6a1b      	ldr	r3, [r3, #32]
 8018964:	687a      	ldr	r2, [r7, #4]
 8018966:	0c12      	lsrs	r2, r2, #16
 8018968:	b2d2      	uxtb	r2, r2
 801896a:	4610      	mov	r0, r2
 801896c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 801896e:	4b18      	ldr	r3, [pc, #96]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 8018970:	6a1b      	ldr	r3, [r3, #32]
 8018972:	687a      	ldr	r2, [r7, #4]
 8018974:	0a12      	lsrs	r2, r2, #8
 8018976:	b2d2      	uxtb	r2, r2
 8018978:	4610      	mov	r0, r2
 801897a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 801897c:	4b14      	ldr	r3, [pc, #80]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 801897e:	6a1b      	ldr	r3, [r3, #32]
 8018980:	687a      	ldr	r2, [r7, #4]
 8018982:	b2d2      	uxtb	r2, r2
 8018984:	4610      	mov	r0, r2
 8018986:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8018988:	4b11      	ldr	r3, [pc, #68]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 801898a:	6a1b      	ldr	r3, [r3, #32]
 801898c:	78fa      	ldrb	r2, [r7, #3]
 801898e:	4610      	mov	r0, r2
 8018990:	4798      	blx	r3
 8018992:	e013      	b.n	80189bc <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	0c1b      	lsrs	r3, r3, #16
 8018998:	b2db      	uxtb	r3, r3
 801899a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	0a1b      	lsrs	r3, r3, #8
 80189a0:	b2db      	uxtb	r3, r3
 80189a2:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	b2db      	uxtb	r3, r3
 80189a8:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80189aa:	78fb      	ldrb	r3, [r7, #3]
 80189ac:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80189ae:	4b08      	ldr	r3, [pc, #32]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 80189b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189b2:	f107 020c 	add.w	r2, r7, #12
 80189b6:	2104      	movs	r1, #4
 80189b8:	4610      	mov	r0, r2
 80189ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80189bc:	4b04      	ldr	r3, [pc, #16]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 80189be:	699b      	ldr	r3, [r3, #24]
 80189c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80189c2:	4b03      	ldr	r3, [pc, #12]	; (80189d0 <WIZCHIP_WRITE+0x98>)
 80189c4:	691b      	ldr	r3, [r3, #16]
 80189c6:	4798      	blx	r3
}
 80189c8:	bf00      	nop
 80189ca:	3710      	adds	r7, #16
 80189cc:	46bd      	mov	sp, r7
 80189ce:	bd80      	pop	{r7, pc}
 80189d0:	200000c4 	.word	0x200000c4

080189d4 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80189d4:	b590      	push	{r4, r7, lr}
 80189d6:	b087      	sub	sp, #28
 80189d8:	af00      	add	r7, sp, #0
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	60b9      	str	r1, [r7, #8]
 80189de:	4613      	mov	r3, r2
 80189e0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80189e2:	4b2b      	ldr	r3, [pc, #172]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	4798      	blx	r3
   WIZCHIP.CS._select();
 80189e8:	4b29      	ldr	r3, [pc, #164]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 80189ea:	695b      	ldr	r3, [r3, #20]
 80189ec:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80189ee:	4b28      	ldr	r3, [pc, #160]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 80189f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d003      	beq.n	80189fe <WIZCHIP_READ_BUF+0x2a>
 80189f6:	4b26      	ldr	r3, [pc, #152]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 80189f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d126      	bne.n	8018a4c <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80189fe:	4b24      	ldr	r3, [pc, #144]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a00:	6a1b      	ldr	r3, [r3, #32]
 8018a02:	68fa      	ldr	r2, [r7, #12]
 8018a04:	0c12      	lsrs	r2, r2, #16
 8018a06:	b2d2      	uxtb	r2, r2
 8018a08:	4610      	mov	r0, r2
 8018a0a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018a0c:	4b20      	ldr	r3, [pc, #128]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a0e:	6a1b      	ldr	r3, [r3, #32]
 8018a10:	68fa      	ldr	r2, [r7, #12]
 8018a12:	0a12      	lsrs	r2, r2, #8
 8018a14:	b2d2      	uxtb	r2, r2
 8018a16:	4610      	mov	r0, r2
 8018a18:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018a1a:	4b1d      	ldr	r3, [pc, #116]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a1c:	6a1b      	ldr	r3, [r3, #32]
 8018a1e:	68fa      	ldr	r2, [r7, #12]
 8018a20:	b2d2      	uxtb	r2, r2
 8018a22:	4610      	mov	r0, r2
 8018a24:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018a26:	2300      	movs	r3, #0
 8018a28:	82fb      	strh	r3, [r7, #22]
 8018a2a:	e00a      	b.n	8018a42 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8018a2c:	4b18      	ldr	r3, [pc, #96]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a2e:	69db      	ldr	r3, [r3, #28]
 8018a30:	8afa      	ldrh	r2, [r7, #22]
 8018a32:	68b9      	ldr	r1, [r7, #8]
 8018a34:	188c      	adds	r4, r1, r2
 8018a36:	4798      	blx	r3
 8018a38:	4603      	mov	r3, r0
 8018a3a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8018a3c:	8afb      	ldrh	r3, [r7, #22]
 8018a3e:	3301      	adds	r3, #1
 8018a40:	82fb      	strh	r3, [r7, #22]
 8018a42:	8afa      	ldrh	r2, [r7, #22]
 8018a44:	88fb      	ldrh	r3, [r7, #6]
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d3f0      	bcc.n	8018a2c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018a4a:	e017      	b.n	8018a7c <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	0c1b      	lsrs	r3, r3, #16
 8018a50:	b2db      	uxtb	r3, r3
 8018a52:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	0a1b      	lsrs	r3, r3, #8
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	b2db      	uxtb	r3, r3
 8018a60:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018a62:	4b0b      	ldr	r3, [pc, #44]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a66:	f107 0210 	add.w	r2, r7, #16
 8018a6a:	2103      	movs	r1, #3
 8018a6c:	4610      	mov	r0, r2
 8018a6e:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8018a70:	4b07      	ldr	r3, [pc, #28]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a74:	88fa      	ldrh	r2, [r7, #6]
 8018a76:	4611      	mov	r1, r2
 8018a78:	68b8      	ldr	r0, [r7, #8]
 8018a7a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018a7c:	4b04      	ldr	r3, [pc, #16]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a7e:	699b      	ldr	r3, [r3, #24]
 8018a80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018a82:	4b03      	ldr	r3, [pc, #12]	; (8018a90 <WIZCHIP_READ_BUF+0xbc>)
 8018a84:	691b      	ldr	r3, [r3, #16]
 8018a86:	4798      	blx	r3
}
 8018a88:	bf00      	nop
 8018a8a:	371c      	adds	r7, #28
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd90      	pop	{r4, r7, pc}
 8018a90:	200000c4 	.word	0x200000c4

08018a94 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b086      	sub	sp, #24
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	60f8      	str	r0, [r7, #12]
 8018a9c:	60b9      	str	r1, [r7, #8]
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8018aa2:	4b2b      	ldr	r3, [pc, #172]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018aa4:	68db      	ldr	r3, [r3, #12]
 8018aa6:	4798      	blx	r3
   WIZCHIP.CS._select();
 8018aa8:	4b29      	ldr	r3, [pc, #164]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018aaa:	695b      	ldr	r3, [r3, #20]
 8018aac:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	f043 0304 	orr.w	r3, r3, #4
 8018ab4:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8018ab6:	4b26      	ldr	r3, [pc, #152]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d126      	bne.n	8018b0c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8018abe:	4b24      	ldr	r3, [pc, #144]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018ac0:	6a1b      	ldr	r3, [r3, #32]
 8018ac2:	68fa      	ldr	r2, [r7, #12]
 8018ac4:	0c12      	lsrs	r2, r2, #16
 8018ac6:	b2d2      	uxtb	r2, r2
 8018ac8:	4610      	mov	r0, r2
 8018aca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8018acc:	4b20      	ldr	r3, [pc, #128]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018ace:	6a1b      	ldr	r3, [r3, #32]
 8018ad0:	68fa      	ldr	r2, [r7, #12]
 8018ad2:	0a12      	lsrs	r2, r2, #8
 8018ad4:	b2d2      	uxtb	r2, r2
 8018ad6:	4610      	mov	r0, r2
 8018ad8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8018ada:	4b1d      	ldr	r3, [pc, #116]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018adc:	6a1b      	ldr	r3, [r3, #32]
 8018ade:	68fa      	ldr	r2, [r7, #12]
 8018ae0:	b2d2      	uxtb	r2, r2
 8018ae2:	4610      	mov	r0, r2
 8018ae4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018ae6:	2300      	movs	r3, #0
 8018ae8:	82fb      	strh	r3, [r7, #22]
 8018aea:	e00a      	b.n	8018b02 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8018aec:	4b18      	ldr	r3, [pc, #96]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018aee:	6a1b      	ldr	r3, [r3, #32]
 8018af0:	8afa      	ldrh	r2, [r7, #22]
 8018af2:	68b9      	ldr	r1, [r7, #8]
 8018af4:	440a      	add	r2, r1
 8018af6:	7812      	ldrb	r2, [r2, #0]
 8018af8:	4610      	mov	r0, r2
 8018afa:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8018afc:	8afb      	ldrh	r3, [r7, #22]
 8018afe:	3301      	adds	r3, #1
 8018b00:	82fb      	strh	r3, [r7, #22]
 8018b02:	8afa      	ldrh	r2, [r7, #22]
 8018b04:	88fb      	ldrh	r3, [r7, #6]
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d3f0      	bcc.n	8018aec <WIZCHIP_WRITE_BUF+0x58>
 8018b0a:	e017      	b.n	8018b3c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8018b0c:	68fb      	ldr	r3, [r7, #12]
 8018b0e:	0c1b      	lsrs	r3, r3, #16
 8018b10:	b2db      	uxtb	r3, r3
 8018b12:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8018b14:	68fb      	ldr	r3, [r7, #12]
 8018b16:	0a1b      	lsrs	r3, r3, #8
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	b2db      	uxtb	r3, r3
 8018b20:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8018b22:	4b0b      	ldr	r3, [pc, #44]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b26:	f107 0210 	add.w	r2, r7, #16
 8018b2a:	2103      	movs	r1, #3
 8018b2c:	4610      	mov	r0, r2
 8018b2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8018b30:	4b07      	ldr	r3, [pc, #28]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018b34:	88fa      	ldrh	r2, [r7, #6]
 8018b36:	4611      	mov	r1, r2
 8018b38:	68b8      	ldr	r0, [r7, #8]
 8018b3a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8018b3c:	4b04      	ldr	r3, [pc, #16]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b3e:	699b      	ldr	r3, [r3, #24]
 8018b40:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8018b42:	4b03      	ldr	r3, [pc, #12]	; (8018b50 <WIZCHIP_WRITE_BUF+0xbc>)
 8018b44:	691b      	ldr	r3, [r3, #16]
 8018b46:	4798      	blx	r3
}
 8018b48:	bf00      	nop
 8018b4a:	3718      	adds	r7, #24
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}
 8018b50:	200000c4 	.word	0x200000c4

08018b54 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8018b54:	b590      	push	{r4, r7, lr}
 8018b56:	b085      	sub	sp, #20
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	4603      	mov	r3, r0
 8018b5c:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018b5e:	2300      	movs	r3, #0
 8018b60:	81fb      	strh	r3, [r7, #14]
 8018b62:	2300      	movs	r3, #0
 8018b64:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018b66:	79fb      	ldrb	r3, [r7, #7]
 8018b68:	009b      	lsls	r3, r3, #2
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	00db      	lsls	r3, r3, #3
 8018b6e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018b72:	4618      	mov	r0, r3
 8018b74:	f7ff fe94 	bl	80188a0 <WIZCHIP_READ>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018b7c:	89bb      	ldrh	r3, [r7, #12]
 8018b7e:	021b      	lsls	r3, r3, #8
 8018b80:	b29c      	uxth	r4, r3
 8018b82:	79fb      	ldrb	r3, [r7, #7]
 8018b84:	009b      	lsls	r3, r3, #2
 8018b86:	3301      	adds	r3, #1
 8018b88:	00db      	lsls	r3, r3, #3
 8018b8a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7ff fe86 	bl	80188a0 <WIZCHIP_READ>
 8018b94:	4603      	mov	r3, r0
 8018b96:	b29b      	uxth	r3, r3
 8018b98:	4423      	add	r3, r4
 8018b9a:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018b9c:	89bb      	ldrh	r3, [r7, #12]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d01a      	beq.n	8018bd8 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8018ba2:	79fb      	ldrb	r3, [r7, #7]
 8018ba4:	009b      	lsls	r3, r3, #2
 8018ba6:	3301      	adds	r3, #1
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8018bae:	4618      	mov	r0, r3
 8018bb0:	f7ff fe76 	bl	80188a0 <WIZCHIP_READ>
 8018bb4:	4603      	mov	r3, r0
 8018bb6:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8018bb8:	89fb      	ldrh	r3, [r7, #14]
 8018bba:	021b      	lsls	r3, r3, #8
 8018bbc:	b29c      	uxth	r4, r3
 8018bbe:	79fb      	ldrb	r3, [r7, #7]
 8018bc0:	009b      	lsls	r3, r3, #2
 8018bc2:	3301      	adds	r3, #1
 8018bc4:	00db      	lsls	r3, r3, #3
 8018bc6:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8018bca:	4618      	mov	r0, r3
 8018bcc:	f7ff fe68 	bl	80188a0 <WIZCHIP_READ>
 8018bd0:	4603      	mov	r3, r0
 8018bd2:	b29b      	uxth	r3, r3
 8018bd4:	4423      	add	r3, r4
 8018bd6:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018bd8:	89fa      	ldrh	r2, [r7, #14]
 8018bda:	89bb      	ldrh	r3, [r7, #12]
 8018bdc:	429a      	cmp	r2, r3
 8018bde:	d1c2      	bne.n	8018b66 <getSn_TX_FSR+0x12>
   return val;
 8018be0:	89fb      	ldrh	r3, [r7, #14]
}
 8018be2:	4618      	mov	r0, r3
 8018be4:	3714      	adds	r7, #20
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd90      	pop	{r4, r7, pc}

08018bea <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8018bea:	b590      	push	{r4, r7, lr}
 8018bec:	b085      	sub	sp, #20
 8018bee:	af00      	add	r7, sp, #0
 8018bf0:	4603      	mov	r3, r0
 8018bf2:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	81fb      	strh	r3, [r7, #14]
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018bfc:	79fb      	ldrb	r3, [r7, #7]
 8018bfe:	009b      	lsls	r3, r3, #2
 8018c00:	3301      	adds	r3, #1
 8018c02:	00db      	lsls	r3, r3, #3
 8018c04:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8018c08:	4618      	mov	r0, r3
 8018c0a:	f7ff fe49 	bl	80188a0 <WIZCHIP_READ>
 8018c0e:	4603      	mov	r3, r0
 8018c10:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018c12:	89bb      	ldrh	r3, [r7, #12]
 8018c14:	021b      	lsls	r3, r3, #8
 8018c16:	b29c      	uxth	r4, r3
 8018c18:	79fb      	ldrb	r3, [r7, #7]
 8018c1a:	009b      	lsls	r3, r3, #2
 8018c1c:	3301      	adds	r3, #1
 8018c1e:	00db      	lsls	r3, r3, #3
 8018c20:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018c24:	4618      	mov	r0, r3
 8018c26:	f7ff fe3b 	bl	80188a0 <WIZCHIP_READ>
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	b29b      	uxth	r3, r3
 8018c2e:	4423      	add	r3, r4
 8018c30:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8018c32:	89bb      	ldrh	r3, [r7, #12]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d01a      	beq.n	8018c6e <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8018c38:	79fb      	ldrb	r3, [r7, #7]
 8018c3a:	009b      	lsls	r3, r3, #2
 8018c3c:	3301      	adds	r3, #1
 8018c3e:	00db      	lsls	r3, r3, #3
 8018c40:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7ff fe2b 	bl	80188a0 <WIZCHIP_READ>
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8018c4e:	89fb      	ldrh	r3, [r7, #14]
 8018c50:	021b      	lsls	r3, r3, #8
 8018c52:	b29c      	uxth	r4, r3
 8018c54:	79fb      	ldrb	r3, [r7, #7]
 8018c56:	009b      	lsls	r3, r3, #2
 8018c58:	3301      	adds	r3, #1
 8018c5a:	00db      	lsls	r3, r3, #3
 8018c5c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8018c60:	4618      	mov	r0, r3
 8018c62:	f7ff fe1d 	bl	80188a0 <WIZCHIP_READ>
 8018c66:	4603      	mov	r3, r0
 8018c68:	b29b      	uxth	r3, r3
 8018c6a:	4423      	add	r3, r4
 8018c6c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8018c6e:	89fa      	ldrh	r2, [r7, #14]
 8018c70:	89bb      	ldrh	r3, [r7, #12]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d1c2      	bne.n	8018bfc <getSn_RX_RSR+0x12>
   return val;
 8018c76:	89fb      	ldrh	r3, [r7, #14]
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	3714      	adds	r7, #20
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd90      	pop	{r4, r7, pc}

08018c80 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018c80:	b590      	push	{r4, r7, lr}
 8018c82:	b085      	sub	sp, #20
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	4603      	mov	r3, r0
 8018c88:	6039      	str	r1, [r7, #0]
 8018c8a:	71fb      	strb	r3, [r7, #7]
 8018c8c:	4613      	mov	r3, r2
 8018c8e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018c90:	2300      	movs	r3, #0
 8018c92:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018c94:	2300      	movs	r3, #0
 8018c96:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8018c98:	88bb      	ldrh	r3, [r7, #4]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d048      	beq.n	8018d30 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8018c9e:	79fb      	ldrb	r3, [r7, #7]
 8018ca0:	009b      	lsls	r3, r3, #2
 8018ca2:	3301      	adds	r3, #1
 8018ca4:	00db      	lsls	r3, r3, #3
 8018ca6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018caa:	4618      	mov	r0, r3
 8018cac:	f7ff fdf8 	bl	80188a0 <WIZCHIP_READ>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	b29b      	uxth	r3, r3
 8018cb4:	021b      	lsls	r3, r3, #8
 8018cb6:	b29c      	uxth	r4, r3
 8018cb8:	79fb      	ldrb	r3, [r7, #7]
 8018cba:	009b      	lsls	r3, r3, #2
 8018cbc:	3301      	adds	r3, #1
 8018cbe:	00db      	lsls	r3, r3, #3
 8018cc0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f7ff fdeb 	bl	80188a0 <WIZCHIP_READ>
 8018cca:	4603      	mov	r3, r0
 8018ccc:	b29b      	uxth	r3, r3
 8018cce:	4423      	add	r3, r4
 8018cd0:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8018cd2:	89fb      	ldrh	r3, [r7, #14]
 8018cd4:	021b      	lsls	r3, r3, #8
 8018cd6:	79fa      	ldrb	r2, [r7, #7]
 8018cd8:	0092      	lsls	r2, r2, #2
 8018cda:	3202      	adds	r2, #2
 8018cdc:	00d2      	lsls	r2, r2, #3
 8018cde:	4413      	add	r3, r2
 8018ce0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8018ce2:	88bb      	ldrh	r3, [r7, #4]
 8018ce4:	461a      	mov	r2, r3
 8018ce6:	6839      	ldr	r1, [r7, #0]
 8018ce8:	68b8      	ldr	r0, [r7, #8]
 8018cea:	f7ff fed3 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8018cee:	89fa      	ldrh	r2, [r7, #14]
 8018cf0:	88bb      	ldrh	r3, [r7, #4]
 8018cf2:	4413      	add	r3, r2
 8018cf4:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8018cf6:	79fb      	ldrb	r3, [r7, #7]
 8018cf8:	009b      	lsls	r3, r3, #2
 8018cfa:	3301      	adds	r3, #1
 8018cfc:	00db      	lsls	r3, r3, #3
 8018cfe:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8018d02:	461a      	mov	r2, r3
 8018d04:	89fb      	ldrh	r3, [r7, #14]
 8018d06:	0a1b      	lsrs	r3, r3, #8
 8018d08:	b29b      	uxth	r3, r3
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	4619      	mov	r1, r3
 8018d0e:	4610      	mov	r0, r2
 8018d10:	f7ff fe12 	bl	8018938 <WIZCHIP_WRITE>
 8018d14:	79fb      	ldrb	r3, [r7, #7]
 8018d16:	009b      	lsls	r3, r3, #2
 8018d18:	3301      	adds	r3, #1
 8018d1a:	00db      	lsls	r3, r3, #3
 8018d1c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8018d20:	461a      	mov	r2, r3
 8018d22:	89fb      	ldrh	r3, [r7, #14]
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	4619      	mov	r1, r3
 8018d28:	4610      	mov	r0, r2
 8018d2a:	f7ff fe05 	bl	8018938 <WIZCHIP_WRITE>
 8018d2e:	e000      	b.n	8018d32 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8018d30:	bf00      	nop
}
 8018d32:	3714      	adds	r7, #20
 8018d34:	46bd      	mov	sp, r7
 8018d36:	bd90      	pop	{r4, r7, pc}

08018d38 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8018d38:	b590      	push	{r4, r7, lr}
 8018d3a:	b085      	sub	sp, #20
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	4603      	mov	r3, r0
 8018d40:	6039      	str	r1, [r7, #0]
 8018d42:	71fb      	strb	r3, [r7, #7]
 8018d44:	4613      	mov	r3, r2
 8018d46:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018d48:	2300      	movs	r3, #0
 8018d4a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8018d50:	88bb      	ldrh	r3, [r7, #4]
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d048      	beq.n	8018de8 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8018d56:	79fb      	ldrb	r3, [r7, #7]
 8018d58:	009b      	lsls	r3, r3, #2
 8018d5a:	3301      	adds	r3, #1
 8018d5c:	00db      	lsls	r3, r3, #3
 8018d5e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018d62:	4618      	mov	r0, r3
 8018d64:	f7ff fd9c 	bl	80188a0 <WIZCHIP_READ>
 8018d68:	4603      	mov	r3, r0
 8018d6a:	b29b      	uxth	r3, r3
 8018d6c:	021b      	lsls	r3, r3, #8
 8018d6e:	b29c      	uxth	r4, r3
 8018d70:	79fb      	ldrb	r3, [r7, #7]
 8018d72:	009b      	lsls	r3, r3, #2
 8018d74:	3301      	adds	r3, #1
 8018d76:	00db      	lsls	r3, r3, #3
 8018d78:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018d7c:	4618      	mov	r0, r3
 8018d7e:	f7ff fd8f 	bl	80188a0 <WIZCHIP_READ>
 8018d82:	4603      	mov	r3, r0
 8018d84:	b29b      	uxth	r3, r3
 8018d86:	4423      	add	r3, r4
 8018d88:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8018d8a:	89fb      	ldrh	r3, [r7, #14]
 8018d8c:	021b      	lsls	r3, r3, #8
 8018d8e:	79fa      	ldrb	r2, [r7, #7]
 8018d90:	0092      	lsls	r2, r2, #2
 8018d92:	3203      	adds	r2, #3
 8018d94:	00d2      	lsls	r2, r2, #3
 8018d96:	4413      	add	r3, r2
 8018d98:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8018d9a:	88bb      	ldrh	r3, [r7, #4]
 8018d9c:	461a      	mov	r2, r3
 8018d9e:	6839      	ldr	r1, [r7, #0]
 8018da0:	68b8      	ldr	r0, [r7, #8]
 8018da2:	f7ff fe17 	bl	80189d4 <WIZCHIP_READ_BUF>
   ptr += len;
 8018da6:	89fa      	ldrh	r2, [r7, #14]
 8018da8:	88bb      	ldrh	r3, [r7, #4]
 8018daa:	4413      	add	r3, r2
 8018dac:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8018dae:	79fb      	ldrb	r3, [r7, #7]
 8018db0:	009b      	lsls	r3, r3, #2
 8018db2:	3301      	adds	r3, #1
 8018db4:	00db      	lsls	r3, r3, #3
 8018db6:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018dba:	461a      	mov	r2, r3
 8018dbc:	89fb      	ldrh	r3, [r7, #14]
 8018dbe:	0a1b      	lsrs	r3, r3, #8
 8018dc0:	b29b      	uxth	r3, r3
 8018dc2:	b2db      	uxtb	r3, r3
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	4610      	mov	r0, r2
 8018dc8:	f7ff fdb6 	bl	8018938 <WIZCHIP_WRITE>
 8018dcc:	79fb      	ldrb	r3, [r7, #7]
 8018dce:	009b      	lsls	r3, r3, #2
 8018dd0:	3301      	adds	r3, #1
 8018dd2:	00db      	lsls	r3, r3, #3
 8018dd4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018dd8:	461a      	mov	r2, r3
 8018dda:	89fb      	ldrh	r3, [r7, #14]
 8018ddc:	b2db      	uxtb	r3, r3
 8018dde:	4619      	mov	r1, r3
 8018de0:	4610      	mov	r0, r2
 8018de2:	f7ff fda9 	bl	8018938 <WIZCHIP_WRITE>
 8018de6:	e000      	b.n	8018dea <wiz_recv_data+0xb2>
   if(len == 0) return;
 8018de8:	bf00      	nop
}
 8018dea:	3714      	adds	r7, #20
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd90      	pop	{r4, r7, pc}

08018df0 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8018df0:	b590      	push	{r4, r7, lr}
 8018df2:	b085      	sub	sp, #20
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	4603      	mov	r3, r0
 8018df8:	460a      	mov	r2, r1
 8018dfa:	71fb      	strb	r3, [r7, #7]
 8018dfc:	4613      	mov	r3, r2
 8018dfe:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8018e00:	2300      	movs	r3, #0
 8018e02:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8018e04:	79fb      	ldrb	r3, [r7, #7]
 8018e06:	009b      	lsls	r3, r3, #2
 8018e08:	3301      	adds	r3, #1
 8018e0a:	00db      	lsls	r3, r3, #3
 8018e0c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018e10:	4618      	mov	r0, r3
 8018e12:	f7ff fd45 	bl	80188a0 <WIZCHIP_READ>
 8018e16:	4603      	mov	r3, r0
 8018e18:	b29b      	uxth	r3, r3
 8018e1a:	021b      	lsls	r3, r3, #8
 8018e1c:	b29c      	uxth	r4, r3
 8018e1e:	79fb      	ldrb	r3, [r7, #7]
 8018e20:	009b      	lsls	r3, r3, #2
 8018e22:	3301      	adds	r3, #1
 8018e24:	00db      	lsls	r3, r3, #3
 8018e26:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018e2a:	4618      	mov	r0, r3
 8018e2c:	f7ff fd38 	bl	80188a0 <WIZCHIP_READ>
 8018e30:	4603      	mov	r3, r0
 8018e32:	b29b      	uxth	r3, r3
 8018e34:	4423      	add	r3, r4
 8018e36:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8018e38:	89fa      	ldrh	r2, [r7, #14]
 8018e3a:	88bb      	ldrh	r3, [r7, #4]
 8018e3c:	4413      	add	r3, r2
 8018e3e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8018e40:	79fb      	ldrb	r3, [r7, #7]
 8018e42:	009b      	lsls	r3, r3, #2
 8018e44:	3301      	adds	r3, #1
 8018e46:	00db      	lsls	r3, r3, #3
 8018e48:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8018e4c:	461a      	mov	r2, r3
 8018e4e:	89fb      	ldrh	r3, [r7, #14]
 8018e50:	0a1b      	lsrs	r3, r3, #8
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	b2db      	uxtb	r3, r3
 8018e56:	4619      	mov	r1, r3
 8018e58:	4610      	mov	r0, r2
 8018e5a:	f7ff fd6d 	bl	8018938 <WIZCHIP_WRITE>
 8018e5e:	79fb      	ldrb	r3, [r7, #7]
 8018e60:	009b      	lsls	r3, r3, #2
 8018e62:	3301      	adds	r3, #1
 8018e64:	00db      	lsls	r3, r3, #3
 8018e66:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8018e6a:	461a      	mov	r2, r3
 8018e6c:	89fb      	ldrh	r3, [r7, #14]
 8018e6e:	b2db      	uxtb	r3, r3
 8018e70:	4619      	mov	r1, r3
 8018e72:	4610      	mov	r0, r2
 8018e74:	f7ff fd60 	bl	8018938 <WIZCHIP_WRITE>
}
 8018e78:	bf00      	nop
 8018e7a:	3714      	adds	r7, #20
 8018e7c:	46bd      	mov	sp, r7
 8018e7e:	bd90      	pop	{r4, r7, pc}

08018e80 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8018e80:	b590      	push	{r4, r7, lr}
 8018e82:	b085      	sub	sp, #20
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	4604      	mov	r4, r0
 8018e88:	4608      	mov	r0, r1
 8018e8a:	4611      	mov	r1, r2
 8018e8c:	461a      	mov	r2, r3
 8018e8e:	4623      	mov	r3, r4
 8018e90:	71fb      	strb	r3, [r7, #7]
 8018e92:	4603      	mov	r3, r0
 8018e94:	71bb      	strb	r3, [r7, #6]
 8018e96:	460b      	mov	r3, r1
 8018e98:	80bb      	strh	r3, [r7, #4]
 8018e9a:	4613      	mov	r3, r2
 8018e9c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8018e9e:	79fb      	ldrb	r3, [r7, #7]
 8018ea0:	2b08      	cmp	r3, #8
 8018ea2:	d902      	bls.n	8018eaa <socket+0x2a>
 8018ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ea8:	e0f0      	b.n	801908c <socket+0x20c>
	switch(protocol)
 8018eaa:	79bb      	ldrb	r3, [r7, #6]
 8018eac:	2b01      	cmp	r3, #1
 8018eae:	d005      	beq.n	8018ebc <socket+0x3c>
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	dd11      	ble.n	8018ed8 <socket+0x58>
 8018eb4:	3b02      	subs	r3, #2
 8018eb6:	2b02      	cmp	r3, #2
 8018eb8:	d80e      	bhi.n	8018ed8 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8018eba:	e011      	b.n	8018ee0 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8018ebc:	f107 030c 	add.w	r3, r7, #12
 8018ec0:	2204      	movs	r2, #4
 8018ec2:	4619      	mov	r1, r3
 8018ec4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8018ec8:	f7ff fd84 	bl	80189d4 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d105      	bne.n	8018ede <socket+0x5e>
 8018ed2:	f06f 0302 	mvn.w	r3, #2
 8018ed6:	e0d9      	b.n	801908c <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8018ed8:	f06f 0304 	mvn.w	r3, #4
 8018edc:	e0d6      	b.n	801908c <socket+0x20c>
	    break;
 8018ede:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8018ee0:	78fb      	ldrb	r3, [r7, #3]
 8018ee2:	f003 0304 	and.w	r3, r3, #4
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d002      	beq.n	8018ef0 <socket+0x70>
 8018eea:	f06f 0305 	mvn.w	r3, #5
 8018eee:	e0cd      	b.n	801908c <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8018ef0:	78fb      	ldrb	r3, [r7, #3]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d028      	beq.n	8018f48 <socket+0xc8>
	{
   	switch(protocol)
 8018ef6:	79bb      	ldrb	r3, [r7, #6]
 8018ef8:	2b01      	cmp	r3, #1
 8018efa:	d002      	beq.n	8018f02 <socket+0x82>
 8018efc:	2b02      	cmp	r3, #2
 8018efe:	d008      	beq.n	8018f12 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8018f00:	e022      	b.n	8018f48 <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8018f02:	78fb      	ldrb	r3, [r7, #3]
 8018f04:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	d11a      	bne.n	8018f42 <socket+0xc2>
 8018f0c:	f06f 0305 	mvn.w	r3, #5
 8018f10:	e0bc      	b.n	801908c <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8018f12:	78fb      	ldrb	r3, [r7, #3]
 8018f14:	f003 0320 	and.w	r3, r3, #32
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d006      	beq.n	8018f2a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8018f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	db02      	blt.n	8018f2a <socket+0xaa>
 8018f24:	f06f 0305 	mvn.w	r3, #5
 8018f28:	e0b0      	b.n	801908c <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8018f2a:	78fb      	ldrb	r3, [r7, #3]
 8018f2c:	f003 0310 	and.w	r3, r3, #16
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d008      	beq.n	8018f46 <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8018f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	db04      	blt.n	8018f46 <socket+0xc6>
 8018f3c:	f06f 0305 	mvn.w	r3, #5
 8018f40:	e0a4      	b.n	801908c <socket+0x20c>
   	      break;
 8018f42:	bf00      	nop
 8018f44:	e000      	b.n	8018f48 <socket+0xc8>
   	      break;
 8018f46:	bf00      	nop
   	}
   }
	close(sn);
 8018f48:	79fb      	ldrb	r3, [r7, #7]
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f000 f8ac 	bl	80190a8 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8018f50:	79fb      	ldrb	r3, [r7, #7]
 8018f52:	009b      	lsls	r3, r3, #2
 8018f54:	3301      	adds	r3, #1
 8018f56:	00db      	lsls	r3, r3, #3
 8018f58:	4618      	mov	r0, r3
 8018f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018f5e:	f023 030f 	bic.w	r3, r3, #15
 8018f62:	b25a      	sxtb	r2, r3
 8018f64:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018f68:	4313      	orrs	r3, r2
 8018f6a:	b25b      	sxtb	r3, r3
 8018f6c:	b2db      	uxtb	r3, r3
 8018f6e:	4619      	mov	r1, r3
 8018f70:	f7ff fce2 	bl	8018938 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8018f74:	88bb      	ldrh	r3, [r7, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d110      	bne.n	8018f9c <socket+0x11c>
	{
	   port = sock_any_port++;
 8018f7a:	4b46      	ldr	r3, [pc, #280]	; (8019094 <socket+0x214>)
 8018f7c:	881b      	ldrh	r3, [r3, #0]
 8018f7e:	1c5a      	adds	r2, r3, #1
 8018f80:	b291      	uxth	r1, r2
 8018f82:	4a44      	ldr	r2, [pc, #272]	; (8019094 <socket+0x214>)
 8018f84:	8011      	strh	r1, [r2, #0]
 8018f86:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8018f88:	4b42      	ldr	r3, [pc, #264]	; (8019094 <socket+0x214>)
 8018f8a:	881b      	ldrh	r3, [r3, #0]
 8018f8c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8018f90:	4293      	cmp	r3, r2
 8018f92:	d103      	bne.n	8018f9c <socket+0x11c>
 8018f94:	4b3f      	ldr	r3, [pc, #252]	; (8019094 <socket+0x214>)
 8018f96:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8018f9a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8018f9c:	79fb      	ldrb	r3, [r7, #7]
 8018f9e:	009b      	lsls	r3, r3, #2
 8018fa0:	3301      	adds	r3, #1
 8018fa2:	00db      	lsls	r3, r3, #3
 8018fa4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018fa8:	461a      	mov	r2, r3
 8018faa:	88bb      	ldrh	r3, [r7, #4]
 8018fac:	0a1b      	lsrs	r3, r3, #8
 8018fae:	b29b      	uxth	r3, r3
 8018fb0:	b2db      	uxtb	r3, r3
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	4610      	mov	r0, r2
 8018fb6:	f7ff fcbf 	bl	8018938 <WIZCHIP_WRITE>
 8018fba:	79fb      	ldrb	r3, [r7, #7]
 8018fbc:	009b      	lsls	r3, r3, #2
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	00db      	lsls	r3, r3, #3
 8018fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8018fc6:	461a      	mov	r2, r3
 8018fc8:	88bb      	ldrh	r3, [r7, #4]
 8018fca:	b2db      	uxtb	r3, r3
 8018fcc:	4619      	mov	r1, r3
 8018fce:	4610      	mov	r0, r2
 8018fd0:	f7ff fcb2 	bl	8018938 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8018fd4:	79fb      	ldrb	r3, [r7, #7]
 8018fd6:	009b      	lsls	r3, r3, #2
 8018fd8:	3301      	adds	r3, #1
 8018fda:	00db      	lsls	r3, r3, #3
 8018fdc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018fe0:	2101      	movs	r1, #1
 8018fe2:	4618      	mov	r0, r3
 8018fe4:	f7ff fca8 	bl	8018938 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8018fe8:	bf00      	nop
 8018fea:	79fb      	ldrb	r3, [r7, #7]
 8018fec:	009b      	lsls	r3, r3, #2
 8018fee:	3301      	adds	r3, #1
 8018ff0:	00db      	lsls	r3, r3, #3
 8018ff2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8018ff6:	4618      	mov	r0, r3
 8018ff8:	f7ff fc52 	bl	80188a0 <WIZCHIP_READ>
 8018ffc:	4603      	mov	r3, r0
 8018ffe:	2b00      	cmp	r3, #0
 8019000:	d1f3      	bne.n	8018fea <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8019002:	79fb      	ldrb	r3, [r7, #7]
 8019004:	2201      	movs	r2, #1
 8019006:	fa02 f303 	lsl.w	r3, r2, r3
 801900a:	b21b      	sxth	r3, r3
 801900c:	43db      	mvns	r3, r3
 801900e:	b21a      	sxth	r2, r3
 8019010:	4b21      	ldr	r3, [pc, #132]	; (8019098 <socket+0x218>)
 8019012:	881b      	ldrh	r3, [r3, #0]
 8019014:	b21b      	sxth	r3, r3
 8019016:	4013      	ands	r3, r2
 8019018:	b21b      	sxth	r3, r3
 801901a:	b29a      	uxth	r2, r3
 801901c:	4b1e      	ldr	r3, [pc, #120]	; (8019098 <socket+0x218>)
 801901e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8019020:	78fb      	ldrb	r3, [r7, #3]
 8019022:	f003 0201 	and.w	r2, r3, #1
 8019026:	79fb      	ldrb	r3, [r7, #7]
 8019028:	fa02 f303 	lsl.w	r3, r2, r3
 801902c:	b21a      	sxth	r2, r3
 801902e:	4b1a      	ldr	r3, [pc, #104]	; (8019098 <socket+0x218>)
 8019030:	881b      	ldrh	r3, [r3, #0]
 8019032:	b21b      	sxth	r3, r3
 8019034:	4313      	orrs	r3, r2
 8019036:	b21b      	sxth	r3, r3
 8019038:	b29a      	uxth	r2, r3
 801903a:	4b17      	ldr	r3, [pc, #92]	; (8019098 <socket+0x218>)
 801903c:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 801903e:	79fb      	ldrb	r3, [r7, #7]
 8019040:	2201      	movs	r2, #1
 8019042:	fa02 f303 	lsl.w	r3, r2, r3
 8019046:	b21b      	sxth	r3, r3
 8019048:	43db      	mvns	r3, r3
 801904a:	b21a      	sxth	r2, r3
 801904c:	4b13      	ldr	r3, [pc, #76]	; (801909c <socket+0x21c>)
 801904e:	881b      	ldrh	r3, [r3, #0]
 8019050:	b21b      	sxth	r3, r3
 8019052:	4013      	ands	r3, r2
 8019054:	b21b      	sxth	r3, r3
 8019056:	b29a      	uxth	r2, r3
 8019058:	4b10      	ldr	r3, [pc, #64]	; (801909c <socket+0x21c>)
 801905a:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 801905c:	79fb      	ldrb	r3, [r7, #7]
 801905e:	4a10      	ldr	r2, [pc, #64]	; (80190a0 <socket+0x220>)
 8019060:	2100      	movs	r1, #0
 8019062:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8019066:	79fb      	ldrb	r3, [r7, #7]
 8019068:	4a0e      	ldr	r2, [pc, #56]	; (80190a4 <socket+0x224>)
 801906a:	2100      	movs	r1, #0
 801906c:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 801906e:	bf00      	nop
 8019070:	79fb      	ldrb	r3, [r7, #7]
 8019072:	009b      	lsls	r3, r3, #2
 8019074:	3301      	adds	r3, #1
 8019076:	00db      	lsls	r3, r3, #3
 8019078:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801907c:	4618      	mov	r0, r3
 801907e:	f7ff fc0f 	bl	80188a0 <WIZCHIP_READ>
 8019082:	4603      	mov	r3, r0
 8019084:	2b00      	cmp	r3, #0
 8019086:	d0f3      	beq.n	8019070 <socket+0x1f0>
   return (int8_t)sn;
 8019088:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 801908c:	4618      	mov	r0, r3
 801908e:	3714      	adds	r7, #20
 8019090:	46bd      	mov	sp, r7
 8019092:	bd90      	pop	{r4, r7, pc}
 8019094:	200000c2 	.word	0x200000c2
 8019098:	20000984 	.word	0x20000984
 801909c:	20000986 	.word	0x20000986
 80190a0:	20000988 	.word	0x20000988
 80190a4:	20000998 	.word	0x20000998

080190a8 <close>:

int8_t close(uint8_t sn)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b082      	sub	sp, #8
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	4603      	mov	r3, r0
 80190b0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80190b2:	79fb      	ldrb	r3, [r7, #7]
 80190b4:	2b08      	cmp	r3, #8
 80190b6:	d902      	bls.n	80190be <close+0x16>
 80190b8:	f04f 33ff 	mov.w	r3, #4294967295
 80190bc:	e055      	b.n	801916a <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80190be:	79fb      	ldrb	r3, [r7, #7]
 80190c0:	009b      	lsls	r3, r3, #2
 80190c2:	3301      	adds	r3, #1
 80190c4:	00db      	lsls	r3, r3, #3
 80190c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80190ca:	2110      	movs	r1, #16
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7ff fc33 	bl	8018938 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80190d2:	bf00      	nop
 80190d4:	79fb      	ldrb	r3, [r7, #7]
 80190d6:	009b      	lsls	r3, r3, #2
 80190d8:	3301      	adds	r3, #1
 80190da:	00db      	lsls	r3, r3, #3
 80190dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80190e0:	4618      	mov	r0, r3
 80190e2:	f7ff fbdd 	bl	80188a0 <WIZCHIP_READ>
 80190e6:	4603      	mov	r3, r0
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d1f3      	bne.n	80190d4 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80190ec:	79fb      	ldrb	r3, [r7, #7]
 80190ee:	009b      	lsls	r3, r3, #2
 80190f0:	3301      	adds	r3, #1
 80190f2:	00db      	lsls	r3, r3, #3
 80190f4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80190f8:	211f      	movs	r1, #31
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7ff fc1c 	bl	8018938 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8019100:	79fb      	ldrb	r3, [r7, #7]
 8019102:	2201      	movs	r2, #1
 8019104:	fa02 f303 	lsl.w	r3, r2, r3
 8019108:	b21b      	sxth	r3, r3
 801910a:	43db      	mvns	r3, r3
 801910c:	b21a      	sxth	r2, r3
 801910e:	4b19      	ldr	r3, [pc, #100]	; (8019174 <close+0xcc>)
 8019110:	881b      	ldrh	r3, [r3, #0]
 8019112:	b21b      	sxth	r3, r3
 8019114:	4013      	ands	r3, r2
 8019116:	b21b      	sxth	r3, r3
 8019118:	b29a      	uxth	r2, r3
 801911a:	4b16      	ldr	r3, [pc, #88]	; (8019174 <close+0xcc>)
 801911c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 801911e:	79fb      	ldrb	r3, [r7, #7]
 8019120:	2201      	movs	r2, #1
 8019122:	fa02 f303 	lsl.w	r3, r2, r3
 8019126:	b21b      	sxth	r3, r3
 8019128:	43db      	mvns	r3, r3
 801912a:	b21a      	sxth	r2, r3
 801912c:	4b12      	ldr	r3, [pc, #72]	; (8019178 <close+0xd0>)
 801912e:	881b      	ldrh	r3, [r3, #0]
 8019130:	b21b      	sxth	r3, r3
 8019132:	4013      	ands	r3, r2
 8019134:	b21b      	sxth	r3, r3
 8019136:	b29a      	uxth	r2, r3
 8019138:	4b0f      	ldr	r3, [pc, #60]	; (8019178 <close+0xd0>)
 801913a:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 801913c:	79fb      	ldrb	r3, [r7, #7]
 801913e:	4a0f      	ldr	r2, [pc, #60]	; (801917c <close+0xd4>)
 8019140:	2100      	movs	r1, #0
 8019142:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8019146:	79fb      	ldrb	r3, [r7, #7]
 8019148:	4a0d      	ldr	r2, [pc, #52]	; (8019180 <close+0xd8>)
 801914a:	2100      	movs	r1, #0
 801914c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 801914e:	bf00      	nop
 8019150:	79fb      	ldrb	r3, [r7, #7]
 8019152:	009b      	lsls	r3, r3, #2
 8019154:	3301      	adds	r3, #1
 8019156:	00db      	lsls	r3, r3, #3
 8019158:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801915c:	4618      	mov	r0, r3
 801915e:	f7ff fb9f 	bl	80188a0 <WIZCHIP_READ>
 8019162:	4603      	mov	r3, r0
 8019164:	2b00      	cmp	r3, #0
 8019166:	d1f3      	bne.n	8019150 <close+0xa8>
	return SOCK_OK;
 8019168:	2301      	movs	r3, #1
}
 801916a:	4618      	mov	r0, r3
 801916c:	3708      	adds	r7, #8
 801916e:	46bd      	mov	sp, r7
 8019170:	bd80      	pop	{r7, pc}
 8019172:	bf00      	nop
 8019174:	20000984 	.word	0x20000984
 8019178:	20000986 	.word	0x20000986
 801917c:	20000988 	.word	0x20000988
 8019180:	20000998 	.word	0x20000998

08019184 <listen>:

int8_t listen(uint8_t sn)
{
 8019184:	b580      	push	{r7, lr}
 8019186:	b082      	sub	sp, #8
 8019188:	af00      	add	r7, sp, #0
 801918a:	4603      	mov	r3, r0
 801918c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 801918e:	79fb      	ldrb	r3, [r7, #7]
 8019190:	2b08      	cmp	r3, #8
 8019192:	d902      	bls.n	801919a <listen+0x16>
 8019194:	f04f 33ff 	mov.w	r3, #4294967295
 8019198:	e049      	b.n	801922e <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 801919a:	79fb      	ldrb	r3, [r7, #7]
 801919c:	009b      	lsls	r3, r3, #2
 801919e:	3301      	adds	r3, #1
 80191a0:	00db      	lsls	r3, r3, #3
 80191a2:	4618      	mov	r0, r3
 80191a4:	f7ff fb7c 	bl	80188a0 <WIZCHIP_READ>
 80191a8:	4603      	mov	r3, r0
 80191aa:	f003 030f 	and.w	r3, r3, #15
 80191ae:	2b01      	cmp	r3, #1
 80191b0:	d002      	beq.n	80191b8 <listen+0x34>
 80191b2:	f06f 0304 	mvn.w	r3, #4
 80191b6:	e03a      	b.n	801922e <listen+0xaa>
	CHECK_SOCKINIT();
 80191b8:	79fb      	ldrb	r3, [r7, #7]
 80191ba:	009b      	lsls	r3, r3, #2
 80191bc:	3301      	adds	r3, #1
 80191be:	00db      	lsls	r3, r3, #3
 80191c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80191c4:	4618      	mov	r0, r3
 80191c6:	f7ff fb6b 	bl	80188a0 <WIZCHIP_READ>
 80191ca:	4603      	mov	r3, r0
 80191cc:	2b13      	cmp	r3, #19
 80191ce:	d002      	beq.n	80191d6 <listen+0x52>
 80191d0:	f06f 0302 	mvn.w	r3, #2
 80191d4:	e02b      	b.n	801922e <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 80191d6:	79fb      	ldrb	r3, [r7, #7]
 80191d8:	009b      	lsls	r3, r3, #2
 80191da:	3301      	adds	r3, #1
 80191dc:	00db      	lsls	r3, r3, #3
 80191de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191e2:	2102      	movs	r1, #2
 80191e4:	4618      	mov	r0, r3
 80191e6:	f7ff fba7 	bl	8018938 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 80191ea:	bf00      	nop
 80191ec:	79fb      	ldrb	r3, [r7, #7]
 80191ee:	009b      	lsls	r3, r3, #2
 80191f0:	3301      	adds	r3, #1
 80191f2:	00db      	lsls	r3, r3, #3
 80191f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80191f8:	4618      	mov	r0, r3
 80191fa:	f7ff fb51 	bl	80188a0 <WIZCHIP_READ>
 80191fe:	4603      	mov	r3, r0
 8019200:	2b00      	cmp	r3, #0
 8019202:	d1f3      	bne.n	80191ec <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8019204:	e006      	b.n	8019214 <listen+0x90>
   {
         close(sn);
 8019206:	79fb      	ldrb	r3, [r7, #7]
 8019208:	4618      	mov	r0, r3
 801920a:	f7ff ff4d 	bl	80190a8 <close>
         return SOCKERR_SOCKCLOSED;
 801920e:	f06f 0303 	mvn.w	r3, #3
 8019212:	e00c      	b.n	801922e <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8019214:	79fb      	ldrb	r3, [r7, #7]
 8019216:	009b      	lsls	r3, r3, #2
 8019218:	3301      	adds	r3, #1
 801921a:	00db      	lsls	r3, r3, #3
 801921c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019220:	4618      	mov	r0, r3
 8019222:	f7ff fb3d 	bl	80188a0 <WIZCHIP_READ>
 8019226:	4603      	mov	r3, r0
 8019228:	2b14      	cmp	r3, #20
 801922a:	d1ec      	bne.n	8019206 <listen+0x82>
   }
   return SOCK_OK;
 801922c:	2301      	movs	r3, #1
}
 801922e:	4618      	mov	r0, r3
 8019230:	3708      	adds	r7, #8
 8019232:	46bd      	mov	sp, r7
 8019234:	bd80      	pop	{r7, pc}
	...

08019238 <connect>:


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8019238:	b580      	push	{r7, lr}
 801923a:	b084      	sub	sp, #16
 801923c:	af00      	add	r7, sp, #0
 801923e:	4603      	mov	r3, r0
 8019240:	6039      	str	r1, [r7, #0]
 8019242:	71fb      	strb	r3, [r7, #7]
 8019244:	4613      	mov	r3, r2
 8019246:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8019248:	79fb      	ldrb	r3, [r7, #7]
 801924a:	2b08      	cmp	r3, #8
 801924c:	d902      	bls.n	8019254 <connect+0x1c>
 801924e:	f04f 33ff 	mov.w	r3, #4294967295
 8019252:	e0c6      	b.n	80193e2 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019254:	79fb      	ldrb	r3, [r7, #7]
 8019256:	009b      	lsls	r3, r3, #2
 8019258:	3301      	adds	r3, #1
 801925a:	00db      	lsls	r3, r3, #3
 801925c:	4618      	mov	r0, r3
 801925e:	f7ff fb1f 	bl	80188a0 <WIZCHIP_READ>
 8019262:	4603      	mov	r3, r0
 8019264:	f003 030f 	and.w	r3, r3, #15
 8019268:	2b01      	cmp	r3, #1
 801926a:	d002      	beq.n	8019272 <connect+0x3a>
 801926c:	f06f 0304 	mvn.w	r3, #4
 8019270:	e0b7      	b.n	80193e2 <connect+0x1aa>
   CHECK_SOCKINIT();
 8019272:	79fb      	ldrb	r3, [r7, #7]
 8019274:	009b      	lsls	r3, r3, #2
 8019276:	3301      	adds	r3, #1
 8019278:	00db      	lsls	r3, r3, #3
 801927a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801927e:	4618      	mov	r0, r3
 8019280:	f7ff fb0e 	bl	80188a0 <WIZCHIP_READ>
 8019284:	4603      	mov	r3, r0
 8019286:	2b13      	cmp	r3, #19
 8019288:	d002      	beq.n	8019290 <connect+0x58>
 801928a:	f06f 0302 	mvn.w	r3, #2
 801928e:	e0a8      	b.n	80193e2 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	781b      	ldrb	r3, [r3, #0]
 8019294:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	021b      	lsls	r3, r3, #8
 801929a:	683a      	ldr	r2, [r7, #0]
 801929c:	3201      	adds	r2, #1
 801929e:	7812      	ldrb	r2, [r2, #0]
 80192a0:	4413      	add	r3, r2
 80192a2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	021b      	lsls	r3, r3, #8
 80192a8:	683a      	ldr	r2, [r7, #0]
 80192aa:	3202      	adds	r2, #2
 80192ac:	7812      	ldrb	r2, [r2, #0]
 80192ae:	4413      	add	r3, r2
 80192b0:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	021b      	lsls	r3, r3, #8
 80192b6:	683a      	ldr	r2, [r7, #0]
 80192b8:	3203      	adds	r2, #3
 80192ba:	7812      	ldrb	r2, [r2, #0]
 80192bc:	4413      	add	r3, r2
 80192be:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80192c6:	d002      	beq.n	80192ce <connect+0x96>
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d102      	bne.n	80192d4 <connect+0x9c>
 80192ce:	f06f 030b 	mvn.w	r3, #11
 80192d2:	e086      	b.n	80193e2 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 80192d4:	88bb      	ldrh	r3, [r7, #4]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d102      	bne.n	80192e0 <connect+0xa8>
 80192da:	f06f 030a 	mvn.w	r3, #10
 80192de:	e080      	b.n	80193e2 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 80192e0:	79fb      	ldrb	r3, [r7, #7]
 80192e2:	009b      	lsls	r3, r3, #2
 80192e4:	3301      	adds	r3, #1
 80192e6:	00db      	lsls	r3, r3, #3
 80192e8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80192ec:	2204      	movs	r2, #4
 80192ee:	6839      	ldr	r1, [r7, #0]
 80192f0:	4618      	mov	r0, r3
 80192f2:	f7ff fbcf 	bl	8018a94 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 80192f6:	79fb      	ldrb	r3, [r7, #7]
 80192f8:	009b      	lsls	r3, r3, #2
 80192fa:	3301      	adds	r3, #1
 80192fc:	00db      	lsls	r3, r3, #3
 80192fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019302:	461a      	mov	r2, r3
 8019304:	88bb      	ldrh	r3, [r7, #4]
 8019306:	0a1b      	lsrs	r3, r3, #8
 8019308:	b29b      	uxth	r3, r3
 801930a:	b2db      	uxtb	r3, r3
 801930c:	4619      	mov	r1, r3
 801930e:	4610      	mov	r0, r2
 8019310:	f7ff fb12 	bl	8018938 <WIZCHIP_WRITE>
 8019314:	79fb      	ldrb	r3, [r7, #7]
 8019316:	009b      	lsls	r3, r3, #2
 8019318:	3301      	adds	r3, #1
 801931a:	00db      	lsls	r3, r3, #3
 801931c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8019320:	461a      	mov	r2, r3
 8019322:	88bb      	ldrh	r3, [r7, #4]
 8019324:	b2db      	uxtb	r3, r3
 8019326:	4619      	mov	r1, r3
 8019328:	4610      	mov	r0, r2
 801932a:	f7ff fb05 	bl	8018938 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 801932e:	79fb      	ldrb	r3, [r7, #7]
 8019330:	009b      	lsls	r3, r3, #2
 8019332:	3301      	adds	r3, #1
 8019334:	00db      	lsls	r3, r3, #3
 8019336:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801933a:	2104      	movs	r1, #4
 801933c:	4618      	mov	r0, r3
 801933e:	f7ff fafb 	bl	8018938 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8019342:	bf00      	nop
 8019344:	79fb      	ldrb	r3, [r7, #7]
 8019346:	009b      	lsls	r3, r3, #2
 8019348:	3301      	adds	r3, #1
 801934a:	00db      	lsls	r3, r3, #3
 801934c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019350:	4618      	mov	r0, r3
 8019352:	f7ff faa5 	bl	80188a0 <WIZCHIP_READ>
 8019356:	4603      	mov	r3, r0
 8019358:	2b00      	cmp	r3, #0
 801935a:	d1f3      	bne.n	8019344 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 801935c:	4b23      	ldr	r3, [pc, #140]	; (80193ec <connect+0x1b4>)
 801935e:	881b      	ldrh	r3, [r3, #0]
 8019360:	461a      	mov	r2, r3
 8019362:	79fb      	ldrb	r3, [r7, #7]
 8019364:	fa42 f303 	asr.w	r3, r2, r3
 8019368:	f003 0301 	and.w	r3, r3, #1
 801936c:	2b00      	cmp	r3, #0
 801936e:	d02b      	beq.n	80193c8 <connect+0x190>
 8019370:	2300      	movs	r3, #0
 8019372:	e036      	b.n	80193e2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8019374:	79fb      	ldrb	r3, [r7, #7]
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	3301      	adds	r3, #1
 801937a:	00db      	lsls	r3, r3, #3
 801937c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019380:	4618      	mov	r0, r3
 8019382:	f7ff fa8d 	bl	80188a0 <WIZCHIP_READ>
 8019386:	4603      	mov	r3, r0
 8019388:	f003 0308 	and.w	r3, r3, #8
 801938c:	2b00      	cmp	r3, #0
 801938e:	d00c      	beq.n	80193aa <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8019390:	79fb      	ldrb	r3, [r7, #7]
 8019392:	009b      	lsls	r3, r3, #2
 8019394:	3301      	adds	r3, #1
 8019396:	00db      	lsls	r3, r3, #3
 8019398:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801939c:	2108      	movs	r1, #8
 801939e:	4618      	mov	r0, r3
 80193a0:	f7ff faca 	bl	8018938 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80193a4:	f06f 030c 	mvn.w	r3, #12
 80193a8:	e01b      	b.n	80193e2 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80193aa:	79fb      	ldrb	r3, [r7, #7]
 80193ac:	009b      	lsls	r3, r3, #2
 80193ae:	3301      	adds	r3, #1
 80193b0:	00db      	lsls	r3, r3, #3
 80193b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7ff fa72 	bl	80188a0 <WIZCHIP_READ>
 80193bc:	4603      	mov	r3, r0
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d102      	bne.n	80193c8 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 80193c2:	f06f 0303 	mvn.w	r3, #3
 80193c6:	e00c      	b.n	80193e2 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80193c8:	79fb      	ldrb	r3, [r7, #7]
 80193ca:	009b      	lsls	r3, r3, #2
 80193cc:	3301      	adds	r3, #1
 80193ce:	00db      	lsls	r3, r3, #3
 80193d0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80193d4:	4618      	mov	r0, r3
 80193d6:	f7ff fa63 	bl	80188a0 <WIZCHIP_READ>
 80193da:	4603      	mov	r3, r0
 80193dc:	2b17      	cmp	r3, #23
 80193de:	d1c9      	bne.n	8019374 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 80193e0:	2301      	movs	r3, #1
}
 80193e2:	4618      	mov	r0, r3
 80193e4:	3710      	adds	r7, #16
 80193e6:	46bd      	mov	sp, r7
 80193e8:	bd80      	pop	{r7, pc}
 80193ea:	bf00      	nop
 80193ec:	20000984 	.word	0x20000984

080193f0 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 80193f0:	b580      	push	{r7, lr}
 80193f2:	b082      	sub	sp, #8
 80193f4:	af00      	add	r7, sp, #0
 80193f6:	4603      	mov	r3, r0
 80193f8:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80193fa:	79fb      	ldrb	r3, [r7, #7]
 80193fc:	2b08      	cmp	r3, #8
 80193fe:	d902      	bls.n	8019406 <disconnect+0x16>
 8019400:	f04f 33ff 	mov.w	r3, #4294967295
 8019404:	e062      	b.n	80194cc <disconnect+0xdc>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019406:	79fb      	ldrb	r3, [r7, #7]
 8019408:	009b      	lsls	r3, r3, #2
 801940a:	3301      	adds	r3, #1
 801940c:	00db      	lsls	r3, r3, #3
 801940e:	4618      	mov	r0, r3
 8019410:	f7ff fa46 	bl	80188a0 <WIZCHIP_READ>
 8019414:	4603      	mov	r3, r0
 8019416:	f003 030f 	and.w	r3, r3, #15
 801941a:	2b01      	cmp	r3, #1
 801941c:	d002      	beq.n	8019424 <disconnect+0x34>
 801941e:	f06f 0304 	mvn.w	r3, #4
 8019422:	e053      	b.n	80194cc <disconnect+0xdc>
	setSn_CR(sn,Sn_CR_DISCON);
 8019424:	79fb      	ldrb	r3, [r7, #7]
 8019426:	009b      	lsls	r3, r3, #2
 8019428:	3301      	adds	r3, #1
 801942a:	00db      	lsls	r3, r3, #3
 801942c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019430:	2108      	movs	r1, #8
 8019432:	4618      	mov	r0, r3
 8019434:	f7ff fa80 	bl	8018938 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019438:	bf00      	nop
 801943a:	79fb      	ldrb	r3, [r7, #7]
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	3301      	adds	r3, #1
 8019440:	00db      	lsls	r3, r3, #3
 8019442:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019446:	4618      	mov	r0, r3
 8019448:	f7ff fa2a 	bl	80188a0 <WIZCHIP_READ>
 801944c:	4603      	mov	r3, r0
 801944e:	2b00      	cmp	r3, #0
 8019450:	d1f3      	bne.n	801943a <disconnect+0x4a>
	sock_is_sending &= ~(1<<sn);
 8019452:	79fb      	ldrb	r3, [r7, #7]
 8019454:	2201      	movs	r2, #1
 8019456:	fa02 f303 	lsl.w	r3, r2, r3
 801945a:	b21b      	sxth	r3, r3
 801945c:	43db      	mvns	r3, r3
 801945e:	b21a      	sxth	r2, r3
 8019460:	4b1c      	ldr	r3, [pc, #112]	; (80194d4 <disconnect+0xe4>)
 8019462:	881b      	ldrh	r3, [r3, #0]
 8019464:	b21b      	sxth	r3, r3
 8019466:	4013      	ands	r3, r2
 8019468:	b21b      	sxth	r3, r3
 801946a:	b29a      	uxth	r2, r3
 801946c:	4b19      	ldr	r3, [pc, #100]	; (80194d4 <disconnect+0xe4>)
 801946e:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8019470:	4b19      	ldr	r3, [pc, #100]	; (80194d8 <disconnect+0xe8>)
 8019472:	881b      	ldrh	r3, [r3, #0]
 8019474:	461a      	mov	r2, r3
 8019476:	79fb      	ldrb	r3, [r7, #7]
 8019478:	fa42 f303 	asr.w	r3, r2, r3
 801947c:	f003 0301 	and.w	r3, r3, #1
 8019480:	2b00      	cmp	r3, #0
 8019482:	d016      	beq.n	80194b2 <disconnect+0xc2>
 8019484:	2300      	movs	r3, #0
 8019486:	e021      	b.n	80194cc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{	//TODO add task yeld
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8019488:	79fb      	ldrb	r3, [r7, #7]
 801948a:	009b      	lsls	r3, r3, #2
 801948c:	3301      	adds	r3, #1
 801948e:	00db      	lsls	r3, r3, #3
 8019490:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019494:	4618      	mov	r0, r3
 8019496:	f7ff fa03 	bl	80188a0 <WIZCHIP_READ>
 801949a:	4603      	mov	r3, r0
 801949c:	f003 0308 	and.w	r3, r3, #8
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d006      	beq.n	80194b2 <disconnect+0xc2>
	   {
	      close(sn);
 80194a4:	79fb      	ldrb	r3, [r7, #7]
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7ff fdfe 	bl	80190a8 <close>
	      return SOCKERR_TIMEOUT;
 80194ac:	f06f 030c 	mvn.w	r3, #12
 80194b0:	e00c      	b.n	80194cc <disconnect+0xdc>
	while(getSn_SR(sn) != SOCK_CLOSED)
 80194b2:	79fb      	ldrb	r3, [r7, #7]
 80194b4:	009b      	lsls	r3, r3, #2
 80194b6:	3301      	adds	r3, #1
 80194b8:	00db      	lsls	r3, r3, #3
 80194ba:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80194be:	4618      	mov	r0, r3
 80194c0:	f7ff f9ee 	bl	80188a0 <WIZCHIP_READ>
 80194c4:	4603      	mov	r3, r0
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d1de      	bne.n	8019488 <disconnect+0x98>
	   }
	}
	return SOCK_OK;
 80194ca:	2301      	movs	r3, #1
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	3708      	adds	r7, #8
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}
 80194d4:	20000986 	.word	0x20000986
 80194d8:	20000984 	.word	0x20000984

080194dc <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80194dc:	b580      	push	{r7, lr}
 80194de:	b084      	sub	sp, #16
 80194e0:	af00      	add	r7, sp, #0
 80194e2:	4603      	mov	r3, r0
 80194e4:	6039      	str	r1, [r7, #0]
 80194e6:	71fb      	strb	r3, [r7, #7]
 80194e8:	4613      	mov	r3, r2
 80194ea:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80194ec:	2300      	movs	r3, #0
 80194ee:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80194f0:	2300      	movs	r3, #0
 80194f2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 80194f4:	79fb      	ldrb	r3, [r7, #7]
 80194f6:	2b08      	cmp	r3, #8
 80194f8:	d902      	bls.n	8019500 <send+0x24>
 80194fa:	f04f 33ff 	mov.w	r3, #4294967295
 80194fe:	e0de      	b.n	80196be <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8019500:	79fb      	ldrb	r3, [r7, #7]
 8019502:	009b      	lsls	r3, r3, #2
 8019504:	3301      	adds	r3, #1
 8019506:	00db      	lsls	r3, r3, #3
 8019508:	4618      	mov	r0, r3
 801950a:	f7ff f9c9 	bl	80188a0 <WIZCHIP_READ>
 801950e:	4603      	mov	r3, r0
 8019510:	f003 030f 	and.w	r3, r3, #15
 8019514:	2b01      	cmp	r3, #1
 8019516:	d002      	beq.n	801951e <send+0x42>
 8019518:	f06f 0304 	mvn.w	r3, #4
 801951c:	e0cf      	b.n	80196be <send+0x1e2>
   CHECK_SOCKDATA();
 801951e:	88bb      	ldrh	r3, [r7, #4]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d102      	bne.n	801952a <send+0x4e>
 8019524:	f06f 030d 	mvn.w	r3, #13
 8019528:	e0c9      	b.n	80196be <send+0x1e2>
   tmp = getSn_SR(sn);
 801952a:	79fb      	ldrb	r3, [r7, #7]
 801952c:	009b      	lsls	r3, r3, #2
 801952e:	3301      	adds	r3, #1
 8019530:	00db      	lsls	r3, r3, #3
 8019532:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019536:	4618      	mov	r0, r3
 8019538:	f7ff f9b2 	bl	80188a0 <WIZCHIP_READ>
 801953c:	4603      	mov	r3, r0
 801953e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8019540:	7bfb      	ldrb	r3, [r7, #15]
 8019542:	2b17      	cmp	r3, #23
 8019544:	d005      	beq.n	8019552 <send+0x76>
 8019546:	7bfb      	ldrb	r3, [r7, #15]
 8019548:	2b1c      	cmp	r3, #28
 801954a:	d002      	beq.n	8019552 <send+0x76>
 801954c:	f06f 0306 	mvn.w	r3, #6
 8019550:	e0b5      	b.n	80196be <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8019552:	4b5d      	ldr	r3, [pc, #372]	; (80196c8 <send+0x1ec>)
 8019554:	881b      	ldrh	r3, [r3, #0]
 8019556:	461a      	mov	r2, r3
 8019558:	79fb      	ldrb	r3, [r7, #7]
 801955a:	fa42 f303 	asr.w	r3, r2, r3
 801955e:	f003 0301 	and.w	r3, r3, #1
 8019562:	2b00      	cmp	r3, #0
 8019564:	d039      	beq.n	80195da <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8019566:	79fb      	ldrb	r3, [r7, #7]
 8019568:	009b      	lsls	r3, r3, #2
 801956a:	3301      	adds	r3, #1
 801956c:	00db      	lsls	r3, r3, #3
 801956e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019572:	4618      	mov	r0, r3
 8019574:	f7ff f994 	bl	80188a0 <WIZCHIP_READ>
 8019578:	4603      	mov	r3, r0
 801957a:	f003 031f 	and.w	r3, r3, #31
 801957e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8019580:	7bfb      	ldrb	r3, [r7, #15]
 8019582:	f003 0310 	and.w	r3, r3, #16
 8019586:	2b00      	cmp	r3, #0
 8019588:	d019      	beq.n	80195be <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 801958a:	79fb      	ldrb	r3, [r7, #7]
 801958c:	009b      	lsls	r3, r3, #2
 801958e:	3301      	adds	r3, #1
 8019590:	00db      	lsls	r3, r3, #3
 8019592:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019596:	2110      	movs	r1, #16
 8019598:	4618      	mov	r0, r3
 801959a:	f7ff f9cd 	bl	8018938 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 801959e:	79fb      	ldrb	r3, [r7, #7]
 80195a0:	2201      	movs	r2, #1
 80195a2:	fa02 f303 	lsl.w	r3, r2, r3
 80195a6:	b21b      	sxth	r3, r3
 80195a8:	43db      	mvns	r3, r3
 80195aa:	b21a      	sxth	r2, r3
 80195ac:	4b46      	ldr	r3, [pc, #280]	; (80196c8 <send+0x1ec>)
 80195ae:	881b      	ldrh	r3, [r3, #0]
 80195b0:	b21b      	sxth	r3, r3
 80195b2:	4013      	ands	r3, r2
 80195b4:	b21b      	sxth	r3, r3
 80195b6:	b29a      	uxth	r2, r3
 80195b8:	4b43      	ldr	r3, [pc, #268]	; (80196c8 <send+0x1ec>)
 80195ba:	801a      	strh	r2, [r3, #0]
 80195bc:	e00d      	b.n	80195da <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80195be:	7bfb      	ldrb	r3, [r7, #15]
 80195c0:	f003 0308 	and.w	r3, r3, #8
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d006      	beq.n	80195d6 <send+0xfa>
      {
         close(sn);
 80195c8:	79fb      	ldrb	r3, [r7, #7]
 80195ca:	4618      	mov	r0, r3
 80195cc:	f7ff fd6c 	bl	80190a8 <close>
         return SOCKERR_TIMEOUT;
 80195d0:	f06f 030c 	mvn.w	r3, #12
 80195d4:	e073      	b.n	80196be <send+0x1e2>
      }
      else return SOCK_BUSY;
 80195d6:	2300      	movs	r3, #0
 80195d8:	e071      	b.n	80196be <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 80195da:	79fb      	ldrb	r3, [r7, #7]
 80195dc:	009b      	lsls	r3, r3, #2
 80195de:	3301      	adds	r3, #1
 80195e0:	00db      	lsls	r3, r3, #3
 80195e2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80195e6:	4618      	mov	r0, r3
 80195e8:	f7ff f95a 	bl	80188a0 <WIZCHIP_READ>
 80195ec:	4603      	mov	r3, r0
 80195ee:	b29b      	uxth	r3, r3
 80195f0:	029b      	lsls	r3, r3, #10
 80195f2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80195f4:	88ba      	ldrh	r2, [r7, #4]
 80195f6:	89bb      	ldrh	r3, [r7, #12]
 80195f8:	429a      	cmp	r2, r3
 80195fa:	d901      	bls.n	8019600 <send+0x124>
 80195fc:	89bb      	ldrh	r3, [r7, #12]
 80195fe:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8019600:	79fb      	ldrb	r3, [r7, #7]
 8019602:	4618      	mov	r0, r3
 8019604:	f7ff faa6 	bl	8018b54 <getSn_TX_FSR>
 8019608:	4603      	mov	r3, r0
 801960a:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 801960c:	79fb      	ldrb	r3, [r7, #7]
 801960e:	009b      	lsls	r3, r3, #2
 8019610:	3301      	adds	r3, #1
 8019612:	00db      	lsls	r3, r3, #3
 8019614:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019618:	4618      	mov	r0, r3
 801961a:	f7ff f941 	bl	80188a0 <WIZCHIP_READ>
 801961e:	4603      	mov	r3, r0
 8019620:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8019622:	7bfb      	ldrb	r3, [r7, #15]
 8019624:	2b17      	cmp	r3, #23
 8019626:	d009      	beq.n	801963c <send+0x160>
 8019628:	7bfb      	ldrb	r3, [r7, #15]
 801962a:	2b1c      	cmp	r3, #28
 801962c:	d006      	beq.n	801963c <send+0x160>
      {
         close(sn);
 801962e:	79fb      	ldrb	r3, [r7, #7]
 8019630:	4618      	mov	r0, r3
 8019632:	f7ff fd39 	bl	80190a8 <close>
         return SOCKERR_SOCKSTATUS;
 8019636:	f06f 0306 	mvn.w	r3, #6
 801963a:	e040      	b.n	80196be <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 801963c:	4b23      	ldr	r3, [pc, #140]	; (80196cc <send+0x1f0>)
 801963e:	881b      	ldrh	r3, [r3, #0]
 8019640:	461a      	mov	r2, r3
 8019642:	79fb      	ldrb	r3, [r7, #7]
 8019644:	fa42 f303 	asr.w	r3, r2, r3
 8019648:	f003 0301 	and.w	r3, r3, #1
 801964c:	2b00      	cmp	r3, #0
 801964e:	d005      	beq.n	801965c <send+0x180>
 8019650:	88ba      	ldrh	r2, [r7, #4]
 8019652:	89bb      	ldrh	r3, [r7, #12]
 8019654:	429a      	cmp	r2, r3
 8019656:	d901      	bls.n	801965c <send+0x180>
 8019658:	2300      	movs	r3, #0
 801965a:	e030      	b.n	80196be <send+0x1e2>
      if(len <= freesize) break;
 801965c:	88ba      	ldrh	r2, [r7, #4]
 801965e:	89bb      	ldrh	r3, [r7, #12]
 8019660:	429a      	cmp	r2, r3
 8019662:	d900      	bls.n	8019666 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8019664:	e7cc      	b.n	8019600 <send+0x124>
      if(len <= freesize) break;
 8019666:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8019668:	88ba      	ldrh	r2, [r7, #4]
 801966a:	79fb      	ldrb	r3, [r7, #7]
 801966c:	6839      	ldr	r1, [r7, #0]
 801966e:	4618      	mov	r0, r3
 8019670:	f7ff fb06 	bl	8018c80 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8019674:	79fb      	ldrb	r3, [r7, #7]
 8019676:	009b      	lsls	r3, r3, #2
 8019678:	3301      	adds	r3, #1
 801967a:	00db      	lsls	r3, r3, #3
 801967c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019680:	2120      	movs	r1, #32
 8019682:	4618      	mov	r0, r3
 8019684:	f7ff f958 	bl	8018938 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8019688:	bf00      	nop
 801968a:	79fb      	ldrb	r3, [r7, #7]
 801968c:	009b      	lsls	r3, r3, #2
 801968e:	3301      	adds	r3, #1
 8019690:	00db      	lsls	r3, r3, #3
 8019692:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019696:	4618      	mov	r0, r3
 8019698:	f7ff f902 	bl	80188a0 <WIZCHIP_READ>
 801969c:	4603      	mov	r3, r0
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d1f3      	bne.n	801968a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 80196a2:	79fb      	ldrb	r3, [r7, #7]
 80196a4:	2201      	movs	r2, #1
 80196a6:	fa02 f303 	lsl.w	r3, r2, r3
 80196aa:	b21a      	sxth	r2, r3
 80196ac:	4b06      	ldr	r3, [pc, #24]	; (80196c8 <send+0x1ec>)
 80196ae:	881b      	ldrh	r3, [r3, #0]
 80196b0:	b21b      	sxth	r3, r3
 80196b2:	4313      	orrs	r3, r2
 80196b4:	b21b      	sxth	r3, r3
 80196b6:	b29a      	uxth	r2, r3
 80196b8:	4b03      	ldr	r3, [pc, #12]	; (80196c8 <send+0x1ec>)
 80196ba:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80196bc:	88bb      	ldrh	r3, [r7, #4]
}
 80196be:	4618      	mov	r0, r3
 80196c0:	3710      	adds	r7, #16
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	20000986 	.word	0x20000986
 80196cc:	20000984 	.word	0x20000984

080196d0 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80196d0:	b590      	push	{r4, r7, lr}
 80196d2:	b085      	sub	sp, #20
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	4603      	mov	r3, r0
 80196d8:	6039      	str	r1, [r7, #0]
 80196da:	71fb      	strb	r3, [r7, #7]
 80196dc:	4613      	mov	r3, r2
 80196de:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 80196e0:	2300      	movs	r3, #0
 80196e2:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 80196e4:	2300      	movs	r3, #0
 80196e6:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 80196e8:	79fb      	ldrb	r3, [r7, #7]
 80196ea:	2b08      	cmp	r3, #8
 80196ec:	d902      	bls.n	80196f4 <recv+0x24>
 80196ee:	f04f 33ff 	mov.w	r3, #4294967295
 80196f2:	e09c      	b.n	801982e <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80196f4:	79fb      	ldrb	r3, [r7, #7]
 80196f6:	009b      	lsls	r3, r3, #2
 80196f8:	3301      	adds	r3, #1
 80196fa:	00db      	lsls	r3, r3, #3
 80196fc:	4618      	mov	r0, r3
 80196fe:	f7ff f8cf 	bl	80188a0 <WIZCHIP_READ>
 8019702:	4603      	mov	r3, r0
 8019704:	f003 030f 	and.w	r3, r3, #15
 8019708:	2b01      	cmp	r3, #1
 801970a:	d002      	beq.n	8019712 <recv+0x42>
 801970c:	f06f 0304 	mvn.w	r3, #4
 8019710:	e08d      	b.n	801982e <recv+0x15e>
   CHECK_SOCKDATA();
 8019712:	88bb      	ldrh	r3, [r7, #4]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d102      	bne.n	801971e <recv+0x4e>
 8019718:	f06f 030d 	mvn.w	r3, #13
 801971c:	e087      	b.n	801982e <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 801971e:	79fb      	ldrb	r3, [r7, #7]
 8019720:	009b      	lsls	r3, r3, #2
 8019722:	3301      	adds	r3, #1
 8019724:	00db      	lsls	r3, r3, #3
 8019726:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801972a:	4618      	mov	r0, r3
 801972c:	f7ff f8b8 	bl	80188a0 <WIZCHIP_READ>
 8019730:	4603      	mov	r3, r0
 8019732:	b29b      	uxth	r3, r3
 8019734:	029b      	lsls	r3, r3, #10
 8019736:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8019738:	89ba      	ldrh	r2, [r7, #12]
 801973a:	88bb      	ldrh	r3, [r7, #4]
 801973c:	429a      	cmp	r2, r3
 801973e:	d201      	bcs.n	8019744 <recv+0x74>
 8019740:	89bb      	ldrh	r3, [r7, #12]
 8019742:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 8019744:	79fb      	ldrb	r3, [r7, #7]
 8019746:	4618      	mov	r0, r3
 8019748:	f7ff fa4f 	bl	8018bea <getSn_RX_RSR>
 801974c:	4603      	mov	r3, r0
 801974e:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8019750:	79fb      	ldrb	r3, [r7, #7]
 8019752:	009b      	lsls	r3, r3, #2
 8019754:	3301      	adds	r3, #1
 8019756:	00db      	lsls	r3, r3, #3
 8019758:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801975c:	4618      	mov	r0, r3
 801975e:	f7ff f89f 	bl	80188a0 <WIZCHIP_READ>
 8019762:	4603      	mov	r3, r0
 8019764:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8019766:	7bfb      	ldrb	r3, [r7, #15]
 8019768:	2b17      	cmp	r3, #23
 801976a:	d026      	beq.n	80197ba <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 801976c:	7bfb      	ldrb	r3, [r7, #15]
 801976e:	2b1c      	cmp	r3, #28
 8019770:	d11c      	bne.n	80197ac <recv+0xdc>
            {
               if(recvsize != 0) break;
 8019772:	89bb      	ldrh	r3, [r7, #12]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d133      	bne.n	80197e0 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8019778:	79fb      	ldrb	r3, [r7, #7]
 801977a:	4618      	mov	r0, r3
 801977c:	f7ff f9ea 	bl	8018b54 <getSn_TX_FSR>
 8019780:	4603      	mov	r3, r0
 8019782:	461c      	mov	r4, r3
 8019784:	79fb      	ldrb	r3, [r7, #7]
 8019786:	009b      	lsls	r3, r3, #2
 8019788:	3301      	adds	r3, #1
 801978a:	00db      	lsls	r3, r3, #3
 801978c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019790:	4618      	mov	r0, r3
 8019792:	f7ff f885 	bl	80188a0 <WIZCHIP_READ>
 8019796:	4603      	mov	r3, r0
 8019798:	029b      	lsls	r3, r3, #10
 801979a:	429c      	cmp	r4, r3
 801979c:	d10d      	bne.n	80197ba <recv+0xea>
               {
                  close(sn);
 801979e:	79fb      	ldrb	r3, [r7, #7]
 80197a0:	4618      	mov	r0, r3
 80197a2:	f7ff fc81 	bl	80190a8 <close>
                  return SOCKERR_SOCKSTATUS;
 80197a6:	f06f 0306 	mvn.w	r3, #6
 80197aa:	e040      	b.n	801982e <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 80197ac:	79fb      	ldrb	r3, [r7, #7]
 80197ae:	4618      	mov	r0, r3
 80197b0:	f7ff fc7a 	bl	80190a8 <close>
               return SOCKERR_SOCKSTATUS;
 80197b4:	f06f 0306 	mvn.w	r3, #6
 80197b8:	e039      	b.n	801982e <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 80197ba:	4b1f      	ldr	r3, [pc, #124]	; (8019838 <recv+0x168>)
 80197bc:	881b      	ldrh	r3, [r3, #0]
 80197be:	461a      	mov	r2, r3
 80197c0:	79fb      	ldrb	r3, [r7, #7]
 80197c2:	fa42 f303 	asr.w	r3, r2, r3
 80197c6:	f003 0301 	and.w	r3, r3, #1
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d004      	beq.n	80197d8 <recv+0x108>
 80197ce:	89bb      	ldrh	r3, [r7, #12]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d101      	bne.n	80197d8 <recv+0x108>
 80197d4:	2300      	movs	r3, #0
 80197d6:	e02a      	b.n	801982e <recv+0x15e>
         if(recvsize != 0) break;
 80197d8:	89bb      	ldrh	r3, [r7, #12]
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d102      	bne.n	80197e4 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 80197de:	e7b1      	b.n	8019744 <recv+0x74>
               if(recvsize != 0) break;
 80197e0:	bf00      	nop
 80197e2:	e000      	b.n	80197e6 <recv+0x116>
         if(recvsize != 0) break;
 80197e4:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 80197e6:	89ba      	ldrh	r2, [r7, #12]
 80197e8:	88bb      	ldrh	r3, [r7, #4]
 80197ea:	429a      	cmp	r2, r3
 80197ec:	d201      	bcs.n	80197f2 <recv+0x122>
 80197ee:	89bb      	ldrh	r3, [r7, #12]
 80197f0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80197f2:	88ba      	ldrh	r2, [r7, #4]
 80197f4:	79fb      	ldrb	r3, [r7, #7]
 80197f6:	6839      	ldr	r1, [r7, #0]
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7ff fa9d 	bl	8018d38 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80197fe:	79fb      	ldrb	r3, [r7, #7]
 8019800:	009b      	lsls	r3, r3, #2
 8019802:	3301      	adds	r3, #1
 8019804:	00db      	lsls	r3, r3, #3
 8019806:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801980a:	2140      	movs	r1, #64	; 0x40
 801980c:	4618      	mov	r0, r3
 801980e:	f7ff f893 	bl	8018938 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8019812:	bf00      	nop
 8019814:	79fb      	ldrb	r3, [r7, #7]
 8019816:	009b      	lsls	r3, r3, #2
 8019818:	3301      	adds	r3, #1
 801981a:	00db      	lsls	r3, r3, #3
 801981c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019820:	4618      	mov	r0, r3
 8019822:	f7ff f83d 	bl	80188a0 <WIZCHIP_READ>
 8019826:	4603      	mov	r3, r0
 8019828:	2b00      	cmp	r3, #0
 801982a:	d1f3      	bne.n	8019814 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 801982c:	88bb      	ldrh	r3, [r7, #4]
}
 801982e:	4618      	mov	r0, r3
 8019830:	3714      	adds	r7, #20
 8019832:	46bd      	mov	sp, r7
 8019834:	bd90      	pop	{r4, r7, pc}
 8019836:	bf00      	nop
 8019838:	20000984 	.word	0x20000984

0801983c <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b086      	sub	sp, #24
 8019840:	af00      	add	r7, sp, #0
 8019842:	60b9      	str	r1, [r7, #8]
 8019844:	607b      	str	r3, [r7, #4]
 8019846:	4603      	mov	r3, r0
 8019848:	73fb      	strb	r3, [r7, #15]
 801984a:	4613      	mov	r3, r2
 801984c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 801984e:	2300      	movs	r3, #0
 8019850:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8019852:	2300      	movs	r3, #0
 8019854:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8019856:	7bfb      	ldrb	r3, [r7, #15]
 8019858:	2b08      	cmp	r3, #8
 801985a:	d902      	bls.n	8019862 <sendto+0x26>
 801985c:	f04f 33ff 	mov.w	r3, #4294967295
 8019860:	e11b      	b.n	8019a9a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8019862:	7bfb      	ldrb	r3, [r7, #15]
 8019864:	009b      	lsls	r3, r3, #2
 8019866:	3301      	adds	r3, #1
 8019868:	00db      	lsls	r3, r3, #3
 801986a:	4618      	mov	r0, r3
 801986c:	f7ff f818 	bl	80188a0 <WIZCHIP_READ>
 8019870:	4603      	mov	r3, r0
 8019872:	f003 030f 	and.w	r3, r3, #15
 8019876:	3b02      	subs	r3, #2
 8019878:	2b02      	cmp	r3, #2
 801987a:	d902      	bls.n	8019882 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 801987c:	f06f 0304 	mvn.w	r3, #4
 8019880:	e10b      	b.n	8019a9a <sendto+0x25e>
         break;
 8019882:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019884:	89bb      	ldrh	r3, [r7, #12]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d102      	bne.n	8019890 <sendto+0x54>
 801988a:	f06f 030d 	mvn.w	r3, #13
 801988e:	e104      	b.n	8019a9a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	781b      	ldrb	r3, [r3, #0]
 8019894:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8019896:	693b      	ldr	r3, [r7, #16]
 8019898:	021b      	lsls	r3, r3, #8
 801989a:	687a      	ldr	r2, [r7, #4]
 801989c:	3201      	adds	r2, #1
 801989e:	7812      	ldrb	r2, [r2, #0]
 80198a0:	4413      	add	r3, r2
 80198a2:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80198a4:	693b      	ldr	r3, [r7, #16]
 80198a6:	021b      	lsls	r3, r3, #8
 80198a8:	687a      	ldr	r2, [r7, #4]
 80198aa:	3202      	adds	r2, #2
 80198ac:	7812      	ldrb	r2, [r2, #0]
 80198ae:	4413      	add	r3, r2
 80198b0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80198b2:	693b      	ldr	r3, [r7, #16]
 80198b4:	021b      	lsls	r3, r3, #8
 80198b6:	687a      	ldr	r2, [r7, #4]
 80198b8:	3203      	adds	r2, #3
 80198ba:	7812      	ldrb	r2, [r2, #0]
 80198bc:	4413      	add	r3, r2
 80198be:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80198c0:	693b      	ldr	r3, [r7, #16]
 80198c2:	2b00      	cmp	r3, #0
 80198c4:	d10e      	bne.n	80198e4 <sendto+0xa8>
 80198c6:	7bfb      	ldrb	r3, [r7, #15]
 80198c8:	009b      	lsls	r3, r3, #2
 80198ca:	3301      	adds	r3, #1
 80198cc:	00db      	lsls	r3, r3, #3
 80198ce:	4618      	mov	r0, r3
 80198d0:	f7fe ffe6 	bl	80188a0 <WIZCHIP_READ>
 80198d4:	4603      	mov	r3, r0
 80198d6:	f003 0304 	and.w	r3, r3, #4
 80198da:	2b04      	cmp	r3, #4
 80198dc:	d002      	beq.n	80198e4 <sendto+0xa8>
 80198de:	f06f 030b 	mvn.w	r3, #11
 80198e2:	e0da      	b.n	8019a9a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80198e4:	8c3b      	ldrh	r3, [r7, #32]
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d10e      	bne.n	8019908 <sendto+0xcc>
 80198ea:	7bfb      	ldrb	r3, [r7, #15]
 80198ec:	009b      	lsls	r3, r3, #2
 80198ee:	3301      	adds	r3, #1
 80198f0:	00db      	lsls	r3, r3, #3
 80198f2:	4618      	mov	r0, r3
 80198f4:	f7fe ffd4 	bl	80188a0 <WIZCHIP_READ>
 80198f8:	4603      	mov	r3, r0
 80198fa:	f003 0304 	and.w	r3, r3, #4
 80198fe:	2b04      	cmp	r3, #4
 8019900:	d002      	beq.n	8019908 <sendto+0xcc>
 8019902:	f06f 030a 	mvn.w	r3, #10
 8019906:	e0c8      	b.n	8019a9a <sendto+0x25e>
   tmp = getSn_SR(sn);
 8019908:	7bfb      	ldrb	r3, [r7, #15]
 801990a:	009b      	lsls	r3, r3, #2
 801990c:	3301      	adds	r3, #1
 801990e:	00db      	lsls	r3, r3, #3
 8019910:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019914:	4618      	mov	r0, r3
 8019916:	f7fe ffc3 	bl	80188a0 <WIZCHIP_READ>
 801991a:	4603      	mov	r3, r0
 801991c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 801991e:	7dfb      	ldrb	r3, [r7, #23]
 8019920:	2b42      	cmp	r3, #66	; 0x42
 8019922:	d008      	beq.n	8019936 <sendto+0xfa>
 8019924:	7dfb      	ldrb	r3, [r7, #23]
 8019926:	2b22      	cmp	r3, #34	; 0x22
 8019928:	d005      	beq.n	8019936 <sendto+0xfa>
 801992a:	7dfb      	ldrb	r3, [r7, #23]
 801992c:	2b32      	cmp	r3, #50	; 0x32
 801992e:	d002      	beq.n	8019936 <sendto+0xfa>
 8019930:	f06f 0306 	mvn.w	r3, #6
 8019934:	e0b1      	b.n	8019a9a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8019936:	7bfb      	ldrb	r3, [r7, #15]
 8019938:	009b      	lsls	r3, r3, #2
 801993a:	3301      	adds	r3, #1
 801993c:	00db      	lsls	r3, r3, #3
 801993e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8019942:	2204      	movs	r2, #4
 8019944:	6879      	ldr	r1, [r7, #4]
 8019946:	4618      	mov	r0, r3
 8019948:	f7ff f8a4 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 801994c:	7bfb      	ldrb	r3, [r7, #15]
 801994e:	009b      	lsls	r3, r3, #2
 8019950:	3301      	adds	r3, #1
 8019952:	00db      	lsls	r3, r3, #3
 8019954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019958:	461a      	mov	r2, r3
 801995a:	8c3b      	ldrh	r3, [r7, #32]
 801995c:	0a1b      	lsrs	r3, r3, #8
 801995e:	b29b      	uxth	r3, r3
 8019960:	b2db      	uxtb	r3, r3
 8019962:	4619      	mov	r1, r3
 8019964:	4610      	mov	r0, r2
 8019966:	f7fe ffe7 	bl	8018938 <WIZCHIP_WRITE>
 801996a:	7bfb      	ldrb	r3, [r7, #15]
 801996c:	009b      	lsls	r3, r3, #2
 801996e:	3301      	adds	r3, #1
 8019970:	00db      	lsls	r3, r3, #3
 8019972:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8019976:	461a      	mov	r2, r3
 8019978:	8c3b      	ldrh	r3, [r7, #32]
 801997a:	b2db      	uxtb	r3, r3
 801997c:	4619      	mov	r1, r3
 801997e:	4610      	mov	r0, r2
 8019980:	f7fe ffda 	bl	8018938 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8019984:	7bfb      	ldrb	r3, [r7, #15]
 8019986:	009b      	lsls	r3, r3, #2
 8019988:	3301      	adds	r3, #1
 801998a:	00db      	lsls	r3, r3, #3
 801998c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8019990:	4618      	mov	r0, r3
 8019992:	f7fe ff85 	bl	80188a0 <WIZCHIP_READ>
 8019996:	4603      	mov	r3, r0
 8019998:	b29b      	uxth	r3, r3
 801999a:	029b      	lsls	r3, r3, #10
 801999c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 801999e:	89ba      	ldrh	r2, [r7, #12]
 80199a0:	8abb      	ldrh	r3, [r7, #20]
 80199a2:	429a      	cmp	r2, r3
 80199a4:	d901      	bls.n	80199aa <sendto+0x16e>
 80199a6:	8abb      	ldrh	r3, [r7, #20]
 80199a8:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80199aa:	7bfb      	ldrb	r3, [r7, #15]
 80199ac:	4618      	mov	r0, r3
 80199ae:	f7ff f8d1 	bl	8018b54 <getSn_TX_FSR>
 80199b2:	4603      	mov	r3, r0
 80199b4:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80199b6:	7bfb      	ldrb	r3, [r7, #15]
 80199b8:	009b      	lsls	r3, r3, #2
 80199ba:	3301      	adds	r3, #1
 80199bc:	00db      	lsls	r3, r3, #3
 80199be:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80199c2:	4618      	mov	r0, r3
 80199c4:	f7fe ff6c 	bl	80188a0 <WIZCHIP_READ>
 80199c8:	4603      	mov	r3, r0
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d102      	bne.n	80199d4 <sendto+0x198>
 80199ce:	f06f 0303 	mvn.w	r3, #3
 80199d2:	e062      	b.n	8019a9a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80199d4:	4b33      	ldr	r3, [pc, #204]	; (8019aa4 <sendto+0x268>)
 80199d6:	881b      	ldrh	r3, [r3, #0]
 80199d8:	461a      	mov	r2, r3
 80199da:	7bfb      	ldrb	r3, [r7, #15]
 80199dc:	fa42 f303 	asr.w	r3, r2, r3
 80199e0:	f003 0301 	and.w	r3, r3, #1
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d005      	beq.n	80199f4 <sendto+0x1b8>
 80199e8:	89ba      	ldrh	r2, [r7, #12]
 80199ea:	8abb      	ldrh	r3, [r7, #20]
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d901      	bls.n	80199f4 <sendto+0x1b8>
 80199f0:	2300      	movs	r3, #0
 80199f2:	e052      	b.n	8019a9a <sendto+0x25e>
      if(len <= freesize) break;
 80199f4:	89ba      	ldrh	r2, [r7, #12]
 80199f6:	8abb      	ldrh	r3, [r7, #20]
 80199f8:	429a      	cmp	r2, r3
 80199fa:	d900      	bls.n	80199fe <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80199fc:	e7d5      	b.n	80199aa <sendto+0x16e>
      if(len <= freesize) break;
 80199fe:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8019a00:	89ba      	ldrh	r2, [r7, #12]
 8019a02:	7bfb      	ldrb	r3, [r7, #15]
 8019a04:	68b9      	ldr	r1, [r7, #8]
 8019a06:	4618      	mov	r0, r3
 8019a08:	f7ff f93a 	bl	8018c80 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 8019a0c:	7bfb      	ldrb	r3, [r7, #15]
 8019a0e:	009b      	lsls	r3, r3, #2
 8019a10:	3301      	adds	r3, #1
 8019a12:	00db      	lsls	r3, r3, #3
 8019a14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a18:	2120      	movs	r1, #32
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	f7fe ff8c 	bl	8018938 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8019a20:	bf00      	nop
 8019a22:	7bfb      	ldrb	r3, [r7, #15]
 8019a24:	009b      	lsls	r3, r3, #2
 8019a26:	3301      	adds	r3, #1
 8019a28:	00db      	lsls	r3, r3, #3
 8019a2a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7fe ff36 	bl	80188a0 <WIZCHIP_READ>
 8019a34:	4603      	mov	r3, r0
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d1f3      	bne.n	8019a22 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8019a3a:	7bfb      	ldrb	r3, [r7, #15]
 8019a3c:	009b      	lsls	r3, r3, #2
 8019a3e:	3301      	adds	r3, #1
 8019a40:	00db      	lsls	r3, r3, #3
 8019a42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019a46:	4618      	mov	r0, r3
 8019a48:	f7fe ff2a 	bl	80188a0 <WIZCHIP_READ>
 8019a4c:	4603      	mov	r3, r0
 8019a4e:	f003 031f 	and.w	r3, r3, #31
 8019a52:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8019a54:	7dfb      	ldrb	r3, [r7, #23]
 8019a56:	f003 0310 	and.w	r3, r3, #16
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d00c      	beq.n	8019a78 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8019a5e:	7bfb      	ldrb	r3, [r7, #15]
 8019a60:	009b      	lsls	r3, r3, #2
 8019a62:	3301      	adds	r3, #1
 8019a64:	00db      	lsls	r3, r3, #3
 8019a66:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019a6a:	2110      	movs	r1, #16
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	f7fe ff63 	bl	8018938 <WIZCHIP_WRITE>
         break;
 8019a72:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8019a74:	89bb      	ldrh	r3, [r7, #12]
 8019a76:	e010      	b.n	8019a9a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8019a78:	7dfb      	ldrb	r3, [r7, #23]
 8019a7a:	f003 0308 	and.w	r3, r3, #8
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d0db      	beq.n	8019a3a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8019a82:	7bfb      	ldrb	r3, [r7, #15]
 8019a84:	009b      	lsls	r3, r3, #2
 8019a86:	3301      	adds	r3, #1
 8019a88:	00db      	lsls	r3, r3, #3
 8019a8a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8019a8e:	2108      	movs	r1, #8
 8019a90:	4618      	mov	r0, r3
 8019a92:	f7fe ff51 	bl	8018938 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8019a96:	f06f 030c 	mvn.w	r3, #12
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3718      	adds	r7, #24
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}
 8019aa2:	bf00      	nop
 8019aa4:	20000984 	.word	0x20000984

08019aa8 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8019aa8:	b580      	push	{r7, lr}
 8019aaa:	b088      	sub	sp, #32
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	60b9      	str	r1, [r7, #8]
 8019ab0:	607b      	str	r3, [r7, #4]
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	73fb      	strb	r3, [r7, #15]
 8019ab6:	4613      	mov	r3, r2
 8019ab8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8019aba:	2300      	movs	r3, #0
 8019abc:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8019abe:	7bfb      	ldrb	r3, [r7, #15]
 8019ac0:	2b08      	cmp	r3, #8
 8019ac2:	d902      	bls.n	8019aca <recvfrom+0x22>
 8019ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8019ac8:	e1d4      	b.n	8019e74 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8019aca:	7bfb      	ldrb	r3, [r7, #15]
 8019acc:	009b      	lsls	r3, r3, #2
 8019ace:	3301      	adds	r3, #1
 8019ad0:	00db      	lsls	r3, r3, #3
 8019ad2:	4618      	mov	r0, r3
 8019ad4:	f7fe fee4 	bl	80188a0 <WIZCHIP_READ>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	777b      	strb	r3, [r7, #29]
 8019adc:	7f7b      	ldrb	r3, [r7, #29]
 8019ade:	f003 030f 	and.w	r3, r3, #15
 8019ae2:	3b02      	subs	r3, #2
 8019ae4:	2b02      	cmp	r3, #2
 8019ae6:	d902      	bls.n	8019aee <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8019ae8:	f06f 0304 	mvn.w	r3, #4
 8019aec:	e1c2      	b.n	8019e74 <recvfrom+0x3cc>
         break;
 8019aee:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8019af0:	89bb      	ldrh	r3, [r7, #12]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d102      	bne.n	8019afc <recvfrom+0x54>
 8019af6:	f06f 030d 	mvn.w	r3, #13
 8019afa:	e1bb      	b.n	8019e74 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8019afc:	7bfb      	ldrb	r3, [r7, #15]
 8019afe:	4a88      	ldr	r2, [pc, #544]	; (8019d20 <recvfrom+0x278>)
 8019b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d128      	bne.n	8019b5a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 8019b08:	7bfb      	ldrb	r3, [r7, #15]
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	f7ff f86d 	bl	8018bea <getSn_RX_RSR>
 8019b10:	4603      	mov	r3, r0
 8019b12:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8019b14:	7bfb      	ldrb	r3, [r7, #15]
 8019b16:	009b      	lsls	r3, r3, #2
 8019b18:	3301      	adds	r3, #1
 8019b1a:	00db      	lsls	r3, r3, #3
 8019b1c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8019b20:	4618      	mov	r0, r3
 8019b22:	f7fe febd 	bl	80188a0 <WIZCHIP_READ>
 8019b26:	4603      	mov	r3, r0
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d102      	bne.n	8019b32 <recvfrom+0x8a>
 8019b2c:	f06f 0303 	mvn.w	r3, #3
 8019b30:	e1a0      	b.n	8019e74 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8019b32:	4b7c      	ldr	r3, [pc, #496]	; (8019d24 <recvfrom+0x27c>)
 8019b34:	881b      	ldrh	r3, [r3, #0]
 8019b36:	461a      	mov	r2, r3
 8019b38:	7bfb      	ldrb	r3, [r7, #15]
 8019b3a:	fa42 f303 	asr.w	r3, r2, r3
 8019b3e:	f003 0301 	and.w	r3, r3, #1
 8019b42:	2b00      	cmp	r3, #0
 8019b44:	d004      	beq.n	8019b50 <recvfrom+0xa8>
 8019b46:	8bfb      	ldrh	r3, [r7, #30]
 8019b48:	2b00      	cmp	r3, #0
 8019b4a:	d101      	bne.n	8019b50 <recvfrom+0xa8>
 8019b4c:	2300      	movs	r3, #0
 8019b4e:	e191      	b.n	8019e74 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8019b50:	8bfb      	ldrh	r3, [r7, #30]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d100      	bne.n	8019b58 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8019b56:	e7d7      	b.n	8019b08 <recvfrom+0x60>
         if(pack_len != 0) break;
 8019b58:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8019b5a:	7f7b      	ldrb	r3, [r7, #29]
 8019b5c:	f003 0307 	and.w	r3, r3, #7
 8019b60:	2b04      	cmp	r3, #4
 8019b62:	d079      	beq.n	8019c58 <recvfrom+0x1b0>
 8019b64:	2b04      	cmp	r3, #4
 8019b66:	f300 8142 	bgt.w	8019dee <recvfrom+0x346>
 8019b6a:	2b02      	cmp	r3, #2
 8019b6c:	d003      	beq.n	8019b76 <recvfrom+0xce>
 8019b6e:	2b03      	cmp	r3, #3
 8019b70:	f000 80dc 	beq.w	8019d2c <recvfrom+0x284>
 8019b74:	e13b      	b.n	8019dee <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8019b76:	7bfb      	ldrb	r3, [r7, #15]
 8019b78:	4a69      	ldr	r2, [pc, #420]	; (8019d20 <recvfrom+0x278>)
 8019b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d152      	bne.n	8019c28 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8019b82:	f107 0114 	add.w	r1, r7, #20
 8019b86:	7bfb      	ldrb	r3, [r7, #15]
 8019b88:	2208      	movs	r2, #8
 8019b8a:	4618      	mov	r0, r3
 8019b8c:	f7ff f8d4 	bl	8018d38 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019b90:	7bfb      	ldrb	r3, [r7, #15]
 8019b92:	009b      	lsls	r3, r3, #2
 8019b94:	3301      	adds	r3, #1
 8019b96:	00db      	lsls	r3, r3, #3
 8019b98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019b9c:	2140      	movs	r1, #64	; 0x40
 8019b9e:	4618      	mov	r0, r3
 8019ba0:	f7fe feca 	bl	8018938 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019ba4:	bf00      	nop
 8019ba6:	7bfb      	ldrb	r3, [r7, #15]
 8019ba8:	009b      	lsls	r3, r3, #2
 8019baa:	3301      	adds	r3, #1
 8019bac:	00db      	lsls	r3, r3, #3
 8019bae:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f7fe fe74 	bl	80188a0 <WIZCHIP_READ>
 8019bb8:	4603      	mov	r3, r0
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	d1f3      	bne.n	8019ba6 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8019bbe:	7d3a      	ldrb	r2, [r7, #20]
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	3301      	adds	r3, #1
 8019bc8:	7d7a      	ldrb	r2, [r7, #21]
 8019bca:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	3302      	adds	r3, #2
 8019bd0:	7dba      	ldrb	r2, [r7, #22]
 8019bd2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	3303      	adds	r3, #3
 8019bd8:	7dfa      	ldrb	r2, [r7, #23]
 8019bda:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8019bdc:	7e3b      	ldrb	r3, [r7, #24]
 8019bde:	b29a      	uxth	r2, r3
 8019be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8019be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019be6:	881b      	ldrh	r3, [r3, #0]
 8019be8:	021b      	lsls	r3, r3, #8
 8019bea:	b29a      	uxth	r2, r3
 8019bec:	7e7b      	ldrb	r3, [r7, #25]
 8019bee:	b29b      	uxth	r3, r3
 8019bf0:	4413      	add	r3, r2
 8019bf2:	b29a      	uxth	r2, r3
 8019bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019bf6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8019bf8:	7eba      	ldrb	r2, [r7, #26]
 8019bfa:	7bfb      	ldrb	r3, [r7, #15]
 8019bfc:	b291      	uxth	r1, r2
 8019bfe:	4a48      	ldr	r2, [pc, #288]	; (8019d20 <recvfrom+0x278>)
 8019c00:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8019c04:	7bfb      	ldrb	r3, [r7, #15]
 8019c06:	4a46      	ldr	r2, [pc, #280]	; (8019d20 <recvfrom+0x278>)
 8019c08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c0c:	021b      	lsls	r3, r3, #8
 8019c0e:	b299      	uxth	r1, r3
 8019c10:	7efb      	ldrb	r3, [r7, #27]
 8019c12:	b29a      	uxth	r2, r3
 8019c14:	7bfb      	ldrb	r3, [r7, #15]
 8019c16:	440a      	add	r2, r1
 8019c18:	b291      	uxth	r1, r2
 8019c1a:	4a41      	ldr	r2, [pc, #260]	; (8019d20 <recvfrom+0x278>)
 8019c1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8019c20:	7bfb      	ldrb	r3, [r7, #15]
 8019c22:	4a41      	ldr	r2, [pc, #260]	; (8019d28 <recvfrom+0x280>)
 8019c24:	2180      	movs	r1, #128	; 0x80
 8019c26:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019c28:	7bfb      	ldrb	r3, [r7, #15]
 8019c2a:	4a3d      	ldr	r2, [pc, #244]	; (8019d20 <recvfrom+0x278>)
 8019c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c30:	89ba      	ldrh	r2, [r7, #12]
 8019c32:	429a      	cmp	r2, r3
 8019c34:	d202      	bcs.n	8019c3c <recvfrom+0x194>
 8019c36:	89bb      	ldrh	r3, [r7, #12]
 8019c38:	83fb      	strh	r3, [r7, #30]
 8019c3a:	e004      	b.n	8019c46 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8019c3c:	7bfb      	ldrb	r3, [r7, #15]
 8019c3e:	4a38      	ldr	r2, [pc, #224]	; (8019d20 <recvfrom+0x278>)
 8019c40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c44:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8019c46:	8bfb      	ldrh	r3, [r7, #30]
 8019c48:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019c4a:	8bfa      	ldrh	r2, [r7, #30]
 8019c4c:	7bfb      	ldrb	r3, [r7, #15]
 8019c4e:	68b9      	ldr	r1, [r7, #8]
 8019c50:	4618      	mov	r0, r3
 8019c52:	f7ff f871 	bl	8018d38 <wiz_recv_data>
			break;
 8019c56:	e0d6      	b.n	8019e06 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8019c58:	7bfb      	ldrb	r3, [r7, #15]
 8019c5a:	4a31      	ldr	r2, [pc, #196]	; (8019d20 <recvfrom+0x278>)
 8019c5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d146      	bne.n	8019cf2 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8019c64:	f107 0114 	add.w	r1, r7, #20
 8019c68:	7bfb      	ldrb	r3, [r7, #15]
 8019c6a:	2202      	movs	r2, #2
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f7ff f863 	bl	8018d38 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019c72:	7bfb      	ldrb	r3, [r7, #15]
 8019c74:	009b      	lsls	r3, r3, #2
 8019c76:	3301      	adds	r3, #1
 8019c78:	00db      	lsls	r3, r3, #3
 8019c7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019c7e:	2140      	movs	r1, #64	; 0x40
 8019c80:	4618      	mov	r0, r3
 8019c82:	f7fe fe59 	bl	8018938 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019c86:	bf00      	nop
 8019c88:	7bfb      	ldrb	r3, [r7, #15]
 8019c8a:	009b      	lsls	r3, r3, #2
 8019c8c:	3301      	adds	r3, #1
 8019c8e:	00db      	lsls	r3, r3, #3
 8019c90:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019c94:	4618      	mov	r0, r3
 8019c96:	f7fe fe03 	bl	80188a0 <WIZCHIP_READ>
 8019c9a:	4603      	mov	r3, r0
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d1f3      	bne.n	8019c88 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8019ca0:	7d3a      	ldrb	r2, [r7, #20]
 8019ca2:	7bfb      	ldrb	r3, [r7, #15]
 8019ca4:	b291      	uxth	r1, r2
 8019ca6:	4a1e      	ldr	r2, [pc, #120]	; (8019d20 <recvfrom+0x278>)
 8019ca8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8019cac:	7bfb      	ldrb	r3, [r7, #15]
 8019cae:	4a1c      	ldr	r2, [pc, #112]	; (8019d20 <recvfrom+0x278>)
 8019cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cb4:	021b      	lsls	r3, r3, #8
 8019cb6:	b29a      	uxth	r2, r3
 8019cb8:	7d7b      	ldrb	r3, [r7, #21]
 8019cba:	b29b      	uxth	r3, r3
 8019cbc:	4413      	add	r3, r2
 8019cbe:	b29a      	uxth	r2, r3
 8019cc0:	7bfb      	ldrb	r3, [r7, #15]
 8019cc2:	3a02      	subs	r2, #2
 8019cc4:	b291      	uxth	r1, r2
 8019cc6:	4a16      	ldr	r2, [pc, #88]	; (8019d20 <recvfrom+0x278>)
 8019cc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8019ccc:	7bfb      	ldrb	r3, [r7, #15]
 8019cce:	4a14      	ldr	r2, [pc, #80]	; (8019d20 <recvfrom+0x278>)
 8019cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cd4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8019cd8:	4293      	cmp	r3, r2
 8019cda:	d906      	bls.n	8019cea <recvfrom+0x242>
   			{
   			   close(sn);
 8019cdc:	7bfb      	ldrb	r3, [r7, #15]
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f7ff f9e2 	bl	80190a8 <close>
   			   return SOCKFATAL_PACKLEN;
 8019ce4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8019ce8:	e0c4      	b.n	8019e74 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8019cea:	7bfb      	ldrb	r3, [r7, #15]
 8019cec:	4a0e      	ldr	r2, [pc, #56]	; (8019d28 <recvfrom+0x280>)
 8019cee:	2180      	movs	r1, #128	; 0x80
 8019cf0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8019cf2:	7bfb      	ldrb	r3, [r7, #15]
 8019cf4:	4a0a      	ldr	r2, [pc, #40]	; (8019d20 <recvfrom+0x278>)
 8019cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019cfa:	89ba      	ldrh	r2, [r7, #12]
 8019cfc:	429a      	cmp	r2, r3
 8019cfe:	d202      	bcs.n	8019d06 <recvfrom+0x25e>
 8019d00:	89bb      	ldrh	r3, [r7, #12]
 8019d02:	83fb      	strh	r3, [r7, #30]
 8019d04:	e004      	b.n	8019d10 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8019d06:	7bfb      	ldrb	r3, [r7, #15]
 8019d08:	4a05      	ldr	r2, [pc, #20]	; (8019d20 <recvfrom+0x278>)
 8019d0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d0e:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8019d10:	8bfa      	ldrh	r2, [r7, #30]
 8019d12:	7bfb      	ldrb	r3, [r7, #15]
 8019d14:	68b9      	ldr	r1, [r7, #8]
 8019d16:	4618      	mov	r0, r3
 8019d18:	f7ff f80e 	bl	8018d38 <wiz_recv_data>
		   break;
 8019d1c:	e073      	b.n	8019e06 <recvfrom+0x35e>
 8019d1e:	bf00      	nop
 8019d20:	20000988 	.word	0x20000988
 8019d24:	20000984 	.word	0x20000984
 8019d28:	20000998 	.word	0x20000998
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8019d2c:	7bfb      	ldrb	r3, [r7, #15]
 8019d2e:	4a53      	ldr	r2, [pc, #332]	; (8019e7c <recvfrom+0x3d4>)
 8019d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d144      	bne.n	8019dc2 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8019d38:	f107 0114 	add.w	r1, r7, #20
 8019d3c:	7bfb      	ldrb	r3, [r7, #15]
 8019d3e:	2206      	movs	r2, #6
 8019d40:	4618      	mov	r0, r3
 8019d42:	f7fe fff9 	bl	8018d38 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8019d46:	7bfb      	ldrb	r3, [r7, #15]
 8019d48:	009b      	lsls	r3, r3, #2
 8019d4a:	3301      	adds	r3, #1
 8019d4c:	00db      	lsls	r3, r3, #3
 8019d4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019d52:	2140      	movs	r1, #64	; 0x40
 8019d54:	4618      	mov	r0, r3
 8019d56:	f7fe fdef 	bl	8018938 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8019d5a:	bf00      	nop
 8019d5c:	7bfb      	ldrb	r3, [r7, #15]
 8019d5e:	009b      	lsls	r3, r3, #2
 8019d60:	3301      	adds	r3, #1
 8019d62:	00db      	lsls	r3, r3, #3
 8019d64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019d68:	4618      	mov	r0, r3
 8019d6a:	f7fe fd99 	bl	80188a0 <WIZCHIP_READ>
 8019d6e:	4603      	mov	r3, r0
 8019d70:	2b00      	cmp	r3, #0
 8019d72:	d1f3      	bne.n	8019d5c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8019d74:	7d3a      	ldrb	r2, [r7, #20]
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	3301      	adds	r3, #1
 8019d7e:	7d7a      	ldrb	r2, [r7, #21]
 8019d80:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	3302      	adds	r3, #2
 8019d86:	7dba      	ldrb	r2, [r7, #22]
 8019d88:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	3303      	adds	r3, #3
 8019d8e:	7dfa      	ldrb	r2, [r7, #23]
 8019d90:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8019d92:	7e3a      	ldrb	r2, [r7, #24]
 8019d94:	7bfb      	ldrb	r3, [r7, #15]
 8019d96:	b291      	uxth	r1, r2
 8019d98:	4a38      	ldr	r2, [pc, #224]	; (8019e7c <recvfrom+0x3d4>)
 8019d9a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8019d9e:	7bfb      	ldrb	r3, [r7, #15]
 8019da0:	4a36      	ldr	r2, [pc, #216]	; (8019e7c <recvfrom+0x3d4>)
 8019da2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019da6:	021b      	lsls	r3, r3, #8
 8019da8:	b299      	uxth	r1, r3
 8019daa:	7e7b      	ldrb	r3, [r7, #25]
 8019dac:	b29a      	uxth	r2, r3
 8019dae:	7bfb      	ldrb	r3, [r7, #15]
 8019db0:	440a      	add	r2, r1
 8019db2:	b291      	uxth	r1, r2
 8019db4:	4a31      	ldr	r2, [pc, #196]	; (8019e7c <recvfrom+0x3d4>)
 8019db6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8019dba:	7bfb      	ldrb	r3, [r7, #15]
 8019dbc:	4a30      	ldr	r2, [pc, #192]	; (8019e80 <recvfrom+0x3d8>)
 8019dbe:	2180      	movs	r1, #128	; 0x80
 8019dc0:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8019dc2:	7bfb      	ldrb	r3, [r7, #15]
 8019dc4:	4a2d      	ldr	r2, [pc, #180]	; (8019e7c <recvfrom+0x3d4>)
 8019dc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019dca:	89ba      	ldrh	r2, [r7, #12]
 8019dcc:	429a      	cmp	r2, r3
 8019dce:	d202      	bcs.n	8019dd6 <recvfrom+0x32e>
 8019dd0:	89bb      	ldrh	r3, [r7, #12]
 8019dd2:	83fb      	strh	r3, [r7, #30]
 8019dd4:	e004      	b.n	8019de0 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8019dd6:	7bfb      	ldrb	r3, [r7, #15]
 8019dd8:	4a28      	ldr	r2, [pc, #160]	; (8019e7c <recvfrom+0x3d4>)
 8019dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019dde:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8019de0:	8bfa      	ldrh	r2, [r7, #30]
 8019de2:	7bfb      	ldrb	r3, [r7, #15]
 8019de4:	68b9      	ldr	r1, [r7, #8]
 8019de6:	4618      	mov	r0, r3
 8019de8:	f7fe ffa6 	bl	8018d38 <wiz_recv_data>
			break;
 8019dec:	e00b      	b.n	8019e06 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8019dee:	8bfa      	ldrh	r2, [r7, #30]
 8019df0:	7bfb      	ldrb	r3, [r7, #15]
 8019df2:	4611      	mov	r1, r2
 8019df4:	4618      	mov	r0, r3
 8019df6:	f7fe fffb 	bl	8018df0 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8019dfa:	7bfb      	ldrb	r3, [r7, #15]
 8019dfc:	491f      	ldr	r1, [pc, #124]	; (8019e7c <recvfrom+0x3d4>)
 8019dfe:	8bfa      	ldrh	r2, [r7, #30]
 8019e00:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8019e04:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8019e06:	7bfb      	ldrb	r3, [r7, #15]
 8019e08:	009b      	lsls	r3, r3, #2
 8019e0a:	3301      	adds	r3, #1
 8019e0c:	00db      	lsls	r3, r3, #3
 8019e0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019e12:	2140      	movs	r1, #64	; 0x40
 8019e14:	4618      	mov	r0, r3
 8019e16:	f7fe fd8f 	bl	8018938 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8019e1a:	bf00      	nop
 8019e1c:	7bfb      	ldrb	r3, [r7, #15]
 8019e1e:	009b      	lsls	r3, r3, #2
 8019e20:	3301      	adds	r3, #1
 8019e22:	00db      	lsls	r3, r3, #3
 8019e24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019e28:	4618      	mov	r0, r3
 8019e2a:	f7fe fd39 	bl	80188a0 <WIZCHIP_READ>
 8019e2e:	4603      	mov	r3, r0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d1f3      	bne.n	8019e1c <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8019e34:	7bfb      	ldrb	r3, [r7, #15]
 8019e36:	4a11      	ldr	r2, [pc, #68]	; (8019e7c <recvfrom+0x3d4>)
 8019e38:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8019e3c:	7bfb      	ldrb	r3, [r7, #15]
 8019e3e:	8bfa      	ldrh	r2, [r7, #30]
 8019e40:	1a8a      	subs	r2, r1, r2
 8019e42:	b291      	uxth	r1, r2
 8019e44:	4a0d      	ldr	r2, [pc, #52]	; (8019e7c <recvfrom+0x3d4>)
 8019e46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8019e4a:	7bfb      	ldrb	r3, [r7, #15]
 8019e4c:	4a0b      	ldr	r2, [pc, #44]	; (8019e7c <recvfrom+0x3d4>)
 8019e4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	d009      	beq.n	8019e6a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8019e56:	7bfb      	ldrb	r3, [r7, #15]
 8019e58:	4a09      	ldr	r2, [pc, #36]	; (8019e80 <recvfrom+0x3d8>)
 8019e5a:	5cd2      	ldrb	r2, [r2, r3]
 8019e5c:	7bfb      	ldrb	r3, [r7, #15]
 8019e5e:	f042 0201 	orr.w	r2, r2, #1
 8019e62:	b2d1      	uxtb	r1, r2
 8019e64:	4a06      	ldr	r2, [pc, #24]	; (8019e80 <recvfrom+0x3d8>)
 8019e66:	54d1      	strb	r1, [r2, r3]
 8019e68:	e003      	b.n	8019e72 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8019e6a:	7bfb      	ldrb	r3, [r7, #15]
 8019e6c:	4a04      	ldr	r2, [pc, #16]	; (8019e80 <recvfrom+0x3d8>)
 8019e6e:	2100      	movs	r1, #0
 8019e70:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8019e72:	8bfb      	ldrh	r3, [r7, #30]
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	3720      	adds	r7, #32
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	bd80      	pop	{r7, pc}
 8019e7c:	20000988 	.word	0x20000988
 8019e80:	20000998 	.word	0x20000998

08019e84 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8019e84:	b480      	push	{r7}
 8019e86:	af00      	add	r7, sp, #0
 8019e88:	bf00      	nop
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e90:	4770      	bx	lr

08019e92 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8019e92:	b480      	push	{r7}
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	bf00      	nop
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e9e:	4770      	bx	lr

08019ea0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8019ea0:	b480      	push	{r7}
 8019ea2:	af00      	add	r7, sp, #0
 8019ea4:	bf00      	nop
 8019ea6:	46bd      	mov	sp, r7
 8019ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eac:	4770      	bx	lr

08019eae <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8019eae:	b480      	push	{r7}
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	bf00      	nop
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eba:	4770      	bx	lr

08019ebc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8019ebc:	b480      	push	{r7}
 8019ebe:	b083      	sub	sp, #12
 8019ec0:	af00      	add	r7, sp, #0
 8019ec2:	6078      	str	r0, [r7, #4]
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	781b      	ldrb	r3, [r3, #0]
 8019ec8:	b2db      	uxtb	r3, r3
 8019eca:	4618      	mov	r0, r3
 8019ecc:	370c      	adds	r7, #12
 8019ece:	46bd      	mov	sp, r7
 8019ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed4:	4770      	bx	lr

08019ed6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8019ed6:	b480      	push	{r7}
 8019ed8:	b083      	sub	sp, #12
 8019eda:	af00      	add	r7, sp, #0
 8019edc:	6078      	str	r0, [r7, #4]
 8019ede:	460b      	mov	r3, r1
 8019ee0:	70fb      	strb	r3, [r7, #3]
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	78fa      	ldrb	r2, [r7, #3]
 8019ee6:	701a      	strb	r2, [r3, #0]
 8019ee8:	bf00      	nop
 8019eea:	370c      	adds	r7, #12
 8019eec:	46bd      	mov	sp, r7
 8019eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ef2:	4770      	bx	lr

08019ef4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8019ef4:	b480      	push	{r7}
 8019ef6:	af00      	add	r7, sp, #0
 8019ef8:	2300      	movs	r3, #0
 8019efa:	4618      	mov	r0, r3
 8019efc:	46bd      	mov	sp, r7
 8019efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f02:	4770      	bx	lr

08019f04 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8019f04:	b480      	push	{r7}
 8019f06:	b083      	sub	sp, #12
 8019f08:	af00      	add	r7, sp, #0
 8019f0a:	4603      	mov	r3, r0
 8019f0c:	71fb      	strb	r3, [r7, #7]
 8019f0e:	bf00      	nop
 8019f10:	370c      	adds	r7, #12
 8019f12:	46bd      	mov	sp, r7
 8019f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f18:	4770      	bx	lr
	...

08019f1c <reg_wizchip_cris_cbfunc>:

static uint8_t    _DNS_[4];      // DNS server ip address
static dhcp_mode  _DHCP_;        // DHCP mode

void reg_wizchip_cris_cbfunc(void(*cris_en)(void), void(*cris_ex)(void))
{
 8019f1c:	b480      	push	{r7}
 8019f1e:	b083      	sub	sp, #12
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
 8019f24:	6039      	str	r1, [r7, #0]
   if(!cris_en || !cris_ex)
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d002      	beq.n	8019f32 <reg_wizchip_cris_cbfunc+0x16>
 8019f2c:	683b      	ldr	r3, [r7, #0]
 8019f2e:	2b00      	cmp	r3, #0
 8019f30:	d106      	bne.n	8019f40 <reg_wizchip_cris_cbfunc+0x24>
   {
      WIZCHIP.CRIS._enter = wizchip_cris_enter;
 8019f32:	4b0a      	ldr	r3, [pc, #40]	; (8019f5c <reg_wizchip_cris_cbfunc+0x40>)
 8019f34:	4a0a      	ldr	r2, [pc, #40]	; (8019f60 <reg_wizchip_cris_cbfunc+0x44>)
 8019f36:	60da      	str	r2, [r3, #12]
      WIZCHIP.CRIS._exit  = wizchip_cris_exit;
 8019f38:	4b08      	ldr	r3, [pc, #32]	; (8019f5c <reg_wizchip_cris_cbfunc+0x40>)
 8019f3a:	4a0a      	ldr	r2, [pc, #40]	; (8019f64 <reg_wizchip_cris_cbfunc+0x48>)
 8019f3c:	611a      	str	r2, [r3, #16]
 8019f3e:	e006      	b.n	8019f4e <reg_wizchip_cris_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CRIS._enter = cris_en;
 8019f40:	4a06      	ldr	r2, [pc, #24]	; (8019f5c <reg_wizchip_cris_cbfunc+0x40>)
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	60d3      	str	r3, [r2, #12]
      WIZCHIP.CRIS._exit  = cris_ex;
 8019f46:	4a05      	ldr	r2, [pc, #20]	; (8019f5c <reg_wizchip_cris_cbfunc+0x40>)
 8019f48:	683b      	ldr	r3, [r7, #0]
 8019f4a:	6113      	str	r3, [r2, #16]
   }
}
 8019f4c:	bf00      	nop
 8019f4e:	bf00      	nop
 8019f50:	370c      	adds	r7, #12
 8019f52:	46bd      	mov	sp, r7
 8019f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f58:	4770      	bx	lr
 8019f5a:	bf00      	nop
 8019f5c:	200000c4 	.word	0x200000c4
 8019f60:	08019e85 	.word	0x08019e85
 8019f64:	08019e93 	.word	0x08019e93

08019f68 <reg_wizchip_cs_cbfunc>:

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b083      	sub	sp, #12
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d002      	beq.n	8019f7e <reg_wizchip_cs_cbfunc+0x16>
 8019f78:	683b      	ldr	r3, [r7, #0]
 8019f7a:	2b00      	cmp	r3, #0
 8019f7c:	d106      	bne.n	8019f8c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8019f7e:	4b0a      	ldr	r3, [pc, #40]	; (8019fa8 <reg_wizchip_cs_cbfunc+0x40>)
 8019f80:	4a0a      	ldr	r2, [pc, #40]	; (8019fac <reg_wizchip_cs_cbfunc+0x44>)
 8019f82:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8019f84:	4b08      	ldr	r3, [pc, #32]	; (8019fa8 <reg_wizchip_cs_cbfunc+0x40>)
 8019f86:	4a0a      	ldr	r2, [pc, #40]	; (8019fb0 <reg_wizchip_cs_cbfunc+0x48>)
 8019f88:	619a      	str	r2, [r3, #24]
 8019f8a:	e006      	b.n	8019f9a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8019f8c:	4a06      	ldr	r2, [pc, #24]	; (8019fa8 <reg_wizchip_cs_cbfunc+0x40>)
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8019f92:	4a05      	ldr	r2, [pc, #20]	; (8019fa8 <reg_wizchip_cs_cbfunc+0x40>)
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	6193      	str	r3, [r2, #24]
   }
}
 8019f98:	bf00      	nop
 8019f9a:	bf00      	nop
 8019f9c:	370c      	adds	r7, #12
 8019f9e:	46bd      	mov	sp, r7
 8019fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa4:	4770      	bx	lr
 8019fa6:	bf00      	nop
 8019fa8:	200000c4 	.word	0x200000c4
 8019fac:	08019ea1 	.word	0x08019ea1
 8019fb0:	08019eaf 	.word	0x08019eaf

08019fb4 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8019fb4:	b480      	push	{r7}
 8019fb6:	b083      	sub	sp, #12
 8019fb8:	af00      	add	r7, sp, #0
 8019fba:	6078      	str	r0, [r7, #4]
 8019fbc:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8019fbe:	bf00      	nop
 8019fc0:	4b0f      	ldr	r3, [pc, #60]	; (801a000 <reg_wizchip_spi_cbfunc+0x4c>)
 8019fc2:	881b      	ldrh	r3, [r3, #0]
 8019fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fc8:	2b00      	cmp	r3, #0
 8019fca:	d0f9      	beq.n	8019fc0 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d002      	beq.n	8019fd8 <reg_wizchip_spi_cbfunc+0x24>
 8019fd2:	683b      	ldr	r3, [r7, #0]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d106      	bne.n	8019fe6 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8019fd8:	4b09      	ldr	r3, [pc, #36]	; (801a000 <reg_wizchip_spi_cbfunc+0x4c>)
 8019fda:	4a0a      	ldr	r2, [pc, #40]	; (801a004 <reg_wizchip_spi_cbfunc+0x50>)
 8019fdc:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8019fde:	4b08      	ldr	r3, [pc, #32]	; (801a000 <reg_wizchip_spi_cbfunc+0x4c>)
 8019fe0:	4a09      	ldr	r2, [pc, #36]	; (801a008 <reg_wizchip_spi_cbfunc+0x54>)
 8019fe2:	621a      	str	r2, [r3, #32]
 8019fe4:	e006      	b.n	8019ff4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8019fe6:	4a06      	ldr	r2, [pc, #24]	; (801a000 <reg_wizchip_spi_cbfunc+0x4c>)
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8019fec:	4a04      	ldr	r2, [pc, #16]	; (801a000 <reg_wizchip_spi_cbfunc+0x4c>)
 8019fee:	683b      	ldr	r3, [r7, #0]
 8019ff0:	6213      	str	r3, [r2, #32]
   }
}
 8019ff2:	bf00      	nop
 8019ff4:	bf00      	nop
 8019ff6:	370c      	adds	r7, #12
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ffe:	4770      	bx	lr
 801a000:	200000c4 	.word	0x200000c4
 801a004:	08019ef5 	.word	0x08019ef5
 801a008:	08019f05 	.word	0x08019f05

0801a00c <ctlwizchip>:
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
   }
}

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 801a00c:	b590      	push	{r4, r7, lr}
 801a00e:	b087      	sub	sp, #28
 801a010:	af00      	add	r7, sp, #0
 801a012:	4603      	mov	r3, r0
 801a014:	6039      	str	r1, [r7, #0]
 801a016:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 801a018:	2300      	movs	r3, #0
 801a01a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 801a01c:	2300      	movs	r3, #0
 801a01e:	60fb      	str	r3, [r7, #12]
 801a020:	2300      	movs	r3, #0
 801a022:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 801a024:	79fb      	ldrb	r3, [r7, #7]
 801a026:	2b0f      	cmp	r3, #15
 801a028:	f200 80c7 	bhi.w	801a1ba <ctlwizchip+0x1ae>
 801a02c:	a201      	add	r2, pc, #4	; (adr r2, 801a034 <ctlwizchip+0x28>)
 801a02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a032:	bf00      	nop
 801a034:	0801a075 	.word	0x0801a075
 801a038:	0801a07b 	.word	0x0801a07b
 801a03c:	0801a0a7 	.word	0x0801a0a7
 801a040:	0801a09b 	.word	0x0801a09b
 801a044:	0801a0b5 	.word	0x0801a0b5
 801a048:	0801a0c1 	.word	0x0801a0c1
 801a04c:	0801a0cf 	.word	0x0801a0cf
 801a050:	0801a0f5 	.word	0x0801a0f5
 801a054:	0801a11b 	.word	0x0801a11b
 801a058:	0801a15f 	.word	0x0801a15f
 801a05c:	0801a165 	.word	0x0801a165
 801a060:	0801a16d 	.word	0x0801a16d
 801a064:	0801a1c1 	.word	0x0801a1c1
 801a068:	0801a175 	.word	0x0801a175
 801a06c:	0801a183 	.word	0x0801a183
 801a070:	0801a19f 	.word	0x0801a19f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 801a074:	f000 f8ea 	bl	801a24c <wizchip_sw_reset>
         break;
 801a078:	e0a3      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d004      	beq.n	801a08a <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 801a080:	683b      	ldr	r3, [r7, #0]
 801a082:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	3308      	adds	r3, #8
 801a088:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 801a08a:	68fb      	ldr	r3, [r7, #12]
 801a08c:	693a      	ldr	r2, [r7, #16]
 801a08e:	4611      	mov	r1, r2
 801a090:	4618      	mov	r0, r3
 801a092:	f000 f927 	bl	801a2e4 <wizchip_init>
 801a096:	4603      	mov	r3, r0
 801a098:	e094      	b.n	801a1c4 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	881b      	ldrh	r3, [r3, #0]
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f000 f9ac 	bl	801a3fc <wizchip_clrinterrupt>
         break;
 801a0a4:	e08d      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 801a0a6:	f000 f9dd 	bl	801a464 <wizchip_getinterrupt>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	461a      	mov	r2, r3
 801a0ae:	683b      	ldr	r3, [r7, #0]
 801a0b0:	801a      	strh	r2, [r3, #0]
         break;
 801a0b2:	e086      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 801a0b4:	683b      	ldr	r3, [r7, #0]
 801a0b6:	881b      	ldrh	r3, [r3, #0]
 801a0b8:	4618      	mov	r0, r3
 801a0ba:	f000 f9f8 	bl	801a4ae <wizchip_setinterruptmask>
         break;         
 801a0be:	e080      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 801a0c0:	f000 fa10 	bl	801a4e4 <wizchip_getinterruptmask>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	461a      	mov	r2, r3
 801a0c8:	683b      	ldr	r3, [r7, #0]
 801a0ca:	801a      	strh	r2, [r3, #0]
         break;
 801a0cc:	e079      	b.n	801a1c2 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 801a0ce:	683b      	ldr	r3, [r7, #0]
 801a0d0:	881b      	ldrh	r3, [r3, #0]
 801a0d2:	0a1b      	lsrs	r3, r3, #8
 801a0d4:	b29b      	uxth	r3, r3
 801a0d6:	b2db      	uxtb	r3, r3
 801a0d8:	4619      	mov	r1, r3
 801a0da:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 801a0de:	f7fe fc2b 	bl	8018938 <WIZCHIP_WRITE>
 801a0e2:	683b      	ldr	r3, [r7, #0]
 801a0e4:	881b      	ldrh	r3, [r3, #0]
 801a0e6:	b2db      	uxtb	r3, r3
 801a0e8:	4619      	mov	r1, r3
 801a0ea:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801a0ee:	f7fe fc23 	bl	8018938 <WIZCHIP_WRITE>
         break;
 801a0f2:	e066      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 801a0f4:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 801a0f8:	f7fe fbd2 	bl	80188a0 <WIZCHIP_READ>
 801a0fc:	4603      	mov	r3, r0
 801a0fe:	b29b      	uxth	r3, r3
 801a100:	021b      	lsls	r3, r3, #8
 801a102:	b29c      	uxth	r4, r3
 801a104:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801a108:	f7fe fbca 	bl	80188a0 <WIZCHIP_READ>
 801a10c:	4603      	mov	r3, r0
 801a10e:	b29b      	uxth	r3, r3
 801a110:	4423      	add	r3, r4
 801a112:	b29a      	uxth	r2, r3
 801a114:	683b      	ldr	r3, [r7, #0]
 801a116:	801a      	strh	r2, [r3, #0]
         break;
 801a118:	e053      	b.n	801a1c2 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 801a11a:	4b2c      	ldr	r3, [pc, #176]	; (801a1cc <ctlwizchip+0x1c0>)
 801a11c:	789a      	ldrb	r2, [r3, #2]
 801a11e:	683b      	ldr	r3, [r7, #0]
 801a120:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 801a122:	683b      	ldr	r3, [r7, #0]
 801a124:	3301      	adds	r3, #1
 801a126:	4a29      	ldr	r2, [pc, #164]	; (801a1cc <ctlwizchip+0x1c0>)
 801a128:	78d2      	ldrb	r2, [r2, #3]
 801a12a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 801a12c:	683b      	ldr	r3, [r7, #0]
 801a12e:	3302      	adds	r3, #2
 801a130:	4a26      	ldr	r2, [pc, #152]	; (801a1cc <ctlwizchip+0x1c0>)
 801a132:	7912      	ldrb	r2, [r2, #4]
 801a134:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 801a136:	683b      	ldr	r3, [r7, #0]
 801a138:	3303      	adds	r3, #3
 801a13a:	4a24      	ldr	r2, [pc, #144]	; (801a1cc <ctlwizchip+0x1c0>)
 801a13c:	7952      	ldrb	r2, [r2, #5]
 801a13e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 801a140:	683b      	ldr	r3, [r7, #0]
 801a142:	3304      	adds	r3, #4
 801a144:	4a21      	ldr	r2, [pc, #132]	; (801a1cc <ctlwizchip+0x1c0>)
 801a146:	7992      	ldrb	r2, [r2, #6]
 801a148:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 801a14a:	683b      	ldr	r3, [r7, #0]
 801a14c:	3305      	adds	r3, #5
 801a14e:	4a1f      	ldr	r2, [pc, #124]	; (801a1cc <ctlwizchip+0x1c0>)
 801a150:	79d2      	ldrb	r2, [r2, #7]
 801a152:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 801a154:	683b      	ldr	r3, [r7, #0]
 801a156:	3306      	adds	r3, #6
 801a158:	2200      	movs	r2, #0
 801a15a:	701a      	strb	r2, [r3, #0]
         break;
 801a15c:	e031      	b.n	801a1c2 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 801a15e:	f000 fa13 	bl	801a588 <wizphy_reset>
         break;
 801a162:	e02e      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 801a164:	6838      	ldr	r0, [r7, #0]
 801a166:	f000 fa36 	bl	801a5d6 <wizphy_setphyconf>
         break;
 801a16a:	e02a      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 801a16c:	6838      	ldr	r0, [r7, #0]
 801a16e:	f000 fa75 	bl	801a65c <wizphy_getphyconf>
         break;
 801a172:	e026      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 801a174:	683b      	ldr	r3, [r7, #0]
 801a176:	781b      	ldrb	r3, [r3, #0]
 801a178:	4618      	mov	r0, r3
 801a17a:	f000 faf7 	bl	801a76c <wizphy_setphypmode>
 801a17e:	4603      	mov	r3, r0
 801a180:	e020      	b.n	801a1c4 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 801a182:	f000 f9e8 	bl	801a556 <wizphy_getphypmode>
 801a186:	4603      	mov	r3, r0
 801a188:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a18a:	7dfb      	ldrb	r3, [r7, #23]
 801a18c:	2bff      	cmp	r3, #255	; 0xff
 801a18e:	d102      	bne.n	801a196 <ctlwizchip+0x18a>
 801a190:	f04f 33ff 	mov.w	r3, #4294967295
 801a194:	e016      	b.n	801a1c4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 801a196:	683b      	ldr	r3, [r7, #0]
 801a198:	7dfa      	ldrb	r2, [r7, #23]
 801a19a:	701a      	strb	r2, [r3, #0]
         break;
 801a19c:	e011      	b.n	801a1c2 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 801a19e:	f000 f9c4 	bl	801a52a <wizphy_getphylink>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 801a1a6:	7dfb      	ldrb	r3, [r7, #23]
 801a1a8:	2bff      	cmp	r3, #255	; 0xff
 801a1aa:	d102      	bne.n	801a1b2 <ctlwizchip+0x1a6>
 801a1ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a1b0:	e008      	b.n	801a1c4 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 801a1b2:	683b      	ldr	r3, [r7, #0]
 801a1b4:	7dfa      	ldrb	r2, [r7, #23]
 801a1b6:	701a      	strb	r2, [r3, #0]
         break;
 801a1b8:	e003      	b.n	801a1c2 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 801a1ba:	f04f 33ff 	mov.w	r3, #4294967295
 801a1be:	e001      	b.n	801a1c4 <ctlwizchip+0x1b8>
         break;
 801a1c0:	bf00      	nop
   }
   return 0;
 801a1c2:	2300      	movs	r3, #0
}
 801a1c4:	4618      	mov	r0, r3
 801a1c6:	371c      	adds	r7, #28
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd90      	pop	{r4, r7, pc}
 801a1cc:	200000c4 	.word	0x200000c4

0801a1d0 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b082      	sub	sp, #8
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	4603      	mov	r3, r0
 801a1d8:	6039      	str	r1, [r7, #0]
 801a1da:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 801a1dc:	79fb      	ldrb	r3, [r7, #7]
 801a1de:	2b05      	cmp	r3, #5
 801a1e0:	d82c      	bhi.n	801a23c <ctlnetwork+0x6c>
 801a1e2:	a201      	add	r2, pc, #4	; (adr r2, 801a1e8 <ctlnetwork+0x18>)
 801a1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1e8:	0801a201 	.word	0x0801a201
 801a1ec:	0801a209 	.word	0x0801a209
 801a1f0:	0801a211 	.word	0x0801a211
 801a1f4:	0801a21f 	.word	0x0801a21f
 801a1f8:	0801a22d 	.word	0x0801a22d
 801a1fc:	0801a235 	.word	0x0801a235
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 801a200:	6838      	ldr	r0, [r7, #0]
 801a202:	f000 fafd 	bl	801a800 <wizchip_setnetinfo>
         break;
 801a206:	e01c      	b.n	801a242 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 801a208:	6838      	ldr	r0, [r7, #0]
 801a20a:	f000 fb39 	bl	801a880 <wizchip_getnetinfo>
         break;
 801a20e:	e018      	b.n	801a242 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	781b      	ldrb	r3, [r3, #0]
 801a214:	4618      	mov	r0, r3
 801a216:	f000 fb73 	bl	801a900 <wizchip_setnetmode>
 801a21a:	4603      	mov	r3, r0
 801a21c:	e012      	b.n	801a244 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 801a21e:	f000 fb91 	bl	801a944 <wizchip_getnetmode>
 801a222:	4603      	mov	r3, r0
 801a224:	461a      	mov	r2, r3
 801a226:	683b      	ldr	r3, [r7, #0]
 801a228:	701a      	strb	r2, [r3, #0]
         break;
 801a22a:	e00a      	b.n	801a242 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 801a22c:	6838      	ldr	r0, [r7, #0]
 801a22e:	f000 fb91 	bl	801a954 <wizchip_settimeout>
         break;
 801a232:	e006      	b.n	801a242 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 801a234:	6838      	ldr	r0, [r7, #0]
 801a236:	f000 fbae 	bl	801a996 <wizchip_gettimeout>
         break;
 801a23a:	e002      	b.n	801a242 <ctlnetwork+0x72>
      default:
         return -1;
 801a23c:	f04f 33ff 	mov.w	r3, #4294967295
 801a240:	e000      	b.n	801a244 <ctlnetwork+0x74>
   }
   return 0;
 801a242:	2300      	movs	r3, #0
}
 801a244:	4618      	mov	r0, r3
 801a246:	3708      	adds	r7, #8
 801a248:	46bd      	mov	sp, r7
 801a24a:	bd80      	pop	{r7, pc}

0801a24c <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 801a24c:	b580      	push	{r7, lr}
 801a24e:	b086      	sub	sp, #24
 801a250:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 801a252:	1d3b      	adds	r3, r7, #4
 801a254:	2206      	movs	r2, #6
 801a256:	4619      	mov	r1, r3
 801a258:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a25c:	f7fe fbba 	bl	80189d4 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 801a260:	f107 0314 	add.w	r3, r7, #20
 801a264:	2204      	movs	r2, #4
 801a266:	4619      	mov	r1, r3
 801a268:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a26c:	f7fe fbb2 	bl	80189d4 <WIZCHIP_READ_BUF>
 801a270:	f107 0310 	add.w	r3, r7, #16
 801a274:	2204      	movs	r2, #4
 801a276:	4619      	mov	r1, r3
 801a278:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a27c:	f7fe fbaa 	bl	80189d4 <WIZCHIP_READ_BUF>
 801a280:	f107 030c 	add.w	r3, r7, #12
 801a284:	2204      	movs	r2, #4
 801a286:	4619      	mov	r1, r3
 801a288:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a28c:	f7fe fba2 	bl	80189d4 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 801a290:	2180      	movs	r1, #128	; 0x80
 801a292:	2000      	movs	r0, #0
 801a294:	f7fe fb50 	bl	8018938 <WIZCHIP_WRITE>
   getMR(); // for delay
 801a298:	2000      	movs	r0, #0
 801a29a:	f7fe fb01 	bl	80188a0 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 801a29e:	1d3b      	adds	r3, r7, #4
 801a2a0:	2206      	movs	r2, #6
 801a2a2:	4619      	mov	r1, r3
 801a2a4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a2a8:	f7fe fbf4 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 801a2ac:	f107 0314 	add.w	r3, r7, #20
 801a2b0:	2204      	movs	r2, #4
 801a2b2:	4619      	mov	r1, r3
 801a2b4:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a2b8:	f7fe fbec 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 801a2bc:	f107 0310 	add.w	r3, r7, #16
 801a2c0:	2204      	movs	r2, #4
 801a2c2:	4619      	mov	r1, r3
 801a2c4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a2c8:	f7fe fbe4 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 801a2cc:	f107 030c 	add.w	r3, r7, #12
 801a2d0:	2204      	movs	r2, #4
 801a2d2:	4619      	mov	r1, r3
 801a2d4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a2d8:	f7fe fbdc 	bl	8018a94 <WIZCHIP_WRITE_BUF>
}
 801a2dc:	bf00      	nop
 801a2de:	3718      	adds	r7, #24
 801a2e0:	46bd      	mov	sp, r7
 801a2e2:	bd80      	pop	{r7, pc}

0801a2e4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 801a2e4:	b580      	push	{r7, lr}
 801a2e6:	b084      	sub	sp, #16
 801a2e8:	af00      	add	r7, sp, #0
 801a2ea:	6078      	str	r0, [r7, #4]
 801a2ec:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 801a2f2:	f7ff ffab 	bl	801a24c <wizchip_sw_reset>
   if(txsize)
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d03b      	beq.n	801a374 <wizchip_init+0x90>
   {
      tmp = 0;
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a300:	2300      	movs	r3, #0
 801a302:	73fb      	strb	r3, [r7, #15]
 801a304:	e015      	b.n	801a332 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 801a306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a30a:	687a      	ldr	r2, [r7, #4]
 801a30c:	4413      	add	r3, r2
 801a30e:	781a      	ldrb	r2, [r3, #0]
 801a310:	7bbb      	ldrb	r3, [r7, #14]
 801a312:	4413      	add	r3, r2
 801a314:	b2db      	uxtb	r3, r3
 801a316:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a31c:	2b10      	cmp	r3, #16
 801a31e:	dd02      	ble.n	801a326 <wizchip_init+0x42>
 801a320:	f04f 33ff 	mov.w	r3, #4294967295
 801a324:	e066      	b.n	801a3f4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a32a:	b2db      	uxtb	r3, r3
 801a32c:	3301      	adds	r3, #1
 801a32e:	b2db      	uxtb	r3, r3
 801a330:	73fb      	strb	r3, [r7, #15]
 801a332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a336:	2b07      	cmp	r3, #7
 801a338:	dde5      	ble.n	801a306 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a33a:	2300      	movs	r3, #0
 801a33c:	73fb      	strb	r3, [r7, #15]
 801a33e:	e015      	b.n	801a36c <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 801a340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a344:	009b      	lsls	r3, r3, #2
 801a346:	3301      	adds	r3, #1
 801a348:	00db      	lsls	r3, r3, #3
 801a34a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801a34e:	4618      	mov	r0, r3
 801a350:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a354:	687a      	ldr	r2, [r7, #4]
 801a356:	4413      	add	r3, r2
 801a358:	781b      	ldrb	r3, [r3, #0]
 801a35a:	4619      	mov	r1, r3
 801a35c:	f7fe faec 	bl	8018938 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a364:	b2db      	uxtb	r3, r3
 801a366:	3301      	adds	r3, #1
 801a368:	b2db      	uxtb	r3, r3
 801a36a:	73fb      	strb	r3, [r7, #15]
 801a36c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a370:	2b07      	cmp	r3, #7
 801a372:	dde5      	ble.n	801a340 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	2b00      	cmp	r3, #0
 801a378:	d03b      	beq.n	801a3f2 <wizchip_init+0x10e>
   {
      tmp = 0;
 801a37a:	2300      	movs	r3, #0
 801a37c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a37e:	2300      	movs	r3, #0
 801a380:	73fb      	strb	r3, [r7, #15]
 801a382:	e015      	b.n	801a3b0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 801a384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a388:	683a      	ldr	r2, [r7, #0]
 801a38a:	4413      	add	r3, r2
 801a38c:	781a      	ldrb	r2, [r3, #0]
 801a38e:	7bbb      	ldrb	r3, [r7, #14]
 801a390:	4413      	add	r3, r2
 801a392:	b2db      	uxtb	r3, r3
 801a394:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 801a396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a39a:	2b10      	cmp	r3, #16
 801a39c:	dd02      	ble.n	801a3a4 <wizchip_init+0xc0>
 801a39e:	f04f 33ff 	mov.w	r3, #4294967295
 801a3a2:	e027      	b.n	801a3f4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3a8:	b2db      	uxtb	r3, r3
 801a3aa:	3301      	adds	r3, #1
 801a3ac:	b2db      	uxtb	r3, r3
 801a3ae:	73fb      	strb	r3, [r7, #15]
 801a3b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3b4:	2b07      	cmp	r3, #7
 801a3b6:	dde5      	ble.n	801a384 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3b8:	2300      	movs	r3, #0
 801a3ba:	73fb      	strb	r3, [r7, #15]
 801a3bc:	e015      	b.n	801a3ea <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 801a3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3c2:	009b      	lsls	r3, r3, #2
 801a3c4:	3301      	adds	r3, #1
 801a3c6:	00db      	lsls	r3, r3, #3
 801a3c8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3d2:	683a      	ldr	r2, [r7, #0]
 801a3d4:	4413      	add	r3, r2
 801a3d6:	781b      	ldrb	r3, [r3, #0]
 801a3d8:	4619      	mov	r1, r3
 801a3da:	f7fe faad 	bl	8018938 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 801a3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3e2:	b2db      	uxtb	r3, r3
 801a3e4:	3301      	adds	r3, #1
 801a3e6:	b2db      	uxtb	r3, r3
 801a3e8:	73fb      	strb	r3, [r7, #15]
 801a3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3ee:	2b07      	cmp	r3, #7
 801a3f0:	dde5      	ble.n	801a3be <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 801a3f2:	2300      	movs	r3, #0
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	3710      	adds	r7, #16
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	bd80      	pop	{r7, pc}

0801a3fc <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b084      	sub	sp, #16
 801a400:	af00      	add	r7, sp, #0
 801a402:	4603      	mov	r3, r0
 801a404:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 801a406:	88fb      	ldrh	r3, [r7, #6]
 801a408:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 801a40a:	88fb      	ldrh	r3, [r7, #6]
 801a40c:	0a1b      	lsrs	r3, r3, #8
 801a40e:	b29b      	uxth	r3, r3
 801a410:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 801a412:	7bfb      	ldrb	r3, [r7, #15]
 801a414:	f023 030f 	bic.w	r3, r3, #15
 801a418:	b2db      	uxtb	r3, r3
 801a41a:	4619      	mov	r1, r3
 801a41c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a420:	f7fe fa8a 	bl	8018938 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 801a424:	2300      	movs	r3, #0
 801a426:	73fb      	strb	r3, [r7, #15]
 801a428:	e014      	b.n	801a454 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 801a42a:	7bba      	ldrb	r2, [r7, #14]
 801a42c:	7bfb      	ldrb	r3, [r7, #15]
 801a42e:	fa42 f303 	asr.w	r3, r2, r3
 801a432:	f003 0301 	and.w	r3, r3, #1
 801a436:	2b00      	cmp	r3, #0
 801a438:	d009      	beq.n	801a44e <wizchip_clrinterrupt+0x52>
 801a43a:	7bfb      	ldrb	r3, [r7, #15]
 801a43c:	009b      	lsls	r3, r3, #2
 801a43e:	3301      	adds	r3, #1
 801a440:	00db      	lsls	r3, r3, #3
 801a442:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801a446:	211f      	movs	r1, #31
 801a448:	4618      	mov	r0, r3
 801a44a:	f7fe fa75 	bl	8018938 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 801a44e:	7bfb      	ldrb	r3, [r7, #15]
 801a450:	3301      	adds	r3, #1
 801a452:	73fb      	strb	r3, [r7, #15]
 801a454:	7bfb      	ldrb	r3, [r7, #15]
 801a456:	2b07      	cmp	r3, #7
 801a458:	d9e7      	bls.n	801a42a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 801a45a:	bf00      	nop
 801a45c:	bf00      	nop
 801a45e:	3710      	adds	r7, #16
 801a460:	46bd      	mov	sp, r7
 801a462:	bd80      	pop	{r7, pc}

0801a464 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 801a464:	b580      	push	{r7, lr}
 801a466:	b082      	sub	sp, #8
 801a468:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 801a46a:	2300      	movs	r3, #0
 801a46c:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 801a46e:	2300      	movs	r3, #0
 801a470:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a472:	2300      	movs	r3, #0
 801a474:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 801a476:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 801a47a:	f7fe fa11 	bl	80188a0 <WIZCHIP_READ>
 801a47e:	4603      	mov	r3, r0
 801a480:	f023 030f 	bic.w	r3, r3, #15
 801a484:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 801a486:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 801a48a:	f7fe fa09 	bl	80188a0 <WIZCHIP_READ>
 801a48e:	4603      	mov	r3, r0
 801a490:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 801a492:	79bb      	ldrb	r3, [r7, #6]
 801a494:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 801a496:	88bb      	ldrh	r3, [r7, #4]
 801a498:	021b      	lsls	r3, r3, #8
 801a49a:	b29a      	uxth	r2, r3
 801a49c:	79fb      	ldrb	r3, [r7, #7]
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	4413      	add	r3, r2
 801a4a2:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a4a4:	88bb      	ldrh	r3, [r7, #4]
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3708      	adds	r7, #8
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}

0801a4ae <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 801a4ae:	b580      	push	{r7, lr}
 801a4b0:	b084      	sub	sp, #16
 801a4b2:	af00      	add	r7, sp, #0
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 801a4b8:	88fb      	ldrh	r3, [r7, #6]
 801a4ba:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 801a4bc:	88fb      	ldrh	r3, [r7, #6]
 801a4be:	0a1b      	lsrs	r3, r3, #8
 801a4c0:	b29b      	uxth	r3, r3
 801a4c2:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 801a4c4:	7bfb      	ldrb	r3, [r7, #15]
 801a4c6:	4619      	mov	r1, r3
 801a4c8:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a4cc:	f7fe fa34 	bl	8018938 <WIZCHIP_WRITE>
   setSIMR(simr);
 801a4d0:	7bbb      	ldrb	r3, [r7, #14]
 801a4d2:	4619      	mov	r1, r3
 801a4d4:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a4d8:	f7fe fa2e 	bl	8018938 <WIZCHIP_WRITE>
#endif   
}
 801a4dc:	bf00      	nop
 801a4de:	3710      	adds	r7, #16
 801a4e0:	46bd      	mov	sp, r7
 801a4e2:	bd80      	pop	{r7, pc}

0801a4e4 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 801a4e4:	b580      	push	{r7, lr}
 801a4e6:	b082      	sub	sp, #8
 801a4e8:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 801a4ee:	2300      	movs	r3, #0
 801a4f0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 801a4f2:	2300      	movs	r3, #0
 801a4f4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 801a4f6:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 801a4fa:	f7fe f9d1 	bl	80188a0 <WIZCHIP_READ>
 801a4fe:	4603      	mov	r3, r0
 801a500:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 801a502:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 801a506:	f7fe f9cb 	bl	80188a0 <WIZCHIP_READ>
 801a50a:	4603      	mov	r3, r0
 801a50c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 801a50e:	79bb      	ldrb	r3, [r7, #6]
 801a510:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 801a512:	88bb      	ldrh	r3, [r7, #4]
 801a514:	021b      	lsls	r3, r3, #8
 801a516:	b29a      	uxth	r2, r3
 801a518:	79fb      	ldrb	r3, [r7, #7]
 801a51a:	b29b      	uxth	r3, r3
 801a51c:	4413      	add	r3, r2
 801a51e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 801a520:	88bb      	ldrh	r3, [r7, #4]
}
 801a522:	4618      	mov	r0, r3
 801a524:	3708      	adds	r7, #8
 801a526:	46bd      	mov	sp, r7
 801a528:	bd80      	pop	{r7, pc}

0801a52a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 801a52a:	b580      	push	{r7, lr}
 801a52c:	b082      	sub	sp, #8
 801a52e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 801a530:	2300      	movs	r3, #0
 801a532:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 801a534:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a538:	f7fe f9b2 	bl	80188a0 <WIZCHIP_READ>
 801a53c:	4603      	mov	r3, r0
 801a53e:	f003 0301 	and.w	r3, r3, #1
 801a542:	2b00      	cmp	r3, #0
 801a544:	d001      	beq.n	801a54a <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 801a546:	2301      	movs	r3, #1
 801a548:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 801a54a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a54e:	4618      	mov	r0, r3
 801a550:	3708      	adds	r7, #8
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}

0801a556 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 801a556:	b580      	push	{r7, lr}
 801a558:	b082      	sub	sp, #8
 801a55a:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 801a55c:	2300      	movs	r3, #0
 801a55e:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 801a560:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a564:	f7fe f99c 	bl	80188a0 <WIZCHIP_READ>
 801a568:	4603      	mov	r3, r0
 801a56a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a56e:	2b30      	cmp	r3, #48	; 0x30
 801a570:	d102      	bne.n	801a578 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 801a572:	2301      	movs	r3, #1
 801a574:	71fb      	strb	r3, [r7, #7]
 801a576:	e001      	b.n	801a57c <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 801a578:	2300      	movs	r3, #0
 801a57a:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 801a57c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a580:	4618      	mov	r0, r3
 801a582:	3708      	adds	r7, #8
 801a584:	46bd      	mov	sp, r7
 801a586:	bd80      	pop	{r7, pc}

0801a588 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b082      	sub	sp, #8
 801a58c:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 801a58e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a592:	f7fe f985 	bl	80188a0 <WIZCHIP_READ>
 801a596:	4603      	mov	r3, r0
 801a598:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 801a59a:	79fb      	ldrb	r3, [r7, #7]
 801a59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a5a0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a5a2:	79fb      	ldrb	r3, [r7, #7]
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5aa:	f7fe f9c5 	bl	8018938 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 801a5ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5b2:	f7fe f975 	bl	80188a0 <WIZCHIP_READ>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 801a5ba:	79fb      	ldrb	r3, [r7, #7]
 801a5bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a5c0:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 801a5c2:	79fb      	ldrb	r3, [r7, #7]
 801a5c4:	4619      	mov	r1, r3
 801a5c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a5ca:	f7fe f9b5 	bl	8018938 <WIZCHIP_WRITE>
}
 801a5ce:	bf00      	nop
 801a5d0:	3708      	adds	r7, #8
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd80      	pop	{r7, pc}

0801a5d6 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 801a5d6:	b580      	push	{r7, lr}
 801a5d8:	b084      	sub	sp, #16
 801a5da:	af00      	add	r7, sp, #0
 801a5dc:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a5de:	2300      	movs	r3, #0
 801a5e0:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	781b      	ldrb	r3, [r3, #0]
 801a5e6:	2b01      	cmp	r3, #1
 801a5e8:	d104      	bne.n	801a5f4 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 801a5ea:	7bfb      	ldrb	r3, [r7, #15]
 801a5ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a5f0:	73fb      	strb	r3, [r7, #15]
 801a5f2:	e003      	b.n	801a5fc <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 801a5f4:	7bfb      	ldrb	r3, [r7, #15]
 801a5f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801a5fa:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	785b      	ldrb	r3, [r3, #1]
 801a600:	2b01      	cmp	r3, #1
 801a602:	d104      	bne.n	801a60e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a604:	7bfb      	ldrb	r3, [r7, #15]
 801a606:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a60a:	73fb      	strb	r3, [r7, #15]
 801a60c:	e019      	b.n	801a642 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	78db      	ldrb	r3, [r3, #3]
 801a612:	2b01      	cmp	r3, #1
 801a614:	d10d      	bne.n	801a632 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	789b      	ldrb	r3, [r3, #2]
 801a61a:	2b01      	cmp	r3, #1
 801a61c:	d104      	bne.n	801a628 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 801a61e:	7bfb      	ldrb	r3, [r7, #15]
 801a620:	f043 0318 	orr.w	r3, r3, #24
 801a624:	73fb      	strb	r3, [r7, #15]
 801a626:	e00c      	b.n	801a642 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 801a628:	7bfb      	ldrb	r3, [r7, #15]
 801a62a:	f043 0308 	orr.w	r3, r3, #8
 801a62e:	73fb      	strb	r3, [r7, #15]
 801a630:	e007      	b.n	801a642 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	789b      	ldrb	r3, [r3, #2]
 801a636:	2b01      	cmp	r3, #1
 801a638:	d103      	bne.n	801a642 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 801a63a:	7bfb      	ldrb	r3, [r7, #15]
 801a63c:	f043 0310 	orr.w	r3, r3, #16
 801a640:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 801a642:	7bfb      	ldrb	r3, [r7, #15]
 801a644:	4619      	mov	r1, r3
 801a646:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a64a:	f7fe f975 	bl	8018938 <WIZCHIP_WRITE>
   wizphy_reset();
 801a64e:	f7ff ff9b 	bl	801a588 <wizphy_reset>
}
 801a652:	bf00      	nop
 801a654:	3710      	adds	r7, #16
 801a656:	46bd      	mov	sp, r7
 801a658:	bd80      	pop	{r7, pc}
	...

0801a65c <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b084      	sub	sp, #16
 801a660:	af00      	add	r7, sp, #0
 801a662:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 801a664:	2300      	movs	r3, #0
 801a666:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a668:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a66c:	f7fe f918 	bl	80188a0 <WIZCHIP_READ>
 801a670:	4603      	mov	r3, r0
 801a672:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 801a674:	7bfb      	ldrb	r3, [r7, #15]
 801a676:	119b      	asrs	r3, r3, #6
 801a678:	b2db      	uxtb	r3, r3
 801a67a:	f003 0301 	and.w	r3, r3, #1
 801a67e:	b2da      	uxtb	r2, r3
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a684:	7bfb      	ldrb	r3, [r7, #15]
 801a686:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a68a:	2b20      	cmp	r3, #32
 801a68c:	d001      	beq.n	801a692 <wizphy_getphyconf+0x36>
 801a68e:	2b38      	cmp	r3, #56	; 0x38
 801a690:	d103      	bne.n	801a69a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	2201      	movs	r2, #1
 801a696:	705a      	strb	r2, [r3, #1]
         break;
 801a698:	e003      	b.n	801a6a2 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	2200      	movs	r2, #0
 801a69e:	705a      	strb	r2, [r3, #1]
         break;
 801a6a0:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a6a2:	7bfb      	ldrb	r3, [r7, #15]
 801a6a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a6a8:	3b10      	subs	r3, #16
 801a6aa:	2b10      	cmp	r3, #16
 801a6ac:	bf8c      	ite	hi
 801a6ae:	2201      	movhi	r2, #1
 801a6b0:	2200      	movls	r2, #0
 801a6b2:	b2d2      	uxtb	r2, r2
 801a6b4:	2a00      	cmp	r2, #0
 801a6b6:	d10f      	bne.n	801a6d8 <wizphy_getphyconf+0x7c>
 801a6b8:	4a1b      	ldr	r2, [pc, #108]	; (801a728 <wizphy_getphyconf+0xcc>)
 801a6ba:	fa22 f303 	lsr.w	r3, r2, r3
 801a6be:	f003 0301 	and.w	r3, r3, #1
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	bf14      	ite	ne
 801a6c6:	2301      	movne	r3, #1
 801a6c8:	2300      	moveq	r3, #0
 801a6ca:	b2db      	uxtb	r3, r3
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d003      	beq.n	801a6d8 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	2201      	movs	r2, #1
 801a6d4:	709a      	strb	r2, [r3, #2]
         break;
 801a6d6:	e003      	b.n	801a6e0 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	2200      	movs	r2, #0
 801a6dc:	709a      	strb	r2, [r3, #2]
         break;
 801a6de:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 801a6e0:	7bfb      	ldrb	r3, [r7, #15]
 801a6e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a6e6:	3b08      	subs	r3, #8
 801a6e8:	2b18      	cmp	r3, #24
 801a6ea:	bf8c      	ite	hi
 801a6ec:	2201      	movhi	r2, #1
 801a6ee:	2200      	movls	r2, #0
 801a6f0:	b2d2      	uxtb	r2, r2
 801a6f2:	2a00      	cmp	r2, #0
 801a6f4:	d10f      	bne.n	801a716 <wizphy_getphyconf+0xba>
 801a6f6:	4a0d      	ldr	r2, [pc, #52]	; (801a72c <wizphy_getphyconf+0xd0>)
 801a6f8:	fa22 f303 	lsr.w	r3, r2, r3
 801a6fc:	f003 0301 	and.w	r3, r3, #1
 801a700:	2b00      	cmp	r3, #0
 801a702:	bf14      	ite	ne
 801a704:	2301      	movne	r3, #1
 801a706:	2300      	moveq	r3, #0
 801a708:	b2db      	uxtb	r3, r3
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d003      	beq.n	801a716 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	2201      	movs	r2, #1
 801a712:	70da      	strb	r2, [r3, #3]
         break;
 801a714:	e003      	b.n	801a71e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	2200      	movs	r2, #0
 801a71a:	70da      	strb	r2, [r3, #3]
         break;
 801a71c:	bf00      	nop
   }
}
 801a71e:	bf00      	nop
 801a720:	3710      	adds	r7, #16
 801a722:	46bd      	mov	sp, r7
 801a724:	bd80      	pop	{r7, pc}
 801a726:	bf00      	nop
 801a728:	00010101 	.word	0x00010101
 801a72c:	01010001 	.word	0x01010001

0801a730 <wizphy_getphystat>:

void wizphy_getphystat(wiz_PhyConf* phyconf)
{
 801a730:	b580      	push	{r7, lr}
 801a732:	b084      	sub	sp, #16
 801a734:	af00      	add	r7, sp, #0
 801a736:	6078      	str	r0, [r7, #4]
   uint8_t tmp = getPHYCFGR();
 801a738:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a73c:	f7fe f8b0 	bl	80188a0 <WIZCHIP_READ>
 801a740:	4603      	mov	r3, r0
 801a742:	73fb      	strb	r3, [r7, #15]
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
 801a744:	7bfb      	ldrb	r3, [r7, #15]
 801a746:	109b      	asrs	r3, r3, #2
 801a748:	b2db      	uxtb	r3, r3
 801a74a:	f003 0301 	and.w	r3, r3, #1
 801a74e:	b2da      	uxtb	r2, r3
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	70da      	strb	r2, [r3, #3]
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
 801a754:	7bfb      	ldrb	r3, [r7, #15]
 801a756:	105b      	asrs	r3, r3, #1
 801a758:	b2db      	uxtb	r3, r3
 801a75a:	f003 0301 	and.w	r3, r3, #1
 801a75e:	b2da      	uxtb	r2, r3
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	709a      	strb	r2, [r3, #2]
}
 801a764:	bf00      	nop
 801a766:	3710      	adds	r7, #16
 801a768:	46bd      	mov	sp, r7
 801a76a:	bd80      	pop	{r7, pc}

0801a76c <wizphy_setphypmode>:

int8_t wizphy_setphypmode(uint8_t pmode)
{
 801a76c:	b580      	push	{r7, lr}
 801a76e:	b084      	sub	sp, #16
 801a770:	af00      	add	r7, sp, #0
 801a772:	4603      	mov	r3, r0
 801a774:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a776:	2300      	movs	r3, #0
 801a778:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 801a77a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a77e:	f7fe f88f 	bl	80188a0 <WIZCHIP_READ>
 801a782:	4603      	mov	r3, r0
 801a784:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 801a786:	7bfb      	ldrb	r3, [r7, #15]
 801a788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d102      	bne.n	801a796 <wizphy_setphypmode+0x2a>
 801a790:	f04f 33ff 	mov.w	r3, #4294967295
 801a794:	e030      	b.n	801a7f8 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 801a796:	7bfb      	ldrb	r3, [r7, #15]
 801a798:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 801a79c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a79e:	79fb      	ldrb	r3, [r7, #7]
 801a7a0:	2b01      	cmp	r3, #1
 801a7a2:	d104      	bne.n	801a7ae <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 801a7a4:	7bfb      	ldrb	r3, [r7, #15]
 801a7a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801a7aa:	73fb      	strb	r3, [r7, #15]
 801a7ac:	e003      	b.n	801a7b6 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 801a7ae:	7bfb      	ldrb	r3, [r7, #15]
 801a7b0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 801a7b4:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 801a7b6:	7bfb      	ldrb	r3, [r7, #15]
 801a7b8:	4619      	mov	r1, r3
 801a7ba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a7be:	f7fe f8bb 	bl	8018938 <WIZCHIP_WRITE>
   wizphy_reset();
 801a7c2:	f7ff fee1 	bl	801a588 <wizphy_reset>
   tmp = getPHYCFGR();
 801a7c6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 801a7ca:	f7fe f869 	bl	80188a0 <WIZCHIP_READ>
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 801a7d2:	79fb      	ldrb	r3, [r7, #7]
 801a7d4:	2b01      	cmp	r3, #1
 801a7d6:	d106      	bne.n	801a7e6 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 801a7d8:	7bfb      	ldrb	r3, [r7, #15]
 801a7da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d008      	beq.n	801a7f4 <wizphy_setphypmode+0x88>
 801a7e2:	2300      	movs	r3, #0
 801a7e4:	e008      	b.n	801a7f8 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 801a7e6:	7bfb      	ldrb	r3, [r7, #15]
 801a7e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a7ec:	2b00      	cmp	r3, #0
 801a7ee:	d001      	beq.n	801a7f4 <wizphy_setphypmode+0x88>
 801a7f0:	2300      	movs	r3, #0
 801a7f2:	e001      	b.n	801a7f8 <wizphy_setphypmode+0x8c>
   }
   return -1;
 801a7f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	3710      	adds	r7, #16
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bd80      	pop	{r7, pc}

0801a800 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b082      	sub	sp, #8
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	2206      	movs	r2, #6
 801a80c:	4619      	mov	r1, r3
 801a80e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a812:	f7fe f93f 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	330e      	adds	r3, #14
 801a81a:	2204      	movs	r2, #4
 801a81c:	4619      	mov	r1, r3
 801a81e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a822:	f7fe f937 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	330a      	adds	r3, #10
 801a82a:	2204      	movs	r2, #4
 801a82c:	4619      	mov	r1, r3
 801a82e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a832:	f7fe f92f 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	3306      	adds	r3, #6
 801a83a:	2204      	movs	r2, #4
 801a83c:	4619      	mov	r1, r3
 801a83e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a842:	f7fe f927 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	7c9a      	ldrb	r2, [r3, #18]
 801a84a:	4b0b      	ldr	r3, [pc, #44]	; (801a878 <wizchip_setnetinfo+0x78>)
 801a84c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	7cda      	ldrb	r2, [r3, #19]
 801a852:	4b09      	ldr	r3, [pc, #36]	; (801a878 <wizchip_setnetinfo+0x78>)
 801a854:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	7d1a      	ldrb	r2, [r3, #20]
 801a85a:	4b07      	ldr	r3, [pc, #28]	; (801a878 <wizchip_setnetinfo+0x78>)
 801a85c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	7d5a      	ldrb	r2, [r3, #21]
 801a862:	4b05      	ldr	r3, [pc, #20]	; (801a878 <wizchip_setnetinfo+0x78>)
 801a864:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	7d9a      	ldrb	r2, [r3, #22]
 801a86a:	4b04      	ldr	r3, [pc, #16]	; (801a87c <wizchip_setnetinfo+0x7c>)
 801a86c:	701a      	strb	r2, [r3, #0]
}
 801a86e:	bf00      	nop
 801a870:	3708      	adds	r7, #8
 801a872:	46bd      	mov	sp, r7
 801a874:	bd80      	pop	{r7, pc}
 801a876:	bf00      	nop
 801a878:	200009a0 	.word	0x200009a0
 801a87c:	200009a4 	.word	0x200009a4

0801a880 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b082      	sub	sp, #8
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2206      	movs	r2, #6
 801a88c:	4619      	mov	r1, r3
 801a88e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801a892:	f7fe f89f 	bl	80189d4 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	330e      	adds	r3, #14
 801a89a:	2204      	movs	r2, #4
 801a89c:	4619      	mov	r1, r3
 801a89e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801a8a2:	f7fe f897 	bl	80189d4 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	330a      	adds	r3, #10
 801a8aa:	2204      	movs	r2, #4
 801a8ac:	4619      	mov	r1, r3
 801a8ae:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a8b2:	f7fe f88f 	bl	80189d4 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	3306      	adds	r3, #6
 801a8ba:	2204      	movs	r2, #4
 801a8bc:	4619      	mov	r1, r3
 801a8be:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a8c2:	f7fe f887 	bl	80189d4 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 801a8c6:	4b0c      	ldr	r3, [pc, #48]	; (801a8f8 <wizchip_getnetinfo+0x78>)
 801a8c8:	781a      	ldrb	r2, [r3, #0]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 801a8ce:	4b0a      	ldr	r3, [pc, #40]	; (801a8f8 <wizchip_getnetinfo+0x78>)
 801a8d0:	785a      	ldrb	r2, [r3, #1]
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 801a8d6:	4b08      	ldr	r3, [pc, #32]	; (801a8f8 <wizchip_getnetinfo+0x78>)
 801a8d8:	789a      	ldrb	r2, [r3, #2]
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 801a8de:	4b06      	ldr	r3, [pc, #24]	; (801a8f8 <wizchip_getnetinfo+0x78>)
 801a8e0:	78da      	ldrb	r2, [r3, #3]
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 801a8e6:	4b05      	ldr	r3, [pc, #20]	; (801a8fc <wizchip_getnetinfo+0x7c>)
 801a8e8:	781a      	ldrb	r2, [r3, #0]
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	759a      	strb	r2, [r3, #22]
}
 801a8ee:	bf00      	nop
 801a8f0:	3708      	adds	r7, #8
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}
 801a8f6:	bf00      	nop
 801a8f8:	200009a0 	.word	0x200009a0
 801a8fc:	200009a4 	.word	0x200009a4

0801a900 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b084      	sub	sp, #16
 801a904:	af00      	add	r7, sp, #0
 801a906:	4603      	mov	r3, r0
 801a908:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 801a90a:	2300      	movs	r3, #0
 801a90c:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 801a90e:	79fb      	ldrb	r3, [r7, #7]
 801a910:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 801a914:	2b00      	cmp	r3, #0
 801a916:	d002      	beq.n	801a91e <wizchip_setnetmode+0x1e>
 801a918:	f04f 33ff 	mov.w	r3, #4294967295
 801a91c:	e00e      	b.n	801a93c <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 801a91e:	2000      	movs	r0, #0
 801a920:	f7fd ffbe 	bl	80188a0 <WIZCHIP_READ>
 801a924:	4603      	mov	r3, r0
 801a926:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 801a928:	7bfa      	ldrb	r2, [r7, #15]
 801a92a:	79fb      	ldrb	r3, [r7, #7]
 801a92c:	4313      	orrs	r3, r2
 801a92e:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 801a930:	7bfb      	ldrb	r3, [r7, #15]
 801a932:	4619      	mov	r1, r3
 801a934:	2000      	movs	r0, #0
 801a936:	f7fd ffff 	bl	8018938 <WIZCHIP_WRITE>
   return 0;
 801a93a:	2300      	movs	r3, #0
}
 801a93c:	4618      	mov	r0, r3
 801a93e:	3710      	adds	r7, #16
 801a940:	46bd      	mov	sp, r7
 801a942:	bd80      	pop	{r7, pc}

0801a944 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 801a944:	b580      	push	{r7, lr}
 801a946:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 801a948:	2000      	movs	r0, #0
 801a94a:	f7fd ffa9 	bl	80188a0 <WIZCHIP_READ>
 801a94e:	4603      	mov	r3, r0
}
 801a950:	4618      	mov	r0, r3
 801a952:	bd80      	pop	{r7, pc}

0801a954 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b082      	sub	sp, #8
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	781b      	ldrb	r3, [r3, #0]
 801a960:	4619      	mov	r1, r3
 801a962:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a966:	f7fd ffe7 	bl	8018938 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	885b      	ldrh	r3, [r3, #2]
 801a96e:	0a1b      	lsrs	r3, r3, #8
 801a970:	b29b      	uxth	r3, r3
 801a972:	b2db      	uxtb	r3, r3
 801a974:	4619      	mov	r1, r3
 801a976:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a97a:	f7fd ffdd 	bl	8018938 <WIZCHIP_WRITE>
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	885b      	ldrh	r3, [r3, #2]
 801a982:	b2db      	uxtb	r3, r3
 801a984:	4619      	mov	r1, r3
 801a986:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a98a:	f7fd ffd5 	bl	8018938 <WIZCHIP_WRITE>
}
 801a98e:	bf00      	nop
 801a990:	3708      	adds	r7, #8
 801a992:	46bd      	mov	sp, r7
 801a994:	bd80      	pop	{r7, pc}

0801a996 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 801a996:	b590      	push	{r4, r7, lr}
 801a998:	b083      	sub	sp, #12
 801a99a:	af00      	add	r7, sp, #0
 801a99c:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 801a99e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801a9a2:	f7fd ff7d 	bl	80188a0 <WIZCHIP_READ>
 801a9a6:	4603      	mov	r3, r0
 801a9a8:	461a      	mov	r2, r3
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 801a9ae:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 801a9b2:	f7fd ff75 	bl	80188a0 <WIZCHIP_READ>
 801a9b6:	4603      	mov	r3, r0
 801a9b8:	b29b      	uxth	r3, r3
 801a9ba:	021b      	lsls	r3, r3, #8
 801a9bc:	b29c      	uxth	r4, r3
 801a9be:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801a9c2:	f7fd ff6d 	bl	80188a0 <WIZCHIP_READ>
 801a9c6:	4603      	mov	r3, r0
 801a9c8:	b29b      	uxth	r3, r3
 801a9ca:	4423      	add	r3, r4
 801a9cc:	b29a      	uxth	r2, r3
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	805a      	strh	r2, [r3, #2]
}
 801a9d2:	bf00      	nop
 801a9d4:	370c      	adds	r7, #12
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd90      	pop	{r4, r7, pc}
	...

0801a9dc <default_ip_assign>:
	if (delay_func) delay = delay_func;
}

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 801a9e0:	2204      	movs	r2, #4
 801a9e2:	4909      	ldr	r1, [pc, #36]	; (801aa08 <default_ip_assign+0x2c>)
 801a9e4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801a9e8:	f7fe f854 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 801a9ec:	2204      	movs	r2, #4
 801a9ee:	4907      	ldr	r1, [pc, #28]	; (801aa0c <default_ip_assign+0x30>)
 801a9f0:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 801a9f4:	f7fe f84e 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 801a9f8:	2204      	movs	r2, #4
 801a9fa:	4905      	ldr	r1, [pc, #20]	; (801aa10 <default_ip_assign+0x34>)
 801a9fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 801aa00:	f7fe f848 	bl	8018a94 <WIZCHIP_WRITE_BUF>
}
 801aa04:	bf00      	nop
 801aa06:	bd80      	pop	{r7, pc}
 801aa08:	200009b4 	.word	0x200009b4
 801aa0c:	200009bc 	.word	0x200009bc
 801aa10:	200009b8 	.word	0x200009b8

0801aa14 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 801aa14:	b580      	push	{r7, lr}
 801aa16:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 801aa18:	2180      	movs	r1, #128	; 0x80
 801aa1a:	2000      	movs	r0, #0
 801aa1c:	f7fd ff8c 	bl	8018938 <WIZCHIP_WRITE>
   getMR(); // for delay
 801aa20:	2000      	movs	r0, #0
 801aa22:	f7fd ff3d 	bl	80188a0 <WIZCHIP_READ>
   default_ip_assign();
 801aa26:	f7ff ffd9 	bl	801a9dc <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 801aa2a:	2206      	movs	r2, #6
 801aa2c:	4903      	ldr	r1, [pc, #12]	; (801aa3c <default_ip_update+0x28>)
 801aa2e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801aa32:	f7fe f82f 	bl	8018a94 <WIZCHIP_WRITE_BUF>
}
 801aa36:	bf00      	nop
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	bf00      	nop
 801aa3c:	200009d4 	.word	0x200009d4

0801aa40 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 801aa40:	b580      	push	{r7, lr}
 801aa42:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 801aa44:	2180      	movs	r1, #128	; 0x80
 801aa46:	2000      	movs	r0, #0
 801aa48:	f7fd ff76 	bl	8018938 <WIZCHIP_WRITE>
	getMR(); // for delay
 801aa4c:	2000      	movs	r0, #0
 801aa4e:	f7fd ff27 	bl	80188a0 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 801aa52:	2206      	movs	r2, #6
 801aa54:	4903      	ldr	r1, [pc, #12]	; (801aa64 <default_ip_conflict+0x24>)
 801aa56:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801aa5a:	f7fe f81b 	bl	8018a94 <WIZCHIP_WRITE_BUF>
}
 801aa5e:	bf00      	nop
 801aa60:	bd80      	pop	{r7, pc}
 801aa62:	bf00      	nop
 801aa64:	200009d4 	.word	0x200009d4

0801aa68 <default_delay>:

void default_delay(uint32_t time){}
 801aa68:	b480      	push	{r7}
 801aa6a:	b083      	sub	sp, #12
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
 801aa70:	bf00      	nop
 801aa72:	370c      	adds	r7, #12
 801aa74:	46bd      	mov	sp, r7
 801aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7a:	4770      	bx	lr

0801aa7c <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 801aa7c:	b480      	push	{r7}
 801aa7e:	b085      	sub	sp, #20
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	60f8      	str	r0, [r7, #12]
 801aa84:	60b9      	str	r1, [r7, #8]
 801aa86:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 801aa88:	4b10      	ldr	r3, [pc, #64]	; (801aacc <reg_dhcp_cbfunc+0x50>)
 801aa8a:	4a11      	ldr	r2, [pc, #68]	; (801aad0 <reg_dhcp_cbfunc+0x54>)
 801aa8c:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 801aa8e:	4b11      	ldr	r3, [pc, #68]	; (801aad4 <reg_dhcp_cbfunc+0x58>)
 801aa90:	4a11      	ldr	r2, [pc, #68]	; (801aad8 <reg_dhcp_cbfunc+0x5c>)
 801aa92:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 801aa94:	4b11      	ldr	r3, [pc, #68]	; (801aadc <reg_dhcp_cbfunc+0x60>)
 801aa96:	4a12      	ldr	r2, [pc, #72]	; (801aae0 <reg_dhcp_cbfunc+0x64>)
 801aa98:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d002      	beq.n	801aaa6 <reg_dhcp_cbfunc+0x2a>
 801aaa0:	4a0a      	ldr	r2, [pc, #40]	; (801aacc <reg_dhcp_cbfunc+0x50>)
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 801aaa6:	68bb      	ldr	r3, [r7, #8]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d002      	beq.n	801aab2 <reg_dhcp_cbfunc+0x36>
 801aaac:	4a09      	ldr	r2, [pc, #36]	; (801aad4 <reg_dhcp_cbfunc+0x58>)
 801aaae:	68bb      	ldr	r3, [r7, #8]
 801aab0:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d002      	beq.n	801aabe <reg_dhcp_cbfunc+0x42>
 801aab8:	4a08      	ldr	r2, [pc, #32]	; (801aadc <reg_dhcp_cbfunc+0x60>)
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	6013      	str	r3, [r2, #0]
}
 801aabe:	bf00      	nop
 801aac0:	3714      	adds	r7, #20
 801aac2:	46bd      	mov	sp, r7
 801aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac8:	4770      	bx	lr
 801aaca:	bf00      	nop
 801aacc:	20000104 	.word	0x20000104
 801aad0:	0801a9dd 	.word	0x0801a9dd
 801aad4:	20000108 	.word	0x20000108
 801aad8:	0801aa15 	.word	0x0801aa15
 801aadc:	2000010c 	.word	0x2000010c
 801aae0:	0801aa41 	.word	0x0801aa41

0801aae4 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b084      	sub	sp, #16
 801aae8:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 801aaea:	463b      	mov	r3, r7
 801aaec:	2206      	movs	r2, #6
 801aaee:	4619      	mov	r1, r3
 801aaf0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801aaf4:	f7fd ff6e 	bl	80189d4 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 801aaf8:	4b72      	ldr	r3, [pc, #456]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	2201      	movs	r2, #1
 801aafe:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 801ab00:	4b70      	ldr	r3, [pc, #448]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	2201      	movs	r2, #1
 801ab06:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 801ab08:	4b6e      	ldr	r3, [pc, #440]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	2206      	movs	r2, #6
 801ab0e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 801ab10:	4b6c      	ldr	r3, [pc, #432]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	2200      	movs	r2, #0
 801ab16:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 801ab18:	4b6a      	ldr	r3, [pc, #424]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	3304      	adds	r3, #4
 801ab1e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 801ab20:	4b69      	ldr	r3, [pc, #420]	; (801acc8 <makeDHCPMSG+0x1e4>)
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	0e1b      	lsrs	r3, r3, #24
 801ab26:	b2da      	uxtb	r2, r3
 801ab28:	68bb      	ldr	r3, [r7, #8]
 801ab2a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 801ab2c:	4b66      	ldr	r3, [pc, #408]	; (801acc8 <makeDHCPMSG+0x1e4>)
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	0c1a      	lsrs	r2, r3, #16
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	3301      	adds	r3, #1
 801ab36:	b2d2      	uxtb	r2, r2
 801ab38:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 801ab3a:	4b63      	ldr	r3, [pc, #396]	; (801acc8 <makeDHCPMSG+0x1e4>)
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	0a1a      	lsrs	r2, r3, #8
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	3302      	adds	r3, #2
 801ab44:	b2d2      	uxtb	r2, r2
 801ab46:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 801ab48:	4b5f      	ldr	r3, [pc, #380]	; (801acc8 <makeDHCPMSG+0x1e4>)
 801ab4a:	681a      	ldr	r2, [r3, #0]
 801ab4c:	68bb      	ldr	r3, [r7, #8]
 801ab4e:	3303      	adds	r3, #3
 801ab50:	b2d2      	uxtb	r2, r2
 801ab52:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 801ab54:	4b5b      	ldr	r3, [pc, #364]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	2200      	movs	r2, #0
 801ab5a:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 801ab5c:	4b59      	ldr	r3, [pc, #356]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	330a      	adds	r3, #10
 801ab62:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 801ab64:	68bb      	ldr	r3, [r7, #8]
 801ab66:	2280      	movs	r2, #128	; 0x80
 801ab68:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 801ab6a:	68bb      	ldr	r3, [r7, #8]
 801ab6c:	3301      	adds	r3, #1
 801ab6e:	2200      	movs	r2, #0
 801ab70:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 801ab72:	4b54      	ldr	r3, [pc, #336]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	2200      	movs	r2, #0
 801ab78:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 801ab7a:	4b52      	ldr	r3, [pc, #328]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	2200      	movs	r2, #0
 801ab80:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 801ab82:	4b50      	ldr	r3, [pc, #320]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	2200      	movs	r2, #0
 801ab88:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 801ab8a:	4b4e      	ldr	r3, [pc, #312]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	2200      	movs	r2, #0
 801ab90:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 801ab92:	4b4c      	ldr	r3, [pc, #304]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	2200      	movs	r2, #0
 801ab98:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 801ab9a:	4b4a      	ldr	r3, [pc, #296]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	2200      	movs	r2, #0
 801aba0:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 801aba2:	4b48      	ldr	r3, [pc, #288]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	2200      	movs	r2, #0
 801aba8:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 801abaa:	4b46      	ldr	r3, [pc, #280]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	2200      	movs	r2, #0
 801abb0:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 801abb2:	4b44      	ldr	r3, [pc, #272]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	2200      	movs	r2, #0
 801abb8:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 801abba:	4b42      	ldr	r3, [pc, #264]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	2200      	movs	r2, #0
 801abc0:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 801abc2:	4b40      	ldr	r3, [pc, #256]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	2200      	movs	r2, #0
 801abc8:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 801abca:	4b3e      	ldr	r3, [pc, #248]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	2200      	movs	r2, #0
 801abd0:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 801abd2:	4b3c      	ldr	r3, [pc, #240]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	2200      	movs	r2, #0
 801abd8:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 801abda:	4b3a      	ldr	r3, [pc, #232]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	2200      	movs	r2, #0
 801abe0:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 801abe2:	4b38      	ldr	r3, [pc, #224]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	2200      	movs	r2, #0
 801abe8:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 801abea:	4b36      	ldr	r3, [pc, #216]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	2200      	movs	r2, #0
 801abf0:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 801abf2:	4b34      	ldr	r3, [pc, #208]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	4a35      	ldr	r2, [pc, #212]	; (801accc <makeDHCPMSG+0x1e8>)
 801abf8:	7812      	ldrb	r2, [r2, #0]
 801abfa:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 801abfc:	4b31      	ldr	r3, [pc, #196]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	4a32      	ldr	r2, [pc, #200]	; (801accc <makeDHCPMSG+0x1e8>)
 801ac02:	7852      	ldrb	r2, [r2, #1]
 801ac04:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 801ac06:	4b2f      	ldr	r3, [pc, #188]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	4a30      	ldr	r2, [pc, #192]	; (801accc <makeDHCPMSG+0x1e8>)
 801ac0c:	7892      	ldrb	r2, [r2, #2]
 801ac0e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 801ac10:	4b2c      	ldr	r3, [pc, #176]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	4a2d      	ldr	r2, [pc, #180]	; (801accc <makeDHCPMSG+0x1e8>)
 801ac16:	78d2      	ldrb	r2, [r2, #3]
 801ac18:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 801ac1a:	4b2a      	ldr	r3, [pc, #168]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	4a2b      	ldr	r2, [pc, #172]	; (801accc <makeDHCPMSG+0x1e8>)
 801ac20:	7912      	ldrb	r2, [r2, #4]
 801ac22:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 801ac26:	4b27      	ldr	r3, [pc, #156]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	4a28      	ldr	r2, [pc, #160]	; (801accc <makeDHCPMSG+0x1e8>)
 801ac2c:	7952      	ldrb	r2, [r2, #5]
 801ac2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 801ac32:	2306      	movs	r3, #6
 801ac34:	73fb      	strb	r3, [r7, #15]
 801ac36:	e008      	b.n	801ac4a <makeDHCPMSG+0x166>
 801ac38:	4b22      	ldr	r3, [pc, #136]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac3a:	681a      	ldr	r2, [r3, #0]
 801ac3c:	7bfb      	ldrb	r3, [r7, #15]
 801ac3e:	4413      	add	r3, r2
 801ac40:	2200      	movs	r2, #0
 801ac42:	771a      	strb	r2, [r3, #28]
 801ac44:	7bfb      	ldrb	r3, [r7, #15]
 801ac46:	3301      	adds	r3, #1
 801ac48:	73fb      	strb	r3, [r7, #15]
 801ac4a:	7bfb      	ldrb	r3, [r7, #15]
 801ac4c:	2b0f      	cmp	r3, #15
 801ac4e:	d9f3      	bls.n	801ac38 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 801ac50:	2300      	movs	r3, #0
 801ac52:	73fb      	strb	r3, [r7, #15]
 801ac54:	e009      	b.n	801ac6a <makeDHCPMSG+0x186>
 801ac56:	4b1b      	ldr	r3, [pc, #108]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac58:	681a      	ldr	r2, [r3, #0]
 801ac5a:	7bfb      	ldrb	r3, [r7, #15]
 801ac5c:	4413      	add	r3, r2
 801ac5e:	2200      	movs	r2, #0
 801ac60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801ac64:	7bfb      	ldrb	r3, [r7, #15]
 801ac66:	3301      	adds	r3, #1
 801ac68:	73fb      	strb	r3, [r7, #15]
 801ac6a:	7bfb      	ldrb	r3, [r7, #15]
 801ac6c:	2b3f      	cmp	r3, #63	; 0x3f
 801ac6e:	d9f2      	bls.n	801ac56 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 801ac70:	2300      	movs	r3, #0
 801ac72:	73fb      	strb	r3, [r7, #15]
 801ac74:	e009      	b.n	801ac8a <makeDHCPMSG+0x1a6>
 801ac76:	4b13      	ldr	r3, [pc, #76]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	7bfb      	ldrb	r3, [r7, #15]
 801ac7c:	4413      	add	r3, r2
 801ac7e:	2200      	movs	r2, #0
 801ac80:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 801ac84:	7bfb      	ldrb	r3, [r7, #15]
 801ac86:	3301      	adds	r3, #1
 801ac88:	73fb      	strb	r3, [r7, #15]
 801ac8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	daf1      	bge.n	801ac76 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 801ac92:	4b0c      	ldr	r3, [pc, #48]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	2263      	movs	r2, #99	; 0x63
 801ac98:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 801ac9c:	4b09      	ldr	r3, [pc, #36]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	2282      	movs	r2, #130	; 0x82
 801aca2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 801aca6:	4b07      	ldr	r3, [pc, #28]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	2253      	movs	r2, #83	; 0x53
 801acac:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 801acb0:	4b04      	ldr	r3, [pc, #16]	; (801acc4 <makeDHCPMSG+0x1e0>)
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	2263      	movs	r2, #99	; 0x63
 801acb6:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 801acba:	bf00      	nop
 801acbc:	3710      	adds	r7, #16
 801acbe:	46bd      	mov	sp, r7
 801acc0:	bd80      	pop	{r7, pc}
 801acc2:	bf00      	nop
 801acc4:	200009d0 	.word	0x200009d0
 801acc8:	200009cc 	.word	0x200009cc
 801accc:	200009d4 	.word	0x200009d4

0801acd0 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 801acd0:	b5b0      	push	{r4, r5, r7, lr}
 801acd2:	b084      	sub	sp, #16
 801acd4:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 801acd6:	2300      	movs	r3, #0
 801acd8:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 801acda:	f7ff ff03 	bl	801aae4 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 801acde:	4b56      	ldr	r3, [pc, #344]	; (801ae38 <send_DHCP_DISCOVER+0x168>)
 801ace0:	2200      	movs	r2, #0
 801ace2:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 801ace4:	4b54      	ldr	r3, [pc, #336]	; (801ae38 <send_DHCP_DISCOVER+0x168>)
 801ace6:	2200      	movs	r2, #0
 801ace8:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 801acea:	4b53      	ldr	r3, [pc, #332]	; (801ae38 <send_DHCP_DISCOVER+0x168>)
 801acec:	2200      	movs	r2, #0
 801acee:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 801acf0:	4b51      	ldr	r3, [pc, #324]	; (801ae38 <send_DHCP_DISCOVER+0x168>)
 801acf2:	2200      	movs	r2, #0
 801acf4:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 801acf6:	4b51      	ldr	r3, [pc, #324]	; (801ae3c <send_DHCP_DISCOVER+0x16c>)
 801acf8:	2200      	movs	r2, #0
 801acfa:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 801acfc:	4b4f      	ldr	r3, [pc, #316]	; (801ae3c <send_DHCP_DISCOVER+0x16c>)
 801acfe:	2200      	movs	r2, #0
 801ad00:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 801ad02:	4b4e      	ldr	r3, [pc, #312]	; (801ae3c <send_DHCP_DISCOVER+0x16c>)
 801ad04:	2200      	movs	r2, #0
 801ad06:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 801ad08:	4b4c      	ldr	r3, [pc, #304]	; (801ae3c <send_DHCP_DISCOVER+0x16c>)
 801ad0a:	2200      	movs	r2, #0
 801ad0c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 801ad0e:	2304      	movs	r3, #4
 801ad10:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801ad12:	4b4b      	ldr	r3, [pc, #300]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad14:	681a      	ldr	r2, [r3, #0]
 801ad16:	88bb      	ldrh	r3, [r7, #4]
 801ad18:	1c59      	adds	r1, r3, #1
 801ad1a:	80b9      	strh	r1, [r7, #4]
 801ad1c:	4413      	add	r3, r2
 801ad1e:	2235      	movs	r2, #53	; 0x35
 801ad20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ad24:	4b46      	ldr	r3, [pc, #280]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad26:	681a      	ldr	r2, [r3, #0]
 801ad28:	88bb      	ldrh	r3, [r7, #4]
 801ad2a:	1c59      	adds	r1, r3, #1
 801ad2c:	80b9      	strh	r1, [r7, #4]
 801ad2e:	4413      	add	r3, r2
 801ad30:	2201      	movs	r2, #1
 801ad32:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 801ad36:	4b42      	ldr	r3, [pc, #264]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad38:	681a      	ldr	r2, [r3, #0]
 801ad3a:	88bb      	ldrh	r3, [r7, #4]
 801ad3c:	1c59      	adds	r1, r3, #1
 801ad3e:	80b9      	strh	r1, [r7, #4]
 801ad40:	4413      	add	r3, r2
 801ad42:	2201      	movs	r2, #1
 801ad44:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801ad48:	4b3d      	ldr	r3, [pc, #244]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad4a:	681a      	ldr	r2, [r3, #0]
 801ad4c:	88bb      	ldrh	r3, [r7, #4]
 801ad4e:	1c59      	adds	r1, r3, #1
 801ad50:	80b9      	strh	r1, [r7, #4]
 801ad52:	4413      	add	r3, r2
 801ad54:	223d      	movs	r2, #61	; 0x3d
 801ad56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801ad5a:	4b39      	ldr	r3, [pc, #228]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad5c:	681a      	ldr	r2, [r3, #0]
 801ad5e:	88bb      	ldrh	r3, [r7, #4]
 801ad60:	1c59      	adds	r1, r3, #1
 801ad62:	80b9      	strh	r1, [r7, #4]
 801ad64:	4413      	add	r3, r2
 801ad66:	2207      	movs	r2, #7
 801ad68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801ad6c:	4b34      	ldr	r3, [pc, #208]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad6e:	681a      	ldr	r2, [r3, #0]
 801ad70:	88bb      	ldrh	r3, [r7, #4]
 801ad72:	1c59      	adds	r1, r3, #1
 801ad74:	80b9      	strh	r1, [r7, #4]
 801ad76:	4413      	add	r3, r2
 801ad78:	2201      	movs	r2, #1
 801ad7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801ad7e:	4b30      	ldr	r3, [pc, #192]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad80:	681a      	ldr	r2, [r3, #0]
 801ad82:	88bb      	ldrh	r3, [r7, #4]
 801ad84:	1c59      	adds	r1, r3, #1
 801ad86:	80b9      	strh	r1, [r7, #4]
 801ad88:	4618      	mov	r0, r3
 801ad8a:	4b2e      	ldr	r3, [pc, #184]	; (801ae44 <send_DHCP_DISCOVER+0x174>)
 801ad8c:	7819      	ldrb	r1, [r3, #0]
 801ad8e:	1813      	adds	r3, r2, r0
 801ad90:	460a      	mov	r2, r1
 801ad92:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801ad96:	4b2a      	ldr	r3, [pc, #168]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ad98:	681a      	ldr	r2, [r3, #0]
 801ad9a:	88bb      	ldrh	r3, [r7, #4]
 801ad9c:	1c59      	adds	r1, r3, #1
 801ad9e:	80b9      	strh	r1, [r7, #4]
 801ada0:	4618      	mov	r0, r3
 801ada2:	4b28      	ldr	r3, [pc, #160]	; (801ae44 <send_DHCP_DISCOVER+0x174>)
 801ada4:	7859      	ldrb	r1, [r3, #1]
 801ada6:	1813      	adds	r3, r2, r0
 801ada8:	460a      	mov	r2, r1
 801adaa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801adae:	4b24      	ldr	r3, [pc, #144]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801adb0:	681a      	ldr	r2, [r3, #0]
 801adb2:	88bb      	ldrh	r3, [r7, #4]
 801adb4:	1c59      	adds	r1, r3, #1
 801adb6:	80b9      	strh	r1, [r7, #4]
 801adb8:	4618      	mov	r0, r3
 801adba:	4b22      	ldr	r3, [pc, #136]	; (801ae44 <send_DHCP_DISCOVER+0x174>)
 801adbc:	7899      	ldrb	r1, [r3, #2]
 801adbe:	1813      	adds	r3, r2, r0
 801adc0:	460a      	mov	r2, r1
 801adc2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801adc6:	4b1e      	ldr	r3, [pc, #120]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801adc8:	681a      	ldr	r2, [r3, #0]
 801adca:	88bb      	ldrh	r3, [r7, #4]
 801adcc:	1c59      	adds	r1, r3, #1
 801adce:	80b9      	strh	r1, [r7, #4]
 801add0:	4618      	mov	r0, r3
 801add2:	4b1c      	ldr	r3, [pc, #112]	; (801ae44 <send_DHCP_DISCOVER+0x174>)
 801add4:	78d9      	ldrb	r1, [r3, #3]
 801add6:	1813      	adds	r3, r2, r0
 801add8:	460a      	mov	r2, r1
 801adda:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801adde:	4b18      	ldr	r3, [pc, #96]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ade0:	681a      	ldr	r2, [r3, #0]
 801ade2:	88bb      	ldrh	r3, [r7, #4]
 801ade4:	1c59      	adds	r1, r3, #1
 801ade6:	80b9      	strh	r1, [r7, #4]
 801ade8:	4618      	mov	r0, r3
 801adea:	4b16      	ldr	r3, [pc, #88]	; (801ae44 <send_DHCP_DISCOVER+0x174>)
 801adec:	7919      	ldrb	r1, [r3, #4]
 801adee:	1813      	adds	r3, r2, r0
 801adf0:	460a      	mov	r2, r1
 801adf2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801adf6:	4b12      	ldr	r3, [pc, #72]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801adf8:	681a      	ldr	r2, [r3, #0]
 801adfa:	88bb      	ldrh	r3, [r7, #4]
 801adfc:	1c59      	adds	r1, r3, #1
 801adfe:	80b9      	strh	r1, [r7, #4]
 801ae00:	4618      	mov	r0, r3
 801ae02:	4b10      	ldr	r3, [pc, #64]	; (801ae44 <send_DHCP_DISCOVER+0x174>)
 801ae04:	7959      	ldrb	r1, [r3, #5]
 801ae06:	1813      	adds	r3, r2, r0
 801ae08:	460a      	mov	r2, r1
 801ae0a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801ae0e:	4b0c      	ldr	r3, [pc, #48]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ae10:	681a      	ldr	r2, [r3, #0]
 801ae12:	88bb      	ldrh	r3, [r7, #4]
 801ae14:	1c59      	adds	r1, r3, #1
 801ae16:	80b9      	strh	r1, [r7, #4]
 801ae18:	4413      	add	r3, r2
 801ae1a:	220c      	movs	r2, #12
 801ae1c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 801ae20:	4b07      	ldr	r3, [pc, #28]	; (801ae40 <send_DHCP_DISCOVER+0x170>)
 801ae22:	681a      	ldr	r2, [r3, #0]
 801ae24:	88bb      	ldrh	r3, [r7, #4]
 801ae26:	1c59      	adds	r1, r3, #1
 801ae28:	80b9      	strh	r1, [r7, #4]
 801ae2a:	4413      	add	r3, r2
 801ae2c:	2200      	movs	r2, #0
 801ae2e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ae32:	2300      	movs	r3, #0
 801ae34:	80fb      	strh	r3, [r7, #6]
 801ae36:	e017      	b.n	801ae68 <send_DHCP_DISCOVER+0x198>
 801ae38:	200009a8 	.word	0x200009a8
 801ae3c:	200009ac 	.word	0x200009ac
 801ae40:	200009d0 	.word	0x200009d0
 801ae44:	200009d4 	.word	0x200009d4
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801ae48:	88f9      	ldrh	r1, [r7, #6]
 801ae4a:	4b80      	ldr	r3, [pc, #512]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801ae4c:	681a      	ldr	r2, [r3, #0]
 801ae4e:	88bb      	ldrh	r3, [r7, #4]
 801ae50:	1c58      	adds	r0, r3, #1
 801ae52:	80b8      	strh	r0, [r7, #4]
 801ae54:	4618      	mov	r0, r3
 801ae56:	4b7e      	ldr	r3, [pc, #504]	; (801b050 <send_DHCP_DISCOVER+0x380>)
 801ae58:	5c59      	ldrb	r1, [r3, r1]
 801ae5a:	1813      	adds	r3, r2, r0
 801ae5c:	460a      	mov	r2, r1
 801ae5e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801ae62:	88fb      	ldrh	r3, [r7, #6]
 801ae64:	3301      	adds	r3, #1
 801ae66:	80fb      	strh	r3, [r7, #6]
 801ae68:	88fb      	ldrh	r3, [r7, #6]
 801ae6a:	4a79      	ldr	r2, [pc, #484]	; (801b050 <send_DHCP_DISCOVER+0x380>)
 801ae6c:	5cd3      	ldrb	r3, [r2, r3]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d1ea      	bne.n	801ae48 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801ae72:	4b78      	ldr	r3, [pc, #480]	; (801b054 <send_DHCP_DISCOVER+0x384>)
 801ae74:	78db      	ldrb	r3, [r3, #3]
 801ae76:	091b      	lsrs	r3, r3, #4
 801ae78:	b2da      	uxtb	r2, r3
 801ae7a:	4b74      	ldr	r3, [pc, #464]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801ae7c:	681c      	ldr	r4, [r3, #0]
 801ae7e:	88bb      	ldrh	r3, [r7, #4]
 801ae80:	1c59      	adds	r1, r3, #1
 801ae82:	80b9      	strh	r1, [r7, #4]
 801ae84:	461d      	mov	r5, r3
 801ae86:	4610      	mov	r0, r2
 801ae88:	f001 f9c4 	bl	801c214 <NibbleToHex>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	461a      	mov	r2, r3
 801ae90:	1963      	adds	r3, r4, r5
 801ae92:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801ae96:	4b6f      	ldr	r3, [pc, #444]	; (801b054 <send_DHCP_DISCOVER+0x384>)
 801ae98:	78da      	ldrb	r2, [r3, #3]
 801ae9a:	4b6c      	ldr	r3, [pc, #432]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801ae9c:	681c      	ldr	r4, [r3, #0]
 801ae9e:	88bb      	ldrh	r3, [r7, #4]
 801aea0:	1c59      	adds	r1, r3, #1
 801aea2:	80b9      	strh	r1, [r7, #4]
 801aea4:	461d      	mov	r5, r3
 801aea6:	4610      	mov	r0, r2
 801aea8:	f001 f9b4 	bl	801c214 <NibbleToHex>
 801aeac:	4603      	mov	r3, r0
 801aeae:	461a      	mov	r2, r3
 801aeb0:	1963      	adds	r3, r4, r5
 801aeb2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801aeb6:	4b67      	ldr	r3, [pc, #412]	; (801b054 <send_DHCP_DISCOVER+0x384>)
 801aeb8:	791b      	ldrb	r3, [r3, #4]
 801aeba:	091b      	lsrs	r3, r3, #4
 801aebc:	b2da      	uxtb	r2, r3
 801aebe:	4b63      	ldr	r3, [pc, #396]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801aec0:	681c      	ldr	r4, [r3, #0]
 801aec2:	88bb      	ldrh	r3, [r7, #4]
 801aec4:	1c59      	adds	r1, r3, #1
 801aec6:	80b9      	strh	r1, [r7, #4]
 801aec8:	461d      	mov	r5, r3
 801aeca:	4610      	mov	r0, r2
 801aecc:	f001 f9a2 	bl	801c214 <NibbleToHex>
 801aed0:	4603      	mov	r3, r0
 801aed2:	461a      	mov	r2, r3
 801aed4:	1963      	adds	r3, r4, r5
 801aed6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801aeda:	4b5e      	ldr	r3, [pc, #376]	; (801b054 <send_DHCP_DISCOVER+0x384>)
 801aedc:	791a      	ldrb	r2, [r3, #4]
 801aede:	4b5b      	ldr	r3, [pc, #364]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801aee0:	681c      	ldr	r4, [r3, #0]
 801aee2:	88bb      	ldrh	r3, [r7, #4]
 801aee4:	1c59      	adds	r1, r3, #1
 801aee6:	80b9      	strh	r1, [r7, #4]
 801aee8:	461d      	mov	r5, r3
 801aeea:	4610      	mov	r0, r2
 801aeec:	f001 f992 	bl	801c214 <NibbleToHex>
 801aef0:	4603      	mov	r3, r0
 801aef2:	461a      	mov	r2, r3
 801aef4:	1963      	adds	r3, r4, r5
 801aef6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801aefa:	4b56      	ldr	r3, [pc, #344]	; (801b054 <send_DHCP_DISCOVER+0x384>)
 801aefc:	795b      	ldrb	r3, [r3, #5]
 801aefe:	091b      	lsrs	r3, r3, #4
 801af00:	b2da      	uxtb	r2, r3
 801af02:	4b52      	ldr	r3, [pc, #328]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801af04:	681c      	ldr	r4, [r3, #0]
 801af06:	88bb      	ldrh	r3, [r7, #4]
 801af08:	1c59      	adds	r1, r3, #1
 801af0a:	80b9      	strh	r1, [r7, #4]
 801af0c:	461d      	mov	r5, r3
 801af0e:	4610      	mov	r0, r2
 801af10:	f001 f980 	bl	801c214 <NibbleToHex>
 801af14:	4603      	mov	r3, r0
 801af16:	461a      	mov	r2, r3
 801af18:	1963      	adds	r3, r4, r5
 801af1a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801af1e:	4b4d      	ldr	r3, [pc, #308]	; (801b054 <send_DHCP_DISCOVER+0x384>)
 801af20:	795a      	ldrb	r2, [r3, #5]
 801af22:	4b4a      	ldr	r3, [pc, #296]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801af24:	681c      	ldr	r4, [r3, #0]
 801af26:	88bb      	ldrh	r3, [r7, #4]
 801af28:	1c59      	adds	r1, r3, #1
 801af2a:	80b9      	strh	r1, [r7, #4]
 801af2c:	461d      	mov	r5, r3
 801af2e:	4610      	mov	r0, r2
 801af30:	f001 f970 	bl	801c214 <NibbleToHex>
 801af34:	4603      	mov	r3, r0
 801af36:	461a      	mov	r2, r3
 801af38:	1963      	adds	r3, r4, r5
 801af3a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801af3e:	88fb      	ldrh	r3, [r7, #6]
 801af40:	b2d9      	uxtb	r1, r3
 801af42:	4b42      	ldr	r3, [pc, #264]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801af44:	681a      	ldr	r2, [r3, #0]
 801af46:	88b8      	ldrh	r0, [r7, #4]
 801af48:	88fb      	ldrh	r3, [r7, #6]
 801af4a:	3307      	adds	r3, #7
 801af4c:	1ac3      	subs	r3, r0, r3
 801af4e:	3106      	adds	r1, #6
 801af50:	b2c9      	uxtb	r1, r1
 801af52:	4413      	add	r3, r2
 801af54:	460a      	mov	r2, r1
 801af56:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801af5a:	4b3c      	ldr	r3, [pc, #240]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801af5c:	681a      	ldr	r2, [r3, #0]
 801af5e:	88bb      	ldrh	r3, [r7, #4]
 801af60:	1c59      	adds	r1, r3, #1
 801af62:	80b9      	strh	r1, [r7, #4]
 801af64:	4413      	add	r3, r2
 801af66:	2237      	movs	r2, #55	; 0x37
 801af68:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 801af6c:	4b37      	ldr	r3, [pc, #220]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801af6e:	681a      	ldr	r2, [r3, #0]
 801af70:	88bb      	ldrh	r3, [r7, #4]
 801af72:	1c59      	adds	r1, r3, #1
 801af74:	80b9      	strh	r1, [r7, #4]
 801af76:	4413      	add	r3, r2
 801af78:	2206      	movs	r2, #6
 801af7a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801af7e:	4b33      	ldr	r3, [pc, #204]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801af80:	681a      	ldr	r2, [r3, #0]
 801af82:	88bb      	ldrh	r3, [r7, #4]
 801af84:	1c59      	adds	r1, r3, #1
 801af86:	80b9      	strh	r1, [r7, #4]
 801af88:	4413      	add	r3, r2
 801af8a:	2201      	movs	r2, #1
 801af8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801af90:	4b2e      	ldr	r3, [pc, #184]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801af92:	681a      	ldr	r2, [r3, #0]
 801af94:	88bb      	ldrh	r3, [r7, #4]
 801af96:	1c59      	adds	r1, r3, #1
 801af98:	80b9      	strh	r1, [r7, #4]
 801af9a:	4413      	add	r3, r2
 801af9c:	2203      	movs	r2, #3
 801af9e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801afa2:	4b2a      	ldr	r3, [pc, #168]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801afa4:	681a      	ldr	r2, [r3, #0]
 801afa6:	88bb      	ldrh	r3, [r7, #4]
 801afa8:	1c59      	adds	r1, r3, #1
 801afaa:	80b9      	strh	r1, [r7, #4]
 801afac:	4413      	add	r3, r2
 801afae:	2206      	movs	r2, #6
 801afb0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801afb4:	4b25      	ldr	r3, [pc, #148]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801afb6:	681a      	ldr	r2, [r3, #0]
 801afb8:	88bb      	ldrh	r3, [r7, #4]
 801afba:	1c59      	adds	r1, r3, #1
 801afbc:	80b9      	strh	r1, [r7, #4]
 801afbe:	4413      	add	r3, r2
 801afc0:	220f      	movs	r2, #15
 801afc2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801afc6:	4b21      	ldr	r3, [pc, #132]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801afc8:	681a      	ldr	r2, [r3, #0]
 801afca:	88bb      	ldrh	r3, [r7, #4]
 801afcc:	1c59      	adds	r1, r3, #1
 801afce:	80b9      	strh	r1, [r7, #4]
 801afd0:	4413      	add	r3, r2
 801afd2:	223a      	movs	r2, #58	; 0x3a
 801afd4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801afd8:	4b1c      	ldr	r3, [pc, #112]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801afda:	681a      	ldr	r2, [r3, #0]
 801afdc:	88bb      	ldrh	r3, [r7, #4]
 801afde:	1c59      	adds	r1, r3, #1
 801afe0:	80b9      	strh	r1, [r7, #4]
 801afe2:	4413      	add	r3, r2
 801afe4:	223b      	movs	r2, #59	; 0x3b
 801afe6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801afea:	4b18      	ldr	r3, [pc, #96]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801afec:	681a      	ldr	r2, [r3, #0]
 801afee:	88bb      	ldrh	r3, [r7, #4]
 801aff0:	1c59      	adds	r1, r3, #1
 801aff2:	80b9      	strh	r1, [r7, #4]
 801aff4:	4413      	add	r3, r2
 801aff6:	22ff      	movs	r2, #255	; 0xff
 801aff8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801affc:	88bb      	ldrh	r3, [r7, #4]
 801affe:	80fb      	strh	r3, [r7, #6]
 801b000:	e009      	b.n	801b016 <send_DHCP_DISCOVER+0x346>
 801b002:	4b12      	ldr	r3, [pc, #72]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801b004:	681a      	ldr	r2, [r3, #0]
 801b006:	88fb      	ldrh	r3, [r7, #6]
 801b008:	4413      	add	r3, r2
 801b00a:	2200      	movs	r2, #0
 801b00c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801b010:	88fb      	ldrh	r3, [r7, #6]
 801b012:	3301      	adds	r3, #1
 801b014:	80fb      	strh	r3, [r7, #6]
 801b016:	88fb      	ldrh	r3, [r7, #6]
 801b018:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b01c:	d3f1      	bcc.n	801b002 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 801b01e:	23ff      	movs	r3, #255	; 0xff
 801b020:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 801b022:	23ff      	movs	r3, #255	; 0xff
 801b024:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 801b026:	23ff      	movs	r3, #255	; 0xff
 801b028:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 801b02a:	23ff      	movs	r3, #255	; 0xff
 801b02c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b02e:	4b0a      	ldr	r3, [pc, #40]	; (801b058 <send_DHCP_DISCOVER+0x388>)
 801b030:	7818      	ldrb	r0, [r3, #0]
 801b032:	4b06      	ldr	r3, [pc, #24]	; (801b04c <send_DHCP_DISCOVER+0x37c>)
 801b034:	6819      	ldr	r1, [r3, #0]
 801b036:	463b      	mov	r3, r7
 801b038:	2243      	movs	r2, #67	; 0x43
 801b03a:	9200      	str	r2, [sp, #0]
 801b03c:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b040:	f7fe fbfc 	bl	801983c <sendto>
}
 801b044:	bf00      	nop
 801b046:	3708      	adds	r7, #8
 801b048:	46bd      	mov	sp, r7
 801b04a:	bdb0      	pop	{r4, r5, r7, pc}
 801b04c:	200009d0 	.word	0x200009d0
 801b050:	200000f8 	.word	0x200000f8
 801b054:	200009d4 	.word	0x200009d4
 801b058:	200009a5 	.word	0x200009a5

0801b05c <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 801b05c:	b5b0      	push	{r4, r5, r7, lr}
 801b05e:	b086      	sub	sp, #24
 801b060:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b062:	2300      	movs	r3, #0
 801b064:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 801b066:	f7ff fd3d 	bl	801aae4 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 801b06a:	4b1b      	ldr	r3, [pc, #108]	; (801b0d8 <send_DHCP_REQUEST+0x7c>)
 801b06c:	f993 3000 	ldrsb.w	r3, [r3]
 801b070:	2b03      	cmp	r3, #3
 801b072:	d004      	beq.n	801b07e <send_DHCP_REQUEST+0x22>
 801b074:	4b18      	ldr	r3, [pc, #96]	; (801b0d8 <send_DHCP_REQUEST+0x7c>)
 801b076:	f993 3000 	ldrsb.w	r3, [r3]
 801b07a:	2b04      	cmp	r3, #4
 801b07c:	d134      	bne.n	801b0e8 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b07e:	4b17      	ldr	r3, [pc, #92]	; (801b0dc <send_DHCP_REQUEST+0x80>)
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	330a      	adds	r3, #10
 801b084:	2200      	movs	r2, #0
 801b086:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b088:	4b14      	ldr	r3, [pc, #80]	; (801b0dc <send_DHCP_REQUEST+0x80>)
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	330a      	adds	r3, #10
 801b08e:	3301      	adds	r3, #1
 801b090:	2200      	movs	r2, #0
 801b092:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 801b094:	4b11      	ldr	r3, [pc, #68]	; (801b0dc <send_DHCP_REQUEST+0x80>)
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	4a11      	ldr	r2, [pc, #68]	; (801b0e0 <send_DHCP_REQUEST+0x84>)
 801b09a:	7812      	ldrb	r2, [r2, #0]
 801b09c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 801b09e:	4b0f      	ldr	r3, [pc, #60]	; (801b0dc <send_DHCP_REQUEST+0x80>)
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	4a0f      	ldr	r2, [pc, #60]	; (801b0e0 <send_DHCP_REQUEST+0x84>)
 801b0a4:	7852      	ldrb	r2, [r2, #1]
 801b0a6:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 801b0a8:	4b0c      	ldr	r3, [pc, #48]	; (801b0dc <send_DHCP_REQUEST+0x80>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	4a0c      	ldr	r2, [pc, #48]	; (801b0e0 <send_DHCP_REQUEST+0x84>)
 801b0ae:	7892      	ldrb	r2, [r2, #2]
 801b0b0:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 801b0b2:	4b0a      	ldr	r3, [pc, #40]	; (801b0dc <send_DHCP_REQUEST+0x80>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	4a0a      	ldr	r2, [pc, #40]	; (801b0e0 <send_DHCP_REQUEST+0x84>)
 801b0b8:	78d2      	ldrb	r2, [r2, #3]
 801b0ba:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 801b0bc:	4b09      	ldr	r3, [pc, #36]	; (801b0e4 <send_DHCP_REQUEST+0x88>)
 801b0be:	781b      	ldrb	r3, [r3, #0]
 801b0c0:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 801b0c2:	4b08      	ldr	r3, [pc, #32]	; (801b0e4 <send_DHCP_REQUEST+0x88>)
 801b0c4:	785b      	ldrb	r3, [r3, #1]
 801b0c6:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 801b0c8:	4b06      	ldr	r3, [pc, #24]	; (801b0e4 <send_DHCP_REQUEST+0x88>)
 801b0ca:	789b      	ldrb	r3, [r3, #2]
 801b0cc:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 801b0ce:	4b05      	ldr	r3, [pc, #20]	; (801b0e4 <send_DHCP_REQUEST+0x88>)
 801b0d0:	78db      	ldrb	r3, [r3, #3]
 801b0d2:	71fb      	strb	r3, [r7, #7]
 801b0d4:	e010      	b.n	801b0f8 <send_DHCP_REQUEST+0x9c>
 801b0d6:	bf00      	nop
 801b0d8:	200009c4 	.word	0x200009c4
 801b0dc:	200009d0 	.word	0x200009d0
 801b0e0:	200009b4 	.word	0x200009b4
 801b0e4:	200009a8 	.word	0x200009a8
   }
   else
   {
   	ip[0] = 255;
 801b0e8:	23ff      	movs	r3, #255	; 0xff
 801b0ea:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 801b0ec:	23ff      	movs	r3, #255	; 0xff
 801b0ee:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 801b0f0:	23ff      	movs	r3, #255	; 0xff
 801b0f2:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 801b0f4:	23ff      	movs	r3, #255	; 0xff
 801b0f6:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b0f8:	2304      	movs	r3, #4
 801b0fa:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b0fc:	4b8d      	ldr	r3, [pc, #564]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b0fe:	681a      	ldr	r2, [r3, #0]
 801b100:	897b      	ldrh	r3, [r7, #10]
 801b102:	1c59      	adds	r1, r3, #1
 801b104:	8179      	strh	r1, [r7, #10]
 801b106:	4413      	add	r3, r2
 801b108:	2235      	movs	r2, #53	; 0x35
 801b10a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b10e:	4b89      	ldr	r3, [pc, #548]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b110:	681a      	ldr	r2, [r3, #0]
 801b112:	897b      	ldrh	r3, [r7, #10]
 801b114:	1c59      	adds	r1, r3, #1
 801b116:	8179      	strh	r1, [r7, #10]
 801b118:	4413      	add	r3, r2
 801b11a:	2201      	movs	r2, #1
 801b11c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 801b120:	4b84      	ldr	r3, [pc, #528]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b122:	681a      	ldr	r2, [r3, #0]
 801b124:	897b      	ldrh	r3, [r7, #10]
 801b126:	1c59      	adds	r1, r3, #1
 801b128:	8179      	strh	r1, [r7, #10]
 801b12a:	4413      	add	r3, r2
 801b12c:	2203      	movs	r2, #3
 801b12e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b132:	4b80      	ldr	r3, [pc, #512]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b134:	681a      	ldr	r2, [r3, #0]
 801b136:	897b      	ldrh	r3, [r7, #10]
 801b138:	1c59      	adds	r1, r3, #1
 801b13a:	8179      	strh	r1, [r7, #10]
 801b13c:	4413      	add	r3, r2
 801b13e:	223d      	movs	r2, #61	; 0x3d
 801b140:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b144:	4b7b      	ldr	r3, [pc, #492]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b146:	681a      	ldr	r2, [r3, #0]
 801b148:	897b      	ldrh	r3, [r7, #10]
 801b14a:	1c59      	adds	r1, r3, #1
 801b14c:	8179      	strh	r1, [r7, #10]
 801b14e:	4413      	add	r3, r2
 801b150:	2207      	movs	r2, #7
 801b152:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b156:	4b77      	ldr	r3, [pc, #476]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b158:	681a      	ldr	r2, [r3, #0]
 801b15a:	897b      	ldrh	r3, [r7, #10]
 801b15c:	1c59      	adds	r1, r3, #1
 801b15e:	8179      	strh	r1, [r7, #10]
 801b160:	4413      	add	r3, r2
 801b162:	2201      	movs	r2, #1
 801b164:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b168:	4b72      	ldr	r3, [pc, #456]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b16a:	681a      	ldr	r2, [r3, #0]
 801b16c:	897b      	ldrh	r3, [r7, #10]
 801b16e:	1c59      	adds	r1, r3, #1
 801b170:	8179      	strh	r1, [r7, #10]
 801b172:	4618      	mov	r0, r3
 801b174:	4b70      	ldr	r3, [pc, #448]	; (801b338 <send_DHCP_REQUEST+0x2dc>)
 801b176:	7819      	ldrb	r1, [r3, #0]
 801b178:	1813      	adds	r3, r2, r0
 801b17a:	460a      	mov	r2, r1
 801b17c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b180:	4b6c      	ldr	r3, [pc, #432]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b182:	681a      	ldr	r2, [r3, #0]
 801b184:	897b      	ldrh	r3, [r7, #10]
 801b186:	1c59      	adds	r1, r3, #1
 801b188:	8179      	strh	r1, [r7, #10]
 801b18a:	4618      	mov	r0, r3
 801b18c:	4b6a      	ldr	r3, [pc, #424]	; (801b338 <send_DHCP_REQUEST+0x2dc>)
 801b18e:	7859      	ldrb	r1, [r3, #1]
 801b190:	1813      	adds	r3, r2, r0
 801b192:	460a      	mov	r2, r1
 801b194:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b198:	4b66      	ldr	r3, [pc, #408]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	897b      	ldrh	r3, [r7, #10]
 801b19e:	1c59      	adds	r1, r3, #1
 801b1a0:	8179      	strh	r1, [r7, #10]
 801b1a2:	4618      	mov	r0, r3
 801b1a4:	4b64      	ldr	r3, [pc, #400]	; (801b338 <send_DHCP_REQUEST+0x2dc>)
 801b1a6:	7899      	ldrb	r1, [r3, #2]
 801b1a8:	1813      	adds	r3, r2, r0
 801b1aa:	460a      	mov	r2, r1
 801b1ac:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b1b0:	4b60      	ldr	r3, [pc, #384]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b1b2:	681a      	ldr	r2, [r3, #0]
 801b1b4:	897b      	ldrh	r3, [r7, #10]
 801b1b6:	1c59      	adds	r1, r3, #1
 801b1b8:	8179      	strh	r1, [r7, #10]
 801b1ba:	4618      	mov	r0, r3
 801b1bc:	4b5e      	ldr	r3, [pc, #376]	; (801b338 <send_DHCP_REQUEST+0x2dc>)
 801b1be:	78d9      	ldrb	r1, [r3, #3]
 801b1c0:	1813      	adds	r3, r2, r0
 801b1c2:	460a      	mov	r2, r1
 801b1c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b1c8:	4b5a      	ldr	r3, [pc, #360]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b1ca:	681a      	ldr	r2, [r3, #0]
 801b1cc:	897b      	ldrh	r3, [r7, #10]
 801b1ce:	1c59      	adds	r1, r3, #1
 801b1d0:	8179      	strh	r1, [r7, #10]
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	4b58      	ldr	r3, [pc, #352]	; (801b338 <send_DHCP_REQUEST+0x2dc>)
 801b1d6:	7919      	ldrb	r1, [r3, #4]
 801b1d8:	1813      	adds	r3, r2, r0
 801b1da:	460a      	mov	r2, r1
 801b1dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b1e0:	4b54      	ldr	r3, [pc, #336]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b1e2:	681a      	ldr	r2, [r3, #0]
 801b1e4:	897b      	ldrh	r3, [r7, #10]
 801b1e6:	1c59      	adds	r1, r3, #1
 801b1e8:	8179      	strh	r1, [r7, #10]
 801b1ea:	4618      	mov	r0, r3
 801b1ec:	4b52      	ldr	r3, [pc, #328]	; (801b338 <send_DHCP_REQUEST+0x2dc>)
 801b1ee:	7959      	ldrb	r1, [r3, #5]
 801b1f0:	1813      	adds	r3, r2, r0
 801b1f2:	460a      	mov	r2, r1
 801b1f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 801b1f8:	79fb      	ldrb	r3, [r7, #7]
 801b1fa:	2bff      	cmp	r3, #255	; 0xff
 801b1fc:	f040 8084 	bne.w	801b308 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b200:	4b4c      	ldr	r3, [pc, #304]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b202:	681a      	ldr	r2, [r3, #0]
 801b204:	897b      	ldrh	r3, [r7, #10]
 801b206:	1c59      	adds	r1, r3, #1
 801b208:	8179      	strh	r1, [r7, #10]
 801b20a:	4413      	add	r3, r2
 801b20c:	2232      	movs	r2, #50	; 0x32
 801b20e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b212:	4b48      	ldr	r3, [pc, #288]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b214:	681a      	ldr	r2, [r3, #0]
 801b216:	897b      	ldrh	r3, [r7, #10]
 801b218:	1c59      	adds	r1, r3, #1
 801b21a:	8179      	strh	r1, [r7, #10]
 801b21c:	4413      	add	r3, r2
 801b21e:	2204      	movs	r2, #4
 801b220:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b224:	4b43      	ldr	r3, [pc, #268]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b226:	681a      	ldr	r2, [r3, #0]
 801b228:	897b      	ldrh	r3, [r7, #10]
 801b22a:	1c59      	adds	r1, r3, #1
 801b22c:	8179      	strh	r1, [r7, #10]
 801b22e:	4618      	mov	r0, r3
 801b230:	4b42      	ldr	r3, [pc, #264]	; (801b33c <send_DHCP_REQUEST+0x2e0>)
 801b232:	7819      	ldrb	r1, [r3, #0]
 801b234:	1813      	adds	r3, r2, r0
 801b236:	460a      	mov	r2, r1
 801b238:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b23c:	4b3d      	ldr	r3, [pc, #244]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b23e:	681a      	ldr	r2, [r3, #0]
 801b240:	897b      	ldrh	r3, [r7, #10]
 801b242:	1c59      	adds	r1, r3, #1
 801b244:	8179      	strh	r1, [r7, #10]
 801b246:	4618      	mov	r0, r3
 801b248:	4b3c      	ldr	r3, [pc, #240]	; (801b33c <send_DHCP_REQUEST+0x2e0>)
 801b24a:	7859      	ldrb	r1, [r3, #1]
 801b24c:	1813      	adds	r3, r2, r0
 801b24e:	460a      	mov	r2, r1
 801b250:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b254:	4b37      	ldr	r3, [pc, #220]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b256:	681a      	ldr	r2, [r3, #0]
 801b258:	897b      	ldrh	r3, [r7, #10]
 801b25a:	1c59      	adds	r1, r3, #1
 801b25c:	8179      	strh	r1, [r7, #10]
 801b25e:	4618      	mov	r0, r3
 801b260:	4b36      	ldr	r3, [pc, #216]	; (801b33c <send_DHCP_REQUEST+0x2e0>)
 801b262:	7899      	ldrb	r1, [r3, #2]
 801b264:	1813      	adds	r3, r2, r0
 801b266:	460a      	mov	r2, r1
 801b268:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b26c:	4b31      	ldr	r3, [pc, #196]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b26e:	681a      	ldr	r2, [r3, #0]
 801b270:	897b      	ldrh	r3, [r7, #10]
 801b272:	1c59      	adds	r1, r3, #1
 801b274:	8179      	strh	r1, [r7, #10]
 801b276:	4618      	mov	r0, r3
 801b278:	4b30      	ldr	r3, [pc, #192]	; (801b33c <send_DHCP_REQUEST+0x2e0>)
 801b27a:	78d9      	ldrb	r1, [r3, #3]
 801b27c:	1813      	adds	r3, r2, r0
 801b27e:	460a      	mov	r2, r1
 801b280:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b284:	4b2b      	ldr	r3, [pc, #172]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b286:	681a      	ldr	r2, [r3, #0]
 801b288:	897b      	ldrh	r3, [r7, #10]
 801b28a:	1c59      	adds	r1, r3, #1
 801b28c:	8179      	strh	r1, [r7, #10]
 801b28e:	4413      	add	r3, r2
 801b290:	2236      	movs	r2, #54	; 0x36
 801b292:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 801b296:	4b27      	ldr	r3, [pc, #156]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b298:	681a      	ldr	r2, [r3, #0]
 801b29a:	897b      	ldrh	r3, [r7, #10]
 801b29c:	1c59      	adds	r1, r3, #1
 801b29e:	8179      	strh	r1, [r7, #10]
 801b2a0:	4413      	add	r3, r2
 801b2a2:	2204      	movs	r2, #4
 801b2a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b2a8:	4b22      	ldr	r3, [pc, #136]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b2aa:	681a      	ldr	r2, [r3, #0]
 801b2ac:	897b      	ldrh	r3, [r7, #10]
 801b2ae:	1c59      	adds	r1, r3, #1
 801b2b0:	8179      	strh	r1, [r7, #10]
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	4b22      	ldr	r3, [pc, #136]	; (801b340 <send_DHCP_REQUEST+0x2e4>)
 801b2b6:	7819      	ldrb	r1, [r3, #0]
 801b2b8:	1813      	adds	r3, r2, r0
 801b2ba:	460a      	mov	r2, r1
 801b2bc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b2c0:	4b1c      	ldr	r3, [pc, #112]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b2c2:	681a      	ldr	r2, [r3, #0]
 801b2c4:	897b      	ldrh	r3, [r7, #10]
 801b2c6:	1c59      	adds	r1, r3, #1
 801b2c8:	8179      	strh	r1, [r7, #10]
 801b2ca:	4618      	mov	r0, r3
 801b2cc:	4b1c      	ldr	r3, [pc, #112]	; (801b340 <send_DHCP_REQUEST+0x2e4>)
 801b2ce:	7859      	ldrb	r1, [r3, #1]
 801b2d0:	1813      	adds	r3, r2, r0
 801b2d2:	460a      	mov	r2, r1
 801b2d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b2d8:	4b16      	ldr	r3, [pc, #88]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b2da:	681a      	ldr	r2, [r3, #0]
 801b2dc:	897b      	ldrh	r3, [r7, #10]
 801b2de:	1c59      	adds	r1, r3, #1
 801b2e0:	8179      	strh	r1, [r7, #10]
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	4b16      	ldr	r3, [pc, #88]	; (801b340 <send_DHCP_REQUEST+0x2e4>)
 801b2e6:	7899      	ldrb	r1, [r3, #2]
 801b2e8:	1813      	adds	r3, r2, r0
 801b2ea:	460a      	mov	r2, r1
 801b2ec:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b2f0:	4b10      	ldr	r3, [pc, #64]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b2f2:	681a      	ldr	r2, [r3, #0]
 801b2f4:	897b      	ldrh	r3, [r7, #10]
 801b2f6:	1c59      	adds	r1, r3, #1
 801b2f8:	8179      	strh	r1, [r7, #10]
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	4b10      	ldr	r3, [pc, #64]	; (801b340 <send_DHCP_REQUEST+0x2e4>)
 801b2fe:	78d9      	ldrb	r1, [r3, #3]
 801b300:	1813      	adds	r3, r2, r0
 801b302:	460a      	mov	r2, r1
 801b304:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 801b308:	4b0a      	ldr	r3, [pc, #40]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b30a:	681a      	ldr	r2, [r3, #0]
 801b30c:	897b      	ldrh	r3, [r7, #10]
 801b30e:	1c59      	adds	r1, r3, #1
 801b310:	8179      	strh	r1, [r7, #10]
 801b312:	4413      	add	r3, r2
 801b314:	220c      	movs	r2, #12
 801b316:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 801b31a:	4b06      	ldr	r3, [pc, #24]	; (801b334 <send_DHCP_REQUEST+0x2d8>)
 801b31c:	681a      	ldr	r2, [r3, #0]
 801b31e:	897b      	ldrh	r3, [r7, #10]
 801b320:	1c59      	adds	r1, r3, #1
 801b322:	8179      	strh	r1, [r7, #10]
 801b324:	4413      	add	r3, r2
 801b326:	2200      	movs	r2, #0
 801b328:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b32c:	2300      	movs	r3, #0
 801b32e:	60fb      	str	r3, [r7, #12]
 801b330:	e019      	b.n	801b366 <send_DHCP_REQUEST+0x30a>
 801b332:	bf00      	nop
 801b334:	200009d0 	.word	0x200009d0
 801b338:	200009d4 	.word	0x200009d4
 801b33c:	200009b4 	.word	0x200009b4
 801b340:	200009a8 	.word	0x200009a8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 801b344:	4b86      	ldr	r3, [pc, #536]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b346:	681a      	ldr	r2, [r3, #0]
 801b348:	897b      	ldrh	r3, [r7, #10]
 801b34a:	1c59      	adds	r1, r3, #1
 801b34c:	8179      	strh	r1, [r7, #10]
 801b34e:	4618      	mov	r0, r3
 801b350:	4984      	ldr	r1, [pc, #528]	; (801b564 <send_DHCP_REQUEST+0x508>)
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	440b      	add	r3, r1
 801b356:	7819      	ldrb	r1, [r3, #0]
 801b358:	1813      	adds	r3, r2, r0
 801b35a:	460a      	mov	r2, r1
 801b35c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	3301      	adds	r3, #1
 801b364:	60fb      	str	r3, [r7, #12]
 801b366:	4a7f      	ldr	r2, [pc, #508]	; (801b564 <send_DHCP_REQUEST+0x508>)
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	4413      	add	r3, r2
 801b36c:	781b      	ldrb	r3, [r3, #0]
 801b36e:	2b00      	cmp	r3, #0
 801b370:	d1e8      	bne.n	801b344 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 801b372:	4b7d      	ldr	r3, [pc, #500]	; (801b568 <send_DHCP_REQUEST+0x50c>)
 801b374:	78db      	ldrb	r3, [r3, #3]
 801b376:	091b      	lsrs	r3, r3, #4
 801b378:	b2da      	uxtb	r2, r3
 801b37a:	4b79      	ldr	r3, [pc, #484]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b37c:	681c      	ldr	r4, [r3, #0]
 801b37e:	897b      	ldrh	r3, [r7, #10]
 801b380:	1c59      	adds	r1, r3, #1
 801b382:	8179      	strh	r1, [r7, #10]
 801b384:	461d      	mov	r5, r3
 801b386:	4610      	mov	r0, r2
 801b388:	f000 ff44 	bl	801c214 <NibbleToHex>
 801b38c:	4603      	mov	r3, r0
 801b38e:	461a      	mov	r2, r3
 801b390:	1963      	adds	r3, r4, r5
 801b392:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 801b396:	4b74      	ldr	r3, [pc, #464]	; (801b568 <send_DHCP_REQUEST+0x50c>)
 801b398:	78da      	ldrb	r2, [r3, #3]
 801b39a:	4b71      	ldr	r3, [pc, #452]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b39c:	681c      	ldr	r4, [r3, #0]
 801b39e:	897b      	ldrh	r3, [r7, #10]
 801b3a0:	1c59      	adds	r1, r3, #1
 801b3a2:	8179      	strh	r1, [r7, #10]
 801b3a4:	461d      	mov	r5, r3
 801b3a6:	4610      	mov	r0, r2
 801b3a8:	f000 ff34 	bl	801c214 <NibbleToHex>
 801b3ac:	4603      	mov	r3, r0
 801b3ae:	461a      	mov	r2, r3
 801b3b0:	1963      	adds	r3, r4, r5
 801b3b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 801b3b6:	4b6c      	ldr	r3, [pc, #432]	; (801b568 <send_DHCP_REQUEST+0x50c>)
 801b3b8:	791b      	ldrb	r3, [r3, #4]
 801b3ba:	091b      	lsrs	r3, r3, #4
 801b3bc:	b2da      	uxtb	r2, r3
 801b3be:	4b68      	ldr	r3, [pc, #416]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b3c0:	681c      	ldr	r4, [r3, #0]
 801b3c2:	897b      	ldrh	r3, [r7, #10]
 801b3c4:	1c59      	adds	r1, r3, #1
 801b3c6:	8179      	strh	r1, [r7, #10]
 801b3c8:	461d      	mov	r5, r3
 801b3ca:	4610      	mov	r0, r2
 801b3cc:	f000 ff22 	bl	801c214 <NibbleToHex>
 801b3d0:	4603      	mov	r3, r0
 801b3d2:	461a      	mov	r2, r3
 801b3d4:	1963      	adds	r3, r4, r5
 801b3d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 801b3da:	4b63      	ldr	r3, [pc, #396]	; (801b568 <send_DHCP_REQUEST+0x50c>)
 801b3dc:	791a      	ldrb	r2, [r3, #4]
 801b3de:	4b60      	ldr	r3, [pc, #384]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b3e0:	681c      	ldr	r4, [r3, #0]
 801b3e2:	897b      	ldrh	r3, [r7, #10]
 801b3e4:	1c59      	adds	r1, r3, #1
 801b3e6:	8179      	strh	r1, [r7, #10]
 801b3e8:	461d      	mov	r5, r3
 801b3ea:	4610      	mov	r0, r2
 801b3ec:	f000 ff12 	bl	801c214 <NibbleToHex>
 801b3f0:	4603      	mov	r3, r0
 801b3f2:	461a      	mov	r2, r3
 801b3f4:	1963      	adds	r3, r4, r5
 801b3f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 801b3fa:	4b5b      	ldr	r3, [pc, #364]	; (801b568 <send_DHCP_REQUEST+0x50c>)
 801b3fc:	795b      	ldrb	r3, [r3, #5]
 801b3fe:	091b      	lsrs	r3, r3, #4
 801b400:	b2da      	uxtb	r2, r3
 801b402:	4b57      	ldr	r3, [pc, #348]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b404:	681c      	ldr	r4, [r3, #0]
 801b406:	897b      	ldrh	r3, [r7, #10]
 801b408:	1c59      	adds	r1, r3, #1
 801b40a:	8179      	strh	r1, [r7, #10]
 801b40c:	461d      	mov	r5, r3
 801b40e:	4610      	mov	r0, r2
 801b410:	f000 ff00 	bl	801c214 <NibbleToHex>
 801b414:	4603      	mov	r3, r0
 801b416:	461a      	mov	r2, r3
 801b418:	1963      	adds	r3, r4, r5
 801b41a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 801b41e:	4b52      	ldr	r3, [pc, #328]	; (801b568 <send_DHCP_REQUEST+0x50c>)
 801b420:	795a      	ldrb	r2, [r3, #5]
 801b422:	4b4f      	ldr	r3, [pc, #316]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b424:	681c      	ldr	r4, [r3, #0]
 801b426:	897b      	ldrh	r3, [r7, #10]
 801b428:	1c59      	adds	r1, r3, #1
 801b42a:	8179      	strh	r1, [r7, #10]
 801b42c:	461d      	mov	r5, r3
 801b42e:	4610      	mov	r0, r2
 801b430:	f000 fef0 	bl	801c214 <NibbleToHex>
 801b434:	4603      	mov	r3, r0
 801b436:	461a      	mov	r2, r3
 801b438:	1963      	adds	r3, r4, r5
 801b43a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 801b43e:	68fb      	ldr	r3, [r7, #12]
 801b440:	b2d9      	uxtb	r1, r3
 801b442:	4b47      	ldr	r3, [pc, #284]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b444:	681a      	ldr	r2, [r3, #0]
 801b446:	8978      	ldrh	r0, [r7, #10]
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	3307      	adds	r3, #7
 801b44c:	1ac3      	subs	r3, r0, r3
 801b44e:	3106      	adds	r1, #6
 801b450:	b2c9      	uxtb	r1, r1
 801b452:	4413      	add	r3, r2
 801b454:	460a      	mov	r2, r1
 801b456:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 801b45a:	4b41      	ldr	r3, [pc, #260]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b45c:	681a      	ldr	r2, [r3, #0]
 801b45e:	897b      	ldrh	r3, [r7, #10]
 801b460:	1c59      	adds	r1, r3, #1
 801b462:	8179      	strh	r1, [r7, #10]
 801b464:	4413      	add	r3, r2
 801b466:	2237      	movs	r2, #55	; 0x37
 801b468:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 801b46c:	4b3c      	ldr	r3, [pc, #240]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b46e:	681a      	ldr	r2, [r3, #0]
 801b470:	897b      	ldrh	r3, [r7, #10]
 801b472:	1c59      	adds	r1, r3, #1
 801b474:	8179      	strh	r1, [r7, #10]
 801b476:	4413      	add	r3, r2
 801b478:	2208      	movs	r2, #8
 801b47a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 801b47e:	4b38      	ldr	r3, [pc, #224]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b480:	681a      	ldr	r2, [r3, #0]
 801b482:	897b      	ldrh	r3, [r7, #10]
 801b484:	1c59      	adds	r1, r3, #1
 801b486:	8179      	strh	r1, [r7, #10]
 801b488:	4413      	add	r3, r2
 801b48a:	2201      	movs	r2, #1
 801b48c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 801b490:	4b33      	ldr	r3, [pc, #204]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b492:	681a      	ldr	r2, [r3, #0]
 801b494:	897b      	ldrh	r3, [r7, #10]
 801b496:	1c59      	adds	r1, r3, #1
 801b498:	8179      	strh	r1, [r7, #10]
 801b49a:	4413      	add	r3, r2
 801b49c:	2203      	movs	r2, #3
 801b49e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 801b4a2:	4b2f      	ldr	r3, [pc, #188]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b4a4:	681a      	ldr	r2, [r3, #0]
 801b4a6:	897b      	ldrh	r3, [r7, #10]
 801b4a8:	1c59      	adds	r1, r3, #1
 801b4aa:	8179      	strh	r1, [r7, #10]
 801b4ac:	4413      	add	r3, r2
 801b4ae:	2206      	movs	r2, #6
 801b4b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 801b4b4:	4b2a      	ldr	r3, [pc, #168]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b4b6:	681a      	ldr	r2, [r3, #0]
 801b4b8:	897b      	ldrh	r3, [r7, #10]
 801b4ba:	1c59      	adds	r1, r3, #1
 801b4bc:	8179      	strh	r1, [r7, #10]
 801b4be:	4413      	add	r3, r2
 801b4c0:	220f      	movs	r2, #15
 801b4c2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 801b4c6:	4b26      	ldr	r3, [pc, #152]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b4c8:	681a      	ldr	r2, [r3, #0]
 801b4ca:	897b      	ldrh	r3, [r7, #10]
 801b4cc:	1c59      	adds	r1, r3, #1
 801b4ce:	8179      	strh	r1, [r7, #10]
 801b4d0:	4413      	add	r3, r2
 801b4d2:	223a      	movs	r2, #58	; 0x3a
 801b4d4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 801b4d8:	4b21      	ldr	r3, [pc, #132]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b4da:	681a      	ldr	r2, [r3, #0]
 801b4dc:	897b      	ldrh	r3, [r7, #10]
 801b4de:	1c59      	adds	r1, r3, #1
 801b4e0:	8179      	strh	r1, [r7, #10]
 801b4e2:	4413      	add	r3, r2
 801b4e4:	223b      	movs	r2, #59	; 0x3b
 801b4e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 801b4ea:	4b1d      	ldr	r3, [pc, #116]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b4ec:	681a      	ldr	r2, [r3, #0]
 801b4ee:	897b      	ldrh	r3, [r7, #10]
 801b4f0:	1c59      	adds	r1, r3, #1
 801b4f2:	8179      	strh	r1, [r7, #10]
 801b4f4:	4413      	add	r3, r2
 801b4f6:	221f      	movs	r2, #31
 801b4f8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 801b4fc:	4b18      	ldr	r3, [pc, #96]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b4fe:	681a      	ldr	r2, [r3, #0]
 801b500:	897b      	ldrh	r3, [r7, #10]
 801b502:	1c59      	adds	r1, r3, #1
 801b504:	8179      	strh	r1, [r7, #10]
 801b506:	4413      	add	r3, r2
 801b508:	2221      	movs	r2, #33	; 0x21
 801b50a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 801b50e:	4b14      	ldr	r3, [pc, #80]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b510:	681a      	ldr	r2, [r3, #0]
 801b512:	897b      	ldrh	r3, [r7, #10]
 801b514:	1c59      	adds	r1, r3, #1
 801b516:	8179      	strh	r1, [r7, #10]
 801b518:	4413      	add	r3, r2
 801b51a:	22ff      	movs	r2, #255	; 0xff
 801b51c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b520:	897b      	ldrh	r3, [r7, #10]
 801b522:	60fb      	str	r3, [r7, #12]
 801b524:	e009      	b.n	801b53a <send_DHCP_REQUEST+0x4de>
 801b526:	4b0e      	ldr	r3, [pc, #56]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b528:	681a      	ldr	r2, [r3, #0]
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	4413      	add	r3, r2
 801b52e:	33ec      	adds	r3, #236	; 0xec
 801b530:	2200      	movs	r2, #0
 801b532:	701a      	strb	r2, [r3, #0]
 801b534:	68fb      	ldr	r3, [r7, #12]
 801b536:	3301      	adds	r3, #1
 801b538:	60fb      	str	r3, [r7, #12]
 801b53a:	68fb      	ldr	r3, [r7, #12]
 801b53c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b540:	dbf1      	blt.n	801b526 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b542:	4b0a      	ldr	r3, [pc, #40]	; (801b56c <send_DHCP_REQUEST+0x510>)
 801b544:	7818      	ldrb	r0, [r3, #0]
 801b546:	4b06      	ldr	r3, [pc, #24]	; (801b560 <send_DHCP_REQUEST+0x504>)
 801b548:	6819      	ldr	r1, [r3, #0]
 801b54a:	1d3b      	adds	r3, r7, #4
 801b54c:	2243      	movs	r2, #67	; 0x43
 801b54e:	9200      	str	r2, [sp, #0]
 801b550:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b554:	f7fe f972 	bl	801983c <sendto>

}
 801b558:	bf00      	nop
 801b55a:	3710      	adds	r7, #16
 801b55c:	46bd      	mov	sp, r7
 801b55e:	bdb0      	pop	{r4, r5, r7, pc}
 801b560:	200009d0 	.word	0x200009d0
 801b564:	200000f8 	.word	0x200000f8
 801b568:	200009d4 	.word	0x200009d4
 801b56c:	200009a5 	.word	0x200009a5

0801b570 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 801b570:	b580      	push	{r7, lr}
 801b572:	b086      	sub	sp, #24
 801b574:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 801b576:	2300      	movs	r3, #0
 801b578:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 801b57a:	f7ff fab3 	bl	801aae4 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 801b57e:	2304      	movs	r3, #4
 801b580:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 801b582:	4b9f      	ldr	r3, [pc, #636]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	330a      	adds	r3, #10
 801b588:	2200      	movs	r2, #0
 801b58a:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 801b58c:	4b9c      	ldr	r3, [pc, #624]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b58e:	681b      	ldr	r3, [r3, #0]
 801b590:	330a      	adds	r3, #10
 801b592:	3301      	adds	r3, #1
 801b594:	2200      	movs	r2, #0
 801b596:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 801b598:	4b99      	ldr	r3, [pc, #612]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b59a:	681a      	ldr	r2, [r3, #0]
 801b59c:	897b      	ldrh	r3, [r7, #10]
 801b59e:	1c59      	adds	r1, r3, #1
 801b5a0:	8179      	strh	r1, [r7, #10]
 801b5a2:	4413      	add	r3, r2
 801b5a4:	2235      	movs	r2, #53	; 0x35
 801b5a6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b5aa:	4b95      	ldr	r3, [pc, #596]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b5ac:	681a      	ldr	r2, [r3, #0]
 801b5ae:	897b      	ldrh	r3, [r7, #10]
 801b5b0:	1c59      	adds	r1, r3, #1
 801b5b2:	8179      	strh	r1, [r7, #10]
 801b5b4:	4413      	add	r3, r2
 801b5b6:	2201      	movs	r2, #1
 801b5b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 801b5bc:	4b90      	ldr	r3, [pc, #576]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b5be:	681a      	ldr	r2, [r3, #0]
 801b5c0:	897b      	ldrh	r3, [r7, #10]
 801b5c2:	1c59      	adds	r1, r3, #1
 801b5c4:	8179      	strh	r1, [r7, #10]
 801b5c6:	4413      	add	r3, r2
 801b5c8:	2204      	movs	r2, #4
 801b5ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 801b5ce:	4b8c      	ldr	r3, [pc, #560]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b5d0:	681a      	ldr	r2, [r3, #0]
 801b5d2:	897b      	ldrh	r3, [r7, #10]
 801b5d4:	1c59      	adds	r1, r3, #1
 801b5d6:	8179      	strh	r1, [r7, #10]
 801b5d8:	4413      	add	r3, r2
 801b5da:	223d      	movs	r2, #61	; 0x3d
 801b5dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 801b5e0:	4b87      	ldr	r3, [pc, #540]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b5e2:	681a      	ldr	r2, [r3, #0]
 801b5e4:	897b      	ldrh	r3, [r7, #10]
 801b5e6:	1c59      	adds	r1, r3, #1
 801b5e8:	8179      	strh	r1, [r7, #10]
 801b5ea:	4413      	add	r3, r2
 801b5ec:	2207      	movs	r2, #7
 801b5ee:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 801b5f2:	4b83      	ldr	r3, [pc, #524]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b5f4:	681a      	ldr	r2, [r3, #0]
 801b5f6:	897b      	ldrh	r3, [r7, #10]
 801b5f8:	1c59      	adds	r1, r3, #1
 801b5fa:	8179      	strh	r1, [r7, #10]
 801b5fc:	4413      	add	r3, r2
 801b5fe:	2201      	movs	r2, #1
 801b600:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 801b604:	4b7e      	ldr	r3, [pc, #504]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b606:	681a      	ldr	r2, [r3, #0]
 801b608:	897b      	ldrh	r3, [r7, #10]
 801b60a:	1c59      	adds	r1, r3, #1
 801b60c:	8179      	strh	r1, [r7, #10]
 801b60e:	4618      	mov	r0, r3
 801b610:	4b7c      	ldr	r3, [pc, #496]	; (801b804 <send_DHCP_DECLINE+0x294>)
 801b612:	7819      	ldrb	r1, [r3, #0]
 801b614:	1813      	adds	r3, r2, r0
 801b616:	460a      	mov	r2, r1
 801b618:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 801b61c:	4b78      	ldr	r3, [pc, #480]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b61e:	681a      	ldr	r2, [r3, #0]
 801b620:	897b      	ldrh	r3, [r7, #10]
 801b622:	1c59      	adds	r1, r3, #1
 801b624:	8179      	strh	r1, [r7, #10]
 801b626:	4618      	mov	r0, r3
 801b628:	4b76      	ldr	r3, [pc, #472]	; (801b804 <send_DHCP_DECLINE+0x294>)
 801b62a:	7859      	ldrb	r1, [r3, #1]
 801b62c:	1813      	adds	r3, r2, r0
 801b62e:	460a      	mov	r2, r1
 801b630:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 801b634:	4b72      	ldr	r3, [pc, #456]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	897b      	ldrh	r3, [r7, #10]
 801b63a:	1c59      	adds	r1, r3, #1
 801b63c:	8179      	strh	r1, [r7, #10]
 801b63e:	4618      	mov	r0, r3
 801b640:	4b70      	ldr	r3, [pc, #448]	; (801b804 <send_DHCP_DECLINE+0x294>)
 801b642:	7899      	ldrb	r1, [r3, #2]
 801b644:	1813      	adds	r3, r2, r0
 801b646:	460a      	mov	r2, r1
 801b648:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 801b64c:	4b6c      	ldr	r3, [pc, #432]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b64e:	681a      	ldr	r2, [r3, #0]
 801b650:	897b      	ldrh	r3, [r7, #10]
 801b652:	1c59      	adds	r1, r3, #1
 801b654:	8179      	strh	r1, [r7, #10]
 801b656:	4618      	mov	r0, r3
 801b658:	4b6a      	ldr	r3, [pc, #424]	; (801b804 <send_DHCP_DECLINE+0x294>)
 801b65a:	78d9      	ldrb	r1, [r3, #3]
 801b65c:	1813      	adds	r3, r2, r0
 801b65e:	460a      	mov	r2, r1
 801b660:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 801b664:	4b66      	ldr	r3, [pc, #408]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b666:	681a      	ldr	r2, [r3, #0]
 801b668:	897b      	ldrh	r3, [r7, #10]
 801b66a:	1c59      	adds	r1, r3, #1
 801b66c:	8179      	strh	r1, [r7, #10]
 801b66e:	4618      	mov	r0, r3
 801b670:	4b64      	ldr	r3, [pc, #400]	; (801b804 <send_DHCP_DECLINE+0x294>)
 801b672:	7919      	ldrb	r1, [r3, #4]
 801b674:	1813      	adds	r3, r2, r0
 801b676:	460a      	mov	r2, r1
 801b678:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 801b67c:	4b60      	ldr	r3, [pc, #384]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b67e:	681a      	ldr	r2, [r3, #0]
 801b680:	897b      	ldrh	r3, [r7, #10]
 801b682:	1c59      	adds	r1, r3, #1
 801b684:	8179      	strh	r1, [r7, #10]
 801b686:	4618      	mov	r0, r3
 801b688:	4b5e      	ldr	r3, [pc, #376]	; (801b804 <send_DHCP_DECLINE+0x294>)
 801b68a:	7959      	ldrb	r1, [r3, #5]
 801b68c:	1813      	adds	r3, r2, r0
 801b68e:	460a      	mov	r2, r1
 801b690:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 801b694:	4b5a      	ldr	r3, [pc, #360]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b696:	681a      	ldr	r2, [r3, #0]
 801b698:	897b      	ldrh	r3, [r7, #10]
 801b69a:	1c59      	adds	r1, r3, #1
 801b69c:	8179      	strh	r1, [r7, #10]
 801b69e:	4413      	add	r3, r2
 801b6a0:	2232      	movs	r2, #50	; 0x32
 801b6a2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b6a6:	4b56      	ldr	r3, [pc, #344]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b6a8:	681a      	ldr	r2, [r3, #0]
 801b6aa:	897b      	ldrh	r3, [r7, #10]
 801b6ac:	1c59      	adds	r1, r3, #1
 801b6ae:	8179      	strh	r1, [r7, #10]
 801b6b0:	4413      	add	r3, r2
 801b6b2:	2204      	movs	r2, #4
 801b6b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 801b6b8:	4b51      	ldr	r3, [pc, #324]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b6ba:	681a      	ldr	r2, [r3, #0]
 801b6bc:	897b      	ldrh	r3, [r7, #10]
 801b6be:	1c59      	adds	r1, r3, #1
 801b6c0:	8179      	strh	r1, [r7, #10]
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	4b50      	ldr	r3, [pc, #320]	; (801b808 <send_DHCP_DECLINE+0x298>)
 801b6c6:	7819      	ldrb	r1, [r3, #0]
 801b6c8:	1813      	adds	r3, r2, r0
 801b6ca:	460a      	mov	r2, r1
 801b6cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 801b6d0:	4b4b      	ldr	r3, [pc, #300]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b6d2:	681a      	ldr	r2, [r3, #0]
 801b6d4:	897b      	ldrh	r3, [r7, #10]
 801b6d6:	1c59      	adds	r1, r3, #1
 801b6d8:	8179      	strh	r1, [r7, #10]
 801b6da:	4618      	mov	r0, r3
 801b6dc:	4b4a      	ldr	r3, [pc, #296]	; (801b808 <send_DHCP_DECLINE+0x298>)
 801b6de:	7859      	ldrb	r1, [r3, #1]
 801b6e0:	1813      	adds	r3, r2, r0
 801b6e2:	460a      	mov	r2, r1
 801b6e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 801b6e8:	4b45      	ldr	r3, [pc, #276]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b6ea:	681a      	ldr	r2, [r3, #0]
 801b6ec:	897b      	ldrh	r3, [r7, #10]
 801b6ee:	1c59      	adds	r1, r3, #1
 801b6f0:	8179      	strh	r1, [r7, #10]
 801b6f2:	4618      	mov	r0, r3
 801b6f4:	4b44      	ldr	r3, [pc, #272]	; (801b808 <send_DHCP_DECLINE+0x298>)
 801b6f6:	7899      	ldrb	r1, [r3, #2]
 801b6f8:	1813      	adds	r3, r2, r0
 801b6fa:	460a      	mov	r2, r1
 801b6fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 801b700:	4b3f      	ldr	r3, [pc, #252]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b702:	681a      	ldr	r2, [r3, #0]
 801b704:	897b      	ldrh	r3, [r7, #10]
 801b706:	1c59      	adds	r1, r3, #1
 801b708:	8179      	strh	r1, [r7, #10]
 801b70a:	4618      	mov	r0, r3
 801b70c:	4b3e      	ldr	r3, [pc, #248]	; (801b808 <send_DHCP_DECLINE+0x298>)
 801b70e:	78d9      	ldrb	r1, [r3, #3]
 801b710:	1813      	adds	r3, r2, r0
 801b712:	460a      	mov	r2, r1
 801b714:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 801b718:	4b39      	ldr	r3, [pc, #228]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b71a:	681a      	ldr	r2, [r3, #0]
 801b71c:	897b      	ldrh	r3, [r7, #10]
 801b71e:	1c59      	adds	r1, r3, #1
 801b720:	8179      	strh	r1, [r7, #10]
 801b722:	4413      	add	r3, r2
 801b724:	2236      	movs	r2, #54	; 0x36
 801b726:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 801b72a:	4b35      	ldr	r3, [pc, #212]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b72c:	681a      	ldr	r2, [r3, #0]
 801b72e:	897b      	ldrh	r3, [r7, #10]
 801b730:	1c59      	adds	r1, r3, #1
 801b732:	8179      	strh	r1, [r7, #10]
 801b734:	4413      	add	r3, r2
 801b736:	2204      	movs	r2, #4
 801b738:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 801b73c:	4b30      	ldr	r3, [pc, #192]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b73e:	681a      	ldr	r2, [r3, #0]
 801b740:	897b      	ldrh	r3, [r7, #10]
 801b742:	1c59      	adds	r1, r3, #1
 801b744:	8179      	strh	r1, [r7, #10]
 801b746:	4618      	mov	r0, r3
 801b748:	4b30      	ldr	r3, [pc, #192]	; (801b80c <send_DHCP_DECLINE+0x29c>)
 801b74a:	7819      	ldrb	r1, [r3, #0]
 801b74c:	1813      	adds	r3, r2, r0
 801b74e:	460a      	mov	r2, r1
 801b750:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 801b754:	4b2a      	ldr	r3, [pc, #168]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b756:	681a      	ldr	r2, [r3, #0]
 801b758:	897b      	ldrh	r3, [r7, #10]
 801b75a:	1c59      	adds	r1, r3, #1
 801b75c:	8179      	strh	r1, [r7, #10]
 801b75e:	4618      	mov	r0, r3
 801b760:	4b2a      	ldr	r3, [pc, #168]	; (801b80c <send_DHCP_DECLINE+0x29c>)
 801b762:	7859      	ldrb	r1, [r3, #1]
 801b764:	1813      	adds	r3, r2, r0
 801b766:	460a      	mov	r2, r1
 801b768:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 801b76c:	4b24      	ldr	r3, [pc, #144]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b76e:	681a      	ldr	r2, [r3, #0]
 801b770:	897b      	ldrh	r3, [r7, #10]
 801b772:	1c59      	adds	r1, r3, #1
 801b774:	8179      	strh	r1, [r7, #10]
 801b776:	4618      	mov	r0, r3
 801b778:	4b24      	ldr	r3, [pc, #144]	; (801b80c <send_DHCP_DECLINE+0x29c>)
 801b77a:	7899      	ldrb	r1, [r3, #2]
 801b77c:	1813      	adds	r3, r2, r0
 801b77e:	460a      	mov	r2, r1
 801b780:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 801b784:	4b1e      	ldr	r3, [pc, #120]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b786:	681a      	ldr	r2, [r3, #0]
 801b788:	897b      	ldrh	r3, [r7, #10]
 801b78a:	1c59      	adds	r1, r3, #1
 801b78c:	8179      	strh	r1, [r7, #10]
 801b78e:	4618      	mov	r0, r3
 801b790:	4b1e      	ldr	r3, [pc, #120]	; (801b80c <send_DHCP_DECLINE+0x29c>)
 801b792:	78d9      	ldrb	r1, [r3, #3]
 801b794:	1813      	adds	r3, r2, r0
 801b796:	460a      	mov	r2, r1
 801b798:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 801b79c:	4b18      	ldr	r3, [pc, #96]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b79e:	681a      	ldr	r2, [r3, #0]
 801b7a0:	897b      	ldrh	r3, [r7, #10]
 801b7a2:	1c59      	adds	r1, r3, #1
 801b7a4:	8179      	strh	r1, [r7, #10]
 801b7a6:	4413      	add	r3, r2
 801b7a8:	22ff      	movs	r2, #255	; 0xff
 801b7aa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 801b7ae:	897b      	ldrh	r3, [r7, #10]
 801b7b0:	60fb      	str	r3, [r7, #12]
 801b7b2:	e009      	b.n	801b7c8 <send_DHCP_DECLINE+0x258>
 801b7b4:	4b12      	ldr	r3, [pc, #72]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b7b6:	681a      	ldr	r2, [r3, #0]
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	4413      	add	r3, r2
 801b7bc:	33ec      	adds	r3, #236	; 0xec
 801b7be:	2200      	movs	r2, #0
 801b7c0:	701a      	strb	r2, [r3, #0]
 801b7c2:	68fb      	ldr	r3, [r7, #12]
 801b7c4:	3301      	adds	r3, #1
 801b7c6:	60fb      	str	r3, [r7, #12]
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 801b7ce:	dbf1      	blt.n	801b7b4 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 801b7d0:	23ff      	movs	r3, #255	; 0xff
 801b7d2:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 801b7d4:	23ff      	movs	r3, #255	; 0xff
 801b7d6:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 801b7d8:	23ff      	movs	r3, #255	; 0xff
 801b7da:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 801b7dc:	23ff      	movs	r3, #255	; 0xff
 801b7de:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 801b7e0:	4b0b      	ldr	r3, [pc, #44]	; (801b810 <send_DHCP_DECLINE+0x2a0>)
 801b7e2:	7818      	ldrb	r0, [r3, #0]
 801b7e4:	4b06      	ldr	r3, [pc, #24]	; (801b800 <send_DHCP_DECLINE+0x290>)
 801b7e6:	6819      	ldr	r1, [r3, #0]
 801b7e8:	1d3b      	adds	r3, r7, #4
 801b7ea:	2243      	movs	r2, #67	; 0x43
 801b7ec:	9200      	str	r2, [sp, #0]
 801b7ee:	f44f 7209 	mov.w	r2, #548	; 0x224
 801b7f2:	f7fe f823 	bl	801983c <sendto>
}
 801b7f6:	bf00      	nop
 801b7f8:	3710      	adds	r7, #16
 801b7fa:	46bd      	mov	sp, r7
 801b7fc:	bd80      	pop	{r7, pc}
 801b7fe:	bf00      	nop
 801b800:	200009d0 	.word	0x200009d0
 801b804:	200009d4 	.word	0x200009d4
 801b808:	200009b4 	.word	0x200009b4
 801b80c:	200009a8 	.word	0x200009a8
 801b810:	200009a5 	.word	0x200009a5

0801b814 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 801b814:	b590      	push	{r4, r7, lr}
 801b816:	b089      	sub	sp, #36	; 0x24
 801b818:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 801b81a:	2300      	movs	r3, #0
 801b81c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 801b81e:	4ba1      	ldr	r3, [pc, #644]	; (801baa4 <parseDHCPMSG+0x290>)
 801b820:	781b      	ldrb	r3, [r3, #0]
 801b822:	4618      	mov	r0, r3
 801b824:	f7fd f9e1 	bl	8018bea <getSn_RX_RSR>
 801b828:	4603      	mov	r3, r0
 801b82a:	823b      	strh	r3, [r7, #16]
 801b82c:	8a3b      	ldrh	r3, [r7, #16]
 801b82e:	2b00      	cmp	r3, #0
 801b830:	d011      	beq.n	801b856 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 801b832:	4b9c      	ldr	r3, [pc, #624]	; (801baa4 <parseDHCPMSG+0x290>)
 801b834:	7818      	ldrb	r0, [r3, #0]
 801b836:	4b9c      	ldr	r3, [pc, #624]	; (801baa8 <parseDHCPMSG+0x294>)
 801b838:	6819      	ldr	r1, [r3, #0]
 801b83a:	1d3c      	adds	r4, r7, #4
 801b83c:	8a3a      	ldrh	r2, [r7, #16]
 801b83e:	1cbb      	adds	r3, r7, #2
 801b840:	9300      	str	r3, [sp, #0]
 801b842:	4623      	mov	r3, r4
 801b844:	f7fe f930 	bl	8019aa8 <recvfrom>
 801b848:	4603      	mov	r3, r0
 801b84a:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 801b84c:	887b      	ldrh	r3, [r7, #2]
 801b84e:	2b43      	cmp	r3, #67	; 0x43
 801b850:	f040 81ed 	bne.w	801bc2e <parseDHCPMSG+0x41a>
 801b854:	e001      	b.n	801b85a <parseDHCPMSG+0x46>
   else return 0;
 801b856:	2300      	movs	r3, #0
 801b858:	e1eb      	b.n	801bc32 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b85a:	4b93      	ldr	r3, [pc, #588]	; (801baa8 <parseDHCPMSG+0x294>)
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	7f1a      	ldrb	r2, [r3, #28]
 801b860:	4b92      	ldr	r3, [pc, #584]	; (801baac <parseDHCPMSG+0x298>)
 801b862:	781b      	ldrb	r3, [r3, #0]
 801b864:	429a      	cmp	r2, r3
 801b866:	d124      	bne.n	801b8b2 <parseDHCPMSG+0x9e>
 801b868:	4b8f      	ldr	r3, [pc, #572]	; (801baa8 <parseDHCPMSG+0x294>)
 801b86a:	681b      	ldr	r3, [r3, #0]
 801b86c:	7f5a      	ldrb	r2, [r3, #29]
 801b86e:	4b8f      	ldr	r3, [pc, #572]	; (801baac <parseDHCPMSG+0x298>)
 801b870:	785b      	ldrb	r3, [r3, #1]
 801b872:	429a      	cmp	r2, r3
 801b874:	d11d      	bne.n	801b8b2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b876:	4b8c      	ldr	r3, [pc, #560]	; (801baa8 <parseDHCPMSG+0x294>)
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	7f9a      	ldrb	r2, [r3, #30]
 801b87c:	4b8b      	ldr	r3, [pc, #556]	; (801baac <parseDHCPMSG+0x298>)
 801b87e:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 801b880:	429a      	cmp	r2, r3
 801b882:	d116      	bne.n	801b8b2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b884:	4b88      	ldr	r3, [pc, #544]	; (801baa8 <parseDHCPMSG+0x294>)
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	7fda      	ldrb	r2, [r3, #31]
 801b88a:	4b88      	ldr	r3, [pc, #544]	; (801baac <parseDHCPMSG+0x298>)
 801b88c:	78db      	ldrb	r3, [r3, #3]
 801b88e:	429a      	cmp	r2, r3
 801b890:	d10f      	bne.n	801b8b2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b892:	4b85      	ldr	r3, [pc, #532]	; (801baa8 <parseDHCPMSG+0x294>)
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b89a:	4b84      	ldr	r3, [pc, #528]	; (801baac <parseDHCPMSG+0x298>)
 801b89c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	d107      	bne.n	801b8b2 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 801b8a2:	4b81      	ldr	r3, [pc, #516]	; (801baa8 <parseDHCPMSG+0x294>)
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b8aa:	4b80      	ldr	r3, [pc, #512]	; (801baac <parseDHCPMSG+0x298>)
 801b8ac:	795b      	ldrb	r3, [r3, #5]
 801b8ae:	429a      	cmp	r2, r3
 801b8b0:	d001      	beq.n	801b8b6 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	e1bd      	b.n	801bc32 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 801b8b6:	4b7e      	ldr	r3, [pc, #504]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8b8:	781b      	ldrb	r3, [r3, #0]
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	d10b      	bne.n	801b8d6 <parseDHCPMSG+0xc2>
 801b8be:	4b7c      	ldr	r3, [pc, #496]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8c0:	785b      	ldrb	r3, [r3, #1]
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	d107      	bne.n	801b8d6 <parseDHCPMSG+0xc2>
 801b8c6:	4b7a      	ldr	r3, [pc, #488]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8c8:	789b      	ldrb	r3, [r3, #2]
 801b8ca:	2b00      	cmp	r3, #0
 801b8cc:	d103      	bne.n	801b8d6 <parseDHCPMSG+0xc2>
 801b8ce:	4b78      	ldr	r3, [pc, #480]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8d0:	78db      	ldrb	r3, [r3, #3]
 801b8d2:	2b00      	cmp	r3, #0
 801b8d4:	d029      	beq.n	801b92a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b8d6:	793a      	ldrb	r2, [r7, #4]
 801b8d8:	4b75      	ldr	r3, [pc, #468]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8da:	781b      	ldrb	r3, [r3, #0]
 801b8dc:	429a      	cmp	r2, r3
 801b8de:	d10e      	bne.n	801b8fe <parseDHCPMSG+0xea>
 801b8e0:	797a      	ldrb	r2, [r7, #5]
 801b8e2:	4b73      	ldr	r3, [pc, #460]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8e4:	785b      	ldrb	r3, [r3, #1]
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	d109      	bne.n	801b8fe <parseDHCPMSG+0xea>
 801b8ea:	79ba      	ldrb	r2, [r7, #6]
 801b8ec:	4b70      	ldr	r3, [pc, #448]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8ee:	789b      	ldrb	r3, [r3, #2]
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	d104      	bne.n	801b8fe <parseDHCPMSG+0xea>
 801b8f4:	79fa      	ldrb	r2, [r7, #7]
 801b8f6:	4b6e      	ldr	r3, [pc, #440]	; (801bab0 <parseDHCPMSG+0x29c>)
 801b8f8:	78db      	ldrb	r3, [r3, #3]
 801b8fa:	429a      	cmp	r2, r3
 801b8fc:	d015      	beq.n	801b92a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b8fe:	793a      	ldrb	r2, [r7, #4]
 801b900:	4b6c      	ldr	r3, [pc, #432]	; (801bab4 <parseDHCPMSG+0x2a0>)
 801b902:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 801b904:	429a      	cmp	r2, r3
 801b906:	d10e      	bne.n	801b926 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 801b908:	797a      	ldrb	r2, [r7, #5]
 801b90a:	4b6a      	ldr	r3, [pc, #424]	; (801bab4 <parseDHCPMSG+0x2a0>)
 801b90c:	785b      	ldrb	r3, [r3, #1]
 801b90e:	429a      	cmp	r2, r3
 801b910:	d109      	bne.n	801b926 <parseDHCPMSG+0x112>
 801b912:	79ba      	ldrb	r2, [r7, #6]
 801b914:	4b67      	ldr	r3, [pc, #412]	; (801bab4 <parseDHCPMSG+0x2a0>)
 801b916:	789b      	ldrb	r3, [r3, #2]
 801b918:	429a      	cmp	r2, r3
 801b91a:	d104      	bne.n	801b926 <parseDHCPMSG+0x112>
 801b91c:	79fa      	ldrb	r2, [r7, #7]
 801b91e:	4b65      	ldr	r3, [pc, #404]	; (801bab4 <parseDHCPMSG+0x2a0>)
 801b920:	78db      	ldrb	r3, [r3, #3]
 801b922:	429a      	cmp	r2, r3
 801b924:	d001      	beq.n	801b92a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 801b926:	2300      	movs	r3, #0
 801b928:	e183      	b.n	801bc32 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 801b92a:	4b5f      	ldr	r3, [pc, #380]	; (801baa8 <parseDHCPMSG+0x294>)
 801b92c:	681b      	ldr	r3, [r3, #0]
 801b92e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 801b930:	697b      	ldr	r3, [r7, #20]
 801b932:	33f0      	adds	r3, #240	; 0xf0
 801b934:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 801b936:	8a3b      	ldrh	r3, [r7, #16]
 801b938:	3bf0      	subs	r3, #240	; 0xf0
 801b93a:	697a      	ldr	r2, [r7, #20]
 801b93c:	4413      	add	r3, r2
 801b93e:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 801b940:	e170      	b.n	801bc24 <parseDHCPMSG+0x410>

			switch ( *p ) {
 801b942:	697b      	ldr	r3, [r7, #20]
 801b944:	781b      	ldrb	r3, [r3, #0]
 801b946:	2b36      	cmp	r3, #54	; 0x36
 801b948:	dc76      	bgt.n	801ba38 <parseDHCPMSG+0x224>
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	f2c0 815d 	blt.w	801bc0a <parseDHCPMSG+0x3f6>
 801b950:	2b36      	cmp	r3, #54	; 0x36
 801b952:	f200 815a 	bhi.w	801bc0a <parseDHCPMSG+0x3f6>
 801b956:	a201      	add	r2, pc, #4	; (adr r2, 801b95c <parseDHCPMSG+0x148>)
 801b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b95c:	0801ba45 	.word	0x0801ba45
 801b960:	0801ba65 	.word	0x0801ba65
 801b964:	0801bc0b 	.word	0x0801bc0b
 801b968:	0801babd 	.word	0x0801babd
 801b96c:	0801bc0b 	.word	0x0801bc0b
 801b970:	0801bc0b 	.word	0x0801bc0b
 801b974:	0801bb09 	.word	0x0801bb09
 801b978:	0801bc0b 	.word	0x0801bc0b
 801b97c:	0801bc0b 	.word	0x0801bc0b
 801b980:	0801bc0b 	.word	0x0801bc0b
 801b984:	0801bc0b 	.word	0x0801bc0b
 801b988:	0801bc0b 	.word	0x0801bc0b
 801b98c:	0801bc0b 	.word	0x0801bc0b
 801b990:	0801bc0b 	.word	0x0801bc0b
 801b994:	0801bc0b 	.word	0x0801bc0b
 801b998:	0801bc0b 	.word	0x0801bc0b
 801b99c:	0801bc0b 	.word	0x0801bc0b
 801b9a0:	0801bc0b 	.word	0x0801bc0b
 801b9a4:	0801bc0b 	.word	0x0801bc0b
 801b9a8:	0801bc0b 	.word	0x0801bc0b
 801b9ac:	0801bc0b 	.word	0x0801bc0b
 801b9b0:	0801bc0b 	.word	0x0801bc0b
 801b9b4:	0801bc0b 	.word	0x0801bc0b
 801b9b8:	0801bc0b 	.word	0x0801bc0b
 801b9bc:	0801bc0b 	.word	0x0801bc0b
 801b9c0:	0801bc0b 	.word	0x0801bc0b
 801b9c4:	0801bc0b 	.word	0x0801bc0b
 801b9c8:	0801bc0b 	.word	0x0801bc0b
 801b9cc:	0801bc0b 	.word	0x0801bc0b
 801b9d0:	0801bc0b 	.word	0x0801bc0b
 801b9d4:	0801bc0b 	.word	0x0801bc0b
 801b9d8:	0801bc0b 	.word	0x0801bc0b
 801b9dc:	0801bc0b 	.word	0x0801bc0b
 801b9e0:	0801bc0b 	.word	0x0801bc0b
 801b9e4:	0801bc0b 	.word	0x0801bc0b
 801b9e8:	0801bc0b 	.word	0x0801bc0b
 801b9ec:	0801bc0b 	.word	0x0801bc0b
 801b9f0:	0801bc0b 	.word	0x0801bc0b
 801b9f4:	0801bc0b 	.word	0x0801bc0b
 801b9f8:	0801bc0b 	.word	0x0801bc0b
 801b9fc:	0801bc0b 	.word	0x0801bc0b
 801ba00:	0801bc0b 	.word	0x0801bc0b
 801ba04:	0801bc0b 	.word	0x0801bc0b
 801ba08:	0801bc0b 	.word	0x0801bc0b
 801ba0c:	0801bc0b 	.word	0x0801bc0b
 801ba10:	0801bc0b 	.word	0x0801bc0b
 801ba14:	0801bc0b 	.word	0x0801bc0b
 801ba18:	0801bc0b 	.word	0x0801bc0b
 801ba1c:	0801bc0b 	.word	0x0801bc0b
 801ba20:	0801bc0b 	.word	0x0801bc0b
 801ba24:	0801bc0b 	.word	0x0801bc0b
 801ba28:	0801bb55 	.word	0x0801bb55
 801ba2c:	0801bc0b 	.word	0x0801bc0b
 801ba30:	0801ba4d 	.word	0x0801ba4d
 801ba34:	0801bbb1 	.word	0x0801bbb1
 801ba38:	2bff      	cmp	r3, #255	; 0xff
 801ba3a:	f040 80e6 	bne.w	801bc0a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	617b      	str	r3, [r7, #20]
   				break;
 801ba42:	e0ef      	b.n	801bc24 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 801ba44:	697b      	ldr	r3, [r7, #20]
 801ba46:	3301      	adds	r3, #1
 801ba48:	617b      	str	r3, [r7, #20]
   				break;
 801ba4a:	e0eb      	b.n	801bc24 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 801ba4c:	697b      	ldr	r3, [r7, #20]
 801ba4e:	3301      	adds	r3, #1
 801ba50:	617b      	str	r3, [r7, #20]
   				p++;
 801ba52:	697b      	ldr	r3, [r7, #20]
 801ba54:	3301      	adds	r3, #1
 801ba56:	617b      	str	r3, [r7, #20]
   				type = *p++;
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	1c5a      	adds	r2, r3, #1
 801ba5c:	617a      	str	r2, [r7, #20]
 801ba5e:	781b      	ldrb	r3, [r3, #0]
 801ba60:	74fb      	strb	r3, [r7, #19]
   				break;
 801ba62:	e0df      	b.n	801bc24 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 801ba64:	697b      	ldr	r3, [r7, #20]
 801ba66:	3301      	adds	r3, #1
 801ba68:	617b      	str	r3, [r7, #20]
   				p++;
 801ba6a:	697b      	ldr	r3, [r7, #20]
 801ba6c:	3301      	adds	r3, #1
 801ba6e:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 801ba70:	697b      	ldr	r3, [r7, #20]
 801ba72:	1c5a      	adds	r2, r3, #1
 801ba74:	617a      	str	r2, [r7, #20]
 801ba76:	781a      	ldrb	r2, [r3, #0]
 801ba78:	4b0f      	ldr	r3, [pc, #60]	; (801bab8 <parseDHCPMSG+0x2a4>)
 801ba7a:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 801ba7c:	697b      	ldr	r3, [r7, #20]
 801ba7e:	1c5a      	adds	r2, r3, #1
 801ba80:	617a      	str	r2, [r7, #20]
 801ba82:	781a      	ldrb	r2, [r3, #0]
 801ba84:	4b0c      	ldr	r3, [pc, #48]	; (801bab8 <parseDHCPMSG+0x2a4>)
 801ba86:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 801ba88:	697b      	ldr	r3, [r7, #20]
 801ba8a:	1c5a      	adds	r2, r3, #1
 801ba8c:	617a      	str	r2, [r7, #20]
 801ba8e:	781a      	ldrb	r2, [r3, #0]
 801ba90:	4b09      	ldr	r3, [pc, #36]	; (801bab8 <parseDHCPMSG+0x2a4>)
 801ba92:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 801ba94:	697b      	ldr	r3, [r7, #20]
 801ba96:	1c5a      	adds	r2, r3, #1
 801ba98:	617a      	str	r2, [r7, #20]
 801ba9a:	781a      	ldrb	r2, [r3, #0]
 801ba9c:	4b06      	ldr	r3, [pc, #24]	; (801bab8 <parseDHCPMSG+0x2a4>)
 801ba9e:	70da      	strb	r2, [r3, #3]
   				break;
 801baa0:	e0c0      	b.n	801bc24 <parseDHCPMSG+0x410>
 801baa2:	bf00      	nop
 801baa4:	200009a5 	.word	0x200009a5
 801baa8:	200009d0 	.word	0x200009d0
 801baac:	200009d4 	.word	0x200009d4
 801bab0:	200009a8 	.word	0x200009a8
 801bab4:	200009ac 	.word	0x200009ac
 801bab8:	200009bc 	.word	0x200009bc
   			case routersOnSubnet :
   				p++;
 801babc:	697b      	ldr	r3, [r7, #20]
 801babe:	3301      	adds	r3, #1
 801bac0:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801bac2:	697b      	ldr	r3, [r7, #20]
 801bac4:	1c5a      	adds	r2, r3, #1
 801bac6:	617a      	str	r2, [r7, #20]
 801bac8:	781b      	ldrb	r3, [r3, #0]
 801baca:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 801bacc:	697b      	ldr	r3, [r7, #20]
 801bace:	1c5a      	adds	r2, r3, #1
 801bad0:	617a      	str	r2, [r7, #20]
 801bad2:	781a      	ldrb	r2, [r3, #0]
 801bad4:	4b59      	ldr	r3, [pc, #356]	; (801bc3c <parseDHCPMSG+0x428>)
 801bad6:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 801bad8:	697b      	ldr	r3, [r7, #20]
 801bada:	1c5a      	adds	r2, r3, #1
 801badc:	617a      	str	r2, [r7, #20]
 801bade:	781a      	ldrb	r2, [r3, #0]
 801bae0:	4b56      	ldr	r3, [pc, #344]	; (801bc3c <parseDHCPMSG+0x428>)
 801bae2:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 801bae4:	697b      	ldr	r3, [r7, #20]
 801bae6:	1c5a      	adds	r2, r3, #1
 801bae8:	617a      	str	r2, [r7, #20]
 801baea:	781a      	ldrb	r2, [r3, #0]
 801baec:	4b53      	ldr	r3, [pc, #332]	; (801bc3c <parseDHCPMSG+0x428>)
 801baee:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 801baf0:	697b      	ldr	r3, [r7, #20]
 801baf2:	1c5a      	adds	r2, r3, #1
 801baf4:	617a      	str	r2, [r7, #20]
 801baf6:	781a      	ldrb	r2, [r3, #0]
 801baf8:	4b50      	ldr	r3, [pc, #320]	; (801bc3c <parseDHCPMSG+0x428>)
 801bafa:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801bafc:	7afb      	ldrb	r3, [r7, #11]
 801bafe:	3b04      	subs	r3, #4
 801bb00:	697a      	ldr	r2, [r7, #20]
 801bb02:	4413      	add	r3, r2
 801bb04:	617b      	str	r3, [r7, #20]
   				break;
 801bb06:	e08d      	b.n	801bc24 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	3301      	adds	r3, #1
 801bb0c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 801bb0e:	697b      	ldr	r3, [r7, #20]
 801bb10:	1c5a      	adds	r2, r3, #1
 801bb12:	617a      	str	r2, [r7, #20]
 801bb14:	781b      	ldrb	r3, [r3, #0]
 801bb16:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 801bb18:	697b      	ldr	r3, [r7, #20]
 801bb1a:	1c5a      	adds	r2, r3, #1
 801bb1c:	617a      	str	r2, [r7, #20]
 801bb1e:	781a      	ldrb	r2, [r3, #0]
 801bb20:	4b47      	ldr	r3, [pc, #284]	; (801bc40 <parseDHCPMSG+0x42c>)
 801bb22:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 801bb24:	697b      	ldr	r3, [r7, #20]
 801bb26:	1c5a      	adds	r2, r3, #1
 801bb28:	617a      	str	r2, [r7, #20]
 801bb2a:	781a      	ldrb	r2, [r3, #0]
 801bb2c:	4b44      	ldr	r3, [pc, #272]	; (801bc40 <parseDHCPMSG+0x42c>)
 801bb2e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 801bb30:	697b      	ldr	r3, [r7, #20]
 801bb32:	1c5a      	adds	r2, r3, #1
 801bb34:	617a      	str	r2, [r7, #20]
 801bb36:	781a      	ldrb	r2, [r3, #0]
 801bb38:	4b41      	ldr	r3, [pc, #260]	; (801bc40 <parseDHCPMSG+0x42c>)
 801bb3a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 801bb3c:	697b      	ldr	r3, [r7, #20]
 801bb3e:	1c5a      	adds	r2, r3, #1
 801bb40:	617a      	str	r2, [r7, #20]
 801bb42:	781a      	ldrb	r2, [r3, #0]
 801bb44:	4b3e      	ldr	r3, [pc, #248]	; (801bc40 <parseDHCPMSG+0x42c>)
 801bb46:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 801bb48:	7afb      	ldrb	r3, [r7, #11]
 801bb4a:	3b04      	subs	r3, #4
 801bb4c:	697a      	ldr	r2, [r7, #20]
 801bb4e:	4413      	add	r3, r2
 801bb50:	617b      	str	r3, [r7, #20]
   				break;
 801bb52:	e067      	b.n	801bc24 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 801bb54:	697b      	ldr	r3, [r7, #20]
 801bb56:	3301      	adds	r3, #1
 801bb58:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bb5a:	697b      	ldr	r3, [r7, #20]
 801bb5c:	1c5a      	adds	r2, r3, #1
 801bb5e:	617a      	str	r2, [r7, #20]
 801bb60:	781b      	ldrb	r3, [r3, #0]
 801bb62:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 801bb64:	697b      	ldr	r3, [r7, #20]
 801bb66:	1c5a      	adds	r2, r3, #1
 801bb68:	617a      	str	r2, [r7, #20]
 801bb6a:	781b      	ldrb	r3, [r3, #0]
 801bb6c:	461a      	mov	r2, r3
 801bb6e:	4b35      	ldr	r3, [pc, #212]	; (801bc44 <parseDHCPMSG+0x430>)
 801bb70:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bb72:	4b34      	ldr	r3, [pc, #208]	; (801bc44 <parseDHCPMSG+0x430>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	021a      	lsls	r2, r3, #8
 801bb78:	697b      	ldr	r3, [r7, #20]
 801bb7a:	1c59      	adds	r1, r3, #1
 801bb7c:	6179      	str	r1, [r7, #20]
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	4413      	add	r3, r2
 801bb82:	4a30      	ldr	r2, [pc, #192]	; (801bc44 <parseDHCPMSG+0x430>)
 801bb84:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bb86:	4b2f      	ldr	r3, [pc, #188]	; (801bc44 <parseDHCPMSG+0x430>)
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	021a      	lsls	r2, r3, #8
 801bb8c:	697b      	ldr	r3, [r7, #20]
 801bb8e:	1c59      	adds	r1, r3, #1
 801bb90:	6179      	str	r1, [r7, #20]
 801bb92:	781b      	ldrb	r3, [r3, #0]
 801bb94:	4413      	add	r3, r2
 801bb96:	4a2b      	ldr	r2, [pc, #172]	; (801bc44 <parseDHCPMSG+0x430>)
 801bb98:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 801bb9a:	4b2a      	ldr	r3, [pc, #168]	; (801bc44 <parseDHCPMSG+0x430>)
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	021a      	lsls	r2, r3, #8
 801bba0:	697b      	ldr	r3, [r7, #20]
 801bba2:	1c59      	adds	r1, r3, #1
 801bba4:	6179      	str	r1, [r7, #20]
 801bba6:	781b      	ldrb	r3, [r3, #0]
 801bba8:	4413      	add	r3, r2
 801bbaa:	4a26      	ldr	r2, [pc, #152]	; (801bc44 <parseDHCPMSG+0x430>)
 801bbac:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 801bbae:	e039      	b.n	801bc24 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 801bbb0:	697b      	ldr	r3, [r7, #20]
 801bbb2:	3301      	adds	r3, #1
 801bbb4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bbb6:	697b      	ldr	r3, [r7, #20]
 801bbb8:	1c5a      	adds	r2, r3, #1
 801bbba:	617a      	str	r2, [r7, #20]
 801bbbc:	781b      	ldrb	r3, [r3, #0]
 801bbbe:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 801bbc0:	697b      	ldr	r3, [r7, #20]
 801bbc2:	1c5a      	adds	r2, r3, #1
 801bbc4:	617a      	str	r2, [r7, #20]
 801bbc6:	781a      	ldrb	r2, [r3, #0]
 801bbc8:	4b1f      	ldr	r3, [pc, #124]	; (801bc48 <parseDHCPMSG+0x434>)
 801bbca:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 801bbcc:	697b      	ldr	r3, [r7, #20]
 801bbce:	1c5a      	adds	r2, r3, #1
 801bbd0:	617a      	str	r2, [r7, #20]
 801bbd2:	781a      	ldrb	r2, [r3, #0]
 801bbd4:	4b1c      	ldr	r3, [pc, #112]	; (801bc48 <parseDHCPMSG+0x434>)
 801bbd6:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 801bbd8:	697b      	ldr	r3, [r7, #20]
 801bbda:	1c5a      	adds	r2, r3, #1
 801bbdc:	617a      	str	r2, [r7, #20]
 801bbde:	781a      	ldrb	r2, [r3, #0]
 801bbe0:	4b19      	ldr	r3, [pc, #100]	; (801bc48 <parseDHCPMSG+0x434>)
 801bbe2:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 801bbe4:	697b      	ldr	r3, [r7, #20]
 801bbe6:	1c5a      	adds	r2, r3, #1
 801bbe8:	617a      	str	r2, [r7, #20]
 801bbea:	781a      	ldrb	r2, [r3, #0]
 801bbec:	4b16      	ldr	r3, [pc, #88]	; (801bc48 <parseDHCPMSG+0x434>)
 801bbee:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 801bbf0:	793a      	ldrb	r2, [r7, #4]
 801bbf2:	4b16      	ldr	r3, [pc, #88]	; (801bc4c <parseDHCPMSG+0x438>)
 801bbf4:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 801bbf6:	797a      	ldrb	r2, [r7, #5]
 801bbf8:	4b14      	ldr	r3, [pc, #80]	; (801bc4c <parseDHCPMSG+0x438>)
 801bbfa:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 801bbfc:	79ba      	ldrb	r2, [r7, #6]
 801bbfe:	4b13      	ldr	r3, [pc, #76]	; (801bc4c <parseDHCPMSG+0x438>)
 801bc00:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 801bc02:	79fa      	ldrb	r2, [r7, #7]
 801bc04:	4b11      	ldr	r3, [pc, #68]	; (801bc4c <parseDHCPMSG+0x438>)
 801bc06:	70da      	strb	r2, [r3, #3]
   				break;
 801bc08:	e00c      	b.n	801bc24 <parseDHCPMSG+0x410>
   			default :
   				p++;
 801bc0a:	697b      	ldr	r3, [r7, #20]
 801bc0c:	3301      	adds	r3, #1
 801bc0e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 801bc10:	697b      	ldr	r3, [r7, #20]
 801bc12:	1c5a      	adds	r2, r3, #1
 801bc14:	617a      	str	r2, [r7, #20]
 801bc16:	781b      	ldrb	r3, [r3, #0]
 801bc18:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 801bc1a:	7afb      	ldrb	r3, [r7, #11]
 801bc1c:	697a      	ldr	r2, [r7, #20]
 801bc1e:	4413      	add	r3, r2
 801bc20:	617b      	str	r3, [r7, #20]
   				break;
 801bc22:	bf00      	nop
		while ( p < e ) {
 801bc24:	697a      	ldr	r2, [r7, #20]
 801bc26:	68fb      	ldr	r3, [r7, #12]
 801bc28:	429a      	cmp	r2, r3
 801bc2a:	f4ff ae8a 	bcc.w	801b942 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 801bc2e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801bc32:	4618      	mov	r0, r3
 801bc34:	371c      	adds	r7, #28
 801bc36:	46bd      	mov	sp, r7
 801bc38:	bd90      	pop	{r4, r7, pc}
 801bc3a:	bf00      	nop
 801bc3c:	200009b8 	.word	0x200009b8
 801bc40:	200009c0 	.word	0x200009c0
 801bc44:	200000f0 	.word	0x200000f0
 801bc48:	200009a8 	.word	0x200009a8
 801bc4c:	200009ac 	.word	0x200009ac

0801bc50 <DHCP_run>:

uint8_t DHCP_run(void)
{
 801bc50:	b580      	push	{r7, lr}
 801bc52:	b082      	sub	sp, #8
 801bc54:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 801bc56:	4b7f      	ldr	r3, [pc, #508]	; (801be54 <DHCP_run+0x204>)
 801bc58:	f993 3000 	ldrsb.w	r3, [r3]
 801bc5c:	2b06      	cmp	r3, #6
 801bc5e:	d101      	bne.n	801bc64 <DHCP_run+0x14>
 801bc60:	2305      	movs	r3, #5
 801bc62:	e0f3      	b.n	801be4c <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 801bc64:	4b7c      	ldr	r3, [pc, #496]	; (801be58 <DHCP_run+0x208>)
 801bc66:	781b      	ldrb	r3, [r3, #0]
 801bc68:	009b      	lsls	r3, r3, #2
 801bc6a:	3301      	adds	r3, #1
 801bc6c:	00db      	lsls	r3, r3, #3
 801bc6e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801bc72:	4618      	mov	r0, r3
 801bc74:	f7fc fe14 	bl	80188a0 <WIZCHIP_READ>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	2b22      	cmp	r3, #34	; 0x22
 801bc7c:	d006      	beq.n	801bc8c <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 801bc7e:	4b76      	ldr	r3, [pc, #472]	; (801be58 <DHCP_run+0x208>)
 801bc80:	7818      	ldrb	r0, [r3, #0]
 801bc82:	2300      	movs	r3, #0
 801bc84:	2244      	movs	r2, #68	; 0x44
 801bc86:	2102      	movs	r1, #2
 801bc88:	f7fd f8fa 	bl	8018e80 <socket>

	ret = DHCP_RUNNING;
 801bc8c:	2301      	movs	r3, #1
 801bc8e:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 801bc90:	f7ff fdc0 	bl	801b814 <parseDHCPMSG>
 801bc94:	4603      	mov	r3, r0
 801bc96:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 801bc98:	4b6e      	ldr	r3, [pc, #440]	; (801be54 <DHCP_run+0x204>)
 801bc9a:	f993 3000 	ldrsb.w	r3, [r3]
 801bc9e:	2b04      	cmp	r3, #4
 801bca0:	f200 80d0 	bhi.w	801be44 <DHCP_run+0x1f4>
 801bca4:	a201      	add	r2, pc, #4	; (adr r2, 801bcac <DHCP_run+0x5c>)
 801bca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcaa:	bf00      	nop
 801bcac:	0801bcc1 	.word	0x0801bcc1
 801bcb0:	0801bce5 	.word	0x0801bce5
 801bcb4:	0801bd29 	.word	0x0801bd29
 801bcb8:	0801bd79 	.word	0x0801bd79
 801bcbc:	0801bdd3 	.word	0x0801bdd3
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 801bcc0:	4b66      	ldr	r3, [pc, #408]	; (801be5c <DHCP_run+0x20c>)
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 801bcc6:	4b65      	ldr	r3, [pc, #404]	; (801be5c <DHCP_run+0x20c>)
 801bcc8:	2200      	movs	r2, #0
 801bcca:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 801bccc:	4b63      	ldr	r3, [pc, #396]	; (801be5c <DHCP_run+0x20c>)
 801bcce:	2200      	movs	r2, #0
 801bcd0:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 801bcd2:	4b62      	ldr	r3, [pc, #392]	; (801be5c <DHCP_run+0x20c>)
 801bcd4:	2200      	movs	r2, #0
 801bcd6:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 801bcd8:	f7fe fffa 	bl	801acd0 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 801bcdc:	4b5d      	ldr	r3, [pc, #372]	; (801be54 <DHCP_run+0x204>)
 801bcde:	2201      	movs	r2, #1
 801bce0:	701a      	strb	r2, [r3, #0]
   		break;
 801bce2:	e0b2      	b.n	801be4a <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 801bce4:	79bb      	ldrb	r3, [r7, #6]
 801bce6:	2b02      	cmp	r3, #2
 801bce8:	d119      	bne.n	801bd1e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 801bcea:	4b5d      	ldr	r3, [pc, #372]	; (801be60 <DHCP_run+0x210>)
 801bcec:	681b      	ldr	r3, [r3, #0]
 801bcee:	7c1a      	ldrb	r2, [r3, #16]
 801bcf0:	4b5a      	ldr	r3, [pc, #360]	; (801be5c <DHCP_run+0x20c>)
 801bcf2:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 801bcf4:	4b5a      	ldr	r3, [pc, #360]	; (801be60 <DHCP_run+0x210>)
 801bcf6:	681b      	ldr	r3, [r3, #0]
 801bcf8:	7c5a      	ldrb	r2, [r3, #17]
 801bcfa:	4b58      	ldr	r3, [pc, #352]	; (801be5c <DHCP_run+0x20c>)
 801bcfc:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 801bcfe:	4b58      	ldr	r3, [pc, #352]	; (801be60 <DHCP_run+0x210>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	7c9a      	ldrb	r2, [r3, #18]
 801bd04:	4b55      	ldr	r3, [pc, #340]	; (801be5c <DHCP_run+0x20c>)
 801bd06:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 801bd08:	4b55      	ldr	r3, [pc, #340]	; (801be60 <DHCP_run+0x210>)
 801bd0a:	681b      	ldr	r3, [r3, #0]
 801bd0c:	7cda      	ldrb	r2, [r3, #19]
 801bd0e:	4b53      	ldr	r3, [pc, #332]	; (801be5c <DHCP_run+0x20c>)
 801bd10:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 801bd12:	f7ff f9a3 	bl	801b05c <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 801bd16:	4b4f      	ldr	r3, [pc, #316]	; (801be54 <DHCP_run+0x204>)
 801bd18:	2202      	movs	r2, #2
 801bd1a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 801bd1c:	e095      	b.n	801be4a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bd1e:	f000 f8b1 	bl	801be84 <check_DHCP_timeout>
 801bd22:	4603      	mov	r3, r0
 801bd24:	71fb      	strb	r3, [r7, #7]
         break;
 801bd26:	e090      	b.n	801be4a <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 801bd28:	79bb      	ldrb	r3, [r7, #6]
 801bd2a:	2b05      	cmp	r3, #5
 801bd2c:	d116      	bne.n	801bd5c <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 801bd2e:	f000 f8e9 	bl	801bf04 <check_DHCP_leasedIP>
 801bd32:	4603      	mov	r3, r0
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d008      	beq.n	801bd4a <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 801bd38:	4b4a      	ldr	r3, [pc, #296]	; (801be64 <DHCP_run+0x214>)
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	4798      	blx	r3
					reset_DHCP_timeout();
 801bd3e:	f000 f9b9 	bl	801c0b4 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 801bd42:	4b44      	ldr	r3, [pc, #272]	; (801be54 <DHCP_run+0x204>)
 801bd44:	2203      	movs	r2, #3
 801bd46:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 801bd48:	e07f      	b.n	801be4a <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 801bd4a:	f000 f9b3 	bl	801c0b4 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 801bd4e:	4b46      	ldr	r3, [pc, #280]	; (801be68 <DHCP_run+0x218>)
 801bd50:	681b      	ldr	r3, [r3, #0]
 801bd52:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 801bd54:	4b3f      	ldr	r3, [pc, #252]	; (801be54 <DHCP_run+0x204>)
 801bd56:	2200      	movs	r2, #0
 801bd58:	701a      	strb	r2, [r3, #0]
		break;
 801bd5a:	e076      	b.n	801be4a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801bd5c:	79bb      	ldrb	r3, [r7, #6]
 801bd5e:	2b06      	cmp	r3, #6
 801bd60:	d105      	bne.n	801bd6e <DHCP_run+0x11e>
				reset_DHCP_timeout();
 801bd62:	f000 f9a7 	bl	801c0b4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801bd66:	4b3b      	ldr	r3, [pc, #236]	; (801be54 <DHCP_run+0x204>)
 801bd68:	2201      	movs	r2, #1
 801bd6a:	701a      	strb	r2, [r3, #0]
		break;
 801bd6c:	e06d      	b.n	801be4a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801bd6e:	f000 f889 	bl	801be84 <check_DHCP_timeout>
 801bd72:	4603      	mov	r3, r0
 801bd74:	71fb      	strb	r3, [r7, #7]
		break;
 801bd76:	e068      	b.n	801be4a <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 801bd78:	2304      	movs	r3, #4
 801bd7a:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/4) < dhcp_tick_1s)) {
 801bd7c:	4b3b      	ldr	r3, [pc, #236]	; (801be6c <DHCP_run+0x21c>)
 801bd7e:	681b      	ldr	r3, [r3, #0]
 801bd80:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd84:	d060      	beq.n	801be48 <DHCP_run+0x1f8>
 801bd86:	4b39      	ldr	r3, [pc, #228]	; (801be6c <DHCP_run+0x21c>)
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	089a      	lsrs	r2, r3, #2
 801bd8c:	4b38      	ldr	r3, [pc, #224]	; (801be70 <DHCP_run+0x220>)
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	429a      	cmp	r2, r3
 801bd92:	d259      	bcs.n	801be48 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 801bd94:	2300      	movs	r3, #0
 801bd96:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 801bd98:	4b30      	ldr	r3, [pc, #192]	; (801be5c <DHCP_run+0x20c>)
 801bd9a:	781a      	ldrb	r2, [r3, #0]
 801bd9c:	4b35      	ldr	r3, [pc, #212]	; (801be74 <DHCP_run+0x224>)
 801bd9e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 801bda0:	4b2e      	ldr	r3, [pc, #184]	; (801be5c <DHCP_run+0x20c>)
 801bda2:	785a      	ldrb	r2, [r3, #1]
 801bda4:	4b33      	ldr	r3, [pc, #204]	; (801be74 <DHCP_run+0x224>)
 801bda6:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 801bda8:	4b2c      	ldr	r3, [pc, #176]	; (801be5c <DHCP_run+0x20c>)
 801bdaa:	789a      	ldrb	r2, [r3, #2]
 801bdac:	4b31      	ldr	r3, [pc, #196]	; (801be74 <DHCP_run+0x224>)
 801bdae:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 801bdb0:	4b2a      	ldr	r3, [pc, #168]	; (801be5c <DHCP_run+0x20c>)
 801bdb2:	78da      	ldrb	r2, [r3, #3]
 801bdb4:	4b2f      	ldr	r3, [pc, #188]	; (801be74 <DHCP_run+0x224>)
 801bdb6:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 801bdb8:	4b2f      	ldr	r3, [pc, #188]	; (801be78 <DHCP_run+0x228>)
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	3301      	adds	r3, #1
 801bdbe:	4a2e      	ldr	r2, [pc, #184]	; (801be78 <DHCP_run+0x228>)
 801bdc0:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 801bdc2:	f7ff f94b 	bl	801b05c <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 801bdc6:	f000 f975 	bl	801c0b4 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 801bdca:	4b22      	ldr	r3, [pc, #136]	; (801be54 <DHCP_run+0x204>)
 801bdcc:	2204      	movs	r2, #4
 801bdce:	701a      	strb	r2, [r3, #0]
			}
		break;
 801bdd0:	e03a      	b.n	801be48 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 801bdd2:	2304      	movs	r3, #4
 801bdd4:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 801bdd6:	79bb      	ldrb	r3, [r7, #6]
 801bdd8:	2b05      	cmp	r3, #5
 801bdda:	d125      	bne.n	801be28 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 801bddc:	4b27      	ldr	r3, [pc, #156]	; (801be7c <DHCP_run+0x22c>)
 801bdde:	2200      	movs	r2, #0
 801bde0:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801bde2:	4b24      	ldr	r3, [pc, #144]	; (801be74 <DHCP_run+0x224>)
 801bde4:	781a      	ldrb	r2, [r3, #0]
 801bde6:	4b1d      	ldr	r3, [pc, #116]	; (801be5c <DHCP_run+0x20c>)
 801bde8:	781b      	ldrb	r3, [r3, #0]
 801bdea:	429a      	cmp	r2, r3
 801bdec:	d111      	bne.n	801be12 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801bdee:	4b21      	ldr	r3, [pc, #132]	; (801be74 <DHCP_run+0x224>)
 801bdf0:	785a      	ldrb	r2, [r3, #1]
 801bdf2:	4b1a      	ldr	r3, [pc, #104]	; (801be5c <DHCP_run+0x20c>)
 801bdf4:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 801bdf6:	429a      	cmp	r2, r3
 801bdf8:	d10b      	bne.n	801be12 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801bdfa:	4b1e      	ldr	r3, [pc, #120]	; (801be74 <DHCP_run+0x224>)
 801bdfc:	789a      	ldrb	r2, [r3, #2]
 801bdfe:	4b17      	ldr	r3, [pc, #92]	; (801be5c <DHCP_run+0x20c>)
 801be00:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 801be02:	429a      	cmp	r2, r3
 801be04:	d105      	bne.n	801be12 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 801be06:	4b1b      	ldr	r3, [pc, #108]	; (801be74 <DHCP_run+0x224>)
 801be08:	78da      	ldrb	r2, [r3, #3]
 801be0a:	4b14      	ldr	r3, [pc, #80]	; (801be5c <DHCP_run+0x20c>)
 801be0c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 801be0e:	429a      	cmp	r2, r3
 801be10:	d004      	beq.n	801be1c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 801be12:	2303      	movs	r3, #3
 801be14:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 801be16:	4b1a      	ldr	r3, [pc, #104]	; (801be80 <DHCP_run+0x230>)
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 801be1c:	f000 f94a 	bl	801c0b4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 801be20:	4b0c      	ldr	r3, [pc, #48]	; (801be54 <DHCP_run+0x204>)
 801be22:	2203      	movs	r2, #3
 801be24:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 801be26:	e010      	b.n	801be4a <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 801be28:	79bb      	ldrb	r3, [r7, #6]
 801be2a:	2b06      	cmp	r3, #6
 801be2c:	d105      	bne.n	801be3a <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 801be2e:	f000 f941 	bl	801c0b4 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 801be32:	4b08      	ldr	r3, [pc, #32]	; (801be54 <DHCP_run+0x204>)
 801be34:	2201      	movs	r2, #1
 801be36:	701a      	strb	r2, [r3, #0]
	   	break;
 801be38:	e007      	b.n	801be4a <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 801be3a:	f000 f823 	bl	801be84 <check_DHCP_timeout>
 801be3e:	4603      	mov	r3, r0
 801be40:	71fb      	strb	r3, [r7, #7]
	   	break;
 801be42:	e002      	b.n	801be4a <DHCP_run+0x1fa>
		default :
   		break;
 801be44:	bf00      	nop
 801be46:	e000      	b.n	801be4a <DHCP_run+0x1fa>
		break;
 801be48:	bf00      	nop
	}

	return ret;
 801be4a:	79fb      	ldrb	r3, [r7, #7]
}
 801be4c:	4618      	mov	r0, r3
 801be4e:	3708      	adds	r7, #8
 801be50:	46bd      	mov	sp, r7
 801be52:	bd80      	pop	{r7, pc}
 801be54:	200009c4 	.word	0x200009c4
 801be58:	200009a5 	.word	0x200009a5
 801be5c:	200009b4 	.word	0x200009b4
 801be60:	200009d0 	.word	0x200009d0
 801be64:	20000104 	.word	0x20000104
 801be68:	2000010c 	.word	0x2000010c
 801be6c:	200000f0 	.word	0x200000f0
 801be70:	200009c8 	.word	0x200009c8
 801be74:	200009b0 	.word	0x200009b0
 801be78:	200009cc 	.word	0x200009cc
 801be7c:	200009c5 	.word	0x200009c5
 801be80:	20000108 	.word	0x20000108

0801be84 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b082      	sub	sp, #8
 801be88:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 801be8a:	2301      	movs	r3, #1
 801be8c:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
		if (dhcp_tick_next < dhcp_tick_1s) {
 801be8e:	4b19      	ldr	r3, [pc, #100]	; (801bef4 <check_DHCP_timeout+0x70>)
 801be90:	681a      	ldr	r2, [r3, #0]
 801be92:	4b19      	ldr	r3, [pc, #100]	; (801bef8 <check_DHCP_timeout+0x74>)
 801be94:	681b      	ldr	r3, [r3, #0]
 801be96:	429a      	cmp	r2, r3
 801be98:	d226      	bcs.n	801bee8 <check_DHCP_timeout+0x64>

			switch ( dhcp_state ) {
 801be9a:	4b18      	ldr	r3, [pc, #96]	; (801befc <check_DHCP_timeout+0x78>)
 801be9c:	f993 3000 	ldrsb.w	r3, [r3]
 801bea0:	2b04      	cmp	r3, #4
 801bea2:	d00c      	beq.n	801bebe <check_DHCP_timeout+0x3a>
 801bea4:	2b04      	cmp	r3, #4
 801bea6:	dc0d      	bgt.n	801bec4 <check_DHCP_timeout+0x40>
 801bea8:	2b01      	cmp	r3, #1
 801beaa:	d002      	beq.n	801beb2 <check_DHCP_timeout+0x2e>
 801beac:	2b02      	cmp	r3, #2
 801beae:	d003      	beq.n	801beb8 <check_DHCP_timeout+0x34>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 801beb0:	e008      	b.n	801bec4 <check_DHCP_timeout+0x40>
					send_DHCP_DISCOVER();
 801beb2:	f7fe ff0d 	bl	801acd0 <send_DHCP_DISCOVER>
				break;
 801beb6:	e006      	b.n	801bec6 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801beb8:	f7ff f8d0 	bl	801b05c <send_DHCP_REQUEST>
				break;
 801bebc:	e003      	b.n	801bec6 <check_DHCP_timeout+0x42>
					send_DHCP_REQUEST();
 801bebe:	f7ff f8cd 	bl	801b05c <send_DHCP_REQUEST>
				break;
 801bec2:	e000      	b.n	801bec6 <check_DHCP_timeout+0x42>
				break;
 801bec4:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 801bec6:	4b0c      	ldr	r3, [pc, #48]	; (801bef8 <check_DHCP_timeout+0x74>)
 801bec8:	2200      	movs	r2, #0
 801beca:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 801becc:	4b0a      	ldr	r3, [pc, #40]	; (801bef8 <check_DHCP_timeout+0x74>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	330a      	adds	r3, #10
 801bed2:	4a08      	ldr	r2, [pc, #32]	; (801bef4 <check_DHCP_timeout+0x70>)
 801bed4:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 801bed6:	4b0a      	ldr	r3, [pc, #40]	; (801bf00 <check_DHCP_timeout+0x7c>)
 801bed8:	f993 3000 	ldrsb.w	r3, [r3]
 801bedc:	b2db      	uxtb	r3, r3
 801bede:	3301      	adds	r3, #1
 801bee0:	b2db      	uxtb	r3, r3
 801bee2:	b25a      	sxtb	r2, r3
 801bee4:	4b06      	ldr	r3, [pc, #24]	; (801bf00 <check_DHCP_timeout+0x7c>)
 801bee6:	701a      	strb	r2, [r3, #0]
			default :
				break;
		}
		reset_DHCP_timeout();
	}
	return ret;
 801bee8:	79fb      	ldrb	r3, [r7, #7]
}
 801beea:	4618      	mov	r0, r3
 801beec:	3708      	adds	r7, #8
 801beee:	46bd      	mov	sp, r7
 801bef0:	bd80      	pop	{r7, pc}
 801bef2:	bf00      	nop
 801bef4:	200000f4 	.word	0x200000f4
 801bef8:	200009c8 	.word	0x200009c8
 801befc:	200009c4 	.word	0x200009c4
 801bf00:	200009c5 	.word	0x200009c5

0801bf04 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 801bf04:	b580      	push	{r7, lr}
 801bf06:	b084      	sub	sp, #16
 801bf08:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 801bf0a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bf0e:	f7fc fcc7 	bl	80188a0 <WIZCHIP_READ>
 801bf12:	4603      	mov	r3, r0
 801bf14:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 801bf16:	2103      	movs	r1, #3
 801bf18:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bf1c:	f7fc fd0c 	bl	8018938 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 801bf20:	4b15      	ldr	r3, [pc, #84]	; (801bf78 <check_DHCP_leasedIP+0x74>)
 801bf22:	7818      	ldrb	r0, [r3, #0]
 801bf24:	f241 3388 	movw	r3, #5000	; 0x1388
 801bf28:	9300      	str	r3, [sp, #0]
 801bf2a:	4b14      	ldr	r3, [pc, #80]	; (801bf7c <check_DHCP_leasedIP+0x78>)
 801bf2c:	2211      	movs	r2, #17
 801bf2e:	4914      	ldr	r1, [pc, #80]	; (801bf80 <check_DHCP_leasedIP+0x7c>)
 801bf30:	f7fd fc84 	bl	801983c <sendto>
 801bf34:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 801bf36:	79fb      	ldrb	r3, [r7, #7]
 801bf38:	4619      	mov	r1, r3
 801bf3a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 801bf3e:	f7fc fcfb 	bl	8018938 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 801bf42:	683b      	ldr	r3, [r7, #0]
 801bf44:	f113 0f0d 	cmn.w	r3, #13
 801bf48:	d101      	bne.n	801bf4e <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 801bf4a:	2301      	movs	r3, #1
 801bf4c:	e010      	b.n	801bf70 <check_DHCP_leasedIP+0x6c>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 801bf4e:	f7ff fb0f 	bl	801b570 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 801bf52:	4b0c      	ldr	r3, [pc, #48]	; (801bf84 <check_DHCP_leasedIP+0x80>)
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bf58:	e003      	b.n	801bf62 <check_DHCP_leasedIP+0x5e>

			delay(200);
 801bf5a:	4b0b      	ldr	r3, [pc, #44]	; (801bf88 <check_DHCP_leasedIP+0x84>)
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	20c8      	movs	r0, #200	; 0xc8
 801bf60:	4798      	blx	r3
		while((dhcp_tick_1s - ret) < 2){ // wait for 1s over; wait to complete to send DECLINE message;
 801bf62:	4b08      	ldr	r3, [pc, #32]	; (801bf84 <check_DHCP_leasedIP+0x80>)
 801bf64:	681a      	ldr	r2, [r3, #0]
 801bf66:	683b      	ldr	r3, [r7, #0]
 801bf68:	1ad3      	subs	r3, r2, r3
 801bf6a:	2b01      	cmp	r3, #1
 801bf6c:	d9f5      	bls.n	801bf5a <check_DHCP_leasedIP+0x56>

		}
		return 0;
 801bf6e:	2300      	movs	r3, #0
	}
}	
 801bf70:	4618      	mov	r0, r3
 801bf72:	3708      	adds	r7, #8
 801bf74:	46bd      	mov	sp, r7
 801bf76:	bd80      	pop	{r7, pc}
 801bf78:	200009a5 	.word	0x200009a5
 801bf7c:	200009b4 	.word	0x200009b4
 801bf80:	08032f94 	.word	0x08032f94
 801bf84:	200009c8 	.word	0x200009c8
 801bf88:	20000110 	.word	0x20000110

0801bf8c <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b084      	sub	sp, #16
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	4603      	mov	r3, r0
 801bf94:	6039      	str	r1, [r7, #0]
 801bf96:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 801bf98:	2300      	movs	r3, #0
 801bf9a:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 801bf9c:	2206      	movs	r2, #6
 801bf9e:	493f      	ldr	r1, [pc, #252]	; (801c09c <DHCP_init+0x110>)
 801bfa0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801bfa4:	f7fc fd16 	bl	80189d4 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 801bfa8:	4b3c      	ldr	r3, [pc, #240]	; (801c09c <DHCP_init+0x110>)
 801bfaa:	781a      	ldrb	r2, [r3, #0]
 801bfac:	4b3b      	ldr	r3, [pc, #236]	; (801c09c <DHCP_init+0x110>)
 801bfae:	785b      	ldrb	r3, [r3, #1]
 801bfb0:	4313      	orrs	r3, r2
 801bfb2:	b2da      	uxtb	r2, r3
 801bfb4:	4b39      	ldr	r3, [pc, #228]	; (801c09c <DHCP_init+0x110>)
 801bfb6:	789b      	ldrb	r3, [r3, #2]
 801bfb8:	4313      	orrs	r3, r2
 801bfba:	b2da      	uxtb	r2, r3
 801bfbc:	4b37      	ldr	r3, [pc, #220]	; (801c09c <DHCP_init+0x110>)
 801bfbe:	78db      	ldrb	r3, [r3, #3]
 801bfc0:	4313      	orrs	r3, r2
 801bfc2:	b2da      	uxtb	r2, r3
 801bfc4:	4b35      	ldr	r3, [pc, #212]	; (801c09c <DHCP_init+0x110>)
 801bfc6:	791b      	ldrb	r3, [r3, #4]
 801bfc8:	4313      	orrs	r3, r2
 801bfca:	b2da      	uxtb	r2, r3
 801bfcc:	4b33      	ldr	r3, [pc, #204]	; (801c09c <DHCP_init+0x110>)
 801bfce:	795b      	ldrb	r3, [r3, #5]
 801bfd0:	4313      	orrs	r3, r2
 801bfd2:	b2db      	uxtb	r3, r3
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	d117      	bne.n	801c008 <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 801bfd8:	4b30      	ldr	r3, [pc, #192]	; (801c09c <DHCP_init+0x110>)
 801bfda:	2200      	movs	r2, #0
 801bfdc:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 801bfde:	4b2f      	ldr	r3, [pc, #188]	; (801c09c <DHCP_init+0x110>)
 801bfe0:	2208      	movs	r2, #8
 801bfe2:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 801bfe4:	4b2d      	ldr	r3, [pc, #180]	; (801c09c <DHCP_init+0x110>)
 801bfe6:	22dc      	movs	r2, #220	; 0xdc
 801bfe8:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 801bfea:	4b2c      	ldr	r3, [pc, #176]	; (801c09c <DHCP_init+0x110>)
 801bfec:	2200      	movs	r2, #0
 801bfee:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 801bff0:	4b2a      	ldr	r3, [pc, #168]	; (801c09c <DHCP_init+0x110>)
 801bff2:	2200      	movs	r2, #0
 801bff4:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 801bff6:	4b29      	ldr	r3, [pc, #164]	; (801c09c <DHCP_init+0x110>)
 801bff8:	2200      	movs	r2, #0
 801bffa:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 801bffc:	2206      	movs	r2, #6
 801bffe:	4927      	ldr	r1, [pc, #156]	; (801c09c <DHCP_init+0x110>)
 801c000:	f44f 6010 	mov.w	r0, #2304	; 0x900
 801c004:	f7fc fd46 	bl	8018a94 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 801c008:	4a25      	ldr	r2, [pc, #148]	; (801c0a0 <DHCP_init+0x114>)
 801c00a:	79fb      	ldrb	r3, [r7, #7]
 801c00c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 801c00e:	4a25      	ldr	r2, [pc, #148]	; (801c0a4 <DHCP_init+0x118>)
 801c010:	683b      	ldr	r3, [r7, #0]
 801c012:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 801c014:	4b24      	ldr	r3, [pc, #144]	; (801c0a8 <DHCP_init+0x11c>)
 801c016:	4a25      	ldr	r2, [pc, #148]	; (801c0ac <DHCP_init+0x120>)
 801c018:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 801c01a:	4b20      	ldr	r3, [pc, #128]	; (801c09c <DHCP_init+0x110>)
 801c01c:	78db      	ldrb	r3, [r3, #3]
 801c01e:	461a      	mov	r2, r3
 801c020:	4b21      	ldr	r3, [pc, #132]	; (801c0a8 <DHCP_init+0x11c>)
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	4413      	add	r3, r2
 801c026:	4a20      	ldr	r2, [pc, #128]	; (801c0a8 <DHCP_init+0x11c>)
 801c028:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 801c02a:	4b1c      	ldr	r3, [pc, #112]	; (801c09c <DHCP_init+0x110>)
 801c02c:	791b      	ldrb	r3, [r3, #4]
 801c02e:	461a      	mov	r2, r3
 801c030:	4b1d      	ldr	r3, [pc, #116]	; (801c0a8 <DHCP_init+0x11c>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	4413      	add	r3, r2
 801c036:	4a1c      	ldr	r2, [pc, #112]	; (801c0a8 <DHCP_init+0x11c>)
 801c038:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 801c03a:	4b18      	ldr	r3, [pc, #96]	; (801c09c <DHCP_init+0x110>)
 801c03c:	795b      	ldrb	r3, [r3, #5]
 801c03e:	461a      	mov	r2, r3
 801c040:	4b19      	ldr	r3, [pc, #100]	; (801c0a8 <DHCP_init+0x11c>)
 801c042:	681b      	ldr	r3, [r3, #0]
 801c044:	4413      	add	r3, r2
 801c046:	4a18      	ldr	r2, [pc, #96]	; (801c0a8 <DHCP_init+0x11c>)
 801c048:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 801c04a:	4b14      	ldr	r3, [pc, #80]	; (801c09c <DHCP_init+0x110>)
 801c04c:	78da      	ldrb	r2, [r3, #3]
 801c04e:	4b13      	ldr	r3, [pc, #76]	; (801c09c <DHCP_init+0x110>)
 801c050:	791b      	ldrb	r3, [r3, #4]
 801c052:	4053      	eors	r3, r2
 801c054:	b2da      	uxtb	r2, r3
 801c056:	4b11      	ldr	r3, [pc, #68]	; (801c09c <DHCP_init+0x110>)
 801c058:	795b      	ldrb	r3, [r3, #5]
 801c05a:	4053      	eors	r3, r2
 801c05c:	b2db      	uxtb	r3, r3
 801c05e:	461a      	mov	r2, r3
 801c060:	4b11      	ldr	r3, [pc, #68]	; (801c0a8 <DHCP_init+0x11c>)
 801c062:	681b      	ldr	r3, [r3, #0]
 801c064:	4413      	add	r3, r2
 801c066:	4a10      	ldr	r2, [pc, #64]	; (801c0a8 <DHCP_init+0x11c>)
 801c068:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 801c06a:	f107 030c 	add.w	r3, r7, #12
 801c06e:	2204      	movs	r2, #4
 801c070:	4619      	mov	r1, r3
 801c072:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 801c076:	f7fc fd0d 	bl	8018a94 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 801c07a:	f107 030c 	add.w	r3, r7, #12
 801c07e:	2204      	movs	r2, #4
 801c080:	4619      	mov	r1, r3
 801c082:	f44f 7080 	mov.w	r0, #256	; 0x100
 801c086:	f7fc fd05 	bl	8018a94 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 801c08a:	f000 f813 	bl	801c0b4 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 801c08e:	4b08      	ldr	r3, [pc, #32]	; (801c0b0 <DHCP_init+0x124>)
 801c090:	2200      	movs	r2, #0
 801c092:	701a      	strb	r2, [r3, #0]
}
 801c094:	bf00      	nop
 801c096:	3710      	adds	r7, #16
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}
 801c09c:	200009d4 	.word	0x200009d4
 801c0a0:	200009a5 	.word	0x200009a5
 801c0a4:	200009d0 	.word	0x200009d0
 801c0a8:	200009cc 	.word	0x200009cc
 801c0ac:	12345678 	.word	0x12345678
 801c0b0:	200009c4 	.word	0x200009c4

0801c0b4 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 801c0b4:	b480      	push	{r7}
 801c0b6:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 801c0b8:	4b06      	ldr	r3, [pc, #24]	; (801c0d4 <reset_DHCP_timeout+0x20>)
 801c0ba:	2200      	movs	r2, #0
 801c0bc:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 801c0be:	4b06      	ldr	r3, [pc, #24]	; (801c0d8 <reset_DHCP_timeout+0x24>)
 801c0c0:	220a      	movs	r2, #10
 801c0c2:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 801c0c4:	4b05      	ldr	r3, [pc, #20]	; (801c0dc <reset_DHCP_timeout+0x28>)
 801c0c6:	2200      	movs	r2, #0
 801c0c8:	701a      	strb	r2, [r3, #0]
}
 801c0ca:	bf00      	nop
 801c0cc:	46bd      	mov	sp, r7
 801c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0d2:	4770      	bx	lr
 801c0d4:	200009c8 	.word	0x200009c8
 801c0d8:	200000f4 	.word	0x200000f4
 801c0dc:	200009c5 	.word	0x200009c5

0801c0e0 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
 801c0e0:	b480      	push	{r7}
 801c0e2:	af00      	add	r7, sp, #0
	dhcp_tick_1s++;
 801c0e4:	4b04      	ldr	r3, [pc, #16]	; (801c0f8 <DHCP_time_handler+0x18>)
 801c0e6:	681b      	ldr	r3, [r3, #0]
 801c0e8:	3301      	adds	r3, #1
 801c0ea:	4a03      	ldr	r2, [pc, #12]	; (801c0f8 <DHCP_time_handler+0x18>)
 801c0ec:	6013      	str	r3, [r2, #0]
}
 801c0ee:	bf00      	nop
 801c0f0:	46bd      	mov	sp, r7
 801c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0f6:	4770      	bx	lr
 801c0f8:	200009c8 	.word	0x200009c8

0801c0fc <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
 801c0fc:	b480      	push	{r7}
 801c0fe:	b083      	sub	sp, #12
 801c100:	af00      	add	r7, sp, #0
 801c102:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 801c104:	4b0c      	ldr	r3, [pc, #48]	; (801c138 <getIPfromDHCP+0x3c>)
 801c106:	781a      	ldrb	r2, [r3, #0]
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	3301      	adds	r3, #1
 801c110:	4a09      	ldr	r2, [pc, #36]	; (801c138 <getIPfromDHCP+0x3c>)
 801c112:	7852      	ldrb	r2, [r2, #1]
 801c114:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 801c116:	687b      	ldr	r3, [r7, #4]
 801c118:	3302      	adds	r3, #2
 801c11a:	4a07      	ldr	r2, [pc, #28]	; (801c138 <getIPfromDHCP+0x3c>)
 801c11c:	7892      	ldrb	r2, [r2, #2]
 801c11e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	3303      	adds	r3, #3
 801c124:	4a04      	ldr	r2, [pc, #16]	; (801c138 <getIPfromDHCP+0x3c>)
 801c126:	78d2      	ldrb	r2, [r2, #3]
 801c128:	701a      	strb	r2, [r3, #0]
}
 801c12a:	bf00      	nop
 801c12c:	370c      	adds	r7, #12
 801c12e:	46bd      	mov	sp, r7
 801c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c134:	4770      	bx	lr
 801c136:	bf00      	nop
 801c138:	200009b4 	.word	0x200009b4

0801c13c <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 801c13c:	b480      	push	{r7}
 801c13e:	b083      	sub	sp, #12
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 801c144:	4b0c      	ldr	r3, [pc, #48]	; (801c178 <getGWfromDHCP+0x3c>)
 801c146:	781a      	ldrb	r2, [r3, #0]
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	3301      	adds	r3, #1
 801c150:	4a09      	ldr	r2, [pc, #36]	; (801c178 <getGWfromDHCP+0x3c>)
 801c152:	7852      	ldrb	r2, [r2, #1]
 801c154:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	3302      	adds	r3, #2
 801c15a:	4a07      	ldr	r2, [pc, #28]	; (801c178 <getGWfromDHCP+0x3c>)
 801c15c:	7892      	ldrb	r2, [r2, #2]
 801c15e:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	3303      	adds	r3, #3
 801c164:	4a04      	ldr	r2, [pc, #16]	; (801c178 <getGWfromDHCP+0x3c>)
 801c166:	78d2      	ldrb	r2, [r2, #3]
 801c168:	701a      	strb	r2, [r3, #0]
}
 801c16a:	bf00      	nop
 801c16c:	370c      	adds	r7, #12
 801c16e:	46bd      	mov	sp, r7
 801c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c174:	4770      	bx	lr
 801c176:	bf00      	nop
 801c178:	200009b8 	.word	0x200009b8

0801c17c <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 801c17c:	b480      	push	{r7}
 801c17e:	b083      	sub	sp, #12
 801c180:	af00      	add	r7, sp, #0
 801c182:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 801c184:	4b0c      	ldr	r3, [pc, #48]	; (801c1b8 <getSNfromDHCP+0x3c>)
 801c186:	781a      	ldrb	r2, [r3, #0]
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	3301      	adds	r3, #1
 801c190:	4a09      	ldr	r2, [pc, #36]	; (801c1b8 <getSNfromDHCP+0x3c>)
 801c192:	7852      	ldrb	r2, [r2, #1]
 801c194:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	3302      	adds	r3, #2
 801c19a:	4a07      	ldr	r2, [pc, #28]	; (801c1b8 <getSNfromDHCP+0x3c>)
 801c19c:	7892      	ldrb	r2, [r2, #2]
 801c19e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 801c1a0:	687b      	ldr	r3, [r7, #4]
 801c1a2:	3303      	adds	r3, #3
 801c1a4:	4a04      	ldr	r2, [pc, #16]	; (801c1b8 <getSNfromDHCP+0x3c>)
 801c1a6:	78d2      	ldrb	r2, [r2, #3]
 801c1a8:	701a      	strb	r2, [r3, #0]
}
 801c1aa:	bf00      	nop
 801c1ac:	370c      	adds	r7, #12
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b4:	4770      	bx	lr
 801c1b6:	bf00      	nop
 801c1b8:	200009bc 	.word	0x200009bc

0801c1bc <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 801c1bc:	b480      	push	{r7}
 801c1be:	b083      	sub	sp, #12
 801c1c0:	af00      	add	r7, sp, #0
 801c1c2:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 801c1c4:	4b0c      	ldr	r3, [pc, #48]	; (801c1f8 <getDNSfromDHCP+0x3c>)
 801c1c6:	781a      	ldrb	r2, [r3, #0]
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	3301      	adds	r3, #1
 801c1d0:	4a09      	ldr	r2, [pc, #36]	; (801c1f8 <getDNSfromDHCP+0x3c>)
 801c1d2:	7852      	ldrb	r2, [r2, #1]
 801c1d4:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	3302      	adds	r3, #2
 801c1da:	4a07      	ldr	r2, [pc, #28]	; (801c1f8 <getDNSfromDHCP+0x3c>)
 801c1dc:	7892      	ldrb	r2, [r2, #2]
 801c1de:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 801c1e0:	687b      	ldr	r3, [r7, #4]
 801c1e2:	3303      	adds	r3, #3
 801c1e4:	4a04      	ldr	r2, [pc, #16]	; (801c1f8 <getDNSfromDHCP+0x3c>)
 801c1e6:	78d2      	ldrb	r2, [r2, #3]
 801c1e8:	701a      	strb	r2, [r3, #0]
}
 801c1ea:	bf00      	nop
 801c1ec:	370c      	adds	r7, #12
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f4:	4770      	bx	lr
 801c1f6:	bf00      	nop
 801c1f8:	200009c0 	.word	0x200009c0

0801c1fc <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
 801c1fc:	b480      	push	{r7}
 801c1fe:	af00      	add	r7, sp, #0
	return dhcp_lease_time;
 801c200:	4b03      	ldr	r3, [pc, #12]	; (801c210 <getDHCPLeasetime+0x14>)
 801c202:	681b      	ldr	r3, [r3, #0]
}
 801c204:	4618      	mov	r0, r3
 801c206:	46bd      	mov	sp, r7
 801c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c20c:	4770      	bx	lr
 801c20e:	bf00      	nop
 801c210:	200000f0 	.word	0x200000f0

0801c214 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
 801c214:	b480      	push	{r7}
 801c216:	b083      	sub	sp, #12
 801c218:	af00      	add	r7, sp, #0
 801c21a:	4603      	mov	r3, r0
 801c21c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 801c21e:	79fb      	ldrb	r3, [r7, #7]
 801c220:	f003 030f 	and.w	r3, r3, #15
 801c224:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 801c226:	79fb      	ldrb	r3, [r7, #7]
 801c228:	2b09      	cmp	r3, #9
 801c22a:	d803      	bhi.n	801c234 <NibbleToHex+0x20>
    return nibble + '0';
 801c22c:	79fb      	ldrb	r3, [r7, #7]
 801c22e:	3330      	adds	r3, #48	; 0x30
 801c230:	b2db      	uxtb	r3, r3
 801c232:	e002      	b.n	801c23a <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 801c234:	79fb      	ldrb	r3, [r7, #7]
 801c236:	3337      	adds	r3, #55	; 0x37
 801c238:	b2db      	uxtb	r3, r3
}
 801c23a:	4618      	mov	r0, r3
 801c23c:	370c      	adds	r7, #12
 801c23e:	46bd      	mov	sp, r7
 801c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c244:	4770      	bx	lr

0801c246 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 801c246:	b480      	push	{r7}
 801c248:	b085      	sub	sp, #20
 801c24a:	af00      	add	r7, sp, #0
 801c24c:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	1c5a      	adds	r2, r3, #1
 801c252:	607a      	str	r2, [r7, #4]
 801c254:	781b      	ldrb	r3, [r3, #0]
 801c256:	b29b      	uxth	r3, r3
 801c258:	021b      	lsls	r3, r3, #8
 801c25a:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 801c25c:	687b      	ldr	r3, [r7, #4]
 801c25e:	781b      	ldrb	r3, [r3, #0]
 801c260:	b29a      	uxth	r2, r3
 801c262:	89fb      	ldrh	r3, [r7, #14]
 801c264:	4413      	add	r3, r2
 801c266:	81fb      	strh	r3, [r7, #14]
	return i;
 801c268:	89fb      	ldrh	r3, [r7, #14]
}
 801c26a:	4618      	mov	r0, r3
 801c26c:	3714      	adds	r7, #20
 801c26e:	46bd      	mov	sp, r7
 801c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c274:	4770      	bx	lr

0801c276 <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 801c276:	b480      	push	{r7}
 801c278:	b083      	sub	sp, #12
 801c27a:	af00      	add	r7, sp, #0
 801c27c:	6078      	str	r0, [r7, #4]
 801c27e:	460b      	mov	r3, r1
 801c280:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 801c282:	887b      	ldrh	r3, [r7, #2]
 801c284:	0a1b      	lsrs	r3, r3, #8
 801c286:	b299      	uxth	r1, r3
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	1c5a      	adds	r2, r3, #1
 801c28c:	607a      	str	r2, [r7, #4]
 801c28e:	b2ca      	uxtb	r2, r1
 801c290:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	1c5a      	adds	r2, r3, #1
 801c296:	607a      	str	r2, [r7, #4]
 801c298:	887a      	ldrh	r2, [r7, #2]
 801c29a:	b2d2      	uxtb	r2, r2
 801c29c:	701a      	strb	r2, [r3, #0]
	return s;
 801c29e:	687b      	ldr	r3, [r7, #4]
}
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	370c      	adds	r7, #12
 801c2a4:	46bd      	mov	sp, r7
 801c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2aa:	4770      	bx	lr

0801c2ac <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 801c2ac:	b480      	push	{r7}
 801c2ae:	b08b      	sub	sp, #44	; 0x2c
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	60f8      	str	r0, [r7, #12]
 801c2b4:	60b9      	str	r1, [r7, #8]
 801c2b6:	607a      	str	r2, [r7, #4]
 801c2b8:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 801c2ba:	2300      	movs	r3, #0
 801c2bc:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 801c2be:	2300      	movs	r3, #0
 801c2c0:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 801c2c2:	2300      	movs	r3, #0
 801c2c4:	617b      	str	r3, [r7, #20]

	cp = compressed;
 801c2c6:	68bb      	ldr	r3, [r7, #8]
 801c2c8:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 801c2ca:	6a3b      	ldr	r3, [r7, #32]
 801c2cc:	1c5a      	adds	r2, r3, #1
 801c2ce:	623a      	str	r2, [r7, #32]
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 801c2d4:	69bb      	ldr	r3, [r7, #24]
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d102      	bne.n	801c2e0 <parse_name+0x34>
 801c2da:	69fb      	ldr	r3, [r7, #28]
 801c2dc:	3301      	adds	r3, #1
 801c2de:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 801c2e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c2e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c2e6:	2bc0      	cmp	r3, #192	; 0xc0
 801c2e8:	d117      	bne.n	801c31a <parse_name+0x6e>
		{
			if (!indirect)
 801c2ea:	69bb      	ldr	r3, [r7, #24]
 801c2ec:	2b00      	cmp	r3, #0
 801c2ee:	d102      	bne.n	801c2f6 <parse_name+0x4a>
				clen++;
 801c2f0:	69fb      	ldr	r3, [r7, #28]
 801c2f2:	3301      	adds	r3, #1
 801c2f4:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 801c2f6:	2301      	movs	r3, #1
 801c2f8:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 801c2fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c2fc:	021b      	lsls	r3, r3, #8
 801c2fe:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801c302:	6a3a      	ldr	r2, [r7, #32]
 801c304:	7812      	ldrb	r2, [r2, #0]
 801c306:	4413      	add	r3, r2
 801c308:	461a      	mov	r2, r3
 801c30a:	68fb      	ldr	r3, [r7, #12]
 801c30c:	4413      	add	r3, r2
 801c30e:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 801c310:	6a3b      	ldr	r3, [r7, #32]
 801c312:	1c5a      	adds	r2, r3, #1
 801c314:	623a      	str	r2, [r7, #32]
 801c316:	781b      	ldrb	r3, [r3, #0]
 801c318:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 801c31a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	d02b      	beq.n	801c378 <parse_name+0xcc>
			break;

		len -= slen + 1;
 801c320:	887a      	ldrh	r2, [r7, #2]
 801c322:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c324:	1ad3      	subs	r3, r2, r3
 801c326:	b29b      	uxth	r3, r3
 801c328:	3b01      	subs	r3, #1
 801c32a:	b29b      	uxth	r3, r3
 801c32c:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 801c32e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c332:	2b00      	cmp	r3, #0
 801c334:	da02      	bge.n	801c33c <parse_name+0x90>
 801c336:	f04f 33ff 	mov.w	r3, #4294967295
 801c33a:	e038      	b.n	801c3ae <parse_name+0x102>

		if (!indirect) clen += slen;
 801c33c:	69bb      	ldr	r3, [r7, #24]
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d10c      	bne.n	801c35c <parse_name+0xb0>
 801c342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c344:	69fa      	ldr	r2, [r7, #28]
 801c346:	4413      	add	r3, r2
 801c348:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 801c34a:	e007      	b.n	801c35c <parse_name+0xb0>
 801c34c:	6a3a      	ldr	r2, [r7, #32]
 801c34e:	1c53      	adds	r3, r2, #1
 801c350:	623b      	str	r3, [r7, #32]
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	1c59      	adds	r1, r3, #1
 801c356:	6079      	str	r1, [r7, #4]
 801c358:	7812      	ldrb	r2, [r2, #0]
 801c35a:	701a      	strb	r2, [r3, #0]
 801c35c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c35e:	1e5a      	subs	r2, r3, #1
 801c360:	84fa      	strh	r2, [r7, #38]	; 0x26
 801c362:	2b00      	cmp	r3, #0
 801c364:	d1f2      	bne.n	801c34c <parse_name+0xa0>
		*buf++ = '.';
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	1c5a      	adds	r2, r3, #1
 801c36a:	607a      	str	r2, [r7, #4]
 801c36c:	222e      	movs	r2, #46	; 0x2e
 801c36e:	701a      	strb	r2, [r3, #0]
		nseg++;
 801c370:	697b      	ldr	r3, [r7, #20]
 801c372:	3301      	adds	r3, #1
 801c374:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 801c376:	e7a8      	b.n	801c2ca <parse_name+0x1e>
			break;
 801c378:	bf00      	nop
	}

	if (nseg == 0)
 801c37a:	697b      	ldr	r3, [r7, #20]
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d10a      	bne.n	801c396 <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	1c5a      	adds	r2, r3, #1
 801c384:	607a      	str	r2, [r7, #4]
 801c386:	222e      	movs	r2, #46	; 0x2e
 801c388:	701a      	strb	r2, [r3, #0]
		len--;
 801c38a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c38e:	b29b      	uxth	r3, r3
 801c390:	3b01      	subs	r3, #1
 801c392:	b29b      	uxth	r3, r3
 801c394:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	1c5a      	adds	r2, r3, #1
 801c39a:	607a      	str	r2, [r7, #4]
 801c39c:	2200      	movs	r2, #0
 801c39e:	701a      	strb	r2, [r3, #0]
	len--;
 801c3a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c3a4:	b29b      	uxth	r3, r3
 801c3a6:	3b01      	subs	r3, #1
 801c3a8:	b29b      	uxth	r3, r3
 801c3aa:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 801c3ac:	69fb      	ldr	r3, [r7, #28]
}
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	372c      	adds	r7, #44	; 0x2c
 801c3b2:	46bd      	mov	sp, r7
 801c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3b8:	4770      	bx	lr

0801c3ba <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 801c3ba:	b580      	push	{r7, lr}
 801c3bc:	b0b4      	sub	sp, #208	; 0xd0
 801c3be:	af00      	add	r7, sp, #0
 801c3c0:	6078      	str	r0, [r7, #4]
 801c3c2:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c3c4:	f107 020c 	add.w	r2, r7, #12
 801c3c8:	23c0      	movs	r3, #192	; 0xc0
 801c3ca:	6839      	ldr	r1, [r7, #0]
 801c3cc:	6878      	ldr	r0, [r7, #4]
 801c3ce:	f7ff ff6d 	bl	801c2ac <parse_name>
 801c3d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 801c3d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3de:	d101      	bne.n	801c3e4 <dns_question+0x2a>
 801c3e0:	2300      	movs	r3, #0
 801c3e2:	e00b      	b.n	801c3fc <dns_question+0x42>

	cp += len;
 801c3e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801c3e8:	683a      	ldr	r2, [r7, #0]
 801c3ea:	4413      	add	r3, r2
 801c3ec:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 801c3ee:	683b      	ldr	r3, [r7, #0]
 801c3f0:	3302      	adds	r3, #2
 801c3f2:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 801c3f4:	683b      	ldr	r3, [r7, #0]
 801c3f6:	3302      	adds	r3, #2
 801c3f8:	603b      	str	r3, [r7, #0]

	return cp;
 801c3fa:	683b      	ldr	r3, [r7, #0]
}
 801c3fc:	4618      	mov	r0, r3
 801c3fe:	37d0      	adds	r7, #208	; 0xd0
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}

0801c404 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 801c404:	b580      	push	{r7, lr}
 801c406:	b0b6      	sub	sp, #216	; 0xd8
 801c408:	af00      	add	r7, sp, #0
 801c40a:	60f8      	str	r0, [r7, #12]
 801c40c:	60b9      	str	r1, [r7, #8]
 801c40e:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 801c410:	f107 0210 	add.w	r2, r7, #16
 801c414:	23c0      	movs	r3, #192	; 0xc0
 801c416:	68b9      	ldr	r1, [r7, #8]
 801c418:	68f8      	ldr	r0, [r7, #12]
 801c41a:	f7ff ff47 	bl	801c2ac <parse_name>
 801c41e:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 801c422:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c426:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c42a:	d101      	bne.n	801c430 <dns_answer+0x2c>
 801c42c:	2300      	movs	r3, #0
 801c42e:	e0f9      	b.n	801c624 <dns_answer+0x220>

	cp += len;
 801c430:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c434:	68ba      	ldr	r2, [r7, #8]
 801c436:	4413      	add	r3, r2
 801c438:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 801c43a:	68b8      	ldr	r0, [r7, #8]
 801c43c:	f7ff ff03 	bl	801c246 <get16>
 801c440:	4603      	mov	r3, r0
 801c442:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 801c446:	68bb      	ldr	r3, [r7, #8]
 801c448:	3302      	adds	r3, #2
 801c44a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 801c44c:	68bb      	ldr	r3, [r7, #8]
 801c44e:	3302      	adds	r3, #2
 801c450:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 801c452:	68bb      	ldr	r3, [r7, #8]
 801c454:	3304      	adds	r3, #4
 801c456:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 801c458:	68bb      	ldr	r3, [r7, #8]
 801c45a:	3302      	adds	r3, #2
 801c45c:	60bb      	str	r3, [r7, #8]


	switch (type)
 801c45e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c462:	2b10      	cmp	r3, #16
 801c464:	f000 80da 	beq.w	801c61c <dns_answer+0x218>
 801c468:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c46c:	2b10      	cmp	r3, #16
 801c46e:	f300 80d7 	bgt.w	801c620 <dns_answer+0x21c>
 801c472:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c476:	2b0f      	cmp	r3, #15
 801c478:	d07d      	beq.n	801c576 <dns_answer+0x172>
 801c47a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c47e:	2b0f      	cmp	r3, #15
 801c480:	f300 80ce 	bgt.w	801c620 <dns_answer+0x21c>
 801c484:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c488:	2b0c      	cmp	r3, #12
 801c48a:	dc26      	bgt.n	801c4da <dns_answer+0xd6>
 801c48c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c490:	2b00      	cmp	r3, #0
 801c492:	f340 80c5 	ble.w	801c620 <dns_answer+0x21c>
 801c496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c49a:	2201      	movs	r2, #1
 801c49c:	fa02 f303 	lsl.w	r3, r2, r3
 801c4a0:	f241 32a4 	movw	r2, #5028	; 0x13a4
 801c4a4:	401a      	ands	r2, r3
 801c4a6:	2a00      	cmp	r2, #0
 801c4a8:	bf14      	ite	ne
 801c4aa:	2201      	movne	r2, #1
 801c4ac:	2200      	moveq	r2, #0
 801c4ae:	b2d2      	uxtb	r2, r2
 801c4b0:	2a00      	cmp	r2, #0
 801c4b2:	d133      	bne.n	801c51c <dns_answer+0x118>
 801c4b4:	f003 0240 	and.w	r2, r3, #64	; 0x40
 801c4b8:	2a00      	cmp	r2, #0
 801c4ba:	bf14      	ite	ne
 801c4bc:	2201      	movne	r2, #1
 801c4be:	2200      	moveq	r2, #0
 801c4c0:	b2d2      	uxtb	r2, r2
 801c4c2:	2a00      	cmp	r2, #0
 801c4c4:	d170      	bne.n	801c5a8 <dns_answer+0x1a4>
 801c4c6:	f003 0302 	and.w	r3, r3, #2
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	bf14      	ite	ne
 801c4ce:	2301      	movne	r3, #1
 801c4d0:	2300      	moveq	r3, #0
 801c4d2:	b2db      	uxtb	r3, r3
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d105      	bne.n	801c4e4 <dns_answer+0xe0>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 801c4d8:	e0a2      	b.n	801c620 <dns_answer+0x21c>
	switch (type)
 801c4da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c4de:	2b0d      	cmp	r3, #13
 801c4e0:	d032      	beq.n	801c548 <dns_answer+0x144>
		break;
 801c4e2:	e09d      	b.n	801c620 <dns_answer+0x21c>
		ip_from_dns[0] = *cp++;
 801c4e4:	68bb      	ldr	r3, [r7, #8]
 801c4e6:	1c5a      	adds	r2, r3, #1
 801c4e8:	60ba      	str	r2, [r7, #8]
 801c4ea:	781a      	ldrb	r2, [r3, #0]
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 801c4f0:	68bb      	ldr	r3, [r7, #8]
 801c4f2:	1c5a      	adds	r2, r3, #1
 801c4f4:	60ba      	str	r2, [r7, #8]
 801c4f6:	687a      	ldr	r2, [r7, #4]
 801c4f8:	3201      	adds	r2, #1
 801c4fa:	781b      	ldrb	r3, [r3, #0]
 801c4fc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 801c4fe:	68bb      	ldr	r3, [r7, #8]
 801c500:	1c5a      	adds	r2, r3, #1
 801c502:	60ba      	str	r2, [r7, #8]
 801c504:	687a      	ldr	r2, [r7, #4]
 801c506:	3202      	adds	r2, #2
 801c508:	781b      	ldrb	r3, [r3, #0]
 801c50a:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 801c50c:	68bb      	ldr	r3, [r7, #8]
 801c50e:	1c5a      	adds	r2, r3, #1
 801c510:	60ba      	str	r2, [r7, #8]
 801c512:	687a      	ldr	r2, [r7, #4]
 801c514:	3203      	adds	r2, #3
 801c516:	781b      	ldrb	r3, [r3, #0]
 801c518:	7013      	strb	r3, [r2, #0]
		break;
 801c51a:	e082      	b.n	801c622 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c51c:	f107 0210 	add.w	r2, r7, #16
 801c520:	23c0      	movs	r3, #192	; 0xc0
 801c522:	68b9      	ldr	r1, [r7, #8]
 801c524:	68f8      	ldr	r0, [r7, #12]
 801c526:	f7ff fec1 	bl	801c2ac <parse_name>
 801c52a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c532:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c536:	d101      	bne.n	801c53c <dns_answer+0x138>
 801c538:	2300      	movs	r3, #0
 801c53a:	e073      	b.n	801c624 <dns_answer+0x220>
		cp += len;
 801c53c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c540:	68ba      	ldr	r2, [r7, #8]
 801c542:	4413      	add	r3, r2
 801c544:	60bb      	str	r3, [r7, #8]
		break;
 801c546:	e06c      	b.n	801c622 <dns_answer+0x21e>
		len = *cp++;
 801c548:	68bb      	ldr	r3, [r7, #8]
 801c54a:	1c5a      	adds	r2, r3, #1
 801c54c:	60ba      	str	r2, [r7, #8]
 801c54e:	781b      	ldrb	r3, [r3, #0]
 801c550:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c558:	68ba      	ldr	r2, [r7, #8]
 801c55a:	4413      	add	r3, r2
 801c55c:	60bb      	str	r3, [r7, #8]
		len = *cp++;
 801c55e:	68bb      	ldr	r3, [r7, #8]
 801c560:	1c5a      	adds	r2, r3, #1
 801c562:	60ba      	str	r2, [r7, #8]
 801c564:	781b      	ldrb	r3, [r3, #0]
 801c566:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 801c56a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c56e:	68ba      	ldr	r2, [r7, #8]
 801c570:	4413      	add	r3, r2
 801c572:	60bb      	str	r3, [r7, #8]
		break;
 801c574:	e055      	b.n	801c622 <dns_answer+0x21e>
		cp += 2;
 801c576:	68bb      	ldr	r3, [r7, #8]
 801c578:	3302      	adds	r3, #2
 801c57a:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c57c:	f107 0210 	add.w	r2, r7, #16
 801c580:	23c0      	movs	r3, #192	; 0xc0
 801c582:	68b9      	ldr	r1, [r7, #8]
 801c584:	68f8      	ldr	r0, [r7, #12]
 801c586:	f7ff fe91 	bl	801c2ac <parse_name>
 801c58a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c58e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c592:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c596:	d101      	bne.n	801c59c <dns_answer+0x198>
 801c598:	2300      	movs	r3, #0
 801c59a:	e043      	b.n	801c624 <dns_answer+0x220>
		cp += len;
 801c59c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5a0:	68ba      	ldr	r2, [r7, #8]
 801c5a2:	4413      	add	r3, r2
 801c5a4:	60bb      	str	r3, [r7, #8]
		break;
 801c5a6:	e03c      	b.n	801c622 <dns_answer+0x21e>
		len = parse_name(msg, cp, name, MAXCNAME);
 801c5a8:	f107 0210 	add.w	r2, r7, #16
 801c5ac:	23c0      	movs	r3, #192	; 0xc0
 801c5ae:	68b9      	ldr	r1, [r7, #8]
 801c5b0:	68f8      	ldr	r0, [r7, #12]
 801c5b2:	f7ff fe7b 	bl	801c2ac <parse_name>
 801c5b6:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c5ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5c2:	d101      	bne.n	801c5c8 <dns_answer+0x1c4>
 801c5c4:	2300      	movs	r3, #0
 801c5c6:	e02d      	b.n	801c624 <dns_answer+0x220>
		cp += len;
 801c5c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5cc:	68ba      	ldr	r2, [r7, #8]
 801c5ce:	4413      	add	r3, r2
 801c5d0:	60bb      	str	r3, [r7, #8]
		len = parse_name(msg, cp, name, MAXCNAME);
 801c5d2:	f107 0210 	add.w	r2, r7, #16
 801c5d6:	23c0      	movs	r3, #192	; 0xc0
 801c5d8:	68b9      	ldr	r1, [r7, #8]
 801c5da:	68f8      	ldr	r0, [r7, #12]
 801c5dc:	f7ff fe66 	bl	801c2ac <parse_name>
 801c5e0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 801c5e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c5ec:	d101      	bne.n	801c5f2 <dns_answer+0x1ee>
 801c5ee:	2300      	movs	r3, #0
 801c5f0:	e018      	b.n	801c624 <dns_answer+0x220>
		cp += len;
 801c5f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801c5f6:	68ba      	ldr	r2, [r7, #8]
 801c5f8:	4413      	add	r3, r2
 801c5fa:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	3304      	adds	r3, #4
 801c600:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c602:	68bb      	ldr	r3, [r7, #8]
 801c604:	3304      	adds	r3, #4
 801c606:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c608:	68bb      	ldr	r3, [r7, #8]
 801c60a:	3304      	adds	r3, #4
 801c60c:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c60e:	68bb      	ldr	r3, [r7, #8]
 801c610:	3304      	adds	r3, #4
 801c612:	60bb      	str	r3, [r7, #8]
		cp += 4;
 801c614:	68bb      	ldr	r3, [r7, #8]
 801c616:	3304      	adds	r3, #4
 801c618:	60bb      	str	r3, [r7, #8]
		break;
 801c61a:	e002      	b.n	801c622 <dns_answer+0x21e>
		break;
 801c61c:	bf00      	nop
 801c61e:	e000      	b.n	801c622 <dns_answer+0x21e>
		break;
 801c620:	bf00      	nop
	}

	return cp;
 801c622:	68bb      	ldr	r3, [r7, #8]
}
 801c624:	4618      	mov	r0, r3
 801c626:	37d8      	adds	r7, #216	; 0xd8
 801c628:	46bd      	mov	sp, r7
 801c62a:	bd80      	pop	{r7, pc}

0801c62c <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 801c62c:	b580      	push	{r7, lr}
 801c62e:	b088      	sub	sp, #32
 801c630:	af00      	add	r7, sp, #0
 801c632:	60f8      	str	r0, [r7, #12]
 801c634:	60b9      	str	r1, [r7, #8]
 801c636:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 801c63c:	2212      	movs	r2, #18
 801c63e:	2100      	movs	r1, #0
 801c640:	68f8      	ldr	r0, [r7, #12]
 801c642:	f011 fa33 	bl	802daac <memset>

	pdhdr->id = get16(&msg[0]);
 801c646:	6978      	ldr	r0, [r7, #20]
 801c648:	f7ff fdfd 	bl	801c246 <get16>
 801c64c:	4603      	mov	r3, r0
 801c64e:	461a      	mov	r2, r3
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 801c654:	697b      	ldr	r3, [r7, #20]
 801c656:	3302      	adds	r3, #2
 801c658:	4618      	mov	r0, r3
 801c65a:	f7ff fdf4 	bl	801c246 <get16>
 801c65e:	4603      	mov	r3, r0
 801c660:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 801c662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c666:	2b00      	cmp	r3, #0
 801c668:	da02      	bge.n	801c670 <parseDNSMSG+0x44>
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	2201      	movs	r2, #1
 801c66e:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 801c670:	8a7b      	ldrh	r3, [r7, #18]
 801c672:	0adb      	lsrs	r3, r3, #11
 801c674:	b29b      	uxth	r3, r3
 801c676:	b2db      	uxtb	r3, r3
 801c678:	f003 030f 	and.w	r3, r3, #15
 801c67c:	b2da      	uxtb	r2, r3
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 801c682:	8a7b      	ldrh	r3, [r7, #18]
 801c684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c688:	2b00      	cmp	r3, #0
 801c68a:	d002      	beq.n	801c692 <parseDNSMSG+0x66>
 801c68c:	68fb      	ldr	r3, [r7, #12]
 801c68e:	2201      	movs	r2, #1
 801c690:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 801c692:	8a7b      	ldrh	r3, [r7, #18]
 801c694:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d002      	beq.n	801c6a2 <parseDNSMSG+0x76>
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	2201      	movs	r2, #1
 801c6a0:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 801c6a2:	8a7b      	ldrh	r3, [r7, #18]
 801c6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d002      	beq.n	801c6b2 <parseDNSMSG+0x86>
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	2201      	movs	r2, #1
 801c6b0:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 801c6b2:	8a7b      	ldrh	r3, [r7, #18]
 801c6b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d002      	beq.n	801c6c2 <parseDNSMSG+0x96>
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	2201      	movs	r2, #1
 801c6c0:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 801c6c2:	8a7b      	ldrh	r3, [r7, #18]
 801c6c4:	b2db      	uxtb	r3, r3
 801c6c6:	f003 030f 	and.w	r3, r3, #15
 801c6ca:	b2da      	uxtb	r2, r3
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 801c6d0:	697b      	ldr	r3, [r7, #20]
 801c6d2:	3304      	adds	r3, #4
 801c6d4:	4618      	mov	r0, r3
 801c6d6:	f7ff fdb6 	bl	801c246 <get16>
 801c6da:	4603      	mov	r3, r0
 801c6dc:	461a      	mov	r2, r3
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 801c6e2:	697b      	ldr	r3, [r7, #20]
 801c6e4:	3306      	adds	r3, #6
 801c6e6:	4618      	mov	r0, r3
 801c6e8:	f7ff fdad 	bl	801c246 <get16>
 801c6ec:	4603      	mov	r3, r0
 801c6ee:	461a      	mov	r2, r3
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 801c6f4:	697b      	ldr	r3, [r7, #20]
 801c6f6:	3308      	adds	r3, #8
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	f7ff fda4 	bl	801c246 <get16>
 801c6fe:	4603      	mov	r3, r0
 801c700:	461a      	mov	r2, r3
 801c702:	68fb      	ldr	r3, [r7, #12]
 801c704:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 801c706:	697b      	ldr	r3, [r7, #20]
 801c708:	330a      	adds	r3, #10
 801c70a:	4618      	mov	r0, r3
 801c70c:	f7ff fd9b 	bl	801c246 <get16>
 801c710:	4603      	mov	r3, r0
 801c712:	461a      	mov	r2, r3
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 801c718:	697b      	ldr	r3, [r7, #20]
 801c71a:	330c      	adds	r3, #12
 801c71c:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 801c71e:	2300      	movs	r3, #0
 801c720:	83fb      	strh	r3, [r7, #30]
 801c722:	e00d      	b.n	801c740 <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 801c724:	69b9      	ldr	r1, [r7, #24]
 801c726:	6978      	ldr	r0, [r7, #20]
 801c728:	f7ff fe47 	bl	801c3ba <dns_question>
 801c72c:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c72e:	69bb      	ldr	r3, [r7, #24]
 801c730:	2b00      	cmp	r3, #0
 801c732:	d102      	bne.n	801c73a <parseDNSMSG+0x10e>
 801c734:	f04f 33ff 	mov.w	r3, #4294967295
 801c738:	e03b      	b.n	801c7b2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 801c73a:	8bfb      	ldrh	r3, [r7, #30]
 801c73c:	3301      	adds	r3, #1
 801c73e:	83fb      	strh	r3, [r7, #30]
 801c740:	68fb      	ldr	r3, [r7, #12]
 801c742:	895b      	ldrh	r3, [r3, #10]
 801c744:	8bfa      	ldrh	r2, [r7, #30]
 801c746:	429a      	cmp	r2, r3
 801c748:	d3ec      	bcc.n	801c724 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 801c74a:	2300      	movs	r3, #0
 801c74c:	83fb      	strh	r3, [r7, #30]
 801c74e:	e00e      	b.n	801c76e <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 801c750:	687a      	ldr	r2, [r7, #4]
 801c752:	69b9      	ldr	r1, [r7, #24]
 801c754:	6978      	ldr	r0, [r7, #20]
 801c756:	f7ff fe55 	bl	801c404 <dns_answer>
 801c75a:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 801c75c:	69bb      	ldr	r3, [r7, #24]
 801c75e:	2b00      	cmp	r3, #0
 801c760:	d102      	bne.n	801c768 <parseDNSMSG+0x13c>
 801c762:	f04f 33ff 	mov.w	r3, #4294967295
 801c766:	e024      	b.n	801c7b2 <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 801c768:	8bfb      	ldrh	r3, [r7, #30]
 801c76a:	3301      	adds	r3, #1
 801c76c:	83fb      	strh	r3, [r7, #30]
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	899b      	ldrh	r3, [r3, #12]
 801c772:	8bfa      	ldrh	r2, [r7, #30]
 801c774:	429a      	cmp	r2, r3
 801c776:	d3eb      	bcc.n	801c750 <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 801c778:	2300      	movs	r3, #0
 801c77a:	83fb      	strh	r3, [r7, #30]
 801c77c:	e002      	b.n	801c784 <parseDNSMSG+0x158>
 801c77e:	8bfb      	ldrh	r3, [r7, #30]
 801c780:	3301      	adds	r3, #1
 801c782:	83fb      	strh	r3, [r7, #30]
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	89db      	ldrh	r3, [r3, #14]
 801c788:	8bfa      	ldrh	r2, [r7, #30]
 801c78a:	429a      	cmp	r2, r3
 801c78c:	d3f7      	bcc.n	801c77e <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 801c78e:	2300      	movs	r3, #0
 801c790:	83fb      	strh	r3, [r7, #30]
 801c792:	e002      	b.n	801c79a <parseDNSMSG+0x16e>
 801c794:	8bfb      	ldrh	r3, [r7, #30]
 801c796:	3301      	adds	r3, #1
 801c798:	83fb      	strh	r3, [r7, #30]
 801c79a:	68fb      	ldr	r3, [r7, #12]
 801c79c:	8a1b      	ldrh	r3, [r3, #16]
 801c79e:	8bfa      	ldrh	r2, [r7, #30]
 801c7a0:	429a      	cmp	r2, r3
 801c7a2:	d3f7      	bcc.n	801c794 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	7a1b      	ldrb	r3, [r3, #8]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d101      	bne.n	801c7b0 <parseDNSMSG+0x184>
 801c7ac:	2301      	movs	r3, #1
 801c7ae:	e000      	b.n	801c7b2 <parseDNSMSG+0x186>
	else return 0;
 801c7b0:	2300      	movs	r3, #0
}
 801c7b2:	4618      	mov	r0, r3
 801c7b4:	3720      	adds	r7, #32
 801c7b6:	46bd      	mov	sp, r7
 801c7b8:	bd80      	pop	{r7, pc}
	...

0801c7bc <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b0b8      	sub	sp, #224	; 0xe0
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	60b9      	str	r1, [r7, #8]
 801c7c4:	607a      	str	r2, [r7, #4]
 801c7c6:	461a      	mov	r2, r3
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	81fb      	strh	r3, [r7, #14]
 801c7cc:	4613      	mov	r3, r2
 801c7ce:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 801c7d6:	4b57      	ldr	r3, [pc, #348]	; (801c934 <dns_makequery+0x178>)
 801c7d8:	881b      	ldrh	r3, [r3, #0]
 801c7da:	3301      	adds	r3, #1
 801c7dc:	b29a      	uxth	r2, r3
 801c7de:	4b55      	ldr	r3, [pc, #340]	; (801c934 <dns_makequery+0x178>)
 801c7e0:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 801c7e2:	4b54      	ldr	r3, [pc, #336]	; (801c934 <dns_makequery+0x178>)
 801c7e4:	881b      	ldrh	r3, [r3, #0]
 801c7e6:	4619      	mov	r1, r3
 801c7e8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c7ec:	f7ff fd43 	bl	801c276 <put16>
 801c7f0:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 801c7f4:	89fb      	ldrh	r3, [r7, #14]
 801c7f6:	02db      	lsls	r3, r3, #11
 801c7f8:	b21b      	sxth	r3, r3
 801c7fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c7fe:	b21b      	sxth	r3, r3
 801c800:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 801c804:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 801c808:	4619      	mov	r1, r3
 801c80a:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c80e:	f7ff fd32 	bl	801c276 <put16>
 801c812:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 801c816:	2101      	movs	r1, #1
 801c818:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c81c:	f7ff fd2b 	bl	801c276 <put16>
 801c820:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c824:	2100      	movs	r1, #0
 801c826:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c82a:	f7ff fd24 	bl	801c276 <put16>
 801c82e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c832:	2100      	movs	r1, #0
 801c834:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c838:	f7ff fd1d 	bl	801c276 <put16>
 801c83c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 801c840:	2100      	movs	r1, #0
 801c842:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c846:	f7ff fd16 	bl	801c276 <put16>
 801c84a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 801c84e:	f107 0310 	add.w	r3, r7, #16
 801c852:	68b9      	ldr	r1, [r7, #8]
 801c854:	4618      	mov	r0, r3
 801c856:	f011 faf6 	bl	802de46 <strcpy>
	dname = sname;
 801c85a:	f107 0310 	add.w	r3, r7, #16
 801c85e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 801c862:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c866:	f7f3 fd1b 	bl	80102a0 <strlen>
 801c86a:	4603      	mov	r3, r0
 801c86c:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 801c870:	212e      	movs	r1, #46	; 0x2e
 801c872:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 801c876:	f011 f930 	bl	802dada <strchr>
 801c87a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 801c87e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c882:	2b00      	cmp	r3, #0
 801c884:	d006      	beq.n	801c894 <dns_makequery+0xd8>
 801c886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801c88a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801c88e:	1ad3      	subs	r3, r2, r3
 801c890:	81bb      	strh	r3, [r7, #12]
 801c892:	e002      	b.n	801c89a <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 801c894:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 801c898:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 801c89a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c89e:	1c5a      	adds	r2, r3, #1
 801c8a0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c8a4:	89ba      	ldrh	r2, [r7, #12]
 801c8a6:	b2d2      	uxtb	r2, r2
 801c8a8:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 801c8aa:	89bb      	ldrh	r3, [r7, #12]
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d029      	beq.n	801c904 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 801c8b0:	89bb      	ldrh	r3, [r7, #12]
 801c8b2:	461a      	mov	r2, r3
 801c8b4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 801c8b8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c8bc:	f011 f950 	bl	802db60 <strncpy>
		cp += len;
 801c8c0:	89bb      	ldrh	r3, [r7, #12]
 801c8c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c8c6:	4413      	add	r3, r2
 801c8c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 801c8cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801c8d0:	2b00      	cmp	r3, #0
 801c8d2:	d107      	bne.n	801c8e4 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 801c8d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801c8d8:	1c5a      	adds	r2, r3, #1
 801c8da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801c8de:	2200      	movs	r2, #0
 801c8e0:	701a      	strb	r2, [r3, #0]
			break;
 801c8e2:	e010      	b.n	801c906 <dns_makequery+0x14a>
		}
		dname += len+1;
 801c8e4:	89bb      	ldrh	r3, [r7, #12]
 801c8e6:	3301      	adds	r3, #1
 801c8e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801c8ec:	4413      	add	r3, r2
 801c8ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 801c8f2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 801c8f6:	89bb      	ldrh	r3, [r7, #12]
 801c8f8:	1ad3      	subs	r3, r2, r3
 801c8fa:	b29b      	uxth	r3, r3
 801c8fc:	3b01      	subs	r3, #1
 801c8fe:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 801c902:	e7b5      	b.n	801c870 <dns_makequery+0xb4>
		if (len == 0) break;
 801c904:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 801c906:	2101      	movs	r1, #1
 801c908:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c90c:	f7ff fcb3 	bl	801c276 <put16>
 801c910:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 801c914:	2101      	movs	r1, #1
 801c916:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 801c91a:	f7ff fcac 	bl	801c276 <put16>
 801c91e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 801c922:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	1ad3      	subs	r3, r2, r3
 801c92a:	b21b      	sxth	r3, r3
}
 801c92c:	4618      	mov	r0, r3
 801c92e:	37e0      	adds	r7, #224	; 0xe0
 801c930:	46bd      	mov	sp, r7
 801c932:	bd80      	pop	{r7, pc}
 801c934:	200009e2 	.word	0x200009e2

0801c938 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 801c938:	b480      	push	{r7}
 801c93a:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 801c93c:	4b0f      	ldr	r3, [pc, #60]	; (801c97c <check_DNS_timeout+0x44>)
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	2b02      	cmp	r3, #2
 801c942:	d914      	bls.n	801c96e <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 801c944:	4b0d      	ldr	r3, [pc, #52]	; (801c97c <check_DNS_timeout+0x44>)
 801c946:	2200      	movs	r2, #0
 801c948:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 801c94a:	4b0d      	ldr	r3, [pc, #52]	; (801c980 <check_DNS_timeout+0x48>)
 801c94c:	781b      	ldrb	r3, [r3, #0]
 801c94e:	2b01      	cmp	r3, #1
 801c950:	d905      	bls.n	801c95e <check_DNS_timeout+0x26>
			retry_count = 0;
 801c952:	4b0b      	ldr	r3, [pc, #44]	; (801c980 <check_DNS_timeout+0x48>)
 801c954:	2200      	movs	r2, #0
 801c956:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 801c958:	f04f 33ff 	mov.w	r3, #4294967295
 801c95c:	e008      	b.n	801c970 <check_DNS_timeout+0x38>
		}
		retry_count++;
 801c95e:	4b08      	ldr	r3, [pc, #32]	; (801c980 <check_DNS_timeout+0x48>)
 801c960:	781b      	ldrb	r3, [r3, #0]
 801c962:	3301      	adds	r3, #1
 801c964:	b2da      	uxtb	r2, r3
 801c966:	4b06      	ldr	r3, [pc, #24]	; (801c980 <check_DNS_timeout+0x48>)
 801c968:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 801c96a:	2300      	movs	r3, #0
 801c96c:	e000      	b.n	801c970 <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 801c96e:	2301      	movs	r3, #1
}
 801c970:	4618      	mov	r0, r3
 801c972:	46bd      	mov	sp, r7
 801c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c978:	4770      	bx	lr
 801c97a:	bf00      	nop
 801c97c:	200009e4 	.word	0x200009e4
 801c980:	200009e8 	.word	0x200009e8

0801c984 <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 801c984:	b480      	push	{r7}
 801c986:	b083      	sub	sp, #12
 801c988:	af00      	add	r7, sp, #0
 801c98a:	4603      	mov	r3, r0
 801c98c:	6039      	str	r1, [r7, #0]
 801c98e:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 801c990:	4a07      	ldr	r2, [pc, #28]	; (801c9b0 <DNS_init+0x2c>)
 801c992:	79fb      	ldrb	r3, [r7, #7]
 801c994:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 801c996:	4a07      	ldr	r2, [pc, #28]	; (801c9b4 <DNS_init+0x30>)
 801c998:	683b      	ldr	r3, [r7, #0]
 801c99a:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 801c99c:	4b06      	ldr	r3, [pc, #24]	; (801c9b8 <DNS_init+0x34>)
 801c99e:	f241 1222 	movw	r2, #4386	; 0x1122
 801c9a2:	801a      	strh	r2, [r3, #0]
}
 801c9a4:	bf00      	nop
 801c9a6:	370c      	adds	r7, #12
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ae:	4770      	bx	lr
 801c9b0:	200009e0 	.word	0x200009e0
 801c9b4:	200009dc 	.word	0x200009dc
 801c9b8:	200009e2 	.word	0x200009e2

0801c9bc <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, const uint8_t * name, uint8_t * ip_from_dns)
{
 801c9bc:	b590      	push	{r4, r7, lr}
 801c9be:	b08f      	sub	sp, #60	; 0x3c
 801c9c0:	af02      	add	r7, sp, #8
 801c9c2:	60f8      	str	r0, [r7, #12]
 801c9c4:	60b9      	str	r1, [r7, #8]
 801c9c6:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 801c9c8:	4b3b      	ldr	r3, [pc, #236]	; (801cab8 <DNS_run+0xfc>)
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 801c9ce:	4b3b      	ldr	r3, [pc, #236]	; (801cabc <DNS_run+0x100>)
 801c9d0:	2200      	movs	r2, #0
 801c9d2:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 801c9d4:	4b3a      	ldr	r3, [pc, #232]	; (801cac0 <DNS_run+0x104>)
 801c9d6:	7818      	ldrb	r0, [r3, #0]
 801c9d8:	2300      	movs	r3, #0
 801c9da:	2200      	movs	r2, #0
 801c9dc:	2102      	movs	r1, #2
 801c9de:	f7fc fa4f 	bl	8018e80 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 801c9e2:	4b38      	ldr	r3, [pc, #224]	; (801cac4 <DNS_run+0x108>)
 801c9e4:	681a      	ldr	r2, [r3, #0]
 801c9e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c9ea:	68b9      	ldr	r1, [r7, #8]
 801c9ec:	2000      	movs	r0, #0
 801c9ee:	f7ff fee5 	bl	801c7bc <dns_makequery>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801c9f6:	4b32      	ldr	r3, [pc, #200]	; (801cac0 <DNS_run+0x104>)
 801c9f8:	7818      	ldrb	r0, [r3, #0]
 801c9fa:	4b32      	ldr	r3, [pc, #200]	; (801cac4 <DNS_run+0x108>)
 801c9fc:	6819      	ldr	r1, [r3, #0]
 801c9fe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca00:	2335      	movs	r3, #53	; 0x35
 801ca02:	9300      	str	r3, [sp, #0]
 801ca04:	68fb      	ldr	r3, [r7, #12]
 801ca06:	f7fc ff19 	bl	801983c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801ca0a:	4b2d      	ldr	r3, [pc, #180]	; (801cac0 <DNS_run+0x104>)
 801ca0c:	781b      	ldrb	r3, [r3, #0]
 801ca0e:	4618      	mov	r0, r3
 801ca10:	f7fc f8eb 	bl	8018bea <getSn_RX_RSR>
 801ca14:	4603      	mov	r3, r0
 801ca16:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801ca18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d029      	beq.n	801ca72 <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 801ca1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801ca20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca24:	d902      	bls.n	801ca2c <DNS_run+0x70>
 801ca26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 801ca2c:	4b24      	ldr	r3, [pc, #144]	; (801cac0 <DNS_run+0x104>)
 801ca2e:	7818      	ldrb	r0, [r3, #0]
 801ca30:	4b24      	ldr	r3, [pc, #144]	; (801cac4 <DNS_run+0x108>)
 801ca32:	6819      	ldr	r1, [r3, #0]
 801ca34:	f107 0414 	add.w	r4, r7, #20
 801ca38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca3a:	f107 0312 	add.w	r3, r7, #18
 801ca3e:	9300      	str	r3, [sp, #0]
 801ca40:	4623      	mov	r3, r4
 801ca42:	f7fd f831 	bl	8019aa8 <recvfrom>
 801ca46:	4603      	mov	r3, r0
 801ca48:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 801ca4a:	4b1e      	ldr	r3, [pc, #120]	; (801cac4 <DNS_run+0x108>)
 801ca4c:	6819      	ldr	r1, [r3, #0]
 801ca4e:	f107 0318 	add.w	r3, r7, #24
 801ca52:	687a      	ldr	r2, [r7, #4]
 801ca54:	4618      	mov	r0, r3
 801ca56:	f7ff fde9 	bl	801c62c <parseDNSMSG>
 801ca5a:	4603      	mov	r3, r0
 801ca5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 801ca60:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 801ca62:	4b17      	ldr	r3, [pc, #92]	; (801cac0 <DNS_run+0x104>)
 801ca64:	781b      	ldrb	r3, [r3, #0]
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7fc fb1e 	bl	80190a8 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 801ca6c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801ca70:	e01e      	b.n	801cab0 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 801ca72:	f7ff ff61 	bl	801c938 <check_DNS_timeout>
 801ca76:	4603      	mov	r3, r0
 801ca78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 801ca7c:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	da06      	bge.n	801ca92 <DNS_run+0xd6>
			close(DNS_SOCKET);
 801ca84:	4b0e      	ldr	r3, [pc, #56]	; (801cac0 <DNS_run+0x104>)
 801ca86:	781b      	ldrb	r3, [r3, #0]
 801ca88:	4618      	mov	r0, r3
 801ca8a:	f7fc fb0d 	bl	80190a8 <close>
			return 0; // timeout occurred
 801ca8e:	2300      	movs	r3, #0
 801ca90:	e00e      	b.n	801cab0 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 801ca92:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d1b7      	bne.n	801ca0a <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 801ca9a:	4b09      	ldr	r3, [pc, #36]	; (801cac0 <DNS_run+0x104>)
 801ca9c:	7818      	ldrb	r0, [r3, #0]
 801ca9e:	4b09      	ldr	r3, [pc, #36]	; (801cac4 <DNS_run+0x108>)
 801caa0:	6819      	ldr	r1, [r3, #0]
 801caa2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801caa4:	2335      	movs	r3, #53	; 0x35
 801caa6:	9300      	str	r3, [sp, #0]
 801caa8:	68fb      	ldr	r3, [r7, #12]
 801caaa:	f7fc fec7 	bl	801983c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 801caae:	e7ac      	b.n	801ca0a <DNS_run+0x4e>
}
 801cab0:	4618      	mov	r0, r3
 801cab2:	3734      	adds	r7, #52	; 0x34
 801cab4:	46bd      	mov	sp, r7
 801cab6:	bd90      	pop	{r4, r7, pc}
 801cab8:	200009e8 	.word	0x200009e8
 801cabc:	200009e4 	.word	0x200009e4
 801cac0:	200009e0 	.word	0x200009e0
 801cac4:	200009dc 	.word	0x200009dc

0801cac8 <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
 801cac8:	b480      	push	{r7}
 801caca:	af00      	add	r7, sp, #0
	dns_1s_tick++;
 801cacc:	4b04      	ldr	r3, [pc, #16]	; (801cae0 <DNS_time_handler+0x18>)
 801cace:	681b      	ldr	r3, [r3, #0]
 801cad0:	3301      	adds	r3, #1
 801cad2:	4a03      	ldr	r2, [pc, #12]	; (801cae0 <DNS_time_handler+0x18>)
 801cad4:	6013      	str	r3, [r2, #0]
}
 801cad6:	bf00      	nop
 801cad8:	46bd      	mov	sp, r7
 801cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cade:	4770      	bx	lr
 801cae0:	200009e4 	.word	0x200009e4

0801cae4 <Prototype>:
#include "definition.h"
#include "dns.h"
#include "string.h"


void Prototype(void){};
 801cae4:	b480      	push	{r7}
 801cae6:	af00      	add	r7, sp, #0
 801cae8:	bf00      	nop
 801caea:	46bd      	mov	sp, r7
 801caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caf0:	4770      	bx	lr
	...

0801caf4 <dns_service_reg_cb_mutex>:

uint8_t  dns_server_ip[4];

//NetworkReady = *Prototype;

void dns_service_reg_cb_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 801caf4:	b480      	push	{r7}
 801caf6:	b083      	sub	sp, #12
 801caf8:	af00      	add	r7, sp, #0
 801cafa:	6078      	str	r0, [r7, #4]
 801cafc:	6039      	str	r1, [r7, #0]

	if (get_mutex) DNSMutexGet = get_mutex;
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d002      	beq.n	801cb0a <dns_service_reg_cb_mutex+0x16>
 801cb04:	4a07      	ldr	r2, [pc, #28]	; (801cb24 <dns_service_reg_cb_mutex+0x30>)
 801cb06:	687b      	ldr	r3, [r7, #4]
 801cb08:	6013      	str	r3, [r2, #0]
	if (release_mutex) DNSMutexRelease = release_mutex;
 801cb0a:	683b      	ldr	r3, [r7, #0]
 801cb0c:	2b00      	cmp	r3, #0
 801cb0e:	d002      	beq.n	801cb16 <dns_service_reg_cb_mutex+0x22>
 801cb10:	4a05      	ldr	r2, [pc, #20]	; (801cb28 <dns_service_reg_cb_mutex+0x34>)
 801cb12:	683b      	ldr	r3, [r7, #0]
 801cb14:	6013      	str	r3, [r2, #0]

}
 801cb16:	bf00      	nop
 801cb18:	370c      	adds	r7, #12
 801cb1a:	46bd      	mov	sp, r7
 801cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb20:	4770      	bx	lr
 801cb22:	bf00      	nop
 801cb24:	20000114 	.word	0x20000114
 801cb28:	20000118 	.word	0x20000118

0801cb2c <dns_service_reg_cb_net_ready>:

void dns_service_reg_cb_net_ready(void (*func)){
 801cb2c:	b480      	push	{r7}
 801cb2e:	b083      	sub	sp, #12
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]

	if ( func ) NetworkReady = func;
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	2b00      	cmp	r3, #0
 801cb38:	d002      	beq.n	801cb40 <dns_service_reg_cb_net_ready+0x14>
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	4a03      	ldr	r2, [pc, #12]	; (801cb4c <dns_service_reg_cb_net_ready+0x20>)
 801cb3e:	6013      	str	r3, [r2, #0]

}
 801cb40:	bf00      	nop
 801cb42:	370c      	adds	r7, #12
 801cb44:	46bd      	mov	sp, r7
 801cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb4a:	4770      	bx	lr
 801cb4c:	2000011c 	.word	0x2000011c

0801cb50 <dns_service_init>:

int dns_service_init(uint8_t socket, uint8_t * buf, uint16_t buf_len){
 801cb50:	b580      	push	{r7, lr}
 801cb52:	b082      	sub	sp, #8
 801cb54:	af00      	add	r7, sp, #0
 801cb56:	4603      	mov	r3, r0
 801cb58:	6039      	str	r1, [r7, #0]
 801cb5a:	71fb      	strb	r3, [r7, #7]
 801cb5c:	4613      	mov	r3, r2
 801cb5e:	80bb      	strh	r3, [r7, #4]

	if (buf_len < MAX_DNS_BUF_SIZE) return -1;
 801cb60:	88bb      	ldrh	r3, [r7, #4]
 801cb62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb66:	d202      	bcs.n	801cb6e <dns_service_init+0x1e>
 801cb68:	f04f 33ff 	mov.w	r3, #4294967295
 801cb6c:	e005      	b.n	801cb7a <dns_service_init+0x2a>
	// if buff  less then MAX_DNS_BUF_SIZE return error;
	DNS_init(socket, buf);
 801cb6e:	79fb      	ldrb	r3, [r7, #7]
 801cb70:	6839      	ldr	r1, [r7, #0]
 801cb72:	4618      	mov	r0, r3
 801cb74:	f7ff ff06 	bl	801c984 <DNS_init>
	return 0;
 801cb78:	2300      	movs	r3, #0
}
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	3708      	adds	r7, #8
 801cb7e:	46bd      	mov	sp, r7
 801cb80:	bd80      	pop	{r7, pc}
	...

0801cb84 <dns_service_set_dns_ip>:

void dns_service_set_dns_ip(uint8_t * ip_addr){
 801cb84:	b480      	push	{r7}
 801cb86:	b083      	sub	sp, #12
 801cb88:	af00      	add	r7, sp, #0
 801cb8a:	6078      	str	r0, [r7, #4]
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	681b      	ldr	r3, [r3, #0]
 801cb90:	461a      	mov	r2, r3
	memcpy(dns_server_ip, ip_addr, sizeof(dns_server_ip));
 801cb92:	4b04      	ldr	r3, [pc, #16]	; (801cba4 <dns_service_set_dns_ip+0x20>)
 801cb94:	601a      	str	r2, [r3, #0]
}
 801cb96:	bf00      	nop
 801cb98:	370c      	adds	r7, #12
 801cb9a:	46bd      	mov	sp, r7
 801cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba0:	4770      	bx	lr
 801cba2:	bf00      	nop
 801cba4:	200009ec 	.word	0x200009ec

0801cba8 <dns_service_resolve_name>:

int8_t dns_service_resolve_name(const char * domain_name, uint8_t * resolved_ip){
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b084      	sub	sp, #16
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
 801cbb0:	6039      	str	r1, [r7, #0]
#ifdef DNS_USE_MUTEX
	DNSMutexGet();
 801cbb2:	4b0e      	ldr	r3, [pc, #56]	; (801cbec <dns_service_resolve_name+0x44>)
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	4798      	blx	r3
#endif
	int8_t err;
	if (NetworkReady()){
 801cbb8:	4b0d      	ldr	r3, [pc, #52]	; (801cbf0 <dns_service_resolve_name+0x48>)
 801cbba:	681b      	ldr	r3, [r3, #0]
 801cbbc:	4798      	blx	r3
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d007      	beq.n	801cbd4 <dns_service_resolve_name+0x2c>
		err = DNS_run(dns_server_ip, domain_name, resolved_ip);
 801cbc4:	683a      	ldr	r2, [r7, #0]
 801cbc6:	6879      	ldr	r1, [r7, #4]
 801cbc8:	480a      	ldr	r0, [pc, #40]	; (801cbf4 <dns_service_resolve_name+0x4c>)
 801cbca:	f7ff fef7 	bl	801c9bc <DNS_run>
 801cbce:	4603      	mov	r3, r0
 801cbd0:	73fb      	strb	r3, [r7, #15]
 801cbd2:	e001      	b.n	801cbd8 <dns_service_resolve_name+0x30>
	}else{
		err = -1;
 801cbd4:	23ff      	movs	r3, #255	; 0xff
 801cbd6:	73fb      	strb	r3, [r7, #15]
	}


#ifdef DNS_USE_MUTEX
	DNSMutexRelease();
 801cbd8:	4b07      	ldr	r3, [pc, #28]	; (801cbf8 <dns_service_resolve_name+0x50>)
 801cbda:	681b      	ldr	r3, [r3, #0]
 801cbdc:	4798      	blx	r3
#endif
	return err;
 801cbde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	3710      	adds	r7, #16
 801cbe6:	46bd      	mov	sp, r7
 801cbe8:	bd80      	pop	{r7, pc}
 801cbea:	bf00      	nop
 801cbec:	20000114 	.word	0x20000114
 801cbf0:	2000011c 	.word	0x2000011c
 801cbf4:	200009ec 	.word	0x200009ec
 801cbf8:	20000118 	.word	0x20000118

0801cbfc <dns_service_increment_second>:

void dns_service_increment_second(void){
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	af00      	add	r7, sp, #0
	DNS_time_handler();
 801cc00:	f7ff ff62 	bl	801cac8 <DNS_time_handler>
}
 801cc04:	bf00      	nop
 801cc06:	bd80      	pop	{r7, pc}

0801cc08 <isValidIPv4>:
        str++; //point to next character
    }
    return 1;
}

bool isValidIPv4(const char* ipAddress) {
 801cc08:	b580      	push	{r7, lr}
 801cc0a:	b086      	sub	sp, #24
 801cc0c:	af00      	add	r7, sp, #0
 801cc0e:	6078      	str	r0, [r7, #4]
    if (ipAddress == NULL) {
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d101      	bne.n	801cc1a <isValidIPv4+0x12>
        return false;
 801cc16:	2300      	movs	r3, #0
 801cc18:	e068      	b.n	801ccec <isValidIPv4+0xe4>
    }

    int num = 0;    // Current segment value
 801cc1a:	2300      	movs	r3, #0
 801cc1c:	617b      	str	r3, [r7, #20]
    int count = 0;  // Count of segments in the IP address
 801cc1e:	2300      	movs	r3, #0
 801cc20:	613b      	str	r3, [r7, #16]
    int segmentLength = 0;
 801cc22:	2300      	movs	r3, #0
 801cc24:	60fb      	str	r3, [r7, #12]

    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801cc26:	2300      	movs	r3, #0
 801cc28:	60bb      	str	r3, [r7, #8]
 801cc2a:	e043      	b.n	801ccb4 <isValidIPv4+0xac>
        if (isdigit((unsigned char)ipAddress[i])) {
 801cc2c:	687a      	ldr	r2, [r7, #4]
 801cc2e:	68bb      	ldr	r3, [r7, #8]
 801cc30:	4413      	add	r3, r2
 801cc32:	781b      	ldrb	r3, [r3, #0]
 801cc34:	3b30      	subs	r3, #48	; 0x30
 801cc36:	2b09      	cmp	r3, #9
 801cc38:	d818      	bhi.n	801cc6c <isValidIPv4+0x64>
            num = num * 10 + (ipAddress[i] - '0');
 801cc3a:	697a      	ldr	r2, [r7, #20]
 801cc3c:	4613      	mov	r3, r2
 801cc3e:	009b      	lsls	r3, r3, #2
 801cc40:	4413      	add	r3, r2
 801cc42:	005b      	lsls	r3, r3, #1
 801cc44:	4619      	mov	r1, r3
 801cc46:	687a      	ldr	r2, [r7, #4]
 801cc48:	68bb      	ldr	r3, [r7, #8]
 801cc4a:	4413      	add	r3, r2
 801cc4c:	781b      	ldrb	r3, [r3, #0]
 801cc4e:	3b30      	subs	r3, #48	; 0x30
 801cc50:	440b      	add	r3, r1
 801cc52:	617b      	str	r3, [r7, #20]

            // Check if the segment value is in the valid range
            if (num < 0 || num > 255) {
 801cc54:	697b      	ldr	r3, [r7, #20]
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	db02      	blt.n	801cc60 <isValidIPv4+0x58>
 801cc5a:	697b      	ldr	r3, [r7, #20]
 801cc5c:	2bff      	cmp	r3, #255	; 0xff
 801cc5e:	dd01      	ble.n	801cc64 <isValidIPv4+0x5c>
                return false;
 801cc60:	2300      	movs	r3, #0
 801cc62:	e043      	b.n	801ccec <isValidIPv4+0xe4>
            }

            segmentLength++;
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	3301      	adds	r3, #1
 801cc68:	60fb      	str	r3, [r7, #12]
 801cc6a:	e020      	b.n	801ccae <isValidIPv4+0xa6>
        } else if (ipAddress[i] == '.') {
 801cc6c:	687a      	ldr	r2, [r7, #4]
 801cc6e:	68bb      	ldr	r3, [r7, #8]
 801cc70:	4413      	add	r3, r2
 801cc72:	781b      	ldrb	r3, [r3, #0]
 801cc74:	2b2e      	cmp	r3, #46	; 0x2e
 801cc76:	d118      	bne.n	801ccaa <isValidIPv4+0xa2>
            // Check if the segment has leading zeros
            if (segmentLength > 1 && ipAddress[i - segmentLength] == '0') {
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	2b01      	cmp	r3, #1
 801cc7c:	dd09      	ble.n	801cc92 <isValidIPv4+0x8a>
 801cc7e:	68fb      	ldr	r3, [r7, #12]
 801cc80:	68ba      	ldr	r2, [r7, #8]
 801cc82:	1ad3      	subs	r3, r2, r3
 801cc84:	687a      	ldr	r2, [r7, #4]
 801cc86:	4413      	add	r3, r2
 801cc88:	781b      	ldrb	r3, [r3, #0]
 801cc8a:	2b30      	cmp	r3, #48	; 0x30
 801cc8c:	d101      	bne.n	801cc92 <isValidIPv4+0x8a>
                return false;
 801cc8e:	2300      	movs	r3, #0
 801cc90:	e02c      	b.n	801ccec <isValidIPv4+0xe4>
            }

            // Move to the next segment
            num = 0;
 801cc92:	2300      	movs	r3, #0
 801cc94:	617b      	str	r3, [r7, #20]
            count++;
 801cc96:	693b      	ldr	r3, [r7, #16]
 801cc98:	3301      	adds	r3, #1
 801cc9a:	613b      	str	r3, [r7, #16]
            segmentLength = 0;
 801cc9c:	2300      	movs	r3, #0
 801cc9e:	60fb      	str	r3, [r7, #12]

            // Check if there are more than 4 segments
            if (count > 3) {
 801cca0:	693b      	ldr	r3, [r7, #16]
 801cca2:	2b03      	cmp	r3, #3
 801cca4:	dd03      	ble.n	801ccae <isValidIPv4+0xa6>
                return false;
 801cca6:	2300      	movs	r3, #0
 801cca8:	e020      	b.n	801ccec <isValidIPv4+0xe4>
            }
        } else {
            // Invalid character in the IP address
            return false;
 801ccaa:	2300      	movs	r3, #0
 801ccac:	e01e      	b.n	801ccec <isValidIPv4+0xe4>
    for (size_t i = 0; ipAddress[i] != '\0'; ++i) {
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	3301      	adds	r3, #1
 801ccb2:	60bb      	str	r3, [r7, #8]
 801ccb4:	687a      	ldr	r2, [r7, #4]
 801ccb6:	68bb      	ldr	r3, [r7, #8]
 801ccb8:	4413      	add	r3, r2
 801ccba:	781b      	ldrb	r3, [r3, #0]
 801ccbc:	2b00      	cmp	r3, #0
 801ccbe:	d1b5      	bne.n	801cc2c <isValidIPv4+0x24>
        }
    }

    // Check if the last segment has leading zeros
    if (segmentLength > 1 && ipAddress[strlen(ipAddress) - segmentLength] == '0') {
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	2b01      	cmp	r3, #1
 801ccc4:	dd0c      	ble.n	801cce0 <isValidIPv4+0xd8>
 801ccc6:	6878      	ldr	r0, [r7, #4]
 801ccc8:	f7f3 faea 	bl	80102a0 <strlen>
 801cccc:	4602      	mov	r2, r0
 801ccce:	68fb      	ldr	r3, [r7, #12]
 801ccd0:	1ad3      	subs	r3, r2, r3
 801ccd2:	687a      	ldr	r2, [r7, #4]
 801ccd4:	4413      	add	r3, r2
 801ccd6:	781b      	ldrb	r3, [r3, #0]
 801ccd8:	2b30      	cmp	r3, #48	; 0x30
 801ccda:	d101      	bne.n	801cce0 <isValidIPv4+0xd8>
        return false;
 801ccdc:	2300      	movs	r3, #0
 801ccde:	e005      	b.n	801ccec <isValidIPv4+0xe4>
    }

    // Check if there are exactly 4 segments in the IP address
    return count == 3;
 801cce0:	693b      	ldr	r3, [r7, #16]
 801cce2:	2b03      	cmp	r3, #3
 801cce4:	bf0c      	ite	eq
 801cce6:	2301      	moveq	r3, #1
 801cce8:	2300      	movne	r3, #0
 801ccea:	b2db      	uxtb	r3, r3
}
 801ccec:	4618      	mov	r0, r3
 801ccee:	3718      	adds	r7, #24
 801ccf0:	46bd      	mov	sp, r7
 801ccf2:	bd80      	pop	{r7, pc}

0801ccf4 <NewMessageData>:
#include "MQTTClient.h"

#include "main.h"
#include "cmsis_os.h" // this 2 include is needed only for taskYELD() function

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 801ccf4:	b480      	push	{r7}
 801ccf6:	b085      	sub	sp, #20
 801ccf8:	af00      	add	r7, sp, #0
 801ccfa:	60f8      	str	r0, [r7, #12]
 801ccfc:	60b9      	str	r1, [r7, #8]
 801ccfe:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 801cd00:	68fb      	ldr	r3, [r7, #12]
 801cd02:	68ba      	ldr	r2, [r7, #8]
 801cd04:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801cd06:	68fb      	ldr	r3, [r7, #12]
 801cd08:	687a      	ldr	r2, [r7, #4]
 801cd0a:	601a      	str	r2, [r3, #0]
}
 801cd0c:	bf00      	nop
 801cd0e:	3714      	adds	r7, #20
 801cd10:	46bd      	mov	sp, r7
 801cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd16:	4770      	bx	lr

0801cd18 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801cd18:	b480      	push	{r7}
 801cd1a:	b083      	sub	sp, #12
 801cd1c:	af00      	add	r7, sp, #0
 801cd1e:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	681b      	ldr	r3, [r3, #0]
 801cd24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cd28:	4293      	cmp	r3, r2
 801cd2a:	d003      	beq.n	801cd34 <getNextPacketId+0x1c>
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	3301      	adds	r3, #1
 801cd32:	e000      	b.n	801cd36 <getNextPacketId+0x1e>
 801cd34:	2301      	movs	r3, #1
 801cd36:	687a      	ldr	r2, [r7, #4]
 801cd38:	6013      	str	r3, [r2, #0]
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	681b      	ldr	r3, [r3, #0]
}
 801cd3e:	4618      	mov	r0, r3
 801cd40:	370c      	adds	r7, #12
 801cd42:	46bd      	mov	sp, r7
 801cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd48:	4770      	bx	lr

0801cd4a <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801cd4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd4c:	b087      	sub	sp, #28
 801cd4e:	af00      	add	r7, sp, #0
 801cd50:	60f8      	str	r0, [r7, #12]
 801cd52:	60b9      	str	r1, [r7, #8]
 801cd54:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 801cd56:	f04f 33ff 	mov.w	r3, #4294967295
 801cd5a:	617b      	str	r3, [r7, #20]
        sent = 0;
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 801cd60:	e018      	b.n	801cd94 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd66:	689c      	ldr	r4, [r3, #8]
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cd6c:	68fb      	ldr	r3, [r7, #12]
 801cd6e:	691a      	ldr	r2, [r3, #16]
 801cd70:	693b      	ldr	r3, [r7, #16]
 801cd72:	18d6      	adds	r6, r2, r3
 801cd74:	6878      	ldr	r0, [r7, #4]
 801cd76:	f000 fd17 	bl	801d7a8 <TimerLeftMS>
 801cd7a:	4603      	mov	r3, r0
 801cd7c:	68ba      	ldr	r2, [r7, #8]
 801cd7e:	4631      	mov	r1, r6
 801cd80:	4628      	mov	r0, r5
 801cd82:	47a0      	blx	r4
 801cd84:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 801cd86:	697b      	ldr	r3, [r7, #20]
 801cd88:	2b00      	cmp	r3, #0
 801cd8a:	db0e      	blt.n	801cdaa <sendPacket+0x60>
            break;
        sent += rc;
 801cd8c:	693a      	ldr	r2, [r7, #16]
 801cd8e:	697b      	ldr	r3, [r7, #20]
 801cd90:	4413      	add	r3, r2
 801cd92:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 801cd94:	693a      	ldr	r2, [r7, #16]
 801cd96:	68bb      	ldr	r3, [r7, #8]
 801cd98:	429a      	cmp	r2, r3
 801cd9a:	da07      	bge.n	801cdac <sendPacket+0x62>
 801cd9c:	6878      	ldr	r0, [r7, #4]
 801cd9e:	f000 fcc1 	bl	801d724 <TimerIsExpired>
 801cda2:	4603      	mov	r3, r0
 801cda4:	2b00      	cmp	r3, #0
 801cda6:	d0dc      	beq.n	801cd62 <sendPacket+0x18>
 801cda8:	e000      	b.n	801cdac <sendPacket+0x62>
            break;
 801cdaa:	bf00      	nop
    }
    if (sent == length)
 801cdac:	693a      	ldr	r2, [r7, #16]
 801cdae:	68bb      	ldr	r3, [r7, #8]
 801cdb0:	429a      	cmp	r2, r3
 801cdb2:	d10b      	bne.n	801cdcc <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 801cdb4:	68fb      	ldr	r3, [r7, #12]
 801cdb6:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801cdba:	68fb      	ldr	r3, [r7, #12]
 801cdbc:	699b      	ldr	r3, [r3, #24]
 801cdbe:	4619      	mov	r1, r3
 801cdc0:	4610      	mov	r0, r2
 801cdc2:	f000 fcd9 	bl	801d778 <TimerCountdown>
        rc = SUCCESSS;
 801cdc6:	2300      	movs	r3, #0
 801cdc8:	617b      	str	r3, [r7, #20]
 801cdca:	e002      	b.n	801cdd2 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 801cdcc:	f04f 33ff 	mov.w	r3, #4294967295
 801cdd0:	617b      	str	r3, [r7, #20]
    return rc;
 801cdd2:	697b      	ldr	r3, [r7, #20]
}
 801cdd4:	4618      	mov	r0, r3
 801cdd6:	371c      	adds	r7, #28
 801cdd8:	46bd      	mov	sp, r7
 801cdda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cddc <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 801cddc:	b580      	push	{r7, lr}
 801cdde:	b086      	sub	sp, #24
 801cde0:	af00      	add	r7, sp, #0
 801cde2:	60f8      	str	r0, [r7, #12]
 801cde4:	60b9      	str	r1, [r7, #8]
 801cde6:	607a      	str	r2, [r7, #4]
 801cde8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	68ba      	ldr	r2, [r7, #8]
 801cdee:	651a      	str	r2, [r3, #80]	; 0x50

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801cdf0:	2300      	movs	r3, #0
 801cdf2:	617b      	str	r3, [r7, #20]
 801cdf4:	e009      	b.n	801ce0a <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 801cdf6:	68fa      	ldr	r2, [r7, #12]
 801cdf8:	697b      	ldr	r3, [r7, #20]
 801cdfa:	3304      	adds	r3, #4
 801cdfc:	00db      	lsls	r3, r3, #3
 801cdfe:	4413      	add	r3, r2
 801ce00:	2200      	movs	r2, #0
 801ce02:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801ce04:	697b      	ldr	r3, [r7, #20]
 801ce06:	3301      	adds	r3, #1
 801ce08:	617b      	str	r3, [r7, #20]
 801ce0a:	697b      	ldr	r3, [r7, #20]
 801ce0c:	2b04      	cmp	r3, #4
 801ce0e:	ddf2      	ble.n	801cdf6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 801ce10:	68fb      	ldr	r3, [r7, #12]
 801ce12:	687a      	ldr	r2, [r7, #4]
 801ce14:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	683a      	ldr	r2, [r7, #0]
 801ce1a:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801ce1c:	68fb      	ldr	r3, [r7, #12]
 801ce1e:	6a3a      	ldr	r2, [r7, #32]
 801ce20:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce26:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801ce28:	68fb      	ldr	r3, [r7, #12]
 801ce2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ce2c:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 801ce2e:	68fb      	ldr	r3, [r7, #12]
 801ce30:	2200      	movs	r2, #0
 801ce32:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 801ce34:	68fb      	ldr	r3, [r7, #12]
 801ce36:	2200      	movs	r2, #0
 801ce38:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 801ce3a:	68fb      	ldr	r3, [r7, #12]
 801ce3c:	2200      	movs	r2, #0
 801ce3e:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 801ce40:	68fb      	ldr	r3, [r7, #12]
 801ce42:	2201      	movs	r2, #1
 801ce44:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 801ce46:	68fb      	ldr	r3, [r7, #12]
 801ce48:	3354      	adds	r3, #84	; 0x54
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	f000 fc5c 	bl	801d708 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 801ce50:	bf00      	nop
 801ce52:	3718      	adds	r7, #24
 801ce54:	46bd      	mov	sp, r7
 801ce56:	bd80      	pop	{r7, pc}

0801ce58 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 801ce58:	b590      	push	{r4, r7, lr}
 801ce5a:	b08b      	sub	sp, #44	; 0x2c
 801ce5c:	af00      	add	r7, sp, #0
 801ce5e:	60f8      	str	r0, [r7, #12]
 801ce60:	60b9      	str	r1, [r7, #8]
 801ce62:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 801ce64:	2301      	movs	r3, #1
 801ce66:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 801ce68:	2300      	movs	r3, #0
 801ce6a:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 801ce6c:	2304      	movs	r3, #4
 801ce6e:	61fb      	str	r3, [r7, #28]

    *value = 0;
 801ce70:	68bb      	ldr	r3, [r7, #8]
 801ce72:	2200      	movs	r2, #0
 801ce74:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 801ce76:	f04f 33ff 	mov.w	r3, #4294967295
 801ce7a:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801ce7c:	6a3b      	ldr	r3, [r7, #32]
 801ce7e:	3301      	adds	r3, #1
 801ce80:	623b      	str	r3, [r7, #32]
 801ce82:	6a3a      	ldr	r2, [r7, #32]
 801ce84:	69fb      	ldr	r3, [r7, #28]
 801ce86:	429a      	cmp	r2, r3
 801ce88:	dd03      	ble.n	801ce92 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 801ce8a:	f04f 33ff 	mov.w	r3, #4294967295
 801ce8e:	61bb      	str	r3, [r7, #24]
            goto exit;
 801ce90:	e021      	b.n	801ced6 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 801ce92:	68fb      	ldr	r3, [r7, #12]
 801ce94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce96:	685c      	ldr	r4, [r3, #4]
 801ce98:	68fb      	ldr	r3, [r7, #12]
 801ce9a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801ce9c:	f107 0117 	add.w	r1, r7, #23
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	2201      	movs	r2, #1
 801cea4:	47a0      	blx	r4
 801cea6:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801cea8:	69bb      	ldr	r3, [r7, #24]
 801ceaa:	2b01      	cmp	r3, #1
 801ceac:	d112      	bne.n	801ced4 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 801ceae:	68bb      	ldr	r3, [r7, #8]
 801ceb0:	681a      	ldr	r2, [r3, #0]
 801ceb2:	7dfb      	ldrb	r3, [r7, #23]
 801ceb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ceb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ceba:	fb01 f303 	mul.w	r3, r1, r3
 801cebe:	441a      	add	r2, r3
 801cec0:	68bb      	ldr	r3, [r7, #8]
 801cec2:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 801cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cec6:	01db      	lsls	r3, r3, #7
 801cec8:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801ceca:	7dfb      	ldrb	r3, [r7, #23]
 801cecc:	b25b      	sxtb	r3, r3
 801cece:	2b00      	cmp	r3, #0
 801ced0:	dbd1      	blt.n	801ce76 <decodePacket+0x1e>
exit:
 801ced2:	e000      	b.n	801ced6 <decodePacket+0x7e>
            goto exit;
 801ced4:	bf00      	nop
    return len;
 801ced6:	6a3b      	ldr	r3, [r7, #32]
}
 801ced8:	4618      	mov	r0, r3
 801ceda:	372c      	adds	r7, #44	; 0x2c
 801cedc:	46bd      	mov	sp, r7
 801cede:	bd90      	pop	{r4, r7, pc}

0801cee0 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 801cee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cee2:	b089      	sub	sp, #36	; 0x24
 801cee4:	af00      	add	r7, sp, #0
 801cee6:	60f8      	str	r0, [r7, #12]
 801cee8:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 801ceea:	f04f 33ff 	mov.w	r3, #4294967295
 801ceee:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 801cef0:	2300      	movs	r3, #0
 801cef2:	617b      	str	r3, [r7, #20]
    int len = 0;
 801cef4:	2300      	movs	r3, #0
 801cef6:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 801cef8:	2300      	movs	r3, #0
 801cefa:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf00:	685c      	ldr	r4, [r3, #4]
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	695e      	ldr	r6, [r3, #20]
 801cf0a:	68b8      	ldr	r0, [r7, #8]
 801cf0c:	f000 fc4c 	bl	801d7a8 <TimerLeftMS>
 801cf10:	4603      	mov	r3, r0
 801cf12:	2201      	movs	r2, #1
 801cf14:	4631      	mov	r1, r6
 801cf16:	4628      	mov	r0, r5
 801cf18:	47a0      	blx	r4
 801cf1a:	4603      	mov	r3, r0
 801cf1c:	2b01      	cmp	r3, #1
 801cf1e:	d13b      	bne.n	801cf98 <readPacket+0xb8>
        goto exit;

    len = 1;
 801cf20:	2301      	movs	r3, #1
 801cf22:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 801cf24:	68b8      	ldr	r0, [r7, #8]
 801cf26:	f000 fc3f 	bl	801d7a8 <TimerLeftMS>
 801cf2a:	4602      	mov	r2, r0
 801cf2c:	f107 0310 	add.w	r3, r7, #16
 801cf30:	4619      	mov	r1, r3
 801cf32:	68f8      	ldr	r0, [r7, #12]
 801cf34:	f7ff ff90 	bl	801ce58 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	695b      	ldr	r3, [r3, #20]
 801cf3c:	3301      	adds	r3, #1
 801cf3e:	693a      	ldr	r2, [r7, #16]
 801cf40:	4611      	mov	r1, r2
 801cf42:	4618      	mov	r0, r3
 801cf44:	f000 ffa4 	bl	801de90 <MQTTPacket_encode>
 801cf48:	4602      	mov	r2, r0
 801cf4a:	69bb      	ldr	r3, [r7, #24]
 801cf4c:	4413      	add	r3, r2
 801cf4e:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 801cf50:	693b      	ldr	r3, [r7, #16]
 801cf52:	2b00      	cmp	r3, #0
 801cf54:	dd16      	ble.n	801cf84 <readPacket+0xa4>
 801cf56:	68fb      	ldr	r3, [r7, #12]
 801cf58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cf5a:	685c      	ldr	r4, [r3, #4]
 801cf5c:	68fb      	ldr	r3, [r7, #12]
 801cf5e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 801cf60:	68fb      	ldr	r3, [r7, #12]
 801cf62:	695a      	ldr	r2, [r3, #20]
 801cf64:	69bb      	ldr	r3, [r7, #24]
 801cf66:	18d6      	adds	r6, r2, r3
 801cf68:	693b      	ldr	r3, [r7, #16]
 801cf6a:	607b      	str	r3, [r7, #4]
 801cf6c:	68b8      	ldr	r0, [r7, #8]
 801cf6e:	f000 fc1b 	bl	801d7a8 <TimerLeftMS>
 801cf72:	4603      	mov	r3, r0
 801cf74:	687a      	ldr	r2, [r7, #4]
 801cf76:	4631      	mov	r1, r6
 801cf78:	4628      	mov	r0, r5
 801cf7a:	47a0      	blx	r4
 801cf7c:	4602      	mov	r2, r0
 801cf7e:	693b      	ldr	r3, [r7, #16]
 801cf80:	429a      	cmp	r2, r3
 801cf82:	d10b      	bne.n	801cf9c <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 801cf84:	68fb      	ldr	r3, [r7, #12]
 801cf86:	695b      	ldr	r3, [r3, #20]
 801cf88:	781b      	ldrb	r3, [r3, #0]
 801cf8a:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 801cf8c:	7d3b      	ldrb	r3, [r7, #20]
 801cf8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801cf92:	b2db      	uxtb	r3, r3
 801cf94:	61fb      	str	r3, [r7, #28]
 801cf96:	e002      	b.n	801cf9e <readPacket+0xbe>
        goto exit;
 801cf98:	bf00      	nop
 801cf9a:	e000      	b.n	801cf9e <readPacket+0xbe>
        goto exit;
 801cf9c:	bf00      	nop
exit:
    return rc;
 801cf9e:	69fb      	ldr	r3, [r7, #28]
}
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	3724      	adds	r7, #36	; 0x24
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801cfa8 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801cfa8:	b480      	push	{r7}
 801cfaa:	b087      	sub	sp, #28
 801cfac:	af00      	add	r7, sp, #0
 801cfae:	6078      	str	r0, [r7, #4]
 801cfb0:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 801cfb6:	683b      	ldr	r3, [r7, #0]
 801cfb8:	689b      	ldr	r3, [r3, #8]
 801cfba:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801cfbc:	683b      	ldr	r3, [r7, #0]
 801cfbe:	685b      	ldr	r3, [r3, #4]
 801cfc0:	461a      	mov	r2, r3
 801cfc2:	693b      	ldr	r3, [r7, #16]
 801cfc4:	4413      	add	r3, r2
 801cfc6:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801cfc8:	e039      	b.n	801d03e <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801cfca:	693b      	ldr	r3, [r7, #16]
 801cfcc:	781b      	ldrb	r3, [r3, #0]
 801cfce:	2b2f      	cmp	r3, #47	; 0x2f
 801cfd0:	d103      	bne.n	801cfda <isTopicMatched+0x32>
 801cfd2:	697b      	ldr	r3, [r7, #20]
 801cfd4:	781b      	ldrb	r3, [r3, #0]
 801cfd6:	2b2f      	cmp	r3, #47	; 0x2f
 801cfd8:	d13a      	bne.n	801d050 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801cfda:	697b      	ldr	r3, [r7, #20]
 801cfdc:	781b      	ldrb	r3, [r3, #0]
 801cfde:	2b2b      	cmp	r3, #43	; 0x2b
 801cfe0:	d009      	beq.n	801cff6 <isTopicMatched+0x4e>
 801cfe2:	697b      	ldr	r3, [r7, #20]
 801cfe4:	781b      	ldrb	r3, [r3, #0]
 801cfe6:	2b23      	cmp	r3, #35	; 0x23
 801cfe8:	d005      	beq.n	801cff6 <isTopicMatched+0x4e>
 801cfea:	697b      	ldr	r3, [r7, #20]
 801cfec:	781a      	ldrb	r2, [r3, #0]
 801cfee:	693b      	ldr	r3, [r7, #16]
 801cff0:	781b      	ldrb	r3, [r3, #0]
 801cff2:	429a      	cmp	r2, r3
 801cff4:	d12e      	bne.n	801d054 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 801cff6:	697b      	ldr	r3, [r7, #20]
 801cff8:	781b      	ldrb	r3, [r3, #0]
 801cffa:	2b2b      	cmp	r3, #43	; 0x2b
 801cffc:	d112      	bne.n	801d024 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 801cffe:	693b      	ldr	r3, [r7, #16]
 801d000:	3301      	adds	r3, #1
 801d002:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801d004:	e005      	b.n	801d012 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 801d006:	693b      	ldr	r3, [r7, #16]
 801d008:	3301      	adds	r3, #1
 801d00a:	613b      	str	r3, [r7, #16]
 801d00c:	693b      	ldr	r3, [r7, #16]
 801d00e:	3301      	adds	r3, #1
 801d010:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 801d012:	68fa      	ldr	r2, [r7, #12]
 801d014:	68bb      	ldr	r3, [r7, #8]
 801d016:	429a      	cmp	r2, r3
 801d018:	d20b      	bcs.n	801d032 <isTopicMatched+0x8a>
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	781b      	ldrb	r3, [r3, #0]
 801d01e:	2b2f      	cmp	r3, #47	; 0x2f
 801d020:	d1f1      	bne.n	801d006 <isTopicMatched+0x5e>
 801d022:	e006      	b.n	801d032 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 801d024:	697b      	ldr	r3, [r7, #20]
 801d026:	781b      	ldrb	r3, [r3, #0]
 801d028:	2b23      	cmp	r3, #35	; 0x23
 801d02a:	d102      	bne.n	801d032 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 801d02c:	68bb      	ldr	r3, [r7, #8]
 801d02e:	3b01      	subs	r3, #1
 801d030:	613b      	str	r3, [r7, #16]
        curf++;
 801d032:	697b      	ldr	r3, [r7, #20]
 801d034:	3301      	adds	r3, #1
 801d036:	617b      	str	r3, [r7, #20]
        curn++;
 801d038:	693b      	ldr	r3, [r7, #16]
 801d03a:	3301      	adds	r3, #1
 801d03c:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 801d03e:	697b      	ldr	r3, [r7, #20]
 801d040:	781b      	ldrb	r3, [r3, #0]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d007      	beq.n	801d056 <isTopicMatched+0xae>
 801d046:	693a      	ldr	r2, [r7, #16]
 801d048:	68bb      	ldr	r3, [r7, #8]
 801d04a:	429a      	cmp	r2, r3
 801d04c:	d3bd      	bcc.n	801cfca <isTopicMatched+0x22>
 801d04e:	e002      	b.n	801d056 <isTopicMatched+0xae>
            break;
 801d050:	bf00      	nop
 801d052:	e000      	b.n	801d056 <isTopicMatched+0xae>
            break;
 801d054:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 801d056:	693a      	ldr	r2, [r7, #16]
 801d058:	68bb      	ldr	r3, [r7, #8]
 801d05a:	429a      	cmp	r2, r3
 801d05c:	d105      	bne.n	801d06a <isTopicMatched+0xc2>
 801d05e:	697b      	ldr	r3, [r7, #20]
 801d060:	781b      	ldrb	r3, [r3, #0]
 801d062:	2b00      	cmp	r3, #0
 801d064:	d101      	bne.n	801d06a <isTopicMatched+0xc2>
 801d066:	2301      	movs	r3, #1
 801d068:	e000      	b.n	801d06c <isTopicMatched+0xc4>
 801d06a:	2300      	movs	r3, #0
 801d06c:	b2db      	uxtb	r3, r3
}
 801d06e:	4618      	mov	r0, r3
 801d070:	371c      	adds	r7, #28
 801d072:	46bd      	mov	sp, r7
 801d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d078:	4770      	bx	lr

0801d07a <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801d07a:	b580      	push	{r7, lr}
 801d07c:	b08a      	sub	sp, #40	; 0x28
 801d07e:	af00      	add	r7, sp, #0
 801d080:	60f8      	str	r0, [r7, #12]
 801d082:	60b9      	str	r1, [r7, #8]
 801d084:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 801d086:	f04f 33ff 	mov.w	r3, #4294967295
 801d08a:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d08c:	2300      	movs	r3, #0
 801d08e:	627b      	str	r3, [r7, #36]	; 0x24
 801d090:	e03f      	b.n	801d112 <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d092:	68fa      	ldr	r2, [r7, #12]
 801d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d096:	3304      	adds	r3, #4
 801d098:	00db      	lsls	r3, r3, #3
 801d09a:	4413      	add	r3, r2
 801d09c:	685b      	ldr	r3, [r3, #4]
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d034      	beq.n	801d10c <deliverMessage+0x92>
 801d0a2:	68fa      	ldr	r2, [r7, #12]
 801d0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0a6:	3304      	adds	r3, #4
 801d0a8:	00db      	lsls	r3, r3, #3
 801d0aa:	4413      	add	r3, r2
 801d0ac:	685b      	ldr	r3, [r3, #4]
 801d0ae:	4619      	mov	r1, r3
 801d0b0:	68b8      	ldr	r0, [r7, #8]
 801d0b2:	f001 f8bd 	bl	801e230 <MQTTPacket_equals>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d10c      	bne.n	801d0d6 <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801d0bc:	68fa      	ldr	r2, [r7, #12]
 801d0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0c0:	3304      	adds	r3, #4
 801d0c2:	00db      	lsls	r3, r3, #3
 801d0c4:	4413      	add	r3, r2
 801d0c6:	685b      	ldr	r3, [r3, #4]
 801d0c8:	68b9      	ldr	r1, [r7, #8]
 801d0ca:	4618      	mov	r0, r3
 801d0cc:	f7ff ff6c 	bl	801cfa8 <isTopicMatched>
 801d0d0:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d01a      	beq.n	801d10c <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 801d0d6:	68fa      	ldr	r2, [r7, #12]
 801d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0da:	3304      	adds	r3, #4
 801d0dc:	00db      	lsls	r3, r3, #3
 801d0de:	4413      	add	r3, r2
 801d0e0:	689b      	ldr	r3, [r3, #8]
 801d0e2:	2b00      	cmp	r3, #0
 801d0e4:	d012      	beq.n	801d10c <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 801d0e6:	f107 0318 	add.w	r3, r7, #24
 801d0ea:	687a      	ldr	r2, [r7, #4]
 801d0ec:	68b9      	ldr	r1, [r7, #8]
 801d0ee:	4618      	mov	r0, r3
 801d0f0:	f7ff fe00 	bl	801ccf4 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 801d0f4:	68fa      	ldr	r2, [r7, #12]
 801d0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0f8:	3304      	adds	r3, #4
 801d0fa:	00db      	lsls	r3, r3, #3
 801d0fc:	4413      	add	r3, r2
 801d0fe:	689b      	ldr	r3, [r3, #8]
 801d100:	f107 0218 	add.w	r2, r7, #24
 801d104:	4610      	mov	r0, r2
 801d106:	4798      	blx	r3
                rc = SUCCESSS;
 801d108:	2300      	movs	r3, #0
 801d10a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d10e:	3301      	adds	r3, #1
 801d110:	627b      	str	r3, [r7, #36]	; 0x24
 801d112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d114:	2b04      	cmp	r3, #4
 801d116:	ddbc      	ble.n	801d092 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 801d118:	6a3b      	ldr	r3, [r7, #32]
 801d11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d11e:	d112      	bne.n	801d146 <deliverMessage+0xcc>
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d124:	2b00      	cmp	r3, #0
 801d126:	d00e      	beq.n	801d146 <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 801d128:	f107 0310 	add.w	r3, r7, #16
 801d12c:	687a      	ldr	r2, [r7, #4]
 801d12e:	68b9      	ldr	r1, [r7, #8]
 801d130:	4618      	mov	r0, r3
 801d132:	f7ff fddf 	bl	801ccf4 <NewMessageData>
        c->defaultMessageHandler(&md);
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d13a:	f107 0210 	add.w	r2, r7, #16
 801d13e:	4610      	mov	r0, r2
 801d140:	4798      	blx	r3
        rc = SUCCESSS;
 801d142:	2300      	movs	r3, #0
 801d144:	623b      	str	r3, [r7, #32]
    }

    return rc;
 801d146:	6a3b      	ldr	r3, [r7, #32]
}
 801d148:	4618      	mov	r0, r3
 801d14a:	3728      	adds	r7, #40	; 0x28
 801d14c:	46bd      	mov	sp, r7
 801d14e:	bd80      	pop	{r7, pc}

0801d150 <keepalive>:


int keepalive(MQTTClient* c)
{
 801d150:	b580      	push	{r7, lr}
 801d152:	b086      	sub	sp, #24
 801d154:	af00      	add	r7, sp, #0
 801d156:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801d158:	f04f 33ff 	mov.w	r3, #4294967295
 801d15c:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	699b      	ldr	r3, [r3, #24]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d102      	bne.n	801d16c <keepalive+0x1c>
    {
        rc = SUCCESSS;
 801d166:	2300      	movs	r3, #0
 801d168:	617b      	str	r3, [r7, #20]
        goto exit;
 801d16a:	e033      	b.n	801d1d4 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 801d16c:	687b      	ldr	r3, [r7, #4]
 801d16e:	3354      	adds	r3, #84	; 0x54
 801d170:	4618      	mov	r0, r3
 801d172:	f000 fad7 	bl	801d724 <TimerIsExpired>
 801d176:	4603      	mov	r3, r0
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d02a      	beq.n	801d1d2 <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	7f1b      	ldrb	r3, [r3, #28]
 801d180:	2b00      	cmp	r3, #0
 801d182:	d126      	bne.n	801d1d2 <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 801d184:	f107 0308 	add.w	r3, r7, #8
 801d188:	4618      	mov	r0, r3
 801d18a:	f000 fabd 	bl	801d708 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801d18e:	f107 0308 	add.w	r3, r7, #8
 801d192:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801d196:	4618      	mov	r0, r3
 801d198:	f000 fada 	bl	801d750 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	691a      	ldr	r2, [r3, #16]
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	689b      	ldr	r3, [r3, #8]
 801d1a4:	4619      	mov	r1, r3
 801d1a6:	4610      	mov	r0, r2
 801d1a8:	f000 fda6 	bl	801dcf8 <MQTTSerialize_pingreq>
 801d1ac:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESSS) // send the ping packet
 801d1ae:	693b      	ldr	r3, [r7, #16]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	dd0f      	ble.n	801d1d4 <keepalive+0x84>
 801d1b4:	f107 0308 	add.w	r3, r7, #8
 801d1b8:	461a      	mov	r2, r3
 801d1ba:	6939      	ldr	r1, [r7, #16]
 801d1bc:	6878      	ldr	r0, [r7, #4]
 801d1be:	f7ff fdc4 	bl	801cd4a <sendPacket>
 801d1c2:	6178      	str	r0, [r7, #20]
 801d1c4:	697b      	ldr	r3, [r7, #20]
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d104      	bne.n	801d1d4 <keepalive+0x84>
                c->ping_outstanding = 1;
 801d1ca:	687b      	ldr	r3, [r7, #4]
 801d1cc:	2201      	movs	r2, #1
 801d1ce:	771a      	strb	r2, [r3, #28]
 801d1d0:	e000      	b.n	801d1d4 <keepalive+0x84>
        }
    }

exit:
 801d1d2:	bf00      	nop
    return rc;
 801d1d4:	697b      	ldr	r3, [r7, #20]
}
 801d1d6:	4618      	mov	r0, r3
 801d1d8:	3718      	adds	r7, #24
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bd80      	pop	{r7, pc}
	...

0801d1e0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 801d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1e2:	b095      	sub	sp, #84	; 0x54
 801d1e4:	af06      	add	r7, sp, #24
 801d1e6:	6078      	str	r0, [r7, #4]
 801d1e8:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 801d1ea:	6839      	ldr	r1, [r7, #0]
 801d1ec:	6878      	ldr	r0, [r7, #4]
 801d1ee:	f7ff fe77 	bl	801cee0 <readPacket>
 801d1f2:	4603      	mov	r3, r0
 801d1f4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    int len = 0,
 801d1f6:	2300      	movs	r3, #0
 801d1f8:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESSS;
 801d1fa:	2300      	movs	r3, #0
 801d1fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 801d1fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d200:	3b02      	subs	r3, #2
 801d202:	2b0b      	cmp	r3, #11
 801d204:	f200 80c0 	bhi.w	801d388 <cycle+0x1a8>
 801d208:	a201      	add	r2, pc, #4	; (adr r2, 801d210 <cycle+0x30>)
 801d20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d20e:	bf00      	nop
 801d210:	0801d389 	.word	0x0801d389
 801d214:	0801d241 	.word	0x0801d241
 801d218:	0801d389 	.word	0x0801d389
 801d21c:	0801d309 	.word	0x0801d309
 801d220:	0801d389 	.word	0x0801d389
 801d224:	0801d389 	.word	0x0801d389
 801d228:	0801d389 	.word	0x0801d389
 801d22c:	0801d389 	.word	0x0801d389
 801d230:	0801d389 	.word	0x0801d389
 801d234:	0801d389 	.word	0x0801d389
 801d238:	0801d389 	.word	0x0801d389
 801d23c:	0801d37b 	.word	0x0801d37b
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801d244:	687a      	ldr	r2, [r7, #4]
 801d246:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801d248:	4616      	mov	r6, r2
 801d24a:	f107 0210 	add.w	r2, r7, #16
 801d24e:	1d15      	adds	r5, r2, #4
 801d250:	f107 0210 	add.w	r2, r7, #16
 801d254:	1c54      	adds	r4, r2, #1
 801d256:	f107 010c 	add.w	r1, r7, #12
 801d25a:	f107 0210 	add.w	r2, r7, #16
 801d25e:	1c90      	adds	r0, r2, #2
 801d260:	9604      	str	r6, [sp, #16]
 801d262:	9303      	str	r3, [sp, #12]
 801d264:	f107 0310 	add.w	r3, r7, #16
 801d268:	330c      	adds	r3, #12
 801d26a:	9302      	str	r3, [sp, #8]
 801d26c:	f107 0310 	add.w	r3, r7, #16
 801d270:	3308      	adds	r3, #8
 801d272:	9301      	str	r3, [sp, #4]
 801d274:	f107 0320 	add.w	r3, r7, #32
 801d278:	9300      	str	r3, [sp, #0]
 801d27a:	462b      	mov	r3, r5
 801d27c:	4622      	mov	r2, r4
 801d27e:	f000 fd4a 	bl	801dd16 <MQTTDeserialize_publish>
 801d282:	4603      	mov	r3, r0
 801d284:	2b01      	cmp	r3, #1
 801d286:	f040 8083 	bne.w	801d390 <cycle+0x1b0>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 801d28a:	68fb      	ldr	r3, [r7, #12]
 801d28c:	b2db      	uxtb	r3, r3
 801d28e:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 801d290:	f107 0210 	add.w	r2, r7, #16
 801d294:	f107 0320 	add.w	r3, r7, #32
 801d298:	4619      	mov	r1, r3
 801d29a:	6878      	ldr	r0, [r7, #4]
 801d29c:	f7ff feed 	bl	801d07a <deliverMessage>
            if (msg.qos != QOS0)
 801d2a0:	7c3b      	ldrb	r3, [r7, #16]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d06d      	beq.n	801d382 <cycle+0x1a2>
            {
                if (msg.qos == QOS1)
 801d2a6:	7c3b      	ldrb	r3, [r7, #16]
 801d2a8:	2b01      	cmp	r3, #1
 801d2aa:	d10c      	bne.n	801d2c6 <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	6918      	ldr	r0, [r3, #16]
 801d2b0:	687b      	ldr	r3, [r7, #4]
 801d2b2:	689b      	ldr	r3, [r3, #8]
 801d2b4:	4619      	mov	r1, r3
 801d2b6:	8abb      	ldrh	r3, [r7, #20]
 801d2b8:	9300      	str	r3, [sp, #0]
 801d2ba:	2300      	movs	r3, #0
 801d2bc:	2204      	movs	r2, #4
 801d2be:	f001 f884 	bl	801e3ca <MQTTSerialize_ack>
 801d2c2:	6378      	str	r0, [r7, #52]	; 0x34
 801d2c4:	e00e      	b.n	801d2e4 <cycle+0x104>
                else if (msg.qos == QOS2)
 801d2c6:	7c3b      	ldrb	r3, [r7, #16]
 801d2c8:	2b02      	cmp	r3, #2
 801d2ca:	d10b      	bne.n	801d2e4 <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	6918      	ldr	r0, [r3, #16]
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	689b      	ldr	r3, [r3, #8]
 801d2d4:	4619      	mov	r1, r3
 801d2d6:	8abb      	ldrh	r3, [r7, #20]
 801d2d8:	9300      	str	r3, [sp, #0]
 801d2da:	2300      	movs	r3, #0
 801d2dc:	2205      	movs	r2, #5
 801d2de:	f001 f874 	bl	801e3ca <MQTTSerialize_ack>
 801d2e2:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 801d2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2e6:	2b00      	cmp	r3, #0
 801d2e8:	dc03      	bgt.n	801d2f2 <cycle+0x112>
                    rc = FAILURE;
 801d2ea:	f04f 33ff 	mov.w	r3, #4294967295
 801d2ee:	633b      	str	r3, [r7, #48]	; 0x30
 801d2f0:	e005      	b.n	801d2fe <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 801d2f2:	683a      	ldr	r2, [r7, #0]
 801d2f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d2f6:	6878      	ldr	r0, [r7, #4]
 801d2f8:	f7ff fd27 	bl	801cd4a <sendPacket>
 801d2fc:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 801d2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d300:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d304:	d13d      	bne.n	801d382 <cycle+0x1a2>
                    goto exit; // there was a problem
 801d306:	e044      	b.n	801d392 <cycle+0x1b2>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d308:	687b      	ldr	r3, [r7, #4]
 801d30a:	695c      	ldr	r4, [r3, #20]
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	68db      	ldr	r3, [r3, #12]
 801d310:	f107 020a 	add.w	r2, r7, #10
 801d314:	f107 0109 	add.w	r1, r7, #9
 801d318:	f107 0008 	add.w	r0, r7, #8
 801d31c:	9300      	str	r3, [sp, #0]
 801d31e:	4623      	mov	r3, r4
 801d320:	f000 fd6b 	bl	801ddfa <MQTTDeserialize_ack>
 801d324:	4603      	mov	r3, r0
 801d326:	2b01      	cmp	r3, #1
 801d328:	d003      	beq.n	801d332 <cycle+0x152>
                rc = FAILURE;
 801d32a:	f04f 33ff 	mov.w	r3, #4294967295
 801d32e:	633b      	str	r3, [r7, #48]	; 0x30
 801d330:	e01e      	b.n	801d370 <cycle+0x190>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	6918      	ldr	r0, [r3, #16]
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	689b      	ldr	r3, [r3, #8]
 801d33a:	4619      	mov	r1, r3
 801d33c:	897b      	ldrh	r3, [r7, #10]
 801d33e:	9300      	str	r3, [sp, #0]
 801d340:	2300      	movs	r3, #0
 801d342:	2206      	movs	r2, #6
 801d344:	f001 f841 	bl	801e3ca <MQTTSerialize_ack>
 801d348:	6378      	str	r0, [r7, #52]	; 0x34
 801d34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d34c:	2b00      	cmp	r3, #0
 801d34e:	dc03      	bgt.n	801d358 <cycle+0x178>
                rc = FAILURE;
 801d350:	f04f 33ff 	mov.w	r3, #4294967295
 801d354:	633b      	str	r3, [r7, #48]	; 0x30
 801d356:	e00b      	b.n	801d370 <cycle+0x190>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESSS) // send the PUBREL packet
 801d358:	683a      	ldr	r2, [r7, #0]
 801d35a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d35c:	6878      	ldr	r0, [r7, #4]
 801d35e:	f7ff fcf4 	bl	801cd4a <sendPacket>
 801d362:	6338      	str	r0, [r7, #48]	; 0x30
 801d364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d366:	2b00      	cmp	r3, #0
 801d368:	d002      	beq.n	801d370 <cycle+0x190>
                rc = FAILURE; // there was a problem
 801d36a:	f04f 33ff 	mov.w	r3, #4294967295
 801d36e:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 801d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d372:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d376:	d106      	bne.n	801d386 <cycle+0x1a6>
                goto exit; // there was a problem
 801d378:	e00b      	b.n	801d392 <cycle+0x1b2>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	2200      	movs	r2, #0
 801d37e:	771a      	strb	r2, [r3, #28]
            break;
 801d380:	e002      	b.n	801d388 <cycle+0x1a8>
            break;
 801d382:	bf00      	nop
 801d384:	e000      	b.n	801d388 <cycle+0x1a8>
            break;
 801d386:	bf00      	nop
    }
    keepalive(c);
 801d388:	6878      	ldr	r0, [r7, #4]
 801d38a:	f7ff fee1 	bl	801d150 <keepalive>
 801d38e:	e000      	b.n	801d392 <cycle+0x1b2>
                goto exit;
 801d390:	bf00      	nop
exit:
    if (rc == SUCCESSS)
 801d392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d394:	2b00      	cmp	r3, #0
 801d396:	d101      	bne.n	801d39c <cycle+0x1bc>
        rc = packet_type;
 801d398:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801d39a:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 801d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 801d39e:	4618      	mov	r0, r3
 801d3a0:	373c      	adds	r7, #60	; 0x3c
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d3a6:	bf00      	nop

0801d3a8 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 801d3a8:	b580      	push	{r7, lr}
 801d3aa:	b086      	sub	sp, #24
 801d3ac:	af00      	add	r7, sp, #0
 801d3ae:	60f8      	str	r0, [r7, #12]
 801d3b0:	60b9      	str	r1, [r7, #8]
 801d3b2:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d3b4:	f04f 33ff 	mov.w	r3, #4294967295
 801d3b8:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 801d3ba:	6878      	ldr	r0, [r7, #4]
 801d3bc:	f000 f9b2 	bl	801d724 <TimerIsExpired>
 801d3c0:	4603      	mov	r3, r0
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d111      	bne.n	801d3ea <waitfor+0x42>
            break; // we timed out
        taskYIELD(); //This function is needed to return management to OS during waiting time.
 801d3c6:	4b0c      	ldr	r3, [pc, #48]	; (801d3f8 <waitfor+0x50>)
 801d3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801d3cc:	601a      	str	r2, [r3, #0]
 801d3ce:	f3bf 8f4f 	dsb	sy
 801d3d2:	f3bf 8f6f 	isb	sy
    }
    while ((rc = cycle(c, timer)) != packet_type);
 801d3d6:	6879      	ldr	r1, [r7, #4]
 801d3d8:	68f8      	ldr	r0, [r7, #12]
 801d3da:	f7ff ff01 	bl	801d1e0 <cycle>
 801d3de:	6178      	str	r0, [r7, #20]
 801d3e0:	697a      	ldr	r2, [r7, #20]
 801d3e2:	68bb      	ldr	r3, [r7, #8]
 801d3e4:	429a      	cmp	r2, r3
 801d3e6:	d1e8      	bne.n	801d3ba <waitfor+0x12>
 801d3e8:	e000      	b.n	801d3ec <waitfor+0x44>
            break; // we timed out
 801d3ea:	bf00      	nop

    return rc;
 801d3ec:	697b      	ldr	r3, [r7, #20]
}
 801d3ee:	4618      	mov	r0, r3
 801d3f0:	3718      	adds	r7, #24
 801d3f2:	46bd      	mov	sp, r7
 801d3f4:	bd80      	pop	{r7, pc}
 801d3f6:	bf00      	nop
 801d3f8:	e000ed04 	.word	0xe000ed04

0801d3fc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 801d3fc:	b580      	push	{r7, lr}
 801d3fe:	b09e      	sub	sp, #120	; 0x78
 801d400:	af00      	add	r7, sp, #0
 801d402:	6078      	str	r0, [r7, #4]
 801d404:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 801d406:	f04f 33ff 	mov.w	r3, #4294967295
 801d40a:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 801d40c:	4a3d      	ldr	r2, [pc, #244]	; (801d504 <MQTTConnect+0x108>)
 801d40e:	f107 0310 	add.w	r3, r7, #16
 801d412:	4611      	mov	r1, r2
 801d414:	2258      	movs	r2, #88	; 0x58
 801d416:	4618      	mov	r0, r3
 801d418:	f010 fd1d 	bl	802de56 <memcpy>
    int len = 0;
 801d41c:	2300      	movs	r3, #0
 801d41e:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	6a1b      	ldr	r3, [r3, #32]
 801d424:	2b00      	cmp	r3, #0
 801d426:	d15d      	bne.n	801d4e4 <MQTTConnect+0xe8>
		goto exit;

    TimerInit(&connect_timer);
 801d428:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d42c:	4618      	mov	r0, r3
 801d42e:	f000 f96b 	bl	801d708 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 801d432:	687b      	ldr	r3, [r7, #4]
 801d434:	685a      	ldr	r2, [r3, #4]
 801d436:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d43a:	4611      	mov	r1, r2
 801d43c:	4618      	mov	r0, r3
 801d43e:	f000 f987 	bl	801d750 <TimerCountdownMS>

    if (options == 0)
 801d442:	683b      	ldr	r3, [r7, #0]
 801d444:	2b00      	cmp	r3, #0
 801d446:	d102      	bne.n	801d44e <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 801d448:	f107 0310 	add.w	r3, r7, #16
 801d44c:	603b      	str	r3, [r7, #0]

    c->keepAliveInterval = options->keepAliveInterval;
 801d44e:	683b      	ldr	r3, [r7, #0]
 801d450:	8b1b      	ldrh	r3, [r3, #24]
 801d452:	461a      	mov	r2, r3
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 801d458:	687b      	ldr	r3, [r7, #4]
 801d45a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	699b      	ldr	r3, [r3, #24]
 801d462:	4619      	mov	r1, r3
 801d464:	4610      	mov	r0, r2
 801d466:	f000 f987 	bl	801d778 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	6918      	ldr	r0, [r3, #16]
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	689b      	ldr	r3, [r3, #8]
 801d472:	683a      	ldr	r2, [r7, #0]
 801d474:	4619      	mov	r1, r3
 801d476:	f000 fab7 	bl	801d9e8 <MQTTSerialize_connect>
 801d47a:	6738      	str	r0, [r7, #112]	; 0x70
 801d47c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d47e:	2b00      	cmp	r3, #0
 801d480:	dd32      	ble.n	801d4e8 <MQTTConnect+0xec>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESSS)  // send the connect packet
 801d482:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d486:	461a      	mov	r2, r3
 801d488:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801d48a:	6878      	ldr	r0, [r7, #4]
 801d48c:	f7ff fc5d 	bl	801cd4a <sendPacket>
 801d490:	6778      	str	r0, [r7, #116]	; 0x74
 801d492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d494:	2b00      	cmp	r3, #0
 801d496:	d129      	bne.n	801d4ec <MQTTConnect+0xf0>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 801d498:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d49c:	461a      	mov	r2, r3
 801d49e:	2102      	movs	r1, #2
 801d4a0:	6878      	ldr	r0, [r7, #4]
 801d4a2:	f7ff ff81 	bl	801d3a8 <waitfor>
 801d4a6:	4603      	mov	r3, r0
 801d4a8:	2b02      	cmp	r3, #2
 801d4aa:	d117      	bne.n	801d4dc <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 801d4ac:	23ff      	movs	r3, #255	; 0xff
 801d4ae:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 801d4b0:	2300      	movs	r3, #0
 801d4b2:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	695a      	ldr	r2, [r3, #20]
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	68db      	ldr	r3, [r3, #12]
 801d4bc:	f107 010f 	add.w	r1, r7, #15
 801d4c0:	f107 000e 	add.w	r0, r7, #14
 801d4c4:	f000 fb7c 	bl	801dbc0 <MQTTDeserialize_connack>
 801d4c8:	4603      	mov	r3, r0
 801d4ca:	2b01      	cmp	r3, #1
 801d4cc:	d102      	bne.n	801d4d4 <MQTTConnect+0xd8>
            rc = connack_rc;
 801d4ce:	7bfb      	ldrb	r3, [r7, #15]
 801d4d0:	677b      	str	r3, [r7, #116]	; 0x74
 801d4d2:	e00c      	b.n	801d4ee <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 801d4d4:	f04f 33ff 	mov.w	r3, #4294967295
 801d4d8:	677b      	str	r3, [r7, #116]	; 0x74
 801d4da:	e008      	b.n	801d4ee <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 801d4dc:	f04f 33ff 	mov.w	r3, #4294967295
 801d4e0:	677b      	str	r3, [r7, #116]	; 0x74
 801d4e2:	e004      	b.n	801d4ee <MQTTConnect+0xf2>
		goto exit;
 801d4e4:	bf00      	nop
 801d4e6:	e002      	b.n	801d4ee <MQTTConnect+0xf2>
        goto exit;
 801d4e8:	bf00      	nop
 801d4ea:	e000      	b.n	801d4ee <MQTTConnect+0xf2>
        goto exit; // there was a problem
 801d4ec:	bf00      	nop

exit:
    if (rc == SUCCESSS)
 801d4ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d102      	bne.n	801d4fa <MQTTConnect+0xfe>
        c->isconnected = 1;
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	2201      	movs	r2, #1
 801d4f8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 801d4fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 801d4fc:	4618      	mov	r0, r3
 801d4fe:	3778      	adds	r7, #120	; 0x78
 801d500:	46bd      	mov	sp, r7
 801d502:	bd80      	pop	{r7, pc}
 801d504:	08032fa8 	.word	0x08032fa8

0801d508 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 801d508:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d50a:	b097      	sub	sp, #92	; 0x5c
 801d50c:	af08      	add	r7, sp, #32
 801d50e:	60f8      	str	r0, [r7, #12]
 801d510:	60b9      	str	r1, [r7, #8]
 801d512:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 801d514:	f04f 33ff 	mov.w	r3, #4294967295
 801d518:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 801d51a:	2300      	movs	r3, #0
 801d51c:	61fb      	str	r3, [r7, #28]
 801d51e:	2300      	movs	r3, #0
 801d520:	623b      	str	r3, [r7, #32]
 801d522:	2300      	movs	r3, #0
 801d524:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 801d526:	68bb      	ldr	r3, [r7, #8]
 801d528:	61fb      	str	r3, [r7, #28]
    int len = 0;
 801d52a:	2300      	movs	r3, #0
 801d52c:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	6a1b      	ldr	r3, [r3, #32]
 801d532:	2b00      	cmp	r3, #0
 801d534:	f000 809b 	beq.w	801d66e <MQTTPublish+0x166>
		goto exit;

    TimerInit(&timer);
 801d538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d53c:	4618      	mov	r0, r3
 801d53e:	f000 f8e3 	bl	801d708 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	685a      	ldr	r2, [r3, #4]
 801d546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d54a:	4611      	mov	r1, r2
 801d54c:	4618      	mov	r0, r3
 801d54e:	f000 f8ff 	bl	801d750 <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	781b      	ldrb	r3, [r3, #0]
 801d556:	2b01      	cmp	r3, #1
 801d558:	d003      	beq.n	801d562 <MQTTPublish+0x5a>
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	781b      	ldrb	r3, [r3, #0]
 801d55e:	2b02      	cmp	r3, #2
 801d560:	d106      	bne.n	801d570 <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 801d562:	68f8      	ldr	r0, [r7, #12]
 801d564:	f7ff fbd8 	bl	801cd18 <getNextPacketId>
 801d568:	4603      	mov	r3, r0
 801d56a:	b29a      	uxth	r2, r3
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d570:	68fb      	ldr	r3, [r7, #12]
 801d572:	691b      	ldr	r3, [r3, #16]
 801d574:	603b      	str	r3, [r7, #0]
 801d576:	68fb      	ldr	r3, [r7, #12]
 801d578:	689b      	ldr	r3, [r3, #8]
 801d57a:	469c      	mov	ip, r3
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	781b      	ldrb	r3, [r3, #0]
 801d580:	469e      	mov	lr, r3
 801d582:	687b      	ldr	r3, [r7, #4]
 801d584:	785d      	ldrb	r5, [r3, #1]
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 801d58a:	687b      	ldr	r3, [r7, #4]
 801d58c:	689b      	ldr	r3, [r3, #8]
 801d58e:	687a      	ldr	r2, [r7, #4]
 801d590:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 801d592:	9206      	str	r2, [sp, #24]
 801d594:	9305      	str	r3, [sp, #20]
 801d596:	ac02      	add	r4, sp, #8
 801d598:	f107 031c 	add.w	r3, r7, #28
 801d59c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d5a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801d5a4:	9601      	str	r6, [sp, #4]
 801d5a6:	9500      	str	r5, [sp, #0]
 801d5a8:	4673      	mov	r3, lr
 801d5aa:	2200      	movs	r2, #0
 801d5ac:	4661      	mov	r1, ip
 801d5ae:	6838      	ldr	r0, [r7, #0]
 801d5b0:	f000 fe95 	bl	801e2de <MQTTSerialize_publish>
 801d5b4:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 801d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	dd5a      	ble.n	801d672 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESSS) // send the subscribe packet
 801d5bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d5c0:	461a      	mov	r2, r3
 801d5c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d5c4:	68f8      	ldr	r0, [r7, #12]
 801d5c6:	f7ff fbc0 	bl	801cd4a <sendPacket>
 801d5ca:	6378      	str	r0, [r7, #52]	; 0x34
 801d5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d151      	bne.n	801d676 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 801d5d2:	687b      	ldr	r3, [r7, #4]
 801d5d4:	781b      	ldrb	r3, [r3, #0]
 801d5d6:	2b01      	cmp	r3, #1
 801d5d8:	d122      	bne.n	801d620 <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 801d5da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d5de:	461a      	mov	r2, r3
 801d5e0:	2104      	movs	r1, #4
 801d5e2:	68f8      	ldr	r0, [r7, #12]
 801d5e4:	f7ff fee0 	bl	801d3a8 <waitfor>
 801d5e8:	4603      	mov	r3, r0
 801d5ea:	2b04      	cmp	r3, #4
 801d5ec:	d114      	bne.n	801d618 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	695c      	ldr	r4, [r3, #20]
 801d5f2:	68fb      	ldr	r3, [r7, #12]
 801d5f4:	68db      	ldr	r3, [r3, #12]
 801d5f6:	f107 021a 	add.w	r2, r7, #26
 801d5fa:	f107 0119 	add.w	r1, r7, #25
 801d5fe:	f107 0018 	add.w	r0, r7, #24
 801d602:	9300      	str	r3, [sp, #0]
 801d604:	4623      	mov	r3, r4
 801d606:	f000 fbf8 	bl	801ddfa <MQTTDeserialize_ack>
 801d60a:	4603      	mov	r3, r0
 801d60c:	2b01      	cmp	r3, #1
 801d60e:	d035      	beq.n	801d67c <MQTTPublish+0x174>
                rc = FAILURE;
 801d610:	f04f 33ff 	mov.w	r3, #4294967295
 801d614:	637b      	str	r3, [r7, #52]	; 0x34
 801d616:	e031      	b.n	801d67c <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d618:	f04f 33ff 	mov.w	r3, #4294967295
 801d61c:	637b      	str	r3, [r7, #52]	; 0x34
 801d61e:	e02d      	b.n	801d67c <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	781b      	ldrb	r3, [r3, #0]
 801d624:	2b02      	cmp	r3, #2
 801d626:	d128      	bne.n	801d67a <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 801d628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801d62c:	461a      	mov	r2, r3
 801d62e:	2107      	movs	r1, #7
 801d630:	68f8      	ldr	r0, [r7, #12]
 801d632:	f7ff feb9 	bl	801d3a8 <waitfor>
 801d636:	4603      	mov	r3, r0
 801d638:	2b07      	cmp	r3, #7
 801d63a:	d114      	bne.n	801d666 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	695c      	ldr	r4, [r3, #20]
 801d640:	68fb      	ldr	r3, [r7, #12]
 801d642:	68db      	ldr	r3, [r3, #12]
 801d644:	f107 0216 	add.w	r2, r7, #22
 801d648:	f107 0115 	add.w	r1, r7, #21
 801d64c:	f107 0014 	add.w	r0, r7, #20
 801d650:	9300      	str	r3, [sp, #0]
 801d652:	4623      	mov	r3, r4
 801d654:	f000 fbd1 	bl	801ddfa <MQTTDeserialize_ack>
 801d658:	4603      	mov	r3, r0
 801d65a:	2b01      	cmp	r3, #1
 801d65c:	d00e      	beq.n	801d67c <MQTTPublish+0x174>
                rc = FAILURE;
 801d65e:	f04f 33ff 	mov.w	r3, #4294967295
 801d662:	637b      	str	r3, [r7, #52]	; 0x34
 801d664:	e00a      	b.n	801d67c <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 801d666:	f04f 33ff 	mov.w	r3, #4294967295
 801d66a:	637b      	str	r3, [r7, #52]	; 0x34
 801d66c:	e006      	b.n	801d67c <MQTTPublish+0x174>
		goto exit;
 801d66e:	bf00      	nop
 801d670:	e004      	b.n	801d67c <MQTTPublish+0x174>
        goto exit;
 801d672:	bf00      	nop
 801d674:	e002      	b.n	801d67c <MQTTPublish+0x174>
        goto exit; // there was a problem
 801d676:	bf00      	nop
 801d678:	e000      	b.n	801d67c <MQTTPublish+0x174>
    }

exit:
 801d67a:	bf00      	nop
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d67c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801d67e:	4618      	mov	r0, r3
 801d680:	373c      	adds	r7, #60	; 0x3c
 801d682:	46bd      	mov	sp, r7
 801d684:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801d686 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{
 801d686:	b580      	push	{r7, lr}
 801d688:	b086      	sub	sp, #24
 801d68a:	af00      	add	r7, sp, #0
 801d68c:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 801d68e:	f04f 33ff 	mov.w	r3, #4294967295
 801d692:	617b      	str	r3, [r7, #20]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
 801d694:	2300      	movs	r3, #0
 801d696:	613b      	str	r3, [r7, #16]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
 801d698:	f107 0308 	add.w	r3, r7, #8
 801d69c:	4618      	mov	r0, r3
 801d69e:	f000 f833 	bl	801d708 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	685a      	ldr	r2, [r3, #4]
 801d6a6:	f107 0308 	add.w	r3, r7, #8
 801d6aa:	4611      	mov	r1, r2
 801d6ac:	4618      	mov	r0, r3
 801d6ae:	f000 f84f 	bl	801d750 <TimerCountdownMS>

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	691a      	ldr	r2, [r3, #16]
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	689b      	ldr	r3, [r3, #8]
 801d6ba:	4619      	mov	r1, r3
 801d6bc:	4610      	mov	r0, r2
 801d6be:	f000 fb0c 	bl	801dcda <MQTTSerialize_disconnect>
 801d6c2:	6138      	str	r0, [r7, #16]
    if (len > 0)
 801d6c4:	693b      	ldr	r3, [r7, #16]
 801d6c6:	2b00      	cmp	r3, #0
 801d6c8:	dd07      	ble.n	801d6da <MQTTDisconnect+0x54>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
 801d6ca:	f107 0308 	add.w	r3, r7, #8
 801d6ce:	461a      	mov	r2, r3
 801d6d0:	6939      	ldr	r1, [r7, #16]
 801d6d2:	6878      	ldr	r0, [r7, #4]
 801d6d4:	f7ff fb39 	bl	801cd4a <sendPacket>
 801d6d8:	6178      	str	r0, [r7, #20]

    c->isconnected = 0;
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	2200      	movs	r2, #0
 801d6de:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 801d6e0:	697b      	ldr	r3, [r7, #20]
}
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	3718      	adds	r7, #24
 801d6e6:	46bd      	mov	sp, r7
 801d6e8:	bd80      	pop	{r7, pc}
	...

0801d6ec <MilliTimer_Handler>:

/*
 * @brief MQTT MilliTimer handler
 * @note MUST BE register to your system 1m Tick timer handler.
 */
void MilliTimer_Handler(void) {
 801d6ec:	b480      	push	{r7}
 801d6ee:	af00      	add	r7, sp, #0
	MilliTimer++;
 801d6f0:	4b04      	ldr	r3, [pc, #16]	; (801d704 <MilliTimer_Handler+0x18>)
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	3301      	adds	r3, #1
 801d6f6:	4a03      	ldr	r2, [pc, #12]	; (801d704 <MilliTimer_Handler+0x18>)
 801d6f8:	6013      	str	r3, [r2, #0]
}
 801d6fa:	bf00      	nop
 801d6fc:	46bd      	mov	sp, r7
 801d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d702:	4770      	bx	lr
 801d704:	200009f0 	.word	0x200009f0

0801d708 <TimerInit>:
/*
 * @brief Timer Initialize
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
void TimerInit(Timer* timer) {
 801d708:	b480      	push	{r7}
 801d70a:	b083      	sub	sp, #12
 801d70c:	af00      	add	r7, sp, #0
 801d70e:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	2200      	movs	r2, #0
 801d714:	605a      	str	r2, [r3, #4]
}
 801d716:	bf00      	nop
 801d718:	370c      	adds	r7, #12
 801d71a:	46bd      	mov	sp, r7
 801d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d720:	4770      	bx	lr
	...

0801d724 <TimerIsExpired>:
/*
 * @brief expired Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
char TimerIsExpired(Timer* timer) {
 801d724:	b480      	push	{r7}
 801d726:	b085      	sub	sp, #20
 801d728:	af00      	add	r7, sp, #0
 801d72a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	685a      	ldr	r2, [r3, #4]
 801d730:	4b06      	ldr	r3, [pc, #24]	; (801d74c <TimerIsExpired+0x28>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	1ad3      	subs	r3, r2, r3
 801d736:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 801d738:	68fb      	ldr	r3, [r7, #12]
 801d73a:	0fdb      	lsrs	r3, r3, #31
 801d73c:	b2db      	uxtb	r3, r3
}
 801d73e:	4618      	mov	r0, r3
 801d740:	3714      	adds	r7, #20
 801d742:	46bd      	mov	sp, r7
 801d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d748:	4770      	bx	lr
 801d74a:	bf00      	nop
 801d74c:	200009f0 	.word	0x200009f0

0801d750 <TimerCountdownMS>:
 * @brief Countdown millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdownMS(Timer* timer, unsigned int timeout) {
 801d750:	b480      	push	{r7}
 801d752:	b083      	sub	sp, #12
 801d754:	af00      	add	r7, sp, #0
 801d756:	6078      	str	r0, [r7, #4]
 801d758:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801d75a:	4b06      	ldr	r3, [pc, #24]	; (801d774 <TimerCountdownMS+0x24>)
 801d75c:	681a      	ldr	r2, [r3, #0]
 801d75e:	683b      	ldr	r3, [r7, #0]
 801d760:	441a      	add	r2, r3
 801d762:	687b      	ldr	r3, [r7, #4]
 801d764:	605a      	str	r2, [r3, #4]
}
 801d766:	bf00      	nop
 801d768:	370c      	adds	r7, #12
 801d76a:	46bd      	mov	sp, r7
 801d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d770:	4770      	bx	lr
 801d772:	bf00      	nop
 801d774:	200009f0 	.word	0x200009f0

0801d778 <TimerCountdown>:
 * @brief Countdown second Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 *         timeout : setting timeout millisecond.
 */
void TimerCountdown(Timer* timer, unsigned int timeout) {
 801d778:	b480      	push	{r7}
 801d77a:	b083      	sub	sp, #12
 801d77c:	af00      	add	r7, sp, #0
 801d77e:	6078      	str	r0, [r7, #4]
 801d780:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 801d782:	683b      	ldr	r3, [r7, #0]
 801d784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d788:	fb03 f202 	mul.w	r2, r3, r2
 801d78c:	4b05      	ldr	r3, [pc, #20]	; (801d7a4 <TimerCountdown+0x2c>)
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	441a      	add	r2, r3
 801d792:	687b      	ldr	r3, [r7, #4]
 801d794:	605a      	str	r2, [r3, #4]
}
 801d796:	bf00      	nop
 801d798:	370c      	adds	r7, #12
 801d79a:	46bd      	mov	sp, r7
 801d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7a0:	4770      	bx	lr
 801d7a2:	bf00      	nop
 801d7a4:	200009f0 	.word	0x200009f0

0801d7a8 <TimerLeftMS>:
/*
 * @brief left millisecond Timer
 * @param  timer : pointer to a Timer structure
 *         that contains the configuration information for the Timer.
 */
int TimerLeftMS(Timer* timer) {
 801d7a8:	b480      	push	{r7}
 801d7aa:	b085      	sub	sp, #20
 801d7ac:	af00      	add	r7, sp, #0
 801d7ae:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801d7b0:	687b      	ldr	r3, [r7, #4]
 801d7b2:	685a      	ldr	r2, [r3, #4]
 801d7b4:	4b06      	ldr	r3, [pc, #24]	; (801d7d0 <TimerLeftMS+0x28>)
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	1ad3      	subs	r3, r2, r3
 801d7ba:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 801d7c2:	4618      	mov	r0, r3
 801d7c4:	3714      	adds	r7, #20
 801d7c6:	46bd      	mov	sp, r7
 801d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7cc:	4770      	bx	lr
 801d7ce:	bf00      	nop
 801d7d0:	200009f0 	.word	0x200009f0

0801d7d4 <NewNetwork>:
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 *         sn : socket number where x can be (0..7).
 * @retval None
 */
void NewNetwork(Network* n, int sn) {
 801d7d4:	b480      	push	{r7}
 801d7d6:	b083      	sub	sp, #12
 801d7d8:	af00      	add	r7, sp, #0
 801d7da:	6078      	str	r0, [r7, #4]
 801d7dc:	6039      	str	r1, [r7, #0]
	n->my_socket = sn;
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	683a      	ldr	r2, [r7, #0]
 801d7e2:	601a      	str	r2, [r3, #0]
	n->mqttread = w5x00_read;
 801d7e4:	687b      	ldr	r3, [r7, #4]
 801d7e6:	4a07      	ldr	r2, [pc, #28]	; (801d804 <NewNetwork+0x30>)
 801d7e8:	605a      	str	r2, [r3, #4]
	n->mqttwrite = w5x00_write;
 801d7ea:	687b      	ldr	r3, [r7, #4]
 801d7ec:	4a06      	ldr	r2, [pc, #24]	; (801d808 <NewNetwork+0x34>)
 801d7ee:	609a      	str	r2, [r3, #8]
	n->disconnect = w5x00_disconnect;
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	4a06      	ldr	r2, [pc, #24]	; (801d80c <NewNetwork+0x38>)
 801d7f4:	60da      	str	r2, [r3, #12]
}
 801d7f6:	bf00      	nop
 801d7f8:	370c      	adds	r7, #12
 801d7fa:	46bd      	mov	sp, r7
 801d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d800:	4770      	bx	lr
 801d802:	bf00      	nop
 801d804:	0801d811 	.word	0x0801d811
 801d808:	0801d86b 	.word	0x0801d86b
 801d80c:	0801d8b3 	.word	0x0801d8b3

0801d810 <w5x00_read>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval received data length or SOCKERR code
 */
int w5x00_read(Network* n, unsigned char* buffer, int len, long time)
{
 801d810:	b580      	push	{r7, lr}
 801d812:	b084      	sub	sp, #16
 801d814:	af00      	add	r7, sp, #0
 801d816:	60f8      	str	r0, [r7, #12]
 801d818:	60b9      	str	r1, [r7, #8]
 801d81a:	607a      	str	r2, [r7, #4]
 801d81c:	603b      	str	r3, [r7, #0]

	if((getSn_SR(n->my_socket) == SOCK_ESTABLISHED) && (getSn_RX_RSR(n->my_socket)>0))
 801d81e:	68fb      	ldr	r3, [r7, #12]
 801d820:	681b      	ldr	r3, [r3, #0]
 801d822:	009b      	lsls	r3, r3, #2
 801d824:	3301      	adds	r3, #1
 801d826:	00db      	lsls	r3, r3, #3
 801d828:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d82c:	4618      	mov	r0, r3
 801d82e:	f7fb f837 	bl	80188a0 <WIZCHIP_READ>
 801d832:	4603      	mov	r3, r0
 801d834:	2b17      	cmp	r3, #23
 801d836:	d113      	bne.n	801d860 <w5x00_read+0x50>
 801d838:	68fb      	ldr	r3, [r7, #12]
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	b2db      	uxtb	r3, r3
 801d83e:	4618      	mov	r0, r3
 801d840:	f7fb f9d3 	bl	8018bea <getSn_RX_RSR>
 801d844:	4603      	mov	r3, r0
 801d846:	2b00      	cmp	r3, #0
 801d848:	d00a      	beq.n	801d860 <w5x00_read+0x50>
		return recv(n->my_socket, buffer, len);
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	b2db      	uxtb	r3, r3
 801d850:	687a      	ldr	r2, [r7, #4]
 801d852:	b292      	uxth	r2, r2
 801d854:	68b9      	ldr	r1, [r7, #8]
 801d856:	4618      	mov	r0, r3
 801d858:	f7fb ff3a 	bl	80196d0 <recv>
 801d85c:	4603      	mov	r3, r0
 801d85e:	e000      	b.n	801d862 <w5x00_read+0x52>

	return SOCK_ERROR;
 801d860:	2300      	movs	r3, #0
}
 801d862:	4618      	mov	r0, r3
 801d864:	3710      	adds	r7, #16
 801d866:	46bd      	mov	sp, r7
 801d868:	bd80      	pop	{r7, pc}

0801d86a <w5x00_write>:
 *         buffer : pointer to a read buffer.
 *         len : buffer length.
 * @retval length of data sent or SOCKERR code
 */
int w5x00_write(Network* n, unsigned char* buffer, int len, long time)
{
 801d86a:	b580      	push	{r7, lr}
 801d86c:	b084      	sub	sp, #16
 801d86e:	af00      	add	r7, sp, #0
 801d870:	60f8      	str	r0, [r7, #12]
 801d872:	60b9      	str	r1, [r7, #8]
 801d874:	607a      	str	r2, [r7, #4]
 801d876:	603b      	str	r3, [r7, #0]
	if(getSn_SR(n->my_socket) == SOCK_ESTABLISHED)
 801d878:	68fb      	ldr	r3, [r7, #12]
 801d87a:	681b      	ldr	r3, [r3, #0]
 801d87c:	009b      	lsls	r3, r3, #2
 801d87e:	3301      	adds	r3, #1
 801d880:	00db      	lsls	r3, r3, #3
 801d882:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801d886:	4618      	mov	r0, r3
 801d888:	f7fb f80a 	bl	80188a0 <WIZCHIP_READ>
 801d88c:	4603      	mov	r3, r0
 801d88e:	2b17      	cmp	r3, #23
 801d890:	d10a      	bne.n	801d8a8 <w5x00_write+0x3e>
		return send(n->my_socket, buffer, len);
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	681b      	ldr	r3, [r3, #0]
 801d896:	b2db      	uxtb	r3, r3
 801d898:	687a      	ldr	r2, [r7, #4]
 801d89a:	b292      	uxth	r2, r2
 801d89c:	68b9      	ldr	r1, [r7, #8]
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7fb fe1c 	bl	80194dc <send>
 801d8a4:	4603      	mov	r3, r0
 801d8a6:	e000      	b.n	801d8aa <w5x00_write+0x40>

	return SOCK_ERROR;
 801d8a8:	2300      	movs	r3, #0
}
 801d8aa:	4618      	mov	r0, r3
 801d8ac:	3710      	adds	r7, #16
 801d8ae:	46bd      	mov	sp, r7
 801d8b0:	bd80      	pop	{r7, pc}

0801d8b2 <w5x00_disconnect>:
 * @brief disconnect function
 * @param  n : pointer to a Network structure
 *         that contains the configuration information for the Network.
 */
void w5x00_disconnect(Network* n)
{
 801d8b2:	b580      	push	{r7, lr}
 801d8b4:	b082      	sub	sp, #8
 801d8b6:	af00      	add	r7, sp, #0
 801d8b8:	6078      	str	r0, [r7, #4]
	disconnect(n->my_socket);
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	b2db      	uxtb	r3, r3
 801d8c0:	4618      	mov	r0, r3
 801d8c2:	f7fb fd95 	bl	80193f0 <disconnect>
}
 801d8c6:	bf00      	nop
 801d8c8:	3708      	adds	r7, #8
 801d8ca:	46bd      	mov	sp, r7
 801d8cc:	bd80      	pop	{r7, pc}

0801d8ce <ConnectNetwork>:
 *         ip : server iP.
 *         port : server port.
 * @retval SOCKOK code or SOCKERR code
 */
int ConnectNetwork(Network* n, uint8_t* ip, uint16_t port)
{
 801d8ce:	b580      	push	{r7, lr}
 801d8d0:	b086      	sub	sp, #24
 801d8d2:	af00      	add	r7, sp, #0
 801d8d4:	60f8      	str	r0, [r7, #12]
 801d8d6:	60b9      	str	r1, [r7, #8]
 801d8d8:	4613      	mov	r3, r2
 801d8da:	80fb      	strh	r3, [r7, #6]
	uint16_t myport = 12345;
 801d8dc:	f243 0339 	movw	r3, #12345	; 0x3039
 801d8e0:	82fb      	strh	r3, [r7, #22]

	if(socket(n->my_socket, Sn_MR_TCP, myport, 0) != n->my_socket)
 801d8e2:	68fb      	ldr	r3, [r7, #12]
 801d8e4:	681b      	ldr	r3, [r3, #0]
 801d8e6:	b2d8      	uxtb	r0, r3
 801d8e8:	8afa      	ldrh	r2, [r7, #22]
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	2101      	movs	r1, #1
 801d8ee:	f7fb fac7 	bl	8018e80 <socket>
 801d8f2:	4603      	mov	r3, r0
 801d8f4:	461a      	mov	r2, r3
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	429a      	cmp	r2, r3
 801d8fc:	d001      	beq.n	801d902 <ConnectNetwork+0x34>
		return SOCK_ERROR;
 801d8fe:	2300      	movs	r3, #0
 801d900:	e00d      	b.n	801d91e <ConnectNetwork+0x50>

	if(connect(n->my_socket, ip, port) != SOCK_OK)
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	681b      	ldr	r3, [r3, #0]
 801d906:	b2db      	uxtb	r3, r3
 801d908:	88fa      	ldrh	r2, [r7, #6]
 801d90a:	68b9      	ldr	r1, [r7, #8]
 801d90c:	4618      	mov	r0, r3
 801d90e:	f7fb fc93 	bl	8019238 <connect>
 801d912:	4603      	mov	r3, r0
 801d914:	2b01      	cmp	r3, #1
 801d916:	d001      	beq.n	801d91c <ConnectNetwork+0x4e>
		return SOCK_ERROR;
 801d918:	2300      	movs	r3, #0
 801d91a:	e000      	b.n	801d91e <ConnectNetwork+0x50>

	return SOCK_OK;
 801d91c:	2301      	movs	r3, #1
}
 801d91e:	4618      	mov	r0, r3
 801d920:	3718      	adds	r7, #24
 801d922:	46bd      	mov	sp, r7
 801d924:	bd80      	pop	{r7, pc}

0801d926 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 801d926:	b590      	push	{r4, r7, lr}
 801d928:	b085      	sub	sp, #20
 801d92a:	af00      	add	r7, sp, #0
 801d92c:	6078      	str	r0, [r7, #4]
	int len = 0;
 801d92e:	2300      	movs	r3, #0
 801d930:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	7a1b      	ldrb	r3, [r3, #8]
 801d936:	2b03      	cmp	r3, #3
 801d938:	d102      	bne.n	801d940 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 801d93a:	230c      	movs	r3, #12
 801d93c:	60fb      	str	r3, [r7, #12]
 801d93e:	e005      	b.n	801d94c <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	7a1b      	ldrb	r3, [r3, #8]
 801d944:	2b04      	cmp	r3, #4
 801d946:	d101      	bne.n	801d94c <MQTTSerialize_connectLength+0x26>
		len = 10;
 801d948:	230a      	movs	r3, #10
 801d94a:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	330c      	adds	r3, #12
 801d950:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d954:	f000 fc53 	bl	801e1fe <MQTTstrlen>
 801d958:	4603      	mov	r3, r0
 801d95a:	3302      	adds	r3, #2
 801d95c:	68fa      	ldr	r2, [r7, #12]
 801d95e:	4413      	add	r3, r2
 801d960:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	7edb      	ldrb	r3, [r3, #27]
 801d966:	2b00      	cmp	r3, #0
 801d968:	d013      	beq.n	801d992 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 801d96a:	687b      	ldr	r3, [r7, #4]
 801d96c:	3324      	adds	r3, #36	; 0x24
 801d96e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d972:	f000 fc44 	bl	801e1fe <MQTTstrlen>
 801d976:	4603      	mov	r3, r0
 801d978:	1c9c      	adds	r4, r3, #2
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	3330      	adds	r3, #48	; 0x30
 801d97e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d982:	f000 fc3c 	bl	801e1fe <MQTTstrlen>
 801d986:	4603      	mov	r3, r0
 801d988:	4423      	add	r3, r4
 801d98a:	3302      	adds	r3, #2
 801d98c:	68fa      	ldr	r2, [r7, #12]
 801d98e:	4413      	add	r3, r2
 801d990:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d996:	2b00      	cmp	r3, #0
 801d998:	d103      	bne.n	801d9a2 <MQTTSerialize_connectLength+0x7c>
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d00a      	beq.n	801d9b8 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	3340      	adds	r3, #64	; 0x40
 801d9a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d9aa:	f000 fc28 	bl	801e1fe <MQTTstrlen>
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	3302      	adds	r3, #2
 801d9b2:	68fa      	ldr	r2, [r7, #12]
 801d9b4:	4413      	add	r3, r2
 801d9b6:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d103      	bne.n	801d9c8 <MQTTSerialize_connectLength+0xa2>
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d9c4:	2b00      	cmp	r3, #0
 801d9c6:	d00a      	beq.n	801d9de <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 801d9c8:	687b      	ldr	r3, [r7, #4]
 801d9ca:	334c      	adds	r3, #76	; 0x4c
 801d9cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d9d0:	f000 fc15 	bl	801e1fe <MQTTstrlen>
 801d9d4:	4603      	mov	r3, r0
 801d9d6:	3302      	adds	r3, #2
 801d9d8:	68fa      	ldr	r2, [r7, #12]
 801d9da:	4413      	add	r3, r2
 801d9dc:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 801d9de:	68fb      	ldr	r3, [r7, #12]
}
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	3714      	adds	r7, #20
 801d9e4:	46bd      	mov	sp, r7
 801d9e6:	bd90      	pop	{r4, r7, pc}

0801d9e8 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 801d9e8:	b580      	push	{r7, lr}
 801d9ea:	b08a      	sub	sp, #40	; 0x28
 801d9ec:	af00      	add	r7, sp, #0
 801d9ee:	60f8      	str	r0, [r7, #12]
 801d9f0:	60b9      	str	r1, [r7, #8]
 801d9f2:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 801d9f4:	68fb      	ldr	r3, [r7, #12]
 801d9f6:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 801d9fc:	2300      	movs	r3, #0
 801d9fe:	617b      	str	r3, [r7, #20]
	int len = 0;
 801da00:	2300      	movs	r3, #0
 801da02:	623b      	str	r3, [r7, #32]
	int rc = -1;
 801da04:	f04f 33ff 	mov.w	r3, #4294967295
 801da08:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 801da0a:	6878      	ldr	r0, [r7, #4]
 801da0c:	f7ff ff8b 	bl	801d926 <MQTTSerialize_connectLength>
 801da10:	6238      	str	r0, [r7, #32]
 801da12:	6a38      	ldr	r0, [r7, #32]
 801da14:	f000 faa8 	bl	801df68 <MQTTPacket_len>
 801da18:	4602      	mov	r2, r0
 801da1a:	68bb      	ldr	r3, [r7, #8]
 801da1c:	4293      	cmp	r3, r2
 801da1e:	da03      	bge.n	801da28 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801da20:	f06f 0301 	mvn.w	r3, #1
 801da24:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 801da26:	e0c2      	b.n	801dbae <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 801da28:	2300      	movs	r3, #0
 801da2a:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 801da2c:	7e3b      	ldrb	r3, [r7, #24]
 801da2e:	2201      	movs	r2, #1
 801da30:	f362 1307 	bfi	r3, r2, #4, #4
 801da34:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801da36:	7e3a      	ldrb	r2, [r7, #24]
 801da38:	f107 031c 	add.w	r3, r7, #28
 801da3c:	4611      	mov	r1, r2
 801da3e:	4618      	mov	r0, r3
 801da40:	f000 fb21 	bl	801e086 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 801da44:	69fb      	ldr	r3, [r7, #28]
 801da46:	6a39      	ldr	r1, [r7, #32]
 801da48:	4618      	mov	r0, r3
 801da4a:	f000 fa21 	bl	801de90 <MQTTPacket_encode>
 801da4e:	4602      	mov	r2, r0
 801da50:	69fb      	ldr	r3, [r7, #28]
 801da52:	4413      	add	r3, r2
 801da54:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	7a1b      	ldrb	r3, [r3, #8]
 801da5a:	2b04      	cmp	r3, #4
 801da5c:	d10c      	bne.n	801da78 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801da5e:	f107 031c 	add.w	r3, r7, #28
 801da62:	4955      	ldr	r1, [pc, #340]	; (801dbb8 <MQTTSerialize_connect+0x1d0>)
 801da64:	4618      	mov	r0, r3
 801da66:	f000 fb4c 	bl	801e102 <writeCString>
		writeChar(&ptr, (char) 4);
 801da6a:	f107 031c 	add.w	r3, r7, #28
 801da6e:	2104      	movs	r1, #4
 801da70:	4618      	mov	r0, r3
 801da72:	f000 fb08 	bl	801e086 <writeChar>
 801da76:	e00b      	b.n	801da90 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 801da78:	f107 031c 	add.w	r3, r7, #28
 801da7c:	494f      	ldr	r1, [pc, #316]	; (801dbbc <MQTTSerialize_connect+0x1d4>)
 801da7e:	4618      	mov	r0, r3
 801da80:	f000 fb3f 	bl	801e102 <writeCString>
		writeChar(&ptr, (char) 3);
 801da84:	f107 031c 	add.w	r3, r7, #28
 801da88:	2103      	movs	r1, #3
 801da8a:	4618      	mov	r0, r3
 801da8c:	f000 fafb 	bl	801e086 <writeChar>
	}

	flags.all = 0;
 801da90:	2300      	movs	r3, #0
 801da92:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	7e9b      	ldrb	r3, [r3, #26]
 801da98:	f003 0301 	and.w	r3, r3, #1
 801da9c:	b2da      	uxtb	r2, r3
 801da9e:	7d3b      	ldrb	r3, [r7, #20]
 801daa0:	f362 0341 	bfi	r3, r2, #1, #1
 801daa4:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	7edb      	ldrb	r3, [r3, #27]
 801daaa:	2b00      	cmp	r3, #0
 801daac:	bf14      	ite	ne
 801daae:	2301      	movne	r3, #1
 801dab0:	2300      	moveq	r3, #0
 801dab2:	b2da      	uxtb	r2, r3
 801dab4:	7d3b      	ldrb	r3, [r7, #20]
 801dab6:	f362 0382 	bfi	r3, r2, #2, #1
 801daba:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 801dabc:	7d3b      	ldrb	r3, [r7, #20]
 801dabe:	f003 0304 	and.w	r3, r3, #4
 801dac2:	b2db      	uxtb	r3, r3
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d013      	beq.n	801daf0 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dace:	f003 0303 	and.w	r3, r3, #3
 801dad2:	b2da      	uxtb	r2, r3
 801dad4:	7d3b      	ldrb	r3, [r7, #20]
 801dad6:	f362 03c4 	bfi	r3, r2, #3, #2
 801dada:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dae2:	f003 0301 	and.w	r3, r3, #1
 801dae6:	b2da      	uxtb	r2, r3
 801dae8:	7d3b      	ldrb	r3, [r7, #20]
 801daea:	f362 1345 	bfi	r3, r2, #5, #1
 801daee:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d103      	bne.n	801db00 <MQTTSerialize_connect+0x118>
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801dafc:	2b00      	cmp	r3, #0
 801dafe:	d003      	beq.n	801db08 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 801db00:	7d3b      	ldrb	r3, [r7, #20]
 801db02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db06:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	d103      	bne.n	801db18 <MQTTSerialize_connect+0x130>
 801db10:	687b      	ldr	r3, [r7, #4]
 801db12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801db14:	2b00      	cmp	r3, #0
 801db16:	d003      	beq.n	801db20 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 801db18:	7d3b      	ldrb	r3, [r7, #20]
 801db1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801db1e:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 801db20:	7d3a      	ldrb	r2, [r7, #20]
 801db22:	f107 031c 	add.w	r3, r7, #28
 801db26:	4611      	mov	r1, r2
 801db28:	4618      	mov	r0, r3
 801db2a:	f000 faac 	bl	801e086 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	8b1b      	ldrh	r3, [r3, #24]
 801db32:	461a      	mov	r2, r3
 801db34:	f107 031c 	add.w	r3, r7, #28
 801db38:	4611      	mov	r1, r2
 801db3a:	4618      	mov	r0, r3
 801db3c:	f000 fab8 	bl	801e0b0 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801db40:	687b      	ldr	r3, [r7, #4]
 801db42:	f107 001c 	add.w	r0, r7, #28
 801db46:	330c      	adds	r3, #12
 801db48:	cb0e      	ldmia	r3, {r1, r2, r3}
 801db4a:	f000 faf9 	bl	801e140 <writeMQTTString>
	if (options->willFlag)
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	7edb      	ldrb	r3, [r3, #27]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d00d      	beq.n	801db72 <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 801db56:	687b      	ldr	r3, [r7, #4]
 801db58:	f107 001c 	add.w	r0, r7, #28
 801db5c:	3324      	adds	r3, #36	; 0x24
 801db5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801db60:	f000 faee 	bl	801e140 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 801db64:	687b      	ldr	r3, [r7, #4]
 801db66:	f107 001c 	add.w	r0, r7, #28
 801db6a:	3330      	adds	r3, #48	; 0x30
 801db6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801db6e:	f000 fae7 	bl	801e140 <writeMQTTString>
	}
	if (flags.bits.username)
 801db72:	7d3b      	ldrb	r3, [r7, #20]
 801db74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801db78:	b2db      	uxtb	r3, r3
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d006      	beq.n	801db8c <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	f107 001c 	add.w	r0, r7, #28
 801db84:	3340      	adds	r3, #64	; 0x40
 801db86:	cb0e      	ldmia	r3, {r1, r2, r3}
 801db88:	f000 fada 	bl	801e140 <writeMQTTString>
	if (flags.bits.password)
 801db8c:	7d3b      	ldrb	r3, [r7, #20]
 801db8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db92:	b2db      	uxtb	r3, r3
 801db94:	2b00      	cmp	r3, #0
 801db96:	d006      	beq.n	801dba6 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	f107 001c 	add.w	r0, r7, #28
 801db9e:	334c      	adds	r3, #76	; 0x4c
 801dba0:	cb0e      	ldmia	r3, {r1, r2, r3}
 801dba2:	f000 facd 	bl	801e140 <writeMQTTString>

	rc = ptr - buf;
 801dba6:	69fa      	ldr	r2, [r7, #28]
 801dba8:	68fb      	ldr	r3, [r7, #12]
 801dbaa:	1ad3      	subs	r3, r2, r3
 801dbac:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801dbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dbb0:	4618      	mov	r0, r3
 801dbb2:	3728      	adds	r7, #40	; 0x28
 801dbb4:	46bd      	mov	sp, r7
 801dbb6:	bd80      	pop	{r7, pc}
 801dbb8:	08033000 	.word	0x08033000
 801dbbc:	08033008 	.word	0x08033008

0801dbc0 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 801dbc0:	b580      	push	{r7, lr}
 801dbc2:	b08a      	sub	sp, #40	; 0x28
 801dbc4:	af00      	add	r7, sp, #0
 801dbc6:	60f8      	str	r0, [r7, #12]
 801dbc8:	60b9      	str	r1, [r7, #8]
 801dbca:	607a      	str	r2, [r7, #4]
 801dbcc:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dbce:	2300      	movs	r3, #0
 801dbd0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dbd2:	687b      	ldr	r3, [r7, #4]
 801dbd4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801dbda:	2300      	movs	r3, #0
 801dbdc:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 801dbde:	2300      	movs	r3, #0
 801dbe0:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801dbe2:	f107 0318 	add.w	r3, r7, #24
 801dbe6:	4618      	mov	r0, r3
 801dbe8:	f000 fa39 	bl	801e05e <readChar>
 801dbec:	4603      	mov	r3, r0
 801dbee:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 801dbf0:	7f3b      	ldrb	r3, [r7, #28]
 801dbf2:	f023 030f 	bic.w	r3, r3, #15
 801dbf6:	b2db      	uxtb	r3, r3
 801dbf8:	2b20      	cmp	r3, #32
 801dbfa:	d12e      	bne.n	801dc5a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dbfc:	69bb      	ldr	r3, [r7, #24]
 801dbfe:	f107 0214 	add.w	r2, r7, #20
 801dc02:	4611      	mov	r1, r2
 801dc04:	4618      	mov	r0, r3
 801dc06:	f000 f9f9 	bl	801dffc <MQTTPacket_decodeBuf>
 801dc0a:	6278      	str	r0, [r7, #36]	; 0x24
 801dc0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc0e:	69bb      	ldr	r3, [r7, #24]
 801dc10:	4413      	add	r3, r2
 801dc12:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dc14:	69bb      	ldr	r3, [r7, #24]
 801dc16:	697a      	ldr	r2, [r7, #20]
 801dc18:	4413      	add	r3, r2
 801dc1a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 801dc1c:	69bb      	ldr	r3, [r7, #24]
 801dc1e:	6a3a      	ldr	r2, [r7, #32]
 801dc20:	1ad3      	subs	r3, r2, r3
 801dc22:	2b01      	cmp	r3, #1
 801dc24:	dd1b      	ble.n	801dc5e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 801dc26:	f107 0318 	add.w	r3, r7, #24
 801dc2a:	4618      	mov	r0, r3
 801dc2c:	f000 fa17 	bl	801e05e <readChar>
 801dc30:	4603      	mov	r3, r0
 801dc32:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 801dc34:	7c3b      	ldrb	r3, [r7, #16]
 801dc36:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 801dc3a:	b2db      	uxtb	r3, r3
 801dc3c:	461a      	mov	r2, r3
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 801dc42:	f107 0318 	add.w	r3, r7, #24
 801dc46:	4618      	mov	r0, r3
 801dc48:	f000 fa09 	bl	801e05e <readChar>
 801dc4c:	4603      	mov	r3, r0
 801dc4e:	461a      	mov	r2, r3
 801dc50:	68bb      	ldr	r3, [r7, #8]
 801dc52:	701a      	strb	r2, [r3, #0]

	rc = 1;
 801dc54:	2301      	movs	r3, #1
 801dc56:	627b      	str	r3, [r7, #36]	; 0x24
 801dc58:	e002      	b.n	801dc60 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801dc5a:	bf00      	nop
 801dc5c:	e000      	b.n	801dc60 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801dc5e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801dc62:	4618      	mov	r0, r3
 801dc64:	3728      	adds	r7, #40	; 0x28
 801dc66:	46bd      	mov	sp, r7
 801dc68:	bd80      	pop	{r7, pc}

0801dc6a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801dc6a:	b580      	push	{r7, lr}
 801dc6c:	b088      	sub	sp, #32
 801dc6e:	af00      	add	r7, sp, #0
 801dc70:	60f8      	str	r0, [r7, #12]
 801dc72:	60b9      	str	r1, [r7, #8]
 801dc74:	4613      	mov	r3, r2
 801dc76:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 801dc78:	2300      	movs	r3, #0
 801dc7a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801dc7c:	f04f 33ff 	mov.w	r3, #4294967295
 801dc80:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 801dc86:	68bb      	ldr	r3, [r7, #8]
 801dc88:	2b01      	cmp	r3, #1
 801dc8a:	dc03      	bgt.n	801dc94 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801dc8c:	f06f 0301 	mvn.w	r3, #1
 801dc90:	61fb      	str	r3, [r7, #28]
		goto exit;
 801dc92:	e01d      	b.n	801dcd0 <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 801dc94:	2300      	movs	r3, #0
 801dc96:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 801dc98:	79fb      	ldrb	r3, [r7, #7]
 801dc9a:	f003 030f 	and.w	r3, r3, #15
 801dc9e:	b2da      	uxtb	r2, r3
 801dca0:	7e3b      	ldrb	r3, [r7, #24]
 801dca2:	f362 1307 	bfi	r3, r2, #4, #4
 801dca6:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801dca8:	7e3a      	ldrb	r2, [r7, #24]
 801dcaa:	f107 0314 	add.w	r3, r7, #20
 801dcae:	4611      	mov	r1, r2
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	f000 f9e8 	bl	801e086 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 801dcb6:	697b      	ldr	r3, [r7, #20]
 801dcb8:	2100      	movs	r1, #0
 801dcba:	4618      	mov	r0, r3
 801dcbc:	f000 f8e8 	bl	801de90 <MQTTPacket_encode>
 801dcc0:	4602      	mov	r2, r0
 801dcc2:	697b      	ldr	r3, [r7, #20]
 801dcc4:	4413      	add	r3, r2
 801dcc6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 801dcc8:	697a      	ldr	r2, [r7, #20]
 801dcca:	68fb      	ldr	r3, [r7, #12]
 801dccc:	1ad3      	subs	r3, r2, r3
 801dcce:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801dcd0:	69fb      	ldr	r3, [r7, #28]
}
 801dcd2:	4618      	mov	r0, r3
 801dcd4:	3720      	adds	r7, #32
 801dcd6:	46bd      	mov	sp, r7
 801dcd8:	bd80      	pop	{r7, pc}

0801dcda <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
 801dcda:	b580      	push	{r7, lr}
 801dcdc:	b082      	sub	sp, #8
 801dcde:	af00      	add	r7, sp, #0
 801dce0:	6078      	str	r0, [r7, #4]
 801dce2:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
 801dce4:	220e      	movs	r2, #14
 801dce6:	6839      	ldr	r1, [r7, #0]
 801dce8:	6878      	ldr	r0, [r7, #4]
 801dcea:	f7ff ffbe 	bl	801dc6a <MQTTSerialize_zero>
 801dcee:	4603      	mov	r3, r0
}
 801dcf0:	4618      	mov	r0, r3
 801dcf2:	3708      	adds	r7, #8
 801dcf4:	46bd      	mov	sp, r7
 801dcf6:	bd80      	pop	{r7, pc}

0801dcf8 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 801dcf8:	b580      	push	{r7, lr}
 801dcfa:	b082      	sub	sp, #8
 801dcfc:	af00      	add	r7, sp, #0
 801dcfe:	6078      	str	r0, [r7, #4]
 801dd00:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 801dd02:	220c      	movs	r2, #12
 801dd04:	6839      	ldr	r1, [r7, #0]
 801dd06:	6878      	ldr	r0, [r7, #4]
 801dd08:	f7ff ffaf 	bl	801dc6a <MQTTSerialize_zero>
 801dd0c:	4603      	mov	r3, r0
}
 801dd0e:	4618      	mov	r0, r3
 801dd10:	3708      	adds	r7, #8
 801dd12:	46bd      	mov	sp, r7
 801dd14:	bd80      	pop	{r7, pc}

0801dd16 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 801dd16:	b580      	push	{r7, lr}
 801dd18:	b08a      	sub	sp, #40	; 0x28
 801dd1a:	af00      	add	r7, sp, #0
 801dd1c:	60f8      	str	r0, [r7, #12]
 801dd1e:	60b9      	str	r1, [r7, #8]
 801dd20:	607a      	str	r2, [r7, #4]
 801dd22:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801dd24:	2300      	movs	r3, #0
 801dd26:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801dd28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd2a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801dd30:	2300      	movs	r3, #0
 801dd32:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 801dd34:	2300      	movs	r3, #0
 801dd36:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801dd38:	f107 0318 	add.w	r3, r7, #24
 801dd3c:	4618      	mov	r0, r3
 801dd3e:	f000 f98e 	bl	801e05e <readChar>
 801dd42:	4603      	mov	r3, r0
 801dd44:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 801dd46:	7f3b      	ldrb	r3, [r7, #28]
 801dd48:	f023 030f 	bic.w	r3, r3, #15
 801dd4c:	b2db      	uxtb	r3, r3
 801dd4e:	2b30      	cmp	r3, #48	; 0x30
 801dd50:	d14b      	bne.n	801ddea <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 801dd52:	7f3b      	ldrb	r3, [r7, #28]
 801dd54:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801dd58:	b2db      	uxtb	r3, r3
 801dd5a:	461a      	mov	r2, r3
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 801dd60:	7f3b      	ldrb	r3, [r7, #28]
 801dd62:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801dd66:	b2db      	uxtb	r3, r3
 801dd68:	461a      	mov	r2, r3
 801dd6a:	68bb      	ldr	r3, [r7, #8]
 801dd6c:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 801dd6e:	7f3b      	ldrb	r3, [r7, #28]
 801dd70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801dd74:	b2db      	uxtb	r3, r3
 801dd76:	461a      	mov	r2, r3
 801dd78:	687b      	ldr	r3, [r7, #4]
 801dd7a:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801dd7c:	69bb      	ldr	r3, [r7, #24]
 801dd7e:	f107 0214 	add.w	r2, r7, #20
 801dd82:	4611      	mov	r1, r2
 801dd84:	4618      	mov	r0, r3
 801dd86:	f000 f939 	bl	801dffc <MQTTPacket_decodeBuf>
 801dd8a:	6278      	str	r0, [r7, #36]	; 0x24
 801dd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd8e:	69bb      	ldr	r3, [r7, #24]
 801dd90:	4413      	add	r3, r2
 801dd92:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801dd94:	69bb      	ldr	r3, [r7, #24]
 801dd96:	697a      	ldr	r2, [r7, #20]
 801dd98:	4413      	add	r3, r2
 801dd9a:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801dd9c:	f107 0318 	add.w	r3, r7, #24
 801dda0:	6a3a      	ldr	r2, [r7, #32]
 801dda2:	4619      	mov	r1, r3
 801dda4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dda6:	f000 f9f9 	bl	801e19c <readMQTTLenString>
 801ddaa:	4603      	mov	r3, r0
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	d01e      	beq.n	801ddee <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 801ddb0:	69bb      	ldr	r3, [r7, #24]
 801ddb2:	6a3a      	ldr	r2, [r7, #32]
 801ddb4:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	db19      	blt.n	801ddee <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801ddba:	68bb      	ldr	r3, [r7, #8]
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	2b00      	cmp	r3, #0
 801ddc0:	dd08      	ble.n	801ddd4 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 801ddc2:	f107 0318 	add.w	r3, r7, #24
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	f000 f92e 	bl	801e028 <readInt>
 801ddcc:	4603      	mov	r3, r0
 801ddce:	b29a      	uxth	r2, r3
 801ddd0:	683b      	ldr	r3, [r7, #0]
 801ddd2:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 801ddd4:	69bb      	ldr	r3, [r7, #24]
 801ddd6:	6a3a      	ldr	r2, [r7, #32]
 801ddd8:	1ad2      	subs	r2, r2, r3
 801ddda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dddc:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 801ddde:	69ba      	ldr	r2, [r7, #24]
 801dde0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dde2:	601a      	str	r2, [r3, #0]
	rc = 1;
 801dde4:	2301      	movs	r3, #1
 801dde6:	627b      	str	r3, [r7, #36]	; 0x24
 801dde8:	e002      	b.n	801ddf0 <MQTTDeserialize_publish+0xda>
		goto exit;
 801ddea:	bf00      	nop
 801ddec:	e000      	b.n	801ddf0 <MQTTDeserialize_publish+0xda>
		goto exit;
 801ddee:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801ddf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801ddf2:	4618      	mov	r0, r3
 801ddf4:	3728      	adds	r7, #40	; 0x28
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	bd80      	pop	{r7, pc}

0801ddfa <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 801ddfa:	b580      	push	{r7, lr}
 801ddfc:	b08a      	sub	sp, #40	; 0x28
 801ddfe:	af00      	add	r7, sp, #0
 801de00:	60f8      	str	r0, [r7, #12]
 801de02:	60b9      	str	r1, [r7, #8]
 801de04:	607a      	str	r2, [r7, #4]
 801de06:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801de08:	2300      	movs	r3, #0
 801de0a:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 801de0c:	683b      	ldr	r3, [r7, #0]
 801de0e:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 801de10:	2300      	movs	r3, #0
 801de12:	623b      	str	r3, [r7, #32]
	int rc = 0;
 801de14:	2300      	movs	r3, #0
 801de16:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 801de18:	f107 0318 	add.w	r3, r7, #24
 801de1c:	4618      	mov	r0, r3
 801de1e:	f000 f91e 	bl	801e05e <readChar>
 801de22:	4603      	mov	r3, r0
 801de24:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 801de26:	7f3b      	ldrb	r3, [r7, #28]
 801de28:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801de2c:	b2db      	uxtb	r3, r3
 801de2e:	461a      	mov	r2, r3
 801de30:	68bb      	ldr	r3, [r7, #8]
 801de32:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 801de34:	7f3b      	ldrb	r3, [r7, #28]
 801de36:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801de3a:	b2db      	uxtb	r3, r3
 801de3c:	461a      	mov	r2, r3
 801de3e:	68fb      	ldr	r3, [r7, #12]
 801de40:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 801de42:	69bb      	ldr	r3, [r7, #24]
 801de44:	f107 0214 	add.w	r2, r7, #20
 801de48:	4611      	mov	r1, r2
 801de4a:	4618      	mov	r0, r3
 801de4c:	f000 f8d6 	bl	801dffc <MQTTPacket_decodeBuf>
 801de50:	6278      	str	r0, [r7, #36]	; 0x24
 801de52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de54:	69bb      	ldr	r3, [r7, #24]
 801de56:	4413      	add	r3, r2
 801de58:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801de5a:	69bb      	ldr	r3, [r7, #24]
 801de5c:	697a      	ldr	r2, [r7, #20]
 801de5e:	4413      	add	r3, r2
 801de60:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 801de62:	69bb      	ldr	r3, [r7, #24]
 801de64:	6a3a      	ldr	r2, [r7, #32]
 801de66:	1ad3      	subs	r3, r2, r3
 801de68:	2b01      	cmp	r3, #1
 801de6a:	dd0b      	ble.n	801de84 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 801de6c:	f107 0318 	add.w	r3, r7, #24
 801de70:	4618      	mov	r0, r3
 801de72:	f000 f8d9 	bl	801e028 <readInt>
 801de76:	4603      	mov	r3, r0
 801de78:	b29a      	uxth	r2, r3
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	801a      	strh	r2, [r3, #0]

	rc = 1;
 801de7e:	2301      	movs	r3, #1
 801de80:	627b      	str	r3, [r7, #36]	; 0x24
 801de82:	e000      	b.n	801de86 <MQTTDeserialize_ack+0x8c>
		goto exit;
 801de84:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801de86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801de88:	4618      	mov	r0, r3
 801de8a:	3728      	adds	r7, #40	; 0x28
 801de8c:	46bd      	mov	sp, r7
 801de8e:	bd80      	pop	{r7, pc}

0801de90 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 801de90:	b480      	push	{r7}
 801de92:	b085      	sub	sp, #20
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
 801de98:	6039      	str	r1, [r7, #0]
	int rc = 0;
 801de9a:	2300      	movs	r3, #0
 801de9c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 801de9e:	683b      	ldr	r3, [r7, #0]
 801dea0:	425a      	negs	r2, r3
 801dea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dea6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801deaa:	bf58      	it	pl
 801deac:	4253      	negpl	r3, r2
 801deae:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 801deb0:	683b      	ldr	r3, [r7, #0]
 801deb2:	2b00      	cmp	r3, #0
 801deb4:	da00      	bge.n	801deb8 <MQTTPacket_encode+0x28>
 801deb6:	337f      	adds	r3, #127	; 0x7f
 801deb8:	11db      	asrs	r3, r3, #7
 801deba:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 801debc:	683b      	ldr	r3, [r7, #0]
 801debe:	2b00      	cmp	r3, #0
 801dec0:	dd03      	ble.n	801deca <MQTTPacket_encode+0x3a>
			d |= 0x80;
 801dec2:	7afb      	ldrb	r3, [r7, #11]
 801dec4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801dec8:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	1c5a      	adds	r2, r3, #1
 801dece:	60fa      	str	r2, [r7, #12]
 801ded0:	461a      	mov	r2, r3
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	4413      	add	r3, r2
 801ded6:	7afa      	ldrb	r2, [r7, #11]
 801ded8:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 801deda:	683b      	ldr	r3, [r7, #0]
 801dedc:	2b00      	cmp	r3, #0
 801dede:	dcde      	bgt.n	801de9e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 801dee0:	68fb      	ldr	r3, [r7, #12]
}
 801dee2:	4618      	mov	r0, r3
 801dee4:	3714      	adds	r7, #20
 801dee6:	46bd      	mov	sp, r7
 801dee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801deec:	4770      	bx	lr

0801deee <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 801deee:	b580      	push	{r7, lr}
 801def0:	b086      	sub	sp, #24
 801def2:	af00      	add	r7, sp, #0
 801def4:	6078      	str	r0, [r7, #4]
 801def6:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801def8:	2301      	movs	r3, #1
 801defa:	617b      	str	r3, [r7, #20]
	int len = 0;
 801defc:	2300      	movs	r3, #0
 801defe:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 801df00:	683b      	ldr	r3, [r7, #0]
 801df02:	2200      	movs	r2, #0
 801df04:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801df06:	f04f 33ff 	mov.w	r3, #4294967295
 801df0a:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 801df0c:	693b      	ldr	r3, [r7, #16]
 801df0e:	3301      	adds	r3, #1
 801df10:	613b      	str	r3, [r7, #16]
 801df12:	693b      	ldr	r3, [r7, #16]
 801df14:	2b04      	cmp	r3, #4
 801df16:	dd03      	ble.n	801df20 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801df18:	f04f 33ff 	mov.w	r3, #4294967295
 801df1c:	60fb      	str	r3, [r7, #12]
			goto exit;
 801df1e:	e01d      	b.n	801df5c <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 801df20:	f107 020b 	add.w	r2, r7, #11
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	2101      	movs	r1, #1
 801df28:	4610      	mov	r0, r2
 801df2a:	4798      	blx	r3
 801df2c:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	2b01      	cmp	r3, #1
 801df32:	d112      	bne.n	801df5a <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 801df34:	683b      	ldr	r3, [r7, #0]
 801df36:	681a      	ldr	r2, [r3, #0]
 801df38:	7afb      	ldrb	r3, [r7, #11]
 801df3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df3e:	6979      	ldr	r1, [r7, #20]
 801df40:	fb01 f303 	mul.w	r3, r1, r3
 801df44:	441a      	add	r2, r3
 801df46:	683b      	ldr	r3, [r7, #0]
 801df48:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801df4a:	697b      	ldr	r3, [r7, #20]
 801df4c:	01db      	lsls	r3, r3, #7
 801df4e:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 801df50:	7afb      	ldrb	r3, [r7, #11]
 801df52:	b25b      	sxtb	r3, r3
 801df54:	2b00      	cmp	r3, #0
 801df56:	dbd6      	blt.n	801df06 <MQTTPacket_decode+0x18>
exit:
 801df58:	e000      	b.n	801df5c <MQTTPacket_decode+0x6e>
			goto exit;
 801df5a:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 801df5c:	693b      	ldr	r3, [r7, #16]
}
 801df5e:	4618      	mov	r0, r3
 801df60:	3718      	adds	r7, #24
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}
	...

0801df68 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801df68:	b480      	push	{r7}
 801df6a:	b083      	sub	sp, #12
 801df6c:	af00      	add	r7, sp, #0
 801df6e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	3301      	adds	r3, #1
 801df74:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801df76:	687b      	ldr	r3, [r7, #4]
 801df78:	2b7f      	cmp	r3, #127	; 0x7f
 801df7a:	dc03      	bgt.n	801df84 <MQTTPacket_len+0x1c>
		rem_len += 1;
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	3301      	adds	r3, #1
 801df80:	607b      	str	r3, [r7, #4]
 801df82:	e012      	b.n	801dfaa <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801df8a:	da03      	bge.n	801df94 <MQTTPacket_len+0x2c>
		rem_len += 2;
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	3302      	adds	r3, #2
 801df90:	607b      	str	r3, [r7, #4]
 801df92:	e00a      	b.n	801dfaa <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	4a08      	ldr	r2, [pc, #32]	; (801dfb8 <MQTTPacket_len+0x50>)
 801df98:	4293      	cmp	r3, r2
 801df9a:	dc03      	bgt.n	801dfa4 <MQTTPacket_len+0x3c>
		rem_len += 3;
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	3303      	adds	r3, #3
 801dfa0:	607b      	str	r3, [r7, #4]
 801dfa2:	e002      	b.n	801dfaa <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	3304      	adds	r3, #4
 801dfa8:	607b      	str	r3, [r7, #4]
	return rem_len;
 801dfaa:	687b      	ldr	r3, [r7, #4]
}
 801dfac:	4618      	mov	r0, r3
 801dfae:	370c      	adds	r7, #12
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb6:	4770      	bx	lr
 801dfb8:	001ffffe 	.word	0x001ffffe

0801dfbc <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 801dfbc:	b480      	push	{r7}
 801dfbe:	b085      	sub	sp, #20
 801dfc0:	af00      	add	r7, sp, #0
 801dfc2:	6078      	str	r0, [r7, #4]
 801dfc4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 801dfc6:	2300      	movs	r3, #0
 801dfc8:	60fb      	str	r3, [r7, #12]
 801dfca:	e00a      	b.n	801dfe2 <bufchar+0x26>
		*c = *bufptr++;
 801dfcc:	4b0a      	ldr	r3, [pc, #40]	; (801dff8 <bufchar+0x3c>)
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	1c5a      	adds	r2, r3, #1
 801dfd2:	4909      	ldr	r1, [pc, #36]	; (801dff8 <bufchar+0x3c>)
 801dfd4:	600a      	str	r2, [r1, #0]
 801dfd6:	781a      	ldrb	r2, [r3, #0]
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 801dfdc:	68fb      	ldr	r3, [r7, #12]
 801dfde:	3301      	adds	r3, #1
 801dfe0:	60fb      	str	r3, [r7, #12]
 801dfe2:	68fa      	ldr	r2, [r7, #12]
 801dfe4:	683b      	ldr	r3, [r7, #0]
 801dfe6:	429a      	cmp	r2, r3
 801dfe8:	dbf0      	blt.n	801dfcc <bufchar+0x10>
	return count;
 801dfea:	683b      	ldr	r3, [r7, #0]
}
 801dfec:	4618      	mov	r0, r3
 801dfee:	3714      	adds	r7, #20
 801dff0:	46bd      	mov	sp, r7
 801dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dff6:	4770      	bx	lr
 801dff8:	200009f4 	.word	0x200009f4

0801dffc <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b082      	sub	sp, #8
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
 801e004:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801e006:	4a06      	ldr	r2, [pc, #24]	; (801e020 <MQTTPacket_decodeBuf+0x24>)
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 801e00c:	6839      	ldr	r1, [r7, #0]
 801e00e:	4805      	ldr	r0, [pc, #20]	; (801e024 <MQTTPacket_decodeBuf+0x28>)
 801e010:	f7ff ff6d 	bl	801deee <MQTTPacket_decode>
 801e014:	4603      	mov	r3, r0
}
 801e016:	4618      	mov	r0, r3
 801e018:	3708      	adds	r7, #8
 801e01a:	46bd      	mov	sp, r7
 801e01c:	bd80      	pop	{r7, pc}
 801e01e:	bf00      	nop
 801e020:	200009f4 	.word	0x200009f4
 801e024:	0801dfbd 	.word	0x0801dfbd

0801e028 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801e028:	b480      	push	{r7}
 801e02a:	b085      	sub	sp, #20
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	681b      	ldr	r3, [r3, #0]
 801e034:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801e036:	68fb      	ldr	r3, [r7, #12]
 801e038:	781b      	ldrb	r3, [r3, #0]
 801e03a:	021b      	lsls	r3, r3, #8
 801e03c:	68fa      	ldr	r2, [r7, #12]
 801e03e:	3201      	adds	r2, #1
 801e040:	7812      	ldrb	r2, [r2, #0]
 801e042:	4413      	add	r3, r2
 801e044:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	1c9a      	adds	r2, r3, #2
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	601a      	str	r2, [r3, #0]
	return len;
 801e050:	68bb      	ldr	r3, [r7, #8]
}
 801e052:	4618      	mov	r0, r3
 801e054:	3714      	adds	r7, #20
 801e056:	46bd      	mov	sp, r7
 801e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e05c:	4770      	bx	lr

0801e05e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 801e05e:	b480      	push	{r7}
 801e060:	b085      	sub	sp, #20
 801e062:	af00      	add	r7, sp, #0
 801e064:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	681b      	ldr	r3, [r3, #0]
 801e06a:	781b      	ldrb	r3, [r3, #0]
 801e06c:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 801e06e:	687b      	ldr	r3, [r7, #4]
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	1c5a      	adds	r2, r3, #1
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	601a      	str	r2, [r3, #0]
	return c;
 801e078:	7bfb      	ldrb	r3, [r7, #15]
}
 801e07a:	4618      	mov	r0, r3
 801e07c:	3714      	adds	r7, #20
 801e07e:	46bd      	mov	sp, r7
 801e080:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e084:	4770      	bx	lr

0801e086 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801e086:	b480      	push	{r7}
 801e088:	b083      	sub	sp, #12
 801e08a:	af00      	add	r7, sp, #0
 801e08c:	6078      	str	r0, [r7, #4]
 801e08e:	460b      	mov	r3, r1
 801e090:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	78fa      	ldrb	r2, [r7, #3]
 801e098:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	1c5a      	adds	r2, r3, #1
 801e0a0:	687b      	ldr	r3, [r7, #4]
 801e0a2:	601a      	str	r2, [r3, #0]
}
 801e0a4:	bf00      	nop
 801e0a6:	370c      	adds	r7, #12
 801e0a8:	46bd      	mov	sp, r7
 801e0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0ae:	4770      	bx	lr

0801e0b0 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 801e0b0:	b480      	push	{r7}
 801e0b2:	b083      	sub	sp, #12
 801e0b4:	af00      	add	r7, sp, #0
 801e0b6:	6078      	str	r0, [r7, #4]
 801e0b8:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 801e0ba:	683b      	ldr	r3, [r7, #0]
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	da00      	bge.n	801e0c2 <writeInt+0x12>
 801e0c0:	33ff      	adds	r3, #255	; 0xff
 801e0c2:	121b      	asrs	r3, r3, #8
 801e0c4:	461a      	mov	r2, r3
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	b2d2      	uxtb	r2, r2
 801e0cc:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	1c5a      	adds	r2, r3, #1
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 801e0d8:	683b      	ldr	r3, [r7, #0]
 801e0da:	425a      	negs	r2, r3
 801e0dc:	b2db      	uxtb	r3, r3
 801e0de:	b2d2      	uxtb	r2, r2
 801e0e0:	bf58      	it	pl
 801e0e2:	4253      	negpl	r3, r2
 801e0e4:	687a      	ldr	r2, [r7, #4]
 801e0e6:	6812      	ldr	r2, [r2, #0]
 801e0e8:	b2db      	uxtb	r3, r3
 801e0ea:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	681b      	ldr	r3, [r3, #0]
 801e0f0:	1c5a      	adds	r2, r3, #1
 801e0f2:	687b      	ldr	r3, [r7, #4]
 801e0f4:	601a      	str	r2, [r3, #0]
}
 801e0f6:	bf00      	nop
 801e0f8:	370c      	adds	r7, #12
 801e0fa:	46bd      	mov	sp, r7
 801e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e100:	4770      	bx	lr

0801e102 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 801e102:	b580      	push	{r7, lr}
 801e104:	b084      	sub	sp, #16
 801e106:	af00      	add	r7, sp, #0
 801e108:	6078      	str	r0, [r7, #4]
 801e10a:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 801e10c:	6838      	ldr	r0, [r7, #0]
 801e10e:	f7f2 f8c7 	bl	80102a0 <strlen>
 801e112:	4603      	mov	r3, r0
 801e114:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801e116:	68f9      	ldr	r1, [r7, #12]
 801e118:	6878      	ldr	r0, [r7, #4]
 801e11a:	f7ff ffc9 	bl	801e0b0 <writeInt>
	memcpy(*pptr, string, len);
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	681b      	ldr	r3, [r3, #0]
 801e122:	68fa      	ldr	r2, [r7, #12]
 801e124:	6839      	ldr	r1, [r7, #0]
 801e126:	4618      	mov	r0, r3
 801e128:	f00f fe95 	bl	802de56 <memcpy>
	*pptr += len;
 801e12c:	687b      	ldr	r3, [r7, #4]
 801e12e:	681a      	ldr	r2, [r3, #0]
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	441a      	add	r2, r3
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	601a      	str	r2, [r3, #0]
}
 801e138:	bf00      	nop
 801e13a:	3710      	adds	r7, #16
 801e13c:	46bd      	mov	sp, r7
 801e13e:	bd80      	pop	{r7, pc}

0801e140 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 801e140:	b580      	push	{r7, lr}
 801e142:	b084      	sub	sp, #16
 801e144:	af00      	add	r7, sp, #0
 801e146:	60f8      	str	r0, [r7, #12]
 801e148:	4638      	mov	r0, r7
 801e14a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	2b00      	cmp	r3, #0
 801e152:	dd12      	ble.n	801e17a <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 801e154:	687b      	ldr	r3, [r7, #4]
 801e156:	4619      	mov	r1, r3
 801e158:	68f8      	ldr	r0, [r7, #12]
 801e15a:	f7ff ffa9 	bl	801e0b0 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 801e15e:	68fb      	ldr	r3, [r7, #12]
 801e160:	681b      	ldr	r3, [r3, #0]
 801e162:	68b9      	ldr	r1, [r7, #8]
 801e164:	687a      	ldr	r2, [r7, #4]
 801e166:	4618      	mov	r0, r3
 801e168:	f00f fe75 	bl	802de56 <memcpy>
		*pptr += mqttstring.lenstring.len;
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	687a      	ldr	r2, [r7, #4]
 801e172:	441a      	add	r2, r3
 801e174:	68fb      	ldr	r3, [r7, #12]
 801e176:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801e178:	e00c      	b.n	801e194 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801e17a:	683b      	ldr	r3, [r7, #0]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	d005      	beq.n	801e18c <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 801e180:	683b      	ldr	r3, [r7, #0]
 801e182:	4619      	mov	r1, r3
 801e184:	68f8      	ldr	r0, [r7, #12]
 801e186:	f7ff ffbc 	bl	801e102 <writeCString>
}
 801e18a:	e003      	b.n	801e194 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 801e18c:	2100      	movs	r1, #0
 801e18e:	68f8      	ldr	r0, [r7, #12]
 801e190:	f7ff ff8e 	bl	801e0b0 <writeInt>
}
 801e194:	bf00      	nop
 801e196:	3710      	adds	r7, #16
 801e198:	46bd      	mov	sp, r7
 801e19a:	bd80      	pop	{r7, pc}

0801e19c <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 801e19c:	b580      	push	{r7, lr}
 801e19e:	b086      	sub	sp, #24
 801e1a0:	af00      	add	r7, sp, #0
 801e1a2:	60f8      	str	r0, [r7, #12]
 801e1a4:	60b9      	str	r1, [r7, #8]
 801e1a6:	607a      	str	r2, [r7, #4]
	int rc = 0;
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 801e1ac:	68bb      	ldr	r3, [r7, #8]
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	687a      	ldr	r2, [r7, #4]
 801e1b2:	1ad3      	subs	r3, r2, r3
 801e1b4:	2b01      	cmp	r3, #1
 801e1b6:	dd1a      	ble.n	801e1ee <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 801e1b8:	68b8      	ldr	r0, [r7, #8]
 801e1ba:	f7ff ff35 	bl	801e028 <readInt>
 801e1be:	4602      	mov	r2, r0
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 801e1c4:	68bb      	ldr	r3, [r7, #8]
 801e1c6:	681b      	ldr	r3, [r3, #0]
 801e1c8:	68fa      	ldr	r2, [r7, #12]
 801e1ca:	6852      	ldr	r2, [r2, #4]
 801e1cc:	4413      	add	r3, r2
 801e1ce:	687a      	ldr	r2, [r7, #4]
 801e1d0:	429a      	cmp	r2, r3
 801e1d2:	d30c      	bcc.n	801e1ee <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 801e1d4:	68bb      	ldr	r3, [r7, #8]
 801e1d6:	681a      	ldr	r2, [r3, #0]
 801e1d8:	68fb      	ldr	r3, [r7, #12]
 801e1da:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 801e1dc:	68bb      	ldr	r3, [r7, #8]
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	68fa      	ldr	r2, [r7, #12]
 801e1e2:	6852      	ldr	r2, [r2, #4]
 801e1e4:	441a      	add	r2, r3
 801e1e6:	68bb      	ldr	r3, [r7, #8]
 801e1e8:	601a      	str	r2, [r3, #0]
			rc = 1;
 801e1ea:	2301      	movs	r3, #1
 801e1ec:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 801e1ee:	68fb      	ldr	r3, [r7, #12]
 801e1f0:	2200      	movs	r2, #0
 801e1f2:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 801e1f4:	697b      	ldr	r3, [r7, #20]
}
 801e1f6:	4618      	mov	r0, r3
 801e1f8:	3718      	adds	r7, #24
 801e1fa:	46bd      	mov	sp, r7
 801e1fc:	bd80      	pop	{r7, pc}

0801e1fe <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 801e1fe:	b580      	push	{r7, lr}
 801e200:	b086      	sub	sp, #24
 801e202:	af00      	add	r7, sp, #0
 801e204:	1d3b      	adds	r3, r7, #4
 801e206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 801e20a:	2300      	movs	r3, #0
 801e20c:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	2b00      	cmp	r3, #0
 801e212:	d006      	beq.n	801e222 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	4618      	mov	r0, r3
 801e218:	f7f2 f842 	bl	80102a0 <strlen>
 801e21c:	4603      	mov	r3, r0
 801e21e:	617b      	str	r3, [r7, #20]
 801e220:	e001      	b.n	801e226 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 801e222:	68bb      	ldr	r3, [r7, #8]
 801e224:	617b      	str	r3, [r7, #20]
	return rc;
 801e226:	697b      	ldr	r3, [r7, #20]
}
 801e228:	4618      	mov	r0, r3
 801e22a:	3718      	adds	r7, #24
 801e22c:	46bd      	mov	sp, r7
 801e22e:	bd80      	pop	{r7, pc}

0801e230 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 801e230:	b580      	push	{r7, lr}
 801e232:	b086      	sub	sp, #24
 801e234:	af00      	add	r7, sp, #0
 801e236:	6078      	str	r0, [r7, #4]
 801e238:	6039      	str	r1, [r7, #0]
	int alen = 0,
 801e23a:	2300      	movs	r3, #0
 801e23c:	617b      	str	r3, [r7, #20]
		blen = 0;
 801e23e:	2300      	movs	r3, #0
 801e240:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 801e242:	687b      	ldr	r3, [r7, #4]
 801e244:	681b      	ldr	r3, [r3, #0]
 801e246:	2b00      	cmp	r3, #0
 801e248:	d00a      	beq.n	801e260 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	4618      	mov	r0, r3
 801e256:	f7f2 f823 	bl	80102a0 <strlen>
 801e25a:	4603      	mov	r3, r0
 801e25c:	617b      	str	r3, [r7, #20]
 801e25e:	e005      	b.n	801e26c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	689b      	ldr	r3, [r3, #8]
 801e264:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	685b      	ldr	r3, [r3, #4]
 801e26a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 801e26c:	6838      	ldr	r0, [r7, #0]
 801e26e:	f7f2 f817 	bl	80102a0 <strlen>
 801e272:	4603      	mov	r3, r0
 801e274:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 801e276:	697a      	ldr	r2, [r7, #20]
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	429a      	cmp	r2, r3
 801e27c:	d10a      	bne.n	801e294 <MQTTPacket_equals+0x64>
 801e27e:	697b      	ldr	r3, [r7, #20]
 801e280:	461a      	mov	r2, r3
 801e282:	6839      	ldr	r1, [r7, #0]
 801e284:	6938      	ldr	r0, [r7, #16]
 801e286:	f00f fc59 	bl	802db3c <strncmp>
 801e28a:	4603      	mov	r3, r0
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d101      	bne.n	801e294 <MQTTPacket_equals+0x64>
 801e290:	2301      	movs	r3, #1
 801e292:	e000      	b.n	801e296 <MQTTPacket_equals+0x66>
 801e294:	2300      	movs	r3, #0
}
 801e296:	4618      	mov	r0, r3
 801e298:	3718      	adds	r7, #24
 801e29a:	46bd      	mov	sp, r7
 801e29c:	bd80      	pop	{r7, pc}

0801e29e <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 801e29e:	b580      	push	{r7, lr}
 801e2a0:	b086      	sub	sp, #24
 801e2a2:	af00      	add	r7, sp, #0
 801e2a4:	60f8      	str	r0, [r7, #12]
 801e2a6:	4638      	mov	r0, r7
 801e2a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 801e2b0:	463b      	mov	r3, r7
 801e2b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e2b6:	f7ff ffa2 	bl	801e1fe <MQTTstrlen>
 801e2ba:	4603      	mov	r3, r0
 801e2bc:	1c9a      	adds	r2, r3, #2
 801e2be:	6a3b      	ldr	r3, [r7, #32]
 801e2c0:	4413      	add	r3, r2
 801e2c2:	697a      	ldr	r2, [r7, #20]
 801e2c4:	4413      	add	r3, r2
 801e2c6:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	dd02      	ble.n	801e2d4 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 801e2ce:	697b      	ldr	r3, [r7, #20]
 801e2d0:	3302      	adds	r3, #2
 801e2d2:	617b      	str	r3, [r7, #20]
	return len;
 801e2d4:	697b      	ldr	r3, [r7, #20]
}
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	3718      	adds	r7, #24
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	bd80      	pop	{r7, pc}

0801e2de <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 801e2de:	b580      	push	{r7, lr}
 801e2e0:	b08a      	sub	sp, #40	; 0x28
 801e2e2:	af02      	add	r7, sp, #8
 801e2e4:	60f8      	str	r0, [r7, #12]
 801e2e6:	60b9      	str	r1, [r7, #8]
 801e2e8:	603b      	str	r3, [r7, #0]
 801e2ea:	4613      	mov	r3, r2
 801e2ec:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 801e2ee:	68fb      	ldr	r3, [r7, #12]
 801e2f0:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 801e2f2:	2300      	movs	r3, #0
 801e2f4:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 801e2f6:	2300      	movs	r3, #0
 801e2f8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e2fa:	2300      	movs	r3, #0
 801e2fc:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 801e2fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e300:	9300      	str	r3, [sp, #0]
 801e302:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e306:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e308:	6838      	ldr	r0, [r7, #0]
 801e30a:	f7ff ffc8 	bl	801e29e <MQTTSerialize_publishLength>
 801e30e:	61b8      	str	r0, [r7, #24]
 801e310:	69b8      	ldr	r0, [r7, #24]
 801e312:	f7ff fe29 	bl	801df68 <MQTTPacket_len>
 801e316:	4602      	mov	r2, r0
 801e318:	68bb      	ldr	r3, [r7, #8]
 801e31a:	4293      	cmp	r3, r2
 801e31c:	da03      	bge.n	801e326 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e31e:	f06f 0301 	mvn.w	r3, #1
 801e322:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e324:	e04c      	b.n	801e3c0 <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 801e326:	7c3b      	ldrb	r3, [r7, #16]
 801e328:	2203      	movs	r2, #3
 801e32a:	f362 1307 	bfi	r3, r2, #4, #4
 801e32e:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 801e330:	79fb      	ldrb	r3, [r7, #7]
 801e332:	f003 0301 	and.w	r3, r3, #1
 801e336:	b2da      	uxtb	r2, r3
 801e338:	7c3b      	ldrb	r3, [r7, #16]
 801e33a:	f362 03c3 	bfi	r3, r2, #3, #1
 801e33e:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 801e340:	683b      	ldr	r3, [r7, #0]
 801e342:	f003 0303 	and.w	r3, r3, #3
 801e346:	b2da      	uxtb	r2, r3
 801e348:	7c3b      	ldrb	r3, [r7, #16]
 801e34a:	f362 0342 	bfi	r3, r2, #1, #2
 801e34e:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 801e350:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801e354:	f003 0301 	and.w	r3, r3, #1
 801e358:	b2da      	uxtb	r2, r3
 801e35a:	7c3b      	ldrb	r3, [r7, #16]
 801e35c:	f362 0300 	bfi	r3, r2, #0, #1
 801e360:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 801e362:	7c3a      	ldrb	r2, [r7, #16]
 801e364:	f107 0314 	add.w	r3, r7, #20
 801e368:	4611      	mov	r1, r2
 801e36a:	4618      	mov	r0, r3
 801e36c:	f7ff fe8b 	bl	801e086 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 801e370:	697b      	ldr	r3, [r7, #20]
 801e372:	69b9      	ldr	r1, [r7, #24]
 801e374:	4618      	mov	r0, r3
 801e376:	f7ff fd8b 	bl	801de90 <MQTTPacket_encode>
 801e37a:	4602      	mov	r2, r0
 801e37c:	697b      	ldr	r3, [r7, #20]
 801e37e:	4413      	add	r3, r2
 801e380:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 801e382:	f107 0014 	add.w	r0, r7, #20
 801e386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801e38a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e38c:	f7ff fed8 	bl	801e140 <writeMQTTString>

	if (qos > 0)
 801e390:	683b      	ldr	r3, [r7, #0]
 801e392:	2b00      	cmp	r3, #0
 801e394:	dd06      	ble.n	801e3a4 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 801e396:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801e398:	f107 0314 	add.w	r3, r7, #20
 801e39c:	4611      	mov	r1, r2
 801e39e:	4618      	mov	r0, r3
 801e3a0:	f7ff fe86 	bl	801e0b0 <writeInt>

	memcpy(ptr, payload, payloadlen);
 801e3a4:	697b      	ldr	r3, [r7, #20]
 801e3a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e3a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801e3aa:	4618      	mov	r0, r3
 801e3ac:	f00f fd53 	bl	802de56 <memcpy>
	ptr += payloadlen;
 801e3b0:	697a      	ldr	r2, [r7, #20]
 801e3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e3b4:	4413      	add	r3, r2
 801e3b6:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 801e3b8:	697a      	ldr	r2, [r7, #20]
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	1ad3      	subs	r3, r2, r3
 801e3be:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e3c0:	69fb      	ldr	r3, [r7, #28]
}
 801e3c2:	4618      	mov	r0, r3
 801e3c4:	3720      	adds	r7, #32
 801e3c6:	46bd      	mov	sp, r7
 801e3c8:	bd80      	pop	{r7, pc}

0801e3ca <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 801e3ca:	b580      	push	{r7, lr}
 801e3cc:	b088      	sub	sp, #32
 801e3ce:	af00      	add	r7, sp, #0
 801e3d0:	60f8      	str	r0, [r7, #12]
 801e3d2:	60b9      	str	r1, [r7, #8]
 801e3d4:	4611      	mov	r1, r2
 801e3d6:	461a      	mov	r2, r3
 801e3d8:	460b      	mov	r3, r1
 801e3da:	71fb      	strb	r3, [r7, #7]
 801e3dc:	4613      	mov	r3, r2
 801e3de:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 801e3e0:	2300      	movs	r3, #0
 801e3e2:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 801e3ec:	68bb      	ldr	r3, [r7, #8]
 801e3ee:	2b03      	cmp	r3, #3
 801e3f0:	dc03      	bgt.n	801e3fa <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801e3f2:	f06f 0301 	mvn.w	r3, #1
 801e3f6:	61fb      	str	r3, [r7, #28]
		goto exit;
 801e3f8:	e037      	b.n	801e46a <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 801e3fa:	79fb      	ldrb	r3, [r7, #7]
 801e3fc:	f003 030f 	and.w	r3, r3, #15
 801e400:	b2da      	uxtb	r2, r3
 801e402:	7e3b      	ldrb	r3, [r7, #24]
 801e404:	f362 1307 	bfi	r3, r2, #4, #4
 801e408:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 801e40a:	79bb      	ldrb	r3, [r7, #6]
 801e40c:	f003 0301 	and.w	r3, r3, #1
 801e410:	b2da      	uxtb	r2, r3
 801e412:	7e3b      	ldrb	r3, [r7, #24]
 801e414:	f362 03c3 	bfi	r3, r2, #3, #1
 801e418:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 801e41a:	79fb      	ldrb	r3, [r7, #7]
 801e41c:	2b06      	cmp	r3, #6
 801e41e:	bf0c      	ite	eq
 801e420:	2301      	moveq	r3, #1
 801e422:	2300      	movne	r3, #0
 801e424:	b2db      	uxtb	r3, r3
 801e426:	f003 0303 	and.w	r3, r3, #3
 801e42a:	b2da      	uxtb	r2, r3
 801e42c:	7e3b      	ldrb	r3, [r7, #24]
 801e42e:	f362 0342 	bfi	r3, r2, #1, #2
 801e432:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 801e434:	7e3a      	ldrb	r2, [r7, #24]
 801e436:	f107 0314 	add.w	r3, r7, #20
 801e43a:	4611      	mov	r1, r2
 801e43c:	4618      	mov	r0, r3
 801e43e:	f7ff fe22 	bl	801e086 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 801e442:	697b      	ldr	r3, [r7, #20]
 801e444:	2102      	movs	r1, #2
 801e446:	4618      	mov	r0, r3
 801e448:	f7ff fd22 	bl	801de90 <MQTTPacket_encode>
 801e44c:	4602      	mov	r2, r0
 801e44e:	697b      	ldr	r3, [r7, #20]
 801e450:	4413      	add	r3, r2
 801e452:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 801e454:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801e456:	f107 0314 	add.w	r3, r7, #20
 801e45a:	4611      	mov	r1, r2
 801e45c:	4618      	mov	r0, r3
 801e45e:	f7ff fe27 	bl	801e0b0 <writeInt>
	rc = ptr - buf;
 801e462:	697a      	ldr	r2, [r7, #20]
 801e464:	68fb      	ldr	r3, [r7, #12]
 801e466:	1ad3      	subs	r3, r2, r3
 801e468:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801e46a:	69fb      	ldr	r3, [r7, #28]
}
 801e46c:	4618      	mov	r0, r3
 801e46e:	3720      	adds	r7, #32
 801e470:	46bd      	mov	sp, r7
 801e472:	bd80      	pop	{r7, pc}

0801e474 <unescape_http_url>:
 @brief	convert escape characters(%XX) to ASCII character
 */ 
void unescape_http_url(
	char * url	/**< pointer to be converted ( escape characters )*/
	)
{
 801e474:	b590      	push	{r4, r7, lr}
 801e476:	b085      	sub	sp, #20
 801e478:	af00      	add	r7, sp, #0
 801e47a:	6078      	str	r0, [r7, #4]
	int x, y;

	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e47c:	2300      	movs	r3, #0
 801e47e:	60fb      	str	r3, [r7, #12]
 801e480:	2300      	movs	r3, #0
 801e482:	60bb      	str	r3, [r7, #8]
 801e484:	e02e      	b.n	801e4e4 <unescape_http_url+0x70>
		if ((url[x] = url[y]) == '%') {
 801e486:	68bb      	ldr	r3, [r7, #8]
 801e488:	687a      	ldr	r2, [r7, #4]
 801e48a:	441a      	add	r2, r3
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	6879      	ldr	r1, [r7, #4]
 801e490:	440b      	add	r3, r1
 801e492:	7812      	ldrb	r2, [r2, #0]
 801e494:	701a      	strb	r2, [r3, #0]
 801e496:	781b      	ldrb	r3, [r3, #0]
 801e498:	2b25      	cmp	r3, #37	; 0x25
 801e49a:	d11d      	bne.n	801e4d8 <unescape_http_url+0x64>
			url[x] = C2D(url[y+1])*0x10+C2D(url[y+2]);
 801e49c:	68bb      	ldr	r3, [r7, #8]
 801e49e:	3301      	adds	r3, #1
 801e4a0:	687a      	ldr	r2, [r7, #4]
 801e4a2:	4413      	add	r3, r2
 801e4a4:	781b      	ldrb	r3, [r3, #0]
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	f000 fbf1 	bl	801ec8e <C2D>
 801e4ac:	4603      	mov	r3, r0
 801e4ae:	011b      	lsls	r3, r3, #4
 801e4b0:	b2dc      	uxtb	r4, r3
 801e4b2:	68bb      	ldr	r3, [r7, #8]
 801e4b4:	3302      	adds	r3, #2
 801e4b6:	687a      	ldr	r2, [r7, #4]
 801e4b8:	4413      	add	r3, r2
 801e4ba:	781b      	ldrb	r3, [r3, #0]
 801e4bc:	4618      	mov	r0, r3
 801e4be:	f000 fbe6 	bl	801ec8e <C2D>
 801e4c2:	4603      	mov	r3, r0
 801e4c4:	4619      	mov	r1, r3
 801e4c6:	68fb      	ldr	r3, [r7, #12]
 801e4c8:	687a      	ldr	r2, [r7, #4]
 801e4ca:	4413      	add	r3, r2
 801e4cc:	1862      	adds	r2, r4, r1
 801e4ce:	b2d2      	uxtb	r2, r2
 801e4d0:	701a      	strb	r2, [r3, #0]
			y+=2;
 801e4d2:	68bb      	ldr	r3, [r7, #8]
 801e4d4:	3302      	adds	r3, #2
 801e4d6:	60bb      	str	r3, [r7, #8]
	for (x = 0, y = 0; url[y]; ++x, ++y) {
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	3301      	adds	r3, #1
 801e4dc:	60fb      	str	r3, [r7, #12]
 801e4de:	68bb      	ldr	r3, [r7, #8]
 801e4e0:	3301      	adds	r3, #1
 801e4e2:	60bb      	str	r3, [r7, #8]
 801e4e4:	68bb      	ldr	r3, [r7, #8]
 801e4e6:	687a      	ldr	r2, [r7, #4]
 801e4e8:	4413      	add	r3, r2
 801e4ea:	781b      	ldrb	r3, [r3, #0]
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d1ca      	bne.n	801e486 <unescape_http_url+0x12>
		}
	}
	url[x] = '\0';
 801e4f0:	68fb      	ldr	r3, [r7, #12]
 801e4f2:	687a      	ldr	r2, [r7, #4]
 801e4f4:	4413      	add	r3, r2
 801e4f6:	2200      	movs	r2, #0
 801e4f8:	701a      	strb	r2, [r3, #0]
}
 801e4fa:	bf00      	nop
 801e4fc:	3714      	adds	r7, #20
 801e4fe:	46bd      	mov	sp, r7
 801e500:	bd90      	pop	{r4, r7, pc}
	...

0801e504 <make_http_response_head>:
void make_http_response_head(
	char * buf, 	/**< pointer to response header to be made */
	char type, 	/**< response type */
	uint32_t len	/**< size of response header */
	)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	b088      	sub	sp, #32
 801e508:	af00      	add	r7, sp, #0
 801e50a:	60f8      	str	r0, [r7, #12]
 801e50c:	460b      	mov	r3, r1
 801e50e:	607a      	str	r2, [r7, #4]
 801e510:	72fb      	strb	r3, [r7, #11]
	char * head;
	char tmp[10];
			
	/*  file type*/
	if 	(type == PTYPE_HTML) 		head = RES_HTMLHEAD_OK;
 801e512:	7afb      	ldrb	r3, [r7, #11]
 801e514:	2b01      	cmp	r3, #1
 801e516:	d102      	bne.n	801e51e <make_http_response_head+0x1a>
 801e518:	4b42      	ldr	r3, [pc, #264]	; (801e624 <make_http_response_head+0x120>)
 801e51a:	61fb      	str	r3, [r7, #28]
 801e51c:	e061      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_GIF)		head = RES_GIFHEAD_OK;
 801e51e:	7afb      	ldrb	r3, [r7, #11]
 801e520:	2b02      	cmp	r3, #2
 801e522:	d102      	bne.n	801e52a <make_http_response_head+0x26>
 801e524:	4b40      	ldr	r3, [pc, #256]	; (801e628 <make_http_response_head+0x124>)
 801e526:	61fb      	str	r3, [r7, #28]
 801e528:	e05b      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_TEXT)	head = RES_TEXTHEAD_OK;
 801e52a:	7afb      	ldrb	r3, [r7, #11]
 801e52c:	2b03      	cmp	r3, #3
 801e52e:	d102      	bne.n	801e536 <make_http_response_head+0x32>
 801e530:	4b3e      	ldr	r3, [pc, #248]	; (801e62c <make_http_response_head+0x128>)
 801e532:	61fb      	str	r3, [r7, #28]
 801e534:	e055      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_JPEG)	head = RES_JPEGHEAD_OK;
 801e536:	7afb      	ldrb	r3, [r7, #11]
 801e538:	2b04      	cmp	r3, #4
 801e53a:	d102      	bne.n	801e542 <make_http_response_head+0x3e>
 801e53c:	4b3c      	ldr	r3, [pc, #240]	; (801e630 <make_http_response_head+0x12c>)
 801e53e:	61fb      	str	r3, [r7, #28]
 801e540:	e04f      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_FLASH)	head = RES_FLASHHEAD_OK;
 801e542:	7afb      	ldrb	r3, [r7, #11]
 801e544:	2b05      	cmp	r3, #5
 801e546:	d102      	bne.n	801e54e <make_http_response_head+0x4a>
 801e548:	4b3a      	ldr	r3, [pc, #232]	; (801e634 <make_http_response_head+0x130>)
 801e54a:	61fb      	str	r3, [r7, #28]
 801e54c:	e049      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_XML) 	head =  RES_XMLHEAD_OK;
 801e54e:	7afb      	ldrb	r3, [r7, #11]
 801e550:	2b09      	cmp	r3, #9
 801e552:	d102      	bne.n	801e55a <make_http_response_head+0x56>
 801e554:	4b38      	ldr	r3, [pc, #224]	; (801e638 <make_http_response_head+0x134>)
 801e556:	61fb      	str	r3, [r7, #28]
 801e558:	e043      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_CSS) 	head = RES_CSSHEAD_OK;
 801e55a:	7afb      	ldrb	r3, [r7, #11]
 801e55c:	2b0a      	cmp	r3, #10
 801e55e:	d102      	bne.n	801e566 <make_http_response_head+0x62>
 801e560:	4b36      	ldr	r3, [pc, #216]	; (801e63c <make_http_response_head+0x138>)
 801e562:	61fb      	str	r3, [r7, #28]
 801e564:	e03d      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_JSON)	head = RES_JSONHEAD_OK;
 801e566:	7afb      	ldrb	r3, [r7, #11]
 801e568:	2b0c      	cmp	r3, #12
 801e56a:	d102      	bne.n	801e572 <make_http_response_head+0x6e>
 801e56c:	4b34      	ldr	r3, [pc, #208]	; (801e640 <make_http_response_head+0x13c>)
 801e56e:	61fb      	str	r3, [r7, #28]
 801e570:	e037      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_JS)		head = RES_JSHEAD_OK;
 801e572:	7afb      	ldrb	r3, [r7, #11]
 801e574:	2b0b      	cmp	r3, #11
 801e576:	d102      	bne.n	801e57e <make_http_response_head+0x7a>
 801e578:	4b32      	ldr	r3, [pc, #200]	; (801e644 <make_http_response_head+0x140>)
 801e57a:	61fb      	str	r3, [r7, #28]
 801e57c:	e031      	b.n	801e5e2 <make_http_response_head+0xde>
////	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK;
	else if (type == PTYPE_CGI)		head = RES_CGIHEAD_OK_CHANGED;
 801e57e:	7afb      	ldrb	r3, [r7, #11]
 801e580:	2b08      	cmp	r3, #8
 801e582:	d102      	bne.n	801e58a <make_http_response_head+0x86>
 801e584:	4b30      	ldr	r3, [pc, #192]	; (801e648 <make_http_response_head+0x144>)
 801e586:	61fb      	str	r3, [r7, #28]
 801e588:	e02b      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_PNG)		head = RES_PNGHEAD_OK;
 801e58a:	7afb      	ldrb	r3, [r7, #11]
 801e58c:	2b0d      	cmp	r3, #13
 801e58e:	d102      	bne.n	801e596 <make_http_response_head+0x92>
 801e590:	4b2e      	ldr	r3, [pc, #184]	; (801e64c <make_http_response_head+0x148>)
 801e592:	61fb      	str	r3, [r7, #28]
 801e594:	e025      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_ICO)		head = RES_ICOHEAD_OK;
 801e596:	7afb      	ldrb	r3, [r7, #11]
 801e598:	2b0e      	cmp	r3, #14
 801e59a:	d102      	bne.n	801e5a2 <make_http_response_head+0x9e>
 801e59c:	4b2c      	ldr	r3, [pc, #176]	; (801e650 <make_http_response_head+0x14c>)
 801e59e:	61fb      	str	r3, [r7, #28]
 801e5a0:	e01f      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_TTF)		head = RES_TTFHEAD_OK;
 801e5a2:	7afb      	ldrb	r3, [r7, #11]
 801e5a4:	2b14      	cmp	r3, #20
 801e5a6:	d102      	bne.n	801e5ae <make_http_response_head+0xaa>
 801e5a8:	4b2a      	ldr	r3, [pc, #168]	; (801e654 <make_http_response_head+0x150>)
 801e5aa:	61fb      	str	r3, [r7, #28]
 801e5ac:	e019      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_OTF)		head = RES_OTFHEAD_OK;
 801e5ae:	7afb      	ldrb	r3, [r7, #11]
 801e5b0:	2b15      	cmp	r3, #21
 801e5b2:	d102      	bne.n	801e5ba <make_http_response_head+0xb6>
 801e5b4:	4b28      	ldr	r3, [pc, #160]	; (801e658 <make_http_response_head+0x154>)
 801e5b6:	61fb      	str	r3, [r7, #28]
 801e5b8:	e013      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_WOFF)	head = RES_WOFFHEAD_OK;
 801e5ba:	7afb      	ldrb	r3, [r7, #11]
 801e5bc:	2b16      	cmp	r3, #22
 801e5be:	d102      	bne.n	801e5c6 <make_http_response_head+0xc2>
 801e5c0:	4b26      	ldr	r3, [pc, #152]	; (801e65c <make_http_response_head+0x158>)
 801e5c2:	61fb      	str	r3, [r7, #28]
 801e5c4:	e00d      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_EOT)		head = RES_EOTHEAD_OK;
 801e5c6:	7afb      	ldrb	r3, [r7, #11]
 801e5c8:	2b17      	cmp	r3, #23
 801e5ca:	d102      	bne.n	801e5d2 <make_http_response_head+0xce>
 801e5cc:	4b24      	ldr	r3, [pc, #144]	; (801e660 <make_http_response_head+0x15c>)
 801e5ce:	61fb      	str	r3, [r7, #28]
 801e5d0:	e007      	b.n	801e5e2 <make_http_response_head+0xde>
	else if (type == PTYPE_SVG)		head = RES_SVGHEAD_OK;
 801e5d2:	7afb      	ldrb	r3, [r7, #11]
 801e5d4:	2b18      	cmp	r3, #24
 801e5d6:	d102      	bne.n	801e5de <make_http_response_head+0xda>
 801e5d8:	4b22      	ldr	r3, [pc, #136]	; (801e664 <make_http_response_head+0x160>)
 801e5da:	61fb      	str	r3, [r7, #28]
 801e5dc:	e001      	b.n	801e5e2 <make_http_response_head+0xde>
	{
		head = NULL;
		printf("\r\n\r\n-MAKE HEAD UNKNOWN-\r\n");
	}
#else
	else head = NULL;
 801e5de:	2300      	movs	r3, #0
 801e5e0:	61fb      	str	r3, [r7, #28]
#endif	

	sprintf(tmp, "%ld", len);
 801e5e2:	f107 0310 	add.w	r3, r7, #16
 801e5e6:	687a      	ldr	r2, [r7, #4]
 801e5e8:	491f      	ldr	r1, [pc, #124]	; (801e668 <make_http_response_head+0x164>)
 801e5ea:	4618      	mov	r0, r3
 801e5ec:	f00f f90e 	bl	802d80c <siprintf>
	strcpy(buf, head);
 801e5f0:	69f9      	ldr	r1, [r7, #28]
 801e5f2:	68f8      	ldr	r0, [r7, #12]
 801e5f4:	f00f fc27 	bl	802de46 <strcpy>
	strcat(buf, tmp);
 801e5f8:	f107 0310 	add.w	r3, r7, #16
 801e5fc:	4619      	mov	r1, r3
 801e5fe:	68f8      	ldr	r0, [r7, #12]
 801e600:	f00f fa5c 	bl	802dabc <strcat>
	strcat(buf, "\r\n\r\n");
 801e604:	68f8      	ldr	r0, [r7, #12]
 801e606:	f7f1 fe4b 	bl	80102a0 <strlen>
 801e60a:	4603      	mov	r3, r0
 801e60c:	461a      	mov	r2, r3
 801e60e:	68fb      	ldr	r3, [r7, #12]
 801e610:	4413      	add	r3, r2
 801e612:	4a16      	ldr	r2, [pc, #88]	; (801e66c <make_http_response_head+0x168>)
 801e614:	6810      	ldr	r0, [r2, #0]
 801e616:	6018      	str	r0, [r3, #0]
 801e618:	7912      	ldrb	r2, [r2, #4]
 801e61a:	711a      	strb	r2, [r3, #4]
}
 801e61c:	bf00      	nop
 801e61e:	3720      	adds	r7, #32
 801e620:	46bd      	mov	sp, r7
 801e622:	bd80      	pop	{r7, pc}
 801e624:	08033010 	.word	0x08033010
 801e628:	08033064 	.word	0x08033064
 801e62c:	080330a0 	.word	0x080330a0
 801e630:	080330dc 	.word	0x080330dc
 801e634:	08033118 	.word	0x08033118
 801e638:	08033168 	.word	0x08033168
 801e63c:	080331bc 	.word	0x080331bc
 801e640:	080331f8 	.word	0x080331f8
 801e644:	0803323c 	.word	0x0803323c
 801e648:	08033284 	.word	0x08033284
 801e64c:	080332e0 	.word	0x080332e0
 801e650:	0803331c 	.word	0x0803331c
 801e654:	0803335c 	.word	0x0803335c
 801e658:	080333ac 	.word	0x080333ac
 801e65c:	080333fc 	.word	0x080333fc
 801e660:	08033444 	.word	0x08033444
 801e664:	08033494 	.word	0x08033494
 801e668:	080334d4 	.word	0x080334d4
 801e66c:	080334d8 	.word	0x080334d8

0801e670 <find_http_uri_type>:
 */ 
void find_http_uri_type(
	uint8_t * type, 	/**< type to be returned */
	uint8_t * buff		/**< file name */
	) 
{
 801e670:	b580      	push	{r7, lr}
 801e672:	b084      	sub	sp, #16
 801e674:	af00      	add	r7, sp, #0
 801e676:	6078      	str	r0, [r7, #4]
 801e678:	6039      	str	r1, [r7, #0]
	/* Decide type according to extension*/

	char * buf;
	buf = (char *)buff;
 801e67a:	683b      	ldr	r3, [r7, #0]
 801e67c:	60fb      	str	r3, [r7, #12]

	if 	(strstr(buf, ".htm")	|| strstr(buf, ".html"))	*type = PTYPE_HTML;
 801e67e:	499f      	ldr	r1, [pc, #636]	; (801e8fc <find_http_uri_type+0x28c>)
 801e680:	68f8      	ldr	r0, [r7, #12]
 801e682:	f00f faed 	bl	802dc60 <strstr>
 801e686:	4603      	mov	r3, r0
 801e688:	2b00      	cmp	r3, #0
 801e68a:	d106      	bne.n	801e69a <find_http_uri_type+0x2a>
 801e68c:	499c      	ldr	r1, [pc, #624]	; (801e900 <find_http_uri_type+0x290>)
 801e68e:	68f8      	ldr	r0, [r7, #12]
 801e690:	f00f fae6 	bl	802dc60 <strstr>
 801e694:	4603      	mov	r3, r0
 801e696:	2b00      	cmp	r3, #0
 801e698:	d003      	beq.n	801e6a2 <find_http_uri_type+0x32>
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	2201      	movs	r2, #1
 801e69e:	701a      	strb	r2, [r3, #0]
 801e6a0:	e127      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".gif"))							*type = PTYPE_GIF;
 801e6a2:	4998      	ldr	r1, [pc, #608]	; (801e904 <find_http_uri_type+0x294>)
 801e6a4:	68f8      	ldr	r0, [r7, #12]
 801e6a6:	f00f fadb 	bl	802dc60 <strstr>
 801e6aa:	4603      	mov	r3, r0
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d003      	beq.n	801e6b8 <find_http_uri_type+0x48>
 801e6b0:	687b      	ldr	r3, [r7, #4]
 801e6b2:	2202      	movs	r2, #2
 801e6b4:	701a      	strb	r2, [r3, #0]
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
	else 													*type = PTYPE_ERR;
}
 801e6b6:	e11c      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".text") 	|| strstr(buf,".txt"))	*type = PTYPE_TEXT;
 801e6b8:	4993      	ldr	r1, [pc, #588]	; (801e908 <find_http_uri_type+0x298>)
 801e6ba:	68f8      	ldr	r0, [r7, #12]
 801e6bc:	f00f fad0 	bl	802dc60 <strstr>
 801e6c0:	4603      	mov	r3, r0
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d106      	bne.n	801e6d4 <find_http_uri_type+0x64>
 801e6c6:	4991      	ldr	r1, [pc, #580]	; (801e90c <find_http_uri_type+0x29c>)
 801e6c8:	68f8      	ldr	r0, [r7, #12]
 801e6ca:	f00f fac9 	bl	802dc60 <strstr>
 801e6ce:	4603      	mov	r3, r0
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d003      	beq.n	801e6dc <find_http_uri_type+0x6c>
 801e6d4:	687b      	ldr	r3, [r7, #4]
 801e6d6:	2203      	movs	r2, #3
 801e6d8:	701a      	strb	r2, [r3, #0]
 801e6da:	e10a      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".jpeg") 	|| strstr(buf,".jpg"))	*type = PTYPE_JPEG;
 801e6dc:	498c      	ldr	r1, [pc, #560]	; (801e910 <find_http_uri_type+0x2a0>)
 801e6de:	68f8      	ldr	r0, [r7, #12]
 801e6e0:	f00f fabe 	bl	802dc60 <strstr>
 801e6e4:	4603      	mov	r3, r0
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d106      	bne.n	801e6f8 <find_http_uri_type+0x88>
 801e6ea:	498a      	ldr	r1, [pc, #552]	; (801e914 <find_http_uri_type+0x2a4>)
 801e6ec:	68f8      	ldr	r0, [r7, #12]
 801e6ee:	f00f fab7 	bl	802dc60 <strstr>
 801e6f2:	4603      	mov	r3, r0
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d003      	beq.n	801e700 <find_http_uri_type+0x90>
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	2204      	movs	r2, #4
 801e6fc:	701a      	strb	r2, [r3, #0]
 801e6fe:	e0f8      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".swf")) 							*type = PTYPE_FLASH;
 801e700:	4985      	ldr	r1, [pc, #532]	; (801e918 <find_http_uri_type+0x2a8>)
 801e702:	68f8      	ldr	r0, [r7, #12]
 801e704:	f00f faac 	bl	802dc60 <strstr>
 801e708:	4603      	mov	r3, r0
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d003      	beq.n	801e716 <find_http_uri_type+0xa6>
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	2205      	movs	r2, #5
 801e712:	701a      	strb	r2, [r3, #0]
}
 801e714:	e0ed      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".cgi") 	|| strstr(buf,".CGI"))	*type = PTYPE_CGI;
 801e716:	4981      	ldr	r1, [pc, #516]	; (801e91c <find_http_uri_type+0x2ac>)
 801e718:	68f8      	ldr	r0, [r7, #12]
 801e71a:	f00f faa1 	bl	802dc60 <strstr>
 801e71e:	4603      	mov	r3, r0
 801e720:	2b00      	cmp	r3, #0
 801e722:	d106      	bne.n	801e732 <find_http_uri_type+0xc2>
 801e724:	497e      	ldr	r1, [pc, #504]	; (801e920 <find_http_uri_type+0x2b0>)
 801e726:	68f8      	ldr	r0, [r7, #12]
 801e728:	f00f fa9a 	bl	802dc60 <strstr>
 801e72c:	4603      	mov	r3, r0
 801e72e:	2b00      	cmp	r3, #0
 801e730:	d003      	beq.n	801e73a <find_http_uri_type+0xca>
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	2208      	movs	r2, #8
 801e736:	701a      	strb	r2, [r3, #0]
 801e738:	e0db      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".json") 	|| strstr(buf,".JSON"))	*type = PTYPE_JSON;
 801e73a:	497a      	ldr	r1, [pc, #488]	; (801e924 <find_http_uri_type+0x2b4>)
 801e73c:	68f8      	ldr	r0, [r7, #12]
 801e73e:	f00f fa8f 	bl	802dc60 <strstr>
 801e742:	4603      	mov	r3, r0
 801e744:	2b00      	cmp	r3, #0
 801e746:	d106      	bne.n	801e756 <find_http_uri_type+0xe6>
 801e748:	4977      	ldr	r1, [pc, #476]	; (801e928 <find_http_uri_type+0x2b8>)
 801e74a:	68f8      	ldr	r0, [r7, #12]
 801e74c:	f00f fa88 	bl	802dc60 <strstr>
 801e750:	4603      	mov	r3, r0
 801e752:	2b00      	cmp	r3, #0
 801e754:	d003      	beq.n	801e75e <find_http_uri_type+0xee>
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	220c      	movs	r2, #12
 801e75a:	701a      	strb	r2, [r3, #0]
 801e75c:	e0c9      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".js") 	|| strstr(buf,".JS"))	*type = PTYPE_JS;
 801e75e:	4973      	ldr	r1, [pc, #460]	; (801e92c <find_http_uri_type+0x2bc>)
 801e760:	68f8      	ldr	r0, [r7, #12]
 801e762:	f00f fa7d 	bl	802dc60 <strstr>
 801e766:	4603      	mov	r3, r0
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d106      	bne.n	801e77a <find_http_uri_type+0x10a>
 801e76c:	4970      	ldr	r1, [pc, #448]	; (801e930 <find_http_uri_type+0x2c0>)
 801e76e:	68f8      	ldr	r0, [r7, #12]
 801e770:	f00f fa76 	bl	802dc60 <strstr>
 801e774:	4603      	mov	r3, r0
 801e776:	2b00      	cmp	r3, #0
 801e778:	d003      	beq.n	801e782 <find_http_uri_type+0x112>
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	220b      	movs	r2, #11
 801e77e:	701a      	strb	r2, [r3, #0]
 801e780:	e0b7      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".CGI") 	|| strstr(buf,".cgi"))	*type = PTYPE_CGI;
 801e782:	4967      	ldr	r1, [pc, #412]	; (801e920 <find_http_uri_type+0x2b0>)
 801e784:	68f8      	ldr	r0, [r7, #12]
 801e786:	f00f fa6b 	bl	802dc60 <strstr>
 801e78a:	4603      	mov	r3, r0
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d106      	bne.n	801e79e <find_http_uri_type+0x12e>
 801e790:	4962      	ldr	r1, [pc, #392]	; (801e91c <find_http_uri_type+0x2ac>)
 801e792:	68f8      	ldr	r0, [r7, #12]
 801e794:	f00f fa64 	bl	802dc60 <strstr>
 801e798:	4603      	mov	r3, r0
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d003      	beq.n	801e7a6 <find_http_uri_type+0x136>
 801e79e:	687b      	ldr	r3, [r7, #4]
 801e7a0:	2208      	movs	r2, #8
 801e7a2:	701a      	strb	r2, [r3, #0]
 801e7a4:	e0a5      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".xml") 	|| strstr(buf,".XML"))	*type = PTYPE_XML;
 801e7a6:	4963      	ldr	r1, [pc, #396]	; (801e934 <find_http_uri_type+0x2c4>)
 801e7a8:	68f8      	ldr	r0, [r7, #12]
 801e7aa:	f00f fa59 	bl	802dc60 <strstr>
 801e7ae:	4603      	mov	r3, r0
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d106      	bne.n	801e7c2 <find_http_uri_type+0x152>
 801e7b4:	4960      	ldr	r1, [pc, #384]	; (801e938 <find_http_uri_type+0x2c8>)
 801e7b6:	68f8      	ldr	r0, [r7, #12]
 801e7b8:	f00f fa52 	bl	802dc60 <strstr>
 801e7bc:	4603      	mov	r3, r0
 801e7be:	2b00      	cmp	r3, #0
 801e7c0:	d003      	beq.n	801e7ca <find_http_uri_type+0x15a>
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	2209      	movs	r2, #9
 801e7c6:	701a      	strb	r2, [r3, #0]
 801e7c8:	e093      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".css") 	|| strstr(buf,".CSS"))	*type = PTYPE_CSS;
 801e7ca:	495c      	ldr	r1, [pc, #368]	; (801e93c <find_http_uri_type+0x2cc>)
 801e7cc:	68f8      	ldr	r0, [r7, #12]
 801e7ce:	f00f fa47 	bl	802dc60 <strstr>
 801e7d2:	4603      	mov	r3, r0
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d106      	bne.n	801e7e6 <find_http_uri_type+0x176>
 801e7d8:	4959      	ldr	r1, [pc, #356]	; (801e940 <find_http_uri_type+0x2d0>)
 801e7da:	68f8      	ldr	r0, [r7, #12]
 801e7dc:	f00f fa40 	bl	802dc60 <strstr>
 801e7e0:	4603      	mov	r3, r0
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	d003      	beq.n	801e7ee <find_http_uri_type+0x17e>
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	220a      	movs	r2, #10
 801e7ea:	701a      	strb	r2, [r3, #0]
 801e7ec:	e081      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".png") 	|| strstr(buf,".PNG"))	*type = PTYPE_PNG;
 801e7ee:	4955      	ldr	r1, [pc, #340]	; (801e944 <find_http_uri_type+0x2d4>)
 801e7f0:	68f8      	ldr	r0, [r7, #12]
 801e7f2:	f00f fa35 	bl	802dc60 <strstr>
 801e7f6:	4603      	mov	r3, r0
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	d106      	bne.n	801e80a <find_http_uri_type+0x19a>
 801e7fc:	4952      	ldr	r1, [pc, #328]	; (801e948 <find_http_uri_type+0x2d8>)
 801e7fe:	68f8      	ldr	r0, [r7, #12]
 801e800:	f00f fa2e 	bl	802dc60 <strstr>
 801e804:	4603      	mov	r3, r0
 801e806:	2b00      	cmp	r3, #0
 801e808:	d003      	beq.n	801e812 <find_http_uri_type+0x1a2>
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	220d      	movs	r2, #13
 801e80e:	701a      	strb	r2, [r3, #0]
 801e810:	e06f      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ico") 	|| strstr(buf,".ICO"))	*type = PTYPE_ICO;
 801e812:	494e      	ldr	r1, [pc, #312]	; (801e94c <find_http_uri_type+0x2dc>)
 801e814:	68f8      	ldr	r0, [r7, #12]
 801e816:	f00f fa23 	bl	802dc60 <strstr>
 801e81a:	4603      	mov	r3, r0
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d106      	bne.n	801e82e <find_http_uri_type+0x1be>
 801e820:	494b      	ldr	r1, [pc, #300]	; (801e950 <find_http_uri_type+0x2e0>)
 801e822:	68f8      	ldr	r0, [r7, #12]
 801e824:	f00f fa1c 	bl	802dc60 <strstr>
 801e828:	4603      	mov	r3, r0
 801e82a:	2b00      	cmp	r3, #0
 801e82c:	d003      	beq.n	801e836 <find_http_uri_type+0x1c6>
 801e82e:	687b      	ldr	r3, [r7, #4]
 801e830:	220e      	movs	r2, #14
 801e832:	701a      	strb	r2, [r3, #0]
 801e834:	e05d      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".ttf") 	|| strstr(buf,".TTF"))	*type = PTYPE_TTF;
 801e836:	4947      	ldr	r1, [pc, #284]	; (801e954 <find_http_uri_type+0x2e4>)
 801e838:	68f8      	ldr	r0, [r7, #12]
 801e83a:	f00f fa11 	bl	802dc60 <strstr>
 801e83e:	4603      	mov	r3, r0
 801e840:	2b00      	cmp	r3, #0
 801e842:	d106      	bne.n	801e852 <find_http_uri_type+0x1e2>
 801e844:	4944      	ldr	r1, [pc, #272]	; (801e958 <find_http_uri_type+0x2e8>)
 801e846:	68f8      	ldr	r0, [r7, #12]
 801e848:	f00f fa0a 	bl	802dc60 <strstr>
 801e84c:	4603      	mov	r3, r0
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d003      	beq.n	801e85a <find_http_uri_type+0x1ea>
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	2214      	movs	r2, #20
 801e856:	701a      	strb	r2, [r3, #0]
 801e858:	e04b      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".otf") 	|| strstr(buf,".OTF"))	*type = PTYPE_OTF;
 801e85a:	4940      	ldr	r1, [pc, #256]	; (801e95c <find_http_uri_type+0x2ec>)
 801e85c:	68f8      	ldr	r0, [r7, #12]
 801e85e:	f00f f9ff 	bl	802dc60 <strstr>
 801e862:	4603      	mov	r3, r0
 801e864:	2b00      	cmp	r3, #0
 801e866:	d106      	bne.n	801e876 <find_http_uri_type+0x206>
 801e868:	493d      	ldr	r1, [pc, #244]	; (801e960 <find_http_uri_type+0x2f0>)
 801e86a:	68f8      	ldr	r0, [r7, #12]
 801e86c:	f00f f9f8 	bl	802dc60 <strstr>
 801e870:	4603      	mov	r3, r0
 801e872:	2b00      	cmp	r3, #0
 801e874:	d003      	beq.n	801e87e <find_http_uri_type+0x20e>
 801e876:	687b      	ldr	r3, [r7, #4]
 801e878:	2215      	movs	r2, #21
 801e87a:	701a      	strb	r2, [r3, #0]
 801e87c:	e039      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".woff") 	|| strstr(buf,".WOFF"))	*type = PTYPE_WOFF;
 801e87e:	4939      	ldr	r1, [pc, #228]	; (801e964 <find_http_uri_type+0x2f4>)
 801e880:	68f8      	ldr	r0, [r7, #12]
 801e882:	f00f f9ed 	bl	802dc60 <strstr>
 801e886:	4603      	mov	r3, r0
 801e888:	2b00      	cmp	r3, #0
 801e88a:	d106      	bne.n	801e89a <find_http_uri_type+0x22a>
 801e88c:	4936      	ldr	r1, [pc, #216]	; (801e968 <find_http_uri_type+0x2f8>)
 801e88e:	68f8      	ldr	r0, [r7, #12]
 801e890:	f00f f9e6 	bl	802dc60 <strstr>
 801e894:	4603      	mov	r3, r0
 801e896:	2b00      	cmp	r3, #0
 801e898:	d003      	beq.n	801e8a2 <find_http_uri_type+0x232>
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	2216      	movs	r2, #22
 801e89e:	701a      	strb	r2, [r3, #0]
 801e8a0:	e027      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".eot") 	|| strstr(buf,".EOT"))	*type = PTYPE_EOT;
 801e8a2:	4932      	ldr	r1, [pc, #200]	; (801e96c <find_http_uri_type+0x2fc>)
 801e8a4:	68f8      	ldr	r0, [r7, #12]
 801e8a6:	f00f f9db 	bl	802dc60 <strstr>
 801e8aa:	4603      	mov	r3, r0
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d106      	bne.n	801e8be <find_http_uri_type+0x24e>
 801e8b0:	492f      	ldr	r1, [pc, #188]	; (801e970 <find_http_uri_type+0x300>)
 801e8b2:	68f8      	ldr	r0, [r7, #12]
 801e8b4:	f00f f9d4 	bl	802dc60 <strstr>
 801e8b8:	4603      	mov	r3, r0
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d003      	beq.n	801e8c6 <find_http_uri_type+0x256>
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	2217      	movs	r2, #23
 801e8c2:	701a      	strb	r2, [r3, #0]
 801e8c4:	e015      	b.n	801e8f2 <find_http_uri_type+0x282>
	else if (strstr(buf, ".svg") 	|| strstr(buf,".SVG"))	*type = PTYPE_SVG;
 801e8c6:	492b      	ldr	r1, [pc, #172]	; (801e974 <find_http_uri_type+0x304>)
 801e8c8:	68f8      	ldr	r0, [r7, #12]
 801e8ca:	f00f f9c9 	bl	802dc60 <strstr>
 801e8ce:	4603      	mov	r3, r0
 801e8d0:	2b00      	cmp	r3, #0
 801e8d2:	d106      	bne.n	801e8e2 <find_http_uri_type+0x272>
 801e8d4:	4928      	ldr	r1, [pc, #160]	; (801e978 <find_http_uri_type+0x308>)
 801e8d6:	68f8      	ldr	r0, [r7, #12]
 801e8d8:	f00f f9c2 	bl	802dc60 <strstr>
 801e8dc:	4603      	mov	r3, r0
 801e8de:	2b00      	cmp	r3, #0
 801e8e0:	d003      	beq.n	801e8ea <find_http_uri_type+0x27a>
 801e8e2:	687b      	ldr	r3, [r7, #4]
 801e8e4:	2218      	movs	r2, #24
 801e8e6:	701a      	strb	r2, [r3, #0]
 801e8e8:	e003      	b.n	801e8f2 <find_http_uri_type+0x282>
	else 													*type = PTYPE_ERR;
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	2200      	movs	r2, #0
 801e8ee:	701a      	strb	r2, [r3, #0]
}
 801e8f0:	e7ff      	b.n	801e8f2 <find_http_uri_type+0x282>
 801e8f2:	bf00      	nop
 801e8f4:	3710      	adds	r7, #16
 801e8f6:	46bd      	mov	sp, r7
 801e8f8:	bd80      	pop	{r7, pc}
 801e8fa:	bf00      	nop
 801e8fc:	080334e0 	.word	0x080334e0
 801e900:	080334e8 	.word	0x080334e8
 801e904:	080334f0 	.word	0x080334f0
 801e908:	080334f8 	.word	0x080334f8
 801e90c:	08033500 	.word	0x08033500
 801e910:	08033508 	.word	0x08033508
 801e914:	08033510 	.word	0x08033510
 801e918:	08033518 	.word	0x08033518
 801e91c:	08033520 	.word	0x08033520
 801e920:	08033528 	.word	0x08033528
 801e924:	08033530 	.word	0x08033530
 801e928:	08033538 	.word	0x08033538
 801e92c:	08033540 	.word	0x08033540
 801e930:	08033544 	.word	0x08033544
 801e934:	08033548 	.word	0x08033548
 801e938:	08033550 	.word	0x08033550
 801e93c:	08033558 	.word	0x08033558
 801e940:	08033560 	.word	0x08033560
 801e944:	08033568 	.word	0x08033568
 801e948:	08033570 	.word	0x08033570
 801e94c:	08033578 	.word	0x08033578
 801e950:	08033580 	.word	0x08033580
 801e954:	08033588 	.word	0x08033588
 801e958:	08033590 	.word	0x08033590
 801e95c:	08033598 	.word	0x08033598
 801e960:	080335a0 	.word	0x080335a0
 801e964:	080335a8 	.word	0x080335a8
 801e968:	080335b0 	.word	0x080335b0
 801e96c:	080335b8 	.word	0x080335b8
 801e970:	080335c0 	.word	0x080335c0
 801e974:	080335c8 	.word	0x080335c8
 801e978:	080335d0 	.word	0x080335d0

0801e97c <parse_http_request>:
 */ 
void parse_http_request(
	st_http_request * request, 	/**< request to be returned */
	uint8_t * buf				/**< pointer to be parsed */
	)
{
 801e97c:	b580      	push	{r7, lr}
 801e97e:	b084      	sub	sp, #16
 801e980:	af00      	add	r7, sp, #0
 801e982:	6078      	str	r0, [r7, #4]
 801e984:	6039      	str	r1, [r7, #0]
  char * nexttok;
  nexttok = strtok((char*)buf," ");
 801e986:	4935      	ldr	r1, [pc, #212]	; (801ea5c <parse_http_request+0xe0>)
 801e988:	6838      	ldr	r0, [r7, #0]
 801e98a:	f00f f90d 	bl	802dba8 <strtok>
 801e98e:	60f8      	str	r0, [r7, #12]
  if(!nexttok)
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d103      	bne.n	801e99e <parse_http_request+0x22>
  {
    request->METHOD = METHOD_ERR;
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	2200      	movs	r2, #0
 801e99a:	701a      	strb	r2, [r3, #0]
    return;
 801e99c:	e05a      	b.n	801ea54 <parse_http_request+0xd8>
  }
  if(!strcmp(nexttok, "GET") || !strcmp(nexttok,"get"))
 801e99e:	4930      	ldr	r1, [pc, #192]	; (801ea60 <parse_http_request+0xe4>)
 801e9a0:	68f8      	ldr	r0, [r7, #12]
 801e9a2:	f7f1 fc1d 	bl	80101e0 <strcmp>
 801e9a6:	4603      	mov	r3, r0
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d006      	beq.n	801e9ba <parse_http_request+0x3e>
 801e9ac:	492d      	ldr	r1, [pc, #180]	; (801ea64 <parse_http_request+0xe8>)
 801e9ae:	68f8      	ldr	r0, [r7, #12]
 801e9b0:	f7f1 fc16 	bl	80101e0 <strcmp>
 801e9b4:	4603      	mov	r3, r0
 801e9b6:	2b00      	cmp	r3, #0
 801e9b8:	d10a      	bne.n	801e9d0 <parse_http_request+0x54>
  {
    request->METHOD = METHOD_GET;
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	2201      	movs	r2, #1
 801e9be:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+4," ");
 801e9c0:	68fb      	ldr	r3, [r7, #12]
 801e9c2:	3304      	adds	r3, #4
 801e9c4:	4925      	ldr	r1, [pc, #148]	; (801ea5c <parse_http_request+0xe0>)
 801e9c6:	4618      	mov	r0, r3
 801e9c8:	f00f f8ee 	bl	802dba8 <strtok>
 801e9cc:	60f8      	str	r0, [r7, #12]
 801e9ce:	e034      	b.n	801ea3a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "HEAD") || !strcmp(nexttok,"head"))
 801e9d0:	4925      	ldr	r1, [pc, #148]	; (801ea68 <parse_http_request+0xec>)
 801e9d2:	68f8      	ldr	r0, [r7, #12]
 801e9d4:	f7f1 fc04 	bl	80101e0 <strcmp>
 801e9d8:	4603      	mov	r3, r0
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	d006      	beq.n	801e9ec <parse_http_request+0x70>
 801e9de:	4923      	ldr	r1, [pc, #140]	; (801ea6c <parse_http_request+0xf0>)
 801e9e0:	68f8      	ldr	r0, [r7, #12]
 801e9e2:	f7f1 fbfd 	bl	80101e0 <strcmp>
 801e9e6:	4603      	mov	r3, r0
 801e9e8:	2b00      	cmp	r3, #0
 801e9ea:	d10a      	bne.n	801ea02 <parse_http_request+0x86>
  {
    request->METHOD = METHOD_HEAD;
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	2202      	movs	r2, #2
 801e9f0:	701a      	strb	r2, [r3, #0]
//    nexttok = strtok(NULL," ");
    nexttok = strtok(nexttok+5," ");
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	3305      	adds	r3, #5
 801e9f6:	4919      	ldr	r1, [pc, #100]	; (801ea5c <parse_http_request+0xe0>)
 801e9f8:	4618      	mov	r0, r3
 801e9fa:	f00f f8d5 	bl	802dba8 <strtok>
 801e9fe:	60f8      	str	r0, [r7, #12]
 801ea00:	e01b      	b.n	801ea3a <parse_http_request+0xbe>

  }
  else if (!strcmp(nexttok, "POST") || !strcmp(nexttok,"post"))
 801ea02:	491b      	ldr	r1, [pc, #108]	; (801ea70 <parse_http_request+0xf4>)
 801ea04:	68f8      	ldr	r0, [r7, #12]
 801ea06:	f7f1 fbeb 	bl	80101e0 <strcmp>
 801ea0a:	4603      	mov	r3, r0
 801ea0c:	2b00      	cmp	r3, #0
 801ea0e:	d006      	beq.n	801ea1e <parse_http_request+0xa2>
 801ea10:	4918      	ldr	r1, [pc, #96]	; (801ea74 <parse_http_request+0xf8>)
 801ea12:	68f8      	ldr	r0, [r7, #12]
 801ea14:	f7f1 fbe4 	bl	80101e0 <strcmp>
 801ea18:	4603      	mov	r3, r0
 801ea1a:	2b00      	cmp	r3, #0
 801ea1c:	d10a      	bne.n	801ea34 <parse_http_request+0xb8>
  {
//    nexttok = strtok(NULL,"\0");
	  nexttok = strtok(nexttok+5,"\0");
 801ea1e:	68fb      	ldr	r3, [r7, #12]
 801ea20:	3305      	adds	r3, #5
 801ea22:	4915      	ldr	r1, [pc, #84]	; (801ea78 <parse_http_request+0xfc>)
 801ea24:	4618      	mov	r0, r3
 801ea26:	f00f f8bf 	bl	802dba8 <strtok>
 801ea2a:	60f8      	str	r0, [r7, #12]
    request->METHOD = METHOD_POST;
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	2203      	movs	r2, #3
 801ea30:	701a      	strb	r2, [r3, #0]
 801ea32:	e002      	b.n	801ea3a <parse_http_request+0xbe>
  }
  else
  {
    request->METHOD = METHOD_ERR;
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	2200      	movs	r2, #0
 801ea38:	701a      	strb	r2, [r3, #0]
  }

  if(!nexttok)
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	d103      	bne.n	801ea48 <parse_http_request+0xcc>
  {
    request->METHOD = METHOD_ERR;
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	2200      	movs	r2, #0
 801ea44:	701a      	strb	r2, [r3, #0]
    return;
 801ea46:	e005      	b.n	801ea54 <parse_http_request+0xd8>
  }
  strcpy((char *)request->URI, nexttok);
 801ea48:	687b      	ldr	r3, [r7, #4]
 801ea4a:	3302      	adds	r3, #2
 801ea4c:	68f9      	ldr	r1, [r7, #12]
 801ea4e:	4618      	mov	r0, r3
 801ea50:	f00f f9f9 	bl	802de46 <strcpy>
}
 801ea54:	3710      	adds	r7, #16
 801ea56:	46bd      	mov	sp, r7
 801ea58:	bd80      	pop	{r7, pc}
 801ea5a:	bf00      	nop
 801ea5c:	080335d8 	.word	0x080335d8
 801ea60:	080335dc 	.word	0x080335dc
 801ea64:	080335e0 	.word	0x080335e0
 801ea68:	080335e4 	.word	0x080335e4
 801ea6c:	080335ec 	.word	0x080335ec
 801ea70:	080335f4 	.word	0x080335f4
 801ea74:	080335fc 	.word	0x080335fc
 801ea78:	08033604 	.word	0x08033604

0801ea7c <get_http_param_value>:
#else
/**
 @brief	get next parameter value in the request
 */
uint8_t * get_http_param_value(char* uri, char* param_name)
{
 801ea7c:	b580      	push	{r7, lr}
 801ea7e:	b08a      	sub	sp, #40	; 0x28
 801ea80:	af00      	add	r7, sp, #0
 801ea82:	6078      	str	r0, [r7, #4]
 801ea84:	6039      	str	r1, [r7, #0]

	uint8_t * name = 0;
 801ea86:	2300      	movs	r3, #0
 801ea88:	623b      	str	r3, [r7, #32]
	uint8_t * ret = BUFPUB;
 801ea8a:	4b3c      	ldr	r3, [pc, #240]	; (801eb7c <get_http_param_value+0x100>)
 801ea8c:	61fb      	str	r3, [r7, #28]
	uint8_t * pos2;
	uint16_t len = 0, content_len = 0;
 801ea8e:	2300      	movs	r3, #0
 801ea90:	837b      	strh	r3, [r7, #26]
 801ea92:	2300      	movs	r3, #0
 801ea94:	833b      	strh	r3, [r7, #24]
	uint8_t tmp_buf[10]={0x00, };
 801ea96:	2300      	movs	r3, #0
 801ea98:	60bb      	str	r3, [r7, #8]
 801ea9a:	f107 030c 	add.w	r3, r7, #12
 801ea9e:	2200      	movs	r2, #0
 801eaa0:	601a      	str	r2, [r3, #0]
 801eaa2:	809a      	strh	r2, [r3, #4]
	uint8_t * test;

	if(!uri || !param_name) return 0;
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d002      	beq.n	801eab0 <get_http_param_value+0x34>
 801eaaa:	683b      	ldr	r3, [r7, #0]
 801eaac:	2b00      	cmp	r3, #0
 801eaae:	d101      	bne.n	801eab4 <get_http_param_value+0x38>
 801eab0:	2300      	movs	r3, #0
 801eab2:	e05f      	b.n	801eb74 <get_http_param_value+0xf8>

	/***************/
	if (mid(uri, "Content-Length: ", "\r\n", (char *)tmp_buf)){
 801eab4:	f107 0308 	add.w	r3, r7, #8
 801eab8:	4a31      	ldr	r2, [pc, #196]	; (801eb80 <get_http_param_value+0x104>)
 801eaba:	4932      	ldr	r1, [pc, #200]	; (801eb84 <get_http_param_value+0x108>)
 801eabc:	6878      	ldr	r0, [r7, #4]
 801eabe:	f000 f8b4 	bl	801ec2a <mid>
 801eac2:	4603      	mov	r3, r0
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d001      	beq.n	801eacc <get_http_param_value+0x50>
		return 0;
 801eac8:	2300      	movs	r3, #0
 801eaca:	e053      	b.n	801eb74 <get_http_param_value+0xf8>
	}
	content_len = ATOI(tmp_buf, 10);
 801eacc:	f107 0308 	add.w	r3, r7, #8
 801ead0:	210a      	movs	r1, #10
 801ead2:	4618      	mov	r0, r3
 801ead4:	f000 f884 	bl	801ebe0 <ATOI>
 801ead8:	4603      	mov	r3, r0
 801eada:	833b      	strh	r3, [r7, #24]
	uri = strstr(uri, "\r\n\r\n");
 801eadc:	492a      	ldr	r1, [pc, #168]	; (801eb88 <get_http_param_value+0x10c>)
 801eade:	6878      	ldr	r0, [r7, #4]
 801eae0:	f00f f8be 	bl	802dc60 <strstr>
 801eae4:	6078      	str	r0, [r7, #4]
	uri += 4;
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	3304      	adds	r3, #4
 801eaea:	607b      	str	r3, [r7, #4]
	uri[content_len] = 0;
 801eaec:	8b3b      	ldrh	r3, [r7, #24]
 801eaee:	687a      	ldr	r2, [r7, #4]
 801eaf0:	4413      	add	r3, r2
 801eaf2:	2200      	movs	r2, #0
 801eaf4:	701a      	strb	r2, [r3, #0]
	/***************/

	if((name = (uint8_t *)strstr(uri, param_name)))
 801eaf6:	6839      	ldr	r1, [r7, #0]
 801eaf8:	6878      	ldr	r0, [r7, #4]
 801eafa:	f00f f8b1 	bl	802dc60 <strstr>
 801eafe:	6238      	str	r0, [r7, #32]
 801eb00:	6a3b      	ldr	r3, [r7, #32]
 801eb02:	2b00      	cmp	r3, #0
 801eb04:	d033      	beq.n	801eb6e <get_http_param_value+0xf2>
	{
		test = name + 1;
 801eb06:	6a3b      	ldr	r3, [r7, #32]
 801eb08:	3301      	adds	r3, #1
 801eb0a:	617b      	str	r3, [r7, #20]
//		if (isalpha((int)test) || isdigit((int)test)){
//			4 +2;
//		}
		name += strlen(param_name) + 1;
 801eb0c:	6838      	ldr	r0, [r7, #0]
 801eb0e:	f7f1 fbc7 	bl	80102a0 <strlen>
 801eb12:	4603      	mov	r3, r0
 801eb14:	3301      	adds	r3, #1
 801eb16:	6a3a      	ldr	r2, [r7, #32]
 801eb18:	4413      	add	r3, r2
 801eb1a:	623b      	str	r3, [r7, #32]
		pos2 = (uint8_t*)strstr((char*)name, "&");
 801eb1c:	2126      	movs	r1, #38	; 0x26
 801eb1e:	6a38      	ldr	r0, [r7, #32]
 801eb20:	f00e ffdb 	bl	802dada <strchr>
 801eb24:	6278      	str	r0, [r7, #36]	; 0x24
		if(!pos2)
 801eb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d106      	bne.n	801eb3a <get_http_param_value+0xbe>
		{
			pos2 = name + strlen((char*)name);
 801eb2c:	6a38      	ldr	r0, [r7, #32]
 801eb2e:	f7f1 fbb7 	bl	80102a0 <strlen>
 801eb32:	4602      	mov	r2, r0
 801eb34:	6a3b      	ldr	r3, [r7, #32]
 801eb36:	4413      	add	r3, r2
 801eb38:	627b      	str	r3, [r7, #36]	; 0x24
		}
		len = pos2 - name;
 801eb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb3c:	6a3b      	ldr	r3, [r7, #32]
 801eb3e:	1ad3      	subs	r3, r2, r3
 801eb40:	837b      	strh	r3, [r7, #26]

		if(len)
 801eb42:	8b7b      	ldrh	r3, [r7, #26]
 801eb44:	2b00      	cmp	r3, #0
 801eb46:	d00e      	beq.n	801eb66 <get_http_param_value+0xea>
		{
			ret[len] = 0;
 801eb48:	8b7b      	ldrh	r3, [r7, #26]
 801eb4a:	69fa      	ldr	r2, [r7, #28]
 801eb4c:	4413      	add	r3, r2
 801eb4e:	2200      	movs	r2, #0
 801eb50:	701a      	strb	r2, [r3, #0]
			strncpy((char*)ret,(char*)name, len);
 801eb52:	8b7b      	ldrh	r3, [r7, #26]
 801eb54:	461a      	mov	r2, r3
 801eb56:	6a39      	ldr	r1, [r7, #32]
 801eb58:	69f8      	ldr	r0, [r7, #28]
 801eb5a:	f00f f801 	bl	802db60 <strncpy>
			unescape_http_url((char *)ret);
 801eb5e:	69f8      	ldr	r0, [r7, #28]
 801eb60:	f7ff fc88 	bl	801e474 <unescape_http_url>
 801eb64:	e005      	b.n	801eb72 <get_http_param_value+0xf6>
			//ret[strlen((int8*)ret)] = 0;
			//printf("len=%d\r\n",len);
		}
		else
		{
			ret[0] = 0;
 801eb66:	69fb      	ldr	r3, [r7, #28]
 801eb68:	2200      	movs	r2, #0
 801eb6a:	701a      	strb	r2, [r3, #0]
 801eb6c:	e001      	b.n	801eb72 <get_http_param_value+0xf6>
		}
	}
	else
	{
		return 0;
 801eb6e:	2300      	movs	r3, #0
 801eb70:	e000      	b.n	801eb74 <get_http_param_value+0xf8>
	}
#ifdef _HTTPPARSER_DEBUG_
	printf("  %s=%s\r\n", param_name, ret);
#endif
	return ret;
 801eb72:	69fb      	ldr	r3, [r7, #28]
}
 801eb74:	4618      	mov	r0, r3
 801eb76:	3728      	adds	r7, #40	; 0x28
 801eb78:	46bd      	mov	sp, r7
 801eb7a:	bd80      	pop	{r7, pc}
 801eb7c:	200009f8 	.word	0x200009f8
 801eb80:	08033608 	.word	0x08033608
 801eb84:	0803360c 	.word	0x0803360c
 801eb88:	080334d8 	.word	0x080334d8

0801eb8c <get_http_uri_name>:
	return uri_name;
}
#else

uint8_t get_http_uri_name(uint8_t * uri, uint8_t * uri_buf)
{
 801eb8c:	b580      	push	{r7, lr}
 801eb8e:	b084      	sub	sp, #16
 801eb90:	af00      	add	r7, sp, #0
 801eb92:	6078      	str	r0, [r7, #4]
 801eb94:	6039      	str	r1, [r7, #0]
	uint8_t * uri_ptr;
	if(!uri) return 0;
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d101      	bne.n	801eba0 <get_http_uri_name+0x14>
 801eb9c:	2300      	movs	r3, #0
 801eb9e:	e017      	b.n	801ebd0 <get_http_uri_name+0x44>

	strcpy((char *)uri_buf, (char *)uri);
 801eba0:	6879      	ldr	r1, [r7, #4]
 801eba2:	6838      	ldr	r0, [r7, #0]
 801eba4:	f00f f94f 	bl	802de46 <strcpy>

	uri_ptr = (uint8_t *)strtok((char *)uri_buf, " ?");
 801eba8:	490b      	ldr	r1, [pc, #44]	; (801ebd8 <get_http_uri_name+0x4c>)
 801ebaa:	6838      	ldr	r0, [r7, #0]
 801ebac:	f00e fffc 	bl	802dba8 <strtok>
 801ebb0:	60f8      	str	r0, [r7, #12]

	if(strcmp((char *)uri_ptr,"/")) uri_ptr++;
 801ebb2:	490a      	ldr	r1, [pc, #40]	; (801ebdc <get_http_uri_name+0x50>)
 801ebb4:	68f8      	ldr	r0, [r7, #12]
 801ebb6:	f7f1 fb13 	bl	80101e0 <strcmp>
 801ebba:	4603      	mov	r3, r0
 801ebbc:	2b00      	cmp	r3, #0
 801ebbe:	d002      	beq.n	801ebc6 <get_http_uri_name+0x3a>
 801ebc0:	68fb      	ldr	r3, [r7, #12]
 801ebc2:	3301      	adds	r3, #1
 801ebc4:	60fb      	str	r3, [r7, #12]
	strcpy((char *)uri_buf, (char *)uri_ptr);
 801ebc6:	68f9      	ldr	r1, [r7, #12]
 801ebc8:	6838      	ldr	r0, [r7, #0]
 801ebca:	f00f f93c 	bl	802de46 <strcpy>

#ifdef _HTTPPARSER_DEBUG_
	printf("  uri_name = %s\r\n", uri_buf);
#endif

	return 1;
 801ebce:	2301      	movs	r3, #1
}
 801ebd0:	4618      	mov	r0, r3
 801ebd2:	3710      	adds	r7, #16
 801ebd4:	46bd      	mov	sp, r7
 801ebd6:	bd80      	pop	{r7, pc}
 801ebd8:	08033620 	.word	0x08033620
 801ebdc:	08033624 	.word	0x08033624

0801ebe0 <ATOI>:
*/
uint16_t ATOI(
	uint8_t * str,	/**< is a pointer to convert */
	uint8_t base	/**< is a base value (must be in the range 2 - 16) */
	)
{
 801ebe0:	b590      	push	{r4, r7, lr}
 801ebe2:	b085      	sub	sp, #20
 801ebe4:	af00      	add	r7, sp, #0
 801ebe6:	6078      	str	r0, [r7, #4]
 801ebe8:	460b      	mov	r3, r1
 801ebea:	70fb      	strb	r3, [r7, #3]
        unsigned int num = 0;
 801ebec:	2300      	movs	r3, #0
 801ebee:	60fb      	str	r3, [r7, #12]
// debug_2013_11_25
//        while (*str !=0)
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801ebf0:	e00d      	b.n	801ec0e <ATOI+0x2e>
                num = num * base + C2D(*str++);
 801ebf2:	78fb      	ldrb	r3, [r7, #3]
 801ebf4:	68fa      	ldr	r2, [r7, #12]
 801ebf6:	fb02 f403 	mul.w	r4, r2, r3
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	1c5a      	adds	r2, r3, #1
 801ebfe:	607a      	str	r2, [r7, #4]
 801ec00:	781b      	ldrb	r3, [r3, #0]
 801ec02:	4618      	mov	r0, r3
 801ec04:	f000 f843 	bl	801ec8e <C2D>
 801ec08:	4603      	mov	r3, r0
 801ec0a:	4423      	add	r3, r4
 801ec0c:	60fb      	str	r3, [r7, #12]
        while ((*str !=0) && (*str != 0x20)) // not include the space(0x020)
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	781b      	ldrb	r3, [r3, #0]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	d003      	beq.n	801ec1e <ATOI+0x3e>
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	781b      	ldrb	r3, [r3, #0]
 801ec1a:	2b20      	cmp	r3, #32
 801ec1c:	d1e9      	bne.n	801ebf2 <ATOI+0x12>
	return num;
 801ec1e:	68fb      	ldr	r3, [r7, #12]
 801ec20:	b29b      	uxth	r3, r3
}
 801ec22:	4618      	mov	r0, r3
 801ec24:	3714      	adds	r7, #20
 801ec26:	46bd      	mov	sp, r7
 801ec28:	bd90      	pop	{r4, r7, pc}

0801ec2a <mid>:
 * @param s2 The end string to be researched
 * @param sub The string between s1 and s2
 * @return The length value atfer working
 */
int8_t mid(char* src, char* s1, char* s2, char* sub)
{
 801ec2a:	b580      	push	{r7, lr}
 801ec2c:	b088      	sub	sp, #32
 801ec2e:	af00      	add	r7, sp, #0
 801ec30:	60f8      	str	r0, [r7, #12]
 801ec32:	60b9      	str	r1, [r7, #8]
 801ec34:	607a      	str	r2, [r7, #4]
 801ec36:	603b      	str	r3, [r7, #0]
	char* sub1;
	char* sub2;
	uint16_t n;

	sub1=strstr((char*)src,(char*)s1);
 801ec38:	68b9      	ldr	r1, [r7, #8]
 801ec3a:	68f8      	ldr	r0, [r7, #12]
 801ec3c:	f00f f810 	bl	802dc60 <strstr>
 801ec40:	61f8      	str	r0, [r7, #28]
	if (sub1 == 0) return -1;
 801ec42:	69fb      	ldr	r3, [r7, #28]
 801ec44:	2b00      	cmp	r3, #0
 801ec46:	d102      	bne.n	801ec4e <mid+0x24>
 801ec48:	f04f 33ff 	mov.w	r3, #4294967295
 801ec4c:	e01b      	b.n	801ec86 <mid+0x5c>
	sub1+=strlen((char*)s1);
 801ec4e:	68b8      	ldr	r0, [r7, #8]
 801ec50:	f7f1 fb26 	bl	80102a0 <strlen>
 801ec54:	4602      	mov	r2, r0
 801ec56:	69fb      	ldr	r3, [r7, #28]
 801ec58:	4413      	add	r3, r2
 801ec5a:	61fb      	str	r3, [r7, #28]
	sub2=strstr((char*)sub1,(char*)s2);
 801ec5c:	6879      	ldr	r1, [r7, #4]
 801ec5e:	69f8      	ldr	r0, [r7, #28]
 801ec60:	f00e fffe 	bl	802dc60 <strstr>
 801ec64:	61b8      	str	r0, [r7, #24]

	n=sub2-sub1;
 801ec66:	69ba      	ldr	r2, [r7, #24]
 801ec68:	69fb      	ldr	r3, [r7, #28]
 801ec6a:	1ad3      	subs	r3, r2, r3
 801ec6c:	82fb      	strh	r3, [r7, #22]
	strncpy((char*)sub,(char*)sub1,n);
 801ec6e:	8afb      	ldrh	r3, [r7, #22]
 801ec70:	461a      	mov	r2, r3
 801ec72:	69f9      	ldr	r1, [r7, #28]
 801ec74:	6838      	ldr	r0, [r7, #0]
 801ec76:	f00e ff73 	bl	802db60 <strncpy>
	sub[n]='\0';
 801ec7a:	8afb      	ldrh	r3, [r7, #22]
 801ec7c:	683a      	ldr	r2, [r7, #0]
 801ec7e:	4413      	add	r3, r2
 801ec80:	2200      	movs	r2, #0
 801ec82:	701a      	strb	r2, [r3, #0]
	return 0;
 801ec84:	2300      	movs	r3, #0
}
 801ec86:	4618      	mov	r0, r3
 801ec88:	3720      	adds	r7, #32
 801ec8a:	46bd      	mov	sp, r7
 801ec8c:	bd80      	pop	{r7, pc}

0801ec8e <C2D>:
This function converts HEX(0-F) to a character
*/
static uint8_t C2D(
		uint8_t c	/**< is a character('0'-'F') to convert to HEX */
	)
{
 801ec8e:	b480      	push	{r7}
 801ec90:	b083      	sub	sp, #12
 801ec92:	af00      	add	r7, sp, #0
 801ec94:	4603      	mov	r3, r0
 801ec96:	71fb      	strb	r3, [r7, #7]
	if (c >= '0' && c <= '9')
 801ec98:	79fb      	ldrb	r3, [r7, #7]
 801ec9a:	2b2f      	cmp	r3, #47	; 0x2f
 801ec9c:	d906      	bls.n	801ecac <C2D+0x1e>
 801ec9e:	79fb      	ldrb	r3, [r7, #7]
 801eca0:	2b39      	cmp	r3, #57	; 0x39
 801eca2:	d803      	bhi.n	801ecac <C2D+0x1e>
		return c - '0';
 801eca4:	79fb      	ldrb	r3, [r7, #7]
 801eca6:	3b30      	subs	r3, #48	; 0x30
 801eca8:	b2db      	uxtb	r3, r3
 801ecaa:	e014      	b.n	801ecd6 <C2D+0x48>
	if (c >= 'a' && c <= 'f')
 801ecac:	79fb      	ldrb	r3, [r7, #7]
 801ecae:	2b60      	cmp	r3, #96	; 0x60
 801ecb0:	d906      	bls.n	801ecc0 <C2D+0x32>
 801ecb2:	79fb      	ldrb	r3, [r7, #7]
 801ecb4:	2b66      	cmp	r3, #102	; 0x66
 801ecb6:	d803      	bhi.n	801ecc0 <C2D+0x32>
		return 10 + c -'a';
 801ecb8:	79fb      	ldrb	r3, [r7, #7]
 801ecba:	3b57      	subs	r3, #87	; 0x57
 801ecbc:	b2db      	uxtb	r3, r3
 801ecbe:	e00a      	b.n	801ecd6 <C2D+0x48>
	if (c >= 'A' && c <= 'F')
 801ecc0:	79fb      	ldrb	r3, [r7, #7]
 801ecc2:	2b40      	cmp	r3, #64	; 0x40
 801ecc4:	d906      	bls.n	801ecd4 <C2D+0x46>
 801ecc6:	79fb      	ldrb	r3, [r7, #7]
 801ecc8:	2b46      	cmp	r3, #70	; 0x46
 801ecca:	d803      	bhi.n	801ecd4 <C2D+0x46>
		return 10 + c -'A';
 801eccc:	79fb      	ldrb	r3, [r7, #7]
 801ecce:	3b37      	subs	r3, #55	; 0x37
 801ecd0:	b2db      	uxtb	r3, r3
 801ecd2:	e000      	b.n	801ecd6 <C2D+0x48>

	return (char)c;
 801ecd4:	79fb      	ldrb	r3, [r7, #7]
}
 801ecd6:	4618      	mov	r0, r3
 801ecd8:	370c      	adds	r7, #12
 801ecda:	46bd      	mov	sp, r7
 801ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ece0:	4770      	bx	lr

0801ece2 <default_mcu_reset>:

/*****************************************************************************
 * Public functions
 ****************************************************************************/
// Callback functions definition: MCU Reset / WDT Reset
void default_mcu_reset(void) {;}
 801ece2:	b480      	push	{r7}
 801ece4:	af00      	add	r7, sp, #0
 801ece6:	bf00      	nop
 801ece8:	46bd      	mov	sp, r7
 801ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecee:	4770      	bx	lr

0801ecf0 <default_function>:
void default_wdt_reset(void) {;}
void default_function(void)  {;}
 801ecf0:	b480      	push	{r7}
 801ecf2:	af00      	add	r7, sp, #0
 801ecf4:	bf00      	nop
 801ecf6:	46bd      	mov	sp, r7
 801ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecfc:	4770      	bx	lr
	...

0801ed00 <httpServer_Sockinit>:

	if (delay_function) delay_os_ms = delay_function;
}

void httpServer_Sockinit(uint8_t cnt, uint8_t * socklist)
{
 801ed00:	b480      	push	{r7}
 801ed02:	b085      	sub	sp, #20
 801ed04:	af00      	add	r7, sp, #0
 801ed06:	4603      	mov	r3, r0
 801ed08:	6039      	str	r1, [r7, #0]
 801ed0a:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < cnt; i++)
 801ed0c:	2300      	movs	r3, #0
 801ed0e:	73fb      	strb	r3, [r7, #15]
 801ed10:	e009      	b.n	801ed26 <httpServer_Sockinit+0x26>
	{
		// Mapping the H/W socket numbers to the sequential index numbers
		HTTPSock_Num[i] = socklist[i];
 801ed12:	7bfb      	ldrb	r3, [r7, #15]
 801ed14:	683a      	ldr	r2, [r7, #0]
 801ed16:	441a      	add	r2, r3
 801ed18:	7bfb      	ldrb	r3, [r7, #15]
 801ed1a:	7811      	ldrb	r1, [r2, #0]
 801ed1c:	4a07      	ldr	r2, [pc, #28]	; (801ed3c <httpServer_Sockinit+0x3c>)
 801ed1e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < cnt; i++)
 801ed20:	7bfb      	ldrb	r3, [r7, #15]
 801ed22:	3301      	adds	r3, #1
 801ed24:	73fb      	strb	r3, [r7, #15]
 801ed26:	7bfa      	ldrb	r2, [r7, #15]
 801ed28:	79fb      	ldrb	r3, [r7, #7]
 801ed2a:	429a      	cmp	r2, r3
 801ed2c:	d3f1      	bcc.n	801ed12 <httpServer_Sockinit+0x12>
	}
}
 801ed2e:	bf00      	nop
 801ed30:	bf00      	nop
 801ed32:	3714      	adds	r7, #20
 801ed34:	46bd      	mov	sp, r7
 801ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed3a:	4770      	bx	lr
 801ed3c:	200011f8 	.word	0x200011f8

0801ed40 <getHTTPSocketNum>:

static uint8_t getHTTPSocketNum(uint8_t seqnum)
{
 801ed40:	b480      	push	{r7}
 801ed42:	b083      	sub	sp, #12
 801ed44:	af00      	add	r7, sp, #0
 801ed46:	4603      	mov	r3, r0
 801ed48:	71fb      	strb	r3, [r7, #7]
	// Return the 'H/W socket number' corresponding to the index number
	return HTTPSock_Num[seqnum];
 801ed4a:	79fb      	ldrb	r3, [r7, #7]
 801ed4c:	4a03      	ldr	r2, [pc, #12]	; (801ed5c <getHTTPSocketNum+0x1c>)
 801ed4e:	5cd3      	ldrb	r3, [r2, r3]
}
 801ed50:	4618      	mov	r0, r3
 801ed52:	370c      	adds	r7, #12
 801ed54:	46bd      	mov	sp, r7
 801ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed5a:	4770      	bx	lr
 801ed5c:	200011f8 	.word	0x200011f8

0801ed60 <getHTTPSequenceNum>:

static int8_t getHTTPSequenceNum(uint8_t socket)
{
 801ed60:	b480      	push	{r7}
 801ed62:	b085      	sub	sp, #20
 801ed64:	af00      	add	r7, sp, #0
 801ed66:	4603      	mov	r3, r0
 801ed68:	71fb      	strb	r3, [r7, #7]
	uint8_t i;

	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ed6a:	2300      	movs	r3, #0
 801ed6c:	73fb      	strb	r3, [r7, #15]
 801ed6e:	e00b      	b.n	801ed88 <getHTTPSequenceNum+0x28>
		if(HTTPSock_Num[i] == socket) return i;
 801ed70:	7bfb      	ldrb	r3, [r7, #15]
 801ed72:	4a0b      	ldr	r2, [pc, #44]	; (801eda0 <getHTTPSequenceNum+0x40>)
 801ed74:	5cd3      	ldrb	r3, [r2, r3]
 801ed76:	79fa      	ldrb	r2, [r7, #7]
 801ed78:	429a      	cmp	r2, r3
 801ed7a:	d102      	bne.n	801ed82 <getHTTPSequenceNum+0x22>
 801ed7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ed80:	e007      	b.n	801ed92 <getHTTPSequenceNum+0x32>
	for(i = 0; i < _WIZCHIP_SOCK_NUM_; i++)
 801ed82:	7bfb      	ldrb	r3, [r7, #15]
 801ed84:	3301      	adds	r3, #1
 801ed86:	73fb      	strb	r3, [r7, #15]
 801ed88:	7bfb      	ldrb	r3, [r7, #15]
 801ed8a:	2b07      	cmp	r3, #7
 801ed8c:	d9f0      	bls.n	801ed70 <getHTTPSequenceNum+0x10>

	return -1;
 801ed8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ed92:	4618      	mov	r0, r3
 801ed94:	3714      	adds	r7, #20
 801ed96:	46bd      	mov	sp, r7
 801ed98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed9c:	4770      	bx	lr
 801ed9e:	bf00      	nop
 801eda0:	200011f8 	.word	0x200011f8

0801eda4 <httpServer_init>:

void httpServer_init(uint8_t * tx_buf, uint8_t * rx_buf, uint8_t cnt, uint8_t * socklist)
{
 801eda4:	b580      	push	{r7, lr}
 801eda6:	b084      	sub	sp, #16
 801eda8:	af00      	add	r7, sp, #0
 801edaa:	60f8      	str	r0, [r7, #12]
 801edac:	60b9      	str	r1, [r7, #8]
 801edae:	603b      	str	r3, [r7, #0]
 801edb0:	4613      	mov	r3, r2
 801edb2:	71fb      	strb	r3, [r7, #7]
	// User's shared buffer
	pHTTP_TX = tx_buf;
 801edb4:	4a07      	ldr	r2, [pc, #28]	; (801edd4 <httpServer_init+0x30>)
 801edb6:	68fb      	ldr	r3, [r7, #12]
 801edb8:	6013      	str	r3, [r2, #0]
	pHTTP_RX = rx_buf;
 801edba:	4a07      	ldr	r2, [pc, #28]	; (801edd8 <httpServer_init+0x34>)
 801edbc:	68bb      	ldr	r3, [r7, #8]
 801edbe:	6013      	str	r3, [r2, #0]

	// H/W Socket number mapping
	httpServer_Sockinit(cnt, socklist);
 801edc0:	79fb      	ldrb	r3, [r7, #7]
 801edc2:	6839      	ldr	r1, [r7, #0]
 801edc4:	4618      	mov	r0, r3
 801edc6:	f7ff ff9b 	bl	801ed00 <httpServer_Sockinit>
}
 801edca:	bf00      	nop
 801edcc:	3710      	adds	r7, #16
 801edce:	46bd      	mov	sp, r7
 801edd0:	bd80      	pop	{r7, pc}
 801edd2:	bf00      	nop
 801edd4:	200012d8 	.word	0x200012d8
 801edd8:	200012dc 	.word	0x200012dc

0801eddc <httpServer_run>:
	if(wdt_reset) HTTPServer_WDT_Reset = wdt_reset;
}


void httpServer_run(uint8_t seqnum)
{
 801eddc:	b590      	push	{r4, r7, lr}
 801edde:	b089      	sub	sp, #36	; 0x24
 801ede0:	af02      	add	r7, sp, #8
 801ede2:	4603      	mov	r3, r0
 801ede4:	71fb      	strb	r3, [r7, #7]
	uint8_t s;	// socket number
	uint16_t len;
	uint32_t gettime = 0;
 801ede6:	2300      	movs	r3, #0
 801ede8:	613b      	str	r3, [r7, #16]
#ifdef _HTTPSERVER_DEBUG_
	uint8_t destip[4] = {0, };
	uint16_t destport = 0;
#endif

	http_request = (st_http_request *)pHTTP_RX;		// Structure of HTTP Request
 801edea:	4bb4      	ldr	r3, [pc, #720]	; (801f0bc <httpServer_run+0x2e0>)
 801edec:	681b      	ldr	r3, [r3, #0]
 801edee:	4ab4      	ldr	r2, [pc, #720]	; (801f0c0 <httpServer_run+0x2e4>)
 801edf0:	6013      	str	r3, [r2, #0]
	parsed_http_request = (st_http_request *)pHTTP_TX;
 801edf2:	4bb4      	ldr	r3, [pc, #720]	; (801f0c4 <httpServer_run+0x2e8>)
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	4ab4      	ldr	r2, [pc, #720]	; (801f0c8 <httpServer_run+0x2ec>)
 801edf8:	6013      	str	r3, [r2, #0]

	// Get the H/W socket number
	s = getHTTPSocketNum(seqnum);
 801edfa:	79fb      	ldrb	r3, [r7, #7]
 801edfc:	4618      	mov	r0, r3
 801edfe:	f7ff ff9f 	bl	801ed40 <getHTTPSocketNum>
 801ee02:	4603      	mov	r3, r0
 801ee04:	73fb      	strb	r3, [r7, #15]

	/* HTTP Service Start */
	debug = getSn_SR(s);
 801ee06:	7bfb      	ldrb	r3, [r7, #15]
 801ee08:	009b      	lsls	r3, r3, #2
 801ee0a:	3301      	adds	r3, #1
 801ee0c:	00db      	lsls	r3, r3, #3
 801ee0e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ee12:	4618      	mov	r0, r3
 801ee14:	f7f9 fd44 	bl	80188a0 <WIZCHIP_READ>
 801ee18:	4603      	mov	r3, r0
 801ee1a:	81bb      	strh	r3, [r7, #12]
	switch(getSn_SR(s))
 801ee1c:	7bfb      	ldrb	r3, [r7, #15]
 801ee1e:	009b      	lsls	r3, r3, #2
 801ee20:	3301      	adds	r3, #1
 801ee22:	00db      	lsls	r3, r3, #3
 801ee24:	f503 7340 	add.w	r3, r3, #768	; 0x300
 801ee28:	4618      	mov	r0, r3
 801ee2a:	f7f9 fd39 	bl	80188a0 <WIZCHIP_READ>
 801ee2e:	4603      	mov	r3, r0
 801ee30:	2b1c      	cmp	r3, #28
 801ee32:	f200 813e 	bhi.w	801f0b2 <httpServer_run+0x2d6>
 801ee36:	a201      	add	r2, pc, #4	; (adr r2, 801ee3c <httpServer_run+0x60>)
 801ee38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ee3c:	0801f09b 	.word	0x0801f09b
 801ee40:	0801f0b3 	.word	0x0801f0b3
 801ee44:	0801f0b3 	.word	0x0801f0b3
 801ee48:	0801f0b3 	.word	0x0801f0b3
 801ee4c:	0801f0b3 	.word	0x0801f0b3
 801ee50:	0801f0b3 	.word	0x0801f0b3
 801ee54:	0801f0b3 	.word	0x0801f0b3
 801ee58:	0801f0b3 	.word	0x0801f0b3
 801ee5c:	0801f0b3 	.word	0x0801f0b3
 801ee60:	0801f0b3 	.word	0x0801f0b3
 801ee64:	0801f0b3 	.word	0x0801f0b3
 801ee68:	0801f0b3 	.word	0x0801f0b3
 801ee6c:	0801f0b3 	.word	0x0801f0b3
 801ee70:	0801f0b3 	.word	0x0801f0b3
 801ee74:	0801f0b3 	.word	0x0801f0b3
 801ee78:	0801f0b3 	.word	0x0801f0b3
 801ee7c:	0801f0b3 	.word	0x0801f0b3
 801ee80:	0801f0b3 	.word	0x0801f0b3
 801ee84:	0801f0b3 	.word	0x0801f0b3
 801ee88:	0801f0a9 	.word	0x0801f0a9
 801ee8c:	0801f0b3 	.word	0x0801f0b3
 801ee90:	0801f0b3 	.word	0x0801f0b3
 801ee94:	0801f0b3 	.word	0x0801f0b3
 801ee98:	0801eeb1 	.word	0x0801eeb1
 801ee9c:	0801f0b3 	.word	0x0801f0b3
 801eea0:	0801f0b3 	.word	0x0801f0b3
 801eea4:	0801f0b3 	.word	0x0801f0b3
 801eea8:	0801f0b3 	.word	0x0801f0b3
 801eeac:	0801f091 	.word	0x0801f091
	{
		case SOCK_ESTABLISHED:
			// Interrupt clear
			if(getSn_IR(s) & Sn_IR_CON)
 801eeb0:	7bfb      	ldrb	r3, [r7, #15]
 801eeb2:	009b      	lsls	r3, r3, #2
 801eeb4:	3301      	adds	r3, #1
 801eeb6:	00db      	lsls	r3, r3, #3
 801eeb8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801eebc:	4618      	mov	r0, r3
 801eebe:	f7f9 fcef 	bl	80188a0 <WIZCHIP_READ>
 801eec2:	4603      	mov	r3, r0
 801eec4:	f003 0301 	and.w	r3, r3, #1
 801eec8:	2b00      	cmp	r3, #0
 801eeca:	d009      	beq.n	801eee0 <httpServer_run+0x104>
			{
				setSn_IR(s, Sn_IR_CON);
 801eecc:	7bfb      	ldrb	r3, [r7, #15]
 801eece:	009b      	lsls	r3, r3, #2
 801eed0:	3301      	adds	r3, #1
 801eed2:	00db      	lsls	r3, r3, #3
 801eed4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801eed8:	2101      	movs	r1, #1
 801eeda:	4618      	mov	r0, r3
 801eedc:	f7f9 fd2c 	bl	8018938 <WIZCHIP_WRITE>
			}

			// HTTP Process states
			switch(HTTPSock_Status[seqnum].sock_status)
 801eee0:	79fa      	ldrb	r2, [r7, #7]
 801eee2:	497a      	ldr	r1, [pc, #488]	; (801f0cc <httpServer_run+0x2f0>)
 801eee4:	4613      	mov	r3, r2
 801eee6:	011b      	lsls	r3, r3, #4
 801eee8:	4413      	add	r3, r2
 801eeea:	009b      	lsls	r3, r3, #2
 801eeec:	440b      	add	r3, r1
 801eeee:	781b      	ldrb	r3, [r3, #0]
 801eef0:	2b04      	cmp	r3, #4
 801eef2:	f000 809b 	beq.w	801f02c <httpServer_run+0x250>
 801eef6:	2b04      	cmp	r3, #4
 801eef8:	f300 80c4 	bgt.w	801f084 <httpServer_run+0x2a8>
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	d002      	beq.n	801ef06 <httpServer_run+0x12a>
 801ef00:	2b03      	cmp	r3, #3
 801ef02:	d06e      	beq.n	801efe2 <httpServer_run+0x206>
#endif
					http_disconnect(s);
					break;

				default :
					break;
 801ef04:	e0be      	b.n	801f084 <httpServer_run+0x2a8>
					if ((len = getSn_RX_RSR(s)) > 0)
 801ef06:	7bfb      	ldrb	r3, [r7, #15]
 801ef08:	4618      	mov	r0, r3
 801ef0a:	f7f9 fe6e 	bl	8018bea <getSn_RX_RSR>
 801ef0e:	4603      	mov	r3, r0
 801ef10:	82fb      	strh	r3, [r7, #22]
 801ef12:	8afb      	ldrh	r3, [r7, #22]
 801ef14:	2b00      	cmp	r3, #0
 801ef16:	f000 80b7 	beq.w	801f088 <httpServer_run+0x2ac>
						if (len > DATA_BUF_SIZE) len = DATA_BUF_SIZE;
 801ef1a:	8afb      	ldrh	r3, [r7, #22]
 801ef1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ef20:	d902      	bls.n	801ef28 <httpServer_run+0x14c>
 801ef22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ef26:	82fb      	strh	r3, [r7, #22]
						len = recv(s, (uint8_t *)http_request, len);
 801ef28:	4b65      	ldr	r3, [pc, #404]	; (801f0c0 <httpServer_run+0x2e4>)
 801ef2a:	6819      	ldr	r1, [r3, #0]
 801ef2c:	8afa      	ldrh	r2, [r7, #22]
 801ef2e:	7bfb      	ldrb	r3, [r7, #15]
 801ef30:	4618      	mov	r0, r3
 801ef32:	f7fa fbcd 	bl	80196d0 <recv>
 801ef36:	4603      	mov	r3, r0
 801ef38:	82fb      	strh	r3, [r7, #22]
						*(((uint8_t *)http_request) + len) = '\0';
 801ef3a:	4b61      	ldr	r3, [pc, #388]	; (801f0c0 <httpServer_run+0x2e4>)
 801ef3c:	681a      	ldr	r2, [r3, #0]
 801ef3e:	8afb      	ldrh	r3, [r7, #22]
 801ef40:	4413      	add	r3, r2
 801ef42:	2200      	movs	r2, #0
 801ef44:	701a      	strb	r2, [r3, #0]
						parse_http_request(parsed_http_request, (uint8_t *)http_request);
 801ef46:	4b60      	ldr	r3, [pc, #384]	; (801f0c8 <httpServer_run+0x2ec>)
 801ef48:	681b      	ldr	r3, [r3, #0]
 801ef4a:	4a5d      	ldr	r2, [pc, #372]	; (801f0c0 <httpServer_run+0x2e4>)
 801ef4c:	6812      	ldr	r2, [r2, #0]
 801ef4e:	4611      	mov	r1, r2
 801ef50:	4618      	mov	r0, r3
 801ef52:	f7ff fd13 	bl	801e97c <parse_http_request>
						http_process_handler(s, parsed_http_request);
 801ef56:	4b5c      	ldr	r3, [pc, #368]	; (801f0c8 <httpServer_run+0x2ec>)
 801ef58:	681a      	ldr	r2, [r3, #0]
 801ef5a:	7bfb      	ldrb	r3, [r7, #15]
 801ef5c:	4611      	mov	r1, r2
 801ef5e:	4618      	mov	r0, r3
 801ef60:	f000 fac4 	bl	801f4ec <http_process_handler>
						gettime = get_httpServer_timecount();
 801ef64:	f000 fd04 	bl	801f970 <get_httpServer_timecount>
 801ef68:	6138      	str	r0, [r7, #16]
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ef6a:	e006      	b.n	801ef7a <httpServer_run+0x19e>
							if((get_httpServer_timecount() - gettime) > 3)
 801ef6c:	f000 fd00 	bl	801f970 <get_httpServer_timecount>
 801ef70:	4602      	mov	r2, r0
 801ef72:	693b      	ldr	r3, [r7, #16]
 801ef74:	1ad3      	subs	r3, r2, r3
 801ef76:	2b03      	cmp	r3, #3
 801ef78:	d813      	bhi.n	801efa2 <httpServer_run+0x1c6>
						while(getSn_TX_FSR(s) != (getSn_TxMAX(s)))
 801ef7a:	7bfb      	ldrb	r3, [r7, #15]
 801ef7c:	4618      	mov	r0, r3
 801ef7e:	f7f9 fde9 	bl	8018b54 <getSn_TX_FSR>
 801ef82:	4603      	mov	r3, r0
 801ef84:	461c      	mov	r4, r3
 801ef86:	7bfb      	ldrb	r3, [r7, #15]
 801ef88:	009b      	lsls	r3, r3, #2
 801ef8a:	3301      	adds	r3, #1
 801ef8c:	00db      	lsls	r3, r3, #3
 801ef8e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 801ef92:	4618      	mov	r0, r3
 801ef94:	f7f9 fc84 	bl	80188a0 <WIZCHIP_READ>
 801ef98:	4603      	mov	r3, r0
 801ef9a:	029b      	lsls	r3, r3, #10
 801ef9c:	429c      	cmp	r4, r3
 801ef9e:	d1e5      	bne.n	801ef6c <httpServer_run+0x190>
 801efa0:	e000      	b.n	801efa4 <httpServer_run+0x1c8>
								break;
 801efa2:	bf00      	nop
						if(HTTPSock_Status[seqnum].file_len > 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_INPROC;
 801efa4:	79fa      	ldrb	r2, [r7, #7]
 801efa6:	4949      	ldr	r1, [pc, #292]	; (801f0cc <httpServer_run+0x2f0>)
 801efa8:	4613      	mov	r3, r2
 801efaa:	011b      	lsls	r3, r3, #4
 801efac:	4413      	add	r3, r2
 801efae:	009b      	lsls	r3, r3, #2
 801efb0:	440b      	add	r3, r1
 801efb2:	3338      	adds	r3, #56	; 0x38
 801efb4:	681b      	ldr	r3, [r3, #0]
 801efb6:	2b00      	cmp	r3, #0
 801efb8:	d009      	beq.n	801efce <httpServer_run+0x1f2>
 801efba:	79fa      	ldrb	r2, [r7, #7]
 801efbc:	4943      	ldr	r1, [pc, #268]	; (801f0cc <httpServer_run+0x2f0>)
 801efbe:	4613      	mov	r3, r2
 801efc0:	011b      	lsls	r3, r3, #4
 801efc2:	4413      	add	r3, r2
 801efc4:	009b      	lsls	r3, r3, #2
 801efc6:	440b      	add	r3, r1
 801efc8:	2203      	movs	r2, #3
 801efca:	701a      	strb	r2, [r3, #0]
					break;
 801efcc:	e05c      	b.n	801f088 <httpServer_run+0x2ac>
						else HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE; // Send the 'HTTP response' end
 801efce:	79fa      	ldrb	r2, [r7, #7]
 801efd0:	493e      	ldr	r1, [pc, #248]	; (801f0cc <httpServer_run+0x2f0>)
 801efd2:	4613      	mov	r3, r2
 801efd4:	011b      	lsls	r3, r3, #4
 801efd6:	4413      	add	r3, r2
 801efd8:	009b      	lsls	r3, r3, #2
 801efda:	440b      	add	r3, r1
 801efdc:	2204      	movs	r2, #4
 801efde:	701a      	strb	r2, [r3, #0]
					break;
 801efe0:	e052      	b.n	801f088 <httpServer_run+0x2ac>
					send_http_response_body(s, HTTPSock_Status[seqnum].file_name, http_response, 0, 0);
 801efe2:	79fa      	ldrb	r2, [r7, #7]
 801efe4:	4613      	mov	r3, r2
 801efe6:	011b      	lsls	r3, r3, #4
 801efe8:	4413      	add	r3, r2
 801efea:	009b      	lsls	r3, r3, #2
 801efec:	4a37      	ldr	r2, [pc, #220]	; (801f0cc <httpServer_run+0x2f0>)
 801efee:	4413      	add	r3, r2
 801eff0:	1c59      	adds	r1, r3, #1
 801eff2:	4b37      	ldr	r3, [pc, #220]	; (801f0d0 <httpServer_run+0x2f4>)
 801eff4:	681a      	ldr	r2, [r3, #0]
 801eff6:	7bf8      	ldrb	r0, [r7, #15]
 801eff8:	2300      	movs	r3, #0
 801effa:	9300      	str	r3, [sp, #0]
 801effc:	2300      	movs	r3, #0
 801effe:	f000 f8d5 	bl	801f1ac <send_http_response_body>
					if(HTTPSock_Status[seqnum].file_len == 0) HTTPSock_Status[seqnum].sock_status = STATE_HTTP_RES_DONE;
 801f002:	79fa      	ldrb	r2, [r7, #7]
 801f004:	4931      	ldr	r1, [pc, #196]	; (801f0cc <httpServer_run+0x2f0>)
 801f006:	4613      	mov	r3, r2
 801f008:	011b      	lsls	r3, r3, #4
 801f00a:	4413      	add	r3, r2
 801f00c:	009b      	lsls	r3, r3, #2
 801f00e:	440b      	add	r3, r1
 801f010:	3338      	adds	r3, #56	; 0x38
 801f012:	681b      	ldr	r3, [r3, #0]
 801f014:	2b00      	cmp	r3, #0
 801f016:	d139      	bne.n	801f08c <httpServer_run+0x2b0>
 801f018:	79fa      	ldrb	r2, [r7, #7]
 801f01a:	492c      	ldr	r1, [pc, #176]	; (801f0cc <httpServer_run+0x2f0>)
 801f01c:	4613      	mov	r3, r2
 801f01e:	011b      	lsls	r3, r3, #4
 801f020:	4413      	add	r3, r2
 801f022:	009b      	lsls	r3, r3, #2
 801f024:	440b      	add	r3, r1
 801f026:	2204      	movs	r2, #4
 801f028:	701a      	strb	r2, [r3, #0]
					break;
 801f02a:	e02f      	b.n	801f08c <httpServer_run+0x2b0>
					HTTPSock_Status[seqnum].file_len = 0;
 801f02c:	79fa      	ldrb	r2, [r7, #7]
 801f02e:	4927      	ldr	r1, [pc, #156]	; (801f0cc <httpServer_run+0x2f0>)
 801f030:	4613      	mov	r3, r2
 801f032:	011b      	lsls	r3, r3, #4
 801f034:	4413      	add	r3, r2
 801f036:	009b      	lsls	r3, r3, #2
 801f038:	440b      	add	r3, r1
 801f03a:	3338      	adds	r3, #56	; 0x38
 801f03c:	2200      	movs	r2, #0
 801f03e:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_offset = 0;
 801f040:	79fa      	ldrb	r2, [r7, #7]
 801f042:	4922      	ldr	r1, [pc, #136]	; (801f0cc <httpServer_run+0x2f0>)
 801f044:	4613      	mov	r3, r2
 801f046:	011b      	lsls	r3, r3, #4
 801f048:	4413      	add	r3, r2
 801f04a:	009b      	lsls	r3, r3, #2
 801f04c:	440b      	add	r3, r1
 801f04e:	333c      	adds	r3, #60	; 0x3c
 801f050:	2200      	movs	r2, #0
 801f052:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].file_start = 0;
 801f054:	79fa      	ldrb	r2, [r7, #7]
 801f056:	491d      	ldr	r1, [pc, #116]	; (801f0cc <httpServer_run+0x2f0>)
 801f058:	4613      	mov	r3, r2
 801f05a:	011b      	lsls	r3, r3, #4
 801f05c:	4413      	add	r3, r2
 801f05e:	009b      	lsls	r3, r3, #2
 801f060:	440b      	add	r3, r1
 801f062:	3334      	adds	r3, #52	; 0x34
 801f064:	2200      	movs	r2, #0
 801f066:	601a      	str	r2, [r3, #0]
					HTTPSock_Status[seqnum].sock_status = STATE_HTTP_IDLE;
 801f068:	79fa      	ldrb	r2, [r7, #7]
 801f06a:	4918      	ldr	r1, [pc, #96]	; (801f0cc <httpServer_run+0x2f0>)
 801f06c:	4613      	mov	r3, r2
 801f06e:	011b      	lsls	r3, r3, #4
 801f070:	4413      	add	r3, r2
 801f072:	009b      	lsls	r3, r3, #2
 801f074:	440b      	add	r3, r1
 801f076:	2200      	movs	r2, #0
 801f078:	701a      	strb	r2, [r3, #0]
					http_disconnect(s);
 801f07a:	7bfb      	ldrb	r3, [r7, #15]
 801f07c:	4618      	mov	r0, r3
 801f07e:	f000 fa13 	bl	801f4a8 <http_disconnect>
					break;
 801f082:	e004      	b.n	801f08e <httpServer_run+0x2b2>
					break;
 801f084:	bf00      	nop
 801f086:	e015      	b.n	801f0b4 <httpServer_run+0x2d8>
					break;
 801f088:	bf00      	nop
 801f08a:	e013      	b.n	801f0b4 <httpServer_run+0x2d8>
					break;
 801f08c:	bf00      	nop
			}
			break;
 801f08e:	e011      	b.n	801f0b4 <httpServer_run+0x2d8>

		case SOCK_CLOSE_WAIT:
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : ClOSE_WAIT\r\n", s);	// if a peer requests to close the current connection
#endif
			disconnect(s);
 801f090:	7bfb      	ldrb	r3, [r7, #15]
 801f092:	4618      	mov	r0, r3
 801f094:	f7fa f9ac 	bl	80193f0 <disconnect>
			break;
 801f098:	e00c      	b.n	801f0b4 <httpServer_run+0x2d8>

		case SOCK_CLOSED:
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : CLOSED\r\n", s);
#endif
			if(socket(s, Sn_MR_TCP, HTTP_SERVER_PORT, 0x00) == s)    /* Reinitialize the socket */
 801f09a:	7bf8      	ldrb	r0, [r7, #15]
 801f09c:	2300      	movs	r3, #0
 801f09e:	2250      	movs	r2, #80	; 0x50
 801f0a0:	2101      	movs	r1, #1
 801f0a2:	f7f9 feed 	bl	8018e80 <socket>
//				setsockopt(s, SO_KEEPALIVEAUTO, 0);
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : OPEN\r\n", s);
#endif
			}
			break;
 801f0a6:	e005      	b.n	801f0b4 <httpServer_run+0x2d8>

		case SOCK_INIT:
			listen(s);
 801f0a8:	7bfb      	ldrb	r3, [r7, #15]
 801f0aa:	4618      	mov	r0, r3
 801f0ac:	f7fa f86a 	bl	8019184 <listen>
			break;
 801f0b0:	e000      	b.n	801f0b4 <httpServer_run+0x2d8>

		case SOCK_FIN_WAIT:
			//close(s);
			break;
		default :
			break;
 801f0b2:	bf00      	nop
	} // end of switch

#ifdef _USE_WATCHDOG_
	HTTPServer_WDT_Reset();
#endif
}
 801f0b4:	bf00      	nop
 801f0b6:	371c      	adds	r7, #28
 801f0b8:	46bd      	mov	sp, r7
 801f0ba:	bd90      	pop	{r4, r7, pc}
 801f0bc:	200012dc 	.word	0x200012dc
 801f0c0:	20001200 	.word	0x20001200
 801f0c4:	200012d8 	.word	0x200012d8
 801f0c8:	20001204 	.word	0x20001204
 801f0cc:	200012e4 	.word	0x200012e4
 801f0d0:	20001208 	.word	0x20001208

0801f0d4 <send_http_response_header>:

////////////////////////////////////////////
// Private Functions
////////////////////////////////////////////
static void send_http_response_header(uint8_t s, uint8_t content_type, uint32_t body_len, uint16_t http_status)
{
 801f0d4:	b590      	push	{r4, r7, lr}
 801f0d6:	b083      	sub	sp, #12
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	603a      	str	r2, [r7, #0]
 801f0dc:	461a      	mov	r2, r3
 801f0de:	4603      	mov	r3, r0
 801f0e0:	71fb      	strb	r3, [r7, #7]
 801f0e2:	460b      	mov	r3, r1
 801f0e4:	71bb      	strb	r3, [r7, #6]
 801f0e6:	4613      	mov	r3, r2
 801f0e8:	80bb      	strh	r3, [r7, #4]
	switch(http_status)
 801f0ea:	88bb      	ldrh	r3, [r7, #4]
 801f0ec:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801f0f0:	d029      	beq.n	801f146 <send_http_response_header+0x72>
 801f0f2:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 801f0f6:	dc3a      	bgt.n	801f16e <send_http_response_header+0x9a>
 801f0f8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801f0fc:	d019      	beq.n	801f132 <send_http_response_header+0x5e>
 801f0fe:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 801f102:	dc34      	bgt.n	801f16e <send_http_response_header+0x9a>
 801f104:	2bc8      	cmp	r3, #200	; 0xc8
 801f106:	d003      	beq.n	801f110 <send_http_response_header+0x3c>
 801f108:	f5b3 7f97 	cmp.w	r3, #302	; 0x12e
 801f10c:	d025      	beq.n	801f15a <send_http_response_header+0x86>
			break;
		case STATUS_MV_TEMP:	// HTTP/1.1 302 Not Found
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
			break;
		default:
			break;
 801f10e:	e02e      	b.n	801f16e <send_http_response_header+0x9a>
			if((content_type != PTYPE_CGI) && (content_type != PTYPE_XML)) // CGI/XML type request does not respond HTTP header
 801f110:	79bb      	ldrb	r3, [r7, #6]
 801f112:	2b08      	cmp	r3, #8
 801f114:	d00a      	beq.n	801f12c <send_http_response_header+0x58>
 801f116:	79bb      	ldrb	r3, [r7, #6]
 801f118:	2b09      	cmp	r3, #9
 801f11a:	d007      	beq.n	801f12c <send_http_response_header+0x58>
				make_http_response_head((char*)http_response, content_type, body_len);
 801f11c:	4b1f      	ldr	r3, [pc, #124]	; (801f19c <send_http_response_header+0xc8>)
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	79b9      	ldrb	r1, [r7, #6]
 801f122:	683a      	ldr	r2, [r7, #0]
 801f124:	4618      	mov	r0, r3
 801f126:	f7ff f9ed 	bl	801e504 <make_http_response_head>
			break;
 801f12a:	e021      	b.n	801f170 <send_http_response_header+0x9c>
				http_status = 0;
 801f12c:	2300      	movs	r3, #0
 801f12e:	80bb      	strh	r3, [r7, #4]
			break;
 801f130:	e01e      	b.n	801f170 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_REQUEST_PAGE, sizeof(ERROR_REQUEST_PAGE));
 801f132:	4b1a      	ldr	r3, [pc, #104]	; (801f19c <send_http_response_header+0xc8>)
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	4a1a      	ldr	r2, [pc, #104]	; (801f1a0 <send_http_response_header+0xcc>)
 801f138:	4618      	mov	r0, r3
 801f13a:	4611      	mov	r1, r2
 801f13c:	2376      	movs	r3, #118	; 0x76
 801f13e:	461a      	mov	r2, r3
 801f140:	f00e fe89 	bl	802de56 <memcpy>
			break;
 801f144:	e014      	b.n	801f170 <send_http_response_header+0x9c>
			memcpy(http_response, ERROR_HTML_PAGE, sizeof(ERROR_HTML_PAGE));
 801f146:	4b15      	ldr	r3, [pc, #84]	; (801f19c <send_http_response_header+0xc8>)
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	4a16      	ldr	r2, [pc, #88]	; (801f1a4 <send_http_response_header+0xd0>)
 801f14c:	4618      	mov	r0, r3
 801f14e:	4611      	mov	r1, r2
 801f150:	2399      	movs	r3, #153	; 0x99
 801f152:	461a      	mov	r2, r3
 801f154:	f00e fe7f 	bl	802de56 <memcpy>
			break;
 801f158:	e00a      	b.n	801f170 <send_http_response_header+0x9c>
			memcpy(http_response, REDIRECT_HTML_PAGE, sizeof(REDIRECT_HTML_PAGE));
 801f15a:	4b10      	ldr	r3, [pc, #64]	; (801f19c <send_http_response_header+0xc8>)
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	4a12      	ldr	r2, [pc, #72]	; (801f1a8 <send_http_response_header+0xd4>)
 801f160:	4618      	mov	r0, r3
 801f162:	4611      	mov	r1, r2
 801f164:	239e      	movs	r3, #158	; 0x9e
 801f166:	461a      	mov	r2, r3
 801f168:	f00e fe75 	bl	802de56 <memcpy>
			break;
 801f16c:	e000      	b.n	801f170 <send_http_response_header+0x9c>
			break;
 801f16e:	bf00      	nop
	}

	// Send the HTTP Response 'header'
	if(http_status)
 801f170:	88bb      	ldrh	r3, [r7, #4]
 801f172:	2b00      	cmp	r3, #0
 801f174:	d00d      	beq.n	801f192 <send_http_response_header+0xbe>
	{
#ifdef _HTTPSERVER_DEBUG_
		printf("> HTTPSocket[%d] : [Send] HTTP Response Header [ %d ]byte\r\n", s, (uint16_t)strlen((char *)http_response));
#endif
		send(s, http_response, strlen((char *)http_response));
 801f176:	4b09      	ldr	r3, [pc, #36]	; (801f19c <send_http_response_header+0xc8>)
 801f178:	681c      	ldr	r4, [r3, #0]
 801f17a:	4b08      	ldr	r3, [pc, #32]	; (801f19c <send_http_response_header+0xc8>)
 801f17c:	681b      	ldr	r3, [r3, #0]
 801f17e:	4618      	mov	r0, r3
 801f180:	f7f1 f88e 	bl	80102a0 <strlen>
 801f184:	4603      	mov	r3, r0
 801f186:	b29a      	uxth	r2, r3
 801f188:	79fb      	ldrb	r3, [r7, #7]
 801f18a:	4621      	mov	r1, r4
 801f18c:	4618      	mov	r0, r3
 801f18e:	f7fa f9a5 	bl	80194dc <send>
	}
}
 801f192:	bf00      	nop
 801f194:	370c      	adds	r7, #12
 801f196:	46bd      	mov	sp, r7
 801f198:	bd90      	pop	{r4, r7, pc}
 801f19a:	bf00      	nop
 801f19c:	20001208 	.word	0x20001208
 801f1a0:	0803499c 	.word	0x0803499c
 801f1a4:	08034900 	.word	0x08034900
 801f1a8:	08034a14 	.word	0x08034a14

0801f1ac <send_http_response_body>:

static void send_http_response_body(uint8_t s, uint8_t * uri_name, uint8_t * buf, uint32_t start_addr, uint32_t file_len)
{
 801f1ac:	b580      	push	{r7, lr}
 801f1ae:	b0a6      	sub	sp, #152	; 0x98
 801f1b0:	af00      	add	r7, sp, #0
 801f1b2:	60b9      	str	r1, [r7, #8]
 801f1b4:	607a      	str	r2, [r7, #4]
 801f1b6:	603b      	str	r3, [r7, #0]
 801f1b8:	4603      	mov	r3, r0
 801f1ba:	73fb      	strb	r3, [r7, #15]
	int8_t get_seqnum;
	uint32_t send_len;

	uint8_t flag_datasend_end = 0;
 801f1bc:	2300      	movs	r3, #0
 801f1be:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

#ifdef _USE_USER_SPI_FLASH_
	char tmp_path[PATH_BUF_SIZE] = {0x00, };
 801f1c2:	2300      	movs	r3, #0
 801f1c4:	613b      	str	r3, [r7, #16]
 801f1c6:	f107 0314 	add.w	r3, r7, #20
 801f1ca:	227c      	movs	r2, #124	; 0x7c
 801f1cc:	2100      	movs	r1, #0
 801f1ce:	4618      	mov	r0, r3
 801f1d0:	f00e fc6c 	bl	802daac <memset>
#endif
#ifdef _USE_FLASH_
	uint32_t addr = 0;
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f1d4:	7bfb      	ldrb	r3, [r7, #15]
 801f1d6:	4618      	mov	r0, r3
 801f1d8:	f7ff fdc2 	bl	801ed60 <getHTTPSequenceNum>
 801f1dc:	4603      	mov	r3, r0
 801f1de:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 801f1e2:	f997 3092 	ldrsb.w	r3, [r7, #146]	; 0x92
 801f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f1ea:	f000 812e 	beq.w	801f44a <send_http_response_body+0x29e>

	// Send the HTTP Response 'body'; requested file
	if(!HTTPSock_Status[get_seqnum].file_len) // ### Send HTTP response body: First part ###
 801f1ee:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f1f2:	4998      	ldr	r1, [pc, #608]	; (801f454 <send_http_response_body+0x2a8>)
 801f1f4:	4613      	mov	r3, r2
 801f1f6:	011b      	lsls	r3, r3, #4
 801f1f8:	4413      	add	r3, r2
 801f1fa:	009b      	lsls	r3, r3, #2
 801f1fc:	440b      	add	r3, r1
 801f1fe:	3338      	adds	r3, #56	; 0x38
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	2b00      	cmp	r3, #0
 801f204:	d140      	bne.n	801f288 <send_http_response_body+0xdc>
	{
		if (file_len > DATA_BUF_SIZE - 1)
 801f206:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f20a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f20e:	d336      	bcc.n	801f27e <send_http_response_body+0xd2>
		{
			HTTPSock_Status[get_seqnum].file_start = start_addr;
 801f210:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f214:	498f      	ldr	r1, [pc, #572]	; (801f454 <send_http_response_body+0x2a8>)
 801f216:	4613      	mov	r3, r2
 801f218:	011b      	lsls	r3, r3, #4
 801f21a:	4413      	add	r3, r2
 801f21c:	009b      	lsls	r3, r3, #2
 801f21e:	440b      	add	r3, r1
 801f220:	3334      	adds	r3, #52	; 0x34
 801f222:	683a      	ldr	r2, [r7, #0]
 801f224:	601a      	str	r2, [r3, #0]
			HTTPSock_Status[get_seqnum].file_len = file_len;
 801f226:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f22a:	498a      	ldr	r1, [pc, #552]	; (801f454 <send_http_response_body+0x2a8>)
 801f22c:	4613      	mov	r3, r2
 801f22e:	011b      	lsls	r3, r3, #4
 801f230:	4413      	add	r3, r2
 801f232:	009b      	lsls	r3, r3, #2
 801f234:	440b      	add	r3, r1
 801f236:	3338      	adds	r3, #56	; 0x38
 801f238:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801f23c:	601a      	str	r2, [r3, #0]
			send_len = DATA_BUF_SIZE - 1;
 801f23e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801f242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

/////////////////////////////////////////////////////////////////////////////////////////////////
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
			memset(HTTPSock_Status[get_seqnum].file_name, 0x00, MAX_CONTENT_NAME_LEN);
 801f246:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f24a:	4613      	mov	r3, r2
 801f24c:	011b      	lsls	r3, r3, #4
 801f24e:	4413      	add	r3, r2
 801f250:	009b      	lsls	r3, r3, #2
 801f252:	4a80      	ldr	r2, [pc, #512]	; (801f454 <send_http_response_body+0x2a8>)
 801f254:	4413      	add	r3, r2
 801f256:	3301      	adds	r3, #1
 801f258:	2232      	movs	r2, #50	; 0x32
 801f25a:	2100      	movs	r1, #0
 801f25c:	4618      	mov	r0, r3
 801f25e:	f00e fc25 	bl	802daac <memset>
			strcpy((char *)HTTPSock_Status[get_seqnum].file_name, (char *)uri_name);
 801f262:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f266:	4613      	mov	r3, r2
 801f268:	011b      	lsls	r3, r3, #4
 801f26a:	4413      	add	r3, r2
 801f26c:	009b      	lsls	r3, r3, #2
 801f26e:	4a79      	ldr	r2, [pc, #484]	; (801f454 <send_http_response_body+0x2a8>)
 801f270:	4413      	add	r3, r2
 801f272:	3301      	adds	r3, #1
 801f274:	68b9      	ldr	r1, [r7, #8]
 801f276:	4618      	mov	r0, r3
 801f278:	f00e fde5 	bl	802de46 <strcpy>
 801f27c:	e028      	b.n	801f2d0 <send_http_response_body+0x124>
#endif
		}
		else
		{
			// Send process end
			send_len = file_len;
 801f27e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f286:	e023      	b.n	801f2d0 <send_http_response_body+0x124>
		if(HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH)
		{
			addr = HTTPSock_Status[get_seqnum].file_start + HTTPSock_Status[get_seqnum].file_offset;
		}
#endif
		send_len = HTTPSock_Status[get_seqnum].file_len - HTTPSock_Status[get_seqnum].file_offset;
 801f288:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f28c:	4971      	ldr	r1, [pc, #452]	; (801f454 <send_http_response_body+0x2a8>)
 801f28e:	4613      	mov	r3, r2
 801f290:	011b      	lsls	r3, r3, #4
 801f292:	4413      	add	r3, r2
 801f294:	009b      	lsls	r3, r3, #2
 801f296:	440b      	add	r3, r1
 801f298:	3338      	adds	r3, #56	; 0x38
 801f29a:	6819      	ldr	r1, [r3, #0]
 801f29c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2a0:	486c      	ldr	r0, [pc, #432]	; (801f454 <send_http_response_body+0x2a8>)
 801f2a2:	4613      	mov	r3, r2
 801f2a4:	011b      	lsls	r3, r3, #4
 801f2a6:	4413      	add	r3, r2
 801f2a8:	009b      	lsls	r3, r3, #2
 801f2aa:	4403      	add	r3, r0
 801f2ac:	333c      	adds	r3, #60	; 0x3c
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	1acb      	subs	r3, r1, r3
 801f2b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if(send_len > DATA_BUF_SIZE - 1)
 801f2b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f2ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f2be:	d304      	bcc.n	801f2ca <send_http_response_body+0x11e>
		{
			send_len = DATA_BUF_SIZE - 1;
 801f2c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801f2c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801f2c8:	e002      	b.n	801f2d0 <send_http_response_body+0x124>
		{
#ifdef _HTTPSERVER_DEBUG_
			printf("> HTTPSocket[%d] : HTTP Response end - file len [ %ld ]byte\r\n", s, HTTPSock_Status[get_seqnum].file_len);
#endif
			// Send process end
			flag_datasend_end = 1;
 801f2ca:	2301      	movs	r3, #1
 801f2cc:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	//HTTPSock_Status[get_seqnum]->storage_type == SDCARD
	//HTTPSock_Status[get_seqnum]->storage_type == DATAFLASH
	//HTTPSock_Status[get_seqnum]->storage_type == USERSPIFLASH
/*****************************************************/

	if(HTTPSock_Status[get_seqnum].storage_type == CODEFLASH)
 801f2d0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2d4:	495f      	ldr	r1, [pc, #380]	; (801f454 <send_http_response_body+0x2a8>)
 801f2d6:	4613      	mov	r3, r2
 801f2d8:	011b      	lsls	r3, r3, #4
 801f2da:	4413      	add	r3, r2
 801f2dc:	009b      	lsls	r3, r3, #2
 801f2de:	440b      	add	r3, r1
 801f2e0:	3340      	adds	r3, #64	; 0x40
 801f2e2:	781b      	ldrb	r3, [r3, #0]
 801f2e4:	2b01      	cmp	r3, #1
 801f2e6:	d129      	bne.n	801f33c <send_http_response_body+0x190>
	{
		if(HTTPSock_Status[get_seqnum].file_len) start_addr = HTTPSock_Status[get_seqnum].file_start;
 801f2e8:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f2ec:	4959      	ldr	r1, [pc, #356]	; (801f454 <send_http_response_body+0x2a8>)
 801f2ee:	4613      	mov	r3, r2
 801f2f0:	011b      	lsls	r3, r3, #4
 801f2f2:	4413      	add	r3, r2
 801f2f4:	009b      	lsls	r3, r3, #2
 801f2f6:	440b      	add	r3, r1
 801f2f8:	3338      	adds	r3, #56	; 0x38
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d00a      	beq.n	801f316 <send_http_response_body+0x16a>
 801f300:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f304:	4953      	ldr	r1, [pc, #332]	; (801f454 <send_http_response_body+0x2a8>)
 801f306:	4613      	mov	r3, r2
 801f308:	011b      	lsls	r3, r3, #4
 801f30a:	4413      	add	r3, r2
 801f30c:	009b      	lsls	r3, r3, #2
 801f30e:	440b      	add	r3, r1
 801f310:	3334      	adds	r3, #52	; 0x34
 801f312:	681b      	ldr	r3, [r3, #0]
 801f314:	603b      	str	r3, [r7, #0]
		read_userReg_webContent(start_addr, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f316:	683b      	ldr	r3, [r7, #0]
 801f318:	b298      	uxth	r0, r3
 801f31a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f31e:	494d      	ldr	r1, [pc, #308]	; (801f454 <send_http_response_body+0x2a8>)
 801f320:	4613      	mov	r3, r2
 801f322:	011b      	lsls	r3, r3, #4
 801f324:	4413      	add	r3, r2
 801f326:	009b      	lsls	r3, r3, #2
 801f328:	440b      	add	r3, r1
 801f32a:	333c      	adds	r3, #60	; 0x3c
 801f32c:	681a      	ldr	r2, [r3, #0]
 801f32e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f332:	b29b      	uxth	r3, r3
 801f334:	6879      	ldr	r1, [r7, #4]
 801f336:	f000 fbc9 	bl	801facc <read_userReg_webContent>
 801f33a:	e035      	b.n	801f3a8 <send_http_response_body+0x1fc>
	}

#ifdef _USE_USER_SPI_FLASH_
	else if(HTTPSock_Status[get_seqnum].storage_type == USERSPIFLASH){
 801f33c:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f340:	4944      	ldr	r1, [pc, #272]	; (801f454 <send_http_response_body+0x2a8>)
 801f342:	4613      	mov	r3, r2
 801f344:	011b      	lsls	r3, r3, #4
 801f346:	4413      	add	r3, r2
 801f348:	009b      	lsls	r3, r3, #2
 801f34a:	440b      	add	r3, r1
 801f34c:	3340      	adds	r3, #64	; 0x40
 801f34e:	781b      	ldrb	r3, [r3, #0]
 801f350:	2b04      	cmp	r3, #4
 801f352:	d126      	bne.n	801f3a2 <send_http_response_body+0x1f6>


		memset(tmp_path, 0x0, PATH_BUF_SIZE);
 801f354:	f107 0310 	add.w	r3, r7, #16
 801f358:	2280      	movs	r2, #128	; 0x80
 801f35a:	2100      	movs	r1, #0
 801f35c:	4618      	mov	r0, r3
 801f35e:	f00e fba5 	bl	802daac <memset>
		strcpy((char *)tmp_path, HTTP_FS_DIR);
 801f362:	f107 0310 	add.w	r3, r7, #16
 801f366:	4a3c      	ldr	r2, [pc, #240]	; (801f458 <send_http_response_body+0x2ac>)
 801f368:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f36c:	6018      	str	r0, [r3, #0]
 801f36e:	3304      	adds	r3, #4
 801f370:	7019      	strb	r1, [r3, #0]
		strcat((char *)tmp_path, (const char *)uri_name);
 801f372:	f107 0310 	add.w	r3, r7, #16
 801f376:	68b9      	ldr	r1, [r7, #8]
 801f378:	4618      	mov	r0, r3
 801f37a:	f00e fb9f 	bl	802dabc <strcat>
		spi_fs_read_file_offset((const char *)tmp_path, &buf[0], HTTPSock_Status[get_seqnum].file_offset, send_len);
 801f37e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f382:	4934      	ldr	r1, [pc, #208]	; (801f454 <send_http_response_body+0x2a8>)
 801f384:	4613      	mov	r3, r2
 801f386:	011b      	lsls	r3, r3, #4
 801f388:	4413      	add	r3, r2
 801f38a:	009b      	lsls	r3, r3, #2
 801f38c:	440b      	add	r3, r1
 801f38e:	333c      	adds	r3, #60	; 0x3c
 801f390:	681a      	ldr	r2, [r3, #0]
 801f392:	f107 0010 	add.w	r0, r7, #16
 801f396:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f39a:	6879      	ldr	r1, [r7, #4]
 801f39c:	f00b fdfe 	bl	802af9c <spi_fs_read_file_offset>
 801f3a0:	e002      	b.n	801f3a8 <send_http_response_body+0x1fc>
		*(buf+send_len+1) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
	}
#endif
	else
	{
		send_len = 0;
 801f3a2:	2300      	movs	r3, #0
 801f3a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	// Requested content send to HTTP client
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : [Send] HTTP Response body [ %ld ]byte\r\n", s, send_len);
#endif

	if(send_len) send(s, buf, send_len);
 801f3a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d008      	beq.n	801f3c2 <send_http_response_body+0x216>
 801f3b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f3b4:	b29a      	uxth	r2, r3
 801f3b6:	7bfb      	ldrb	r3, [r7, #15]
 801f3b8:	6879      	ldr	r1, [r7, #4]
 801f3ba:	4618      	mov	r0, r3
 801f3bc:	f7fa f88e 	bl	80194dc <send>
 801f3c0:	e002      	b.n	801f3c8 <send_http_response_body+0x21c>
	else flag_datasend_end = 1;
 801f3c2:	2301      	movs	r3, #1
 801f3c4:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	if(flag_datasend_end)
 801f3c8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	d024      	beq.n	801f41a <send_http_response_body+0x26e>
	{
		HTTPSock_Status[get_seqnum].file_start = 0;
 801f3d0:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f3d4:	491f      	ldr	r1, [pc, #124]	; (801f454 <send_http_response_body+0x2a8>)
 801f3d6:	4613      	mov	r3, r2
 801f3d8:	011b      	lsls	r3, r3, #4
 801f3da:	4413      	add	r3, r2
 801f3dc:	009b      	lsls	r3, r3, #2
 801f3de:	440b      	add	r3, r1
 801f3e0:	3334      	adds	r3, #52	; 0x34
 801f3e2:	2200      	movs	r2, #0
 801f3e4:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_len = 0;
 801f3e6:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f3ea:	491a      	ldr	r1, [pc, #104]	; (801f454 <send_http_response_body+0x2a8>)
 801f3ec:	4613      	mov	r3, r2
 801f3ee:	011b      	lsls	r3, r3, #4
 801f3f0:	4413      	add	r3, r2
 801f3f2:	009b      	lsls	r3, r3, #2
 801f3f4:	440b      	add	r3, r1
 801f3f6:	3338      	adds	r3, #56	; 0x38
 801f3f8:	2200      	movs	r2, #0
 801f3fa:	601a      	str	r2, [r3, #0]
		HTTPSock_Status[get_seqnum].file_offset = 0;
 801f3fc:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f400:	4914      	ldr	r1, [pc, #80]	; (801f454 <send_http_response_body+0x2a8>)
 801f402:	4613      	mov	r3, r2
 801f404:	011b      	lsls	r3, r3, #4
 801f406:	4413      	add	r3, r2
 801f408:	009b      	lsls	r3, r3, #2
 801f40a:	440b      	add	r3, r1
 801f40c:	333c      	adds	r3, #60	; 0x3c
 801f40e:	2200      	movs	r2, #0
 801f410:	601a      	str	r2, [r3, #0]
		flag_datasend_end = 0;
 801f412:	2300      	movs	r3, #0
 801f414:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 801f418:	e018      	b.n	801f44c <send_http_response_body+0x2a0>
	}
	else
	{
		HTTPSock_Status[get_seqnum].file_offset += send_len;
 801f41a:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f41e:	490d      	ldr	r1, [pc, #52]	; (801f454 <send_http_response_body+0x2a8>)
 801f420:	4613      	mov	r3, r2
 801f422:	011b      	lsls	r3, r3, #4
 801f424:	4413      	add	r3, r2
 801f426:	009b      	lsls	r3, r3, #2
 801f428:	440b      	add	r3, r1
 801f42a:	333c      	adds	r3, #60	; 0x3c
 801f42c:	6819      	ldr	r1, [r3, #0]
 801f42e:	f997 2092 	ldrsb.w	r2, [r7, #146]	; 0x92
 801f432:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801f436:	4419      	add	r1, r3
 801f438:	4806      	ldr	r0, [pc, #24]	; (801f454 <send_http_response_body+0x2a8>)
 801f43a:	4613      	mov	r3, r2
 801f43c:	011b      	lsls	r3, r3, #4
 801f43e:	4413      	add	r3, r2
 801f440:	009b      	lsls	r3, r3, #2
 801f442:	4403      	add	r3, r0
 801f444:	333c      	adds	r3, #60	; 0x3c
 801f446:	6019      	str	r1, [r3, #0]
 801f448:	e000      	b.n	801f44c <send_http_response_body+0x2a0>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f44a:	bf00      	nop
// ## 20141219 Eric added, for 'File object structure' (fs) allocation reduced (8 -> 1)
#ifdef _USE_SDCARD_
	f_close(&fs);
#endif
// ## 20141219 added end
}
 801f44c:	3798      	adds	r7, #152	; 0x98
 801f44e:	46bd      	mov	sp, r7
 801f450:	bd80      	pop	{r7, pc}
 801f452:	bf00      	nop
 801f454:	200012e4 	.word	0x200012e4
 801f458:	0803362c 	.word	0x0803362c

0801f45c <send_http_response_cgi>:

static void send_http_response_cgi(uint8_t s, uint8_t * buf, uint8_t * http_body, uint16_t file_len)
{
 801f45c:	b580      	push	{r7, lr}
 801f45e:	b088      	sub	sp, #32
 801f460:	af02      	add	r7, sp, #8
 801f462:	60b9      	str	r1, [r7, #8]
 801f464:	607a      	str	r2, [r7, #4]
 801f466:	461a      	mov	r2, r3
 801f468:	4603      	mov	r3, r0
 801f46a:	73fb      	strb	r3, [r7, #15]
 801f46c:	4613      	mov	r3, r2
 801f46e:	81bb      	strh	r3, [r7, #12]
	uint16_t send_len = 0;
 801f470:	2300      	movs	r3, #0
 801f472:	82fb      	strh	r3, [r7, #22]

#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - CGI\r\n", s);
#endif
	send_len = sprintf((char *)buf, "%s%d\r\n\r\n%s", RES_CGIHEAD_OK_CHANGED, file_len, http_body);
 801f474:	89ba      	ldrh	r2, [r7, #12]
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	9300      	str	r3, [sp, #0]
 801f47a:	4613      	mov	r3, r2
 801f47c:	4a08      	ldr	r2, [pc, #32]	; (801f4a0 <send_http_response_cgi+0x44>)
 801f47e:	4909      	ldr	r1, [pc, #36]	; (801f4a4 <send_http_response_cgi+0x48>)
 801f480:	68b8      	ldr	r0, [r7, #8]
 801f482:	f00e f9c3 	bl	802d80c <siprintf>
 801f486:	4603      	mov	r3, r0
 801f488:	82fb      	strh	r3, [r7, #22]
#ifdef _HTTPSERVER_DEBUG_
	printf("> HTTPSocket[%d] : HTTP Response Header + Body - send len [ %d ]byte\r\n", s, send_len);
#endif

	send(s, buf, send_len);
 801f48a:	8afa      	ldrh	r2, [r7, #22]
 801f48c:	7bfb      	ldrb	r3, [r7, #15]
 801f48e:	68b9      	ldr	r1, [r7, #8]
 801f490:	4618      	mov	r0, r3
 801f492:	f7fa f823 	bl	80194dc <send>
}
 801f496:	bf00      	nop
 801f498:	3718      	adds	r7, #24
 801f49a:	46bd      	mov	sp, r7
 801f49c:	bd80      	pop	{r7, pc}
 801f49e:	bf00      	nop
 801f4a0:	08033634 	.word	0x08033634
 801f4a4:	08033690 	.word	0x08033690

0801f4a8 <http_disconnect>:


static int8_t http_disconnect(uint8_t sn)
{
 801f4a8:	b580      	push	{r7, lr}
 801f4aa:	b082      	sub	sp, #8
 801f4ac:	af00      	add	r7, sp, #0
 801f4ae:	4603      	mov	r3, r0
 801f4b0:	71fb      	strb	r3, [r7, #7]
	setSn_CR(sn,Sn_CR_DISCON);
 801f4b2:	79fb      	ldrb	r3, [r7, #7]
 801f4b4:	009b      	lsls	r3, r3, #2
 801f4b6:	3301      	adds	r3, #1
 801f4b8:	00db      	lsls	r3, r3, #3
 801f4ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f4be:	2108      	movs	r1, #8
 801f4c0:	4618      	mov	r0, r3
 801f4c2:	f7f9 fa39 	bl	8018938 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 801f4c6:	bf00      	nop
 801f4c8:	79fb      	ldrb	r3, [r7, #7]
 801f4ca:	009b      	lsls	r3, r3, #2
 801f4cc:	3301      	adds	r3, #1
 801f4ce:	00db      	lsls	r3, r3, #3
 801f4d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 801f4d4:	4618      	mov	r0, r3
 801f4d6:	f7f9 f9e3 	bl	80188a0 <WIZCHIP_READ>
 801f4da:	4603      	mov	r3, r0
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d1f3      	bne.n	801f4c8 <http_disconnect+0x20>

	return SOCK_OK;
 801f4e0:	2301      	movs	r3, #1
}
 801f4e2:	4618      	mov	r0, r3
 801f4e4:	3708      	adds	r7, #8
 801f4e6:	46bd      	mov	sp, r7
 801f4e8:	bd80      	pop	{r7, pc}
	...

0801f4ec <http_process_handler>:


static void http_process_handler(uint8_t s, st_http_request * p_http_request)
{
 801f4ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801f4f0:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801f4f4:	af02      	add	r7, sp, #8
 801f4f6:	4602      	mov	r2, r0
 801f4f8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f4fc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f500:	6019      	str	r1, [r3, #0]
 801f502:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f506:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f50a:	701a      	strb	r2, [r3, #0]
	uint8_t * uri_name;
	uint32_t content_addr = 0;
 801f50c:	2300      	movs	r3, #0
 801f50e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	uint16_t content_num = 0;
 801f512:	2300      	movs	r3, #0
 801f514:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
	uint32_t file_len = 0;
 801f518:	2300      	movs	r3, #0
 801f51a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

	uint8_t uri_buf[MAX_URI_SIZE]={0x00, };
 801f51e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f522:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 801f526:	2200      	movs	r2, #0
 801f528:	601a      	str	r2, [r3, #0]
 801f52a:	3304      	adds	r3, #4
 801f52c:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 801f530:	2100      	movs	r1, #0
 801f532:	4618      	mov	r0, r3
 801f534:	f00e faba 	bl	802daac <memset>
	uint16_t http_status;
	int8_t get_seqnum;
	uint8_t content_found;

#ifdef _USE_USER_SPI_FLASH_
	int64_t err = 0;
 801f538:	f04f 0200 	mov.w	r2, #0
 801f53c:	f04f 0300 	mov.w	r3, #0
 801f540:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
#endif

	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f544:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f548:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f54c:	781b      	ldrb	r3, [r3, #0]
 801f54e:	4618      	mov	r0, r3
 801f550:	f7ff fc06 	bl	801ed60 <getHTTPSequenceNum>
 801f554:	4603      	mov	r3, r0
 801f556:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 801f55a:	f997 3217 	ldrsb.w	r3, [r7, #535]	; 0x217
 801f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f562:	f000 81e5 	beq.w	801f930 <http_process_handler+0x444>

	http_status = 0;
 801f566:	2300      	movs	r3, #0
 801f568:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
	http_response = pHTTP_RX;
 801f56c:	4ba6      	ldr	r3, [pc, #664]	; (801f808 <http_process_handler+0x31c>)
 801f56e:	681b      	ldr	r3, [r3, #0]
 801f570:	4aa6      	ldr	r2, [pc, #664]	; (801f80c <http_process_handler+0x320>)
 801f572:	6013      	str	r3, [r2, #0]
	file_len = 0;
 801f574:	2300      	movs	r3, #0
 801f576:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208


	//method Analyze
	switch (p_http_request->METHOD)
 801f57a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f57e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	781b      	ldrb	r3, [r3, #0]
 801f586:	2b03      	cmp	r3, #3
 801f588:	f000 8154 	beq.w	801f834 <http_process_handler+0x348>
 801f58c:	2b03      	cmp	r3, #3
 801f58e:	f300 81be 	bgt.w	801f90e <http_process_handler+0x422>
 801f592:	2b00      	cmp	r3, #0
 801f594:	d007      	beq.n	801f5a6 <http_process_handler+0xba>
 801f596:	2b00      	cmp	r3, #0
 801f598:	f2c0 81b9 	blt.w	801f90e <http_process_handler+0x422>
 801f59c:	3b01      	subs	r3, #1
 801f59e:	2b01      	cmp	r3, #1
 801f5a0:	f200 81b5 	bhi.w	801f90e <http_process_handler+0x422>
 801f5a4:	e010      	b.n	801f5c8 <http_process_handler+0xdc>
	{
		case METHOD_ERR :
			http_status = STATUS_BAD_REQ;
 801f5a6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f5aa:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f5ae:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f5b2:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f5b6:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f5ba:	7818      	ldrb	r0, [r3, #0]
 801f5bc:	4613      	mov	r3, r2
 801f5be:	2200      	movs	r2, #0
 801f5c0:	2100      	movs	r1, #0
 801f5c2:	f7ff fd87 	bl	801f0d4 <send_http_response_header>
			break;
 801f5c6:	e1b6      	b.n	801f936 <http_process_handler+0x44a>

		case METHOD_HEAD :
		case METHOD_GET :
			get_http_uri_name(p_http_request->URI, uri_buf);
 801f5c8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f5cc:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f5d0:	681b      	ldr	r3, [r3, #0]
 801f5d2:	3302      	adds	r3, #2
 801f5d4:	f107 0208 	add.w	r2, r7, #8
 801f5d8:	4611      	mov	r1, r2
 801f5da:	4618      	mov	r0, r3
 801f5dc:	f7ff fad6 	bl	801eb8c <get_http_uri_name>
			uri_name = uri_buf;
 801f5e0:	f107 0308 	add.w	r3, r7, #8
 801f5e4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

			if (!strcmp((char *)uri_name, "/")) strcpy((char *)uri_name, INITIAL_WEBPAGE);	// If URI is "/", respond by index.html
 801f5e8:	4989      	ldr	r1, [pc, #548]	; (801f810 <http_process_handler+0x324>)
 801f5ea:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f5ee:	f7f0 fdf7 	bl	80101e0 <strcmp>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d10b      	bne.n	801f610 <http_process_handler+0x124>
 801f5f8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f5fc:	4985      	ldr	r1, [pc, #532]	; (801f814 <http_process_handler+0x328>)
 801f5fe:	461a      	mov	r2, r3
 801f600:	460b      	mov	r3, r1
 801f602:	cb03      	ldmia	r3!, {r0, r1}
 801f604:	6010      	str	r0, [r2, #0]
 801f606:	6051      	str	r1, [r2, #4]
 801f608:	8819      	ldrh	r1, [r3, #0]
 801f60a:	789b      	ldrb	r3, [r3, #2]
 801f60c:	8111      	strh	r1, [r2, #8]
 801f60e:	7293      	strb	r3, [r2, #10]
			if (!strcmp((char *)uri_name, "m")) strcpy((char *)uri_name, M_INITIAL_WEBPAGE);
 801f610:	4981      	ldr	r1, [pc, #516]	; (801f818 <http_process_handler+0x32c>)
 801f612:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f616:	f7f0 fde3 	bl	80101e0 <strcmp>
 801f61a:	4603      	mov	r3, r0
 801f61c:	2b00      	cmp	r3, #0
 801f61e:	d10a      	bne.n	801f636 <http_process_handler+0x14a>
 801f620:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f624:	4a7d      	ldr	r2, [pc, #500]	; (801f81c <http_process_handler+0x330>)
 801f626:	461c      	mov	r4, r3
 801f628:	4613      	mov	r3, r2
 801f62a:	cb07      	ldmia	r3!, {r0, r1, r2}
 801f62c:	6020      	str	r0, [r4, #0]
 801f62e:	6061      	str	r1, [r4, #4]
 801f630:	60a2      	str	r2, [r4, #8]
 801f632:	781b      	ldrb	r3, [r3, #0]
 801f634:	7323      	strb	r3, [r4, #12]
			if (!strcmp((char *)uri_name, "mobile")) strcpy((char *)uri_name, MOBILE_INITIAL_WEBPAGE);
 801f636:	497a      	ldr	r1, [pc, #488]	; (801f820 <http_process_handler+0x334>)
 801f638:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f63c:	f7f0 fdd0 	bl	80101e0 <strcmp>
 801f640:	4603      	mov	r3, r0
 801f642:	2b00      	cmp	r3, #0
 801f644:	d10b      	bne.n	801f65e <http_process_handler+0x172>
 801f646:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801f64a:	4a76      	ldr	r2, [pc, #472]	; (801f824 <http_process_handler+0x338>)
 801f64c:	461d      	mov	r5, r3
 801f64e:	4614      	mov	r4, r2
 801f650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f652:	6028      	str	r0, [r5, #0]
 801f654:	6069      	str	r1, [r5, #4]
 801f656:	60aa      	str	r2, [r5, #8]
 801f658:	60eb      	str	r3, [r5, #12]
 801f65a:	8823      	ldrh	r3, [r4, #0]
 801f65c:	822b      	strh	r3, [r5, #16]
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Checking requested file types (HTML, TEXT, GIF, JPEG and Etc. are included)
 801f65e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f662:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f666:	681b      	ldr	r3, [r3, #0]
 801f668:	3301      	adds	r3, #1
 801f66a:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f66e:	4618      	mov	r0, r3
 801f670:	f7fe fffe 	bl	801e670 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method GET\r\n", s);
			printf("> HTTPSocket[%d] : Request Type = %d\r\n", s, p_http_request->TYPE);
			printf("> HTTPSocket[%d] : Request URI = %s\r\n", s, uri_name);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)
 801f674:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f678:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	785b      	ldrb	r3, [r3, #1]
 801f680:	2b08      	cmp	r3, #8
 801f682:	d131      	bne.n	801f6e8 <http_process_handler+0x1fc>
			{
				content_found = http_get_cgi_handler(uri_name, pHTTP_TX, &file_len);
 801f684:	4b68      	ldr	r3, [pc, #416]	; (801f828 <http_process_handler+0x33c>)
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f68c:	4619      	mov	r1, r3
 801f68e:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f692:	f000 fa59 	bl	801fb48 <http_get_cgi_handler>
 801f696:	4603      	mov	r3, r0
 801f698:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK_CHANGED)+8))))
 801f69c:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	d015      	beq.n	801f6d0 <http_process_handler+0x1e4>
 801f6a4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f6a8:	f240 729e 	movw	r2, #1950	; 0x79e
 801f6ac:	4293      	cmp	r3, r2
 801f6ae:	d80f      	bhi.n	801f6d0 <http_process_handler+0x1e4>
				{
					send_http_response_cgi(s, http_response, pHTTP_TX, (uint16_t)file_len);
 801f6b0:	4b56      	ldr	r3, [pc, #344]	; (801f80c <http_process_handler+0x320>)
 801f6b2:	6819      	ldr	r1, [r3, #0]
 801f6b4:	4b5c      	ldr	r3, [pc, #368]	; (801f828 <http_process_handler+0x33c>)
 801f6b6:	681a      	ldr	r2, [r3, #0]
 801f6b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f6bc:	b29c      	uxth	r4, r3
 801f6be:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f6c2:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f6c6:	7818      	ldrb	r0, [r3, #0]
 801f6c8:	4623      	mov	r3, r4
 801f6ca:	f7ff fec7 	bl	801f45c <send_http_response_cgi>
				if(http_status == STATUS_OK)
				{
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
				}
			}
			break;
 801f6ce:	e131      	b.n	801f934 <http_process_handler+0x448>
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f6d0:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f6d4:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f6d8:	7818      	ldrb	r0, [r3, #0]
 801f6da:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f6de:	2200      	movs	r2, #0
 801f6e0:	2108      	movs	r1, #8
 801f6e2:	f7ff fcf7 	bl	801f0d4 <send_http_response_header>
			break;
 801f6e6:	e125      	b.n	801f934 <http_process_handler+0x448>
				if(0 < ( err = spi_fs_serch_file_in_dir(HTTP_FS_DIR, (const char *)uri_name)))/* Read content from spi flash */
 801f6e8:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f6ec:	484f      	ldr	r0, [pc, #316]	; (801f82c <http_process_handler+0x340>)
 801f6ee:	f00b fd2f 	bl	802b150 <spi_fs_serch_file_in_dir>
 801f6f2:	4603      	mov	r3, r0
 801f6f4:	17da      	asrs	r2, r3, #31
 801f6f6:	4698      	mov	r8, r3
 801f6f8:	4691      	mov	r9, r2
 801f6fa:	e9c7 8986 	strd	r8, r9, [r7, #536]	; 0x218
 801f6fe:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 801f702:	2a01      	cmp	r2, #1
 801f704:	f173 0300 	sbcs.w	r3, r3, #0
 801f708:	db12      	blt.n	801f730 <http_process_handler+0x244>
					file_len = err;
 801f70a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801f70e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
					content_found = 1;
 801f712:	2301      	movs	r3, #1
 801f714:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					HTTPSock_Status[get_seqnum].storage_type = USERSPIFLASH;
 801f718:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f71c:	4944      	ldr	r1, [pc, #272]	; (801f830 <http_process_handler+0x344>)
 801f71e:	4613      	mov	r3, r2
 801f720:	011b      	lsls	r3, r3, #4
 801f722:	4413      	add	r3, r2
 801f724:	009b      	lsls	r3, r3, #2
 801f726:	440b      	add	r3, r1
 801f728:	3340      	adds	r3, #64	; 0x40
 801f72a:	2204      	movs	r2, #4
 801f72c:	701a      	strb	r2, [r3, #0]
 801f72e:	e024      	b.n	801f77a <http_process_handler+0x28e>
				else if(find_userReg_webContent(uri_buf, &content_num, &file_len))
 801f730:	f507 7202 	add.w	r2, r7, #520	; 0x208
 801f734:	f207 210e 	addw	r1, r7, #526	; 0x20e
 801f738:	f107 0308 	add.w	r3, r7, #8
 801f73c:	4618      	mov	r0, r3
 801f73e:	f000 f989 	bl	801fa54 <find_userReg_webContent>
 801f742:	4603      	mov	r3, r0
 801f744:	2b00      	cmp	r3, #0
 801f746:	d012      	beq.n	801f76e <http_process_handler+0x282>
					content_found = 1; // Web content found in code flash memory
 801f748:	2301      	movs	r3, #1
 801f74a:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					content_addr = (uint32_t)content_num;
 801f74e:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 801f752:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
					HTTPSock_Status[get_seqnum].storage_type = CODEFLASH;
 801f756:	f997 2217 	ldrsb.w	r2, [r7, #535]	; 0x217
 801f75a:	4935      	ldr	r1, [pc, #212]	; (801f830 <http_process_handler+0x344>)
 801f75c:	4613      	mov	r3, r2
 801f75e:	011b      	lsls	r3, r3, #4
 801f760:	4413      	add	r3, r2
 801f762:	009b      	lsls	r3, r3, #2
 801f764:	440b      	add	r3, r1
 801f766:	3340      	adds	r3, #64	; 0x40
 801f768:	2201      	movs	r2, #1
 801f76a:	701a      	strb	r2, [r3, #0]
 801f76c:	e005      	b.n	801f77a <http_process_handler+0x28e>
					content_found = 0; // fail to find content
 801f76e:	2300      	movs	r3, #0
 801f770:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
					file_len = 0;
 801f774:	2300      	movs	r3, #0
 801f776:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
				if(!content_found)
 801f77a:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f77e:	2b00      	cmp	r3, #0
 801f780:	d111      	bne.n	801f7a6 <http_process_handler+0x2ba>
					if (!strcmp((char *)uri_name, INITIAL_WEBPAGE)){
 801f782:	4924      	ldr	r1, [pc, #144]	; (801f814 <http_process_handler+0x328>)
 801f784:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f788:	f7f0 fd2a 	bl	80101e0 <strcmp>
 801f78c:	4603      	mov	r3, r0
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d104      	bne.n	801f79c <http_process_handler+0x2b0>
						http_status = STATUS_NOT_FOUND;
 801f792:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f796:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f79a:	e007      	b.n	801f7ac <http_process_handler+0x2c0>
						http_status = STATUS_MV_TEMP;
 801f79c:	f44f 7397 	mov.w	r3, #302	; 0x12e
 801f7a0:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
 801f7a4:	e002      	b.n	801f7ac <http_process_handler+0x2c0>
					http_status = STATUS_OK;
 801f7a6:	23c8      	movs	r3, #200	; 0xc8
 801f7a8:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
				if(http_status)
 801f7ac:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d011      	beq.n	801f7d8 <http_process_handler+0x2ec>
					send_http_response_header(s, p_http_request->TYPE, file_len, http_status);
 801f7b4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f7b8:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f7bc:	681b      	ldr	r3, [r3, #0]
 801f7be:	7859      	ldrb	r1, [r3, #1]
 801f7c0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801f7c4:	f8b7 4222 	ldrh.w	r4, [r7, #546]	; 0x222
 801f7c8:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f7cc:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f7d0:	7818      	ldrb	r0, [r3, #0]
 801f7d2:	4623      	mov	r3, r4
 801f7d4:	f7ff fc7e 	bl	801f0d4 <send_http_response_header>
				if(http_status == STATUS_OK)
 801f7d8:	f8b7 3222 	ldrh.w	r3, [r7, #546]	; 0x222
 801f7dc:	2bc8      	cmp	r3, #200	; 0xc8
 801f7de:	f040 80a9 	bne.w	801f934 <http_process_handler+0x448>
					send_http_response_body(s, uri_name, http_response, content_addr, file_len);
 801f7e2:	4b0a      	ldr	r3, [pc, #40]	; (801f80c <http_process_handler+0x320>)
 801f7e4:	6819      	ldr	r1, [r3, #0]
 801f7e6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f7ea:	f507 720a 	add.w	r2, r7, #552	; 0x228
 801f7ee:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 801f7f2:	7810      	ldrb	r0, [r2, #0]
 801f7f4:	9300      	str	r3, [sp, #0]
 801f7f6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801f7fa:	460a      	mov	r2, r1
 801f7fc:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f800:	f7ff fcd4 	bl	801f1ac <send_http_response_body>
			break;
 801f804:	e096      	b.n	801f934 <http_process_handler+0x448>
 801f806:	bf00      	nop
 801f808:	200012dc 	.word	0x200012dc
 801f80c:	20001208 	.word	0x20001208
 801f810:	0803369c 	.word	0x0803369c
 801f814:	080336a0 	.word	0x080336a0
 801f818:	080336ac 	.word	0x080336ac
 801f81c:	080336b0 	.word	0x080336b0
 801f820:	080336c0 	.word	0x080336c0
 801f824:	080336c8 	.word	0x080336c8
 801f828:	200012d8 	.word	0x200012d8
 801f82c:	0803362c 	.word	0x0803362c
 801f830:	200012e4 	.word	0x200012e4

		case METHOD_POST :
			mid((char *)p_http_request->URI, "/", " HTTP", (char *)uri_buf);
 801f834:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f838:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f83c:	681b      	ldr	r3, [r3, #0]
 801f83e:	1c98      	adds	r0, r3, #2
 801f840:	f107 0308 	add.w	r3, r7, #8
 801f844:	4a3e      	ldr	r2, [pc, #248]	; (801f940 <http_process_handler+0x454>)
 801f846:	493f      	ldr	r1, [pc, #252]	; (801f944 <http_process_handler+0x458>)
 801f848:	f7ff f9ef 	bl	801ec2a <mid>
			uri_name = uri_buf;
 801f84c:	f107 0308 	add.w	r3, r7, #8
 801f850:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
			find_http_uri_type(&p_http_request->TYPE, uri_name);	// Check file type (HTML, TEXT, GIF, JPEG are included)
 801f854:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f858:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	3301      	adds	r3, #1
 801f860:	f8d7 1210 	ldr.w	r1, [r7, #528]	; 0x210
 801f864:	4618      	mov	r0, r3
 801f866:	f7fe ff03 	bl	801e670 <find_http_uri_type>
			printf("\r\n> HTTPSocket[%d] : HTTP Method POST\r\n", s);
			printf("> HTTPSocket[%d] : Request URI = %s ", s, uri_name);
			printf("Type = %d\r\n", p_http_request->TYPE);
#endif

			if(p_http_request->TYPE == PTYPE_CGI)	// HTTP POST Method; CGI Process
 801f86a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f86e:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	785b      	ldrb	r3, [r3, #1]
 801f876:	2b08      	cmp	r3, #8
 801f878:	d13c      	bne.n	801f8f4 <http_process_handler+0x408>
			{
				content_found = http_post_cgi_handler(uri_name, p_http_request, http_response, &file_len);
 801f87a:	4b33      	ldr	r3, [pc, #204]	; (801f948 <http_process_handler+0x45c>)
 801f87c:	681a      	ldr	r2, [r3, #0]
 801f87e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801f882:	f507 710a 	add.w	r1, r7, #552	; 0x228
 801f886:	f5a1 710a 	sub.w	r1, r1, #552	; 0x228
 801f88a:	6809      	ldr	r1, [r1, #0]
 801f88c:	f8d7 0210 	ldr.w	r0, [r7, #528]	; 0x210
 801f890:	f000 f988 	bl	801fba4 <http_post_cgi_handler>
 801f894:	4603      	mov	r3, r0
 801f896:	f887 3221 	strb.w	r3, [r7, #545]	; 0x221
#ifdef _HTTPSERVER_DEBUG_
				printf("> HTTPSocket[%d] : [CGI: %s] / Response len [ %ld ]byte\r\n", s, content_found?"Content found":"Content not found", file_len);
#endif
				if(content_found && (file_len <= (DATA_BUF_SIZE-(strlen(RES_CGIHEAD_OK)+8))))
 801f89a:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f89e:	2b00      	cmp	r3, #0
 801f8a0:	d01c      	beq.n	801f8dc <http_process_handler+0x3f0>
 801f8a2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f8a6:	f240 72be 	movw	r2, #1982	; 0x7be
 801f8aa:	4293      	cmp	r3, r2
 801f8ac:	d816      	bhi.n	801f8dc <http_process_handler+0x3f0>
				{
					send_http_response_cgi(s, pHTTP_TX, http_response, (uint16_t)file_len);
 801f8ae:	4b27      	ldr	r3, [pc, #156]	; (801f94c <http_process_handler+0x460>)
 801f8b0:	6819      	ldr	r1, [r3, #0]
 801f8b2:	4b25      	ldr	r3, [pc, #148]	; (801f948 <http_process_handler+0x45c>)
 801f8b4:	681a      	ldr	r2, [r3, #0]
 801f8b6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801f8ba:	b29c      	uxth	r4, r3
 801f8bc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f8c0:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f8c4:	7818      	ldrb	r0, [r3, #0]
 801f8c6:	4623      	mov	r3, r4
 801f8c8:	f7ff fdc8 	bl	801f45c <send_http_response_cgi>
					//TODO, maybefix
					//http_disconnect(s);

					// Reset the H/W for apply to the change configuration information
					if(content_found == HTTP_RESET) HTTPServer_ReStart();
 801f8cc:	f897 3221 	ldrb.w	r3, [r7, #545]	; 0x221
 801f8d0:	2b02      	cmp	r3, #2
 801f8d2:	d11b      	bne.n	801f90c <http_process_handler+0x420>
 801f8d4:	4b1e      	ldr	r3, [pc, #120]	; (801f950 <http_process_handler+0x464>)
 801f8d6:	681b      	ldr	r3, [r3, #0]
 801f8d8:	4798      	blx	r3
 801f8da:	e017      	b.n	801f90c <http_process_handler+0x420>
				}
				else
				{
					send_http_response_header(s, PTYPE_CGI, 0, STATUS_NOT_FOUND);
 801f8dc:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f8e0:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f8e4:	7818      	ldrb	r0, [r3, #0]
 801f8e6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f8ea:	2200      	movs	r2, #0
 801f8ec:	2108      	movs	r1, #8
 801f8ee:	f7ff fbf1 	bl	801f0d4 <send_http_response_header>
			}
			else	// HTTP POST Method; Content not found
			{
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
			}
			break;
 801f8f2:	e020      	b.n	801f936 <http_process_handler+0x44a>
				send_http_response_header(s, 0, 0, STATUS_NOT_FOUND);
 801f8f4:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f8f8:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f8fc:	7818      	ldrb	r0, [r3, #0]
 801f8fe:	f44f 73ca 	mov.w	r3, #404	; 0x194
 801f902:	2200      	movs	r2, #0
 801f904:	2100      	movs	r1, #0
 801f906:	f7ff fbe5 	bl	801f0d4 <send_http_response_header>
			break;
 801f90a:	e014      	b.n	801f936 <http_process_handler+0x44a>
 801f90c:	e013      	b.n	801f936 <http_process_handler+0x44a>

		default :
			http_status = STATUS_BAD_REQ;
 801f90e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801f912:	f8a7 3222 	strh.w	r3, [r7, #546]	; 0x222
			send_http_response_header(s, 0, 0, http_status);
 801f916:	f8b7 2222 	ldrh.w	r2, [r7, #546]	; 0x222
 801f91a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 801f91e:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 801f922:	7818      	ldrb	r0, [r3, #0]
 801f924:	4613      	mov	r3, r2
 801f926:	2200      	movs	r2, #0
 801f928:	2100      	movs	r1, #0
 801f92a:	f7ff fbd3 	bl	801f0d4 <send_http_response_header>
			break;
 801f92e:	e002      	b.n	801f936 <http_process_handler+0x44a>
	if((get_seqnum = getHTTPSequenceNum(s)) == -1) return; // exception handling; invalid number
 801f930:	bf00      	nop
 801f932:	e000      	b.n	801f936 <http_process_handler+0x44a>
			break;
 801f934:	bf00      	nop
	}
}
 801f936:	f507 770a 	add.w	r7, r7, #552	; 0x228
 801f93a:	46bd      	mov	sp, r7
 801f93c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801f940:	080336dc 	.word	0x080336dc
 801f944:	0803369c 	.word	0x0803369c
 801f948:	20001208 	.word	0x20001208
 801f94c:	200012d8 	.word	0x200012d8
 801f950:	20000120 	.word	0x20000120

0801f954 <httpServer_time_handler>:

void httpServer_time_handler(void)
{
 801f954:	b480      	push	{r7}
 801f956:	af00      	add	r7, sp, #0
	httpServer_tick_1s++;
 801f958:	4b04      	ldr	r3, [pc, #16]	; (801f96c <httpServer_time_handler+0x18>)
 801f95a:	681b      	ldr	r3, [r3, #0]
 801f95c:	3301      	adds	r3, #1
 801f95e:	4a03      	ldr	r2, [pc, #12]	; (801f96c <httpServer_time_handler+0x18>)
 801f960:	6013      	str	r3, [r2, #0]
}
 801f962:	bf00      	nop
 801f964:	46bd      	mov	sp, r7
 801f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f96a:	4770      	bx	lr
 801f96c:	200012e0 	.word	0x200012e0

0801f970 <get_httpServer_timecount>:

uint32_t get_httpServer_timecount(void)
{
 801f970:	b580      	push	{r7, lr}
 801f972:	af00      	add	r7, sp, #0
	delay_os_ms(1);
 801f974:	4b03      	ldr	r3, [pc, #12]	; (801f984 <get_httpServer_timecount+0x14>)
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	2001      	movs	r0, #1
 801f97a:	4798      	blx	r3
	return httpServer_tick_1s;
 801f97c:	4b02      	ldr	r3, [pc, #8]	; (801f988 <get_httpServer_timecount+0x18>)
 801f97e:	681b      	ldr	r3, [r3, #0]
}
 801f980:	4618      	mov	r0, r3
 801f982:	bd80      	pop	{r7, pc}
 801f984:	20000124 	.word	0x20000124
 801f988:	200012e0 	.word	0x200012e0

0801f98c <reg_httpServer_webContent>:



void reg_httpServer_webContent(uint8_t * content_name, uint8_t * content)
{
 801f98c:	b580      	push	{r7, lr}
 801f98e:	b084      	sub	sp, #16
 801f990:	af00      	add	r7, sp, #0
 801f992:	6078      	str	r0, [r7, #4]
 801f994:	6039      	str	r1, [r7, #0]
	uint16_t name_len;
	uint32_t content_len;

	if(content_name == NULL || content == NULL)
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d04e      	beq.n	801fa3a <reg_httpServer_webContent+0xae>
 801f99c:	683b      	ldr	r3, [r7, #0]
 801f99e:	2b00      	cmp	r3, #0
 801f9a0:	d04b      	beq.n	801fa3a <reg_httpServer_webContent+0xae>
	{
		return;
	}
	else if(total_content_cnt >= MAX_CONTENT_CALLBACK)
 801f9a2:	4b29      	ldr	r3, [pc, #164]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801f9a4:	881b      	ldrh	r3, [r3, #0]
 801f9a6:	2b03      	cmp	r3, #3
 801f9a8:	d849      	bhi.n	801fa3e <reg_httpServer_webContent+0xb2>
	{
		return;
	}

	name_len = strlen((char *)content_name);
 801f9aa:	6878      	ldr	r0, [r7, #4]
 801f9ac:	f7f0 fc78 	bl	80102a0 <strlen>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	81fb      	strh	r3, [r7, #14]
	content_len = strlen((char *)content);
 801f9b4:	6838      	ldr	r0, [r7, #0]
 801f9b6:	f7f0 fc73 	bl	80102a0 <strlen>
 801f9ba:	60b8      	str	r0, [r7, #8]

	//web_content[total_content_cnt].content_name = malloc(name_len+1);//todo only for test
	web_content[total_content_cnt].content_name = &content_name_massive[total_content_cnt];
 801f9bc:	4b22      	ldr	r3, [pc, #136]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801f9be:	881b      	ldrh	r3, [r3, #0]
 801f9c0:	461a      	mov	r2, r3
 801f9c2:	4b21      	ldr	r3, [pc, #132]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801f9c4:	881b      	ldrh	r3, [r3, #0]
 801f9c6:	4618      	mov	r0, r3
 801f9c8:	2332      	movs	r3, #50	; 0x32
 801f9ca:	fb02 f303 	mul.w	r3, r2, r3
 801f9ce:	4a1f      	ldr	r2, [pc, #124]	; (801fa4c <reg_httpServer_webContent+0xc0>)
 801f9d0:	441a      	add	r2, r3
 801f9d2:	491f      	ldr	r1, [pc, #124]	; (801fa50 <reg_httpServer_webContent+0xc4>)
 801f9d4:	4603      	mov	r3, r0
 801f9d6:	005b      	lsls	r3, r3, #1
 801f9d8:	4403      	add	r3, r0
 801f9da:	009b      	lsls	r3, r3, #2
 801f9dc:	440b      	add	r3, r1
 801f9de:	601a      	str	r2, [r3, #0]
	strcpy((char *)web_content[total_content_cnt].content_name, (const char *)content_name);
 801f9e0:	4b19      	ldr	r3, [pc, #100]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801f9e2:	881b      	ldrh	r3, [r3, #0]
 801f9e4:	4619      	mov	r1, r3
 801f9e6:	4a1a      	ldr	r2, [pc, #104]	; (801fa50 <reg_httpServer_webContent+0xc4>)
 801f9e8:	460b      	mov	r3, r1
 801f9ea:	005b      	lsls	r3, r3, #1
 801f9ec:	440b      	add	r3, r1
 801f9ee:	009b      	lsls	r3, r3, #2
 801f9f0:	4413      	add	r3, r2
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	6879      	ldr	r1, [r7, #4]
 801f9f6:	4618      	mov	r0, r3
 801f9f8:	f00e fa25 	bl	802de46 <strcpy>
	web_content[total_content_cnt].content_len = content_len;
 801f9fc:	4b12      	ldr	r3, [pc, #72]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801f9fe:	881b      	ldrh	r3, [r3, #0]
 801fa00:	4619      	mov	r1, r3
 801fa02:	4a13      	ldr	r2, [pc, #76]	; (801fa50 <reg_httpServer_webContent+0xc4>)
 801fa04:	460b      	mov	r3, r1
 801fa06:	005b      	lsls	r3, r3, #1
 801fa08:	440b      	add	r3, r1
 801fa0a:	009b      	lsls	r3, r3, #2
 801fa0c:	4413      	add	r3, r2
 801fa0e:	3304      	adds	r3, #4
 801fa10:	68ba      	ldr	r2, [r7, #8]
 801fa12:	601a      	str	r2, [r3, #0]
	web_content[total_content_cnt].content = content;
 801fa14:	4b0c      	ldr	r3, [pc, #48]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801fa16:	881b      	ldrh	r3, [r3, #0]
 801fa18:	4619      	mov	r1, r3
 801fa1a:	4a0d      	ldr	r2, [pc, #52]	; (801fa50 <reg_httpServer_webContent+0xc4>)
 801fa1c:	460b      	mov	r3, r1
 801fa1e:	005b      	lsls	r3, r3, #1
 801fa20:	440b      	add	r3, r1
 801fa22:	009b      	lsls	r3, r3, #2
 801fa24:	4413      	add	r3, r2
 801fa26:	3308      	adds	r3, #8
 801fa28:	683a      	ldr	r2, [r7, #0]
 801fa2a:	601a      	str	r2, [r3, #0]

	total_content_cnt++;
 801fa2c:	4b06      	ldr	r3, [pc, #24]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801fa2e:	881b      	ldrh	r3, [r3, #0]
 801fa30:	3301      	adds	r3, #1
 801fa32:	b29a      	uxth	r2, r3
 801fa34:	4b04      	ldr	r3, [pc, #16]	; (801fa48 <reg_httpServer_webContent+0xbc>)
 801fa36:	801a      	strh	r2, [r3, #0]
 801fa38:	e002      	b.n	801fa40 <reg_httpServer_webContent+0xb4>
		return;
 801fa3a:	bf00      	nop
 801fa3c:	e000      	b.n	801fa40 <reg_httpServer_webContent+0xb4>
		return;
 801fa3e:	bf00      	nop
}
 801fa40:	3710      	adds	r7, #16
 801fa42:	46bd      	mov	sp, r7
 801fa44:	bd80      	pop	{r7, pc}
 801fa46:	bf00      	nop
 801fa48:	200012d4 	.word	0x200012d4
 801fa4c:	2000120c 	.word	0x2000120c
 801fa50:	20001504 	.word	0x20001504

0801fa54 <find_userReg_webContent>:

	return ret;
}

uint8_t find_userReg_webContent(uint8_t * content_name, uint16_t * content_num, uint32_t * file_len)
{
 801fa54:	b580      	push	{r7, lr}
 801fa56:	b086      	sub	sp, #24
 801fa58:	af00      	add	r7, sp, #0
 801fa5a:	60f8      	str	r0, [r7, #12]
 801fa5c:	60b9      	str	r1, [r7, #8]
 801fa5e:	607a      	str	r2, [r7, #4]
	uint16_t i;
	uint8_t ret = 0; // '0' means 'File Not Found'
 801fa60:	2300      	movs	r3, #0
 801fa62:	757b      	strb	r3, [r7, #21]

	for(i = 0; i < total_content_cnt; i++)
 801fa64:	2300      	movs	r3, #0
 801fa66:	82fb      	strh	r3, [r7, #22]
 801fa68:	e022      	b.n	801fab0 <find_userReg_webContent+0x5c>
	{
		if(!strcmp((char *)content_name, (char *)web_content[i].content_name))
 801fa6a:	8afa      	ldrh	r2, [r7, #22]
 801fa6c:	4915      	ldr	r1, [pc, #84]	; (801fac4 <find_userReg_webContent+0x70>)
 801fa6e:	4613      	mov	r3, r2
 801fa70:	005b      	lsls	r3, r3, #1
 801fa72:	4413      	add	r3, r2
 801fa74:	009b      	lsls	r3, r3, #2
 801fa76:	440b      	add	r3, r1
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	4619      	mov	r1, r3
 801fa7c:	68f8      	ldr	r0, [r7, #12]
 801fa7e:	f7f0 fbaf 	bl	80101e0 <strcmp>
 801fa82:	4603      	mov	r3, r0
 801fa84:	2b00      	cmp	r3, #0
 801fa86:	d110      	bne.n	801faaa <find_userReg_webContent+0x56>
		{
			*file_len = web_content[i].content_len;
 801fa88:	8afa      	ldrh	r2, [r7, #22]
 801fa8a:	490e      	ldr	r1, [pc, #56]	; (801fac4 <find_userReg_webContent+0x70>)
 801fa8c:	4613      	mov	r3, r2
 801fa8e:	005b      	lsls	r3, r3, #1
 801fa90:	4413      	add	r3, r2
 801fa92:	009b      	lsls	r3, r3, #2
 801fa94:	440b      	add	r3, r1
 801fa96:	3304      	adds	r3, #4
 801fa98:	681a      	ldr	r2, [r3, #0]
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	601a      	str	r2, [r3, #0]
			*content_num = i;
 801fa9e:	68bb      	ldr	r3, [r7, #8]
 801faa0:	8afa      	ldrh	r2, [r7, #22]
 801faa2:	801a      	strh	r2, [r3, #0]
			ret = 1; // If the requested content found, ret set to '1' (Found)
 801faa4:	2301      	movs	r3, #1
 801faa6:	757b      	strb	r3, [r7, #21]
			break;
 801faa8:	e007      	b.n	801faba <find_userReg_webContent+0x66>
	for(i = 0; i < total_content_cnt; i++)
 801faaa:	8afb      	ldrh	r3, [r7, #22]
 801faac:	3301      	adds	r3, #1
 801faae:	82fb      	strh	r3, [r7, #22]
 801fab0:	4b05      	ldr	r3, [pc, #20]	; (801fac8 <find_userReg_webContent+0x74>)
 801fab2:	881b      	ldrh	r3, [r3, #0]
 801fab4:	8afa      	ldrh	r2, [r7, #22]
 801fab6:	429a      	cmp	r2, r3
 801fab8:	d3d7      	bcc.n	801fa6a <find_userReg_webContent+0x16>
		}
	}
	return ret;
 801faba:	7d7b      	ldrb	r3, [r7, #21]
}
 801fabc:	4618      	mov	r0, r3
 801fabe:	3718      	adds	r7, #24
 801fac0:	46bd      	mov	sp, r7
 801fac2:	bd80      	pop	{r7, pc}
 801fac4:	20001504 	.word	0x20001504
 801fac8:	200012d4 	.word	0x200012d4

0801facc <read_userReg_webContent>:


uint16_t read_userReg_webContent(uint16_t content_num, uint8_t * buf, uint32_t offset, uint16_t size)
{
 801facc:	b580      	push	{r7, lr}
 801face:	b086      	sub	sp, #24
 801fad0:	af00      	add	r7, sp, #0
 801fad2:	60b9      	str	r1, [r7, #8]
 801fad4:	607a      	str	r2, [r7, #4]
 801fad6:	461a      	mov	r2, r3
 801fad8:	4603      	mov	r3, r0
 801fada:	81fb      	strh	r3, [r7, #14]
 801fadc:	4613      	mov	r3, r2
 801fade:	81bb      	strh	r3, [r7, #12]
	uint16_t ret = 0;
 801fae0:	2300      	movs	r3, #0
 801fae2:	827b      	strh	r3, [r7, #18]
	uint8_t * ptr;

	if(content_num > total_content_cnt) return 0;
 801fae4:	4b16      	ldr	r3, [pc, #88]	; (801fb40 <read_userReg_webContent+0x74>)
 801fae6:	881b      	ldrh	r3, [r3, #0]
 801fae8:	89fa      	ldrh	r2, [r7, #14]
 801faea:	429a      	cmp	r2, r3
 801faec:	d901      	bls.n	801faf2 <read_userReg_webContent+0x26>
 801faee:	2300      	movs	r3, #0
 801faf0:	e021      	b.n	801fb36 <read_userReg_webContent+0x6a>

	ptr = web_content[content_num].content;
 801faf2:	89fa      	ldrh	r2, [r7, #14]
 801faf4:	4913      	ldr	r1, [pc, #76]	; (801fb44 <read_userReg_webContent+0x78>)
 801faf6:	4613      	mov	r3, r2
 801faf8:	005b      	lsls	r3, r3, #1
 801fafa:	4413      	add	r3, r2
 801fafc:	009b      	lsls	r3, r3, #2
 801fafe:	440b      	add	r3, r1
 801fb00:	3308      	adds	r3, #8
 801fb02:	681b      	ldr	r3, [r3, #0]
 801fb04:	617b      	str	r3, [r7, #20]
	if(offset) ptr += offset;
 801fb06:	687b      	ldr	r3, [r7, #4]
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	d003      	beq.n	801fb14 <read_userReg_webContent+0x48>
 801fb0c:	697a      	ldr	r2, [r7, #20]
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	4413      	add	r3, r2
 801fb12:	617b      	str	r3, [r7, #20]

	strncpy((char *)buf, (char *)ptr, size);
 801fb14:	89bb      	ldrh	r3, [r7, #12]
 801fb16:	461a      	mov	r2, r3
 801fb18:	6979      	ldr	r1, [r7, #20]
 801fb1a:	68b8      	ldr	r0, [r7, #8]
 801fb1c:	f00e f820 	bl	802db60 <strncpy>
	*(buf+size) = 0; // Insert '/0' for indicates the 'End of String' (null terminated)
 801fb20:	89bb      	ldrh	r3, [r7, #12]
 801fb22:	68ba      	ldr	r2, [r7, #8]
 801fb24:	4413      	add	r3, r2
 801fb26:	2200      	movs	r2, #0
 801fb28:	701a      	strb	r2, [r3, #0]

	ret = strlen((void *)buf);
 801fb2a:	68b8      	ldr	r0, [r7, #8]
 801fb2c:	f7f0 fbb8 	bl	80102a0 <strlen>
 801fb30:	4603      	mov	r3, r0
 801fb32:	827b      	strh	r3, [r7, #18]
	return ret;
 801fb34:	8a7b      	ldrh	r3, [r7, #18]
}
 801fb36:	4618      	mov	r0, r3
 801fb38:	3718      	adds	r7, #24
 801fb3a:	46bd      	mov	sp, r7
 801fb3c:	bd80      	pop	{r7, pc}
 801fb3e:	bf00      	nop
 801fb40:	200012d4 	.word	0x200012d4
 801fb44:	20001504 	.word	0x20001504

0801fb48 <http_get_cgi_handler>:

uint8_t (*predefined_set_cgi_processor)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len);
uint8_t (*predefined_get_cgi_processor)(uint8_t * uri_name, uint8_t * buf, uint16_t * len);

uint8_t http_get_cgi_handler(uint8_t * uri_name, uint8_t * buf, uint32_t * file_len)
{
 801fb48:	b580      	push	{r7, lr}
 801fb4a:	b086      	sub	sp, #24
 801fb4c:	af00      	add	r7, sp, #0
 801fb4e:	60f8      	str	r0, [r7, #12]
 801fb50:	60b9      	str	r1, [r7, #8]
 801fb52:	607a      	str	r2, [r7, #4]
	uint8_t ret = HTTP_OK;
 801fb54:	2301      	movs	r3, #1
 801fb56:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801fb58:	2300      	movs	r3, #0
 801fb5a:	82bb      	strh	r3, [r7, #20]

	if(predefined_get_cgi_processor(uri_name, buf, &len))
 801fb5c:	4b0f      	ldr	r3, [pc, #60]	; (801fb9c <http_get_cgi_handler+0x54>)
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	f107 0214 	add.w	r2, r7, #20
 801fb64:	68b9      	ldr	r1, [r7, #8]
 801fb66:	68f8      	ldr	r0, [r7, #12]
 801fb68:	4798      	blx	r3
 801fb6a:	4603      	mov	r3, r0
 801fb6c:	2b00      	cmp	r3, #0
 801fb6e:	d108      	bne.n	801fb82 <http_get_cgi_handler+0x3a>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fb70:	490b      	ldr	r1, [pc, #44]	; (801fba0 <http_get_cgi_handler+0x58>)
 801fb72:	68f8      	ldr	r0, [r7, #12]
 801fb74:	f7f0 fb34 	bl	80101e0 <strcmp>
 801fb78:	4603      	mov	r3, r0
 801fb7a:	2b00      	cmp	r3, #0
 801fb7c:	d001      	beq.n	801fb82 <http_get_cgi_handler+0x3a>
		;
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801fb7e:	2300      	movs	r3, #0
 801fb80:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fb82:	7dfb      	ldrb	r3, [r7, #23]
 801fb84:	2b00      	cmp	r3, #0
 801fb86:	d003      	beq.n	801fb90 <http_get_cgi_handler+0x48>
 801fb88:	8abb      	ldrh	r3, [r7, #20]
 801fb8a:	461a      	mov	r2, r3
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	601a      	str	r2, [r3, #0]
	return ret;
 801fb90:	7dfb      	ldrb	r3, [r7, #23]
}
 801fb92:	4618      	mov	r0, r3
 801fb94:	3718      	adds	r7, #24
 801fb96:	46bd      	mov	sp, r7
 801fb98:	bd80      	pop	{r7, pc}
 801fb9a:	bf00      	nop
 801fb9c:	20001538 	.word	0x20001538
 801fba0:	08033794 	.word	0x08033794

0801fba4 <http_post_cgi_handler>:

uint8_t http_post_cgi_handler(uint8_t * uri_name, st_http_request * p_http_request, uint8_t * buf, uint32_t * file_len)
{
 801fba4:	b590      	push	{r4, r7, lr}
 801fba6:	b087      	sub	sp, #28
 801fba8:	af00      	add	r7, sp, #0
 801fbaa:	60f8      	str	r0, [r7, #12]
 801fbac:	60b9      	str	r1, [r7, #8]
 801fbae:	607a      	str	r2, [r7, #4]
 801fbb0:	603b      	str	r3, [r7, #0]
	uint8_t ret = HTTP_OK;
 801fbb2:	2301      	movs	r3, #1
 801fbb4:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 801fbb6:	2300      	movs	r3, #0
 801fbb8:	82bb      	strh	r3, [r7, #20]
	uint8_t val = 0;
 801fbba:	2300      	movs	r3, #0
 801fbbc:	75bb      	strb	r3, [r7, #22]

	if(predefined_set_cgi_processor(uri_name, p_http_request->URI, buf, &len))
 801fbbe:	4b20      	ldr	r3, [pc, #128]	; (801fc40 <http_post_cgi_handler+0x9c>)
 801fbc0:	681c      	ldr	r4, [r3, #0]
 801fbc2:	68bb      	ldr	r3, [r7, #8]
 801fbc4:	1c99      	adds	r1, r3, #2
 801fbc6:	f107 0314 	add.w	r3, r7, #20
 801fbca:	687a      	ldr	r2, [r7, #4]
 801fbcc:	68f8      	ldr	r0, [r7, #12]
 801fbce:	47a0      	blx	r4
 801fbd0:	4603      	mov	r3, r0
 801fbd2:	2b00      	cmp	r3, #0
 801fbd4:	d127      	bne.n	801fc26 <http_post_cgi_handler+0x82>
	{
		;
	}
	else if(strcmp((const char *)uri_name, "example.cgi") == 0)
 801fbd6:	491b      	ldr	r1, [pc, #108]	; (801fc44 <http_post_cgi_handler+0xa0>)
 801fbd8:	68f8      	ldr	r0, [r7, #12]
 801fbda:	f7f0 fb01 	bl	80101e0 <strcmp>
 801fbde:	4603      	mov	r3, r0
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d10b      	bne.n	801fbfc <http_post_cgi_handler+0x58>
	{
		// To do
		val = 1;
 801fbe4:	2301      	movs	r3, #1
 801fbe6:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801fbe8:	7dbb      	ldrb	r3, [r7, #22]
 801fbea:	461a      	mov	r2, r3
 801fbec:	4916      	ldr	r1, [pc, #88]	; (801fc48 <http_post_cgi_handler+0xa4>)
 801fbee:	6878      	ldr	r0, [r7, #4]
 801fbf0:	f00d fe0c 	bl	802d80c <siprintf>
 801fbf4:	4603      	mov	r3, r0
 801fbf6:	b29b      	uxth	r3, r3
 801fbf8:	82bb      	strh	r3, [r7, #20]
 801fbfa:	e014      	b.n	801fc26 <http_post_cgi_handler+0x82>
	}
	else if(strcmp((const char *)uri_name, "settings_MQTT.cgi") == 0)
 801fbfc:	4913      	ldr	r1, [pc, #76]	; (801fc4c <http_post_cgi_handler+0xa8>)
 801fbfe:	68f8      	ldr	r0, [r7, #12]
 801fc00:	f7f0 faee 	bl	80101e0 <strcmp>
 801fc04:	4603      	mov	r3, r0
 801fc06:	2b00      	cmp	r3, #0
 801fc08:	d10b      	bne.n	801fc22 <http_post_cgi_handler+0x7e>
	{
		// To do
		val = 1;
 801fc0a:	2301      	movs	r3, #1
 801fc0c:	75bb      	strb	r3, [r7, #22]
		len = sprintf((char *)buf, "%d", val);
 801fc0e:	7dbb      	ldrb	r3, [r7, #22]
 801fc10:	461a      	mov	r2, r3
 801fc12:	490d      	ldr	r1, [pc, #52]	; (801fc48 <http_post_cgi_handler+0xa4>)
 801fc14:	6878      	ldr	r0, [r7, #4]
 801fc16:	f00d fdf9 	bl	802d80c <siprintf>
 801fc1a:	4603      	mov	r3, r0
 801fc1c:	b29b      	uxth	r3, r3
 801fc1e:	82bb      	strh	r3, [r7, #20]
 801fc20:	e001      	b.n	801fc26 <http_post_cgi_handler+0x82>
	}
	else
	{
		// CGI file not found
		ret = HTTP_FAILED;
 801fc22:	2300      	movs	r3, #0
 801fc24:	75fb      	strb	r3, [r7, #23]
	}

	if(ret)	*file_len = len;
 801fc26:	7dfb      	ldrb	r3, [r7, #23]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d003      	beq.n	801fc34 <http_post_cgi_handler+0x90>
 801fc2c:	8abb      	ldrh	r3, [r7, #20]
 801fc2e:	461a      	mov	r2, r3
 801fc30:	683b      	ldr	r3, [r7, #0]
 801fc32:	601a      	str	r2, [r3, #0]
	return ret;
 801fc34:	7dfb      	ldrb	r3, [r7, #23]
}
 801fc36:	4618      	mov	r0, r3
 801fc38:	371c      	adds	r7, #28
 801fc3a:	46bd      	mov	sp, r7
 801fc3c:	bd90      	pop	{r4, r7, pc}
 801fc3e:	bf00      	nop
 801fc40:	20001534 	.word	0x20001534
 801fc44:	08033794 	.word	0x08033794
 801fc48:	080337a0 	.word	0x080337a0
 801fc4c:	080337a4 	.word	0x080337a4

0801fc50 <default_get_cgi_processor>:

uint8_t default_get_cgi_processor(uint8_t * uri_name, uint8_t * buf, uint16_t * len)
{
 801fc50:	b480      	push	{r7}
 801fc52:	b085      	sub	sp, #20
 801fc54:	af00      	add	r7, sp, #0
 801fc56:	60f8      	str	r0, [r7, #12]
 801fc58:	60b9      	str	r1, [r7, #8]
 801fc5a:	607a      	str	r2, [r7, #4]

	;
}
 801fc5c:	bf00      	nop
 801fc5e:	4618      	mov	r0, r3
 801fc60:	3714      	adds	r7, #20
 801fc62:	46bd      	mov	sp, r7
 801fc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc68:	4770      	bx	lr

0801fc6a <default_set_cgi_processor>:

uint8_t default_set_cgi_processor(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)
{
 801fc6a:	b480      	push	{r7}
 801fc6c:	b085      	sub	sp, #20
 801fc6e:	af00      	add	r7, sp, #0
 801fc70:	60f8      	str	r0, [r7, #12]
 801fc72:	60b9      	str	r1, [r7, #8]
 801fc74:	607a      	str	r2, [r7, #4]
 801fc76:	603b      	str	r3, [r7, #0]
	;
}
 801fc78:	bf00      	nop
 801fc7a:	4618      	mov	r0, r3
 801fc7c:	3714      	adds	r7, #20
 801fc7e:	46bd      	mov	sp, r7
 801fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc84:	4770      	bx	lr
	...

0801fc88 <reg_external_post_cgi_processor>:

void reg_external_post_cgi_processor( uint8_t (*function)(uint8_t * uri_name, uint8_t * uri, uint8_t * buf, uint16_t * len)){
 801fc88:	b480      	push	{r7}
 801fc8a:	b083      	sub	sp, #12
 801fc8c:	af00      	add	r7, sp, #0
 801fc8e:	6078      	str	r0, [r7, #4]

	predefined_set_cgi_processor = default_set_cgi_processor;
 801fc90:	4b07      	ldr	r3, [pc, #28]	; (801fcb0 <reg_external_post_cgi_processor+0x28>)
 801fc92:	4a08      	ldr	r2, [pc, #32]	; (801fcb4 <reg_external_post_cgi_processor+0x2c>)
 801fc94:	601a      	str	r2, [r3, #0]
	if (function) {
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	2b00      	cmp	r3, #0
 801fc9a:	d002      	beq.n	801fca2 <reg_external_post_cgi_processor+0x1a>
		predefined_set_cgi_processor = function;
 801fc9c:	4a04      	ldr	r2, [pc, #16]	; (801fcb0 <reg_external_post_cgi_processor+0x28>)
 801fc9e:	687b      	ldr	r3, [r7, #4]
 801fca0:	6013      	str	r3, [r2, #0]
	}

}
 801fca2:	bf00      	nop
 801fca4:	370c      	adds	r7, #12
 801fca6:	46bd      	mov	sp, r7
 801fca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcac:	4770      	bx	lr
 801fcae:	bf00      	nop
 801fcb0:	20001534 	.word	0x20001534
 801fcb4:	0801fc6b 	.word	0x0801fc6b

0801fcb8 <reg_external_get_cgi_processor>:

void reg_external_get_cgi_processor(uint8_t (*function)(uint8_t * uri_name, uint8_t * buf, uint16_t * len)){
 801fcb8:	b480      	push	{r7}
 801fcba:	b083      	sub	sp, #12
 801fcbc:	af00      	add	r7, sp, #0
 801fcbe:	6078      	str	r0, [r7, #4]

	predefined_get_cgi_processor = default_get_cgi_processor;
 801fcc0:	4b07      	ldr	r3, [pc, #28]	; (801fce0 <reg_external_get_cgi_processor+0x28>)
 801fcc2:	4a08      	ldr	r2, [pc, #32]	; (801fce4 <reg_external_get_cgi_processor+0x2c>)
 801fcc4:	601a      	str	r2, [r3, #0]
	if (function) predefined_get_cgi_processor = function;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	d002      	beq.n	801fcd2 <reg_external_get_cgi_processor+0x1a>
 801fccc:	4a04      	ldr	r2, [pc, #16]	; (801fce0 <reg_external_get_cgi_processor+0x28>)
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	6013      	str	r3, [r2, #0]

}
 801fcd2:	bf00      	nop
 801fcd4:	370c      	adds	r7, #12
 801fcd6:	46bd      	mov	sp, r7
 801fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcdc:	4770      	bx	lr
 801fcde:	bf00      	nop
 801fce0:	20001538 	.word	0x20001538
 801fce4:	0801fc51 	.word	0x0801fc51

0801fce8 <proto_reset>:
void (*delay_ms)(uint32_t sec);

void (*ResetON)	(void);
void (*ResetOFF)(void);

void proto_reset(void){};
 801fce8:	b480      	push	{r7}
 801fcea:	af00      	add	r7, sp, #0
 801fcec:	bf00      	nop
 801fcee:	46bd      	mov	sp, r7
 801fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcf4:	4770      	bx	lr

0801fcf6 <proto_delay_func>:

void proto_delay_func(uint32_t sec){
 801fcf6:	b480      	push	{r7}
 801fcf8:	b083      	sub	sp, #12
 801fcfa:	af00      	add	r7, sp, #0
 801fcfc:	6078      	str	r0, [r7, #4]
	sec = sec * 10000;
 801fcfe:	687b      	ldr	r3, [r7, #4]
 801fd00:	f242 7210 	movw	r2, #10000	; 0x2710
 801fd04:	fb02 f303 	mul.w	r3, r2, r3
 801fd08:	607b      	str	r3, [r7, #4]

	while (sec){
 801fd0a:	e002      	b.n	801fd12 <proto_delay_func+0x1c>
		sec--;
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	3b01      	subs	r3, #1
 801fd10:	607b      	str	r3, [r7, #4]
	while (sec){
 801fd12:	687b      	ldr	r3, [r7, #4]
 801fd14:	2b00      	cmp	r3, #0
 801fd16:	d1f9      	bne.n	801fd0c <proto_delay_func+0x16>
	}

}
 801fd18:	bf00      	nop
 801fd1a:	bf00      	nop
 801fd1c:	370c      	adds	r7, #12
 801fd1e:	46bd      	mov	sp, r7
 801fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd24:	4770      	bx	lr
	...

0801fd28 <w5500_lib_init>:

void w5500_lib_init(wiz_NetInfo * NetInfoStructure)
{
 801fd28:	b480      	push	{r7}
 801fd2a:	b083      	sub	sp, #12
 801fd2c:	af00      	add	r7, sp, #0
 801fd2e:	6078      	str	r0, [r7, #4]
	NetInfo = NetInfoStructure;
 801fd30:	4a04      	ldr	r2, [pc, #16]	; (801fd44 <w5500_lib_init+0x1c>)
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	6013      	str	r3, [r2, #0]
}
 801fd36:	bf00      	nop
 801fd38:	370c      	adds	r7, #12
 801fd3a:	46bd      	mov	sp, r7
 801fd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd40:	4770      	bx	lr
 801fd42:	bf00      	nop
 801fd44:	20001540 	.word	0x20001540

0801fd48 <network_init>:

void network_init(void)
{	wiz_NetTimeout 	nettimeout;
 801fd48:	b580      	push	{r7, lr}
 801fd4a:	b082      	sub	sp, #8
 801fd4c:	af00      	add	r7, sp, #0

	nettimeout.retry_cnt	= 3;
 801fd4e:	2303      	movs	r3, #3
 801fd50:	713b      	strb	r3, [r7, #4]
	nettimeout.time_100us	= 500;
 801fd52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801fd56:	80fb      	strh	r3, [r7, #6]

	// Set Network information from netinfo structure
	ctlnetwork(CN_SET_NETINFO, NetInfo);
 801fd58:	4b07      	ldr	r3, [pc, #28]	; (801fd78 <network_init+0x30>)
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	4619      	mov	r1, r3
 801fd5e:	2000      	movs	r0, #0
 801fd60:	f7fa fa36 	bl	801a1d0 <ctlnetwork>
	ctlnetwork(CN_SET_TIMEOUT, (void*)&nettimeout);
 801fd64:	1d3b      	adds	r3, r7, #4
 801fd66:	4619      	mov	r1, r3
 801fd68:	2004      	movs	r0, #4
 801fd6a:	f7fa fa31 	bl	801a1d0 <ctlnetwork>
}
 801fd6e:	bf00      	nop
 801fd70:	3708      	adds	r7, #8
 801fd72:	46bd      	mov	sp, r7
 801fd74:	bd80      	pop	{r7, pc}
 801fd76:	bf00      	nop
 801fd78:	20001540 	.word	0x20001540

0801fd7c <Callback_IPConflict>:

void Callback_IPConflict(void)
{
 801fd7c:	b480      	push	{r7}
 801fd7e:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = false;
 801fd80:	4b03      	ldr	r3, [pc, #12]	; (801fd90 <Callback_IPConflict+0x14>)
 801fd82:	2200      	movs	r2, #0
 801fd84:	701a      	strb	r2, [r3, #0]
}
 801fd86:	bf00      	nop
 801fd88:	46bd      	mov	sp, r7
 801fd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd8e:	4770      	bx	lr
 801fd90:	2000153c 	.word	0x2000153c

0801fd94 <Callback_IPAssigned>:

void Callback_IPAssigned(void)
{
 801fd94:	b580      	push	{r7, lr}
 801fd96:	af00      	add	r7, sp, #0
   getIPfromDHCP(NetInfo->ip);
 801fd98:	4b11      	ldr	r3, [pc, #68]	; (801fde0 <Callback_IPAssigned+0x4c>)
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	3306      	adds	r3, #6
 801fd9e:	4618      	mov	r0, r3
 801fda0:	f7fc f9ac 	bl	801c0fc <getIPfromDHCP>
   getGWfromDHCP(NetInfo->gw);
 801fda4:	4b0e      	ldr	r3, [pc, #56]	; (801fde0 <Callback_IPAssigned+0x4c>)
 801fda6:	681b      	ldr	r3, [r3, #0]
 801fda8:	330e      	adds	r3, #14
 801fdaa:	4618      	mov	r0, r3
 801fdac:	f7fc f9c6 	bl	801c13c <getGWfromDHCP>
   getSNfromDHCP(NetInfo->sn);
 801fdb0:	4b0b      	ldr	r3, [pc, #44]	; (801fde0 <Callback_IPAssigned+0x4c>)
 801fdb2:	681b      	ldr	r3, [r3, #0]
 801fdb4:	330a      	adds	r3, #10
 801fdb6:	4618      	mov	r0, r3
 801fdb8:	f7fc f9e0 	bl	801c17c <getSNfromDHCP>
   getDNSfromDHCP(NetInfo->dns);
 801fdbc:	4b08      	ldr	r3, [pc, #32]	; (801fde0 <Callback_IPAssigned+0x4c>)
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	3312      	adds	r3, #18
 801fdc2:	4618      	mov	r0, r3
 801fdc4:	f7fc f9fa 	bl	801c1bc <getDNSfromDHCP>
   NetInfo->dhcp = NETINFO_DHCP;
 801fdc8:	4b05      	ldr	r3, [pc, #20]	; (801fde0 <Callback_IPAssigned+0x4c>)
 801fdca:	681b      	ldr	r3, [r3, #0]
 801fdcc:	2202      	movs	r2, #2
 801fdce:	759a      	strb	r2, [r3, #22]
   // Network initialization
   network_init();      // apply from dhcp
 801fdd0:	f7ff ffba 	bl	801fd48 <network_init>

   ip_dhcp_assigned = true;
 801fdd4:	4b03      	ldr	r3, [pc, #12]	; (801fde4 <Callback_IPAssigned+0x50>)
 801fdd6:	2201      	movs	r2, #1
 801fdd8:	701a      	strb	r2, [r3, #0]
#ifdef _MAIN_DEBUG_
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());//Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬â€�Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬Â¢Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â»Ãƒï¿½Ã‚Â¡Ãƒâ€˜Ã¢â‚¬Å“Ãƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¡Ãƒï¿½Ã‚Â Ãƒâ€˜Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã…Â¡Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã…Â  Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒâ€˜Ã‹Å“Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¯Â¿Â½ Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â°Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€™Ã¢â‚¬ËœÃƒï¿½Ã‚Â¡ÃƒÂ¢Ã¢â€šÂ¬Ã‚Â¹ Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â¦Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Â° Ãƒï¿½Ã‚Â¡Ãƒï¿½Ã†â€™Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒï¿½Ã¢â‚¬Â Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚ÂµÃƒï¿½Ã‚Â¡Ãƒï¿½Ã¢â‚¬Å¡Ãƒï¿½Ã‚Â Ãƒâ€šÃ‚Âµ DHCP
#endif
}
 801fdda:	bf00      	nop
 801fddc:	bd80      	pop	{r7, pc}
 801fdde:	bf00      	nop
 801fde0:	20001540 	.word	0x20001540
 801fde4:	2000153c 	.word	0x2000153c

0801fde8 <dhcp_rutine>:

void dhcp_rutine(void){
 801fde8:	b580      	push	{r7, lr}
 801fdea:	af00      	add	r7, sp, #0
	switch(DHCP_run())
 801fdec:	f7fb ff30 	bl	801bc50 <DHCP_run>
 801fdf0:	4603      	mov	r3, r0
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d004      	beq.n	801fe00 <dhcp_rutine+0x18>
 801fdf6:	2b00      	cmp	r3, #0
 801fdf8:	db09      	blt.n	801fe0e <dhcp_rutine+0x26>
 801fdfa:	3b02      	subs	r3, #2
 801fdfc:	2b02      	cmp	r3, #2
					DHCP_stop();      // if restart, recall DHCP_init()
					network_init();
					ip_dhcp_assigned = false;
				}
			default:
				break;
 801fdfe:	e006      	b.n	801fe0e <dhcp_rutine+0x26>
				my_dhcp_retry++;
 801fe00:	4b04      	ldr	r3, [pc, #16]	; (801fe14 <dhcp_rutine+0x2c>)
 801fe02:	781b      	ldrb	r3, [r3, #0]
 801fe04:	3301      	adds	r3, #1
 801fe06:	b2da      	uxtb	r2, r3
 801fe08:	4b02      	ldr	r3, [pc, #8]	; (801fe14 <dhcp_rutine+0x2c>)
 801fe0a:	701a      	strb	r2, [r3, #0]
				break;
 801fe0c:	e000      	b.n	801fe10 <dhcp_rutine+0x28>
				break;
 801fe0e:	bf00      	nop
			}
}
 801fe10:	bf00      	nop
 801fe12:	bd80      	pop	{r7, pc}
 801fe14:	20001544 	.word	0x20001544

0801fe18 <link_status>:

int link_status(void){
 801fe18:	b580      	push	{r7, lr}
 801fe1a:	b082      	sub	sp, #8
 801fe1c:	af00      	add	r7, sp, #0
	uint8_t temp;
	ctlwizchip(CW_GET_PHYLINK, (void*)&temp);
 801fe1e:	1dfb      	adds	r3, r7, #7
 801fe20:	4619      	mov	r1, r3
 801fe22:	200f      	movs	r0, #15
 801fe24:	f7fa f8f2 	bl	801a00c <ctlwizchip>
	if (!temp)ip_dhcp_assigned = false;
 801fe28:	79fb      	ldrb	r3, [r7, #7]
 801fe2a:	2b00      	cmp	r3, #0
 801fe2c:	d102      	bne.n	801fe34 <link_status+0x1c>
 801fe2e:	4b04      	ldr	r3, [pc, #16]	; (801fe40 <link_status+0x28>)
 801fe30:	2200      	movs	r2, #0
 801fe32:	701a      	strb	r2, [r3, #0]
	return temp;
 801fe34:	79fb      	ldrb	r3, [r7, #7]
}
 801fe36:	4618      	mov	r0, r3
 801fe38:	3708      	adds	r7, #8
 801fe3a:	46bd      	mov	sp, r7
 801fe3c:	bd80      	pop	{r7, pc}
 801fe3e:	bf00      	nop
 801fe40:	2000153c 	.word	0x2000153c

0801fe44 <link_duplex>:

int link_duplex(void){
 801fe44:	b580      	push	{r7, lr}
 801fe46:	b082      	sub	sp, #8
 801fe48:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fe4a:	1d3b      	adds	r3, r7, #4
 801fe4c:	4618      	mov	r0, r3
 801fe4e:	f7fa fc6f 	bl	801a730 <wizphy_getphystat>
	return phy_status.duplex;
 801fe52:	79fb      	ldrb	r3, [r7, #7]
}
 801fe54:	4618      	mov	r0, r3
 801fe56:	3708      	adds	r7, #8
 801fe58:	46bd      	mov	sp, r7
 801fe5a:	bd80      	pop	{r7, pc}

0801fe5c <link_speed>:

int link_speed(void){
 801fe5c:	b580      	push	{r7, lr}
 801fe5e:	b082      	sub	sp, #8
 801fe60:	af00      	add	r7, sp, #0
	wiz_PhyConf phy_status;
	wizphy_getphystat(&phy_status);
 801fe62:	1d3b      	adds	r3, r7, #4
 801fe64:	4618      	mov	r0, r3
 801fe66:	f7fa fc63 	bl	801a730 <wizphy_getphystat>
	return phy_status.speed;
 801fe6a:	79bb      	ldrb	r3, [r7, #6]
}
 801fe6c:	4618      	mov	r0, r3
 801fe6e:	3708      	adds	r7, #8
 801fe70:	46bd      	mov	sp, r7
 801fe72:	bd80      	pop	{r7, pc}

0801fe74 <assigned_ip>:

int assigned_ip(void){
 801fe74:	b480      	push	{r7}
 801fe76:	af00      	add	r7, sp, #0
	return ip_dhcp_assigned;
 801fe78:	4b03      	ldr	r3, [pc, #12]	; (801fe88 <assigned_ip+0x14>)
 801fe7a:	781b      	ldrb	r3, [r3, #0]
}
 801fe7c:	4618      	mov	r0, r3
 801fe7e:	46bd      	mov	sp, r7
 801fe80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe84:	4770      	bx	lr
 801fe86:	bf00      	nop
 801fe88:	2000153c 	.word	0x2000153c

0801fe8c <set_ip_aasigned>:

void set_ip_aasigned(void){
 801fe8c:	b480      	push	{r7}
 801fe8e:	af00      	add	r7, sp, #0
	ip_dhcp_assigned = true;
 801fe90:	4b03      	ldr	r3, [pc, #12]	; (801fea0 <set_ip_aasigned+0x14>)
 801fe92:	2201      	movs	r2, #1
 801fe94:	701a      	strb	r2, [r3, #0]
}
 801fe96:	bf00      	nop
 801fe98:	46bd      	mov	sp, r7
 801fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe9e:	4770      	bx	lr
 801fea0:	2000153c 	.word	0x2000153c

0801fea4 <w5500_init>:

int w5500_init(void)
{
 801fea4:	b590      	push	{r4, r7, lr}
 801fea6:	b085      	sub	sp, #20
 801fea8:	af00      	add	r7, sp, #0
  uint8_t W5500FifoSize[2][8] = {{2, 2, 2, 2, 2, 2, 2, 2, }, {2, 2, 2, 2, 2, 2, 2, 2}};
 801feaa:	4b18      	ldr	r3, [pc, #96]	; (801ff0c <w5500_init+0x68>)
 801feac:	463c      	mov	r4, r7
 801feae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801feb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ResetON();
 801feb4:	4b16      	ldr	r3, [pc, #88]	; (801ff10 <w5500_init+0x6c>)
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	4798      	blx	r3
  delay_ms(delay0_5s);
 801feba:	4b16      	ldr	r3, [pc, #88]	; (801ff14 <w5500_init+0x70>)
 801febc:	681b      	ldr	r3, [r3, #0]
 801febe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801fec2:	4798      	blx	r3
  ResetOFF();
 801fec4:	4b14      	ldr	r3, [pc, #80]	; (801ff18 <w5500_init+0x74>)
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	4798      	blx	r3
  delay_ms(delay3s);
 801feca:	4b12      	ldr	r3, [pc, #72]	; (801ff14 <w5500_init+0x70>)
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	f640 30b8 	movw	r0, #3000	; 0xbb8
 801fed2:	4798      	blx	r3

  if (ctlwizchip(CW_INIT_WIZCHIP, (void*)W5500FifoSize) == -1)
 801fed4:	463b      	mov	r3, r7
 801fed6:	4619      	mov	r1, r3
 801fed8:	2001      	movs	r0, #1
 801feda:	f7fa f897 	bl	801a00c <ctlwizchip>
 801fede:	4603      	mov	r3, r0
 801fee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fee4:	d102      	bne.n	801feec <w5500_init+0x48>
  {
	  return -1;
 801fee6:	f04f 33ff 	mov.w	r3, #4294967295
 801feea:	e00b      	b.n	801ff04 <w5500_init+0x60>
  }

  if (link_status()==PHY_LINK_OFF){
 801feec:	f7ff ff94 	bl	801fe18 <link_status>
 801fef0:	4603      	mov	r3, r0
 801fef2:	2b00      	cmp	r3, #0
 801fef4:	d102      	bne.n	801fefc <w5500_init+0x58>
	   return -1;
 801fef6:	f04f 33ff 	mov.w	r3, #4294967295
 801fefa:	e003      	b.n	801ff04 <w5500_init+0x60>
  }

  ip_dhcp_assigned = false;
 801fefc:	4b07      	ldr	r3, [pc, #28]	; (801ff1c <w5500_init+0x78>)
 801fefe:	2200      	movs	r2, #0
 801ff00:	701a      	strb	r2, [r3, #0]
  return 0;
 801ff02:	2300      	movs	r3, #0
}
 801ff04:	4618      	mov	r0, r3
 801ff06:	3714      	adds	r7, #20
 801ff08:	46bd      	mov	sp, r7
 801ff0a:	bd90      	pop	{r4, r7, pc}
 801ff0c:	080337b8 	.word	0x080337b8
 801ff10:	2000154c 	.word	0x2000154c
 801ff14:	20001548 	.word	0x20001548
 801ff18:	20001550 	.word	0x20001550
 801ff1c:	2000153c 	.word	0x2000153c

0801ff20 <w5500_delay_cb>:

void w5500_delay_cb(void (*function)(uint32_t time))
{
 801ff20:	b480      	push	{r7}
 801ff22:	b083      	sub	sp, #12
 801ff24:	af00      	add	r7, sp, #0
 801ff26:	6078      	str	r0, [r7, #4]
	delay_ms = proto_delay_func;
 801ff28:	4b07      	ldr	r3, [pc, #28]	; (801ff48 <w5500_delay_cb+0x28>)
 801ff2a:	4a08      	ldr	r2, [pc, #32]	; (801ff4c <w5500_delay_cb+0x2c>)
 801ff2c:	601a      	str	r2, [r3, #0]

	if (function){
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	2b00      	cmp	r3, #0
 801ff32:	d002      	beq.n	801ff3a <w5500_delay_cb+0x1a>
		delay_ms = function;
 801ff34:	4a04      	ldr	r2, [pc, #16]	; (801ff48 <w5500_delay_cb+0x28>)
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	6013      	str	r3, [r2, #0]
	}
}
 801ff3a:	bf00      	nop
 801ff3c:	370c      	adds	r7, #12
 801ff3e:	46bd      	mov	sp, r7
 801ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff44:	4770      	bx	lr
 801ff46:	bf00      	nop
 801ff48:	20001548 	.word	0x20001548
 801ff4c:	0801fcf7 	.word	0x0801fcf7

0801ff50 <w5500_reset_cb>:

void w5500_reset_cb(void(* reset)(void), void (* unreset)(void)){
 801ff50:	b480      	push	{r7}
 801ff52:	b083      	sub	sp, #12
 801ff54:	af00      	add	r7, sp, #0
 801ff56:	6078      	str	r0, [r7, #4]
 801ff58:	6039      	str	r1, [r7, #0]

	ResetON 	= proto_reset;
 801ff5a:	4b0c      	ldr	r3, [pc, #48]	; (801ff8c <w5500_reset_cb+0x3c>)
 801ff5c:	4a0c      	ldr	r2, [pc, #48]	; (801ff90 <w5500_reset_cb+0x40>)
 801ff5e:	601a      	str	r2, [r3, #0]
	ResetOFF	= proto_reset;
 801ff60:	4b0c      	ldr	r3, [pc, #48]	; (801ff94 <w5500_reset_cb+0x44>)
 801ff62:	4a0b      	ldr	r2, [pc, #44]	; (801ff90 <w5500_reset_cb+0x40>)
 801ff64:	601a      	str	r2, [r3, #0]
	if (reset) 	ResetON =  reset;
 801ff66:	687b      	ldr	r3, [r7, #4]
 801ff68:	2b00      	cmp	r3, #0
 801ff6a:	d002      	beq.n	801ff72 <w5500_reset_cb+0x22>
 801ff6c:	4a07      	ldr	r2, [pc, #28]	; (801ff8c <w5500_reset_cb+0x3c>)
 801ff6e:	687b      	ldr	r3, [r7, #4]
 801ff70:	6013      	str	r3, [r2, #0]
	if (unreset)ResetOFF = unreset;
 801ff72:	683b      	ldr	r3, [r7, #0]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d002      	beq.n	801ff7e <w5500_reset_cb+0x2e>
 801ff78:	4a06      	ldr	r2, [pc, #24]	; (801ff94 <w5500_reset_cb+0x44>)
 801ff7a:	683b      	ldr	r3, [r7, #0]
 801ff7c:	6013      	str	r3, [r2, #0]
}
 801ff7e:	bf00      	nop
 801ff80:	370c      	adds	r7, #12
 801ff82:	46bd      	mov	sp, r7
 801ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff88:	4770      	bx	lr
 801ff8a:	bf00      	nop
 801ff8c:	2000154c 	.word	0x2000154c
 801ff90:	0801fce9 	.word	0x0801fce9
 801ff94:	20001550 	.word	0x20001550

0801ff98 <Eth_reset_on>:
#include "ll_SPI_enh_abstractions.h"

SPI_HandleTypeDef spi_handler;


void Eth_reset_on(void){
 801ff98:	b580      	push	{r7, lr}
 801ff9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_RESET);
 801ff9c:	2200      	movs	r2, #0
 801ff9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801ffa2:	4802      	ldr	r0, [pc, #8]	; (801ffac <Eth_reset_on+0x14>)
 801ffa4:	f7f5 ff52 	bl	8015e4c <HAL_GPIO_WritePin>
}
 801ffa8:	bf00      	nop
 801ffaa:	bd80      	pop	{r7, pc}
 801ffac:	40020000 	.word	0x40020000

0801ffb0 <Eth_reset_off>:

void Eth_reset_off(void){
 801ffb0:	b580      	push	{r7, lr}
 801ffb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);
 801ffb4:	2201      	movs	r2, #1
 801ffb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801ffba:	4802      	ldr	r0, [pc, #8]	; (801ffc4 <Eth_reset_off+0x14>)
 801ffbc:	f7f5 ff46 	bl	8015e4c <HAL_GPIO_WritePin>
}
 801ffc0:	bf00      	nop
 801ffc2:	bd80      	pop	{r7, pc}
 801ffc4:	40020000 	.word	0x40020000

0801ffc8 <Eth_spi_select>:

void Eth_spi_select(void){
 801ffc8:	b580      	push	{r7, lr}
 801ffca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_RESET);
 801ffcc:	2200      	movs	r2, #0
 801ffce:	2140      	movs	r1, #64	; 0x40
 801ffd0:	4802      	ldr	r0, [pc, #8]	; (801ffdc <Eth_spi_select+0x14>)
 801ffd2:	f7f5 ff3b 	bl	8015e4c <HAL_GPIO_WritePin>
}
 801ffd6:	bf00      	nop
 801ffd8:	bd80      	pop	{r7, pc}
 801ffda:	bf00      	nop
 801ffdc:	40020400 	.word	0x40020400

0801ffe0 <Eth_spi_deselect>:

void Eth_spi_deselect(void){
 801ffe0:	b580      	push	{r7, lr}
 801ffe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,GPIO_PIN_SET);
 801ffe4:	2201      	movs	r2, #1
 801ffe6:	2140      	movs	r1, #64	; 0x40
 801ffe8:	4802      	ldr	r0, [pc, #8]	; (801fff4 <Eth_spi_deselect+0x14>)
 801ffea:	f7f5 ff2f 	bl	8015e4c <HAL_GPIO_WritePin>
}
 801ffee:	bf00      	nop
 801fff0:	bd80      	pop	{r7, pc}
 801fff2:	bf00      	nop
 801fff4:	40020400 	.word	0x40020400

0801fff8 <Reg_eth_spi>:

void Reg_eth_spi(SPI_HandleTypeDef hspi){
 801fff8:	b084      	sub	sp, #16
 801fffa:	b580      	push	{r7, lr}
 801fffc:	af00      	add	r7, sp, #0
 801fffe:	f107 0c08 	add.w	ip, r7, #8
 8020002:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	spi_handler = hspi;
 8020006:	4b07      	ldr	r3, [pc, #28]	; (8020024 <Reg_eth_spi+0x2c>)
 8020008:	4618      	mov	r0, r3
 802000a:	f107 0308 	add.w	r3, r7, #8
 802000e:	2258      	movs	r2, #88	; 0x58
 8020010:	4619      	mov	r1, r3
 8020012:	f00d ff20 	bl	802de56 <memcpy>
}
 8020016:	bf00      	nop
 8020018:	46bd      	mov	sp, r7
 802001a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802001e:	b004      	add	sp, #16
 8020020:	4770      	bx	lr
 8020022:	bf00      	nop
 8020024:	20001554 	.word	0x20001554

08020028 <Eth_spi_send_byte>:

void Eth_spi_send_byte(uint8_t byte){
 8020028:	b580      	push	{r7, lr}
 802002a:	b082      	sub	sp, #8
 802002c:	af00      	add	r7, sp, #0
 802002e:	4603      	mov	r3, r0
 8020030:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&spi_handler, &byte, 1, 5000);
 8020032:	1df9      	adds	r1, r7, #7
 8020034:	f241 3388 	movw	r3, #5000	; 0x1388
 8020038:	2201      	movs	r2, #1
 802003a:	4803      	ldr	r0, [pc, #12]	; (8020048 <Eth_spi_send_byte+0x20>)
 802003c:	f7f6 fcc5 	bl	80169ca <HAL_SPI_Transmit>
}
 8020040:	bf00      	nop
 8020042:	3708      	adds	r7, #8
 8020044:	46bd      	mov	sp, r7
 8020046:	bd80      	pop	{r7, pc}
 8020048:	20001554 	.word	0x20001554

0802004c <Eth_spi_resv_byte>:

uint8_t Eth_spi_resv_byte(void){
 802004c:	b580      	push	{r7, lr}
 802004e:	b082      	sub	sp, #8
 8020050:	af00      	add	r7, sp, #0
	uint8_t byte;

	HAL_SPI_Receive(&spi_handler, &byte, 1, 5000);
 8020052:	1df9      	adds	r1, r7, #7
 8020054:	f241 3388 	movw	r3, #5000	; 0x1388
 8020058:	2201      	movs	r2, #1
 802005a:	4804      	ldr	r0, [pc, #16]	; (802006c <Eth_spi_resv_byte+0x20>)
 802005c:	f7f6 fdf8 	bl	8016c50 <HAL_SPI_Receive>
	return byte;
 8020060:	79fb      	ldrb	r3, [r7, #7]
}
 8020062:	4618      	mov	r0, r3
 8020064:	3708      	adds	r7, #8
 8020066:	46bd      	mov	sp, r7
 8020068:	bd80      	pop	{r7, pc}
 802006a:	bf00      	nop
 802006c:	20001554 	.word	0x20001554

08020070 <MX_MBEDTLS_Init>:

/* USER CODE END 2 */

/* MBEDTLS init function */
void MX_MBEDTLS_Init(void)
{
 8020070:	b480      	push	{r7}
 8020072:	af00      	add	r7, sp, #0
  */
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */

}
 8020074:	bf00      	nop
 8020076:	46bd      	mov	sp, r7
 8020078:	f85d 7b04 	ldr.w	r7, [sp], #4
 802007c:	4770      	bx	lr
	...

08020080 <__NVIC_SetPriority>:
{
 8020080:	b480      	push	{r7}
 8020082:	b083      	sub	sp, #12
 8020084:	af00      	add	r7, sp, #0
 8020086:	4603      	mov	r3, r0
 8020088:	6039      	str	r1, [r7, #0]
 802008a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 802008c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020090:	2b00      	cmp	r3, #0
 8020092:	db0a      	blt.n	80200aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8020094:	683b      	ldr	r3, [r7, #0]
 8020096:	b2da      	uxtb	r2, r3
 8020098:	490c      	ldr	r1, [pc, #48]	; (80200cc <__NVIC_SetPriority+0x4c>)
 802009a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802009e:	0112      	lsls	r2, r2, #4
 80200a0:	b2d2      	uxtb	r2, r2
 80200a2:	440b      	add	r3, r1
 80200a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80200a8:	e00a      	b.n	80200c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80200aa:	683b      	ldr	r3, [r7, #0]
 80200ac:	b2da      	uxtb	r2, r3
 80200ae:	4908      	ldr	r1, [pc, #32]	; (80200d0 <__NVIC_SetPriority+0x50>)
 80200b0:	79fb      	ldrb	r3, [r7, #7]
 80200b2:	f003 030f 	and.w	r3, r3, #15
 80200b6:	3b04      	subs	r3, #4
 80200b8:	0112      	lsls	r2, r2, #4
 80200ba:	b2d2      	uxtb	r2, r2
 80200bc:	440b      	add	r3, r1
 80200be:	761a      	strb	r2, [r3, #24]
}
 80200c0:	bf00      	nop
 80200c2:	370c      	adds	r7, #12
 80200c4:	46bd      	mov	sp, r7
 80200c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200ca:	4770      	bx	lr
 80200cc:	e000e100 	.word	0xe000e100
 80200d0:	e000ed00 	.word	0xe000ed00

080200d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80200d4:	b580      	push	{r7, lr}
 80200d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80200d8:	4b05      	ldr	r3, [pc, #20]	; (80200f0 <SysTick_Handler+0x1c>)
 80200da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80200dc:	f002 fbe8 	bl	80228b0 <xTaskGetSchedulerState>
 80200e0:	4603      	mov	r3, r0
 80200e2:	2b01      	cmp	r3, #1
 80200e4:	d001      	beq.n	80200ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80200e6:	f003 facf 	bl	8023688 <xPortSysTickHandler>
  }
}
 80200ea:	bf00      	nop
 80200ec:	bd80      	pop	{r7, pc}
 80200ee:	bf00      	nop
 80200f0:	e000e010 	.word	0xe000e010

080200f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80200f4:	b580      	push	{r7, lr}
 80200f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80200f8:	2100      	movs	r1, #0
 80200fa:	f06f 0004 	mvn.w	r0, #4
 80200fe:	f7ff ffbf 	bl	8020080 <__NVIC_SetPriority>
#endif
}
 8020102:	bf00      	nop
 8020104:	bd80      	pop	{r7, pc}
	...

08020108 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8020108:	b480      	push	{r7}
 802010a:	b083      	sub	sp, #12
 802010c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802010e:	f3ef 8305 	mrs	r3, IPSR
 8020112:	603b      	str	r3, [r7, #0]
  return(result);
 8020114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8020116:	2b00      	cmp	r3, #0
 8020118:	d003      	beq.n	8020122 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 802011a:	f06f 0305 	mvn.w	r3, #5
 802011e:	607b      	str	r3, [r7, #4]
 8020120:	e00c      	b.n	802013c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8020122:	4b0a      	ldr	r3, [pc, #40]	; (802014c <osKernelInitialize+0x44>)
 8020124:	681b      	ldr	r3, [r3, #0]
 8020126:	2b00      	cmp	r3, #0
 8020128:	d105      	bne.n	8020136 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 802012a:	4b08      	ldr	r3, [pc, #32]	; (802014c <osKernelInitialize+0x44>)
 802012c:	2201      	movs	r2, #1
 802012e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8020130:	2300      	movs	r3, #0
 8020132:	607b      	str	r3, [r7, #4]
 8020134:	e002      	b.n	802013c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8020136:	f04f 33ff 	mov.w	r3, #4294967295
 802013a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 802013c:	687b      	ldr	r3, [r7, #4]
}
 802013e:	4618      	mov	r0, r3
 8020140:	370c      	adds	r7, #12
 8020142:	46bd      	mov	sp, r7
 8020144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020148:	4770      	bx	lr
 802014a:	bf00      	nop
 802014c:	200015ac 	.word	0x200015ac

08020150 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8020150:	b580      	push	{r7, lr}
 8020152:	b082      	sub	sp, #8
 8020154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020156:	f3ef 8305 	mrs	r3, IPSR
 802015a:	603b      	str	r3, [r7, #0]
  return(result);
 802015c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802015e:	2b00      	cmp	r3, #0
 8020160:	d003      	beq.n	802016a <osKernelStart+0x1a>
    stat = osErrorISR;
 8020162:	f06f 0305 	mvn.w	r3, #5
 8020166:	607b      	str	r3, [r7, #4]
 8020168:	e010      	b.n	802018c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 802016a:	4b0b      	ldr	r3, [pc, #44]	; (8020198 <osKernelStart+0x48>)
 802016c:	681b      	ldr	r3, [r3, #0]
 802016e:	2b01      	cmp	r3, #1
 8020170:	d109      	bne.n	8020186 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8020172:	f7ff ffbf 	bl	80200f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8020176:	4b08      	ldr	r3, [pc, #32]	; (8020198 <osKernelStart+0x48>)
 8020178:	2202      	movs	r2, #2
 802017a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 802017c:	f001 fece 	bl	8021f1c <vTaskStartScheduler>
      stat = osOK;
 8020180:	2300      	movs	r3, #0
 8020182:	607b      	str	r3, [r7, #4]
 8020184:	e002      	b.n	802018c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8020186:	f04f 33ff 	mov.w	r3, #4294967295
 802018a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 802018c:	687b      	ldr	r3, [r7, #4]
}
 802018e:	4618      	mov	r0, r3
 8020190:	3708      	adds	r7, #8
 8020192:	46bd      	mov	sp, r7
 8020194:	bd80      	pop	{r7, pc}
 8020196:	bf00      	nop
 8020198:	200015ac 	.word	0x200015ac

0802019c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 802019c:	b580      	push	{r7, lr}
 802019e:	b08e      	sub	sp, #56	; 0x38
 80201a0:	af04      	add	r7, sp, #16
 80201a2:	60f8      	str	r0, [r7, #12]
 80201a4:	60b9      	str	r1, [r7, #8]
 80201a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80201a8:	2300      	movs	r3, #0
 80201aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80201ac:	f3ef 8305 	mrs	r3, IPSR
 80201b0:	617b      	str	r3, [r7, #20]
  return(result);
 80201b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d17e      	bne.n	80202b6 <osThreadNew+0x11a>
 80201b8:	68fb      	ldr	r3, [r7, #12]
 80201ba:	2b00      	cmp	r3, #0
 80201bc:	d07b      	beq.n	80202b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80201be:	2380      	movs	r3, #128	; 0x80
 80201c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80201c2:	2318      	movs	r3, #24
 80201c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80201c6:	2300      	movs	r3, #0
 80201c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80201ca:	f04f 33ff 	mov.w	r3, #4294967295
 80201ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d045      	beq.n	8020262 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80201d6:	687b      	ldr	r3, [r7, #4]
 80201d8:	681b      	ldr	r3, [r3, #0]
 80201da:	2b00      	cmp	r3, #0
 80201dc:	d002      	beq.n	80201e4 <osThreadNew+0x48>
        name = attr->name;
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80201e4:	687b      	ldr	r3, [r7, #4]
 80201e6:	699b      	ldr	r3, [r3, #24]
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d002      	beq.n	80201f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	699b      	ldr	r3, [r3, #24]
 80201f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80201f2:	69fb      	ldr	r3, [r7, #28]
 80201f4:	2b00      	cmp	r3, #0
 80201f6:	d008      	beq.n	802020a <osThreadNew+0x6e>
 80201f8:	69fb      	ldr	r3, [r7, #28]
 80201fa:	2b38      	cmp	r3, #56	; 0x38
 80201fc:	d805      	bhi.n	802020a <osThreadNew+0x6e>
 80201fe:	687b      	ldr	r3, [r7, #4]
 8020200:	685b      	ldr	r3, [r3, #4]
 8020202:	f003 0301 	and.w	r3, r3, #1
 8020206:	2b00      	cmp	r3, #0
 8020208:	d001      	beq.n	802020e <osThreadNew+0x72>
        return (NULL);
 802020a:	2300      	movs	r3, #0
 802020c:	e054      	b.n	80202b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 802020e:	687b      	ldr	r3, [r7, #4]
 8020210:	695b      	ldr	r3, [r3, #20]
 8020212:	2b00      	cmp	r3, #0
 8020214:	d003      	beq.n	802021e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8020216:	687b      	ldr	r3, [r7, #4]
 8020218:	695b      	ldr	r3, [r3, #20]
 802021a:	089b      	lsrs	r3, r3, #2
 802021c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 802021e:	687b      	ldr	r3, [r7, #4]
 8020220:	689b      	ldr	r3, [r3, #8]
 8020222:	2b00      	cmp	r3, #0
 8020224:	d00e      	beq.n	8020244 <osThreadNew+0xa8>
 8020226:	687b      	ldr	r3, [r7, #4]
 8020228:	68db      	ldr	r3, [r3, #12]
 802022a:	2bab      	cmp	r3, #171	; 0xab
 802022c:	d90a      	bls.n	8020244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8020232:	2b00      	cmp	r3, #0
 8020234:	d006      	beq.n	8020244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8020236:	687b      	ldr	r3, [r7, #4]
 8020238:	695b      	ldr	r3, [r3, #20]
 802023a:	2b00      	cmp	r3, #0
 802023c:	d002      	beq.n	8020244 <osThreadNew+0xa8>
        mem = 1;
 802023e:	2301      	movs	r3, #1
 8020240:	61bb      	str	r3, [r7, #24]
 8020242:	e010      	b.n	8020266 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	689b      	ldr	r3, [r3, #8]
 8020248:	2b00      	cmp	r3, #0
 802024a:	d10c      	bne.n	8020266 <osThreadNew+0xca>
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	68db      	ldr	r3, [r3, #12]
 8020250:	2b00      	cmp	r3, #0
 8020252:	d108      	bne.n	8020266 <osThreadNew+0xca>
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	691b      	ldr	r3, [r3, #16]
 8020258:	2b00      	cmp	r3, #0
 802025a:	d104      	bne.n	8020266 <osThreadNew+0xca>
          mem = 0;
 802025c:	2300      	movs	r3, #0
 802025e:	61bb      	str	r3, [r7, #24]
 8020260:	e001      	b.n	8020266 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8020262:	2300      	movs	r3, #0
 8020264:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8020266:	69bb      	ldr	r3, [r7, #24]
 8020268:	2b01      	cmp	r3, #1
 802026a:	d110      	bne.n	802028e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 802026c:	687b      	ldr	r3, [r7, #4]
 802026e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8020270:	687a      	ldr	r2, [r7, #4]
 8020272:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8020274:	9202      	str	r2, [sp, #8]
 8020276:	9301      	str	r3, [sp, #4]
 8020278:	69fb      	ldr	r3, [r7, #28]
 802027a:	9300      	str	r3, [sp, #0]
 802027c:	68bb      	ldr	r3, [r7, #8]
 802027e:	6a3a      	ldr	r2, [r7, #32]
 8020280:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020282:	68f8      	ldr	r0, [r7, #12]
 8020284:	f001 fc5a 	bl	8021b3c <xTaskCreateStatic>
 8020288:	4603      	mov	r3, r0
 802028a:	613b      	str	r3, [r7, #16]
 802028c:	e013      	b.n	80202b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 802028e:	69bb      	ldr	r3, [r7, #24]
 8020290:	2b00      	cmp	r3, #0
 8020292:	d110      	bne.n	80202b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8020294:	6a3b      	ldr	r3, [r7, #32]
 8020296:	b29a      	uxth	r2, r3
 8020298:	f107 0310 	add.w	r3, r7, #16
 802029c:	9301      	str	r3, [sp, #4]
 802029e:	69fb      	ldr	r3, [r7, #28]
 80202a0:	9300      	str	r3, [sp, #0]
 80202a2:	68bb      	ldr	r3, [r7, #8]
 80202a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80202a6:	68f8      	ldr	r0, [r7, #12]
 80202a8:	f001 fca5 	bl	8021bf6 <xTaskCreate>
 80202ac:	4603      	mov	r3, r0
 80202ae:	2b01      	cmp	r3, #1
 80202b0:	d001      	beq.n	80202b6 <osThreadNew+0x11a>
            hTask = NULL;
 80202b2:	2300      	movs	r3, #0
 80202b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80202b6:	693b      	ldr	r3, [r7, #16]
}
 80202b8:	4618      	mov	r0, r3
 80202ba:	3728      	adds	r7, #40	; 0x28
 80202bc:	46bd      	mov	sp, r7
 80202be:	bd80      	pop	{r7, pc}

080202c0 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 80202c0:	b580      	push	{r7, lr}
 80202c2:	b086      	sub	sp, #24
 80202c4:	af00      	add	r7, sp, #0
 80202c6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80202cc:	f3ef 8305 	mrs	r3, IPSR
 80202d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80202d2:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 80202d4:	2b00      	cmp	r3, #0
 80202d6:	d102      	bne.n	80202de <osThreadGetStackSpace+0x1e>
 80202d8:	693b      	ldr	r3, [r7, #16]
 80202da:	2b00      	cmp	r3, #0
 80202dc:	d102      	bne.n	80202e4 <osThreadGetStackSpace+0x24>
    sz = 0U;
 80202de:	2300      	movs	r3, #0
 80202e0:	617b      	str	r3, [r7, #20]
 80202e2:	e005      	b.n	80202f0 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 80202e4:	6938      	ldr	r0, [r7, #16]
 80202e6:	f002 fa63 	bl	80227b0 <uxTaskGetStackHighWaterMark>
 80202ea:	4603      	mov	r3, r0
 80202ec:	009b      	lsls	r3, r3, #2
 80202ee:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 80202f0:	697b      	ldr	r3, [r7, #20]
}
 80202f2:	4618      	mov	r0, r3
 80202f4:	3718      	adds	r7, #24
 80202f6:	46bd      	mov	sp, r7
 80202f8:	bd80      	pop	{r7, pc}
	...

080202fc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80202fc:	b480      	push	{r7}
 80202fe:	b083      	sub	sp, #12
 8020300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020302:	f3ef 8305 	mrs	r3, IPSR
 8020306:	603b      	str	r3, [r7, #0]
  return(result);
 8020308:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 802030a:	2b00      	cmp	r3, #0
 802030c:	d003      	beq.n	8020316 <osThreadYield+0x1a>
    stat = osErrorISR;
 802030e:	f06f 0305 	mvn.w	r3, #5
 8020312:	607b      	str	r3, [r7, #4]
 8020314:	e009      	b.n	802032a <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8020316:	2300      	movs	r3, #0
 8020318:	607b      	str	r3, [r7, #4]
    taskYIELD();
 802031a:	4b07      	ldr	r3, [pc, #28]	; (8020338 <osThreadYield+0x3c>)
 802031c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020320:	601a      	str	r2, [r3, #0]
 8020322:	f3bf 8f4f 	dsb	sy
 8020326:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 802032a:	687b      	ldr	r3, [r7, #4]
}
 802032c:	4618      	mov	r0, r3
 802032e:	370c      	adds	r7, #12
 8020330:	46bd      	mov	sp, r7
 8020332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020336:	4770      	bx	lr
 8020338:	e000ed04 	.word	0xe000ed04

0802033c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 802033c:	b580      	push	{r7, lr}
 802033e:	b084      	sub	sp, #16
 8020340:	af00      	add	r7, sp, #0
 8020342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020344:	f3ef 8305 	mrs	r3, IPSR
 8020348:	60bb      	str	r3, [r7, #8]
  return(result);
 802034a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 802034c:	2b00      	cmp	r3, #0
 802034e:	d003      	beq.n	8020358 <osDelay+0x1c>
    stat = osErrorISR;
 8020350:	f06f 0305 	mvn.w	r3, #5
 8020354:	60fb      	str	r3, [r7, #12]
 8020356:	e007      	b.n	8020368 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8020358:	2300      	movs	r3, #0
 802035a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 802035c:	687b      	ldr	r3, [r7, #4]
 802035e:	2b00      	cmp	r3, #0
 8020360:	d002      	beq.n	8020368 <osDelay+0x2c>
      vTaskDelay(ticks);
 8020362:	6878      	ldr	r0, [r7, #4]
 8020364:	f001 fda6 	bl	8021eb4 <vTaskDelay>
    }
  }

  return (stat);
 8020368:	68fb      	ldr	r3, [r7, #12]
}
 802036a:	4618      	mov	r0, r3
 802036c:	3710      	adds	r7, #16
 802036e:	46bd      	mov	sp, r7
 8020370:	bd80      	pop	{r7, pc}

08020372 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8020372:	b580      	push	{r7, lr}
 8020374:	b088      	sub	sp, #32
 8020376:	af00      	add	r7, sp, #0
 8020378:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 802037a:	2300      	movs	r3, #0
 802037c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802037e:	f3ef 8305 	mrs	r3, IPSR
 8020382:	60bb      	str	r3, [r7, #8]
  return(result);
 8020384:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8020386:	2b00      	cmp	r3, #0
 8020388:	d174      	bne.n	8020474 <osMutexNew+0x102>
    if (attr != NULL) {
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	2b00      	cmp	r3, #0
 802038e:	d003      	beq.n	8020398 <osMutexNew+0x26>
      type = attr->attr_bits;
 8020390:	687b      	ldr	r3, [r7, #4]
 8020392:	685b      	ldr	r3, [r3, #4]
 8020394:	61bb      	str	r3, [r7, #24]
 8020396:	e001      	b.n	802039c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8020398:	2300      	movs	r3, #0
 802039a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 802039c:	69bb      	ldr	r3, [r7, #24]
 802039e:	f003 0301 	and.w	r3, r3, #1
 80203a2:	2b00      	cmp	r3, #0
 80203a4:	d002      	beq.n	80203ac <osMutexNew+0x3a>
      rmtx = 1U;
 80203a6:	2301      	movs	r3, #1
 80203a8:	617b      	str	r3, [r7, #20]
 80203aa:	e001      	b.n	80203b0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80203ac:	2300      	movs	r3, #0
 80203ae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80203b0:	69bb      	ldr	r3, [r7, #24]
 80203b2:	f003 0308 	and.w	r3, r3, #8
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	d15c      	bne.n	8020474 <osMutexNew+0x102>
      mem = -1;
 80203ba:	f04f 33ff 	mov.w	r3, #4294967295
 80203be:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80203c0:	687b      	ldr	r3, [r7, #4]
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d015      	beq.n	80203f2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	689b      	ldr	r3, [r3, #8]
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	d006      	beq.n	80203dc <osMutexNew+0x6a>
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	68db      	ldr	r3, [r3, #12]
 80203d2:	2b4f      	cmp	r3, #79	; 0x4f
 80203d4:	d902      	bls.n	80203dc <osMutexNew+0x6a>
          mem = 1;
 80203d6:	2301      	movs	r3, #1
 80203d8:	613b      	str	r3, [r7, #16]
 80203da:	e00c      	b.n	80203f6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80203dc:	687b      	ldr	r3, [r7, #4]
 80203de:	689b      	ldr	r3, [r3, #8]
 80203e0:	2b00      	cmp	r3, #0
 80203e2:	d108      	bne.n	80203f6 <osMutexNew+0x84>
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	68db      	ldr	r3, [r3, #12]
 80203e8:	2b00      	cmp	r3, #0
 80203ea:	d104      	bne.n	80203f6 <osMutexNew+0x84>
            mem = 0;
 80203ec:	2300      	movs	r3, #0
 80203ee:	613b      	str	r3, [r7, #16]
 80203f0:	e001      	b.n	80203f6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80203f2:	2300      	movs	r3, #0
 80203f4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80203f6:	693b      	ldr	r3, [r7, #16]
 80203f8:	2b01      	cmp	r3, #1
 80203fa:	d112      	bne.n	8020422 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80203fc:	697b      	ldr	r3, [r7, #20]
 80203fe:	2b00      	cmp	r3, #0
 8020400:	d007      	beq.n	8020412 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	689b      	ldr	r3, [r3, #8]
 8020406:	4619      	mov	r1, r3
 8020408:	2004      	movs	r0, #4
 802040a:	f000 fc68 	bl	8020cde <xQueueCreateMutexStatic>
 802040e:	61f8      	str	r0, [r7, #28]
 8020410:	e016      	b.n	8020440 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8020412:	687b      	ldr	r3, [r7, #4]
 8020414:	689b      	ldr	r3, [r3, #8]
 8020416:	4619      	mov	r1, r3
 8020418:	2001      	movs	r0, #1
 802041a:	f000 fc60 	bl	8020cde <xQueueCreateMutexStatic>
 802041e:	61f8      	str	r0, [r7, #28]
 8020420:	e00e      	b.n	8020440 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8020422:	693b      	ldr	r3, [r7, #16]
 8020424:	2b00      	cmp	r3, #0
 8020426:	d10b      	bne.n	8020440 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8020428:	697b      	ldr	r3, [r7, #20]
 802042a:	2b00      	cmp	r3, #0
 802042c:	d004      	beq.n	8020438 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 802042e:	2004      	movs	r0, #4
 8020430:	f000 fc3d 	bl	8020cae <xQueueCreateMutex>
 8020434:	61f8      	str	r0, [r7, #28]
 8020436:	e003      	b.n	8020440 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8020438:	2001      	movs	r0, #1
 802043a:	f000 fc38 	bl	8020cae <xQueueCreateMutex>
 802043e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8020440:	69fb      	ldr	r3, [r7, #28]
 8020442:	2b00      	cmp	r3, #0
 8020444:	d00c      	beq.n	8020460 <osMutexNew+0xee>
        if (attr != NULL) {
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	2b00      	cmp	r3, #0
 802044a:	d003      	beq.n	8020454 <osMutexNew+0xe2>
          name = attr->name;
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	681b      	ldr	r3, [r3, #0]
 8020450:	60fb      	str	r3, [r7, #12]
 8020452:	e001      	b.n	8020458 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8020454:	2300      	movs	r3, #0
 8020456:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8020458:	68f9      	ldr	r1, [r7, #12]
 802045a:	69f8      	ldr	r0, [r7, #28]
 802045c:	f001 fb10 	bl	8021a80 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8020460:	69fb      	ldr	r3, [r7, #28]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d006      	beq.n	8020474 <osMutexNew+0x102>
 8020466:	697b      	ldr	r3, [r7, #20]
 8020468:	2b00      	cmp	r3, #0
 802046a:	d003      	beq.n	8020474 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 802046c:	69fb      	ldr	r3, [r7, #28]
 802046e:	f043 0301 	orr.w	r3, r3, #1
 8020472:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8020474:	69fb      	ldr	r3, [r7, #28]
}
 8020476:	4618      	mov	r0, r3
 8020478:	3720      	adds	r7, #32
 802047a:	46bd      	mov	sp, r7
 802047c:	bd80      	pop	{r7, pc}

0802047e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 802047e:	b580      	push	{r7, lr}
 8020480:	b086      	sub	sp, #24
 8020482:	af00      	add	r7, sp, #0
 8020484:	6078      	str	r0, [r7, #4]
 8020486:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	f023 0301 	bic.w	r3, r3, #1
 802048e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	f003 0301 	and.w	r3, r3, #1
 8020496:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8020498:	2300      	movs	r3, #0
 802049a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802049c:	f3ef 8305 	mrs	r3, IPSR
 80204a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80204a2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80204a4:	2b00      	cmp	r3, #0
 80204a6:	d003      	beq.n	80204b0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80204a8:	f06f 0305 	mvn.w	r3, #5
 80204ac:	617b      	str	r3, [r7, #20]
 80204ae:	e02c      	b.n	802050a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80204b0:	693b      	ldr	r3, [r7, #16]
 80204b2:	2b00      	cmp	r3, #0
 80204b4:	d103      	bne.n	80204be <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80204b6:	f06f 0303 	mvn.w	r3, #3
 80204ba:	617b      	str	r3, [r7, #20]
 80204bc:	e025      	b.n	802050a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80204be:	68fb      	ldr	r3, [r7, #12]
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	d011      	beq.n	80204e8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80204c4:	6839      	ldr	r1, [r7, #0]
 80204c6:	6938      	ldr	r0, [r7, #16]
 80204c8:	f000 fc58 	bl	8020d7c <xQueueTakeMutexRecursive>
 80204cc:	4603      	mov	r3, r0
 80204ce:	2b01      	cmp	r3, #1
 80204d0:	d01b      	beq.n	802050a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80204d2:	683b      	ldr	r3, [r7, #0]
 80204d4:	2b00      	cmp	r3, #0
 80204d6:	d003      	beq.n	80204e0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80204d8:	f06f 0301 	mvn.w	r3, #1
 80204dc:	617b      	str	r3, [r7, #20]
 80204de:	e014      	b.n	802050a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80204e0:	f06f 0302 	mvn.w	r3, #2
 80204e4:	617b      	str	r3, [r7, #20]
 80204e6:	e010      	b.n	802050a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80204e8:	6839      	ldr	r1, [r7, #0]
 80204ea:	6938      	ldr	r0, [r7, #16]
 80204ec:	f000 fef6 	bl	80212dc <xQueueSemaphoreTake>
 80204f0:	4603      	mov	r3, r0
 80204f2:	2b01      	cmp	r3, #1
 80204f4:	d009      	beq.n	802050a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80204f6:	683b      	ldr	r3, [r7, #0]
 80204f8:	2b00      	cmp	r3, #0
 80204fa:	d003      	beq.n	8020504 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80204fc:	f06f 0301 	mvn.w	r3, #1
 8020500:	617b      	str	r3, [r7, #20]
 8020502:	e002      	b.n	802050a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8020504:	f06f 0302 	mvn.w	r3, #2
 8020508:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 802050a:	697b      	ldr	r3, [r7, #20]
}
 802050c:	4618      	mov	r0, r3
 802050e:	3718      	adds	r7, #24
 8020510:	46bd      	mov	sp, r7
 8020512:	bd80      	pop	{r7, pc}

08020514 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8020514:	b580      	push	{r7, lr}
 8020516:	b086      	sub	sp, #24
 8020518:	af00      	add	r7, sp, #0
 802051a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	f023 0301 	bic.w	r3, r3, #1
 8020522:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8020524:	687b      	ldr	r3, [r7, #4]
 8020526:	f003 0301 	and.w	r3, r3, #1
 802052a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 802052c:	2300      	movs	r3, #0
 802052e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020530:	f3ef 8305 	mrs	r3, IPSR
 8020534:	60bb      	str	r3, [r7, #8]
  return(result);
 8020536:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8020538:	2b00      	cmp	r3, #0
 802053a:	d003      	beq.n	8020544 <osMutexRelease+0x30>
    stat = osErrorISR;
 802053c:	f06f 0305 	mvn.w	r3, #5
 8020540:	617b      	str	r3, [r7, #20]
 8020542:	e01f      	b.n	8020584 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8020544:	693b      	ldr	r3, [r7, #16]
 8020546:	2b00      	cmp	r3, #0
 8020548:	d103      	bne.n	8020552 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 802054a:	f06f 0303 	mvn.w	r3, #3
 802054e:	617b      	str	r3, [r7, #20]
 8020550:	e018      	b.n	8020584 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8020552:	68fb      	ldr	r3, [r7, #12]
 8020554:	2b00      	cmp	r3, #0
 8020556:	d009      	beq.n	802056c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8020558:	6938      	ldr	r0, [r7, #16]
 802055a:	f000 fbdb 	bl	8020d14 <xQueueGiveMutexRecursive>
 802055e:	4603      	mov	r3, r0
 8020560:	2b01      	cmp	r3, #1
 8020562:	d00f      	beq.n	8020584 <osMutexRelease+0x70>
        stat = osErrorResource;
 8020564:	f06f 0302 	mvn.w	r3, #2
 8020568:	617b      	str	r3, [r7, #20]
 802056a:	e00b      	b.n	8020584 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 802056c:	2300      	movs	r3, #0
 802056e:	2200      	movs	r2, #0
 8020570:	2100      	movs	r1, #0
 8020572:	6938      	ldr	r0, [r7, #16]
 8020574:	f000 fc38 	bl	8020de8 <xQueueGenericSend>
 8020578:	4603      	mov	r3, r0
 802057a:	2b01      	cmp	r3, #1
 802057c:	d002      	beq.n	8020584 <osMutexRelease+0x70>
        stat = osErrorResource;
 802057e:	f06f 0302 	mvn.w	r3, #2
 8020582:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8020584:	697b      	ldr	r3, [r7, #20]
}
 8020586:	4618      	mov	r0, r3
 8020588:	3718      	adds	r7, #24
 802058a:	46bd      	mov	sp, r7
 802058c:	bd80      	pop	{r7, pc}

0802058e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 802058e:	b580      	push	{r7, lr}
 8020590:	b08a      	sub	sp, #40	; 0x28
 8020592:	af02      	add	r7, sp, #8
 8020594:	60f8      	str	r0, [r7, #12]
 8020596:	60b9      	str	r1, [r7, #8]
 8020598:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 802059a:	2300      	movs	r3, #0
 802059c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802059e:	f3ef 8305 	mrs	r3, IPSR
 80205a2:	613b      	str	r3, [r7, #16]
  return(result);
 80205a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80205a6:	2b00      	cmp	r3, #0
 80205a8:	d15f      	bne.n	802066a <osMessageQueueNew+0xdc>
 80205aa:	68fb      	ldr	r3, [r7, #12]
 80205ac:	2b00      	cmp	r3, #0
 80205ae:	d05c      	beq.n	802066a <osMessageQueueNew+0xdc>
 80205b0:	68bb      	ldr	r3, [r7, #8]
 80205b2:	2b00      	cmp	r3, #0
 80205b4:	d059      	beq.n	802066a <osMessageQueueNew+0xdc>
    mem = -1;
 80205b6:	f04f 33ff 	mov.w	r3, #4294967295
 80205ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80205bc:	687b      	ldr	r3, [r7, #4]
 80205be:	2b00      	cmp	r3, #0
 80205c0:	d029      	beq.n	8020616 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80205c2:	687b      	ldr	r3, [r7, #4]
 80205c4:	689b      	ldr	r3, [r3, #8]
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d012      	beq.n	80205f0 <osMessageQueueNew+0x62>
 80205ca:	687b      	ldr	r3, [r7, #4]
 80205cc:	68db      	ldr	r3, [r3, #12]
 80205ce:	2b4f      	cmp	r3, #79	; 0x4f
 80205d0:	d90e      	bls.n	80205f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80205d2:	687b      	ldr	r3, [r7, #4]
 80205d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80205d6:	2b00      	cmp	r3, #0
 80205d8:	d00a      	beq.n	80205f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80205da:	687b      	ldr	r3, [r7, #4]
 80205dc:	695a      	ldr	r2, [r3, #20]
 80205de:	68fb      	ldr	r3, [r7, #12]
 80205e0:	68b9      	ldr	r1, [r7, #8]
 80205e2:	fb01 f303 	mul.w	r3, r1, r3
 80205e6:	429a      	cmp	r2, r3
 80205e8:	d302      	bcc.n	80205f0 <osMessageQueueNew+0x62>
        mem = 1;
 80205ea:	2301      	movs	r3, #1
 80205ec:	61bb      	str	r3, [r7, #24]
 80205ee:	e014      	b.n	802061a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	689b      	ldr	r3, [r3, #8]
 80205f4:	2b00      	cmp	r3, #0
 80205f6:	d110      	bne.n	802061a <osMessageQueueNew+0x8c>
 80205f8:	687b      	ldr	r3, [r7, #4]
 80205fa:	68db      	ldr	r3, [r3, #12]
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	d10c      	bne.n	802061a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8020604:	2b00      	cmp	r3, #0
 8020606:	d108      	bne.n	802061a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8020608:	687b      	ldr	r3, [r7, #4]
 802060a:	695b      	ldr	r3, [r3, #20]
 802060c:	2b00      	cmp	r3, #0
 802060e:	d104      	bne.n	802061a <osMessageQueueNew+0x8c>
          mem = 0;
 8020610:	2300      	movs	r3, #0
 8020612:	61bb      	str	r3, [r7, #24]
 8020614:	e001      	b.n	802061a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8020616:	2300      	movs	r3, #0
 8020618:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 802061a:	69bb      	ldr	r3, [r7, #24]
 802061c:	2b01      	cmp	r3, #1
 802061e:	d10b      	bne.n	8020638 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8020620:	687b      	ldr	r3, [r7, #4]
 8020622:	691a      	ldr	r2, [r3, #16]
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	689b      	ldr	r3, [r3, #8]
 8020628:	2100      	movs	r1, #0
 802062a:	9100      	str	r1, [sp, #0]
 802062c:	68b9      	ldr	r1, [r7, #8]
 802062e:	68f8      	ldr	r0, [r7, #12]
 8020630:	f000 fa4e 	bl	8020ad0 <xQueueGenericCreateStatic>
 8020634:	61f8      	str	r0, [r7, #28]
 8020636:	e008      	b.n	802064a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8020638:	69bb      	ldr	r3, [r7, #24]
 802063a:	2b00      	cmp	r3, #0
 802063c:	d105      	bne.n	802064a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 802063e:	2200      	movs	r2, #0
 8020640:	68b9      	ldr	r1, [r7, #8]
 8020642:	68f8      	ldr	r0, [r7, #12]
 8020644:	f000 fabc 	bl	8020bc0 <xQueueGenericCreate>
 8020648:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 802064a:	69fb      	ldr	r3, [r7, #28]
 802064c:	2b00      	cmp	r3, #0
 802064e:	d00c      	beq.n	802066a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	2b00      	cmp	r3, #0
 8020654:	d003      	beq.n	802065e <osMessageQueueNew+0xd0>
        name = attr->name;
 8020656:	687b      	ldr	r3, [r7, #4]
 8020658:	681b      	ldr	r3, [r3, #0]
 802065a:	617b      	str	r3, [r7, #20]
 802065c:	e001      	b.n	8020662 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 802065e:	2300      	movs	r3, #0
 8020660:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8020662:	6979      	ldr	r1, [r7, #20]
 8020664:	69f8      	ldr	r0, [r7, #28]
 8020666:	f001 fa0b 	bl	8021a80 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 802066a:	69fb      	ldr	r3, [r7, #28]
}
 802066c:	4618      	mov	r0, r3
 802066e:	3720      	adds	r7, #32
 8020670:	46bd      	mov	sp, r7
 8020672:	bd80      	pop	{r7, pc}

08020674 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8020674:	b580      	push	{r7, lr}
 8020676:	b088      	sub	sp, #32
 8020678:	af00      	add	r7, sp, #0
 802067a:	60f8      	str	r0, [r7, #12]
 802067c:	60b9      	str	r1, [r7, #8]
 802067e:	603b      	str	r3, [r7, #0]
 8020680:	4613      	mov	r3, r2
 8020682:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020684:	68fb      	ldr	r3, [r7, #12]
 8020686:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020688:	2300      	movs	r3, #0
 802068a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802068c:	f3ef 8305 	mrs	r3, IPSR
 8020690:	617b      	str	r3, [r7, #20]
  return(result);
 8020692:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8020694:	2b00      	cmp	r3, #0
 8020696:	d028      	beq.n	80206ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020698:	69bb      	ldr	r3, [r7, #24]
 802069a:	2b00      	cmp	r3, #0
 802069c:	d005      	beq.n	80206aa <osMessageQueuePut+0x36>
 802069e:	68bb      	ldr	r3, [r7, #8]
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	d002      	beq.n	80206aa <osMessageQueuePut+0x36>
 80206a4:	683b      	ldr	r3, [r7, #0]
 80206a6:	2b00      	cmp	r3, #0
 80206a8:	d003      	beq.n	80206b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80206aa:	f06f 0303 	mvn.w	r3, #3
 80206ae:	61fb      	str	r3, [r7, #28]
 80206b0:	e038      	b.n	8020724 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80206b2:	2300      	movs	r3, #0
 80206b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80206b6:	f107 0210 	add.w	r2, r7, #16
 80206ba:	2300      	movs	r3, #0
 80206bc:	68b9      	ldr	r1, [r7, #8]
 80206be:	69b8      	ldr	r0, [r7, #24]
 80206c0:	f000 fc90 	bl	8020fe4 <xQueueGenericSendFromISR>
 80206c4:	4603      	mov	r3, r0
 80206c6:	2b01      	cmp	r3, #1
 80206c8:	d003      	beq.n	80206d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80206ca:	f06f 0302 	mvn.w	r3, #2
 80206ce:	61fb      	str	r3, [r7, #28]
 80206d0:	e028      	b.n	8020724 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80206d2:	693b      	ldr	r3, [r7, #16]
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	d025      	beq.n	8020724 <osMessageQueuePut+0xb0>
 80206d8:	4b15      	ldr	r3, [pc, #84]	; (8020730 <osMessageQueuePut+0xbc>)
 80206da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80206de:	601a      	str	r2, [r3, #0]
 80206e0:	f3bf 8f4f 	dsb	sy
 80206e4:	f3bf 8f6f 	isb	sy
 80206e8:	e01c      	b.n	8020724 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80206ea:	69bb      	ldr	r3, [r7, #24]
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	d002      	beq.n	80206f6 <osMessageQueuePut+0x82>
 80206f0:	68bb      	ldr	r3, [r7, #8]
 80206f2:	2b00      	cmp	r3, #0
 80206f4:	d103      	bne.n	80206fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80206f6:	f06f 0303 	mvn.w	r3, #3
 80206fa:	61fb      	str	r3, [r7, #28]
 80206fc:	e012      	b.n	8020724 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80206fe:	2300      	movs	r3, #0
 8020700:	683a      	ldr	r2, [r7, #0]
 8020702:	68b9      	ldr	r1, [r7, #8]
 8020704:	69b8      	ldr	r0, [r7, #24]
 8020706:	f000 fb6f 	bl	8020de8 <xQueueGenericSend>
 802070a:	4603      	mov	r3, r0
 802070c:	2b01      	cmp	r3, #1
 802070e:	d009      	beq.n	8020724 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8020710:	683b      	ldr	r3, [r7, #0]
 8020712:	2b00      	cmp	r3, #0
 8020714:	d003      	beq.n	802071e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8020716:	f06f 0301 	mvn.w	r3, #1
 802071a:	61fb      	str	r3, [r7, #28]
 802071c:	e002      	b.n	8020724 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 802071e:	f06f 0302 	mvn.w	r3, #2
 8020722:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8020724:	69fb      	ldr	r3, [r7, #28]
}
 8020726:	4618      	mov	r0, r3
 8020728:	3720      	adds	r7, #32
 802072a:	46bd      	mov	sp, r7
 802072c:	bd80      	pop	{r7, pc}
 802072e:	bf00      	nop
 8020730:	e000ed04 	.word	0xe000ed04

08020734 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8020734:	b580      	push	{r7, lr}
 8020736:	b088      	sub	sp, #32
 8020738:	af00      	add	r7, sp, #0
 802073a:	60f8      	str	r0, [r7, #12]
 802073c:	60b9      	str	r1, [r7, #8]
 802073e:	607a      	str	r2, [r7, #4]
 8020740:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8020742:	68fb      	ldr	r3, [r7, #12]
 8020744:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8020746:	2300      	movs	r3, #0
 8020748:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 802074a:	f3ef 8305 	mrs	r3, IPSR
 802074e:	617b      	str	r3, [r7, #20]
  return(result);
 8020750:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8020752:	2b00      	cmp	r3, #0
 8020754:	d028      	beq.n	80207a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8020756:	69bb      	ldr	r3, [r7, #24]
 8020758:	2b00      	cmp	r3, #0
 802075a:	d005      	beq.n	8020768 <osMessageQueueGet+0x34>
 802075c:	68bb      	ldr	r3, [r7, #8]
 802075e:	2b00      	cmp	r3, #0
 8020760:	d002      	beq.n	8020768 <osMessageQueueGet+0x34>
 8020762:	683b      	ldr	r3, [r7, #0]
 8020764:	2b00      	cmp	r3, #0
 8020766:	d003      	beq.n	8020770 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8020768:	f06f 0303 	mvn.w	r3, #3
 802076c:	61fb      	str	r3, [r7, #28]
 802076e:	e037      	b.n	80207e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8020770:	2300      	movs	r3, #0
 8020772:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8020774:	f107 0310 	add.w	r3, r7, #16
 8020778:	461a      	mov	r2, r3
 802077a:	68b9      	ldr	r1, [r7, #8]
 802077c:	69b8      	ldr	r0, [r7, #24]
 802077e:	f000 ff9b 	bl	80216b8 <xQueueReceiveFromISR>
 8020782:	4603      	mov	r3, r0
 8020784:	2b01      	cmp	r3, #1
 8020786:	d003      	beq.n	8020790 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8020788:	f06f 0302 	mvn.w	r3, #2
 802078c:	61fb      	str	r3, [r7, #28]
 802078e:	e027      	b.n	80207e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8020790:	693b      	ldr	r3, [r7, #16]
 8020792:	2b00      	cmp	r3, #0
 8020794:	d024      	beq.n	80207e0 <osMessageQueueGet+0xac>
 8020796:	4b15      	ldr	r3, [pc, #84]	; (80207ec <osMessageQueueGet+0xb8>)
 8020798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802079c:	601a      	str	r2, [r3, #0]
 802079e:	f3bf 8f4f 	dsb	sy
 80207a2:	f3bf 8f6f 	isb	sy
 80207a6:	e01b      	b.n	80207e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80207a8:	69bb      	ldr	r3, [r7, #24]
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d002      	beq.n	80207b4 <osMessageQueueGet+0x80>
 80207ae:	68bb      	ldr	r3, [r7, #8]
 80207b0:	2b00      	cmp	r3, #0
 80207b2:	d103      	bne.n	80207bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80207b4:	f06f 0303 	mvn.w	r3, #3
 80207b8:	61fb      	str	r3, [r7, #28]
 80207ba:	e011      	b.n	80207e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80207bc:	683a      	ldr	r2, [r7, #0]
 80207be:	68b9      	ldr	r1, [r7, #8]
 80207c0:	69b8      	ldr	r0, [r7, #24]
 80207c2:	f000 fcab 	bl	802111c <xQueueReceive>
 80207c6:	4603      	mov	r3, r0
 80207c8:	2b01      	cmp	r3, #1
 80207ca:	d009      	beq.n	80207e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80207cc:	683b      	ldr	r3, [r7, #0]
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d003      	beq.n	80207da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80207d2:	f06f 0301 	mvn.w	r3, #1
 80207d6:	61fb      	str	r3, [r7, #28]
 80207d8:	e002      	b.n	80207e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80207da:	f06f 0302 	mvn.w	r3, #2
 80207de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80207e0:	69fb      	ldr	r3, [r7, #28]
}
 80207e2:	4618      	mov	r0, r3
 80207e4:	3720      	adds	r7, #32
 80207e6:	46bd      	mov	sp, r7
 80207e8:	bd80      	pop	{r7, pc}
 80207ea:	bf00      	nop
 80207ec:	e000ed04 	.word	0xe000ed04

080207f0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80207f0:	b580      	push	{r7, lr}
 80207f2:	b086      	sub	sp, #24
 80207f4:	af00      	add	r7, sp, #0
 80207f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80207f8:	687b      	ldr	r3, [r7, #4]
 80207fa:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80207fc:	693b      	ldr	r3, [r7, #16]
 80207fe:	2b00      	cmp	r3, #0
 8020800:	d102      	bne.n	8020808 <osMessageQueueGetCount+0x18>
    count = 0U;
 8020802:	2300      	movs	r3, #0
 8020804:	617b      	str	r3, [r7, #20]
 8020806:	e00e      	b.n	8020826 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8020808:	f3ef 8305 	mrs	r3, IPSR
 802080c:	60fb      	str	r3, [r7, #12]
  return(result);
 802080e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8020810:	2b00      	cmp	r3, #0
 8020812:	d004      	beq.n	802081e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8020814:	6938      	ldr	r0, [r7, #16]
 8020816:	f000 ffed 	bl	80217f4 <uxQueueMessagesWaitingFromISR>
 802081a:	6178      	str	r0, [r7, #20]
 802081c:	e003      	b.n	8020826 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 802081e:	6938      	ldr	r0, [r7, #16]
 8020820:	f000 ffca 	bl	80217b8 <uxQueueMessagesWaiting>
 8020824:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8020826:	697b      	ldr	r3, [r7, #20]
}
 8020828:	4618      	mov	r0, r3
 802082a:	3718      	adds	r7, #24
 802082c:	46bd      	mov	sp, r7
 802082e:	bd80      	pop	{r7, pc}

08020830 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8020830:	b480      	push	{r7}
 8020832:	b085      	sub	sp, #20
 8020834:	af00      	add	r7, sp, #0
 8020836:	60f8      	str	r0, [r7, #12]
 8020838:	60b9      	str	r1, [r7, #8]
 802083a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 802083c:	68fb      	ldr	r3, [r7, #12]
 802083e:	4a07      	ldr	r2, [pc, #28]	; (802085c <vApplicationGetIdleTaskMemory+0x2c>)
 8020840:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8020842:	68bb      	ldr	r3, [r7, #8]
 8020844:	4a06      	ldr	r2, [pc, #24]	; (8020860 <vApplicationGetIdleTaskMemory+0x30>)
 8020846:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	2280      	movs	r2, #128	; 0x80
 802084c:	601a      	str	r2, [r3, #0]
}
 802084e:	bf00      	nop
 8020850:	3714      	adds	r7, #20
 8020852:	46bd      	mov	sp, r7
 8020854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020858:	4770      	bx	lr
 802085a:	bf00      	nop
 802085c:	200015b0 	.word	0x200015b0
 8020860:	2000165c 	.word	0x2000165c

08020864 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8020864:	b480      	push	{r7}
 8020866:	b085      	sub	sp, #20
 8020868:	af00      	add	r7, sp, #0
 802086a:	60f8      	str	r0, [r7, #12]
 802086c:	60b9      	str	r1, [r7, #8]
 802086e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8020870:	68fb      	ldr	r3, [r7, #12]
 8020872:	4a07      	ldr	r2, [pc, #28]	; (8020890 <vApplicationGetTimerTaskMemory+0x2c>)
 8020874:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8020876:	68bb      	ldr	r3, [r7, #8]
 8020878:	4a06      	ldr	r2, [pc, #24]	; (8020894 <vApplicationGetTimerTaskMemory+0x30>)
 802087a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020882:	601a      	str	r2, [r3, #0]
}
 8020884:	bf00      	nop
 8020886:	3714      	adds	r7, #20
 8020888:	46bd      	mov	sp, r7
 802088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802088e:	4770      	bx	lr
 8020890:	2000185c 	.word	0x2000185c
 8020894:	20001908 	.word	0x20001908

08020898 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8020898:	b480      	push	{r7}
 802089a:	b083      	sub	sp, #12
 802089c:	af00      	add	r7, sp, #0
 802089e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80208a0:	687b      	ldr	r3, [r7, #4]
 80208a2:	f103 0208 	add.w	r2, r3, #8
 80208a6:	687b      	ldr	r3, [r7, #4]
 80208a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	f04f 32ff 	mov.w	r2, #4294967295
 80208b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80208b2:	687b      	ldr	r3, [r7, #4]
 80208b4:	f103 0208 	add.w	r2, r3, #8
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	f103 0208 	add.w	r2, r3, #8
 80208c2:	687b      	ldr	r3, [r7, #4]
 80208c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80208c6:	687b      	ldr	r3, [r7, #4]
 80208c8:	2200      	movs	r2, #0
 80208ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80208cc:	bf00      	nop
 80208ce:	370c      	adds	r7, #12
 80208d0:	46bd      	mov	sp, r7
 80208d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208d6:	4770      	bx	lr

080208d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80208d8:	b480      	push	{r7}
 80208da:	b083      	sub	sp, #12
 80208dc:	af00      	add	r7, sp, #0
 80208de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80208e0:	687b      	ldr	r3, [r7, #4]
 80208e2:	2200      	movs	r2, #0
 80208e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80208e6:	bf00      	nop
 80208e8:	370c      	adds	r7, #12
 80208ea:	46bd      	mov	sp, r7
 80208ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208f0:	4770      	bx	lr

080208f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80208f2:	b480      	push	{r7}
 80208f4:	b085      	sub	sp, #20
 80208f6:	af00      	add	r7, sp, #0
 80208f8:	6078      	str	r0, [r7, #4]
 80208fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	685b      	ldr	r3, [r3, #4]
 8020900:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8020902:	683b      	ldr	r3, [r7, #0]
 8020904:	68fa      	ldr	r2, [r7, #12]
 8020906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8020908:	68fb      	ldr	r3, [r7, #12]
 802090a:	689a      	ldr	r2, [r3, #8]
 802090c:	683b      	ldr	r3, [r7, #0]
 802090e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8020910:	68fb      	ldr	r3, [r7, #12]
 8020912:	689b      	ldr	r3, [r3, #8]
 8020914:	683a      	ldr	r2, [r7, #0]
 8020916:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8020918:	68fb      	ldr	r3, [r7, #12]
 802091a:	683a      	ldr	r2, [r7, #0]
 802091c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 802091e:	683b      	ldr	r3, [r7, #0]
 8020920:	687a      	ldr	r2, [r7, #4]
 8020922:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020924:	687b      	ldr	r3, [r7, #4]
 8020926:	681b      	ldr	r3, [r3, #0]
 8020928:	1c5a      	adds	r2, r3, #1
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	601a      	str	r2, [r3, #0]
}
 802092e:	bf00      	nop
 8020930:	3714      	adds	r7, #20
 8020932:	46bd      	mov	sp, r7
 8020934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020938:	4770      	bx	lr

0802093a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 802093a:	b480      	push	{r7}
 802093c:	b085      	sub	sp, #20
 802093e:	af00      	add	r7, sp, #0
 8020940:	6078      	str	r0, [r7, #4]
 8020942:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8020944:	683b      	ldr	r3, [r7, #0]
 8020946:	681b      	ldr	r3, [r3, #0]
 8020948:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 802094a:	68bb      	ldr	r3, [r7, #8]
 802094c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020950:	d103      	bne.n	802095a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	691b      	ldr	r3, [r3, #16]
 8020956:	60fb      	str	r3, [r7, #12]
 8020958:	e00c      	b.n	8020974 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	3308      	adds	r3, #8
 802095e:	60fb      	str	r3, [r7, #12]
 8020960:	e002      	b.n	8020968 <vListInsert+0x2e>
 8020962:	68fb      	ldr	r3, [r7, #12]
 8020964:	685b      	ldr	r3, [r3, #4]
 8020966:	60fb      	str	r3, [r7, #12]
 8020968:	68fb      	ldr	r3, [r7, #12]
 802096a:	685b      	ldr	r3, [r3, #4]
 802096c:	681b      	ldr	r3, [r3, #0]
 802096e:	68ba      	ldr	r2, [r7, #8]
 8020970:	429a      	cmp	r2, r3
 8020972:	d2f6      	bcs.n	8020962 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8020974:	68fb      	ldr	r3, [r7, #12]
 8020976:	685a      	ldr	r2, [r3, #4]
 8020978:	683b      	ldr	r3, [r7, #0]
 802097a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 802097c:	683b      	ldr	r3, [r7, #0]
 802097e:	685b      	ldr	r3, [r3, #4]
 8020980:	683a      	ldr	r2, [r7, #0]
 8020982:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8020984:	683b      	ldr	r3, [r7, #0]
 8020986:	68fa      	ldr	r2, [r7, #12]
 8020988:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 802098a:	68fb      	ldr	r3, [r7, #12]
 802098c:	683a      	ldr	r2, [r7, #0]
 802098e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8020990:	683b      	ldr	r3, [r7, #0]
 8020992:	687a      	ldr	r2, [r7, #4]
 8020994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8020996:	687b      	ldr	r3, [r7, #4]
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	1c5a      	adds	r2, r3, #1
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	601a      	str	r2, [r3, #0]
}
 80209a0:	bf00      	nop
 80209a2:	3714      	adds	r7, #20
 80209a4:	46bd      	mov	sp, r7
 80209a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209aa:	4770      	bx	lr

080209ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80209ac:	b480      	push	{r7}
 80209ae:	b085      	sub	sp, #20
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80209b4:	687b      	ldr	r3, [r7, #4]
 80209b6:	691b      	ldr	r3, [r3, #16]
 80209b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80209ba:	687b      	ldr	r3, [r7, #4]
 80209bc:	685b      	ldr	r3, [r3, #4]
 80209be:	687a      	ldr	r2, [r7, #4]
 80209c0:	6892      	ldr	r2, [r2, #8]
 80209c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	689b      	ldr	r3, [r3, #8]
 80209c8:	687a      	ldr	r2, [r7, #4]
 80209ca:	6852      	ldr	r2, [r2, #4]
 80209cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80209ce:	68fb      	ldr	r3, [r7, #12]
 80209d0:	685b      	ldr	r3, [r3, #4]
 80209d2:	687a      	ldr	r2, [r7, #4]
 80209d4:	429a      	cmp	r2, r3
 80209d6:	d103      	bne.n	80209e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	689a      	ldr	r2, [r3, #8]
 80209dc:	68fb      	ldr	r3, [r7, #12]
 80209de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	2200      	movs	r2, #0
 80209e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80209e6:	68fb      	ldr	r3, [r7, #12]
 80209e8:	681b      	ldr	r3, [r3, #0]
 80209ea:	1e5a      	subs	r2, r3, #1
 80209ec:	68fb      	ldr	r3, [r7, #12]
 80209ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80209f0:	68fb      	ldr	r3, [r7, #12]
 80209f2:	681b      	ldr	r3, [r3, #0]
}
 80209f4:	4618      	mov	r0, r3
 80209f6:	3714      	adds	r7, #20
 80209f8:	46bd      	mov	sp, r7
 80209fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209fe:	4770      	bx	lr

08020a00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8020a00:	b580      	push	{r7, lr}
 8020a02:	b084      	sub	sp, #16
 8020a04:	af00      	add	r7, sp, #0
 8020a06:	6078      	str	r0, [r7, #4]
 8020a08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8020a0a:	687b      	ldr	r3, [r7, #4]
 8020a0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8020a0e:	68fb      	ldr	r3, [r7, #12]
 8020a10:	2b00      	cmp	r3, #0
 8020a12:	d10a      	bne.n	8020a2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8020a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020a18:	f383 8811 	msr	BASEPRI, r3
 8020a1c:	f3bf 8f6f 	isb	sy
 8020a20:	f3bf 8f4f 	dsb	sy
 8020a24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8020a26:	bf00      	nop
 8020a28:	e7fe      	b.n	8020a28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8020a2a:	f002 fd9b 	bl	8023564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020a2e:	68fb      	ldr	r3, [r7, #12]
 8020a30:	681a      	ldr	r2, [r3, #0]
 8020a32:	68fb      	ldr	r3, [r7, #12]
 8020a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020a36:	68f9      	ldr	r1, [r7, #12]
 8020a38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020a3a:	fb01 f303 	mul.w	r3, r1, r3
 8020a3e:	441a      	add	r2, r3
 8020a40:	68fb      	ldr	r3, [r7, #12]
 8020a42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8020a44:	68fb      	ldr	r3, [r7, #12]
 8020a46:	2200      	movs	r2, #0
 8020a48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8020a4a:	68fb      	ldr	r3, [r7, #12]
 8020a4c:	681a      	ldr	r2, [r3, #0]
 8020a4e:	68fb      	ldr	r3, [r7, #12]
 8020a50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020a52:	68fb      	ldr	r3, [r7, #12]
 8020a54:	681a      	ldr	r2, [r3, #0]
 8020a56:	68fb      	ldr	r3, [r7, #12]
 8020a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020a5a:	3b01      	subs	r3, #1
 8020a5c:	68f9      	ldr	r1, [r7, #12]
 8020a5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8020a60:	fb01 f303 	mul.w	r3, r1, r3
 8020a64:	441a      	add	r2, r3
 8020a66:	68fb      	ldr	r3, [r7, #12]
 8020a68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8020a6a:	68fb      	ldr	r3, [r7, #12]
 8020a6c:	22ff      	movs	r2, #255	; 0xff
 8020a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8020a72:	68fb      	ldr	r3, [r7, #12]
 8020a74:	22ff      	movs	r2, #255	; 0xff
 8020a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8020a7a:	683b      	ldr	r3, [r7, #0]
 8020a7c:	2b00      	cmp	r3, #0
 8020a7e:	d114      	bne.n	8020aaa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8020a80:	68fb      	ldr	r3, [r7, #12]
 8020a82:	691b      	ldr	r3, [r3, #16]
 8020a84:	2b00      	cmp	r3, #0
 8020a86:	d01a      	beq.n	8020abe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8020a88:	68fb      	ldr	r3, [r7, #12]
 8020a8a:	3310      	adds	r3, #16
 8020a8c:	4618      	mov	r0, r3
 8020a8e:	f001 fd05 	bl	802249c <xTaskRemoveFromEventList>
 8020a92:	4603      	mov	r3, r0
 8020a94:	2b00      	cmp	r3, #0
 8020a96:	d012      	beq.n	8020abe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8020a98:	4b0c      	ldr	r3, [pc, #48]	; (8020acc <xQueueGenericReset+0xcc>)
 8020a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020a9e:	601a      	str	r2, [r3, #0]
 8020aa0:	f3bf 8f4f 	dsb	sy
 8020aa4:	f3bf 8f6f 	isb	sy
 8020aa8:	e009      	b.n	8020abe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8020aaa:	68fb      	ldr	r3, [r7, #12]
 8020aac:	3310      	adds	r3, #16
 8020aae:	4618      	mov	r0, r3
 8020ab0:	f7ff fef2 	bl	8020898 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8020ab4:	68fb      	ldr	r3, [r7, #12]
 8020ab6:	3324      	adds	r3, #36	; 0x24
 8020ab8:	4618      	mov	r0, r3
 8020aba:	f7ff feed 	bl	8020898 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8020abe:	f002 fd81 	bl	80235c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8020ac2:	2301      	movs	r3, #1
}
 8020ac4:	4618      	mov	r0, r3
 8020ac6:	3710      	adds	r7, #16
 8020ac8:	46bd      	mov	sp, r7
 8020aca:	bd80      	pop	{r7, pc}
 8020acc:	e000ed04 	.word	0xe000ed04

08020ad0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8020ad0:	b580      	push	{r7, lr}
 8020ad2:	b08e      	sub	sp, #56	; 0x38
 8020ad4:	af02      	add	r7, sp, #8
 8020ad6:	60f8      	str	r0, [r7, #12]
 8020ad8:	60b9      	str	r1, [r7, #8]
 8020ada:	607a      	str	r2, [r7, #4]
 8020adc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020ade:	68fb      	ldr	r3, [r7, #12]
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	d10a      	bne.n	8020afa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8020ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020ae8:	f383 8811 	msr	BASEPRI, r3
 8020aec:	f3bf 8f6f 	isb	sy
 8020af0:	f3bf 8f4f 	dsb	sy
 8020af4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020af6:	bf00      	nop
 8020af8:	e7fe      	b.n	8020af8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8020afa:	683b      	ldr	r3, [r7, #0]
 8020afc:	2b00      	cmp	r3, #0
 8020afe:	d10a      	bne.n	8020b16 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8020b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b04:	f383 8811 	msr	BASEPRI, r3
 8020b08:	f3bf 8f6f 	isb	sy
 8020b0c:	f3bf 8f4f 	dsb	sy
 8020b10:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020b12:	bf00      	nop
 8020b14:	e7fe      	b.n	8020b14 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8020b16:	687b      	ldr	r3, [r7, #4]
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	d002      	beq.n	8020b22 <xQueueGenericCreateStatic+0x52>
 8020b1c:	68bb      	ldr	r3, [r7, #8]
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	d001      	beq.n	8020b26 <xQueueGenericCreateStatic+0x56>
 8020b22:	2301      	movs	r3, #1
 8020b24:	e000      	b.n	8020b28 <xQueueGenericCreateStatic+0x58>
 8020b26:	2300      	movs	r3, #0
 8020b28:	2b00      	cmp	r3, #0
 8020b2a:	d10a      	bne.n	8020b42 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8020b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b30:	f383 8811 	msr	BASEPRI, r3
 8020b34:	f3bf 8f6f 	isb	sy
 8020b38:	f3bf 8f4f 	dsb	sy
 8020b3c:	623b      	str	r3, [r7, #32]
}
 8020b3e:	bf00      	nop
 8020b40:	e7fe      	b.n	8020b40 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8020b42:	687b      	ldr	r3, [r7, #4]
 8020b44:	2b00      	cmp	r3, #0
 8020b46:	d102      	bne.n	8020b4e <xQueueGenericCreateStatic+0x7e>
 8020b48:	68bb      	ldr	r3, [r7, #8]
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d101      	bne.n	8020b52 <xQueueGenericCreateStatic+0x82>
 8020b4e:	2301      	movs	r3, #1
 8020b50:	e000      	b.n	8020b54 <xQueueGenericCreateStatic+0x84>
 8020b52:	2300      	movs	r3, #0
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d10a      	bne.n	8020b6e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8020b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b5c:	f383 8811 	msr	BASEPRI, r3
 8020b60:	f3bf 8f6f 	isb	sy
 8020b64:	f3bf 8f4f 	dsb	sy
 8020b68:	61fb      	str	r3, [r7, #28]
}
 8020b6a:	bf00      	nop
 8020b6c:	e7fe      	b.n	8020b6c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8020b6e:	2350      	movs	r3, #80	; 0x50
 8020b70:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8020b72:	697b      	ldr	r3, [r7, #20]
 8020b74:	2b50      	cmp	r3, #80	; 0x50
 8020b76:	d00a      	beq.n	8020b8e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8020b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020b7c:	f383 8811 	msr	BASEPRI, r3
 8020b80:	f3bf 8f6f 	isb	sy
 8020b84:	f3bf 8f4f 	dsb	sy
 8020b88:	61bb      	str	r3, [r7, #24]
}
 8020b8a:	bf00      	nop
 8020b8c:	e7fe      	b.n	8020b8c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8020b8e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8020b90:	683b      	ldr	r3, [r7, #0]
 8020b92:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8020b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b96:	2b00      	cmp	r3, #0
 8020b98:	d00d      	beq.n	8020bb6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8020b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020b9c:	2201      	movs	r2, #1
 8020b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020ba2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8020ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ba8:	9300      	str	r3, [sp, #0]
 8020baa:	4613      	mov	r3, r2
 8020bac:	687a      	ldr	r2, [r7, #4]
 8020bae:	68b9      	ldr	r1, [r7, #8]
 8020bb0:	68f8      	ldr	r0, [r7, #12]
 8020bb2:	f000 f83f 	bl	8020c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8020bb8:	4618      	mov	r0, r3
 8020bba:	3730      	adds	r7, #48	; 0x30
 8020bbc:	46bd      	mov	sp, r7
 8020bbe:	bd80      	pop	{r7, pc}

08020bc0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8020bc0:	b580      	push	{r7, lr}
 8020bc2:	b08a      	sub	sp, #40	; 0x28
 8020bc4:	af02      	add	r7, sp, #8
 8020bc6:	60f8      	str	r0, [r7, #12]
 8020bc8:	60b9      	str	r1, [r7, #8]
 8020bca:	4613      	mov	r3, r2
 8020bcc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8020bce:	68fb      	ldr	r3, [r7, #12]
 8020bd0:	2b00      	cmp	r3, #0
 8020bd2:	d10a      	bne.n	8020bea <xQueueGenericCreate+0x2a>
	__asm volatile
 8020bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020bd8:	f383 8811 	msr	BASEPRI, r3
 8020bdc:	f3bf 8f6f 	isb	sy
 8020be0:	f3bf 8f4f 	dsb	sy
 8020be4:	613b      	str	r3, [r7, #16]
}
 8020be6:	bf00      	nop
 8020be8:	e7fe      	b.n	8020be8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	68ba      	ldr	r2, [r7, #8]
 8020bee:	fb02 f303 	mul.w	r3, r2, r3
 8020bf2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8020bf4:	69fb      	ldr	r3, [r7, #28]
 8020bf6:	3350      	adds	r3, #80	; 0x50
 8020bf8:	4618      	mov	r0, r3
 8020bfa:	f002 fdd5 	bl	80237a8 <pvPortMalloc>
 8020bfe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8020c00:	69bb      	ldr	r3, [r7, #24]
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d011      	beq.n	8020c2a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8020c06:	69bb      	ldr	r3, [r7, #24]
 8020c08:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8020c0a:	697b      	ldr	r3, [r7, #20]
 8020c0c:	3350      	adds	r3, #80	; 0x50
 8020c0e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8020c10:	69bb      	ldr	r3, [r7, #24]
 8020c12:	2200      	movs	r2, #0
 8020c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8020c18:	79fa      	ldrb	r2, [r7, #7]
 8020c1a:	69bb      	ldr	r3, [r7, #24]
 8020c1c:	9300      	str	r3, [sp, #0]
 8020c1e:	4613      	mov	r3, r2
 8020c20:	697a      	ldr	r2, [r7, #20]
 8020c22:	68b9      	ldr	r1, [r7, #8]
 8020c24:	68f8      	ldr	r0, [r7, #12]
 8020c26:	f000 f805 	bl	8020c34 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8020c2a:	69bb      	ldr	r3, [r7, #24]
	}
 8020c2c:	4618      	mov	r0, r3
 8020c2e:	3720      	adds	r7, #32
 8020c30:	46bd      	mov	sp, r7
 8020c32:	bd80      	pop	{r7, pc}

08020c34 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8020c34:	b580      	push	{r7, lr}
 8020c36:	b084      	sub	sp, #16
 8020c38:	af00      	add	r7, sp, #0
 8020c3a:	60f8      	str	r0, [r7, #12]
 8020c3c:	60b9      	str	r1, [r7, #8]
 8020c3e:	607a      	str	r2, [r7, #4]
 8020c40:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8020c42:	68bb      	ldr	r3, [r7, #8]
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	d103      	bne.n	8020c50 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8020c48:	69bb      	ldr	r3, [r7, #24]
 8020c4a:	69ba      	ldr	r2, [r7, #24]
 8020c4c:	601a      	str	r2, [r3, #0]
 8020c4e:	e002      	b.n	8020c56 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8020c50:	69bb      	ldr	r3, [r7, #24]
 8020c52:	687a      	ldr	r2, [r7, #4]
 8020c54:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8020c56:	69bb      	ldr	r3, [r7, #24]
 8020c58:	68fa      	ldr	r2, [r7, #12]
 8020c5a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8020c5c:	69bb      	ldr	r3, [r7, #24]
 8020c5e:	68ba      	ldr	r2, [r7, #8]
 8020c60:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8020c62:	2101      	movs	r1, #1
 8020c64:	69b8      	ldr	r0, [r7, #24]
 8020c66:	f7ff fecb 	bl	8020a00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8020c6a:	69bb      	ldr	r3, [r7, #24]
 8020c6c:	78fa      	ldrb	r2, [r7, #3]
 8020c6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8020c72:	bf00      	nop
 8020c74:	3710      	adds	r7, #16
 8020c76:	46bd      	mov	sp, r7
 8020c78:	bd80      	pop	{r7, pc}

08020c7a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8020c7a:	b580      	push	{r7, lr}
 8020c7c:	b082      	sub	sp, #8
 8020c7e:	af00      	add	r7, sp, #0
 8020c80:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8020c82:	687b      	ldr	r3, [r7, #4]
 8020c84:	2b00      	cmp	r3, #0
 8020c86:	d00e      	beq.n	8020ca6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8020c88:	687b      	ldr	r3, [r7, #4]
 8020c8a:	2200      	movs	r2, #0
 8020c8c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8020c8e:	687b      	ldr	r3, [r7, #4]
 8020c90:	2200      	movs	r2, #0
 8020c92:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	2200      	movs	r2, #0
 8020c98:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8020c9a:	2300      	movs	r3, #0
 8020c9c:	2200      	movs	r2, #0
 8020c9e:	2100      	movs	r1, #0
 8020ca0:	6878      	ldr	r0, [r7, #4]
 8020ca2:	f000 f8a1 	bl	8020de8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8020ca6:	bf00      	nop
 8020ca8:	3708      	adds	r7, #8
 8020caa:	46bd      	mov	sp, r7
 8020cac:	bd80      	pop	{r7, pc}

08020cae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8020cae:	b580      	push	{r7, lr}
 8020cb0:	b086      	sub	sp, #24
 8020cb2:	af00      	add	r7, sp, #0
 8020cb4:	4603      	mov	r3, r0
 8020cb6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020cb8:	2301      	movs	r3, #1
 8020cba:	617b      	str	r3, [r7, #20]
 8020cbc:	2300      	movs	r3, #0
 8020cbe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8020cc0:	79fb      	ldrb	r3, [r7, #7]
 8020cc2:	461a      	mov	r2, r3
 8020cc4:	6939      	ldr	r1, [r7, #16]
 8020cc6:	6978      	ldr	r0, [r7, #20]
 8020cc8:	f7ff ff7a 	bl	8020bc0 <xQueueGenericCreate>
 8020ccc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020cce:	68f8      	ldr	r0, [r7, #12]
 8020cd0:	f7ff ffd3 	bl	8020c7a <prvInitialiseMutex>

		return xNewQueue;
 8020cd4:	68fb      	ldr	r3, [r7, #12]
	}
 8020cd6:	4618      	mov	r0, r3
 8020cd8:	3718      	adds	r7, #24
 8020cda:	46bd      	mov	sp, r7
 8020cdc:	bd80      	pop	{r7, pc}

08020cde <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8020cde:	b580      	push	{r7, lr}
 8020ce0:	b088      	sub	sp, #32
 8020ce2:	af02      	add	r7, sp, #8
 8020ce4:	4603      	mov	r3, r0
 8020ce6:	6039      	str	r1, [r7, #0]
 8020ce8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8020cea:	2301      	movs	r3, #1
 8020cec:	617b      	str	r3, [r7, #20]
 8020cee:	2300      	movs	r3, #0
 8020cf0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8020cf2:	79fb      	ldrb	r3, [r7, #7]
 8020cf4:	9300      	str	r3, [sp, #0]
 8020cf6:	683b      	ldr	r3, [r7, #0]
 8020cf8:	2200      	movs	r2, #0
 8020cfa:	6939      	ldr	r1, [r7, #16]
 8020cfc:	6978      	ldr	r0, [r7, #20]
 8020cfe:	f7ff fee7 	bl	8020ad0 <xQueueGenericCreateStatic>
 8020d02:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8020d04:	68f8      	ldr	r0, [r7, #12]
 8020d06:	f7ff ffb8 	bl	8020c7a <prvInitialiseMutex>

		return xNewQueue;
 8020d0a:	68fb      	ldr	r3, [r7, #12]
	}
 8020d0c:	4618      	mov	r0, r3
 8020d0e:	3718      	adds	r7, #24
 8020d10:	46bd      	mov	sp, r7
 8020d12:	bd80      	pop	{r7, pc}

08020d14 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8020d14:	b590      	push	{r4, r7, lr}
 8020d16:	b087      	sub	sp, #28
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020d1c:	687b      	ldr	r3, [r7, #4]
 8020d1e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020d20:	693b      	ldr	r3, [r7, #16]
 8020d22:	2b00      	cmp	r3, #0
 8020d24:	d10a      	bne.n	8020d3c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8020d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d2a:	f383 8811 	msr	BASEPRI, r3
 8020d2e:	f3bf 8f6f 	isb	sy
 8020d32:	f3bf 8f4f 	dsb	sy
 8020d36:	60fb      	str	r3, [r7, #12]
}
 8020d38:	bf00      	nop
 8020d3a:	e7fe      	b.n	8020d3a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020d3c:	693b      	ldr	r3, [r7, #16]
 8020d3e:	689c      	ldr	r4, [r3, #8]
 8020d40:	f001 fda6 	bl	8022890 <xTaskGetCurrentTaskHandle>
 8020d44:	4603      	mov	r3, r0
 8020d46:	429c      	cmp	r4, r3
 8020d48:	d111      	bne.n	8020d6e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8020d4a:	693b      	ldr	r3, [r7, #16]
 8020d4c:	68db      	ldr	r3, [r3, #12]
 8020d4e:	1e5a      	subs	r2, r3, #1
 8020d50:	693b      	ldr	r3, [r7, #16]
 8020d52:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8020d54:	693b      	ldr	r3, [r7, #16]
 8020d56:	68db      	ldr	r3, [r3, #12]
 8020d58:	2b00      	cmp	r3, #0
 8020d5a:	d105      	bne.n	8020d68 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8020d5c:	2300      	movs	r3, #0
 8020d5e:	2200      	movs	r2, #0
 8020d60:	2100      	movs	r1, #0
 8020d62:	6938      	ldr	r0, [r7, #16]
 8020d64:	f000 f840 	bl	8020de8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8020d68:	2301      	movs	r3, #1
 8020d6a:	617b      	str	r3, [r7, #20]
 8020d6c:	e001      	b.n	8020d72 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8020d6e:	2300      	movs	r3, #0
 8020d70:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8020d72:	697b      	ldr	r3, [r7, #20]
	}
 8020d74:	4618      	mov	r0, r3
 8020d76:	371c      	adds	r7, #28
 8020d78:	46bd      	mov	sp, r7
 8020d7a:	bd90      	pop	{r4, r7, pc}

08020d7c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8020d7c:	b590      	push	{r4, r7, lr}
 8020d7e:	b087      	sub	sp, #28
 8020d80:	af00      	add	r7, sp, #0
 8020d82:	6078      	str	r0, [r7, #4]
 8020d84:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8020d86:	687b      	ldr	r3, [r7, #4]
 8020d88:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8020d8a:	693b      	ldr	r3, [r7, #16]
 8020d8c:	2b00      	cmp	r3, #0
 8020d8e:	d10a      	bne.n	8020da6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8020d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020d94:	f383 8811 	msr	BASEPRI, r3
 8020d98:	f3bf 8f6f 	isb	sy
 8020d9c:	f3bf 8f4f 	dsb	sy
 8020da0:	60fb      	str	r3, [r7, #12]
}
 8020da2:	bf00      	nop
 8020da4:	e7fe      	b.n	8020da4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8020da6:	693b      	ldr	r3, [r7, #16]
 8020da8:	689c      	ldr	r4, [r3, #8]
 8020daa:	f001 fd71 	bl	8022890 <xTaskGetCurrentTaskHandle>
 8020dae:	4603      	mov	r3, r0
 8020db0:	429c      	cmp	r4, r3
 8020db2:	d107      	bne.n	8020dc4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020db4:	693b      	ldr	r3, [r7, #16]
 8020db6:	68db      	ldr	r3, [r3, #12]
 8020db8:	1c5a      	adds	r2, r3, #1
 8020dba:	693b      	ldr	r3, [r7, #16]
 8020dbc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8020dbe:	2301      	movs	r3, #1
 8020dc0:	617b      	str	r3, [r7, #20]
 8020dc2:	e00c      	b.n	8020dde <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8020dc4:	6839      	ldr	r1, [r7, #0]
 8020dc6:	6938      	ldr	r0, [r7, #16]
 8020dc8:	f000 fa88 	bl	80212dc <xQueueSemaphoreTake>
 8020dcc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8020dce:	697b      	ldr	r3, [r7, #20]
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d004      	beq.n	8020dde <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8020dd4:	693b      	ldr	r3, [r7, #16]
 8020dd6:	68db      	ldr	r3, [r3, #12]
 8020dd8:	1c5a      	adds	r2, r3, #1
 8020dda:	693b      	ldr	r3, [r7, #16]
 8020ddc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8020dde:	697b      	ldr	r3, [r7, #20]
	}
 8020de0:	4618      	mov	r0, r3
 8020de2:	371c      	adds	r7, #28
 8020de4:	46bd      	mov	sp, r7
 8020de6:	bd90      	pop	{r4, r7, pc}

08020de8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8020de8:	b580      	push	{r7, lr}
 8020dea:	b08e      	sub	sp, #56	; 0x38
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	60f8      	str	r0, [r7, #12]
 8020df0:	60b9      	str	r1, [r7, #8]
 8020df2:	607a      	str	r2, [r7, #4]
 8020df4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8020df6:	2300      	movs	r3, #0
 8020df8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8020dfa:	68fb      	ldr	r3, [r7, #12]
 8020dfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8020dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e00:	2b00      	cmp	r3, #0
 8020e02:	d10a      	bne.n	8020e1a <xQueueGenericSend+0x32>
	__asm volatile
 8020e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e08:	f383 8811 	msr	BASEPRI, r3
 8020e0c:	f3bf 8f6f 	isb	sy
 8020e10:	f3bf 8f4f 	dsb	sy
 8020e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8020e16:	bf00      	nop
 8020e18:	e7fe      	b.n	8020e18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8020e1a:	68bb      	ldr	r3, [r7, #8]
 8020e1c:	2b00      	cmp	r3, #0
 8020e1e:	d103      	bne.n	8020e28 <xQueueGenericSend+0x40>
 8020e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8020e24:	2b00      	cmp	r3, #0
 8020e26:	d101      	bne.n	8020e2c <xQueueGenericSend+0x44>
 8020e28:	2301      	movs	r3, #1
 8020e2a:	e000      	b.n	8020e2e <xQueueGenericSend+0x46>
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	d10a      	bne.n	8020e48 <xQueueGenericSend+0x60>
	__asm volatile
 8020e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e36:	f383 8811 	msr	BASEPRI, r3
 8020e3a:	f3bf 8f6f 	isb	sy
 8020e3e:	f3bf 8f4f 	dsb	sy
 8020e42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8020e44:	bf00      	nop
 8020e46:	e7fe      	b.n	8020e46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8020e48:	683b      	ldr	r3, [r7, #0]
 8020e4a:	2b02      	cmp	r3, #2
 8020e4c:	d103      	bne.n	8020e56 <xQueueGenericSend+0x6e>
 8020e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020e52:	2b01      	cmp	r3, #1
 8020e54:	d101      	bne.n	8020e5a <xQueueGenericSend+0x72>
 8020e56:	2301      	movs	r3, #1
 8020e58:	e000      	b.n	8020e5c <xQueueGenericSend+0x74>
 8020e5a:	2300      	movs	r3, #0
 8020e5c:	2b00      	cmp	r3, #0
 8020e5e:	d10a      	bne.n	8020e76 <xQueueGenericSend+0x8e>
	__asm volatile
 8020e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e64:	f383 8811 	msr	BASEPRI, r3
 8020e68:	f3bf 8f6f 	isb	sy
 8020e6c:	f3bf 8f4f 	dsb	sy
 8020e70:	623b      	str	r3, [r7, #32]
}
 8020e72:	bf00      	nop
 8020e74:	e7fe      	b.n	8020e74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8020e76:	f001 fd1b 	bl	80228b0 <xTaskGetSchedulerState>
 8020e7a:	4603      	mov	r3, r0
 8020e7c:	2b00      	cmp	r3, #0
 8020e7e:	d102      	bne.n	8020e86 <xQueueGenericSend+0x9e>
 8020e80:	687b      	ldr	r3, [r7, #4]
 8020e82:	2b00      	cmp	r3, #0
 8020e84:	d101      	bne.n	8020e8a <xQueueGenericSend+0xa2>
 8020e86:	2301      	movs	r3, #1
 8020e88:	e000      	b.n	8020e8c <xQueueGenericSend+0xa4>
 8020e8a:	2300      	movs	r3, #0
 8020e8c:	2b00      	cmp	r3, #0
 8020e8e:	d10a      	bne.n	8020ea6 <xQueueGenericSend+0xbe>
	__asm volatile
 8020e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8020e94:	f383 8811 	msr	BASEPRI, r3
 8020e98:	f3bf 8f6f 	isb	sy
 8020e9c:	f3bf 8f4f 	dsb	sy
 8020ea0:	61fb      	str	r3, [r7, #28]
}
 8020ea2:	bf00      	nop
 8020ea4:	e7fe      	b.n	8020ea4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8020ea6:	f002 fb5d 	bl	8023564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8020eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8020eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8020eb2:	429a      	cmp	r2, r3
 8020eb4:	d302      	bcc.n	8020ebc <xQueueGenericSend+0xd4>
 8020eb6:	683b      	ldr	r3, [r7, #0]
 8020eb8:	2b02      	cmp	r3, #2
 8020eba:	d129      	bne.n	8020f10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8020ebc:	683a      	ldr	r2, [r7, #0]
 8020ebe:	68b9      	ldr	r1, [r7, #8]
 8020ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020ec2:	f000 fccd 	bl	8021860 <prvCopyDataToQueue>
 8020ec6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8020ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020ecc:	2b00      	cmp	r3, #0
 8020ece:	d010      	beq.n	8020ef2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8020ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ed2:	3324      	adds	r3, #36	; 0x24
 8020ed4:	4618      	mov	r0, r3
 8020ed6:	f001 fae1 	bl	802249c <xTaskRemoveFromEventList>
 8020eda:	4603      	mov	r3, r0
 8020edc:	2b00      	cmp	r3, #0
 8020ede:	d013      	beq.n	8020f08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8020ee0:	4b3f      	ldr	r3, [pc, #252]	; (8020fe0 <xQueueGenericSend+0x1f8>)
 8020ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020ee6:	601a      	str	r2, [r3, #0]
 8020ee8:	f3bf 8f4f 	dsb	sy
 8020eec:	f3bf 8f6f 	isb	sy
 8020ef0:	e00a      	b.n	8020f08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8020ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020ef4:	2b00      	cmp	r3, #0
 8020ef6:	d007      	beq.n	8020f08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8020ef8:	4b39      	ldr	r3, [pc, #228]	; (8020fe0 <xQueueGenericSend+0x1f8>)
 8020efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020efe:	601a      	str	r2, [r3, #0]
 8020f00:	f3bf 8f4f 	dsb	sy
 8020f04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8020f08:	f002 fb5c 	bl	80235c4 <vPortExitCritical>
				return pdPASS;
 8020f0c:	2301      	movs	r3, #1
 8020f0e:	e063      	b.n	8020fd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	2b00      	cmp	r3, #0
 8020f14:	d103      	bne.n	8020f1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8020f16:	f002 fb55 	bl	80235c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8020f1a:	2300      	movs	r3, #0
 8020f1c:	e05c      	b.n	8020fd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8020f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020f20:	2b00      	cmp	r3, #0
 8020f22:	d106      	bne.n	8020f32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8020f24:	f107 0314 	add.w	r3, r7, #20
 8020f28:	4618      	mov	r0, r3
 8020f2a:	f001 fb1b 	bl	8022564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8020f2e:	2301      	movs	r3, #1
 8020f30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8020f32:	f002 fb47 	bl	80235c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8020f36:	f001 f863 	bl	8022000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8020f3a:	f002 fb13 	bl	8023564 <vPortEnterCritical>
 8020f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8020f44:	b25b      	sxtb	r3, r3
 8020f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f4a:	d103      	bne.n	8020f54 <xQueueGenericSend+0x16c>
 8020f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f4e:	2200      	movs	r2, #0
 8020f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8020f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8020f5a:	b25b      	sxtb	r3, r3
 8020f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020f60:	d103      	bne.n	8020f6a <xQueueGenericSend+0x182>
 8020f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f64:	2200      	movs	r2, #0
 8020f66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8020f6a:	f002 fb2b 	bl	80235c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8020f6e:	1d3a      	adds	r2, r7, #4
 8020f70:	f107 0314 	add.w	r3, r7, #20
 8020f74:	4611      	mov	r1, r2
 8020f76:	4618      	mov	r0, r3
 8020f78:	f001 fb0a 	bl	8022590 <xTaskCheckForTimeOut>
 8020f7c:	4603      	mov	r3, r0
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	d124      	bne.n	8020fcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8020f82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f84:	f000 fd64 	bl	8021a50 <prvIsQueueFull>
 8020f88:	4603      	mov	r3, r0
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d018      	beq.n	8020fc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8020f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020f90:	3310      	adds	r3, #16
 8020f92:	687a      	ldr	r2, [r7, #4]
 8020f94:	4611      	mov	r1, r2
 8020f96:	4618      	mov	r0, r3
 8020f98:	f001 fa30 	bl	80223fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8020f9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020f9e:	f000 fcef 	bl	8021980 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8020fa2:	f001 f83b 	bl	802201c <xTaskResumeAll>
 8020fa6:	4603      	mov	r3, r0
 8020fa8:	2b00      	cmp	r3, #0
 8020faa:	f47f af7c 	bne.w	8020ea6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8020fae:	4b0c      	ldr	r3, [pc, #48]	; (8020fe0 <xQueueGenericSend+0x1f8>)
 8020fb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8020fb4:	601a      	str	r2, [r3, #0]
 8020fb6:	f3bf 8f4f 	dsb	sy
 8020fba:	f3bf 8f6f 	isb	sy
 8020fbe:	e772      	b.n	8020ea6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8020fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020fc2:	f000 fcdd 	bl	8021980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8020fc6:	f001 f829 	bl	802201c <xTaskResumeAll>
 8020fca:	e76c      	b.n	8020ea6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8020fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020fce:	f000 fcd7 	bl	8021980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8020fd2:	f001 f823 	bl	802201c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8020fd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8020fd8:	4618      	mov	r0, r3
 8020fda:	3738      	adds	r7, #56	; 0x38
 8020fdc:	46bd      	mov	sp, r7
 8020fde:	bd80      	pop	{r7, pc}
 8020fe0:	e000ed04 	.word	0xe000ed04

08020fe4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8020fe4:	b580      	push	{r7, lr}
 8020fe6:	b090      	sub	sp, #64	; 0x40
 8020fe8:	af00      	add	r7, sp, #0
 8020fea:	60f8      	str	r0, [r7, #12]
 8020fec:	60b9      	str	r1, [r7, #8]
 8020fee:	607a      	str	r2, [r7, #4]
 8020ff0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8020ff2:	68fb      	ldr	r3, [r7, #12]
 8020ff4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8020ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8020ff8:	2b00      	cmp	r3, #0
 8020ffa:	d10a      	bne.n	8021012 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8020ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021000:	f383 8811 	msr	BASEPRI, r3
 8021004:	f3bf 8f6f 	isb	sy
 8021008:	f3bf 8f4f 	dsb	sy
 802100c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 802100e:	bf00      	nop
 8021010:	e7fe      	b.n	8021010 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021012:	68bb      	ldr	r3, [r7, #8]
 8021014:	2b00      	cmp	r3, #0
 8021016:	d103      	bne.n	8021020 <xQueueGenericSendFromISR+0x3c>
 8021018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802101c:	2b00      	cmp	r3, #0
 802101e:	d101      	bne.n	8021024 <xQueueGenericSendFromISR+0x40>
 8021020:	2301      	movs	r3, #1
 8021022:	e000      	b.n	8021026 <xQueueGenericSendFromISR+0x42>
 8021024:	2300      	movs	r3, #0
 8021026:	2b00      	cmp	r3, #0
 8021028:	d10a      	bne.n	8021040 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 802102a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802102e:	f383 8811 	msr	BASEPRI, r3
 8021032:	f3bf 8f6f 	isb	sy
 8021036:	f3bf 8f4f 	dsb	sy
 802103a:	627b      	str	r3, [r7, #36]	; 0x24
}
 802103c:	bf00      	nop
 802103e:	e7fe      	b.n	802103e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8021040:	683b      	ldr	r3, [r7, #0]
 8021042:	2b02      	cmp	r3, #2
 8021044:	d103      	bne.n	802104e <xQueueGenericSendFromISR+0x6a>
 8021046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802104a:	2b01      	cmp	r3, #1
 802104c:	d101      	bne.n	8021052 <xQueueGenericSendFromISR+0x6e>
 802104e:	2301      	movs	r3, #1
 8021050:	e000      	b.n	8021054 <xQueueGenericSendFromISR+0x70>
 8021052:	2300      	movs	r3, #0
 8021054:	2b00      	cmp	r3, #0
 8021056:	d10a      	bne.n	802106e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8021058:	f04f 0350 	mov.w	r3, #80	; 0x50
 802105c:	f383 8811 	msr	BASEPRI, r3
 8021060:	f3bf 8f6f 	isb	sy
 8021064:	f3bf 8f4f 	dsb	sy
 8021068:	623b      	str	r3, [r7, #32]
}
 802106a:	bf00      	nop
 802106c:	e7fe      	b.n	802106c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 802106e:	f002 fb5b 	bl	8023728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8021072:	f3ef 8211 	mrs	r2, BASEPRI
 8021076:	f04f 0350 	mov.w	r3, #80	; 0x50
 802107a:	f383 8811 	msr	BASEPRI, r3
 802107e:	f3bf 8f6f 	isb	sy
 8021082:	f3bf 8f4f 	dsb	sy
 8021086:	61fa      	str	r2, [r7, #28]
 8021088:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 802108a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 802108c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 802108e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021096:	429a      	cmp	r2, r3
 8021098:	d302      	bcc.n	80210a0 <xQueueGenericSendFromISR+0xbc>
 802109a:	683b      	ldr	r3, [r7, #0]
 802109c:	2b02      	cmp	r3, #2
 802109e:	d12f      	bne.n	8021100 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80210a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80210a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80210aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80210ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80210b0:	683a      	ldr	r2, [r7, #0]
 80210b2:	68b9      	ldr	r1, [r7, #8]
 80210b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80210b6:	f000 fbd3 	bl	8021860 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80210ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80210be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80210c2:	d112      	bne.n	80210ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80210c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d016      	beq.n	80210fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80210cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210ce:	3324      	adds	r3, #36	; 0x24
 80210d0:	4618      	mov	r0, r3
 80210d2:	f001 f9e3 	bl	802249c <xTaskRemoveFromEventList>
 80210d6:	4603      	mov	r3, r0
 80210d8:	2b00      	cmp	r3, #0
 80210da:	d00e      	beq.n	80210fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80210dc:	687b      	ldr	r3, [r7, #4]
 80210de:	2b00      	cmp	r3, #0
 80210e0:	d00b      	beq.n	80210fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80210e2:	687b      	ldr	r3, [r7, #4]
 80210e4:	2201      	movs	r2, #1
 80210e6:	601a      	str	r2, [r3, #0]
 80210e8:	e007      	b.n	80210fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80210ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80210ee:	3301      	adds	r3, #1
 80210f0:	b2db      	uxtb	r3, r3
 80210f2:	b25a      	sxtb	r2, r3
 80210f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80210f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80210fa:	2301      	movs	r3, #1
 80210fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80210fe:	e001      	b.n	8021104 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8021100:	2300      	movs	r3, #0
 8021102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8021104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021106:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8021108:	697b      	ldr	r3, [r7, #20]
 802110a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 802110e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8021110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8021112:	4618      	mov	r0, r3
 8021114:	3740      	adds	r7, #64	; 0x40
 8021116:	46bd      	mov	sp, r7
 8021118:	bd80      	pop	{r7, pc}
	...

0802111c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 802111c:	b580      	push	{r7, lr}
 802111e:	b08c      	sub	sp, #48	; 0x30
 8021120:	af00      	add	r7, sp, #0
 8021122:	60f8      	str	r0, [r7, #12]
 8021124:	60b9      	str	r1, [r7, #8]
 8021126:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021128:	2300      	movs	r3, #0
 802112a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 802112c:	68fb      	ldr	r3, [r7, #12]
 802112e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021132:	2b00      	cmp	r3, #0
 8021134:	d10a      	bne.n	802114c <xQueueReceive+0x30>
	__asm volatile
 8021136:	f04f 0350 	mov.w	r3, #80	; 0x50
 802113a:	f383 8811 	msr	BASEPRI, r3
 802113e:	f3bf 8f6f 	isb	sy
 8021142:	f3bf 8f4f 	dsb	sy
 8021146:	623b      	str	r3, [r7, #32]
}
 8021148:	bf00      	nop
 802114a:	e7fe      	b.n	802114a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 802114c:	68bb      	ldr	r3, [r7, #8]
 802114e:	2b00      	cmp	r3, #0
 8021150:	d103      	bne.n	802115a <xQueueReceive+0x3e>
 8021152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021156:	2b00      	cmp	r3, #0
 8021158:	d101      	bne.n	802115e <xQueueReceive+0x42>
 802115a:	2301      	movs	r3, #1
 802115c:	e000      	b.n	8021160 <xQueueReceive+0x44>
 802115e:	2300      	movs	r3, #0
 8021160:	2b00      	cmp	r3, #0
 8021162:	d10a      	bne.n	802117a <xQueueReceive+0x5e>
	__asm volatile
 8021164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021168:	f383 8811 	msr	BASEPRI, r3
 802116c:	f3bf 8f6f 	isb	sy
 8021170:	f3bf 8f4f 	dsb	sy
 8021174:	61fb      	str	r3, [r7, #28]
}
 8021176:	bf00      	nop
 8021178:	e7fe      	b.n	8021178 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802117a:	f001 fb99 	bl	80228b0 <xTaskGetSchedulerState>
 802117e:	4603      	mov	r3, r0
 8021180:	2b00      	cmp	r3, #0
 8021182:	d102      	bne.n	802118a <xQueueReceive+0x6e>
 8021184:	687b      	ldr	r3, [r7, #4]
 8021186:	2b00      	cmp	r3, #0
 8021188:	d101      	bne.n	802118e <xQueueReceive+0x72>
 802118a:	2301      	movs	r3, #1
 802118c:	e000      	b.n	8021190 <xQueueReceive+0x74>
 802118e:	2300      	movs	r3, #0
 8021190:	2b00      	cmp	r3, #0
 8021192:	d10a      	bne.n	80211aa <xQueueReceive+0x8e>
	__asm volatile
 8021194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021198:	f383 8811 	msr	BASEPRI, r3
 802119c:	f3bf 8f6f 	isb	sy
 80211a0:	f3bf 8f4f 	dsb	sy
 80211a4:	61bb      	str	r3, [r7, #24]
}
 80211a6:	bf00      	nop
 80211a8:	e7fe      	b.n	80211a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80211aa:	f002 f9db 	bl	8023564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80211ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80211b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211b6:	2b00      	cmp	r3, #0
 80211b8:	d01f      	beq.n	80211fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80211ba:	68b9      	ldr	r1, [r7, #8]
 80211bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80211be:	f000 fbb9 	bl	8021934 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80211c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80211c4:	1e5a      	subs	r2, r3, #1
 80211c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80211ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211cc:	691b      	ldr	r3, [r3, #16]
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d00f      	beq.n	80211f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80211d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211d4:	3310      	adds	r3, #16
 80211d6:	4618      	mov	r0, r3
 80211d8:	f001 f960 	bl	802249c <xTaskRemoveFromEventList>
 80211dc:	4603      	mov	r3, r0
 80211de:	2b00      	cmp	r3, #0
 80211e0:	d007      	beq.n	80211f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80211e2:	4b3d      	ldr	r3, [pc, #244]	; (80212d8 <xQueueReceive+0x1bc>)
 80211e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80211e8:	601a      	str	r2, [r3, #0]
 80211ea:	f3bf 8f4f 	dsb	sy
 80211ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80211f2:	f002 f9e7 	bl	80235c4 <vPortExitCritical>
				return pdPASS;
 80211f6:	2301      	movs	r3, #1
 80211f8:	e069      	b.n	80212ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80211fa:	687b      	ldr	r3, [r7, #4]
 80211fc:	2b00      	cmp	r3, #0
 80211fe:	d103      	bne.n	8021208 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8021200:	f002 f9e0 	bl	80235c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8021204:	2300      	movs	r3, #0
 8021206:	e062      	b.n	80212ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8021208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802120a:	2b00      	cmp	r3, #0
 802120c:	d106      	bne.n	802121c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 802120e:	f107 0310 	add.w	r3, r7, #16
 8021212:	4618      	mov	r0, r3
 8021214:	f001 f9a6 	bl	8022564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8021218:	2301      	movs	r3, #1
 802121a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 802121c:	f002 f9d2 	bl	80235c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8021220:	f000 feee 	bl	8022000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021224:	f002 f99e 	bl	8023564 <vPortEnterCritical>
 8021228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802122a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802122e:	b25b      	sxtb	r3, r3
 8021230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021234:	d103      	bne.n	802123e <xQueueReceive+0x122>
 8021236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021238:	2200      	movs	r2, #0
 802123a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802123e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021244:	b25b      	sxtb	r3, r3
 8021246:	f1b3 3fff 	cmp.w	r3, #4294967295
 802124a:	d103      	bne.n	8021254 <xQueueReceive+0x138>
 802124c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802124e:	2200      	movs	r2, #0
 8021250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021254:	f002 f9b6 	bl	80235c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021258:	1d3a      	adds	r2, r7, #4
 802125a:	f107 0310 	add.w	r3, r7, #16
 802125e:	4611      	mov	r1, r2
 8021260:	4618      	mov	r0, r3
 8021262:	f001 f995 	bl	8022590 <xTaskCheckForTimeOut>
 8021266:	4603      	mov	r3, r0
 8021268:	2b00      	cmp	r3, #0
 802126a:	d123      	bne.n	80212b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802126c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802126e:	f000 fbd9 	bl	8021a24 <prvIsQueueEmpty>
 8021272:	4603      	mov	r3, r0
 8021274:	2b00      	cmp	r3, #0
 8021276:	d017      	beq.n	80212a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802127a:	3324      	adds	r3, #36	; 0x24
 802127c:	687a      	ldr	r2, [r7, #4]
 802127e:	4611      	mov	r1, r2
 8021280:	4618      	mov	r0, r3
 8021282:	f001 f8bb 	bl	80223fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021286:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021288:	f000 fb7a 	bl	8021980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 802128c:	f000 fec6 	bl	802201c <xTaskResumeAll>
 8021290:	4603      	mov	r3, r0
 8021292:	2b00      	cmp	r3, #0
 8021294:	d189      	bne.n	80211aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8021296:	4b10      	ldr	r3, [pc, #64]	; (80212d8 <xQueueReceive+0x1bc>)
 8021298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802129c:	601a      	str	r2, [r3, #0]
 802129e:	f3bf 8f4f 	dsb	sy
 80212a2:	f3bf 8f6f 	isb	sy
 80212a6:	e780      	b.n	80211aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80212a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212aa:	f000 fb69 	bl	8021980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80212ae:	f000 feb5 	bl	802201c <xTaskResumeAll>
 80212b2:	e77a      	b.n	80211aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80212b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212b6:	f000 fb63 	bl	8021980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80212ba:	f000 feaf 	bl	802201c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80212be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80212c0:	f000 fbb0 	bl	8021a24 <prvIsQueueEmpty>
 80212c4:	4603      	mov	r3, r0
 80212c6:	2b00      	cmp	r3, #0
 80212c8:	f43f af6f 	beq.w	80211aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80212cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80212ce:	4618      	mov	r0, r3
 80212d0:	3730      	adds	r7, #48	; 0x30
 80212d2:	46bd      	mov	sp, r7
 80212d4:	bd80      	pop	{r7, pc}
 80212d6:	bf00      	nop
 80212d8:	e000ed04 	.word	0xe000ed04

080212dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80212dc:	b580      	push	{r7, lr}
 80212de:	b08e      	sub	sp, #56	; 0x38
 80212e0:	af00      	add	r7, sp, #0
 80212e2:	6078      	str	r0, [r7, #4]
 80212e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80212e6:	2300      	movs	r3, #0
 80212e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80212ee:	2300      	movs	r3, #0
 80212f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80212f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	d10a      	bne.n	802130e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80212f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80212fc:	f383 8811 	msr	BASEPRI, r3
 8021300:	f3bf 8f6f 	isb	sy
 8021304:	f3bf 8f4f 	dsb	sy
 8021308:	623b      	str	r3, [r7, #32]
}
 802130a:	bf00      	nop
 802130c:	e7fe      	b.n	802130c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 802130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021312:	2b00      	cmp	r3, #0
 8021314:	d00a      	beq.n	802132c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8021316:	f04f 0350 	mov.w	r3, #80	; 0x50
 802131a:	f383 8811 	msr	BASEPRI, r3
 802131e:	f3bf 8f6f 	isb	sy
 8021322:	f3bf 8f4f 	dsb	sy
 8021326:	61fb      	str	r3, [r7, #28]
}
 8021328:	bf00      	nop
 802132a:	e7fe      	b.n	802132a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 802132c:	f001 fac0 	bl	80228b0 <xTaskGetSchedulerState>
 8021330:	4603      	mov	r3, r0
 8021332:	2b00      	cmp	r3, #0
 8021334:	d102      	bne.n	802133c <xQueueSemaphoreTake+0x60>
 8021336:	683b      	ldr	r3, [r7, #0]
 8021338:	2b00      	cmp	r3, #0
 802133a:	d101      	bne.n	8021340 <xQueueSemaphoreTake+0x64>
 802133c:	2301      	movs	r3, #1
 802133e:	e000      	b.n	8021342 <xQueueSemaphoreTake+0x66>
 8021340:	2300      	movs	r3, #0
 8021342:	2b00      	cmp	r3, #0
 8021344:	d10a      	bne.n	802135c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8021346:	f04f 0350 	mov.w	r3, #80	; 0x50
 802134a:	f383 8811 	msr	BASEPRI, r3
 802134e:	f3bf 8f6f 	isb	sy
 8021352:	f3bf 8f4f 	dsb	sy
 8021356:	61bb      	str	r3, [r7, #24]
}
 8021358:	bf00      	nop
 802135a:	e7fe      	b.n	802135a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 802135c:	f002 f902 	bl	8023564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8021360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021364:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8021366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021368:	2b00      	cmp	r3, #0
 802136a:	d024      	beq.n	80213b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 802136c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802136e:	1e5a      	subs	r2, r3, #1
 8021370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021372:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021376:	681b      	ldr	r3, [r3, #0]
 8021378:	2b00      	cmp	r3, #0
 802137a:	d104      	bne.n	8021386 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 802137c:	f001 fc0e 	bl	8022b9c <pvTaskIncrementMutexHeldCount>
 8021380:	4602      	mov	r2, r0
 8021382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021384:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021388:	691b      	ldr	r3, [r3, #16]
 802138a:	2b00      	cmp	r3, #0
 802138c:	d00f      	beq.n	80213ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802138e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021390:	3310      	adds	r3, #16
 8021392:	4618      	mov	r0, r3
 8021394:	f001 f882 	bl	802249c <xTaskRemoveFromEventList>
 8021398:	4603      	mov	r3, r0
 802139a:	2b00      	cmp	r3, #0
 802139c:	d007      	beq.n	80213ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 802139e:	4b54      	ldr	r3, [pc, #336]	; (80214f0 <xQueueSemaphoreTake+0x214>)
 80213a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80213a4:	601a      	str	r2, [r3, #0]
 80213a6:	f3bf 8f4f 	dsb	sy
 80213aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80213ae:	f002 f909 	bl	80235c4 <vPortExitCritical>
				return pdPASS;
 80213b2:	2301      	movs	r3, #1
 80213b4:	e097      	b.n	80214e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80213b6:	683b      	ldr	r3, [r7, #0]
 80213b8:	2b00      	cmp	r3, #0
 80213ba:	d111      	bne.n	80213e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80213bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d00a      	beq.n	80213d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80213c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80213c6:	f383 8811 	msr	BASEPRI, r3
 80213ca:	f3bf 8f6f 	isb	sy
 80213ce:	f3bf 8f4f 	dsb	sy
 80213d2:	617b      	str	r3, [r7, #20]
}
 80213d4:	bf00      	nop
 80213d6:	e7fe      	b.n	80213d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80213d8:	f002 f8f4 	bl	80235c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80213dc:	2300      	movs	r3, #0
 80213de:	e082      	b.n	80214e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80213e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80213e2:	2b00      	cmp	r3, #0
 80213e4:	d106      	bne.n	80213f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80213e6:	f107 030c 	add.w	r3, r7, #12
 80213ea:	4618      	mov	r0, r3
 80213ec:	f001 f8ba 	bl	8022564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80213f0:	2301      	movs	r3, #1
 80213f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80213f4:	f002 f8e6 	bl	80235c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80213f8:	f000 fe02 	bl	8022000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80213fc:	f002 f8b2 	bl	8023564 <vPortEnterCritical>
 8021400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021406:	b25b      	sxtb	r3, r3
 8021408:	f1b3 3fff 	cmp.w	r3, #4294967295
 802140c:	d103      	bne.n	8021416 <xQueueSemaphoreTake+0x13a>
 802140e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021410:	2200      	movs	r2, #0
 8021412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 802141c:	b25b      	sxtb	r3, r3
 802141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021422:	d103      	bne.n	802142c <xQueueSemaphoreTake+0x150>
 8021424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021426:	2200      	movs	r2, #0
 8021428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 802142c:	f002 f8ca 	bl	80235c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021430:	463a      	mov	r2, r7
 8021432:	f107 030c 	add.w	r3, r7, #12
 8021436:	4611      	mov	r1, r2
 8021438:	4618      	mov	r0, r3
 802143a:	f001 f8a9 	bl	8022590 <xTaskCheckForTimeOut>
 802143e:	4603      	mov	r3, r0
 8021440:	2b00      	cmp	r3, #0
 8021442:	d132      	bne.n	80214aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8021446:	f000 faed 	bl	8021a24 <prvIsQueueEmpty>
 802144a:	4603      	mov	r3, r0
 802144c:	2b00      	cmp	r3, #0
 802144e:	d026      	beq.n	802149e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8021450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021452:	681b      	ldr	r3, [r3, #0]
 8021454:	2b00      	cmp	r3, #0
 8021456:	d109      	bne.n	802146c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8021458:	f002 f884 	bl	8023564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 802145c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802145e:	689b      	ldr	r3, [r3, #8]
 8021460:	4618      	mov	r0, r3
 8021462:	f001 fa43 	bl	80228ec <xTaskPriorityInherit>
 8021466:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8021468:	f002 f8ac 	bl	80235c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 802146c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802146e:	3324      	adds	r3, #36	; 0x24
 8021470:	683a      	ldr	r2, [r7, #0]
 8021472:	4611      	mov	r1, r2
 8021474:	4618      	mov	r0, r3
 8021476:	f000 ffc1 	bl	80223fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 802147a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 802147c:	f000 fa80 	bl	8021980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021480:	f000 fdcc 	bl	802201c <xTaskResumeAll>
 8021484:	4603      	mov	r3, r0
 8021486:	2b00      	cmp	r3, #0
 8021488:	f47f af68 	bne.w	802135c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 802148c:	4b18      	ldr	r3, [pc, #96]	; (80214f0 <xQueueSemaphoreTake+0x214>)
 802148e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021492:	601a      	str	r2, [r3, #0]
 8021494:	f3bf 8f4f 	dsb	sy
 8021498:	f3bf 8f6f 	isb	sy
 802149c:	e75e      	b.n	802135c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 802149e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214a0:	f000 fa6e 	bl	8021980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80214a4:	f000 fdba 	bl	802201c <xTaskResumeAll>
 80214a8:	e758      	b.n	802135c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80214aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214ac:	f000 fa68 	bl	8021980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80214b0:	f000 fdb4 	bl	802201c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80214b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214b6:	f000 fab5 	bl	8021a24 <prvIsQueueEmpty>
 80214ba:	4603      	mov	r3, r0
 80214bc:	2b00      	cmp	r3, #0
 80214be:	f43f af4d 	beq.w	802135c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80214c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80214c4:	2b00      	cmp	r3, #0
 80214c6:	d00d      	beq.n	80214e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80214c8:	f002 f84c 	bl	8023564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80214cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80214ce:	f000 f9af 	bl	8021830 <prvGetDisinheritPriorityAfterTimeout>
 80214d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80214d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80214d6:	689b      	ldr	r3, [r3, #8]
 80214d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80214da:	4618      	mov	r0, r3
 80214dc:	f001 fadc 	bl	8022a98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80214e0:	f002 f870 	bl	80235c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80214e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80214e6:	4618      	mov	r0, r3
 80214e8:	3738      	adds	r7, #56	; 0x38
 80214ea:	46bd      	mov	sp, r7
 80214ec:	bd80      	pop	{r7, pc}
 80214ee:	bf00      	nop
 80214f0:	e000ed04 	.word	0xe000ed04

080214f4 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80214f4:	b580      	push	{r7, lr}
 80214f6:	b08e      	sub	sp, #56	; 0x38
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	60f8      	str	r0, [r7, #12]
 80214fc:	60b9      	str	r1, [r7, #8]
 80214fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8021500:	2300      	movs	r3, #0
 8021502:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = xQueue;
 8021504:	68fb      	ldr	r3, [r7, #12]
 8021506:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8021508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802150a:	2b00      	cmp	r3, #0
 802150c:	d10a      	bne.n	8021524 <xQueuePeek+0x30>
	__asm volatile
 802150e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021512:	f383 8811 	msr	BASEPRI, r3
 8021516:	f3bf 8f6f 	isb	sy
 802151a:	f3bf 8f4f 	dsb	sy
 802151e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8021520:	bf00      	nop
 8021522:	e7fe      	b.n	8021522 <xQueuePeek+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8021524:	68bb      	ldr	r3, [r7, #8]
 8021526:	2b00      	cmp	r3, #0
 8021528:	d103      	bne.n	8021532 <xQueuePeek+0x3e>
 802152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802152e:	2b00      	cmp	r3, #0
 8021530:	d101      	bne.n	8021536 <xQueuePeek+0x42>
 8021532:	2301      	movs	r3, #1
 8021534:	e000      	b.n	8021538 <xQueuePeek+0x44>
 8021536:	2300      	movs	r3, #0
 8021538:	2b00      	cmp	r3, #0
 802153a:	d10a      	bne.n	8021552 <xQueuePeek+0x5e>
	__asm volatile
 802153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021540:	f383 8811 	msr	BASEPRI, r3
 8021544:	f3bf 8f6f 	isb	sy
 8021548:	f3bf 8f4f 	dsb	sy
 802154c:	623b      	str	r3, [r7, #32]
}
 802154e:	bf00      	nop
 8021550:	e7fe      	b.n	8021550 <xQueuePeek+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8021552:	f001 f9ad 	bl	80228b0 <xTaskGetSchedulerState>
 8021556:	4603      	mov	r3, r0
 8021558:	2b00      	cmp	r3, #0
 802155a:	d102      	bne.n	8021562 <xQueuePeek+0x6e>
 802155c:	687b      	ldr	r3, [r7, #4]
 802155e:	2b00      	cmp	r3, #0
 8021560:	d101      	bne.n	8021566 <xQueuePeek+0x72>
 8021562:	2301      	movs	r3, #1
 8021564:	e000      	b.n	8021568 <xQueuePeek+0x74>
 8021566:	2300      	movs	r3, #0
 8021568:	2b00      	cmp	r3, #0
 802156a:	d10a      	bne.n	8021582 <xQueuePeek+0x8e>
	__asm volatile
 802156c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021570:	f383 8811 	msr	BASEPRI, r3
 8021574:	f3bf 8f6f 	isb	sy
 8021578:	f3bf 8f4f 	dsb	sy
 802157c:	61fb      	str	r3, [r7, #28]
}
 802157e:	bf00      	nop
 8021580:	e7fe      	b.n	8021580 <xQueuePeek+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8021582:	f001 ffef 	bl	8023564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802158a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 802158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802158e:	2b00      	cmp	r3, #0
 8021590:	d021      	beq.n	80215d6 <xQueuePeek+0xe2>
			{
				/* Remember the read position so it can be reset after the data
				is read from the queue as this function is only peeking the
				data, not removing it. */
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8021592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021594:	68db      	ldr	r3, [r3, #12]
 8021596:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021598:	68b9      	ldr	r1, [r7, #8]
 802159a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802159c:	f000 f9ca 	bl	8021934 <prvCopyDataFromQueue>
				traceQUEUE_PEEK( pxQueue );

				/* The data is not being removed, so reset the read pointer. */
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80215a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80215a4:	60da      	str	r2, [r3, #12]

				/* The data is being left in the queue, so see if there are
				any other tasks waiting for the data. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80215a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80215aa:	2b00      	cmp	r3, #0
 80215ac:	d00f      	beq.n	80215ce <xQueuePeek+0xda>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80215ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80215b0:	3324      	adds	r3, #36	; 0x24
 80215b2:	4618      	mov	r0, r3
 80215b4:	f000 ff72 	bl	802249c <xTaskRemoveFromEventList>
 80215b8:	4603      	mov	r3, r0
 80215ba:	2b00      	cmp	r3, #0
 80215bc:	d007      	beq.n	80215ce <xQueuePeek+0xda>
					{
						/* The task waiting has a higher priority than this task. */
						queueYIELD_IF_USING_PREEMPTION();
 80215be:	4b3d      	ldr	r3, [pc, #244]	; (80216b4 <xQueuePeek+0x1c0>)
 80215c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80215c4:	601a      	str	r2, [r3, #0]
 80215c6:	f3bf 8f4f 	dsb	sy
 80215ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80215ce:	f001 fff9 	bl	80235c4 <vPortExitCritical>
				return pdPASS;
 80215d2:	2301      	movs	r3, #1
 80215d4:	e069      	b.n	80216aa <xQueuePeek+0x1b6>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80215d6:	687b      	ldr	r3, [r7, #4]
 80215d8:	2b00      	cmp	r3, #0
 80215da:	d103      	bne.n	80215e4 <xQueuePeek+0xf0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80215dc:	f001 fff2 	bl	80235c4 <vPortExitCritical>
					traceQUEUE_PEEK_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80215e0:	2300      	movs	r3, #0
 80215e2:	e062      	b.n	80216aa <xQueuePeek+0x1b6>
				}
				else if( xEntryTimeSet == pdFALSE )
 80215e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80215e6:	2b00      	cmp	r3, #0
 80215e8:	d106      	bne.n	80215f8 <xQueuePeek+0x104>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure ready to enter the blocked
					state. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80215ea:	f107 0314 	add.w	r3, r7, #20
 80215ee:	4618      	mov	r0, r3
 80215f0:	f000 ffb8 	bl	8022564 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80215f4:	2301      	movs	r3, #1
 80215f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80215f8:	f001 ffe4 	bl	80235c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80215fc:	f000 fd00 	bl	8022000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8021600:	f001 ffb0 	bl	8023564 <vPortEnterCritical>
 8021604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021606:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802160a:	b25b      	sxtb	r3, r3
 802160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021610:	d103      	bne.n	802161a <xQueuePeek+0x126>
 8021612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021614:	2200      	movs	r2, #0
 8021616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802161c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021620:	b25b      	sxtb	r3, r3
 8021622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021626:	d103      	bne.n	8021630 <xQueuePeek+0x13c>
 8021628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802162a:	2200      	movs	r2, #0
 802162c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021630:	f001 ffc8 	bl	80235c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8021634:	1d3a      	adds	r2, r7, #4
 8021636:	f107 0314 	add.w	r3, r7, #20
 802163a:	4611      	mov	r1, r2
 802163c:	4618      	mov	r0, r3
 802163e:	f000 ffa7 	bl	8022590 <xTaskCheckForTimeOut>
 8021642:	4603      	mov	r3, r0
 8021644:	2b00      	cmp	r3, #0
 8021646:	d123      	bne.n	8021690 <xQueuePeek+0x19c>
		{
			/* Timeout has not expired yet, check to see if there is data in the
			queue now, and if not enter the Blocked state to wait for data. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8021648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802164a:	f000 f9eb 	bl	8021a24 <prvIsQueueEmpty>
 802164e:	4603      	mov	r3, r0
 8021650:	2b00      	cmp	r3, #0
 8021652:	d017      	beq.n	8021684 <xQueuePeek+0x190>
			{
				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8021654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021656:	3324      	adds	r3, #36	; 0x24
 8021658:	687a      	ldr	r2, [r7, #4]
 802165a:	4611      	mov	r1, r2
 802165c:	4618      	mov	r0, r3
 802165e:	f000 fecd 	bl	80223fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8021662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021664:	f000 f98c 	bl	8021980 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8021668:	f000 fcd8 	bl	802201c <xTaskResumeAll>
 802166c:	4603      	mov	r3, r0
 802166e:	2b00      	cmp	r3, #0
 8021670:	d187      	bne.n	8021582 <xQueuePeek+0x8e>
				{
					portYIELD_WITHIN_API();
 8021672:	4b10      	ldr	r3, [pc, #64]	; (80216b4 <xQueuePeek+0x1c0>)
 8021674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021678:	601a      	str	r2, [r3, #0]
 802167a:	f3bf 8f4f 	dsb	sy
 802167e:	f3bf 8f6f 	isb	sy
 8021682:	e77e      	b.n	8021582 <xQueuePeek+0x8e>
			}
			else
			{
				/* There is data in the queue now, so don't enter the blocked
				state, instead return to try and obtain the data. */
				prvUnlockQueue( pxQueue );
 8021684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021686:	f000 f97b 	bl	8021980 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 802168a:	f000 fcc7 	bl	802201c <xTaskResumeAll>
 802168e:	e778      	b.n	8021582 <xQueuePeek+0x8e>
		}
		else
		{
			/* The timeout has expired.  If there is still no data in the queue
			exit, otherwise go back and try to read the data again. */
			prvUnlockQueue( pxQueue );
 8021690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021692:	f000 f975 	bl	8021980 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8021696:	f000 fcc1 	bl	802201c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 802169a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802169c:	f000 f9c2 	bl	8021a24 <prvIsQueueEmpty>
 80216a0:	4603      	mov	r3, r0
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	f43f af6d 	beq.w	8021582 <xQueuePeek+0x8e>
			{
				traceQUEUE_PEEK_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80216a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80216aa:	4618      	mov	r0, r3
 80216ac:	3738      	adds	r7, #56	; 0x38
 80216ae:	46bd      	mov	sp, r7
 80216b0:	bd80      	pop	{r7, pc}
 80216b2:	bf00      	nop
 80216b4:	e000ed04 	.word	0xe000ed04

080216b8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80216b8:	b580      	push	{r7, lr}
 80216ba:	b08e      	sub	sp, #56	; 0x38
 80216bc:	af00      	add	r7, sp, #0
 80216be:	60f8      	str	r0, [r7, #12]
 80216c0:	60b9      	str	r1, [r7, #8]
 80216c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80216c4:	68fb      	ldr	r3, [r7, #12]
 80216c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80216c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d10a      	bne.n	80216e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80216ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80216d2:	f383 8811 	msr	BASEPRI, r3
 80216d6:	f3bf 8f6f 	isb	sy
 80216da:	f3bf 8f4f 	dsb	sy
 80216de:	623b      	str	r3, [r7, #32]
}
 80216e0:	bf00      	nop
 80216e2:	e7fe      	b.n	80216e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80216e4:	68bb      	ldr	r3, [r7, #8]
 80216e6:	2b00      	cmp	r3, #0
 80216e8:	d103      	bne.n	80216f2 <xQueueReceiveFromISR+0x3a>
 80216ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80216ee:	2b00      	cmp	r3, #0
 80216f0:	d101      	bne.n	80216f6 <xQueueReceiveFromISR+0x3e>
 80216f2:	2301      	movs	r3, #1
 80216f4:	e000      	b.n	80216f8 <xQueueReceiveFromISR+0x40>
 80216f6:	2300      	movs	r3, #0
 80216f8:	2b00      	cmp	r3, #0
 80216fa:	d10a      	bne.n	8021712 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80216fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021700:	f383 8811 	msr	BASEPRI, r3
 8021704:	f3bf 8f6f 	isb	sy
 8021708:	f3bf 8f4f 	dsb	sy
 802170c:	61fb      	str	r3, [r7, #28]
}
 802170e:	bf00      	nop
 8021710:	e7fe      	b.n	8021710 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8021712:	f002 f809 	bl	8023728 <vPortValidateInterruptPriority>
	__asm volatile
 8021716:	f3ef 8211 	mrs	r2, BASEPRI
 802171a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802171e:	f383 8811 	msr	BASEPRI, r3
 8021722:	f3bf 8f6f 	isb	sy
 8021726:	f3bf 8f4f 	dsb	sy
 802172a:	61ba      	str	r2, [r7, #24]
 802172c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 802172e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8021730:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021736:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802173a:	2b00      	cmp	r3, #0
 802173c:	d02f      	beq.n	802179e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 802173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8021748:	68b9      	ldr	r1, [r7, #8]
 802174a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802174c:	f000 f8f2 	bl	8021934 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8021750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021752:	1e5a      	subs	r2, r3, #1
 8021754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021756:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8021758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802175c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021760:	d112      	bne.n	8021788 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8021762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021764:	691b      	ldr	r3, [r3, #16]
 8021766:	2b00      	cmp	r3, #0
 8021768:	d016      	beq.n	8021798 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 802176a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802176c:	3310      	adds	r3, #16
 802176e:	4618      	mov	r0, r3
 8021770:	f000 fe94 	bl	802249c <xTaskRemoveFromEventList>
 8021774:	4603      	mov	r3, r0
 8021776:	2b00      	cmp	r3, #0
 8021778:	d00e      	beq.n	8021798 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	2b00      	cmp	r3, #0
 802177e:	d00b      	beq.n	8021798 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8021780:	687b      	ldr	r3, [r7, #4]
 8021782:	2201      	movs	r2, #1
 8021784:	601a      	str	r2, [r3, #0]
 8021786:	e007      	b.n	8021798 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8021788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802178c:	3301      	adds	r3, #1
 802178e:	b2db      	uxtb	r3, r3
 8021790:	b25a      	sxtb	r2, r3
 8021792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8021798:	2301      	movs	r3, #1
 802179a:	637b      	str	r3, [r7, #52]	; 0x34
 802179c:	e001      	b.n	80217a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 802179e:	2300      	movs	r3, #0
 80217a0:	637b      	str	r3, [r7, #52]	; 0x34
 80217a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80217a6:	693b      	ldr	r3, [r7, #16]
 80217a8:	f383 8811 	msr	BASEPRI, r3
}
 80217ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80217ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80217b0:	4618      	mov	r0, r3
 80217b2:	3738      	adds	r7, #56	; 0x38
 80217b4:	46bd      	mov	sp, r7
 80217b6:	bd80      	pop	{r7, pc}

080217b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80217b8:	b580      	push	{r7, lr}
 80217ba:	b084      	sub	sp, #16
 80217bc:	af00      	add	r7, sp, #0
 80217be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	2b00      	cmp	r3, #0
 80217c4:	d10a      	bne.n	80217dc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80217c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80217ca:	f383 8811 	msr	BASEPRI, r3
 80217ce:	f3bf 8f6f 	isb	sy
 80217d2:	f3bf 8f4f 	dsb	sy
 80217d6:	60bb      	str	r3, [r7, #8]
}
 80217d8:	bf00      	nop
 80217da:	e7fe      	b.n	80217da <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80217dc:	f001 fec2 	bl	8023564 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80217e0:	687b      	ldr	r3, [r7, #4]
 80217e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80217e4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80217e6:	f001 feed 	bl	80235c4 <vPortExitCritical>

	return uxReturn;
 80217ea:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80217ec:	4618      	mov	r0, r3
 80217ee:	3710      	adds	r7, #16
 80217f0:	46bd      	mov	sp, r7
 80217f2:	bd80      	pop	{r7, pc}

080217f4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80217f4:	b480      	push	{r7}
 80217f6:	b087      	sub	sp, #28
 80217f8:	af00      	add	r7, sp, #0
 80217fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80217fc:	687b      	ldr	r3, [r7, #4]
 80217fe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8021800:	697b      	ldr	r3, [r7, #20]
 8021802:	2b00      	cmp	r3, #0
 8021804:	d10a      	bne.n	802181c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8021806:	f04f 0350 	mov.w	r3, #80	; 0x50
 802180a:	f383 8811 	msr	BASEPRI, r3
 802180e:	f3bf 8f6f 	isb	sy
 8021812:	f3bf 8f4f 	dsb	sy
 8021816:	60fb      	str	r3, [r7, #12]
}
 8021818:	bf00      	nop
 802181a:	e7fe      	b.n	802181a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 802181c:	697b      	ldr	r3, [r7, #20]
 802181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021820:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8021822:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8021824:	4618      	mov	r0, r3
 8021826:	371c      	adds	r7, #28
 8021828:	46bd      	mov	sp, r7
 802182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802182e:	4770      	bx	lr

08021830 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8021830:	b480      	push	{r7}
 8021832:	b085      	sub	sp, #20
 8021834:	af00      	add	r7, sp, #0
 8021836:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8021838:	687b      	ldr	r3, [r7, #4]
 802183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802183c:	2b00      	cmp	r3, #0
 802183e:	d006      	beq.n	802184e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8021840:	687b      	ldr	r3, [r7, #4]
 8021842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021844:	681b      	ldr	r3, [r3, #0]
 8021846:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802184a:	60fb      	str	r3, [r7, #12]
 802184c:	e001      	b.n	8021852 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 802184e:	2300      	movs	r3, #0
 8021850:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8021852:	68fb      	ldr	r3, [r7, #12]
	}
 8021854:	4618      	mov	r0, r3
 8021856:	3714      	adds	r7, #20
 8021858:	46bd      	mov	sp, r7
 802185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802185e:	4770      	bx	lr

08021860 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8021860:	b580      	push	{r7, lr}
 8021862:	b086      	sub	sp, #24
 8021864:	af00      	add	r7, sp, #0
 8021866:	60f8      	str	r0, [r7, #12]
 8021868:	60b9      	str	r1, [r7, #8]
 802186a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 802186c:	2300      	movs	r3, #0
 802186e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8021870:	68fb      	ldr	r3, [r7, #12]
 8021872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021874:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8021876:	68fb      	ldr	r3, [r7, #12]
 8021878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802187a:	2b00      	cmp	r3, #0
 802187c:	d10d      	bne.n	802189a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 802187e:	68fb      	ldr	r3, [r7, #12]
 8021880:	681b      	ldr	r3, [r3, #0]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d14d      	bne.n	8021922 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	689b      	ldr	r3, [r3, #8]
 802188a:	4618      	mov	r0, r3
 802188c:	f001 f896 	bl	80229bc <xTaskPriorityDisinherit>
 8021890:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8021892:	68fb      	ldr	r3, [r7, #12]
 8021894:	2200      	movs	r2, #0
 8021896:	609a      	str	r2, [r3, #8]
 8021898:	e043      	b.n	8021922 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 802189a:	687b      	ldr	r3, [r7, #4]
 802189c:	2b00      	cmp	r3, #0
 802189e:	d119      	bne.n	80218d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80218a0:	68fb      	ldr	r3, [r7, #12]
 80218a2:	6858      	ldr	r0, [r3, #4]
 80218a4:	68fb      	ldr	r3, [r7, #12]
 80218a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218a8:	461a      	mov	r2, r3
 80218aa:	68b9      	ldr	r1, [r7, #8]
 80218ac:	f00c fad3 	bl	802de56 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80218b0:	68fb      	ldr	r3, [r7, #12]
 80218b2:	685a      	ldr	r2, [r3, #4]
 80218b4:	68fb      	ldr	r3, [r7, #12]
 80218b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218b8:	441a      	add	r2, r3
 80218ba:	68fb      	ldr	r3, [r7, #12]
 80218bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80218be:	68fb      	ldr	r3, [r7, #12]
 80218c0:	685a      	ldr	r2, [r3, #4]
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	689b      	ldr	r3, [r3, #8]
 80218c6:	429a      	cmp	r2, r3
 80218c8:	d32b      	bcc.n	8021922 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80218ca:	68fb      	ldr	r3, [r7, #12]
 80218cc:	681a      	ldr	r2, [r3, #0]
 80218ce:	68fb      	ldr	r3, [r7, #12]
 80218d0:	605a      	str	r2, [r3, #4]
 80218d2:	e026      	b.n	8021922 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80218d4:	68fb      	ldr	r3, [r7, #12]
 80218d6:	68d8      	ldr	r0, [r3, #12]
 80218d8:	68fb      	ldr	r3, [r7, #12]
 80218da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218dc:	461a      	mov	r2, r3
 80218de:	68b9      	ldr	r1, [r7, #8]
 80218e0:	f00c fab9 	bl	802de56 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80218e4:	68fb      	ldr	r3, [r7, #12]
 80218e6:	68da      	ldr	r2, [r3, #12]
 80218e8:	68fb      	ldr	r3, [r7, #12]
 80218ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80218ec:	425b      	negs	r3, r3
 80218ee:	441a      	add	r2, r3
 80218f0:	68fb      	ldr	r3, [r7, #12]
 80218f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80218f4:	68fb      	ldr	r3, [r7, #12]
 80218f6:	68da      	ldr	r2, [r3, #12]
 80218f8:	68fb      	ldr	r3, [r7, #12]
 80218fa:	681b      	ldr	r3, [r3, #0]
 80218fc:	429a      	cmp	r2, r3
 80218fe:	d207      	bcs.n	8021910 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8021900:	68fb      	ldr	r3, [r7, #12]
 8021902:	689a      	ldr	r2, [r3, #8]
 8021904:	68fb      	ldr	r3, [r7, #12]
 8021906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021908:	425b      	negs	r3, r3
 802190a:	441a      	add	r2, r3
 802190c:	68fb      	ldr	r3, [r7, #12]
 802190e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8021910:	687b      	ldr	r3, [r7, #4]
 8021912:	2b02      	cmp	r3, #2
 8021914:	d105      	bne.n	8021922 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8021916:	693b      	ldr	r3, [r7, #16]
 8021918:	2b00      	cmp	r3, #0
 802191a:	d002      	beq.n	8021922 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 802191c:	693b      	ldr	r3, [r7, #16]
 802191e:	3b01      	subs	r3, #1
 8021920:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8021922:	693b      	ldr	r3, [r7, #16]
 8021924:	1c5a      	adds	r2, r3, #1
 8021926:	68fb      	ldr	r3, [r7, #12]
 8021928:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 802192a:	697b      	ldr	r3, [r7, #20]
}
 802192c:	4618      	mov	r0, r3
 802192e:	3718      	adds	r7, #24
 8021930:	46bd      	mov	sp, r7
 8021932:	bd80      	pop	{r7, pc}

08021934 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8021934:	b580      	push	{r7, lr}
 8021936:	b082      	sub	sp, #8
 8021938:	af00      	add	r7, sp, #0
 802193a:	6078      	str	r0, [r7, #4]
 802193c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 802193e:	687b      	ldr	r3, [r7, #4]
 8021940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021942:	2b00      	cmp	r3, #0
 8021944:	d018      	beq.n	8021978 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8021946:	687b      	ldr	r3, [r7, #4]
 8021948:	68da      	ldr	r2, [r3, #12]
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802194e:	441a      	add	r2, r3
 8021950:	687b      	ldr	r3, [r7, #4]
 8021952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8021954:	687b      	ldr	r3, [r7, #4]
 8021956:	68da      	ldr	r2, [r3, #12]
 8021958:	687b      	ldr	r3, [r7, #4]
 802195a:	689b      	ldr	r3, [r3, #8]
 802195c:	429a      	cmp	r2, r3
 802195e:	d303      	bcc.n	8021968 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	681a      	ldr	r2, [r3, #0]
 8021964:	687b      	ldr	r3, [r7, #4]
 8021966:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8021968:	687b      	ldr	r3, [r7, #4]
 802196a:	68d9      	ldr	r1, [r3, #12]
 802196c:	687b      	ldr	r3, [r7, #4]
 802196e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021970:	461a      	mov	r2, r3
 8021972:	6838      	ldr	r0, [r7, #0]
 8021974:	f00c fa6f 	bl	802de56 <memcpy>
	}
}
 8021978:	bf00      	nop
 802197a:	3708      	adds	r7, #8
 802197c:	46bd      	mov	sp, r7
 802197e:	bd80      	pop	{r7, pc}

08021980 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8021980:	b580      	push	{r7, lr}
 8021982:	b084      	sub	sp, #16
 8021984:	af00      	add	r7, sp, #0
 8021986:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8021988:	f001 fdec 	bl	8023564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 802198c:	687b      	ldr	r3, [r7, #4]
 802198e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021992:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8021994:	e011      	b.n	80219ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802199a:	2b00      	cmp	r3, #0
 802199c:	d012      	beq.n	80219c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	3324      	adds	r3, #36	; 0x24
 80219a2:	4618      	mov	r0, r3
 80219a4:	f000 fd7a 	bl	802249c <xTaskRemoveFromEventList>
 80219a8:	4603      	mov	r3, r0
 80219aa:	2b00      	cmp	r3, #0
 80219ac:	d001      	beq.n	80219b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80219ae:	f000 fe51 	bl	8022654 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80219b2:	7bfb      	ldrb	r3, [r7, #15]
 80219b4:	3b01      	subs	r3, #1
 80219b6:	b2db      	uxtb	r3, r3
 80219b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80219ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80219be:	2b00      	cmp	r3, #0
 80219c0:	dce9      	bgt.n	8021996 <prvUnlockQueue+0x16>
 80219c2:	e000      	b.n	80219c6 <prvUnlockQueue+0x46>
					break;
 80219c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80219c6:	687b      	ldr	r3, [r7, #4]
 80219c8:	22ff      	movs	r2, #255	; 0xff
 80219ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80219ce:	f001 fdf9 	bl	80235c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80219d2:	f001 fdc7 	bl	8023564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80219d6:	687b      	ldr	r3, [r7, #4]
 80219d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80219dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80219de:	e011      	b.n	8021a04 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80219e0:	687b      	ldr	r3, [r7, #4]
 80219e2:	691b      	ldr	r3, [r3, #16]
 80219e4:	2b00      	cmp	r3, #0
 80219e6:	d012      	beq.n	8021a0e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80219e8:	687b      	ldr	r3, [r7, #4]
 80219ea:	3310      	adds	r3, #16
 80219ec:	4618      	mov	r0, r3
 80219ee:	f000 fd55 	bl	802249c <xTaskRemoveFromEventList>
 80219f2:	4603      	mov	r3, r0
 80219f4:	2b00      	cmp	r3, #0
 80219f6:	d001      	beq.n	80219fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80219f8:	f000 fe2c 	bl	8022654 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80219fc:	7bbb      	ldrb	r3, [r7, #14]
 80219fe:	3b01      	subs	r3, #1
 8021a00:	b2db      	uxtb	r3, r3
 8021a02:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8021a04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8021a08:	2b00      	cmp	r3, #0
 8021a0a:	dce9      	bgt.n	80219e0 <prvUnlockQueue+0x60>
 8021a0c:	e000      	b.n	8021a10 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8021a0e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8021a10:	687b      	ldr	r3, [r7, #4]
 8021a12:	22ff      	movs	r2, #255	; 0xff
 8021a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8021a18:	f001 fdd4 	bl	80235c4 <vPortExitCritical>
}
 8021a1c:	bf00      	nop
 8021a1e:	3710      	adds	r7, #16
 8021a20:	46bd      	mov	sp, r7
 8021a22:	bd80      	pop	{r7, pc}

08021a24 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8021a24:	b580      	push	{r7, lr}
 8021a26:	b084      	sub	sp, #16
 8021a28:	af00      	add	r7, sp, #0
 8021a2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021a2c:	f001 fd9a 	bl	8023564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a34:	2b00      	cmp	r3, #0
 8021a36:	d102      	bne.n	8021a3e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8021a38:	2301      	movs	r3, #1
 8021a3a:	60fb      	str	r3, [r7, #12]
 8021a3c:	e001      	b.n	8021a42 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8021a3e:	2300      	movs	r3, #0
 8021a40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021a42:	f001 fdbf 	bl	80235c4 <vPortExitCritical>

	return xReturn;
 8021a46:	68fb      	ldr	r3, [r7, #12]
}
 8021a48:	4618      	mov	r0, r3
 8021a4a:	3710      	adds	r7, #16
 8021a4c:	46bd      	mov	sp, r7
 8021a4e:	bd80      	pop	{r7, pc}

08021a50 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8021a50:	b580      	push	{r7, lr}
 8021a52:	b084      	sub	sp, #16
 8021a54:	af00      	add	r7, sp, #0
 8021a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8021a58:	f001 fd84 	bl	8023564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8021a5c:	687b      	ldr	r3, [r7, #4]
 8021a5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8021a60:	687b      	ldr	r3, [r7, #4]
 8021a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021a64:	429a      	cmp	r2, r3
 8021a66:	d102      	bne.n	8021a6e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8021a68:	2301      	movs	r3, #1
 8021a6a:	60fb      	str	r3, [r7, #12]
 8021a6c:	e001      	b.n	8021a72 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8021a6e:	2300      	movs	r3, #0
 8021a70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8021a72:	f001 fda7 	bl	80235c4 <vPortExitCritical>

	return xReturn;
 8021a76:	68fb      	ldr	r3, [r7, #12]
}
 8021a78:	4618      	mov	r0, r3
 8021a7a:	3710      	adds	r7, #16
 8021a7c:	46bd      	mov	sp, r7
 8021a7e:	bd80      	pop	{r7, pc}

08021a80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8021a80:	b480      	push	{r7}
 8021a82:	b085      	sub	sp, #20
 8021a84:	af00      	add	r7, sp, #0
 8021a86:	6078      	str	r0, [r7, #4]
 8021a88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	60fb      	str	r3, [r7, #12]
 8021a8e:	e014      	b.n	8021aba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8021a90:	4a0f      	ldr	r2, [pc, #60]	; (8021ad0 <vQueueAddToRegistry+0x50>)
 8021a92:	68fb      	ldr	r3, [r7, #12]
 8021a94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d10b      	bne.n	8021ab4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8021a9c:	490c      	ldr	r1, [pc, #48]	; (8021ad0 <vQueueAddToRegistry+0x50>)
 8021a9e:	68fb      	ldr	r3, [r7, #12]
 8021aa0:	683a      	ldr	r2, [r7, #0]
 8021aa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8021aa6:	4a0a      	ldr	r2, [pc, #40]	; (8021ad0 <vQueueAddToRegistry+0x50>)
 8021aa8:	68fb      	ldr	r3, [r7, #12]
 8021aaa:	00db      	lsls	r3, r3, #3
 8021aac:	4413      	add	r3, r2
 8021aae:	687a      	ldr	r2, [r7, #4]
 8021ab0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8021ab2:	e006      	b.n	8021ac2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8021ab4:	68fb      	ldr	r3, [r7, #12]
 8021ab6:	3301      	adds	r3, #1
 8021ab8:	60fb      	str	r3, [r7, #12]
 8021aba:	68fb      	ldr	r3, [r7, #12]
 8021abc:	2b09      	cmp	r3, #9
 8021abe:	d9e7      	bls.n	8021a90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8021ac0:	bf00      	nop
 8021ac2:	bf00      	nop
 8021ac4:	3714      	adds	r7, #20
 8021ac6:	46bd      	mov	sp, r7
 8021ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021acc:	4770      	bx	lr
 8021ace:	bf00      	nop
 8021ad0:	20001d08 	.word	0x20001d08

08021ad4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8021ad4:	b580      	push	{r7, lr}
 8021ad6:	b086      	sub	sp, #24
 8021ad8:	af00      	add	r7, sp, #0
 8021ada:	60f8      	str	r0, [r7, #12]
 8021adc:	60b9      	str	r1, [r7, #8]
 8021ade:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8021ae0:	68fb      	ldr	r3, [r7, #12]
 8021ae2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8021ae4:	f001 fd3e 	bl	8023564 <vPortEnterCritical>
 8021ae8:	697b      	ldr	r3, [r7, #20]
 8021aea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8021aee:	b25b      	sxtb	r3, r3
 8021af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021af4:	d103      	bne.n	8021afe <vQueueWaitForMessageRestricted+0x2a>
 8021af6:	697b      	ldr	r3, [r7, #20]
 8021af8:	2200      	movs	r2, #0
 8021afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8021afe:	697b      	ldr	r3, [r7, #20]
 8021b00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8021b04:	b25b      	sxtb	r3, r3
 8021b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021b0a:	d103      	bne.n	8021b14 <vQueueWaitForMessageRestricted+0x40>
 8021b0c:	697b      	ldr	r3, [r7, #20]
 8021b0e:	2200      	movs	r2, #0
 8021b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8021b14:	f001 fd56 	bl	80235c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8021b18:	697b      	ldr	r3, [r7, #20]
 8021b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021b1c:	2b00      	cmp	r3, #0
 8021b1e:	d106      	bne.n	8021b2e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8021b20:	697b      	ldr	r3, [r7, #20]
 8021b22:	3324      	adds	r3, #36	; 0x24
 8021b24:	687a      	ldr	r2, [r7, #4]
 8021b26:	68b9      	ldr	r1, [r7, #8]
 8021b28:	4618      	mov	r0, r3
 8021b2a:	f000 fc8b 	bl	8022444 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8021b2e:	6978      	ldr	r0, [r7, #20]
 8021b30:	f7ff ff26 	bl	8021980 <prvUnlockQueue>
	}
 8021b34:	bf00      	nop
 8021b36:	3718      	adds	r7, #24
 8021b38:	46bd      	mov	sp, r7
 8021b3a:	bd80      	pop	{r7, pc}

08021b3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8021b3c:	b580      	push	{r7, lr}
 8021b3e:	b08e      	sub	sp, #56	; 0x38
 8021b40:	af04      	add	r7, sp, #16
 8021b42:	60f8      	str	r0, [r7, #12]
 8021b44:	60b9      	str	r1, [r7, #8]
 8021b46:	607a      	str	r2, [r7, #4]
 8021b48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8021b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d10a      	bne.n	8021b66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8021b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b54:	f383 8811 	msr	BASEPRI, r3
 8021b58:	f3bf 8f6f 	isb	sy
 8021b5c:	f3bf 8f4f 	dsb	sy
 8021b60:	623b      	str	r3, [r7, #32]
}
 8021b62:	bf00      	nop
 8021b64:	e7fe      	b.n	8021b64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8021b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d10a      	bne.n	8021b82 <xTaskCreateStatic+0x46>
	__asm volatile
 8021b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b70:	f383 8811 	msr	BASEPRI, r3
 8021b74:	f3bf 8f6f 	isb	sy
 8021b78:	f3bf 8f4f 	dsb	sy
 8021b7c:	61fb      	str	r3, [r7, #28]
}
 8021b7e:	bf00      	nop
 8021b80:	e7fe      	b.n	8021b80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8021b82:	23ac      	movs	r3, #172	; 0xac
 8021b84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8021b86:	693b      	ldr	r3, [r7, #16]
 8021b88:	2bac      	cmp	r3, #172	; 0xac
 8021b8a:	d00a      	beq.n	8021ba2 <xTaskCreateStatic+0x66>
	__asm volatile
 8021b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021b90:	f383 8811 	msr	BASEPRI, r3
 8021b94:	f3bf 8f6f 	isb	sy
 8021b98:	f3bf 8f4f 	dsb	sy
 8021b9c:	61bb      	str	r3, [r7, #24]
}
 8021b9e:	bf00      	nop
 8021ba0:	e7fe      	b.n	8021ba0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8021ba2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8021ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021ba6:	2b00      	cmp	r3, #0
 8021ba8:	d01e      	beq.n	8021be8 <xTaskCreateStatic+0xac>
 8021baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d01b      	beq.n	8021be8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8021bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8021bb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8021bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8021bb8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8021bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bbc:	2202      	movs	r2, #2
 8021bbe:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8021bc2:	2300      	movs	r3, #0
 8021bc4:	9303      	str	r3, [sp, #12]
 8021bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bc8:	9302      	str	r3, [sp, #8]
 8021bca:	f107 0314 	add.w	r3, r7, #20
 8021bce:	9301      	str	r3, [sp, #4]
 8021bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bd2:	9300      	str	r3, [sp, #0]
 8021bd4:	683b      	ldr	r3, [r7, #0]
 8021bd6:	687a      	ldr	r2, [r7, #4]
 8021bd8:	68b9      	ldr	r1, [r7, #8]
 8021bda:	68f8      	ldr	r0, [r7, #12]
 8021bdc:	f000 f850 	bl	8021c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021be0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021be2:	f000 f8f7 	bl	8021dd4 <prvAddNewTaskToReadyList>
 8021be6:	e001      	b.n	8021bec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8021be8:	2300      	movs	r3, #0
 8021bea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8021bec:	697b      	ldr	r3, [r7, #20]
	}
 8021bee:	4618      	mov	r0, r3
 8021bf0:	3728      	adds	r7, #40	; 0x28
 8021bf2:	46bd      	mov	sp, r7
 8021bf4:	bd80      	pop	{r7, pc}

08021bf6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8021bf6:	b580      	push	{r7, lr}
 8021bf8:	b08c      	sub	sp, #48	; 0x30
 8021bfa:	af04      	add	r7, sp, #16
 8021bfc:	60f8      	str	r0, [r7, #12]
 8021bfe:	60b9      	str	r1, [r7, #8]
 8021c00:	603b      	str	r3, [r7, #0]
 8021c02:	4613      	mov	r3, r2
 8021c04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8021c06:	88fb      	ldrh	r3, [r7, #6]
 8021c08:	009b      	lsls	r3, r3, #2
 8021c0a:	4618      	mov	r0, r3
 8021c0c:	f001 fdcc 	bl	80237a8 <pvPortMalloc>
 8021c10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8021c12:	697b      	ldr	r3, [r7, #20]
 8021c14:	2b00      	cmp	r3, #0
 8021c16:	d00e      	beq.n	8021c36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8021c18:	20ac      	movs	r0, #172	; 0xac
 8021c1a:	f001 fdc5 	bl	80237a8 <pvPortMalloc>
 8021c1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8021c20:	69fb      	ldr	r3, [r7, #28]
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	d003      	beq.n	8021c2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8021c26:	69fb      	ldr	r3, [r7, #28]
 8021c28:	697a      	ldr	r2, [r7, #20]
 8021c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8021c2c:	e005      	b.n	8021c3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8021c2e:	6978      	ldr	r0, [r7, #20]
 8021c30:	f001 fe00 	bl	8023834 <vPortFree>
 8021c34:	e001      	b.n	8021c3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8021c36:	2300      	movs	r3, #0
 8021c38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8021c3a:	69fb      	ldr	r3, [r7, #28]
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d017      	beq.n	8021c70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8021c40:	69fb      	ldr	r3, [r7, #28]
 8021c42:	2200      	movs	r2, #0
 8021c44:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8021c48:	88fa      	ldrh	r2, [r7, #6]
 8021c4a:	2300      	movs	r3, #0
 8021c4c:	9303      	str	r3, [sp, #12]
 8021c4e:	69fb      	ldr	r3, [r7, #28]
 8021c50:	9302      	str	r3, [sp, #8]
 8021c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c54:	9301      	str	r3, [sp, #4]
 8021c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c58:	9300      	str	r3, [sp, #0]
 8021c5a:	683b      	ldr	r3, [r7, #0]
 8021c5c:	68b9      	ldr	r1, [r7, #8]
 8021c5e:	68f8      	ldr	r0, [r7, #12]
 8021c60:	f000 f80e 	bl	8021c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8021c64:	69f8      	ldr	r0, [r7, #28]
 8021c66:	f000 f8b5 	bl	8021dd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8021c6a:	2301      	movs	r3, #1
 8021c6c:	61bb      	str	r3, [r7, #24]
 8021c6e:	e002      	b.n	8021c76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8021c70:	f04f 33ff 	mov.w	r3, #4294967295
 8021c74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8021c76:	69bb      	ldr	r3, [r7, #24]
	}
 8021c78:	4618      	mov	r0, r3
 8021c7a:	3720      	adds	r7, #32
 8021c7c:	46bd      	mov	sp, r7
 8021c7e:	bd80      	pop	{r7, pc}

08021c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8021c80:	b580      	push	{r7, lr}
 8021c82:	b088      	sub	sp, #32
 8021c84:	af00      	add	r7, sp, #0
 8021c86:	60f8      	str	r0, [r7, #12]
 8021c88:	60b9      	str	r1, [r7, #8]
 8021c8a:	607a      	str	r2, [r7, #4]
 8021c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8021c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8021c92:	687b      	ldr	r3, [r7, #4]
 8021c94:	009b      	lsls	r3, r3, #2
 8021c96:	461a      	mov	r2, r3
 8021c98:	21a5      	movs	r1, #165	; 0xa5
 8021c9a:	f00b ff07 	bl	802daac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8021c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021ca8:	3b01      	subs	r3, #1
 8021caa:	009b      	lsls	r3, r3, #2
 8021cac:	4413      	add	r3, r2
 8021cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8021cb0:	69bb      	ldr	r3, [r7, #24]
 8021cb2:	f023 0307 	bic.w	r3, r3, #7
 8021cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8021cb8:	69bb      	ldr	r3, [r7, #24]
 8021cba:	f003 0307 	and.w	r3, r3, #7
 8021cbe:	2b00      	cmp	r3, #0
 8021cc0:	d00a      	beq.n	8021cd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8021cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021cc6:	f383 8811 	msr	BASEPRI, r3
 8021cca:	f3bf 8f6f 	isb	sy
 8021cce:	f3bf 8f4f 	dsb	sy
 8021cd2:	617b      	str	r3, [r7, #20]
}
 8021cd4:	bf00      	nop
 8021cd6:	e7fe      	b.n	8021cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8021cd8:	68bb      	ldr	r3, [r7, #8]
 8021cda:	2b00      	cmp	r3, #0
 8021cdc:	d01f      	beq.n	8021d1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021cde:	2300      	movs	r3, #0
 8021ce0:	61fb      	str	r3, [r7, #28]
 8021ce2:	e012      	b.n	8021d0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8021ce4:	68ba      	ldr	r2, [r7, #8]
 8021ce6:	69fb      	ldr	r3, [r7, #28]
 8021ce8:	4413      	add	r3, r2
 8021cea:	7819      	ldrb	r1, [r3, #0]
 8021cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021cee:	69fb      	ldr	r3, [r7, #28]
 8021cf0:	4413      	add	r3, r2
 8021cf2:	3334      	adds	r3, #52	; 0x34
 8021cf4:	460a      	mov	r2, r1
 8021cf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8021cf8:	68ba      	ldr	r2, [r7, #8]
 8021cfa:	69fb      	ldr	r3, [r7, #28]
 8021cfc:	4413      	add	r3, r2
 8021cfe:	781b      	ldrb	r3, [r3, #0]
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d006      	beq.n	8021d12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8021d04:	69fb      	ldr	r3, [r7, #28]
 8021d06:	3301      	adds	r3, #1
 8021d08:	61fb      	str	r3, [r7, #28]
 8021d0a:	69fb      	ldr	r3, [r7, #28]
 8021d0c:	2b0f      	cmp	r3, #15
 8021d0e:	d9e9      	bls.n	8021ce4 <prvInitialiseNewTask+0x64>
 8021d10:	e000      	b.n	8021d14 <prvInitialiseNewTask+0x94>
			{
				break;
 8021d12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8021d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d16:	2200      	movs	r2, #0
 8021d18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8021d1c:	e003      	b.n	8021d26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8021d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d20:	2200      	movs	r2, #0
 8021d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8021d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d28:	2b37      	cmp	r3, #55	; 0x37
 8021d2a:	d901      	bls.n	8021d30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8021d2c:	2337      	movs	r3, #55	; 0x37
 8021d2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8021d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021d34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8021d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021d3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8021d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d3e:	2200      	movs	r2, #0
 8021d40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8021d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d44:	3304      	adds	r3, #4
 8021d46:	4618      	mov	r0, r3
 8021d48:	f7fe fdc6 	bl	80208d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8021d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d4e:	3318      	adds	r3, #24
 8021d50:	4618      	mov	r0, r3
 8021d52:	f7fe fdc1 	bl	80208d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8021d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021d5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8021d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8021d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8021d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021d6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8021d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d6e:	2200      	movs	r2, #0
 8021d70:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8021d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d74:	2200      	movs	r2, #0
 8021d76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8021d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d7c:	2200      	movs	r2, #0
 8021d7e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8021d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d84:	3358      	adds	r3, #88	; 0x58
 8021d86:	224c      	movs	r2, #76	; 0x4c
 8021d88:	2100      	movs	r1, #0
 8021d8a:	4618      	mov	r0, r3
 8021d8c:	f00b fe8e 	bl	802daac <memset>
 8021d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d92:	4a0d      	ldr	r2, [pc, #52]	; (8021dc8 <prvInitialiseNewTask+0x148>)
 8021d94:	65da      	str	r2, [r3, #92]	; 0x5c
 8021d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d98:	4a0c      	ldr	r2, [pc, #48]	; (8021dcc <prvInitialiseNewTask+0x14c>)
 8021d9a:	661a      	str	r2, [r3, #96]	; 0x60
 8021d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021d9e:	4a0c      	ldr	r2, [pc, #48]	; (8021dd0 <prvInitialiseNewTask+0x150>)
 8021da0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8021da2:	683a      	ldr	r2, [r7, #0]
 8021da4:	68f9      	ldr	r1, [r7, #12]
 8021da6:	69b8      	ldr	r0, [r7, #24]
 8021da8:	f001 faae 	bl	8023308 <pxPortInitialiseStack>
 8021dac:	4602      	mov	r2, r0
 8021dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021db0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8021db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021db4:	2b00      	cmp	r3, #0
 8021db6:	d002      	beq.n	8021dbe <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8021db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021dbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021dbe:	bf00      	nop
 8021dc0:	3720      	adds	r7, #32
 8021dc2:	46bd      	mov	sp, r7
 8021dc4:	bd80      	pop	{r7, pc}
 8021dc6:	bf00      	nop
 8021dc8:	2000d9d0 	.word	0x2000d9d0
 8021dcc:	2000da38 	.word	0x2000da38
 8021dd0:	2000daa0 	.word	0x2000daa0

08021dd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8021dd4:	b580      	push	{r7, lr}
 8021dd6:	b082      	sub	sp, #8
 8021dd8:	af00      	add	r7, sp, #0
 8021dda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8021ddc:	f001 fbc2 	bl	8023564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8021de0:	4b2d      	ldr	r3, [pc, #180]	; (8021e98 <prvAddNewTaskToReadyList+0xc4>)
 8021de2:	681b      	ldr	r3, [r3, #0]
 8021de4:	3301      	adds	r3, #1
 8021de6:	4a2c      	ldr	r2, [pc, #176]	; (8021e98 <prvAddNewTaskToReadyList+0xc4>)
 8021de8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8021dea:	4b2c      	ldr	r3, [pc, #176]	; (8021e9c <prvAddNewTaskToReadyList+0xc8>)
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	2b00      	cmp	r3, #0
 8021df0:	d109      	bne.n	8021e06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8021df2:	4a2a      	ldr	r2, [pc, #168]	; (8021e9c <prvAddNewTaskToReadyList+0xc8>)
 8021df4:	687b      	ldr	r3, [r7, #4]
 8021df6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8021df8:	4b27      	ldr	r3, [pc, #156]	; (8021e98 <prvAddNewTaskToReadyList+0xc4>)
 8021dfa:	681b      	ldr	r3, [r3, #0]
 8021dfc:	2b01      	cmp	r3, #1
 8021dfe:	d110      	bne.n	8021e22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8021e00:	f000 fc4c 	bl	802269c <prvInitialiseTaskLists>
 8021e04:	e00d      	b.n	8021e22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8021e06:	4b26      	ldr	r3, [pc, #152]	; (8021ea0 <prvAddNewTaskToReadyList+0xcc>)
 8021e08:	681b      	ldr	r3, [r3, #0]
 8021e0a:	2b00      	cmp	r3, #0
 8021e0c:	d109      	bne.n	8021e22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8021e0e:	4b23      	ldr	r3, [pc, #140]	; (8021e9c <prvAddNewTaskToReadyList+0xc8>)
 8021e10:	681b      	ldr	r3, [r3, #0]
 8021e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e14:	687b      	ldr	r3, [r7, #4]
 8021e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e18:	429a      	cmp	r2, r3
 8021e1a:	d802      	bhi.n	8021e22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8021e1c:	4a1f      	ldr	r2, [pc, #124]	; (8021e9c <prvAddNewTaskToReadyList+0xc8>)
 8021e1e:	687b      	ldr	r3, [r7, #4]
 8021e20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8021e22:	4b20      	ldr	r3, [pc, #128]	; (8021ea4 <prvAddNewTaskToReadyList+0xd0>)
 8021e24:	681b      	ldr	r3, [r3, #0]
 8021e26:	3301      	adds	r3, #1
 8021e28:	4a1e      	ldr	r2, [pc, #120]	; (8021ea4 <prvAddNewTaskToReadyList+0xd0>)
 8021e2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8021e2c:	4b1d      	ldr	r3, [pc, #116]	; (8021ea4 <prvAddNewTaskToReadyList+0xd0>)
 8021e2e:	681a      	ldr	r2, [r3, #0]
 8021e30:	687b      	ldr	r3, [r7, #4]
 8021e32:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8021e34:	687b      	ldr	r3, [r7, #4]
 8021e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e38:	4b1b      	ldr	r3, [pc, #108]	; (8021ea8 <prvAddNewTaskToReadyList+0xd4>)
 8021e3a:	681b      	ldr	r3, [r3, #0]
 8021e3c:	429a      	cmp	r2, r3
 8021e3e:	d903      	bls.n	8021e48 <prvAddNewTaskToReadyList+0x74>
 8021e40:	687b      	ldr	r3, [r7, #4]
 8021e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e44:	4a18      	ldr	r2, [pc, #96]	; (8021ea8 <prvAddNewTaskToReadyList+0xd4>)
 8021e46:	6013      	str	r3, [r2, #0]
 8021e48:	687b      	ldr	r3, [r7, #4]
 8021e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e4c:	4613      	mov	r3, r2
 8021e4e:	009b      	lsls	r3, r3, #2
 8021e50:	4413      	add	r3, r2
 8021e52:	009b      	lsls	r3, r3, #2
 8021e54:	4a15      	ldr	r2, [pc, #84]	; (8021eac <prvAddNewTaskToReadyList+0xd8>)
 8021e56:	441a      	add	r2, r3
 8021e58:	687b      	ldr	r3, [r7, #4]
 8021e5a:	3304      	adds	r3, #4
 8021e5c:	4619      	mov	r1, r3
 8021e5e:	4610      	mov	r0, r2
 8021e60:	f7fe fd47 	bl	80208f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8021e64:	f001 fbae 	bl	80235c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8021e68:	4b0d      	ldr	r3, [pc, #52]	; (8021ea0 <prvAddNewTaskToReadyList+0xcc>)
 8021e6a:	681b      	ldr	r3, [r3, #0]
 8021e6c:	2b00      	cmp	r3, #0
 8021e6e:	d00e      	beq.n	8021e8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8021e70:	4b0a      	ldr	r3, [pc, #40]	; (8021e9c <prvAddNewTaskToReadyList+0xc8>)
 8021e72:	681b      	ldr	r3, [r3, #0]
 8021e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021e7a:	429a      	cmp	r2, r3
 8021e7c:	d207      	bcs.n	8021e8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8021e7e:	4b0c      	ldr	r3, [pc, #48]	; (8021eb0 <prvAddNewTaskToReadyList+0xdc>)
 8021e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021e84:	601a      	str	r2, [r3, #0]
 8021e86:	f3bf 8f4f 	dsb	sy
 8021e8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8021e8e:	bf00      	nop
 8021e90:	3708      	adds	r7, #8
 8021e92:	46bd      	mov	sp, r7
 8021e94:	bd80      	pop	{r7, pc}
 8021e96:	bf00      	nop
 8021e98:	2000222c 	.word	0x2000222c
 8021e9c:	20001d58 	.word	0x20001d58
 8021ea0:	20002238 	.word	0x20002238
 8021ea4:	20002248 	.word	0x20002248
 8021ea8:	20002234 	.word	0x20002234
 8021eac:	20001d5c 	.word	0x20001d5c
 8021eb0:	e000ed04 	.word	0xe000ed04

08021eb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8021eb4:	b580      	push	{r7, lr}
 8021eb6:	b084      	sub	sp, #16
 8021eb8:	af00      	add	r7, sp, #0
 8021eba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8021ebc:	2300      	movs	r3, #0
 8021ebe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8021ec0:	687b      	ldr	r3, [r7, #4]
 8021ec2:	2b00      	cmp	r3, #0
 8021ec4:	d017      	beq.n	8021ef6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8021ec6:	4b13      	ldr	r3, [pc, #76]	; (8021f14 <vTaskDelay+0x60>)
 8021ec8:	681b      	ldr	r3, [r3, #0]
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	d00a      	beq.n	8021ee4 <vTaskDelay+0x30>
	__asm volatile
 8021ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021ed2:	f383 8811 	msr	BASEPRI, r3
 8021ed6:	f3bf 8f6f 	isb	sy
 8021eda:	f3bf 8f4f 	dsb	sy
 8021ede:	60bb      	str	r3, [r7, #8]
}
 8021ee0:	bf00      	nop
 8021ee2:	e7fe      	b.n	8021ee2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8021ee4:	f000 f88c 	bl	8022000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8021ee8:	2100      	movs	r1, #0
 8021eea:	6878      	ldr	r0, [r7, #4]
 8021eec:	f000 fe6a 	bl	8022bc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8021ef0:	f000 f894 	bl	802201c <xTaskResumeAll>
 8021ef4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8021ef6:	68fb      	ldr	r3, [r7, #12]
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d107      	bne.n	8021f0c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8021efc:	4b06      	ldr	r3, [pc, #24]	; (8021f18 <vTaskDelay+0x64>)
 8021efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8021f02:	601a      	str	r2, [r3, #0]
 8021f04:	f3bf 8f4f 	dsb	sy
 8021f08:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8021f0c:	bf00      	nop
 8021f0e:	3710      	adds	r7, #16
 8021f10:	46bd      	mov	sp, r7
 8021f12:	bd80      	pop	{r7, pc}
 8021f14:	20002254 	.word	0x20002254
 8021f18:	e000ed04 	.word	0xe000ed04

08021f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8021f1c:	b580      	push	{r7, lr}
 8021f1e:	b08a      	sub	sp, #40	; 0x28
 8021f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8021f22:	2300      	movs	r3, #0
 8021f24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8021f26:	2300      	movs	r3, #0
 8021f28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8021f2a:	463a      	mov	r2, r7
 8021f2c:	1d39      	adds	r1, r7, #4
 8021f2e:	f107 0308 	add.w	r3, r7, #8
 8021f32:	4618      	mov	r0, r3
 8021f34:	f7fe fc7c 	bl	8020830 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8021f38:	6839      	ldr	r1, [r7, #0]
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	68ba      	ldr	r2, [r7, #8]
 8021f3e:	9202      	str	r2, [sp, #8]
 8021f40:	9301      	str	r3, [sp, #4]
 8021f42:	2300      	movs	r3, #0
 8021f44:	9300      	str	r3, [sp, #0]
 8021f46:	2300      	movs	r3, #0
 8021f48:	460a      	mov	r2, r1
 8021f4a:	4925      	ldr	r1, [pc, #148]	; (8021fe0 <vTaskStartScheduler+0xc4>)
 8021f4c:	4825      	ldr	r0, [pc, #148]	; (8021fe4 <vTaskStartScheduler+0xc8>)
 8021f4e:	f7ff fdf5 	bl	8021b3c <xTaskCreateStatic>
 8021f52:	4603      	mov	r3, r0
 8021f54:	4a24      	ldr	r2, [pc, #144]	; (8021fe8 <vTaskStartScheduler+0xcc>)
 8021f56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8021f58:	4b23      	ldr	r3, [pc, #140]	; (8021fe8 <vTaskStartScheduler+0xcc>)
 8021f5a:	681b      	ldr	r3, [r3, #0]
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	d002      	beq.n	8021f66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8021f60:	2301      	movs	r3, #1
 8021f62:	617b      	str	r3, [r7, #20]
 8021f64:	e001      	b.n	8021f6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8021f66:	2300      	movs	r3, #0
 8021f68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8021f6a:	697b      	ldr	r3, [r7, #20]
 8021f6c:	2b01      	cmp	r3, #1
 8021f6e:	d102      	bne.n	8021f76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8021f70:	f000 fe7c 	bl	8022c6c <xTimerCreateTimerTask>
 8021f74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8021f76:	697b      	ldr	r3, [r7, #20]
 8021f78:	2b01      	cmp	r3, #1
 8021f7a:	d11d      	bne.n	8021fb8 <vTaskStartScheduler+0x9c>
	__asm volatile
 8021f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021f80:	f383 8811 	msr	BASEPRI, r3
 8021f84:	f3bf 8f6f 	isb	sy
 8021f88:	f3bf 8f4f 	dsb	sy
 8021f8c:	613b      	str	r3, [r7, #16]
}
 8021f8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8021f90:	4b16      	ldr	r3, [pc, #88]	; (8021fec <vTaskStartScheduler+0xd0>)
 8021f92:	681b      	ldr	r3, [r3, #0]
 8021f94:	3358      	adds	r3, #88	; 0x58
 8021f96:	4a16      	ldr	r2, [pc, #88]	; (8021ff0 <vTaskStartScheduler+0xd4>)
 8021f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8021f9a:	4b16      	ldr	r3, [pc, #88]	; (8021ff4 <vTaskStartScheduler+0xd8>)
 8021f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8021fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8021fa2:	4b15      	ldr	r3, [pc, #84]	; (8021ff8 <vTaskStartScheduler+0xdc>)
 8021fa4:	2201      	movs	r2, #1
 8021fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8021fa8:	4b14      	ldr	r3, [pc, #80]	; (8021ffc <vTaskStartScheduler+0xe0>)
 8021faa:	2200      	movs	r2, #0
 8021fac:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8021fae:	f7ef f84b 	bl	8011048 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8021fb2:	f001 fa35 	bl	8023420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8021fb6:	e00e      	b.n	8021fd6 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8021fb8:	697b      	ldr	r3, [r7, #20]
 8021fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021fbe:	d10a      	bne.n	8021fd6 <vTaskStartScheduler+0xba>
	__asm volatile
 8021fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8021fc4:	f383 8811 	msr	BASEPRI, r3
 8021fc8:	f3bf 8f6f 	isb	sy
 8021fcc:	f3bf 8f4f 	dsb	sy
 8021fd0:	60fb      	str	r3, [r7, #12]
}
 8021fd2:	bf00      	nop
 8021fd4:	e7fe      	b.n	8021fd4 <vTaskStartScheduler+0xb8>
}
 8021fd6:	bf00      	nop
 8021fd8:	3718      	adds	r7, #24
 8021fda:	46bd      	mov	sp, r7
 8021fdc:	bd80      	pop	{r7, pc}
 8021fde:	bf00      	nop
 8021fe0:	080337c8 	.word	0x080337c8
 8021fe4:	0802266d 	.word	0x0802266d
 8021fe8:	20002250 	.word	0x20002250
 8021fec:	20001d58 	.word	0x20001d58
 8021ff0:	20000188 	.word	0x20000188
 8021ff4:	2000224c 	.word	0x2000224c
 8021ff8:	20002238 	.word	0x20002238
 8021ffc:	20002230 	.word	0x20002230

08022000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8022000:	b480      	push	{r7}
 8022002:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8022004:	4b04      	ldr	r3, [pc, #16]	; (8022018 <vTaskSuspendAll+0x18>)
 8022006:	681b      	ldr	r3, [r3, #0]
 8022008:	3301      	adds	r3, #1
 802200a:	4a03      	ldr	r2, [pc, #12]	; (8022018 <vTaskSuspendAll+0x18>)
 802200c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 802200e:	bf00      	nop
 8022010:	46bd      	mov	sp, r7
 8022012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022016:	4770      	bx	lr
 8022018:	20002254 	.word	0x20002254

0802201c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 802201c:	b580      	push	{r7, lr}
 802201e:	b084      	sub	sp, #16
 8022020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8022022:	2300      	movs	r3, #0
 8022024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8022026:	2300      	movs	r3, #0
 8022028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 802202a:	4b42      	ldr	r3, [pc, #264]	; (8022134 <xTaskResumeAll+0x118>)
 802202c:	681b      	ldr	r3, [r3, #0]
 802202e:	2b00      	cmp	r3, #0
 8022030:	d10a      	bne.n	8022048 <xTaskResumeAll+0x2c>
	__asm volatile
 8022032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022036:	f383 8811 	msr	BASEPRI, r3
 802203a:	f3bf 8f6f 	isb	sy
 802203e:	f3bf 8f4f 	dsb	sy
 8022042:	603b      	str	r3, [r7, #0]
}
 8022044:	bf00      	nop
 8022046:	e7fe      	b.n	8022046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8022048:	f001 fa8c 	bl	8023564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 802204c:	4b39      	ldr	r3, [pc, #228]	; (8022134 <xTaskResumeAll+0x118>)
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	3b01      	subs	r3, #1
 8022052:	4a38      	ldr	r2, [pc, #224]	; (8022134 <xTaskResumeAll+0x118>)
 8022054:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022056:	4b37      	ldr	r3, [pc, #220]	; (8022134 <xTaskResumeAll+0x118>)
 8022058:	681b      	ldr	r3, [r3, #0]
 802205a:	2b00      	cmp	r3, #0
 802205c:	d162      	bne.n	8022124 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 802205e:	4b36      	ldr	r3, [pc, #216]	; (8022138 <xTaskResumeAll+0x11c>)
 8022060:	681b      	ldr	r3, [r3, #0]
 8022062:	2b00      	cmp	r3, #0
 8022064:	d05e      	beq.n	8022124 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8022066:	e02f      	b.n	80220c8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022068:	4b34      	ldr	r3, [pc, #208]	; (802213c <xTaskResumeAll+0x120>)
 802206a:	68db      	ldr	r3, [r3, #12]
 802206c:	68db      	ldr	r3, [r3, #12]
 802206e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022070:	68fb      	ldr	r3, [r7, #12]
 8022072:	3318      	adds	r3, #24
 8022074:	4618      	mov	r0, r3
 8022076:	f7fe fc99 	bl	80209ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 802207a:	68fb      	ldr	r3, [r7, #12]
 802207c:	3304      	adds	r3, #4
 802207e:	4618      	mov	r0, r3
 8022080:	f7fe fc94 	bl	80209ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8022084:	68fb      	ldr	r3, [r7, #12]
 8022086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022088:	4b2d      	ldr	r3, [pc, #180]	; (8022140 <xTaskResumeAll+0x124>)
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	429a      	cmp	r2, r3
 802208e:	d903      	bls.n	8022098 <xTaskResumeAll+0x7c>
 8022090:	68fb      	ldr	r3, [r7, #12]
 8022092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022094:	4a2a      	ldr	r2, [pc, #168]	; (8022140 <xTaskResumeAll+0x124>)
 8022096:	6013      	str	r3, [r2, #0]
 8022098:	68fb      	ldr	r3, [r7, #12]
 802209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802209c:	4613      	mov	r3, r2
 802209e:	009b      	lsls	r3, r3, #2
 80220a0:	4413      	add	r3, r2
 80220a2:	009b      	lsls	r3, r3, #2
 80220a4:	4a27      	ldr	r2, [pc, #156]	; (8022144 <xTaskResumeAll+0x128>)
 80220a6:	441a      	add	r2, r3
 80220a8:	68fb      	ldr	r3, [r7, #12]
 80220aa:	3304      	adds	r3, #4
 80220ac:	4619      	mov	r1, r3
 80220ae:	4610      	mov	r0, r2
 80220b0:	f7fe fc1f 	bl	80208f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80220b4:	68fb      	ldr	r3, [r7, #12]
 80220b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80220b8:	4b23      	ldr	r3, [pc, #140]	; (8022148 <xTaskResumeAll+0x12c>)
 80220ba:	681b      	ldr	r3, [r3, #0]
 80220bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80220be:	429a      	cmp	r2, r3
 80220c0:	d302      	bcc.n	80220c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80220c2:	4b22      	ldr	r3, [pc, #136]	; (802214c <xTaskResumeAll+0x130>)
 80220c4:	2201      	movs	r2, #1
 80220c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80220c8:	4b1c      	ldr	r3, [pc, #112]	; (802213c <xTaskResumeAll+0x120>)
 80220ca:	681b      	ldr	r3, [r3, #0]
 80220cc:	2b00      	cmp	r3, #0
 80220ce:	d1cb      	bne.n	8022068 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80220d0:	68fb      	ldr	r3, [r7, #12]
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	d001      	beq.n	80220da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80220d6:	f000 fbbb 	bl	8022850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80220da:	4b1d      	ldr	r3, [pc, #116]	; (8022150 <xTaskResumeAll+0x134>)
 80220dc:	681b      	ldr	r3, [r3, #0]
 80220de:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80220e0:	687b      	ldr	r3, [r7, #4]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	d010      	beq.n	8022108 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80220e6:	f000 f847 	bl	8022178 <xTaskIncrementTick>
 80220ea:	4603      	mov	r3, r0
 80220ec:	2b00      	cmp	r3, #0
 80220ee:	d002      	beq.n	80220f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80220f0:	4b16      	ldr	r3, [pc, #88]	; (802214c <xTaskResumeAll+0x130>)
 80220f2:	2201      	movs	r2, #1
 80220f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80220f6:	687b      	ldr	r3, [r7, #4]
 80220f8:	3b01      	subs	r3, #1
 80220fa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80220fc:	687b      	ldr	r3, [r7, #4]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d1f1      	bne.n	80220e6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8022102:	4b13      	ldr	r3, [pc, #76]	; (8022150 <xTaskResumeAll+0x134>)
 8022104:	2200      	movs	r2, #0
 8022106:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8022108:	4b10      	ldr	r3, [pc, #64]	; (802214c <xTaskResumeAll+0x130>)
 802210a:	681b      	ldr	r3, [r3, #0]
 802210c:	2b00      	cmp	r3, #0
 802210e:	d009      	beq.n	8022124 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8022110:	2301      	movs	r3, #1
 8022112:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8022114:	4b0f      	ldr	r3, [pc, #60]	; (8022154 <xTaskResumeAll+0x138>)
 8022116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 802211a:	601a      	str	r2, [r3, #0]
 802211c:	f3bf 8f4f 	dsb	sy
 8022120:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8022124:	f001 fa4e 	bl	80235c4 <vPortExitCritical>

	return xAlreadyYielded;
 8022128:	68bb      	ldr	r3, [r7, #8]
}
 802212a:	4618      	mov	r0, r3
 802212c:	3710      	adds	r7, #16
 802212e:	46bd      	mov	sp, r7
 8022130:	bd80      	pop	{r7, pc}
 8022132:	bf00      	nop
 8022134:	20002254 	.word	0x20002254
 8022138:	2000222c 	.word	0x2000222c
 802213c:	200021ec 	.word	0x200021ec
 8022140:	20002234 	.word	0x20002234
 8022144:	20001d5c 	.word	0x20001d5c
 8022148:	20001d58 	.word	0x20001d58
 802214c:	20002240 	.word	0x20002240
 8022150:	2000223c 	.word	0x2000223c
 8022154:	e000ed04 	.word	0xe000ed04

08022158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8022158:	b480      	push	{r7}
 802215a:	b083      	sub	sp, #12
 802215c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 802215e:	4b05      	ldr	r3, [pc, #20]	; (8022174 <xTaskGetTickCount+0x1c>)
 8022160:	681b      	ldr	r3, [r3, #0]
 8022162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8022164:	687b      	ldr	r3, [r7, #4]
}
 8022166:	4618      	mov	r0, r3
 8022168:	370c      	adds	r7, #12
 802216a:	46bd      	mov	sp, r7
 802216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022170:	4770      	bx	lr
 8022172:	bf00      	nop
 8022174:	20002230 	.word	0x20002230

08022178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8022178:	b580      	push	{r7, lr}
 802217a:	b086      	sub	sp, #24
 802217c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 802217e:	2300      	movs	r3, #0
 8022180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8022182:	4b53      	ldr	r3, [pc, #332]	; (80222d0 <xTaskIncrementTick+0x158>)
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	2b00      	cmp	r3, #0
 8022188:	f040 8095 	bne.w	80222b6 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 802218c:	4b51      	ldr	r3, [pc, #324]	; (80222d4 <xTaskIncrementTick+0x15c>)
 802218e:	681b      	ldr	r3, [r3, #0]
 8022190:	3301      	adds	r3, #1
 8022192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8022194:	4a4f      	ldr	r2, [pc, #316]	; (80222d4 <xTaskIncrementTick+0x15c>)
 8022196:	693b      	ldr	r3, [r7, #16]
 8022198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 802219a:	693b      	ldr	r3, [r7, #16]
 802219c:	2b00      	cmp	r3, #0
 802219e:	d120      	bne.n	80221e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80221a0:	4b4d      	ldr	r3, [pc, #308]	; (80222d8 <xTaskIncrementTick+0x160>)
 80221a2:	681b      	ldr	r3, [r3, #0]
 80221a4:	681b      	ldr	r3, [r3, #0]
 80221a6:	2b00      	cmp	r3, #0
 80221a8:	d00a      	beq.n	80221c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80221aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80221ae:	f383 8811 	msr	BASEPRI, r3
 80221b2:	f3bf 8f6f 	isb	sy
 80221b6:	f3bf 8f4f 	dsb	sy
 80221ba:	603b      	str	r3, [r7, #0]
}
 80221bc:	bf00      	nop
 80221be:	e7fe      	b.n	80221be <xTaskIncrementTick+0x46>
 80221c0:	4b45      	ldr	r3, [pc, #276]	; (80222d8 <xTaskIncrementTick+0x160>)
 80221c2:	681b      	ldr	r3, [r3, #0]
 80221c4:	60fb      	str	r3, [r7, #12]
 80221c6:	4b45      	ldr	r3, [pc, #276]	; (80222dc <xTaskIncrementTick+0x164>)
 80221c8:	681b      	ldr	r3, [r3, #0]
 80221ca:	4a43      	ldr	r2, [pc, #268]	; (80222d8 <xTaskIncrementTick+0x160>)
 80221cc:	6013      	str	r3, [r2, #0]
 80221ce:	4a43      	ldr	r2, [pc, #268]	; (80222dc <xTaskIncrementTick+0x164>)
 80221d0:	68fb      	ldr	r3, [r7, #12]
 80221d2:	6013      	str	r3, [r2, #0]
 80221d4:	4b42      	ldr	r3, [pc, #264]	; (80222e0 <xTaskIncrementTick+0x168>)
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	3301      	adds	r3, #1
 80221da:	4a41      	ldr	r2, [pc, #260]	; (80222e0 <xTaskIncrementTick+0x168>)
 80221dc:	6013      	str	r3, [r2, #0]
 80221de:	f000 fb37 	bl	8022850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80221e2:	4b40      	ldr	r3, [pc, #256]	; (80222e4 <xTaskIncrementTick+0x16c>)
 80221e4:	681b      	ldr	r3, [r3, #0]
 80221e6:	693a      	ldr	r2, [r7, #16]
 80221e8:	429a      	cmp	r2, r3
 80221ea:	d349      	bcc.n	8022280 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80221ec:	4b3a      	ldr	r3, [pc, #232]	; (80222d8 <xTaskIncrementTick+0x160>)
 80221ee:	681b      	ldr	r3, [r3, #0]
 80221f0:	681b      	ldr	r3, [r3, #0]
 80221f2:	2b00      	cmp	r3, #0
 80221f4:	d104      	bne.n	8022200 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80221f6:	4b3b      	ldr	r3, [pc, #236]	; (80222e4 <xTaskIncrementTick+0x16c>)
 80221f8:	f04f 32ff 	mov.w	r2, #4294967295
 80221fc:	601a      	str	r2, [r3, #0]
					break;
 80221fe:	e03f      	b.n	8022280 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022200:	4b35      	ldr	r3, [pc, #212]	; (80222d8 <xTaskIncrementTick+0x160>)
 8022202:	681b      	ldr	r3, [r3, #0]
 8022204:	68db      	ldr	r3, [r3, #12]
 8022206:	68db      	ldr	r3, [r3, #12]
 8022208:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 802220a:	68bb      	ldr	r3, [r7, #8]
 802220c:	685b      	ldr	r3, [r3, #4]
 802220e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8022210:	693a      	ldr	r2, [r7, #16]
 8022212:	687b      	ldr	r3, [r7, #4]
 8022214:	429a      	cmp	r2, r3
 8022216:	d203      	bcs.n	8022220 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8022218:	4a32      	ldr	r2, [pc, #200]	; (80222e4 <xTaskIncrementTick+0x16c>)
 802221a:	687b      	ldr	r3, [r7, #4]
 802221c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 802221e:	e02f      	b.n	8022280 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022220:	68bb      	ldr	r3, [r7, #8]
 8022222:	3304      	adds	r3, #4
 8022224:	4618      	mov	r0, r3
 8022226:	f7fe fbc1 	bl	80209ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 802222a:	68bb      	ldr	r3, [r7, #8]
 802222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802222e:	2b00      	cmp	r3, #0
 8022230:	d004      	beq.n	802223c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8022232:	68bb      	ldr	r3, [r7, #8]
 8022234:	3318      	adds	r3, #24
 8022236:	4618      	mov	r0, r3
 8022238:	f7fe fbb8 	bl	80209ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 802223c:	68bb      	ldr	r3, [r7, #8]
 802223e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022240:	4b29      	ldr	r3, [pc, #164]	; (80222e8 <xTaskIncrementTick+0x170>)
 8022242:	681b      	ldr	r3, [r3, #0]
 8022244:	429a      	cmp	r2, r3
 8022246:	d903      	bls.n	8022250 <xTaskIncrementTick+0xd8>
 8022248:	68bb      	ldr	r3, [r7, #8]
 802224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802224c:	4a26      	ldr	r2, [pc, #152]	; (80222e8 <xTaskIncrementTick+0x170>)
 802224e:	6013      	str	r3, [r2, #0]
 8022250:	68bb      	ldr	r3, [r7, #8]
 8022252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022254:	4613      	mov	r3, r2
 8022256:	009b      	lsls	r3, r3, #2
 8022258:	4413      	add	r3, r2
 802225a:	009b      	lsls	r3, r3, #2
 802225c:	4a23      	ldr	r2, [pc, #140]	; (80222ec <xTaskIncrementTick+0x174>)
 802225e:	441a      	add	r2, r3
 8022260:	68bb      	ldr	r3, [r7, #8]
 8022262:	3304      	adds	r3, #4
 8022264:	4619      	mov	r1, r3
 8022266:	4610      	mov	r0, r2
 8022268:	f7fe fb43 	bl	80208f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 802226c:	68bb      	ldr	r3, [r7, #8]
 802226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022270:	4b1f      	ldr	r3, [pc, #124]	; (80222f0 <xTaskIncrementTick+0x178>)
 8022272:	681b      	ldr	r3, [r3, #0]
 8022274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022276:	429a      	cmp	r2, r3
 8022278:	d3b8      	bcc.n	80221ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 802227a:	2301      	movs	r3, #1
 802227c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 802227e:	e7b5      	b.n	80221ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8022280:	4b1b      	ldr	r3, [pc, #108]	; (80222f0 <xTaskIncrementTick+0x178>)
 8022282:	681b      	ldr	r3, [r3, #0]
 8022284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022286:	4919      	ldr	r1, [pc, #100]	; (80222ec <xTaskIncrementTick+0x174>)
 8022288:	4613      	mov	r3, r2
 802228a:	009b      	lsls	r3, r3, #2
 802228c:	4413      	add	r3, r2
 802228e:	009b      	lsls	r3, r3, #2
 8022290:	440b      	add	r3, r1
 8022292:	681b      	ldr	r3, [r3, #0]
 8022294:	2b01      	cmp	r3, #1
 8022296:	d901      	bls.n	802229c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8022298:	2301      	movs	r3, #1
 802229a:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 802229c:	4b15      	ldr	r3, [pc, #84]	; (80222f4 <xTaskIncrementTick+0x17c>)
 802229e:	681b      	ldr	r3, [r3, #0]
 80222a0:	2b00      	cmp	r3, #0
 80222a2:	d101      	bne.n	80222a8 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 80222a4:	f7ee fedf 	bl	8011066 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80222a8:	4b13      	ldr	r3, [pc, #76]	; (80222f8 <xTaskIncrementTick+0x180>)
 80222aa:	681b      	ldr	r3, [r3, #0]
 80222ac:	2b00      	cmp	r3, #0
 80222ae:	d009      	beq.n	80222c4 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 80222b0:	2301      	movs	r3, #1
 80222b2:	617b      	str	r3, [r7, #20]
 80222b4:	e006      	b.n	80222c4 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80222b6:	4b0f      	ldr	r3, [pc, #60]	; (80222f4 <xTaskIncrementTick+0x17c>)
 80222b8:	681b      	ldr	r3, [r3, #0]
 80222ba:	3301      	adds	r3, #1
 80222bc:	4a0d      	ldr	r2, [pc, #52]	; (80222f4 <xTaskIncrementTick+0x17c>)
 80222be:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 80222c0:	f7ee fed1 	bl	8011066 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 80222c4:	697b      	ldr	r3, [r7, #20]
}
 80222c6:	4618      	mov	r0, r3
 80222c8:	3718      	adds	r7, #24
 80222ca:	46bd      	mov	sp, r7
 80222cc:	bd80      	pop	{r7, pc}
 80222ce:	bf00      	nop
 80222d0:	20002254 	.word	0x20002254
 80222d4:	20002230 	.word	0x20002230
 80222d8:	200021e4 	.word	0x200021e4
 80222dc:	200021e8 	.word	0x200021e8
 80222e0:	20002244 	.word	0x20002244
 80222e4:	2000224c 	.word	0x2000224c
 80222e8:	20002234 	.word	0x20002234
 80222ec:	20001d5c 	.word	0x20001d5c
 80222f0:	20001d58 	.word	0x20001d58
 80222f4:	2000223c 	.word	0x2000223c
 80222f8:	20002240 	.word	0x20002240

080222fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80222fc:	b580      	push	{r7, lr}
 80222fe:	b084      	sub	sp, #16
 8022300:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8022302:	4b36      	ldr	r3, [pc, #216]	; (80223dc <vTaskSwitchContext+0xe0>)
 8022304:	681b      	ldr	r3, [r3, #0]
 8022306:	2b00      	cmp	r3, #0
 8022308:	d003      	beq.n	8022312 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 802230a:	4b35      	ldr	r3, [pc, #212]	; (80223e0 <vTaskSwitchContext+0xe4>)
 802230c:	2201      	movs	r2, #1
 802230e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8022310:	e05f      	b.n	80223d2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8022312:	4b33      	ldr	r3, [pc, #204]	; (80223e0 <vTaskSwitchContext+0xe4>)
 8022314:	2200      	movs	r2, #0
 8022316:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8022318:	f7ee fe9d 	bl	8011056 <getRunTimeCounterValue>
 802231c:	4603      	mov	r3, r0
 802231e:	4a31      	ldr	r2, [pc, #196]	; (80223e4 <vTaskSwitchContext+0xe8>)
 8022320:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8022322:	4b30      	ldr	r3, [pc, #192]	; (80223e4 <vTaskSwitchContext+0xe8>)
 8022324:	681a      	ldr	r2, [r3, #0]
 8022326:	4b30      	ldr	r3, [pc, #192]	; (80223e8 <vTaskSwitchContext+0xec>)
 8022328:	681b      	ldr	r3, [r3, #0]
 802232a:	429a      	cmp	r2, r3
 802232c:	d909      	bls.n	8022342 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 802232e:	4b2f      	ldr	r3, [pc, #188]	; (80223ec <vTaskSwitchContext+0xf0>)
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8022334:	4a2b      	ldr	r2, [pc, #172]	; (80223e4 <vTaskSwitchContext+0xe8>)
 8022336:	6810      	ldr	r0, [r2, #0]
 8022338:	4a2b      	ldr	r2, [pc, #172]	; (80223e8 <vTaskSwitchContext+0xec>)
 802233a:	6812      	ldr	r2, [r2, #0]
 802233c:	1a82      	subs	r2, r0, r2
 802233e:	440a      	add	r2, r1
 8022340:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8022342:	4b28      	ldr	r3, [pc, #160]	; (80223e4 <vTaskSwitchContext+0xe8>)
 8022344:	681b      	ldr	r3, [r3, #0]
 8022346:	4a28      	ldr	r2, [pc, #160]	; (80223e8 <vTaskSwitchContext+0xec>)
 8022348:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802234a:	4b29      	ldr	r3, [pc, #164]	; (80223f0 <vTaskSwitchContext+0xf4>)
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	60fb      	str	r3, [r7, #12]
 8022350:	e010      	b.n	8022374 <vTaskSwitchContext+0x78>
 8022352:	68fb      	ldr	r3, [r7, #12]
 8022354:	2b00      	cmp	r3, #0
 8022356:	d10a      	bne.n	802236e <vTaskSwitchContext+0x72>
	__asm volatile
 8022358:	f04f 0350 	mov.w	r3, #80	; 0x50
 802235c:	f383 8811 	msr	BASEPRI, r3
 8022360:	f3bf 8f6f 	isb	sy
 8022364:	f3bf 8f4f 	dsb	sy
 8022368:	607b      	str	r3, [r7, #4]
}
 802236a:	bf00      	nop
 802236c:	e7fe      	b.n	802236c <vTaskSwitchContext+0x70>
 802236e:	68fb      	ldr	r3, [r7, #12]
 8022370:	3b01      	subs	r3, #1
 8022372:	60fb      	str	r3, [r7, #12]
 8022374:	491f      	ldr	r1, [pc, #124]	; (80223f4 <vTaskSwitchContext+0xf8>)
 8022376:	68fa      	ldr	r2, [r7, #12]
 8022378:	4613      	mov	r3, r2
 802237a:	009b      	lsls	r3, r3, #2
 802237c:	4413      	add	r3, r2
 802237e:	009b      	lsls	r3, r3, #2
 8022380:	440b      	add	r3, r1
 8022382:	681b      	ldr	r3, [r3, #0]
 8022384:	2b00      	cmp	r3, #0
 8022386:	d0e4      	beq.n	8022352 <vTaskSwitchContext+0x56>
 8022388:	68fa      	ldr	r2, [r7, #12]
 802238a:	4613      	mov	r3, r2
 802238c:	009b      	lsls	r3, r3, #2
 802238e:	4413      	add	r3, r2
 8022390:	009b      	lsls	r3, r3, #2
 8022392:	4a18      	ldr	r2, [pc, #96]	; (80223f4 <vTaskSwitchContext+0xf8>)
 8022394:	4413      	add	r3, r2
 8022396:	60bb      	str	r3, [r7, #8]
 8022398:	68bb      	ldr	r3, [r7, #8]
 802239a:	685b      	ldr	r3, [r3, #4]
 802239c:	685a      	ldr	r2, [r3, #4]
 802239e:	68bb      	ldr	r3, [r7, #8]
 80223a0:	605a      	str	r2, [r3, #4]
 80223a2:	68bb      	ldr	r3, [r7, #8]
 80223a4:	685a      	ldr	r2, [r3, #4]
 80223a6:	68bb      	ldr	r3, [r7, #8]
 80223a8:	3308      	adds	r3, #8
 80223aa:	429a      	cmp	r2, r3
 80223ac:	d104      	bne.n	80223b8 <vTaskSwitchContext+0xbc>
 80223ae:	68bb      	ldr	r3, [r7, #8]
 80223b0:	685b      	ldr	r3, [r3, #4]
 80223b2:	685a      	ldr	r2, [r3, #4]
 80223b4:	68bb      	ldr	r3, [r7, #8]
 80223b6:	605a      	str	r2, [r3, #4]
 80223b8:	68bb      	ldr	r3, [r7, #8]
 80223ba:	685b      	ldr	r3, [r3, #4]
 80223bc:	68db      	ldr	r3, [r3, #12]
 80223be:	4a0b      	ldr	r2, [pc, #44]	; (80223ec <vTaskSwitchContext+0xf0>)
 80223c0:	6013      	str	r3, [r2, #0]
 80223c2:	4a0b      	ldr	r2, [pc, #44]	; (80223f0 <vTaskSwitchContext+0xf4>)
 80223c4:	68fb      	ldr	r3, [r7, #12]
 80223c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80223c8:	4b08      	ldr	r3, [pc, #32]	; (80223ec <vTaskSwitchContext+0xf0>)
 80223ca:	681b      	ldr	r3, [r3, #0]
 80223cc:	3358      	adds	r3, #88	; 0x58
 80223ce:	4a0a      	ldr	r2, [pc, #40]	; (80223f8 <vTaskSwitchContext+0xfc>)
 80223d0:	6013      	str	r3, [r2, #0]
}
 80223d2:	bf00      	nop
 80223d4:	3710      	adds	r7, #16
 80223d6:	46bd      	mov	sp, r7
 80223d8:	bd80      	pop	{r7, pc}
 80223da:	bf00      	nop
 80223dc:	20002254 	.word	0x20002254
 80223e0:	20002240 	.word	0x20002240
 80223e4:	2000225c 	.word	0x2000225c
 80223e8:	20002258 	.word	0x20002258
 80223ec:	20001d58 	.word	0x20001d58
 80223f0:	20002234 	.word	0x20002234
 80223f4:	20001d5c 	.word	0x20001d5c
 80223f8:	20000188 	.word	0x20000188

080223fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80223fc:	b580      	push	{r7, lr}
 80223fe:	b084      	sub	sp, #16
 8022400:	af00      	add	r7, sp, #0
 8022402:	6078      	str	r0, [r7, #4]
 8022404:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8022406:	687b      	ldr	r3, [r7, #4]
 8022408:	2b00      	cmp	r3, #0
 802240a:	d10a      	bne.n	8022422 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 802240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022410:	f383 8811 	msr	BASEPRI, r3
 8022414:	f3bf 8f6f 	isb	sy
 8022418:	f3bf 8f4f 	dsb	sy
 802241c:	60fb      	str	r3, [r7, #12]
}
 802241e:	bf00      	nop
 8022420:	e7fe      	b.n	8022420 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8022422:	4b07      	ldr	r3, [pc, #28]	; (8022440 <vTaskPlaceOnEventList+0x44>)
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	3318      	adds	r3, #24
 8022428:	4619      	mov	r1, r3
 802242a:	6878      	ldr	r0, [r7, #4]
 802242c:	f7fe fa85 	bl	802093a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8022430:	2101      	movs	r1, #1
 8022432:	6838      	ldr	r0, [r7, #0]
 8022434:	f000 fbc6 	bl	8022bc4 <prvAddCurrentTaskToDelayedList>
}
 8022438:	bf00      	nop
 802243a:	3710      	adds	r7, #16
 802243c:	46bd      	mov	sp, r7
 802243e:	bd80      	pop	{r7, pc}
 8022440:	20001d58 	.word	0x20001d58

08022444 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8022444:	b580      	push	{r7, lr}
 8022446:	b086      	sub	sp, #24
 8022448:	af00      	add	r7, sp, #0
 802244a:	60f8      	str	r0, [r7, #12]
 802244c:	60b9      	str	r1, [r7, #8]
 802244e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8022450:	68fb      	ldr	r3, [r7, #12]
 8022452:	2b00      	cmp	r3, #0
 8022454:	d10a      	bne.n	802246c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8022456:	f04f 0350 	mov.w	r3, #80	; 0x50
 802245a:	f383 8811 	msr	BASEPRI, r3
 802245e:	f3bf 8f6f 	isb	sy
 8022462:	f3bf 8f4f 	dsb	sy
 8022466:	617b      	str	r3, [r7, #20]
}
 8022468:	bf00      	nop
 802246a:	e7fe      	b.n	802246a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 802246c:	4b0a      	ldr	r3, [pc, #40]	; (8022498 <vTaskPlaceOnEventListRestricted+0x54>)
 802246e:	681b      	ldr	r3, [r3, #0]
 8022470:	3318      	adds	r3, #24
 8022472:	4619      	mov	r1, r3
 8022474:	68f8      	ldr	r0, [r7, #12]
 8022476:	f7fe fa3c 	bl	80208f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 802247a:	687b      	ldr	r3, [r7, #4]
 802247c:	2b00      	cmp	r3, #0
 802247e:	d002      	beq.n	8022486 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8022480:	f04f 33ff 	mov.w	r3, #4294967295
 8022484:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8022486:	6879      	ldr	r1, [r7, #4]
 8022488:	68b8      	ldr	r0, [r7, #8]
 802248a:	f000 fb9b 	bl	8022bc4 <prvAddCurrentTaskToDelayedList>
	}
 802248e:	bf00      	nop
 8022490:	3718      	adds	r7, #24
 8022492:	46bd      	mov	sp, r7
 8022494:	bd80      	pop	{r7, pc}
 8022496:	bf00      	nop
 8022498:	20001d58 	.word	0x20001d58

0802249c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 802249c:	b580      	push	{r7, lr}
 802249e:	b086      	sub	sp, #24
 80224a0:	af00      	add	r7, sp, #0
 80224a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	68db      	ldr	r3, [r3, #12]
 80224a8:	68db      	ldr	r3, [r3, #12]
 80224aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80224ac:	693b      	ldr	r3, [r7, #16]
 80224ae:	2b00      	cmp	r3, #0
 80224b0:	d10a      	bne.n	80224c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80224b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80224b6:	f383 8811 	msr	BASEPRI, r3
 80224ba:	f3bf 8f6f 	isb	sy
 80224be:	f3bf 8f4f 	dsb	sy
 80224c2:	60fb      	str	r3, [r7, #12]
}
 80224c4:	bf00      	nop
 80224c6:	e7fe      	b.n	80224c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80224c8:	693b      	ldr	r3, [r7, #16]
 80224ca:	3318      	adds	r3, #24
 80224cc:	4618      	mov	r0, r3
 80224ce:	f7fe fa6d 	bl	80209ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80224d2:	4b1e      	ldr	r3, [pc, #120]	; (802254c <xTaskRemoveFromEventList+0xb0>)
 80224d4:	681b      	ldr	r3, [r3, #0]
 80224d6:	2b00      	cmp	r3, #0
 80224d8:	d11d      	bne.n	8022516 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80224da:	693b      	ldr	r3, [r7, #16]
 80224dc:	3304      	adds	r3, #4
 80224de:	4618      	mov	r0, r3
 80224e0:	f7fe fa64 	bl	80209ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80224e4:	693b      	ldr	r3, [r7, #16]
 80224e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80224e8:	4b19      	ldr	r3, [pc, #100]	; (8022550 <xTaskRemoveFromEventList+0xb4>)
 80224ea:	681b      	ldr	r3, [r3, #0]
 80224ec:	429a      	cmp	r2, r3
 80224ee:	d903      	bls.n	80224f8 <xTaskRemoveFromEventList+0x5c>
 80224f0:	693b      	ldr	r3, [r7, #16]
 80224f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80224f4:	4a16      	ldr	r2, [pc, #88]	; (8022550 <xTaskRemoveFromEventList+0xb4>)
 80224f6:	6013      	str	r3, [r2, #0]
 80224f8:	693b      	ldr	r3, [r7, #16]
 80224fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80224fc:	4613      	mov	r3, r2
 80224fe:	009b      	lsls	r3, r3, #2
 8022500:	4413      	add	r3, r2
 8022502:	009b      	lsls	r3, r3, #2
 8022504:	4a13      	ldr	r2, [pc, #76]	; (8022554 <xTaskRemoveFromEventList+0xb8>)
 8022506:	441a      	add	r2, r3
 8022508:	693b      	ldr	r3, [r7, #16]
 802250a:	3304      	adds	r3, #4
 802250c:	4619      	mov	r1, r3
 802250e:	4610      	mov	r0, r2
 8022510:	f7fe f9ef 	bl	80208f2 <vListInsertEnd>
 8022514:	e005      	b.n	8022522 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8022516:	693b      	ldr	r3, [r7, #16]
 8022518:	3318      	adds	r3, #24
 802251a:	4619      	mov	r1, r3
 802251c:	480e      	ldr	r0, [pc, #56]	; (8022558 <xTaskRemoveFromEventList+0xbc>)
 802251e:	f7fe f9e8 	bl	80208f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8022522:	693b      	ldr	r3, [r7, #16]
 8022524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022526:	4b0d      	ldr	r3, [pc, #52]	; (802255c <xTaskRemoveFromEventList+0xc0>)
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802252c:	429a      	cmp	r2, r3
 802252e:	d905      	bls.n	802253c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8022530:	2301      	movs	r3, #1
 8022532:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8022534:	4b0a      	ldr	r3, [pc, #40]	; (8022560 <xTaskRemoveFromEventList+0xc4>)
 8022536:	2201      	movs	r2, #1
 8022538:	601a      	str	r2, [r3, #0]
 802253a:	e001      	b.n	8022540 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 802253c:	2300      	movs	r3, #0
 802253e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8022540:	697b      	ldr	r3, [r7, #20]
}
 8022542:	4618      	mov	r0, r3
 8022544:	3718      	adds	r7, #24
 8022546:	46bd      	mov	sp, r7
 8022548:	bd80      	pop	{r7, pc}
 802254a:	bf00      	nop
 802254c:	20002254 	.word	0x20002254
 8022550:	20002234 	.word	0x20002234
 8022554:	20001d5c 	.word	0x20001d5c
 8022558:	200021ec 	.word	0x200021ec
 802255c:	20001d58 	.word	0x20001d58
 8022560:	20002240 	.word	0x20002240

08022564 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8022564:	b480      	push	{r7}
 8022566:	b083      	sub	sp, #12
 8022568:	af00      	add	r7, sp, #0
 802256a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 802256c:	4b06      	ldr	r3, [pc, #24]	; (8022588 <vTaskInternalSetTimeOutState+0x24>)
 802256e:	681a      	ldr	r2, [r3, #0]
 8022570:	687b      	ldr	r3, [r7, #4]
 8022572:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8022574:	4b05      	ldr	r3, [pc, #20]	; (802258c <vTaskInternalSetTimeOutState+0x28>)
 8022576:	681a      	ldr	r2, [r3, #0]
 8022578:	687b      	ldr	r3, [r7, #4]
 802257a:	605a      	str	r2, [r3, #4]
}
 802257c:	bf00      	nop
 802257e:	370c      	adds	r7, #12
 8022580:	46bd      	mov	sp, r7
 8022582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022586:	4770      	bx	lr
 8022588:	20002244 	.word	0x20002244
 802258c:	20002230 	.word	0x20002230

08022590 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8022590:	b580      	push	{r7, lr}
 8022592:	b088      	sub	sp, #32
 8022594:	af00      	add	r7, sp, #0
 8022596:	6078      	str	r0, [r7, #4]
 8022598:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	2b00      	cmp	r3, #0
 802259e:	d10a      	bne.n	80225b6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80225a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225a4:	f383 8811 	msr	BASEPRI, r3
 80225a8:	f3bf 8f6f 	isb	sy
 80225ac:	f3bf 8f4f 	dsb	sy
 80225b0:	613b      	str	r3, [r7, #16]
}
 80225b2:	bf00      	nop
 80225b4:	e7fe      	b.n	80225b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80225b6:	683b      	ldr	r3, [r7, #0]
 80225b8:	2b00      	cmp	r3, #0
 80225ba:	d10a      	bne.n	80225d2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80225bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80225c0:	f383 8811 	msr	BASEPRI, r3
 80225c4:	f3bf 8f6f 	isb	sy
 80225c8:	f3bf 8f4f 	dsb	sy
 80225cc:	60fb      	str	r3, [r7, #12]
}
 80225ce:	bf00      	nop
 80225d0:	e7fe      	b.n	80225d0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80225d2:	f000 ffc7 	bl	8023564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80225d6:	4b1d      	ldr	r3, [pc, #116]	; (802264c <xTaskCheckForTimeOut+0xbc>)
 80225d8:	681b      	ldr	r3, [r3, #0]
 80225da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	685b      	ldr	r3, [r3, #4]
 80225e0:	69ba      	ldr	r2, [r7, #24]
 80225e2:	1ad3      	subs	r3, r2, r3
 80225e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80225e6:	683b      	ldr	r3, [r7, #0]
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80225ee:	d102      	bne.n	80225f6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80225f0:	2300      	movs	r3, #0
 80225f2:	61fb      	str	r3, [r7, #28]
 80225f4:	e023      	b.n	802263e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80225f6:	687b      	ldr	r3, [r7, #4]
 80225f8:	681a      	ldr	r2, [r3, #0]
 80225fa:	4b15      	ldr	r3, [pc, #84]	; (8022650 <xTaskCheckForTimeOut+0xc0>)
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	429a      	cmp	r2, r3
 8022600:	d007      	beq.n	8022612 <xTaskCheckForTimeOut+0x82>
 8022602:	687b      	ldr	r3, [r7, #4]
 8022604:	685b      	ldr	r3, [r3, #4]
 8022606:	69ba      	ldr	r2, [r7, #24]
 8022608:	429a      	cmp	r2, r3
 802260a:	d302      	bcc.n	8022612 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 802260c:	2301      	movs	r3, #1
 802260e:	61fb      	str	r3, [r7, #28]
 8022610:	e015      	b.n	802263e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8022612:	683b      	ldr	r3, [r7, #0]
 8022614:	681b      	ldr	r3, [r3, #0]
 8022616:	697a      	ldr	r2, [r7, #20]
 8022618:	429a      	cmp	r2, r3
 802261a:	d20b      	bcs.n	8022634 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 802261c:	683b      	ldr	r3, [r7, #0]
 802261e:	681a      	ldr	r2, [r3, #0]
 8022620:	697b      	ldr	r3, [r7, #20]
 8022622:	1ad2      	subs	r2, r2, r3
 8022624:	683b      	ldr	r3, [r7, #0]
 8022626:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8022628:	6878      	ldr	r0, [r7, #4]
 802262a:	f7ff ff9b 	bl	8022564 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 802262e:	2300      	movs	r3, #0
 8022630:	61fb      	str	r3, [r7, #28]
 8022632:	e004      	b.n	802263e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8022634:	683b      	ldr	r3, [r7, #0]
 8022636:	2200      	movs	r2, #0
 8022638:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 802263a:	2301      	movs	r3, #1
 802263c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 802263e:	f000 ffc1 	bl	80235c4 <vPortExitCritical>

	return xReturn;
 8022642:	69fb      	ldr	r3, [r7, #28]
}
 8022644:	4618      	mov	r0, r3
 8022646:	3720      	adds	r7, #32
 8022648:	46bd      	mov	sp, r7
 802264a:	bd80      	pop	{r7, pc}
 802264c:	20002230 	.word	0x20002230
 8022650:	20002244 	.word	0x20002244

08022654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8022654:	b480      	push	{r7}
 8022656:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8022658:	4b03      	ldr	r3, [pc, #12]	; (8022668 <vTaskMissedYield+0x14>)
 802265a:	2201      	movs	r2, #1
 802265c:	601a      	str	r2, [r3, #0]
}
 802265e:	bf00      	nop
 8022660:	46bd      	mov	sp, r7
 8022662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022666:	4770      	bx	lr
 8022668:	20002240 	.word	0x20002240

0802266c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 802266c:	b580      	push	{r7, lr}
 802266e:	b082      	sub	sp, #8
 8022670:	af00      	add	r7, sp, #0
 8022672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8022674:	f000 f852 	bl	802271c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8022678:	4b06      	ldr	r3, [pc, #24]	; (8022694 <prvIdleTask+0x28>)
 802267a:	681b      	ldr	r3, [r3, #0]
 802267c:	2b01      	cmp	r3, #1
 802267e:	d9f9      	bls.n	8022674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8022680:	4b05      	ldr	r3, [pc, #20]	; (8022698 <prvIdleTask+0x2c>)
 8022682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022686:	601a      	str	r2, [r3, #0]
 8022688:	f3bf 8f4f 	dsb	sy
 802268c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8022690:	e7f0      	b.n	8022674 <prvIdleTask+0x8>
 8022692:	bf00      	nop
 8022694:	20001d5c 	.word	0x20001d5c
 8022698:	e000ed04 	.word	0xe000ed04

0802269c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 802269c:	b580      	push	{r7, lr}
 802269e:	b082      	sub	sp, #8
 80226a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80226a2:	2300      	movs	r3, #0
 80226a4:	607b      	str	r3, [r7, #4]
 80226a6:	e00c      	b.n	80226c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80226a8:	687a      	ldr	r2, [r7, #4]
 80226aa:	4613      	mov	r3, r2
 80226ac:	009b      	lsls	r3, r3, #2
 80226ae:	4413      	add	r3, r2
 80226b0:	009b      	lsls	r3, r3, #2
 80226b2:	4a12      	ldr	r2, [pc, #72]	; (80226fc <prvInitialiseTaskLists+0x60>)
 80226b4:	4413      	add	r3, r2
 80226b6:	4618      	mov	r0, r3
 80226b8:	f7fe f8ee 	bl	8020898 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	3301      	adds	r3, #1
 80226c0:	607b      	str	r3, [r7, #4]
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	2b37      	cmp	r3, #55	; 0x37
 80226c6:	d9ef      	bls.n	80226a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80226c8:	480d      	ldr	r0, [pc, #52]	; (8022700 <prvInitialiseTaskLists+0x64>)
 80226ca:	f7fe f8e5 	bl	8020898 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80226ce:	480d      	ldr	r0, [pc, #52]	; (8022704 <prvInitialiseTaskLists+0x68>)
 80226d0:	f7fe f8e2 	bl	8020898 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80226d4:	480c      	ldr	r0, [pc, #48]	; (8022708 <prvInitialiseTaskLists+0x6c>)
 80226d6:	f7fe f8df 	bl	8020898 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80226da:	480c      	ldr	r0, [pc, #48]	; (802270c <prvInitialiseTaskLists+0x70>)
 80226dc:	f7fe f8dc 	bl	8020898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80226e0:	480b      	ldr	r0, [pc, #44]	; (8022710 <prvInitialiseTaskLists+0x74>)
 80226e2:	f7fe f8d9 	bl	8020898 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80226e6:	4b0b      	ldr	r3, [pc, #44]	; (8022714 <prvInitialiseTaskLists+0x78>)
 80226e8:	4a05      	ldr	r2, [pc, #20]	; (8022700 <prvInitialiseTaskLists+0x64>)
 80226ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80226ec:	4b0a      	ldr	r3, [pc, #40]	; (8022718 <prvInitialiseTaskLists+0x7c>)
 80226ee:	4a05      	ldr	r2, [pc, #20]	; (8022704 <prvInitialiseTaskLists+0x68>)
 80226f0:	601a      	str	r2, [r3, #0]
}
 80226f2:	bf00      	nop
 80226f4:	3708      	adds	r7, #8
 80226f6:	46bd      	mov	sp, r7
 80226f8:	bd80      	pop	{r7, pc}
 80226fa:	bf00      	nop
 80226fc:	20001d5c 	.word	0x20001d5c
 8022700:	200021bc 	.word	0x200021bc
 8022704:	200021d0 	.word	0x200021d0
 8022708:	200021ec 	.word	0x200021ec
 802270c:	20002200 	.word	0x20002200
 8022710:	20002218 	.word	0x20002218
 8022714:	200021e4 	.word	0x200021e4
 8022718:	200021e8 	.word	0x200021e8

0802271c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 802271c:	b580      	push	{r7, lr}
 802271e:	b082      	sub	sp, #8
 8022720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022722:	e019      	b.n	8022758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8022724:	f000 ff1e 	bl	8023564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022728:	4b10      	ldr	r3, [pc, #64]	; (802276c <prvCheckTasksWaitingTermination+0x50>)
 802272a:	68db      	ldr	r3, [r3, #12]
 802272c:	68db      	ldr	r3, [r3, #12]
 802272e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	3304      	adds	r3, #4
 8022734:	4618      	mov	r0, r3
 8022736:	f7fe f939 	bl	80209ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 802273a:	4b0d      	ldr	r3, [pc, #52]	; (8022770 <prvCheckTasksWaitingTermination+0x54>)
 802273c:	681b      	ldr	r3, [r3, #0]
 802273e:	3b01      	subs	r3, #1
 8022740:	4a0b      	ldr	r2, [pc, #44]	; (8022770 <prvCheckTasksWaitingTermination+0x54>)
 8022742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8022744:	4b0b      	ldr	r3, [pc, #44]	; (8022774 <prvCheckTasksWaitingTermination+0x58>)
 8022746:	681b      	ldr	r3, [r3, #0]
 8022748:	3b01      	subs	r3, #1
 802274a:	4a0a      	ldr	r2, [pc, #40]	; (8022774 <prvCheckTasksWaitingTermination+0x58>)
 802274c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 802274e:	f000 ff39 	bl	80235c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8022752:	6878      	ldr	r0, [r7, #4]
 8022754:	f000 f848 	bl	80227e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8022758:	4b06      	ldr	r3, [pc, #24]	; (8022774 <prvCheckTasksWaitingTermination+0x58>)
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	2b00      	cmp	r3, #0
 802275e:	d1e1      	bne.n	8022724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8022760:	bf00      	nop
 8022762:	bf00      	nop
 8022764:	3708      	adds	r7, #8
 8022766:	46bd      	mov	sp, r7
 8022768:	bd80      	pop	{r7, pc}
 802276a:	bf00      	nop
 802276c:	20002200 	.word	0x20002200
 8022770:	2000222c 	.word	0x2000222c
 8022774:	20002214 	.word	0x20002214

08022778 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8022778:	b480      	push	{r7}
 802277a:	b085      	sub	sp, #20
 802277c:	af00      	add	r7, sp, #0
 802277e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8022780:	2300      	movs	r3, #0
 8022782:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8022784:	e005      	b.n	8022792 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8022786:	687b      	ldr	r3, [r7, #4]
 8022788:	3301      	adds	r3, #1
 802278a:	607b      	str	r3, [r7, #4]
			ulCount++;
 802278c:	68fb      	ldr	r3, [r7, #12]
 802278e:	3301      	adds	r3, #1
 8022790:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	781b      	ldrb	r3, [r3, #0]
 8022796:	2ba5      	cmp	r3, #165	; 0xa5
 8022798:	d0f5      	beq.n	8022786 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 802279a:	68fb      	ldr	r3, [r7, #12]
 802279c:	089b      	lsrs	r3, r3, #2
 802279e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80227a0:	68fb      	ldr	r3, [r7, #12]
 80227a2:	b29b      	uxth	r3, r3
	}
 80227a4:	4618      	mov	r0, r3
 80227a6:	3714      	adds	r7, #20
 80227a8:	46bd      	mov	sp, r7
 80227aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227ae:	4770      	bx	lr

080227b0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80227b0:	b580      	push	{r7, lr}
 80227b2:	b086      	sub	sp, #24
 80227b4:	af00      	add	r7, sp, #0
 80227b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80227b8:	687b      	ldr	r3, [r7, #4]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d102      	bne.n	80227c4 <uxTaskGetStackHighWaterMark+0x14>
 80227be:	4b09      	ldr	r3, [pc, #36]	; (80227e4 <uxTaskGetStackHighWaterMark+0x34>)
 80227c0:	681b      	ldr	r3, [r3, #0]
 80227c2:	e000      	b.n	80227c6 <uxTaskGetStackHighWaterMark+0x16>
 80227c4:	687b      	ldr	r3, [r7, #4]
 80227c6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80227c8:	697b      	ldr	r3, [r7, #20]
 80227ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80227cc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80227ce:	6938      	ldr	r0, [r7, #16]
 80227d0:	f7ff ffd2 	bl	8022778 <prvTaskCheckFreeStackSpace>
 80227d4:	4603      	mov	r3, r0
 80227d6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80227d8:	68fb      	ldr	r3, [r7, #12]
	}
 80227da:	4618      	mov	r0, r3
 80227dc:	3718      	adds	r7, #24
 80227de:	46bd      	mov	sp, r7
 80227e0:	bd80      	pop	{r7, pc}
 80227e2:	bf00      	nop
 80227e4:	20001d58 	.word	0x20001d58

080227e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80227e8:	b580      	push	{r7, lr}
 80227ea:	b084      	sub	sp, #16
 80227ec:	af00      	add	r7, sp, #0
 80227ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	3358      	adds	r3, #88	; 0x58
 80227f4:	4618      	mov	r0, r3
 80227f6:	f00b fa5d 	bl	802dcb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80227fa:	687b      	ldr	r3, [r7, #4]
 80227fc:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8022800:	2b00      	cmp	r3, #0
 8022802:	d108      	bne.n	8022816 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022808:	4618      	mov	r0, r3
 802280a:	f001 f813 	bl	8023834 <vPortFree>
				vPortFree( pxTCB );
 802280e:	6878      	ldr	r0, [r7, #4]
 8022810:	f001 f810 	bl	8023834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8022814:	e018      	b.n	8022848 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8022816:	687b      	ldr	r3, [r7, #4]
 8022818:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802281c:	2b01      	cmp	r3, #1
 802281e:	d103      	bne.n	8022828 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8022820:	6878      	ldr	r0, [r7, #4]
 8022822:	f001 f807 	bl	8023834 <vPortFree>
	}
 8022826:	e00f      	b.n	8022848 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8022828:	687b      	ldr	r3, [r7, #4]
 802282a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 802282e:	2b02      	cmp	r3, #2
 8022830:	d00a      	beq.n	8022848 <prvDeleteTCB+0x60>
	__asm volatile
 8022832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022836:	f383 8811 	msr	BASEPRI, r3
 802283a:	f3bf 8f6f 	isb	sy
 802283e:	f3bf 8f4f 	dsb	sy
 8022842:	60fb      	str	r3, [r7, #12]
}
 8022844:	bf00      	nop
 8022846:	e7fe      	b.n	8022846 <prvDeleteTCB+0x5e>
	}
 8022848:	bf00      	nop
 802284a:	3710      	adds	r7, #16
 802284c:	46bd      	mov	sp, r7
 802284e:	bd80      	pop	{r7, pc}

08022850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8022850:	b480      	push	{r7}
 8022852:	b083      	sub	sp, #12
 8022854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8022856:	4b0c      	ldr	r3, [pc, #48]	; (8022888 <prvResetNextTaskUnblockTime+0x38>)
 8022858:	681b      	ldr	r3, [r3, #0]
 802285a:	681b      	ldr	r3, [r3, #0]
 802285c:	2b00      	cmp	r3, #0
 802285e:	d104      	bne.n	802286a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8022860:	4b0a      	ldr	r3, [pc, #40]	; (802288c <prvResetNextTaskUnblockTime+0x3c>)
 8022862:	f04f 32ff 	mov.w	r2, #4294967295
 8022866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8022868:	e008      	b.n	802287c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 802286a:	4b07      	ldr	r3, [pc, #28]	; (8022888 <prvResetNextTaskUnblockTime+0x38>)
 802286c:	681b      	ldr	r3, [r3, #0]
 802286e:	68db      	ldr	r3, [r3, #12]
 8022870:	68db      	ldr	r3, [r3, #12]
 8022872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8022874:	687b      	ldr	r3, [r7, #4]
 8022876:	685b      	ldr	r3, [r3, #4]
 8022878:	4a04      	ldr	r2, [pc, #16]	; (802288c <prvResetNextTaskUnblockTime+0x3c>)
 802287a:	6013      	str	r3, [r2, #0]
}
 802287c:	bf00      	nop
 802287e:	370c      	adds	r7, #12
 8022880:	46bd      	mov	sp, r7
 8022882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022886:	4770      	bx	lr
 8022888:	200021e4 	.word	0x200021e4
 802288c:	2000224c 	.word	0x2000224c

08022890 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8022890:	b480      	push	{r7}
 8022892:	b083      	sub	sp, #12
 8022894:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8022896:	4b05      	ldr	r3, [pc, #20]	; (80228ac <xTaskGetCurrentTaskHandle+0x1c>)
 8022898:	681b      	ldr	r3, [r3, #0]
 802289a:	607b      	str	r3, [r7, #4]

		return xReturn;
 802289c:	687b      	ldr	r3, [r7, #4]
	}
 802289e:	4618      	mov	r0, r3
 80228a0:	370c      	adds	r7, #12
 80228a2:	46bd      	mov	sp, r7
 80228a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228a8:	4770      	bx	lr
 80228aa:	bf00      	nop
 80228ac:	20001d58 	.word	0x20001d58

080228b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80228b0:	b480      	push	{r7}
 80228b2:	b083      	sub	sp, #12
 80228b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80228b6:	4b0b      	ldr	r3, [pc, #44]	; (80228e4 <xTaskGetSchedulerState+0x34>)
 80228b8:	681b      	ldr	r3, [r3, #0]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d102      	bne.n	80228c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80228be:	2301      	movs	r3, #1
 80228c0:	607b      	str	r3, [r7, #4]
 80228c2:	e008      	b.n	80228d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80228c4:	4b08      	ldr	r3, [pc, #32]	; (80228e8 <xTaskGetSchedulerState+0x38>)
 80228c6:	681b      	ldr	r3, [r3, #0]
 80228c8:	2b00      	cmp	r3, #0
 80228ca:	d102      	bne.n	80228d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80228cc:	2302      	movs	r3, #2
 80228ce:	607b      	str	r3, [r7, #4]
 80228d0:	e001      	b.n	80228d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80228d2:	2300      	movs	r3, #0
 80228d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80228d6:	687b      	ldr	r3, [r7, #4]
	}
 80228d8:	4618      	mov	r0, r3
 80228da:	370c      	adds	r7, #12
 80228dc:	46bd      	mov	sp, r7
 80228de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228e2:	4770      	bx	lr
 80228e4:	20002238 	.word	0x20002238
 80228e8:	20002254 	.word	0x20002254

080228ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80228ec:	b580      	push	{r7, lr}
 80228ee:	b084      	sub	sp, #16
 80228f0:	af00      	add	r7, sp, #0
 80228f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80228f4:	687b      	ldr	r3, [r7, #4]
 80228f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80228f8:	2300      	movs	r3, #0
 80228fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	2b00      	cmp	r3, #0
 8022900:	d051      	beq.n	80229a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8022902:	68bb      	ldr	r3, [r7, #8]
 8022904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022906:	4b2a      	ldr	r3, [pc, #168]	; (80229b0 <xTaskPriorityInherit+0xc4>)
 8022908:	681b      	ldr	r3, [r3, #0]
 802290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802290c:	429a      	cmp	r2, r3
 802290e:	d241      	bcs.n	8022994 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022910:	68bb      	ldr	r3, [r7, #8]
 8022912:	699b      	ldr	r3, [r3, #24]
 8022914:	2b00      	cmp	r3, #0
 8022916:	db06      	blt.n	8022926 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022918:	4b25      	ldr	r3, [pc, #148]	; (80229b0 <xTaskPriorityInherit+0xc4>)
 802291a:	681b      	ldr	r3, [r3, #0]
 802291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802291e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022922:	68bb      	ldr	r3, [r7, #8]
 8022924:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8022926:	68bb      	ldr	r3, [r7, #8]
 8022928:	6959      	ldr	r1, [r3, #20]
 802292a:	68bb      	ldr	r3, [r7, #8]
 802292c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802292e:	4613      	mov	r3, r2
 8022930:	009b      	lsls	r3, r3, #2
 8022932:	4413      	add	r3, r2
 8022934:	009b      	lsls	r3, r3, #2
 8022936:	4a1f      	ldr	r2, [pc, #124]	; (80229b4 <xTaskPriorityInherit+0xc8>)
 8022938:	4413      	add	r3, r2
 802293a:	4299      	cmp	r1, r3
 802293c:	d122      	bne.n	8022984 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 802293e:	68bb      	ldr	r3, [r7, #8]
 8022940:	3304      	adds	r3, #4
 8022942:	4618      	mov	r0, r3
 8022944:	f7fe f832 	bl	80209ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022948:	4b19      	ldr	r3, [pc, #100]	; (80229b0 <xTaskPriorityInherit+0xc4>)
 802294a:	681b      	ldr	r3, [r3, #0]
 802294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802294e:	68bb      	ldr	r3, [r7, #8]
 8022950:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8022952:	68bb      	ldr	r3, [r7, #8]
 8022954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022956:	4b18      	ldr	r3, [pc, #96]	; (80229b8 <xTaskPriorityInherit+0xcc>)
 8022958:	681b      	ldr	r3, [r3, #0]
 802295a:	429a      	cmp	r2, r3
 802295c:	d903      	bls.n	8022966 <xTaskPriorityInherit+0x7a>
 802295e:	68bb      	ldr	r3, [r7, #8]
 8022960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022962:	4a15      	ldr	r2, [pc, #84]	; (80229b8 <xTaskPriorityInherit+0xcc>)
 8022964:	6013      	str	r3, [r2, #0]
 8022966:	68bb      	ldr	r3, [r7, #8]
 8022968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802296a:	4613      	mov	r3, r2
 802296c:	009b      	lsls	r3, r3, #2
 802296e:	4413      	add	r3, r2
 8022970:	009b      	lsls	r3, r3, #2
 8022972:	4a10      	ldr	r2, [pc, #64]	; (80229b4 <xTaskPriorityInherit+0xc8>)
 8022974:	441a      	add	r2, r3
 8022976:	68bb      	ldr	r3, [r7, #8]
 8022978:	3304      	adds	r3, #4
 802297a:	4619      	mov	r1, r3
 802297c:	4610      	mov	r0, r2
 802297e:	f7fd ffb8 	bl	80208f2 <vListInsertEnd>
 8022982:	e004      	b.n	802298e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8022984:	4b0a      	ldr	r3, [pc, #40]	; (80229b0 <xTaskPriorityInherit+0xc4>)
 8022986:	681b      	ldr	r3, [r3, #0]
 8022988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802298a:	68bb      	ldr	r3, [r7, #8]
 802298c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 802298e:	2301      	movs	r3, #1
 8022990:	60fb      	str	r3, [r7, #12]
 8022992:	e008      	b.n	80229a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8022994:	68bb      	ldr	r3, [r7, #8]
 8022996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8022998:	4b05      	ldr	r3, [pc, #20]	; (80229b0 <xTaskPriorityInherit+0xc4>)
 802299a:	681b      	ldr	r3, [r3, #0]
 802299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802299e:	429a      	cmp	r2, r3
 80229a0:	d201      	bcs.n	80229a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80229a2:	2301      	movs	r3, #1
 80229a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80229a6:	68fb      	ldr	r3, [r7, #12]
	}
 80229a8:	4618      	mov	r0, r3
 80229aa:	3710      	adds	r7, #16
 80229ac:	46bd      	mov	sp, r7
 80229ae:	bd80      	pop	{r7, pc}
 80229b0:	20001d58 	.word	0x20001d58
 80229b4:	20001d5c 	.word	0x20001d5c
 80229b8:	20002234 	.word	0x20002234

080229bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80229bc:	b580      	push	{r7, lr}
 80229be:	b086      	sub	sp, #24
 80229c0:	af00      	add	r7, sp, #0
 80229c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80229c4:	687b      	ldr	r3, [r7, #4]
 80229c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80229c8:	2300      	movs	r3, #0
 80229ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80229cc:	687b      	ldr	r3, [r7, #4]
 80229ce:	2b00      	cmp	r3, #0
 80229d0:	d056      	beq.n	8022a80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80229d2:	4b2e      	ldr	r3, [pc, #184]	; (8022a8c <xTaskPriorityDisinherit+0xd0>)
 80229d4:	681b      	ldr	r3, [r3, #0]
 80229d6:	693a      	ldr	r2, [r7, #16]
 80229d8:	429a      	cmp	r2, r3
 80229da:	d00a      	beq.n	80229f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80229dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229e0:	f383 8811 	msr	BASEPRI, r3
 80229e4:	f3bf 8f6f 	isb	sy
 80229e8:	f3bf 8f4f 	dsb	sy
 80229ec:	60fb      	str	r3, [r7, #12]
}
 80229ee:	bf00      	nop
 80229f0:	e7fe      	b.n	80229f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80229f2:	693b      	ldr	r3, [r7, #16]
 80229f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80229f6:	2b00      	cmp	r3, #0
 80229f8:	d10a      	bne.n	8022a10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80229fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80229fe:	f383 8811 	msr	BASEPRI, r3
 8022a02:	f3bf 8f6f 	isb	sy
 8022a06:	f3bf 8f4f 	dsb	sy
 8022a0a:	60bb      	str	r3, [r7, #8]
}
 8022a0c:	bf00      	nop
 8022a0e:	e7fe      	b.n	8022a0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8022a10:	693b      	ldr	r3, [r7, #16]
 8022a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a14:	1e5a      	subs	r2, r3, #1
 8022a16:	693b      	ldr	r3, [r7, #16]
 8022a18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8022a1a:	693b      	ldr	r3, [r7, #16]
 8022a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a1e:	693b      	ldr	r3, [r7, #16]
 8022a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022a22:	429a      	cmp	r2, r3
 8022a24:	d02c      	beq.n	8022a80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8022a26:	693b      	ldr	r3, [r7, #16]
 8022a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022a2a:	2b00      	cmp	r3, #0
 8022a2c:	d128      	bne.n	8022a80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022a2e:	693b      	ldr	r3, [r7, #16]
 8022a30:	3304      	adds	r3, #4
 8022a32:	4618      	mov	r0, r3
 8022a34:	f7fd ffba 	bl	80209ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8022a38:	693b      	ldr	r3, [r7, #16]
 8022a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8022a3c:	693b      	ldr	r3, [r7, #16]
 8022a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022a40:	693b      	ldr	r3, [r7, #16]
 8022a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022a48:	693b      	ldr	r3, [r7, #16]
 8022a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8022a4c:	693b      	ldr	r3, [r7, #16]
 8022a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a50:	4b0f      	ldr	r3, [pc, #60]	; (8022a90 <xTaskPriorityDisinherit+0xd4>)
 8022a52:	681b      	ldr	r3, [r3, #0]
 8022a54:	429a      	cmp	r2, r3
 8022a56:	d903      	bls.n	8022a60 <xTaskPriorityDisinherit+0xa4>
 8022a58:	693b      	ldr	r3, [r7, #16]
 8022a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022a5c:	4a0c      	ldr	r2, [pc, #48]	; (8022a90 <xTaskPriorityDisinherit+0xd4>)
 8022a5e:	6013      	str	r3, [r2, #0]
 8022a60:	693b      	ldr	r3, [r7, #16]
 8022a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022a64:	4613      	mov	r3, r2
 8022a66:	009b      	lsls	r3, r3, #2
 8022a68:	4413      	add	r3, r2
 8022a6a:	009b      	lsls	r3, r3, #2
 8022a6c:	4a09      	ldr	r2, [pc, #36]	; (8022a94 <xTaskPriorityDisinherit+0xd8>)
 8022a6e:	441a      	add	r2, r3
 8022a70:	693b      	ldr	r3, [r7, #16]
 8022a72:	3304      	adds	r3, #4
 8022a74:	4619      	mov	r1, r3
 8022a76:	4610      	mov	r0, r2
 8022a78:	f7fd ff3b 	bl	80208f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8022a7c:	2301      	movs	r3, #1
 8022a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8022a80:	697b      	ldr	r3, [r7, #20]
	}
 8022a82:	4618      	mov	r0, r3
 8022a84:	3718      	adds	r7, #24
 8022a86:	46bd      	mov	sp, r7
 8022a88:	bd80      	pop	{r7, pc}
 8022a8a:	bf00      	nop
 8022a8c:	20001d58 	.word	0x20001d58
 8022a90:	20002234 	.word	0x20002234
 8022a94:	20001d5c 	.word	0x20001d5c

08022a98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8022a98:	b580      	push	{r7, lr}
 8022a9a:	b088      	sub	sp, #32
 8022a9c:	af00      	add	r7, sp, #0
 8022a9e:	6078      	str	r0, [r7, #4]
 8022aa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8022aa6:	2301      	movs	r3, #1
 8022aa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8022aaa:	687b      	ldr	r3, [r7, #4]
 8022aac:	2b00      	cmp	r3, #0
 8022aae:	d06a      	beq.n	8022b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8022ab0:	69bb      	ldr	r3, [r7, #24]
 8022ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022ab4:	2b00      	cmp	r3, #0
 8022ab6:	d10a      	bne.n	8022ace <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8022ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022abc:	f383 8811 	msr	BASEPRI, r3
 8022ac0:	f3bf 8f6f 	isb	sy
 8022ac4:	f3bf 8f4f 	dsb	sy
 8022ac8:	60fb      	str	r3, [r7, #12]
}
 8022aca:	bf00      	nop
 8022acc:	e7fe      	b.n	8022acc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8022ace:	69bb      	ldr	r3, [r7, #24]
 8022ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022ad2:	683a      	ldr	r2, [r7, #0]
 8022ad4:	429a      	cmp	r2, r3
 8022ad6:	d902      	bls.n	8022ade <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8022ad8:	683b      	ldr	r3, [r7, #0]
 8022ada:	61fb      	str	r3, [r7, #28]
 8022adc:	e002      	b.n	8022ae4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8022ade:	69bb      	ldr	r3, [r7, #24]
 8022ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8022ae2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8022ae4:	69bb      	ldr	r3, [r7, #24]
 8022ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022ae8:	69fa      	ldr	r2, [r7, #28]
 8022aea:	429a      	cmp	r2, r3
 8022aec:	d04b      	beq.n	8022b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8022aee:	69bb      	ldr	r3, [r7, #24]
 8022af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8022af2:	697a      	ldr	r2, [r7, #20]
 8022af4:	429a      	cmp	r2, r3
 8022af6:	d146      	bne.n	8022b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8022af8:	4b25      	ldr	r3, [pc, #148]	; (8022b90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8022afa:	681b      	ldr	r3, [r3, #0]
 8022afc:	69ba      	ldr	r2, [r7, #24]
 8022afe:	429a      	cmp	r2, r3
 8022b00:	d10a      	bne.n	8022b18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8022b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022b06:	f383 8811 	msr	BASEPRI, r3
 8022b0a:	f3bf 8f6f 	isb	sy
 8022b0e:	f3bf 8f4f 	dsb	sy
 8022b12:	60bb      	str	r3, [r7, #8]
}
 8022b14:	bf00      	nop
 8022b16:	e7fe      	b.n	8022b16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8022b18:	69bb      	ldr	r3, [r7, #24]
 8022b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8022b1e:	69bb      	ldr	r3, [r7, #24]
 8022b20:	69fa      	ldr	r2, [r7, #28]
 8022b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8022b24:	69bb      	ldr	r3, [r7, #24]
 8022b26:	699b      	ldr	r3, [r3, #24]
 8022b28:	2b00      	cmp	r3, #0
 8022b2a:	db04      	blt.n	8022b36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022b2c:	69fb      	ldr	r3, [r7, #28]
 8022b2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8022b32:	69bb      	ldr	r3, [r7, #24]
 8022b34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8022b36:	69bb      	ldr	r3, [r7, #24]
 8022b38:	6959      	ldr	r1, [r3, #20]
 8022b3a:	693a      	ldr	r2, [r7, #16]
 8022b3c:	4613      	mov	r3, r2
 8022b3e:	009b      	lsls	r3, r3, #2
 8022b40:	4413      	add	r3, r2
 8022b42:	009b      	lsls	r3, r3, #2
 8022b44:	4a13      	ldr	r2, [pc, #76]	; (8022b94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022b46:	4413      	add	r3, r2
 8022b48:	4299      	cmp	r1, r3
 8022b4a:	d11c      	bne.n	8022b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022b4c:	69bb      	ldr	r3, [r7, #24]
 8022b4e:	3304      	adds	r3, #4
 8022b50:	4618      	mov	r0, r3
 8022b52:	f7fd ff2b 	bl	80209ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8022b56:	69bb      	ldr	r3, [r7, #24]
 8022b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022b5a:	4b0f      	ldr	r3, [pc, #60]	; (8022b98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022b5c:	681b      	ldr	r3, [r3, #0]
 8022b5e:	429a      	cmp	r2, r3
 8022b60:	d903      	bls.n	8022b6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8022b62:	69bb      	ldr	r3, [r7, #24]
 8022b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022b66:	4a0c      	ldr	r2, [pc, #48]	; (8022b98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8022b68:	6013      	str	r3, [r2, #0]
 8022b6a:	69bb      	ldr	r3, [r7, #24]
 8022b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8022b6e:	4613      	mov	r3, r2
 8022b70:	009b      	lsls	r3, r3, #2
 8022b72:	4413      	add	r3, r2
 8022b74:	009b      	lsls	r3, r3, #2
 8022b76:	4a07      	ldr	r2, [pc, #28]	; (8022b94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8022b78:	441a      	add	r2, r3
 8022b7a:	69bb      	ldr	r3, [r7, #24]
 8022b7c:	3304      	adds	r3, #4
 8022b7e:	4619      	mov	r1, r3
 8022b80:	4610      	mov	r0, r2
 8022b82:	f7fd feb6 	bl	80208f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8022b86:	bf00      	nop
 8022b88:	3720      	adds	r7, #32
 8022b8a:	46bd      	mov	sp, r7
 8022b8c:	bd80      	pop	{r7, pc}
 8022b8e:	bf00      	nop
 8022b90:	20001d58 	.word	0x20001d58
 8022b94:	20001d5c 	.word	0x20001d5c
 8022b98:	20002234 	.word	0x20002234

08022b9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8022b9c:	b480      	push	{r7}
 8022b9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8022ba0:	4b07      	ldr	r3, [pc, #28]	; (8022bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8022ba2:	681b      	ldr	r3, [r3, #0]
 8022ba4:	2b00      	cmp	r3, #0
 8022ba6:	d004      	beq.n	8022bb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8022ba8:	4b05      	ldr	r3, [pc, #20]	; (8022bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8022baa:	681b      	ldr	r3, [r3, #0]
 8022bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8022bae:	3201      	adds	r2, #1
 8022bb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8022bb2:	4b03      	ldr	r3, [pc, #12]	; (8022bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8022bb4:	681b      	ldr	r3, [r3, #0]
	}
 8022bb6:	4618      	mov	r0, r3
 8022bb8:	46bd      	mov	sp, r7
 8022bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bbe:	4770      	bx	lr
 8022bc0:	20001d58 	.word	0x20001d58

08022bc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8022bc4:	b580      	push	{r7, lr}
 8022bc6:	b084      	sub	sp, #16
 8022bc8:	af00      	add	r7, sp, #0
 8022bca:	6078      	str	r0, [r7, #4]
 8022bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8022bce:	4b21      	ldr	r3, [pc, #132]	; (8022c54 <prvAddCurrentTaskToDelayedList+0x90>)
 8022bd0:	681b      	ldr	r3, [r3, #0]
 8022bd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8022bd4:	4b20      	ldr	r3, [pc, #128]	; (8022c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8022bd6:	681b      	ldr	r3, [r3, #0]
 8022bd8:	3304      	adds	r3, #4
 8022bda:	4618      	mov	r0, r3
 8022bdc:	f7fd fee6 	bl	80209ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8022be0:	687b      	ldr	r3, [r7, #4]
 8022be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022be6:	d10a      	bne.n	8022bfe <prvAddCurrentTaskToDelayedList+0x3a>
 8022be8:	683b      	ldr	r3, [r7, #0]
 8022bea:	2b00      	cmp	r3, #0
 8022bec:	d007      	beq.n	8022bfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022bee:	4b1a      	ldr	r3, [pc, #104]	; (8022c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	3304      	adds	r3, #4
 8022bf4:	4619      	mov	r1, r3
 8022bf6:	4819      	ldr	r0, [pc, #100]	; (8022c5c <prvAddCurrentTaskToDelayedList+0x98>)
 8022bf8:	f7fd fe7b 	bl	80208f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8022bfc:	e026      	b.n	8022c4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8022bfe:	68fa      	ldr	r2, [r7, #12]
 8022c00:	687b      	ldr	r3, [r7, #4]
 8022c02:	4413      	add	r3, r2
 8022c04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8022c06:	4b14      	ldr	r3, [pc, #80]	; (8022c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c08:	681b      	ldr	r3, [r3, #0]
 8022c0a:	68ba      	ldr	r2, [r7, #8]
 8022c0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8022c0e:	68ba      	ldr	r2, [r7, #8]
 8022c10:	68fb      	ldr	r3, [r7, #12]
 8022c12:	429a      	cmp	r2, r3
 8022c14:	d209      	bcs.n	8022c2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022c16:	4b12      	ldr	r3, [pc, #72]	; (8022c60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8022c18:	681a      	ldr	r2, [r3, #0]
 8022c1a:	4b0f      	ldr	r3, [pc, #60]	; (8022c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c1c:	681b      	ldr	r3, [r3, #0]
 8022c1e:	3304      	adds	r3, #4
 8022c20:	4619      	mov	r1, r3
 8022c22:	4610      	mov	r0, r2
 8022c24:	f7fd fe89 	bl	802093a <vListInsert>
}
 8022c28:	e010      	b.n	8022c4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8022c2a:	4b0e      	ldr	r3, [pc, #56]	; (8022c64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8022c2c:	681a      	ldr	r2, [r3, #0]
 8022c2e:	4b0a      	ldr	r3, [pc, #40]	; (8022c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8022c30:	681b      	ldr	r3, [r3, #0]
 8022c32:	3304      	adds	r3, #4
 8022c34:	4619      	mov	r1, r3
 8022c36:	4610      	mov	r0, r2
 8022c38:	f7fd fe7f 	bl	802093a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8022c3c:	4b0a      	ldr	r3, [pc, #40]	; (8022c68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	68ba      	ldr	r2, [r7, #8]
 8022c42:	429a      	cmp	r2, r3
 8022c44:	d202      	bcs.n	8022c4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8022c46:	4a08      	ldr	r2, [pc, #32]	; (8022c68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8022c48:	68bb      	ldr	r3, [r7, #8]
 8022c4a:	6013      	str	r3, [r2, #0]
}
 8022c4c:	bf00      	nop
 8022c4e:	3710      	adds	r7, #16
 8022c50:	46bd      	mov	sp, r7
 8022c52:	bd80      	pop	{r7, pc}
 8022c54:	20002230 	.word	0x20002230
 8022c58:	20001d58 	.word	0x20001d58
 8022c5c:	20002218 	.word	0x20002218
 8022c60:	200021e8 	.word	0x200021e8
 8022c64:	200021e4 	.word	0x200021e4
 8022c68:	2000224c 	.word	0x2000224c

08022c6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8022c6c:	b580      	push	{r7, lr}
 8022c6e:	b08a      	sub	sp, #40	; 0x28
 8022c70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8022c72:	2300      	movs	r3, #0
 8022c74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8022c76:	f000 fb07 	bl	8023288 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8022c7a:	4b1c      	ldr	r3, [pc, #112]	; (8022cec <xTimerCreateTimerTask+0x80>)
 8022c7c:	681b      	ldr	r3, [r3, #0]
 8022c7e:	2b00      	cmp	r3, #0
 8022c80:	d021      	beq.n	8022cc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8022c82:	2300      	movs	r3, #0
 8022c84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8022c86:	2300      	movs	r3, #0
 8022c88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8022c8a:	1d3a      	adds	r2, r7, #4
 8022c8c:	f107 0108 	add.w	r1, r7, #8
 8022c90:	f107 030c 	add.w	r3, r7, #12
 8022c94:	4618      	mov	r0, r3
 8022c96:	f7fd fde5 	bl	8020864 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8022c9a:	6879      	ldr	r1, [r7, #4]
 8022c9c:	68bb      	ldr	r3, [r7, #8]
 8022c9e:	68fa      	ldr	r2, [r7, #12]
 8022ca0:	9202      	str	r2, [sp, #8]
 8022ca2:	9301      	str	r3, [sp, #4]
 8022ca4:	2302      	movs	r3, #2
 8022ca6:	9300      	str	r3, [sp, #0]
 8022ca8:	2300      	movs	r3, #0
 8022caa:	460a      	mov	r2, r1
 8022cac:	4910      	ldr	r1, [pc, #64]	; (8022cf0 <xTimerCreateTimerTask+0x84>)
 8022cae:	4811      	ldr	r0, [pc, #68]	; (8022cf4 <xTimerCreateTimerTask+0x88>)
 8022cb0:	f7fe ff44 	bl	8021b3c <xTaskCreateStatic>
 8022cb4:	4603      	mov	r3, r0
 8022cb6:	4a10      	ldr	r2, [pc, #64]	; (8022cf8 <xTimerCreateTimerTask+0x8c>)
 8022cb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8022cba:	4b0f      	ldr	r3, [pc, #60]	; (8022cf8 <xTimerCreateTimerTask+0x8c>)
 8022cbc:	681b      	ldr	r3, [r3, #0]
 8022cbe:	2b00      	cmp	r3, #0
 8022cc0:	d001      	beq.n	8022cc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8022cc2:	2301      	movs	r3, #1
 8022cc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8022cc6:	697b      	ldr	r3, [r7, #20]
 8022cc8:	2b00      	cmp	r3, #0
 8022cca:	d10a      	bne.n	8022ce2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8022ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022cd0:	f383 8811 	msr	BASEPRI, r3
 8022cd4:	f3bf 8f6f 	isb	sy
 8022cd8:	f3bf 8f4f 	dsb	sy
 8022cdc:	613b      	str	r3, [r7, #16]
}
 8022cde:	bf00      	nop
 8022ce0:	e7fe      	b.n	8022ce0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8022ce2:	697b      	ldr	r3, [r7, #20]
}
 8022ce4:	4618      	mov	r0, r3
 8022ce6:	3718      	adds	r7, #24
 8022ce8:	46bd      	mov	sp, r7
 8022cea:	bd80      	pop	{r7, pc}
 8022cec:	20002290 	.word	0x20002290
 8022cf0:	080337d0 	.word	0x080337d0
 8022cf4:	08022e31 	.word	0x08022e31
 8022cf8:	20002294 	.word	0x20002294

08022cfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8022cfc:	b580      	push	{r7, lr}
 8022cfe:	b08a      	sub	sp, #40	; 0x28
 8022d00:	af00      	add	r7, sp, #0
 8022d02:	60f8      	str	r0, [r7, #12]
 8022d04:	60b9      	str	r1, [r7, #8]
 8022d06:	607a      	str	r2, [r7, #4]
 8022d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8022d0a:	2300      	movs	r3, #0
 8022d0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8022d0e:	68fb      	ldr	r3, [r7, #12]
 8022d10:	2b00      	cmp	r3, #0
 8022d12:	d10a      	bne.n	8022d2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8022d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022d18:	f383 8811 	msr	BASEPRI, r3
 8022d1c:	f3bf 8f6f 	isb	sy
 8022d20:	f3bf 8f4f 	dsb	sy
 8022d24:	623b      	str	r3, [r7, #32]
}
 8022d26:	bf00      	nop
 8022d28:	e7fe      	b.n	8022d28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8022d2a:	4b1a      	ldr	r3, [pc, #104]	; (8022d94 <xTimerGenericCommand+0x98>)
 8022d2c:	681b      	ldr	r3, [r3, #0]
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	d02a      	beq.n	8022d88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8022d32:	68bb      	ldr	r3, [r7, #8]
 8022d34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8022d36:	687b      	ldr	r3, [r7, #4]
 8022d38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8022d3a:	68fb      	ldr	r3, [r7, #12]
 8022d3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8022d3e:	68bb      	ldr	r3, [r7, #8]
 8022d40:	2b05      	cmp	r3, #5
 8022d42:	dc18      	bgt.n	8022d76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8022d44:	f7ff fdb4 	bl	80228b0 <xTaskGetSchedulerState>
 8022d48:	4603      	mov	r3, r0
 8022d4a:	2b02      	cmp	r3, #2
 8022d4c:	d109      	bne.n	8022d62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8022d4e:	4b11      	ldr	r3, [pc, #68]	; (8022d94 <xTimerGenericCommand+0x98>)
 8022d50:	6818      	ldr	r0, [r3, #0]
 8022d52:	f107 0110 	add.w	r1, r7, #16
 8022d56:	2300      	movs	r3, #0
 8022d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022d5a:	f7fe f845 	bl	8020de8 <xQueueGenericSend>
 8022d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8022d60:	e012      	b.n	8022d88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8022d62:	4b0c      	ldr	r3, [pc, #48]	; (8022d94 <xTimerGenericCommand+0x98>)
 8022d64:	6818      	ldr	r0, [r3, #0]
 8022d66:	f107 0110 	add.w	r1, r7, #16
 8022d6a:	2300      	movs	r3, #0
 8022d6c:	2200      	movs	r2, #0
 8022d6e:	f7fe f83b 	bl	8020de8 <xQueueGenericSend>
 8022d72:	6278      	str	r0, [r7, #36]	; 0x24
 8022d74:	e008      	b.n	8022d88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8022d76:	4b07      	ldr	r3, [pc, #28]	; (8022d94 <xTimerGenericCommand+0x98>)
 8022d78:	6818      	ldr	r0, [r3, #0]
 8022d7a:	f107 0110 	add.w	r1, r7, #16
 8022d7e:	2300      	movs	r3, #0
 8022d80:	683a      	ldr	r2, [r7, #0]
 8022d82:	f7fe f92f 	bl	8020fe4 <xQueueGenericSendFromISR>
 8022d86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8022d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022d8a:	4618      	mov	r0, r3
 8022d8c:	3728      	adds	r7, #40	; 0x28
 8022d8e:	46bd      	mov	sp, r7
 8022d90:	bd80      	pop	{r7, pc}
 8022d92:	bf00      	nop
 8022d94:	20002290 	.word	0x20002290

08022d98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b088      	sub	sp, #32
 8022d9c:	af02      	add	r7, sp, #8
 8022d9e:	6078      	str	r0, [r7, #4]
 8022da0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8022da2:	4b22      	ldr	r3, [pc, #136]	; (8022e2c <prvProcessExpiredTimer+0x94>)
 8022da4:	681b      	ldr	r3, [r3, #0]
 8022da6:	68db      	ldr	r3, [r3, #12]
 8022da8:	68db      	ldr	r3, [r3, #12]
 8022daa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8022dac:	697b      	ldr	r3, [r7, #20]
 8022dae:	3304      	adds	r3, #4
 8022db0:	4618      	mov	r0, r3
 8022db2:	f7fd fdfb 	bl	80209ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8022db6:	697b      	ldr	r3, [r7, #20]
 8022db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022dbc:	f003 0304 	and.w	r3, r3, #4
 8022dc0:	2b00      	cmp	r3, #0
 8022dc2:	d022      	beq.n	8022e0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8022dc4:	697b      	ldr	r3, [r7, #20]
 8022dc6:	699a      	ldr	r2, [r3, #24]
 8022dc8:	687b      	ldr	r3, [r7, #4]
 8022dca:	18d1      	adds	r1, r2, r3
 8022dcc:	687b      	ldr	r3, [r7, #4]
 8022dce:	683a      	ldr	r2, [r7, #0]
 8022dd0:	6978      	ldr	r0, [r7, #20]
 8022dd2:	f000 f8d1 	bl	8022f78 <prvInsertTimerInActiveList>
 8022dd6:	4603      	mov	r3, r0
 8022dd8:	2b00      	cmp	r3, #0
 8022dda:	d01f      	beq.n	8022e1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8022ddc:	2300      	movs	r3, #0
 8022dde:	9300      	str	r3, [sp, #0]
 8022de0:	2300      	movs	r3, #0
 8022de2:	687a      	ldr	r2, [r7, #4]
 8022de4:	2100      	movs	r1, #0
 8022de6:	6978      	ldr	r0, [r7, #20]
 8022de8:	f7ff ff88 	bl	8022cfc <xTimerGenericCommand>
 8022dec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8022dee:	693b      	ldr	r3, [r7, #16]
 8022df0:	2b00      	cmp	r3, #0
 8022df2:	d113      	bne.n	8022e1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8022df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8022df8:	f383 8811 	msr	BASEPRI, r3
 8022dfc:	f3bf 8f6f 	isb	sy
 8022e00:	f3bf 8f4f 	dsb	sy
 8022e04:	60fb      	str	r3, [r7, #12]
}
 8022e06:	bf00      	nop
 8022e08:	e7fe      	b.n	8022e08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8022e0a:	697b      	ldr	r3, [r7, #20]
 8022e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8022e10:	f023 0301 	bic.w	r3, r3, #1
 8022e14:	b2da      	uxtb	r2, r3
 8022e16:	697b      	ldr	r3, [r7, #20]
 8022e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8022e1c:	697b      	ldr	r3, [r7, #20]
 8022e1e:	6a1b      	ldr	r3, [r3, #32]
 8022e20:	6978      	ldr	r0, [r7, #20]
 8022e22:	4798      	blx	r3
}
 8022e24:	bf00      	nop
 8022e26:	3718      	adds	r7, #24
 8022e28:	46bd      	mov	sp, r7
 8022e2a:	bd80      	pop	{r7, pc}
 8022e2c:	20002288 	.word	0x20002288

08022e30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8022e30:	b580      	push	{r7, lr}
 8022e32:	b084      	sub	sp, #16
 8022e34:	af00      	add	r7, sp, #0
 8022e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022e38:	f107 0308 	add.w	r3, r7, #8
 8022e3c:	4618      	mov	r0, r3
 8022e3e:	f000 f857 	bl	8022ef0 <prvGetNextExpireTime>
 8022e42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8022e44:	68bb      	ldr	r3, [r7, #8]
 8022e46:	4619      	mov	r1, r3
 8022e48:	68f8      	ldr	r0, [r7, #12]
 8022e4a:	f000 f803 	bl	8022e54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8022e4e:	f000 f8d5 	bl	8022ffc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8022e52:	e7f1      	b.n	8022e38 <prvTimerTask+0x8>

08022e54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8022e54:	b580      	push	{r7, lr}
 8022e56:	b084      	sub	sp, #16
 8022e58:	af00      	add	r7, sp, #0
 8022e5a:	6078      	str	r0, [r7, #4]
 8022e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8022e5e:	f7ff f8cf 	bl	8022000 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8022e62:	f107 0308 	add.w	r3, r7, #8
 8022e66:	4618      	mov	r0, r3
 8022e68:	f000 f866 	bl	8022f38 <prvSampleTimeNow>
 8022e6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8022e6e:	68bb      	ldr	r3, [r7, #8]
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	d130      	bne.n	8022ed6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8022e74:	683b      	ldr	r3, [r7, #0]
 8022e76:	2b00      	cmp	r3, #0
 8022e78:	d10a      	bne.n	8022e90 <prvProcessTimerOrBlockTask+0x3c>
 8022e7a:	687a      	ldr	r2, [r7, #4]
 8022e7c:	68fb      	ldr	r3, [r7, #12]
 8022e7e:	429a      	cmp	r2, r3
 8022e80:	d806      	bhi.n	8022e90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8022e82:	f7ff f8cb 	bl	802201c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8022e86:	68f9      	ldr	r1, [r7, #12]
 8022e88:	6878      	ldr	r0, [r7, #4]
 8022e8a:	f7ff ff85 	bl	8022d98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8022e8e:	e024      	b.n	8022eda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8022e90:	683b      	ldr	r3, [r7, #0]
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	d008      	beq.n	8022ea8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8022e96:	4b13      	ldr	r3, [pc, #76]	; (8022ee4 <prvProcessTimerOrBlockTask+0x90>)
 8022e98:	681b      	ldr	r3, [r3, #0]
 8022e9a:	681b      	ldr	r3, [r3, #0]
 8022e9c:	2b00      	cmp	r3, #0
 8022e9e:	d101      	bne.n	8022ea4 <prvProcessTimerOrBlockTask+0x50>
 8022ea0:	2301      	movs	r3, #1
 8022ea2:	e000      	b.n	8022ea6 <prvProcessTimerOrBlockTask+0x52>
 8022ea4:	2300      	movs	r3, #0
 8022ea6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8022ea8:	4b0f      	ldr	r3, [pc, #60]	; (8022ee8 <prvProcessTimerOrBlockTask+0x94>)
 8022eaa:	6818      	ldr	r0, [r3, #0]
 8022eac:	687a      	ldr	r2, [r7, #4]
 8022eae:	68fb      	ldr	r3, [r7, #12]
 8022eb0:	1ad3      	subs	r3, r2, r3
 8022eb2:	683a      	ldr	r2, [r7, #0]
 8022eb4:	4619      	mov	r1, r3
 8022eb6:	f7fe fe0d 	bl	8021ad4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8022eba:	f7ff f8af 	bl	802201c <xTaskResumeAll>
 8022ebe:	4603      	mov	r3, r0
 8022ec0:	2b00      	cmp	r3, #0
 8022ec2:	d10a      	bne.n	8022eda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8022ec4:	4b09      	ldr	r3, [pc, #36]	; (8022eec <prvProcessTimerOrBlockTask+0x98>)
 8022ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8022eca:	601a      	str	r2, [r3, #0]
 8022ecc:	f3bf 8f4f 	dsb	sy
 8022ed0:	f3bf 8f6f 	isb	sy
}
 8022ed4:	e001      	b.n	8022eda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8022ed6:	f7ff f8a1 	bl	802201c <xTaskResumeAll>
}
 8022eda:	bf00      	nop
 8022edc:	3710      	adds	r7, #16
 8022ede:	46bd      	mov	sp, r7
 8022ee0:	bd80      	pop	{r7, pc}
 8022ee2:	bf00      	nop
 8022ee4:	2000228c 	.word	0x2000228c
 8022ee8:	20002290 	.word	0x20002290
 8022eec:	e000ed04 	.word	0xe000ed04

08022ef0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8022ef0:	b480      	push	{r7}
 8022ef2:	b085      	sub	sp, #20
 8022ef4:	af00      	add	r7, sp, #0
 8022ef6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8022ef8:	4b0e      	ldr	r3, [pc, #56]	; (8022f34 <prvGetNextExpireTime+0x44>)
 8022efa:	681b      	ldr	r3, [r3, #0]
 8022efc:	681b      	ldr	r3, [r3, #0]
 8022efe:	2b00      	cmp	r3, #0
 8022f00:	d101      	bne.n	8022f06 <prvGetNextExpireTime+0x16>
 8022f02:	2201      	movs	r2, #1
 8022f04:	e000      	b.n	8022f08 <prvGetNextExpireTime+0x18>
 8022f06:	2200      	movs	r2, #0
 8022f08:	687b      	ldr	r3, [r7, #4]
 8022f0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8022f0c:	687b      	ldr	r3, [r7, #4]
 8022f0e:	681b      	ldr	r3, [r3, #0]
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	d105      	bne.n	8022f20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8022f14:	4b07      	ldr	r3, [pc, #28]	; (8022f34 <prvGetNextExpireTime+0x44>)
 8022f16:	681b      	ldr	r3, [r3, #0]
 8022f18:	68db      	ldr	r3, [r3, #12]
 8022f1a:	681b      	ldr	r3, [r3, #0]
 8022f1c:	60fb      	str	r3, [r7, #12]
 8022f1e:	e001      	b.n	8022f24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8022f20:	2300      	movs	r3, #0
 8022f22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8022f24:	68fb      	ldr	r3, [r7, #12]
}
 8022f26:	4618      	mov	r0, r3
 8022f28:	3714      	adds	r7, #20
 8022f2a:	46bd      	mov	sp, r7
 8022f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f30:	4770      	bx	lr
 8022f32:	bf00      	nop
 8022f34:	20002288 	.word	0x20002288

08022f38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8022f38:	b580      	push	{r7, lr}
 8022f3a:	b084      	sub	sp, #16
 8022f3c:	af00      	add	r7, sp, #0
 8022f3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8022f40:	f7ff f90a 	bl	8022158 <xTaskGetTickCount>
 8022f44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8022f46:	4b0b      	ldr	r3, [pc, #44]	; (8022f74 <prvSampleTimeNow+0x3c>)
 8022f48:	681b      	ldr	r3, [r3, #0]
 8022f4a:	68fa      	ldr	r2, [r7, #12]
 8022f4c:	429a      	cmp	r2, r3
 8022f4e:	d205      	bcs.n	8022f5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8022f50:	f000 f936 	bl	80231c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8022f54:	687b      	ldr	r3, [r7, #4]
 8022f56:	2201      	movs	r2, #1
 8022f58:	601a      	str	r2, [r3, #0]
 8022f5a:	e002      	b.n	8022f62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8022f5c:	687b      	ldr	r3, [r7, #4]
 8022f5e:	2200      	movs	r2, #0
 8022f60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8022f62:	4a04      	ldr	r2, [pc, #16]	; (8022f74 <prvSampleTimeNow+0x3c>)
 8022f64:	68fb      	ldr	r3, [r7, #12]
 8022f66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8022f68:	68fb      	ldr	r3, [r7, #12]
}
 8022f6a:	4618      	mov	r0, r3
 8022f6c:	3710      	adds	r7, #16
 8022f6e:	46bd      	mov	sp, r7
 8022f70:	bd80      	pop	{r7, pc}
 8022f72:	bf00      	nop
 8022f74:	20002298 	.word	0x20002298

08022f78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8022f78:	b580      	push	{r7, lr}
 8022f7a:	b086      	sub	sp, #24
 8022f7c:	af00      	add	r7, sp, #0
 8022f7e:	60f8      	str	r0, [r7, #12]
 8022f80:	60b9      	str	r1, [r7, #8]
 8022f82:	607a      	str	r2, [r7, #4]
 8022f84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8022f86:	2300      	movs	r3, #0
 8022f88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	68ba      	ldr	r2, [r7, #8]
 8022f8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8022f90:	68fb      	ldr	r3, [r7, #12]
 8022f92:	68fa      	ldr	r2, [r7, #12]
 8022f94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8022f96:	68ba      	ldr	r2, [r7, #8]
 8022f98:	687b      	ldr	r3, [r7, #4]
 8022f9a:	429a      	cmp	r2, r3
 8022f9c:	d812      	bhi.n	8022fc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8022f9e:	687a      	ldr	r2, [r7, #4]
 8022fa0:	683b      	ldr	r3, [r7, #0]
 8022fa2:	1ad2      	subs	r2, r2, r3
 8022fa4:	68fb      	ldr	r3, [r7, #12]
 8022fa6:	699b      	ldr	r3, [r3, #24]
 8022fa8:	429a      	cmp	r2, r3
 8022faa:	d302      	bcc.n	8022fb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8022fac:	2301      	movs	r3, #1
 8022fae:	617b      	str	r3, [r7, #20]
 8022fb0:	e01b      	b.n	8022fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8022fb2:	4b10      	ldr	r3, [pc, #64]	; (8022ff4 <prvInsertTimerInActiveList+0x7c>)
 8022fb4:	681a      	ldr	r2, [r3, #0]
 8022fb6:	68fb      	ldr	r3, [r7, #12]
 8022fb8:	3304      	adds	r3, #4
 8022fba:	4619      	mov	r1, r3
 8022fbc:	4610      	mov	r0, r2
 8022fbe:	f7fd fcbc 	bl	802093a <vListInsert>
 8022fc2:	e012      	b.n	8022fea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8022fc4:	687a      	ldr	r2, [r7, #4]
 8022fc6:	683b      	ldr	r3, [r7, #0]
 8022fc8:	429a      	cmp	r2, r3
 8022fca:	d206      	bcs.n	8022fda <prvInsertTimerInActiveList+0x62>
 8022fcc:	68ba      	ldr	r2, [r7, #8]
 8022fce:	683b      	ldr	r3, [r7, #0]
 8022fd0:	429a      	cmp	r2, r3
 8022fd2:	d302      	bcc.n	8022fda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8022fd4:	2301      	movs	r3, #1
 8022fd6:	617b      	str	r3, [r7, #20]
 8022fd8:	e007      	b.n	8022fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8022fda:	4b07      	ldr	r3, [pc, #28]	; (8022ff8 <prvInsertTimerInActiveList+0x80>)
 8022fdc:	681a      	ldr	r2, [r3, #0]
 8022fde:	68fb      	ldr	r3, [r7, #12]
 8022fe0:	3304      	adds	r3, #4
 8022fe2:	4619      	mov	r1, r3
 8022fe4:	4610      	mov	r0, r2
 8022fe6:	f7fd fca8 	bl	802093a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8022fea:	697b      	ldr	r3, [r7, #20]
}
 8022fec:	4618      	mov	r0, r3
 8022fee:	3718      	adds	r7, #24
 8022ff0:	46bd      	mov	sp, r7
 8022ff2:	bd80      	pop	{r7, pc}
 8022ff4:	2000228c 	.word	0x2000228c
 8022ff8:	20002288 	.word	0x20002288

08022ffc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8022ffc:	b580      	push	{r7, lr}
 8022ffe:	b08e      	sub	sp, #56	; 0x38
 8023000:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8023002:	e0ca      	b.n	802319a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8023004:	687b      	ldr	r3, [r7, #4]
 8023006:	2b00      	cmp	r3, #0
 8023008:	da18      	bge.n	802303c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 802300a:	1d3b      	adds	r3, r7, #4
 802300c:	3304      	adds	r3, #4
 802300e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8023010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023012:	2b00      	cmp	r3, #0
 8023014:	d10a      	bne.n	802302c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8023016:	f04f 0350 	mov.w	r3, #80	; 0x50
 802301a:	f383 8811 	msr	BASEPRI, r3
 802301e:	f3bf 8f6f 	isb	sy
 8023022:	f3bf 8f4f 	dsb	sy
 8023026:	61fb      	str	r3, [r7, #28]
}
 8023028:	bf00      	nop
 802302a:	e7fe      	b.n	802302a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 802302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802302e:	681b      	ldr	r3, [r3, #0]
 8023030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023032:	6850      	ldr	r0, [r2, #4]
 8023034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023036:	6892      	ldr	r2, [r2, #8]
 8023038:	4611      	mov	r1, r2
 802303a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 802303c:	687b      	ldr	r3, [r7, #4]
 802303e:	2b00      	cmp	r3, #0
 8023040:	f2c0 80ab 	blt.w	802319a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8023044:	68fb      	ldr	r3, [r7, #12]
 8023046:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8023048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802304a:	695b      	ldr	r3, [r3, #20]
 802304c:	2b00      	cmp	r3, #0
 802304e:	d004      	beq.n	802305a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8023050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023052:	3304      	adds	r3, #4
 8023054:	4618      	mov	r0, r3
 8023056:	f7fd fca9 	bl	80209ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 802305a:	463b      	mov	r3, r7
 802305c:	4618      	mov	r0, r3
 802305e:	f7ff ff6b 	bl	8022f38 <prvSampleTimeNow>
 8023062:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8023064:	687b      	ldr	r3, [r7, #4]
 8023066:	2b09      	cmp	r3, #9
 8023068:	f200 8096 	bhi.w	8023198 <prvProcessReceivedCommands+0x19c>
 802306c:	a201      	add	r2, pc, #4	; (adr r2, 8023074 <prvProcessReceivedCommands+0x78>)
 802306e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023072:	bf00      	nop
 8023074:	0802309d 	.word	0x0802309d
 8023078:	0802309d 	.word	0x0802309d
 802307c:	0802309d 	.word	0x0802309d
 8023080:	08023111 	.word	0x08023111
 8023084:	08023125 	.word	0x08023125
 8023088:	0802316f 	.word	0x0802316f
 802308c:	0802309d 	.word	0x0802309d
 8023090:	0802309d 	.word	0x0802309d
 8023094:	08023111 	.word	0x08023111
 8023098:	08023125 	.word	0x08023125
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 802309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802309e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80230a2:	f043 0301 	orr.w	r3, r3, #1
 80230a6:	b2da      	uxtb	r2, r3
 80230a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80230ae:	68ba      	ldr	r2, [r7, #8]
 80230b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230b2:	699b      	ldr	r3, [r3, #24]
 80230b4:	18d1      	adds	r1, r2, r3
 80230b6:	68bb      	ldr	r3, [r7, #8]
 80230b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80230ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80230bc:	f7ff ff5c 	bl	8022f78 <prvInsertTimerInActiveList>
 80230c0:	4603      	mov	r3, r0
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	d069      	beq.n	802319a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80230c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230c8:	6a1b      	ldr	r3, [r3, #32]
 80230ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80230cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80230ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80230d4:	f003 0304 	and.w	r3, r3, #4
 80230d8:	2b00      	cmp	r3, #0
 80230da:	d05e      	beq.n	802319a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80230dc:	68ba      	ldr	r2, [r7, #8]
 80230de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80230e0:	699b      	ldr	r3, [r3, #24]
 80230e2:	441a      	add	r2, r3
 80230e4:	2300      	movs	r3, #0
 80230e6:	9300      	str	r3, [sp, #0]
 80230e8:	2300      	movs	r3, #0
 80230ea:	2100      	movs	r1, #0
 80230ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80230ee:	f7ff fe05 	bl	8022cfc <xTimerGenericCommand>
 80230f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80230f4:	6a3b      	ldr	r3, [r7, #32]
 80230f6:	2b00      	cmp	r3, #0
 80230f8:	d14f      	bne.n	802319a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80230fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80230fe:	f383 8811 	msr	BASEPRI, r3
 8023102:	f3bf 8f6f 	isb	sy
 8023106:	f3bf 8f4f 	dsb	sy
 802310a:	61bb      	str	r3, [r7, #24]
}
 802310c:	bf00      	nop
 802310e:	e7fe      	b.n	802310e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023116:	f023 0301 	bic.w	r3, r3, #1
 802311a:	b2da      	uxtb	r2, r3
 802311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802311e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8023122:	e03a      	b.n	802319a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8023124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802312a:	f043 0301 	orr.w	r3, r3, #1
 802312e:	b2da      	uxtb	r2, r3
 8023130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8023136:	68ba      	ldr	r2, [r7, #8]
 8023138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802313a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 802313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802313e:	699b      	ldr	r3, [r3, #24]
 8023140:	2b00      	cmp	r3, #0
 8023142:	d10a      	bne.n	802315a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8023144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023148:	f383 8811 	msr	BASEPRI, r3
 802314c:	f3bf 8f6f 	isb	sy
 8023150:	f3bf 8f4f 	dsb	sy
 8023154:	617b      	str	r3, [r7, #20]
}
 8023156:	bf00      	nop
 8023158:	e7fe      	b.n	8023158 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 802315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802315c:	699a      	ldr	r2, [r3, #24]
 802315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023160:	18d1      	adds	r1, r2, r3
 8023162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8023168:	f7ff ff06 	bl	8022f78 <prvInsertTimerInActiveList>
					break;
 802316c:	e015      	b.n	802319a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 802316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8023174:	f003 0302 	and.w	r3, r3, #2
 8023178:	2b00      	cmp	r3, #0
 802317a:	d103      	bne.n	8023184 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 802317c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802317e:	f000 fb59 	bl	8023834 <vPortFree>
 8023182:	e00a      	b.n	802319a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8023184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 802318a:	f023 0301 	bic.w	r3, r3, #1
 802318e:	b2da      	uxtb	r2, r3
 8023190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8023196:	e000      	b.n	802319a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8023198:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 802319a:	4b08      	ldr	r3, [pc, #32]	; (80231bc <prvProcessReceivedCommands+0x1c0>)
 802319c:	681b      	ldr	r3, [r3, #0]
 802319e:	1d39      	adds	r1, r7, #4
 80231a0:	2200      	movs	r2, #0
 80231a2:	4618      	mov	r0, r3
 80231a4:	f7fd ffba 	bl	802111c <xQueueReceive>
 80231a8:	4603      	mov	r3, r0
 80231aa:	2b00      	cmp	r3, #0
 80231ac:	f47f af2a 	bne.w	8023004 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80231b0:	bf00      	nop
 80231b2:	bf00      	nop
 80231b4:	3730      	adds	r7, #48	; 0x30
 80231b6:	46bd      	mov	sp, r7
 80231b8:	bd80      	pop	{r7, pc}
 80231ba:	bf00      	nop
 80231bc:	20002290 	.word	0x20002290

080231c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80231c0:	b580      	push	{r7, lr}
 80231c2:	b088      	sub	sp, #32
 80231c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80231c6:	e048      	b.n	802325a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80231c8:	4b2d      	ldr	r3, [pc, #180]	; (8023280 <prvSwitchTimerLists+0xc0>)
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	68db      	ldr	r3, [r3, #12]
 80231ce:	681b      	ldr	r3, [r3, #0]
 80231d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80231d2:	4b2b      	ldr	r3, [pc, #172]	; (8023280 <prvSwitchTimerLists+0xc0>)
 80231d4:	681b      	ldr	r3, [r3, #0]
 80231d6:	68db      	ldr	r3, [r3, #12]
 80231d8:	68db      	ldr	r3, [r3, #12]
 80231da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80231dc:	68fb      	ldr	r3, [r7, #12]
 80231de:	3304      	adds	r3, #4
 80231e0:	4618      	mov	r0, r3
 80231e2:	f7fd fbe3 	bl	80209ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80231e6:	68fb      	ldr	r3, [r7, #12]
 80231e8:	6a1b      	ldr	r3, [r3, #32]
 80231ea:	68f8      	ldr	r0, [r7, #12]
 80231ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80231ee:	68fb      	ldr	r3, [r7, #12]
 80231f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80231f4:	f003 0304 	and.w	r3, r3, #4
 80231f8:	2b00      	cmp	r3, #0
 80231fa:	d02e      	beq.n	802325a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80231fc:	68fb      	ldr	r3, [r7, #12]
 80231fe:	699b      	ldr	r3, [r3, #24]
 8023200:	693a      	ldr	r2, [r7, #16]
 8023202:	4413      	add	r3, r2
 8023204:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8023206:	68ba      	ldr	r2, [r7, #8]
 8023208:	693b      	ldr	r3, [r7, #16]
 802320a:	429a      	cmp	r2, r3
 802320c:	d90e      	bls.n	802322c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 802320e:	68fb      	ldr	r3, [r7, #12]
 8023210:	68ba      	ldr	r2, [r7, #8]
 8023212:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8023214:	68fb      	ldr	r3, [r7, #12]
 8023216:	68fa      	ldr	r2, [r7, #12]
 8023218:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 802321a:	4b19      	ldr	r3, [pc, #100]	; (8023280 <prvSwitchTimerLists+0xc0>)
 802321c:	681a      	ldr	r2, [r3, #0]
 802321e:	68fb      	ldr	r3, [r7, #12]
 8023220:	3304      	adds	r3, #4
 8023222:	4619      	mov	r1, r3
 8023224:	4610      	mov	r0, r2
 8023226:	f7fd fb88 	bl	802093a <vListInsert>
 802322a:	e016      	b.n	802325a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 802322c:	2300      	movs	r3, #0
 802322e:	9300      	str	r3, [sp, #0]
 8023230:	2300      	movs	r3, #0
 8023232:	693a      	ldr	r2, [r7, #16]
 8023234:	2100      	movs	r1, #0
 8023236:	68f8      	ldr	r0, [r7, #12]
 8023238:	f7ff fd60 	bl	8022cfc <xTimerGenericCommand>
 802323c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 802323e:	687b      	ldr	r3, [r7, #4]
 8023240:	2b00      	cmp	r3, #0
 8023242:	d10a      	bne.n	802325a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8023244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023248:	f383 8811 	msr	BASEPRI, r3
 802324c:	f3bf 8f6f 	isb	sy
 8023250:	f3bf 8f4f 	dsb	sy
 8023254:	603b      	str	r3, [r7, #0]
}
 8023256:	bf00      	nop
 8023258:	e7fe      	b.n	8023258 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 802325a:	4b09      	ldr	r3, [pc, #36]	; (8023280 <prvSwitchTimerLists+0xc0>)
 802325c:	681b      	ldr	r3, [r3, #0]
 802325e:	681b      	ldr	r3, [r3, #0]
 8023260:	2b00      	cmp	r3, #0
 8023262:	d1b1      	bne.n	80231c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8023264:	4b06      	ldr	r3, [pc, #24]	; (8023280 <prvSwitchTimerLists+0xc0>)
 8023266:	681b      	ldr	r3, [r3, #0]
 8023268:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 802326a:	4b06      	ldr	r3, [pc, #24]	; (8023284 <prvSwitchTimerLists+0xc4>)
 802326c:	681b      	ldr	r3, [r3, #0]
 802326e:	4a04      	ldr	r2, [pc, #16]	; (8023280 <prvSwitchTimerLists+0xc0>)
 8023270:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8023272:	4a04      	ldr	r2, [pc, #16]	; (8023284 <prvSwitchTimerLists+0xc4>)
 8023274:	697b      	ldr	r3, [r7, #20]
 8023276:	6013      	str	r3, [r2, #0]
}
 8023278:	bf00      	nop
 802327a:	3718      	adds	r7, #24
 802327c:	46bd      	mov	sp, r7
 802327e:	bd80      	pop	{r7, pc}
 8023280:	20002288 	.word	0x20002288
 8023284:	2000228c 	.word	0x2000228c

08023288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8023288:	b580      	push	{r7, lr}
 802328a:	b082      	sub	sp, #8
 802328c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 802328e:	f000 f969 	bl	8023564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8023292:	4b15      	ldr	r3, [pc, #84]	; (80232e8 <prvCheckForValidListAndQueue+0x60>)
 8023294:	681b      	ldr	r3, [r3, #0]
 8023296:	2b00      	cmp	r3, #0
 8023298:	d120      	bne.n	80232dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 802329a:	4814      	ldr	r0, [pc, #80]	; (80232ec <prvCheckForValidListAndQueue+0x64>)
 802329c:	f7fd fafc 	bl	8020898 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80232a0:	4813      	ldr	r0, [pc, #76]	; (80232f0 <prvCheckForValidListAndQueue+0x68>)
 80232a2:	f7fd faf9 	bl	8020898 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80232a6:	4b13      	ldr	r3, [pc, #76]	; (80232f4 <prvCheckForValidListAndQueue+0x6c>)
 80232a8:	4a10      	ldr	r2, [pc, #64]	; (80232ec <prvCheckForValidListAndQueue+0x64>)
 80232aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80232ac:	4b12      	ldr	r3, [pc, #72]	; (80232f8 <prvCheckForValidListAndQueue+0x70>)
 80232ae:	4a10      	ldr	r2, [pc, #64]	; (80232f0 <prvCheckForValidListAndQueue+0x68>)
 80232b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80232b2:	2300      	movs	r3, #0
 80232b4:	9300      	str	r3, [sp, #0]
 80232b6:	4b11      	ldr	r3, [pc, #68]	; (80232fc <prvCheckForValidListAndQueue+0x74>)
 80232b8:	4a11      	ldr	r2, [pc, #68]	; (8023300 <prvCheckForValidListAndQueue+0x78>)
 80232ba:	2110      	movs	r1, #16
 80232bc:	200a      	movs	r0, #10
 80232be:	f7fd fc07 	bl	8020ad0 <xQueueGenericCreateStatic>
 80232c2:	4603      	mov	r3, r0
 80232c4:	4a08      	ldr	r2, [pc, #32]	; (80232e8 <prvCheckForValidListAndQueue+0x60>)
 80232c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80232c8:	4b07      	ldr	r3, [pc, #28]	; (80232e8 <prvCheckForValidListAndQueue+0x60>)
 80232ca:	681b      	ldr	r3, [r3, #0]
 80232cc:	2b00      	cmp	r3, #0
 80232ce:	d005      	beq.n	80232dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80232d0:	4b05      	ldr	r3, [pc, #20]	; (80232e8 <prvCheckForValidListAndQueue+0x60>)
 80232d2:	681b      	ldr	r3, [r3, #0]
 80232d4:	490b      	ldr	r1, [pc, #44]	; (8023304 <prvCheckForValidListAndQueue+0x7c>)
 80232d6:	4618      	mov	r0, r3
 80232d8:	f7fe fbd2 	bl	8021a80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80232dc:	f000 f972 	bl	80235c4 <vPortExitCritical>
}
 80232e0:	bf00      	nop
 80232e2:	46bd      	mov	sp, r7
 80232e4:	bd80      	pop	{r7, pc}
 80232e6:	bf00      	nop
 80232e8:	20002290 	.word	0x20002290
 80232ec:	20002260 	.word	0x20002260
 80232f0:	20002274 	.word	0x20002274
 80232f4:	20002288 	.word	0x20002288
 80232f8:	2000228c 	.word	0x2000228c
 80232fc:	2000233c 	.word	0x2000233c
 8023300:	2000229c 	.word	0x2000229c
 8023304:	080337d8 	.word	0x080337d8

08023308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8023308:	b480      	push	{r7}
 802330a:	b085      	sub	sp, #20
 802330c:	af00      	add	r7, sp, #0
 802330e:	60f8      	str	r0, [r7, #12]
 8023310:	60b9      	str	r1, [r7, #8]
 8023312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8023314:	68fb      	ldr	r3, [r7, #12]
 8023316:	3b04      	subs	r3, #4
 8023318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 802331a:	68fb      	ldr	r3, [r7, #12]
 802331c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8023320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8023322:	68fb      	ldr	r3, [r7, #12]
 8023324:	3b04      	subs	r3, #4
 8023326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8023328:	68bb      	ldr	r3, [r7, #8]
 802332a:	f023 0201 	bic.w	r2, r3, #1
 802332e:	68fb      	ldr	r3, [r7, #12]
 8023330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8023332:	68fb      	ldr	r3, [r7, #12]
 8023334:	3b04      	subs	r3, #4
 8023336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8023338:	4a0c      	ldr	r2, [pc, #48]	; (802336c <pxPortInitialiseStack+0x64>)
 802333a:	68fb      	ldr	r3, [r7, #12]
 802333c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 802333e:	68fb      	ldr	r3, [r7, #12]
 8023340:	3b14      	subs	r3, #20
 8023342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8023344:	687a      	ldr	r2, [r7, #4]
 8023346:	68fb      	ldr	r3, [r7, #12]
 8023348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 802334a:	68fb      	ldr	r3, [r7, #12]
 802334c:	3b04      	subs	r3, #4
 802334e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8023350:	68fb      	ldr	r3, [r7, #12]
 8023352:	f06f 0202 	mvn.w	r2, #2
 8023356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8023358:	68fb      	ldr	r3, [r7, #12]
 802335a:	3b20      	subs	r3, #32
 802335c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 802335e:	68fb      	ldr	r3, [r7, #12]
}
 8023360:	4618      	mov	r0, r3
 8023362:	3714      	adds	r7, #20
 8023364:	46bd      	mov	sp, r7
 8023366:	f85d 7b04 	ldr.w	r7, [sp], #4
 802336a:	4770      	bx	lr
 802336c:	08023371 	.word	0x08023371

08023370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8023370:	b480      	push	{r7}
 8023372:	b085      	sub	sp, #20
 8023374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8023376:	2300      	movs	r3, #0
 8023378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 802337a:	4b12      	ldr	r3, [pc, #72]	; (80233c4 <prvTaskExitError+0x54>)
 802337c:	681b      	ldr	r3, [r3, #0]
 802337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023382:	d00a      	beq.n	802339a <prvTaskExitError+0x2a>
	__asm volatile
 8023384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023388:	f383 8811 	msr	BASEPRI, r3
 802338c:	f3bf 8f6f 	isb	sy
 8023390:	f3bf 8f4f 	dsb	sy
 8023394:	60fb      	str	r3, [r7, #12]
}
 8023396:	bf00      	nop
 8023398:	e7fe      	b.n	8023398 <prvTaskExitError+0x28>
	__asm volatile
 802339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802339e:	f383 8811 	msr	BASEPRI, r3
 80233a2:	f3bf 8f6f 	isb	sy
 80233a6:	f3bf 8f4f 	dsb	sy
 80233aa:	60bb      	str	r3, [r7, #8]
}
 80233ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80233ae:	bf00      	nop
 80233b0:	687b      	ldr	r3, [r7, #4]
 80233b2:	2b00      	cmp	r3, #0
 80233b4:	d0fc      	beq.n	80233b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80233b6:	bf00      	nop
 80233b8:	bf00      	nop
 80233ba:	3714      	adds	r7, #20
 80233bc:	46bd      	mov	sp, r7
 80233be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233c2:	4770      	bx	lr
 80233c4:	20000128 	.word	0x20000128
	...

080233d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80233d0:	4b07      	ldr	r3, [pc, #28]	; (80233f0 <pxCurrentTCBConst2>)
 80233d2:	6819      	ldr	r1, [r3, #0]
 80233d4:	6808      	ldr	r0, [r1, #0]
 80233d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233da:	f380 8809 	msr	PSP, r0
 80233de:	f3bf 8f6f 	isb	sy
 80233e2:	f04f 0000 	mov.w	r0, #0
 80233e6:	f380 8811 	msr	BASEPRI, r0
 80233ea:	4770      	bx	lr
 80233ec:	f3af 8000 	nop.w

080233f0 <pxCurrentTCBConst2>:
 80233f0:	20001d58 	.word	0x20001d58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80233f4:	bf00      	nop
 80233f6:	bf00      	nop

080233f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80233f8:	4808      	ldr	r0, [pc, #32]	; (802341c <prvPortStartFirstTask+0x24>)
 80233fa:	6800      	ldr	r0, [r0, #0]
 80233fc:	6800      	ldr	r0, [r0, #0]
 80233fe:	f380 8808 	msr	MSP, r0
 8023402:	f04f 0000 	mov.w	r0, #0
 8023406:	f380 8814 	msr	CONTROL, r0
 802340a:	b662      	cpsie	i
 802340c:	b661      	cpsie	f
 802340e:	f3bf 8f4f 	dsb	sy
 8023412:	f3bf 8f6f 	isb	sy
 8023416:	df00      	svc	0
 8023418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 802341a:	bf00      	nop
 802341c:	e000ed08 	.word	0xe000ed08

08023420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8023420:	b580      	push	{r7, lr}
 8023422:	b086      	sub	sp, #24
 8023424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8023426:	4b46      	ldr	r3, [pc, #280]	; (8023540 <xPortStartScheduler+0x120>)
 8023428:	681b      	ldr	r3, [r3, #0]
 802342a:	4a46      	ldr	r2, [pc, #280]	; (8023544 <xPortStartScheduler+0x124>)
 802342c:	4293      	cmp	r3, r2
 802342e:	d10a      	bne.n	8023446 <xPortStartScheduler+0x26>
	__asm volatile
 8023430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023434:	f383 8811 	msr	BASEPRI, r3
 8023438:	f3bf 8f6f 	isb	sy
 802343c:	f3bf 8f4f 	dsb	sy
 8023440:	613b      	str	r3, [r7, #16]
}
 8023442:	bf00      	nop
 8023444:	e7fe      	b.n	8023444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8023446:	4b3e      	ldr	r3, [pc, #248]	; (8023540 <xPortStartScheduler+0x120>)
 8023448:	681b      	ldr	r3, [r3, #0]
 802344a:	4a3f      	ldr	r2, [pc, #252]	; (8023548 <xPortStartScheduler+0x128>)
 802344c:	4293      	cmp	r3, r2
 802344e:	d10a      	bne.n	8023466 <xPortStartScheduler+0x46>
	__asm volatile
 8023450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023454:	f383 8811 	msr	BASEPRI, r3
 8023458:	f3bf 8f6f 	isb	sy
 802345c:	f3bf 8f4f 	dsb	sy
 8023460:	60fb      	str	r3, [r7, #12]
}
 8023462:	bf00      	nop
 8023464:	e7fe      	b.n	8023464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8023466:	4b39      	ldr	r3, [pc, #228]	; (802354c <xPortStartScheduler+0x12c>)
 8023468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 802346a:	697b      	ldr	r3, [r7, #20]
 802346c:	781b      	ldrb	r3, [r3, #0]
 802346e:	b2db      	uxtb	r3, r3
 8023470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8023472:	697b      	ldr	r3, [r7, #20]
 8023474:	22ff      	movs	r2, #255	; 0xff
 8023476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8023478:	697b      	ldr	r3, [r7, #20]
 802347a:	781b      	ldrb	r3, [r3, #0]
 802347c:	b2db      	uxtb	r3, r3
 802347e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8023480:	78fb      	ldrb	r3, [r7, #3]
 8023482:	b2db      	uxtb	r3, r3
 8023484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8023488:	b2da      	uxtb	r2, r3
 802348a:	4b31      	ldr	r3, [pc, #196]	; (8023550 <xPortStartScheduler+0x130>)
 802348c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 802348e:	4b31      	ldr	r3, [pc, #196]	; (8023554 <xPortStartScheduler+0x134>)
 8023490:	2207      	movs	r2, #7
 8023492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8023494:	e009      	b.n	80234aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8023496:	4b2f      	ldr	r3, [pc, #188]	; (8023554 <xPortStartScheduler+0x134>)
 8023498:	681b      	ldr	r3, [r3, #0]
 802349a:	3b01      	subs	r3, #1
 802349c:	4a2d      	ldr	r2, [pc, #180]	; (8023554 <xPortStartScheduler+0x134>)
 802349e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80234a0:	78fb      	ldrb	r3, [r7, #3]
 80234a2:	b2db      	uxtb	r3, r3
 80234a4:	005b      	lsls	r3, r3, #1
 80234a6:	b2db      	uxtb	r3, r3
 80234a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80234aa:	78fb      	ldrb	r3, [r7, #3]
 80234ac:	b2db      	uxtb	r3, r3
 80234ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80234b2:	2b80      	cmp	r3, #128	; 0x80
 80234b4:	d0ef      	beq.n	8023496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80234b6:	4b27      	ldr	r3, [pc, #156]	; (8023554 <xPortStartScheduler+0x134>)
 80234b8:	681b      	ldr	r3, [r3, #0]
 80234ba:	f1c3 0307 	rsb	r3, r3, #7
 80234be:	2b04      	cmp	r3, #4
 80234c0:	d00a      	beq.n	80234d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80234c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80234c6:	f383 8811 	msr	BASEPRI, r3
 80234ca:	f3bf 8f6f 	isb	sy
 80234ce:	f3bf 8f4f 	dsb	sy
 80234d2:	60bb      	str	r3, [r7, #8]
}
 80234d4:	bf00      	nop
 80234d6:	e7fe      	b.n	80234d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80234d8:	4b1e      	ldr	r3, [pc, #120]	; (8023554 <xPortStartScheduler+0x134>)
 80234da:	681b      	ldr	r3, [r3, #0]
 80234dc:	021b      	lsls	r3, r3, #8
 80234de:	4a1d      	ldr	r2, [pc, #116]	; (8023554 <xPortStartScheduler+0x134>)
 80234e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80234e2:	4b1c      	ldr	r3, [pc, #112]	; (8023554 <xPortStartScheduler+0x134>)
 80234e4:	681b      	ldr	r3, [r3, #0]
 80234e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80234ea:	4a1a      	ldr	r2, [pc, #104]	; (8023554 <xPortStartScheduler+0x134>)
 80234ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80234ee:	687b      	ldr	r3, [r7, #4]
 80234f0:	b2da      	uxtb	r2, r3
 80234f2:	697b      	ldr	r3, [r7, #20]
 80234f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80234f6:	4b18      	ldr	r3, [pc, #96]	; (8023558 <xPortStartScheduler+0x138>)
 80234f8:	681b      	ldr	r3, [r3, #0]
 80234fa:	4a17      	ldr	r2, [pc, #92]	; (8023558 <xPortStartScheduler+0x138>)
 80234fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8023500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8023502:	4b15      	ldr	r3, [pc, #84]	; (8023558 <xPortStartScheduler+0x138>)
 8023504:	681b      	ldr	r3, [r3, #0]
 8023506:	4a14      	ldr	r2, [pc, #80]	; (8023558 <xPortStartScheduler+0x138>)
 8023508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 802350c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 802350e:	f000 f8dd 	bl	80236cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8023512:	4b12      	ldr	r3, [pc, #72]	; (802355c <xPortStartScheduler+0x13c>)
 8023514:	2200      	movs	r2, #0
 8023516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8023518:	f000 f8fc 	bl	8023714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 802351c:	4b10      	ldr	r3, [pc, #64]	; (8023560 <xPortStartScheduler+0x140>)
 802351e:	681b      	ldr	r3, [r3, #0]
 8023520:	4a0f      	ldr	r2, [pc, #60]	; (8023560 <xPortStartScheduler+0x140>)
 8023522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8023526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8023528:	f7ff ff66 	bl	80233f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 802352c:	f7fe fee6 	bl	80222fc <vTaskSwitchContext>
	prvTaskExitError();
 8023530:	f7ff ff1e 	bl	8023370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8023534:	2300      	movs	r3, #0
}
 8023536:	4618      	mov	r0, r3
 8023538:	3718      	adds	r7, #24
 802353a:	46bd      	mov	sp, r7
 802353c:	bd80      	pop	{r7, pc}
 802353e:	bf00      	nop
 8023540:	e000ed00 	.word	0xe000ed00
 8023544:	410fc271 	.word	0x410fc271
 8023548:	410fc270 	.word	0x410fc270
 802354c:	e000e400 	.word	0xe000e400
 8023550:	2000238c 	.word	0x2000238c
 8023554:	20002390 	.word	0x20002390
 8023558:	e000ed20 	.word	0xe000ed20
 802355c:	20000128 	.word	0x20000128
 8023560:	e000ef34 	.word	0xe000ef34

08023564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8023564:	b480      	push	{r7}
 8023566:	b083      	sub	sp, #12
 8023568:	af00      	add	r7, sp, #0
	__asm volatile
 802356a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802356e:	f383 8811 	msr	BASEPRI, r3
 8023572:	f3bf 8f6f 	isb	sy
 8023576:	f3bf 8f4f 	dsb	sy
 802357a:	607b      	str	r3, [r7, #4]
}
 802357c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 802357e:	4b0f      	ldr	r3, [pc, #60]	; (80235bc <vPortEnterCritical+0x58>)
 8023580:	681b      	ldr	r3, [r3, #0]
 8023582:	3301      	adds	r3, #1
 8023584:	4a0d      	ldr	r2, [pc, #52]	; (80235bc <vPortEnterCritical+0x58>)
 8023586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8023588:	4b0c      	ldr	r3, [pc, #48]	; (80235bc <vPortEnterCritical+0x58>)
 802358a:	681b      	ldr	r3, [r3, #0]
 802358c:	2b01      	cmp	r3, #1
 802358e:	d10f      	bne.n	80235b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8023590:	4b0b      	ldr	r3, [pc, #44]	; (80235c0 <vPortEnterCritical+0x5c>)
 8023592:	681b      	ldr	r3, [r3, #0]
 8023594:	b2db      	uxtb	r3, r3
 8023596:	2b00      	cmp	r3, #0
 8023598:	d00a      	beq.n	80235b0 <vPortEnterCritical+0x4c>
	__asm volatile
 802359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 802359e:	f383 8811 	msr	BASEPRI, r3
 80235a2:	f3bf 8f6f 	isb	sy
 80235a6:	f3bf 8f4f 	dsb	sy
 80235aa:	603b      	str	r3, [r7, #0]
}
 80235ac:	bf00      	nop
 80235ae:	e7fe      	b.n	80235ae <vPortEnterCritical+0x4a>
	}
}
 80235b0:	bf00      	nop
 80235b2:	370c      	adds	r7, #12
 80235b4:	46bd      	mov	sp, r7
 80235b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235ba:	4770      	bx	lr
 80235bc:	20000128 	.word	0x20000128
 80235c0:	e000ed04 	.word	0xe000ed04

080235c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80235c4:	b480      	push	{r7}
 80235c6:	b083      	sub	sp, #12
 80235c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80235ca:	4b12      	ldr	r3, [pc, #72]	; (8023614 <vPortExitCritical+0x50>)
 80235cc:	681b      	ldr	r3, [r3, #0]
 80235ce:	2b00      	cmp	r3, #0
 80235d0:	d10a      	bne.n	80235e8 <vPortExitCritical+0x24>
	__asm volatile
 80235d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80235d6:	f383 8811 	msr	BASEPRI, r3
 80235da:	f3bf 8f6f 	isb	sy
 80235de:	f3bf 8f4f 	dsb	sy
 80235e2:	607b      	str	r3, [r7, #4]
}
 80235e4:	bf00      	nop
 80235e6:	e7fe      	b.n	80235e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80235e8:	4b0a      	ldr	r3, [pc, #40]	; (8023614 <vPortExitCritical+0x50>)
 80235ea:	681b      	ldr	r3, [r3, #0]
 80235ec:	3b01      	subs	r3, #1
 80235ee:	4a09      	ldr	r2, [pc, #36]	; (8023614 <vPortExitCritical+0x50>)
 80235f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80235f2:	4b08      	ldr	r3, [pc, #32]	; (8023614 <vPortExitCritical+0x50>)
 80235f4:	681b      	ldr	r3, [r3, #0]
 80235f6:	2b00      	cmp	r3, #0
 80235f8:	d105      	bne.n	8023606 <vPortExitCritical+0x42>
 80235fa:	2300      	movs	r3, #0
 80235fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80235fe:	683b      	ldr	r3, [r7, #0]
 8023600:	f383 8811 	msr	BASEPRI, r3
}
 8023604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8023606:	bf00      	nop
 8023608:	370c      	adds	r7, #12
 802360a:	46bd      	mov	sp, r7
 802360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023610:	4770      	bx	lr
 8023612:	bf00      	nop
 8023614:	20000128 	.word	0x20000128
	...

08023620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8023620:	f3ef 8009 	mrs	r0, PSP
 8023624:	f3bf 8f6f 	isb	sy
 8023628:	4b15      	ldr	r3, [pc, #84]	; (8023680 <pxCurrentTCBConst>)
 802362a:	681a      	ldr	r2, [r3, #0]
 802362c:	f01e 0f10 	tst.w	lr, #16
 8023630:	bf08      	it	eq
 8023632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8023636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802363a:	6010      	str	r0, [r2, #0]
 802363c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8023640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8023644:	f380 8811 	msr	BASEPRI, r0
 8023648:	f3bf 8f4f 	dsb	sy
 802364c:	f3bf 8f6f 	isb	sy
 8023650:	f7fe fe54 	bl	80222fc <vTaskSwitchContext>
 8023654:	f04f 0000 	mov.w	r0, #0
 8023658:	f380 8811 	msr	BASEPRI, r0
 802365c:	bc09      	pop	{r0, r3}
 802365e:	6819      	ldr	r1, [r3, #0]
 8023660:	6808      	ldr	r0, [r1, #0]
 8023662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023666:	f01e 0f10 	tst.w	lr, #16
 802366a:	bf08      	it	eq
 802366c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8023670:	f380 8809 	msr	PSP, r0
 8023674:	f3bf 8f6f 	isb	sy
 8023678:	4770      	bx	lr
 802367a:	bf00      	nop
 802367c:	f3af 8000 	nop.w

08023680 <pxCurrentTCBConst>:
 8023680:	20001d58 	.word	0x20001d58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8023684:	bf00      	nop
 8023686:	bf00      	nop

08023688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8023688:	b580      	push	{r7, lr}
 802368a:	b082      	sub	sp, #8
 802368c:	af00      	add	r7, sp, #0
	__asm volatile
 802368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023692:	f383 8811 	msr	BASEPRI, r3
 8023696:	f3bf 8f6f 	isb	sy
 802369a:	f3bf 8f4f 	dsb	sy
 802369e:	607b      	str	r3, [r7, #4]
}
 80236a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80236a2:	f7fe fd69 	bl	8022178 <xTaskIncrementTick>
 80236a6:	4603      	mov	r3, r0
 80236a8:	2b00      	cmp	r3, #0
 80236aa:	d003      	beq.n	80236b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80236ac:	4b06      	ldr	r3, [pc, #24]	; (80236c8 <xPortSysTickHandler+0x40>)
 80236ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80236b2:	601a      	str	r2, [r3, #0]
 80236b4:	2300      	movs	r3, #0
 80236b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80236b8:	683b      	ldr	r3, [r7, #0]
 80236ba:	f383 8811 	msr	BASEPRI, r3
}
 80236be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80236c0:	bf00      	nop
 80236c2:	3708      	adds	r7, #8
 80236c4:	46bd      	mov	sp, r7
 80236c6:	bd80      	pop	{r7, pc}
 80236c8:	e000ed04 	.word	0xe000ed04

080236cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80236cc:	b480      	push	{r7}
 80236ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80236d0:	4b0b      	ldr	r3, [pc, #44]	; (8023700 <vPortSetupTimerInterrupt+0x34>)
 80236d2:	2200      	movs	r2, #0
 80236d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80236d6:	4b0b      	ldr	r3, [pc, #44]	; (8023704 <vPortSetupTimerInterrupt+0x38>)
 80236d8:	2200      	movs	r2, #0
 80236da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80236dc:	4b0a      	ldr	r3, [pc, #40]	; (8023708 <vPortSetupTimerInterrupt+0x3c>)
 80236de:	681b      	ldr	r3, [r3, #0]
 80236e0:	4a0a      	ldr	r2, [pc, #40]	; (802370c <vPortSetupTimerInterrupt+0x40>)
 80236e2:	fba2 2303 	umull	r2, r3, r2, r3
 80236e6:	099b      	lsrs	r3, r3, #6
 80236e8:	4a09      	ldr	r2, [pc, #36]	; (8023710 <vPortSetupTimerInterrupt+0x44>)
 80236ea:	3b01      	subs	r3, #1
 80236ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80236ee:	4b04      	ldr	r3, [pc, #16]	; (8023700 <vPortSetupTimerInterrupt+0x34>)
 80236f0:	2207      	movs	r2, #7
 80236f2:	601a      	str	r2, [r3, #0]
}
 80236f4:	bf00      	nop
 80236f6:	46bd      	mov	sp, r7
 80236f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236fc:	4770      	bx	lr
 80236fe:	bf00      	nop
 8023700:	e000e010 	.word	0xe000e010
 8023704:	e000e018 	.word	0xe000e018
 8023708:	20000000 	.word	0x20000000
 802370c:	10624dd3 	.word	0x10624dd3
 8023710:	e000e014 	.word	0xe000e014

08023714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8023714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8023724 <vPortEnableVFP+0x10>
 8023718:	6801      	ldr	r1, [r0, #0]
 802371a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802371e:	6001      	str	r1, [r0, #0]
 8023720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8023722:	bf00      	nop
 8023724:	e000ed88 	.word	0xe000ed88

08023728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8023728:	b480      	push	{r7}
 802372a:	b085      	sub	sp, #20
 802372c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 802372e:	f3ef 8305 	mrs	r3, IPSR
 8023732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8023734:	68fb      	ldr	r3, [r7, #12]
 8023736:	2b0f      	cmp	r3, #15
 8023738:	d914      	bls.n	8023764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 802373a:	4a17      	ldr	r2, [pc, #92]	; (8023798 <vPortValidateInterruptPriority+0x70>)
 802373c:	68fb      	ldr	r3, [r7, #12]
 802373e:	4413      	add	r3, r2
 8023740:	781b      	ldrb	r3, [r3, #0]
 8023742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8023744:	4b15      	ldr	r3, [pc, #84]	; (802379c <vPortValidateInterruptPriority+0x74>)
 8023746:	781b      	ldrb	r3, [r3, #0]
 8023748:	7afa      	ldrb	r2, [r7, #11]
 802374a:	429a      	cmp	r2, r3
 802374c:	d20a      	bcs.n	8023764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 802374e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023752:	f383 8811 	msr	BASEPRI, r3
 8023756:	f3bf 8f6f 	isb	sy
 802375a:	f3bf 8f4f 	dsb	sy
 802375e:	607b      	str	r3, [r7, #4]
}
 8023760:	bf00      	nop
 8023762:	e7fe      	b.n	8023762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8023764:	4b0e      	ldr	r3, [pc, #56]	; (80237a0 <vPortValidateInterruptPriority+0x78>)
 8023766:	681b      	ldr	r3, [r3, #0]
 8023768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 802376c:	4b0d      	ldr	r3, [pc, #52]	; (80237a4 <vPortValidateInterruptPriority+0x7c>)
 802376e:	681b      	ldr	r3, [r3, #0]
 8023770:	429a      	cmp	r2, r3
 8023772:	d90a      	bls.n	802378a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8023774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023778:	f383 8811 	msr	BASEPRI, r3
 802377c:	f3bf 8f6f 	isb	sy
 8023780:	f3bf 8f4f 	dsb	sy
 8023784:	603b      	str	r3, [r7, #0]
}
 8023786:	bf00      	nop
 8023788:	e7fe      	b.n	8023788 <vPortValidateInterruptPriority+0x60>
	}
 802378a:	bf00      	nop
 802378c:	3714      	adds	r7, #20
 802378e:	46bd      	mov	sp, r7
 8023790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023794:	4770      	bx	lr
 8023796:	bf00      	nop
 8023798:	e000e3f0 	.word	0xe000e3f0
 802379c:	2000238c 	.word	0x2000238c
 80237a0:	e000ed0c 	.word	0xe000ed0c
 80237a4:	20002390 	.word	0x20002390

080237a8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80237a8:	b580      	push	{r7, lr}
 80237aa:	b084      	sub	sp, #16
 80237ac:	af00      	add	r7, sp, #0
 80237ae:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 80237b0:	2300      	movs	r3, #0
 80237b2:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 80237b4:	687b      	ldr	r3, [r7, #4]
 80237b6:	f003 0307 	and.w	r3, r3, #7
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d004      	beq.n	80237c8 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80237be:	687b      	ldr	r3, [r7, #4]
 80237c0:	f023 0307 	bic.w	r3, r3, #7
 80237c4:	3308      	adds	r3, #8
 80237c6:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 80237c8:	f7fe fc1a 	bl	8022000 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 80237cc:	4b16      	ldr	r3, [pc, #88]	; (8023828 <pvPortMalloc+0x80>)
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	2b00      	cmp	r3, #0
 80237d2:	d105      	bne.n	80237e0 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80237d4:	4b15      	ldr	r3, [pc, #84]	; (802382c <pvPortMalloc+0x84>)
 80237d6:	f023 0307 	bic.w	r3, r3, #7
 80237da:	461a      	mov	r2, r3
 80237dc:	4b12      	ldr	r3, [pc, #72]	; (8023828 <pvPortMalloc+0x80>)
 80237de:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80237e0:	4b13      	ldr	r3, [pc, #76]	; (8023830 <pvPortMalloc+0x88>)
 80237e2:	681a      	ldr	r2, [r3, #0]
 80237e4:	687b      	ldr	r3, [r7, #4]
 80237e6:	4413      	add	r3, r2
 80237e8:	f24b 1227 	movw	r2, #45351	; 0xb127
 80237ec:	4293      	cmp	r3, r2
 80237ee:	d813      	bhi.n	8023818 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 80237f0:	4b0f      	ldr	r3, [pc, #60]	; (8023830 <pvPortMalloc+0x88>)
 80237f2:	681a      	ldr	r2, [r3, #0]
 80237f4:	687b      	ldr	r3, [r7, #4]
 80237f6:	441a      	add	r2, r3
 80237f8:	4b0d      	ldr	r3, [pc, #52]	; (8023830 <pvPortMalloc+0x88>)
 80237fa:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 80237fc:	429a      	cmp	r2, r3
 80237fe:	d90b      	bls.n	8023818 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8023800:	4b09      	ldr	r3, [pc, #36]	; (8023828 <pvPortMalloc+0x80>)
 8023802:	681a      	ldr	r2, [r3, #0]
 8023804:	4b0a      	ldr	r3, [pc, #40]	; (8023830 <pvPortMalloc+0x88>)
 8023806:	681b      	ldr	r3, [r3, #0]
 8023808:	4413      	add	r3, r2
 802380a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 802380c:	4b08      	ldr	r3, [pc, #32]	; (8023830 <pvPortMalloc+0x88>)
 802380e:	681a      	ldr	r2, [r3, #0]
 8023810:	687b      	ldr	r3, [r7, #4]
 8023812:	4413      	add	r3, r2
 8023814:	4a06      	ldr	r2, [pc, #24]	; (8023830 <pvPortMalloc+0x88>)
 8023816:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8023818:	f7fe fc00 	bl	802201c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 802381c:	68fb      	ldr	r3, [r7, #12]
}
 802381e:	4618      	mov	r0, r3
 8023820:	3710      	adds	r7, #16
 8023822:	46bd      	mov	sp, r7
 8023824:	bd80      	pop	{r7, pc}
 8023826:	bf00      	nop
 8023828:	2000d4c8 	.word	0x2000d4c8
 802382c:	2000239c 	.word	0x2000239c
 8023830:	2000d4c4 	.word	0x2000d4c4

08023834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8023834:	b480      	push	{r7}
 8023836:	b085      	sub	sp, #20
 8023838:	af00      	add	r7, sp, #0
 802383a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 802383c:	687b      	ldr	r3, [r7, #4]
 802383e:	2b00      	cmp	r3, #0
 8023840:	d00a      	beq.n	8023858 <vPortFree+0x24>
	__asm volatile
 8023842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8023846:	f383 8811 	msr	BASEPRI, r3
 802384a:	f3bf 8f6f 	isb	sy
 802384e:	f3bf 8f4f 	dsb	sy
 8023852:	60fb      	str	r3, [r7, #12]
}
 8023854:	bf00      	nop
 8023856:	e7fe      	b.n	8023856 <vPortFree+0x22>
}
 8023858:	bf00      	nop
 802385a:	3714      	adds	r7, #20
 802385c:	46bd      	mov	sp, r7
 802385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023862:	4770      	bx	lr

08023864 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8023864:	b480      	push	{r7}
 8023866:	b083      	sub	sp, #12
 8023868:	af00      	add	r7, sp, #0
 802386a:	6078      	str	r0, [r7, #4]
 802386c:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 802386e:	683a      	ldr	r2, [r7, #0]
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	4293      	cmp	r3, r2
 8023874:	bf38      	it	cc
 8023876:	4613      	movcc	r3, r2
}
 8023878:	4618      	mov	r0, r3
 802387a:	370c      	adds	r7, #12
 802387c:	46bd      	mov	sp, r7
 802387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023882:	4770      	bx	lr

08023884 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8023884:	b480      	push	{r7}
 8023886:	b083      	sub	sp, #12
 8023888:	af00      	add	r7, sp, #0
 802388a:	6078      	str	r0, [r7, #4]
 802388c:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 802388e:	683a      	ldr	r2, [r7, #0]
 8023890:	687b      	ldr	r3, [r7, #4]
 8023892:	4293      	cmp	r3, r2
 8023894:	bf28      	it	cs
 8023896:	4613      	movcs	r3, r2
}
 8023898:	4618      	mov	r0, r3
 802389a:	370c      	adds	r7, #12
 802389c:	46bd      	mov	sp, r7
 802389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238a2:	4770      	bx	lr

080238a4 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 80238a4:	b480      	push	{r7}
 80238a6:	b083      	sub	sp, #12
 80238a8:	af00      	add	r7, sp, #0
 80238aa:	6078      	str	r0, [r7, #4]
 80238ac:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 80238ae:	687b      	ldr	r3, [r7, #4]
 80238b0:	683a      	ldr	r2, [r7, #0]
 80238b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80238b6:	6839      	ldr	r1, [r7, #0]
 80238b8:	fb01 f202 	mul.w	r2, r1, r2
 80238bc:	1a9b      	subs	r3, r3, r2
 80238be:	687a      	ldr	r2, [r7, #4]
 80238c0:	1ad3      	subs	r3, r2, r3
}
 80238c2:	4618      	mov	r0, r3
 80238c4:	370c      	adds	r7, #12
 80238c6:	46bd      	mov	sp, r7
 80238c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80238cc:	4770      	bx	lr

080238ce <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 80238ce:	b580      	push	{r7, lr}
 80238d0:	b082      	sub	sp, #8
 80238d2:	af00      	add	r7, sp, #0
 80238d4:	6078      	str	r0, [r7, #4]
 80238d6:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 80238d8:	687a      	ldr	r2, [r7, #4]
 80238da:	683b      	ldr	r3, [r7, #0]
 80238dc:	4413      	add	r3, r2
 80238de:	3b01      	subs	r3, #1
 80238e0:	6839      	ldr	r1, [r7, #0]
 80238e2:	4618      	mov	r0, r3
 80238e4:	f7ff ffde 	bl	80238a4 <lfs_aligndown>
 80238e8:	4603      	mov	r3, r0
}
 80238ea:	4618      	mov	r0, r3
 80238ec:	3708      	adds	r7, #8
 80238ee:	46bd      	mov	sp, r7
 80238f0:	bd80      	pop	{r7, pc}

080238f2 <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 80238f2:	b480      	push	{r7}
 80238f4:	b083      	sub	sp, #12
 80238f6:	af00      	add	r7, sp, #0
 80238f8:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 80238fa:	687b      	ldr	r3, [r7, #4]
 80238fc:	3b01      	subs	r3, #1
 80238fe:	fab3 f383 	clz	r3, r3
 8023902:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 8023906:	4618      	mov	r0, r3
 8023908:	370c      	adds	r7, #12
 802390a:	46bd      	mov	sp, r7
 802390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023910:	4770      	bx	lr

08023912 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8023912:	b480      	push	{r7}
 8023914:	b083      	sub	sp, #12
 8023916:	af00      	add	r7, sp, #0
 8023918:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 802391a:	687b      	ldr	r3, [r7, #4]
 802391c:	fa93 f3a3 	rbit	r3, r3
 8023920:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8023924:	4618      	mov	r0, r3
 8023926:	370c      	adds	r7, #12
 8023928:	46bd      	mov	sp, r7
 802392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802392e:	4770      	bx	lr

08023930 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8023930:	b580      	push	{r7, lr}
 8023932:	b082      	sub	sp, #8
 8023934:	af00      	add	r7, sp, #0
 8023936:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 8023938:	6878      	ldr	r0, [r7, #4]
 802393a:	f7ed f9d5 	bl	8010ce8 <__popcountsi2>
 802393e:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 8023940:	4618      	mov	r0, r3
 8023942:	3708      	adds	r7, #8
 8023944:	46bd      	mov	sp, r7
 8023946:	bd80      	pop	{r7, pc}

08023948 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 8023948:	b480      	push	{r7}
 802394a:	b083      	sub	sp, #12
 802394c:	af00      	add	r7, sp, #0
 802394e:	6078      	str	r0, [r7, #4]
 8023950:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 8023952:	687a      	ldr	r2, [r7, #4]
 8023954:	683b      	ldr	r3, [r7, #0]
 8023956:	1ad3      	subs	r3, r2, r3
}
 8023958:	4618      	mov	r0, r3
 802395a:	370c      	adds	r7, #12
 802395c:	46bd      	mov	sp, r7
 802395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023962:	4770      	bx	lr

08023964 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 8023964:	b480      	push	{r7}
 8023966:	b083      	sub	sp, #12
 8023968:	af00      	add	r7, sp, #0
 802396a:	6078      	str	r0, [r7, #4]
#if (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__)
    return a;
 802396c:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 802396e:	4618      	mov	r0, r3
 8023970:	370c      	adds	r7, #12
 8023972:	46bd      	mov	sp, r7
 8023974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023978:	4770      	bx	lr

0802397a <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 802397a:	b580      	push	{r7, lr}
 802397c:	b082      	sub	sp, #8
 802397e:	af00      	add	r7, sp, #0
 8023980:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 8023982:	6878      	ldr	r0, [r7, #4]
 8023984:	f7ff ffee 	bl	8023964 <lfs_fromle32>
 8023988:	4603      	mov	r3, r0
}
 802398a:	4618      	mov	r0, r3
 802398c:	3708      	adds	r7, #8
 802398e:	46bd      	mov	sp, r7
 8023990:	bd80      	pop	{r7, pc}

08023992 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 8023992:	b480      	push	{r7}
 8023994:	b083      	sub	sp, #12
 8023996:	af00      	add	r7, sp, #0
 8023998:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 802399a:	687b      	ldr	r3, [r7, #4]
 802399c:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 802399e:	4618      	mov	r0, r3
 80239a0:	370c      	adds	r7, #12
 80239a2:	46bd      	mov	sp, r7
 80239a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80239a8:	4770      	bx	lr

080239aa <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 80239aa:	b580      	push	{r7, lr}
 80239ac:	b082      	sub	sp, #8
 80239ae:	af00      	add	r7, sp, #0
 80239b0:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 80239b2:	6878      	ldr	r0, [r7, #4]
 80239b4:	f7ff ffed 	bl	8023992 <lfs_frombe32>
 80239b8:	4603      	mov	r3, r0
}
 80239ba:	4618      	mov	r0, r3
 80239bc:	3708      	adds	r7, #8
 80239be:	46bd      	mov	sp, r7
 80239c0:	bd80      	pop	{r7, pc}

080239c2 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 80239c2:	b580      	push	{r7, lr}
 80239c4:	b082      	sub	sp, #8
 80239c6:	af00      	add	r7, sp, #0
 80239c8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 80239ca:	6878      	ldr	r0, [r7, #4]
 80239cc:	f008 fed2 	bl	802c774 <malloc>
 80239d0:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 80239d2:	4618      	mov	r0, r3
 80239d4:	3708      	adds	r7, #8
 80239d6:	46bd      	mov	sp, r7
 80239d8:	bd80      	pop	{r7, pc}

080239da <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80239da:	b580      	push	{r7, lr}
 80239dc:	b082      	sub	sp, #8
 80239de:	af00      	add	r7, sp, #0
 80239e0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80239e2:	6878      	ldr	r0, [r7, #4]
 80239e4:	f008 fece 	bl	802c784 <free>
#else
    (void)p;
#endif
}
 80239e8:	bf00      	nop
 80239ea:	3708      	adds	r7, #8
 80239ec:	46bd      	mov	sp, r7
 80239ee:	bd80      	pop	{r7, pc}

080239f0 <lfs_cache_drop>:
};


/// Caching block device operations ///

static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 80239f0:	b480      	push	{r7}
 80239f2:	b083      	sub	sp, #12
 80239f4:	af00      	add	r7, sp, #0
 80239f6:	6078      	str	r0, [r7, #4]
 80239f8:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 80239fa:	683b      	ldr	r3, [r7, #0]
 80239fc:	f04f 32ff 	mov.w	r2, #4294967295
 8023a00:	601a      	str	r2, [r3, #0]
}
 8023a02:	bf00      	nop
 8023a04:	370c      	adds	r7, #12
 8023a06:	46bd      	mov	sp, r7
 8023a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023a0c:	4770      	bx	lr

08023a0e <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8023a0e:	b580      	push	{r7, lr}
 8023a10:	b082      	sub	sp, #8
 8023a12:	af00      	add	r7, sp, #0
 8023a14:	6078      	str	r0, [r7, #4]
 8023a16:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 8023a18:	683b      	ldr	r3, [r7, #0]
 8023a1a:	68d8      	ldr	r0, [r3, #12]
 8023a1c:	687b      	ldr	r3, [r7, #4]
 8023a1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a22:	461a      	mov	r2, r3
 8023a24:	21ff      	movs	r1, #255	; 0xff
 8023a26:	f00a f841 	bl	802daac <memset>
    pcache->block = LFS_BLOCK_NULL;
 8023a2a:	683b      	ldr	r3, [r7, #0]
 8023a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8023a30:	601a      	str	r2, [r3, #0]
}
 8023a32:	bf00      	nop
 8023a34:	3708      	adds	r7, #8
 8023a36:	46bd      	mov	sp, r7
 8023a38:	bd80      	pop	{r7, pc}
	...

08023a3c <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 8023a3c:	b5b0      	push	{r4, r5, r7, lr}
 8023a3e:	b08a      	sub	sp, #40	; 0x28
 8023a40:	af02      	add	r7, sp, #8
 8023a42:	60f8      	str	r0, [r7, #12]
 8023a44:	60b9      	str	r1, [r7, #8]
 8023a46:	607a      	str	r2, [r7, #4]
 8023a48:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8023a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023a4c:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 8023a4e:	68fb      	ldr	r3, [r7, #12]
 8023a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a52:	6a1b      	ldr	r3, [r3, #32]
 8023a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023a56:	429a      	cmp	r2, r3
 8023a58:	d208      	bcs.n	8023a6c <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 8023a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023a5e:	441a      	add	r2, r3
 8023a60:	68fb      	ldr	r3, [r7, #12]
 8023a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023a64:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 8023a66:	429a      	cmp	r2, r3
 8023a68:	f240 811b 	bls.w	8023ca2 <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 8023a6c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023a70:	e11c      	b.n	8023cac <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8023a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023a74:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 8023a76:	68bb      	ldr	r3, [r7, #8]
 8023a78:	2b00      	cmp	r3, #0
 8023a7a:	d03f      	beq.n	8023afc <lfs_bd_read+0xc0>
 8023a7c:	68bb      	ldr	r3, [r7, #8]
 8023a7e:	681b      	ldr	r3, [r3, #0]
 8023a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023a82:	429a      	cmp	r2, r3
 8023a84:	d13a      	bne.n	8023afc <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 8023a86:	68bb      	ldr	r3, [r7, #8]
 8023a88:	685a      	ldr	r2, [r3, #4]
 8023a8a:	68bb      	ldr	r3, [r7, #8]
 8023a8c:	689b      	ldr	r3, [r3, #8]
 8023a8e:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 8023a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023a92:	429a      	cmp	r2, r3
 8023a94:	d232      	bcs.n	8023afc <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 8023a96:	68bb      	ldr	r3, [r7, #8]
 8023a98:	685b      	ldr	r3, [r3, #4]
 8023a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023a9c:	429a      	cmp	r2, r3
 8023a9e:	d324      	bcc.n	8023aea <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8023aa0:	68bb      	ldr	r3, [r7, #8]
 8023aa2:	689a      	ldr	r2, [r3, #8]
 8023aa4:	68bb      	ldr	r3, [r7, #8]
 8023aa6:	6859      	ldr	r1, [r3, #4]
 8023aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023aaa:	1acb      	subs	r3, r1, r3
 8023aac:	4413      	add	r3, r2
 8023aae:	4619      	mov	r1, r3
 8023ab0:	69b8      	ldr	r0, [r7, #24]
 8023ab2:	f7ff fee7 	bl	8023884 <lfs_min>
 8023ab6:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8023ab8:	68bb      	ldr	r3, [r7, #8]
 8023aba:	68da      	ldr	r2, [r3, #12]
 8023abc:	68bb      	ldr	r3, [r7, #8]
 8023abe:	685b      	ldr	r3, [r3, #4]
 8023ac0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023ac2:	1acb      	subs	r3, r1, r3
 8023ac4:	4413      	add	r3, r2
 8023ac6:	69ba      	ldr	r2, [r7, #24]
 8023ac8:	4619      	mov	r1, r3
 8023aca:	69f8      	ldr	r0, [r7, #28]
 8023acc:	f00a f9c3 	bl	802de56 <memcpy>

                data += diff;
 8023ad0:	69fa      	ldr	r2, [r7, #28]
 8023ad2:	69bb      	ldr	r3, [r7, #24]
 8023ad4:	4413      	add	r3, r2
 8023ad6:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023ad8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023ada:	69bb      	ldr	r3, [r7, #24]
 8023adc:	4413      	add	r3, r2
 8023ade:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023ae0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023ae2:	69bb      	ldr	r3, [r7, #24]
 8023ae4:	1ad3      	subs	r3, r2, r3
 8023ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023ae8:	e0db      	b.n	8023ca2 <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8023aea:	68bb      	ldr	r3, [r7, #8]
 8023aec:	685a      	ldr	r2, [r3, #4]
 8023aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023af0:	1ad3      	subs	r3, r2, r3
 8023af2:	4619      	mov	r1, r3
 8023af4:	69b8      	ldr	r0, [r7, #24]
 8023af6:	f7ff fec5 	bl	8023884 <lfs_min>
 8023afa:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8023afc:	687b      	ldr	r3, [r7, #4]
 8023afe:	681b      	ldr	r3, [r3, #0]
 8023b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023b02:	429a      	cmp	r2, r3
 8023b04:	d13a      	bne.n	8023b7c <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 8023b06:	687b      	ldr	r3, [r7, #4]
 8023b08:	685a      	ldr	r2, [r3, #4]
 8023b0a:	687b      	ldr	r3, [r7, #4]
 8023b0c:	689b      	ldr	r3, [r3, #8]
 8023b0e:	4413      	add	r3, r2
        if (block == rcache->block &&
 8023b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b12:	429a      	cmp	r2, r3
 8023b14:	d232      	bcs.n	8023b7c <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 8023b16:	687b      	ldr	r3, [r7, #4]
 8023b18:	685b      	ldr	r3, [r3, #4]
 8023b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b1c:	429a      	cmp	r2, r3
 8023b1e:	d324      	bcc.n	8023b6a <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8023b20:	687b      	ldr	r3, [r7, #4]
 8023b22:	689a      	ldr	r2, [r3, #8]
 8023b24:	687b      	ldr	r3, [r7, #4]
 8023b26:	6859      	ldr	r1, [r3, #4]
 8023b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023b2a:	1acb      	subs	r3, r1, r3
 8023b2c:	4413      	add	r3, r2
 8023b2e:	4619      	mov	r1, r3
 8023b30:	69b8      	ldr	r0, [r7, #24]
 8023b32:	f7ff fea7 	bl	8023884 <lfs_min>
 8023b36:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8023b38:	687b      	ldr	r3, [r7, #4]
 8023b3a:	68da      	ldr	r2, [r3, #12]
 8023b3c:	687b      	ldr	r3, [r7, #4]
 8023b3e:	685b      	ldr	r3, [r3, #4]
 8023b40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8023b42:	1acb      	subs	r3, r1, r3
 8023b44:	4413      	add	r3, r2
 8023b46:	69ba      	ldr	r2, [r7, #24]
 8023b48:	4619      	mov	r1, r3
 8023b4a:	69f8      	ldr	r0, [r7, #28]
 8023b4c:	f00a f983 	bl	802de56 <memcpy>

                data += diff;
 8023b50:	69fa      	ldr	r2, [r7, #28]
 8023b52:	69bb      	ldr	r3, [r7, #24]
 8023b54:	4413      	add	r3, r2
 8023b56:	61fb      	str	r3, [r7, #28]
                off += diff;
 8023b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023b5a:	69bb      	ldr	r3, [r7, #24]
 8023b5c:	4413      	add	r3, r2
 8023b5e:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8023b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023b62:	69bb      	ldr	r3, [r7, #24]
 8023b64:	1ad3      	subs	r3, r2, r3
 8023b66:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8023b68:	e09b      	b.n	8023ca2 <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8023b6a:	687b      	ldr	r3, [r7, #4]
 8023b6c:	685a      	ldr	r2, [r3, #4]
 8023b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023b70:	1ad3      	subs	r3, r2, r3
 8023b72:	4619      	mov	r1, r3
 8023b74:	69b8      	ldr	r0, [r7, #24]
 8023b76:	f7ff fe85 	bl	8023884 <lfs_min>
 8023b7a:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023b7e:	683b      	ldr	r3, [r7, #0]
 8023b80:	429a      	cmp	r2, r3
 8023b82:	d336      	bcc.n	8023bf2 <lfs_bd_read+0x1b6>
 8023b84:	68fb      	ldr	r3, [r7, #12]
 8023b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b88:	695a      	ldr	r2, [r3, #20]
 8023b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8023b90:	fb01 f202 	mul.w	r2, r1, r2
 8023b94:	1a9b      	subs	r3, r3, r2
 8023b96:	2b00      	cmp	r3, #0
 8023b98:	d12b      	bne.n	8023bf2 <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 8023b9a:	68fb      	ldr	r3, [r7, #12]
 8023b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023b9e:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 8023ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023ba2:	429a      	cmp	r2, r3
 8023ba4:	d325      	bcc.n	8023bf2 <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 8023ba6:	68fb      	ldr	r3, [r7, #12]
 8023ba8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023baa:	695b      	ldr	r3, [r3, #20]
 8023bac:	4619      	mov	r1, r3
 8023bae:	69b8      	ldr	r0, [r7, #24]
 8023bb0:	f7ff fe78 	bl	80238a4 <lfs_aligndown>
 8023bb4:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 8023bb6:	68fb      	ldr	r3, [r7, #12]
 8023bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bba:	685c      	ldr	r4, [r3, #4]
 8023bbc:	68fb      	ldr	r3, [r7, #12]
 8023bbe:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023bc0:	69bb      	ldr	r3, [r7, #24]
 8023bc2:	9300      	str	r3, [sp, #0]
 8023bc4:	69fb      	ldr	r3, [r7, #28]
 8023bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023bc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023bca:	47a0      	blx	r4
 8023bcc:	6178      	str	r0, [r7, #20]
            if (err) {
 8023bce:	697b      	ldr	r3, [r7, #20]
 8023bd0:	2b00      	cmp	r3, #0
 8023bd2:	d001      	beq.n	8023bd8 <lfs_bd_read+0x19c>
                return err;
 8023bd4:	697b      	ldr	r3, [r7, #20]
 8023bd6:	e069      	b.n	8023cac <lfs_bd_read+0x270>
            }

            data += diff;
 8023bd8:	69fa      	ldr	r2, [r7, #28]
 8023bda:	69bb      	ldr	r3, [r7, #24]
 8023bdc:	4413      	add	r3, r2
 8023bde:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023be0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023be2:	69bb      	ldr	r3, [r7, #24]
 8023be4:	4413      	add	r3, r2
 8023be6:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 8023be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023bea:	69bb      	ldr	r3, [r7, #24]
 8023bec:	1ad3      	subs	r3, r2, r3
 8023bee:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 8023bf0:	e057      	b.n	8023ca2 <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 8023bf2:	68fb      	ldr	r3, [r7, #12]
 8023bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023bf6:	6a1b      	ldr	r3, [r3, #32]
 8023bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023bfa:	429a      	cmp	r2, r3
 8023bfc:	d305      	bcc.n	8023c0a <lfs_bd_read+0x1ce>
 8023bfe:	4b2d      	ldr	r3, [pc, #180]	; (8023cb4 <lfs_bd_read+0x278>)
 8023c00:	4a2d      	ldr	r2, [pc, #180]	; (8023cb8 <lfs_bd_read+0x27c>)
 8023c02:	216b      	movs	r1, #107	; 0x6b
 8023c04:	482d      	ldr	r0, [pc, #180]	; (8023cbc <lfs_bd_read+0x280>)
 8023c06:	f008 fd81 	bl	802c70c <__assert_func>
        rcache->block = block;
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023c0e:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8023c10:	68fb      	ldr	r3, [r7, #12]
 8023c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c14:	695b      	ldr	r3, [r3, #20]
 8023c16:	4619      	mov	r1, r3
 8023c18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023c1a:	f7ff fe43 	bl	80238a4 <lfs_aligndown>
 8023c1e:	4602      	mov	r2, r0
 8023c20:	687b      	ldr	r3, [r7, #4]
 8023c22:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 8023c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023c26:	683b      	ldr	r3, [r7, #0]
 8023c28:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8023c2a:	68fb      	ldr	r3, [r7, #12]
 8023c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c2e:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 8023c30:	4619      	mov	r1, r3
 8023c32:	4610      	mov	r0, r2
 8023c34:	f7ff fe4b 	bl	80238ce <lfs_alignup>
 8023c38:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8023c3a:	68fb      	ldr	r3, [r7, #12]
 8023c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c3e:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 8023c40:	4619      	mov	r1, r3
 8023c42:	4610      	mov	r0, r2
 8023c44:	f7ff fe1e 	bl	8023884 <lfs_min>
 8023c48:	4602      	mov	r2, r0
                - rcache->off,
 8023c4a:	687b      	ldr	r3, [r7, #4]
 8023c4c:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8023c4e:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8023c50:	68fb      	ldr	r3, [r7, #12]
 8023c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 8023c56:	4619      	mov	r1, r3
 8023c58:	4610      	mov	r0, r2
 8023c5a:	f7ff fe13 	bl	8023884 <lfs_min>
 8023c5e:	4602      	mov	r2, r0
 8023c60:	687b      	ldr	r3, [r7, #4]
 8023c62:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023c64:	68fb      	ldr	r3, [r7, #12]
 8023c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023c68:	685c      	ldr	r4, [r3, #4]
 8023c6a:	68fb      	ldr	r3, [r7, #12]
 8023c6c:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	6819      	ldr	r1, [r3, #0]
 8023c72:	687b      	ldr	r3, [r7, #4]
 8023c74:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8023c76:	687b      	ldr	r3, [r7, #4]
 8023c78:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8023c7a:	687b      	ldr	r3, [r7, #4]
 8023c7c:	689b      	ldr	r3, [r3, #8]
 8023c7e:	9300      	str	r3, [sp, #0]
 8023c80:	462b      	mov	r3, r5
 8023c82:	47a0      	blx	r4
 8023c84:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 8023c86:	693b      	ldr	r3, [r7, #16]
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	dd05      	ble.n	8023c98 <lfs_bd_read+0x25c>
 8023c8c:	4b0c      	ldr	r3, [pc, #48]	; (8023cc0 <lfs_bd_read+0x284>)
 8023c8e:	4a0a      	ldr	r2, [pc, #40]	; (8023cb8 <lfs_bd_read+0x27c>)
 8023c90:	2176      	movs	r1, #118	; 0x76
 8023c92:	480a      	ldr	r0, [pc, #40]	; (8023cbc <lfs_bd_read+0x280>)
 8023c94:	f008 fd3a 	bl	802c70c <__assert_func>
        if (err) {
 8023c98:	693b      	ldr	r3, [r7, #16]
 8023c9a:	2b00      	cmp	r3, #0
 8023c9c:	d001      	beq.n	8023ca2 <lfs_bd_read+0x266>
            return err;
 8023c9e:	693b      	ldr	r3, [r7, #16]
 8023ca0:	e004      	b.n	8023cac <lfs_bd_read+0x270>
    while (size > 0) {
 8023ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023ca4:	2b00      	cmp	r3, #0
 8023ca6:	f47f aee4 	bne.w	8023a72 <lfs_bd_read+0x36>
        }
    }

    return 0;
 8023caa:	2300      	movs	r3, #0
}
 8023cac:	4618      	mov	r0, r3
 8023cae:	3720      	adds	r7, #32
 8023cb0:	46bd      	mov	sp, r7
 8023cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8023cb4:	080337e0 	.word	0x080337e0
 8023cb8:	08034ab4 	.word	0x08034ab4
 8023cbc:	08033800 	.word	0x08033800
 8023cc0:	08033834 	.word	0x08033834

08023cc4 <lfs_bd_cmp>:

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023cc4:	b580      	push	{r7, lr}
 8023cc6:	b08e      	sub	sp, #56	; 0x38
 8023cc8:	af04      	add	r7, sp, #16
 8023cca:	60f8      	str	r0, [r7, #12]
 8023ccc:	60b9      	str	r1, [r7, #8]
 8023cce:	607a      	str	r2, [r7, #4]
 8023cd0:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8023cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023cd4:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 8023cd6:	2300      	movs	r3, #0
 8023cd8:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 8023cda:	2300      	movs	r3, #0
 8023cdc:	627b      	str	r3, [r7, #36]	; 0x24
 8023cde:	e039      	b.n	8023d54 <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 8023ce0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023ce4:	1ad3      	subs	r3, r2, r3
 8023ce6:	2108      	movs	r1, #8
 8023ce8:	4618      	mov	r0, r3
 8023cea:	f7ff fdcb 	bl	8023884 <lfs_min>
 8023cee:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 8023cf0:	683a      	ldr	r2, [r7, #0]
 8023cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023cf4:	1ad1      	subs	r1, r2, r3
 8023cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023cfa:	4413      	add	r3, r2
 8023cfc:	69fa      	ldr	r2, [r7, #28]
 8023cfe:	9203      	str	r2, [sp, #12]
 8023d00:	f107 0210 	add.w	r2, r7, #16
 8023d04:	9202      	str	r2, [sp, #8]
 8023d06:	9301      	str	r3, [sp, #4]
 8023d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023d0a:	9300      	str	r3, [sp, #0]
 8023d0c:	460b      	mov	r3, r1
 8023d0e:	687a      	ldr	r2, [r7, #4]
 8023d10:	68b9      	ldr	r1, [r7, #8]
 8023d12:	68f8      	ldr	r0, [r7, #12]
 8023d14:	f7ff fe92 	bl	8023a3c <lfs_bd_read>
 8023d18:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 8023d1a:	69bb      	ldr	r3, [r7, #24]
 8023d1c:	2b00      	cmp	r3, #0
 8023d1e:	d001      	beq.n	8023d24 <lfs_bd_cmp+0x60>
            return res;
 8023d20:	69bb      	ldr	r3, [r7, #24]
 8023d22:	e01c      	b.n	8023d5e <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 8023d24:	6a3a      	ldr	r2, [r7, #32]
 8023d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023d28:	18d1      	adds	r1, r2, r3
 8023d2a:	f107 0310 	add.w	r3, r7, #16
 8023d2e:	69fa      	ldr	r2, [r7, #28]
 8023d30:	4618      	mov	r0, r3
 8023d32:	f009 fe91 	bl	802da58 <memcmp>
 8023d36:	61b8      	str	r0, [r7, #24]
        if (res) {
 8023d38:	69bb      	ldr	r3, [r7, #24]
 8023d3a:	2b00      	cmp	r3, #0
 8023d3c:	d006      	beq.n	8023d4c <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 8023d3e:	69bb      	ldr	r3, [r7, #24]
 8023d40:	2b00      	cmp	r3, #0
 8023d42:	da01      	bge.n	8023d48 <lfs_bd_cmp+0x84>
 8023d44:	2301      	movs	r3, #1
 8023d46:	e00a      	b.n	8023d5e <lfs_bd_cmp+0x9a>
 8023d48:	2302      	movs	r3, #2
 8023d4a:	e008      	b.n	8023d5e <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 8023d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023d4e:	69fb      	ldr	r3, [r7, #28]
 8023d50:	4413      	add	r3, r2
 8023d52:	627b      	str	r3, [r7, #36]	; 0x24
 8023d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8023d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023d58:	429a      	cmp	r2, r3
 8023d5a:	d3c1      	bcc.n	8023ce0 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 8023d5c:	2300      	movs	r3, #0
}
 8023d5e:	4618      	mov	r0, r3
 8023d60:	3728      	adds	r7, #40	; 0x28
 8023d62:	46bd      	mov	sp, r7
 8023d64:	bd80      	pop	{r7, pc}
	...

08023d68 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023d68:	b5b0      	push	{r4, r5, r7, lr}
 8023d6a:	b08c      	sub	sp, #48	; 0x30
 8023d6c:	af04      	add	r7, sp, #16
 8023d6e:	60f8      	str	r0, [r7, #12]
 8023d70:	60b9      	str	r1, [r7, #8]
 8023d72:	607a      	str	r2, [r7, #4]
 8023d74:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8023d76:	68bb      	ldr	r3, [r7, #8]
 8023d78:	681b      	ldr	r3, [r3, #0]
 8023d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023d7e:	d061      	beq.n	8023e44 <lfs_bd_flush+0xdc>
 8023d80:	68bb      	ldr	r3, [r7, #8]
 8023d82:	681b      	ldr	r3, [r3, #0]
 8023d84:	f113 0f02 	cmn.w	r3, #2
 8023d88:	d05c      	beq.n	8023e44 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 8023d8a:	68bb      	ldr	r3, [r7, #8]
 8023d8c:	681a      	ldr	r2, [r3, #0]
 8023d8e:	68fb      	ldr	r3, [r7, #12]
 8023d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023d92:	6a1b      	ldr	r3, [r3, #32]
 8023d94:	429a      	cmp	r2, r3
 8023d96:	d305      	bcc.n	8023da4 <lfs_bd_flush+0x3c>
 8023d98:	4b2d      	ldr	r3, [pc, #180]	; (8023e50 <lfs_bd_flush+0xe8>)
 8023d9a:	4a2e      	ldr	r2, [pc, #184]	; (8023e54 <lfs_bd_flush+0xec>)
 8023d9c:	219e      	movs	r1, #158	; 0x9e
 8023d9e:	482e      	ldr	r0, [pc, #184]	; (8023e58 <lfs_bd_flush+0xf0>)
 8023da0:	f008 fcb4 	bl	802c70c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8023da4:	68bb      	ldr	r3, [r7, #8]
 8023da6:	689a      	ldr	r2, [r3, #8]
 8023da8:	68fb      	ldr	r3, [r7, #12]
 8023daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023dac:	699b      	ldr	r3, [r3, #24]
 8023dae:	4619      	mov	r1, r3
 8023db0:	4610      	mov	r0, r2
 8023db2:	f7ff fd8c 	bl	80238ce <lfs_alignup>
 8023db6:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023db8:	68fb      	ldr	r3, [r7, #12]
 8023dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023dbc:	689c      	ldr	r4, [r3, #8]
 8023dbe:	68fb      	ldr	r3, [r7, #12]
 8023dc0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8023dc2:	68bb      	ldr	r3, [r7, #8]
 8023dc4:	6819      	ldr	r1, [r3, #0]
 8023dc6:	68bb      	ldr	r3, [r7, #8]
 8023dc8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 8023dca:	68bb      	ldr	r3, [r7, #8]
 8023dcc:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8023dce:	69fb      	ldr	r3, [r7, #28]
 8023dd0:	9300      	str	r3, [sp, #0]
 8023dd2:	462b      	mov	r3, r5
 8023dd4:	47a0      	blx	r4
 8023dd6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 8023dd8:	69bb      	ldr	r3, [r7, #24]
 8023dda:	2b00      	cmp	r3, #0
 8023ddc:	dd05      	ble.n	8023dea <lfs_bd_flush+0x82>
 8023dde:	4b1f      	ldr	r3, [pc, #124]	; (8023e5c <lfs_bd_flush+0xf4>)
 8023de0:	4a1c      	ldr	r2, [pc, #112]	; (8023e54 <lfs_bd_flush+0xec>)
 8023de2:	21a2      	movs	r1, #162	; 0xa2
 8023de4:	481c      	ldr	r0, [pc, #112]	; (8023e58 <lfs_bd_flush+0xf0>)
 8023de6:	f008 fc91 	bl	802c70c <__assert_func>
        if (err) {
 8023dea:	69bb      	ldr	r3, [r7, #24]
 8023dec:	2b00      	cmp	r3, #0
 8023dee:	d001      	beq.n	8023df4 <lfs_bd_flush+0x8c>
            return err;
 8023df0:	69bb      	ldr	r3, [r7, #24]
 8023df2:	e028      	b.n	8023e46 <lfs_bd_flush+0xde>
        }

        if (validate) {
 8023df4:	78fb      	ldrb	r3, [r7, #3]
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	d020      	beq.n	8023e3c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 8023dfa:	6879      	ldr	r1, [r7, #4]
 8023dfc:	68f8      	ldr	r0, [r7, #12]
 8023dfe:	f7ff fdf7 	bl	80239f0 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 8023e02:	68bb      	ldr	r3, [r7, #8]
 8023e04:	681b      	ldr	r3, [r3, #0]
 8023e06:	68ba      	ldr	r2, [r7, #8]
 8023e08:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 8023e0a:	68b9      	ldr	r1, [r7, #8]
 8023e0c:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 8023e0e:	69f8      	ldr	r0, [r7, #28]
 8023e10:	9003      	str	r0, [sp, #12]
 8023e12:	9102      	str	r1, [sp, #8]
 8023e14:	9201      	str	r2, [sp, #4]
 8023e16:	9300      	str	r3, [sp, #0]
 8023e18:	69fb      	ldr	r3, [r7, #28]
 8023e1a:	687a      	ldr	r2, [r7, #4]
 8023e1c:	2100      	movs	r1, #0
 8023e1e:	68f8      	ldr	r0, [r7, #12]
 8023e20:	f7ff ff50 	bl	8023cc4 <lfs_bd_cmp>
 8023e24:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8023e26:	697b      	ldr	r3, [r7, #20]
 8023e28:	2b00      	cmp	r3, #0
 8023e2a:	da01      	bge.n	8023e30 <lfs_bd_flush+0xc8>
                return res;
 8023e2c:	697b      	ldr	r3, [r7, #20]
 8023e2e:	e00a      	b.n	8023e46 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8023e30:	697b      	ldr	r3, [r7, #20]
 8023e32:	2b00      	cmp	r3, #0
 8023e34:	d002      	beq.n	8023e3c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8023e36:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8023e3a:	e004      	b.n	8023e46 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 8023e3c:	68b9      	ldr	r1, [r7, #8]
 8023e3e:	68f8      	ldr	r0, [r7, #12]
 8023e40:	f7ff fde5 	bl	8023a0e <lfs_cache_zero>
    }

    return 0;
 8023e44:	2300      	movs	r3, #0
}
 8023e46:	4618      	mov	r0, r3
 8023e48:	3720      	adds	r7, #32
 8023e4a:	46bd      	mov	sp, r7
 8023e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8023e4e:	bf00      	nop
 8023e50:	08033840 	.word	0x08033840
 8023e54:	08034ac0 	.word	0x08034ac0
 8023e58:	08033800 	.word	0x08033800
 8023e5c:	08033834 	.word	0x08033834

08023e60 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8023e60:	b580      	push	{r7, lr}
 8023e62:	b086      	sub	sp, #24
 8023e64:	af00      	add	r7, sp, #0
 8023e66:	60f8      	str	r0, [r7, #12]
 8023e68:	60b9      	str	r1, [r7, #8]
 8023e6a:	607a      	str	r2, [r7, #4]
 8023e6c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 8023e6e:	6879      	ldr	r1, [r7, #4]
 8023e70:	68f8      	ldr	r0, [r7, #12]
 8023e72:	f7ff fdbd 	bl	80239f0 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023e76:	78fb      	ldrb	r3, [r7, #3]
 8023e78:	687a      	ldr	r2, [r7, #4]
 8023e7a:	68b9      	ldr	r1, [r7, #8]
 8023e7c:	68f8      	ldr	r0, [r7, #12]
 8023e7e:	f7ff ff73 	bl	8023d68 <lfs_bd_flush>
 8023e82:	6178      	str	r0, [r7, #20]
    if (err) {
 8023e84:	697b      	ldr	r3, [r7, #20]
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d001      	beq.n	8023e8e <lfs_bd_sync+0x2e>
        return err;
 8023e8a:	697b      	ldr	r3, [r7, #20]
 8023e8c:	e011      	b.n	8023eb2 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 8023e8e:	68fb      	ldr	r3, [r7, #12]
 8023e90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023e92:	691b      	ldr	r3, [r3, #16]
 8023e94:	68fa      	ldr	r2, [r7, #12]
 8023e96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8023e98:	4610      	mov	r0, r2
 8023e9a:	4798      	blx	r3
 8023e9c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 8023e9e:	697b      	ldr	r3, [r7, #20]
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	dd05      	ble.n	8023eb0 <lfs_bd_sync+0x50>
 8023ea4:	4b05      	ldr	r3, [pc, #20]	; (8023ebc <lfs_bd_sync+0x5c>)
 8023ea6:	4a06      	ldr	r2, [pc, #24]	; (8023ec0 <lfs_bd_sync+0x60>)
 8023ea8:	21c8      	movs	r1, #200	; 0xc8
 8023eaa:	4806      	ldr	r0, [pc, #24]	; (8023ec4 <lfs_bd_sync+0x64>)
 8023eac:	f008 fc2e 	bl	802c70c <__assert_func>
    return err;
 8023eb0:	697b      	ldr	r3, [r7, #20]
}
 8023eb2:	4618      	mov	r0, r3
 8023eb4:	3718      	adds	r7, #24
 8023eb6:	46bd      	mov	sp, r7
 8023eb8:	bd80      	pop	{r7, pc}
 8023eba:	bf00      	nop
 8023ebc:	08033834 	.word	0x08033834
 8023ec0:	08034ad0 	.word	0x08034ad0
 8023ec4:	08033800 	.word	0x08033800

08023ec8 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 8023ec8:	b580      	push	{r7, lr}
 8023eca:	b088      	sub	sp, #32
 8023ecc:	af00      	add	r7, sp, #0
 8023ece:	60f8      	str	r0, [r7, #12]
 8023ed0:	60b9      	str	r1, [r7, #8]
 8023ed2:	607a      	str	r2, [r7, #4]
 8023ed4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 8023ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8023ed8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 8023eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023edc:	f113 0f02 	cmn.w	r3, #2
 8023ee0:	d00b      	beq.n	8023efa <lfs_bd_prog+0x32>
 8023ee2:	68fb      	ldr	r3, [r7, #12]
 8023ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023ee6:	6a1b      	ldr	r3, [r3, #32]
 8023ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023eea:	429a      	cmp	r2, r3
 8023eec:	d305      	bcc.n	8023efa <lfs_bd_prog+0x32>
 8023eee:	4b47      	ldr	r3, [pc, #284]	; (802400c <lfs_bd_prog+0x144>)
 8023ef0:	4a47      	ldr	r2, [pc, #284]	; (8024010 <lfs_bd_prog+0x148>)
 8023ef2:	21d3      	movs	r1, #211	; 0xd3
 8023ef4:	4847      	ldr	r0, [pc, #284]	; (8024014 <lfs_bd_prog+0x14c>)
 8023ef6:	f008 fc09 	bl	802c70c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 8023efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023efe:	441a      	add	r2, r3
 8023f00:	68fb      	ldr	r3, [r7, #12]
 8023f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f04:	69db      	ldr	r3, [r3, #28]
 8023f06:	429a      	cmp	r2, r3
 8023f08:	d977      	bls.n	8023ffa <lfs_bd_prog+0x132>
 8023f0a:	4b43      	ldr	r3, [pc, #268]	; (8024018 <lfs_bd_prog+0x150>)
 8023f0c:	4a40      	ldr	r2, [pc, #256]	; (8024010 <lfs_bd_prog+0x148>)
 8023f0e:	21d4      	movs	r1, #212	; 0xd4
 8023f10:	4840      	ldr	r0, [pc, #256]	; (8024014 <lfs_bd_prog+0x14c>)
 8023f12:	f008 fbfb 	bl	802c70c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 8023f16:	68bb      	ldr	r3, [r7, #8]
 8023f18:	681b      	ldr	r3, [r3, #0]
 8023f1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023f1c:	429a      	cmp	r2, r3
 8023f1e:	d151      	bne.n	8023fc4 <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 8023f20:	68bb      	ldr	r3, [r7, #8]
 8023f22:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 8023f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023f26:	429a      	cmp	r2, r3
 8023f28:	d34c      	bcc.n	8023fc4 <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 8023f2a:	68bb      	ldr	r3, [r7, #8]
 8023f2c:	685a      	ldr	r2, [r3, #4]
 8023f2e:	68fb      	ldr	r3, [r7, #12]
 8023f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023f34:	4413      	add	r3, r2
                off >= pcache->off &&
 8023f36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023f38:	429a      	cmp	r2, r3
 8023f3a:	d243      	bcs.n	8023fc4 <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8023f3c:	68fb      	ldr	r3, [r7, #12]
 8023f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8023f42:	68bb      	ldr	r3, [r7, #8]
 8023f44:	6859      	ldr	r1, [r3, #4]
 8023f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023f48:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 8023f4a:	4413      	add	r3, r2
 8023f4c:	4619      	mov	r1, r3
 8023f4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8023f50:	f7ff fc98 	bl	8023884 <lfs_min>
 8023f54:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 8023f56:	68bb      	ldr	r3, [r7, #8]
 8023f58:	68da      	ldr	r2, [r3, #12]
 8023f5a:	68bb      	ldr	r3, [r7, #8]
 8023f5c:	685b      	ldr	r3, [r3, #4]
 8023f5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023f60:	1acb      	subs	r3, r1, r3
 8023f62:	4413      	add	r3, r2
 8023f64:	69ba      	ldr	r2, [r7, #24]
 8023f66:	69f9      	ldr	r1, [r7, #28]
 8023f68:	4618      	mov	r0, r3
 8023f6a:	f009 ff74 	bl	802de56 <memcpy>

            data += diff;
 8023f6e:	69fa      	ldr	r2, [r7, #28]
 8023f70:	69bb      	ldr	r3, [r7, #24]
 8023f72:	4413      	add	r3, r2
 8023f74:	61fb      	str	r3, [r7, #28]
            off += diff;
 8023f76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023f78:	69bb      	ldr	r3, [r7, #24]
 8023f7a:	4413      	add	r3, r2
 8023f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8023f7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023f80:	69bb      	ldr	r3, [r7, #24]
 8023f82:	1ad3      	subs	r3, r2, r3
 8023f84:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 8023f86:	68bb      	ldr	r3, [r7, #8]
 8023f88:	6898      	ldr	r0, [r3, #8]
 8023f8a:	68bb      	ldr	r3, [r7, #8]
 8023f8c:	685b      	ldr	r3, [r3, #4]
 8023f8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8023f90:	1ad3      	subs	r3, r2, r3
 8023f92:	4619      	mov	r1, r3
 8023f94:	f7ff fc66 	bl	8023864 <lfs_max>
 8023f98:	4602      	mov	r2, r0
 8023f9a:	68bb      	ldr	r3, [r7, #8]
 8023f9c:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8023f9e:	68bb      	ldr	r3, [r7, #8]
 8023fa0:	689a      	ldr	r2, [r3, #8]
 8023fa2:	68fb      	ldr	r3, [r7, #12]
 8023fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023fa8:	429a      	cmp	r2, r3
 8023faa:	d126      	bne.n	8023ffa <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8023fac:	78fb      	ldrb	r3, [r7, #3]
 8023fae:	687a      	ldr	r2, [r7, #4]
 8023fb0:	68b9      	ldr	r1, [r7, #8]
 8023fb2:	68f8      	ldr	r0, [r7, #12]
 8023fb4:	f7ff fed8 	bl	8023d68 <lfs_bd_flush>
 8023fb8:	6178      	str	r0, [r7, #20]
                if (err) {
 8023fba:	697b      	ldr	r3, [r7, #20]
 8023fbc:	2b00      	cmp	r3, #0
 8023fbe:	d01c      	beq.n	8023ffa <lfs_bd_prog+0x132>
                    return err;
 8023fc0:	697b      	ldr	r3, [r7, #20]
 8023fc2:	e01e      	b.n	8024002 <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8023fc4:	68bb      	ldr	r3, [r7, #8]
 8023fc6:	681b      	ldr	r3, [r3, #0]
 8023fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023fcc:	d005      	beq.n	8023fda <lfs_bd_prog+0x112>
 8023fce:	4b13      	ldr	r3, [pc, #76]	; (802401c <lfs_bd_prog+0x154>)
 8023fd0:	4a0f      	ldr	r2, [pc, #60]	; (8024010 <lfs_bd_prog+0x148>)
 8023fd2:	21f1      	movs	r1, #241	; 0xf1
 8023fd4:	480f      	ldr	r0, [pc, #60]	; (8024014 <lfs_bd_prog+0x14c>)
 8023fd6:	f008 fb99 	bl	802c70c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 8023fda:	68bb      	ldr	r3, [r7, #8]
 8023fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023fde:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 8023fe0:	68fb      	ldr	r3, [r7, #12]
 8023fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8023fe4:	699b      	ldr	r3, [r3, #24]
 8023fe6:	4619      	mov	r1, r3
 8023fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8023fea:	f7ff fc5b 	bl	80238a4 <lfs_aligndown>
 8023fee:	4602      	mov	r2, r0
 8023ff0:	68bb      	ldr	r3, [r7, #8]
 8023ff2:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 8023ff4:	68bb      	ldr	r3, [r7, #8]
 8023ff6:	2200      	movs	r2, #0
 8023ff8:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 8023ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023ffc:	2b00      	cmp	r3, #0
 8023ffe:	d18a      	bne.n	8023f16 <lfs_bd_prog+0x4e>
    }

    return 0;
 8024000:	2300      	movs	r3, #0
}
 8024002:	4618      	mov	r0, r3
 8024004:	3720      	adds	r7, #32
 8024006:	46bd      	mov	sp, r7
 8024008:	bd80      	pop	{r7, pc}
 802400a:	bf00      	nop
 802400c:	08033868 	.word	0x08033868
 8024010:	08034adc 	.word	0x08034adc
 8024014:	08033800 	.word	0x08033800
 8024018:	080338a4 	.word	0x080338a4
 802401c:	080338c8 	.word	0x080338c8

08024020 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 8024020:	b580      	push	{r7, lr}
 8024022:	b084      	sub	sp, #16
 8024024:	af00      	add	r7, sp, #0
 8024026:	6078      	str	r0, [r7, #4]
 8024028:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802402e:	6a1b      	ldr	r3, [r3, #32]
 8024030:	683a      	ldr	r2, [r7, #0]
 8024032:	429a      	cmp	r2, r3
 8024034:	d305      	bcc.n	8024042 <lfs_bd_erase+0x22>
 8024036:	4b0f      	ldr	r3, [pc, #60]	; (8024074 <lfs_bd_erase+0x54>)
 8024038:	4a0f      	ldr	r2, [pc, #60]	; (8024078 <lfs_bd_erase+0x58>)
 802403a:	21ff      	movs	r1, #255	; 0xff
 802403c:	480f      	ldr	r0, [pc, #60]	; (802407c <lfs_bd_erase+0x5c>)
 802403e:	f008 fb65 	bl	802c70c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8024042:	687b      	ldr	r3, [r7, #4]
 8024044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024046:	68db      	ldr	r3, [r3, #12]
 8024048:	687a      	ldr	r2, [r7, #4]
 802404a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802404c:	6839      	ldr	r1, [r7, #0]
 802404e:	4610      	mov	r0, r2
 8024050:	4798      	blx	r3
 8024052:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8024054:	68fb      	ldr	r3, [r7, #12]
 8024056:	2b00      	cmp	r3, #0
 8024058:	dd06      	ble.n	8024068 <lfs_bd_erase+0x48>
 802405a:	4b09      	ldr	r3, [pc, #36]	; (8024080 <lfs_bd_erase+0x60>)
 802405c:	4a06      	ldr	r2, [pc, #24]	; (8024078 <lfs_bd_erase+0x58>)
 802405e:	f240 1101 	movw	r1, #257	; 0x101
 8024062:	4806      	ldr	r0, [pc, #24]	; (802407c <lfs_bd_erase+0x5c>)
 8024064:	f008 fb52 	bl	802c70c <__assert_func>
    return err;
 8024068:	68fb      	ldr	r3, [r7, #12]
}
 802406a:	4618      	mov	r0, r3
 802406c:	3710      	adds	r7, #16
 802406e:	46bd      	mov	sp, r7
 8024070:	bd80      	pop	{r7, pc}
 8024072:	bf00      	nop
 8024074:	080337e0 	.word	0x080337e0
 8024078:	08034ae8 	.word	0x08034ae8
 802407c:	08033800 	.word	0x08033800
 8024080:	08033834 	.word	0x08033834

08024084 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8024084:	b480      	push	{r7}
 8024086:	b085      	sub	sp, #20
 8024088:	af00      	add	r7, sp, #0
 802408a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 802408c:	687b      	ldr	r3, [r7, #4]
 802408e:	681b      	ldr	r3, [r3, #0]
 8024090:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8024092:	687b      	ldr	r3, [r7, #4]
 8024094:	685a      	ldr	r2, [r3, #4]
 8024096:	687b      	ldr	r3, [r7, #4]
 8024098:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 802409a:	687b      	ldr	r3, [r7, #4]
 802409c:	3304      	adds	r3, #4
 802409e:	68fa      	ldr	r2, [r7, #12]
 80240a0:	601a      	str	r2, [r3, #0]
}
 80240a2:	bf00      	nop
 80240a4:	3714      	adds	r7, #20
 80240a6:	46bd      	mov	sp, r7
 80240a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240ac:	4770      	bx	lr

080240ae <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 80240ae:	b480      	push	{r7}
 80240b0:	b083      	sub	sp, #12
 80240b2:	af00      	add	r7, sp, #0
 80240b4:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 80240b6:	687b      	ldr	r3, [r7, #4]
 80240b8:	681b      	ldr	r3, [r3, #0]
 80240ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80240be:	d005      	beq.n	80240cc <lfs_pair_isnull+0x1e>
 80240c0:	687b      	ldr	r3, [r7, #4]
 80240c2:	3304      	adds	r3, #4
 80240c4:	681b      	ldr	r3, [r3, #0]
 80240c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80240ca:	d101      	bne.n	80240d0 <lfs_pair_isnull+0x22>
 80240cc:	2301      	movs	r3, #1
 80240ce:	e000      	b.n	80240d2 <lfs_pair_isnull+0x24>
 80240d0:	2300      	movs	r3, #0
 80240d2:	f003 0301 	and.w	r3, r3, #1
 80240d6:	b2db      	uxtb	r3, r3
}
 80240d8:	4618      	mov	r0, r3
 80240da:	370c      	adds	r7, #12
 80240dc:	46bd      	mov	sp, r7
 80240de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240e2:	4770      	bx	lr

080240e4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80240e4:	b480      	push	{r7}
 80240e6:	b083      	sub	sp, #12
 80240e8:	af00      	add	r7, sp, #0
 80240ea:	6078      	str	r0, [r7, #4]
 80240ec:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80240ee:	687b      	ldr	r3, [r7, #4]
 80240f0:	681a      	ldr	r2, [r3, #0]
 80240f2:	683b      	ldr	r3, [r7, #0]
 80240f4:	681b      	ldr	r3, [r3, #0]
 80240f6:	429a      	cmp	r2, r3
 80240f8:	d017      	beq.n	802412a <lfs_pair_cmp+0x46>
 80240fa:	687b      	ldr	r3, [r7, #4]
 80240fc:	3304      	adds	r3, #4
 80240fe:	681a      	ldr	r2, [r3, #0]
 8024100:	683b      	ldr	r3, [r7, #0]
 8024102:	3304      	adds	r3, #4
 8024104:	681b      	ldr	r3, [r3, #0]
 8024106:	429a      	cmp	r2, r3
 8024108:	d00f      	beq.n	802412a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 802410a:	687b      	ldr	r3, [r7, #4]
 802410c:	681a      	ldr	r2, [r3, #0]
 802410e:	683b      	ldr	r3, [r7, #0]
 8024110:	3304      	adds	r3, #4
 8024112:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8024114:	429a      	cmp	r2, r3
 8024116:	d008      	beq.n	802412a <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	3304      	adds	r3, #4
 802411c:	681a      	ldr	r2, [r3, #0]
 802411e:	683b      	ldr	r3, [r7, #0]
 8024120:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 8024122:	429a      	cmp	r2, r3
 8024124:	d001      	beq.n	802412a <lfs_pair_cmp+0x46>
 8024126:	2301      	movs	r3, #1
 8024128:	e000      	b.n	802412c <lfs_pair_cmp+0x48>
 802412a:	2300      	movs	r3, #0
}
 802412c:	4618      	mov	r0, r3
 802412e:	370c      	adds	r7, #12
 8024130:	46bd      	mov	sp, r7
 8024132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024136:	4770      	bx	lr

08024138 <lfs_pair_sync>:

#ifndef LFS_READONLY
static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 8024138:	b480      	push	{r7}
 802413a:	b083      	sub	sp, #12
 802413c:	af00      	add	r7, sp, #0
 802413e:	6078      	str	r0, [r7, #4]
 8024140:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8024142:	687b      	ldr	r3, [r7, #4]
 8024144:	681a      	ldr	r2, [r3, #0]
 8024146:	683b      	ldr	r3, [r7, #0]
 8024148:	681b      	ldr	r3, [r3, #0]
 802414a:	429a      	cmp	r2, r3
 802414c:	d107      	bne.n	802415e <lfs_pair_sync+0x26>
 802414e:	687b      	ldr	r3, [r7, #4]
 8024150:	3304      	adds	r3, #4
 8024152:	681a      	ldr	r2, [r3, #0]
 8024154:	683b      	ldr	r3, [r7, #0]
 8024156:	3304      	adds	r3, #4
 8024158:	681b      	ldr	r3, [r3, #0]
 802415a:	429a      	cmp	r2, r3
 802415c:	d00d      	beq.n	802417a <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 802415e:	687b      	ldr	r3, [r7, #4]
 8024160:	681a      	ldr	r2, [r3, #0]
 8024162:	683b      	ldr	r3, [r7, #0]
 8024164:	3304      	adds	r3, #4
 8024166:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 8024168:	429a      	cmp	r2, r3
 802416a:	d108      	bne.n	802417e <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 802416c:	687b      	ldr	r3, [r7, #4]
 802416e:	3304      	adds	r3, #4
 8024170:	681a      	ldr	r2, [r3, #0]
 8024172:	683b      	ldr	r3, [r7, #0]
 8024174:	681b      	ldr	r3, [r3, #0]
 8024176:	429a      	cmp	r2, r3
 8024178:	d101      	bne.n	802417e <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 802417a:	2301      	movs	r3, #1
 802417c:	e000      	b.n	8024180 <lfs_pair_sync+0x48>
 802417e:	2300      	movs	r3, #0
 8024180:	f003 0301 	and.w	r3, r3, #1
 8024184:	b2db      	uxtb	r3, r3
}
 8024186:	4618      	mov	r0, r3
 8024188:	370c      	adds	r7, #12
 802418a:	46bd      	mov	sp, r7
 802418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024190:	4770      	bx	lr

08024192 <lfs_pair_fromle32>:
#endif

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8024192:	b590      	push	{r4, r7, lr}
 8024194:	b083      	sub	sp, #12
 8024196:	af00      	add	r7, sp, #0
 8024198:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 802419a:	687b      	ldr	r3, [r7, #4]
 802419c:	681b      	ldr	r3, [r3, #0]
 802419e:	4618      	mov	r0, r3
 80241a0:	f7ff fbe0 	bl	8023964 <lfs_fromle32>
 80241a4:	4602      	mov	r2, r0
 80241a6:	687b      	ldr	r3, [r7, #4]
 80241a8:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 80241aa:	687b      	ldr	r3, [r7, #4]
 80241ac:	3304      	adds	r3, #4
 80241ae:	681a      	ldr	r2, [r3, #0]
 80241b0:	687b      	ldr	r3, [r7, #4]
 80241b2:	1d1c      	adds	r4, r3, #4
 80241b4:	4610      	mov	r0, r2
 80241b6:	f7ff fbd5 	bl	8023964 <lfs_fromle32>
 80241ba:	4603      	mov	r3, r0
 80241bc:	6023      	str	r3, [r4, #0]
}
 80241be:	bf00      	nop
 80241c0:	370c      	adds	r7, #12
 80241c2:	46bd      	mov	sp, r7
 80241c4:	bd90      	pop	{r4, r7, pc}

080241c6 <lfs_pair_tole32>:

#ifndef LFS_READONLY
static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 80241c6:	b590      	push	{r4, r7, lr}
 80241c8:	b083      	sub	sp, #12
 80241ca:	af00      	add	r7, sp, #0
 80241cc:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 80241ce:	687b      	ldr	r3, [r7, #4]
 80241d0:	681b      	ldr	r3, [r3, #0]
 80241d2:	4618      	mov	r0, r3
 80241d4:	f7ff fbd1 	bl	802397a <lfs_tole32>
 80241d8:	4602      	mov	r2, r0
 80241da:	687b      	ldr	r3, [r7, #4]
 80241dc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 80241de:	687b      	ldr	r3, [r7, #4]
 80241e0:	3304      	adds	r3, #4
 80241e2:	681a      	ldr	r2, [r3, #0]
 80241e4:	687b      	ldr	r3, [r7, #4]
 80241e6:	1d1c      	adds	r4, r3, #4
 80241e8:	4610      	mov	r0, r2
 80241ea:	f7ff fbc6 	bl	802397a <lfs_tole32>
 80241ee:	4603      	mov	r3, r0
 80241f0:	6023      	str	r3, [r4, #0]
}
 80241f2:	bf00      	nop
 80241f4:	370c      	adds	r7, #12
 80241f6:	46bd      	mov	sp, r7
 80241f8:	bd90      	pop	{r4, r7, pc}

080241fa <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 80241fa:	b480      	push	{r7}
 80241fc:	b083      	sub	sp, #12
 80241fe:	af00      	add	r7, sp, #0
 8024200:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8024202:	687b      	ldr	r3, [r7, #4]
 8024204:	43db      	mvns	r3, r3
 8024206:	0fdb      	lsrs	r3, r3, #31
 8024208:	b2db      	uxtb	r3, r3
}
 802420a:	4618      	mov	r0, r3
 802420c:	370c      	adds	r7, #12
 802420e:	46bd      	mov	sp, r7
 8024210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024214:	4770      	bx	lr

08024216 <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 8024216:	b480      	push	{r7}
 8024218:	b083      	sub	sp, #12
 802421a:	af00      	add	r7, sp, #0
 802421c:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 802421e:	687b      	ldr	r3, [r7, #4]
 8024220:	059b      	lsls	r3, r3, #22
 8024222:	159b      	asrs	r3, r3, #22
 8024224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024228:	bf0c      	ite	eq
 802422a:	2301      	moveq	r3, #1
 802422c:	2300      	movne	r3, #0
 802422e:	b2db      	uxtb	r3, r3
}
 8024230:	4618      	mov	r0, r3
 8024232:	370c      	adds	r7, #12
 8024234:	46bd      	mov	sp, r7
 8024236:	f85d 7b04 	ldr.w	r7, [sp], #4
 802423a:	4770      	bx	lr

0802423c <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 802423c:	b480      	push	{r7}
 802423e:	b083      	sub	sp, #12
 8024240:	af00      	add	r7, sp, #0
 8024242:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 8024244:	687b      	ldr	r3, [r7, #4]
 8024246:	0d1b      	lsrs	r3, r3, #20
 8024248:	b29b      	uxth	r3, r3
 802424a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 802424e:	b29b      	uxth	r3, r3
}
 8024250:	4618      	mov	r0, r3
 8024252:	370c      	adds	r7, #12
 8024254:	46bd      	mov	sp, r7
 8024256:	f85d 7b04 	ldr.w	r7, [sp], #4
 802425a:	4770      	bx	lr

0802425c <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 802425c:	b480      	push	{r7}
 802425e:	b083      	sub	sp, #12
 8024260:	af00      	add	r7, sp, #0
 8024262:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 8024264:	687b      	ldr	r3, [r7, #4]
 8024266:	0d1b      	lsrs	r3, r3, #20
 8024268:	b29b      	uxth	r3, r3
 802426a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 802426e:	b29b      	uxth	r3, r3
}
 8024270:	4618      	mov	r0, r3
 8024272:	370c      	adds	r7, #12
 8024274:	46bd      	mov	sp, r7
 8024276:	f85d 7b04 	ldr.w	r7, [sp], #4
 802427a:	4770      	bx	lr

0802427c <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 802427c:	b480      	push	{r7}
 802427e:	b083      	sub	sp, #12
 8024280:	af00      	add	r7, sp, #0
 8024282:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 8024284:	687b      	ldr	r3, [r7, #4]
 8024286:	0d1b      	lsrs	r3, r3, #20
 8024288:	b2db      	uxtb	r3, r3
}
 802428a:	4618      	mov	r0, r3
 802428c:	370c      	adds	r7, #12
 802428e:	46bd      	mov	sp, r7
 8024290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024294:	4770      	bx	lr

08024296 <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 8024296:	b580      	push	{r7, lr}
 8024298:	b082      	sub	sp, #8
 802429a:	af00      	add	r7, sp, #0
 802429c:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 802429e:	6878      	ldr	r0, [r7, #4]
 80242a0:	f7ff ffec 	bl	802427c <lfs_tag_chunk>
 80242a4:	4603      	mov	r3, r0
 80242a6:	b25b      	sxtb	r3, r3
}
 80242a8:	4618      	mov	r0, r3
 80242aa:	3708      	adds	r7, #8
 80242ac:	46bd      	mov	sp, r7
 80242ae:	bd80      	pop	{r7, pc}

080242b0 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 80242b0:	b480      	push	{r7}
 80242b2:	b083      	sub	sp, #12
 80242b4:	af00      	add	r7, sp, #0
 80242b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 80242b8:	687b      	ldr	r3, [r7, #4]
 80242ba:	0a9b      	lsrs	r3, r3, #10
 80242bc:	b29b      	uxth	r3, r3
 80242be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80242c2:	b29b      	uxth	r3, r3
}
 80242c4:	4618      	mov	r0, r3
 80242c6:	370c      	adds	r7, #12
 80242c8:	46bd      	mov	sp, r7
 80242ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242ce:	4770      	bx	lr

080242d0 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 80242d0:	b480      	push	{r7}
 80242d2:	b083      	sub	sp, #12
 80242d4:	af00      	add	r7, sp, #0
 80242d6:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 80242d8:	687b      	ldr	r3, [r7, #4]
 80242da:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 80242de:	4618      	mov	r0, r3
 80242e0:	370c      	adds	r7, #12
 80242e2:	46bd      	mov	sp, r7
 80242e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80242e8:	4770      	bx	lr

080242ea <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 80242ea:	b580      	push	{r7, lr}
 80242ec:	b082      	sub	sp, #8
 80242ee:	af00      	add	r7, sp, #0
 80242f0:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 80242f2:	6878      	ldr	r0, [r7, #4]
 80242f4:	f7ff ff8f 	bl	8024216 <lfs_tag_isdelete>
 80242f8:	4603      	mov	r3, r0
 80242fa:	461a      	mov	r2, r3
 80242fc:	687b      	ldr	r3, [r7, #4]
 80242fe:	4413      	add	r3, r2
 8024300:	4618      	mov	r0, r3
 8024302:	f7ff ffe5 	bl	80242d0 <lfs_tag_size>
 8024306:	4603      	mov	r3, r0
 8024308:	3304      	adds	r3, #4
}
 802430a:	4618      	mov	r0, r3
 802430c:	3708      	adds	r7, #8
 802430e:	46bd      	mov	sp, r7
 8024310:	bd80      	pop	{r7, pc}

08024312 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 8024312:	b480      	push	{r7}
 8024314:	b085      	sub	sp, #20
 8024316:	af00      	add	r7, sp, #0
 8024318:	6078      	str	r0, [r7, #4]
 802431a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 802431c:	2300      	movs	r3, #0
 802431e:	60fb      	str	r3, [r7, #12]
 8024320:	e012      	b.n	8024348 <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8024322:	68fb      	ldr	r3, [r7, #12]
 8024324:	009b      	lsls	r3, r3, #2
 8024326:	687a      	ldr	r2, [r7, #4]
 8024328:	4413      	add	r3, r2
 802432a:	6819      	ldr	r1, [r3, #0]
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	009b      	lsls	r3, r3, #2
 8024330:	683a      	ldr	r2, [r7, #0]
 8024332:	4413      	add	r3, r2
 8024334:	681a      	ldr	r2, [r3, #0]
 8024336:	68fb      	ldr	r3, [r7, #12]
 8024338:	009b      	lsls	r3, r3, #2
 802433a:	6878      	ldr	r0, [r7, #4]
 802433c:	4403      	add	r3, r0
 802433e:	404a      	eors	r2, r1
 8024340:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8024342:	68fb      	ldr	r3, [r7, #12]
 8024344:	3301      	adds	r3, #1
 8024346:	60fb      	str	r3, [r7, #12]
 8024348:	68fb      	ldr	r3, [r7, #12]
 802434a:	2b02      	cmp	r3, #2
 802434c:	dde9      	ble.n	8024322 <lfs_gstate_xor+0x10>
    }
}
 802434e:	bf00      	nop
 8024350:	bf00      	nop
 8024352:	3714      	adds	r7, #20
 8024354:	46bd      	mov	sp, r7
 8024356:	f85d 7b04 	ldr.w	r7, [sp], #4
 802435a:	4770      	bx	lr

0802435c <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 802435c:	b480      	push	{r7}
 802435e:	b085      	sub	sp, #20
 8024360:	af00      	add	r7, sp, #0
 8024362:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8024364:	2300      	movs	r3, #0
 8024366:	60fb      	str	r3, [r7, #12]
 8024368:	e00b      	b.n	8024382 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 802436a:	68fb      	ldr	r3, [r7, #12]
 802436c:	009b      	lsls	r3, r3, #2
 802436e:	687a      	ldr	r2, [r7, #4]
 8024370:	4413      	add	r3, r2
 8024372:	681b      	ldr	r3, [r3, #0]
 8024374:	2b00      	cmp	r3, #0
 8024376:	d001      	beq.n	802437c <lfs_gstate_iszero+0x20>
            return false;
 8024378:	2300      	movs	r3, #0
 802437a:	e006      	b.n	802438a <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 802437c:	68fb      	ldr	r3, [r7, #12]
 802437e:	3301      	adds	r3, #1
 8024380:	60fb      	str	r3, [r7, #12]
 8024382:	68fb      	ldr	r3, [r7, #12]
 8024384:	2b02      	cmp	r3, #2
 8024386:	ddf0      	ble.n	802436a <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 8024388:	2301      	movs	r3, #1
}
 802438a:	4618      	mov	r0, r3
 802438c:	3714      	adds	r7, #20
 802438e:	46bd      	mov	sp, r7
 8024390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024394:	4770      	bx	lr

08024396 <lfs_gstate_hasorphans>:

#ifndef LFS_READONLY
static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 8024396:	b580      	push	{r7, lr}
 8024398:	b082      	sub	sp, #8
 802439a:	af00      	add	r7, sp, #0
 802439c:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 802439e:	687b      	ldr	r3, [r7, #4]
 80243a0:	681b      	ldr	r3, [r3, #0]
 80243a2:	4618      	mov	r0, r3
 80243a4:	f7ff ff94 	bl	80242d0 <lfs_tag_size>
 80243a8:	4603      	mov	r3, r0
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	bf14      	ite	ne
 80243ae:	2301      	movne	r3, #1
 80243b0:	2300      	moveq	r3, #0
 80243b2:	b2db      	uxtb	r3, r3
}
 80243b4:	4618      	mov	r0, r3
 80243b6:	3708      	adds	r7, #8
 80243b8:	46bd      	mov	sp, r7
 80243ba:	bd80      	pop	{r7, pc}

080243bc <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 80243bc:	b580      	push	{r7, lr}
 80243be:	b082      	sub	sp, #8
 80243c0:	af00      	add	r7, sp, #0
 80243c2:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 80243c4:	687b      	ldr	r3, [r7, #4]
 80243c6:	681b      	ldr	r3, [r3, #0]
 80243c8:	4618      	mov	r0, r3
 80243ca:	f7ff ff81 	bl	80242d0 <lfs_tag_size>
 80243ce:	4603      	mov	r3, r0
 80243d0:	b2db      	uxtb	r3, r3
}
 80243d2:	4618      	mov	r0, r3
 80243d4:	3708      	adds	r7, #8
 80243d6:	46bd      	mov	sp, r7
 80243d8:	bd80      	pop	{r7, pc}

080243da <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 80243da:	b580      	push	{r7, lr}
 80243dc:	b082      	sub	sp, #8
 80243de:	af00      	add	r7, sp, #0
 80243e0:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 80243e2:	687b      	ldr	r3, [r7, #4]
 80243e4:	681b      	ldr	r3, [r3, #0]
 80243e6:	4618      	mov	r0, r3
 80243e8:	f7ff ff28 	bl	802423c <lfs_tag_type1>
 80243ec:	4603      	mov	r3, r0
 80243ee:	2b00      	cmp	r3, #0
 80243f0:	bf14      	ite	ne
 80243f2:	2301      	movne	r3, #1
 80243f4:	2300      	moveq	r3, #0
 80243f6:	b2db      	uxtb	r3, r3
}
 80243f8:	4618      	mov	r0, r3
 80243fa:	3708      	adds	r7, #8
 80243fc:	46bd      	mov	sp, r7
 80243fe:	bd80      	pop	{r7, pc}

08024400 <lfs_gstate_hasmovehere>:
#endif

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 8024400:	b580      	push	{r7, lr}
 8024402:	b082      	sub	sp, #8
 8024404:	af00      	add	r7, sp, #0
 8024406:	6078      	str	r0, [r7, #4]
 8024408:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 802440a:	687b      	ldr	r3, [r7, #4]
 802440c:	681b      	ldr	r3, [r3, #0]
 802440e:	4618      	mov	r0, r3
 8024410:	f7ff ff14 	bl	802423c <lfs_tag_type1>
 8024414:	4603      	mov	r3, r0
 8024416:	2b00      	cmp	r3, #0
 8024418:	d00a      	beq.n	8024430 <lfs_gstate_hasmovehere+0x30>
 802441a:	687b      	ldr	r3, [r7, #4]
 802441c:	3304      	adds	r3, #4
 802441e:	6839      	ldr	r1, [r7, #0]
 8024420:	4618      	mov	r0, r3
 8024422:	f7ff fe5f 	bl	80240e4 <lfs_pair_cmp>
 8024426:	4603      	mov	r3, r0
 8024428:	2b00      	cmp	r3, #0
 802442a:	d101      	bne.n	8024430 <lfs_gstate_hasmovehere+0x30>
 802442c:	2301      	movs	r3, #1
 802442e:	e000      	b.n	8024432 <lfs_gstate_hasmovehere+0x32>
 8024430:	2300      	movs	r3, #0
 8024432:	f003 0301 	and.w	r3, r3, #1
 8024436:	b2db      	uxtb	r3, r3
}
 8024438:	4618      	mov	r0, r3
 802443a:	3708      	adds	r7, #8
 802443c:	46bd      	mov	sp, r7
 802443e:	bd80      	pop	{r7, pc}

08024440 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 8024440:	b580      	push	{r7, lr}
 8024442:	b082      	sub	sp, #8
 8024444:	af00      	add	r7, sp, #0
 8024446:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8024448:	687b      	ldr	r3, [r7, #4]
 802444a:	681b      	ldr	r3, [r3, #0]
 802444c:	4618      	mov	r0, r3
 802444e:	f7ff fa89 	bl	8023964 <lfs_fromle32>
 8024452:	4602      	mov	r2, r0
 8024454:	687b      	ldr	r3, [r7, #4]
 8024456:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8024458:	687b      	ldr	r3, [r7, #4]
 802445a:	685b      	ldr	r3, [r3, #4]
 802445c:	4618      	mov	r0, r3
 802445e:	f7ff fa81 	bl	8023964 <lfs_fromle32>
 8024462:	4602      	mov	r2, r0
 8024464:	687b      	ldr	r3, [r7, #4]
 8024466:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8024468:	687b      	ldr	r3, [r7, #4]
 802446a:	689b      	ldr	r3, [r3, #8]
 802446c:	4618      	mov	r0, r3
 802446e:	f7ff fa79 	bl	8023964 <lfs_fromle32>
 8024472:	4602      	mov	r2, r0
 8024474:	687b      	ldr	r3, [r7, #4]
 8024476:	609a      	str	r2, [r3, #8]
}
 8024478:	bf00      	nop
 802447a:	3708      	adds	r7, #8
 802447c:	46bd      	mov	sp, r7
 802447e:	bd80      	pop	{r7, pc}

08024480 <lfs_gstate_tole32>:

#ifndef LFS_READONLY
static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 8024480:	b580      	push	{r7, lr}
 8024482:	b082      	sub	sp, #8
 8024484:	af00      	add	r7, sp, #0
 8024486:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8024488:	687b      	ldr	r3, [r7, #4]
 802448a:	681b      	ldr	r3, [r3, #0]
 802448c:	4618      	mov	r0, r3
 802448e:	f7ff fa74 	bl	802397a <lfs_tole32>
 8024492:	4602      	mov	r2, r0
 8024494:	687b      	ldr	r3, [r7, #4]
 8024496:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8024498:	687b      	ldr	r3, [r7, #4]
 802449a:	685b      	ldr	r3, [r3, #4]
 802449c:	4618      	mov	r0, r3
 802449e:	f7ff fa6c 	bl	802397a <lfs_tole32>
 80244a2:	4602      	mov	r2, r0
 80244a4:	687b      	ldr	r3, [r7, #4]
 80244a6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 80244a8:	687b      	ldr	r3, [r7, #4]
 80244aa:	689b      	ldr	r3, [r3, #8]
 80244ac:	4618      	mov	r0, r3
 80244ae:	f7ff fa64 	bl	802397a <lfs_tole32>
 80244b2:	4602      	mov	r2, r0
 80244b4:	687b      	ldr	r3, [r7, #4]
 80244b6:	609a      	str	r2, [r3, #8]
}
 80244b8:	bf00      	nop
 80244ba:	3708      	adds	r7, #8
 80244bc:	46bd      	mov	sp, r7
 80244be:	bd80      	pop	{r7, pc}

080244c0 <lfs_ctz_fromle32>:
#endif

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 80244c0:	b580      	push	{r7, lr}
 80244c2:	b082      	sub	sp, #8
 80244c4:	af00      	add	r7, sp, #0
 80244c6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 80244c8:	687b      	ldr	r3, [r7, #4]
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	4618      	mov	r0, r3
 80244ce:	f7ff fa49 	bl	8023964 <lfs_fromle32>
 80244d2:	4602      	mov	r2, r0
 80244d4:	687b      	ldr	r3, [r7, #4]
 80244d6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 80244d8:	687b      	ldr	r3, [r7, #4]
 80244da:	685b      	ldr	r3, [r3, #4]
 80244dc:	4618      	mov	r0, r3
 80244de:	f7ff fa41 	bl	8023964 <lfs_fromle32>
 80244e2:	4602      	mov	r2, r0
 80244e4:	687b      	ldr	r3, [r7, #4]
 80244e6:	605a      	str	r2, [r3, #4]
}
 80244e8:	bf00      	nop
 80244ea:	3708      	adds	r7, #8
 80244ec:	46bd      	mov	sp, r7
 80244ee:	bd80      	pop	{r7, pc}

080244f0 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 80244f0:	b580      	push	{r7, lr}
 80244f2:	b082      	sub	sp, #8
 80244f4:	af00      	add	r7, sp, #0
 80244f6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 80244f8:	687b      	ldr	r3, [r7, #4]
 80244fa:	681b      	ldr	r3, [r3, #0]
 80244fc:	4618      	mov	r0, r3
 80244fe:	f7ff fa3c 	bl	802397a <lfs_tole32>
 8024502:	4602      	mov	r2, r0
 8024504:	687b      	ldr	r3, [r7, #4]
 8024506:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 8024508:	687b      	ldr	r3, [r7, #4]
 802450a:	685b      	ldr	r3, [r3, #4]
 802450c:	4618      	mov	r0, r3
 802450e:	f7ff fa34 	bl	802397a <lfs_tole32>
 8024512:	4602      	mov	r2, r0
 8024514:	687b      	ldr	r3, [r7, #4]
 8024516:	605a      	str	r2, [r3, #4]
}
 8024518:	bf00      	nop
 802451a:	3708      	adds	r7, #8
 802451c:	46bd      	mov	sp, r7
 802451e:	bd80      	pop	{r7, pc}

08024520 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8024520:	b580      	push	{r7, lr}
 8024522:	b082      	sub	sp, #8
 8024524:	af00      	add	r7, sp, #0
 8024526:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8024528:	687b      	ldr	r3, [r7, #4]
 802452a:	681b      	ldr	r3, [r3, #0]
 802452c:	4618      	mov	r0, r3
 802452e:	f7ff fa19 	bl	8023964 <lfs_fromle32>
 8024532:	4602      	mov	r2, r0
 8024534:	687b      	ldr	r3, [r7, #4]
 8024536:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8024538:	687b      	ldr	r3, [r7, #4]
 802453a:	685b      	ldr	r3, [r3, #4]
 802453c:	4618      	mov	r0, r3
 802453e:	f7ff fa11 	bl	8023964 <lfs_fromle32>
 8024542:	4602      	mov	r2, r0
 8024544:	687b      	ldr	r3, [r7, #4]
 8024546:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8024548:	687b      	ldr	r3, [r7, #4]
 802454a:	689b      	ldr	r3, [r3, #8]
 802454c:	4618      	mov	r0, r3
 802454e:	f7ff fa09 	bl	8023964 <lfs_fromle32>
 8024552:	4602      	mov	r2, r0
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8024558:	687b      	ldr	r3, [r7, #4]
 802455a:	68db      	ldr	r3, [r3, #12]
 802455c:	4618      	mov	r0, r3
 802455e:	f7ff fa01 	bl	8023964 <lfs_fromle32>
 8024562:	4602      	mov	r2, r0
 8024564:	687b      	ldr	r3, [r7, #4]
 8024566:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8024568:	687b      	ldr	r3, [r7, #4]
 802456a:	691b      	ldr	r3, [r3, #16]
 802456c:	4618      	mov	r0, r3
 802456e:	f7ff f9f9 	bl	8023964 <lfs_fromle32>
 8024572:	4602      	mov	r2, r0
 8024574:	687b      	ldr	r3, [r7, #4]
 8024576:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8024578:	687b      	ldr	r3, [r7, #4]
 802457a:	695b      	ldr	r3, [r3, #20]
 802457c:	4618      	mov	r0, r3
 802457e:	f7ff f9f1 	bl	8023964 <lfs_fromle32>
 8024582:	4602      	mov	r2, r0
 8024584:	687b      	ldr	r3, [r7, #4]
 8024586:	615a      	str	r2, [r3, #20]
}
 8024588:	bf00      	nop
 802458a:	3708      	adds	r7, #8
 802458c:	46bd      	mov	sp, r7
 802458e:	bd80      	pop	{r7, pc}

08024590 <lfs_superblock_tole32>:

#ifndef LFS_READONLY
static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8024590:	b580      	push	{r7, lr}
 8024592:	b082      	sub	sp, #8
 8024594:	af00      	add	r7, sp, #0
 8024596:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	681b      	ldr	r3, [r3, #0]
 802459c:	4618      	mov	r0, r3
 802459e:	f7ff f9ec 	bl	802397a <lfs_tole32>
 80245a2:	4602      	mov	r2, r0
 80245a4:	687b      	ldr	r3, [r7, #4]
 80245a6:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 80245a8:	687b      	ldr	r3, [r7, #4]
 80245aa:	685b      	ldr	r3, [r3, #4]
 80245ac:	4618      	mov	r0, r3
 80245ae:	f7ff f9e4 	bl	802397a <lfs_tole32>
 80245b2:	4602      	mov	r2, r0
 80245b4:	687b      	ldr	r3, [r7, #4]
 80245b6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 80245b8:	687b      	ldr	r3, [r7, #4]
 80245ba:	689b      	ldr	r3, [r3, #8]
 80245bc:	4618      	mov	r0, r3
 80245be:	f7ff f9dc 	bl	802397a <lfs_tole32>
 80245c2:	4602      	mov	r2, r0
 80245c4:	687b      	ldr	r3, [r7, #4]
 80245c6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 80245c8:	687b      	ldr	r3, [r7, #4]
 80245ca:	68db      	ldr	r3, [r3, #12]
 80245cc:	4618      	mov	r0, r3
 80245ce:	f7ff f9d4 	bl	802397a <lfs_tole32>
 80245d2:	4602      	mov	r2, r0
 80245d4:	687b      	ldr	r3, [r7, #4]
 80245d6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 80245d8:	687b      	ldr	r3, [r7, #4]
 80245da:	691b      	ldr	r3, [r3, #16]
 80245dc:	4618      	mov	r0, r3
 80245de:	f7ff f9cc 	bl	802397a <lfs_tole32>
 80245e2:	4602      	mov	r2, r0
 80245e4:	687b      	ldr	r3, [r7, #4]
 80245e6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 80245e8:	687b      	ldr	r3, [r7, #4]
 80245ea:	695b      	ldr	r3, [r3, #20]
 80245ec:	4618      	mov	r0, r3
 80245ee:	f7ff f9c4 	bl	802397a <lfs_tole32>
 80245f2:	4602      	mov	r2, r0
 80245f4:	687b      	ldr	r3, [r7, #4]
 80245f6:	615a      	str	r2, [r3, #20]
}
 80245f8:	bf00      	nop
 80245fa:	3708      	adds	r7, #8
 80245fc:	46bd      	mov	sp, r7
 80245fe:	bd80      	pop	{r7, pc}

08024600 <lfs_mlist_isopen>:
#endif

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 8024600:	b480      	push	{r7}
 8024602:	b085      	sub	sp, #20
 8024604:	af00      	add	r7, sp, #0
 8024606:	6078      	str	r0, [r7, #4]
 8024608:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802460a:	1d3b      	adds	r3, r7, #4
 802460c:	60fb      	str	r3, [r7, #12]
 802460e:	e009      	b.n	8024624 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 8024610:	68fb      	ldr	r3, [r7, #12]
 8024612:	681b      	ldr	r3, [r3, #0]
 8024614:	683a      	ldr	r2, [r7, #0]
 8024616:	429a      	cmp	r2, r3
 8024618:	d101      	bne.n	802461e <lfs_mlist_isopen+0x1e>
            return true;
 802461a:	2301      	movs	r3, #1
 802461c:	e007      	b.n	802462e <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 802461e:	68fb      	ldr	r3, [r7, #12]
 8024620:	681b      	ldr	r3, [r3, #0]
 8024622:	60fb      	str	r3, [r7, #12]
 8024624:	68fb      	ldr	r3, [r7, #12]
 8024626:	681b      	ldr	r3, [r3, #0]
 8024628:	2b00      	cmp	r3, #0
 802462a:	d1f1      	bne.n	8024610 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 802462c:	2300      	movs	r3, #0
}
 802462e:	4618      	mov	r0, r3
 8024630:	3714      	adds	r7, #20
 8024632:	46bd      	mov	sp, r7
 8024634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024638:	4770      	bx	lr

0802463a <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 802463a:	b480      	push	{r7}
 802463c:	b085      	sub	sp, #20
 802463e:	af00      	add	r7, sp, #0
 8024640:	6078      	str	r0, [r7, #4]
 8024642:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024644:	687b      	ldr	r3, [r7, #4]
 8024646:	3328      	adds	r3, #40	; 0x28
 8024648:	60fb      	str	r3, [r7, #12]
 802464a:	e00d      	b.n	8024668 <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 802464c:	68fb      	ldr	r3, [r7, #12]
 802464e:	681b      	ldr	r3, [r3, #0]
 8024650:	683a      	ldr	r2, [r7, #0]
 8024652:	429a      	cmp	r2, r3
 8024654:	d105      	bne.n	8024662 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 8024656:	68fb      	ldr	r3, [r7, #12]
 8024658:	681b      	ldr	r3, [r3, #0]
 802465a:	681a      	ldr	r2, [r3, #0]
 802465c:	68fb      	ldr	r3, [r7, #12]
 802465e:	601a      	str	r2, [r3, #0]
            break;
 8024660:	e007      	b.n	8024672 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 8024662:	68fb      	ldr	r3, [r7, #12]
 8024664:	681b      	ldr	r3, [r3, #0]
 8024666:	60fb      	str	r3, [r7, #12]
 8024668:	68fb      	ldr	r3, [r7, #12]
 802466a:	681b      	ldr	r3, [r3, #0]
 802466c:	2b00      	cmp	r3, #0
 802466e:	d1ed      	bne.n	802464c <lfs_mlist_remove+0x12>
        }
    }
}
 8024670:	bf00      	nop
 8024672:	bf00      	nop
 8024674:	3714      	adds	r7, #20
 8024676:	46bd      	mov	sp, r7
 8024678:	f85d 7b04 	ldr.w	r7, [sp], #4
 802467c:	4770      	bx	lr

0802467e <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 802467e:	b480      	push	{r7}
 8024680:	b083      	sub	sp, #12
 8024682:	af00      	add	r7, sp, #0
 8024684:	6078      	str	r0, [r7, #4]
 8024686:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 8024688:	687b      	ldr	r3, [r7, #4]
 802468a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802468c:	683b      	ldr	r3, [r7, #0]
 802468e:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 8024690:	687b      	ldr	r3, [r7, #4]
 8024692:	683a      	ldr	r2, [r7, #0]
 8024694:	629a      	str	r2, [r3, #40]	; 0x28
}
 8024696:	bf00      	nop
 8024698:	370c      	adds	r7, #12
 802469a:	46bd      	mov	sp, r7
 802469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80246a0:	4770      	bx	lr

080246a2 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 80246a2:	b480      	push	{r7}
 80246a4:	b085      	sub	sp, #20
 80246a6:	af00      	add	r7, sp, #0
 80246a8:	6078      	str	r0, [r7, #4]
 80246aa:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 80246ac:	687b      	ldr	r3, [r7, #4]
 80246ae:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 80246b0:	68fb      	ldr	r3, [r7, #12]
 80246b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80246b4:	683a      	ldr	r2, [r7, #0]
 80246b6:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 80246b8:	68fb      	ldr	r3, [r7, #12]
 80246ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80246bc:	6a1b      	ldr	r3, [r3, #32]
 80246be:	4413      	add	r3, r2
 80246c0:	68fa      	ldr	r2, [r7, #12]
 80246c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80246c4:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 80246c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80246ca:	fb01 f202 	mul.w	r2, r1, r2
 80246ce:	1a9b      	subs	r3, r3, r2
 80246d0:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 80246d2:	68fb      	ldr	r3, [r7, #12]
 80246d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80246d6:	68ba      	ldr	r2, [r7, #8]
 80246d8:	429a      	cmp	r2, r3
 80246da:	d212      	bcs.n	8024702 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 80246dc:	68fb      	ldr	r3, [r7, #12]
 80246de:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80246e0:	68bb      	ldr	r3, [r7, #8]
 80246e2:	095b      	lsrs	r3, r3, #5
 80246e4:	009a      	lsls	r2, r3, #2
 80246e6:	440a      	add	r2, r1
 80246e8:	6811      	ldr	r1, [r2, #0]
 80246ea:	68ba      	ldr	r2, [r7, #8]
 80246ec:	f002 021f 	and.w	r2, r2, #31
 80246f0:	2001      	movs	r0, #1
 80246f2:	fa00 f202 	lsl.w	r2, r0, r2
 80246f6:	68f8      	ldr	r0, [r7, #12]
 80246f8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80246fa:	009b      	lsls	r3, r3, #2
 80246fc:	4403      	add	r3, r0
 80246fe:	430a      	orrs	r2, r1
 8024700:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8024702:	2300      	movs	r3, #0
}
 8024704:	4618      	mov	r0, r3
 8024706:	3714      	adds	r7, #20
 8024708:	46bd      	mov	sp, r7
 802470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802470e:	4770      	bx	lr

08024710 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 8024710:	b480      	push	{r7}
 8024712:	b083      	sub	sp, #12
 8024714:	af00      	add	r7, sp, #0
 8024716:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8024718:	687b      	ldr	r3, [r7, #4]
 802471a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802471c:	6a1a      	ldr	r2, [r3, #32]
 802471e:	687b      	ldr	r3, [r7, #4]
 8024720:	661a      	str	r2, [r3, #96]	; 0x60
}
 8024722:	bf00      	nop
 8024724:	370c      	adds	r7, #12
 8024726:	46bd      	mov	sp, r7
 8024728:	f85d 7b04 	ldr.w	r7, [sp], #4
 802472c:	4770      	bx	lr

0802472e <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 802472e:	b580      	push	{r7, lr}
 8024730:	b082      	sub	sp, #8
 8024732:	af00      	add	r7, sp, #0
 8024734:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 8024736:	687b      	ldr	r3, [r7, #4]
 8024738:	2200      	movs	r2, #0
 802473a:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 802473c:	687b      	ldr	r3, [r7, #4]
 802473e:	2200      	movs	r2, #0
 8024740:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 8024742:	6878      	ldr	r0, [r7, #4]
 8024744:	f7ff ffe4 	bl	8024710 <lfs_alloc_ack>
}
 8024748:	bf00      	nop
 802474a:	3708      	adds	r7, #8
 802474c:	46bd      	mov	sp, r7
 802474e:	bd80      	pop	{r7, pc}

08024750 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8024750:	b580      	push	{r7, lr}
 8024752:	b086      	sub	sp, #24
 8024754:	af02      	add	r7, sp, #8
 8024756:	6078      	str	r0, [r7, #4]
 8024758:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 802475a:	e04f      	b.n	80247fc <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 802475c:	687b      	ldr	r3, [r7, #4]
 802475e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024760:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8024762:	687b      	ldr	r3, [r7, #4]
 8024764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8024766:	1c5a      	adds	r2, r3, #1
 8024768:	687b      	ldr	r3, [r7, #4]
 802476a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 802476c:	687b      	ldr	r3, [r7, #4]
 802476e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8024770:	1e5a      	subs	r2, r3, #1
 8024772:	687b      	ldr	r3, [r7, #4]
 8024774:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8024776:	687b      	ldr	r3, [r7, #4]
 8024778:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 802477a:	68bb      	ldr	r3, [r7, #8]
 802477c:	095b      	lsrs	r3, r3, #5
 802477e:	009b      	lsls	r3, r3, #2
 8024780:	4413      	add	r3, r2
 8024782:	681a      	ldr	r2, [r3, #0]
 8024784:	68bb      	ldr	r3, [r7, #8]
 8024786:	f003 031f 	and.w	r3, r3, #31
 802478a:	2101      	movs	r1, #1
 802478c:	fa01 f303 	lsl.w	r3, r1, r3
 8024790:	4013      	ands	r3, r2
 8024792:	2b00      	cmp	r3, #0
 8024794:	d132      	bne.n	80247fc <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8024796:	687b      	ldr	r3, [r7, #4]
 8024798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 802479a:	68bb      	ldr	r3, [r7, #8]
 802479c:	4413      	add	r3, r2
 802479e:	687a      	ldr	r2, [r7, #4]
 80247a0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80247a2:	6a12      	ldr	r2, [r2, #32]
 80247a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80247a8:	fb01 f202 	mul.w	r2, r1, r2
 80247ac:	1a9a      	subs	r2, r3, r2
 80247ae:	683b      	ldr	r3, [r7, #0]
 80247b0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 80247b2:	e009      	b.n	80247c8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 80247b4:	687b      	ldr	r3, [r7, #4]
 80247b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80247b8:	1c5a      	adds	r2, r3, #1
 80247ba:	687b      	ldr	r3, [r7, #4]
 80247bc:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 80247be:	687b      	ldr	r3, [r7, #4]
 80247c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80247c2:	1e5a      	subs	r2, r3, #1
 80247c4:	687b      	ldr	r3, [r7, #4]
 80247c6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 80247c8:	687b      	ldr	r3, [r7, #4]
 80247ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80247cc:	687b      	ldr	r3, [r7, #4]
 80247ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80247d0:	429a      	cmp	r2, r3
 80247d2:	d011      	beq.n	80247f8 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 80247d4:	687b      	ldr	r3, [r7, #4]
 80247d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80247d8:	687b      	ldr	r3, [r7, #4]
 80247da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80247dc:	095b      	lsrs	r3, r3, #5
 80247de:	009b      	lsls	r3, r3, #2
 80247e0:	4413      	add	r3, r2
 80247e2:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 80247e4:	687b      	ldr	r3, [r7, #4]
 80247e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80247e8:	f003 031f 	and.w	r3, r3, #31
 80247ec:	2101      	movs	r1, #1
 80247ee:	fa01 f303 	lsl.w	r3, r1, r3
 80247f2:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 80247f4:	2b00      	cmp	r3, #0
 80247f6:	d1dd      	bne.n	80247b4 <lfs_alloc+0x64>
                }

                return 0;
 80247f8:	2300      	movs	r3, #0
 80247fa:	e050      	b.n	802489e <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 80247fc:	687b      	ldr	r3, [r7, #4]
 80247fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024800:	687b      	ldr	r3, [r7, #4]
 8024802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024804:	429a      	cmp	r2, r3
 8024806:	d1a9      	bne.n	802475c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8024808:	687b      	ldr	r3, [r7, #4]
 802480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802480c:	2b00      	cmp	r3, #0
 802480e:	d10f      	bne.n	8024830 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 8024810:	687b      	ldr	r3, [r7, #4]
 8024812:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8024814:	687b      	ldr	r3, [r7, #4]
 8024816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8024818:	4413      	add	r3, r2
 802481a:	4a23      	ldr	r2, [pc, #140]	; (80248a8 <lfs_alloc+0x158>)
 802481c:	9200      	str	r2, [sp, #0]
 802481e:	f240 2247 	movw	r2, #583	; 0x247
 8024822:	4922      	ldr	r1, [pc, #136]	; (80248ac <lfs_alloc+0x15c>)
 8024824:	4822      	ldr	r0, [pc, #136]	; (80248b0 <lfs_alloc+0x160>)
 8024826:	f008 ffab 	bl	802d780 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 802482a:	f06f 031b 	mvn.w	r3, #27
 802482e:	e036      	b.n	802489e <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8024830:	687b      	ldr	r3, [r7, #4]
 8024832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8024834:	687b      	ldr	r3, [r7, #4]
 8024836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8024838:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 802483a:	687a      	ldr	r2, [r7, #4]
 802483c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802483e:	6a12      	ldr	r2, [r2, #32]
 8024840:	fbb3 f1f2 	udiv	r1, r3, r2
 8024844:	fb01 f202 	mul.w	r2, r1, r2
 8024848:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 802484a:	687b      	ldr	r3, [r7, #4]
 802484c:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 802484e:	687b      	ldr	r3, [r7, #4]
 8024850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024854:	00da      	lsls	r2, r3, #3
 8024856:	687b      	ldr	r3, [r7, #4]
 8024858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802485a:	4619      	mov	r1, r3
 802485c:	4610      	mov	r0, r2
 802485e:	f7ff f811 	bl	8023884 <lfs_min>
 8024862:	4602      	mov	r2, r0
 8024864:	687b      	ldr	r3, [r7, #4]
 8024866:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8024868:	687b      	ldr	r3, [r7, #4]
 802486a:	2200      	movs	r2, #0
 802486c:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 802486e:	687b      	ldr	r3, [r7, #4]
 8024870:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8024872:	687b      	ldr	r3, [r7, #4]
 8024874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8024878:	461a      	mov	r2, r3
 802487a:	2100      	movs	r1, #0
 802487c:	f009 f916 	bl	802daac <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 8024880:	2301      	movs	r3, #1
 8024882:	687a      	ldr	r2, [r7, #4]
 8024884:	490b      	ldr	r1, [pc, #44]	; (80248b4 <lfs_alloc+0x164>)
 8024886:	6878      	ldr	r0, [r7, #4]
 8024888:	f005 fb3e 	bl	8029f08 <lfs_fs_rawtraverse>
 802488c:	60f8      	str	r0, [r7, #12]
        if (err) {
 802488e:	68fb      	ldr	r3, [r7, #12]
 8024890:	2b00      	cmp	r3, #0
 8024892:	f43f af62 	beq.w	802475a <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 8024896:	6878      	ldr	r0, [r7, #4]
 8024898:	f7ff ff49 	bl	802472e <lfs_alloc_drop>
            return err;
 802489c:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 802489e:	4618      	mov	r0, r3
 80248a0:	3710      	adds	r7, #16
 80248a2:	46bd      	mov	sp, r7
 80248a4:	bd80      	pop	{r7, pc}
 80248a6:	bf00      	nop
 80248a8:	08033914 	.word	0x08033914
 80248ac:	08033800 	.word	0x08033800
 80248b0:	080338ec 	.word	0x080338ec
 80248b4:	080246a3 	.word	0x080246a3

080248b8 <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 80248b8:	b590      	push	{r4, r7, lr}
 80248ba:	b08f      	sub	sp, #60	; 0x3c
 80248bc:	af04      	add	r7, sp, #16
 80248be:	60f8      	str	r0, [r7, #12]
 80248c0:	60b9      	str	r1, [r7, #8]
 80248c2:	607a      	str	r2, [r7, #4]
 80248c4:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 80248c6:	68bb      	ldr	r3, [r7, #8]
 80248c8:	68db      	ldr	r3, [r3, #12]
 80248ca:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 80248cc:	68bb      	ldr	r3, [r7, #8]
 80248ce:	691b      	ldr	r3, [r3, #16]
 80248d0:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 80248d2:	2300      	movs	r3, #0
 80248d4:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80248d6:	68fb      	ldr	r3, [r7, #12]
 80248d8:	333c      	adds	r3, #60	; 0x3c
 80248da:	68ba      	ldr	r2, [r7, #8]
 80248dc:	4611      	mov	r1, r2
 80248de:	4618      	mov	r0, r3
 80248e0:	f7ff fd8e 	bl	8024400 <lfs_gstate_hasmovehere>
 80248e4:	4603      	mov	r3, r0
 80248e6:	2b00      	cmp	r3, #0
 80248e8:	f000 80ba 	beq.w	8024a60 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 80248ec:	6878      	ldr	r0, [r7, #4]
 80248ee:	f7ff fcdf 	bl	80242b0 <lfs_tag_id>
 80248f2:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 80248f4:	2b00      	cmp	r3, #0
 80248f6:	f000 80b3 	beq.w	8024a60 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 80248fa:	68fb      	ldr	r3, [r7, #12]
 80248fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80248fe:	4618      	mov	r0, r3
 8024900:	f7ff fcd6 	bl	80242b0 <lfs_tag_id>
 8024904:	4603      	mov	r3, r0
 8024906:	461c      	mov	r4, r3
 8024908:	6838      	ldr	r0, [r7, #0]
 802490a:	f7ff fcd1 	bl	80242b0 <lfs_tag_id>
 802490e:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 8024910:	429c      	cmp	r4, r3
 8024912:	f200 80a5 	bhi.w	8024a60 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8024916:	6a3b      	ldr	r3, [r7, #32]
 8024918:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802491c:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 802491e:	e09f      	b.n	8024a60 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 8024920:	693b      	ldr	r3, [r7, #16]
 8024922:	4618      	mov	r0, r3
 8024924:	f7ff fce1 	bl	80242ea <lfs_tag_dsize>
 8024928:	4602      	mov	r2, r0
 802492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802492c:	1a9b      	subs	r3, r3, r2
 802492e:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8024930:	693b      	ldr	r3, [r7, #16]
 8024932:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8024934:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 8024936:	68bb      	ldr	r3, [r7, #8]
 8024938:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 802493a:	2204      	movs	r2, #4
 802493c:	9203      	str	r2, [sp, #12]
 802493e:	f107 0210 	add.w	r2, r7, #16
 8024942:	9202      	str	r2, [sp, #8]
 8024944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024946:	9201      	str	r2, [sp, #4]
 8024948:	9300      	str	r3, [sp, #0]
 802494a:	2304      	movs	r3, #4
 802494c:	460a      	mov	r2, r1
 802494e:	2100      	movs	r1, #0
 8024950:	68f8      	ldr	r0, [r7, #12]
 8024952:	f7ff f873 	bl	8023a3c <lfs_bd_read>
 8024956:	61b8      	str	r0, [r7, #24]
        if (err) {
 8024958:	69bb      	ldr	r3, [r7, #24]
 802495a:	2b00      	cmp	r3, #0
 802495c:	d001      	beq.n	8024962 <lfs_dir_getslice+0xaa>
            return err;
 802495e:	69bb      	ldr	r3, [r7, #24]
 8024960:	e08a      	b.n	8024a78 <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8024962:	693b      	ldr	r3, [r7, #16]
 8024964:	4618      	mov	r0, r3
 8024966:	f7ff f814 	bl	8023992 <lfs_frombe32>
 802496a:	4602      	mov	r2, r0
 802496c:	69fb      	ldr	r3, [r7, #28]
 802496e:	4053      	eors	r3, r2
 8024970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024974:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8024976:	6878      	ldr	r0, [r7, #4]
 8024978:	f7ff fc9a 	bl	80242b0 <lfs_tag_id>
 802497c:	4603      	mov	r3, r0
 802497e:	2b00      	cmp	r3, #0
 8024980:	d02b      	beq.n	80249da <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024982:	69f8      	ldr	r0, [r7, #28]
 8024984:	f7ff fc5a 	bl	802423c <lfs_tag_type1>
 8024988:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 802498a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802498e:	d124      	bne.n	80249da <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8024990:	69f8      	ldr	r0, [r7, #28]
 8024992:	f7ff fc8d 	bl	80242b0 <lfs_tag_id>
 8024996:	4603      	mov	r3, r0
 8024998:	461c      	mov	r4, r3
 802499a:	6a3b      	ldr	r3, [r7, #32]
 802499c:	683a      	ldr	r2, [r7, #0]
 802499e:	1ad3      	subs	r3, r2, r3
 80249a0:	4618      	mov	r0, r3
 80249a2:	f7ff fc85 	bl	80242b0 <lfs_tag_id>
 80249a6:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80249a8:	429c      	cmp	r4, r3
 80249aa:	d816      	bhi.n	80249da <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 80249ac:	6a3b      	ldr	r3, [r7, #32]
 80249ae:	683a      	ldr	r2, [r7, #0]
 80249b0:	1ad2      	subs	r2, r2, r3
 80249b2:	4b33      	ldr	r3, [pc, #204]	; (8024a80 <lfs_dir_getslice+0x1c8>)
 80249b4:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 80249b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80249ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80249be:	69fa      	ldr	r2, [r7, #28]
 80249c0:	429a      	cmp	r2, r3
 80249c2:	d102      	bne.n	80249ca <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 80249c4:	f06f 0301 	mvn.w	r3, #1
 80249c8:	e056      	b.n	8024a78 <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 80249ca:	69f8      	ldr	r0, [r7, #28]
 80249cc:	f7ff fc63 	bl	8024296 <lfs_tag_splice>
 80249d0:	4603      	mov	r3, r0
 80249d2:	029a      	lsls	r2, r3, #10
 80249d4:	6a3b      	ldr	r3, [r7, #32]
 80249d6:	4413      	add	r3, r2
 80249d8:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 80249da:	687a      	ldr	r2, [r7, #4]
 80249dc:	69fb      	ldr	r3, [r7, #28]
 80249de:	401a      	ands	r2, r3
 80249e0:	6a3b      	ldr	r3, [r7, #32]
 80249e2:	6839      	ldr	r1, [r7, #0]
 80249e4:	1ac9      	subs	r1, r1, r3
 80249e6:	687b      	ldr	r3, [r7, #4]
 80249e8:	400b      	ands	r3, r1
 80249ea:	429a      	cmp	r2, r3
 80249ec:	d138      	bne.n	8024a60 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 80249ee:	69f8      	ldr	r0, [r7, #28]
 80249f0:	f7ff fc11 	bl	8024216 <lfs_tag_isdelete>
 80249f4:	4603      	mov	r3, r0
 80249f6:	2b00      	cmp	r3, #0
 80249f8:	d002      	beq.n	8024a00 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 80249fa:	f06f 0301 	mvn.w	r3, #1
 80249fe:	e03b      	b.n	8024a78 <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 8024a00:	69f8      	ldr	r0, [r7, #28]
 8024a02:	f7ff fc65 	bl	80242d0 <lfs_tag_size>
 8024a06:	4603      	mov	r3, r0
 8024a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8024a0a:	4618      	mov	r0, r3
 8024a0c:	f7fe ff3a 	bl	8023884 <lfs_min>
 8024a10:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 8024a12:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8024a14:	68bb      	ldr	r3, [r7, #8]
 8024a16:	681b      	ldr	r3, [r3, #0]
 8024a18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8024a1c:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 8024a1e:	3204      	adds	r2, #4
 8024a20:	6979      	ldr	r1, [r7, #20]
 8024a22:	9103      	str	r1, [sp, #12]
 8024a24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8024a26:	9102      	str	r1, [sp, #8]
 8024a28:	9201      	str	r2, [sp, #4]
 8024a2a:	9300      	str	r3, [sp, #0]
 8024a2c:	697b      	ldr	r3, [r7, #20]
 8024a2e:	4602      	mov	r2, r0
 8024a30:	2100      	movs	r1, #0
 8024a32:	68f8      	ldr	r0, [r7, #12]
 8024a34:	f7ff f802 	bl	8023a3c <lfs_bd_read>
 8024a38:	61b8      	str	r0, [r7, #24]
            if (err) {
 8024a3a:	69bb      	ldr	r3, [r7, #24]
 8024a3c:	2b00      	cmp	r3, #0
 8024a3e:	d001      	beq.n	8024a44 <lfs_dir_getslice+0x18c>
                return err;
 8024a40:	69bb      	ldr	r3, [r7, #24]
 8024a42:	e019      	b.n	8024a78 <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8024a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024a46:	697b      	ldr	r3, [r7, #20]
 8024a48:	18d0      	adds	r0, r2, r3
 8024a4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8024a4c:	697b      	ldr	r3, [r7, #20]
 8024a4e:	1ad3      	subs	r3, r2, r3
 8024a50:	461a      	mov	r2, r3
 8024a52:	2100      	movs	r1, #0
 8024a54:	f009 f82a 	bl	802daac <memset>

            return tag + gdiff;
 8024a58:	6a3a      	ldr	r2, [r7, #32]
 8024a5a:	69fb      	ldr	r3, [r7, #28]
 8024a5c:	4413      	add	r3, r2
 8024a5e:	e00b      	b.n	8024a78 <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8024a60:	693b      	ldr	r3, [r7, #16]
 8024a62:	4618      	mov	r0, r3
 8024a64:	f7ff fc41 	bl	80242ea <lfs_tag_dsize>
 8024a68:	4603      	mov	r3, r0
 8024a6a:	3304      	adds	r3, #4
 8024a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024a6e:	429a      	cmp	r2, r3
 8024a70:	f4bf af56 	bcs.w	8024920 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 8024a74:	f06f 0301 	mvn.w	r3, #1
}
 8024a78:	4618      	mov	r0, r3
 8024a7a:	372c      	adds	r7, #44	; 0x2c
 8024a7c:	46bd      	mov	sp, r7
 8024a7e:	bd90      	pop	{r4, r7, pc}
 8024a80:	000ffc00 	.word	0x000ffc00

08024a84 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8024a84:	b580      	push	{r7, lr}
 8024a86:	b088      	sub	sp, #32
 8024a88:	af04      	add	r7, sp, #16
 8024a8a:	60f8      	str	r0, [r7, #12]
 8024a8c:	60b9      	str	r1, [r7, #8]
 8024a8e:	607a      	str	r2, [r7, #4]
 8024a90:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 8024a92:	6838      	ldr	r0, [r7, #0]
 8024a94:	f7ff fc1c 	bl	80242d0 <lfs_tag_size>
 8024a98:	4603      	mov	r3, r0
 8024a9a:	9302      	str	r3, [sp, #8]
 8024a9c:	69bb      	ldr	r3, [r7, #24]
 8024a9e:	9301      	str	r3, [sp, #4]
 8024aa0:	2300      	movs	r3, #0
 8024aa2:	9300      	str	r3, [sp, #0]
 8024aa4:	683b      	ldr	r3, [r7, #0]
 8024aa6:	687a      	ldr	r2, [r7, #4]
 8024aa8:	68b9      	ldr	r1, [r7, #8]
 8024aaa:	68f8      	ldr	r0, [r7, #12]
 8024aac:	f7ff ff04 	bl	80248b8 <lfs_dir_getslice>
 8024ab0:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 8024ab2:	4618      	mov	r0, r3
 8024ab4:	3710      	adds	r7, #16
 8024ab6:	46bd      	mov	sp, r7
 8024ab8:	bd80      	pop	{r7, pc}

08024aba <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 8024aba:	b580      	push	{r7, lr}
 8024abc:	b08c      	sub	sp, #48	; 0x30
 8024abe:	af04      	add	r7, sp, #16
 8024ac0:	60f8      	str	r0, [r7, #12]
 8024ac2:	60b9      	str	r1, [r7, #8]
 8024ac4:	607a      	str	r2, [r7, #4]
 8024ac6:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 8024ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8024aca:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 8024acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024ad0:	441a      	add	r2, r3
 8024ad2:	68fb      	ldr	r3, [r7, #12]
 8024ad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024ad6:	69db      	ldr	r3, [r3, #28]
 8024ad8:	429a      	cmp	r2, r3
 8024ada:	f240 80c0 	bls.w	8024c5e <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 8024ade:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8024ae2:	e0c1      	b.n	8024c68 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 8024ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024ae6:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024ae8:	687b      	ldr	r3, [r7, #4]
 8024aea:	2b00      	cmp	r3, #0
 8024aec:	d03f      	beq.n	8024b6e <lfs_dir_getread+0xb4>
 8024aee:	687b      	ldr	r3, [r7, #4]
 8024af0:	681b      	ldr	r3, [r3, #0]
 8024af2:	f113 0f02 	cmn.w	r3, #2
 8024af6:	d13a      	bne.n	8024b6e <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8024af8:	687b      	ldr	r3, [r7, #4]
 8024afa:	685a      	ldr	r2, [r3, #4]
 8024afc:	687b      	ldr	r3, [r7, #4]
 8024afe:	689b      	ldr	r3, [r3, #8]
 8024b00:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 8024b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b04:	429a      	cmp	r2, r3
 8024b06:	d232      	bcs.n	8024b6e <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8024b08:	687b      	ldr	r3, [r7, #4]
 8024b0a:	685b      	ldr	r3, [r3, #4]
 8024b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b0e:	429a      	cmp	r2, r3
 8024b10:	d324      	bcc.n	8024b5c <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 8024b12:	687b      	ldr	r3, [r7, #4]
 8024b14:	689a      	ldr	r2, [r3, #8]
 8024b16:	687b      	ldr	r3, [r7, #4]
 8024b18:	6859      	ldr	r1, [r3, #4]
 8024b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024b1c:	1acb      	subs	r3, r1, r3
 8024b1e:	4413      	add	r3, r2
 8024b20:	4619      	mov	r1, r3
 8024b22:	69b8      	ldr	r0, [r7, #24]
 8024b24:	f7fe feae 	bl	8023884 <lfs_min>
 8024b28:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8024b2a:	687b      	ldr	r3, [r7, #4]
 8024b2c:	68da      	ldr	r2, [r3, #12]
 8024b2e:	687b      	ldr	r3, [r7, #4]
 8024b30:	685b      	ldr	r3, [r3, #4]
 8024b32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024b34:	1acb      	subs	r3, r1, r3
 8024b36:	4413      	add	r3, r2
 8024b38:	69ba      	ldr	r2, [r7, #24]
 8024b3a:	4619      	mov	r1, r3
 8024b3c:	69f8      	ldr	r0, [r7, #28]
 8024b3e:	f009 f98a 	bl	802de56 <memcpy>

                data += diff;
 8024b42:	69fa      	ldr	r2, [r7, #28]
 8024b44:	69bb      	ldr	r3, [r7, #24]
 8024b46:	4413      	add	r3, r2
 8024b48:	61fb      	str	r3, [r7, #28]
                off += diff;
 8024b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b4c:	69bb      	ldr	r3, [r7, #24]
 8024b4e:	4413      	add	r3, r2
 8024b50:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024b52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024b54:	69bb      	ldr	r3, [r7, #24]
 8024b56:	1ad3      	subs	r3, r2, r3
 8024b58:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8024b5a:	e080      	b.n	8024c5e <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8024b5c:	687b      	ldr	r3, [r7, #4]
 8024b5e:	685a      	ldr	r2, [r3, #4]
 8024b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024b62:	1ad3      	subs	r3, r2, r3
 8024b64:	4619      	mov	r1, r3
 8024b66:	69b8      	ldr	r0, [r7, #24]
 8024b68:	f7fe fe8c 	bl	8023884 <lfs_min>
 8024b6c:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 8024b6e:	683b      	ldr	r3, [r7, #0]
 8024b70:	681b      	ldr	r3, [r3, #0]
 8024b72:	f113 0f02 	cmn.w	r3, #2
 8024b76:	d13a      	bne.n	8024bee <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8024b78:	683b      	ldr	r3, [r7, #0]
 8024b7a:	685a      	ldr	r2, [r3, #4]
 8024b7c:	683b      	ldr	r3, [r7, #0]
 8024b7e:	689b      	ldr	r3, [r3, #8]
 8024b80:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 8024b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b84:	429a      	cmp	r2, r3
 8024b86:	d232      	bcs.n	8024bee <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8024b88:	683b      	ldr	r3, [r7, #0]
 8024b8a:	685b      	ldr	r3, [r3, #4]
 8024b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024b8e:	429a      	cmp	r2, r3
 8024b90:	d324      	bcc.n	8024bdc <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 8024b92:	683b      	ldr	r3, [r7, #0]
 8024b94:	689a      	ldr	r2, [r3, #8]
 8024b96:	683b      	ldr	r3, [r7, #0]
 8024b98:	6859      	ldr	r1, [r3, #4]
 8024b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024b9c:	1acb      	subs	r3, r1, r3
 8024b9e:	4413      	add	r3, r2
 8024ba0:	4619      	mov	r1, r3
 8024ba2:	69b8      	ldr	r0, [r7, #24]
 8024ba4:	f7fe fe6e 	bl	8023884 <lfs_min>
 8024ba8:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 8024baa:	683b      	ldr	r3, [r7, #0]
 8024bac:	68da      	ldr	r2, [r3, #12]
 8024bae:	683b      	ldr	r3, [r7, #0]
 8024bb0:	685b      	ldr	r3, [r3, #4]
 8024bb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8024bb4:	1acb      	subs	r3, r1, r3
 8024bb6:	4413      	add	r3, r2
 8024bb8:	69ba      	ldr	r2, [r7, #24]
 8024bba:	4619      	mov	r1, r3
 8024bbc:	69f8      	ldr	r0, [r7, #28]
 8024bbe:	f009 f94a 	bl	802de56 <memcpy>

                data += diff;
 8024bc2:	69fa      	ldr	r2, [r7, #28]
 8024bc4:	69bb      	ldr	r3, [r7, #24]
 8024bc6:	4413      	add	r3, r2
 8024bc8:	61fb      	str	r3, [r7, #28]
                off += diff;
 8024bca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024bcc:	69bb      	ldr	r3, [r7, #24]
 8024bce:	4413      	add	r3, r2
 8024bd0:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 8024bd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8024bd4:	69bb      	ldr	r3, [r7, #24]
 8024bd6:	1ad3      	subs	r3, r2, r3
 8024bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8024bda:	e040      	b.n	8024c5e <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 8024bdc:	683b      	ldr	r3, [r7, #0]
 8024bde:	685a      	ldr	r2, [r3, #4]
 8024be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8024be2:	1ad3      	subs	r3, r2, r3
 8024be4:	4619      	mov	r1, r3
 8024be6:	69b8      	ldr	r0, [r7, #24]
 8024be8:	f7fe fe4c 	bl	8023884 <lfs_min>
 8024bec:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 8024bee:	683b      	ldr	r3, [r7, #0]
 8024bf0:	f06f 0201 	mvn.w	r2, #1
 8024bf4:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8024bf6:	68fb      	ldr	r3, [r7, #12]
 8024bf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024bfa:	695b      	ldr	r3, [r3, #20]
 8024bfc:	4619      	mov	r1, r3
 8024bfe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8024c00:	f7fe fe50 	bl	80238a4 <lfs_aligndown>
 8024c04:	4602      	mov	r2, r0
 8024c06:	683b      	ldr	r3, [r7, #0]
 8024c08:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8024c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024c0e:	441a      	add	r2, r3
 8024c10:	68fb      	ldr	r3, [r7, #12]
 8024c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024c14:	695b      	ldr	r3, [r3, #20]
 8024c16:	4619      	mov	r1, r3
 8024c18:	4610      	mov	r0, r2
 8024c1a:	f7fe fe58 	bl	80238ce <lfs_alignup>
 8024c1e:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 8024c20:	68fb      	ldr	r3, [r7, #12]
 8024c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8024c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8024c26:	4619      	mov	r1, r3
 8024c28:	4610      	mov	r0, r2
 8024c2a:	f7fe fe2b 	bl	8023884 <lfs_min>
 8024c2e:	4602      	mov	r2, r0
 8024c30:	683b      	ldr	r3, [r7, #0]
 8024c32:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024c34:	683b      	ldr	r3, [r7, #0]
 8024c36:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8024c38:	683a      	ldr	r2, [r7, #0]
 8024c3a:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8024c3c:	6839      	ldr	r1, [r7, #0]
 8024c3e:	6889      	ldr	r1, [r1, #8]
 8024c40:	9102      	str	r1, [sp, #8]
 8024c42:	9201      	str	r2, [sp, #4]
 8024c44:	9300      	str	r3, [sp, #0]
 8024c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024c4a:	68b9      	ldr	r1, [r7, #8]
 8024c4c:	68f8      	ldr	r0, [r7, #12]
 8024c4e:	f7ff fe33 	bl	80248b8 <lfs_dir_getslice>
 8024c52:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8024c54:	697b      	ldr	r3, [r7, #20]
 8024c56:	2b00      	cmp	r3, #0
 8024c58:	da01      	bge.n	8024c5e <lfs_dir_getread+0x1a4>
            return err;
 8024c5a:	697b      	ldr	r3, [r7, #20]
 8024c5c:	e004      	b.n	8024c68 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 8024c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8024c60:	2b00      	cmp	r3, #0
 8024c62:	f47f af3f 	bne.w	8024ae4 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8024c66:	2300      	movs	r3, #0
}
 8024c68:	4618      	mov	r0, r3
 8024c6a:	3720      	adds	r7, #32
 8024c6c:	46bd      	mov	sp, r7
 8024c6e:	bd80      	pop	{r7, pc}

08024c70 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 8024c70:	b590      	push	{r4, r7, lr}
 8024c72:	b087      	sub	sp, #28
 8024c74:	af00      	add	r7, sp, #0
 8024c76:	60f8      	str	r0, [r7, #12]
 8024c78:	60b9      	str	r1, [r7, #8]
 8024c7a:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8024c7c:	68fb      	ldr	r3, [r7, #12]
 8024c7e:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024c80:	68bb      	ldr	r3, [r7, #8]
 8024c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8024c86:	2b00      	cmp	r3, #0
 8024c88:	d001      	beq.n	8024c8e <lfs_dir_traverse_filter+0x1e>
 8024c8a:	4b24      	ldr	r3, [pc, #144]	; (8024d1c <lfs_dir_traverse_filter+0xac>)
 8024c8c:	e000      	b.n	8024c90 <lfs_dir_traverse_filter+0x20>
 8024c8e:	4b24      	ldr	r3, [pc, #144]	; (8024d20 <lfs_dir_traverse_filter+0xb0>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 8024c90:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 8024c92:	697b      	ldr	r3, [r7, #20]
 8024c94:	681a      	ldr	r2, [r3, #0]
 8024c96:	68bb      	ldr	r3, [r7, #8]
 8024c98:	405a      	eors	r2, r3
 8024c9a:	693b      	ldr	r3, [r7, #16]
 8024c9c:	4013      	ands	r3, r2
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	d014      	beq.n	8024ccc <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 8024ca2:	697b      	ldr	r3, [r7, #20]
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	4618      	mov	r0, r3
 8024ca8:	f7ff fab5 	bl	8024216 <lfs_tag_isdelete>
 8024cac:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 8024cae:	2b00      	cmp	r3, #0
 8024cb0:	d10c      	bne.n	8024ccc <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 8024cb2:	68bb      	ldr	r3, [r7, #8]
 8024cb4:	4a19      	ldr	r2, [pc, #100]	; (8024d1c <lfs_dir_traverse_filter+0xac>)
 8024cb6:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 8024cb8:	697b      	ldr	r3, [r7, #20]
 8024cba:	6819      	ldr	r1, [r3, #0]
 8024cbc:	4b19      	ldr	r3, [pc, #100]	; (8024d24 <lfs_dir_traverse_filter+0xb4>)
 8024cbe:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8024cc0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8024cc4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 8024cc8:	429a      	cmp	r2, r3
 8024cca:	d104      	bne.n	8024cd6 <lfs_dir_traverse_filter+0x66>
        *filtertag = LFS_MKTAG(LFS_FROM_NOOP, 0, 0);
 8024ccc:	697b      	ldr	r3, [r7, #20]
 8024cce:	2200      	movs	r2, #0
 8024cd0:	601a      	str	r2, [r3, #0]
        return true;
 8024cd2:	2301      	movs	r3, #1
 8024cd4:	e01e      	b.n	8024d14 <lfs_dir_traverse_filter+0xa4>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024cd6:	68b8      	ldr	r0, [r7, #8]
 8024cd8:	f7ff fab0 	bl	802423c <lfs_tag_type1>
 8024cdc:	4603      	mov	r3, r0
 8024cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8024ce2:	d116      	bne.n	8024d12 <lfs_dir_traverse_filter+0xa2>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 8024ce4:	68b8      	ldr	r0, [r7, #8]
 8024ce6:	f7ff fae3 	bl	80242b0 <lfs_tag_id>
 8024cea:	4603      	mov	r3, r0
 8024cec:	461c      	mov	r4, r3
 8024cee:	697b      	ldr	r3, [r7, #20]
 8024cf0:	681b      	ldr	r3, [r3, #0]
 8024cf2:	4618      	mov	r0, r3
 8024cf4:	f7ff fadc 	bl	80242b0 <lfs_tag_id>
 8024cf8:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8024cfa:	429c      	cmp	r4, r3
 8024cfc:	d809      	bhi.n	8024d12 <lfs_dir_traverse_filter+0xa2>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8024cfe:	68b8      	ldr	r0, [r7, #8]
 8024d00:	f7ff fac9 	bl	8024296 <lfs_tag_splice>
 8024d04:	4603      	mov	r3, r0
 8024d06:	029a      	lsls	r2, r3, #10
 8024d08:	697b      	ldr	r3, [r7, #20]
 8024d0a:	681b      	ldr	r3, [r3, #0]
 8024d0c:	441a      	add	r2, r3
 8024d0e:	697b      	ldr	r3, [r7, #20]
 8024d10:	601a      	str	r2, [r3, #0]
    }

    return false;
 8024d12:	2300      	movs	r3, #0
}
 8024d14:	4618      	mov	r0, r3
 8024d16:	371c      	adds	r7, #28
 8024d18:	46bd      	mov	sp, r7
 8024d1a:	bd90      	pop	{r4, r7, pc}
 8024d1c:	7ffffc00 	.word	0x7ffffc00
 8024d20:	700ffc00 	.word	0x700ffc00
 8024d24:	000ffc00 	.word	0x000ffc00

08024d28 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8024d28:	b590      	push	{r4, r7, lr}
 8024d2a:	b0c1      	sub	sp, #260	; 0x104
 8024d2c:	af04      	add	r7, sp, #16
 8024d2e:	60f8      	str	r0, [r7, #12]
 8024d30:	60b9      	str	r1, [r7, #8]
 8024d32:	607a      	str	r2, [r7, #4]
 8024d34:	603b      	str	r3, [r7, #0]
    // This function in inherently recursive, but bounded. To allow tool-based
    // analysis without unnecessary code-cost we use an explicit stack
    struct lfs_dir_traverse stack[LFS_DIR_TRAVERSE_DEPTH-1];
    unsigned sp = 0;
 8024d36:	2300      	movs	r3, #0
 8024d38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    lfs_tag_t tag;
    const void *buffer;
    struct lfs_diskoff disk;
    while (true) {
        {
            if (off+lfs_tag_dsize(ptag) < dir->off) {
 8024d3c:	6838      	ldr	r0, [r7, #0]
 8024d3e:	f7ff fad4 	bl	80242ea <lfs_tag_dsize>
 8024d42:	4602      	mov	r2, r0
 8024d44:	687b      	ldr	r3, [r7, #4]
 8024d46:	441a      	add	r2, r3
 8024d48:	68bb      	ldr	r3, [r7, #8]
 8024d4a:	68db      	ldr	r3, [r3, #12]
 8024d4c:	429a      	cmp	r2, r3
 8024d4e:	d237      	bcs.n	8024dc0 <lfs_dir_traverse+0x98>
                off += lfs_tag_dsize(ptag);
 8024d50:	6838      	ldr	r0, [r7, #0]
 8024d52:	f7ff faca 	bl	80242ea <lfs_tag_dsize>
 8024d56:	4602      	mov	r2, r0
 8024d58:	687b      	ldr	r3, [r7, #4]
 8024d5a:	4413      	add	r3, r2
 8024d5c:	607b      	str	r3, [r7, #4]
                int err = lfs_bd_read(lfs,
 8024d5e:	68f9      	ldr	r1, [r7, #12]
                        NULL, &lfs->rcache, sizeof(tag),
                        dir->pair[0], off, &tag, sizeof(tag));
 8024d60:	68bb      	ldr	r3, [r7, #8]
 8024d62:	681b      	ldr	r3, [r3, #0]
                int err = lfs_bd_read(lfs,
 8024d64:	2204      	movs	r2, #4
 8024d66:	9203      	str	r2, [sp, #12]
 8024d68:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8024d6c:	9202      	str	r2, [sp, #8]
 8024d6e:	687a      	ldr	r2, [r7, #4]
 8024d70:	9201      	str	r2, [sp, #4]
 8024d72:	9300      	str	r3, [sp, #0]
 8024d74:	2304      	movs	r3, #4
 8024d76:	460a      	mov	r2, r1
 8024d78:	2100      	movs	r1, #0
 8024d7a:	68f8      	ldr	r0, [r7, #12]
 8024d7c:	f7fe fe5e 	bl	8023a3c <lfs_bd_read>
 8024d80:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                if (err) {
 8024d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024d88:	2b00      	cmp	r3, #0
 8024d8a:	d002      	beq.n	8024d92 <lfs_dir_traverse+0x6a>
                    return err;
 8024d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8024d90:	e3a6      	b.n	80254e0 <lfs_dir_traverse+0x7b8>
                }

                tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 8024d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024d94:	4618      	mov	r0, r3
 8024d96:	f7fe fdfc 	bl	8023992 <lfs_frombe32>
 8024d9a:	4602      	mov	r2, r0
 8024d9c:	683b      	ldr	r3, [r7, #0]
 8024d9e:	4053      	eors	r3, r2
 8024da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8024da4:	657b      	str	r3, [r7, #84]	; 0x54
                disk.block = dir->pair[0];
 8024da6:	68bb      	ldr	r3, [r7, #8]
 8024da8:	681b      	ldr	r3, [r3, #0]
 8024daa:	64fb      	str	r3, [r7, #76]	; 0x4c
                disk.off = off+sizeof(lfs_tag_t);
 8024dac:	687b      	ldr	r3, [r7, #4]
 8024dae:	3304      	adds	r3, #4
 8024db0:	653b      	str	r3, [r7, #80]	; 0x50
                buffer = &disk;
 8024db2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8024db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                ptag = tag;
 8024dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8024dbc:	603b      	str	r3, [r7, #0]
 8024dbe:	e01b      	b.n	8024df8 <lfs_dir_traverse+0xd0>
            } else if (attrcount > 0) {
 8024dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024dc4:	2b00      	cmp	r3, #0
 8024dc6:	dd13      	ble.n	8024df0 <lfs_dir_traverse+0xc8>
                tag = attrs[0].tag;
 8024dc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	657b      	str	r3, [r7, #84]	; 0x54
                buffer = attrs[0].buffer;
 8024dd0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024dd4:	685b      	ldr	r3, [r3, #4]
 8024dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                attrs += 1;
 8024dda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8024dde:	3308      	adds	r3, #8
 8024de0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
                attrcount -= 1;
 8024de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8024de8:	3b01      	subs	r3, #1
 8024dea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8024dee:	e003      	b.n	8024df8 <lfs_dir_traverse+0xd0>
            } else {
                // finished traversal, pop from stack?
                res = 0;
 8024df0:	2300      	movs	r3, #0
 8024df2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                break;
 8024df6:	e2a2      	b.n	802533e <lfs_dir_traverse+0x616>
            }

            // do we need to filter?
            lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8024df8:	4b7e      	ldr	r3, [pc, #504]	; (8024ff4 <lfs_dir_traverse+0x2cc>)
 8024dfa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 8024dfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8024e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8024e04:	405a      	eors	r2, r3
 8024e06:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8024e0a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8024e0e:	400b      	ands	r3, r1
 8024e10:	4013      	ands	r3, r2
 8024e12:	2b00      	cmp	r3, #0
 8024e14:	f040 8285 	bne.w	8025322 <lfs_dir_traverse+0x5fa>
                continue;
            }

            if (lfs_tag_id(tmask) != 0) {
 8024e18:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8024e1c:	f7ff fa48 	bl	80242b0 <lfs_tag_id>
 8024e20:	4603      	mov	r3, r0
 8024e22:	2b00      	cmp	r3, #0
 8024e24:	f000 80f0 	beq.w	8025008 <lfs_dir_traverse+0x2e0>
                LFS_ASSERT(sp < LFS_DIR_TRAVERSE_DEPTH);
 8024e28:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024e2c:	2b02      	cmp	r3, #2
 8024e2e:	d906      	bls.n	8024e3e <lfs_dir_traverse+0x116>
 8024e30:	4b71      	ldr	r3, [pc, #452]	; (8024ff8 <lfs_dir_traverse+0x2d0>)
 8024e32:	4a72      	ldr	r2, [pc, #456]	; (8024ffc <lfs_dir_traverse+0x2d4>)
 8024e34:	f240 314e 	movw	r1, #846	; 0x34e
 8024e38:	4871      	ldr	r0, [pc, #452]	; (8025000 <lfs_dir_traverse+0x2d8>)
 8024e3a:	f007 fc67 	bl	802c70c <__assert_func>
                // recurse, scan for duplicates, and update tag based on
                // creates/deletes
                stack[sp] = (struct lfs_dir_traverse){
 8024e3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8024e40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e44:	4613      	mov	r3, r2
 8024e46:	011b      	lsls	r3, r3, #4
 8024e48:	1a9b      	subs	r3, r3, r2
 8024e4a:	009b      	lsls	r3, r3, #2
 8024e4c:	33f0      	adds	r3, #240	; 0xf0
 8024e4e:	443b      	add	r3, r7
 8024e50:	3b98      	subs	r3, #152	; 0x98
 8024e52:	68ba      	ldr	r2, [r7, #8]
 8024e54:	601a      	str	r2, [r3, #0]
 8024e56:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e5a:	4613      	mov	r3, r2
 8024e5c:	011b      	lsls	r3, r3, #4
 8024e5e:	1a9b      	subs	r3, r3, r2
 8024e60:	009b      	lsls	r3, r3, #2
 8024e62:	33f0      	adds	r3, #240	; 0xf0
 8024e64:	443b      	add	r3, r7
 8024e66:	3b94      	subs	r3, #148	; 0x94
 8024e68:	687a      	ldr	r2, [r7, #4]
 8024e6a:	601a      	str	r2, [r3, #0]
 8024e6c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e70:	4613      	mov	r3, r2
 8024e72:	011b      	lsls	r3, r3, #4
 8024e74:	1a9b      	subs	r3, r3, r2
 8024e76:	009b      	lsls	r3, r3, #2
 8024e78:	33f0      	adds	r3, #240	; 0xf0
 8024e7a:	443b      	add	r3, r7
 8024e7c:	3b90      	subs	r3, #144	; 0x90
 8024e7e:	683a      	ldr	r2, [r7, #0]
 8024e80:	601a      	str	r2, [r3, #0]
 8024e82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e86:	4613      	mov	r3, r2
 8024e88:	011b      	lsls	r3, r3, #4
 8024e8a:	1a9b      	subs	r3, r3, r2
 8024e8c:	009b      	lsls	r3, r3, #2
 8024e8e:	33f0      	adds	r3, #240	; 0xf0
 8024e90:	443b      	add	r3, r7
 8024e92:	3b8c      	subs	r3, #140	; 0x8c
 8024e94:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8024e98:	601a      	str	r2, [r3, #0]
 8024e9a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024e9e:	4613      	mov	r3, r2
 8024ea0:	011b      	lsls	r3, r3, #4
 8024ea2:	1a9b      	subs	r3, r3, r2
 8024ea4:	009b      	lsls	r3, r3, #2
 8024ea6:	33f0      	adds	r3, #240	; 0xf0
 8024ea8:	443b      	add	r3, r7
 8024eaa:	3b88      	subs	r3, #136	; 0x88
 8024eac:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8024eb0:	601a      	str	r2, [r3, #0]
 8024eb2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024eb6:	4613      	mov	r3, r2
 8024eb8:	011b      	lsls	r3, r3, #4
 8024eba:	1a9b      	subs	r3, r3, r2
 8024ebc:	009b      	lsls	r3, r3, #2
 8024ebe:	33f0      	adds	r3, #240	; 0xf0
 8024ec0:	443b      	add	r3, r7
 8024ec2:	3b84      	subs	r3, #132	; 0x84
 8024ec4:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8024ec8:	601a      	str	r2, [r3, #0]
 8024eca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ece:	4613      	mov	r3, r2
 8024ed0:	011b      	lsls	r3, r3, #4
 8024ed2:	1a9b      	subs	r3, r3, r2
 8024ed4:	009b      	lsls	r3, r3, #2
 8024ed6:	33f0      	adds	r3, #240	; 0xf0
 8024ed8:	443b      	add	r3, r7
 8024eda:	3b80      	subs	r3, #128	; 0x80
 8024edc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8024ee0:	601a      	str	r2, [r3, #0]
 8024ee2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024ee6:	4613      	mov	r3, r2
 8024ee8:	011b      	lsls	r3, r3, #4
 8024eea:	1a9b      	subs	r3, r3, r2
 8024eec:	009b      	lsls	r3, r3, #2
 8024eee:	33f0      	adds	r3, #240	; 0xf0
 8024ef0:	443b      	add	r3, r7
 8024ef2:	3b7c      	subs	r3, #124	; 0x7c
 8024ef4:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 8024ef8:	801a      	strh	r2, [r3, #0]
 8024efa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024efe:	4613      	mov	r3, r2
 8024f00:	011b      	lsls	r3, r3, #4
 8024f02:	1a9b      	subs	r3, r3, r2
 8024f04:	009b      	lsls	r3, r3, #2
 8024f06:	33f0      	adds	r3, #240	; 0xf0
 8024f08:	443b      	add	r3, r7
 8024f0a:	3b7a      	subs	r3, #122	; 0x7a
 8024f0c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8024f10:	801a      	strh	r2, [r3, #0]
 8024f12:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f16:	4613      	mov	r3, r2
 8024f18:	011b      	lsls	r3, r3, #4
 8024f1a:	1a9b      	subs	r3, r3, r2
 8024f1c:	009b      	lsls	r3, r3, #2
 8024f1e:	33f0      	adds	r3, #240	; 0xf0
 8024f20:	443b      	add	r3, r7
 8024f22:	3b78      	subs	r3, #120	; 0x78
 8024f24:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 8024f28:	801a      	strh	r2, [r3, #0]
 8024f2a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f2e:	4613      	mov	r3, r2
 8024f30:	011b      	lsls	r3, r3, #4
 8024f32:	1a9b      	subs	r3, r3, r2
 8024f34:	009b      	lsls	r3, r3, #2
 8024f36:	33f0      	adds	r3, #240	; 0xf0
 8024f38:	443b      	add	r3, r7
 8024f3a:	3b74      	subs	r3, #116	; 0x74
 8024f3c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8024f40:	601a      	str	r2, [r3, #0]
 8024f42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f46:	4613      	mov	r3, r2
 8024f48:	011b      	lsls	r3, r3, #4
 8024f4a:	1a9b      	subs	r3, r3, r2
 8024f4c:	009b      	lsls	r3, r3, #2
 8024f4e:	33f0      	adds	r3, #240	; 0xf0
 8024f50:	443b      	add	r3, r7
 8024f52:	3b70      	subs	r3, #112	; 0x70
 8024f54:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8024f58:	601a      	str	r2, [r3, #0]
 8024f5a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f5e:	4613      	mov	r3, r2
 8024f60:	011b      	lsls	r3, r3, #4
 8024f62:	1a9b      	subs	r3, r3, r2
 8024f64:	009b      	lsls	r3, r3, #2
 8024f66:	33f0      	adds	r3, #240	; 0xf0
 8024f68:	443b      	add	r3, r7
 8024f6a:	3b6c      	subs	r3, #108	; 0x6c
 8024f6c:	6019      	str	r1, [r3, #0]
 8024f6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f72:	4613      	mov	r3, r2
 8024f74:	011b      	lsls	r3, r3, #4
 8024f76:	1a9b      	subs	r3, r3, r2
 8024f78:	009b      	lsls	r3, r3, #2
 8024f7a:	33f0      	adds	r3, #240	; 0xf0
 8024f7c:	443b      	add	r3, r7
 8024f7e:	3b68      	subs	r3, #104	; 0x68
 8024f80:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8024f84:	601a      	str	r2, [r3, #0]
 8024f86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8024f8a:	4613      	mov	r3, r2
 8024f8c:	011b      	lsls	r3, r3, #4
 8024f8e:	1a9b      	subs	r3, r3, r2
 8024f90:	009b      	lsls	r3, r3, #2
 8024f92:	33f0      	adds	r3, #240	; 0xf0
 8024f94:	443b      	add	r3, r7
 8024f96:	3b68      	subs	r3, #104	; 0x68
 8024f98:	3304      	adds	r3, #4
 8024f9a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8024f9e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8024fa2:	e883 0003 	stmia.w	r3, {r0, r1}
                    .data       = data,
                    .tag        = tag,
                    .buffer     = buffer,
                    .disk       = disk,
                };
                sp += 1;
 8024fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024faa:	3301      	adds	r3, #1
 8024fac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

                tmask = 0;
 8024fb0:	2300      	movs	r3, #0
 8024fb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
                ttag = 0;
 8024fb6:	2300      	movs	r3, #0
 8024fb8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
                begin = 0;
 8024fbc:	2300      	movs	r3, #0
 8024fbe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
                end = 0;
 8024fc2:	2300      	movs	r3, #0
 8024fc4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
                diff = 0;
 8024fc8:	2300      	movs	r3, #0
 8024fca:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
                cb = lfs_dir_traverse_filter;
 8024fce:	4b0d      	ldr	r3, [pc, #52]	; (8025004 <lfs_dir_traverse+0x2dc>)
 8024fd0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
                data = &stack[sp-1].tag;
 8024fd4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8024fd8:	1e5a      	subs	r2, r3, #1
 8024fda:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8024fde:	4613      	mov	r3, r2
 8024fe0:	011b      	lsls	r3, r3, #4
 8024fe2:	1a9b      	subs	r3, r3, r2
 8024fe4:	009b      	lsls	r3, r3, #2
 8024fe6:	3328      	adds	r3, #40	; 0x28
 8024fe8:	440b      	add	r3, r1
 8024fea:	3304      	adds	r3, #4
 8024fec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
                continue;
 8024ff0:	e19e      	b.n	8025330 <lfs_dir_traverse+0x608>
 8024ff2:	bf00      	nop
 8024ff4:	7ff00000 	.word	0x7ff00000
 8024ff8:	08033918 	.word	0x08033918
 8024ffc:	08034af8 	.word	0x08034af8
 8025000:	08033800 	.word	0x08033800
 8025004:	08024c71 	.word	0x08024c71
            }
        }

popped:
 8025008:	bf00      	nop
        // in filter range?
        if (lfs_tag_id(tmask) != 0 &&
 802500a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 802500e:	f7ff f94f 	bl	80242b0 <lfs_tag_id>
 8025012:	4603      	mov	r3, r0
 8025014:	2b00      	cmp	r3, #0
 8025016:	d015      	beq.n	8025044 <lfs_dir_traverse+0x31c>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8025018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802501a:	4618      	mov	r0, r3
 802501c:	f7ff f948 	bl	80242b0 <lfs_tag_id>
 8025020:	4603      	mov	r3, r0
 8025022:	461a      	mov	r2, r3
        if (lfs_tag_id(tmask) != 0 &&
 8025024:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8025028:	4293      	cmp	r3, r2
 802502a:	f200 817c 	bhi.w	8025326 <lfs_dir_traverse+0x5fe>
                !(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 802502e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025030:	4618      	mov	r0, r3
 8025032:	f7ff f93d 	bl	80242b0 <lfs_tag_id>
 8025036:	4603      	mov	r3, r0
 8025038:	461a      	mov	r2, r3
 802503a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 802503e:	4293      	cmp	r3, r2
 8025040:	f240 8171 	bls.w	8025326 <lfs_dir_traverse+0x5fe>
            continue;
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 8025044:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025046:	4618      	mov	r0, r3
 8025048:	f7ff f908 	bl	802425c <lfs_tag_type3>
 802504c:	4603      	mov	r3, r0
 802504e:	2b00      	cmp	r3, #0
 8025050:	f43f ae74 	beq.w	8024d3c <lfs_dir_traverse+0x14>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 8025054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025056:	4618      	mov	r0, r3
 8025058:	f7ff f900 	bl	802425c <lfs_tag_type3>
 802505c:	4603      	mov	r3, r0
 802505e:	461a      	mov	r2, r3
 8025060:	f240 1301 	movw	r3, #257	; 0x101
 8025064:	429a      	cmp	r2, r3
 8025066:	f040 80e0 	bne.w	802522a <lfs_dir_traverse+0x502>
            // However we don't actually care about filtering the second set of
            // tags, since duplicate tags have no effect when filtering.
            //
            // This check skips this unnecessary recursive filtering explicitly,
            // reducing this runtime from O(n^3) to O(n^2).
            if (cb == lfs_dir_traverse_filter) {
 802506a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 802506e:	4ab1      	ldr	r2, [pc, #708]	; (8025334 <lfs_dir_traverse+0x60c>)
 8025070:	4293      	cmp	r3, r2
 8025072:	f000 815a 	beq.w	802532a <lfs_dir_traverse+0x602>
                continue;
            }

            // recurse into move
            stack[sp] = (struct lfs_dir_traverse){
 8025076:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802507a:	4613      	mov	r3, r2
 802507c:	011b      	lsls	r3, r3, #4
 802507e:	1a9b      	subs	r3, r3, r2
 8025080:	009b      	lsls	r3, r3, #2
 8025082:	33f0      	adds	r3, #240	; 0xf0
 8025084:	443b      	add	r3, r7
 8025086:	3b98      	subs	r3, #152	; 0x98
 8025088:	4618      	mov	r0, r3
 802508a:	233c      	movs	r3, #60	; 0x3c
 802508c:	461a      	mov	r2, r3
 802508e:	2100      	movs	r1, #0
 8025090:	f008 fd0c 	bl	802daac <memset>
 8025094:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025098:	4613      	mov	r3, r2
 802509a:	011b      	lsls	r3, r3, #4
 802509c:	1a9b      	subs	r3, r3, r2
 802509e:	009b      	lsls	r3, r3, #2
 80250a0:	33f0      	adds	r3, #240	; 0xf0
 80250a2:	443b      	add	r3, r7
 80250a4:	3b98      	subs	r3, #152	; 0x98
 80250a6:	68ba      	ldr	r2, [r7, #8]
 80250a8:	601a      	str	r2, [r3, #0]
 80250aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80250ae:	4613      	mov	r3, r2
 80250b0:	011b      	lsls	r3, r3, #4
 80250b2:	1a9b      	subs	r3, r3, r2
 80250b4:	009b      	lsls	r3, r3, #2
 80250b6:	33f0      	adds	r3, #240	; 0xf0
 80250b8:	443b      	add	r3, r7
 80250ba:	3b94      	subs	r3, #148	; 0x94
 80250bc:	687a      	ldr	r2, [r7, #4]
 80250be:	601a      	str	r2, [r3, #0]
 80250c0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80250c4:	4613      	mov	r3, r2
 80250c6:	011b      	lsls	r3, r3, #4
 80250c8:	1a9b      	subs	r3, r3, r2
 80250ca:	009b      	lsls	r3, r3, #2
 80250cc:	33f0      	adds	r3, #240	; 0xf0
 80250ce:	443b      	add	r3, r7
 80250d0:	3b90      	subs	r3, #144	; 0x90
 80250d2:	683a      	ldr	r2, [r7, #0]
 80250d4:	601a      	str	r2, [r3, #0]
 80250d6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80250da:	4613      	mov	r3, r2
 80250dc:	011b      	lsls	r3, r3, #4
 80250de:	1a9b      	subs	r3, r3, r2
 80250e0:	009b      	lsls	r3, r3, #2
 80250e2:	33f0      	adds	r3, #240	; 0xf0
 80250e4:	443b      	add	r3, r7
 80250e6:	3b8c      	subs	r3, #140	; 0x8c
 80250e8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80250ec:	601a      	str	r2, [r3, #0]
 80250ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80250f2:	4613      	mov	r3, r2
 80250f4:	011b      	lsls	r3, r3, #4
 80250f6:	1a9b      	subs	r3, r3, r2
 80250f8:	009b      	lsls	r3, r3, #2
 80250fa:	33f0      	adds	r3, #240	; 0xf0
 80250fc:	443b      	add	r3, r7
 80250fe:	3b88      	subs	r3, #136	; 0x88
 8025100:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8025104:	601a      	str	r2, [r3, #0]
 8025106:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802510a:	4613      	mov	r3, r2
 802510c:	011b      	lsls	r3, r3, #4
 802510e:	1a9b      	subs	r3, r3, r2
 8025110:	009b      	lsls	r3, r3, #2
 8025112:	33f0      	adds	r3, #240	; 0xf0
 8025114:	443b      	add	r3, r7
 8025116:	3b84      	subs	r3, #132	; 0x84
 8025118:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 802511c:	601a      	str	r2, [r3, #0]
 802511e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025122:	4613      	mov	r3, r2
 8025124:	011b      	lsls	r3, r3, #4
 8025126:	1a9b      	subs	r3, r3, r2
 8025128:	009b      	lsls	r3, r3, #2
 802512a:	33f0      	adds	r3, #240	; 0xf0
 802512c:	443b      	add	r3, r7
 802512e:	3b80      	subs	r3, #128	; 0x80
 8025130:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8025134:	601a      	str	r2, [r3, #0]
 8025136:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802513a:	4613      	mov	r3, r2
 802513c:	011b      	lsls	r3, r3, #4
 802513e:	1a9b      	subs	r3, r3, r2
 8025140:	009b      	lsls	r3, r3, #2
 8025142:	33f0      	adds	r3, #240	; 0xf0
 8025144:	443b      	add	r3, r7
 8025146:	3b7c      	subs	r3, #124	; 0x7c
 8025148:	f8b7 2110 	ldrh.w	r2, [r7, #272]	; 0x110
 802514c:	801a      	strh	r2, [r3, #0]
 802514e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025152:	4613      	mov	r3, r2
 8025154:	011b      	lsls	r3, r3, #4
 8025156:	1a9b      	subs	r3, r3, r2
 8025158:	009b      	lsls	r3, r3, #2
 802515a:	33f0      	adds	r3, #240	; 0xf0
 802515c:	443b      	add	r3, r7
 802515e:	3b7a      	subs	r3, #122	; 0x7a
 8025160:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8025164:	801a      	strh	r2, [r3, #0]
 8025166:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802516a:	4613      	mov	r3, r2
 802516c:	011b      	lsls	r3, r3, #4
 802516e:	1a9b      	subs	r3, r3, r2
 8025170:	009b      	lsls	r3, r3, #2
 8025172:	33f0      	adds	r3, #240	; 0xf0
 8025174:	443b      	add	r3, r7
 8025176:	3b78      	subs	r3, #120	; 0x78
 8025178:	f8b7 2118 	ldrh.w	r2, [r7, #280]	; 0x118
 802517c:	801a      	strh	r2, [r3, #0]
 802517e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8025182:	4613      	mov	r3, r2
 8025184:	011b      	lsls	r3, r3, #4
 8025186:	1a9b      	subs	r3, r3, r2
 8025188:	009b      	lsls	r3, r3, #2
 802518a:	33f0      	adds	r3, #240	; 0xf0
 802518c:	443b      	add	r3, r7
 802518e:	3b74      	subs	r3, #116	; 0x74
 8025190:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8025194:	601a      	str	r2, [r3, #0]
 8025196:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 802519a:	4613      	mov	r3, r2
 802519c:	011b      	lsls	r3, r3, #4
 802519e:	1a9b      	subs	r3, r3, r2
 80251a0:	009b      	lsls	r3, r3, #2
 80251a2:	33f0      	adds	r3, #240	; 0xf0
 80251a4:	443b      	add	r3, r7
 80251a6:	3b70      	subs	r3, #112	; 0x70
 80251a8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80251ac:	601a      	str	r2, [r3, #0]
                .diff       = diff,
                .cb         = cb,
                .data       = data,
                .tag        = LFS_MKTAG(LFS_FROM_NOOP, 0, 0),
            };
            sp += 1;
 80251ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80251b2:	3301      	adds	r3, #1
 80251b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

            uint16_t fromid = lfs_tag_size(tag);
 80251b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80251ba:	4618      	mov	r0, r3
 80251bc:	f7ff f888 	bl	80242d0 <lfs_tag_size>
 80251c0:	4603      	mov	r3, r0
 80251c2:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
            uint16_t toid = lfs_tag_id(tag);
 80251c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80251c8:	4618      	mov	r0, r3
 80251ca:	f7ff f871 	bl	80242b0 <lfs_tag_id>
 80251ce:	4603      	mov	r3, r0
 80251d0:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
            dir = buffer;
 80251d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80251d8:	60bb      	str	r3, [r7, #8]
            off = 0;
 80251da:	2300      	movs	r3, #0
 80251dc:	607b      	str	r3, [r7, #4]
            ptag = 0xffffffff;
 80251de:	f04f 33ff 	mov.w	r3, #4294967295
 80251e2:	603b      	str	r3, [r7, #0]
            attrs = NULL;
 80251e4:	2300      	movs	r3, #0
 80251e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            attrcount = 0;
 80251ea:	2300      	movs	r3, #0
 80251ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
            tmask = LFS_MKTAG(0x600, 0x3ff, 0);
 80251f0:	4b51      	ldr	r3, [pc, #324]	; (8025338 <lfs_dir_traverse+0x610>)
 80251f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
            ttag = LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0);
 80251f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80251fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            begin = fromid;
 80251fe:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8025202:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
            end = fromid+1;
 8025206:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 802520a:	3301      	adds	r3, #1
 802520c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
            diff = toid-fromid+diff;
 8025210:	f8b7 20d0 	ldrh.w	r2, [r7, #208]	; 0xd0
 8025214:	f8b7 30d2 	ldrh.w	r3, [r7, #210]	; 0xd2
 8025218:	1ad3      	subs	r3, r2, r3
 802521a:	b29a      	uxth	r2, r3
 802521c:	f8b7 3118 	ldrh.w	r3, [r7, #280]	; 0x118
 8025220:	4413      	add	r3, r2
 8025222:	b29b      	uxth	r3, r3
 8025224:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
 8025228:	e588      	b.n	8024d3c <lfs_dir_traverse+0x14>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 802522a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802522c:	4618      	mov	r0, r3
 802522e:	f7ff f815 	bl	802425c <lfs_tag_type3>
 8025232:	4603      	mov	r3, r0
 8025234:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8025238:	d159      	bne.n	80252ee <lfs_dir_traverse+0x5c6>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 802523a:	2300      	movs	r3, #0
 802523c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8025240:	e04b      	b.n	80252da <lfs_dir_traverse+0x5b2>
                const struct lfs_attr *a = buffer;
 8025242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8025246:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 802524a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 802524e:	4613      	mov	r3, r2
 8025250:	005b      	lsls	r3, r3, #1
 8025252:	4413      	add	r3, r2
 8025254:	009b      	lsls	r3, r3, #2
 8025256:	461a      	mov	r2, r3
 8025258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 802525c:	4413      	add	r3, r2
 802525e:	781b      	ldrb	r3, [r3, #0]
 8025260:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8025264:	051c      	lsls	r4, r3, #20
 8025266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025268:	4618      	mov	r0, r3
 802526a:	f7ff f821 	bl	80242b0 <lfs_tag_id>
 802526e:	4603      	mov	r3, r0
 8025270:	461a      	mov	r2, r3
 8025272:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 8025276:	4413      	add	r3, r2
 8025278:	029b      	lsls	r3, r3, #10
 802527a:	ea44 0103 	orr.w	r1, r4, r3
 802527e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8025282:	4613      	mov	r3, r2
 8025284:	005b      	lsls	r3, r3, #1
 8025286:	4413      	add	r3, r2
 8025288:	009b      	lsls	r3, r3, #2
 802528a:	461a      	mov	r2, r3
 802528c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8025290:	4413      	add	r3, r2
 8025292:	689b      	ldr	r3, [r3, #8]
 8025294:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 8025296:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 802529a:	4613      	mov	r3, r2
 802529c:	005b      	lsls	r3, r3, #1
 802529e:	4413      	add	r3, r2
 80252a0:	009b      	lsls	r3, r3, #2
 80252a2:	461a      	mov	r2, r3
 80252a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80252a8:	4413      	add	r3, r2
 80252aa:	685a      	ldr	r2, [r3, #4]
                res = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80252ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80252b0:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80252b4:	4798      	blx	r3
 80252b6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
                if (res < 0) {
 80252ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80252be:	2b00      	cmp	r3, #0
 80252c0:	da02      	bge.n	80252c8 <lfs_dir_traverse+0x5a0>
                    return res;
 80252c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80252c6:	e10b      	b.n	80254e0 <lfs_dir_traverse+0x7b8>
                }

                if (res) {
 80252c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80252cc:	2b00      	cmp	r3, #0
 80252ce:	d12e      	bne.n	802532e <lfs_dir_traverse+0x606>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80252d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80252d4:	3301      	adds	r3, #1
 80252d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80252da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80252dc:	4618      	mov	r0, r3
 80252de:	f7fe fff7 	bl	80242d0 <lfs_tag_size>
 80252e2:	4602      	mov	r2, r0
 80252e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80252e8:	4293      	cmp	r3, r2
 80252ea:	d3aa      	bcc.n	8025242 <lfs_dir_traverse+0x51a>
 80252ec:	e526      	b.n	8024d3c <lfs_dir_traverse+0x14>
                    break;
                }
            }
        } else {
            res = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80252ee:	f9b7 3118 	ldrsh.w	r3, [r7, #280]	; 0x118
 80252f2:	029a      	lsls	r2, r3, #10
 80252f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80252f6:	18d1      	adds	r1, r2, r3
 80252f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80252fc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8025300:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8025304:	4798      	blx	r3
 8025306:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
            if (res < 0) {
 802530a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802530e:	2b00      	cmp	r3, #0
 8025310:	da02      	bge.n	8025318 <lfs_dir_traverse+0x5f0>
                return res;
 8025312:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8025316:	e0e3      	b.n	80254e0 <lfs_dir_traverse+0x7b8>
            }

            if (res) {
 8025318:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 802531c:	2b00      	cmp	r3, #0
 802531e:	d10d      	bne.n	802533c <lfs_dir_traverse+0x614>
 8025320:	e50c      	b.n	8024d3c <lfs_dir_traverse+0x14>
                continue;
 8025322:	bf00      	nop
 8025324:	e50a      	b.n	8024d3c <lfs_dir_traverse+0x14>
            continue;
 8025326:	bf00      	nop
 8025328:	e508      	b.n	8024d3c <lfs_dir_traverse+0x14>
                continue;
 802532a:	bf00      	nop
 802532c:	e506      	b.n	8024d3c <lfs_dir_traverse+0x14>
                    break;
 802532e:	bf00      	nop
        {
 8025330:	e504      	b.n	8024d3c <lfs_dir_traverse+0x14>
 8025332:	bf00      	nop
 8025334:	08024c71 	.word	0x08024c71
 8025338:	600ffc00 	.word	0x600ffc00
                break;
 802533c:	bf00      	nop
            }
        }
    }

    if (sp > 0) {
 802533e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025342:	2b00      	cmp	r3, #0
 8025344:	f000 80ca 	beq.w	80254dc <lfs_dir_traverse+0x7b4>
        // pop from the stack and return, fortunately all pops share
        // a destination
        dir         = stack[sp-1].dir;
 8025348:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802534c:	1e5a      	subs	r2, r3, #1
 802534e:	4613      	mov	r3, r2
 8025350:	011b      	lsls	r3, r3, #4
 8025352:	1a9b      	subs	r3, r3, r2
 8025354:	009b      	lsls	r3, r3, #2
 8025356:	33f0      	adds	r3, #240	; 0xf0
 8025358:	443b      	add	r3, r7
 802535a:	3b98      	subs	r3, #152	; 0x98
 802535c:	681b      	ldr	r3, [r3, #0]
 802535e:	60bb      	str	r3, [r7, #8]
        off         = stack[sp-1].off;
 8025360:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025364:	1e5a      	subs	r2, r3, #1
 8025366:	4613      	mov	r3, r2
 8025368:	011b      	lsls	r3, r3, #4
 802536a:	1a9b      	subs	r3, r3, r2
 802536c:	009b      	lsls	r3, r3, #2
 802536e:	33f0      	adds	r3, #240	; 0xf0
 8025370:	443b      	add	r3, r7
 8025372:	3b94      	subs	r3, #148	; 0x94
 8025374:	681b      	ldr	r3, [r3, #0]
 8025376:	607b      	str	r3, [r7, #4]
        ptag        = stack[sp-1].ptag;
 8025378:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802537c:	1e5a      	subs	r2, r3, #1
 802537e:	4613      	mov	r3, r2
 8025380:	011b      	lsls	r3, r3, #4
 8025382:	1a9b      	subs	r3, r3, r2
 8025384:	009b      	lsls	r3, r3, #2
 8025386:	33f0      	adds	r3, #240	; 0xf0
 8025388:	443b      	add	r3, r7
 802538a:	3b90      	subs	r3, #144	; 0x90
 802538c:	681b      	ldr	r3, [r3, #0]
 802538e:	603b      	str	r3, [r7, #0]
        attrs       = stack[sp-1].attrs;
 8025390:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025394:	1e5a      	subs	r2, r3, #1
 8025396:	4613      	mov	r3, r2
 8025398:	011b      	lsls	r3, r3, #4
 802539a:	1a9b      	subs	r3, r3, r2
 802539c:	009b      	lsls	r3, r3, #2
 802539e:	33f0      	adds	r3, #240	; 0xf0
 80253a0:	443b      	add	r3, r7
 80253a2:	3b8c      	subs	r3, #140	; 0x8c
 80253a4:	681b      	ldr	r3, [r3, #0]
 80253a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        attrcount   = stack[sp-1].attrcount;
 80253aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253ae:	1e5a      	subs	r2, r3, #1
 80253b0:	4613      	mov	r3, r2
 80253b2:	011b      	lsls	r3, r3, #4
 80253b4:	1a9b      	subs	r3, r3, r2
 80253b6:	009b      	lsls	r3, r3, #2
 80253b8:	33f0      	adds	r3, #240	; 0xf0
 80253ba:	443b      	add	r3, r7
 80253bc:	3b88      	subs	r3, #136	; 0x88
 80253be:	681b      	ldr	r3, [r3, #0]
 80253c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        tmask       = stack[sp-1].tmask;
 80253c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253c8:	1e5a      	subs	r2, r3, #1
 80253ca:	4613      	mov	r3, r2
 80253cc:	011b      	lsls	r3, r3, #4
 80253ce:	1a9b      	subs	r3, r3, r2
 80253d0:	009b      	lsls	r3, r3, #2
 80253d2:	33f0      	adds	r3, #240	; 0xf0
 80253d4:	443b      	add	r3, r7
 80253d6:	3b84      	subs	r3, #132	; 0x84
 80253d8:	681b      	ldr	r3, [r3, #0]
 80253da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        ttag        = stack[sp-1].ttag;
 80253de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253e2:	1e5a      	subs	r2, r3, #1
 80253e4:	4613      	mov	r3, r2
 80253e6:	011b      	lsls	r3, r3, #4
 80253e8:	1a9b      	subs	r3, r3, r2
 80253ea:	009b      	lsls	r3, r3, #2
 80253ec:	33f0      	adds	r3, #240	; 0xf0
 80253ee:	443b      	add	r3, r7
 80253f0:	3b80      	subs	r3, #128	; 0x80
 80253f2:	681b      	ldr	r3, [r3, #0]
 80253f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        begin       = stack[sp-1].begin;
 80253f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80253fc:	1e5a      	subs	r2, r3, #1
 80253fe:	4613      	mov	r3, r2
 8025400:	011b      	lsls	r3, r3, #4
 8025402:	1a9b      	subs	r3, r3, r2
 8025404:	009b      	lsls	r3, r3, #2
 8025406:	33f0      	adds	r3, #240	; 0xf0
 8025408:	443b      	add	r3, r7
 802540a:	3b7c      	subs	r3, #124	; 0x7c
 802540c:	881b      	ldrh	r3, [r3, #0]
 802540e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
        end         = stack[sp-1].end;
 8025412:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025416:	1e5a      	subs	r2, r3, #1
 8025418:	4613      	mov	r3, r2
 802541a:	011b      	lsls	r3, r3, #4
 802541c:	1a9b      	subs	r3, r3, r2
 802541e:	009b      	lsls	r3, r3, #2
 8025420:	33f0      	adds	r3, #240	; 0xf0
 8025422:	443b      	add	r3, r7
 8025424:	3b7a      	subs	r3, #122	; 0x7a
 8025426:	881b      	ldrh	r3, [r3, #0]
 8025428:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
        diff        = stack[sp-1].diff;
 802542c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025430:	1e5a      	subs	r2, r3, #1
 8025432:	4613      	mov	r3, r2
 8025434:	011b      	lsls	r3, r3, #4
 8025436:	1a9b      	subs	r3, r3, r2
 8025438:	009b      	lsls	r3, r3, #2
 802543a:	33f0      	adds	r3, #240	; 0xf0
 802543c:	443b      	add	r3, r7
 802543e:	3b78      	subs	r3, #120	; 0x78
 8025440:	881b      	ldrh	r3, [r3, #0]
 8025442:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
        cb          = stack[sp-1].cb;
 8025446:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802544a:	1e5a      	subs	r2, r3, #1
 802544c:	4613      	mov	r3, r2
 802544e:	011b      	lsls	r3, r3, #4
 8025450:	1a9b      	subs	r3, r3, r2
 8025452:	009b      	lsls	r3, r3, #2
 8025454:	33f0      	adds	r3, #240	; 0xf0
 8025456:	443b      	add	r3, r7
 8025458:	3b74      	subs	r3, #116	; 0x74
 802545a:	681b      	ldr	r3, [r3, #0]
 802545c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        data        = stack[sp-1].data;
 8025460:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025464:	1e5a      	subs	r2, r3, #1
 8025466:	4613      	mov	r3, r2
 8025468:	011b      	lsls	r3, r3, #4
 802546a:	1a9b      	subs	r3, r3, r2
 802546c:	009b      	lsls	r3, r3, #2
 802546e:	33f0      	adds	r3, #240	; 0xf0
 8025470:	443b      	add	r3, r7
 8025472:	3b70      	subs	r3, #112	; 0x70
 8025474:	681b      	ldr	r3, [r3, #0]
 8025476:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
        tag         = stack[sp-1].tag;
 802547a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 802547e:	1e5a      	subs	r2, r3, #1
 8025480:	4613      	mov	r3, r2
 8025482:	011b      	lsls	r3, r3, #4
 8025484:	1a9b      	subs	r3, r3, r2
 8025486:	009b      	lsls	r3, r3, #2
 8025488:	33f0      	adds	r3, #240	; 0xf0
 802548a:	443b      	add	r3, r7
 802548c:	3b6c      	subs	r3, #108	; 0x6c
 802548e:	681b      	ldr	r3, [r3, #0]
 8025490:	657b      	str	r3, [r7, #84]	; 0x54
        buffer      = stack[sp-1].buffer;
 8025492:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8025496:	1e5a      	subs	r2, r3, #1
 8025498:	4613      	mov	r3, r2
 802549a:	011b      	lsls	r3, r3, #4
 802549c:	1a9b      	subs	r3, r3, r2
 802549e:	009b      	lsls	r3, r3, #2
 80254a0:	33f0      	adds	r3, #240	; 0xf0
 80254a2:	443b      	add	r3, r7
 80254a4:	3b68      	subs	r3, #104	; 0x68
 80254a6:	681b      	ldr	r3, [r3, #0]
 80254a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        disk        = stack[sp-1].disk;
 80254ac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80254b0:	1e5a      	subs	r2, r3, #1
 80254b2:	4613      	mov	r3, r2
 80254b4:	011b      	lsls	r3, r3, #4
 80254b6:	1a9b      	subs	r3, r3, r2
 80254b8:	009b      	lsls	r3, r3, #2
 80254ba:	33f0      	adds	r3, #240	; 0xf0
 80254bc:	443b      	add	r3, r7
 80254be:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
 80254c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80254c6:	3204      	adds	r2, #4
 80254c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80254cc:	e883 0003 	stmia.w	r3, {r0, r1}
        sp -= 1;
 80254d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80254d4:	3b01      	subs	r3, #1
 80254d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        goto popped;
 80254da:	e596      	b.n	802500a <lfs_dir_traverse+0x2e2>
    } else {
        return res;
 80254dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    }
}
 80254e0:	4618      	mov	r0, r3
 80254e2:	37f4      	adds	r7, #244	; 0xf4
 80254e4:	46bd      	mov	sp, r7
 80254e6:	bd90      	pop	{r4, r7, pc}

080254e8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 80254e8:	b590      	push	{r4, r7, lr}
 80254ea:	b09f      	sub	sp, #124	; 0x7c
 80254ec:	af04      	add	r7, sp, #16
 80254ee:	60f8      	str	r0, [r7, #12]
 80254f0:	60b9      	str	r1, [r7, #8]
 80254f2:	607a      	str	r2, [r7, #4]
 80254f4:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 80254f6:	f04f 33ff 	mov.w	r3, #4294967295
 80254fa:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 80254fc:	687b      	ldr	r3, [r7, #4]
 80254fe:	681a      	ldr	r2, [r3, #0]
 8025500:	68fb      	ldr	r3, [r7, #12]
 8025502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025504:	6a1b      	ldr	r3, [r3, #32]
 8025506:	429a      	cmp	r2, r3
 8025508:	d207      	bcs.n	802551a <lfs_dir_fetchmatch+0x32>
 802550a:	687b      	ldr	r3, [r7, #4]
 802550c:	3304      	adds	r3, #4
 802550e:	681a      	ldr	r2, [r3, #0]
 8025510:	68fb      	ldr	r3, [r7, #12]
 8025512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025514:	6a1b      	ldr	r3, [r3, #32]
 8025516:	429a      	cmp	r2, r3
 8025518:	d302      	bcc.n	8025520 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 802551a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802551e:	e342      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 8025520:	2300      	movs	r3, #0
 8025522:	633b      	str	r3, [r7, #48]	; 0x30
 8025524:	2300      	movs	r3, #0
 8025526:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 8025528:	2300      	movs	r3, #0
 802552a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 802552c:	2300      	movs	r3, #0
 802552e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8025530:	e052      	b.n	80255d8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 8025532:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8025534:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025536:	009b      	lsls	r3, r3, #2
 8025538:	687a      	ldr	r2, [r7, #4]
 802553a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 802553c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 802553e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8025542:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8025544:	0092      	lsls	r2, r2, #2
 8025546:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8025548:	2104      	movs	r1, #4
 802554a:	9103      	str	r1, [sp, #12]
 802554c:	9202      	str	r2, [sp, #8]
 802554e:	2200      	movs	r2, #0
 8025550:	9201      	str	r2, [sp, #4]
 8025552:	9300      	str	r3, [sp, #0]
 8025554:	2304      	movs	r3, #4
 8025556:	4602      	mov	r2, r0
 8025558:	2100      	movs	r1, #0
 802555a:	68f8      	ldr	r0, [r7, #12]
 802555c:	f7fe fa6e 	bl	8023a3c <lfs_bd_read>
 8025560:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 8025562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025564:	009b      	lsls	r3, r3, #2
 8025566:	3368      	adds	r3, #104	; 0x68
 8025568:	443b      	add	r3, r7
 802556a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 802556e:	4618      	mov	r0, r3
 8025570:	f7fe f9f8 	bl	8023964 <lfs_fromle32>
 8025574:	4602      	mov	r2, r0
 8025576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8025578:	009b      	lsls	r3, r3, #2
 802557a:	3368      	adds	r3, #104	; 0x68
 802557c:	443b      	add	r3, r7
 802557e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 8025582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025584:	2b00      	cmp	r3, #0
 8025586:	d005      	beq.n	8025594 <lfs_dir_fetchmatch+0xac>
 8025588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802558a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802558e:	d001      	beq.n	8025594 <lfs_dir_fetchmatch+0xac>
            return err;
 8025590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025592:	e308      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
        }

        if (err != LFS_ERR_CORRUPT &&
 8025594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8025596:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802559a:	d01a      	beq.n	80255d2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 802559c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802559e:	009b      	lsls	r3, r3, #2
 80255a0:	3368      	adds	r3, #104	; 0x68
 80255a2:	443b      	add	r3, r7
 80255a4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80255a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255aa:	3301      	adds	r3, #1
 80255ac:	2b00      	cmp	r3, #0
 80255ae:	f003 0301 	and.w	r3, r3, #1
 80255b2:	bfb8      	it	lt
 80255b4:	425b      	neglt	r3, r3
 80255b6:	009b      	lsls	r3, r3, #2
 80255b8:	3368      	adds	r3, #104	; 0x68
 80255ba:	443b      	add	r3, r7
 80255bc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80255c0:	4619      	mov	r1, r3
 80255c2:	4610      	mov	r0, r2
 80255c4:	f7fe f9c0 	bl	8023948 <lfs_scmp>
 80255c8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80255ca:	2b00      	cmp	r3, #0
 80255cc:	dd01      	ble.n	80255d2 <lfs_dir_fetchmatch+0xea>
            r = i;
 80255ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255d0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80255d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255d4:	3301      	adds	r3, #1
 80255d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80255d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80255da:	2b01      	cmp	r3, #1
 80255dc:	dda9      	ble.n	8025532 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80255de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80255e0:	2b00      	cmp	r3, #0
 80255e2:	f003 0301 	and.w	r3, r3, #1
 80255e6:	bfb8      	it	lt
 80255e8:	425b      	neglt	r3, r3
 80255ea:	009b      	lsls	r3, r3, #2
 80255ec:	687a      	ldr	r2, [r7, #4]
 80255ee:	4413      	add	r3, r2
 80255f0:	681a      	ldr	r2, [r3, #0]
 80255f2:	68bb      	ldr	r3, [r7, #8]
 80255f4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 80255f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80255f8:	3301      	adds	r3, #1
 80255fa:	2b00      	cmp	r3, #0
 80255fc:	f003 0301 	and.w	r3, r3, #1
 8025600:	bfb8      	it	lt
 8025602:	425b      	neglt	r3, r3
 8025604:	009b      	lsls	r3, r3, #2
 8025606:	687a      	ldr	r2, [r7, #4]
 8025608:	4413      	add	r3, r2
 802560a:	681a      	ldr	r2, [r3, #0]
 802560c:	68bb      	ldr	r3, [r7, #8]
 802560e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 8025610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025612:	2b00      	cmp	r3, #0
 8025614:	f003 0301 	and.w	r3, r3, #1
 8025618:	bfb8      	it	lt
 802561a:	425b      	neglt	r3, r3
 802561c:	009b      	lsls	r3, r3, #2
 802561e:	3368      	adds	r3, #104	; 0x68
 8025620:	443b      	add	r3, r7
 8025622:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025626:	68bb      	ldr	r3, [r7, #8]
 8025628:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 802562a:	68bb      	ldr	r3, [r7, #8]
 802562c:	2200      	movs	r2, #0
 802562e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 8025630:	2300      	movs	r3, #0
 8025632:	65bb      	str	r3, [r7, #88]	; 0x58
 8025634:	e2a3      	b.n	8025b7e <lfs_dir_fetchmatch+0x696>
        lfs_off_t off = 0;
 8025636:	2300      	movs	r3, #0
 8025638:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 802563a:	f04f 33ff 	mov.w	r3, #4294967295
 802563e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 8025640:	2300      	movs	r3, #0
 8025642:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8025646:	4a96      	ldr	r2, [pc, #600]	; (80258a0 <lfs_dir_fetchmatch+0x3b8>)
 8025648:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802564c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8025650:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8025654:	2300      	movs	r3, #0
 8025656:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 802565a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802565c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 802565e:	68bb      	ldr	r3, [r7, #8]
 8025660:	689b      	ldr	r3, [r3, #8]
 8025662:	4618      	mov	r0, r3
 8025664:	f7fe f989 	bl	802397a <lfs_tole32>
 8025668:	4602      	mov	r2, r0
 802566a:	68bb      	ldr	r3, [r7, #8]
 802566c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 802566e:	68bb      	ldr	r3, [r7, #8]
 8025670:	3308      	adds	r3, #8
 8025672:	2204      	movs	r2, #4
 8025674:	4619      	mov	r1, r3
 8025676:	f04f 30ff 	mov.w	r0, #4294967295
 802567a:	f005 fbc9 	bl	802ae10 <lfs_crc>
 802567e:	4603      	mov	r3, r0
 8025680:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 8025682:	68bb      	ldr	r3, [r7, #8]
 8025684:	689b      	ldr	r3, [r3, #8]
 8025686:	4618      	mov	r0, r3
 8025688:	f7fe f96c 	bl	8023964 <lfs_fromle32>
 802568c:	4602      	mov	r2, r0
 802568e:	68bb      	ldr	r3, [r7, #8]
 8025690:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 8025692:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8025694:	f7fe fe29 	bl	80242ea <lfs_tag_dsize>
 8025698:	4602      	mov	r2, r0
 802569a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802569c:	4413      	add	r3, r2
 802569e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80256a0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80256a2:	68fb      	ldr	r3, [r7, #12]
 80256a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80256a6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 80256a8:	68bb      	ldr	r3, [r7, #8]
 80256aa:	681b      	ldr	r3, [r3, #0]
 80256ac:	2204      	movs	r2, #4
 80256ae:	9203      	str	r2, [sp, #12]
 80256b0:	f107 0220 	add.w	r2, r7, #32
 80256b4:	9202      	str	r2, [sp, #8]
 80256b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80256b8:	9201      	str	r2, [sp, #4]
 80256ba:	9300      	str	r3, [sp, #0]
 80256bc:	4603      	mov	r3, r0
 80256be:	460a      	mov	r2, r1
 80256c0:	2100      	movs	r1, #0
 80256c2:	68f8      	ldr	r0, [r7, #12]
 80256c4:	f7fe f9ba 	bl	8023a3c <lfs_bd_read>
 80256c8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80256ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80256cc:	2b00      	cmp	r3, #0
 80256ce:	d009      	beq.n	80256e4 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 80256d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80256d2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80256d6:	d103      	bne.n	80256e0 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 80256d8:	68bb      	ldr	r3, [r7, #8]
 80256da:	2200      	movs	r2, #0
 80256dc:	759a      	strb	r2, [r3, #22]
                    break;
 80256de:	e1d6      	b.n	8025a8e <lfs_dir_fetchmatch+0x5a6>
                }
                return err;
 80256e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80256e2:	e260      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80256e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80256e6:	f107 0120 	add.w	r1, r7, #32
 80256ea:	2204      	movs	r2, #4
 80256ec:	4618      	mov	r0, r3
 80256ee:	f005 fb8f 	bl	802ae10 <lfs_crc>
 80256f2:	4603      	mov	r3, r0
 80256f4:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 80256f6:	6a3b      	ldr	r3, [r7, #32]
 80256f8:	4618      	mov	r0, r3
 80256fa:	f7fe f94a 	bl	8023992 <lfs_frombe32>
 80256fe:	4602      	mov	r2, r0
 8025700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8025702:	4053      	eors	r3, r2
 8025704:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 8025706:	6a3b      	ldr	r3, [r7, #32]
 8025708:	4618      	mov	r0, r3
 802570a:	f7fe fd76 	bl	80241fa <lfs_tag_isvalid>
 802570e:	4603      	mov	r3, r0
 8025710:	f083 0301 	eor.w	r3, r3, #1
 8025714:	b2db      	uxtb	r3, r3
 8025716:	2b00      	cmp	r3, #0
 8025718:	d01b      	beq.n	8025752 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802571a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 802571c:	f7fe fd8e 	bl	802423c <lfs_tag_type1>
 8025720:	4603      	mov	r3, r0
 8025722:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025726:	d10d      	bne.n	8025744 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 8025728:	68bb      	ldr	r3, [r7, #8]
 802572a:	68db      	ldr	r3, [r3, #12]
 802572c:	68fa      	ldr	r2, [r7, #12]
 802572e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8025730:	6992      	ldr	r2, [r2, #24]
 8025732:	fbb3 f1f2 	udiv	r1, r3, r2
 8025736:	fb01 f202 	mul.w	r2, r1, r2
 802573a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 802573c:	2b00      	cmp	r3, #0
 802573e:	d101      	bne.n	8025744 <lfs_dir_fetchmatch+0x25c>
 8025740:	2301      	movs	r3, #1
 8025742:	e000      	b.n	8025746 <lfs_dir_fetchmatch+0x25e>
 8025744:	2300      	movs	r3, #0
 8025746:	f003 0301 	and.w	r3, r3, #1
 802574a:	b2da      	uxtb	r2, r3
 802574c:	68bb      	ldr	r3, [r7, #8]
 802574e:	759a      	strb	r2, [r3, #22]
                break;
 8025750:	e19d      	b.n	8025a8e <lfs_dir_fetchmatch+0x5a6>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8025752:	6a3b      	ldr	r3, [r7, #32]
 8025754:	4618      	mov	r0, r3
 8025756:	f7fe fdc8 	bl	80242ea <lfs_tag_dsize>
 802575a:	4602      	mov	r2, r0
 802575c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802575e:	441a      	add	r2, r3
 8025760:	68fb      	ldr	r3, [r7, #12]
 8025762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8025764:	69db      	ldr	r3, [r3, #28]
 8025766:	429a      	cmp	r2, r3
 8025768:	d903      	bls.n	8025772 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 802576a:	68bb      	ldr	r3, [r7, #8]
 802576c:	2200      	movs	r2, #0
 802576e:	759a      	strb	r2, [r3, #22]
                break;
 8025770:	e18d      	b.n	8025a8e <lfs_dir_fetchmatch+0x5a6>
            }

            ptag = tag;
 8025772:	6a3b      	ldr	r3, [r7, #32]
 8025774:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8025776:	6a3b      	ldr	r3, [r7, #32]
 8025778:	4618      	mov	r0, r3
 802577a:	f7fe fd5f 	bl	802423c <lfs_tag_type1>
 802577e:	4603      	mov	r3, r0
 8025780:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8025784:	d164      	bne.n	8025850 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8025786:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025788:	68fb      	ldr	r3, [r7, #12]
 802578a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802578c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802578e:	68bb      	ldr	r3, [r7, #8]
 8025790:	681b      	ldr	r3, [r3, #0]
 8025792:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8025794:	3204      	adds	r2, #4
 8025796:	2104      	movs	r1, #4
 8025798:	9103      	str	r1, [sp, #12]
 802579a:	f107 011c 	add.w	r1, r7, #28
 802579e:	9102      	str	r1, [sp, #8]
 80257a0:	9201      	str	r2, [sp, #4]
 80257a2:	9300      	str	r3, [sp, #0]
 80257a4:	4623      	mov	r3, r4
 80257a6:	4602      	mov	r2, r0
 80257a8:	2100      	movs	r1, #0
 80257aa:	68f8      	ldr	r0, [r7, #12]
 80257ac:	f7fe f946 	bl	8023a3c <lfs_bd_read>
 80257b0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80257b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80257b4:	2b00      	cmp	r3, #0
 80257b6:	d009      	beq.n	80257cc <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 80257b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80257ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80257be:	d103      	bne.n	80257c8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 80257c0:	68bb      	ldr	r3, [r7, #8]
 80257c2:	2200      	movs	r2, #0
 80257c4:	759a      	strb	r2, [r3, #22]
                        break;
 80257c6:	e162      	b.n	8025a8e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80257c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 80257ca:	e1ec      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
                }
                dcrc = lfs_fromle32(dcrc);
 80257cc:	69fb      	ldr	r3, [r7, #28]
 80257ce:	4618      	mov	r0, r3
 80257d0:	f7fe f8c8 	bl	8023964 <lfs_fromle32>
 80257d4:	4603      	mov	r3, r0
 80257d6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80257d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80257da:	69fb      	ldr	r3, [r7, #28]
 80257dc:	429a      	cmp	r2, r3
 80257de:	d003      	beq.n	80257e8 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 80257e0:	68bb      	ldr	r3, [r7, #8]
 80257e2:	2200      	movs	r2, #0
 80257e4:	759a      	strb	r2, [r3, #22]
                    break;
 80257e6:	e152      	b.n	8025a8e <lfs_dir_fetchmatch+0x5a6>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80257e8:	6a3b      	ldr	r3, [r7, #32]
 80257ea:	4618      	mov	r0, r3
 80257ec:	f7fe fd46 	bl	802427c <lfs_tag_chunk>
 80257f0:	4603      	mov	r3, r0
 80257f2:	07db      	lsls	r3, r3, #31
 80257f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80257f6:	4053      	eors	r3, r2
 80257f8:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 80257fa:	68fb      	ldr	r3, [r7, #12]
 80257fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80257fe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8025802:	2204      	movs	r2, #4
 8025804:	4618      	mov	r0, r3
 8025806:	f005 fb03 	bl	802ae10 <lfs_crc>
 802580a:	4602      	mov	r2, r0
 802580c:	68fb      	ldr	r3, [r7, #12]
 802580e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8025810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025812:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 8025814:	6a3b      	ldr	r3, [r7, #32]
 8025816:	4618      	mov	r0, r3
 8025818:	f7fe fd67 	bl	80242ea <lfs_tag_dsize>
 802581c:	4602      	mov	r2, r0
 802581e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025820:	441a      	add	r2, r3
 8025822:	68bb      	ldr	r3, [r7, #8]
 8025824:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 8025826:	68bb      	ldr	r3, [r7, #8]
 8025828:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802582a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 802582c:	68bb      	ldr	r3, [r7, #8]
 802582e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8025832:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 8025834:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8025836:	68bb      	ldr	r3, [r7, #8]
 8025838:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 802583a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802583c:	68bb      	ldr	r3, [r7, #8]
 802583e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8025840:	68bb      	ldr	r3, [r7, #8]
 8025842:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8025846:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 8025848:	f04f 33ff 	mov.w	r3, #4294967295
 802584c:	627b      	str	r3, [r7, #36]	; 0x24
 802584e:	e720      	b.n	8025692 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8025850:	2304      	movs	r3, #4
 8025852:	647b      	str	r3, [r7, #68]	; 0x44
 8025854:	e032      	b.n	80258bc <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 8025856:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8025858:	68fb      	ldr	r3, [r7, #12]
 802585a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802585c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 802585e:	68bb      	ldr	r3, [r7, #8]
 8025860:	681b      	ldr	r3, [r3, #0]
 8025862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8025864:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8025866:	440a      	add	r2, r1
 8025868:	2101      	movs	r1, #1
 802586a:	9103      	str	r1, [sp, #12]
 802586c:	f107 011b 	add.w	r1, r7, #27
 8025870:	9102      	str	r1, [sp, #8]
 8025872:	9201      	str	r2, [sp, #4]
 8025874:	9300      	str	r3, [sp, #0]
 8025876:	4623      	mov	r3, r4
 8025878:	4602      	mov	r2, r0
 802587a:	2100      	movs	r1, #0
 802587c:	68f8      	ldr	r0, [r7, #12]
 802587e:	f7fe f8dd 	bl	8023a3c <lfs_bd_read>
 8025882:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 8025884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8025886:	2b00      	cmp	r3, #0
 8025888:	d00c      	beq.n	80258a4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 802588a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802588c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025890:	d103      	bne.n	802589a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 8025892:	68bb      	ldr	r3, [r7, #8]
 8025894:	2200      	movs	r2, #0
 8025896:	759a      	strb	r2, [r3, #22]
 8025898:	e018      	b.n	80258cc <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 802589a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 802589c:	e183      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
 802589e:	bf00      	nop
 80258a0:	08033958 	.word	0x08033958
                }

                crc = lfs_crc(crc, &dat, 1);
 80258a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80258a6:	f107 011b 	add.w	r1, r7, #27
 80258aa:	2201      	movs	r2, #1
 80258ac:	4618      	mov	r0, r3
 80258ae:	f005 faaf 	bl	802ae10 <lfs_crc>
 80258b2:	4603      	mov	r3, r0
 80258b4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80258b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80258b8:	3301      	adds	r3, #1
 80258ba:	647b      	str	r3, [r7, #68]	; 0x44
 80258bc:	6a3b      	ldr	r3, [r7, #32]
 80258be:	4618      	mov	r0, r3
 80258c0:	f7fe fd13 	bl	80242ea <lfs_tag_dsize>
 80258c4:	4602      	mov	r2, r0
 80258c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80258c8:	4293      	cmp	r3, r2
 80258ca:	d3c4      	bcc.n	8025856 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80258cc:	6a3b      	ldr	r3, [r7, #32]
 80258ce:	4618      	mov	r0, r3
 80258d0:	f7fe fcb4 	bl	802423c <lfs_tag_type1>
 80258d4:	4603      	mov	r3, r0
 80258d6:	2b00      	cmp	r3, #0
 80258d8:	d113      	bne.n	8025902 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80258da:	6a3b      	ldr	r3, [r7, #32]
 80258dc:	4618      	mov	r0, r3
 80258de:	f7fe fce7 	bl	80242b0 <lfs_tag_id>
 80258e2:	4603      	mov	r3, r0
 80258e4:	461a      	mov	r2, r3
 80258e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80258ea:	4293      	cmp	r3, r2
 80258ec:	f200 8083 	bhi.w	80259f6 <lfs_dir_fetchmatch+0x50e>
                    tempcount = lfs_tag_id(tag) + 1;
 80258f0:	6a3b      	ldr	r3, [r7, #32]
 80258f2:	4618      	mov	r0, r3
 80258f4:	f7fe fcdc 	bl	80242b0 <lfs_tag_id>
 80258f8:	4603      	mov	r3, r0
 80258fa:	3301      	adds	r3, #1
 80258fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8025900:	e079      	b.n	80259f6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8025902:	6a3b      	ldr	r3, [r7, #32]
 8025904:	4618      	mov	r0, r3
 8025906:	f7fe fc99 	bl	802423c <lfs_tag_type1>
 802590a:	4603      	mov	r3, r0
 802590c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8025910:	d134      	bne.n	802597c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 8025912:	6a3b      	ldr	r3, [r7, #32]
 8025914:	4618      	mov	r0, r3
 8025916:	f7fe fcbe 	bl	8024296 <lfs_tag_splice>
 802591a:	4603      	mov	r3, r0
 802591c:	b29a      	uxth	r2, r3
 802591e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8025922:	4413      	add	r3, r2
 8025924:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8025928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802592a:	4ba1      	ldr	r3, [pc, #644]	; (8025bb0 <lfs_dir_fetchmatch+0x6c8>)
 802592c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 802592e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8025932:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8025936:	6a3a      	ldr	r2, [r7, #32]
 8025938:	4293      	cmp	r3, r2
 802593a:	d104      	bne.n	8025946 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 802593c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802593e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025942:	64bb      	str	r3, [r7, #72]	; 0x48
 8025944:	e057      	b.n	80259f6 <lfs_dir_fetchmatch+0x50e>
                } else if (tempbesttag != -1 &&
 8025946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025948:	f1b3 3fff 	cmp.w	r3, #4294967295
 802594c:	d053      	beq.n	80259f6 <lfs_dir_fetchmatch+0x50e>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 802594e:	6a3b      	ldr	r3, [r7, #32]
 8025950:	4618      	mov	r0, r3
 8025952:	f7fe fcad 	bl	80242b0 <lfs_tag_id>
 8025956:	4603      	mov	r3, r0
 8025958:	461c      	mov	r4, r3
 802595a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802595c:	4618      	mov	r0, r3
 802595e:	f7fe fca7 	bl	80242b0 <lfs_tag_id>
 8025962:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8025964:	429c      	cmp	r4, r3
 8025966:	d846      	bhi.n	80259f6 <lfs_dir_fetchmatch+0x50e>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8025968:	6a3b      	ldr	r3, [r7, #32]
 802596a:	4618      	mov	r0, r3
 802596c:	f7fe fc93 	bl	8024296 <lfs_tag_splice>
 8025970:	4603      	mov	r3, r0
 8025972:	029a      	lsls	r2, r3, #10
 8025974:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025976:	4413      	add	r3, r2
 8025978:	64bb      	str	r3, [r7, #72]	; 0x48
 802597a:	e03c      	b.n	80259f6 <lfs_dir_fetchmatch+0x50e>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 802597c:	6a3b      	ldr	r3, [r7, #32]
 802597e:	4618      	mov	r0, r3
 8025980:	f7fe fc5c 	bl	802423c <lfs_tag_type1>
 8025984:	4603      	mov	r3, r0
 8025986:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 802598a:	d134      	bne.n	80259f6 <lfs_dir_fetchmatch+0x50e>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 802598c:	6a3b      	ldr	r3, [r7, #32]
 802598e:	4618      	mov	r0, r3
 8025990:	f7fe fc74 	bl	802427c <lfs_tag_chunk>
 8025994:	4603      	mov	r3, r0
 8025996:	f003 0301 	and.w	r3, r3, #1
 802599a:	2b00      	cmp	r3, #0
 802599c:	bf14      	ite	ne
 802599e:	2301      	movne	r3, #1
 80259a0:	2300      	moveq	r3, #0
 80259a2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 80259a6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 80259a8:	68fb      	ldr	r3, [r7, #12]
 80259aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80259ac:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 80259ae:	68bb      	ldr	r3, [r7, #8]
 80259b0:	681b      	ldr	r3, [r3, #0]
 80259b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80259b4:	3204      	adds	r2, #4
 80259b6:	2108      	movs	r1, #8
 80259b8:	9103      	str	r1, [sp, #12]
 80259ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80259be:	9102      	str	r1, [sp, #8]
 80259c0:	9201      	str	r2, [sp, #4]
 80259c2:	9300      	str	r3, [sp, #0]
 80259c4:	4623      	mov	r3, r4
 80259c6:	4602      	mov	r2, r0
 80259c8:	2100      	movs	r1, #0
 80259ca:	68f8      	ldr	r0, [r7, #12]
 80259cc:	f7fe f836 	bl	8023a3c <lfs_bd_read>
 80259d0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 80259d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80259d4:	2b00      	cmp	r3, #0
 80259d6:	d009      	beq.n	80259ec <lfs_dir_fetchmatch+0x504>
                    if (err == LFS_ERR_CORRUPT) {
 80259d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80259da:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80259de:	d103      	bne.n	80259e8 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 80259e0:	68bb      	ldr	r3, [r7, #8]
 80259e2:	2200      	movs	r2, #0
 80259e4:	759a      	strb	r2, [r3, #22]
                        break;
 80259e6:	e052      	b.n	8025a8e <lfs_dir_fetchmatch+0x5a6>
                    }
                    return err;
 80259e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80259ea:	e0dc      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
                }
                lfs_pair_fromle32(temptail);
 80259ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80259f0:	4618      	mov	r0, r3
 80259f2:	f7fe fbce 	bl	8024192 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 80259f6:	6a3a      	ldr	r2, [r7, #32]
 80259f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80259fa:	405a      	eors	r2, r3
 80259fc:	683b      	ldr	r3, [r7, #0]
 80259fe:	4013      	ands	r3, r2
 8025a00:	2b00      	cmp	r3, #0
 8025a02:	f47f ae46 	bne.w	8025692 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025a06:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8025a08:	68bb      	ldr	r3, [r7, #8]
 8025a0a:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025a0c:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8025a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8025a10:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8025a12:	617b      	str	r3, [r7, #20]
 8025a14:	f107 0210 	add.w	r2, r7, #16
 8025a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8025a1c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8025a20:	4798      	blx	r3
 8025a22:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 8025a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a26:	2b00      	cmp	r3, #0
 8025a28:	da09      	bge.n	8025a3e <lfs_dir_fetchmatch+0x556>
                    if (res == LFS_ERR_CORRUPT) {
 8025a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a2c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8025a30:	d103      	bne.n	8025a3a <lfs_dir_fetchmatch+0x552>
                        dir->erased = false;
 8025a32:	68bb      	ldr	r3, [r7, #8]
 8025a34:	2200      	movs	r2, #0
 8025a36:	759a      	strb	r2, [r3, #22]
 8025a38:	e029      	b.n	8025a8e <lfs_dir_fetchmatch+0x5a6>
                        break;
                    }
                    return res;
 8025a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 8025a3c:	e0b3      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
                }

                if (res == LFS_CMP_EQ) {
 8025a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a40:	2b00      	cmp	r3, #0
 8025a42:	d102      	bne.n	8025a4a <lfs_dir_fetchmatch+0x562>
                    // found a match
                    tempbesttag = tag;
 8025a44:	6a3b      	ldr	r3, [r7, #32]
 8025a46:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a48:	e623      	b.n	8025692 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 8025a4a:	6a3a      	ldr	r2, [r7, #32]
 8025a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a4e:	405a      	eors	r2, r3
 8025a50:	4b58      	ldr	r3, [pc, #352]	; (8025bb4 <lfs_dir_fetchmatch+0x6cc>)
 8025a52:	4013      	ands	r3, r2
 8025a54:	2b00      	cmp	r3, #0
 8025a56:	d103      	bne.n	8025a60 <lfs_dir_fetchmatch+0x578>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 8025a58:	f04f 33ff 	mov.w	r3, #4294967295
 8025a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a5e:	e618      	b.n	8025692 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 8025a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8025a62:	2b02      	cmp	r3, #2
 8025a64:	f47f ae15 	bne.w	8025692 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8025a68:	6a3b      	ldr	r3, [r7, #32]
 8025a6a:	4618      	mov	r0, r3
 8025a6c:	f7fe fc20 	bl	80242b0 <lfs_tag_id>
 8025a70:	4603      	mov	r3, r0
 8025a72:	461c      	mov	r4, r3
 8025a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8025a76:	4618      	mov	r0, r3
 8025a78:	f7fe fc1a 	bl	80242b0 <lfs_tag_id>
 8025a7c:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8025a7e:	429c      	cmp	r4, r3
 8025a80:	f63f ae07 	bhi.w	8025692 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8025a84:	6a3b      	ldr	r3, [r7, #32]
 8025a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8025a8c:	e601      	b.n	8025692 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8025a8e:	68bb      	ldr	r3, [r7, #8]
 8025a90:	68db      	ldr	r3, [r3, #12]
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	d100      	bne.n	8025a98 <lfs_dir_fetchmatch+0x5b0>
 8025a96:	e05d      	b.n	8025b54 <lfs_dir_fetchmatch+0x66c>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 8025a98:	68fb      	ldr	r3, [r7, #12]
 8025a9a:	333c      	adds	r3, #60	; 0x3c
 8025a9c:	68ba      	ldr	r2, [r7, #8]
 8025a9e:	4611      	mov	r1, r2
 8025aa0:	4618      	mov	r0, r3
 8025aa2:	f7fe fcad 	bl	8024400 <lfs_gstate_hasmovehere>
 8025aa6:	4603      	mov	r3, r0
 8025aa8:	2b00      	cmp	r3, #0
 8025aaa:	d028      	beq.n	8025afe <lfs_dir_fetchmatch+0x616>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 8025aac:	68fb      	ldr	r3, [r7, #12]
 8025aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025ab0:	4618      	mov	r0, r3
 8025ab2:	f7fe fbfd 	bl	80242b0 <lfs_tag_id>
 8025ab6:	4603      	mov	r3, r0
 8025ab8:	461c      	mov	r4, r3
 8025aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025abc:	4618      	mov	r0, r3
 8025abe:	f7fe fbf7 	bl	80242b0 <lfs_tag_id>
 8025ac2:	4603      	mov	r3, r0
 8025ac4:	429c      	cmp	r4, r3
 8025ac6:	d104      	bne.n	8025ad2 <lfs_dir_fetchmatch+0x5ea>
                    besttag |= 0x80000000;
 8025ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8025ace:	667b      	str	r3, [r7, #100]	; 0x64
 8025ad0:	e015      	b.n	8025afe <lfs_dir_fetchmatch+0x616>
                } else if (besttag != -1 &&
 8025ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025ad8:	d011      	beq.n	8025afe <lfs_dir_fetchmatch+0x616>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 8025ada:	68fb      	ldr	r3, [r7, #12]
 8025adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025ade:	4618      	mov	r0, r3
 8025ae0:	f7fe fbe6 	bl	80242b0 <lfs_tag_id>
 8025ae4:	4603      	mov	r3, r0
 8025ae6:	461c      	mov	r4, r3
 8025ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025aea:	4618      	mov	r0, r3
 8025aec:	f7fe fbe0 	bl	80242b0 <lfs_tag_id>
 8025af0:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8025af2:	429c      	cmp	r4, r3
 8025af4:	d203      	bcs.n	8025afe <lfs_dir_fetchmatch+0x616>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8025af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025af8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8025afc:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8025afe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025b00:	2b00      	cmp	r3, #0
 8025b02:	d00f      	beq.n	8025b24 <lfs_dir_fetchmatch+0x63c>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8025b04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b06:	4618      	mov	r0, r3
 8025b08:	f7fe fbd2 	bl	80242b0 <lfs_tag_id>
 8025b0c:	4603      	mov	r3, r0
 8025b0e:	461a      	mov	r2, r3
 8025b10:	68bb      	ldr	r3, [r7, #8]
 8025b12:	8a9b      	ldrh	r3, [r3, #20]
 8025b14:	4619      	mov	r1, r3
 8025b16:	4610      	mov	r0, r2
 8025b18:	f7fd feb4 	bl	8023884 <lfs_min>
 8025b1c:	4603      	mov	r3, r0
 8025b1e:	b29a      	uxth	r2, r3
 8025b20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8025b22:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8025b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b26:	4618      	mov	r0, r3
 8025b28:	f7fe fb67 	bl	80241fa <lfs_tag_isvalid>
 8025b2c:	4603      	mov	r3, r0
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	d001      	beq.n	8025b36 <lfs_dir_fetchmatch+0x64e>
                return besttag;
 8025b32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b34:	e037      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8025b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8025b38:	4618      	mov	r0, r3
 8025b3a:	f7fe fbb9 	bl	80242b0 <lfs_tag_id>
 8025b3e:	4603      	mov	r3, r0
 8025b40:	461a      	mov	r2, r3
 8025b42:	68bb      	ldr	r3, [r7, #8]
 8025b44:	8a9b      	ldrh	r3, [r3, #20]
 8025b46:	429a      	cmp	r2, r3
 8025b48:	d202      	bcs.n	8025b50 <lfs_dir_fetchmatch+0x668>
                return LFS_ERR_NOENT;
 8025b4a:	f06f 0301 	mvn.w	r3, #1
 8025b4e:	e02a      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
            } else {
                return 0;
 8025b50:	2300      	movs	r3, #0
 8025b52:	e028      	b.n	8025ba6 <lfs_dir_fetchmatch+0x6be>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8025b54:	68bb      	ldr	r3, [r7, #8]
 8025b56:	4618      	mov	r0, r3
 8025b58:	f7fe fa94 	bl	8024084 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8025b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8025b5e:	3301      	adds	r3, #1
 8025b60:	2b00      	cmp	r3, #0
 8025b62:	f003 0301 	and.w	r3, r3, #1
 8025b66:	bfb8      	it	lt
 8025b68:	425b      	neglt	r3, r3
 8025b6a:	009b      	lsls	r3, r3, #2
 8025b6c:	3368      	adds	r3, #104	; 0x68
 8025b6e:	443b      	add	r3, r7
 8025b70:	f853 2c38 	ldr.w	r2, [r3, #-56]
 8025b74:	68bb      	ldr	r3, [r7, #8]
 8025b76:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8025b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025b7a:	3301      	adds	r3, #1
 8025b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8025b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8025b80:	2b01      	cmp	r3, #1
 8025b82:	f77f ad58 	ble.w	8025636 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 8025b86:	68bb      	ldr	r3, [r7, #8]
 8025b88:	681a      	ldr	r2, [r3, #0]
 8025b8a:	68bb      	ldr	r3, [r7, #8]
 8025b8c:	685b      	ldr	r3, [r3, #4]
 8025b8e:	490a      	ldr	r1, [pc, #40]	; (8025bb8 <lfs_dir_fetchmatch+0x6d0>)
 8025b90:	9101      	str	r1, [sp, #4]
 8025b92:	9300      	str	r3, [sp, #0]
 8025b94:	4613      	mov	r3, r2
 8025b96:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8025b9a:	4908      	ldr	r1, [pc, #32]	; (8025bbc <lfs_dir_fetchmatch+0x6d4>)
 8025b9c:	4808      	ldr	r0, [pc, #32]	; (8025bc0 <lfs_dir_fetchmatch+0x6d8>)
 8025b9e:	f007 fdef 	bl	802d780 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8025ba2:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8025ba6:	4618      	mov	r0, r3
 8025ba8:	376c      	adds	r7, #108	; 0x6c
 8025baa:	46bd      	mov	sp, r7
 8025bac:	bd90      	pop	{r4, r7, pc}
 8025bae:	bf00      	nop
 8025bb0:	000ffc00 	.word	0x000ffc00
 8025bb4:	7ffffc00 	.word	0x7ffffc00
 8025bb8:	08033914 	.word	0x08033914
 8025bbc:	08033800 	.word	0x08033800
 8025bc0:	08033920 	.word	0x08033920

08025bc4 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8025bc4:	b580      	push	{r7, lr}
 8025bc6:	b088      	sub	sp, #32
 8025bc8:	af04      	add	r7, sp, #16
 8025bca:	60f8      	str	r0, [r7, #12]
 8025bcc:	60b9      	str	r1, [r7, #8]
 8025bce:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 8025bd0:	2300      	movs	r3, #0
 8025bd2:	9303      	str	r3, [sp, #12]
 8025bd4:	2300      	movs	r3, #0
 8025bd6:	9302      	str	r3, [sp, #8]
 8025bd8:	2300      	movs	r3, #0
 8025bda:	9301      	str	r3, [sp, #4]
 8025bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8025be0:	9300      	str	r3, [sp, #0]
 8025be2:	f04f 33ff 	mov.w	r3, #4294967295
 8025be6:	687a      	ldr	r2, [r7, #4]
 8025be8:	68b9      	ldr	r1, [r7, #8]
 8025bea:	68f8      	ldr	r0, [r7, #12]
 8025bec:	f7ff fc7c 	bl	80254e8 <lfs_dir_fetchmatch>
 8025bf0:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 8025bf2:	4618      	mov	r0, r3
 8025bf4:	3710      	adds	r7, #16
 8025bf6:	46bd      	mov	sp, r7
 8025bf8:	bd80      	pop	{r7, pc}
	...

08025bfc <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 8025bfc:	b580      	push	{r7, lr}
 8025bfe:	b08a      	sub	sp, #40	; 0x28
 8025c00:	af02      	add	r7, sp, #8
 8025c02:	60f8      	str	r0, [r7, #12]
 8025c04:	60b9      	str	r1, [r7, #8]
 8025c06:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8025c08:	f107 0310 	add.w	r3, r7, #16
 8025c0c:	9300      	str	r3, [sp, #0]
 8025c0e:	4b12      	ldr	r3, [pc, #72]	; (8025c58 <lfs_dir_getgstate+0x5c>)
 8025c10:	4a12      	ldr	r2, [pc, #72]	; (8025c5c <lfs_dir_getgstate+0x60>)
 8025c12:	68b9      	ldr	r1, [r7, #8]
 8025c14:	68f8      	ldr	r0, [r7, #12]
 8025c16:	f7fe ff35 	bl	8024a84 <lfs_dir_get>
 8025c1a:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8025c1c:	69fb      	ldr	r3, [r7, #28]
 8025c1e:	2b00      	cmp	r3, #0
 8025c20:	da05      	bge.n	8025c2e <lfs_dir_getgstate+0x32>
 8025c22:	69fb      	ldr	r3, [r7, #28]
 8025c24:	f113 0f02 	cmn.w	r3, #2
 8025c28:	d001      	beq.n	8025c2e <lfs_dir_getgstate+0x32>
        return res;
 8025c2a:	69fb      	ldr	r3, [r7, #28]
 8025c2c:	e00f      	b.n	8025c4e <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8025c2e:	69fb      	ldr	r3, [r7, #28]
 8025c30:	f113 0f02 	cmn.w	r3, #2
 8025c34:	d00a      	beq.n	8025c4c <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8025c36:	f107 0310 	add.w	r3, r7, #16
 8025c3a:	4618      	mov	r0, r3
 8025c3c:	f7fe fc00 	bl	8024440 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8025c40:	f107 0310 	add.w	r3, r7, #16
 8025c44:	4619      	mov	r1, r3
 8025c46:	6878      	ldr	r0, [r7, #4]
 8025c48:	f7fe fb63 	bl	8024312 <lfs_gstate_xor>
    }

    return 0;
 8025c4c:	2300      	movs	r3, #0
}
 8025c4e:	4618      	mov	r0, r3
 8025c50:	3720      	adds	r7, #32
 8025c52:	46bd      	mov	sp, r7
 8025c54:	bd80      	pop	{r7, pc}
 8025c56:	bf00      	nop
 8025c58:	7ff0000c 	.word	0x7ff0000c
 8025c5c:	7ff00000 	.word	0x7ff00000

08025c60 <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 8025c60:	b580      	push	{r7, lr}
 8025c62:	b08a      	sub	sp, #40	; 0x28
 8025c64:	af02      	add	r7, sp, #8
 8025c66:	60f8      	str	r0, [r7, #12]
 8025c68:	60b9      	str	r1, [r7, #8]
 8025c6a:	603b      	str	r3, [r7, #0]
 8025c6c:	4613      	mov	r3, r2
 8025c6e:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 8025c70:	88fb      	ldrh	r3, [r7, #6]
 8025c72:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025c76:	4293      	cmp	r3, r2
 8025c78:	d10b      	bne.n	8025c92 <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 8025c7a:	683b      	ldr	r3, [r7, #0]
 8025c7c:	3308      	adds	r3, #8
 8025c7e:	4932      	ldr	r1, [pc, #200]	; (8025d48 <lfs_dir_getinfo+0xe8>)
 8025c80:	461a      	mov	r2, r3
 8025c82:	460b      	mov	r3, r1
 8025c84:	881b      	ldrh	r3, [r3, #0]
 8025c86:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 8025c88:	683b      	ldr	r3, [r7, #0]
 8025c8a:	2202      	movs	r2, #2
 8025c8c:	701a      	strb	r2, [r3, #0]
        return 0;
 8025c8e:	2300      	movs	r3, #0
 8025c90:	e055      	b.n	8025d3e <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025c92:	88fb      	ldrh	r3, [r7, #6]
 8025c94:	029a      	lsls	r2, r3, #10
 8025c96:	68fb      	ldr	r3, [r7, #12]
 8025c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8025c9a:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025c9c:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 8025c9e:	683b      	ldr	r3, [r7, #0]
 8025ca0:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 8025ca2:	9300      	str	r3, [sp, #0]
 8025ca4:	4613      	mov	r3, r2
 8025ca6:	4a29      	ldr	r2, [pc, #164]	; (8025d4c <lfs_dir_getinfo+0xec>)
 8025ca8:	68b9      	ldr	r1, [r7, #8]
 8025caa:	68f8      	ldr	r0, [r7, #12]
 8025cac:	f7fe feea 	bl	8024a84 <lfs_dir_get>
 8025cb0:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025cb2:	69fb      	ldr	r3, [r7, #28]
 8025cb4:	2b00      	cmp	r3, #0
 8025cb6:	da01      	bge.n	8025cbc <lfs_dir_getinfo+0x5c>
        return (int)tag;
 8025cb8:	69fb      	ldr	r3, [r7, #28]
 8025cba:	e040      	b.n	8025d3e <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 8025cbc:	69fb      	ldr	r3, [r7, #28]
 8025cbe:	4618      	mov	r0, r3
 8025cc0:	f7fe facc 	bl	802425c <lfs_tag_type3>
 8025cc4:	4603      	mov	r3, r0
 8025cc6:	b2da      	uxtb	r2, r3
 8025cc8:	683b      	ldr	r3, [r7, #0]
 8025cca:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8025ccc:	88fb      	ldrh	r3, [r7, #6]
 8025cce:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025cd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025cd4:	f043 0308 	orr.w	r3, r3, #8
 8025cd8:	f107 0214 	add.w	r2, r7, #20
 8025cdc:	9200      	str	r2, [sp, #0]
 8025cde:	4a1c      	ldr	r2, [pc, #112]	; (8025d50 <lfs_dir_getinfo+0xf0>)
 8025ce0:	68b9      	ldr	r1, [r7, #8]
 8025ce2:	68f8      	ldr	r0, [r7, #12]
 8025ce4:	f7fe fece 	bl	8024a84 <lfs_dir_get>
 8025ce8:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 8025cea:	69fb      	ldr	r3, [r7, #28]
 8025cec:	2b00      	cmp	r3, #0
 8025cee:	da01      	bge.n	8025cf4 <lfs_dir_getinfo+0x94>
        return (int)tag;
 8025cf0:	69fb      	ldr	r3, [r7, #28]
 8025cf2:	e024      	b.n	8025d3e <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 8025cf4:	f107 0314 	add.w	r3, r7, #20
 8025cf8:	4618      	mov	r0, r3
 8025cfa:	f7fe fbe1 	bl	80244c0 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8025cfe:	69fb      	ldr	r3, [r7, #28]
 8025d00:	4618      	mov	r0, r3
 8025d02:	f7fe faab 	bl	802425c <lfs_tag_type3>
 8025d06:	4603      	mov	r3, r0
 8025d08:	461a      	mov	r2, r3
 8025d0a:	f240 2302 	movw	r3, #514	; 0x202
 8025d0e:	429a      	cmp	r2, r3
 8025d10:	d103      	bne.n	8025d1a <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 8025d12:	69ba      	ldr	r2, [r7, #24]
 8025d14:	683b      	ldr	r3, [r7, #0]
 8025d16:	605a      	str	r2, [r3, #4]
 8025d18:	e010      	b.n	8025d3c <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8025d1a:	69fb      	ldr	r3, [r7, #28]
 8025d1c:	4618      	mov	r0, r3
 8025d1e:	f7fe fa9d 	bl	802425c <lfs_tag_type3>
 8025d22:	4603      	mov	r3, r0
 8025d24:	461a      	mov	r2, r3
 8025d26:	f240 2301 	movw	r3, #513	; 0x201
 8025d2a:	429a      	cmp	r2, r3
 8025d2c:	d106      	bne.n	8025d3c <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 8025d2e:	69fb      	ldr	r3, [r7, #28]
 8025d30:	4618      	mov	r0, r3
 8025d32:	f7fe facd 	bl	80242d0 <lfs_tag_size>
 8025d36:	4602      	mov	r2, r0
 8025d38:	683b      	ldr	r3, [r7, #0]
 8025d3a:	605a      	str	r2, [r3, #4]
    }

    return 0;
 8025d3c:	2300      	movs	r3, #0
}
 8025d3e:	4618      	mov	r0, r3
 8025d40:	3720      	adds	r7, #32
 8025d42:	46bd      	mov	sp, r7
 8025d44:	bd80      	pop	{r7, pc}
 8025d46:	bf00      	nop
 8025d48:	08033960 	.word	0x08033960
 8025d4c:	780ffc00 	.word	0x780ffc00
 8025d50:	700ffc00 	.word	0x700ffc00

08025d54 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8025d54:	b590      	push	{r4, r7, lr}
 8025d56:	b08f      	sub	sp, #60	; 0x3c
 8025d58:	af04      	add	r7, sp, #16
 8025d5a:	60f8      	str	r0, [r7, #12]
 8025d5c:	60b9      	str	r1, [r7, #8]
 8025d5e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8025d60:	68fb      	ldr	r3, [r7, #12]
 8025d62:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8025d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d66:	681b      	ldr	r3, [r3, #0]
 8025d68:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8025d6a:	687b      	ldr	r3, [r7, #4]
 8025d6c:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8025d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025d70:	689c      	ldr	r4, [r3, #8]
 8025d72:	68b8      	ldr	r0, [r7, #8]
 8025d74:	f7fe faac 	bl	80242d0 <lfs_tag_size>
 8025d78:	4603      	mov	r3, r0
 8025d7a:	4619      	mov	r1, r3
 8025d7c:	4620      	mov	r0, r4
 8025d7e:	f7fd fd81 	bl	8023884 <lfs_min>
 8025d82:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8025d84:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 8025d86:	69fb      	ldr	r3, [r7, #28]
 8025d88:	681b      	ldr	r3, [r3, #0]
 8025d8a:	69fa      	ldr	r2, [r7, #28]
 8025d8c:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 8025d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025d90:	6849      	ldr	r1, [r1, #4]
 8025d92:	69b8      	ldr	r0, [r7, #24]
 8025d94:	9003      	str	r0, [sp, #12]
 8025d96:	9102      	str	r1, [sp, #8]
 8025d98:	9201      	str	r2, [sp, #4]
 8025d9a:	9300      	str	r3, [sp, #0]
 8025d9c:	69bb      	ldr	r3, [r7, #24]
 8025d9e:	4622      	mov	r2, r4
 8025da0:	2100      	movs	r1, #0
 8025da2:	6a38      	ldr	r0, [r7, #32]
 8025da4:	f7fd ff8e 	bl	8023cc4 <lfs_bd_cmp>
 8025da8:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 8025daa:	697b      	ldr	r3, [r7, #20]
 8025dac:	2b00      	cmp	r3, #0
 8025dae:	d001      	beq.n	8025db4 <lfs_dir_find_match+0x60>
        return res;
 8025db0:	697b      	ldr	r3, [r7, #20]
 8025db2:	e014      	b.n	8025dde <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8025db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025db6:	689c      	ldr	r4, [r3, #8]
 8025db8:	68b8      	ldr	r0, [r7, #8]
 8025dba:	f7fe fa89 	bl	80242d0 <lfs_tag_size>
 8025dbe:	4603      	mov	r3, r0
 8025dc0:	429c      	cmp	r4, r3
 8025dc2:	d00b      	beq.n	8025ddc <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8025dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025dc6:	689c      	ldr	r4, [r3, #8]
 8025dc8:	68b8      	ldr	r0, [r7, #8]
 8025dca:	f7fe fa81 	bl	80242d0 <lfs_tag_size>
 8025dce:	4603      	mov	r3, r0
 8025dd0:	429c      	cmp	r4, r3
 8025dd2:	d201      	bcs.n	8025dd8 <lfs_dir_find_match+0x84>
 8025dd4:	2301      	movs	r3, #1
 8025dd6:	e002      	b.n	8025dde <lfs_dir_find_match+0x8a>
 8025dd8:	2302      	movs	r3, #2
 8025dda:	e000      	b.n	8025dde <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8025ddc:	2300      	movs	r3, #0
}
 8025dde:	4618      	mov	r0, r3
 8025de0:	372c      	adds	r7, #44	; 0x2c
 8025de2:	46bd      	mov	sp, r7
 8025de4:	bd90      	pop	{r4, r7, pc}
	...

08025de8 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 8025de8:	b590      	push	{r4, r7, lr}
 8025dea:	b093      	sub	sp, #76	; 0x4c
 8025dec:	af04      	add	r7, sp, #16
 8025dee:	60f8      	str	r0, [r7, #12]
 8025df0:	60b9      	str	r1, [r7, #8]
 8025df2:	607a      	str	r2, [r7, #4]
 8025df4:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 8025df6:	687b      	ldr	r3, [r7, #4]
 8025df8:	681b      	ldr	r3, [r3, #0]
 8025dfa:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 8025dfc:	683b      	ldr	r3, [r7, #0]
 8025dfe:	2b00      	cmp	r3, #0
 8025e00:	d003      	beq.n	8025e0a <lfs_dir_find+0x22>
        *id = 0x3ff;
 8025e02:	683b      	ldr	r3, [r7, #0]
 8025e04:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8025e08:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 8025e0a:	4b6e      	ldr	r3, [pc, #440]	; (8025fc4 <lfs_dir_find+0x1dc>)
 8025e0c:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 8025e0e:	68fb      	ldr	r3, [r7, #12]
 8025e10:	6a1a      	ldr	r2, [r3, #32]
 8025e12:	68bb      	ldr	r3, [r7, #8]
 8025e14:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 8025e16:	68fb      	ldr	r3, [r7, #12]
 8025e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8025e1a:	68bb      	ldr	r3, [r7, #8]
 8025e1c:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 8025e1e:	496a      	ldr	r1, [pc, #424]	; (8025fc8 <lfs_dir_find+0x1e0>)
 8025e20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025e22:	f007 feb0 	bl	802db86 <strspn>
 8025e26:	4602      	mov	r2, r0
 8025e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e2a:	4413      	add	r3, r2
 8025e2c:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 8025e2e:	4966      	ldr	r1, [pc, #408]	; (8025fc8 <lfs_dir_find+0x1e0>)
 8025e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025e32:	f007 fe5f 	bl	802daf4 <strcspn>
 8025e36:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 8025e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e3a:	2b01      	cmp	r3, #1
 8025e3c:	d105      	bne.n	8025e4a <lfs_dir_find+0x62>
 8025e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025e40:	781a      	ldrb	r2, [r3, #0]
 8025e42:	4b62      	ldr	r3, [pc, #392]	; (8025fcc <lfs_dir_find+0x1e4>)
 8025e44:	781b      	ldrb	r3, [r3, #0]
 8025e46:	429a      	cmp	r2, r3
 8025e48:	d00a      	beq.n	8025e60 <lfs_dir_find+0x78>
 8025e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e4c:	2b02      	cmp	r3, #2
 8025e4e:	d10c      	bne.n	8025e6a <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 8025e50:	2202      	movs	r2, #2
 8025e52:	495f      	ldr	r1, [pc, #380]	; (8025fd0 <lfs_dir_find+0x1e8>)
 8025e54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025e56:	f007 fdff 	bl	802da58 <memcmp>
 8025e5a:	4603      	mov	r3, r0
 8025e5c:	2b00      	cmp	r3, #0
 8025e5e:	d104      	bne.n	8025e6a <lfs_dir_find+0x82>
            name += namelen;
 8025e60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e64:	4413      	add	r3, r2
 8025e66:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 8025e68:	e7d9      	b.n	8025e1e <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 8025e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025e6e:	4413      	add	r3, r2
 8025e70:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 8025e72:	2301      	movs	r3, #1
 8025e74:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 8025e76:	4954      	ldr	r1, [pc, #336]	; (8025fc8 <lfs_dir_find+0x1e0>)
 8025e78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025e7a:	f007 fe84 	bl	802db86 <strspn>
 8025e7e:	4602      	mov	r2, r0
 8025e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025e82:	4413      	add	r3, r2
 8025e84:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 8025e86:	4950      	ldr	r1, [pc, #320]	; (8025fc8 <lfs_dir_find+0x1e0>)
 8025e88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025e8a:	f007 fe33 	bl	802daf4 <strcspn>
 8025e8e:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 8025e90:	6a3b      	ldr	r3, [r7, #32]
 8025e92:	2b00      	cmp	r3, #0
 8025e94:	d01d      	beq.n	8025ed2 <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 8025e96:	6a3b      	ldr	r3, [r7, #32]
 8025e98:	2b02      	cmp	r3, #2
 8025e9a:	d112      	bne.n	8025ec2 <lfs_dir_find+0xda>
 8025e9c:	2202      	movs	r2, #2
 8025e9e:	494c      	ldr	r1, [pc, #304]	; (8025fd0 <lfs_dir_find+0x1e8>)
 8025ea0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8025ea2:	f007 fdd9 	bl	802da58 <memcmp>
 8025ea6:	4603      	mov	r3, r0
 8025ea8:	2b00      	cmp	r3, #0
 8025eaa:	d10a      	bne.n	8025ec2 <lfs_dir_find+0xda>
                depth -= 1;
 8025eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025eae:	3b01      	subs	r3, #1
 8025eb0:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 8025eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025eb4:	2b00      	cmp	r3, #0
 8025eb6:	d107      	bne.n	8025ec8 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 8025eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025eba:	6a3b      	ldr	r3, [r7, #32]
 8025ebc:	4413      	add	r3, r2
 8025ebe:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 8025ec0:	e7ad      	b.n	8025e1e <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 8025ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025ec4:	3301      	adds	r3, #1
 8025ec6:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 8025ec8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8025eca:	6a3b      	ldr	r3, [r7, #32]
 8025ecc:	4413      	add	r3, r2
 8025ece:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 8025ed0:	e7d1      	b.n	8025e76 <lfs_dir_find+0x8e>
                break;
 8025ed2:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 8025ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025ed6:	781b      	ldrb	r3, [r3, #0]
 8025ed8:	2b00      	cmp	r3, #0
 8025eda:	d101      	bne.n	8025ee0 <lfs_dir_find+0xf8>
            return tag;
 8025edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ede:	e06c      	b.n	8025fba <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 8025ee0:	687b      	ldr	r3, [r7, #4]
 8025ee2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025ee4:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8025ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025ee8:	4618      	mov	r0, r3
 8025eea:	f7fe f9b7 	bl	802425c <lfs_tag_type3>
 8025eee:	4603      	mov	r3, r0
 8025ef0:	2b02      	cmp	r3, #2
 8025ef2:	d002      	beq.n	8025efa <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 8025ef4:	f06f 0313 	mvn.w	r3, #19
 8025ef8:	e05f      	b.n	8025fba <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 8025efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025efc:	4618      	mov	r0, r3
 8025efe:	f7fe f9d7 	bl	80242b0 <lfs_tag_id>
 8025f02:	4603      	mov	r3, r0
 8025f04:	461a      	mov	r2, r3
 8025f06:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8025f0a:	429a      	cmp	r2, r3
 8025f0c:	d01c      	beq.n	8025f48 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f10:	4618      	mov	r0, r3
 8025f12:	f7fe f9cd 	bl	80242b0 <lfs_tag_id>
 8025f16:	4603      	mov	r3, r0
 8025f18:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025f1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8025f1e:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 8025f22:	68ba      	ldr	r2, [r7, #8]
 8025f24:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8025f26:	9200      	str	r2, [sp, #0]
 8025f28:	4a2a      	ldr	r2, [pc, #168]	; (8025fd4 <lfs_dir_find+0x1ec>)
 8025f2a:	68b9      	ldr	r1, [r7, #8]
 8025f2c:	68f8      	ldr	r0, [r7, #12]
 8025f2e:	f7fe fda9 	bl	8024a84 <lfs_dir_get>
 8025f32:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8025f34:	69fb      	ldr	r3, [r7, #28]
 8025f36:	2b00      	cmp	r3, #0
 8025f38:	da01      	bge.n	8025f3e <lfs_dir_find+0x156>
                return res;
 8025f3a:	69fb      	ldr	r3, [r7, #28]
 8025f3c:	e03d      	b.n	8025fba <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 8025f3e:	68bb      	ldr	r3, [r7, #8]
 8025f40:	3318      	adds	r3, #24
 8025f42:	4618      	mov	r0, r3
 8025f44:	f7fe f925 	bl	8024192 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025f48:	68bb      	ldr	r3, [r7, #8]
 8025f4a:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 8025f4e:	212f      	movs	r1, #47	; 0x2f
 8025f50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8025f52:	f007 fdc2 	bl	802dada <strchr>
 8025f56:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025f58:	2b00      	cmp	r3, #0
 8025f5a:	d101      	bne.n	8025f60 <lfs_dir_find+0x178>
 8025f5c:	683b      	ldr	r3, [r7, #0]
 8025f5e:	e000      	b.n	8025f62 <lfs_dir_find+0x17a>
 8025f60:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 8025f62:	68fa      	ldr	r2, [r7, #12]
 8025f64:	613a      	str	r2, [r7, #16]
 8025f66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025f68:	617a      	str	r2, [r7, #20]
 8025f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8025f6c:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 8025f6e:	f107 0210 	add.w	r2, r7, #16
 8025f72:	9203      	str	r2, [sp, #12]
 8025f74:	4a18      	ldr	r2, [pc, #96]	; (8025fd8 <lfs_dir_find+0x1f0>)
 8025f76:	9202      	str	r2, [sp, #8]
 8025f78:	9301      	str	r3, [sp, #4]
 8025f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025f7c:	9300      	str	r3, [sp, #0]
 8025f7e:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 8025f82:	4622      	mov	r2, r4
 8025f84:	68b9      	ldr	r1, [r7, #8]
 8025f86:	68f8      	ldr	r0, [r7, #12]
 8025f88:	f7ff faae 	bl	80254e8 <lfs_dir_fetchmatch>
 8025f8c:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 8025f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f90:	2b00      	cmp	r3, #0
 8025f92:	da01      	bge.n	8025f98 <lfs_dir_find+0x1b0>
                return tag;
 8025f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f96:	e010      	b.n	8025fba <lfs_dir_find+0x1d2>
            }

            if (tag) {
 8025f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025f9a:	2b00      	cmp	r3, #0
 8025f9c:	d004      	beq.n	8025fa8 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 8025f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8025fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025fa2:	4413      	add	r3, r2
 8025fa4:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 8025fa6:	e73a      	b.n	8025e1e <lfs_dir_find+0x36>
            if (!dir->split) {
 8025fa8:	68bb      	ldr	r3, [r7, #8]
 8025faa:	7ddb      	ldrb	r3, [r3, #23]
 8025fac:	f083 0301 	eor.w	r3, r3, #1
 8025fb0:	b2db      	uxtb	r3, r3
 8025fb2:	2b00      	cmp	r3, #0
 8025fb4:	d0c8      	beq.n	8025f48 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 8025fb6:	f06f 0301 	mvn.w	r3, #1
    }
}
 8025fba:	4618      	mov	r0, r3
 8025fbc:	373c      	adds	r7, #60	; 0x3c
 8025fbe:	46bd      	mov	sp, r7
 8025fc0:	bd90      	pop	{r4, r7, pc}
 8025fc2:	bf00      	nop
 8025fc4:	002ffc00 	.word	0x002ffc00
 8025fc8:	08033960 	.word	0x08033960
 8025fcc:	08033964 	.word	0x08033964
 8025fd0:	08033968 	.word	0x08033968
 8025fd4:	700ffc00 	.word	0x700ffc00
 8025fd8:	08025d55 	.word	0x08025d55

08025fdc <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8025fdc:	b590      	push	{r4, r7, lr}
 8025fde:	b08b      	sub	sp, #44	; 0x2c
 8025fe0:	af04      	add	r7, sp, #16
 8025fe2:	60f8      	str	r0, [r7, #12]
 8025fe4:	60b9      	str	r1, [r7, #8]
 8025fe6:	607a      	str	r2, [r7, #4]
 8025fe8:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8025fea:	68fb      	ldr	r3, [r7, #12]
 8025fec:	f103 0010 	add.w	r0, r3, #16
 8025ff0:	68fc      	ldr	r4, [r7, #12]
 8025ff2:	68bb      	ldr	r3, [r7, #8]
 8025ff4:	681b      	ldr	r3, [r3, #0]
 8025ff6:	68ba      	ldr	r2, [r7, #8]
 8025ff8:	6852      	ldr	r2, [r2, #4]
 8025ffa:	6839      	ldr	r1, [r7, #0]
 8025ffc:	9103      	str	r1, [sp, #12]
 8025ffe:	6879      	ldr	r1, [r7, #4]
 8026000:	9102      	str	r1, [sp, #8]
 8026002:	9201      	str	r2, [sp, #4]
 8026004:	9300      	str	r3, [sp, #0]
 8026006:	2300      	movs	r3, #0
 8026008:	4622      	mov	r2, r4
 802600a:	4601      	mov	r1, r0
 802600c:	68f8      	ldr	r0, [r7, #12]
 802600e:	f7fd ff5b 	bl	8023ec8 <lfs_bd_prog>
 8026012:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8026014:	697b      	ldr	r3, [r7, #20]
 8026016:	2b00      	cmp	r3, #0
 8026018:	d001      	beq.n	802601e <lfs_dir_commitprog+0x42>
        return err;
 802601a:	697b      	ldr	r3, [r7, #20]
 802601c:	e010      	b.n	8026040 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 802601e:	68bb      	ldr	r3, [r7, #8]
 8026020:	68db      	ldr	r3, [r3, #12]
 8026022:	683a      	ldr	r2, [r7, #0]
 8026024:	6879      	ldr	r1, [r7, #4]
 8026026:	4618      	mov	r0, r3
 8026028:	f004 fef2 	bl	802ae10 <lfs_crc>
 802602c:	4602      	mov	r2, r0
 802602e:	68bb      	ldr	r3, [r7, #8]
 8026030:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8026032:	68bb      	ldr	r3, [r7, #8]
 8026034:	685a      	ldr	r2, [r3, #4]
 8026036:	683b      	ldr	r3, [r7, #0]
 8026038:	441a      	add	r2, r3
 802603a:	68bb      	ldr	r3, [r7, #8]
 802603c:	605a      	str	r2, [r3, #4]
    return 0;
 802603e:	2300      	movs	r3, #0
}
 8026040:	4618      	mov	r0, r3
 8026042:	371c      	adds	r7, #28
 8026044:	46bd      	mov	sp, r7
 8026046:	bd90      	pop	{r4, r7, pc}

08026048 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8026048:	b590      	push	{r4, r7, lr}
 802604a:	b08f      	sub	sp, #60	; 0x3c
 802604c:	af04      	add	r7, sp, #16
 802604e:	60f8      	str	r0, [r7, #12]
 8026050:	60b9      	str	r1, [r7, #8]
 8026052:	607a      	str	r2, [r7, #4]
 8026054:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8026056:	6878      	ldr	r0, [r7, #4]
 8026058:	f7fe f947 	bl	80242ea <lfs_tag_dsize>
 802605c:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 802605e:	68bb      	ldr	r3, [r7, #8]
 8026060:	685a      	ldr	r2, [r3, #4]
 8026062:	6a3b      	ldr	r3, [r7, #32]
 8026064:	441a      	add	r2, r3
 8026066:	68bb      	ldr	r3, [r7, #8]
 8026068:	695b      	ldr	r3, [r3, #20]
 802606a:	429a      	cmp	r2, r3
 802606c:	d902      	bls.n	8026074 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 802606e:	f06f 031b 	mvn.w	r3, #27
 8026072:	e065      	b.n	8026140 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8026074:	687b      	ldr	r3, [r7, #4]
 8026076:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802607a:	68bb      	ldr	r3, [r7, #8]
 802607c:	689b      	ldr	r3, [r3, #8]
 802607e:	4053      	eors	r3, r2
 8026080:	4618      	mov	r0, r3
 8026082:	f7fd fc92 	bl	80239aa <lfs_tobe32>
 8026086:	4603      	mov	r3, r0
 8026088:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 802608a:	f107 0214 	add.w	r2, r7, #20
 802608e:	2304      	movs	r3, #4
 8026090:	68b9      	ldr	r1, [r7, #8]
 8026092:	68f8      	ldr	r0, [r7, #12]
 8026094:	f7ff ffa2 	bl	8025fdc <lfs_dir_commitprog>
 8026098:	61f8      	str	r0, [r7, #28]
    if (err) {
 802609a:	69fb      	ldr	r3, [r7, #28]
 802609c:	2b00      	cmp	r3, #0
 802609e:	d001      	beq.n	80260a4 <lfs_dir_commitattr+0x5c>
        return err;
 80260a0:	69fb      	ldr	r3, [r7, #28]
 80260a2:	e04d      	b.n	8026140 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 80260a4:	687b      	ldr	r3, [r7, #4]
 80260a6:	2b00      	cmp	r3, #0
 80260a8:	db0c      	blt.n	80260c4 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 80260aa:	6a3b      	ldr	r3, [r7, #32]
 80260ac:	3b04      	subs	r3, #4
 80260ae:	683a      	ldr	r2, [r7, #0]
 80260b0:	68b9      	ldr	r1, [r7, #8]
 80260b2:	68f8      	ldr	r0, [r7, #12]
 80260b4:	f7ff ff92 	bl	8025fdc <lfs_dir_commitprog>
 80260b8:	61f8      	str	r0, [r7, #28]
        if (err) {
 80260ba:	69fb      	ldr	r3, [r7, #28]
 80260bc:	2b00      	cmp	r3, #0
 80260be:	d039      	beq.n	8026134 <lfs_dir_commitattr+0xec>
            return err;
 80260c0:	69fb      	ldr	r3, [r7, #28]
 80260c2:	e03d      	b.n	8026140 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 80260c4:	683b      	ldr	r3, [r7, #0]
 80260c6:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 80260c8:	2300      	movs	r3, #0
 80260ca:	627b      	str	r3, [r7, #36]	; 0x24
 80260cc:	e02d      	b.n	802612a <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80260ce:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 80260d0:	6a3a      	ldr	r2, [r7, #32]
 80260d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80260d4:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80260d6:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 80260d8:	69bb      	ldr	r3, [r7, #24]
 80260da:	681b      	ldr	r3, [r3, #0]
 80260dc:	69ba      	ldr	r2, [r7, #24]
 80260de:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 80260e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80260e2:	440a      	add	r2, r1
 80260e4:	2101      	movs	r1, #1
 80260e6:	9103      	str	r1, [sp, #12]
 80260e8:	f107 0113 	add.w	r1, r7, #19
 80260ec:	9102      	str	r1, [sp, #8]
 80260ee:	9201      	str	r2, [sp, #4]
 80260f0:	9300      	str	r3, [sp, #0]
 80260f2:	4623      	mov	r3, r4
 80260f4:	4602      	mov	r2, r0
 80260f6:	2100      	movs	r1, #0
 80260f8:	68f8      	ldr	r0, [r7, #12]
 80260fa:	f7fd fc9f 	bl	8023a3c <lfs_bd_read>
 80260fe:	61f8      	str	r0, [r7, #28]
            if (err) {
 8026100:	69fb      	ldr	r3, [r7, #28]
 8026102:	2b00      	cmp	r3, #0
 8026104:	d001      	beq.n	802610a <lfs_dir_commitattr+0xc2>
                return err;
 8026106:	69fb      	ldr	r3, [r7, #28]
 8026108:	e01a      	b.n	8026140 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 802610a:	f107 0213 	add.w	r2, r7, #19
 802610e:	2301      	movs	r3, #1
 8026110:	68b9      	ldr	r1, [r7, #8]
 8026112:	68f8      	ldr	r0, [r7, #12]
 8026114:	f7ff ff62 	bl	8025fdc <lfs_dir_commitprog>
 8026118:	61f8      	str	r0, [r7, #28]
            if (err) {
 802611a:	69fb      	ldr	r3, [r7, #28]
 802611c:	2b00      	cmp	r3, #0
 802611e:	d001      	beq.n	8026124 <lfs_dir_commitattr+0xdc>
                return err;
 8026120:	69fb      	ldr	r3, [r7, #28]
 8026122:	e00d      	b.n	8026140 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8026124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026126:	3301      	adds	r3, #1
 8026128:	627b      	str	r3, [r7, #36]	; 0x24
 802612a:	6a3b      	ldr	r3, [r7, #32]
 802612c:	3b04      	subs	r3, #4
 802612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8026130:	429a      	cmp	r2, r3
 8026132:	d3cc      	bcc.n	80260ce <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8026134:	687b      	ldr	r3, [r7, #4]
 8026136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802613a:	68bb      	ldr	r3, [r7, #8]
 802613c:	609a      	str	r2, [r3, #8]
    return 0;
 802613e:	2300      	movs	r3, #0
}
 8026140:	4618      	mov	r0, r3
 8026142:	372c      	adds	r7, #44	; 0x2c
 8026144:	46bd      	mov	sp, r7
 8026146:	bd90      	pop	{r4, r7, pc}

08026148 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8026148:	b590      	push	{r4, r7, lr}
 802614a:	b097      	sub	sp, #92	; 0x5c
 802614c:	af04      	add	r7, sp, #16
 802614e:	6078      	str	r0, [r7, #4]
 8026150:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8026152:	683b      	ldr	r3, [r7, #0]
 8026154:	685b      	ldr	r3, [r3, #4]
 8026156:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 802615a:	687b      	ldr	r3, [r7, #4]
 802615c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802615e:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 8026160:	4619      	mov	r1, r3
 8026162:	4610      	mov	r0, r2
 8026164:	f7fd fbb3 	bl	80238ce <lfs_alignup>
 8026168:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 802616a:	2300      	movs	r3, #0
 802616c:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 802616e:	2300      	movs	r3, #0
 8026170:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8026172:	e0a6      	b.n	80262c2 <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8026174:	683b      	ldr	r3, [r7, #0]
 8026176:	685b      	ldr	r3, [r3, #4]
 8026178:	3304      	adds	r3, #4
 802617a:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 802617c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802617e:	6a3b      	ldr	r3, [r7, #32]
 8026180:	1ad3      	subs	r3, r2, r3
 8026182:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8026186:	4618      	mov	r0, r3
 8026188:	f7fd fb7c 	bl	8023884 <lfs_min>
 802618c:	4602      	mov	r2, r0
 802618e:	6a3b      	ldr	r3, [r7, #32]
 8026190:	4413      	add	r3, r2
 8026192:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 8026194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8026196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026198:	429a      	cmp	r2, r3
 802619a:	d206      	bcs.n	80261aa <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 802619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802619e:	3b08      	subs	r3, #8
 80261a0:	4619      	mov	r1, r3
 80261a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80261a4:	f7fd fb6e 	bl	8023884 <lfs_min>
 80261a8:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 80261aa:	f04f 33ff 	mov.w	r3, #4294967295
 80261ae:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 80261b0:	6879      	ldr	r1, [r7, #4]
 80261b2:	683b      	ldr	r3, [r7, #0]
 80261b4:	681b      	ldr	r3, [r3, #0]
 80261b6:	2204      	movs	r2, #4
 80261b8:	9203      	str	r2, [sp, #12]
 80261ba:	f107 0214 	add.w	r2, r7, #20
 80261be:	9202      	str	r2, [sp, #8]
 80261c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80261c2:	9201      	str	r2, [sp, #4]
 80261c4:	9300      	str	r3, [sp, #0]
 80261c6:	2304      	movs	r3, #4
 80261c8:	460a      	mov	r2, r1
 80261ca:	2100      	movs	r1, #0
 80261cc:	6878      	ldr	r0, [r7, #4]
 80261ce:	f7fd fc35 	bl	8023a3c <lfs_bd_read>
 80261d2:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 80261d4:	69fb      	ldr	r3, [r7, #28]
 80261d6:	2b00      	cmp	r3, #0
 80261d8:	d005      	beq.n	80261e6 <lfs_dir_commitcrc+0x9e>
 80261da:	69fb      	ldr	r3, [r7, #28]
 80261dc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80261e0:	d001      	beq.n	80261e6 <lfs_dir_commitcrc+0x9e>
            return err;
 80261e2:	69fb      	ldr	r3, [r7, #28]
 80261e4:	e0e8      	b.n	80263b8 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 80261e6:	697b      	ldr	r3, [r7, #20]
 80261e8:	4618      	mov	r0, r3
 80261ea:	f7fd fbd2 	bl	8023992 <lfs_frombe32>
 80261ee:	4603      	mov	r3, r0
 80261f0:	43db      	mvns	r3, r3
 80261f2:	0fdb      	lsrs	r3, r3, #31
 80261f4:	2b00      	cmp	r3, #0
 80261f6:	bf14      	ite	ne
 80261f8:	2301      	movne	r3, #1
 80261fa:	2300      	moveq	r3, #0
 80261fc:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 80261fe:	7efb      	ldrb	r3, [r7, #27]
 8026200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8026204:	051a      	lsls	r2, r3, #20
 8026206:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8026208:	6a3b      	ldr	r3, [r7, #32]
 802620a:	1acb      	subs	r3, r1, r3
 802620c:	4313      	orrs	r3, r2
 802620e:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8026212:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8026216:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8026218:	683b      	ldr	r3, [r7, #0]
 802621a:	689a      	ldr	r2, [r3, #8]
 802621c:	697b      	ldr	r3, [r7, #20]
 802621e:	4053      	eors	r3, r2
 8026220:	4618      	mov	r0, r3
 8026222:	f7fd fbc2 	bl	80239aa <lfs_tobe32>
 8026226:	4603      	mov	r3, r0
 8026228:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 802622a:	683b      	ldr	r3, [r7, #0]
 802622c:	68db      	ldr	r3, [r3, #12]
 802622e:	f107 010c 	add.w	r1, r7, #12
 8026232:	2204      	movs	r2, #4
 8026234:	4618      	mov	r0, r3
 8026236:	f004 fdeb 	bl	802ae10 <lfs_crc>
 802623a:	4602      	mov	r2, r0
 802623c:	683b      	ldr	r3, [r7, #0]
 802623e:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 8026240:	683b      	ldr	r3, [r7, #0]
 8026242:	68db      	ldr	r3, [r3, #12]
 8026244:	4618      	mov	r0, r3
 8026246:	f7fd fb98 	bl	802397a <lfs_tole32>
 802624a:	4603      	mov	r3, r0
 802624c:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 802624e:	687b      	ldr	r3, [r7, #4]
 8026250:	f103 0010 	add.w	r0, r3, #16
 8026254:	687c      	ldr	r4, [r7, #4]
 8026256:	683b      	ldr	r3, [r7, #0]
 8026258:	681b      	ldr	r3, [r3, #0]
 802625a:	683a      	ldr	r2, [r7, #0]
 802625c:	6852      	ldr	r2, [r2, #4]
 802625e:	2108      	movs	r1, #8
 8026260:	9103      	str	r1, [sp, #12]
 8026262:	f107 010c 	add.w	r1, r7, #12
 8026266:	9102      	str	r1, [sp, #8]
 8026268:	9201      	str	r2, [sp, #4]
 802626a:	9300      	str	r3, [sp, #0]
 802626c:	2300      	movs	r3, #0
 802626e:	4622      	mov	r2, r4
 8026270:	4601      	mov	r1, r0
 8026272:	6878      	ldr	r0, [r7, #4]
 8026274:	f7fd fe28 	bl	8023ec8 <lfs_bd_prog>
 8026278:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 802627a:	69fb      	ldr	r3, [r7, #28]
 802627c:	2b00      	cmp	r3, #0
 802627e:	d001      	beq.n	8026284 <lfs_dir_commitcrc+0x13c>
            return err;
 8026280:	69fb      	ldr	r3, [r7, #28]
 8026282:	e099      	b.n	80263b8 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 8026284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026286:	2b00      	cmp	r3, #0
 8026288:	d106      	bne.n	8026298 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 802628a:	683b      	ldr	r3, [r7, #0]
 802628c:	685b      	ldr	r3, [r3, #4]
 802628e:	3304      	adds	r3, #4
 8026290:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 8026292:	683b      	ldr	r3, [r7, #0]
 8026294:	68db      	ldr	r3, [r3, #12]
 8026296:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8026298:	697b      	ldr	r3, [r7, #20]
 802629a:	4618      	mov	r0, r3
 802629c:	f7fe f818 	bl	80242d0 <lfs_tag_size>
 80262a0:	4603      	mov	r3, r0
 80262a2:	1d1a      	adds	r2, r3, #4
 80262a4:	683b      	ldr	r3, [r7, #0]
 80262a6:	685b      	ldr	r3, [r3, #4]
 80262a8:	441a      	add	r2, r3
 80262aa:	683b      	ldr	r3, [r7, #0]
 80262ac:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 80262ae:	7efb      	ldrb	r3, [r7, #27]
 80262b0:	07da      	lsls	r2, r3, #31
 80262b2:	697b      	ldr	r3, [r7, #20]
 80262b4:	405a      	eors	r2, r3
 80262b6:	683b      	ldr	r3, [r7, #0]
 80262b8:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 80262ba:	683b      	ldr	r3, [r7, #0]
 80262bc:	f04f 32ff 	mov.w	r2, #4294967295
 80262c0:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 80262c2:	683b      	ldr	r3, [r7, #0]
 80262c4:	685b      	ldr	r3, [r3, #4]
 80262c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80262c8:	429a      	cmp	r2, r3
 80262ca:	f63f af53 	bhi.w	8026174 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 80262ce:	687b      	ldr	r3, [r7, #4]
 80262d0:	f103 0110 	add.w	r1, r3, #16
 80262d4:	687a      	ldr	r2, [r7, #4]
 80262d6:	2300      	movs	r3, #0
 80262d8:	6878      	ldr	r0, [r7, #4]
 80262da:	f7fd fdc1 	bl	8023e60 <lfs_bd_sync>
 80262de:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80262e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80262e2:	2b00      	cmp	r3, #0
 80262e4:	d001      	beq.n	80262ea <lfs_dir_commitcrc+0x1a2>
        return err;
 80262e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80262e8:	e066      	b.n	80263b8 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80262ea:	683b      	ldr	r3, [r7, #0]
 80262ec:	691b      	ldr	r3, [r3, #16]
 80262ee:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 80262f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80262f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80262f4:	e05b      	b.n	80263ae <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 80262f6:	f04f 33ff 	mov.w	r3, #4294967295
 80262fa:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80262fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80262fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026300:	e030      	b.n	8026364 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 8026302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8026306:	429a      	cmp	r2, r3
 8026308:	d106      	bne.n	8026318 <lfs_dir_commitcrc+0x1d0>
 802630a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802630c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802630e:	429a      	cmp	r2, r3
 8026310:	d002      	beq.n	8026318 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 8026312:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8026316:	e04f      	b.n	80263b8 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8026318:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 802631a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802631c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802631e:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8026320:	1d18      	adds	r0, r3, #4
 8026322:	683b      	ldr	r3, [r7, #0]
 8026324:	681b      	ldr	r3, [r3, #0]
 8026326:	2201      	movs	r2, #1
 8026328:	9203      	str	r2, [sp, #12]
 802632a:	f107 020b 	add.w	r2, r7, #11
 802632e:	9202      	str	r2, [sp, #8]
 8026330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026332:	9201      	str	r2, [sp, #4]
 8026334:	9300      	str	r3, [sp, #0]
 8026336:	4603      	mov	r3, r0
 8026338:	460a      	mov	r2, r1
 802633a:	2100      	movs	r1, #0
 802633c:	6878      	ldr	r0, [r7, #4]
 802633e:	f7fd fb7d 	bl	8023a3c <lfs_bd_read>
 8026342:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 8026344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026346:	2b00      	cmp	r3, #0
 8026348:	d001      	beq.n	802634e <lfs_dir_commitcrc+0x206>
                return err;
 802634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802634c:	e034      	b.n	80263b8 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 802634e:	f107 030b 	add.w	r3, r7, #11
 8026352:	2201      	movs	r2, #1
 8026354:	4619      	mov	r1, r3
 8026356:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8026358:	f004 fd5a 	bl	802ae10 <lfs_crc>
 802635c:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 802635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026360:	3301      	adds	r3, #1
 8026362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8026364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026366:	3304      	adds	r3, #4
 8026368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802636a:	429a      	cmp	r2, r3
 802636c:	d3c9      	bcc.n	8026302 <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 802636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026370:	2b00      	cmp	r3, #0
 8026372:	d002      	beq.n	802637a <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 8026374:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8026378:	e01e      	b.n	80263b8 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 802637a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802637c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802637e:	1ad3      	subs	r3, r2, r3
 8026380:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8026384:	4618      	mov	r0, r3
 8026386:	f7fd fa7d 	bl	8023884 <lfs_min>
 802638a:	4602      	mov	r2, r0
 802638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802638e:	4413      	add	r3, r2
 8026390:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 8026392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026396:	429a      	cmp	r2, r3
 8026398:	d206      	bcs.n	80263a8 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 802639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802639c:	3b08      	subs	r3, #8
 802639e:	4619      	mov	r1, r3
 80263a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80263a2:	f7fd fa6f 	bl	8023884 <lfs_min>
 80263a6:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 80263a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80263aa:	3304      	adds	r3, #4
 80263ac:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 80263ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80263b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80263b2:	429a      	cmp	r2, r3
 80263b4:	d39f      	bcc.n	80262f6 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 80263b6:	2300      	movs	r3, #0
}
 80263b8:	4618      	mov	r0, r3
 80263ba:	374c      	adds	r7, #76	; 0x4c
 80263bc:	46bd      	mov	sp, r7
 80263be:	bd90      	pop	{r4, r7, pc}

080263c0 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 80263c0:	b580      	push	{r7, lr}
 80263c2:	b08a      	sub	sp, #40	; 0x28
 80263c4:	af04      	add	r7, sp, #16
 80263c6:	6078      	str	r0, [r7, #4]
 80263c8:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 80263ca:	2300      	movs	r3, #0
 80263cc:	617b      	str	r3, [r7, #20]
 80263ce:	e016      	b.n	80263fe <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 80263d0:	697b      	ldr	r3, [r7, #20]
 80263d2:	3301      	adds	r3, #1
 80263d4:	2b00      	cmp	r3, #0
 80263d6:	f003 0301 	and.w	r3, r3, #1
 80263da:	bfb8      	it	lt
 80263dc:	425b      	neglt	r3, r3
 80263de:	009b      	lsls	r3, r3, #2
 80263e0:	683a      	ldr	r2, [r7, #0]
 80263e2:	4413      	add	r3, r2
 80263e4:	4619      	mov	r1, r3
 80263e6:	6878      	ldr	r0, [r7, #4]
 80263e8:	f7fe f9b2 	bl	8024750 <lfs_alloc>
 80263ec:	60f8      	str	r0, [r7, #12]
        if (err) {
 80263ee:	68fb      	ldr	r3, [r7, #12]
 80263f0:	2b00      	cmp	r3, #0
 80263f2:	d001      	beq.n	80263f8 <lfs_dir_alloc+0x38>
            return err;
 80263f4:	68fb      	ldr	r3, [r7, #12]
 80263f6:	e058      	b.n	80264aa <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 80263f8:	697b      	ldr	r3, [r7, #20]
 80263fa:	3301      	adds	r3, #1
 80263fc:	617b      	str	r3, [r7, #20]
 80263fe:	697b      	ldr	r3, [r7, #20]
 8026400:	2b01      	cmp	r3, #1
 8026402:	dde5      	ble.n	80263d0 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducibility in case initial block is unreadable
    dir->rev = 0;
 8026404:	683b      	ldr	r3, [r7, #0]
 8026406:	2200      	movs	r2, #0
 8026408:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 802640a:	6879      	ldr	r1, [r7, #4]
 802640c:	683b      	ldr	r3, [r7, #0]
 802640e:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 8026410:	683a      	ldr	r2, [r7, #0]
 8026412:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 8026414:	2004      	movs	r0, #4
 8026416:	9003      	str	r0, [sp, #12]
 8026418:	9202      	str	r2, [sp, #8]
 802641a:	2200      	movs	r2, #0
 802641c:	9201      	str	r2, [sp, #4]
 802641e:	9300      	str	r3, [sp, #0]
 8026420:	2304      	movs	r3, #4
 8026422:	460a      	mov	r2, r1
 8026424:	2100      	movs	r1, #0
 8026426:	6878      	ldr	r0, [r7, #4]
 8026428:	f7fd fb08 	bl	8023a3c <lfs_bd_read>
 802642c:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 802642e:	683b      	ldr	r3, [r7, #0]
 8026430:	689b      	ldr	r3, [r3, #8]
 8026432:	4618      	mov	r0, r3
 8026434:	f7fd fa96 	bl	8023964 <lfs_fromle32>
 8026438:	4602      	mov	r2, r0
 802643a:	683b      	ldr	r3, [r7, #0]
 802643c:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 802643e:	693b      	ldr	r3, [r7, #16]
 8026440:	2b00      	cmp	r3, #0
 8026442:	d005      	beq.n	8026450 <lfs_dir_alloc+0x90>
 8026444:	693b      	ldr	r3, [r7, #16]
 8026446:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802644a:	d001      	beq.n	8026450 <lfs_dir_alloc+0x90>
        return err;
 802644c:	693b      	ldr	r3, [r7, #16]
 802644e:	e02c      	b.n	80264aa <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 8026450:	687b      	ldr	r3, [r7, #4]
 8026452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026456:	2b00      	cmp	r3, #0
 8026458:	dd0e      	ble.n	8026478 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 802645a:	683b      	ldr	r3, [r7, #0]
 802645c:	689a      	ldr	r2, [r3, #8]
 802645e:	687b      	ldr	r3, [r7, #4]
 8026460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8026464:	3301      	adds	r3, #1
 8026466:	f043 0301 	orr.w	r3, r3, #1
 802646a:	4619      	mov	r1, r3
 802646c:	4610      	mov	r0, r2
 802646e:	f7fd fa2e 	bl	80238ce <lfs_alignup>
 8026472:	4602      	mov	r2, r0
 8026474:	683b      	ldr	r3, [r7, #0]
 8026476:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 8026478:	683b      	ldr	r3, [r7, #0]
 802647a:	2204      	movs	r2, #4
 802647c:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 802647e:	683b      	ldr	r3, [r7, #0]
 8026480:	f04f 32ff 	mov.w	r2, #4294967295
 8026484:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 8026486:	683b      	ldr	r3, [r7, #0]
 8026488:	2200      	movs	r2, #0
 802648a:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 802648c:	683b      	ldr	r3, [r7, #0]
 802648e:	f04f 32ff 	mov.w	r2, #4294967295
 8026492:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8026494:	683b      	ldr	r3, [r7, #0]
 8026496:	f04f 32ff 	mov.w	r2, #4294967295
 802649a:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 802649c:	683b      	ldr	r3, [r7, #0]
 802649e:	2200      	movs	r2, #0
 80264a0:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 80264a2:	683b      	ldr	r3, [r7, #0]
 80264a4:	2200      	movs	r2, #0
 80264a6:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 80264a8:	2300      	movs	r3, #0
}
 80264aa:	4618      	mov	r0, r3
 80264ac:	3718      	adds	r7, #24
 80264ae:	46bd      	mov	sp, r7
 80264b0:	bd80      	pop	{r7, pc}
	...

080264b4 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 80264b4:	b580      	push	{r7, lr}
 80264b6:	b08a      	sub	sp, #40	; 0x28
 80264b8:	af00      	add	r7, sp, #0
 80264ba:	60f8      	str	r0, [r7, #12]
 80264bc:	60b9      	str	r1, [r7, #8]
 80264be:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 80264c0:	68fb      	ldr	r3, [r7, #12]
 80264c2:	3348      	adds	r3, #72	; 0x48
 80264c4:	461a      	mov	r2, r3
 80264c6:	6879      	ldr	r1, [r7, #4]
 80264c8:	68f8      	ldr	r0, [r7, #12]
 80264ca:	f7ff fb97 	bl	8025bfc <lfs_dir_getgstate>
 80264ce:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 80264d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80264d2:	2b00      	cmp	r3, #0
 80264d4:	d001      	beq.n	80264da <lfs_dir_drop+0x26>
        return err;
 80264d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80264d8:	e022      	b.n	8026520 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 80264da:	687b      	ldr	r3, [r7, #4]
 80264dc:	3318      	adds	r3, #24
 80264de:	4618      	mov	r0, r3
 80264e0:	f7fd fe71 	bl	80241c6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 80264e4:	687b      	ldr	r3, [r7, #4]
 80264e6:	7ddb      	ldrb	r3, [r3, #23]
 80264e8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80264ec:	051a      	lsls	r2, r3, #20
 80264ee:	4b0e      	ldr	r3, [pc, #56]	; (8026528 <lfs_dir_drop+0x74>)
 80264f0:	4313      	orrs	r3, r2
 80264f2:	61fb      	str	r3, [r7, #28]
 80264f4:	687b      	ldr	r3, [r7, #4]
 80264f6:	3318      	adds	r3, #24
 80264f8:	623b      	str	r3, [r7, #32]
 80264fa:	f107 021c 	add.w	r2, r7, #28
 80264fe:	2301      	movs	r3, #1
 8026500:	68b9      	ldr	r1, [r7, #8]
 8026502:	68f8      	ldr	r0, [r7, #12]
 8026504:	f001 f978 	bl	80277f8 <lfs_dir_commit>
 8026508:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 802650a:	687b      	ldr	r3, [r7, #4]
 802650c:	3318      	adds	r3, #24
 802650e:	4618      	mov	r0, r3
 8026510:	f7fd fe3f 	bl	8024192 <lfs_pair_fromle32>
    if (err) {
 8026514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026516:	2b00      	cmp	r3, #0
 8026518:	d001      	beq.n	802651e <lfs_dir_drop+0x6a>
        return err;
 802651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802651c:	e000      	b.n	8026520 <lfs_dir_drop+0x6c>
    }

    return 0;
 802651e:	2300      	movs	r3, #0
}
 8026520:	4618      	mov	r0, r3
 8026522:	3728      	adds	r7, #40	; 0x28
 8026524:	46bd      	mov	sp, r7
 8026526:	bd80      	pop	{r7, pc}
 8026528:	000ffc08 	.word	0x000ffc08

0802652c <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 802652c:	b580      	push	{r7, lr}
 802652e:	b092      	sub	sp, #72	; 0x48
 8026530:	af04      	add	r7, sp, #16
 8026532:	60f8      	str	r0, [r7, #12]
 8026534:	60b9      	str	r1, [r7, #8]
 8026536:	607a      	str	r2, [r7, #4]
 8026538:	603b      	str	r3, [r7, #0]
    // create tail metadata pair
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 802653a:	f107 0310 	add.w	r3, r7, #16
 802653e:	4619      	mov	r1, r3
 8026540:	68f8      	ldr	r0, [r7, #12]
 8026542:	f7ff ff3d 	bl	80263c0 <lfs_dir_alloc>
 8026546:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 8026548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802654a:	2b00      	cmp	r3, #0
 802654c:	d001      	beq.n	8026552 <lfs_dir_split+0x26>
        return err;
 802654e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026550:	e03c      	b.n	80265cc <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 8026552:	68bb      	ldr	r3, [r7, #8]
 8026554:	7ddb      	ldrb	r3, [r3, #23]
 8026556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
 802655a:	68bb      	ldr	r3, [r7, #8]
 802655c:	699b      	ldr	r3, [r3, #24]
 802655e:	62bb      	str	r3, [r7, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
 8026560:	68bb      	ldr	r3, [r7, #8]
 8026562:	69db      	ldr	r3, [r3, #28]
 8026564:	62fb      	str	r3, [r7, #44]	; 0x2c

    // note we don't care about LFS_OK_RELOCATED
    int res = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 8026566:	f107 0110 	add.w	r1, r7, #16
 802656a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 802656e:	9302      	str	r3, [sp, #8]
 8026570:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026574:	9301      	str	r3, [sp, #4]
 8026576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026578:	9300      	str	r3, [sp, #0]
 802657a:	683b      	ldr	r3, [r7, #0]
 802657c:	687a      	ldr	r2, [r7, #4]
 802657e:	68f8      	ldr	r0, [r7, #12]
 8026580:	f000 f87a 	bl	8026678 <lfs_dir_compact>
 8026584:	6338      	str	r0, [r7, #48]	; 0x30
    if (res < 0) {
 8026586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8026588:	2b00      	cmp	r3, #0
 802658a:	da01      	bge.n	8026590 <lfs_dir_split+0x64>
        return res;
 802658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802658e:	e01d      	b.n	80265cc <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8026590:	693a      	ldr	r2, [r7, #16]
 8026592:	68bb      	ldr	r3, [r7, #8]
 8026594:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 8026596:	697a      	ldr	r2, [r7, #20]
 8026598:	68bb      	ldr	r3, [r7, #8]
 802659a:	61da      	str	r2, [r3, #28]
    dir->split = true;
 802659c:	68bb      	ldr	r3, [r7, #8]
 802659e:	2201      	movs	r2, #1
 80265a0:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 80265a2:	68ba      	ldr	r2, [r7, #8]
 80265a4:	68fb      	ldr	r3, [r7, #12]
 80265a6:	3320      	adds	r3, #32
 80265a8:	4619      	mov	r1, r3
 80265aa:	4610      	mov	r0, r2
 80265ac:	f7fd fd9a 	bl	80240e4 <lfs_pair_cmp>
 80265b0:	4603      	mov	r3, r0
 80265b2:	2b00      	cmp	r3, #0
 80265b4:	d109      	bne.n	80265ca <lfs_dir_split+0x9e>
 80265b6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80265ba:	2b00      	cmp	r3, #0
 80265bc:	d105      	bne.n	80265ca <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 80265be:	693a      	ldr	r2, [r7, #16]
 80265c0:	68fb      	ldr	r3, [r7, #12]
 80265c2:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 80265c4:	697a      	ldr	r2, [r7, #20]
 80265c6:	68fb      	ldr	r3, [r7, #12]
 80265c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 80265ca:	2300      	movs	r3, #0
}
 80265cc:	4618      	mov	r0, r3
 80265ce:	3738      	adds	r7, #56	; 0x38
 80265d0:	46bd      	mov	sp, r7
 80265d2:	bd80      	pop	{r7, pc}

080265d4 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 80265d4:	b580      	push	{r7, lr}
 80265d6:	b086      	sub	sp, #24
 80265d8:	af00      	add	r7, sp, #0
 80265da:	60f8      	str	r0, [r7, #12]
 80265dc:	60b9      	str	r1, [r7, #8]
 80265de:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 80265e0:	68fb      	ldr	r3, [r7, #12]
 80265e2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 80265e4:	68b8      	ldr	r0, [r7, #8]
 80265e6:	f7fd fe80 	bl	80242ea <lfs_tag_dsize>
 80265ea:	4602      	mov	r2, r0
 80265ec:	697b      	ldr	r3, [r7, #20]
 80265ee:	681b      	ldr	r3, [r3, #0]
 80265f0:	441a      	add	r2, r3
 80265f2:	697b      	ldr	r3, [r7, #20]
 80265f4:	601a      	str	r2, [r3, #0]
    return 0;
 80265f6:	2300      	movs	r3, #0
}
 80265f8:	4618      	mov	r0, r3
 80265fa:	3718      	adds	r7, #24
 80265fc:	46bd      	mov	sp, r7
 80265fe:	bd80      	pop	{r7, pc}

08026600 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8026600:	b580      	push	{r7, lr}
 8026602:	b086      	sub	sp, #24
 8026604:	af00      	add	r7, sp, #0
 8026606:	60f8      	str	r0, [r7, #12]
 8026608:	60b9      	str	r1, [r7, #8]
 802660a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 802660c:	68fb      	ldr	r3, [r7, #12]
 802660e:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8026610:	697b      	ldr	r3, [r7, #20]
 8026612:	6818      	ldr	r0, [r3, #0]
 8026614:	697b      	ldr	r3, [r7, #20]
 8026616:	6859      	ldr	r1, [r3, #4]
 8026618:	687b      	ldr	r3, [r7, #4]
 802661a:	68ba      	ldr	r2, [r7, #8]
 802661c:	f7ff fd14 	bl	8026048 <lfs_dir_commitattr>
 8026620:	4603      	mov	r3, r0
}
 8026622:	4618      	mov	r0, r3
 8026624:	3718      	adds	r7, #24
 8026626:	46bd      	mov	sp, r7
 8026628:	bd80      	pop	{r7, pc}

0802662a <lfs_dir_needsrelocation>:
#endif

#ifndef LFS_READONLY
static bool lfs_dir_needsrelocation(lfs_t *lfs, lfs_mdir_t *dir) {
 802662a:	b480      	push	{r7}
 802662c:	b083      	sub	sp, #12
 802662e:	af00      	add	r7, sp, #0
 8026630:	6078      	str	r0, [r7, #4]
 8026632:	6039      	str	r1, [r7, #0]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    return (lfs->cfg->block_cycles > 0
 8026634:	687b      	ldr	r3, [r7, #4]
 8026636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            && ((dir->rev + 1) % ((lfs->cfg->block_cycles+1)|1) == 0));
 802663a:	2b00      	cmp	r3, #0
 802663c:	dd11      	ble.n	8026662 <lfs_dir_needsrelocation+0x38>
 802663e:	683b      	ldr	r3, [r7, #0]
 8026640:	689b      	ldr	r3, [r3, #8]
 8026642:	3301      	adds	r3, #1
 8026644:	687a      	ldr	r2, [r7, #4]
 8026646:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 802664a:	3201      	adds	r2, #1
 802664c:	f042 0201 	orr.w	r2, r2, #1
 8026650:	fbb3 f1f2 	udiv	r1, r3, r2
 8026654:	fb01 f202 	mul.w	r2, r1, r2
 8026658:	1a9b      	subs	r3, r3, r2
 802665a:	2b00      	cmp	r3, #0
 802665c:	d101      	bne.n	8026662 <lfs_dir_needsrelocation+0x38>
 802665e:	2301      	movs	r3, #1
 8026660:	e000      	b.n	8026664 <lfs_dir_needsrelocation+0x3a>
 8026662:	2300      	movs	r3, #0
 8026664:	f003 0301 	and.w	r3, r3, #1
 8026668:	b2db      	uxtb	r3, r3
}
 802666a:	4618      	mov	r0, r3
 802666c:	370c      	adds	r7, #12
 802666e:	46bd      	mov	sp, r7
 8026670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8026674:	4770      	bx	lr
	...

08026678 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026678:	b580      	push	{r7, lr}
 802667a:	b0a4      	sub	sp, #144	; 0x90
 802667c:	af0a      	add	r7, sp, #40	; 0x28
 802667e:	60f8      	str	r0, [r7, #12]
 8026680:	60b9      	str	r1, [r7, #8]
 8026682:	607a      	str	r2, [r7, #4]
 8026684:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    bool relocated = false;
 8026686:	2300      	movs	r3, #0
 8026688:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    bool tired = lfs_dir_needsrelocation(lfs, dir);
 802668c:	68b9      	ldr	r1, [r7, #8]
 802668e:	68f8      	ldr	r0, [r7, #12]
 8026690:	f7ff ffcb 	bl	802662a <lfs_dir_needsrelocation>
 8026694:	4603      	mov	r3, r0
 8026696:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

    // increment revision count
    dir->rev += 1;
 802669a:	68bb      	ldr	r3, [r7, #8]
 802669c:	689b      	ldr	r3, [r3, #8]
 802669e:	1c5a      	adds	r2, r3, #1
 80266a0:	68bb      	ldr	r3, [r7, #8]
 80266a2:	609a      	str	r2, [r3, #8]
    if (lfs->lfs1) {
        tired = false;
    }
#endif

    if (tired && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) != 0) {
 80266a4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80266a8:	2b00      	cmp	r3, #0
 80266aa:	d00e      	beq.n	80266ca <lfs_dir_compact+0x52>
 80266ac:	68bb      	ldr	r3, [r7, #8]
 80266ae:	2200      	movs	r2, #0
 80266b0:	657a      	str	r2, [r7, #84]	; 0x54
 80266b2:	2201      	movs	r2, #1
 80266b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80266b6:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80266ba:	4611      	mov	r1, r2
 80266bc:	4618      	mov	r0, r3
 80266be:	f7fd fd11 	bl	80240e4 <lfs_pair_cmp>
 80266c2:	4603      	mov	r3, r0
 80266c4:	2b00      	cmp	r3, #0
 80266c6:	f040 8155 	bne.w	8026974 <lfs_dir_compact+0x2fc>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80266ca:	68bb      	ldr	r3, [r7, #8]
 80266cc:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80266ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80266d0:	2300      	movs	r3, #0
 80266d2:	643b      	str	r3, [r7, #64]	; 0x40
 80266d4:	f04f 33ff 	mov.w	r3, #4294967295
 80266d8:	647b      	str	r3, [r7, #68]	; 0x44
 80266da:	f04f 33ff 	mov.w	r3, #4294967295
 80266de:	64bb      	str	r3, [r7, #72]	; 0x48
 80266e0:	2300      	movs	r3, #0
 80266e2:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80266e4:	68fb      	ldr	r3, [r7, #12]
 80266e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80266e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80266ea:	2b00      	cmp	r3, #0
 80266ec:	d004      	beq.n	80266f8 <lfs_dir_compact+0x80>
 80266ee:	68fb      	ldr	r3, [r7, #12]
 80266f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80266f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80266f4:	3b08      	subs	r3, #8
 80266f6:	e003      	b.n	8026700 <lfs_dir_compact+0x88>
 80266f8:	68fb      	ldr	r3, [r7, #12]
 80266fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80266fc:	69db      	ldr	r3, [r3, #28]
 80266fe:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8026700:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 8026702:	68bb      	ldr	r3, [r7, #8]
 8026704:	685b      	ldr	r3, [r3, #4]
 8026706:	4619      	mov	r1, r3
 8026708:	68f8      	ldr	r0, [r7, #12]
 802670a:	f7fd fc89 	bl	8024020 <lfs_bd_erase>
 802670e:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026712:	2b00      	cmp	r3, #0
 8026714:	d006      	beq.n	8026724 <lfs_dir_compact+0xac>
                if (err == LFS_ERR_CORRUPT) {
 8026716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026718:	f113 0f54 	cmn.w	r3, #84	; 0x54
 802671c:	f000 812c 	beq.w	8026978 <lfs_dir_compact+0x300>
                    goto relocate;
                }
                return err;
 8026720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026722:	e188      	b.n	8026a36 <lfs_dir_compact+0x3be>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8026724:	68bb      	ldr	r3, [r7, #8]
 8026726:	689b      	ldr	r3, [r3, #8]
 8026728:	4618      	mov	r0, r3
 802672a:	f7fd f926 	bl	802397a <lfs_tole32>
 802672e:	4602      	mov	r2, r0
 8026730:	68bb      	ldr	r3, [r7, #8]
 8026732:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8026734:	68bb      	ldr	r3, [r7, #8]
 8026736:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 802673a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 802673e:	2304      	movs	r3, #4
 8026740:	68f8      	ldr	r0, [r7, #12]
 8026742:	f7ff fc4b 	bl	8025fdc <lfs_dir_commitprog>
 8026746:	65f8      	str	r0, [r7, #92]	; 0x5c
            dir->rev = lfs_fromle32(dir->rev);
 8026748:	68bb      	ldr	r3, [r7, #8]
 802674a:	689b      	ldr	r3, [r3, #8]
 802674c:	4618      	mov	r0, r3
 802674e:	f7fd f909 	bl	8023964 <lfs_fromle32>
 8026752:	4602      	mov	r2, r0
 8026754:	68bb      	ldr	r3, [r7, #8]
 8026756:	609a      	str	r2, [r3, #8]
            if (err) {
 8026758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802675a:	2b00      	cmp	r3, #0
 802675c:	d006      	beq.n	802676c <lfs_dir_compact+0xf4>
                if (err == LFS_ERR_CORRUPT) {
 802675e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026760:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026764:	f000 810a 	beq.w	802697c <lfs_dir_compact+0x304>
                    goto relocate;
                }
                return err;
 8026768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802676a:	e164      	b.n	8026a36 <lfs_dir_compact+0x3be>
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 802676c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026770:	425b      	negs	r3, r3
 8026772:	b29b      	uxth	r3, r3
 8026774:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026776:	68fa      	ldr	r2, [r7, #12]
 8026778:	637a      	str	r2, [r7, #52]	; 0x34
 802677a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 802677e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8026780:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8026784:	9208      	str	r2, [sp, #32]
 8026786:	4aae      	ldr	r2, [pc, #696]	; (8026a40 <lfs_dir_compact+0x3c8>)
 8026788:	9207      	str	r2, [sp, #28]
 802678a:	9306      	str	r3, [sp, #24]
 802678c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8026790:	9305      	str	r3, [sp, #20]
 8026792:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026796:	9304      	str	r3, [sp, #16]
 8026798:	2300      	movs	r3, #0
 802679a:	9303      	str	r3, [sp, #12]
 802679c:	4ba9      	ldr	r3, [pc, #676]	; (8026a44 <lfs_dir_compact+0x3cc>)
 802679e:	9302      	str	r3, [sp, #8]
 80267a0:	683b      	ldr	r3, [r7, #0]
 80267a2:	9301      	str	r3, [sp, #4]
 80267a4:	687b      	ldr	r3, [r7, #4]
 80267a6:	9300      	str	r3, [sp, #0]
 80267a8:	f04f 33ff 	mov.w	r3, #4294967295
 80267ac:	2200      	movs	r2, #0
 80267ae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80267b0:	68f8      	ldr	r0, [r7, #12]
 80267b2:	f7fe fab9 	bl	8024d28 <lfs_dir_traverse>
 80267b6:	65f8      	str	r0, [r7, #92]	; 0x5c
                        lfs, &commit});
            if (err) {
 80267b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80267ba:	2b00      	cmp	r3, #0
 80267bc:	d006      	beq.n	80267cc <lfs_dir_compact+0x154>
                if (err == LFS_ERR_CORRUPT) {
 80267be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80267c0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80267c4:	f000 80dc 	beq.w	8026980 <lfs_dir_compact+0x308>
                    goto relocate;
                }
                return err;
 80267c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80267ca:	e134      	b.n	8026a36 <lfs_dir_compact+0x3be>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80267cc:	68bb      	ldr	r3, [r7, #8]
 80267ce:	3318      	adds	r3, #24
 80267d0:	4618      	mov	r0, r3
 80267d2:	f7fd fc6c 	bl	80240ae <lfs_pair_isnull>
 80267d6:	4603      	mov	r3, r0
 80267d8:	f083 0301 	eor.w	r3, r3, #1
 80267dc:	b2db      	uxtb	r3, r3
 80267de:	2b00      	cmp	r3, #0
 80267e0:	d022      	beq.n	8026828 <lfs_dir_compact+0x1b0>
                lfs_pair_tole32(dir->tail);
 80267e2:	68bb      	ldr	r3, [r7, #8]
 80267e4:	3318      	adds	r3, #24
 80267e6:	4618      	mov	r0, r3
 80267e8:	f7fd fced 	bl	80241c6 <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80267ec:	68bb      	ldr	r3, [r7, #8]
 80267ee:	7ddb      	ldrb	r3, [r3, #23]
 80267f0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80267f4:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80267f6:	4a94      	ldr	r2, [pc, #592]	; (8026a48 <lfs_dir_compact+0x3d0>)
 80267f8:	431a      	orrs	r2, r3
                        dir->tail);
 80267fa:	68bb      	ldr	r3, [r7, #8]
 80267fc:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80267fe:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8026802:	68f8      	ldr	r0, [r7, #12]
 8026804:	f7ff fc20 	bl	8026048 <lfs_dir_commitattr>
 8026808:	65f8      	str	r0, [r7, #92]	; 0x5c
                lfs_pair_fromle32(dir->tail);
 802680a:	68bb      	ldr	r3, [r7, #8]
 802680c:	3318      	adds	r3, #24
 802680e:	4618      	mov	r0, r3
 8026810:	f7fd fcbf 	bl	8024192 <lfs_pair_fromle32>
                if (err) {
 8026814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026816:	2b00      	cmp	r3, #0
 8026818:	d006      	beq.n	8026828 <lfs_dir_compact+0x1b0>
                    if (err == LFS_ERR_CORRUPT) {
 802681a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802681c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026820:	f000 80b0 	beq.w	8026984 <lfs_dir_compact+0x30c>
                        goto relocate;
                    }
                    return err;
 8026824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026826:	e106      	b.n	8026a36 <lfs_dir_compact+0x3be>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 8026828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802682c:	2200      	movs	r2, #0
 802682e:	601a      	str	r2, [r3, #0]
 8026830:	605a      	str	r2, [r3, #4]
 8026832:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026834:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8026838:	f083 0301 	eor.w	r3, r3, #1
 802683c:	b2db      	uxtb	r3, r3
 802683e:	2b00      	cmp	r3, #0
 8026840:	d011      	beq.n	8026866 <lfs_dir_compact+0x1ee>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8026842:	68fb      	ldr	r3, [r7, #12]
 8026844:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026848:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802684c:	4611      	mov	r1, r2
 802684e:	4618      	mov	r0, r3
 8026850:	f7fd fd5f 	bl	8024312 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 8026854:	68fb      	ldr	r3, [r7, #12]
 8026856:	f103 0230 	add.w	r2, r3, #48	; 0x30
 802685a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802685e:	4611      	mov	r1, r2
 8026860:	4618      	mov	r0, r3
 8026862:	f7fd fd56 	bl	8024312 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 8026866:	68fb      	ldr	r3, [r7, #12]
 8026868:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802686c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026870:	4611      	mov	r1, r2
 8026872:	4618      	mov	r0, r3
 8026874:	f7fd fd4d 	bl	8024312 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802687a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 802687e:	f023 0303 	bic.w	r3, r3, #3
 8026882:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026884:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026888:	461a      	mov	r2, r3
 802688a:	68b9      	ldr	r1, [r7, #8]
 802688c:	68f8      	ldr	r0, [r7, #12]
 802688e:	f7ff f9b5 	bl	8025bfc <lfs_dir_getgstate>
 8026892:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 8026894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026896:	2b00      	cmp	r3, #0
 8026898:	d001      	beq.n	802689e <lfs_dir_compact+0x226>
                return err;
 802689a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802689c:	e0cb      	b.n	8026a36 <lfs_dir_compact+0x3be>
            }

            if (!lfs_gstate_iszero(&delta)) {
 802689e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80268a2:	4618      	mov	r0, r3
 80268a4:	f7fd fd5a 	bl	802435c <lfs_gstate_iszero>
 80268a8:	4603      	mov	r3, r0
 80268aa:	f083 0301 	eor.w	r3, r3, #1
 80268ae:	b2db      	uxtb	r3, r3
 80268b0:	2b00      	cmp	r3, #0
 80268b2:	d016      	beq.n	80268e2 <lfs_dir_compact+0x26a>
                lfs_gstate_tole32(&delta);
 80268b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80268b8:	4618      	mov	r0, r3
 80268ba:	f7fd fde1 	bl	8024480 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80268be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80268c2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80268c6:	4a61      	ldr	r2, [pc, #388]	; (8026a4c <lfs_dir_compact+0x3d4>)
 80268c8:	68f8      	ldr	r0, [r7, #12]
 80268ca:	f7ff fbbd 	bl	8026048 <lfs_dir_commitattr>
 80268ce:	65f8      	str	r0, [r7, #92]	; 0x5c
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80268d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80268d2:	2b00      	cmp	r3, #0
 80268d4:	d005      	beq.n	80268e2 <lfs_dir_compact+0x26a>
                    if (err == LFS_ERR_CORRUPT) {
 80268d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80268d8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80268dc:	d054      	beq.n	8026988 <lfs_dir_compact+0x310>
                        goto relocate;
                    }
                    return err;
 80268de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80268e0:	e0a9      	b.n	8026a36 <lfs_dir_compact+0x3be>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80268e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80268e6:	4619      	mov	r1, r3
 80268e8:	68f8      	ldr	r0, [r7, #12]
 80268ea:	f7ff fc2d 	bl	8026148 <lfs_dir_commitcrc>
 80268ee:	65f8      	str	r0, [r7, #92]	; 0x5c
            if (err) {
 80268f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80268f2:	2b00      	cmp	r3, #0
 80268f4:	d005      	beq.n	8026902 <lfs_dir_compact+0x28a>
                if (err == LFS_ERR_CORRUPT) {
 80268f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80268f8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80268fc:	d046      	beq.n	802698c <lfs_dir_compact+0x314>
                    goto relocate;
                }
                return err;
 80268fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8026900:	e099      	b.n	8026a36 <lfs_dir_compact+0x3be>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026902:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026904:	68fa      	ldr	r2, [r7, #12]
 8026906:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026908:	6992      	ldr	r2, [r2, #24]
 802690a:	fbb3 f1f2 	udiv	r1, r3, r2
 802690e:	fb01 f202 	mul.w	r2, r1, r2
 8026912:	1a9b      	subs	r3, r3, r2
 8026914:	2b00      	cmp	r3, #0
 8026916:	d006      	beq.n	8026926 <lfs_dir_compact+0x2ae>
 8026918:	4b4d      	ldr	r3, [pc, #308]	; (8026a50 <lfs_dir_compact+0x3d8>)
 802691a:	4a4e      	ldr	r2, [pc, #312]	; (8026a54 <lfs_dir_compact+0x3dc>)
 802691c:	f44f 61e9 	mov.w	r1, #1864	; 0x748
 8026920:	484d      	ldr	r0, [pc, #308]	; (8026a58 <lfs_dir_compact+0x3e0>)
 8026922:	f005 fef3 	bl	802c70c <__assert_func>
            lfs_pair_swap(dir->pair);
 8026926:	68bb      	ldr	r3, [r7, #8]
 8026928:	4618      	mov	r0, r3
 802692a:	f7fd fbab 	bl	8024084 <lfs_pair_swap>
            dir->count = end - begin;
 802692e:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8026932:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8026936:	1ad3      	subs	r3, r2, r3
 8026938:	b29a      	uxth	r2, r3
 802693a:	68bb      	ldr	r3, [r7, #8]
 802693c:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 802693e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8026940:	68bb      	ldr	r3, [r7, #8]
 8026942:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 8026944:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8026946:	68bb      	ldr	r3, [r7, #8]
 8026948:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 802694a:	68fb      	ldr	r3, [r7, #12]
 802694c:	3348      	adds	r3, #72	; 0x48
 802694e:	2200      	movs	r2, #0
 8026950:	601a      	str	r2, [r3, #0]
 8026952:	605a      	str	r2, [r3, #4]
 8026954:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 8026956:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 802695a:	f083 0301 	eor.w	r3, r3, #1
 802695e:	b2db      	uxtb	r3, r3
 8026960:	2b00      	cmp	r3, #0
 8026962:	d065      	beq.n	8026a30 <lfs_dir_compact+0x3b8>
                lfs->gdisk = lfs->gstate;
 8026964:	68fb      	ldr	r3, [r7, #12]
 8026966:	68fa      	ldr	r2, [r7, #12]
 8026968:	333c      	adds	r3, #60	; 0x3c
 802696a:	3230      	adds	r2, #48	; 0x30
 802696c:	ca07      	ldmia	r2, {r0, r1, r2}
 802696e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8026972:	e05d      	b.n	8026a30 <lfs_dir_compact+0x3b8>
        goto relocate;
 8026974:	bf00      	nop
 8026976:	e00a      	b.n	802698e <lfs_dir_compact+0x316>
                    goto relocate;
 8026978:	bf00      	nop
 802697a:	e008      	b.n	802698e <lfs_dir_compact+0x316>
                    goto relocate;
 802697c:	bf00      	nop
 802697e:	e006      	b.n	802698e <lfs_dir_compact+0x316>
                    goto relocate;
 8026980:	bf00      	nop
 8026982:	e004      	b.n	802698e <lfs_dir_compact+0x316>
                        goto relocate;
 8026984:	bf00      	nop
 8026986:	e002      	b.n	802698e <lfs_dir_compact+0x316>
                        goto relocate;
 8026988:	bf00      	nop
 802698a:	e000      	b.n	802698e <lfs_dir_compact+0x316>
                    goto relocate;
 802698c:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 802698e:	2301      	movs	r3, #1
 8026990:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        lfs_cache_drop(lfs, &lfs->pcache);
 8026994:	68fb      	ldr	r3, [r7, #12]
 8026996:	3310      	adds	r3, #16
 8026998:	4619      	mov	r1, r3
 802699a:	68f8      	ldr	r0, [r7, #12]
 802699c:	f7fd f828 	bl	80239f0 <lfs_cache_drop>
        if (!tired) {
 80269a0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80269a4:	f083 0301 	eor.w	r3, r3, #1
 80269a8:	b2db      	uxtb	r3, r3
 80269aa:	2b00      	cmp	r3, #0
 80269ac:	d009      	beq.n	80269c2 <lfs_dir_compact+0x34a>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 80269ae:	68bb      	ldr	r3, [r7, #8]
 80269b0:	685b      	ldr	r3, [r3, #4]
 80269b2:	4a2a      	ldr	r2, [pc, #168]	; (8026a5c <lfs_dir_compact+0x3e4>)
 80269b4:	9200      	str	r2, [sp, #0]
 80269b6:	f240 725a 	movw	r2, #1882	; 0x75a
 80269ba:	4927      	ldr	r1, [pc, #156]	; (8026a58 <lfs_dir_compact+0x3e0>)
 80269bc:	4828      	ldr	r0, [pc, #160]	; (8026a60 <lfs_dir_compact+0x3e8>)
 80269be:	f006 fedf 	bl	802d780 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80269c2:	68bb      	ldr	r3, [r7, #8]
 80269c4:	2200      	movs	r2, #0
 80269c6:	617a      	str	r2, [r7, #20]
 80269c8:	2201      	movs	r2, #1
 80269ca:	61ba      	str	r2, [r7, #24]
 80269cc:	f107 0214 	add.w	r2, r7, #20
 80269d0:	4611      	mov	r1, r2
 80269d2:	4618      	mov	r0, r3
 80269d4:	f7fd fb86 	bl	80240e4 <lfs_pair_cmp>
 80269d8:	4603      	mov	r3, r0
 80269da:	2b00      	cmp	r3, #0
 80269dc:	d10c      	bne.n	80269f8 <lfs_dir_compact+0x380>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80269de:	68bb      	ldr	r3, [r7, #8]
 80269e0:	685b      	ldr	r3, [r3, #4]
 80269e2:	4a1e      	ldr	r2, [pc, #120]	; (8026a5c <lfs_dir_compact+0x3e4>)
 80269e4:	9200      	str	r2, [sp, #0]
 80269e6:	f240 725f 	movw	r2, #1887	; 0x75f
 80269ea:	491b      	ldr	r1, [pc, #108]	; (8026a58 <lfs_dir_compact+0x3e0>)
 80269ec:	481d      	ldr	r0, [pc, #116]	; (8026a64 <lfs_dir_compact+0x3ec>)
 80269ee:	f006 fec7 	bl	802d780 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80269f2:	f06f 031b 	mvn.w	r3, #27
 80269f6:	e01e      	b.n	8026a36 <lfs_dir_compact+0x3be>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80269f8:	68bb      	ldr	r3, [r7, #8]
 80269fa:	3304      	adds	r3, #4
 80269fc:	4619      	mov	r1, r3
 80269fe:	68f8      	ldr	r0, [r7, #12]
 8026a00:	f7fd fea6 	bl	8024750 <lfs_alloc>
 8026a04:	6638      	str	r0, [r7, #96]	; 0x60
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 8026a06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a08:	2b00      	cmp	r3, #0
 8026a0a:	d00c      	beq.n	8026a26 <lfs_dir_compact+0x3ae>
 8026a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a0e:	f113 0f1c 	cmn.w	r3, #28
 8026a12:	d106      	bne.n	8026a22 <lfs_dir_compact+0x3aa>
 8026a14:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8026a18:	f083 0301 	eor.w	r3, r3, #1
 8026a1c:	b2db      	uxtb	r3, r3
 8026a1e:	2b00      	cmp	r3, #0
 8026a20:	d001      	beq.n	8026a26 <lfs_dir_compact+0x3ae>
            return err;
 8026a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8026a24:	e007      	b.n	8026a36 <lfs_dir_compact+0x3be>
        }

        tired = false;
 8026a26:	2300      	movs	r3, #0
 8026a28:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
        continue;
 8026a2c:	bf00      	nop
    while (true) {
 8026a2e:	e64c      	b.n	80266ca <lfs_dir_compact+0x52>
        break;
 8026a30:	bf00      	nop
    }

    return relocated ? LFS_OK_RELOCATED : 0;
 8026a32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8026a36:	4618      	mov	r0, r3
 8026a38:	3768      	adds	r7, #104	; 0x68
 8026a3a:	46bd      	mov	sp, r7
 8026a3c:	bd80      	pop	{r7, pc}
 8026a3e:	bf00      	nop
 8026a40:	08026601 	.word	0x08026601
 8026a44:	400ffc00 	.word	0x400ffc00
 8026a48:	000ffc08 	.word	0x000ffc08
 8026a4c:	7ffffc0c 	.word	0x7ffffc0c
 8026a50:	0803396c 	.word	0x0803396c
 8026a54:	08034b0c 	.word	0x08034b0c
 8026a58:	08033800 	.word	0x08033800
 8026a5c:	08033914 	.word	0x08033914
 8026a60:	08033994 	.word	0x08033994
 8026a64:	080339b8 	.word	0x080339b8

08026a68 <lfs_dir_splittingcompact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_splittingcompact(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 8026a68:	b590      	push	{r4, r7, lr}
 8026a6a:	b097      	sub	sp, #92	; 0x5c
 8026a6c:	af0a      	add	r7, sp, #40	; 0x28
 8026a6e:	60f8      	str	r0, [r7, #12]
 8026a70:	60b9      	str	r1, [r7, #8]
 8026a72:	607a      	str	r2, [r7, #4]
 8026a74:	603b      	str	r3, [r7, #0]
        // the metadata is guaranteed to fit
        //
        // Note that this isn't a true binary search, we never increase the
        // split size. This may result in poorly distributed metadata but isn't
        // worth the extra code size or performance hit to fix.
        lfs_size_t split = begin;
 8026a76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026a7c:	e058      	b.n	8026b30 <lfs_dir_splittingcompact+0xc8>
            lfs_size_t size = 0;
 8026a7e:	2300      	movs	r3, #0
 8026a80:	61bb      	str	r3, [r7, #24]
            int err = lfs_dir_traverse(lfs,
 8026a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026a84:	b29b      	uxth	r3, r3
 8026a86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026a88:	b292      	uxth	r2, r2
 8026a8a:	4252      	negs	r2, r2
 8026a8c:	b292      	uxth	r2, r2
 8026a8e:	b212      	sxth	r2, r2
 8026a90:	f107 0118 	add.w	r1, r7, #24
 8026a94:	9108      	str	r1, [sp, #32]
 8026a96:	4979      	ldr	r1, [pc, #484]	; (8026c7c <lfs_dir_splittingcompact+0x214>)
 8026a98:	9107      	str	r1, [sp, #28]
 8026a9a:	9206      	str	r2, [sp, #24]
 8026a9c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026aa0:	9205      	str	r2, [sp, #20]
 8026aa2:	9304      	str	r3, [sp, #16]
 8026aa4:	2300      	movs	r3, #0
 8026aa6:	9303      	str	r3, [sp, #12]
 8026aa8:	4b75      	ldr	r3, [pc, #468]	; (8026c80 <lfs_dir_splittingcompact+0x218>)
 8026aaa:	9302      	str	r3, [sp, #8]
 8026aac:	683b      	ldr	r3, [r7, #0]
 8026aae:	9301      	str	r3, [sp, #4]
 8026ab0:	687b      	ldr	r3, [r7, #4]
 8026ab2:	9300      	str	r3, [sp, #0]
 8026ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8026ab8:	2200      	movs	r2, #0
 8026aba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8026abc:	68f8      	ldr	r0, [r7, #12]
 8026abe:	f7fe f933 	bl	8024d28 <lfs_dir_traverse>
 8026ac2:	62b8      	str	r0, [r7, #40]	; 0x28
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    split, end, -split,
                    lfs_dir_commit_size, &size);
            if (err) {
 8026ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026ac6:	2b00      	cmp	r3, #0
 8026ac8:	d001      	beq.n	8026ace <lfs_dir_splittingcompact+0x66>
                return err;
 8026aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8026acc:	e0d1      	b.n	8026c72 <lfs_dir_splittingcompact+0x20a>
            }

            // space is complicated, we need room for tail, crc, gstate,
            // cleanup delete, and we cap at half a block to give room
            // for metadata updates.
            if (end - split < 0xff
 8026ace:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026ad4:	1ad3      	subs	r3, r2, r3
 8026ad6:	2bfe      	cmp	r3, #254	; 0xfe
 8026ad8:	d822      	bhi.n	8026b20 <lfs_dir_splittingcompact+0xb8>
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026ada:	68fb      	ldr	r3, [r7, #12]
 8026adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026ade:	69db      	ldr	r3, [r3, #28]
 8026ae0:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                        lfs_alignup(
                            (lfs->cfg->metadata_max
 8026ae4:	68fb      	ldr	r3, [r7, #12]
 8026ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026aea:	2b00      	cmp	r3, #0
 8026aec:	d004      	beq.n	8026af8 <lfs_dir_splittingcompact+0x90>
                                ? lfs->cfg->metadata_max
 8026aee:	68fb      	ldr	r3, [r7, #12]
 8026af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026af4:	085b      	lsrs	r3, r3, #1
 8026af6:	e003      	b.n	8026b00 <lfs_dir_splittingcompact+0x98>
                                : lfs->cfg->block_size)/2,
 8026af8:	68fb      	ldr	r3, [r7, #12]
 8026afa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026afc:	69db      	ldr	r3, [r3, #28]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026afe:	085b      	lsrs	r3, r3, #1
                            lfs->cfg->prog_size))) {
 8026b00:	68fa      	ldr	r2, [r7, #12]
 8026b02:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026b04:	6992      	ldr	r2, [r2, #24]
                    && size <= lfs_min(lfs->cfg->block_size - 36,
 8026b06:	4611      	mov	r1, r2
 8026b08:	4618      	mov	r0, r3
 8026b0a:	f7fc fee0 	bl	80238ce <lfs_alignup>
 8026b0e:	4603      	mov	r3, r0
 8026b10:	4619      	mov	r1, r3
 8026b12:	4620      	mov	r0, r4
 8026b14:	f7fc feb6 	bl	8023884 <lfs_min>
 8026b18:	4602      	mov	r2, r0
 8026b1a:	69bb      	ldr	r3, [r7, #24]
 8026b1c:	429a      	cmp	r2, r3
 8026b1e:	d20e      	bcs.n	8026b3e <lfs_dir_splittingcompact+0xd6>
                break;
            }

            split = split + ((end - split) / 2);
 8026b20:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b26:	1ad3      	subs	r3, r2, r3
 8026b28:	085b      	lsrs	r3, r3, #1
 8026b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026b2c:	4413      	add	r3, r2
 8026b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (end - split > 1) {
 8026b30:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b36:	1ad3      	subs	r3, r2, r3
 8026b38:	2b01      	cmp	r3, #1
 8026b3a:	d8a0      	bhi.n	8026a7e <lfs_dir_splittingcompact+0x16>
 8026b3c:	e000      	b.n	8026b40 <lfs_dir_splittingcompact+0xd8>
                break;
 8026b3e:	bf00      	nop
        }

        if (split == begin) {
 8026b40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8026b46:	429a      	cmp	r2, r3
 8026b48:	d02d      	beq.n	8026ba6 <lfs_dir_splittingcompact+0x13e>
            // no split needed
            break;
        }

        // split into two metadata pairs and continue
        int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026b4c:	b29b      	uxth	r3, r3
 8026b4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8026b52:	9202      	str	r2, [sp, #8]
 8026b54:	9301      	str	r3, [sp, #4]
 8026b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026b58:	9300      	str	r3, [sp, #0]
 8026b5a:	683b      	ldr	r3, [r7, #0]
 8026b5c:	687a      	ldr	r2, [r7, #4]
 8026b5e:	68b9      	ldr	r1, [r7, #8]
 8026b60:	68f8      	ldr	r0, [r7, #12]
 8026b62:	f7ff fce3 	bl	802652c <lfs_dir_split>
 8026b66:	6278      	str	r0, [r7, #36]	; 0x24
                source, split, end);
        if (err && err != LFS_ERR_NOSPC) {
 8026b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b6a:	2b00      	cmp	r3, #0
 8026b6c:	d005      	beq.n	8026b7a <lfs_dir_splittingcompact+0x112>
 8026b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b70:	f113 0f1c 	cmn.w	r3, #28
 8026b74:	d001      	beq.n	8026b7a <lfs_dir_splittingcompact+0x112>
            return err;
 8026b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b78:	e07b      	b.n	8026c72 <lfs_dir_splittingcompact+0x20a>
        }

        if (err) {
 8026b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8026b7c:	2b00      	cmp	r3, #0
 8026b7e:	d00e      	beq.n	8026b9e <lfs_dir_splittingcompact+0x136>
            // we can't allocate a new block, try to compact with degraded
            // performance
            LFS_WARN("Unable to split {0x%"PRIx32", 0x%"PRIx32"}",
 8026b80:	68bb      	ldr	r3, [r7, #8]
 8026b82:	681a      	ldr	r2, [r3, #0]
 8026b84:	68bb      	ldr	r3, [r7, #8]
 8026b86:	685b      	ldr	r3, [r3, #4]
 8026b88:	493e      	ldr	r1, [pc, #248]	; (8026c84 <lfs_dir_splittingcompact+0x21c>)
 8026b8a:	9101      	str	r1, [sp, #4]
 8026b8c:	9300      	str	r3, [sp, #0]
 8026b8e:	4613      	mov	r3, r2
 8026b90:	f240 72a9 	movw	r2, #1961	; 0x7a9
 8026b94:	493c      	ldr	r1, [pc, #240]	; (8026c88 <lfs_dir_splittingcompact+0x220>)
 8026b96:	483d      	ldr	r0, [pc, #244]	; (8026c8c <lfs_dir_splittingcompact+0x224>)
 8026b98:	f006 fdf2 	bl	802d780 <iprintf>
                    dir->pair[0], dir->pair[1]);
            break;
 8026b9c:	e004      	b.n	8026ba8 <lfs_dir_splittingcompact+0x140>
        } else {
            end = split;
 8026b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8026ba0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
    while (true) {
 8026ba4:	e767      	b.n	8026a76 <lfs_dir_splittingcompact+0xe>
            break;
 8026ba6:	bf00      	nop
        }
    }

    if (lfs_dir_needsrelocation(lfs, dir)
 8026ba8:	68b9      	ldr	r1, [r7, #8]
 8026baa:	68f8      	ldr	r0, [r7, #12]
 8026bac:	f7ff fd3d 	bl	802662a <lfs_dir_needsrelocation>
 8026bb0:	4603      	mov	r3, r0
 8026bb2:	2b00      	cmp	r3, #0
 8026bb4:	d04e      	beq.n	8026c54 <lfs_dir_splittingcompact+0x1ec>
            && lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8026bb6:	68bb      	ldr	r3, [r7, #8]
 8026bb8:	2200      	movs	r2, #0
 8026bba:	613a      	str	r2, [r7, #16]
 8026bbc:	2201      	movs	r2, #1
 8026bbe:	617a      	str	r2, [r7, #20]
 8026bc0:	f107 0210 	add.w	r2, r7, #16
 8026bc4:	4611      	mov	r1, r2
 8026bc6:	4618      	mov	r0, r3
 8026bc8:	f7fd fa8c 	bl	80240e4 <lfs_pair_cmp>
 8026bcc:	4603      	mov	r3, r0
 8026bce:	2b00      	cmp	r3, #0
 8026bd0:	d140      	bne.n	8026c54 <lfs_dir_splittingcompact+0x1ec>
        // oh no! we're writing too much to the superblock,
        // should we expand?
        lfs_ssize_t size = lfs_fs_rawsize(lfs);
 8026bd2:	68f8      	ldr	r0, [r7, #12]
 8026bd4:	f003 fe4c 	bl	802a870 <lfs_fs_rawsize>
 8026bd8:	6238      	str	r0, [r7, #32]
        if (size < 0) {
 8026bda:	6a3b      	ldr	r3, [r7, #32]
 8026bdc:	2b00      	cmp	r3, #0
 8026bde:	da01      	bge.n	8026be4 <lfs_dir_splittingcompact+0x17c>
            return size;
 8026be0:	6a3b      	ldr	r3, [r7, #32]
 8026be2:	e046      	b.n	8026c72 <lfs_dir_splittingcompact+0x20a>
        }

        // do we have extra space? littlefs can't reclaim this space
        // by itself, so expand cautiously
        if ((lfs_size_t)size < lfs->cfg->block_count/2) {
 8026be4:	68fb      	ldr	r3, [r7, #12]
 8026be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026be8:	6a1b      	ldr	r3, [r3, #32]
 8026bea:	085a      	lsrs	r2, r3, #1
 8026bec:	6a3b      	ldr	r3, [r7, #32]
 8026bee:	429a      	cmp	r2, r3
 8026bf0:	d930      	bls.n	8026c54 <lfs_dir_splittingcompact+0x1ec>
            LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 8026bf2:	68bb      	ldr	r3, [r7, #8]
 8026bf4:	689b      	ldr	r3, [r3, #8]
 8026bf6:	4a23      	ldr	r2, [pc, #140]	; (8026c84 <lfs_dir_splittingcompact+0x21c>)
 8026bf8:	9200      	str	r2, [sp, #0]
 8026bfa:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8026bfe:	4922      	ldr	r1, [pc, #136]	; (8026c88 <lfs_dir_splittingcompact+0x220>)
 8026c00:	4823      	ldr	r0, [pc, #140]	; (8026c90 <lfs_dir_splittingcompact+0x228>)
 8026c02:	f006 fdbd 	bl	802d780 <iprintf>
            int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8026c06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026c0a:	9302      	str	r3, [sp, #8]
 8026c0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026c10:	9301      	str	r3, [sp, #4]
 8026c12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026c14:	9300      	str	r3, [sp, #0]
 8026c16:	683b      	ldr	r3, [r7, #0]
 8026c18:	687a      	ldr	r2, [r7, #4]
 8026c1a:	68b9      	ldr	r1, [r7, #8]
 8026c1c:	68f8      	ldr	r0, [r7, #12]
 8026c1e:	f7ff fc85 	bl	802652c <lfs_dir_split>
 8026c22:	61f8      	str	r0, [r7, #28]
                    source, begin, end);
            if (err && err != LFS_ERR_NOSPC) {
 8026c24:	69fb      	ldr	r3, [r7, #28]
 8026c26:	2b00      	cmp	r3, #0
 8026c28:	d005      	beq.n	8026c36 <lfs_dir_splittingcompact+0x1ce>
 8026c2a:	69fb      	ldr	r3, [r7, #28]
 8026c2c:	f113 0f1c 	cmn.w	r3, #28
 8026c30:	d001      	beq.n	8026c36 <lfs_dir_splittingcompact+0x1ce>
                return err;
 8026c32:	69fb      	ldr	r3, [r7, #28]
 8026c34:	e01d      	b.n	8026c72 <lfs_dir_splittingcompact+0x20a>
            }

            if (err) {
 8026c36:	69fb      	ldr	r3, [r7, #28]
 8026c38:	2b00      	cmp	r3, #0
 8026c3a:	d007      	beq.n	8026c4c <lfs_dir_splittingcompact+0x1e4>
                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                LFS_WARN("Unable to expand superblock");
 8026c3c:	4b11      	ldr	r3, [pc, #68]	; (8026c84 <lfs_dir_splittingcompact+0x21c>)
 8026c3e:	f240 72c7 	movw	r2, #1991	; 0x7c7
 8026c42:	4911      	ldr	r1, [pc, #68]	; (8026c88 <lfs_dir_splittingcompact+0x220>)
 8026c44:	4813      	ldr	r0, [pc, #76]	; (8026c94 <lfs_dir_splittingcompact+0x22c>)
 8026c46:	f006 fd9b 	bl	802d780 <iprintf>
 8026c4a:	e003      	b.n	8026c54 <lfs_dir_splittingcompact+0x1ec>
            } else {
                end = begin;
 8026c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026c50:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            }
        }
    }

    return lfs_dir_compact(lfs, dir, attrs, attrcount, source, begin, end);
 8026c54:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8026c58:	9302      	str	r3, [sp, #8]
 8026c5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8026c5e:	9301      	str	r3, [sp, #4]
 8026c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8026c62:	9300      	str	r3, [sp, #0]
 8026c64:	683b      	ldr	r3, [r7, #0]
 8026c66:	687a      	ldr	r2, [r7, #4]
 8026c68:	68b9      	ldr	r1, [r7, #8]
 8026c6a:	68f8      	ldr	r0, [r7, #12]
 8026c6c:	f7ff fd04 	bl	8026678 <lfs_dir_compact>
 8026c70:	4603      	mov	r3, r0
}
 8026c72:	4618      	mov	r0, r3
 8026c74:	3734      	adds	r7, #52	; 0x34
 8026c76:	46bd      	mov	sp, r7
 8026c78:	bd90      	pop	{r4, r7, pc}
 8026c7a:	bf00      	nop
 8026c7c:	080265d5 	.word	0x080265d5
 8026c80:	400ffc00 	.word	0x400ffc00
 8026c84:	08033914 	.word	0x08033914
 8026c88:	08033800 	.word	0x08033800
 8026c8c:	080339f0 	.word	0x080339f0
 8026c90:	08033a20 	.word	0x08033a20
 8026c94:	08033a50 	.word	0x08033a50

08026c98 <lfs_dir_relocatingcommit>:

#ifndef LFS_READONLY
static int lfs_dir_relocatingcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const lfs_block_t pair[2],
        const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *pdir) {
 8026c98:	b5b0      	push	{r4, r5, r7, lr}
 8026c9a:	b0a6      	sub	sp, #152	; 0x98
 8026c9c:	af0a      	add	r7, sp, #40	; 0x28
 8026c9e:	60f8      	str	r0, [r7, #12]
 8026ca0:	60b9      	str	r1, [r7, #8]
 8026ca2:	607a      	str	r2, [r7, #4]
 8026ca4:	603b      	str	r3, [r7, #0]
    int state = 0;
 8026ca6:	2300      	movs	r3, #0
 8026ca8:	66fb      	str	r3, [r7, #108]	; 0x6c

    // calculate changes to the directory
    bool hasdelete = false;
 8026caa:	2300      	movs	r3, #0
 8026cac:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    for (int i = 0; i < attrcount; i++) {
 8026cb0:	2300      	movs	r3, #0
 8026cb2:	667b      	str	r3, [r7, #100]	; 0x64
 8026cb4:	e06d      	b.n	8026d92 <lfs_dir_relocatingcommit+0xfa>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8026cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026cb8:	00db      	lsls	r3, r3, #3
 8026cba:	683a      	ldr	r2, [r7, #0]
 8026cbc:	4413      	add	r3, r2
 8026cbe:	681b      	ldr	r3, [r3, #0]
 8026cc0:	4618      	mov	r0, r3
 8026cc2:	f7fd facb 	bl	802425c <lfs_tag_type3>
 8026cc6:	4603      	mov	r3, r0
 8026cc8:	461a      	mov	r2, r3
 8026cca:	f240 4301 	movw	r3, #1025	; 0x401
 8026cce:	429a      	cmp	r2, r3
 8026cd0:	d106      	bne.n	8026ce0 <lfs_dir_relocatingcommit+0x48>
            dir->count += 1;
 8026cd2:	68bb      	ldr	r3, [r7, #8]
 8026cd4:	8a9b      	ldrh	r3, [r3, #20]
 8026cd6:	3301      	adds	r3, #1
 8026cd8:	b29a      	uxth	r2, r3
 8026cda:	68bb      	ldr	r3, [r7, #8]
 8026cdc:	829a      	strh	r2, [r3, #20]
 8026cde:	e055      	b.n	8026d8c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8026ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026ce2:	00db      	lsls	r3, r3, #3
 8026ce4:	683a      	ldr	r2, [r7, #0]
 8026ce6:	4413      	add	r3, r2
 8026ce8:	681b      	ldr	r3, [r3, #0]
 8026cea:	4618      	mov	r0, r3
 8026cec:	f7fd fab6 	bl	802425c <lfs_tag_type3>
 8026cf0:	4603      	mov	r3, r0
 8026cf2:	461a      	mov	r2, r3
 8026cf4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8026cf8:	429a      	cmp	r2, r3
 8026cfa:	d114      	bne.n	8026d26 <lfs_dir_relocatingcommit+0x8e>
            LFS_ASSERT(dir->count > 0);
 8026cfc:	68bb      	ldr	r3, [r7, #8]
 8026cfe:	8a9b      	ldrh	r3, [r3, #20]
 8026d00:	2b00      	cmp	r3, #0
 8026d02:	d106      	bne.n	8026d12 <lfs_dir_relocatingcommit+0x7a>
 8026d04:	4ba4      	ldr	r3, [pc, #656]	; (8026f98 <lfs_dir_relocatingcommit+0x300>)
 8026d06:	4aa5      	ldr	r2, [pc, #660]	; (8026f9c <lfs_dir_relocatingcommit+0x304>)
 8026d08:	f240 71df 	movw	r1, #2015	; 0x7df
 8026d0c:	48a4      	ldr	r0, [pc, #656]	; (8026fa0 <lfs_dir_relocatingcommit+0x308>)
 8026d0e:	f005 fcfd 	bl	802c70c <__assert_func>
            dir->count -= 1;
 8026d12:	68bb      	ldr	r3, [r7, #8]
 8026d14:	8a9b      	ldrh	r3, [r3, #20]
 8026d16:	3b01      	subs	r3, #1
 8026d18:	b29a      	uxth	r2, r3
 8026d1a:	68bb      	ldr	r3, [r7, #8]
 8026d1c:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 8026d1e:	2301      	movs	r3, #1
 8026d20:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8026d24:	e032      	b.n	8026d8c <lfs_dir_relocatingcommit+0xf4>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8026d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d28:	00db      	lsls	r3, r3, #3
 8026d2a:	683a      	ldr	r2, [r7, #0]
 8026d2c:	4413      	add	r3, r2
 8026d2e:	681b      	ldr	r3, [r3, #0]
 8026d30:	4618      	mov	r0, r3
 8026d32:	f7fd fa83 	bl	802423c <lfs_tag_type1>
 8026d36:	4603      	mov	r3, r0
 8026d38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8026d3c:	d126      	bne.n	8026d8c <lfs_dir_relocatingcommit+0xf4>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8026d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d40:	00db      	lsls	r3, r3, #3
 8026d42:	683a      	ldr	r2, [r7, #0]
 8026d44:	4413      	add	r3, r2
 8026d46:	685b      	ldr	r3, [r3, #4]
 8026d48:	681a      	ldr	r2, [r3, #0]
 8026d4a:	68bb      	ldr	r3, [r7, #8]
 8026d4c:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8026d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d50:	00db      	lsls	r3, r3, #3
 8026d52:	683a      	ldr	r2, [r7, #0]
 8026d54:	4413      	add	r3, r2
 8026d56:	685b      	ldr	r3, [r3, #4]
 8026d58:	685a      	ldr	r2, [r3, #4]
 8026d5a:	68bb      	ldr	r3, [r7, #8]
 8026d5c:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8026d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d60:	00db      	lsls	r3, r3, #3
 8026d62:	683a      	ldr	r2, [r7, #0]
 8026d64:	4413      	add	r3, r2
 8026d66:	681b      	ldr	r3, [r3, #0]
 8026d68:	4618      	mov	r0, r3
 8026d6a:	f7fd fa87 	bl	802427c <lfs_tag_chunk>
 8026d6e:	4603      	mov	r3, r0
 8026d70:	f003 0301 	and.w	r3, r3, #1
 8026d74:	2b00      	cmp	r3, #0
 8026d76:	bf14      	ite	ne
 8026d78:	2301      	movne	r3, #1
 8026d7a:	2300      	moveq	r3, #0
 8026d7c:	b2da      	uxtb	r2, r3
 8026d7e:	68bb      	ldr	r3, [r7, #8]
 8026d80:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8026d82:	68bb      	ldr	r3, [r7, #8]
 8026d84:	3318      	adds	r3, #24
 8026d86:	4618      	mov	r0, r3
 8026d88:	f7fd fa03 	bl	8024192 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8026d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8026d8e:	3301      	adds	r3, #1
 8026d90:	667b      	str	r3, [r7, #100]	; 0x64
 8026d92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8026d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026d98:	429a      	cmp	r2, r3
 8026d9a:	db8c      	blt.n	8026cb6 <lfs_dir_relocatingcommit+0x1e>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8026d9c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8026da0:	2b00      	cmp	r3, #0
 8026da2:	d02b      	beq.n	8026dfc <lfs_dir_relocatingcommit+0x164>
 8026da4:	68bb      	ldr	r3, [r7, #8]
 8026da6:	8a9b      	ldrh	r3, [r3, #20]
 8026da8:	2b00      	cmp	r3, #0
 8026daa:	d127      	bne.n	8026dfc <lfs_dir_relocatingcommit+0x164>
        LFS_ASSERT(pdir);
 8026dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026db0:	2b00      	cmp	r3, #0
 8026db2:	d106      	bne.n	8026dc2 <lfs_dir_relocatingcommit+0x12a>
 8026db4:	4b7b      	ldr	r3, [pc, #492]	; (8026fa4 <lfs_dir_relocatingcommit+0x30c>)
 8026db6:	4a79      	ldr	r2, [pc, #484]	; (8026f9c <lfs_dir_relocatingcommit+0x304>)
 8026db8:	f240 71ec 	movw	r1, #2028	; 0x7ec
 8026dbc:	4878      	ldr	r0, [pc, #480]	; (8026fa0 <lfs_dir_relocatingcommit+0x308>)
 8026dbe:	f005 fca5 	bl	802c70c <__assert_func>
        int err = lfs_fs_pred(lfs, dir->pair, pdir);
 8026dc2:	68bb      	ldr	r3, [r7, #8]
 8026dc4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8026dc8:	4619      	mov	r1, r3
 8026dca:	68f8      	ldr	r0, [r7, #12]
 8026dcc:	f003 f9c2 	bl	802a154 <lfs_fs_pred>
 8026dd0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && err != LFS_ERR_NOENT) {
 8026dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026dd4:	2b00      	cmp	r3, #0
 8026dd6:	d005      	beq.n	8026de4 <lfs_dir_relocatingcommit+0x14c>
 8026dd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026dda:	f113 0f02 	cmn.w	r3, #2
 8026dde:	d001      	beq.n	8026de4 <lfs_dir_relocatingcommit+0x14c>
            return err;
 8026de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026de2:	e204      	b.n	80271ee <lfs_dir_relocatingcommit+0x556>
        }

        if (err != LFS_ERR_NOENT && pdir->split) {
 8026de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8026de6:	f113 0f02 	cmn.w	r3, #2
 8026dea:	d007      	beq.n	8026dfc <lfs_dir_relocatingcommit+0x164>
 8026dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8026df0:	7ddb      	ldrb	r3, [r3, #23]
 8026df2:	2b00      	cmp	r3, #0
 8026df4:	d002      	beq.n	8026dfc <lfs_dir_relocatingcommit+0x164>
            state = LFS_OK_DROPPED;
 8026df6:	2302      	movs	r3, #2
 8026df8:	66fb      	str	r3, [r7, #108]	; 0x6c
            goto fixmlist;
 8026dfa:	e121      	b.n	8027040 <lfs_dir_relocatingcommit+0x3a8>
        }
    }

    if (dir->erased) {
 8026dfc:	68bb      	ldr	r3, [r7, #8]
 8026dfe:	7d9b      	ldrb	r3, [r3, #22]
 8026e00:	2b00      	cmp	r3, #0
 8026e02:	f000 80fb 	beq.w	8026ffc <lfs_dir_relocatingcommit+0x364>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8026e06:	68bb      	ldr	r3, [r7, #8]
 8026e08:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8026e0a:	633b      	str	r3, [r7, #48]	; 0x30
            .off = dir->off,
 8026e0c:	68bb      	ldr	r3, [r7, #8]
 8026e0e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026e10:	637b      	str	r3, [r7, #52]	; 0x34
            .ptag = dir->etag,
 8026e12:	68bb      	ldr	r3, [r7, #8]
 8026e14:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8026e16:	63bb      	str	r3, [r7, #56]	; 0x38
 8026e18:	f04f 33ff 	mov.w	r3, #4294967295
 8026e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
            .crc = 0xffffffff,

            .begin = dir->off,
 8026e1e:	68bb      	ldr	r3, [r7, #8]
 8026e20:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8026e22:	643b      	str	r3, [r7, #64]	; 0x40
            .end = (lfs->cfg->metadata_max ?
 8026e24:	68fb      	ldr	r3, [r7, #12]
 8026e26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 8026e2a:	2b00      	cmp	r3, #0
 8026e2c:	d004      	beq.n	8026e38 <lfs_dir_relocatingcommit+0x1a0>
 8026e2e:	68fb      	ldr	r3, [r7, #12]
 8026e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8026e34:	3b08      	subs	r3, #8
 8026e36:	e003      	b.n	8026e40 <lfs_dir_relocatingcommit+0x1a8>
 8026e38:	68fb      	ldr	r3, [r7, #12]
 8026e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8026e3c:	69db      	ldr	r3, [r3, #28]
 8026e3e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8026e40:	647b      	str	r3, [r7, #68]	; 0x44
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8026e42:	68bb      	ldr	r3, [r7, #8]
 8026e44:	3318      	adds	r3, #24
 8026e46:	4618      	mov	r0, r3
 8026e48:	f7fd f9bd 	bl	80241c6 <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8026e4c:	68bb      	ldr	r3, [r7, #8]
 8026e4e:	68da      	ldr	r2, [r3, #12]
 8026e50:	68bb      	ldr	r3, [r7, #8]
 8026e52:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8026e54:	68fb      	ldr	r3, [r7, #12]
 8026e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8026e58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        int err = lfs_dir_traverse(lfs,
 8026e5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8026e62:	9308      	str	r3, [sp, #32]
 8026e64:	4b50      	ldr	r3, [pc, #320]	; (8026fa8 <lfs_dir_relocatingcommit+0x310>)
 8026e66:	9307      	str	r3, [sp, #28]
 8026e68:	2300      	movs	r3, #0
 8026e6a:	9306      	str	r3, [sp, #24]
 8026e6c:	2300      	movs	r3, #0
 8026e6e:	9305      	str	r3, [sp, #20]
 8026e70:	2300      	movs	r3, #0
 8026e72:	9304      	str	r3, [sp, #16]
 8026e74:	2300      	movs	r3, #0
 8026e76:	9303      	str	r3, [sp, #12]
 8026e78:	2300      	movs	r3, #0
 8026e7a:	9302      	str	r3, [sp, #8]
 8026e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8026e80:	9301      	str	r3, [sp, #4]
 8026e82:	683b      	ldr	r3, [r7, #0]
 8026e84:	9300      	str	r3, [sp, #0]
 8026e86:	460b      	mov	r3, r1
 8026e88:	68b9      	ldr	r1, [r7, #8]
 8026e8a:	68f8      	ldr	r0, [r7, #12]
 8026e8c:	f7fd ff4c 	bl	8024d28 <lfs_dir_traverse>
 8026e90:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8026e92:	68bb      	ldr	r3, [r7, #8]
 8026e94:	3318      	adds	r3, #24
 8026e96:	4618      	mov	r0, r3
 8026e98:	f7fd f97b 	bl	8024192 <lfs_pair_fromle32>
        if (err) {
 8026e9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026e9e:	2b00      	cmp	r3, #0
 8026ea0:	d00b      	beq.n	8026eba <lfs_dir_relocatingcommit+0x222>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026ea4:	f113 0f1c 	cmn.w	r3, #28
 8026ea8:	f000 80aa 	beq.w	8027000 <lfs_dir_relocatingcommit+0x368>
 8026eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026eae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026eb2:	f000 80a5 	beq.w	8027000 <lfs_dir_relocatingcommit+0x368>
                goto compact;
            }
            return err;
 8026eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026eb8:	e199      	b.n	80271ee <lfs_dir_relocatingcommit+0x556>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 8026eba:	f107 031c 	add.w	r3, r7, #28
 8026ebe:	2200      	movs	r2, #0
 8026ec0:	601a      	str	r2, [r3, #0]
 8026ec2:	605a      	str	r2, [r3, #4]
 8026ec4:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 8026ec6:	68fb      	ldr	r3, [r7, #12]
 8026ec8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8026ecc:	f107 031c 	add.w	r3, r7, #28
 8026ed0:	4611      	mov	r1, r2
 8026ed2:	4618      	mov	r0, r3
 8026ed4:	f7fd fa1d 	bl	8024312 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 8026ed8:	68fb      	ldr	r3, [r7, #12]
 8026eda:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8026ede:	f107 031c 	add.w	r3, r7, #28
 8026ee2:	4611      	mov	r1, r2
 8026ee4:	4618      	mov	r0, r3
 8026ee6:	f7fd fa14 	bl	8024312 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8026eea:	68fb      	ldr	r3, [r7, #12]
 8026eec:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8026ef0:	f107 031c 	add.w	r3, r7, #28
 8026ef4:	4611      	mov	r1, r2
 8026ef6:	4618      	mov	r0, r3
 8026ef8:	f7fd fa0b 	bl	8024312 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8026efc:	69fb      	ldr	r3, [r7, #28]
 8026efe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8026f02:	f023 0303 	bic.w	r3, r3, #3
 8026f06:	61fb      	str	r3, [r7, #28]
        if (!lfs_gstate_iszero(&delta)) {
 8026f08:	f107 031c 	add.w	r3, r7, #28
 8026f0c:	4618      	mov	r0, r3
 8026f0e:	f7fd fa25 	bl	802435c <lfs_gstate_iszero>
 8026f12:	4603      	mov	r3, r0
 8026f14:	f083 0301 	eor.w	r3, r3, #1
 8026f18:	b2db      	uxtb	r3, r3
 8026f1a:	2b00      	cmp	r3, #0
 8026f1c:	d027      	beq.n	8026f6e <lfs_dir_relocatingcommit+0x2d6>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8026f1e:	f107 031c 	add.w	r3, r7, #28
 8026f22:	461a      	mov	r2, r3
 8026f24:	68b9      	ldr	r1, [r7, #8]
 8026f26:	68f8      	ldr	r0, [r7, #12]
 8026f28:	f7fe fe68 	bl	8025bfc <lfs_dir_getgstate>
 8026f2c:	6578      	str	r0, [r7, #84]	; 0x54
            if (err) {
 8026f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f30:	2b00      	cmp	r3, #0
 8026f32:	d001      	beq.n	8026f38 <lfs_dir_relocatingcommit+0x2a0>
                return err;
 8026f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f36:	e15a      	b.n	80271ee <lfs_dir_relocatingcommit+0x556>
            }

            lfs_gstate_tole32(&delta);
 8026f38:	f107 031c 	add.w	r3, r7, #28
 8026f3c:	4618      	mov	r0, r3
 8026f3e:	f7fd fa9f 	bl	8024480 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8026f42:	f107 031c 	add.w	r3, r7, #28
 8026f46:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8026f4a:	4a18      	ldr	r2, [pc, #96]	; (8026fac <lfs_dir_relocatingcommit+0x314>)
 8026f4c:	68f8      	ldr	r0, [r7, #12]
 8026f4e:	f7ff f87b 	bl	8026048 <lfs_dir_commitattr>
 8026f52:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8026f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f56:	2b00      	cmp	r3, #0
 8026f58:	d009      	beq.n	8026f6e <lfs_dir_relocatingcommit+0x2d6>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f5c:	f113 0f1c 	cmn.w	r3, #28
 8026f60:	d050      	beq.n	8027004 <lfs_dir_relocatingcommit+0x36c>
 8026f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f64:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026f68:	d04c      	beq.n	8027004 <lfs_dir_relocatingcommit+0x36c>
                    goto compact;
                }
                return err;
 8026f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f6c:	e13f      	b.n	80271ee <lfs_dir_relocatingcommit+0x556>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8026f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8026f72:	4619      	mov	r1, r3
 8026f74:	68f8      	ldr	r0, [r7, #12]
 8026f76:	f7ff f8e7 	bl	8026148 <lfs_dir_commitcrc>
 8026f7a:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 8026f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f7e:	2b00      	cmp	r3, #0
 8026f80:	d016      	beq.n	8026fb0 <lfs_dir_relocatingcommit+0x318>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8026f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f84:	f113 0f1c 	cmn.w	r3, #28
 8026f88:	d03e      	beq.n	8027008 <lfs_dir_relocatingcommit+0x370>
 8026f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f8c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8026f90:	d03a      	beq.n	8027008 <lfs_dir_relocatingcommit+0x370>
                goto compact;
            }
            return err;
 8026f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8026f94:	e12b      	b.n	80271ee <lfs_dir_relocatingcommit+0x556>
 8026f96:	bf00      	nop
 8026f98:	08033a7c 	.word	0x08033a7c
 8026f9c:	08034b1c 	.word	0x08034b1c
 8026fa0:	08033800 	.word	0x08033800
 8026fa4:	08033a8c 	.word	0x08033a8c
 8026fa8:	08026601 	.word	0x08026601
 8026fac:	7ffffc0c 	.word	0x7ffffc0c
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8026fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8026fb2:	68fa      	ldr	r2, [r7, #12]
 8026fb4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8026fb6:	6992      	ldr	r2, [r2, #24]
 8026fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8026fbc:	fb01 f202 	mul.w	r2, r1, r2
 8026fc0:	1a9b      	subs	r3, r3, r2
 8026fc2:	2b00      	cmp	r3, #0
 8026fc4:	d006      	beq.n	8026fd4 <lfs_dir_relocatingcommit+0x33c>
 8026fc6:	4b8c      	ldr	r3, [pc, #560]	; (80271f8 <lfs_dir_relocatingcommit+0x560>)
 8026fc8:	4a8c      	ldr	r2, [pc, #560]	; (80271fc <lfs_dir_relocatingcommit+0x564>)
 8026fca:	f640 0136 	movw	r1, #2102	; 0x836
 8026fce:	488c      	ldr	r0, [pc, #560]	; (8027200 <lfs_dir_relocatingcommit+0x568>)
 8026fd0:	f005 fb9c 	bl	802c70c <__assert_func>
        dir->off = commit.off;
 8026fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8026fd6:	68bb      	ldr	r3, [r7, #8]
 8026fd8:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8026fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8026fdc:	68bb      	ldr	r3, [r7, #8]
 8026fde:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8026fe0:	68fb      	ldr	r3, [r7, #12]
 8026fe2:	68fa      	ldr	r2, [r7, #12]
 8026fe4:	333c      	adds	r3, #60	; 0x3c
 8026fe6:	3230      	adds	r2, #48	; 0x30
 8026fe8:	ca07      	ldmia	r2, {r0, r1, r2}
 8026fea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8026fee:	68fb      	ldr	r3, [r7, #12]
 8026ff0:	3348      	adds	r3, #72	; 0x48
 8026ff2:	2200      	movs	r2, #0
 8026ff4:	601a      	str	r2, [r3, #0]
 8026ff6:	605a      	str	r2, [r3, #4]
 8026ff8:	609a      	str	r2, [r3, #8]
 8026ffa:	e021      	b.n	8027040 <lfs_dir_relocatingcommit+0x3a8>

        goto fixmlist;
    }

compact:
 8026ffc:	bf00      	nop
 8026ffe:	e004      	b.n	802700a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8027000:	bf00      	nop
 8027002:	e002      	b.n	802700a <lfs_dir_relocatingcommit+0x372>
                    goto compact;
 8027004:	bf00      	nop
 8027006:	e000      	b.n	802700a <lfs_dir_relocatingcommit+0x372>
                goto compact;
 8027008:	bf00      	nop
    // fall back to compaction
    lfs_cache_drop(lfs, &lfs->pcache);
 802700a:	68fb      	ldr	r3, [r7, #12]
 802700c:	3310      	adds	r3, #16
 802700e:	4619      	mov	r1, r3
 8027010:	68f8      	ldr	r0, [r7, #12]
 8027012:	f7fc fced 	bl	80239f0 <lfs_cache_drop>

    state = lfs_dir_splittingcompact(lfs, dir, attrs, attrcount,
 8027016:	68bb      	ldr	r3, [r7, #8]
 8027018:	8a9b      	ldrh	r3, [r3, #20]
 802701a:	9302      	str	r3, [sp, #8]
 802701c:	2300      	movs	r3, #0
 802701e:	9301      	str	r3, [sp, #4]
 8027020:	68bb      	ldr	r3, [r7, #8]
 8027022:	9300      	str	r3, [sp, #0]
 8027024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8027028:	683a      	ldr	r2, [r7, #0]
 802702a:	68b9      	ldr	r1, [r7, #8]
 802702c:	68f8      	ldr	r0, [r7, #12]
 802702e:	f7ff fd1b 	bl	8026a68 <lfs_dir_splittingcompact>
 8027032:	66f8      	str	r0, [r7, #108]	; 0x6c
            dir, 0, dir->count);
    if (state < 0) {
 8027034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027036:	2b00      	cmp	r3, #0
 8027038:	da01      	bge.n	802703e <lfs_dir_relocatingcommit+0x3a6>
        return state;
 802703a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802703c:	e0d7      	b.n	80271ee <lfs_dir_relocatingcommit+0x556>
    }

    goto fixmlist;
 802703e:	bf00      	nop
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    lfs_block_t oldpair[2] = {pair[0], pair[1]};
 8027040:	687b      	ldr	r3, [r7, #4]
 8027042:	681b      	ldr	r3, [r3, #0]
 8027044:	64bb      	str	r3, [r7, #72]	; 0x48
 8027046:	687b      	ldr	r3, [r7, #4]
 8027048:	3304      	adds	r3, #4
 802704a:	681b      	ldr	r3, [r3, #0]
 802704c:	64fb      	str	r3, [r7, #76]	; 0x4c
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 802704e:	68fb      	ldr	r3, [r7, #12]
 8027050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027052:	663b      	str	r3, [r7, #96]	; 0x60
 8027054:	e0c6      	b.n	80271e4 <lfs_dir_relocatingcommit+0x54c>
        if (lfs_pair_cmp(d->m.pair, oldpair) == 0) {
 8027056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027058:	3308      	adds	r3, #8
 802705a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 802705e:	4611      	mov	r1, r2
 8027060:	4618      	mov	r0, r3
 8027062:	f7fd f83f 	bl	80240e4 <lfs_pair_cmp>
 8027066:	4603      	mov	r3, r0
 8027068:	2b00      	cmp	r3, #0
 802706a:	f040 80b8 	bne.w	80271de <lfs_dir_relocatingcommit+0x546>
            d->m = *dir;
 802706e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027070:	68ba      	ldr	r2, [r7, #8]
 8027072:	f103 0408 	add.w	r4, r3, #8
 8027076:	4615      	mov	r5, r2
 8027078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802707a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802707c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027080:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->m.pair != pair) {
 8027084:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027086:	3308      	adds	r3, #8
 8027088:	687a      	ldr	r2, [r7, #4]
 802708a:	429a      	cmp	r2, r3
 802708c:	f000 809d 	beq.w	80271ca <lfs_dir_relocatingcommit+0x532>
                for (int i = 0; i < attrcount; i++) {
 8027090:	2300      	movs	r3, #0
 8027092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8027094:	e07b      	b.n	802718e <lfs_dir_relocatingcommit+0x4f6>
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8027096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027098:	00db      	lsls	r3, r3, #3
 802709a:	683a      	ldr	r2, [r7, #0]
 802709c:	4413      	add	r3, r2
 802709e:	681b      	ldr	r3, [r3, #0]
 80270a0:	4618      	mov	r0, r3
 80270a2:	f7fd f8db 	bl	802425c <lfs_tag_type3>
 80270a6:	4603      	mov	r3, r0
 80270a8:	461a      	mov	r2, r3
 80270aa:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80270ae:	429a      	cmp	r2, r3
 80270b0:	d115      	bne.n	80270de <lfs_dir_relocatingcommit+0x446>
                            d->id == lfs_tag_id(attrs[i].tag)) {
 80270b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80270b4:	889c      	ldrh	r4, [r3, #4]
 80270b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80270b8:	00db      	lsls	r3, r3, #3
 80270ba:	683a      	ldr	r2, [r7, #0]
 80270bc:	4413      	add	r3, r2
 80270be:	681b      	ldr	r3, [r3, #0]
 80270c0:	4618      	mov	r0, r3
 80270c2:	f7fd f8f5 	bl	80242b0 <lfs_tag_id>
 80270c6:	4603      	mov	r3, r0
                    if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80270c8:	429c      	cmp	r4, r3
 80270ca:	d108      	bne.n	80270de <lfs_dir_relocatingcommit+0x446>
                        d->m.pair[0] = LFS_BLOCK_NULL;
 80270cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80270ce:	f04f 32ff 	mov.w	r2, #4294967295
 80270d2:	609a      	str	r2, [r3, #8]
                        d->m.pair[1] = LFS_BLOCK_NULL;
 80270d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80270d6:	f04f 32ff 	mov.w	r2, #4294967295
 80270da:	60da      	str	r2, [r3, #12]
 80270dc:	e054      	b.n	8027188 <lfs_dir_relocatingcommit+0x4f0>
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 80270de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80270e0:	00db      	lsls	r3, r3, #3
 80270e2:	683a      	ldr	r2, [r7, #0]
 80270e4:	4413      	add	r3, r2
 80270e6:	681b      	ldr	r3, [r3, #0]
 80270e8:	4618      	mov	r0, r3
 80270ea:	f7fd f8b7 	bl	802425c <lfs_tag_type3>
 80270ee:	4603      	mov	r3, r0
 80270f0:	461a      	mov	r2, r3
 80270f2:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80270f6:	429a      	cmp	r2, r3
 80270f8:	d11c      	bne.n	8027134 <lfs_dir_relocatingcommit+0x49c>
                            d->id > lfs_tag_id(attrs[i].tag)) {
 80270fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80270fc:	889c      	ldrh	r4, [r3, #4]
 80270fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027100:	00db      	lsls	r3, r3, #3
 8027102:	683a      	ldr	r2, [r7, #0]
 8027104:	4413      	add	r3, r2
 8027106:	681b      	ldr	r3, [r3, #0]
 8027108:	4618      	mov	r0, r3
 802710a:	f7fd f8d1 	bl	80242b0 <lfs_tag_id>
 802710e:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8027110:	429c      	cmp	r4, r3
 8027112:	d90f      	bls.n	8027134 <lfs_dir_relocatingcommit+0x49c>
                        d->id -= 1;
 8027114:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027116:	889b      	ldrh	r3, [r3, #4]
 8027118:	3b01      	subs	r3, #1
 802711a:	b29a      	uxth	r2, r3
 802711c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802711e:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8027120:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027122:	799b      	ldrb	r3, [r3, #6]
 8027124:	2b02      	cmp	r3, #2
 8027126:	d12f      	bne.n	8027188 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos -= 1;
 8027128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802712a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802712c:	1e5a      	subs	r2, r3, #1
 802712e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027130:	629a      	str	r2, [r3, #40]	; 0x28
                        if (d->type == LFS_TYPE_DIR) {
 8027132:	e029      	b.n	8027188 <lfs_dir_relocatingcommit+0x4f0>
                        }
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8027134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027136:	00db      	lsls	r3, r3, #3
 8027138:	683a      	ldr	r2, [r7, #0]
 802713a:	4413      	add	r3, r2
 802713c:	681b      	ldr	r3, [r3, #0]
 802713e:	4618      	mov	r0, r3
 8027140:	f7fd f88c 	bl	802425c <lfs_tag_type3>
 8027144:	4603      	mov	r3, r0
 8027146:	461a      	mov	r2, r3
 8027148:	f240 4301 	movw	r3, #1025	; 0x401
 802714c:	429a      	cmp	r2, r3
 802714e:	d11b      	bne.n	8027188 <lfs_dir_relocatingcommit+0x4f0>
                            d->id >= lfs_tag_id(attrs[i].tag)) {
 8027150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027152:	889c      	ldrh	r4, [r3, #4]
 8027154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8027156:	00db      	lsls	r3, r3, #3
 8027158:	683a      	ldr	r2, [r7, #0]
 802715a:	4413      	add	r3, r2
 802715c:	681b      	ldr	r3, [r3, #0]
 802715e:	4618      	mov	r0, r3
 8027160:	f7fd f8a6 	bl	80242b0 <lfs_tag_id>
 8027164:	4603      	mov	r3, r0
                    } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8027166:	429c      	cmp	r4, r3
 8027168:	d30e      	bcc.n	8027188 <lfs_dir_relocatingcommit+0x4f0>
                        d->id += 1;
 802716a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802716c:	889b      	ldrh	r3, [r3, #4]
 802716e:	3301      	adds	r3, #1
 8027170:	b29a      	uxth	r2, r3
 8027172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027174:	809a      	strh	r2, [r3, #4]
                        if (d->type == LFS_TYPE_DIR) {
 8027176:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027178:	799b      	ldrb	r3, [r3, #6]
 802717a:	2b02      	cmp	r3, #2
 802717c:	d104      	bne.n	8027188 <lfs_dir_relocatingcommit+0x4f0>
                            ((lfs_dir_t*)d)->pos += 1;
 802717e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027182:	1c5a      	adds	r2, r3, #1
 8027184:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8027186:	629a      	str	r2, [r3, #40]	; 0x28
                for (int i = 0; i < attrcount; i++) {
 8027188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802718a:	3301      	adds	r3, #1
 802718c:	65fb      	str	r3, [r7, #92]	; 0x5c
 802718e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8027190:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8027194:	429a      	cmp	r2, r3
 8027196:	f6ff af7e 	blt.w	8027096 <lfs_dir_relocatingcommit+0x3fe>
                        }
                    }
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 802719a:	e016      	b.n	80271ca <lfs_dir_relocatingcommit+0x532>
                // we split and id is on tail now
                d->id -= d->m.count;
 802719c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 802719e:	889a      	ldrh	r2, [r3, #4]
 80271a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271a2:	8b9b      	ldrh	r3, [r3, #28]
 80271a4:	1ad3      	subs	r3, r2, r3
 80271a6:	b29a      	uxth	r2, r3
 80271a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271aa:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 80271ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271ae:	f103 0108 	add.w	r1, r3, #8
 80271b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271b4:	3320      	adds	r3, #32
 80271b6:	461a      	mov	r2, r3
 80271b8:	68f8      	ldr	r0, [r7, #12]
 80271ba:	f7fe fd03 	bl	8025bc4 <lfs_dir_fetch>
 80271be:	6538      	str	r0, [r7, #80]	; 0x50
                if (err) {
 80271c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80271c2:	2b00      	cmp	r3, #0
 80271c4:	d001      	beq.n	80271ca <lfs_dir_relocatingcommit+0x532>
                    return err;
 80271c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80271c8:	e011      	b.n	80271ee <lfs_dir_relocatingcommit+0x556>
            while (d->id >= d->m.count && d->m.split) {
 80271ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271cc:	889a      	ldrh	r2, [r3, #4]
 80271ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271d0:	8b9b      	ldrh	r3, [r3, #28]
 80271d2:	429a      	cmp	r2, r3
 80271d4:	d303      	bcc.n	80271de <lfs_dir_relocatingcommit+0x546>
 80271d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271d8:	7fdb      	ldrb	r3, [r3, #31]
 80271da:	2b00      	cmp	r3, #0
 80271dc:	d1de      	bne.n	802719c <lfs_dir_relocatingcommit+0x504>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80271de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271e0:	681b      	ldr	r3, [r3, #0]
 80271e2:	663b      	str	r3, [r7, #96]	; 0x60
 80271e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80271e6:	2b00      	cmp	r3, #0
 80271e8:	f47f af35 	bne.w	8027056 <lfs_dir_relocatingcommit+0x3be>
                }
            }
        }
    }

    return state;
 80271ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 80271ee:	4618      	mov	r0, r3
 80271f0:	3770      	adds	r7, #112	; 0x70
 80271f2:	46bd      	mov	sp, r7
 80271f4:	bdb0      	pop	{r4, r5, r7, pc}
 80271f6:	bf00      	nop
 80271f8:	0803396c 	.word	0x0803396c
 80271fc:	08034b1c 	.word	0x08034b1c
 8027200:	08033800 	.word	0x08033800

08027204 <lfs_dir_orphaningcommit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_orphaningcommit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 8027204:	b5b0      	push	{r4, r5, r7, lr}
 8027206:	b0bc      	sub	sp, #240	; 0xf0
 8027208:	af04      	add	r7, sp, #16
 802720a:	60f8      	str	r0, [r7, #12]
 802720c:	60b9      	str	r1, [r7, #8]
 802720e:	607a      	str	r2, [r7, #4]
 8027210:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8027212:	68fb      	ldr	r3, [r7, #12]
 8027214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027216:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 802721a:	e045      	b.n	80272a8 <lfs_dir_orphaningcommit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 802721c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027220:	3308      	adds	r3, #8
 8027222:	68ba      	ldr	r2, [r7, #8]
 8027224:	429a      	cmp	r2, r3
 8027226:	d03a      	beq.n	802729e <lfs_dir_orphaningcommit+0x9a>
 8027228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802722c:	3308      	adds	r3, #8
 802722e:	68ba      	ldr	r2, [r7, #8]
 8027230:	4611      	mov	r1, r2
 8027232:	4618      	mov	r0, r3
 8027234:	f7fc ff56 	bl	80240e4 <lfs_pair_cmp>
 8027238:	4603      	mov	r3, r0
 802723a:	2b00      	cmp	r3, #0
 802723c:	d12f      	bne.n	802729e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 802723e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027242:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8027244:	2b01      	cmp	r3, #1
 8027246:	d12a      	bne.n	802729e <lfs_dir_orphaningcommit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8027248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802724c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802724e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8027252:	2b00      	cmp	r3, #0
 8027254:	d023      	beq.n	802729e <lfs_dir_orphaningcommit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 8027256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802725a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 802725c:	68fb      	ldr	r3, [r7, #12]
 802725e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 8027262:	429a      	cmp	r2, r3
 8027264:	d91b      	bls.n	802729e <lfs_dir_orphaningcommit+0x9a>
            int err = lfs_file_outline(lfs, f);
 8027266:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 802726a:	68f8      	ldr	r0, [r7, #12]
 802726c:	f001 fa26 	bl	80286bc <lfs_file_outline>
 8027270:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8027274:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8027278:	2b00      	cmp	r3, #0
 802727a:	d002      	beq.n	8027282 <lfs_dir_orphaningcommit+0x7e>
                return err;
 802727c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8027280:	e2ad      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
            }

            err = lfs_file_flush(lfs, f);
 8027282:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8027286:	68f8      	ldr	r0, [r7, #12]
 8027288:	f001 fa3a 	bl	8028700 <lfs_file_flush>
 802728c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
            if (err) {
 8027290:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8027294:	2b00      	cmp	r3, #0
 8027296:	d002      	beq.n	802729e <lfs_dir_orphaningcommit+0x9a>
                return err;
 8027298:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 802729c:	e29f      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802729e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80272a2:	681b      	ldr	r3, [r3, #0]
 80272a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80272a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80272ac:	2b00      	cmp	r3, #0
 80272ae:	d1b5      	bne.n	802721c <lfs_dir_orphaningcommit+0x18>
            }
        }
    }

    lfs_block_t lpair[2] = {dir->pair[0], dir->pair[1]};
 80272b0:	68bb      	ldr	r3, [r7, #8]
 80272b2:	681b      	ldr	r3, [r3, #0]
 80272b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80272b8:	68bb      	ldr	r3, [r7, #8]
 80272ba:	685b      	ldr	r3, [r3, #4]
 80272bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    lfs_mdir_t ldir = *dir;
 80272c0:	68bb      	ldr	r3, [r7, #8]
 80272c2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80272c6:	461d      	mov	r5, r3
 80272c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80272ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80272cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80272d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    lfs_mdir_t pdir;
    int state = lfs_dir_relocatingcommit(lfs, &ldir, dir->pair,
 80272d4:	68ba      	ldr	r2, [r7, #8]
 80272d6:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80272da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80272de:	9301      	str	r3, [sp, #4]
 80272e0:	683b      	ldr	r3, [r7, #0]
 80272e2:	9300      	str	r3, [sp, #0]
 80272e4:	687b      	ldr	r3, [r7, #4]
 80272e6:	68f8      	ldr	r0, [r7, #12]
 80272e8:	f7ff fcd6 	bl	8026c98 <lfs_dir_relocatingcommit>
 80272ec:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
            attrs, attrcount, &pdir);
    if (state < 0) {
 80272f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80272f4:	2b00      	cmp	r3, #0
 80272f6:	da02      	bge.n	80272fe <lfs_dir_orphaningcommit+0xfa>
        return state;
 80272f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80272fc:	e26f      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
    }

    // update if we're not in mlist, note we may have already been
    // updated if we are in mlist
    if (lfs_pair_cmp(dir->pair, lpair) == 0) {
 80272fe:	68bb      	ldr	r3, [r7, #8]
 8027300:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027304:	4611      	mov	r1, r2
 8027306:	4618      	mov	r0, r3
 8027308:	f7fc feec 	bl	80240e4 <lfs_pair_cmp>
 802730c:	4603      	mov	r3, r0
 802730e:	2b00      	cmp	r3, #0
 8027310:	d109      	bne.n	8027326 <lfs_dir_orphaningcommit+0x122>
        *dir = ldir;
 8027312:	68bb      	ldr	r3, [r7, #8]
 8027314:	461d      	mov	r5, r3
 8027316:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 802731a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 802731c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802731e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8027322:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    // commit was successful, but may require other changes in the
    // filesystem, these would normally be tail recursive, but we have
    // flattened them here avoid unbounded stack usage

    // need to drop?
    if (state == LFS_OK_DROPPED) {
 8027326:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 802732a:	2b02      	cmp	r3, #2
 802732c:	d14a      	bne.n	80273c4 <lfs_dir_orphaningcommit+0x1c0>
        // steal state
        int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 802732e:	68fb      	ldr	r3, [r7, #12]
 8027330:	3348      	adds	r3, #72	; 0x48
 8027332:	461a      	mov	r2, r3
 8027334:	68b9      	ldr	r1, [r7, #8]
 8027336:	68f8      	ldr	r0, [r7, #12]
 8027338:	f7fe fc60 	bl	8025bfc <lfs_dir_getgstate>
 802733c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
        if (err) {
 8027340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8027344:	2b00      	cmp	r3, #0
 8027346:	d002      	beq.n	802734e <lfs_dir_orphaningcommit+0x14a>
            return err;
 8027348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 802734c:	e247      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
        }

        // steal tail, note that this can't create a recursive drop
        lpair[0] = pdir.pair[0];
 802734e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        lpair[1] = pdir.pair[1];
 8027354:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
        lfs_pair_tole32(dir->tail);
 802735a:	68bb      	ldr	r3, [r7, #8]
 802735c:	3318      	adds	r3, #24
 802735e:	4618      	mov	r0, r3
 8027360:	f7fc ff31 	bl	80241c6 <lfs_pair_tole32>
        state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027364:	68bb      	ldr	r3, [r7, #8]
 8027366:	7ddb      	ldrb	r3, [r3, #23]
 8027368:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802736c:	051a      	lsls	r2, r3, #20
 802736e:	4bc2      	ldr	r3, [pc, #776]	; (8027678 <lfs_dir_orphaningcommit+0x474>)
 8027370:	4313      	orrs	r3, r2
 8027372:	667b      	str	r3, [r7, #100]	; 0x64
 8027374:	68bb      	ldr	r3, [r7, #8]
 8027376:	3318      	adds	r3, #24
 8027378:	66bb      	str	r3, [r7, #104]	; 0x68
 802737a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 802737e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027382:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027386:	2000      	movs	r0, #0
 8027388:	9001      	str	r0, [sp, #4]
 802738a:	2001      	movs	r0, #1
 802738c:	9000      	str	r0, [sp, #0]
 802738e:	68f8      	ldr	r0, [r7, #12]
 8027390:	f7ff fc82 	bl	8026c98 <lfs_dir_relocatingcommit>
 8027394:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                    {LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
                        dir->tail}),
                NULL);
        lfs_pair_fromle32(dir->tail);
 8027398:	68bb      	ldr	r3, [r7, #8]
 802739a:	3318      	adds	r3, #24
 802739c:	4618      	mov	r0, r3
 802739e:	f7fc fef8 	bl	8024192 <lfs_pair_fromle32>
        if (state < 0) {
 80273a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273a6:	2b00      	cmp	r3, #0
 80273a8:	da02      	bge.n	80273b0 <lfs_dir_orphaningcommit+0x1ac>
            return state;
 80273aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80273ae:	e216      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
        }

        ldir = pdir;
 80273b0:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80273b4:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80273b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80273ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80273bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80273c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    }

    // need to relocate?
    bool orphans = false;
 80273c4:	2300      	movs	r3, #0
 80273c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    while (state == LFS_OK_RELOCATED) {
 80273ca:	e1fc      	b.n	80277c6 <lfs_dir_orphaningcommit+0x5c2>
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 80273cc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80273d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80273d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80273d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80273dc:	4ca7      	ldr	r4, [pc, #668]	; (802767c <lfs_dir_orphaningcommit+0x478>)
 80273de:	9403      	str	r4, [sp, #12]
 80273e0:	9102      	str	r1, [sp, #8]
 80273e2:	9201      	str	r2, [sp, #4]
 80273e4:	9300      	str	r3, [sp, #0]
 80273e6:	4603      	mov	r3, r0
 80273e8:	f44f 620c 	mov.w	r2, #2240	; 0x8c0
 80273ec:	49a4      	ldr	r1, [pc, #656]	; (8027680 <lfs_dir_orphaningcommit+0x47c>)
 80273ee:	48a5      	ldr	r0, [pc, #660]	; (8027684 <lfs_dir_orphaningcommit+0x480>)
 80273f0:	f006 f9c6 	bl	802d780 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                lpair[0], lpair[1], ldir.pair[0], ldir.pair[1]);
        state = 0;
 80273f4:	2300      	movs	r3, #0
 80273f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        // update internal root
        if (lfs_pair_cmp(lpair, lfs->root) == 0) {
 80273fa:	68fb      	ldr	r3, [r7, #12]
 80273fc:	f103 0220 	add.w	r2, r3, #32
 8027400:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027404:	4611      	mov	r1, r2
 8027406:	4618      	mov	r0, r3
 8027408:	f7fc fe6c 	bl	80240e4 <lfs_pair_cmp>
 802740c:	4603      	mov	r3, r0
 802740e:	2b00      	cmp	r3, #0
 8027410:	d107      	bne.n	8027422 <lfs_dir_orphaningcommit+0x21e>
            lfs->root[0] = ldir.pair[0];
 8027412:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027416:	68fb      	ldr	r3, [r7, #12]
 8027418:	621a      	str	r2, [r3, #32]
            lfs->root[1] = ldir.pair[1];
 802741a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802741e:	68fb      	ldr	r3, [r7, #12]
 8027420:	625a      	str	r2, [r3, #36]	; 0x24
        }

        // update internally tracked dirs
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027422:	68fb      	ldr	r3, [r7, #12]
 8027424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027426:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802742a:	e037      	b.n	802749c <lfs_dir_orphaningcommit+0x298>
            if (lfs_pair_cmp(lpair, d->m.pair) == 0) {
 802742c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027430:	f103 0208 	add.w	r2, r3, #8
 8027434:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027438:	4611      	mov	r1, r2
 802743a:	4618      	mov	r0, r3
 802743c:	f7fc fe52 	bl	80240e4 <lfs_pair_cmp>
 8027440:	4603      	mov	r3, r0
 8027442:	2b00      	cmp	r3, #0
 8027444:	d109      	bne.n	802745a <lfs_dir_orphaningcommit+0x256>
                d->m.pair[0] = ldir.pair[0];
 8027446:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802744a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802744e:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = ldir.pair[1];
 8027450:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8027454:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027458:	60da      	str	r2, [r3, #12]
            }

            if (d->type == LFS_TYPE_DIR &&
 802745a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 802745e:	799b      	ldrb	r3, [r3, #6]
 8027460:	2b02      	cmp	r3, #2
 8027462:	d116      	bne.n	8027492 <lfs_dir_orphaningcommit+0x28e>
                    lfs_pair_cmp(lpair, ((lfs_dir_t*)d)->head) == 0) {
 8027464:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027468:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 802746c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027470:	4611      	mov	r1, r2
 8027472:	4618      	mov	r0, r3
 8027474:	f7fc fe36 	bl	80240e4 <lfs_pair_cmp>
 8027478:	4603      	mov	r3, r0
            if (d->type == LFS_TYPE_DIR &&
 802747a:	2b00      	cmp	r3, #0
 802747c:	d109      	bne.n	8027492 <lfs_dir_orphaningcommit+0x28e>
                ((lfs_dir_t*)d)->head[0] = ldir.pair[0];
 802747e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8027482:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027486:	62da      	str	r2, [r3, #44]	; 0x2c
                ((lfs_dir_t*)d)->head[1] = ldir.pair[1];
 8027488:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 802748c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027490:	631a      	str	r2, [r3, #48]	; 0x30
        for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8027492:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8027496:	681b      	ldr	r3, [r3, #0]
 8027498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 802749c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80274a0:	2b00      	cmp	r3, #0
 80274a2:	d1c3      	bne.n	802742c <lfs_dir_orphaningcommit+0x228>
            }
        }

        // find parent
        lfs_stag_t tag = lfs_fs_parent(lfs, lpair, &pdir);
 80274a4:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80274a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80274ac:	4619      	mov	r1, r3
 80274ae:	68f8      	ldr	r0, [r7, #12]
 80274b0:	f002 fed8 	bl	802a264 <lfs_fs_parent>
 80274b4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
        if (tag < 0 && tag != LFS_ERR_NOENT) {
 80274b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80274bc:	2b00      	cmp	r3, #0
 80274be:	da07      	bge.n	80274d0 <lfs_dir_orphaningcommit+0x2cc>
 80274c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80274c4:	f113 0f02 	cmn.w	r3, #2
 80274c8:	d002      	beq.n	80274d0 <lfs_dir_orphaningcommit+0x2cc>
            return tag;
 80274ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80274ce:	e186      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
        }

        bool hasparent = (tag != LFS_ERR_NOENT);
 80274d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80274d4:	f113 0f02 	cmn.w	r3, #2
 80274d8:	bf14      	ite	ne
 80274da:	2301      	movne	r3, #1
 80274dc:	2300      	moveq	r3, #0
 80274de:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
        if (tag != LFS_ERR_NOENT) {
 80274e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80274e6:	f113 0f02 	cmn.w	r3, #2
 80274ea:	f000 809e 	beq.w	802762a <lfs_dir_orphaningcommit+0x426>
            // note that if we have a parent, we must have a pred, so this will
            // always create an orphan
            int err = lfs_fs_preporphans(lfs, +1);
 80274ee:	2101      	movs	r1, #1
 80274f0:	68f8      	ldr	r0, [r7, #12]
 80274f2:	f002 ff0f 	bl	802a314 <lfs_fs_preporphans>
 80274f6:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
            if (err) {
 80274fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80274fe:	2b00      	cmp	r3, #0
 8027500:	d002      	beq.n	8027508 <lfs_dir_orphaningcommit+0x304>
                return err;
 8027502:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8027506:	e16a      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
            }

            // fix pending move in this pair? this looks like an optimization but
            // is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 8027508:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802750c:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 8027510:	68fb      	ldr	r3, [r7, #12]
 8027512:	3330      	adds	r3, #48	; 0x30
 8027514:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8027518:	4611      	mov	r1, r2
 802751a:	4618      	mov	r0, r3
 802751c:	f7fc ff70 	bl	8024400 <lfs_gstate_hasmovehere>
 8027520:	4603      	mov	r3, r0
 8027522:	2b00      	cmp	r3, #0
 8027524:	d02d      	beq.n	8027582 <lfs_dir_orphaningcommit+0x37e>
                moveid = lfs_tag_id(lfs->gstate.tag);
 8027526:	68fb      	ldr	r3, [r7, #12]
 8027528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802752a:	4618      	mov	r0, r3
 802752c:	f7fc fec0 	bl	80242b0 <lfs_tag_id>
 8027530:	4603      	mov	r3, r0
 8027532:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
                LFS_DEBUG("Fixing move while relocating "
 8027536:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027538:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802753a:	f8b7 20ca 	ldrh.w	r2, [r7, #202]	; 0xca
 802753e:	484f      	ldr	r0, [pc, #316]	; (802767c <lfs_dir_orphaningcommit+0x478>)
 8027540:	9002      	str	r0, [sp, #8]
 8027542:	9201      	str	r2, [sp, #4]
 8027544:	9300      	str	r3, [sp, #0]
 8027546:	460b      	mov	r3, r1
 8027548:	f640 02ed 	movw	r2, #2285	; 0x8ed
 802754c:	494c      	ldr	r1, [pc, #304]	; (8027680 <lfs_dir_orphaningcommit+0x47c>)
 802754e:	484e      	ldr	r0, [pc, #312]	; (8027688 <lfs_dir_orphaningcommit+0x484>)
 8027550:	f006 f916 	bl	802d780 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027554:	2200      	movs	r2, #0
 8027556:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802755a:	68f8      	ldr	r0, [r7, #12]
 802755c:	f002 ff14 	bl	802a388 <lfs_fs_prepmove>
                if (moveid < lfs_tag_id(tag)) {
 8027560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8027564:	4618      	mov	r0, r3
 8027566:	f7fc fea3 	bl	80242b0 <lfs_tag_id>
 802756a:	4603      	mov	r3, r0
 802756c:	461a      	mov	r2, r3
 802756e:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027572:	4293      	cmp	r3, r2
 8027574:	d205      	bcs.n	8027582 <lfs_dir_orphaningcommit+0x37e>
                    tag -= LFS_MKTAG(0, 1, 0);
 8027576:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 802757a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 802757e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                }
            }

            lfs_block_t ppair[2] = {pdir.pair[0], pdir.pair[1]};
 8027582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8027584:	657b      	str	r3, [r7, #84]	; 0x54
 8027586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027588:	65bb      	str	r3, [r7, #88]	; 0x58
            lfs_pair_tole32(ldir.pair);
 802758a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802758e:	4618      	mov	r0, r3
 8027590:	f7fc fe19 	bl	80241c6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, ppair, LFS_MKATTRS(
 8027594:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8027598:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802759c:	4293      	cmp	r3, r2
 802759e:	d007      	beq.n	80275b0 <lfs_dir_orphaningcommit+0x3ac>
 80275a0:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 80275a4:	029b      	lsls	r3, r3, #10
 80275a6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80275aa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80275ae:	e000      	b.n	80275b2 <lfs_dir_orphaningcommit+0x3ae>
 80275b0:	2300      	movs	r3, #0
 80275b2:	647b      	str	r3, [r7, #68]	; 0x44
 80275b4:	2300      	movs	r3, #0
 80275b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80275b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80275bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80275be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275c2:	653b      	str	r3, [r7, #80]	; 0x50
 80275c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80275c8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80275cc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80275d0:	2000      	movs	r0, #0
 80275d2:	9001      	str	r0, [sp, #4]
 80275d4:	2002      	movs	r0, #2
 80275d6:	9000      	str	r0, [sp, #0]
 80275d8:	68f8      	ldr	r0, [r7, #12]
 80275da:	f7ff fb5d 	bl	8026c98 <lfs_dir_relocatingcommit>
 80275de:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {tag, ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 80275e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80275e6:	4618      	mov	r0, r3
 80275e8:	f7fc fdd3 	bl	8024192 <lfs_pair_fromle32>
            if (state < 0) {
 80275ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80275f0:	2b00      	cmp	r3, #0
 80275f2:	da02      	bge.n	80275fa <lfs_dir_orphaningcommit+0x3f6>
                return state;
 80275f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80275f8:	e0f1      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
            }

            if (state == LFS_OK_RELOCATED) {
 80275fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80275fe:	2b01      	cmp	r3, #1
 8027600:	d113      	bne.n	802762a <lfs_dir_orphaningcommit+0x426>
                lpair[0] = ppair[0];
 8027602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8027604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                lpair[1] = ppair[1];
 8027608:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802760a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
                ldir = pdir;
 802760e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8027612:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 8027616:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8027618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802761a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802761e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                orphans = true;
 8027622:	2301      	movs	r3, #1
 8027624:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8027628:	e0cd      	b.n	80277c6 <lfs_dir_orphaningcommit+0x5c2>
                continue;
            }
        }

        // find pred
        int err = lfs_fs_pred(lfs, lpair, &pdir);
 802762a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 802762e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8027632:	4619      	mov	r1, r3
 8027634:	68f8      	ldr	r0, [r7, #12]
 8027636:	f002 fd8d 	bl	802a154 <lfs_fs_pred>
 802763a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
        if (err && err != LFS_ERR_NOENT) {
 802763e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027642:	2b00      	cmp	r3, #0
 8027644:	d007      	beq.n	8027656 <lfs_dir_orphaningcommit+0x452>
 8027646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 802764a:	f113 0f02 	cmn.w	r3, #2
 802764e:	d002      	beq.n	8027656 <lfs_dir_orphaningcommit+0x452>
            return err;
 8027650:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027654:	e0c3      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
        }
        LFS_ASSERT(!(hasparent && err == LFS_ERR_NOENT));
 8027656:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 802765a:	2b00      	cmp	r3, #0
 802765c:	d01a      	beq.n	8027694 <lfs_dir_orphaningcommit+0x490>
 802765e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027662:	f113 0f02 	cmn.w	r3, #2
 8027666:	d115      	bne.n	8027694 <lfs_dir_orphaningcommit+0x490>
 8027668:	4b08      	ldr	r3, [pc, #32]	; (802768c <lfs_dir_orphaningcommit+0x488>)
 802766a:	4a09      	ldr	r2, [pc, #36]	; (8027690 <lfs_dir_orphaningcommit+0x48c>)
 802766c:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8027670:	4803      	ldr	r0, [pc, #12]	; (8027680 <lfs_dir_orphaningcommit+0x47c>)
 8027672:	f005 f84b 	bl	802c70c <__assert_func>
 8027676:	bf00      	nop
 8027678:	000ffc08 	.word	0x000ffc08
 802767c:	08033914 	.word	0x08033914
 8027680:	08033800 	.word	0x08033800
 8027684:	08033a94 	.word	0x08033a94
 8027688:	08033ad0 	.word	0x08033ad0
 802768c:	08033b14 	.word	0x08033b14
 8027690:	08034b38 	.word	0x08034b38

        // if we can't find dir, it must be new
        if (err != LFS_ERR_NOENT) {
 8027694:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8027698:	f113 0f02 	cmn.w	r3, #2
 802769c:	f000 8093 	beq.w	80277c6 <lfs_dir_orphaningcommit+0x5c2>
            if (lfs_gstate_hasorphans(&lfs->gstate)) {
 80276a0:	68fb      	ldr	r3, [r7, #12]
 80276a2:	3330      	adds	r3, #48	; 0x30
 80276a4:	4618      	mov	r0, r3
 80276a6:	f7fc fe76 	bl	8024396 <lfs_gstate_hasorphans>
 80276aa:	4603      	mov	r3, r0
 80276ac:	2b00      	cmp	r3, #0
 80276ae:	d011      	beq.n	80276d4 <lfs_dir_orphaningcommit+0x4d0>
                // next step, clean up orphans
                err = lfs_fs_preporphans(lfs, -hasparent);
 80276b0:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80276b4:	425b      	negs	r3, r3
 80276b6:	b2db      	uxtb	r3, r3
 80276b8:	b25b      	sxtb	r3, r3
 80276ba:	4619      	mov	r1, r3
 80276bc:	68f8      	ldr	r0, [r7, #12]
 80276be:	f002 fe29 	bl	802a314 <lfs_fs_preporphans>
 80276c2:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
                if (err) {
 80276c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80276ca:	2b00      	cmp	r3, #0
 80276cc:	d002      	beq.n	80276d4 <lfs_dir_orphaningcommit+0x4d0>
                    return err;
 80276ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80276d2:	e084      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
                }
            }

            // fix pending move in this pair? this looks like an optimization
            // but is in fact _required_ since relocating may outdate the move.
            uint16_t moveid = 0x3ff;
 80276d4:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80276d8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 80276dc:	68fb      	ldr	r3, [r7, #12]
 80276de:	3330      	adds	r3, #48	; 0x30
 80276e0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80276e4:	4611      	mov	r1, r2
 80276e6:	4618      	mov	r0, r3
 80276e8:	f7fc fe8a 	bl	8024400 <lfs_gstate_hasmovehere>
 80276ec:	4603      	mov	r3, r0
 80276ee:	2b00      	cmp	r3, #0
 80276f0:	d01c      	beq.n	802772c <lfs_dir_orphaningcommit+0x528>
                moveid = lfs_tag_id(lfs->gstate.tag);
 80276f2:	68fb      	ldr	r3, [r7, #12]
 80276f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80276f6:	4618      	mov	r0, r3
 80276f8:	f7fc fdda 	bl	80242b0 <lfs_tag_id>
 80276fc:	4603      	mov	r3, r0
 80276fe:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
                LFS_DEBUG("Fixing move while relocating "
 8027702:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8027704:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027706:	f8b7 20c8 	ldrh.w	r2, [r7, #200]	; 0xc8
 802770a:	4837      	ldr	r0, [pc, #220]	; (80277e8 <lfs_dir_orphaningcommit+0x5e4>)
 802770c:	9002      	str	r0, [sp, #8]
 802770e:	9201      	str	r2, [sp, #4]
 8027710:	9300      	str	r3, [sp, #0]
 8027712:	460b      	mov	r3, r1
 8027714:	f640 1221 	movw	r2, #2337	; 0x921
 8027718:	4934      	ldr	r1, [pc, #208]	; (80277ec <lfs_dir_orphaningcommit+0x5e8>)
 802771a:	4835      	ldr	r0, [pc, #212]	; (80277f0 <lfs_dir_orphaningcommit+0x5ec>)
 802771c:	f006 f830 	bl	802d780 <iprintf>
                        "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                        pdir.pair[0], pdir.pair[1], moveid);
                lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8027720:	2200      	movs	r2, #0
 8027722:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8027726:	68f8      	ldr	r0, [r7, #12]
 8027728:	f002 fe2e 	bl	802a388 <lfs_fs_prepmove>
            }

            // replace bad pair, either we clean up desync, or no desync occured
            lpair[0] = pdir.pair[0];
 802772c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 802772e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            lpair[1] = pdir.pair[1];
 8027732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8027734:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            lfs_pair_tole32(ldir.pair);
 8027738:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802773c:	4618      	mov	r0, r3
 802773e:	f7fc fd42 	bl	80241c6 <lfs_pair_tole32>
            state = lfs_dir_relocatingcommit(lfs, &pdir, lpair, LFS_MKATTRS(
 8027742:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027746:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802774a:	4293      	cmp	r3, r2
 802774c:	d007      	beq.n	802775e <lfs_dir_orphaningcommit+0x55a>
 802774e:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8027752:	029b      	lsls	r3, r3, #10
 8027754:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8027758:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802775c:	e000      	b.n	8027760 <lfs_dir_orphaningcommit+0x55c>
 802775e:	2300      	movs	r3, #0
 8027760:	627b      	str	r3, [r7, #36]	; 0x24
 8027762:	2300      	movs	r3, #0
 8027764:	62bb      	str	r3, [r7, #40]	; 0x28
 8027766:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 802776a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802776e:	051a      	lsls	r2, r3, #20
 8027770:	4b20      	ldr	r3, [pc, #128]	; (80277f4 <lfs_dir_orphaningcommit+0x5f0>)
 8027772:	4313      	orrs	r3, r2
 8027774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8027776:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802777a:	633b      	str	r3, [r7, #48]	; 0x30
 802777c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8027780:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8027784:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8027788:	2000      	movs	r0, #0
 802778a:	9001      	str	r0, [sp, #4]
 802778c:	2002      	movs	r0, #2
 802778e:	9000      	str	r0, [sp, #0]
 8027790:	68f8      	ldr	r0, [r7, #12]
 8027792:	f7ff fa81 	bl	8026c98 <lfs_dir_relocatingcommit>
 8027796:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
                        {LFS_MKTAG_IF(moveid != 0x3ff,
                            LFS_TYPE_DELETE, moveid, 0), NULL},
                        {LFS_MKTAG(LFS_TYPE_TAIL + pdir.split, 0x3ff, 8),
                            ldir.pair}),
                    NULL);
            lfs_pair_fromle32(ldir.pair);
 802779a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802779e:	4618      	mov	r0, r3
 80277a0:	f7fc fcf7 	bl	8024192 <lfs_pair_fromle32>
            if (state < 0) {
 80277a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80277a8:	2b00      	cmp	r3, #0
 80277aa:	da02      	bge.n	80277b2 <lfs_dir_orphaningcommit+0x5ae>
                return state;
 80277ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80277b0:	e015      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
            }

            ldir = pdir;
 80277b2:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80277b6:	f107 056c 	add.w	r5, r7, #108	; 0x6c
 80277ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80277bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80277be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80277c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (state == LFS_OK_RELOCATED) {
 80277c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80277ca:	2b01      	cmp	r3, #1
 80277cc:	f43f adfe 	beq.w	80273cc <lfs_dir_orphaningcommit+0x1c8>
        }
    }

    return orphans ? LFS_OK_ORPHANED : 0;
 80277d0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80277d4:	2b00      	cmp	r3, #0
 80277d6:	d001      	beq.n	80277dc <lfs_dir_orphaningcommit+0x5d8>
 80277d8:	2303      	movs	r3, #3
 80277da:	e000      	b.n	80277de <lfs_dir_orphaningcommit+0x5da>
 80277dc:	2300      	movs	r3, #0
}
 80277de:	4618      	mov	r0, r3
 80277e0:	37e0      	adds	r7, #224	; 0xe0
 80277e2:	46bd      	mov	sp, r7
 80277e4:	bdb0      	pop	{r4, r5, r7, pc}
 80277e6:	bf00      	nop
 80277e8:	08033914 	.word	0x08033914
 80277ec:	08033800 	.word	0x08033800
 80277f0:	08033ad0 	.word	0x08033ad0
 80277f4:	000ffc08 	.word	0x000ffc08

080277f8 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 80277f8:	b580      	push	{r7, lr}
 80277fa:	b086      	sub	sp, #24
 80277fc:	af00      	add	r7, sp, #0
 80277fe:	60f8      	str	r0, [r7, #12]
 8027800:	60b9      	str	r1, [r7, #8]
 8027802:	607a      	str	r2, [r7, #4]
 8027804:	603b      	str	r3, [r7, #0]
    int orphans = lfs_dir_orphaningcommit(lfs, dir, attrs, attrcount);
 8027806:	683b      	ldr	r3, [r7, #0]
 8027808:	687a      	ldr	r2, [r7, #4]
 802780a:	68b9      	ldr	r1, [r7, #8]
 802780c:	68f8      	ldr	r0, [r7, #12]
 802780e:	f7ff fcf9 	bl	8027204 <lfs_dir_orphaningcommit>
 8027812:	6178      	str	r0, [r7, #20]
    if (orphans < 0) {
 8027814:	697b      	ldr	r3, [r7, #20]
 8027816:	2b00      	cmp	r3, #0
 8027818:	da01      	bge.n	802781e <lfs_dir_commit+0x26>
        return orphans;
 802781a:	697b      	ldr	r3, [r7, #20]
 802781c:	e00d      	b.n	802783a <lfs_dir_commit+0x42>
    }

    if (orphans) {
 802781e:	697b      	ldr	r3, [r7, #20]
 8027820:	2b00      	cmp	r3, #0
 8027822:	d009      	beq.n	8027838 <lfs_dir_commit+0x40>
        // make sure we've removed all orphans, this is a noop if there
        // are none, but if we had nested blocks failures we may have
        // created some
        int err = lfs_fs_deorphan(lfs, false);
 8027824:	2100      	movs	r1, #0
 8027826:	68f8      	ldr	r0, [r7, #12]
 8027828:	f002 fe4e 	bl	802a4c8 <lfs_fs_deorphan>
 802782c:	6138      	str	r0, [r7, #16]
        if (err) {
 802782e:	693b      	ldr	r3, [r7, #16]
 8027830:	2b00      	cmp	r3, #0
 8027832:	d001      	beq.n	8027838 <lfs_dir_commit+0x40>
            return err;
 8027834:	693b      	ldr	r3, [r7, #16]
 8027836:	e000      	b.n	802783a <lfs_dir_commit+0x42>
        }
    }

    return 0;
 8027838:	2300      	movs	r3, #0
}
 802783a:	4618      	mov	r0, r3
 802783c:	3718      	adds	r7, #24
 802783e:	46bd      	mov	sp, r7
 8027840:	bd80      	pop	{r7, pc}
	...

08027844 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8027844:	b5b0      	push	{r4, r5, r7, lr}
 8027846:	b0b8      	sub	sp, #224	; 0xe0
 8027848:	af00      	add	r7, sp, #0
 802784a:	6078      	str	r0, [r7, #4]
 802784c:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 802784e:	6878      	ldr	r0, [r7, #4]
 8027850:	f002 ffde 	bl	802a810 <lfs_fs_forceconsistency>
 8027854:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8027858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802785c:	2b00      	cmp	r3, #0
 802785e:	d002      	beq.n	8027866 <lfs_rawmkdir+0x22>
        return err;
 8027860:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027864:	e128      	b.n	8027ab8 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8027866:	687b      	ldr	r3, [r7, #4]
 8027868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802786a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 802786e:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8027872:	463a      	mov	r2, r7
 8027874:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8027878:	f103 0108 	add.w	r1, r3, #8
 802787c:	4603      	mov	r3, r0
 802787e:	6878      	ldr	r0, [r7, #4]
 8027880:	f7fe fab2 	bl	8025de8 <lfs_dir_find>
 8027884:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8027888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802788c:	f113 0f02 	cmn.w	r3, #2
 8027890:	d105      	bne.n	802789e <lfs_rawmkdir+0x5a>
 8027892:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027896:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802789a:	4293      	cmp	r3, r2
 802789c:	d109      	bne.n	80278b2 <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 802789e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278a2:	2b00      	cmp	r3, #0
 80278a4:	da02      	bge.n	80278ac <lfs_rawmkdir+0x68>
 80278a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278aa:	e105      	b.n	8027ab8 <lfs_rawmkdir+0x274>
 80278ac:	f06f 0310 	mvn.w	r3, #16
 80278b0:	e102      	b.n	8027ab8 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 80278b2:	683b      	ldr	r3, [r7, #0]
 80278b4:	4618      	mov	r0, r3
 80278b6:	f7e8 fcf3 	bl	80102a0 <strlen>
 80278ba:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 80278be:	687b      	ldr	r3, [r7, #4]
 80278c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80278c2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80278c6:	429a      	cmp	r2, r3
 80278c8:	d902      	bls.n	80278d0 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 80278ca:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80278ce:	e0f3      	b.n	8027ab8 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 80278d0:	6878      	ldr	r0, [r7, #4]
 80278d2:	f7fc ff1d 	bl	8024710 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 80278d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80278da:	4619      	mov	r1, r3
 80278dc:	6878      	ldr	r0, [r7, #4]
 80278de:	f7fe fd6f 	bl	80263c0 <lfs_dir_alloc>
 80278e2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 80278e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278ea:	2b00      	cmp	r3, #0
 80278ec:	d002      	beq.n	80278f4 <lfs_rawmkdir+0xb0>
        return err;
 80278ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80278f2:	e0e1      	b.n	8027ab8 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 80278f4:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80278f8:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 80278fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80278fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8027900:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8027904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8027908:	e012      	b.n	8027930 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 802790a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802790e:	f103 0218 	add.w	r2, r3, #24
 8027912:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027916:	4619      	mov	r1, r3
 8027918:	6878      	ldr	r0, [r7, #4]
 802791a:	f7fe f953 	bl	8025bc4 <lfs_dir_fetch>
 802791e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027926:	2b00      	cmp	r3, #0
 8027928:	d002      	beq.n	8027930 <lfs_rawmkdir+0xec>
            return err;
 802792a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802792e:	e0c3      	b.n	8027ab8 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8027930:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8027934:	2b00      	cmp	r3, #0
 8027936:	d1e8      	bne.n	802790a <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8027938:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802793c:	3318      	adds	r3, #24
 802793e:	4618      	mov	r0, r3
 8027940:	f7fc fc41 	bl	80241c6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8027944:	4b5e      	ldr	r3, [pc, #376]	; (8027ac0 <lfs_rawmkdir+0x27c>)
 8027946:	667b      	str	r3, [r7, #100]	; 0x64
 8027948:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 802794c:	3318      	adds	r3, #24
 802794e:	66bb      	str	r3, [r7, #104]	; 0x68
 8027950:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8027954:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8027958:	2301      	movs	r3, #1
 802795a:	6878      	ldr	r0, [r7, #4]
 802795c:	f7ff ff4c 	bl	80277f8 <lfs_dir_commit>
 8027960:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8027964:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8027968:	3318      	adds	r3, #24
 802796a:	4618      	mov	r0, r3
 802796c:	f7fc fc11 	bl	8024192 <lfs_pair_fromle32>
    if (err) {
 8027970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027974:	2b00      	cmp	r3, #0
 8027976:	d002      	beq.n	802797e <lfs_rawmkdir+0x13a>
        return err;
 8027978:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802797c:	e09c      	b.n	8027ab8 <lfs_rawmkdir+0x274>
    }

    // current block not end of list?
    if (cwd.m.split) {
 802797e:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8027982:	2b00      	cmp	r3, #0
 8027984:	d04c      	beq.n	8027a20 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8027986:	2101      	movs	r1, #1
 8027988:	6878      	ldr	r0, [r7, #4]
 802798a:	f002 fcc3 	bl	802a314 <lfs_fs_preporphans>
 802798e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027996:	2b00      	cmp	r3, #0
 8027998:	d002      	beq.n	80279a0 <lfs_rawmkdir+0x15c>
            return err;
 802799a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 802799e:	e08b      	b.n	8027ab8 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 80279a0:	2300      	movs	r3, #0
 80279a2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 80279a6:	2300      	movs	r3, #0
 80279a8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 80279ac:	687b      	ldr	r3, [r7, #4]
 80279ae:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80279b2:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 80279b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80279b8:	4618      	mov	r0, r3
 80279ba:	f7fc fc04 	bl	80241c6 <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 80279be:	4b40      	ldr	r3, [pc, #256]	; (8027ac0 <lfs_rawmkdir+0x27c>)
 80279c0:	617b      	str	r3, [r7, #20]
 80279c2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80279c6:	61bb      	str	r3, [r7, #24]
 80279c8:	f107 0214 	add.w	r2, r7, #20
 80279cc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80279d0:	2301      	movs	r3, #1
 80279d2:	6878      	ldr	r0, [r7, #4]
 80279d4:	f7ff ff10 	bl	80277f8 <lfs_dir_commit>
 80279d8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 80279dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80279e0:	4618      	mov	r0, r3
 80279e2:	f7fc fbd6 	bl	8024192 <lfs_pair_fromle32>
        if (err) {
 80279e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80279ea:	2b00      	cmp	r3, #0
 80279ec:	d006      	beq.n	80279fc <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 80279ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80279f2:	687b      	ldr	r3, [r7, #4]
 80279f4:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 80279f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80279fa:	e05d      	b.n	8027ab8 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 80279fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8027a00:	687b      	ldr	r3, [r7, #4]
 8027a02:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8027a04:	f04f 31ff 	mov.w	r1, #4294967295
 8027a08:	6878      	ldr	r0, [r7, #4]
 8027a0a:	f002 fc83 	bl	802a314 <lfs_fs_preporphans>
 8027a0e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8027a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027a16:	2b00      	cmp	r3, #0
 8027a18:	d002      	beq.n	8027a20 <lfs_rawmkdir+0x1dc>
            return err;
 8027a1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027a1e:	e04b      	b.n	8027ab8 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8027a20:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027a24:	4618      	mov	r0, r3
 8027a26:	f7fc fbce 	bl	80241c6 <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8027a2a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027a2e:	029b      	lsls	r3, r3, #10
 8027a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8027a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027a38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8027a3a:	2300      	movs	r3, #0
 8027a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8027a3e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027a42:	029a      	lsls	r2, r3, #10
 8027a44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8027a48:	4313      	orrs	r3, r2
 8027a4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8027a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8027a50:	683b      	ldr	r3, [r7, #0]
 8027a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8027a54:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8027a58:	029b      	lsls	r3, r3, #10
 8027a5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027a5e:	f043 0308 	orr.w	r3, r3, #8
 8027a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8027a64:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027a68:	653b      	str	r3, [r7, #80]	; 0x50
 8027a6a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8027a6e:	f083 0301 	eor.w	r3, r3, #1
 8027a72:	b2db      	uxtb	r3, r3
 8027a74:	2b00      	cmp	r3, #0
 8027a76:	d001      	beq.n	8027a7c <lfs_rawmkdir+0x238>
 8027a78:	4b11      	ldr	r3, [pc, #68]	; (8027ac0 <lfs_rawmkdir+0x27c>)
 8027a7a:	e000      	b.n	8027a7e <lfs_rawmkdir+0x23a>
 8027a7c:	2300      	movs	r3, #0
 8027a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8027a80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027a84:	65bb      	str	r3, [r7, #88]	; 0x58
 8027a86:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8027a8a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8027a8e:	f103 0108 	add.w	r1, r3, #8
 8027a92:	2304      	movs	r3, #4
 8027a94:	6878      	ldr	r0, [r7, #4]
 8027a96:	f7ff feaf 	bl	80277f8 <lfs_dir_commit>
 8027a9a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 8027a9e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8027aa2:	4618      	mov	r0, r3
 8027aa4:	f7fc fb75 	bl	8024192 <lfs_pair_fromle32>
    if (err) {
 8027aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027aac:	2b00      	cmp	r3, #0
 8027aae:	d002      	beq.n	8027ab6 <lfs_rawmkdir+0x272>
        return err;
 8027ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8027ab4:	e000      	b.n	8027ab8 <lfs_rawmkdir+0x274>
    }

    return 0;
 8027ab6:	2300      	movs	r3, #0
}
 8027ab8:	4618      	mov	r0, r3
 8027aba:	37e0      	adds	r7, #224	; 0xe0
 8027abc:	46bd      	mov	sp, r7
 8027abe:	bdb0      	pop	{r4, r5, r7, pc}
 8027ac0:	600ffc08 	.word	0x600ffc08

08027ac4 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8027ac4:	b590      	push	{r4, r7, lr}
 8027ac6:	b08d      	sub	sp, #52	; 0x34
 8027ac8:	af02      	add	r7, sp, #8
 8027aca:	60f8      	str	r0, [r7, #12]
 8027acc:	60b9      	str	r1, [r7, #8]
 8027ace:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 8027ad0:	68bb      	ldr	r3, [r7, #8]
 8027ad2:	f103 0108 	add.w	r1, r3, #8
 8027ad6:	1d3a      	adds	r2, r7, #4
 8027ad8:	2300      	movs	r3, #0
 8027ada:	68f8      	ldr	r0, [r7, #12]
 8027adc:	f7fe f984 	bl	8025de8 <lfs_dir_find>
 8027ae0:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 8027ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ae4:	2b00      	cmp	r3, #0
 8027ae6:	da01      	bge.n	8027aec <lfs_dir_rawopen+0x28>
        return tag;
 8027ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027aea:	e05e      	b.n	8027baa <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 8027aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027aee:	4618      	mov	r0, r3
 8027af0:	f7fc fbb4 	bl	802425c <lfs_tag_type3>
 8027af4:	4603      	mov	r3, r0
 8027af6:	2b02      	cmp	r3, #2
 8027af8:	d002      	beq.n	8027b00 <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 8027afa:	f06f 0313 	mvn.w	r3, #19
 8027afe:	e054      	b.n	8027baa <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 8027b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b02:	4618      	mov	r0, r3
 8027b04:	f7fc fbd4 	bl	80242b0 <lfs_tag_id>
 8027b08:	4603      	mov	r3, r0
 8027b0a:	461a      	mov	r2, r3
 8027b0c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8027b10:	429a      	cmp	r2, r3
 8027b12:	d106      	bne.n	8027b22 <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 8027b14:	68fb      	ldr	r3, [r7, #12]
 8027b16:	6a1b      	ldr	r3, [r3, #32]
 8027b18:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 8027b1a:	68fb      	ldr	r3, [r7, #12]
 8027b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8027b1e:	61bb      	str	r3, [r7, #24]
 8027b20:	e01f      	b.n	8027b62 <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027b22:	68bb      	ldr	r3, [r7, #8]
 8027b24:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8027b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027b2a:	4618      	mov	r0, r3
 8027b2c:	f7fc fbc0 	bl	80242b0 <lfs_tag_id>
 8027b30:	4603      	mov	r3, r0
 8027b32:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8027b34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8027b38:	f043 0308 	orr.w	r3, r3, #8
 8027b3c:	f107 0214 	add.w	r2, r7, #20
 8027b40:	9200      	str	r2, [sp, #0]
 8027b42:	4a1c      	ldr	r2, [pc, #112]	; (8027bb4 <lfs_dir_rawopen+0xf0>)
 8027b44:	4621      	mov	r1, r4
 8027b46:	68f8      	ldr	r0, [r7, #12]
 8027b48:	f7fc ff9c 	bl	8024a84 <lfs_dir_get>
 8027b4c:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 8027b4e:	6a3b      	ldr	r3, [r7, #32]
 8027b50:	2b00      	cmp	r3, #0
 8027b52:	da01      	bge.n	8027b58 <lfs_dir_rawopen+0x94>
            return res;
 8027b54:	6a3b      	ldr	r3, [r7, #32]
 8027b56:	e028      	b.n	8027baa <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8027b58:	f107 0314 	add.w	r3, r7, #20
 8027b5c:	4618      	mov	r0, r3
 8027b5e:	f7fc fb18 	bl	8024192 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 8027b62:	68bb      	ldr	r3, [r7, #8]
 8027b64:	3308      	adds	r3, #8
 8027b66:	f107 0214 	add.w	r2, r7, #20
 8027b6a:	4619      	mov	r1, r3
 8027b6c:	68f8      	ldr	r0, [r7, #12]
 8027b6e:	f7fe f829 	bl	8025bc4 <lfs_dir_fetch>
 8027b72:	61f8      	str	r0, [r7, #28]
    if (err) {
 8027b74:	69fb      	ldr	r3, [r7, #28]
 8027b76:	2b00      	cmp	r3, #0
 8027b78:	d001      	beq.n	8027b7e <lfs_dir_rawopen+0xba>
        return err;
 8027b7a:	69fb      	ldr	r3, [r7, #28]
 8027b7c:	e015      	b.n	8027baa <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 8027b7e:	68bb      	ldr	r3, [r7, #8]
 8027b80:	689a      	ldr	r2, [r3, #8]
 8027b82:	68bb      	ldr	r3, [r7, #8]
 8027b84:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8027b86:	68bb      	ldr	r3, [r7, #8]
 8027b88:	68da      	ldr	r2, [r3, #12]
 8027b8a:	68bb      	ldr	r3, [r7, #8]
 8027b8c:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 8027b8e:	68bb      	ldr	r3, [r7, #8]
 8027b90:	2200      	movs	r2, #0
 8027b92:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8027b94:	68bb      	ldr	r3, [r7, #8]
 8027b96:	2200      	movs	r2, #0
 8027b98:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8027b9a:	68bb      	ldr	r3, [r7, #8]
 8027b9c:	2202      	movs	r2, #2
 8027b9e:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 8027ba0:	68b9      	ldr	r1, [r7, #8]
 8027ba2:	68f8      	ldr	r0, [r7, #12]
 8027ba4:	f7fc fd6b 	bl	802467e <lfs_mlist_append>

    return 0;
 8027ba8:	2300      	movs	r3, #0
}
 8027baa:	4618      	mov	r0, r3
 8027bac:	372c      	adds	r7, #44	; 0x2c
 8027bae:	46bd      	mov	sp, r7
 8027bb0:	bd90      	pop	{r4, r7, pc}
 8027bb2:	bf00      	nop
 8027bb4:	700ffc00 	.word	0x700ffc00

08027bb8 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8027bb8:	b580      	push	{r7, lr}
 8027bba:	b082      	sub	sp, #8
 8027bbc:	af00      	add	r7, sp, #0
 8027bbe:	6078      	str	r0, [r7, #4]
 8027bc0:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 8027bc2:	6839      	ldr	r1, [r7, #0]
 8027bc4:	6878      	ldr	r0, [r7, #4]
 8027bc6:	f7fc fd38 	bl	802463a <lfs_mlist_remove>

    return 0;
 8027bca:	2300      	movs	r3, #0
}
 8027bcc:	4618      	mov	r0, r3
 8027bce:	3708      	adds	r7, #8
 8027bd0:	46bd      	mov	sp, r7
 8027bd2:	bd80      	pop	{r7, pc}

08027bd4 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8027bd4:	b580      	push	{r7, lr}
 8027bd6:	b086      	sub	sp, #24
 8027bd8:	af00      	add	r7, sp, #0
 8027bda:	60f8      	str	r0, [r7, #12]
 8027bdc:	60b9      	str	r1, [r7, #8]
 8027bde:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 8027be0:	f44f 7284 	mov.w	r2, #264	; 0x108
 8027be4:	2100      	movs	r1, #0
 8027be6:	6878      	ldr	r0, [r7, #4]
 8027be8:	f005 ff60 	bl	802daac <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 8027bec:	68bb      	ldr	r3, [r7, #8]
 8027bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027bf0:	2b00      	cmp	r3, #0
 8027bf2:	d110      	bne.n	8027c16 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 8027bf4:	687b      	ldr	r3, [r7, #4]
 8027bf6:	2202      	movs	r2, #2
 8027bf8:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 8027bfa:	687b      	ldr	r3, [r7, #4]
 8027bfc:	3308      	adds	r3, #8
 8027bfe:	4935      	ldr	r1, [pc, #212]	; (8027cd4 <lfs_dir_rawread+0x100>)
 8027c00:	461a      	mov	r2, r3
 8027c02:	460b      	mov	r3, r1
 8027c04:	881b      	ldrh	r3, [r3, #0]
 8027c06:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 8027c08:	68bb      	ldr	r3, [r7, #8]
 8027c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c0c:	1c5a      	adds	r2, r3, #1
 8027c0e:	68bb      	ldr	r3, [r7, #8]
 8027c10:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027c12:	2301      	movs	r3, #1
 8027c14:	e05a      	b.n	8027ccc <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 8027c16:	68bb      	ldr	r3, [r7, #8]
 8027c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c1a:	2b01      	cmp	r3, #1
 8027c1c:	d110      	bne.n	8027c40 <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 8027c1e:	687b      	ldr	r3, [r7, #4]
 8027c20:	2202      	movs	r2, #2
 8027c22:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 8027c24:	687b      	ldr	r3, [r7, #4]
 8027c26:	3308      	adds	r3, #8
 8027c28:	4a2b      	ldr	r2, [pc, #172]	; (8027cd8 <lfs_dir_rawread+0x104>)
 8027c2a:	8811      	ldrh	r1, [r2, #0]
 8027c2c:	7892      	ldrb	r2, [r2, #2]
 8027c2e:	8019      	strh	r1, [r3, #0]
 8027c30:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 8027c32:	68bb      	ldr	r3, [r7, #8]
 8027c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027c36:	1c5a      	adds	r2, r3, #1
 8027c38:	68bb      	ldr	r3, [r7, #8]
 8027c3a:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 8027c3c:	2301      	movs	r3, #1
 8027c3e:	e045      	b.n	8027ccc <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 8027c40:	68bb      	ldr	r3, [r7, #8]
 8027c42:	889a      	ldrh	r2, [r3, #4]
 8027c44:	68bb      	ldr	r3, [r7, #8]
 8027c46:	8b9b      	ldrh	r3, [r3, #28]
 8027c48:	429a      	cmp	r2, r3
 8027c4a:	d11a      	bne.n	8027c82 <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8027c4c:	68bb      	ldr	r3, [r7, #8]
 8027c4e:	7fdb      	ldrb	r3, [r3, #31]
 8027c50:	f083 0301 	eor.w	r3, r3, #1
 8027c54:	b2db      	uxtb	r3, r3
 8027c56:	2b00      	cmp	r3, #0
 8027c58:	d001      	beq.n	8027c5e <lfs_dir_rawread+0x8a>
                return false;
 8027c5a:	2300      	movs	r3, #0
 8027c5c:	e036      	b.n	8027ccc <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 8027c5e:	68bb      	ldr	r3, [r7, #8]
 8027c60:	f103 0108 	add.w	r1, r3, #8
 8027c64:	68bb      	ldr	r3, [r7, #8]
 8027c66:	3320      	adds	r3, #32
 8027c68:	461a      	mov	r2, r3
 8027c6a:	68f8      	ldr	r0, [r7, #12]
 8027c6c:	f7fd ffaa 	bl	8025bc4 <lfs_dir_fetch>
 8027c70:	6178      	str	r0, [r7, #20]
            if (err) {
 8027c72:	697b      	ldr	r3, [r7, #20]
 8027c74:	2b00      	cmp	r3, #0
 8027c76:	d001      	beq.n	8027c7c <lfs_dir_rawread+0xa8>
                return err;
 8027c78:	697b      	ldr	r3, [r7, #20]
 8027c7a:	e027      	b.n	8027ccc <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8027c7c:	68bb      	ldr	r3, [r7, #8]
 8027c7e:	2200      	movs	r2, #0
 8027c80:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 8027c82:	68bb      	ldr	r3, [r7, #8]
 8027c84:	f103 0108 	add.w	r1, r3, #8
 8027c88:	68bb      	ldr	r3, [r7, #8]
 8027c8a:	889a      	ldrh	r2, [r3, #4]
 8027c8c:	687b      	ldr	r3, [r7, #4]
 8027c8e:	68f8      	ldr	r0, [r7, #12]
 8027c90:	f7fd ffe6 	bl	8025c60 <lfs_dir_getinfo>
 8027c94:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8027c96:	693b      	ldr	r3, [r7, #16]
 8027c98:	2b00      	cmp	r3, #0
 8027c9a:	d005      	beq.n	8027ca8 <lfs_dir_rawread+0xd4>
 8027c9c:	693b      	ldr	r3, [r7, #16]
 8027c9e:	f113 0f02 	cmn.w	r3, #2
 8027ca2:	d001      	beq.n	8027ca8 <lfs_dir_rawread+0xd4>
            return err;
 8027ca4:	693b      	ldr	r3, [r7, #16]
 8027ca6:	e011      	b.n	8027ccc <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8027ca8:	68bb      	ldr	r3, [r7, #8]
 8027caa:	889b      	ldrh	r3, [r3, #4]
 8027cac:	3301      	adds	r3, #1
 8027cae:	b29a      	uxth	r2, r3
 8027cb0:	68bb      	ldr	r3, [r7, #8]
 8027cb2:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8027cb4:	693b      	ldr	r3, [r7, #16]
 8027cb6:	f113 0f02 	cmn.w	r3, #2
 8027cba:	d100      	bne.n	8027cbe <lfs_dir_rawread+0xea>
    while (true) {
 8027cbc:	e7c0      	b.n	8027c40 <lfs_dir_rawread+0x6c>
            break;
 8027cbe:	bf00      	nop
        }
    }

    dir->pos += 1;
 8027cc0:	68bb      	ldr	r3, [r7, #8]
 8027cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027cc4:	1c5a      	adds	r2, r3, #1
 8027cc6:	68bb      	ldr	r3, [r7, #8]
 8027cc8:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8027cca:	2301      	movs	r3, #1
}
 8027ccc:	4618      	mov	r0, r3
 8027cce:	3718      	adds	r7, #24
 8027cd0:	46bd      	mov	sp, r7
 8027cd2:	bd80      	pop	{r7, pc}
 8027cd4:	08033964 	.word	0x08033964
 8027cd8:	08033968 	.word	0x08033968

08027cdc <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8027cdc:	b590      	push	{r4, r7, lr}
 8027cde:	b087      	sub	sp, #28
 8027ce0:	af00      	add	r7, sp, #0
 8027ce2:	6078      	str	r0, [r7, #4]
 8027ce4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8027ce6:	683b      	ldr	r3, [r7, #0]
 8027ce8:	681b      	ldr	r3, [r3, #0]
 8027cea:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8027cec:	687b      	ldr	r3, [r7, #4]
 8027cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027cf0:	69db      	ldr	r3, [r3, #28]
 8027cf2:	3b08      	subs	r3, #8
 8027cf4:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8027cf6:	697a      	ldr	r2, [r7, #20]
 8027cf8:	693b      	ldr	r3, [r7, #16]
 8027cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8027cfe:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8027d00:	68fb      	ldr	r3, [r7, #12]
 8027d02:	2b00      	cmp	r3, #0
 8027d04:	d101      	bne.n	8027d0a <lfs_ctz_index+0x2e>
        return 0;
 8027d06:	2300      	movs	r3, #0
 8027d08:	e01c      	b.n	8027d44 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8027d0a:	68fb      	ldr	r3, [r7, #12]
 8027d0c:	3b01      	subs	r3, #1
 8027d0e:	4618      	mov	r0, r3
 8027d10:	f7fb fe0e 	bl	8023930 <lfs_popc>
 8027d14:	4603      	mov	r3, r0
 8027d16:	3302      	adds	r3, #2
 8027d18:	009b      	lsls	r3, r3, #2
 8027d1a:	697a      	ldr	r2, [r7, #20]
 8027d1c:	1ad2      	subs	r2, r2, r3
 8027d1e:	693b      	ldr	r3, [r7, #16]
 8027d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8027d24:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8027d26:	693b      	ldr	r3, [r7, #16]
 8027d28:	68fa      	ldr	r2, [r7, #12]
 8027d2a:	fb02 f303 	mul.w	r3, r2, r3
 8027d2e:	697a      	ldr	r2, [r7, #20]
 8027d30:	1ad4      	subs	r4, r2, r3
 8027d32:	68f8      	ldr	r0, [r7, #12]
 8027d34:	f7fb fdfc 	bl	8023930 <lfs_popc>
 8027d38:	4603      	mov	r3, r0
 8027d3a:	009b      	lsls	r3, r3, #2
 8027d3c:	1ae2      	subs	r2, r4, r3
 8027d3e:	683b      	ldr	r3, [r7, #0]
 8027d40:	601a      	str	r2, [r3, #0]
    return i;
 8027d42:	68fb      	ldr	r3, [r7, #12]
}
 8027d44:	4618      	mov	r0, r3
 8027d46:	371c      	adds	r7, #28
 8027d48:	46bd      	mov	sp, r7
 8027d4a:	bd90      	pop	{r4, r7, pc}

08027d4c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8027d4c:	b590      	push	{r4, r7, lr}
 8027d4e:	b08f      	sub	sp, #60	; 0x3c
 8027d50:	af04      	add	r7, sp, #16
 8027d52:	60f8      	str	r0, [r7, #12]
 8027d54:	60b9      	str	r1, [r7, #8]
 8027d56:	607a      	str	r2, [r7, #4]
 8027d58:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8027d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d108      	bne.n	8027d72 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8027d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027d62:	f04f 32ff 	mov.w	r2, #4294967295
 8027d66:	601a      	str	r2, [r3, #0]
        *off = 0;
 8027d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027d6a:	2200      	movs	r2, #0
 8027d6c:	601a      	str	r2, [r3, #0]
        return 0;
 8027d6e:	2300      	movs	r3, #0
 8027d70:	e053      	b.n	8027e1a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8027d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8027d74:	3b01      	subs	r3, #1
 8027d76:	617b      	str	r3, [r7, #20]
 8027d78:	f107 0314 	add.w	r3, r7, #20
 8027d7c:	4619      	mov	r1, r3
 8027d7e:	68f8      	ldr	r0, [r7, #12]
 8027d80:	f7ff ffac 	bl	8027cdc <lfs_ctz_index>
 8027d84:	4603      	mov	r3, r0
 8027d86:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8027d88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8027d8c:	4619      	mov	r1, r3
 8027d8e:	68f8      	ldr	r0, [r7, #12]
 8027d90:	f7ff ffa4 	bl	8027cdc <lfs_ctz_index>
 8027d94:	4603      	mov	r3, r0
 8027d96:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8027d98:	e034      	b.n	8027e04 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8027d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027d9c:	6a3b      	ldr	r3, [r7, #32]
 8027d9e:	1ad3      	subs	r3, r2, r3
 8027da0:	3301      	adds	r3, #1
 8027da2:	4618      	mov	r0, r3
 8027da4:	f7fb fda5 	bl	80238f2 <lfs_npw2>
 8027da8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8027daa:	1e5c      	subs	r4, r3, #1
 8027dac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8027dae:	f7fb fdb0 	bl	8023912 <lfs_ctz>
 8027db2:	4603      	mov	r3, r0
 8027db4:	4619      	mov	r1, r3
 8027db6:	4620      	mov	r0, r4
 8027db8:	f7fb fd64 	bl	8023884 <lfs_min>
 8027dbc:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 8027dbe:	683b      	ldr	r3, [r7, #0]
 8027dc0:	69fa      	ldr	r2, [r7, #28]
 8027dc2:	0092      	lsls	r2, r2, #2
 8027dc4:	2104      	movs	r1, #4
 8027dc6:	9103      	str	r1, [sp, #12]
 8027dc8:	4639      	mov	r1, r7
 8027dca:	9102      	str	r1, [sp, #8]
 8027dcc:	9201      	str	r2, [sp, #4]
 8027dce:	9300      	str	r3, [sp, #0]
 8027dd0:	2304      	movs	r3, #4
 8027dd2:	687a      	ldr	r2, [r7, #4]
 8027dd4:	68b9      	ldr	r1, [r7, #8]
 8027dd6:	68f8      	ldr	r0, [r7, #12]
 8027dd8:	f7fb fe30 	bl	8023a3c <lfs_bd_read>
 8027ddc:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 8027dde:	683b      	ldr	r3, [r7, #0]
 8027de0:	4618      	mov	r0, r3
 8027de2:	f7fb fdbf 	bl	8023964 <lfs_fromle32>
 8027de6:	4603      	mov	r3, r0
 8027de8:	603b      	str	r3, [r7, #0]
        if (err) {
 8027dea:	69bb      	ldr	r3, [r7, #24]
 8027dec:	2b00      	cmp	r3, #0
 8027dee:	d001      	beq.n	8027df4 <lfs_ctz_find+0xa8>
            return err;
 8027df0:	69bb      	ldr	r3, [r7, #24]
 8027df2:	e012      	b.n	8027e1a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 8027df4:	2201      	movs	r2, #1
 8027df6:	69fb      	ldr	r3, [r7, #28]
 8027df8:	fa02 f303 	lsl.w	r3, r2, r3
 8027dfc:	461a      	mov	r2, r3
 8027dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027e00:	1a9b      	subs	r3, r3, r2
 8027e02:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8027e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8027e06:	6a3b      	ldr	r3, [r7, #32]
 8027e08:	429a      	cmp	r2, r3
 8027e0a:	d8c6      	bhi.n	8027d9a <lfs_ctz_find+0x4e>
    }

    *block = head;
 8027e0c:	683a      	ldr	r2, [r7, #0]
 8027e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027e10:	601a      	str	r2, [r3, #0]
    *off = pos;
 8027e12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8027e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027e16:	601a      	str	r2, [r3, #0]
    return 0;
 8027e18:	2300      	movs	r3, #0
}
 8027e1a:	4618      	mov	r0, r3
 8027e1c:	372c      	adds	r7, #44	; 0x2c
 8027e1e:	46bd      	mov	sp, r7
 8027e20:	bd90      	pop	{r4, r7, pc}
	...

08027e24 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8027e24:	b580      	push	{r7, lr}
 8027e26:	b092      	sub	sp, #72	; 0x48
 8027e28:	af04      	add	r7, sp, #16
 8027e2a:	60f8      	str	r0, [r7, #12]
 8027e2c:	60b9      	str	r1, [r7, #8]
 8027e2e:	607a      	str	r2, [r7, #4]
 8027e30:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8027e32:	f107 0320 	add.w	r3, r7, #32
 8027e36:	4619      	mov	r1, r3
 8027e38:	68f8      	ldr	r0, [r7, #12]
 8027e3a:	f7fc fc89 	bl	8024750 <lfs_alloc>
 8027e3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 8027e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e42:	2b00      	cmp	r3, #0
 8027e44:	d001      	beq.n	8027e4a <lfs_ctz_extend+0x26>
            return err;
 8027e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e48:	e0e9      	b.n	802801e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8027e4a:	6a3b      	ldr	r3, [r7, #32]
 8027e4c:	4619      	mov	r1, r3
 8027e4e:	68f8      	ldr	r0, [r7, #12]
 8027e50:	f7fc f8e6 	bl	8024020 <lfs_bd_erase>
 8027e54:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8027e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e58:	2b00      	cmp	r3, #0
 8027e5a:	d006      	beq.n	8027e6a <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8027e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e5e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027e62:	f000 80cb 	beq.w	8027ffc <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8027e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027e68:	e0d9      	b.n	802801e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8027e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027e6c:	2b00      	cmp	r3, #0
 8027e6e:	d107      	bne.n	8027e80 <lfs_ctz_extend+0x5c>
                *block = nblock;
 8027e70:	6a3a      	ldr	r2, [r7, #32]
 8027e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027e74:	601a      	str	r2, [r3, #0]
                *off = 0;
 8027e76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027e78:	2200      	movs	r2, #0
 8027e7a:	601a      	str	r2, [r3, #0]
                return 0;
 8027e7c:	2300      	movs	r3, #0
 8027e7e:	e0ce      	b.n	802801e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 8027e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8027e82:	3b01      	subs	r3, #1
 8027e84:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8027e86:	f107 031c 	add.w	r3, r7, #28
 8027e8a:	4619      	mov	r1, r3
 8027e8c:	68f8      	ldr	r0, [r7, #12]
 8027e8e:	f7ff ff25 	bl	8027cdc <lfs_ctz_index>
 8027e92:	4603      	mov	r3, r0
 8027e94:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8027e96:	69fb      	ldr	r3, [r7, #28]
 8027e98:	3301      	adds	r3, #1
 8027e9a:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8027e9c:	68fb      	ldr	r3, [r7, #12]
 8027e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8027ea0:	69da      	ldr	r2, [r3, #28]
 8027ea2:	69fb      	ldr	r3, [r7, #28]
 8027ea4:	429a      	cmp	r2, r3
 8027ea6:	d044      	beq.n	8027f32 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027ea8:	2300      	movs	r3, #0
 8027eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8027eac:	e035      	b.n	8027f1a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 8027eae:	69fa      	ldr	r2, [r7, #28]
 8027eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027eb2:	1ad2      	subs	r2, r2, r3
 8027eb4:	2301      	movs	r3, #1
 8027eb6:	9303      	str	r3, [sp, #12]
 8027eb8:	f107 0317 	add.w	r3, r7, #23
 8027ebc:	9302      	str	r3, [sp, #8]
 8027ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027ec0:	9301      	str	r3, [sp, #4]
 8027ec2:	683b      	ldr	r3, [r7, #0]
 8027ec4:	9300      	str	r3, [sp, #0]
 8027ec6:	4613      	mov	r3, r2
 8027ec8:	687a      	ldr	r2, [r7, #4]
 8027eca:	2100      	movs	r1, #0
 8027ecc:	68f8      	ldr	r0, [r7, #12]
 8027ece:	f7fb fdb5 	bl	8023a3c <lfs_bd_read>
 8027ed2:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8027ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027ed6:	2b00      	cmp	r3, #0
 8027ed8:	d001      	beq.n	8027ede <lfs_ctz_extend+0xba>
                        return err;
 8027eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027edc:	e09f      	b.n	802801e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 8027ede:	6a3b      	ldr	r3, [r7, #32]
 8027ee0:	2201      	movs	r2, #1
 8027ee2:	9203      	str	r2, [sp, #12]
 8027ee4:	f107 0217 	add.w	r2, r7, #23
 8027ee8:	9202      	str	r2, [sp, #8]
 8027eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027eec:	9201      	str	r2, [sp, #4]
 8027eee:	9300      	str	r3, [sp, #0]
 8027ef0:	2301      	movs	r3, #1
 8027ef2:	687a      	ldr	r2, [r7, #4]
 8027ef4:	68b9      	ldr	r1, [r7, #8]
 8027ef6:	68f8      	ldr	r0, [r7, #12]
 8027ef8:	f7fb ffe6 	bl	8023ec8 <lfs_bd_prog>
 8027efc:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8027efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f00:	2b00      	cmp	r3, #0
 8027f02:	d007      	beq.n	8027f14 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 8027f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f06:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027f0a:	d101      	bne.n	8027f10 <lfs_ctz_extend+0xec>
                            goto relocate;
 8027f0c:	bf00      	nop
                    goto relocate;
 8027f0e:	e075      	b.n	8027ffc <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 8027f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 8027f12:	e084      	b.n	802801e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 8027f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8027f16:	3301      	adds	r3, #1
 8027f18:	637b      	str	r3, [r7, #52]	; 0x34
 8027f1a:	69fb      	ldr	r3, [r7, #28]
 8027f1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8027f1e:	429a      	cmp	r2, r3
 8027f20:	d3c5      	bcc.n	8027eae <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 8027f22:	6a3a      	ldr	r2, [r7, #32]
 8027f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027f26:	601a      	str	r2, [r3, #0]
                *off = noff;
 8027f28:	69fa      	ldr	r2, [r7, #28]
 8027f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027f2c:	601a      	str	r2, [r3, #0]
                return 0;
 8027f2e:	2300      	movs	r3, #0
 8027f30:	e075      	b.n	802801e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 8027f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8027f34:	3301      	adds	r3, #1
 8027f36:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 8027f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8027f3a:	f7fb fcea 	bl	8023912 <lfs_ctz>
 8027f3e:	4603      	mov	r3, r0
 8027f40:	3301      	adds	r3, #1
 8027f42:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8027f44:	683b      	ldr	r3, [r7, #0]
 8027f46:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8027f48:	2300      	movs	r3, #0
 8027f4a:	633b      	str	r3, [r7, #48]	; 0x30
 8027f4c:	e049      	b.n	8027fe2 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 8027f4e:	69bb      	ldr	r3, [r7, #24]
 8027f50:	4618      	mov	r0, r3
 8027f52:	f7fb fd12 	bl	802397a <lfs_tole32>
 8027f56:	4603      	mov	r3, r0
 8027f58:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8027f5a:	6a3b      	ldr	r3, [r7, #32]
 8027f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027f5e:	0092      	lsls	r2, r2, #2
 8027f60:	2104      	movs	r1, #4
 8027f62:	9103      	str	r1, [sp, #12]
 8027f64:	f107 0118 	add.w	r1, r7, #24
 8027f68:	9102      	str	r1, [sp, #8]
 8027f6a:	9201      	str	r2, [sp, #4]
 8027f6c:	9300      	str	r3, [sp, #0]
 8027f6e:	2301      	movs	r3, #1
 8027f70:	687a      	ldr	r2, [r7, #4]
 8027f72:	68b9      	ldr	r1, [r7, #8]
 8027f74:	68f8      	ldr	r0, [r7, #12]
 8027f76:	f7fb ffa7 	bl	8023ec8 <lfs_bd_prog>
 8027f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8027f7c:	69bb      	ldr	r3, [r7, #24]
 8027f7e:	4618      	mov	r0, r3
 8027f80:	f7fb fcf0 	bl	8023964 <lfs_fromle32>
 8027f84:	4603      	mov	r3, r0
 8027f86:	61bb      	str	r3, [r7, #24]
                if (err) {
 8027f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f8a:	2b00      	cmp	r3, #0
 8027f8c:	d005      	beq.n	8027f9a <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 8027f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f90:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8027f94:	d034      	beq.n	8028000 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8027f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027f98:	e041      	b.n	802801e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8027f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027f9c:	3b01      	subs	r3, #1
 8027f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027fa0:	429a      	cmp	r2, r3
 8027fa2:	d01b      	beq.n	8027fdc <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8027fa4:	69bb      	ldr	r3, [r7, #24]
 8027fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027fa8:	0092      	lsls	r2, r2, #2
 8027faa:	2104      	movs	r1, #4
 8027fac:	9103      	str	r1, [sp, #12]
 8027fae:	f107 0118 	add.w	r1, r7, #24
 8027fb2:	9102      	str	r1, [sp, #8]
 8027fb4:	9201      	str	r2, [sp, #4]
 8027fb6:	9300      	str	r3, [sp, #0]
 8027fb8:	2304      	movs	r3, #4
 8027fba:	687a      	ldr	r2, [r7, #4]
 8027fbc:	2100      	movs	r1, #0
 8027fbe:	68f8      	ldr	r0, [r7, #12]
 8027fc0:	f7fb fd3c 	bl	8023a3c <lfs_bd_read>
 8027fc4:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8027fc6:	69bb      	ldr	r3, [r7, #24]
 8027fc8:	4618      	mov	r0, r3
 8027fca:	f7fb fccb 	bl	8023964 <lfs_fromle32>
 8027fce:	4603      	mov	r3, r0
 8027fd0:	61bb      	str	r3, [r7, #24]
                    if (err) {
 8027fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fd4:	2b00      	cmp	r3, #0
 8027fd6:	d001      	beq.n	8027fdc <lfs_ctz_extend+0x1b8>
                        return err;
 8027fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8027fda:	e020      	b.n	802801e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8027fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8027fde:	3301      	adds	r3, #1
 8027fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8027fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8027fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027fe6:	429a      	cmp	r2, r3
 8027fe8:	d3b1      	bcc.n	8027f4e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 8027fea:	6a3a      	ldr	r2, [r7, #32]
 8027fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8027fee:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8027ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8027ff2:	009a      	lsls	r2, r3, #2
 8027ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8027ff6:	601a      	str	r2, [r3, #0]
            return 0;
 8027ff8:	2300      	movs	r3, #0
 8027ffa:	e010      	b.n	802801e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 8027ffc:	bf00      	nop
 8027ffe:	e000      	b.n	8028002 <lfs_ctz_extend+0x1de>
                        goto relocate;
 8028000:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8028002:	6a3b      	ldr	r3, [r7, #32]
 8028004:	4a08      	ldr	r2, [pc, #32]	; (8028028 <lfs_ctz_extend+0x204>)
 8028006:	9200      	str	r2, [sp, #0]
 8028008:	f640 22da 	movw	r2, #2778	; 0xada
 802800c:	4907      	ldr	r1, [pc, #28]	; (802802c <lfs_ctz_extend+0x208>)
 802800e:	4808      	ldr	r0, [pc, #32]	; (8028030 <lfs_ctz_extend+0x20c>)
 8028010:	f005 fbb6 	bl	802d780 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8028014:	68b9      	ldr	r1, [r7, #8]
 8028016:	68f8      	ldr	r0, [r7, #12]
 8028018:	f7fb fcea 	bl	80239f0 <lfs_cache_drop>
    while (true) {
 802801c:	e709      	b.n	8027e32 <lfs_ctz_extend+0xe>
    }
}
 802801e:	4618      	mov	r0, r3
 8028020:	3738      	adds	r7, #56	; 0x38
 8028022:	46bd      	mov	sp, r7
 8028024:	bd80      	pop	{r7, pc}
 8028026:	bf00      	nop
 8028028:	08033914 	.word	0x08033914
 802802c:	08033800 	.word	0x08033800
 8028030:	08033994 	.word	0x08033994

08028034 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 8028034:	b580      	push	{r7, lr}
 8028036:	b090      	sub	sp, #64	; 0x40
 8028038:	af04      	add	r7, sp, #16
 802803a:	60f8      	str	r0, [r7, #12]
 802803c:	60b9      	str	r1, [r7, #8]
 802803e:	607a      	str	r2, [r7, #4]
 8028040:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8028042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028044:	2b00      	cmp	r3, #0
 8028046:	d101      	bne.n	802804c <lfs_ctz_traverse+0x18>
        return 0;
 8028048:	2300      	movs	r3, #0
 802804a:	e06b      	b.n	8028124 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 802804c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802804e:	3b01      	subs	r3, #1
 8028050:	61fb      	str	r3, [r7, #28]
 8028052:	f107 031c 	add.w	r3, r7, #28
 8028056:	4619      	mov	r1, r3
 8028058:	68f8      	ldr	r0, [r7, #12]
 802805a:	f7ff fe3f 	bl	8027cdc <lfs_ctz_index>
 802805e:	4603      	mov	r3, r0
 8028060:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 8028062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8028064:	6839      	ldr	r1, [r7, #0]
 8028066:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8028068:	4798      	blx	r3
 802806a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 802806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802806e:	2b00      	cmp	r3, #0
 8028070:	d001      	beq.n	8028076 <lfs_ctz_traverse+0x42>
            return err;
 8028072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028074:	e056      	b.n	8028124 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8028076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028078:	2b00      	cmp	r3, #0
 802807a:	d101      	bne.n	8028080 <lfs_ctz_traverse+0x4c>
            return 0;
 802807c:	2300      	movs	r3, #0
 802807e:	e051      	b.n	8028124 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 8028080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028082:	f003 0301 	and.w	r3, r3, #1
 8028086:	f1c3 0302 	rsb	r3, r3, #2
 802808a:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 802808c:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 802808e:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 8028090:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 8028092:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8028094:	9303      	str	r3, [sp, #12]
 8028096:	f107 0314 	add.w	r3, r7, #20
 802809a:	9302      	str	r3, [sp, #8]
 802809c:	2300      	movs	r3, #0
 802809e:	9301      	str	r3, [sp, #4]
 80280a0:	683b      	ldr	r3, [r7, #0]
 80280a2:	9300      	str	r3, [sp, #0]
 80280a4:	4613      	mov	r3, r2
 80280a6:	687a      	ldr	r2, [r7, #4]
 80280a8:	68b9      	ldr	r1, [r7, #8]
 80280aa:	68f8      	ldr	r0, [r7, #12]
 80280ac:	f7fb fcc6 	bl	8023a3c <lfs_bd_read>
 80280b0:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 80280b2:	697b      	ldr	r3, [r7, #20]
 80280b4:	4618      	mov	r0, r3
 80280b6:	f7fb fc55 	bl	8023964 <lfs_fromle32>
 80280ba:	4603      	mov	r3, r0
 80280bc:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 80280be:	69bb      	ldr	r3, [r7, #24]
 80280c0:	4618      	mov	r0, r3
 80280c2:	f7fb fc4f 	bl	8023964 <lfs_fromle32>
 80280c6:	4603      	mov	r3, r0
 80280c8:	61bb      	str	r3, [r7, #24]
        if (err) {
 80280ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280cc:	2b00      	cmp	r3, #0
 80280ce:	d001      	beq.n	80280d4 <lfs_ctz_traverse+0xa0>
            return err;
 80280d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280d2:	e027      	b.n	8028124 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 80280d4:	2300      	movs	r3, #0
 80280d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80280d8:	e012      	b.n	8028100 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 80280da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280dc:	009b      	lsls	r3, r3, #2
 80280de:	3330      	adds	r3, #48	; 0x30
 80280e0:	443b      	add	r3, r7
 80280e2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80280e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80280e8:	4611      	mov	r1, r2
 80280ea:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80280ec:	4798      	blx	r3
 80280ee:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 80280f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280f2:	2b00      	cmp	r3, #0
 80280f4:	d001      	beq.n	80280fa <lfs_ctz_traverse+0xc6>
                return err;
 80280f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80280f8:	e014      	b.n	8028124 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80280fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80280fc:	3301      	adds	r3, #1
 80280fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8028100:	6a3b      	ldr	r3, [r7, #32]
 8028102:	3b01      	subs	r3, #1
 8028104:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028106:	429a      	cmp	r2, r3
 8028108:	dbe7      	blt.n	80280da <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 802810a:	6a3b      	ldr	r3, [r7, #32]
 802810c:	3b01      	subs	r3, #1
 802810e:	009b      	lsls	r3, r3, #2
 8028110:	3330      	adds	r3, #48	; 0x30
 8028112:	443b      	add	r3, r7
 8028114:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8028118:	603b      	str	r3, [r7, #0]
        index -= count;
 802811a:	6a3b      	ldr	r3, [r7, #32]
 802811c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802811e:	1ad3      	subs	r3, r2, r3
 8028120:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 8028122:	e79e      	b.n	8028062 <lfs_ctz_traverse+0x2e>
    }
}
 8028124:	4618      	mov	r0, r3
 8028126:	3730      	adds	r7, #48	; 0x30
 8028128:	46bd      	mov	sp, r7
 802812a:	bd80      	pop	{r7, pc}

0802812c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802812c:	b5b0      	push	{r4, r5, r7, lr}
 802812e:	b09a      	sub	sp, #104	; 0x68
 8028130:	af02      	add	r7, sp, #8
 8028132:	60f8      	str	r0, [r7, #12]
 8028134:	60b9      	str	r1, [r7, #8]
 8028136:	607a      	str	r2, [r7, #4]
 8028138:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 802813a:	683b      	ldr	r3, [r7, #0]
 802813c:	f003 0302 	and.w	r3, r3, #2
 8028140:	2b00      	cmp	r3, #0
 8028142:	d008      	beq.n	8028156 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8028144:	68f8      	ldr	r0, [r7, #12]
 8028146:	f002 fb63 	bl	802a810 <lfs_fs_forceconsistency>
 802814a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 802814c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802814e:	2b00      	cmp	r3, #0
 8028150:	d001      	beq.n	8028156 <lfs_file_rawopencfg+0x2a>
            return err;
 8028152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8028154:	e1b0      	b.n	80284b8 <lfs_file_rawopencfg+0x38c>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8028156:	68bb      	ldr	r3, [r7, #8]
 8028158:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 802815a:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 802815c:	683a      	ldr	r2, [r7, #0]
 802815e:	68bb      	ldr	r3, [r7, #8]
 8028160:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 8028162:	68bb      	ldr	r3, [r7, #8]
 8028164:	2200      	movs	r2, #0
 8028166:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8028168:	68bb      	ldr	r3, [r7, #8]
 802816a:	2200      	movs	r2, #0
 802816c:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 802816e:	68bb      	ldr	r3, [r7, #8]
 8028170:	2200      	movs	r2, #0
 8028172:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8028174:	68bb      	ldr	r3, [r7, #8]
 8028176:	f103 0108 	add.w	r1, r3, #8
 802817a:	68bb      	ldr	r3, [r7, #8]
 802817c:	3304      	adds	r3, #4
 802817e:	1d3a      	adds	r2, r7, #4
 8028180:	68f8      	ldr	r0, [r7, #12]
 8028182:	f7fd fe31 	bl	8025de8 <lfs_dir_find>
 8028186:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8028188:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802818a:	2b00      	cmp	r3, #0
 802818c:	da0c      	bge.n	80281a8 <lfs_file_rawopencfg+0x7c>
 802818e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028190:	f113 0f02 	cmn.w	r3, #2
 8028194:	d105      	bne.n	80281a2 <lfs_file_rawopencfg+0x76>
 8028196:	68bb      	ldr	r3, [r7, #8]
 8028198:	889b      	ldrh	r3, [r3, #4]
 802819a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802819e:	4293      	cmp	r3, r2
 80281a0:	d102      	bne.n	80281a8 <lfs_file_rawopencfg+0x7c>
        err = tag;
 80281a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 80281a6:	e17c      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 80281a8:	68bb      	ldr	r3, [r7, #8]
 80281aa:	2201      	movs	r2, #1
 80281ac:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 80281ae:	68b9      	ldr	r1, [r7, #8]
 80281b0:	68f8      	ldr	r0, [r7, #12]
 80281b2:	f7fc fa64 	bl	802467e <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 80281b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80281b8:	f113 0f02 	cmn.w	r3, #2
 80281bc:	d14e      	bne.n	802825c <lfs_file_rawopencfg+0x130>
        if (!(flags & LFS_O_CREAT)) {
 80281be:	683b      	ldr	r3, [r7, #0]
 80281c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80281c4:	2b00      	cmp	r3, #0
 80281c6:	d103      	bne.n	80281d0 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 80281c8:	f06f 0301 	mvn.w	r3, #1
 80281cc:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80281ce:	e168      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 80281d0:	687b      	ldr	r3, [r7, #4]
 80281d2:	4618      	mov	r0, r3
 80281d4:	f7e8 f864 	bl	80102a0 <strlen>
 80281d8:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 80281da:	68fb      	ldr	r3, [r7, #12]
 80281dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80281de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80281e0:	429a      	cmp	r2, r3
 80281e2:	d903      	bls.n	80281ec <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80281e4:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80281e8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80281ea:	e15a      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80281ec:	68bb      	ldr	r3, [r7, #8]
 80281ee:	f103 0108 	add.w	r1, r3, #8
 80281f2:	68bb      	ldr	r3, [r7, #8]
 80281f4:	889b      	ldrh	r3, [r3, #4]
 80281f6:	029b      	lsls	r3, r3, #10
 80281f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80281fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028202:	2300      	movs	r3, #0
 8028204:	633b      	str	r3, [r7, #48]	; 0x30
 8028206:	68bb      	ldr	r3, [r7, #8]
 8028208:	889b      	ldrh	r3, [r3, #4]
 802820a:	029a      	lsls	r2, r3, #10
 802820c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802820e:	4313      	orrs	r3, r2
 8028210:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028214:	637b      	str	r3, [r7, #52]	; 0x34
 8028216:	687b      	ldr	r3, [r7, #4]
 8028218:	63bb      	str	r3, [r7, #56]	; 0x38
 802821a:	68bb      	ldr	r3, [r7, #8]
 802821c:	889b      	ldrh	r3, [r3, #4]
 802821e:	029b      	lsls	r3, r3, #10
 8028220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028228:	63fb      	str	r3, [r7, #60]	; 0x3c
 802822a:	2300      	movs	r3, #0
 802822c:	643b      	str	r3, [r7, #64]	; 0x40
 802822e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8028232:	2303      	movs	r3, #3
 8028234:	68f8      	ldr	r0, [r7, #12]
 8028236:	f7ff fadf 	bl	80277f8 <lfs_dir_commit>
 802823a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));

        // it may happen that the file name doesn't fit in the metadata blocks, e.g., a 256 byte file name will
        // not fit in a 128 byte block.
        err = (err == LFS_ERR_NOSPC) ? LFS_ERR_NAMETOOLONG : err;
 802823c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 802823e:	f113 0f1c 	cmn.w	r3, #28
 8028242:	d001      	beq.n	8028248 <lfs_file_rawopencfg+0x11c>
 8028244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028246:	e001      	b.n	802824c <lfs_file_rawopencfg+0x120>
 8028248:	f06f 0323 	mvn.w	r3, #35	; 0x23
 802824c:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (err) {
 802824e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8028250:	2b00      	cmp	r3, #0
 8028252:	f040 8125 	bne.w	80284a0 <lfs_file_rawopencfg+0x374>
            goto cleanup;
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8028256:	4b9a      	ldr	r3, [pc, #616]	; (80284c0 <lfs_file_rawopencfg+0x394>)
 8028258:	65bb      	str	r3, [r7, #88]	; 0x58
 802825a:	e044      	b.n	80282e6 <lfs_file_rawopencfg+0x1ba>
    } else if (flags & LFS_O_EXCL) {
 802825c:	683b      	ldr	r3, [r7, #0]
 802825e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8028262:	2b00      	cmp	r3, #0
 8028264:	d003      	beq.n	802826e <lfs_file_rawopencfg+0x142>
        err = LFS_ERR_EXIST;
 8028266:	f06f 0310 	mvn.w	r3, #16
 802826a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 802826c:	e119      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 802826e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028270:	4618      	mov	r0, r3
 8028272:	f7fb fff3 	bl	802425c <lfs_tag_type3>
 8028276:	4603      	mov	r3, r0
 8028278:	2b01      	cmp	r3, #1
 802827a:	d003      	beq.n	8028284 <lfs_file_rawopencfg+0x158>
        err = LFS_ERR_ISDIR;
 802827c:	f06f 0314 	mvn.w	r3, #20
 8028280:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8028282:	e10e      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8028284:	683b      	ldr	r3, [r7, #0]
 8028286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 802828a:	2b00      	cmp	r3, #0
 802828c:	d00e      	beq.n	80282ac <lfs_file_rawopencfg+0x180>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 802828e:	68bb      	ldr	r3, [r7, #8]
 8028290:	889b      	ldrh	r3, [r3, #4]
 8028292:	029b      	lsls	r3, r3, #10
 8028294:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802829c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 802829e:	68bb      	ldr	r3, [r7, #8]
 80282a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80282a6:	68bb      	ldr	r3, [r7, #8]
 80282a8:	631a      	str	r2, [r3, #48]	; 0x30
 80282aa:	e01c      	b.n	80282e6 <lfs_file_rawopencfg+0x1ba>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80282ac:	68bb      	ldr	r3, [r7, #8]
 80282ae:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80282b2:	68bb      	ldr	r3, [r7, #8]
 80282b4:	889b      	ldrh	r3, [r3, #4]
 80282b6:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80282b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80282bc:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 80282c0:	68ba      	ldr	r2, [r7, #8]
 80282c2:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80282c4:	9200      	str	r2, [sp, #0]
 80282c6:	4a7f      	ldr	r2, [pc, #508]	; (80284c4 <lfs_file_rawopencfg+0x398>)
 80282c8:	68f8      	ldr	r0, [r7, #12]
 80282ca:	f7fc fbdb 	bl	8024a84 <lfs_dir_get>
 80282ce:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 80282d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80282d2:	2b00      	cmp	r3, #0
 80282d4:	da02      	bge.n	80282dc <lfs_file_rawopencfg+0x1b0>
            err = tag;
 80282d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80282d8:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80282da:	e0e2      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
        }
        lfs_ctz_fromle32(&file->ctz);
 80282dc:	68bb      	ldr	r3, [r7, #8]
 80282de:	3328      	adds	r3, #40	; 0x28
 80282e0:	4618      	mov	r0, r3
 80282e2:	f7fc f8ed 	bl	80244c0 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80282e6:	2300      	movs	r3, #0
 80282e8:	657b      	str	r3, [r7, #84]	; 0x54
 80282ea:	e063      	b.n	80283b4 <lfs_file_rawopencfg+0x288>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 80282ec:	68bb      	ldr	r3, [r7, #8]
 80282ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80282f0:	f003 0301 	and.w	r3, r3, #1
 80282f4:	2b00      	cmp	r3, #0
 80282f6:	d03c      	beq.n	8028372 <lfs_file_rawopencfg+0x246>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80282f8:	68bb      	ldr	r3, [r7, #8]
 80282fa:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80282fe:	68bb      	ldr	r3, [r7, #8]
 8028300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028302:	6859      	ldr	r1, [r3, #4]
 8028304:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028306:	4613      	mov	r3, r2
 8028308:	005b      	lsls	r3, r3, #1
 802830a:	4413      	add	r3, r2
 802830c:	009b      	lsls	r3, r3, #2
 802830e:	440b      	add	r3, r1
 8028310:	781b      	ldrb	r3, [r3, #0]
 8028312:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8028316:	051a      	lsls	r2, r3, #20
 8028318:	68bb      	ldr	r3, [r7, #8]
 802831a:	889b      	ldrh	r3, [r3, #4]
 802831c:	029b      	lsls	r3, r3, #10
 802831e:	ea42 0103 	orr.w	r1, r2, r3
 8028322:	68bb      	ldr	r3, [r7, #8]
 8028324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028326:	6858      	ldr	r0, [r3, #4]
 8028328:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802832a:	4613      	mov	r3, r2
 802832c:	005b      	lsls	r3, r3, #1
 802832e:	4413      	add	r3, r2
 8028330:	009b      	lsls	r3, r3, #2
 8028332:	4403      	add	r3, r0
 8028334:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028336:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 802833a:	68bb      	ldr	r3, [r7, #8]
 802833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802833e:	6859      	ldr	r1, [r3, #4]
 8028340:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028342:	4613      	mov	r3, r2
 8028344:	005b      	lsls	r3, r3, #1
 8028346:	4413      	add	r3, r2
 8028348:	009b      	lsls	r3, r3, #2
 802834a:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802834c:	685b      	ldr	r3, [r3, #4]
 802834e:	9300      	str	r3, [sp, #0]
 8028350:	4603      	mov	r3, r0
 8028352:	4a5d      	ldr	r2, [pc, #372]	; (80284c8 <lfs_file_rawopencfg+0x39c>)
 8028354:	4621      	mov	r1, r4
 8028356:	68f8      	ldr	r0, [r7, #12]
 8028358:	f7fc fb94 	bl	8024a84 <lfs_dir_get>
 802835c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 802835e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028360:	2b00      	cmp	r3, #0
 8028362:	da06      	bge.n	8028372 <lfs_file_rawopencfg+0x246>
 8028364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8028366:	f113 0f02 	cmn.w	r3, #2
 802836a:	d002      	beq.n	8028372 <lfs_file_rawopencfg+0x246>
                err = res;
 802836c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802836e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8028370:	e097      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8028372:	68bb      	ldr	r3, [r7, #8]
 8028374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028376:	f003 0302 	and.w	r3, r3, #2
 802837a:	2b00      	cmp	r3, #0
 802837c:	d017      	beq.n	80283ae <lfs_file_rawopencfg+0x282>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 802837e:	68bb      	ldr	r3, [r7, #8]
 8028380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028382:	6859      	ldr	r1, [r3, #4]
 8028384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8028386:	4613      	mov	r3, r2
 8028388:	005b      	lsls	r3, r3, #1
 802838a:	4413      	add	r3, r2
 802838c:	009b      	lsls	r3, r3, #2
 802838e:	440b      	add	r3, r1
 8028390:	689a      	ldr	r2, [r3, #8]
 8028392:	68fb      	ldr	r3, [r7, #12]
 8028394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8028396:	429a      	cmp	r2, r3
 8028398:	d903      	bls.n	80283a2 <lfs_file_rawopencfg+0x276>
                err = LFS_ERR_NOSPC;
 802839a:	f06f 031b 	mvn.w	r3, #27
 802839e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 80283a0:	e07f      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
            }

            file->flags |= LFS_F_DIRTY;
 80283a2:	68bb      	ldr	r3, [r7, #8]
 80283a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80283a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80283aa:	68bb      	ldr	r3, [r7, #8]
 80283ac:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 80283ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80283b0:	3301      	adds	r3, #1
 80283b2:	657b      	str	r3, [r7, #84]	; 0x54
 80283b4:	68bb      	ldr	r3, [r7, #8]
 80283b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80283b8:	689b      	ldr	r3, [r3, #8]
 80283ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80283bc:	429a      	cmp	r2, r3
 80283be:	d395      	bcc.n	80282ec <lfs_file_rawopencfg+0x1c0>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 80283c0:	68bb      	ldr	r3, [r7, #8]
 80283c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80283c4:	681b      	ldr	r3, [r3, #0]
 80283c6:	2b00      	cmp	r3, #0
 80283c8:	d005      	beq.n	80283d6 <lfs_file_rawopencfg+0x2aa>
        file->cache.buffer = file->cfg->buffer;
 80283ca:	68bb      	ldr	r3, [r7, #8]
 80283cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80283ce:	681a      	ldr	r2, [r3, #0]
 80283d0:	68bb      	ldr	r3, [r7, #8]
 80283d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80283d4:	e010      	b.n	80283f8 <lfs_file_rawopencfg+0x2cc>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80283d6:	68fb      	ldr	r3, [r7, #12]
 80283d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80283da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80283dc:	4618      	mov	r0, r3
 80283de:	f7fb faf0 	bl	80239c2 <lfs_malloc>
 80283e2:	4602      	mov	r2, r0
 80283e4:	68bb      	ldr	r3, [r7, #8]
 80283e6:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 80283e8:	68bb      	ldr	r3, [r7, #8]
 80283ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80283ec:	2b00      	cmp	r3, #0
 80283ee:	d103      	bne.n	80283f8 <lfs_file_rawopencfg+0x2cc>
            err = LFS_ERR_NOMEM;
 80283f0:	f06f 030b 	mvn.w	r3, #11
 80283f4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80283f6:	e054      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80283f8:	68bb      	ldr	r3, [r7, #8]
 80283fa:	3340      	adds	r3, #64	; 0x40
 80283fc:	4619      	mov	r1, r3
 80283fe:	68f8      	ldr	r0, [r7, #12]
 8028400:	f7fb fb05 	bl	8023a0e <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 8028404:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028406:	4618      	mov	r0, r3
 8028408:	f7fb ff28 	bl	802425c <lfs_tag_type3>
 802840c:	4603      	mov	r3, r0
 802840e:	461a      	mov	r2, r3
 8028410:	f240 2301 	movw	r3, #513	; 0x201
 8028414:	429a      	cmp	r2, r3
 8028416:	d141      	bne.n	802849c <lfs_file_rawopencfg+0x370>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 8028418:	68bb      	ldr	r3, [r7, #8]
 802841a:	f06f 0201 	mvn.w	r2, #1
 802841e:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 8028420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8028422:	4618      	mov	r0, r3
 8028424:	f7fb ff54 	bl	80242d0 <lfs_tag_size>
 8028428:	4602      	mov	r2, r0
 802842a:	68bb      	ldr	r3, [r7, #8]
 802842c:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 802842e:	68bb      	ldr	r3, [r7, #8]
 8028430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028432:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8028436:	68bb      	ldr	r3, [r7, #8]
 8028438:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 802843a:	68bb      	ldr	r3, [r7, #8]
 802843c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802843e:	68bb      	ldr	r3, [r7, #8]
 8028440:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 8028442:	68bb      	ldr	r3, [r7, #8]
 8028444:	2200      	movs	r2, #0
 8028446:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 8028448:	68fb      	ldr	r3, [r7, #12]
 802844a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802844c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802844e:	68bb      	ldr	r3, [r7, #8]
 8028450:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8028452:	68bb      	ldr	r3, [r7, #8]
 8028454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028456:	2b00      	cmp	r3, #0
 8028458:	d020      	beq.n	802849c <lfs_file_rawopencfg+0x370>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 802845a:	68bb      	ldr	r3, [r7, #8]
 802845c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8028460:	68bb      	ldr	r3, [r7, #8]
 8028462:	889b      	ldrh	r3, [r3, #4]
 8028464:	029c      	lsls	r4, r3, #10
 8028466:	68bb      	ldr	r3, [r7, #8]
 8028468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 802846a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 802846e:	4618      	mov	r0, r3
 8028470:	f7fb fa08 	bl	8023884 <lfs_min>
 8028474:	4603      	mov	r3, r0
 8028476:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028478:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 802847c:	68bb      	ldr	r3, [r7, #8]
 802847e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8028480:	9300      	str	r3, [sp, #0]
 8028482:	4613      	mov	r3, r2
 8028484:	4a0f      	ldr	r2, [pc, #60]	; (80284c4 <lfs_file_rawopencfg+0x398>)
 8028486:	4629      	mov	r1, r5
 8028488:	68f8      	ldr	r0, [r7, #12]
 802848a:	f7fc fafb 	bl	8024a84 <lfs_dir_get>
 802848e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8028490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028492:	2b00      	cmp	r3, #0
 8028494:	da02      	bge.n	802849c <lfs_file_rawopencfg+0x370>
                err = res;
 8028496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8028498:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 802849a:	e002      	b.n	80284a2 <lfs_file_rawopencfg+0x376>
            }
        }
    }

    return 0;
 802849c:	2300      	movs	r3, #0
 802849e:	e00b      	b.n	80284b8 <lfs_file_rawopencfg+0x38c>
            goto cleanup;
 80284a0:	bf00      	nop

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 80284a2:	68bb      	ldr	r3, [r7, #8]
 80284a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80284a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80284aa:	68bb      	ldr	r3, [r7, #8]
 80284ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 80284ae:	68b9      	ldr	r1, [r7, #8]
 80284b0:	68f8      	ldr	r0, [r7, #12]
 80284b2:	f000 f80b 	bl	80284cc <lfs_file_rawclose>
    return err;
 80284b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80284b8:	4618      	mov	r0, r3
 80284ba:	3760      	adds	r7, #96	; 0x60
 80284bc:	46bd      	mov	sp, r7
 80284be:	bdb0      	pop	{r4, r5, r7, pc}
 80284c0:	20100000 	.word	0x20100000
 80284c4:	700ffc00 	.word	0x700ffc00
 80284c8:	7ffffc00 	.word	0x7ffffc00

080284cc <lfs_file_rawclose>:
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
    return err;
}
#endif

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 80284cc:	b580      	push	{r7, lr}
 80284ce:	b084      	sub	sp, #16
 80284d0:	af00      	add	r7, sp, #0
 80284d2:	6078      	str	r0, [r7, #4]
 80284d4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 80284d6:	6839      	ldr	r1, [r7, #0]
 80284d8:	6878      	ldr	r0, [r7, #4]
 80284da:	f000 f9e5 	bl	80288a8 <lfs_file_rawsync>
 80284de:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 80284e0:	6839      	ldr	r1, [r7, #0]
 80284e2:	6878      	ldr	r0, [r7, #4]
 80284e4:	f7fc f8a9 	bl	802463a <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 80284e8:	683b      	ldr	r3, [r7, #0]
 80284ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80284ec:	681b      	ldr	r3, [r3, #0]
 80284ee:	2b00      	cmp	r3, #0
 80284f0:	d104      	bne.n	80284fc <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 80284f2:	683b      	ldr	r3, [r7, #0]
 80284f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80284f6:	4618      	mov	r0, r3
 80284f8:	f7fb fa6f 	bl	80239da <lfs_free>
    }

    return err;
 80284fc:	68fb      	ldr	r3, [r7, #12]
}
 80284fe:	4618      	mov	r0, r3
 8028500:	3710      	adds	r7, #16
 8028502:	46bd      	mov	sp, r7
 8028504:	bd80      	pop	{r7, pc}
	...

08028508 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8028508:	b590      	push	{r4, r7, lr}
 802850a:	b08d      	sub	sp, #52	; 0x34
 802850c:	af06      	add	r7, sp, #24
 802850e:	6078      	str	r0, [r7, #4]
 8028510:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8028512:	f107 030c 	add.w	r3, r7, #12
 8028516:	4619      	mov	r1, r3
 8028518:	6878      	ldr	r0, [r7, #4]
 802851a:	f7fc f919 	bl	8024750 <lfs_alloc>
 802851e:	6138      	str	r0, [r7, #16]
        if (err) {
 8028520:	693b      	ldr	r3, [r7, #16]
 8028522:	2b00      	cmp	r3, #0
 8028524:	d001      	beq.n	802852a <lfs_file_relocate+0x22>
            return err;
 8028526:	693b      	ldr	r3, [r7, #16]
 8028528:	e0bb      	b.n	80286a2 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 802852a:	68fb      	ldr	r3, [r7, #12]
 802852c:	4619      	mov	r1, r3
 802852e:	6878      	ldr	r0, [r7, #4]
 8028530:	f7fb fd76 	bl	8024020 <lfs_bd_erase>
 8028534:	6138      	str	r0, [r7, #16]
        if (err) {
 8028536:	693b      	ldr	r3, [r7, #16]
 8028538:	2b00      	cmp	r3, #0
 802853a:	d006      	beq.n	802854a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 802853c:	693b      	ldr	r3, [r7, #16]
 802853e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028542:	f000 809b 	beq.w	802867c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8028546:	693b      	ldr	r3, [r7, #16]
 8028548:	e0ab      	b.n	80286a2 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 802854a:	2300      	movs	r3, #0
 802854c:	617b      	str	r3, [r7, #20]
 802854e:	e069      	b.n	8028624 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8028550:	683b      	ldr	r3, [r7, #0]
 8028552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028558:	2b00      	cmp	r3, #0
 802855a:	d027      	beq.n	80285ac <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 802855c:	683b      	ldr	r3, [r7, #0]
 802855e:	f103 0008 	add.w	r0, r3, #8
 8028562:	683b      	ldr	r3, [r7, #0]
 8028564:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8028568:	683b      	ldr	r3, [r7, #0]
 802856a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 802856c:	697b      	ldr	r3, [r7, #20]
 802856e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028570:	683b      	ldr	r3, [r7, #0]
 8028572:	889b      	ldrh	r3, [r3, #4]
 8028574:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8028576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802857a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802857e:	2101      	movs	r1, #1
 8028580:	9105      	str	r1, [sp, #20]
 8028582:	f107 010b 	add.w	r1, r7, #11
 8028586:	9104      	str	r1, [sp, #16]
 8028588:	6979      	ldr	r1, [r7, #20]
 802858a:	9103      	str	r1, [sp, #12]
 802858c:	9302      	str	r3, [sp, #8]
 802858e:	4b47      	ldr	r3, [pc, #284]	; (80286ac <lfs_file_relocate+0x1a4>)
 8028590:	9301      	str	r3, [sp, #4]
 8028592:	9200      	str	r2, [sp, #0]
 8028594:	4623      	mov	r3, r4
 8028596:	2200      	movs	r2, #0
 8028598:	4601      	mov	r1, r0
 802859a:	6878      	ldr	r0, [r7, #4]
 802859c:	f7fc fa8d 	bl	8024aba <lfs_dir_getread>
 80285a0:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 80285a2:	693b      	ldr	r3, [r7, #16]
 80285a4:	2b00      	cmp	r3, #0
 80285a6:	d01e      	beq.n	80285e6 <lfs_file_relocate+0xde>
                    return err;
 80285a8:	693b      	ldr	r3, [r7, #16]
 80285aa:	e07a      	b.n	80286a2 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 80285ac:	683b      	ldr	r3, [r7, #0]
 80285ae:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 80285b2:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 80285b4:	683b      	ldr	r3, [r7, #0]
 80285b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 80285b8:	697b      	ldr	r3, [r7, #20]
 80285ba:	1ad4      	subs	r4, r2, r3
 80285bc:	683b      	ldr	r3, [r7, #0]
 80285be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80285c0:	2201      	movs	r2, #1
 80285c2:	9203      	str	r2, [sp, #12]
 80285c4:	f107 020b 	add.w	r2, r7, #11
 80285c8:	9202      	str	r2, [sp, #8]
 80285ca:	697a      	ldr	r2, [r7, #20]
 80285cc:	9201      	str	r2, [sp, #4]
 80285ce:	9300      	str	r3, [sp, #0]
 80285d0:	4623      	mov	r3, r4
 80285d2:	4602      	mov	r2, r0
 80285d4:	6878      	ldr	r0, [r7, #4]
 80285d6:	f7fb fa31 	bl	8023a3c <lfs_bd_read>
 80285da:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 80285dc:	693b      	ldr	r3, [r7, #16]
 80285de:	2b00      	cmp	r3, #0
 80285e0:	d001      	beq.n	80285e6 <lfs_file_relocate+0xde>
                    return err;
 80285e2:	693b      	ldr	r3, [r7, #16]
 80285e4:	e05d      	b.n	80286a2 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 80285e6:	687b      	ldr	r3, [r7, #4]
 80285e8:	f103 0110 	add.w	r1, r3, #16
 80285ec:	6878      	ldr	r0, [r7, #4]
 80285ee:	68fb      	ldr	r3, [r7, #12]
 80285f0:	2201      	movs	r2, #1
 80285f2:	9203      	str	r2, [sp, #12]
 80285f4:	f107 020b 	add.w	r2, r7, #11
 80285f8:	9202      	str	r2, [sp, #8]
 80285fa:	697a      	ldr	r2, [r7, #20]
 80285fc:	9201      	str	r2, [sp, #4]
 80285fe:	9300      	str	r3, [sp, #0]
 8028600:	2301      	movs	r3, #1
 8028602:	4602      	mov	r2, r0
 8028604:	6878      	ldr	r0, [r7, #4]
 8028606:	f7fb fc5f 	bl	8023ec8 <lfs_bd_prog>
 802860a:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 802860c:	693b      	ldr	r3, [r7, #16]
 802860e:	2b00      	cmp	r3, #0
 8028610:	d005      	beq.n	802861e <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8028612:	693b      	ldr	r3, [r7, #16]
 8028614:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028618:	d032      	beq.n	8028680 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 802861a:	693b      	ldr	r3, [r7, #16]
 802861c:	e041      	b.n	80286a2 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 802861e:	697b      	ldr	r3, [r7, #20]
 8028620:	3301      	adds	r3, #1
 8028622:	617b      	str	r3, [r7, #20]
 8028624:	683b      	ldr	r3, [r7, #0]
 8028626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028628:	697a      	ldr	r2, [r7, #20]
 802862a:	429a      	cmp	r2, r3
 802862c:	d390      	bcc.n	8028550 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 802862e:	683b      	ldr	r3, [r7, #0]
 8028630:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8028632:	687b      	ldr	r3, [r7, #4]
 8028634:	69d9      	ldr	r1, [r3, #28]
 8028636:	687b      	ldr	r3, [r7, #4]
 8028638:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802863c:	461a      	mov	r2, r3
 802863e:	f005 fc0a 	bl	802de56 <memcpy>
        file->cache.block = lfs->pcache.block;
 8028642:	687b      	ldr	r3, [r7, #4]
 8028644:	691a      	ldr	r2, [r3, #16]
 8028646:	683b      	ldr	r3, [r7, #0]
 8028648:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 802864a:	687b      	ldr	r3, [r7, #4]
 802864c:	695a      	ldr	r2, [r3, #20]
 802864e:	683b      	ldr	r3, [r7, #0]
 8028650:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8028652:	687b      	ldr	r3, [r7, #4]
 8028654:	699a      	ldr	r2, [r3, #24]
 8028656:	683b      	ldr	r3, [r7, #0]
 8028658:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 802865a:	687b      	ldr	r3, [r7, #4]
 802865c:	3310      	adds	r3, #16
 802865e:	4619      	mov	r1, r3
 8028660:	6878      	ldr	r0, [r7, #4]
 8028662:	f7fb f9d4 	bl	8023a0e <lfs_cache_zero>

        file->block = nblock;
 8028666:	68fa      	ldr	r2, [r7, #12]
 8028668:	683b      	ldr	r3, [r7, #0]
 802866a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 802866c:	683b      	ldr	r3, [r7, #0]
 802866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028670:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028674:	683b      	ldr	r3, [r7, #0]
 8028676:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8028678:	2300      	movs	r3, #0
 802867a:	e012      	b.n	80286a2 <lfs_file_relocate+0x19a>
                goto relocate;
 802867c:	bf00      	nop
 802867e:	e000      	b.n	8028682 <lfs_file_relocate+0x17a>
                    goto relocate;
 8028680:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8028682:	68fb      	ldr	r3, [r7, #12]
 8028684:	4a0a      	ldr	r2, [pc, #40]	; (80286b0 <lfs_file_relocate+0x1a8>)
 8028686:	9200      	str	r2, [sp, #0]
 8028688:	f44f 6241 	mov.w	r2, #3088	; 0xc10
 802868c:	4909      	ldr	r1, [pc, #36]	; (80286b4 <lfs_file_relocate+0x1ac>)
 802868e:	480a      	ldr	r0, [pc, #40]	; (80286b8 <lfs_file_relocate+0x1b0>)
 8028690:	f005 f876 	bl	802d780 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8028694:	687b      	ldr	r3, [r7, #4]
 8028696:	3310      	adds	r3, #16
 8028698:	4619      	mov	r1, r3
 802869a:	6878      	ldr	r0, [r7, #4]
 802869c:	f7fb f9a8 	bl	80239f0 <lfs_cache_drop>
    while (true) {
 80286a0:	e737      	b.n	8028512 <lfs_file_relocate+0xa>
    }
}
 80286a2:	4618      	mov	r0, r3
 80286a4:	371c      	adds	r7, #28
 80286a6:	46bd      	mov	sp, r7
 80286a8:	bd90      	pop	{r4, r7, pc}
 80286aa:	bf00      	nop
 80286ac:	fff7fc00 	.word	0xfff7fc00
 80286b0:	08033914 	.word	0x08033914
 80286b4:	08033800 	.word	0x08033800
 80286b8:	08033994 	.word	0x08033994

080286bc <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 80286bc:	b580      	push	{r7, lr}
 80286be:	b084      	sub	sp, #16
 80286c0:	af00      	add	r7, sp, #0
 80286c2:	6078      	str	r0, [r7, #4]
 80286c4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 80286c6:	683b      	ldr	r3, [r7, #0]
 80286c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80286ca:	683b      	ldr	r3, [r7, #0]
 80286cc:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 80286ce:	6878      	ldr	r0, [r7, #4]
 80286d0:	f7fc f81e 	bl	8024710 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 80286d4:	6839      	ldr	r1, [r7, #0]
 80286d6:	6878      	ldr	r0, [r7, #4]
 80286d8:	f7ff ff16 	bl	8028508 <lfs_file_relocate>
 80286dc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80286de:	68fb      	ldr	r3, [r7, #12]
 80286e0:	2b00      	cmp	r3, #0
 80286e2:	d001      	beq.n	80286e8 <lfs_file_outline+0x2c>
        return err;
 80286e4:	68fb      	ldr	r3, [r7, #12]
 80286e6:	e006      	b.n	80286f6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 80286e8:	683b      	ldr	r3, [r7, #0]
 80286ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80286ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80286f0:	683b      	ldr	r3, [r7, #0]
 80286f2:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 80286f4:	2300      	movs	r3, #0
}
 80286f6:	4618      	mov	r0, r3
 80286f8:	3710      	adds	r7, #16
 80286fa:	46bd      	mov	sp, r7
 80286fc:	bd80      	pop	{r7, pc}
	...

08028700 <lfs_file_flush>:
#endif

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8028700:	b590      	push	{r4, r7, lr}
 8028702:	b09f      	sub	sp, #124	; 0x7c
 8028704:	af02      	add	r7, sp, #8
 8028706:	6078      	str	r0, [r7, #4]
 8028708:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 802870a:	683b      	ldr	r3, [r7, #0]
 802870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802870e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028712:	2b00      	cmp	r3, #0
 8028714:	d011      	beq.n	802873a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8028716:	683b      	ldr	r3, [r7, #0]
 8028718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802871a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802871e:	2b00      	cmp	r3, #0
 8028720:	d105      	bne.n	802872e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8028722:	683b      	ldr	r3, [r7, #0]
 8028724:	3340      	adds	r3, #64	; 0x40
 8028726:	4619      	mov	r1, r3
 8028728:	6878      	ldr	r0, [r7, #4]
 802872a:	f7fb f961 	bl	80239f0 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 802872e:	683b      	ldr	r3, [r7, #0]
 8028730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028732:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8028736:	683b      	ldr	r3, [r7, #0]
 8028738:	631a      	str	r2, [r3, #48]	; 0x30
    }

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 802873a:	683b      	ldr	r3, [r7, #0]
 802873c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802873e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028742:	2b00      	cmp	r3, #0
 8028744:	f000 80a4 	beq.w	8028890 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8028748:	683b      	ldr	r3, [r7, #0]
 802874a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802874c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 802874e:	683b      	ldr	r3, [r7, #0]
 8028750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028752:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028756:	2b00      	cmp	r3, #0
 8028758:	d176      	bne.n	8028848 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 802875a:	f107 030c 	add.w	r3, r7, #12
 802875e:	2254      	movs	r2, #84	; 0x54
 8028760:	2100      	movs	r1, #0
 8028762:	4618      	mov	r0, r3
 8028764:	f005 f9a2 	bl	802daac <memset>
                .ctz.head = file->ctz.head,
 8028768:	683b      	ldr	r3, [r7, #0]
 802876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 802876c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 802876e:	683b      	ldr	r3, [r7, #0]
 8028770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8028772:	63bb      	str	r3, [r7, #56]	; 0x38
 8028774:	2301      	movs	r3, #1
 8028776:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8028778:	683b      	ldr	r3, [r7, #0]
 802877a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 802877c:	643b      	str	r3, [r7, #64]	; 0x40
 802877e:	687b      	ldr	r3, [r7, #4]
 8028780:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8028784:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8028786:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 802878a:	687b      	ldr	r3, [r7, #4]
 802878c:	4619      	mov	r1, r3
 802878e:	6878      	ldr	r0, [r7, #4]
 8028790:	f7fb f92e 	bl	80239f0 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8028794:	e02b      	b.n	80287ee <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_flushedread(lfs, &orig, &data, 1);
 8028796:	f107 0263 	add.w	r2, r7, #99	; 0x63
 802879a:	f107 010c 	add.w	r1, r7, #12
 802879e:	2301      	movs	r3, #1
 80287a0:	6878      	ldr	r0, [r7, #4]
 80287a2:	f000 f90d 	bl	80289c0 <lfs_file_flushedread>
 80287a6:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80287a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80287aa:	2b00      	cmp	r3, #0
 80287ac:	da01      	bge.n	80287b2 <lfs_file_flush+0xb2>
                    return res;
 80287ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80287b0:	e06f      	b.n	8028892 <lfs_file_flush+0x192>
                }

                res = lfs_file_flushedwrite(lfs, file, &data, 1);
 80287b2:	f107 0263 	add.w	r2, r7, #99	; 0x63
 80287b6:	2301      	movs	r3, #1
 80287b8:	6839      	ldr	r1, [r7, #0]
 80287ba:	6878      	ldr	r0, [r7, #4]
 80287bc:	f000 fa08 	bl	8028bd0 <lfs_file_flushedwrite>
 80287c0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 80287c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80287c4:	2b00      	cmp	r3, #0
 80287c6:	da01      	bge.n	80287cc <lfs_file_flush+0xcc>
                    return res;
 80287c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80287ca:	e062      	b.n	8028892 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 80287cc:	687b      	ldr	r3, [r7, #4]
 80287ce:	681b      	ldr	r3, [r3, #0]
 80287d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80287d4:	d00b      	beq.n	80287ee <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 80287d6:	f107 030c 	add.w	r3, r7, #12
 80287da:	3340      	adds	r3, #64	; 0x40
 80287dc:	4619      	mov	r1, r3
 80287de:	6878      	ldr	r0, [r7, #4]
 80287e0:	f7fb f906 	bl	80239f0 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 80287e4:	687b      	ldr	r3, [r7, #4]
 80287e6:	4619      	mov	r1, r3
 80287e8:	6878      	ldr	r0, [r7, #4]
 80287ea:	f7fb f901 	bl	80239f0 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 80287ee:	683b      	ldr	r3, [r7, #0]
 80287f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80287f2:	683b      	ldr	r3, [r7, #0]
 80287f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80287f6:	429a      	cmp	r2, r3
 80287f8:	d3cd      	bcc.n	8028796 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80287fa:	683b      	ldr	r3, [r7, #0]
 80287fc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8028800:	687a      	ldr	r2, [r7, #4]
 8028802:	2301      	movs	r3, #1
 8028804:	6878      	ldr	r0, [r7, #4]
 8028806:	f7fb faaf 	bl	8023d68 <lfs_bd_flush>
 802880a:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802880c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802880e:	2b00      	cmp	r3, #0
 8028810:	d026      	beq.n	8028860 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8028812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028814:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028818:	d001      	beq.n	802881e <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 802881a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 802881c:	e039      	b.n	8028892 <lfs_file_flush+0x192>
                        goto relocate;
 802881e:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8028820:	683b      	ldr	r3, [r7, #0]
 8028822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028824:	4a1d      	ldr	r2, [pc, #116]	; (802889c <lfs_file_flush+0x19c>)
 8028826:	9200      	str	r2, [sp, #0]
 8028828:	f640 425f 	movw	r2, #3167	; 0xc5f
 802882c:	491c      	ldr	r1, [pc, #112]	; (80288a0 <lfs_file_flush+0x1a0>)
 802882e:	481d      	ldr	r0, [pc, #116]	; (80288a4 <lfs_file_flush+0x1a4>)
 8028830:	f004 ffa6 	bl	802d780 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8028834:	6839      	ldr	r1, [r7, #0]
 8028836:	6878      	ldr	r0, [r7, #4]
 8028838:	f7ff fe66 	bl	8028508 <lfs_file_relocate>
 802883c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 802883e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028840:	2b00      	cmp	r3, #0
 8028842:	d0da      	beq.n	80287fa <lfs_file_flush+0xfa>
                    return err;
 8028844:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8028846:	e024      	b.n	8028892 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8028848:	683b      	ldr	r3, [r7, #0]
 802884a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802884c:	683b      	ldr	r3, [r7, #0]
 802884e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028850:	4619      	mov	r1, r3
 8028852:	4610      	mov	r0, r2
 8028854:	f7fb f806 	bl	8023864 <lfs_max>
 8028858:	4602      	mov	r2, r0
 802885a:	683b      	ldr	r3, [r7, #0]
 802885c:	635a      	str	r2, [r3, #52]	; 0x34
 802885e:	e000      	b.n	8028862 <lfs_file_flush+0x162>
                break;
 8028860:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8028862:	683b      	ldr	r3, [r7, #0]
 8028864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8028866:	683b      	ldr	r3, [r7, #0]
 8028868:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 802886a:	683b      	ldr	r3, [r7, #0]
 802886c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 802886e:	683b      	ldr	r3, [r7, #0]
 8028870:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8028872:	683b      	ldr	r3, [r7, #0]
 8028874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028876:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 802887a:	683b      	ldr	r3, [r7, #0]
 802887c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 802887e:	683b      	ldr	r3, [r7, #0]
 8028880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8028886:	683b      	ldr	r3, [r7, #0]
 8028888:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 802888a:	683b      	ldr	r3, [r7, #0]
 802888c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 802888e:	635a      	str	r2, [r3, #52]	; 0x34
    }
#endif

    return 0;
 8028890:	2300      	movs	r3, #0
}
 8028892:	4618      	mov	r0, r3
 8028894:	3774      	adds	r7, #116	; 0x74
 8028896:	46bd      	mov	sp, r7
 8028898:	bd90      	pop	{r4, r7, pc}
 802889a:	bf00      	nop
 802889c:	08033914 	.word	0x08033914
 80288a0:	08033800 	.word	0x08033800
 80288a4:	08033994 	.word	0x08033994

080288a8 <lfs_file_rawsync>:

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 80288a8:	b580      	push	{r7, lr}
 80288aa:	b090      	sub	sp, #64	; 0x40
 80288ac:	af00      	add	r7, sp, #0
 80288ae:	6078      	str	r0, [r7, #4]
 80288b0:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 80288b2:	683b      	ldr	r3, [r7, #0]
 80288b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80288ba:	2b00      	cmp	r3, #0
 80288bc:	d001      	beq.n	80288c2 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 80288be:	2300      	movs	r3, #0
 80288c0:	e07a      	b.n	80289b8 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 80288c2:	6839      	ldr	r1, [r7, #0]
 80288c4:	6878      	ldr	r0, [r7, #4]
 80288c6:	f7ff ff1b 	bl	8028700 <lfs_file_flush>
 80288ca:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 80288cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288ce:	2b00      	cmp	r3, #0
 80288d0:	d007      	beq.n	80288e2 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 80288d2:	683b      	ldr	r3, [r7, #0]
 80288d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80288da:	683b      	ldr	r3, [r7, #0]
 80288dc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 80288de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80288e0:	e06a      	b.n	80289b8 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 80288e2:	683b      	ldr	r3, [r7, #0]
 80288e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80288e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80288ea:	2b00      	cmp	r3, #0
 80288ec:	d063      	beq.n	80289b6 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 80288ee:	683b      	ldr	r3, [r7, #0]
 80288f0:	3308      	adds	r3, #8
 80288f2:	4618      	mov	r0, r3
 80288f4:	f7fb fbdb 	bl	80240ae <lfs_pair_isnull>
 80288f8:	4603      	mov	r3, r0
 80288fa:	f083 0301 	eor.w	r3, r3, #1
 80288fe:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8028900:	2b00      	cmp	r3, #0
 8028902:	d058      	beq.n	80289b6 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8028904:	683b      	ldr	r3, [r7, #0]
 8028906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802890c:	2b00      	cmp	r3, #0
 802890e:	d009      	beq.n	8028924 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8028910:	f240 2301 	movw	r3, #513	; 0x201
 8028914:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8028916:	683b      	ldr	r3, [r7, #0]
 8028918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 802891a:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 802891c:	683b      	ldr	r3, [r7, #0]
 802891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028920:	637b      	str	r3, [r7, #52]	; 0x34
 8028922:	e014      	b.n	802894e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8028924:	f240 2302 	movw	r3, #514	; 0x202
 8028928:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 802892a:	683a      	ldr	r2, [r7, #0]
 802892c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028930:	3228      	adds	r2, #40	; 0x28
 8028932:	e892 0003 	ldmia.w	r2, {r0, r1}
 8028936:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 802893a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 802893e:	4618      	mov	r0, r3
 8028940:	f7fb fdd6 	bl	80244f0 <lfs_ctz_tole32>
            buffer = &ctz;
 8028944:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8028948:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 802894a:	2308      	movs	r3, #8
 802894c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 802894e:	683b      	ldr	r3, [r7, #0]
 8028950:	f103 0108 	add.w	r1, r3, #8
 8028954:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8028956:	051a      	lsls	r2, r3, #20
 8028958:	683b      	ldr	r3, [r7, #0]
 802895a:	889b      	ldrh	r3, [r3, #4]
 802895c:	029b      	lsls	r3, r3, #10
 802895e:	431a      	orrs	r2, r3
 8028960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8028962:	4313      	orrs	r3, r2
 8028964:	61bb      	str	r3, [r7, #24]
 8028966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8028968:	61fb      	str	r3, [r7, #28]
 802896a:	683b      	ldr	r3, [r7, #0]
 802896c:	889b      	ldrh	r3, [r3, #4]
 802896e:	029a      	lsls	r2, r3, #10
 8028970:	683b      	ldr	r3, [r7, #0]
 8028972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028974:	689b      	ldr	r3, [r3, #8]
 8028976:	4313      	orrs	r3, r2
 8028978:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 802897c:	623b      	str	r3, [r7, #32]
 802897e:	683b      	ldr	r3, [r7, #0]
 8028980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8028982:	685b      	ldr	r3, [r3, #4]
 8028984:	627b      	str	r3, [r7, #36]	; 0x24
 8028986:	f107 0218 	add.w	r2, r7, #24
 802898a:	2302      	movs	r3, #2
 802898c:	6878      	ldr	r0, [r7, #4]
 802898e:	f7fe ff33 	bl	80277f8 <lfs_dir_commit>
 8028992:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8028994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8028996:	2b00      	cmp	r3, #0
 8028998:	d007      	beq.n	80289aa <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 802899a:	683b      	ldr	r3, [r7, #0]
 802899c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802899e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80289a2:	683b      	ldr	r3, [r7, #0]
 80289a4:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80289a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80289a8:	e006      	b.n	80289b8 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 80289aa:	683b      	ldr	r3, [r7, #0]
 80289ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80289ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80289b2:	683b      	ldr	r3, [r7, #0]
 80289b4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 80289b6:	2300      	movs	r3, #0
}
 80289b8:	4618      	mov	r0, r3
 80289ba:	3740      	adds	r7, #64	; 0x40
 80289bc:	46bd      	mov	sp, r7
 80289be:	bd80      	pop	{r7, pc}

080289c0 <lfs_file_flushedread>:
#endif

static lfs_ssize_t lfs_file_flushedread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 80289c0:	b5b0      	push	{r4, r5, r7, lr}
 80289c2:	b090      	sub	sp, #64	; 0x40
 80289c4:	af06      	add	r7, sp, #24
 80289c6:	60f8      	str	r0, [r7, #12]
 80289c8:	60b9      	str	r1, [r7, #8]
 80289ca:	607a      	str	r2, [r7, #4]
 80289cc:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80289ce:	687b      	ldr	r3, [r7, #4]
 80289d0:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_size_t nsize = size;
 80289d2:	683b      	ldr	r3, [r7, #0]
 80289d4:	623b      	str	r3, [r7, #32]

    if (file->pos >= file->ctz.size) {
 80289d6:	68bb      	ldr	r3, [r7, #8]
 80289d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80289da:	68bb      	ldr	r3, [r7, #8]
 80289dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80289de:	429a      	cmp	r2, r3
 80289e0:	d301      	bcc.n	80289e6 <lfs_file_flushedread+0x26>
        // eof if past end
        return 0;
 80289e2:	2300      	movs	r3, #0
 80289e4:	e0b7      	b.n	8028b56 <lfs_file_flushedread+0x196>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 80289e6:	68bb      	ldr	r3, [r7, #8]
 80289e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80289ea:	68bb      	ldr	r3, [r7, #8]
 80289ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80289ee:	1ad3      	subs	r3, r2, r3
 80289f0:	4619      	mov	r1, r3
 80289f2:	6838      	ldr	r0, [r7, #0]
 80289f4:	f7fa ff46 	bl	8023884 <lfs_min>
 80289f8:	6038      	str	r0, [r7, #0]
    nsize = size;
 80289fa:	683b      	ldr	r3, [r7, #0]
 80289fc:	623b      	str	r3, [r7, #32]

    while (nsize > 0) {
 80289fe:	e0a5      	b.n	8028b4c <lfs_file_flushedread+0x18c>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 8028a00:	68bb      	ldr	r3, [r7, #8]
 8028a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028a08:	2b00      	cmp	r3, #0
 8028a0a:	d006      	beq.n	8028a1a <lfs_file_flushedread+0x5a>
                file->off == lfs->cfg->block_size) {
 8028a0c:	68bb      	ldr	r3, [r7, #8]
 8028a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028a10:	68fb      	ldr	r3, [r7, #12]
 8028a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a14:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8028a16:	429a      	cmp	r2, r3
 8028a18:	d130      	bne.n	8028a7c <lfs_file_flushedread+0xbc>
            if (!(file->flags & LFS_F_INLINE)) {
 8028a1a:	68bb      	ldr	r3, [r7, #8]
 8028a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028a22:	2b00      	cmp	r3, #0
 8028a24:	d11c      	bne.n	8028a60 <lfs_file_flushedread+0xa0>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028a26:	68bb      	ldr	r3, [r7, #8]
 8028a28:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8028a2c:	68bb      	ldr	r3, [r7, #8]
 8028a2e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028a30:	68bb      	ldr	r3, [r7, #8]
 8028a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028a34:	68ba      	ldr	r2, [r7, #8]
 8028a36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8028a38:	68b9      	ldr	r1, [r7, #8]
 8028a3a:	3138      	adds	r1, #56	; 0x38
 8028a3c:	68b8      	ldr	r0, [r7, #8]
 8028a3e:	303c      	adds	r0, #60	; 0x3c
 8028a40:	9003      	str	r0, [sp, #12]
 8028a42:	9102      	str	r1, [sp, #8]
 8028a44:	9201      	str	r2, [sp, #4]
 8028a46:	9300      	str	r3, [sp, #0]
 8028a48:	462b      	mov	r3, r5
 8028a4a:	4622      	mov	r2, r4
 8028a4c:	2100      	movs	r1, #0
 8028a4e:	68f8      	ldr	r0, [r7, #12]
 8028a50:	f7ff f97c 	bl	8027d4c <lfs_ctz_find>
 8028a54:	61f8      	str	r0, [r7, #28]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8028a56:	69fb      	ldr	r3, [r7, #28]
 8028a58:	2b00      	cmp	r3, #0
 8028a5a:	d009      	beq.n	8028a70 <lfs_file_flushedread+0xb0>
                    return err;
 8028a5c:	69fb      	ldr	r3, [r7, #28]
 8028a5e:	e07a      	b.n	8028b56 <lfs_file_flushedread+0x196>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028a60:	68bb      	ldr	r3, [r7, #8]
 8028a62:	f06f 0201 	mvn.w	r2, #1
 8028a66:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028a68:	68bb      	ldr	r3, [r7, #8]
 8028a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028a6c:	68bb      	ldr	r3, [r7, #8]
 8028a6e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8028a70:	68bb      	ldr	r3, [r7, #8]
 8028a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8028a78:	68bb      	ldr	r3, [r7, #8]
 8028a7a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028a7c:	68fb      	ldr	r3, [r7, #12]
 8028a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028a80:	69da      	ldr	r2, [r3, #28]
 8028a82:	68bb      	ldr	r3, [r7, #8]
 8028a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028a86:	1ad3      	subs	r3, r2, r3
 8028a88:	4619      	mov	r1, r3
 8028a8a:	6a38      	ldr	r0, [r7, #32]
 8028a8c:	f7fa fefa 	bl	8023884 <lfs_min>
 8028a90:	61b8      	str	r0, [r7, #24]
        if (file->flags & LFS_F_INLINE) {
 8028a92:	68bb      	ldr	r3, [r7, #8]
 8028a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028a9a:	2b00      	cmp	r3, #0
 8028a9c:	d026      	beq.n	8028aec <lfs_file_flushedread+0x12c>
            int err = lfs_dir_getread(lfs, &file->m,
 8028a9e:	68bb      	ldr	r3, [r7, #8]
 8028aa0:	f103 0408 	add.w	r4, r3, #8
 8028aa4:	68bb      	ldr	r3, [r7, #8]
 8028aa6:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028aaa:	68fb      	ldr	r3, [r7, #12]
 8028aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028aae:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8028ab0:	68bb      	ldr	r3, [r7, #8]
 8028ab2:	889b      	ldrh	r3, [r3, #4]
 8028ab4:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 8028ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8028aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8028abe:	68b9      	ldr	r1, [r7, #8]
 8028ac0:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8028ac2:	69b8      	ldr	r0, [r7, #24]
 8028ac4:	9005      	str	r0, [sp, #20]
 8028ac6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8028ac8:	9004      	str	r0, [sp, #16]
 8028aca:	9103      	str	r1, [sp, #12]
 8028acc:	9302      	str	r3, [sp, #8]
 8028ace:	4b24      	ldr	r3, [pc, #144]	; (8028b60 <lfs_file_flushedread+0x1a0>)
 8028ad0:	9301      	str	r3, [sp, #4]
 8028ad2:	9200      	str	r2, [sp, #0]
 8028ad4:	462b      	mov	r3, r5
 8028ad6:	2200      	movs	r2, #0
 8028ad8:	4621      	mov	r1, r4
 8028ada:	68f8      	ldr	r0, [r7, #12]
 8028adc:	f7fb ffed 	bl	8024aba <lfs_dir_getread>
 8028ae0:	6138      	str	r0, [r7, #16]
                    file->off, data, diff);
            if (err) {
 8028ae2:	693b      	ldr	r3, [r7, #16]
 8028ae4:	2b00      	cmp	r3, #0
 8028ae6:	d01d      	beq.n	8028b24 <lfs_file_flushedread+0x164>
                return err;
 8028ae8:	693b      	ldr	r3, [r7, #16]
 8028aea:	e034      	b.n	8028b56 <lfs_file_flushedread+0x196>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8028aec:	68bb      	ldr	r3, [r7, #8]
 8028aee:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8028af2:	68fb      	ldr	r3, [r7, #12]
 8028af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028af6:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8028af8:	68bb      	ldr	r3, [r7, #8]
 8028afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028afc:	68ba      	ldr	r2, [r7, #8]
 8028afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028b00:	69b9      	ldr	r1, [r7, #24]
 8028b02:	9103      	str	r1, [sp, #12]
 8028b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8028b06:	9102      	str	r1, [sp, #8]
 8028b08:	9201      	str	r2, [sp, #4]
 8028b0a:	9300      	str	r3, [sp, #0]
 8028b0c:	4623      	mov	r3, r4
 8028b0e:	4602      	mov	r2, r0
 8028b10:	2100      	movs	r1, #0
 8028b12:	68f8      	ldr	r0, [r7, #12]
 8028b14:	f7fa ff92 	bl	8023a3c <lfs_bd_read>
 8028b18:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028b1a:	697b      	ldr	r3, [r7, #20]
 8028b1c:	2b00      	cmp	r3, #0
 8028b1e:	d001      	beq.n	8028b24 <lfs_file_flushedread+0x164>
                return err;
 8028b20:	697b      	ldr	r3, [r7, #20]
 8028b22:	e018      	b.n	8028b56 <lfs_file_flushedread+0x196>
            }
        }

        file->pos += diff;
 8028b24:	68bb      	ldr	r3, [r7, #8]
 8028b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028b28:	69bb      	ldr	r3, [r7, #24]
 8028b2a:	441a      	add	r2, r3
 8028b2c:	68bb      	ldr	r3, [r7, #8]
 8028b2e:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028b30:	68bb      	ldr	r3, [r7, #8]
 8028b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028b34:	69bb      	ldr	r3, [r7, #24]
 8028b36:	441a      	add	r2, r3
 8028b38:	68bb      	ldr	r3, [r7, #8]
 8028b3a:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028b3e:	69bb      	ldr	r3, [r7, #24]
 8028b40:	4413      	add	r3, r2
 8028b42:	627b      	str	r3, [r7, #36]	; 0x24
        nsize -= diff;
 8028b44:	6a3a      	ldr	r2, [r7, #32]
 8028b46:	69bb      	ldr	r3, [r7, #24]
 8028b48:	1ad3      	subs	r3, r2, r3
 8028b4a:	623b      	str	r3, [r7, #32]
    while (nsize > 0) {
 8028b4c:	6a3b      	ldr	r3, [r7, #32]
 8028b4e:	2b00      	cmp	r3, #0
 8028b50:	f47f af56 	bne.w	8028a00 <lfs_file_flushedread+0x40>
    }

    return size;
 8028b54:	683b      	ldr	r3, [r7, #0]
}
 8028b56:	4618      	mov	r0, r3
 8028b58:	3728      	adds	r7, #40	; 0x28
 8028b5a:	46bd      	mov	sp, r7
 8028b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8028b5e:	bf00      	nop
 8028b60:	fff7fc00 	.word	0xfff7fc00

08028b64 <lfs_file_rawread>:

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8028b64:	b580      	push	{r7, lr}
 8028b66:	b086      	sub	sp, #24
 8028b68:	af00      	add	r7, sp, #0
 8028b6a:	60f8      	str	r0, [r7, #12]
 8028b6c:	60b9      	str	r1, [r7, #8]
 8028b6e:	607a      	str	r2, [r7, #4]
 8028b70:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8028b72:	68bb      	ldr	r3, [r7, #8]
 8028b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b76:	f003 0301 	and.w	r3, r3, #1
 8028b7a:	2b00      	cmp	r3, #0
 8028b7c:	d106      	bne.n	8028b8c <lfs_file_rawread+0x28>
 8028b7e:	4b11      	ldr	r3, [pc, #68]	; (8028bc4 <lfs_file_rawread+0x60>)
 8028b80:	4a11      	ldr	r2, [pc, #68]	; (8028bc8 <lfs_file_rawread+0x64>)
 8028b82:	f640 41ea 	movw	r1, #3306	; 0xcea
 8028b86:	4811      	ldr	r0, [pc, #68]	; (8028bcc <lfs_file_rawread+0x68>)
 8028b88:	f003 fdc0 	bl	802c70c <__assert_func>

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8028b8c:	68bb      	ldr	r3, [r7, #8]
 8028b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028b94:	2b00      	cmp	r3, #0
 8028b96:	d009      	beq.n	8028bac <lfs_file_rawread+0x48>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8028b98:	68b9      	ldr	r1, [r7, #8]
 8028b9a:	68f8      	ldr	r0, [r7, #12]
 8028b9c:	f7ff fdb0 	bl	8028700 <lfs_file_flush>
 8028ba0:	6178      	str	r0, [r7, #20]
        if (err) {
 8028ba2:	697b      	ldr	r3, [r7, #20]
 8028ba4:	2b00      	cmp	r3, #0
 8028ba6:	d001      	beq.n	8028bac <lfs_file_rawread+0x48>
            return err;
 8028ba8:	697b      	ldr	r3, [r7, #20]
 8028baa:	e006      	b.n	8028bba <lfs_file_rawread+0x56>
        }
    }
#endif

    return lfs_file_flushedread(lfs, file, buffer, size);
 8028bac:	683b      	ldr	r3, [r7, #0]
 8028bae:	687a      	ldr	r2, [r7, #4]
 8028bb0:	68b9      	ldr	r1, [r7, #8]
 8028bb2:	68f8      	ldr	r0, [r7, #12]
 8028bb4:	f7ff ff04 	bl	80289c0 <lfs_file_flushedread>
 8028bb8:	4603      	mov	r3, r0
}
 8028bba:	4618      	mov	r0, r3
 8028bbc:	3718      	adds	r7, #24
 8028bbe:	46bd      	mov	sp, r7
 8028bc0:	bd80      	pop	{r7, pc}
 8028bc2:	bf00      	nop
 8028bc4:	08033b3c 	.word	0x08033b3c
 8028bc8:	08034b50 	.word	0x08034b50
 8028bcc:	08033800 	.word	0x08033800

08028bd0 <lfs_file_flushedwrite>:


#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_flushedwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028bd0:	b5b0      	push	{r4, r5, r7, lr}
 8028bd2:	b090      	sub	sp, #64	; 0x40
 8028bd4:	af04      	add	r7, sp, #16
 8028bd6:	60f8      	str	r0, [r7, #12]
 8028bd8:	60b9      	str	r1, [r7, #8]
 8028bda:	607a      	str	r2, [r7, #4]
 8028bdc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 8028bde:	687b      	ldr	r3, [r7, #4]
 8028be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8028be2:	683b      	ldr	r3, [r7, #0]
 8028be4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((file->flags & LFS_F_INLINE) &&
 8028be6:	68bb      	ldr	r3, [r7, #8]
 8028be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028bee:	2b00      	cmp	r3, #0
 8028bf0:	f000 810c 	beq.w	8028e0c <lfs_file_flushedwrite+0x23c>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8028bf4:	68bb      	ldr	r3, [r7, #8]
 8028bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028bfa:	441a      	add	r2, r3
 8028bfc:	68bb      	ldr	r3, [r7, #8]
 8028bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028c00:	4619      	mov	r1, r3
 8028c02:	4610      	mov	r0, r2
 8028c04:	f7fa fe2e 	bl	8023864 <lfs_max>
 8028c08:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8028c0a:	68fb      	ldr	r3, [r7, #12]
 8028c0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8028c10:	68fb      	ldr	r3, [r7, #12]
 8028c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028c16:	2b00      	cmp	r3, #0
 8028c18:	d004      	beq.n	8028c24 <lfs_file_flushedwrite+0x54>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028c1a:	68fb      	ldr	r3, [r7, #12]
 8028c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8028c20:	08db      	lsrs	r3, r3, #3
 8028c22:	e003      	b.n	8028c2c <lfs_file_flushedwrite+0x5c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8028c24:	68fb      	ldr	r3, [r7, #12]
 8028c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c28:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8028c2a:	08db      	lsrs	r3, r3, #3
 8028c2c:	4619      	mov	r1, r3
 8028c2e:	4610      	mov	r0, r2
 8028c30:	f7fa fe28 	bl	8023884 <lfs_min>
 8028c34:	4603      	mov	r3, r0
 8028c36:	4619      	mov	r1, r3
 8028c38:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8028c3c:	f7fa fe22 	bl	8023884 <lfs_min>
 8028c40:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8028c42:	429c      	cmp	r4, r3
 8028c44:	f240 80e2 	bls.w	8028e0c <lfs_file_flushedwrite+0x23c>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8028c48:	68b9      	ldr	r1, [r7, #8]
 8028c4a:	68f8      	ldr	r0, [r7, #12]
 8028c4c:	f7ff fd36 	bl	80286bc <lfs_file_outline>
 8028c50:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028c54:	2b00      	cmp	r3, #0
 8028c56:	f000 80d9 	beq.w	8028e0c <lfs_file_flushedwrite+0x23c>
            file->flags |= LFS_F_ERRED;
 8028c5a:	68bb      	ldr	r3, [r7, #8]
 8028c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028c62:	68bb      	ldr	r3, [r7, #8]
 8028c64:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8028c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028c68:	e0d5      	b.n	8028e16 <lfs_file_flushedwrite+0x246>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8028c6a:	68bb      	ldr	r3, [r7, #8]
 8028c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028c72:	2b00      	cmp	r3, #0
 8028c74:	d006      	beq.n	8028c84 <lfs_file_flushedwrite+0xb4>
                file->off == lfs->cfg->block_size) {
 8028c76:	68bb      	ldr	r3, [r7, #8]
 8028c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028c7a:	68fb      	ldr	r3, [r7, #12]
 8028c7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028c7e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8028c80:	429a      	cmp	r2, r3
 8028c82:	d16b      	bne.n	8028d5c <lfs_file_flushedwrite+0x18c>
            if (!(file->flags & LFS_F_INLINE)) {
 8028c84:	68bb      	ldr	r3, [r7, #8]
 8028c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8028c8c:	2b00      	cmp	r3, #0
 8028c8e:	d157      	bne.n	8028d40 <lfs_file_flushedwrite+0x170>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8028c90:	68bb      	ldr	r3, [r7, #8]
 8028c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028c98:	2b00      	cmp	r3, #0
 8028c9a:	d12d      	bne.n	8028cf8 <lfs_file_flushedwrite+0x128>
 8028c9c:	68bb      	ldr	r3, [r7, #8]
 8028c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ca0:	2b00      	cmp	r3, #0
 8028ca2:	d029      	beq.n	8028cf8 <lfs_file_flushedwrite+0x128>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028ca4:	68bb      	ldr	r3, [r7, #8]
 8028ca6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8028caa:	68bb      	ldr	r3, [r7, #8]
 8028cac:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8028cae:	68bb      	ldr	r3, [r7, #8]
 8028cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8028cb2:	68ba      	ldr	r2, [r7, #8]
 8028cb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8028cb6:	3a01      	subs	r2, #1
 8028cb8:	68b9      	ldr	r1, [r7, #8]
 8028cba:	3138      	adds	r1, #56	; 0x38
 8028cbc:	68b8      	ldr	r0, [r7, #8]
 8028cbe:	303c      	adds	r0, #60	; 0x3c
 8028cc0:	9003      	str	r0, [sp, #12]
 8028cc2:	9102      	str	r1, [sp, #8]
 8028cc4:	9201      	str	r2, [sp, #4]
 8028cc6:	9300      	str	r3, [sp, #0]
 8028cc8:	462b      	mov	r3, r5
 8028cca:	4622      	mov	r2, r4
 8028ccc:	2100      	movs	r1, #0
 8028cce:	68f8      	ldr	r0, [r7, #12]
 8028cd0:	f7ff f83c 	bl	8027d4c <lfs_ctz_find>
 8028cd4:	6238      	str	r0, [r7, #32]
                    if (err) {
 8028cd6:	6a3b      	ldr	r3, [r7, #32]
 8028cd8:	2b00      	cmp	r3, #0
 8028cda:	d007      	beq.n	8028cec <lfs_file_flushedwrite+0x11c>
                        file->flags |= LFS_F_ERRED;
 8028cdc:	68bb      	ldr	r3, [r7, #8]
 8028cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ce0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028ce4:	68bb      	ldr	r3, [r7, #8]
 8028ce6:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8028ce8:	6a3b      	ldr	r3, [r7, #32]
 8028cea:	e094      	b.n	8028e16 <lfs_file_flushedwrite+0x246>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8028cec:	68bb      	ldr	r3, [r7, #8]
 8028cee:	3340      	adds	r3, #64	; 0x40
 8028cf0:	4619      	mov	r1, r3
 8028cf2:	68f8      	ldr	r0, [r7, #12]
 8028cf4:	f7fa fe8b 	bl	8023a0e <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8028cf8:	68f8      	ldr	r0, [r7, #12]
 8028cfa:	f7fb fd09 	bl	8024710 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8028cfe:	68bb      	ldr	r3, [r7, #8]
 8028d00:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028d04:	68fc      	ldr	r4, [r7, #12]
 8028d06:	68bb      	ldr	r3, [r7, #8]
 8028d08:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8028d0a:	68bb      	ldr	r3, [r7, #8]
 8028d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028d0e:	68ba      	ldr	r2, [r7, #8]
 8028d10:	3238      	adds	r2, #56	; 0x38
 8028d12:	68b9      	ldr	r1, [r7, #8]
 8028d14:	313c      	adds	r1, #60	; 0x3c
 8028d16:	9102      	str	r1, [sp, #8]
 8028d18:	9201      	str	r2, [sp, #4]
 8028d1a:	9300      	str	r3, [sp, #0]
 8028d1c:	462b      	mov	r3, r5
 8028d1e:	4622      	mov	r2, r4
 8028d20:	4601      	mov	r1, r0
 8028d22:	68f8      	ldr	r0, [r7, #12]
 8028d24:	f7ff f87e 	bl	8027e24 <lfs_ctz_extend>
 8028d28:	61f8      	str	r0, [r7, #28]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8028d2a:	69fb      	ldr	r3, [r7, #28]
 8028d2c:	2b00      	cmp	r3, #0
 8028d2e:	d00f      	beq.n	8028d50 <lfs_file_flushedwrite+0x180>
                    file->flags |= LFS_F_ERRED;
 8028d30:	68bb      	ldr	r3, [r7, #8]
 8028d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d34:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028d38:	68bb      	ldr	r3, [r7, #8]
 8028d3a:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 8028d3c:	69fb      	ldr	r3, [r7, #28]
 8028d3e:	e06a      	b.n	8028e16 <lfs_file_flushedwrite+0x246>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8028d40:	68bb      	ldr	r3, [r7, #8]
 8028d42:	f06f 0201 	mvn.w	r2, #1
 8028d46:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8028d48:	68bb      	ldr	r3, [r7, #8]
 8028d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028d4c:	68bb      	ldr	r3, [r7, #8]
 8028d4e:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8028d50:	68bb      	ldr	r3, [r7, #8]
 8028d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028d54:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8028d58:	68bb      	ldr	r3, [r7, #8]
 8028d5a:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8028d5c:	68fb      	ldr	r3, [r7, #12]
 8028d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8028d60:	69da      	ldr	r2, [r3, #28]
 8028d62:	68bb      	ldr	r3, [r7, #8]
 8028d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8028d66:	1ad3      	subs	r3, r2, r3
 8028d68:	4619      	mov	r1, r3
 8028d6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8028d6c:	f7fa fd8a 	bl	8023884 <lfs_min>
 8028d70:	61b8      	str	r0, [r7, #24]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8028d72:	68bb      	ldr	r3, [r7, #8]
 8028d74:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8028d78:	68fc      	ldr	r4, [r7, #12]
 8028d7a:	68bb      	ldr	r3, [r7, #8]
 8028d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8028d7e:	68ba      	ldr	r2, [r7, #8]
 8028d80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8028d82:	69b9      	ldr	r1, [r7, #24]
 8028d84:	9103      	str	r1, [sp, #12]
 8028d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8028d88:	9102      	str	r1, [sp, #8]
 8028d8a:	9201      	str	r2, [sp, #4]
 8028d8c:	9300      	str	r3, [sp, #0]
 8028d8e:	2301      	movs	r3, #1
 8028d90:	4622      	mov	r2, r4
 8028d92:	4601      	mov	r1, r0
 8028d94:	68f8      	ldr	r0, [r7, #12]
 8028d96:	f7fb f897 	bl	8023ec8 <lfs_bd_prog>
 8028d9a:	6178      	str	r0, [r7, #20]
                    file->block, file->off, data, diff);
            if (err) {
 8028d9c:	697b      	ldr	r3, [r7, #20]
 8028d9e:	2b00      	cmp	r3, #0
 8028da0:	d01c      	beq.n	8028ddc <lfs_file_flushedwrite+0x20c>
                if (err == LFS_ERR_CORRUPT) {
 8028da2:	697b      	ldr	r3, [r7, #20]
 8028da4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8028da8:	d007      	beq.n	8028dba <lfs_file_flushedwrite+0x1ea>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8028daa:	68bb      	ldr	r3, [r7, #8]
 8028dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028dae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028db2:	68bb      	ldr	r3, [r7, #8]
 8028db4:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028db6:	697b      	ldr	r3, [r7, #20]
 8028db8:	e02d      	b.n	8028e16 <lfs_file_flushedwrite+0x246>
                    goto relocate;
 8028dba:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8028dbc:	68b9      	ldr	r1, [r7, #8]
 8028dbe:	68f8      	ldr	r0, [r7, #12]
 8028dc0:	f7ff fba2 	bl	8028508 <lfs_file_relocate>
 8028dc4:	6178      	str	r0, [r7, #20]
            if (err) {
 8028dc6:	697b      	ldr	r3, [r7, #20]
 8028dc8:	2b00      	cmp	r3, #0
 8028dca:	d0d2      	beq.n	8028d72 <lfs_file_flushedwrite+0x1a2>
                file->flags |= LFS_F_ERRED;
 8028dcc:	68bb      	ldr	r3, [r7, #8]
 8028dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028dd0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8028dd4:	68bb      	ldr	r3, [r7, #8]
 8028dd6:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 8028dd8:	697b      	ldr	r3, [r7, #20]
 8028dda:	e01c      	b.n	8028e16 <lfs_file_flushedwrite+0x246>
            break;
 8028ddc:	bf00      	nop
            }
        }

        file->pos += diff;
 8028dde:	68bb      	ldr	r3, [r7, #8]
 8028de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028de2:	69bb      	ldr	r3, [r7, #24]
 8028de4:	441a      	add	r2, r3
 8028de6:	68bb      	ldr	r3, [r7, #8]
 8028de8:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8028dea:	68bb      	ldr	r3, [r7, #8]
 8028dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8028dee:	69bb      	ldr	r3, [r7, #24]
 8028df0:	441a      	add	r2, r3
 8028df2:	68bb      	ldr	r3, [r7, #8]
 8028df4:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8028df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028df8:	69bb      	ldr	r3, [r7, #24]
 8028dfa:	4413      	add	r3, r2
 8028dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8028dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8028e00:	69bb      	ldr	r3, [r7, #24]
 8028e02:	1ad3      	subs	r3, r2, r3
 8028e04:	62bb      	str	r3, [r7, #40]	; 0x28

        lfs_alloc_ack(lfs);
 8028e06:	68f8      	ldr	r0, [r7, #12]
 8028e08:	f7fb fc82 	bl	8024710 <lfs_alloc_ack>
    while (nsize > 0) {
 8028e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028e0e:	2b00      	cmp	r3, #0
 8028e10:	f47f af2b 	bne.w	8028c6a <lfs_file_flushedwrite+0x9a>
    }

    return size;
 8028e14:	683b      	ldr	r3, [r7, #0]
}
 8028e16:	4618      	mov	r0, r3
 8028e18:	3730      	adds	r7, #48	; 0x30
 8028e1a:	46bd      	mov	sp, r7
 8028e1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08028e20 <lfs_file_rawwrite>:

static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8028e20:	b580      	push	{r7, lr}
 8028e22:	b08a      	sub	sp, #40	; 0x28
 8028e24:	af00      	add	r7, sp, #0
 8028e26:	60f8      	str	r0, [r7, #12]
 8028e28:	60b9      	str	r1, [r7, #8]
 8028e2a:	607a      	str	r2, [r7, #4]
 8028e2c:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8028e2e:	68bb      	ldr	r3, [r7, #8]
 8028e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e32:	f003 0302 	and.w	r3, r3, #2
 8028e36:	2b00      	cmp	r3, #0
 8028e38:	d106      	bne.n	8028e48 <lfs_file_rawwrite+0x28>
 8028e3a:	4b38      	ldr	r3, [pc, #224]	; (8028f1c <lfs_file_rawwrite+0xfc>)
 8028e3c:	4a38      	ldr	r2, [pc, #224]	; (8028f20 <lfs_file_rawwrite+0x100>)
 8028e3e:	f640 5155 	movw	r1, #3413	; 0xd55
 8028e42:	4838      	ldr	r0, [pc, #224]	; (8028f24 <lfs_file_rawwrite+0x104>)
 8028e44:	f003 fc62 	bl	802c70c <__assert_func>

    if (file->flags & LFS_F_READING) {
 8028e48:	68bb      	ldr	r3, [r7, #8]
 8028e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8028e50:	2b00      	cmp	r3, #0
 8028e52:	d009      	beq.n	8028e68 <lfs_file_rawwrite+0x48>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8028e54:	68b9      	ldr	r1, [r7, #8]
 8028e56:	68f8      	ldr	r0, [r7, #12]
 8028e58:	f7ff fc52 	bl	8028700 <lfs_file_flush>
 8028e5c:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8028e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e60:	2b00      	cmp	r3, #0
 8028e62:	d001      	beq.n	8028e68 <lfs_file_rawwrite+0x48>
            return err;
 8028e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8028e66:	e055      	b.n	8028f14 <lfs_file_rawwrite+0xf4>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8028e68:	68bb      	ldr	r3, [r7, #8]
 8028e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8028e70:	2b00      	cmp	r3, #0
 8028e72:	d009      	beq.n	8028e88 <lfs_file_rawwrite+0x68>
 8028e74:	68bb      	ldr	r3, [r7, #8]
 8028e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028e78:	68bb      	ldr	r3, [r7, #8]
 8028e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028e7c:	429a      	cmp	r2, r3
 8028e7e:	d203      	bcs.n	8028e88 <lfs_file_rawwrite+0x68>
        file->pos = file->ctz.size;
 8028e80:	68bb      	ldr	r3, [r7, #8]
 8028e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028e84:	68bb      	ldr	r3, [r7, #8]
 8028e86:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8028e88:	68bb      	ldr	r3, [r7, #8]
 8028e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028e8c:	683b      	ldr	r3, [r7, #0]
 8028e8e:	441a      	add	r2, r3
 8028e90:	68fb      	ldr	r3, [r7, #12]
 8028e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028e94:	429a      	cmp	r2, r3
 8028e96:	d902      	bls.n	8028e9e <lfs_file_rawwrite+0x7e>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8028e98:	f06f 031a 	mvn.w	r3, #26
 8028e9c:	e03a      	b.n	8028f14 <lfs_file_rawwrite+0xf4>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8028e9e:	68bb      	ldr	r3, [r7, #8]
 8028ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8028ea6:	2b00      	cmp	r3, #0
 8028ea8:	d121      	bne.n	8028eee <lfs_file_rawwrite+0xce>
 8028eaa:	68bb      	ldr	r3, [r7, #8]
 8028eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028eae:	68bb      	ldr	r3, [r7, #8]
 8028eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028eb2:	429a      	cmp	r2, r3
 8028eb4:	d91b      	bls.n	8028eee <lfs_file_rawwrite+0xce>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8028eb6:	68bb      	ldr	r3, [r7, #8]
 8028eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028eba:	623b      	str	r3, [r7, #32]
        file->pos = file->ctz.size;
 8028ebc:	68bb      	ldr	r3, [r7, #8]
 8028ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8028ec0:	68bb      	ldr	r3, [r7, #8]
 8028ec2:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8028ec4:	e00e      	b.n	8028ee4 <lfs_file_rawwrite+0xc4>
            lfs_ssize_t res = lfs_file_flushedwrite(lfs, file, &(uint8_t){0}, 1);
 8028ec6:	2300      	movs	r3, #0
 8028ec8:	75fb      	strb	r3, [r7, #23]
 8028eca:	f107 0217 	add.w	r2, r7, #23
 8028ece:	2301      	movs	r3, #1
 8028ed0:	68b9      	ldr	r1, [r7, #8]
 8028ed2:	68f8      	ldr	r0, [r7, #12]
 8028ed4:	f7ff fe7c 	bl	8028bd0 <lfs_file_flushedwrite>
 8028ed8:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 8028eda:	69fb      	ldr	r3, [r7, #28]
 8028edc:	2b00      	cmp	r3, #0
 8028ede:	da01      	bge.n	8028ee4 <lfs_file_rawwrite+0xc4>
                return res;
 8028ee0:	69fb      	ldr	r3, [r7, #28]
 8028ee2:	e017      	b.n	8028f14 <lfs_file_rawwrite+0xf4>
        while (file->pos < pos) {
 8028ee4:	68bb      	ldr	r3, [r7, #8]
 8028ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028ee8:	6a3a      	ldr	r2, [r7, #32]
 8028eea:	429a      	cmp	r2, r3
 8028eec:	d8eb      	bhi.n	8028ec6 <lfs_file_rawwrite+0xa6>
            }
        }
    }

    lfs_ssize_t nsize = lfs_file_flushedwrite(lfs, file, buffer, size);
 8028eee:	683b      	ldr	r3, [r7, #0]
 8028ef0:	687a      	ldr	r2, [r7, #4]
 8028ef2:	68b9      	ldr	r1, [r7, #8]
 8028ef4:	68f8      	ldr	r0, [r7, #12]
 8028ef6:	f7ff fe6b 	bl	8028bd0 <lfs_file_flushedwrite>
 8028efa:	61b8      	str	r0, [r7, #24]
    if (nsize < 0) {
 8028efc:	69bb      	ldr	r3, [r7, #24]
 8028efe:	2b00      	cmp	r3, #0
 8028f00:	da01      	bge.n	8028f06 <lfs_file_rawwrite+0xe6>
        return nsize;
 8028f02:	69bb      	ldr	r3, [r7, #24]
 8028f04:	e006      	b.n	8028f14 <lfs_file_rawwrite+0xf4>
    }

    file->flags &= ~LFS_F_ERRED;
 8028f06:	68bb      	ldr	r3, [r7, #8]
 8028f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028f0a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8028f0e:	68bb      	ldr	r3, [r7, #8]
 8028f10:	631a      	str	r2, [r3, #48]	; 0x30
    return nsize;
 8028f12:	69bb      	ldr	r3, [r7, #24]
}
 8028f14:	4618      	mov	r0, r3
 8028f16:	3728      	adds	r7, #40	; 0x28
 8028f18:	46bd      	mov	sp, r7
 8028f1a:	bd80      	pop	{r7, pc}
 8028f1c:	08033b6c 	.word	0x08033b6c
 8028f20:	08034b64 	.word	0x08034b64
 8028f24:	08033800 	.word	0x08033800

08028f28 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8028f28:	b580      	push	{r7, lr}
 8028f2a:	b08c      	sub	sp, #48	; 0x30
 8028f2c:	af00      	add	r7, sp, #0
 8028f2e:	60f8      	str	r0, [r7, #12]
 8028f30:	60b9      	str	r1, [r7, #8]
 8028f32:	607a      	str	r2, [r7, #4]
 8028f34:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 8028f36:	68bb      	ldr	r3, [r7, #8]
 8028f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (whence == LFS_SEEK_SET) {
 8028f3c:	683b      	ldr	r3, [r7, #0]
 8028f3e:	2b00      	cmp	r3, #0
 8028f40:	d102      	bne.n	8028f48 <lfs_file_rawseek+0x20>
        npos = off;
 8028f42:	687b      	ldr	r3, [r7, #4]
 8028f44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028f46:	e025      	b.n	8028f94 <lfs_file_rawseek+0x6c>
    } else if (whence == LFS_SEEK_CUR) {
 8028f48:	683b      	ldr	r3, [r7, #0]
 8028f4a:	2b01      	cmp	r3, #1
 8028f4c:	d10f      	bne.n	8028f6e <lfs_file_rawseek+0x46>
        if ((lfs_soff_t)file->pos + off < 0) {
 8028f4e:	68bb      	ldr	r3, [r7, #8]
 8028f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028f52:	461a      	mov	r2, r3
 8028f54:	687b      	ldr	r3, [r7, #4]
 8028f56:	4413      	add	r3, r2
 8028f58:	2b00      	cmp	r3, #0
 8028f5a:	da02      	bge.n	8028f62 <lfs_file_rawseek+0x3a>
            return LFS_ERR_INVAL;
 8028f5c:	f06f 0315 	mvn.w	r3, #21
 8028f60:	e067      	b.n	8029032 <lfs_file_rawseek+0x10a>
        } else {
            npos = file->pos + off;
 8028f62:	68bb      	ldr	r3, [r7, #8]
 8028f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8028f66:	687b      	ldr	r3, [r7, #4]
 8028f68:	4413      	add	r3, r2
 8028f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8028f6c:	e012      	b.n	8028f94 <lfs_file_rawseek+0x6c>
        }
    } else if (whence == LFS_SEEK_END) {
 8028f6e:	683b      	ldr	r3, [r7, #0]
 8028f70:	2b02      	cmp	r3, #2
 8028f72:	d10f      	bne.n	8028f94 <lfs_file_rawseek+0x6c>
        lfs_soff_t res = lfs_file_rawsize(lfs, file) + off;
 8028f74:	68b9      	ldr	r1, [r7, #8]
 8028f76:	68f8      	ldr	r0, [r7, #12]
 8028f78:	f000 f85f 	bl	802903a <lfs_file_rawsize>
 8028f7c:	4602      	mov	r2, r0
 8028f7e:	687b      	ldr	r3, [r7, #4]
 8028f80:	4413      	add	r3, r2
 8028f82:	62bb      	str	r3, [r7, #40]	; 0x28
        if (res < 0) {
 8028f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f86:	2b00      	cmp	r3, #0
 8028f88:	da02      	bge.n	8028f90 <lfs_file_rawseek+0x68>
            return LFS_ERR_INVAL;
 8028f8a:	f06f 0315 	mvn.w	r3, #21
 8028f8e:	e050      	b.n	8029032 <lfs_file_rawseek+0x10a>
        } else {
            npos = res;
 8028f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8028f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
    }

    if (npos > lfs->file_max) {
 8028f94:	68fb      	ldr	r3, [r7, #12]
 8028f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8028f98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028f9a:	429a      	cmp	r2, r3
 8028f9c:	d902      	bls.n	8028fa4 <lfs_file_rawseek+0x7c>
        // file position out of range
        return LFS_ERR_INVAL;
 8028f9e:	f06f 0315 	mvn.w	r3, #21
 8028fa2:	e046      	b.n	8029032 <lfs_file_rawseek+0x10a>
    }

    if (file->pos == npos) {
 8028fa4:	68bb      	ldr	r3, [r7, #8]
 8028fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8028faa:	429a      	cmp	r2, r3
 8028fac:	d101      	bne.n	8028fb2 <lfs_file_rawseek+0x8a>
        // noop - position has not changed
        return npos;
 8028fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028fb0:	e03f      	b.n	8029032 <lfs_file_rawseek+0x10a>

    // if we're only reading and our new offset is still in the file's cache
    // we can avoid flushing and needing to reread the data
    if (
#ifndef LFS_READONLY
        !(file->flags & LFS_F_WRITING)
 8028fb2:	68bb      	ldr	r3, [r7, #8]
 8028fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    if (
 8028fba:	2b00      	cmp	r3, #0
 8028fbc:	d12b      	bne.n	8029016 <lfs_file_rawseek+0xee>
#else
        true
#endif
            ) {
        int oindex = lfs_ctz_index(lfs, &(lfs_off_t){file->pos});
 8028fbe:	68bb      	ldr	r3, [r7, #8]
 8028fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028fc2:	61bb      	str	r3, [r7, #24]
 8028fc4:	f107 0318 	add.w	r3, r7, #24
 8028fc8:	4619      	mov	r1, r3
 8028fca:	68f8      	ldr	r0, [r7, #12]
 8028fcc:	f7fe fe86 	bl	8027cdc <lfs_ctz_index>
 8028fd0:	6278      	str	r0, [r7, #36]	; 0x24
        lfs_off_t noff = npos;
 8028fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8028fd4:	617b      	str	r3, [r7, #20]
        int nindex = lfs_ctz_index(lfs, &noff);
 8028fd6:	f107 0314 	add.w	r3, r7, #20
 8028fda:	4619      	mov	r1, r3
 8028fdc:	68f8      	ldr	r0, [r7, #12]
 8028fde:	f7fe fe7d 	bl	8027cdc <lfs_ctz_index>
 8028fe2:	6238      	str	r0, [r7, #32]
        if (oindex == nindex
 8028fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8028fe6:	6a3b      	ldr	r3, [r7, #32]
 8028fe8:	429a      	cmp	r2, r3
 8028fea:	d114      	bne.n	8029016 <lfs_file_rawseek+0xee>
                && noff >= file->cache.off
 8028fec:	68bb      	ldr	r3, [r7, #8]
 8028fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028ff0:	697b      	ldr	r3, [r7, #20]
 8028ff2:	429a      	cmp	r2, r3
 8028ff4:	d80f      	bhi.n	8029016 <lfs_file_rawseek+0xee>
                && noff < file->cache.off + file->cache.size) {
 8028ff6:	68bb      	ldr	r3, [r7, #8]
 8028ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8028ffa:	68bb      	ldr	r3, [r7, #8]
 8028ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8028ffe:	441a      	add	r2, r3
 8029000:	697b      	ldr	r3, [r7, #20]
 8029002:	429a      	cmp	r2, r3
 8029004:	d907      	bls.n	8029016 <lfs_file_rawseek+0xee>
            file->pos = npos;
 8029006:	68bb      	ldr	r3, [r7, #8]
 8029008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802900a:	635a      	str	r2, [r3, #52]	; 0x34
            file->off = noff;
 802900c:	697a      	ldr	r2, [r7, #20]
 802900e:	68bb      	ldr	r3, [r7, #8]
 8029010:	63da      	str	r2, [r3, #60]	; 0x3c
            return npos;
 8029012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8029014:	e00d      	b.n	8029032 <lfs_file_rawseek+0x10a>
        }
    }

    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8029016:	68b9      	ldr	r1, [r7, #8]
 8029018:	68f8      	ldr	r0, [r7, #12]
 802901a:	f7ff fb71 	bl	8028700 <lfs_file_flush>
 802901e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8029020:	69fb      	ldr	r3, [r7, #28]
 8029022:	2b00      	cmp	r3, #0
 8029024:	d001      	beq.n	802902a <lfs_file_rawseek+0x102>
        return err;
 8029026:	69fb      	ldr	r3, [r7, #28]
 8029028:	e003      	b.n	8029032 <lfs_file_rawseek+0x10a>
    }

    // update pos
    file->pos = npos;
 802902a:	68bb      	ldr	r3, [r7, #8]
 802902c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802902e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8029030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8029032:	4618      	mov	r0, r3
 8029034:	3730      	adds	r7, #48	; 0x30
 8029036:	46bd      	mov	sp, r7
 8029038:	bd80      	pop	{r7, pc}

0802903a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 802903a:	b580      	push	{r7, lr}
 802903c:	b082      	sub	sp, #8
 802903e:	af00      	add	r7, sp, #0
 8029040:	6078      	str	r0, [r7, #4]
 8029042:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8029044:	683b      	ldr	r3, [r7, #0]
 8029046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802904c:	2b00      	cmp	r3, #0
 802904e:	d009      	beq.n	8029064 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8029050:	683b      	ldr	r3, [r7, #0]
 8029052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8029054:	683b      	ldr	r3, [r7, #0]
 8029056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029058:	4619      	mov	r1, r3
 802905a:	4610      	mov	r0, r2
 802905c:	f7fa fc02 	bl	8023864 <lfs_max>
 8029060:	4603      	mov	r3, r0
 8029062:	e001      	b.n	8029068 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8029064:	683b      	ldr	r3, [r7, #0]
 8029066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8029068:	4618      	mov	r0, r3
 802906a:	3708      	adds	r7, #8
 802906c:	46bd      	mov	sp, r7
 802906e:	bd80      	pop	{r7, pc}

08029070 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8029070:	b580      	push	{r7, lr}
 8029072:	b08e      	sub	sp, #56	; 0x38
 8029074:	af00      	add	r7, sp, #0
 8029076:	60f8      	str	r0, [r7, #12]
 8029078:	60b9      	str	r1, [r7, #8]
 802907a:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 802907c:	f107 0208 	add.w	r2, r7, #8
 8029080:	f107 0114 	add.w	r1, r7, #20
 8029084:	2300      	movs	r3, #0
 8029086:	68f8      	ldr	r0, [r7, #12]
 8029088:	f7fc feae 	bl	8025de8 <lfs_dir_find>
 802908c:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 802908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029090:	2b00      	cmp	r3, #0
 8029092:	da01      	bge.n	8029098 <lfs_rawstat+0x28>
        return (int)tag;
 8029094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8029096:	e00c      	b.n	80290b2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8029098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802909a:	4618      	mov	r0, r3
 802909c:	f7fb f908 	bl	80242b0 <lfs_tag_id>
 80290a0:	4603      	mov	r3, r0
 80290a2:	461a      	mov	r2, r3
 80290a4:	f107 0114 	add.w	r1, r7, #20
 80290a8:	687b      	ldr	r3, [r7, #4]
 80290aa:	68f8      	ldr	r0, [r7, #12]
 80290ac:	f7fc fdd8 	bl	8025c60 <lfs_dir_getinfo>
 80290b0:	4603      	mov	r3, r0
}
 80290b2:	4618      	mov	r0, r3
 80290b4:	3738      	adds	r7, #56	; 0x38
 80290b6:	46bd      	mov	sp, r7
 80290b8:	bd80      	pop	{r7, pc}
	...

080290bc <lfs_rawremove>:

#ifndef LFS_READONLY
static int lfs_rawremove(lfs_t *lfs, const char *path) {
 80290bc:	b580      	push	{r7, lr}
 80290be:	b0a0      	sub	sp, #128	; 0x80
 80290c0:	af02      	add	r7, sp, #8
 80290c2:	6078      	str	r0, [r7, #4]
 80290c4:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 80290c6:	6878      	ldr	r0, [r7, #4]
 80290c8:	f001 fba2 	bl	802a810 <lfs_fs_forceconsistency>
 80290cc:	6778      	str	r0, [r7, #116]	; 0x74
    if (err) {
 80290ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290d0:	2b00      	cmp	r3, #0
 80290d2:	d001      	beq.n	80290d8 <lfs_rawremove+0x1c>
        return err;
 80290d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80290d6:	e0c4      	b.n	8029262 <lfs_rawremove+0x1a6>
    }

    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 80290d8:	463a      	mov	r2, r7
 80290da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80290de:	2300      	movs	r3, #0
 80290e0:	6878      	ldr	r0, [r7, #4]
 80290e2:	f7fc fe81 	bl	8025de8 <lfs_dir_find>
 80290e6:	6738      	str	r0, [r7, #112]	; 0x70
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
 80290e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80290ea:	2b00      	cmp	r3, #0
 80290ec:	db09      	blt.n	8029102 <lfs_rawremove+0x46>
 80290ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80290f0:	4618      	mov	r0, r3
 80290f2:	f7fb f8dd 	bl	80242b0 <lfs_tag_id>
 80290f6:	4603      	mov	r3, r0
 80290f8:	461a      	mov	r2, r3
 80290fa:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80290fe:	429a      	cmp	r2, r3
 8029100:	d107      	bne.n	8029112 <lfs_rawremove+0x56>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
 8029102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029104:	2b00      	cmp	r3, #0
 8029106:	da01      	bge.n	802910c <lfs_rawremove+0x50>
 8029108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802910a:	e0aa      	b.n	8029262 <lfs_rawremove+0x1a6>
 802910c:	f06f 0315 	mvn.w	r3, #21
 8029110:	e0a7      	b.n	8029262 <lfs_rawremove+0x1a6>
    }

    struct lfs_mlist dir;
    dir.next = lfs->mlist;
 8029112:	687b      	ldr	r3, [r7, #4]
 8029114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029116:	627b      	str	r3, [r7, #36]	; 0x24
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 8029118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802911a:	4618      	mov	r0, r3
 802911c:	f7fb f89e 	bl	802425c <lfs_tag_type3>
 8029120:	4603      	mov	r3, r0
 8029122:	2b02      	cmp	r3, #2
 8029124:	d14a      	bne.n	80291bc <lfs_rawremove+0x100>
        // must be empty before removal
        lfs_block_t pair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 8029126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029128:	4618      	mov	r0, r3
 802912a:	f7fb f8c1 	bl	80242b0 <lfs_tag_id>
 802912e:	4603      	mov	r3, r0
 8029130:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8029132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029136:	f043 0308 	orr.w	r3, r3, #8
 802913a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802913e:	f107 020c 	add.w	r2, r7, #12
 8029142:	9200      	str	r2, [sp, #0]
 8029144:	4a49      	ldr	r2, [pc, #292]	; (802926c <lfs_rawremove+0x1b0>)
 8029146:	6878      	ldr	r0, [r7, #4]
 8029148:	f7fb fc9c 	bl	8024a84 <lfs_dir_get>
 802914c:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (res < 0) {
 802914e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8029150:	2b00      	cmp	r3, #0
 8029152:	da01      	bge.n	8029158 <lfs_rawremove+0x9c>
            return (int)res;
 8029154:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8029156:	e084      	b.n	8029262 <lfs_rawremove+0x1a6>
        }
        lfs_pair_fromle32(pair);
 8029158:	f107 030c 	add.w	r3, r7, #12
 802915c:	4618      	mov	r0, r3
 802915e:	f7fb f818 	bl	8024192 <lfs_pair_fromle32>

        err = lfs_dir_fetch(lfs, &dir.m, pair);
 8029162:	f107 020c 	add.w	r2, r7, #12
 8029166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802916a:	3308      	adds	r3, #8
 802916c:	4619      	mov	r1, r3
 802916e:	6878      	ldr	r0, [r7, #4]
 8029170:	f7fc fd28 	bl	8025bc4 <lfs_dir_fetch>
 8029174:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029178:	2b00      	cmp	r3, #0
 802917a:	d001      	beq.n	8029180 <lfs_rawremove+0xc4>
            return err;
 802917c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802917e:	e070      	b.n	8029262 <lfs_rawremove+0x1a6>
        }

        if (dir.m.count > 0 || dir.m.split) {
 8029180:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8029184:	2b00      	cmp	r3, #0
 8029186:	d103      	bne.n	8029190 <lfs_rawremove+0xd4>
 8029188:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802918c:	2b00      	cmp	r3, #0
 802918e:	d002      	beq.n	8029196 <lfs_rawremove+0xda>
            return LFS_ERR_NOTEMPTY;
 8029190:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8029194:	e065      	b.n	8029262 <lfs_rawremove+0x1a6>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8029196:	2101      	movs	r1, #1
 8029198:	6878      	ldr	r0, [r7, #4]
 802919a:	f001 f8bb 	bl	802a314 <lfs_fs_preporphans>
 802919e:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 80291a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291a2:	2b00      	cmp	r3, #0
 80291a4:	d001      	beq.n	80291aa <lfs_rawremove+0xee>
            return err;
 80291a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291a8:	e05b      	b.n	8029262 <lfs_rawremove+0x1a6>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        dir.type = 0;
 80291aa:	2300      	movs	r3, #0
 80291ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        dir.id = 0;
 80291b0:	2300      	movs	r3, #0
 80291b2:	853b      	strh	r3, [r7, #40]	; 0x28
        lfs->mlist = &dir;
 80291b4:	687b      	ldr	r3, [r7, #4]
 80291b6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80291ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    // delete the entry
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
 80291bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80291be:	4618      	mov	r0, r3
 80291c0:	f7fb f876 	bl	80242b0 <lfs_tag_id>
 80291c4:	4603      	mov	r3, r0
 80291c6:	029b      	lsls	r3, r3, #10
 80291c8:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80291cc:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80291d0:	61fb      	str	r3, [r7, #28]
 80291d2:	2300      	movs	r3, #0
 80291d4:	623b      	str	r3, [r7, #32]
 80291d6:	f107 021c 	add.w	r2, r7, #28
 80291da:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80291de:	2301      	movs	r3, #1
 80291e0:	6878      	ldr	r0, [r7, #4]
 80291e2:	f7fe fb09 	bl	80277f8 <lfs_dir_commit>
 80291e6:	6778      	str	r0, [r7, #116]	; 0x74
            {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(tag), 0), NULL}));
    if (err) {
 80291e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291ea:	2b00      	cmp	r3, #0
 80291ec:	d004      	beq.n	80291f8 <lfs_rawremove+0x13c>
        lfs->mlist = dir.next;
 80291ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80291f0:	687b      	ldr	r3, [r7, #4]
 80291f2:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 80291f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80291f6:	e034      	b.n	8029262 <lfs_rawremove+0x1a6>
    }

    lfs->mlist = dir.next;
 80291f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80291fa:	687b      	ldr	r3, [r7, #4]
 80291fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
 80291fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8029200:	4618      	mov	r0, r3
 8029202:	f7fb f82b 	bl	802425c <lfs_tag_type3>
 8029206:	4603      	mov	r3, r0
 8029208:	2b02      	cmp	r3, #2
 802920a:	d129      	bne.n	8029260 <lfs_rawremove+0x1a4>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802920c:	f04f 31ff 	mov.w	r1, #4294967295
 8029210:	6878      	ldr	r0, [r7, #4]
 8029212:	f001 f87f 	bl	802a314 <lfs_fs_preporphans>
 8029216:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802921a:	2b00      	cmp	r3, #0
 802921c:	d001      	beq.n	8029222 <lfs_rawremove+0x166>
            return err;
 802921e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029220:	e01f      	b.n	8029262 <lfs_rawremove+0x1a6>
        }

        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
 8029222:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8029226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802922a:	3308      	adds	r3, #8
 802922c:	4619      	mov	r1, r3
 802922e:	6878      	ldr	r0, [r7, #4]
 8029230:	f000 ff90 	bl	802a154 <lfs_fs_pred>
 8029234:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029238:	2b00      	cmp	r3, #0
 802923a:	d001      	beq.n	8029240 <lfs_rawremove+0x184>
            return err;
 802923c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802923e:	e010      	b.n	8029262 <lfs_rawremove+0x1a6>
        }

        err = lfs_dir_drop(lfs, &cwd, &dir.m);
 8029240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029244:	f103 0208 	add.w	r2, r3, #8
 8029248:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 802924c:	4619      	mov	r1, r3
 802924e:	6878      	ldr	r0, [r7, #4]
 8029250:	f7fd f930 	bl	80264b4 <lfs_dir_drop>
 8029254:	6778      	str	r0, [r7, #116]	; 0x74
        if (err) {
 8029256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8029258:	2b00      	cmp	r3, #0
 802925a:	d001      	beq.n	8029260 <lfs_rawremove+0x1a4>
            return err;
 802925c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802925e:	e000      	b.n	8029262 <lfs_rawremove+0x1a6>
        }
    }

    return 0;
 8029260:	2300      	movs	r3, #0
}
 8029262:	4618      	mov	r0, r3
 8029264:	3778      	adds	r7, #120	; 0x78
 8029266:	46bd      	mov	sp, r7
 8029268:	bd80      	pop	{r7, pc}
 802926a:	bf00      	nop
 802926c:	700ffc00 	.word	0x700ffc00

08029270 <lfs_rawrename>:
#endif

#ifndef LFS_READONLY
static int lfs_rawrename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 8029270:	b590      	push	{r4, r7, lr}
 8029272:	b0c3      	sub	sp, #268	; 0x10c
 8029274:	af02      	add	r7, sp, #8
 8029276:	60f8      	str	r0, [r7, #12]
 8029278:	60b9      	str	r1, [r7, #8]
 802927a:	607a      	str	r2, [r7, #4]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 802927c:	68f8      	ldr	r0, [r7, #12]
 802927e:	f001 fac7 	bl	802a810 <lfs_fs_forceconsistency>
 8029282:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
    if (err) {
 8029286:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802928a:	2b00      	cmp	r3, #0
 802928c:	d002      	beq.n	8029294 <lfs_rawrename+0x24>
        return err;
 802928e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029292:	e1f7      	b.n	8029684 <lfs_rawrename+0x414>
    }

    // find old entry
    lfs_mdir_t oldcwd;
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
 8029294:	f107 0208 	add.w	r2, r7, #8
 8029298:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 802929c:	2300      	movs	r3, #0
 802929e:	68f8      	ldr	r0, [r7, #12]
 80292a0:	f7fc fda2 	bl	8025de8 <lfs_dir_find>
 80292a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
 80292a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80292ac:	2b00      	cmp	r3, #0
 80292ae:	db0a      	blt.n	80292c6 <lfs_rawrename+0x56>
 80292b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80292b4:	4618      	mov	r0, r3
 80292b6:	f7fa fffb 	bl	80242b0 <lfs_tag_id>
 80292ba:	4603      	mov	r3, r0
 80292bc:	461a      	mov	r2, r3
 80292be:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80292c2:	429a      	cmp	r2, r3
 80292c4:	d109      	bne.n	80292da <lfs_rawrename+0x6a>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
 80292c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80292ca:	2b00      	cmp	r3, #0
 80292cc:	da02      	bge.n	80292d4 <lfs_rawrename+0x64>
 80292ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80292d2:	e1d7      	b.n	8029684 <lfs_rawrename+0x414>
 80292d4:	f06f 0315 	mvn.w	r3, #21
 80292d8:	e1d4      	b.n	8029684 <lfs_rawrename+0x414>
    }

    // find new entry
    lfs_mdir_t newcwd;
    uint16_t newid;
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
 80292da:	f107 03a2 	add.w	r3, r7, #162	; 0xa2
 80292de:	1d3a      	adds	r2, r7, #4
 80292e0:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80292e4:	68f8      	ldr	r0, [r7, #12]
 80292e6:	f7fc fd7f 	bl	8025de8 <lfs_dir_find>
 80292ea:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
 80292ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80292f2:	2b00      	cmp	r3, #0
 80292f4:	db0a      	blt.n	802930c <lfs_rawrename+0x9c>
 80292f6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80292fa:	4618      	mov	r0, r3
 80292fc:	f7fa ffd8 	bl	80242b0 <lfs_tag_id>
 8029300:	4603      	mov	r3, r0
 8029302:	461a      	mov	r2, r3
 8029304:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8029308:	429a      	cmp	r2, r3
 802930a:	d114      	bne.n	8029336 <lfs_rawrename+0xc6>
 802930c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029310:	f113 0f02 	cmn.w	r3, #2
 8029314:	d105      	bne.n	8029322 <lfs_rawrename+0xb2>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
 8029316:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802931a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802931e:	4293      	cmp	r3, r2
 8029320:	d109      	bne.n	8029336 <lfs_rawrename+0xc6>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
 8029322:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029326:	2b00      	cmp	r3, #0
 8029328:	da02      	bge.n	8029330 <lfs_rawrename+0xc0>
 802932a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802932e:	e1a9      	b.n	8029684 <lfs_rawrename+0x414>
 8029330:	f06f 0315 	mvn.w	r3, #21
 8029334:	e1a6      	b.n	8029684 <lfs_rawrename+0x414>
    }

    // if we're in the same pair there's a few special cases...
    bool samepair = (lfs_pair_cmp(oldcwd.pair, newcwd.pair) == 0);
 8029336:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802933a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 802933e:	4611      	mov	r1, r2
 8029340:	4618      	mov	r0, r3
 8029342:	f7fa fecf 	bl	80240e4 <lfs_pair_cmp>
 8029346:	4603      	mov	r3, r0
 8029348:	2b00      	cmp	r3, #0
 802934a:	bf0c      	ite	eq
 802934c:	2301      	moveq	r3, #1
 802934e:	2300      	movne	r3, #0
 8029350:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    uint16_t newoldid = lfs_tag_id(oldtag);
 8029354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8029358:	4618      	mov	r0, r3
 802935a:	f7fa ffa9 	bl	80242b0 <lfs_tag_id>
 802935e:	4603      	mov	r3, r0
 8029360:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe

    struct lfs_mlist prevdir;
    prevdir.next = lfs->mlist;
 8029364:	68fb      	ldr	r3, [r7, #12]
 8029366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029368:	67bb      	str	r3, [r7, #120]	; 0x78
    if (prevtag == LFS_ERR_NOENT) {
 802936a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 802936e:	f113 0f02 	cmn.w	r3, #2
 8029372:	d11f      	bne.n	80293b4 <lfs_rawrename+0x144>
        // check that name fits
        lfs_size_t nlen = strlen(newpath);
 8029374:	687b      	ldr	r3, [r7, #4]
 8029376:	4618      	mov	r0, r3
 8029378:	f7e6 ff92 	bl	80102a0 <strlen>
 802937c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
        if (nlen > lfs->name_max) {
 8029380:	68fb      	ldr	r3, [r7, #12]
 8029382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029384:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8029388:	429a      	cmp	r2, r3
 802938a:	d902      	bls.n	8029392 <lfs_rawrename+0x122>
            return LFS_ERR_NAMETOOLONG;
 802938c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8029390:	e178      	b.n	8029684 <lfs_rawrename+0x414>
        }

        // there is a small chance we are being renamed in the same
        // directory/ to an id less than our old id, the global update
        // to handle this is a bit messy
        if (samepair && newid <= newoldid) {
 8029392:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029396:	2b00      	cmp	r3, #0
 8029398:	f000 8084 	beq.w	80294a4 <lfs_rawrename+0x234>
 802939c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80293a0:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80293a4:	429a      	cmp	r2, r3
 80293a6:	d37d      	bcc.n	80294a4 <lfs_rawrename+0x234>
            newoldid += 1;
 80293a8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80293ac:	3301      	adds	r3, #1
 80293ae:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80293b2:	e077      	b.n	80294a4 <lfs_rawrename+0x234>
        }
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
 80293b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80293b8:	4618      	mov	r0, r3
 80293ba:	f7fa ff4f 	bl	802425c <lfs_tag_type3>
 80293be:	4603      	mov	r3, r0
 80293c0:	461c      	mov	r4, r3
 80293c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80293c6:	4618      	mov	r0, r3
 80293c8:	f7fa ff48 	bl	802425c <lfs_tag_type3>
 80293cc:	4603      	mov	r3, r0
 80293ce:	429c      	cmp	r4, r3
 80293d0:	d002      	beq.n	80293d8 <lfs_rawrename+0x168>
        return LFS_ERR_ISDIR;
 80293d2:	f06f 0314 	mvn.w	r3, #20
 80293d6:	e155      	b.n	8029684 <lfs_rawrename+0x414>
    } else if (samepair && newid == newoldid) {
 80293d8:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80293dc:	2b00      	cmp	r3, #0
 80293de:	d007      	beq.n	80293f0 <lfs_rawrename+0x180>
 80293e0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80293e4:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80293e8:	429a      	cmp	r2, r3
 80293ea:	d101      	bne.n	80293f0 <lfs_rawrename+0x180>
        // we're renaming to ourselves??
        return 0;
 80293ec:	2300      	movs	r3, #0
 80293ee:	e149      	b.n	8029684 <lfs_rawrename+0x414>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 80293f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80293f4:	4618      	mov	r0, r3
 80293f6:	f7fa ff31 	bl	802425c <lfs_tag_type3>
 80293fa:	4603      	mov	r3, r0
 80293fc:	2b02      	cmp	r3, #2
 80293fe:	d151      	bne.n	80294a4 <lfs_rawrename+0x234>
        // must be empty before removal
        lfs_block_t prevpair[2];
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
 8029400:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029404:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
 8029406:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 802940a:	f043 0308 	orr.w	r3, r3, #8
 802940e:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8029412:	f107 0220 	add.w	r2, r7, #32
 8029416:	9200      	str	r2, [sp, #0]
 8029418:	4a9d      	ldr	r2, [pc, #628]	; (8029690 <lfs_rawrename+0x420>)
 802941a:	68f8      	ldr	r0, [r7, #12]
 802941c:	f7fb fb32 	bl	8024a84 <lfs_dir_get>
 8029420:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (res < 0) {
 8029424:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029428:	2b00      	cmp	r3, #0
 802942a:	da02      	bge.n	8029432 <lfs_rawrename+0x1c2>
            return (int)res;
 802942c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8029430:	e128      	b.n	8029684 <lfs_rawrename+0x414>
        }
        lfs_pair_fromle32(prevpair);
 8029432:	f107 0320 	add.w	r3, r7, #32
 8029436:	4618      	mov	r0, r3
 8029438:	f7fa feab 	bl	8024192 <lfs_pair_fromle32>

        // must be empty before removal
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
 802943c:	f107 0220 	add.w	r2, r7, #32
 8029440:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029444:	3308      	adds	r3, #8
 8029446:	4619      	mov	r1, r3
 8029448:	68f8      	ldr	r0, [r7, #12]
 802944a:	f7fc fbbb 	bl	8025bc4 <lfs_dir_fetch>
 802944e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029456:	2b00      	cmp	r3, #0
 8029458:	d002      	beq.n	8029460 <lfs_rawrename+0x1f0>
            return err;
 802945a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802945e:	e111      	b.n	8029684 <lfs_rawrename+0x414>
        }

        if (prevdir.m.count > 0 || prevdir.m.split) {
 8029460:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8029464:	2b00      	cmp	r3, #0
 8029466:	d103      	bne.n	8029470 <lfs_rawrename+0x200>
 8029468:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 802946c:	2b00      	cmp	r3, #0
 802946e:	d002      	beq.n	8029476 <lfs_rawrename+0x206>
            return LFS_ERR_NOTEMPTY;
 8029470:	f06f 0326 	mvn.w	r3, #38	; 0x26
 8029474:	e106      	b.n	8029684 <lfs_rawrename+0x414>
        }

        // mark fs as orphaned
        err = lfs_fs_preporphans(lfs, +1);
 8029476:	2101      	movs	r1, #1
 8029478:	68f8      	ldr	r0, [r7, #12]
 802947a:	f000 ff4b 	bl	802a314 <lfs_fs_preporphans>
 802947e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029482:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029486:	2b00      	cmp	r3, #0
 8029488:	d002      	beq.n	8029490 <lfs_rawrename+0x220>
            return err;
 802948a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802948e:	e0f9      	b.n	8029684 <lfs_rawrename+0x414>
        }

        // I know it's crazy but yes, dir can be changed by our parent's
        // commit (if predecessor is child)
        prevdir.type = 0;
 8029490:	2300      	movs	r3, #0
 8029492:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
        prevdir.id = 0;
 8029496:	2300      	movs	r3, #0
 8029498:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        lfs->mlist = &prevdir;
 802949c:	68fb      	ldr	r3, [r7, #12]
 802949e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80294a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (!samepair) {
 80294a4:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 80294a8:	f083 0301 	eor.w	r3, r3, #1
 80294ac:	b2db      	uxtb	r3, r3
 80294ae:	2b00      	cmp	r3, #0
 80294b0:	d007      	beq.n	80294c2 <lfs_rawrename+0x252>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
 80294b2:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80294b6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80294ba:	4619      	mov	r1, r3
 80294bc:	68f8      	ldr	r0, [r7, #12]
 80294be:	f000 ff63 	bl	802a388 <lfs_fs_prepmove>
    }

    // move over all attributes
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
 80294c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80294c6:	f113 0f02 	cmn.w	r3, #2
 80294ca:	d007      	beq.n	80294dc <lfs_rawrename+0x26c>
 80294cc:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80294d0:	029b      	lsls	r3, r3, #10
 80294d2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80294d6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80294da:	e000      	b.n	80294de <lfs_rawrename+0x26e>
 80294dc:	2300      	movs	r3, #0
 80294de:	653b      	str	r3, [r7, #80]	; 0x50
 80294e0:	2300      	movs	r3, #0
 80294e2:	657b      	str	r3, [r7, #84]	; 0x54
 80294e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80294e8:	029b      	lsls	r3, r3, #10
 80294ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80294ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80294f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80294f4:	2300      	movs	r3, #0
 80294f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80294f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80294fc:	4618      	mov	r0, r3
 80294fe:	f7fa fead 	bl	802425c <lfs_tag_type3>
 8029502:	4603      	mov	r3, r0
 8029504:	051a      	lsls	r2, r3, #20
 8029506:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 802950a:	029b      	lsls	r3, r3, #10
 802950c:	ea42 0403 	orr.w	r4, r2, r3
 8029510:	687b      	ldr	r3, [r7, #4]
 8029512:	4618      	mov	r0, r3
 8029514:	f7e6 fec4 	bl	80102a0 <strlen>
 8029518:	4603      	mov	r3, r0
 802951a:	4323      	orrs	r3, r4
 802951c:	663b      	str	r3, [r7, #96]	; 0x60
 802951e:	687b      	ldr	r3, [r7, #4]
 8029520:	667b      	str	r3, [r7, #100]	; 0x64
 8029522:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8029526:	029c      	lsls	r4, r3, #10
 8029528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802952c:	4618      	mov	r0, r3
 802952e:	f7fa febf 	bl	80242b0 <lfs_tag_id>
 8029532:	4603      	mov	r3, r0
 8029534:	4323      	orrs	r3, r4
 8029536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 802953a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802953e:	66bb      	str	r3, [r7, #104]	; 0x68
 8029540:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8029544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8029546:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 802954a:	2b00      	cmp	r3, #0
 802954c:	d007      	beq.n	802955e <lfs_rawrename+0x2ee>
 802954e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8029552:	029b      	lsls	r3, r3, #10
 8029554:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8029558:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802955c:	e000      	b.n	8029560 <lfs_rawrename+0x2f0>
 802955e:	2300      	movs	r3, #0
 8029560:	673b      	str	r3, [r7, #112]	; 0x70
 8029562:	2300      	movs	r3, #0
 8029564:	677b      	str	r3, [r7, #116]	; 0x74
 8029566:	f107 0250 	add.w	r2, r7, #80	; 0x50
 802956a:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 802956e:	2305      	movs	r3, #5
 8029570:	68f8      	ldr	r0, [r7, #12]
 8029572:	f7fe f941 	bl	80277f8 <lfs_dir_commit>
 8029576:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
            {LFS_MKTAG(LFS_TYPE_CREATE, newid, 0), NULL},
            {LFS_MKTAG(lfs_tag_type3(oldtag), newid, strlen(newpath)), newpath},
            {LFS_MKTAG(LFS_FROM_MOVE, newid, lfs_tag_id(oldtag)), &oldcwd},
            {LFS_MKTAG_IF(samepair,
                LFS_TYPE_DELETE, newoldid, 0), NULL}));
    if (err) {
 802957a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802957e:	2b00      	cmp	r3, #0
 8029580:	d005      	beq.n	802958e <lfs_rawrename+0x31e>
        lfs->mlist = prevdir.next;
 8029582:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8029584:	68fb      	ldr	r3, [r7, #12]
 8029586:	629a      	str	r2, [r3, #40]	; 0x28
        return err;
 8029588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802958c:	e07a      	b.n	8029684 <lfs_rawrename+0x414>
    }

    // let commit clean up after move (if we're different! otherwise move
    // logic already fixed it for us)
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
 802958e:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8029592:	f083 0301 	eor.w	r3, r3, #1
 8029596:	b2db      	uxtb	r3, r3
 8029598:	2b00      	cmp	r3, #0
 802959a:	d02f      	beq.n	80295fc <lfs_rawrename+0x38c>
 802959c:	68fb      	ldr	r3, [r7, #12]
 802959e:	3330      	adds	r3, #48	; 0x30
 80295a0:	4618      	mov	r0, r3
 80295a2:	f7fa ff1a 	bl	80243da <lfs_gstate_hasmove>
 80295a6:	4603      	mov	r3, r0
 80295a8:	2b00      	cmp	r3, #0
 80295aa:	d027      	beq.n	80295fc <lfs_rawrename+0x38c>
        // prep gstate and delete move id
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
 80295ac:	2200      	movs	r2, #0
 80295ae:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80295b2:	68f8      	ldr	r0, [r7, #12]
 80295b4:	f000 fee8 	bl	802a388 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
 80295b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80295bc:	4618      	mov	r0, r3
 80295be:	f7fa fe77 	bl	80242b0 <lfs_tag_id>
 80295c2:	4603      	mov	r3, r0
 80295c4:	029b      	lsls	r3, r3, #10
 80295c6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80295ca:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 80295ce:	61bb      	str	r3, [r7, #24]
 80295d0:	2300      	movs	r3, #0
 80295d2:	61fb      	str	r3, [r7, #28]
 80295d4:	f107 0218 	add.w	r2, r7, #24
 80295d8:	f107 01c4 	add.w	r1, r7, #196	; 0xc4
 80295dc:	2301      	movs	r3, #1
 80295de:	68f8      	ldr	r0, [r7, #12]
 80295e0:	f7fe f90a 	bl	80277f8 <lfs_dir_commit>
 80295e4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
                {LFS_MKTAG(LFS_TYPE_DELETE, lfs_tag_id(oldtag), 0), NULL}));
        if (err) {
 80295e8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80295ec:	2b00      	cmp	r3, #0
 80295ee:	d005      	beq.n	80295fc <lfs_rawrename+0x38c>
            lfs->mlist = prevdir.next;
 80295f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80295f2:	68fb      	ldr	r3, [r7, #12]
 80295f4:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 80295f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80295fa:	e043      	b.n	8029684 <lfs_rawrename+0x414>
        }
    }

    lfs->mlist = prevdir.next;
 80295fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80295fe:	68fb      	ldr	r3, [r7, #12]
 8029600:	629a      	str	r2, [r3, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT
 8029602:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029606:	f113 0f02 	cmn.w	r3, #2
 802960a:	d03a      	beq.n	8029682 <lfs_rawrename+0x412>
            && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
 802960c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8029610:	4618      	mov	r0, r3
 8029612:	f7fa fe23 	bl	802425c <lfs_tag_type3>
 8029616:	4603      	mov	r3, r0
 8029618:	2b02      	cmp	r3, #2
 802961a:	d132      	bne.n	8029682 <lfs_rawrename+0x412>
        // fix orphan
        err = lfs_fs_preporphans(lfs, -1);
 802961c:	f04f 31ff 	mov.w	r1, #4294967295
 8029620:	68f8      	ldr	r0, [r7, #12]
 8029622:	f000 fe77 	bl	802a314 <lfs_fs_preporphans>
 8029626:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802962a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802962e:	2b00      	cmp	r3, #0
 8029630:	d002      	beq.n	8029638 <lfs_rawrename+0x3c8>
            return err;
 8029632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029636:	e025      	b.n	8029684 <lfs_rawrename+0x414>
        }

        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
 8029638:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 802963c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029640:	3308      	adds	r3, #8
 8029642:	4619      	mov	r1, r3
 8029644:	68f8      	ldr	r0, [r7, #12]
 8029646:	f000 fd85 	bl	802a154 <lfs_fs_pred>
 802964a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 802964e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029652:	2b00      	cmp	r3, #0
 8029654:	d002      	beq.n	802965c <lfs_rawrename+0x3ec>
            return err;
 8029656:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802965a:	e013      	b.n	8029684 <lfs_rawrename+0x414>
        }

        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
 802965c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8029660:	f103 0208 	add.w	r2, r3, #8
 8029664:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8029668:	4619      	mov	r1, r3
 802966a:	68f8      	ldr	r0, [r7, #12]
 802966c:	f7fc ff22 	bl	80264b4 <lfs_dir_drop>
 8029670:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
        if (err) {
 8029674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029678:	2b00      	cmp	r3, #0
 802967a:	d002      	beq.n	8029682 <lfs_rawrename+0x412>
            return err;
 802967c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8029680:	e000      	b.n	8029684 <lfs_rawrename+0x414>
        }
    }

    return 0;
 8029682:	2300      	movs	r3, #0
}
 8029684:	4618      	mov	r0, r3
 8029686:	f507 7782 	add.w	r7, r7, #260	; 0x104
 802968a:	46bd      	mov	sp, r7
 802968c:	bd90      	pop	{r4, r7, pc}
 802968e:	bf00      	nop
 8029690:	700ffc00 	.word	0x700ffc00

08029694 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8029694:	b580      	push	{r7, lr}
 8029696:	b08c      	sub	sp, #48	; 0x30
 8029698:	af00      	add	r7, sp, #0
 802969a:	6078      	str	r0, [r7, #4]
 802969c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 802969e:	687b      	ldr	r3, [r7, #4]
 80296a0:	683a      	ldr	r2, [r7, #0]
 80296a2:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80296a4:	2300      	movs	r3, #0
 80296a6:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80296a8:	687b      	ldr	r3, [r7, #4]
 80296aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296ac:	695b      	ldr	r3, [r3, #20]
 80296ae:	2b00      	cmp	r3, #0
 80296b0:	d106      	bne.n	80296c0 <lfs_init+0x2c>
 80296b2:	4b92      	ldr	r3, [pc, #584]	; (80298fc <lfs_init+0x268>)
 80296b4:	4a92      	ldr	r2, [pc, #584]	; (8029900 <lfs_init+0x26c>)
 80296b6:	f640 7146 	movw	r1, #3910	; 0xf46
 80296ba:	4892      	ldr	r0, [pc, #584]	; (8029904 <lfs_init+0x270>)
 80296bc:	f003 f826 	bl	802c70c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80296c0:	687b      	ldr	r3, [r7, #4]
 80296c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296c4:	699b      	ldr	r3, [r3, #24]
 80296c6:	2b00      	cmp	r3, #0
 80296c8:	d106      	bne.n	80296d8 <lfs_init+0x44>
 80296ca:	4b8f      	ldr	r3, [pc, #572]	; (8029908 <lfs_init+0x274>)
 80296cc:	4a8c      	ldr	r2, [pc, #560]	; (8029900 <lfs_init+0x26c>)
 80296ce:	f640 7147 	movw	r1, #3911	; 0xf47
 80296d2:	488c      	ldr	r0, [pc, #560]	; (8029904 <lfs_init+0x270>)
 80296d4:	f003 f81a 	bl	802c70c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 80296d8:	687b      	ldr	r3, [r7, #4]
 80296da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80296de:	2b00      	cmp	r3, #0
 80296e0:	d106      	bne.n	80296f0 <lfs_init+0x5c>
 80296e2:	4b8a      	ldr	r3, [pc, #552]	; (802990c <lfs_init+0x278>)
 80296e4:	4a86      	ldr	r2, [pc, #536]	; (8029900 <lfs_init+0x26c>)
 80296e6:	f640 7148 	movw	r1, #3912	; 0xf48
 80296ea:	4886      	ldr	r0, [pc, #536]	; (8029904 <lfs_init+0x270>)
 80296ec:	f003 f80e 	bl	802c70c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 80296f0:	687b      	ldr	r3, [r7, #4]
 80296f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80296f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80296f6:	687a      	ldr	r2, [r7, #4]
 80296f8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80296fa:	6952      	ldr	r2, [r2, #20]
 80296fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8029700:	fb01 f202 	mul.w	r2, r1, r2
 8029704:	1a9b      	subs	r3, r3, r2
 8029706:	2b00      	cmp	r3, #0
 8029708:	d006      	beq.n	8029718 <lfs_init+0x84>
 802970a:	4b81      	ldr	r3, [pc, #516]	; (8029910 <lfs_init+0x27c>)
 802970c:	4a7c      	ldr	r2, [pc, #496]	; (8029900 <lfs_init+0x26c>)
 802970e:	f640 714c 	movw	r1, #3916	; 0xf4c
 8029712:	487c      	ldr	r0, [pc, #496]	; (8029904 <lfs_init+0x270>)
 8029714:	f002 fffa 	bl	802c70c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8029718:	687b      	ldr	r3, [r7, #4]
 802971a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802971e:	687a      	ldr	r2, [r7, #4]
 8029720:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029722:	6992      	ldr	r2, [r2, #24]
 8029724:	fbb3 f1f2 	udiv	r1, r3, r2
 8029728:	fb01 f202 	mul.w	r2, r1, r2
 802972c:	1a9b      	subs	r3, r3, r2
 802972e:	2b00      	cmp	r3, #0
 8029730:	d006      	beq.n	8029740 <lfs_init+0xac>
 8029732:	4b78      	ldr	r3, [pc, #480]	; (8029914 <lfs_init+0x280>)
 8029734:	4a72      	ldr	r2, [pc, #456]	; (8029900 <lfs_init+0x26c>)
 8029736:	f640 714d 	movw	r1, #3917	; 0xf4d
 802973a:	4872      	ldr	r0, [pc, #456]	; (8029904 <lfs_init+0x270>)
 802973c:	f002 ffe6 	bl	802c70c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8029740:	687b      	ldr	r3, [r7, #4]
 8029742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029744:	69db      	ldr	r3, [r3, #28]
 8029746:	687a      	ldr	r2, [r7, #4]
 8029748:	6e92      	ldr	r2, [r2, #104]	; 0x68
 802974a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 802974c:	fbb3 f1f2 	udiv	r1, r3, r2
 8029750:	fb01 f202 	mul.w	r2, r1, r2
 8029754:	1a9b      	subs	r3, r3, r2
 8029756:	2b00      	cmp	r3, #0
 8029758:	d006      	beq.n	8029768 <lfs_init+0xd4>
 802975a:	4b6f      	ldr	r3, [pc, #444]	; (8029918 <lfs_init+0x284>)
 802975c:	4a68      	ldr	r2, [pc, #416]	; (8029900 <lfs_init+0x26c>)
 802975e:	f640 714e 	movw	r1, #3918	; 0xf4e
 8029762:	4868      	ldr	r0, [pc, #416]	; (8029904 <lfs_init+0x270>)
 8029764:	f002 ffd2 	bl	802c70c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8029768:	687b      	ldr	r3, [r7, #4]
 802976a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802976c:	69db      	ldr	r3, [r3, #28]
 802976e:	3b08      	subs	r3, #8
 8029770:	f04f 32ff 	mov.w	r2, #4294967295
 8029774:	fbb2 f3f3 	udiv	r3, r2, r3
 8029778:	4618      	mov	r0, r3
 802977a:	f7fa f8ba 	bl	80238f2 <lfs_npw2>
 802977e:	4603      	mov	r3, r0
 8029780:	009a      	lsls	r2, r3, #2
 8029782:	687b      	ldr	r3, [r7, #4]
 8029784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029786:	69db      	ldr	r3, [r3, #28]
 8029788:	429a      	cmp	r2, r3
 802978a:	d906      	bls.n	802979a <lfs_init+0x106>
 802978c:	4b63      	ldr	r3, [pc, #396]	; (802991c <lfs_init+0x288>)
 802978e:	4a5c      	ldr	r2, [pc, #368]	; (8029900 <lfs_init+0x26c>)
 8029790:	f640 7151 	movw	r1, #3921	; 0xf51
 8029794:	485b      	ldr	r0, [pc, #364]	; (8029904 <lfs_init+0x270>)
 8029796:	f002 ffb9 	bl	802c70c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 802979a:	687b      	ldr	r3, [r7, #4]
 802979c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80297a0:	2b00      	cmp	r3, #0
 80297a2:	d106      	bne.n	80297b2 <lfs_init+0x11e>
 80297a4:	4b5e      	ldr	r3, [pc, #376]	; (8029920 <lfs_init+0x28c>)
 80297a6:	4a56      	ldr	r2, [pc, #344]	; (8029900 <lfs_init+0x26c>)
 80297a8:	f640 715a 	movw	r1, #3930	; 0xf5a
 80297ac:	4855      	ldr	r0, [pc, #340]	; (8029904 <lfs_init+0x270>)
 80297ae:	f002 ffad 	bl	802c70c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80297b2:	687b      	ldr	r3, [r7, #4]
 80297b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80297b8:	2b00      	cmp	r3, #0
 80297ba:	d005      	beq.n	80297c8 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80297bc:	687b      	ldr	r3, [r7, #4]
 80297be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80297c2:	687b      	ldr	r3, [r7, #4]
 80297c4:	60da      	str	r2, [r3, #12]
 80297c6:	e010      	b.n	80297ea <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80297c8:	687b      	ldr	r3, [r7, #4]
 80297ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80297ce:	4618      	mov	r0, r3
 80297d0:	f7fa f8f7 	bl	80239c2 <lfs_malloc>
 80297d4:	4602      	mov	r2, r0
 80297d6:	687b      	ldr	r3, [r7, #4]
 80297d8:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 80297da:	687b      	ldr	r3, [r7, #4]
 80297dc:	68db      	ldr	r3, [r3, #12]
 80297de:	2b00      	cmp	r3, #0
 80297e0:	d103      	bne.n	80297ea <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 80297e2:	f06f 030b 	mvn.w	r3, #11
 80297e6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80297e8:	e0fd      	b.n	80299e6 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 80297ea:	687b      	ldr	r3, [r7, #4]
 80297ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80297f0:	2b00      	cmp	r3, #0
 80297f2:	d005      	beq.n	8029800 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 80297f4:	687b      	ldr	r3, [r7, #4]
 80297f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80297f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80297fa:	687b      	ldr	r3, [r7, #4]
 80297fc:	61da      	str	r2, [r3, #28]
 80297fe:	e010      	b.n	8029822 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8029800:	687b      	ldr	r3, [r7, #4]
 8029802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8029806:	4618      	mov	r0, r3
 8029808:	f7fa f8db 	bl	80239c2 <lfs_malloc>
 802980c:	4602      	mov	r2, r0
 802980e:	687b      	ldr	r3, [r7, #4]
 8029810:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8029812:	687b      	ldr	r3, [r7, #4]
 8029814:	69db      	ldr	r3, [r3, #28]
 8029816:	2b00      	cmp	r3, #0
 8029818:	d103      	bne.n	8029822 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 802981a:	f06f 030b 	mvn.w	r3, #11
 802981e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8029820:	e0e1      	b.n	80299e6 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8029822:	687b      	ldr	r3, [r7, #4]
 8029824:	4619      	mov	r1, r3
 8029826:	6878      	ldr	r0, [r7, #4]
 8029828:	f7fa f8f1 	bl	8023a0e <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 802982c:	687b      	ldr	r3, [r7, #4]
 802982e:	3310      	adds	r3, #16
 8029830:	4619      	mov	r1, r3
 8029832:	6878      	ldr	r0, [r7, #4]
 8029834:	f7fa f8eb 	bl	8023a0e <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8029838:	687b      	ldr	r3, [r7, #4]
 802983a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802983e:	2b00      	cmp	r3, #0
 8029840:	d106      	bne.n	8029850 <lfs_init+0x1bc>
 8029842:	4b38      	ldr	r3, [pc, #224]	; (8029924 <lfs_init+0x290>)
 8029844:	4a2e      	ldr	r2, [pc, #184]	; (8029900 <lfs_init+0x26c>)
 8029846:	f640 7178 	movw	r1, #3960	; 0xf78
 802984a:	482e      	ldr	r0, [pc, #184]	; (8029904 <lfs_init+0x270>)
 802984c:	f002 ff5e 	bl	802c70c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8029850:	687b      	ldr	r3, [r7, #4]
 8029852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029856:	f003 0307 	and.w	r3, r3, #7
 802985a:	2b00      	cmp	r3, #0
 802985c:	d106      	bne.n	802986c <lfs_init+0x1d8>
 802985e:	687b      	ldr	r3, [r7, #4]
 8029860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029864:	f003 0303 	and.w	r3, r3, #3
 8029868:	2b00      	cmp	r3, #0
 802986a:	d006      	beq.n	802987a <lfs_init+0x1e6>
 802986c:	4b2e      	ldr	r3, [pc, #184]	; (8029928 <lfs_init+0x294>)
 802986e:	4a24      	ldr	r2, [pc, #144]	; (8029900 <lfs_init+0x26c>)
 8029870:	f640 7179 	movw	r1, #3961	; 0xf79
 8029874:	4823      	ldr	r0, [pc, #140]	; (8029904 <lfs_init+0x270>)
 8029876:	f002 ff49 	bl	802c70c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 802987a:	687b      	ldr	r3, [r7, #4]
 802987c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029880:	2b00      	cmp	r3, #0
 8029882:	d005      	beq.n	8029890 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8029884:	687b      	ldr	r3, [r7, #4]
 8029886:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802988a:	687b      	ldr	r3, [r7, #4]
 802988c:	665a      	str	r2, [r3, #100]	; 0x64
 802988e:	e010      	b.n	80298b2 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8029890:	687b      	ldr	r3, [r7, #4]
 8029892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029896:	4618      	mov	r0, r3
 8029898:	f7fa f893 	bl	80239c2 <lfs_malloc>
 802989c:	4602      	mov	r2, r0
 802989e:	687b      	ldr	r3, [r7, #4]
 80298a0:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80298a2:	687b      	ldr	r3, [r7, #4]
 80298a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80298a6:	2b00      	cmp	r3, #0
 80298a8:	d103      	bne.n	80298b2 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80298aa:	f06f 030b 	mvn.w	r3, #11
 80298ae:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80298b0:	e099      	b.n	80299e6 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80298b2:	687b      	ldr	r3, [r7, #4]
 80298b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80298b8:	2bff      	cmp	r3, #255	; 0xff
 80298ba:	d906      	bls.n	80298ca <lfs_init+0x236>
 80298bc:	4b1b      	ldr	r3, [pc, #108]	; (802992c <lfs_init+0x298>)
 80298be:	4a10      	ldr	r2, [pc, #64]	; (8029900 <lfs_init+0x26c>)
 80298c0:	f640 7186 	movw	r1, #3974	; 0xf86
 80298c4:	480f      	ldr	r0, [pc, #60]	; (8029904 <lfs_init+0x270>)
 80298c6:	f002 ff21 	bl	802c70c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80298ca:	687b      	ldr	r3, [r7, #4]
 80298cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80298d0:	687b      	ldr	r3, [r7, #4]
 80298d2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80298d4:	687b      	ldr	r3, [r7, #4]
 80298d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80298d8:	2b00      	cmp	r3, #0
 80298da:	d102      	bne.n	80298e2 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80298dc:	687b      	ldr	r3, [r7, #4]
 80298de:	22ff      	movs	r2, #255	; 0xff
 80298e0:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80298e2:	687b      	ldr	r3, [r7, #4]
 80298e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80298e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80298e8:	2b00      	cmp	r3, #0
 80298ea:	da23      	bge.n	8029934 <lfs_init+0x2a0>
 80298ec:	4b10      	ldr	r3, [pc, #64]	; (8029930 <lfs_init+0x29c>)
 80298ee:	4a04      	ldr	r2, [pc, #16]	; (8029900 <lfs_init+0x26c>)
 80298f0:	f640 718c 	movw	r1, #3980	; 0xf8c
 80298f4:	4803      	ldr	r0, [pc, #12]	; (8029904 <lfs_init+0x270>)
 80298f6:	f002 ff09 	bl	802c70c <__assert_func>
 80298fa:	bf00      	nop
 80298fc:	08033b9c 	.word	0x08033b9c
 8029900:	08034b78 	.word	0x08034b78
 8029904:	08033800 	.word	0x08033800
 8029908:	08033bb8 	.word	0x08033bb8
 802990c:	08033bd4 	.word	0x08033bd4
 8029910:	08033bf0 	.word	0x08033bf0
 8029914:	08033c20 	.word	0x08033c20
 8029918:	08033c50 	.word	0x08033c50
 802991c:	08033c84 	.word	0x08033c84
 8029920:	08033cd0 	.word	0x08033cd0
 8029924:	08033cec 	.word	0x08033cec
 8029928:	08033d0c 	.word	0x08033d0c
 802992c:	08033d60 	.word	0x08033d60
 8029930:	08033d7c 	.word	0x08033d7c
    lfs->file_max = lfs->cfg->file_max;
 8029934:	687b      	ldr	r3, [r7, #4]
 8029936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802993a:	687b      	ldr	r3, [r7, #4]
 802993c:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 802993e:	687b      	ldr	r3, [r7, #4]
 8029940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029942:	2b00      	cmp	r3, #0
 8029944:	d103      	bne.n	802994e <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 8029946:	687b      	ldr	r3, [r7, #4]
 8029948:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802994c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 802994e:	687b      	ldr	r3, [r7, #4]
 8029950:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8029954:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029958:	4293      	cmp	r3, r2
 802995a:	d906      	bls.n	802996a <lfs_init+0x2d6>
 802995c:	4b26      	ldr	r3, [pc, #152]	; (80299f8 <lfs_init+0x364>)
 802995e:	4a27      	ldr	r2, [pc, #156]	; (80299fc <lfs_init+0x368>)
 8029960:	f640 7192 	movw	r1, #3986	; 0xf92
 8029964:	4826      	ldr	r0, [pc, #152]	; (8029a00 <lfs_init+0x36c>)
 8029966:	f002 fed1 	bl	802c70c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 802996a:	687b      	ldr	r3, [r7, #4]
 802996c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802996e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8029970:	687b      	ldr	r3, [r7, #4]
 8029972:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8029974:	687b      	ldr	r3, [r7, #4]
 8029976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029978:	2b00      	cmp	r3, #0
 802997a:	d103      	bne.n	8029984 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 802997c:	687b      	ldr	r3, [r7, #4]
 802997e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8029982:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 8029984:	687b      	ldr	r3, [r7, #4]
 8029986:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802998a:	687b      	ldr	r3, [r7, #4]
 802998c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802998e:	69db      	ldr	r3, [r3, #28]
 8029990:	429a      	cmp	r2, r3
 8029992:	d906      	bls.n	80299a2 <lfs_init+0x30e>
 8029994:	4b1b      	ldr	r3, [pc, #108]	; (8029a04 <lfs_init+0x370>)
 8029996:	4a19      	ldr	r2, [pc, #100]	; (80299fc <lfs_init+0x368>)
 8029998:	f640 7198 	movw	r1, #3992	; 0xf98
 802999c:	4818      	ldr	r0, [pc, #96]	; (8029a00 <lfs_init+0x36c>)
 802999e:	f002 feb5 	bl	802c70c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80299a2:	687b      	ldr	r3, [r7, #4]
 80299a4:	f04f 32ff 	mov.w	r2, #4294967295
 80299a8:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80299aa:	687b      	ldr	r3, [r7, #4]
 80299ac:	f04f 32ff 	mov.w	r2, #4294967295
 80299b0:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80299b2:	687b      	ldr	r3, [r7, #4]
 80299b4:	2200      	movs	r2, #0
 80299b6:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80299b8:	687b      	ldr	r3, [r7, #4]
 80299ba:	2200      	movs	r2, #0
 80299bc:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80299be:	687b      	ldr	r3, [r7, #4]
 80299c0:	333c      	adds	r3, #60	; 0x3c
 80299c2:	2200      	movs	r2, #0
 80299c4:	601a      	str	r2, [r3, #0]
 80299c6:	605a      	str	r2, [r3, #4]
 80299c8:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80299ca:	687b      	ldr	r3, [r7, #4]
 80299cc:	3330      	adds	r3, #48	; 0x30
 80299ce:	2200      	movs	r2, #0
 80299d0:	601a      	str	r2, [r3, #0]
 80299d2:	605a      	str	r2, [r3, #4]
 80299d4:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80299d6:	687b      	ldr	r3, [r7, #4]
 80299d8:	3348      	adds	r3, #72	; 0x48
 80299da:	2200      	movs	r2, #0
 80299dc:	601a      	str	r2, [r3, #0]
 80299de:	605a      	str	r2, [r3, #4]
 80299e0:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80299e2:	2300      	movs	r3, #0
 80299e4:	e003      	b.n	80299ee <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 80299e6:	6878      	ldr	r0, [r7, #4]
 80299e8:	f000 f80e 	bl	8029a08 <lfs_deinit>
    return err;
 80299ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80299ee:	4618      	mov	r0, r3
 80299f0:	3730      	adds	r7, #48	; 0x30
 80299f2:	46bd      	mov	sp, r7
 80299f4:	bd80      	pop	{r7, pc}
 80299f6:	bf00      	nop
 80299f8:	08033da0 	.word	0x08033da0
 80299fc:	08034b78 	.word	0x08034b78
 8029a00:	08033800 	.word	0x08033800
 8029a04:	08033dbc 	.word	0x08033dbc

08029a08 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8029a08:	b580      	push	{r7, lr}
 8029a0a:	b082      	sub	sp, #8
 8029a0c:	af00      	add	r7, sp, #0
 8029a0e:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8029a10:	687b      	ldr	r3, [r7, #4]
 8029a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a16:	2b00      	cmp	r3, #0
 8029a18:	d104      	bne.n	8029a24 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8029a1a:	687b      	ldr	r3, [r7, #4]
 8029a1c:	68db      	ldr	r3, [r3, #12]
 8029a1e:	4618      	mov	r0, r3
 8029a20:	f7f9 ffdb 	bl	80239da <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8029a24:	687b      	ldr	r3, [r7, #4]
 8029a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029a2a:	2b00      	cmp	r3, #0
 8029a2c:	d104      	bne.n	8029a38 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8029a2e:	687b      	ldr	r3, [r7, #4]
 8029a30:	69db      	ldr	r3, [r3, #28]
 8029a32:	4618      	mov	r0, r3
 8029a34:	f7f9 ffd1 	bl	80239da <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8029a38:	687b      	ldr	r3, [r7, #4]
 8029a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8029a3e:	2b00      	cmp	r3, #0
 8029a40:	d104      	bne.n	8029a4c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8029a42:	687b      	ldr	r3, [r7, #4]
 8029a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029a46:	4618      	mov	r0, r3
 8029a48:	f7f9 ffc7 	bl	80239da <lfs_free>
    }

    return 0;
 8029a4c:	2300      	movs	r3, #0
}
 8029a4e:	4618      	mov	r0, r3
 8029a50:	3708      	adds	r7, #8
 8029a52:	46bd      	mov	sp, r7
 8029a54:	bd80      	pop	{r7, pc}
	...

08029a58 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8029a58:	b580      	push	{r7, lr}
 8029a5a:	b0a0      	sub	sp, #128	; 0x80
 8029a5c:	af00      	add	r7, sp, #0
 8029a5e:	6078      	str	r0, [r7, #4]
 8029a60:	6039      	str	r1, [r7, #0]
    int err = 0;
 8029a62:	2300      	movs	r3, #0
 8029a64:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 8029a66:	6839      	ldr	r1, [r7, #0]
 8029a68:	6878      	ldr	r0, [r7, #4]
 8029a6a:	f7ff fe13 	bl	8029694 <lfs_init>
 8029a6e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029a72:	2b00      	cmp	r3, #0
 8029a74:	d001      	beq.n	8029a7a <lfs_rawformat+0x22>
            return err;
 8029a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029a78:	e082      	b.n	8029b80 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8029a7a:	687b      	ldr	r3, [r7, #4]
 8029a7c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8029a7e:	687b      	ldr	r3, [r7, #4]
 8029a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029a84:	461a      	mov	r2, r3
 8029a86:	2100      	movs	r1, #0
 8029a88:	f004 f810 	bl	802daac <memset>
        lfs->free.off = 0;
 8029a8c:	687b      	ldr	r3, [r7, #4]
 8029a8e:	2200      	movs	r2, #0
 8029a90:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029a92:	687b      	ldr	r3, [r7, #4]
 8029a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029a98:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 8029a9a:	687b      	ldr	r3, [r7, #4]
 8029a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029a9e:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8029aa0:	4619      	mov	r1, r3
 8029aa2:	4610      	mov	r0, r2
 8029aa4:	f7f9 feee 	bl	8023884 <lfs_min>
 8029aa8:	4602      	mov	r2, r0
 8029aaa:	687b      	ldr	r3, [r7, #4]
 8029aac:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8029aae:	687b      	ldr	r3, [r7, #4]
 8029ab0:	2200      	movs	r2, #0
 8029ab2:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8029ab4:	6878      	ldr	r0, [r7, #4]
 8029ab6:	f7fa fe2b 	bl	8024710 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 8029aba:	f107 030c 	add.w	r3, r7, #12
 8029abe:	4619      	mov	r1, r3
 8029ac0:	6878      	ldr	r0, [r7, #4]
 8029ac2:	f7fc fc7d 	bl	80263c0 <lfs_dir_alloc>
 8029ac6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029ac8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029aca:	2b00      	cmp	r3, #0
 8029acc:	d14f      	bne.n	8029b6e <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 8029ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8029ad2:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8029ad4:	687b      	ldr	r3, [r7, #4]
 8029ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ad8:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8029ada:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8029adc:	687b      	ldr	r3, [r7, #4]
 8029ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029ae0:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8029ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8029ae4:	687b      	ldr	r3, [r7, #4]
 8029ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8029ae8:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8029aea:	687b      	ldr	r3, [r7, #4]
 8029aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8029aee:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8029af0:	687b      	ldr	r3, [r7, #4]
 8029af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8029af4:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8029af6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029afa:	4618      	mov	r0, r3
 8029afc:	f7fa fd48 	bl	8024590 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8029b00:	4b21      	ldr	r3, [pc, #132]	; (8029b88 <lfs_rawformat+0x130>)
 8029b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8029b04:	2300      	movs	r3, #0
 8029b06:	653b      	str	r3, [r7, #80]	; 0x50
 8029b08:	4b20      	ldr	r3, [pc, #128]	; (8029b8c <lfs_rawformat+0x134>)
 8029b0a:	657b      	str	r3, [r7, #84]	; 0x54
 8029b0c:	4b20      	ldr	r3, [pc, #128]	; (8029b90 <lfs_rawformat+0x138>)
 8029b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8029b10:	4b20      	ldr	r3, [pc, #128]	; (8029b94 <lfs_rawformat+0x13c>)
 8029b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8029b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8029b18:	663b      	str	r3, [r7, #96]	; 0x60
 8029b1a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8029b1e:	f107 010c 	add.w	r1, r7, #12
 8029b22:	2303      	movs	r3, #3
 8029b24:	6878      	ldr	r0, [r7, #4]
 8029b26:	f7fd fe67 	bl	80277f8 <lfs_dir_commit>
 8029b2a:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8029b2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029b2e:	2b00      	cmp	r3, #0
 8029b30:	d11f      	bne.n	8029b72 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8029b32:	2300      	movs	r3, #0
 8029b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8029b38:	f107 010c 	add.w	r1, r7, #12
 8029b3c:	2300      	movs	r3, #0
 8029b3e:	2200      	movs	r2, #0
 8029b40:	6878      	ldr	r0, [r7, #4]
 8029b42:	f7fd fe59 	bl	80277f8 <lfs_dir_commit>
 8029b46:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029b4a:	2b00      	cmp	r3, #0
 8029b4c:	d113      	bne.n	8029b76 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8029b4e:	2300      	movs	r3, #0
 8029b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8029b52:	2301      	movs	r3, #1
 8029b54:	633b      	str	r3, [r7, #48]	; 0x30
 8029b56:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8029b5a:	f107 030c 	add.w	r3, r7, #12
 8029b5e:	4619      	mov	r1, r3
 8029b60:	6878      	ldr	r0, [r7, #4]
 8029b62:	f7fc f82f 	bl	8025bc4 <lfs_dir_fetch>
 8029b66:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8029b68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8029b6a:	2b00      	cmp	r3, #0
 8029b6c:	e004      	b.n	8029b78 <lfs_rawformat+0x120>
            goto cleanup;
 8029b6e:	bf00      	nop
 8029b70:	e002      	b.n	8029b78 <lfs_rawformat+0x120>
            goto cleanup;
 8029b72:	bf00      	nop
 8029b74:	e000      	b.n	8029b78 <lfs_rawformat+0x120>
            goto cleanup;
 8029b76:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8029b78:	6878      	ldr	r0, [r7, #4]
 8029b7a:	f7ff ff45 	bl	8029a08 <lfs_deinit>
    return err;
 8029b7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8029b80:	4618      	mov	r0, r3
 8029b82:	3780      	adds	r7, #128	; 0x80
 8029b84:	46bd      	mov	sp, r7
 8029b86:	bd80      	pop	{r7, pc}
 8029b88:	40100000 	.word	0x40100000
 8029b8c:	0ff00008 	.word	0x0ff00008
 8029b90:	08033dec 	.word	0x08033dec
 8029b94:	20100018 	.word	0x20100018

08029b98 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8029b98:	b580      	push	{r7, lr}
 8029b9a:	b09c      	sub	sp, #112	; 0x70
 8029b9c:	af04      	add	r7, sp, #16
 8029b9e:	6078      	str	r0, [r7, #4]
 8029ba0:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8029ba2:	6839      	ldr	r1, [r7, #0]
 8029ba4:	6878      	ldr	r0, [r7, #4]
 8029ba6:	f7ff fd75 	bl	8029694 <lfs_init>
 8029baa:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8029bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029bae:	2b00      	cmp	r3, #0
 8029bb0:	d001      	beq.n	8029bb6 <lfs_rawmount+0x1e>
        return err;
 8029bb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029bb4:	e192      	b.n	8029edc <lfs_rawmount+0x344>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029bba:	2220      	movs	r2, #32
 8029bbc:	2100      	movs	r1, #0
 8029bbe:	4618      	mov	r0, r3
 8029bc0:	f003 ff74 	bl	802daac <memset>
 8029bc4:	2301      	movs	r3, #1
 8029bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8029bc8:	2300      	movs	r3, #0
 8029bca:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8029bcc:	e10b      	b.n	8029de6 <lfs_rawmount+0x24e>
        if (cycle >= lfs->cfg->block_count/2) {
 8029bce:	687b      	ldr	r3, [r7, #4]
 8029bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029bd2:	6a1b      	ldr	r3, [r3, #32]
 8029bd4:	085b      	lsrs	r3, r3, #1
 8029bd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8029bd8:	429a      	cmp	r2, r3
 8029bda:	d303      	bcc.n	8029be4 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8029bdc:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029be0:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029be2:	e177      	b.n	8029ed4 <lfs_rawmount+0x33c>
        }
        cycle += 1;
 8029be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029be6:	3301      	adds	r3, #1
 8029be8:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8029bea:	687b      	ldr	r3, [r7, #4]
 8029bec:	627b      	str	r3, [r7, #36]	; 0x24
 8029bee:	4b8a      	ldr	r3, [pc, #552]	; (8029e18 <lfs_rawmount+0x280>)
 8029bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8029bf2:	2308      	movs	r3, #8
 8029bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8029bf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029bfa:	f103 0218 	add.w	r2, r3, #24
 8029bfe:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8029c06:	9303      	str	r3, [sp, #12]
 8029c08:	4b84      	ldr	r3, [pc, #528]	; (8029e1c <lfs_rawmount+0x284>)
 8029c0a:	9302      	str	r3, [sp, #8]
 8029c0c:	2300      	movs	r3, #0
 8029c0e:	9301      	str	r3, [sp, #4]
 8029c10:	4b83      	ldr	r3, [pc, #524]	; (8029e20 <lfs_rawmount+0x288>)
 8029c12:	9300      	str	r3, [sp, #0]
 8029c14:	4b83      	ldr	r3, [pc, #524]	; (8029e24 <lfs_rawmount+0x28c>)
 8029c16:	6878      	ldr	r0, [r7, #4]
 8029c18:	f7fb fc66 	bl	80254e8 <lfs_dir_fetchmatch>
 8029c1c:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8029c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c20:	2b00      	cmp	r3, #0
 8029c22:	da02      	bge.n	8029c2a <lfs_rawmount+0x92>
            err = tag;
 8029c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c26:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8029c28:	e154      	b.n	8029ed4 <lfs_rawmount+0x33c>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8029c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c2c:	2b00      	cmp	r3, #0
 8029c2e:	f000 80cd 	beq.w	8029dcc <lfs_rawmount+0x234>
 8029c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c34:	4618      	mov	r0, r3
 8029c36:	f7fa faee 	bl	8024216 <lfs_tag_isdelete>
 8029c3a:	4603      	mov	r3, r0
 8029c3c:	f083 0301 	eor.w	r3, r3, #1
 8029c40:	b2db      	uxtb	r3, r3
 8029c42:	2b00      	cmp	r3, #0
 8029c44:	f000 80c2 	beq.w	8029dcc <lfs_rawmount+0x234>
            // update root
            lfs->root[0] = dir.pair[0];
 8029c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8029c4a:	687b      	ldr	r3, [r7, #4]
 8029c4c:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8029c4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8029c50:	687b      	ldr	r3, [r7, #4]
 8029c52:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8029c54:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8029c58:	f107 030c 	add.w	r3, r7, #12
 8029c5c:	9300      	str	r3, [sp, #0]
 8029c5e:	4b72      	ldr	r3, [pc, #456]	; (8029e28 <lfs_rawmount+0x290>)
 8029c60:	4a70      	ldr	r2, [pc, #448]	; (8029e24 <lfs_rawmount+0x28c>)
 8029c62:	6878      	ldr	r0, [r7, #4]
 8029c64:	f7fa ff0e 	bl	8024a84 <lfs_dir_get>
 8029c68:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8029c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c6c:	2b00      	cmp	r3, #0
 8029c6e:	da02      	bge.n	8029c76 <lfs_rawmount+0xde>
                err = tag;
 8029c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8029c72:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029c74:	e12e      	b.n	8029ed4 <lfs_rawmount+0x33c>
            }
            lfs_superblock_fromle32(&superblock);
 8029c76:	f107 030c 	add.w	r3, r7, #12
 8029c7a:	4618      	mov	r0, r3
 8029c7c:	f7fa fc50 	bl	8024520 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8029c80:	68fb      	ldr	r3, [r7, #12]
 8029c82:	0c1b      	lsrs	r3, r3, #16
 8029c84:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8029c88:	68fb      	ldr	r3, [r7, #12]
 8029c8a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8029c8e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8029c92:	2b02      	cmp	r3, #2
 8029c94:	d103      	bne.n	8029c9e <lfs_rawmount+0x106>
 8029c96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8029c9a:	2b00      	cmp	r3, #0
 8029c9c:	d011      	beq.n	8029cc2 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8029c9e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8029ca2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8029ca6:	4961      	ldr	r1, [pc, #388]	; (8029e2c <lfs_rawmount+0x294>)
 8029ca8:	9101      	str	r1, [sp, #4]
 8029caa:	9300      	str	r3, [sp, #0]
 8029cac:	4613      	mov	r3, r2
 8029cae:	f241 0233 	movw	r2, #4147	; 0x1033
 8029cb2:	495f      	ldr	r1, [pc, #380]	; (8029e30 <lfs_rawmount+0x298>)
 8029cb4:	485f      	ldr	r0, [pc, #380]	; (8029e34 <lfs_rawmount+0x29c>)
 8029cb6:	f003 fd63 	bl	802d780 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8029cba:	f06f 0315 	mvn.w	r3, #21
 8029cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029cc0:	e083      	b.n	8029dca <lfs_rawmount+0x232>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8029cc2:	69bb      	ldr	r3, [r7, #24]
 8029cc4:	2b00      	cmp	r3, #0
 8029cc6:	d018      	beq.n	8029cfa <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8029cc8:	69ba      	ldr	r2, [r7, #24]
 8029cca:	687b      	ldr	r3, [r7, #4]
 8029ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029cce:	429a      	cmp	r2, r3
 8029cd0:	d910      	bls.n	8029cf4 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8029cd2:	69ba      	ldr	r2, [r7, #24]
 8029cd4:	687b      	ldr	r3, [r7, #4]
 8029cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8029cd8:	4954      	ldr	r1, [pc, #336]	; (8029e2c <lfs_rawmount+0x294>)
 8029cda:	9101      	str	r1, [sp, #4]
 8029cdc:	9300      	str	r3, [sp, #0]
 8029cde:	4613      	mov	r3, r2
 8029ce0:	f241 023c 	movw	r2, #4156	; 0x103c
 8029ce4:	4952      	ldr	r1, [pc, #328]	; (8029e30 <lfs_rawmount+0x298>)
 8029ce6:	4854      	ldr	r0, [pc, #336]	; (8029e38 <lfs_rawmount+0x2a0>)
 8029ce8:	f003 fd4a 	bl	802d780 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8029cec:	f06f 0315 	mvn.w	r3, #21
 8029cf0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029cf2:	e06a      	b.n	8029dca <lfs_rawmount+0x232>
                }

                lfs->name_max = superblock.name_max;
 8029cf4:	69ba      	ldr	r2, [r7, #24]
 8029cf6:	687b      	ldr	r3, [r7, #4]
 8029cf8:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8029cfa:	69fb      	ldr	r3, [r7, #28]
 8029cfc:	2b00      	cmp	r3, #0
 8029cfe:	d018      	beq.n	8029d32 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8029d00:	69fa      	ldr	r2, [r7, #28]
 8029d02:	687b      	ldr	r3, [r7, #4]
 8029d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029d06:	429a      	cmp	r2, r3
 8029d08:	d910      	bls.n	8029d2c <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8029d0a:	69fa      	ldr	r2, [r7, #28]
 8029d0c:	687b      	ldr	r3, [r7, #4]
 8029d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8029d10:	4946      	ldr	r1, [pc, #280]	; (8029e2c <lfs_rawmount+0x294>)
 8029d12:	9101      	str	r1, [sp, #4]
 8029d14:	9300      	str	r3, [sp, #0]
 8029d16:	4613      	mov	r3, r2
 8029d18:	f241 0247 	movw	r2, #4167	; 0x1047
 8029d1c:	4944      	ldr	r1, [pc, #272]	; (8029e30 <lfs_rawmount+0x298>)
 8029d1e:	4847      	ldr	r0, [pc, #284]	; (8029e3c <lfs_rawmount+0x2a4>)
 8029d20:	f003 fd2e 	bl	802d780 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8029d24:	f06f 0315 	mvn.w	r3, #21
 8029d28:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029d2a:	e04e      	b.n	8029dca <lfs_rawmount+0x232>
                }

                lfs->file_max = superblock.file_max;
 8029d2c:	69fa      	ldr	r2, [r7, #28]
 8029d2e:	687b      	ldr	r3, [r7, #4]
 8029d30:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8029d32:	6a3b      	ldr	r3, [r7, #32]
 8029d34:	2b00      	cmp	r3, #0
 8029d36:	d018      	beq.n	8029d6a <lfs_rawmount+0x1d2>
                if (superblock.attr_max > lfs->attr_max) {
 8029d38:	6a3a      	ldr	r2, [r7, #32]
 8029d3a:	687b      	ldr	r3, [r7, #4]
 8029d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029d3e:	429a      	cmp	r2, r3
 8029d40:	d910      	bls.n	8029d64 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8029d42:	6a3a      	ldr	r2, [r7, #32]
 8029d44:	687b      	ldr	r3, [r7, #4]
 8029d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8029d48:	4938      	ldr	r1, [pc, #224]	; (8029e2c <lfs_rawmount+0x294>)
 8029d4a:	9101      	str	r1, [sp, #4]
 8029d4c:	9300      	str	r3, [sp, #0]
 8029d4e:	4613      	mov	r3, r2
 8029d50:	f241 0252 	movw	r2, #4178	; 0x1052
 8029d54:	4936      	ldr	r1, [pc, #216]	; (8029e30 <lfs_rawmount+0x298>)
 8029d56:	483a      	ldr	r0, [pc, #232]	; (8029e40 <lfs_rawmount+0x2a8>)
 8029d58:	f003 fd12 	bl	802d780 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8029d5c:	f06f 0315 	mvn.w	r3, #21
 8029d60:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8029d62:	e032      	b.n	8029dca <lfs_rawmount+0x232>
                }

                lfs->attr_max = superblock.attr_max;
 8029d64:	6a3a      	ldr	r2, [r7, #32]
 8029d66:	687b      	ldr	r3, [r7, #4]
 8029d68:	675a      	str	r2, [r3, #116]	; 0x74
            }

            if (superblock.block_count != lfs->cfg->block_count) {
 8029d6a:	697a      	ldr	r2, [r7, #20]
 8029d6c:	687b      	ldr	r3, [r7, #4]
 8029d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029d70:	6a1b      	ldr	r3, [r3, #32]
 8029d72:	429a      	cmp	r2, r3
 8029d74:	d011      	beq.n	8029d9a <lfs_rawmount+0x202>
                LFS_ERROR("Invalid block count (%"PRIu32" != %"PRIu32")",
 8029d76:	697a      	ldr	r2, [r7, #20]
 8029d78:	687b      	ldr	r3, [r7, #4]
 8029d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029d7c:	6a1b      	ldr	r3, [r3, #32]
 8029d7e:	492b      	ldr	r1, [pc, #172]	; (8029e2c <lfs_rawmount+0x294>)
 8029d80:	9101      	str	r1, [sp, #4]
 8029d82:	9300      	str	r3, [sp, #0]
 8029d84:	4613      	mov	r3, r2
 8029d86:	f241 025c 	movw	r2, #4188	; 0x105c
 8029d8a:	4929      	ldr	r1, [pc, #164]	; (8029e30 <lfs_rawmount+0x298>)
 8029d8c:	482d      	ldr	r0, [pc, #180]	; (8029e44 <lfs_rawmount+0x2ac>)
 8029d8e:	f003 fcf7 	bl	802d780 <iprintf>
                        superblock.block_count, lfs->cfg->block_count);
                err = LFS_ERR_INVAL;
 8029d92:	f06f 0315 	mvn.w	r3, #21
 8029d96:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029d98:	e017      	b.n	8029dca <lfs_rawmount+0x232>
            }

            if (superblock.block_size != lfs->cfg->block_size) {
 8029d9a:	693a      	ldr	r2, [r7, #16]
 8029d9c:	687b      	ldr	r3, [r7, #4]
 8029d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029da0:	69db      	ldr	r3, [r3, #28]
 8029da2:	429a      	cmp	r2, r3
 8029da4:	d012      	beq.n	8029dcc <lfs_rawmount+0x234>
                LFS_ERROR("Invalid block size (%"PRIu32" != %"PRIu32")",
 8029da6:	693a      	ldr	r2, [r7, #16]
 8029da8:	687b      	ldr	r3, [r7, #4]
 8029daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029dac:	69db      	ldr	r3, [r3, #28]
 8029dae:	491f      	ldr	r1, [pc, #124]	; (8029e2c <lfs_rawmount+0x294>)
 8029db0:	9101      	str	r1, [sp, #4]
 8029db2:	9300      	str	r3, [sp, #0]
 8029db4:	4613      	mov	r3, r2
 8029db6:	f241 0263 	movw	r2, #4195	; 0x1063
 8029dba:	491d      	ldr	r1, [pc, #116]	; (8029e30 <lfs_rawmount+0x298>)
 8029dbc:	4822      	ldr	r0, [pc, #136]	; (8029e48 <lfs_rawmount+0x2b0>)
 8029dbe:	f003 fcdf 	bl	802d780 <iprintf>
                        superblock.block_size, lfs->cfg->block_size);
                err = LFS_ERR_INVAL;
 8029dc2:	f06f 0315 	mvn.w	r3, #21
 8029dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8029dc8:	bf00      	nop
            goto cleanup;
 8029dca:	e083      	b.n	8029ed4 <lfs_rawmount+0x33c>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8029dcc:	687b      	ldr	r3, [r7, #4]
 8029dce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8029dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029dd6:	4619      	mov	r1, r3
 8029dd8:	6878      	ldr	r0, [r7, #4]
 8029dda:	f7fb ff0f 	bl	8025bfc <lfs_dir_getgstate>
 8029dde:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8029de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029de2:	2b00      	cmp	r3, #0
 8029de4:	d175      	bne.n	8029ed2 <lfs_rawmount+0x33a>
    while (!lfs_pair_isnull(dir.tail)) {
 8029de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8029dea:	3318      	adds	r3, #24
 8029dec:	4618      	mov	r0, r3
 8029dee:	f7fa f95e 	bl	80240ae <lfs_pair_isnull>
 8029df2:	4603      	mov	r3, r0
 8029df4:	f083 0301 	eor.w	r3, r3, #1
 8029df8:	b2db      	uxtb	r3, r3
 8029dfa:	2b00      	cmp	r3, #0
 8029dfc:	f47f aee7 	bne.w	8029bce <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8029e00:	687b      	ldr	r3, [r7, #4]
 8029e02:	3320      	adds	r3, #32
 8029e04:	4618      	mov	r0, r3
 8029e06:	f7fa f952 	bl	80240ae <lfs_pair_isnull>
 8029e0a:	4603      	mov	r3, r0
 8029e0c:	2b00      	cmp	r3, #0
 8029e0e:	d01d      	beq.n	8029e4c <lfs_rawmount+0x2b4>
        err = LFS_ERR_INVAL;
 8029e10:	f06f 0315 	mvn.w	r3, #21
 8029e14:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8029e16:	e05d      	b.n	8029ed4 <lfs_rawmount+0x33c>
 8029e18:	08033dec 	.word	0x08033dec
 8029e1c:	08025d55 	.word	0x08025d55
 8029e20:	0ff00008 	.word	0x0ff00008
 8029e24:	7ffffc00 	.word	0x7ffffc00
 8029e28:	20100018 	.word	0x20100018
 8029e2c:	08033914 	.word	0x08033914
 8029e30:	08033800 	.word	0x08033800
 8029e34:	08033df8 	.word	0x08033df8
 8029e38:	08033e24 	.word	0x08033e24
 8029e3c:	08033e58 	.word	0x08033e58
 8029e40:	08033e8c 	.word	0x08033e8c
 8029e44:	08033ec0 	.word	0x08033ec0
 8029e48:	08033ef4 	.word	0x08033ef4
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8029e4c:	687b      	ldr	r3, [r7, #4]
 8029e4e:	3330      	adds	r3, #48	; 0x30
 8029e50:	4618      	mov	r0, r3
 8029e52:	f7fa fa83 	bl	802435c <lfs_gstate_iszero>
 8029e56:	4603      	mov	r3, r0
 8029e58:	f083 0301 	eor.w	r3, r3, #1
 8029e5c:	b2db      	uxtb	r3, r3
 8029e5e:	2b00      	cmp	r3, #0
 8029e60:	d010      	beq.n	8029e84 <lfs_rawmount+0x2ec>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8029e62:	687b      	ldr	r3, [r7, #4]
 8029e64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8029e66:	687b      	ldr	r3, [r7, #4]
 8029e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8029e6a:	687a      	ldr	r2, [r7, #4]
 8029e6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8029e6e:	481d      	ldr	r0, [pc, #116]	; (8029ee4 <lfs_rawmount+0x34c>)
 8029e70:	9002      	str	r0, [sp, #8]
 8029e72:	9201      	str	r2, [sp, #4]
 8029e74:	9300      	str	r3, [sp, #0]
 8029e76:	460b      	mov	r3, r1
 8029e78:	f241 0279 	movw	r2, #4217	; 0x1079
 8029e7c:	491a      	ldr	r1, [pc, #104]	; (8029ee8 <lfs_rawmount+0x350>)
 8029e7e:	481b      	ldr	r0, [pc, #108]	; (8029eec <lfs_rawmount+0x354>)
 8029e80:	f003 fc7e 	bl	802d780 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8029e84:	687b      	ldr	r3, [r7, #4]
 8029e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029e88:	4618      	mov	r0, r3
 8029e8a:	f7fa f9b6 	bl	80241fa <lfs_tag_isvalid>
 8029e8e:	4603      	mov	r3, r0
 8029e90:	f083 0301 	eor.w	r3, r3, #1
 8029e94:	b2db      	uxtb	r3, r3
 8029e96:	461a      	mov	r2, r3
 8029e98:	687b      	ldr	r3, [r7, #4]
 8029e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029e9c:	441a      	add	r2, r3
 8029e9e:	687b      	ldr	r3, [r7, #4]
 8029ea0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8029ea2:	687b      	ldr	r3, [r7, #4]
 8029ea4:	687a      	ldr	r2, [r7, #4]
 8029ea6:	333c      	adds	r3, #60	; 0x3c
 8029ea8:	3230      	adds	r2, #48	; 0x30
 8029eaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8029eac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8029eb0:	687b      	ldr	r3, [r7, #4]
 8029eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029eb4:	687a      	ldr	r2, [r7, #4]
 8029eb6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8029eb8:	6a12      	ldr	r2, [r2, #32]
 8029eba:	fbb3 f1f2 	udiv	r1, r3, r2
 8029ebe:	fb01 f202 	mul.w	r2, r1, r2
 8029ec2:	1a9a      	subs	r2, r3, r2
 8029ec4:	687b      	ldr	r3, [r7, #4]
 8029ec6:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8029ec8:	6878      	ldr	r0, [r7, #4]
 8029eca:	f7fa fc30 	bl	802472e <lfs_alloc_drop>

    return 0;
 8029ece:	2300      	movs	r3, #0
 8029ed0:	e004      	b.n	8029edc <lfs_rawmount+0x344>
            goto cleanup;
 8029ed2:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8029ed4:	6878      	ldr	r0, [r7, #4]
 8029ed6:	f000 f80b 	bl	8029ef0 <lfs_rawunmount>
    return err;
 8029eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8029edc:	4618      	mov	r0, r3
 8029ede:	3760      	adds	r7, #96	; 0x60
 8029ee0:	46bd      	mov	sp, r7
 8029ee2:	bd80      	pop	{r7, pc}
 8029ee4:	08033914 	.word	0x08033914
 8029ee8:	08033800 	.word	0x08033800
 8029eec:	08033f24 	.word	0x08033f24

08029ef0 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8029ef0:	b580      	push	{r7, lr}
 8029ef2:	b082      	sub	sp, #8
 8029ef4:	af00      	add	r7, sp, #0
 8029ef6:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8029ef8:	6878      	ldr	r0, [r7, #4]
 8029efa:	f7ff fd85 	bl	8029a08 <lfs_deinit>
 8029efe:	4603      	mov	r3, r0
}
 8029f00:	4618      	mov	r0, r3
 8029f02:	3708      	adds	r7, #8
 8029f04:	46bd      	mov	sp, r7
 8029f06:	bd80      	pop	{r7, pc}

08029f08 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8029f08:	b590      	push	{r4, r7, lr}
 8029f0a:	b09d      	sub	sp, #116	; 0x74
 8029f0c:	af04      	add	r7, sp, #16
 8029f0e:	60f8      	str	r0, [r7, #12]
 8029f10:	60b9      	str	r1, [r7, #8]
 8029f12:	607a      	str	r2, [r7, #4]
 8029f14:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8029f16:	f107 0318 	add.w	r3, r7, #24
 8029f1a:	2220      	movs	r2, #32
 8029f1c:	2100      	movs	r1, #0
 8029f1e:	4618      	mov	r0, r3
 8029f20:	f003 fdc4 	bl	802daac <memset>
 8029f24:	2301      	movs	r3, #1
 8029f26:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8029f28:	2300      	movs	r3, #0
 8029f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8029f2c:	e0a7      	b.n	802a07e <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8029f2e:	68fb      	ldr	r3, [r7, #12]
 8029f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8029f32:	6a1b      	ldr	r3, [r3, #32]
 8029f34:	085b      	lsrs	r3, r3, #1
 8029f36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8029f38:	429a      	cmp	r2, r3
 8029f3a:	d302      	bcc.n	8029f42 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8029f3c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8029f40:	e102      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8029f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8029f44:	3301      	adds	r3, #1
 8029f46:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8029f48:	2300      	movs	r3, #0
 8029f4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8029f4c:	e013      	b.n	8029f76 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8029f4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029f50:	3306      	adds	r3, #6
 8029f52:	009b      	lsls	r3, r3, #2
 8029f54:	3360      	adds	r3, #96	; 0x60
 8029f56:	443b      	add	r3, r7
 8029f58:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8029f5c:	68bb      	ldr	r3, [r7, #8]
 8029f5e:	4611      	mov	r1, r2
 8029f60:	6878      	ldr	r0, [r7, #4]
 8029f62:	4798      	blx	r3
 8029f64:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8029f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029f68:	2b00      	cmp	r3, #0
 8029f6a:	d001      	beq.n	8029f70 <lfs_fs_rawtraverse+0x68>
                return err;
 8029f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8029f6e:	e0eb      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8029f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029f72:	3301      	adds	r3, #1
 8029f74:	65bb      	str	r3, [r7, #88]	; 0x58
 8029f76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8029f78:	2b01      	cmp	r3, #1
 8029f7a:	dde8      	ble.n	8029f4e <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8029f7c:	f107 0318 	add.w	r3, r7, #24
 8029f80:	f103 0218 	add.w	r2, r3, #24
 8029f84:	f107 0318 	add.w	r3, r7, #24
 8029f88:	4619      	mov	r1, r3
 8029f8a:	68f8      	ldr	r0, [r7, #12]
 8029f8c:	f7fb fe1a 	bl	8025bc4 <lfs_dir_fetch>
 8029f90:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8029f92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029f94:	2b00      	cmp	r3, #0
 8029f96:	d001      	beq.n	8029f9c <lfs_fs_rawtraverse+0x94>
            return err;
 8029f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8029f9a:	e0d5      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8029f9c:	2300      	movs	r3, #0
 8029f9e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8029fa2:	e067      	b.n	802a074 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8029fa4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8029fa8:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8029faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8029fae:	f043 0308 	orr.w	r3, r3, #8
 8029fb2:	f107 0118 	add.w	r1, r7, #24
 8029fb6:	f107 0210 	add.w	r2, r7, #16
 8029fba:	9200      	str	r2, [sp, #0]
 8029fbc:	4a64      	ldr	r2, [pc, #400]	; (802a150 <lfs_fs_rawtraverse+0x248>)
 8029fbe:	68f8      	ldr	r0, [r7, #12]
 8029fc0:	f7fa fd60 	bl	8024a84 <lfs_dir_get>
 8029fc4:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8029fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029fc8:	2b00      	cmp	r3, #0
 8029fca:	da05      	bge.n	8029fd8 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8029fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029fce:	f113 0f02 	cmn.w	r3, #2
 8029fd2:	d049      	beq.n	802a068 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8029fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029fd6:	e0b7      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8029fd8:	f107 0310 	add.w	r3, r7, #16
 8029fdc:	4618      	mov	r0, r3
 8029fde:	f7fa fa6f 	bl	80244c0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8029fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8029fe4:	4618      	mov	r0, r3
 8029fe6:	f7fa f939 	bl	802425c <lfs_tag_type3>
 8029fea:	4603      	mov	r3, r0
 8029fec:	461a      	mov	r2, r3
 8029fee:	f240 2302 	movw	r3, #514	; 0x202
 8029ff2:	429a      	cmp	r2, r3
 8029ff4:	d113      	bne.n	802a01e <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8029ff6:	68f9      	ldr	r1, [r7, #12]
 8029ff8:	6938      	ldr	r0, [r7, #16]
 8029ffa:	697b      	ldr	r3, [r7, #20]
 8029ffc:	687a      	ldr	r2, [r7, #4]
 8029ffe:	9202      	str	r2, [sp, #8]
 802a000:	68ba      	ldr	r2, [r7, #8]
 802a002:	9201      	str	r2, [sp, #4]
 802a004:	9300      	str	r3, [sp, #0]
 802a006:	4603      	mov	r3, r0
 802a008:	460a      	mov	r2, r1
 802a00a:	2100      	movs	r1, #0
 802a00c:	68f8      	ldr	r0, [r7, #12]
 802a00e:	f7fe f811 	bl	8028034 <lfs_ctz_traverse>
 802a012:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 802a014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a016:	2b00      	cmp	r3, #0
 802a018:	d027      	beq.n	802a06a <lfs_fs_rawtraverse+0x162>
                    return err;
 802a01a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a01c:	e094      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 802a01e:	78fb      	ldrb	r3, [r7, #3]
 802a020:	2b00      	cmp	r3, #0
 802a022:	d022      	beq.n	802a06a <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 802a024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a026:	4618      	mov	r0, r3
 802a028:	f7fa f918 	bl	802425c <lfs_tag_type3>
 802a02c:	4603      	mov	r3, r0
            } else if (includeorphans &&
 802a02e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802a032:	d11a      	bne.n	802a06a <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 802a034:	2300      	movs	r3, #0
 802a036:	653b      	str	r3, [r7, #80]	; 0x50
 802a038:	e012      	b.n	802a060 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 802a03a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802a03c:	009b      	lsls	r3, r3, #2
 802a03e:	f107 0210 	add.w	r2, r7, #16
 802a042:	4413      	add	r3, r2
 802a044:	681a      	ldr	r2, [r3, #0]
 802a046:	68bb      	ldr	r3, [r7, #8]
 802a048:	4611      	mov	r1, r2
 802a04a:	6878      	ldr	r0, [r7, #4]
 802a04c:	4798      	blx	r3
 802a04e:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 802a050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a052:	2b00      	cmp	r3, #0
 802a054:	d001      	beq.n	802a05a <lfs_fs_rawtraverse+0x152>
                        return err;
 802a056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802a058:	e076      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 802a05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802a05c:	3301      	adds	r3, #1
 802a05e:	653b      	str	r3, [r7, #80]	; 0x50
 802a060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802a062:	2b01      	cmp	r3, #1
 802a064:	dde9      	ble.n	802a03a <lfs_fs_rawtraverse+0x132>
 802a066:	e000      	b.n	802a06a <lfs_fs_rawtraverse+0x162>
                    continue;
 802a068:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 802a06a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 802a06e:	3301      	adds	r3, #1
 802a070:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 802a074:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 802a076:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 802a07a:	429a      	cmp	r2, r3
 802a07c:	d392      	bcc.n	8029fa4 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 802a07e:	f107 0318 	add.w	r3, r7, #24
 802a082:	3318      	adds	r3, #24
 802a084:	4618      	mov	r0, r3
 802a086:	f7fa f812 	bl	80240ae <lfs_pair_isnull>
 802a08a:	4603      	mov	r3, r0
 802a08c:	f083 0301 	eor.w	r3, r3, #1
 802a090:	b2db      	uxtb	r3, r3
 802a092:	2b00      	cmp	r3, #0
 802a094:	f47f af4b 	bne.w	8029f2e <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802a098:	68fb      	ldr	r3, [r7, #12]
 802a09a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a09c:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a09e:	e04f      	b.n	802a140 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 802a0a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0a2:	799b      	ldrb	r3, [r3, #6]
 802a0a4:	2b01      	cmp	r3, #1
 802a0a6:	d147      	bne.n	802a138 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 802a0a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802a0b0:	2b00      	cmp	r3, #0
 802a0b2:	d01d      	beq.n	802a0f0 <lfs_fs_rawtraverse+0x1e8>
 802a0b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802a0bc:	2b00      	cmp	r3, #0
 802a0be:	d117      	bne.n	802a0f0 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 802a0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0c2:	f103 0140 	add.w	r1, r3, #64	; 0x40
 802a0c6:	68f8      	ldr	r0, [r7, #12]
 802a0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0ca:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 802a0cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802a0d0:	687a      	ldr	r2, [r7, #4]
 802a0d2:	9202      	str	r2, [sp, #8]
 802a0d4:	68ba      	ldr	r2, [r7, #8]
 802a0d6:	9201      	str	r2, [sp, #4]
 802a0d8:	9300      	str	r3, [sp, #0]
 802a0da:	4623      	mov	r3, r4
 802a0dc:	4602      	mov	r2, r0
 802a0de:	68f8      	ldr	r0, [r7, #12]
 802a0e0:	f7fd ffa8 	bl	8028034 <lfs_ctz_traverse>
 802a0e4:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 802a0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802a0e8:	2b00      	cmp	r3, #0
 802a0ea:	d001      	beq.n	802a0f0 <lfs_fs_rawtraverse+0x1e8>
                return err;
 802a0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802a0ee:	e02b      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 802a0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a0f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802a0f8:	2b00      	cmp	r3, #0
 802a0fa:	d01e      	beq.n	802a13a <lfs_fs_rawtraverse+0x232>
 802a0fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802a104:	2b00      	cmp	r3, #0
 802a106:	d118      	bne.n	802a13a <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 802a108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a10a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 802a10e:	68f8      	ldr	r0, [r7, #12]
 802a110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a112:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 802a114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802a118:	687a      	ldr	r2, [r7, #4]
 802a11a:	9202      	str	r2, [sp, #8]
 802a11c:	68ba      	ldr	r2, [r7, #8]
 802a11e:	9201      	str	r2, [sp, #4]
 802a120:	9300      	str	r3, [sp, #0]
 802a122:	4623      	mov	r3, r4
 802a124:	4602      	mov	r2, r0
 802a126:	68f8      	ldr	r0, [r7, #12]
 802a128:	f7fd ff84 	bl	8028034 <lfs_ctz_traverse>
 802a12c:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 802a12e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802a130:	2b00      	cmp	r3, #0
 802a132:	d002      	beq.n	802a13a <lfs_fs_rawtraverse+0x232>
                return err;
 802a134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802a136:	e007      	b.n	802a148 <lfs_fs_rawtraverse+0x240>
            continue;
 802a138:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 802a13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a13c:	681b      	ldr	r3, [r3, #0]
 802a13e:	64fb      	str	r3, [r7, #76]	; 0x4c
 802a140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802a142:	2b00      	cmp	r3, #0
 802a144:	d1ac      	bne.n	802a0a0 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 802a146:	2300      	movs	r3, #0
}
 802a148:	4618      	mov	r0, r3
 802a14a:	3764      	adds	r7, #100	; 0x64
 802a14c:	46bd      	mov	sp, r7
 802a14e:	bd90      	pop	{r4, r7, pc}
 802a150:	700ffc00 	.word	0x700ffc00

0802a154 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 802a154:	b580      	push	{r7, lr}
 802a156:	b086      	sub	sp, #24
 802a158:	af00      	add	r7, sp, #0
 802a15a:	60f8      	str	r0, [r7, #12]
 802a15c:	60b9      	str	r1, [r7, #8]
 802a15e:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 802a160:	687b      	ldr	r3, [r7, #4]
 802a162:	2200      	movs	r2, #0
 802a164:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 802a166:	687b      	ldr	r3, [r7, #4]
 802a168:	2201      	movs	r2, #1
 802a16a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 802a16c:	2300      	movs	r3, #0
 802a16e:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 802a170:	e024      	b.n	802a1bc <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 802a172:	68fb      	ldr	r3, [r7, #12]
 802a174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a176:	6a1b      	ldr	r3, [r3, #32]
 802a178:	085b      	lsrs	r3, r3, #1
 802a17a:	697a      	ldr	r2, [r7, #20]
 802a17c:	429a      	cmp	r2, r3
 802a17e:	d302      	bcc.n	802a186 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a180:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802a184:	e027      	b.n	802a1d6 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 802a186:	697b      	ldr	r3, [r7, #20]
 802a188:	3301      	adds	r3, #1
 802a18a:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 802a18c:	687b      	ldr	r3, [r7, #4]
 802a18e:	3318      	adds	r3, #24
 802a190:	68b9      	ldr	r1, [r7, #8]
 802a192:	4618      	mov	r0, r3
 802a194:	f7f9 ffa6 	bl	80240e4 <lfs_pair_cmp>
 802a198:	4603      	mov	r3, r0
 802a19a:	2b00      	cmp	r3, #0
 802a19c:	d101      	bne.n	802a1a2 <lfs_fs_pred+0x4e>
            return 0;
 802a19e:	2300      	movs	r3, #0
 802a1a0:	e019      	b.n	802a1d6 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 802a1a2:	687b      	ldr	r3, [r7, #4]
 802a1a4:	3318      	adds	r3, #24
 802a1a6:	461a      	mov	r2, r3
 802a1a8:	6879      	ldr	r1, [r7, #4]
 802a1aa:	68f8      	ldr	r0, [r7, #12]
 802a1ac:	f7fb fd0a 	bl	8025bc4 <lfs_dir_fetch>
 802a1b0:	6138      	str	r0, [r7, #16]
        if (err) {
 802a1b2:	693b      	ldr	r3, [r7, #16]
 802a1b4:	2b00      	cmp	r3, #0
 802a1b6:	d001      	beq.n	802a1bc <lfs_fs_pred+0x68>
            return err;
 802a1b8:	693b      	ldr	r3, [r7, #16]
 802a1ba:	e00c      	b.n	802a1d6 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 802a1bc:	687b      	ldr	r3, [r7, #4]
 802a1be:	3318      	adds	r3, #24
 802a1c0:	4618      	mov	r0, r3
 802a1c2:	f7f9 ff74 	bl	80240ae <lfs_pair_isnull>
 802a1c6:	4603      	mov	r3, r0
 802a1c8:	f083 0301 	eor.w	r3, r3, #1
 802a1cc:	b2db      	uxtb	r3, r3
 802a1ce:	2b00      	cmp	r3, #0
 802a1d0:	d1cf      	bne.n	802a172 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a1d2:	f06f 0301 	mvn.w	r3, #1
}
 802a1d6:	4618      	mov	r0, r3
 802a1d8:	3718      	adds	r7, #24
 802a1da:	46bd      	mov	sp, r7
 802a1dc:	bd80      	pop	{r7, pc}

0802a1de <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 802a1de:	b5b0      	push	{r4, r5, r7, lr}
 802a1e0:	b08e      	sub	sp, #56	; 0x38
 802a1e2:	af04      	add	r7, sp, #16
 802a1e4:	60f8      	str	r0, [r7, #12]
 802a1e6:	60b9      	str	r1, [r7, #8]
 802a1e8:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 802a1ea:	68fb      	ldr	r3, [r7, #12]
 802a1ec:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 802a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a1f0:	681b      	ldr	r3, [r3, #0]
 802a1f2:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 802a1f4:	687b      	ldr	r3, [r7, #4]
 802a1f6:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a1f8:	6a3b      	ldr	r3, [r7, #32]
 802a1fa:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 802a1fe:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 802a200:	6a3b      	ldr	r3, [r7, #32]
 802a202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a204:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 802a206:	69fb      	ldr	r3, [r7, #28]
 802a208:	681b      	ldr	r3, [r3, #0]
 802a20a:	69fa      	ldr	r2, [r7, #28]
 802a20c:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 802a20e:	2108      	movs	r1, #8
 802a210:	9103      	str	r1, [sp, #12]
 802a212:	f107 0110 	add.w	r1, r7, #16
 802a216:	9102      	str	r1, [sp, #8]
 802a218:	9201      	str	r2, [sp, #4]
 802a21a:	9300      	str	r3, [sp, #0]
 802a21c:	462b      	mov	r3, r5
 802a21e:	4622      	mov	r2, r4
 802a220:	4601      	mov	r1, r0
 802a222:	6a38      	ldr	r0, [r7, #32]
 802a224:	f7f9 fc0a 	bl	8023a3c <lfs_bd_read>
 802a228:	61b8      	str	r0, [r7, #24]
    if (err) {
 802a22a:	69bb      	ldr	r3, [r7, #24]
 802a22c:	2b00      	cmp	r3, #0
 802a22e:	d001      	beq.n	802a234 <lfs_fs_parent_match+0x56>
        return err;
 802a230:	69bb      	ldr	r3, [r7, #24]
 802a232:	e012      	b.n	802a25a <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 802a234:	f107 0310 	add.w	r3, r7, #16
 802a238:	4618      	mov	r0, r3
 802a23a:	f7f9 ffaa 	bl	8024192 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 802a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a240:	1d1a      	adds	r2, r3, #4
 802a242:	f107 0310 	add.w	r3, r7, #16
 802a246:	4611      	mov	r1, r2
 802a248:	4618      	mov	r0, r3
 802a24a:	f7f9 ff4b 	bl	80240e4 <lfs_pair_cmp>
 802a24e:	4603      	mov	r3, r0
 802a250:	2b00      	cmp	r3, #0
 802a252:	bf14      	ite	ne
 802a254:	2301      	movne	r3, #1
 802a256:	2300      	moveq	r3, #0
 802a258:	b2db      	uxtb	r3, r3
}
 802a25a:	4618      	mov	r0, r3
 802a25c:	3728      	adds	r7, #40	; 0x28
 802a25e:	46bd      	mov	sp, r7
 802a260:	bdb0      	pop	{r4, r5, r7, pc}
	...

0802a264 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 802a264:	b580      	push	{r7, lr}
 802a266:	b08e      	sub	sp, #56	; 0x38
 802a268:	af04      	add	r7, sp, #16
 802a26a:	60f8      	str	r0, [r7, #12]
 802a26c:	60b9      	str	r1, [r7, #8]
 802a26e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 802a270:	687b      	ldr	r3, [r7, #4]
 802a272:	2200      	movs	r2, #0
 802a274:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 802a276:	687b      	ldr	r3, [r7, #4]
 802a278:	2201      	movs	r2, #1
 802a27a:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 802a27c:	2300      	movs	r3, #0
 802a27e:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 802a280:	e030      	b.n	802a2e4 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 802a282:	68fb      	ldr	r3, [r7, #12]
 802a284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 802a286:	6a1b      	ldr	r3, [r3, #32]
 802a288:	085b      	lsrs	r3, r3, #1
 802a28a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a28c:	429a      	cmp	r2, r3
 802a28e:	d302      	bcc.n	802a296 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 802a290:	f06f 0353 	mvn.w	r3, #83	; 0x53
 802a294:	e033      	b.n	802a2fe <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 802a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802a298:	3301      	adds	r3, #1
 802a29a:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a29c:	687b      	ldr	r3, [r7, #4]
 802a29e:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a2a2:	68fb      	ldr	r3, [r7, #12]
 802a2a4:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 802a2a6:	68bb      	ldr	r3, [r7, #8]
 802a2a8:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a2aa:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 802a2ac:	68bb      	ldr	r3, [r7, #8]
 802a2ae:	3304      	adds	r3, #4
 802a2b0:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 802a2b2:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 802a2b4:	f107 0314 	add.w	r3, r7, #20
 802a2b8:	9303      	str	r3, [sp, #12]
 802a2ba:	4b13      	ldr	r3, [pc, #76]	; (802a308 <lfs_fs_parent+0xa4>)
 802a2bc:	9302      	str	r3, [sp, #8]
 802a2be:	2300      	movs	r3, #0
 802a2c0:	9301      	str	r3, [sp, #4]
 802a2c2:	4b12      	ldr	r3, [pc, #72]	; (802a30c <lfs_fs_parent+0xa8>)
 802a2c4:	9300      	str	r3, [sp, #0]
 802a2c6:	4b12      	ldr	r3, [pc, #72]	; (802a310 <lfs_fs_parent+0xac>)
 802a2c8:	6879      	ldr	r1, [r7, #4]
 802a2ca:	68f8      	ldr	r0, [r7, #12]
 802a2cc:	f7fb f90c 	bl	80254e8 <lfs_dir_fetchmatch>
 802a2d0:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 802a2d2:	6a3b      	ldr	r3, [r7, #32]
 802a2d4:	2b00      	cmp	r3, #0
 802a2d6:	d005      	beq.n	802a2e4 <lfs_fs_parent+0x80>
 802a2d8:	6a3b      	ldr	r3, [r7, #32]
 802a2da:	f113 0f02 	cmn.w	r3, #2
 802a2de:	d001      	beq.n	802a2e4 <lfs_fs_parent+0x80>
            return tag;
 802a2e0:	6a3b      	ldr	r3, [r7, #32]
 802a2e2:	e00c      	b.n	802a2fe <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 802a2e4:	687b      	ldr	r3, [r7, #4]
 802a2e6:	3318      	adds	r3, #24
 802a2e8:	4618      	mov	r0, r3
 802a2ea:	f7f9 fee0 	bl	80240ae <lfs_pair_isnull>
 802a2ee:	4603      	mov	r3, r0
 802a2f0:	f083 0301 	eor.w	r3, r3, #1
 802a2f4:	b2db      	uxtb	r3, r3
 802a2f6:	2b00      	cmp	r3, #0
 802a2f8:	d1c3      	bne.n	802a282 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 802a2fa:	f06f 0301 	mvn.w	r3, #1
}
 802a2fe:	4618      	mov	r0, r3
 802a300:	3728      	adds	r7, #40	; 0x28
 802a302:	46bd      	mov	sp, r7
 802a304:	bd80      	pop	{r7, pc}
 802a306:	bf00      	nop
 802a308:	0802a1df 	.word	0x0802a1df
 802a30c:	20000008 	.word	0x20000008
 802a310:	7ff003ff 	.word	0x7ff003ff

0802a314 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 802a314:	b590      	push	{r4, r7, lr}
 802a316:	b083      	sub	sp, #12
 802a318:	af00      	add	r7, sp, #0
 802a31a:	6078      	str	r0, [r7, #4]
 802a31c:	460b      	mov	r3, r1
 802a31e:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 802a320:	687b      	ldr	r3, [r7, #4]
 802a322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a324:	4618      	mov	r0, r3
 802a326:	f7f9 ffd3 	bl	80242d0 <lfs_tag_size>
 802a32a:	4603      	mov	r3, r0
 802a32c:	2b00      	cmp	r3, #0
 802a32e:	d10a      	bne.n	802a346 <lfs_fs_preporphans+0x32>
 802a330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a334:	2b00      	cmp	r3, #0
 802a336:	da06      	bge.n	802a346 <lfs_fs_preporphans+0x32>
 802a338:	4b10      	ldr	r3, [pc, #64]	; (802a37c <lfs_fs_preporphans+0x68>)
 802a33a:	4a11      	ldr	r2, [pc, #68]	; (802a380 <lfs_fs_preporphans+0x6c>)
 802a33c:	f241 114c 	movw	r1, #4428	; 0x114c
 802a340:	4810      	ldr	r0, [pc, #64]	; (802a384 <lfs_fs_preporphans+0x70>)
 802a342:	f002 f9e3 	bl	802c70c <__assert_func>
    lfs->gstate.tag += orphans;
 802a346:	687b      	ldr	r3, [r7, #4]
 802a348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802a34a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 802a34e:	441a      	add	r2, r3
 802a350:	687b      	ldr	r3, [r7, #4]
 802a352:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a354:	687b      	ldr	r3, [r7, #4]
 802a356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a358:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 802a35c:	687b      	ldr	r3, [r7, #4]
 802a35e:	3330      	adds	r3, #48	; 0x30
 802a360:	4618      	mov	r0, r3
 802a362:	f7fa f818 	bl	8024396 <lfs_gstate_hasorphans>
 802a366:	4603      	mov	r3, r0
 802a368:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 802a36a:	ea44 0203 	orr.w	r2, r4, r3
 802a36e:	687b      	ldr	r3, [r7, #4]
 802a370:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 802a372:	2300      	movs	r3, #0
}
 802a374:	4618      	mov	r0, r3
 802a376:	370c      	adds	r7, #12
 802a378:	46bd      	mov	sp, r7
 802a37a:	bd90      	pop	{r4, r7, pc}
 802a37c:	08033f5c 	.word	0x08033f5c
 802a380:	08034b84 	.word	0x08034b84
 802a384:	08033800 	.word	0x08033800

0802a388 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 802a388:	b480      	push	{r7}
 802a38a:	b085      	sub	sp, #20
 802a38c:	af00      	add	r7, sp, #0
 802a38e:	60f8      	str	r0, [r7, #12]
 802a390:	460b      	mov	r3, r1
 802a392:	607a      	str	r2, [r7, #4]
 802a394:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a396:	68fb      	ldr	r3, [r7, #12]
 802a398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a39a:	4a17      	ldr	r2, [pc, #92]	; (802a3f8 <lfs_fs_prepmove+0x70>)
 802a39c:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 802a39e:	897b      	ldrh	r3, [r7, #10]
 802a3a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a3a4:	428b      	cmp	r3, r1
 802a3a6:	d006      	beq.n	802a3b6 <lfs_fs_prepmove+0x2e>
 802a3a8:	897b      	ldrh	r3, [r7, #10]
 802a3aa:	029b      	lsls	r3, r3, #10
 802a3ac:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a3b0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a3b4:	e000      	b.n	802a3b8 <lfs_fs_prepmove+0x30>
 802a3b6:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 802a3b8:	431a      	orrs	r2, r3
 802a3ba:	68fb      	ldr	r3, [r7, #12]
 802a3bc:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 802a3be:	897b      	ldrh	r3, [r7, #10]
 802a3c0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a3c4:	4293      	cmp	r3, r2
 802a3c6:	d002      	beq.n	802a3ce <lfs_fs_prepmove+0x46>
 802a3c8:	687b      	ldr	r3, [r7, #4]
 802a3ca:	681b      	ldr	r3, [r3, #0]
 802a3cc:	e000      	b.n	802a3d0 <lfs_fs_prepmove+0x48>
 802a3ce:	2300      	movs	r3, #0
 802a3d0:	68fa      	ldr	r2, [r7, #12]
 802a3d2:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 802a3d4:	897b      	ldrh	r3, [r7, #10]
 802a3d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a3da:	4293      	cmp	r3, r2
 802a3dc:	d003      	beq.n	802a3e6 <lfs_fs_prepmove+0x5e>
 802a3de:	687b      	ldr	r3, [r7, #4]
 802a3e0:	3304      	adds	r3, #4
 802a3e2:	681b      	ldr	r3, [r3, #0]
 802a3e4:	e000      	b.n	802a3e8 <lfs_fs_prepmove+0x60>
 802a3e6:	2300      	movs	r3, #0
 802a3e8:	68fa      	ldr	r2, [r7, #12]
 802a3ea:	6393      	str	r3, [r2, #56]	; 0x38
}
 802a3ec:	bf00      	nop
 802a3ee:	3714      	adds	r7, #20
 802a3f0:	46bd      	mov	sp, r7
 802a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a3f6:	4770      	bx	lr
 802a3f8:	800003ff 	.word	0x800003ff

0802a3fc <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 802a3fc:	b5b0      	push	{r4, r5, r7, lr}
 802a3fe:	b094      	sub	sp, #80	; 0x50
 802a400:	af04      	add	r7, sp, #16
 802a402:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 802a404:	687b      	ldr	r3, [r7, #4]
 802a406:	333c      	adds	r3, #60	; 0x3c
 802a408:	4618      	mov	r0, r3
 802a40a:	f7f9 ffe6 	bl	80243da <lfs_gstate_hasmove>
 802a40e:	4603      	mov	r3, r0
 802a410:	f083 0301 	eor.w	r3, r3, #1
 802a414:	b2db      	uxtb	r3, r3
 802a416:	2b00      	cmp	r3, #0
 802a418:	d001      	beq.n	802a41e <lfs_fs_demove+0x22>
        return 0;
 802a41a:	2300      	movs	r3, #0
 802a41c:	e049      	b.n	802a4b2 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 802a41e:	687b      	ldr	r3, [r7, #4]
 802a420:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 802a422:	687b      	ldr	r3, [r7, #4]
 802a424:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 802a426:	687b      	ldr	r3, [r7, #4]
 802a428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a42a:	4618      	mov	r0, r3
 802a42c:	f7f9 ff40 	bl	80242b0 <lfs_tag_id>
 802a430:	4603      	mov	r3, r0
 802a432:	461a      	mov	r2, r3
 802a434:	4b21      	ldr	r3, [pc, #132]	; (802a4bc <lfs_fs_demove+0xc0>)
 802a436:	9302      	str	r3, [sp, #8]
 802a438:	9201      	str	r2, [sp, #4]
 802a43a:	9400      	str	r4, [sp, #0]
 802a43c:	462b      	mov	r3, r5
 802a43e:	f241 1266 	movw	r2, #4454	; 0x1166
 802a442:	491f      	ldr	r1, [pc, #124]	; (802a4c0 <lfs_fs_demove+0xc4>)
 802a444:	481f      	ldr	r0, [pc, #124]	; (802a4c4 <lfs_fs_demove+0xc8>)
 802a446:	f003 f99b 	bl	802d780 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 802a44a:	687b      	ldr	r3, [r7, #4]
 802a44c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 802a450:	f107 0318 	add.w	r3, r7, #24
 802a454:	4619      	mov	r1, r3
 802a456:	6878      	ldr	r0, [r7, #4]
 802a458:	f7fb fbb4 	bl	8025bc4 <lfs_dir_fetch>
 802a45c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 802a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a460:	2b00      	cmp	r3, #0
 802a462:	d001      	beq.n	802a468 <lfs_fs_demove+0x6c>
        return err;
 802a464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a466:	e024      	b.n	802a4b2 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 802a468:	687b      	ldr	r3, [r7, #4]
 802a46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802a46c:	4618      	mov	r0, r3
 802a46e:	f7f9 ff1f 	bl	80242b0 <lfs_tag_id>
 802a472:	4603      	mov	r3, r0
 802a474:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a476:	2200      	movs	r2, #0
 802a478:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a47c:	6878      	ldr	r0, [r7, #4]
 802a47e:	f7ff ff83 	bl	802a388 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 802a482:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802a484:	029b      	lsls	r3, r3, #10
 802a486:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a48a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a48e:	613b      	str	r3, [r7, #16]
 802a490:	2300      	movs	r3, #0
 802a492:	617b      	str	r3, [r7, #20]
 802a494:	f107 0210 	add.w	r2, r7, #16
 802a498:	f107 0118 	add.w	r1, r7, #24
 802a49c:	2301      	movs	r3, #1
 802a49e:	6878      	ldr	r0, [r7, #4]
 802a4a0:	f7fd f9aa 	bl	80277f8 <lfs_dir_commit>
 802a4a4:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 802a4a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a4a8:	2b00      	cmp	r3, #0
 802a4aa:	d001      	beq.n	802a4b0 <lfs_fs_demove+0xb4>
        return err;
 802a4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802a4ae:	e000      	b.n	802a4b2 <lfs_fs_demove+0xb6>
    }

    return 0;
 802a4b0:	2300      	movs	r3, #0
}
 802a4b2:	4618      	mov	r0, r3
 802a4b4:	3740      	adds	r7, #64	; 0x40
 802a4b6:	46bd      	mov	sp, r7
 802a4b8:	bdb0      	pop	{r4, r5, r7, pc}
 802a4ba:	bf00      	nop
 802a4bc:	08033914 	.word	0x08033914
 802a4c0:	08033800 	.word	0x08033800
 802a4c4:	08033f90 	.word	0x08033f90

0802a4c8 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs, bool powerloss) {
 802a4c8:	b5b0      	push	{r4, r5, r7, lr}
 802a4ca:	b0b2      	sub	sp, #200	; 0xc8
 802a4cc:	af04      	add	r7, sp, #16
 802a4ce:	6078      	str	r0, [r7, #4]
 802a4d0:	460b      	mov	r3, r1
 802a4d2:	70fb      	strb	r3, [r7, #3]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 802a4d4:	687b      	ldr	r3, [r7, #4]
 802a4d6:	3330      	adds	r3, #48	; 0x30
 802a4d8:	4618      	mov	r0, r3
 802a4da:	f7f9 ff5c 	bl	8024396 <lfs_gstate_hasorphans>
 802a4de:	4603      	mov	r3, r0
 802a4e0:	f083 0301 	eor.w	r3, r3, #1
 802a4e4:	b2db      	uxtb	r3, r3
 802a4e6:	2b00      	cmp	r3, #0
 802a4e8:	d001      	beq.n	802a4ee <lfs_fs_deorphan+0x26>
        return 0;
 802a4ea:	2300      	movs	r3, #0
 802a4ec:	e17c      	b.n	802a7e8 <lfs_fs_deorphan+0x320>
    }

    int8_t found = 0;
 802a4ee:	2300      	movs	r3, #0
 802a4f0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
restart:
    {
        // Fix any orphans
        lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 802a4f4:	f107 030c 	add.w	r3, r7, #12
 802a4f8:	2220      	movs	r2, #32
 802a4fa:	2100      	movs	r1, #0
 802a4fc:	4618      	mov	r0, r3
 802a4fe:	f003 fad5 	bl	802daac <memset>
 802a502:	2301      	movs	r3, #1
 802a504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 802a508:	2301      	movs	r3, #1
 802a50a:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_mdir_t dir;

        // iterate over all directory directory entries
        while (!lfs_pair_isnull(pdir.tail)) {
 802a50c:	e148      	b.n	802a7a0 <lfs_fs_deorphan+0x2d8>
            int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 802a50e:	f107 030c 	add.w	r3, r7, #12
 802a512:	f103 0218 	add.w	r2, r3, #24
 802a516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a51a:	4619      	mov	r1, r3
 802a51c:	6878      	ldr	r0, [r7, #4]
 802a51e:	f7fb fb51 	bl	8025bc4 <lfs_dir_fetch>
 802a522:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
            if (err) {
 802a526:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a52a:	2b00      	cmp	r3, #0
 802a52c:	d002      	beq.n	802a534 <lfs_fs_deorphan+0x6c>
                return err;
 802a52e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a532:	e159      	b.n	802a7e8 <lfs_fs_deorphan+0x320>
            }

            // check head blocks for orphans
            if (!pdir.split) {
 802a534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802a538:	f083 0301 	eor.w	r3, r3, #1
 802a53c:	b2db      	uxtb	r3, r3
 802a53e:	2b00      	cmp	r3, #0
 802a540:	f000 8124 	beq.w	802a78c <lfs_fs_deorphan+0x2c4>
                // check if we have a parent
                lfs_mdir_t parent;
                lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 802a544:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 802a548:	f107 030c 	add.w	r3, r7, #12
 802a54c:	3318      	adds	r3, #24
 802a54e:	4619      	mov	r1, r3
 802a550:	6878      	ldr	r0, [r7, #4]
 802a552:	f7ff fe87 	bl	802a264 <lfs_fs_parent>
 802a556:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
                if (tag < 0 && tag != LFS_ERR_NOENT) {
 802a55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a55e:	2b00      	cmp	r3, #0
 802a560:	da07      	bge.n	802a572 <lfs_fs_deorphan+0xaa>
 802a562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a566:	f113 0f02 	cmn.w	r3, #2
 802a56a:	d002      	beq.n	802a572 <lfs_fs_deorphan+0xaa>
                    return tag;
 802a56c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a570:	e13a      	b.n	802a7e8 <lfs_fs_deorphan+0x320>
                }

                // note we only check for full orphans if we may have had a
                // power-loss, otherwise orphans are created intentionally
                // during operations such as lfs_mkdir
                if (tag == LFS_ERR_NOENT && powerloss) {
 802a572:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a576:	f113 0f02 	cmn.w	r3, #2
 802a57a:	d157      	bne.n	802a62c <lfs_fs_deorphan+0x164>
 802a57c:	78fb      	ldrb	r3, [r7, #3]
 802a57e:	2b00      	cmp	r3, #0
 802a580:	d054      	beq.n	802a62c <lfs_fs_deorphan+0x164>
                    // we are an orphan
                    LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 802a582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a586:	499a      	ldr	r1, [pc, #616]	; (802a7f0 <lfs_fs_deorphan+0x328>)
 802a588:	9101      	str	r1, [sp, #4]
 802a58a:	9300      	str	r3, [sp, #0]
 802a58c:	4613      	mov	r3, r2
 802a58e:	f241 12a1 	movw	r2, #4513	; 0x11a1
 802a592:	4998      	ldr	r1, [pc, #608]	; (802a7f4 <lfs_fs_deorphan+0x32c>)
 802a594:	4898      	ldr	r0, [pc, #608]	; (802a7f8 <lfs_fs_deorphan+0x330>)
 802a596:	f003 f8f3 	bl	802d780 <iprintf>
                            pdir.tail[0], pdir.tail[1]);

                    // steal state
                    err = lfs_dir_getgstate(lfs, &dir, &lfs->gdelta);
 802a59a:	687b      	ldr	r3, [r7, #4]
 802a59c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 802a5a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a5a4:	4619      	mov	r1, r3
 802a5a6:	6878      	ldr	r0, [r7, #4]
 802a5a8:	f7fb fb28 	bl	8025bfc <lfs_dir_getgstate>
 802a5ac:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
                    if (err) {
 802a5b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a5b4:	2b00      	cmp	r3, #0
 802a5b6:	d002      	beq.n	802a5be <lfs_fs_deorphan+0xf6>
                        return err;
 802a5b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 802a5bc:	e114      	b.n	802a7e8 <lfs_fs_deorphan+0x320>
                    }

                    // steal tail
                    lfs_pair_tole32(dir.tail);
 802a5be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a5c2:	3318      	adds	r3, #24
 802a5c4:	4618      	mov	r0, r3
 802a5c6:	f7f9 fdfe 	bl	80241c6 <lfs_pair_tole32>
                    int state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a5ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 802a5ce:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 802a5d2:	051a      	lsls	r2, r3, #20
 802a5d4:	4b89      	ldr	r3, [pc, #548]	; (802a7fc <lfs_fs_deorphan+0x334>)
 802a5d6:	4313      	orrs	r3, r2
 802a5d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 802a5dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a5e0:	3318      	adds	r3, #24
 802a5e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 802a5e6:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 802a5ea:	f107 010c 	add.w	r1, r7, #12
 802a5ee:	2301      	movs	r3, #1
 802a5f0:	6878      	ldr	r0, [r7, #4]
 802a5f2:	f7fc fe07 	bl	8027204 <lfs_dir_orphaningcommit>
 802a5f6:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
                            {LFS_MKTAG(LFS_TYPE_TAIL + dir.split, 0x3ff, 8),
                                dir.tail}));
                    lfs_pair_fromle32(dir.tail);
 802a5fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 802a5fe:	3318      	adds	r3, #24
 802a600:	4618      	mov	r0, r3
 802a602:	f7f9 fdc6 	bl	8024192 <lfs_pair_fromle32>
                    if (state < 0) {
 802a606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a60a:	2b00      	cmp	r3, #0
 802a60c:	da02      	bge.n	802a614 <lfs_fs_deorphan+0x14c>
                        return state;
 802a60e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                    return tag;
 802a612:	e0e9      	b.n	802a7e8 <lfs_fs_deorphan+0x320>
                    }

                    found += 1;
 802a614:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a618:	3301      	adds	r3, #1
 802a61a:	b2db      	uxtb	r3, r3
 802a61c:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                    // did our commit create more orphans?
                    if (state == LFS_OK_ORPHANED) {
 802a620:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 802a624:	2b03      	cmp	r3, #3
 802a626:	f040 80af 	bne.w	802a788 <lfs_fs_deorphan+0x2c0>
                        goto restart;
 802a62a:	e763      	b.n	802a4f4 <lfs_fs_deorphan+0x2c>

                    // refetch tail
                    continue;
                }

                if (tag != LFS_ERR_NOENT) {
 802a62c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 802a630:	f113 0f02 	cmn.w	r3, #2
 802a634:	f000 80aa 	beq.w	802a78c <lfs_fs_deorphan+0x2c4>
                    lfs_block_t pair[2];
                    lfs_stag_t state = lfs_dir_get(lfs, &parent,
 802a638:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 802a63c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 802a640:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a644:	9300      	str	r3, [sp, #0]
 802a646:	4613      	mov	r3, r2
 802a648:	4a6d      	ldr	r2, [pc, #436]	; (802a800 <lfs_fs_deorphan+0x338>)
 802a64a:	6878      	ldr	r0, [r7, #4]
 802a64c:	f7fa fa1a 	bl	8024a84 <lfs_dir_get>
 802a650:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                            LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
                    if (state < 0) {
 802a654:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a658:	2b00      	cmp	r3, #0
 802a65a:	da02      	bge.n	802a662 <lfs_fs_deorphan+0x19a>
                        return state;
 802a65c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a660:	e0c2      	b.n	802a7e8 <lfs_fs_deorphan+0x320>
                    }
                    lfs_pair_fromle32(pair);
 802a662:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a666:	4618      	mov	r0, r3
 802a668:	f7f9 fd93 	bl	8024192 <lfs_pair_fromle32>

                    if (!lfs_pair_sync(pair, pdir.tail)) {
 802a66c:	f107 030c 	add.w	r3, r7, #12
 802a670:	f103 0218 	add.w	r2, r3, #24
 802a674:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a678:	4611      	mov	r1, r2
 802a67a:	4618      	mov	r0, r3
 802a67c:	f7f9 fd5c 	bl	8024138 <lfs_pair_sync>
 802a680:	4603      	mov	r3, r0
 802a682:	f083 0301 	eor.w	r3, r3, #1
 802a686:	b2db      	uxtb	r3, r3
 802a688:	2b00      	cmp	r3, #0
 802a68a:	d07f      	beq.n	802a78c <lfs_fs_deorphan+0x2c4>
                        // we have desynced
                        LFS_DEBUG("Fixing half-orphan "
 802a68c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802a68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802a690:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 802a694:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 802a698:	4c55      	ldr	r4, [pc, #340]	; (802a7f0 <lfs_fs_deorphan+0x328>)
 802a69a:	9403      	str	r4, [sp, #12]
 802a69c:	9102      	str	r1, [sp, #8]
 802a69e:	9201      	str	r2, [sp, #4]
 802a6a0:	9300      	str	r3, [sp, #0]
 802a6a2:	4603      	mov	r3, r0
 802a6a4:	f241 12ca 	movw	r2, #4554	; 0x11ca
 802a6a8:	4952      	ldr	r1, [pc, #328]	; (802a7f4 <lfs_fs_deorphan+0x32c>)
 802a6aa:	4856      	ldr	r0, [pc, #344]	; (802a804 <lfs_fs_deorphan+0x33c>)
 802a6ac:	f003 f868 	bl	802d780 <iprintf>
                                pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                        // fix pending move in this pair? this looks like an
                        // optimization but is in fact _required_ since
                        // relocating may outdate the move.
                        uint16_t moveid = 0x3ff;
 802a6b0:	f240 33ff 	movw	r3, #1023	; 0x3ff
 802a6b4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                        if (lfs_gstate_hasmovehere(&lfs->gstate, pdir.pair)) {
 802a6b8:	687b      	ldr	r3, [r7, #4]
 802a6ba:	3330      	adds	r3, #48	; 0x30
 802a6bc:	f107 020c 	add.w	r2, r7, #12
 802a6c0:	4611      	mov	r1, r2
 802a6c2:	4618      	mov	r0, r3
 802a6c4:	f7f9 fe9c 	bl	8024400 <lfs_gstate_hasmovehere>
 802a6c8:	4603      	mov	r3, r0
 802a6ca:	2b00      	cmp	r3, #0
 802a6cc:	d01c      	beq.n	802a708 <lfs_fs_deorphan+0x240>
                            moveid = lfs_tag_id(lfs->gstate.tag);
 802a6ce:	687b      	ldr	r3, [r7, #4]
 802a6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802a6d2:	4618      	mov	r0, r3
 802a6d4:	f7f9 fdec 	bl	80242b0 <lfs_tag_id>
 802a6d8:	4603      	mov	r3, r0
 802a6da:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
                            LFS_DEBUG("Fixing move while fixing orphans "
 802a6de:	68f9      	ldr	r1, [r7, #12]
 802a6e0:	693b      	ldr	r3, [r7, #16]
 802a6e2:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	; 0xb4
 802a6e6:	4842      	ldr	r0, [pc, #264]	; (802a7f0 <lfs_fs_deorphan+0x328>)
 802a6e8:	9002      	str	r0, [sp, #8]
 802a6ea:	9201      	str	r2, [sp, #4]
 802a6ec:	9300      	str	r3, [sp, #0]
 802a6ee:	460b      	mov	r3, r1
 802a6f0:	f241 12d5 	movw	r2, #4565	; 0x11d5
 802a6f4:	493f      	ldr	r1, [pc, #252]	; (802a7f4 <lfs_fs_deorphan+0x32c>)
 802a6f6:	4844      	ldr	r0, [pc, #272]	; (802a808 <lfs_fs_deorphan+0x340>)
 802a6f8:	f003 f842 	bl	802d780 <iprintf>
                                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                                    pdir.pair[0], pdir.pair[1], moveid);
                            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 802a6fc:	2200      	movs	r2, #0
 802a6fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 802a702:	6878      	ldr	r0, [r7, #4]
 802a704:	f7ff fe40 	bl	802a388 <lfs_fs_prepmove>
                        }

                        lfs_pair_tole32(pair);
 802a708:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a70c:	4618      	mov	r0, r3
 802a70e:	f7f9 fd5a 	bl	80241c6 <lfs_pair_tole32>
                        state = lfs_dir_orphaningcommit(lfs, &pdir, LFS_MKATTRS(
 802a712:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a716:	f240 32ff 	movw	r2, #1023	; 0x3ff
 802a71a:	4293      	cmp	r3, r2
 802a71c:	d007      	beq.n	802a72e <lfs_fs_deorphan+0x266>
 802a71e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 802a722:	029b      	lsls	r3, r3, #10
 802a724:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 802a728:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 802a72c:	e000      	b.n	802a730 <lfs_fs_deorphan+0x268>
 802a72e:	2300      	movs	r3, #0
 802a730:	67fb      	str	r3, [r7, #124]	; 0x7c
 802a732:	2300      	movs	r3, #0
 802a734:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 802a738:	4b34      	ldr	r3, [pc, #208]	; (802a80c <lfs_fs_deorphan+0x344>)
 802a73a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 802a73e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802a746:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 802a74a:	f107 010c 	add.w	r1, r7, #12
 802a74e:	2302      	movs	r3, #2
 802a750:	6878      	ldr	r0, [r7, #4]
 802a752:	f7fc fd57 	bl	8027204 <lfs_dir_orphaningcommit>
 802a756:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
                                {LFS_MKTAG_IF(moveid != 0x3ff,
                                    LFS_TYPE_DELETE, moveid, 0), NULL},
                                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8),
                                    pair}));
                        lfs_pair_fromle32(pair);
 802a75a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 802a75e:	4618      	mov	r0, r3
 802a760:	f7f9 fd17 	bl	8024192 <lfs_pair_fromle32>
                        if (state < 0) {
 802a764:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a768:	2b00      	cmp	r3, #0
 802a76a:	da02      	bge.n	802a772 <lfs_fs_deorphan+0x2aa>
                            return state;
 802a76c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        return state;
 802a770:	e03a      	b.n	802a7e8 <lfs_fs_deorphan+0x320>
                        }

                        found += 1;
 802a772:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 802a776:	3301      	adds	r3, #1
 802a778:	b2db      	uxtb	r3, r3
 802a77a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

                        // did our commit create more orphans?
                        if (state == LFS_OK_ORPHANED) {
 802a77e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 802a782:	2b03      	cmp	r3, #3
 802a784:	d10c      	bne.n	802a7a0 <lfs_fs_deorphan+0x2d8>
 802a786:	e6b5      	b.n	802a4f4 <lfs_fs_deorphan+0x2c>
                    continue;
 802a788:	bf00      	nop
 802a78a:	e009      	b.n	802a7a0 <lfs_fs_deorphan+0x2d8>
                        continue;
                    }
                }
            }

            pdir = dir;
 802a78c:	f107 040c 	add.w	r4, r7, #12
 802a790:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 802a794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a798:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a79c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        while (!lfs_pair_isnull(pdir.tail)) {
 802a7a0:	f107 030c 	add.w	r3, r7, #12
 802a7a4:	3318      	adds	r3, #24
 802a7a6:	4618      	mov	r0, r3
 802a7a8:	f7f9 fc81 	bl	80240ae <lfs_pair_isnull>
 802a7ac:	4603      	mov	r3, r0
 802a7ae:	f083 0301 	eor.w	r3, r3, #1
 802a7b2:	b2db      	uxtb	r3, r3
 802a7b4:	2b00      	cmp	r3, #0
 802a7b6:	f47f aeaa 	bne.w	802a50e <lfs_fs_deorphan+0x46>
        }
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_min(
            lfs_gstate_getorphans(&lfs->gstate),
 802a7ba:	687b      	ldr	r3, [r7, #4]
 802a7bc:	3330      	adds	r3, #48	; 0x30
 802a7be:	4618      	mov	r0, r3
 802a7c0:	f7f9 fdfc 	bl	80243bc <lfs_gstate_getorphans>
 802a7c4:	4603      	mov	r3, r0
    return lfs_fs_preporphans(lfs, -lfs_min(
 802a7c6:	461a      	mov	r2, r3
 802a7c8:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 802a7cc:	4619      	mov	r1, r3
 802a7ce:	4610      	mov	r0, r2
 802a7d0:	f7f9 f858 	bl	8023884 <lfs_min>
 802a7d4:	4603      	mov	r3, r0
 802a7d6:	b2db      	uxtb	r3, r3
 802a7d8:	425b      	negs	r3, r3
 802a7da:	b2db      	uxtb	r3, r3
 802a7dc:	b25b      	sxtb	r3, r3
 802a7de:	4619      	mov	r1, r3
 802a7e0:	6878      	ldr	r0, [r7, #4]
 802a7e2:	f7ff fd97 	bl	802a314 <lfs_fs_preporphans>
 802a7e6:	4603      	mov	r3, r0
            found));
}
 802a7e8:	4618      	mov	r0, r3
 802a7ea:	37b8      	adds	r7, #184	; 0xb8
 802a7ec:	46bd      	mov	sp, r7
 802a7ee:	bdb0      	pop	{r4, r5, r7, pc}
 802a7f0:	08033914 	.word	0x08033914
 802a7f4:	08033800 	.word	0x08033800
 802a7f8:	08033fc4 	.word	0x08033fc4
 802a7fc:	000ffc08 	.word	0x000ffc08
 802a800:	7ffffc00 	.word	0x7ffffc00
 802a804:	08033ff4 	.word	0x08033ff4
 802a808:	08034038 	.word	0x08034038
 802a80c:	600ffc08 	.word	0x600ffc08

0802a810 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 802a810:	b580      	push	{r7, lr}
 802a812:	b084      	sub	sp, #16
 802a814:	af00      	add	r7, sp, #0
 802a816:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 802a818:	6878      	ldr	r0, [r7, #4]
 802a81a:	f7ff fdef 	bl	802a3fc <lfs_fs_demove>
 802a81e:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a820:	68fb      	ldr	r3, [r7, #12]
 802a822:	2b00      	cmp	r3, #0
 802a824:	d001      	beq.n	802a82a <lfs_fs_forceconsistency+0x1a>
        return err;
 802a826:	68fb      	ldr	r3, [r7, #12]
 802a828:	e00a      	b.n	802a840 <lfs_fs_forceconsistency+0x30>
    }

    err = lfs_fs_deorphan(lfs, true);
 802a82a:	2101      	movs	r1, #1
 802a82c:	6878      	ldr	r0, [r7, #4]
 802a82e:	f7ff fe4b 	bl	802a4c8 <lfs_fs_deorphan>
 802a832:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a834:	68fb      	ldr	r3, [r7, #12]
 802a836:	2b00      	cmp	r3, #0
 802a838:	d001      	beq.n	802a83e <lfs_fs_forceconsistency+0x2e>
        return err;
 802a83a:	68fb      	ldr	r3, [r7, #12]
 802a83c:	e000      	b.n	802a840 <lfs_fs_forceconsistency+0x30>
    }

    return 0;
 802a83e:	2300      	movs	r3, #0
}
 802a840:	4618      	mov	r0, r3
 802a842:	3710      	adds	r7, #16
 802a844:	46bd      	mov	sp, r7
 802a846:	bd80      	pop	{r7, pc}

0802a848 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 802a848:	b480      	push	{r7}
 802a84a:	b085      	sub	sp, #20
 802a84c:	af00      	add	r7, sp, #0
 802a84e:	6078      	str	r0, [r7, #4]
 802a850:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 802a852:	687b      	ldr	r3, [r7, #4]
 802a854:	60fb      	str	r3, [r7, #12]
    *size += 1;
 802a856:	68fb      	ldr	r3, [r7, #12]
 802a858:	681b      	ldr	r3, [r3, #0]
 802a85a:	1c5a      	adds	r2, r3, #1
 802a85c:	68fb      	ldr	r3, [r7, #12]
 802a85e:	601a      	str	r2, [r3, #0]
    return 0;
 802a860:	2300      	movs	r3, #0
}
 802a862:	4618      	mov	r0, r3
 802a864:	3714      	adds	r7, #20
 802a866:	46bd      	mov	sp, r7
 802a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802a86c:	4770      	bx	lr
	...

0802a870 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 802a870:	b580      	push	{r7, lr}
 802a872:	b084      	sub	sp, #16
 802a874:	af00      	add	r7, sp, #0
 802a876:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 802a878:	2300      	movs	r3, #0
 802a87a:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 802a87c:	f107 0208 	add.w	r2, r7, #8
 802a880:	2300      	movs	r3, #0
 802a882:	4907      	ldr	r1, [pc, #28]	; (802a8a0 <lfs_fs_rawsize+0x30>)
 802a884:	6878      	ldr	r0, [r7, #4]
 802a886:	f7ff fb3f 	bl	8029f08 <lfs_fs_rawtraverse>
 802a88a:	60f8      	str	r0, [r7, #12]
    if (err) {
 802a88c:	68fb      	ldr	r3, [r7, #12]
 802a88e:	2b00      	cmp	r3, #0
 802a890:	d001      	beq.n	802a896 <lfs_fs_rawsize+0x26>
        return err;
 802a892:	68fb      	ldr	r3, [r7, #12]
 802a894:	e000      	b.n	802a898 <lfs_fs_rawsize+0x28>
    }

    return size;
 802a896:	68bb      	ldr	r3, [r7, #8]
}
 802a898:	4618      	mov	r0, r3
 802a89a:	3710      	adds	r7, #16
 802a89c:	46bd      	mov	sp, r7
 802a89e:	bd80      	pop	{r7, pc}
 802a8a0:	0802a849 	.word	0x0802a849

0802a8a4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 802a8a4:	b580      	push	{r7, lr}
 802a8a6:	b084      	sub	sp, #16
 802a8a8:	af00      	add	r7, sp, #0
 802a8aa:	6078      	str	r0, [r7, #4]
 802a8ac:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a8ae:	2300      	movs	r3, #0
 802a8b0:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a8b2:	68fb      	ldr	r3, [r7, #12]
 802a8b4:	2b00      	cmp	r3, #0
 802a8b6:	d001      	beq.n	802a8bc <lfs_format+0x18>
        return err;
 802a8b8:	68fb      	ldr	r3, [r7, #12]
 802a8ba:	e005      	b.n	802a8c8 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 802a8bc:	6839      	ldr	r1, [r7, #0]
 802a8be:	6878      	ldr	r0, [r7, #4]
 802a8c0:	f7ff f8ca 	bl	8029a58 <lfs_rawformat>
 802a8c4:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a8c6:	68fb      	ldr	r3, [r7, #12]
}
 802a8c8:	4618      	mov	r0, r3
 802a8ca:	3710      	adds	r7, #16
 802a8cc:	46bd      	mov	sp, r7
 802a8ce:	bd80      	pop	{r7, pc}

0802a8d0 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 802a8d0:	b580      	push	{r7, lr}
 802a8d2:	b084      	sub	sp, #16
 802a8d4:	af00      	add	r7, sp, #0
 802a8d6:	6078      	str	r0, [r7, #4]
 802a8d8:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 802a8da:	2300      	movs	r3, #0
 802a8dc:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a8de:	68fb      	ldr	r3, [r7, #12]
 802a8e0:	2b00      	cmp	r3, #0
 802a8e2:	d001      	beq.n	802a8e8 <lfs_mount+0x18>
        return err;
 802a8e4:	68fb      	ldr	r3, [r7, #12]
 802a8e6:	e005      	b.n	802a8f4 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 802a8e8:	6839      	ldr	r1, [r7, #0]
 802a8ea:	6878      	ldr	r0, [r7, #4]
 802a8ec:	f7ff f954 	bl	8029b98 <lfs_rawmount>
 802a8f0:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 802a8f2:	68fb      	ldr	r3, [r7, #12]
}
 802a8f4:	4618      	mov	r0, r3
 802a8f6:	3710      	adds	r7, #16
 802a8f8:	46bd      	mov	sp, r7
 802a8fa:	bd80      	pop	{r7, pc}

0802a8fc <lfs_remove>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}

#ifndef LFS_READONLY
int lfs_remove(lfs_t *lfs, const char *path) {
 802a8fc:	b580      	push	{r7, lr}
 802a8fe:	b084      	sub	sp, #16
 802a900:	af00      	add	r7, sp, #0
 802a902:	6078      	str	r0, [r7, #4]
 802a904:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a906:	2300      	movs	r3, #0
 802a908:	60fb      	str	r3, [r7, #12]
    if (err) {
 802a90a:	68fb      	ldr	r3, [r7, #12]
 802a90c:	2b00      	cmp	r3, #0
 802a90e:	d001      	beq.n	802a914 <lfs_remove+0x18>
        return err;
 802a910:	68fb      	ldr	r3, [r7, #12]
 802a912:	e005      	b.n	802a920 <lfs_remove+0x24>
    }
    LFS_TRACE("lfs_remove(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawremove(lfs, path);
 802a914:	6839      	ldr	r1, [r7, #0]
 802a916:	6878      	ldr	r0, [r7, #4]
 802a918:	f7fe fbd0 	bl	80290bc <lfs_rawremove>
 802a91c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_remove -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a91e:	68fb      	ldr	r3, [r7, #12]
}
 802a920:	4618      	mov	r0, r3
 802a922:	3710      	adds	r7, #16
 802a924:	46bd      	mov	sp, r7
 802a926:	bd80      	pop	{r7, pc}

0802a928 <lfs_rename>:
#endif

#ifndef LFS_READONLY
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
 802a928:	b580      	push	{r7, lr}
 802a92a:	b086      	sub	sp, #24
 802a92c:	af00      	add	r7, sp, #0
 802a92e:	60f8      	str	r0, [r7, #12]
 802a930:	60b9      	str	r1, [r7, #8]
 802a932:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a934:	2300      	movs	r3, #0
 802a936:	617b      	str	r3, [r7, #20]
    if (err) {
 802a938:	697b      	ldr	r3, [r7, #20]
 802a93a:	2b00      	cmp	r3, #0
 802a93c:	d001      	beq.n	802a942 <lfs_rename+0x1a>
        return err;
 802a93e:	697b      	ldr	r3, [r7, #20]
 802a940:	e006      	b.n	802a950 <lfs_rename+0x28>
    }
    LFS_TRACE("lfs_rename(%p, \"%s\", \"%s\")", (void*)lfs, oldpath, newpath);

    err = lfs_rawrename(lfs, oldpath, newpath);
 802a942:	687a      	ldr	r2, [r7, #4]
 802a944:	68b9      	ldr	r1, [r7, #8]
 802a946:	68f8      	ldr	r0, [r7, #12]
 802a948:	f7fe fc92 	bl	8029270 <lfs_rawrename>
 802a94c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_rename -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a94e:	697b      	ldr	r3, [r7, #20]
}
 802a950:	4618      	mov	r0, r3
 802a952:	3718      	adds	r7, #24
 802a954:	46bd      	mov	sp, r7
 802a956:	bd80      	pop	{r7, pc}

0802a958 <lfs_stat>:
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 802a958:	b580      	push	{r7, lr}
 802a95a:	b086      	sub	sp, #24
 802a95c:	af00      	add	r7, sp, #0
 802a95e:	60f8      	str	r0, [r7, #12]
 802a960:	60b9      	str	r1, [r7, #8]
 802a962:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802a964:	2300      	movs	r3, #0
 802a966:	617b      	str	r3, [r7, #20]
    if (err) {
 802a968:	697b      	ldr	r3, [r7, #20]
 802a96a:	2b00      	cmp	r3, #0
 802a96c:	d001      	beq.n	802a972 <lfs_stat+0x1a>
        return err;
 802a96e:	697b      	ldr	r3, [r7, #20]
 802a970:	e006      	b.n	802a980 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 802a972:	687a      	ldr	r2, [r7, #4]
 802a974:	68b9      	ldr	r1, [r7, #8]
 802a976:	68f8      	ldr	r0, [r7, #12]
 802a978:	f7fe fb7a 	bl	8029070 <lfs_rawstat>
 802a97c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a97e:	697b      	ldr	r3, [r7, #20]
}
 802a980:	4618      	mov	r0, r3
 802a982:	3718      	adds	r7, #24
 802a984:	46bd      	mov	sp, r7
 802a986:	bd80      	pop	{r7, pc}

0802a988 <lfs_file_opencfg>:
}
#endif

int lfs_file_opencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 802a988:	b580      	push	{r7, lr}
 802a98a:	b088      	sub	sp, #32
 802a98c:	af02      	add	r7, sp, #8
 802a98e:	60f8      	str	r0, [r7, #12]
 802a990:	60b9      	str	r1, [r7, #8]
 802a992:	607a      	str	r2, [r7, #4]
 802a994:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a996:	2300      	movs	r3, #0
 802a998:	617b      	str	r3, [r7, #20]
    if (err) {
 802a99a:	697b      	ldr	r3, [r7, #20]
 802a99c:	2b00      	cmp	r3, #0
 802a99e:	d001      	beq.n	802a9a4 <lfs_file_opencfg+0x1c>
        return err;
 802a9a0:	697b      	ldr	r3, [r7, #20]
 802a9a2:	e01c      	b.n	802a9de <lfs_file_opencfg+0x56>
    }
    LFS_TRACE("lfs_file_opencfg(%p, %p, \"%s\", %x, %p {"
                 ".buffer=%p, .attrs=%p, .attr_count=%"PRIu32"})",
            (void*)lfs, (void*)file, path, flags,
            (void*)cfg, cfg->buffer, (void*)cfg->attrs, cfg->attr_count);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802a9a4:	68fb      	ldr	r3, [r7, #12]
 802a9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802a9a8:	68b9      	ldr	r1, [r7, #8]
 802a9aa:	4618      	mov	r0, r3
 802a9ac:	f7f9 fe28 	bl	8024600 <lfs_mlist_isopen>
 802a9b0:	4603      	mov	r3, r0
 802a9b2:	f083 0301 	eor.w	r3, r3, #1
 802a9b6:	b2db      	uxtb	r3, r3
 802a9b8:	2b00      	cmp	r3, #0
 802a9ba:	d106      	bne.n	802a9ca <lfs_file_opencfg+0x42>
 802a9bc:	4b0a      	ldr	r3, [pc, #40]	; (802a9e8 <lfs_file_opencfg+0x60>)
 802a9be:	4a0b      	ldr	r2, [pc, #44]	; (802a9ec <lfs_file_opencfg+0x64>)
 802a9c0:	f241 517b 	movw	r1, #5499	; 0x157b
 802a9c4:	480a      	ldr	r0, [pc, #40]	; (802a9f0 <lfs_file_opencfg+0x68>)
 802a9c6:	f001 fea1 	bl	802c70c <__assert_func>

    err = lfs_file_rawopencfg(lfs, file, path, flags, cfg);
 802a9ca:	6a3b      	ldr	r3, [r7, #32]
 802a9cc:	9300      	str	r3, [sp, #0]
 802a9ce:	683b      	ldr	r3, [r7, #0]
 802a9d0:	687a      	ldr	r2, [r7, #4]
 802a9d2:	68b9      	ldr	r1, [r7, #8]
 802a9d4:	68f8      	ldr	r0, [r7, #12]
 802a9d6:	f7fd fba9 	bl	802812c <lfs_file_rawopencfg>
 802a9da:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802a9dc:	697b      	ldr	r3, [r7, #20]
}
 802a9de:	4618      	mov	r0, r3
 802a9e0:	3718      	adds	r7, #24
 802a9e2:	46bd      	mov	sp, r7
 802a9e4:	bd80      	pop	{r7, pc}
 802a9e6:	bf00      	nop
 802a9e8:	08034080 	.word	0x08034080
 802a9ec:	08034b98 	.word	0x08034b98
 802a9f0:	08033800 	.word	0x08033800

0802a9f4 <lfs_file_close>:

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 802a9f4:	b580      	push	{r7, lr}
 802a9f6:	b084      	sub	sp, #16
 802a9f8:	af00      	add	r7, sp, #0
 802a9fa:	6078      	str	r0, [r7, #4]
 802a9fc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802a9fe:	2300      	movs	r3, #0
 802aa00:	60fb      	str	r3, [r7, #12]
    if (err) {
 802aa02:	68fb      	ldr	r3, [r7, #12]
 802aa04:	2b00      	cmp	r3, #0
 802aa06:	d001      	beq.n	802aa0c <lfs_file_close+0x18>
        return err;
 802aa08:	68fb      	ldr	r3, [r7, #12]
 802aa0a:	e015      	b.n	802aa38 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802aa0c:	687b      	ldr	r3, [r7, #4]
 802aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802aa10:	6839      	ldr	r1, [r7, #0]
 802aa12:	4618      	mov	r0, r3
 802aa14:	f7f9 fdf4 	bl	8024600 <lfs_mlist_isopen>
 802aa18:	4603      	mov	r3, r0
 802aa1a:	2b00      	cmp	r3, #0
 802aa1c:	d106      	bne.n	802aa2c <lfs_file_close+0x38>
 802aa1e:	4b08      	ldr	r3, [pc, #32]	; (802aa40 <lfs_file_close+0x4c>)
 802aa20:	4a08      	ldr	r2, [pc, #32]	; (802aa44 <lfs_file_close+0x50>)
 802aa22:	f241 518a 	movw	r1, #5514	; 0x158a
 802aa26:	4808      	ldr	r0, [pc, #32]	; (802aa48 <lfs_file_close+0x54>)
 802aa28:	f001 fe70 	bl	802c70c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 802aa2c:	6839      	ldr	r1, [r7, #0]
 802aa2e:	6878      	ldr	r0, [r7, #4]
 802aa30:	f7fd fd4c 	bl	80284cc <lfs_file_rawclose>
 802aa34:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802aa36:	68fb      	ldr	r3, [r7, #12]
}
 802aa38:	4618      	mov	r0, r3
 802aa3a:	3710      	adds	r7, #16
 802aa3c:	46bd      	mov	sp, r7
 802aa3e:	bd80      	pop	{r7, pc}
 802aa40:	080340b8 	.word	0x080340b8
 802aa44:	08034bac 	.word	0x08034bac
 802aa48:	08033800 	.word	0x08033800

0802aa4c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 802aa4c:	b580      	push	{r7, lr}
 802aa4e:	b086      	sub	sp, #24
 802aa50:	af00      	add	r7, sp, #0
 802aa52:	60f8      	str	r0, [r7, #12]
 802aa54:	60b9      	str	r1, [r7, #8]
 802aa56:	607a      	str	r2, [r7, #4]
 802aa58:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aa5a:	2300      	movs	r3, #0
 802aa5c:	617b      	str	r3, [r7, #20]
    if (err) {
 802aa5e:	697b      	ldr	r3, [r7, #20]
 802aa60:	2b00      	cmp	r3, #0
 802aa62:	d001      	beq.n	802aa68 <lfs_file_read+0x1c>
        return err;
 802aa64:	697b      	ldr	r3, [r7, #20]
 802aa66:	e017      	b.n	802aa98 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802aa68:	68fb      	ldr	r3, [r7, #12]
 802aa6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802aa6c:	68b9      	ldr	r1, [r7, #8]
 802aa6e:	4618      	mov	r0, r3
 802aa70:	f7f9 fdc6 	bl	8024600 <lfs_mlist_isopen>
 802aa74:	4603      	mov	r3, r0
 802aa76:	2b00      	cmp	r3, #0
 802aa78:	d106      	bne.n	802aa88 <lfs_file_read+0x3c>
 802aa7a:	4b09      	ldr	r3, [pc, #36]	; (802aaa0 <lfs_file_read+0x54>)
 802aa7c:	4a09      	ldr	r2, [pc, #36]	; (802aaa4 <lfs_file_read+0x58>)
 802aa7e:	f241 51ac 	movw	r1, #5548	; 0x15ac
 802aa82:	4809      	ldr	r0, [pc, #36]	; (802aaa8 <lfs_file_read+0x5c>)
 802aa84:	f001 fe42 	bl	802c70c <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 802aa88:	683b      	ldr	r3, [r7, #0]
 802aa8a:	687a      	ldr	r2, [r7, #4]
 802aa8c:	68b9      	ldr	r1, [r7, #8]
 802aa8e:	68f8      	ldr	r0, [r7, #12]
 802aa90:	f7fe f868 	bl	8028b64 <lfs_file_rawread>
 802aa94:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802aa96:	693b      	ldr	r3, [r7, #16]
}
 802aa98:	4618      	mov	r0, r3
 802aa9a:	3718      	adds	r7, #24
 802aa9c:	46bd      	mov	sp, r7
 802aa9e:	bd80      	pop	{r7, pc}
 802aaa0:	080340b8 	.word	0x080340b8
 802aaa4:	08034bbc 	.word	0x08034bbc
 802aaa8:	08033800 	.word	0x08033800

0802aaac <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 802aaac:	b580      	push	{r7, lr}
 802aaae:	b086      	sub	sp, #24
 802aab0:	af00      	add	r7, sp, #0
 802aab2:	60f8      	str	r0, [r7, #12]
 802aab4:	60b9      	str	r1, [r7, #8]
 802aab6:	607a      	str	r2, [r7, #4]
 802aab8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802aaba:	2300      	movs	r3, #0
 802aabc:	617b      	str	r3, [r7, #20]
    if (err) {
 802aabe:	697b      	ldr	r3, [r7, #20]
 802aac0:	2b00      	cmp	r3, #0
 802aac2:	d001      	beq.n	802aac8 <lfs_file_write+0x1c>
        return err;
 802aac4:	697b      	ldr	r3, [r7, #20]
 802aac6:	e017      	b.n	802aaf8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802aac8:	68fb      	ldr	r3, [r7, #12]
 802aaca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802aacc:	68b9      	ldr	r1, [r7, #8]
 802aace:	4618      	mov	r0, r3
 802aad0:	f7f9 fd96 	bl	8024600 <lfs_mlist_isopen>
 802aad4:	4603      	mov	r3, r0
 802aad6:	2b00      	cmp	r3, #0
 802aad8:	d106      	bne.n	802aae8 <lfs_file_write+0x3c>
 802aada:	4b09      	ldr	r3, [pc, #36]	; (802ab00 <lfs_file_write+0x54>)
 802aadc:	4a09      	ldr	r2, [pc, #36]	; (802ab04 <lfs_file_write+0x58>)
 802aade:	f241 51be 	movw	r1, #5566	; 0x15be
 802aae2:	4809      	ldr	r0, [pc, #36]	; (802ab08 <lfs_file_write+0x5c>)
 802aae4:	f001 fe12 	bl	802c70c <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 802aae8:	683b      	ldr	r3, [r7, #0]
 802aaea:	687a      	ldr	r2, [r7, #4]
 802aaec:	68b9      	ldr	r1, [r7, #8]
 802aaee:	68f8      	ldr	r0, [r7, #12]
 802aaf0:	f7fe f996 	bl	8028e20 <lfs_file_rawwrite>
 802aaf4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802aaf6:	693b      	ldr	r3, [r7, #16]
}
 802aaf8:	4618      	mov	r0, r3
 802aafa:	3718      	adds	r7, #24
 802aafc:	46bd      	mov	sp, r7
 802aafe:	bd80      	pop	{r7, pc}
 802ab00:	080340b8 	.word	0x080340b8
 802ab04:	08034bcc 	.word	0x08034bcc
 802ab08:	08033800 	.word	0x08033800

0802ab0c <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 802ab0c:	b580      	push	{r7, lr}
 802ab0e:	b086      	sub	sp, #24
 802ab10:	af00      	add	r7, sp, #0
 802ab12:	60f8      	str	r0, [r7, #12]
 802ab14:	60b9      	str	r1, [r7, #8]
 802ab16:	607a      	str	r2, [r7, #4]
 802ab18:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ab1a:	2300      	movs	r3, #0
 802ab1c:	617b      	str	r3, [r7, #20]
    if (err) {
 802ab1e:	697b      	ldr	r3, [r7, #20]
 802ab20:	2b00      	cmp	r3, #0
 802ab22:	d001      	beq.n	802ab28 <lfs_file_seek+0x1c>
        return err;
 802ab24:	697b      	ldr	r3, [r7, #20]
 802ab26:	e017      	b.n	802ab58 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 802ab28:	68fb      	ldr	r3, [r7, #12]
 802ab2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802ab2c:	68b9      	ldr	r1, [r7, #8]
 802ab2e:	4618      	mov	r0, r3
 802ab30:	f7f9 fd66 	bl	8024600 <lfs_mlist_isopen>
 802ab34:	4603      	mov	r3, r0
 802ab36:	2b00      	cmp	r3, #0
 802ab38:	d106      	bne.n	802ab48 <lfs_file_seek+0x3c>
 802ab3a:	4b09      	ldr	r3, [pc, #36]	; (802ab60 <lfs_file_seek+0x54>)
 802ab3c:	4a09      	ldr	r2, [pc, #36]	; (802ab64 <lfs_file_seek+0x58>)
 802ab3e:	f241 51d0 	movw	r1, #5584	; 0x15d0
 802ab42:	4809      	ldr	r0, [pc, #36]	; (802ab68 <lfs_file_seek+0x5c>)
 802ab44:	f001 fde2 	bl	802c70c <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 802ab48:	683b      	ldr	r3, [r7, #0]
 802ab4a:	687a      	ldr	r2, [r7, #4]
 802ab4c:	68b9      	ldr	r1, [r7, #8]
 802ab4e:	68f8      	ldr	r0, [r7, #12]
 802ab50:	f7fe f9ea 	bl	8028f28 <lfs_file_rawseek>
 802ab54:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 802ab56:	693b      	ldr	r3, [r7, #16]
}
 802ab58:	4618      	mov	r0, r3
 802ab5a:	3718      	adds	r7, #24
 802ab5c:	46bd      	mov	sp, r7
 802ab5e:	bd80      	pop	{r7, pc}
 802ab60:	080340b8 	.word	0x080340b8
 802ab64:	08034bdc 	.word	0x08034bdc
 802ab68:	08033800 	.word	0x08033800

0802ab6c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 802ab6c:	b580      	push	{r7, lr}
 802ab6e:	b084      	sub	sp, #16
 802ab70:	af00      	add	r7, sp, #0
 802ab72:	6078      	str	r0, [r7, #4]
 802ab74:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ab76:	2300      	movs	r3, #0
 802ab78:	60fb      	str	r3, [r7, #12]
    if (err) {
 802ab7a:	68fb      	ldr	r3, [r7, #12]
 802ab7c:	2b00      	cmp	r3, #0
 802ab7e:	d001      	beq.n	802ab84 <lfs_mkdir+0x18>
        return err;
 802ab80:	68fb      	ldr	r3, [r7, #12]
 802ab82:	e005      	b.n	802ab90 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 802ab84:	6839      	ldr	r1, [r7, #0]
 802ab86:	6878      	ldr	r0, [r7, #4]
 802ab88:	f7fc fe5c 	bl	8027844 <lfs_rawmkdir>
 802ab8c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ab8e:	68fb      	ldr	r3, [r7, #12]
}
 802ab90:	4618      	mov	r0, r3
 802ab92:	3710      	adds	r7, #16
 802ab94:	46bd      	mov	sp, r7
 802ab96:	bd80      	pop	{r7, pc}

0802ab98 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 802ab98:	b580      	push	{r7, lr}
 802ab9a:	b086      	sub	sp, #24
 802ab9c:	af00      	add	r7, sp, #0
 802ab9e:	60f8      	str	r0, [r7, #12]
 802aba0:	60b9      	str	r1, [r7, #8]
 802aba2:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802aba4:	2300      	movs	r3, #0
 802aba6:	617b      	str	r3, [r7, #20]
    if (err) {
 802aba8:	697b      	ldr	r3, [r7, #20]
 802abaa:	2b00      	cmp	r3, #0
 802abac:	d001      	beq.n	802abb2 <lfs_dir_open+0x1a>
        return err;
 802abae:	697b      	ldr	r3, [r7, #20]
 802abb0:	e019      	b.n	802abe6 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 802abb2:	68fb      	ldr	r3, [r7, #12]
 802abb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802abb6:	68b9      	ldr	r1, [r7, #8]
 802abb8:	4618      	mov	r0, r3
 802abba:	f7f9 fd21 	bl	8024600 <lfs_mlist_isopen>
 802abbe:	4603      	mov	r3, r0
 802abc0:	f083 0301 	eor.w	r3, r3, #1
 802abc4:	b2db      	uxtb	r3, r3
 802abc6:	2b00      	cmp	r3, #0
 802abc8:	d106      	bne.n	802abd8 <lfs_dir_open+0x40>
 802abca:	4b09      	ldr	r3, [pc, #36]	; (802abf0 <lfs_dir_open+0x58>)
 802abcc:	4a09      	ldr	r2, [pc, #36]	; (802abf4 <lfs_dir_open+0x5c>)
 802abce:	f241 612d 	movw	r1, #5677	; 0x162d
 802abd2:	4809      	ldr	r0, [pc, #36]	; (802abf8 <lfs_dir_open+0x60>)
 802abd4:	f001 fd9a 	bl	802c70c <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 802abd8:	687a      	ldr	r2, [r7, #4]
 802abda:	68b9      	ldr	r1, [r7, #8]
 802abdc:	68f8      	ldr	r0, [r7, #12]
 802abde:	f7fc ff71 	bl	8027ac4 <lfs_dir_rawopen>
 802abe2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802abe4:	697b      	ldr	r3, [r7, #20]
}
 802abe6:	4618      	mov	r0, r3
 802abe8:	3718      	adds	r7, #24
 802abea:	46bd      	mov	sp, r7
 802abec:	bd80      	pop	{r7, pc}
 802abee:	bf00      	nop
 802abf0:	080340f0 	.word	0x080340f0
 802abf4:	08034bec 	.word	0x08034bec
 802abf8:	08033800 	.word	0x08033800

0802abfc <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 802abfc:	b580      	push	{r7, lr}
 802abfe:	b084      	sub	sp, #16
 802ac00:	af00      	add	r7, sp, #0
 802ac02:	6078      	str	r0, [r7, #4]
 802ac04:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 802ac06:	2300      	movs	r3, #0
 802ac08:	60fb      	str	r3, [r7, #12]
    if (err) {
 802ac0a:	68fb      	ldr	r3, [r7, #12]
 802ac0c:	2b00      	cmp	r3, #0
 802ac0e:	d001      	beq.n	802ac14 <lfs_dir_close+0x18>
        return err;
 802ac10:	68fb      	ldr	r3, [r7, #12]
 802ac12:	e005      	b.n	802ac20 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 802ac14:	6839      	ldr	r1, [r7, #0]
 802ac16:	6878      	ldr	r0, [r7, #4]
 802ac18:	f7fc ffce 	bl	8027bb8 <lfs_dir_rawclose>
 802ac1c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ac1e:	68fb      	ldr	r3, [r7, #12]
}
 802ac20:	4618      	mov	r0, r3
 802ac22:	3710      	adds	r7, #16
 802ac24:	46bd      	mov	sp, r7
 802ac26:	bd80      	pop	{r7, pc}

0802ac28 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 802ac28:	b580      	push	{r7, lr}
 802ac2a:	b086      	sub	sp, #24
 802ac2c:	af00      	add	r7, sp, #0
 802ac2e:	60f8      	str	r0, [r7, #12]
 802ac30:	60b9      	str	r1, [r7, #8]
 802ac32:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 802ac34:	2300      	movs	r3, #0
 802ac36:	617b      	str	r3, [r7, #20]
    if (err) {
 802ac38:	697b      	ldr	r3, [r7, #20]
 802ac3a:	2b00      	cmp	r3, #0
 802ac3c:	d001      	beq.n	802ac42 <lfs_dir_read+0x1a>
        return err;
 802ac3e:	697b      	ldr	r3, [r7, #20]
 802ac40:	e006      	b.n	802ac50 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 802ac42:	687a      	ldr	r2, [r7, #4]
 802ac44:	68b9      	ldr	r1, [r7, #8]
 802ac46:	68f8      	ldr	r0, [r7, #12]
 802ac48:	f7fc ffc4 	bl	8027bd4 <lfs_dir_rawread>
 802ac4c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 802ac4e:	697b      	ldr	r3, [r7, #20]
}
 802ac50:	4618      	mov	r0, r3
 802ac52:	3718      	adds	r7, #24
 802ac54:	46bd      	mov	sp, r7
 802ac56:	bd80      	pop	{r7, pc}

0802ac58 <io_fs_init>:
}

#endif

int io_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size, struct lfs_config *cfg)
{
 802ac58:	b580      	push	{r7, lr}
 802ac5a:	b088      	sub	sp, #32
 802ac5c:	af00      	add	r7, sp, #0
 802ac5e:	60f8      	str	r0, [r7, #12]
 802ac60:	60b9      	str	r1, [r7, #8]
 802ac62:	607a      	str	r2, [r7, #4]
 802ac64:	807b      	strh	r3, [r7, #2]
	struct SPI_flash_info  flash_info;

	flash_info = sFLASH_GetInfo();
 802ac66:	f107 0310 	add.w	r3, r7, #16
 802ac6a:	4618      	mov	r0, r3
 802ac6c:	f7ea faf8 	bl	8015260 <sFLASH_GetInfo>

    cfg->read_size   = flash_info.read_size;
 802ac70:	8abb      	ldrh	r3, [r7, #20]
 802ac72:	461a      	mov	r2, r3
 802ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac76:	615a      	str	r2, [r3, #20]
    cfg->prog_size   = flash_info.write_size;
 802ac78:	8afb      	ldrh	r3, [r7, #22]
 802ac7a:	461a      	mov	r2, r3
 802ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac7e:	619a      	str	r2, [r3, #24]

    cfg->block_size  = flash_info.erase_size;
 802ac80:	8b3b      	ldrh	r3, [r7, #24]
 802ac82:	461a      	mov	r2, r3
 802ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac86:	61da      	str	r2, [r3, #28]
    cfg->block_count = flash_info.block_count;
 802ac88:	8bbb      	ldrh	r3, [r7, #28]
 802ac8a:	461a      	mov	r2, r3
 802ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac8e:	621a      	str	r2, [r3, #32]

    cfg->lookahead_size = buffers_size;
 802ac90:	887a      	ldrh	r2, [r7, #2]
 802ac92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac94:	62da      	str	r2, [r3, #44]	; 0x2c
    cfg->cache_size     = buffers_size;
 802ac96:	887a      	ldrh	r2, [r7, #2]
 802ac98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac9a:	629a      	str	r2, [r3, #40]	; 0x28
    cfg->read_buffer = lfsReadBuff;
 802ac9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ac9e:	68fa      	ldr	r2, [r7, #12]
 802aca0:	631a      	str	r2, [r3, #48]	; 0x30
    cfg->prog_buffer = lfsWriteBuff;
 802aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802aca4:	68ba      	ldr	r2, [r7, #8]
 802aca6:	635a      	str	r2, [r3, #52]	; 0x34
 //   cfg.file_buffer = lfsReadBuff;
    cfg->lookahead_buffer = lfslookaheadBuff;
 802aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acaa:	687a      	ldr	r2, [r7, #4]
 802acac:	639a      	str	r2, [r3, #56]	; 0x38

    cfg->read   = block_device_read;
 802acae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acb0:	4a11      	ldr	r2, [pc, #68]	; (802acf8 <io_fs_init+0xa0>)
 802acb2:	605a      	str	r2, [r3, #4]
    cfg->prog   = block_device_prog;
 802acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acb6:	4a11      	ldr	r2, [pc, #68]	; (802acfc <io_fs_init+0xa4>)
 802acb8:	609a      	str	r2, [r3, #8]
    cfg->erase  = block_device_erase;
 802acba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acbc:	4a10      	ldr	r2, [pc, #64]	; (802ad00 <io_fs_init+0xa8>)
 802acbe:	60da      	str	r2, [r3, #12]
    cfg->sync   = block_device_sync;
 802acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acc2:	4a10      	ldr	r2, [pc, #64]	; (802ad04 <io_fs_init+0xac>)
 802acc4:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
	cfg.lock 	= lfs_lock;
	cfg.unlock	= lfs_unlock;
#endif

    cfg->block_cycles 	= FLASH_BLOCK_CYCLES;
 802acc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acc8:	f242 7210 	movw	r2, #10000	; 0x2710
 802accc:	625a      	str	r2, [r3, #36]	; 0x24
    cfg->name_max  		= LFS_NAME_MAX;
 802acce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acd0:	22ff      	movs	r2, #255	; 0xff
 802acd2:	63da      	str	r2, [r3, #60]	; 0x3c
    cfg->file_max		= LFS_FILE_MAX;
 802acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acd6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 802acda:	641a      	str	r2, [r3, #64]	; 0x40
    cfg->attr_max		= LFS_ATTR_MAX;
 802acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acde:	f240 32fe 	movw	r2, #1022	; 0x3fe
 802ace2:	645a      	str	r2, [r3, #68]	; 0x44
    cfg->metadata_max	= flash_info.erase_size;
 802ace4:	8b3b      	ldrh	r3, [r7, #24]
 802ace6:	461a      	mov	r2, r3
 802ace8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802acea:	649a      	str	r2, [r3, #72]	; 0x48

    return 0;
 802acec:	2300      	movs	r3, #0
}
 802acee:	4618      	mov	r0, r3
 802acf0:	3720      	adds	r7, #32
 802acf2:	46bd      	mov	sp, r7
 802acf4:	bd80      	pop	{r7, pc}
 802acf6:	bf00      	nop
 802acf8:	0802ad09 	.word	0x0802ad09
 802acfc:	0802ada5 	.word	0x0802ada5
 802ad00:	0802ad5d 	.word	0x0802ad5d
 802ad04:	0802adf9 	.word	0x0802adf9

0802ad08 <block_device_read>:

int block_device_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size){
 802ad08:	b580      	push	{r7, lr}
 802ad0a:	b084      	sub	sp, #16
 802ad0c:	af00      	add	r7, sp, #0
 802ad0e:	60f8      	str	r0, [r7, #12]
 802ad10:	60b9      	str	r1, [r7, #8]
 802ad12:	607a      	str	r2, [r7, #4]
 802ad14:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ad16:	68fb      	ldr	r3, [r7, #12]
 802ad18:	6a1b      	ldr	r3, [r3, #32]
 802ad1a:	68ba      	ldr	r2, [r7, #8]
 802ad1c:	429a      	cmp	r2, r3
 802ad1e:	d305      	bcc.n	802ad2c <block_device_read+0x24>
 802ad20:	4b0b      	ldr	r3, [pc, #44]	; (802ad50 <block_device_read+0x48>)
 802ad22:	4a0c      	ldr	r2, [pc, #48]	; (802ad54 <block_device_read+0x4c>)
 802ad24:	2148      	movs	r1, #72	; 0x48
 802ad26:	480c      	ldr	r0, [pc, #48]	; (802ad58 <block_device_read+0x50>)
 802ad28:	f001 fcf0 	bl	802c70c <__assert_func>
#endif
	sFLASH_ReadBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802ad2c:	68fb      	ldr	r3, [r7, #12]
 802ad2e:	69db      	ldr	r3, [r3, #28]
 802ad30:	68ba      	ldr	r2, [r7, #8]
 802ad32:	fb03 f202 	mul.w	r2, r3, r2
 802ad36:	687b      	ldr	r3, [r7, #4]
 802ad38:	4413      	add	r3, r2
 802ad3a:	69ba      	ldr	r2, [r7, #24]
 802ad3c:	b292      	uxth	r2, r2
 802ad3e:	4619      	mov	r1, r3
 802ad40:	6838      	ldr	r0, [r7, #0]
 802ad42:	f7ea fc35 	bl	80155b0 <sFLASH_ReadBuffer>
	return 0;
 802ad46:	2300      	movs	r3, #0
}
 802ad48:	4618      	mov	r0, r3
 802ad4a:	3710      	adds	r7, #16
 802ad4c:	46bd      	mov	sp, r7
 802ad4e:	bd80      	pop	{r7, pc}
 802ad50:	08034128 	.word	0x08034128
 802ad54:	08034bfc 	.word	0x08034bfc
 802ad58:	08034140 	.word	0x08034140

0802ad5c <block_device_erase>:

int block_device_erase(const struct lfs_config *c, lfs_block_t block){
 802ad5c:	b580      	push	{r7, lr}
 802ad5e:	b082      	sub	sp, #8
 802ad60:	af00      	add	r7, sp, #0
 802ad62:	6078      	str	r0, [r7, #4]
 802ad64:	6039      	str	r1, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802ad66:	687b      	ldr	r3, [r7, #4]
 802ad68:	6a1b      	ldr	r3, [r3, #32]
 802ad6a:	683a      	ldr	r2, [r7, #0]
 802ad6c:	429a      	cmp	r2, r3
 802ad6e:	d305      	bcc.n	802ad7c <block_device_erase+0x20>
 802ad70:	4b09      	ldr	r3, [pc, #36]	; (802ad98 <block_device_erase+0x3c>)
 802ad72:	4a0a      	ldr	r2, [pc, #40]	; (802ad9c <block_device_erase+0x40>)
 802ad74:	2150      	movs	r1, #80	; 0x50
 802ad76:	480a      	ldr	r0, [pc, #40]	; (802ada0 <block_device_erase+0x44>)
 802ad78:	f001 fcc8 	bl	802c70c <__assert_func>
#endif
	sFLASH_EraseSector(block * (c -> block_size));
 802ad7c:	687b      	ldr	r3, [r7, #4]
 802ad7e:	69db      	ldr	r3, [r3, #28]
 802ad80:	683a      	ldr	r2, [r7, #0]
 802ad82:	fb02 f303 	mul.w	r3, r2, r3
 802ad86:	4618      	mov	r0, r3
 802ad88:	f7ea fb10 	bl	80153ac <sFLASH_EraseSector>
	return 0;
 802ad8c:	2300      	movs	r3, #0
}
 802ad8e:	4618      	mov	r0, r3
 802ad90:	3708      	adds	r7, #8
 802ad92:	46bd      	mov	sp, r7
 802ad94:	bd80      	pop	{r7, pc}
 802ad96:	bf00      	nop
 802ad98:	08034128 	.word	0x08034128
 802ad9c:	08034c10 	.word	0x08034c10
 802ada0:	08034140 	.word	0x08034140

0802ada4 <block_device_prog>:

int block_device_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size){
 802ada4:	b580      	push	{r7, lr}
 802ada6:	b084      	sub	sp, #16
 802ada8:	af00      	add	r7, sp, #0
 802adaa:	60f8      	str	r0, [r7, #12]
 802adac:	60b9      	str	r1, [r7, #8]
 802adae:	607a      	str	r2, [r7, #4]
 802adb0:	603b      	str	r3, [r7, #0]
#ifndef LFS_NO_ASSERT
	assert(block < c->block_count);
 802adb2:	68fb      	ldr	r3, [r7, #12]
 802adb4:	6a1b      	ldr	r3, [r3, #32]
 802adb6:	68ba      	ldr	r2, [r7, #8]
 802adb8:	429a      	cmp	r2, r3
 802adba:	d305      	bcc.n	802adc8 <block_device_prog+0x24>
 802adbc:	4b0b      	ldr	r3, [pc, #44]	; (802adec <block_device_prog+0x48>)
 802adbe:	4a0c      	ldr	r2, [pc, #48]	; (802adf0 <block_device_prog+0x4c>)
 802adc0:	2158      	movs	r1, #88	; 0x58
 802adc2:	480c      	ldr	r0, [pc, #48]	; (802adf4 <block_device_prog+0x50>)
 802adc4:	f001 fca2 	bl	802c70c <__assert_func>
#endif
	sFLASH_WriteBuffer((uint8_t*)buffer, ((block) * (c->block_size) + off), size);
 802adc8:	68fb      	ldr	r3, [r7, #12]
 802adca:	69db      	ldr	r3, [r3, #28]
 802adcc:	68ba      	ldr	r2, [r7, #8]
 802adce:	fb03 f202 	mul.w	r2, r3, r2
 802add2:	687b      	ldr	r3, [r7, #4]
 802add4:	4413      	add	r3, r2
 802add6:	69ba      	ldr	r2, [r7, #24]
 802add8:	b292      	uxth	r2, r2
 802adda:	4619      	mov	r1, r3
 802addc:	6838      	ldr	r0, [r7, #0]
 802adde:	f7ea fb3e 	bl	801545e <sFLASH_WriteBuffer>
	return 0;
 802ade2:	2300      	movs	r3, #0
}
 802ade4:	4618      	mov	r0, r3
 802ade6:	3710      	adds	r7, #16
 802ade8:	46bd      	mov	sp, r7
 802adea:	bd80      	pop	{r7, pc}
 802adec:	08034128 	.word	0x08034128
 802adf0:	08034c24 	.word	0x08034c24
 802adf4:	08034140 	.word	0x08034140

0802adf8 <block_device_sync>:

int block_device_sync(const struct lfs_config *c){
 802adf8:	b480      	push	{r7}
 802adfa:	b083      	sub	sp, #12
 802adfc:	af00      	add	r7, sp, #0
 802adfe:	6078      	str	r0, [r7, #4]
	return 0;
 802ae00:	2300      	movs	r3, #0
}
 802ae02:	4618      	mov	r0, r3
 802ae04:	370c      	adds	r7, #12
 802ae06:	46bd      	mov	sp, r7
 802ae08:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae0c:	4770      	bx	lr
	...

0802ae10 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 802ae10:	b480      	push	{r7}
 802ae12:	b087      	sub	sp, #28
 802ae14:	af00      	add	r7, sp, #0
 802ae16:	60f8      	str	r0, [r7, #12]
 802ae18:	60b9      	str	r1, [r7, #8]
 802ae1a:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 802ae1c:	68bb      	ldr	r3, [r7, #8]
 802ae1e:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 802ae20:	2300      	movs	r3, #0
 802ae22:	617b      	str	r3, [r7, #20]
 802ae24:	e024      	b.n	802ae70 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 802ae26:	68fb      	ldr	r3, [r7, #12]
 802ae28:	091a      	lsrs	r2, r3, #4
 802ae2a:	6939      	ldr	r1, [r7, #16]
 802ae2c:	697b      	ldr	r3, [r7, #20]
 802ae2e:	440b      	add	r3, r1
 802ae30:	781b      	ldrb	r3, [r3, #0]
 802ae32:	4619      	mov	r1, r3
 802ae34:	68fb      	ldr	r3, [r7, #12]
 802ae36:	404b      	eors	r3, r1
 802ae38:	f003 030f 	and.w	r3, r3, #15
 802ae3c:	4912      	ldr	r1, [pc, #72]	; (802ae88 <lfs_crc+0x78>)
 802ae3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ae42:	4053      	eors	r3, r2
 802ae44:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 802ae46:	68fb      	ldr	r3, [r7, #12]
 802ae48:	091a      	lsrs	r2, r3, #4
 802ae4a:	6939      	ldr	r1, [r7, #16]
 802ae4c:	697b      	ldr	r3, [r7, #20]
 802ae4e:	440b      	add	r3, r1
 802ae50:	781b      	ldrb	r3, [r3, #0]
 802ae52:	091b      	lsrs	r3, r3, #4
 802ae54:	b2db      	uxtb	r3, r3
 802ae56:	4619      	mov	r1, r3
 802ae58:	68fb      	ldr	r3, [r7, #12]
 802ae5a:	404b      	eors	r3, r1
 802ae5c:	f003 030f 	and.w	r3, r3, #15
 802ae60:	4909      	ldr	r1, [pc, #36]	; (802ae88 <lfs_crc+0x78>)
 802ae62:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 802ae66:	4053      	eors	r3, r2
 802ae68:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 802ae6a:	697b      	ldr	r3, [r7, #20]
 802ae6c:	3301      	adds	r3, #1
 802ae6e:	617b      	str	r3, [r7, #20]
 802ae70:	697a      	ldr	r2, [r7, #20]
 802ae72:	687b      	ldr	r3, [r7, #4]
 802ae74:	429a      	cmp	r2, r3
 802ae76:	d3d6      	bcc.n	802ae26 <lfs_crc+0x16>
    }

    return crc;
 802ae78:	68fb      	ldr	r3, [r7, #12]
}
 802ae7a:	4618      	mov	r0, r3
 802ae7c:	371c      	adds	r7, #28
 802ae7e:	46bd      	mov	sp, r7
 802ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ae84:	4770      	bx	lr
 802ae86:	bf00      	nop
 802ae88:	08034c38 	.word	0x08034c38

0802ae8c <spi_fs_init_mutex>:
//int (* lfs_unlock)(const struct lfs_config *c);

void (* FSMutexGet)		(void);
void (* FSMutexRelease)	(void);

void spi_fs_init_mutex(void (*get_mutex)(void), void (*release_mutex)(void)){
 802ae8c:	b480      	push	{r7}
 802ae8e:	b083      	sub	sp, #12
 802ae90:	af00      	add	r7, sp, #0
 802ae92:	6078      	str	r0, [r7, #4]
 802ae94:	6039      	str	r1, [r7, #0]

	if (get_mutex) FSMutexGet = get_mutex;
 802ae96:	687b      	ldr	r3, [r7, #4]
 802ae98:	2b00      	cmp	r3, #0
 802ae9a:	d002      	beq.n	802aea2 <spi_fs_init_mutex+0x16>
 802ae9c:	4a07      	ldr	r2, [pc, #28]	; (802aebc <spi_fs_init_mutex+0x30>)
 802ae9e:	687b      	ldr	r3, [r7, #4]
 802aea0:	6013      	str	r3, [r2, #0]
	if (release_mutex) FSMutexRelease = release_mutex;
 802aea2:	683b      	ldr	r3, [r7, #0]
 802aea4:	2b00      	cmp	r3, #0
 802aea6:	d002      	beq.n	802aeae <spi_fs_init_mutex+0x22>
 802aea8:	4a05      	ldr	r2, [pc, #20]	; (802aec0 <spi_fs_init_mutex+0x34>)
 802aeaa:	683b      	ldr	r3, [r7, #0]
 802aeac:	6013      	str	r3, [r2, #0]

};
 802aeae:	bf00      	nop
 802aeb0:	370c      	adds	r7, #12
 802aeb2:	46bd      	mov	sp, r7
 802aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 802aeb8:	4770      	bx	lr
 802aeba:	bf00      	nop
 802aebc:	2000d9c0 	.word	0x2000d9c0
 802aec0:	2000d9c4 	.word	0x2000d9c4

0802aec4 <spi_fs_init>:

int spi_fs_init(uint8_t * lfsReadBuff, uint8_t * lfsWriteBuff, uint8_t * lfslookaheadBuff, uint16_t buffers_size){
 802aec4:	b590      	push	{r4, r7, lr}
 802aec6:	b08b      	sub	sp, #44	; 0x2c
 802aec8:	af02      	add	r7, sp, #8
 802aeca:	61f8      	str	r0, [r7, #28]
 802aecc:	61b9      	str	r1, [r7, #24]
 802aece:	617a      	str	r2, [r7, #20]
 802aed0:	827b      	strh	r3, [r7, #18]

	flash_parameters = sFLASH_GetInfo();
 802aed2:	4c14      	ldr	r4, [pc, #80]	; (802af24 <spi_fs_init+0x60>)
 802aed4:	463b      	mov	r3, r7
 802aed6:	4618      	mov	r0, r3
 802aed8:	f7ea f9c2 	bl	8015260 <sFLASH_GetInfo>
 802aedc:	463b      	mov	r3, r7
 802aede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802aee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (flash_parameters.flash_id == 0x0) return -1;
 802aee4:	4b0f      	ldr	r3, [pc, #60]	; (802af24 <spi_fs_init+0x60>)
 802aee6:	681b      	ldr	r3, [r3, #0]
 802aee8:	2b00      	cmp	r3, #0
 802aeea:	d102      	bne.n	802aef2 <spi_fs_init+0x2e>
 802aeec:	f04f 33ff 	mov.w	r3, #4294967295
 802aef0:	e013      	b.n	802af1a <spi_fs_init+0x56>

	io_fs_init(lfsReadBuff, lfsWriteBuff, lfslookaheadBuff, buffers_size, &cfg);
 802aef2:	8a7b      	ldrh	r3, [r7, #18]
 802aef4:	4a0c      	ldr	r2, [pc, #48]	; (802af28 <spi_fs_init+0x64>)
 802aef6:	9200      	str	r2, [sp, #0]
 802aef8:	697a      	ldr	r2, [r7, #20]
 802aefa:	69b9      	ldr	r1, [r7, #24]
 802aefc:	69f8      	ldr	r0, [r7, #28]
 802aefe:	f7ff feab 	bl	802ac58 <io_fs_init>

	memset(&fileConf, 0, sizeof(struct lfs_file_config));
 802af02:	220c      	movs	r2, #12
 802af04:	2100      	movs	r1, #0
 802af06:	4809      	ldr	r0, [pc, #36]	; (802af2c <spi_fs_init+0x68>)
 802af08:	f002 fdd0 	bl	802daac <memset>
	fileConf.buffer = lfs_file_buf;  						// use the static buffer
 802af0c:	4b07      	ldr	r3, [pc, #28]	; (802af2c <spi_fs_init+0x68>)
 802af0e:	4a08      	ldr	r2, [pc, #32]	; (802af30 <spi_fs_init+0x6c>)
 802af10:	601a      	str	r2, [r3, #0]
	fileConf.attr_count = 0;
 802af12:	4b06      	ldr	r3, [pc, #24]	; (802af2c <spi_fs_init+0x68>)
 802af14:	2200      	movs	r2, #0
 802af16:	609a      	str	r2, [r3, #8]

	return 0;
 802af18:	2300      	movs	r3, #0
}
 802af1a:	4618      	mov	r0, r3
 802af1c:	3724      	adds	r7, #36	; 0x24
 802af1e:	46bd      	mov	sp, r7
 802af20:	bd90      	pop	{r4, r7, pc}
 802af22:	bf00      	nop
 802af24:	2000d924 	.word	0x2000d924
 802af28:	2000d8d8 	.word	0x2000d8d8
 802af2c:	2000d934 	.word	0x2000d934
 802af30:	2000d4cc 	.word	0x2000d4cc

0802af34 <spi_fs_mount>:

int spi_fs_mount(void){
 802af34:	b580      	push	{r7, lr}
 802af36:	b082      	sub	sp, #8
 802af38:	af00      	add	r7, sp, #0
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802af3a:	4b0d      	ldr	r3, [pc, #52]	; (802af70 <spi_fs_mount+0x3c>)
 802af3c:	681b      	ldr	r3, [r3, #0]
 802af3e:	4798      	blx	r3
#endif
	err = lfs_mount(&lfs, &cfg);
 802af40:	490c      	ldr	r1, [pc, #48]	; (802af74 <spi_fs_mount+0x40>)
 802af42:	480d      	ldr	r0, [pc, #52]	; (802af78 <spi_fs_mount+0x44>)
 802af44:	f7ff fcc4 	bl	802a8d0 <lfs_mount>
 802af48:	6078      	str	r0, [r7, #4]
	if (err) {
 802af4a:	687b      	ldr	r3, [r7, #4]
 802af4c:	2b00      	cmp	r3, #0
 802af4e:	d003      	beq.n	802af58 <spi_fs_mount+0x24>
		fs_mount_flag = 0;
 802af50:	4b0a      	ldr	r3, [pc, #40]	; (802af7c <spi_fs_mount+0x48>)
 802af52:	2200      	movs	r2, #0
 802af54:	701a      	strb	r2, [r3, #0]
 802af56:	e002      	b.n	802af5e <spi_fs_mount+0x2a>
	}else{
		fs_mount_flag = 1;
 802af58:	4b08      	ldr	r3, [pc, #32]	; (802af7c <spi_fs_mount+0x48>)
 802af5a:	2201      	movs	r2, #1
 802af5c:	701a      	strb	r2, [r3, #0]
	}
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802af5e:	4b08      	ldr	r3, [pc, #32]	; (802af80 <spi_fs_mount+0x4c>)
 802af60:	681b      	ldr	r3, [r3, #0]
 802af62:	4798      	blx	r3
#endif

	return err;
 802af64:	687b      	ldr	r3, [r7, #4]
}
 802af66:	4618      	mov	r0, r3
 802af68:	3708      	adds	r7, #8
 802af6a:	46bd      	mov	sp, r7
 802af6c:	bd80      	pop	{r7, pc}
 802af6e:	bf00      	nop
 802af70:	2000d9c0 	.word	0x2000d9c0
 802af74:	2000d8d8 	.word	0x2000d8d8
 802af78:	2000d6d0 	.word	0x2000d6d0
 802af7c:	2000d6cc 	.word	0x2000d6cc
 802af80:	2000d9c4 	.word	0x2000d9c4

0802af84 <spi_fs_format>:
int spi_fs_mount_status(void){

	return fs_mount_flag;
}

void spi_fs_format(void){
 802af84:	b580      	push	{r7, lr}
 802af86:	af00      	add	r7, sp, #0
	lfs_format(&lfs, &cfg);
 802af88:	4902      	ldr	r1, [pc, #8]	; (802af94 <spi_fs_format+0x10>)
 802af8a:	4803      	ldr	r0, [pc, #12]	; (802af98 <spi_fs_format+0x14>)
 802af8c:	f7ff fc8a 	bl	802a8a4 <lfs_format>
}
 802af90:	bf00      	nop
 802af92:	bd80      	pop	{r7, pc}
 802af94:	2000d8d8 	.word	0x2000d8d8
 802af98:	2000d6d0 	.word	0x2000d6d0

0802af9c <spi_fs_read_file_offset>:
	FSMutexRelease();
#endif
	return err;
}

int spi_fs_read_file_offset(const char *path, void *buffer, uint32_t offset, uint32_t read_size){
 802af9c:	b580      	push	{r7, lr}
 802af9e:	b088      	sub	sp, #32
 802afa0:	af02      	add	r7, sp, #8
 802afa2:	60f8      	str	r0, [r7, #12]
 802afa4:	60b9      	str	r1, [r7, #8]
 802afa6:	607a      	str	r2, [r7, #4]
 802afa8:	603b      	str	r3, [r7, #0]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802afaa:	4b19      	ldr	r3, [pc, #100]	; (802b010 <spi_fs_read_file_offset+0x74>)
 802afac:	681b      	ldr	r3, [r3, #0]
 802afae:	4798      	blx	r3
#endif
	err =	lfs_file_opencfg(&lfs, &file, path, LFS_O_RDONLY | LFS_O_CREAT, &fileConf);
 802afb0:	4b18      	ldr	r3, [pc, #96]	; (802b014 <spi_fs_read_file_offset+0x78>)
 802afb2:	9300      	str	r3, [sp, #0]
 802afb4:	f240 1301 	movw	r3, #257	; 0x101
 802afb8:	68fa      	ldr	r2, [r7, #12]
 802afba:	4917      	ldr	r1, [pc, #92]	; (802b018 <spi_fs_read_file_offset+0x7c>)
 802afbc:	4817      	ldr	r0, [pc, #92]	; (802b01c <spi_fs_read_file_offset+0x80>)
 802afbe:	f7ff fce3 	bl	802a988 <lfs_file_opencfg>
 802afc2:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802afc4:	697b      	ldr	r3, [r7, #20]
 802afc6:	2b00      	cmp	r3, #0
 802afc8:	db13      	blt.n	802aff2 <spi_fs_read_file_offset+0x56>
	err =	lfs_file_seek(&lfs, &file, offset, LFS_SEEK_SET);
 802afca:	687a      	ldr	r2, [r7, #4]
 802afcc:	2300      	movs	r3, #0
 802afce:	4912      	ldr	r1, [pc, #72]	; (802b018 <spi_fs_read_file_offset+0x7c>)
 802afd0:	4812      	ldr	r0, [pc, #72]	; (802b01c <spi_fs_read_file_offset+0x80>)
 802afd2:	f7ff fd9b 	bl	802ab0c <lfs_file_seek>
 802afd6:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802afd8:	697b      	ldr	r3, [r7, #20]
 802afda:	2b00      	cmp	r3, #0
 802afdc:	db0b      	blt.n	802aff6 <spi_fs_read_file_offset+0x5a>
	err =	lfs_file_read(&lfs, &file, buffer, read_size);
 802afde:	683b      	ldr	r3, [r7, #0]
 802afe0:	68ba      	ldr	r2, [r7, #8]
 802afe2:	490d      	ldr	r1, [pc, #52]	; (802b018 <spi_fs_read_file_offset+0x7c>)
 802afe4:	480d      	ldr	r0, [pc, #52]	; (802b01c <spi_fs_read_file_offset+0x80>)
 802afe6:	f7ff fd31 	bl	802aa4c <lfs_file_read>
 802afea:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802afec:	697b      	ldr	r3, [r7, #20]
 802afee:	2b00      	cmp	r3, #0

	func_end:
 802aff0:	e002      	b.n	802aff8 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802aff2:	bf00      	nop
 802aff4:	e000      	b.n	802aff8 <spi_fs_read_file_offset+0x5c>
	if (err < 0) goto func_end;
 802aff6:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802aff8:	4907      	ldr	r1, [pc, #28]	; (802b018 <spi_fs_read_file_offset+0x7c>)
 802affa:	4808      	ldr	r0, [pc, #32]	; (802b01c <spi_fs_read_file_offset+0x80>)
 802affc:	f7ff fcfa 	bl	802a9f4 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b000:	4b07      	ldr	r3, [pc, #28]	; (802b020 <spi_fs_read_file_offset+0x84>)
 802b002:	681b      	ldr	r3, [r3, #0]
 802b004:	4798      	blx	r3
#endif
	return err;
 802b006:	697b      	ldr	r3, [r7, #20]

}
 802b008:	4618      	mov	r0, r3
 802b00a:	3718      	adds	r7, #24
 802b00c:	46bd      	mov	sp, r7
 802b00e:	bd80      	pop	{r7, pc}
 802b010:	2000d9c0 	.word	0x2000d9c0
 802b014:	2000d934 	.word	0x2000d934
 802b018:	2000d748 	.word	0x2000d748
 802b01c:	2000d6d0 	.word	0x2000d6d0
 802b020:	2000d9c4 	.word	0x2000d9c4

0802b024 <spi_fs_over_write_file>:

int spi_fs_over_write_file(const char *path, void *buffer, uint32_t write_size){
 802b024:	b580      	push	{r7, lr}
 802b026:	b088      	sub	sp, #32
 802b028:	af02      	add	r7, sp, #8
 802b02a:	60f8      	str	r0, [r7, #12]
 802b02c:	60b9      	str	r1, [r7, #8]
 802b02e:	607a      	str	r2, [r7, #4]
	int err = 0;
 802b030:	2300      	movs	r3, #0
 802b032:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b034:	4b12      	ldr	r3, [pc, #72]	; (802b080 <spi_fs_over_write_file+0x5c>)
 802b036:	681b      	ldr	r3, [r3, #0]
 802b038:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_TRUNC, &fileConf);
 802b03a:	4b12      	ldr	r3, [pc, #72]	; (802b084 <spi_fs_over_write_file+0x60>)
 802b03c:	9300      	str	r3, [sp, #0]
 802b03e:	f240 5303 	movw	r3, #1283	; 0x503
 802b042:	68fa      	ldr	r2, [r7, #12]
 802b044:	4910      	ldr	r1, [pc, #64]	; (802b088 <spi_fs_over_write_file+0x64>)
 802b046:	4811      	ldr	r0, [pc, #68]	; (802b08c <spi_fs_over_write_file+0x68>)
 802b048:	f7ff fc9e 	bl	802a988 <lfs_file_opencfg>
 802b04c:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b04e:	697b      	ldr	r3, [r7, #20]
 802b050:	2b00      	cmp	r3, #0
 802b052:	db0b      	blt.n	802b06c <spi_fs_over_write_file+0x48>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802b054:	687b      	ldr	r3, [r7, #4]
 802b056:	68ba      	ldr	r2, [r7, #8]
 802b058:	490b      	ldr	r1, [pc, #44]	; (802b088 <spi_fs_over_write_file+0x64>)
 802b05a:	480c      	ldr	r0, [pc, #48]	; (802b08c <spi_fs_over_write_file+0x68>)
 802b05c:	f7ff fd26 	bl	802aaac <lfs_file_write>
 802b060:	6178      	str	r0, [r7, #20]

	lfs_file_close(&lfs, &file);
 802b062:	4909      	ldr	r1, [pc, #36]	; (802b088 <spi_fs_over_write_file+0x64>)
 802b064:	4809      	ldr	r0, [pc, #36]	; (802b08c <spi_fs_over_write_file+0x68>)
 802b066:	f7ff fcc5 	bl	802a9f4 <lfs_file_close>
 802b06a:	e000      	b.n	802b06e <spi_fs_over_write_file+0x4a>
	if (err < 0) goto func_end;
 802b06c:	bf00      	nop
	func_end:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b06e:	4b08      	ldr	r3, [pc, #32]	; (802b090 <spi_fs_over_write_file+0x6c>)
 802b070:	681b      	ldr	r3, [r3, #0]
 802b072:	4798      	blx	r3
#endif
	return err;
 802b074:	697b      	ldr	r3, [r7, #20]
}
 802b076:	4618      	mov	r0, r3
 802b078:	3718      	adds	r7, #24
 802b07a:	46bd      	mov	sp, r7
 802b07c:	bd80      	pop	{r7, pc}
 802b07e:	bf00      	nop
 802b080:	2000d9c0 	.word	0x2000d9c0
 802b084:	2000d934 	.word	0x2000d934
 802b088:	2000d748 	.word	0x2000d748
 802b08c:	2000d6d0 	.word	0x2000d6d0
 802b090:	2000d9c4 	.word	0x2000d9c4

0802b094 <spi_fs_file_size>:

int spi_fs_file_size(const char *path){
 802b094:	b580      	push	{r7, lr}
 802b096:	b084      	sub	sp, #16
 802b098:	af00      	add	r7, sp, #0
 802b09a:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b09c:	4b0b      	ldr	r3, [pc, #44]	; (802b0cc <spi_fs_file_size+0x38>)
 802b09e:	681b      	ldr	r3, [r3, #0]
 802b0a0:	4798      	blx	r3
#endif

	err = lfs_stat(&lfs, path, &file_info);
 802b0a2:	4a0b      	ldr	r2, [pc, #44]	; (802b0d0 <spi_fs_file_size+0x3c>)
 802b0a4:	6879      	ldr	r1, [r7, #4]
 802b0a6:	480b      	ldr	r0, [pc, #44]	; (802b0d4 <spi_fs_file_size+0x40>)
 802b0a8:	f7ff fc56 	bl	802a958 <lfs_stat>
 802b0ac:	60f8      	str	r0, [r7, #12]
	if (err == 0){
 802b0ae:	68fb      	ldr	r3, [r7, #12]
 802b0b0:	2b00      	cmp	r3, #0
 802b0b2:	d102      	bne.n	802b0ba <spi_fs_file_size+0x26>
		err = file_info.size;
 802b0b4:	4b06      	ldr	r3, [pc, #24]	; (802b0d0 <spi_fs_file_size+0x3c>)
 802b0b6:	685b      	ldr	r3, [r3, #4]
 802b0b8:	60fb      	str	r3, [r7, #12]
	}

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b0ba:	4b07      	ldr	r3, [pc, #28]	; (802b0d8 <spi_fs_file_size+0x44>)
 802b0bc:	681b      	ldr	r3, [r3, #0]
 802b0be:	4798      	blx	r3
#endif
	return err;
 802b0c0:	68fb      	ldr	r3, [r7, #12]
}
 802b0c2:	4618      	mov	r0, r3
 802b0c4:	3710      	adds	r7, #16
 802b0c6:	46bd      	mov	sp, r7
 802b0c8:	bd80      	pop	{r7, pc}
 802b0ca:	bf00      	nop
 802b0cc:	2000d9c0 	.word	0x2000d9c0
 802b0d0:	2000d7d0 	.word	0x2000d7d0
 802b0d4:	2000d6d0 	.word	0x2000d6d0
 802b0d8:	2000d9c4 	.word	0x2000d9c4

0802b0dc <spi_fs_write_file_to_end>:

int spi_fs_write_file_to_end(const char *path, void *buffer, uint32_t write_size){
 802b0dc:	b580      	push	{r7, lr}
 802b0de:	b088      	sub	sp, #32
 802b0e0:	af02      	add	r7, sp, #8
 802b0e2:	60f8      	str	r0, [r7, #12]
 802b0e4:	60b9      	str	r1, [r7, #8]
 802b0e6:	607a      	str	r2, [r7, #4]
	int err = 0;
 802b0e8:	2300      	movs	r3, #0
 802b0ea:	617b      	str	r3, [r7, #20]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b0ec:	4b13      	ldr	r3, [pc, #76]	; (802b13c <spi_fs_write_file_to_end+0x60>)
 802b0ee:	681b      	ldr	r3, [r3, #0]
 802b0f0:	4798      	blx	r3
#endif

	err = lfs_file_opencfg(&lfs, &file, path, LFS_O_RDWR | LFS_O_CREAT | LFS_O_APPEND, &fileConf);
 802b0f2:	4b13      	ldr	r3, [pc, #76]	; (802b140 <spi_fs_write_file_to_end+0x64>)
 802b0f4:	9300      	str	r3, [sp, #0]
 802b0f6:	f640 1303 	movw	r3, #2307	; 0x903
 802b0fa:	68fa      	ldr	r2, [r7, #12]
 802b0fc:	4911      	ldr	r1, [pc, #68]	; (802b144 <spi_fs_write_file_to_end+0x68>)
 802b0fe:	4812      	ldr	r0, [pc, #72]	; (802b148 <spi_fs_write_file_to_end+0x6c>)
 802b100:	f7ff fc42 	bl	802a988 <lfs_file_opencfg>
 802b104:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b106:	697b      	ldr	r3, [r7, #20]
 802b108:	2b00      	cmp	r3, #0
 802b10a:	db09      	blt.n	802b120 <spi_fs_write_file_to_end+0x44>
	err = lfs_file_write(&lfs, &file, buffer, write_size);
 802b10c:	687b      	ldr	r3, [r7, #4]
 802b10e:	68ba      	ldr	r2, [r7, #8]
 802b110:	490c      	ldr	r1, [pc, #48]	; (802b144 <spi_fs_write_file_to_end+0x68>)
 802b112:	480d      	ldr	r0, [pc, #52]	; (802b148 <spi_fs_write_file_to_end+0x6c>)
 802b114:	f7ff fcca 	bl	802aaac <lfs_file_write>
 802b118:	6178      	str	r0, [r7, #20]
	if (err < 0) goto func_end;
 802b11a:	697b      	ldr	r3, [r7, #20]
 802b11c:	2b00      	cmp	r3, #0

	func_end:
 802b11e:	e000      	b.n	802b122 <spi_fs_write_file_to_end+0x46>
	if (err < 0) goto func_end;
 802b120:	bf00      	nop
	lfs_file_close(&lfs, &file);
 802b122:	4908      	ldr	r1, [pc, #32]	; (802b144 <spi_fs_write_file_to_end+0x68>)
 802b124:	4808      	ldr	r0, [pc, #32]	; (802b148 <spi_fs_write_file_to_end+0x6c>)
 802b126:	f7ff fc65 	bl	802a9f4 <lfs_file_close>
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b12a:	4b08      	ldr	r3, [pc, #32]	; (802b14c <spi_fs_write_file_to_end+0x70>)
 802b12c:	681b      	ldr	r3, [r3, #0]
 802b12e:	4798      	blx	r3
#endif
	return err;
 802b130:	697b      	ldr	r3, [r7, #20]
}
 802b132:	4618      	mov	r0, r3
 802b134:	3718      	adds	r7, #24
 802b136:	46bd      	mov	sp, r7
 802b138:	bd80      	pop	{r7, pc}
 802b13a:	bf00      	nop
 802b13c:	2000d9c0 	.word	0x2000d9c0
 802b140:	2000d934 	.word	0x2000d934
 802b144:	2000d748 	.word	0x2000d748
 802b148:	2000d6d0 	.word	0x2000d6d0
 802b14c:	2000d9c4 	.word	0x2000d9c4

0802b150 <spi_fs_serch_file_in_dir>:

int spi_fs_serch_file_in_dir(const char * dir_path, const char * filename){
 802b150:	b580      	push	{r7, lr}
 802b152:	b084      	sub	sp, #16
 802b154:	af00      	add	r7, sp, #0
 802b156:	6078      	str	r0, [r7, #4]
 802b158:	6039      	str	r1, [r7, #0]


	int err;
	memset(temp_buf, 0x0, PATH_BUF_SIZE);
 802b15a:	2280      	movs	r2, #128	; 0x80
 802b15c:	2100      	movs	r1, #0
 802b15e:	480a      	ldr	r0, [pc, #40]	; (802b188 <spi_fs_serch_file_in_dir+0x38>)
 802b160:	f002 fca4 	bl	802daac <memset>
	strcpy((char *)temp_buf, dir_path);
 802b164:	6879      	ldr	r1, [r7, #4]
 802b166:	4808      	ldr	r0, [pc, #32]	; (802b188 <spi_fs_serch_file_in_dir+0x38>)
 802b168:	f002 fe6d 	bl	802de46 <strcpy>
	strcat((char *)temp_buf, filename);
 802b16c:	6839      	ldr	r1, [r7, #0]
 802b16e:	4806      	ldr	r0, [pc, #24]	; (802b188 <spi_fs_serch_file_in_dir+0x38>)
 802b170:	f002 fca4 	bl	802dabc <strcat>
	err = spi_fs_file_size((const char *)temp_buf);
 802b174:	4804      	ldr	r0, [pc, #16]	; (802b188 <spi_fs_serch_file_in_dir+0x38>)
 802b176:	f7ff ff8d 	bl	802b094 <spi_fs_file_size>
 802b17a:	60f8      	str	r0, [r7, #12]
	return err;
 802b17c:	68fb      	ldr	r3, [r7, #12]

}
 802b17e:	4618      	mov	r0, r3
 802b180:	3710      	adds	r7, #16
 802b182:	46bd      	mov	sp, r7
 802b184:	bd80      	pop	{r7, pc}
 802b186:	bf00      	nop
 802b188:	2000d940 	.word	0x2000d940

0802b18c <spi_fs_mkdir>:

int spi_fs_mkdir(const char *path){
 802b18c:	b580      	push	{r7, lr}
 802b18e:	b084      	sub	sp, #16
 802b190:	af00      	add	r7, sp, #0
 802b192:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b194:	4b07      	ldr	r3, [pc, #28]	; (802b1b4 <spi_fs_mkdir+0x28>)
 802b196:	681b      	ldr	r3, [r3, #0]
 802b198:	4798      	blx	r3
#endif

	err = lfs_mkdir(&lfs, path);
 802b19a:	6879      	ldr	r1, [r7, #4]
 802b19c:	4806      	ldr	r0, [pc, #24]	; (802b1b8 <spi_fs_mkdir+0x2c>)
 802b19e:	f7ff fce5 	bl	802ab6c <lfs_mkdir>
 802b1a2:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b1a4:	4b05      	ldr	r3, [pc, #20]	; (802b1bc <spi_fs_mkdir+0x30>)
 802b1a6:	681b      	ldr	r3, [r3, #0]
 802b1a8:	4798      	blx	r3
#endif

	return err;
 802b1aa:	68fb      	ldr	r3, [r7, #12]
}
 802b1ac:	4618      	mov	r0, r3
 802b1ae:	3710      	adds	r7, #16
 802b1b0:	46bd      	mov	sp, r7
 802b1b2:	bd80      	pop	{r7, pc}
 802b1b4:	2000d9c0 	.word	0x2000d9c0
 802b1b8:	2000d6d0 	.word	0x2000d6d0
 802b1bc:	2000d9c4 	.word	0x2000d9c4

0802b1c0 <spi_fs_remove>:
	FSMutexRelease();
#endif

}

int spi_fs_remove(const char *path){
 802b1c0:	b580      	push	{r7, lr}
 802b1c2:	b084      	sub	sp, #16
 802b1c4:	af00      	add	r7, sp, #0
 802b1c6:	6078      	str	r0, [r7, #4]
	int err;
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b1c8:	4b07      	ldr	r3, [pc, #28]	; (802b1e8 <spi_fs_remove+0x28>)
 802b1ca:	681b      	ldr	r3, [r3, #0]
 802b1cc:	4798      	blx	r3
#endif

	err = lfs_remove(&lfs, path);
 802b1ce:	6879      	ldr	r1, [r7, #4]
 802b1d0:	4806      	ldr	r0, [pc, #24]	; (802b1ec <spi_fs_remove+0x2c>)
 802b1d2:	f7ff fb93 	bl	802a8fc <lfs_remove>
 802b1d6:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b1d8:	4b05      	ldr	r3, [pc, #20]	; (802b1f0 <spi_fs_remove+0x30>)
 802b1da:	681b      	ldr	r3, [r3, #0]
 802b1dc:	4798      	blx	r3
#endif
	return err;
 802b1de:	68fb      	ldr	r3, [r7, #12]
}
 802b1e0:	4618      	mov	r0, r3
 802b1e2:	3710      	adds	r7, #16
 802b1e4:	46bd      	mov	sp, r7
 802b1e6:	bd80      	pop	{r7, pc}
 802b1e8:	2000d9c0 	.word	0x2000d9c0
 802b1ec:	2000d6d0 	.word	0x2000d6d0
 802b1f0:	2000d9c4 	.word	0x2000d9c4

0802b1f4 <remove_recursively_files_and_directories>:
#ifdef LFS_USE_MUTEX
	FSMutexRelease();
#endif
}

void remove_recursively_files_and_directories(const char *path, uint8_t deep) {
 802b1f4:	b580      	push	{r7, lr}
 802b1f6:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 802b1fa:	af02      	add	r7, sp, #8
 802b1fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b200:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b204:	6018      	str	r0, [r3, #0]
 802b206:	460a      	mov	r2, r1
 802b208:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b20c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b210:	701a      	strb	r2, [r3, #0]

    struct lfs_info info;

    if (lfs_dir_open(&lfs, &dir, path) == 0) {
 802b212:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b216:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b21a:	681a      	ldr	r2, [r3, #0]
 802b21c:	4945      	ldr	r1, [pc, #276]	; (802b334 <remove_recursively_files_and_directories+0x140>)
 802b21e:	4846      	ldr	r0, [pc, #280]	; (802b338 <remove_recursively_files_and_directories+0x144>)
 802b220:	f7ff fcba 	bl	802ab98 <lfs_dir_open>
 802b224:	4603      	mov	r3, r0
 802b226:	2b00      	cmp	r3, #0
 802b228:	d17f      	bne.n	802b32a <remove_recursively_files_and_directories+0x136>
        // Iterate through the directory entries
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b22a:	e061      	b.n	802b2f0 <remove_recursively_files_and_directories+0xfc>
            if (info.type == LFS_TYPE_DIR) {
 802b22c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 802b234:	781b      	ldrb	r3, [r3, #0]
 802b236:	2b02      	cmp	r3, #2
 802b238:	d13d      	bne.n	802b2b6 <remove_recursively_files_and_directories+0xc2>
            	if ( (strcmp(info.name, ".")==0)||(strcmp(info.name, "..")==0)) continue;
 802b23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b23e:	3308      	adds	r3, #8
 802b240:	493e      	ldr	r1, [pc, #248]	; (802b33c <remove_recursively_files_and_directories+0x148>)
 802b242:	4618      	mov	r0, r3
 802b244:	f7e4 ffcc 	bl	80101e0 <strcmp>
 802b248:	4603      	mov	r3, r0
 802b24a:	2b00      	cmp	r3, #0
 802b24c:	d050      	beq.n	802b2f0 <remove_recursively_files_and_directories+0xfc>
 802b24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b252:	3308      	adds	r3, #8
 802b254:	493a      	ldr	r1, [pc, #232]	; (802b340 <remove_recursively_files_and_directories+0x14c>)
 802b256:	4618      	mov	r0, r3
 802b258:	f7e4 ffc2 	bl	80101e0 <strcmp>
 802b25c:	4603      	mov	r3, r0
 802b25e:	2b00      	cmp	r3, #0
 802b260:	d100      	bne.n	802b264 <remove_recursively_files_and_directories+0x70>
 802b262:	e045      	b.n	802b2f0 <remove_recursively_files_and_directories+0xfc>
                printf("Directory: %s\n", info.name);
 802b264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b268:	3308      	adds	r3, #8
 802b26a:	4619      	mov	r1, r3
 802b26c:	4835      	ldr	r0, [pc, #212]	; (802b344 <remove_recursively_files_and_directories+0x150>)
 802b26e:	f002 fa87 	bl	802d780 <iprintf>
                char sub_path[256];  // Adjust the size based on your needs
                snprintf(sub_path, sizeof(sub_path), "%s/%s", path, info.name);
 802b272:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b276:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b27a:	f107 0008 	add.w	r0, r7, #8
 802b27e:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802b282:	3208      	adds	r2, #8
 802b284:	9200      	str	r2, [sp, #0]
 802b286:	681b      	ldr	r3, [r3, #0]
 802b288:	4a2f      	ldr	r2, [pc, #188]	; (802b348 <remove_recursively_files_and_directories+0x154>)
 802b28a:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b28e:	f002 fa89 	bl	802d7a4 <sniprintf>
                lfs_dir_close(&lfs, &dir);
 802b292:	4928      	ldr	r1, [pc, #160]	; (802b334 <remove_recursively_files_and_directories+0x140>)
 802b294:	4828      	ldr	r0, [pc, #160]	; (802b338 <remove_recursively_files_and_directories+0x144>)
 802b296:	f7ff fcb1 	bl	802abfc <lfs_dir_close>
                remove_recursively_files_and_directories(sub_path, deep + 1);  // Recursive call for subdirectories
 802b29a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b29e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b2a2:	781b      	ldrb	r3, [r3, #0]
 802b2a4:	3301      	adds	r3, #1
 802b2a6:	b2da      	uxtb	r2, r3
 802b2a8:	f107 0308 	add.w	r3, r7, #8
 802b2ac:	4611      	mov	r1, r2
 802b2ae:	4618      	mov	r0, r3
 802b2b0:	f7ff ffa0 	bl	802b1f4 <remove_recursively_files_and_directories>
 802b2b4:	e01c      	b.n	802b2f0 <remove_recursively_files_and_directories+0xfc>
            } else {
            	char sub_path2[256];
                printf("File: %s\n", info.name);
 802b2b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b2ba:	3308      	adds	r3, #8
 802b2bc:	4619      	mov	r1, r3
 802b2be:	4823      	ldr	r0, [pc, #140]	; (802b34c <remove_recursively_files_and_directories+0x158>)
 802b2c0:	f002 fa5e 	bl	802d780 <iprintf>
                snprintf(sub_path2, sizeof(sub_path2), "%s/%s", path, info.name);
 802b2c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b2c8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b2cc:	f107 0008 	add.w	r0, r7, #8
 802b2d0:	f507 7284 	add.w	r2, r7, #264	; 0x108
 802b2d4:	3208      	adds	r2, #8
 802b2d6:	9200      	str	r2, [sp, #0]
 802b2d8:	681b      	ldr	r3, [r3, #0]
 802b2da:	4a1b      	ldr	r2, [pc, #108]	; (802b348 <remove_recursively_files_and_directories+0x154>)
 802b2dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 802b2e0:	f002 fa60 	bl	802d7a4 <sniprintf>
                lfs_remove(&lfs, sub_path2);
 802b2e4:	f107 0308 	add.w	r3, r7, #8
 802b2e8:	4619      	mov	r1, r3
 802b2ea:	4813      	ldr	r0, [pc, #76]	; (802b338 <remove_recursively_files_and_directories+0x144>)
 802b2ec:	f7ff fb06 	bl	802a8fc <lfs_remove>
        while (lfs_dir_read(&lfs, &dir, &info) > 0) {
 802b2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 802b2f4:	461a      	mov	r2, r3
 802b2f6:	490f      	ldr	r1, [pc, #60]	; (802b334 <remove_recursively_files_and_directories+0x140>)
 802b2f8:	480f      	ldr	r0, [pc, #60]	; (802b338 <remove_recursively_files_and_directories+0x144>)
 802b2fa:	f7ff fc95 	bl	802ac28 <lfs_dir_read>
 802b2fe:	4603      	mov	r3, r0
 802b300:	2b00      	cmp	r3, #0
 802b302:	dc93      	bgt.n	802b22c <remove_recursively_files_and_directories+0x38>
            }
        }
        lfs_dir_close(&lfs, &dir);
 802b304:	490b      	ldr	r1, [pc, #44]	; (802b334 <remove_recursively_files_and_directories+0x140>)
 802b306:	480c      	ldr	r0, [pc, #48]	; (802b338 <remove_recursively_files_and_directories+0x144>)
 802b308:	f7ff fc78 	bl	802abfc <lfs_dir_close>
        if (deep >= 1){
 802b30c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b310:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 802b314:	781b      	ldrb	r3, [r3, #0]
 802b316:	2b00      	cmp	r3, #0
 802b318:	d007      	beq.n	802b32a <remove_recursively_files_and_directories+0x136>
        	lfs_remove(&lfs, path);
 802b31a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 802b31e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 802b322:	6819      	ldr	r1, [r3, #0]
 802b324:	4804      	ldr	r0, [pc, #16]	; (802b338 <remove_recursively_files_and_directories+0x144>)
 802b326:	f7ff fae9 	bl	802a8fc <lfs_remove>
        }

    }
}
 802b32a:	bf00      	nop
 802b32c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 802b330:	46bd      	mov	sp, r7
 802b332:	bd80      	pop	{r7, pc}
 802b334:	2000d79c 	.word	0x2000d79c
 802b338:	2000d6d0 	.word	0x2000d6d0
 802b33c:	08034178 	.word	0x08034178
 802b340:	0803417c 	.word	0x0803417c
 802b344:	08034180 	.word	0x08034180
 802b348:	08034190 	.word	0x08034190
 802b34c:	08034198 	.word	0x08034198

0802b350 <spi_fs_remove_recurcuve_in>:

void spi_fs_remove_recurcuve_in (const char *path){
 802b350:	b580      	push	{r7, lr}
 802b352:	b084      	sub	sp, #16
 802b354:	af00      	add	r7, sp, #0
 802b356:	6078      	str	r0, [r7, #4]
#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b358:	4b0b      	ldr	r3, [pc, #44]	; (802b388 <spi_fs_remove_recurcuve_in+0x38>)
 802b35a:	681b      	ldr	r3, [r3, #0]
 802b35c:	4798      	blx	r3
#endif
	uint8_t deep = 0;
 802b35e:	2300      	movs	r3, #0
 802b360:	73fb      	strb	r3, [r7, #15]

	remove_recursively_files_and_directories(path, deep);
 802b362:	7bfb      	ldrb	r3, [r7, #15]
 802b364:	4619      	mov	r1, r3
 802b366:	6878      	ldr	r0, [r7, #4]
 802b368:	f7ff ff44 	bl	802b1f4 <remove_recursively_files_and_directories>
	deep = 0;
 802b36c:	2300      	movs	r3, #0
 802b36e:	73fb      	strb	r3, [r7, #15]
	remove_recursively_files_and_directories(path, deep);
 802b370:	7bfb      	ldrb	r3, [r7, #15]
 802b372:	4619      	mov	r1, r3
 802b374:	6878      	ldr	r0, [r7, #4]
 802b376:	f7ff ff3d 	bl	802b1f4 <remove_recursively_files_and_directories>

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b37a:	4b04      	ldr	r3, [pc, #16]	; (802b38c <spi_fs_remove_recurcuve_in+0x3c>)
 802b37c:	681b      	ldr	r3, [r3, #0]
 802b37e:	4798      	blx	r3
#endif
}
 802b380:	bf00      	nop
 802b382:	3710      	adds	r7, #16
 802b384:	46bd      	mov	sp, r7
 802b386:	bd80      	pop	{r7, pc}
 802b388:	2000d9c0 	.word	0x2000d9c0
 802b38c:	2000d9c4 	.word	0x2000d9c4

0802b390 <spi_fs_mv>:

int spi_fs_mv(const char *oldpath, const char *newpath){
 802b390:	b580      	push	{r7, lr}
 802b392:	b084      	sub	sp, #16
 802b394:	af00      	add	r7, sp, #0
 802b396:	6078      	str	r0, [r7, #4]
 802b398:	6039      	str	r1, [r7, #0]
	int err;

#ifdef LFS_USE_MUTEX
	FSMutexGet();
 802b39a:	4b08      	ldr	r3, [pc, #32]	; (802b3bc <spi_fs_mv+0x2c>)
 802b39c:	681b      	ldr	r3, [r3, #0]
 802b39e:	4798      	blx	r3
#endif

	err = lfs_rename(&lfs, oldpath, newpath);
 802b3a0:	683a      	ldr	r2, [r7, #0]
 802b3a2:	6879      	ldr	r1, [r7, #4]
 802b3a4:	4806      	ldr	r0, [pc, #24]	; (802b3c0 <spi_fs_mv+0x30>)
 802b3a6:	f7ff fabf 	bl	802a928 <lfs_rename>
 802b3aa:	60f8      	str	r0, [r7, #12]

#ifdef LFS_USE_MUTEX
	FSMutexRelease();
 802b3ac:	4b05      	ldr	r3, [pc, #20]	; (802b3c4 <spi_fs_mv+0x34>)
 802b3ae:	681b      	ldr	r3, [r3, #0]
 802b3b0:	4798      	blx	r3
#endif
	return err;
 802b3b2:	68fb      	ldr	r3, [r7, #12]
}
 802b3b4:	4618      	mov	r0, r3
 802b3b6:	3710      	adds	r7, #16
 802b3b8:	46bd      	mov	sp, r7
 802b3ba:	bd80      	pop	{r7, pc}
 802b3bc:	2000d9c0 	.word	0x2000d9c0
 802b3c0:	2000d6d0 	.word	0x2000d6d0
 802b3c4:	2000d9c4 	.word	0x2000d9c4

0802b3c8 <mbedtls_base64_decode>:
/*
 * Decode a base64-formatted buffer
 */
int mbedtls_base64_decode( unsigned char *dst, size_t dlen, size_t *olen,
                   const unsigned char *src, size_t slen )
{
 802b3c8:	b480      	push	{r7}
 802b3ca:	b08b      	sub	sp, #44	; 0x2c
 802b3cc:	af00      	add	r7, sp, #0
 802b3ce:	60f8      	str	r0, [r7, #12]
 802b3d0:	60b9      	str	r1, [r7, #8]
 802b3d2:	607a      	str	r2, [r7, #4]
 802b3d4:	603b      	str	r3, [r7, #0]
    size_t i, n;
    uint32_t j, x;
    unsigned char *p;

    /* First pass: check for validity and get output length */
    for( i = n = j = 0; i < slen; i++ )
 802b3d6:	2300      	movs	r3, #0
 802b3d8:	61fb      	str	r3, [r7, #28]
 802b3da:	2300      	movs	r3, #0
 802b3dc:	623b      	str	r3, [r7, #32]
 802b3de:	6a3b      	ldr	r3, [r7, #32]
 802b3e0:	627b      	str	r3, [r7, #36]	; 0x24
 802b3e2:	e06f      	b.n	802b4c4 <mbedtls_base64_decode+0xfc>
    {
        /* Skip spaces before checking for EOL */
        x = 0;
 802b3e4:	2300      	movs	r3, #0
 802b3e6:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b3e8:	e005      	b.n	802b3f6 <mbedtls_base64_decode+0x2e>
        {
            ++i;
 802b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b3ec:	3301      	adds	r3, #1
 802b3ee:	627b      	str	r3, [r7, #36]	; 0x24
            ++x;
 802b3f0:	69bb      	ldr	r3, [r7, #24]
 802b3f2:	3301      	adds	r3, #1
 802b3f4:	61bb      	str	r3, [r7, #24]
        while( i < slen && src[i] == ' ' )
 802b3f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b3fa:	429a      	cmp	r2, r3
 802b3fc:	d205      	bcs.n	802b40a <mbedtls_base64_decode+0x42>
 802b3fe:	683a      	ldr	r2, [r7, #0]
 802b400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b402:	4413      	add	r3, r2
 802b404:	781b      	ldrb	r3, [r3, #0]
 802b406:	2b20      	cmp	r3, #32
 802b408:	d0ef      	beq.n	802b3ea <mbedtls_base64_decode+0x22>
        }

        /* Spaces at end of buffer are OK */
        if( i == slen )
 802b40a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b40e:	429a      	cmp	r2, r3
 802b410:	d05d      	beq.n	802b4ce <mbedtls_base64_decode+0x106>
            break;

        if( ( slen - i ) >= 2 &&
 802b412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b416:	1ad3      	subs	r3, r2, r3
 802b418:	2b01      	cmp	r3, #1
 802b41a:	d90c      	bls.n	802b436 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b41c:	683a      	ldr	r2, [r7, #0]
 802b41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b420:	4413      	add	r3, r2
 802b422:	781b      	ldrb	r3, [r3, #0]
        if( ( slen - i ) >= 2 &&
 802b424:	2b0d      	cmp	r3, #13
 802b426:	d106      	bne.n	802b436 <mbedtls_base64_decode+0x6e>
            src[i] == '\r' && src[i + 1] == '\n' )
 802b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b42a:	3301      	adds	r3, #1
 802b42c:	683a      	ldr	r2, [r7, #0]
 802b42e:	4413      	add	r3, r2
 802b430:	781b      	ldrb	r3, [r3, #0]
 802b432:	2b0a      	cmp	r3, #10
 802b434:	d040      	beq.n	802b4b8 <mbedtls_base64_decode+0xf0>
            continue;

        if( src[i] == '\n' )
 802b436:	683a      	ldr	r2, [r7, #0]
 802b438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b43a:	4413      	add	r3, r2
 802b43c:	781b      	ldrb	r3, [r3, #0]
 802b43e:	2b0a      	cmp	r3, #10
 802b440:	d03c      	beq.n	802b4bc <mbedtls_base64_decode+0xf4>
            continue;

        /* Space inside a line is an error */
        if( x != 0 )
 802b442:	69bb      	ldr	r3, [r7, #24]
 802b444:	2b00      	cmp	r3, #0
 802b446:	d002      	beq.n	802b44e <mbedtls_base64_decode+0x86>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b448:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b44c:	e0d0      	b.n	802b5f0 <mbedtls_base64_decode+0x228>

        if( src[i] == '=' && ++j > 2 )
 802b44e:	683a      	ldr	r2, [r7, #0]
 802b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b452:	4413      	add	r3, r2
 802b454:	781b      	ldrb	r3, [r3, #0]
 802b456:	2b3d      	cmp	r3, #61	; 0x3d
 802b458:	d108      	bne.n	802b46c <mbedtls_base64_decode+0xa4>
 802b45a:	69fb      	ldr	r3, [r7, #28]
 802b45c:	3301      	adds	r3, #1
 802b45e:	61fb      	str	r3, [r7, #28]
 802b460:	69fb      	ldr	r3, [r7, #28]
 802b462:	2b02      	cmp	r3, #2
 802b464:	d902      	bls.n	802b46c <mbedtls_base64_decode+0xa4>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b466:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b46a:	e0c1      	b.n	802b5f0 <mbedtls_base64_decode+0x228>

        if( src[i] > 127 || base64_dec_map[src[i]] == 127 )
 802b46c:	683a      	ldr	r2, [r7, #0]
 802b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b470:	4413      	add	r3, r2
 802b472:	781b      	ldrb	r3, [r3, #0]
 802b474:	b25b      	sxtb	r3, r3
 802b476:	2b00      	cmp	r3, #0
 802b478:	db08      	blt.n	802b48c <mbedtls_base64_decode+0xc4>
 802b47a:	683a      	ldr	r2, [r7, #0]
 802b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b47e:	4413      	add	r3, r2
 802b480:	781b      	ldrb	r3, [r3, #0]
 802b482:	461a      	mov	r2, r3
 802b484:	4b5d      	ldr	r3, [pc, #372]	; (802b5fc <mbedtls_base64_decode+0x234>)
 802b486:	5c9b      	ldrb	r3, [r3, r2]
 802b488:	2b7f      	cmp	r3, #127	; 0x7f
 802b48a:	d102      	bne.n	802b492 <mbedtls_base64_decode+0xca>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b48c:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b490:	e0ae      	b.n	802b5f0 <mbedtls_base64_decode+0x228>

        if( base64_dec_map[src[i]] < 64 && j != 0 )
 802b492:	683a      	ldr	r2, [r7, #0]
 802b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b496:	4413      	add	r3, r2
 802b498:	781b      	ldrb	r3, [r3, #0]
 802b49a:	461a      	mov	r2, r3
 802b49c:	4b57      	ldr	r3, [pc, #348]	; (802b5fc <mbedtls_base64_decode+0x234>)
 802b49e:	5c9b      	ldrb	r3, [r3, r2]
 802b4a0:	2b3f      	cmp	r3, #63	; 0x3f
 802b4a2:	d805      	bhi.n	802b4b0 <mbedtls_base64_decode+0xe8>
 802b4a4:	69fb      	ldr	r3, [r7, #28]
 802b4a6:	2b00      	cmp	r3, #0
 802b4a8:	d002      	beq.n	802b4b0 <mbedtls_base64_decode+0xe8>
            return( MBEDTLS_ERR_BASE64_INVALID_CHARACTER );
 802b4aa:	f06f 032b 	mvn.w	r3, #43	; 0x2b
 802b4ae:	e09f      	b.n	802b5f0 <mbedtls_base64_decode+0x228>

        n++;
 802b4b0:	6a3b      	ldr	r3, [r7, #32]
 802b4b2:	3301      	adds	r3, #1
 802b4b4:	623b      	str	r3, [r7, #32]
 802b4b6:	e002      	b.n	802b4be <mbedtls_base64_decode+0xf6>
            continue;
 802b4b8:	bf00      	nop
 802b4ba:	e000      	b.n	802b4be <mbedtls_base64_decode+0xf6>
            continue;
 802b4bc:	bf00      	nop
    for( i = n = j = 0; i < slen; i++ )
 802b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b4c0:	3301      	adds	r3, #1
 802b4c2:	627b      	str	r3, [r7, #36]	; 0x24
 802b4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802b4c8:	429a      	cmp	r2, r3
 802b4ca:	d38b      	bcc.n	802b3e4 <mbedtls_base64_decode+0x1c>
 802b4cc:	e000      	b.n	802b4d0 <mbedtls_base64_decode+0x108>
            break;
 802b4ce:	bf00      	nop
    }

    if( n == 0 )
 802b4d0:	6a3b      	ldr	r3, [r7, #32]
 802b4d2:	2b00      	cmp	r3, #0
 802b4d4:	d104      	bne.n	802b4e0 <mbedtls_base64_decode+0x118>
    {
        *olen = 0;
 802b4d6:	687b      	ldr	r3, [r7, #4]
 802b4d8:	2200      	movs	r2, #0
 802b4da:	601a      	str	r2, [r3, #0]
        return( 0 );
 802b4dc:	2300      	movs	r3, #0
 802b4de:	e087      	b.n	802b5f0 <mbedtls_base64_decode+0x228>

    /* The following expression is to calculate the following formula without
     * risk of integer overflow in n:
     *     n = ( ( n * 6 ) + 7 ) >> 3;
     */
    n = ( 6 * ( n >> 3 ) ) + ( ( 6 * ( n & 0x7 ) + 7 ) >> 3 );
 802b4e0:	6a3b      	ldr	r3, [r7, #32]
 802b4e2:	08da      	lsrs	r2, r3, #3
 802b4e4:	4613      	mov	r3, r2
 802b4e6:	005b      	lsls	r3, r3, #1
 802b4e8:	4413      	add	r3, r2
 802b4ea:	005b      	lsls	r3, r3, #1
 802b4ec:	4619      	mov	r1, r3
 802b4ee:	6a3b      	ldr	r3, [r7, #32]
 802b4f0:	f003 0207 	and.w	r2, r3, #7
 802b4f4:	4613      	mov	r3, r2
 802b4f6:	005b      	lsls	r3, r3, #1
 802b4f8:	4413      	add	r3, r2
 802b4fa:	005b      	lsls	r3, r3, #1
 802b4fc:	3307      	adds	r3, #7
 802b4fe:	08db      	lsrs	r3, r3, #3
 802b500:	440b      	add	r3, r1
 802b502:	623b      	str	r3, [r7, #32]
    n -= j;
 802b504:	6a3a      	ldr	r2, [r7, #32]
 802b506:	69fb      	ldr	r3, [r7, #28]
 802b508:	1ad3      	subs	r3, r2, r3
 802b50a:	623b      	str	r3, [r7, #32]

    if( dst == NULL || dlen < n )
 802b50c:	68fb      	ldr	r3, [r7, #12]
 802b50e:	2b00      	cmp	r3, #0
 802b510:	d003      	beq.n	802b51a <mbedtls_base64_decode+0x152>
 802b512:	68ba      	ldr	r2, [r7, #8]
 802b514:	6a3b      	ldr	r3, [r7, #32]
 802b516:	429a      	cmp	r2, r3
 802b518:	d205      	bcs.n	802b526 <mbedtls_base64_decode+0x15e>
    {
        *olen = n;
 802b51a:	687b      	ldr	r3, [r7, #4]
 802b51c:	6a3a      	ldr	r2, [r7, #32]
 802b51e:	601a      	str	r2, [r3, #0]
        return( MBEDTLS_ERR_BASE64_BUFFER_TOO_SMALL );
 802b520:	f06f 0329 	mvn.w	r3, #41	; 0x29
 802b524:	e064      	b.n	802b5f0 <mbedtls_base64_decode+0x228>
    }

   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b526:	2303      	movs	r3, #3
 802b528:	61fb      	str	r3, [r7, #28]
 802b52a:	2300      	movs	r3, #0
 802b52c:	61bb      	str	r3, [r7, #24]
 802b52e:	2300      	movs	r3, #0
 802b530:	623b      	str	r3, [r7, #32]
 802b532:	68fb      	ldr	r3, [r7, #12]
 802b534:	617b      	str	r3, [r7, #20]
 802b536:	e051      	b.n	802b5dc <mbedtls_base64_decode+0x214>
   {
        if( *src == '\r' || *src == '\n' || *src == ' ' )
 802b538:	683b      	ldr	r3, [r7, #0]
 802b53a:	781b      	ldrb	r3, [r3, #0]
 802b53c:	2b0d      	cmp	r3, #13
 802b53e:	d046      	beq.n	802b5ce <mbedtls_base64_decode+0x206>
 802b540:	683b      	ldr	r3, [r7, #0]
 802b542:	781b      	ldrb	r3, [r3, #0]
 802b544:	2b0a      	cmp	r3, #10
 802b546:	d042      	beq.n	802b5ce <mbedtls_base64_decode+0x206>
 802b548:	683b      	ldr	r3, [r7, #0]
 802b54a:	781b      	ldrb	r3, [r3, #0]
 802b54c:	2b20      	cmp	r3, #32
 802b54e:	d03e      	beq.n	802b5ce <mbedtls_base64_decode+0x206>
            continue;

        j -= ( base64_dec_map[*src] == 64 );
 802b550:	683b      	ldr	r3, [r7, #0]
 802b552:	781b      	ldrb	r3, [r3, #0]
 802b554:	461a      	mov	r2, r3
 802b556:	4b29      	ldr	r3, [pc, #164]	; (802b5fc <mbedtls_base64_decode+0x234>)
 802b558:	5c9b      	ldrb	r3, [r3, r2]
 802b55a:	2b40      	cmp	r3, #64	; 0x40
 802b55c:	bf0c      	ite	eq
 802b55e:	2301      	moveq	r3, #1
 802b560:	2300      	movne	r3, #0
 802b562:	b2db      	uxtb	r3, r3
 802b564:	461a      	mov	r2, r3
 802b566:	69fb      	ldr	r3, [r7, #28]
 802b568:	1a9b      	subs	r3, r3, r2
 802b56a:	61fb      	str	r3, [r7, #28]
        x  = ( x << 6 ) | ( base64_dec_map[*src] & 0x3F );
 802b56c:	69bb      	ldr	r3, [r7, #24]
 802b56e:	019a      	lsls	r2, r3, #6
 802b570:	683b      	ldr	r3, [r7, #0]
 802b572:	781b      	ldrb	r3, [r3, #0]
 802b574:	4619      	mov	r1, r3
 802b576:	4b21      	ldr	r3, [pc, #132]	; (802b5fc <mbedtls_base64_decode+0x234>)
 802b578:	5c5b      	ldrb	r3, [r3, r1]
 802b57a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802b57e:	4313      	orrs	r3, r2
 802b580:	61bb      	str	r3, [r7, #24]

        if( ++n == 4 )
 802b582:	6a3b      	ldr	r3, [r7, #32]
 802b584:	3301      	adds	r3, #1
 802b586:	623b      	str	r3, [r7, #32]
 802b588:	6a3b      	ldr	r3, [r7, #32]
 802b58a:	2b04      	cmp	r3, #4
 802b58c:	d120      	bne.n	802b5d0 <mbedtls_base64_decode+0x208>
        {
            n = 0;
 802b58e:	2300      	movs	r3, #0
 802b590:	623b      	str	r3, [r7, #32]
            if( j > 0 ) *p++ = (unsigned char)( x >> 16 );
 802b592:	69fb      	ldr	r3, [r7, #28]
 802b594:	2b00      	cmp	r3, #0
 802b596:	d006      	beq.n	802b5a6 <mbedtls_base64_decode+0x1de>
 802b598:	69bb      	ldr	r3, [r7, #24]
 802b59a:	0c19      	lsrs	r1, r3, #16
 802b59c:	697b      	ldr	r3, [r7, #20]
 802b59e:	1c5a      	adds	r2, r3, #1
 802b5a0:	617a      	str	r2, [r7, #20]
 802b5a2:	b2ca      	uxtb	r2, r1
 802b5a4:	701a      	strb	r2, [r3, #0]
            if( j > 1 ) *p++ = (unsigned char)( x >>  8 );
 802b5a6:	69fb      	ldr	r3, [r7, #28]
 802b5a8:	2b01      	cmp	r3, #1
 802b5aa:	d906      	bls.n	802b5ba <mbedtls_base64_decode+0x1f2>
 802b5ac:	69bb      	ldr	r3, [r7, #24]
 802b5ae:	0a19      	lsrs	r1, r3, #8
 802b5b0:	697b      	ldr	r3, [r7, #20]
 802b5b2:	1c5a      	adds	r2, r3, #1
 802b5b4:	617a      	str	r2, [r7, #20]
 802b5b6:	b2ca      	uxtb	r2, r1
 802b5b8:	701a      	strb	r2, [r3, #0]
            if( j > 2 ) *p++ = (unsigned char)( x       );
 802b5ba:	69fb      	ldr	r3, [r7, #28]
 802b5bc:	2b02      	cmp	r3, #2
 802b5be:	d907      	bls.n	802b5d0 <mbedtls_base64_decode+0x208>
 802b5c0:	697b      	ldr	r3, [r7, #20]
 802b5c2:	1c5a      	adds	r2, r3, #1
 802b5c4:	617a      	str	r2, [r7, #20]
 802b5c6:	69ba      	ldr	r2, [r7, #24]
 802b5c8:	b2d2      	uxtb	r2, r2
 802b5ca:	701a      	strb	r2, [r3, #0]
 802b5cc:	e000      	b.n	802b5d0 <mbedtls_base64_decode+0x208>
            continue;
 802b5ce:	bf00      	nop
   for( j = 3, n = x = 0, p = dst; i > 0; i--, src++ )
 802b5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b5d2:	3b01      	subs	r3, #1
 802b5d4:	627b      	str	r3, [r7, #36]	; 0x24
 802b5d6:	683b      	ldr	r3, [r7, #0]
 802b5d8:	3301      	adds	r3, #1
 802b5da:	603b      	str	r3, [r7, #0]
 802b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802b5de:	2b00      	cmp	r3, #0
 802b5e0:	d1aa      	bne.n	802b538 <mbedtls_base64_decode+0x170>
        }
    }

    *olen = p - dst;
 802b5e2:	697a      	ldr	r2, [r7, #20]
 802b5e4:	68fb      	ldr	r3, [r7, #12]
 802b5e6:	1ad3      	subs	r3, r2, r3
 802b5e8:	461a      	mov	r2, r3
 802b5ea:	687b      	ldr	r3, [r7, #4]
 802b5ec:	601a      	str	r2, [r3, #0]

    return( 0 );
 802b5ee:	2300      	movs	r3, #0
}
 802b5f0:	4618      	mov	r0, r3
 802b5f2:	372c      	adds	r7, #44	; 0x2c
 802b5f4:	46bd      	mov	sp, r7
 802b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b5fa:	4770      	bx	lr
 802b5fc:	08034c78 	.word	0x08034c78

0802b600 <mbedtls_md5_init>:
    (b)[(i) + 3] = (unsigned char) ( ( (n) >> 24 ) & 0xFF );    \
}
#endif

void mbedtls_md5_init( mbedtls_md5_context *ctx )
{
 802b600:	b580      	push	{r7, lr}
 802b602:	b082      	sub	sp, #8
 802b604:	af00      	add	r7, sp, #0
 802b606:	6078      	str	r0, [r7, #4]
    memset( ctx, 0, sizeof( mbedtls_md5_context ) );
 802b608:	2258      	movs	r2, #88	; 0x58
 802b60a:	2100      	movs	r1, #0
 802b60c:	6878      	ldr	r0, [r7, #4]
 802b60e:	f002 fa4d 	bl	802daac <memset>
}
 802b612:	bf00      	nop
 802b614:	3708      	adds	r7, #8
 802b616:	46bd      	mov	sp, r7
 802b618:	bd80      	pop	{r7, pc}

0802b61a <mbedtls_md5_free>:

void mbedtls_md5_free( mbedtls_md5_context *ctx )
{
 802b61a:	b580      	push	{r7, lr}
 802b61c:	b082      	sub	sp, #8
 802b61e:	af00      	add	r7, sp, #0
 802b620:	6078      	str	r0, [r7, #4]
    if( ctx == NULL )
 802b622:	687b      	ldr	r3, [r7, #4]
 802b624:	2b00      	cmp	r3, #0
 802b626:	d004      	beq.n	802b632 <mbedtls_md5_free+0x18>
        return;

    mbedtls_platform_zeroize( ctx, sizeof( mbedtls_md5_context ) );
 802b628:	2158      	movs	r1, #88	; 0x58
 802b62a:	6878      	ldr	r0, [r7, #4]
 802b62c:	f001 f85c 	bl	802c6e8 <mbedtls_platform_zeroize>
 802b630:	e000      	b.n	802b634 <mbedtls_md5_free+0x1a>
        return;
 802b632:	bf00      	nop
}
 802b634:	3708      	adds	r7, #8
 802b636:	46bd      	mov	sp, r7
 802b638:	bd80      	pop	{r7, pc}
	...

0802b63c <mbedtls_md5_starts_ret>:

/*
 * MD5 context setup
 */
int mbedtls_md5_starts_ret( mbedtls_md5_context *ctx )
{
 802b63c:	b480      	push	{r7}
 802b63e:	b083      	sub	sp, #12
 802b640:	af00      	add	r7, sp, #0
 802b642:	6078      	str	r0, [r7, #4]
    ctx->total[0] = 0;
 802b644:	687b      	ldr	r3, [r7, #4]
 802b646:	2200      	movs	r2, #0
 802b648:	601a      	str	r2, [r3, #0]
    ctx->total[1] = 0;
 802b64a:	687b      	ldr	r3, [r7, #4]
 802b64c:	2200      	movs	r2, #0
 802b64e:	605a      	str	r2, [r3, #4]

    ctx->state[0] = 0x67452301;
 802b650:	687b      	ldr	r3, [r7, #4]
 802b652:	4a09      	ldr	r2, [pc, #36]	; (802b678 <mbedtls_md5_starts_ret+0x3c>)
 802b654:	609a      	str	r2, [r3, #8]
    ctx->state[1] = 0xEFCDAB89;
 802b656:	687b      	ldr	r3, [r7, #4]
 802b658:	4a08      	ldr	r2, [pc, #32]	; (802b67c <mbedtls_md5_starts_ret+0x40>)
 802b65a:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x98BADCFE;
 802b65c:	687b      	ldr	r3, [r7, #4]
 802b65e:	4a08      	ldr	r2, [pc, #32]	; (802b680 <mbedtls_md5_starts_ret+0x44>)
 802b660:	611a      	str	r2, [r3, #16]
    ctx->state[3] = 0x10325476;
 802b662:	687b      	ldr	r3, [r7, #4]
 802b664:	4a07      	ldr	r2, [pc, #28]	; (802b684 <mbedtls_md5_starts_ret+0x48>)
 802b666:	615a      	str	r2, [r3, #20]

    return( 0 );
 802b668:	2300      	movs	r3, #0
}
 802b66a:	4618      	mov	r0, r3
 802b66c:	370c      	adds	r7, #12
 802b66e:	46bd      	mov	sp, r7
 802b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 802b674:	4770      	bx	lr
 802b676:	bf00      	nop
 802b678:	67452301 	.word	0x67452301
 802b67c:	efcdab89 	.word	0xefcdab89
 802b680:	98badcfe 	.word	0x98badcfe
 802b684:	10325476 	.word	0x10325476

0802b688 <mbedtls_internal_md5_process>:
#endif

#if !defined(MBEDTLS_MD5_PROCESS_ALT)
int mbedtls_internal_md5_process( mbedtls_md5_context *ctx,
                                  const unsigned char data[64] )
{
 802b688:	b480      	push	{r7}
 802b68a:	b097      	sub	sp, #92	; 0x5c
 802b68c:	af00      	add	r7, sp, #0
 802b68e:	6078      	str	r0, [r7, #4]
 802b690:	6039      	str	r1, [r7, #0]
    uint32_t X[16], A, B, C, D;

    GET_UINT32_LE( X[ 0], data,  0 );
 802b692:	683b      	ldr	r3, [r7, #0]
 802b694:	781b      	ldrb	r3, [r3, #0]
 802b696:	461a      	mov	r2, r3
 802b698:	683b      	ldr	r3, [r7, #0]
 802b69a:	3301      	adds	r3, #1
 802b69c:	781b      	ldrb	r3, [r3, #0]
 802b69e:	021b      	lsls	r3, r3, #8
 802b6a0:	431a      	orrs	r2, r3
 802b6a2:	683b      	ldr	r3, [r7, #0]
 802b6a4:	3302      	adds	r3, #2
 802b6a6:	781b      	ldrb	r3, [r3, #0]
 802b6a8:	041b      	lsls	r3, r3, #16
 802b6aa:	431a      	orrs	r2, r3
 802b6ac:	683b      	ldr	r3, [r7, #0]
 802b6ae:	3303      	adds	r3, #3
 802b6b0:	781b      	ldrb	r3, [r3, #0]
 802b6b2:	061b      	lsls	r3, r3, #24
 802b6b4:	4313      	orrs	r3, r2
 802b6b6:	60bb      	str	r3, [r7, #8]
    GET_UINT32_LE( X[ 1], data,  4 );
 802b6b8:	683b      	ldr	r3, [r7, #0]
 802b6ba:	3304      	adds	r3, #4
 802b6bc:	781b      	ldrb	r3, [r3, #0]
 802b6be:	461a      	mov	r2, r3
 802b6c0:	683b      	ldr	r3, [r7, #0]
 802b6c2:	3305      	adds	r3, #5
 802b6c4:	781b      	ldrb	r3, [r3, #0]
 802b6c6:	021b      	lsls	r3, r3, #8
 802b6c8:	431a      	orrs	r2, r3
 802b6ca:	683b      	ldr	r3, [r7, #0]
 802b6cc:	3306      	adds	r3, #6
 802b6ce:	781b      	ldrb	r3, [r3, #0]
 802b6d0:	041b      	lsls	r3, r3, #16
 802b6d2:	431a      	orrs	r2, r3
 802b6d4:	683b      	ldr	r3, [r7, #0]
 802b6d6:	3307      	adds	r3, #7
 802b6d8:	781b      	ldrb	r3, [r3, #0]
 802b6da:	061b      	lsls	r3, r3, #24
 802b6dc:	4313      	orrs	r3, r2
 802b6de:	60fb      	str	r3, [r7, #12]
    GET_UINT32_LE( X[ 2], data,  8 );
 802b6e0:	683b      	ldr	r3, [r7, #0]
 802b6e2:	3308      	adds	r3, #8
 802b6e4:	781b      	ldrb	r3, [r3, #0]
 802b6e6:	461a      	mov	r2, r3
 802b6e8:	683b      	ldr	r3, [r7, #0]
 802b6ea:	3309      	adds	r3, #9
 802b6ec:	781b      	ldrb	r3, [r3, #0]
 802b6ee:	021b      	lsls	r3, r3, #8
 802b6f0:	431a      	orrs	r2, r3
 802b6f2:	683b      	ldr	r3, [r7, #0]
 802b6f4:	330a      	adds	r3, #10
 802b6f6:	781b      	ldrb	r3, [r3, #0]
 802b6f8:	041b      	lsls	r3, r3, #16
 802b6fa:	431a      	orrs	r2, r3
 802b6fc:	683b      	ldr	r3, [r7, #0]
 802b6fe:	330b      	adds	r3, #11
 802b700:	781b      	ldrb	r3, [r3, #0]
 802b702:	061b      	lsls	r3, r3, #24
 802b704:	4313      	orrs	r3, r2
 802b706:	613b      	str	r3, [r7, #16]
    GET_UINT32_LE( X[ 3], data, 12 );
 802b708:	683b      	ldr	r3, [r7, #0]
 802b70a:	330c      	adds	r3, #12
 802b70c:	781b      	ldrb	r3, [r3, #0]
 802b70e:	461a      	mov	r2, r3
 802b710:	683b      	ldr	r3, [r7, #0]
 802b712:	330d      	adds	r3, #13
 802b714:	781b      	ldrb	r3, [r3, #0]
 802b716:	021b      	lsls	r3, r3, #8
 802b718:	431a      	orrs	r2, r3
 802b71a:	683b      	ldr	r3, [r7, #0]
 802b71c:	330e      	adds	r3, #14
 802b71e:	781b      	ldrb	r3, [r3, #0]
 802b720:	041b      	lsls	r3, r3, #16
 802b722:	431a      	orrs	r2, r3
 802b724:	683b      	ldr	r3, [r7, #0]
 802b726:	330f      	adds	r3, #15
 802b728:	781b      	ldrb	r3, [r3, #0]
 802b72a:	061b      	lsls	r3, r3, #24
 802b72c:	4313      	orrs	r3, r2
 802b72e:	617b      	str	r3, [r7, #20]
    GET_UINT32_LE( X[ 4], data, 16 );
 802b730:	683b      	ldr	r3, [r7, #0]
 802b732:	3310      	adds	r3, #16
 802b734:	781b      	ldrb	r3, [r3, #0]
 802b736:	461a      	mov	r2, r3
 802b738:	683b      	ldr	r3, [r7, #0]
 802b73a:	3311      	adds	r3, #17
 802b73c:	781b      	ldrb	r3, [r3, #0]
 802b73e:	021b      	lsls	r3, r3, #8
 802b740:	431a      	orrs	r2, r3
 802b742:	683b      	ldr	r3, [r7, #0]
 802b744:	3312      	adds	r3, #18
 802b746:	781b      	ldrb	r3, [r3, #0]
 802b748:	041b      	lsls	r3, r3, #16
 802b74a:	431a      	orrs	r2, r3
 802b74c:	683b      	ldr	r3, [r7, #0]
 802b74e:	3313      	adds	r3, #19
 802b750:	781b      	ldrb	r3, [r3, #0]
 802b752:	061b      	lsls	r3, r3, #24
 802b754:	4313      	orrs	r3, r2
 802b756:	61bb      	str	r3, [r7, #24]
    GET_UINT32_LE( X[ 5], data, 20 );
 802b758:	683b      	ldr	r3, [r7, #0]
 802b75a:	3314      	adds	r3, #20
 802b75c:	781b      	ldrb	r3, [r3, #0]
 802b75e:	461a      	mov	r2, r3
 802b760:	683b      	ldr	r3, [r7, #0]
 802b762:	3315      	adds	r3, #21
 802b764:	781b      	ldrb	r3, [r3, #0]
 802b766:	021b      	lsls	r3, r3, #8
 802b768:	431a      	orrs	r2, r3
 802b76a:	683b      	ldr	r3, [r7, #0]
 802b76c:	3316      	adds	r3, #22
 802b76e:	781b      	ldrb	r3, [r3, #0]
 802b770:	041b      	lsls	r3, r3, #16
 802b772:	431a      	orrs	r2, r3
 802b774:	683b      	ldr	r3, [r7, #0]
 802b776:	3317      	adds	r3, #23
 802b778:	781b      	ldrb	r3, [r3, #0]
 802b77a:	061b      	lsls	r3, r3, #24
 802b77c:	4313      	orrs	r3, r2
 802b77e:	61fb      	str	r3, [r7, #28]
    GET_UINT32_LE( X[ 6], data, 24 );
 802b780:	683b      	ldr	r3, [r7, #0]
 802b782:	3318      	adds	r3, #24
 802b784:	781b      	ldrb	r3, [r3, #0]
 802b786:	461a      	mov	r2, r3
 802b788:	683b      	ldr	r3, [r7, #0]
 802b78a:	3319      	adds	r3, #25
 802b78c:	781b      	ldrb	r3, [r3, #0]
 802b78e:	021b      	lsls	r3, r3, #8
 802b790:	431a      	orrs	r2, r3
 802b792:	683b      	ldr	r3, [r7, #0]
 802b794:	331a      	adds	r3, #26
 802b796:	781b      	ldrb	r3, [r3, #0]
 802b798:	041b      	lsls	r3, r3, #16
 802b79a:	431a      	orrs	r2, r3
 802b79c:	683b      	ldr	r3, [r7, #0]
 802b79e:	331b      	adds	r3, #27
 802b7a0:	781b      	ldrb	r3, [r3, #0]
 802b7a2:	061b      	lsls	r3, r3, #24
 802b7a4:	4313      	orrs	r3, r2
 802b7a6:	623b      	str	r3, [r7, #32]
    GET_UINT32_LE( X[ 7], data, 28 );
 802b7a8:	683b      	ldr	r3, [r7, #0]
 802b7aa:	331c      	adds	r3, #28
 802b7ac:	781b      	ldrb	r3, [r3, #0]
 802b7ae:	461a      	mov	r2, r3
 802b7b0:	683b      	ldr	r3, [r7, #0]
 802b7b2:	331d      	adds	r3, #29
 802b7b4:	781b      	ldrb	r3, [r3, #0]
 802b7b6:	021b      	lsls	r3, r3, #8
 802b7b8:	431a      	orrs	r2, r3
 802b7ba:	683b      	ldr	r3, [r7, #0]
 802b7bc:	331e      	adds	r3, #30
 802b7be:	781b      	ldrb	r3, [r3, #0]
 802b7c0:	041b      	lsls	r3, r3, #16
 802b7c2:	431a      	orrs	r2, r3
 802b7c4:	683b      	ldr	r3, [r7, #0]
 802b7c6:	331f      	adds	r3, #31
 802b7c8:	781b      	ldrb	r3, [r3, #0]
 802b7ca:	061b      	lsls	r3, r3, #24
 802b7cc:	4313      	orrs	r3, r2
 802b7ce:	627b      	str	r3, [r7, #36]	; 0x24
    GET_UINT32_LE( X[ 8], data, 32 );
 802b7d0:	683b      	ldr	r3, [r7, #0]
 802b7d2:	3320      	adds	r3, #32
 802b7d4:	781b      	ldrb	r3, [r3, #0]
 802b7d6:	461a      	mov	r2, r3
 802b7d8:	683b      	ldr	r3, [r7, #0]
 802b7da:	3321      	adds	r3, #33	; 0x21
 802b7dc:	781b      	ldrb	r3, [r3, #0]
 802b7de:	021b      	lsls	r3, r3, #8
 802b7e0:	431a      	orrs	r2, r3
 802b7e2:	683b      	ldr	r3, [r7, #0]
 802b7e4:	3322      	adds	r3, #34	; 0x22
 802b7e6:	781b      	ldrb	r3, [r3, #0]
 802b7e8:	041b      	lsls	r3, r3, #16
 802b7ea:	431a      	orrs	r2, r3
 802b7ec:	683b      	ldr	r3, [r7, #0]
 802b7ee:	3323      	adds	r3, #35	; 0x23
 802b7f0:	781b      	ldrb	r3, [r3, #0]
 802b7f2:	061b      	lsls	r3, r3, #24
 802b7f4:	4313      	orrs	r3, r2
 802b7f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GET_UINT32_LE( X[ 9], data, 36 );
 802b7f8:	683b      	ldr	r3, [r7, #0]
 802b7fa:	3324      	adds	r3, #36	; 0x24
 802b7fc:	781b      	ldrb	r3, [r3, #0]
 802b7fe:	461a      	mov	r2, r3
 802b800:	683b      	ldr	r3, [r7, #0]
 802b802:	3325      	adds	r3, #37	; 0x25
 802b804:	781b      	ldrb	r3, [r3, #0]
 802b806:	021b      	lsls	r3, r3, #8
 802b808:	431a      	orrs	r2, r3
 802b80a:	683b      	ldr	r3, [r7, #0]
 802b80c:	3326      	adds	r3, #38	; 0x26
 802b80e:	781b      	ldrb	r3, [r3, #0]
 802b810:	041b      	lsls	r3, r3, #16
 802b812:	431a      	orrs	r2, r3
 802b814:	683b      	ldr	r3, [r7, #0]
 802b816:	3327      	adds	r3, #39	; 0x27
 802b818:	781b      	ldrb	r3, [r3, #0]
 802b81a:	061b      	lsls	r3, r3, #24
 802b81c:	4313      	orrs	r3, r2
 802b81e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GET_UINT32_LE( X[10], data, 40 );
 802b820:	683b      	ldr	r3, [r7, #0]
 802b822:	3328      	adds	r3, #40	; 0x28
 802b824:	781b      	ldrb	r3, [r3, #0]
 802b826:	461a      	mov	r2, r3
 802b828:	683b      	ldr	r3, [r7, #0]
 802b82a:	3329      	adds	r3, #41	; 0x29
 802b82c:	781b      	ldrb	r3, [r3, #0]
 802b82e:	021b      	lsls	r3, r3, #8
 802b830:	431a      	orrs	r2, r3
 802b832:	683b      	ldr	r3, [r7, #0]
 802b834:	332a      	adds	r3, #42	; 0x2a
 802b836:	781b      	ldrb	r3, [r3, #0]
 802b838:	041b      	lsls	r3, r3, #16
 802b83a:	431a      	orrs	r2, r3
 802b83c:	683b      	ldr	r3, [r7, #0]
 802b83e:	332b      	adds	r3, #43	; 0x2b
 802b840:	781b      	ldrb	r3, [r3, #0]
 802b842:	061b      	lsls	r3, r3, #24
 802b844:	4313      	orrs	r3, r2
 802b846:	633b      	str	r3, [r7, #48]	; 0x30
    GET_UINT32_LE( X[11], data, 44 );
 802b848:	683b      	ldr	r3, [r7, #0]
 802b84a:	332c      	adds	r3, #44	; 0x2c
 802b84c:	781b      	ldrb	r3, [r3, #0]
 802b84e:	461a      	mov	r2, r3
 802b850:	683b      	ldr	r3, [r7, #0]
 802b852:	332d      	adds	r3, #45	; 0x2d
 802b854:	781b      	ldrb	r3, [r3, #0]
 802b856:	021b      	lsls	r3, r3, #8
 802b858:	431a      	orrs	r2, r3
 802b85a:	683b      	ldr	r3, [r7, #0]
 802b85c:	332e      	adds	r3, #46	; 0x2e
 802b85e:	781b      	ldrb	r3, [r3, #0]
 802b860:	041b      	lsls	r3, r3, #16
 802b862:	431a      	orrs	r2, r3
 802b864:	683b      	ldr	r3, [r7, #0]
 802b866:	332f      	adds	r3, #47	; 0x2f
 802b868:	781b      	ldrb	r3, [r3, #0]
 802b86a:	061b      	lsls	r3, r3, #24
 802b86c:	4313      	orrs	r3, r2
 802b86e:	637b      	str	r3, [r7, #52]	; 0x34
    GET_UINT32_LE( X[12], data, 48 );
 802b870:	683b      	ldr	r3, [r7, #0]
 802b872:	3330      	adds	r3, #48	; 0x30
 802b874:	781b      	ldrb	r3, [r3, #0]
 802b876:	461a      	mov	r2, r3
 802b878:	683b      	ldr	r3, [r7, #0]
 802b87a:	3331      	adds	r3, #49	; 0x31
 802b87c:	781b      	ldrb	r3, [r3, #0]
 802b87e:	021b      	lsls	r3, r3, #8
 802b880:	431a      	orrs	r2, r3
 802b882:	683b      	ldr	r3, [r7, #0]
 802b884:	3332      	adds	r3, #50	; 0x32
 802b886:	781b      	ldrb	r3, [r3, #0]
 802b888:	041b      	lsls	r3, r3, #16
 802b88a:	431a      	orrs	r2, r3
 802b88c:	683b      	ldr	r3, [r7, #0]
 802b88e:	3333      	adds	r3, #51	; 0x33
 802b890:	781b      	ldrb	r3, [r3, #0]
 802b892:	061b      	lsls	r3, r3, #24
 802b894:	4313      	orrs	r3, r2
 802b896:	63bb      	str	r3, [r7, #56]	; 0x38
    GET_UINT32_LE( X[13], data, 52 );
 802b898:	683b      	ldr	r3, [r7, #0]
 802b89a:	3334      	adds	r3, #52	; 0x34
 802b89c:	781b      	ldrb	r3, [r3, #0]
 802b89e:	461a      	mov	r2, r3
 802b8a0:	683b      	ldr	r3, [r7, #0]
 802b8a2:	3335      	adds	r3, #53	; 0x35
 802b8a4:	781b      	ldrb	r3, [r3, #0]
 802b8a6:	021b      	lsls	r3, r3, #8
 802b8a8:	431a      	orrs	r2, r3
 802b8aa:	683b      	ldr	r3, [r7, #0]
 802b8ac:	3336      	adds	r3, #54	; 0x36
 802b8ae:	781b      	ldrb	r3, [r3, #0]
 802b8b0:	041b      	lsls	r3, r3, #16
 802b8b2:	431a      	orrs	r2, r3
 802b8b4:	683b      	ldr	r3, [r7, #0]
 802b8b6:	3337      	adds	r3, #55	; 0x37
 802b8b8:	781b      	ldrb	r3, [r3, #0]
 802b8ba:	061b      	lsls	r3, r3, #24
 802b8bc:	4313      	orrs	r3, r2
 802b8be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GET_UINT32_LE( X[14], data, 56 );
 802b8c0:	683b      	ldr	r3, [r7, #0]
 802b8c2:	3338      	adds	r3, #56	; 0x38
 802b8c4:	781b      	ldrb	r3, [r3, #0]
 802b8c6:	461a      	mov	r2, r3
 802b8c8:	683b      	ldr	r3, [r7, #0]
 802b8ca:	3339      	adds	r3, #57	; 0x39
 802b8cc:	781b      	ldrb	r3, [r3, #0]
 802b8ce:	021b      	lsls	r3, r3, #8
 802b8d0:	431a      	orrs	r2, r3
 802b8d2:	683b      	ldr	r3, [r7, #0]
 802b8d4:	333a      	adds	r3, #58	; 0x3a
 802b8d6:	781b      	ldrb	r3, [r3, #0]
 802b8d8:	041b      	lsls	r3, r3, #16
 802b8da:	431a      	orrs	r2, r3
 802b8dc:	683b      	ldr	r3, [r7, #0]
 802b8de:	333b      	adds	r3, #59	; 0x3b
 802b8e0:	781b      	ldrb	r3, [r3, #0]
 802b8e2:	061b      	lsls	r3, r3, #24
 802b8e4:	4313      	orrs	r3, r2
 802b8e6:	643b      	str	r3, [r7, #64]	; 0x40
    GET_UINT32_LE( X[15], data, 60 );
 802b8e8:	683b      	ldr	r3, [r7, #0]
 802b8ea:	333c      	adds	r3, #60	; 0x3c
 802b8ec:	781b      	ldrb	r3, [r3, #0]
 802b8ee:	461a      	mov	r2, r3
 802b8f0:	683b      	ldr	r3, [r7, #0]
 802b8f2:	333d      	adds	r3, #61	; 0x3d
 802b8f4:	781b      	ldrb	r3, [r3, #0]
 802b8f6:	021b      	lsls	r3, r3, #8
 802b8f8:	431a      	orrs	r2, r3
 802b8fa:	683b      	ldr	r3, [r7, #0]
 802b8fc:	333e      	adds	r3, #62	; 0x3e
 802b8fe:	781b      	ldrb	r3, [r3, #0]
 802b900:	041b      	lsls	r3, r3, #16
 802b902:	431a      	orrs	r2, r3
 802b904:	683b      	ldr	r3, [r7, #0]
 802b906:	333f      	adds	r3, #63	; 0x3f
 802b908:	781b      	ldrb	r3, [r3, #0]
 802b90a:	061b      	lsls	r3, r3, #24
 802b90c:	4313      	orrs	r3, r2
 802b90e:	647b      	str	r3, [r7, #68]	; 0x44
    {                                                           \
        (a) += F((b),(c),(d)) + X[(k)] + (t);                   \
        (a) = S((a),(s)) + (b);                                 \
    } while( 0 )

    A = ctx->state[0];
 802b910:	687b      	ldr	r3, [r7, #4]
 802b912:	689b      	ldr	r3, [r3, #8]
 802b914:	657b      	str	r3, [r7, #84]	; 0x54
    B = ctx->state[1];
 802b916:	687b      	ldr	r3, [r7, #4]
 802b918:	68db      	ldr	r3, [r3, #12]
 802b91a:	653b      	str	r3, [r7, #80]	; 0x50
    C = ctx->state[2];
 802b91c:	687b      	ldr	r3, [r7, #4]
 802b91e:	691b      	ldr	r3, [r3, #16]
 802b920:	64fb      	str	r3, [r7, #76]	; 0x4c
    D = ctx->state[3];
 802b922:	687b      	ldr	r3, [r7, #4]
 802b924:	695b      	ldr	r3, [r3, #20]
 802b926:	64bb      	str	r3, [r7, #72]	; 0x48

#define F(x,y,z) ((z) ^ ((x) & ((y) ^ (z))))

    P( A, B, C, D,  0,  7, 0xD76AA478 );
 802b928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b92a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b92c:	405a      	eors	r2, r3
 802b92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b930:	401a      	ands	r2, r3
 802b932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b934:	405a      	eors	r2, r3
 802b936:	68bb      	ldr	r3, [r7, #8]
 802b938:	441a      	add	r2, r3
 802b93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b93c:	441a      	add	r2, r3
 802b93e:	4ba5      	ldr	r3, [pc, #660]	; (802bbd4 <mbedtls_internal_md5_process+0x54c>)
 802b940:	4413      	add	r3, r2
 802b942:	657b      	str	r3, [r7, #84]	; 0x54
 802b944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b946:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b94a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b94c:	4413      	add	r3, r2
 802b94e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  1, 12, 0xE8C7B756 );
 802b950:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b954:	405a      	eors	r2, r3
 802b956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b958:	401a      	ands	r2, r3
 802b95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b95c:	405a      	eors	r2, r3
 802b95e:	68fb      	ldr	r3, [r7, #12]
 802b960:	441a      	add	r2, r3
 802b962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b964:	441a      	add	r2, r3
 802b966:	4b9c      	ldr	r3, [pc, #624]	; (802bbd8 <mbedtls_internal_md5_process+0x550>)
 802b968:	4413      	add	r3, r2
 802b96a:	64bb      	str	r3, [r7, #72]	; 0x48
 802b96c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b96e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802b972:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b974:	4413      	add	r3, r2
 802b976:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 17, 0x242070DB );
 802b978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802b97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b97c:	405a      	eors	r2, r3
 802b97e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b980:	401a      	ands	r2, r3
 802b982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b984:	405a      	eors	r2, r3
 802b986:	693b      	ldr	r3, [r7, #16]
 802b988:	441a      	add	r2, r3
 802b98a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b98c:	441a      	add	r2, r3
 802b98e:	4b93      	ldr	r3, [pc, #588]	; (802bbdc <mbedtls_internal_md5_process+0x554>)
 802b990:	4413      	add	r3, r2
 802b992:	64fb      	str	r3, [r7, #76]	; 0x4c
 802b994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b996:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802b99a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b99c:	4413      	add	r3, r2
 802b99e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  3, 22, 0xC1BDCEEE );
 802b9a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802b9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9a4:	405a      	eors	r2, r3
 802b9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9a8:	401a      	ands	r2, r3
 802b9aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9ac:	405a      	eors	r2, r3
 802b9ae:	697b      	ldr	r3, [r7, #20]
 802b9b0:	441a      	add	r2, r3
 802b9b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9b4:	441a      	add	r2, r3
 802b9b6:	4b8a      	ldr	r3, [pc, #552]	; (802bbe0 <mbedtls_internal_md5_process+0x558>)
 802b9b8:	4413      	add	r3, r2
 802b9ba:	653b      	str	r3, [r7, #80]	; 0x50
 802b9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9be:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802b9c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9c4:	4413      	add	r3, r2
 802b9c6:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  7, 0xF57C0FAF );
 802b9c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802b9ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9cc:	405a      	eors	r2, r3
 802b9ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802b9d0:	401a      	ands	r2, r3
 802b9d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802b9d4:	405a      	eors	r2, r3
 802b9d6:	69bb      	ldr	r3, [r7, #24]
 802b9d8:	441a      	add	r2, r3
 802b9da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9dc:	441a      	add	r2, r3
 802b9de:	4b81      	ldr	r3, [pc, #516]	; (802bbe4 <mbedtls_internal_md5_process+0x55c>)
 802b9e0:	4413      	add	r3, r2
 802b9e2:	657b      	str	r3, [r7, #84]	; 0x54
 802b9e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9e6:	ea4f 6373 	mov.w	r3, r3, ror #25
 802b9ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9ec:	4413      	add	r3, r2
 802b9ee:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  5, 12, 0x4787C62A );
 802b9f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802b9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9f4:	405a      	eors	r2, r3
 802b9f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802b9f8:	401a      	ands	r2, r3
 802b9fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802b9fc:	405a      	eors	r2, r3
 802b9fe:	69fb      	ldr	r3, [r7, #28]
 802ba00:	441a      	add	r2, r3
 802ba02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba04:	441a      	add	r2, r3
 802ba06:	4b78      	ldr	r3, [pc, #480]	; (802bbe8 <mbedtls_internal_md5_process+0x560>)
 802ba08:	4413      	add	r3, r2
 802ba0a:	64bb      	str	r3, [r7, #72]	; 0x48
 802ba0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba0e:	ea4f 5333 	mov.w	r3, r3, ror #20
 802ba12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba14:	4413      	add	r3, r2
 802ba16:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 17, 0xA8304613 );
 802ba18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802ba1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba1c:	405a      	eors	r2, r3
 802ba1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba20:	401a      	ands	r2, r3
 802ba22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba24:	405a      	eors	r2, r3
 802ba26:	6a3b      	ldr	r3, [r7, #32]
 802ba28:	441a      	add	r2, r3
 802ba2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba2c:	441a      	add	r2, r3
 802ba2e:	4b6f      	ldr	r3, [pc, #444]	; (802bbec <mbedtls_internal_md5_process+0x564>)
 802ba30:	4413      	add	r3, r2
 802ba32:	64fb      	str	r3, [r7, #76]	; 0x4c
 802ba34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba36:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802ba3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba3c:	4413      	add	r3, r2
 802ba3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  7, 22, 0xFD469501 );
 802ba40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802ba42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba44:	405a      	eors	r2, r3
 802ba46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba48:	401a      	ands	r2, r3
 802ba4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba4c:	405a      	eors	r2, r3
 802ba4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802ba50:	441a      	add	r2, r3
 802ba52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba54:	441a      	add	r2, r3
 802ba56:	4b66      	ldr	r3, [pc, #408]	; (802bbf0 <mbedtls_internal_md5_process+0x568>)
 802ba58:	4413      	add	r3, r2
 802ba5a:	653b      	str	r3, [r7, #80]	; 0x50
 802ba5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba5e:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802ba62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba64:	4413      	add	r3, r2
 802ba66:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  7, 0x698098D8 );
 802ba68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802ba6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba6c:	405a      	eors	r2, r3
 802ba6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802ba70:	401a      	ands	r2, r3
 802ba72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802ba74:	405a      	eors	r2, r3
 802ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802ba78:	441a      	add	r2, r3
 802ba7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba7c:	441a      	add	r2, r3
 802ba7e:	4b5d      	ldr	r3, [pc, #372]	; (802bbf4 <mbedtls_internal_md5_process+0x56c>)
 802ba80:	4413      	add	r3, r2
 802ba82:	657b      	str	r3, [r7, #84]	; 0x54
 802ba84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba86:	ea4f 6373 	mov.w	r3, r3, ror #25
 802ba8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba8c:	4413      	add	r3, r2
 802ba8e:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  9, 12, 0x8B44F7AF );
 802ba90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802ba92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba94:	405a      	eors	r2, r3
 802ba96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802ba98:	401a      	ands	r2, r3
 802ba9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802ba9c:	405a      	eors	r2, r3
 802ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802baa0:	441a      	add	r2, r3
 802baa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baa4:	441a      	add	r2, r3
 802baa6:	4b54      	ldr	r3, [pc, #336]	; (802bbf8 <mbedtls_internal_md5_process+0x570>)
 802baa8:	4413      	add	r3, r2
 802baaa:	64bb      	str	r3, [r7, #72]	; 0x48
 802baac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802baae:	ea4f 5333 	mov.w	r3, r3, ror #20
 802bab2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bab4:	4413      	add	r3, r2
 802bab6:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
 802bab8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802baba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802babc:	405a      	eors	r2, r3
 802babe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bac0:	401a      	ands	r2, r3
 802bac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bac4:	405a      	eors	r2, r3
 802bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bac8:	441a      	add	r2, r3
 802baca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bacc:	4413      	add	r3, r2
 802bace:	f5a3 4324 	sub.w	r3, r3, #41984	; 0xa400
 802bad2:	3b4f      	subs	r3, #79	; 0x4f
 802bad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bad8:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802badc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bade:	4413      	add	r3, r2
 802bae0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 11, 22, 0x895CD7BE );
 802bae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bae6:	405a      	eors	r2, r3
 802bae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802baea:	401a      	ands	r2, r3
 802baec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802baee:	405a      	eors	r2, r3
 802baf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802baf2:	441a      	add	r2, r3
 802baf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802baf6:	441a      	add	r2, r3
 802baf8:	4b40      	ldr	r3, [pc, #256]	; (802bbfc <mbedtls_internal_md5_process+0x574>)
 802bafa:	4413      	add	r3, r2
 802bafc:	653b      	str	r3, [r7, #80]	; 0x50
 802bafe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb00:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bb04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb06:	4413      	add	r3, r2
 802bb08:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  7, 0x6B901122 );
 802bb0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bb0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb0e:	405a      	eors	r2, r3
 802bb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb12:	401a      	ands	r2, r3
 802bb14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb16:	405a      	eors	r2, r3
 802bb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802bb1a:	441a      	add	r2, r3
 802bb1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb1e:	441a      	add	r2, r3
 802bb20:	4b37      	ldr	r3, [pc, #220]	; (802bc00 <mbedtls_internal_md5_process+0x578>)
 802bb22:	4413      	add	r3, r2
 802bb24:	657b      	str	r3, [r7, #84]	; 0x54
 802bb26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb28:	ea4f 6373 	mov.w	r3, r3, ror #25
 802bb2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb2e:	4413      	add	r3, r2
 802bb30:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 13, 12, 0xFD987193 );
 802bb32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bb34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb36:	405a      	eors	r2, r3
 802bb38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb3a:	401a      	ands	r2, r3
 802bb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb3e:	405a      	eors	r2, r3
 802bb40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bb42:	441a      	add	r2, r3
 802bb44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb46:	441a      	add	r2, r3
 802bb48:	4b2e      	ldr	r3, [pc, #184]	; (802bc04 <mbedtls_internal_md5_process+0x57c>)
 802bb4a:	4413      	add	r3, r2
 802bb4c:	64bb      	str	r3, [r7, #72]	; 0x48
 802bb4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb50:	ea4f 5333 	mov.w	r3, r3, ror #20
 802bb54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb56:	4413      	add	r3, r2
 802bb58:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 17, 0xA679438E );
 802bb5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bb5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb5e:	405a      	eors	r2, r3
 802bb60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bb62:	401a      	ands	r2, r3
 802bb64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb66:	405a      	eors	r2, r3
 802bb68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bb6a:	441a      	add	r2, r3
 802bb6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb6e:	441a      	add	r2, r3
 802bb70:	4b25      	ldr	r3, [pc, #148]	; (802bc08 <mbedtls_internal_md5_process+0x580>)
 802bb72:	4413      	add	r3, r2
 802bb74:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb78:	ea4f 33f3 	mov.w	r3, r3, ror #15
 802bb7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb7e:	4413      	add	r3, r2
 802bb80:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 15, 22, 0x49B40821 );
 802bb82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bb84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb86:	405a      	eors	r2, r3
 802bb88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bb8a:	401a      	ands	r2, r3
 802bb8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bb8e:	405a      	eors	r2, r3
 802bb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bb92:	441a      	add	r2, r3
 802bb94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bb96:	441a      	add	r2, r3
 802bb98:	4b1c      	ldr	r3, [pc, #112]	; (802bc0c <mbedtls_internal_md5_process+0x584>)
 802bb9a:	4413      	add	r3, r2
 802bb9c:	653b      	str	r3, [r7, #80]	; 0x50
 802bb9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bba0:	ea4f 23b3 	mov.w	r3, r3, ror #10
 802bba4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bba6:	4413      	add	r3, r2
 802bba8:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((z) & ((x) ^ (y))))

    P( A, B, C, D,  1,  5, 0xF61E2562 );
 802bbaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbae:	405a      	eors	r2, r3
 802bbb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bbb2:	401a      	ands	r2, r3
 802bbb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bbb6:	405a      	eors	r2, r3
 802bbb8:	68fb      	ldr	r3, [r7, #12]
 802bbba:	441a      	add	r2, r3
 802bbbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbbe:	441a      	add	r2, r3
 802bbc0:	4b13      	ldr	r3, [pc, #76]	; (802bc10 <mbedtls_internal_md5_process+0x588>)
 802bbc2:	4413      	add	r3, r2
 802bbc4:	657b      	str	r3, [r7, #84]	; 0x54
 802bbc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bbc8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bbcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bbce:	4413      	add	r3, r2
 802bbd0:	e020      	b.n	802bc14 <mbedtls_internal_md5_process+0x58c>
 802bbd2:	bf00      	nop
 802bbd4:	d76aa478 	.word	0xd76aa478
 802bbd8:	e8c7b756 	.word	0xe8c7b756
 802bbdc:	242070db 	.word	0x242070db
 802bbe0:	c1bdceee 	.word	0xc1bdceee
 802bbe4:	f57c0faf 	.word	0xf57c0faf
 802bbe8:	4787c62a 	.word	0x4787c62a
 802bbec:	a8304613 	.word	0xa8304613
 802bbf0:	fd469501 	.word	0xfd469501
 802bbf4:	698098d8 	.word	0x698098d8
 802bbf8:	8b44f7af 	.word	0x8b44f7af
 802bbfc:	895cd7be 	.word	0x895cd7be
 802bc00:	6b901122 	.word	0x6b901122
 802bc04:	fd987193 	.word	0xfd987193
 802bc08:	a679438e 	.word	0xa679438e
 802bc0c:	49b40821 	.word	0x49b40821
 802bc10:	f61e2562 	.word	0xf61e2562
 802bc14:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  6,  9, 0xC040B340 );
 802bc16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc1a:	405a      	eors	r2, r3
 802bc1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc1e:	401a      	ands	r2, r3
 802bc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc22:	405a      	eors	r2, r3
 802bc24:	6a3b      	ldr	r3, [r7, #32]
 802bc26:	441a      	add	r2, r3
 802bc28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc2a:	441a      	add	r2, r3
 802bc2c:	4ba4      	ldr	r3, [pc, #656]	; (802bec0 <mbedtls_internal_md5_process+0x838>)
 802bc2e:	4413      	add	r3, r2
 802bc30:	64bb      	str	r3, [r7, #72]	; 0x48
 802bc32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc34:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bc38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bc3a:	4413      	add	r3, r2
 802bc3c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 14, 0x265E5A51 );
 802bc3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc42:	405a      	eors	r2, r3
 802bc44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc46:	401a      	ands	r2, r3
 802bc48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc4a:	405a      	eors	r2, r3
 802bc4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bc4e:	441a      	add	r2, r3
 802bc50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc52:	441a      	add	r2, r3
 802bc54:	4b9b      	ldr	r3, [pc, #620]	; (802bec4 <mbedtls_internal_md5_process+0x83c>)
 802bc56:	4413      	add	r3, r2
 802bc58:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bc5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc5c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bc60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bc62:	4413      	add	r3, r2
 802bc64:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  0, 20, 0xE9B6C7AA );
 802bc66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc6a:	405a      	eors	r2, r3
 802bc6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bc6e:	401a      	ands	r2, r3
 802bc70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc72:	405a      	eors	r2, r3
 802bc74:	68bb      	ldr	r3, [r7, #8]
 802bc76:	441a      	add	r2, r3
 802bc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc7a:	441a      	add	r2, r3
 802bc7c:	4b92      	ldr	r3, [pc, #584]	; (802bec8 <mbedtls_internal_md5_process+0x840>)
 802bc7e:	4413      	add	r3, r2
 802bc80:	653b      	str	r3, [r7, #80]	; 0x50
 802bc82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bc84:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bc88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bc8a:	4413      	add	r3, r2
 802bc8c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  5,  5, 0xD62F105D );
 802bc8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bc90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc92:	405a      	eors	r2, r3
 802bc94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bc96:	401a      	ands	r2, r3
 802bc98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bc9a:	405a      	eors	r2, r3
 802bc9c:	69fb      	ldr	r3, [r7, #28]
 802bc9e:	441a      	add	r2, r3
 802bca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bca2:	441a      	add	r2, r3
 802bca4:	4b89      	ldr	r3, [pc, #548]	; (802becc <mbedtls_internal_md5_process+0x844>)
 802bca6:	4413      	add	r3, r2
 802bca8:	657b      	str	r3, [r7, #84]	; 0x54
 802bcaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcac:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bcb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bcb2:	4413      	add	r3, r2
 802bcb4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 10,  9, 0x02441453 );
 802bcb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcba:	405a      	eors	r2, r3
 802bcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcbe:	401a      	ands	r2, r3
 802bcc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bcc2:	405a      	eors	r2, r3
 802bcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bcc6:	441a      	add	r2, r3
 802bcc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcca:	441a      	add	r2, r3
 802bccc:	4b80      	ldr	r3, [pc, #512]	; (802bed0 <mbedtls_internal_md5_process+0x848>)
 802bcce:	4413      	add	r3, r2
 802bcd0:	64bb      	str	r3, [r7, #72]	; 0x48
 802bcd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bcd4:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bcd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bcda:	4413      	add	r3, r2
 802bcdc:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 14, 0xD8A1E681 );
 802bcde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bce2:	405a      	eors	r2, r3
 802bce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bce6:	401a      	ands	r2, r3
 802bce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bcea:	405a      	eors	r2, r3
 802bcec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802bcee:	441a      	add	r2, r3
 802bcf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcf2:	441a      	add	r2, r3
 802bcf4:	4b77      	ldr	r3, [pc, #476]	; (802bed4 <mbedtls_internal_md5_process+0x84c>)
 802bcf6:	4413      	add	r3, r2
 802bcf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bcfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bcfc:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bd00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd02:	4413      	add	r3, r2
 802bd04:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
 802bd06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd0a:	405a      	eors	r2, r3
 802bd0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd0e:	401a      	ands	r2, r3
 802bd10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd12:	405a      	eors	r2, r3
 802bd14:	69bb      	ldr	r3, [r7, #24]
 802bd16:	441a      	add	r2, r3
 802bd18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd1a:	441a      	add	r2, r3
 802bd1c:	4b6e      	ldr	r3, [pc, #440]	; (802bed8 <mbedtls_internal_md5_process+0x850>)
 802bd1e:	4413      	add	r3, r2
 802bd20:	653b      	str	r3, [r7, #80]	; 0x50
 802bd22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd24:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bd28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bd2a:	4413      	add	r3, r2
 802bd2c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  5, 0x21E1CDE6 );
 802bd2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd32:	405a      	eors	r2, r3
 802bd34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd36:	401a      	ands	r2, r3
 802bd38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd3a:	405a      	eors	r2, r3
 802bd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802bd3e:	441a      	add	r2, r3
 802bd40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd42:	441a      	add	r2, r3
 802bd44:	4b65      	ldr	r3, [pc, #404]	; (802bedc <mbedtls_internal_md5_process+0x854>)
 802bd46:	4413      	add	r3, r2
 802bd48:	657b      	str	r3, [r7, #84]	; 0x54
 802bd4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd4c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bd50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bd52:	4413      	add	r3, r2
 802bd54:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 14,  9, 0xC33707D6 );
 802bd56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd5a:	405a      	eors	r2, r3
 802bd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd5e:	401a      	ands	r2, r3
 802bd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd62:	405a      	eors	r2, r3
 802bd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bd66:	441a      	add	r2, r3
 802bd68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd6a:	441a      	add	r2, r3
 802bd6c:	4b5c      	ldr	r3, [pc, #368]	; (802bee0 <mbedtls_internal_md5_process+0x858>)
 802bd6e:	4413      	add	r3, r2
 802bd70:	64bb      	str	r3, [r7, #72]	; 0x48
 802bd72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bd74:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802bd78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bd7a:	4413      	add	r3, r2
 802bd7c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 14, 0xF4D50D87 );
 802bd7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd82:	405a      	eors	r2, r3
 802bd84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bd86:	401a      	ands	r2, r3
 802bd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bd8a:	405a      	eors	r2, r3
 802bd8c:	697b      	ldr	r3, [r7, #20]
 802bd8e:	441a      	add	r2, r3
 802bd90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd92:	441a      	add	r2, r3
 802bd94:	4b53      	ldr	r3, [pc, #332]	; (802bee4 <mbedtls_internal_md5_process+0x85c>)
 802bd96:	4413      	add	r3, r2
 802bd98:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bd9c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802bda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bda2:	4413      	add	r3, r2
 802bda4:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  8, 20, 0x455A14ED );
 802bda6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bda8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdaa:	405a      	eors	r2, r3
 802bdac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdae:	401a      	ands	r2, r3
 802bdb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdb2:	405a      	eors	r2, r3
 802bdb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bdb6:	441a      	add	r2, r3
 802bdb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdba:	441a      	add	r2, r3
 802bdbc:	4b4a      	ldr	r3, [pc, #296]	; (802bee8 <mbedtls_internal_md5_process+0x860>)
 802bdbe:	4413      	add	r3, r2
 802bdc0:	653b      	str	r3, [r7, #80]	; 0x50
 802bdc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdc4:	ea4f 3333 	mov.w	r3, r3, ror #12
 802bdc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bdca:	4413      	add	r3, r2
 802bdcc:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  5, 0xA9E3E905 );
 802bdce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bdd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdd2:	405a      	eors	r2, r3
 802bdd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bdd6:	401a      	ands	r2, r3
 802bdd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdda:	405a      	eors	r2, r3
 802bddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bdde:	441a      	add	r2, r3
 802bde0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bde2:	441a      	add	r2, r3
 802bde4:	4b41      	ldr	r3, [pc, #260]	; (802beec <mbedtls_internal_md5_process+0x864>)
 802bde6:	4413      	add	r3, r2
 802bde8:	657b      	str	r3, [r7, #84]	; 0x54
 802bdea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bdec:	ea4f 63f3 	mov.w	r3, r3, ror #27
 802bdf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bdf2:	4413      	add	r3, r2
 802bdf4:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
 802bdf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bdf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bdfa:	405a      	eors	r2, r3
 802bdfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bdfe:	401a      	ands	r2, r3
 802be00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be02:	405a      	eors	r2, r3
 802be04:	693b      	ldr	r3, [r7, #16]
 802be06:	441a      	add	r2, r3
 802be08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be0a:	441a      	add	r2, r3
 802be0c:	4b38      	ldr	r3, [pc, #224]	; (802bef0 <mbedtls_internal_md5_process+0x868>)
 802be0e:	4413      	add	r3, r2
 802be10:	64bb      	str	r3, [r7, #72]	; 0x48
 802be12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be14:	ea4f 53f3 	mov.w	r3, r3, ror #23
 802be18:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be1a:	4413      	add	r3, r2
 802be1c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 14, 0x676F02D9 );
 802be1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be22:	405a      	eors	r2, r3
 802be24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be26:	401a      	ands	r2, r3
 802be28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be2a:	405a      	eors	r2, r3
 802be2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802be2e:	441a      	add	r2, r3
 802be30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be32:	441a      	add	r2, r3
 802be34:	4b2f      	ldr	r3, [pc, #188]	; (802bef4 <mbedtls_internal_md5_process+0x86c>)
 802be36:	4413      	add	r3, r2
 802be38:	64fb      	str	r3, [r7, #76]	; 0x4c
 802be3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be3c:	ea4f 43b3 	mov.w	r3, r3, ror #18
 802be40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802be42:	4413      	add	r3, r2
 802be44:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 12, 20, 0x8D2A4C8A );
 802be46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be4a:	405a      	eors	r2, r3
 802be4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be4e:	401a      	ands	r2, r3
 802be50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be52:	405a      	eors	r2, r3
 802be54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802be56:	441a      	add	r2, r3
 802be58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be5a:	441a      	add	r2, r3
 802be5c:	4b26      	ldr	r3, [pc, #152]	; (802bef8 <mbedtls_internal_md5_process+0x870>)
 802be5e:	4413      	add	r3, r2
 802be60:	653b      	str	r3, [r7, #80]	; 0x50
 802be62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be64:	ea4f 3333 	mov.w	r3, r3, ror #12
 802be68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802be6a:	4413      	add	r3, r2
 802be6c:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((x) ^ (y) ^ (z))

    P( A, B, C, D,  5,  4, 0xFFFA3942 );
 802be6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be72:	405a      	eors	r2, r3
 802be74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802be76:	405a      	eors	r2, r3
 802be78:	69fb      	ldr	r3, [r7, #28]
 802be7a:	441a      	add	r2, r3
 802be7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be7e:	4413      	add	r3, r2
 802be80:	f5a3 23b8 	sub.w	r3, r3, #376832	; 0x5c000
 802be84:	f2a3 63be 	subw	r3, r3, #1726	; 0x6be
 802be88:	657b      	str	r3, [r7, #84]	; 0x54
 802be8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802be8c:	ea4f 7333 	mov.w	r3, r3, ror #28
 802be90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802be92:	4413      	add	r3, r2
 802be94:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  8, 11, 0x8771F681 );
 802be96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802be98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802be9a:	405a      	eors	r2, r3
 802be9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802be9e:	405a      	eors	r2, r3
 802bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802bea2:	441a      	add	r2, r3
 802bea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bea6:	441a      	add	r2, r3
 802bea8:	4b14      	ldr	r3, [pc, #80]	; (802befc <mbedtls_internal_md5_process+0x874>)
 802beaa:	4413      	add	r3, r2
 802beac:	64bb      	str	r3, [r7, #72]	; 0x48
 802beae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802beb0:	ea4f 5373 	mov.w	r3, r3, ror #21
 802beb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802beb6:	4413      	add	r3, r2
 802beb8:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 11, 16, 0x6D9D6122 );
 802beba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bebc:	e020      	b.n	802bf00 <mbedtls_internal_md5_process+0x878>
 802bebe:	bf00      	nop
 802bec0:	c040b340 	.word	0xc040b340
 802bec4:	265e5a51 	.word	0x265e5a51
 802bec8:	e9b6c7aa 	.word	0xe9b6c7aa
 802becc:	d62f105d 	.word	0xd62f105d
 802bed0:	02441453 	.word	0x02441453
 802bed4:	d8a1e681 	.word	0xd8a1e681
 802bed8:	e7d3fbc8 	.word	0xe7d3fbc8
 802bedc:	21e1cde6 	.word	0x21e1cde6
 802bee0:	c33707d6 	.word	0xc33707d6
 802bee4:	f4d50d87 	.word	0xf4d50d87
 802bee8:	455a14ed 	.word	0x455a14ed
 802beec:	a9e3e905 	.word	0xa9e3e905
 802bef0:	fcefa3f8 	.word	0xfcefa3f8
 802bef4:	676f02d9 	.word	0x676f02d9
 802bef8:	8d2a4c8a 	.word	0x8d2a4c8a
 802befc:	8771f681 	.word	0x8771f681
 802bf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf02:	405a      	eors	r2, r3
 802bf04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf06:	405a      	eors	r2, r3
 802bf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802bf0a:	441a      	add	r2, r3
 802bf0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf0e:	441a      	add	r2, r3
 802bf10:	4ba4      	ldr	r3, [pc, #656]	; (802c1a4 <mbedtls_internal_md5_process+0xb1c>)
 802bf12:	4413      	add	r3, r2
 802bf14:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bf16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf18:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bf1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf1e:	4413      	add	r3, r2
 802bf20:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 14, 23, 0xFDE5380C );
 802bf22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf26:	405a      	eors	r2, r3
 802bf28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf2a:	405a      	eors	r2, r3
 802bf2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802bf2e:	441a      	add	r2, r3
 802bf30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf32:	441a      	add	r2, r3
 802bf34:	4b9c      	ldr	r3, [pc, #624]	; (802c1a8 <mbedtls_internal_md5_process+0xb20>)
 802bf36:	4413      	add	r3, r2
 802bf38:	653b      	str	r3, [r7, #80]	; 0x50
 802bf3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf3c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bf40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bf42:	4413      	add	r3, r2
 802bf44:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  1,  4, 0xA4BEEA44 );
 802bf46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf4a:	405a      	eors	r2, r3
 802bf4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf4e:	405a      	eors	r2, r3
 802bf50:	68fb      	ldr	r3, [r7, #12]
 802bf52:	441a      	add	r2, r3
 802bf54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf56:	441a      	add	r2, r3
 802bf58:	4b94      	ldr	r3, [pc, #592]	; (802c1ac <mbedtls_internal_md5_process+0xb24>)
 802bf5a:	4413      	add	r3, r2
 802bf5c:	657b      	str	r3, [r7, #84]	; 0x54
 802bf5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf60:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bf64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bf66:	4413      	add	r3, r2
 802bf68:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  4, 11, 0x4BDECFA9 );
 802bf6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bf6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf6e:	405a      	eors	r2, r3
 802bf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf72:	405a      	eors	r2, r3
 802bf74:	69bb      	ldr	r3, [r7, #24]
 802bf76:	441a      	add	r2, r3
 802bf78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf7a:	441a      	add	r2, r3
 802bf7c:	4b8c      	ldr	r3, [pc, #560]	; (802c1b0 <mbedtls_internal_md5_process+0xb28>)
 802bf7e:	4413      	add	r3, r2
 802bf80:	64bb      	str	r3, [r7, #72]	; 0x48
 802bf82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bf84:	ea4f 5373 	mov.w	r3, r3, ror #21
 802bf88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bf8a:	4413      	add	r3, r2
 802bf8c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  7, 16, 0xF6BB4B60 );
 802bf8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bf90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bf92:	405a      	eors	r2, r3
 802bf94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bf96:	405a      	eors	r2, r3
 802bf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802bf9a:	441a      	add	r2, r3
 802bf9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bf9e:	441a      	add	r2, r3
 802bfa0:	4b84      	ldr	r3, [pc, #528]	; (802c1b4 <mbedtls_internal_md5_process+0xb2c>)
 802bfa2:	4413      	add	r3, r2
 802bfa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802bfa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfa8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802bfac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802bfae:	4413      	add	r3, r2
 802bfb0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 10, 23, 0xBEBFBC70 );
 802bfb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bfb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfb6:	405a      	eors	r2, r3
 802bfb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfba:	405a      	eors	r2, r3
 802bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802bfbe:	441a      	add	r2, r3
 802bfc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfc2:	441a      	add	r2, r3
 802bfc4:	4b7c      	ldr	r3, [pc, #496]	; (802c1b8 <mbedtls_internal_md5_process+0xb30>)
 802bfc6:	4413      	add	r3, r2
 802bfc8:	653b      	str	r3, [r7, #80]	; 0x50
 802bfca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bfcc:	ea4f 2373 	mov.w	r3, r3, ror #9
 802bfd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802bfd2:	4413      	add	r3, r2
 802bfd4:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 13,  4, 0x289B7EC6 );
 802bfd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bfd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802bfda:	405a      	eors	r2, r3
 802bfdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802bfde:	405a      	eors	r2, r3
 802bfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802bfe2:	441a      	add	r2, r3
 802bfe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bfe6:	441a      	add	r2, r3
 802bfe8:	4b74      	ldr	r3, [pc, #464]	; (802c1bc <mbedtls_internal_md5_process+0xb34>)
 802bfea:	4413      	add	r3, r2
 802bfec:	657b      	str	r3, [r7, #84]	; 0x54
 802bfee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802bff0:	ea4f 7333 	mov.w	r3, r3, ror #28
 802bff4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802bff6:	4413      	add	r3, r2
 802bff8:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  0, 11, 0xEAA127FA );
 802bffa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802bffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802bffe:	405a      	eors	r2, r3
 802c000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c002:	405a      	eors	r2, r3
 802c004:	68bb      	ldr	r3, [r7, #8]
 802c006:	441a      	add	r2, r3
 802c008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c00a:	441a      	add	r2, r3
 802c00c:	4b6c      	ldr	r3, [pc, #432]	; (802c1c0 <mbedtls_internal_md5_process+0xb38>)
 802c00e:	4413      	add	r3, r2
 802c010:	64bb      	str	r3, [r7, #72]	; 0x48
 802c012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c014:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c01a:	4413      	add	r3, r2
 802c01c:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  3, 16, 0xD4EF3085 );
 802c01e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c022:	405a      	eors	r2, r3
 802c024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c026:	405a      	eors	r2, r3
 802c028:	697b      	ldr	r3, [r7, #20]
 802c02a:	441a      	add	r2, r3
 802c02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c02e:	441a      	add	r2, r3
 802c030:	4b64      	ldr	r3, [pc, #400]	; (802c1c4 <mbedtls_internal_md5_process+0xb3c>)
 802c032:	4413      	add	r3, r2
 802c034:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c038:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c03e:	4413      	add	r3, r2
 802c040:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  6, 23, 0x04881D05 );
 802c042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c046:	405a      	eors	r2, r3
 802c048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c04a:	405a      	eors	r2, r3
 802c04c:	6a3b      	ldr	r3, [r7, #32]
 802c04e:	441a      	add	r2, r3
 802c050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c052:	441a      	add	r2, r3
 802c054:	4b5c      	ldr	r3, [pc, #368]	; (802c1c8 <mbedtls_internal_md5_process+0xb40>)
 802c056:	4413      	add	r3, r2
 802c058:	653b      	str	r3, [r7, #80]	; 0x50
 802c05a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c05c:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c060:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c062:	4413      	add	r3, r2
 802c064:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  9,  4, 0xD9D4D039 );
 802c066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c06a:	405a      	eors	r2, r3
 802c06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c06e:	405a      	eors	r2, r3
 802c070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c072:	441a      	add	r2, r3
 802c074:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c076:	441a      	add	r2, r3
 802c078:	4b54      	ldr	r3, [pc, #336]	; (802c1cc <mbedtls_internal_md5_process+0xb44>)
 802c07a:	4413      	add	r3, r2
 802c07c:	657b      	str	r3, [r7, #84]	; 0x54
 802c07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c080:	ea4f 7333 	mov.w	r3, r3, ror #28
 802c084:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c086:	4413      	add	r3, r2
 802c088:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 12, 11, 0xE6DB99E5 );
 802c08a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c08c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c08e:	405a      	eors	r2, r3
 802c090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c092:	405a      	eors	r2, r3
 802c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c096:	441a      	add	r2, r3
 802c098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c09a:	441a      	add	r2, r3
 802c09c:	4b4c      	ldr	r3, [pc, #304]	; (802c1d0 <mbedtls_internal_md5_process+0xb48>)
 802c09e:	4413      	add	r3, r2
 802c0a0:	64bb      	str	r3, [r7, #72]	; 0x48
 802c0a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0a4:	ea4f 5373 	mov.w	r3, r3, ror #21
 802c0a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c0aa:	4413      	add	r3, r2
 802c0ac:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 15, 16, 0x1FA27CF8 );
 802c0ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c0b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c0b2:	405a      	eors	r2, r3
 802c0b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0b6:	405a      	eors	r2, r3
 802c0b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c0ba:	441a      	add	r2, r3
 802c0bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0be:	441a      	add	r2, r3
 802c0c0:	4b44      	ldr	r3, [pc, #272]	; (802c1d4 <mbedtls_internal_md5_process+0xb4c>)
 802c0c2:	4413      	add	r3, r2
 802c0c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c0c8:	ea4f 4333 	mov.w	r3, r3, ror #16
 802c0cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c0ce:	4413      	add	r3, r2
 802c0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  2, 23, 0xC4AC5665 );
 802c0d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c0d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0d6:	405a      	eors	r2, r3
 802c0d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c0da:	405a      	eors	r2, r3
 802c0dc:	693b      	ldr	r3, [r7, #16]
 802c0de:	441a      	add	r2, r3
 802c0e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0e2:	441a      	add	r2, r3
 802c0e4:	4b3c      	ldr	r3, [pc, #240]	; (802c1d8 <mbedtls_internal_md5_process+0xb50>)
 802c0e6:	4413      	add	r3, r2
 802c0e8:	653b      	str	r3, [r7, #80]	; 0x50
 802c0ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0ec:	ea4f 2373 	mov.w	r3, r3, ror #9
 802c0f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c0f2:	4413      	add	r3, r2
 802c0f4:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

#define F(x,y,z) ((y) ^ ((x) | ~(z)))

    P( A, B, C, D,  0,  6, 0xF4292244 );
 802c0f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c0f8:	43da      	mvns	r2, r3
 802c0fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c0fc:	431a      	orrs	r2, r3
 802c0fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c100:	405a      	eors	r2, r3
 802c102:	68bb      	ldr	r3, [r7, #8]
 802c104:	441a      	add	r2, r3
 802c106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c108:	441a      	add	r2, r3
 802c10a:	4b34      	ldr	r3, [pc, #208]	; (802c1dc <mbedtls_internal_md5_process+0xb54>)
 802c10c:	4413      	add	r3, r2
 802c10e:	657b      	str	r3, [r7, #84]	; 0x54
 802c110:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c112:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c116:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c118:	4413      	add	r3, r2
 802c11a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  7, 10, 0x432AFF97 );
 802c11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c11e:	43da      	mvns	r2, r3
 802c120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c122:	431a      	orrs	r2, r3
 802c124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c126:	405a      	eors	r2, r3
 802c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802c12a:	441a      	add	r2, r3
 802c12c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c12e:	441a      	add	r2, r3
 802c130:	4b2b      	ldr	r3, [pc, #172]	; (802c1e0 <mbedtls_internal_md5_process+0xb58>)
 802c132:	4413      	add	r3, r2
 802c134:	64bb      	str	r3, [r7, #72]	; 0x48
 802c136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c138:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c13c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c13e:	4413      	add	r3, r2
 802c140:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 14, 15, 0xAB9423A7 );
 802c142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c144:	43da      	mvns	r2, r3
 802c146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c148:	431a      	orrs	r2, r3
 802c14a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c14c:	405a      	eors	r2, r3
 802c14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802c150:	441a      	add	r2, r3
 802c152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c154:	441a      	add	r2, r3
 802c156:	4b23      	ldr	r3, [pc, #140]	; (802c1e4 <mbedtls_internal_md5_process+0xb5c>)
 802c158:	4413      	add	r3, r2
 802c15a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c15e:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c164:	4413      	add	r3, r2
 802c166:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  5, 21, 0xFC93A039 );
 802c168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c16a:	43da      	mvns	r2, r3
 802c16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c16e:	431a      	orrs	r2, r3
 802c170:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c172:	405a      	eors	r2, r3
 802c174:	69fb      	ldr	r3, [r7, #28]
 802c176:	441a      	add	r2, r3
 802c178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c17a:	441a      	add	r2, r3
 802c17c:	4b1a      	ldr	r3, [pc, #104]	; (802c1e8 <mbedtls_internal_md5_process+0xb60>)
 802c17e:	4413      	add	r3, r2
 802c180:	653b      	str	r3, [r7, #80]	; 0x50
 802c182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c184:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c18a:	4413      	add	r3, r2
 802c18c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D, 12,  6, 0x655B59C3 );
 802c18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c190:	43da      	mvns	r2, r3
 802c192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c194:	431a      	orrs	r2, r3
 802c196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c198:	405a      	eors	r2, r3
 802c19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802c19c:	441a      	add	r2, r3
 802c19e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1a0:	e024      	b.n	802c1ec <mbedtls_internal_md5_process+0xb64>
 802c1a2:	bf00      	nop
 802c1a4:	6d9d6122 	.word	0x6d9d6122
 802c1a8:	fde5380c 	.word	0xfde5380c
 802c1ac:	a4beea44 	.word	0xa4beea44
 802c1b0:	4bdecfa9 	.word	0x4bdecfa9
 802c1b4:	f6bb4b60 	.word	0xf6bb4b60
 802c1b8:	bebfbc70 	.word	0xbebfbc70
 802c1bc:	289b7ec6 	.word	0x289b7ec6
 802c1c0:	eaa127fa 	.word	0xeaa127fa
 802c1c4:	d4ef3085 	.word	0xd4ef3085
 802c1c8:	04881d05 	.word	0x04881d05
 802c1cc:	d9d4d039 	.word	0xd9d4d039
 802c1d0:	e6db99e5 	.word	0xe6db99e5
 802c1d4:	1fa27cf8 	.word	0x1fa27cf8
 802c1d8:	c4ac5665 	.word	0xc4ac5665
 802c1dc:	f4292244 	.word	0xf4292244
 802c1e0:	432aff97 	.word	0x432aff97
 802c1e4:	ab9423a7 	.word	0xab9423a7
 802c1e8:	fc93a039 	.word	0xfc93a039
 802c1ec:	441a      	add	r2, r3
 802c1ee:	4b7d      	ldr	r3, [pc, #500]	; (802c3e4 <mbedtls_internal_md5_process+0xd5c>)
 802c1f0:	4413      	add	r3, r2
 802c1f2:	657b      	str	r3, [r7, #84]	; 0x54
 802c1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c1f6:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c1fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c1fc:	4413      	add	r3, r2
 802c1fe:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C,  3, 10, 0x8F0CCC92 );
 802c200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c202:	43da      	mvns	r2, r3
 802c204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c206:	431a      	orrs	r2, r3
 802c208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c20a:	405a      	eors	r2, r3
 802c20c:	697b      	ldr	r3, [r7, #20]
 802c20e:	441a      	add	r2, r3
 802c210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c212:	441a      	add	r2, r3
 802c214:	4b74      	ldr	r3, [pc, #464]	; (802c3e8 <mbedtls_internal_md5_process+0xd60>)
 802c216:	4413      	add	r3, r2
 802c218:	64bb      	str	r3, [r7, #72]	; 0x48
 802c21a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c21c:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c222:	4413      	add	r3, r2
 802c224:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B, 10, 15, 0xFFEFF47D );
 802c226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c228:	43da      	mvns	r2, r3
 802c22a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c22c:	431a      	orrs	r2, r3
 802c22e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c230:	405a      	eors	r2, r3
 802c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802c234:	441a      	add	r2, r3
 802c236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c238:	4413      	add	r3, r2
 802c23a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802c23e:	f6a3 3383 	subw	r3, r3, #2947	; 0xb83
 802c242:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c246:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c24a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c24c:	4413      	add	r3, r2
 802c24e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  1, 21, 0x85845DD1 );
 802c250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c252:	43da      	mvns	r2, r3
 802c254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c256:	431a      	orrs	r2, r3
 802c258:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c25a:	405a      	eors	r2, r3
 802c25c:	68fb      	ldr	r3, [r7, #12]
 802c25e:	441a      	add	r2, r3
 802c260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c262:	441a      	add	r2, r3
 802c264:	4b61      	ldr	r3, [pc, #388]	; (802c3ec <mbedtls_internal_md5_process+0xd64>)
 802c266:	4413      	add	r3, r2
 802c268:	653b      	str	r3, [r7, #80]	; 0x50
 802c26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c26c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c272:	4413      	add	r3, r2
 802c274:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  8,  6, 0x6FA87E4F );
 802c276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c278:	43da      	mvns	r2, r3
 802c27a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c27c:	431a      	orrs	r2, r3
 802c27e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c280:	405a      	eors	r2, r3
 802c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802c284:	441a      	add	r2, r3
 802c286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c288:	441a      	add	r2, r3
 802c28a:	4b59      	ldr	r3, [pc, #356]	; (802c3f0 <mbedtls_internal_md5_process+0xd68>)
 802c28c:	4413      	add	r3, r2
 802c28e:	657b      	str	r3, [r7, #84]	; 0x54
 802c290:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c292:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c296:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c298:	4413      	add	r3, r2
 802c29a:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
 802c29c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c29e:	43da      	mvns	r2, r3
 802c2a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c2a2:	431a      	orrs	r2, r3
 802c2a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c2a6:	405a      	eors	r2, r3
 802c2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802c2aa:	441a      	add	r2, r3
 802c2ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c2ae:	441a      	add	r2, r3
 802c2b0:	4b50      	ldr	r3, [pc, #320]	; (802c3f4 <mbedtls_internal_md5_process+0xd6c>)
 802c2b2:	4413      	add	r3, r2
 802c2b4:	64bb      	str	r3, [r7, #72]	; 0x48
 802c2b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c2b8:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c2bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c2be:	4413      	add	r3, r2
 802c2c0:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  6, 15, 0xA3014314 );
 802c2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c2c4:	43da      	mvns	r2, r3
 802c2c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c2c8:	431a      	orrs	r2, r3
 802c2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c2cc:	405a      	eors	r2, r3
 802c2ce:	6a3b      	ldr	r3, [r7, #32]
 802c2d0:	441a      	add	r2, r3
 802c2d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c2d4:	441a      	add	r2, r3
 802c2d6:	4b48      	ldr	r3, [pc, #288]	; (802c3f8 <mbedtls_internal_md5_process+0xd70>)
 802c2d8:	4413      	add	r3, r2
 802c2da:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c2de:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c2e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c2e4:	4413      	add	r3, r2
 802c2e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A, 13, 21, 0x4E0811A1 );
 802c2e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c2ea:	43da      	mvns	r2, r3
 802c2ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c2ee:	431a      	orrs	r2, r3
 802c2f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c2f2:	405a      	eors	r2, r3
 802c2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 802c2f6:	441a      	add	r2, r3
 802c2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c2fa:	441a      	add	r2, r3
 802c2fc:	4b3f      	ldr	r3, [pc, #252]	; (802c3fc <mbedtls_internal_md5_process+0xd74>)
 802c2fe:	4413      	add	r3, r2
 802c300:	653b      	str	r3, [r7, #80]	; 0x50
 802c302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c304:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c30a:	4413      	add	r3, r2
 802c30c:	653b      	str	r3, [r7, #80]	; 0x50
    P( A, B, C, D,  4,  6, 0xF7537E82 );
 802c30e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c310:	43da      	mvns	r2, r3
 802c312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c314:	431a      	orrs	r2, r3
 802c316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c318:	405a      	eors	r2, r3
 802c31a:	69bb      	ldr	r3, [r7, #24]
 802c31c:	441a      	add	r2, r3
 802c31e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c320:	441a      	add	r2, r3
 802c322:	4b37      	ldr	r3, [pc, #220]	; (802c400 <mbedtls_internal_md5_process+0xd78>)
 802c324:	4413      	add	r3, r2
 802c326:	657b      	str	r3, [r7, #84]	; 0x54
 802c328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c32a:	ea4f 63b3 	mov.w	r3, r3, ror #26
 802c32e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 802c330:	4413      	add	r3, r2
 802c332:	657b      	str	r3, [r7, #84]	; 0x54
    P( D, A, B, C, 11, 10, 0xBD3AF235 );
 802c334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c336:	43da      	mvns	r2, r3
 802c338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c33a:	431a      	orrs	r2, r3
 802c33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c33e:	405a      	eors	r2, r3
 802c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802c342:	441a      	add	r2, r3
 802c344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c346:	441a      	add	r2, r3
 802c348:	4b2e      	ldr	r3, [pc, #184]	; (802c404 <mbedtls_internal_md5_process+0xd7c>)
 802c34a:	4413      	add	r3, r2
 802c34c:	64bb      	str	r3, [r7, #72]	; 0x48
 802c34e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c350:	ea4f 53b3 	mov.w	r3, r3, ror #22
 802c354:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 802c356:	4413      	add	r3, r2
 802c358:	64bb      	str	r3, [r7, #72]	; 0x48
    P( C, D, A, B,  2, 15, 0x2AD7D2BB );
 802c35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c35c:	43da      	mvns	r2, r3
 802c35e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c360:	431a      	orrs	r2, r3
 802c362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c364:	405a      	eors	r2, r3
 802c366:	693b      	ldr	r3, [r7, #16]
 802c368:	441a      	add	r2, r3
 802c36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c36c:	441a      	add	r2, r3
 802c36e:	4b26      	ldr	r3, [pc, #152]	; (802c408 <mbedtls_internal_md5_process+0xd80>)
 802c370:	4413      	add	r3, r2
 802c372:	64fb      	str	r3, [r7, #76]	; 0x4c
 802c374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c376:	ea4f 4373 	mov.w	r3, r3, ror #17
 802c37a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 802c37c:	4413      	add	r3, r2
 802c37e:	64fb      	str	r3, [r7, #76]	; 0x4c
    P( B, C, D, A,  9, 21, 0xEB86D391 );
 802c380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c382:	43da      	mvns	r2, r3
 802c384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c386:	431a      	orrs	r2, r3
 802c388:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c38a:	405a      	eors	r2, r3
 802c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802c38e:	441a      	add	r2, r3
 802c390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c392:	441a      	add	r2, r3
 802c394:	4b1d      	ldr	r3, [pc, #116]	; (802c40c <mbedtls_internal_md5_process+0xd84>)
 802c396:	4413      	add	r3, r2
 802c398:	653b      	str	r3, [r7, #80]	; 0x50
 802c39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c39c:	ea4f 23f3 	mov.w	r3, r3, ror #11
 802c3a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 802c3a2:	4413      	add	r3, r2
 802c3a4:	653b      	str	r3, [r7, #80]	; 0x50

#undef F

    ctx->state[0] += A;
 802c3a6:	687b      	ldr	r3, [r7, #4]
 802c3a8:	689a      	ldr	r2, [r3, #8]
 802c3aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802c3ac:	441a      	add	r2, r3
 802c3ae:	687b      	ldr	r3, [r7, #4]
 802c3b0:	609a      	str	r2, [r3, #8]
    ctx->state[1] += B;
 802c3b2:	687b      	ldr	r3, [r7, #4]
 802c3b4:	68da      	ldr	r2, [r3, #12]
 802c3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802c3b8:	441a      	add	r2, r3
 802c3ba:	687b      	ldr	r3, [r7, #4]
 802c3bc:	60da      	str	r2, [r3, #12]
    ctx->state[2] += C;
 802c3be:	687b      	ldr	r3, [r7, #4]
 802c3c0:	691a      	ldr	r2, [r3, #16]
 802c3c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802c3c4:	441a      	add	r2, r3
 802c3c6:	687b      	ldr	r3, [r7, #4]
 802c3c8:	611a      	str	r2, [r3, #16]
    ctx->state[3] += D;
 802c3ca:	687b      	ldr	r3, [r7, #4]
 802c3cc:	695a      	ldr	r2, [r3, #20]
 802c3ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 802c3d0:	441a      	add	r2, r3
 802c3d2:	687b      	ldr	r3, [r7, #4]
 802c3d4:	615a      	str	r2, [r3, #20]

    return( 0 );
 802c3d6:	2300      	movs	r3, #0
}
 802c3d8:	4618      	mov	r0, r3
 802c3da:	375c      	adds	r7, #92	; 0x5c
 802c3dc:	46bd      	mov	sp, r7
 802c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 802c3e2:	4770      	bx	lr
 802c3e4:	655b59c3 	.word	0x655b59c3
 802c3e8:	8f0ccc92 	.word	0x8f0ccc92
 802c3ec:	85845dd1 	.word	0x85845dd1
 802c3f0:	6fa87e4f 	.word	0x6fa87e4f
 802c3f4:	fe2ce6e0 	.word	0xfe2ce6e0
 802c3f8:	a3014314 	.word	0xa3014314
 802c3fc:	4e0811a1 	.word	0x4e0811a1
 802c400:	f7537e82 	.word	0xf7537e82
 802c404:	bd3af235 	.word	0xbd3af235
 802c408:	2ad7d2bb 	.word	0x2ad7d2bb
 802c40c:	eb86d391 	.word	0xeb86d391

0802c410 <mbedtls_md5_update_ret>:
 * MD5 process buffer
 */
int mbedtls_md5_update_ret( mbedtls_md5_context *ctx,
                            const unsigned char *input,
                            size_t ilen )
{
 802c410:	b580      	push	{r7, lr}
 802c412:	b088      	sub	sp, #32
 802c414:	af00      	add	r7, sp, #0
 802c416:	60f8      	str	r0, [r7, #12]
 802c418:	60b9      	str	r1, [r7, #8]
 802c41a:	607a      	str	r2, [r7, #4]
    int ret;
    size_t fill;
    uint32_t left;

    if( ilen == 0 )
 802c41c:	687b      	ldr	r3, [r7, #4]
 802c41e:	2b00      	cmp	r3, #0
 802c420:	d101      	bne.n	802c426 <mbedtls_md5_update_ret+0x16>
        return( 0 );
 802c422:	2300      	movs	r3, #0
 802c424:	e065      	b.n	802c4f2 <mbedtls_md5_update_ret+0xe2>

    left = ctx->total[0] & 0x3F;
 802c426:	68fb      	ldr	r3, [r7, #12]
 802c428:	681b      	ldr	r3, [r3, #0]
 802c42a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c42e:	61fb      	str	r3, [r7, #28]
    fill = 64 - left;
 802c430:	69fb      	ldr	r3, [r7, #28]
 802c432:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c436:	61bb      	str	r3, [r7, #24]

    ctx->total[0] += (uint32_t) ilen;
 802c438:	68fb      	ldr	r3, [r7, #12]
 802c43a:	681a      	ldr	r2, [r3, #0]
 802c43c:	687b      	ldr	r3, [r7, #4]
 802c43e:	441a      	add	r2, r3
 802c440:	68fb      	ldr	r3, [r7, #12]
 802c442:	601a      	str	r2, [r3, #0]
    ctx->total[0] &= 0xFFFFFFFF;
 802c444:	68fb      	ldr	r3, [r7, #12]
 802c446:	681a      	ldr	r2, [r3, #0]
 802c448:	68fb      	ldr	r3, [r7, #12]
 802c44a:	601a      	str	r2, [r3, #0]

    if( ctx->total[0] < (uint32_t) ilen )
 802c44c:	68fb      	ldr	r3, [r7, #12]
 802c44e:	681b      	ldr	r3, [r3, #0]
 802c450:	687a      	ldr	r2, [r7, #4]
 802c452:	429a      	cmp	r2, r3
 802c454:	d904      	bls.n	802c460 <mbedtls_md5_update_ret+0x50>
        ctx->total[1]++;
 802c456:	68fb      	ldr	r3, [r7, #12]
 802c458:	685b      	ldr	r3, [r3, #4]
 802c45a:	1c5a      	adds	r2, r3, #1
 802c45c:	68fb      	ldr	r3, [r7, #12]
 802c45e:	605a      	str	r2, [r3, #4]

    if( left && ilen >= fill )
 802c460:	69fb      	ldr	r3, [r7, #28]
 802c462:	2b00      	cmp	r3, #0
 802c464:	d034      	beq.n	802c4d0 <mbedtls_md5_update_ret+0xc0>
 802c466:	687a      	ldr	r2, [r7, #4]
 802c468:	69bb      	ldr	r3, [r7, #24]
 802c46a:	429a      	cmp	r2, r3
 802c46c:	d330      	bcc.n	802c4d0 <mbedtls_md5_update_ret+0xc0>
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
 802c46e:	68fb      	ldr	r3, [r7, #12]
 802c470:	f103 0218 	add.w	r2, r3, #24
 802c474:	69fb      	ldr	r3, [r7, #28]
 802c476:	4413      	add	r3, r2
 802c478:	69ba      	ldr	r2, [r7, #24]
 802c47a:	68b9      	ldr	r1, [r7, #8]
 802c47c:	4618      	mov	r0, r3
 802c47e:	f001 fcea 	bl	802de56 <memcpy>
        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c482:	68fb      	ldr	r3, [r7, #12]
 802c484:	3318      	adds	r3, #24
 802c486:	4619      	mov	r1, r3
 802c488:	68f8      	ldr	r0, [r7, #12]
 802c48a:	f7ff f8fd 	bl	802b688 <mbedtls_internal_md5_process>
 802c48e:	6178      	str	r0, [r7, #20]
 802c490:	697b      	ldr	r3, [r7, #20]
 802c492:	2b00      	cmp	r3, #0
 802c494:	d001      	beq.n	802c49a <mbedtls_md5_update_ret+0x8a>
            return( ret );
 802c496:	697b      	ldr	r3, [r7, #20]
 802c498:	e02b      	b.n	802c4f2 <mbedtls_md5_update_ret+0xe2>

        input += fill;
 802c49a:	68ba      	ldr	r2, [r7, #8]
 802c49c:	69bb      	ldr	r3, [r7, #24]
 802c49e:	4413      	add	r3, r2
 802c4a0:	60bb      	str	r3, [r7, #8]
        ilen  -= fill;
 802c4a2:	687a      	ldr	r2, [r7, #4]
 802c4a4:	69bb      	ldr	r3, [r7, #24]
 802c4a6:	1ad3      	subs	r3, r2, r3
 802c4a8:	607b      	str	r3, [r7, #4]
        left = 0;
 802c4aa:	2300      	movs	r3, #0
 802c4ac:	61fb      	str	r3, [r7, #28]
    }

    while( ilen >= 64 )
 802c4ae:	e00f      	b.n	802c4d0 <mbedtls_md5_update_ret+0xc0>
    {
        if( ( ret = mbedtls_internal_md5_process( ctx, input ) ) != 0 )
 802c4b0:	68b9      	ldr	r1, [r7, #8]
 802c4b2:	68f8      	ldr	r0, [r7, #12]
 802c4b4:	f7ff f8e8 	bl	802b688 <mbedtls_internal_md5_process>
 802c4b8:	6178      	str	r0, [r7, #20]
 802c4ba:	697b      	ldr	r3, [r7, #20]
 802c4bc:	2b00      	cmp	r3, #0
 802c4be:	d001      	beq.n	802c4c4 <mbedtls_md5_update_ret+0xb4>
            return( ret );
 802c4c0:	697b      	ldr	r3, [r7, #20]
 802c4c2:	e016      	b.n	802c4f2 <mbedtls_md5_update_ret+0xe2>

        input += 64;
 802c4c4:	68bb      	ldr	r3, [r7, #8]
 802c4c6:	3340      	adds	r3, #64	; 0x40
 802c4c8:	60bb      	str	r3, [r7, #8]
        ilen  -= 64;
 802c4ca:	687b      	ldr	r3, [r7, #4]
 802c4cc:	3b40      	subs	r3, #64	; 0x40
 802c4ce:	607b      	str	r3, [r7, #4]
    while( ilen >= 64 )
 802c4d0:	687b      	ldr	r3, [r7, #4]
 802c4d2:	2b3f      	cmp	r3, #63	; 0x3f
 802c4d4:	d8ec      	bhi.n	802c4b0 <mbedtls_md5_update_ret+0xa0>
    }

    if( ilen > 0 )
 802c4d6:	687b      	ldr	r3, [r7, #4]
 802c4d8:	2b00      	cmp	r3, #0
 802c4da:	d009      	beq.n	802c4f0 <mbedtls_md5_update_ret+0xe0>
    {
        memcpy( (void *) (ctx->buffer + left), input, ilen );
 802c4dc:	68fb      	ldr	r3, [r7, #12]
 802c4de:	f103 0218 	add.w	r2, r3, #24
 802c4e2:	69fb      	ldr	r3, [r7, #28]
 802c4e4:	4413      	add	r3, r2
 802c4e6:	687a      	ldr	r2, [r7, #4]
 802c4e8:	68b9      	ldr	r1, [r7, #8]
 802c4ea:	4618      	mov	r0, r3
 802c4ec:	f001 fcb3 	bl	802de56 <memcpy>
    }

    return( 0 );
 802c4f0:	2300      	movs	r3, #0
}
 802c4f2:	4618      	mov	r0, r3
 802c4f4:	3720      	adds	r7, #32
 802c4f6:	46bd      	mov	sp, r7
 802c4f8:	bd80      	pop	{r7, pc}

0802c4fa <mbedtls_md5_finish_ret>:
/*
 * MD5 final digest
 */
int mbedtls_md5_finish_ret( mbedtls_md5_context *ctx,
                            unsigned char output[16] )
{
 802c4fa:	b580      	push	{r7, lr}
 802c4fc:	b086      	sub	sp, #24
 802c4fe:	af00      	add	r7, sp, #0
 802c500:	6078      	str	r0, [r7, #4]
 802c502:	6039      	str	r1, [r7, #0]
    uint32_t high, low;

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
 802c504:	687b      	ldr	r3, [r7, #4]
 802c506:	681b      	ldr	r3, [r3, #0]
 802c508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 802c50c:	617b      	str	r3, [r7, #20]

    ctx->buffer[used++] = 0x80;
 802c50e:	697b      	ldr	r3, [r7, #20]
 802c510:	1c5a      	adds	r2, r3, #1
 802c512:	617a      	str	r2, [r7, #20]
 802c514:	687a      	ldr	r2, [r7, #4]
 802c516:	4413      	add	r3, r2
 802c518:	2280      	movs	r2, #128	; 0x80
 802c51a:	761a      	strb	r2, [r3, #24]

    if( used <= 56 )
 802c51c:	697b      	ldr	r3, [r7, #20]
 802c51e:	2b38      	cmp	r3, #56	; 0x38
 802c520:	d80c      	bhi.n	802c53c <mbedtls_md5_finish_ret+0x42>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
 802c522:	687b      	ldr	r3, [r7, #4]
 802c524:	f103 0218 	add.w	r2, r3, #24
 802c528:	697b      	ldr	r3, [r7, #20]
 802c52a:	18d0      	adds	r0, r2, r3
 802c52c:	697b      	ldr	r3, [r7, #20]
 802c52e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 802c532:	461a      	mov	r2, r3
 802c534:	2100      	movs	r1, #0
 802c536:	f001 fab9 	bl	802daac <memset>
 802c53a:	e01e      	b.n	802c57a <mbedtls_md5_finish_ret+0x80>
    }
    else
    {
        /* We'll need an extra block */
        memset( ctx->buffer + used, 0, 64 - used );
 802c53c:	687b      	ldr	r3, [r7, #4]
 802c53e:	f103 0218 	add.w	r2, r3, #24
 802c542:	697b      	ldr	r3, [r7, #20]
 802c544:	18d0      	adds	r0, r2, r3
 802c546:	697b      	ldr	r3, [r7, #20]
 802c548:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 802c54c:	461a      	mov	r2, r3
 802c54e:	2100      	movs	r1, #0
 802c550:	f001 faac 	bl	802daac <memset>

        if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c554:	687b      	ldr	r3, [r7, #4]
 802c556:	3318      	adds	r3, #24
 802c558:	4619      	mov	r1, r3
 802c55a:	6878      	ldr	r0, [r7, #4]
 802c55c:	f7ff f894 	bl	802b688 <mbedtls_internal_md5_process>
 802c560:	6138      	str	r0, [r7, #16]
 802c562:	693b      	ldr	r3, [r7, #16]
 802c564:	2b00      	cmp	r3, #0
 802c566:	d001      	beq.n	802c56c <mbedtls_md5_finish_ret+0x72>
            return( ret );
 802c568:	693b      	ldr	r3, [r7, #16]
 802c56a:	e0b8      	b.n	802c6de <mbedtls_md5_finish_ret+0x1e4>

        memset( ctx->buffer, 0, 56 );
 802c56c:	687b      	ldr	r3, [r7, #4]
 802c56e:	3318      	adds	r3, #24
 802c570:	2238      	movs	r2, #56	; 0x38
 802c572:	2100      	movs	r1, #0
 802c574:	4618      	mov	r0, r3
 802c576:	f001 fa99 	bl	802daac <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
 802c57a:	687b      	ldr	r3, [r7, #4]
 802c57c:	681b      	ldr	r3, [r3, #0]
 802c57e:	0f5a      	lsrs	r2, r3, #29
         | ( ctx->total[1] <<  3 );
 802c580:	687b      	ldr	r3, [r7, #4]
 802c582:	685b      	ldr	r3, [r3, #4]
 802c584:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
 802c586:	4313      	orrs	r3, r2
 802c588:	60fb      	str	r3, [r7, #12]
    low  = ( ctx->total[0] <<  3 );
 802c58a:	687b      	ldr	r3, [r7, #4]
 802c58c:	681b      	ldr	r3, [r3, #0]
 802c58e:	00db      	lsls	r3, r3, #3
 802c590:	60bb      	str	r3, [r7, #8]

    PUT_UINT32_LE( low,  ctx->buffer, 56 );
 802c592:	68bb      	ldr	r3, [r7, #8]
 802c594:	b2da      	uxtb	r2, r3
 802c596:	687b      	ldr	r3, [r7, #4]
 802c598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 802c59c:	68bb      	ldr	r3, [r7, #8]
 802c59e:	0a1b      	lsrs	r3, r3, #8
 802c5a0:	b2da      	uxtb	r2, r3
 802c5a2:	687b      	ldr	r3, [r7, #4]
 802c5a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 802c5a8:	68bb      	ldr	r3, [r7, #8]
 802c5aa:	0c1b      	lsrs	r3, r3, #16
 802c5ac:	b2da      	uxtb	r2, r3
 802c5ae:	687b      	ldr	r3, [r7, #4]
 802c5b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 802c5b4:	68bb      	ldr	r3, [r7, #8]
 802c5b6:	0e1b      	lsrs	r3, r3, #24
 802c5b8:	b2da      	uxtb	r2, r3
 802c5ba:	687b      	ldr	r3, [r7, #4]
 802c5bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    PUT_UINT32_LE( high, ctx->buffer, 60 );
 802c5c0:	68fb      	ldr	r3, [r7, #12]
 802c5c2:	b2da      	uxtb	r2, r3
 802c5c4:	687b      	ldr	r3, [r7, #4]
 802c5c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 802c5ca:	68fb      	ldr	r3, [r7, #12]
 802c5cc:	0a1b      	lsrs	r3, r3, #8
 802c5ce:	b2da      	uxtb	r2, r3
 802c5d0:	687b      	ldr	r3, [r7, #4]
 802c5d2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 802c5d6:	68fb      	ldr	r3, [r7, #12]
 802c5d8:	0c1b      	lsrs	r3, r3, #16
 802c5da:	b2da      	uxtb	r2, r3
 802c5dc:	687b      	ldr	r3, [r7, #4]
 802c5de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 802c5e2:	68fb      	ldr	r3, [r7, #12]
 802c5e4:	0e1b      	lsrs	r3, r3, #24
 802c5e6:	b2da      	uxtb	r2, r3
 802c5e8:	687b      	ldr	r3, [r7, #4]
 802c5ea:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57

    if( ( ret = mbedtls_internal_md5_process( ctx, ctx->buffer ) ) != 0 )
 802c5ee:	687b      	ldr	r3, [r7, #4]
 802c5f0:	3318      	adds	r3, #24
 802c5f2:	4619      	mov	r1, r3
 802c5f4:	6878      	ldr	r0, [r7, #4]
 802c5f6:	f7ff f847 	bl	802b688 <mbedtls_internal_md5_process>
 802c5fa:	6138      	str	r0, [r7, #16]
 802c5fc:	693b      	ldr	r3, [r7, #16]
 802c5fe:	2b00      	cmp	r3, #0
 802c600:	d001      	beq.n	802c606 <mbedtls_md5_finish_ret+0x10c>
        return( ret );
 802c602:	693b      	ldr	r3, [r7, #16]
 802c604:	e06b      	b.n	802c6de <mbedtls_md5_finish_ret+0x1e4>

    /*
     * Output final state
     */
    PUT_UINT32_LE( ctx->state[0], output,  0 );
 802c606:	687b      	ldr	r3, [r7, #4]
 802c608:	689b      	ldr	r3, [r3, #8]
 802c60a:	b2da      	uxtb	r2, r3
 802c60c:	683b      	ldr	r3, [r7, #0]
 802c60e:	701a      	strb	r2, [r3, #0]
 802c610:	687b      	ldr	r3, [r7, #4]
 802c612:	689b      	ldr	r3, [r3, #8]
 802c614:	0a1a      	lsrs	r2, r3, #8
 802c616:	683b      	ldr	r3, [r7, #0]
 802c618:	3301      	adds	r3, #1
 802c61a:	b2d2      	uxtb	r2, r2
 802c61c:	701a      	strb	r2, [r3, #0]
 802c61e:	687b      	ldr	r3, [r7, #4]
 802c620:	689b      	ldr	r3, [r3, #8]
 802c622:	0c1a      	lsrs	r2, r3, #16
 802c624:	683b      	ldr	r3, [r7, #0]
 802c626:	3302      	adds	r3, #2
 802c628:	b2d2      	uxtb	r2, r2
 802c62a:	701a      	strb	r2, [r3, #0]
 802c62c:	687b      	ldr	r3, [r7, #4]
 802c62e:	689b      	ldr	r3, [r3, #8]
 802c630:	0e1a      	lsrs	r2, r3, #24
 802c632:	683b      	ldr	r3, [r7, #0]
 802c634:	3303      	adds	r3, #3
 802c636:	b2d2      	uxtb	r2, r2
 802c638:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[1], output,  4 );
 802c63a:	687b      	ldr	r3, [r7, #4]
 802c63c:	68da      	ldr	r2, [r3, #12]
 802c63e:	683b      	ldr	r3, [r7, #0]
 802c640:	3304      	adds	r3, #4
 802c642:	b2d2      	uxtb	r2, r2
 802c644:	701a      	strb	r2, [r3, #0]
 802c646:	687b      	ldr	r3, [r7, #4]
 802c648:	68db      	ldr	r3, [r3, #12]
 802c64a:	0a1a      	lsrs	r2, r3, #8
 802c64c:	683b      	ldr	r3, [r7, #0]
 802c64e:	3305      	adds	r3, #5
 802c650:	b2d2      	uxtb	r2, r2
 802c652:	701a      	strb	r2, [r3, #0]
 802c654:	687b      	ldr	r3, [r7, #4]
 802c656:	68db      	ldr	r3, [r3, #12]
 802c658:	0c1a      	lsrs	r2, r3, #16
 802c65a:	683b      	ldr	r3, [r7, #0]
 802c65c:	3306      	adds	r3, #6
 802c65e:	b2d2      	uxtb	r2, r2
 802c660:	701a      	strb	r2, [r3, #0]
 802c662:	687b      	ldr	r3, [r7, #4]
 802c664:	68db      	ldr	r3, [r3, #12]
 802c666:	0e1a      	lsrs	r2, r3, #24
 802c668:	683b      	ldr	r3, [r7, #0]
 802c66a:	3307      	adds	r3, #7
 802c66c:	b2d2      	uxtb	r2, r2
 802c66e:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[2], output,  8 );
 802c670:	687b      	ldr	r3, [r7, #4]
 802c672:	691a      	ldr	r2, [r3, #16]
 802c674:	683b      	ldr	r3, [r7, #0]
 802c676:	3308      	adds	r3, #8
 802c678:	b2d2      	uxtb	r2, r2
 802c67a:	701a      	strb	r2, [r3, #0]
 802c67c:	687b      	ldr	r3, [r7, #4]
 802c67e:	691b      	ldr	r3, [r3, #16]
 802c680:	0a1a      	lsrs	r2, r3, #8
 802c682:	683b      	ldr	r3, [r7, #0]
 802c684:	3309      	adds	r3, #9
 802c686:	b2d2      	uxtb	r2, r2
 802c688:	701a      	strb	r2, [r3, #0]
 802c68a:	687b      	ldr	r3, [r7, #4]
 802c68c:	691b      	ldr	r3, [r3, #16]
 802c68e:	0c1a      	lsrs	r2, r3, #16
 802c690:	683b      	ldr	r3, [r7, #0]
 802c692:	330a      	adds	r3, #10
 802c694:	b2d2      	uxtb	r2, r2
 802c696:	701a      	strb	r2, [r3, #0]
 802c698:	687b      	ldr	r3, [r7, #4]
 802c69a:	691b      	ldr	r3, [r3, #16]
 802c69c:	0e1a      	lsrs	r2, r3, #24
 802c69e:	683b      	ldr	r3, [r7, #0]
 802c6a0:	330b      	adds	r3, #11
 802c6a2:	b2d2      	uxtb	r2, r2
 802c6a4:	701a      	strb	r2, [r3, #0]
    PUT_UINT32_LE( ctx->state[3], output, 12 );
 802c6a6:	687b      	ldr	r3, [r7, #4]
 802c6a8:	695a      	ldr	r2, [r3, #20]
 802c6aa:	683b      	ldr	r3, [r7, #0]
 802c6ac:	330c      	adds	r3, #12
 802c6ae:	b2d2      	uxtb	r2, r2
 802c6b0:	701a      	strb	r2, [r3, #0]
 802c6b2:	687b      	ldr	r3, [r7, #4]
 802c6b4:	695b      	ldr	r3, [r3, #20]
 802c6b6:	0a1a      	lsrs	r2, r3, #8
 802c6b8:	683b      	ldr	r3, [r7, #0]
 802c6ba:	330d      	adds	r3, #13
 802c6bc:	b2d2      	uxtb	r2, r2
 802c6be:	701a      	strb	r2, [r3, #0]
 802c6c0:	687b      	ldr	r3, [r7, #4]
 802c6c2:	695b      	ldr	r3, [r3, #20]
 802c6c4:	0c1a      	lsrs	r2, r3, #16
 802c6c6:	683b      	ldr	r3, [r7, #0]
 802c6c8:	330e      	adds	r3, #14
 802c6ca:	b2d2      	uxtb	r2, r2
 802c6cc:	701a      	strb	r2, [r3, #0]
 802c6ce:	687b      	ldr	r3, [r7, #4]
 802c6d0:	695b      	ldr	r3, [r3, #20]
 802c6d2:	0e1a      	lsrs	r2, r3, #24
 802c6d4:	683b      	ldr	r3, [r7, #0]
 802c6d6:	330f      	adds	r3, #15
 802c6d8:	b2d2      	uxtb	r2, r2
 802c6da:	701a      	strb	r2, [r3, #0]

    return( 0 );
 802c6dc:	2300      	movs	r3, #0
}
 802c6de:	4618      	mov	r0, r3
 802c6e0:	3718      	adds	r7, #24
 802c6e2:	46bd      	mov	sp, r7
 802c6e4:	bd80      	pop	{r7, pc}
	...

0802c6e8 <mbedtls_platform_zeroize>:
 * platform and needs.
 */
static void * (* const volatile memset_func)( void *, int, size_t ) = memset;

void mbedtls_platform_zeroize( void *buf, size_t len )
{
 802c6e8:	b580      	push	{r7, lr}
 802c6ea:	b082      	sub	sp, #8
 802c6ec:	af00      	add	r7, sp, #0
 802c6ee:	6078      	str	r0, [r7, #4]
 802c6f0:	6039      	str	r1, [r7, #0]
    memset_func( buf, 0, len );
 802c6f2:	4b05      	ldr	r3, [pc, #20]	; (802c708 <mbedtls_platform_zeroize+0x20>)
 802c6f4:	681b      	ldr	r3, [r3, #0]
 802c6f6:	683a      	ldr	r2, [r7, #0]
 802c6f8:	2100      	movs	r1, #0
 802c6fa:	6878      	ldr	r0, [r7, #4]
 802c6fc:	4798      	blx	r3
}
 802c6fe:	bf00      	nop
 802c700:	3708      	adds	r7, #8
 802c702:	46bd      	mov	sp, r7
 802c704:	bd80      	pop	{r7, pc}
 802c706:	bf00      	nop
 802c708:	2000012c 	.word	0x2000012c

0802c70c <__assert_func>:
 802c70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802c70e:	4614      	mov	r4, r2
 802c710:	461a      	mov	r2, r3
 802c712:	4b09      	ldr	r3, [pc, #36]	; (802c738 <__assert_func+0x2c>)
 802c714:	681b      	ldr	r3, [r3, #0]
 802c716:	4605      	mov	r5, r0
 802c718:	68d8      	ldr	r0, [r3, #12]
 802c71a:	b14c      	cbz	r4, 802c730 <__assert_func+0x24>
 802c71c:	4b07      	ldr	r3, [pc, #28]	; (802c73c <__assert_func+0x30>)
 802c71e:	9100      	str	r1, [sp, #0]
 802c720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802c724:	4906      	ldr	r1, [pc, #24]	; (802c740 <__assert_func+0x34>)
 802c726:	462b      	mov	r3, r5
 802c728:	f000 fffa 	bl	802d720 <fiprintf>
 802c72c:	f001 fba8 	bl	802de80 <abort>
 802c730:	4b04      	ldr	r3, [pc, #16]	; (802c744 <__assert_func+0x38>)
 802c732:	461c      	mov	r4, r3
 802c734:	e7f3      	b.n	802c71e <__assert_func+0x12>
 802c736:	bf00      	nop
 802c738:	20000188 	.word	0x20000188
 802c73c:	08034cf8 	.word	0x08034cf8
 802c740:	08034d05 	.word	0x08034d05
 802c744:	08034d33 	.word	0x08034d33

0802c748 <_calloc_r>:
 802c748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802c74a:	fba1 2402 	umull	r2, r4, r1, r2
 802c74e:	b94c      	cbnz	r4, 802c764 <_calloc_r+0x1c>
 802c750:	4611      	mov	r1, r2
 802c752:	9201      	str	r2, [sp, #4]
 802c754:	f000 f83e 	bl	802c7d4 <_malloc_r>
 802c758:	9a01      	ldr	r2, [sp, #4]
 802c75a:	4605      	mov	r5, r0
 802c75c:	b930      	cbnz	r0, 802c76c <_calloc_r+0x24>
 802c75e:	4628      	mov	r0, r5
 802c760:	b003      	add	sp, #12
 802c762:	bd30      	pop	{r4, r5, pc}
 802c764:	220c      	movs	r2, #12
 802c766:	6002      	str	r2, [r0, #0]
 802c768:	2500      	movs	r5, #0
 802c76a:	e7f8      	b.n	802c75e <_calloc_r+0x16>
 802c76c:	4621      	mov	r1, r4
 802c76e:	f001 f99d 	bl	802daac <memset>
 802c772:	e7f4      	b.n	802c75e <_calloc_r+0x16>

0802c774 <malloc>:
 802c774:	4b02      	ldr	r3, [pc, #8]	; (802c780 <malloc+0xc>)
 802c776:	4601      	mov	r1, r0
 802c778:	6818      	ldr	r0, [r3, #0]
 802c77a:	f000 b82b 	b.w	802c7d4 <_malloc_r>
 802c77e:	bf00      	nop
 802c780:	20000188 	.word	0x20000188

0802c784 <free>:
 802c784:	4b02      	ldr	r3, [pc, #8]	; (802c790 <free+0xc>)
 802c786:	4601      	mov	r1, r0
 802c788:	6818      	ldr	r0, [r3, #0]
 802c78a:	f002 b9fb 	b.w	802eb84 <_free_r>
 802c78e:	bf00      	nop
 802c790:	20000188 	.word	0x20000188

0802c794 <sbrk_aligned>:
 802c794:	b570      	push	{r4, r5, r6, lr}
 802c796:	4e0e      	ldr	r6, [pc, #56]	; (802c7d0 <sbrk_aligned+0x3c>)
 802c798:	460c      	mov	r4, r1
 802c79a:	6831      	ldr	r1, [r6, #0]
 802c79c:	4605      	mov	r5, r0
 802c79e:	b911      	cbnz	r1, 802c7a6 <sbrk_aligned+0x12>
 802c7a0:	f001 fb02 	bl	802dda8 <_sbrk_r>
 802c7a4:	6030      	str	r0, [r6, #0]
 802c7a6:	4621      	mov	r1, r4
 802c7a8:	4628      	mov	r0, r5
 802c7aa:	f001 fafd 	bl	802dda8 <_sbrk_r>
 802c7ae:	1c43      	adds	r3, r0, #1
 802c7b0:	d00a      	beq.n	802c7c8 <sbrk_aligned+0x34>
 802c7b2:	1cc4      	adds	r4, r0, #3
 802c7b4:	f024 0403 	bic.w	r4, r4, #3
 802c7b8:	42a0      	cmp	r0, r4
 802c7ba:	d007      	beq.n	802c7cc <sbrk_aligned+0x38>
 802c7bc:	1a21      	subs	r1, r4, r0
 802c7be:	4628      	mov	r0, r5
 802c7c0:	f001 faf2 	bl	802dda8 <_sbrk_r>
 802c7c4:	3001      	adds	r0, #1
 802c7c6:	d101      	bne.n	802c7cc <sbrk_aligned+0x38>
 802c7c8:	f04f 34ff 	mov.w	r4, #4294967295
 802c7cc:	4620      	mov	r0, r4
 802c7ce:	bd70      	pop	{r4, r5, r6, pc}
 802c7d0:	2000d9cc 	.word	0x2000d9cc

0802c7d4 <_malloc_r>:
 802c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c7d8:	1ccd      	adds	r5, r1, #3
 802c7da:	f025 0503 	bic.w	r5, r5, #3
 802c7de:	3508      	adds	r5, #8
 802c7e0:	2d0c      	cmp	r5, #12
 802c7e2:	bf38      	it	cc
 802c7e4:	250c      	movcc	r5, #12
 802c7e6:	2d00      	cmp	r5, #0
 802c7e8:	4607      	mov	r7, r0
 802c7ea:	db01      	blt.n	802c7f0 <_malloc_r+0x1c>
 802c7ec:	42a9      	cmp	r1, r5
 802c7ee:	d905      	bls.n	802c7fc <_malloc_r+0x28>
 802c7f0:	230c      	movs	r3, #12
 802c7f2:	603b      	str	r3, [r7, #0]
 802c7f4:	2600      	movs	r6, #0
 802c7f6:	4630      	mov	r0, r6
 802c7f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c7fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802c8d0 <_malloc_r+0xfc>
 802c800:	f000 f868 	bl	802c8d4 <__malloc_lock>
 802c804:	f8d8 3000 	ldr.w	r3, [r8]
 802c808:	461c      	mov	r4, r3
 802c80a:	bb5c      	cbnz	r4, 802c864 <_malloc_r+0x90>
 802c80c:	4629      	mov	r1, r5
 802c80e:	4638      	mov	r0, r7
 802c810:	f7ff ffc0 	bl	802c794 <sbrk_aligned>
 802c814:	1c43      	adds	r3, r0, #1
 802c816:	4604      	mov	r4, r0
 802c818:	d155      	bne.n	802c8c6 <_malloc_r+0xf2>
 802c81a:	f8d8 4000 	ldr.w	r4, [r8]
 802c81e:	4626      	mov	r6, r4
 802c820:	2e00      	cmp	r6, #0
 802c822:	d145      	bne.n	802c8b0 <_malloc_r+0xdc>
 802c824:	2c00      	cmp	r4, #0
 802c826:	d048      	beq.n	802c8ba <_malloc_r+0xe6>
 802c828:	6823      	ldr	r3, [r4, #0]
 802c82a:	4631      	mov	r1, r6
 802c82c:	4638      	mov	r0, r7
 802c82e:	eb04 0903 	add.w	r9, r4, r3
 802c832:	f001 fab9 	bl	802dda8 <_sbrk_r>
 802c836:	4581      	cmp	r9, r0
 802c838:	d13f      	bne.n	802c8ba <_malloc_r+0xe6>
 802c83a:	6821      	ldr	r1, [r4, #0]
 802c83c:	1a6d      	subs	r5, r5, r1
 802c83e:	4629      	mov	r1, r5
 802c840:	4638      	mov	r0, r7
 802c842:	f7ff ffa7 	bl	802c794 <sbrk_aligned>
 802c846:	3001      	adds	r0, #1
 802c848:	d037      	beq.n	802c8ba <_malloc_r+0xe6>
 802c84a:	6823      	ldr	r3, [r4, #0]
 802c84c:	442b      	add	r3, r5
 802c84e:	6023      	str	r3, [r4, #0]
 802c850:	f8d8 3000 	ldr.w	r3, [r8]
 802c854:	2b00      	cmp	r3, #0
 802c856:	d038      	beq.n	802c8ca <_malloc_r+0xf6>
 802c858:	685a      	ldr	r2, [r3, #4]
 802c85a:	42a2      	cmp	r2, r4
 802c85c:	d12b      	bne.n	802c8b6 <_malloc_r+0xe2>
 802c85e:	2200      	movs	r2, #0
 802c860:	605a      	str	r2, [r3, #4]
 802c862:	e00f      	b.n	802c884 <_malloc_r+0xb0>
 802c864:	6822      	ldr	r2, [r4, #0]
 802c866:	1b52      	subs	r2, r2, r5
 802c868:	d41f      	bmi.n	802c8aa <_malloc_r+0xd6>
 802c86a:	2a0b      	cmp	r2, #11
 802c86c:	d917      	bls.n	802c89e <_malloc_r+0xca>
 802c86e:	1961      	adds	r1, r4, r5
 802c870:	42a3      	cmp	r3, r4
 802c872:	6025      	str	r5, [r4, #0]
 802c874:	bf18      	it	ne
 802c876:	6059      	strne	r1, [r3, #4]
 802c878:	6863      	ldr	r3, [r4, #4]
 802c87a:	bf08      	it	eq
 802c87c:	f8c8 1000 	streq.w	r1, [r8]
 802c880:	5162      	str	r2, [r4, r5]
 802c882:	604b      	str	r3, [r1, #4]
 802c884:	4638      	mov	r0, r7
 802c886:	f104 060b 	add.w	r6, r4, #11
 802c88a:	f000 f829 	bl	802c8e0 <__malloc_unlock>
 802c88e:	f026 0607 	bic.w	r6, r6, #7
 802c892:	1d23      	adds	r3, r4, #4
 802c894:	1af2      	subs	r2, r6, r3
 802c896:	d0ae      	beq.n	802c7f6 <_malloc_r+0x22>
 802c898:	1b9b      	subs	r3, r3, r6
 802c89a:	50a3      	str	r3, [r4, r2]
 802c89c:	e7ab      	b.n	802c7f6 <_malloc_r+0x22>
 802c89e:	42a3      	cmp	r3, r4
 802c8a0:	6862      	ldr	r2, [r4, #4]
 802c8a2:	d1dd      	bne.n	802c860 <_malloc_r+0x8c>
 802c8a4:	f8c8 2000 	str.w	r2, [r8]
 802c8a8:	e7ec      	b.n	802c884 <_malloc_r+0xb0>
 802c8aa:	4623      	mov	r3, r4
 802c8ac:	6864      	ldr	r4, [r4, #4]
 802c8ae:	e7ac      	b.n	802c80a <_malloc_r+0x36>
 802c8b0:	4634      	mov	r4, r6
 802c8b2:	6876      	ldr	r6, [r6, #4]
 802c8b4:	e7b4      	b.n	802c820 <_malloc_r+0x4c>
 802c8b6:	4613      	mov	r3, r2
 802c8b8:	e7cc      	b.n	802c854 <_malloc_r+0x80>
 802c8ba:	230c      	movs	r3, #12
 802c8bc:	603b      	str	r3, [r7, #0]
 802c8be:	4638      	mov	r0, r7
 802c8c0:	f000 f80e 	bl	802c8e0 <__malloc_unlock>
 802c8c4:	e797      	b.n	802c7f6 <_malloc_r+0x22>
 802c8c6:	6025      	str	r5, [r4, #0]
 802c8c8:	e7dc      	b.n	802c884 <_malloc_r+0xb0>
 802c8ca:	605b      	str	r3, [r3, #4]
 802c8cc:	deff      	udf	#255	; 0xff
 802c8ce:	bf00      	nop
 802c8d0:	2000d9c8 	.word	0x2000d9c8

0802c8d4 <__malloc_lock>:
 802c8d4:	4801      	ldr	r0, [pc, #4]	; (802c8dc <__malloc_lock+0x8>)
 802c8d6:	f001 bab4 	b.w	802de42 <__retarget_lock_acquire_recursive>
 802c8da:	bf00      	nop
 802c8dc:	2000db10 	.word	0x2000db10

0802c8e0 <__malloc_unlock>:
 802c8e0:	4801      	ldr	r0, [pc, #4]	; (802c8e8 <__malloc_unlock+0x8>)
 802c8e2:	f001 baaf 	b.w	802de44 <__retarget_lock_release_recursive>
 802c8e6:	bf00      	nop
 802c8e8:	2000db10 	.word	0x2000db10

0802c8ec <__cvt>:
 802c8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802c8f0:	ec55 4b10 	vmov	r4, r5, d0
 802c8f4:	2d00      	cmp	r5, #0
 802c8f6:	460e      	mov	r6, r1
 802c8f8:	4619      	mov	r1, r3
 802c8fa:	462b      	mov	r3, r5
 802c8fc:	bfbb      	ittet	lt
 802c8fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 802c902:	461d      	movlt	r5, r3
 802c904:	2300      	movge	r3, #0
 802c906:	232d      	movlt	r3, #45	; 0x2d
 802c908:	700b      	strb	r3, [r1, #0]
 802c90a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c90c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 802c910:	4691      	mov	r9, r2
 802c912:	f023 0820 	bic.w	r8, r3, #32
 802c916:	bfbc      	itt	lt
 802c918:	4622      	movlt	r2, r4
 802c91a:	4614      	movlt	r4, r2
 802c91c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c920:	d005      	beq.n	802c92e <__cvt+0x42>
 802c922:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 802c926:	d100      	bne.n	802c92a <__cvt+0x3e>
 802c928:	3601      	adds	r6, #1
 802c92a:	2102      	movs	r1, #2
 802c92c:	e000      	b.n	802c930 <__cvt+0x44>
 802c92e:	2103      	movs	r1, #3
 802c930:	ab03      	add	r3, sp, #12
 802c932:	9301      	str	r3, [sp, #4]
 802c934:	ab02      	add	r3, sp, #8
 802c936:	9300      	str	r3, [sp, #0]
 802c938:	ec45 4b10 	vmov	d0, r4, r5
 802c93c:	4653      	mov	r3, sl
 802c93e:	4632      	mov	r2, r6
 802c940:	f001 fb2e 	bl	802dfa0 <_dtoa_r>
 802c944:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 802c948:	4607      	mov	r7, r0
 802c94a:	d102      	bne.n	802c952 <__cvt+0x66>
 802c94c:	f019 0f01 	tst.w	r9, #1
 802c950:	d022      	beq.n	802c998 <__cvt+0xac>
 802c952:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802c956:	eb07 0906 	add.w	r9, r7, r6
 802c95a:	d110      	bne.n	802c97e <__cvt+0x92>
 802c95c:	783b      	ldrb	r3, [r7, #0]
 802c95e:	2b30      	cmp	r3, #48	; 0x30
 802c960:	d10a      	bne.n	802c978 <__cvt+0x8c>
 802c962:	2200      	movs	r2, #0
 802c964:	2300      	movs	r3, #0
 802c966:	4620      	mov	r0, r4
 802c968:	4629      	mov	r1, r5
 802c96a:	f7e4 f8c5 	bl	8010af8 <__aeabi_dcmpeq>
 802c96e:	b918      	cbnz	r0, 802c978 <__cvt+0x8c>
 802c970:	f1c6 0601 	rsb	r6, r6, #1
 802c974:	f8ca 6000 	str.w	r6, [sl]
 802c978:	f8da 3000 	ldr.w	r3, [sl]
 802c97c:	4499      	add	r9, r3
 802c97e:	2200      	movs	r2, #0
 802c980:	2300      	movs	r3, #0
 802c982:	4620      	mov	r0, r4
 802c984:	4629      	mov	r1, r5
 802c986:	f7e4 f8b7 	bl	8010af8 <__aeabi_dcmpeq>
 802c98a:	b108      	cbz	r0, 802c990 <__cvt+0xa4>
 802c98c:	f8cd 900c 	str.w	r9, [sp, #12]
 802c990:	2230      	movs	r2, #48	; 0x30
 802c992:	9b03      	ldr	r3, [sp, #12]
 802c994:	454b      	cmp	r3, r9
 802c996:	d307      	bcc.n	802c9a8 <__cvt+0xbc>
 802c998:	9b03      	ldr	r3, [sp, #12]
 802c99a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802c99c:	1bdb      	subs	r3, r3, r7
 802c99e:	4638      	mov	r0, r7
 802c9a0:	6013      	str	r3, [r2, #0]
 802c9a2:	b004      	add	sp, #16
 802c9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c9a8:	1c59      	adds	r1, r3, #1
 802c9aa:	9103      	str	r1, [sp, #12]
 802c9ac:	701a      	strb	r2, [r3, #0]
 802c9ae:	e7f0      	b.n	802c992 <__cvt+0xa6>

0802c9b0 <__exponent>:
 802c9b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802c9b2:	4603      	mov	r3, r0
 802c9b4:	2900      	cmp	r1, #0
 802c9b6:	bfb8      	it	lt
 802c9b8:	4249      	neglt	r1, r1
 802c9ba:	f803 2b02 	strb.w	r2, [r3], #2
 802c9be:	bfb4      	ite	lt
 802c9c0:	222d      	movlt	r2, #45	; 0x2d
 802c9c2:	222b      	movge	r2, #43	; 0x2b
 802c9c4:	2909      	cmp	r1, #9
 802c9c6:	7042      	strb	r2, [r0, #1]
 802c9c8:	dd2a      	ble.n	802ca20 <__exponent+0x70>
 802c9ca:	f10d 0207 	add.w	r2, sp, #7
 802c9ce:	4617      	mov	r7, r2
 802c9d0:	260a      	movs	r6, #10
 802c9d2:	4694      	mov	ip, r2
 802c9d4:	fb91 f5f6 	sdiv	r5, r1, r6
 802c9d8:	fb06 1415 	mls	r4, r6, r5, r1
 802c9dc:	3430      	adds	r4, #48	; 0x30
 802c9de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 802c9e2:	460c      	mov	r4, r1
 802c9e4:	2c63      	cmp	r4, #99	; 0x63
 802c9e6:	f102 32ff 	add.w	r2, r2, #4294967295
 802c9ea:	4629      	mov	r1, r5
 802c9ec:	dcf1      	bgt.n	802c9d2 <__exponent+0x22>
 802c9ee:	3130      	adds	r1, #48	; 0x30
 802c9f0:	f1ac 0402 	sub.w	r4, ip, #2
 802c9f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 802c9f8:	1c41      	adds	r1, r0, #1
 802c9fa:	4622      	mov	r2, r4
 802c9fc:	42ba      	cmp	r2, r7
 802c9fe:	d30a      	bcc.n	802ca16 <__exponent+0x66>
 802ca00:	f10d 0209 	add.w	r2, sp, #9
 802ca04:	eba2 020c 	sub.w	r2, r2, ip
 802ca08:	42bc      	cmp	r4, r7
 802ca0a:	bf88      	it	hi
 802ca0c:	2200      	movhi	r2, #0
 802ca0e:	4413      	add	r3, r2
 802ca10:	1a18      	subs	r0, r3, r0
 802ca12:	b003      	add	sp, #12
 802ca14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802ca16:	f812 5b01 	ldrb.w	r5, [r2], #1
 802ca1a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802ca1e:	e7ed      	b.n	802c9fc <__exponent+0x4c>
 802ca20:	2330      	movs	r3, #48	; 0x30
 802ca22:	3130      	adds	r1, #48	; 0x30
 802ca24:	7083      	strb	r3, [r0, #2]
 802ca26:	70c1      	strb	r1, [r0, #3]
 802ca28:	1d03      	adds	r3, r0, #4
 802ca2a:	e7f1      	b.n	802ca10 <__exponent+0x60>

0802ca2c <_printf_float>:
 802ca2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca30:	ed2d 8b02 	vpush	{d8}
 802ca34:	b08d      	sub	sp, #52	; 0x34
 802ca36:	460c      	mov	r4, r1
 802ca38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802ca3c:	4616      	mov	r6, r2
 802ca3e:	461f      	mov	r7, r3
 802ca40:	4605      	mov	r5, r0
 802ca42:	f001 f923 	bl	802dc8c <_localeconv_r>
 802ca46:	f8d0 a000 	ldr.w	sl, [r0]
 802ca4a:	4650      	mov	r0, sl
 802ca4c:	f7e3 fc28 	bl	80102a0 <strlen>
 802ca50:	2300      	movs	r3, #0
 802ca52:	930a      	str	r3, [sp, #40]	; 0x28
 802ca54:	6823      	ldr	r3, [r4, #0]
 802ca56:	9305      	str	r3, [sp, #20]
 802ca58:	f8d8 3000 	ldr.w	r3, [r8]
 802ca5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 802ca60:	3307      	adds	r3, #7
 802ca62:	f023 0307 	bic.w	r3, r3, #7
 802ca66:	f103 0208 	add.w	r2, r3, #8
 802ca6a:	f8c8 2000 	str.w	r2, [r8]
 802ca6e:	e9d3 8900 	ldrd	r8, r9, [r3]
 802ca72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802ca76:	9307      	str	r3, [sp, #28]
 802ca78:	f8cd 8018 	str.w	r8, [sp, #24]
 802ca7c:	ee08 0a10 	vmov	s16, r0
 802ca80:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 802ca84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802ca88:	4b9e      	ldr	r3, [pc, #632]	; (802cd04 <_printf_float+0x2d8>)
 802ca8a:	f04f 32ff 	mov.w	r2, #4294967295
 802ca8e:	f7e4 f865 	bl	8010b5c <__aeabi_dcmpun>
 802ca92:	bb88      	cbnz	r0, 802caf8 <_printf_float+0xcc>
 802ca94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802ca98:	4b9a      	ldr	r3, [pc, #616]	; (802cd04 <_printf_float+0x2d8>)
 802ca9a:	f04f 32ff 	mov.w	r2, #4294967295
 802ca9e:	f7e4 f83f 	bl	8010b20 <__aeabi_dcmple>
 802caa2:	bb48      	cbnz	r0, 802caf8 <_printf_float+0xcc>
 802caa4:	2200      	movs	r2, #0
 802caa6:	2300      	movs	r3, #0
 802caa8:	4640      	mov	r0, r8
 802caaa:	4649      	mov	r1, r9
 802caac:	f7e4 f82e 	bl	8010b0c <__aeabi_dcmplt>
 802cab0:	b110      	cbz	r0, 802cab8 <_printf_float+0x8c>
 802cab2:	232d      	movs	r3, #45	; 0x2d
 802cab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cab8:	4a93      	ldr	r2, [pc, #588]	; (802cd08 <_printf_float+0x2dc>)
 802caba:	4b94      	ldr	r3, [pc, #592]	; (802cd0c <_printf_float+0x2e0>)
 802cabc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802cac0:	bf94      	ite	ls
 802cac2:	4690      	movls	r8, r2
 802cac4:	4698      	movhi	r8, r3
 802cac6:	2303      	movs	r3, #3
 802cac8:	6123      	str	r3, [r4, #16]
 802caca:	9b05      	ldr	r3, [sp, #20]
 802cacc:	f023 0304 	bic.w	r3, r3, #4
 802cad0:	6023      	str	r3, [r4, #0]
 802cad2:	f04f 0900 	mov.w	r9, #0
 802cad6:	9700      	str	r7, [sp, #0]
 802cad8:	4633      	mov	r3, r6
 802cada:	aa0b      	add	r2, sp, #44	; 0x2c
 802cadc:	4621      	mov	r1, r4
 802cade:	4628      	mov	r0, r5
 802cae0:	f000 f9da 	bl	802ce98 <_printf_common>
 802cae4:	3001      	adds	r0, #1
 802cae6:	f040 8090 	bne.w	802cc0a <_printf_float+0x1de>
 802caea:	f04f 30ff 	mov.w	r0, #4294967295
 802caee:	b00d      	add	sp, #52	; 0x34
 802caf0:	ecbd 8b02 	vpop	{d8}
 802caf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802caf8:	4642      	mov	r2, r8
 802cafa:	464b      	mov	r3, r9
 802cafc:	4640      	mov	r0, r8
 802cafe:	4649      	mov	r1, r9
 802cb00:	f7e4 f82c 	bl	8010b5c <__aeabi_dcmpun>
 802cb04:	b140      	cbz	r0, 802cb18 <_printf_float+0xec>
 802cb06:	464b      	mov	r3, r9
 802cb08:	2b00      	cmp	r3, #0
 802cb0a:	bfbc      	itt	lt
 802cb0c:	232d      	movlt	r3, #45	; 0x2d
 802cb0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802cb12:	4a7f      	ldr	r2, [pc, #508]	; (802cd10 <_printf_float+0x2e4>)
 802cb14:	4b7f      	ldr	r3, [pc, #508]	; (802cd14 <_printf_float+0x2e8>)
 802cb16:	e7d1      	b.n	802cabc <_printf_float+0x90>
 802cb18:	6863      	ldr	r3, [r4, #4]
 802cb1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802cb1e:	9206      	str	r2, [sp, #24]
 802cb20:	1c5a      	adds	r2, r3, #1
 802cb22:	d13f      	bne.n	802cba4 <_printf_float+0x178>
 802cb24:	2306      	movs	r3, #6
 802cb26:	6063      	str	r3, [r4, #4]
 802cb28:	9b05      	ldr	r3, [sp, #20]
 802cb2a:	6861      	ldr	r1, [r4, #4]
 802cb2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 802cb30:	2300      	movs	r3, #0
 802cb32:	9303      	str	r3, [sp, #12]
 802cb34:	ab0a      	add	r3, sp, #40	; 0x28
 802cb36:	e9cd b301 	strd	fp, r3, [sp, #4]
 802cb3a:	ab09      	add	r3, sp, #36	; 0x24
 802cb3c:	ec49 8b10 	vmov	d0, r8, r9
 802cb40:	9300      	str	r3, [sp, #0]
 802cb42:	6022      	str	r2, [r4, #0]
 802cb44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802cb48:	4628      	mov	r0, r5
 802cb4a:	f7ff fecf 	bl	802c8ec <__cvt>
 802cb4e:	9b06      	ldr	r3, [sp, #24]
 802cb50:	9909      	ldr	r1, [sp, #36]	; 0x24
 802cb52:	2b47      	cmp	r3, #71	; 0x47
 802cb54:	4680      	mov	r8, r0
 802cb56:	d108      	bne.n	802cb6a <_printf_float+0x13e>
 802cb58:	1cc8      	adds	r0, r1, #3
 802cb5a:	db02      	blt.n	802cb62 <_printf_float+0x136>
 802cb5c:	6863      	ldr	r3, [r4, #4]
 802cb5e:	4299      	cmp	r1, r3
 802cb60:	dd41      	ble.n	802cbe6 <_printf_float+0x1ba>
 802cb62:	f1ab 0302 	sub.w	r3, fp, #2
 802cb66:	fa5f fb83 	uxtb.w	fp, r3
 802cb6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802cb6e:	d820      	bhi.n	802cbb2 <_printf_float+0x186>
 802cb70:	3901      	subs	r1, #1
 802cb72:	465a      	mov	r2, fp
 802cb74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802cb78:	9109      	str	r1, [sp, #36]	; 0x24
 802cb7a:	f7ff ff19 	bl	802c9b0 <__exponent>
 802cb7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cb80:	1813      	adds	r3, r2, r0
 802cb82:	2a01      	cmp	r2, #1
 802cb84:	4681      	mov	r9, r0
 802cb86:	6123      	str	r3, [r4, #16]
 802cb88:	dc02      	bgt.n	802cb90 <_printf_float+0x164>
 802cb8a:	6822      	ldr	r2, [r4, #0]
 802cb8c:	07d2      	lsls	r2, r2, #31
 802cb8e:	d501      	bpl.n	802cb94 <_printf_float+0x168>
 802cb90:	3301      	adds	r3, #1
 802cb92:	6123      	str	r3, [r4, #16]
 802cb94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802cb98:	2b00      	cmp	r3, #0
 802cb9a:	d09c      	beq.n	802cad6 <_printf_float+0xaa>
 802cb9c:	232d      	movs	r3, #45	; 0x2d
 802cb9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802cba2:	e798      	b.n	802cad6 <_printf_float+0xaa>
 802cba4:	9a06      	ldr	r2, [sp, #24]
 802cba6:	2a47      	cmp	r2, #71	; 0x47
 802cba8:	d1be      	bne.n	802cb28 <_printf_float+0xfc>
 802cbaa:	2b00      	cmp	r3, #0
 802cbac:	d1bc      	bne.n	802cb28 <_printf_float+0xfc>
 802cbae:	2301      	movs	r3, #1
 802cbb0:	e7b9      	b.n	802cb26 <_printf_float+0xfa>
 802cbb2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802cbb6:	d118      	bne.n	802cbea <_printf_float+0x1be>
 802cbb8:	2900      	cmp	r1, #0
 802cbba:	6863      	ldr	r3, [r4, #4]
 802cbbc:	dd0b      	ble.n	802cbd6 <_printf_float+0x1aa>
 802cbbe:	6121      	str	r1, [r4, #16]
 802cbc0:	b913      	cbnz	r3, 802cbc8 <_printf_float+0x19c>
 802cbc2:	6822      	ldr	r2, [r4, #0]
 802cbc4:	07d0      	lsls	r0, r2, #31
 802cbc6:	d502      	bpl.n	802cbce <_printf_float+0x1a2>
 802cbc8:	3301      	adds	r3, #1
 802cbca:	440b      	add	r3, r1
 802cbcc:	6123      	str	r3, [r4, #16]
 802cbce:	65a1      	str	r1, [r4, #88]	; 0x58
 802cbd0:	f04f 0900 	mov.w	r9, #0
 802cbd4:	e7de      	b.n	802cb94 <_printf_float+0x168>
 802cbd6:	b913      	cbnz	r3, 802cbde <_printf_float+0x1b2>
 802cbd8:	6822      	ldr	r2, [r4, #0]
 802cbda:	07d2      	lsls	r2, r2, #31
 802cbdc:	d501      	bpl.n	802cbe2 <_printf_float+0x1b6>
 802cbde:	3302      	adds	r3, #2
 802cbe0:	e7f4      	b.n	802cbcc <_printf_float+0x1a0>
 802cbe2:	2301      	movs	r3, #1
 802cbe4:	e7f2      	b.n	802cbcc <_printf_float+0x1a0>
 802cbe6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802cbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cbec:	4299      	cmp	r1, r3
 802cbee:	db05      	blt.n	802cbfc <_printf_float+0x1d0>
 802cbf0:	6823      	ldr	r3, [r4, #0]
 802cbf2:	6121      	str	r1, [r4, #16]
 802cbf4:	07d8      	lsls	r0, r3, #31
 802cbf6:	d5ea      	bpl.n	802cbce <_printf_float+0x1a2>
 802cbf8:	1c4b      	adds	r3, r1, #1
 802cbfa:	e7e7      	b.n	802cbcc <_printf_float+0x1a0>
 802cbfc:	2900      	cmp	r1, #0
 802cbfe:	bfd4      	ite	le
 802cc00:	f1c1 0202 	rsble	r2, r1, #2
 802cc04:	2201      	movgt	r2, #1
 802cc06:	4413      	add	r3, r2
 802cc08:	e7e0      	b.n	802cbcc <_printf_float+0x1a0>
 802cc0a:	6823      	ldr	r3, [r4, #0]
 802cc0c:	055a      	lsls	r2, r3, #21
 802cc0e:	d407      	bmi.n	802cc20 <_printf_float+0x1f4>
 802cc10:	6923      	ldr	r3, [r4, #16]
 802cc12:	4642      	mov	r2, r8
 802cc14:	4631      	mov	r1, r6
 802cc16:	4628      	mov	r0, r5
 802cc18:	47b8      	blx	r7
 802cc1a:	3001      	adds	r0, #1
 802cc1c:	d12c      	bne.n	802cc78 <_printf_float+0x24c>
 802cc1e:	e764      	b.n	802caea <_printf_float+0xbe>
 802cc20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802cc24:	f240 80e0 	bls.w	802cde8 <_printf_float+0x3bc>
 802cc28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802cc2c:	2200      	movs	r2, #0
 802cc2e:	2300      	movs	r3, #0
 802cc30:	f7e3 ff62 	bl	8010af8 <__aeabi_dcmpeq>
 802cc34:	2800      	cmp	r0, #0
 802cc36:	d034      	beq.n	802cca2 <_printf_float+0x276>
 802cc38:	4a37      	ldr	r2, [pc, #220]	; (802cd18 <_printf_float+0x2ec>)
 802cc3a:	2301      	movs	r3, #1
 802cc3c:	4631      	mov	r1, r6
 802cc3e:	4628      	mov	r0, r5
 802cc40:	47b8      	blx	r7
 802cc42:	3001      	adds	r0, #1
 802cc44:	f43f af51 	beq.w	802caea <_printf_float+0xbe>
 802cc48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cc4c:	429a      	cmp	r2, r3
 802cc4e:	db02      	blt.n	802cc56 <_printf_float+0x22a>
 802cc50:	6823      	ldr	r3, [r4, #0]
 802cc52:	07d8      	lsls	r0, r3, #31
 802cc54:	d510      	bpl.n	802cc78 <_printf_float+0x24c>
 802cc56:	ee18 3a10 	vmov	r3, s16
 802cc5a:	4652      	mov	r2, sl
 802cc5c:	4631      	mov	r1, r6
 802cc5e:	4628      	mov	r0, r5
 802cc60:	47b8      	blx	r7
 802cc62:	3001      	adds	r0, #1
 802cc64:	f43f af41 	beq.w	802caea <_printf_float+0xbe>
 802cc68:	f04f 0800 	mov.w	r8, #0
 802cc6c:	f104 091a 	add.w	r9, r4, #26
 802cc70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cc72:	3b01      	subs	r3, #1
 802cc74:	4543      	cmp	r3, r8
 802cc76:	dc09      	bgt.n	802cc8c <_printf_float+0x260>
 802cc78:	6823      	ldr	r3, [r4, #0]
 802cc7a:	079b      	lsls	r3, r3, #30
 802cc7c:	f100 8107 	bmi.w	802ce8e <_printf_float+0x462>
 802cc80:	68e0      	ldr	r0, [r4, #12]
 802cc82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802cc84:	4298      	cmp	r0, r3
 802cc86:	bfb8      	it	lt
 802cc88:	4618      	movlt	r0, r3
 802cc8a:	e730      	b.n	802caee <_printf_float+0xc2>
 802cc8c:	2301      	movs	r3, #1
 802cc8e:	464a      	mov	r2, r9
 802cc90:	4631      	mov	r1, r6
 802cc92:	4628      	mov	r0, r5
 802cc94:	47b8      	blx	r7
 802cc96:	3001      	adds	r0, #1
 802cc98:	f43f af27 	beq.w	802caea <_printf_float+0xbe>
 802cc9c:	f108 0801 	add.w	r8, r8, #1
 802cca0:	e7e6      	b.n	802cc70 <_printf_float+0x244>
 802cca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cca4:	2b00      	cmp	r3, #0
 802cca6:	dc39      	bgt.n	802cd1c <_printf_float+0x2f0>
 802cca8:	4a1b      	ldr	r2, [pc, #108]	; (802cd18 <_printf_float+0x2ec>)
 802ccaa:	2301      	movs	r3, #1
 802ccac:	4631      	mov	r1, r6
 802ccae:	4628      	mov	r0, r5
 802ccb0:	47b8      	blx	r7
 802ccb2:	3001      	adds	r0, #1
 802ccb4:	f43f af19 	beq.w	802caea <_printf_float+0xbe>
 802ccb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802ccbc:	4313      	orrs	r3, r2
 802ccbe:	d102      	bne.n	802ccc6 <_printf_float+0x29a>
 802ccc0:	6823      	ldr	r3, [r4, #0]
 802ccc2:	07d9      	lsls	r1, r3, #31
 802ccc4:	d5d8      	bpl.n	802cc78 <_printf_float+0x24c>
 802ccc6:	ee18 3a10 	vmov	r3, s16
 802ccca:	4652      	mov	r2, sl
 802cccc:	4631      	mov	r1, r6
 802ccce:	4628      	mov	r0, r5
 802ccd0:	47b8      	blx	r7
 802ccd2:	3001      	adds	r0, #1
 802ccd4:	f43f af09 	beq.w	802caea <_printf_float+0xbe>
 802ccd8:	f04f 0900 	mov.w	r9, #0
 802ccdc:	f104 0a1a 	add.w	sl, r4, #26
 802cce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cce2:	425b      	negs	r3, r3
 802cce4:	454b      	cmp	r3, r9
 802cce6:	dc01      	bgt.n	802ccec <_printf_float+0x2c0>
 802cce8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ccea:	e792      	b.n	802cc12 <_printf_float+0x1e6>
 802ccec:	2301      	movs	r3, #1
 802ccee:	4652      	mov	r2, sl
 802ccf0:	4631      	mov	r1, r6
 802ccf2:	4628      	mov	r0, r5
 802ccf4:	47b8      	blx	r7
 802ccf6:	3001      	adds	r0, #1
 802ccf8:	f43f aef7 	beq.w	802caea <_printf_float+0xbe>
 802ccfc:	f109 0901 	add.w	r9, r9, #1
 802cd00:	e7ee      	b.n	802cce0 <_printf_float+0x2b4>
 802cd02:	bf00      	nop
 802cd04:	7fefffff 	.word	0x7fefffff
 802cd08:	08034d34 	.word	0x08034d34
 802cd0c:	08034d38 	.word	0x08034d38
 802cd10:	08034d3c 	.word	0x08034d3c
 802cd14:	08034d40 	.word	0x08034d40
 802cd18:	08035128 	.word	0x08035128
 802cd1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cd1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802cd20:	429a      	cmp	r2, r3
 802cd22:	bfa8      	it	ge
 802cd24:	461a      	movge	r2, r3
 802cd26:	2a00      	cmp	r2, #0
 802cd28:	4691      	mov	r9, r2
 802cd2a:	dc37      	bgt.n	802cd9c <_printf_float+0x370>
 802cd2c:	f04f 0b00 	mov.w	fp, #0
 802cd30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802cd34:	f104 021a 	add.w	r2, r4, #26
 802cd38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802cd3a:	9305      	str	r3, [sp, #20]
 802cd3c:	eba3 0309 	sub.w	r3, r3, r9
 802cd40:	455b      	cmp	r3, fp
 802cd42:	dc33      	bgt.n	802cdac <_printf_float+0x380>
 802cd44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cd48:	429a      	cmp	r2, r3
 802cd4a:	db3b      	blt.n	802cdc4 <_printf_float+0x398>
 802cd4c:	6823      	ldr	r3, [r4, #0]
 802cd4e:	07da      	lsls	r2, r3, #31
 802cd50:	d438      	bmi.n	802cdc4 <_printf_float+0x398>
 802cd52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802cd56:	eba2 0903 	sub.w	r9, r2, r3
 802cd5a:	9b05      	ldr	r3, [sp, #20]
 802cd5c:	1ad2      	subs	r2, r2, r3
 802cd5e:	4591      	cmp	r9, r2
 802cd60:	bfa8      	it	ge
 802cd62:	4691      	movge	r9, r2
 802cd64:	f1b9 0f00 	cmp.w	r9, #0
 802cd68:	dc35      	bgt.n	802cdd6 <_printf_float+0x3aa>
 802cd6a:	f04f 0800 	mov.w	r8, #0
 802cd6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802cd72:	f104 0a1a 	add.w	sl, r4, #26
 802cd76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802cd7a:	1a9b      	subs	r3, r3, r2
 802cd7c:	eba3 0309 	sub.w	r3, r3, r9
 802cd80:	4543      	cmp	r3, r8
 802cd82:	f77f af79 	ble.w	802cc78 <_printf_float+0x24c>
 802cd86:	2301      	movs	r3, #1
 802cd88:	4652      	mov	r2, sl
 802cd8a:	4631      	mov	r1, r6
 802cd8c:	4628      	mov	r0, r5
 802cd8e:	47b8      	blx	r7
 802cd90:	3001      	adds	r0, #1
 802cd92:	f43f aeaa 	beq.w	802caea <_printf_float+0xbe>
 802cd96:	f108 0801 	add.w	r8, r8, #1
 802cd9a:	e7ec      	b.n	802cd76 <_printf_float+0x34a>
 802cd9c:	4613      	mov	r3, r2
 802cd9e:	4631      	mov	r1, r6
 802cda0:	4642      	mov	r2, r8
 802cda2:	4628      	mov	r0, r5
 802cda4:	47b8      	blx	r7
 802cda6:	3001      	adds	r0, #1
 802cda8:	d1c0      	bne.n	802cd2c <_printf_float+0x300>
 802cdaa:	e69e      	b.n	802caea <_printf_float+0xbe>
 802cdac:	2301      	movs	r3, #1
 802cdae:	4631      	mov	r1, r6
 802cdb0:	4628      	mov	r0, r5
 802cdb2:	9205      	str	r2, [sp, #20]
 802cdb4:	47b8      	blx	r7
 802cdb6:	3001      	adds	r0, #1
 802cdb8:	f43f ae97 	beq.w	802caea <_printf_float+0xbe>
 802cdbc:	9a05      	ldr	r2, [sp, #20]
 802cdbe:	f10b 0b01 	add.w	fp, fp, #1
 802cdc2:	e7b9      	b.n	802cd38 <_printf_float+0x30c>
 802cdc4:	ee18 3a10 	vmov	r3, s16
 802cdc8:	4652      	mov	r2, sl
 802cdca:	4631      	mov	r1, r6
 802cdcc:	4628      	mov	r0, r5
 802cdce:	47b8      	blx	r7
 802cdd0:	3001      	adds	r0, #1
 802cdd2:	d1be      	bne.n	802cd52 <_printf_float+0x326>
 802cdd4:	e689      	b.n	802caea <_printf_float+0xbe>
 802cdd6:	9a05      	ldr	r2, [sp, #20]
 802cdd8:	464b      	mov	r3, r9
 802cdda:	4442      	add	r2, r8
 802cddc:	4631      	mov	r1, r6
 802cdde:	4628      	mov	r0, r5
 802cde0:	47b8      	blx	r7
 802cde2:	3001      	adds	r0, #1
 802cde4:	d1c1      	bne.n	802cd6a <_printf_float+0x33e>
 802cde6:	e680      	b.n	802caea <_printf_float+0xbe>
 802cde8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cdea:	2a01      	cmp	r2, #1
 802cdec:	dc01      	bgt.n	802cdf2 <_printf_float+0x3c6>
 802cdee:	07db      	lsls	r3, r3, #31
 802cdf0:	d53a      	bpl.n	802ce68 <_printf_float+0x43c>
 802cdf2:	2301      	movs	r3, #1
 802cdf4:	4642      	mov	r2, r8
 802cdf6:	4631      	mov	r1, r6
 802cdf8:	4628      	mov	r0, r5
 802cdfa:	47b8      	blx	r7
 802cdfc:	3001      	adds	r0, #1
 802cdfe:	f43f ae74 	beq.w	802caea <_printf_float+0xbe>
 802ce02:	ee18 3a10 	vmov	r3, s16
 802ce06:	4652      	mov	r2, sl
 802ce08:	4631      	mov	r1, r6
 802ce0a:	4628      	mov	r0, r5
 802ce0c:	47b8      	blx	r7
 802ce0e:	3001      	adds	r0, #1
 802ce10:	f43f ae6b 	beq.w	802caea <_printf_float+0xbe>
 802ce14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802ce18:	2200      	movs	r2, #0
 802ce1a:	2300      	movs	r3, #0
 802ce1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 802ce20:	f7e3 fe6a 	bl	8010af8 <__aeabi_dcmpeq>
 802ce24:	b9d8      	cbnz	r0, 802ce5e <_printf_float+0x432>
 802ce26:	f10a 33ff 	add.w	r3, sl, #4294967295
 802ce2a:	f108 0201 	add.w	r2, r8, #1
 802ce2e:	4631      	mov	r1, r6
 802ce30:	4628      	mov	r0, r5
 802ce32:	47b8      	blx	r7
 802ce34:	3001      	adds	r0, #1
 802ce36:	d10e      	bne.n	802ce56 <_printf_float+0x42a>
 802ce38:	e657      	b.n	802caea <_printf_float+0xbe>
 802ce3a:	2301      	movs	r3, #1
 802ce3c:	4652      	mov	r2, sl
 802ce3e:	4631      	mov	r1, r6
 802ce40:	4628      	mov	r0, r5
 802ce42:	47b8      	blx	r7
 802ce44:	3001      	adds	r0, #1
 802ce46:	f43f ae50 	beq.w	802caea <_printf_float+0xbe>
 802ce4a:	f108 0801 	add.w	r8, r8, #1
 802ce4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802ce50:	3b01      	subs	r3, #1
 802ce52:	4543      	cmp	r3, r8
 802ce54:	dcf1      	bgt.n	802ce3a <_printf_float+0x40e>
 802ce56:	464b      	mov	r3, r9
 802ce58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802ce5c:	e6da      	b.n	802cc14 <_printf_float+0x1e8>
 802ce5e:	f04f 0800 	mov.w	r8, #0
 802ce62:	f104 0a1a 	add.w	sl, r4, #26
 802ce66:	e7f2      	b.n	802ce4e <_printf_float+0x422>
 802ce68:	2301      	movs	r3, #1
 802ce6a:	4642      	mov	r2, r8
 802ce6c:	e7df      	b.n	802ce2e <_printf_float+0x402>
 802ce6e:	2301      	movs	r3, #1
 802ce70:	464a      	mov	r2, r9
 802ce72:	4631      	mov	r1, r6
 802ce74:	4628      	mov	r0, r5
 802ce76:	47b8      	blx	r7
 802ce78:	3001      	adds	r0, #1
 802ce7a:	f43f ae36 	beq.w	802caea <_printf_float+0xbe>
 802ce7e:	f108 0801 	add.w	r8, r8, #1
 802ce82:	68e3      	ldr	r3, [r4, #12]
 802ce84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802ce86:	1a5b      	subs	r3, r3, r1
 802ce88:	4543      	cmp	r3, r8
 802ce8a:	dcf0      	bgt.n	802ce6e <_printf_float+0x442>
 802ce8c:	e6f8      	b.n	802cc80 <_printf_float+0x254>
 802ce8e:	f04f 0800 	mov.w	r8, #0
 802ce92:	f104 0919 	add.w	r9, r4, #25
 802ce96:	e7f4      	b.n	802ce82 <_printf_float+0x456>

0802ce98 <_printf_common>:
 802ce98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ce9c:	4616      	mov	r6, r2
 802ce9e:	4699      	mov	r9, r3
 802cea0:	688a      	ldr	r2, [r1, #8]
 802cea2:	690b      	ldr	r3, [r1, #16]
 802cea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802cea8:	4293      	cmp	r3, r2
 802ceaa:	bfb8      	it	lt
 802ceac:	4613      	movlt	r3, r2
 802ceae:	6033      	str	r3, [r6, #0]
 802ceb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802ceb4:	4607      	mov	r7, r0
 802ceb6:	460c      	mov	r4, r1
 802ceb8:	b10a      	cbz	r2, 802cebe <_printf_common+0x26>
 802ceba:	3301      	adds	r3, #1
 802cebc:	6033      	str	r3, [r6, #0]
 802cebe:	6823      	ldr	r3, [r4, #0]
 802cec0:	0699      	lsls	r1, r3, #26
 802cec2:	bf42      	ittt	mi
 802cec4:	6833      	ldrmi	r3, [r6, #0]
 802cec6:	3302      	addmi	r3, #2
 802cec8:	6033      	strmi	r3, [r6, #0]
 802ceca:	6825      	ldr	r5, [r4, #0]
 802cecc:	f015 0506 	ands.w	r5, r5, #6
 802ced0:	d106      	bne.n	802cee0 <_printf_common+0x48>
 802ced2:	f104 0a19 	add.w	sl, r4, #25
 802ced6:	68e3      	ldr	r3, [r4, #12]
 802ced8:	6832      	ldr	r2, [r6, #0]
 802ceda:	1a9b      	subs	r3, r3, r2
 802cedc:	42ab      	cmp	r3, r5
 802cede:	dc26      	bgt.n	802cf2e <_printf_common+0x96>
 802cee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802cee4:	1e13      	subs	r3, r2, #0
 802cee6:	6822      	ldr	r2, [r4, #0]
 802cee8:	bf18      	it	ne
 802ceea:	2301      	movne	r3, #1
 802ceec:	0692      	lsls	r2, r2, #26
 802ceee:	d42b      	bmi.n	802cf48 <_printf_common+0xb0>
 802cef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802cef4:	4649      	mov	r1, r9
 802cef6:	4638      	mov	r0, r7
 802cef8:	47c0      	blx	r8
 802cefa:	3001      	adds	r0, #1
 802cefc:	d01e      	beq.n	802cf3c <_printf_common+0xa4>
 802cefe:	6823      	ldr	r3, [r4, #0]
 802cf00:	6922      	ldr	r2, [r4, #16]
 802cf02:	f003 0306 	and.w	r3, r3, #6
 802cf06:	2b04      	cmp	r3, #4
 802cf08:	bf02      	ittt	eq
 802cf0a:	68e5      	ldreq	r5, [r4, #12]
 802cf0c:	6833      	ldreq	r3, [r6, #0]
 802cf0e:	1aed      	subeq	r5, r5, r3
 802cf10:	68a3      	ldr	r3, [r4, #8]
 802cf12:	bf0c      	ite	eq
 802cf14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802cf18:	2500      	movne	r5, #0
 802cf1a:	4293      	cmp	r3, r2
 802cf1c:	bfc4      	itt	gt
 802cf1e:	1a9b      	subgt	r3, r3, r2
 802cf20:	18ed      	addgt	r5, r5, r3
 802cf22:	2600      	movs	r6, #0
 802cf24:	341a      	adds	r4, #26
 802cf26:	42b5      	cmp	r5, r6
 802cf28:	d11a      	bne.n	802cf60 <_printf_common+0xc8>
 802cf2a:	2000      	movs	r0, #0
 802cf2c:	e008      	b.n	802cf40 <_printf_common+0xa8>
 802cf2e:	2301      	movs	r3, #1
 802cf30:	4652      	mov	r2, sl
 802cf32:	4649      	mov	r1, r9
 802cf34:	4638      	mov	r0, r7
 802cf36:	47c0      	blx	r8
 802cf38:	3001      	adds	r0, #1
 802cf3a:	d103      	bne.n	802cf44 <_printf_common+0xac>
 802cf3c:	f04f 30ff 	mov.w	r0, #4294967295
 802cf40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802cf44:	3501      	adds	r5, #1
 802cf46:	e7c6      	b.n	802ced6 <_printf_common+0x3e>
 802cf48:	18e1      	adds	r1, r4, r3
 802cf4a:	1c5a      	adds	r2, r3, #1
 802cf4c:	2030      	movs	r0, #48	; 0x30
 802cf4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802cf52:	4422      	add	r2, r4
 802cf54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802cf58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802cf5c:	3302      	adds	r3, #2
 802cf5e:	e7c7      	b.n	802cef0 <_printf_common+0x58>
 802cf60:	2301      	movs	r3, #1
 802cf62:	4622      	mov	r2, r4
 802cf64:	4649      	mov	r1, r9
 802cf66:	4638      	mov	r0, r7
 802cf68:	47c0      	blx	r8
 802cf6a:	3001      	adds	r0, #1
 802cf6c:	d0e6      	beq.n	802cf3c <_printf_common+0xa4>
 802cf6e:	3601      	adds	r6, #1
 802cf70:	e7d9      	b.n	802cf26 <_printf_common+0x8e>
	...

0802cf74 <_printf_i>:
 802cf74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802cf78:	7e0f      	ldrb	r7, [r1, #24]
 802cf7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802cf7c:	2f78      	cmp	r7, #120	; 0x78
 802cf7e:	4691      	mov	r9, r2
 802cf80:	4680      	mov	r8, r0
 802cf82:	460c      	mov	r4, r1
 802cf84:	469a      	mov	sl, r3
 802cf86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802cf8a:	d807      	bhi.n	802cf9c <_printf_i+0x28>
 802cf8c:	2f62      	cmp	r7, #98	; 0x62
 802cf8e:	d80a      	bhi.n	802cfa6 <_printf_i+0x32>
 802cf90:	2f00      	cmp	r7, #0
 802cf92:	f000 80d4 	beq.w	802d13e <_printf_i+0x1ca>
 802cf96:	2f58      	cmp	r7, #88	; 0x58
 802cf98:	f000 80c0 	beq.w	802d11c <_printf_i+0x1a8>
 802cf9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802cfa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802cfa4:	e03a      	b.n	802d01c <_printf_i+0xa8>
 802cfa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802cfaa:	2b15      	cmp	r3, #21
 802cfac:	d8f6      	bhi.n	802cf9c <_printf_i+0x28>
 802cfae:	a101      	add	r1, pc, #4	; (adr r1, 802cfb4 <_printf_i+0x40>)
 802cfb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802cfb4:	0802d00d 	.word	0x0802d00d
 802cfb8:	0802d021 	.word	0x0802d021
 802cfbc:	0802cf9d 	.word	0x0802cf9d
 802cfc0:	0802cf9d 	.word	0x0802cf9d
 802cfc4:	0802cf9d 	.word	0x0802cf9d
 802cfc8:	0802cf9d 	.word	0x0802cf9d
 802cfcc:	0802d021 	.word	0x0802d021
 802cfd0:	0802cf9d 	.word	0x0802cf9d
 802cfd4:	0802cf9d 	.word	0x0802cf9d
 802cfd8:	0802cf9d 	.word	0x0802cf9d
 802cfdc:	0802cf9d 	.word	0x0802cf9d
 802cfe0:	0802d125 	.word	0x0802d125
 802cfe4:	0802d04d 	.word	0x0802d04d
 802cfe8:	0802d0df 	.word	0x0802d0df
 802cfec:	0802cf9d 	.word	0x0802cf9d
 802cff0:	0802cf9d 	.word	0x0802cf9d
 802cff4:	0802d147 	.word	0x0802d147
 802cff8:	0802cf9d 	.word	0x0802cf9d
 802cffc:	0802d04d 	.word	0x0802d04d
 802d000:	0802cf9d 	.word	0x0802cf9d
 802d004:	0802cf9d 	.word	0x0802cf9d
 802d008:	0802d0e7 	.word	0x0802d0e7
 802d00c:	682b      	ldr	r3, [r5, #0]
 802d00e:	1d1a      	adds	r2, r3, #4
 802d010:	681b      	ldr	r3, [r3, #0]
 802d012:	602a      	str	r2, [r5, #0]
 802d014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802d018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802d01c:	2301      	movs	r3, #1
 802d01e:	e09f      	b.n	802d160 <_printf_i+0x1ec>
 802d020:	6820      	ldr	r0, [r4, #0]
 802d022:	682b      	ldr	r3, [r5, #0]
 802d024:	0607      	lsls	r7, r0, #24
 802d026:	f103 0104 	add.w	r1, r3, #4
 802d02a:	6029      	str	r1, [r5, #0]
 802d02c:	d501      	bpl.n	802d032 <_printf_i+0xbe>
 802d02e:	681e      	ldr	r6, [r3, #0]
 802d030:	e003      	b.n	802d03a <_printf_i+0xc6>
 802d032:	0646      	lsls	r6, r0, #25
 802d034:	d5fb      	bpl.n	802d02e <_printf_i+0xba>
 802d036:	f9b3 6000 	ldrsh.w	r6, [r3]
 802d03a:	2e00      	cmp	r6, #0
 802d03c:	da03      	bge.n	802d046 <_printf_i+0xd2>
 802d03e:	232d      	movs	r3, #45	; 0x2d
 802d040:	4276      	negs	r6, r6
 802d042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d046:	485a      	ldr	r0, [pc, #360]	; (802d1b0 <_printf_i+0x23c>)
 802d048:	230a      	movs	r3, #10
 802d04a:	e012      	b.n	802d072 <_printf_i+0xfe>
 802d04c:	682b      	ldr	r3, [r5, #0]
 802d04e:	6820      	ldr	r0, [r4, #0]
 802d050:	1d19      	adds	r1, r3, #4
 802d052:	6029      	str	r1, [r5, #0]
 802d054:	0605      	lsls	r5, r0, #24
 802d056:	d501      	bpl.n	802d05c <_printf_i+0xe8>
 802d058:	681e      	ldr	r6, [r3, #0]
 802d05a:	e002      	b.n	802d062 <_printf_i+0xee>
 802d05c:	0641      	lsls	r1, r0, #25
 802d05e:	d5fb      	bpl.n	802d058 <_printf_i+0xe4>
 802d060:	881e      	ldrh	r6, [r3, #0]
 802d062:	4853      	ldr	r0, [pc, #332]	; (802d1b0 <_printf_i+0x23c>)
 802d064:	2f6f      	cmp	r7, #111	; 0x6f
 802d066:	bf0c      	ite	eq
 802d068:	2308      	moveq	r3, #8
 802d06a:	230a      	movne	r3, #10
 802d06c:	2100      	movs	r1, #0
 802d06e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802d072:	6865      	ldr	r5, [r4, #4]
 802d074:	60a5      	str	r5, [r4, #8]
 802d076:	2d00      	cmp	r5, #0
 802d078:	bfa2      	ittt	ge
 802d07a:	6821      	ldrge	r1, [r4, #0]
 802d07c:	f021 0104 	bicge.w	r1, r1, #4
 802d080:	6021      	strge	r1, [r4, #0]
 802d082:	b90e      	cbnz	r6, 802d088 <_printf_i+0x114>
 802d084:	2d00      	cmp	r5, #0
 802d086:	d04b      	beq.n	802d120 <_printf_i+0x1ac>
 802d088:	4615      	mov	r5, r2
 802d08a:	fbb6 f1f3 	udiv	r1, r6, r3
 802d08e:	fb03 6711 	mls	r7, r3, r1, r6
 802d092:	5dc7      	ldrb	r7, [r0, r7]
 802d094:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802d098:	4637      	mov	r7, r6
 802d09a:	42bb      	cmp	r3, r7
 802d09c:	460e      	mov	r6, r1
 802d09e:	d9f4      	bls.n	802d08a <_printf_i+0x116>
 802d0a0:	2b08      	cmp	r3, #8
 802d0a2:	d10b      	bne.n	802d0bc <_printf_i+0x148>
 802d0a4:	6823      	ldr	r3, [r4, #0]
 802d0a6:	07de      	lsls	r6, r3, #31
 802d0a8:	d508      	bpl.n	802d0bc <_printf_i+0x148>
 802d0aa:	6923      	ldr	r3, [r4, #16]
 802d0ac:	6861      	ldr	r1, [r4, #4]
 802d0ae:	4299      	cmp	r1, r3
 802d0b0:	bfde      	ittt	le
 802d0b2:	2330      	movle	r3, #48	; 0x30
 802d0b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 802d0b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 802d0bc:	1b52      	subs	r2, r2, r5
 802d0be:	6122      	str	r2, [r4, #16]
 802d0c0:	f8cd a000 	str.w	sl, [sp]
 802d0c4:	464b      	mov	r3, r9
 802d0c6:	aa03      	add	r2, sp, #12
 802d0c8:	4621      	mov	r1, r4
 802d0ca:	4640      	mov	r0, r8
 802d0cc:	f7ff fee4 	bl	802ce98 <_printf_common>
 802d0d0:	3001      	adds	r0, #1
 802d0d2:	d14a      	bne.n	802d16a <_printf_i+0x1f6>
 802d0d4:	f04f 30ff 	mov.w	r0, #4294967295
 802d0d8:	b004      	add	sp, #16
 802d0da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802d0de:	6823      	ldr	r3, [r4, #0]
 802d0e0:	f043 0320 	orr.w	r3, r3, #32
 802d0e4:	6023      	str	r3, [r4, #0]
 802d0e6:	4833      	ldr	r0, [pc, #204]	; (802d1b4 <_printf_i+0x240>)
 802d0e8:	2778      	movs	r7, #120	; 0x78
 802d0ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802d0ee:	6823      	ldr	r3, [r4, #0]
 802d0f0:	6829      	ldr	r1, [r5, #0]
 802d0f2:	061f      	lsls	r7, r3, #24
 802d0f4:	f851 6b04 	ldr.w	r6, [r1], #4
 802d0f8:	d402      	bmi.n	802d100 <_printf_i+0x18c>
 802d0fa:	065f      	lsls	r7, r3, #25
 802d0fc:	bf48      	it	mi
 802d0fe:	b2b6      	uxthmi	r6, r6
 802d100:	07df      	lsls	r7, r3, #31
 802d102:	bf48      	it	mi
 802d104:	f043 0320 	orrmi.w	r3, r3, #32
 802d108:	6029      	str	r1, [r5, #0]
 802d10a:	bf48      	it	mi
 802d10c:	6023      	strmi	r3, [r4, #0]
 802d10e:	b91e      	cbnz	r6, 802d118 <_printf_i+0x1a4>
 802d110:	6823      	ldr	r3, [r4, #0]
 802d112:	f023 0320 	bic.w	r3, r3, #32
 802d116:	6023      	str	r3, [r4, #0]
 802d118:	2310      	movs	r3, #16
 802d11a:	e7a7      	b.n	802d06c <_printf_i+0xf8>
 802d11c:	4824      	ldr	r0, [pc, #144]	; (802d1b0 <_printf_i+0x23c>)
 802d11e:	e7e4      	b.n	802d0ea <_printf_i+0x176>
 802d120:	4615      	mov	r5, r2
 802d122:	e7bd      	b.n	802d0a0 <_printf_i+0x12c>
 802d124:	682b      	ldr	r3, [r5, #0]
 802d126:	6826      	ldr	r6, [r4, #0]
 802d128:	6961      	ldr	r1, [r4, #20]
 802d12a:	1d18      	adds	r0, r3, #4
 802d12c:	6028      	str	r0, [r5, #0]
 802d12e:	0635      	lsls	r5, r6, #24
 802d130:	681b      	ldr	r3, [r3, #0]
 802d132:	d501      	bpl.n	802d138 <_printf_i+0x1c4>
 802d134:	6019      	str	r1, [r3, #0]
 802d136:	e002      	b.n	802d13e <_printf_i+0x1ca>
 802d138:	0670      	lsls	r0, r6, #25
 802d13a:	d5fb      	bpl.n	802d134 <_printf_i+0x1c0>
 802d13c:	8019      	strh	r1, [r3, #0]
 802d13e:	2300      	movs	r3, #0
 802d140:	6123      	str	r3, [r4, #16]
 802d142:	4615      	mov	r5, r2
 802d144:	e7bc      	b.n	802d0c0 <_printf_i+0x14c>
 802d146:	682b      	ldr	r3, [r5, #0]
 802d148:	1d1a      	adds	r2, r3, #4
 802d14a:	602a      	str	r2, [r5, #0]
 802d14c:	681d      	ldr	r5, [r3, #0]
 802d14e:	6862      	ldr	r2, [r4, #4]
 802d150:	2100      	movs	r1, #0
 802d152:	4628      	mov	r0, r5
 802d154:	f7e3 f854 	bl	8010200 <memchr>
 802d158:	b108      	cbz	r0, 802d15e <_printf_i+0x1ea>
 802d15a:	1b40      	subs	r0, r0, r5
 802d15c:	6060      	str	r0, [r4, #4]
 802d15e:	6863      	ldr	r3, [r4, #4]
 802d160:	6123      	str	r3, [r4, #16]
 802d162:	2300      	movs	r3, #0
 802d164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802d168:	e7aa      	b.n	802d0c0 <_printf_i+0x14c>
 802d16a:	6923      	ldr	r3, [r4, #16]
 802d16c:	462a      	mov	r2, r5
 802d16e:	4649      	mov	r1, r9
 802d170:	4640      	mov	r0, r8
 802d172:	47d0      	blx	sl
 802d174:	3001      	adds	r0, #1
 802d176:	d0ad      	beq.n	802d0d4 <_printf_i+0x160>
 802d178:	6823      	ldr	r3, [r4, #0]
 802d17a:	079b      	lsls	r3, r3, #30
 802d17c:	d413      	bmi.n	802d1a6 <_printf_i+0x232>
 802d17e:	68e0      	ldr	r0, [r4, #12]
 802d180:	9b03      	ldr	r3, [sp, #12]
 802d182:	4298      	cmp	r0, r3
 802d184:	bfb8      	it	lt
 802d186:	4618      	movlt	r0, r3
 802d188:	e7a6      	b.n	802d0d8 <_printf_i+0x164>
 802d18a:	2301      	movs	r3, #1
 802d18c:	4632      	mov	r2, r6
 802d18e:	4649      	mov	r1, r9
 802d190:	4640      	mov	r0, r8
 802d192:	47d0      	blx	sl
 802d194:	3001      	adds	r0, #1
 802d196:	d09d      	beq.n	802d0d4 <_printf_i+0x160>
 802d198:	3501      	adds	r5, #1
 802d19a:	68e3      	ldr	r3, [r4, #12]
 802d19c:	9903      	ldr	r1, [sp, #12]
 802d19e:	1a5b      	subs	r3, r3, r1
 802d1a0:	42ab      	cmp	r3, r5
 802d1a2:	dcf2      	bgt.n	802d18a <_printf_i+0x216>
 802d1a4:	e7eb      	b.n	802d17e <_printf_i+0x20a>
 802d1a6:	2500      	movs	r5, #0
 802d1a8:	f104 0619 	add.w	r6, r4, #25
 802d1ac:	e7f5      	b.n	802d19a <_printf_i+0x226>
 802d1ae:	bf00      	nop
 802d1b0:	08034d44 	.word	0x08034d44
 802d1b4:	08034d55 	.word	0x08034d55

0802d1b8 <_scanf_float>:
 802d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d1bc:	b087      	sub	sp, #28
 802d1be:	4617      	mov	r7, r2
 802d1c0:	9303      	str	r3, [sp, #12]
 802d1c2:	688b      	ldr	r3, [r1, #8]
 802d1c4:	1e5a      	subs	r2, r3, #1
 802d1c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802d1ca:	bf83      	ittte	hi
 802d1cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802d1d0:	195b      	addhi	r3, r3, r5
 802d1d2:	9302      	strhi	r3, [sp, #8]
 802d1d4:	2300      	movls	r3, #0
 802d1d6:	bf86      	itte	hi
 802d1d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 802d1dc:	608b      	strhi	r3, [r1, #8]
 802d1de:	9302      	strls	r3, [sp, #8]
 802d1e0:	680b      	ldr	r3, [r1, #0]
 802d1e2:	468b      	mov	fp, r1
 802d1e4:	2500      	movs	r5, #0
 802d1e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 802d1ea:	f84b 3b1c 	str.w	r3, [fp], #28
 802d1ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 802d1f2:	4680      	mov	r8, r0
 802d1f4:	460c      	mov	r4, r1
 802d1f6:	465e      	mov	r6, fp
 802d1f8:	46aa      	mov	sl, r5
 802d1fa:	46a9      	mov	r9, r5
 802d1fc:	9501      	str	r5, [sp, #4]
 802d1fe:	68a2      	ldr	r2, [r4, #8]
 802d200:	b152      	cbz	r2, 802d218 <_scanf_float+0x60>
 802d202:	683b      	ldr	r3, [r7, #0]
 802d204:	781b      	ldrb	r3, [r3, #0]
 802d206:	2b4e      	cmp	r3, #78	; 0x4e
 802d208:	d864      	bhi.n	802d2d4 <_scanf_float+0x11c>
 802d20a:	2b40      	cmp	r3, #64	; 0x40
 802d20c:	d83c      	bhi.n	802d288 <_scanf_float+0xd0>
 802d20e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 802d212:	b2c8      	uxtb	r0, r1
 802d214:	280e      	cmp	r0, #14
 802d216:	d93a      	bls.n	802d28e <_scanf_float+0xd6>
 802d218:	f1b9 0f00 	cmp.w	r9, #0
 802d21c:	d003      	beq.n	802d226 <_scanf_float+0x6e>
 802d21e:	6823      	ldr	r3, [r4, #0]
 802d220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 802d224:	6023      	str	r3, [r4, #0]
 802d226:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d22a:	f1ba 0f01 	cmp.w	sl, #1
 802d22e:	f200 8113 	bhi.w	802d458 <_scanf_float+0x2a0>
 802d232:	455e      	cmp	r6, fp
 802d234:	f200 8105 	bhi.w	802d442 <_scanf_float+0x28a>
 802d238:	2501      	movs	r5, #1
 802d23a:	4628      	mov	r0, r5
 802d23c:	b007      	add	sp, #28
 802d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d242:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 802d246:	2a0d      	cmp	r2, #13
 802d248:	d8e6      	bhi.n	802d218 <_scanf_float+0x60>
 802d24a:	a101      	add	r1, pc, #4	; (adr r1, 802d250 <_scanf_float+0x98>)
 802d24c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802d250:	0802d38f 	.word	0x0802d38f
 802d254:	0802d219 	.word	0x0802d219
 802d258:	0802d219 	.word	0x0802d219
 802d25c:	0802d219 	.word	0x0802d219
 802d260:	0802d3ef 	.word	0x0802d3ef
 802d264:	0802d3c7 	.word	0x0802d3c7
 802d268:	0802d219 	.word	0x0802d219
 802d26c:	0802d219 	.word	0x0802d219
 802d270:	0802d39d 	.word	0x0802d39d
 802d274:	0802d219 	.word	0x0802d219
 802d278:	0802d219 	.word	0x0802d219
 802d27c:	0802d219 	.word	0x0802d219
 802d280:	0802d219 	.word	0x0802d219
 802d284:	0802d355 	.word	0x0802d355
 802d288:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 802d28c:	e7db      	b.n	802d246 <_scanf_float+0x8e>
 802d28e:	290e      	cmp	r1, #14
 802d290:	d8c2      	bhi.n	802d218 <_scanf_float+0x60>
 802d292:	a001      	add	r0, pc, #4	; (adr r0, 802d298 <_scanf_float+0xe0>)
 802d294:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 802d298:	0802d347 	.word	0x0802d347
 802d29c:	0802d219 	.word	0x0802d219
 802d2a0:	0802d347 	.word	0x0802d347
 802d2a4:	0802d3db 	.word	0x0802d3db
 802d2a8:	0802d219 	.word	0x0802d219
 802d2ac:	0802d2f5 	.word	0x0802d2f5
 802d2b0:	0802d331 	.word	0x0802d331
 802d2b4:	0802d331 	.word	0x0802d331
 802d2b8:	0802d331 	.word	0x0802d331
 802d2bc:	0802d331 	.word	0x0802d331
 802d2c0:	0802d331 	.word	0x0802d331
 802d2c4:	0802d331 	.word	0x0802d331
 802d2c8:	0802d331 	.word	0x0802d331
 802d2cc:	0802d331 	.word	0x0802d331
 802d2d0:	0802d331 	.word	0x0802d331
 802d2d4:	2b6e      	cmp	r3, #110	; 0x6e
 802d2d6:	d809      	bhi.n	802d2ec <_scanf_float+0x134>
 802d2d8:	2b60      	cmp	r3, #96	; 0x60
 802d2da:	d8b2      	bhi.n	802d242 <_scanf_float+0x8a>
 802d2dc:	2b54      	cmp	r3, #84	; 0x54
 802d2de:	d077      	beq.n	802d3d0 <_scanf_float+0x218>
 802d2e0:	2b59      	cmp	r3, #89	; 0x59
 802d2e2:	d199      	bne.n	802d218 <_scanf_float+0x60>
 802d2e4:	2d07      	cmp	r5, #7
 802d2e6:	d197      	bne.n	802d218 <_scanf_float+0x60>
 802d2e8:	2508      	movs	r5, #8
 802d2ea:	e029      	b.n	802d340 <_scanf_float+0x188>
 802d2ec:	2b74      	cmp	r3, #116	; 0x74
 802d2ee:	d06f      	beq.n	802d3d0 <_scanf_float+0x218>
 802d2f0:	2b79      	cmp	r3, #121	; 0x79
 802d2f2:	e7f6      	b.n	802d2e2 <_scanf_float+0x12a>
 802d2f4:	6821      	ldr	r1, [r4, #0]
 802d2f6:	05c8      	lsls	r0, r1, #23
 802d2f8:	d51a      	bpl.n	802d330 <_scanf_float+0x178>
 802d2fa:	9b02      	ldr	r3, [sp, #8]
 802d2fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 802d300:	6021      	str	r1, [r4, #0]
 802d302:	f109 0901 	add.w	r9, r9, #1
 802d306:	b11b      	cbz	r3, 802d310 <_scanf_float+0x158>
 802d308:	3b01      	subs	r3, #1
 802d30a:	3201      	adds	r2, #1
 802d30c:	9302      	str	r3, [sp, #8]
 802d30e:	60a2      	str	r2, [r4, #8]
 802d310:	68a3      	ldr	r3, [r4, #8]
 802d312:	3b01      	subs	r3, #1
 802d314:	60a3      	str	r3, [r4, #8]
 802d316:	6923      	ldr	r3, [r4, #16]
 802d318:	3301      	adds	r3, #1
 802d31a:	6123      	str	r3, [r4, #16]
 802d31c:	687b      	ldr	r3, [r7, #4]
 802d31e:	3b01      	subs	r3, #1
 802d320:	2b00      	cmp	r3, #0
 802d322:	607b      	str	r3, [r7, #4]
 802d324:	f340 8084 	ble.w	802d430 <_scanf_float+0x278>
 802d328:	683b      	ldr	r3, [r7, #0]
 802d32a:	3301      	adds	r3, #1
 802d32c:	603b      	str	r3, [r7, #0]
 802d32e:	e766      	b.n	802d1fe <_scanf_float+0x46>
 802d330:	eb1a 0f05 	cmn.w	sl, r5
 802d334:	f47f af70 	bne.w	802d218 <_scanf_float+0x60>
 802d338:	6822      	ldr	r2, [r4, #0]
 802d33a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 802d33e:	6022      	str	r2, [r4, #0]
 802d340:	f806 3b01 	strb.w	r3, [r6], #1
 802d344:	e7e4      	b.n	802d310 <_scanf_float+0x158>
 802d346:	6822      	ldr	r2, [r4, #0]
 802d348:	0610      	lsls	r0, r2, #24
 802d34a:	f57f af65 	bpl.w	802d218 <_scanf_float+0x60>
 802d34e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802d352:	e7f4      	b.n	802d33e <_scanf_float+0x186>
 802d354:	f1ba 0f00 	cmp.w	sl, #0
 802d358:	d10e      	bne.n	802d378 <_scanf_float+0x1c0>
 802d35a:	f1b9 0f00 	cmp.w	r9, #0
 802d35e:	d10e      	bne.n	802d37e <_scanf_float+0x1c6>
 802d360:	6822      	ldr	r2, [r4, #0]
 802d362:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d366:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d36a:	d108      	bne.n	802d37e <_scanf_float+0x1c6>
 802d36c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d370:	6022      	str	r2, [r4, #0]
 802d372:	f04f 0a01 	mov.w	sl, #1
 802d376:	e7e3      	b.n	802d340 <_scanf_float+0x188>
 802d378:	f1ba 0f02 	cmp.w	sl, #2
 802d37c:	d055      	beq.n	802d42a <_scanf_float+0x272>
 802d37e:	2d01      	cmp	r5, #1
 802d380:	d002      	beq.n	802d388 <_scanf_float+0x1d0>
 802d382:	2d04      	cmp	r5, #4
 802d384:	f47f af48 	bne.w	802d218 <_scanf_float+0x60>
 802d388:	3501      	adds	r5, #1
 802d38a:	b2ed      	uxtb	r5, r5
 802d38c:	e7d8      	b.n	802d340 <_scanf_float+0x188>
 802d38e:	f1ba 0f01 	cmp.w	sl, #1
 802d392:	f47f af41 	bne.w	802d218 <_scanf_float+0x60>
 802d396:	f04f 0a02 	mov.w	sl, #2
 802d39a:	e7d1      	b.n	802d340 <_scanf_float+0x188>
 802d39c:	b97d      	cbnz	r5, 802d3be <_scanf_float+0x206>
 802d39e:	f1b9 0f00 	cmp.w	r9, #0
 802d3a2:	f47f af3c 	bne.w	802d21e <_scanf_float+0x66>
 802d3a6:	6822      	ldr	r2, [r4, #0]
 802d3a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 802d3ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 802d3b0:	f47f af39 	bne.w	802d226 <_scanf_float+0x6e>
 802d3b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d3b8:	6022      	str	r2, [r4, #0]
 802d3ba:	2501      	movs	r5, #1
 802d3bc:	e7c0      	b.n	802d340 <_scanf_float+0x188>
 802d3be:	2d03      	cmp	r5, #3
 802d3c0:	d0e2      	beq.n	802d388 <_scanf_float+0x1d0>
 802d3c2:	2d05      	cmp	r5, #5
 802d3c4:	e7de      	b.n	802d384 <_scanf_float+0x1cc>
 802d3c6:	2d02      	cmp	r5, #2
 802d3c8:	f47f af26 	bne.w	802d218 <_scanf_float+0x60>
 802d3cc:	2503      	movs	r5, #3
 802d3ce:	e7b7      	b.n	802d340 <_scanf_float+0x188>
 802d3d0:	2d06      	cmp	r5, #6
 802d3d2:	f47f af21 	bne.w	802d218 <_scanf_float+0x60>
 802d3d6:	2507      	movs	r5, #7
 802d3d8:	e7b2      	b.n	802d340 <_scanf_float+0x188>
 802d3da:	6822      	ldr	r2, [r4, #0]
 802d3dc:	0591      	lsls	r1, r2, #22
 802d3de:	f57f af1b 	bpl.w	802d218 <_scanf_float+0x60>
 802d3e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 802d3e6:	6022      	str	r2, [r4, #0]
 802d3e8:	f8cd 9004 	str.w	r9, [sp, #4]
 802d3ec:	e7a8      	b.n	802d340 <_scanf_float+0x188>
 802d3ee:	6822      	ldr	r2, [r4, #0]
 802d3f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 802d3f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 802d3f8:	d006      	beq.n	802d408 <_scanf_float+0x250>
 802d3fa:	0550      	lsls	r0, r2, #21
 802d3fc:	f57f af0c 	bpl.w	802d218 <_scanf_float+0x60>
 802d400:	f1b9 0f00 	cmp.w	r9, #0
 802d404:	f43f af0f 	beq.w	802d226 <_scanf_float+0x6e>
 802d408:	0591      	lsls	r1, r2, #22
 802d40a:	bf58      	it	pl
 802d40c:	9901      	ldrpl	r1, [sp, #4]
 802d40e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 802d412:	bf58      	it	pl
 802d414:	eba9 0101 	subpl.w	r1, r9, r1
 802d418:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 802d41c:	bf58      	it	pl
 802d41e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 802d422:	6022      	str	r2, [r4, #0]
 802d424:	f04f 0900 	mov.w	r9, #0
 802d428:	e78a      	b.n	802d340 <_scanf_float+0x188>
 802d42a:	f04f 0a03 	mov.w	sl, #3
 802d42e:	e787      	b.n	802d340 <_scanf_float+0x188>
 802d430:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802d434:	4639      	mov	r1, r7
 802d436:	4640      	mov	r0, r8
 802d438:	4798      	blx	r3
 802d43a:	2800      	cmp	r0, #0
 802d43c:	f43f aedf 	beq.w	802d1fe <_scanf_float+0x46>
 802d440:	e6ea      	b.n	802d218 <_scanf_float+0x60>
 802d442:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d446:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d44a:	463a      	mov	r2, r7
 802d44c:	4640      	mov	r0, r8
 802d44e:	4798      	blx	r3
 802d450:	6923      	ldr	r3, [r4, #16]
 802d452:	3b01      	subs	r3, #1
 802d454:	6123      	str	r3, [r4, #16]
 802d456:	e6ec      	b.n	802d232 <_scanf_float+0x7a>
 802d458:	1e6b      	subs	r3, r5, #1
 802d45a:	2b06      	cmp	r3, #6
 802d45c:	d825      	bhi.n	802d4aa <_scanf_float+0x2f2>
 802d45e:	2d02      	cmp	r5, #2
 802d460:	d836      	bhi.n	802d4d0 <_scanf_float+0x318>
 802d462:	455e      	cmp	r6, fp
 802d464:	f67f aee8 	bls.w	802d238 <_scanf_float+0x80>
 802d468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d46c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d470:	463a      	mov	r2, r7
 802d472:	4640      	mov	r0, r8
 802d474:	4798      	blx	r3
 802d476:	6923      	ldr	r3, [r4, #16]
 802d478:	3b01      	subs	r3, #1
 802d47a:	6123      	str	r3, [r4, #16]
 802d47c:	e7f1      	b.n	802d462 <_scanf_float+0x2aa>
 802d47e:	9802      	ldr	r0, [sp, #8]
 802d480:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d484:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 802d488:	9002      	str	r0, [sp, #8]
 802d48a:	463a      	mov	r2, r7
 802d48c:	4640      	mov	r0, r8
 802d48e:	4798      	blx	r3
 802d490:	6923      	ldr	r3, [r4, #16]
 802d492:	3b01      	subs	r3, #1
 802d494:	6123      	str	r3, [r4, #16]
 802d496:	f10a 3aff 	add.w	sl, sl, #4294967295
 802d49a:	fa5f fa8a 	uxtb.w	sl, sl
 802d49e:	f1ba 0f02 	cmp.w	sl, #2
 802d4a2:	d1ec      	bne.n	802d47e <_scanf_float+0x2c6>
 802d4a4:	3d03      	subs	r5, #3
 802d4a6:	b2ed      	uxtb	r5, r5
 802d4a8:	1b76      	subs	r6, r6, r5
 802d4aa:	6823      	ldr	r3, [r4, #0]
 802d4ac:	05da      	lsls	r2, r3, #23
 802d4ae:	d52f      	bpl.n	802d510 <_scanf_float+0x358>
 802d4b0:	055b      	lsls	r3, r3, #21
 802d4b2:	d510      	bpl.n	802d4d6 <_scanf_float+0x31e>
 802d4b4:	455e      	cmp	r6, fp
 802d4b6:	f67f aebf 	bls.w	802d238 <_scanf_float+0x80>
 802d4ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d4be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 802d4c2:	463a      	mov	r2, r7
 802d4c4:	4640      	mov	r0, r8
 802d4c6:	4798      	blx	r3
 802d4c8:	6923      	ldr	r3, [r4, #16]
 802d4ca:	3b01      	subs	r3, #1
 802d4cc:	6123      	str	r3, [r4, #16]
 802d4ce:	e7f1      	b.n	802d4b4 <_scanf_float+0x2fc>
 802d4d0:	46aa      	mov	sl, r5
 802d4d2:	9602      	str	r6, [sp, #8]
 802d4d4:	e7df      	b.n	802d496 <_scanf_float+0x2de>
 802d4d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 802d4da:	6923      	ldr	r3, [r4, #16]
 802d4dc:	2965      	cmp	r1, #101	; 0x65
 802d4de:	f103 33ff 	add.w	r3, r3, #4294967295
 802d4e2:	f106 35ff 	add.w	r5, r6, #4294967295
 802d4e6:	6123      	str	r3, [r4, #16]
 802d4e8:	d00c      	beq.n	802d504 <_scanf_float+0x34c>
 802d4ea:	2945      	cmp	r1, #69	; 0x45
 802d4ec:	d00a      	beq.n	802d504 <_scanf_float+0x34c>
 802d4ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d4f2:	463a      	mov	r2, r7
 802d4f4:	4640      	mov	r0, r8
 802d4f6:	4798      	blx	r3
 802d4f8:	6923      	ldr	r3, [r4, #16]
 802d4fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 802d4fe:	3b01      	subs	r3, #1
 802d500:	1eb5      	subs	r5, r6, #2
 802d502:	6123      	str	r3, [r4, #16]
 802d504:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802d508:	463a      	mov	r2, r7
 802d50a:	4640      	mov	r0, r8
 802d50c:	4798      	blx	r3
 802d50e:	462e      	mov	r6, r5
 802d510:	6825      	ldr	r5, [r4, #0]
 802d512:	f015 0510 	ands.w	r5, r5, #16
 802d516:	d158      	bne.n	802d5ca <_scanf_float+0x412>
 802d518:	7035      	strb	r5, [r6, #0]
 802d51a:	6823      	ldr	r3, [r4, #0]
 802d51c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 802d520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 802d524:	d11c      	bne.n	802d560 <_scanf_float+0x3a8>
 802d526:	9b01      	ldr	r3, [sp, #4]
 802d528:	454b      	cmp	r3, r9
 802d52a:	eba3 0209 	sub.w	r2, r3, r9
 802d52e:	d124      	bne.n	802d57a <_scanf_float+0x3c2>
 802d530:	2200      	movs	r2, #0
 802d532:	4659      	mov	r1, fp
 802d534:	4640      	mov	r0, r8
 802d536:	f002 fe2b 	bl	8030190 <_strtod_r>
 802d53a:	9b03      	ldr	r3, [sp, #12]
 802d53c:	6821      	ldr	r1, [r4, #0]
 802d53e:	681b      	ldr	r3, [r3, #0]
 802d540:	f011 0f02 	tst.w	r1, #2
 802d544:	ec57 6b10 	vmov	r6, r7, d0
 802d548:	f103 0204 	add.w	r2, r3, #4
 802d54c:	d020      	beq.n	802d590 <_scanf_float+0x3d8>
 802d54e:	9903      	ldr	r1, [sp, #12]
 802d550:	600a      	str	r2, [r1, #0]
 802d552:	681b      	ldr	r3, [r3, #0]
 802d554:	e9c3 6700 	strd	r6, r7, [r3]
 802d558:	68e3      	ldr	r3, [r4, #12]
 802d55a:	3301      	adds	r3, #1
 802d55c:	60e3      	str	r3, [r4, #12]
 802d55e:	e66c      	b.n	802d23a <_scanf_float+0x82>
 802d560:	9b04      	ldr	r3, [sp, #16]
 802d562:	2b00      	cmp	r3, #0
 802d564:	d0e4      	beq.n	802d530 <_scanf_float+0x378>
 802d566:	9905      	ldr	r1, [sp, #20]
 802d568:	230a      	movs	r3, #10
 802d56a:	462a      	mov	r2, r5
 802d56c:	3101      	adds	r1, #1
 802d56e:	4640      	mov	r0, r8
 802d570:	f002 fe96 	bl	80302a0 <_strtol_r>
 802d574:	9b04      	ldr	r3, [sp, #16]
 802d576:	9e05      	ldr	r6, [sp, #20]
 802d578:	1ac2      	subs	r2, r0, r3
 802d57a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 802d57e:	429e      	cmp	r6, r3
 802d580:	bf28      	it	cs
 802d582:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 802d586:	4912      	ldr	r1, [pc, #72]	; (802d5d0 <_scanf_float+0x418>)
 802d588:	4630      	mov	r0, r6
 802d58a:	f000 f93f 	bl	802d80c <siprintf>
 802d58e:	e7cf      	b.n	802d530 <_scanf_float+0x378>
 802d590:	f011 0f04 	tst.w	r1, #4
 802d594:	9903      	ldr	r1, [sp, #12]
 802d596:	600a      	str	r2, [r1, #0]
 802d598:	d1db      	bne.n	802d552 <_scanf_float+0x39a>
 802d59a:	f8d3 8000 	ldr.w	r8, [r3]
 802d59e:	ee10 2a10 	vmov	r2, s0
 802d5a2:	ee10 0a10 	vmov	r0, s0
 802d5a6:	463b      	mov	r3, r7
 802d5a8:	4639      	mov	r1, r7
 802d5aa:	f7e3 fad7 	bl	8010b5c <__aeabi_dcmpun>
 802d5ae:	b128      	cbz	r0, 802d5bc <_scanf_float+0x404>
 802d5b0:	4808      	ldr	r0, [pc, #32]	; (802d5d4 <_scanf_float+0x41c>)
 802d5b2:	f000 fc5f 	bl	802de74 <nanf>
 802d5b6:	ed88 0a00 	vstr	s0, [r8]
 802d5ba:	e7cd      	b.n	802d558 <_scanf_float+0x3a0>
 802d5bc:	4630      	mov	r0, r6
 802d5be:	4639      	mov	r1, r7
 802d5c0:	f7e3 fb2a 	bl	8010c18 <__aeabi_d2f>
 802d5c4:	f8c8 0000 	str.w	r0, [r8]
 802d5c8:	e7c6      	b.n	802d558 <_scanf_float+0x3a0>
 802d5ca:	2500      	movs	r5, #0
 802d5cc:	e635      	b.n	802d23a <_scanf_float+0x82>
 802d5ce:	bf00      	nop
 802d5d0:	08034d66 	.word	0x08034d66
 802d5d4:	08034d33 	.word	0x08034d33

0802d5d8 <std>:
 802d5d8:	2300      	movs	r3, #0
 802d5da:	b510      	push	{r4, lr}
 802d5dc:	4604      	mov	r4, r0
 802d5de:	e9c0 3300 	strd	r3, r3, [r0]
 802d5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802d5e6:	6083      	str	r3, [r0, #8]
 802d5e8:	8181      	strh	r1, [r0, #12]
 802d5ea:	6643      	str	r3, [r0, #100]	; 0x64
 802d5ec:	81c2      	strh	r2, [r0, #14]
 802d5ee:	6183      	str	r3, [r0, #24]
 802d5f0:	4619      	mov	r1, r3
 802d5f2:	2208      	movs	r2, #8
 802d5f4:	305c      	adds	r0, #92	; 0x5c
 802d5f6:	f000 fa59 	bl	802daac <memset>
 802d5fa:	4b0d      	ldr	r3, [pc, #52]	; (802d630 <std+0x58>)
 802d5fc:	6263      	str	r3, [r4, #36]	; 0x24
 802d5fe:	4b0d      	ldr	r3, [pc, #52]	; (802d634 <std+0x5c>)
 802d600:	62a3      	str	r3, [r4, #40]	; 0x28
 802d602:	4b0d      	ldr	r3, [pc, #52]	; (802d638 <std+0x60>)
 802d604:	62e3      	str	r3, [r4, #44]	; 0x2c
 802d606:	4b0d      	ldr	r3, [pc, #52]	; (802d63c <std+0x64>)
 802d608:	6323      	str	r3, [r4, #48]	; 0x30
 802d60a:	4b0d      	ldr	r3, [pc, #52]	; (802d640 <std+0x68>)
 802d60c:	6224      	str	r4, [r4, #32]
 802d60e:	429c      	cmp	r4, r3
 802d610:	d006      	beq.n	802d620 <std+0x48>
 802d612:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802d616:	4294      	cmp	r4, r2
 802d618:	d002      	beq.n	802d620 <std+0x48>
 802d61a:	33d0      	adds	r3, #208	; 0xd0
 802d61c:	429c      	cmp	r4, r3
 802d61e:	d105      	bne.n	802d62c <std+0x54>
 802d620:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802d624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d628:	f000 bc0a 	b.w	802de40 <__retarget_lock_init_recursive>
 802d62c:	bd10      	pop	{r4, pc}
 802d62e:	bf00      	nop
 802d630:	0802d8a5 	.word	0x0802d8a5
 802d634:	0802d8cb 	.word	0x0802d8cb
 802d638:	0802d903 	.word	0x0802d903
 802d63c:	0802d927 	.word	0x0802d927
 802d640:	2000d9d0 	.word	0x2000d9d0

0802d644 <stdio_exit_handler>:
 802d644:	4a02      	ldr	r2, [pc, #8]	; (802d650 <stdio_exit_handler+0xc>)
 802d646:	4903      	ldr	r1, [pc, #12]	; (802d654 <stdio_exit_handler+0x10>)
 802d648:	4803      	ldr	r0, [pc, #12]	; (802d658 <stdio_exit_handler+0x14>)
 802d64a:	f000 b87b 	b.w	802d744 <_fwalk_sglue>
 802d64e:	bf00      	nop
 802d650:	20000130 	.word	0x20000130
 802d654:	08030f29 	.word	0x08030f29
 802d658:	2000013c 	.word	0x2000013c

0802d65c <cleanup_stdio>:
 802d65c:	6841      	ldr	r1, [r0, #4]
 802d65e:	4b0c      	ldr	r3, [pc, #48]	; (802d690 <cleanup_stdio+0x34>)
 802d660:	4299      	cmp	r1, r3
 802d662:	b510      	push	{r4, lr}
 802d664:	4604      	mov	r4, r0
 802d666:	d001      	beq.n	802d66c <cleanup_stdio+0x10>
 802d668:	f003 fc5e 	bl	8030f28 <_fflush_r>
 802d66c:	68a1      	ldr	r1, [r4, #8]
 802d66e:	4b09      	ldr	r3, [pc, #36]	; (802d694 <cleanup_stdio+0x38>)
 802d670:	4299      	cmp	r1, r3
 802d672:	d002      	beq.n	802d67a <cleanup_stdio+0x1e>
 802d674:	4620      	mov	r0, r4
 802d676:	f003 fc57 	bl	8030f28 <_fflush_r>
 802d67a:	68e1      	ldr	r1, [r4, #12]
 802d67c:	4b06      	ldr	r3, [pc, #24]	; (802d698 <cleanup_stdio+0x3c>)
 802d67e:	4299      	cmp	r1, r3
 802d680:	d004      	beq.n	802d68c <cleanup_stdio+0x30>
 802d682:	4620      	mov	r0, r4
 802d684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d688:	f003 bc4e 	b.w	8030f28 <_fflush_r>
 802d68c:	bd10      	pop	{r4, pc}
 802d68e:	bf00      	nop
 802d690:	2000d9d0 	.word	0x2000d9d0
 802d694:	2000da38 	.word	0x2000da38
 802d698:	2000daa0 	.word	0x2000daa0

0802d69c <global_stdio_init.part.0>:
 802d69c:	b510      	push	{r4, lr}
 802d69e:	4b0b      	ldr	r3, [pc, #44]	; (802d6cc <global_stdio_init.part.0+0x30>)
 802d6a0:	4c0b      	ldr	r4, [pc, #44]	; (802d6d0 <global_stdio_init.part.0+0x34>)
 802d6a2:	4a0c      	ldr	r2, [pc, #48]	; (802d6d4 <global_stdio_init.part.0+0x38>)
 802d6a4:	601a      	str	r2, [r3, #0]
 802d6a6:	4620      	mov	r0, r4
 802d6a8:	2200      	movs	r2, #0
 802d6aa:	2104      	movs	r1, #4
 802d6ac:	f7ff ff94 	bl	802d5d8 <std>
 802d6b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 802d6b4:	2201      	movs	r2, #1
 802d6b6:	2109      	movs	r1, #9
 802d6b8:	f7ff ff8e 	bl	802d5d8 <std>
 802d6bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802d6c0:	2202      	movs	r2, #2
 802d6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d6c6:	2112      	movs	r1, #18
 802d6c8:	f7ff bf86 	b.w	802d5d8 <std>
 802d6cc:	2000db08 	.word	0x2000db08
 802d6d0:	2000d9d0 	.word	0x2000d9d0
 802d6d4:	0802d645 	.word	0x0802d645

0802d6d8 <__sfp_lock_acquire>:
 802d6d8:	4801      	ldr	r0, [pc, #4]	; (802d6e0 <__sfp_lock_acquire+0x8>)
 802d6da:	f000 bbb2 	b.w	802de42 <__retarget_lock_acquire_recursive>
 802d6de:	bf00      	nop
 802d6e0:	2000db11 	.word	0x2000db11

0802d6e4 <__sfp_lock_release>:
 802d6e4:	4801      	ldr	r0, [pc, #4]	; (802d6ec <__sfp_lock_release+0x8>)
 802d6e6:	f000 bbad 	b.w	802de44 <__retarget_lock_release_recursive>
 802d6ea:	bf00      	nop
 802d6ec:	2000db11 	.word	0x2000db11

0802d6f0 <__sinit>:
 802d6f0:	b510      	push	{r4, lr}
 802d6f2:	4604      	mov	r4, r0
 802d6f4:	f7ff fff0 	bl	802d6d8 <__sfp_lock_acquire>
 802d6f8:	6a23      	ldr	r3, [r4, #32]
 802d6fa:	b11b      	cbz	r3, 802d704 <__sinit+0x14>
 802d6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d700:	f7ff bff0 	b.w	802d6e4 <__sfp_lock_release>
 802d704:	4b04      	ldr	r3, [pc, #16]	; (802d718 <__sinit+0x28>)
 802d706:	6223      	str	r3, [r4, #32]
 802d708:	4b04      	ldr	r3, [pc, #16]	; (802d71c <__sinit+0x2c>)
 802d70a:	681b      	ldr	r3, [r3, #0]
 802d70c:	2b00      	cmp	r3, #0
 802d70e:	d1f5      	bne.n	802d6fc <__sinit+0xc>
 802d710:	f7ff ffc4 	bl	802d69c <global_stdio_init.part.0>
 802d714:	e7f2      	b.n	802d6fc <__sinit+0xc>
 802d716:	bf00      	nop
 802d718:	0802d65d 	.word	0x0802d65d
 802d71c:	2000db08 	.word	0x2000db08

0802d720 <fiprintf>:
 802d720:	b40e      	push	{r1, r2, r3}
 802d722:	b503      	push	{r0, r1, lr}
 802d724:	4601      	mov	r1, r0
 802d726:	ab03      	add	r3, sp, #12
 802d728:	4805      	ldr	r0, [pc, #20]	; (802d740 <fiprintf+0x20>)
 802d72a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d72e:	6800      	ldr	r0, [r0, #0]
 802d730:	9301      	str	r3, [sp, #4]
 802d732:	f003 f90b 	bl	803094c <_vfiprintf_r>
 802d736:	b002      	add	sp, #8
 802d738:	f85d eb04 	ldr.w	lr, [sp], #4
 802d73c:	b003      	add	sp, #12
 802d73e:	4770      	bx	lr
 802d740:	20000188 	.word	0x20000188

0802d744 <_fwalk_sglue>:
 802d744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802d748:	4607      	mov	r7, r0
 802d74a:	4688      	mov	r8, r1
 802d74c:	4614      	mov	r4, r2
 802d74e:	2600      	movs	r6, #0
 802d750:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802d754:	f1b9 0901 	subs.w	r9, r9, #1
 802d758:	d505      	bpl.n	802d766 <_fwalk_sglue+0x22>
 802d75a:	6824      	ldr	r4, [r4, #0]
 802d75c:	2c00      	cmp	r4, #0
 802d75e:	d1f7      	bne.n	802d750 <_fwalk_sglue+0xc>
 802d760:	4630      	mov	r0, r6
 802d762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802d766:	89ab      	ldrh	r3, [r5, #12]
 802d768:	2b01      	cmp	r3, #1
 802d76a:	d907      	bls.n	802d77c <_fwalk_sglue+0x38>
 802d76c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802d770:	3301      	adds	r3, #1
 802d772:	d003      	beq.n	802d77c <_fwalk_sglue+0x38>
 802d774:	4629      	mov	r1, r5
 802d776:	4638      	mov	r0, r7
 802d778:	47c0      	blx	r8
 802d77a:	4306      	orrs	r6, r0
 802d77c:	3568      	adds	r5, #104	; 0x68
 802d77e:	e7e9      	b.n	802d754 <_fwalk_sglue+0x10>

0802d780 <iprintf>:
 802d780:	b40f      	push	{r0, r1, r2, r3}
 802d782:	b507      	push	{r0, r1, r2, lr}
 802d784:	4906      	ldr	r1, [pc, #24]	; (802d7a0 <iprintf+0x20>)
 802d786:	ab04      	add	r3, sp, #16
 802d788:	6808      	ldr	r0, [r1, #0]
 802d78a:	f853 2b04 	ldr.w	r2, [r3], #4
 802d78e:	6881      	ldr	r1, [r0, #8]
 802d790:	9301      	str	r3, [sp, #4]
 802d792:	f003 f8db 	bl	803094c <_vfiprintf_r>
 802d796:	b003      	add	sp, #12
 802d798:	f85d eb04 	ldr.w	lr, [sp], #4
 802d79c:	b004      	add	sp, #16
 802d79e:	4770      	bx	lr
 802d7a0:	20000188 	.word	0x20000188

0802d7a4 <sniprintf>:
 802d7a4:	b40c      	push	{r2, r3}
 802d7a6:	b530      	push	{r4, r5, lr}
 802d7a8:	4b17      	ldr	r3, [pc, #92]	; (802d808 <sniprintf+0x64>)
 802d7aa:	1e0c      	subs	r4, r1, #0
 802d7ac:	681d      	ldr	r5, [r3, #0]
 802d7ae:	b09d      	sub	sp, #116	; 0x74
 802d7b0:	da08      	bge.n	802d7c4 <sniprintf+0x20>
 802d7b2:	238b      	movs	r3, #139	; 0x8b
 802d7b4:	602b      	str	r3, [r5, #0]
 802d7b6:	f04f 30ff 	mov.w	r0, #4294967295
 802d7ba:	b01d      	add	sp, #116	; 0x74
 802d7bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802d7c0:	b002      	add	sp, #8
 802d7c2:	4770      	bx	lr
 802d7c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 802d7c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 802d7cc:	bf14      	ite	ne
 802d7ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 802d7d2:	4623      	moveq	r3, r4
 802d7d4:	9304      	str	r3, [sp, #16]
 802d7d6:	9307      	str	r3, [sp, #28]
 802d7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d7dc:	9002      	str	r0, [sp, #8]
 802d7de:	9006      	str	r0, [sp, #24]
 802d7e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 802d7e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802d7e6:	ab21      	add	r3, sp, #132	; 0x84
 802d7e8:	a902      	add	r1, sp, #8
 802d7ea:	4628      	mov	r0, r5
 802d7ec:	9301      	str	r3, [sp, #4]
 802d7ee:	f002 fdb3 	bl	8030358 <_svfiprintf_r>
 802d7f2:	1c43      	adds	r3, r0, #1
 802d7f4:	bfbc      	itt	lt
 802d7f6:	238b      	movlt	r3, #139	; 0x8b
 802d7f8:	602b      	strlt	r3, [r5, #0]
 802d7fa:	2c00      	cmp	r4, #0
 802d7fc:	d0dd      	beq.n	802d7ba <sniprintf+0x16>
 802d7fe:	9b02      	ldr	r3, [sp, #8]
 802d800:	2200      	movs	r2, #0
 802d802:	701a      	strb	r2, [r3, #0]
 802d804:	e7d9      	b.n	802d7ba <sniprintf+0x16>
 802d806:	bf00      	nop
 802d808:	20000188 	.word	0x20000188

0802d80c <siprintf>:
 802d80c:	b40e      	push	{r1, r2, r3}
 802d80e:	b500      	push	{lr}
 802d810:	b09c      	sub	sp, #112	; 0x70
 802d812:	ab1d      	add	r3, sp, #116	; 0x74
 802d814:	9002      	str	r0, [sp, #8]
 802d816:	9006      	str	r0, [sp, #24]
 802d818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802d81c:	4809      	ldr	r0, [pc, #36]	; (802d844 <siprintf+0x38>)
 802d81e:	9107      	str	r1, [sp, #28]
 802d820:	9104      	str	r1, [sp, #16]
 802d822:	4909      	ldr	r1, [pc, #36]	; (802d848 <siprintf+0x3c>)
 802d824:	f853 2b04 	ldr.w	r2, [r3], #4
 802d828:	9105      	str	r1, [sp, #20]
 802d82a:	6800      	ldr	r0, [r0, #0]
 802d82c:	9301      	str	r3, [sp, #4]
 802d82e:	a902      	add	r1, sp, #8
 802d830:	f002 fd92 	bl	8030358 <_svfiprintf_r>
 802d834:	9b02      	ldr	r3, [sp, #8]
 802d836:	2200      	movs	r2, #0
 802d838:	701a      	strb	r2, [r3, #0]
 802d83a:	b01c      	add	sp, #112	; 0x70
 802d83c:	f85d eb04 	ldr.w	lr, [sp], #4
 802d840:	b003      	add	sp, #12
 802d842:	4770      	bx	lr
 802d844:	20000188 	.word	0x20000188
 802d848:	ffff0208 	.word	0xffff0208

0802d84c <siscanf>:
 802d84c:	b40e      	push	{r1, r2, r3}
 802d84e:	b510      	push	{r4, lr}
 802d850:	b09f      	sub	sp, #124	; 0x7c
 802d852:	ac21      	add	r4, sp, #132	; 0x84
 802d854:	f44f 7101 	mov.w	r1, #516	; 0x204
 802d858:	f854 2b04 	ldr.w	r2, [r4], #4
 802d85c:	9201      	str	r2, [sp, #4]
 802d85e:	f8ad 101c 	strh.w	r1, [sp, #28]
 802d862:	9004      	str	r0, [sp, #16]
 802d864:	9008      	str	r0, [sp, #32]
 802d866:	f7e2 fd1b 	bl	80102a0 <strlen>
 802d86a:	4b0c      	ldr	r3, [pc, #48]	; (802d89c <siscanf+0x50>)
 802d86c:	9005      	str	r0, [sp, #20]
 802d86e:	9009      	str	r0, [sp, #36]	; 0x24
 802d870:	930d      	str	r3, [sp, #52]	; 0x34
 802d872:	480b      	ldr	r0, [pc, #44]	; (802d8a0 <siscanf+0x54>)
 802d874:	9a01      	ldr	r2, [sp, #4]
 802d876:	6800      	ldr	r0, [r0, #0]
 802d878:	9403      	str	r4, [sp, #12]
 802d87a:	2300      	movs	r3, #0
 802d87c:	9311      	str	r3, [sp, #68]	; 0x44
 802d87e:	9316      	str	r3, [sp, #88]	; 0x58
 802d880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802d884:	f8ad 301e 	strh.w	r3, [sp, #30]
 802d888:	a904      	add	r1, sp, #16
 802d88a:	4623      	mov	r3, r4
 802d88c:	f002 febc 	bl	8030608 <__ssvfiscanf_r>
 802d890:	b01f      	add	sp, #124	; 0x7c
 802d892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802d896:	b003      	add	sp, #12
 802d898:	4770      	bx	lr
 802d89a:	bf00      	nop
 802d89c:	0802d8c7 	.word	0x0802d8c7
 802d8a0:	20000188 	.word	0x20000188

0802d8a4 <__sread>:
 802d8a4:	b510      	push	{r4, lr}
 802d8a6:	460c      	mov	r4, r1
 802d8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d8ac:	f000 fa6a 	bl	802dd84 <_read_r>
 802d8b0:	2800      	cmp	r0, #0
 802d8b2:	bfab      	itete	ge
 802d8b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802d8b6:	89a3      	ldrhlt	r3, [r4, #12]
 802d8b8:	181b      	addge	r3, r3, r0
 802d8ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802d8be:	bfac      	ite	ge
 802d8c0:	6563      	strge	r3, [r4, #84]	; 0x54
 802d8c2:	81a3      	strhlt	r3, [r4, #12]
 802d8c4:	bd10      	pop	{r4, pc}

0802d8c6 <__seofread>:
 802d8c6:	2000      	movs	r0, #0
 802d8c8:	4770      	bx	lr

0802d8ca <__swrite>:
 802d8ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802d8ce:	461f      	mov	r7, r3
 802d8d0:	898b      	ldrh	r3, [r1, #12]
 802d8d2:	05db      	lsls	r3, r3, #23
 802d8d4:	4605      	mov	r5, r0
 802d8d6:	460c      	mov	r4, r1
 802d8d8:	4616      	mov	r6, r2
 802d8da:	d505      	bpl.n	802d8e8 <__swrite+0x1e>
 802d8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d8e0:	2302      	movs	r3, #2
 802d8e2:	2200      	movs	r2, #0
 802d8e4:	f000 fa3c 	bl	802dd60 <_lseek_r>
 802d8e8:	89a3      	ldrh	r3, [r4, #12]
 802d8ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802d8ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802d8f2:	81a3      	strh	r3, [r4, #12]
 802d8f4:	4632      	mov	r2, r6
 802d8f6:	463b      	mov	r3, r7
 802d8f8:	4628      	mov	r0, r5
 802d8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802d8fe:	f000 ba63 	b.w	802ddc8 <_write_r>

0802d902 <__sseek>:
 802d902:	b510      	push	{r4, lr}
 802d904:	460c      	mov	r4, r1
 802d906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d90a:	f000 fa29 	bl	802dd60 <_lseek_r>
 802d90e:	1c43      	adds	r3, r0, #1
 802d910:	89a3      	ldrh	r3, [r4, #12]
 802d912:	bf15      	itete	ne
 802d914:	6560      	strne	r0, [r4, #84]	; 0x54
 802d916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802d91a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802d91e:	81a3      	strheq	r3, [r4, #12]
 802d920:	bf18      	it	ne
 802d922:	81a3      	strhne	r3, [r4, #12]
 802d924:	bd10      	pop	{r4, pc}

0802d926 <__sclose>:
 802d926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802d92a:	f000 b9b3 	b.w	802dc94 <_close_r>

0802d92e <__swbuf_r>:
 802d92e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d930:	460e      	mov	r6, r1
 802d932:	4614      	mov	r4, r2
 802d934:	4605      	mov	r5, r0
 802d936:	b118      	cbz	r0, 802d940 <__swbuf_r+0x12>
 802d938:	6a03      	ldr	r3, [r0, #32]
 802d93a:	b90b      	cbnz	r3, 802d940 <__swbuf_r+0x12>
 802d93c:	f7ff fed8 	bl	802d6f0 <__sinit>
 802d940:	69a3      	ldr	r3, [r4, #24]
 802d942:	60a3      	str	r3, [r4, #8]
 802d944:	89a3      	ldrh	r3, [r4, #12]
 802d946:	071a      	lsls	r2, r3, #28
 802d948:	d525      	bpl.n	802d996 <__swbuf_r+0x68>
 802d94a:	6923      	ldr	r3, [r4, #16]
 802d94c:	b31b      	cbz	r3, 802d996 <__swbuf_r+0x68>
 802d94e:	6823      	ldr	r3, [r4, #0]
 802d950:	6922      	ldr	r2, [r4, #16]
 802d952:	1a98      	subs	r0, r3, r2
 802d954:	6963      	ldr	r3, [r4, #20]
 802d956:	b2f6      	uxtb	r6, r6
 802d958:	4283      	cmp	r3, r0
 802d95a:	4637      	mov	r7, r6
 802d95c:	dc04      	bgt.n	802d968 <__swbuf_r+0x3a>
 802d95e:	4621      	mov	r1, r4
 802d960:	4628      	mov	r0, r5
 802d962:	f003 fae1 	bl	8030f28 <_fflush_r>
 802d966:	b9e0      	cbnz	r0, 802d9a2 <__swbuf_r+0x74>
 802d968:	68a3      	ldr	r3, [r4, #8]
 802d96a:	3b01      	subs	r3, #1
 802d96c:	60a3      	str	r3, [r4, #8]
 802d96e:	6823      	ldr	r3, [r4, #0]
 802d970:	1c5a      	adds	r2, r3, #1
 802d972:	6022      	str	r2, [r4, #0]
 802d974:	701e      	strb	r6, [r3, #0]
 802d976:	6962      	ldr	r2, [r4, #20]
 802d978:	1c43      	adds	r3, r0, #1
 802d97a:	429a      	cmp	r2, r3
 802d97c:	d004      	beq.n	802d988 <__swbuf_r+0x5a>
 802d97e:	89a3      	ldrh	r3, [r4, #12]
 802d980:	07db      	lsls	r3, r3, #31
 802d982:	d506      	bpl.n	802d992 <__swbuf_r+0x64>
 802d984:	2e0a      	cmp	r6, #10
 802d986:	d104      	bne.n	802d992 <__swbuf_r+0x64>
 802d988:	4621      	mov	r1, r4
 802d98a:	4628      	mov	r0, r5
 802d98c:	f003 facc 	bl	8030f28 <_fflush_r>
 802d990:	b938      	cbnz	r0, 802d9a2 <__swbuf_r+0x74>
 802d992:	4638      	mov	r0, r7
 802d994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d996:	4621      	mov	r1, r4
 802d998:	4628      	mov	r0, r5
 802d99a:	f000 f805 	bl	802d9a8 <__swsetup_r>
 802d99e:	2800      	cmp	r0, #0
 802d9a0:	d0d5      	beq.n	802d94e <__swbuf_r+0x20>
 802d9a2:	f04f 37ff 	mov.w	r7, #4294967295
 802d9a6:	e7f4      	b.n	802d992 <__swbuf_r+0x64>

0802d9a8 <__swsetup_r>:
 802d9a8:	b538      	push	{r3, r4, r5, lr}
 802d9aa:	4b2a      	ldr	r3, [pc, #168]	; (802da54 <__swsetup_r+0xac>)
 802d9ac:	4605      	mov	r5, r0
 802d9ae:	6818      	ldr	r0, [r3, #0]
 802d9b0:	460c      	mov	r4, r1
 802d9b2:	b118      	cbz	r0, 802d9bc <__swsetup_r+0x14>
 802d9b4:	6a03      	ldr	r3, [r0, #32]
 802d9b6:	b90b      	cbnz	r3, 802d9bc <__swsetup_r+0x14>
 802d9b8:	f7ff fe9a 	bl	802d6f0 <__sinit>
 802d9bc:	89a3      	ldrh	r3, [r4, #12]
 802d9be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802d9c2:	0718      	lsls	r0, r3, #28
 802d9c4:	d422      	bmi.n	802da0c <__swsetup_r+0x64>
 802d9c6:	06d9      	lsls	r1, r3, #27
 802d9c8:	d407      	bmi.n	802d9da <__swsetup_r+0x32>
 802d9ca:	2309      	movs	r3, #9
 802d9cc:	602b      	str	r3, [r5, #0]
 802d9ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802d9d2:	81a3      	strh	r3, [r4, #12]
 802d9d4:	f04f 30ff 	mov.w	r0, #4294967295
 802d9d8:	e034      	b.n	802da44 <__swsetup_r+0x9c>
 802d9da:	0758      	lsls	r0, r3, #29
 802d9dc:	d512      	bpl.n	802da04 <__swsetup_r+0x5c>
 802d9de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802d9e0:	b141      	cbz	r1, 802d9f4 <__swsetup_r+0x4c>
 802d9e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802d9e6:	4299      	cmp	r1, r3
 802d9e8:	d002      	beq.n	802d9f0 <__swsetup_r+0x48>
 802d9ea:	4628      	mov	r0, r5
 802d9ec:	f001 f8ca 	bl	802eb84 <_free_r>
 802d9f0:	2300      	movs	r3, #0
 802d9f2:	6363      	str	r3, [r4, #52]	; 0x34
 802d9f4:	89a3      	ldrh	r3, [r4, #12]
 802d9f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802d9fa:	81a3      	strh	r3, [r4, #12]
 802d9fc:	2300      	movs	r3, #0
 802d9fe:	6063      	str	r3, [r4, #4]
 802da00:	6923      	ldr	r3, [r4, #16]
 802da02:	6023      	str	r3, [r4, #0]
 802da04:	89a3      	ldrh	r3, [r4, #12]
 802da06:	f043 0308 	orr.w	r3, r3, #8
 802da0a:	81a3      	strh	r3, [r4, #12]
 802da0c:	6923      	ldr	r3, [r4, #16]
 802da0e:	b94b      	cbnz	r3, 802da24 <__swsetup_r+0x7c>
 802da10:	89a3      	ldrh	r3, [r4, #12]
 802da12:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802da16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802da1a:	d003      	beq.n	802da24 <__swsetup_r+0x7c>
 802da1c:	4621      	mov	r1, r4
 802da1e:	4628      	mov	r0, r5
 802da20:	f003 fad0 	bl	8030fc4 <__smakebuf_r>
 802da24:	89a0      	ldrh	r0, [r4, #12]
 802da26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802da2a:	f010 0301 	ands.w	r3, r0, #1
 802da2e:	d00a      	beq.n	802da46 <__swsetup_r+0x9e>
 802da30:	2300      	movs	r3, #0
 802da32:	60a3      	str	r3, [r4, #8]
 802da34:	6963      	ldr	r3, [r4, #20]
 802da36:	425b      	negs	r3, r3
 802da38:	61a3      	str	r3, [r4, #24]
 802da3a:	6923      	ldr	r3, [r4, #16]
 802da3c:	b943      	cbnz	r3, 802da50 <__swsetup_r+0xa8>
 802da3e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802da42:	d1c4      	bne.n	802d9ce <__swsetup_r+0x26>
 802da44:	bd38      	pop	{r3, r4, r5, pc}
 802da46:	0781      	lsls	r1, r0, #30
 802da48:	bf58      	it	pl
 802da4a:	6963      	ldrpl	r3, [r4, #20]
 802da4c:	60a3      	str	r3, [r4, #8]
 802da4e:	e7f4      	b.n	802da3a <__swsetup_r+0x92>
 802da50:	2000      	movs	r0, #0
 802da52:	e7f7      	b.n	802da44 <__swsetup_r+0x9c>
 802da54:	20000188 	.word	0x20000188

0802da58 <memcmp>:
 802da58:	b510      	push	{r4, lr}
 802da5a:	3901      	subs	r1, #1
 802da5c:	4402      	add	r2, r0
 802da5e:	4290      	cmp	r0, r2
 802da60:	d101      	bne.n	802da66 <memcmp+0xe>
 802da62:	2000      	movs	r0, #0
 802da64:	e005      	b.n	802da72 <memcmp+0x1a>
 802da66:	7803      	ldrb	r3, [r0, #0]
 802da68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802da6c:	42a3      	cmp	r3, r4
 802da6e:	d001      	beq.n	802da74 <memcmp+0x1c>
 802da70:	1b18      	subs	r0, r3, r4
 802da72:	bd10      	pop	{r4, pc}
 802da74:	3001      	adds	r0, #1
 802da76:	e7f2      	b.n	802da5e <memcmp+0x6>

0802da78 <memmove>:
 802da78:	4288      	cmp	r0, r1
 802da7a:	b510      	push	{r4, lr}
 802da7c:	eb01 0402 	add.w	r4, r1, r2
 802da80:	d902      	bls.n	802da88 <memmove+0x10>
 802da82:	4284      	cmp	r4, r0
 802da84:	4623      	mov	r3, r4
 802da86:	d807      	bhi.n	802da98 <memmove+0x20>
 802da88:	1e43      	subs	r3, r0, #1
 802da8a:	42a1      	cmp	r1, r4
 802da8c:	d008      	beq.n	802daa0 <memmove+0x28>
 802da8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 802da92:	f803 2f01 	strb.w	r2, [r3, #1]!
 802da96:	e7f8      	b.n	802da8a <memmove+0x12>
 802da98:	4402      	add	r2, r0
 802da9a:	4601      	mov	r1, r0
 802da9c:	428a      	cmp	r2, r1
 802da9e:	d100      	bne.n	802daa2 <memmove+0x2a>
 802daa0:	bd10      	pop	{r4, pc}
 802daa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802daa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802daaa:	e7f7      	b.n	802da9c <memmove+0x24>

0802daac <memset>:
 802daac:	4402      	add	r2, r0
 802daae:	4603      	mov	r3, r0
 802dab0:	4293      	cmp	r3, r2
 802dab2:	d100      	bne.n	802dab6 <memset+0xa>
 802dab4:	4770      	bx	lr
 802dab6:	f803 1b01 	strb.w	r1, [r3], #1
 802daba:	e7f9      	b.n	802dab0 <memset+0x4>

0802dabc <strcat>:
 802dabc:	b510      	push	{r4, lr}
 802dabe:	4602      	mov	r2, r0
 802dac0:	7814      	ldrb	r4, [r2, #0]
 802dac2:	4613      	mov	r3, r2
 802dac4:	3201      	adds	r2, #1
 802dac6:	2c00      	cmp	r4, #0
 802dac8:	d1fa      	bne.n	802dac0 <strcat+0x4>
 802daca:	3b01      	subs	r3, #1
 802dacc:	f811 2b01 	ldrb.w	r2, [r1], #1
 802dad0:	f803 2f01 	strb.w	r2, [r3, #1]!
 802dad4:	2a00      	cmp	r2, #0
 802dad6:	d1f9      	bne.n	802dacc <strcat+0x10>
 802dad8:	bd10      	pop	{r4, pc}

0802dada <strchr>:
 802dada:	b2c9      	uxtb	r1, r1
 802dadc:	4603      	mov	r3, r0
 802dade:	f810 2b01 	ldrb.w	r2, [r0], #1
 802dae2:	b11a      	cbz	r2, 802daec <strchr+0x12>
 802dae4:	428a      	cmp	r2, r1
 802dae6:	d1f9      	bne.n	802dadc <strchr+0x2>
 802dae8:	4618      	mov	r0, r3
 802daea:	4770      	bx	lr
 802daec:	2900      	cmp	r1, #0
 802daee:	bf18      	it	ne
 802daf0:	2300      	movne	r3, #0
 802daf2:	e7f9      	b.n	802dae8 <strchr+0xe>

0802daf4 <strcspn>:
 802daf4:	b570      	push	{r4, r5, r6, lr}
 802daf6:	4603      	mov	r3, r0
 802daf8:	461e      	mov	r6, r3
 802dafa:	f813 4b01 	ldrb.w	r4, [r3], #1
 802dafe:	b144      	cbz	r4, 802db12 <strcspn+0x1e>
 802db00:	1e4a      	subs	r2, r1, #1
 802db02:	e001      	b.n	802db08 <strcspn+0x14>
 802db04:	42a5      	cmp	r5, r4
 802db06:	d004      	beq.n	802db12 <strcspn+0x1e>
 802db08:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802db0c:	2d00      	cmp	r5, #0
 802db0e:	d1f9      	bne.n	802db04 <strcspn+0x10>
 802db10:	e7f2      	b.n	802daf8 <strcspn+0x4>
 802db12:	1a30      	subs	r0, r6, r0
 802db14:	bd70      	pop	{r4, r5, r6, pc}

0802db16 <strncat>:
 802db16:	b530      	push	{r4, r5, lr}
 802db18:	4604      	mov	r4, r0
 802db1a:	7825      	ldrb	r5, [r4, #0]
 802db1c:	4623      	mov	r3, r4
 802db1e:	3401      	adds	r4, #1
 802db20:	2d00      	cmp	r5, #0
 802db22:	d1fa      	bne.n	802db1a <strncat+0x4>
 802db24:	3a01      	subs	r2, #1
 802db26:	d304      	bcc.n	802db32 <strncat+0x1c>
 802db28:	f811 4b01 	ldrb.w	r4, [r1], #1
 802db2c:	f803 4b01 	strb.w	r4, [r3], #1
 802db30:	b904      	cbnz	r4, 802db34 <strncat+0x1e>
 802db32:	bd30      	pop	{r4, r5, pc}
 802db34:	2a00      	cmp	r2, #0
 802db36:	d1f5      	bne.n	802db24 <strncat+0xe>
 802db38:	701a      	strb	r2, [r3, #0]
 802db3a:	e7f3      	b.n	802db24 <strncat+0xe>

0802db3c <strncmp>:
 802db3c:	b510      	push	{r4, lr}
 802db3e:	b16a      	cbz	r2, 802db5c <strncmp+0x20>
 802db40:	3901      	subs	r1, #1
 802db42:	1884      	adds	r4, r0, r2
 802db44:	f810 2b01 	ldrb.w	r2, [r0], #1
 802db48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 802db4c:	429a      	cmp	r2, r3
 802db4e:	d103      	bne.n	802db58 <strncmp+0x1c>
 802db50:	42a0      	cmp	r0, r4
 802db52:	d001      	beq.n	802db58 <strncmp+0x1c>
 802db54:	2a00      	cmp	r2, #0
 802db56:	d1f5      	bne.n	802db44 <strncmp+0x8>
 802db58:	1ad0      	subs	r0, r2, r3
 802db5a:	bd10      	pop	{r4, pc}
 802db5c:	4610      	mov	r0, r2
 802db5e:	e7fc      	b.n	802db5a <strncmp+0x1e>

0802db60 <strncpy>:
 802db60:	b510      	push	{r4, lr}
 802db62:	3901      	subs	r1, #1
 802db64:	4603      	mov	r3, r0
 802db66:	b132      	cbz	r2, 802db76 <strncpy+0x16>
 802db68:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802db6c:	f803 4b01 	strb.w	r4, [r3], #1
 802db70:	3a01      	subs	r2, #1
 802db72:	2c00      	cmp	r4, #0
 802db74:	d1f7      	bne.n	802db66 <strncpy+0x6>
 802db76:	441a      	add	r2, r3
 802db78:	2100      	movs	r1, #0
 802db7a:	4293      	cmp	r3, r2
 802db7c:	d100      	bne.n	802db80 <strncpy+0x20>
 802db7e:	bd10      	pop	{r4, pc}
 802db80:	f803 1b01 	strb.w	r1, [r3], #1
 802db84:	e7f9      	b.n	802db7a <strncpy+0x1a>

0802db86 <strspn>:
 802db86:	b570      	push	{r4, r5, r6, lr}
 802db88:	4603      	mov	r3, r0
 802db8a:	461e      	mov	r6, r3
 802db8c:	f813 4b01 	ldrb.w	r4, [r3], #1
 802db90:	b13c      	cbz	r4, 802dba2 <strspn+0x1c>
 802db92:	1e4a      	subs	r2, r1, #1
 802db94:	e001      	b.n	802db9a <strspn+0x14>
 802db96:	42a5      	cmp	r5, r4
 802db98:	d0f7      	beq.n	802db8a <strspn+0x4>
 802db9a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 802db9e:	2d00      	cmp	r5, #0
 802dba0:	d1f9      	bne.n	802db96 <strspn+0x10>
 802dba2:	1a30      	subs	r0, r6, r0
 802dba4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802dba8 <strtok>:
 802dba8:	4b16      	ldr	r3, [pc, #88]	; (802dc04 <strtok+0x5c>)
 802dbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802dbac:	681e      	ldr	r6, [r3, #0]
 802dbae:	6c74      	ldr	r4, [r6, #68]	; 0x44
 802dbb0:	4605      	mov	r5, r0
 802dbb2:	b9fc      	cbnz	r4, 802dbf4 <strtok+0x4c>
 802dbb4:	2050      	movs	r0, #80	; 0x50
 802dbb6:	9101      	str	r1, [sp, #4]
 802dbb8:	f7fe fddc 	bl	802c774 <malloc>
 802dbbc:	9901      	ldr	r1, [sp, #4]
 802dbbe:	6470      	str	r0, [r6, #68]	; 0x44
 802dbc0:	4602      	mov	r2, r0
 802dbc2:	b920      	cbnz	r0, 802dbce <strtok+0x26>
 802dbc4:	4b10      	ldr	r3, [pc, #64]	; (802dc08 <strtok+0x60>)
 802dbc6:	4811      	ldr	r0, [pc, #68]	; (802dc0c <strtok+0x64>)
 802dbc8:	215b      	movs	r1, #91	; 0x5b
 802dbca:	f7fe fd9f 	bl	802c70c <__assert_func>
 802dbce:	e9c0 4400 	strd	r4, r4, [r0]
 802dbd2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 802dbd6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 802dbda:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 802dbde:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 802dbe2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 802dbe6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 802dbea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 802dbee:	6184      	str	r4, [r0, #24]
 802dbf0:	7704      	strb	r4, [r0, #28]
 802dbf2:	6244      	str	r4, [r0, #36]	; 0x24
 802dbf4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 802dbf6:	2301      	movs	r3, #1
 802dbf8:	4628      	mov	r0, r5
 802dbfa:	b002      	add	sp, #8
 802dbfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dc00:	f000 b806 	b.w	802dc10 <__strtok_r>
 802dc04:	20000188 	.word	0x20000188
 802dc08:	08034d6b 	.word	0x08034d6b
 802dc0c:	08034d82 	.word	0x08034d82

0802dc10 <__strtok_r>:
 802dc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 802dc12:	b908      	cbnz	r0, 802dc18 <__strtok_r+0x8>
 802dc14:	6810      	ldr	r0, [r2, #0]
 802dc16:	b188      	cbz	r0, 802dc3c <__strtok_r+0x2c>
 802dc18:	4604      	mov	r4, r0
 802dc1a:	4620      	mov	r0, r4
 802dc1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 802dc20:	460f      	mov	r7, r1
 802dc22:	f817 6b01 	ldrb.w	r6, [r7], #1
 802dc26:	b91e      	cbnz	r6, 802dc30 <__strtok_r+0x20>
 802dc28:	b965      	cbnz	r5, 802dc44 <__strtok_r+0x34>
 802dc2a:	6015      	str	r5, [r2, #0]
 802dc2c:	4628      	mov	r0, r5
 802dc2e:	e005      	b.n	802dc3c <__strtok_r+0x2c>
 802dc30:	42b5      	cmp	r5, r6
 802dc32:	d1f6      	bne.n	802dc22 <__strtok_r+0x12>
 802dc34:	2b00      	cmp	r3, #0
 802dc36:	d1f0      	bne.n	802dc1a <__strtok_r+0xa>
 802dc38:	6014      	str	r4, [r2, #0]
 802dc3a:	7003      	strb	r3, [r0, #0]
 802dc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802dc3e:	461c      	mov	r4, r3
 802dc40:	e00c      	b.n	802dc5c <__strtok_r+0x4c>
 802dc42:	b915      	cbnz	r5, 802dc4a <__strtok_r+0x3a>
 802dc44:	f814 3b01 	ldrb.w	r3, [r4], #1
 802dc48:	460e      	mov	r6, r1
 802dc4a:	f816 5b01 	ldrb.w	r5, [r6], #1
 802dc4e:	42ab      	cmp	r3, r5
 802dc50:	d1f7      	bne.n	802dc42 <__strtok_r+0x32>
 802dc52:	2b00      	cmp	r3, #0
 802dc54:	d0f3      	beq.n	802dc3e <__strtok_r+0x2e>
 802dc56:	2300      	movs	r3, #0
 802dc58:	f804 3c01 	strb.w	r3, [r4, #-1]
 802dc5c:	6014      	str	r4, [r2, #0]
 802dc5e:	e7ed      	b.n	802dc3c <__strtok_r+0x2c>

0802dc60 <strstr>:
 802dc60:	780a      	ldrb	r2, [r1, #0]
 802dc62:	b570      	push	{r4, r5, r6, lr}
 802dc64:	b96a      	cbnz	r2, 802dc82 <strstr+0x22>
 802dc66:	bd70      	pop	{r4, r5, r6, pc}
 802dc68:	429a      	cmp	r2, r3
 802dc6a:	d109      	bne.n	802dc80 <strstr+0x20>
 802dc6c:	460c      	mov	r4, r1
 802dc6e:	4605      	mov	r5, r0
 802dc70:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 802dc74:	2b00      	cmp	r3, #0
 802dc76:	d0f6      	beq.n	802dc66 <strstr+0x6>
 802dc78:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 802dc7c:	429e      	cmp	r6, r3
 802dc7e:	d0f7      	beq.n	802dc70 <strstr+0x10>
 802dc80:	3001      	adds	r0, #1
 802dc82:	7803      	ldrb	r3, [r0, #0]
 802dc84:	2b00      	cmp	r3, #0
 802dc86:	d1ef      	bne.n	802dc68 <strstr+0x8>
 802dc88:	4618      	mov	r0, r3
 802dc8a:	e7ec      	b.n	802dc66 <strstr+0x6>

0802dc8c <_localeconv_r>:
 802dc8c:	4800      	ldr	r0, [pc, #0]	; (802dc90 <_localeconv_r+0x4>)
 802dc8e:	4770      	bx	lr
 802dc90:	2000027c 	.word	0x2000027c

0802dc94 <_close_r>:
 802dc94:	b538      	push	{r3, r4, r5, lr}
 802dc96:	4d06      	ldr	r5, [pc, #24]	; (802dcb0 <_close_r+0x1c>)
 802dc98:	2300      	movs	r3, #0
 802dc9a:	4604      	mov	r4, r0
 802dc9c:	4608      	mov	r0, r1
 802dc9e:	602b      	str	r3, [r5, #0]
 802dca0:	f7e5 f81d 	bl	8012cde <_close>
 802dca4:	1c43      	adds	r3, r0, #1
 802dca6:	d102      	bne.n	802dcae <_close_r+0x1a>
 802dca8:	682b      	ldr	r3, [r5, #0]
 802dcaa:	b103      	cbz	r3, 802dcae <_close_r+0x1a>
 802dcac:	6023      	str	r3, [r4, #0]
 802dcae:	bd38      	pop	{r3, r4, r5, pc}
 802dcb0:	2000db0c 	.word	0x2000db0c

0802dcb4 <_reclaim_reent>:
 802dcb4:	4b29      	ldr	r3, [pc, #164]	; (802dd5c <_reclaim_reent+0xa8>)
 802dcb6:	681b      	ldr	r3, [r3, #0]
 802dcb8:	4283      	cmp	r3, r0
 802dcba:	b570      	push	{r4, r5, r6, lr}
 802dcbc:	4604      	mov	r4, r0
 802dcbe:	d04b      	beq.n	802dd58 <_reclaim_reent+0xa4>
 802dcc0:	69c3      	ldr	r3, [r0, #28]
 802dcc2:	b143      	cbz	r3, 802dcd6 <_reclaim_reent+0x22>
 802dcc4:	68db      	ldr	r3, [r3, #12]
 802dcc6:	2b00      	cmp	r3, #0
 802dcc8:	d144      	bne.n	802dd54 <_reclaim_reent+0xa0>
 802dcca:	69e3      	ldr	r3, [r4, #28]
 802dccc:	6819      	ldr	r1, [r3, #0]
 802dcce:	b111      	cbz	r1, 802dcd6 <_reclaim_reent+0x22>
 802dcd0:	4620      	mov	r0, r4
 802dcd2:	f000 ff57 	bl	802eb84 <_free_r>
 802dcd6:	6961      	ldr	r1, [r4, #20]
 802dcd8:	b111      	cbz	r1, 802dce0 <_reclaim_reent+0x2c>
 802dcda:	4620      	mov	r0, r4
 802dcdc:	f000 ff52 	bl	802eb84 <_free_r>
 802dce0:	69e1      	ldr	r1, [r4, #28]
 802dce2:	b111      	cbz	r1, 802dcea <_reclaim_reent+0x36>
 802dce4:	4620      	mov	r0, r4
 802dce6:	f000 ff4d 	bl	802eb84 <_free_r>
 802dcea:	6b21      	ldr	r1, [r4, #48]	; 0x30
 802dcec:	b111      	cbz	r1, 802dcf4 <_reclaim_reent+0x40>
 802dcee:	4620      	mov	r0, r4
 802dcf0:	f000 ff48 	bl	802eb84 <_free_r>
 802dcf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802dcf6:	b111      	cbz	r1, 802dcfe <_reclaim_reent+0x4a>
 802dcf8:	4620      	mov	r0, r4
 802dcfa:	f000 ff43 	bl	802eb84 <_free_r>
 802dcfe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802dd00:	b111      	cbz	r1, 802dd08 <_reclaim_reent+0x54>
 802dd02:	4620      	mov	r0, r4
 802dd04:	f000 ff3e 	bl	802eb84 <_free_r>
 802dd08:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802dd0a:	b111      	cbz	r1, 802dd12 <_reclaim_reent+0x5e>
 802dd0c:	4620      	mov	r0, r4
 802dd0e:	f000 ff39 	bl	802eb84 <_free_r>
 802dd12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 802dd14:	b111      	cbz	r1, 802dd1c <_reclaim_reent+0x68>
 802dd16:	4620      	mov	r0, r4
 802dd18:	f000 ff34 	bl	802eb84 <_free_r>
 802dd1c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 802dd1e:	b111      	cbz	r1, 802dd26 <_reclaim_reent+0x72>
 802dd20:	4620      	mov	r0, r4
 802dd22:	f000 ff2f 	bl	802eb84 <_free_r>
 802dd26:	6a23      	ldr	r3, [r4, #32]
 802dd28:	b1b3      	cbz	r3, 802dd58 <_reclaim_reent+0xa4>
 802dd2a:	4620      	mov	r0, r4
 802dd2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802dd30:	4718      	bx	r3
 802dd32:	5949      	ldr	r1, [r1, r5]
 802dd34:	b941      	cbnz	r1, 802dd48 <_reclaim_reent+0x94>
 802dd36:	3504      	adds	r5, #4
 802dd38:	69e3      	ldr	r3, [r4, #28]
 802dd3a:	2d80      	cmp	r5, #128	; 0x80
 802dd3c:	68d9      	ldr	r1, [r3, #12]
 802dd3e:	d1f8      	bne.n	802dd32 <_reclaim_reent+0x7e>
 802dd40:	4620      	mov	r0, r4
 802dd42:	f000 ff1f 	bl	802eb84 <_free_r>
 802dd46:	e7c0      	b.n	802dcca <_reclaim_reent+0x16>
 802dd48:	680e      	ldr	r6, [r1, #0]
 802dd4a:	4620      	mov	r0, r4
 802dd4c:	f000 ff1a 	bl	802eb84 <_free_r>
 802dd50:	4631      	mov	r1, r6
 802dd52:	e7ef      	b.n	802dd34 <_reclaim_reent+0x80>
 802dd54:	2500      	movs	r5, #0
 802dd56:	e7ef      	b.n	802dd38 <_reclaim_reent+0x84>
 802dd58:	bd70      	pop	{r4, r5, r6, pc}
 802dd5a:	bf00      	nop
 802dd5c:	20000188 	.word	0x20000188

0802dd60 <_lseek_r>:
 802dd60:	b538      	push	{r3, r4, r5, lr}
 802dd62:	4d07      	ldr	r5, [pc, #28]	; (802dd80 <_lseek_r+0x20>)
 802dd64:	4604      	mov	r4, r0
 802dd66:	4608      	mov	r0, r1
 802dd68:	4611      	mov	r1, r2
 802dd6a:	2200      	movs	r2, #0
 802dd6c:	602a      	str	r2, [r5, #0]
 802dd6e:	461a      	mov	r2, r3
 802dd70:	f7e4 ffdc 	bl	8012d2c <_lseek>
 802dd74:	1c43      	adds	r3, r0, #1
 802dd76:	d102      	bne.n	802dd7e <_lseek_r+0x1e>
 802dd78:	682b      	ldr	r3, [r5, #0]
 802dd7a:	b103      	cbz	r3, 802dd7e <_lseek_r+0x1e>
 802dd7c:	6023      	str	r3, [r4, #0]
 802dd7e:	bd38      	pop	{r3, r4, r5, pc}
 802dd80:	2000db0c 	.word	0x2000db0c

0802dd84 <_read_r>:
 802dd84:	b538      	push	{r3, r4, r5, lr}
 802dd86:	4d07      	ldr	r5, [pc, #28]	; (802dda4 <_read_r+0x20>)
 802dd88:	4604      	mov	r4, r0
 802dd8a:	4608      	mov	r0, r1
 802dd8c:	4611      	mov	r1, r2
 802dd8e:	2200      	movs	r2, #0
 802dd90:	602a      	str	r2, [r5, #0]
 802dd92:	461a      	mov	r2, r3
 802dd94:	f7e4 ff6a 	bl	8012c6c <_read>
 802dd98:	1c43      	adds	r3, r0, #1
 802dd9a:	d102      	bne.n	802dda2 <_read_r+0x1e>
 802dd9c:	682b      	ldr	r3, [r5, #0]
 802dd9e:	b103      	cbz	r3, 802dda2 <_read_r+0x1e>
 802dda0:	6023      	str	r3, [r4, #0]
 802dda2:	bd38      	pop	{r3, r4, r5, pc}
 802dda4:	2000db0c 	.word	0x2000db0c

0802dda8 <_sbrk_r>:
 802dda8:	b538      	push	{r3, r4, r5, lr}
 802ddaa:	4d06      	ldr	r5, [pc, #24]	; (802ddc4 <_sbrk_r+0x1c>)
 802ddac:	2300      	movs	r3, #0
 802ddae:	4604      	mov	r4, r0
 802ddb0:	4608      	mov	r0, r1
 802ddb2:	602b      	str	r3, [r5, #0]
 802ddb4:	f7e4 ffc8 	bl	8012d48 <_sbrk>
 802ddb8:	1c43      	adds	r3, r0, #1
 802ddba:	d102      	bne.n	802ddc2 <_sbrk_r+0x1a>
 802ddbc:	682b      	ldr	r3, [r5, #0]
 802ddbe:	b103      	cbz	r3, 802ddc2 <_sbrk_r+0x1a>
 802ddc0:	6023      	str	r3, [r4, #0]
 802ddc2:	bd38      	pop	{r3, r4, r5, pc}
 802ddc4:	2000db0c 	.word	0x2000db0c

0802ddc8 <_write_r>:
 802ddc8:	b538      	push	{r3, r4, r5, lr}
 802ddca:	4d07      	ldr	r5, [pc, #28]	; (802dde8 <_write_r+0x20>)
 802ddcc:	4604      	mov	r4, r0
 802ddce:	4608      	mov	r0, r1
 802ddd0:	4611      	mov	r1, r2
 802ddd2:	2200      	movs	r2, #0
 802ddd4:	602a      	str	r2, [r5, #0]
 802ddd6:	461a      	mov	r2, r3
 802ddd8:	f7e4 ff65 	bl	8012ca6 <_write>
 802dddc:	1c43      	adds	r3, r0, #1
 802ddde:	d102      	bne.n	802dde6 <_write_r+0x1e>
 802dde0:	682b      	ldr	r3, [r5, #0]
 802dde2:	b103      	cbz	r3, 802dde6 <_write_r+0x1e>
 802dde4:	6023      	str	r3, [r4, #0]
 802dde6:	bd38      	pop	{r3, r4, r5, pc}
 802dde8:	2000db0c 	.word	0x2000db0c

0802ddec <__errno>:
 802ddec:	4b01      	ldr	r3, [pc, #4]	; (802ddf4 <__errno+0x8>)
 802ddee:	6818      	ldr	r0, [r3, #0]
 802ddf0:	4770      	bx	lr
 802ddf2:	bf00      	nop
 802ddf4:	20000188 	.word	0x20000188

0802ddf8 <__libc_init_array>:
 802ddf8:	b570      	push	{r4, r5, r6, lr}
 802ddfa:	4d0d      	ldr	r5, [pc, #52]	; (802de30 <__libc_init_array+0x38>)
 802ddfc:	4c0d      	ldr	r4, [pc, #52]	; (802de34 <__libc_init_array+0x3c>)
 802ddfe:	1b64      	subs	r4, r4, r5
 802de00:	10a4      	asrs	r4, r4, #2
 802de02:	2600      	movs	r6, #0
 802de04:	42a6      	cmp	r6, r4
 802de06:	d109      	bne.n	802de1c <__libc_init_array+0x24>
 802de08:	4d0b      	ldr	r5, [pc, #44]	; (802de38 <__libc_init_array+0x40>)
 802de0a:	4c0c      	ldr	r4, [pc, #48]	; (802de3c <__libc_init_array+0x44>)
 802de0c:	f003 fe1a 	bl	8031a44 <_init>
 802de10:	1b64      	subs	r4, r4, r5
 802de12:	10a4      	asrs	r4, r4, #2
 802de14:	2600      	movs	r6, #0
 802de16:	42a6      	cmp	r6, r4
 802de18:	d105      	bne.n	802de26 <__libc_init_array+0x2e>
 802de1a:	bd70      	pop	{r4, r5, r6, pc}
 802de1c:	f855 3b04 	ldr.w	r3, [r5], #4
 802de20:	4798      	blx	r3
 802de22:	3601      	adds	r6, #1
 802de24:	e7ee      	b.n	802de04 <__libc_init_array+0xc>
 802de26:	f855 3b04 	ldr.w	r3, [r5], #4
 802de2a:	4798      	blx	r3
 802de2c:	3601      	adds	r6, #1
 802de2e:	e7f2      	b.n	802de16 <__libc_init_array+0x1e>
 802de30:	080351a0 	.word	0x080351a0
 802de34:	080351a0 	.word	0x080351a0
 802de38:	080351a0 	.word	0x080351a0
 802de3c:	080351a4 	.word	0x080351a4

0802de40 <__retarget_lock_init_recursive>:
 802de40:	4770      	bx	lr

0802de42 <__retarget_lock_acquire_recursive>:
 802de42:	4770      	bx	lr

0802de44 <__retarget_lock_release_recursive>:
 802de44:	4770      	bx	lr

0802de46 <strcpy>:
 802de46:	4603      	mov	r3, r0
 802de48:	f811 2b01 	ldrb.w	r2, [r1], #1
 802de4c:	f803 2b01 	strb.w	r2, [r3], #1
 802de50:	2a00      	cmp	r2, #0
 802de52:	d1f9      	bne.n	802de48 <strcpy+0x2>
 802de54:	4770      	bx	lr

0802de56 <memcpy>:
 802de56:	440a      	add	r2, r1
 802de58:	4291      	cmp	r1, r2
 802de5a:	f100 33ff 	add.w	r3, r0, #4294967295
 802de5e:	d100      	bne.n	802de62 <memcpy+0xc>
 802de60:	4770      	bx	lr
 802de62:	b510      	push	{r4, lr}
 802de64:	f811 4b01 	ldrb.w	r4, [r1], #1
 802de68:	f803 4f01 	strb.w	r4, [r3, #1]!
 802de6c:	4291      	cmp	r1, r2
 802de6e:	d1f9      	bne.n	802de64 <memcpy+0xe>
 802de70:	bd10      	pop	{r4, pc}
	...

0802de74 <nanf>:
 802de74:	ed9f 0a01 	vldr	s0, [pc, #4]	; 802de7c <nanf+0x8>
 802de78:	4770      	bx	lr
 802de7a:	bf00      	nop
 802de7c:	7fc00000 	.word	0x7fc00000

0802de80 <abort>:
 802de80:	b508      	push	{r3, lr}
 802de82:	2006      	movs	r0, #6
 802de84:	f003 f976 	bl	8031174 <raise>
 802de88:	2001      	movs	r0, #1
 802de8a:	f7e4 fee5 	bl	8012c58 <_exit>

0802de8e <quorem>:
 802de8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802de92:	6903      	ldr	r3, [r0, #16]
 802de94:	690c      	ldr	r4, [r1, #16]
 802de96:	42a3      	cmp	r3, r4
 802de98:	4607      	mov	r7, r0
 802de9a:	db7e      	blt.n	802df9a <quorem+0x10c>
 802de9c:	3c01      	subs	r4, #1
 802de9e:	f101 0814 	add.w	r8, r1, #20
 802dea2:	f100 0514 	add.w	r5, r0, #20
 802dea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802deaa:	9301      	str	r3, [sp, #4]
 802deac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802deb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802deb4:	3301      	adds	r3, #1
 802deb6:	429a      	cmp	r2, r3
 802deb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802debc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802dec0:	fbb2 f6f3 	udiv	r6, r2, r3
 802dec4:	d331      	bcc.n	802df2a <quorem+0x9c>
 802dec6:	f04f 0e00 	mov.w	lr, #0
 802deca:	4640      	mov	r0, r8
 802decc:	46ac      	mov	ip, r5
 802dece:	46f2      	mov	sl, lr
 802ded0:	f850 2b04 	ldr.w	r2, [r0], #4
 802ded4:	b293      	uxth	r3, r2
 802ded6:	fb06 e303 	mla	r3, r6, r3, lr
 802deda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802dede:	0c1a      	lsrs	r2, r3, #16
 802dee0:	b29b      	uxth	r3, r3
 802dee2:	ebaa 0303 	sub.w	r3, sl, r3
 802dee6:	f8dc a000 	ldr.w	sl, [ip]
 802deea:	fa13 f38a 	uxtah	r3, r3, sl
 802deee:	fb06 220e 	mla	r2, r6, lr, r2
 802def2:	9300      	str	r3, [sp, #0]
 802def4:	9b00      	ldr	r3, [sp, #0]
 802def6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802defa:	b292      	uxth	r2, r2
 802defc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802df00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802df04:	f8bd 3000 	ldrh.w	r3, [sp]
 802df08:	4581      	cmp	r9, r0
 802df0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802df0e:	f84c 3b04 	str.w	r3, [ip], #4
 802df12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802df16:	d2db      	bcs.n	802ded0 <quorem+0x42>
 802df18:	f855 300b 	ldr.w	r3, [r5, fp]
 802df1c:	b92b      	cbnz	r3, 802df2a <quorem+0x9c>
 802df1e:	9b01      	ldr	r3, [sp, #4]
 802df20:	3b04      	subs	r3, #4
 802df22:	429d      	cmp	r5, r3
 802df24:	461a      	mov	r2, r3
 802df26:	d32c      	bcc.n	802df82 <quorem+0xf4>
 802df28:	613c      	str	r4, [r7, #16]
 802df2a:	4638      	mov	r0, r7
 802df2c:	f001 f93c 	bl	802f1a8 <__mcmp>
 802df30:	2800      	cmp	r0, #0
 802df32:	db22      	blt.n	802df7a <quorem+0xec>
 802df34:	3601      	adds	r6, #1
 802df36:	4629      	mov	r1, r5
 802df38:	2000      	movs	r0, #0
 802df3a:	f858 2b04 	ldr.w	r2, [r8], #4
 802df3e:	f8d1 c000 	ldr.w	ip, [r1]
 802df42:	b293      	uxth	r3, r2
 802df44:	1ac3      	subs	r3, r0, r3
 802df46:	0c12      	lsrs	r2, r2, #16
 802df48:	fa13 f38c 	uxtah	r3, r3, ip
 802df4c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 802df50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802df54:	b29b      	uxth	r3, r3
 802df56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802df5a:	45c1      	cmp	r9, r8
 802df5c:	f841 3b04 	str.w	r3, [r1], #4
 802df60:	ea4f 4022 	mov.w	r0, r2, asr #16
 802df64:	d2e9      	bcs.n	802df3a <quorem+0xac>
 802df66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802df6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802df6e:	b922      	cbnz	r2, 802df7a <quorem+0xec>
 802df70:	3b04      	subs	r3, #4
 802df72:	429d      	cmp	r5, r3
 802df74:	461a      	mov	r2, r3
 802df76:	d30a      	bcc.n	802df8e <quorem+0x100>
 802df78:	613c      	str	r4, [r7, #16]
 802df7a:	4630      	mov	r0, r6
 802df7c:	b003      	add	sp, #12
 802df7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802df82:	6812      	ldr	r2, [r2, #0]
 802df84:	3b04      	subs	r3, #4
 802df86:	2a00      	cmp	r2, #0
 802df88:	d1ce      	bne.n	802df28 <quorem+0x9a>
 802df8a:	3c01      	subs	r4, #1
 802df8c:	e7c9      	b.n	802df22 <quorem+0x94>
 802df8e:	6812      	ldr	r2, [r2, #0]
 802df90:	3b04      	subs	r3, #4
 802df92:	2a00      	cmp	r2, #0
 802df94:	d1f0      	bne.n	802df78 <quorem+0xea>
 802df96:	3c01      	subs	r4, #1
 802df98:	e7eb      	b.n	802df72 <quorem+0xe4>
 802df9a:	2000      	movs	r0, #0
 802df9c:	e7ee      	b.n	802df7c <quorem+0xee>
	...

0802dfa0 <_dtoa_r>:
 802dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802dfa4:	ed2d 8b04 	vpush	{d8-d9}
 802dfa8:	69c5      	ldr	r5, [r0, #28]
 802dfaa:	b093      	sub	sp, #76	; 0x4c
 802dfac:	ed8d 0b02 	vstr	d0, [sp, #8]
 802dfb0:	ec57 6b10 	vmov	r6, r7, d0
 802dfb4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802dfb8:	9107      	str	r1, [sp, #28]
 802dfba:	4604      	mov	r4, r0
 802dfbc:	920a      	str	r2, [sp, #40]	; 0x28
 802dfbe:	930d      	str	r3, [sp, #52]	; 0x34
 802dfc0:	b975      	cbnz	r5, 802dfe0 <_dtoa_r+0x40>
 802dfc2:	2010      	movs	r0, #16
 802dfc4:	f7fe fbd6 	bl	802c774 <malloc>
 802dfc8:	4602      	mov	r2, r0
 802dfca:	61e0      	str	r0, [r4, #28]
 802dfcc:	b920      	cbnz	r0, 802dfd8 <_dtoa_r+0x38>
 802dfce:	4bae      	ldr	r3, [pc, #696]	; (802e288 <_dtoa_r+0x2e8>)
 802dfd0:	21ef      	movs	r1, #239	; 0xef
 802dfd2:	48ae      	ldr	r0, [pc, #696]	; (802e28c <_dtoa_r+0x2ec>)
 802dfd4:	f7fe fb9a 	bl	802c70c <__assert_func>
 802dfd8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802dfdc:	6005      	str	r5, [r0, #0]
 802dfde:	60c5      	str	r5, [r0, #12]
 802dfe0:	69e3      	ldr	r3, [r4, #28]
 802dfe2:	6819      	ldr	r1, [r3, #0]
 802dfe4:	b151      	cbz	r1, 802dffc <_dtoa_r+0x5c>
 802dfe6:	685a      	ldr	r2, [r3, #4]
 802dfe8:	604a      	str	r2, [r1, #4]
 802dfea:	2301      	movs	r3, #1
 802dfec:	4093      	lsls	r3, r2
 802dfee:	608b      	str	r3, [r1, #8]
 802dff0:	4620      	mov	r0, r4
 802dff2:	f000 fe53 	bl	802ec9c <_Bfree>
 802dff6:	69e3      	ldr	r3, [r4, #28]
 802dff8:	2200      	movs	r2, #0
 802dffa:	601a      	str	r2, [r3, #0]
 802dffc:	1e3b      	subs	r3, r7, #0
 802dffe:	bfbb      	ittet	lt
 802e000:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802e004:	9303      	strlt	r3, [sp, #12]
 802e006:	2300      	movge	r3, #0
 802e008:	2201      	movlt	r2, #1
 802e00a:	bfac      	ite	ge
 802e00c:	f8c8 3000 	strge.w	r3, [r8]
 802e010:	f8c8 2000 	strlt.w	r2, [r8]
 802e014:	4b9e      	ldr	r3, [pc, #632]	; (802e290 <_dtoa_r+0x2f0>)
 802e016:	f8dd 800c 	ldr.w	r8, [sp, #12]
 802e01a:	ea33 0308 	bics.w	r3, r3, r8
 802e01e:	d11b      	bne.n	802e058 <_dtoa_r+0xb8>
 802e020:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e022:	f242 730f 	movw	r3, #9999	; 0x270f
 802e026:	6013      	str	r3, [r2, #0]
 802e028:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802e02c:	4333      	orrs	r3, r6
 802e02e:	f000 8593 	beq.w	802eb58 <_dtoa_r+0xbb8>
 802e032:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e034:	b963      	cbnz	r3, 802e050 <_dtoa_r+0xb0>
 802e036:	4b97      	ldr	r3, [pc, #604]	; (802e294 <_dtoa_r+0x2f4>)
 802e038:	e027      	b.n	802e08a <_dtoa_r+0xea>
 802e03a:	4b97      	ldr	r3, [pc, #604]	; (802e298 <_dtoa_r+0x2f8>)
 802e03c:	9300      	str	r3, [sp, #0]
 802e03e:	3308      	adds	r3, #8
 802e040:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802e042:	6013      	str	r3, [r2, #0]
 802e044:	9800      	ldr	r0, [sp, #0]
 802e046:	b013      	add	sp, #76	; 0x4c
 802e048:	ecbd 8b04 	vpop	{d8-d9}
 802e04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e050:	4b90      	ldr	r3, [pc, #576]	; (802e294 <_dtoa_r+0x2f4>)
 802e052:	9300      	str	r3, [sp, #0]
 802e054:	3303      	adds	r3, #3
 802e056:	e7f3      	b.n	802e040 <_dtoa_r+0xa0>
 802e058:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e05c:	2200      	movs	r2, #0
 802e05e:	ec51 0b17 	vmov	r0, r1, d7
 802e062:	eeb0 8a47 	vmov.f32	s16, s14
 802e066:	eef0 8a67 	vmov.f32	s17, s15
 802e06a:	2300      	movs	r3, #0
 802e06c:	f7e2 fd44 	bl	8010af8 <__aeabi_dcmpeq>
 802e070:	4681      	mov	r9, r0
 802e072:	b160      	cbz	r0, 802e08e <_dtoa_r+0xee>
 802e074:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e076:	2301      	movs	r3, #1
 802e078:	6013      	str	r3, [r2, #0]
 802e07a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e07c:	2b00      	cmp	r3, #0
 802e07e:	f000 8568 	beq.w	802eb52 <_dtoa_r+0xbb2>
 802e082:	4b86      	ldr	r3, [pc, #536]	; (802e29c <_dtoa_r+0x2fc>)
 802e084:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802e086:	6013      	str	r3, [r2, #0]
 802e088:	3b01      	subs	r3, #1
 802e08a:	9300      	str	r3, [sp, #0]
 802e08c:	e7da      	b.n	802e044 <_dtoa_r+0xa4>
 802e08e:	aa10      	add	r2, sp, #64	; 0x40
 802e090:	a911      	add	r1, sp, #68	; 0x44
 802e092:	4620      	mov	r0, r4
 802e094:	eeb0 0a48 	vmov.f32	s0, s16
 802e098:	eef0 0a68 	vmov.f32	s1, s17
 802e09c:	f001 f99a 	bl	802f3d4 <__d2b>
 802e0a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 802e0a4:	4682      	mov	sl, r0
 802e0a6:	2d00      	cmp	r5, #0
 802e0a8:	d07f      	beq.n	802e1aa <_dtoa_r+0x20a>
 802e0aa:	ee18 3a90 	vmov	r3, s17
 802e0ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e0b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 802e0b6:	ec51 0b18 	vmov	r0, r1, d8
 802e0ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802e0be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 802e0c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 802e0c6:	4619      	mov	r1, r3
 802e0c8:	2200      	movs	r2, #0
 802e0ca:	4b75      	ldr	r3, [pc, #468]	; (802e2a0 <_dtoa_r+0x300>)
 802e0cc:	f7e2 f8f4 	bl	80102b8 <__aeabi_dsub>
 802e0d0:	a367      	add	r3, pc, #412	; (adr r3, 802e270 <_dtoa_r+0x2d0>)
 802e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0d6:	f7e2 faa7 	bl	8010628 <__aeabi_dmul>
 802e0da:	a367      	add	r3, pc, #412	; (adr r3, 802e278 <_dtoa_r+0x2d8>)
 802e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0e0:	f7e2 f8ec 	bl	80102bc <__adddf3>
 802e0e4:	4606      	mov	r6, r0
 802e0e6:	4628      	mov	r0, r5
 802e0e8:	460f      	mov	r7, r1
 802e0ea:	f7e2 fa33 	bl	8010554 <__aeabi_i2d>
 802e0ee:	a364      	add	r3, pc, #400	; (adr r3, 802e280 <_dtoa_r+0x2e0>)
 802e0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e0f4:	f7e2 fa98 	bl	8010628 <__aeabi_dmul>
 802e0f8:	4602      	mov	r2, r0
 802e0fa:	460b      	mov	r3, r1
 802e0fc:	4630      	mov	r0, r6
 802e0fe:	4639      	mov	r1, r7
 802e100:	f7e2 f8dc 	bl	80102bc <__adddf3>
 802e104:	4606      	mov	r6, r0
 802e106:	460f      	mov	r7, r1
 802e108:	f7e2 fd3e 	bl	8010b88 <__aeabi_d2iz>
 802e10c:	2200      	movs	r2, #0
 802e10e:	4683      	mov	fp, r0
 802e110:	2300      	movs	r3, #0
 802e112:	4630      	mov	r0, r6
 802e114:	4639      	mov	r1, r7
 802e116:	f7e2 fcf9 	bl	8010b0c <__aeabi_dcmplt>
 802e11a:	b148      	cbz	r0, 802e130 <_dtoa_r+0x190>
 802e11c:	4658      	mov	r0, fp
 802e11e:	f7e2 fa19 	bl	8010554 <__aeabi_i2d>
 802e122:	4632      	mov	r2, r6
 802e124:	463b      	mov	r3, r7
 802e126:	f7e2 fce7 	bl	8010af8 <__aeabi_dcmpeq>
 802e12a:	b908      	cbnz	r0, 802e130 <_dtoa_r+0x190>
 802e12c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e130:	f1bb 0f16 	cmp.w	fp, #22
 802e134:	d857      	bhi.n	802e1e6 <_dtoa_r+0x246>
 802e136:	4b5b      	ldr	r3, [pc, #364]	; (802e2a4 <_dtoa_r+0x304>)
 802e138:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e140:	ec51 0b18 	vmov	r0, r1, d8
 802e144:	f7e2 fce2 	bl	8010b0c <__aeabi_dcmplt>
 802e148:	2800      	cmp	r0, #0
 802e14a:	d04e      	beq.n	802e1ea <_dtoa_r+0x24a>
 802e14c:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e150:	2300      	movs	r3, #0
 802e152:	930c      	str	r3, [sp, #48]	; 0x30
 802e154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e156:	1b5b      	subs	r3, r3, r5
 802e158:	1e5a      	subs	r2, r3, #1
 802e15a:	bf45      	ittet	mi
 802e15c:	f1c3 0301 	rsbmi	r3, r3, #1
 802e160:	9305      	strmi	r3, [sp, #20]
 802e162:	2300      	movpl	r3, #0
 802e164:	2300      	movmi	r3, #0
 802e166:	9206      	str	r2, [sp, #24]
 802e168:	bf54      	ite	pl
 802e16a:	9305      	strpl	r3, [sp, #20]
 802e16c:	9306      	strmi	r3, [sp, #24]
 802e16e:	f1bb 0f00 	cmp.w	fp, #0
 802e172:	db3c      	blt.n	802e1ee <_dtoa_r+0x24e>
 802e174:	9b06      	ldr	r3, [sp, #24]
 802e176:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802e17a:	445b      	add	r3, fp
 802e17c:	9306      	str	r3, [sp, #24]
 802e17e:	2300      	movs	r3, #0
 802e180:	9308      	str	r3, [sp, #32]
 802e182:	9b07      	ldr	r3, [sp, #28]
 802e184:	2b09      	cmp	r3, #9
 802e186:	d868      	bhi.n	802e25a <_dtoa_r+0x2ba>
 802e188:	2b05      	cmp	r3, #5
 802e18a:	bfc4      	itt	gt
 802e18c:	3b04      	subgt	r3, #4
 802e18e:	9307      	strgt	r3, [sp, #28]
 802e190:	9b07      	ldr	r3, [sp, #28]
 802e192:	f1a3 0302 	sub.w	r3, r3, #2
 802e196:	bfcc      	ite	gt
 802e198:	2500      	movgt	r5, #0
 802e19a:	2501      	movle	r5, #1
 802e19c:	2b03      	cmp	r3, #3
 802e19e:	f200 8085 	bhi.w	802e2ac <_dtoa_r+0x30c>
 802e1a2:	e8df f003 	tbb	[pc, r3]
 802e1a6:	3b2e      	.short	0x3b2e
 802e1a8:	5839      	.short	0x5839
 802e1aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 802e1ae:	441d      	add	r5, r3
 802e1b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802e1b4:	2b20      	cmp	r3, #32
 802e1b6:	bfc1      	itttt	gt
 802e1b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802e1bc:	fa08 f803 	lslgt.w	r8, r8, r3
 802e1c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 802e1c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 802e1c8:	bfd6      	itet	le
 802e1ca:	f1c3 0320 	rsble	r3, r3, #32
 802e1ce:	ea48 0003 	orrgt.w	r0, r8, r3
 802e1d2:	fa06 f003 	lslle.w	r0, r6, r3
 802e1d6:	f7e2 f9ad 	bl	8010534 <__aeabi_ui2d>
 802e1da:	2201      	movs	r2, #1
 802e1dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 802e1e0:	3d01      	subs	r5, #1
 802e1e2:	920e      	str	r2, [sp, #56]	; 0x38
 802e1e4:	e76f      	b.n	802e0c6 <_dtoa_r+0x126>
 802e1e6:	2301      	movs	r3, #1
 802e1e8:	e7b3      	b.n	802e152 <_dtoa_r+0x1b2>
 802e1ea:	900c      	str	r0, [sp, #48]	; 0x30
 802e1ec:	e7b2      	b.n	802e154 <_dtoa_r+0x1b4>
 802e1ee:	9b05      	ldr	r3, [sp, #20]
 802e1f0:	eba3 030b 	sub.w	r3, r3, fp
 802e1f4:	9305      	str	r3, [sp, #20]
 802e1f6:	f1cb 0300 	rsb	r3, fp, #0
 802e1fa:	9308      	str	r3, [sp, #32]
 802e1fc:	2300      	movs	r3, #0
 802e1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 802e200:	e7bf      	b.n	802e182 <_dtoa_r+0x1e2>
 802e202:	2300      	movs	r3, #0
 802e204:	9309      	str	r3, [sp, #36]	; 0x24
 802e206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e208:	2b00      	cmp	r3, #0
 802e20a:	dc52      	bgt.n	802e2b2 <_dtoa_r+0x312>
 802e20c:	2301      	movs	r3, #1
 802e20e:	9301      	str	r3, [sp, #4]
 802e210:	9304      	str	r3, [sp, #16]
 802e212:	461a      	mov	r2, r3
 802e214:	920a      	str	r2, [sp, #40]	; 0x28
 802e216:	e00b      	b.n	802e230 <_dtoa_r+0x290>
 802e218:	2301      	movs	r3, #1
 802e21a:	e7f3      	b.n	802e204 <_dtoa_r+0x264>
 802e21c:	2300      	movs	r3, #0
 802e21e:	9309      	str	r3, [sp, #36]	; 0x24
 802e220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e222:	445b      	add	r3, fp
 802e224:	9301      	str	r3, [sp, #4]
 802e226:	3301      	adds	r3, #1
 802e228:	2b01      	cmp	r3, #1
 802e22a:	9304      	str	r3, [sp, #16]
 802e22c:	bfb8      	it	lt
 802e22e:	2301      	movlt	r3, #1
 802e230:	69e0      	ldr	r0, [r4, #28]
 802e232:	2100      	movs	r1, #0
 802e234:	2204      	movs	r2, #4
 802e236:	f102 0614 	add.w	r6, r2, #20
 802e23a:	429e      	cmp	r6, r3
 802e23c:	d93d      	bls.n	802e2ba <_dtoa_r+0x31a>
 802e23e:	6041      	str	r1, [r0, #4]
 802e240:	4620      	mov	r0, r4
 802e242:	f000 fceb 	bl	802ec1c <_Balloc>
 802e246:	9000      	str	r0, [sp, #0]
 802e248:	2800      	cmp	r0, #0
 802e24a:	d139      	bne.n	802e2c0 <_dtoa_r+0x320>
 802e24c:	4b16      	ldr	r3, [pc, #88]	; (802e2a8 <_dtoa_r+0x308>)
 802e24e:	4602      	mov	r2, r0
 802e250:	f240 11af 	movw	r1, #431	; 0x1af
 802e254:	e6bd      	b.n	802dfd2 <_dtoa_r+0x32>
 802e256:	2301      	movs	r3, #1
 802e258:	e7e1      	b.n	802e21e <_dtoa_r+0x27e>
 802e25a:	2501      	movs	r5, #1
 802e25c:	2300      	movs	r3, #0
 802e25e:	9307      	str	r3, [sp, #28]
 802e260:	9509      	str	r5, [sp, #36]	; 0x24
 802e262:	f04f 33ff 	mov.w	r3, #4294967295
 802e266:	9301      	str	r3, [sp, #4]
 802e268:	9304      	str	r3, [sp, #16]
 802e26a:	2200      	movs	r2, #0
 802e26c:	2312      	movs	r3, #18
 802e26e:	e7d1      	b.n	802e214 <_dtoa_r+0x274>
 802e270:	636f4361 	.word	0x636f4361
 802e274:	3fd287a7 	.word	0x3fd287a7
 802e278:	8b60c8b3 	.word	0x8b60c8b3
 802e27c:	3fc68a28 	.word	0x3fc68a28
 802e280:	509f79fb 	.word	0x509f79fb
 802e284:	3fd34413 	.word	0x3fd34413
 802e288:	08034d6b 	.word	0x08034d6b
 802e28c:	08034de9 	.word	0x08034de9
 802e290:	7ff00000 	.word	0x7ff00000
 802e294:	08034de5 	.word	0x08034de5
 802e298:	08034ddc 	.word	0x08034ddc
 802e29c:	08035129 	.word	0x08035129
 802e2a0:	3ff80000 	.word	0x3ff80000
 802e2a4:	08034ed8 	.word	0x08034ed8
 802e2a8:	08034e41 	.word	0x08034e41
 802e2ac:	2301      	movs	r3, #1
 802e2ae:	9309      	str	r3, [sp, #36]	; 0x24
 802e2b0:	e7d7      	b.n	802e262 <_dtoa_r+0x2c2>
 802e2b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e2b4:	9301      	str	r3, [sp, #4]
 802e2b6:	9304      	str	r3, [sp, #16]
 802e2b8:	e7ba      	b.n	802e230 <_dtoa_r+0x290>
 802e2ba:	3101      	adds	r1, #1
 802e2bc:	0052      	lsls	r2, r2, #1
 802e2be:	e7ba      	b.n	802e236 <_dtoa_r+0x296>
 802e2c0:	69e3      	ldr	r3, [r4, #28]
 802e2c2:	9a00      	ldr	r2, [sp, #0]
 802e2c4:	601a      	str	r2, [r3, #0]
 802e2c6:	9b04      	ldr	r3, [sp, #16]
 802e2c8:	2b0e      	cmp	r3, #14
 802e2ca:	f200 80a8 	bhi.w	802e41e <_dtoa_r+0x47e>
 802e2ce:	2d00      	cmp	r5, #0
 802e2d0:	f000 80a5 	beq.w	802e41e <_dtoa_r+0x47e>
 802e2d4:	f1bb 0f00 	cmp.w	fp, #0
 802e2d8:	dd38      	ble.n	802e34c <_dtoa_r+0x3ac>
 802e2da:	4bc0      	ldr	r3, [pc, #768]	; (802e5dc <_dtoa_r+0x63c>)
 802e2dc:	f00b 020f 	and.w	r2, fp, #15
 802e2e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e2e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802e2e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 802e2ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 802e2f0:	d019      	beq.n	802e326 <_dtoa_r+0x386>
 802e2f2:	4bbb      	ldr	r3, [pc, #748]	; (802e5e0 <_dtoa_r+0x640>)
 802e2f4:	ec51 0b18 	vmov	r0, r1, d8
 802e2f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802e2fc:	f7e2 fabe 	bl	801087c <__aeabi_ddiv>
 802e300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e304:	f008 080f 	and.w	r8, r8, #15
 802e308:	2503      	movs	r5, #3
 802e30a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802e5e0 <_dtoa_r+0x640>
 802e30e:	f1b8 0f00 	cmp.w	r8, #0
 802e312:	d10a      	bne.n	802e32a <_dtoa_r+0x38a>
 802e314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802e318:	4632      	mov	r2, r6
 802e31a:	463b      	mov	r3, r7
 802e31c:	f7e2 faae 	bl	801087c <__aeabi_ddiv>
 802e320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e324:	e02b      	b.n	802e37e <_dtoa_r+0x3de>
 802e326:	2502      	movs	r5, #2
 802e328:	e7ef      	b.n	802e30a <_dtoa_r+0x36a>
 802e32a:	f018 0f01 	tst.w	r8, #1
 802e32e:	d008      	beq.n	802e342 <_dtoa_r+0x3a2>
 802e330:	4630      	mov	r0, r6
 802e332:	4639      	mov	r1, r7
 802e334:	e9d9 2300 	ldrd	r2, r3, [r9]
 802e338:	f7e2 f976 	bl	8010628 <__aeabi_dmul>
 802e33c:	3501      	adds	r5, #1
 802e33e:	4606      	mov	r6, r0
 802e340:	460f      	mov	r7, r1
 802e342:	ea4f 0868 	mov.w	r8, r8, asr #1
 802e346:	f109 0908 	add.w	r9, r9, #8
 802e34a:	e7e0      	b.n	802e30e <_dtoa_r+0x36e>
 802e34c:	f000 809f 	beq.w	802e48e <_dtoa_r+0x4ee>
 802e350:	f1cb 0600 	rsb	r6, fp, #0
 802e354:	4ba1      	ldr	r3, [pc, #644]	; (802e5dc <_dtoa_r+0x63c>)
 802e356:	4fa2      	ldr	r7, [pc, #648]	; (802e5e0 <_dtoa_r+0x640>)
 802e358:	f006 020f 	and.w	r2, r6, #15
 802e35c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802e360:	e9d3 2300 	ldrd	r2, r3, [r3]
 802e364:	ec51 0b18 	vmov	r0, r1, d8
 802e368:	f7e2 f95e 	bl	8010628 <__aeabi_dmul>
 802e36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e370:	1136      	asrs	r6, r6, #4
 802e372:	2300      	movs	r3, #0
 802e374:	2502      	movs	r5, #2
 802e376:	2e00      	cmp	r6, #0
 802e378:	d17e      	bne.n	802e478 <_dtoa_r+0x4d8>
 802e37a:	2b00      	cmp	r3, #0
 802e37c:	d1d0      	bne.n	802e320 <_dtoa_r+0x380>
 802e37e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e380:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e384:	2b00      	cmp	r3, #0
 802e386:	f000 8084 	beq.w	802e492 <_dtoa_r+0x4f2>
 802e38a:	4b96      	ldr	r3, [pc, #600]	; (802e5e4 <_dtoa_r+0x644>)
 802e38c:	2200      	movs	r2, #0
 802e38e:	4640      	mov	r0, r8
 802e390:	4649      	mov	r1, r9
 802e392:	f7e2 fbbb 	bl	8010b0c <__aeabi_dcmplt>
 802e396:	2800      	cmp	r0, #0
 802e398:	d07b      	beq.n	802e492 <_dtoa_r+0x4f2>
 802e39a:	9b04      	ldr	r3, [sp, #16]
 802e39c:	2b00      	cmp	r3, #0
 802e39e:	d078      	beq.n	802e492 <_dtoa_r+0x4f2>
 802e3a0:	9b01      	ldr	r3, [sp, #4]
 802e3a2:	2b00      	cmp	r3, #0
 802e3a4:	dd39      	ble.n	802e41a <_dtoa_r+0x47a>
 802e3a6:	4b90      	ldr	r3, [pc, #576]	; (802e5e8 <_dtoa_r+0x648>)
 802e3a8:	2200      	movs	r2, #0
 802e3aa:	4640      	mov	r0, r8
 802e3ac:	4649      	mov	r1, r9
 802e3ae:	f7e2 f93b 	bl	8010628 <__aeabi_dmul>
 802e3b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3b6:	9e01      	ldr	r6, [sp, #4]
 802e3b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 802e3bc:	3501      	adds	r5, #1
 802e3be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802e3c2:	4628      	mov	r0, r5
 802e3c4:	f7e2 f8c6 	bl	8010554 <__aeabi_i2d>
 802e3c8:	4642      	mov	r2, r8
 802e3ca:	464b      	mov	r3, r9
 802e3cc:	f7e2 f92c 	bl	8010628 <__aeabi_dmul>
 802e3d0:	4b86      	ldr	r3, [pc, #536]	; (802e5ec <_dtoa_r+0x64c>)
 802e3d2:	2200      	movs	r2, #0
 802e3d4:	f7e1 ff72 	bl	80102bc <__adddf3>
 802e3d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 802e3dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802e3e0:	9303      	str	r3, [sp, #12]
 802e3e2:	2e00      	cmp	r6, #0
 802e3e4:	d158      	bne.n	802e498 <_dtoa_r+0x4f8>
 802e3e6:	4b82      	ldr	r3, [pc, #520]	; (802e5f0 <_dtoa_r+0x650>)
 802e3e8:	2200      	movs	r2, #0
 802e3ea:	4640      	mov	r0, r8
 802e3ec:	4649      	mov	r1, r9
 802e3ee:	f7e1 ff63 	bl	80102b8 <__aeabi_dsub>
 802e3f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e3f6:	4680      	mov	r8, r0
 802e3f8:	4689      	mov	r9, r1
 802e3fa:	f7e2 fba5 	bl	8010b48 <__aeabi_dcmpgt>
 802e3fe:	2800      	cmp	r0, #0
 802e400:	f040 8296 	bne.w	802e930 <_dtoa_r+0x990>
 802e404:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 802e408:	4640      	mov	r0, r8
 802e40a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802e40e:	4649      	mov	r1, r9
 802e410:	f7e2 fb7c 	bl	8010b0c <__aeabi_dcmplt>
 802e414:	2800      	cmp	r0, #0
 802e416:	f040 8289 	bne.w	802e92c <_dtoa_r+0x98c>
 802e41a:	ed8d 8b02 	vstr	d8, [sp, #8]
 802e41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802e420:	2b00      	cmp	r3, #0
 802e422:	f2c0 814e 	blt.w	802e6c2 <_dtoa_r+0x722>
 802e426:	f1bb 0f0e 	cmp.w	fp, #14
 802e42a:	f300 814a 	bgt.w	802e6c2 <_dtoa_r+0x722>
 802e42e:	4b6b      	ldr	r3, [pc, #428]	; (802e5dc <_dtoa_r+0x63c>)
 802e430:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802e434:	e9d3 8900 	ldrd	r8, r9, [r3]
 802e438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e43a:	2b00      	cmp	r3, #0
 802e43c:	f280 80dc 	bge.w	802e5f8 <_dtoa_r+0x658>
 802e440:	9b04      	ldr	r3, [sp, #16]
 802e442:	2b00      	cmp	r3, #0
 802e444:	f300 80d8 	bgt.w	802e5f8 <_dtoa_r+0x658>
 802e448:	f040 826f 	bne.w	802e92a <_dtoa_r+0x98a>
 802e44c:	4b68      	ldr	r3, [pc, #416]	; (802e5f0 <_dtoa_r+0x650>)
 802e44e:	2200      	movs	r2, #0
 802e450:	4640      	mov	r0, r8
 802e452:	4649      	mov	r1, r9
 802e454:	f7e2 f8e8 	bl	8010628 <__aeabi_dmul>
 802e458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 802e45c:	f7e2 fb6a 	bl	8010b34 <__aeabi_dcmpge>
 802e460:	9e04      	ldr	r6, [sp, #16]
 802e462:	4637      	mov	r7, r6
 802e464:	2800      	cmp	r0, #0
 802e466:	f040 8245 	bne.w	802e8f4 <_dtoa_r+0x954>
 802e46a:	9d00      	ldr	r5, [sp, #0]
 802e46c:	2331      	movs	r3, #49	; 0x31
 802e46e:	f805 3b01 	strb.w	r3, [r5], #1
 802e472:	f10b 0b01 	add.w	fp, fp, #1
 802e476:	e241      	b.n	802e8fc <_dtoa_r+0x95c>
 802e478:	07f2      	lsls	r2, r6, #31
 802e47a:	d505      	bpl.n	802e488 <_dtoa_r+0x4e8>
 802e47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 802e480:	f7e2 f8d2 	bl	8010628 <__aeabi_dmul>
 802e484:	3501      	adds	r5, #1
 802e486:	2301      	movs	r3, #1
 802e488:	1076      	asrs	r6, r6, #1
 802e48a:	3708      	adds	r7, #8
 802e48c:	e773      	b.n	802e376 <_dtoa_r+0x3d6>
 802e48e:	2502      	movs	r5, #2
 802e490:	e775      	b.n	802e37e <_dtoa_r+0x3de>
 802e492:	9e04      	ldr	r6, [sp, #16]
 802e494:	465f      	mov	r7, fp
 802e496:	e792      	b.n	802e3be <_dtoa_r+0x41e>
 802e498:	9900      	ldr	r1, [sp, #0]
 802e49a:	4b50      	ldr	r3, [pc, #320]	; (802e5dc <_dtoa_r+0x63c>)
 802e49c:	ed9d 7b02 	vldr	d7, [sp, #8]
 802e4a0:	4431      	add	r1, r6
 802e4a2:	9102      	str	r1, [sp, #8]
 802e4a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802e4a6:	eeb0 9a47 	vmov.f32	s18, s14
 802e4aa:	eef0 9a67 	vmov.f32	s19, s15
 802e4ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802e4b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802e4b6:	2900      	cmp	r1, #0
 802e4b8:	d044      	beq.n	802e544 <_dtoa_r+0x5a4>
 802e4ba:	494e      	ldr	r1, [pc, #312]	; (802e5f4 <_dtoa_r+0x654>)
 802e4bc:	2000      	movs	r0, #0
 802e4be:	f7e2 f9dd 	bl	801087c <__aeabi_ddiv>
 802e4c2:	ec53 2b19 	vmov	r2, r3, d9
 802e4c6:	f7e1 fef7 	bl	80102b8 <__aeabi_dsub>
 802e4ca:	9d00      	ldr	r5, [sp, #0]
 802e4cc:	ec41 0b19 	vmov	d9, r0, r1
 802e4d0:	4649      	mov	r1, r9
 802e4d2:	4640      	mov	r0, r8
 802e4d4:	f7e2 fb58 	bl	8010b88 <__aeabi_d2iz>
 802e4d8:	4606      	mov	r6, r0
 802e4da:	f7e2 f83b 	bl	8010554 <__aeabi_i2d>
 802e4de:	4602      	mov	r2, r0
 802e4e0:	460b      	mov	r3, r1
 802e4e2:	4640      	mov	r0, r8
 802e4e4:	4649      	mov	r1, r9
 802e4e6:	f7e1 fee7 	bl	80102b8 <__aeabi_dsub>
 802e4ea:	3630      	adds	r6, #48	; 0x30
 802e4ec:	f805 6b01 	strb.w	r6, [r5], #1
 802e4f0:	ec53 2b19 	vmov	r2, r3, d9
 802e4f4:	4680      	mov	r8, r0
 802e4f6:	4689      	mov	r9, r1
 802e4f8:	f7e2 fb08 	bl	8010b0c <__aeabi_dcmplt>
 802e4fc:	2800      	cmp	r0, #0
 802e4fe:	d164      	bne.n	802e5ca <_dtoa_r+0x62a>
 802e500:	4642      	mov	r2, r8
 802e502:	464b      	mov	r3, r9
 802e504:	4937      	ldr	r1, [pc, #220]	; (802e5e4 <_dtoa_r+0x644>)
 802e506:	2000      	movs	r0, #0
 802e508:	f7e1 fed6 	bl	80102b8 <__aeabi_dsub>
 802e50c:	ec53 2b19 	vmov	r2, r3, d9
 802e510:	f7e2 fafc 	bl	8010b0c <__aeabi_dcmplt>
 802e514:	2800      	cmp	r0, #0
 802e516:	f040 80b6 	bne.w	802e686 <_dtoa_r+0x6e6>
 802e51a:	9b02      	ldr	r3, [sp, #8]
 802e51c:	429d      	cmp	r5, r3
 802e51e:	f43f af7c 	beq.w	802e41a <_dtoa_r+0x47a>
 802e522:	4b31      	ldr	r3, [pc, #196]	; (802e5e8 <_dtoa_r+0x648>)
 802e524:	ec51 0b19 	vmov	r0, r1, d9
 802e528:	2200      	movs	r2, #0
 802e52a:	f7e2 f87d 	bl	8010628 <__aeabi_dmul>
 802e52e:	4b2e      	ldr	r3, [pc, #184]	; (802e5e8 <_dtoa_r+0x648>)
 802e530:	ec41 0b19 	vmov	d9, r0, r1
 802e534:	2200      	movs	r2, #0
 802e536:	4640      	mov	r0, r8
 802e538:	4649      	mov	r1, r9
 802e53a:	f7e2 f875 	bl	8010628 <__aeabi_dmul>
 802e53e:	4680      	mov	r8, r0
 802e540:	4689      	mov	r9, r1
 802e542:	e7c5      	b.n	802e4d0 <_dtoa_r+0x530>
 802e544:	ec51 0b17 	vmov	r0, r1, d7
 802e548:	f7e2 f86e 	bl	8010628 <__aeabi_dmul>
 802e54c:	9b02      	ldr	r3, [sp, #8]
 802e54e:	9d00      	ldr	r5, [sp, #0]
 802e550:	930f      	str	r3, [sp, #60]	; 0x3c
 802e552:	ec41 0b19 	vmov	d9, r0, r1
 802e556:	4649      	mov	r1, r9
 802e558:	4640      	mov	r0, r8
 802e55a:	f7e2 fb15 	bl	8010b88 <__aeabi_d2iz>
 802e55e:	4606      	mov	r6, r0
 802e560:	f7e1 fff8 	bl	8010554 <__aeabi_i2d>
 802e564:	3630      	adds	r6, #48	; 0x30
 802e566:	4602      	mov	r2, r0
 802e568:	460b      	mov	r3, r1
 802e56a:	4640      	mov	r0, r8
 802e56c:	4649      	mov	r1, r9
 802e56e:	f7e1 fea3 	bl	80102b8 <__aeabi_dsub>
 802e572:	f805 6b01 	strb.w	r6, [r5], #1
 802e576:	9b02      	ldr	r3, [sp, #8]
 802e578:	429d      	cmp	r5, r3
 802e57a:	4680      	mov	r8, r0
 802e57c:	4689      	mov	r9, r1
 802e57e:	f04f 0200 	mov.w	r2, #0
 802e582:	d124      	bne.n	802e5ce <_dtoa_r+0x62e>
 802e584:	4b1b      	ldr	r3, [pc, #108]	; (802e5f4 <_dtoa_r+0x654>)
 802e586:	ec51 0b19 	vmov	r0, r1, d9
 802e58a:	f7e1 fe97 	bl	80102bc <__adddf3>
 802e58e:	4602      	mov	r2, r0
 802e590:	460b      	mov	r3, r1
 802e592:	4640      	mov	r0, r8
 802e594:	4649      	mov	r1, r9
 802e596:	f7e2 fad7 	bl	8010b48 <__aeabi_dcmpgt>
 802e59a:	2800      	cmp	r0, #0
 802e59c:	d173      	bne.n	802e686 <_dtoa_r+0x6e6>
 802e59e:	ec53 2b19 	vmov	r2, r3, d9
 802e5a2:	4914      	ldr	r1, [pc, #80]	; (802e5f4 <_dtoa_r+0x654>)
 802e5a4:	2000      	movs	r0, #0
 802e5a6:	f7e1 fe87 	bl	80102b8 <__aeabi_dsub>
 802e5aa:	4602      	mov	r2, r0
 802e5ac:	460b      	mov	r3, r1
 802e5ae:	4640      	mov	r0, r8
 802e5b0:	4649      	mov	r1, r9
 802e5b2:	f7e2 faab 	bl	8010b0c <__aeabi_dcmplt>
 802e5b6:	2800      	cmp	r0, #0
 802e5b8:	f43f af2f 	beq.w	802e41a <_dtoa_r+0x47a>
 802e5bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802e5be:	1e6b      	subs	r3, r5, #1
 802e5c0:	930f      	str	r3, [sp, #60]	; 0x3c
 802e5c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802e5c6:	2b30      	cmp	r3, #48	; 0x30
 802e5c8:	d0f8      	beq.n	802e5bc <_dtoa_r+0x61c>
 802e5ca:	46bb      	mov	fp, r7
 802e5cc:	e04a      	b.n	802e664 <_dtoa_r+0x6c4>
 802e5ce:	4b06      	ldr	r3, [pc, #24]	; (802e5e8 <_dtoa_r+0x648>)
 802e5d0:	f7e2 f82a 	bl	8010628 <__aeabi_dmul>
 802e5d4:	4680      	mov	r8, r0
 802e5d6:	4689      	mov	r9, r1
 802e5d8:	e7bd      	b.n	802e556 <_dtoa_r+0x5b6>
 802e5da:	bf00      	nop
 802e5dc:	08034ed8 	.word	0x08034ed8
 802e5e0:	08034eb0 	.word	0x08034eb0
 802e5e4:	3ff00000 	.word	0x3ff00000
 802e5e8:	40240000 	.word	0x40240000
 802e5ec:	401c0000 	.word	0x401c0000
 802e5f0:	40140000 	.word	0x40140000
 802e5f4:	3fe00000 	.word	0x3fe00000
 802e5f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802e5fc:	9d00      	ldr	r5, [sp, #0]
 802e5fe:	4642      	mov	r2, r8
 802e600:	464b      	mov	r3, r9
 802e602:	4630      	mov	r0, r6
 802e604:	4639      	mov	r1, r7
 802e606:	f7e2 f939 	bl	801087c <__aeabi_ddiv>
 802e60a:	f7e2 fabd 	bl	8010b88 <__aeabi_d2iz>
 802e60e:	9001      	str	r0, [sp, #4]
 802e610:	f7e1 ffa0 	bl	8010554 <__aeabi_i2d>
 802e614:	4642      	mov	r2, r8
 802e616:	464b      	mov	r3, r9
 802e618:	f7e2 f806 	bl	8010628 <__aeabi_dmul>
 802e61c:	4602      	mov	r2, r0
 802e61e:	460b      	mov	r3, r1
 802e620:	4630      	mov	r0, r6
 802e622:	4639      	mov	r1, r7
 802e624:	f7e1 fe48 	bl	80102b8 <__aeabi_dsub>
 802e628:	9e01      	ldr	r6, [sp, #4]
 802e62a:	9f04      	ldr	r7, [sp, #16]
 802e62c:	3630      	adds	r6, #48	; 0x30
 802e62e:	f805 6b01 	strb.w	r6, [r5], #1
 802e632:	9e00      	ldr	r6, [sp, #0]
 802e634:	1bae      	subs	r6, r5, r6
 802e636:	42b7      	cmp	r7, r6
 802e638:	4602      	mov	r2, r0
 802e63a:	460b      	mov	r3, r1
 802e63c:	d134      	bne.n	802e6a8 <_dtoa_r+0x708>
 802e63e:	f7e1 fe3d 	bl	80102bc <__adddf3>
 802e642:	4642      	mov	r2, r8
 802e644:	464b      	mov	r3, r9
 802e646:	4606      	mov	r6, r0
 802e648:	460f      	mov	r7, r1
 802e64a:	f7e2 fa7d 	bl	8010b48 <__aeabi_dcmpgt>
 802e64e:	b9c8      	cbnz	r0, 802e684 <_dtoa_r+0x6e4>
 802e650:	4642      	mov	r2, r8
 802e652:	464b      	mov	r3, r9
 802e654:	4630      	mov	r0, r6
 802e656:	4639      	mov	r1, r7
 802e658:	f7e2 fa4e 	bl	8010af8 <__aeabi_dcmpeq>
 802e65c:	b110      	cbz	r0, 802e664 <_dtoa_r+0x6c4>
 802e65e:	9b01      	ldr	r3, [sp, #4]
 802e660:	07db      	lsls	r3, r3, #31
 802e662:	d40f      	bmi.n	802e684 <_dtoa_r+0x6e4>
 802e664:	4651      	mov	r1, sl
 802e666:	4620      	mov	r0, r4
 802e668:	f000 fb18 	bl	802ec9c <_Bfree>
 802e66c:	2300      	movs	r3, #0
 802e66e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802e670:	702b      	strb	r3, [r5, #0]
 802e672:	f10b 0301 	add.w	r3, fp, #1
 802e676:	6013      	str	r3, [r2, #0]
 802e678:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802e67a:	2b00      	cmp	r3, #0
 802e67c:	f43f ace2 	beq.w	802e044 <_dtoa_r+0xa4>
 802e680:	601d      	str	r5, [r3, #0]
 802e682:	e4df      	b.n	802e044 <_dtoa_r+0xa4>
 802e684:	465f      	mov	r7, fp
 802e686:	462b      	mov	r3, r5
 802e688:	461d      	mov	r5, r3
 802e68a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802e68e:	2a39      	cmp	r2, #57	; 0x39
 802e690:	d106      	bne.n	802e6a0 <_dtoa_r+0x700>
 802e692:	9a00      	ldr	r2, [sp, #0]
 802e694:	429a      	cmp	r2, r3
 802e696:	d1f7      	bne.n	802e688 <_dtoa_r+0x6e8>
 802e698:	9900      	ldr	r1, [sp, #0]
 802e69a:	2230      	movs	r2, #48	; 0x30
 802e69c:	3701      	adds	r7, #1
 802e69e:	700a      	strb	r2, [r1, #0]
 802e6a0:	781a      	ldrb	r2, [r3, #0]
 802e6a2:	3201      	adds	r2, #1
 802e6a4:	701a      	strb	r2, [r3, #0]
 802e6a6:	e790      	b.n	802e5ca <_dtoa_r+0x62a>
 802e6a8:	4ba3      	ldr	r3, [pc, #652]	; (802e938 <_dtoa_r+0x998>)
 802e6aa:	2200      	movs	r2, #0
 802e6ac:	f7e1 ffbc 	bl	8010628 <__aeabi_dmul>
 802e6b0:	2200      	movs	r2, #0
 802e6b2:	2300      	movs	r3, #0
 802e6b4:	4606      	mov	r6, r0
 802e6b6:	460f      	mov	r7, r1
 802e6b8:	f7e2 fa1e 	bl	8010af8 <__aeabi_dcmpeq>
 802e6bc:	2800      	cmp	r0, #0
 802e6be:	d09e      	beq.n	802e5fe <_dtoa_r+0x65e>
 802e6c0:	e7d0      	b.n	802e664 <_dtoa_r+0x6c4>
 802e6c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e6c4:	2a00      	cmp	r2, #0
 802e6c6:	f000 80ca 	beq.w	802e85e <_dtoa_r+0x8be>
 802e6ca:	9a07      	ldr	r2, [sp, #28]
 802e6cc:	2a01      	cmp	r2, #1
 802e6ce:	f300 80ad 	bgt.w	802e82c <_dtoa_r+0x88c>
 802e6d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802e6d4:	2a00      	cmp	r2, #0
 802e6d6:	f000 80a5 	beq.w	802e824 <_dtoa_r+0x884>
 802e6da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802e6de:	9e08      	ldr	r6, [sp, #32]
 802e6e0:	9d05      	ldr	r5, [sp, #20]
 802e6e2:	9a05      	ldr	r2, [sp, #20]
 802e6e4:	441a      	add	r2, r3
 802e6e6:	9205      	str	r2, [sp, #20]
 802e6e8:	9a06      	ldr	r2, [sp, #24]
 802e6ea:	2101      	movs	r1, #1
 802e6ec:	441a      	add	r2, r3
 802e6ee:	4620      	mov	r0, r4
 802e6f0:	9206      	str	r2, [sp, #24]
 802e6f2:	f000 fbd3 	bl	802ee9c <__i2b>
 802e6f6:	4607      	mov	r7, r0
 802e6f8:	b165      	cbz	r5, 802e714 <_dtoa_r+0x774>
 802e6fa:	9b06      	ldr	r3, [sp, #24]
 802e6fc:	2b00      	cmp	r3, #0
 802e6fe:	dd09      	ble.n	802e714 <_dtoa_r+0x774>
 802e700:	42ab      	cmp	r3, r5
 802e702:	9a05      	ldr	r2, [sp, #20]
 802e704:	bfa8      	it	ge
 802e706:	462b      	movge	r3, r5
 802e708:	1ad2      	subs	r2, r2, r3
 802e70a:	9205      	str	r2, [sp, #20]
 802e70c:	9a06      	ldr	r2, [sp, #24]
 802e70e:	1aed      	subs	r5, r5, r3
 802e710:	1ad3      	subs	r3, r2, r3
 802e712:	9306      	str	r3, [sp, #24]
 802e714:	9b08      	ldr	r3, [sp, #32]
 802e716:	b1f3      	cbz	r3, 802e756 <_dtoa_r+0x7b6>
 802e718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e71a:	2b00      	cmp	r3, #0
 802e71c:	f000 80a3 	beq.w	802e866 <_dtoa_r+0x8c6>
 802e720:	2e00      	cmp	r6, #0
 802e722:	dd10      	ble.n	802e746 <_dtoa_r+0x7a6>
 802e724:	4639      	mov	r1, r7
 802e726:	4632      	mov	r2, r6
 802e728:	4620      	mov	r0, r4
 802e72a:	f000 fc77 	bl	802f01c <__pow5mult>
 802e72e:	4652      	mov	r2, sl
 802e730:	4601      	mov	r1, r0
 802e732:	4607      	mov	r7, r0
 802e734:	4620      	mov	r0, r4
 802e736:	f000 fbc7 	bl	802eec8 <__multiply>
 802e73a:	4651      	mov	r1, sl
 802e73c:	4680      	mov	r8, r0
 802e73e:	4620      	mov	r0, r4
 802e740:	f000 faac 	bl	802ec9c <_Bfree>
 802e744:	46c2      	mov	sl, r8
 802e746:	9b08      	ldr	r3, [sp, #32]
 802e748:	1b9a      	subs	r2, r3, r6
 802e74a:	d004      	beq.n	802e756 <_dtoa_r+0x7b6>
 802e74c:	4651      	mov	r1, sl
 802e74e:	4620      	mov	r0, r4
 802e750:	f000 fc64 	bl	802f01c <__pow5mult>
 802e754:	4682      	mov	sl, r0
 802e756:	2101      	movs	r1, #1
 802e758:	4620      	mov	r0, r4
 802e75a:	f000 fb9f 	bl	802ee9c <__i2b>
 802e75e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e760:	2b00      	cmp	r3, #0
 802e762:	4606      	mov	r6, r0
 802e764:	f340 8081 	ble.w	802e86a <_dtoa_r+0x8ca>
 802e768:	461a      	mov	r2, r3
 802e76a:	4601      	mov	r1, r0
 802e76c:	4620      	mov	r0, r4
 802e76e:	f000 fc55 	bl	802f01c <__pow5mult>
 802e772:	9b07      	ldr	r3, [sp, #28]
 802e774:	2b01      	cmp	r3, #1
 802e776:	4606      	mov	r6, r0
 802e778:	dd7a      	ble.n	802e870 <_dtoa_r+0x8d0>
 802e77a:	f04f 0800 	mov.w	r8, #0
 802e77e:	6933      	ldr	r3, [r6, #16]
 802e780:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802e784:	6918      	ldr	r0, [r3, #16]
 802e786:	f000 fb3b 	bl	802ee00 <__hi0bits>
 802e78a:	f1c0 0020 	rsb	r0, r0, #32
 802e78e:	9b06      	ldr	r3, [sp, #24]
 802e790:	4418      	add	r0, r3
 802e792:	f010 001f 	ands.w	r0, r0, #31
 802e796:	f000 8094 	beq.w	802e8c2 <_dtoa_r+0x922>
 802e79a:	f1c0 0320 	rsb	r3, r0, #32
 802e79e:	2b04      	cmp	r3, #4
 802e7a0:	f340 8085 	ble.w	802e8ae <_dtoa_r+0x90e>
 802e7a4:	9b05      	ldr	r3, [sp, #20]
 802e7a6:	f1c0 001c 	rsb	r0, r0, #28
 802e7aa:	4403      	add	r3, r0
 802e7ac:	9305      	str	r3, [sp, #20]
 802e7ae:	9b06      	ldr	r3, [sp, #24]
 802e7b0:	4403      	add	r3, r0
 802e7b2:	4405      	add	r5, r0
 802e7b4:	9306      	str	r3, [sp, #24]
 802e7b6:	9b05      	ldr	r3, [sp, #20]
 802e7b8:	2b00      	cmp	r3, #0
 802e7ba:	dd05      	ble.n	802e7c8 <_dtoa_r+0x828>
 802e7bc:	4651      	mov	r1, sl
 802e7be:	461a      	mov	r2, r3
 802e7c0:	4620      	mov	r0, r4
 802e7c2:	f000 fc85 	bl	802f0d0 <__lshift>
 802e7c6:	4682      	mov	sl, r0
 802e7c8:	9b06      	ldr	r3, [sp, #24]
 802e7ca:	2b00      	cmp	r3, #0
 802e7cc:	dd05      	ble.n	802e7da <_dtoa_r+0x83a>
 802e7ce:	4631      	mov	r1, r6
 802e7d0:	461a      	mov	r2, r3
 802e7d2:	4620      	mov	r0, r4
 802e7d4:	f000 fc7c 	bl	802f0d0 <__lshift>
 802e7d8:	4606      	mov	r6, r0
 802e7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802e7dc:	2b00      	cmp	r3, #0
 802e7de:	d072      	beq.n	802e8c6 <_dtoa_r+0x926>
 802e7e0:	4631      	mov	r1, r6
 802e7e2:	4650      	mov	r0, sl
 802e7e4:	f000 fce0 	bl	802f1a8 <__mcmp>
 802e7e8:	2800      	cmp	r0, #0
 802e7ea:	da6c      	bge.n	802e8c6 <_dtoa_r+0x926>
 802e7ec:	2300      	movs	r3, #0
 802e7ee:	4651      	mov	r1, sl
 802e7f0:	220a      	movs	r2, #10
 802e7f2:	4620      	mov	r0, r4
 802e7f4:	f000 fa74 	bl	802ece0 <__multadd>
 802e7f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e7fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 802e7fe:	4682      	mov	sl, r0
 802e800:	2b00      	cmp	r3, #0
 802e802:	f000 81b0 	beq.w	802eb66 <_dtoa_r+0xbc6>
 802e806:	2300      	movs	r3, #0
 802e808:	4639      	mov	r1, r7
 802e80a:	220a      	movs	r2, #10
 802e80c:	4620      	mov	r0, r4
 802e80e:	f000 fa67 	bl	802ece0 <__multadd>
 802e812:	9b01      	ldr	r3, [sp, #4]
 802e814:	2b00      	cmp	r3, #0
 802e816:	4607      	mov	r7, r0
 802e818:	f300 8096 	bgt.w	802e948 <_dtoa_r+0x9a8>
 802e81c:	9b07      	ldr	r3, [sp, #28]
 802e81e:	2b02      	cmp	r3, #2
 802e820:	dc59      	bgt.n	802e8d6 <_dtoa_r+0x936>
 802e822:	e091      	b.n	802e948 <_dtoa_r+0x9a8>
 802e824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802e826:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802e82a:	e758      	b.n	802e6de <_dtoa_r+0x73e>
 802e82c:	9b04      	ldr	r3, [sp, #16]
 802e82e:	1e5e      	subs	r6, r3, #1
 802e830:	9b08      	ldr	r3, [sp, #32]
 802e832:	42b3      	cmp	r3, r6
 802e834:	bfbf      	itttt	lt
 802e836:	9b08      	ldrlt	r3, [sp, #32]
 802e838:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802e83a:	9608      	strlt	r6, [sp, #32]
 802e83c:	1af3      	sublt	r3, r6, r3
 802e83e:	bfb4      	ite	lt
 802e840:	18d2      	addlt	r2, r2, r3
 802e842:	1b9e      	subge	r6, r3, r6
 802e844:	9b04      	ldr	r3, [sp, #16]
 802e846:	bfbc      	itt	lt
 802e848:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802e84a:	2600      	movlt	r6, #0
 802e84c:	2b00      	cmp	r3, #0
 802e84e:	bfb7      	itett	lt
 802e850:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802e854:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802e858:	1a9d      	sublt	r5, r3, r2
 802e85a:	2300      	movlt	r3, #0
 802e85c:	e741      	b.n	802e6e2 <_dtoa_r+0x742>
 802e85e:	9e08      	ldr	r6, [sp, #32]
 802e860:	9d05      	ldr	r5, [sp, #20]
 802e862:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802e864:	e748      	b.n	802e6f8 <_dtoa_r+0x758>
 802e866:	9a08      	ldr	r2, [sp, #32]
 802e868:	e770      	b.n	802e74c <_dtoa_r+0x7ac>
 802e86a:	9b07      	ldr	r3, [sp, #28]
 802e86c:	2b01      	cmp	r3, #1
 802e86e:	dc19      	bgt.n	802e8a4 <_dtoa_r+0x904>
 802e870:	9b02      	ldr	r3, [sp, #8]
 802e872:	b9bb      	cbnz	r3, 802e8a4 <_dtoa_r+0x904>
 802e874:	9b03      	ldr	r3, [sp, #12]
 802e876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802e87a:	b99b      	cbnz	r3, 802e8a4 <_dtoa_r+0x904>
 802e87c:	9b03      	ldr	r3, [sp, #12]
 802e87e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802e882:	0d1b      	lsrs	r3, r3, #20
 802e884:	051b      	lsls	r3, r3, #20
 802e886:	b183      	cbz	r3, 802e8aa <_dtoa_r+0x90a>
 802e888:	9b05      	ldr	r3, [sp, #20]
 802e88a:	3301      	adds	r3, #1
 802e88c:	9305      	str	r3, [sp, #20]
 802e88e:	9b06      	ldr	r3, [sp, #24]
 802e890:	3301      	adds	r3, #1
 802e892:	9306      	str	r3, [sp, #24]
 802e894:	f04f 0801 	mov.w	r8, #1
 802e898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802e89a:	2b00      	cmp	r3, #0
 802e89c:	f47f af6f 	bne.w	802e77e <_dtoa_r+0x7de>
 802e8a0:	2001      	movs	r0, #1
 802e8a2:	e774      	b.n	802e78e <_dtoa_r+0x7ee>
 802e8a4:	f04f 0800 	mov.w	r8, #0
 802e8a8:	e7f6      	b.n	802e898 <_dtoa_r+0x8f8>
 802e8aa:	4698      	mov	r8, r3
 802e8ac:	e7f4      	b.n	802e898 <_dtoa_r+0x8f8>
 802e8ae:	d082      	beq.n	802e7b6 <_dtoa_r+0x816>
 802e8b0:	9a05      	ldr	r2, [sp, #20]
 802e8b2:	331c      	adds	r3, #28
 802e8b4:	441a      	add	r2, r3
 802e8b6:	9205      	str	r2, [sp, #20]
 802e8b8:	9a06      	ldr	r2, [sp, #24]
 802e8ba:	441a      	add	r2, r3
 802e8bc:	441d      	add	r5, r3
 802e8be:	9206      	str	r2, [sp, #24]
 802e8c0:	e779      	b.n	802e7b6 <_dtoa_r+0x816>
 802e8c2:	4603      	mov	r3, r0
 802e8c4:	e7f4      	b.n	802e8b0 <_dtoa_r+0x910>
 802e8c6:	9b04      	ldr	r3, [sp, #16]
 802e8c8:	2b00      	cmp	r3, #0
 802e8ca:	dc37      	bgt.n	802e93c <_dtoa_r+0x99c>
 802e8cc:	9b07      	ldr	r3, [sp, #28]
 802e8ce:	2b02      	cmp	r3, #2
 802e8d0:	dd34      	ble.n	802e93c <_dtoa_r+0x99c>
 802e8d2:	9b04      	ldr	r3, [sp, #16]
 802e8d4:	9301      	str	r3, [sp, #4]
 802e8d6:	9b01      	ldr	r3, [sp, #4]
 802e8d8:	b963      	cbnz	r3, 802e8f4 <_dtoa_r+0x954>
 802e8da:	4631      	mov	r1, r6
 802e8dc:	2205      	movs	r2, #5
 802e8de:	4620      	mov	r0, r4
 802e8e0:	f000 f9fe 	bl	802ece0 <__multadd>
 802e8e4:	4601      	mov	r1, r0
 802e8e6:	4606      	mov	r6, r0
 802e8e8:	4650      	mov	r0, sl
 802e8ea:	f000 fc5d 	bl	802f1a8 <__mcmp>
 802e8ee:	2800      	cmp	r0, #0
 802e8f0:	f73f adbb 	bgt.w	802e46a <_dtoa_r+0x4ca>
 802e8f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e8f6:	9d00      	ldr	r5, [sp, #0]
 802e8f8:	ea6f 0b03 	mvn.w	fp, r3
 802e8fc:	f04f 0800 	mov.w	r8, #0
 802e900:	4631      	mov	r1, r6
 802e902:	4620      	mov	r0, r4
 802e904:	f000 f9ca 	bl	802ec9c <_Bfree>
 802e908:	2f00      	cmp	r7, #0
 802e90a:	f43f aeab 	beq.w	802e664 <_dtoa_r+0x6c4>
 802e90e:	f1b8 0f00 	cmp.w	r8, #0
 802e912:	d005      	beq.n	802e920 <_dtoa_r+0x980>
 802e914:	45b8      	cmp	r8, r7
 802e916:	d003      	beq.n	802e920 <_dtoa_r+0x980>
 802e918:	4641      	mov	r1, r8
 802e91a:	4620      	mov	r0, r4
 802e91c:	f000 f9be 	bl	802ec9c <_Bfree>
 802e920:	4639      	mov	r1, r7
 802e922:	4620      	mov	r0, r4
 802e924:	f000 f9ba 	bl	802ec9c <_Bfree>
 802e928:	e69c      	b.n	802e664 <_dtoa_r+0x6c4>
 802e92a:	2600      	movs	r6, #0
 802e92c:	4637      	mov	r7, r6
 802e92e:	e7e1      	b.n	802e8f4 <_dtoa_r+0x954>
 802e930:	46bb      	mov	fp, r7
 802e932:	4637      	mov	r7, r6
 802e934:	e599      	b.n	802e46a <_dtoa_r+0x4ca>
 802e936:	bf00      	nop
 802e938:	40240000 	.word	0x40240000
 802e93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e93e:	2b00      	cmp	r3, #0
 802e940:	f000 80c8 	beq.w	802ead4 <_dtoa_r+0xb34>
 802e944:	9b04      	ldr	r3, [sp, #16]
 802e946:	9301      	str	r3, [sp, #4]
 802e948:	2d00      	cmp	r5, #0
 802e94a:	dd05      	ble.n	802e958 <_dtoa_r+0x9b8>
 802e94c:	4639      	mov	r1, r7
 802e94e:	462a      	mov	r2, r5
 802e950:	4620      	mov	r0, r4
 802e952:	f000 fbbd 	bl	802f0d0 <__lshift>
 802e956:	4607      	mov	r7, r0
 802e958:	f1b8 0f00 	cmp.w	r8, #0
 802e95c:	d05b      	beq.n	802ea16 <_dtoa_r+0xa76>
 802e95e:	6879      	ldr	r1, [r7, #4]
 802e960:	4620      	mov	r0, r4
 802e962:	f000 f95b 	bl	802ec1c <_Balloc>
 802e966:	4605      	mov	r5, r0
 802e968:	b928      	cbnz	r0, 802e976 <_dtoa_r+0x9d6>
 802e96a:	4b83      	ldr	r3, [pc, #524]	; (802eb78 <_dtoa_r+0xbd8>)
 802e96c:	4602      	mov	r2, r0
 802e96e:	f240 21ef 	movw	r1, #751	; 0x2ef
 802e972:	f7ff bb2e 	b.w	802dfd2 <_dtoa_r+0x32>
 802e976:	693a      	ldr	r2, [r7, #16]
 802e978:	3202      	adds	r2, #2
 802e97a:	0092      	lsls	r2, r2, #2
 802e97c:	f107 010c 	add.w	r1, r7, #12
 802e980:	300c      	adds	r0, #12
 802e982:	f7ff fa68 	bl	802de56 <memcpy>
 802e986:	2201      	movs	r2, #1
 802e988:	4629      	mov	r1, r5
 802e98a:	4620      	mov	r0, r4
 802e98c:	f000 fba0 	bl	802f0d0 <__lshift>
 802e990:	9b00      	ldr	r3, [sp, #0]
 802e992:	3301      	adds	r3, #1
 802e994:	9304      	str	r3, [sp, #16]
 802e996:	e9dd 2300 	ldrd	r2, r3, [sp]
 802e99a:	4413      	add	r3, r2
 802e99c:	9308      	str	r3, [sp, #32]
 802e99e:	9b02      	ldr	r3, [sp, #8]
 802e9a0:	f003 0301 	and.w	r3, r3, #1
 802e9a4:	46b8      	mov	r8, r7
 802e9a6:	9306      	str	r3, [sp, #24]
 802e9a8:	4607      	mov	r7, r0
 802e9aa:	9b04      	ldr	r3, [sp, #16]
 802e9ac:	4631      	mov	r1, r6
 802e9ae:	3b01      	subs	r3, #1
 802e9b0:	4650      	mov	r0, sl
 802e9b2:	9301      	str	r3, [sp, #4]
 802e9b4:	f7ff fa6b 	bl	802de8e <quorem>
 802e9b8:	4641      	mov	r1, r8
 802e9ba:	9002      	str	r0, [sp, #8]
 802e9bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802e9c0:	4650      	mov	r0, sl
 802e9c2:	f000 fbf1 	bl	802f1a8 <__mcmp>
 802e9c6:	463a      	mov	r2, r7
 802e9c8:	9005      	str	r0, [sp, #20]
 802e9ca:	4631      	mov	r1, r6
 802e9cc:	4620      	mov	r0, r4
 802e9ce:	f000 fc07 	bl	802f1e0 <__mdiff>
 802e9d2:	68c2      	ldr	r2, [r0, #12]
 802e9d4:	4605      	mov	r5, r0
 802e9d6:	bb02      	cbnz	r2, 802ea1a <_dtoa_r+0xa7a>
 802e9d8:	4601      	mov	r1, r0
 802e9da:	4650      	mov	r0, sl
 802e9dc:	f000 fbe4 	bl	802f1a8 <__mcmp>
 802e9e0:	4602      	mov	r2, r0
 802e9e2:	4629      	mov	r1, r5
 802e9e4:	4620      	mov	r0, r4
 802e9e6:	9209      	str	r2, [sp, #36]	; 0x24
 802e9e8:	f000 f958 	bl	802ec9c <_Bfree>
 802e9ec:	9b07      	ldr	r3, [sp, #28]
 802e9ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e9f0:	9d04      	ldr	r5, [sp, #16]
 802e9f2:	ea43 0102 	orr.w	r1, r3, r2
 802e9f6:	9b06      	ldr	r3, [sp, #24]
 802e9f8:	4319      	orrs	r1, r3
 802e9fa:	d110      	bne.n	802ea1e <_dtoa_r+0xa7e>
 802e9fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802ea00:	d029      	beq.n	802ea56 <_dtoa_r+0xab6>
 802ea02:	9b05      	ldr	r3, [sp, #20]
 802ea04:	2b00      	cmp	r3, #0
 802ea06:	dd02      	ble.n	802ea0e <_dtoa_r+0xa6e>
 802ea08:	9b02      	ldr	r3, [sp, #8]
 802ea0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802ea0e:	9b01      	ldr	r3, [sp, #4]
 802ea10:	f883 9000 	strb.w	r9, [r3]
 802ea14:	e774      	b.n	802e900 <_dtoa_r+0x960>
 802ea16:	4638      	mov	r0, r7
 802ea18:	e7ba      	b.n	802e990 <_dtoa_r+0x9f0>
 802ea1a:	2201      	movs	r2, #1
 802ea1c:	e7e1      	b.n	802e9e2 <_dtoa_r+0xa42>
 802ea1e:	9b05      	ldr	r3, [sp, #20]
 802ea20:	2b00      	cmp	r3, #0
 802ea22:	db04      	blt.n	802ea2e <_dtoa_r+0xa8e>
 802ea24:	9907      	ldr	r1, [sp, #28]
 802ea26:	430b      	orrs	r3, r1
 802ea28:	9906      	ldr	r1, [sp, #24]
 802ea2a:	430b      	orrs	r3, r1
 802ea2c:	d120      	bne.n	802ea70 <_dtoa_r+0xad0>
 802ea2e:	2a00      	cmp	r2, #0
 802ea30:	dded      	ble.n	802ea0e <_dtoa_r+0xa6e>
 802ea32:	4651      	mov	r1, sl
 802ea34:	2201      	movs	r2, #1
 802ea36:	4620      	mov	r0, r4
 802ea38:	f000 fb4a 	bl	802f0d0 <__lshift>
 802ea3c:	4631      	mov	r1, r6
 802ea3e:	4682      	mov	sl, r0
 802ea40:	f000 fbb2 	bl	802f1a8 <__mcmp>
 802ea44:	2800      	cmp	r0, #0
 802ea46:	dc03      	bgt.n	802ea50 <_dtoa_r+0xab0>
 802ea48:	d1e1      	bne.n	802ea0e <_dtoa_r+0xa6e>
 802ea4a:	f019 0f01 	tst.w	r9, #1
 802ea4e:	d0de      	beq.n	802ea0e <_dtoa_r+0xa6e>
 802ea50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802ea54:	d1d8      	bne.n	802ea08 <_dtoa_r+0xa68>
 802ea56:	9a01      	ldr	r2, [sp, #4]
 802ea58:	2339      	movs	r3, #57	; 0x39
 802ea5a:	7013      	strb	r3, [r2, #0]
 802ea5c:	462b      	mov	r3, r5
 802ea5e:	461d      	mov	r5, r3
 802ea60:	3b01      	subs	r3, #1
 802ea62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802ea66:	2a39      	cmp	r2, #57	; 0x39
 802ea68:	d06c      	beq.n	802eb44 <_dtoa_r+0xba4>
 802ea6a:	3201      	adds	r2, #1
 802ea6c:	701a      	strb	r2, [r3, #0]
 802ea6e:	e747      	b.n	802e900 <_dtoa_r+0x960>
 802ea70:	2a00      	cmp	r2, #0
 802ea72:	dd07      	ble.n	802ea84 <_dtoa_r+0xae4>
 802ea74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802ea78:	d0ed      	beq.n	802ea56 <_dtoa_r+0xab6>
 802ea7a:	9a01      	ldr	r2, [sp, #4]
 802ea7c:	f109 0301 	add.w	r3, r9, #1
 802ea80:	7013      	strb	r3, [r2, #0]
 802ea82:	e73d      	b.n	802e900 <_dtoa_r+0x960>
 802ea84:	9b04      	ldr	r3, [sp, #16]
 802ea86:	9a08      	ldr	r2, [sp, #32]
 802ea88:	f803 9c01 	strb.w	r9, [r3, #-1]
 802ea8c:	4293      	cmp	r3, r2
 802ea8e:	d043      	beq.n	802eb18 <_dtoa_r+0xb78>
 802ea90:	4651      	mov	r1, sl
 802ea92:	2300      	movs	r3, #0
 802ea94:	220a      	movs	r2, #10
 802ea96:	4620      	mov	r0, r4
 802ea98:	f000 f922 	bl	802ece0 <__multadd>
 802ea9c:	45b8      	cmp	r8, r7
 802ea9e:	4682      	mov	sl, r0
 802eaa0:	f04f 0300 	mov.w	r3, #0
 802eaa4:	f04f 020a 	mov.w	r2, #10
 802eaa8:	4641      	mov	r1, r8
 802eaaa:	4620      	mov	r0, r4
 802eaac:	d107      	bne.n	802eabe <_dtoa_r+0xb1e>
 802eaae:	f000 f917 	bl	802ece0 <__multadd>
 802eab2:	4680      	mov	r8, r0
 802eab4:	4607      	mov	r7, r0
 802eab6:	9b04      	ldr	r3, [sp, #16]
 802eab8:	3301      	adds	r3, #1
 802eaba:	9304      	str	r3, [sp, #16]
 802eabc:	e775      	b.n	802e9aa <_dtoa_r+0xa0a>
 802eabe:	f000 f90f 	bl	802ece0 <__multadd>
 802eac2:	4639      	mov	r1, r7
 802eac4:	4680      	mov	r8, r0
 802eac6:	2300      	movs	r3, #0
 802eac8:	220a      	movs	r2, #10
 802eaca:	4620      	mov	r0, r4
 802eacc:	f000 f908 	bl	802ece0 <__multadd>
 802ead0:	4607      	mov	r7, r0
 802ead2:	e7f0      	b.n	802eab6 <_dtoa_r+0xb16>
 802ead4:	9b04      	ldr	r3, [sp, #16]
 802ead6:	9301      	str	r3, [sp, #4]
 802ead8:	9d00      	ldr	r5, [sp, #0]
 802eada:	4631      	mov	r1, r6
 802eadc:	4650      	mov	r0, sl
 802eade:	f7ff f9d6 	bl	802de8e <quorem>
 802eae2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802eae6:	9b00      	ldr	r3, [sp, #0]
 802eae8:	f805 9b01 	strb.w	r9, [r5], #1
 802eaec:	1aea      	subs	r2, r5, r3
 802eaee:	9b01      	ldr	r3, [sp, #4]
 802eaf0:	4293      	cmp	r3, r2
 802eaf2:	dd07      	ble.n	802eb04 <_dtoa_r+0xb64>
 802eaf4:	4651      	mov	r1, sl
 802eaf6:	2300      	movs	r3, #0
 802eaf8:	220a      	movs	r2, #10
 802eafa:	4620      	mov	r0, r4
 802eafc:	f000 f8f0 	bl	802ece0 <__multadd>
 802eb00:	4682      	mov	sl, r0
 802eb02:	e7ea      	b.n	802eada <_dtoa_r+0xb3a>
 802eb04:	9b01      	ldr	r3, [sp, #4]
 802eb06:	2b00      	cmp	r3, #0
 802eb08:	bfc8      	it	gt
 802eb0a:	461d      	movgt	r5, r3
 802eb0c:	9b00      	ldr	r3, [sp, #0]
 802eb0e:	bfd8      	it	le
 802eb10:	2501      	movle	r5, #1
 802eb12:	441d      	add	r5, r3
 802eb14:	f04f 0800 	mov.w	r8, #0
 802eb18:	4651      	mov	r1, sl
 802eb1a:	2201      	movs	r2, #1
 802eb1c:	4620      	mov	r0, r4
 802eb1e:	f000 fad7 	bl	802f0d0 <__lshift>
 802eb22:	4631      	mov	r1, r6
 802eb24:	4682      	mov	sl, r0
 802eb26:	f000 fb3f 	bl	802f1a8 <__mcmp>
 802eb2a:	2800      	cmp	r0, #0
 802eb2c:	dc96      	bgt.n	802ea5c <_dtoa_r+0xabc>
 802eb2e:	d102      	bne.n	802eb36 <_dtoa_r+0xb96>
 802eb30:	f019 0f01 	tst.w	r9, #1
 802eb34:	d192      	bne.n	802ea5c <_dtoa_r+0xabc>
 802eb36:	462b      	mov	r3, r5
 802eb38:	461d      	mov	r5, r3
 802eb3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802eb3e:	2a30      	cmp	r2, #48	; 0x30
 802eb40:	d0fa      	beq.n	802eb38 <_dtoa_r+0xb98>
 802eb42:	e6dd      	b.n	802e900 <_dtoa_r+0x960>
 802eb44:	9a00      	ldr	r2, [sp, #0]
 802eb46:	429a      	cmp	r2, r3
 802eb48:	d189      	bne.n	802ea5e <_dtoa_r+0xabe>
 802eb4a:	f10b 0b01 	add.w	fp, fp, #1
 802eb4e:	2331      	movs	r3, #49	; 0x31
 802eb50:	e796      	b.n	802ea80 <_dtoa_r+0xae0>
 802eb52:	4b0a      	ldr	r3, [pc, #40]	; (802eb7c <_dtoa_r+0xbdc>)
 802eb54:	f7ff ba99 	b.w	802e08a <_dtoa_r+0xea>
 802eb58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802eb5a:	2b00      	cmp	r3, #0
 802eb5c:	f47f aa6d 	bne.w	802e03a <_dtoa_r+0x9a>
 802eb60:	4b07      	ldr	r3, [pc, #28]	; (802eb80 <_dtoa_r+0xbe0>)
 802eb62:	f7ff ba92 	b.w	802e08a <_dtoa_r+0xea>
 802eb66:	9b01      	ldr	r3, [sp, #4]
 802eb68:	2b00      	cmp	r3, #0
 802eb6a:	dcb5      	bgt.n	802ead8 <_dtoa_r+0xb38>
 802eb6c:	9b07      	ldr	r3, [sp, #28]
 802eb6e:	2b02      	cmp	r3, #2
 802eb70:	f73f aeb1 	bgt.w	802e8d6 <_dtoa_r+0x936>
 802eb74:	e7b0      	b.n	802ead8 <_dtoa_r+0xb38>
 802eb76:	bf00      	nop
 802eb78:	08034e41 	.word	0x08034e41
 802eb7c:	08035128 	.word	0x08035128
 802eb80:	08034ddc 	.word	0x08034ddc

0802eb84 <_free_r>:
 802eb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802eb86:	2900      	cmp	r1, #0
 802eb88:	d044      	beq.n	802ec14 <_free_r+0x90>
 802eb8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802eb8e:	9001      	str	r0, [sp, #4]
 802eb90:	2b00      	cmp	r3, #0
 802eb92:	f1a1 0404 	sub.w	r4, r1, #4
 802eb96:	bfb8      	it	lt
 802eb98:	18e4      	addlt	r4, r4, r3
 802eb9a:	f7fd fe9b 	bl	802c8d4 <__malloc_lock>
 802eb9e:	4a1e      	ldr	r2, [pc, #120]	; (802ec18 <_free_r+0x94>)
 802eba0:	9801      	ldr	r0, [sp, #4]
 802eba2:	6813      	ldr	r3, [r2, #0]
 802eba4:	b933      	cbnz	r3, 802ebb4 <_free_r+0x30>
 802eba6:	6063      	str	r3, [r4, #4]
 802eba8:	6014      	str	r4, [r2, #0]
 802ebaa:	b003      	add	sp, #12
 802ebac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ebb0:	f7fd be96 	b.w	802c8e0 <__malloc_unlock>
 802ebb4:	42a3      	cmp	r3, r4
 802ebb6:	d908      	bls.n	802ebca <_free_r+0x46>
 802ebb8:	6825      	ldr	r5, [r4, #0]
 802ebba:	1961      	adds	r1, r4, r5
 802ebbc:	428b      	cmp	r3, r1
 802ebbe:	bf01      	itttt	eq
 802ebc0:	6819      	ldreq	r1, [r3, #0]
 802ebc2:	685b      	ldreq	r3, [r3, #4]
 802ebc4:	1949      	addeq	r1, r1, r5
 802ebc6:	6021      	streq	r1, [r4, #0]
 802ebc8:	e7ed      	b.n	802eba6 <_free_r+0x22>
 802ebca:	461a      	mov	r2, r3
 802ebcc:	685b      	ldr	r3, [r3, #4]
 802ebce:	b10b      	cbz	r3, 802ebd4 <_free_r+0x50>
 802ebd0:	42a3      	cmp	r3, r4
 802ebd2:	d9fa      	bls.n	802ebca <_free_r+0x46>
 802ebd4:	6811      	ldr	r1, [r2, #0]
 802ebd6:	1855      	adds	r5, r2, r1
 802ebd8:	42a5      	cmp	r5, r4
 802ebda:	d10b      	bne.n	802ebf4 <_free_r+0x70>
 802ebdc:	6824      	ldr	r4, [r4, #0]
 802ebde:	4421      	add	r1, r4
 802ebe0:	1854      	adds	r4, r2, r1
 802ebe2:	42a3      	cmp	r3, r4
 802ebe4:	6011      	str	r1, [r2, #0]
 802ebe6:	d1e0      	bne.n	802ebaa <_free_r+0x26>
 802ebe8:	681c      	ldr	r4, [r3, #0]
 802ebea:	685b      	ldr	r3, [r3, #4]
 802ebec:	6053      	str	r3, [r2, #4]
 802ebee:	440c      	add	r4, r1
 802ebf0:	6014      	str	r4, [r2, #0]
 802ebf2:	e7da      	b.n	802ebaa <_free_r+0x26>
 802ebf4:	d902      	bls.n	802ebfc <_free_r+0x78>
 802ebf6:	230c      	movs	r3, #12
 802ebf8:	6003      	str	r3, [r0, #0]
 802ebfa:	e7d6      	b.n	802ebaa <_free_r+0x26>
 802ebfc:	6825      	ldr	r5, [r4, #0]
 802ebfe:	1961      	adds	r1, r4, r5
 802ec00:	428b      	cmp	r3, r1
 802ec02:	bf04      	itt	eq
 802ec04:	6819      	ldreq	r1, [r3, #0]
 802ec06:	685b      	ldreq	r3, [r3, #4]
 802ec08:	6063      	str	r3, [r4, #4]
 802ec0a:	bf04      	itt	eq
 802ec0c:	1949      	addeq	r1, r1, r5
 802ec0e:	6021      	streq	r1, [r4, #0]
 802ec10:	6054      	str	r4, [r2, #4]
 802ec12:	e7ca      	b.n	802ebaa <_free_r+0x26>
 802ec14:	b003      	add	sp, #12
 802ec16:	bd30      	pop	{r4, r5, pc}
 802ec18:	2000d9c8 	.word	0x2000d9c8

0802ec1c <_Balloc>:
 802ec1c:	b570      	push	{r4, r5, r6, lr}
 802ec1e:	69c6      	ldr	r6, [r0, #28]
 802ec20:	4604      	mov	r4, r0
 802ec22:	460d      	mov	r5, r1
 802ec24:	b976      	cbnz	r6, 802ec44 <_Balloc+0x28>
 802ec26:	2010      	movs	r0, #16
 802ec28:	f7fd fda4 	bl	802c774 <malloc>
 802ec2c:	4602      	mov	r2, r0
 802ec2e:	61e0      	str	r0, [r4, #28]
 802ec30:	b920      	cbnz	r0, 802ec3c <_Balloc+0x20>
 802ec32:	4b18      	ldr	r3, [pc, #96]	; (802ec94 <_Balloc+0x78>)
 802ec34:	4818      	ldr	r0, [pc, #96]	; (802ec98 <_Balloc+0x7c>)
 802ec36:	216b      	movs	r1, #107	; 0x6b
 802ec38:	f7fd fd68 	bl	802c70c <__assert_func>
 802ec3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ec40:	6006      	str	r6, [r0, #0]
 802ec42:	60c6      	str	r6, [r0, #12]
 802ec44:	69e6      	ldr	r6, [r4, #28]
 802ec46:	68f3      	ldr	r3, [r6, #12]
 802ec48:	b183      	cbz	r3, 802ec6c <_Balloc+0x50>
 802ec4a:	69e3      	ldr	r3, [r4, #28]
 802ec4c:	68db      	ldr	r3, [r3, #12]
 802ec4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802ec52:	b9b8      	cbnz	r0, 802ec84 <_Balloc+0x68>
 802ec54:	2101      	movs	r1, #1
 802ec56:	fa01 f605 	lsl.w	r6, r1, r5
 802ec5a:	1d72      	adds	r2, r6, #5
 802ec5c:	0092      	lsls	r2, r2, #2
 802ec5e:	4620      	mov	r0, r4
 802ec60:	f7fd fd72 	bl	802c748 <_calloc_r>
 802ec64:	b160      	cbz	r0, 802ec80 <_Balloc+0x64>
 802ec66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802ec6a:	e00e      	b.n	802ec8a <_Balloc+0x6e>
 802ec6c:	2221      	movs	r2, #33	; 0x21
 802ec6e:	2104      	movs	r1, #4
 802ec70:	4620      	mov	r0, r4
 802ec72:	f7fd fd69 	bl	802c748 <_calloc_r>
 802ec76:	69e3      	ldr	r3, [r4, #28]
 802ec78:	60f0      	str	r0, [r6, #12]
 802ec7a:	68db      	ldr	r3, [r3, #12]
 802ec7c:	2b00      	cmp	r3, #0
 802ec7e:	d1e4      	bne.n	802ec4a <_Balloc+0x2e>
 802ec80:	2000      	movs	r0, #0
 802ec82:	bd70      	pop	{r4, r5, r6, pc}
 802ec84:	6802      	ldr	r2, [r0, #0]
 802ec86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802ec8a:	2300      	movs	r3, #0
 802ec8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802ec90:	e7f7      	b.n	802ec82 <_Balloc+0x66>
 802ec92:	bf00      	nop
 802ec94:	08034d6b 	.word	0x08034d6b
 802ec98:	08034e52 	.word	0x08034e52

0802ec9c <_Bfree>:
 802ec9c:	b570      	push	{r4, r5, r6, lr}
 802ec9e:	69c6      	ldr	r6, [r0, #28]
 802eca0:	4605      	mov	r5, r0
 802eca2:	460c      	mov	r4, r1
 802eca4:	b976      	cbnz	r6, 802ecc4 <_Bfree+0x28>
 802eca6:	2010      	movs	r0, #16
 802eca8:	f7fd fd64 	bl	802c774 <malloc>
 802ecac:	4602      	mov	r2, r0
 802ecae:	61e8      	str	r0, [r5, #28]
 802ecb0:	b920      	cbnz	r0, 802ecbc <_Bfree+0x20>
 802ecb2:	4b09      	ldr	r3, [pc, #36]	; (802ecd8 <_Bfree+0x3c>)
 802ecb4:	4809      	ldr	r0, [pc, #36]	; (802ecdc <_Bfree+0x40>)
 802ecb6:	218f      	movs	r1, #143	; 0x8f
 802ecb8:	f7fd fd28 	bl	802c70c <__assert_func>
 802ecbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802ecc0:	6006      	str	r6, [r0, #0]
 802ecc2:	60c6      	str	r6, [r0, #12]
 802ecc4:	b13c      	cbz	r4, 802ecd6 <_Bfree+0x3a>
 802ecc6:	69eb      	ldr	r3, [r5, #28]
 802ecc8:	6862      	ldr	r2, [r4, #4]
 802ecca:	68db      	ldr	r3, [r3, #12]
 802eccc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802ecd0:	6021      	str	r1, [r4, #0]
 802ecd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802ecd6:	bd70      	pop	{r4, r5, r6, pc}
 802ecd8:	08034d6b 	.word	0x08034d6b
 802ecdc:	08034e52 	.word	0x08034e52

0802ece0 <__multadd>:
 802ece0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ece4:	690d      	ldr	r5, [r1, #16]
 802ece6:	4607      	mov	r7, r0
 802ece8:	460c      	mov	r4, r1
 802ecea:	461e      	mov	r6, r3
 802ecec:	f101 0c14 	add.w	ip, r1, #20
 802ecf0:	2000      	movs	r0, #0
 802ecf2:	f8dc 3000 	ldr.w	r3, [ip]
 802ecf6:	b299      	uxth	r1, r3
 802ecf8:	fb02 6101 	mla	r1, r2, r1, r6
 802ecfc:	0c1e      	lsrs	r6, r3, #16
 802ecfe:	0c0b      	lsrs	r3, r1, #16
 802ed00:	fb02 3306 	mla	r3, r2, r6, r3
 802ed04:	b289      	uxth	r1, r1
 802ed06:	3001      	adds	r0, #1
 802ed08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802ed0c:	4285      	cmp	r5, r0
 802ed0e:	f84c 1b04 	str.w	r1, [ip], #4
 802ed12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802ed16:	dcec      	bgt.n	802ecf2 <__multadd+0x12>
 802ed18:	b30e      	cbz	r6, 802ed5e <__multadd+0x7e>
 802ed1a:	68a3      	ldr	r3, [r4, #8]
 802ed1c:	42ab      	cmp	r3, r5
 802ed1e:	dc19      	bgt.n	802ed54 <__multadd+0x74>
 802ed20:	6861      	ldr	r1, [r4, #4]
 802ed22:	4638      	mov	r0, r7
 802ed24:	3101      	adds	r1, #1
 802ed26:	f7ff ff79 	bl	802ec1c <_Balloc>
 802ed2a:	4680      	mov	r8, r0
 802ed2c:	b928      	cbnz	r0, 802ed3a <__multadd+0x5a>
 802ed2e:	4602      	mov	r2, r0
 802ed30:	4b0c      	ldr	r3, [pc, #48]	; (802ed64 <__multadd+0x84>)
 802ed32:	480d      	ldr	r0, [pc, #52]	; (802ed68 <__multadd+0x88>)
 802ed34:	21ba      	movs	r1, #186	; 0xba
 802ed36:	f7fd fce9 	bl	802c70c <__assert_func>
 802ed3a:	6922      	ldr	r2, [r4, #16]
 802ed3c:	3202      	adds	r2, #2
 802ed3e:	f104 010c 	add.w	r1, r4, #12
 802ed42:	0092      	lsls	r2, r2, #2
 802ed44:	300c      	adds	r0, #12
 802ed46:	f7ff f886 	bl	802de56 <memcpy>
 802ed4a:	4621      	mov	r1, r4
 802ed4c:	4638      	mov	r0, r7
 802ed4e:	f7ff ffa5 	bl	802ec9c <_Bfree>
 802ed52:	4644      	mov	r4, r8
 802ed54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802ed58:	3501      	adds	r5, #1
 802ed5a:	615e      	str	r6, [r3, #20]
 802ed5c:	6125      	str	r5, [r4, #16]
 802ed5e:	4620      	mov	r0, r4
 802ed60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ed64:	08034e41 	.word	0x08034e41
 802ed68:	08034e52 	.word	0x08034e52

0802ed6c <__s2b>:
 802ed6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ed70:	460c      	mov	r4, r1
 802ed72:	4615      	mov	r5, r2
 802ed74:	461f      	mov	r7, r3
 802ed76:	2209      	movs	r2, #9
 802ed78:	3308      	adds	r3, #8
 802ed7a:	4606      	mov	r6, r0
 802ed7c:	fb93 f3f2 	sdiv	r3, r3, r2
 802ed80:	2100      	movs	r1, #0
 802ed82:	2201      	movs	r2, #1
 802ed84:	429a      	cmp	r2, r3
 802ed86:	db09      	blt.n	802ed9c <__s2b+0x30>
 802ed88:	4630      	mov	r0, r6
 802ed8a:	f7ff ff47 	bl	802ec1c <_Balloc>
 802ed8e:	b940      	cbnz	r0, 802eda2 <__s2b+0x36>
 802ed90:	4602      	mov	r2, r0
 802ed92:	4b19      	ldr	r3, [pc, #100]	; (802edf8 <__s2b+0x8c>)
 802ed94:	4819      	ldr	r0, [pc, #100]	; (802edfc <__s2b+0x90>)
 802ed96:	21d3      	movs	r1, #211	; 0xd3
 802ed98:	f7fd fcb8 	bl	802c70c <__assert_func>
 802ed9c:	0052      	lsls	r2, r2, #1
 802ed9e:	3101      	adds	r1, #1
 802eda0:	e7f0      	b.n	802ed84 <__s2b+0x18>
 802eda2:	9b08      	ldr	r3, [sp, #32]
 802eda4:	6143      	str	r3, [r0, #20]
 802eda6:	2d09      	cmp	r5, #9
 802eda8:	f04f 0301 	mov.w	r3, #1
 802edac:	6103      	str	r3, [r0, #16]
 802edae:	dd16      	ble.n	802edde <__s2b+0x72>
 802edb0:	f104 0909 	add.w	r9, r4, #9
 802edb4:	46c8      	mov	r8, r9
 802edb6:	442c      	add	r4, r5
 802edb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 802edbc:	4601      	mov	r1, r0
 802edbe:	3b30      	subs	r3, #48	; 0x30
 802edc0:	220a      	movs	r2, #10
 802edc2:	4630      	mov	r0, r6
 802edc4:	f7ff ff8c 	bl	802ece0 <__multadd>
 802edc8:	45a0      	cmp	r8, r4
 802edca:	d1f5      	bne.n	802edb8 <__s2b+0x4c>
 802edcc:	f1a5 0408 	sub.w	r4, r5, #8
 802edd0:	444c      	add	r4, r9
 802edd2:	1b2d      	subs	r5, r5, r4
 802edd4:	1963      	adds	r3, r4, r5
 802edd6:	42bb      	cmp	r3, r7
 802edd8:	db04      	blt.n	802ede4 <__s2b+0x78>
 802edda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802edde:	340a      	adds	r4, #10
 802ede0:	2509      	movs	r5, #9
 802ede2:	e7f6      	b.n	802edd2 <__s2b+0x66>
 802ede4:	f814 3b01 	ldrb.w	r3, [r4], #1
 802ede8:	4601      	mov	r1, r0
 802edea:	3b30      	subs	r3, #48	; 0x30
 802edec:	220a      	movs	r2, #10
 802edee:	4630      	mov	r0, r6
 802edf0:	f7ff ff76 	bl	802ece0 <__multadd>
 802edf4:	e7ee      	b.n	802edd4 <__s2b+0x68>
 802edf6:	bf00      	nop
 802edf8:	08034e41 	.word	0x08034e41
 802edfc:	08034e52 	.word	0x08034e52

0802ee00 <__hi0bits>:
 802ee00:	0c03      	lsrs	r3, r0, #16
 802ee02:	041b      	lsls	r3, r3, #16
 802ee04:	b9d3      	cbnz	r3, 802ee3c <__hi0bits+0x3c>
 802ee06:	0400      	lsls	r0, r0, #16
 802ee08:	2310      	movs	r3, #16
 802ee0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802ee0e:	bf04      	itt	eq
 802ee10:	0200      	lsleq	r0, r0, #8
 802ee12:	3308      	addeq	r3, #8
 802ee14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802ee18:	bf04      	itt	eq
 802ee1a:	0100      	lsleq	r0, r0, #4
 802ee1c:	3304      	addeq	r3, #4
 802ee1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802ee22:	bf04      	itt	eq
 802ee24:	0080      	lsleq	r0, r0, #2
 802ee26:	3302      	addeq	r3, #2
 802ee28:	2800      	cmp	r0, #0
 802ee2a:	db05      	blt.n	802ee38 <__hi0bits+0x38>
 802ee2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802ee30:	f103 0301 	add.w	r3, r3, #1
 802ee34:	bf08      	it	eq
 802ee36:	2320      	moveq	r3, #32
 802ee38:	4618      	mov	r0, r3
 802ee3a:	4770      	bx	lr
 802ee3c:	2300      	movs	r3, #0
 802ee3e:	e7e4      	b.n	802ee0a <__hi0bits+0xa>

0802ee40 <__lo0bits>:
 802ee40:	6803      	ldr	r3, [r0, #0]
 802ee42:	f013 0207 	ands.w	r2, r3, #7
 802ee46:	d00c      	beq.n	802ee62 <__lo0bits+0x22>
 802ee48:	07d9      	lsls	r1, r3, #31
 802ee4a:	d422      	bmi.n	802ee92 <__lo0bits+0x52>
 802ee4c:	079a      	lsls	r2, r3, #30
 802ee4e:	bf49      	itett	mi
 802ee50:	085b      	lsrmi	r3, r3, #1
 802ee52:	089b      	lsrpl	r3, r3, #2
 802ee54:	6003      	strmi	r3, [r0, #0]
 802ee56:	2201      	movmi	r2, #1
 802ee58:	bf5c      	itt	pl
 802ee5a:	6003      	strpl	r3, [r0, #0]
 802ee5c:	2202      	movpl	r2, #2
 802ee5e:	4610      	mov	r0, r2
 802ee60:	4770      	bx	lr
 802ee62:	b299      	uxth	r1, r3
 802ee64:	b909      	cbnz	r1, 802ee6a <__lo0bits+0x2a>
 802ee66:	0c1b      	lsrs	r3, r3, #16
 802ee68:	2210      	movs	r2, #16
 802ee6a:	b2d9      	uxtb	r1, r3
 802ee6c:	b909      	cbnz	r1, 802ee72 <__lo0bits+0x32>
 802ee6e:	3208      	adds	r2, #8
 802ee70:	0a1b      	lsrs	r3, r3, #8
 802ee72:	0719      	lsls	r1, r3, #28
 802ee74:	bf04      	itt	eq
 802ee76:	091b      	lsreq	r3, r3, #4
 802ee78:	3204      	addeq	r2, #4
 802ee7a:	0799      	lsls	r1, r3, #30
 802ee7c:	bf04      	itt	eq
 802ee7e:	089b      	lsreq	r3, r3, #2
 802ee80:	3202      	addeq	r2, #2
 802ee82:	07d9      	lsls	r1, r3, #31
 802ee84:	d403      	bmi.n	802ee8e <__lo0bits+0x4e>
 802ee86:	085b      	lsrs	r3, r3, #1
 802ee88:	f102 0201 	add.w	r2, r2, #1
 802ee8c:	d003      	beq.n	802ee96 <__lo0bits+0x56>
 802ee8e:	6003      	str	r3, [r0, #0]
 802ee90:	e7e5      	b.n	802ee5e <__lo0bits+0x1e>
 802ee92:	2200      	movs	r2, #0
 802ee94:	e7e3      	b.n	802ee5e <__lo0bits+0x1e>
 802ee96:	2220      	movs	r2, #32
 802ee98:	e7e1      	b.n	802ee5e <__lo0bits+0x1e>
	...

0802ee9c <__i2b>:
 802ee9c:	b510      	push	{r4, lr}
 802ee9e:	460c      	mov	r4, r1
 802eea0:	2101      	movs	r1, #1
 802eea2:	f7ff febb 	bl	802ec1c <_Balloc>
 802eea6:	4602      	mov	r2, r0
 802eea8:	b928      	cbnz	r0, 802eeb6 <__i2b+0x1a>
 802eeaa:	4b05      	ldr	r3, [pc, #20]	; (802eec0 <__i2b+0x24>)
 802eeac:	4805      	ldr	r0, [pc, #20]	; (802eec4 <__i2b+0x28>)
 802eeae:	f240 1145 	movw	r1, #325	; 0x145
 802eeb2:	f7fd fc2b 	bl	802c70c <__assert_func>
 802eeb6:	2301      	movs	r3, #1
 802eeb8:	6144      	str	r4, [r0, #20]
 802eeba:	6103      	str	r3, [r0, #16]
 802eebc:	bd10      	pop	{r4, pc}
 802eebe:	bf00      	nop
 802eec0:	08034e41 	.word	0x08034e41
 802eec4:	08034e52 	.word	0x08034e52

0802eec8 <__multiply>:
 802eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802eecc:	4691      	mov	r9, r2
 802eece:	690a      	ldr	r2, [r1, #16]
 802eed0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802eed4:	429a      	cmp	r2, r3
 802eed6:	bfb8      	it	lt
 802eed8:	460b      	movlt	r3, r1
 802eeda:	460c      	mov	r4, r1
 802eedc:	bfbc      	itt	lt
 802eede:	464c      	movlt	r4, r9
 802eee0:	4699      	movlt	r9, r3
 802eee2:	6927      	ldr	r7, [r4, #16]
 802eee4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802eee8:	68a3      	ldr	r3, [r4, #8]
 802eeea:	6861      	ldr	r1, [r4, #4]
 802eeec:	eb07 060a 	add.w	r6, r7, sl
 802eef0:	42b3      	cmp	r3, r6
 802eef2:	b085      	sub	sp, #20
 802eef4:	bfb8      	it	lt
 802eef6:	3101      	addlt	r1, #1
 802eef8:	f7ff fe90 	bl	802ec1c <_Balloc>
 802eefc:	b930      	cbnz	r0, 802ef0c <__multiply+0x44>
 802eefe:	4602      	mov	r2, r0
 802ef00:	4b44      	ldr	r3, [pc, #272]	; (802f014 <__multiply+0x14c>)
 802ef02:	4845      	ldr	r0, [pc, #276]	; (802f018 <__multiply+0x150>)
 802ef04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802ef08:	f7fd fc00 	bl	802c70c <__assert_func>
 802ef0c:	f100 0514 	add.w	r5, r0, #20
 802ef10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802ef14:	462b      	mov	r3, r5
 802ef16:	2200      	movs	r2, #0
 802ef18:	4543      	cmp	r3, r8
 802ef1a:	d321      	bcc.n	802ef60 <__multiply+0x98>
 802ef1c:	f104 0314 	add.w	r3, r4, #20
 802ef20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802ef24:	f109 0314 	add.w	r3, r9, #20
 802ef28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802ef2c:	9202      	str	r2, [sp, #8]
 802ef2e:	1b3a      	subs	r2, r7, r4
 802ef30:	3a15      	subs	r2, #21
 802ef32:	f022 0203 	bic.w	r2, r2, #3
 802ef36:	3204      	adds	r2, #4
 802ef38:	f104 0115 	add.w	r1, r4, #21
 802ef3c:	428f      	cmp	r7, r1
 802ef3e:	bf38      	it	cc
 802ef40:	2204      	movcc	r2, #4
 802ef42:	9201      	str	r2, [sp, #4]
 802ef44:	9a02      	ldr	r2, [sp, #8]
 802ef46:	9303      	str	r3, [sp, #12]
 802ef48:	429a      	cmp	r2, r3
 802ef4a:	d80c      	bhi.n	802ef66 <__multiply+0x9e>
 802ef4c:	2e00      	cmp	r6, #0
 802ef4e:	dd03      	ble.n	802ef58 <__multiply+0x90>
 802ef50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802ef54:	2b00      	cmp	r3, #0
 802ef56:	d05b      	beq.n	802f010 <__multiply+0x148>
 802ef58:	6106      	str	r6, [r0, #16]
 802ef5a:	b005      	add	sp, #20
 802ef5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ef60:	f843 2b04 	str.w	r2, [r3], #4
 802ef64:	e7d8      	b.n	802ef18 <__multiply+0x50>
 802ef66:	f8b3 a000 	ldrh.w	sl, [r3]
 802ef6a:	f1ba 0f00 	cmp.w	sl, #0
 802ef6e:	d024      	beq.n	802efba <__multiply+0xf2>
 802ef70:	f104 0e14 	add.w	lr, r4, #20
 802ef74:	46a9      	mov	r9, r5
 802ef76:	f04f 0c00 	mov.w	ip, #0
 802ef7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802ef7e:	f8d9 1000 	ldr.w	r1, [r9]
 802ef82:	fa1f fb82 	uxth.w	fp, r2
 802ef86:	b289      	uxth	r1, r1
 802ef88:	fb0a 110b 	mla	r1, sl, fp, r1
 802ef8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802ef90:	f8d9 2000 	ldr.w	r2, [r9]
 802ef94:	4461      	add	r1, ip
 802ef96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802ef9a:	fb0a c20b 	mla	r2, sl, fp, ip
 802ef9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802efa2:	b289      	uxth	r1, r1
 802efa4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802efa8:	4577      	cmp	r7, lr
 802efaa:	f849 1b04 	str.w	r1, [r9], #4
 802efae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802efb2:	d8e2      	bhi.n	802ef7a <__multiply+0xb2>
 802efb4:	9a01      	ldr	r2, [sp, #4]
 802efb6:	f845 c002 	str.w	ip, [r5, r2]
 802efba:	9a03      	ldr	r2, [sp, #12]
 802efbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802efc0:	3304      	adds	r3, #4
 802efc2:	f1b9 0f00 	cmp.w	r9, #0
 802efc6:	d021      	beq.n	802f00c <__multiply+0x144>
 802efc8:	6829      	ldr	r1, [r5, #0]
 802efca:	f104 0c14 	add.w	ip, r4, #20
 802efce:	46ae      	mov	lr, r5
 802efd0:	f04f 0a00 	mov.w	sl, #0
 802efd4:	f8bc b000 	ldrh.w	fp, [ip]
 802efd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802efdc:	fb09 220b 	mla	r2, r9, fp, r2
 802efe0:	4452      	add	r2, sl
 802efe2:	b289      	uxth	r1, r1
 802efe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802efe8:	f84e 1b04 	str.w	r1, [lr], #4
 802efec:	f85c 1b04 	ldr.w	r1, [ip], #4
 802eff0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802eff4:	f8be 1000 	ldrh.w	r1, [lr]
 802eff8:	fb09 110a 	mla	r1, r9, sl, r1
 802effc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802f000:	4567      	cmp	r7, ip
 802f002:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802f006:	d8e5      	bhi.n	802efd4 <__multiply+0x10c>
 802f008:	9a01      	ldr	r2, [sp, #4]
 802f00a:	50a9      	str	r1, [r5, r2]
 802f00c:	3504      	adds	r5, #4
 802f00e:	e799      	b.n	802ef44 <__multiply+0x7c>
 802f010:	3e01      	subs	r6, #1
 802f012:	e79b      	b.n	802ef4c <__multiply+0x84>
 802f014:	08034e41 	.word	0x08034e41
 802f018:	08034e52 	.word	0x08034e52

0802f01c <__pow5mult>:
 802f01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802f020:	4615      	mov	r5, r2
 802f022:	f012 0203 	ands.w	r2, r2, #3
 802f026:	4606      	mov	r6, r0
 802f028:	460f      	mov	r7, r1
 802f02a:	d007      	beq.n	802f03c <__pow5mult+0x20>
 802f02c:	4c25      	ldr	r4, [pc, #148]	; (802f0c4 <__pow5mult+0xa8>)
 802f02e:	3a01      	subs	r2, #1
 802f030:	2300      	movs	r3, #0
 802f032:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802f036:	f7ff fe53 	bl	802ece0 <__multadd>
 802f03a:	4607      	mov	r7, r0
 802f03c:	10ad      	asrs	r5, r5, #2
 802f03e:	d03d      	beq.n	802f0bc <__pow5mult+0xa0>
 802f040:	69f4      	ldr	r4, [r6, #28]
 802f042:	b97c      	cbnz	r4, 802f064 <__pow5mult+0x48>
 802f044:	2010      	movs	r0, #16
 802f046:	f7fd fb95 	bl	802c774 <malloc>
 802f04a:	4602      	mov	r2, r0
 802f04c:	61f0      	str	r0, [r6, #28]
 802f04e:	b928      	cbnz	r0, 802f05c <__pow5mult+0x40>
 802f050:	4b1d      	ldr	r3, [pc, #116]	; (802f0c8 <__pow5mult+0xac>)
 802f052:	481e      	ldr	r0, [pc, #120]	; (802f0cc <__pow5mult+0xb0>)
 802f054:	f240 11b3 	movw	r1, #435	; 0x1b3
 802f058:	f7fd fb58 	bl	802c70c <__assert_func>
 802f05c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802f060:	6004      	str	r4, [r0, #0]
 802f062:	60c4      	str	r4, [r0, #12]
 802f064:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802f068:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802f06c:	b94c      	cbnz	r4, 802f082 <__pow5mult+0x66>
 802f06e:	f240 2171 	movw	r1, #625	; 0x271
 802f072:	4630      	mov	r0, r6
 802f074:	f7ff ff12 	bl	802ee9c <__i2b>
 802f078:	2300      	movs	r3, #0
 802f07a:	f8c8 0008 	str.w	r0, [r8, #8]
 802f07e:	4604      	mov	r4, r0
 802f080:	6003      	str	r3, [r0, #0]
 802f082:	f04f 0900 	mov.w	r9, #0
 802f086:	07eb      	lsls	r3, r5, #31
 802f088:	d50a      	bpl.n	802f0a0 <__pow5mult+0x84>
 802f08a:	4639      	mov	r1, r7
 802f08c:	4622      	mov	r2, r4
 802f08e:	4630      	mov	r0, r6
 802f090:	f7ff ff1a 	bl	802eec8 <__multiply>
 802f094:	4639      	mov	r1, r7
 802f096:	4680      	mov	r8, r0
 802f098:	4630      	mov	r0, r6
 802f09a:	f7ff fdff 	bl	802ec9c <_Bfree>
 802f09e:	4647      	mov	r7, r8
 802f0a0:	106d      	asrs	r5, r5, #1
 802f0a2:	d00b      	beq.n	802f0bc <__pow5mult+0xa0>
 802f0a4:	6820      	ldr	r0, [r4, #0]
 802f0a6:	b938      	cbnz	r0, 802f0b8 <__pow5mult+0x9c>
 802f0a8:	4622      	mov	r2, r4
 802f0aa:	4621      	mov	r1, r4
 802f0ac:	4630      	mov	r0, r6
 802f0ae:	f7ff ff0b 	bl	802eec8 <__multiply>
 802f0b2:	6020      	str	r0, [r4, #0]
 802f0b4:	f8c0 9000 	str.w	r9, [r0]
 802f0b8:	4604      	mov	r4, r0
 802f0ba:	e7e4      	b.n	802f086 <__pow5mult+0x6a>
 802f0bc:	4638      	mov	r0, r7
 802f0be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802f0c2:	bf00      	nop
 802f0c4:	08034fa0 	.word	0x08034fa0
 802f0c8:	08034d6b 	.word	0x08034d6b
 802f0cc:	08034e52 	.word	0x08034e52

0802f0d0 <__lshift>:
 802f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802f0d4:	460c      	mov	r4, r1
 802f0d6:	6849      	ldr	r1, [r1, #4]
 802f0d8:	6923      	ldr	r3, [r4, #16]
 802f0da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802f0de:	68a3      	ldr	r3, [r4, #8]
 802f0e0:	4607      	mov	r7, r0
 802f0e2:	4691      	mov	r9, r2
 802f0e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802f0e8:	f108 0601 	add.w	r6, r8, #1
 802f0ec:	42b3      	cmp	r3, r6
 802f0ee:	db0b      	blt.n	802f108 <__lshift+0x38>
 802f0f0:	4638      	mov	r0, r7
 802f0f2:	f7ff fd93 	bl	802ec1c <_Balloc>
 802f0f6:	4605      	mov	r5, r0
 802f0f8:	b948      	cbnz	r0, 802f10e <__lshift+0x3e>
 802f0fa:	4602      	mov	r2, r0
 802f0fc:	4b28      	ldr	r3, [pc, #160]	; (802f1a0 <__lshift+0xd0>)
 802f0fe:	4829      	ldr	r0, [pc, #164]	; (802f1a4 <__lshift+0xd4>)
 802f100:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802f104:	f7fd fb02 	bl	802c70c <__assert_func>
 802f108:	3101      	adds	r1, #1
 802f10a:	005b      	lsls	r3, r3, #1
 802f10c:	e7ee      	b.n	802f0ec <__lshift+0x1c>
 802f10e:	2300      	movs	r3, #0
 802f110:	f100 0114 	add.w	r1, r0, #20
 802f114:	f100 0210 	add.w	r2, r0, #16
 802f118:	4618      	mov	r0, r3
 802f11a:	4553      	cmp	r3, sl
 802f11c:	db33      	blt.n	802f186 <__lshift+0xb6>
 802f11e:	6920      	ldr	r0, [r4, #16]
 802f120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802f124:	f104 0314 	add.w	r3, r4, #20
 802f128:	f019 091f 	ands.w	r9, r9, #31
 802f12c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802f130:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802f134:	d02b      	beq.n	802f18e <__lshift+0xbe>
 802f136:	f1c9 0e20 	rsb	lr, r9, #32
 802f13a:	468a      	mov	sl, r1
 802f13c:	2200      	movs	r2, #0
 802f13e:	6818      	ldr	r0, [r3, #0]
 802f140:	fa00 f009 	lsl.w	r0, r0, r9
 802f144:	4310      	orrs	r0, r2
 802f146:	f84a 0b04 	str.w	r0, [sl], #4
 802f14a:	f853 2b04 	ldr.w	r2, [r3], #4
 802f14e:	459c      	cmp	ip, r3
 802f150:	fa22 f20e 	lsr.w	r2, r2, lr
 802f154:	d8f3      	bhi.n	802f13e <__lshift+0x6e>
 802f156:	ebac 0304 	sub.w	r3, ip, r4
 802f15a:	3b15      	subs	r3, #21
 802f15c:	f023 0303 	bic.w	r3, r3, #3
 802f160:	3304      	adds	r3, #4
 802f162:	f104 0015 	add.w	r0, r4, #21
 802f166:	4584      	cmp	ip, r0
 802f168:	bf38      	it	cc
 802f16a:	2304      	movcc	r3, #4
 802f16c:	50ca      	str	r2, [r1, r3]
 802f16e:	b10a      	cbz	r2, 802f174 <__lshift+0xa4>
 802f170:	f108 0602 	add.w	r6, r8, #2
 802f174:	3e01      	subs	r6, #1
 802f176:	4638      	mov	r0, r7
 802f178:	612e      	str	r6, [r5, #16]
 802f17a:	4621      	mov	r1, r4
 802f17c:	f7ff fd8e 	bl	802ec9c <_Bfree>
 802f180:	4628      	mov	r0, r5
 802f182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802f186:	f842 0f04 	str.w	r0, [r2, #4]!
 802f18a:	3301      	adds	r3, #1
 802f18c:	e7c5      	b.n	802f11a <__lshift+0x4a>
 802f18e:	3904      	subs	r1, #4
 802f190:	f853 2b04 	ldr.w	r2, [r3], #4
 802f194:	f841 2f04 	str.w	r2, [r1, #4]!
 802f198:	459c      	cmp	ip, r3
 802f19a:	d8f9      	bhi.n	802f190 <__lshift+0xc0>
 802f19c:	e7ea      	b.n	802f174 <__lshift+0xa4>
 802f19e:	bf00      	nop
 802f1a0:	08034e41 	.word	0x08034e41
 802f1a4:	08034e52 	.word	0x08034e52

0802f1a8 <__mcmp>:
 802f1a8:	b530      	push	{r4, r5, lr}
 802f1aa:	6902      	ldr	r2, [r0, #16]
 802f1ac:	690c      	ldr	r4, [r1, #16]
 802f1ae:	1b12      	subs	r2, r2, r4
 802f1b0:	d10e      	bne.n	802f1d0 <__mcmp+0x28>
 802f1b2:	f100 0314 	add.w	r3, r0, #20
 802f1b6:	3114      	adds	r1, #20
 802f1b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802f1bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802f1c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802f1c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802f1c8:	42a5      	cmp	r5, r4
 802f1ca:	d003      	beq.n	802f1d4 <__mcmp+0x2c>
 802f1cc:	d305      	bcc.n	802f1da <__mcmp+0x32>
 802f1ce:	2201      	movs	r2, #1
 802f1d0:	4610      	mov	r0, r2
 802f1d2:	bd30      	pop	{r4, r5, pc}
 802f1d4:	4283      	cmp	r3, r0
 802f1d6:	d3f3      	bcc.n	802f1c0 <__mcmp+0x18>
 802f1d8:	e7fa      	b.n	802f1d0 <__mcmp+0x28>
 802f1da:	f04f 32ff 	mov.w	r2, #4294967295
 802f1de:	e7f7      	b.n	802f1d0 <__mcmp+0x28>

0802f1e0 <__mdiff>:
 802f1e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f1e4:	460c      	mov	r4, r1
 802f1e6:	4606      	mov	r6, r0
 802f1e8:	4611      	mov	r1, r2
 802f1ea:	4620      	mov	r0, r4
 802f1ec:	4690      	mov	r8, r2
 802f1ee:	f7ff ffdb 	bl	802f1a8 <__mcmp>
 802f1f2:	1e05      	subs	r5, r0, #0
 802f1f4:	d110      	bne.n	802f218 <__mdiff+0x38>
 802f1f6:	4629      	mov	r1, r5
 802f1f8:	4630      	mov	r0, r6
 802f1fa:	f7ff fd0f 	bl	802ec1c <_Balloc>
 802f1fe:	b930      	cbnz	r0, 802f20e <__mdiff+0x2e>
 802f200:	4b3a      	ldr	r3, [pc, #232]	; (802f2ec <__mdiff+0x10c>)
 802f202:	4602      	mov	r2, r0
 802f204:	f240 2137 	movw	r1, #567	; 0x237
 802f208:	4839      	ldr	r0, [pc, #228]	; (802f2f0 <__mdiff+0x110>)
 802f20a:	f7fd fa7f 	bl	802c70c <__assert_func>
 802f20e:	2301      	movs	r3, #1
 802f210:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802f214:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f218:	bfa4      	itt	ge
 802f21a:	4643      	movge	r3, r8
 802f21c:	46a0      	movge	r8, r4
 802f21e:	4630      	mov	r0, r6
 802f220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802f224:	bfa6      	itte	ge
 802f226:	461c      	movge	r4, r3
 802f228:	2500      	movge	r5, #0
 802f22a:	2501      	movlt	r5, #1
 802f22c:	f7ff fcf6 	bl	802ec1c <_Balloc>
 802f230:	b920      	cbnz	r0, 802f23c <__mdiff+0x5c>
 802f232:	4b2e      	ldr	r3, [pc, #184]	; (802f2ec <__mdiff+0x10c>)
 802f234:	4602      	mov	r2, r0
 802f236:	f240 2145 	movw	r1, #581	; 0x245
 802f23a:	e7e5      	b.n	802f208 <__mdiff+0x28>
 802f23c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802f240:	6926      	ldr	r6, [r4, #16]
 802f242:	60c5      	str	r5, [r0, #12]
 802f244:	f104 0914 	add.w	r9, r4, #20
 802f248:	f108 0514 	add.w	r5, r8, #20
 802f24c:	f100 0e14 	add.w	lr, r0, #20
 802f250:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802f254:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802f258:	f108 0210 	add.w	r2, r8, #16
 802f25c:	46f2      	mov	sl, lr
 802f25e:	2100      	movs	r1, #0
 802f260:	f859 3b04 	ldr.w	r3, [r9], #4
 802f264:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802f268:	fa11 f88b 	uxtah	r8, r1, fp
 802f26c:	b299      	uxth	r1, r3
 802f26e:	0c1b      	lsrs	r3, r3, #16
 802f270:	eba8 0801 	sub.w	r8, r8, r1
 802f274:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802f278:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802f27c:	fa1f f888 	uxth.w	r8, r8
 802f280:	1419      	asrs	r1, r3, #16
 802f282:	454e      	cmp	r6, r9
 802f284:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802f288:	f84a 3b04 	str.w	r3, [sl], #4
 802f28c:	d8e8      	bhi.n	802f260 <__mdiff+0x80>
 802f28e:	1b33      	subs	r3, r6, r4
 802f290:	3b15      	subs	r3, #21
 802f292:	f023 0303 	bic.w	r3, r3, #3
 802f296:	3304      	adds	r3, #4
 802f298:	3415      	adds	r4, #21
 802f29a:	42a6      	cmp	r6, r4
 802f29c:	bf38      	it	cc
 802f29e:	2304      	movcc	r3, #4
 802f2a0:	441d      	add	r5, r3
 802f2a2:	4473      	add	r3, lr
 802f2a4:	469e      	mov	lr, r3
 802f2a6:	462e      	mov	r6, r5
 802f2a8:	4566      	cmp	r6, ip
 802f2aa:	d30e      	bcc.n	802f2ca <__mdiff+0xea>
 802f2ac:	f10c 0203 	add.w	r2, ip, #3
 802f2b0:	1b52      	subs	r2, r2, r5
 802f2b2:	f022 0203 	bic.w	r2, r2, #3
 802f2b6:	3d03      	subs	r5, #3
 802f2b8:	45ac      	cmp	ip, r5
 802f2ba:	bf38      	it	cc
 802f2bc:	2200      	movcc	r2, #0
 802f2be:	4413      	add	r3, r2
 802f2c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802f2c4:	b17a      	cbz	r2, 802f2e6 <__mdiff+0x106>
 802f2c6:	6107      	str	r7, [r0, #16]
 802f2c8:	e7a4      	b.n	802f214 <__mdiff+0x34>
 802f2ca:	f856 8b04 	ldr.w	r8, [r6], #4
 802f2ce:	fa11 f288 	uxtah	r2, r1, r8
 802f2d2:	1414      	asrs	r4, r2, #16
 802f2d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802f2d8:	b292      	uxth	r2, r2
 802f2da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802f2de:	f84e 2b04 	str.w	r2, [lr], #4
 802f2e2:	1421      	asrs	r1, r4, #16
 802f2e4:	e7e0      	b.n	802f2a8 <__mdiff+0xc8>
 802f2e6:	3f01      	subs	r7, #1
 802f2e8:	e7ea      	b.n	802f2c0 <__mdiff+0xe0>
 802f2ea:	bf00      	nop
 802f2ec:	08034e41 	.word	0x08034e41
 802f2f0:	08034e52 	.word	0x08034e52

0802f2f4 <__ulp>:
 802f2f4:	b082      	sub	sp, #8
 802f2f6:	ed8d 0b00 	vstr	d0, [sp]
 802f2fa:	9a01      	ldr	r2, [sp, #4]
 802f2fc:	4b0f      	ldr	r3, [pc, #60]	; (802f33c <__ulp+0x48>)
 802f2fe:	4013      	ands	r3, r2
 802f300:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 802f304:	2b00      	cmp	r3, #0
 802f306:	dc08      	bgt.n	802f31a <__ulp+0x26>
 802f308:	425b      	negs	r3, r3
 802f30a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 802f30e:	ea4f 5223 	mov.w	r2, r3, asr #20
 802f312:	da04      	bge.n	802f31e <__ulp+0x2a>
 802f314:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 802f318:	4113      	asrs	r3, r2
 802f31a:	2200      	movs	r2, #0
 802f31c:	e008      	b.n	802f330 <__ulp+0x3c>
 802f31e:	f1a2 0314 	sub.w	r3, r2, #20
 802f322:	2b1e      	cmp	r3, #30
 802f324:	bfda      	itte	le
 802f326:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 802f32a:	40da      	lsrle	r2, r3
 802f32c:	2201      	movgt	r2, #1
 802f32e:	2300      	movs	r3, #0
 802f330:	4619      	mov	r1, r3
 802f332:	4610      	mov	r0, r2
 802f334:	ec41 0b10 	vmov	d0, r0, r1
 802f338:	b002      	add	sp, #8
 802f33a:	4770      	bx	lr
 802f33c:	7ff00000 	.word	0x7ff00000

0802f340 <__b2d>:
 802f340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802f344:	6906      	ldr	r6, [r0, #16]
 802f346:	f100 0814 	add.w	r8, r0, #20
 802f34a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 802f34e:	1f37      	subs	r7, r6, #4
 802f350:	f856 2c04 	ldr.w	r2, [r6, #-4]
 802f354:	4610      	mov	r0, r2
 802f356:	f7ff fd53 	bl	802ee00 <__hi0bits>
 802f35a:	f1c0 0320 	rsb	r3, r0, #32
 802f35e:	280a      	cmp	r0, #10
 802f360:	600b      	str	r3, [r1, #0]
 802f362:	491b      	ldr	r1, [pc, #108]	; (802f3d0 <__b2d+0x90>)
 802f364:	dc15      	bgt.n	802f392 <__b2d+0x52>
 802f366:	f1c0 0c0b 	rsb	ip, r0, #11
 802f36a:	fa22 f30c 	lsr.w	r3, r2, ip
 802f36e:	45b8      	cmp	r8, r7
 802f370:	ea43 0501 	orr.w	r5, r3, r1
 802f374:	bf34      	ite	cc
 802f376:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f37a:	2300      	movcs	r3, #0
 802f37c:	3015      	adds	r0, #21
 802f37e:	fa02 f000 	lsl.w	r0, r2, r0
 802f382:	fa23 f30c 	lsr.w	r3, r3, ip
 802f386:	4303      	orrs	r3, r0
 802f388:	461c      	mov	r4, r3
 802f38a:	ec45 4b10 	vmov	d0, r4, r5
 802f38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802f392:	45b8      	cmp	r8, r7
 802f394:	bf3a      	itte	cc
 802f396:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 802f39a:	f1a6 0708 	subcc.w	r7, r6, #8
 802f39e:	2300      	movcs	r3, #0
 802f3a0:	380b      	subs	r0, #11
 802f3a2:	d012      	beq.n	802f3ca <__b2d+0x8a>
 802f3a4:	f1c0 0120 	rsb	r1, r0, #32
 802f3a8:	fa23 f401 	lsr.w	r4, r3, r1
 802f3ac:	4082      	lsls	r2, r0
 802f3ae:	4322      	orrs	r2, r4
 802f3b0:	4547      	cmp	r7, r8
 802f3b2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 802f3b6:	bf8c      	ite	hi
 802f3b8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 802f3bc:	2200      	movls	r2, #0
 802f3be:	4083      	lsls	r3, r0
 802f3c0:	40ca      	lsrs	r2, r1
 802f3c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802f3c6:	4313      	orrs	r3, r2
 802f3c8:	e7de      	b.n	802f388 <__b2d+0x48>
 802f3ca:	ea42 0501 	orr.w	r5, r2, r1
 802f3ce:	e7db      	b.n	802f388 <__b2d+0x48>
 802f3d0:	3ff00000 	.word	0x3ff00000

0802f3d4 <__d2b>:
 802f3d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802f3d8:	460f      	mov	r7, r1
 802f3da:	2101      	movs	r1, #1
 802f3dc:	ec59 8b10 	vmov	r8, r9, d0
 802f3e0:	4616      	mov	r6, r2
 802f3e2:	f7ff fc1b 	bl	802ec1c <_Balloc>
 802f3e6:	4604      	mov	r4, r0
 802f3e8:	b930      	cbnz	r0, 802f3f8 <__d2b+0x24>
 802f3ea:	4602      	mov	r2, r0
 802f3ec:	4b24      	ldr	r3, [pc, #144]	; (802f480 <__d2b+0xac>)
 802f3ee:	4825      	ldr	r0, [pc, #148]	; (802f484 <__d2b+0xb0>)
 802f3f0:	f240 310f 	movw	r1, #783	; 0x30f
 802f3f4:	f7fd f98a 	bl	802c70c <__assert_func>
 802f3f8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802f3fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802f400:	bb2d      	cbnz	r5, 802f44e <__d2b+0x7a>
 802f402:	9301      	str	r3, [sp, #4]
 802f404:	f1b8 0300 	subs.w	r3, r8, #0
 802f408:	d026      	beq.n	802f458 <__d2b+0x84>
 802f40a:	4668      	mov	r0, sp
 802f40c:	9300      	str	r3, [sp, #0]
 802f40e:	f7ff fd17 	bl	802ee40 <__lo0bits>
 802f412:	e9dd 1200 	ldrd	r1, r2, [sp]
 802f416:	b1e8      	cbz	r0, 802f454 <__d2b+0x80>
 802f418:	f1c0 0320 	rsb	r3, r0, #32
 802f41c:	fa02 f303 	lsl.w	r3, r2, r3
 802f420:	430b      	orrs	r3, r1
 802f422:	40c2      	lsrs	r2, r0
 802f424:	6163      	str	r3, [r4, #20]
 802f426:	9201      	str	r2, [sp, #4]
 802f428:	9b01      	ldr	r3, [sp, #4]
 802f42a:	61a3      	str	r3, [r4, #24]
 802f42c:	2b00      	cmp	r3, #0
 802f42e:	bf14      	ite	ne
 802f430:	2202      	movne	r2, #2
 802f432:	2201      	moveq	r2, #1
 802f434:	6122      	str	r2, [r4, #16]
 802f436:	b1bd      	cbz	r5, 802f468 <__d2b+0x94>
 802f438:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802f43c:	4405      	add	r5, r0
 802f43e:	603d      	str	r5, [r7, #0]
 802f440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802f444:	6030      	str	r0, [r6, #0]
 802f446:	4620      	mov	r0, r4
 802f448:	b003      	add	sp, #12
 802f44a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802f44e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802f452:	e7d6      	b.n	802f402 <__d2b+0x2e>
 802f454:	6161      	str	r1, [r4, #20]
 802f456:	e7e7      	b.n	802f428 <__d2b+0x54>
 802f458:	a801      	add	r0, sp, #4
 802f45a:	f7ff fcf1 	bl	802ee40 <__lo0bits>
 802f45e:	9b01      	ldr	r3, [sp, #4]
 802f460:	6163      	str	r3, [r4, #20]
 802f462:	3020      	adds	r0, #32
 802f464:	2201      	movs	r2, #1
 802f466:	e7e5      	b.n	802f434 <__d2b+0x60>
 802f468:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802f46c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802f470:	6038      	str	r0, [r7, #0]
 802f472:	6918      	ldr	r0, [r3, #16]
 802f474:	f7ff fcc4 	bl	802ee00 <__hi0bits>
 802f478:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802f47c:	e7e2      	b.n	802f444 <__d2b+0x70>
 802f47e:	bf00      	nop
 802f480:	08034e41 	.word	0x08034e41
 802f484:	08034e52 	.word	0x08034e52

0802f488 <__ratio>:
 802f488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f48c:	4688      	mov	r8, r1
 802f48e:	4669      	mov	r1, sp
 802f490:	4681      	mov	r9, r0
 802f492:	f7ff ff55 	bl	802f340 <__b2d>
 802f496:	a901      	add	r1, sp, #4
 802f498:	4640      	mov	r0, r8
 802f49a:	ec55 4b10 	vmov	r4, r5, d0
 802f49e:	f7ff ff4f 	bl	802f340 <__b2d>
 802f4a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802f4a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 802f4aa:	eba3 0c02 	sub.w	ip, r3, r2
 802f4ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 802f4b2:	1a9b      	subs	r3, r3, r2
 802f4b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 802f4b8:	ec51 0b10 	vmov	r0, r1, d0
 802f4bc:	2b00      	cmp	r3, #0
 802f4be:	bfd6      	itet	le
 802f4c0:	460a      	movle	r2, r1
 802f4c2:	462a      	movgt	r2, r5
 802f4c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802f4c8:	468b      	mov	fp, r1
 802f4ca:	462f      	mov	r7, r5
 802f4cc:	bfd4      	ite	le
 802f4ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802f4d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 802f4d6:	4620      	mov	r0, r4
 802f4d8:	ee10 2a10 	vmov	r2, s0
 802f4dc:	465b      	mov	r3, fp
 802f4de:	4639      	mov	r1, r7
 802f4e0:	f7e1 f9cc 	bl	801087c <__aeabi_ddiv>
 802f4e4:	ec41 0b10 	vmov	d0, r0, r1
 802f4e8:	b003      	add	sp, #12
 802f4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802f4ee <__copybits>:
 802f4ee:	3901      	subs	r1, #1
 802f4f0:	b570      	push	{r4, r5, r6, lr}
 802f4f2:	1149      	asrs	r1, r1, #5
 802f4f4:	6914      	ldr	r4, [r2, #16]
 802f4f6:	3101      	adds	r1, #1
 802f4f8:	f102 0314 	add.w	r3, r2, #20
 802f4fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 802f500:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802f504:	1f05      	subs	r5, r0, #4
 802f506:	42a3      	cmp	r3, r4
 802f508:	d30c      	bcc.n	802f524 <__copybits+0x36>
 802f50a:	1aa3      	subs	r3, r4, r2
 802f50c:	3b11      	subs	r3, #17
 802f50e:	f023 0303 	bic.w	r3, r3, #3
 802f512:	3211      	adds	r2, #17
 802f514:	42a2      	cmp	r2, r4
 802f516:	bf88      	it	hi
 802f518:	2300      	movhi	r3, #0
 802f51a:	4418      	add	r0, r3
 802f51c:	2300      	movs	r3, #0
 802f51e:	4288      	cmp	r0, r1
 802f520:	d305      	bcc.n	802f52e <__copybits+0x40>
 802f522:	bd70      	pop	{r4, r5, r6, pc}
 802f524:	f853 6b04 	ldr.w	r6, [r3], #4
 802f528:	f845 6f04 	str.w	r6, [r5, #4]!
 802f52c:	e7eb      	b.n	802f506 <__copybits+0x18>
 802f52e:	f840 3b04 	str.w	r3, [r0], #4
 802f532:	e7f4      	b.n	802f51e <__copybits+0x30>

0802f534 <__any_on>:
 802f534:	f100 0214 	add.w	r2, r0, #20
 802f538:	6900      	ldr	r0, [r0, #16]
 802f53a:	114b      	asrs	r3, r1, #5
 802f53c:	4298      	cmp	r0, r3
 802f53e:	b510      	push	{r4, lr}
 802f540:	db11      	blt.n	802f566 <__any_on+0x32>
 802f542:	dd0a      	ble.n	802f55a <__any_on+0x26>
 802f544:	f011 011f 	ands.w	r1, r1, #31
 802f548:	d007      	beq.n	802f55a <__any_on+0x26>
 802f54a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802f54e:	fa24 f001 	lsr.w	r0, r4, r1
 802f552:	fa00 f101 	lsl.w	r1, r0, r1
 802f556:	428c      	cmp	r4, r1
 802f558:	d10b      	bne.n	802f572 <__any_on+0x3e>
 802f55a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802f55e:	4293      	cmp	r3, r2
 802f560:	d803      	bhi.n	802f56a <__any_on+0x36>
 802f562:	2000      	movs	r0, #0
 802f564:	bd10      	pop	{r4, pc}
 802f566:	4603      	mov	r3, r0
 802f568:	e7f7      	b.n	802f55a <__any_on+0x26>
 802f56a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802f56e:	2900      	cmp	r1, #0
 802f570:	d0f5      	beq.n	802f55e <__any_on+0x2a>
 802f572:	2001      	movs	r0, #1
 802f574:	e7f6      	b.n	802f564 <__any_on+0x30>

0802f576 <sulp>:
 802f576:	b570      	push	{r4, r5, r6, lr}
 802f578:	4604      	mov	r4, r0
 802f57a:	460d      	mov	r5, r1
 802f57c:	ec45 4b10 	vmov	d0, r4, r5
 802f580:	4616      	mov	r6, r2
 802f582:	f7ff feb7 	bl	802f2f4 <__ulp>
 802f586:	ec51 0b10 	vmov	r0, r1, d0
 802f58a:	b17e      	cbz	r6, 802f5ac <sulp+0x36>
 802f58c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 802f590:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802f594:	2b00      	cmp	r3, #0
 802f596:	dd09      	ble.n	802f5ac <sulp+0x36>
 802f598:	051b      	lsls	r3, r3, #20
 802f59a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 802f59e:	2400      	movs	r4, #0
 802f5a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 802f5a4:	4622      	mov	r2, r4
 802f5a6:	462b      	mov	r3, r5
 802f5a8:	f7e1 f83e 	bl	8010628 <__aeabi_dmul>
 802f5ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0802f5b0 <_strtod_l>:
 802f5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802f5b4:	ed2d 8b02 	vpush	{d8}
 802f5b8:	b09b      	sub	sp, #108	; 0x6c
 802f5ba:	4604      	mov	r4, r0
 802f5bc:	9213      	str	r2, [sp, #76]	; 0x4c
 802f5be:	2200      	movs	r2, #0
 802f5c0:	9216      	str	r2, [sp, #88]	; 0x58
 802f5c2:	460d      	mov	r5, r1
 802f5c4:	f04f 0800 	mov.w	r8, #0
 802f5c8:	f04f 0900 	mov.w	r9, #0
 802f5cc:	460a      	mov	r2, r1
 802f5ce:	9215      	str	r2, [sp, #84]	; 0x54
 802f5d0:	7811      	ldrb	r1, [r2, #0]
 802f5d2:	292b      	cmp	r1, #43	; 0x2b
 802f5d4:	d04c      	beq.n	802f670 <_strtod_l+0xc0>
 802f5d6:	d83a      	bhi.n	802f64e <_strtod_l+0x9e>
 802f5d8:	290d      	cmp	r1, #13
 802f5da:	d834      	bhi.n	802f646 <_strtod_l+0x96>
 802f5dc:	2908      	cmp	r1, #8
 802f5de:	d834      	bhi.n	802f64a <_strtod_l+0x9a>
 802f5e0:	2900      	cmp	r1, #0
 802f5e2:	d03d      	beq.n	802f660 <_strtod_l+0xb0>
 802f5e4:	2200      	movs	r2, #0
 802f5e6:	920a      	str	r2, [sp, #40]	; 0x28
 802f5e8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 802f5ea:	7832      	ldrb	r2, [r6, #0]
 802f5ec:	2a30      	cmp	r2, #48	; 0x30
 802f5ee:	f040 80b4 	bne.w	802f75a <_strtod_l+0x1aa>
 802f5f2:	7872      	ldrb	r2, [r6, #1]
 802f5f4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 802f5f8:	2a58      	cmp	r2, #88	; 0x58
 802f5fa:	d170      	bne.n	802f6de <_strtod_l+0x12e>
 802f5fc:	9302      	str	r3, [sp, #8]
 802f5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f600:	9301      	str	r3, [sp, #4]
 802f602:	ab16      	add	r3, sp, #88	; 0x58
 802f604:	9300      	str	r3, [sp, #0]
 802f606:	4a8e      	ldr	r2, [pc, #568]	; (802f840 <_strtod_l+0x290>)
 802f608:	ab17      	add	r3, sp, #92	; 0x5c
 802f60a:	a915      	add	r1, sp, #84	; 0x54
 802f60c:	4620      	mov	r0, r4
 802f60e:	f001 fe5f 	bl	80312d0 <__gethex>
 802f612:	f010 070f 	ands.w	r7, r0, #15
 802f616:	4605      	mov	r5, r0
 802f618:	d005      	beq.n	802f626 <_strtod_l+0x76>
 802f61a:	2f06      	cmp	r7, #6
 802f61c:	d12a      	bne.n	802f674 <_strtod_l+0xc4>
 802f61e:	3601      	adds	r6, #1
 802f620:	2300      	movs	r3, #0
 802f622:	9615      	str	r6, [sp, #84]	; 0x54
 802f624:	930a      	str	r3, [sp, #40]	; 0x28
 802f626:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f628:	2b00      	cmp	r3, #0
 802f62a:	f040 857f 	bne.w	803012c <_strtod_l+0xb7c>
 802f62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802f630:	b1db      	cbz	r3, 802f66a <_strtod_l+0xba>
 802f632:	4642      	mov	r2, r8
 802f634:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 802f638:	ec43 2b10 	vmov	d0, r2, r3
 802f63c:	b01b      	add	sp, #108	; 0x6c
 802f63e:	ecbd 8b02 	vpop	{d8}
 802f642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802f646:	2920      	cmp	r1, #32
 802f648:	d1cc      	bne.n	802f5e4 <_strtod_l+0x34>
 802f64a:	3201      	adds	r2, #1
 802f64c:	e7bf      	b.n	802f5ce <_strtod_l+0x1e>
 802f64e:	292d      	cmp	r1, #45	; 0x2d
 802f650:	d1c8      	bne.n	802f5e4 <_strtod_l+0x34>
 802f652:	2101      	movs	r1, #1
 802f654:	910a      	str	r1, [sp, #40]	; 0x28
 802f656:	1c51      	adds	r1, r2, #1
 802f658:	9115      	str	r1, [sp, #84]	; 0x54
 802f65a:	7852      	ldrb	r2, [r2, #1]
 802f65c:	2a00      	cmp	r2, #0
 802f65e:	d1c3      	bne.n	802f5e8 <_strtod_l+0x38>
 802f660:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802f662:	9515      	str	r5, [sp, #84]	; 0x54
 802f664:	2b00      	cmp	r3, #0
 802f666:	f040 855f 	bne.w	8030128 <_strtod_l+0xb78>
 802f66a:	4642      	mov	r2, r8
 802f66c:	464b      	mov	r3, r9
 802f66e:	e7e3      	b.n	802f638 <_strtod_l+0x88>
 802f670:	2100      	movs	r1, #0
 802f672:	e7ef      	b.n	802f654 <_strtod_l+0xa4>
 802f674:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802f676:	b13a      	cbz	r2, 802f688 <_strtod_l+0xd8>
 802f678:	2135      	movs	r1, #53	; 0x35
 802f67a:	a818      	add	r0, sp, #96	; 0x60
 802f67c:	f7ff ff37 	bl	802f4ee <__copybits>
 802f680:	9916      	ldr	r1, [sp, #88]	; 0x58
 802f682:	4620      	mov	r0, r4
 802f684:	f7ff fb0a 	bl	802ec9c <_Bfree>
 802f688:	3f01      	subs	r7, #1
 802f68a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 802f68c:	2f04      	cmp	r7, #4
 802f68e:	d806      	bhi.n	802f69e <_strtod_l+0xee>
 802f690:	e8df f007 	tbb	[pc, r7]
 802f694:	201d0314 	.word	0x201d0314
 802f698:	14          	.byte	0x14
 802f699:	00          	.byte	0x00
 802f69a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 802f69e:	05e9      	lsls	r1, r5, #23
 802f6a0:	bf48      	it	mi
 802f6a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 802f6a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802f6aa:	0d1b      	lsrs	r3, r3, #20
 802f6ac:	051b      	lsls	r3, r3, #20
 802f6ae:	2b00      	cmp	r3, #0
 802f6b0:	d1b9      	bne.n	802f626 <_strtod_l+0x76>
 802f6b2:	f7fe fb9b 	bl	802ddec <__errno>
 802f6b6:	2322      	movs	r3, #34	; 0x22
 802f6b8:	6003      	str	r3, [r0, #0]
 802f6ba:	e7b4      	b.n	802f626 <_strtod_l+0x76>
 802f6bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 802f6c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 802f6c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 802f6c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 802f6cc:	e7e7      	b.n	802f69e <_strtod_l+0xee>
 802f6ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 802f848 <_strtod_l+0x298>
 802f6d2:	e7e4      	b.n	802f69e <_strtod_l+0xee>
 802f6d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 802f6d8:	f04f 38ff 	mov.w	r8, #4294967295
 802f6dc:	e7df      	b.n	802f69e <_strtod_l+0xee>
 802f6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f6e0:	1c5a      	adds	r2, r3, #1
 802f6e2:	9215      	str	r2, [sp, #84]	; 0x54
 802f6e4:	785b      	ldrb	r3, [r3, #1]
 802f6e6:	2b30      	cmp	r3, #48	; 0x30
 802f6e8:	d0f9      	beq.n	802f6de <_strtod_l+0x12e>
 802f6ea:	2b00      	cmp	r3, #0
 802f6ec:	d09b      	beq.n	802f626 <_strtod_l+0x76>
 802f6ee:	2301      	movs	r3, #1
 802f6f0:	f04f 0a00 	mov.w	sl, #0
 802f6f4:	9304      	str	r3, [sp, #16]
 802f6f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f6f8:	930b      	str	r3, [sp, #44]	; 0x2c
 802f6fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 802f6fe:	46d3      	mov	fp, sl
 802f700:	220a      	movs	r2, #10
 802f702:	9815      	ldr	r0, [sp, #84]	; 0x54
 802f704:	7806      	ldrb	r6, [r0, #0]
 802f706:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 802f70a:	b2d9      	uxtb	r1, r3
 802f70c:	2909      	cmp	r1, #9
 802f70e:	d926      	bls.n	802f75e <_strtod_l+0x1ae>
 802f710:	494c      	ldr	r1, [pc, #304]	; (802f844 <_strtod_l+0x294>)
 802f712:	2201      	movs	r2, #1
 802f714:	f7fe fa12 	bl	802db3c <strncmp>
 802f718:	2800      	cmp	r0, #0
 802f71a:	d030      	beq.n	802f77e <_strtod_l+0x1ce>
 802f71c:	2000      	movs	r0, #0
 802f71e:	4632      	mov	r2, r6
 802f720:	9005      	str	r0, [sp, #20]
 802f722:	465e      	mov	r6, fp
 802f724:	4603      	mov	r3, r0
 802f726:	2a65      	cmp	r2, #101	; 0x65
 802f728:	d001      	beq.n	802f72e <_strtod_l+0x17e>
 802f72a:	2a45      	cmp	r2, #69	; 0x45
 802f72c:	d113      	bne.n	802f756 <_strtod_l+0x1a6>
 802f72e:	b91e      	cbnz	r6, 802f738 <_strtod_l+0x188>
 802f730:	9a04      	ldr	r2, [sp, #16]
 802f732:	4302      	orrs	r2, r0
 802f734:	d094      	beq.n	802f660 <_strtod_l+0xb0>
 802f736:	2600      	movs	r6, #0
 802f738:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802f73a:	1c6a      	adds	r2, r5, #1
 802f73c:	9215      	str	r2, [sp, #84]	; 0x54
 802f73e:	786a      	ldrb	r2, [r5, #1]
 802f740:	2a2b      	cmp	r2, #43	; 0x2b
 802f742:	d074      	beq.n	802f82e <_strtod_l+0x27e>
 802f744:	2a2d      	cmp	r2, #45	; 0x2d
 802f746:	d078      	beq.n	802f83a <_strtod_l+0x28a>
 802f748:	f04f 0c00 	mov.w	ip, #0
 802f74c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 802f750:	2909      	cmp	r1, #9
 802f752:	d97f      	bls.n	802f854 <_strtod_l+0x2a4>
 802f754:	9515      	str	r5, [sp, #84]	; 0x54
 802f756:	2700      	movs	r7, #0
 802f758:	e09e      	b.n	802f898 <_strtod_l+0x2e8>
 802f75a:	2300      	movs	r3, #0
 802f75c:	e7c8      	b.n	802f6f0 <_strtod_l+0x140>
 802f75e:	f1bb 0f08 	cmp.w	fp, #8
 802f762:	bfd8      	it	le
 802f764:	9909      	ldrle	r1, [sp, #36]	; 0x24
 802f766:	f100 0001 	add.w	r0, r0, #1
 802f76a:	bfda      	itte	le
 802f76c:	fb02 3301 	mlale	r3, r2, r1, r3
 802f770:	9309      	strle	r3, [sp, #36]	; 0x24
 802f772:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 802f776:	f10b 0b01 	add.w	fp, fp, #1
 802f77a:	9015      	str	r0, [sp, #84]	; 0x54
 802f77c:	e7c1      	b.n	802f702 <_strtod_l+0x152>
 802f77e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f780:	1c5a      	adds	r2, r3, #1
 802f782:	9215      	str	r2, [sp, #84]	; 0x54
 802f784:	785a      	ldrb	r2, [r3, #1]
 802f786:	f1bb 0f00 	cmp.w	fp, #0
 802f78a:	d037      	beq.n	802f7fc <_strtod_l+0x24c>
 802f78c:	9005      	str	r0, [sp, #20]
 802f78e:	465e      	mov	r6, fp
 802f790:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 802f794:	2b09      	cmp	r3, #9
 802f796:	d912      	bls.n	802f7be <_strtod_l+0x20e>
 802f798:	2301      	movs	r3, #1
 802f79a:	e7c4      	b.n	802f726 <_strtod_l+0x176>
 802f79c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f79e:	1c5a      	adds	r2, r3, #1
 802f7a0:	9215      	str	r2, [sp, #84]	; 0x54
 802f7a2:	785a      	ldrb	r2, [r3, #1]
 802f7a4:	3001      	adds	r0, #1
 802f7a6:	2a30      	cmp	r2, #48	; 0x30
 802f7a8:	d0f8      	beq.n	802f79c <_strtod_l+0x1ec>
 802f7aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 802f7ae:	2b08      	cmp	r3, #8
 802f7b0:	f200 84c1 	bhi.w	8030136 <_strtod_l+0xb86>
 802f7b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f7b6:	9005      	str	r0, [sp, #20]
 802f7b8:	2000      	movs	r0, #0
 802f7ba:	930b      	str	r3, [sp, #44]	; 0x2c
 802f7bc:	4606      	mov	r6, r0
 802f7be:	3a30      	subs	r2, #48	; 0x30
 802f7c0:	f100 0301 	add.w	r3, r0, #1
 802f7c4:	d014      	beq.n	802f7f0 <_strtod_l+0x240>
 802f7c6:	9905      	ldr	r1, [sp, #20]
 802f7c8:	4419      	add	r1, r3
 802f7ca:	9105      	str	r1, [sp, #20]
 802f7cc:	4633      	mov	r3, r6
 802f7ce:	eb00 0c06 	add.w	ip, r0, r6
 802f7d2:	210a      	movs	r1, #10
 802f7d4:	4563      	cmp	r3, ip
 802f7d6:	d113      	bne.n	802f800 <_strtod_l+0x250>
 802f7d8:	1833      	adds	r3, r6, r0
 802f7da:	2b08      	cmp	r3, #8
 802f7dc:	f106 0601 	add.w	r6, r6, #1
 802f7e0:	4406      	add	r6, r0
 802f7e2:	dc1a      	bgt.n	802f81a <_strtod_l+0x26a>
 802f7e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 802f7e6:	230a      	movs	r3, #10
 802f7e8:	fb03 2301 	mla	r3, r3, r1, r2
 802f7ec:	9309      	str	r3, [sp, #36]	; 0x24
 802f7ee:	2300      	movs	r3, #0
 802f7f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f7f2:	1c51      	adds	r1, r2, #1
 802f7f4:	9115      	str	r1, [sp, #84]	; 0x54
 802f7f6:	7852      	ldrb	r2, [r2, #1]
 802f7f8:	4618      	mov	r0, r3
 802f7fa:	e7c9      	b.n	802f790 <_strtod_l+0x1e0>
 802f7fc:	4658      	mov	r0, fp
 802f7fe:	e7d2      	b.n	802f7a6 <_strtod_l+0x1f6>
 802f800:	2b08      	cmp	r3, #8
 802f802:	f103 0301 	add.w	r3, r3, #1
 802f806:	dc03      	bgt.n	802f810 <_strtod_l+0x260>
 802f808:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802f80a:	434f      	muls	r7, r1
 802f80c:	9709      	str	r7, [sp, #36]	; 0x24
 802f80e:	e7e1      	b.n	802f7d4 <_strtod_l+0x224>
 802f810:	2b10      	cmp	r3, #16
 802f812:	bfd8      	it	le
 802f814:	fb01 fa0a 	mulle.w	sl, r1, sl
 802f818:	e7dc      	b.n	802f7d4 <_strtod_l+0x224>
 802f81a:	2e10      	cmp	r6, #16
 802f81c:	bfdc      	itt	le
 802f81e:	230a      	movle	r3, #10
 802f820:	fb03 2a0a 	mlale	sl, r3, sl, r2
 802f824:	e7e3      	b.n	802f7ee <_strtod_l+0x23e>
 802f826:	2300      	movs	r3, #0
 802f828:	9305      	str	r3, [sp, #20]
 802f82a:	2301      	movs	r3, #1
 802f82c:	e780      	b.n	802f730 <_strtod_l+0x180>
 802f82e:	f04f 0c00 	mov.w	ip, #0
 802f832:	1caa      	adds	r2, r5, #2
 802f834:	9215      	str	r2, [sp, #84]	; 0x54
 802f836:	78aa      	ldrb	r2, [r5, #2]
 802f838:	e788      	b.n	802f74c <_strtod_l+0x19c>
 802f83a:	f04f 0c01 	mov.w	ip, #1
 802f83e:	e7f8      	b.n	802f832 <_strtod_l+0x282>
 802f840:	08034fb0 	.word	0x08034fb0
 802f844:	08034fac 	.word	0x08034fac
 802f848:	7ff00000 	.word	0x7ff00000
 802f84c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f84e:	1c51      	adds	r1, r2, #1
 802f850:	9115      	str	r1, [sp, #84]	; 0x54
 802f852:	7852      	ldrb	r2, [r2, #1]
 802f854:	2a30      	cmp	r2, #48	; 0x30
 802f856:	d0f9      	beq.n	802f84c <_strtod_l+0x29c>
 802f858:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 802f85c:	2908      	cmp	r1, #8
 802f85e:	f63f af7a 	bhi.w	802f756 <_strtod_l+0x1a6>
 802f862:	3a30      	subs	r2, #48	; 0x30
 802f864:	9208      	str	r2, [sp, #32]
 802f866:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f868:	920c      	str	r2, [sp, #48]	; 0x30
 802f86a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802f86c:	1c57      	adds	r7, r2, #1
 802f86e:	9715      	str	r7, [sp, #84]	; 0x54
 802f870:	7852      	ldrb	r2, [r2, #1]
 802f872:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 802f876:	f1be 0f09 	cmp.w	lr, #9
 802f87a:	d938      	bls.n	802f8ee <_strtod_l+0x33e>
 802f87c:	990c      	ldr	r1, [sp, #48]	; 0x30
 802f87e:	1a7f      	subs	r7, r7, r1
 802f880:	2f08      	cmp	r7, #8
 802f882:	f644 671f 	movw	r7, #19999	; 0x4e1f
 802f886:	dc03      	bgt.n	802f890 <_strtod_l+0x2e0>
 802f888:	9908      	ldr	r1, [sp, #32]
 802f88a:	428f      	cmp	r7, r1
 802f88c:	bfa8      	it	ge
 802f88e:	460f      	movge	r7, r1
 802f890:	f1bc 0f00 	cmp.w	ip, #0
 802f894:	d000      	beq.n	802f898 <_strtod_l+0x2e8>
 802f896:	427f      	negs	r7, r7
 802f898:	2e00      	cmp	r6, #0
 802f89a:	d14f      	bne.n	802f93c <_strtod_l+0x38c>
 802f89c:	9904      	ldr	r1, [sp, #16]
 802f89e:	4301      	orrs	r1, r0
 802f8a0:	f47f aec1 	bne.w	802f626 <_strtod_l+0x76>
 802f8a4:	2b00      	cmp	r3, #0
 802f8a6:	f47f aedb 	bne.w	802f660 <_strtod_l+0xb0>
 802f8aa:	2a69      	cmp	r2, #105	; 0x69
 802f8ac:	d029      	beq.n	802f902 <_strtod_l+0x352>
 802f8ae:	dc26      	bgt.n	802f8fe <_strtod_l+0x34e>
 802f8b0:	2a49      	cmp	r2, #73	; 0x49
 802f8b2:	d026      	beq.n	802f902 <_strtod_l+0x352>
 802f8b4:	2a4e      	cmp	r2, #78	; 0x4e
 802f8b6:	f47f aed3 	bne.w	802f660 <_strtod_l+0xb0>
 802f8ba:	499b      	ldr	r1, [pc, #620]	; (802fb28 <_strtod_l+0x578>)
 802f8bc:	a815      	add	r0, sp, #84	; 0x54
 802f8be:	f001 ff47 	bl	8031750 <__match>
 802f8c2:	2800      	cmp	r0, #0
 802f8c4:	f43f aecc 	beq.w	802f660 <_strtod_l+0xb0>
 802f8c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f8ca:	781b      	ldrb	r3, [r3, #0]
 802f8cc:	2b28      	cmp	r3, #40	; 0x28
 802f8ce:	d12f      	bne.n	802f930 <_strtod_l+0x380>
 802f8d0:	4996      	ldr	r1, [pc, #600]	; (802fb2c <_strtod_l+0x57c>)
 802f8d2:	aa18      	add	r2, sp, #96	; 0x60
 802f8d4:	a815      	add	r0, sp, #84	; 0x54
 802f8d6:	f001 ff4f 	bl	8031778 <__hexnan>
 802f8da:	2805      	cmp	r0, #5
 802f8dc:	d128      	bne.n	802f930 <_strtod_l+0x380>
 802f8de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802f8e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802f8e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 802f8e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 802f8ec:	e69b      	b.n	802f626 <_strtod_l+0x76>
 802f8ee:	9f08      	ldr	r7, [sp, #32]
 802f8f0:	210a      	movs	r1, #10
 802f8f2:	fb01 2107 	mla	r1, r1, r7, r2
 802f8f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 802f8fa:	9208      	str	r2, [sp, #32]
 802f8fc:	e7b5      	b.n	802f86a <_strtod_l+0x2ba>
 802f8fe:	2a6e      	cmp	r2, #110	; 0x6e
 802f900:	e7d9      	b.n	802f8b6 <_strtod_l+0x306>
 802f902:	498b      	ldr	r1, [pc, #556]	; (802fb30 <_strtod_l+0x580>)
 802f904:	a815      	add	r0, sp, #84	; 0x54
 802f906:	f001 ff23 	bl	8031750 <__match>
 802f90a:	2800      	cmp	r0, #0
 802f90c:	f43f aea8 	beq.w	802f660 <_strtod_l+0xb0>
 802f910:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f912:	4988      	ldr	r1, [pc, #544]	; (802fb34 <_strtod_l+0x584>)
 802f914:	3b01      	subs	r3, #1
 802f916:	a815      	add	r0, sp, #84	; 0x54
 802f918:	9315      	str	r3, [sp, #84]	; 0x54
 802f91a:	f001 ff19 	bl	8031750 <__match>
 802f91e:	b910      	cbnz	r0, 802f926 <_strtod_l+0x376>
 802f920:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802f922:	3301      	adds	r3, #1
 802f924:	9315      	str	r3, [sp, #84]	; 0x54
 802f926:	f8df 921c 	ldr.w	r9, [pc, #540]	; 802fb44 <_strtod_l+0x594>
 802f92a:	f04f 0800 	mov.w	r8, #0
 802f92e:	e67a      	b.n	802f626 <_strtod_l+0x76>
 802f930:	4881      	ldr	r0, [pc, #516]	; (802fb38 <_strtod_l+0x588>)
 802f932:	f001 fc5d 	bl	80311f0 <nan>
 802f936:	ec59 8b10 	vmov	r8, r9, d0
 802f93a:	e674      	b.n	802f626 <_strtod_l+0x76>
 802f93c:	9b05      	ldr	r3, [sp, #20]
 802f93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 802f940:	1afb      	subs	r3, r7, r3
 802f942:	f1bb 0f00 	cmp.w	fp, #0
 802f946:	bf08      	it	eq
 802f948:	46b3      	moveq	fp, r6
 802f94a:	2e10      	cmp	r6, #16
 802f94c:	9308      	str	r3, [sp, #32]
 802f94e:	4635      	mov	r5, r6
 802f950:	bfa8      	it	ge
 802f952:	2510      	movge	r5, #16
 802f954:	f7e0 fdee 	bl	8010534 <__aeabi_ui2d>
 802f958:	2e09      	cmp	r6, #9
 802f95a:	4680      	mov	r8, r0
 802f95c:	4689      	mov	r9, r1
 802f95e:	dd13      	ble.n	802f988 <_strtod_l+0x3d8>
 802f960:	4b76      	ldr	r3, [pc, #472]	; (802fb3c <_strtod_l+0x58c>)
 802f962:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802f966:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 802f96a:	f7e0 fe5d 	bl	8010628 <__aeabi_dmul>
 802f96e:	4680      	mov	r8, r0
 802f970:	4650      	mov	r0, sl
 802f972:	4689      	mov	r9, r1
 802f974:	f7e0 fdde 	bl	8010534 <__aeabi_ui2d>
 802f978:	4602      	mov	r2, r0
 802f97a:	460b      	mov	r3, r1
 802f97c:	4640      	mov	r0, r8
 802f97e:	4649      	mov	r1, r9
 802f980:	f7e0 fc9c 	bl	80102bc <__adddf3>
 802f984:	4680      	mov	r8, r0
 802f986:	4689      	mov	r9, r1
 802f988:	2e0f      	cmp	r6, #15
 802f98a:	dc38      	bgt.n	802f9fe <_strtod_l+0x44e>
 802f98c:	9b08      	ldr	r3, [sp, #32]
 802f98e:	2b00      	cmp	r3, #0
 802f990:	f43f ae49 	beq.w	802f626 <_strtod_l+0x76>
 802f994:	dd24      	ble.n	802f9e0 <_strtod_l+0x430>
 802f996:	2b16      	cmp	r3, #22
 802f998:	dc0b      	bgt.n	802f9b2 <_strtod_l+0x402>
 802f99a:	4968      	ldr	r1, [pc, #416]	; (802fb3c <_strtod_l+0x58c>)
 802f99c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802f9a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f9a4:	4642      	mov	r2, r8
 802f9a6:	464b      	mov	r3, r9
 802f9a8:	f7e0 fe3e 	bl	8010628 <__aeabi_dmul>
 802f9ac:	4680      	mov	r8, r0
 802f9ae:	4689      	mov	r9, r1
 802f9b0:	e639      	b.n	802f626 <_strtod_l+0x76>
 802f9b2:	9a08      	ldr	r2, [sp, #32]
 802f9b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 802f9b8:	4293      	cmp	r3, r2
 802f9ba:	db20      	blt.n	802f9fe <_strtod_l+0x44e>
 802f9bc:	4c5f      	ldr	r4, [pc, #380]	; (802fb3c <_strtod_l+0x58c>)
 802f9be:	f1c6 060f 	rsb	r6, r6, #15
 802f9c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 802f9c6:	4642      	mov	r2, r8
 802f9c8:	464b      	mov	r3, r9
 802f9ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 802f9ce:	f7e0 fe2b 	bl	8010628 <__aeabi_dmul>
 802f9d2:	9b08      	ldr	r3, [sp, #32]
 802f9d4:	1b9e      	subs	r6, r3, r6
 802f9d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 802f9da:	e9d4 2300 	ldrd	r2, r3, [r4]
 802f9de:	e7e3      	b.n	802f9a8 <_strtod_l+0x3f8>
 802f9e0:	9b08      	ldr	r3, [sp, #32]
 802f9e2:	3316      	adds	r3, #22
 802f9e4:	db0b      	blt.n	802f9fe <_strtod_l+0x44e>
 802f9e6:	9b05      	ldr	r3, [sp, #20]
 802f9e8:	1bdf      	subs	r7, r3, r7
 802f9ea:	4b54      	ldr	r3, [pc, #336]	; (802fb3c <_strtod_l+0x58c>)
 802f9ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802f9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 802f9f4:	4640      	mov	r0, r8
 802f9f6:	4649      	mov	r1, r9
 802f9f8:	f7e0 ff40 	bl	801087c <__aeabi_ddiv>
 802f9fc:	e7d6      	b.n	802f9ac <_strtod_l+0x3fc>
 802f9fe:	9b08      	ldr	r3, [sp, #32]
 802fa00:	1b75      	subs	r5, r6, r5
 802fa02:	441d      	add	r5, r3
 802fa04:	2d00      	cmp	r5, #0
 802fa06:	dd70      	ble.n	802faea <_strtod_l+0x53a>
 802fa08:	f015 030f 	ands.w	r3, r5, #15
 802fa0c:	d00a      	beq.n	802fa24 <_strtod_l+0x474>
 802fa0e:	494b      	ldr	r1, [pc, #300]	; (802fb3c <_strtod_l+0x58c>)
 802fa10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802fa14:	4642      	mov	r2, r8
 802fa16:	464b      	mov	r3, r9
 802fa18:	e9d1 0100 	ldrd	r0, r1, [r1]
 802fa1c:	f7e0 fe04 	bl	8010628 <__aeabi_dmul>
 802fa20:	4680      	mov	r8, r0
 802fa22:	4689      	mov	r9, r1
 802fa24:	f035 050f 	bics.w	r5, r5, #15
 802fa28:	d04d      	beq.n	802fac6 <_strtod_l+0x516>
 802fa2a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 802fa2e:	dd22      	ble.n	802fa76 <_strtod_l+0x4c6>
 802fa30:	2500      	movs	r5, #0
 802fa32:	46ab      	mov	fp, r5
 802fa34:	9509      	str	r5, [sp, #36]	; 0x24
 802fa36:	9505      	str	r5, [sp, #20]
 802fa38:	2322      	movs	r3, #34	; 0x22
 802fa3a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802fb44 <_strtod_l+0x594>
 802fa3e:	6023      	str	r3, [r4, #0]
 802fa40:	f04f 0800 	mov.w	r8, #0
 802fa44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fa46:	2b00      	cmp	r3, #0
 802fa48:	f43f aded 	beq.w	802f626 <_strtod_l+0x76>
 802fa4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fa4e:	4620      	mov	r0, r4
 802fa50:	f7ff f924 	bl	802ec9c <_Bfree>
 802fa54:	9905      	ldr	r1, [sp, #20]
 802fa56:	4620      	mov	r0, r4
 802fa58:	f7ff f920 	bl	802ec9c <_Bfree>
 802fa5c:	4659      	mov	r1, fp
 802fa5e:	4620      	mov	r0, r4
 802fa60:	f7ff f91c 	bl	802ec9c <_Bfree>
 802fa64:	9909      	ldr	r1, [sp, #36]	; 0x24
 802fa66:	4620      	mov	r0, r4
 802fa68:	f7ff f918 	bl	802ec9c <_Bfree>
 802fa6c:	4629      	mov	r1, r5
 802fa6e:	4620      	mov	r0, r4
 802fa70:	f7ff f914 	bl	802ec9c <_Bfree>
 802fa74:	e5d7      	b.n	802f626 <_strtod_l+0x76>
 802fa76:	4b32      	ldr	r3, [pc, #200]	; (802fb40 <_strtod_l+0x590>)
 802fa78:	9304      	str	r3, [sp, #16]
 802fa7a:	2300      	movs	r3, #0
 802fa7c:	112d      	asrs	r5, r5, #4
 802fa7e:	4640      	mov	r0, r8
 802fa80:	4649      	mov	r1, r9
 802fa82:	469a      	mov	sl, r3
 802fa84:	2d01      	cmp	r5, #1
 802fa86:	dc21      	bgt.n	802facc <_strtod_l+0x51c>
 802fa88:	b10b      	cbz	r3, 802fa8e <_strtod_l+0x4de>
 802fa8a:	4680      	mov	r8, r0
 802fa8c:	4689      	mov	r9, r1
 802fa8e:	492c      	ldr	r1, [pc, #176]	; (802fb40 <_strtod_l+0x590>)
 802fa90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 802fa94:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 802fa98:	4642      	mov	r2, r8
 802fa9a:	464b      	mov	r3, r9
 802fa9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 802faa0:	f7e0 fdc2 	bl	8010628 <__aeabi_dmul>
 802faa4:	4b27      	ldr	r3, [pc, #156]	; (802fb44 <_strtod_l+0x594>)
 802faa6:	460a      	mov	r2, r1
 802faa8:	400b      	ands	r3, r1
 802faaa:	4927      	ldr	r1, [pc, #156]	; (802fb48 <_strtod_l+0x598>)
 802faac:	428b      	cmp	r3, r1
 802faae:	4680      	mov	r8, r0
 802fab0:	d8be      	bhi.n	802fa30 <_strtod_l+0x480>
 802fab2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 802fab6:	428b      	cmp	r3, r1
 802fab8:	bf86      	itte	hi
 802faba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 802fb4c <_strtod_l+0x59c>
 802fabe:	f04f 38ff 	movhi.w	r8, #4294967295
 802fac2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 802fac6:	2300      	movs	r3, #0
 802fac8:	9304      	str	r3, [sp, #16]
 802faca:	e07b      	b.n	802fbc4 <_strtod_l+0x614>
 802facc:	07ea      	lsls	r2, r5, #31
 802face:	d505      	bpl.n	802fadc <_strtod_l+0x52c>
 802fad0:	9b04      	ldr	r3, [sp, #16]
 802fad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fad6:	f7e0 fda7 	bl	8010628 <__aeabi_dmul>
 802fada:	2301      	movs	r3, #1
 802fadc:	9a04      	ldr	r2, [sp, #16]
 802fade:	3208      	adds	r2, #8
 802fae0:	f10a 0a01 	add.w	sl, sl, #1
 802fae4:	106d      	asrs	r5, r5, #1
 802fae6:	9204      	str	r2, [sp, #16]
 802fae8:	e7cc      	b.n	802fa84 <_strtod_l+0x4d4>
 802faea:	d0ec      	beq.n	802fac6 <_strtod_l+0x516>
 802faec:	426d      	negs	r5, r5
 802faee:	f015 020f 	ands.w	r2, r5, #15
 802faf2:	d00a      	beq.n	802fb0a <_strtod_l+0x55a>
 802faf4:	4b11      	ldr	r3, [pc, #68]	; (802fb3c <_strtod_l+0x58c>)
 802faf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802fafa:	4640      	mov	r0, r8
 802fafc:	4649      	mov	r1, r9
 802fafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802fb02:	f7e0 febb 	bl	801087c <__aeabi_ddiv>
 802fb06:	4680      	mov	r8, r0
 802fb08:	4689      	mov	r9, r1
 802fb0a:	112d      	asrs	r5, r5, #4
 802fb0c:	d0db      	beq.n	802fac6 <_strtod_l+0x516>
 802fb0e:	2d1f      	cmp	r5, #31
 802fb10:	dd1e      	ble.n	802fb50 <_strtod_l+0x5a0>
 802fb12:	2500      	movs	r5, #0
 802fb14:	46ab      	mov	fp, r5
 802fb16:	9509      	str	r5, [sp, #36]	; 0x24
 802fb18:	9505      	str	r5, [sp, #20]
 802fb1a:	2322      	movs	r3, #34	; 0x22
 802fb1c:	f04f 0800 	mov.w	r8, #0
 802fb20:	f04f 0900 	mov.w	r9, #0
 802fb24:	6023      	str	r3, [r4, #0]
 802fb26:	e78d      	b.n	802fa44 <_strtod_l+0x494>
 802fb28:	08034d41 	.word	0x08034d41
 802fb2c:	08034fc4 	.word	0x08034fc4
 802fb30:	08034d39 	.word	0x08034d39
 802fb34:	08034ddf 	.word	0x08034ddf
 802fb38:	08034d33 	.word	0x08034d33
 802fb3c:	08034ed8 	.word	0x08034ed8
 802fb40:	08034eb0 	.word	0x08034eb0
 802fb44:	7ff00000 	.word	0x7ff00000
 802fb48:	7ca00000 	.word	0x7ca00000
 802fb4c:	7fefffff 	.word	0x7fefffff
 802fb50:	f015 0310 	ands.w	r3, r5, #16
 802fb54:	bf18      	it	ne
 802fb56:	236a      	movne	r3, #106	; 0x6a
 802fb58:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 802fefc <_strtod_l+0x94c>
 802fb5c:	9304      	str	r3, [sp, #16]
 802fb5e:	4640      	mov	r0, r8
 802fb60:	4649      	mov	r1, r9
 802fb62:	2300      	movs	r3, #0
 802fb64:	07ea      	lsls	r2, r5, #31
 802fb66:	d504      	bpl.n	802fb72 <_strtod_l+0x5c2>
 802fb68:	e9da 2300 	ldrd	r2, r3, [sl]
 802fb6c:	f7e0 fd5c 	bl	8010628 <__aeabi_dmul>
 802fb70:	2301      	movs	r3, #1
 802fb72:	106d      	asrs	r5, r5, #1
 802fb74:	f10a 0a08 	add.w	sl, sl, #8
 802fb78:	d1f4      	bne.n	802fb64 <_strtod_l+0x5b4>
 802fb7a:	b10b      	cbz	r3, 802fb80 <_strtod_l+0x5d0>
 802fb7c:	4680      	mov	r8, r0
 802fb7e:	4689      	mov	r9, r1
 802fb80:	9b04      	ldr	r3, [sp, #16]
 802fb82:	b1bb      	cbz	r3, 802fbb4 <_strtod_l+0x604>
 802fb84:	f3c9 520a 	ubfx	r2, r9, #20, #11
 802fb88:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 802fb8c:	2b00      	cmp	r3, #0
 802fb8e:	4649      	mov	r1, r9
 802fb90:	dd10      	ble.n	802fbb4 <_strtod_l+0x604>
 802fb92:	2b1f      	cmp	r3, #31
 802fb94:	f340 811e 	ble.w	802fdd4 <_strtod_l+0x824>
 802fb98:	2b34      	cmp	r3, #52	; 0x34
 802fb9a:	bfde      	ittt	le
 802fb9c:	f04f 33ff 	movle.w	r3, #4294967295
 802fba0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 802fba4:	4093      	lslle	r3, r2
 802fba6:	f04f 0800 	mov.w	r8, #0
 802fbaa:	bfcc      	ite	gt
 802fbac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 802fbb0:	ea03 0901 	andle.w	r9, r3, r1
 802fbb4:	2200      	movs	r2, #0
 802fbb6:	2300      	movs	r3, #0
 802fbb8:	4640      	mov	r0, r8
 802fbba:	4649      	mov	r1, r9
 802fbbc:	f7e0 ff9c 	bl	8010af8 <__aeabi_dcmpeq>
 802fbc0:	2800      	cmp	r0, #0
 802fbc2:	d1a6      	bne.n	802fb12 <_strtod_l+0x562>
 802fbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fbc6:	9300      	str	r3, [sp, #0]
 802fbc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802fbca:	4633      	mov	r3, r6
 802fbcc:	465a      	mov	r2, fp
 802fbce:	4620      	mov	r0, r4
 802fbd0:	f7ff f8cc 	bl	802ed6c <__s2b>
 802fbd4:	9009      	str	r0, [sp, #36]	; 0x24
 802fbd6:	2800      	cmp	r0, #0
 802fbd8:	f43f af2a 	beq.w	802fa30 <_strtod_l+0x480>
 802fbdc:	9a08      	ldr	r2, [sp, #32]
 802fbde:	9b05      	ldr	r3, [sp, #20]
 802fbe0:	2a00      	cmp	r2, #0
 802fbe2:	eba3 0307 	sub.w	r3, r3, r7
 802fbe6:	bfa8      	it	ge
 802fbe8:	2300      	movge	r3, #0
 802fbea:	930c      	str	r3, [sp, #48]	; 0x30
 802fbec:	2500      	movs	r5, #0
 802fbee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 802fbf2:	9312      	str	r3, [sp, #72]	; 0x48
 802fbf4:	46ab      	mov	fp, r5
 802fbf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fbf8:	4620      	mov	r0, r4
 802fbfa:	6859      	ldr	r1, [r3, #4]
 802fbfc:	f7ff f80e 	bl	802ec1c <_Balloc>
 802fc00:	9005      	str	r0, [sp, #20]
 802fc02:	2800      	cmp	r0, #0
 802fc04:	f43f af18 	beq.w	802fa38 <_strtod_l+0x488>
 802fc08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802fc0a:	691a      	ldr	r2, [r3, #16]
 802fc0c:	3202      	adds	r2, #2
 802fc0e:	f103 010c 	add.w	r1, r3, #12
 802fc12:	0092      	lsls	r2, r2, #2
 802fc14:	300c      	adds	r0, #12
 802fc16:	f7fe f91e 	bl	802de56 <memcpy>
 802fc1a:	ec49 8b10 	vmov	d0, r8, r9
 802fc1e:	aa18      	add	r2, sp, #96	; 0x60
 802fc20:	a917      	add	r1, sp, #92	; 0x5c
 802fc22:	4620      	mov	r0, r4
 802fc24:	f7ff fbd6 	bl	802f3d4 <__d2b>
 802fc28:	ec49 8b18 	vmov	d8, r8, r9
 802fc2c:	9016      	str	r0, [sp, #88]	; 0x58
 802fc2e:	2800      	cmp	r0, #0
 802fc30:	f43f af02 	beq.w	802fa38 <_strtod_l+0x488>
 802fc34:	2101      	movs	r1, #1
 802fc36:	4620      	mov	r0, r4
 802fc38:	f7ff f930 	bl	802ee9c <__i2b>
 802fc3c:	4683      	mov	fp, r0
 802fc3e:	2800      	cmp	r0, #0
 802fc40:	f43f aefa 	beq.w	802fa38 <_strtod_l+0x488>
 802fc44:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802fc46:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802fc48:	2e00      	cmp	r6, #0
 802fc4a:	bfab      	itete	ge
 802fc4c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 802fc4e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 802fc50:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 802fc52:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 802fc56:	bfac      	ite	ge
 802fc58:	eb06 0a03 	addge.w	sl, r6, r3
 802fc5c:	1b9f      	sublt	r7, r3, r6
 802fc5e:	9b04      	ldr	r3, [sp, #16]
 802fc60:	1af6      	subs	r6, r6, r3
 802fc62:	4416      	add	r6, r2
 802fc64:	4ba0      	ldr	r3, [pc, #640]	; (802fee8 <_strtod_l+0x938>)
 802fc66:	3e01      	subs	r6, #1
 802fc68:	429e      	cmp	r6, r3
 802fc6a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802fc6e:	f280 80c4 	bge.w	802fdfa <_strtod_l+0x84a>
 802fc72:	1b9b      	subs	r3, r3, r6
 802fc74:	2b1f      	cmp	r3, #31
 802fc76:	eba2 0203 	sub.w	r2, r2, r3
 802fc7a:	f04f 0101 	mov.w	r1, #1
 802fc7e:	f300 80b0 	bgt.w	802fde2 <_strtod_l+0x832>
 802fc82:	fa01 f303 	lsl.w	r3, r1, r3
 802fc86:	930e      	str	r3, [sp, #56]	; 0x38
 802fc88:	2300      	movs	r3, #0
 802fc8a:	930d      	str	r3, [sp, #52]	; 0x34
 802fc8c:	eb0a 0602 	add.w	r6, sl, r2
 802fc90:	9b04      	ldr	r3, [sp, #16]
 802fc92:	45b2      	cmp	sl, r6
 802fc94:	4417      	add	r7, r2
 802fc96:	441f      	add	r7, r3
 802fc98:	4653      	mov	r3, sl
 802fc9a:	bfa8      	it	ge
 802fc9c:	4633      	movge	r3, r6
 802fc9e:	42bb      	cmp	r3, r7
 802fca0:	bfa8      	it	ge
 802fca2:	463b      	movge	r3, r7
 802fca4:	2b00      	cmp	r3, #0
 802fca6:	bfc2      	ittt	gt
 802fca8:	1af6      	subgt	r6, r6, r3
 802fcaa:	1aff      	subgt	r7, r7, r3
 802fcac:	ebaa 0a03 	subgt.w	sl, sl, r3
 802fcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802fcb2:	2b00      	cmp	r3, #0
 802fcb4:	dd17      	ble.n	802fce6 <_strtod_l+0x736>
 802fcb6:	4659      	mov	r1, fp
 802fcb8:	461a      	mov	r2, r3
 802fcba:	4620      	mov	r0, r4
 802fcbc:	f7ff f9ae 	bl	802f01c <__pow5mult>
 802fcc0:	4683      	mov	fp, r0
 802fcc2:	2800      	cmp	r0, #0
 802fcc4:	f43f aeb8 	beq.w	802fa38 <_strtod_l+0x488>
 802fcc8:	4601      	mov	r1, r0
 802fcca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802fccc:	4620      	mov	r0, r4
 802fcce:	f7ff f8fb 	bl	802eec8 <__multiply>
 802fcd2:	900b      	str	r0, [sp, #44]	; 0x2c
 802fcd4:	2800      	cmp	r0, #0
 802fcd6:	f43f aeaf 	beq.w	802fa38 <_strtod_l+0x488>
 802fcda:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fcdc:	4620      	mov	r0, r4
 802fcde:	f7fe ffdd 	bl	802ec9c <_Bfree>
 802fce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fce4:	9316      	str	r3, [sp, #88]	; 0x58
 802fce6:	2e00      	cmp	r6, #0
 802fce8:	f300 808c 	bgt.w	802fe04 <_strtod_l+0x854>
 802fcec:	9b08      	ldr	r3, [sp, #32]
 802fcee:	2b00      	cmp	r3, #0
 802fcf0:	dd08      	ble.n	802fd04 <_strtod_l+0x754>
 802fcf2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802fcf4:	9905      	ldr	r1, [sp, #20]
 802fcf6:	4620      	mov	r0, r4
 802fcf8:	f7ff f990 	bl	802f01c <__pow5mult>
 802fcfc:	9005      	str	r0, [sp, #20]
 802fcfe:	2800      	cmp	r0, #0
 802fd00:	f43f ae9a 	beq.w	802fa38 <_strtod_l+0x488>
 802fd04:	2f00      	cmp	r7, #0
 802fd06:	dd08      	ble.n	802fd1a <_strtod_l+0x76a>
 802fd08:	9905      	ldr	r1, [sp, #20]
 802fd0a:	463a      	mov	r2, r7
 802fd0c:	4620      	mov	r0, r4
 802fd0e:	f7ff f9df 	bl	802f0d0 <__lshift>
 802fd12:	9005      	str	r0, [sp, #20]
 802fd14:	2800      	cmp	r0, #0
 802fd16:	f43f ae8f 	beq.w	802fa38 <_strtod_l+0x488>
 802fd1a:	f1ba 0f00 	cmp.w	sl, #0
 802fd1e:	dd08      	ble.n	802fd32 <_strtod_l+0x782>
 802fd20:	4659      	mov	r1, fp
 802fd22:	4652      	mov	r2, sl
 802fd24:	4620      	mov	r0, r4
 802fd26:	f7ff f9d3 	bl	802f0d0 <__lshift>
 802fd2a:	4683      	mov	fp, r0
 802fd2c:	2800      	cmp	r0, #0
 802fd2e:	f43f ae83 	beq.w	802fa38 <_strtod_l+0x488>
 802fd32:	9a05      	ldr	r2, [sp, #20]
 802fd34:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fd36:	4620      	mov	r0, r4
 802fd38:	f7ff fa52 	bl	802f1e0 <__mdiff>
 802fd3c:	4605      	mov	r5, r0
 802fd3e:	2800      	cmp	r0, #0
 802fd40:	f43f ae7a 	beq.w	802fa38 <_strtod_l+0x488>
 802fd44:	68c3      	ldr	r3, [r0, #12]
 802fd46:	930b      	str	r3, [sp, #44]	; 0x2c
 802fd48:	2300      	movs	r3, #0
 802fd4a:	60c3      	str	r3, [r0, #12]
 802fd4c:	4659      	mov	r1, fp
 802fd4e:	f7ff fa2b 	bl	802f1a8 <__mcmp>
 802fd52:	2800      	cmp	r0, #0
 802fd54:	da60      	bge.n	802fe18 <_strtod_l+0x868>
 802fd56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fd58:	ea53 0308 	orrs.w	r3, r3, r8
 802fd5c:	f040 8084 	bne.w	802fe68 <_strtod_l+0x8b8>
 802fd60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fd64:	2b00      	cmp	r3, #0
 802fd66:	d17f      	bne.n	802fe68 <_strtod_l+0x8b8>
 802fd68:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802fd6c:	0d1b      	lsrs	r3, r3, #20
 802fd6e:	051b      	lsls	r3, r3, #20
 802fd70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 802fd74:	d978      	bls.n	802fe68 <_strtod_l+0x8b8>
 802fd76:	696b      	ldr	r3, [r5, #20]
 802fd78:	b913      	cbnz	r3, 802fd80 <_strtod_l+0x7d0>
 802fd7a:	692b      	ldr	r3, [r5, #16]
 802fd7c:	2b01      	cmp	r3, #1
 802fd7e:	dd73      	ble.n	802fe68 <_strtod_l+0x8b8>
 802fd80:	4629      	mov	r1, r5
 802fd82:	2201      	movs	r2, #1
 802fd84:	4620      	mov	r0, r4
 802fd86:	f7ff f9a3 	bl	802f0d0 <__lshift>
 802fd8a:	4659      	mov	r1, fp
 802fd8c:	4605      	mov	r5, r0
 802fd8e:	f7ff fa0b 	bl	802f1a8 <__mcmp>
 802fd92:	2800      	cmp	r0, #0
 802fd94:	dd68      	ble.n	802fe68 <_strtod_l+0x8b8>
 802fd96:	9904      	ldr	r1, [sp, #16]
 802fd98:	4a54      	ldr	r2, [pc, #336]	; (802feec <_strtod_l+0x93c>)
 802fd9a:	464b      	mov	r3, r9
 802fd9c:	2900      	cmp	r1, #0
 802fd9e:	f000 8084 	beq.w	802feaa <_strtod_l+0x8fa>
 802fda2:	ea02 0109 	and.w	r1, r2, r9
 802fda6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 802fdaa:	dc7e      	bgt.n	802feaa <_strtod_l+0x8fa>
 802fdac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 802fdb0:	f77f aeb3 	ble.w	802fb1a <_strtod_l+0x56a>
 802fdb4:	4b4e      	ldr	r3, [pc, #312]	; (802fef0 <_strtod_l+0x940>)
 802fdb6:	4640      	mov	r0, r8
 802fdb8:	4649      	mov	r1, r9
 802fdba:	2200      	movs	r2, #0
 802fdbc:	f7e0 fc34 	bl	8010628 <__aeabi_dmul>
 802fdc0:	4b4a      	ldr	r3, [pc, #296]	; (802feec <_strtod_l+0x93c>)
 802fdc2:	400b      	ands	r3, r1
 802fdc4:	4680      	mov	r8, r0
 802fdc6:	4689      	mov	r9, r1
 802fdc8:	2b00      	cmp	r3, #0
 802fdca:	f47f ae3f 	bne.w	802fa4c <_strtod_l+0x49c>
 802fdce:	2322      	movs	r3, #34	; 0x22
 802fdd0:	6023      	str	r3, [r4, #0]
 802fdd2:	e63b      	b.n	802fa4c <_strtod_l+0x49c>
 802fdd4:	f04f 32ff 	mov.w	r2, #4294967295
 802fdd8:	fa02 f303 	lsl.w	r3, r2, r3
 802fddc:	ea03 0808 	and.w	r8, r3, r8
 802fde0:	e6e8      	b.n	802fbb4 <_strtod_l+0x604>
 802fde2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 802fde6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 802fdea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 802fdee:	36e2      	adds	r6, #226	; 0xe2
 802fdf0:	fa01 f306 	lsl.w	r3, r1, r6
 802fdf4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 802fdf8:	e748      	b.n	802fc8c <_strtod_l+0x6dc>
 802fdfa:	2100      	movs	r1, #0
 802fdfc:	2301      	movs	r3, #1
 802fdfe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 802fe02:	e743      	b.n	802fc8c <_strtod_l+0x6dc>
 802fe04:	9916      	ldr	r1, [sp, #88]	; 0x58
 802fe06:	4632      	mov	r2, r6
 802fe08:	4620      	mov	r0, r4
 802fe0a:	f7ff f961 	bl	802f0d0 <__lshift>
 802fe0e:	9016      	str	r0, [sp, #88]	; 0x58
 802fe10:	2800      	cmp	r0, #0
 802fe12:	f47f af6b 	bne.w	802fcec <_strtod_l+0x73c>
 802fe16:	e60f      	b.n	802fa38 <_strtod_l+0x488>
 802fe18:	46ca      	mov	sl, r9
 802fe1a:	d171      	bne.n	802ff00 <_strtod_l+0x950>
 802fe1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802fe1e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802fe22:	b352      	cbz	r2, 802fe7a <_strtod_l+0x8ca>
 802fe24:	4a33      	ldr	r2, [pc, #204]	; (802fef4 <_strtod_l+0x944>)
 802fe26:	4293      	cmp	r3, r2
 802fe28:	d12a      	bne.n	802fe80 <_strtod_l+0x8d0>
 802fe2a:	9b04      	ldr	r3, [sp, #16]
 802fe2c:	4641      	mov	r1, r8
 802fe2e:	b1fb      	cbz	r3, 802fe70 <_strtod_l+0x8c0>
 802fe30:	4b2e      	ldr	r3, [pc, #184]	; (802feec <_strtod_l+0x93c>)
 802fe32:	ea09 0303 	and.w	r3, r9, r3
 802fe36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 802fe3a:	f04f 32ff 	mov.w	r2, #4294967295
 802fe3e:	d81a      	bhi.n	802fe76 <_strtod_l+0x8c6>
 802fe40:	0d1b      	lsrs	r3, r3, #20
 802fe42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 802fe46:	fa02 f303 	lsl.w	r3, r2, r3
 802fe4a:	4299      	cmp	r1, r3
 802fe4c:	d118      	bne.n	802fe80 <_strtod_l+0x8d0>
 802fe4e:	4b2a      	ldr	r3, [pc, #168]	; (802fef8 <_strtod_l+0x948>)
 802fe50:	459a      	cmp	sl, r3
 802fe52:	d102      	bne.n	802fe5a <_strtod_l+0x8aa>
 802fe54:	3101      	adds	r1, #1
 802fe56:	f43f adef 	beq.w	802fa38 <_strtod_l+0x488>
 802fe5a:	4b24      	ldr	r3, [pc, #144]	; (802feec <_strtod_l+0x93c>)
 802fe5c:	ea0a 0303 	and.w	r3, sl, r3
 802fe60:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 802fe64:	f04f 0800 	mov.w	r8, #0
 802fe68:	9b04      	ldr	r3, [sp, #16]
 802fe6a:	2b00      	cmp	r3, #0
 802fe6c:	d1a2      	bne.n	802fdb4 <_strtod_l+0x804>
 802fe6e:	e5ed      	b.n	802fa4c <_strtod_l+0x49c>
 802fe70:	f04f 33ff 	mov.w	r3, #4294967295
 802fe74:	e7e9      	b.n	802fe4a <_strtod_l+0x89a>
 802fe76:	4613      	mov	r3, r2
 802fe78:	e7e7      	b.n	802fe4a <_strtod_l+0x89a>
 802fe7a:	ea53 0308 	orrs.w	r3, r3, r8
 802fe7e:	d08a      	beq.n	802fd96 <_strtod_l+0x7e6>
 802fe80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802fe82:	b1e3      	cbz	r3, 802febe <_strtod_l+0x90e>
 802fe84:	ea13 0f0a 	tst.w	r3, sl
 802fe88:	d0ee      	beq.n	802fe68 <_strtod_l+0x8b8>
 802fe8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802fe8c:	9a04      	ldr	r2, [sp, #16]
 802fe8e:	4640      	mov	r0, r8
 802fe90:	4649      	mov	r1, r9
 802fe92:	b1c3      	cbz	r3, 802fec6 <_strtod_l+0x916>
 802fe94:	f7ff fb6f 	bl	802f576 <sulp>
 802fe98:	4602      	mov	r2, r0
 802fe9a:	460b      	mov	r3, r1
 802fe9c:	ec51 0b18 	vmov	r0, r1, d8
 802fea0:	f7e0 fa0c 	bl	80102bc <__adddf3>
 802fea4:	4680      	mov	r8, r0
 802fea6:	4689      	mov	r9, r1
 802fea8:	e7de      	b.n	802fe68 <_strtod_l+0x8b8>
 802feaa:	4013      	ands	r3, r2
 802feac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 802feb0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 802feb4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 802feb8:	f04f 38ff 	mov.w	r8, #4294967295
 802febc:	e7d4      	b.n	802fe68 <_strtod_l+0x8b8>
 802febe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802fec0:	ea13 0f08 	tst.w	r3, r8
 802fec4:	e7e0      	b.n	802fe88 <_strtod_l+0x8d8>
 802fec6:	f7ff fb56 	bl	802f576 <sulp>
 802feca:	4602      	mov	r2, r0
 802fecc:	460b      	mov	r3, r1
 802fece:	ec51 0b18 	vmov	r0, r1, d8
 802fed2:	f7e0 f9f1 	bl	80102b8 <__aeabi_dsub>
 802fed6:	2200      	movs	r2, #0
 802fed8:	2300      	movs	r3, #0
 802feda:	4680      	mov	r8, r0
 802fedc:	4689      	mov	r9, r1
 802fede:	f7e0 fe0b 	bl	8010af8 <__aeabi_dcmpeq>
 802fee2:	2800      	cmp	r0, #0
 802fee4:	d0c0      	beq.n	802fe68 <_strtod_l+0x8b8>
 802fee6:	e618      	b.n	802fb1a <_strtod_l+0x56a>
 802fee8:	fffffc02 	.word	0xfffffc02
 802feec:	7ff00000 	.word	0x7ff00000
 802fef0:	39500000 	.word	0x39500000
 802fef4:	000fffff 	.word	0x000fffff
 802fef8:	7fefffff 	.word	0x7fefffff
 802fefc:	08034fd8 	.word	0x08034fd8
 802ff00:	4659      	mov	r1, fp
 802ff02:	4628      	mov	r0, r5
 802ff04:	f7ff fac0 	bl	802f488 <__ratio>
 802ff08:	ec57 6b10 	vmov	r6, r7, d0
 802ff0c:	ee10 0a10 	vmov	r0, s0
 802ff10:	2200      	movs	r2, #0
 802ff12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802ff16:	4639      	mov	r1, r7
 802ff18:	f7e0 fe02 	bl	8010b20 <__aeabi_dcmple>
 802ff1c:	2800      	cmp	r0, #0
 802ff1e:	d071      	beq.n	8030004 <_strtod_l+0xa54>
 802ff20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ff22:	2b00      	cmp	r3, #0
 802ff24:	d17c      	bne.n	8030020 <_strtod_l+0xa70>
 802ff26:	f1b8 0f00 	cmp.w	r8, #0
 802ff2a:	d15a      	bne.n	802ffe2 <_strtod_l+0xa32>
 802ff2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802ff30:	2b00      	cmp	r3, #0
 802ff32:	d15d      	bne.n	802fff0 <_strtod_l+0xa40>
 802ff34:	4b90      	ldr	r3, [pc, #576]	; (8030178 <_strtod_l+0xbc8>)
 802ff36:	2200      	movs	r2, #0
 802ff38:	4630      	mov	r0, r6
 802ff3a:	4639      	mov	r1, r7
 802ff3c:	f7e0 fde6 	bl	8010b0c <__aeabi_dcmplt>
 802ff40:	2800      	cmp	r0, #0
 802ff42:	d15c      	bne.n	802fffe <_strtod_l+0xa4e>
 802ff44:	4630      	mov	r0, r6
 802ff46:	4639      	mov	r1, r7
 802ff48:	4b8c      	ldr	r3, [pc, #560]	; (803017c <_strtod_l+0xbcc>)
 802ff4a:	2200      	movs	r2, #0
 802ff4c:	f7e0 fb6c 	bl	8010628 <__aeabi_dmul>
 802ff50:	4606      	mov	r6, r0
 802ff52:	460f      	mov	r7, r1
 802ff54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 802ff58:	9606      	str	r6, [sp, #24]
 802ff5a:	9307      	str	r3, [sp, #28]
 802ff5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802ff60:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 802ff64:	4b86      	ldr	r3, [pc, #536]	; (8030180 <_strtod_l+0xbd0>)
 802ff66:	ea0a 0303 	and.w	r3, sl, r3
 802ff6a:	930d      	str	r3, [sp, #52]	; 0x34
 802ff6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802ff6e:	4b85      	ldr	r3, [pc, #532]	; (8030184 <_strtod_l+0xbd4>)
 802ff70:	429a      	cmp	r2, r3
 802ff72:	f040 8090 	bne.w	8030096 <_strtod_l+0xae6>
 802ff76:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 802ff7a:	ec49 8b10 	vmov	d0, r8, r9
 802ff7e:	f7ff f9b9 	bl	802f2f4 <__ulp>
 802ff82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802ff86:	ec51 0b10 	vmov	r0, r1, d0
 802ff8a:	f7e0 fb4d 	bl	8010628 <__aeabi_dmul>
 802ff8e:	4642      	mov	r2, r8
 802ff90:	464b      	mov	r3, r9
 802ff92:	f7e0 f993 	bl	80102bc <__adddf3>
 802ff96:	460b      	mov	r3, r1
 802ff98:	4979      	ldr	r1, [pc, #484]	; (8030180 <_strtod_l+0xbd0>)
 802ff9a:	4a7b      	ldr	r2, [pc, #492]	; (8030188 <_strtod_l+0xbd8>)
 802ff9c:	4019      	ands	r1, r3
 802ff9e:	4291      	cmp	r1, r2
 802ffa0:	4680      	mov	r8, r0
 802ffa2:	d944      	bls.n	803002e <_strtod_l+0xa7e>
 802ffa4:	ee18 2a90 	vmov	r2, s17
 802ffa8:	4b78      	ldr	r3, [pc, #480]	; (803018c <_strtod_l+0xbdc>)
 802ffaa:	429a      	cmp	r2, r3
 802ffac:	d104      	bne.n	802ffb8 <_strtod_l+0xa08>
 802ffae:	ee18 3a10 	vmov	r3, s16
 802ffb2:	3301      	adds	r3, #1
 802ffb4:	f43f ad40 	beq.w	802fa38 <_strtod_l+0x488>
 802ffb8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 803018c <_strtod_l+0xbdc>
 802ffbc:	f04f 38ff 	mov.w	r8, #4294967295
 802ffc0:	9916      	ldr	r1, [sp, #88]	; 0x58
 802ffc2:	4620      	mov	r0, r4
 802ffc4:	f7fe fe6a 	bl	802ec9c <_Bfree>
 802ffc8:	9905      	ldr	r1, [sp, #20]
 802ffca:	4620      	mov	r0, r4
 802ffcc:	f7fe fe66 	bl	802ec9c <_Bfree>
 802ffd0:	4659      	mov	r1, fp
 802ffd2:	4620      	mov	r0, r4
 802ffd4:	f7fe fe62 	bl	802ec9c <_Bfree>
 802ffd8:	4629      	mov	r1, r5
 802ffda:	4620      	mov	r0, r4
 802ffdc:	f7fe fe5e 	bl	802ec9c <_Bfree>
 802ffe0:	e609      	b.n	802fbf6 <_strtod_l+0x646>
 802ffe2:	f1b8 0f01 	cmp.w	r8, #1
 802ffe6:	d103      	bne.n	802fff0 <_strtod_l+0xa40>
 802ffe8:	f1b9 0f00 	cmp.w	r9, #0
 802ffec:	f43f ad95 	beq.w	802fb1a <_strtod_l+0x56a>
 802fff0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8030148 <_strtod_l+0xb98>
 802fff4:	4f60      	ldr	r7, [pc, #384]	; (8030178 <_strtod_l+0xbc8>)
 802fff6:	ed8d 7b06 	vstr	d7, [sp, #24]
 802fffa:	2600      	movs	r6, #0
 802fffc:	e7ae      	b.n	802ff5c <_strtod_l+0x9ac>
 802fffe:	4f5f      	ldr	r7, [pc, #380]	; (803017c <_strtod_l+0xbcc>)
 8030000:	2600      	movs	r6, #0
 8030002:	e7a7      	b.n	802ff54 <_strtod_l+0x9a4>
 8030004:	4b5d      	ldr	r3, [pc, #372]	; (803017c <_strtod_l+0xbcc>)
 8030006:	4630      	mov	r0, r6
 8030008:	4639      	mov	r1, r7
 803000a:	2200      	movs	r2, #0
 803000c:	f7e0 fb0c 	bl	8010628 <__aeabi_dmul>
 8030010:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8030012:	4606      	mov	r6, r0
 8030014:	460f      	mov	r7, r1
 8030016:	2b00      	cmp	r3, #0
 8030018:	d09c      	beq.n	802ff54 <_strtod_l+0x9a4>
 803001a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 803001e:	e79d      	b.n	802ff5c <_strtod_l+0x9ac>
 8030020:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8030150 <_strtod_l+0xba0>
 8030024:	ed8d 7b06 	vstr	d7, [sp, #24]
 8030028:	ec57 6b17 	vmov	r6, r7, d7
 803002c:	e796      	b.n	802ff5c <_strtod_l+0x9ac>
 803002e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8030032:	9b04      	ldr	r3, [sp, #16]
 8030034:	46ca      	mov	sl, r9
 8030036:	2b00      	cmp	r3, #0
 8030038:	d1c2      	bne.n	802ffc0 <_strtod_l+0xa10>
 803003a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 803003e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8030040:	0d1b      	lsrs	r3, r3, #20
 8030042:	051b      	lsls	r3, r3, #20
 8030044:	429a      	cmp	r2, r3
 8030046:	d1bb      	bne.n	802ffc0 <_strtod_l+0xa10>
 8030048:	4630      	mov	r0, r6
 803004a:	4639      	mov	r1, r7
 803004c:	f7e0 fe60 	bl	8010d10 <__aeabi_d2lz>
 8030050:	f7e0 fabc 	bl	80105cc <__aeabi_l2d>
 8030054:	4602      	mov	r2, r0
 8030056:	460b      	mov	r3, r1
 8030058:	4630      	mov	r0, r6
 803005a:	4639      	mov	r1, r7
 803005c:	f7e0 f92c 	bl	80102b8 <__aeabi_dsub>
 8030060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8030062:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8030066:	ea43 0308 	orr.w	r3, r3, r8
 803006a:	4313      	orrs	r3, r2
 803006c:	4606      	mov	r6, r0
 803006e:	460f      	mov	r7, r1
 8030070:	d054      	beq.n	803011c <_strtod_l+0xb6c>
 8030072:	a339      	add	r3, pc, #228	; (adr r3, 8030158 <_strtod_l+0xba8>)
 8030074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030078:	f7e0 fd48 	bl	8010b0c <__aeabi_dcmplt>
 803007c:	2800      	cmp	r0, #0
 803007e:	f47f ace5 	bne.w	802fa4c <_strtod_l+0x49c>
 8030082:	a337      	add	r3, pc, #220	; (adr r3, 8030160 <_strtod_l+0xbb0>)
 8030084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030088:	4630      	mov	r0, r6
 803008a:	4639      	mov	r1, r7
 803008c:	f7e0 fd5c 	bl	8010b48 <__aeabi_dcmpgt>
 8030090:	2800      	cmp	r0, #0
 8030092:	d095      	beq.n	802ffc0 <_strtod_l+0xa10>
 8030094:	e4da      	b.n	802fa4c <_strtod_l+0x49c>
 8030096:	9b04      	ldr	r3, [sp, #16]
 8030098:	b333      	cbz	r3, 80300e8 <_strtod_l+0xb38>
 803009a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 803009c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80300a0:	d822      	bhi.n	80300e8 <_strtod_l+0xb38>
 80300a2:	a331      	add	r3, pc, #196	; (adr r3, 8030168 <_strtod_l+0xbb8>)
 80300a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80300a8:	4630      	mov	r0, r6
 80300aa:	4639      	mov	r1, r7
 80300ac:	f7e0 fd38 	bl	8010b20 <__aeabi_dcmple>
 80300b0:	b1a0      	cbz	r0, 80300dc <_strtod_l+0xb2c>
 80300b2:	4639      	mov	r1, r7
 80300b4:	4630      	mov	r0, r6
 80300b6:	f7e0 fd8f 	bl	8010bd8 <__aeabi_d2uiz>
 80300ba:	2801      	cmp	r0, #1
 80300bc:	bf38      	it	cc
 80300be:	2001      	movcc	r0, #1
 80300c0:	f7e0 fa38 	bl	8010534 <__aeabi_ui2d>
 80300c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80300c6:	4606      	mov	r6, r0
 80300c8:	460f      	mov	r7, r1
 80300ca:	bb23      	cbnz	r3, 8030116 <_strtod_l+0xb66>
 80300cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80300d0:	9010      	str	r0, [sp, #64]	; 0x40
 80300d2:	9311      	str	r3, [sp, #68]	; 0x44
 80300d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80300d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80300dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80300de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80300e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80300e4:	1a9b      	subs	r3, r3, r2
 80300e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80300e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80300ec:	eeb0 0a48 	vmov.f32	s0, s16
 80300f0:	eef0 0a68 	vmov.f32	s1, s17
 80300f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80300f8:	f7ff f8fc 	bl	802f2f4 <__ulp>
 80300fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8030100:	ec53 2b10 	vmov	r2, r3, d0
 8030104:	f7e0 fa90 	bl	8010628 <__aeabi_dmul>
 8030108:	ec53 2b18 	vmov	r2, r3, d8
 803010c:	f7e0 f8d6 	bl	80102bc <__adddf3>
 8030110:	4680      	mov	r8, r0
 8030112:	4689      	mov	r9, r1
 8030114:	e78d      	b.n	8030032 <_strtod_l+0xa82>
 8030116:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 803011a:	e7db      	b.n	80300d4 <_strtod_l+0xb24>
 803011c:	a314      	add	r3, pc, #80	; (adr r3, 8030170 <_strtod_l+0xbc0>)
 803011e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8030122:	f7e0 fcf3 	bl	8010b0c <__aeabi_dcmplt>
 8030126:	e7b3      	b.n	8030090 <_strtod_l+0xae0>
 8030128:	2300      	movs	r3, #0
 803012a:	930a      	str	r3, [sp, #40]	; 0x28
 803012c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 803012e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8030130:	6013      	str	r3, [r2, #0]
 8030132:	f7ff ba7c 	b.w	802f62e <_strtod_l+0x7e>
 8030136:	2a65      	cmp	r2, #101	; 0x65
 8030138:	f43f ab75 	beq.w	802f826 <_strtod_l+0x276>
 803013c:	2a45      	cmp	r2, #69	; 0x45
 803013e:	f43f ab72 	beq.w	802f826 <_strtod_l+0x276>
 8030142:	2301      	movs	r3, #1
 8030144:	f7ff bbaa 	b.w	802f89c <_strtod_l+0x2ec>
 8030148:	00000000 	.word	0x00000000
 803014c:	bff00000 	.word	0xbff00000
 8030150:	00000000 	.word	0x00000000
 8030154:	3ff00000 	.word	0x3ff00000
 8030158:	94a03595 	.word	0x94a03595
 803015c:	3fdfffff 	.word	0x3fdfffff
 8030160:	35afe535 	.word	0x35afe535
 8030164:	3fe00000 	.word	0x3fe00000
 8030168:	ffc00000 	.word	0xffc00000
 803016c:	41dfffff 	.word	0x41dfffff
 8030170:	94a03595 	.word	0x94a03595
 8030174:	3fcfffff 	.word	0x3fcfffff
 8030178:	3ff00000 	.word	0x3ff00000
 803017c:	3fe00000 	.word	0x3fe00000
 8030180:	7ff00000 	.word	0x7ff00000
 8030184:	7fe00000 	.word	0x7fe00000
 8030188:	7c9fffff 	.word	0x7c9fffff
 803018c:	7fefffff 	.word	0x7fefffff

08030190 <_strtod_r>:
 8030190:	4b01      	ldr	r3, [pc, #4]	; (8030198 <_strtod_r+0x8>)
 8030192:	f7ff ba0d 	b.w	802f5b0 <_strtod_l>
 8030196:	bf00      	nop
 8030198:	2000018c 	.word	0x2000018c

0803019c <_strtol_l.constprop.0>:
 803019c:	2b01      	cmp	r3, #1
 803019e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80301a2:	d001      	beq.n	80301a8 <_strtol_l.constprop.0+0xc>
 80301a4:	2b24      	cmp	r3, #36	; 0x24
 80301a6:	d906      	bls.n	80301b6 <_strtol_l.constprop.0+0x1a>
 80301a8:	f7fd fe20 	bl	802ddec <__errno>
 80301ac:	2316      	movs	r3, #22
 80301ae:	6003      	str	r3, [r0, #0]
 80301b0:	2000      	movs	r0, #0
 80301b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80301b6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 803029c <_strtol_l.constprop.0+0x100>
 80301ba:	460d      	mov	r5, r1
 80301bc:	462e      	mov	r6, r5
 80301be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80301c2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80301c6:	f017 0708 	ands.w	r7, r7, #8
 80301ca:	d1f7      	bne.n	80301bc <_strtol_l.constprop.0+0x20>
 80301cc:	2c2d      	cmp	r4, #45	; 0x2d
 80301ce:	d132      	bne.n	8030236 <_strtol_l.constprop.0+0x9a>
 80301d0:	782c      	ldrb	r4, [r5, #0]
 80301d2:	2701      	movs	r7, #1
 80301d4:	1cb5      	adds	r5, r6, #2
 80301d6:	2b00      	cmp	r3, #0
 80301d8:	d05b      	beq.n	8030292 <_strtol_l.constprop.0+0xf6>
 80301da:	2b10      	cmp	r3, #16
 80301dc:	d109      	bne.n	80301f2 <_strtol_l.constprop.0+0x56>
 80301de:	2c30      	cmp	r4, #48	; 0x30
 80301e0:	d107      	bne.n	80301f2 <_strtol_l.constprop.0+0x56>
 80301e2:	782c      	ldrb	r4, [r5, #0]
 80301e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80301e8:	2c58      	cmp	r4, #88	; 0x58
 80301ea:	d14d      	bne.n	8030288 <_strtol_l.constprop.0+0xec>
 80301ec:	786c      	ldrb	r4, [r5, #1]
 80301ee:	2310      	movs	r3, #16
 80301f0:	3502      	adds	r5, #2
 80301f2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80301f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80301fa:	f04f 0e00 	mov.w	lr, #0
 80301fe:	fbb8 f9f3 	udiv	r9, r8, r3
 8030202:	4676      	mov	r6, lr
 8030204:	fb03 8a19 	mls	sl, r3, r9, r8
 8030208:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 803020c:	f1bc 0f09 	cmp.w	ip, #9
 8030210:	d816      	bhi.n	8030240 <_strtol_l.constprop.0+0xa4>
 8030212:	4664      	mov	r4, ip
 8030214:	42a3      	cmp	r3, r4
 8030216:	dd24      	ble.n	8030262 <_strtol_l.constprop.0+0xc6>
 8030218:	f1be 3fff 	cmp.w	lr, #4294967295
 803021c:	d008      	beq.n	8030230 <_strtol_l.constprop.0+0x94>
 803021e:	45b1      	cmp	r9, r6
 8030220:	d31c      	bcc.n	803025c <_strtol_l.constprop.0+0xc0>
 8030222:	d101      	bne.n	8030228 <_strtol_l.constprop.0+0x8c>
 8030224:	45a2      	cmp	sl, r4
 8030226:	db19      	blt.n	803025c <_strtol_l.constprop.0+0xc0>
 8030228:	fb06 4603 	mla	r6, r6, r3, r4
 803022c:	f04f 0e01 	mov.w	lr, #1
 8030230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8030234:	e7e8      	b.n	8030208 <_strtol_l.constprop.0+0x6c>
 8030236:	2c2b      	cmp	r4, #43	; 0x2b
 8030238:	bf04      	itt	eq
 803023a:	782c      	ldrbeq	r4, [r5, #0]
 803023c:	1cb5      	addeq	r5, r6, #2
 803023e:	e7ca      	b.n	80301d6 <_strtol_l.constprop.0+0x3a>
 8030240:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8030244:	f1bc 0f19 	cmp.w	ip, #25
 8030248:	d801      	bhi.n	803024e <_strtol_l.constprop.0+0xb2>
 803024a:	3c37      	subs	r4, #55	; 0x37
 803024c:	e7e2      	b.n	8030214 <_strtol_l.constprop.0+0x78>
 803024e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8030252:	f1bc 0f19 	cmp.w	ip, #25
 8030256:	d804      	bhi.n	8030262 <_strtol_l.constprop.0+0xc6>
 8030258:	3c57      	subs	r4, #87	; 0x57
 803025a:	e7db      	b.n	8030214 <_strtol_l.constprop.0+0x78>
 803025c:	f04f 3eff 	mov.w	lr, #4294967295
 8030260:	e7e6      	b.n	8030230 <_strtol_l.constprop.0+0x94>
 8030262:	f1be 3fff 	cmp.w	lr, #4294967295
 8030266:	d105      	bne.n	8030274 <_strtol_l.constprop.0+0xd8>
 8030268:	2322      	movs	r3, #34	; 0x22
 803026a:	6003      	str	r3, [r0, #0]
 803026c:	4646      	mov	r6, r8
 803026e:	b942      	cbnz	r2, 8030282 <_strtol_l.constprop.0+0xe6>
 8030270:	4630      	mov	r0, r6
 8030272:	e79e      	b.n	80301b2 <_strtol_l.constprop.0+0x16>
 8030274:	b107      	cbz	r7, 8030278 <_strtol_l.constprop.0+0xdc>
 8030276:	4276      	negs	r6, r6
 8030278:	2a00      	cmp	r2, #0
 803027a:	d0f9      	beq.n	8030270 <_strtol_l.constprop.0+0xd4>
 803027c:	f1be 0f00 	cmp.w	lr, #0
 8030280:	d000      	beq.n	8030284 <_strtol_l.constprop.0+0xe8>
 8030282:	1e69      	subs	r1, r5, #1
 8030284:	6011      	str	r1, [r2, #0]
 8030286:	e7f3      	b.n	8030270 <_strtol_l.constprop.0+0xd4>
 8030288:	2430      	movs	r4, #48	; 0x30
 803028a:	2b00      	cmp	r3, #0
 803028c:	d1b1      	bne.n	80301f2 <_strtol_l.constprop.0+0x56>
 803028e:	2308      	movs	r3, #8
 8030290:	e7af      	b.n	80301f2 <_strtol_l.constprop.0+0x56>
 8030292:	2c30      	cmp	r4, #48	; 0x30
 8030294:	d0a5      	beq.n	80301e2 <_strtol_l.constprop.0+0x46>
 8030296:	230a      	movs	r3, #10
 8030298:	e7ab      	b.n	80301f2 <_strtol_l.constprop.0+0x56>
 803029a:	bf00      	nop
 803029c:	08035001 	.word	0x08035001

080302a0 <_strtol_r>:
 80302a0:	f7ff bf7c 	b.w	803019c <_strtol_l.constprop.0>

080302a4 <__ssputs_r>:
 80302a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80302a8:	688e      	ldr	r6, [r1, #8]
 80302aa:	461f      	mov	r7, r3
 80302ac:	42be      	cmp	r6, r7
 80302ae:	680b      	ldr	r3, [r1, #0]
 80302b0:	4682      	mov	sl, r0
 80302b2:	460c      	mov	r4, r1
 80302b4:	4690      	mov	r8, r2
 80302b6:	d82c      	bhi.n	8030312 <__ssputs_r+0x6e>
 80302b8:	898a      	ldrh	r2, [r1, #12]
 80302ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80302be:	d026      	beq.n	803030e <__ssputs_r+0x6a>
 80302c0:	6965      	ldr	r5, [r4, #20]
 80302c2:	6909      	ldr	r1, [r1, #16]
 80302c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80302c8:	eba3 0901 	sub.w	r9, r3, r1
 80302cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80302d0:	1c7b      	adds	r3, r7, #1
 80302d2:	444b      	add	r3, r9
 80302d4:	106d      	asrs	r5, r5, #1
 80302d6:	429d      	cmp	r5, r3
 80302d8:	bf38      	it	cc
 80302da:	461d      	movcc	r5, r3
 80302dc:	0553      	lsls	r3, r2, #21
 80302de:	d527      	bpl.n	8030330 <__ssputs_r+0x8c>
 80302e0:	4629      	mov	r1, r5
 80302e2:	f7fc fa77 	bl	802c7d4 <_malloc_r>
 80302e6:	4606      	mov	r6, r0
 80302e8:	b360      	cbz	r0, 8030344 <__ssputs_r+0xa0>
 80302ea:	6921      	ldr	r1, [r4, #16]
 80302ec:	464a      	mov	r2, r9
 80302ee:	f7fd fdb2 	bl	802de56 <memcpy>
 80302f2:	89a3      	ldrh	r3, [r4, #12]
 80302f4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80302f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80302fc:	81a3      	strh	r3, [r4, #12]
 80302fe:	6126      	str	r6, [r4, #16]
 8030300:	6165      	str	r5, [r4, #20]
 8030302:	444e      	add	r6, r9
 8030304:	eba5 0509 	sub.w	r5, r5, r9
 8030308:	6026      	str	r6, [r4, #0]
 803030a:	60a5      	str	r5, [r4, #8]
 803030c:	463e      	mov	r6, r7
 803030e:	42be      	cmp	r6, r7
 8030310:	d900      	bls.n	8030314 <__ssputs_r+0x70>
 8030312:	463e      	mov	r6, r7
 8030314:	6820      	ldr	r0, [r4, #0]
 8030316:	4632      	mov	r2, r6
 8030318:	4641      	mov	r1, r8
 803031a:	f7fd fbad 	bl	802da78 <memmove>
 803031e:	68a3      	ldr	r3, [r4, #8]
 8030320:	1b9b      	subs	r3, r3, r6
 8030322:	60a3      	str	r3, [r4, #8]
 8030324:	6823      	ldr	r3, [r4, #0]
 8030326:	4433      	add	r3, r6
 8030328:	6023      	str	r3, [r4, #0]
 803032a:	2000      	movs	r0, #0
 803032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8030330:	462a      	mov	r2, r5
 8030332:	f001 face 	bl	80318d2 <_realloc_r>
 8030336:	4606      	mov	r6, r0
 8030338:	2800      	cmp	r0, #0
 803033a:	d1e0      	bne.n	80302fe <__ssputs_r+0x5a>
 803033c:	6921      	ldr	r1, [r4, #16]
 803033e:	4650      	mov	r0, sl
 8030340:	f7fe fc20 	bl	802eb84 <_free_r>
 8030344:	230c      	movs	r3, #12
 8030346:	f8ca 3000 	str.w	r3, [sl]
 803034a:	89a3      	ldrh	r3, [r4, #12]
 803034c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030350:	81a3      	strh	r3, [r4, #12]
 8030352:	f04f 30ff 	mov.w	r0, #4294967295
 8030356:	e7e9      	b.n	803032c <__ssputs_r+0x88>

08030358 <_svfiprintf_r>:
 8030358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803035c:	4698      	mov	r8, r3
 803035e:	898b      	ldrh	r3, [r1, #12]
 8030360:	061b      	lsls	r3, r3, #24
 8030362:	b09d      	sub	sp, #116	; 0x74
 8030364:	4607      	mov	r7, r0
 8030366:	460d      	mov	r5, r1
 8030368:	4614      	mov	r4, r2
 803036a:	d50e      	bpl.n	803038a <_svfiprintf_r+0x32>
 803036c:	690b      	ldr	r3, [r1, #16]
 803036e:	b963      	cbnz	r3, 803038a <_svfiprintf_r+0x32>
 8030370:	2140      	movs	r1, #64	; 0x40
 8030372:	f7fc fa2f 	bl	802c7d4 <_malloc_r>
 8030376:	6028      	str	r0, [r5, #0]
 8030378:	6128      	str	r0, [r5, #16]
 803037a:	b920      	cbnz	r0, 8030386 <_svfiprintf_r+0x2e>
 803037c:	230c      	movs	r3, #12
 803037e:	603b      	str	r3, [r7, #0]
 8030380:	f04f 30ff 	mov.w	r0, #4294967295
 8030384:	e0d0      	b.n	8030528 <_svfiprintf_r+0x1d0>
 8030386:	2340      	movs	r3, #64	; 0x40
 8030388:	616b      	str	r3, [r5, #20]
 803038a:	2300      	movs	r3, #0
 803038c:	9309      	str	r3, [sp, #36]	; 0x24
 803038e:	2320      	movs	r3, #32
 8030390:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8030394:	f8cd 800c 	str.w	r8, [sp, #12]
 8030398:	2330      	movs	r3, #48	; 0x30
 803039a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8030540 <_svfiprintf_r+0x1e8>
 803039e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80303a2:	f04f 0901 	mov.w	r9, #1
 80303a6:	4623      	mov	r3, r4
 80303a8:	469a      	mov	sl, r3
 80303aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80303ae:	b10a      	cbz	r2, 80303b4 <_svfiprintf_r+0x5c>
 80303b0:	2a25      	cmp	r2, #37	; 0x25
 80303b2:	d1f9      	bne.n	80303a8 <_svfiprintf_r+0x50>
 80303b4:	ebba 0b04 	subs.w	fp, sl, r4
 80303b8:	d00b      	beq.n	80303d2 <_svfiprintf_r+0x7a>
 80303ba:	465b      	mov	r3, fp
 80303bc:	4622      	mov	r2, r4
 80303be:	4629      	mov	r1, r5
 80303c0:	4638      	mov	r0, r7
 80303c2:	f7ff ff6f 	bl	80302a4 <__ssputs_r>
 80303c6:	3001      	adds	r0, #1
 80303c8:	f000 80a9 	beq.w	803051e <_svfiprintf_r+0x1c6>
 80303cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80303ce:	445a      	add	r2, fp
 80303d0:	9209      	str	r2, [sp, #36]	; 0x24
 80303d2:	f89a 3000 	ldrb.w	r3, [sl]
 80303d6:	2b00      	cmp	r3, #0
 80303d8:	f000 80a1 	beq.w	803051e <_svfiprintf_r+0x1c6>
 80303dc:	2300      	movs	r3, #0
 80303de:	f04f 32ff 	mov.w	r2, #4294967295
 80303e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80303e6:	f10a 0a01 	add.w	sl, sl, #1
 80303ea:	9304      	str	r3, [sp, #16]
 80303ec:	9307      	str	r3, [sp, #28]
 80303ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80303f2:	931a      	str	r3, [sp, #104]	; 0x68
 80303f4:	4654      	mov	r4, sl
 80303f6:	2205      	movs	r2, #5
 80303f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80303fc:	4850      	ldr	r0, [pc, #320]	; (8030540 <_svfiprintf_r+0x1e8>)
 80303fe:	f7df feff 	bl	8010200 <memchr>
 8030402:	9a04      	ldr	r2, [sp, #16]
 8030404:	b9d8      	cbnz	r0, 803043e <_svfiprintf_r+0xe6>
 8030406:	06d0      	lsls	r0, r2, #27
 8030408:	bf44      	itt	mi
 803040a:	2320      	movmi	r3, #32
 803040c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030410:	0711      	lsls	r1, r2, #28
 8030412:	bf44      	itt	mi
 8030414:	232b      	movmi	r3, #43	; 0x2b
 8030416:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 803041a:	f89a 3000 	ldrb.w	r3, [sl]
 803041e:	2b2a      	cmp	r3, #42	; 0x2a
 8030420:	d015      	beq.n	803044e <_svfiprintf_r+0xf6>
 8030422:	9a07      	ldr	r2, [sp, #28]
 8030424:	4654      	mov	r4, sl
 8030426:	2000      	movs	r0, #0
 8030428:	f04f 0c0a 	mov.w	ip, #10
 803042c:	4621      	mov	r1, r4
 803042e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030432:	3b30      	subs	r3, #48	; 0x30
 8030434:	2b09      	cmp	r3, #9
 8030436:	d94d      	bls.n	80304d4 <_svfiprintf_r+0x17c>
 8030438:	b1b0      	cbz	r0, 8030468 <_svfiprintf_r+0x110>
 803043a:	9207      	str	r2, [sp, #28]
 803043c:	e014      	b.n	8030468 <_svfiprintf_r+0x110>
 803043e:	eba0 0308 	sub.w	r3, r0, r8
 8030442:	fa09 f303 	lsl.w	r3, r9, r3
 8030446:	4313      	orrs	r3, r2
 8030448:	9304      	str	r3, [sp, #16]
 803044a:	46a2      	mov	sl, r4
 803044c:	e7d2      	b.n	80303f4 <_svfiprintf_r+0x9c>
 803044e:	9b03      	ldr	r3, [sp, #12]
 8030450:	1d19      	adds	r1, r3, #4
 8030452:	681b      	ldr	r3, [r3, #0]
 8030454:	9103      	str	r1, [sp, #12]
 8030456:	2b00      	cmp	r3, #0
 8030458:	bfbb      	ittet	lt
 803045a:	425b      	neglt	r3, r3
 803045c:	f042 0202 	orrlt.w	r2, r2, #2
 8030460:	9307      	strge	r3, [sp, #28]
 8030462:	9307      	strlt	r3, [sp, #28]
 8030464:	bfb8      	it	lt
 8030466:	9204      	strlt	r2, [sp, #16]
 8030468:	7823      	ldrb	r3, [r4, #0]
 803046a:	2b2e      	cmp	r3, #46	; 0x2e
 803046c:	d10c      	bne.n	8030488 <_svfiprintf_r+0x130>
 803046e:	7863      	ldrb	r3, [r4, #1]
 8030470:	2b2a      	cmp	r3, #42	; 0x2a
 8030472:	d134      	bne.n	80304de <_svfiprintf_r+0x186>
 8030474:	9b03      	ldr	r3, [sp, #12]
 8030476:	1d1a      	adds	r2, r3, #4
 8030478:	681b      	ldr	r3, [r3, #0]
 803047a:	9203      	str	r2, [sp, #12]
 803047c:	2b00      	cmp	r3, #0
 803047e:	bfb8      	it	lt
 8030480:	f04f 33ff 	movlt.w	r3, #4294967295
 8030484:	3402      	adds	r4, #2
 8030486:	9305      	str	r3, [sp, #20]
 8030488:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8030550 <_svfiprintf_r+0x1f8>
 803048c:	7821      	ldrb	r1, [r4, #0]
 803048e:	2203      	movs	r2, #3
 8030490:	4650      	mov	r0, sl
 8030492:	f7df feb5 	bl	8010200 <memchr>
 8030496:	b138      	cbz	r0, 80304a8 <_svfiprintf_r+0x150>
 8030498:	9b04      	ldr	r3, [sp, #16]
 803049a:	eba0 000a 	sub.w	r0, r0, sl
 803049e:	2240      	movs	r2, #64	; 0x40
 80304a0:	4082      	lsls	r2, r0
 80304a2:	4313      	orrs	r3, r2
 80304a4:	3401      	adds	r4, #1
 80304a6:	9304      	str	r3, [sp, #16]
 80304a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80304ac:	4825      	ldr	r0, [pc, #148]	; (8030544 <_svfiprintf_r+0x1ec>)
 80304ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80304b2:	2206      	movs	r2, #6
 80304b4:	f7df fea4 	bl	8010200 <memchr>
 80304b8:	2800      	cmp	r0, #0
 80304ba:	d038      	beq.n	803052e <_svfiprintf_r+0x1d6>
 80304bc:	4b22      	ldr	r3, [pc, #136]	; (8030548 <_svfiprintf_r+0x1f0>)
 80304be:	bb1b      	cbnz	r3, 8030508 <_svfiprintf_r+0x1b0>
 80304c0:	9b03      	ldr	r3, [sp, #12]
 80304c2:	3307      	adds	r3, #7
 80304c4:	f023 0307 	bic.w	r3, r3, #7
 80304c8:	3308      	adds	r3, #8
 80304ca:	9303      	str	r3, [sp, #12]
 80304cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80304ce:	4433      	add	r3, r6
 80304d0:	9309      	str	r3, [sp, #36]	; 0x24
 80304d2:	e768      	b.n	80303a6 <_svfiprintf_r+0x4e>
 80304d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80304d8:	460c      	mov	r4, r1
 80304da:	2001      	movs	r0, #1
 80304dc:	e7a6      	b.n	803042c <_svfiprintf_r+0xd4>
 80304de:	2300      	movs	r3, #0
 80304e0:	3401      	adds	r4, #1
 80304e2:	9305      	str	r3, [sp, #20]
 80304e4:	4619      	mov	r1, r3
 80304e6:	f04f 0c0a 	mov.w	ip, #10
 80304ea:	4620      	mov	r0, r4
 80304ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80304f0:	3a30      	subs	r2, #48	; 0x30
 80304f2:	2a09      	cmp	r2, #9
 80304f4:	d903      	bls.n	80304fe <_svfiprintf_r+0x1a6>
 80304f6:	2b00      	cmp	r3, #0
 80304f8:	d0c6      	beq.n	8030488 <_svfiprintf_r+0x130>
 80304fa:	9105      	str	r1, [sp, #20]
 80304fc:	e7c4      	b.n	8030488 <_svfiprintf_r+0x130>
 80304fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8030502:	4604      	mov	r4, r0
 8030504:	2301      	movs	r3, #1
 8030506:	e7f0      	b.n	80304ea <_svfiprintf_r+0x192>
 8030508:	ab03      	add	r3, sp, #12
 803050a:	9300      	str	r3, [sp, #0]
 803050c:	462a      	mov	r2, r5
 803050e:	4b0f      	ldr	r3, [pc, #60]	; (803054c <_svfiprintf_r+0x1f4>)
 8030510:	a904      	add	r1, sp, #16
 8030512:	4638      	mov	r0, r7
 8030514:	f7fc fa8a 	bl	802ca2c <_printf_float>
 8030518:	1c42      	adds	r2, r0, #1
 803051a:	4606      	mov	r6, r0
 803051c:	d1d6      	bne.n	80304cc <_svfiprintf_r+0x174>
 803051e:	89ab      	ldrh	r3, [r5, #12]
 8030520:	065b      	lsls	r3, r3, #25
 8030522:	f53f af2d 	bmi.w	8030380 <_svfiprintf_r+0x28>
 8030526:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030528:	b01d      	add	sp, #116	; 0x74
 803052a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803052e:	ab03      	add	r3, sp, #12
 8030530:	9300      	str	r3, [sp, #0]
 8030532:	462a      	mov	r2, r5
 8030534:	4b05      	ldr	r3, [pc, #20]	; (803054c <_svfiprintf_r+0x1f4>)
 8030536:	a904      	add	r1, sp, #16
 8030538:	4638      	mov	r0, r7
 803053a:	f7fc fd1b 	bl	802cf74 <_printf_i>
 803053e:	e7eb      	b.n	8030518 <_svfiprintf_r+0x1c0>
 8030540:	08035101 	.word	0x08035101
 8030544:	0803510b 	.word	0x0803510b
 8030548:	0802ca2d 	.word	0x0802ca2d
 803054c:	080302a5 	.word	0x080302a5
 8030550:	08035107 	.word	0x08035107

08030554 <_sungetc_r>:
 8030554:	b538      	push	{r3, r4, r5, lr}
 8030556:	1c4b      	adds	r3, r1, #1
 8030558:	4614      	mov	r4, r2
 803055a:	d103      	bne.n	8030564 <_sungetc_r+0x10>
 803055c:	f04f 35ff 	mov.w	r5, #4294967295
 8030560:	4628      	mov	r0, r5
 8030562:	bd38      	pop	{r3, r4, r5, pc}
 8030564:	8993      	ldrh	r3, [r2, #12]
 8030566:	f023 0320 	bic.w	r3, r3, #32
 803056a:	8193      	strh	r3, [r2, #12]
 803056c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 803056e:	6852      	ldr	r2, [r2, #4]
 8030570:	b2cd      	uxtb	r5, r1
 8030572:	b18b      	cbz	r3, 8030598 <_sungetc_r+0x44>
 8030574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8030576:	4293      	cmp	r3, r2
 8030578:	dd08      	ble.n	803058c <_sungetc_r+0x38>
 803057a:	6823      	ldr	r3, [r4, #0]
 803057c:	1e5a      	subs	r2, r3, #1
 803057e:	6022      	str	r2, [r4, #0]
 8030580:	f803 5c01 	strb.w	r5, [r3, #-1]
 8030584:	6863      	ldr	r3, [r4, #4]
 8030586:	3301      	adds	r3, #1
 8030588:	6063      	str	r3, [r4, #4]
 803058a:	e7e9      	b.n	8030560 <_sungetc_r+0xc>
 803058c:	4621      	mov	r1, r4
 803058e:	f000 fd8e 	bl	80310ae <__submore>
 8030592:	2800      	cmp	r0, #0
 8030594:	d0f1      	beq.n	803057a <_sungetc_r+0x26>
 8030596:	e7e1      	b.n	803055c <_sungetc_r+0x8>
 8030598:	6921      	ldr	r1, [r4, #16]
 803059a:	6823      	ldr	r3, [r4, #0]
 803059c:	b151      	cbz	r1, 80305b4 <_sungetc_r+0x60>
 803059e:	4299      	cmp	r1, r3
 80305a0:	d208      	bcs.n	80305b4 <_sungetc_r+0x60>
 80305a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80305a6:	42a9      	cmp	r1, r5
 80305a8:	d104      	bne.n	80305b4 <_sungetc_r+0x60>
 80305aa:	3b01      	subs	r3, #1
 80305ac:	3201      	adds	r2, #1
 80305ae:	6023      	str	r3, [r4, #0]
 80305b0:	6062      	str	r2, [r4, #4]
 80305b2:	e7d5      	b.n	8030560 <_sungetc_r+0xc>
 80305b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80305b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80305bc:	6363      	str	r3, [r4, #52]	; 0x34
 80305be:	2303      	movs	r3, #3
 80305c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80305c2:	4623      	mov	r3, r4
 80305c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80305c8:	6023      	str	r3, [r4, #0]
 80305ca:	2301      	movs	r3, #1
 80305cc:	e7dc      	b.n	8030588 <_sungetc_r+0x34>

080305ce <__ssrefill_r>:
 80305ce:	b510      	push	{r4, lr}
 80305d0:	460c      	mov	r4, r1
 80305d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80305d4:	b169      	cbz	r1, 80305f2 <__ssrefill_r+0x24>
 80305d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80305da:	4299      	cmp	r1, r3
 80305dc:	d001      	beq.n	80305e2 <__ssrefill_r+0x14>
 80305de:	f7fe fad1 	bl	802eb84 <_free_r>
 80305e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80305e4:	6063      	str	r3, [r4, #4]
 80305e6:	2000      	movs	r0, #0
 80305e8:	6360      	str	r0, [r4, #52]	; 0x34
 80305ea:	b113      	cbz	r3, 80305f2 <__ssrefill_r+0x24>
 80305ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80305ee:	6023      	str	r3, [r4, #0]
 80305f0:	bd10      	pop	{r4, pc}
 80305f2:	6923      	ldr	r3, [r4, #16]
 80305f4:	6023      	str	r3, [r4, #0]
 80305f6:	2300      	movs	r3, #0
 80305f8:	6063      	str	r3, [r4, #4]
 80305fa:	89a3      	ldrh	r3, [r4, #12]
 80305fc:	f043 0320 	orr.w	r3, r3, #32
 8030600:	81a3      	strh	r3, [r4, #12]
 8030602:	f04f 30ff 	mov.w	r0, #4294967295
 8030606:	e7f3      	b.n	80305f0 <__ssrefill_r+0x22>

08030608 <__ssvfiscanf_r>:
 8030608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803060c:	460c      	mov	r4, r1
 803060e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8030612:	2100      	movs	r1, #0
 8030614:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8030618:	49a6      	ldr	r1, [pc, #664]	; (80308b4 <__ssvfiscanf_r+0x2ac>)
 803061a:	91a0      	str	r1, [sp, #640]	; 0x280
 803061c:	f10d 0804 	add.w	r8, sp, #4
 8030620:	49a5      	ldr	r1, [pc, #660]	; (80308b8 <__ssvfiscanf_r+0x2b0>)
 8030622:	4fa6      	ldr	r7, [pc, #664]	; (80308bc <__ssvfiscanf_r+0x2b4>)
 8030624:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80308c0 <__ssvfiscanf_r+0x2b8>
 8030628:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 803062c:	4606      	mov	r6, r0
 803062e:	91a1      	str	r1, [sp, #644]	; 0x284
 8030630:	9300      	str	r3, [sp, #0]
 8030632:	7813      	ldrb	r3, [r2, #0]
 8030634:	2b00      	cmp	r3, #0
 8030636:	f000 815a 	beq.w	80308ee <__ssvfiscanf_r+0x2e6>
 803063a:	5cf9      	ldrb	r1, [r7, r3]
 803063c:	f011 0108 	ands.w	r1, r1, #8
 8030640:	f102 0501 	add.w	r5, r2, #1
 8030644:	d019      	beq.n	803067a <__ssvfiscanf_r+0x72>
 8030646:	6863      	ldr	r3, [r4, #4]
 8030648:	2b00      	cmp	r3, #0
 803064a:	dd0f      	ble.n	803066c <__ssvfiscanf_r+0x64>
 803064c:	6823      	ldr	r3, [r4, #0]
 803064e:	781a      	ldrb	r2, [r3, #0]
 8030650:	5cba      	ldrb	r2, [r7, r2]
 8030652:	0712      	lsls	r2, r2, #28
 8030654:	d401      	bmi.n	803065a <__ssvfiscanf_r+0x52>
 8030656:	462a      	mov	r2, r5
 8030658:	e7eb      	b.n	8030632 <__ssvfiscanf_r+0x2a>
 803065a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803065c:	3201      	adds	r2, #1
 803065e:	9245      	str	r2, [sp, #276]	; 0x114
 8030660:	6862      	ldr	r2, [r4, #4]
 8030662:	3301      	adds	r3, #1
 8030664:	3a01      	subs	r2, #1
 8030666:	6062      	str	r2, [r4, #4]
 8030668:	6023      	str	r3, [r4, #0]
 803066a:	e7ec      	b.n	8030646 <__ssvfiscanf_r+0x3e>
 803066c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 803066e:	4621      	mov	r1, r4
 8030670:	4630      	mov	r0, r6
 8030672:	4798      	blx	r3
 8030674:	2800      	cmp	r0, #0
 8030676:	d0e9      	beq.n	803064c <__ssvfiscanf_r+0x44>
 8030678:	e7ed      	b.n	8030656 <__ssvfiscanf_r+0x4e>
 803067a:	2b25      	cmp	r3, #37	; 0x25
 803067c:	d012      	beq.n	80306a4 <__ssvfiscanf_r+0x9c>
 803067e:	469a      	mov	sl, r3
 8030680:	6863      	ldr	r3, [r4, #4]
 8030682:	2b00      	cmp	r3, #0
 8030684:	f340 8091 	ble.w	80307aa <__ssvfiscanf_r+0x1a2>
 8030688:	6822      	ldr	r2, [r4, #0]
 803068a:	7813      	ldrb	r3, [r2, #0]
 803068c:	4553      	cmp	r3, sl
 803068e:	f040 812e 	bne.w	80308ee <__ssvfiscanf_r+0x2e6>
 8030692:	6863      	ldr	r3, [r4, #4]
 8030694:	3b01      	subs	r3, #1
 8030696:	6063      	str	r3, [r4, #4]
 8030698:	9b45      	ldr	r3, [sp, #276]	; 0x114
 803069a:	3201      	adds	r2, #1
 803069c:	3301      	adds	r3, #1
 803069e:	6022      	str	r2, [r4, #0]
 80306a0:	9345      	str	r3, [sp, #276]	; 0x114
 80306a2:	e7d8      	b.n	8030656 <__ssvfiscanf_r+0x4e>
 80306a4:	9141      	str	r1, [sp, #260]	; 0x104
 80306a6:	9143      	str	r1, [sp, #268]	; 0x10c
 80306a8:	7853      	ldrb	r3, [r2, #1]
 80306aa:	2b2a      	cmp	r3, #42	; 0x2a
 80306ac:	bf02      	ittt	eq
 80306ae:	2310      	moveq	r3, #16
 80306b0:	1c95      	addeq	r5, r2, #2
 80306b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80306b4:	220a      	movs	r2, #10
 80306b6:	46aa      	mov	sl, r5
 80306b8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80306bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80306c0:	2b09      	cmp	r3, #9
 80306c2:	d91c      	bls.n	80306fe <__ssvfiscanf_r+0xf6>
 80306c4:	487e      	ldr	r0, [pc, #504]	; (80308c0 <__ssvfiscanf_r+0x2b8>)
 80306c6:	2203      	movs	r2, #3
 80306c8:	f7df fd9a 	bl	8010200 <memchr>
 80306cc:	b138      	cbz	r0, 80306de <__ssvfiscanf_r+0xd6>
 80306ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80306d0:	eba0 0009 	sub.w	r0, r0, r9
 80306d4:	2301      	movs	r3, #1
 80306d6:	4083      	lsls	r3, r0
 80306d8:	4313      	orrs	r3, r2
 80306da:	9341      	str	r3, [sp, #260]	; 0x104
 80306dc:	4655      	mov	r5, sl
 80306de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80306e2:	2b78      	cmp	r3, #120	; 0x78
 80306e4:	d806      	bhi.n	80306f4 <__ssvfiscanf_r+0xec>
 80306e6:	2b57      	cmp	r3, #87	; 0x57
 80306e8:	d810      	bhi.n	803070c <__ssvfiscanf_r+0x104>
 80306ea:	2b25      	cmp	r3, #37	; 0x25
 80306ec:	d0c7      	beq.n	803067e <__ssvfiscanf_r+0x76>
 80306ee:	d857      	bhi.n	80307a0 <__ssvfiscanf_r+0x198>
 80306f0:	2b00      	cmp	r3, #0
 80306f2:	d065      	beq.n	80307c0 <__ssvfiscanf_r+0x1b8>
 80306f4:	2303      	movs	r3, #3
 80306f6:	9347      	str	r3, [sp, #284]	; 0x11c
 80306f8:	230a      	movs	r3, #10
 80306fa:	9342      	str	r3, [sp, #264]	; 0x108
 80306fc:	e076      	b.n	80307ec <__ssvfiscanf_r+0x1e4>
 80306fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8030700:	fb02 1103 	mla	r1, r2, r3, r1
 8030704:	3930      	subs	r1, #48	; 0x30
 8030706:	9143      	str	r1, [sp, #268]	; 0x10c
 8030708:	4655      	mov	r5, sl
 803070a:	e7d4      	b.n	80306b6 <__ssvfiscanf_r+0xae>
 803070c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8030710:	2a20      	cmp	r2, #32
 8030712:	d8ef      	bhi.n	80306f4 <__ssvfiscanf_r+0xec>
 8030714:	a101      	add	r1, pc, #4	; (adr r1, 803071c <__ssvfiscanf_r+0x114>)
 8030716:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 803071a:	bf00      	nop
 803071c:	080307cf 	.word	0x080307cf
 8030720:	080306f5 	.word	0x080306f5
 8030724:	080306f5 	.word	0x080306f5
 8030728:	0803082d 	.word	0x0803082d
 803072c:	080306f5 	.word	0x080306f5
 8030730:	080306f5 	.word	0x080306f5
 8030734:	080306f5 	.word	0x080306f5
 8030738:	080306f5 	.word	0x080306f5
 803073c:	080306f5 	.word	0x080306f5
 8030740:	080306f5 	.word	0x080306f5
 8030744:	080306f5 	.word	0x080306f5
 8030748:	08030843 	.word	0x08030843
 803074c:	08030829 	.word	0x08030829
 8030750:	080307a7 	.word	0x080307a7
 8030754:	080307a7 	.word	0x080307a7
 8030758:	080307a7 	.word	0x080307a7
 803075c:	080306f5 	.word	0x080306f5
 8030760:	080307e5 	.word	0x080307e5
 8030764:	080306f5 	.word	0x080306f5
 8030768:	080306f5 	.word	0x080306f5
 803076c:	080306f5 	.word	0x080306f5
 8030770:	080306f5 	.word	0x080306f5
 8030774:	08030853 	.word	0x08030853
 8030778:	08030821 	.word	0x08030821
 803077c:	080307c7 	.word	0x080307c7
 8030780:	080306f5 	.word	0x080306f5
 8030784:	080306f5 	.word	0x080306f5
 8030788:	0803084f 	.word	0x0803084f
 803078c:	080306f5 	.word	0x080306f5
 8030790:	08030829 	.word	0x08030829
 8030794:	080306f5 	.word	0x080306f5
 8030798:	080306f5 	.word	0x080306f5
 803079c:	080307cf 	.word	0x080307cf
 80307a0:	3b45      	subs	r3, #69	; 0x45
 80307a2:	2b02      	cmp	r3, #2
 80307a4:	d8a6      	bhi.n	80306f4 <__ssvfiscanf_r+0xec>
 80307a6:	2305      	movs	r3, #5
 80307a8:	e01f      	b.n	80307ea <__ssvfiscanf_r+0x1e2>
 80307aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80307ac:	4621      	mov	r1, r4
 80307ae:	4630      	mov	r0, r6
 80307b0:	4798      	blx	r3
 80307b2:	2800      	cmp	r0, #0
 80307b4:	f43f af68 	beq.w	8030688 <__ssvfiscanf_r+0x80>
 80307b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80307ba:	2800      	cmp	r0, #0
 80307bc:	f040 808d 	bne.w	80308da <__ssvfiscanf_r+0x2d2>
 80307c0:	f04f 30ff 	mov.w	r0, #4294967295
 80307c4:	e08f      	b.n	80308e6 <__ssvfiscanf_r+0x2de>
 80307c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80307c8:	f042 0220 	orr.w	r2, r2, #32
 80307cc:	9241      	str	r2, [sp, #260]	; 0x104
 80307ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80307d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80307d4:	9241      	str	r2, [sp, #260]	; 0x104
 80307d6:	2210      	movs	r2, #16
 80307d8:	2b6f      	cmp	r3, #111	; 0x6f
 80307da:	9242      	str	r2, [sp, #264]	; 0x108
 80307dc:	bf34      	ite	cc
 80307de:	2303      	movcc	r3, #3
 80307e0:	2304      	movcs	r3, #4
 80307e2:	e002      	b.n	80307ea <__ssvfiscanf_r+0x1e2>
 80307e4:	2300      	movs	r3, #0
 80307e6:	9342      	str	r3, [sp, #264]	; 0x108
 80307e8:	2303      	movs	r3, #3
 80307ea:	9347      	str	r3, [sp, #284]	; 0x11c
 80307ec:	6863      	ldr	r3, [r4, #4]
 80307ee:	2b00      	cmp	r3, #0
 80307f0:	dd3d      	ble.n	803086e <__ssvfiscanf_r+0x266>
 80307f2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80307f4:	0659      	lsls	r1, r3, #25
 80307f6:	d404      	bmi.n	8030802 <__ssvfiscanf_r+0x1fa>
 80307f8:	6823      	ldr	r3, [r4, #0]
 80307fa:	781a      	ldrb	r2, [r3, #0]
 80307fc:	5cba      	ldrb	r2, [r7, r2]
 80307fe:	0712      	lsls	r2, r2, #28
 8030800:	d43c      	bmi.n	803087c <__ssvfiscanf_r+0x274>
 8030802:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8030804:	2b02      	cmp	r3, #2
 8030806:	dc4b      	bgt.n	80308a0 <__ssvfiscanf_r+0x298>
 8030808:	466b      	mov	r3, sp
 803080a:	4622      	mov	r2, r4
 803080c:	a941      	add	r1, sp, #260	; 0x104
 803080e:	4630      	mov	r0, r6
 8030810:	f000 f9b6 	bl	8030b80 <_scanf_chars>
 8030814:	2801      	cmp	r0, #1
 8030816:	d06a      	beq.n	80308ee <__ssvfiscanf_r+0x2e6>
 8030818:	2802      	cmp	r0, #2
 803081a:	f47f af1c 	bne.w	8030656 <__ssvfiscanf_r+0x4e>
 803081e:	e7cb      	b.n	80307b8 <__ssvfiscanf_r+0x1b0>
 8030820:	2308      	movs	r3, #8
 8030822:	9342      	str	r3, [sp, #264]	; 0x108
 8030824:	2304      	movs	r3, #4
 8030826:	e7e0      	b.n	80307ea <__ssvfiscanf_r+0x1e2>
 8030828:	220a      	movs	r2, #10
 803082a:	e7d5      	b.n	80307d8 <__ssvfiscanf_r+0x1d0>
 803082c:	4629      	mov	r1, r5
 803082e:	4640      	mov	r0, r8
 8030830:	f000 fc04 	bl	803103c <__sccl>
 8030834:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 803083a:	9341      	str	r3, [sp, #260]	; 0x104
 803083c:	4605      	mov	r5, r0
 803083e:	2301      	movs	r3, #1
 8030840:	e7d3      	b.n	80307ea <__ssvfiscanf_r+0x1e2>
 8030842:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8030844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030848:	9341      	str	r3, [sp, #260]	; 0x104
 803084a:	2300      	movs	r3, #0
 803084c:	e7cd      	b.n	80307ea <__ssvfiscanf_r+0x1e2>
 803084e:	2302      	movs	r3, #2
 8030850:	e7cb      	b.n	80307ea <__ssvfiscanf_r+0x1e2>
 8030852:	9841      	ldr	r0, [sp, #260]	; 0x104
 8030854:	06c3      	lsls	r3, r0, #27
 8030856:	f53f aefe 	bmi.w	8030656 <__ssvfiscanf_r+0x4e>
 803085a:	9b00      	ldr	r3, [sp, #0]
 803085c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803085e:	1d19      	adds	r1, r3, #4
 8030860:	9100      	str	r1, [sp, #0]
 8030862:	681b      	ldr	r3, [r3, #0]
 8030864:	07c0      	lsls	r0, r0, #31
 8030866:	bf4c      	ite	mi
 8030868:	801a      	strhmi	r2, [r3, #0]
 803086a:	601a      	strpl	r2, [r3, #0]
 803086c:	e6f3      	b.n	8030656 <__ssvfiscanf_r+0x4e>
 803086e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030870:	4621      	mov	r1, r4
 8030872:	4630      	mov	r0, r6
 8030874:	4798      	blx	r3
 8030876:	2800      	cmp	r0, #0
 8030878:	d0bb      	beq.n	80307f2 <__ssvfiscanf_r+0x1ea>
 803087a:	e79d      	b.n	80307b8 <__ssvfiscanf_r+0x1b0>
 803087c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 803087e:	3201      	adds	r2, #1
 8030880:	9245      	str	r2, [sp, #276]	; 0x114
 8030882:	6862      	ldr	r2, [r4, #4]
 8030884:	3a01      	subs	r2, #1
 8030886:	2a00      	cmp	r2, #0
 8030888:	6062      	str	r2, [r4, #4]
 803088a:	dd02      	ble.n	8030892 <__ssvfiscanf_r+0x28a>
 803088c:	3301      	adds	r3, #1
 803088e:	6023      	str	r3, [r4, #0]
 8030890:	e7b2      	b.n	80307f8 <__ssvfiscanf_r+0x1f0>
 8030892:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8030894:	4621      	mov	r1, r4
 8030896:	4630      	mov	r0, r6
 8030898:	4798      	blx	r3
 803089a:	2800      	cmp	r0, #0
 803089c:	d0ac      	beq.n	80307f8 <__ssvfiscanf_r+0x1f0>
 803089e:	e78b      	b.n	80307b8 <__ssvfiscanf_r+0x1b0>
 80308a0:	2b04      	cmp	r3, #4
 80308a2:	dc0f      	bgt.n	80308c4 <__ssvfiscanf_r+0x2bc>
 80308a4:	466b      	mov	r3, sp
 80308a6:	4622      	mov	r2, r4
 80308a8:	a941      	add	r1, sp, #260	; 0x104
 80308aa:	4630      	mov	r0, r6
 80308ac:	f000 f9c2 	bl	8030c34 <_scanf_i>
 80308b0:	e7b0      	b.n	8030814 <__ssvfiscanf_r+0x20c>
 80308b2:	bf00      	nop
 80308b4:	08030555 	.word	0x08030555
 80308b8:	080305cf 	.word	0x080305cf
 80308bc:	08035001 	.word	0x08035001
 80308c0:	08035107 	.word	0x08035107
 80308c4:	4b0b      	ldr	r3, [pc, #44]	; (80308f4 <__ssvfiscanf_r+0x2ec>)
 80308c6:	2b00      	cmp	r3, #0
 80308c8:	f43f aec5 	beq.w	8030656 <__ssvfiscanf_r+0x4e>
 80308cc:	466b      	mov	r3, sp
 80308ce:	4622      	mov	r2, r4
 80308d0:	a941      	add	r1, sp, #260	; 0x104
 80308d2:	4630      	mov	r0, r6
 80308d4:	f7fc fc70 	bl	802d1b8 <_scanf_float>
 80308d8:	e79c      	b.n	8030814 <__ssvfiscanf_r+0x20c>
 80308da:	89a3      	ldrh	r3, [r4, #12]
 80308dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80308e0:	bf18      	it	ne
 80308e2:	f04f 30ff 	movne.w	r0, #4294967295
 80308e6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80308ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80308ee:	9844      	ldr	r0, [sp, #272]	; 0x110
 80308f0:	e7f9      	b.n	80308e6 <__ssvfiscanf_r+0x2de>
 80308f2:	bf00      	nop
 80308f4:	0802d1b9 	.word	0x0802d1b9

080308f8 <__sfputc_r>:
 80308f8:	6893      	ldr	r3, [r2, #8]
 80308fa:	3b01      	subs	r3, #1
 80308fc:	2b00      	cmp	r3, #0
 80308fe:	b410      	push	{r4}
 8030900:	6093      	str	r3, [r2, #8]
 8030902:	da08      	bge.n	8030916 <__sfputc_r+0x1e>
 8030904:	6994      	ldr	r4, [r2, #24]
 8030906:	42a3      	cmp	r3, r4
 8030908:	db01      	blt.n	803090e <__sfputc_r+0x16>
 803090a:	290a      	cmp	r1, #10
 803090c:	d103      	bne.n	8030916 <__sfputc_r+0x1e>
 803090e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030912:	f7fd b80c 	b.w	802d92e <__swbuf_r>
 8030916:	6813      	ldr	r3, [r2, #0]
 8030918:	1c58      	adds	r0, r3, #1
 803091a:	6010      	str	r0, [r2, #0]
 803091c:	7019      	strb	r1, [r3, #0]
 803091e:	4608      	mov	r0, r1
 8030920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8030924:	4770      	bx	lr

08030926 <__sfputs_r>:
 8030926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8030928:	4606      	mov	r6, r0
 803092a:	460f      	mov	r7, r1
 803092c:	4614      	mov	r4, r2
 803092e:	18d5      	adds	r5, r2, r3
 8030930:	42ac      	cmp	r4, r5
 8030932:	d101      	bne.n	8030938 <__sfputs_r+0x12>
 8030934:	2000      	movs	r0, #0
 8030936:	e007      	b.n	8030948 <__sfputs_r+0x22>
 8030938:	f814 1b01 	ldrb.w	r1, [r4], #1
 803093c:	463a      	mov	r2, r7
 803093e:	4630      	mov	r0, r6
 8030940:	f7ff ffda 	bl	80308f8 <__sfputc_r>
 8030944:	1c43      	adds	r3, r0, #1
 8030946:	d1f3      	bne.n	8030930 <__sfputs_r+0xa>
 8030948:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0803094c <_vfiprintf_r>:
 803094c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030950:	460d      	mov	r5, r1
 8030952:	b09d      	sub	sp, #116	; 0x74
 8030954:	4614      	mov	r4, r2
 8030956:	4698      	mov	r8, r3
 8030958:	4606      	mov	r6, r0
 803095a:	b118      	cbz	r0, 8030964 <_vfiprintf_r+0x18>
 803095c:	6a03      	ldr	r3, [r0, #32]
 803095e:	b90b      	cbnz	r3, 8030964 <_vfiprintf_r+0x18>
 8030960:	f7fc fec6 	bl	802d6f0 <__sinit>
 8030964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030966:	07d9      	lsls	r1, r3, #31
 8030968:	d405      	bmi.n	8030976 <_vfiprintf_r+0x2a>
 803096a:	89ab      	ldrh	r3, [r5, #12]
 803096c:	059a      	lsls	r2, r3, #22
 803096e:	d402      	bmi.n	8030976 <_vfiprintf_r+0x2a>
 8030970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030972:	f7fd fa66 	bl	802de42 <__retarget_lock_acquire_recursive>
 8030976:	89ab      	ldrh	r3, [r5, #12]
 8030978:	071b      	lsls	r3, r3, #28
 803097a:	d501      	bpl.n	8030980 <_vfiprintf_r+0x34>
 803097c:	692b      	ldr	r3, [r5, #16]
 803097e:	b99b      	cbnz	r3, 80309a8 <_vfiprintf_r+0x5c>
 8030980:	4629      	mov	r1, r5
 8030982:	4630      	mov	r0, r6
 8030984:	f7fd f810 	bl	802d9a8 <__swsetup_r>
 8030988:	b170      	cbz	r0, 80309a8 <_vfiprintf_r+0x5c>
 803098a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 803098c:	07dc      	lsls	r4, r3, #31
 803098e:	d504      	bpl.n	803099a <_vfiprintf_r+0x4e>
 8030990:	f04f 30ff 	mov.w	r0, #4294967295
 8030994:	b01d      	add	sp, #116	; 0x74
 8030996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 803099a:	89ab      	ldrh	r3, [r5, #12]
 803099c:	0598      	lsls	r0, r3, #22
 803099e:	d4f7      	bmi.n	8030990 <_vfiprintf_r+0x44>
 80309a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80309a2:	f7fd fa4f 	bl	802de44 <__retarget_lock_release_recursive>
 80309a6:	e7f3      	b.n	8030990 <_vfiprintf_r+0x44>
 80309a8:	2300      	movs	r3, #0
 80309aa:	9309      	str	r3, [sp, #36]	; 0x24
 80309ac:	2320      	movs	r3, #32
 80309ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80309b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80309b6:	2330      	movs	r3, #48	; 0x30
 80309b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8030b6c <_vfiprintf_r+0x220>
 80309bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80309c0:	f04f 0901 	mov.w	r9, #1
 80309c4:	4623      	mov	r3, r4
 80309c6:	469a      	mov	sl, r3
 80309c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80309cc:	b10a      	cbz	r2, 80309d2 <_vfiprintf_r+0x86>
 80309ce:	2a25      	cmp	r2, #37	; 0x25
 80309d0:	d1f9      	bne.n	80309c6 <_vfiprintf_r+0x7a>
 80309d2:	ebba 0b04 	subs.w	fp, sl, r4
 80309d6:	d00b      	beq.n	80309f0 <_vfiprintf_r+0xa4>
 80309d8:	465b      	mov	r3, fp
 80309da:	4622      	mov	r2, r4
 80309dc:	4629      	mov	r1, r5
 80309de:	4630      	mov	r0, r6
 80309e0:	f7ff ffa1 	bl	8030926 <__sfputs_r>
 80309e4:	3001      	adds	r0, #1
 80309e6:	f000 80a9 	beq.w	8030b3c <_vfiprintf_r+0x1f0>
 80309ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80309ec:	445a      	add	r2, fp
 80309ee:	9209      	str	r2, [sp, #36]	; 0x24
 80309f0:	f89a 3000 	ldrb.w	r3, [sl]
 80309f4:	2b00      	cmp	r3, #0
 80309f6:	f000 80a1 	beq.w	8030b3c <_vfiprintf_r+0x1f0>
 80309fa:	2300      	movs	r3, #0
 80309fc:	f04f 32ff 	mov.w	r2, #4294967295
 8030a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8030a04:	f10a 0a01 	add.w	sl, sl, #1
 8030a08:	9304      	str	r3, [sp, #16]
 8030a0a:	9307      	str	r3, [sp, #28]
 8030a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8030a10:	931a      	str	r3, [sp, #104]	; 0x68
 8030a12:	4654      	mov	r4, sl
 8030a14:	2205      	movs	r2, #5
 8030a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030a1a:	4854      	ldr	r0, [pc, #336]	; (8030b6c <_vfiprintf_r+0x220>)
 8030a1c:	f7df fbf0 	bl	8010200 <memchr>
 8030a20:	9a04      	ldr	r2, [sp, #16]
 8030a22:	b9d8      	cbnz	r0, 8030a5c <_vfiprintf_r+0x110>
 8030a24:	06d1      	lsls	r1, r2, #27
 8030a26:	bf44      	itt	mi
 8030a28:	2320      	movmi	r3, #32
 8030a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030a2e:	0713      	lsls	r3, r2, #28
 8030a30:	bf44      	itt	mi
 8030a32:	232b      	movmi	r3, #43	; 0x2b
 8030a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8030a38:	f89a 3000 	ldrb.w	r3, [sl]
 8030a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8030a3e:	d015      	beq.n	8030a6c <_vfiprintf_r+0x120>
 8030a40:	9a07      	ldr	r2, [sp, #28]
 8030a42:	4654      	mov	r4, sl
 8030a44:	2000      	movs	r0, #0
 8030a46:	f04f 0c0a 	mov.w	ip, #10
 8030a4a:	4621      	mov	r1, r4
 8030a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8030a50:	3b30      	subs	r3, #48	; 0x30
 8030a52:	2b09      	cmp	r3, #9
 8030a54:	d94d      	bls.n	8030af2 <_vfiprintf_r+0x1a6>
 8030a56:	b1b0      	cbz	r0, 8030a86 <_vfiprintf_r+0x13a>
 8030a58:	9207      	str	r2, [sp, #28]
 8030a5a:	e014      	b.n	8030a86 <_vfiprintf_r+0x13a>
 8030a5c:	eba0 0308 	sub.w	r3, r0, r8
 8030a60:	fa09 f303 	lsl.w	r3, r9, r3
 8030a64:	4313      	orrs	r3, r2
 8030a66:	9304      	str	r3, [sp, #16]
 8030a68:	46a2      	mov	sl, r4
 8030a6a:	e7d2      	b.n	8030a12 <_vfiprintf_r+0xc6>
 8030a6c:	9b03      	ldr	r3, [sp, #12]
 8030a6e:	1d19      	adds	r1, r3, #4
 8030a70:	681b      	ldr	r3, [r3, #0]
 8030a72:	9103      	str	r1, [sp, #12]
 8030a74:	2b00      	cmp	r3, #0
 8030a76:	bfbb      	ittet	lt
 8030a78:	425b      	neglt	r3, r3
 8030a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8030a7e:	9307      	strge	r3, [sp, #28]
 8030a80:	9307      	strlt	r3, [sp, #28]
 8030a82:	bfb8      	it	lt
 8030a84:	9204      	strlt	r2, [sp, #16]
 8030a86:	7823      	ldrb	r3, [r4, #0]
 8030a88:	2b2e      	cmp	r3, #46	; 0x2e
 8030a8a:	d10c      	bne.n	8030aa6 <_vfiprintf_r+0x15a>
 8030a8c:	7863      	ldrb	r3, [r4, #1]
 8030a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8030a90:	d134      	bne.n	8030afc <_vfiprintf_r+0x1b0>
 8030a92:	9b03      	ldr	r3, [sp, #12]
 8030a94:	1d1a      	adds	r2, r3, #4
 8030a96:	681b      	ldr	r3, [r3, #0]
 8030a98:	9203      	str	r2, [sp, #12]
 8030a9a:	2b00      	cmp	r3, #0
 8030a9c:	bfb8      	it	lt
 8030a9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8030aa2:	3402      	adds	r4, #2
 8030aa4:	9305      	str	r3, [sp, #20]
 8030aa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8030b7c <_vfiprintf_r+0x230>
 8030aaa:	7821      	ldrb	r1, [r4, #0]
 8030aac:	2203      	movs	r2, #3
 8030aae:	4650      	mov	r0, sl
 8030ab0:	f7df fba6 	bl	8010200 <memchr>
 8030ab4:	b138      	cbz	r0, 8030ac6 <_vfiprintf_r+0x17a>
 8030ab6:	9b04      	ldr	r3, [sp, #16]
 8030ab8:	eba0 000a 	sub.w	r0, r0, sl
 8030abc:	2240      	movs	r2, #64	; 0x40
 8030abe:	4082      	lsls	r2, r0
 8030ac0:	4313      	orrs	r3, r2
 8030ac2:	3401      	adds	r4, #1
 8030ac4:	9304      	str	r3, [sp, #16]
 8030ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8030aca:	4829      	ldr	r0, [pc, #164]	; (8030b70 <_vfiprintf_r+0x224>)
 8030acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8030ad0:	2206      	movs	r2, #6
 8030ad2:	f7df fb95 	bl	8010200 <memchr>
 8030ad6:	2800      	cmp	r0, #0
 8030ad8:	d03f      	beq.n	8030b5a <_vfiprintf_r+0x20e>
 8030ada:	4b26      	ldr	r3, [pc, #152]	; (8030b74 <_vfiprintf_r+0x228>)
 8030adc:	bb1b      	cbnz	r3, 8030b26 <_vfiprintf_r+0x1da>
 8030ade:	9b03      	ldr	r3, [sp, #12]
 8030ae0:	3307      	adds	r3, #7
 8030ae2:	f023 0307 	bic.w	r3, r3, #7
 8030ae6:	3308      	adds	r3, #8
 8030ae8:	9303      	str	r3, [sp, #12]
 8030aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8030aec:	443b      	add	r3, r7
 8030aee:	9309      	str	r3, [sp, #36]	; 0x24
 8030af0:	e768      	b.n	80309c4 <_vfiprintf_r+0x78>
 8030af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8030af6:	460c      	mov	r4, r1
 8030af8:	2001      	movs	r0, #1
 8030afa:	e7a6      	b.n	8030a4a <_vfiprintf_r+0xfe>
 8030afc:	2300      	movs	r3, #0
 8030afe:	3401      	adds	r4, #1
 8030b00:	9305      	str	r3, [sp, #20]
 8030b02:	4619      	mov	r1, r3
 8030b04:	f04f 0c0a 	mov.w	ip, #10
 8030b08:	4620      	mov	r0, r4
 8030b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8030b0e:	3a30      	subs	r2, #48	; 0x30
 8030b10:	2a09      	cmp	r2, #9
 8030b12:	d903      	bls.n	8030b1c <_vfiprintf_r+0x1d0>
 8030b14:	2b00      	cmp	r3, #0
 8030b16:	d0c6      	beq.n	8030aa6 <_vfiprintf_r+0x15a>
 8030b18:	9105      	str	r1, [sp, #20]
 8030b1a:	e7c4      	b.n	8030aa6 <_vfiprintf_r+0x15a>
 8030b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8030b20:	4604      	mov	r4, r0
 8030b22:	2301      	movs	r3, #1
 8030b24:	e7f0      	b.n	8030b08 <_vfiprintf_r+0x1bc>
 8030b26:	ab03      	add	r3, sp, #12
 8030b28:	9300      	str	r3, [sp, #0]
 8030b2a:	462a      	mov	r2, r5
 8030b2c:	4b12      	ldr	r3, [pc, #72]	; (8030b78 <_vfiprintf_r+0x22c>)
 8030b2e:	a904      	add	r1, sp, #16
 8030b30:	4630      	mov	r0, r6
 8030b32:	f7fb ff7b 	bl	802ca2c <_printf_float>
 8030b36:	4607      	mov	r7, r0
 8030b38:	1c78      	adds	r0, r7, #1
 8030b3a:	d1d6      	bne.n	8030aea <_vfiprintf_r+0x19e>
 8030b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8030b3e:	07d9      	lsls	r1, r3, #31
 8030b40:	d405      	bmi.n	8030b4e <_vfiprintf_r+0x202>
 8030b42:	89ab      	ldrh	r3, [r5, #12]
 8030b44:	059a      	lsls	r2, r3, #22
 8030b46:	d402      	bmi.n	8030b4e <_vfiprintf_r+0x202>
 8030b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8030b4a:	f7fd f97b 	bl	802de44 <__retarget_lock_release_recursive>
 8030b4e:	89ab      	ldrh	r3, [r5, #12]
 8030b50:	065b      	lsls	r3, r3, #25
 8030b52:	f53f af1d 	bmi.w	8030990 <_vfiprintf_r+0x44>
 8030b56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8030b58:	e71c      	b.n	8030994 <_vfiprintf_r+0x48>
 8030b5a:	ab03      	add	r3, sp, #12
 8030b5c:	9300      	str	r3, [sp, #0]
 8030b5e:	462a      	mov	r2, r5
 8030b60:	4b05      	ldr	r3, [pc, #20]	; (8030b78 <_vfiprintf_r+0x22c>)
 8030b62:	a904      	add	r1, sp, #16
 8030b64:	4630      	mov	r0, r6
 8030b66:	f7fc fa05 	bl	802cf74 <_printf_i>
 8030b6a:	e7e4      	b.n	8030b36 <_vfiprintf_r+0x1ea>
 8030b6c:	08035101 	.word	0x08035101
 8030b70:	0803510b 	.word	0x0803510b
 8030b74:	0802ca2d 	.word	0x0802ca2d
 8030b78:	08030927 	.word	0x08030927
 8030b7c:	08035107 	.word	0x08035107

08030b80 <_scanf_chars>:
 8030b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8030b84:	4615      	mov	r5, r2
 8030b86:	688a      	ldr	r2, [r1, #8]
 8030b88:	4680      	mov	r8, r0
 8030b8a:	460c      	mov	r4, r1
 8030b8c:	b932      	cbnz	r2, 8030b9c <_scanf_chars+0x1c>
 8030b8e:	698a      	ldr	r2, [r1, #24]
 8030b90:	2a00      	cmp	r2, #0
 8030b92:	bf0c      	ite	eq
 8030b94:	2201      	moveq	r2, #1
 8030b96:	f04f 32ff 	movne.w	r2, #4294967295
 8030b9a:	608a      	str	r2, [r1, #8]
 8030b9c:	6822      	ldr	r2, [r4, #0]
 8030b9e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8030c30 <_scanf_chars+0xb0>
 8030ba2:	06d1      	lsls	r1, r2, #27
 8030ba4:	bf5f      	itttt	pl
 8030ba6:	681a      	ldrpl	r2, [r3, #0]
 8030ba8:	1d11      	addpl	r1, r2, #4
 8030baa:	6019      	strpl	r1, [r3, #0]
 8030bac:	6816      	ldrpl	r6, [r2, #0]
 8030bae:	2700      	movs	r7, #0
 8030bb0:	69a0      	ldr	r0, [r4, #24]
 8030bb2:	b188      	cbz	r0, 8030bd8 <_scanf_chars+0x58>
 8030bb4:	2801      	cmp	r0, #1
 8030bb6:	d107      	bne.n	8030bc8 <_scanf_chars+0x48>
 8030bb8:	682a      	ldr	r2, [r5, #0]
 8030bba:	7811      	ldrb	r1, [r2, #0]
 8030bbc:	6962      	ldr	r2, [r4, #20]
 8030bbe:	5c52      	ldrb	r2, [r2, r1]
 8030bc0:	b952      	cbnz	r2, 8030bd8 <_scanf_chars+0x58>
 8030bc2:	2f00      	cmp	r7, #0
 8030bc4:	d031      	beq.n	8030c2a <_scanf_chars+0xaa>
 8030bc6:	e022      	b.n	8030c0e <_scanf_chars+0x8e>
 8030bc8:	2802      	cmp	r0, #2
 8030bca:	d120      	bne.n	8030c0e <_scanf_chars+0x8e>
 8030bcc:	682b      	ldr	r3, [r5, #0]
 8030bce:	781b      	ldrb	r3, [r3, #0]
 8030bd0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8030bd4:	071b      	lsls	r3, r3, #28
 8030bd6:	d41a      	bmi.n	8030c0e <_scanf_chars+0x8e>
 8030bd8:	6823      	ldr	r3, [r4, #0]
 8030bda:	06da      	lsls	r2, r3, #27
 8030bdc:	bf5e      	ittt	pl
 8030bde:	682b      	ldrpl	r3, [r5, #0]
 8030be0:	781b      	ldrbpl	r3, [r3, #0]
 8030be2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8030be6:	682a      	ldr	r2, [r5, #0]
 8030be8:	686b      	ldr	r3, [r5, #4]
 8030bea:	3201      	adds	r2, #1
 8030bec:	602a      	str	r2, [r5, #0]
 8030bee:	68a2      	ldr	r2, [r4, #8]
 8030bf0:	3b01      	subs	r3, #1
 8030bf2:	3a01      	subs	r2, #1
 8030bf4:	606b      	str	r3, [r5, #4]
 8030bf6:	3701      	adds	r7, #1
 8030bf8:	60a2      	str	r2, [r4, #8]
 8030bfa:	b142      	cbz	r2, 8030c0e <_scanf_chars+0x8e>
 8030bfc:	2b00      	cmp	r3, #0
 8030bfe:	dcd7      	bgt.n	8030bb0 <_scanf_chars+0x30>
 8030c00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030c04:	4629      	mov	r1, r5
 8030c06:	4640      	mov	r0, r8
 8030c08:	4798      	blx	r3
 8030c0a:	2800      	cmp	r0, #0
 8030c0c:	d0d0      	beq.n	8030bb0 <_scanf_chars+0x30>
 8030c0e:	6823      	ldr	r3, [r4, #0]
 8030c10:	f013 0310 	ands.w	r3, r3, #16
 8030c14:	d105      	bne.n	8030c22 <_scanf_chars+0xa2>
 8030c16:	68e2      	ldr	r2, [r4, #12]
 8030c18:	3201      	adds	r2, #1
 8030c1a:	60e2      	str	r2, [r4, #12]
 8030c1c:	69a2      	ldr	r2, [r4, #24]
 8030c1e:	b102      	cbz	r2, 8030c22 <_scanf_chars+0xa2>
 8030c20:	7033      	strb	r3, [r6, #0]
 8030c22:	6923      	ldr	r3, [r4, #16]
 8030c24:	443b      	add	r3, r7
 8030c26:	6123      	str	r3, [r4, #16]
 8030c28:	2000      	movs	r0, #0
 8030c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8030c2e:	bf00      	nop
 8030c30:	08035001 	.word	0x08035001

08030c34 <_scanf_i>:
 8030c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8030c38:	4698      	mov	r8, r3
 8030c3a:	4b74      	ldr	r3, [pc, #464]	; (8030e0c <_scanf_i+0x1d8>)
 8030c3c:	460c      	mov	r4, r1
 8030c3e:	4682      	mov	sl, r0
 8030c40:	4616      	mov	r6, r2
 8030c42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8030c46:	b087      	sub	sp, #28
 8030c48:	ab03      	add	r3, sp, #12
 8030c4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8030c4e:	4b70      	ldr	r3, [pc, #448]	; (8030e10 <_scanf_i+0x1dc>)
 8030c50:	69a1      	ldr	r1, [r4, #24]
 8030c52:	4a70      	ldr	r2, [pc, #448]	; (8030e14 <_scanf_i+0x1e0>)
 8030c54:	2903      	cmp	r1, #3
 8030c56:	bf18      	it	ne
 8030c58:	461a      	movne	r2, r3
 8030c5a:	68a3      	ldr	r3, [r4, #8]
 8030c5c:	9201      	str	r2, [sp, #4]
 8030c5e:	1e5a      	subs	r2, r3, #1
 8030c60:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8030c64:	bf88      	it	hi
 8030c66:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8030c6a:	4627      	mov	r7, r4
 8030c6c:	bf82      	ittt	hi
 8030c6e:	eb03 0905 	addhi.w	r9, r3, r5
 8030c72:	f240 135d 	movwhi	r3, #349	; 0x15d
 8030c76:	60a3      	strhi	r3, [r4, #8]
 8030c78:	f857 3b1c 	ldr.w	r3, [r7], #28
 8030c7c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8030c80:	bf98      	it	ls
 8030c82:	f04f 0900 	movls.w	r9, #0
 8030c86:	6023      	str	r3, [r4, #0]
 8030c88:	463d      	mov	r5, r7
 8030c8a:	f04f 0b00 	mov.w	fp, #0
 8030c8e:	6831      	ldr	r1, [r6, #0]
 8030c90:	ab03      	add	r3, sp, #12
 8030c92:	7809      	ldrb	r1, [r1, #0]
 8030c94:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8030c98:	2202      	movs	r2, #2
 8030c9a:	f7df fab1 	bl	8010200 <memchr>
 8030c9e:	b328      	cbz	r0, 8030cec <_scanf_i+0xb8>
 8030ca0:	f1bb 0f01 	cmp.w	fp, #1
 8030ca4:	d159      	bne.n	8030d5a <_scanf_i+0x126>
 8030ca6:	6862      	ldr	r2, [r4, #4]
 8030ca8:	b92a      	cbnz	r2, 8030cb6 <_scanf_i+0x82>
 8030caa:	6822      	ldr	r2, [r4, #0]
 8030cac:	2308      	movs	r3, #8
 8030cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8030cb2:	6063      	str	r3, [r4, #4]
 8030cb4:	6022      	str	r2, [r4, #0]
 8030cb6:	6822      	ldr	r2, [r4, #0]
 8030cb8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8030cbc:	6022      	str	r2, [r4, #0]
 8030cbe:	68a2      	ldr	r2, [r4, #8]
 8030cc0:	1e51      	subs	r1, r2, #1
 8030cc2:	60a1      	str	r1, [r4, #8]
 8030cc4:	b192      	cbz	r2, 8030cec <_scanf_i+0xb8>
 8030cc6:	6832      	ldr	r2, [r6, #0]
 8030cc8:	1c51      	adds	r1, r2, #1
 8030cca:	6031      	str	r1, [r6, #0]
 8030ccc:	7812      	ldrb	r2, [r2, #0]
 8030cce:	f805 2b01 	strb.w	r2, [r5], #1
 8030cd2:	6872      	ldr	r2, [r6, #4]
 8030cd4:	3a01      	subs	r2, #1
 8030cd6:	2a00      	cmp	r2, #0
 8030cd8:	6072      	str	r2, [r6, #4]
 8030cda:	dc07      	bgt.n	8030cec <_scanf_i+0xb8>
 8030cdc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8030ce0:	4631      	mov	r1, r6
 8030ce2:	4650      	mov	r0, sl
 8030ce4:	4790      	blx	r2
 8030ce6:	2800      	cmp	r0, #0
 8030ce8:	f040 8085 	bne.w	8030df6 <_scanf_i+0x1c2>
 8030cec:	f10b 0b01 	add.w	fp, fp, #1
 8030cf0:	f1bb 0f03 	cmp.w	fp, #3
 8030cf4:	d1cb      	bne.n	8030c8e <_scanf_i+0x5a>
 8030cf6:	6863      	ldr	r3, [r4, #4]
 8030cf8:	b90b      	cbnz	r3, 8030cfe <_scanf_i+0xca>
 8030cfa:	230a      	movs	r3, #10
 8030cfc:	6063      	str	r3, [r4, #4]
 8030cfe:	6863      	ldr	r3, [r4, #4]
 8030d00:	4945      	ldr	r1, [pc, #276]	; (8030e18 <_scanf_i+0x1e4>)
 8030d02:	6960      	ldr	r0, [r4, #20]
 8030d04:	1ac9      	subs	r1, r1, r3
 8030d06:	f000 f999 	bl	803103c <__sccl>
 8030d0a:	f04f 0b00 	mov.w	fp, #0
 8030d0e:	68a3      	ldr	r3, [r4, #8]
 8030d10:	6822      	ldr	r2, [r4, #0]
 8030d12:	2b00      	cmp	r3, #0
 8030d14:	d03d      	beq.n	8030d92 <_scanf_i+0x15e>
 8030d16:	6831      	ldr	r1, [r6, #0]
 8030d18:	6960      	ldr	r0, [r4, #20]
 8030d1a:	f891 c000 	ldrb.w	ip, [r1]
 8030d1e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8030d22:	2800      	cmp	r0, #0
 8030d24:	d035      	beq.n	8030d92 <_scanf_i+0x15e>
 8030d26:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8030d2a:	d124      	bne.n	8030d76 <_scanf_i+0x142>
 8030d2c:	0510      	lsls	r0, r2, #20
 8030d2e:	d522      	bpl.n	8030d76 <_scanf_i+0x142>
 8030d30:	f10b 0b01 	add.w	fp, fp, #1
 8030d34:	f1b9 0f00 	cmp.w	r9, #0
 8030d38:	d003      	beq.n	8030d42 <_scanf_i+0x10e>
 8030d3a:	3301      	adds	r3, #1
 8030d3c:	f109 39ff 	add.w	r9, r9, #4294967295
 8030d40:	60a3      	str	r3, [r4, #8]
 8030d42:	6873      	ldr	r3, [r6, #4]
 8030d44:	3b01      	subs	r3, #1
 8030d46:	2b00      	cmp	r3, #0
 8030d48:	6073      	str	r3, [r6, #4]
 8030d4a:	dd1b      	ble.n	8030d84 <_scanf_i+0x150>
 8030d4c:	6833      	ldr	r3, [r6, #0]
 8030d4e:	3301      	adds	r3, #1
 8030d50:	6033      	str	r3, [r6, #0]
 8030d52:	68a3      	ldr	r3, [r4, #8]
 8030d54:	3b01      	subs	r3, #1
 8030d56:	60a3      	str	r3, [r4, #8]
 8030d58:	e7d9      	b.n	8030d0e <_scanf_i+0xda>
 8030d5a:	f1bb 0f02 	cmp.w	fp, #2
 8030d5e:	d1ae      	bne.n	8030cbe <_scanf_i+0x8a>
 8030d60:	6822      	ldr	r2, [r4, #0]
 8030d62:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8030d66:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8030d6a:	d1bf      	bne.n	8030cec <_scanf_i+0xb8>
 8030d6c:	2310      	movs	r3, #16
 8030d6e:	6063      	str	r3, [r4, #4]
 8030d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8030d74:	e7a2      	b.n	8030cbc <_scanf_i+0x88>
 8030d76:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8030d7a:	6022      	str	r2, [r4, #0]
 8030d7c:	780b      	ldrb	r3, [r1, #0]
 8030d7e:	f805 3b01 	strb.w	r3, [r5], #1
 8030d82:	e7de      	b.n	8030d42 <_scanf_i+0x10e>
 8030d84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8030d88:	4631      	mov	r1, r6
 8030d8a:	4650      	mov	r0, sl
 8030d8c:	4798      	blx	r3
 8030d8e:	2800      	cmp	r0, #0
 8030d90:	d0df      	beq.n	8030d52 <_scanf_i+0x11e>
 8030d92:	6823      	ldr	r3, [r4, #0]
 8030d94:	05d9      	lsls	r1, r3, #23
 8030d96:	d50d      	bpl.n	8030db4 <_scanf_i+0x180>
 8030d98:	42bd      	cmp	r5, r7
 8030d9a:	d909      	bls.n	8030db0 <_scanf_i+0x17c>
 8030d9c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8030da0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8030da4:	4632      	mov	r2, r6
 8030da6:	4650      	mov	r0, sl
 8030da8:	4798      	blx	r3
 8030daa:	f105 39ff 	add.w	r9, r5, #4294967295
 8030dae:	464d      	mov	r5, r9
 8030db0:	42bd      	cmp	r5, r7
 8030db2:	d028      	beq.n	8030e06 <_scanf_i+0x1d2>
 8030db4:	6822      	ldr	r2, [r4, #0]
 8030db6:	f012 0210 	ands.w	r2, r2, #16
 8030dba:	d113      	bne.n	8030de4 <_scanf_i+0x1b0>
 8030dbc:	702a      	strb	r2, [r5, #0]
 8030dbe:	6863      	ldr	r3, [r4, #4]
 8030dc0:	9e01      	ldr	r6, [sp, #4]
 8030dc2:	4639      	mov	r1, r7
 8030dc4:	4650      	mov	r0, sl
 8030dc6:	47b0      	blx	r6
 8030dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8030dcc:	6821      	ldr	r1, [r4, #0]
 8030dce:	1d1a      	adds	r2, r3, #4
 8030dd0:	f8c8 2000 	str.w	r2, [r8]
 8030dd4:	f011 0f20 	tst.w	r1, #32
 8030dd8:	681b      	ldr	r3, [r3, #0]
 8030dda:	d00f      	beq.n	8030dfc <_scanf_i+0x1c8>
 8030ddc:	6018      	str	r0, [r3, #0]
 8030dde:	68e3      	ldr	r3, [r4, #12]
 8030de0:	3301      	adds	r3, #1
 8030de2:	60e3      	str	r3, [r4, #12]
 8030de4:	6923      	ldr	r3, [r4, #16]
 8030de6:	1bed      	subs	r5, r5, r7
 8030de8:	445d      	add	r5, fp
 8030dea:	442b      	add	r3, r5
 8030dec:	6123      	str	r3, [r4, #16]
 8030dee:	2000      	movs	r0, #0
 8030df0:	b007      	add	sp, #28
 8030df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8030df6:	f04f 0b00 	mov.w	fp, #0
 8030dfa:	e7ca      	b.n	8030d92 <_scanf_i+0x15e>
 8030dfc:	07ca      	lsls	r2, r1, #31
 8030dfe:	bf4c      	ite	mi
 8030e00:	8018      	strhmi	r0, [r3, #0]
 8030e02:	6018      	strpl	r0, [r3, #0]
 8030e04:	e7eb      	b.n	8030dde <_scanf_i+0x1aa>
 8030e06:	2001      	movs	r0, #1
 8030e08:	e7f2      	b.n	8030df0 <_scanf_i+0x1bc>
 8030e0a:	bf00      	nop
 8030e0c:	080341a4 	.word	0x080341a4
 8030e10:	08031a15 	.word	0x08031a15
 8030e14:	080302a1 	.word	0x080302a1
 8030e18:	08035122 	.word	0x08035122

08030e1c <__sflush_r>:
 8030e1c:	898a      	ldrh	r2, [r1, #12]
 8030e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8030e22:	4605      	mov	r5, r0
 8030e24:	0710      	lsls	r0, r2, #28
 8030e26:	460c      	mov	r4, r1
 8030e28:	d458      	bmi.n	8030edc <__sflush_r+0xc0>
 8030e2a:	684b      	ldr	r3, [r1, #4]
 8030e2c:	2b00      	cmp	r3, #0
 8030e2e:	dc05      	bgt.n	8030e3c <__sflush_r+0x20>
 8030e30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8030e32:	2b00      	cmp	r3, #0
 8030e34:	dc02      	bgt.n	8030e3c <__sflush_r+0x20>
 8030e36:	2000      	movs	r0, #0
 8030e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8030e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030e3e:	2e00      	cmp	r6, #0
 8030e40:	d0f9      	beq.n	8030e36 <__sflush_r+0x1a>
 8030e42:	2300      	movs	r3, #0
 8030e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8030e48:	682f      	ldr	r7, [r5, #0]
 8030e4a:	6a21      	ldr	r1, [r4, #32]
 8030e4c:	602b      	str	r3, [r5, #0]
 8030e4e:	d032      	beq.n	8030eb6 <__sflush_r+0x9a>
 8030e50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8030e52:	89a3      	ldrh	r3, [r4, #12]
 8030e54:	075a      	lsls	r2, r3, #29
 8030e56:	d505      	bpl.n	8030e64 <__sflush_r+0x48>
 8030e58:	6863      	ldr	r3, [r4, #4]
 8030e5a:	1ac0      	subs	r0, r0, r3
 8030e5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8030e5e:	b10b      	cbz	r3, 8030e64 <__sflush_r+0x48>
 8030e60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8030e62:	1ac0      	subs	r0, r0, r3
 8030e64:	2300      	movs	r3, #0
 8030e66:	4602      	mov	r2, r0
 8030e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8030e6a:	6a21      	ldr	r1, [r4, #32]
 8030e6c:	4628      	mov	r0, r5
 8030e6e:	47b0      	blx	r6
 8030e70:	1c43      	adds	r3, r0, #1
 8030e72:	89a3      	ldrh	r3, [r4, #12]
 8030e74:	d106      	bne.n	8030e84 <__sflush_r+0x68>
 8030e76:	6829      	ldr	r1, [r5, #0]
 8030e78:	291d      	cmp	r1, #29
 8030e7a:	d82b      	bhi.n	8030ed4 <__sflush_r+0xb8>
 8030e7c:	4a29      	ldr	r2, [pc, #164]	; (8030f24 <__sflush_r+0x108>)
 8030e7e:	410a      	asrs	r2, r1
 8030e80:	07d6      	lsls	r6, r2, #31
 8030e82:	d427      	bmi.n	8030ed4 <__sflush_r+0xb8>
 8030e84:	2200      	movs	r2, #0
 8030e86:	6062      	str	r2, [r4, #4]
 8030e88:	04d9      	lsls	r1, r3, #19
 8030e8a:	6922      	ldr	r2, [r4, #16]
 8030e8c:	6022      	str	r2, [r4, #0]
 8030e8e:	d504      	bpl.n	8030e9a <__sflush_r+0x7e>
 8030e90:	1c42      	adds	r2, r0, #1
 8030e92:	d101      	bne.n	8030e98 <__sflush_r+0x7c>
 8030e94:	682b      	ldr	r3, [r5, #0]
 8030e96:	b903      	cbnz	r3, 8030e9a <__sflush_r+0x7e>
 8030e98:	6560      	str	r0, [r4, #84]	; 0x54
 8030e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8030e9c:	602f      	str	r7, [r5, #0]
 8030e9e:	2900      	cmp	r1, #0
 8030ea0:	d0c9      	beq.n	8030e36 <__sflush_r+0x1a>
 8030ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8030ea6:	4299      	cmp	r1, r3
 8030ea8:	d002      	beq.n	8030eb0 <__sflush_r+0x94>
 8030eaa:	4628      	mov	r0, r5
 8030eac:	f7fd fe6a 	bl	802eb84 <_free_r>
 8030eb0:	2000      	movs	r0, #0
 8030eb2:	6360      	str	r0, [r4, #52]	; 0x34
 8030eb4:	e7c0      	b.n	8030e38 <__sflush_r+0x1c>
 8030eb6:	2301      	movs	r3, #1
 8030eb8:	4628      	mov	r0, r5
 8030eba:	47b0      	blx	r6
 8030ebc:	1c41      	adds	r1, r0, #1
 8030ebe:	d1c8      	bne.n	8030e52 <__sflush_r+0x36>
 8030ec0:	682b      	ldr	r3, [r5, #0]
 8030ec2:	2b00      	cmp	r3, #0
 8030ec4:	d0c5      	beq.n	8030e52 <__sflush_r+0x36>
 8030ec6:	2b1d      	cmp	r3, #29
 8030ec8:	d001      	beq.n	8030ece <__sflush_r+0xb2>
 8030eca:	2b16      	cmp	r3, #22
 8030ecc:	d101      	bne.n	8030ed2 <__sflush_r+0xb6>
 8030ece:	602f      	str	r7, [r5, #0]
 8030ed0:	e7b1      	b.n	8030e36 <__sflush_r+0x1a>
 8030ed2:	89a3      	ldrh	r3, [r4, #12]
 8030ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030ed8:	81a3      	strh	r3, [r4, #12]
 8030eda:	e7ad      	b.n	8030e38 <__sflush_r+0x1c>
 8030edc:	690f      	ldr	r7, [r1, #16]
 8030ede:	2f00      	cmp	r7, #0
 8030ee0:	d0a9      	beq.n	8030e36 <__sflush_r+0x1a>
 8030ee2:	0793      	lsls	r3, r2, #30
 8030ee4:	680e      	ldr	r6, [r1, #0]
 8030ee6:	bf08      	it	eq
 8030ee8:	694b      	ldreq	r3, [r1, #20]
 8030eea:	600f      	str	r7, [r1, #0]
 8030eec:	bf18      	it	ne
 8030eee:	2300      	movne	r3, #0
 8030ef0:	eba6 0807 	sub.w	r8, r6, r7
 8030ef4:	608b      	str	r3, [r1, #8]
 8030ef6:	f1b8 0f00 	cmp.w	r8, #0
 8030efa:	dd9c      	ble.n	8030e36 <__sflush_r+0x1a>
 8030efc:	6a21      	ldr	r1, [r4, #32]
 8030efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8030f00:	4643      	mov	r3, r8
 8030f02:	463a      	mov	r2, r7
 8030f04:	4628      	mov	r0, r5
 8030f06:	47b0      	blx	r6
 8030f08:	2800      	cmp	r0, #0
 8030f0a:	dc06      	bgt.n	8030f1a <__sflush_r+0xfe>
 8030f0c:	89a3      	ldrh	r3, [r4, #12]
 8030f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8030f12:	81a3      	strh	r3, [r4, #12]
 8030f14:	f04f 30ff 	mov.w	r0, #4294967295
 8030f18:	e78e      	b.n	8030e38 <__sflush_r+0x1c>
 8030f1a:	4407      	add	r7, r0
 8030f1c:	eba8 0800 	sub.w	r8, r8, r0
 8030f20:	e7e9      	b.n	8030ef6 <__sflush_r+0xda>
 8030f22:	bf00      	nop
 8030f24:	dfbffffe 	.word	0xdfbffffe

08030f28 <_fflush_r>:
 8030f28:	b538      	push	{r3, r4, r5, lr}
 8030f2a:	690b      	ldr	r3, [r1, #16]
 8030f2c:	4605      	mov	r5, r0
 8030f2e:	460c      	mov	r4, r1
 8030f30:	b913      	cbnz	r3, 8030f38 <_fflush_r+0x10>
 8030f32:	2500      	movs	r5, #0
 8030f34:	4628      	mov	r0, r5
 8030f36:	bd38      	pop	{r3, r4, r5, pc}
 8030f38:	b118      	cbz	r0, 8030f42 <_fflush_r+0x1a>
 8030f3a:	6a03      	ldr	r3, [r0, #32]
 8030f3c:	b90b      	cbnz	r3, 8030f42 <_fflush_r+0x1a>
 8030f3e:	f7fc fbd7 	bl	802d6f0 <__sinit>
 8030f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030f46:	2b00      	cmp	r3, #0
 8030f48:	d0f3      	beq.n	8030f32 <_fflush_r+0xa>
 8030f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8030f4c:	07d0      	lsls	r0, r2, #31
 8030f4e:	d404      	bmi.n	8030f5a <_fflush_r+0x32>
 8030f50:	0599      	lsls	r1, r3, #22
 8030f52:	d402      	bmi.n	8030f5a <_fflush_r+0x32>
 8030f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030f56:	f7fc ff74 	bl	802de42 <__retarget_lock_acquire_recursive>
 8030f5a:	4628      	mov	r0, r5
 8030f5c:	4621      	mov	r1, r4
 8030f5e:	f7ff ff5d 	bl	8030e1c <__sflush_r>
 8030f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8030f64:	07da      	lsls	r2, r3, #31
 8030f66:	4605      	mov	r5, r0
 8030f68:	d4e4      	bmi.n	8030f34 <_fflush_r+0xc>
 8030f6a:	89a3      	ldrh	r3, [r4, #12]
 8030f6c:	059b      	lsls	r3, r3, #22
 8030f6e:	d4e1      	bmi.n	8030f34 <_fflush_r+0xc>
 8030f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8030f72:	f7fc ff67 	bl	802de44 <__retarget_lock_release_recursive>
 8030f76:	e7dd      	b.n	8030f34 <_fflush_r+0xc>

08030f78 <__swhatbuf_r>:
 8030f78:	b570      	push	{r4, r5, r6, lr}
 8030f7a:	460c      	mov	r4, r1
 8030f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8030f80:	2900      	cmp	r1, #0
 8030f82:	b096      	sub	sp, #88	; 0x58
 8030f84:	4615      	mov	r5, r2
 8030f86:	461e      	mov	r6, r3
 8030f88:	da0d      	bge.n	8030fa6 <__swhatbuf_r+0x2e>
 8030f8a:	89a3      	ldrh	r3, [r4, #12]
 8030f8c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8030f90:	f04f 0100 	mov.w	r1, #0
 8030f94:	bf0c      	ite	eq
 8030f96:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8030f9a:	2340      	movne	r3, #64	; 0x40
 8030f9c:	2000      	movs	r0, #0
 8030f9e:	6031      	str	r1, [r6, #0]
 8030fa0:	602b      	str	r3, [r5, #0]
 8030fa2:	b016      	add	sp, #88	; 0x58
 8030fa4:	bd70      	pop	{r4, r5, r6, pc}
 8030fa6:	466a      	mov	r2, sp
 8030fa8:	f000 f8ec 	bl	8031184 <_fstat_r>
 8030fac:	2800      	cmp	r0, #0
 8030fae:	dbec      	blt.n	8030f8a <__swhatbuf_r+0x12>
 8030fb0:	9901      	ldr	r1, [sp, #4]
 8030fb2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8030fb6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8030fba:	4259      	negs	r1, r3
 8030fbc:	4159      	adcs	r1, r3
 8030fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8030fc2:	e7eb      	b.n	8030f9c <__swhatbuf_r+0x24>

08030fc4 <__smakebuf_r>:
 8030fc4:	898b      	ldrh	r3, [r1, #12]
 8030fc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8030fc8:	079d      	lsls	r5, r3, #30
 8030fca:	4606      	mov	r6, r0
 8030fcc:	460c      	mov	r4, r1
 8030fce:	d507      	bpl.n	8030fe0 <__smakebuf_r+0x1c>
 8030fd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8030fd4:	6023      	str	r3, [r4, #0]
 8030fd6:	6123      	str	r3, [r4, #16]
 8030fd8:	2301      	movs	r3, #1
 8030fda:	6163      	str	r3, [r4, #20]
 8030fdc:	b002      	add	sp, #8
 8030fde:	bd70      	pop	{r4, r5, r6, pc}
 8030fe0:	ab01      	add	r3, sp, #4
 8030fe2:	466a      	mov	r2, sp
 8030fe4:	f7ff ffc8 	bl	8030f78 <__swhatbuf_r>
 8030fe8:	9900      	ldr	r1, [sp, #0]
 8030fea:	4605      	mov	r5, r0
 8030fec:	4630      	mov	r0, r6
 8030fee:	f7fb fbf1 	bl	802c7d4 <_malloc_r>
 8030ff2:	b948      	cbnz	r0, 8031008 <__smakebuf_r+0x44>
 8030ff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8030ff8:	059a      	lsls	r2, r3, #22
 8030ffa:	d4ef      	bmi.n	8030fdc <__smakebuf_r+0x18>
 8030ffc:	f023 0303 	bic.w	r3, r3, #3
 8031000:	f043 0302 	orr.w	r3, r3, #2
 8031004:	81a3      	strh	r3, [r4, #12]
 8031006:	e7e3      	b.n	8030fd0 <__smakebuf_r+0xc>
 8031008:	89a3      	ldrh	r3, [r4, #12]
 803100a:	6020      	str	r0, [r4, #0]
 803100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8031010:	81a3      	strh	r3, [r4, #12]
 8031012:	9b00      	ldr	r3, [sp, #0]
 8031014:	6163      	str	r3, [r4, #20]
 8031016:	9b01      	ldr	r3, [sp, #4]
 8031018:	6120      	str	r0, [r4, #16]
 803101a:	b15b      	cbz	r3, 8031034 <__smakebuf_r+0x70>
 803101c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8031020:	4630      	mov	r0, r6
 8031022:	f000 f8c1 	bl	80311a8 <_isatty_r>
 8031026:	b128      	cbz	r0, 8031034 <__smakebuf_r+0x70>
 8031028:	89a3      	ldrh	r3, [r4, #12]
 803102a:	f023 0303 	bic.w	r3, r3, #3
 803102e:	f043 0301 	orr.w	r3, r3, #1
 8031032:	81a3      	strh	r3, [r4, #12]
 8031034:	89a3      	ldrh	r3, [r4, #12]
 8031036:	431d      	orrs	r5, r3
 8031038:	81a5      	strh	r5, [r4, #12]
 803103a:	e7cf      	b.n	8030fdc <__smakebuf_r+0x18>

0803103c <__sccl>:
 803103c:	b570      	push	{r4, r5, r6, lr}
 803103e:	780b      	ldrb	r3, [r1, #0]
 8031040:	4604      	mov	r4, r0
 8031042:	2b5e      	cmp	r3, #94	; 0x5e
 8031044:	bf0b      	itete	eq
 8031046:	784b      	ldrbeq	r3, [r1, #1]
 8031048:	1c4a      	addne	r2, r1, #1
 803104a:	1c8a      	addeq	r2, r1, #2
 803104c:	2100      	movne	r1, #0
 803104e:	bf08      	it	eq
 8031050:	2101      	moveq	r1, #1
 8031052:	3801      	subs	r0, #1
 8031054:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8031058:	f800 1f01 	strb.w	r1, [r0, #1]!
 803105c:	42a8      	cmp	r0, r5
 803105e:	d1fb      	bne.n	8031058 <__sccl+0x1c>
 8031060:	b90b      	cbnz	r3, 8031066 <__sccl+0x2a>
 8031062:	1e50      	subs	r0, r2, #1
 8031064:	bd70      	pop	{r4, r5, r6, pc}
 8031066:	f081 0101 	eor.w	r1, r1, #1
 803106a:	54e1      	strb	r1, [r4, r3]
 803106c:	4610      	mov	r0, r2
 803106e:	4602      	mov	r2, r0
 8031070:	f812 5b01 	ldrb.w	r5, [r2], #1
 8031074:	2d2d      	cmp	r5, #45	; 0x2d
 8031076:	d005      	beq.n	8031084 <__sccl+0x48>
 8031078:	2d5d      	cmp	r5, #93	; 0x5d
 803107a:	d016      	beq.n	80310aa <__sccl+0x6e>
 803107c:	2d00      	cmp	r5, #0
 803107e:	d0f1      	beq.n	8031064 <__sccl+0x28>
 8031080:	462b      	mov	r3, r5
 8031082:	e7f2      	b.n	803106a <__sccl+0x2e>
 8031084:	7846      	ldrb	r6, [r0, #1]
 8031086:	2e5d      	cmp	r6, #93	; 0x5d
 8031088:	d0fa      	beq.n	8031080 <__sccl+0x44>
 803108a:	42b3      	cmp	r3, r6
 803108c:	dcf8      	bgt.n	8031080 <__sccl+0x44>
 803108e:	3002      	adds	r0, #2
 8031090:	461a      	mov	r2, r3
 8031092:	3201      	adds	r2, #1
 8031094:	4296      	cmp	r6, r2
 8031096:	54a1      	strb	r1, [r4, r2]
 8031098:	dcfb      	bgt.n	8031092 <__sccl+0x56>
 803109a:	1af2      	subs	r2, r6, r3
 803109c:	3a01      	subs	r2, #1
 803109e:	1c5d      	adds	r5, r3, #1
 80310a0:	42b3      	cmp	r3, r6
 80310a2:	bfa8      	it	ge
 80310a4:	2200      	movge	r2, #0
 80310a6:	18ab      	adds	r3, r5, r2
 80310a8:	e7e1      	b.n	803106e <__sccl+0x32>
 80310aa:	4610      	mov	r0, r2
 80310ac:	e7da      	b.n	8031064 <__sccl+0x28>

080310ae <__submore>:
 80310ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80310b2:	460c      	mov	r4, r1
 80310b4:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80310b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80310ba:	4299      	cmp	r1, r3
 80310bc:	d11d      	bne.n	80310fa <__submore+0x4c>
 80310be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80310c2:	f7fb fb87 	bl	802c7d4 <_malloc_r>
 80310c6:	b918      	cbnz	r0, 80310d0 <__submore+0x22>
 80310c8:	f04f 30ff 	mov.w	r0, #4294967295
 80310cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80310d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80310d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80310d6:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80310da:	6360      	str	r0, [r4, #52]	; 0x34
 80310dc:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80310e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80310e4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80310e8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80310ec:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80310f0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80310f4:	6020      	str	r0, [r4, #0]
 80310f6:	2000      	movs	r0, #0
 80310f8:	e7e8      	b.n	80310cc <__submore+0x1e>
 80310fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80310fc:	0077      	lsls	r7, r6, #1
 80310fe:	463a      	mov	r2, r7
 8031100:	f000 fbe7 	bl	80318d2 <_realloc_r>
 8031104:	4605      	mov	r5, r0
 8031106:	2800      	cmp	r0, #0
 8031108:	d0de      	beq.n	80310c8 <__submore+0x1a>
 803110a:	eb00 0806 	add.w	r8, r0, r6
 803110e:	4601      	mov	r1, r0
 8031110:	4632      	mov	r2, r6
 8031112:	4640      	mov	r0, r8
 8031114:	f7fc fe9f 	bl	802de56 <memcpy>
 8031118:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 803111c:	f8c4 8000 	str.w	r8, [r4]
 8031120:	e7e9      	b.n	80310f6 <__submore+0x48>

08031122 <_raise_r>:
 8031122:	291f      	cmp	r1, #31
 8031124:	b538      	push	{r3, r4, r5, lr}
 8031126:	4604      	mov	r4, r0
 8031128:	460d      	mov	r5, r1
 803112a:	d904      	bls.n	8031136 <_raise_r+0x14>
 803112c:	2316      	movs	r3, #22
 803112e:	6003      	str	r3, [r0, #0]
 8031130:	f04f 30ff 	mov.w	r0, #4294967295
 8031134:	bd38      	pop	{r3, r4, r5, pc}
 8031136:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8031138:	b112      	cbz	r2, 8031140 <_raise_r+0x1e>
 803113a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 803113e:	b94b      	cbnz	r3, 8031154 <_raise_r+0x32>
 8031140:	4620      	mov	r0, r4
 8031142:	f000 f853 	bl	80311ec <_getpid_r>
 8031146:	462a      	mov	r2, r5
 8031148:	4601      	mov	r1, r0
 803114a:	4620      	mov	r0, r4
 803114c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8031150:	f000 b83a 	b.w	80311c8 <_kill_r>
 8031154:	2b01      	cmp	r3, #1
 8031156:	d00a      	beq.n	803116e <_raise_r+0x4c>
 8031158:	1c59      	adds	r1, r3, #1
 803115a:	d103      	bne.n	8031164 <_raise_r+0x42>
 803115c:	2316      	movs	r3, #22
 803115e:	6003      	str	r3, [r0, #0]
 8031160:	2001      	movs	r0, #1
 8031162:	e7e7      	b.n	8031134 <_raise_r+0x12>
 8031164:	2400      	movs	r4, #0
 8031166:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 803116a:	4628      	mov	r0, r5
 803116c:	4798      	blx	r3
 803116e:	2000      	movs	r0, #0
 8031170:	e7e0      	b.n	8031134 <_raise_r+0x12>
	...

08031174 <raise>:
 8031174:	4b02      	ldr	r3, [pc, #8]	; (8031180 <raise+0xc>)
 8031176:	4601      	mov	r1, r0
 8031178:	6818      	ldr	r0, [r3, #0]
 803117a:	f7ff bfd2 	b.w	8031122 <_raise_r>
 803117e:	bf00      	nop
 8031180:	20000188 	.word	0x20000188

08031184 <_fstat_r>:
 8031184:	b538      	push	{r3, r4, r5, lr}
 8031186:	4d07      	ldr	r5, [pc, #28]	; (80311a4 <_fstat_r+0x20>)
 8031188:	2300      	movs	r3, #0
 803118a:	4604      	mov	r4, r0
 803118c:	4608      	mov	r0, r1
 803118e:	4611      	mov	r1, r2
 8031190:	602b      	str	r3, [r5, #0]
 8031192:	f7e1 fdb0 	bl	8012cf6 <_fstat>
 8031196:	1c43      	adds	r3, r0, #1
 8031198:	d102      	bne.n	80311a0 <_fstat_r+0x1c>
 803119a:	682b      	ldr	r3, [r5, #0]
 803119c:	b103      	cbz	r3, 80311a0 <_fstat_r+0x1c>
 803119e:	6023      	str	r3, [r4, #0]
 80311a0:	bd38      	pop	{r3, r4, r5, pc}
 80311a2:	bf00      	nop
 80311a4:	2000db0c 	.word	0x2000db0c

080311a8 <_isatty_r>:
 80311a8:	b538      	push	{r3, r4, r5, lr}
 80311aa:	4d06      	ldr	r5, [pc, #24]	; (80311c4 <_isatty_r+0x1c>)
 80311ac:	2300      	movs	r3, #0
 80311ae:	4604      	mov	r4, r0
 80311b0:	4608      	mov	r0, r1
 80311b2:	602b      	str	r3, [r5, #0]
 80311b4:	f7e1 fdaf 	bl	8012d16 <_isatty>
 80311b8:	1c43      	adds	r3, r0, #1
 80311ba:	d102      	bne.n	80311c2 <_isatty_r+0x1a>
 80311bc:	682b      	ldr	r3, [r5, #0]
 80311be:	b103      	cbz	r3, 80311c2 <_isatty_r+0x1a>
 80311c0:	6023      	str	r3, [r4, #0]
 80311c2:	bd38      	pop	{r3, r4, r5, pc}
 80311c4:	2000db0c 	.word	0x2000db0c

080311c8 <_kill_r>:
 80311c8:	b538      	push	{r3, r4, r5, lr}
 80311ca:	4d07      	ldr	r5, [pc, #28]	; (80311e8 <_kill_r+0x20>)
 80311cc:	2300      	movs	r3, #0
 80311ce:	4604      	mov	r4, r0
 80311d0:	4608      	mov	r0, r1
 80311d2:	4611      	mov	r1, r2
 80311d4:	602b      	str	r3, [r5, #0]
 80311d6:	f7e1 fd2f 	bl	8012c38 <_kill>
 80311da:	1c43      	adds	r3, r0, #1
 80311dc:	d102      	bne.n	80311e4 <_kill_r+0x1c>
 80311de:	682b      	ldr	r3, [r5, #0]
 80311e0:	b103      	cbz	r3, 80311e4 <_kill_r+0x1c>
 80311e2:	6023      	str	r3, [r4, #0]
 80311e4:	bd38      	pop	{r3, r4, r5, pc}
 80311e6:	bf00      	nop
 80311e8:	2000db0c 	.word	0x2000db0c

080311ec <_getpid_r>:
 80311ec:	f7e1 bd1c 	b.w	8012c28 <_getpid>

080311f0 <nan>:
 80311f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80311f8 <nan+0x8>
 80311f4:	4770      	bx	lr
 80311f6:	bf00      	nop
 80311f8:	00000000 	.word	0x00000000
 80311fc:	7ff80000 	.word	0x7ff80000

08031200 <rshift>:
 8031200:	6903      	ldr	r3, [r0, #16]
 8031202:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8031206:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 803120a:	ea4f 1261 	mov.w	r2, r1, asr #5
 803120e:	f100 0414 	add.w	r4, r0, #20
 8031212:	dd45      	ble.n	80312a0 <rshift+0xa0>
 8031214:	f011 011f 	ands.w	r1, r1, #31
 8031218:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 803121c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8031220:	d10c      	bne.n	803123c <rshift+0x3c>
 8031222:	f100 0710 	add.w	r7, r0, #16
 8031226:	4629      	mov	r1, r5
 8031228:	42b1      	cmp	r1, r6
 803122a:	d334      	bcc.n	8031296 <rshift+0x96>
 803122c:	1a9b      	subs	r3, r3, r2
 803122e:	009b      	lsls	r3, r3, #2
 8031230:	1eea      	subs	r2, r5, #3
 8031232:	4296      	cmp	r6, r2
 8031234:	bf38      	it	cc
 8031236:	2300      	movcc	r3, #0
 8031238:	4423      	add	r3, r4
 803123a:	e015      	b.n	8031268 <rshift+0x68>
 803123c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8031240:	f1c1 0820 	rsb	r8, r1, #32
 8031244:	40cf      	lsrs	r7, r1
 8031246:	f105 0e04 	add.w	lr, r5, #4
 803124a:	46a1      	mov	r9, r4
 803124c:	4576      	cmp	r6, lr
 803124e:	46f4      	mov	ip, lr
 8031250:	d815      	bhi.n	803127e <rshift+0x7e>
 8031252:	1a9a      	subs	r2, r3, r2
 8031254:	0092      	lsls	r2, r2, #2
 8031256:	3a04      	subs	r2, #4
 8031258:	3501      	adds	r5, #1
 803125a:	42ae      	cmp	r6, r5
 803125c:	bf38      	it	cc
 803125e:	2200      	movcc	r2, #0
 8031260:	18a3      	adds	r3, r4, r2
 8031262:	50a7      	str	r7, [r4, r2]
 8031264:	b107      	cbz	r7, 8031268 <rshift+0x68>
 8031266:	3304      	adds	r3, #4
 8031268:	1b1a      	subs	r2, r3, r4
 803126a:	42a3      	cmp	r3, r4
 803126c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8031270:	bf08      	it	eq
 8031272:	2300      	moveq	r3, #0
 8031274:	6102      	str	r2, [r0, #16]
 8031276:	bf08      	it	eq
 8031278:	6143      	streq	r3, [r0, #20]
 803127a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 803127e:	f8dc c000 	ldr.w	ip, [ip]
 8031282:	fa0c fc08 	lsl.w	ip, ip, r8
 8031286:	ea4c 0707 	orr.w	r7, ip, r7
 803128a:	f849 7b04 	str.w	r7, [r9], #4
 803128e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8031292:	40cf      	lsrs	r7, r1
 8031294:	e7da      	b.n	803124c <rshift+0x4c>
 8031296:	f851 cb04 	ldr.w	ip, [r1], #4
 803129a:	f847 cf04 	str.w	ip, [r7, #4]!
 803129e:	e7c3      	b.n	8031228 <rshift+0x28>
 80312a0:	4623      	mov	r3, r4
 80312a2:	e7e1      	b.n	8031268 <rshift+0x68>

080312a4 <__hexdig_fun>:
 80312a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80312a8:	2b09      	cmp	r3, #9
 80312aa:	d802      	bhi.n	80312b2 <__hexdig_fun+0xe>
 80312ac:	3820      	subs	r0, #32
 80312ae:	b2c0      	uxtb	r0, r0
 80312b0:	4770      	bx	lr
 80312b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80312b6:	2b05      	cmp	r3, #5
 80312b8:	d801      	bhi.n	80312be <__hexdig_fun+0x1a>
 80312ba:	3847      	subs	r0, #71	; 0x47
 80312bc:	e7f7      	b.n	80312ae <__hexdig_fun+0xa>
 80312be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80312c2:	2b05      	cmp	r3, #5
 80312c4:	d801      	bhi.n	80312ca <__hexdig_fun+0x26>
 80312c6:	3827      	subs	r0, #39	; 0x27
 80312c8:	e7f1      	b.n	80312ae <__hexdig_fun+0xa>
 80312ca:	2000      	movs	r0, #0
 80312cc:	4770      	bx	lr
	...

080312d0 <__gethex>:
 80312d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80312d4:	4617      	mov	r7, r2
 80312d6:	680a      	ldr	r2, [r1, #0]
 80312d8:	b085      	sub	sp, #20
 80312da:	f102 0b02 	add.w	fp, r2, #2
 80312de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80312e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80312e6:	4681      	mov	r9, r0
 80312e8:	468a      	mov	sl, r1
 80312ea:	9302      	str	r3, [sp, #8]
 80312ec:	32fe      	adds	r2, #254	; 0xfe
 80312ee:	eb02 030b 	add.w	r3, r2, fp
 80312f2:	46d8      	mov	r8, fp
 80312f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80312f8:	9301      	str	r3, [sp, #4]
 80312fa:	2830      	cmp	r0, #48	; 0x30
 80312fc:	d0f7      	beq.n	80312ee <__gethex+0x1e>
 80312fe:	f7ff ffd1 	bl	80312a4 <__hexdig_fun>
 8031302:	4604      	mov	r4, r0
 8031304:	2800      	cmp	r0, #0
 8031306:	d138      	bne.n	803137a <__gethex+0xaa>
 8031308:	49a7      	ldr	r1, [pc, #668]	; (80315a8 <__gethex+0x2d8>)
 803130a:	2201      	movs	r2, #1
 803130c:	4640      	mov	r0, r8
 803130e:	f7fc fc15 	bl	802db3c <strncmp>
 8031312:	4606      	mov	r6, r0
 8031314:	2800      	cmp	r0, #0
 8031316:	d169      	bne.n	80313ec <__gethex+0x11c>
 8031318:	f898 0001 	ldrb.w	r0, [r8, #1]
 803131c:	465d      	mov	r5, fp
 803131e:	f7ff ffc1 	bl	80312a4 <__hexdig_fun>
 8031322:	2800      	cmp	r0, #0
 8031324:	d064      	beq.n	80313f0 <__gethex+0x120>
 8031326:	465a      	mov	r2, fp
 8031328:	7810      	ldrb	r0, [r2, #0]
 803132a:	2830      	cmp	r0, #48	; 0x30
 803132c:	4690      	mov	r8, r2
 803132e:	f102 0201 	add.w	r2, r2, #1
 8031332:	d0f9      	beq.n	8031328 <__gethex+0x58>
 8031334:	f7ff ffb6 	bl	80312a4 <__hexdig_fun>
 8031338:	2301      	movs	r3, #1
 803133a:	fab0 f480 	clz	r4, r0
 803133e:	0964      	lsrs	r4, r4, #5
 8031340:	465e      	mov	r6, fp
 8031342:	9301      	str	r3, [sp, #4]
 8031344:	4642      	mov	r2, r8
 8031346:	4615      	mov	r5, r2
 8031348:	3201      	adds	r2, #1
 803134a:	7828      	ldrb	r0, [r5, #0]
 803134c:	f7ff ffaa 	bl	80312a4 <__hexdig_fun>
 8031350:	2800      	cmp	r0, #0
 8031352:	d1f8      	bne.n	8031346 <__gethex+0x76>
 8031354:	4994      	ldr	r1, [pc, #592]	; (80315a8 <__gethex+0x2d8>)
 8031356:	2201      	movs	r2, #1
 8031358:	4628      	mov	r0, r5
 803135a:	f7fc fbef 	bl	802db3c <strncmp>
 803135e:	b978      	cbnz	r0, 8031380 <__gethex+0xb0>
 8031360:	b946      	cbnz	r6, 8031374 <__gethex+0xa4>
 8031362:	1c6e      	adds	r6, r5, #1
 8031364:	4632      	mov	r2, r6
 8031366:	4615      	mov	r5, r2
 8031368:	3201      	adds	r2, #1
 803136a:	7828      	ldrb	r0, [r5, #0]
 803136c:	f7ff ff9a 	bl	80312a4 <__hexdig_fun>
 8031370:	2800      	cmp	r0, #0
 8031372:	d1f8      	bne.n	8031366 <__gethex+0x96>
 8031374:	1b73      	subs	r3, r6, r5
 8031376:	009e      	lsls	r6, r3, #2
 8031378:	e004      	b.n	8031384 <__gethex+0xb4>
 803137a:	2400      	movs	r4, #0
 803137c:	4626      	mov	r6, r4
 803137e:	e7e1      	b.n	8031344 <__gethex+0x74>
 8031380:	2e00      	cmp	r6, #0
 8031382:	d1f7      	bne.n	8031374 <__gethex+0xa4>
 8031384:	782b      	ldrb	r3, [r5, #0]
 8031386:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 803138a:	2b50      	cmp	r3, #80	; 0x50
 803138c:	d13d      	bne.n	803140a <__gethex+0x13a>
 803138e:	786b      	ldrb	r3, [r5, #1]
 8031390:	2b2b      	cmp	r3, #43	; 0x2b
 8031392:	d02f      	beq.n	80313f4 <__gethex+0x124>
 8031394:	2b2d      	cmp	r3, #45	; 0x2d
 8031396:	d031      	beq.n	80313fc <__gethex+0x12c>
 8031398:	1c69      	adds	r1, r5, #1
 803139a:	f04f 0b00 	mov.w	fp, #0
 803139e:	7808      	ldrb	r0, [r1, #0]
 80313a0:	f7ff ff80 	bl	80312a4 <__hexdig_fun>
 80313a4:	1e42      	subs	r2, r0, #1
 80313a6:	b2d2      	uxtb	r2, r2
 80313a8:	2a18      	cmp	r2, #24
 80313aa:	d82e      	bhi.n	803140a <__gethex+0x13a>
 80313ac:	f1a0 0210 	sub.w	r2, r0, #16
 80313b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80313b4:	f7ff ff76 	bl	80312a4 <__hexdig_fun>
 80313b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80313bc:	fa5f fc8c 	uxtb.w	ip, ip
 80313c0:	f1bc 0f18 	cmp.w	ip, #24
 80313c4:	d91d      	bls.n	8031402 <__gethex+0x132>
 80313c6:	f1bb 0f00 	cmp.w	fp, #0
 80313ca:	d000      	beq.n	80313ce <__gethex+0xfe>
 80313cc:	4252      	negs	r2, r2
 80313ce:	4416      	add	r6, r2
 80313d0:	f8ca 1000 	str.w	r1, [sl]
 80313d4:	b1dc      	cbz	r4, 803140e <__gethex+0x13e>
 80313d6:	9b01      	ldr	r3, [sp, #4]
 80313d8:	2b00      	cmp	r3, #0
 80313da:	bf14      	ite	ne
 80313dc:	f04f 0800 	movne.w	r8, #0
 80313e0:	f04f 0806 	moveq.w	r8, #6
 80313e4:	4640      	mov	r0, r8
 80313e6:	b005      	add	sp, #20
 80313e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80313ec:	4645      	mov	r5, r8
 80313ee:	4626      	mov	r6, r4
 80313f0:	2401      	movs	r4, #1
 80313f2:	e7c7      	b.n	8031384 <__gethex+0xb4>
 80313f4:	f04f 0b00 	mov.w	fp, #0
 80313f8:	1ca9      	adds	r1, r5, #2
 80313fa:	e7d0      	b.n	803139e <__gethex+0xce>
 80313fc:	f04f 0b01 	mov.w	fp, #1
 8031400:	e7fa      	b.n	80313f8 <__gethex+0x128>
 8031402:	230a      	movs	r3, #10
 8031404:	fb03 0002 	mla	r0, r3, r2, r0
 8031408:	e7d0      	b.n	80313ac <__gethex+0xdc>
 803140a:	4629      	mov	r1, r5
 803140c:	e7e0      	b.n	80313d0 <__gethex+0x100>
 803140e:	eba5 0308 	sub.w	r3, r5, r8
 8031412:	3b01      	subs	r3, #1
 8031414:	4621      	mov	r1, r4
 8031416:	2b07      	cmp	r3, #7
 8031418:	dc0a      	bgt.n	8031430 <__gethex+0x160>
 803141a:	4648      	mov	r0, r9
 803141c:	f7fd fbfe 	bl	802ec1c <_Balloc>
 8031420:	4604      	mov	r4, r0
 8031422:	b940      	cbnz	r0, 8031436 <__gethex+0x166>
 8031424:	4b61      	ldr	r3, [pc, #388]	; (80315ac <__gethex+0x2dc>)
 8031426:	4602      	mov	r2, r0
 8031428:	21e4      	movs	r1, #228	; 0xe4
 803142a:	4861      	ldr	r0, [pc, #388]	; (80315b0 <__gethex+0x2e0>)
 803142c:	f7fb f96e 	bl	802c70c <__assert_func>
 8031430:	3101      	adds	r1, #1
 8031432:	105b      	asrs	r3, r3, #1
 8031434:	e7ef      	b.n	8031416 <__gethex+0x146>
 8031436:	f100 0a14 	add.w	sl, r0, #20
 803143a:	2300      	movs	r3, #0
 803143c:	495a      	ldr	r1, [pc, #360]	; (80315a8 <__gethex+0x2d8>)
 803143e:	f8cd a004 	str.w	sl, [sp, #4]
 8031442:	469b      	mov	fp, r3
 8031444:	45a8      	cmp	r8, r5
 8031446:	d342      	bcc.n	80314ce <__gethex+0x1fe>
 8031448:	9801      	ldr	r0, [sp, #4]
 803144a:	f840 bb04 	str.w	fp, [r0], #4
 803144e:	eba0 000a 	sub.w	r0, r0, sl
 8031452:	1080      	asrs	r0, r0, #2
 8031454:	6120      	str	r0, [r4, #16]
 8031456:	ea4f 1840 	mov.w	r8, r0, lsl #5
 803145a:	4658      	mov	r0, fp
 803145c:	f7fd fcd0 	bl	802ee00 <__hi0bits>
 8031460:	683d      	ldr	r5, [r7, #0]
 8031462:	eba8 0000 	sub.w	r0, r8, r0
 8031466:	42a8      	cmp	r0, r5
 8031468:	dd59      	ble.n	803151e <__gethex+0x24e>
 803146a:	eba0 0805 	sub.w	r8, r0, r5
 803146e:	4641      	mov	r1, r8
 8031470:	4620      	mov	r0, r4
 8031472:	f7fe f85f 	bl	802f534 <__any_on>
 8031476:	4683      	mov	fp, r0
 8031478:	b1b8      	cbz	r0, 80314aa <__gethex+0x1da>
 803147a:	f108 33ff 	add.w	r3, r8, #4294967295
 803147e:	1159      	asrs	r1, r3, #5
 8031480:	f003 021f 	and.w	r2, r3, #31
 8031484:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8031488:	f04f 0b01 	mov.w	fp, #1
 803148c:	fa0b f202 	lsl.w	r2, fp, r2
 8031490:	420a      	tst	r2, r1
 8031492:	d00a      	beq.n	80314aa <__gethex+0x1da>
 8031494:	455b      	cmp	r3, fp
 8031496:	dd06      	ble.n	80314a6 <__gethex+0x1d6>
 8031498:	f1a8 0102 	sub.w	r1, r8, #2
 803149c:	4620      	mov	r0, r4
 803149e:	f7fe f849 	bl	802f534 <__any_on>
 80314a2:	2800      	cmp	r0, #0
 80314a4:	d138      	bne.n	8031518 <__gethex+0x248>
 80314a6:	f04f 0b02 	mov.w	fp, #2
 80314aa:	4641      	mov	r1, r8
 80314ac:	4620      	mov	r0, r4
 80314ae:	f7ff fea7 	bl	8031200 <rshift>
 80314b2:	4446      	add	r6, r8
 80314b4:	68bb      	ldr	r3, [r7, #8]
 80314b6:	42b3      	cmp	r3, r6
 80314b8:	da41      	bge.n	803153e <__gethex+0x26e>
 80314ba:	4621      	mov	r1, r4
 80314bc:	4648      	mov	r0, r9
 80314be:	f7fd fbed 	bl	802ec9c <_Bfree>
 80314c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80314c4:	2300      	movs	r3, #0
 80314c6:	6013      	str	r3, [r2, #0]
 80314c8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80314cc:	e78a      	b.n	80313e4 <__gethex+0x114>
 80314ce:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80314d2:	2a2e      	cmp	r2, #46	; 0x2e
 80314d4:	d014      	beq.n	8031500 <__gethex+0x230>
 80314d6:	2b20      	cmp	r3, #32
 80314d8:	d106      	bne.n	80314e8 <__gethex+0x218>
 80314da:	9b01      	ldr	r3, [sp, #4]
 80314dc:	f843 bb04 	str.w	fp, [r3], #4
 80314e0:	f04f 0b00 	mov.w	fp, #0
 80314e4:	9301      	str	r3, [sp, #4]
 80314e6:	465b      	mov	r3, fp
 80314e8:	7828      	ldrb	r0, [r5, #0]
 80314ea:	9303      	str	r3, [sp, #12]
 80314ec:	f7ff feda 	bl	80312a4 <__hexdig_fun>
 80314f0:	9b03      	ldr	r3, [sp, #12]
 80314f2:	f000 000f 	and.w	r0, r0, #15
 80314f6:	4098      	lsls	r0, r3
 80314f8:	ea4b 0b00 	orr.w	fp, fp, r0
 80314fc:	3304      	adds	r3, #4
 80314fe:	e7a1      	b.n	8031444 <__gethex+0x174>
 8031500:	45a8      	cmp	r8, r5
 8031502:	d8e8      	bhi.n	80314d6 <__gethex+0x206>
 8031504:	2201      	movs	r2, #1
 8031506:	4628      	mov	r0, r5
 8031508:	9303      	str	r3, [sp, #12]
 803150a:	f7fc fb17 	bl	802db3c <strncmp>
 803150e:	4926      	ldr	r1, [pc, #152]	; (80315a8 <__gethex+0x2d8>)
 8031510:	9b03      	ldr	r3, [sp, #12]
 8031512:	2800      	cmp	r0, #0
 8031514:	d1df      	bne.n	80314d6 <__gethex+0x206>
 8031516:	e795      	b.n	8031444 <__gethex+0x174>
 8031518:	f04f 0b03 	mov.w	fp, #3
 803151c:	e7c5      	b.n	80314aa <__gethex+0x1da>
 803151e:	da0b      	bge.n	8031538 <__gethex+0x268>
 8031520:	eba5 0800 	sub.w	r8, r5, r0
 8031524:	4621      	mov	r1, r4
 8031526:	4642      	mov	r2, r8
 8031528:	4648      	mov	r0, r9
 803152a:	f7fd fdd1 	bl	802f0d0 <__lshift>
 803152e:	eba6 0608 	sub.w	r6, r6, r8
 8031532:	4604      	mov	r4, r0
 8031534:	f100 0a14 	add.w	sl, r0, #20
 8031538:	f04f 0b00 	mov.w	fp, #0
 803153c:	e7ba      	b.n	80314b4 <__gethex+0x1e4>
 803153e:	687b      	ldr	r3, [r7, #4]
 8031540:	42b3      	cmp	r3, r6
 8031542:	dd73      	ble.n	803162c <__gethex+0x35c>
 8031544:	1b9e      	subs	r6, r3, r6
 8031546:	42b5      	cmp	r5, r6
 8031548:	dc34      	bgt.n	80315b4 <__gethex+0x2e4>
 803154a:	68fb      	ldr	r3, [r7, #12]
 803154c:	2b02      	cmp	r3, #2
 803154e:	d023      	beq.n	8031598 <__gethex+0x2c8>
 8031550:	2b03      	cmp	r3, #3
 8031552:	d025      	beq.n	80315a0 <__gethex+0x2d0>
 8031554:	2b01      	cmp	r3, #1
 8031556:	d115      	bne.n	8031584 <__gethex+0x2b4>
 8031558:	42b5      	cmp	r5, r6
 803155a:	d113      	bne.n	8031584 <__gethex+0x2b4>
 803155c:	2d01      	cmp	r5, #1
 803155e:	d10b      	bne.n	8031578 <__gethex+0x2a8>
 8031560:	9a02      	ldr	r2, [sp, #8]
 8031562:	687b      	ldr	r3, [r7, #4]
 8031564:	6013      	str	r3, [r2, #0]
 8031566:	2301      	movs	r3, #1
 8031568:	6123      	str	r3, [r4, #16]
 803156a:	f8ca 3000 	str.w	r3, [sl]
 803156e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8031570:	f04f 0862 	mov.w	r8, #98	; 0x62
 8031574:	601c      	str	r4, [r3, #0]
 8031576:	e735      	b.n	80313e4 <__gethex+0x114>
 8031578:	1e69      	subs	r1, r5, #1
 803157a:	4620      	mov	r0, r4
 803157c:	f7fd ffda 	bl	802f534 <__any_on>
 8031580:	2800      	cmp	r0, #0
 8031582:	d1ed      	bne.n	8031560 <__gethex+0x290>
 8031584:	4621      	mov	r1, r4
 8031586:	4648      	mov	r0, r9
 8031588:	f7fd fb88 	bl	802ec9c <_Bfree>
 803158c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 803158e:	2300      	movs	r3, #0
 8031590:	6013      	str	r3, [r2, #0]
 8031592:	f04f 0850 	mov.w	r8, #80	; 0x50
 8031596:	e725      	b.n	80313e4 <__gethex+0x114>
 8031598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803159a:	2b00      	cmp	r3, #0
 803159c:	d1f2      	bne.n	8031584 <__gethex+0x2b4>
 803159e:	e7df      	b.n	8031560 <__gethex+0x290>
 80315a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80315a2:	2b00      	cmp	r3, #0
 80315a4:	d1dc      	bne.n	8031560 <__gethex+0x290>
 80315a6:	e7ed      	b.n	8031584 <__gethex+0x2b4>
 80315a8:	08034fac 	.word	0x08034fac
 80315ac:	08034e41 	.word	0x08034e41
 80315b0:	08035135 	.word	0x08035135
 80315b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80315b8:	f1bb 0f00 	cmp.w	fp, #0
 80315bc:	d133      	bne.n	8031626 <__gethex+0x356>
 80315be:	f1b8 0f00 	cmp.w	r8, #0
 80315c2:	d004      	beq.n	80315ce <__gethex+0x2fe>
 80315c4:	4641      	mov	r1, r8
 80315c6:	4620      	mov	r0, r4
 80315c8:	f7fd ffb4 	bl	802f534 <__any_on>
 80315cc:	4683      	mov	fp, r0
 80315ce:	ea4f 1268 	mov.w	r2, r8, asr #5
 80315d2:	2301      	movs	r3, #1
 80315d4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80315d8:	f008 081f 	and.w	r8, r8, #31
 80315dc:	fa03 f308 	lsl.w	r3, r3, r8
 80315e0:	4213      	tst	r3, r2
 80315e2:	4631      	mov	r1, r6
 80315e4:	4620      	mov	r0, r4
 80315e6:	bf18      	it	ne
 80315e8:	f04b 0b02 	orrne.w	fp, fp, #2
 80315ec:	1bad      	subs	r5, r5, r6
 80315ee:	f7ff fe07 	bl	8031200 <rshift>
 80315f2:	687e      	ldr	r6, [r7, #4]
 80315f4:	f04f 0802 	mov.w	r8, #2
 80315f8:	f1bb 0f00 	cmp.w	fp, #0
 80315fc:	d04a      	beq.n	8031694 <__gethex+0x3c4>
 80315fe:	68fb      	ldr	r3, [r7, #12]
 8031600:	2b02      	cmp	r3, #2
 8031602:	d016      	beq.n	8031632 <__gethex+0x362>
 8031604:	2b03      	cmp	r3, #3
 8031606:	d018      	beq.n	803163a <__gethex+0x36a>
 8031608:	2b01      	cmp	r3, #1
 803160a:	d109      	bne.n	8031620 <__gethex+0x350>
 803160c:	f01b 0f02 	tst.w	fp, #2
 8031610:	d006      	beq.n	8031620 <__gethex+0x350>
 8031612:	f8da 3000 	ldr.w	r3, [sl]
 8031616:	ea4b 0b03 	orr.w	fp, fp, r3
 803161a:	f01b 0f01 	tst.w	fp, #1
 803161e:	d10f      	bne.n	8031640 <__gethex+0x370>
 8031620:	f048 0810 	orr.w	r8, r8, #16
 8031624:	e036      	b.n	8031694 <__gethex+0x3c4>
 8031626:	f04f 0b01 	mov.w	fp, #1
 803162a:	e7d0      	b.n	80315ce <__gethex+0x2fe>
 803162c:	f04f 0801 	mov.w	r8, #1
 8031630:	e7e2      	b.n	80315f8 <__gethex+0x328>
 8031632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8031634:	f1c3 0301 	rsb	r3, r3, #1
 8031638:	930f      	str	r3, [sp, #60]	; 0x3c
 803163a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 803163c:	2b00      	cmp	r3, #0
 803163e:	d0ef      	beq.n	8031620 <__gethex+0x350>
 8031640:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8031644:	f104 0214 	add.w	r2, r4, #20
 8031648:	ea4f 038b 	mov.w	r3, fp, lsl #2
 803164c:	9301      	str	r3, [sp, #4]
 803164e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8031652:	2300      	movs	r3, #0
 8031654:	4694      	mov	ip, r2
 8031656:	f852 1b04 	ldr.w	r1, [r2], #4
 803165a:	f1b1 3fff 	cmp.w	r1, #4294967295
 803165e:	d01e      	beq.n	803169e <__gethex+0x3ce>
 8031660:	3101      	adds	r1, #1
 8031662:	f8cc 1000 	str.w	r1, [ip]
 8031666:	f1b8 0f02 	cmp.w	r8, #2
 803166a:	f104 0214 	add.w	r2, r4, #20
 803166e:	d13d      	bne.n	80316ec <__gethex+0x41c>
 8031670:	683b      	ldr	r3, [r7, #0]
 8031672:	3b01      	subs	r3, #1
 8031674:	42ab      	cmp	r3, r5
 8031676:	d10b      	bne.n	8031690 <__gethex+0x3c0>
 8031678:	1169      	asrs	r1, r5, #5
 803167a:	2301      	movs	r3, #1
 803167c:	f005 051f 	and.w	r5, r5, #31
 8031680:	fa03 f505 	lsl.w	r5, r3, r5
 8031684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8031688:	421d      	tst	r5, r3
 803168a:	bf18      	it	ne
 803168c:	f04f 0801 	movne.w	r8, #1
 8031690:	f048 0820 	orr.w	r8, r8, #32
 8031694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8031696:	601c      	str	r4, [r3, #0]
 8031698:	9b02      	ldr	r3, [sp, #8]
 803169a:	601e      	str	r6, [r3, #0]
 803169c:	e6a2      	b.n	80313e4 <__gethex+0x114>
 803169e:	4290      	cmp	r0, r2
 80316a0:	f842 3c04 	str.w	r3, [r2, #-4]
 80316a4:	d8d6      	bhi.n	8031654 <__gethex+0x384>
 80316a6:	68a2      	ldr	r2, [r4, #8]
 80316a8:	4593      	cmp	fp, r2
 80316aa:	db17      	blt.n	80316dc <__gethex+0x40c>
 80316ac:	6861      	ldr	r1, [r4, #4]
 80316ae:	4648      	mov	r0, r9
 80316b0:	3101      	adds	r1, #1
 80316b2:	f7fd fab3 	bl	802ec1c <_Balloc>
 80316b6:	4682      	mov	sl, r0
 80316b8:	b918      	cbnz	r0, 80316c2 <__gethex+0x3f2>
 80316ba:	4b1b      	ldr	r3, [pc, #108]	; (8031728 <__gethex+0x458>)
 80316bc:	4602      	mov	r2, r0
 80316be:	2184      	movs	r1, #132	; 0x84
 80316c0:	e6b3      	b.n	803142a <__gethex+0x15a>
 80316c2:	6922      	ldr	r2, [r4, #16]
 80316c4:	3202      	adds	r2, #2
 80316c6:	f104 010c 	add.w	r1, r4, #12
 80316ca:	0092      	lsls	r2, r2, #2
 80316cc:	300c      	adds	r0, #12
 80316ce:	f7fc fbc2 	bl	802de56 <memcpy>
 80316d2:	4621      	mov	r1, r4
 80316d4:	4648      	mov	r0, r9
 80316d6:	f7fd fae1 	bl	802ec9c <_Bfree>
 80316da:	4654      	mov	r4, sl
 80316dc:	6922      	ldr	r2, [r4, #16]
 80316de:	1c51      	adds	r1, r2, #1
 80316e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80316e4:	6121      	str	r1, [r4, #16]
 80316e6:	2101      	movs	r1, #1
 80316e8:	6151      	str	r1, [r2, #20]
 80316ea:	e7bc      	b.n	8031666 <__gethex+0x396>
 80316ec:	6921      	ldr	r1, [r4, #16]
 80316ee:	4559      	cmp	r1, fp
 80316f0:	dd0b      	ble.n	803170a <__gethex+0x43a>
 80316f2:	2101      	movs	r1, #1
 80316f4:	4620      	mov	r0, r4
 80316f6:	f7ff fd83 	bl	8031200 <rshift>
 80316fa:	68bb      	ldr	r3, [r7, #8]
 80316fc:	3601      	adds	r6, #1
 80316fe:	42b3      	cmp	r3, r6
 8031700:	f6ff aedb 	blt.w	80314ba <__gethex+0x1ea>
 8031704:	f04f 0801 	mov.w	r8, #1
 8031708:	e7c2      	b.n	8031690 <__gethex+0x3c0>
 803170a:	f015 051f 	ands.w	r5, r5, #31
 803170e:	d0f9      	beq.n	8031704 <__gethex+0x434>
 8031710:	9b01      	ldr	r3, [sp, #4]
 8031712:	441a      	add	r2, r3
 8031714:	f1c5 0520 	rsb	r5, r5, #32
 8031718:	f852 0c04 	ldr.w	r0, [r2, #-4]
 803171c:	f7fd fb70 	bl	802ee00 <__hi0bits>
 8031720:	42a8      	cmp	r0, r5
 8031722:	dbe6      	blt.n	80316f2 <__gethex+0x422>
 8031724:	e7ee      	b.n	8031704 <__gethex+0x434>
 8031726:	bf00      	nop
 8031728:	08034e41 	.word	0x08034e41

0803172c <L_shift>:
 803172c:	f1c2 0208 	rsb	r2, r2, #8
 8031730:	0092      	lsls	r2, r2, #2
 8031732:	b570      	push	{r4, r5, r6, lr}
 8031734:	f1c2 0620 	rsb	r6, r2, #32
 8031738:	6843      	ldr	r3, [r0, #4]
 803173a:	6804      	ldr	r4, [r0, #0]
 803173c:	fa03 f506 	lsl.w	r5, r3, r6
 8031740:	432c      	orrs	r4, r5
 8031742:	40d3      	lsrs	r3, r2
 8031744:	6004      	str	r4, [r0, #0]
 8031746:	f840 3f04 	str.w	r3, [r0, #4]!
 803174a:	4288      	cmp	r0, r1
 803174c:	d3f4      	bcc.n	8031738 <L_shift+0xc>
 803174e:	bd70      	pop	{r4, r5, r6, pc}

08031750 <__match>:
 8031750:	b530      	push	{r4, r5, lr}
 8031752:	6803      	ldr	r3, [r0, #0]
 8031754:	3301      	adds	r3, #1
 8031756:	f811 4b01 	ldrb.w	r4, [r1], #1
 803175a:	b914      	cbnz	r4, 8031762 <__match+0x12>
 803175c:	6003      	str	r3, [r0, #0]
 803175e:	2001      	movs	r0, #1
 8031760:	bd30      	pop	{r4, r5, pc}
 8031762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8031766:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 803176a:	2d19      	cmp	r5, #25
 803176c:	bf98      	it	ls
 803176e:	3220      	addls	r2, #32
 8031770:	42a2      	cmp	r2, r4
 8031772:	d0f0      	beq.n	8031756 <__match+0x6>
 8031774:	2000      	movs	r0, #0
 8031776:	e7f3      	b.n	8031760 <__match+0x10>

08031778 <__hexnan>:
 8031778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 803177c:	680b      	ldr	r3, [r1, #0]
 803177e:	6801      	ldr	r1, [r0, #0]
 8031780:	115e      	asrs	r6, r3, #5
 8031782:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8031786:	f013 031f 	ands.w	r3, r3, #31
 803178a:	b087      	sub	sp, #28
 803178c:	bf18      	it	ne
 803178e:	3604      	addne	r6, #4
 8031790:	2500      	movs	r5, #0
 8031792:	1f37      	subs	r7, r6, #4
 8031794:	4682      	mov	sl, r0
 8031796:	4690      	mov	r8, r2
 8031798:	9301      	str	r3, [sp, #4]
 803179a:	f846 5c04 	str.w	r5, [r6, #-4]
 803179e:	46b9      	mov	r9, r7
 80317a0:	463c      	mov	r4, r7
 80317a2:	9502      	str	r5, [sp, #8]
 80317a4:	46ab      	mov	fp, r5
 80317a6:	784a      	ldrb	r2, [r1, #1]
 80317a8:	1c4b      	adds	r3, r1, #1
 80317aa:	9303      	str	r3, [sp, #12]
 80317ac:	b342      	cbz	r2, 8031800 <__hexnan+0x88>
 80317ae:	4610      	mov	r0, r2
 80317b0:	9105      	str	r1, [sp, #20]
 80317b2:	9204      	str	r2, [sp, #16]
 80317b4:	f7ff fd76 	bl	80312a4 <__hexdig_fun>
 80317b8:	2800      	cmp	r0, #0
 80317ba:	d14f      	bne.n	803185c <__hexnan+0xe4>
 80317bc:	9a04      	ldr	r2, [sp, #16]
 80317be:	9905      	ldr	r1, [sp, #20]
 80317c0:	2a20      	cmp	r2, #32
 80317c2:	d818      	bhi.n	80317f6 <__hexnan+0x7e>
 80317c4:	9b02      	ldr	r3, [sp, #8]
 80317c6:	459b      	cmp	fp, r3
 80317c8:	dd13      	ble.n	80317f2 <__hexnan+0x7a>
 80317ca:	454c      	cmp	r4, r9
 80317cc:	d206      	bcs.n	80317dc <__hexnan+0x64>
 80317ce:	2d07      	cmp	r5, #7
 80317d0:	dc04      	bgt.n	80317dc <__hexnan+0x64>
 80317d2:	462a      	mov	r2, r5
 80317d4:	4649      	mov	r1, r9
 80317d6:	4620      	mov	r0, r4
 80317d8:	f7ff ffa8 	bl	803172c <L_shift>
 80317dc:	4544      	cmp	r4, r8
 80317de:	d950      	bls.n	8031882 <__hexnan+0x10a>
 80317e0:	2300      	movs	r3, #0
 80317e2:	f1a4 0904 	sub.w	r9, r4, #4
 80317e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80317ea:	f8cd b008 	str.w	fp, [sp, #8]
 80317ee:	464c      	mov	r4, r9
 80317f0:	461d      	mov	r5, r3
 80317f2:	9903      	ldr	r1, [sp, #12]
 80317f4:	e7d7      	b.n	80317a6 <__hexnan+0x2e>
 80317f6:	2a29      	cmp	r2, #41	; 0x29
 80317f8:	d155      	bne.n	80318a6 <__hexnan+0x12e>
 80317fa:	3102      	adds	r1, #2
 80317fc:	f8ca 1000 	str.w	r1, [sl]
 8031800:	f1bb 0f00 	cmp.w	fp, #0
 8031804:	d04f      	beq.n	80318a6 <__hexnan+0x12e>
 8031806:	454c      	cmp	r4, r9
 8031808:	d206      	bcs.n	8031818 <__hexnan+0xa0>
 803180a:	2d07      	cmp	r5, #7
 803180c:	dc04      	bgt.n	8031818 <__hexnan+0xa0>
 803180e:	462a      	mov	r2, r5
 8031810:	4649      	mov	r1, r9
 8031812:	4620      	mov	r0, r4
 8031814:	f7ff ff8a 	bl	803172c <L_shift>
 8031818:	4544      	cmp	r4, r8
 803181a:	d934      	bls.n	8031886 <__hexnan+0x10e>
 803181c:	f1a8 0204 	sub.w	r2, r8, #4
 8031820:	4623      	mov	r3, r4
 8031822:	f853 1b04 	ldr.w	r1, [r3], #4
 8031826:	f842 1f04 	str.w	r1, [r2, #4]!
 803182a:	429f      	cmp	r7, r3
 803182c:	d2f9      	bcs.n	8031822 <__hexnan+0xaa>
 803182e:	1b3b      	subs	r3, r7, r4
 8031830:	f023 0303 	bic.w	r3, r3, #3
 8031834:	3304      	adds	r3, #4
 8031836:	3e03      	subs	r6, #3
 8031838:	3401      	adds	r4, #1
 803183a:	42a6      	cmp	r6, r4
 803183c:	bf38      	it	cc
 803183e:	2304      	movcc	r3, #4
 8031840:	4443      	add	r3, r8
 8031842:	2200      	movs	r2, #0
 8031844:	f843 2b04 	str.w	r2, [r3], #4
 8031848:	429f      	cmp	r7, r3
 803184a:	d2fb      	bcs.n	8031844 <__hexnan+0xcc>
 803184c:	683b      	ldr	r3, [r7, #0]
 803184e:	b91b      	cbnz	r3, 8031858 <__hexnan+0xe0>
 8031850:	4547      	cmp	r7, r8
 8031852:	d126      	bne.n	80318a2 <__hexnan+0x12a>
 8031854:	2301      	movs	r3, #1
 8031856:	603b      	str	r3, [r7, #0]
 8031858:	2005      	movs	r0, #5
 803185a:	e025      	b.n	80318a8 <__hexnan+0x130>
 803185c:	3501      	adds	r5, #1
 803185e:	2d08      	cmp	r5, #8
 8031860:	f10b 0b01 	add.w	fp, fp, #1
 8031864:	dd06      	ble.n	8031874 <__hexnan+0xfc>
 8031866:	4544      	cmp	r4, r8
 8031868:	d9c3      	bls.n	80317f2 <__hexnan+0x7a>
 803186a:	2300      	movs	r3, #0
 803186c:	f844 3c04 	str.w	r3, [r4, #-4]
 8031870:	2501      	movs	r5, #1
 8031872:	3c04      	subs	r4, #4
 8031874:	6822      	ldr	r2, [r4, #0]
 8031876:	f000 000f 	and.w	r0, r0, #15
 803187a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 803187e:	6020      	str	r0, [r4, #0]
 8031880:	e7b7      	b.n	80317f2 <__hexnan+0x7a>
 8031882:	2508      	movs	r5, #8
 8031884:	e7b5      	b.n	80317f2 <__hexnan+0x7a>
 8031886:	9b01      	ldr	r3, [sp, #4]
 8031888:	2b00      	cmp	r3, #0
 803188a:	d0df      	beq.n	803184c <__hexnan+0xd4>
 803188c:	f1c3 0320 	rsb	r3, r3, #32
 8031890:	f04f 32ff 	mov.w	r2, #4294967295
 8031894:	40da      	lsrs	r2, r3
 8031896:	f856 3c04 	ldr.w	r3, [r6, #-4]
 803189a:	4013      	ands	r3, r2
 803189c:	f846 3c04 	str.w	r3, [r6, #-4]
 80318a0:	e7d4      	b.n	803184c <__hexnan+0xd4>
 80318a2:	3f04      	subs	r7, #4
 80318a4:	e7d2      	b.n	803184c <__hexnan+0xd4>
 80318a6:	2004      	movs	r0, #4
 80318a8:	b007      	add	sp, #28
 80318aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080318ae <__ascii_mbtowc>:
 80318ae:	b082      	sub	sp, #8
 80318b0:	b901      	cbnz	r1, 80318b4 <__ascii_mbtowc+0x6>
 80318b2:	a901      	add	r1, sp, #4
 80318b4:	b142      	cbz	r2, 80318c8 <__ascii_mbtowc+0x1a>
 80318b6:	b14b      	cbz	r3, 80318cc <__ascii_mbtowc+0x1e>
 80318b8:	7813      	ldrb	r3, [r2, #0]
 80318ba:	600b      	str	r3, [r1, #0]
 80318bc:	7812      	ldrb	r2, [r2, #0]
 80318be:	1e10      	subs	r0, r2, #0
 80318c0:	bf18      	it	ne
 80318c2:	2001      	movne	r0, #1
 80318c4:	b002      	add	sp, #8
 80318c6:	4770      	bx	lr
 80318c8:	4610      	mov	r0, r2
 80318ca:	e7fb      	b.n	80318c4 <__ascii_mbtowc+0x16>
 80318cc:	f06f 0001 	mvn.w	r0, #1
 80318d0:	e7f8      	b.n	80318c4 <__ascii_mbtowc+0x16>

080318d2 <_realloc_r>:
 80318d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80318d6:	4680      	mov	r8, r0
 80318d8:	4614      	mov	r4, r2
 80318da:	460e      	mov	r6, r1
 80318dc:	b921      	cbnz	r1, 80318e8 <_realloc_r+0x16>
 80318de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80318e2:	4611      	mov	r1, r2
 80318e4:	f7fa bf76 	b.w	802c7d4 <_malloc_r>
 80318e8:	b92a      	cbnz	r2, 80318f6 <_realloc_r+0x24>
 80318ea:	f7fd f94b 	bl	802eb84 <_free_r>
 80318ee:	4625      	mov	r5, r4
 80318f0:	4628      	mov	r0, r5
 80318f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80318f6:	f000 f89c 	bl	8031a32 <_malloc_usable_size_r>
 80318fa:	4284      	cmp	r4, r0
 80318fc:	4607      	mov	r7, r0
 80318fe:	d802      	bhi.n	8031906 <_realloc_r+0x34>
 8031900:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8031904:	d812      	bhi.n	803192c <_realloc_r+0x5a>
 8031906:	4621      	mov	r1, r4
 8031908:	4640      	mov	r0, r8
 803190a:	f7fa ff63 	bl	802c7d4 <_malloc_r>
 803190e:	4605      	mov	r5, r0
 8031910:	2800      	cmp	r0, #0
 8031912:	d0ed      	beq.n	80318f0 <_realloc_r+0x1e>
 8031914:	42bc      	cmp	r4, r7
 8031916:	4622      	mov	r2, r4
 8031918:	4631      	mov	r1, r6
 803191a:	bf28      	it	cs
 803191c:	463a      	movcs	r2, r7
 803191e:	f7fc fa9a 	bl	802de56 <memcpy>
 8031922:	4631      	mov	r1, r6
 8031924:	4640      	mov	r0, r8
 8031926:	f7fd f92d 	bl	802eb84 <_free_r>
 803192a:	e7e1      	b.n	80318f0 <_realloc_r+0x1e>
 803192c:	4635      	mov	r5, r6
 803192e:	e7df      	b.n	80318f0 <_realloc_r+0x1e>

08031930 <_strtoul_l.constprop.0>:
 8031930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8031934:	4f36      	ldr	r7, [pc, #216]	; (8031a10 <_strtoul_l.constprop.0+0xe0>)
 8031936:	4686      	mov	lr, r0
 8031938:	460d      	mov	r5, r1
 803193a:	4628      	mov	r0, r5
 803193c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8031940:	5d3e      	ldrb	r6, [r7, r4]
 8031942:	f016 0608 	ands.w	r6, r6, #8
 8031946:	d1f8      	bne.n	803193a <_strtoul_l.constprop.0+0xa>
 8031948:	2c2d      	cmp	r4, #45	; 0x2d
 803194a:	d130      	bne.n	80319ae <_strtoul_l.constprop.0+0x7e>
 803194c:	782c      	ldrb	r4, [r5, #0]
 803194e:	2601      	movs	r6, #1
 8031950:	1c85      	adds	r5, r0, #2
 8031952:	2b00      	cmp	r3, #0
 8031954:	d057      	beq.n	8031a06 <_strtoul_l.constprop.0+0xd6>
 8031956:	2b10      	cmp	r3, #16
 8031958:	d109      	bne.n	803196e <_strtoul_l.constprop.0+0x3e>
 803195a:	2c30      	cmp	r4, #48	; 0x30
 803195c:	d107      	bne.n	803196e <_strtoul_l.constprop.0+0x3e>
 803195e:	7828      	ldrb	r0, [r5, #0]
 8031960:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8031964:	2858      	cmp	r0, #88	; 0x58
 8031966:	d149      	bne.n	80319fc <_strtoul_l.constprop.0+0xcc>
 8031968:	786c      	ldrb	r4, [r5, #1]
 803196a:	2310      	movs	r3, #16
 803196c:	3502      	adds	r5, #2
 803196e:	f04f 38ff 	mov.w	r8, #4294967295
 8031972:	2700      	movs	r7, #0
 8031974:	fbb8 f8f3 	udiv	r8, r8, r3
 8031978:	fb03 f908 	mul.w	r9, r3, r8
 803197c:	ea6f 0909 	mvn.w	r9, r9
 8031980:	4638      	mov	r0, r7
 8031982:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8031986:	f1bc 0f09 	cmp.w	ip, #9
 803198a:	d815      	bhi.n	80319b8 <_strtoul_l.constprop.0+0x88>
 803198c:	4664      	mov	r4, ip
 803198e:	42a3      	cmp	r3, r4
 8031990:	dd23      	ble.n	80319da <_strtoul_l.constprop.0+0xaa>
 8031992:	f1b7 3fff 	cmp.w	r7, #4294967295
 8031996:	d007      	beq.n	80319a8 <_strtoul_l.constprop.0+0x78>
 8031998:	4580      	cmp	r8, r0
 803199a:	d31b      	bcc.n	80319d4 <_strtoul_l.constprop.0+0xa4>
 803199c:	d101      	bne.n	80319a2 <_strtoul_l.constprop.0+0x72>
 803199e:	45a1      	cmp	r9, r4
 80319a0:	db18      	blt.n	80319d4 <_strtoul_l.constprop.0+0xa4>
 80319a2:	fb00 4003 	mla	r0, r0, r3, r4
 80319a6:	2701      	movs	r7, #1
 80319a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80319ac:	e7e9      	b.n	8031982 <_strtoul_l.constprop.0+0x52>
 80319ae:	2c2b      	cmp	r4, #43	; 0x2b
 80319b0:	bf04      	itt	eq
 80319b2:	782c      	ldrbeq	r4, [r5, #0]
 80319b4:	1c85      	addeq	r5, r0, #2
 80319b6:	e7cc      	b.n	8031952 <_strtoul_l.constprop.0+0x22>
 80319b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80319bc:	f1bc 0f19 	cmp.w	ip, #25
 80319c0:	d801      	bhi.n	80319c6 <_strtoul_l.constprop.0+0x96>
 80319c2:	3c37      	subs	r4, #55	; 0x37
 80319c4:	e7e3      	b.n	803198e <_strtoul_l.constprop.0+0x5e>
 80319c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80319ca:	f1bc 0f19 	cmp.w	ip, #25
 80319ce:	d804      	bhi.n	80319da <_strtoul_l.constprop.0+0xaa>
 80319d0:	3c57      	subs	r4, #87	; 0x57
 80319d2:	e7dc      	b.n	803198e <_strtoul_l.constprop.0+0x5e>
 80319d4:	f04f 37ff 	mov.w	r7, #4294967295
 80319d8:	e7e6      	b.n	80319a8 <_strtoul_l.constprop.0+0x78>
 80319da:	1c7b      	adds	r3, r7, #1
 80319dc:	d106      	bne.n	80319ec <_strtoul_l.constprop.0+0xbc>
 80319de:	2322      	movs	r3, #34	; 0x22
 80319e0:	f8ce 3000 	str.w	r3, [lr]
 80319e4:	4638      	mov	r0, r7
 80319e6:	b932      	cbnz	r2, 80319f6 <_strtoul_l.constprop.0+0xc6>
 80319e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80319ec:	b106      	cbz	r6, 80319f0 <_strtoul_l.constprop.0+0xc0>
 80319ee:	4240      	negs	r0, r0
 80319f0:	2a00      	cmp	r2, #0
 80319f2:	d0f9      	beq.n	80319e8 <_strtoul_l.constprop.0+0xb8>
 80319f4:	b107      	cbz	r7, 80319f8 <_strtoul_l.constprop.0+0xc8>
 80319f6:	1e69      	subs	r1, r5, #1
 80319f8:	6011      	str	r1, [r2, #0]
 80319fa:	e7f5      	b.n	80319e8 <_strtoul_l.constprop.0+0xb8>
 80319fc:	2430      	movs	r4, #48	; 0x30
 80319fe:	2b00      	cmp	r3, #0
 8031a00:	d1b5      	bne.n	803196e <_strtoul_l.constprop.0+0x3e>
 8031a02:	2308      	movs	r3, #8
 8031a04:	e7b3      	b.n	803196e <_strtoul_l.constprop.0+0x3e>
 8031a06:	2c30      	cmp	r4, #48	; 0x30
 8031a08:	d0a9      	beq.n	803195e <_strtoul_l.constprop.0+0x2e>
 8031a0a:	230a      	movs	r3, #10
 8031a0c:	e7af      	b.n	803196e <_strtoul_l.constprop.0+0x3e>
 8031a0e:	bf00      	nop
 8031a10:	08035001 	.word	0x08035001

08031a14 <_strtoul_r>:
 8031a14:	f7ff bf8c 	b.w	8031930 <_strtoul_l.constprop.0>

08031a18 <__ascii_wctomb>:
 8031a18:	b149      	cbz	r1, 8031a2e <__ascii_wctomb+0x16>
 8031a1a:	2aff      	cmp	r2, #255	; 0xff
 8031a1c:	bf85      	ittet	hi
 8031a1e:	238a      	movhi	r3, #138	; 0x8a
 8031a20:	6003      	strhi	r3, [r0, #0]
 8031a22:	700a      	strbls	r2, [r1, #0]
 8031a24:	f04f 30ff 	movhi.w	r0, #4294967295
 8031a28:	bf98      	it	ls
 8031a2a:	2001      	movls	r0, #1
 8031a2c:	4770      	bx	lr
 8031a2e:	4608      	mov	r0, r1
 8031a30:	4770      	bx	lr

08031a32 <_malloc_usable_size_r>:
 8031a32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8031a36:	1f18      	subs	r0, r3, #4
 8031a38:	2b00      	cmp	r3, #0
 8031a3a:	bfbc      	itt	lt
 8031a3c:	580b      	ldrlt	r3, [r1, r0]
 8031a3e:	18c0      	addlt	r0, r0, r3
 8031a40:	4770      	bx	lr
	...

08031a44 <_init>:
 8031a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a46:	bf00      	nop
 8031a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a4a:	bc08      	pop	{r3}
 8031a4c:	469e      	mov	lr, r3
 8031a4e:	4770      	bx	lr

08031a50 <_fini>:
 8031a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8031a52:	bf00      	nop
 8031a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8031a56:	bc08      	pop	{r3}
 8031a58:	469e      	mov	lr, r3
 8031a5a:	4770      	bx	lr
